BOOL specialized static GraphicsFilter.ShaderFilter.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  int v2;
  double v3;
  double v4;
  uint64_t v5;
  int v6;
  double v7;
  double v8;
  uint64_t v10;
  long long v11;
  int v12;
  uint64_t v13;
  long long v14;
  int v15;

  v2 = *((_DWORD *)a1 + 6);
  v4 = *((double *)a1 + 4);
  v3 = *((double *)a1 + 5);
  v5 = *a2;
  v6 = *((_DWORD *)a2 + 6);
  v8 = *((double *)a2 + 4);
  v7 = *((double *)a2 + 5);
  v13 = *a1;
  v14 = *(_OWORD *)(a1 + 1);
  v15 = v2;
  v10 = v5;
  v11 = *(_OWORD *)(a2 + 1);
  v12 = v6;
  if (!specialized static Shader.ResolvedShader.== infix(_:_:)((uint64_t)&v13, (uint64_t)&v10)) {
    return 0;
  }
  if (v3 == v7) {
    return v4 == v8;
  }
  return 0;
}

BOOL specialized static GraphicsFilter.LuminanceCurve.== infix(_:_:)(float32x4_t *a1, float32x4_t *a2)
{
  return (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_f32(*a1, *a2)), 0xFuLL))) & 1) != 0
      && a1[1].f32[0] == a2[1].f32[0];
}

BOOL specialized static GraphicsBlendMode.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  if (v3)
  {
    if (*(unsigned char *)(a2 + 8))
    {
      outlined copy of GraphicsBlendMode(*(void *)a2, 1);
      outlined copy of GraphicsBlendMode(v2, 1);
      outlined consume of GraphicsBlendMode(v2, 1);
      outlined consume of GraphicsBlendMode(v4, 1);
      return v2 == v4;
    }
    swift_unknownObjectRetain();
  }
  else if ((*(unsigned char *)(a2 + 8) & 1) == 0)
  {
    outlined consume of GraphicsBlendMode(*(void *)a1, 0);
    outlined consume of GraphicsBlendMode(v4, 0);
    return v2 == v4;
  }
  outlined copy of GraphicsBlendMode(v4, v5);
  outlined consume of GraphicsBlendMode(v2, v3);
  outlined consume of GraphicsBlendMode(v4, v5);
  return 0;
}

void outlined consume of Shader.ResolvedShader?(id a1)
{
  if (a1 != (id)1) {
}
  }

uint64_t assignWithCopy for GraphicsFilter(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(void **)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 64);
  uint64_t v26 = *(void *)(a2 + 72);
  uint64_t v27 = *(void *)(a2 + 80);
  uint64_t v28 = *(void *)(a2 + 88);
  uint64_t v29 = *(void *)(a2 + 96);
  uint64_t v30 = *(void *)(a2 + 104);
  int v31 = *(_DWORD *)(a2 + 112);
  char v32 = *(unsigned char *)(a2 + 116);
  outlined copy of GraphicsFilter(*(id *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v26, v27, v28, v29, v30, v31, SBYTE2(v31));
  v12 = *(void **)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  v14 = *(void **)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  long long v20 = *(_OWORD *)(a1 + 64);
  long long v21 = *(_OWORD *)(a1 + 80);
  uint64_t v22 = *(void *)(a1 + 96);
  uint64_t v23 = *(void *)(a1 + 104);
  int v24 = *(_DWORD *)(a1 + 112);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v26;
  *(void *)(a1 + 80) = v27;
  *(void *)(a1 + 88) = v28;
  *(void *)(a1 + 96) = v29;
  *(void *)(a1 + 104) = v30;
  *(_DWORD *)(a1 + 112) = v31;
  *(unsigned char *)(a1 + 116) = v32;
  outlined consume of GraphicsFilter(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, v23, v24, SBYTE2(v24));
  return a1;
}

__n128 __swift_memcpy117_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[6];
  *(void *)(a1 + 109) = *(void *)((char *)a2 + 109);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for GraphicsFilter(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 112);
  char v4 = *(unsigned char *)(a2 + 116);
  char v5 = *(void **)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  long long v6 = *(void **)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  long long v13 = *(_OWORD *)(a1 + 64);
  long long v14 = *(_OWORD *)(a1 + 80);
  uint64_t v15 = *(void *)(a1 + 96);
  uint64_t v16 = *(void *)(a1 + 104);
  int v17 = *(_DWORD *)(a1 + 112);
  long long v18 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v18;
  long long v19 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v19;
  long long v20 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v20;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 112) = v3;
  *(unsigned char *)(a1 + 116) = v4;
  outlined consume of GraphicsFilter(v5, v7, v6, v8, v9, v10, v11, v12, v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, v16, v17, SBYTE2(v17));
  return a1;
}

uint64_t getEnumTagSinglePayload for GraphicsFilter(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF0 && *(unsigned char *)(a1 + 117)) {
    return (*(_DWORD *)a1 + 240);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 116);
  if (v3 <= 0x10) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for GraphicsFilter(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xEF)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 116) = 0;
    *(_DWORD *)(result + 112) = 0;
    *(void *)__n128 result = a2 - 240;
    if (a3 >= 0xF0) {
      *(unsigned char *)(result + 117) = 1;
    }
  }
  else
  {
    if (a3 >= 0xF0) {
      *(unsigned char *)(result + 117) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 116) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for GraphicsFilter(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 116) <= 0xFu) {
    return *(unsigned __int8 *)(a1 + 116);
  }
  else {
    return (*(_DWORD *)a1 + 16);
  }
}

uint64_t destructiveInjectEnumTag for GraphicsFilter(uint64_t result, unsigned int a2)
{
  if (a2 >= 0x10)
  {
    *(void *)__n128 result = a2 - 16;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    LOBYTE(a2) = 16;
    *(_OWORD *)(result + 100) = 0u;
  }
  *(unsigned char *)(result + 116) = a2;
  return result;
}

ValueMetadata *type metadata accessor for GraphicsFilter()
{
  return &type metadata for GraphicsFilter;
}

ValueMetadata *type metadata accessor for GraphicsFilter.ColorMonochrome()
{
  return &type metadata for GraphicsFilter.ColorMonochrome;
}

ValueMetadata *type metadata accessor for GraphicsFilter.Curve()
{
  return &type metadata for GraphicsFilter.Curve;
}

ValueMetadata *type metadata accessor for GraphicsFilter.LuminanceCurve()
{
  return &type metadata for GraphicsFilter.LuminanceCurve;
}

__n128 __swift_memcpy64_4(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for GraphicsFilter.ColorCurves()
{
  return &type metadata for GraphicsFilter.ColorCurves;
}

uint64_t initializeWithCopy for GraphicsFilter.ShaderFilter(uint64_t a1, uint64_t a2)
{
  long long v3 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  id v4 = v3;
  return a1;
}

uint64_t assignWithCopy for GraphicsFilter.ShaderFilter(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a1;
  char v5 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v6 = v5;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for GraphicsFilter.ShaderFilter(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for GraphicsFilter.ShaderFilter(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 48)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for GraphicsFilter.ShaderFilter(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GraphicsFilter.ShaderFilter()
{
  return &type metadata for GraphicsFilter.ShaderFilter;
}

ValueMetadata *type metadata accessor for GraphicsBlendMode()
{
  return &type metadata for GraphicsBlendMode;
}

uint64_t LocalizedStringKey.StringInterpolation.appendInterpolation(accessibilityName:)(uint64_t a1)
{
  type metadata accessor for AccessibilityColorStorage();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = a1;
  swift_retain();
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v2, 0, 1, MEMORY[0x263F8EE78]);

  return swift_release();
}

uint64_t type metadata accessor for AccessibilityColorStorage()
{
  return self;
}

uint64_t AccessibilityColorStorage.resolve<A>(into:in:with:)(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  uint64_t v10 = *a3;
  uint64_t v11 = *(void *)(v5 + 16);
  uint64_t v17 = v8;
  uint64_t v18 = v9;
  uint64_t result = Color.resolveAccessibilityName(in:)(&v17, v11);
  if (v13)
  {
    uint64_t v17 = result;
    uint64_t v18 = v13;
    v16[0] = v8;
    v16[1] = v9;
    uint64_t v15 = v10;
    unint64_t v14 = lazy protocol witness table accessor for type String and conformance String();
    ResolvedTextContainer.append<A>(_:in:with:)((uint64_t)&v17, v16, &v15, a4, MEMORY[0x263F8D310], a5, v14);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t Color.resolveAccessibilityName(in:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Locale();
  uint64_t v5 = *(void *)(v4 - 8);
  double v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v107 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *a1;
  unint64_t v9 = a1[1];
  unint64_t v112 = v10;
  unint64_t v113 = v9;
  float v11 = (*(float (**)(unint64_t *, double))(*(void *)a2 + 104))(&v112, v6);
  float v13 = v12;
  float v15 = v14;
  float v17 = v16;
  RGBToHSB(_:_:_:)(v11, v12, v14);
  unint64_t v112 = __PAIR64__(LODWORD(v13), LODWORD(v11));
  unint64_t v113 = __PAIR64__(LODWORD(v18), LODWORD(v15));
  float v114 = v19;
  int v115 = v20;
  float v116 = v17;
  int v117 = 0;
  char v118 = 1;
  if (v17 == 0.0)
  {
    char v21 = 0;
LABEL_5:
    int v24 = 2;
    int v25 = 2;
    goto LABEL_6;
  }
  float v22 = v18;
  float v23 = v19;
  if (AccessibilityColorValues.luma.getter() > 0.99)
  {
    char v21 = 1;
    goto LABEL_5;
  }
  if (AccessibilityColorValues.luma.getter() >= 0.01)
  {
    float v100 = AccessibilityColorValues.luma.getter();
    if (v23 >= 0.05)
    {
      float v102 = AccessibilityColorValues.luma.getter();
      if (v102 > 0.85) {
        int v103 = 1;
      }
      else {
        int v103 = 2;
      }
      if (v102 >= 0.35) {
        int v25 = v103;
      }
      else {
        int v25 = 0;
      }
      float v104 = AccessibilityColorValues.luma.getter();
      if (v100 >= 0.54 || v22 <= 0.056 || v22 >= 0.111)
      {
        if (v104 > 0.7) {
          int v105 = 1;
        }
        else {
          int v105 = 2;
        }
        if (v23 <= 0.9) {
          int v106 = 2;
        }
        else {
          int v106 = v105;
        }
        if (v23 >= 0.2) {
          int v24 = v106;
        }
        else {
          int v24 = 0;
        }
        char v21 = specialized AccessibilityColorKey.init(hue:)(v22);
        if (v21 == 21) {
          return 0;
        }
      }
      else if (v23 >= 0.2)
      {
        int v24 = 2;
        if (v23 > 0.9)
        {
          if (v104 > 0.7) {
            int v24 = 1;
          }
          else {
            int v24 = 2;
          }
        }
        char v21 = 4;
      }
      else
      {
        int v24 = 0;
        char v21 = 4;
      }
    }
    else
    {
      if (v100 > 0.85) {
        int v101 = 1;
      }
      else {
        int v101 = 2;
      }
      int v24 = 2;
      if (v100 >= 0.35) {
        int v25 = v101;
      }
      else {
        int v25 = 0;
      }
      char v21 = 3;
    }
  }
  else
  {
    int v24 = 2;
    int v25 = 2;
    char v21 = 2;
  }
LABEL_6:
  uint64_t v110 = v5;
  uint64_t v26 = AccessibilityColorKey.rawValue.getter(v21);
  uint64_t v28 = v27;
  if (v9)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v10, (uint64_t)v8);
  }
  else
  {
    uint64_t v29 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v29, (uint64_t)v8);
  }
  swift_release_n();
  swift_release_n();
  if (one-time initialization token for accessibilityBundle != -1) {
    swift_once();
  }
  uint64_t v30 = (void *)static AccessibilityLocalizedString.accessibilityBundle;
  int v31 = (void *)MEMORY[0x24C522820](v26, v28);
  char v32 = (void *)MEMORY[0x24C522820](0x6269737365636341, 0xED00007974696C69);
  v111 = v8;
  Class isa = Locale._bridgeToObjectiveC()().super.isa;
  v34 = (void *)_LocalizeString(v30, v31, v32, isa);

  uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v37 = v36;
  swift_bridgeObjectRelease();

  if (v25 != 2)
  {
    uint64_t v109 = v4;
    if (v25) {
      uint64_t v55 = 0x746867696CLL;
    }
    else {
      uint64_t v55 = 1802658148;
    }
    if (v25) {
      unint64_t v56 = 0xE500000000000000;
    }
    else {
      unint64_t v56 = 0xE400000000000000;
    }
    if (v24 == 2)
    {
      v57 = (void *)static AccessibilityLocalizedString.accessibilityBundle;
      v58 = (void *)MEMORY[0x24C522820](0xD000000000000025, 0x8000000246220330);
      v59 = (void *)MEMORY[0x24C522820](0x6269737365636341, 0xED00007974696C69);
      uint64_t v108 = v35;
      Class v60 = Locale._bridgeToObjectiveC()().super.isa;
      v61 = (void *)_LocalizeString(v57, v58, v59, v60);

      uint64_t v107 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      uint64_t v62 = swift_allocObject();
      *(_OWORD *)(v62 + 16) = xmmword_2461BDD50;
      v63 = (void *)static AccessibilityLocalizedString.accessibilityBundle;
      v64 = (void *)MEMORY[0x24C522820](v55, v56);
      v65 = (void *)MEMORY[0x24C522820](0x6269737365636341, 0xED00007974696C69);
      Class v66 = Locale._bridgeToObjectiveC()().super.isa;
      v67 = (void *)_LocalizeString(v63, v64, v65, v66);

      uint64_t v68 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v70 = v69;
      swift_bridgeObjectRelease();

      uint64_t v71 = MEMORY[0x263F8D310];
      *(void *)(v62 + 56) = MEMORY[0x263F8D310];
      unint64_t v72 = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v62 + 32) = v68;
      *(void *)(v62 + 40) = v70;
      *(void *)(v62 + 96) = v71;
      *(void *)(v62 + 104) = v72;
      uint64_t v73 = v108;
      *(void *)(v62 + 64) = v72;
      *(void *)(v62 + 72) = v73;
      *(void *)(v62 + 80) = v37;
    }
    else
    {
      uint64_t v74 = 0x746E6172626976;
      if (!v24) {
        uint64_t v74 = 0x68736979617267;
      }
      uint64_t v107 = v74;
      v75 = (void *)static AccessibilityLocalizedString.accessibilityBundle;
      v76 = (void *)MEMORY[0x24C522820](0xD00000000000001BLL, 0x8000000246220310);
      v77 = (void *)MEMORY[0x24C522820](0x6269737365636341, 0xED00007974696C69);
      Class v78 = Locale._bridgeToObjectiveC()().super.isa;
      v79 = (void *)_LocalizeString(v75, v76, v77, v78);

      uint64_t v108 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      uint64_t v80 = swift_allocObject();
      *(_OWORD *)(v80 + 16) = xmmword_2461BE2B0;
      v81 = (void *)static AccessibilityLocalizedString.accessibilityBundle;
      v82 = (void *)MEMORY[0x24C522820](v55, v56);
      v83 = (void *)MEMORY[0x24C522820](0x6269737365636341, 0xED00007974696C69);
      Class v84 = Locale._bridgeToObjectiveC()().super.isa;
      v85 = (void *)_LocalizeString(v81, v82, v83, v84);

      uint64_t v86 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v88 = v87;
      swift_bridgeObjectRelease();

      *(void *)(v80 + 56) = MEMORY[0x263F8D310];
      unint64_t v89 = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v80 + 64) = v89;
      *(void *)(v80 + 32) = v86;
      *(void *)(v80 + 40) = v88;
      v90 = (void *)static AccessibilityLocalizedString.accessibilityBundle;
      v91 = (void *)MEMORY[0x24C522820](v107, 0xE700000000000000);
      v92 = (void *)MEMORY[0x24C522820](0x6269737365636341, 0xED00007974696C69);
      Class v93 = Locale._bridgeToObjectiveC()().super.isa;
      v94 = (void *)_LocalizeString(v90, v91, v92, v93);

      uint64_t v95 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v97 = v96;
      swift_bridgeObjectRelease();

      uint64_t v98 = MEMORY[0x263F8D310];
      *(void *)(v80 + 96) = MEMORY[0x263F8D310];
      *(void *)(v80 + 104) = v89;
      *(void *)(v80 + 72) = v95;
      *(void *)(v80 + 80) = v97;
      *(void *)(v80 + 136) = v98;
      *(void *)(v80 + 144) = v89;
      *(void *)(v80 + 112) = v35;
      *(void *)(v80 + 120) = v37;
    }
    goto LABEL_28;
  }
  if (v24 != 2)
  {
    uint64_t v109 = v4;
    if (v24) {
      uint64_t v38 = 0x746E6172626976;
    }
    else {
      uint64_t v38 = 0x68736979617267;
    }
    v39 = (void *)static AccessibilityLocalizedString.accessibilityBundle;
    v40 = (void *)MEMORY[0x24C522820](0xD000000000000026, 0x8000000246220360);
    v41 = (void *)MEMORY[0x24C522820](0x6269737365636341, 0xED00007974696C69);
    Class v42 = Locale._bridgeToObjectiveC()().super.isa;
    v43 = (void *)_LocalizeString(v39, v40, v41, v42);

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    uint64_t v44 = swift_allocObject();
    *(_OWORD *)(v44 + 16) = xmmword_2461BDD50;
    v45 = (void *)static AccessibilityLocalizedString.accessibilityBundle;
    v46 = (void *)MEMORY[0x24C522820](v38, 0xE700000000000000);
    v47 = (void *)MEMORY[0x24C522820](0x6269737365636341, 0xED00007974696C69);
    Class v48 = Locale._bridgeToObjectiveC()().super.isa;
    v49 = (void *)_LocalizeString(v45, v46, v47, v48);

    uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v52 = v51;
    swift_bridgeObjectRelease();

    uint64_t v53 = MEMORY[0x263F8D310];
    *(void *)(v44 + 56) = MEMORY[0x263F8D310];
    unint64_t v54 = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v44 + 32) = v50;
    *(void *)(v44 + 40) = v52;
    *(void *)(v44 + 96) = v53;
    *(void *)(v44 + 104) = v54;
    *(void *)(v44 + 64) = v54;
    *(void *)(v44 + 72) = v35;
    *(void *)(v44 + 80) = v37;
LABEL_28:
    uint64_t v35 = static String.localizedStringWithFormat(_:_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v4 = v109;
  }
  (*(void (**)(char *, uint64_t))(v110 + 8))(v111, v4);
  return v35;
}

uint64_t AccessibilityColorStorage.isEqual(to:)()
{
  uint64_t result = swift_dynamicCastClass();
  if (result)
  {
    uint64_t v2 = *(void *)(result + 16);
    if (v2 == *(void *)(v0 + 16))
    {
      return 1;
    }
    else
    {
      uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 88);
      swift_retain();
      uint64_t v4 = swift_retain();
      char v5 = v3(v4);
      swift_release();
      swift_release();
      return v5 & 1;
    }
  }
  return result;
}

float AccessibilityColorValues.luma.getter()
{
  if ((*(unsigned char *)(v0 + 32) & 1) == 0) {
    return *(float *)(v0 + 28);
  }
  float v1 = *(float *)(v0 + 24)
     * (float)((float)((float)(*(float *)v0 * 0.2126) + (float)(*(float *)(v0 + 4) * 0.7152))
             + (float)(*(float *)(v0 + 8) * 0.0722));
  if (v1 < 0.0) {
    float v1 = 0.0;
  }
  float result = fminf(v1, 1.0);
  *(float *)(v0 + 28) = result;
  *(unsigned char *)(v0 + 32) = 0;
  return result;
}

uint64_t AccessibilityColorKey.rawValue.getter(char a1)
{
  uint64_t result = 0x726170736E617274;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x6574696877;
      break;
    case 2:
      uint64_t result = 0x6B63616C62;
      break;
    case 3:
      uint64_t result = 2036429415;
      break;
    case 4:
      uint64_t result = 0x6E776F7262;
      break;
    case 5:
      uint64_t result = 6579570;
      break;
    case 6:
      uint64_t result = 0x6E61726F20646572;
      break;
    case 7:
      uint64_t result = 0x65676E61726FLL;
      break;
    case 8:
      uint64_t result = 0x792065676E61726FLL;
      break;
    case 9:
      uint64_t result = 0x776F6C6C6579;
      break;
    case 10:
      uint64_t result = 0x6720776F6C6C6579;
      break;
    case 11:
      uint64_t result = 0x6E65657267;
      break;
    case 12:
      uint64_t result = 0x6572672065756C62;
      break;
    case 13:
      uint64_t result = 1851881827;
      break;
    case 14:
      uint64_t result = 0x756C62206E617963;
      break;
    case 15:
      uint64_t result = 1702194274;
      break;
    case 16:
      uint64_t result = 0x67616D2065756C62;
      break;
    case 17:
      uint64_t result = 0x61746E6567616DLL;
      break;
    case 18:
      uint64_t result = 0x2061746E6567616DLL;
      break;
    case 19:
      uint64_t result = 1802398064;
      break;
    case 20:
      uint64_t result = 0x646572206B6E6970;
      break;
    default:
      return result;
  }
  return result;
}

id one-time initialization function for accessibilityBundle()
{
  type metadata accessor for AXCustomContent();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id result = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  static AccessibilityLocalizedString.accessibilityBundle = (uint64_t)result;
  return result;
}

void RGBToHSB(_:_:_:)(float a1, float a2, float a3)
{
  if (a2 > a1 || a3 > a1)
  {
    if (a2 >= a1) {
      float v4 = a1;
    }
    else {
      float v4 = a2;
    }
    if (a1 >= a3) {
      float v5 = a3;
    }
    else {
      float v5 = a1;
    }
    if (a1 > a2 || a3 > a2)
    {
      float v5 = v4;
      float v7 = a3;
    }
    else
    {
      float v7 = a2;
    }
  }
  else
  {
    if (a2 >= a3) {
      float v5 = a3;
    }
    else {
      float v5 = a2;
    }
    float v7 = a1;
  }
  float v8 = 0.0;
  if (v7 > 0.0)
  {
    float v9 = v7 - v5;
    if ((float)((float)(v7 - v5) / v7) != 0.0)
    {
      float v10 = (float)(v7 - a2) / v9;
      float v11 = (float)(v7 - a3) / v9;
      if (v7 == a1)
      {
        if (v5 == a2) {
          float v8 = v11 + 5.0;
        }
        else {
          float v8 = 1.0 - v10;
        }
      }
      else
      {
        BOOL v12 = v7 == a2;
        float v13 = (float)(v7 - a1) / v9;
        if (v12)
        {
          if (v5 == a3) {
            float v8 = v13 + 1.0;
          }
          else {
            float v8 = 3.0 - v11;
          }
        }
        else if (v5 == a1)
        {
          float v8 = v10 + 3.0;
        }
        else
        {
          float v8 = 5.0 - v13;
        }
      }
    }
  }
  fmodf(v8 / 6.0, 1.0);
}

uint64_t specialized AccessibilityColorKey.init(hue:)(float a1)
{
  if (a1 < 0.0 || a1 > 1.0) {
    return 21;
  }
  if (a1 < 0.028) {
    return 5;
  }
  if (a1 < 0.056) {
    return 6;
  }
  if (a1 < 0.111) {
    return 7;
  }
  if (a1 < 0.129) {
    return 8;
  }
  if (a1 < 0.167) {
    return 9;
  }
  if (a1 < 0.222) {
    return 10;
  }
  if (a1 < 0.389) {
    return 11;
  }
  if (a1 < 0.469) {
    return 12;
  }
  if (a1 < 0.54) {
    return 13;
  }
  if (a1 < 0.611) {
    return 14;
  }
  if (a1 < 0.667) {
    return 15;
  }
  if (a1 < 0.8) {
    return 16;
  }
  if (a1 < 0.889) {
    return 17;
  }
  if (a1 < 0.917) {
    return 18;
  }
  if (a1 < 0.958) {
    return 19;
  }
  if (a1 >= 0.986) {
    return 5;
  }
  return 20;
}

unint64_t type metadata accessor for AXCustomContent()
{
  unint64_t result = lazy cache variable for type metadata for AXCustomContent;
  if (!lazy cache variable for type metadata for AXCustomContent)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, &lazy cache variable for type metadata for AXCustomContent);
  }
  return result;
}

const char *MRUIKitFeature.domain.getter()
{
  return "MRUIKit";
}

const char *MRUIKitFeature.feature.getter()
{
  return "PORUIShadows";
}

uint64_t static MRUIKitFeature.== infix(_:_:)()
{
  return 1;
}

void MRUIKitFeature.hash(into:)()
{
}

Swift::Int MRUIKitFeature.hashValue.getter()
{
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type MRUIKitFeature and conformance MRUIKitFeature()
{
  unint64_t result = lazy protocol witness table cache variable for type MRUIKitFeature and conformance MRUIKitFeature;
  if (!lazy protocol witness table cache variable for type MRUIKitFeature and conformance MRUIKitFeature)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MRUIKitFeature and conformance MRUIKitFeature);
  }
  return result;
}

const char *protocol witness for FeatureFlagsKey.domain.getter in conformance MRUIKitFeature()
{
  return "MRUIKit";
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance MRUIKitFeature()
{
  return "PORUIShadows";
}

unsigned char *storeEnumTagSinglePayload for MRUIKitFeature(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x245D7E7E8);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for MRUIKitFeature()
{
  return &type metadata for MRUIKitFeature;
}

uint64_t initializeWithCopy for AnyCodable(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 40);
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  *(void *)(a1 + 40) = v3;
  (**(void (***)(void))(v4 - 8))();
  return a1;
}

uint64_t *assignWithCopy for AnyCodable(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_2(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        unint64_t result = (uint64_t *)swift_release();
        *uint64_t v3 = v12;
      }
      else
      {
        float v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      result[5] = a2[5];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *unint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

_OWORD *assignWithTake for AnyCodable(_OWORD *a1, _OWORD *a2)
{
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  return a1;
}

uint64_t type metadata accessor for AnyCodable()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t AnyCodable.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t *a5@<X8>)
{
  a5[3] = a2;
  a5[4] = a3;
  a5[5] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a5);
  uint64_t v8 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32);

  return v8(boxed_opaque_existential_1, a1, a2);
}

uint64_t AnyCodable.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v35 = a4;
  uint64_t v36 = a3;
  type metadata accessor for AnyCodable.CodingKeys();
  swift_getWitnessTable();
  uint64_t v6 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v37 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v33 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v9 = v38;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v9) {
    goto LABEL_3;
  }
  LOBYTE(v39[0]) = 0;
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v14 = v13;
  uint64_t v15 = _typeByName(_:)();
  uint64_t v38 = v15;
  if (!v15)
  {
    type metadata accessor for AnyCodable.Errors();
    swift_getWitnessTable();
    swift_allocError();
    *(void *)uint64_t v23 = v12;
    *(void *)(v23 + 8) = v14;
    *(unsigned char *)(v23 + 16) = 1;
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v8, v6);
LABEL_3:
    uint64_t v10 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v10);
  }
  v34 = a1;
  swift_bridgeObjectRelease();
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v16 = (*((uint64_t (**)(uint64_t, uint64_t, uint64_t))v36 + 1))(v38, v38, a2);
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  swift_beginAccess();
  uint64_t v40 = v16;
  uint64_t v41 = v18;
  uint64_t v42 = v20;
  swift_beginAccess();
  if (!v40)
  {
    uint64_t v24 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v26 = v25;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    uint64_t v36 = (char *)v26 + *(int *)(v27 + 48);
    *uint64_t v26 = v38;
    uint64_t v35 = (_OWORD *)KeyedDecodingContainer.codingPath.getter();
    *(void *)&v39[0] = 0;
    *((void *)&v39[0] + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(25);
    uint64_t v28 = _typeName(_:qualified:)();
    uint64_t v30 = v29;
    swift_bridgeObjectRelease();
    *(void *)&v39[0] = v28;
    *((void *)&v39[0] + 1) = v30;
    v31._object = (void *)0x80000002462203A0;
    v31._countAndFlagsBits = 0xD000000000000015;
    String.append(_:)(v31);
    v32._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v24 - 8) + 104))(v26, *MEMORY[0x263F8DCB0], v24);
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v8, v6);
    a1 = v34;
    goto LABEL_3;
  }
  char v44 = 1;
  static Decodable<>.decode<A>(from:in:)(v40, v41, v42, (uint64_t *)v39);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v8, v6);
  outlined init with take of Decodable & Encodable(v39, v43);
  long long v21 = v43[1];
  float v22 = v35;
  *uint64_t v35 = v43[0];
  v22[1] = v21;
  v22[2] = v43[2];
  uint64_t v10 = (uint64_t)v34;
  return __swift_destroy_boxed_opaque_existential_1(v10);
}

uint64_t static Decodable<>.decode<A>(from:in:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t *a4@<X8>)
{
  a4[3] = a1;
  a4[4] = a2;
  a4[5] = a3;
  __swift_allocate_boxed_opaque_existential_1(a4);
  type metadata accessor for KeyedDecodingContainer();
  uint64_t result = KeyedDecodingContainer.decode<A>(_:forKey:)();
  if (v4) {
    return __swift_deallocate_boxed_opaque_existential_1((uint64_t)a4);
  }
  return result;
}

uint64_t AnyCodable.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a2 + 16);
  v15[0] = *(void *)(a2 + 24);
  v15[1] = v5;
  type metadata accessor for AnyCodable.CodingKeys();
  swift_getWitnessTable();
  uint64_t v6 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v15 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of Decodable & Encodable((uint64_t)v3, (uint64_t)v16);
  __swift_project_boxed_opaque_existential_1(v16, v16[3]);
  uint64_t DynamicType = swift_getDynamicType();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  _mangledTypeName(_:)();
  if (v11)
  {
    LOBYTE(v16[0]) = 0;
    uint64_t v12 = v16[7];
    KeyedEncodingContainer.encode(_:forKey:)();
    if (v12)
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    __swift_project_boxed_opaque_existential_1(v3, v3[3]);
    LOBYTE(v16[0]) = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  else
  {
    type metadata accessor for AnyCodable.Errors();
    swift_getWitnessTable();
    swift_allocError();
    *(void *)uint64_t v14 = DynamicType;
    *(void *)(v14 + 8) = 0;
    *(unsigned char *)(v14 + 16) = 0;
    swift_willThrow();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t AnyCodable.CodingKeys.init(rawValue:)(uint64_t a1)
{
  if (a1 == 1) {
    unsigned int v1 = 1;
  }
  else {
    unsigned int v1 = 2;
  }
  if (a1) {
    return v1;
  }
  else {
    return 0;
  }
}

uint64_t AnyCodable.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701869940 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65756C6176 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t AnyCodable.CodingKeys.intValue.getter(char a1)
{
  return a1 & 1;
}

uint64_t AnyCodable.CodingKeys.rawValue.getter(char a1)
{
  return a1 & 1;
}

uint64_t AnyCodable.CodingKeys.stringValue.getter(char a1)
{
  if (a1) {
    return 0x65756C6176;
  }
  else {
    return 1701869940;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnyCodable<A>.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x263F8D6E8];

  return MEMORY[0x270F9F940](a1, a2, a3, WitnessTable, v7);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance AnyCodable<A>.CodingKeys(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v5 = MEMORY[0x263F8D6D8];

  return MEMORY[0x270F9DAE8](a1, a2, WitnessTable, v5);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AnyCodable<A>.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x263F8D6D8];

  return MEMORY[0x270F9DAF8](a1, a2, a3, WitnessTable, v7);
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance AnyCodable<A>.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x263F8D6D8];

  return MEMORY[0x270F9DAF0](a1, a2, a3, WitnessTable, v7);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AnyCodable<A>.CodingKeys@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = AnyCodable.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AnyCodable<A>.CodingKeys@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = AnyCodable.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AnyCodable<A>.CodingKeys()
{
  return AnyCodable.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AnyCodable<A>.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = AnyCodable.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance AnyCodable<A>.CodingKeys()
{
  return AnyCodable.CodingKeys.intValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance AnyCodable<A>.CodingKeys@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = AnyCodable.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnyCodable<A>.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270FA00B0](a1, WitnessTable);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AnyCodable<A>.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270FA00B8](a1, WitnessTable);
}

uint64_t protocol witness for Decodable.init(from:) in conformance AnyCodable<A>@<X0>(void *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  return AnyCodable.init(from:)(a1, *(void *)(a2 + 16), *(char **)(a2 + 24), a3);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AnyCodable<A>(void *a1, uint64_t a2)
{
  return AnyCodable.encode(to:)(a1, a2);
}

uint64_t type metadata accessor for AnyCodable.CodingKeys()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for AnyCodable.Errors()
{
  return __swift_instantiateGenericMetadata();
}

_OWORD *outlined init with take of Decodable & Encodable(long long *a1, _OWORD *a2)
{
  long long v2 = *a1;
  long long v3 = a1[2];
  a2[1] = a1[1];
  a2[2] = v3;
  *a2 = v2;
  return a2;
}

uint64_t outlined copy of AnyCodable<A>.Errors<A>(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for AnyCodable.Errors(uint64_t a1)
{
  return outlined consume of AnyCodable<A>.Errors<A>(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t outlined consume of AnyCodable<A>.Errors<A>(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for AnyCodable.Errors(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of AnyCodable<A>.Errors<A>(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for AnyCodable.Errors(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of AnyCodable<A>.Errors<A>(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of AnyCodable<A>.Errors<A>(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for AnyCodable.Errors(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of AnyCodable<A>.Errors<A>(v4, v5, v6);
  return a1;
}

unsigned char *storeEnumTagSinglePayload for AnyCodable.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245D7FA70);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t base witness table accessor for Equatable in AnyCodable<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomDebugStringConvertible in AnyCodable<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomStringConvertible in AnyCodable<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t Text.init<A>(_:format:)(uint64_t a1, uint64_t a2)
{
  return Text.init<A>(_:format:)(a1, a2);
}

{
  return Text.init<A>(_:format:)(a1, a2);
}

{
  type metadata accessor for FormatStyleStorage();
  swift_allocObject();
  return FormatStyleStorage.init<A>(input:format:)(a1, a2);
}

uint64_t type metadata accessor for FormatStyleStorage()
{
  return self;
}

uint64_t Text.init<A>(_:formatter:)(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  swift_dynamicCast();
  type metadata accessor for FormatterTextStorage();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v4;
  *(void *)(result + 24) = a2;
  return result;
}

{
  uint64_t result;

  type metadata accessor for FormatterTextStorage();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t FormatStyleStorage.__allocating_init<A>(input:format:)(uint64_t a1, uint64_t a2)
{
  return FormatStyleStorage.init<A>(input:format:)(a1, a2);
}

uint64_t type metadata accessor for FormatterTextStorage()
{
  return self;
}

id FormatterTextStorage.resolve<A>(into:in:with:)(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = *a3;
  uint64_t v12 = *(void **)(v5 + 24);
  swift_getObjectType();
  uint64_t v13 = swift_conformsToProtocol2();
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (v13) {
    uint64_t v15 = v12;
  }
  else {
    uint64_t v15 = 0;
  }
  if (v15)
  {
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v25 = v9;
    uint64_t v26 = v10;
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v14 + 8))(&v25, ObjectType, v14);
  }
  id result = objc_msgSend(v12, sel_stringForObjectValue_, *(void *)(v6 + 16));
  if (result)
  {
    uint64_t v18 = result;
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v21 = v20;

    uint64_t v25 = v19;
    uint64_t v26 = v21;
    v24[0] = v9;
    v24[1] = v10;
    uint64_t v23 = v11;
    unint64_t v22 = lazy protocol witness table accessor for type String and conformance String();
    ResolvedTextContainer.append<A>(_:in:with:)((uint64_t)&v25, v24, &v23, a4, MEMORY[0x263F8D310], a5, v22);
    return (id)swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t FormatterTextStorage.isEqual(to:)()
{
  uint64_t v0 = swift_dynamicCastClass();
  if (v0)
  {
    uint64_t v1 = v0;
    type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    long long v2 = *(void **)(v1 + 16);
    swift_retain();
    id v3 = v2;
    char v4 = static NSObject.== infix(_:_:)();

    if (v4)
    {
      id v5 = *(id *)(v1 + 24);
      char v6 = static NSObject.== infix(_:_:)();
      swift_release();

      return v6 & 1;
    }
    swift_release();
  }
  return 0;
}

void FormatterTextStorage.__ivar_destroyer()
{
  uint64_t v1 = *(void **)(v0 + 24);
}

uint64_t FormatterTextStorage.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

void FormatStyleBoxBase.isEqual(to:)()
{
}

void FormatStyleBoxBase.format(in:idiom:)()
{
}

uint64_t type metadata accessor for FormatStyleBoxBase()
{
  return self;
}

uint64_t type metadata completion function for FormatStyleBox()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_initClassMetadata2();
      if (!result) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t FormatStyleBox.__allocating_init(input:format:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  FormatStyleBox.init(input:format:)(a1, a2);
  return v4;
}

uint64_t FormatStyleBox.init(input:format:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2 + *(void *)(*(void *)v2 + 136);
  uint64_t v6 = *(void *)(*(void *)v2 + 104);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(v5, a1, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(v2 + *(void *)(*(void *)v2 + 144), a2, v6);
  return v2;
}

uint64_t FormatStyleBox.isEqual(to:)()
{
  if (swift_dynamicCastClass())
  {
    swift_getAssociatedTypeWitness();
    swift_retain();
    if (dispatch thunk of static Equatable.== infix(_:_:)()) {
      char v0 = dispatch thunk of static Equatable.== infix(_:_:)();
    }
    else {
      char v0 = 0;
    }
    swift_release();
  }
  else
  {
    char v0 = 0;
  }
  return v0 & 1;
}

uint64_t FormatStyleBox.format(in:idiom:)(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v132 = a1;
  uint64_t v140 = 0;
  v131 = (void *)*v3;
  uint64_t v6 = v131[14];
  v138 = v3;
  uint64_t v7 = v131[13];
  uint64_t v142 = v6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v129 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  v128 = (char *)&v109 - v8;
  uint64_t v110 = type metadata accessor for EnvironmentValues.CapitalizationContext();
  MEMORY[0x270FA5388](v110);
  v111 = (void (**)(void))((char *)&v109 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v10);
  uint64_t v123 = (uint64_t)&v109 - v11;
  uint64_t v141 = type metadata accessor for FormatStyleCapitalizationContext();
  uint64_t v126 = *(void *)(v141 - 8);
  MEMORY[0x270FA5388](v141);
  v135 = (char *)&v109 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  unint64_t v112 = (char *)&v109 - v14;
  uint64_t v117 = type metadata accessor for TimeZone();
  uint64_t v121 = *(void *)(v117 - 8);
  MEMORY[0x270FA5388](v117);
  uint64_t v116 = (uint64_t)&v109 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v115 = type metadata accessor for Calendar();
  uint64_t v119 = *(void *)(v115 - 8);
  MEMORY[0x270FA5388](v115);
  uint64_t v114 = (uint64_t)&v109 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for Locale();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v109 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v137 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v21);
  v136 = (char *)&v109 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  v127 = (char *)&v109 - v24;
  MEMORY[0x270FA5388](v25);
  v122 = (char *)&v109 - v26;
  MEMORY[0x270FA5388](v27);
  v125 = (char *)&v109 - v28;
  MEMORY[0x270FA5388](v29);
  v133 = (char *)&v109 - v30;
  MEMORY[0x270FA5388](v31);
  v134 = (char *)&v109 - v32;
  MEMORY[0x270FA5388](v33);
  uint64_t v35 = (char *)&v109 - v34;
  MEMORY[0x270FA5388](v36);
  uint64_t v124 = (uint64_t)&v109 - v37;
  MEMORY[0x270FA5388](v38);
  uint64_t v118 = (uint64_t)&v109 - v39;
  MEMORY[0x270FA5388](v40);
  uint64_t v42 = (char *)&v109 - v41;
  uint64_t v44 = *a2;
  uint64_t v43 = a2[1];
  v45 = (_UNKNOWN **)a3[1];
  uint64_t v120 = *a3;
  uint64_t v139 = v43;
  if (v43)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v44, (uint64_t)v20);
  }
  else
  {
    uint64_t v46 = swift_retain_n();
    uint64_t v47 = v140;
    specialized closure #1 in PropertyList.subscript.getter(v46, (uint64_t)v20);
    uint64_t v140 = v47;
  }
  swift_release_n();
  swift_release_n();
  dispatch thunk of FormatStyle.locale(_:)();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  uint64_t v48 = v141;
  if (one-time initialization token for v6 != -1) {
    swift_once();
  }
  unsigned int v49 = static Semantics.v6;
  uint64_t v50 = v137;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  unint64_t v113 = v45;
  if (byte_26B0F44FC != 1)
  {
    if (static Semantics.forced < v49) {
      goto LABEL_10;
    }
LABEL_12:
    (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v35, v42, v7);
    uint64_t v52 = v139;
    if (v139)
    {
      swift_retain_n();
      swift_retain_n();
      uint64_t v53 = v114;
      specialized PropertyList.Tracker.value<A>(_:for:)(v44, v114);
    }
    else
    {
      uint64_t v54 = swift_retain_n();
      uint64_t v53 = v114;
      uint64_t v55 = v140;
      specialized closure #1 in PropertyList.subscript.getter(v54, v114);
      uint64_t v140 = v55;
    }
    uint64_t v56 = v115;
    swift_release_n();
    swift_release_n();
    FormatStyle.calendar(_:)(v53, v7, v124);
    (*(void (**)(uint64_t, uint64_t))(v119 + 8))(v53, v56);
    v57 = *(void (**)(char *, uint64_t))(v50 + 8);
    v57(v35, v7);
    if (v52)
    {
      swift_retain_n();
      swift_retain_n();
      uint64_t v58 = v116;
      specialized PropertyList.Tracker.value<A>(_:for:)(v44, v116);
      uint64_t v59 = v58;
      uint64_t v60 = v140;
    }
    else
    {
      uint64_t v61 = swift_retain_n();
      uint64_t v59 = v116;
      uint64_t v60 = v140;
      specialized closure #1 in PropertyList.subscript.getter(v61, v116);
    }
    uint64_t v62 = v117;
    uint64_t v140 = v60;
    swift_release_n();
    swift_release_n();
    uint64_t v63 = v118;
    uint64_t v64 = v124;
    FormatStyle.timeZone(_:)(v59, v7, v118);
    (*(void (**)(uint64_t, uint64_t))(v121 + 8))(v59, v62);
    v57((char *)v64, v7);
    v57(v42, v7);
    (*(void (**)(char *, uint64_t, uint64_t))(v50 + 32))(v42, v63, v7);
    uint64_t v51 = v135;
    uint64_t v48 = v141;
    goto LABEL_19;
  }
  if (dyld_program_sdk_at_least()) {
    goto LABEL_12;
  }
LABEL_10:
  uint64_t v51 = v135;
LABEL_19:
  uint64_t v66 = v50 + 16;
  v65 = *(void (**)(char *, char *, uint64_t))(v50 + 16);
  v65(v134, v42, v7);
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for InterfaceIdiomDependentFormatStyle);
  char v67 = swift_dynamicCast();
  v134 = (char *)v65;
  if (v67)
  {
    uint64_t v68 = outlined init with take of ScrollStateRequest(&v144, (uint64_t)&v147);
    uint64_t v69 = v120;
    uint64_t v70 = v50 + 16;
    if (v120)
    {
      uint64_t v71 = v113;
    }
    else
    {
      MEMORY[0x270FA5388](v68);
      *(&v109 - 2) = 0xD00000000000002ELL;
      *(&v109 - 1) = 0x80000002462204A0;
      specialized static Log.internalWarning(_:file:line:)((uint64_t)"SwiftUICore/Logging.swift", 25, 2, 84, partial apply for implicit closure #2 in FormatStyleBox.format(in:idiom:));
      _s7SwiftUI22EnvironmentPropertyKeyVyAA0C6ValuesVAAE015TextSizeVariantE033_22A2F77020526CCA53FF38DE37184183LLVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomBox<PhoneInterfaceIdiom>, (uint64_t)&type metadata for PhoneInterfaceIdiom, (uint64_t)&protocol witness table for PhoneInterfaceIdiom, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for InterfaceIdiomBox);
      uint64_t v69 = v72;
      uint64_t v71 = &protocol witness table for InterfaceIdiomBox<A>;
    }
    uint64_t v73 = (uint64_t)v148;
    uint64_t v74 = v149;
    __swift_project_boxed_opaque_existential_1(&v147, (uint64_t)v148);
    v143[0] = v69;
    v143[1] = v71;
    v75 = (void (*)(void *, uint64_t, void *))v74[2];
    *((void *)&v145 + 1) = v73;
    v146 = (char *)v74;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v144);
    v75(v143, v73, (char *)v74);
    uint64_t v50 = v137;
    (*(void (**)(char *, uint64_t))(v137 + 8))(v42, v7);
    v76 = v133;
    swift_dynamicCast();
    (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v42, v76, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v147);
    uint64_t v48 = v141;
    uint64_t v51 = v135;
    uint64_t v66 = v70;
    v65 = (void (*)(char *, char *, uint64_t))v134;
  }
  else
  {
    v146 = 0;
    long long v144 = 0u;
    long long v145 = 0u;
    outlined destroy of AnyTrackedValue?((uint64_t)&v144, &lazy cache variable for type metadata for InterfaceIdiomDependentFormatStyle?, &lazy cache variable for type metadata for InterfaceIdiomDependentFormatStyle);
  }
  v65(v125, v42, v7);
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for TextAlignmentDependentFormatStyle);
  if (swift_dynamicCast())
  {
    uint64_t v124 = v66;
    outlined init with take of ScrollStateRequest(&v144, (uint64_t)&v147);
    uint64_t v77 = (uint64_t)v148;
    Class v78 = v149;
    v125 = (char *)__swift_project_boxed_opaque_existential_1(&v147, (uint64_t)v148);
    if (v139)
    {
      swift_retain_n();
      swift_retain_n();
      LODWORD(v79) = specialized PropertyList.Tracker.value<A>(_:for:)(v44);
    }
    else
    {
      uint64_t v80 = swift_retain_n();
      uint64_t v81 = v140;
      LODWORD(v79) = specialized closure #1 in PropertyList.subscript.getter(v80);
      uint64_t v140 = v81;
      v65 = (void (*)(char *, char *, uint64_t))v134;
    }
    swift_release_n();
    swift_release_n();
    v82 = (void (*)(uint64_t, uint64_t, void *))v78[2];
    if (v79 == 3) {
      uint64_t v79 = 0;
    }
    else {
      uint64_t v79 = v79;
    }
    *((void *)&v145 + 1) = v77;
    v146 = (char *)v78;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v144);
    v82(v79, v77, (char *)v78);
    uint64_t v50 = v137;
    (*(void (**)(char *, uint64_t))(v137 + 8))(v42, v7);
    v83 = v133;
    swift_dynamicCast();
    (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v42, v83, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v147);
    uint64_t v48 = v141;
    uint64_t v51 = v135;
    uint64_t v66 = v124;
  }
  else
  {
    v146 = 0;
    long long v144 = 0u;
    long long v145 = 0u;
    outlined destroy of AnyTrackedValue?((uint64_t)&v144, &lazy cache variable for type metadata for TextAlignmentDependentFormatStyle?, &lazy cache variable for type metadata for TextAlignmentDependentFormatStyle);
  }
  uint64_t v84 = v126;
  if (byte_26B0F44FC != 1)
  {
    if (static Semantics.forced < static Semantics.v6) {
      goto LABEL_47;
    }
LABEL_38:
    v65(v122, v42, v7);
    uint64_t v137 = type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for CapitalizationContextDependentFormatStyle);
    if (swift_dynamicCast())
    {
      outlined init with take of ScrollStateRequest(&v144, (uint64_t)&v147);
      v125 = (char *)v149;
      v135 = v148;
      v122 = (char *)__swift_project_boxed_opaque_existential_1(&v147, (uint64_t)v148);
      if (v139)
      {
        swift_retain_n();
        swift_retain_n();
        uint64_t v85 = v123;
        specialized PropertyList.Tracker.value<A>(_:for:)(v44, v123);
      }
      else
      {
        uint64_t v86 = swift_retain_n();
        specialized closure #1 in PropertyList.subscript.getter(v86, v123);
        uint64_t v85 = v123;
      }
      swift_release_n();
      swift_release_n();
      uint64_t v87 = v111;
      outlined init with copy of EnvironmentValues.CapitalizationContext(v85, (uint64_t)v111);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      uint64_t v124 = v66;
      uint64_t v109 = v44;
      if (EnumCaseMultiPayload == 1)
      {
        (*v87)();
        swift_release();
        unint64_t v89 = *(void (**)(char *, void (**)(void), uint64_t))(v84 + 32);
      }
      else
      {
        v90 = v87;
        unint64_t v89 = *(void (**)(char *, void (**)(void), uint64_t))(v84 + 32);
        v89(v51, v90, v48);
      }
      uint64_t v91 = v48;
      v92 = v112;
      v89(v112, (void (**)(void))v51, v91);
      outlined destroy of EnvironmentValues.CapitalizationContext(v123);
      Class v93 = v125;
      v94 = (void (*)(char *, char *, void *))*((void *)v125 + 2);
      uint64_t v95 = v135;
      *((void *)&v145 + 1) = v135;
      v146 = v125;
      __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v144);
      v94(v92, v95, v93);
      (*(void (**)(char *, uint64_t))(v84 + 8))(v92, v141);
      (*(void (**)(char *, uint64_t))(v50 + 8))(v42, v7);
      uint64_t v96 = v133;
      swift_dynamicCast();
      (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v42, v96, v7);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v147);
      v65 = (void (*)(char *, char *, uint64_t))v134;
      uint64_t v44 = v109;
    }
    else
    {
      v146 = 0;
      long long v144 = 0u;
      long long v145 = 0u;
      outlined destroy of AnyTrackedValue?((uint64_t)&v144, &lazy cache variable for type metadata for CapitalizationContextDependentFormatStyle?, &lazy cache variable for type metadata for CapitalizationContextDependentFormatStyle);
    }
    goto LABEL_47;
  }
  if (dyld_program_sdk_at_least()) {
    goto LABEL_38;
  }
LABEL_47:
  v65(v136, v42, v7);
  if (v139)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v44, &v147);
    swift_release_n();
    swift_release_n();
    uint64_t v97 = v147;
  }
  else
  {
    _s7SwiftUI22EnvironmentPropertyKeyVyAA0C6ValuesVAAE015TextSizeVariantE033_22A2F77020526CCA53FF38DE37184183LLVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>, (uint64_t)&type metadata for EnvironmentValues.TextSizeVariantKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSizeVariantKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    BloomFilter.init(hashValue:)(v98);
    uint64_t v99 = v147;
    uint64_t v100 = swift_retain_n();
    uint64_t v101 = specialized find1<A>(_:key:filter:)(v100, v99);
    if (v101) {
      uint64_t v97 = *(void *)(v101 + 72);
    }
    else {
      uint64_t v97 = 0;
    }
    swift_release_n();
  }
  *(void *)&long long v144 = v97;
  float v102 = v127;
  int v103 = v136;
  char v104 = FormatStyle.exactSizeVariant(_:)(v127, (uint64_t *)&v144, v7);
  int v105 = *(void (**)(char *, uint64_t))(v50 + 8);
  v105(v103, v7);
  v105(v42, v7);
  ((void (*)(char *, char *, uint64_t))v134)(v42, v102, v7);
  int v106 = v128;
  dispatch thunk of FormatStyle.format(_:)();
  uint64_t v107 = AssociatedTypeWitness;
  (*(void (**)(uint64_t))(v131[16] + 8))(AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v129 + 8))(v106, v107);
  v105(v102, v7);
  v105(v42, v7);
  return v104 & 1;
}

uint64_t FormatStyleBox.__ivar_destroyer()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 136);
  uint64_t v2 = *(void *)(*(void *)v0 + 104);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(v1, AssociatedTypeWitness);
  uint64_t v4 = v0 + *(void *)(*(void *)v0 + 144);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v5(v4, v2);
}

uint64_t FormatStyleBox.deinit()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 136);
  uint64_t v2 = *(void *)(*(void *)v0 + 104);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(v1, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v0 + *(void *)(*(void *)v0 + 144), v2);
  return v0;
}

uint64_t FormatStyleBox.__deallocating_deinit()
{
  FormatStyleBox.deinit();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for FormatStyleBox()
{
  return swift_getGenericMetadata();
}

uint64_t FormatStyleStorage.init<A>(input:format:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  type metadata accessor for FormatStyleBox();
  uint64_t v6 = swift_allocObject();
  FormatStyleBox.init(input:format:)(a1, a2);
  *(void *)(v3 + 16) = v6;
  return v3;
}

uint64_t FormatStyleStorage.resolve<A>(into:in:with:)(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v25 = a1;
  uint64_t v26 = type metadata accessor for AttributedString();
  uint64_t v10 = *(void *)(v26 - 8);
  MEMORY[0x270FA5388](v26);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v14 = MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v23 - v15;
  uint64_t v17 = *a2;
  uint64_t v18 = a2[1];
  uint64_t v24 = *a3;
  uint64_t v19 = *(void *)(v5 + 16);
  uint64_t v29 = v17;
  uint64_t v30 = v18;
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, double))(a5 + 32))(&v28, a4, a5, v14);
  long long v27 = v28;
  LOBYTE(v19) = (*(uint64_t (**)(char *, uint64_t *, long long *))(*(void *)v19 + 88))(v16, &v29, &v27);
  type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
  uint64_t v20 = v26;
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v12, v16, v26);
  uint64_t v21 = NSAttributedString.init(_:)();
  uint64_t v29 = v17;
  uint64_t v30 = v18;
  *(void *)&long long v28 = v24;
  (*(void (**)(void *, uint64_t *, long long *, uint64_t, uint64_t, uint64_t))(a5 + 48))(v21, &v29, &v28, v19 & 1, a4, a5);

  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v16, v20);
}

uint64_t FormatStyleStorage.isEqual(to:)()
{
  uint64_t result = swift_dynamicCastClass();
  if (result)
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)(v0 + 16) + 80);
    swift_retain();
    uint64_t v3 = swift_retain();
    char v4 = v2(v3);
    swift_release();
    swift_release();
    return v4 & 1;
  }
  return result;
}

uint64_t outlined init with copy of EnvironmentValues.CapitalizationContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for EnvironmentValues.CapitalizationContext();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of EnvironmentValues.CapitalizationContext(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for EnvironmentValues.CapitalizationContext();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for implicit closure #2 in FormatStyleBox.format(in:idiom:)()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AttachmentTextStorage.resolveAndWriteAuxiliaryMetadataIfNeeded<A>(into:context:environment:options:)(uint64_t a1, uint64_t a2, long long *a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = *a4;
  if ((*a4 & 4) == 0) {
    return 0;
  }
  long long v15 = *a3;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(**(void **)(v6 + 16) + 88))(&v18, a2);
  uint64_t v10 = v19;
  if (!v19) {
    return 0;
  }
  uint64_t v11 = v20;
  uint64_t v12 = v18;
  unint64_t v13 = v21 >> 40;
  BYTE4(v21) &= 1u;
  *(_WORD *)((char *)&v21 + 5) = __PAIR16__(BYTE6(v21), v13) & 0x1FF;
  long long v17 = v15;
  uint64_t v16 = v7;
  (*(void (**)(uint64_t *, long long *, uint64_t *, uint64_t, uint64_t))(a6 + 64))(&v18, &v17, &v16, a5, a6);
  outlined consume of Image.NamedResolved?(v12, v10, v11);
  return 1;
}

uint64_t outlined consume of Image.NamedResolved?(uint64_t a1, uint64_t a2, void *a3)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    outlined consume of Image.Location(a3);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t static Text.DateStyle.timer(units:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(unsigned char *)a2 = 4;
  *(void *)(a2 + 8) = result;
  *(unsigned char *)(a2 + 16) = 2;
  return result;
}

uint64_t Text.DateStyle.UnitsConfiguration.init(units:style:)@<X0>(uint64_t result@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  char v3 = *a2;
  *(void *)a3 = result;
  *(unsigned char *)(a3 + 8) = v3;
  return result;
}

void one-time initialization function for time()
{
  static Text.DateStyle.time = 0;
  qword_268EEC150 = 0;
  byte_268EEC158 = 3;
}

uint64_t static Text.DateStyle.time.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for time != -1) {
    uint64_t result = swift_once();
  }
  uint64_t v2 = qword_268EEC150;
  char v3 = byte_268EEC158;
  *(unsigned char *)a1 = static Text.DateStyle.time;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = v3;
  return result;
}

void one-time initialization function for date()
{
  static Text.DateStyle.date = 1;
  qword_268EFC388 = 0;
  byte_268EFC390 = 3;
}

uint64_t static Text.DateStyle.date.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for date != -1) {
    uint64_t result = swift_once();
  }
  uint64_t v2 = qword_268EFC388;
  char v3 = byte_268EFC390;
  *(unsigned char *)a1 = static Text.DateStyle.date;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = v3;
  return result;
}

void one-time initialization function for relative()
{
  static Text.DateStyle.relative = 2;
  qword_268EFC3A0 = 0;
  byte_268EFC3A8 = 3;
}

uint64_t static Text.DateStyle.relative.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for relative != -1) {
    uint64_t result = swift_once();
  }
  uint64_t v2 = qword_268EFC3A0;
  char v3 = byte_268EFC3A8;
  *(unsigned char *)a1 = static Text.DateStyle.relative;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = v3;
  return result;
}

void one-time initialization function for offset()
{
  static Text.DateStyle.offset = 3;
  qword_268EFC3B8 = 0;
  byte_268EFC3C0 = 3;
}

uint64_t static Text.DateStyle.offset.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for offset != -1) {
    uint64_t result = swift_once();
  }
  uint64_t v2 = qword_268EFC3B8;
  char v3 = byte_268EFC3C0;
  *(unsigned char *)a1 = static Text.DateStyle.offset;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = v3;
  return result;
}

void one-time initialization function for timer()
{
  static Text.DateStyle.timer = 4;
  qword_268EFC3D0 = 0;
  byte_268EFC3D8 = 3;
}

uint64_t static Text.DateStyle.timer.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for timer != -1) {
    uint64_t result = swift_once();
  }
  uint64_t v2 = qword_268EFC3D0;
  char v3 = byte_268EFC3D8;
  *(unsigned char *)a1 = static Text.DateStyle.timer;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = v3;
  return result;
}

uint64_t *static Text.DateStyle.relative(unitConfiguration:)@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *result;
  char v3 = *((unsigned char *)result + 8);
  *(unsigned char *)a2 = 2;
  *(void *)(a2 + 8) = v2;
  *(unsigned char *)(a2 + 16) = v3;
  return result;
}

unint64_t Text.DateStyle.UnitsConfiguration.Style.init(rawValue:)@<X0>(unint64_t result@<X0>, char *a2@<X8>)
{
  char v2 = 3;
  if (result < 3) {
    char v2 = result;
  }
  *a2 = v2;
  return result;
}

uint64_t Text.DateStyle.UnitsConfiguration.Style.rawValue.getter()
{
  return *v0;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Text.DateStyle.UnitsConfiguration.Style@<X0>(unint64_t *a1@<X0>, char *a2@<X8>)
{
  return Text.DateStyle.UnitsConfiguration.Style.init(rawValue:)(*a1, a2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Text.DateStyle.UnitsConfiguration.Style()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Text.DateStyle.UnitsConfiguration.Style()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t property wrapper backing initializer of Text.DateStyle.UnitsConfiguration.units@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t Text.DateStyle.UnitsConfiguration.units.getter()
{
  return *(void *)v0;
}

uint64_t Text.DateStyle.UnitsConfiguration.units.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*Text.DateStyle.UnitsConfiguration.units.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void Text.DateStyle.UnitsConfiguration.style.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 8);
}

unsigned char *Text.DateStyle.UnitsConfiguration.style.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 8) = *result;
  return result;
}

uint64_t (*Text.DateStyle.UnitsConfiguration.style.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

BOOL static Text.DateStyle.UnitsConfiguration.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return *(void *)a1 == *(void *)a2
      && *(unsigned __int8 *)(a1 + 8) == (unint64_t)*(unsigned __int8 *)(a2 + 8);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Text.DateStyle.UnitsConfiguration.CodingKeys()
{
  if (*v0) {
    return 0x656C797473;
  }
  else {
    return 0x7374696E75;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Text.DateStyle.UnitsConfiguration.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized Text.DateStyle.UnitsConfiguration.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Text.DateStyle.UnitsConfiguration.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Text.DateStyle.UnitsConfiguration.CodingKeys and conformance Text.DateStyle.UnitsConfiguration.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Text.DateStyle.UnitsConfiguration.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Text.DateStyle.UnitsConfiguration.CodingKeys and conformance Text.DateStyle.UnitsConfiguration.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t Text.DateStyle.UnitsConfiguration.encode(to:)(void *a1)
{
  type metadata accessor for KeyedEncodingContainer<Text.DateStyle.UnitsConfiguration.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<Text.DateStyle.UnitsConfiguration.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.DateStyle.UnitsConfiguration.CodingKeys and conformance Text.DateStyle.UnitsConfiguration.CodingKeys, (uint64_t)&unk_26FA784D8, MEMORY[0x263F8E0C0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v11 - v6;
  uint64_t v8 = *v1;
  int v12 = *((unsigned __int8 *)v1 + 8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Text.DateStyle.UnitsConfiguration.CodingKeys and conformance Text.DateStyle.UnitsConfiguration.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v17 = v8;
  char v16 = 0;
  type metadata accessor for CodableRawRepresentable<NSCalendarUnit>();
  lazy protocol witness table accessor for type NSCalendarUnit and conformance NSCalendarUnit(&lazy protocol witness table cache variable for type CodableRawRepresentable<NSCalendarUnit> and conformance CodableRawRepresentable<A>, (void (*)(uint64_t))type metadata accessor for CodableRawRepresentable<NSCalendarUnit>);
  uint64_t v9 = v13;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v9)
  {
    char v15 = v12;
    char v14 = 1;
    lazy protocol witness table accessor for type Text.DateStyle.UnitsConfiguration.Style and conformance Text.DateStyle.UnitsConfiguration.Style();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t Text.DateStyle.UnitsConfiguration.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v14 = a2;
  type metadata accessor for KeyedEncodingContainer<Text.DateStyle.UnitsConfiguration.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<Text.DateStyle.UnitsConfiguration.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.DateStyle.UnitsConfiguration.CodingKeys and conformance Text.DateStyle.UnitsConfiguration.CodingKeys, (uint64_t)&unk_26FA784D8, MEMORY[0x263F8E040]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v14 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Text.DateStyle.UnitsConfiguration.CodingKeys and conformance Text.DateStyle.UnitsConfiguration.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    uint64_t v9 = v6;
    uint64_t v10 = v14;
    type metadata accessor for CodableRawRepresentable<NSCalendarUnit>();
    char v17 = 0;
    lazy protocol witness table accessor for type NSCalendarUnit and conformance NSCalendarUnit(&lazy protocol witness table cache variable for type CodableRawRepresentable<NSCalendarUnit> and conformance CodableRawRepresentable<A>, (void (*)(uint64_t))type metadata accessor for CodableRawRepresentable<NSCalendarUnit>);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v11 = v18;
    char v15 = 1;
    lazy protocol witness table accessor for type Text.DateStyle.UnitsConfiguration.Style and conformance Text.DateStyle.UnitsConfiguration.Style();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v8, v5);
    char v13 = v16;
    *(void *)uint64_t v10 = v11;
    *(unsigned char *)(v10 + 8) = v13;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Text.DateStyle.UnitsConfiguration(uint64_t a1, uint64_t a2)
{
  return *(void *)a1 == *(void *)a2
      && *(unsigned __int8 *)(a1 + 8) == (unint64_t)*(unsigned __int8 *)(a2 + 8);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Text.DateStyle.UnitsConfiguration@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return Text.DateStyle.UnitsConfiguration.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Text.DateStyle.UnitsConfiguration(void *a1)
{
  return Text.DateStyle.UnitsConfiguration.encode(to:)(a1);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Text.DateStyle.Storage@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized Text.DateStyle.Storage.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void Text.DateStyle.unitConfiguration.getter(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 16);
  *(void *)a1 = *(void *)(v1 + 8);
  *(unsigned char *)(a1 + 8) = v2;
}

uint64_t Text.DateStyle.unitConfiguration.setter(uint64_t result)
{
  char v2 = *(unsigned char *)(result + 8);
  *(void *)(v1 + 8) = *(void *)result;
  *(unsigned char *)(v1 + 16) = v2;
  return result;
}

uint64_t (*Text.DateStyle.unitConfiguration.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t Text.DateStyle.units.getter()
{
  int v1 = *v0;
  uint64_t v2 = 252;
  if (v1 == 1) {
    uint64_t v2 = 28;
  }
  BOOL v3 = v1 == 4;
  uint64_t v4 = 224;
  if (!v3) {
    uint64_t v4 = v2;
  }
  if (v0[16] == 3) {
    return v4;
  }
  else {
    return *((void *)v0 + 1);
  }
}

uint64_t Text.DateStyle.text(for:)(uint64_t a1)
{
  uint64_t v137 = a1;
  uint64_t v2 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  type metadata accessor for TimeZone?(0, &lazy cache variable for type metadata for SystemFormatStyle.DateOffset?, (uint64_t (*)(uint64_t))type metadata accessor for SystemFormatStyle.DateOffset, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v136 = (uint64_t)&v103 - v4;
  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage);
  MEMORY[0x270FA5388](v5 - 8);
  v135 = (char *)&v103 - v6;
  uint64_t v7 = type metadata accessor for Date.FormatStyle.Symbol.Day();
  uint64_t v125 = *(void *)(v7 - 8);
  uint64_t v126 = (char *)v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v124 = (char *)&v103 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v120 = type metadata accessor for Date.FormatStyle.Symbol.Month();
  uint64_t v119 = *(void *)(v120 - 8);
  MEMORY[0x270FA5388](v120);
  uint64_t v118 = (char *)&v103 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v117 = type metadata accessor for Date.FormatStyle.Symbol.Year();
  uint64_t v116 = *(void *)(v117 - 8);
  MEMORY[0x270FA5388](v117);
  uint64_t v107 = (char *)&v103 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v131 = *(void *)(v11 - 8);
  uint64_t v132 = v11;
  MEMORY[0x270FA5388](v11);
  v130 = (char *)&v103 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Date.FormatStyle.Attributed();
  uint64_t v122 = *(void *)(v13 - 8);
  uint64_t v123 = v13;
  MEMORY[0x270FA5388](v13);
  uint64_t v121 = (char *)&v103 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v115 = type metadata accessor for Date.FormatStyle.Symbol.Minute();
  uint64_t v114 = *(void *)(v115 - 8);
  MEMORY[0x270FA5388](v115);
  unint64_t v113 = (char *)&v103 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v112 = type metadata accessor for Date.FormatStyle.Symbol.Hour.AMPMStyle();
  uint64_t v111 = *(void *)(v112 - 8);
  MEMORY[0x270FA5388](v112);
  uint64_t v109 = (char *)&v103 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v134 = type metadata accessor for Date.FormatStyle.Symbol.Hour();
  uint64_t v110 = *(void *)(v134 - 8);
  MEMORY[0x270FA5388](v134);
  uint64_t v108 = (char *)&v103 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for FormatStyleCapitalizationContext();
  MEMORY[0x270FA5388](v18 - 8);
  uint64_t v129 = (char *)&v103 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for TimeZone();
  MEMORY[0x270FA5388](v20 - 8);
  v128 = (char *)&v103 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for Calendar();
  MEMORY[0x270FA5388](v22 - 8);
  v127 = (char *)&v103 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for Locale();
  MEMORY[0x270FA5388](v24 - 8);
  v133 = (char *)&v103 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TimeZone?(0, &lazy cache variable for type metadata for Date.FormatStyle.TimeStyle?, MEMORY[0x263F06FF0], v2);
  MEMORY[0x270FA5388](v26 - 8);
  long long v28 = (char *)&v103 - v27;
  type metadata accessor for TimeZone?(0, &lazy cache variable for type metadata for Date.FormatStyle.DateStyle?, MEMORY[0x263F07008], v2);
  MEMORY[0x270FA5388](v29 - 8);
  uint64_t v31 = (char *)&v103 - v30;
  uint64_t v32 = type metadata accessor for Date.FormatStyle();
  uint64_t v33 = *(char **)(v32 - 8);
  MEMORY[0x270FA5388](v32);
  uint64_t v35 = (char *)&v103 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v36);
  uint64_t v38 = (char *)&v103 - v37;
  MEMORY[0x270FA5388](v39);
  uint64_t v41 = (char *)&v103 - v40;
  MEMORY[0x270FA5388](v42);
  uint64_t v44 = (char *)&v103 - v43;
  type metadata accessor for WhitespaceRemovingFormatStyle<Date.FormatStyle.Attributed, AttributeScopes.FoundationAttributes.DateFieldAttribute>();
  MEMORY[0x270FA5388](v45);
  int v48 = *v1;
  if ((v48 - 2) >= 3)
  {
    int v103 = v35;
    char v104 = v38;
    int v105 = v41;
    uint64_t v58 = v134;
    int v106 = v44;
    v135 = v33;
    uint64_t v136 = v32;
    if (v48)
    {
      uint64_t v85 = type metadata accessor for Date.FormatStyle.DateStyle();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v85 - 8) + 56))(v31, 1, 1, v85);
      uint64_t v86 = type metadata accessor for Date.FormatStyle.TimeStyle();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v86 - 8) + 56))(v28, 1, 1, v86);
      static Locale.autoupdatingCurrent.getter();
      static Calendar.autoupdatingCurrent.getter();
      uint64_t v87 = static TimeZone.autoupdatingCurrent.getter();
      MEMORY[0x24C520B20](v87);
      uint64_t v88 = v103;
      Date.FormatStyle.init(date:time:locale:calendar:timeZone:capitalizationContext:)();
      unint64_t v89 = v107;
      static Date.FormatStyle.Symbol.Year.defaultDigits.getter();
      v90 = v104;
      Date.FormatStyle.year(_:)();
      (*(void (**)(char *, uint64_t))(v116 + 8))(v89, v117);
      v92 = v135;
      uint64_t v91 = v136;
      Class v93 = (uint64_t (*)(char *, uint64_t))*((void *)v135 + 1);
      uint64_t v94 = v93(v88, v136);
      uint64_t v95 = v118;
      MEMORY[0x24C5210A0](v94);
      uint64_t v96 = v105;
      Date.FormatStyle.month(_:)();
      (*(void (**)(char *, uint64_t))(v119 + 8))(v95, v120);
      uint64_t v97 = v93(v90, v91);
      Swift::Int v98 = v124;
      MEMORY[0x24C520F20](v97);
      uint64_t v99 = v106;
      Date.FormatStyle.day(_:)();
      (*(void (**)(char *, char *))(v125 + 8))(v98, v126);
      v93(v96, v91);
      uint64_t v101 = v130;
      uint64_t v100 = v131;
      uint64_t v102 = v132;
      (*(void (**)(char *, uint64_t, uint64_t))(v131 + 16))(v130, v137, v132);
      type metadata accessor for FormatStyleStorage();
      uint64_t v56 = (void *)swift_allocObject();
      type metadata accessor for FormatStyleBox<Date.FormatStyle>();
      uint64_t v84 = swift_allocObject();
      (*(void (**)(uint64_t, char *, uint64_t))(v100 + 32))(v84 + *(void *)(*(void *)v84 + 136), v101, v102);
      (*((void (**)(uint64_t, char *, uint64_t))v92 + 4))(v84 + *(void *)(*(void *)v84 + 144), v99, v91);
    }
    else
    {
      uint64_t v125 = v46;
      uint64_t v126 = (char *)&v103 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v59 = type metadata accessor for Date.FormatStyle.DateStyle();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v59 - 8) + 56))(v31, 1, 1, v59);
      uint64_t v60 = type metadata accessor for Date.FormatStyle.TimeStyle();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v60 - 8) + 56))(v28, 1, 1, v60);
      static Locale.autoupdatingCurrent.getter();
      static Calendar.autoupdatingCurrent.getter();
      uint64_t v61 = static TimeZone.autoupdatingCurrent.getter();
      MEMORY[0x24C520B20](v61);
      uint64_t v62 = v104;
      Date.FormatStyle.init(date:time:locale:calendar:timeZone:capitalizationContext:)();
      uint64_t v63 = v109;
      static Date.FormatStyle.Symbol.Hour.AMPMStyle.abbreviated.getter();
      uint64_t v64 = v108;
      static Date.FormatStyle.Symbol.Hour.defaultDigits(amPM:)();
      (*(void (**)(char *, uint64_t))(v111 + 8))(v63, v112);
      v65 = v105;
      Date.FormatStyle.hour(_:)();
      (*(void (**)(char *, uint64_t))(v110 + 8))(v64, v58);
      uint64_t v66 = v136;
      char v67 = (uint64_t (*)(char *, uint64_t))*((void *)v135 + 1);
      uint64_t v68 = v67(v62, v136);
      uint64_t v69 = v113;
      MEMORY[0x24C5210D0](v68);
      uint64_t v70 = v106;
      Date.FormatStyle.minute(_:)();
      (*(void (**)(char *, uint64_t))(v114 + 8))(v69, v115);
      v67(v65, v66);
      uint64_t v71 = v121;
      Date.FormatStyle.attributedStyle.getter();
      v67(v70, v66);
      uint64_t v72 = v125;
      uint64_t v73 = (uint64_t)v126;
      uint64_t v74 = &v126[*(int *)(v125 + 76)];
      uint64_t v75 = *MEMORY[0x263F065C0];
      uint64_t v76 = type metadata accessor for AttributeScopes.FoundationAttributes.DateFieldAttribute.Field();
      uint64_t v77 = *(void *)(v76 - 8);
      Class v78 = *(void (**)(char *, uint64_t, uint64_t))(v77 + 104);
      v78(v74, v75, v76);
      uint64_t v79 = *(void (**)(char *, void, uint64_t, uint64_t))(v77 + 56);
      v79(v74, 0, 1, v76);
      uint64_t v80 = v73 + *(int *)(v72 + 80);
      v78((char *)v80, *MEMORY[0x263F065A0], v76);
      v79((char *)v80, 0, 1, v76);
      (*(void (**)(uint64_t, char *, uint64_t))(v122 + 32))(v73, v71, v123);
      v82 = v130;
      uint64_t v81 = v131;
      uint64_t v83 = v132;
      (*(void (**)(char *, uint64_t, uint64_t))(v131 + 16))(v130, v137, v132);
      type metadata accessor for FormatStyleStorage();
      uint64_t v56 = (void *)swift_allocObject();
      type metadata accessor for FormatStyleBox<WhitespaceRemovingFormatStyle<Date.FormatStyle.Attributed, AttributeScopes.FoundationAttributes.DateFieldAttribute>>();
      uint64_t v84 = swift_allocObject();
      (*(void (**)(uint64_t, char *, uint64_t))(v81 + 32))(v84 + *(void *)(*(void *)v84 + 136), v82, v83);
      outlined init with take of WhitespaceRemovingFormatStyle<Date.FormatStyle.Attributed, AttributeScopes.FoundationAttributes.DateFieldAttribute>(v73, v84 + *(void *)(*(void *)v84 + 144), (uint64_t (*)(void))type metadata accessor for WhitespaceRemovingFormatStyle<Date.FormatStyle.Attributed, AttributeScopes.FoundationAttributes.DateFieldAttribute>);
    }
    v56[2] = v84;
    return (uint64_t)v56;
  }
  unsigned __int8 v49 = v1[16];
  uint64_t v50 = *((void *)v1 + 1);
  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for (pauseDate: Date), MEMORY[0x263F07490]);
  uint64_t v52 = (uint64_t)v135;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56))(v135, 1, 1, v51);
  char v138 = v48;
  uint64_t v139 = v50;
  unsigned __int8 v140 = v49;
  uint64_t v53 = v136;
  Text.DateStyle.format(for:)(v137, v136);
  uint64_t v54 = type metadata accessor for SystemFormatStyle.DateOffset();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 48))(v53, 1, v54);
  if (result != 1)
  {
    type metadata accessor for TimeDataFormattingStorage<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.DateOffset>();
    uint64_t v56 = (void *)swift_allocObject();
    v57 = (char *)v56 + *(void *)(*v56 + 192);
    *(void *)v57 = 0;
    v57[8] = 1;
    outlined init with take of TimeDataSource<Date><A>.DateStorage(v52, (uint64_t)v56 + *(void *)(*v56 + 176));
    outlined init with take of WhitespaceRemovingFormatStyle<Date.FormatStyle.Attributed, AttributeScopes.FoundationAttributes.DateFieldAttribute>(v53, (uint64_t)v56 + *(void *)(*v56 + 184), (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
    *(void *)v57 = 0;
    v57[8] = 1;
    return (uint64_t)v56;
  }
  __break(1u);
  return result;
}

uint64_t Text.DateStyle.format(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v64 = a1;
  uint64_t v4 = type metadata accessor for NumberFormatStyleConfiguration.SignDisplayStrategy();
  uint64_t v65 = *(void *)(v4 - 8);
  uint64_t v66 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v57 - v8;
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v57 - v11;
  uint64_t v13 = (int *)type metadata accessor for SystemFormatStyle.DateOffset();
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v57 - v18;
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v57 - v21;
  v26.n128_f64[0] = MEMORY[0x270FA5388](v23);
  uint64_t v63 = (uint64_t)&v57 - v27;
  unsigned int v28 = *v2;
  if (v28 < 2)
  {
    uint64_t v32 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *, __n128))(v24 + 56);
    return v32(a2, 1, 1, v13, v26);
  }
  else
  {
    uint64_t v61 = v24;
    uint64_t v62 = a2;
    uint64_t v29 = *((void *)v2 + 1);
    uint64_t v30 = v2[16];
    uint64_t v60 = v30;
    if (v28 - 2 >= 2)
    {
      type metadata accessor for TimeZone?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Date.ComponentsFormatStyle.Field>, MEMORY[0x263F073D0], MEMORY[0x263F8E0F8]);
      type metadata accessor for Date.ComponentsFormatStyle.Field();
      uint64_t v34 = swift_allocObject();
      *(_OWORD *)(v34 + 16) = xmmword_2461BE2B0;
      static Date.ComponentsFormatStyle.Style.spellOut.getter();
      static Date.ComponentsFormatStyle.Field.minute.getter();
      static Date.ComponentsFormatStyle.Field.second.getter();
      uint64_t v35 = specialized Set.init(_nonEmptyArrayLiteral:)(v34);
      swift_setDeallocating();
      swift_arrayDestroy();
      swift_deallocClassInstance();
      if (v60 != 3)
      {
        uint64_t v36 = specialized Set<>.init(_:)(v29, 0);
        uint64_t v35 = specialized _NativeSet.intersection(_:)(v36, v35);
        swift_bridgeObjectRelease();
      }
      uint64_t v37 = *(void *)(v35 + 16);
      static NumberFormatStyleConfiguration.SignDisplayStrategy.never.getter();
      uint64_t v38 = type metadata accessor for Date();
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v38 - 8) + 16))(v22, v64, v38);
      uint64_t v40 = v65;
      uint64_t v39 = v66;
      (*(void (**)(char *, char *, uint64_t))(v65 + 16))(&v22[v13[7]], v12, v66);
      *(void *)&v22[v13[8]] = 0;
      swift_bridgeObjectRetain();
      static Locale.autoupdatingCurrent.getter();
      static Calendar.autoupdatingCurrent.getter();
      swift_bridgeObjectRelease();
      v22[v13[11]] = 0;
      v22[v13[12]] = 0;
      v22[v13[13]] = 0;
      *(void *)&v22[v13[5]] = v35;
      *(void *)&v22[v13[6]] = v37;
      (*(void (**)(char *, uint64_t))(v40 + 8))(v12, v39);
      uint64_t v41 = v63;
      outlined init with take of WhitespaceRemovingFormatStyle<Date.FormatStyle.Attributed, AttributeScopes.FoundationAttributes.DateFieldAttribute>((uint64_t)v22, v63, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
      *(unsigned char *)(v41 + v13[13]) = 1;
    }
    else
    {
      uint64_t v59 = v25;
      if (v30 == 3)
      {
        uint64_t v31 = 1;
        if (v28 == 2) {
          uint64_t v31 = 2;
        }
        uint64_t v58 = v31;
        if (v28 == 2) {
          static NumberFormatStyleConfiguration.SignDisplayStrategy.never.getter();
        }
        else {
          static NumberFormatStyleConfiguration.SignDisplayStrategy.always(includingZero:)();
        }
        type metadata accessor for TimeZone?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Date.ComponentsFormatStyle.Field>, MEMORY[0x263F073D0], MEMORY[0x263F8E0F8]);
        type metadata accessor for Date.ComponentsFormatStyle.Field();
        uint64_t v44 = swift_allocObject();
        *(_OWORD *)(v44 + 16) = xmmword_2461BE290;
        static Date.ComponentsFormatStyle.Style.wide.getter();
        static Date.ComponentsFormatStyle.Style.narrow.getter();
        static Date.ComponentsFormatStyle.Style.condensedAbbreviated.getter();
        static Date.ComponentsFormatStyle.Style.spellOut.getter();
        static Date.ComponentsFormatStyle.Field.minute.getter();
        static Date.ComponentsFormatStyle.Field.second.getter();
        uint64_t v45 = specialized Set.init(_nonEmptyArrayLiteral:)(v44);
        swift_setDeallocating();
        swift_arrayDestroy();
        swift_deallocClassInstance();
        uint64_t v46 = type metadata accessor for Date();
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v46 - 8) + 16))(v19, v64, v46);
        uint64_t v48 = v65;
        uint64_t v47 = v66;
        (*(void (**)(char *, char *, uint64_t))(v65 + 16))(&v19[v13[7]], v6, v66);
        *(void *)&v19[v13[8]] = 0;
        swift_bridgeObjectRetain();
        static Locale.autoupdatingCurrent.getter();
        static Calendar.autoupdatingCurrent.getter();
        swift_bridgeObjectRelease();
        v19[v13[11]] = 0;
        v19[v13[12]] = 0;
        v19[v13[13]] = 0;
        *(void *)&v19[v13[5]] = v45;
        *(void *)&v19[v13[6]] = v58;
        (*(void (**)(char *, uint64_t))(v48 + 8))(v6, v47);
        uint64_t v49 = 0;
        int v50 = v60;
      }
      else
      {
        uint64_t v42 = specialized Set<>.init(_:)(v29, 0);
        if (v28 == 2) {
          uint64_t v43 = 2;
        }
        else {
          uint64_t v43 = 1;
        }
        if (v28 == 2) {
          static NumberFormatStyleConfiguration.SignDisplayStrategy.never.getter();
        }
        else {
          static NumberFormatStyleConfiguration.SignDisplayStrategy.always(includingZero:)();
        }
        uint64_t v51 = type metadata accessor for Date();
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v51 - 8) + 16))(v19, v64, v51);
        uint64_t v53 = v65;
        uint64_t v52 = v66;
        (*(void (**)(char *, char *, uint64_t))(v65 + 16))(&v19[v13[7]], v9, v66);
        *(void *)&v19[v13[8]] = 0;
        swift_bridgeObjectRetain();
        static Locale.autoupdatingCurrent.getter();
        static Calendar.autoupdatingCurrent.getter();
        swift_bridgeObjectRelease();
        v19[v13[11]] = 0;
        v19[v13[12]] = 0;
        v19[v13[13]] = 0;
        *(void *)&v19[v13[5]] = v42;
        *(void *)&v19[v13[6]] = v43;
        (*(void (**)(char *, uint64_t))(v53 + 8))(v9, v52);
        int v50 = v60;
        uint64_t v49 = 2 - v60;
      }
      outlined init with copy of ClosedRange<Date>((uint64_t)v19, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
      if (v50 == 3) {
        BOOL v54 = v28 == 2;
      }
      else {
        BOOL v54 = v49;
      }
      uint64_t v55 = v59;
      specialized FormatStyle.exactSizeVariant(_:)(v59, v54);
      outlined destroy of ClosedRange<Date>((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
      outlined destroy of ClosedRange<Date>((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
      uint64_t v41 = v63;
      outlined init with take of WhitespaceRemovingFormatStyle<Date.FormatStyle.Attributed, AttributeScopes.FoundationAttributes.DateFieldAttribute>(v55, v63, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
    }
    uint64_t v56 = v62;
    outlined init with take of WhitespaceRemovingFormatStyle<Date.FormatStyle.Attributed, AttributeScopes.FoundationAttributes.DateFieldAttribute>(v41, v62, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, int *))(v61 + 56))(v56, 0, 1, v13);
  }
}

uint64_t Text.init(_:style:)(uint64_t a1)
{
  uint64_t v2 = Text.DateStyle.text(for:)(a1);
  uint64_t v3 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return v2;
}

uint64_t Text.init(dateFormat:timeZone:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for DateTextStorage(0);
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = v6 + OBJC_IVAR____TtC7SwiftUIP33_AEE0E21EC7C6B2D1204F94F94CBF738915DateTextStorage_storage;
  type metadata accessor for (dateFormat: ResolvableCurrentDate.DateFormat, timeZone: TimeZone?)();
  uint64_t v9 = v7 + *(int *)(v8 + 48);
  *(void *)uint64_t v7 = a1;
  *(void *)(v7 + 8) = a2;
  *(unsigned char *)(v7 + 16) = 0;
  outlined init with take of TimeZone?(a3, v9);
  type metadata accessor for DateTextStorage.Storage(0);
  swift_storeEnumTagMultiPayload();
  return v6;
}

uint64_t Text.init(dateFormatTemplate:timeZone:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for DateTextStorage(0);
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = v6 + OBJC_IVAR____TtC7SwiftUIP33_AEE0E21EC7C6B2D1204F94F94CBF738915DateTextStorage_storage;
  type metadata accessor for (dateFormat: ResolvableCurrentDate.DateFormat, timeZone: TimeZone?)();
  uint64_t v9 = v7 + *(int *)(v8 + 48);
  *(void *)uint64_t v7 = a1;
  *(void *)(v7 + 8) = a2;
  *(unsigned char *)(v7 + 16) = 1;
  outlined init with take of TimeZone?(a3, v9);
  type metadata accessor for DateTextStorage.Storage(0);
  swift_storeEnumTagMultiPayload();
  return v6;
}

uint64_t Text.init(timerInterval:pauseTime:countsDown:showsHours:)(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v8 = (uint64_t (*)(uint64_t))MEMORY[0x263F07490];
  type metadata accessor for TimeZone?(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = &v17[-v10];
  type metadata accessor for ClosedRange<Date>();
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = &v17[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of ClosedRange<Date>(a1, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  outlined init with copy of TimeZone?(a2, (uint64_t)v11, &lazy cache variable for type metadata for Date?, v8);
  uint64_t v15 = specialized Text.init(timerInterval:pauseTime:countsDown:showsHours:animateSecondCounting:)((uint64_t)v14, (uint64_t)v11, a3, a4);
  outlined destroy of TimeZone?(a2, &lazy cache variable for type metadata for Date?, v8);
  outlined destroy of ClosedRange<Date>(a1, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  return v15;
}

uint64_t Text.init(interval:pauseAt:countdown:units:)(uint64_t a1, uint64_t a2, char a3, int a4, uint64_t a5, char a6)
{
  uint64_t v27 = a5;
  int v26 = a4;
  char v8 = a3 & 1;
  char v9 = a6 & 1;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = &v25[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = &v25[-v15];
  uint64_t v17 = type metadata accessor for DateInterval();
  double v18 = MEMORY[0x270FA5388](v17 - 8);
  uint64_t v20 = &v25[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v21 = *(void (**)(unsigned char *, uint64_t, uint64_t, double))(v11 + 16);
  v21(v16, a1, v10, v18);
  type metadata accessor for ClosedRange<Date>();
  ((void (*)(unsigned char *, uint64_t, uint64_t))v21)(v13, a1 + *(int *)(v22 + 36), v10);
  DateInterval.init(start:end:)();
  uint64_t v23 = specialized Text.init(interval:pauseAt:countdown:units:)((uint64_t)v20, a2, v8, v26, v27, v9);
  outlined destroy of ClosedRange<Date>(a1, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  return v23;
}

{
  return specialized Text.init(interval:pauseAt:countdown:units:)(a1, a2, a3 & 1, a4, a5, a6 & 1);
}

uint64_t LocalizedStringKey.StringInterpolation.appendInterpolation(_:style:)(uint64_t a1, char *a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  double v6 = MEMORY[0x270FA5388](v4);
  char v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  char v9 = *a2;
  uint64_t v10 = *((void *)a2 + 1);
  LOBYTE(a2) = a2[16];
  (*(void (**)(unsigned char *, uint64_t, uint64_t, double))(v5 + 16))(v8, a1, v4, v6);
  v15[8] = v9;
  uint64_t v16 = v10;
  char v17 = (char)a2;
  uint64_t v11 = Text.DateStyle.text(for:)((uint64_t)v8);
  char v13 = v12 & 1;
  (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v8, v4);
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v11, 0, v13, MEMORY[0x263F8EE78]);
  outlined consume of Text.Storage(v11, 0, v13);
  return swift_bridgeObjectRelease();
}

uint64_t LocalizedStringKey.StringInterpolation.appendInterpolation(interval:pauseAt:countdown:units:)(uint64_t a1, uint64_t a2, char a3, int a4, uint64_t a5, char a6)
{
  uint64_t v34 = a5;
  char v8 = a3 & 1;
  int v32 = a6 & 1;
  int v33 = a4;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  char v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v32 - v14;
  uint64_t v16 = type metadata accessor for DateInterval();
  MEMORY[0x270FA5388](v16 - 8);
  double v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ClosedRange<Date>();
  uint64_t v20 = v19 - 8;
  MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v32 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ClosedRange<Date>(a1, (uint64_t)v22, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  v23(v15, v22, v9);
  v23(v12, &v22[*(int *)(v20 + 44)], v9);
  DateInterval.init(start:end:)();
  uint64_t v24 = specialized Text.init(interval:pauseAt:countdown:units:)((uint64_t)v18, a2, v8, v33, v34, v32);
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  char v30 = v29 & 1;
  outlined destroy of ClosedRange<Date>((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v24, v26, v30, v28);
  outlined consume of Text.Storage(v24, v26, v30);
  return swift_bridgeObjectRelease();
}

{
  char v10;
  char v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v23;

  uint64_t v10 = a3 & 1;
  uint64_t v11 = a6 & 1;
  char v12 = type metadata accessor for DateInterval();
  uint64_t v13 = MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, double))(v16 + 16))(v15, a1, v13);
  uint64_t v17 = specialized Text.init(interval:pauseAt:countdown:units:)((uint64_t)v15, a2, v10, a4, a5, v11);
  uint64_t v19 = v18;
  LOBYTE(a1) = v20 & 1;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v17, v18, v20 & 1, v21);
  outlined consume of Text.Storage(v17, v19, a1);
  return swift_bridgeObjectRelease();
}

uint64_t LocalizedStringKey.StringInterpolation.appendInterpolation(timerInterval:pauseTime:countsDown:showsHours:)(uint64_t a1, uint64_t a2, int a3, int a4)
{
  int v28 = a4;
  uint64_t v7 = (uint64_t (*)(uint64_t))MEMORY[0x263F07490];
  type metadata accessor for TimeZone?(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = &v27[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = &v27[-v12];
  type metadata accessor for ClosedRange<Date>();
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = &v27[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = &v27[-v18];
  outlined init with copy of ClosedRange<Date>(a1, (uint64_t)&v27[-v18], (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  outlined init with copy of TimeZone?(a2, (uint64_t)v13, &lazy cache variable for type metadata for Date?, v7);
  outlined init with copy of ClosedRange<Date>((uint64_t)v19, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  outlined init with copy of TimeZone?((uint64_t)v13, (uint64_t)v10, &lazy cache variable for type metadata for Date?, v7);
  uint64_t v20 = specialized Text.init(timerInterval:pauseTime:countsDown:showsHours:animateSecondCounting:)((uint64_t)v16, (uint64_t)v10, a3, v28);
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  LOBYTE(a1) = v25 & 1;
  outlined destroy of TimeZone?((uint64_t)v13, &lazy cache variable for type metadata for Date?, v7);
  outlined destroy of ClosedRange<Date>((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v20, v22, a1, v24);
  outlined consume of Text.Storage(v20, v22, a1);
  return swift_bridgeObjectRelease();
}

uint64_t Text.init(progressInterval:countsDown:)(uint64_t a1, char a2)
{
  type metadata accessor for DateTextStorage(0);
  uint64_t v4 = swift_allocObject();
  uint64_t v5 = v4 + OBJC_IVAR____TtC7SwiftUIP33_AEE0E21EC7C6B2D1204F94F94CBF738915DateTextStorage_storage;
  type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
  uint64_t v7 = *(int *)(v6 + 48);
  outlined init with take of WhitespaceRemovingFormatStyle<Date.FormatStyle.Attributed, AttributeScopes.FoundationAttributes.DateFieldAttribute>(a1, v5, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  *(unsigned char *)(v5 + v7) = a2;
  type metadata accessor for DateTextStorage.Storage(0);
  swift_storeEnumTagMultiPayload();
  return v4;
}

uint64_t View.referenceDate(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ReferenceDateModifier(0);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TimeZone?(a1, (uint64_t)v6, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
  View.modifier<A>(_:)(v6, a2, v4);
  return outlined destroy of ClosedRange<Date>((uint64_t)v6, type metadata accessor for ReferenceDateModifier);
}

uint64_t static ReferenceDateInput.defaultValue.getter()
{
  return 0;
}

uint64_t ReferenceDateModifier.date.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of TimeZone?(v1, a1, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
}

uint64_t ReferenceDateModifier.date.setter(uint64_t a1)
{
  return outlined assign with take of Date?(a1, v1);
}

uint64_t (*ReferenceDateModifier.date.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t DateTextStorage.resolve<A>(into:in:with:)(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v65 = a3;
  uint64_t v68 = a4;
  uint64_t v69 = a5;
  uint64_t v67 = a1;
  uint64_t v63 = type metadata accessor for ResolvableProgress();
  MEMORY[0x270FA5388](v63);
  uint64_t v64 = (uint64_t)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ClosedRange<Date>();
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v62 = (uint64_t)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = type metadata accessor for ResolvableCurrentDate();
  MEMORY[0x270FA5388](v60);
  uint64_t v61 = (uint64_t)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TimeZone?(0, &lazy cache variable for type metadata for TimeZone?, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v59 = (uint64_t)&v57 - v14;
  uint64_t v58 = type metadata accessor for ResolvableDateInterval();
  MEMORY[0x270FA5388](v58);
  uint64_t v16 = (char *)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for DateInterval();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v57 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v57 - v22;
  uint64_t v24 = type metadata accessor for DateTextStorage.Storage(0);
  MEMORY[0x270FA5388](v24);
  uint64_t v26 = (char *)&v57 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = *a2;
  uint64_t v28 = a2[1];
  uint64_t v65 = (void *)*v65;
  outlined init with copy of ClosedRange<Date>(v66 + OBJC_IVAR____TtC7SwiftUIP33_AEE0E21EC7C6B2D1204F94F94CBF738915DateTextStorage_storage, (uint64_t)v26, type metadata accessor for DateTextStorage.Storage);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v30 = *(void *)v26;
      uint64_t v31 = *((void *)v26 + 1);
      char v32 = v26[16];
      type metadata accessor for (dateFormat: ResolvableCurrentDate.DateFormat, timeZone: TimeZone?)();
      uint64_t v34 = (uint64_t)&v26[*(int *)(v33 + 48)];
      uint64_t v35 = v59;
      outlined init with take of TimeZone?(v34, v59);
      uint64_t v72 = v30;
      uint64_t v73 = v31;
      char v74 = v32;
      uint64_t v36 = (uint64_t (*)(uint64_t))MEMORY[0x263F079C8];
      outlined init with copy of TimeZone?(v35, (uint64_t)v12, &lazy cache variable for type metadata for TimeZone?, MEMORY[0x263F079C8]);
      uint64_t v70 = v27;
      uint64_t v71 = v28;
      swift_retain();
      swift_retain();
      uint64_t v37 = v61;
      ResolvableCurrentDate.init(dateFormat:timeZone:in:)((uint64_t)&v72, (uint64_t)v12, &v70, v61);
      uint64_t v72 = v27;
      uint64_t v73 = v28;
      v79[0] = v65;
      defaultContentTransition #1 <A>(_:) in DateTextStorage.resolve<A>(into:in:with:)(0, (uint64_t)&v70);
      uint64_t v39 = v69;
      uint64_t v38 = v70;
      unint64_t v40 = v71 | ((unint64_t)(WORD2(v71) | (BYTE6(v71) << 16)) << 32);
      uint64_t v75 = v70;
      int v76 = v71;
      char v78 = BYTE6(v71);
      __int16 v77 = WORD2(v71);
      uint64_t v41 = *(void (**)(uint64_t, uint64_t *, void *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v69 + 72);
      uint64_t v42 = lazy protocol witness table accessor for type NSCalendarUnit and conformance NSCalendarUnit(&lazy protocol witness table cache variable for type ResolvableCurrentDate and conformance ResolvableCurrentDate, (void (*)(uint64_t))type metadata accessor for ResolvableCurrentDate);
      v41(v37, &v72, v79, &v75, v60, v42, v68, v39);
      outlined consume of ContentTransition?(v38, v40);
      outlined destroy of ClosedRange<Date>(v37, (uint64_t (*)(void))type metadata accessor for ResolvableCurrentDate);
      return outlined destroy of TimeZone?(v35, &lazy cache variable for type metadata for TimeZone?, v36);
    }
    else
    {
      type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
      char v48 = v26[*(int *)(v47 + 48)];
      uint64_t v49 = v62;
      outlined init with take of WhitespaceRemovingFormatStyle<Date.FormatStyle.Attributed, AttributeScopes.FoundationAttributes.DateFieldAttribute>((uint64_t)v26, v62, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
      uint64_t v50 = v64;
      outlined init with copy of ClosedRange<Date>(v49, v64, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
      uint64_t v51 = v63;
      *(unsigned char *)(v50 + *(int *)(v63 + 20)) = v48;
      uint64_t v72 = v27;
      uint64_t v73 = v28;
      v79[0] = v65;
      defaultContentTransition #1 <A>(_:) in DateTextStorage.resolve<A>(into:in:with:)(v48, (uint64_t)&v70);
      uint64_t v53 = v69;
      uint64_t v52 = v70;
      unint64_t v54 = v71 | ((unint64_t)(WORD2(v71) | (BYTE6(v71) << 16)) << 32);
      uint64_t v75 = v70;
      int v76 = v71;
      char v78 = BYTE6(v71);
      __int16 v77 = WORD2(v71);
      uint64_t v55 = *(void (**)(uint64_t, uint64_t *, void *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v69 + 72);
      uint64_t v56 = lazy protocol witness table accessor for type NSCalendarUnit and conformance NSCalendarUnit(&lazy protocol witness table cache variable for type ResolvableProgress and conformance ResolvableProgress, (void (*)(uint64_t))type metadata accessor for ResolvableProgress);
      v55(v50, &v72, v79, &v75, v51, v56, v68, v53);
      outlined consume of ContentTransition?(v52, v54);
      outlined destroy of ClosedRange<Date>(v50, (uint64_t (*)(void))type metadata accessor for ResolvableProgress);
      return outlined destroy of ClosedRange<Date>(v49, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v23, v26, v17);
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v20, v23, v17);
    uint64_t v72 = v27;
    uint64_t v73 = v28;
    swift_retain();
    swift_retain();
    ResolvableDateInterval.init(_:in:)((uint64_t)v20, &v72, (uint64_t)v16);
    uint64_t v72 = v27;
    uint64_t v73 = v28;
    uint64_t v75 = (uint64_t)v65;
    uint64_t v70 = 0;
    BYTE6(v71) = 2;
    WORD2(v71) = 0;
    LODWORD(v71) = 0;
    uint64_t v44 = v69;
    uint64_t v45 = *(void (**)(char *, uint64_t *, uint64_t *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v69 + 72);
    uint64_t v46 = lazy protocol witness table accessor for type NSCalendarUnit and conformance NSCalendarUnit(&lazy protocol witness table cache variable for type ResolvableDateInterval and conformance ResolvableDateInterval, (void (*)(uint64_t))type metadata accessor for ResolvableDateInterval);
    v45(v16, &v72, &v75, &v70, v58, v46, v68, v44);
    outlined destroy of ClosedRange<Date>((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for ResolvableDateInterval);
    return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v23, v17);
  }
}

uint64_t defaultContentTransition #1 <A>(_:) in DateTextStorage.resolve<A>(into:in:with:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  EnvironmentValues.contentTransitionStyle.getter(&v11);
  if (v11 == 1)
  {
    if (one-time initialization token for v6 != -1) {
      swift_once();
    }
    unsigned int v4 = static Semantics.v6;
    if (one-time initialization token for forced != -1) {
      swift_once();
    }
    swift_beginAccess();
    if (byte_26B0F4504)
    {
LABEL_20:
      uint64_t result = dyld_program_minos_at_least();
LABEL_25:
      uint64_t v6 = (result ^ ~a1) & 1 | 0x1202024000000000;
      uint64_t v8 = 34807859;
      goto LABEL_26;
    }
    BOOL v9 = dword_26B0F4500 >= v4;
LABEL_22:
    uint64_t result = v9;
    goto LABEL_25;
  }
  if (one-time initialization token for introduced != -1) {
    swift_once();
  }
  unsigned int v5 = static _SemanticFeature_v5_2.introduced;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  uint64_t v6 = 0x8000000001;
  uint64_t result = swift_beginAccess();
  if (byte_26B0F44FC != 1)
  {
    if (static Semantics.forced >= v5) {
      goto LABEL_14;
    }
LABEL_17:
    if (one-time initialization token for v6 != -1) {
      swift_once();
    }
    if (byte_26B0F4504) {
      goto LABEL_20;
    }
    BOOL v9 = dword_26B0F4500 >= static Semantics.v6;
    goto LABEL_22;
  }
  uint64_t result = dyld_program_sdk_at_least();
  if ((result & 1) == 0) {
    goto LABEL_17;
  }
LABEL_14:
  uint64_t v8 = 0x2000000;
LABEL_26:
  unint64_t v10 = v8 & 0xFFFF0000FFFFFFFFLL | 0x300000000;
  *(void *)a2 = v6;
  *(unsigned char *)(a2 + 14) = 0;
  *(_DWORD *)(a2 + 8) = v10;
  *(_WORD *)(a2 + 12) = WORD2(v10);
  return result;
}

uint64_t DateTextStorage.isEqual(to:)()
{
  uint64_t v1 = type metadata accessor for DateTextStorage.Storage(0);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v11 - v5;
  uint64_t v7 = swift_dynamicCastClass();
  if (v7)
  {
    uint64_t v8 = v7;
    outlined init with copy of ClosedRange<Date>(v0 + OBJC_IVAR____TtC7SwiftUIP33_AEE0E21EC7C6B2D1204F94F94CBF738915DateTextStorage_storage, (uint64_t)v6, type metadata accessor for DateTextStorage.Storage);
    outlined init with copy of ClosedRange<Date>(v8 + OBJC_IVAR____TtC7SwiftUIP33_AEE0E21EC7C6B2D1204F94F94CBF738915DateTextStorage_storage, (uint64_t)v3, type metadata accessor for DateTextStorage.Storage);
    char v9 = specialized static DateTextStorage.Storage.== infix(_:_:)((uint64_t)v6, (uint64_t)v3);
    outlined destroy of ClosedRange<Date>((uint64_t)v3, type metadata accessor for DateTextStorage.Storage);
    outlined destroy of ClosedRange<Date>((uint64_t)v6, type metadata accessor for DateTextStorage.Storage);
  }
  else
  {
    char v9 = 0;
  }
  return v9 & 1;
}

uint64_t DateTextStorage.__ivar_destroyer()
{
  return outlined destroy of ClosedRange<Date>(v0 + OBJC_IVAR____TtC7SwiftUIP33_AEE0E21EC7C6B2D1204F94F94CBF738915DateTextStorage_storage, type metadata accessor for DateTextStorage.Storage);
}

uint64_t DateTextStorage.__deallocating_deinit()
{
  outlined destroy of ClosedRange<Date>(v0 + OBJC_IVAR____TtC7SwiftUIP33_AEE0E21EC7C6B2D1204F94F94CBF738915DateTextStorage_storage, type metadata accessor for DateTextStorage.Storage);

  return swift_deallocClassInstance();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Text.DateStyle.CodingKeys()
{
  if (*v0) {
    return 0xD000000000000011;
  }
  else {
    return 0x656761726F7473;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Text.DateStyle.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized Text.DateStyle.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Text.DateStyle.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Text.DateStyle.CodingKeys and conformance Text.DateStyle.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Text.DateStyle.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Text.DateStyle.CodingKeys and conformance Text.DateStyle.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t Text.DateStyle.encode(to:)(void *a1)
{
  type metadata accessor for KeyedEncodingContainer<Text.DateStyle.UnitsConfiguration.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<Text.DateStyle.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.DateStyle.CodingKeys and conformance Text.DateStyle.CodingKeys, (uint64_t)&type metadata for Text.DateStyle.CodingKeys, MEMORY[0x263F8E0C0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)v10 - v6;
  v10[0] = *(void *)(v1 + 8);
  int v12 = *(unsigned __int8 *)(v1 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Text.DateStyle.CodingKeys and conformance Text.DateStyle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v14 = 0;
  uint64_t v8 = v10[1];
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v8)
  {
    v10[2] = v10[0];
    char v11 = v12;
    char v13 = 1;
    lazy protocol witness table accessor for type Text.DateStyle.UnitsConfiguration and conformance Text.DateStyle.UnitsConfiguration();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t Text.DateStyle.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v17 = a2;
  type metadata accessor for KeyedEncodingContainer<Text.DateStyle.UnitsConfiguration.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<Text.DateStyle.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.DateStyle.CodingKeys and conformance Text.DateStyle.CodingKeys, (uint64_t)&type metadata for Text.DateStyle.CodingKeys, MEMORY[0x263F8E040]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Text.DateStyle.CodingKeys and conformance Text.DateStyle.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    uint64_t v9 = v6;
    uint64_t v10 = v17;
    char v21 = 0;
    unint64_t v11 = KeyedDecodingContainer.decode(_:forKey:)();
    char v12 = v11;
    if (v11 >= 5)
    {
      lazy protocol witness table accessor for type Text.DateStyle.Errors and conformance Text.DateStyle.Errors();
      swift_allocError();
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v8, v5);
    }
    else
    {
      char v20 = 1;
      lazy protocol witness table accessor for type Text.DateStyle.UnitsConfiguration and conformance Text.DateStyle.UnitsConfiguration();
      KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
      uint64_t v14 = v18;
      char v15 = v19;
      (*(void (**)(char *, uint64_t))(v9 + 8))(v8, v5);
      *(unsigned char *)uint64_t v10 = v12;
      *(void *)(v10 + 8) = v14;
      *(unsigned char *)(v10 + 16) = v15;
    }
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Text.DateStyle@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return Text.DateStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Text.DateStyle(void *a1)
{
  return Text.DateStyle.encode(to:)(a1);
}

unint64_t lazy protocol witness table accessor for type Text.DateStyle.UnitsConfiguration.CodingKeys and conformance Text.DateStyle.UnitsConfiguration.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.DateStyle.UnitsConfiguration.CodingKeys and conformance Text.DateStyle.UnitsConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type Text.DateStyle.UnitsConfiguration.CodingKeys and conformance Text.DateStyle.UnitsConfiguration.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.DateStyle.UnitsConfiguration.CodingKeys and conformance Text.DateStyle.UnitsConfiguration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.DateStyle.UnitsConfiguration.CodingKeys and conformance Text.DateStyle.UnitsConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type Text.DateStyle.UnitsConfiguration.CodingKeys and conformance Text.DateStyle.UnitsConfiguration.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.DateStyle.UnitsConfiguration.CodingKeys and conformance Text.DateStyle.UnitsConfiguration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.DateStyle.UnitsConfiguration.CodingKeys and conformance Text.DateStyle.UnitsConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type Text.DateStyle.UnitsConfiguration.CodingKeys and conformance Text.DateStyle.UnitsConfiguration.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.DateStyle.UnitsConfiguration.CodingKeys and conformance Text.DateStyle.UnitsConfiguration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.DateStyle.UnitsConfiguration.CodingKeys and conformance Text.DateStyle.UnitsConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type Text.DateStyle.UnitsConfiguration.CodingKeys and conformance Text.DateStyle.UnitsConfiguration.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.DateStyle.UnitsConfiguration.CodingKeys and conformance Text.DateStyle.UnitsConfiguration.CodingKeys);
  }
  return result;
}

void type metadata accessor for CodableRawRepresentable<NSCalendarUnit>()
{
  if (!lazy cache variable for type metadata for CodableRawRepresentable<NSCalendarUnit>)
  {
    type metadata accessor for NSCalendarUnit(255);
    lazy protocol witness table accessor for type NSCalendarUnit and conformance NSCalendarUnit(&lazy protocol witness table cache variable for type NSCalendarUnit and conformance NSCalendarUnit, type metadata accessor for NSCalendarUnit);
    unint64_t v0 = type metadata accessor for CodableRawRepresentable();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CodableRawRepresentable<NSCalendarUnit>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type NSCalendarUnit and conformance NSCalendarUnit(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Text.DateStyle.UnitsConfiguration.Style and conformance Text.DateStyle.UnitsConfiguration.Style()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.DateStyle.UnitsConfiguration.Style and conformance Text.DateStyle.UnitsConfiguration.Style;
  if (!lazy protocol witness table cache variable for type Text.DateStyle.UnitsConfiguration.Style and conformance Text.DateStyle.UnitsConfiguration.Style)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.DateStyle.UnitsConfiguration.Style and conformance Text.DateStyle.UnitsConfiguration.Style);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.DateStyle.UnitsConfiguration.Style and conformance Text.DateStyle.UnitsConfiguration.Style;
  if (!lazy protocol witness table cache variable for type Text.DateStyle.UnitsConfiguration.Style and conformance Text.DateStyle.UnitsConfiguration.Style)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.DateStyle.UnitsConfiguration.Style and conformance Text.DateStyle.UnitsConfiguration.Style);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.DateStyle.UnitsConfiguration.Style and conformance Text.DateStyle.UnitsConfiguration.Style;
  if (!lazy protocol witness table cache variable for type Text.DateStyle.UnitsConfiguration.Style and conformance Text.DateStyle.UnitsConfiguration.Style)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.DateStyle.UnitsConfiguration.Style and conformance Text.DateStyle.UnitsConfiguration.Style);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.DateStyle.UnitsConfiguration.Style and conformance Text.DateStyle.UnitsConfiguration.Style;
  if (!lazy protocol witness table cache variable for type Text.DateStyle.UnitsConfiguration.Style and conformance Text.DateStyle.UnitsConfiguration.Style)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.DateStyle.UnitsConfiguration.Style and conformance Text.DateStyle.UnitsConfiguration.Style);
  }
  return result;
}

uint64_t type metadata accessor for DateTextStorage(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for DateTextStorage);
}

uint64_t type metadata accessor for DateTextStorage.Storage(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for DateTextStorage.Storage);
}

void type metadata accessor for (dateFormat: ResolvableCurrentDate.DateFormat, timeZone: TimeZone?)()
{
  if (!lazy cache variable for type metadata for (dateFormat: ResolvableCurrentDate.DateFormat, timeZone: TimeZone?))
  {
    type metadata accessor for TimeZone?(255, &lazy cache variable for type metadata for TimeZone?, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (dateFormat: ResolvableCurrentDate.DateFormat, timeZone: TimeZone?));
    }
  }
}

uint64_t outlined init with take of TimeZone?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for TimeZone?(0, &lazy cache variable for type metadata for TimeZone?, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of TimeZone?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  type metadata accessor for TimeZone?(0, a3, a4, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t specialized static Text.DateStyle.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  int v2 = a1[16];
  int v3 = a2[16];
  if (v2 == 3)
  {
    if (v3 != 3) {
      return 0;
    }
  }
  else if (v3 == 3 || *((void *)a1 + 1) != *((void *)a2 + 1) || v2 != v3)
  {
    return 0;
  }
  return 1;
}

uint64_t specialized static ReferenceDateModifier._makeViewInputs(modifier:inputs:)(uint64_t a1, uint64_t *a2)
{
  type metadata accessor for TimeZone?(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  AGGraphCreateOffsetAttribute2();
  uint64_t v3 = AGCreateWeakAttribute();
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a2, v3);
  return swift_release();
}

uint64_t specialized static DateTextStorage.Storage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v93 = a1;
  uint64_t v94 = a2;
  type metadata accessor for ClosedRange<Date>();
  uint64_t v87 = v2;
  MEMORY[0x270FA5388](v2);
  uint64_t v88 = (uint64_t)&v81 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v89 = (uint64_t)&v81 - v5;
  MEMORY[0x270FA5388](v6);
  uint64_t v90 = (uint64_t)&v81 - v7;
  uint64_t v86 = type metadata accessor for TimeZone();
  uint64_t v84 = *(void *)(v86 - 8);
  MEMORY[0x270FA5388](v86);
  uint64_t v81 = (char *)&v81 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (TimeZone?, TimeZone?)();
  uint64_t v83 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v85 = (uint64_t)&v81 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TimeZone?(0, &lazy cache variable for type metadata for TimeZone?, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v82 = (uint64_t)&v81 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v92 = (uint64_t)&v81 - v14;
  MEMORY[0x270FA5388](v15);
  uint64_t v91 = (uint64_t)&v81 - v16;
  uint64_t v17 = type metadata accessor for DateInterval();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  char v20 = (char *)&v81 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for DateTextStorage.Storage(0);
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v81 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  uint64_t v26 = (char *)&v81 - v25;
  MEMORY[0x270FA5388](v27);
  char v29 = (char *)&v81 - v28;
  type metadata accessor for (DateTextStorage.Storage, DateTextStorage.Storage)();
  MEMORY[0x270FA5388](v30 - 8);
  char v32 = (char *)&v81 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = (uint64_t)&v32[*(int *)(v33 + 56)];
  outlined init with copy of ClosedRange<Date>(v93, (uint64_t)v32, type metadata accessor for DateTextStorage.Storage);
  outlined init with copy of ClosedRange<Date>(v94, v34, type metadata accessor for DateTextStorage.Storage);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    outlined init with copy of ClosedRange<Date>((uint64_t)v32, (uint64_t)v29, type metadata accessor for DateTextStorage.Storage);
    if (!swift_getEnumCaseMultiPayload())
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v20, v34, v17);
      char v59 = static DateInterval.== infix(_:_:)();
      uint64_t v62 = *(void (**)(char *, uint64_t))(v18 + 8);
      v62(v20, v17);
      v62(v29, v17);
      outlined destroy of ClosedRange<Date>((uint64_t)v32, type metadata accessor for DateTextStorage.Storage);
      return v59 & 1;
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v29, v17);
    goto LABEL_17;
  }
  if (EnumCaseMultiPayload == 1)
  {
    outlined init with copy of ClosedRange<Date>((uint64_t)v32, (uint64_t)v26, type metadata accessor for DateTextStorage.Storage);
    uint64_t v37 = *(void *)v26;
    uint64_t v36 = *((void *)v26 + 1);
    char v38 = v26[16];
    type metadata accessor for (dateFormat: ResolvableCurrentDate.DateFormat, timeZone: TimeZone?)();
    uint64_t v40 = *(int *)(v39 + 48);
    uint64_t v41 = (uint64_t)&v26[v40];
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v43 = *(void *)v34;
      uint64_t v42 = *(void *)(v34 + 8);
      uint64_t v44 = v34 + v40;
      char v45 = *(unsigned char *)(v34 + 16);
      uint64_t v46 = v91;
      outlined init with take of TimeZone?(v41, v91);
      uint64_t v47 = v44;
      uint64_t v48 = v92;
      outlined init with take of TimeZone?(v47, v92);
      if (v38)
      {
        if (v45)
        {
          if (v37 != v43 || v36 != v42) {
            goto LABEL_28;
          }
          goto LABEL_27;
        }
      }
      else if ((v45 & 1) == 0)
      {
        if (v37 != v43 || v36 != v42)
        {
LABEL_28:
          char v66 = _stringCompareWithSmolCheck(_:_:expecting:)();
          outlined consume of ResolvableCurrentDate.DateFormat();
          outlined consume of ResolvableCurrentDate.DateFormat();
          if (v66) {
            goto LABEL_29;
          }
          goto LABEL_23;
        }
LABEL_27:
        outlined consume of ResolvableCurrentDate.DateFormat();
        outlined consume of ResolvableCurrentDate.DateFormat();
LABEL_29:
        uint64_t v67 = v85;
        uint64_t v68 = v85 + *(int *)(v83 + 48);
        uint64_t v69 = (uint64_t (*)(uint64_t))MEMORY[0x263F079C8];
        outlined init with copy of TimeZone?(v46, v85, &lazy cache variable for type metadata for TimeZone?, MEMORY[0x263F079C8]);
        outlined init with copy of TimeZone?(v48, v68, &lazy cache variable for type metadata for TimeZone?, v69);
        uint64_t v70 = v84;
        uint64_t v71 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v84 + 48);
        uint64_t v72 = v86;
        if (v71(v67, 1, v86) == 1)
        {
          uint64_t v73 = (uint64_t (*)(uint64_t))MEMORY[0x263F079C8];
          outlined destroy of TimeZone?(v48, &lazy cache variable for type metadata for TimeZone?, MEMORY[0x263F079C8]);
          outlined destroy of TimeZone?(v46, &lazy cache variable for type metadata for TimeZone?, v73);
          if (v71(v68, 1, v72) == 1)
          {
            outlined destroy of TimeZone?(v67, &lazy cache variable for type metadata for TimeZone?, MEMORY[0x263F079C8]);
LABEL_37:
            outlined destroy of ClosedRange<Date>((uint64_t)v32, type metadata accessor for DateTextStorage.Storage);
            char v59 = 1;
            return v59 & 1;
          }
          goto LABEL_34;
        }
        uint64_t v74 = v82;
        outlined init with copy of TimeZone?(v67, v82, &lazy cache variable for type metadata for TimeZone?, MEMORY[0x263F079C8]);
        if (v71(v68, 1, v72) == 1)
        {
          uint64_t v75 = (uint64_t (*)(uint64_t))MEMORY[0x263F079C8];
          outlined destroy of TimeZone?(v92, &lazy cache variable for type metadata for TimeZone?, MEMORY[0x263F079C8]);
          outlined destroy of TimeZone?(v46, &lazy cache variable for type metadata for TimeZone?, v75);
          (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v74, v72);
LABEL_34:
          uint64_t v65 = type metadata accessor for (TimeZone?, TimeZone?);
          uint64_t v64 = v67;
          goto LABEL_35;
        }
        int v76 = v81;
        (*(void (**)(char *, uint64_t, uint64_t))(v70 + 32))(v81, v68, v72);
        lazy protocol witness table accessor for type NSCalendarUnit and conformance NSCalendarUnit(&lazy protocol witness table cache variable for type TimeZone and conformance TimeZone, MEMORY[0x263F079C8]);
        char v77 = dispatch thunk of static Equatable.== infix(_:_:)();
        char v78 = *(void (**)(char *, uint64_t))(v70 + 8);
        v78(v76, v72);
        uint64_t v79 = v74;
        uint64_t v80 = (uint64_t (*)(uint64_t))MEMORY[0x263F079C8];
        outlined destroy of TimeZone?(v92, &lazy cache variable for type metadata for TimeZone?, MEMORY[0x263F079C8]);
        outlined destroy of TimeZone?(v46, &lazy cache variable for type metadata for TimeZone?, v80);
        v78((char *)v79, v72);
        outlined destroy of TimeZone?(v67, &lazy cache variable for type metadata for TimeZone?, v80);
        if (v77) {
          goto LABEL_37;
        }
LABEL_38:
        uint64_t v60 = type metadata accessor for DateTextStorage.Storage;
        goto LABEL_18;
      }
      outlined consume of ResolvableCurrentDate.DateFormat();
      outlined consume of ResolvableCurrentDate.DateFormat();
LABEL_23:
      uint64_t v63 = (uint64_t (*)(uint64_t))MEMORY[0x263F079C8];
      outlined destroy of TimeZone?(v48, &lazy cache variable for type metadata for TimeZone?, MEMORY[0x263F079C8]);
      outlined destroy of TimeZone?(v46, &lazy cache variable for type metadata for TimeZone?, v63);
      uint64_t v60 = type metadata accessor for DateTextStorage.Storage;
      goto LABEL_18;
    }
    outlined destroy of TimeZone?(v41, &lazy cache variable for type metadata for TimeZone?, MEMORY[0x263F079C8]);
    outlined consume of ResolvableCurrentDate.DateFormat();
LABEL_17:
    uint64_t v60 = (uint64_t (*)(void))type metadata accessor for (DateTextStorage.Storage, DateTextStorage.Storage);
LABEL_18:
    outlined destroy of ClosedRange<Date>((uint64_t)v32, v60);
    char v59 = 0;
    return v59 & 1;
  }
  outlined init with copy of ClosedRange<Date>((uint64_t)v32, (uint64_t)v23, type metadata accessor for DateTextStorage.Storage);
  type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
  uint64_t v50 = *(int *)(v49 + 48);
  int v51 = v23[v50];
  if (swift_getEnumCaseMultiPayload() != 2)
  {
    outlined destroy of ClosedRange<Date>((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
    goto LABEL_17;
  }
  LODWORD(v94) = v51;
  char v52 = *(unsigned char *)(v34 + v50);
  uint64_t v53 = v90;
  outlined init with take of WhitespaceRemovingFormatStyle<Date.FormatStyle.Attributed, AttributeScopes.FoundationAttributes.DateFieldAttribute>(v34, v90, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  type metadata accessor for Date();
  lazy protocol witness table accessor for type NSCalendarUnit and conformance NSCalendarUnit(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
  char v54 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v55 = v89;
  outlined init with copy of ClosedRange<Date>((uint64_t)v23, v89, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  uint64_t v56 = v88;
  outlined init with copy of ClosedRange<Date>(v53, v88, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  if ((v54 & 1) == 0)
  {
    outlined destroy of ClosedRange<Date>(v56, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
    outlined destroy of ClosedRange<Date>(v55, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
    outlined destroy of ClosedRange<Date>(v53, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
    uint64_t v64 = (uint64_t)v23;
    uint64_t v65 = type metadata accessor for ClosedRange<Date>;
LABEL_35:
    outlined destroy of ClosedRange<Date>(v64, (uint64_t (*)(void))v65);
    uint64_t v60 = type metadata accessor for DateTextStorage.Storage;
    goto LABEL_18;
  }
  char v57 = dispatch thunk of static Equatable.== infix(_:_:)();
  outlined destroy of ClosedRange<Date>(v56, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  outlined destroy of ClosedRange<Date>(v55, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  outlined destroy of ClosedRange<Date>(v53, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  outlined destroy of ClosedRange<Date>((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  if ((v57 & 1) == 0) {
    goto LABEL_38;
  }
  char v58 = v94 ^ v52;
  outlined destroy of ClosedRange<Date>((uint64_t)v32, type metadata accessor for DateTextStorage.Storage);
  char v59 = v58 ^ 1;
  return v59 & 1;
}

unint64_t specialized Text.DateStyle.Storage.init(rawValue:)(unint64_t result)
{
  if (result >= 5) {
    return 5;
  }
  return result;
}

uint64_t specialized Text.DateStyle.UnitsConfiguration.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7374696E75 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C797473 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized Text.init(timerInterval:pauseTime:countsDown:showsHours:animateSecondCounting:)(uint64_t a1, uint64_t a2, int a3, int a4)
{
  int v45 = a4;
  int v46 = a3;
  uint64_t v6 = type metadata accessor for SystemFormatStyle.Timer();
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v50 = (uint64_t)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v47 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v48 = (uint64_t)&v41 - v11;
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v41 - v17;
  uint64_t v19 = type metadata accessor for DateInterval();
  MEMORY[0x270FA5388](v19 - 8);
  uint64_t v21 = (char *)&v41 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for ResolvableTimer();
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char *)&v41 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = a1;
  uint64_t v49 = a2;
  uint64_t v44 = _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF10Foundation4DateV_s5NeverOSdTg5((void (*)(void *__return_ptr, char *))partial apply for closure #1 in Text.init(timerInterval:pauseTime:countsDown:showsHours:animateSecondCounting:));
  int v43 = v25 & 1;
  uint64_t v42 = v13;
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v26(v18, a1, v12);
  type metadata accessor for ClosedRange<Date>();
  uint64_t v28 = *(int *)(v27 + 36);
  uint64_t v51 = a1;
  v26(v15, a1 + v28, v12);
  DateInterval.init(start:end:)();
  if (v45) {
    uint64_t v29 = 224;
  }
  else {
    uint64_t v29 = 192;
  }
  long long v54 = 0uLL;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v30 = *(void (**)(long long *))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue2.shared) + 0x68);
  uint64_t v31 = static CoreGlue2.shared;
  v30(&v54);

  long long v53 = v54;
  ResolvableTimer.init(interval:pause:countdown:units:in:)((uint64_t)v21, v44, v43, v46 & 1, v29, 0, (uint64_t *)&v53, (uint64_t)v24);
  if (v24[*(int *)(v22 + 20) + 8])
  {
    type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for (pauseDate: Date), MEMORY[0x263F07490]);
    uint64_t v33 = (uint64_t)v47;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v47, 1, 1, v32);
  }
  else
  {
    uint64_t v34 = (void (**)(char *, uint64_t))(v42 + 8);
    if (v24[*(int *)(v22 + 24)])
    {
      DateInterval.end.getter();
      uint64_t v33 = (uint64_t)v47;
      static Date.- infix(_:_:)();
    }
    else
    {
      DateInterval.start.getter();
      uint64_t v33 = (uint64_t)v47;
      static Date.+ infix(_:_:)();
    }
    (*v34)(v18, v12);
    type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for (pauseDate: Date), MEMORY[0x263F07490]);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v33, 0, 1, v35);
  }
  uint64_t v36 = v48;
  outlined init with take of TimeDataSource<Date><A>.DateStorage(v33, v48);
  uint64_t v37 = v50;
  ResolvableTimer.format.getter(v50);
  outlined destroy of TimeZone?(v49, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
  outlined destroy of ClosedRange<Date>((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for ResolvableTimer);
  type metadata accessor for TimeDataFormattingStorage<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.Timer>();
  uint64_t v38 = swift_allocObject();
  uint64_t v39 = v38 + *(void *)(*(void *)v38 + 192);
  *(void *)uint64_t v39 = 0;
  *(unsigned char *)(v39 + 8) = 1;
  outlined init with take of TimeDataSource<Date><A>.DateStorage(v36, v38 + *(void *)(*(void *)v38 + 176));
  outlined init with take of WhitespaceRemovingFormatStyle<Date.FormatStyle.Attributed, AttributeScopes.FoundationAttributes.DateFieldAttribute>(v37, v38 + *(void *)(*(void *)v38 + 184), (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  *(void *)uint64_t v39 = 0x404E000000000000;
  *(unsigned char *)(v39 + 8) = 0;
  outlined destroy of ClosedRange<Date>(v51, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  return v38;
}

uint64_t outlined destroy of TimeZone?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  type metadata accessor for TimeZone?(0, a2, a3, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t specialized Text.init(interval:pauseAt:countdown:units:)(uint64_t a1, uint64_t a2, char a3, int a4, uint64_t a5, char a6)
{
  uint64_t v41 = a2;
  uint64_t v42 = a5;
  int v40 = a3 & 1;
  int v38 = a4;
  int v39 = a6 & 1;
  uint64_t v7 = type metadata accessor for SystemFormatStyle.Timer();
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v45 = (uint64_t)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v36 = *(void *)(v9 - 8);
  uint64_t v37 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v43 = (uint64_t)&v36 - v16;
  uint64_t v17 = type metadata accessor for DateInterval();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for ResolvableTimer();
  double v22 = MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)&v36 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v25 = *(void (**)(char *, uint64_t, uint64_t, double))(v18 + 16);
  uint64_t v44 = a1;
  v25(v20, a1, v17, v22);
  long long v47 = 0uLL;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v26 = *(void (**)(long long *))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue2.shared) + 0x68);
  uint64_t v27 = static CoreGlue2.shared;
  v26(&v47);

  long long v46 = v47;
  ResolvableTimer.init(interval:pause:countdown:units:in:)((uint64_t)v20, v41, v40, v38 & 1, v42, v39, (uint64_t *)&v46, (uint64_t)v24);
  if (v24[*(int *)(v21 + 20) + 8])
  {
    type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for (pauseDate: Date), MEMORY[0x263F07490]);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v14, 1, 1, v28);
  }
  else
  {
    uint64_t v29 = (void (**)(char *, uint64_t))(v36 + 8);
    if (v24[*(int *)(v21 + 24)])
    {
      DateInterval.end.getter();
      static Date.- infix(_:_:)();
    }
    else
    {
      DateInterval.start.getter();
      static Date.+ infix(_:_:)();
    }
    (*v29)(v11, v37);
    type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for (pauseDate: Date), MEMORY[0x263F07490]);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v14, 0, 1, v30);
  }
  uint64_t v31 = v43;
  outlined init with take of TimeDataSource<Date><A>.DateStorage((uint64_t)v14, v43);
  uint64_t v32 = v45;
  ResolvableTimer.format.getter(v45);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v44, v17);
  outlined destroy of ClosedRange<Date>((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for ResolvableTimer);
  type metadata accessor for TimeDataFormattingStorage<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.Timer>();
  uint64_t v33 = swift_allocObject();
  uint64_t v34 = v33 + *(void *)(*(void *)v33 + 192);
  *(void *)uint64_t v34 = 0;
  *(unsigned char *)(v34 + 8) = 1;
  outlined init with take of TimeDataSource<Date><A>.DateStorage(v31, v33 + *(void *)(*(void *)v33 + 176));
  outlined init with take of WhitespaceRemovingFormatStyle<Date.FormatStyle.Attributed, AttributeScopes.FoundationAttributes.DateFieldAttribute>(v32, v33 + *(void *)(*(void *)v33 + 184), (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  *(void *)uint64_t v34 = 0x404E000000000000;
  *(unsigned char *)(v34 + 8) = 0;
  return v33;
}

void type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)()
{
  if (!lazy cache variable for type metadata for (interval: ClosedRange<Date>, countdown: Bool))
  {
    type metadata accessor for ClosedRange<Date>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (interval: ClosedRange<Date>, countdown: Bool));
    }
  }
}

uint64_t outlined init with take of WhitespaceRemovingFormatStyle<Date.FormatStyle.Attributed, AttributeScopes.FoundationAttributes.DateFieldAttribute>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for ReferenceDateModifier(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for ReferenceDateModifier);
}

uint64_t outlined destroy of ClosedRange<Date>(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t lazy protocol witness table accessor for type Text.DateStyle.CodingKeys and conformance Text.DateStyle.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.DateStyle.CodingKeys and conformance Text.DateStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Text.DateStyle.CodingKeys and conformance Text.DateStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.DateStyle.CodingKeys and conformance Text.DateStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.DateStyle.CodingKeys and conformance Text.DateStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Text.DateStyle.CodingKeys and conformance Text.DateStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.DateStyle.CodingKeys and conformance Text.DateStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.DateStyle.CodingKeys and conformance Text.DateStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Text.DateStyle.CodingKeys and conformance Text.DateStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.DateStyle.CodingKeys and conformance Text.DateStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.DateStyle.CodingKeys and conformance Text.DateStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Text.DateStyle.CodingKeys and conformance Text.DateStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.DateStyle.CodingKeys and conformance Text.DateStyle.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Text.DateStyle.UnitsConfiguration and conformance Text.DateStyle.UnitsConfiguration()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.DateStyle.UnitsConfiguration and conformance Text.DateStyle.UnitsConfiguration;
  if (!lazy protocol witness table cache variable for type Text.DateStyle.UnitsConfiguration and conformance Text.DateStyle.UnitsConfiguration)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.DateStyle.UnitsConfiguration and conformance Text.DateStyle.UnitsConfiguration);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.DateStyle.UnitsConfiguration and conformance Text.DateStyle.UnitsConfiguration;
  if (!lazy protocol witness table cache variable for type Text.DateStyle.UnitsConfiguration and conformance Text.DateStyle.UnitsConfiguration)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.DateStyle.UnitsConfiguration and conformance Text.DateStyle.UnitsConfiguration);
  }
  return result;
}

void type metadata accessor for KeyedEncodingContainer<Text.DateStyle.UnitsConfiguration.CodingKeys>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Text.DateStyle.Errors and conformance Text.DateStyle.Errors()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.DateStyle.Errors and conformance Text.DateStyle.Errors;
  if (!lazy protocol witness table cache variable for type Text.DateStyle.Errors and conformance Text.DateStyle.Errors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.DateStyle.Errors and conformance Text.DateStyle.Errors);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.DateStyle.Errors and conformance Text.DateStyle.Errors;
  if (!lazy protocol witness table cache variable for type Text.DateStyle.Errors and conformance Text.DateStyle.Errors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.DateStyle.Errors and conformance Text.DateStyle.Errors);
  }
  return result;
}

void *sub_245D88B7C@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void *sub_245D88B88(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t getEnumTagSinglePayload for Text.DateStyle(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 253);
  }
  if (*(unsigned __int8 *)(a1 + 16) <= 3u) {
    int v3 = 3;
  }
  else {
    int v3 = *(unsigned __int8 *)(a1 + 16);
  }
  int v4 = v3 - 4;
  if (*(unsigned __int8 *)(a1 + 16) < 3u) {
    int v5 = -1;
  }
  else {
    int v5 = v4;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Text.DateStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 253;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = a2 + 3;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.DateStyle()
{
  return &type metadata for Text.DateStyle;
}

uint64_t getEnumTagSinglePayload for Text.DateStyle.UnitsConfiguration(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  BOOL v4 = v3 >= 3;
  int v5 = v3 - 3;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Text.DateStyle.UnitsConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = a2 + 2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.DateStyle.UnitsConfiguration()
{
  return &type metadata for Text.DateStyle.UnitsConfiguration;
}

unsigned char *storeEnumTagSinglePayload for Text.DateStyle.UnitsConfiguration.Style(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245D88DA0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.DateStyle.UnitsConfiguration.Style()
{
  return &type metadata for Text.DateStyle.UnitsConfiguration.Style;
}

ValueMetadata *type metadata accessor for ReferenceDateInput()
{
  return &type metadata for ReferenceDateInput;
}

uint64_t *initializeBufferWithCopyOfBuffer for ReferenceDateModifier(uint64_t *a1, uint64_t *a2)
{
  type metadata accessor for TimeZone?(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(v4 - 8);
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
  }
  return a1;
}

void *initializeWithCopy for ReferenceDateModifier(void *a1, const void *a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
  {
    type metadata accessor for TimeZone?(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(a1, a2, v4);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  }
  return a1;
}

void *assignWithCopy for ReferenceDateModifier(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  int v7 = v6(a1, 1, v4);
  int v8 = v6(a2, 1, v4);
  if (!v7)
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 24))(a1, a2, v4);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, v4);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    type metadata accessor for TimeZone?(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v5 + 16))(a1, a2, v4);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  return a1;
}

void *initializeWithTake for ReferenceDateModifier(void *a1, const void *a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
  {
    type metadata accessor for TimeZone?(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(a1, a2, v4);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  }
  return a1;
}

void *assignWithTake for ReferenceDateModifier(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  int v7 = v6(a1, 1, v4);
  int v8 = v6(a2, 1, v4);
  if (!v7)
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 40))(a1, a2, v4);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, v4);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    type metadata accessor for TimeZone?(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v5 + 32))(a1, a2, v4);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReferenceDateModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_245D89548);
}

uint64_t sub_245D89548(uint64_t a1, uint64_t a2)
{
  type metadata accessor for TimeZone?(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for ReferenceDateModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_245D895F8);
}

uint64_t sub_245D895F8(uint64_t a1, uint64_t a2)
{
  type metadata accessor for TimeZone?(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

void type metadata completion function for ReferenceDateModifier()
{
  type metadata accessor for TimeZone?(319, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t ObjC metadata update function for DateTextStorage()
{
  return type metadata accessor for DateTextStorage(0);
}

uint64_t type metadata completion function for DateTextStorage()
{
  uint64_t result = type metadata accessor for DateTextStorage.Storage(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_245D897EC()
{
  return swift_getWitnessTable();
}

unsigned char *storeEnumTagSinglePayload for Text.DateStyle.Storage(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245D89924);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.DateStyle.Storage()
{
  return &type metadata for Text.DateStyle.Storage;
}

unsigned char *storeEnumTagSinglePayload for Text.DateStyle.Errors(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x245D899F8);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.DateStyle.Errors()
{
  return &type metadata for Text.DateStyle.Errors;
}

ValueMetadata *type metadata accessor for Text.DateStyle.CodingKeys()
{
  return &type metadata for Text.DateStyle.CodingKeys;
}

uint64_t initializeBufferWithCopyOfBuffer for DateTextStorage.Storage(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *(void *)a1 = *a2;
    a1 = v17 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v18 = type metadata accessor for Date();
      uint64_t v19 = *(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v18 - 8) + 16);
      v19(a1, a2, v18);
      type metadata accessor for ClosedRange<Date>();
      v19(a1 + *(int *)(v20 + 36), (uint64_t *)((char *)a2 + *(int *)(v20 + 36)), v18);
      type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
      *(unsigned char *)(a1 + *(int *)(v21 + 48)) = *((unsigned char *)a2 + *(int *)(v21 + 48));
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v7 = *a2;
      uint64_t v8 = a2[1];
      char v9 = *((unsigned char *)a2 + 16);
      outlined copy of ResolvableCurrentDate.DateFormat();
      *(void *)a1 = v7;
      *(void *)(a1 + 8) = v8;
      *(unsigned char *)(a1 + 16) = v9;
      type metadata accessor for (dateFormat: ResolvableCurrentDate.DateFormat, timeZone: TimeZone?)();
      uint64_t v11 = *(int *)(v10 + 48);
      uint64_t v12 = (void *)(a1 + v11);
      uint64_t v13 = (char *)a2 + v11;
      uint64_t v14 = type metadata accessor for TimeZone();
      uint64_t v15 = *(void *)(v14 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
      {
        type metadata accessor for TimeZone?(0, &lazy cache variable for type metadata for TimeZone?, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      }
    }
    else
    {
      uint64_t v22 = type metadata accessor for DateInterval();
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v22 - 8) + 16))(a1, a2, v22);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t outlined copy of ResolvableCurrentDate.DateFormat()
{
  return swift_bridgeObjectRetain();
}

uint64_t destroy for DateTextStorage.Storage(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2)
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
    ((void (*)(void *__return_ptr, uint64_t, uint64_t))v12)((void *)(v7 - 8), a1, v7);
    type metadata accessor for ClosedRange<Date>();
    uint64_t v6 = a1 + *(int *)(v8 + 36);
    uint64_t v5 = v7;
    unsigned int v4 = v12;
  }
  else if (result == 1)
  {
    outlined consume of ResolvableCurrentDate.DateFormat();
    type metadata accessor for (dateFormat: ResolvableCurrentDate.DateFormat, timeZone: TimeZone?)();
    uint64_t v10 = a1 + *(int *)(v9 + 48);
    uint64_t v11 = type metadata accessor for TimeZone();
    uint64_t v13 = *(void *)(v11 - 8);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v10, 1, v11);
    if (result) {
      return result;
    }
    unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t))(v13 + 8);
    uint64_t v6 = v10;
    uint64_t v5 = v11;
  }
  else
  {
    if (result) {
      return result;
    }
    uint64_t v3 = type metadata accessor for DateInterval();
    unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    uint64_t v5 = v3;
    uint64_t v6 = a1;
  }

  return v4(v6, v5);
}

uint64_t outlined consume of ResolvableCurrentDate.DateFormat()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DateTextStorage.Storage(uint64_t a1, uint64_t *a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v15 = type metadata accessor for Date();
    uint64_t v16 = *(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v15 - 8) + 16);
    v16(a1, a2, v15);
    type metadata accessor for ClosedRange<Date>();
    v16(a1 + *(int *)(v17 + 36), (uint64_t *)((char *)a2 + *(int *)(v17 + 36)), v15);
    type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
    *(unsigned char *)(a1 + *(int *)(v18 + 48)) = *((unsigned char *)a2 + *(int *)(v18 + 48));
  }
  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v5 = *a2;
    uint64_t v6 = a2[1];
    char v7 = *((unsigned char *)a2 + 16);
    outlined copy of ResolvableCurrentDate.DateFormat();
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = v6;
    *(unsigned char *)(a1 + 16) = v7;
    type metadata accessor for (dateFormat: ResolvableCurrentDate.DateFormat, timeZone: TimeZone?)();
    uint64_t v9 = *(int *)(v8 + 48);
    uint64_t v10 = (void *)(a1 + v9);
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for TimeZone();
    uint64_t v13 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      type metadata accessor for TimeZone?(0, &lazy cache variable for type metadata for TimeZone?, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
  }
  else
  {
    uint64_t v19 = type metadata accessor for DateInterval();
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v19 - 8) + 16))(a1, a2, v19);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for DateTextStorage.Storage(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    outlined destroy of ClosedRange<Date>(a1, type metadata accessor for DateTextStorage.Storage);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v15 = type metadata accessor for Date();
      uint64_t v16 = *(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v15 - 8) + 16);
      v16(a1, a2, v15);
      type metadata accessor for ClosedRange<Date>();
      v16(a1 + *(int *)(v17 + 36), (uint64_t *)((char *)a2 + *(int *)(v17 + 36)), v15);
      type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
      *(unsigned char *)(a1 + *(int *)(v18 + 48)) = *((unsigned char *)a2 + *(int *)(v18 + 48));
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v5 = *a2;
      uint64_t v6 = a2[1];
      char v7 = *((unsigned char *)a2 + 16);
      outlined copy of ResolvableCurrentDate.DateFormat();
      *(void *)a1 = v5;
      *(void *)(a1 + 8) = v6;
      *(unsigned char *)(a1 + 16) = v7;
      type metadata accessor for (dateFormat: ResolvableCurrentDate.DateFormat, timeZone: TimeZone?)();
      uint64_t v9 = *(int *)(v8 + 48);
      uint64_t v10 = (void *)(a1 + v9);
      uint64_t v11 = (char *)a2 + v9;
      uint64_t v12 = type metadata accessor for TimeZone();
      uint64_t v13 = *(void *)(v12 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
      {
        type metadata accessor for TimeZone?(0, &lazy cache variable for type metadata for TimeZone?, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      }
    }
    else
    {
      uint64_t v19 = type metadata accessor for DateInterval();
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v19 - 8) + 16))(a1, a2, v19);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for DateTextStorage.Storage(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v12 = type metadata accessor for Date();
    uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32);
    v13(a1, a2, v12);
    type metadata accessor for ClosedRange<Date>();
    v13(a1 + *(int *)(v14 + 36), a2 + *(int *)(v14 + 36), v12);
    type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
    *(unsigned char *)(a1 + *(int *)(v15 + 48)) = *(unsigned char *)(a2 + *(int *)(v15 + 48));
  }
  else if (EnumCaseMultiPayload == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
    type metadata accessor for (dateFormat: ResolvableCurrentDate.DateFormat, timeZone: TimeZone?)();
    uint64_t v6 = *(int *)(v5 + 48);
    char v7 = (void *)(a1 + v6);
    uint64_t v8 = (const void *)(a2 + v6);
    uint64_t v9 = type metadata accessor for TimeZone();
    uint64_t v10 = *(void *)(v9 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
    {
      type metadata accessor for TimeZone?(0, &lazy cache variable for type metadata for TimeZone?, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
      memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
    }
  }
  else
  {
    uint64_t v16 = type metadata accessor for DateInterval();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 32))(a1, a2, v16);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for DateTextStorage.Storage(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of ClosedRange<Date>(a1, type metadata accessor for DateTextStorage.Storage);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v12 = type metadata accessor for Date();
      uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32);
      v13(a1, a2, v12);
      type metadata accessor for ClosedRange<Date>();
      v13(a1 + *(int *)(v14 + 36), a2 + *(int *)(v14 + 36), v12);
      type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
      *(unsigned char *)(a1 + *(int *)(v15 + 48)) = *(unsigned char *)(a2 + *(int *)(v15 + 48));
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
      type metadata accessor for (dateFormat: ResolvableCurrentDate.DateFormat, timeZone: TimeZone?)();
      uint64_t v6 = *(int *)(v5 + 48);
      char v7 = (void *)(a1 + v6);
      uint64_t v8 = (const void *)(a2 + v6);
      uint64_t v9 = type metadata accessor for TimeZone();
      uint64_t v10 = *(void *)(v9 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
      {
        type metadata accessor for TimeZone?(0, &lazy cache variable for type metadata for TimeZone?, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
        memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      }
    }
    else
    {
      uint64_t v16 = type metadata accessor for DateInterval();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 32))(a1, a2, v16);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void type metadata completion function for DateTextStorage.Storage()
{
  uint64_t v0 = type metadata accessor for DateInterval();
  if (v1 <= 0x3F)
  {
    uint64_t v6 = *(void *)(v0 - 8) + 64;
    type metadata accessor for TimeZone?(319, &lazy cache variable for type metadata for TimeZone?, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
    if (v2 <= 0x3F)
    {
      swift_getTupleTypeLayout2();
      char v7 = &v5;
      type metadata accessor for ClosedRange<Date>();
      if (v3 <= 0x3F)
      {
        swift_getTupleTypeLayout2();
        uint64_t v8 = &v4;
        swift_initEnumMetadataMultiPayload();
      }
    }
  }
}

unsigned char *storeEnumTagSinglePayload for Text.DateStyle.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245D8AA78);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for Text.DateStyle.UnitsConfiguration.CodingKeys()
{
  return &unk_26FA784D8;
}

unint64_t lazy protocol witness table accessor for type Text.DateStyle.Storage and conformance Text.DateStyle.Storage()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.DateStyle.Storage and conformance Text.DateStyle.Storage;
  if (!lazy protocol witness table cache variable for type Text.DateStyle.Storage and conformance Text.DateStyle.Storage)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.DateStyle.Storage and conformance Text.DateStyle.Storage);
  }
  return result;
}

uint64_t specialized Text.DateStyle.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656761726F7473 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000002462205E0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

void type metadata accessor for (TimeZone?, TimeZone?)()
{
  if (!lazy cache variable for type metadata for (TimeZone?, TimeZone?))
  {
    type metadata accessor for TimeZone?(255, &lazy cache variable for type metadata for TimeZone?, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (TimeZone?, TimeZone?));
    }
  }
}

void type metadata accessor for (DateTextStorage.Storage, DateTextStorage.Storage)()
{
  if (!lazy cache variable for type metadata for (DateTextStorage.Storage, DateTextStorage.Storage))
  {
    type metadata accessor for DateTextStorage.Storage(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (DateTextStorage.Storage, DateTextStorage.Storage));
    }
  }
}

uint64_t outlined init with copy of ClosedRange<Date>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined consume of ContentTransition?(uint64_t result, uint64_t a2)
{
  if (BYTE6(a2) != 2) {
    return outlined consume of ContentTransition.Storage(result, a2, SBYTE5(a2));
  }
  return result;
}

void type metadata accessor for TimeDataSource<Date><A>.DateStorage(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void))
{
  if (!*a2)
  {
    unint64_t v4 = a3(0);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t outlined init with take of TimeDataSource<Date><A>.DateStorage(uint64_t a1, uint64_t a2)
{
  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for TimeDataFormattingStorage<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.Timer>()
{
  if (!lazy cache variable for type metadata for TimeDataFormattingStorage<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.Timer>)
  {
    type metadata accessor for TimeDataSource<Date><A>.DateStorage(255, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage);
    type metadata accessor for SystemFormatStyle.Timer();
    lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage();
    lazy protocol witness table accessor for type NSCalendarUnit and conformance NSCalendarUnit(&lazy protocol witness table cache variable for type SystemFormatStyle.Timer and conformance SystemFormatStyle.Timer, (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.Timer);
    unint64_t v0 = type metadata accessor for TimeDataFormattingStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TimeDataFormattingStorage<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.Timer>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage()
{
  unint64_t result = lazy protocol witness table cache variable for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage;
  if (!lazy protocol witness table cache variable for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage)
  {
    type metadata accessor for TimeDataSource<Date><A>.DateStorage(255, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage);
  }
  return result;
}

uint64_t partial apply for closure #1 in Text.init(timerInterval:pauseTime:countsDown:showsHours:animateSecondCounting:)@<X0>(void *a1@<X8>)
{
  uint64_t result = Date.timeIntervalSince(_:)();
  *a1 = v3;
  return result;
}

void type metadata accessor for TimeZone?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for WhitespaceRemovingFormatStyle<Date.FormatStyle.Attributed, AttributeScopes.FoundationAttributes.DateFieldAttribute>()
{
  if (!lazy cache variable for type metadata for WhitespaceRemovingFormatStyle<Date.FormatStyle.Attributed, AttributeScopes.FoundationAttributes.DateFieldAttribute>)
  {
    type metadata accessor for Date.FormatStyle.Attributed();
    lazy protocol witness table accessor for type NSCalendarUnit and conformance NSCalendarUnit(&lazy protocol witness table cache variable for type Date.FormatStyle.Attributed and conformance Date.FormatStyle.Attributed, MEMORY[0x263F07090]);
    lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.DateFieldAttribute and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute();
    lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.DateFieldAttribute and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute();
    unint64_t v0 = (void (*)(uint64_t))MEMORY[0x263F065F0];
    lazy protocol witness table accessor for type NSCalendarUnit and conformance NSCalendarUnit(&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DateFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute.Field, MEMORY[0x263F065F0]);
    lazy protocol witness table accessor for type NSCalendarUnit and conformance NSCalendarUnit(&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DateFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute.Field, v0);
    unint64_t v1 = type metadata accessor for WhitespaceRemovingFormatStyle();
    if (!v2) {
      atomic_store(v1, (unint64_t *)&lazy cache variable for type metadata for WhitespaceRemovingFormatStyle<Date.FormatStyle.Attributed, AttributeScopes.FoundationAttributes.DateFieldAttribute>);
    }
  }
}

void type metadata accessor for TimeDataFormattingStorage<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.DateOffset>()
{
  if (!lazy cache variable for type metadata for TimeDataFormattingStorage<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.DateOffset>)
  {
    type metadata accessor for TimeDataSource<Date><A>.DateStorage(255, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage);
    type metadata accessor for SystemFormatStyle.DateOffset();
    lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage();
    lazy protocol witness table accessor for type NSCalendarUnit and conformance NSCalendarUnit(&lazy protocol witness table cache variable for type SystemFormatStyle.DateOffset and conformance SystemFormatStyle.DateOffset, (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.DateOffset);
    unint64_t v0 = type metadata accessor for TimeDataFormattingStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TimeDataFormattingStorage<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.DateOffset>);
    }
  }
}

void type metadata accessor for FormatStyleBox<Date.FormatStyle>()
{
  if (!lazy cache variable for type metadata for FormatStyleBox<Date.FormatStyle>)
  {
    type metadata accessor for Date.FormatStyle();
    lazy protocol witness table accessor for type NSCalendarUnit and conformance NSCalendarUnit((unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle and conformance Date.FormatStyle, MEMORY[0x263F07258]);
    lazy protocol witness table accessor for type NSCalendarUnit and conformance NSCalendarUnit(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
    unint64_t v0 = type metadata accessor for FormatStyleBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for FormatStyleBox<Date.FormatStyle>);
    }
  }
}

void type metadata accessor for FormatStyleBox<WhitespaceRemovingFormatStyle<Date.FormatStyle.Attributed, AttributeScopes.FoundationAttributes.DateFieldAttribute>>()
{
  if (!lazy cache variable for type metadata for FormatStyleBox<WhitespaceRemovingFormatStyle<Date.FormatStyle.Attributed, AttributeScopes.FoundationAttributes.DateFieldAttribute>>)
  {
    type metadata accessor for WhitespaceRemovingFormatStyle<Date.FormatStyle.Attributed, AttributeScopes.FoundationAttributes.DateFieldAttribute>();
    lazy protocol witness table accessor for type NSCalendarUnit and conformance NSCalendarUnit(&lazy protocol witness table cache variable for type WhitespaceRemovingFormatStyle<Date.FormatStyle.Attributed, AttributeScopes.FoundationAttributes.DateFieldAttribute> and conformance WhitespaceRemovingFormatStyle<A, B>, (void (*)(uint64_t))type metadata accessor for WhitespaceRemovingFormatStyle<Date.FormatStyle.Attributed, AttributeScopes.FoundationAttributes.DateFieldAttribute>);
    lazy protocol witness table accessor for type NSCalendarUnit and conformance NSCalendarUnit(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
    unint64_t v0 = type metadata accessor for FormatStyleBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for FormatStyleBox<WhitespaceRemovingFormatStyle<Date.FormatStyle.Attributed, AttributeScopes.FoundationAttributes.DateFieldAttribute>>);
    }
  }
}

float static SystemColorDefinition.systemRGB(_:_:_:_:)(float a1, float a2, float a3)
{
  char v4 = 0;
  return specialized Color.Resolved.init(colorSpace:red:green:blue:opacity:)(&v4, a1 / 255.0, a2 / 255.0, a3 / 255.0);
}

float static SystemColorDefinition.opacity(at:environment:)(uint64_t a1)
{
  float result = 0.18;
  if (a1 == 2) {
    float result = 0.25;
  }
  if (a1 == 1) {
    float result = 0.5;
  }
  if (a1 <= 0) {
    return 1.0;
  }
  return result;
}

{
  return static SystemColorDefinition.opacity(at:environment:)(a1);
}

uint64_t specialized ColorProvider._apply(color:to:)(uint64_t result, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v6 = result;
  switch(*(unsigned char *)(a2 + 24))
  {
    case 1:
      if (v4 != *(void *)(a2 + 16))
      {
        uint64_t v20 = *(void *)(a2 + 48);
        uint64_t v21 = *(void *)(a2 + 56);
        *(void *)&v43[0] = v20;
        *((void *)&v43[0] + 1) = v21;
        swift_retain();
        swift_retain();
        EnvironmentValues.effectiveTintAdjustmentMode.getter(&v41);
        uint64_t v22 = a3;
        if (v41 == 1)
        {
          _s7SwiftUI8ColorBox33_3A792CB70CFCF892676D7ADF8BCA260FLLCyAA0C0V07OpacityC033_F28C5F7FF836E967BAC87540A3CB4F65LLVGMaTm_0(0, &lazy cache variable for type metadata for ColorBox<Color.DesaturatedColor>, (void (*)(void))lazy protocol witness table accessor for type Color.DesaturatedColor and conformance Color.DesaturatedColor);
          uint64_t v22 = (void *)swift_allocObject();
          v22[2] = a3;
        }
        *(void *)&v43[0] = v20;
        *((void *)&v43[0] + 1) = v21;
        uint64_t v23 = *(double (**)(_OWORD *))(*v22 + 104);
        swift_retain();
        unsigned int v39 = COERCE_UNSIGNED_INT64(v23(v43));
        __int32 v40 = v24;
        unsigned int v38 = v25;
        float v27 = v26;
        swift_release();
        swift_release();
        swift_release();
        uint64_t v28 = *(void *)(a2 + 32);
        int v29 = *(unsigned __int8 *)(a2 + 40);
        *(void *)&v43[0] = v20;
        *((void *)&v43[0] + 1) = v21;
        uint64_t v37 = *(float (**)(uint64_t, _OWORD *))(*(void *)v6 + 152);
        swift_retain();
        swift_retain();
        outlined copy of _ShapeStyle_Shape.Result(v28, v29);
        swift_retain();
        swift_retain();
        swift_retain();
        float v30 = v37(v4, v43);
        swift_release();
        swift_release();
        outlined consume of _ShapeStyle_Shape.Result(v28, v29);
        swift_release();
        swift_release();
        swift_release();
        v31.i64[0] = v39;
        v31.i64[1] = v38;
        v32.i32[0] = v40;
        *(float *)&v32.i32[1] = v27 * v30;
        v43[0] = vorrq_s8((int8x16_t)vshll_n_s32(v32, 0x20uLL), v31);
        memset(&v43[1], 0, 64);
        char v44 = 0;
        int v45 = 1065353216;
        uint64_t v46 = 0;
        char v47 = -1;
        uint64_t v33 = MEMORY[0x263F8EE78];
        uint64_t v48 = MEMORY[0x263F8EE78];
        unsigned __int8 v42 = v3;
        if (v29 == 1)
        {
          uint64_t v33 = v28;
          uint64_t v34 = 0;
        }
        else
        {
          uint64_t v34 = v28;
        }
        if (v29 == 1) {
          char v35 = 5;
        }
        else {
          char v35 = v29;
        }
        uint64_t v41 = v33;
        _ShapeStyle_Pack.subscript.setter((uint64_t *)v43, &v42, v4);
        float result = outlined consume of _ShapeStyle_Shape.Result(v34, v35);
        *(void *)(a2 + 32) = v41;
        char v36 = 1;
        goto LABEL_20;
      }
      break;
    case 2:
      uint64_t v13 = *(void *)(a2 + 32);
      char v14 = *(unsigned char *)(a2 + 40);
      uint64_t v15 = *(void *)(a2 + 56);
      if (v3 < 1)
      {
        outlined copy of _ShapeStyle_Shape.Result(v13, v14);
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v18 = v6;
      }
      else
      {
        *(void *)&v43[0] = *(void *)(a2 + 48);
        *((void *)&v43[0] + 1) = v15;
        uint64_t v16 = *(float (**)(uint64_t, _OWORD *))(*(void *)result + 152);
        outlined copy of _ShapeStyle_Shape.Result(v13, v14);
        swift_retain();
        swift_retain_n();
        swift_retain_n();
        float v17 = v16(v3, v43);
        swift_release();
        swift_release();
        _s7SwiftUI8ColorBox33_3A792CB70CFCF892676D7ADF8BCA260FLLCyAA0C0V07OpacityC033_F28C5F7FF836E967BAC87540A3CB4F65LLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<Color.OpacityColor>, (void (*)(void))lazy protocol witness table accessor for type Color.OpacityColor and conformance Color.OpacityColor);
        uint64_t v18 = swift_allocObject();
        *(void *)(v18 + 16) = v6;
        *(double *)(v18 + 24) = v17;
      }
      swift_retain();
      outlined consume of _ShapeStyle_Shape.Result(v13, v14);
      swift_release();
      swift_release();
      swift_release();
      float result = outlined consume of _ShapeStyle_Shape.Result(v13, v14);
      *(void *)(a2 + 32) = v18;
      char v36 = 3;
LABEL_20:
      *(unsigned char *)(a2 + 40) = v36;
      break;
    case 3:
    case 4:
    case 5:
      return result;
    default:
      uint64_t v7 = *(void *)(a2 + 32);
      char v8 = *(unsigned char *)(a2 + 40);
      uint64_t v9 = *(void *)(a2 + 56);
      if (v3 < 1)
      {
        outlined copy of _ShapeStyle_Shape.Result(v7, v8);
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v12 = v6;
      }
      else
      {
        *(void *)&v43[0] = *(void *)(a2 + 48);
        *((void *)&v43[0] + 1) = v9;
        uint64_t v10 = *(float (**)(uint64_t, _OWORD *))(*(void *)result + 152);
        outlined copy of _ShapeStyle_Shape.Result(v7, v8);
        swift_retain();
        swift_retain_n();
        swift_retain_n();
        float v11 = v10(v3, v43);
        swift_release();
        swift_release();
        _s7SwiftUI8ColorBox33_3A792CB70CFCF892676D7ADF8BCA260FLLCyAA0C0V07OpacityC033_F28C5F7FF836E967BAC87540A3CB4F65LLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<Color.OpacityColor>, (void (*)(void))lazy protocol witness table accessor for type Color.OpacityColor and conformance Color.OpacityColor);
        uint64_t v12 = swift_allocObject();
        *(void *)(v12 + 16) = v6;
        *(double *)(v12 + 24) = v11;
      }
      swift_retain();
      outlined consume of _ShapeStyle_Shape.Result(v7, v8);
      swift_release();
      swift_release();
      swift_release();
      float result = outlined consume of _ShapeStyle_Shape.Result(v7, v8);
      *(void *)(a2 + 32) = v12;
      *(unsigned char *)(a2 + 40) = 0;
      break;
  }
  return result;
}

uint64_t specialized ColorProvider._apply(color:to:)(uint64_t result, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v7 = result;
  switch(*(unsigned char *)(a2 + 24))
  {
    case 1:
      if (v5 != *(void *)(a2 + 16))
      {
        uint64_t v16 = *(void *)(a2 + 56);
        *(void *)&v41[0] = *(void *)(a2 + 48);
        uint64_t v15 = *(void *)&v41[0];
        *((void *)&v41[0] + 1) = v16;
        float v17 = *(double (**)(_OWORD *))(*(void *)a3 + 104);
        swift_retain();
        swift_retain();
        unsigned int v37 = COERCE_UNSIGNED_INT64(v17(v41));
        __int32 v38 = v18;
        unsigned int v36 = v19;
        swift_release();
        swift_release();
        uint64_t v20 = *(void *)(a2 + 32);
        int v21 = *(unsigned __int8 *)(a2 + 40);
        *(void *)&v41[0] = v15;
        *((void *)&v41[0] + 1) = v16;
        char v35 = *(float (**)(uint64_t, _OWORD *))(*(void *)v7 + 152);
        swift_retain();
        swift_retain();
        outlined copy of _ShapeStyle_Shape.Result(v20, v21);
        swift_retain();
        swift_retain();
        swift_retain();
        float v22 = v35(v5, v41);
        swift_release();
        swift_release();
        outlined consume of _ShapeStyle_Shape.Result(v20, v21);
        swift_release();
        swift_release();
        swift_release();
        v23.i64[0] = v37;
        v23.i64[1] = v36;
        v24.i32[0] = v38;
        *(float *)&v24.i32[1] = v22 * a4;
        v41[0] = vorrq_s8((int8x16_t)vshll_n_s32(v24, 0x20uLL), v23);
        memset(&v41[1], 0, 64);
        char v42 = 0;
        int v43 = 1065353216;
        uint64_t v44 = 0;
        char v45 = -1;
        uint64_t v25 = MEMORY[0x263F8EE78];
        uint64_t v46 = MEMORY[0x263F8EE78];
        unsigned __int8 v40 = v4;
        if (v21 == 1)
        {
          uint64_t v25 = v20;
          uint64_t v26 = 0;
        }
        else
        {
          uint64_t v26 = v20;
        }
        if (v21 == 1) {
          char v27 = 5;
        }
        else {
          char v27 = v21;
        }
        uint64_t v39 = v25;
        _ShapeStyle_Pack.subscript.setter((uint64_t *)v41, &v40, v5);
        float result = outlined consume of _ShapeStyle_Shape.Result(v26, v27);
        *(void *)(a2 + 32) = v39;
        char v28 = 1;
        goto LABEL_18;
      }
      break;
    case 2:
      uint64_t v29 = *(void *)(a2 + 32);
      char v30 = *(unsigned char *)(a2 + 40);
      uint64_t v31 = *(void *)(a2 + 56);
      if (v4 < 1)
      {
        outlined copy of _ShapeStyle_Shape.Result(v29, v30);
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v34 = v7;
      }
      else
      {
        *(void *)&v41[0] = *(void *)(a2 + 48);
        *((void *)&v41[0] + 1) = v31;
        int32x2_t v32 = *(float (**)(uint64_t, _OWORD *))(*(void *)result + 152);
        outlined copy of _ShapeStyle_Shape.Result(v29, v30);
        swift_retain();
        swift_retain_n();
        swift_retain_n();
        float v33 = v32(v4, v41);
        swift_release();
        swift_release();
        _s7SwiftUI8ColorBox33_3A792CB70CFCF892676D7ADF8BCA260FLLCyAA0C0V07OpacityC033_F28C5F7FF836E967BAC87540A3CB4F65LLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<Color.OpacityColor>, (void (*)(void))lazy protocol witness table accessor for type Color.OpacityColor and conformance Color.OpacityColor);
        uint64_t v34 = swift_allocObject();
        *(void *)(v34 + 16) = v7;
        *(double *)(v34 + 24) = v33;
      }
      swift_retain();
      outlined consume of _ShapeStyle_Shape.Result(v29, v30);
      swift_release();
      swift_release();
      swift_release();
      float result = outlined consume of _ShapeStyle_Shape.Result(v29, v30);
      *(void *)(a2 + 32) = v34;
      char v28 = 3;
LABEL_18:
      *(unsigned char *)(a2 + 40) = v28;
      break;
    case 3:
    case 4:
    case 5:
      return result;
    default:
      uint64_t v8 = *(void *)(a2 + 32);
      char v9 = *(unsigned char *)(a2 + 40);
      uint64_t v10 = *(void *)(a2 + 56);
      if (v4 < 1)
      {
        outlined copy of _ShapeStyle_Shape.Result(v8, v9);
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v13 = v7;
      }
      else
      {
        *(void *)&v41[0] = *(void *)(a2 + 48);
        *((void *)&v41[0] + 1) = v10;
        float v11 = *(float (**)(uint64_t, _OWORD *))(*(void *)result + 152);
        outlined copy of _ShapeStyle_Shape.Result(v8, v9);
        swift_retain();
        swift_retain_n();
        swift_retain_n();
        float v12 = v11(v4, v41);
        swift_release();
        swift_release();
        _s7SwiftUI8ColorBox33_3A792CB70CFCF892676D7ADF8BCA260FLLCyAA0C0V07OpacityC033_F28C5F7FF836E967BAC87540A3CB4F65LLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<Color.OpacityColor>, (void (*)(void))lazy protocol witness table accessor for type Color.OpacityColor and conformance Color.OpacityColor);
        uint64_t v13 = swift_allocObject();
        *(void *)(v13 + 16) = v7;
        *(double *)(v13 + 24) = v12;
      }
      swift_retain();
      outlined consume of _ShapeStyle_Shape.Result(v8, v9);
      swift_release();
      swift_release();
      swift_release();
      float result = outlined consume of _ShapeStyle_Shape.Result(v8, v9);
      *(void *)(a2 + 32) = v13;
      *(unsigned char *)(a2 + 40) = 0;
      break;
  }
  return result;
}

uint64_t specialized ColorProvider._apply(color:to:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v6 = result;
  switch(*(unsigned char *)(a2 + 24))
  {
    case 1:
      if (v4 != *(void *)(a2 + 16))
      {
        unint64_t v14 = *(void *)(a2 + 56);
        unint64_t v40 = *(void *)(a2 + 48);
        unint64_t v13 = v40;
        unint64_t v41 = v14;
        uint64_t v15 = *(float (**)(unint64_t *))(*(void *)a3 + 104);
        swift_retain();
        swift_retain();
        float v16 = v15(&v40);
        float v18 = v17;
        float v20 = v19;
        float v22 = v21;
        swift_release();
        swift_release();
        *(float *)&unsigned int v23 = (float)(v20 * 0.0722) + (float)((float)(v16 * 0.2126) + (float)(v18 * 0.7152));
        uint64_t v24 = *(void *)(a2 + 32);
        int v25 = *(unsigned __int8 *)(a2 + 40);
        unint64_t v40 = v13;
        unint64_t v41 = v14;
        unsigned int v37 = *(float (**)(uint64_t, unint64_t *))(*(void *)v6 + 152);
        swift_retain();
        swift_retain();
        outlined copy of _ShapeStyle_Shape.Result(v24, v25);
        swift_retain();
        swift_retain();
        swift_retain();
        float v26 = v37(v4, &v40);
        swift_release();
        swift_release();
        outlined consume of _ShapeStyle_Shape.Result(v24, v25);
        swift_release();
        swift_release();
        swift_release();
        unint64_t v40 = v23 | ((unint64_t)v23 << 32);
        unint64_t v41 = v23 | ((unint64_t)COERCE_UNSIGNED_INT((float)(v22 * 0.8) * v26) << 32);
        long long v42 = 0u;
        long long v43 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        char v46 = 0;
        int v47 = 1065353216;
        uint64_t v48 = 0;
        char v49 = -1;
        uint64_t v27 = MEMORY[0x263F8EE78];
        uint64_t v50 = MEMORY[0x263F8EE78];
        unsigned __int8 v39 = v3;
        if (v25 == 1)
        {
          uint64_t v27 = v24;
          uint64_t v28 = 0;
        }
        else
        {
          uint64_t v28 = v24;
        }
        if (v25 == 1) {
          char v29 = 5;
        }
        else {
          char v29 = v25;
        }
        uint64_t v38 = v27;
        _ShapeStyle_Pack.subscript.setter((uint64_t *)&v40, &v39, v4);
        float result = outlined consume of _ShapeStyle_Shape.Result(v28, v29);
        *(void *)(a2 + 32) = v38;
        char v30 = 1;
        goto LABEL_18;
      }
      break;
    case 2:
      uint64_t v31 = *(void *)(a2 + 32);
      char v32 = *(unsigned char *)(a2 + 40);
      unint64_t v33 = *(void *)(a2 + 56);
      if (v3 < 1)
      {
        outlined copy of _ShapeStyle_Shape.Result(v31, v32);
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v36 = v6;
      }
      else
      {
        unint64_t v40 = *(void *)(a2 + 48);
        unint64_t v41 = v33;
        uint64_t v34 = *(float (**)(uint64_t, unint64_t *))(*(void *)result + 152);
        outlined copy of _ShapeStyle_Shape.Result(v31, v32);
        swift_retain();
        swift_retain_n();
        swift_retain_n();
        float v35 = v34(v3, &v40);
        swift_release();
        swift_release();
        _s7SwiftUI8ColorBox33_3A792CB70CFCF892676D7ADF8BCA260FLLCyAA0C0V07OpacityC033_F28C5F7FF836E967BAC87540A3CB4F65LLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<Color.OpacityColor>, (void (*)(void))lazy protocol witness table accessor for type Color.OpacityColor and conformance Color.OpacityColor);
        uint64_t v36 = swift_allocObject();
        *(void *)(v36 + 16) = v6;
        *(double *)(v36 + 24) = v35;
      }
      swift_retain();
      outlined consume of _ShapeStyle_Shape.Result(v31, v32);
      swift_release();
      swift_release();
      swift_release();
      float result = outlined consume of _ShapeStyle_Shape.Result(v31, v32);
      *(void *)(a2 + 32) = v36;
      char v30 = 3;
LABEL_18:
      *(unsigned char *)(a2 + 40) = v30;
      break;
    case 3:
    case 4:
    case 5:
      return result;
    default:
      uint64_t v7 = *(void *)(a2 + 32);
      char v8 = *(unsigned char *)(a2 + 40);
      unint64_t v9 = *(void *)(a2 + 56);
      if (v3 < 1)
      {
        outlined copy of _ShapeStyle_Shape.Result(v7, v8);
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v12 = v6;
      }
      else
      {
        unint64_t v40 = *(void *)(a2 + 48);
        unint64_t v41 = v9;
        uint64_t v10 = *(float (**)(uint64_t, unint64_t *))(*(void *)result + 152);
        outlined copy of _ShapeStyle_Shape.Result(v7, v8);
        swift_retain();
        swift_retain_n();
        swift_retain_n();
        float v11 = v10(v3, &v40);
        swift_release();
        swift_release();
        _s7SwiftUI8ColorBox33_3A792CB70CFCF892676D7ADF8BCA260FLLCyAA0C0V07OpacityC033_F28C5F7FF836E967BAC87540A3CB4F65LLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<Color.OpacityColor>, (void (*)(void))lazy protocol witness table accessor for type Color.OpacityColor and conformance Color.OpacityColor);
        uint64_t v12 = swift_allocObject();
        *(void *)(v12 + 16) = v6;
        *(double *)(v12 + 24) = v11;
      }
      swift_retain();
      outlined consume of _ShapeStyle_Shape.Result(v7, v8);
      swift_release();
      swift_release();
      swift_release();
      float result = outlined consume of _ShapeStyle_Shape.Result(v7, v8);
      *(void *)(a2 + 32) = v12;
      *(unsigned char *)(a2 + 40) = 0;
      break;
  }
  return result;
}

uint64_t specialized ColorProvider._apply(color:to:)(uint64_t result, uint64_t a2, double a3, double a4, double a5)
{
  uint64_t v5 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v8 = result;
  switch(*(unsigned char *)(a2 + 24))
  {
    case 1:
      if (v6 != *(void *)(a2 + 16))
      {
        float v15 = a3;
        float v16 = a4;
        float v17 = a5;
        float v40 = specialized Color.Resolved.init(displayP3Red:green:blue:opacity:)(v15, v16, v17);
        __int32 v41 = v18;
        unsigned int v39 = v19;
        float v21 = v20;
        uint64_t v22 = *(void *)(a2 + 32);
        uint64_t v23 = *(void *)(a2 + 56);
        int v24 = *(unsigned __int8 *)(a2 + 40);
        *(void *)&v44[0] = *(void *)(a2 + 48);
        *((void *)&v44[0] + 1) = v23;
        uint64_t v38 = *(float (**)(uint64_t, _OWORD *))(*(void *)v8 + 152);
        outlined copy of _ShapeStyle_Shape.Result(v22, v24);
        swift_retain();
        swift_retain_n();
        swift_retain_n();
        float v25 = v38(v6, v44);
        swift_release();
        swift_release();
        outlined consume of _ShapeStyle_Shape.Result(v22, v24);
        swift_release();
        swift_release();
        swift_release();
        v26.i64[0] = LODWORD(v40);
        v26.i64[1] = v39;
        v27.i32[0] = v41;
        *(float *)&v27.i32[1] = v21 * v25;
        v44[0] = vorrq_s8((int8x16_t)vshll_n_s32(v27, 0x20uLL), v26);
        memset(&v44[1], 0, 64);
        char v45 = 0;
        int v46 = 1065353216;
        uint64_t v47 = 0;
        char v48 = -1;
        uint64_t v28 = MEMORY[0x263F8EE78];
        uint64_t v49 = MEMORY[0x263F8EE78];
        unsigned __int8 v43 = v5;
        if (v24 == 1)
        {
          uint64_t v28 = v22;
          uint64_t v29 = 0;
        }
        else
        {
          uint64_t v29 = v22;
        }
        if (v24 == 1) {
          char v30 = 5;
        }
        else {
          char v30 = v24;
        }
        uint64_t v42 = v28;
        _ShapeStyle_Pack.subscript.setter((uint64_t *)v44, &v43, v6);
        float result = outlined consume of _ShapeStyle_Shape.Result(v29, v30);
        *(void *)(a2 + 32) = v42;
        char v31 = 1;
        goto LABEL_18;
      }
      break;
    case 2:
      uint64_t v32 = *(void *)(a2 + 32);
      char v33 = *(unsigned char *)(a2 + 40);
      uint64_t v34 = *(void *)(a2 + 56);
      if (v5 < 1)
      {
        outlined copy of _ShapeStyle_Shape.Result(*(void *)(a2 + 32), *(unsigned char *)(a2 + 40));
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v37 = v8;
      }
      else
      {
        *(void *)&v44[0] = *(void *)(a2 + 48);
        *((void *)&v44[0] + 1) = v34;
        float v35 = *(float (**)(uint64_t, _OWORD *))(*(void *)result + 152);
        outlined copy of _ShapeStyle_Shape.Result(v32, v33);
        swift_retain();
        swift_retain_n();
        swift_retain_n();
        float v36 = v35(v5, v44);
        swift_release();
        swift_release();
        _s7SwiftUI8ColorBox33_3A792CB70CFCF892676D7ADF8BCA260FLLCyAA0C0V07OpacityC033_F28C5F7FF836E967BAC87540A3CB4F65LLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<Color.OpacityColor>, (void (*)(void))lazy protocol witness table accessor for type Color.OpacityColor and conformance Color.OpacityColor);
        uint64_t v37 = swift_allocObject();
        *(void *)(v37 + 16) = v8;
        *(double *)(v37 + 24) = v36;
      }
      swift_retain();
      outlined consume of _ShapeStyle_Shape.Result(v32, v33);
      swift_release();
      swift_release();
      swift_release();
      float result = outlined consume of _ShapeStyle_Shape.Result(v32, v33);
      *(void *)(a2 + 32) = v37;
      char v31 = 3;
LABEL_18:
      *(unsigned char *)(a2 + 40) = v31;
      break;
    case 3:
    case 4:
    case 5:
      return result;
    default:
      uint64_t v9 = *(void *)(a2 + 32);
      char v10 = *(unsigned char *)(a2 + 40);
      uint64_t v11 = *(void *)(a2 + 56);
      if (v5 < 1)
      {
        outlined copy of _ShapeStyle_Shape.Result(*(void *)(a2 + 32), *(unsigned char *)(a2 + 40));
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v14 = v8;
      }
      else
      {
        *(void *)&v44[0] = *(void *)(a2 + 48);
        *((void *)&v44[0] + 1) = v11;
        uint64_t v12 = *(float (**)(uint64_t, _OWORD *))(*(void *)result + 152);
        outlined copy of _ShapeStyle_Shape.Result(v9, v10);
        swift_retain();
        swift_retain_n();
        swift_retain_n();
        float v13 = v12(v5, v44);
        swift_release();
        swift_release();
        _s7SwiftUI8ColorBox33_3A792CB70CFCF892676D7ADF8BCA260FLLCyAA0C0V07OpacityC033_F28C5F7FF836E967BAC87540A3CB4F65LLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<Color.OpacityColor>, (void (*)(void))lazy protocol witness table accessor for type Color.OpacityColor and conformance Color.OpacityColor);
        uint64_t v14 = swift_allocObject();
        *(void *)(v14 + 16) = v8;
        *(double *)(v14 + 24) = v13;
      }
      swift_retain();
      outlined consume of _ShapeStyle_Shape.Result(v9, v10);
      swift_release();
      swift_release();
      swift_release();
      float result = outlined consume of _ShapeStyle_Shape.Result(v9, v10);
      *(void *)(a2 + 32) = v14;
      *(unsigned char *)(a2 + 40) = 0;
      break;
  }
  return result;
}

uint64_t specialized ColorProvider._apply(color:to:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v7 = result;
  switch(*(unsigned char *)(a2 + 24))
  {
    case 1:
      if (v5 != *(void *)(a2 + 16))
      {
        uint64_t v16 = *(void *)(a2 + 56);
        *(void *)&v55[0] = *(void *)(a2 + 48);
        uint64_t v15 = *(void *)&v55[0];
        *((void *)&v55[0] + 1) = v16;
        float v17 = *(float (**)(_OWORD *))(*(void *)a3 + 104);
        swift_retain();
        swift_retain();
        float v18 = v17(v55);
        float v20 = v19;
        float v22 = v21;
        float v24 = v23;
        *(void *)&v55[0] = v15;
        *((void *)&v55[0] + 1) = v16;
        float v25 = (*(float (**)(_OWORD *))(*(void *)a4 + 104))(v55);
        Color.Resolved.over(_:)(v25, v26, v27, v28, v18, v20, v22, v24);
        unsigned int v51 = v29;
        __int32 v52 = v30;
        unsigned int v50 = v31;
        float v33 = v32;
        swift_release();
        swift_release();
        uint64_t v34 = *(void *)(a2 + 32);
        int v35 = *(unsigned __int8 *)(a2 + 40);
        *(void *)&v55[0] = v15;
        *((void *)&v55[0] + 1) = v16;
        uint64_t v49 = *(float (**)(uint64_t, _OWORD *))(*(void *)v7 + 152);
        swift_retain();
        swift_retain();
        outlined copy of _ShapeStyle_Shape.Result(v34, v35);
        swift_retain();
        swift_retain();
        swift_retain();
        float v36 = v49(v5, v55);
        swift_release();
        swift_release();
        outlined consume of _ShapeStyle_Shape.Result(v34, v35);
        swift_release();
        swift_release();
        swift_release();
        v37.i64[0] = v51;
        v37.i64[1] = v50;
        v38.i32[0] = v52;
        *(float *)&v38.i32[1] = v33 * v36;
        v55[0] = vorrq_s8((int8x16_t)vshll_n_s32(v38, 0x20uLL), v37);
        memset(&v55[1], 0, 64);
        char v56 = 0;
        int v57 = 1065353216;
        uint64_t v58 = 0;
        char v59 = -1;
        uint64_t v39 = MEMORY[0x263F8EE78];
        uint64_t v60 = MEMORY[0x263F8EE78];
        unsigned __int8 v54 = v4;
        if (v35 == 1)
        {
          uint64_t v39 = v34;
          uint64_t v40 = 0;
        }
        else
        {
          uint64_t v40 = v34;
        }
        if (v35 == 1) {
          char v41 = 5;
        }
        else {
          char v41 = v35;
        }
        uint64_t v53 = v39;
        _ShapeStyle_Pack.subscript.setter((uint64_t *)v55, &v54, v5);
        float result = outlined consume of _ShapeStyle_Shape.Result(v40, v41);
        *(void *)(a2 + 32) = v53;
        char v42 = 1;
        goto LABEL_18;
      }
      break;
    case 2:
      uint64_t v43 = *(void *)(a2 + 32);
      char v44 = *(unsigned char *)(a2 + 40);
      uint64_t v45 = *(void *)(a2 + 56);
      if (v4 < 1)
      {
        outlined copy of _ShapeStyle_Shape.Result(v43, v44);
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v48 = v7;
      }
      else
      {
        *(void *)&v55[0] = *(void *)(a2 + 48);
        *((void *)&v55[0] + 1) = v45;
        int v46 = *(float (**)(uint64_t, _OWORD *))(*(void *)result + 152);
        outlined copy of _ShapeStyle_Shape.Result(v43, v44);
        swift_retain();
        swift_retain_n();
        swift_retain_n();
        float v47 = v46(v4, v55);
        swift_release();
        swift_release();
        _s7SwiftUI8ColorBox33_3A792CB70CFCF892676D7ADF8BCA260FLLCyAA0C0V07OpacityC033_F28C5F7FF836E967BAC87540A3CB4F65LLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<Color.OpacityColor>, (void (*)(void))lazy protocol witness table accessor for type Color.OpacityColor and conformance Color.OpacityColor);
        uint64_t v48 = swift_allocObject();
        *(void *)(v48 + 16) = v7;
        *(double *)(v48 + 24) = v47;
      }
      swift_retain();
      outlined consume of _ShapeStyle_Shape.Result(v43, v44);
      swift_release();
      swift_release();
      swift_release();
      float result = outlined consume of _ShapeStyle_Shape.Result(v43, v44);
      *(void *)(a2 + 32) = v48;
      char v42 = 3;
LABEL_18:
      *(unsigned char *)(a2 + 40) = v42;
      break;
    case 3:
    case 4:
    case 5:
      return result;
    default:
      uint64_t v8 = *(void *)(a2 + 32);
      char v9 = *(unsigned char *)(a2 + 40);
      uint64_t v10 = *(void *)(a2 + 56);
      if (v4 < 1)
      {
        outlined copy of _ShapeStyle_Shape.Result(v8, v9);
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v13 = v7;
      }
      else
      {
        *(void *)&v55[0] = *(void *)(a2 + 48);
        *((void *)&v55[0] + 1) = v10;
        uint64_t v11 = *(float (**)(uint64_t, _OWORD *))(*(void *)result + 152);
        outlined copy of _ShapeStyle_Shape.Result(v8, v9);
        swift_retain();
        swift_retain_n();
        swift_retain_n();
        float v12 = v11(v4, v55);
        swift_release();
        swift_release();
        _s7SwiftUI8ColorBox33_3A792CB70CFCF892676D7ADF8BCA260FLLCyAA0C0V07OpacityC033_F28C5F7FF836E967BAC87540A3CB4F65LLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<Color.OpacityColor>, (void (*)(void))lazy protocol witness table accessor for type Color.OpacityColor and conformance Color.OpacityColor);
        uint64_t v13 = swift_allocObject();
        *(void *)(v13 + 16) = v7;
        *(double *)(v13 + 24) = v12;
      }
      swift_retain();
      outlined consume of _ShapeStyle_Shape.Result(v8, v9);
      swift_release();
      swift_release();
      swift_release();
      float result = outlined consume of _ShapeStyle_Shape.Result(v8, v9);
      *(void *)(a2 + 32) = v13;
      *(unsigned char *)(a2 + 40) = 0;
      break;
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  float (*v11)(uint64_t, _OWORD *);
  float v12;
  uint64_t v13;
  uint64_t v16;
  uint64_t v17;
  float (*v18)(uint64_t, _OWORD *);
  float v19;
  __int32 v20;
  unsigned int v21;
  float v22;
  float v23;
  float v24;
  uint64_t v25;
  int v26;
  float v27;
  int8x16_t v28;
  int32x2_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  float (*v37)(uint64_t, _OWORD *);
  float v38;
  uint64_t v39;
  float (*v40)(uint64_t, _OWORD *);
  unsigned int v41;
  unsigned int v42;
  __int32 v43;
  uint64_t v44;
  unsigned __int8 v45;
  _OWORD v46[5];
  char v47;
  int v48;
  uint64_t v49;
  char v50;
  uint64_t v51;

  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v7 = result;
  switch(*(unsigned char *)(a2 + 24))
  {
    case 1:
      if (v5 != *(void *)(a2 + 16))
      {
        float v17 = *(void *)(a2 + 56);
        *(void *)&v46[0] = *(void *)(a2 + 48);
        uint64_t v16 = *(void *)&v46[0];
        *((void *)&v46[0] + 1) = v17;
        float v18 = *(float (**)(uint64_t, _OWORD *))(*(void *)a3 + 152);
        swift_retain();
        swift_retain();
        float v19 = v18(a4, v46);
        *(void *)&v46[0] = v16;
        *((void *)&v46[0] + 1) = v17;
        char v42 = COERCE_UNSIGNED_INT64((*(double (**)(_OWORD *))(*(void *)a3 + 104))(v46));
        uint64_t v43 = v20;
        char v41 = v21;
        float v23 = v22;
        swift_release();
        swift_release();
        float v24 = v19 * v23;
        float v25 = *(void *)(a2 + 32);
        float v26 = *(unsigned __int8 *)(a2 + 40);
        *(void *)&v46[0] = v16;
        *((void *)&v46[0] + 1) = v17;
        uint64_t v40 = *(float (**)(uint64_t, _OWORD *))(*(void *)v7 + 152);
        swift_retain();
        swift_retain();
        outlined copy of _ShapeStyle_Shape.Result(v25, v26);
        swift_retain();
        swift_retain();
        swift_retain();
        float v27 = v40(v5, v46);
        swift_release();
        swift_release();
        outlined consume of _ShapeStyle_Shape.Result(v25, v26);
        swift_release();
        swift_release();
        swift_release();
        v28.i64[0] = v42;
        v28.i64[1] = v41;
        v29.i32[0] = v43;
        *(float *)&v29.i32[1] = v24 * v27;
        v46[0] = vorrq_s8((int8x16_t)vshll_n_s32(v29, 0x20uLL), v28);
        memset(&v46[1], 0, 64);
        float v47 = 0;
        uint64_t v48 = 1065353216;
        uint64_t v49 = 0;
        unsigned int v50 = -1;
        __int32 v30 = MEMORY[0x263F8EE78];
        unsigned int v51 = MEMORY[0x263F8EE78];
        uint64_t v45 = v4;
        if (v26 == 1)
        {
          __int32 v30 = v25;
          unsigned int v31 = 0;
        }
        else
        {
          unsigned int v31 = v25;
        }
        if (v26 == 1) {
          float v32 = 5;
        }
        else {
          float v32 = v26;
        }
        char v44 = v30;
        _ShapeStyle_Pack.subscript.setter((uint64_t *)v46, &v45, v5);
        float result = outlined consume of _ShapeStyle_Shape.Result(v31, v32);
        *(void *)(a2 + 32) = v44;
        float v33 = 1;
        goto LABEL_18;
      }
      break;
    case 2:
      uint64_t v34 = *(void *)(a2 + 32);
      int v35 = *(unsigned char *)(a2 + 40);
      float v36 = *(void *)(a2 + 56);
      if (v4 < 1)
      {
        outlined copy of _ShapeStyle_Shape.Result(v34, v35);
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v39 = v7;
      }
      else
      {
        *(void *)&v46[0] = *(void *)(a2 + 48);
        *((void *)&v46[0] + 1) = v36;
        int8x16_t v37 = *(float (**)(uint64_t, _OWORD *))(*(void *)result + 152);
        outlined copy of _ShapeStyle_Shape.Result(v34, v35);
        swift_retain();
        swift_retain_n();
        swift_retain_n();
        int32x2_t v38 = v37(v4, v46);
        swift_release();
        swift_release();
        _s7SwiftUI8ColorBox33_3A792CB70CFCF892676D7ADF8BCA260FLLCyAA0C0V07OpacityC033_F28C5F7FF836E967BAC87540A3CB4F65LLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<Color.OpacityColor>, (void (*)(void))lazy protocol witness table accessor for type Color.OpacityColor and conformance Color.OpacityColor);
        uint64_t v39 = swift_allocObject();
        *(void *)(v39 + 16) = v7;
        *(double *)(v39 + 24) = v38;
      }
      swift_retain();
      outlined consume of _ShapeStyle_Shape.Result(v34, v35);
      swift_release();
      swift_release();
      swift_release();
      float result = outlined consume of _ShapeStyle_Shape.Result(v34, v35);
      *(void *)(a2 + 32) = v39;
      float v33 = 3;
LABEL_18:
      *(unsigned char *)(a2 + 40) = v33;
      break;
    case 3:
    case 4:
    case 5:
      return result;
    default:
      uint64_t v8 = *(void *)(a2 + 32);
      char v9 = *(unsigned char *)(a2 + 40);
      uint64_t v10 = *(void *)(a2 + 56);
      if (v4 < 1)
      {
        outlined copy of _ShapeStyle_Shape.Result(v8, v9);
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v13 = v7;
      }
      else
      {
        *(void *)&v46[0] = *(void *)(a2 + 48);
        *((void *)&v46[0] + 1) = v10;
        uint64_t v11 = *(float (**)(uint64_t, _OWORD *))(*(void *)result + 152);
        outlined copy of _ShapeStyle_Shape.Result(v8, v9);
        swift_retain();
        swift_retain_n();
        swift_retain_n();
        float v12 = v11(v4, v46);
        swift_release();
        swift_release();
        _s7SwiftUI8ColorBox33_3A792CB70CFCF892676D7ADF8BCA260FLLCyAA0C0V07OpacityC033_F28C5F7FF836E967BAC87540A3CB4F65LLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<Color.OpacityColor>, (void (*)(void))lazy protocol witness table accessor for type Color.OpacityColor and conformance Color.OpacityColor);
        uint64_t v13 = swift_allocObject();
        *(void *)(v13 + 16) = v7;
        *(double *)(v13 + 24) = v12;
      }
      swift_retain();
      outlined consume of _ShapeStyle_Shape.Result(v8, v9);
      swift_release();
      swift_release();
      swift_release();
      float result = outlined consume of _ShapeStyle_Shape.Result(v8, v9);
      *(void *)(a2 + 32) = v13;
      *(unsigned char *)(a2 + 40) = 0;
      break;
  }
  return result;
}

uint64_t specialized ColorProvider._apply(color:to:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, float a5)
{
  uint64_t v5 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v8 = result;
  switch(*(unsigned char *)(a2 + 24))
  {
    case 1:
      if (v6 != *(void *)(a2 + 16))
      {
        uint64_t v18 = *(void *)(a2 + 56);
        *(void *)&v59[0] = *(void *)(a2 + 48);
        uint64_t v17 = *(void *)&v59[0];
        *((void *)&v59[0] + 1) = v18;
        float v19 = *(float (**)(_OWORD *))(*(void *)a3 + 104);
        swift_retain();
        swift_retain();
        float v20 = v19(v59);
        float v22 = v21;
        float v24 = v23;
        float v26 = v25;
        *(void *)&v59[0] = v17;
        *((void *)&v59[0] + 1) = v18;
        *(double *)v27.i64 = (*(double (**)(_OWORD *))(*(void *)a4 + 104))(v59);
        float v28 = *(float *)v27.i32;
        v30.i32[0] = v29;
        *(float *)v27.i32 = v20;
        ResolvedGradient.ColorSpace.mix(_:_:by:)(v27, v22, v24, v26, v28, v30, v31, v32, a5);
        unsigned int v55 = v33;
        __int32 v56 = v34;
        unsigned int v54 = v35;
        float v37 = v36;
        swift_release();
        swift_release();
        uint64_t v38 = *(void *)(a2 + 32);
        int v39 = *(unsigned __int8 *)(a2 + 40);
        *(void *)&v59[0] = v17;
        *((void *)&v59[0] + 1) = v18;
        uint64_t v53 = *(float (**)(uint64_t, _OWORD *))(*(void *)v8 + 152);
        swift_retain();
        swift_retain();
        outlined copy of _ShapeStyle_Shape.Result(v38, v39);
        swift_retain();
        swift_retain();
        swift_retain();
        float v40 = v53(v6, v59);
        swift_release();
        swift_release();
        outlined consume of _ShapeStyle_Shape.Result(v38, v39);
        swift_release();
        swift_release();
        swift_release();
        v41.i64[0] = v55;
        v41.i64[1] = v54;
        v42.i32[0] = v56;
        *(float *)&v42.i32[1] = v37 * v40;
        v59[0] = vorrq_s8((int8x16_t)vshll_n_s32(v42, 0x20uLL), v41);
        memset(&v59[1], 0, 64);
        char v60 = 0;
        int v61 = 1065353216;
        uint64_t v62 = 0;
        char v63 = -1;
        uint64_t v43 = MEMORY[0x263F8EE78];
        uint64_t v64 = MEMORY[0x263F8EE78];
        unsigned __int8 v58 = v5;
        if (v39 == 1)
        {
          uint64_t v43 = v38;
          uint64_t v44 = 0;
        }
        else
        {
          uint64_t v44 = v38;
        }
        if (v39 == 1) {
          char v45 = 5;
        }
        else {
          char v45 = v39;
        }
        uint64_t v57 = v43;
        _ShapeStyle_Pack.subscript.setter((uint64_t *)v59, &v58, v6);
        float result = outlined consume of _ShapeStyle_Shape.Result(v44, v45);
        *(void *)(a2 + 32) = v57;
        char v46 = 1;
        goto LABEL_18;
      }
      break;
    case 2:
      uint64_t v47 = *(void *)(a2 + 32);
      char v48 = *(unsigned char *)(a2 + 40);
      uint64_t v49 = *(void *)(a2 + 56);
      if (v5 < 1)
      {
        outlined copy of _ShapeStyle_Shape.Result(v47, v48);
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v52 = v8;
      }
      else
      {
        *(void *)&v59[0] = *(void *)(a2 + 48);
        *((void *)&v59[0] + 1) = v49;
        unsigned int v50 = *(float (**)(uint64_t, _OWORD *))(*(void *)result + 152);
        outlined copy of _ShapeStyle_Shape.Result(v47, v48);
        swift_retain();
        swift_retain_n();
        swift_retain_n();
        float v51 = v50(v5, v59);
        swift_release();
        swift_release();
        _s7SwiftUI8ColorBox33_3A792CB70CFCF892676D7ADF8BCA260FLLCyAA0C0V07OpacityC033_F28C5F7FF836E967BAC87540A3CB4F65LLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<Color.OpacityColor>, (void (*)(void))lazy protocol witness table accessor for type Color.OpacityColor and conformance Color.OpacityColor);
        uint64_t v52 = swift_allocObject();
        *(void *)(v52 + 16) = v8;
        *(double *)(v52 + 24) = v51;
      }
      swift_retain();
      outlined consume of _ShapeStyle_Shape.Result(v47, v48);
      swift_release();
      swift_release();
      swift_release();
      float result = outlined consume of _ShapeStyle_Shape.Result(v47, v48);
      *(void *)(a2 + 32) = v52;
      char v46 = 3;
LABEL_18:
      *(unsigned char *)(a2 + 40) = v46;
      break;
    case 3:
    case 4:
    case 5:
      return result;
    default:
      uint64_t v9 = *(void *)(a2 + 32);
      char v10 = *(unsigned char *)(a2 + 40);
      uint64_t v11 = *(void *)(a2 + 56);
      if (v5 < 1)
      {
        outlined copy of _ShapeStyle_Shape.Result(v9, v10);
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v14 = v8;
      }
      else
      {
        *(void *)&v59[0] = *(void *)(a2 + 48);
        *((void *)&v59[0] + 1) = v11;
        float v12 = *(float (**)(uint64_t, _OWORD *))(*(void *)result + 152);
        outlined copy of _ShapeStyle_Shape.Result(v9, v10);
        swift_retain();
        swift_retain_n();
        swift_retain_n();
        float v13 = v12(v5, v59);
        swift_release();
        swift_release();
        _s7SwiftUI8ColorBox33_3A792CB70CFCF892676D7ADF8BCA260FLLCyAA0C0V07OpacityC033_F28C5F7FF836E967BAC87540A3CB4F65LLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<Color.OpacityColor>, (void (*)(void))lazy protocol witness table accessor for type Color.OpacityColor and conformance Color.OpacityColor);
        uint64_t v14 = swift_allocObject();
        *(void *)(v14 + 16) = v8;
        *(double *)(v14 + 24) = v13;
      }
      swift_retain();
      outlined consume of _ShapeStyle_Shape.Result(v9, v10);
      swift_release();
      swift_release();
      swift_release();
      float result = outlined consume of _ShapeStyle_Shape.Result(v9, v10);
      *(void *)(a2 + 32) = v14;
      *(unsigned char *)(a2 + 40) = 0;
      break;
  }
  return result;
}

uint64_t specialized ColorProvider._apply(color:to:)(uint64_t result, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v5 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v8 = result;
  switch(*(unsigned char *)(a2 + 24))
  {
    case 1:
      if (v6 != *(void *)(a2 + 16))
      {
        uint64_t v19 = *(void *)(a2 + 56);
        *(void *)&v45[0] = *(void *)(a2 + 48);
        uint64_t v18 = *(void *)&v45[0];
        *((void *)&v45[0] + 1) = v19;
        swift_retain();
        swift_retain();
        unsigned int v41 = COERCE_UNSIGNED_INT64(Color.NamedColor.resolve(in:)(v45, a3, a4, a5));
        __int32 v42 = v20;
        unsigned int v40 = v21;
        float v23 = v22;
        swift_release();
        swift_release();
        uint64_t v24 = *(void *)(a2 + 32);
        int v25 = *(unsigned __int8 *)(a2 + 40);
        *(void *)&v45[0] = v18;
        *((void *)&v45[0] + 1) = v19;
        int v39 = *(float (**)(uint64_t, long long *))(*(void *)v8 + 152);
        swift_retain();
        swift_retain();
        outlined copy of _ShapeStyle_Shape.Result(v24, v25);
        swift_retain();
        swift_retain();
        swift_retain();
        float v26 = v39(v6, v45);
        swift_release();
        swift_release();
        outlined consume of _ShapeStyle_Shape.Result(v24, v25);
        swift_release();
        swift_release();
        swift_release();
        v27.i64[0] = v41;
        v27.i64[1] = v40;
        v28.i32[0] = v42;
        *(float *)&v28.i32[1] = v23 * v26;
        v45[0] = (__int128)vorrq_s8((int8x16_t)vshll_n_s32(v28, 0x20uLL), v27);
        memset(&v45[1], 0, 64);
        char v46 = 0;
        int v47 = 1065353216;
        uint64_t v48 = 0;
        char v49 = -1;
        uint64_t v29 = MEMORY[0x263F8EE78];
        uint64_t v50 = MEMORY[0x263F8EE78];
        unsigned __int8 v44 = v5;
        if (v25 == 1)
        {
          uint64_t v29 = v24;
          uint64_t v30 = 0;
        }
        else
        {
          uint64_t v30 = v24;
        }
        if (v25 == 1) {
          char v31 = 5;
        }
        else {
          char v31 = v25;
        }
        uint64_t v43 = v29;
        _ShapeStyle_Pack.subscript.setter((uint64_t *)v45, &v44, v6);
        float result = outlined consume of _ShapeStyle_Shape.Result(v30, v31);
        *(void *)(a2 + 32) = v43;
        char v32 = 1;
        goto LABEL_18;
      }
      break;
    case 2:
      uint64_t v33 = *(void *)(a2 + 32);
      char v34 = *(unsigned char *)(a2 + 40);
      uint64_t v35 = *(void *)(a2 + 56);
      if (v5 < 1)
      {
        outlined copy of _ShapeStyle_Shape.Result(*(void *)(a2 + 32), *(unsigned char *)(a2 + 40));
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v38 = v8;
      }
      else
      {
        *(void *)&v45[0] = *(void *)(a2 + 48);
        *((void *)&v45[0] + 1) = v35;
        float v36 = *(float (**)(uint64_t, long long *))(*(void *)result + 152);
        outlined copy of _ShapeStyle_Shape.Result(v33, v34);
        swift_retain();
        swift_retain_n();
        swift_retain_n();
        float v37 = v36(v5, v45);
        swift_release();
        swift_release();
        _s7SwiftUI8ColorBox33_3A792CB70CFCF892676D7ADF8BCA260FLLCyAA0C0V07OpacityC033_F28C5F7FF836E967BAC87540A3CB4F65LLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<Color.OpacityColor>, (void (*)(void))lazy protocol witness table accessor for type Color.OpacityColor and conformance Color.OpacityColor);
        uint64_t v38 = swift_allocObject();
        *(void *)(v38 + 16) = v8;
        *(double *)(v38 + 24) = v37;
      }
      swift_retain();
      outlined consume of _ShapeStyle_Shape.Result(v33, v34);
      swift_release();
      swift_release();
      swift_release();
      float result = outlined consume of _ShapeStyle_Shape.Result(v33, v34);
      *(void *)(a2 + 32) = v38;
      char v32 = 3;
LABEL_18:
      *(unsigned char *)(a2 + 40) = v32;
      break;
    case 3:
    case 4:
    case 5:
      return result;
    default:
      uint64_t v9 = *(void *)(a2 + 32);
      char v10 = *(unsigned char *)(a2 + 40);
      uint64_t v11 = *(void *)(a2 + 56);
      if (v5 < 1)
      {
        outlined copy of _ShapeStyle_Shape.Result(*(void *)(a2 + 32), *(unsigned char *)(a2 + 40));
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v14 = v8;
      }
      else
      {
        *(void *)&v45[0] = *(void *)(a2 + 48);
        *((void *)&v45[0] + 1) = v11;
        float v12 = *(float (**)(uint64_t, long long *))(*(void *)result + 152);
        outlined copy of _ShapeStyle_Shape.Result(v9, v10);
        swift_retain();
        swift_retain_n();
        swift_retain_n();
        float v13 = v12(v5, v45);
        swift_release();
        swift_release();
        _s7SwiftUI8ColorBox33_3A792CB70CFCF892676D7ADF8BCA260FLLCyAA0C0V07OpacityC033_F28C5F7FF836E967BAC87540A3CB4F65LLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<Color.OpacityColor>, (void (*)(void))lazy protocol witness table accessor for type Color.OpacityColor and conformance Color.OpacityColor);
        uint64_t v14 = swift_allocObject();
        *(void *)(v14 + 16) = v8;
        *(double *)(v14 + 24) = v13;
      }
      swift_retain();
      outlined consume of _ShapeStyle_Shape.Result(v9, v10);
      swift_release();
      swift_release();
      swift_release();
      float result = outlined consume of _ShapeStyle_Shape.Result(v9, v10);
      *(void *)(a2 + 32) = v14;
      *(unsigned char *)(a2 + 40) = 0;
      break;
  }
  return result;
}

uint64_t specialized ColorProvider._apply(color:to:)(uint64_t result, uint64_t a2, uint64_t a3, char a4, double a5)
{
  uint64_t v48 = a3;
  char v49 = a4 & 1;
  double v50 = a5;
  uint64_t v5 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v8 = result;
  switch(*(unsigned char *)(a2 + 24))
  {
    case 1:
      if (v6 != *(void *)(a2 + 16))
      {
        uint64_t v16 = *(void *)(a2 + 56);
        *(void *)&v42[0] = *(void *)(a2 + 48);
        uint64_t v15 = *(void *)&v42[0];
        *((void *)&v42[0] + 1) = v16;
        float v38 = GradientColorProvider.resolve(in:)((uint64_t *)v42);
        __int32 v39 = v17;
        unsigned int v37 = v18;
        float v20 = v19;
        uint64_t v21 = *(void *)(a2 + 32);
        int v22 = *(unsigned __int8 *)(a2 + 40);
        *(void *)&v42[0] = v15;
        *((void *)&v42[0] + 1) = v16;
        float v36 = *(float (**)(uint64_t, _OWORD *))(*(void *)v8 + 152);
        outlined copy of _ShapeStyle_Shape.Result(v21, v22);
        swift_retain();
        swift_retain_n();
        swift_retain_n();
        float v23 = v36(v6, v42);
        swift_release();
        swift_release();
        outlined consume of _ShapeStyle_Shape.Result(v21, v22);
        swift_release();
        swift_release();
        swift_release();
        v24.i64[0] = LODWORD(v38);
        v24.i64[1] = v37;
        v25.i32[0] = v39;
        *(float *)&v25.i32[1] = v20 * v23;
        v42[0] = vorrq_s8((int8x16_t)vshll_n_s32(v25, 0x20uLL), v24);
        memset(&v42[1], 0, 64);
        char v43 = 0;
        int v44 = 1065353216;
        uint64_t v45 = 0;
        char v46 = -1;
        uint64_t v26 = MEMORY[0x263F8EE78];
        uint64_t v47 = MEMORY[0x263F8EE78];
        unsigned __int8 v41 = v5;
        if (v22 == 1)
        {
          uint64_t v26 = v21;
          uint64_t v27 = 0;
        }
        else
        {
          uint64_t v27 = v21;
        }
        if (v22 == 1) {
          char v28 = 5;
        }
        else {
          char v28 = v22;
        }
        uint64_t v40 = v26;
        _ShapeStyle_Pack.subscript.setter((uint64_t *)v42, &v41, v6);
        float result = outlined consume of _ShapeStyle_Shape.Result(v27, v28);
        *(void *)(a2 + 32) = v40;
        char v29 = 1;
        goto LABEL_18;
      }
      break;
    case 2:
      uint64_t v30 = *(void *)(a2 + 32);
      char v31 = *(unsigned char *)(a2 + 40);
      uint64_t v32 = *(void *)(a2 + 56);
      if (v5 < 1)
      {
        outlined copy of _ShapeStyle_Shape.Result(v30, v31);
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v35 = v8;
      }
      else
      {
        *(void *)&v42[0] = *(void *)(a2 + 48);
        *((void *)&v42[0] + 1) = v32;
        uint64_t v33 = *(float (**)(uint64_t, _OWORD *))(*(void *)result + 152);
        outlined copy of _ShapeStyle_Shape.Result(v30, v31);
        swift_retain();
        swift_retain_n();
        swift_retain_n();
        float v34 = v33(v5, v42);
        swift_release();
        swift_release();
        _s7SwiftUI8ColorBox33_3A792CB70CFCF892676D7ADF8BCA260FLLCyAA0C0V07OpacityC033_F28C5F7FF836E967BAC87540A3CB4F65LLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<Color.OpacityColor>, (void (*)(void))lazy protocol witness table accessor for type Color.OpacityColor and conformance Color.OpacityColor);
        uint64_t v35 = swift_allocObject();
        *(void *)(v35 + 16) = v8;
        *(double *)(v35 + 24) = v34;
      }
      swift_retain();
      outlined consume of _ShapeStyle_Shape.Result(v30, v31);
      swift_release();
      swift_release();
      swift_release();
      float result = outlined consume of _ShapeStyle_Shape.Result(v30, v31);
      *(void *)(a2 + 32) = v35;
      char v29 = 3;
LABEL_18:
      *(unsigned char *)(a2 + 40) = v29;
      break;
    case 3:
    case 4:
    case 5:
      return result;
    default:
      uint64_t v9 = *(void *)(a2 + 32);
      char v10 = *(unsigned char *)(a2 + 40);
      uint64_t v11 = *(void *)(a2 + 56);
      if (v5 < 1)
      {
        outlined copy of _ShapeStyle_Shape.Result(v9, v10);
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v14 = v8;
      }
      else
      {
        *(void *)&v42[0] = *(void *)(a2 + 48);
        *((void *)&v42[0] + 1) = v11;
        float v12 = *(float (**)(uint64_t, _OWORD *))(*(void *)result + 152);
        outlined copy of _ShapeStyle_Shape.Result(v9, v10);
        swift_retain();
        swift_retain_n();
        swift_retain_n();
        float v13 = v12(v5, v42);
        swift_release();
        swift_release();
        _s7SwiftUI8ColorBox33_3A792CB70CFCF892676D7ADF8BCA260FLLCyAA0C0V07OpacityC033_F28C5F7FF836E967BAC87540A3CB4F65LLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<Color.OpacityColor>, (void (*)(void))lazy protocol witness table accessor for type Color.OpacityColor and conformance Color.OpacityColor);
        uint64_t v14 = swift_allocObject();
        *(void *)(v14 + 16) = v8;
        *(double *)(v14 + 24) = v13;
      }
      swift_retain();
      outlined consume of _ShapeStyle_Shape.Result(v9, v10);
      swift_release();
      swift_release();
      swift_release();
      float result = outlined consume of _ShapeStyle_Shape.Result(v9, v10);
      *(void *)(a2 + 32) = v14;
      *(unsigned char *)(a2 + 40) = 0;
      break;
  }
  return result;
}

uint64_t SystemColorType.resolve(in:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  char v4 = *v1;
  EnvironmentValues.systemColorDefinition.getter();
  char v7 = v4;
  v8[0] = v2;
  v8[1] = v3;
  return (*(uint64_t (**)(char *, void *))(v5 + 8))(&v7, v8);
}

uint64_t one-time initialization function for red()
{
  _s7SwiftUI8ColorBox33_3A792CB70CFCF892676D7ADF8BCA260FLLCyAA0C0V07OpacityC033_F28C5F7FF836E967BAC87540A3CB4F65LLVGMaTm_0(0, &lazy cache variable for type metadata for ColorBox<SystemColorType>, (void (*)(void))lazy protocol witness table accessor for type SystemColorType and conformance SystemColorType);
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 16) = 0;
  static Color.red = result;
  return result;
}

uint64_t static Color.red.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for red);
}

uint64_t one-time initialization function for green()
{
  _s7SwiftUI8ColorBox33_3A792CB70CFCF892676D7ADF8BCA260FLLCyAA0C0V07OpacityC033_F28C5F7FF836E967BAC87540A3CB4F65LLVGMaTm_0(0, &lazy cache variable for type metadata for ColorBox<SystemColorType>, (void (*)(void))lazy protocol witness table accessor for type SystemColorType and conformance SystemColorType);
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 16) = 3;
  static Color.green = result;
  return result;
}

uint64_t static Color.green.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for green);
}

uint64_t one-time initialization function for mint()
{
  _s7SwiftUI8ColorBox33_3A792CB70CFCF892676D7ADF8BCA260FLLCyAA0C0V07OpacityC033_F28C5F7FF836E967BAC87540A3CB4F65LLVGMaTm_0(0, &lazy cache variable for type metadata for ColorBox<SystemColorType>, (void (*)(void))lazy protocol witness table accessor for type SystemColorType and conformance SystemColorType);
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 16) = 5;
  static Color.mint = result;
  return result;
}

uint64_t static Color.mint.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for mint);
}

uint64_t one-time initialization function for teal()
{
  _s7SwiftUI8ColorBox33_3A792CB70CFCF892676D7ADF8BCA260FLLCyAA0C0V07OpacityC033_F28C5F7FF836E967BAC87540A3CB4F65LLVGMaTm_0(0, &lazy cache variable for type metadata for ColorBox<SystemColorType>, (void (*)(void))lazy protocol witness table accessor for type SystemColorType and conformance SystemColorType);
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 16) = 4;
  static Color.teal = result;
  return result;
}

uint64_t static Color.teal.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for teal);
}

uint64_t one-time initialization function for cyan()
{
  _s7SwiftUI8ColorBox33_3A792CB70CFCF892676D7ADF8BCA260FLLCyAA0C0V07OpacityC033_F28C5F7FF836E967BAC87540A3CB4F65LLVGMaTm_0(0, &lazy cache variable for type metadata for ColorBox<SystemColorType>, (void (*)(void))lazy protocol witness table accessor for type SystemColorType and conformance SystemColorType);
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 16) = 6;
  static Color.cyan = result;
  return result;
}

uint64_t static Color.cyan.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for cyan);
}

uint64_t one-time initialization function for purple()
{
  _s7SwiftUI8ColorBox33_3A792CB70CFCF892676D7ADF8BCA260FLLCyAA0C0V07OpacityC033_F28C5F7FF836E967BAC87540A3CB4F65LLVGMaTm_0(0, &lazy cache variable for type metadata for ColorBox<SystemColorType>, (void (*)(void))lazy protocol witness table accessor for type SystemColorType and conformance SystemColorType);
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 16) = 9;
  static Color.purple = result;
  return result;
}

uint64_t static Color.purple.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for purple);
}

uint64_t one-time initialization function for pink()
{
  _s7SwiftUI8ColorBox33_3A792CB70CFCF892676D7ADF8BCA260FLLCyAA0C0V07OpacityC033_F28C5F7FF836E967BAC87540A3CB4F65LLVGMaTm_0(0, &lazy cache variable for type metadata for ColorBox<SystemColorType>, (void (*)(void))lazy protocol witness table accessor for type SystemColorType and conformance SystemColorType);
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 16) = 10;
  static Color.pink = result;
  return result;
}

uint64_t static Color.pink.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for pink);
}

uint64_t one-time initialization function for brown()
{
  _s7SwiftUI8ColorBox33_3A792CB70CFCF892676D7ADF8BCA260FLLCyAA0C0V07OpacityC033_F28C5F7FF836E967BAC87540A3CB4F65LLVGMaTm_0(0, &lazy cache variable for type metadata for ColorBox<SystemColorType>, (void (*)(void))lazy protocol witness table accessor for type SystemColorType and conformance SystemColorType);
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 16) = 11;
  static Color.brown = result;
  return result;
}

uint64_t static Color.brown.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for brown);
}

uint64_t one-time initialization function for primarySystemFill()
{
  _s7SwiftUI8ColorBox33_3A792CB70CFCF892676D7ADF8BCA260FLLCyAA0C0V07OpacityC033_F28C5F7FF836E967BAC87540A3CB4F65LLVGMaTm_0(0, &lazy cache variable for type metadata for ColorBox<SystemColorType>, (void (*)(void))lazy protocol witness table accessor for type SystemColorType and conformance SystemColorType);
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 16) = 18;
  static Color.primarySystemFill = result;
  return result;
}

uint64_t static Color.primarySystemFill.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for primarySystemFill);
}

uint64_t one-time initialization function for secondarySystemFill()
{
  _s7SwiftUI8ColorBox33_3A792CB70CFCF892676D7ADF8BCA260FLLCyAA0C0V07OpacityC033_F28C5F7FF836E967BAC87540A3CB4F65LLVGMaTm_0(0, &lazy cache variable for type metadata for ColorBox<SystemColorType>, (void (*)(void))lazy protocol witness table accessor for type SystemColorType and conformance SystemColorType);
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 16) = 19;
  static Color.secondarySystemFill = result;
  return result;
}

uint64_t static Color.secondarySystemFill.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for secondarySystemFill);
}

uint64_t one-time initialization function for tertiarySystemFill()
{
  _s7SwiftUI8ColorBox33_3A792CB70CFCF892676D7ADF8BCA260FLLCyAA0C0V07OpacityC033_F28C5F7FF836E967BAC87540A3CB4F65LLVGMaTm_0(0, &lazy cache variable for type metadata for ColorBox<SystemColorType>, (void (*)(void))lazy protocol witness table accessor for type SystemColorType and conformance SystemColorType);
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 16) = 20;
  static Color.tertiarySystemFill = result;
  return result;
}

uint64_t static Color.tertiarySystemFill.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for tertiarySystemFill);
}

uint64_t one-time initialization function for quaternarySystemFill()
{
  _s7SwiftUI8ColorBox33_3A792CB70CFCF892676D7ADF8BCA260FLLCyAA0C0V07OpacityC033_F28C5F7FF836E967BAC87540A3CB4F65LLVGMaTm_0(0, &lazy cache variable for type metadata for ColorBox<SystemColorType>, (void (*)(void))lazy protocol witness table accessor for type SystemColorType and conformance SystemColorType);
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 16) = 21;
  static Color.quaternarySystemFill = result;
  return result;
}

uint64_t static Color.quaternarySystemFill.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for quaternarySystemFill);
}

uint64_t one-time initialization function for tertiary()
{
  _s7SwiftUI8ColorBox33_3A792CB70CFCF892676D7ADF8BCA260FLLCyAA0C0V07OpacityC033_F28C5F7FF836E967BAC87540A3CB4F65LLVGMaTm_0(0, &lazy cache variable for type metadata for ColorBox<SystemColorType>, (void (*)(void))lazy protocol witness table accessor for type SystemColorType and conformance SystemColorType);
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 16) = 15;
  static Color.tertiary = result;
  return result;
}

uint64_t static Color.tertiary.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for tertiary);
}

uint64_t one-time initialization function for quaternary()
{
  _s7SwiftUI8ColorBox33_3A792CB70CFCF892676D7ADF8BCA260FLLCyAA0C0V07OpacityC033_F28C5F7FF836E967BAC87540A3CB4F65LLVGMaTm_0(0, &lazy cache variable for type metadata for ColorBox<SystemColorType>, (void (*)(void))lazy protocol witness table accessor for type SystemColorType and conformance SystemColorType);
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 16) = 16;
  static Color.quaternary = result;
  return result;
}

uint64_t static Color.quaternary.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for quaternary);
}

uint64_t one-time initialization function for quinary()
{
  _s7SwiftUI8ColorBox33_3A792CB70CFCF892676D7ADF8BCA260FLLCyAA0C0V07OpacityC033_F28C5F7FF836E967BAC87540A3CB4F65LLVGMaTm_0(0, &lazy cache variable for type metadata for ColorBox<SystemColorType>, (void (*)(void))lazy protocol witness table accessor for type SystemColorType and conformance SystemColorType);
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 16) = 17;
  static Color.quinary = result;
  return result;
}

uint64_t static Color.quinary.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for quinary);
}

BOOL static SystemColorType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void SystemColorType.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int SystemColorType.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t getEnumTagSinglePayload for SystemColorType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xEB) {
    goto LABEL_17;
  }
  if (a2 + 21 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 21) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 21;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 21;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 21;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x16;
  int v8 = v6 - 22;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SystemColorType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 21 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 21) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xEB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEA)
  {
    unsigned int v6 = ((a2 - 235) >> 8) + 1;
    *uint64_t result = a2 + 21;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245D8F494);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 21;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SystemColorType()
{
  return &type metadata for SystemColorType;
}

uint64_t dispatch thunk of static SystemColorDefinition.value(for:environment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of static SystemColorDefinition.opacity(at:environment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

ValueMetadata *type metadata accessor for SystemColorsStyle()
{
  return &type metadata for SystemColorsStyle;
}

uint64_t specialized ColorProvider._apply(color:to:)(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v5 = result;
  switch(*(unsigned char *)(a2 + 24))
  {
    case 1:
      if (v3 != *(void *)(a2 + 16))
      {
        uint64_t v13 = *(void *)(a2 + 56);
        *(void *)&v40[0] = *(void *)(a2 + 48);
        uint64_t v12 = *(void *)&v40[0];
        *((void *)&v40[0] + 1) = v13;
        specialized Color.BackgroundColorProvider.resolve(in:)((uint64_t *)v40);
        unsigned int v36 = v14;
        __int32 v37 = v15;
        unsigned int v35 = v16;
        float v18 = v17;
        uint64_t v19 = *(void *)(a2 + 32);
        int v20 = *(unsigned __int8 *)(a2 + 40);
        *(void *)&v40[0] = v12;
        *((void *)&v40[0] + 1) = v13;
        float v34 = *(float (**)(uint64_t, _OWORD *))(*(void *)v5 + 152);
        outlined copy of _ShapeStyle_Shape.Result(v19, v20);
        swift_retain();
        swift_retain_n();
        swift_retain_n();
        float v21 = v34(v3, v40);
        swift_release();
        swift_release();
        outlined consume of _ShapeStyle_Shape.Result(v19, v20);
        swift_release();
        swift_release();
        swift_release();
        v22.i64[0] = v36;
        v22.i64[1] = v35;
        v23.i32[0] = v37;
        *(float *)&v23.i32[1] = v18 * v21;
        v40[0] = vorrq_s8((int8x16_t)vshll_n_s32(v23, 0x20uLL), v22);
        memset(&v40[1], 0, 64);
        char v41 = 0;
        int v42 = 1065353216;
        uint64_t v43 = 0;
        char v44 = -1;
        uint64_t v24 = MEMORY[0x263F8EE78];
        uint64_t v45 = MEMORY[0x263F8EE78];
        unsigned __int8 v39 = v2;
        if (v20 == 1)
        {
          uint64_t v24 = v19;
          uint64_t v25 = 0;
        }
        else
        {
          uint64_t v25 = v19;
        }
        if (v20 == 1) {
          char v26 = 5;
        }
        else {
          char v26 = v20;
        }
        uint64_t v38 = v24;
        _ShapeStyle_Pack.subscript.setter((uint64_t *)v40, &v39, v3);
        uint64_t result = outlined consume of _ShapeStyle_Shape.Result(v25, v26);
        *(void *)(a2 + 32) = v38;
        char v27 = 1;
        goto LABEL_18;
      }
      break;
    case 2:
      uint64_t v28 = *(void *)(a2 + 32);
      char v29 = *(unsigned char *)(a2 + 40);
      uint64_t v30 = *(void *)(a2 + 56);
      if (v2 < 1)
      {
        outlined copy of _ShapeStyle_Shape.Result(*(void *)(a2 + 32), *(unsigned char *)(a2 + 40));
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v33 = v5;
      }
      else
      {
        *(void *)&v40[0] = *(void *)(a2 + 48);
        *((void *)&v40[0] + 1) = v30;
        char v31 = *(float (**)(uint64_t, _OWORD *))(*(void *)result + 152);
        outlined copy of _ShapeStyle_Shape.Result(v28, v29);
        swift_retain();
        swift_retain_n();
        swift_retain_n();
        float v32 = v31(v2, v40);
        swift_release();
        swift_release();
        _s7SwiftUI8ColorBox33_3A792CB70CFCF892676D7ADF8BCA260FLLCyAA0C0V07OpacityC033_F28C5F7FF836E967BAC87540A3CB4F65LLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<Color.OpacityColor>, (void (*)(void))lazy protocol witness table accessor for type Color.OpacityColor and conformance Color.OpacityColor);
        uint64_t v33 = swift_allocObject();
        *(void *)(v33 + 16) = v5;
        *(double *)(v33 + 24) = v32;
      }
      swift_retain();
      outlined consume of _ShapeStyle_Shape.Result(v28, v29);
      swift_release();
      swift_release();
      swift_release();
      uint64_t result = outlined consume of _ShapeStyle_Shape.Result(v28, v29);
      *(void *)(a2 + 32) = v33;
      char v27 = 3;
LABEL_18:
      *(unsigned char *)(a2 + 40) = v27;
      break;
    case 3:
    case 4:
    case 5:
      return result;
    default:
      uint64_t v6 = *(void *)(a2 + 32);
      char v7 = *(unsigned char *)(a2 + 40);
      uint64_t v8 = *(void *)(a2 + 56);
      if (v2 < 1)
      {
        outlined copy of _ShapeStyle_Shape.Result(*(void *)(a2 + 32), *(unsigned char *)(a2 + 40));
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v11 = v5;
      }
      else
      {
        *(void *)&v40[0] = *(void *)(a2 + 48);
        *((void *)&v40[0] + 1) = v8;
        uint64_t v9 = *(float (**)(uint64_t, _OWORD *))(*(void *)result + 152);
        outlined copy of _ShapeStyle_Shape.Result(v6, v7);
        swift_retain();
        swift_retain_n();
        swift_retain_n();
        float v10 = v9(v2, v40);
        swift_release();
        swift_release();
        _s7SwiftUI8ColorBox33_3A792CB70CFCF892676D7ADF8BCA260FLLCyAA0C0V07OpacityC033_F28C5F7FF836E967BAC87540A3CB4F65LLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<Color.OpacityColor>, (void (*)(void))lazy protocol witness table accessor for type Color.OpacityColor and conformance Color.OpacityColor);
        uint64_t v11 = swift_allocObject();
        *(void *)(v11 + 16) = v5;
        *(double *)(v11 + 24) = v10;
      }
      swift_retain();
      outlined consume of _ShapeStyle_Shape.Result(v6, v7);
      swift_release();
      swift_release();
      swift_release();
      uint64_t result = outlined consume of _ShapeStyle_Shape.Result(v6, v7);
      *(void *)(a2 + 32) = v11;
      *(unsigned char *)(a2 + 40) = 0;
      break;
  }
  return result;
}

ValueMetadata *type metadata accessor for SystemColorDefinitionKey()
{
  return &type metadata for SystemColorDefinitionKey;
}

uint64_t AttributeDynamicLookup.subscript.getter()
{
  return AttributeDynamicLookup.subscript.getter();
}

{
  return MEMORY[0x270EEF810]();
}

{
  return MEMORY[0x270EEF818]();
}

uint64_t AttributedString.isStyled.getter()
{
  uint64_t v66 = type metadata accessor for AttributedString.Runs.Run();
  uint64_t v0 = *(void *)(v66 - 8);
  MEMORY[0x270FA5388](v66);
  uint64_t v69 = (char *)&v48 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = type metadata accessor for AttributedString.Runs.Index();
  uint64_t v2 = *(void *)(v59 - 8);
  MEMORY[0x270FA5388](v59);
  int v61 = (char *)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  char v60 = (char *)&v48 - v5;
  _sSay7SwiftUI15AnyFontModifierCGMaTm_0(0, &lazy cache variable for type metadata for AttributedString.Runs.Run?, MEMORY[0x263F067B0], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v48 - v7;
  type metadata accessor for IndexingIterator<AttributedString.Runs>(0);
  uint64_t v10 = v9 - 8;
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for AttributedString.Runs();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  unsigned int v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v48 - v18;
  AttributedString.runs.getter();
  int v20 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  uint64_t v48 = v19;
  unsigned int v54 = v20;
  v20(v16, (uint64_t)v19, v13);
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes and conformance AttributeScopes.SwiftUIAttributes(&lazy protocol witness table cache variable for type AttributedString.Runs and conformance AttributedString.Runs, MEMORY[0x263F067C8]);
  unsigned int v55 = v16;
  uint64_t v67 = v13;
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v68 = 0;
  float v21 = &v12[*(int *)(v10 + 44)];
  int8x16_t v22 = *(void (**)(char *, char *, uint64_t))(v2 + 16);
  uint64_t v62 = v2 + 16;
  uint64_t v57 = (void (**)(char *, uint64_t))(v2 + 8);
  unsigned __int8 v58 = v22;
  uint64_t v53 = (void (**)(char *))(v0 + 16);
  uint64_t v56 = v14 + 16;
  int32x2_t v23 = (void (**)(char *, uint64_t))(v14 + 8);
  uint64_t v65 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v0 + 56);
  uint64_t v52 = (uint64_t (**)(char *, uint64_t, uint64_t))(v0 + 48);
  double v50 = (void (**)(char *, char *, uint64_t))(v0 + 32);
  float v51 = (void (**)(char *, uint64_t))(v0 + 8);
  uint64_t v64 = v8;
  char v49 = v21;
  char v63 = v12;
  uint64_t v24 = v67;
  while (1)
  {
    uint64_t v25 = v23;
    uint64_t v26 = v59;
    char v27 = v60;
    v58(v60, v21, v59);
    lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes and conformance AttributeScopes.SwiftUIAttributes(&lazy protocol witness table cache variable for type AttributedString.Runs and conformance AttributedString.Runs, MEMORY[0x263F067C8]);
    uint64_t v28 = v61;
    dispatch thunk of Collection.endIndex.getter();
    lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes and conformance AttributeScopes.SwiftUIAttributes(&lazy protocol witness table cache variable for type AttributedString.Runs.Index and conformance AttributedString.Runs.Index, MEMORY[0x263F067B8]);
    char v29 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v30 = *v57;
    (*v57)(v28, v26);
    v30(v27, v26);
    if (v29)
    {
      (*v65)(v64, 1, 1, v66);
      uint64_t v40 = (uint64_t)v63;
      int32x2_t v23 = v25;
LABEL_8:
      _s7SwiftUI4TextV5StyleVWOhTm_0(v40, (uint64_t (*)(void))type metadata accessor for IndexingIterator<AttributedString.Runs>);
      uint64_t v46 = 0;
      uint64_t v38 = *v23;
LABEL_9:
      v38(v48, v24);
      return v46;
    }
    uint64_t v31 = (uint64_t)v63;
    float v32 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
    uint64_t v33 = v64;
    uint64_t v34 = v66;
    (*v53)(v64);
    v32(v70, 0);
    unsigned int v35 = v55;
    v54(v55, v31, v24);
    dispatch thunk of Collection.formIndex(after:)();
    uint64_t v36 = v34;
    __int32 v37 = v33;
    uint64_t v38 = *v25;
    (*v25)(v35, v24);
    (*v65)(v33, 0, 1, v34);
    int v39 = (*v52)(v33, 1, v34);
    uint64_t v40 = v31;
    int32x2_t v23 = v25;
    if (v39 == 1) {
      goto LABEL_8;
    }
    uint64_t v41 = (uint64_t)v69;
    (*v50)(v69, v37, v36);
    uint64_t v42 = v68;
    char v43 = closure #1 in AttributedString.isStyled.getter(v41);
    uint64_t v44 = v36;
    uint64_t v68 = v42;
    if (v42) {
      break;
    }
    char v45 = v43;
    (*v51)(v69, v44);
    float v21 = v49;
    if (v45)
    {
      _s7SwiftUI4TextV5StyleVWOhTm_0(v31, (uint64_t (*)(void))type metadata accessor for IndexingIterator<AttributedString.Runs>);
      uint64_t v46 = 1;
      uint64_t v24 = v67;
      goto LABEL_9;
    }
  }
  (*v51)(v69, v36);
  uint64_t result = _s7SwiftUI4TextV5StyleVWOhTm_0(v31, (uint64_t (*)(void))type metadata accessor for IndexingIterator<AttributedString.Runs>);
  __break(1u);
  return result;
}

uint64_t AttributedStringTextStorage.resolvesToEmpty(in:with:)()
{
  uint64_t v0 = type metadata accessor for AttributedString.Index();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v14 - v5;
  uint64_t v7 = type metadata accessor for AttributedString.CharacterView();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  AttributedString.characters.getter();
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes and conformance AttributeScopes.SwiftUIAttributes(&lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView, MEMORY[0x263F066D8]);
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes and conformance AttributeScopes.SwiftUIAttributes(&lazy protocol witness table cache variable for type AttributedString.Index and conformance AttributedString.Index, MEMORY[0x263F067E8]);
  char v11 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v12 = *(void (**)(char *, uint64_t))(v1 + 8);
  v12(v3, v0);
  v12(v6, v0);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return v11 & 1;
}

Swift::Bool __swiftcall AttributedStringTextStorage.isStyled(options:)(SwiftUI::Text::ResolveOptions options)
{
  return AttributedString.isStyled.getter() & 1;
}

double AttributedStringTextStorage.localizationInfo.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 40) = 0x80;
  return result;
}

uint64_t AttributedStringTextStorage.__ivar_destroyer()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC7SwiftUI27AttributedStringTextStorage_str;
  uint64_t v2 = type metadata accessor for AttributedString();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(v1, v2);
}

uint64_t AttributeScopes.SwiftUIAttributes.accessibility.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AttributeScopes.SwiftUIAttributes(0) + 92);
  uint64_t v4 = type metadata accessor for AttributeScopes.AccessibilityAttributes();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t AttributeScopes.SwiftUIAttributes.foundation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AttributeScopes.SwiftUIAttributes(0) + 96);
  uint64_t v4 = type metadata accessor for AttributeScopes.FoundationAttributes();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

void protocol witness for static DecodingConfigurationProviding.decodingConfiguration.getter in conformance AttributeScopes.SwiftUIAttributes()
{
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes and conformance AttributeScopes.SwiftUIAttributes(&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes and conformance AttributeScopes.SwiftUIAttributes, (void (*)(uint64_t))type metadata accessor for AttributeScopes.SwiftUIAttributes);

  JUMPOUT(0x24C5202C0);
}

void protocol witness for static EncodingConfigurationProviding.encodingConfiguration.getter in conformance AttributeScopes.SwiftUIAttributes()
{
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes and conformance AttributeScopes.SwiftUIAttributes(&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes and conformance AttributeScopes.SwiftUIAttributes, (void (*)(uint64_t))type metadata accessor for AttributeScopes.SwiftUIAttributes);

  JUMPOUT(0x24C5202D0);
}

uint64_t static AttributeScopes.SwiftUIAttributes.FontAttribute.name.getter()
{
  return 0x2E49557466697753;
}

unint64_t static AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute.name.getter()
{
  return 0xD000000000000017;
}

unint64_t static AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute.name.getter()
{
  return 0xD000000000000017;
}

unint64_t static AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute.name.getter()
{
  return 0xD00000000000001ALL;
}

unint64_t static AttributeScopes.SwiftUIAttributes.StrikethroughColorAttribute.name.getter()
{
  return 0xD00000000000001ALL;
}

unint64_t static AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute.name.getter()
{
  return 0xD000000000000016;
}

unint64_t static AttributeScopes.SwiftUIAttributes.UnderlineColorAttribute.name.getter()
{
  return 0xD000000000000016;
}

unint64_t static AttributeScopes.SwiftUIAttributes.EncapsulationAttribute.name.getter()
{
  return 0xD000000000000015;
}

uint64_t static AttributeScopes.SwiftUIAttributes.KerningAttribute.name.getter()
{
  return 0x2E49557466697753;
}

unint64_t static AttributeScopes.SwiftUIAttributes.TrackingAttribute.name.getter()
{
  return 0xD000000000000010;
}

unint64_t static AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute.name.getter()
{
  return 0xD000000000000016;
}

uint64_t protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute()
{
  return static DecodableAttributedStringKey<>.decode(from:)();
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute()
{
  return static EncodableAttributedStringKey<>.encode(_:to:)();
}

unint64_t static AttributeScopes.SwiftUIAttributes.GlyphInfoAttribute.name.getter()
{
  return 0xD000000000000011;
}

unint64_t static AttributeScopes.SwiftUIAttributes.TextScaleAttribute.name.getter()
{
  return 0xD000000000000011;
}

unint64_t static AttributeScopes.SwiftUIAttributes.SuperscriptAttribute.name.getter()
{
  return 0xD000000000000013;
}

unint64_t static AttributeScopes.SwiftUIAttributes.CustomContainerAttribute.name.getter()
{
  return 0xD000000000000018;
}

uint64_t AttributeScopes.SwiftUIAttributes.InterpolationStrategy.encode(to:)(void *a1, int a2)
{
  int v21 = a2;
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8E0C0];
  type metadata accessor for KeyedDecodingContainer<AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys, (uint64_t)&unk_26FA3EAF8, MEMORY[0x263F8E0C0]);
  uint64_t v19 = *(void *)(v4 - 8);
  uint64_t v20 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v16 - v5;
  type metadata accessor for KeyedDecodingContainer<AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys, (uint64_t)&unk_26FA3EAD8, v3);
  uint64_t v17 = *(void *)(v7 - 8);
  uint64_t v18 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v16 - v8;
  type metadata accessor for KeyedDecodingContainer<AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys, (uint64_t)&unk_26FA3EA48, v3);
  uint64_t v11 = v10;
  uint64_t v12 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v16 - v13;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v21)
  {
    char v23 = 1;
    lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v20);
  }
  else
  {
    char v22 = 0;
    lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v9, v18);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys()
{
  if (*v0) {
    return 0x74616D696E616E75;
  }
  else {
    return 0x646574616D696E61;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = specialized AttributeScopes.SwiftUIAttributes.InterpolationStrategy.init(from:)(a1);
  if (!v2) {
    *a2 = result & 1;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy(void *a1)
{
  return AttributeScopes.SwiftUIAttributes.InterpolationStrategy.encode(to:)(a1, *v1);
}

uint64_t protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy()
{
  return static DecodableAttributedStringKey<>.decode(from:)();
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy()
{
  return static EncodableAttributedStringKey<>.encode(_:to:)();
}

unint64_t static AttributeScopes.SwiftUIAttributes.FontModifiersAttribute.name.getter()
{
  return 0xD000000000000015;
}

unint64_t static AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute.name.getter()
{
  return 0xD00000000000001BLL;
}

unint64_t static AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute.name.getter()
{
  return 0xD00000000000001ALL;
}

uint64_t static AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute.inheritedByAddedText.getter()
{
  return static AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute.inheritedByAddedText;
}

uint64_t static AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute.inheritedByAddedText.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  static AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute.inheritedByAddedText = a1;
  return result;
}

uint64_t (*static AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute.inheritedByAddedText.modify())()
{
  return DisplayList.GraphicsRenderer.platformViewMode.modify;
}

uint64_t static AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute.runBoundaries.getter@<X0>(void *a1@<X8>)
{
  *a1 = 12369903;
  a1[1] = 0xA300000000000000;
  uint64_t v2 = *MEMORY[0x263F06740];
  uint64_t v3 = type metadata accessor for AttributedString.AttributeRunBoundaries();
  uint64_t v6 = *(void *)(v3 - 8);
  (*(void (**)(void *, uint64_t, uint64_t))(v6 + 104))(a1, v2, v3);
  uint64_t v4 = *(uint64_t (**)(void *, void, uint64_t, uint64_t))(v6 + 56);

  return v4(a1, 0, 1, v3);
}

uint64_t protocol witness for static AttributedStringKey.inheritedByAddedText.getter in conformance AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute()
{
  return static AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute.inheritedByAddedText;
}

uint64_t closure #1 in AttributedString.isStyled.getter(uint64_t a1)
{
  uint64_t v2 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  _sSay7SwiftUI15AnyFontModifierCGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v111 = &v106[-v4];
  uint64_t v5 = type metadata accessor for AttributedString.Runs.Run();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v122 = &v106[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v8);
  uint64_t v121 = &v106[-v9];
  MEMORY[0x270FA5388](v10);
  uint64_t v120 = &v106[-v11];
  MEMORY[0x270FA5388](v12);
  uint64_t v119 = &v106[-v13];
  MEMORY[0x270FA5388](v14);
  uint64_t v118 = &v106[-v15];
  MEMORY[0x270FA5388](v16);
  unint64_t v113 = &v106[-v17];
  MEMORY[0x270FA5388](v18);
  uint64_t v116 = &v106[-v19];
  MEMORY[0x270FA5388](v20);
  uint64_t v112 = &v106[-v21];
  MEMORY[0x270FA5388](v22);
  uint64_t v123 = &v106[-v23];
  MEMORY[0x270FA5388](v24);
  uint64_t v115 = &v106[-v25];
  MEMORY[0x270FA5388](v26);
  uint64_t v114 = &v106[-v27];
  MEMORY[0x270FA5388](v28);
  uint64_t v30 = &v106[-v29];
  MEMORY[0x270FA5388](v31);
  uint64_t v117 = &v106[-v32];
  MEMORY[0x270FA5388](v33);
  unsigned int v35 = &v106[-v34];
  _sSay7SwiftUI15AnyFontModifierCGMaTm_0(0, &lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, MEMORY[0x263F03950], v2);
  MEMORY[0x270FA5388](v36 - 8);
  uint64_t v38 = &v106[-v37];
  uint64_t KeyPath = swift_getKeyPath();
  swift_getKeyPath();
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute and conformance AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute();
  uint64_t v134 = a1;
  AttributedString.Runs.Run.subscript.getter();
  swift_release();
  BOOL v110 = v125 != 0;
  if (v125) {

  }
  uint64_t v39 = swift_getKeyPath();
  MEMORY[0x270FA5388](v39);
  swift_getKeyPath();
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute and conformance AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute();
  uint64_t v40 = v134;
  AttributedString.Runs.Run.subscript.getter();
  swift_release();
  uint64_t v41 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
  int v42 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v41 - 8) + 48))(v38, 1, v41);
  _s10Foundation3URLVSgWOhTm_0((uint64_t)v38, &lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, MEMORY[0x263F03950]);
  uint64_t v43 = swift_getKeyPath();
  MEMORY[0x270FA5388](v43);
  swift_getKeyPath();
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.FontAttribute and conformance AttributeScopes.SwiftUIAttributes.FontAttribute();
  AttributedString.Runs.Run.subscript.getter();
  swift_release();
  id v44 = v125;
  swift_release();
  uint64_t v45 = v6;
  uint64_t v46 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v6 + 16);
  v46(v35, v40, v5);
  if (v44)
  {
    uint64_t v47 = *(unsigned char **)(v45 + 8);
    ((void (*)(unsigned char *, uint64_t))v47)(v35, v5);
    uint64_t v48 = v117;
    v46(v117, v40, v5);
    uint64_t v49 = v40;
LABEL_7:
    ((void (*)(unsigned char *, uint64_t))v47)(v48, v5);
    v46(v30, v49, v5);
    uint64_t v53 = v47;
    unsigned int v54 = v112;
    ((void (*)(unsigned char *, uint64_t))v47)(v30, v5);
LABEL_8:
    unsigned int v55 = v114;
    v46(v114, v49, v5);
    uint64_t v56 = v46;
LABEL_9:
    ((void (*)(unsigned char *, uint64_t))v53)(v55, v5);
    uint64_t v57 = v115;
    v56(v115, v49, v5);
LABEL_10:
    ((void (*)(unsigned char *, uint64_t))v53)(v57, v5);
    unsigned __int8 v58 = v123;
    v56(v123, v49, v5);
    uint64_t v59 = v56;
LABEL_11:
    char v60 = v53;
    ((void (*)(unsigned char *, uint64_t))v53)(v58, v5);
    v59(v54, v49, v5);
    uint64_t v61 = v49;
LABEL_12:
    uint64_t v62 = v113;
    ((void (*)(unsigned char *, uint64_t))v60)(v54, v5);
    char v63 = v116;
    v59(v116, v61, v5);
LABEL_13:
    ((void (*)(unsigned char *, uint64_t))v60)(v63, v5);
    v59(v62, v61, v5);
    uint64_t v64 = v61;
LABEL_14:
    ((void (*)(unsigned char *, uint64_t))v60)(v62, v5);
    uint64_t v65 = v118;
    v59(v118, v64, v5);
    ((void (*)(unsigned char *, uint64_t))v60)(v65, v5);
LABEL_15:
    uint64_t v66 = v119;
    v59(v119, v64, v5);
    uint64_t v67 = v64;
LABEL_16:
    ((void (*)(unsigned char *, uint64_t))v60)(v66, v5);
    uint64_t v68 = v120;
    v59(v120, v67, v5);
    uint64_t v69 = v59;
LABEL_17:
    ((void (*)(unsigned char *, uint64_t))v60)(v68, v5);
    uint64_t v70 = v121;
    v69(v121, v67, v5);
LABEL_18:
    ((void (*)(unsigned char *, uint64_t))v60)(v70, v5);
    uint64_t v71 = v122;
    v69(v122, v67, v5);
LABEL_19:
    ((void (*)(unsigned char *, uint64_t))v60)(v71, v5);
    return 1;
  }
  int v107 = v42;
  uint64_t v50 = swift_getKeyPath();
  MEMORY[0x270FA5388](v50);
  swift_getKeyPath();
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute();
  AttributedString.Runs.Run.subscript.getter();
  swift_release();
  float v51 = *(unsigned char **)(v45 + 8);
  uint64_t v109 = (v45 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  uint64_t v108 = v45 + 8;
  ((void (*)(unsigned char *, uint64_t))v51)(v35, v5);
  uint64_t v47 = v51;
  id v52 = v125;
  swift_release();
  uint64_t v48 = v117;
  v46(v117, v40, v5);
  if (v52)
  {
    uint64_t v49 = v40;
    goto LABEL_7;
  }
  uint64_t v73 = swift_getKeyPath();
  MEMORY[0x270FA5388](v73);
  swift_getKeyPath();
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute();
  AttributedString.Runs.Run.subscript.getter();
  swift_release();
  ((void (*)(unsigned char *, uint64_t))v47)(v48, v5);
  id v74 = v125;
  swift_release();
  v46(v30, v40, v5);
  if (v74)
  {
    uint64_t v53 = v47;
    uint64_t v49 = v40;
    unsigned int v54 = v112;
    ((void (*)(unsigned char *, uint64_t))v47)(v30, v5);
    goto LABEL_8;
  }
  uint64_t v75 = swift_getKeyPath();
  MEMORY[0x270FA5388](v75);
  swift_getKeyPath();
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute and conformance AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute();
  AttributedString.Runs.Run.subscript.getter();
  swift_release();
  ((void (*)(unsigned char *, uint64_t))v47)(v30, v5);
  uint64_t v76 = v126;
  outlined consume of Text.LineStyle?((uint64_t)v125, v126);
  unsigned int v55 = v114;
  v46(v114, v40, v5);
  uint64_t v53 = v47;
  uint64_t v56 = v46;
  if (v76 != 1)
  {
    uint64_t v49 = v40;
    unsigned int v54 = v112;
    goto LABEL_9;
  }
  uint64_t v77 = swift_getKeyPath();
  MEMORY[0x270FA5388](v77);
  swift_getKeyPath();
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute and conformance AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute();
  AttributedString.Runs.Run.subscript.getter();
  swift_release();
  ((void (*)(unsigned char *, uint64_t))v53)(v55, v5);
  uint64_t v78 = v126;
  outlined consume of Text.LineStyle?((uint64_t)v125, v126);
  uint64_t v57 = v115;
  v56(v115, v40, v5);
  unsigned __int8 v58 = v123;
  if (v78 != 1)
  {
    uint64_t v49 = v40;
    unsigned int v54 = v112;
    goto LABEL_10;
  }
  uint64_t v79 = swift_getKeyPath();
  MEMORY[0x270FA5388](v79);
  swift_getKeyPath();
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.EncapsulationAttribute and conformance AttributeScopes.SwiftUIAttributes.EncapsulationAttribute();
  AttributedString.Runs.Run.subscript.getter();
  uint64_t v49 = v134;
  swift_release();
  ((void (*)(unsigned char *, uint64_t))v53)(v57, v5);
  uint64_t v80 = v133;
  outlined consume of Text.Encapsulation?((uint64_t)v125, v126, v127, v128, v129, v130, v131, v132, v133);
  v56(v58, v49, v5);
  uint64_t v59 = v56;
  if (v80 != 1)
  {
    unsigned int v54 = v112;
    goto LABEL_11;
  }
  uint64_t v81 = swift_getKeyPath();
  char v60 = v53;
  uint64_t v61 = v49;
  MEMORY[0x270FA5388](v81);
  swift_getKeyPath();
  uint64_t v117 = v59;
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.KerningAttribute and conformance AttributeScopes.SwiftUIAttributes.KerningAttribute();
  AttributedString.Runs.Run.subscript.getter();
  uint64_t v59 = (void (*)(unsigned char *, uint64_t, uint64_t))v117;
  swift_release();
  ((void (*)(unsigned char *, uint64_t))v60)(v58, v5);
  char v82 = v126;
  unsigned int v54 = v112;
  v59(v112, v61, v5);
  if ((v82 & 1) == 0) {
    goto LABEL_12;
  }
  uint64_t v83 = swift_getKeyPath();
  MEMORY[0x270FA5388](v83);
  swift_getKeyPath();
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.TrackingAttribute and conformance AttributeScopes.SwiftUIAttributes.TrackingAttribute();
  AttributedString.Runs.Run.subscript.getter();
  swift_release();
  uint64_t v84 = v54;
  uint64_t v85 = v59;
  ((void (*)(unsigned char *, uint64_t))v60)(v84, v5);
  char v86 = v126;
  char v63 = v116;
  v85(v116, v61, v5);
  uint64_t v62 = v113;
  if ((v86 & 1) == 0)
  {
    uint64_t v59 = v85;
    goto LABEL_13;
  }
  uint64_t v87 = swift_getKeyPath();
  uint64_t v123 = v106;
  MEMORY[0x270FA5388](v87);
  swift_getKeyPath();
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute and conformance AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute();
  AttributedString.Runs.Run.subscript.getter();
  swift_release();
  ((void (*)(unsigned char *, uint64_t))v60)(v63, v5);
  char v88 = v126;
  v85(v62, v61, v5);
  if ((v88 & 1) == 0)
  {
    uint64_t v64 = v61;
    uint64_t v59 = v85;
    goto LABEL_14;
  }
  uint64_t v89 = swift_getKeyPath();
  MEMORY[0x270FA5388](v89);
  swift_getKeyPath();
  uint64_t v90 = v60;
  uint64_t v91 = v85;
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.TextScaleAttribute and conformance AttributeScopes.SwiftUIAttributes.TextScaleAttribute();
  AttributedString.Runs.Run.subscript.getter();
  uint64_t v64 = v134;
  swift_release();
  uint64_t v123 = v90;
  ((void (*)(unsigned char *, uint64_t))v90)(v62, v5);
  int v92 = v125;
  uint64_t v93 = v118;
  v91(v118, v64, v5);
  if (v92 != 2)
  {
    uint64_t v59 = v91;
    char v60 = v123;
    ((void (*)(unsigned char *, uint64_t))v123)(v93, v5);
    goto LABEL_15;
  }
  uint64_t v94 = swift_getKeyPath();
  uint64_t v67 = v64;
  MEMORY[0x270FA5388](v94);
  swift_getKeyPath();
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.SuperscriptAttribute and conformance AttributeScopes.SwiftUIAttributes.SuperscriptAttribute();
  AttributedString.Runs.Run.subscript.getter();
  uint64_t v59 = (void (*)(unsigned char *, uint64_t, uint64_t))v117;
  swift_release();
  char v60 = v123;
  ((void (*)(unsigned char *, uint64_t))v123)(v93, v5);
  char v95 = (char)v125;
  uint64_t v66 = v119;
  v59(v119, v67, v5);
  if ((v95 & 1) == 0) {
    goto LABEL_16;
  }
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.PrivateStrikethroughColorAttribute and conformance AttributeScopes.SwiftUIAttributes.PrivateStrikethroughColorAttribute();
  AttributedString.Runs.Run.subscript.getter();
  ((void (*)(unsigned char *, uint64_t))v60)(v66, v5);
  uint64_t v96 = v59;
  id v97 = v125;
  swift_release();
  uint64_t v68 = v120;
  v96(v120, v67, v5);
  if (v97)
  {
    uint64_t v67 = v134;
    uint64_t v69 = (void (*)(unsigned char *, uint64_t, uint64_t))v117;
    goto LABEL_17;
  }
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.PrivateUnderlineColorAttribute and conformance AttributeScopes.SwiftUIAttributes.PrivateUnderlineColorAttribute();
  AttributedString.Runs.Run.subscript.getter();
  ((void (*)(unsigned char *, uint64_t))v60)(v68, v5);
  id v98 = v125;
  swift_release();
  uint64_t v70 = v121;
  ((void (*)(unsigned char *, uint64_t, uint64_t))v117)(v121, v134, v5);
  if (v98)
  {
    uint64_t v67 = v134;
    uint64_t v69 = (void (*)(unsigned char *, uint64_t, uint64_t))v117;
    goto LABEL_18;
  }
  uint64_t v99 = swift_getKeyPath();
  MEMORY[0x270FA5388](v99);
  swift_getKeyPath();
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute and conformance AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute();
  AttributedString.Runs.Run.subscript.getter();
  swift_release();
  if (v126)
  {
    ((void (*)(unsigned char *, uint64_t))v60)(v121, v5);
    ((void (*)(unsigned char *, uint64_t, uint64_t))v117)(v122, v134, v5);
  }
  else
  {
    uint64_t v100 = v125 & 0x27;
    ((void (*)(unsigned char *, uint64_t))v60)(v121, v5);
    ((void (*)(unsigned char *, uint64_t, uint64_t))v117)(v122, v134, v5);
    if (v100)
    {
      uint64_t v71 = v122;
      goto LABEL_19;
    }
  }
  uint64_t v101 = swift_getKeyPath();
  MEMORY[0x270FA5388](v101);
  swift_getKeyPath();
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LinkAttribute and conformance AttributeScopes.FoundationAttributes.LinkAttribute();
  uint64_t v102 = (uint64_t)v111;
  int v103 = v122;
  AttributedString.Runs.Run.subscript.getter();
  swift_release();
  ((void (*)(unsigned char *, uint64_t))v60)(v103, v5);
  uint64_t v104 = type metadata accessor for URL();
  int v105 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v104 - 8) + 48))(v102, 1, v104);
  _s10Foundation3URLVSgWOhTm_0(v102, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x263F06EA8]);
  uint64_t result = v110;
  if (v105 != 1 || v107 != 1) {
    return 1;
  }
  return result;
}

uint64_t key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute>)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, void (*a5)(uint64_t))
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t AttributedString.nsAttributedString(in:)(uint64_t *a1)
{
  uint64_t v44 = 0;
  uint64_t v3 = type metadata accessor for Text.Style(0);
  uint64_t v42 = *(void *)(v3 - 8);
  uint64_t v4 = *(void *)(v42 + 64);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v43 = (uint64_t)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v38 - v6;
  uint64_t v8 = type metadata accessor for AttributedString();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *a1;
  uint64_t v13 = a1[1];
  type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableAttributedString);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v1, v8);
  uint64_t v14 = NSAttributedString.init(_:)();
  LOWORD(v57) = 0;
  long long v55 = 0u;
  long long v56 = 0u;
  *((void *)&v57 + 1) = MEMORY[0x263F8EE78];
  *(void *)&v58[0] = MEMORY[0x263F8EE78];
  *(_OWORD *)((char *)v58 + 8) = 0u;
  *(_OWORD *)((char *)&v58[1] + 8) = 0u;
  *((void *)&v58[2] + 1) = 0;
  long long v59 = xmmword_24619B530;
  uint64_t v61 = 0;
  long long v60 = MEMORY[0x263F8EE78];
  Text.Style.init()((uint64_t)v7);
  uint64_t v45 = v13;
  if (v13)
  {
    swift_retain_n();
    swift_retain_n();
    char v15 = specialized PropertyList.Tracker.value<A>(_:for:)(v12);
    swift_release();
    swift_release();
    swift_retain_n();
    swift_retain_n();
    char v16 = specialized PropertyList.Tracker.value<A>(_:for:)(v12);
    swift_release_n();
    uint64_t v41 = v13;
  }
  else
  {
    uint64_t v17 = swift_retain_n();
    uint64_t v18 = v44;
    char v15 = specialized closure #1 in PropertyList.subscript.getter(v17);
    swift_release_n();
    uint64_t v19 = swift_retain_n();
    char v16 = specialized closure #1 in PropertyList.subscript.getter(v19);
    uint64_t v44 = v18;
    swift_release();
    uint64_t v41 = 0;
  }
  swift_release_n();
  uint64_t v20 = v15 & 1;
  if (v16) {
    uint64_t v20 = v15 & 1 | 0x10;
  }
  uint64_t v39 = v20;
  id v40 = objc_msgSend(v14, sel_length);
  uint64_t v38 = v7;
  uint64_t v21 = v43;
  outlined init with copy of Text.Style((uint64_t)v7, v43, type metadata accessor for Text.Style);
  unint64_t v22 = (*(unsigned __int8 *)(v42 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80);
  uint64_t v23 = v14;
  unint64_t v24 = (v4 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v25 = (v24 + 39) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v26 = swift_allocObject();
  outlined init with take of Text.Style(v21, v26 + v22);
  *(void *)(v26 + v24) = v23;
  unint64_t v27 = v26 + ((v24 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v28 = v45;
  *(void *)unint64_t v27 = v12;
  *(void *)(v27 + 8) = v28;
  *(unsigned char *)(v27 + 16) = 0;
  *(void *)(v26 + v25) = v39;
  *(void *)(v26 + ((v25 + 15) & 0xFFFFFFFFFFFFFFF8)) = &v55;
  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 16) = partial apply for closure #1 in NSMutableAttributedString.convertToPlatformStyled(style:environment:includeDefaultAttributes:options:properties:);
  *(void *)(v29 + 24) = v26;
  *(void *)&long long v48 = _sSDySo21NSAttributedStringKeyaypGSo8_NSRangeVSpy10ObjectiveC8ObjCBoolVGIggyy_AceIIeggyy_TRTA_0;
  *((void *)&v48 + 1) = v29;
  *(void *)&long long v46 = MEMORY[0x263EF8330];
  *((void *)&v46 + 1) = 1107296256;
  *(void *)&long long v47 = thunk for @escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  *((void *)&v47 + 1) = &block_descriptor_16;
  uint64_t v30 = _Block_copy(&v46);
  swift_retain();
  swift_retain();
  id v31 = v23;
  swift_retain();
  swift_release();
  objc_msgSend(v31, sel_enumerateAttributesInRange_options_usingBlock_, 0, v40, 0, v30);
  _Block_release(v30);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
  }
  else
  {
    swift_retain();
    swift_retain_n();
    if (v45)
    {
      uint64_t v34 = swift_retain();
      char v35 = specialized PropertyList.Tracker.value<A>(_:for:)(v34);
    }
    else
    {
      uint64_t v36 = swift_retain_n();
      char v35 = specialized closure #1 in PropertyList.subscript.getter(v36);
    }
    swift_release_n();
    swift_release_n();
    uint64_t v37 = (uint64_t)v38;
    if ((v35 & 1) != 0 && (v57 & 4) == 0) {
      LOWORD(v57) = v57 | 4;
    }
    swift_release();
    _s7SwiftUI4TextV5StyleVWOhTm_0(v37, type metadata accessor for Text.Style);
    long long v52 = v59;
    long long v53 = v60;
    uint64_t v54 = v61;
    long long v48 = v57;
    long long v49 = v58[0];
    long long v50 = v58[1];
    long long v51 = v58[2];
    long long v46 = v55;
    long long v47 = v56;
    outlined release of Text.ResolvedProperties(&v46);
    return (uint64_t)v31;
  }
  return result;
}

uint64_t closure #1 in NSMutableAttributedString.convertToPlatformStyled(style:environment:includeDefaultAttributes:options:properties:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, uint64_t a10, uint64_t a11)
{
  int v50 = a9;
  uint64_t v48 = a10;
  uint64_t v49 = a11;
  uint64_t v18 = type metadata accessor for Text.Style(0);
  MEMORY[0x270FA5388](v18 - 8);
  uint64_t v20 = (char *)&v47 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v47 - v22;
  outlined init with copy of Text.Style(a5, (uint64_t)&v47 - v22, type metadata accessor for Text.Style);
  uint64_t v57 = a1;
  swift_bridgeObjectRetain();
  Dictionary<>.transferAttributedStringStyles(to:)((uint64_t)v23);
  id v52 = a6;
  uint64_t v53 = a2;
  uint64_t v51 = a3;
  id v24 = objc_msgSend(a6, sel_attributedSubstringFromRange_, a2, a3);
  id v25 = objc_msgSend(v24, sel_string);

  uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v28 = v27;

  outlined init with copy of Text.Style((uint64_t)v23, (uint64_t)v20, type metadata accessor for Text.Style);
  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 16) = v26;
  *(void *)(v29 + 24) = v28;
  uint64_t v55 = a7;
  uint64_t v56 = a8;
  uint64_t v54 = v48;
  swift_bridgeObjectRetain();
  uint64_t v30 = Text.Style.nsAttributes(content:environment:includeDefaultAttributes:with:properties:)((uint64_t)partial apply for implicit closure #2 in FormatStyleBox.format(in:idiom:), v29, &v55, v50, &v54, v49);
  swift_release();
  _s7SwiftUI4TextV5StyleVWOhTm_0((uint64_t)v20, type metadata accessor for Text.Style);
  uint64_t v31 = v57;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v55 = v31;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v30, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, (uint64_t)&v55);
  uint64_t v57 = v55;
  swift_bridgeObjectRelease();
  type metadata accessor for NSAttributedStringKey(0);
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes and conformance AttributeScopes.SwiftUIAttributes(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v34 = v52;
  uint64_t v35 = v51;
  objc_msgSend(v52, sel_setAttributes_range_, isa, v53, v51);

  uint64_t v55 = a7;
  uint64_t v56 = a8;
  uint64_t v36 = String.caseConvertedIfNeeded(_:)(&v55, v26, v28);
  uint64_t v38 = v37;
  swift_bridgeObjectRelease();
  if (!a8)
  {
    uint64_t v55 = a7;
    uint64_t v56 = 0;
    swift_retain();
    char v46 = specialized static ShouldRedactContentKey.value(in:)(&v55);
    swift_release();
    if ((v46 & 1) == 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  swift_retain_n();
  swift_retain_n();
  char v39 = specialized PropertyList.Tracker.derivedValue<A>(_:for:)(a7);
  swift_release_n();
  swift_release_n();
  if (v39)
  {
LABEL_3:
    uint64_t v40 = String.count.getter();
    uint64_t v36 = MEMORY[0x24C522AC0](3081666804, 0xA400000000000000, v40);
    uint64_t v42 = v41;
    swift_bridgeObjectRelease();
    uint64_t v38 = v42;
  }
LABEL_4:
  uint64_t v43 = v53;
  uint64_t v44 = (void *)MEMORY[0x24C522820](v36, v38);
  swift_bridgeObjectRelease();
  objc_msgSend(v34, sel_replaceCharactersInRange_withString_, v43, v35, v44);

  return _s7SwiftUI4TextV5StyleVWOhTm_0((uint64_t)v23, type metadata accessor for Text.Style);
}

uint64_t sub_245D92E38()
{
  uint64_t v1 = type metadata accessor for Text.Style(0);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v4 = v0 + v2;
  if (*(void *)(v0 + v2) >= 2uLL) {
    swift_release();
  }
  swift_bridgeObjectRelease();
  outlined consume of Text.Style.TextStyleColor(*(void *)(v4 + 16));
  swift_release();
  if ((unint64_t)(*(void *)(v4 + 88) - 1) >= 2) {
    swift_release();
  }
  if ((unint64_t)(*(void *)(v4 + 104) - 1) >= 2) {
    swift_release();
  }
  if (*(void *)(v4 + 176) != 1) {
    swift_release();
  }
  if (*(void *)(v4 + 248) != 1) {
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v4 + 288) >= 2uLL)
  {
    outlined consume of Text.Storage(*(void *)(v4 + 264), *(void *)(v4 + 272), *(unsigned char *)(v4 + 280));
    swift_bridgeObjectRelease();
  }

  swift_release();
  swift_release();
  uint64_t v5 = v4 + *(int *)(v1 + 84);
  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 2, v6))
  {
    uint64_t v7 = type metadata accessor for Locale.Language();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v5, v7);
  }
  swift_bridgeObjectRelease();
  uint64_t v8 = v4 + *(int *)(v1 + 92);
  uint64_t v9 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
  uint64_t v10 = *(void *)(v9 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  }
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t outlined init with take of Text.Style(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Text.Style(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in NSMutableAttributedString.convertToPlatformStyled(style:environment:includeDefaultAttributes:options:properties:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *(void *)(type metadata accessor for Text.Style(0) - 8);
  unint64_t v10 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v11 = (*(void *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  return closure #1 in NSMutableAttributedString.convertToPlatformStyled(style:environment:includeDefaultAttributes:options:properties:)(a1, a2, a3, a4, v4 + v10, *(void **)(v4 + v11), *(void *)(v4 + ((v11 + 15) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v4 + ((v11 + 15) & 0xFFFFFFFFFFFFFFF8) + 8), *(unsigned char *)(v4 + ((v11 + 15) & 0xFFFFFFFFFFFFFFF8) + 16), *(void *)(v4 + ((v11 + 39) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v4 + ((((v11 + 39) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_245D9324C()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type Text.Encapsulation and conformance Text.Encapsulation()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.Encapsulation and conformance Text.Encapsulation;
  if (!lazy protocol witness table cache variable for type Text.Encapsulation and conformance Text.Encapsulation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Encapsulation and conformance Text.Encapsulation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Encapsulation and conformance Text.Encapsulation;
  if (!lazy protocol witness table cache variable for type Text.Encapsulation and conformance Text.Encapsulation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Encapsulation and conformance Text.Encapsulation);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.KerningAttribute and conformance AttributeScopes.SwiftUIAttributes.KerningAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.KerningAttribute and conformance AttributeScopes.SwiftUIAttributes.KerningAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.KerningAttribute and conformance AttributeScopes.SwiftUIAttributes.KerningAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.KerningAttribute and conformance AttributeScopes.SwiftUIAttributes.KerningAttribute);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.TrackingAttribute and conformance AttributeScopes.SwiftUIAttributes.TrackingAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.TrackingAttribute and conformance AttributeScopes.SwiftUIAttributes.TrackingAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.TrackingAttribute and conformance AttributeScopes.SwiftUIAttributes.TrackingAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.TrackingAttribute and conformance AttributeScopes.SwiftUIAttributes.TrackingAttribute);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute and conformance AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute and conformance AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute and conformance AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute and conformance AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute);
  }
  return result;
}

uint64_t associated type witness table accessor for AttributedStringKey.Value : Hashable in AttributeScopes.SwiftUIAttributes.GlyphInfoAttribute()
{
  return lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes and conformance AttributeScopes.SwiftUIAttributes(&lazy protocol witness table cache variable for type CTGlyphInfoRef and conformance CTGlyphInfoRef, type metadata accessor for CTGlyphInfoRef);
}

unint64_t lazy protocol witness table accessor for type Text.Superscript and conformance Text.Superscript()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.Superscript and conformance Text.Superscript;
  if (!lazy protocol witness table cache variable for type Text.Superscript and conformance Text.Superscript)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Superscript and conformance Text.Superscript);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Superscript and conformance Text.Superscript;
  if (!lazy protocol witness table cache variable for type Text.Superscript and conformance Text.Superscript)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Superscript and conformance Text.Superscript);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Text.CustomAttributes and conformance Text.CustomAttributes()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.CustomAttributes and conformance Text.CustomAttributes;
  if (!lazy protocol witness table cache variable for type Text.CustomAttributes and conformance Text.CustomAttributes)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.CustomAttributes and conformance Text.CustomAttributes);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.CustomAttributes and conformance Text.CustomAttributes;
  if (!lazy protocol witness table cache variable for type Text.CustomAttributes and conformance Text.CustomAttributes)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.CustomAttributes and conformance Text.CustomAttributes);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [AnyFontModifier] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [AnyFontModifier] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [AnyFontModifier] and conformance <A> [A])
  {
    _sSay7SwiftUI15AnyFontModifierCGMaTm_0(255, &lazy cache variable for type metadata for [AnyFontModifier], (uint64_t (*)(uint64_t))type metadata accessor for AnyFontModifier, MEMORY[0x263F8D488]);
    lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes and conformance AttributeScopes.SwiftUIAttributes(&lazy protocol witness table cache variable for type AnyFontModifier and conformance AnyFontModifier, (void (*)(uint64_t))type metadata accessor for AnyFontModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [AnyFontModifier] and conformance <A> [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NSEmojiImageTextAttachment and conformance NSObject()
{
  unint64_t result = lazy protocol witness table cache variable for type NSEmojiImageTextAttachment and conformance NSObject;
  if (!lazy protocol witness table cache variable for type NSEmojiImageTextAttachment and conformance NSObject)
  {
    type metadata accessor for CAPresentationModifier(255, &lazy cache variable for type metadata for NSEmojiImageTextAttachment);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSEmojiImageTextAttachment and conformance NSObject);
  }
  return result;
}

uint64_t associated type witness table accessor for AttributedStringKey.Value : Hashable in AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute()
{
  return lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes and conformance AttributeScopes.SwiftUIAttributes(&lazy protocol witness table cache variable for type AttributedString.AdaptiveImageGlyph and conformance AttributedString.AdaptiveImageGlyph, MEMORY[0x263F03950]);
}

uint64_t ObjC metadata update function for AttributedStringTextStorage()
{
  return type metadata accessor for AttributedStringTextStorage(0);
}

uint64_t *initializeBufferWithCopyOfBuffer for AttributeScopes.SwiftUIAttributes(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v7 = *(int *)(a3 + 92);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for AttributeScopes.AccessibilityAttributes();
    (*(void (**)(unsigned char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    uint64_t v11 = *(int *)(a3 + 96);
    uint64_t v12 = (char *)v4 + v11;
    uint64_t v13 = (char *)a2 + v11;
    uint64_t v14 = type metadata accessor for AttributeScopes.FoundationAttributes();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  }
  return v4;
}

uint64_t destroy for AttributeScopes.SwiftUIAttributes(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 92);
  uint64_t v5 = type metadata accessor for AttributeScopes.AccessibilityAttributes();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 96);
  uint64_t v7 = type metadata accessor for AttributeScopes.FoundationAttributes();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);

  return v8(v6, v7);
}

unsigned char *initializeWithCopy for AttributeScopes.SwiftUIAttributes(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 92);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for AttributeScopes.AccessibilityAttributes();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 96);
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  uint64_t v13 = type metadata accessor for AttributeScopes.FoundationAttributes();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
  return a1;
}

unsigned char *assignWithCopy for AttributeScopes.SwiftUIAttributes(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 92);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for AttributeScopes.AccessibilityAttributes();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 96);
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  uint64_t v13 = type metadata accessor for AttributeScopes.FoundationAttributes();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

unsigned char *initializeWithTake for AttributeScopes.SwiftUIAttributes(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 92);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for AttributeScopes.AccessibilityAttributes();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 96);
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  uint64_t v13 = type metadata accessor for AttributeScopes.FoundationAttributes();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
  return a1;
}

unsigned char *assignWithTake for AttributeScopes.SwiftUIAttributes(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 92);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for AttributeScopes.AccessibilityAttributes();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 96);
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  uint64_t v13 = type metadata accessor for AttributeScopes.FoundationAttributes();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttributeScopes.SwiftUIAttributes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_245D93BDC);
}

uint64_t sub_245D93BDC(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *a1;
    if (v4 >= 2) {
      return v4 - 1;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = type metadata accessor for AttributeScopes.AccessibilityAttributes();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = &a1[*(int *)(a3 + 92)];
      uint64_t v12 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = type metadata accessor for AttributeScopes.FoundationAttributes();
      uint64_t v14 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      char v16 = &a1[*(int *)(a3 + 96)];
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for AttributeScopes.SwiftUIAttributes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_245D93D14);
}

unsigned char *sub_245D93D14(unsigned char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 254)
  {
    *unint64_t result = a2 + 1;
  }
  else
  {
    uint64_t v8 = type metadata accessor for AttributeScopes.AccessibilityAttributes();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = &v5[*(int *)(a4 + 92)];
      uint64_t v12 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return (unsigned char *)v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = type metadata accessor for AttributeScopes.FoundationAttributes();
      uint64_t v14 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      char v16 = &v5[*(int *)(a4 + 96)];
      return (unsigned char *)v14(v16, a2, a2, v15);
    }
  }
  return result;
}

uint64_t specialized AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x646574616D696E61 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x74616D696E616E75 && a2 == 0xEA00000000006465)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized AttributeScopes.SwiftUIAttributes.InterpolationStrategy.init(from:)(uint64_t a1)
{
  BOOL v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8E040];
  type metadata accessor for KeyedDecodingContainer<AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys, (uint64_t)&unk_26FA3EAF8, MEMORY[0x263F8E040]);
  uint64_t v27 = *(void *)(v3 - 8);
  uint64_t v28 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v31 = (char *)&v25 - v4;
  type metadata accessor for KeyedDecodingContainer<AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys, (uint64_t)&unk_26FA3EAD8, v2);
  uint64_t v6 = v5;
  uint64_t v30 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v25 - v7;
  type metadata accessor for KeyedDecodingContainer<AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys, (uint64_t)&unk_26FA3EA48, v2);
  uint64_t v10 = v9;
  uint64_t v29 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v25 - v11;
  __swift_project_boxed_opaque_existential_1((void *)a1, *(void *)(a1 + 24));
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys();
  uint64_t v13 = v32;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v13) {
    goto LABEL_7;
  }
  uint64_t v26 = v6;
  uint64_t v15 = v30;
  uint64_t v14 = v31;
  uint64_t v32 = a1;
  char v16 = v12;
  uint64_t v17 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v17 + 16) != 1)
  {
    uint64_t v20 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v22 = v21;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *uint64_t v22 = &type metadata for AttributeScopes.SwiftUIAttributes.InterpolationStrategy;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v20 - 8) + 104))(v22, *MEMORY[0x263F8DCB0], v20);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v12, v10);
    a1 = v32;
LABEL_7:
    __swift_destroy_boxed_opaque_existential_1(a1);
    return a1;
  }
  a1 = *(unsigned __int8 *)(v17 + 32);
  if (a1)
  {
    uint64_t v18 = *(unsigned __int8 *)(v17 + 32);
    char v34 = 1;
    lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v19 = v29;
    (*(void (**)(char *, uint64_t))(v27 + 8))(v14, v28);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v10);
    a1 = v18;
  }
  else
  {
    char v33 = 0;
    lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v23 = v29;
    (*(void (**)(char *, uint64_t))(v15 + 8))(v8, v26);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v16, v10);
  }
  __swift_destroy_boxed_opaque_existential_1(v32);
  return a1;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys and conformance AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys);
  }
  return result;
}

void type metadata accessor for KeyedDecodingContainer<AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

void sub_245D946C4()
{
}

uint64_t sub_245D946EC()
{
  return 8;
}

uint64_t sub_245D946F8()
{
  return swift_release();
}

uint64_t sub_245D94700(void *a1, void *a2)
{
  *a2 = *a1;
  return swift_retain();
}

uint64_t sub_245D9470C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute>, (void (*)(uint64_t))type metadata accessor for AttributeScopes.SwiftUIAttributes) & 1;
}

uint64_t sub_245D9474C(uint64_t a1, uint64_t a2)
{
  return keypath_hashTm(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute>, (void (*)(uint64_t))type metadata accessor for AttributeScopes.SwiftUIAttributes);
}

void *sub_245D94774(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute and conformance AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute and conformance AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute and conformance AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute and conformance AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute);
  }
  return result;
}

void sub_245D947D4()
{
}

uint64_t sub_245D947FC()
{
  return 8;
}

uint64_t sub_245D94808(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute>, (void (*)(uint64_t))type metadata accessor for AttributeScopes.SwiftUIAttributes) & 1;
}

uint64_t sub_245D94848(uint64_t a1, uint64_t a2)
{
  return keypath_hashTm(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute>, (void (*)(uint64_t))type metadata accessor for AttributeScopes.SwiftUIAttributes);
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute and conformance AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute and conformance AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute and conformance AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute and conformance AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute);
  }
  return result;
}

void sub_245D948C4()
{
}

uint64_t sub_245D948EC()
{
  return 8;
}

uint64_t sub_245D948F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.FontAttribute>, (void (*)(uint64_t))type metadata accessor for AttributeScopes.SwiftUIAttributes) & 1;
}

uint64_t sub_245D94938(uint64_t a1, uint64_t a2)
{
  return keypath_hashTm(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.FontAttribute>, (void (*)(uint64_t))type metadata accessor for AttributeScopes.SwiftUIAttributes);
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.FontAttribute and conformance AttributeScopes.SwiftUIAttributes.FontAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.FontAttribute and conformance AttributeScopes.SwiftUIAttributes.FontAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.FontAttribute and conformance AttributeScopes.SwiftUIAttributes.FontAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.FontAttribute and conformance AttributeScopes.SwiftUIAttributes.FontAttribute);
  }
  return result;
}

void sub_245D949B4()
{
}

uint64_t sub_245D949DC()
{
  return 8;
}

uint64_t sub_245D949E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute>, (void (*)(uint64_t))type metadata accessor for AttributeScopes.SwiftUIAttributes) & 1;
}

uint64_t sub_245D94A28(uint64_t a1, uint64_t a2)
{
  return keypath_hashTm(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute>, (void (*)(uint64_t))type metadata accessor for AttributeScopes.SwiftUIAttributes);
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute);
  }
  return result;
}

void sub_245D94AA4()
{
}

uint64_t sub_245D94ACC()
{
  return 8;
}

uint64_t sub_245D94AD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>, (void (*)(uint64_t))type metadata accessor for AttributeScopes.SwiftUIAttributes) & 1;
}

uint64_t sub_245D94B18(uint64_t a1, uint64_t a2)
{
  return keypath_hashTm(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>, (void (*)(uint64_t))type metadata accessor for AttributeScopes.SwiftUIAttributes);
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute);
  }
  return result;
}

void sub_245D94B94()
{
}

uint64_t sub_245D94BBC()
{
  return 8;
}

uint64_t sub_245D94BC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute>, (void (*)(uint64_t))type metadata accessor for AttributeScopes.SwiftUIAttributes) & 1;
}

uint64_t sub_245D94C08(uint64_t a1, uint64_t a2)
{
  return keypath_hashTm(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute>, (void (*)(uint64_t))type metadata accessor for AttributeScopes.SwiftUIAttributes);
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute and conformance AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute and conformance AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute and conformance AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute and conformance AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute);
  }
  return result;
}

void sub_245D94C84()
{
}

uint64_t sub_245D94CAC()
{
  return 8;
}

uint64_t sub_245D94CB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute>, (void (*)(uint64_t))type metadata accessor for AttributeScopes.SwiftUIAttributes) & 1;
}

uint64_t sub_245D94CF8(uint64_t a1, uint64_t a2)
{
  return keypath_hashTm(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute>, (void (*)(uint64_t))type metadata accessor for AttributeScopes.SwiftUIAttributes);
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute and conformance AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute and conformance AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute and conformance AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute and conformance AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute);
  }
  return result;
}

void sub_245D94D74()
{
}

uint64_t sub_245D94D9C()
{
  return 8;
}

uint64_t sub_245D94DA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.EncapsulationAttribute>, (void (*)(uint64_t))type metadata accessor for AttributeScopes.SwiftUIAttributes) & 1;
}

uint64_t sub_245D94DE8(uint64_t a1, uint64_t a2)
{
  return keypath_hashTm(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.EncapsulationAttribute>, (void (*)(uint64_t))type metadata accessor for AttributeScopes.SwiftUIAttributes);
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.EncapsulationAttribute and conformance AttributeScopes.SwiftUIAttributes.EncapsulationAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.EncapsulationAttribute and conformance AttributeScopes.SwiftUIAttributes.EncapsulationAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.EncapsulationAttribute and conformance AttributeScopes.SwiftUIAttributes.EncapsulationAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.EncapsulationAttribute and conformance AttributeScopes.SwiftUIAttributes.EncapsulationAttribute);
  }
  return result;
}

void sub_245D94E64()
{
}

uint64_t sub_245D94E8C()
{
  return 8;
}

uint64_t sub_245D94E98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.KerningAttribute>, (void (*)(uint64_t))type metadata accessor for AttributeScopes.SwiftUIAttributes) & 1;
}

uint64_t sub_245D94ED8(uint64_t a1, uint64_t a2)
{
  return keypath_hashTm(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.KerningAttribute>, (void (*)(uint64_t))type metadata accessor for AttributeScopes.SwiftUIAttributes);
}

void sub_245D94F00()
{
}

uint64_t sub_245D94F28()
{
  return 8;
}

uint64_t sub_245D94F34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.TrackingAttribute>, (void (*)(uint64_t))type metadata accessor for AttributeScopes.SwiftUIAttributes) & 1;
}

uint64_t sub_245D94F74(uint64_t a1, uint64_t a2)
{
  return keypath_hashTm(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.TrackingAttribute>, (void (*)(uint64_t))type metadata accessor for AttributeScopes.SwiftUIAttributes);
}

void sub_245D94F9C()
{
}

uint64_t sub_245D94FC4()
{
  return 8;
}

uint64_t sub_245D94FD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute>, (void (*)(uint64_t))type metadata accessor for AttributeScopes.SwiftUIAttributes) & 1;
}

uint64_t sub_245D95010(uint64_t a1, uint64_t a2)
{
  return keypath_hashTm(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute>, (void (*)(uint64_t))type metadata accessor for AttributeScopes.SwiftUIAttributes);
}

void sub_245D95038()
{
}

uint64_t sub_245D95060()
{
  return 8;
}

uint64_t sub_245D9506C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.TextScaleAttribute>, (void (*)(uint64_t))type metadata accessor for AttributeScopes.SwiftUIAttributes) & 1;
}

uint64_t sub_245D950AC(uint64_t a1, uint64_t a2)
{
  return keypath_hashTm(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.TextScaleAttribute>, (void (*)(uint64_t))type metadata accessor for AttributeScopes.SwiftUIAttributes);
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.TextScaleAttribute and conformance AttributeScopes.SwiftUIAttributes.TextScaleAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.TextScaleAttribute and conformance AttributeScopes.SwiftUIAttributes.TextScaleAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.TextScaleAttribute and conformance AttributeScopes.SwiftUIAttributes.TextScaleAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.TextScaleAttribute and conformance AttributeScopes.SwiftUIAttributes.TextScaleAttribute);
  }
  return result;
}

uint64_t sub_245D9512C()
{
  return 8;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.SuperscriptAttribute and conformance AttributeScopes.SwiftUIAttributes.SuperscriptAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.SuperscriptAttribute and conformance AttributeScopes.SwiftUIAttributes.SuperscriptAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.SuperscriptAttribute and conformance AttributeScopes.SwiftUIAttributes.SuperscriptAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.SuperscriptAttribute and conformance AttributeScopes.SwiftUIAttributes.SuperscriptAttribute);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.PrivateStrikethroughColorAttribute and conformance AttributeScopes.SwiftUIAttributes.PrivateStrikethroughColorAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.PrivateStrikethroughColorAttribute and conformance AttributeScopes.SwiftUIAttributes.PrivateStrikethroughColorAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.PrivateStrikethroughColorAttribute and conformance AttributeScopes.SwiftUIAttributes.PrivateStrikethroughColorAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.PrivateStrikethroughColorAttribute and conformance AttributeScopes.SwiftUIAttributes.PrivateStrikethroughColorAttribute);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.PrivateUnderlineColorAttribute and conformance AttributeScopes.SwiftUIAttributes.PrivateUnderlineColorAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.PrivateUnderlineColorAttribute and conformance AttributeScopes.SwiftUIAttributes.PrivateUnderlineColorAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.PrivateUnderlineColorAttribute and conformance AttributeScopes.SwiftUIAttributes.PrivateUnderlineColorAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.PrivateUnderlineColorAttribute and conformance AttributeScopes.SwiftUIAttributes.PrivateUnderlineColorAttribute);
  }
  return result;
}

void sub_245D9523C()
{
}

void sub_245D9525C()
{
}

uint64_t sub_245D95284()
{
  return 8;
}

uint64_t sub_245D95290(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.FoundationAttributes, AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute>, MEMORY[0x263F06670]) & 1;
}

uint64_t sub_245D952D0(uint64_t a1, uint64_t a2)
{
  return keypath_hashTm(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.FoundationAttributes, AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute>, MEMORY[0x263F06670]);
}

void sub_245D952F8()
{
}

void sub_245D95318()
{
}

uint64_t sub_245D95340()
{
  return 8;
}

uint64_t sub_245D9534C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.EmojiTextAttachmentAttribute>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.FoundationAttributes, AttributeScopes.FoundationAttributes.LinkAttribute>, MEMORY[0x263F06670]) & 1;
}

uint64_t sub_245D9538C(uint64_t a1, uint64_t a2)
{
  return keypath_hashTm(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.FoundationAttributes, AttributeScopes.FoundationAttributes.LinkAttribute>, MEMORY[0x263F06670]);
}

uint64_t keypath_hashTm(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  return dispatch thunk of Hashable.hashValue.getter();
}

void type metadata accessor for KeyPath<AttributeScopes.FoundationAttributes, AttributeScopes.FoundationAttributes.LinkAttribute>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for KeyPath();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_245D95468@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = type metadata accessor for AttributeScopes.SwiftUIAttributes(0);
  *a1 = result;
  return result;
}

uint64_t outlined consume of Text.Style.LineStyle(uint64_t a1, uint64_t a2)
{
  if ((unint64_t)(a2 - 1) >= 2) {
    return swift_release();
  }
  return result;
}

uint64_t sub_245D95554()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

ValueMetadata *type metadata accessor for AttributeScopes.SwiftUIAttributes.PrivateUnderlineColorAttribute()
{
  return &type metadata for AttributeScopes.SwiftUIAttributes.PrivateUnderlineColorAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.SwiftUIAttributes.PrivateStrikethroughColorAttribute()
{
  return &type metadata for AttributeScopes.SwiftUIAttributes.PrivateStrikethroughColorAttribute;
}

unsigned char *storeEnumTagSinglePayload for AttributeScopes.SwiftUIAttributes.InterpolationStrategy(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245D95678);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for AttributeScopes.SwiftUIAttributes.InterpolationStrategy.CodingKeys()
{
  return &unk_26FA3EA48;
}

void *type metadata accessor for AttributeScopes.SwiftUIAttributes.InterpolationStrategy.AnimatedCodingKeys()
{
  return &unk_26FA3EAD8;
}

void *type metadata accessor for AttributeScopes.SwiftUIAttributes.InterpolationStrategy.UnanimatedCodingKeys()
{
  return &unk_26FA3EAF8;
}

uint64_t protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.SwiftUIAttributes.TrackingAttribute()
{
  return protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute();
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.SwiftUIAttributes.TrackingAttribute()
{
  return protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute();
}

uint64_t DynamicContainerItem.needsTransitions.getter()
{
  return 0;
}

double DynamicContainerItem.zIndex.getter()
{
  return 0.0;
}

uint64_t static DynamicContainerItem.supportsReuse.getter()
{
  return 0;
}

uint64_t DynamicContainerItem.canBeReused(by:)()
{
  return 0;
}

uint64_t DynamicContainerItem.list.getter()
{
  return 0x100000000;
}

{
  return 0x100000000;
}

void DynamicContainerItem.viewID.getter(void *a1@<X8>)
{
}

{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t DynamicContainerID.uniqueId.getter()
{
  return *v0;
}

uint64_t DynamicContainerID.uniqueId.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*DynamicContainerID.uniqueId.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t DynamicContainerID.viewIndex.getter()
{
  return *(unsigned int *)(v0 + 4);
}

uint64_t DynamicContainerID.viewIndex.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 4) = result;
  return result;
}

uint64_t (*DynamicContainerID.viewIndex.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t DynamicContainerID.init(uniqueId:viewIndex:)@<X0>(uint64_t result@<X0>, int a2@<W1>, _DWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

BOOL static DynamicContainerID.< infix(_:_:)(_DWORD *a1, _DWORD *a2)
{
  if (*a1 < *a2) {
    return 1;
  }
  return *a1 == *a2 && a1[1] < a2[1];
}

void DynamicContainerID.hash(into:)()
{
  Swift::UInt32 v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

BOOL static DynamicContainerID.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2;
}

Swift::Int DynamicContainerID.hashValue.getter()
{
  Swift::UInt32 v1 = *v0;
  Swift::UInt32 v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance DynamicContainerID()
{
  Swift::UInt32 v1 = *v0;
  Swift::UInt32 v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance DynamicContainerID()
{
  Swift::UInt32 v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance DynamicContainerID()
{
  Hasher.init(_seed:)();
  Swift::UInt32 v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance DynamicContainerID(_DWORD *a1, _DWORD *a2)
{
  if (*a1 < *a2) {
    return 1;
  }
  return *a1 == *a2 && a1[1] < a2[1];
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance DynamicContainerID(_DWORD *a1, _DWORD *a2)
{
  if (*a2 < *a1) {
    return 0;
  }
  return *a2 != *a1 || a2[1] >= a1[1];
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance DynamicContainerID(_DWORD *a1, _DWORD *a2)
{
  if (*a1 < *a2) {
    return 0;
  }
  return *a1 != *a2 || a1[1] >= a2[1];
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance DynamicContainerID(_DWORD *a1, _DWORD *a2)
{
  if (*a2 < *a1) {
    return 1;
  }
  return *a2 == *a1 && a2[1] < a1[1];
}

uint64_t DynamicContainer.Info.items.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t DynamicContainer.Info.indexMap.getter()
{
  return swift_bridgeObjectRetain();
}

BOOL static DynamicContainer.Info.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 44) == *(_DWORD *)(a2 + 44);
}

uint64_t DynamicContainer.ItemInfo.uniqueId.getter()
{
  return *(unsigned int *)(v0 + 24);
}

uint64_t DynamicContainer.ItemInfo.phase.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 84);
}

uint64_t DynamicContainer.ItemInfo.for<A>(_:)()
{
  specialized CAHostingLayer.renderingRootView.getter();

  return swift_retain();
}

uint64_t DynamicContainer.ItemInfo.__allocating_init(subgraph:uniqueId:viewCount:phase:needsTransitions:outputs:)(uint64_t a1, int a2, int a3, char a4, char a5, uint64_t *a6)
{
  uint64_t v12 = swift_allocObject();
  uint64_t v13 = *a6;
  *(void *)(v12 + 64) = 0;
  *(void *)(v12 + 72) = 0;
  *(void *)(v12 + 56) = 0;
  *(_DWORD *)(v12 + 80) = 0;
  *(unsigned char *)(v12 + 84) = 3;
  *(void *)(v12 + 16) = a1;
  *(_DWORD *)(v12 + 24) = a2;
  *(_DWORD *)(v12 + 28) = a3;
  *(void *)(v12 + 32) = v13;
  *(void *)(v12 + 40) = a6[1];
  *(unsigned char *)(v12 + 48) = a5;
  swift_beginAccess();
  *(unsigned char *)(v12 + 84) = a4;
  return v12;
}

uint64_t DynamicContainer.ItemInfo.init(subgraph:uniqueId:viewCount:phase:needsTransitions:outputs:)(uint64_t a1, int a2, int a3, char a4, char a5, uint64_t *a6)
{
  uint64_t v8 = *a6;
  *(void *)(v6 + 64) = 0;
  *(void *)(v6 + 72) = 0;
  *(void *)(v6 + 56) = 0;
  *(_DWORD *)(v6 + 80) = 0;
  *(unsigned char *)(v6 + 84) = 3;
  *(void *)(v6 + 16) = a1;
  *(_DWORD *)(v6 + 24) = a2;
  *(_DWORD *)(v6 + 28) = a3;
  *(void *)(v6 + 32) = v8;
  *(void *)(v6 + 40) = a6[1];
  *(unsigned char *)(v6 + 48) = a5;
  swift_beginAccess();
  *(unsigned char *)(v6 + 84) = a4;
  return v6;
}

uint64_t DynamicContainer.ItemInfo.list.getter()
{
  return 0x100000000;
}

void DynamicContainer.ItemInfo.id.getter(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t DynamicContainer.ItemInfo.deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t DynamicContainer.ItemInfo.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t DynamicContainer._ItemInfo.item.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 208);
  swift_beginAccess();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(a1, v3, AssociatedTypeWitness);
}

uint64_t DynamicContainer._ItemInfo.itemLayout.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 216);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16);

  return v5(a1, v3, AssociatedTypeWitness);
}

uint64_t DynamicContainer._ItemInfo.__allocating_init(item:itemLayout:subgraph:uniqueId:viewCount:phase:needsTransitions:outputs:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, char a6, char a7, uint64_t *a8)
{
  uint64_t v16 = swift_allocObject();
  DynamicContainer._ItemInfo.init(item:itemLayout:subgraph:uniqueId:viewCount:phase:needsTransitions:outputs:)(a1, a2, a3, a4, a5, a6, a7, a8);
  return v16;
}

uint64_t DynamicContainer._ItemInfo.init(item:itemLayout:subgraph:uniqueId:viewCount:phase:needsTransitions:outputs:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, char a6, char a7, uint64_t *a8)
{
  uint64_t v13 = *a8;
  uint64_t v14 = v8 + *(void *)(*(void *)v8 + 208);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v16 = a8[1];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(v14, a1, AssociatedTypeWitness);
  uint64_t v17 = v8 + *(void *)(*(void *)v8 + 216);
  uint64_t v18 = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 32))(v17, a2, v18);
  *(void *)(v8 + 64) = 0;
  *(void *)(v8 + 72) = 0;
  *(void *)(v8 + 56) = 0;
  *(_DWORD *)(v8 + 80) = 0;
  *(unsigned char *)(v8 + 84) = 3;
  *(void *)(v8 + 16) = a3;
  *(_DWORD *)(v8 + 24) = a4;
  *(_DWORD *)(v8 + 28) = a5;
  *(void *)(v8 + 32) = v13;
  *(void *)(v8 + 40) = v16;
  *(unsigned char *)(v8 + 48) = a7;
  swift_beginAccess();
  *(unsigned char *)(v8 + 84) = a6;
  return v8;
}

uint64_t DynamicContainer._ItemInfo.list.getter()
{
  uint64_t v1 = *v0;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v5 = (char *)&v10 - v4;
  uint64_t v6 = (char *)v0 + *(void *)(v1 + 208);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, v6, AssociatedTypeWitness);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  unint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 56))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, AssociatedTypeWitness);
  return v8 | ((HIDWORD(v8) & 1) << 32);
}

uint64_t DynamicContainer._ItemInfo.id.getter()
{
  uint64_t v1 = *v0;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v5 = (char *)&v9 - v4;
  uint64_t v6 = (char *)v0 + *(void *)(v1 + 208);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, v6, AssociatedTypeWitness);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 64))(AssociatedTypeWitness, AssociatedConformanceWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, AssociatedTypeWitness);
}

void DynamicContainer._ItemInfo.__allocating_init(subgraph:uniqueId:viewCount:phase:needsTransitions:outputs:)()
{
}

void DynamicContainer._ItemInfo.init(subgraph:uniqueId:viewCount:phase:needsTransitions:outputs:)()
{
}

uint64_t DynamicContainer._ItemInfo.__ivar_destroyer()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 208);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(v1, AssociatedTypeWitness);
  uint64_t v3 = v0 + *(void *)(*(void *)v0 + 216);
  uint64_t v4 = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);

  return v5(v3, v4);
}

uint64_t static DynamicContainer.makeContainer<A>(adaptor:inputs:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = a4;
  uint64_t v83 = *MEMORY[0x263EF8340];
  uint64_t v10 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v54 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DynamicContainerInfo();
  uint64_t v57 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v56 = (char *)&v47 - v13;
  uint64_t v55 = *(void *)a3;
  int v53 = *(_DWORD *)(a3 + 8);
  uint64_t v59 = *(void *)(a3 + 16);
  uint64_t v14 = *(void *)(a3 + 24);
  uint64_t v15 = *(void *)(a3 + 32);
  uint64_t v16 = *(void *)(a3 + 48);
  uint64_t v60 = *(void *)(a3 + 40);
  uint64_t v17 = *(void *)(a3 + 56);
  uint64_t v18 = *(void *)(a3 + 64);
  uint64_t v19 = *(void *)(a3 + 72);
  int v52 = *(_DWORD *)(a3 + 80);
  uint64_t v64 = MEMORY[0x263F8EE78];
  LODWORD(v13) = *MEMORY[0x263F288F8];
  LODWORD(v65) = 0;
  LODWORD(v61) = v13;
  HIDWORD(v65) = v13;
  unint64_t v20 = *(void *)(v16 + 16);
  unsigned __int8 v58 = a1;
  if (v20)
  {
    uint64_t v47 = v10;
    uint64_t v48 = a2;
    uint64_t v49 = v12;
    uint64_t v50 = v6;
    uint64_t v51 = a5;
    uint64_t v21 = swift_bridgeObjectRetain();
    unint64_t v22 = 0;
    uint64_t v23 = (uint64_t *)(v16 + 40);
    do
    {
      if (v22 >= v20) {
        __break(1u);
      }
      uint64_t v62 = &v47;
      ++v22;
      id v24 = (ValueMetadata *)*(v23 - 1);
      uint64_t v25 = *v23;
      LODWORD(v72) = v61;
      MEMORY[0x270FA5388](v21);
      v44[0] = swift_getAssociatedTypeWitness();
      uint64_t v26 = type metadata accessor for DynamicPreferenceCombiner();
      v44[1] = v26;
      uint64_t WitnessTable = swift_getWitnessTable();
      uint64_t v27 = type metadata accessor for Attribute();
      _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v72, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)(&v47 - 6), v26, MEMORY[0x263F8E628], v27, MEMORY[0x263F8E658], v28);
      unint64_t v29 = v66;
      swift_beginAccess();
      LOBYTE(v66) = 0;
      _ViewOutputs.subscript.setter(v29, v24, (uint64_t)v24, v25);
      uint64_t v21 = swift_endAccess();
      unint64_t v20 = *(void *)(v16 + 16);
      v23 += 2;
    }
    while (v22 != v20);
    swift_bridgeObjectRelease();
    a5 = v51;
    uint64_t v6 = v50;
    uint64_t v12 = v49;
    a2 = v48;
    uint64_t v10 = v47;
  }
  type metadata accessor for External<()>(0, (unint64_t *)&lazy cache variable for type metadata for External<()>, MEMORY[0x263F8EE60] + 8, MEMORY[0x263F288C8]);
  lazy protocol witness table accessor for type External<()> and conformance External<A>();
  int v30 = Attribute.init<A>(body:value:flags:update:)();
  LODWORD(v62) = v30;
  uint64_t v31 = (uint64_t)v54;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v54, a2, v6);
  uint64_t v72 = v55;
  int v73 = v53;
  uint64_t v74 = v59;
  uint64_t v75 = v14;
  uint64_t v76 = v15;
  uint64_t v77 = v60;
  uint64_t v78 = v16;
  uint64_t v79 = v17;
  uint64_t v80 = v18;
  uint64_t v81 = v19;
  int v82 = v52;
  swift_beginAccess();
  v63[0] = v64;
  v63[1] = v65;
  long long v66 = MEMORY[0x263F8EE78];
  uint64_t v69 = 0;
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  char v70 = 1;
  int v71 = 0;
  uint64_t WitnessTable = a5;
  uint64_t v32 = v56;
  id v33 = DynamicContainerInfo.init(asyncSignal:adaptor:inputs:outputs:info:lastUniqueId:lastRemoved:lastResetSeed:needsPhaseUpdate:)(v30, v31, &v72, v63, &v66, 0, 0, -1, v56, 0, v6);
  uint64_t v61 = &v47;
  MEMORY[0x270FA5388](v33);
  uint64_t WitnessTable = v12;
  uint64_t v46 = swift_getWitnessTable();
  type metadata accessor for External<()>(0, &lazy cache variable for type metadata for Attribute<DynamicContainer.Info>, (uint64_t)&type metadata for DynamicContainer.Info, MEMORY[0x263F28898]);
  uint64_t v35 = v34;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v32, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_3, (uint64_t)v44, v12, MEMORY[0x263F8E628], v35, MEMORY[0x263F8E658], v36);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v32, v12);
  uint64_t v37 = v72;
  AGGraphAddInput();
  AGGraphSetFlags();
  uint64_t v38 = v64;
  uint64_t v39 = v65;
  uint64_t v40 = *(void *)(v64 + 16);
  if (v40)
  {
    swift_bridgeObjectRetain();
    uint64_t v41 = v38 + 48;
    do
    {
      v41 += 24;
      closure #1 in static DynamicContainer.makeContainer<A>(adaptor:inputs:)();
      --v40;
    }
    while (v40);
    swift_bridgeObjectRelease();
  }
  uint64_t v42 = v58;
  uint64_t *v58 = v38;
  v42[1] = v39;
  return v37;
}

id DynamicContainerInfo.init(asyncSignal:adaptor:inputs:outputs:info:lastUniqueId:lastRemoved:lastResetSeed:needsPhaseUpdate:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, long long *a5@<X4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, char *a9@<X8>, char a10, uint64_t a11)
{
  uint64_t v15 = *a3;
  int v16 = *((_DWORD *)a3 + 2);
  uint64_t v17 = a3[2];
  int v18 = *((_DWORD *)a3 + 20);
  uint64_t v33 = *a4;
  long long v29 = *a5;
  uint64_t v27 = *((void *)a5 + 3);
  uint64_t v28 = *((void *)a5 + 2);
  uint64_t v26 = *((void *)a5 + 4);
  int v24 = *((_DWORD *)a5 + 11);
  char v25 = *((unsigned char *)a5 + 40);
  *(_DWORD *)a9 = a1;
  uint64_t v19 = (int *)type metadata accessor for DynamicContainerInfo();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a11 - 8) + 32))(&a9[v19[9]], a2, a11);
  unint64_t v20 = &a9[v19[10]];
  *(void *)unint64_t v20 = v15;
  *((_DWORD *)v20 + 2) = v16;
  *((void *)v20 + 2) = v17;
  *(_OWORD *)(v20 + 24) = *(_OWORD *)(a3 + 3);
  *(_OWORD *)(v20 + 40) = *(_OWORD *)(a3 + 5);
  *(_OWORD *)(v20 + 56) = *(_OWORD *)(a3 + 7);
  *((void *)v20 + 9) = a3[9];
  *((_DWORD *)v20 + 20) = v18;
  uint64_t v21 = &a9[v19[11]];
  *(void *)uint64_t v21 = v33;
  *((void *)v21 + 1) = a4[1];
  id result = (id)AGSubgraphGetCurrent();
  if (result)
  {
    *(void *)&a9[v19[12]] = result;
    uint64_t v23 = &a9[v19[13]];
    *(_OWORD *)uint64_t v23 = v29;
    *((void *)v23 + 2) = v28;
    *((void *)v23 + 3) = v27;
    *((void *)v23 + 4) = v26;
    v23[40] = v25;
    *((_DWORD *)v23 + 11) = v24;
    *(_DWORD *)&a9[v19[14]] = a6;
    *(_DWORD *)&a9[v19[15]] = a7;
    *(_DWORD *)&a9[v19[16]] = a8;
    a9[v19[17]] = a10 & 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in static DynamicContainer.makeContainer<A>(adaptor:inputs:)()
{
  return AGGraphMutateAttribute();
}

Swift::Void __swiftcall DynamicContainerInfo.updateValue()()
{
  uint64_t v6 = v0;
  uint64_t v115 = *MEMORY[0x263EF8340];
  uint64_t v7 = v1 + v0[10];
  int v8 = *(_DWORD *)AGGraphGetValue() >> 1;
  uint64_t v9 = v6[16];
  BOOL v10 = v8 == *(_DWORD *)(v1 + v9);
  uint64_t v105 = v1;
  int v106 = v6;
  if (!v10)
  {
    *(_DWORD *)(v1 + v9) = v8;
    uint64_t v11 = 1;
    if (*(unsigned char *)(v1 + v6[17])) {
      goto LABEL_6;
    }
LABEL_4:
    unint64_t v5 = 0;
    goto LABEL_28;
  }
  uint64_t v11 = *(_DWORD *)(v7 + 36) & 1;
  *(_DWORD *)(v1 + v9) = v8;
  if (*(unsigned char *)(v1 + v6[17]) != 1) {
    goto LABEL_4;
  }
LABEL_6:
  uint64_t v1 = *(void *)(v1 + v6[13]);
  if ((unint64_t)v1 >> 62) {
    goto LABEL_232;
  }
  uint64_t isUniquelyReferenced_nonNull_native = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_8:
  unint64_t v5 = 0;
  if (!isUniquelyReferenced_nonNull_native)
  {
LABEL_27:
    uint64_t v6 = v106;
    uint64_t v1 = v105;
    *(unsigned char *)(v105 + v106[17]) = 0;
LABEL_28:
    unint64_t v4 = DynamicContainerInfo.updateItems(disableTransitions:)(v11, (uint64_t)v6);
    if ((v4 & 1) == 0)
    {
      uint64_t v7 = v106[13];
      unint64_t v16 = *(void *)(v1 + v7);
      if (!(v16 >> 62))
      {
        unint64_t v13 = v16 & 0xFFFFFFFFFFFFFF8;
        uint64_t isUniquelyReferenced_nonNull_native = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
        goto LABEL_31;
      }
      goto LABEL_234;
    }
    goto LABEL_45;
  }
  Swift::Int v3 = 0;
  uint64_t v7 = v1 & 0xC000000000000001;
  unint64_t v4 = v1 + 32;
  uint64_t v107 = isUniquelyReferenced_nonNull_native - 1;
LABEL_10:
  unint64_t v13 = (unint64_t)&v116;
  unint64_t v108 = v5;
  if (v3 <= isUniquelyReferenced_nonNull_native) {
    unint64_t v5 = isUniquelyReferenced_nonNull_native;
  }
  else {
    unint64_t v5 = v3;
  }
  uint64_t v2 = v3;
  while (1)
  {
    if (v5 == v2) {
      goto LABEL_214;
    }
    if (v7)
    {
      uint64_t v14 = MEMORY[0x24C523D60](v2, v1);
      goto LABEL_19;
    }
    unint64_t v13 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v2 >= v13) {
      break;
    }
    uint64_t v14 = *(void *)(v4 + 8 * v2);
    swift_retain();
LABEL_19:
    swift_beginAccess();
    Swift::Int v3 = *(unsigned __int8 *)(v14 + 84);
    swift_release();
    if (!v3)
    {
      if (v7)
      {
        uint64_t v15 = MEMORY[0x24C523D60](v2, v1);
      }
      else
      {
        if ((unint64_t)v2 >= *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_248;
        }
        uint64_t v15 = *(void *)(v4 + 8 * v2);
        swift_retain();
      }
      Swift::Int v3 = v2 + 1;
      unint64_t v5 = 1;
      swift_beginAccess();
      *(unsigned char *)(v15 + 84) = 1;
      swift_release();
      if (v107 == v2) {
        goto LABEL_27;
      }
      goto LABEL_10;
    }
    if (isUniquelyReferenced_nonNull_native == ++v2)
    {
      unint64_t v5 = v108;
      goto LABEL_27;
    }
  }
  while (2)
  {
    __break(1u);
LABEL_221:
    __break(1u);
    while (2)
    {
      __break(1u);
LABEL_223:
      __break(1u);
LABEL_224:
      __break(1u);
LABEL_225:
      if (isUniquelyReferenced_nonNull_native < 0) {
        uint64_t v1 = isUniquelyReferenced_nonNull_native;
      }
      else {
        uint64_t v1 = v13;
      }
      swift_bridgeObjectRetain();
      uint64_t v90 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v91 = *(void *)(v4 + 24);
      uint64_t v92 = *(void *)(v4 + 32);
      uint64_t v101 = v90;
      uint64_t v100 = v92;
      uint64_t v11 = v90 - v92;
      uint64_t v104 = v91;
      uint64_t v21 = v90 - v92 - v91;
      if (v11 - v91 < v11)
      {
        swift_bridgeObjectRetain();
        uint64_t v1 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v1 >= v21)
        {
LABEL_48:
          if (v21 < 0) {
            goto LABEL_236;
          }
          if (v7)
          {
            swift_bridgeObjectRetain();
            uint64_t v1 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v1 = *(void *)((isUniquelyReferenced_nonNull_native & 0xFFFFFFFFFFFFFF8) + 0x10);
          }
          if (v1 < v11) {
            goto LABEL_237;
          }
          if (v11 < 0) {
            goto LABEL_238;
          }
          if ((isUniquelyReferenced_nonNull_native & 0xC000000000000001) != 0 && v104)
          {
            type metadata accessor for DynamicContainer.ItemInfo();
            Swift::Int v23 = v21;
            do
            {
              Swift::Int v24 = v23 + 1;
              _ArrayBuffer._typeCheckSlowPath(_:)(v23);
              Swift::Int v23 = v24;
            }
            while (v11 != v24);
          }
          unint64_t v108 = v11;
          uint64_t v103 = v21;
          if (v7)
          {
            swift_bridgeObjectRetain();
            Swift::Int v3 = _CocoaArrayWrapper.subscript.getter();
            uint64_t v25 = v26;
            uint64_t v21 = v27;
            unint64_t v4 = v28;
            swift_bridgeObjectRelease();
          }
          else
          {
            Swift::Int v3 = isUniquelyReferenced_nonNull_native & 0xFFFFFFFFFFFFFF8;
            uint64_t v25 = (isUniquelyReferenced_nonNull_native & 0xFFFFFFFFFFFFFF8) + 32;
            unint64_t v4 = (2 * v11) | 1;
            swift_bridgeObjectRetain();
          }
          unint64_t v13 = v4 >> 1;
          if (v21 == v4 >> 1) {
            goto LABEL_94;
          }
          uint64_t v7 = v21 + 1;
          if (__OFADD__(v21, 1)) {
            goto LABEL_247;
          }
          if (v7 == v13)
          {
LABEL_94:
            uint64_t v41 = v25;
            uint64_t v42 = v21;
            unint64_t v43 = v4;
            uint64_t v21 = v103;
            uint64_t v11 = v108;
            unint64_t v4 = v107;
            uint64_t v1 = v107;
            specialized Array.subscript.setter(v3, v41, v42, v43, v103, v108);
            goto LABEL_95;
          }
          while (v7 >= v21)
          {
            unint64_t v13 = v4 >> 1;
            if (v7 >= (uint64_t)(v4 >> 1)) {
              break;
            }
            uint64_t isUniquelyReferenced_nonNull_native = *(void *)(v25 + 8 * v7);
            swift_retain();
            unint64_t v13 = (unint64_t)&v114;
            uint64_t v102 = v7;
            while (1)
            {
              uint64_t v2 = v7 - 1;
              if (__OFSUB__(v7, 1)) {
                goto LABEL_202;
              }
              if (v2 < v21) {
                goto LABEL_203;
              }
              int64_t v29 = v4 >> 1;
              if (v2 >= (uint64_t)(v4 >> 1)) {
                goto LABEL_203;
              }
              uint64_t v30 = *(void *)(v25 + 8 * v2);
              if (*(_DWORD *)(isUniquelyReferenced_nonNull_native + 72) >= *(_DWORD *)(v30 + 72)) {
                break;
              }
              swift_retain_n();
              if ((v4 & 1) == 0 || (swift_isUniquelyReferenced_nonNull() & 1) == 0)
              {
                specialized _ArrayBufferProtocol.init(copying:)(v25, v21, v4);
                unint64_t v5 = v31;
                uint64_t v25 = v32;
                uint64_t v21 = v33;
                unint64_t v4 = v34;
                swift_unknownObjectRelease();
                int64_t v29 = v4 >> 1;
                Swift::Int v3 = v5;
              }
              if (v7 < v21 || v7 >= v29) {
                goto LABEL_204;
              }
              unint64_t v5 = *(void *)(v25 + 8 * v7);
              *(void *)(v25 + 8 * v7) = v30;
              swift_release();
              swift_release();
              --v7;
              uint64_t v35 = v2;
              if (v2 == v21) {
                goto LABEL_83;
              }
            }
            uint64_t v2 = v7;
            uint64_t v35 = v21;
LABEL_83:
            uint64_t v7 = v102;
            if (v2 == v102)
            {
              swift_release();
              uint64_t v21 = v35;
            }
            else
            {
              swift_retain();
              if (v4 & 1) != 0 && (swift_isUniquelyReferenced_nonNull())
              {
                uint64_t v21 = v35;
              }
              else
              {
                specialized _ArrayBufferProtocol.init(copying:)(v25, v35, v4);
                Swift::Int v37 = v36;
                uint64_t v25 = v38;
                uint64_t v21 = v39;
                unint64_t v4 = v40;
                swift_unknownObjectRelease();
                Swift::Int v3 = v37;
              }
              if (v2 < v21) {
                goto LABEL_224;
              }
              unint64_t v13 = v4 >> 1;
              if (v2 >= (uint64_t)(v4 >> 1)) {
                goto LABEL_224;
              }
              *(void *)(v25 + 8 * v2) = isUniquelyReferenced_nonNull_native;
              swift_release();
              swift_release();
            }
            if (__OFADD__(v7, 1)) {
              goto LABEL_223;
            }
            if (++v7 == v4 >> 1) {
              goto LABEL_94;
            }
          }
          continue;
        }
        goto LABEL_230;
      }
      break;
    }
    while (1)
    {
LABEL_95:
      if (*(void *)(*(void *)(v4 + 8) + 16))
      {
        uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)&long long v109 = *(void *)(v4 + 8);
        *(void *)(v4 + 8) = 0x8000000000000000;
        type metadata accessor for _NativeDictionary<UInt32, Int>();
        uint64_t v1 = (uint64_t)&v109;
        _NativeDictionary.removeAll(isUnique:)(isUniquelyReferenced_nonNull_native);
        *(void *)(v4 + 8) = v109;
        swift_bridgeObjectRelease();
      }
      *(unsigned char *)(v4 + 40) = 1;
      if ((v11 & 0x8000000000000000) == 0) {
        break;
      }
      while (2)
      {
        __break(1u);
LABEL_232:
        swift_bridgeObjectRetain();
        uint64_t isUniquelyReferenced_nonNull_native = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if ((isUniquelyReferenced_nonNull_native & 0x8000000000000000) == 0) {
          goto LABEL_8;
        }
        __break(1u);
LABEL_234:
        swift_bridgeObjectRetain();
        uint64_t isUniquelyReferenced_nonNull_native = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (isUniquelyReferenced_nonNull_native < 0)
        {
          __break(1u);
LABEL_236:
          __break(1u);
LABEL_237:
          __break(1u);
LABEL_238:
          __break(1u);
LABEL_239:
          __break(1u);
LABEL_240:
          swift_bridgeObjectRetain();
          uint64_t v93 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (!v93) {
            goto LABEL_53;
          }
          goto LABEL_171;
        }
LABEL_31:
        if (isUniquelyReferenced_nonNull_native)
        {
          uint64_t v2 = isUniquelyReferenced_nonNull_native;
          do
          {
            while (1)
            {
              if (isUniquelyReferenced_nonNull_native < v2)
              {
                __break(1u);
LABEL_201:
                __break(1u);
LABEL_202:
                __break(1u);
LABEL_203:
                __break(1u);
LABEL_204:
                __break(1u);
LABEL_205:
                __break(1u);
LABEL_206:
                __break(1u);
LABEL_207:
                __break(1u);
LABEL_208:
                __break(1u);
LABEL_209:
                __break(1u);
LABEL_210:
                __break(1u);
                goto LABEL_211;
              }
              uint64_t v17 = v2 - 1;
              uint64_t v18 = *(void *)(v1 + v7);
              if ((v18 & 0xC000000000000001) != 0)
              {
                uint64_t v19 = MEMORY[0x24C523D60](v2 - 1);
              }
              else
              {
                unint64_t v13 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
                if (v17 >= (uint64_t)v13) {
                  goto LABEL_201;
                }
                uint64_t v19 = *(void *)(v18 + 8 * v2 + 24);
                swift_retain();
              }
              swift_beginAccess();
              Swift::Int v3 = *(unsigned __int8 *)(v19 + 84);
              swift_release();
              if (v3 != 3)
              {
                if (v3 != 2) {
                  goto LABEL_44;
                }
                if (DynamicContainerInfo.tryRemovingItem(at:disableTransitions:)(v2 - 1, v11)) {
                  break;
                }
              }
              --v2;
              if (!v17) {
                goto LABEL_44;
              }
            }
            unint64_t v5 = 1;
            --v2;
          }
          while (v2);
        }
        else
        {
LABEL_44:
          if ((v5 & 1) == 0)
          {
            unint64_t v22 = *(void *)(v1 + v7);
            if (v22 >> 62) {
              goto LABEL_240;
            }
            if (!*(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10))
            {
LABEL_53:
              if (AGGraphGetOutputValue()) {
                return;
              }
            }
LABEL_171:
            uint64_t v79 = v1 + v106[13];
            int v80 = *(_DWORD *)(v79 + 44) + 1;
            *(_DWORD *)(v79 + 44) = v80;
            uint64_t v81 = *(void *)(v79 + 32);
            char v82 = *(unsigned char *)(v79 + 40);
            long long v83 = *(_OWORD *)(v79 + 16);
            long long v109 = *(_OWORD *)v79;
            long long v110 = v83;
            uint64_t v111 = v81;
            char v112 = v82;
            int v113 = v80;
            AGGraphSetOutputValue();
            return;
          }
        }
LABEL_45:
        int v99 = v4;
        unint64_t v4 = v1 + v106[13];
        uint64_t isUniquelyReferenced_nonNull_native = *(void *)v4;
        uint64_t v7 = *(void *)v4 >> 62;
        uint64_t v107 = v4;
        unint64_t v13 = isUniquelyReferenced_nonNull_native & 0xFFFFFFFFFFFFFF8;
        if (v7) {
          goto LABEL_225;
        }
        uint64_t v1 = *(void *)((isUniquelyReferenced_nonNull_native & 0xFFFFFFFFFFFFFF8) + 0x10);
        uint64_t v20 = *(void *)(v4 + 24);
        uint64_t v100 = *(void *)(v4 + 32);
        uint64_t v11 = v1 - v100;
        uint64_t v104 = v20;
        uint64_t v21 = v1 - v100 - v20;
        uint64_t v101 = v1;
        if (v21 < v1 - v100)
        {
          if (v1 >= v21) {
            goto LABEL_48;
          }
LABEL_230:
          __break(1u);
          continue;
        }
        break;
      }
    }
    uint64_t v103 = v21;
    unint64_t v108 = v11;
    unint64_t v13 = v101;
    if (v101 != v100)
    {
      uint64_t v2 = 0;
      unint64_t v45 = 0;
      Swift::Int v3 = 0x8000000000000000;
      do
      {
        if ((*(void *)v4 & 0xC000000000000001) != 0)
        {
          uint64_t v47 = MEMORY[0x24C523D60](v45);
        }
        else
        {
          if ((v45 & 0x8000000000000000) != 0) {
            goto LABEL_205;
          }
          unint64_t v13 = *(void *)((*(void *)v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (v45 >= v13) {
            goto LABEL_207;
          }
          uint64_t v47 = swift_retain();
        }
        uint64_t isUniquelyReferenced_nonNull_native = *(unsigned int *)(v47 + 24);
        swift_release();
        unint64_t v5 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)&long long v109 = *(void *)(v4 + 8);
        uint64_t v48 = v109;
        *(void *)(v4 + 8) = 0x8000000000000000;
        unint64_t v50 = specialized __RawDictionaryStorage.find<A>(_:)(isUniquelyReferenced_nonNull_native);
        unint64_t v13 = *(void *)(v48 + 16);
        BOOL v51 = (v49 & 1) == 0;
        uint64_t v52 = v13 + v51;
        if (__OFADD__(v13, v51)) {
          goto LABEL_206;
        }
        unint64_t v4 = v49;
        if (*(void *)(v48 + 24) >= v52)
        {
          if (v5)
          {
            unint64_t v13 = v109;
            if (v49) {
              goto LABEL_118;
            }
          }
          else
          {
            specialized _NativeDictionary.copy()();
            unint64_t v13 = v109;
            if (v4) {
              goto LABEL_118;
            }
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v52, v5);
          unint64_t v53 = specialized __RawDictionaryStorage.find<A>(_:)(isUniquelyReferenced_nonNull_native);
          if ((v4 & 1) != (v54 & 1)) {
            goto LABEL_249;
          }
          unint64_t v50 = v53;
          unint64_t v13 = v109;
          if (v4)
          {
LABEL_118:
            *(void *)(*(void *)(v13 + 56) + 8 * v50) = v45;
            goto LABEL_119;
          }
        }
        *(void *)(v13 + 8 * (v50 >> 6) + 64) |= 1 << v50;
        *(_DWORD *)(*(void *)(v13 + 48) + 4 * v50) = isUniquelyReferenced_nonNull_native;
        *(void *)(*(void *)(v13 + 56) + 8 * v50) = v45;
        uint64_t v55 = *(void *)(v13 + 16);
        BOOL v56 = __OFADD__(v55, 1);
        uint64_t v57 = v55 + 1;
        if (v56) {
          goto LABEL_215;
        }
        *(void *)(v13 + 16) = v57;
LABEL_119:
        unint64_t v4 = v107;
        *(void *)(v107 + 8) = v13;
        swift_bridgeObjectRelease();
        uint64_t v58 = *(void *)v4;
        if ((*(void *)v4 & 0xC000000000000001) != 0)
        {
          *(_DWORD *)(MEMORY[0x24C523D60](v45, *(void *)v4) + 76) = v2;
          swift_release();
          uint64_t v7 = *(unsigned int *)(MEMORY[0x24C523D60](v45, v58) + 28);
          swift_unknownObjectRelease();
          if (*(unsigned char *)(v4 + 40) != 1) {
            goto LABEL_124;
          }
        }
        else
        {
          if ((v45 & 0x8000000000000000) != 0) {
            goto LABEL_208;
          }
          unint64_t v13 = v58 & 0xFFFFFFFFFFFFFF8;
          if (v45 >= *(void *)((v58 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_209;
          }
          unint64_t v59 = v58 + 8 * v45;
          *(_DWORD *)(*(void *)(v59 + 32) + 76) = v2;
          unint64_t v13 = *(void *)((v58 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (v45 >= v13) {
            goto LABEL_210;
          }
          uint64_t v7 = *(unsigned int *)(*(void *)(v59 + 32) + 28);
          if ((*(unsigned char *)(v4 + 40) & 1) == 0)
          {
LABEL_124:
            BOOL v46 = 0;
            goto LABEL_105;
          }
        }
        BOOL v46 = v7 == 1;
LABEL_105:
        ++v45;
        *(unsigned char *)(v4 + 40) = v46;
        uint64_t v2 = (v7 + v2);
        unint64_t v13 = v108;
      }
      while (v108 != v45);
    }
    uint64_t v7 = v108;
    if (*(void *)(*(void *)(v4 + 8) + 16) != v108) {
      goto LABEL_250;
    }
    uint64_t v1 = v105;
    uint64_t v44 = v103;
    if ((v99 & 0x100) == 0)
    {
      swift_bridgeObjectRelease();
      *(void *)(v4 + 16) = 0;
      unint64_t v13 = v101;
      if (v101 == v100) {
        goto LABEL_171;
      }
LABEL_173:
      unint64_t v84 = 0;
      uint64_t v2 = v7 & ~(v7 >> 63);
      while (v2 != v84)
      {
        uint64_t isUniquelyReferenced_nonNull_native = *(void *)v4;
        Swift::Int v3 = *(void *)(v4 + 8);
        uint64_t v85 = *(void *)(v4 + 16);
        uint64_t v7 = *(void *)(v4 + 24);
        unint64_t v4 = *(void *)(v4 + 32);
        if (v85)
        {
          if (v104)
          {
            if ((unint64_t)isUniquelyReferenced_nonNull_native >> 62)
            {
              swift_bridgeObjectRetain_n();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              uint64_t v86 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
            }
            else
            {
              uint64_t v86 = *(void *)((isUniquelyReferenced_nonNull_native & 0xFFFFFFFFFFFFFF8) + 0x10);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            unint64_t v13 = v84 + v86 - v7 - v4;
            if ((v13 & 0x8000000000000000) != 0) {
              goto LABEL_218;
            }
            if (v13 >= *(void *)(v85 + 16)) {
              goto LABEL_219;
            }
            unint64_t v87 = *(unsigned int *)(v85 + 4 * v13 + 32);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          else
          {
            unint64_t v13 = *(void *)(v85 + 16);
            if (v84 >= v13) {
              goto LABEL_221;
            }
            unint64_t v87 = *(unsigned int *)(v85 + 4 * v84 + 32);
          }
          uint64_t v1 = v105;
        }
        else
        {
          unint64_t v87 = v84;
          uint64_t v1 = v105;
          if (v104)
          {
            if ((unint64_t)isUniquelyReferenced_nonNull_native >> 62)
            {
              swift_bridgeObjectRetain_n();
              swift_bridgeObjectRetain();
              uint64_t v88 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease_n();
            }
            else
            {
              uint64_t v88 = *(void *)((isUniquelyReferenced_nonNull_native & 0xFFFFFFFFFFFFFF8) + 0x10);
            }
            if ((uint64_t)v84 < v7) {
              unint64_t v87 = v84 + v88 - v7 - v4;
            }
            else {
              unint64_t v87 = v84 - v7;
            }
          }
        }
        if ((isUniquelyReferenced_nonNull_native & 0xC000000000000001) != 0)
        {
          uint64_t isUniquelyReferenced_nonNull_native = MEMORY[0x24C523D60](v87, isUniquelyReferenced_nonNull_native);
          unint64_t v4 = v107;
          Swift::Int v3 = v108;
        }
        else
        {
          unint64_t v4 = v107;
          unint64_t v13 = (unint64_t)&v116;
          Swift::Int v3 = v108;
          if ((v87 & 0x8000000000000000) != 0) {
            goto LABEL_212;
          }
          unint64_t v13 = *(void *)((isUniquelyReferenced_nonNull_native & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (v87 >= v13) {
            goto LABEL_213;
          }
          uint64_t isUniquelyReferenced_nonNull_native = *(void *)(isUniquelyReferenced_nonNull_native + 8 * v87 + 32);
          swift_retain();
        }
        id v89 = *(id *)(isUniquelyReferenced_nonNull_native + 16);
        swift_release();
        AGSubgraphSetIndex();

        uint64_t v7 = ++v84;
        if (v3 == v84) {
          goto LABEL_171;
        }
      }
LABEL_211:
      __break(1u);
LABEL_212:
      __break(1u);
LABEL_213:
      __break(1u);
LABEL_214:
      __break(1u);
LABEL_215:
      __break(1u);
LABEL_216:
      __break(1u);
LABEL_217:
      __break(1u);
LABEL_218:
      __break(1u);
LABEL_219:
      __break(1u);
      continue;
    }
    break;
  }
  uint64_t v60 = v103;
  if (v104)
  {
    uint64_t v60 = v103 + v108;
    if (__OFADD__(v103, v108))
    {
      __break(1u);
      goto LABEL_243;
    }
  }
  int64_t v61 = v60 & ~(v60 >> 63);
  unint64_t v5 = swift_allocObject();
  uint64_t v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v61, 0, MEMORY[0x263F8EE78]);
  *(void *)(v5 + 16) = v62;
  unint64_t v4 = v5 + 16;
  if (v44 < 0) {
    goto LABEL_239;
  }
  if (!v44) {
    goto LABEL_141;
  }
  char v63 = v62;
  int v64 = 0;
  unint64_t v65 = *((void *)v62 + 2);
  for (uint64_t i = 1; i != 0x100000001; ++i)
  {
    unint64_t v67 = *((void *)v63 + 3);
    if (v65 >= v67 >> 1)
    {
      uint64_t v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v67 > 1), v65 + 1, 1, v63);
      char v63 = v62;
    }
    *((void *)v63 + 2) = v65 + 1;
    *(_DWORD *)&v63[4 * v65 + 32] = v64;
    if (i == v44)
    {
      *(void *)unint64_t v4 = v63;
LABEL_141:
      MEMORY[0x270FA5388](v62);
      uint64_t v2 = *(void *)(v68 + 16);
      Swift::Int v3 = *(void *)(v68 + 24);
      uint64_t v95 = v2;
      uint64_t v96 = v3;
      uint64_t v97 = v1;
      uint64_t isUniquelyReferenced_nonNull_native = 0;
      if (v101 > 31) {
        specialized MutableCollection<>.sort(by:)((char **)(v5 + 16), (uint64_t (*)(Swift::Int, void))partial apply for lessThan #1 <A>(_:_:) in DynamicContainerInfo.updateValue());
      }
      else {
        specialized BidirectionalCollection<>.insertionSort(by:)(v5 + 16, (uint64_t (*)(uint64_t, void))lessThan #1 <A>(_:_:) in DynamicContainerInfo.updateValue()partial apply, (unint64_t)&v94);
      }
      if (!v104) {
        goto LABEL_170;
      }
      if (one-time initialization token for v5 == -1)
      {
LABEL_146:
        unsigned int v69 = static Semantics.v5;
        if (one-time initialization token for forced != -1) {
          swift_once();
        }
        swift_beginAccess();
        if (byte_26B0F44FC == 1)
        {
          if ((dyld_program_sdk_at_least() & 1) == 0)
          {
LABEL_150:
            if (!v44)
            {
LABEL_164:
              uint64_t v70 = addRemoved #1 <A>() in DynamicContainerInfo.updateValue()(v44, v108, v5);
              goto LABEL_165;
            }
            uint64_t v102 = v2;
            int v99 = 0;
LABEL_155:
            swift_beginAccess();
            uint64_t v2 = 0;
            uint64_t v7 = v44 & ~(v44 >> 63);
            do
            {
              if (v7 == v2) {
                goto LABEL_216;
              }
              unint64_t v13 = *(void *)v4;
              if ((unint64_t)v2 >= *(void *)(*(void *)v4 + 16)) {
                goto LABEL_217;
              }
              uint64_t isUniquelyReferenced_nonNull_native = *(unsigned int *)(v13 + 4 * v2 + 32);
              swift_beginAccess();
              int v71 = *(char **)v4;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                int v71 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v71 + 2) + 1, 1, v71);
              }
              unint64_t v73 = *((void *)v71 + 2);
              unint64_t v72 = *((void *)v71 + 3);
              if (v73 >= v72 >> 1) {
                int v71 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v72 > 1), v73 + 1, 1, v71);
              }
              ++v2;
              *((void *)v71 + 2) = v73 + 1;
              *(_DWORD *)&v71[4 * v73 + 32] = isUniquelyReferenced_nonNull_native;
              *(void *)unint64_t v4 = v71;
              uint64_t v70 = swift_endAccess();
              unint64_t v13 = (unint64_t)&v115;
              uint64_t v44 = v103;
            }
            while (v103 != v2);
            uint64_t v2 = v102;
            if (v99) {
              goto LABEL_165;
            }
            goto LABEL_164;
          }
        }
        else if (static Semantics.forced < v69)
        {
          goto LABEL_150;
        }
        uint64_t v70 = addRemoved #1 <A>() in DynamicContainerInfo.updateValue()(v44, v108, v5);
        if (!v44)
        {
LABEL_165:
          int64_t v74 = v44 + v108;
          if (__OFADD__(v44, v108))
          {
            __break(1u);
LABEL_245:
            __break(1u);
LABEL_246:
            __break(1u);
LABEL_247:
            __break(1u);
LABEL_248:
            __break(1u);
          }
          if (v74 < v44) {
            goto LABEL_245;
          }
          MEMORY[0x270FA5388](v70);
          uint64_t v95 = v2;
          uint64_t v96 = v3;
          uint64_t v97 = v105;
          swift_beginAccess();
          uint64_t v75 = *(void *)v4;
          uint64_t v76 = *(void *)(*(void *)v4 + 16);
          if (v76 < v44 || v76 < v74) {
            goto LABEL_246;
          }
          *(void *)&long long v109 = *(void *)v4;
          *((void *)&v109 + 1) = v75 + 32;
          unint64_t v77 = v103;
          *(void *)&long long v110 = v103;
          *((void *)&v110 + 1) = (2 * v74) | 1;
          swift_bridgeObjectRetain();
          specialized BidirectionalCollection<>.insertionSort(by:)((uint64_t)&v109, (uint64_t (*)(void, void))lessThan #1 <A>(_:_:) in DynamicContainerInfo.updateValue()partial apply);
          specialized Array.subscript.setter((char *)v109, *((uint64_t *)&v109 + 1), v110, *((unint64_t *)&v110 + 1), v77, v74);
          swift_endAccess();
          swift_unknownObjectRelease();
          uint64_t v1 = v105;
LABEL_170:
          swift_beginAccess();
          uint64_t v78 = *(void *)(v5 + 16);
          unint64_t v4 = v107;
          uint64_t isUniquelyReferenced_nonNull_native = *(void *)(v107 + 16);
          swift_bridgeObjectRetain();
          swift_release();
          swift_bridgeObjectRelease();
          *(void *)(v4 + 16) = v78;
          unint64_t v13 = (unint64_t)&v116;
          uint64_t v7 = v108;
          if (v101 == v100) {
            goto LABEL_171;
          }
          goto LABEL_173;
        }
        uint64_t v102 = v2;
        int v99 = 1;
        goto LABEL_155;
      }
LABEL_243:
      swift_once();
      goto LABEL_146;
    }
    ++v64;
    ++v65;
  }
  LODWORD(v97) = 0;
  uint64_t v96 = 3455;
  LOBYTE(v95) = 2;
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_249:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_250:
  int v98 = 0;
  uint64_t v97 = 363;
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t DynamicContainerInfo.updateItems(disableTransitions:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = a2;
  int v53 = a1;
  unint64_t v5 = *(void *)(a2 + 16);
  uint64_t v50 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](a1);
  unint64_t v49 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(v7 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v52 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v52 - 8);
  MEMORY[0x270FA5388](v52);
  uint64_t v12 = (char *)&v46 - v11;
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  double v15 = MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v46 - v16;
  *(_WORD *)BOOL v56 = 0;
  uint64_t v18 = v2 + *(int *)(v4 + 36);
  uint64_t v19 = *(void (**)(unint64_t, uint64_t, double))(v8 + 48);
  unint64_t v51 = v5;
  v19(v5, v8, v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v52);
    int v20 = *(void *)(v3 + *(int *)(v4 + 52) + 16) != 0;
    goto LABEL_36;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v17, v12, AssociatedTypeWitness);
  uint64_t v55 = 0;
  uint64_t v52 = *(int *)(v4 + 52);
  unint64_t v21 = *(void *)(v3 + v52);
  uint64_t v47 = v13;
  uint64_t v48 = AssociatedTypeWitness;
  if (v21 >> 62) {
    goto LABEL_49;
  }
  uint64_t v22 = *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_5:
  uint64_t v54 = v22;
  Swift::Int v24 = v49;
  uint64_t v23 = v50;
  uint64_t v25 = (char *)v51;
  uint64_t v26 = (*(uint64_t (**)(char *, uint64_t, unint64_t))(v50 + 16))(v49, v18, v51);
  double v27 = MEMORY[0x270FA5388](v26);
  *(&v46 - 10) = v25;
  *(&v46 - 9) = (char *)v8;
  *(&v46 - 8) = (char *)&v55;
  *(&v46 - 7) = (char *)&v54;
  *(&v46 - 6) = (char *)v3;
  *(&v46 - 5) = (char *)&v56[1];
  *(&v46 - 4) = v17;
  char v28 = v53;
  *((unsigned char *)&v46 - 24) = v53 & 1;
  *(&v46 - 2) = (char *)v56;
  int64_t v29 = *(void (**)(char *, uint64_t (*)(uint64_t), double))(v8 + 56);
  BOOL v46 = v17;
  uint64_t v18 = (uint64_t)v24;
  v29(v17, partial apply for closure #1 in DynamicContainerInfo.updateItems(disableTransitions:), v27);
  (*(void (**)(char *, char *))(v23 + 8))(v24, v25);
  uint64_t v30 = v54;
  uint64_t v8 = v55;
  uint64_t v31 = v52;
  if (v55 < v54)
  {
    unint64_t v51 = v55;
    do
    {
      if (v8 >= v30)
      {
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        swift_bridgeObjectRetain();
        uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        goto LABEL_5;
      }
      unint64_t v32 = v30 - 1;
      uint64_t v33 = *(void *)(v3 + v31);
      if ((v33 & 0xC000000000000001) != 0)
      {
        uint64_t v34 = MEMORY[0x24C523D60](v30 - 1);
      }
      else
      {
        if (v30 < 1) {
          goto LABEL_41;
        }
        if (v32 >= *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_42;
        }
        uint64_t v34 = *(void *)(v33 + 8 * v30 + 24);
        swift_retain();
      }
      swift_beginAccess();
      uint64_t v17 = (char *)*(unsigned __int8 *)(v34 + 84);
      swift_release();
      uint64_t v18 = v3;
      if (!DynamicContainerInfo.tryRemovingItem(at:disableTransitions:)(v30 - 1, v28 & 1))
      {
        uint64_t v8 = *(void *)(v3 + v31);
        if ((v8 & 0xC000000000000001) != 0)
        {
          double v42 = *(double *)(MEMORY[0x24C523D60](v30 - 1, *(void *)(v3 + v31)) + 64);
          v56[0] = v56[0] & 1 | (v42 != 0.0);
          double v43 = *(double *)(MEMORY[0x24C523D60](v51, v8) + 64);
          swift_release();
          if (v42 != v43)
          {
            *(double *)(MEMORY[0x24C523D60](v30 - 1, v8) + 64) = v42;
            swift_release();
            v56[1] = 1;
          }
          uint64_t v41 = MEMORY[0x24C523D60](v30 - 1, v8);
          uint64_t v8 = v51;
        }
        else
        {
          if (v30 < 1) {
            goto LABEL_43;
          }
          uint64_t v35 = v3;
          uint64_t v3 = v4;
          uint64_t v4 = v8 & 0xFFFFFFFFFFFFFF8;
          unint64_t v36 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (v32 >= v36) {
            goto LABEL_44;
          }
          uint64_t v37 = v8 + 8 * v30;
          uint64_t v18 = *(void *)(v37 + 24);
          double v38 = *(double *)(v18 + 64);
          unsigned __int8 v39 = v56[0];
          swift_retain();
          v56[0] = v39 & 1 | (v38 != 0.0);
          if ((v51 & 0x8000000000000000) != 0) {
            goto LABEL_45;
          }
          if (v51 >= v36) {
            goto LABEL_46;
          }
          double v40 = *(double *)(*(void *)(v8 + 32 + 8 * v51) + 64);
          uint64_t v8 = v51;
          if (v38 != v40)
          {
            if (v32 >= *(void *)(v4 + 16)) {
              goto LABEL_48;
            }
            *(double *)(*(void *)(v37 + 24) + 64) = v38;
            v56[1] = 1;
          }
          if (v32 >= *(void *)(v4 + 16)) {
            goto LABEL_47;
          }
          uint64_t v41 = *(void *)(v37 + 24);
          swift_retain();
          uint64_t v4 = v3;
          uint64_t v3 = v35;
          char v28 = v53;
          uint64_t v31 = v52;
        }
        swift_release();
        swift_beginAccess();
        uint64_t v18 = *(unsigned __int8 *)(v41 + 84);
        swift_release();
        if (v18 == 3)
        {
          if (v17 == 3) {
            goto LABEL_8;
          }
        }
        else if (v17 != 3 && v18 == v17)
        {
          goto LABEL_8;
        }
      }
      v56[1] = 1;
LABEL_8:
      uint64_t v30 = v32;
    }
    while (v8 != v32);
  }
  (*(void (**)(char *, uint64_t))(v47 + 8))(v46, v48);
  int v20 = v56[0];
LABEL_36:
  if (v20) {
    int v44 = 256;
  }
  else {
    int v44 = 0;
  }
  return v44 | v56[1];
}

Swift::Bool __swiftcall DynamicContainerInfo.tryRemovingItem(at:disableTransitions:)(Swift::Int at, Swift::Bool disableTransitions)
{
  uint64_t v4 = v2;
  unint64_t v6 = at;
  uint64_t v7 = *(int *)(v2 + 52);
  uint64_t v8 = (uint64_t *)(v3 + v7);
  uint64_t v9 = *(void *)(v3 + v7);
  unint64_t v10 = v9 & 0xC000000000000001;
  if ((v9 & 0xC000000000000001) == 0)
  {
    if (at < 0)
    {
      __break(1u);
    }
    else if (*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) > (unint64_t)at)
    {
      uint64_t v11 = *(void *)(v9 + 8 * at + 32);
      swift_retain();
      goto LABEL_5;
    }
    __break(1u);
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  uint64_t v11 = MEMORY[0x24C523D60](at, *(void *)(v3 + v7));
LABEL_5:
  swift_beginAccess();
  uint64_t v12 = *(unsigned __int8 *)(v11 + 84);
  swift_release();
  Swift::Bool result = 0;
  switch(v12)
  {
    case 1:
      if (disableTransitions) {
        goto LABEL_31;
      }
      if (v10)
      {
        char v14 = *(unsigned char *)(MEMORY[0x24C523D60](v6, v9) + 48);
        swift_unknownObjectRelease();
        if (v14)
        {
          uint64_t v15 = *(int *)(v4 + 60);
          int v16 = *(_DWORD *)(v3 + v15);
          if ((v16 + 1) > 1) {
            int v17 = v16 + 1;
          }
          else {
            int v17 = 1;
          }
          *(_DWORD *)(v3 + v15) = v17;
          uint64_t v18 = MEMORY[0x24C523D60](v6, v9);
          goto LABEL_29;
        }
LABEL_31:
        DynamicContainerInfo.eraseItem(at:)(v6);
        return 1;
      }
      if ((v6 & 0x8000000000000000) != 0)
      {
        __break(1u);
        goto LABEL_62;
      }
      if (*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) <= v6)
      {
LABEL_62:
        __break(1u);
        goto LABEL_63;
      }
      if ((*(unsigned char *)(*(void *)(v9 + 32 + 8 * v6) + 48) & 1) == 0) {
        goto LABEL_31;
      }
      uint64_t v22 = *(int *)(v4 + 60);
      int v23 = *(_DWORD *)(v3 + v22);
      if ((v23 + 1) > 1) {
        int v17 = v23 + 1;
      }
      else {
        int v17 = 1;
      }
      *(_DWORD *)(v3 + v22) = v17;
      if (*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) <= v6) {
        goto LABEL_65;
      }
      uint64_t v18 = swift_retain();
LABEL_29:
      *(_DWORD *)(v18 + 72) = v17;
      swift_release();
      ++v8[3];
      if (v10)
      {
        uint64_t v24 = MEMORY[0x24C523D60](v6, v9);
        goto LABEL_35;
      }
      if ((v6 & 0x8000000000000000) != 0)
      {
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
        goto LABEL_66;
      }
      if (*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) <= v6)
      {
LABEL_66:
        __break(1u);
        goto LABEL_67;
      }
      uint64_t v24 = *(void *)(v9 + 8 * v6 + 32);
      swift_retain();
LABEL_35:
      swift_beginAccess();
      *(unsigned char *)(v24 + 84) = 2;
      swift_release();
      if (v10)
      {
        if (!*(void *)(MEMORY[0x24C523D60](v6, v9) + 56)) {
          goto LABEL_38;
        }
        goto LABEL_37;
      }
      if ((v6 & 0x8000000000000000) != 0) {
        goto LABEL_64;
      }
      if (*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) <= v6)
      {
LABEL_67:
        __break(1u);
        goto LABEL_68;
      }
      uint64_t v33 = *(void *)(v9 + 8 * v6 + 32);
      swift_retain();
      if (*(void *)(v33 + 56))
      {
LABEL_37:
        swift_retain();
        swift_release();
        swift_weakAssign();
      }
LABEL_38:
      swift_release();
      specialized static ViewGraph.current.getter();
      uint64_t v25 = AGCreateWeakAttribute();
      type metadata accessor for DynamicAnimationListener();
      uint64_t v3 = swift_allocObject();
      swift_weakInit();
      *(void *)(v3 + 32) = 0;
      swift_weakAssign();
      swift_retain();
      swift_release();
      *(void *)(v3 + 24) = v25;
      swift_release();
      uint64_t v26 = *v8;
      if ((*v8 & 0xC000000000000001) == 0)
      {
        if ((v6 & 0x8000000000000000) != 0)
        {
          __break(1u);
        }
        else if (*(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10) > v6)
        {
          uint64_t v27 = *(void *)(v26 + 8 * v6 + 32);
          swift_retain();
          goto LABEL_42;
        }
        __break(1u);
        goto LABEL_60;
      }
LABEL_57:
      uint64_t v27 = MEMORY[0x24C523D60](v6);
LABEL_42:
      *(void *)(v27 + 56) = v3;
      swift_retain();
      swift_release();
      swift_release();
      ++*(void *)(v3 + 32);
      swift_retain();
      specialized static Update.begin()();
      unint64_t v6 = swift_allocObject();
      *(void *)(v6 + 16) = partial apply for closure #1 in DynamicContainerInfo.tryRemovingItem(at:disableTransitions:);
      *(void *)(v6 + 24) = v3;
      uint64_t v28 = one-time initialization token for actions;
      swift_retain();
      if (v28 != -1) {
LABEL_60:
      }
        swift_once();
      int64_t v29 = static Update.actions;
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        int64_t v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29[2] + 1, 1, v29);
      }
      unint64_t v31 = v29[2];
      unint64_t v30 = v29[3];
      if (v31 >= v30 >> 1) {
        int64_t v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v30 > 1), v31 + 1, 1, v29);
      }
      v29[2] = v31 + 1;
      unint64_t v32 = &v29[2 * v31];
      v32[4] = partial apply for thunk for @escaping @callee_guaranteed () -> ();
      v32[5] = v6;
      static Update.actions = v29;
      swift_bridgeObjectRelease();
      static Update.end()();
      swift_release_n();
      return 0;
    case 2:
      if (v10)
      {
        uint64_t v19 = MEMORY[0x24C523D60](v6, v9);
LABEL_18:
        uint64_t v20 = *(void *)(v19 + 56);
        swift_retain();
        swift_release();
        if (!v20)
        {
LABEL_68:
          __break(1u);
LABEL_69:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          JUMPOUT(0x245D99068);
        }
        uint64_t v21 = *(void *)(v20 + 32);
        swift_release();
        if (v21) {
          return 0;
        }
        goto LABEL_31;
      }
      if ((v6 & 0x8000000000000000) != 0) {
        goto LABEL_55;
      }
      if (*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) > v6)
      {
        uint64_t v19 = *(void *)(v9 + 8 * v6 + 32);
        swift_retain();
        goto LABEL_18;
      }
      break;
    case 3:
      return result;
    default:
      goto LABEL_69;
  }
LABEL_56:
  __break(1u);
  goto LABEL_57;
}

uint64_t lessThan #1 <A>(_:_:) in DynamicContainerInfo.updateValue()(unsigned int a1, unsigned int a2, uint64_t a3)
{
  unint64_t v6 = a1;
  uint64_t result = type metadata accessor for DynamicContainerInfo();
  uint64_t v8 = *(int *)(result + 52);
  uint64_t v9 = *(void *)(a3 + v8);
  if ((v9 & 0xC000000000000001) != 0)
  {
    uint64_t v10 = MEMORY[0x24C523D60](v6);
  }
  else
  {
    if (*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) <= v6)
    {
      __break(1u);
      goto LABEL_10;
    }
    uint64_t v10 = swift_retain();
  }
  double v3 = *(double *)(v10 + 64);
  swift_release();
  uint64_t result = a2;
  uint64_t v11 = *(void *)(a3 + v8);
  if ((v11 & 0xC000000000000001) != 0)
  {
LABEL_10:
    uint64_t v12 = MEMORY[0x24C523D60](result);
    goto LABEL_7;
  }
  if (*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10) > (unint64_t)a2)
  {
    uint64_t v12 = swift_retain();
LABEL_7:
    double v13 = *(double *)(v12 + 64);
    swift_release();
    return v3 < v13;
  }
  __break(1u);
  return result;
}

uint64_t addRemoved #1 <A>() in DynamicContainerInfo.updateValue()(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a2 < result)
  {
LABEL_22:
    __break(1u);
  }
  else
  {
    uint64_t v3 = a2;
    uint64_t v4 = result;
    if (result == a2) {
      return result;
    }
    if (result < a2)
    {
      if (result < 0 || HIDWORD(result))
      {
        while (1)
        {
LABEL_25:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
        }
      }
      unint64_t v5 = (char **)(a3 + 16);
      swift_beginAccess();
      unint64_t v6 = *v5;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *unint64_t v5 = v6;
      if (isUniquelyReferenced_nonNull_native) {
        goto LABEL_7;
      }
      goto LABEL_24;
    }
  }
  __break(1u);
LABEL_24:
  unint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v6 + 2) + 1, 1, v6);
LABEL_7:
  if (v4 <= 0xFFFFFFFFLL) {
    uint64_t v8 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v8 = v4;
  }
  uint64_t v9 = v4;
  while (1)
  {
    *unint64_t v5 = v6;
    unint64_t v11 = *((void *)v6 + 2);
    unint64_t v10 = *((void *)v6 + 3);
    if (v11 >= v10 >> 1)
    {
      unint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v10 > 1), v11 + 1, 1, v6);
      *unint64_t v5 = v6;
    }
    uint64_t v12 = v9 + 1;
    *((void *)v6 + 2) = v11 + 1;
    *(_DWORD *)&v6[4 * v11 + 32] = v9;
    if (v9 + 1 == v3) {
      return swift_endAccess();
    }
    if (v12 < v4 || v12 >= v3)
    {
      __break(1u);
      goto LABEL_22;
    }
    unint64_t v6 = *v5;
    if (v9++ == v8)
    {
      swift_endAccess();
      goto LABEL_25;
    }
  }
}

uint64_t closure #1 in DynamicContainerInfo.updateItems(disableTransitions:)(uint64_t a1, Swift::Int *a2, uint64_t a3, unsigned char *a4, unsigned char *a5, uint64_t a6, int a7, unsigned char *a8, uint64_t a9, uint64_t a10)
{
  long long v66 = a8;
  uint64_t v64 = a6;
  uint64_t v70 = a4;
  uint64_t v78 = a1;
  uint64_t v68 = a10;
  uint64_t v69 = a9;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v67 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  unint64_t v77 = (char *)&v59 - v16;
  unint64_t v17 = *a2;
  int64_t v18 = *(void *)a3;
  if (*(void *)a3 < *a2) {
    goto LABEL_74;
  }
  int v62 = a7;
  char v63 = (unint64_t *)a3;
  if (v17 == v18)
  {
    uint64_t v19 = v68;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    unint64_t v72 = -1;
    goto LABEL_4;
  }
  int64_t v61 = a5;
  uint64_t v60 = (unint64_t *)a2;
  a3 = v68;
  uint64_t v59 = type metadata accessor for DynamicContainerInfo();
  uint64_t v74 = (uint64_t)&v70[*(int *)(v59 + 52)];
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v65 = AssociatedConformanceWitness + 48;
  unint64_t v72 = *(void *)(AssociatedConformanceWitness + 32);
  uint64_t v73 = AssociatedConformanceWitness + 32;
  uint64_t v75 = (uint64_t (**)(uint64_t, uint64_t))(v67 + 8);
  uint64_t v76 = (void (**)(char *, unsigned char *, uint64_t))(v67 + 16);
  uint64_t v31 = -1;
  int64_t v71 = v18;
  do
  {
    if ((uint64_t)v17 >= v18)
    {
      __break(1u);
LABEL_69:
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      __break(1u);
LABEL_72:
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
      goto LABEL_75;
    }
    uint64_t v32 = *(void *)v74;
    if ((*(void *)v74 & 0xC000000000000001) != 0)
    {
      uint64_t v33 = v31;
      a5 = (unsigned char *)MEMORY[0x24C523D60](v17);
    }
    else
    {
      if ((v17 & 0x8000000000000000) != 0) {
        goto LABEL_69;
      }
      if (v17 >= *(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_70;
      }
      uint64_t v33 = v31;
      a5 = *(unsigned char **)(v32 + 8 * v17 + 32);
      swift_retain();
    }
    unint64_t v10 = &a5[*(void *)(*(void *)a5 + 208)];
    swift_beginAccess();
    a3 = (uint64_t)v77;
    uint64_t v34 = *v76;
    uint64_t v35 = AssociatedTypeWitness;
    (*v76)(v77, v10, AssociatedTypeWitness);
    uint64_t v36 = AssociatedConformanceWitness;
    a2 = (Swift::Int *)((uint64_t (*)(uint64_t, uint64_t, uint64_t))v72)(v78, v35, AssociatedConformanceWitness);
    uint64_t v37 = (Swift::Int *)*v75;
    (*v75)(a3, v35);
    if (a2)
    {
      a2 = (Swift::Int *)v60;
      if (*v60 != v17)
      {
        specialized MutableCollection.swapAt(_:_:)(*v60, v17);
        unsigned char *v61 = 1;
      }
      swift_beginAccess();
      uint64_t v39 = AssociatedTypeWitness;
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v67 + 24))(v10, v78, AssociatedTypeWitness);
      swift_endAccess();
      swift_beginAccess();
      unint64_t v10 = v70;
      if (a5[84] == 1)
      {
        swift_release();
        uint64_t v41 = v66;
        a5 = v61;
      }
      else
      {
        DynamicContainerInfo.unremoveItem(at:)(*a2);
        swift_release();
        a5 = v61;
        unsigned char *v61 = 1;
        uint64_t v41 = v66;
      }
      goto LABEL_57;
    }
    uint64_t v31 = v33;
    if (v33 < 0)
    {
      swift_beginAccess();
      int64_t v18 = v71;
      if (a5[84] == 3)
      {
        a2 = (Swift::Int *)v77;
        double v38 = v10;
        unint64_t v10 = (unsigned char *)AssociatedTypeWitness;
        v34(v77, v38, AssociatedTypeWitness);
        a3 = (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(v36 + 48))(v78, v10, v36);
        swift_release();
        uint64_t result = ((uint64_t (*)(Swift::Int *, unsigned char *))v37)(a2, v10);
        if (a3) {
          uint64_t v31 = v17;
        }
      }
      else
      {
        uint64_t result = swift_release();
      }
    }
    else
    {
      uint64_t result = swift_release();
      int64_t v18 = v71;
    }
    ++v17;
    uint64_t AssociatedConformanceWitness = v36;
  }
  while (v18 != v17);
  a2 = (Swift::Int *)v60;
  a5 = v61;
  unint64_t v40 = v31;
  uint64_t v19 = v68;
  unint64_t v72 = v40;
  if ((v40 & 0x8000000000000000) == 0) {
    goto LABEL_45;
  }
LABEL_4:
  if (((*(uint64_t (**)(void))(AssociatedConformanceWitness + 40))() & 1) == 0) {
    goto LABEL_51;
  }
  uint64_t v74 = AssociatedConformanceWitness;
  unint64_t v17 = *a2;
  int64_t v21 = *v63;
  if ((uint64_t)*v63 < *a2) {
    goto LABEL_83;
  }
  a3 = v74;
  if (v17 == v21)
  {
LABEL_51:
    uint64_t v46 = type metadata accessor for DynamicContainerInfo();
    uint64_t v47 = *(int *)(v46 + 56);
    unint64_t v10 = v70;
    unsigned int v48 = *(_DWORD *)&v70[v47] + 1;
    *(_DWORD *)&v70[v47] = v48;
    unsigned int CurrentAttribute = AGGraphGetCurrentAttribute();
    if (CurrentAttribute != *MEMORY[0x263F288F8])
    {
      DynamicContainerInfo.makeItem(_:uniqueId:container:disableTransitions:)(v78, v48, CurrentAttribute, v62 & 1, v46);
      uint64_t v50 = &v10[*(int *)(v46 + 52)];
      MEMORY[0x24C522D60]();
      if (*(void *)((*v50 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((*v50 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        goto LABEL_53;
      }
      goto LABEL_79;
    }
    goto LABEL_78;
  }
  int64_t v61 = a5;
  uint64_t v60 = (unint64_t *)a2;
  uint64_t v59 = type metadata accessor for DynamicContainerInfo();
  uint64_t v76 = (void (**)(char *, unsigned char *, uint64_t))*(int *)(v59 + 52);
  uint64_t v75 = (uint64_t (**)(uint64_t, uint64_t))(v67 + 16);
  uint64_t v73 = a3 + 48;
  uint64_t v22 = v19;
  int v23 = (uint64_t (**)(uint64_t, uint64_t))(v67 + 8);
  int64_t v71 = v22 + 64;
  while (2)
  {
    if ((uint64_t)v17 >= v21) {
      goto LABEL_71;
    }
    uint64_t v25 = *(uint64_t *)((char *)v76 + (void)v70);
    if ((v25 & 0xC000000000000001) != 0)
    {
      unint64_t v10 = (unsigned char *)MEMORY[0x24C523D60](v17);
      if ((v10[48] & 1) == 0) {
        goto LABEL_15;
      }
      goto LABEL_8;
    }
    if ((v17 & 0x8000000000000000) != 0) {
      goto LABEL_72;
    }
    if (v17 >= *(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_73;
    }
    unint64_t v10 = *(unsigned char **)(v25 + 8 * v17 + 32);
    swift_retain();
    if (v10[48])
    {
LABEL_8:
      uint64_t result = swift_release();
      goto LABEL_9;
    }
LABEL_15:
    a5 = &v10[*(void *)(*(void *)v10 + 208)];
    swift_beginAccess();
    a2 = (Swift::Int *)*v75;
    a3 = (uint64_t)v77;
    uint64_t v26 = AssociatedTypeWitness;
    ((void (*)(char *, unsigned char *, uint64_t))*v75)(v77, a5, AssociatedTypeWitness);
    char v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v74 + 48))(v78, v26);
    uint64_t v28 = *v23;
    (*v23)(a3, v26);
    if ((v27 & 1) == 0) {
      goto LABEL_8;
    }
    int64_t v29 = v77;
    unint64_t v30 = a5;
    a5 = (unsigned char *)AssociatedTypeWitness;
    ((void (*)(char *, unsigned char *, uint64_t))a2)(v77, v30, AssociatedTypeWitness);
    a3 = (*(uint64_t (**)(uint64_t, char *))(v68 + 64))(v64, v29);
    swift_release();
    uint64_t result = v28((uint64_t)v29, (uint64_t)a5);
    if ((a3 & 1) == 0)
    {
      unint64_t v72 = v17;
      goto LABEL_44;
    }
LABEL_9:
    if (v21 != ++v17) {
      continue;
    }
    break;
  }
  unint64_t v17 = v72;
LABEL_44:
  a2 = (Swift::Int *)v60;
  a5 = v61;
  if ((v17 & 0x8000000000000000) != 0) {
    goto LABEL_51;
  }
LABEL_45:
  unint64_t v10 = v70;
  uint64_t v42 = *(void *)&v70[*(int *)(v59 + 52)];
  if ((v42 & 0xC000000000000001) != 0) {
    goto LABEL_84;
  }
  int64_t v43 = v72;
  uint64_t v39 = AssociatedTypeWitness;
  if (v72 >= *(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
  }
  else
  {
    uint64_t v44 = *(void *)(v42 + 8 * v72 + 32);
    swift_retain();
    while (1)
    {
      uint64_t v45 = v44 + *(void *)(*(void *)v44 + 208);
      swift_beginAccess();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v67 + 24))(v45, v78, v39);
      swift_endAccess();
      DynamicContainerInfo.unremoveItem(at:)(v43);
      if (*a2 < v43) {
        specialized MutableCollection.swapAt(_:_:)(*a2, v43);
      }
      swift_release();
      uint64_t v41 = v66;
      while (1)
      {
        *a5 = 1;
        uint64_t v36 = swift_getAssociatedConformanceWitness();
LABEL_57:
        double v11 = (*(double (**)(uint64_t, uint64_t))(v36 + 24))(v39, v36);
        unsigned char *v41 = *v41 & 1 | (v11 != 0.0);
        unint64_t v17 = *a2;
        a3 = *(int *)(type metadata accessor for DynamicContainerInfo() + 52);
        uint64_t v53 = *(void *)&v10[a3];
        if ((v53 & 0xC000000000000001) != 0) {
          break;
        }
        if ((v17 & 0x8000000000000000) != 0)
        {
          __break(1u);
        }
        else if (v17 < *(void *)((v53 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          uint64_t v54 = swift_retain();
          goto LABEL_61;
        }
        __break(1u);
LABEL_78:
        __break(1u);
LABEL_79:
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_53:
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        unint64_t v51 = v63;
        unint64_t v52 = *v63;
        uint64_t v39 = AssociatedTypeWitness;
        if (*a2 < (uint64_t)*v63)
        {
          specialized MutableCollection.swapAt(_:_:)(*a2, v52);
          unint64_t v52 = *v51;
        }
        uint64_t v41 = v66;
        *unint64_t v51 = v52 + 1;
      }
LABEL_75:
      uint64_t v54 = MEMORY[0x24C523D60](v17);
LABEL_61:
      double v55 = *(double *)(v54 + 64);
      uint64_t result = swift_release();
      if (v11 == v55) {
        break;
      }
      unint64_t v56 = *a2;
      uint64_t v57 = *(void *)&v10[a3];
      if ((v57 & 0xC000000000000001) != 0)
      {
        uint64_t v58 = MEMORY[0x24C523D60](v56);
        goto LABEL_66;
      }
      if ((v56 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (v56 < *(void *)((v57 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        uint64_t v58 = swift_retain();
LABEL_66:
        *(double *)(v58 + 64) = v11;
        uint64_t result = swift_release();
        *a5 = 1;
        break;
      }
      __break(1u);
LABEL_83:
      __break(1u);
LABEL_84:
      int64_t v43 = v72;
      uint64_t v44 = MEMORY[0x24C523D60](v72);
      uint64_t v39 = AssociatedTypeWitness;
    }
    ++*a2;
  }
  return result;
}

Swift::Void __swiftcall DynamicContainerInfo.unremoveItem(at:)(Swift::Int at)
{
  uint64_t v3 = v1;
  uint64_t v5 = *(int *)(v1 + 52);
  uint64_t v6 = v2 + v5;
  uint64_t v7 = *(void *)(v2 + v5);
  unint64_t v8 = v7 & 0xC000000000000001;
  if ((v7 & 0xC000000000000001) == 0)
  {
    if (at < 0)
    {
      __break(1u);
    }
    else if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10) > (unint64_t)at)
    {
      uint64_t v9 = *(void *)(v7 + 8 * at + 32);
      swift_retain();
      goto LABEL_5;
    }
    __break(1u);
    goto LABEL_43;
  }
  uint64_t v9 = MEMORY[0x24C523D60](at, *(void *)(v2 + v5));
LABEL_5:
  swift_beginAccess();
  unsigned int v10 = *(unsigned __int8 *)(v9 + 84);
  swift_release();
  if (v10 < 2)
  {
    if (v8)
    {
      uint64_t v11 = MEMORY[0x24C523D60](at, v7);
      uint64_t v12 = MEMORY[0x24C523D60](at, v7);
    }
    else
    {
      if (at < 0)
      {
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
      if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10) <= (unint64_t)at)
      {
LABEL_46:
        __break(1u);
        goto LABEL_47;
      }
      uint64_t v12 = swift_retain_n();
      uint64_t v11 = v12;
    }
    int v15 = *(_DWORD *)(v12 + 80);
    swift_release();
    *(_DWORD *)(v11 + 80) = v15 + 1;
    swift_release();
    goto LABEL_28;
  }
  if (v10 != 2)
  {
    --*(void *)(v6 + 32);
    if (v8)
    {
      uint64_t v14 = MEMORY[0x24C523D60](at, v7);
    }
    else
    {
      if (at < 0)
      {
LABEL_48:
        __break(1u);
        goto LABEL_49;
      }
      if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10) <= (unint64_t)at)
      {
LABEL_50:
        __break(1u);
        goto LABEL_51;
      }
      uint64_t v14 = *(void *)(v7 + 8 * at + 32);
      swift_retain();
    }
    id v19 = *(id *)(v14 + 16);
    swift_release();
    AGSubgraphAddChild();
    AGSubgraphApply();

LABEL_28:
    int v16 = 0;
    if (v8) {
      goto LABEL_29;
    }
    goto LABEL_21;
  }
  --*(void *)(v6 + 24);
  if (v8)
  {
    uint64_t v13 = MEMORY[0x24C523D60](at, v7);
  }
  else
  {
    if (at < 0)
    {
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
    if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10) <= (unint64_t)at)
    {
LABEL_49:
      __break(1u);
      goto LABEL_50;
    }
    uint64_t v13 = swift_retain();
  }
  *(_DWORD *)(v13 + 72) = 0;
  swift_release();
  int v16 = 1;
  if (!v8)
  {
LABEL_21:
    if ((at & 0x8000000000000000) == 0)
    {
      if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10) > (unint64_t)at)
      {
        uint64_t v17 = *(void *)(v7 + 8 * at + 32);
        int v18 = *(unsigned __int8 *)(v17 + 48);
        swift_retain();
        goto LABEL_30;
      }
      goto LABEL_44;
    }
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
LABEL_29:
  int v18 = *(unsigned __int8 *)(MEMORY[0x24C523D60](at, v7) + 48);
  swift_unknownObjectRelease();
  uint64_t v17 = MEMORY[0x24C523D60](at, v7);
LABEL_30:
  if (!v18) {
    int v16 = 1;
  }
  swift_beginAccess();
  *(unsigned char *)(v17 + 84) = v16;
  swift_release();
  if (!v16)
  {
    *(unsigned char *)(v2 + *(int *)(v3 + 68)) = 1;
    uint64_t v20 = AGCreateWeakAttribute();
    if (AGGraphGetCurrentAttribute() == *MEMORY[0x263F288F8])
    {
      id v21 = (id)AGSubgraphGetCurrent();
      if (!v21)
      {
LABEL_52:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        return;
      }
      uint64_t v22 = v21;
      id v23 = (id)AGSubgraphGetGraph();
    }
    else
    {
      id v23 = (id)AGGraphGetAttributeGraph();
    }
    if (AGGraphGetContext())
    {
      swift_retain();

      uint64_t v24 = swift_allocObject();
      *(void *)(v24 + 16) = v20;
      GraphHost.continueTransaction(_:)((uint64_t)partial apply for closure #1 in DynamicContainerInfo.unremoveItem(at:), v24);
      swift_release();
      swift_release();
      return;
    }
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
}

uint64_t DynamicContainerInfo.makeItem(_:uniqueId:container:disableTransitions:)(uint64_t a1, unsigned int a2, unsigned int a3, char a4, uint64_t a5)
{
  uint64_t v8 = *(void *)(a5 + 16);
  uint64_t v9 = *(void *)(a5 + 24);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 16);
  uint64_t v12 = swift_checkMetadataState();
  char v13 = v11(v12, AssociatedConformanceWitness);
  char v25 = v13;
  if ((a4 & 1) != 0 || (v13 & 1) == 0)
  {
    int v18 = 1;
    uint64_t v19 = v28;
LABEL_10:
    id v21 = (id)AGSubgraphGetGraph();
    (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 56))(v12, AssociatedConformanceWitness);
    uint64_t v22 = (void *)AGSubgraphCreate2();

    AGSubgraphAddChild();
    AGGraphClearUpdate();
    id v23 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    closure #3 in DynamicContainerInfo.makeItem(_:uniqueId:container:disableTransitions:)(v19, a1, a2, a3, v22, v18, v25 & 1, v8, &v29, v9);
    AGSubgraphSetCurrent();

    AGGraphSetUpdate();
    return v29;
  }
  uint64_t v14 = AGCreateWeakAttribute();
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x263F288F8])
  {
    id v15 = (id)AGSubgraphGetCurrent();
    if (!v15) {
      goto LABEL_12;
    }
    int v16 = v15;
    id v17 = (id)AGSubgraphGetGraph();
  }
  else
  {
    id v17 = (id)AGGraphGetAttributeGraph();
  }
  if (AGGraphGetContext())
  {
    swift_retain();

    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = v14;
    GraphHost.continueTransaction(_:)((uint64_t)partial apply for closure #1 in DynamicAnimationListener.animationWasRemoved(), v20);
    swift_release();
    swift_release();
    int v18 = 0;
    uint64_t v19 = v28;
    *(unsigned char *)(v28 + *(int *)(a5 + 68)) = 1;
    goto LABEL_10;
  }
  __break(1u);
LABEL_12:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #3 in DynamicContainerInfo.makeItem(_:uniqueId:container:disableTransitions:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, unsigned int a4@<W3>, void *a5@<X4>, int a6@<W5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10)
{
  int v54 = a7;
  int v56 = a6;
  id v74 = a5;
  unsigned int v68 = a4;
  unsigned int v76 = a3;
  uint64_t v71 = a2;
  uint64_t v61 = a1;
  double v55 = a9;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v72 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v78 = &v53[-v12];
  uint64_t v79 = *(void *)(a8 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v67 = &v53[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v66 = a10;
  uint64_t v64 = a8;
  uint64_t v70 = swift_getAssociatedTypeWitness();
  uint64_t v69 = *(void *)(v70 - 8);
  MEMORY[0x270FA5388](v70);
  unint64_t v77 = &v53[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v16);
  uint64_t v75 = &v53[-v17];
  uint64_t v60 = type metadata accessor for DynamicContainerInfo();
  uint64_t v18 = a1 + *(int *)(v60 + 40);
  uint64_t v19 = *(void *)v18;
  LODWORD(v63) = *(_DWORD *)(v18 + 8);
  uint64_t v20 = *(void *)(v18 + 16);
  uint64_t v21 = *(void *)(v18 + 40);
  uint64_t v22 = *(void *)(v18 + 48);
  LODWORD(v65) = *(_DWORD *)(v18 + 80);
  uint64_t v23 = *(void *)(v18 + 24);
  uint64_t v24 = *(void *)(v18 + 32);
  long long v62 = *(_OWORD *)(v18 + 56);
  uint64_t v25 = *(void *)(v18 + 72);
  swift_beginAccess();
  int v59 = *(_DWORD *)(v20 + 16);
  uint64_t v26 = *(void *)(v20 + 24);
  long long v58 = *(_OWORD *)(v20 + 32);
  long long v57 = *(_OWORD *)(v20 + 48);
  uint64_t v28 = *(void *)(v20 + 64);
  uint64_t v27 = *(void *)(v20 + 72);
  char v29 = *(unsigned char *)(v20 + 80);
  char v30 = *(unsigned char *)(v20 + 81);
  uint64_t v31 = *(void *)(v20 + 88);
  type metadata accessor for External<()>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(void, uint64_t))type metadata accessor for MutableBox);
  uint64_t v32 = swift_allocObject();
  *(_DWORD *)(v32 + 16) = v59;
  *(void *)(v32 + 24) = v26;
  long long v33 = v57;
  *(_OWORD *)(v32 + 32) = v58;
  *(_OWORD *)(v32 + 48) = v33;
  *(void *)(v32 + 64) = v28;
  *(void *)(v32 + 72) = v27;
  *(unsigned char *)(v32 + 80) = v29;
  *(unsigned char *)(v32 + 81) = v30;
  uint64_t v34 = v76;
  *(void *)(v32 + 88) = v31;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v35 = v67;
  uint64_t v36 = v64;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v79 + 16))(v67, v61 + *(int *)(v60 + 36), v64);
  uint64_t v83 = v19;
  LODWORD(v84) = v63;
  uint64_t v85 = v32;
  uint64_t v86 = v23;
  uint64_t v87 = v24;
  uint64_t v88 = v21;
  uint64_t v89 = v22;
  long long v90 = v62;
  uint64_t v91 = v25;
  int v92 = (int)v65;
  uint64_t v37 = v68;
  unsigned int v81 = v68;
  int v82 = v34;
  uint64_t v38 = v66;
  uint64_t v65 = *(void (**)(void *, unsigned char *, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t (*)(_DWORD *), char *, uint64_t, uint64_t))(v66 + 72);
  uint64_t v63 = v19;
  uint64_t v39 = v36;
  swift_retain();
  swift_retain();
  *(void *)&long long v62 = v21;
  swift_bridgeObjectRetain();
  uint64_t v61 = v22;
  swift_bridgeObjectRetain();
  uint64_t v52 = v36;
  unint64_t v40 = v75;
  uint64_t v41 = v71;
  v65(v93, v75, v71, v34, &v83, v37, partial apply for closure #1 in closure #3 in DynamicContainerInfo.makeItem(_:uniqueId:container:disableTransitions:), v80, v52, v38);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  (*(void (**)(unsigned char *, uint64_t))(v79 + 8))(v35, v39);
  uint64_t v79 = v93[0];
  uint64_t v42 = v93[1];
  uint64_t v43 = AssociatedTypeWitness;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v72 + 16))(v78, v41, AssociatedTypeWitness);
  uint64_t v44 = v69;
  uint64_t v45 = v70;
  (*(void (**)(unsigned char *, unsigned char *))(v69 + 16))(v77, v40);
  uint64_t v46 = v43;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  unsigned int v48 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 8);
  id v74 = v74;
  uint64_t result = v48(v46, AssociatedConformanceWitness);
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else
  {
    int v50 = result;
    if (result <= 0x7FFFFFFF)
    {
      type metadata accessor for DynamicContainer._ItemInfo();
      (*(void (**)(unsigned char *, uint64_t))(v44 + 8))(v75, v45);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      uint64_t v83 = v79;
      uint64_t v84 = v42;
      uint64_t v51 = swift_allocObject();
      uint64_t result = DynamicContainer._ItemInfo.init(item:itemLayout:subgraph:uniqueId:viewCount:phase:needsTransitions:outputs:)((uint64_t)v78, (uint64_t)v77, (uint64_t)v74, v76, v50, v56, v54 & 1, &v83);
      *double v55 = v51;
      return result;
    }
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall DynamicContainerInfo.eraseItem(at:)(Swift::Int at)
{
  uint64_t v8 = v1;
  unsigned int v10 = (uint64_t *)(v2 + *(int *)(v1 + 52));
  uint64_t v11 = *v10;
  if ((*v10 & 0xC000000000000001) != 0)
  {
    uint64_t v12 = MEMORY[0x24C523D60](at);
    goto LABEL_5;
  }
  if ((at & 0x8000000000000000) == 0)
  {
    if (*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10) > (unint64_t)at)
    {
      uint64_t v12 = *(void *)(v11 + 8 * at + 32);
      swift_retain();
LABEL_5:
      swift_beginAccess();
      id v3 = (id)*(unsigned __int8 *)(v12 + 84);
      swift_release();
      switch((unint64_t)v3)
      {
        case 1uLL:
          goto LABEL_7;
        case 2uLL:
          --v10[3];
LABEL_7:
          uint64_t v7 = v10[4];
          uint64_t v4 = *(void *)(v8 + 16);
          uint64_t v5 = *(void *)(v8 + 24);
          uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 40))(v4, v5);
          uint64_t v2 = *v10;
          if ((*v10 & 0xC000000000000001) != 0) {
            goto LABEL_21;
          }
          if (at < 0) {
            goto LABEL_31;
          }
          if (*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10) <= (unint64_t)at) {
            goto LABEL_32;
          }
          id v3 = *(id *)(*(void *)(v2 + 8 * at + 32) + 16);
          if (v7 < v6) {
            goto LABEL_11;
          }
          goto LABEL_22;
        default:
          goto LABEL_40;
      }
    }
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  __break(1u);
LABEL_21:
  id v3 = *(id *)(MEMORY[0x24C523D60](at, v2) + 16);
  swift_unknownObjectRelease();
  uint64_t v2 = *v10;
  if (v7 < v6)
  {
LABEL_11:
    if ((v2 & 0xC000000000000001) != 0)
    {
LABEL_33:
      uint64_t v13 = MEMORY[0x24C523D60](at, v2);
LABEL_15:
      specialized Array.remove(at:)(at);
      swift_release();
      *(_DWORD *)(v13 + 72) = 0;
      ++*(_DWORD *)(v13 + 80);
      swift_beginAccess();
      *(unsigned char *)(v13 + 84) = 3;
      if (*(void *)(v13 + 56)) {
        swift_weakAssign();
      }
      *(void *)(v13 + 56) = 0;
      swift_release();
      uint64_t v14 = swift_retain();
      MEMORY[0x24C522D60](v14);
      if (*(void *)((*v10 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((*v10 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        goto LABEL_18;
      }
      goto LABEL_37;
    }
    if ((at & 0x8000000000000000) == 0)
    {
      if (*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10) > (unint64_t)at)
      {
        uint64_t v13 = *(void *)(v2 + 8 * at + 32);
        swift_retain();
        goto LABEL_15;
      }
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x245D9B020);
    }
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_18:
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_release();
    ++v10[4];
    AGSubgraphApply();
    AGSubgraphRemoveChild();
    goto LABEL_29;
  }
LABEL_22:
  if ((v2 & 0xC000000000000001) != 0)
  {
    uint64_t v15 = MEMORY[0x24C523D60](at, v2);
    goto LABEL_26;
  }
  if (at < 0) {
    goto LABEL_36;
  }
  if (*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10) <= (unint64_t)at) {
    goto LABEL_39;
  }
  uint64_t v15 = *(void *)(v2 + 8 * at + 32);
  swift_retain();
LABEL_26:
  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(v5 + 80))(*(unsigned int *)(v15 + 24), v15 + *(void *)(*(void *)v15 + 216), v4, v5);
  if (*(void *)(v15 + 56)) {
    swift_weakAssign();
  }
  specialized Array.remove(at:)(at);
  swift_release();
  uint64_t v16 = swift_release();
  MEMORY[0x270FA5388](v16);
  AGSubgraphApply();
  AGSubgraphInvalidate();
LABEL_29:
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance DynamicContainerInfo<A>()
{
  return specialized DynamicContainerInfo.description.getter();
}

unint64_t protocol witness for Rule.value.getter in conformance DynamicViewPhase@<X0>(int *a1@<X8>)
{
  return DynamicViewPhase.value.getter(*(void *)v1, *(_DWORD *)(v1 + 8), a1);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance DynamicPreferenceCombiner<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return static PreferenceCombiner.initialValue.getter(*(void *)(a1 + 24), a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance DynamicPreferenceCombiner<A>()
{
  return specialized DynamicPreferenceCombiner.description.getter();
}

uint64_t protocol witness for static _AttributeBody._updateDefault(_:) in conformance DynamicPreferenceCombiner<A>(uint64_t a1, uint64_t a2)
{
  v16[1] = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v16 - v7;
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)v16 - v11;
  static PreferenceCombiner.initialValue.getter(v3, (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, AssociatedTypeWitness) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  uint64_t v14 = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 32))(v12, v8, AssociatedTypeWitness);
  MEMORY[0x270FA5388](v14);
  v16[-2] = a2;
  v16[-1] = swift_getWitnessTable();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v12, (uint64_t)partial apply for closure #1 in static Rule._updateDefault(_:), (uint64_t)&v16[-4], AssociatedTypeWitness, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v15);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, AssociatedTypeWitness);
}

void DynamicAnimationListener.__allocating_init()()
{
}

uint64_t DynamicAnimationListener.__ivar_destroyer()
{
  return swift_weakDestroy();
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *__src, char *a2, unint64_t a3, char *__dst, uint64_t (*a5)(void, void))
{
  uint64_t v6 = __dst;
  uint64_t v7 = a2;
  uint64_t v8 = __src;
  int64_t v9 = a2 - __src;
  int64_t v10 = a2 - __src + 3;
  if (a2 - __src >= 0) {
    int64_t v10 = a2 - __src;
  }
  uint64_t v11 = v10 >> 2;
  uint64_t v12 = a3 - (void)a2;
  uint64_t v13 = a3 - (void)a2 + 3;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v13 = a3 - (void)a2;
  }
  uint64_t v14 = v13 >> 2;
  char v29 = __src;
  uint64_t v28 = __dst;
  if (v11 >= v13 >> 2)
  {
    if (v12 >= -3)
    {
      if (__dst != a2 || &a2[4 * v14] <= __dst) {
        memmove(__dst, a2, 4 * v14);
      }
      uint64_t v18 = &v6[4 * v14];
      uint64_t v27 = v18;
      char v29 = v7;
      if (v8 < v7 && v12 >= 4)
      {
        uint64_t v19 = (char *)(a3 - 4);
        uint64_t v20 = v7;
        while (1)
        {
          unsigned int v21 = *((_DWORD *)v20 - 1);
          v20 -= 4;
          char v22 = a5(*((unsigned int *)v18 - 1), v21);
          if (v5) {
            break;
          }
          uint64_t v23 = v19 + 4;
          if (v22)
          {
            if (v23 != v7 || v19 >= v7) {
              *(_DWORD *)uint64_t v19 = *(_DWORD *)v20;
            }
            char v29 = v20;
            if (v20 <= v8) {
              goto LABEL_44;
            }
          }
          else
          {
            uint64_t v27 = v18 - 4;
            if (v23 < v18 || v19 >= v18 || v23 != v18) {
              *(_DWORD *)uint64_t v19 = *((_DWORD *)v18 - 1);
            }
            uint64_t v20 = v7;
            v18 -= 4;
            if (v7 <= v8) {
              goto LABEL_44;
            }
          }
          v19 -= 4;
          uint64_t v7 = v20;
          if (v18 <= v6) {
            goto LABEL_44;
          }
        }
      }
      goto LABEL_44;
    }
  }
  else if (v9 >= -3)
  {
    if (__dst != __src || &__src[4 * v11] <= __dst) {
      memmove(__dst, __src, 4 * v11);
    }
    uint64_t v15 = &v6[4 * v11];
    uint64_t v27 = v15;
    if ((unint64_t)v7 < a3 && v9 >= 4)
    {
      do
      {
        char v16 = a5(*(unsigned int *)v7, *(unsigned int *)v6);
        if (v5) {
          break;
        }
        if (v16)
        {
          uint64_t v17 = v7 + 4;
          if (v8 < v7 || v8 >= v17 || v8 != v7) {
            *(_DWORD *)uint64_t v8 = *(_DWORD *)v7;
          }
        }
        else
        {
          if (v8 != v6) {
            *(_DWORD *)uint64_t v8 = *(_DWORD *)v6;
          }
          v6 += 4;
          uint64_t v28 = v6;
          uint64_t v17 = v7;
        }
        v8 += 4;
        char v29 = v8;
        if (v6 >= v15) {
          break;
        }
        uint64_t v7 = v17;
      }
      while ((unint64_t)v17 < a3);
    }
LABEL_44:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v29, (const void **)&v28, &v27);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(void **a1, const void **a2, void *a3)
{
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  if (v4 <= -16)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    size_t v6 = (v4 + (v4 < 0 ? 0xFuLL : 0)) & 0xFFFFFFFFFFFFFFF0;
    if (result != v3 || result >= &v3[v6])
    {
      return (char *)memmove(result, v3, v6);
    }
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  uint64_t vars8;

  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 15;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -16)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
    {
      return (char *)memmove(result, v3, 16 * v7);
    }
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  uint64_t vars8;

  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 7;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -8)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
    {
      return (char *)memmove(result, v3, 8 * v7);
    }
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  uint64_t vars8;

  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 3;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -4)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 2;
    if (result != v3 || result >= &v3[4 * v7])
    {
      return (char *)memmove(result, v3, 4 * v7);
    }
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;
  uint64_t vars8;

  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  if (v4 <= -96)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    size_t v6 = v4 / 96;
    if (result != v3 || result >= &v3[96 * v6])
    {
      return (char *)memmove(result, v3, 96 * v6);
    }
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;
  uint64_t vars8;

  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  if (v4 <= -24)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    size_t v6 = v4 / 24;
    if (result != v3 || result >= &v3[24 * v6])
    {
      return (char *)memmove(result, v3, 24 * v6);
    }
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  uint64_t vars8;

  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 31;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -32)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 5;
    if (result != v3 || result >= &v3[32 * v7])
    {
      return (char *)memmove(result, v3, 32 * v7);
    }
  }
  return result;
}

uint64_t specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(a1, a2, a3, MEMORY[0x263F073D0]);
}

{
  return specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(a1, a2, a3, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
}

uint64_t specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(unint64_t *a1, unint64_t *a2, uint64_t *a3, uint64_t (*a4)(void))
{
  unint64_t v4 = *a1;
  unint64_t v5 = *a2;
  uint64_t v6 = *a3;
  uint64_t result = a4(0);
  uint64_t v8 = *(void *)(*(void *)(result - 8) + 72);
  if (!v8)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v9 = v6 - v5;
  if (v6 - v5 == 0x8000000000000000 && v8 == -1) {
    goto LABEL_18;
  }
  if (v9 / v8 < 0)
  {
LABEL_19:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v4 < v5 || v4 >= v5 + v9 / v8 * v8)
  {
    return swift_arrayInitWithTakeFrontToBack();
  }
  else if (v4 != v5)
  {
    return swift_arrayInitWithTakeBackToFront();
  }
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew()(void *a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

unint64_t specialized DynamicContainerInfo.description.getter()
{
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 62;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0xD000000000000011;
}

uint64_t specialized DynamicPreferenceCombiner.description.getter()
{
  v0._countAndFlagsBits = static PreferenceKey.readableName.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 0x202BAA88E2;
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1, uint64_t (*a2)(Swift::Int, void))
{
  Swift::Int v4 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v4);
  if (result >= v4)
  {
    if (v4 < 0) {
      goto LABEL_142;
    }
    if ((unint64_t)v4 >= 2)
    {
      Swift::Int v9 = v4;
      uint64_t v10 = 0;
      uint64_t v11 = *a1;
      uint64_t v12 = 1;
LABEL_11:
      Swift::Int result = *(unsigned int *)(v11 + 4 * v12);
      uint64_t v13 = v10;
      while (1)
      {
        uint64_t v14 = (unsigned int *)(v11 + 4 * v13);
        Swift::Int result = a2(result, *v14);
        if (v2) {
          break;
        }
        if (result)
        {
          if (!v11) {
            goto LABEL_147;
          }
          Swift::Int result = v14[1];
          v14[1] = *(_DWORD *)(v11 + 4 * v13);
          *(_DWORD *)(v11 + 4 * v13--) = result;
          if (v13 != -1) {
            continue;
          }
        }
        ++v12;
        ++v10;
        if (v12 != v9) {
          goto LABEL_11;
        }
        return result;
      }
    }
    return result;
  }
  if (v4 >= 0) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = v4 + 1;
  }
  if (v4 < -1) {
    goto LABEL_152;
  }
  Swift::Int v99 = result;
  uint64_t v96 = a1;
  if (v4 < 2)
  {
    uint64_t v15 = (char *)MEMORY[0x263F8EE78];
    uint64_t v100 = MEMORY[0x263F8EE78];
    __dst = (char *)(MEMORY[0x263F8EE78] + 32);
    if (v4 != 1)
    {
      unint64_t v28 = *(void *)(MEMORY[0x263F8EE78] + 16);
LABEL_108:
      if (v28 >= 2)
      {
        uint64_t v85 = *v96;
        do
        {
          unint64_t v86 = v28 - 2;
          if (v28 < 2) {
            goto LABEL_137;
          }
          if (!v85) {
            goto LABEL_151;
          }
          uint64_t v87 = v15;
          uint64_t v88 = v15 + 32;
          uint64_t v89 = *(void *)&v15[16 * v86 + 32];
          uint64_t v90 = *(void *)&v15[16 * v28 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v85 + 4 * v89), (char *)(v85 + 4 * *(void *)&v88[16 * v28 - 16]), v85 + 4 * v90, __dst, a2);
          if (v2) {
            goto LABEL_106;
          }
          if (v90 < v89) {
            goto LABEL_138;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v87 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v87);
          }
          if (v86 >= *((void *)v87 + 2)) {
            goto LABEL_139;
          }
          uint64_t v91 = v87;
          int v92 = v87 + 32;
          uint64_t v93 = &v87[16 * v86 + 32];
          *(void *)uint64_t v93 = v89;
          *((void *)v93 + 1) = v90;
          unint64_t v94 = *((void *)v87 + 2);
          if (v28 > v94) {
            goto LABEL_140;
          }
          uint64_t v15 = v91;
          memmove(&v92[16 * v28 - 16], &v92[16 * v28], 16 * (v94 - v28));
          *((void *)v15 + 2) = v94 - 1;
          unint64_t v28 = v94 - 1;
        }
        while (v94 > 2);
      }
      swift_bridgeObjectRelease();
      *(void *)(v100 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v7 = v6 >> 1;
    uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v8 + 16) = v7;
    uint64_t v100 = v8;
    __dst = (char *)(v8 + 32);
  }
  Swift::Int v16 = 0;
  uint64_t v17 = *a1;
  uint64_t v97 = *a1 + 8;
  uint64_t v95 = *a1 - 4;
  uint64_t v15 = (char *)MEMORY[0x263F8EE78];
  uint64_t v102 = *a1;
  Swift::Int v98 = v4;
  while (1)
  {
    Swift::Int v18 = v16++;
    if (v16 < v4)
    {
      int v19 = a2(*(unsigned int *)(v17 + 4 * v16), *(unsigned int *)(v17 + 4 * v18));
      if (v2)
      {
LABEL_106:
        swift_bridgeObjectRelease();
        *(void *)(v100 + 16) = 0;
        return swift_bridgeObjectRelease();
      }
      int v20 = v19;
      Swift::Int v16 = v18 + 2;
      if (v18 + 2 < v4)
      {
        unsigned int v21 = (unsigned int *)(v97 + 4 * v18);
        while (((v20 ^ a2(*v21, *(v21 - 1))) & 1) == 0)
        {
          ++v21;
          if (v4 == ++v16)
          {
            Swift::Int v16 = v4;
            break;
          }
        }
      }
      uint64_t v17 = v102;
      if (v20)
      {
        if (v16 < v18) {
          goto LABEL_146;
        }
        if (v18 < v16)
        {
          Swift::Int v22 = v16 - 1;
          Swift::Int v23 = v18;
          do
          {
            if (v23 != v22)
            {
              if (!v102) {
                goto LABEL_150;
              }
              int v24 = *(_DWORD *)(v102 + 4 * v23);
              *(_DWORD *)(v102 + 4 * v23) = *(_DWORD *)(v102 + 4 * v22);
              *(_DWORD *)(v102 + 4 * v22) = v24;
            }
            BOOL v59 = ++v23 < v22--;
          }
          while (v59);
        }
      }
    }
    if (v16 >= v4) {
      goto LABEL_45;
    }
    if (__OFSUB__(v16, v18)) {
      goto LABEL_143;
    }
    if (v16 - v18 >= v99) {
      goto LABEL_45;
    }
    if (__OFADD__(v18, v99)) {
      goto LABEL_144;
    }
    Swift::Int v25 = v18 + v99 >= v4 ? v4 : v18 + v99;
    if (v25 < v18) {
      break;
    }
    if (v16 != v25)
    {
      uint64_t v78 = (unsigned int *)(v95 + 4 * v16);
      do
      {
        Swift::Int v79 = *(unsigned int *)(v17 + 4 * v16);
        Swift::Int v80 = v18;
        unsigned int v81 = v78;
        while (1)
        {
          char v82 = a2(v79, *v81);
          if (v2) {
            goto LABEL_106;
          }
          if ((v82 & 1) == 0) {
            break;
          }
          uint64_t v17 = v102;
          if (!v102) {
            goto LABEL_149;
          }
          unsigned int v83 = *v81;
          Swift::Int v79 = v81[1];
          unsigned int *v81 = v79;
          v81[1] = v83;
          --v81;
          if (v16 == ++v80) {
            goto LABEL_103;
          }
        }
        uint64_t v17 = v102;
LABEL_103:
        ++v16;
        ++v78;
      }
      while (v16 != v25);
      Swift::Int v16 = v25;
      if (v25 < v18) {
        goto LABEL_141;
      }
      goto LABEL_46;
    }
LABEL_45:
    if (v16 < v18) {
      goto LABEL_141;
    }
LABEL_46:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v15 + 2) + 1, 1, v15);
    }
    unint64_t v27 = *((void *)v15 + 2);
    unint64_t v26 = *((void *)v15 + 3);
    unint64_t v28 = v27 + 1;
    uint64_t v17 = v102;
    if (v27 >= v26 >> 1)
    {
      uint64_t v84 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v26 > 1), v27 + 1, 1, v15);
      uint64_t v17 = v102;
      uint64_t v15 = v84;
    }
    *((void *)v15 + 2) = v28;
    char v29 = v15 + 32;
    char v30 = &v15[16 * v27 + 32];
    *(void *)char v30 = v18;
    *((void *)v30 + 1) = v16;
    if (v27)
    {
      while (1)
      {
        unint64_t v31 = v28 - 1;
        if (v28 >= 4)
        {
          uint64_t v36 = &v29[16 * v28];
          uint64_t v37 = *((void *)v36 - 8);
          uint64_t v38 = *((void *)v36 - 7);
          BOOL v42 = __OFSUB__(v38, v37);
          uint64_t v39 = v38 - v37;
          if (v42) {
            goto LABEL_126;
          }
          uint64_t v41 = *((void *)v36 - 6);
          uint64_t v40 = *((void *)v36 - 5);
          BOOL v42 = __OFSUB__(v40, v41);
          uint64_t v34 = v40 - v41;
          char v35 = v42;
          if (v42) {
            goto LABEL_127;
          }
          unint64_t v43 = v28 - 2;
          uint64_t v44 = &v29[16 * v28 - 32];
          uint64_t v46 = *(void *)v44;
          uint64_t v45 = *((void *)v44 + 1);
          BOOL v42 = __OFSUB__(v45, v46);
          uint64_t v47 = v45 - v46;
          if (v42) {
            goto LABEL_129;
          }
          BOOL v42 = __OFADD__(v34, v47);
          uint64_t v48 = v34 + v47;
          if (v42) {
            goto LABEL_132;
          }
          if (v48 >= v39)
          {
            uint64_t v66 = &v29[16 * v31];
            uint64_t v68 = *(void *)v66;
            uint64_t v67 = *((void *)v66 + 1);
            BOOL v42 = __OFSUB__(v67, v68);
            uint64_t v69 = v67 - v68;
            if (v42) {
              goto LABEL_136;
            }
            BOOL v59 = v34 < v69;
            goto LABEL_82;
          }
        }
        else
        {
          if (v28 != 3)
          {
            uint64_t v60 = *((void *)v15 + 4);
            uint64_t v61 = *((void *)v15 + 5);
            BOOL v42 = __OFSUB__(v61, v60);
            uint64_t v53 = v61 - v60;
            char v54 = v42;
            goto LABEL_76;
          }
          uint64_t v33 = *((void *)v15 + 4);
          uint64_t v32 = *((void *)v15 + 5);
          BOOL v42 = __OFSUB__(v32, v33);
          uint64_t v34 = v32 - v33;
          char v35 = v42;
        }
        if (v35) {
          goto LABEL_128;
        }
        unint64_t v43 = v28 - 2;
        unint64_t v49 = &v29[16 * v28 - 32];
        uint64_t v51 = *(void *)v49;
        uint64_t v50 = *((void *)v49 + 1);
        BOOL v52 = __OFSUB__(v50, v51);
        uint64_t v53 = v50 - v51;
        char v54 = v52;
        if (v52) {
          goto LABEL_131;
        }
        double v55 = &v29[16 * v31];
        uint64_t v57 = *(void *)v55;
        uint64_t v56 = *((void *)v55 + 1);
        BOOL v42 = __OFSUB__(v56, v57);
        uint64_t v58 = v56 - v57;
        if (v42) {
          goto LABEL_134;
        }
        if (__OFADD__(v53, v58)) {
          goto LABEL_135;
        }
        if (v53 + v58 >= v34)
        {
          BOOL v59 = v34 < v58;
LABEL_82:
          if (v59) {
            unint64_t v31 = v43;
          }
          goto LABEL_84;
        }
LABEL_76:
        if (v54) {
          goto LABEL_130;
        }
        long long v62 = &v29[16 * v31];
        uint64_t v64 = *(void *)v62;
        uint64_t v63 = *((void *)v62 + 1);
        BOOL v42 = __OFSUB__(v63, v64);
        uint64_t v65 = v63 - v64;
        if (v42) {
          goto LABEL_133;
        }
        if (v65 < v53) {
          goto LABEL_93;
        }
LABEL_84:
        unint64_t v70 = v31 - 1;
        if (v31 - 1 >= v28)
        {
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
          goto LABEL_145;
        }
        if (!v17) {
          goto LABEL_148;
        }
        Swift::Int v71 = v16;
        uint64_t v72 = v15;
        uint64_t v73 = &v29[16 * v70];
        uint64_t v74 = *(void *)v73;
        uint64_t v75 = &v29[16 * v31];
        uint64_t v76 = *((void *)v75 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v17 + 4 * *(void *)v73), (char *)(v17 + 4 * *(void *)v75), v17 + 4 * v76, __dst, a2);
        if (v2) {
          goto LABEL_106;
        }
        if (v76 < v74) {
          goto LABEL_123;
        }
        if (v31 > *((void *)v72 + 2)) {
          goto LABEL_124;
        }
        *(void *)uint64_t v73 = v74;
        *(void *)&v29[16 * v70 + 8] = v76;
        unint64_t v77 = *((void *)v72 + 2);
        if (v31 >= v77) {
          goto LABEL_125;
        }
        uint64_t v15 = v72;
        unint64_t v28 = v77 - 1;
        memmove(&v29[16 * v31], v75 + 16, 16 * (v77 - 1 - v31));
        *((void *)v72 + 2) = v77 - 1;
        uint64_t v17 = v102;
        Swift::Int v16 = v71;
        if (v77 <= 2) {
          goto LABEL_93;
        }
      }
    }
    unint64_t v28 = 1;
LABEL_93:
    Swift::Int v4 = v98;
    if (v16 >= v98) {
      goto LABEL_108;
    }
  }
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  __break(1u);
LABEL_151:
  __break(1u);
LABEL_152:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Int specialized MutableCollection<>.sort(by:)(char **a1, uint64_t (*a2)(Swift::Int, void))
{
  Swift::Int v4 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    Swift::Int v4 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v4);
  }
  uint64_t v5 = *((void *)v4 + 2);
  v7[0] = (uint64_t)(v4 + 32);
  v7[1] = v5;
  Swift::Int result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v7, a2);
  *a1 = v4;
  return result;
}

uint64_t specialized _ArrayBufferProtocol.init(copying:)(uint64_t result, uint64_t a2, unint64_t a3)
{
  int64_t v3 = a3 >> 1;
  uint64_t v4 = (a3 >> 1) - a2;
  if (__OFSUB__(a3 >> 1, a2)) {
    goto LABEL_13;
  }
  uint64_t v6 = result;
  if (!v4)
  {
    uint64_t v7 = (void *)MEMORY[0x263F8EE78];
    if (v3 >= a2) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
  type metadata accessor for External<()>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<UInt32>, MEMORY[0x263F8E8F8], MEMORY[0x263F8E0F8]);
  uint64_t v7 = (void *)swift_allocObject();
  Swift::Int result = _swift_stdlib_malloc_size(v7);
  uint64_t v8 = result - 32;
  if (result < 32) {
    uint64_t v8 = result - 29;
  }
  uint64_t v7[2] = v4;
  v7[3] = 2 * (v8 >> 2);
  if (v3 < a2)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
LABEL_6:
  Swift::Int result = (uint64_t)memcpy(v7 + 4, (const void *)(v6 + 4 * a2), 4 * v4);
  if (__OFSUB__(0, a2))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v9 = v7[2];
  BOOL v10 = __OFADD__(a2, v9);
  uint64_t v11 = a2 + v9;
  if (v10)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v11 < a2)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if ((v11 & 0x8000000000000000) == 0) {
    return (uint64_t)v7;
  }
LABEL_17:
  __break(1u);
  return result;
}

void specialized DynamicContainer._ItemInfo.init(subgraph:uniqueId:viewCount:phase:needsTransitions:outputs:)()
{
}

unint64_t lazy protocol witness table accessor for type DynamicContainerID and conformance DynamicContainerID()
{
  unint64_t result = lazy protocol witness table cache variable for type DynamicContainerID and conformance DynamicContainerID;
  if (!lazy protocol witness table cache variable for type DynamicContainerID and conformance DynamicContainerID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DynamicContainerID and conformance DynamicContainerID);
  }
  return result;
}

uint64_t dispatch thunk of DynamicContainerItem.count.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of DynamicContainerItem.needsTransitions.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of DynamicContainerItem.zIndex.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of DynamicContainerItem.matchesIdentity(of:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of static DynamicContainerItem.supportsReuse.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of DynamicContainerItem.canBeReused(by:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of DynamicContainerItem.list.getter(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (*(uint64_t (**)(void))(a2 + 56))();
  return v2 | ((HIDWORD(v2) & 1) << 32);
}

uint64_t dispatch thunk of DynamicContainerItem.viewID.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

ValueMetadata *type metadata accessor for DynamicContainerID()
{
  return &type metadata for DynamicContainerID;
}

ValueMetadata *type metadata accessor for DynamicContainer()
{
  return &type metadata for DynamicContainer;
}

uint64_t assignWithTake for DynamicContainer.Info(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  return a1;
}

ValueMetadata *type metadata accessor for DynamicContainer.Info()
{
  return &type metadata for DynamicContainer.Info;
}

uint64_t method lookup function for DynamicContainer.ItemInfo(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for DynamicContainer.ItemInfo);
}

uint64_t dispatch thunk of DynamicContainer.ItemInfo.__allocating_init(subgraph:uniqueId:viewCount:phase:needsTransitions:outputs:)()
{
  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t dispatch thunk of DynamicContainer.ItemInfo.list.getter()
{
  unint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 176))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of DynamicContainer.ItemInfo.id.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t method lookup function for DynamicContainer._ItemInfo(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for DynamicContainer._ItemInfo);
}

void *initializeBufferWithCopyOfBuffer for DynamicContainerInfo(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  int64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64);
  BOOL v7 = v5 <= 7 && (*(_DWORD *)(v4 + 80) & 0x100000) == 0;
  if (v7
    && (uint64_t v8 = v6 + 7,
        ((((((((((((v6 + 7 + ((v5 + 4) & ~v5)) & 0xFFFFFFFFFFFFFFF8) + 91) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
            + 15) & 0xFFFFFFFFFFFFFFF8)
          + 51) & 0xFFFFFFFFFFFFFFF8)
        + 11) & 0xFFFFFFFFFFFFFFF8 | 5) <= 0x18))
  {
    *a1 = *a2;
    uint64_t v9 = ((unint64_t)a1 + v5 + 4) & ~v5;
    uint64_t v10 = ((unint64_t)a2 + v5 + 4) & ~v5;
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v9, v10);
    unint64_t v11 = (v8 + v9) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v12 = (v8 + v10) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v11 = *(void *)v12;
    *(_DWORD *)(v11 + 8) = *(_DWORD *)(v12 + 8);
    *(void *)(v11 + 16) = *(void *)(v12 + 16);
    *(_DWORD *)(v11 + 24) = *(_DWORD *)(v12 + 24);
    *(_DWORD *)(v11 + 28) = *(_DWORD *)(v12 + 28);
    *(_DWORD *)(v11 + 32) = *(_DWORD *)(v12 + 32);
    *(_DWORD *)(v11 + 36) = *(_DWORD *)(v12 + 36);
    *(void *)(v11 + 40) = *(void *)(v12 + 40);
    *(void *)(v11 + 48) = *(void *)(v12 + 48);
    *(_DWORD *)(v11 + 56) = *(_DWORD *)(v12 + 56);
    *(_DWORD *)(v11 + 60) = *(_DWORD *)(v12 + 60);
    *(_DWORD *)(v11 + 64) = *(_DWORD *)(v12 + 64);
    *(_DWORD *)(v11 + 68) = *(_DWORD *)(v12 + 68);
    *(_DWORD *)(v11 + 72) = *(_DWORD *)(v12 + 72);
    *(_DWORD *)(v11 + 76) = *(_DWORD *)(v12 + 76);
    *(_DWORD *)(v11 + 80) = *(_DWORD *)(v12 + 80);
    unint64_t v13 = (v11 + 91) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v14 = (v12 + 91) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v13 = *(void *)v14;
    *(_DWORD *)(v13 + 8) = *(_DWORD *)(v14 + 8);
    *(_DWORD *)(v13 + 12) = *(_DWORD *)(v14 + 12);
    uint64_t v15 = (void *)((v13 + 23) & 0xFFFFFFFFFFFFFFF8);
    Swift::Int v16 = (void **)((v14 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v17 = *v16;
    *uint64_t v15 = *v16;
    unint64_t v18 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v19 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v18 = *(void *)v19;
    *(void *)(v18 + 8) = *(void *)(v19 + 8);
    *(void *)(v18 + 16) = *(void *)(v19 + 16);
    *(void *)(v18 + 24) = *(void *)(v19 + 24);
    *(void *)(v18 + 32) = *(void *)(v19 + 32);
    *(unsigned char *)(v18 + 40) = *(unsigned char *)(v19 + 40);
    *(_DWORD *)(v18 + 44) = *(_DWORD *)(v19 + 44);
    int v20 = (_DWORD *)((v19 + 51) & 0xFFFFFFFFFFFFFFF8);
    unsigned int v21 = (_DWORD *)((v18 + 51) & 0xFFFFFFFFFFFFFFF8);
    *unsigned int v21 = *v20;
    v21[1] = v20[1];
    unint64_t v22 = ((unint64_t)v21 + 11) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v23 = ((unint64_t)v20 + 11) & 0xFFFFFFFFFFFFFFF8;
    *(_DWORD *)unint64_t v22 = *(_DWORD *)v23;
    *(unsigned char *)(v22 + 4) = *(unsigned char *)(v23 + 4);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v24 = v17;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v25 = *(void *)a2;
    *int64_t v3 = *(void *)a2;
    int64_t v3 = (void *)(v25 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
    swift_retain();
  }
  return v3;
}

_DWORD *assignWithCopy for DynamicContainerInfo(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 24;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = ((unint64_t)a1 + v6 + 4) & ~v6;
  uint64_t v8 = ((unint64_t)a2 + v6 + 4) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 24))(v7, v8);
  uint64_t v9 = *(void *)(v5 + 40) + 7;
  unint64_t v10 = (v9 + v7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = (v9 + v8) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v10 = *(void *)v11;
  swift_retain();
  swift_release();
  *(_DWORD *)(v10 + 8) = *(_DWORD *)(v11 + 8);
  *(void *)(v10 + 16) = *(void *)(v11 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(v10 + 24) = *(_DWORD *)(v11 + 24);
  *(_DWORD *)(v10 + 28) = *(_DWORD *)(v11 + 28);
  *(_DWORD *)(v10 + 32) = *(_DWORD *)(v11 + 32);
  *(_DWORD *)(v10 + 36) = *(_DWORD *)(v11 + 36);
  *(void *)(v10 + 40) = *(void *)(v11 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v10 + 48) = *(void *)(v11 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(v10 + 56) = *(_DWORD *)(v11 + 56);
  *(_DWORD *)(v10 + 60) = *(_DWORD *)(v11 + 60);
  *(_DWORD *)(v10 + 64) = *(_DWORD *)(v11 + 64);
  *(_DWORD *)(v10 + 68) = *(_DWORD *)(v11 + 68);
  *(_DWORD *)(v10 + 72) = *(_DWORD *)(v11 + 72);
  *(_DWORD *)(v10 + 76) = *(_DWORD *)(v11 + 76);
  *(_DWORD *)(v10 + 80) = *(_DWORD *)(v11 + 80);
  unint64_t v12 = (v10 + 91) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = (v11 + 91) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v12 = *(void *)v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(v12 + 8) = *(_DWORD *)(v13 + 8);
  *(_DWORD *)(v12 + 12) = *(_DWORD *)(v13 + 12);
  unint64_t v14 = (void **)((v12 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v15 = (void **)((v13 + 23) & 0xFFFFFFFFFFFFFFF8);
  Swift::Int v16 = *v15;
  uint64_t v17 = *v14;
  unsigned int *v14 = *v15;
  id v18 = v16;

  unint64_t v19 = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v19 = *(void *)v20;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v19 + 8) = *(void *)(v20 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v19 + 16) = *(void *)(v20 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v19 + 24) = *(void *)(v20 + 24);
  *(void *)(v19 + 32) = *(void *)(v20 + 32);
  *(unsigned char *)(v19 + 40) = *(unsigned char *)(v20 + 40);
  *(_DWORD *)(v19 + 44) = *(_DWORD *)(v20 + 44);
  unsigned int v21 = (_DWORD *)((v20 + 51) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v22 = (_DWORD *)((v19 + 51) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v22 = *v21;
  v22[1] = v21[1];
  unint64_t v23 = ((unint64_t)v22 + 11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v24 = ((unint64_t)v21 + 11) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)unint64_t v23 = *(_DWORD *)v24;
  *(unsigned char *)(v23 + 4) = *(unsigned char *)(v24 + 4);
  return a1;
}

_DWORD *initializeWithTake for DynamicContainerInfo(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 32;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = ((unint64_t)a1 + v6 + 4) & ~v6;
  uint64_t v8 = ((unint64_t)a2 + v6 + 4) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v7, v8);
  uint64_t v9 = *(void *)(v5 + 32) + 7;
  unint64_t v10 = (v9 + v7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = (v9 + v8) & 0xFFFFFFFFFFFFFFF8;
  long long v12 = *(_OWORD *)(v11 + 16);
  *(_OWORD *)unint64_t v10 = *(_OWORD *)v11;
  *(_OWORD *)(v10 + 16) = v12;
  long long v14 = *(_OWORD *)(v11 + 48);
  long long v13 = *(_OWORD *)(v11 + 64);
  long long v15 = *(_OWORD *)(v11 + 32);
  *(_DWORD *)(v10 + 80) = *(_DWORD *)(v11 + 80);
  *(_OWORD *)(v10 + 48) = v14;
  *(_OWORD *)(v10 + 64) = v13;
  *(_OWORD *)(v10 + 32) = v15;
  Swift::Int v16 = (_OWORD *)((v10 + 91) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v17 = (_OWORD *)((v11 + 91) & 0xFFFFFFFFFFFFFFF8);
  *Swift::Int v16 = *v17;
  id v18 = (void *)(((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v19 = (void *)(((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v19 = *v18;
  unint64_t v20 = (_OWORD *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v21 = (long long *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
  long long v22 = *v21;
  long long v23 = v21[2];
  v20[1] = v21[1];
  v20[2] = v23;
  *unint64_t v20 = v22;
  unint64_t v24 = (_DWORD *)(((unint64_t)v20 + 51) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v25 = (_DWORD *)(((unint64_t)v21 + 51) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v26 = (unint64_t)v25 + 11;
  *unint64_t v24 = *v25;
  v24[1] = v25[1];
  unint64_t v27 = ((unint64_t)v24 + 11) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)unint64_t v27 = *(_DWORD *)(v26 & 0xFFFFFFFFFFFFFFF8);
  *(unsigned char *)(v27 + 4) = *(unsigned char *)((v26 & 0xFFFFFFFFFFFFFFF8) + 4);
  return a1;
}

_DWORD *assignWithTake for DynamicContainerInfo(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 40;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = ((unint64_t)a1 + v6 + 4) & ~v6;
  uint64_t v8 = ((unint64_t)a2 + v6 + 4) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 40))(v7, v8);
  uint64_t v9 = *(void *)(v5 + 24) + 7;
  unint64_t v10 = (v9 + v7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = (v9 + v8) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v10 = *(void *)v11;
  swift_release();
  *(_DWORD *)(v10 + 8) = *(_DWORD *)(v11 + 8);
  *(void *)(v10 + 16) = *(void *)(v11 + 16);
  swift_release();
  *(_DWORD *)(v10 + 24) = *(_DWORD *)(v11 + 24);
  *(_DWORD *)(v10 + 28) = *(_DWORD *)(v11 + 28);
  *(_DWORD *)(v10 + 32) = *(_DWORD *)(v11 + 32);
  *(_DWORD *)(v10 + 36) = *(_DWORD *)(v11 + 36);
  *(void *)(v10 + 40) = *(void *)(v11 + 40);
  swift_bridgeObjectRelease();
  *(void *)(v10 + 48) = *(void *)(v11 + 48);
  swift_bridgeObjectRelease();
  *(_DWORD *)(v10 + 56) = *(_DWORD *)(v11 + 56);
  *(_DWORD *)(v10 + 60) = *(_DWORD *)(v11 + 60);
  *(_DWORD *)(v10 + 64) = *(_DWORD *)(v11 + 64);
  *(_DWORD *)(v10 + 68) = *(_DWORD *)(v11 + 68);
  *(_DWORD *)(v10 + 72) = *(_DWORD *)(v11 + 72);
  *(_DWORD *)(v10 + 76) = *(_DWORD *)(v11 + 76);
  *(_DWORD *)(v10 + 80) = *(_DWORD *)(v11 + 80);
  unint64_t v12 = (v10 + 91) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = (v11 + 91) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v12 = *(void *)v13;
  swift_bridgeObjectRelease();
  *(_DWORD *)(v12 + 8) = *(_DWORD *)(v13 + 8);
  *(_DWORD *)(v12 + 12) = *(_DWORD *)(v13 + 12);
  long long v14 = (void **)((v12 + 23) & 0xFFFFFFFFFFFFFFF8);
  long long v15 = (void **)((v13 + 23) & 0xFFFFFFFFFFFFFFF8);
  Swift::Int v16 = *v14;
  unsigned int *v14 = *v15;

  unint64_t v17 = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v17 = *(void *)v18;
  swift_bridgeObjectRelease();
  *(void *)(v17 + 8) = *(void *)(v18 + 8);
  swift_bridgeObjectRelease();
  *(void *)(v17 + 16) = *(void *)(v18 + 16);
  swift_bridgeObjectRelease();
  *(void *)(v17 + 24) = *(void *)(v18 + 24);
  *(void *)(v17 + 32) = *(void *)(v18 + 32);
  *(unsigned char *)(v17 + 40) = *(unsigned char *)(v18 + 40);
  *(_DWORD *)(v17 + 44) = *(_DWORD *)(v18 + 44);
  unint64_t v19 = (_DWORD *)((v18 + 51) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v20 = (_DWORD *)((v17 + 51) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v20 = *v19;
  v20[1] = v19[1];
  unint64_t v21 = ((unint64_t)v20 + 11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = ((unint64_t)v19 + 11) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)unint64_t v21 = *(_DWORD *)v22;
  *(unsigned char *)(v21 + 4) = *(unsigned char *)(v22 + 4);
  return a1;
}

uint64_t getEnumTagSinglePayload for DynamicContainerInfo(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v8 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 7;
  if (v7 < a2
    && *((unsigned char *)a1
       + ((((((((((((v8 + ((v6 + 4) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 91) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
             + 15) & 0xFFFFFFFFFFFFFFF8)
           + 51) & 0xFFFFFFFFFFFFFFF8)
         + 11) & 0xFFFFFFFFFFFFFFF8 | 5)))
  {
    return v7 + *a1 + 1;
  }
  uint64_t v10 = ((unint64_t)a1 + v6 + 4) & ~v6;
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(uint64_t))(v4 + 48))(v10);
  }
  unint64_t v11 = *(void *)(((v8 + v10) & 0xFFFFFFFFFFFFFFF8) + 16);
  if (v11 >= 0xFFFFFFFF) {
    LODWORD(v11) = -1;
  }
  return (v11 + 1);
}

double storeEnumTagSinglePayload for DynamicContainerInfo(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + 7;
  size_t v11 = (((((((((((v10 + ((v9 + 4) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 91) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
           + 15) & 0xFFFFFFFFFFFFFFF8)
         + 51) & 0xFFFFFFFFFFFFFFF8)
       + 11) & 0xFFFFFFFFFFFFFFF8 | 5;
  if (v8 >= a2)
  {
    if (v8 < a3) {
      a1[v11] = 0;
    }
    if (a2)
    {
      unint64_t v14 = (unint64_t)&a1[v9 + 4] & ~v9;
      if (v7 < 0x7FFFFFFF)
      {
        unint64_t v16 = (v10 + v14) & 0xFFFFFFFFFFFFFFF8;
        if ((a2 & 0x80000000) != 0)
        {
          *(void *)(v16 + 72) = 0;
          double result = 0.0;
          *(_OWORD *)(v16 + 56) = 0u;
          *(_OWORD *)(v16 + 40) = 0u;
          *(_OWORD *)(v16 + 24) = 0u;
          *(_OWORD *)(v16 + 8) = 0u;
          *(_DWORD *)(v16 + 80) = 0;
          *(void *)unint64_t v16 = a2 ^ 0x80000000;
        }
        else
        {
          *(void *)(v16 + 16) = a2 - 1;
        }
      }
      else
      {
        long long v15 = *(void (**)(unint64_t))(v6 + 56);
        v15(v14);
      }
    }
  }
  else
  {
    int v12 = ~v8 + a2;
    bzero(a1, v11);
    *(_DWORD *)a1 = v12;
    if (v8 < a3) {
      a1[v11] = 1;
    }
  }
  return result;
}

uint64_t base witness table accessor for _AttributeBody in DynamicContainerInfo<A>()
{
  return swift_getWitnessTable();
}

uint64_t sub_245D9D614()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for lessThan #1 <A>(_:_:) in DynamicContainerInfo.updateValue()(unsigned int a1, unsigned int a2)
{
  return lessThan #1 <A>(_:_:) in DynamicContainerInfo.updateValue()(a1, a2, *(void *)(v2 + 32));
}

char *specialized Array.subscript.setter(char *result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, int64_t a6)
{
  if ((a5 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  unint64_t v7 = *(void *)(*(void *)v6 + 16);
  if (v7 < a5 || (uint64_t)v7 < a6) {
    goto LABEL_14;
  }
  if (a6 < 0)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    return result;
  }
  if (*(void *)v6 + 4 * a5 + 32 != a2 + 4 * a3) {
    return specialized Array.replaceSubrange<A>(_:with:)(a5, a6, (uint64_t)result, a2, a3, a4);
  }
  if ((uint64_t)(a4 >> 1) < a3) {
    goto LABEL_16;
  }
  if (a5 != a3 || a4 >> 1 != a6) {
    return specialized Array.replaceSubrange<A>(_:with:)(a5, a6, (uint64_t)result, a2, a3, a4);
  }
  return result;
}

void specialized _ArrayBufferProtocol.init(copying:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  int64_t v3 = a3 >> 1;
  uint64_t v4 = (a3 >> 1) - a2;
  if (__OFSUB__(a3 >> 1, a2)) {
    goto LABEL_13;
  }
  if (!v4)
  {
    uint64_t v6 = (void *)MEMORY[0x263F8EE78];
    if (v3 >= a2) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
  type metadata accessor for External<()>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x263F8EE50] + 8, MEMORY[0x263F8E0F8]);
  uint64_t v6 = (void *)swift_allocObject();
  int64_t v7 = _swift_stdlib_malloc_size(v6);
  uint64_t v8 = v7 - 32;
  if (v7 < 32) {
    uint64_t v8 = v7 - 25;
  }
  v6[2] = v4;
  v6[3] = (2 * (v8 >> 3)) | 1;
  if (v3 < a2)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
LABEL_6:
  type metadata accessor for DynamicContainer.ItemInfo();
  swift_arrayInitWithCopy();
  if (__OFSUB__(0, a2))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v9 = v6[2];
  BOOL v10 = __OFADD__(a2, v9);
  uint64_t v11 = a2 + v9;
  if (v10)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v11 < a2)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v11 < 0) {
LABEL_17:
  }
    __break(1u);
}

uint64_t sub_245D9D808()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_245D9D840()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in DynamicContainerInfo.updateItems(disableTransitions:)(uint64_t a1)
{
  return closure #1 in DynamicContainerInfo.updateItems(disableTransitions:)(a1, *(Swift::Int **)(v1 + 32), *(void *)(v1 + 40), *(unsigned char **)(v1 + 48), *(unsigned char **)(v1 + 56), *(void *)(v1 + 64), *(unsigned __int8 *)(v1 + 72), *(unsigned char **)(v1 + 80), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_245D9D88C()
{
  return swift_deallocObject();
}

void type metadata accessor for External<()>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t sub_245D9D8E8()
{
  return swift_deallocObject();
}

uint64_t sub_245D9D8F8()
{
  return swift_deallocObject();
}

void *type metadata accessor for DynamicViewPhase()
{
  return &unk_26FA52B28;
}

void *type metadata accessor for DynamicTransaction()
{
  return &unk_26FA5A568;
}

unint64_t instantiation function for generic protocol witness table for DynamicTransaction(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type DynamicTransaction and conformance DynamicTransaction();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for DynamicViewPhase(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type DynamicViewPhase and conformance DynamicViewPhase();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t SeparatorShapeStyle._apply(to:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (*(void *)(a1 + 56))
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v2, &v23);
    swift_release_n();
    swift_release_n();
    uint64_t v3 = v24;
    if ((_BYTE)v24 == 0xFF)
    {
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.value<A>(_:for:)(v2, (char *)&v22);
      swift_release_n();
      swift_release_n();
      int v4 = v22;
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.value<A>(_:for:)(v2, (char *)&v22);
      swift_release_n();
      swift_release_n();
      int v5 = v22;
LABEL_19:
      double v16 = 0.08;
      if (!v5) {
        double v16 = 0.0;
      }
      double v17 = 0.29;
      if (v4) {
        double v17 = 0.6;
      }
      double v18 = v17 + v16;
      double v19 = 0.235294118;
      if (v4) {
        double v19 = 0.329411765;
      }
      double v20 = 0.345098039;
      if (!v4) {
        double v20 = 0.262745098;
      }
      LOBYTE(v23) = 0;
      uint64_t v21 = specialized Color.init(_:red:green:blue:opacity:)(&v23, v19, v19, v20, v18);
      Color._apply(to:)(a1, v21);
      return swift_release();
    }
    uint64_t v8 = v23;
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    uint64_t v7 = specialized find<A>(_:key:)(v6);
    if (v7)
    {
      uint64_t v8 = *(void *)(v7 + 72);
      uint64_t v3 = *(void *)(v7 + 80);
      outlined copy of Material?(v8, v3);
    }
    else
    {
      uint64_t v8 = 0;
      uint64_t v3 = 255;
    }
    swift_release_n();
    if ((_BYTE)v3 == 0xFF)
    {
      type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ColorSchemeKey>);
      BloomFilter.init(hashValue:)(v9);
      uint64_t v10 = swift_retain_n();
      uint64_t v11 = specialized find1<A>(_:key:filter:)(v10, v23);
      if (v11) {
        int v4 = *(unsigned __int8 *)(v11 + 72);
      }
      else {
        int v4 = 0;
      }
      swift_release_n();
      type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ColorSchemeContrastKey>);
      BloomFilter.init(hashValue:)(v13);
      uint64_t v14 = swift_retain_n();
      uint64_t v15 = specialized find1<A>(_:key:filter:)(v14, v23);
      if (v15) {
        int v5 = *(unsigned __int8 *)(v15 + 72);
      }
      else {
        int v5 = 0;
      }
      swift_release_n();
      goto LABEL_19;
    }
  }
  *(unsigned char *)(a1 + 105) = 2;
  uint64_t v23 = v8;
  LOBYTE(v24) = v3;
  HIDWORD(v24) = HIDWORD(v3);
  ForegroundMaterialStyle._apply(to:)(a1);

  return outlined consume of Material?(v8, v3);
}

double static SeparatorShapeStyle._makeView<A>(view:inputs:)@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5 = *a2;
  int v6 = *((_DWORD *)a2 + 2);
  uint64_t v7 = a2[2];
  int v8 = *((_DWORD *)a2 + 20);
  int v19 = *a1;
  uint64_t v11 = v5;
  int v12 = v6;
  uint64_t v13 = v7;
  long long v9 = *(_OWORD *)(a2 + 5);
  long long v14 = *(_OWORD *)(a2 + 3);
  long long v15 = v9;
  long long v16 = *(_OWORD *)(a2 + 7);
  uint64_t v17 = a2[9];
  int v18 = v8;
  return static ShapeStyle.legacyMakeShapeView<A>(view:inputs:)(&v19, (uint64_t)&v11, &type metadata for SeparatorShapeStyle, a3, (uint64_t)&protocol witness table for SeparatorShapeStyle, a4, a5);
}

uint64_t protocol witness for ShapeStyle._apply(to:) in conformance SeparatorShapeStyle(uint64_t a1)
{
  return SeparatorShapeStyle._apply(to:)(a1);
}

unsigned char *static SeparatorShapeStyle._apply(to:)(unsigned char *result)
{
  *unint64_t result = 1;
  return result;
}

uint64_t EnvironmentValues.defaultSeparatorShapeStyle.getter()
{
  uint64_t v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v2 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    swift_release_n();
    swift_release_n();
    return v2;
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    uint64_t v5 = specialized closure #1 in PropertyList.subscript.getter(v4);
    swift_release_n();
    return v5;
  }
}

uint64_t key path getter for EnvironmentValues.defaultSeparatorShapeStyle : EnvironmentValues@<X0>(uint64_t *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    int v4 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    swift_release_n();
  }
  else
  {
    uint64_t v5 = swift_retain_n();
    int v4 = specialized closure #1 in PropertyList.subscript.getter(v5);
  }
  uint64_t result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t EnvironmentValues.defaultSeparatorShapeStyle.setter(int a1)
{
  uint64_t v3 = *v1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, a1);
  swift_release();
  if (v1[1])
  {
    uint64_t v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

void (*EnvironmentValues.defaultSeparatorShapeStyle.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    int v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    int v5 = specialized closure #1 in PropertyList.subscript.getter(v6);
  }
  swift_release_n();
  v3[4] = 0;
  *((_DWORD *)v3 + 10) = v5;
  return EnvironmentValues.defaultSeparatorShapeStyle.modify;
}

void EnvironmentValues.defaultSeparatorShapeStyle.modify(uint64_t a1)
{
  uint64_t v1 = *(void ***)a1;
  int v2 = *(_DWORD *)(*(void *)a1 + 40);
  uint64_t v3 = *(uint64_t **)(*(void *)a1 + 24);
  uint64_t v4 = *v3;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v3, v2);
  swift_release();
  if (v3[1])
  {
    uint64_t v5 = *v1[3];
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v5);
    swift_release();
    swift_release();
  }
  swift_release();

  free(v1);
}

void protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.DefaultSeparatorShapeStyleKey(_DWORD *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_245D9E0EC(int *a1)
{
  return EnvironmentValues.defaultSeparatorShapeStyle.setter(*a1);
}

ValueMetadata *type metadata accessor for SeparatorShapeStyle()
{
  return &type metadata for SeparatorShapeStyle;
}

ValueMetadata *type metadata accessor for EnvironmentValues.DefaultSeparatorShapeStyleKey()
{
  return &type metadata for EnvironmentValues.DefaultSeparatorShapeStyleKey;
}

BOOL _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI11ColorSchemeO_s5NeverOytTB503_s7c45UI26_PreferenceWritingModifierVA2A23PreferredeF98KeyVRszrlE0gH3Env33_E52508E85535897B9A366B470195B29DLLV5valueAA17EnvironmentValuesVvgyAA0gH0OXEfU_AD17EnvironmentValuesVTf1cn_n(unsigned __int8 a1, uint64_t *a2)
{
  int v2 = a1;
  if (a1 != 2)
  {
    char v4 = a1 & 1;
    uint64_t v5 = *a2;
    swift_retain_n();
    specialized closure #1 in PropertyList.subscript.setter(a2, v4);
    swift_release();
    if (a2[1])
    {
      uint64_t v6 = *a2;
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v5, v6);
      swift_release();
      swift_release();
    }
    swift_release();
  }
  return v2 == 2;
}

uint64_t protocol witness for static UnaryLayout.makeViewImpl(modifier:inputs:body:) in conformance IgnoresAutomaticPaddingLayout@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, long long *)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = *a1;
  long long v5 = *(_OWORD *)(a2 + 48);
  void v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  int v9 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static UnaryLayout<>.makeViewImpl(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t specialized static UnaryLayout<>.makeViewImpl(modifier:inputs:body:)@<X0>(unsigned int a1@<W0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X3>, uint64_t a4@<X8>)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  long long v5 = *(_OWORD *)(a2 + 32);
  long long v53 = *(_OWORD *)(a2 + 16);
  long long v54 = v5;
  long long v52 = *(_OWORD *)a2;
  int v6 = DWORD1(v5);
  if ((BYTE4(v5) & 0x22) != 0)
  {
    swift_beginAccess();
    unsigned int v8 = *MEMORY[0x263F288F8];
    *(void *)&long long v47 = __PAIR64__(*(_DWORD *)(v53 + 16), a1);
    DWORD2(v47) = v8;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    _s7SwiftUI17UnaryLayoutEngine33_1C3B77B617AD058A6802F719E38F5D79LLVyAA023IgnoresAutomaticPaddingD033_47C1BD8C61550BB60F4F3D12F752D53DLLVGMaTm_0(0, &lazy cache variable for type metadata for UnaryLayoutComputer<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout and conformance AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, (uint64_t)&type metadata for AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutComputer);
    lazy protocol witness table accessor for type UnaryLayoutComputer<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout> and conformance UnaryLayoutComputer<A>();
    unsigned int v9 = Attribute.init<A>(body:value:flags:update:)();
    uint64_t v10 = *(void *)a2;
    int v38 = *(_DWORD *)(a2 + 8);
    uint64_t v11 = *(void *)(a2 + 16);
    uint64_t v12 = *(void *)(a2 + 24);
    uint64_t v13 = *(void *)(a2 + 40);
    uint64_t v43 = *(void *)(a2 + 48);
    uint64_t v14 = *(void *)(a2 + 56);
    int v15 = *(_DWORD *)(a2 + 64);
    int OffsetAttribute2 = *(_DWORD *)(a2 + 72);
    int v39 = *(_DWORD *)(a2 + 68);
    uint64_t v17 = *(void *)(a2 + 76);
    unsigned int v42 = v9;
    if ((v6 & 0x20) != 0)
    {
      int v36 = *(_DWORD *)(a2 + 36);
      int v35 = *(_DWORD *)(a2 + 32);
      uint64_t v37 = *(void *)(a2 + 40);
      uint64_t v23 = *(void *)(a2 + 16);
      uint64_t v24 = *(void *)a2;
      unsigned int v25 = v9;
      uint64_t KeyPath = swift_getKeyPath();
      swift_beginAccess();
      outlined retain of _ViewInputs(a2);
      outlined retain of _GraphInputs((uint64_t)&v52);
      specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
      swift_endAccess();
      outlined release of _GraphInputs((uint64_t)&v52);
      swift_release();
      *((void *)&v47 + 1) = __PAIR64__(v8, v25);
      uint64_t v10 = v24;
      uint64_t v11 = v23;
      uint64_t v13 = v37;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      _s7SwiftUI17UnaryLayoutEngine33_1C3B77B617AD058A6802F719E38F5D79LLVyAA023IgnoresAutomaticPaddingD033_47C1BD8C61550BB60F4F3D12F752D53DLLVGMaTm_0(0, &lazy cache variable for type metadata for UnaryChildGeometry<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout and conformance AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, (uint64_t)&type metadata for AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
      lazy protocol witness table accessor for type UnaryChildGeometry<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout> and conformance UnaryChildGeometry<A>();
      Attribute.init<A>(body:value:flags:update:)();
      int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
      LODWORD(v47) = v15;
      DWORD1(v47) = AGGraphCreateOffsetAttribute2();
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      lazy protocol witness table accessor for type LayoutPositionQuery and conformance LayoutPositionQuery();
      int v15 = Attribute.init<A>(body:value:flags:update:)();
      int v18 = v35 | 0x18;
      int v19 = v36 | 2;
    }
    else
    {
      int v18 = v54;
      outlined retain of _ViewInputs(a2);
      int v19 = v6;
    }
    *(void *)&long long v47 = v10;
    DWORD2(v47) = v38;
    *(void *)&long long v48 = v11;
    *((void *)&v48 + 1) = v12;
    *(void *)&long long v49 = __PAIR64__(v19, v18);
    *((void *)&v49 + 1) = v13;
    *(void *)&long long v50 = v43;
    *((void *)&v50 + 1) = v14;
    *(_DWORD *)uint64_t v51 = v15;
    *(_DWORD *)&v51[4] = v39;
    *(_DWORD *)&v51[8] = OffsetAttribute2;
    *(void *)&v51[12] = v17;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    closure #1 in static AutomaticPaddingViewModifier._makeView(modifier:inputs:body:)((uint64_t *)&v47, a3, (uint64_t)&v44);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v27 = swift_release();
    uint64_t v28 = v44;
    int v29 = v45;
    unsigned int v30 = v46;
    if ((v6 & 0x20) != 0)
    {
      MEMORY[0x270FA5388](v27);
      MEMORY[0x270FA5388](v31);
      uint64_t v32 = AGGraphMutateAttribute();
      MEMORY[0x270FA5388](v32);
      _s7SwiftUI17UnaryLayoutEngine33_1C3B77B617AD058A6802F719E38F5D79LLVyAA023IgnoresAutomaticPaddingD033_47C1BD8C61550BB60F4F3D12F752D53DLLVGMaTm_0(0, &lazy cache variable for type metadata for UnaryChildGeometry<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout and conformance AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, (uint64_t)&type metadata for AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
      MEMORY[0x270FA5388](v33);
      AGGraphMutateAttribute();
    }
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
    unsigned int v34 = v42;
    if ((v6 & 2) == 0) {
      unsigned int v34 = v30;
    }
    *(void *)a4 = v28;
    *(_DWORD *)(a4 + 8) = v29 | ((v6 & 2) << 6);
    *(_DWORD *)(a4 + 12) = v34;
  }
  else
  {
    long long v20 = *(_OWORD *)(a2 + 48);
    long long v49 = *(_OWORD *)(a2 + 32);
    long long v50 = v20;
    *(_OWORD *)uint64_t v51 = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v51[16] = *(_DWORD *)(a2 + 80);
    long long v21 = *(_OWORD *)(a2 + 16);
    long long v47 = *(_OWORD *)a2;
    long long v48 = v21;
    closure #1 in static AutomaticPaddingViewModifier._makeView(modifier:inputs:body:)((uint64_t *)&v47, a3, a4);
    return swift_release();
  }
  return result;
}

uint64_t specialized static UnaryLayout<>.makeViewImpl(modifier:inputs:body:)@<X0>(unsigned int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v76 = *MEMORY[0x263EF8340];
  long long v5 = *(_OWORD *)(a2 + 32);
  long long v64 = *(_OWORD *)(a2 + 16);
  long long v65 = v5;
  long long v63 = *(_OWORD *)a2;
  int v6 = DWORD1(v5);
  if ((BYTE4(v5) & 0x22) != 0)
  {
    swift_beginAccess();
    int v8 = *MEMORY[0x263F288F8];
    unint64_t v66 = __PAIR64__(*(_DWORD *)(v64 + 16), a1);
    int v67 = v8;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    _s7SwiftUI17UnaryLayoutEngine33_1C3B77B617AD058A6802F719E38F5D79LLVyAA023IgnoresAutomaticPaddingD033_47C1BD8C61550BB60F4F3D12F752D53DLLVGMaTm_0(0, &lazy cache variable for type metadata for UnaryLayoutComputer<_FrameLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _FrameLayout and conformance _FrameLayout, (uint64_t)&type metadata for _FrameLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutComputer);
    lazy protocol witness table accessor for type UnaryLayoutComputer<_FrameLayout> and conformance UnaryLayoutComputer<A>();
    int v9 = Attribute.init<A>(body:value:flags:update:)();
    unint64_t v47 = *(void *)a2;
    int v10 = v6;
    int v11 = *(_DWORD *)(a2 + 8);
    unsigned int v40 = *(_DWORD *)(a2 + 28);
    unsigned int v41 = *(_DWORD *)(a2 + 24);
    uint64_t v52 = *(void *)(a2 + 40);
    uint64_t v53 = *(void *)(a2 + 16);
    uint64_t v51 = *(void *)(a2 + 48);
    unsigned int v12 = *(_DWORD *)(a2 + 64);
    unsigned int v42 = *(_DWORD *)(a2 + 60);
    unsigned int v43 = *(_DWORD *)(a2 + 56);
    unsigned int OffsetAttribute2 = *(_DWORD *)(a2 + 72);
    unsigned int v46 = *(_DWORD *)(a2 + 76);
    unsigned int v44 = *(_DWORD *)(a2 + 68);
    int v45 = *(_DWORD *)(a2 + 80);
    int v48 = v9;
    char v49 = v10;
    if ((v10 & 0x20) != 0)
    {
      int v23 = v9;
      int v37 = *(_DWORD *)(a2 + 36);
      int v39 = *(_DWORD *)(a2 + 32);
      unsigned int v24 = *(_DWORD *)(a2 + 64);
      uint64_t KeyPath = swift_getKeyPath();
      swift_beginAccess();
      outlined retain of _ViewInputs(a2);
      outlined retain of _GraphInputs((uint64_t)&v63);
      unsigned int v26 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
      swift_endAccess();
      outlined release of _GraphInputs((uint64_t)&v63);
      swift_release();
      unint64_t v66 = __PAIR64__(v26, OffsetAttribute2);
      int v67 = v23;
      int v68 = v8;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      _s7SwiftUI17UnaryLayoutEngine33_1C3B77B617AD058A6802F719E38F5D79LLVyAA023IgnoresAutomaticPaddingD033_47C1BD8C61550BB60F4F3D12F752D53DLLVGMaTm_0(0, &lazy cache variable for type metadata for UnaryChildGeometry<_FrameLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _FrameLayout and conformance _FrameLayout, (uint64_t)&type metadata for _FrameLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
      lazy protocol witness table accessor for type UnaryChildGeometry<_FrameLayout> and conformance UnaryChildGeometry<A>();
      Attribute.init<A>(body:value:flags:update:)();
      unsigned int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
      unint64_t v66 = __PAIR64__(AGGraphCreateOffsetAttribute2(), v24);
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      lazy protocol witness table accessor for type LayoutPositionQuery and conformance LayoutPositionQuery();
      unsigned int v12 = Attribute.init<A>(body:value:flags:update:)();
      int v38 = v39 | 0x18;
      int v10 = v37 | 2;
    }
    else
    {
      int v38 = v65;
      outlined retain of _ViewInputs(a2);
    }
    unsigned int v27 = AGGraphCreateOffsetAttribute2();
    int ShouldRecordTree = AGSubgraphShouldRecordTree();
    if (ShouldRecordTree) {
      AGSubgraphBeginTreeElement();
    }
    *(void *)&long long v57 = v47;
    DWORD2(v57) = v11;
    *(void *)&long long v58 = v53;
    *((void *)&v58 + 1) = __PAIR64__(v40, v41);
    DWORD1(v59) = v10;
    *((void *)&v59 + 1) = v52;
    *(void *)&long long v60 = v51;
    *((void *)&v60 + 1) = __PAIR64__(v42, v43);
    *(void *)&long long v61 = __PAIR64__(v44, v12);
    *((void *)&v61 + 1) = __PAIR64__(v46, OffsetAttribute2);
    int v62 = v45;
    unint64_t v66 = v47;
    int v67 = v11;
    *(void *)uint64_t v69 = v53;
    *(_DWORD *)&v69[8] = v41;
    *(void *)&v69[12] = v40;
    int v70 = v10;
    uint64_t v71 = v52;
    uint64_t v72 = v51;
    *(void *)&long long v73 = __PAIR64__(v42, v43);
    *((void *)&v73 + 1) = __PAIR64__(v44, v12);
    unint64_t v74 = __PAIR64__(v46, OffsetAttribute2);
    int v75 = v45;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized static EnvironmentalView._makeView(view:inputs:)(v27, (uint64_t)&v66, &v54);
    LODWORD(v59) = v38;
    if (ShouldRecordTree)
    {
      specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(&v54, &v57);
      AGSubgraphEndTreeElement();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v29 = swift_release();
    double v30 = v54;
    int v31 = v55;
    int v32 = v56;
    if ((v49 & 0x20) != 0)
    {
      MEMORY[0x270FA5388](v29);
      MEMORY[0x270FA5388](v33);
      uint64_t v34 = AGGraphMutateAttribute();
      MEMORY[0x270FA5388](v34);
      _s7SwiftUI17UnaryLayoutEngine33_1C3B77B617AD058A6802F719E38F5D79LLVyAA023IgnoresAutomaticPaddingD033_47C1BD8C61550BB60F4F3D12F752D53DLLVGMaTm_0(0, &lazy cache variable for type metadata for UnaryChildGeometry<_FrameLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _FrameLayout and conformance _FrameLayout, (uint64_t)&type metadata for _FrameLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryChildGeometry);
      MEMORY[0x270FA5388](v35);
      AGGraphMutateAttribute();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
    if ((v49 & 2) != 0) {
      int v36 = v48;
    }
    else {
      int v36 = v32;
    }
    *(double *)a3 = v30;
    *(_DWORD *)(a3 + 8) = v31 | ((v49 & 2) << 6);
    *(_DWORD *)(a3 + 12) = v36;
  }
  else
  {
    unsigned int v14 = AGGraphCreateOffsetAttribute2();
    int v15 = AGSubgraphShouldRecordTree();
    if (v15) {
      AGSubgraphBeginTreeElement();
    }
    int v16 = *(_DWORD *)(a2 + 80);
    uint64_t v17 = *(void *)(a2 + 48);
    long long v18 = *(_OWORD *)(a2 + 56);
    unint64_t v19 = *(void *)(a2 + 72);
    long long v20 = *(_OWORD *)(a2 + 48);
    long long v59 = *(_OWORD *)(a2 + 32);
    long long v60 = v20;
    long long v61 = *(_OWORD *)(a2 + 64);
    int v62 = v16;
    long long v21 = *(_OWORD *)(a2 + 16);
    long long v57 = *(_OWORD *)a2;
    long long v58 = v21;
    unint64_t v66 = v63;
    int v67 = DWORD2(v63);
    *(_OWORD *)uint64_t v69 = v64;
    *(_DWORD *)&v69[16] = 0;
    int v70 = v6;
    uint64_t v71 = *((void *)&v65 + 1);
    uint64_t v72 = v17;
    long long v73 = v18;
    unint64_t v74 = v19;
    int v75 = v16;
    outlined retain of _ViewInputs(a2);
    specialized static EnvironmentalView._makeView(view:inputs:)(v14, (uint64_t)&v66, (double *)a3);
    LODWORD(v59) = v65;
    if (v15)
    {
      specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(a3, &v57);
      AGSubgraphEndTreeElement();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      return swift_release();
    }
    else
    {
      return outlined release of _ViewInputs(a2);
    }
  }
  return result;
}

uint64_t protocol witness for static UnaryLayout.makeViewImpl(modifier:inputs:body:) in conformance AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, long long *)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = *a1;
  long long v5 = *(_OWORD *)(a2 + 48);
  void v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  int v9 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static UnaryLayout<>.makeViewImpl(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t protocol witness for static UnaryLayout.makeViewImpl(modifier:inputs:body:) in conformance _FixedSizeLayout@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, long long *)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = *a1;
  long long v5 = *(_OWORD *)(a2 + 48);
  void v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  int v9 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static UnaryLayout<>.makeViewImpl(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t protocol witness for static UnaryLayout.makeViewImpl(modifier:inputs:body:) in conformance _PaddingLayout@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, long long *)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = *a1;
  long long v5 = *(_OWORD *)(a2 + 48);
  void v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  int v9 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static UnaryLayout<>.makeViewImpl(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t protocol witness for static UnaryLayout.makeViewImpl(modifier:inputs:body:) in conformance MoveTransition.MoveLayout@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, long long *)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = *a1;
  long long v5 = *(_OWORD *)(a2 + 48);
  void v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  int v9 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static UnaryLayout<>.makeViewImpl(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t specialized GeometryEffectTransform.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Value = AGGraphGetValue();
  uint64_t v3 = *(void *)Value;
  double v4 = *(double *)(Value + 8);
  double v5 = *(double *)(Value + 16);
  double v41 = *(double *)(Value + 32);
  double v42 = *(double *)(Value + 24);
  long long v6 = (double *)AGGraphGetValue();
  double v39 = v6[1] - v5;
  double v40 = *v6 - v4;
  uint64_t v7 = AGGraphGetValue();
  CGFloat v8 = *(double *)v7;
  double v9 = *(double *)(v7 + 8);
  double v10 = *(double *)(v7 + 16);
  type metadata accessor for CGSize(0);
  int v11 = (double *)AGGraphGetValue();
  double v12 = *v11;
  double v13 = v11[1];
  CGAffineTransformMakeTranslation(&v49, v9 * *v11, v10 * v13);
  CGAffineTransformRotate(&v46, &v49, v8);
  CGAffineTransform v49 = v46;
  CGAffineTransformTranslate(&v46, &v49, -(v9 * v12), -(v10 * v13));
  double a = v46.a;
  double b = v46.b;
  double c = v46.c;
  double d = v46.d;
  double tx = v46.tx;
  CGFloat ty = v46.ty;
  v49.double a = v46.a;
  v49.double b = v46.b;
  v49.double c = 0.0;
  v49.double d = v46.c;
  v49.double tx = v46.d;
  v49.CGFloat ty = 0.0;
  CGFloat v50 = v46.tx;
  CGFloat v51 = v46.ty;
  uint64_t v52 = 0x3FF0000000000000;
  if (*(unsigned char *)AGGraphGetValue() == 1)
  {
    uint64_t v20 = *(void *)AGGraphGetValue();
    v46.double a = -1.0;
    memset(&v46.b, 0, 24);
    *(_OWORD *)&v46.double tx = xmmword_2461BCA80;
    uint64_t v47 = v20;
    long long v48 = xmmword_2461C55F0;
    ProjectionTransform.concatenating(_:)(&v49.a, v44);
    ProjectionTransform.concatenating(_:)(&v46.a, v45);
    double a = v45[0];
    double b = v45[1];
    double v21 = v45[2];
    double c = v45[3];
    double d = v45[4];
    double v22 = v45[5];
    double tx = v45[6];
    double v43 = v45[7];
    double v23 = v45[8];
  }
  else
  {
    double v43 = ty;
    double v23 = 1.0;
    double v21 = 0.0;
    double v22 = 0.0;
  }
  double v24 = v42 - v40;
  double v25 = v41 - v39;
  if (v21 == 0.0 && v22 == 0.0 && v23 == 1.0)
  {
    if (a * d - b * c != 0.0)
    {
      if (a == 1.0 && b == 0.0 && c == 0.0 && d == 1.0)
      {
        double v26 = v24 - tx;
        double v27 = v25 - v43;
        uint64_t result = swift_retain();
        double v29 = v27;
        double v30 = v26;
LABEL_22:
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)a1 = v3;
        *(double *)(a1 + 24) = v30;
        *(double *)(a1 + 32) = v29;
        return result;
      }
      goto LABEL_19;
    }
LABEL_14:
    swift_retain();
    _StringGuts.grow(_:)(28);
    v31._object = (void *)0x800000024621DC20;
    v31._countAndFlagsBits = 0xD00000000000001ALL;
    String.append(_:)(v31);
    _print_unlocked<A, B>(_:_:)();
    specialized static Log.externalWarning(_:)(0, 0xE000000000000000);
    uint64_t result = swift_bridgeObjectRelease();
    double v29 = v41 - v39;
    double v30 = v42 - v40;
    goto LABEL_22;
  }
  if (v21 * (c * v43 - d * tx) + a * (d * v23 - v22 * v43) - b * (c * v23 - v22 * tx) == 0.0) {
    goto LABEL_14;
  }
  _s7SwiftUI17UnaryLayoutEngine33_1C3B77B617AD058A6802F719E38F5D79LLVyAA023IgnoresAutomaticPaddingD033_47C1BD8C61550BB60F4F3D12F752D53DLLVGMaTm_0(0, &lazy cache variable for type metadata for Element<ProjectionTransformElement>, (uint64_t (*)(void))lazy protocol witness table accessor for type ProjectionTransformElement and conformance ProjectionTransformElement, (uint64_t)&type metadata for ProjectionTransformElement, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Element);
  uint64_t v32 = swift_allocObject();
  *(double *)(v32 + 32) = v42 - v40;
  *(double *)(v32 + 40) = v41 - v39;
  *(double *)(v32 + 48) = a;
  *(double *)(v32 + 56) = b;
  *(double *)(v32 + 64) = v21;
  *(double *)(v32 + 72) = c;
  *(double *)(v32 + 80) = d;
  *(double *)(v32 + 88) = v22;
  *(double *)(v32 + 96) = tx;
  *(double *)(v32 + 104) = v43;
  *(double *)(v32 + 112) = v23;
  uint64_t v33 = 1;
  *(unsigned char *)(v32 + 120) = 1;
  *(void *)(v32 + 16) = v3;
  if (!v3) {
    goto LABEL_21;
  }
  uint64_t v34 = *(void *)(v3 + 24);
  BOOL v35 = __OFADD__(v34, 1);
  uint64_t v33 = v34 + 1;
  if (!v35) {
    goto LABEL_21;
  }
  __break(1u);
LABEL_19:
  double v36 = v24;
  double v37 = v25;
  _s7SwiftUI17UnaryLayoutEngine33_1C3B77B617AD058A6802F719E38F5D79LLVyAA023IgnoresAutomaticPaddingD033_47C1BD8C61550BB60F4F3D12F752D53DLLVGMaTm_0(0, &lazy cache variable for type metadata for Element<AffineTransformElement>, (uint64_t (*)(void))lazy protocol witness table accessor for type AffineTransformElement and conformance AffineTransformElement, (uint64_t)&type metadata for AffineTransformElement, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Element);
  uint64_t result = swift_allocObject();
  uint64_t v32 = result;
  *(double *)(result + 32) = v36;
  *(double *)(result + 40) = v37;
  *(double *)(result + 48) = a;
  *(double *)(result + 56) = b;
  *(double *)(result + 64) = c;
  *(double *)(result + 72) = d;
  *(double *)(result + 80) = tx;
  *(double *)(result + 88) = v43;
  uint64_t v33 = 1;
  *(unsigned char *)(result + 96) = 1;
  *(void *)(result + 16) = v3;
  if (!v3 || (v38 = *(void *)(v3 + 24), BOOL v35 = __OFADD__(v38, 1), v33 = v38 + 1, !v35))
  {
LABEL_21:
    *(void *)(v32 + 24) = v33;
    uint64_t result = swift_retain();
    double v30 = 0.0;
    uint64_t v3 = v32;
    double v29 = 0.0;
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

uint64_t specialized RendererEffectDisplayList.value.getter@<X0>(_WORD *a1@<X8>)
{
  void (*v55)(__int16 *__return_ptr, id, unint64_t);
  unsigned int v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  __int16 v60;
  __int16 *v61;
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  __int16 v65;
  uint64_t v66;
  __int16 *v67;
  __int16 v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  unint64_t v72;
  uint64_t v73;
  char v74;
  unint64_t v75;
  int v76;
  int v77;
  __int16 v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  void (*v84)(__int16 *__return_ptr, uint64_t, unint64_t);
  uint64_t v85;
  unsigned __int16 v86;
  uint64_t v87;
  __int16 v88;
  id v89;
  id v90;
  id v91;
  unsigned int v92;
  unsigned __int8 v93;
  _WORD *v94;
  __int16 v95;
  long long v96;
  long long v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  _WORD *v101;
  __int16 v102;
  char v103;
  int v104;
  unint64_t v105;
  unint64_t v106;
  long long v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unsigned __int16 v112;
  unsigned __int8 v113;
  int v114;
  uint64_t v115;

  uint64_t v115 = *MEMORY[0x263EF8340];
  int v9 = *MEMORY[0x263F288F8];
  uint64_t v10 = MEMORY[0x263F8EE78];
  if (v1[8] == *MEMORY[0x263F288F8])
  {
    unint64_t v11 = 0;
    LOWORD(v12) = 0;
    unint64_t v13 = MEMORY[0x263F8EE78];
    if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)a1 = v10;
    a1[4] = 0;
    *((unsigned char *)a1 + 10) = 0;
    return result;
  }
  uint64_t Value = AGGraphGetValue();
  unint64_t v13 = *(void *)Value;
  unint64_t v11 = *(unsigned __int16 *)(Value + 8);
  LOWORD(v12) = *(unsigned __int8 *)(Value + 10);
  swift_bridgeObjectRetain();
  if (!*(void *)(v13 + 16)) {
    goto LABEL_10;
  }
LABEL_3:
  uint64_t v14 = ++static DisplayList.Version.lastValue;
  if (AGGraphGetCurrentAttribute() == v9)
  {
    __break(1u);
LABEL_58:
    swift_once();
LABEL_30:
    int v70 = static NSAttributedStringKey.updateSchedule;
    objc_msgSend(v89, sel_length, v79);
    if (objc_msgSend(v89, sel_attribute_atIndex_effectiveRange_, v70, 0, 0))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      _sypSgWOhTm_9((uint64_t)&v96, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8);
      uint64_t v71 = *(unsigned char *)(v85 + 256);
      outlined consume of DisplayList.Item.Value(v11, v13);
      swift_release();
      swift_release();
      outlined consume of DisplayList.Item.Value(v11, v13);
      if (v71)
      {
        __int16 v51 = 8;
LABEL_51:
        LOBYTE(v58) = v92;
        goto LABEL_52;
      }
    }
    else
    {
      uint64_t v96 = 0u;
      uint64_t v97 = 0u;
      _sypSgWOhTm_9((uint64_t)&v96, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8);
LABEL_55:
      outlined consume of DisplayList.Item.Value(v11, v13);
      swift_release();
      swift_release();
      outlined consume of DisplayList.Item.Value(v11, v13);
    }
    __int16 v51 = 0;
    goto LABEL_51;
  }
  unint64_t v94 = a1;
  char v82 = v14;
  uint64_t v93 = v12;
  unint64_t v15 = AGCreateWeakAttribute();
  unsigned int v16 = v15;
  unsigned int v81 = HIDWORD(v15);
  unint64_t v17 = AGCreateWeakAttribute();
  unsigned int v18 = v17;
  Swift::Int v80 = HIDWORD(v17);
  unint64_t v19 = AGCreateWeakAttribute();
  unsigned int v20 = v19;
  Swift::Int v79 = HIDWORD(v19);
  unint64_t v21 = AGCreateWeakAttribute();
  unsigned int v22 = v21;
  uint64_t v90 = (id)v13;
  unint64_t v23 = HIDWORD(v21);
  unint64_t v24 = AGCreateWeakAttribute();
  unsigned int v25 = v24;
  unint64_t v86 = v11;
  unint64_t v26 = HIDWORD(v24);
  unint64_t v27 = AGCreateWeakAttribute();
  unsigned int v28 = v27;
  unint64_t v29 = HIDWORD(v27);
  _threadGeometryProxyData();
  uint64_t v105 = __PAIR64__(v81, v16);
  int v106 = __PAIR64__(v80, v18);
  *(void *)&uint64_t v107 = __PAIR64__(v79, v20);
  *((void *)&v107 + 1) = __PAIR64__(v23, v22);
  unint64_t v108 = __PAIR64__(v26, v25);
  long long v109 = __PAIR64__(v29, v28);
  LODWORD(v110) = v82;
  _setThreadGeometryProxyData();
  uint64_t v30 = AGGraphGetValue();
  Swift::String v31 = *(void **)v30;
  uint64_t v32 = *(void *)(v30 + 8);
  uint64_t v33 = *(void *)(v30 + 16);
  uint64_t v34 = *(unsigned int *)(v30 + 24);
  BOOL v35 = (uint64_t *)AGGraphGetValue();
  uint64_t v36 = *v35;
  uint64_t v37 = v35[1];
  uint64_t v38 = swift_allocObject();
  *(void *)(v38 + 16) = v31;
  *(void *)(v38 + 24) = v32;
  *(void *)(v38 + 32) = v33;
  *(void *)(v38 + 40) = v34;
  *(void *)(v38 + 48) = v36;
  *(void *)(v38 + 56) = v37;
  *(_OWORD *)(v38 + 64) = 0u;
  *(_OWORD *)(v38 + 80) = 0u;
  *(_OWORD *)(v38 + 96) = 0u;
  *(_OWORD *)(v38 + 112) = 0u;
  *(_DWORD *)(v38 + 128) = 0;
  *(unsigned char *)(v38 + 132) = 15;
  id v39 = v31;
  _setThreadGeometryProxyData();
  double v40 = (double *)AGGraphGetValue();
  double v41 = *v40;
  double v42 = v40[1];
  double v43 = (double *)AGGraphGetValue();
  *(double *)&unint64_t v44 = v41 - *v43;
  *(double *)&unint64_t v45 = v42 - v43[1];
  CGAffineTransform v46 = (long long *)AGGraphGetValue();
  int v47 = *v1;
  uint64_t v105 = v44;
  int v106 = v45;
  uint64_t v107 = *v46;
  unint64_t v108 = v82;
  long long v109 = v38;
  long long v110 = 0x4000000900000000;
  uint64_t v111 = (unint64_t)v90;
  int v113 = v93;
  char v112 = v86;
  char v114 = v47;
  LOBYTE(v96) = *((unsigned char *)v1 + 36);
  swift_retain();
  DisplayList.Item.canonicalize(options:)((char *)&v96);
  unint64_t v4 = v105;
  unint64_t v5 = v106;
  uint64_t v7 = *((void *)&v107 + 1);
  uint64_t v6 = v107;
  unint64_t v3 = v108;
  unint64_t v11 = v109;
  unint64_t v13 = v110;
  a1 = (_WORD *)v111;
  unsigned int v12 = v112 | (v113 << 16);
  int v9 = v114;
  unint64_t v48 = v110 >> 62;
  if (v110 >> 62 != 3 || (v12 & 0xFFFFFF) != 0 || v110 != 0xC000000000000000 || v111 | v109)
  {
    _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
    uint64_t v53 = swift_allocObject();
    *(_OWORD *)(v53 + 16) = xmmword_2461B9DC0;
    *(void *)(v53 + 32) = v4;
    *(void *)(v53 + 40) = v5;
    *(void *)(v53 + 48) = v6;
    *(void *)(v53 + 56) = v7;
    *(void *)(v53 + 64) = v3;
    *(void *)(v53 + 72) = v11;
    *(void *)(v53 + 80) = v13;
    *(void *)(v53 + 88) = a1;
    *(unsigned char *)(v53 + 98) = BYTE2(v12);
    *(_WORD *)(v53 + 96) = v12;
    *(_DWORD *)(v53 + 100) = v9;
    uint64_t v2 = v53;
    switch((int)v48)
    {
      case 1:
        int v92 = HIWORD(v12);
        switch(BYTE4(v13))
        {
          case 2:
            outlined copy of DisplayList.Item.Value(v11, v13);
            outlined copy of DisplayList.Item.Value(v11, v13);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v11, v13, 2);
            int v56 = (v11 >> 2) & 1;
            break;
          case 3:
            outlined init with copy of AnyTrackedValue(v11 + 16, (uint64_t)&v96);
            uint64_t v72 = v98;
            uint64_t v87 = *((void *)&v97 + 1);
            __swift_project_boxed_opaque_existential_1(&v96, *((uint64_t *)&v97 + 1));
            uint64_t v84 = *(void (**)(__int16 *__return_ptr, uint64_t, unint64_t))(v72 + 56);
            outlined copy of DisplayList.Item.Value(v11, v13);
            outlined copy of DisplayList.Item.Value(v11, v13);
            v84(&v95, v87, v72);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v96);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v11, v13, 3);
            LOWORD(v56) = v95;
            break;
          case 7:
            LOWORD(v56) = *(_WORD *)(v11 + 24);
            outlined copy of DisplayList.Item.Value(v11, v13);
            outlined copy of DisplayList.Item.Value(v11, v13);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v11, v13, 7);
            break;
          case 0xA:
            outlined copy of DisplayList.Item.Value(v11, v13);
            outlined copy of DisplayList.Item.Value(v11, v13);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v11, v13, 10);
            LOWORD(v56) = 4;
            break;
          case 0xC:
            outlined copy of DisplayList.Item.Value(v11, v13);
            outlined copy of DisplayList.Item.Value(v11, v13);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v11, v13, 12);
            LOWORD(v56) = 2;
            break;
          case 0xE:
            outlined copy of DisplayList.Item.Value(v11, v13);
            outlined copy of DisplayList.Item.Value(v11, v13);
            swift_bridgeObjectRelease();
            long long v73 = v11;
            unint64_t v74 = v13;
            LOBYTE(v75) = 14;
            goto LABEL_43;
          case 0xF:
            outlined copy of DisplayList.Item.Value(v11, v13);
            outlined copy of DisplayList.Item.Value(v11, v13);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v11, v13, 15);
            LOWORD(v56) = 64;
            break;
          case 0x10:
            outlined copy of DisplayList.Item.Value(v11, v13);
            outlined copy of DisplayList.Item.Value(v11, v13);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v11, v13, 16);
            LOWORD(v56) = 32;
            break;
          case 0x11:
            (*(void (**)(long long *__return_ptr))(*(void *)v11 + 112))(&v96);
            uint64_t v88 = v96;
            uint64_t v76 = (unsigned __int16)word_26FA429C8;
            unint64_t v77 = (unsigned __int16)word_26FA429CA;
            outlined copy of DisplayList.Item.Value(v11, v13);
            outlined copy of DisplayList.Item.Value(v11, v13);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v11, v13, 17);
            if ((v77 & ~v76) != 0) {
              uint64_t v78 = v77;
            }
            else {
              uint64_t v78 = 0;
            }
            LOWORD(v56) = v88 | v76 | v78;
            break;
          default:
            outlined copy of DisplayList.Item.Value(v11, v13);
            outlined copy of DisplayList.Item.Value(v11, v13);
            swift_bridgeObjectRelease();
            long long v73 = v11;
            unint64_t v74 = v13;
            int v75 = HIDWORD(v13);
LABEL_43:
            outlined consume of DisplayList.Effect(v73, v74, v75);
            LOWORD(v56) = 0;
            break;
        }
        __int16 v51 = v56 | v12;
        goto LABEL_51;
      case 2:
        long long v57 = *(void *)(v11 + 16);
        if (!v57)
        {
          long long v58 = HIWORD(v12);
          __int16 v51 = 128;
          goto LABEL_26;
        }
        long long v58 = HIWORD(v12);
        if (v57 == 1)
        {
          long long v59 = 0;
          __int16 v51 = 128;
LABEL_24:
          unint64_t v66 = v57 - v59;
          int v67 = (__int16 *)(v11 + 40 * v59 + 64);
          do
          {
            int v68 = *v67;
            v67 += 20;
            v51 |= v68;
            --v66;
          }
          while (v66);
          goto LABEL_26;
        }
        long long v60 = 0;
        long long v59 = v57 & 0x7FFFFFFFFFFFFFFELL;
        long long v61 = (__int16 *)(v11 + 104);
        int v62 = 128;
        long long v63 = v57 & 0x7FFFFFFFFFFFFFFELL;
        do
        {
          long long v64 = *(v61 - 20);
          long long v65 = *v61;
          v61 += 40;
          v62 |= v64;
          v60 |= v65;
          v63 -= 2;
        }
        while (v63);
        __int16 v51 = v60 | v62;
        if (v57 != v59) {
          goto LABEL_24;
        }
LABEL_26:
        outlined copy of DisplayList.Item.Value(v11, v13);
        break;
      case 3:
        long long v58 = HIWORD(v12);
        outlined copy of DisplayList.Item.Value(v11, v13);
        __int16 v51 = 0;
        break;
      default:
        int v92 = HIWORD(v12);
        switch(v11 >> 60)
        {
          case 6uLL:
            outlined init with copy of AnyTrackedValue((v11 & 0xFFFFFFFFFFFFFFFLL) + 16, (uint64_t)&v96);
            unint64_t v54 = v98;
            uint64_t v91 = (id)*((void *)&v97 + 1);
            unsigned int v83 = v98;
            __swift_project_boxed_opaque_existential_1(&v96, *((uint64_t *)&v97 + 1));
            int v55 = *(void (**)(__int16 *__return_ptr, id, unint64_t))(v54 + 40);
            outlined copy of DisplayList.Item.Value(v11, v13);
            v55(&v95, v91, v83);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v96);
            __int16 v51 = v95;
            goto LABEL_51;
          case 8uLL:
            uint64_t v69 = *(void *)((v11 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
            if (!*(void *)(v69 + 216)) {
              goto LABEL_33;
            }
            uint64_t v89 = *(id *)(v69 + 216);
            outlined copy of DisplayList.Item.Value(v11, v13);
            outlined copy of DisplayList.Item.Value(v11, v13);
            outlined copy of DisplayList.Item.Value(v11, v13);
            swift_retain();
            uint64_t v85 = v69;
            swift_retain();
            if ((uint64_t)objc_msgSend(v89, sel_length) <= 0) {
              goto LABEL_55;
            }
            if (one-time initialization token for updateSchedule == -1) {
              goto LABEL_30;
            }
            goto LABEL_58;
          case 9uLL:
            __int16 v51 = *(_WORD *)((v11 & 0xFFFFFFFFFFFFFFFLL) + 0x18) | 0x200;
            outlined copy of DisplayList.Item.Value(v11, v13);
            goto LABEL_51;
          case 0xBuLL:
            goto LABEL_36;
          case 0xCuLL:
            outlined copy of DisplayList.Item.Value(v11, v13);
LABEL_36:
            outlined copy of DisplayList.Item.Value(v11, v13);
            __int16 v51 = 2;
            break;
          default:
LABEL_33:
            outlined copy of DisplayList.Item.Value(v11, v13);
            __int16 v51 = 0;
            break;
        }
        goto LABEL_51;
    }
LABEL_52:
    *(void *)&uint64_t v96 = v4;
    *((void *)&v96 + 1) = v5;
    *(void *)&uint64_t v97 = v6;
    *((void *)&v97 + 1) = v7;
    Swift::Int v98 = v3;
    Swift::Int v99 = v11;
    uint64_t v100 = v13;
    uint64_t v101 = a1;
    uint64_t v103 = v58;
    uint64_t v102 = v12;
    uint64_t v104 = v9;
    DisplayList.Item.properties.getter(&v95);
    swift_release();
    uint64_t result = outlined consume of DisplayList.Item.Value(v11, v13);
    char v50 = v95;
    goto LABEL_53;
  }
  swift_release();
  uint64_t result = outlined consume of DisplayList.Item.Value(0, 0xC000000000000000);
  char v50 = 0;
  __int16 v51 = 0;
  uint64_t v2 = MEMORY[0x263F8EE78];
LABEL_53:
  *(void *)unint64_t v94 = v2;
  v94[4] = v51;
  *((unsigned char *)v94 + 10) = v50;
  return result;
}

uint64_t specialized RendererEffectDisplayList.value.getter@<X0>(uint64_t a1@<X0>, unint64_t a2@<X8>)
{
  void (*v77)(__int16 *__return_ptr, uint64_t, unint64_t);
  void (*v78)(__int16 *__return_ptr, uint64_t, unint64_t);
  uint64_t v79;
  unsigned __int16 v80;
  uint64_t v81;
  uint64_t v82;
  __int16 v83;
  id v84;
  unsigned int v85;
  unsigned __int8 v86;
  unint64_t v87;
  __int16 v88;
  long long v89;
  long long v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  __int16 v95;
  char v96;
  int v97;
  unint64_t v98;
  unint64_t v99;
  long long v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unsigned __int16 v105;
  unsigned __int8 v106;
  int v107;
  uint64_t v108;

  unint64_t v108 = *MEMORY[0x263EF8340];
  int v10 = *MEMORY[0x263F288F8];
  uint64_t v11 = MEMORY[0x263F8EE78];
  if (v2[8] == *MEMORY[0x263F288F8])
  {
    unint64_t v12 = 0;
    LOWORD(v13) = 0;
    uint64_t v14 = MEMORY[0x263F8EE78];
    if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)a2 = v11;
    *(_WORD *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 10) = 0;
    return result;
  }
  uint64_t Value = AGGraphGetValue();
  uint64_t v14 = *(void *)Value;
  unint64_t v12 = *(unsigned __int16 *)(Value + 8);
  LOWORD(v13) = *(unsigned __int8 *)(Value + 10);
  swift_bridgeObjectRetain();
  if (!*(void *)(v14 + 16)) {
    goto LABEL_10;
  }
LABEL_3:
  uint64_t v15 = ++static DisplayList.Version.lastValue;
  if (AGGraphGetCurrentAttribute() == v10)
  {
    __break(1u);
LABEL_58:
    swift_once();
LABEL_30:
    uint64_t v62 = static NSAttributedStringKey.updateSchedule;
    objc_msgSend(v84, sel_length);
    if (objc_msgSend(v84, sel_attribute_atIndex_effectiveRange_, v62, 0, 0))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      _sypSgWOhTm_9((uint64_t)&v89, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8);
      char v63 = *(unsigned char *)(v79 + 256);
      outlined consume of DisplayList.Item.Value(a2, v12);
      swift_release();
      swift_release();
      outlined consume of DisplayList.Item.Value(a2, v12);
      if (v63)
      {
        __int16 v42 = 8;
LABEL_51:
        LOBYTE(v50) = v85;
        goto LABEL_52;
      }
    }
    else
    {
      uint64_t v89 = 0u;
      uint64_t v90 = 0u;
      _sypSgWOhTm_9((uint64_t)&v89, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8);
LABEL_55:
      outlined consume of DisplayList.Item.Value(a2, v12);
      swift_release();
      swift_release();
      outlined consume of DisplayList.Item.Value(a2, v12);
    }
    __int16 v42 = 0;
    goto LABEL_51;
  }
  uint64_t v87 = a2;
  unint64_t v74 = v15;
  uint64_t v75 = a1;
  unint64_t v16 = AGCreateWeakAttribute();
  unsigned int v17 = v16;
  unint64_t v73 = HIDWORD(v16);
  unint64_t v18 = AGCreateWeakAttribute();
  unsigned int v19 = v18;
  unint64_t v72 = HIDWORD(v18);
  unint64_t v20 = AGCreateWeakAttribute();
  unsigned int v21 = v20;
  unint64_t v71 = HIDWORD(v20);
  unint64_t v22 = AGCreateWeakAttribute();
  unsigned int v23 = v22;
  unint64_t v86 = v13;
  unint64_t v24 = HIDWORD(v22);
  unint64_t v25 = AGCreateWeakAttribute();
  Swift::Int v80 = v12;
  unsigned int v26 = v25;
  uint64_t v76 = v14;
  unint64_t v27 = HIDWORD(v25);
  unint64_t v28 = AGCreateWeakAttribute();
  unsigned int v29 = v28;
  unint64_t v30 = HIDWORD(v28);
  _threadGeometryProxyData();
  Swift::Int v98 = __PAIR64__(v73, v17);
  Swift::Int v99 = __PAIR64__(v72, v19);
  *(void *)&uint64_t v100 = __PAIR64__(v71, v21);
  *((void *)&v100 + 1) = __PAIR64__(v24, v23);
  uint64_t v101 = __PAIR64__(v27, v26);
  uint64_t v102 = __PAIR64__(v30, v29);
  LODWORD(v103) = v74;
  _setThreadGeometryProxyData();
  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16) = v75;
  *(_OWORD *)(v31 + 24) = 0u;
  *(_OWORD *)(v31 + 40) = 0u;
  *(_OWORD *)(v31 + 56) = 0u;
  *(_OWORD *)(v31 + 72) = 0u;
  *(_OWORD *)(v31 + 88) = 0u;
  *(_OWORD *)(v31 + 104) = 0u;
  *(_OWORD *)(v31 + 116) = 0u;
  *(unsigned char *)(v31 + 132) = 16;
  _setThreadGeometryProxyData();
  uint64_t v32 = (double *)AGGraphGetValue();
  double v33 = *v32;
  double v34 = v32[1];
  BOOL v35 = (double *)AGGraphGetValue();
  *(double *)&unint64_t v36 = v33 - *v35;
  *(double *)&unint64_t v37 = v34 - v35[1];
  uint64_t v38 = (long long *)AGGraphGetValue();
  int v39 = *v2;
  Swift::Int v98 = v36;
  Swift::Int v99 = v37;
  uint64_t v100 = *v38;
  uint64_t v101 = v74;
  uint64_t v102 = v31;
  uint64_t v103 = 0x4000000900000000;
  uint64_t v104 = v76;
  int v106 = v86;
  uint64_t v105 = v80;
  uint64_t v107 = v39;
  LOBYTE(v89) = *((unsigned char *)v2 + 36);
  swift_retain();
  DisplayList.Item.canonicalize(options:)((char *)&v89);
  unint64_t v4 = v98;
  unint64_t v5 = v99;
  uint64_t v7 = *((void *)&v100 + 1);
  uint64_t v6 = v100;
  unint64_t v3 = v101;
  a2 = v102;
  unint64_t v12 = v103;
  uint64_t v14 = v104;
  unsigned int v13 = v105 | (v106 << 16);
  int v10 = v107;
  unint64_t v40 = v103 >> 62;
  if (v103 >> 62 != 3 || (v13 & 0xFFFFFF) != 0 || v103 != 0xC000000000000000 || v104 | v102)
  {
    _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
    uint64_t v45 = swift_allocObject();
    *(_OWORD *)(v45 + 16) = xmmword_2461B9DC0;
    *(void *)(v45 + 32) = v4;
    *(void *)(v45 + 40) = v5;
    *(void *)(v45 + 48) = v6;
    *(void *)(v45 + 56) = v7;
    *(void *)(v45 + 64) = v3;
    *(void *)(v45 + 72) = a2;
    *(void *)(v45 + 80) = v12;
    *(void *)(v45 + 88) = v14;
    *(unsigned char *)(v45 + 98) = BYTE2(v13);
    *(_WORD *)(v45 + 96) = v13;
    *(_DWORD *)(v45 + 100) = v10;
    a1 = v45;
    switch((int)v40)
    {
      case 1:
        uint64_t v85 = HIWORD(v13);
        uint64_t v47 = outlined copy of DisplayList.Item.Value(a2, v12);
        switch(BYTE4(v12))
        {
          case 2:
            outlined copy of DisplayList.Item.Value(a2, v12);
            outlined copy of DisplayList.Item.Value(a2, v12);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a2, v12, 2);
            unsigned int v48 = (a2 >> 2) & 1;
            break;
          case 3:
            outlined init with copy of AnyTrackedValue(a2 + 16, (uint64_t)&v89);
            unint64_t v64 = v91;
            char v82 = *((void *)&v90 + 1);
            __swift_project_boxed_opaque_existential_1(&v89, *((uint64_t *)&v90 + 1));
            uint64_t v78 = *(void (**)(__int16 *__return_ptr, uint64_t, unint64_t))(v64 + 56);
            outlined copy of DisplayList.Item.Value(a2, v12);
            outlined copy of DisplayList.Item.Value(a2, v12);
            v78(&v88, v82, v64);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v89);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a2, v12, 3);
            LOWORD(v48) = v88;
            break;
          case 7:
            LOWORD(v48) = *(_WORD *)(a2 + 24);
            outlined copy of DisplayList.Item.Value(a2, v12);
            outlined copy of DisplayList.Item.Value(a2, v12);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a2, v12, 7);
            break;
          case 0xA:
            outlined copy of DisplayList.Item.Value(a2, v12);
            outlined copy of DisplayList.Item.Value(a2, v12);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a2, v12, 10);
            LOWORD(v48) = 4;
            break;
          case 0xC:
            outlined copy of DisplayList.Item.Value(a2, v12);
            outlined copy of DisplayList.Item.Value(a2, v12);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a2, v12, 12);
            LOWORD(v48) = 2;
            break;
          case 0xE:
            outlined copy of DisplayList.Item.Value(a2, v12);
            outlined copy of DisplayList.Item.Value(a2, v12);
            swift_bridgeObjectRelease();
            uint64_t v65 = a2;
            char v66 = v12;
            LOBYTE(v67) = 14;
            goto LABEL_43;
          case 0xF:
            outlined copy of DisplayList.Item.Value(a2, v12);
            outlined copy of DisplayList.Item.Value(a2, v12);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a2, v12, 15);
            LOWORD(v48) = 64;
            break;
          case 0x10:
            outlined copy of DisplayList.Item.Value(a2, v12);
            outlined copy of DisplayList.Item.Value(a2, v12);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a2, v12, 16);
            LOWORD(v48) = 32;
            break;
          case 0x11:
            (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)a2 + 112))(&v89, v47);
            unsigned int v83 = v89;
            int v68 = (unsigned __int16)word_26FA429C8;
            int v69 = (unsigned __int16)word_26FA429CA;
            outlined copy of DisplayList.Item.Value(a2, v12);
            outlined copy of DisplayList.Item.Value(a2, v12);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a2, v12, 17);
            if ((v69 & ~v68) != 0) {
              __int16 v70 = v69;
            }
            else {
              __int16 v70 = 0;
            }
            LOWORD(v48) = v83 | v68 | v70;
            break;
          default:
            outlined copy of DisplayList.Item.Value(a2, v12);
            outlined copy of DisplayList.Item.Value(a2, v12);
            swift_bridgeObjectRelease();
            uint64_t v65 = a2;
            char v66 = v12;
            unint64_t v67 = HIDWORD(v12);
LABEL_43:
            outlined consume of DisplayList.Effect(v65, v66, v67);
            LOWORD(v48) = 0;
            break;
        }
        __int16 v42 = v48 | v13;
        goto LABEL_51;
      case 2:
        uint64_t v49 = *(void *)(a2 + 16);
        if (!v49)
        {
          unsigned int v50 = HIWORD(v13);
          __int16 v42 = 128;
          goto LABEL_26;
        }
        unsigned int v50 = HIWORD(v13);
        if (v49 == 1)
        {
          uint64_t v51 = 0;
          __int16 v42 = 128;
LABEL_24:
          uint64_t v58 = v49 - v51;
          long long v59 = (__int16 *)(a2 + 40 * v51 + 64);
          do
          {
            __int16 v60 = *v59;
            v59 += 20;
            v42 |= v60;
            --v58;
          }
          while (v58);
          goto LABEL_26;
        }
        __int16 v52 = 0;
        uint64_t v51 = v49 & 0x7FFFFFFFFFFFFFFELL;
        uint64_t v53 = (__int16 *)(a2 + 104);
        __int16 v54 = 128;
        uint64_t v55 = v49 & 0x7FFFFFFFFFFFFFFELL;
        do
        {
          __int16 v56 = *(v53 - 20);
          __int16 v57 = *v53;
          v53 += 40;
          v54 |= v56;
          v52 |= v57;
          v55 -= 2;
        }
        while (v55);
        __int16 v42 = v52 | v54;
        if (v49 != v51) {
          goto LABEL_24;
        }
LABEL_26:
        outlined copy of DisplayList.Item.Value(a2, v12);
        outlined copy of DisplayList.Item.Value(a2, v12);
        break;
      case 3:
        unsigned int v50 = HIWORD(v13);
        outlined copy of DisplayList.Item.Value(a2, v12);
        __int16 v42 = 0;
        break;
      default:
        uint64_t v85 = HIWORD(v13);
        switch(a2 >> 60)
        {
          case 6uLL:
            outlined init with copy of AnyTrackedValue((a2 & 0xFFFFFFFFFFFFFFFLL) + 16, (uint64_t)&v89);
            unint64_t v46 = v91;
            unsigned int v81 = *((void *)&v90 + 1);
            __swift_project_boxed_opaque_existential_1(&v89, *((uint64_t *)&v90 + 1));
            unint64_t v77 = *(void (**)(__int16 *__return_ptr, uint64_t, unint64_t))(v46 + 40);
            outlined copy of DisplayList.Item.Value(a2, v12);
            outlined copy of DisplayList.Item.Value(a2, v12);
            v77(&v88, v81, v46);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v89);
            __int16 v42 = v88;
            goto LABEL_51;
          case 8uLL:
            uint64_t v61 = *(void *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
            if (!*(void *)(v61 + 216)) {
              goto LABEL_33;
            }
            uint64_t v84 = *(id *)(v61 + 216);
            outlined copy of DisplayList.Item.Value(a2, v12);
            outlined copy of DisplayList.Item.Value(a2, v12);
            outlined copy of DisplayList.Item.Value(a2, v12);
            outlined copy of DisplayList.Item.Value(a2, v12);
            swift_retain();
            Swift::Int v79 = v61;
            swift_retain();
            if ((uint64_t)objc_msgSend(v84, sel_length) <= 0) {
              goto LABEL_55;
            }
            if (one-time initialization token for updateSchedule == -1) {
              goto LABEL_30;
            }
            goto LABEL_58;
          case 9uLL:
            __int16 v42 = *(_WORD *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x18) | 0x200;
            outlined copy of DisplayList.Item.Value(a2, v12);
            outlined copy of DisplayList.Item.Value(a2, v12);
            goto LABEL_51;
          case 0xBuLL:
            goto LABEL_36;
          case 0xCuLL:
            outlined copy of DisplayList.Item.Value(a2, v12);
LABEL_36:
            outlined copy of DisplayList.Item.Value(a2, v12);
            outlined copy of DisplayList.Item.Value(a2, v12);
            __int16 v42 = 2;
            break;
          default:
LABEL_33:
            outlined copy of DisplayList.Item.Value(a2, v12);
            outlined copy of DisplayList.Item.Value(a2, v12);
            __int16 v42 = 0;
            break;
        }
        goto LABEL_51;
    }
LABEL_52:
    *(void *)&uint64_t v89 = v4;
    *((void *)&v89 + 1) = v5;
    *(void *)&uint64_t v90 = v6;
    *((void *)&v90 + 1) = v7;
    uint64_t v91 = v3;
    int v92 = a2;
    uint64_t v93 = v12;
    unint64_t v94 = v14;
    uint64_t v96 = v50;
    uint64_t v95 = v13;
    uint64_t v97 = v10;
    DisplayList.Item.properties.getter(&v88);
    outlined consume of DisplayList.Item.Value(a2, v12);
    swift_release();
    char v41 = v88;
    goto LABEL_53;
  }
  swift_release();
  char v41 = 0;
  __int16 v42 = 0;
  a1 = MEMORY[0x263F8EE78];
LABEL_53:
  *(void *)uint64_t v87 = a1;
  *(_WORD *)(v87 + 8) = v42;
  *(unsigned char *)(v87 + 10) = v41;
  return outlined consume of DisplayList.Item.Value(a2, v12);
}

uint64_t specialized CoordinateSpaceEvents.value.getter()
{
  type metadata accessor for [EventID : EventType]();
  uint64_t v19 = *(void *)AGGraphGetValue();
  uint64_t v0 = MEMORY[0x263F8EF38];
  _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, &lazy cache variable for type metadata for CoordinateSpaceGesture<CGFloat>, MEMORY[0x263F8EF38], (uint64_t (*)(void, uint64_t))type metadata accessor for CoordinateSpaceGesture);
  uint64_t Value = AGGraphGetValue();
  _s7SwiftUI22CoordinateSpaceGestureVy12CoreGraphics7CGFloatVGWOcTm_0(Value, (uint64_t)&v12, &lazy cache variable for type metadata for CoordinateSpaceGesture<CGFloat>, v0, (uint64_t (*)(void, uint64_t))type metadata accessor for CoordinateSpaceGesture);
  outlined init with take of CoordinateSpace((uint64_t)&v12, (uint64_t)v18);
  outlined init with copy of CoordinateSpace((uint64_t)v18, (uint64_t)&v12);
  if (v17)
  {
    if (v17 != 1 && !(*(void *)&v15 | *(void *)&v16 | v12 | *(void *)&v14 | *(void *)&v13))
    {
      swift_bridgeObjectRetain();
      specialized defaultConvertEventLocations<A>(_:converter:)(&v19);
      outlined destroy of CoordinateSpace((uint64_t)v18);
      return v19;
    }
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_bridgeObjectRetain();
    outlined destroy of CoordinateSpace((uint64_t)&v12);
  }
  AGGraphClearUpdate();
  uint64_t v2 = AGGraphGetValue();
  double v3 = *(double *)(v2 + 8);
  double v4 = *(double *)(v2 + 16);
  double v5 = *(double *)(v2 + 24);
  double v6 = *(double *)(v2 + 32);
  uint64_t v12 = *(void *)v2;
  swift_retain();
  AGGraphSetUpdate();
  AGGraphClearUpdate();
  uint64_t v7 = (double *)AGGraphGetValue();
  double v8 = *v7;
  double v9 = v7[1];
  uint64_t v10 = AGGraphSetUpdate();
  double v15 = v5 - (v8 - v3);
  double v16 = v6 - (v9 - v4);
  double v13 = v8;
  double v14 = v9;
  MEMORY[0x270FA5388](v10);
  specialized defaultConvertEventLocations<A>(_:converter:)(&v19, (void (*)(void **))partial apply for closure #4 in CoordinateSpaceEvents.value.getter);
  outlined destroy of CoordinateSpace((uint64_t)v18);
  swift_release();
  return v19;
}

void *specialized GestureDebug.Value.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(void *)Value;
  uint64_t v5 = *(void *)(Value + 8);
  uint64_t v6 = *(void *)(Value + 16);
  double v7 = *(double *)(Value + 24);
  double v8 = *(double *)(Value + 32);
  uint64_t v42 = 0;
  memset(v41, 0, sizeof(v41));
  char v43 = 2;
  char v44 = 2;
  double v9 = (uint64_t *)AGGraphGetValue();
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  if (v4 || v7 != 0.0 || v8 != 0.0)
  {
    uint64_t v39 = *v9;
    uint64_t v40 = v11;
    *(void *)__srdouble c = v4;
    *(void *)&__src[8] = v5;
    *(void *)&__src[16] = v6;
    *(double *)&__src[24] = v7;
    *(double *)&__src[32] = v8;
    swift_retain();
    specialized ViewTransform.convert(_:_:)((uint64_t)v41, (double *)__src, (uint64_t)&v39);
    uint64_t v10 = v39;
    uint64_t v11 = v40;
  }
  outlined destroy of ViewTransform.Conversion((uint64_t)v41);
  swift_release();
  specialized GestureDebug.Value.childData.getter(__src);
  int v12 = *((_DWORD *)v1 + 5);
  _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, &lazy cache variable for type metadata for GesturePhase<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(void, uint64_t))type metadata accessor for GesturePhase);
  uint64_t v13 = AGGraphGetValue();
  int v14 = *(unsigned __int8 *)(v13 + 24);
  char v37 = v15;
  if ((v14 - 1) >= 2)
  {
    if (*(unsigned char *)(v13 + 24) || *(void *)(v13 + 16) != 1)
    {
      char v37 = 0;
      LOBYTE(v39) = 0;
    }
    else
    {
      outlined consume of GesturePhase<TappableEvent>(*(void *)v13, *(void *)(v13 + 8), 1, 0);
      char v37 = 1;
      LOBYTE(v39) = 1;
    }
  }
  int v16 = *(_DWORD *)AGGraphGetValue();
  char v17 = (uint64_t *)AGGraphGetValue();
  uint64_t v18 = *v17;
  uint64_t v19 = v17[1];
  char v35 = v14;
  int v36 = v12;
  int v34 = v16;
  if (*((_DWORD *)v1 + 4) == *MEMORY[0x263F288F8])
  {
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v31 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    char v25 = 3;
  }
  else
  {
    type metadata accessor for ArrayWith2Inline<(String, String)>();
    uint64_t v26 = AGGraphGetValue();
    uint64_t v20 = *(void *)(v26 + 24);
    uint64_t v21 = *(void *)(v26 + 32);
    uint64_t v22 = *(void *)(v26 + 40);
    uint64_t v23 = *(void *)(v26 + 48);
    uint64_t v24 = *(void *)(v26 + 56);
    char v25 = *(unsigned char *)(v26 + 64);
    uint64_t v32 = *(void *)(v26 + 8);
    uint64_t v33 = *(void *)v26;
    uint64_t v31 = *(void *)(v26 + 16);
    outlined copy of ArrayWith2Inline<(String, String)>.Storage(*(void *)v26, v32, v31, v20, v21, v22, v23, v24, v25);
  }
  char v27 = *v1;
  uint64_t v28 = *((void *)v1 + 1);
  uint64_t v29 = swift_allocObject();
  uint64_t result = memcpy((void *)(v29 + 16), __src, 0x121uLL);
  *(unsigned char *)a1 = v27;
  *(void *)(a1 + 8) = v28;
  *(unsigned char *)(a1 + 16) = v37;
  *(unsigned char *)(a1 + 17) = v35;
  *(_DWORD *)(a1 + 20) = v36;
  *(_DWORD *)(a1 + 24) = v34;
  *(void *)(a1 + 32) = v10;
  *(void *)(a1 + 40) = v11;
  *(void *)(a1 + 48) = v18;
  *(void *)(a1 + 56) = v19;
  *(void *)(a1 + 64) = v33;
  *(void *)(a1 + 72) = v32;
  *(void *)(a1 + 80) = v31;
  *(void *)(a1 + 88) = v20;
  *(void *)(a1 + 96) = v21;
  *(void *)(a1 + 104) = v22;
  *(void *)(a1 + 112) = v23;
  *(void *)(a1 + 120) = v24;
  *(unsigned char *)(a1 + 128) = v25;
  *(void *)(a1 + 136) = v29;
  return result;
}

{
  char *v1;
  uint64_t Value;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  char v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  void *result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  char v35;
  int v36;
  char v37;
  unsigned char __src[289];
  uint64_t v39;
  uint64_t v40;
  unsigned char v41[32];
  uint64_t v42;
  char v43;
  char v44;

  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(void *)Value;
  uint64_t v5 = *(void *)(Value + 8);
  uint64_t v6 = *(void *)(Value + 16);
  double v7 = *(double *)(Value + 24);
  double v8 = *(double *)(Value + 32);
  uint64_t v42 = 0;
  memset(v41, 0, sizeof(v41));
  char v43 = 2;
  char v44 = 2;
  double v9 = (uint64_t *)AGGraphGetValue();
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  if (v4 || v7 != 0.0 || v8 != 0.0)
  {
    uint64_t v39 = *v9;
    uint64_t v40 = v11;
    *(void *)__srdouble c = v4;
    *(void *)&__src[8] = v5;
    *(void *)&__src[16] = v6;
    *(double *)&__src[24] = v7;
    *(double *)&__src[32] = v8;
    swift_retain();
    specialized ViewTransform.convert(_:_:)((uint64_t)v41, (double *)__src, (uint64_t)&v39);
    uint64_t v10 = v39;
    uint64_t v11 = v40;
  }
  outlined destroy of ViewTransform.Conversion((uint64_t)v41);
  swift_release();
  specialized GestureDebug.Value.childData.getter(__src);
  int v12 = *((_DWORD *)v1 + 5);
  _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, &lazy cache variable for type metadata for GesturePhase<SpatialEvent>, (uint64_t)&type metadata for SpatialEvent, (uint64_t (*)(void, uint64_t))type metadata accessor for GesturePhase);
  uint64_t v13 = AGGraphGetValue();
  int v14 = *(unsigned __int8 *)(v13 + 72);
  char v37 = v15;
  if ((v14 - 1) >= 2)
  {
    if (*(unsigned char *)(v13 + 72) || *(void *)(v13 + 16) != 1)
    {
      char v37 = 0;
      LOBYTE(v39) = 0;
    }
    else
    {
      outlined consume of GesturePhase<SpatialEvent>(*(void *)v13, *(void *)(v13 + 8), 1, *(void *)(v13 + 24), *(void *)(v13 + 32), *(void *)(v13 + 40), *(void *)(v13 + 48), *(void *)(v13 + 56), *(void *)(v13 + 64), 0);
      char v37 = 1;
      LOBYTE(v39) = 1;
    }
  }
  int v16 = *(_DWORD *)AGGraphGetValue();
  char v17 = (uint64_t *)AGGraphGetValue();
  uint64_t v18 = *v17;
  uint64_t v19 = v17[1];
  char v35 = v14;
  int v36 = v12;
  int v34 = v16;
  if (*((_DWORD *)v1 + 4) == *MEMORY[0x263F288F8])
  {
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v31 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    char v25 = 3;
  }
  else
  {
    type metadata accessor for ArrayWith2Inline<(String, String)>();
    uint64_t v26 = AGGraphGetValue();
    uint64_t v20 = *(void *)(v26 + 24);
    uint64_t v21 = *(void *)(v26 + 32);
    uint64_t v22 = *(void *)(v26 + 40);
    uint64_t v23 = *(void *)(v26 + 48);
    uint64_t v24 = *(void *)(v26 + 56);
    char v25 = *(unsigned char *)(v26 + 64);
    uint64_t v32 = *(void *)(v26 + 8);
    uint64_t v33 = *(void *)v26;
    uint64_t v31 = *(void *)(v26 + 16);
    outlined copy of ArrayWith2Inline<(String, String)>.Storage(*(void *)v26, v32, v31, v20, v21, v22, v23, v24, v25);
  }
  char v27 = *v1;
  uint64_t v28 = *((void *)v1 + 1);
  uint64_t v29 = swift_allocObject();
  uint64_t result = memcpy((void *)(v29 + 16), __src, 0x121uLL);
  *(unsigned char *)a1 = v27;
  *(void *)(a1 + 8) = v28;
  *(unsigned char *)(a1 + 16) = v37;
  *(unsigned char *)(a1 + 17) = v35;
  *(_DWORD *)(a1 + 20) = v36;
  *(_DWORD *)(a1 + 24) = v34;
  *(void *)(a1 + 32) = v10;
  *(void *)(a1 + 40) = v11;
  *(void *)(a1 + 48) = v18;
  *(void *)(a1 + 56) = v19;
  *(void *)(a1 + 64) = v33;
  *(void *)(a1 + 72) = v32;
  *(void *)(a1 + 80) = v31;
  *(void *)(a1 + 88) = v20;
  *(void *)(a1 + 96) = v21;
  *(void *)(a1 + 104) = v22;
  *(void *)(a1 + 112) = v23;
  *(void *)(a1 + 120) = v24;
  *(unsigned char *)(a1 + 128) = v25;
  *(void *)(a1 + 136) = v29;
  return result;
}

{
  char *v1;
  uint64_t Value;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char *v13;
  char v14;
  int v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  void *result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  char v35;
  char v36;
  int v37;
  unsigned char __src[289];
  uint64_t v39;
  uint64_t v40;
  unsigned char v41[32];
  uint64_t v42;
  char v43;
  char v44;

  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(void *)Value;
  uint64_t v5 = *(void *)(Value + 8);
  uint64_t v6 = *(void *)(Value + 16);
  double v7 = *(double *)(Value + 24);
  double v8 = *(double *)(Value + 32);
  uint64_t v42 = 0;
  memset(v41, 0, sizeof(v41));
  char v43 = 2;
  char v44 = 2;
  double v9 = (uint64_t *)AGGraphGetValue();
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  if (v4 || v7 != 0.0 || v8 != 0.0)
  {
    uint64_t v39 = *v9;
    uint64_t v40 = v11;
    *(void *)__srdouble c = v4;
    *(void *)&__src[8] = v5;
    *(void *)&__src[16] = v6;
    *(double *)&__src[24] = v7;
    *(double *)&__src[32] = v8;
    swift_retain();
    specialized ViewTransform.convert(_:_:)((uint64_t)v41, (double *)__src, (uint64_t)&v39);
    uint64_t v10 = v39;
    uint64_t v11 = v40;
  }
  outlined destroy of ViewTransform.Conversion((uint64_t)v41);
  swift_release();
  specialized GestureDebug.Value.childData.getter(__src);
  int v12 = *((_DWORD *)v1 + 5);
  _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<()>, MEMORY[0x263F8EE60] + 8, (uint64_t (*)(void, uint64_t))type metadata accessor for GesturePhase);
  uint64_t v13 = (char *)AGGraphGetValue();
  int v14 = 0;
  char v15 = v13[1];
  if ((v15 - 1) >= 2)
  {
    int v14 = *v13;
    if (v13[1] || (*v13 & 1) != 0)
    {
      LOBYTE(v39) = *v13;
    }
    else
    {
      int v14 = 0;
      LOBYTE(v39) = 0;
    }
  }
  int v16 = *(_DWORD *)AGGraphGetValue();
  char v17 = (uint64_t *)AGGraphGetValue();
  uint64_t v18 = *v17;
  uint64_t v19 = v17[1];
  int v36 = v15;
  char v37 = v12;
  int v34 = v16;
  char v35 = v14;
  if (*((_DWORD *)v1 + 4) == *MEMORY[0x263F288F8])
  {
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v31 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    char v25 = 3;
  }
  else
  {
    type metadata accessor for ArrayWith2Inline<(String, String)>();
    uint64_t v26 = AGGraphGetValue();
    uint64_t v20 = *(void *)(v26 + 24);
    uint64_t v21 = *(void *)(v26 + 32);
    uint64_t v22 = *(void *)(v26 + 40);
    uint64_t v23 = *(void *)(v26 + 48);
    uint64_t v24 = *(void *)(v26 + 56);
    char v25 = *(unsigned char *)(v26 + 64);
    uint64_t v32 = *(void *)(v26 + 8);
    uint64_t v33 = *(void *)v26;
    uint64_t v31 = *(void *)(v26 + 16);
    outlined copy of ArrayWith2Inline<(String, String)>.Storage(*(void *)v26, v32, v31, v20, v21, v22, v23, v24, v25);
  }
  char v27 = *v1;
  uint64_t v28 = *((void *)v1 + 1);
  uint64_t v29 = swift_allocObject();
  uint64_t result = memcpy((void *)(v29 + 16), __src, 0x121uLL);
  *(unsigned char *)a1 = v27;
  *(void *)(a1 + 8) = v28;
  *(unsigned char *)(a1 + 16) = v35;
  *(unsigned char *)(a1 + 17) = v36;
  *(_DWORD *)(a1 + 20) = v37;
  *(_DWORD *)(a1 + 24) = v34;
  *(void *)(a1 + 32) = v10;
  *(void *)(a1 + 40) = v11;
  *(void *)(a1 + 48) = v18;
  *(void *)(a1 + 56) = v19;
  *(void *)(a1 + 64) = v33;
  *(void *)(a1 + 72) = v32;
  *(void *)(a1 + 80) = v31;
  *(void *)(a1 + 88) = v20;
  *(void *)(a1 + 96) = v21;
  *(void *)(a1 + 104) = v22;
  *(void *)(a1 + 112) = v23;
  *(void *)(a1 + 120) = v24;
  *(unsigned char *)(a1 + 128) = v25;
  *(void *)(a1 + 136) = v29;
  return result;
}

{
  char *v1;
  uint64_t Value;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned char *v13;
  int v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  void *result;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  char v35;
  int v36;
  unsigned char __src[289];
  uint64_t v38;
  uint64_t v39;
  unsigned char v40[32];
  uint64_t v41;
  char v42;
  char v43;

  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(void *)Value;
  uint64_t v5 = *(void *)(Value + 8);
  uint64_t v6 = *(void *)(Value + 16);
  double v7 = *(double *)(Value + 24);
  double v8 = *(double *)(Value + 32);
  char v41 = 0;
  memset(v40, 0, sizeof(v40));
  uint64_t v42 = 2;
  char v43 = 2;
  double v9 = (uint64_t *)AGGraphGetValue();
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  if (v4 || v7 != 0.0 || v8 != 0.0)
  {
    uint64_t v38 = *v9;
    uint64_t v39 = v11;
    *(void *)__srdouble c = v4;
    *(void *)&__src[8] = v5;
    *(void *)&__src[16] = v6;
    *(double *)&__src[24] = v7;
    *(double *)&__src[32] = v8;
    swift_retain();
    specialized ViewTransform.convert(_:_:)((uint64_t)v40, (double *)__src, (uint64_t)&v38);
    uint64_t v10 = v38;
    uint64_t v11 = v39;
  }
  outlined destroy of ViewTransform.Conversion((uint64_t)v40);
  swift_release();
  specialized GestureDebug.Value.childData.getter(__src);
  int v12 = *((_DWORD *)v1 + 5);
  _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, &lazy cache variable for type metadata for GesturePhase<Never>, MEMORY[0x263F8E628], (uint64_t (*)(void, uint64_t))type metadata accessor for GesturePhase);
  uint64_t v13 = (unsigned char *)AGGraphGetValue();
  int v14 = v13[1];
  if ((v14 - 1) >= 2)
  {
    if (!v13[1] && (*v13 & 1) != 0)
    {
      unint64_t v30 = 1;
      LOBYTE(v38) = 1;
    }
    else
    {
      unint64_t v30 = 0;
      LOBYTE(v38) = 0;
    }
  }
  char v15 = *(_DWORD *)AGGraphGetValue();
  int v16 = (uint64_t *)AGGraphGetValue();
  char v17 = *v16;
  uint64_t v18 = v16[1];
  char v35 = v14;
  int v36 = v12;
  int v34 = v15;
  if (*((_DWORD *)v1 + 4) == *MEMORY[0x263F288F8])
  {
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v31 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 3;
  }
  else
  {
    type metadata accessor for ArrayWith2Inline<(String, String)>();
    char v25 = AGGraphGetValue();
    uint64_t v19 = *(void *)(v25 + 24);
    uint64_t v20 = *(void *)(v25 + 32);
    uint64_t v21 = *(void *)(v25 + 40);
    uint64_t v22 = *(void *)(v25 + 48);
    uint64_t v23 = *(void *)(v25 + 56);
    uint64_t v24 = *(unsigned char *)(v25 + 64);
    uint64_t v32 = *(void *)(v25 + 8);
    uint64_t v33 = *(void *)v25;
    uint64_t v31 = *(void *)(v25 + 16);
    outlined copy of ArrayWith2Inline<(String, String)>.Storage(*(void *)v25, v32, v31, v19, v20, v21, v22, v23, v24);
  }
  uint64_t v26 = *v1;
  char v27 = *((void *)v1 + 1);
  uint64_t v28 = swift_allocObject();
  uint64_t result = memcpy((void *)(v28 + 16), __src, 0x121uLL);
  *(unsigned char *)a1 = v26;
  *(void *)(a1 + 8) = v27;
  *(unsigned char *)(a1 + 16) = v30;
  *(unsigned char *)(a1 + 17) = v35;
  *(_DWORD *)(a1 + 20) = v36;
  *(_DWORD *)(a1 + 24) = v34;
  *(void *)(a1 + 32) = v10;
  *(void *)(a1 + 40) = v11;
  *(void *)(a1 + 48) = v17;
  *(void *)(a1 + 56) = v18;
  *(void *)(a1 + 64) = v33;
  *(void *)(a1 + 72) = v32;
  *(void *)(a1 + 80) = v31;
  *(void *)(a1 + 88) = v19;
  *(void *)(a1 + 96) = v20;
  *(void *)(a1 + 104) = v21;
  *(void *)(a1 + 112) = v22;
  *(void *)(a1 + 120) = v23;
  *(unsigned char *)(a1 + 128) = v24;
  *(void *)(a1 + 136) = v28;
  return result;
}

void *specialized GestureDebug.Value.value.getter@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t Value = AGGraphGetValue();
  uint64_t v8 = *(void *)Value;
  uint64_t v9 = *(void *)(Value + 8);
  uint64_t v10 = *(void *)(Value + 16);
  double v11 = *(double *)(Value + 24);
  double v12 = *(double *)(Value + 32);
  uint64_t v45 = 0;
  memset(v44, 0, sizeof(v44));
  char v46 = 2;
  char v47 = 2;
  uint64_t v13 = (uint64_t *)AGGraphGetValue();
  uint64_t v14 = *v13;
  uint64_t v15 = v13[1];
  if (v8 || v11 != 0.0 || v12 != 0.0)
  {
    uint64_t v42 = *v13;
    uint64_t v43 = v15;
    *(void *)__srdouble c = v8;
    *(void *)&__src[8] = v9;
    *(void *)&__src[16] = v10;
    *(double *)&__src[24] = v11;
    *(double *)&__src[32] = v12;
    swift_retain();
    specialized ViewTransform.convert(_:_:)((uint64_t)v44, (double *)__src, (uint64_t)&v42);
    uint64_t v14 = v42;
    uint64_t v15 = v43;
  }
  outlined destroy of ViewTransform.Conversion((uint64_t)v44);
  swift_release();
  specialized GestureDebug.Value.childData.getter(__src);
  int v16 = *((_DWORD *)v3 + 5);
  _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, a1, a2, (uint64_t (*)(void, uint64_t))type metadata accessor for GesturePhase);
  uint64_t v17 = AGGraphGetValue();
  int v18 = *(unsigned __int8 *)(v17 + 9);
  if ((v18 - 1) >= 2)
  {
    if (!*(unsigned char *)(v17 + 9) && (*(unsigned char *)(v17 + 8) & 1) != 0)
    {
      char v34 = 1;
      LOBYTE(v42) = 1;
    }
    else
    {
      char v34 = 0;
      LOBYTE(v42) = 0;
    }
  }
  int v19 = *(_DWORD *)AGGraphGetValue();
  uint64_t v20 = (uint64_t *)AGGraphGetValue();
  uint64_t v21 = *v20;
  uint64_t v22 = v20[1];
  char v39 = v18;
  int v40 = v16;
  int v38 = v19;
  if (*((_DWORD *)v3 + 4) == *MEMORY[0x263F288F8])
  {
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    uint64_t v35 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    char v28 = 3;
  }
  else
  {
    type metadata accessor for ArrayWith2Inline<(String, String)>();
    uint64_t v29 = AGGraphGetValue();
    uint64_t v23 = *(void *)(v29 + 24);
    uint64_t v24 = *(void *)(v29 + 32);
    uint64_t v25 = *(void *)(v29 + 40);
    uint64_t v26 = *(void *)(v29 + 48);
    uint64_t v27 = *(void *)(v29 + 56);
    char v28 = *(unsigned char *)(v29 + 64);
    uint64_t v36 = *(void *)(v29 + 8);
    uint64_t v37 = *(void *)v29;
    uint64_t v35 = *(void *)(v29 + 16);
    outlined copy of ArrayWith2Inline<(String, String)>.Storage(*(void *)v29, v36, v35, v23, v24, v25, v26, v27, v28);
  }
  char v30 = *v3;
  uint64_t v31 = *((void *)v3 + 1);
  uint64_t v32 = swift_allocObject();
  uint64_t result = memcpy((void *)(v32 + 16), __src, 0x121uLL);
  *(unsigned char *)a3 = v30;
  *(void *)(a3 + 8) = v31;
  *(unsigned char *)(a3 + 16) = v34;
  *(unsigned char *)(a3 + 17) = v39;
  *(_DWORD *)(a3 + 20) = v40;
  *(_DWORD *)(a3 + 24) = v38;
  *(void *)(a3 + 32) = v14;
  *(void *)(a3 + 40) = v15;
  *(void *)(a3 + 48) = v21;
  *(void *)(a3 + 56) = v22;
  *(void *)(a3 + 64) = v37;
  *(void *)(a3 + 72) = v36;
  *(void *)(a3 + 80) = v35;
  *(void *)(a3 + 88) = v23;
  *(void *)(a3 + 96) = v24;
  *(void *)(a3 + 104) = v25;
  *(void *)(a3 + 112) = v26;
  *(void *)(a3 + 120) = v27;
  *(unsigned char *)(a3 + 128) = v28;
  *(void *)(a3 + 136) = v32;
  return result;
}

uint64_t specialized GestureDebug.Value.childData.getter@<X0>(_OWORD *a1@<X8>)
{
  int v3 = *MEMORY[0x263F288F8];
  if (*(_DWORD *)(v1 + 40) == *MEMORY[0x263F288F8])
  {
    _s7SwiftUI15TextRenderLayerC6Layout33_FB86B422571764190CF2C7C4C92612D4LLVSgWOi0_(v34);
  }
  else
  {
    uint64_t Value = (_OWORD *)AGGraphGetValue();
    v60[0] = *Value;
    long long v5 = Value[4];
    long long v7 = Value[1];
    long long v6 = Value[2];
    v60[3] = Value[3];
    v60[4] = v5;
    v60[1] = v7;
    v60[2] = v6;
    long long v8 = Value[8];
    long long v10 = Value[5];
    long long v9 = Value[6];
    v60[7] = Value[7];
    v60[8] = v8;
    v60[5] = v10;
    v60[6] = v9;
    memmove(v34, Value, 0x90uLL);
    _ViewInputs.base.modify(v34, v11);
    outlined retain of GestureDebug.Data((uint64_t)v60);
  }
  outlined init with take of GestureDebug.Data?((uint64_t)v34, (uint64_t)v61, &lazy cache variable for type metadata for GestureDebug.Data?, (uint64_t)&type metadata for GestureDebug.Data, MEMORY[0x263F8D8F0]);
  if (*(_DWORD *)(v1 + 44) == v3)
  {
    _s7SwiftUI15TextRenderLayerC6Layout33_FB86B422571764190CF2C7C4C92612D4LLVSgWOi0_(v34);
  }
  else
  {
    double v12 = (long long *)AGGraphGetValue();
    long long v51 = *v12;
    long long v13 = v12[4];
    long long v15 = v12[1];
    long long v14 = v12[2];
    long long v54 = v12[3];
    long long v55 = v13;
    long long v52 = v15;
    long long v53 = v14;
    long long v16 = v12[8];
    long long v18 = v12[5];
    long long v17 = v12[6];
    long long v58 = v12[7];
    long long v59 = v16;
    long long v56 = v18;
    long long v57 = v17;
    memmove(v34, v12, 0x90uLL);
    _ViewInputs.base.modify(v34, v19);
    outlined retain of GestureDebug.Data((uint64_t)&v51);
  }
  outlined init with take of GestureDebug.Data?((uint64_t)v34, (uint64_t)v60, &lazy cache variable for type metadata for GestureDebug.Data?, (uint64_t)&type metadata for GestureDebug.Data, MEMORY[0x263F8D8F0]);
  outlined init with take of GestureDebug.Data?((uint64_t)v61, (uint64_t)&v51, &lazy cache variable for type metadata for GestureDebug.Data?, (uint64_t)&type metadata for GestureDebug.Data, MEMORY[0x263F8D8F0]);
  if (_s7SwiftUI12GestureDebugO4DataVSgWOg((uint64_t)&v51) == 1)
  {
    outlined init with take of GestureDebug.Data?((uint64_t)v60, (uint64_t)&v42, &lazy cache variable for type metadata for GestureDebug.Data?, (uint64_t)&type metadata for GestureDebug.Data, MEMORY[0x263F8D8F0]);
    if (_s7SwiftUI12GestureDebugO4DataVSgWOg((uint64_t)&v42) == 1)
    {
      _s7SwiftUI16ArrayWith2InlineV7StorageOyAA12GestureDebugO4DataV_GWOi2_((uint64_t)v34);
      return outlined init with take of GestureDebug.Data?((uint64_t)v34, (uint64_t)a1, &lazy cache variable for type metadata for ArrayWith2Inline<GestureDebug.Data>.Storage, (uint64_t)&type metadata for GestureDebug.Data, (uint64_t (*)(void, uint64_t))type metadata accessor for ArrayWith2Inline.Storage);
    }
    long long v39 = v48;
    long long v40 = v49;
    long long v41 = v50;
    long long v35 = v44;
    long long v36 = v45;
    long long v37 = v46;
    long long v38 = v47;
    long long v21 = v42;
    long long v20 = v43;
LABEL_13:
    v34[0] = v21;
    v34[1] = v20;
    _s7SwiftUI16ArrayWith2InlineV7StorageOyAA12GestureDebugO4DataV_GWOi_((uint64_t)v34);
    return outlined init with take of GestureDebug.Data?((uint64_t)v34, (uint64_t)a1, &lazy cache variable for type metadata for ArrayWith2Inline<GestureDebug.Data>.Storage, (uint64_t)&type metadata for GestureDebug.Data, (uint64_t (*)(void, uint64_t))type metadata accessor for ArrayWith2Inline.Storage);
  }
  outlined init with take of GestureDebug.Data?((uint64_t)v60, (uint64_t)&v42, &lazy cache variable for type metadata for GestureDebug.Data?, (uint64_t)&type metadata for GestureDebug.Data, MEMORY[0x263F8D8F0]);
  if (_s7SwiftUI12GestureDebugO4DataVSgWOg((uint64_t)&v42) == 1)
  {
    long long v39 = v57;
    long long v40 = v58;
    long long v41 = v59;
    long long v35 = v53;
    long long v36 = v54;
    long long v37 = v55;
    long long v38 = v56;
    long long v21 = v51;
    long long v20 = v52;
    goto LABEL_13;
  }
  long long v23 = v58;
  a1[6] = v57;
  a1[7] = v23;
  long long v24 = v54;
  a1[2] = v53;
  a1[3] = v24;
  long long v25 = v56;
  a1[4] = v55;
  a1[5] = v25;
  long long v26 = v52;
  *a1 = v51;
  a1[1] = v26;
  long long v27 = v48;
  long long v28 = v49;
  long long v29 = v46;
  a1[14] = v47;
  a1[15] = v27;
  long long v30 = v50;
  a1[16] = v28;
  a1[17] = v30;
  long long v31 = v44;
  long long v32 = v45;
  long long v33 = v42;
  a1[10] = v43;
  a1[11] = v31;
  a1[12] = v32;
  a1[13] = v29;
  a1[8] = v59;
  a1[9] = v33;
  return _s7SwiftUI16ArrayWith2InlineV7StorageOyAA12GestureDebugO4DataV_GWOi0_((uint64_t)a1);
}

uint64_t protocol witness for static UnaryLayout.makeViewImpl(modifier:inputs:body:) in conformance _AspectRatioLayout@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, long long *)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = *a1;
  long long v5 = *(_OWORD *)(a2 + 48);
  void v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  int v9 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static UnaryLayout<>.makeViewImpl(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t static UnaryLayout<>.makeViewImpl(modifier:inputs:body:)@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr, uint64_t, unint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t *a7@<X8>)
{
  void (*v66)(unint64_t *__return_ptr, uint64_t, unint64_t *);
  unint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  unint64_t v72;
  int v73;
  int v74;
  unint64_t v75;
  int v76;
  int v77;
  unint64_t v78;
  int v79;
  int v80;
  int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  unsigned int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  uint64_t v92;

  int v92 = *MEMORY[0x263EF8340];
  unint64_t v7 = *(void *)a2;
  int v8 = *(_DWORD *)(a2 + 8);
  unint64_t v9 = *(void *)(a2 + 16);
  int v11 = *(_DWORD *)(a2 + 24);
  int v10 = *(_DWORD *)(a2 + 28);
  int v12 = *(_DWORD *)(a2 + 32);
  int v13 = *(_DWORD *)(a2 + 36);
  uint64_t v15 = *(void *)(a2 + 40);
  uint64_t v14 = *(void *)(a2 + 48);
  int v17 = *(_DWORD *)(a2 + 56);
  unsigned int v16 = *(_DWORD *)(a2 + 60);
  int v19 = *(_DWORD *)(a2 + 64);
  int v18 = *(_DWORD *)(a2 + 68);
  int OffsetAttribute2 = *(_DWORD *)(a2 + 72);
  int v20 = *(_DWORD *)(a2 + 76);
  int v22 = *(_DWORD *)(a2 + 80);
  if ((v13 & 0x22) != 0)
  {
    int v59 = *(_DWORD *)(a2 + 56);
    unsigned int v60 = v16;
    int v61 = v18;
    LODWORD(v69) = v20;
    int v62 = v22;
    uint64_t v63 = a4;
    char v66 = a3;
    unint64_t v67 = a7;
    LODWORD(v72) = *a1;
    uint64_t v75 = v7;
    int v56 = v8;
    uint64_t v76 = v8;
    uint64_t v78 = v9;
    int v57 = v11;
    Swift::Int v79 = v11;
    Swift::Int v80 = v10;
    int v58 = v10;
    unsigned int v81 = v12;
    char v82 = v13;
    unsigned int v83 = v15;
    uint64_t v23 = *(void *)(a6 + 8);
    __int16 v70 = a6;
    int v55 = v12;
    uint64_t v65 = a5;
    unsigned int v64 = static Animatable.makeAnimatable(value:inputs:)((unsigned int *)&v72, (uint64_t *)&v75, a5, v23);
    int v68 = 0;
    if ((v13 & 0x20) != 0)
    {
      uint64_t KeyPath = swift_getKeyPath();
      swift_beginAccess();
      swift_retain_n();
      swift_retain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      unsigned int v30 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
      swift_endAccess();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v31 = swift_release();
      uint64_t v54 = (uint64_t)&v54;
      unsigned int v32 = *(_DWORD *)(v9 + 16);
      int v33 = *MEMORY[0x263F288F8];
      uint64_t v75 = __PAIR64__(v30, v64);
      uint64_t v76 = OffsetAttribute2;
      unint64_t v77 = v19;
      unsigned int v26 = v60;
      uint64_t v78 = __PAIR64__(v32, v60);
      Swift::Int v79 = v33;
      Swift::Int v80 = v69;
      MEMORY[0x270FA5388](v31);
      uint64_t v52 = type metadata accessor for UnaryPositionAwareChildGeometry();
      uint64_t WitnessTable = swift_getWitnessTable();
      _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, &lazy cache variable for type metadata for Attribute<ViewGeometry>, (uint64_t)&type metadata for ViewGeometry, MEMORY[0x263F28898]);
      uint64_t v34 = v68;
      _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v75, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_9, (uint64_t)v51, v52, MEMORY[0x263F8E628], v35, MEMORY[0x263F8E658], v36);
      int v68 = v34;
      int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
      int v37 = AGGraphCreateOffsetAttribute2();
      int v25 = v69;
      int v19 = v37;
      int v27 = v55 | 0x18;
      int v24 = v13 | 2;
    }
    else
    {
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      int v24 = v13;
      int v25 = v69;
      unsigned int v26 = v60;
      int v27 = v55;
    }
    uint64_t v75 = v7;
    uint64_t v76 = v56;
    uint64_t v78 = v9;
    Swift::Int v79 = v57;
    Swift::Int v80 = v58;
    unsigned int v81 = v27;
    char v82 = v24;
    unsigned int v83 = v15;
    uint64_t v84 = v14;
    uint64_t v85 = v59;
    unint64_t v86 = v26;
    uint64_t v87 = v19;
    uint64_t v88 = v61;
    uint64_t v89 = OffsetAttribute2;
    uint64_t v90 = v25;
    uint64_t v91 = v62;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v38 = swift_bridgeObjectRetain();
    v66(&v72, v38, &v75);
    int v69 = v14;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    char v66 = (void (*)(unint64_t *__return_ptr, uint64_t, unint64_t *))v7;
    uint64_t v39 = swift_release();
    unint64_t v40 = v72;
    int v42 = v73;
    int v41 = v74;
    if ((v13 & 0x20) != 0)
    {
      MEMORY[0x270FA5388](v39);
      uint64_t v43 = v70;
      *(void *)&v51[-32] = v65;
      *(void *)&v51[-24] = v43;
      *(void *)&v51[-16] = v40;
      *(_DWORD *)&v51[-8] = v42;
      *(_DWORD *)&v51[-4] = v41;
      uint64_t v44 = type metadata accessor for UnaryPositionAwareChildGeometry();
      MEMORY[0x270FA5388](v44);
      *(void *)&v51[-32] = v45;
      *(void *)&v51[-24] = partial apply for closure #1 in static UnaryLayout<>.makeViewImpl(modifier:inputs:body:);
      *(void *)&v51[-16] = &v51[-48];
      AGGraphMutateAttribute();
    }
    if ((v13 & 2) != 0)
    {
      uint64_t v46 = swift_beginAccess();
      unint64_t v72 = __PAIR64__(*(_DWORD *)(v9 + 16), v64);
      unint64_t v73 = v41;
      MEMORY[0x270FA5388](v46);
      uint64_t v47 = type metadata accessor for UnaryPositionAwareLayoutComputer();
      *(void *)&v51[-16] = v47;
      *(void *)&v51[-8] = swift_getWitnessTable();
      _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, &lazy cache variable for type metadata for Attribute<LayoutComputer>, (uint64_t)&type metadata for LayoutComputer, MEMORY[0x263F28898]);
      _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v72, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_4, (uint64_t)&v51[-32], v47, MEMORY[0x263F8E628], v48, MEMORY[0x263F8E658], v49);
      int v41 = v71;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t result = swift_release();
      v42 |= 0x80u;
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t result = swift_release();
    }
    long long v50 = v67;
    unsigned char *v67 = v40;
    *((_DWORD *)v50 + 2) = v42;
    *((_DWORD *)v50 + 3) = v41;
  }
  else
  {
    uint64_t v75 = *(void *)a2;
    uint64_t v76 = v8;
    uint64_t v78 = v9;
    Swift::Int v79 = v11;
    Swift::Int v80 = v10;
    unsigned int v81 = v12;
    char v82 = v13;
    unsigned int v83 = v15;
    uint64_t v84 = v14;
    uint64_t v85 = v17;
    unint64_t v86 = v16;
    uint64_t v87 = v19;
    uint64_t v88 = v18;
    uint64_t v89 = OffsetAttribute2;
    uint64_t v90 = v20;
    uint64_t v91 = v22;
    return ((uint64_t (*)(_DWORD *, unint64_t *))a3)(a1, &v75);
  }
  return result;
}

uint64_t LayoutPositionQuery.init(parentPosition:localPosition:)@<X0>(uint64_t result@<X0>, int a2@<W1>, _DWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

double UnaryPositionAwareLayoutEngine.init(layout:layoutContext:child:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v10 = *(_DWORD *)(a2 + 8);
  int v11 = *(_DWORD *)(a3 + 8);
  int v12 = (int *)type metadata accessor for UnaryPositionAwareLayoutEngine();
  uint64_t v13 = a5 + v12[11];
  *(_OWORD *)uint64_t v13 = 0u;
  *(_OWORD *)(v13 + 16) = 0u;
  *(_OWORD *)(v13 + 32) = 0u;
  *(unsigned char *)(v13 + 48) = 1;
  *(_OWORD *)(v13 + 56) = 0u;
  *(_OWORD *)(v13 + 72) = 0u;
  *(_OWORD *)(v13 + 88) = 0u;
  *(unsigned char *)(v13 + 104) = 1;
  *(_OWORD *)(v13 + 112) = 0u;
  *(_OWORD *)(v13 + 128) = 0u;
  *(_OWORD *)(v13 + 144) = 0u;
  *(unsigned char *)(v13 + 160) = 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5, a1, a4);
  uint64_t v14 = a5 + v12[9];
  *(void *)uint64_t v14 = *(void *)a2;
  *(_DWORD *)(v14 + 8) = v10;
  uint64_t v15 = a5 + v12[10];
  double result = *(double *)a3;
  *(void *)uint64_t v15 = *(void *)a3;
  *(_DWORD *)(v15 + 8) = v11;
  return result;
}

uint64_t protocol witness for StatefulRule.updateValue() in conformance UnaryPositionAwareLayoutComputer<A>(uint64_t a1)
{
  return UnaryPositionAwareLayoutComputer.updateValue()(a1, (uint64_t)type metadata accessor for UnaryPositionAwareLayoutEngine, (void (*)(char *, _DWORD *, _DWORD *, uint64_t, uint64_t))UnaryPositionAwareLayoutEngine.init(layout:layoutContext:child:), (uint64_t)&protocol conformance descriptor for UnaryPositionAwareLayoutComputer<A>, (uint64_t)&protocol witness table for UnaryPositionAwareLayoutEngine<A>);
}

float64x2_t *UnaryPositionAwareChildGeometry.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v28 = a6;
  uint64_t v13 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  double result = (float64x2_t *)AGGraphGetCurrentAttribute();
  int v17 = *MEMORY[0x263F288F8];
  if (result == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    int v18 = (int)result;
    uint64_t v26 = a1;
    int v27 = (float64x2_t *)a7;
    unint64_t v25 = HIDWORD(a4);
    if (v17 == a4) {
      int v19 = 0;
    }
    else {
      int v19 = a4;
    }
    if (v17 == a4) {
      int v20 = v17;
    }
    else {
      int v20 = v19;
    }
    uint64_t Value = AGGraphGetValue();
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, Value, a5);
    v36[0] = v18;
    v36[1] = v20;
    v36[2] = v17;
    int v29 = v18;
    int v30 = v18;
    int v31 = a2;
    int v32 = HIDWORD(a3);
    int v33 = a3;
    int v34 = HIDWORD(a2);
    int v35 = v25;
    (*(void (**)(uint64_t *__return_ptr, _DWORD *, int *, uint64_t))(v28 + 48))(&v37, v36, &v29, a5);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, a5);
    int v29 = v18;
    int v30 = v20;
    int v31 = v17;
    double v22 = *(double *)AGGraphGetValue();
    LOBYTE(v36[0]) = *(unsigned char *)AGGraphGetValue();
    uint64_t v23 = v27;
    LayoutProxy.finallyPlaced(at:in:layoutDirection:)(&v37, (unsigned __int8 *)v36, (uint64_t)v27, v22);
    double result = (float64x2_t *)AGGraphGetValue();
    *uint64_t v23 = vaddq_f64(*result, *v23);
  }
  return result;
}

float64x2_t *protocol witness for Rule.value.getter in conformance UnaryPositionAwareChildGeometry<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return UnaryPositionAwareChildGeometry.value.getter(*(void *)v2, *(void *)(v2 + 8), *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance UnaryPositionAwareChildGeometry<A>(uint64_t a1)
{
  return specialized UnaryChildGeometry.description.getter(*(void *)(a1 + 16), *(void *)(a1 + 24), 19, 0x1000000000000011, (void *)0x8000000246220A90);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance UnaryChildGeometry<A>(uint64_t a1)
{
  return specialized UnaryChildGeometry.description.getter(*(void *)(a1 + 16), *(void *)(a1 + 24), 20, 0x1000000000000012, (void *)0x8000000246220AB0);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance UnaryLayoutComputer<A>(uint64_t a1)
{
  return specialized UnaryChildGeometry.description.getter(*(void *)(a1 + 16), *(void *)(a1 + 24), 21, 0x1000000000000013, (void *)0x8000000246220A70);
}

uint64_t UnaryLayoutEngine.ignoresAutomaticPadding()(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(a1 + 40));
  int v3 = *((_DWORD *)v2 + 2);
  uint64_t v5 = *v2;
  int v6 = v3;
  return (*(uint64_t (**)(uint64_t *, void))(*(void *)(a1 + 24) + 72))(&v5, *(void *)(a1 + 16)) & 1;
}

double specialized closure #1 in UnaryLayoutEngine.childPlacement(at:)@<D0>(unsigned int a1@<W0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  char v6 = a1;
  unsigned int v8 = a1 >> 8;
  PlacementContext.proposedSize.getter((uint64_t)&v14);
  char v9 = v15;
  uint64_t v10 = v16;
  char v11 = v17;
  double result = dbl_2461E10D8[v6];
  double v13 = dbl_2461E10D8[(char)v8];
  *(void *)a2 = v14;
  *(unsigned char *)(a2 + 8) = v9;
  *(void *)(a2 + 16) = v10;
  *(unsigned char *)(a2 + 24) = v11;
  *(double *)(a2 + 32) = result;
  *(double *)(a2 + 40) = v13;
  *(double *)(a2 + 48) = result * a3;
  *(double *)(a2 + 56) = v13 * a4;
  return result;
}

float64x2_t LayoutPositionQuery.value.getter@<Q0>(float64x2_t *a1@<X8>)
{
  uint64_t Value = (float64x2_t *)AGGraphGetValue();
  float64x2_t result = vaddq_f64(*Value, *(float64x2_t *)AGGraphGetValue());
  *a1 = result;
  return result;
}

float64x2_t protocol witness for Rule.value.getter in conformance LayoutPositionQuery@<Q0>(float64x2_t *a1@<X8>)
{
  uint64_t Value = (float64x2_t *)AGGraphGetValue();
  float64x2_t result = vaddq_f64(*Value, *(float64x2_t *)AGGraphGetValue());
  *a1 = result;
  return result;
}

uint64_t specialized SecondaryChild.value.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  uint64_t v5 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  unsigned int v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v43 = (char *)&v40 - v10;
  MEMORY[0x270FA5388](v11);
  *(void *)&long long v44 = (char *)&v40 - v12;
  type metadata accessor for (key: AnyHashable, value: ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200]);
  MEMORY[0x270FA5388](v13 - 8);
  char v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  int v18 = (char *)&v40 - v17;
  uint64_t CurrentAttribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = CurrentAttribute;
    int v42 = a2;
    if (one-time initialization token for lastestAccessLists == -1) {
      goto LABEL_3;
    }
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  int v41 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x263F8EE78];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v18, 1, 1, v5);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v21 = *(void *)(StatusReg + 848);
  *(void *)(StatusReg + 848) = v18;
  specialized closure #1 in SecondaryChild.value.getter(a1, (uint64_t)v45);
  *(void *)(StatusReg + 848) = v21;
  outlined init with copy of ObservationTracking._AccessList?((uint64_t)v18, (uint64_t)v15, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200]);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v15, 1, v5) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?((uint64_t)v15, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200]);
  }
  else
  {
    uint64_t v22 = v44;
    unint64_t v40 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
    v40((char *)v44, v15, v5);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v43, v22, v5);
    swift_beginAccess();
    uint64_t v23 = (char *)static ObservationRegistrar.lastestAccessLists;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v23;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v23 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v23 + 2) + 1, 1, (unint64_t)v23);
      static ObservationRegistrar.lastestAccessLists = v23;
    }
    unint64_t v26 = *((void *)v23 + 2);
    unint64_t v25 = *((void *)v23 + 3);
    if (v26 >= v25 >> 1)
    {
      uint64_t v23 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1, (unint64_t)v23);
      static ObservationRegistrar.lastestAccessLists = v23;
    }
    *((void *)v23 + 2) = v26 + 1;
    v40(&v23[((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v26], v43, v5);
    swift_endAccess();
    (*(void (**)(void, uint64_t))(v6 + 8))(v44, v5);
  }
  uint64_t v27 = v45[0];
  uint64_t v28 = v45[1];
  long long v44 = v47;
  uint64_t v29 = v48;
  outlined destroy of ObservationTracking._AccessList?((uint64_t)v18, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8F200]);
  long long v30 = v46;
  int v31 = v42;
  *int v42 = v27;
  v31[1] = v28;
  long long v32 = v44;
  *((_OWORD *)v31 + 1) = v30;
  *((_OWORD *)v31 + 2) = v32;
  v31[6] = v29;
  uint64_t v33 = *((void *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v33)
  {
    uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
    uint64_t v35 = v6 + 16;
    int v34 = v36;
    uint64_t v37 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v35 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 64));
    uint64_t v38 = *(void *)(v35 + 56);
    swift_bridgeObjectRetain();
    do
    {
      v34(v8, v37, v5);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v8, v2);
      (*(void (**)(char *, uint64_t))(v35 - 8))(v8, v5);
      v37 += v38;
      --v33;
    }
    while (v33);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v41;
  return swift_bridgeObjectRelease();
}

uint64_t specialized closure #1 in SecondaryChild.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v18 = a1;
  type metadata accessor for _OverlayPreferenceModifier<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>>();
  uint64_t Value = AGGraphGetValue();
  uint64_t v5 = *(void (**)(uint64_t *))Value;
  uint64_t v7 = *(void *)(Value + 8);
  uint64_t v6 = *(void *)(Value + 16);
  uint64_t v8 = *(void *)(Value + 24);
  v21[0] = *(void *)Value;
  v21[1] = v7;
  v21[2] = v6;
  v21[3] = v8;
  if ((v9 & 2) == 0) {
    return specialized closure #1 in closure #1 in SecondaryChild.value.getter(v5, v7, v6, v8, a1);
  }
  uint64_t v20 = 0;
  memset(v19, 0, sizeof(v19));
  MEMORY[0x270FA5388](v5);
  void v15[2] = v19;
  v15[3] = partial apply for specialized closure #1 in closure #1 in SecondaryChild.value.getter;
  v15[4] = &v17;
  v15[5] = v21;
  swift_retain();
  uint64_t result = specialized static Update.syncMain(_:)((uint64_t (*)(void))partial apply for specialized closure #1 in Attribute.syncMainIfReferences<A>(do:), (uint64_t)v15);
  uint64_t v11 = *(void *)&v19[1];
  if (*(void *)&v19[1])
  {
    uint64_t v13 = *((void *)&v19[2] + 1);
    uint64_t v12 = v20;
    long long v16 = *(_OWORD *)((char *)&v19[1] + 8);
    long long v14 = v19[0];
    uint64_t result = swift_release();
    *(_OWORD *)a2 = v14;
    *(void *)(a2 + 16) = v11;
    *(_OWORD *)(a2 + 24) = v16;
    *(void *)(a2 + 40) = v13;
    *(void *)(a2 + 48) = v12;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized closure #1 in closure #1 in SecondaryChild.value.getter(void (*a1)(uint64_t *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*MEMORY[0x263F288F8] == HIDWORD(a5))
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    uint64_t Value = &static Text.LayoutKey.defaultValue;
  }
  else
  {
    _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for [Text.LayoutKey.AnchoredLayout], (uint64_t)&type metadata for Text.LayoutKey.AnchoredLayout, MEMORY[0x263F8D488]);
    uint64_t Value = (uint64_t *)AGGraphGetValue();
  }
  uint64_t v8 = *Value;
  swift_bridgeObjectRetain();
  a1(&v8);

  return swift_bridgeObjectRelease();
}

uint64_t specialized ShapeStyle.copyStyle(name:in:foregroundStyle:)(unsigned __int8 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v10[1] = 0;
  v10[2] = 0;
  v10[0] = a1;
  char v11 = 3;
  uint64_t v12 = 0;
  char v13 = 5;
  uint64_t v14 = a2;
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  long long v17 = 0u;
  long long v18 = 0u;
  char v19 = 1;
  __int16 v20 = 0;
  swift_retain();
  swift_retain();
  swift_retain();
  specialized Paint._apply(to:)((uint64_t)v10);
  uint64_t v5 = v12;
  char v6 = v13;
  if (v13 == 2)
  {
    swift_retain();
    uint64_t v7 = v5;
  }
  else
  {
    type metadata accessor for ModifiedContent<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, _SafeAreaInsetsModifier>(0, &lazy cache variable for type metadata for ShapeStyleBox<AngularGradient>, (uint64_t)&type metadata for AngularGradient, (uint64_t)&protocol witness table for AngularGradient, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ShapeStyleBox);
    uint64_t v7 = swift_allocObject();
    long long v8 = *(_OWORD *)(v4 + 16);
    *(_OWORD *)(v7 + 16) = *(_OWORD *)v4;
    *(_OWORD *)(v7 + 32) = v8;
    *(void *)(v7 + 48) = *(void *)(v4 + 32);
    swift_bridgeObjectRetain();
  }
  outlined consume of _ShapeStyle_Shape.Result(v5, v6);
  swift_release();
  swift_release();
  swift_release();
  return v7;
}

uint64_t specialized _ForegroundStyleModifier2.ForegroundStyleEnvironment.value.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v3 = *Value;
  uint64_t v4 = Value[1];
  *a1 = *Value;
  a1[1] = v4;
  type metadata accessor for _ForegroundStyleModifier2<AngularGradient, Color>();
  uint64_t v5 = AGGraphGetValue();
  uint64_t v6 = *(void *)(v5 + 32);
  long long v7 = *(_OWORD *)(v5 + 16);
  v14[0] = *(_OWORD *)v5;
  v14[1] = v7;
  uint64_t v15 = v6;
  swift_retain();
  swift_retain();
  outlined retain of RadialGradient(v14);
  uint64_t v8 = specialized ShapeStyle.copyStyle(name:in:foregroundStyle:)(0, v3, v4, 0);
  outlined release of RadialGradient(v14);
  uint64_t v9 = *(void *)(AGGraphGetValue() + 40);
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v10 = specialized ShapeStyle.copyStyle(name:in:foregroundStyle:)(0, v3, v4, 0, v9);
  swift_release();
  swift_release();
  swift_release();
  type metadata accessor for ShapeStyleBox<ShapeStylePair<AnyShapeStyle, AnyShapeStyle>>(0, &lazy cache variable for type metadata for ShapeStyleBox<ShapeStylePair<AnyShapeStyle, AnyShapeStyle>>, (uint64_t (*)(uint64_t))type metadata accessor for ShapeStylePair<AnyShapeStyle, AnyShapeStyle>, (uint64_t)&protocol witness table for ShapeStylePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShapeStyleBox);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v8;
  *(void *)(v11 + 24) = v10;
  swift_retain_n();
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a1, v11);
  swift_release();
  swift_release();
  if (v4)
  {
    uint64_t v12 = *a1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v12);
    swift_release();
    swift_release();
  }
  swift_release();
  return swift_release();
}

uint64_t specialized PreferenceTransform.value.getter(uint64_t a1)
{
  if (*MEMORY[0x263F288F8] == HIDWORD(a1))
  {
    uint64_t v2 = 0;
    char v3 = 1;
  }
  else
  {
    _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Int?, MEMORY[0x263F8D6C8], MEMORY[0x263F8D8F0]);
    uint64_t Value = AGGraphGetValue();
    uint64_t v2 = *(void *)Value;
    char v3 = *(unsigned char *)(Value + 8);
  }
  uint64_t v6 = v2;
  char v7 = v3;
  specialized Attribute.syncMainIfReferences<A>(do:)(a1, a1, (uint64_t)&v6);
  return v6;
}

{
  uint64_t *Value;
  uint64_t v4;

  if (*MEMORY[0x263F288F8] == HIDWORD(a1))
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    uint64_t Value = &static UpdateScrollStateRequestKey.defaultValue;
  }
  else
  {
    _s7SwiftUI16TimelineSchedule_pSgMaTm_0(0, &lazy cache variable for type metadata for [ScrollStateRequest], (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest, (uint64_t)&protocol descriptor for ScrollStateRequest, MEMORY[0x263F8D488]);
    uint64_t Value = (uint64_t *)AGGraphGetValue();
  }
  uint64_t v4 = *Value;
  swift_bridgeObjectRetain();
  specialized Attribute.syncMainIfReferences<A>(do:)(a1, a1, (uint64_t)&v4);
  return v4;
}

{
  uint64_t *Value;
  uint64_t v4;

  if (*MEMORY[0x263F288F8] == HIDWORD(a1))
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    uint64_t Value = &static ScrollTargetRole.ContentKey.defaultValue;
  }
  else
  {
    type metadata accessor for [ScrollTargetRole.Role : [ScrollableCollection]]();
    uint64_t Value = (uint64_t *)AGGraphGetValue();
  }
  uint64_t v4 = *Value;
  swift_bridgeObjectRetain();
  specialized Attribute.syncMainIfReferences<A>(do:)(a1, a1, (uint64_t)&v4);
  return v4;
}

unint64_t specialized EventFilterEvents.value.getter(uint64_t a1)
{
  type metadata accessor for [EventID : EventType]();
  AGGraphGetValue();
  uint64_t v2 = swift_bridgeObjectRetain();
  unint64_t v3 = specialized Dictionary.optimisticFilter(_:)(v2, a1);
  swift_bridgeObjectRelease();
  AGGraphGetValue();
  return v3;
}

uint64_t protocol witness for static UnaryLayout.makeViewImpl(modifier:inputs:body:) in conformance _AlignmentLayout@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, long long *)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = *a1;
  long long v5 = *(_OWORD *)(a2 + 48);
  void v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  int v9 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static UnaryLayout<>.makeViewImpl(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t protocol witness for static UnaryLayout.makeViewImpl(modifier:inputs:body:) in conformance _FrameLayout@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, long long *)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = *a1;
  long long v5 = *(_OWORD *)(a2 + 48);
  void v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  int v9 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static UnaryLayout<>.makeViewImpl(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t protocol witness for static UnaryLayout.makeViewImpl(modifier:inputs:body:) in conformance _FlexFrameLayout@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, long long *)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = *a1;
  long long v5 = *(_OWORD *)(a2 + 48);
  void v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  int v9 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static UnaryLayout<>.makeViewImpl(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

char *specialized LayoutGesture.phase(box:)@<X0>(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  swift_beginAccess();
  uint64_t v3 = *(void *)(a1 + 160);
  uint64_t v4 = *(void *)(v3 + 16);
  uint64_t v5 = MEMORY[0x263F8EE78];
  if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = v4 - 1;
    uint64_t v7 = MEMORY[0x263F8EE78];
    for (uint64_t i = 32; ; i += 208)
    {
      long long v43 = *(_OWORD *)(v3 + i);
      long long v9 = *(_OWORD *)(v3 + i + 16);
      long long v10 = *(_OWORD *)(v3 + i + 32);
      long long v11 = *(_OWORD *)(v3 + i + 64);
      long long v46 = *(_OWORD *)(v3 + i + 48);
      long long v47 = v11;
      long long v44 = v9;
      long long v45 = v10;
      long long v12 = *(_OWORD *)(v3 + i + 80);
      long long v13 = *(_OWORD *)(v3 + i + 96);
      long long v14 = *(_OWORD *)(v3 + i + 128);
      long long v50 = *(_OWORD *)(v3 + i + 112);
      long long v51 = v14;
      long long v48 = v12;
      long long v49 = v13;
      long long v15 = *(_OWORD *)(v3 + i + 144);
      long long v16 = *(_OWORD *)(v3 + i + 160);
      long long v17 = *(_OWORD *)(v3 + i + 176);
      *(_OWORD *)((char *)v54 + 12) = *(_OWORD *)(v3 + i + 188);
      long long v53 = v16;
      v54[0] = v17;
      long long v52 = v15;
      if (*(void *)(*((void *)&v45 + 1) + 16))
      {
        outlined retain of LayoutGestureBox.Child((uint64_t)&v43);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v55 = v7;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v7 + 16) + 1, 1);
          uint64_t v7 = v55;
        }
        unint64_t v20 = *(void *)(v7 + 16);
        unint64_t v19 = *(void *)(v7 + 24);
        if (v20 >= v19 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
          uint64_t v7 = v55;
        }
        *(void *)(v7 + 16) = v20 + 1;
        uint64_t v21 = (_OWORD *)(v7 + 208 * v20);
        v21[2] = v43;
        long long v22 = v44;
        long long v23 = v45;
        long long v24 = v47;
        v21[5] = v46;
        v21[6] = v24;
        v21[3] = v22;
        void v21[4] = v23;
        long long v25 = v48;
        long long v26 = v49;
        long long v27 = v51;
        v21[9] = v50;
        v21[10] = v27;
        v21[7] = v25;
        v21[8] = v26;
        long long v28 = v52;
        long long v29 = v53;
        long long v30 = v54[0];
        *(_OWORD *)((char *)v21 + 220) = *(_OWORD *)((char *)v54 + 12);
        v21[12] = v29;
        v21[13] = v30;
        v21[11] = v28;
      }
      if (!v6) {
        break;
      }
      --v6;
    }
    swift_bridgeObjectRelease();
    int64_t v31 = *(void *)(v7 + 16);
    if (v31)
    {
LABEL_12:
      *(void *)&long long v43 = v5;
      uint64_t result = (char *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31, 0);
      unint64_t v33 = v43;
      int v34 = (unsigned char *)(v7 + 60);
      uint64_t v35 = MEMORY[0x263F8EE60] + 8;
      while ((*v34 & 1) == 0)
      {
        _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<()>, v35, (uint64_t (*)(void, uint64_t))type metadata accessor for GesturePhase);
        uint64_t result = (char *)AGGraphGetValue();
        char v36 = *result;
        char v37 = result[1];
        if (v37) {
          BOOL v38 = 0;
        }
        else {
          BOOL v38 = (*result & 1) == 0;
        }
        if (v38)
        {
          char v36 = 0;
          LOBYTE(v55) = 0;
        }
        *(void *)&long long v43 = v33;
        unint64_t v40 = *(void *)(v33 + 16);
        unint64_t v39 = *(void *)(v33 + 24);
        if (v40 >= v39 >> 1)
        {
          uint64_t result = (char *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1, v40 + 1, 1);
          unint64_t v33 = v43;
        }
        *(void *)(v33 + 16) = v40 + 1;
        unint64_t v41 = v33 + 2 * v40;
        *(unsigned char *)(v41 + 32) = v36;
        *(unsigned char *)(v41 + 33) = v37;
        v34 += 208;
        if (!--v31)
        {
          swift_release();
          goto LABEL_26;
        }
      }
      __break(1u);
      return result;
    }
  }
  else
  {
    uint64_t v7 = MEMORY[0x263F8EE78];
    int64_t v31 = *(void *)(MEMORY[0x263F8EE78] + 16);
    if (v31) {
      goto LABEL_12;
    }
  }
  swift_release();
  unint64_t v33 = MEMORY[0x263F8EE78];
LABEL_26:
  specialized Collection<>.merged()(v33, a2);
  return (char *)swift_bridgeObjectRelease();
}

uint64_t specialized closure #1 in LayoutGestureBox.willSendEvents<A>(_:gesture:boxValueAttribute:)(uint64_t a1, unsigned int a2, unsigned int a3, unint64_t a4)
{
  unint64_t v36 = __PAIR64__(a3, a2);
  uint64_t v50 = *MEMORY[0x263EF8340];
  *(_OWORD *)&v44[28] = *(_OWORD *)(a1 + 124);
  long long v5 = *(_OWORD *)(a1 + 112);
  long long v6 = *(_OWORD *)(a1 + 32);
  long long v40 = *(_OWORD *)(a1 + 16);
  long long v41 = v6;
  long long v7 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)int v42 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)&v42[16] = v7;
  long long v8 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)long long v44 = *(_OWORD *)(a1 + 96);
  *(_OWORD *)&v44[16] = v5;
  long long v43 = v8;
  uint64_t v9 = *(void *)&v44[36];
  long long v33 = *(_OWORD *)&v44[8];
  uint64_t v29 = v40;
  int v28 = DWORD2(v40);
  uint64_t v10 = *((void *)&v41 + 1);
  uint64_t v11 = *(void *)v42;
  long long v30 = *(_OWORD *)&v42[8];
  uint64_t v12 = *(void *)&v42[24];
  long long v13 = v8;
  int v31 = *(_DWORD *)v44;
  int v32 = DWORD2(v5);
  swift_beginAccess();
  int v14 = *(_DWORD *)(v41 + 16);
  uint64_t v15 = *(void *)(v41 + 24);
  long long v34 = *(_OWORD *)(v41 + 48);
  long long v35 = *(_OWORD *)(v41 + 32);
  uint64_t v17 = *(void *)(v41 + 64);
  uint64_t v16 = *(void *)(v41 + 72);
  char v18 = *(unsigned char *)(v41 + 80);
  char v19 = *(unsigned char *)(v41 + 81);
  uint64_t v20 = *(void *)(v41 + 88);
  _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(void, uint64_t))type metadata accessor for MutableBox);
  uint64_t v21 = swift_allocObject();
  *(_DWORD *)(v21 + 16) = v14;
  *(void *)(v21 + 24) = v15;
  *(_OWORD *)(v21 + 32) = v35;
  *(_OWORD *)(v21 + 48) = v34;
  *(void *)(v21 + 64) = v17;
  *(void *)(v21 + 72) = v16;
  *(unsigned char *)(v21 + 80) = v18;
  *(unsigned char *)(v21 + 81) = v19;
  *(void *)(v21 + 88) = v20;
  outlined retain of _GestureInputs((uint64_t)&v40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  *(void *)&long long v45 = v36;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for [EventID : EventType]();
  type metadata accessor for ModifiedContent<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, _SafeAreaInsetsModifier>(0, &lazy cache variable for type metadata for LayoutChildEvents<DefaultLayoutGesture>, (uint64_t)&type metadata for DefaultLayoutGesture, (uint64_t)&protocol witness table for DefaultLayoutGesture, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for LayoutChildEvents);
  lazy protocol witness table accessor for type LayoutChildEvents<DefaultLayoutGesture> and conformance LayoutChildEvents<A>();
  int v22 = Attribute.init<A>(body:value:flags:update:)();
  *(void *)&long long v45 = v36;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for ModifiedContent<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, _SafeAreaInsetsModifier>(0, &lazy cache variable for type metadata for LayoutChildSeed<DefaultLayoutGesture>, (uint64_t)&type metadata for DefaultLayoutGesture, (uint64_t)&protocol witness table for DefaultLayoutGesture, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for LayoutChildSeed);
  lazy protocol witness table accessor for type LayoutChildSeed<DefaultLayoutGesture> and conformance LayoutChildSeed<A>();
  int v23 = Attribute.init<A>(body:value:flags:update:)();
  swift_beginAccess();
  if ((a4 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_5:
    __break(1u);
  }
  uint64_t v24 = *(void *)(a1 + 160);
  if (*(void *)(v24 + 16) <= a4) {
    goto LABEL_5;
  }
  uint64_t v25 = *(void *)(v24 + 208 * a4 + 32);
  *(void *)&long long v45 = v29;
  DWORD2(v45) = v28;
  *(void *)&long long v46 = v21;
  *((void *)&v46 + 1) = v10;
  *(void *)long long v47 = v11;
  *(_OWORD *)&v47[8] = v30;
  *(void *)&v47[24] = v12;
  long long v48 = v13;
  *(_OWORD *)&v49[8] = v33;
  *(_DWORD *)long long v49 = v31;
  *(_DWORD *)&v49[24] = v32;
  *(_DWORD *)&v49[28] = v22;
  *(_DWORD *)&v49[32] = v23;
  *(void *)&v49[36] = v9;
  v38[4] = v13;
  v38[5] = *(_OWORD *)v49;
  v39[0] = *(_OWORD *)&v49[16];
  *(_OWORD *)((char *)v39 + 12) = *(_OWORD *)&v49[28];
  v38[0] = v45;
  v38[1] = v46;
  v38[2] = *(_OWORD *)v47;
  v38[3] = *(_OWORD *)&v47[16];
  long long v26 = *(void (**)(_OWORD *))(*(void *)v25 + 112);
  swift_retain();
  outlined retain of _GestureInputs((uint64_t)&v45);
  v26(v38);
  swift_release();
  outlined release of _GestureInputs((uint64_t)&v45);
  return outlined release of _GestureInputs((uint64_t)&v45);
}

uint64_t specialized UpdateLayoutGestureBox.value.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Value = (unsigned int *)AGGraphGetValue();
  LayoutGestureBox.updateResetSeed(_:)(*Value);
  long long v5 = (uint64_t *)AGGraphGetValue();
  char v7 = v6;
  uint64_t v8 = *v5;
  swift_retain();
  if (v7) {
    LayoutGestureBox.updateResponder(_:)(v8);
  }
  type metadata accessor for [EventID : EventType]();
  uint64_t result = AGGraphGetCurrentAttribute();
  if (result == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    unsigned int v10 = result;
    AGGraphGetValue();
    uint64_t v11 = swift_bridgeObjectRetain();
    specialized LayoutGestureBox.willSendEvents<A>(_:gesture:boxValueAttribute:)(v11, v10);
    swift_bridgeObjectRelease();
    swift_retain();
    swift_release();
    return a3;
  }
  return result;
}

uint64_t specialized LayoutChildEvents.value.getter(uint64_t a1)
{
  int v1 = HIDWORD(a1);
  uint64_t v2 = *(void *)AGGraphGetValue();
  swift_beginAccess();
  uint64_t v3 = *(void *)(v2 + 160);
  uint64_t v4 = *(void *)(v3 + 16);
  if (!v4) {
    return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  }
  for (uint64_t i = v3 + 64; *(_DWORD *)(i - 24) != v1; i += 208)
  {
    if (!--v4) {
      return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    }
  }
  return swift_bridgeObjectRetain();
}

uint64_t specialized LayoutChildSeed.value.getter(uint64_t a1)
{
  int v1 = HIDWORD(a1);
  uint64_t Value = AGGraphGetValue();
  uint64_t v3 = *(void *)Value;
  int v4 = *(_DWORD *)(*(void *)Value + 176);
  swift_beginAccess();
  uint64_t v5 = *(void *)(v3 + 160);
  uint64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
    char v7 = (int *)(v5 + 44);
    while (*(v7 - 1) != v1)
    {
      v7 += 52;
      if (!--v6) {
        goto LABEL_5;
      }
    }
    int v8 = *v7;
  }
  else
  {
LABEL_5:
    int v8 = 0x10000;
  }
  return (v8 + v4);
}

__n128 specialized LayoutDebug.value.getter@<Q0>(unint64_t a1@<X1>, uint64_t a2@<X8>)
{
  unint64_t v3 = HIDWORD(a1);
  uint64_t v4 = *(void *)AGGraphGetValue();
  swift_beginAccess();
  uint64_t v5 = *(void *)(v4 + 160);
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = MEMORY[0x263F8EE78];
  if (v6)
  {
    int v50 = v3;
    uint64_t v51 = a2;
    uint64_t v8 = v5 + 80;
    swift_bridgeObjectRetain_n();
    uint64_t v9 = (void *)MEMORY[0x263F8EE78];
    for (uint64_t i = v6 - 1; ; --i)
    {
      uint64_t v11 = (uint64_t (*)(void, uint64_t))MEMORY[0x263F8D8F0];
      outlined init with take of GestureDebug.Data?(v8, (uint64_t)v77, &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, MEMORY[0x263F8D8F0]);
      outlined init with take of GestureDebug.Data?((uint64_t)v77, (uint64_t)__src, &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, v11);
      if (_s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOSgWOg((uint64_t)__src) != 1)
      {
        outlined init with take of LayoutGestureBox.Child.DebugData((uint64_t)__src, (uint64_t)v71);
        if (_s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOWOg((uint64_t)v71) == 1)
        {
          _s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOWOj0_((uint64_t)v71);
          uint64_t Value = (long long *)AGGraphGetValue();
          long long v62 = *Value;
          long long v13 = Value[4];
          long long v15 = Value[1];
          long long v14 = Value[2];
          long long v65 = Value[3];
          long long v66 = v13;
          long long v63 = v15;
          long long v64 = v14;
          long long v16 = Value[8];
          long long v18 = Value[5];
          long long v17 = Value[6];
          long long v69 = Value[7];
          long long v70 = v16;
          long long v67 = v18;
          long long v68 = v17;
          outlined retain of GestureDebug.Data((uint64_t)&v62);
          outlined release of LayoutGestureBox.Child.DebugData?((unint64_t *)v77);
          uint64_t v60 = *((void *)&v70 + 1);
          long long v56 = v67;
          long long v58 = v66;
          long long v54 = v69;
          long long v55 = v68;
          char v19 = v70;
          long long v52 = v65;
          long long v53 = v64;
          uint64_t v20 = *(void *)((char *)&v63 + 4);
          char v21 = v63;
          char v22 = BYTE1(v63);
          uint64_t v23 = *((void *)&v62 + 1);
          char v24 = v62;
        }
        else
        {
          uint64_t v25 = _s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOWOj0_((uint64_t)v71);
          uint64_t v60 = *(void *)(v25 + 136);
          long long v56 = *(_OWORD *)(v25 + 80);
          long long v58 = *(_OWORD *)(v25 + 64);
          long long v54 = *(_OWORD *)(v25 + 112);
          long long v55 = *(_OWORD *)(v25 + 96);
          char v19 = *(unsigned char *)(v25 + 128);
          long long v52 = *(_OWORD *)(v25 + 48);
          long long v53 = *(_OWORD *)(v25 + 32);
          uint64_t v20 = *(void *)(v25 + 20);
          char v21 = *(unsigned char *)(v25 + 16);
          char v22 = *(unsigned char *)(v25 + 17);
          uint64_t v23 = *(void *)(v25 + 8);
          char v24 = *(unsigned char *)v25;
          outlined init with take of GestureDebug.Data?((uint64_t)v77, (uint64_t)&v62, &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, MEMORY[0x263F8D8F0]);
          outlined retain of LayoutGestureBox.Child.DebugData((uint64_t *)&v62);
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
        }
        unint64_t v27 = v9[2];
        unint64_t v26 = v9[3];
        if (v27 >= v26 >> 1) {
          uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v26 > 1), v27 + 1, 1, v9);
        }
        v9[2] = v27 + 1;
        int v28 = &v9[18 * v27];
        *((unsigned char *)v28 + 32) = v24;
        int v29 = *(_DWORD *)((char *)&v62 + 3);
        *(_DWORD *)((char *)v28 + 33) = v62;
        *((_DWORD *)v28 + 9) = v29;
        v28[5] = v23;
        *((unsigned char *)v28 + 48) = v21;
        *((unsigned char *)v28 + 49) = v22;
        *(void *)((char *)v28 + 52) = v20;
        *((_OWORD *)v28 + 4) = v53;
        *((_OWORD *)v28 + 5) = v52;
        *((_OWORD *)v28 + 6) = v58;
        *((_OWORD *)v28 + 7) = v56;
        *((_OWORD *)v28 + 8) = v55;
        *((_OWORD *)v28 + 9) = v54;
        *((unsigned char *)v28 + 160) = v19;
        int v30 = *(_DWORD *)v76;
        *((_DWORD *)v28 + 41) = *(_DWORD *)&v76[3];
        *(_DWORD *)((char *)v28 + 161) = v30;
        v28[21] = v60;
      }
      if (!i) {
        break;
      }
      v8 += 208;
    }
    swift_bridgeObjectRelease_n();
    LODWORD(v3) = v50;
    a2 = v51;
    uint64_t v7 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v9 = (void *)MEMORY[0x263F8EE78];
  }
  uint64_t v31 = AGGraphGetValue();
  uint64_t v32 = *(void *)v31;
  uint64_t v33 = *(void *)(v31 + 8);
  uint64_t v34 = *(void *)(v31 + 16);
  double v35 = *(double *)(v31 + 24);
  double v36 = *(double *)(v31 + 32);
  uint64_t v78 = 0;
  memset(v77, 0, sizeof(v77));
  char v79 = 2;
  char v80 = 2;
  char v37 = (uint64_t *)AGGraphGetValue();
  uint64_t v38 = *v37;
  uint64_t v39 = v37[1];
  if (v32 || v35 != 0.0 || v36 != 0.0)
  {
    *(void *)&v71[0] = *v37;
    *((void *)&v71[0] + 1) = v39;
    *(void *)__srdouble c = v32;
    *(void *)&__src[8] = v33;
    *(void *)&__src[16] = v34;
    *(double *)&__src[24] = v35;
    *(double *)&__src[32] = v36;
    swift_retain();
    specialized ViewTransform.convert(_:_:)((uint64_t)v77, (double *)__src, (uint64_t)v71);
    uint64_t v39 = *((void *)&v71[0] + 1);
    uint64_t v38 = *(void *)&v71[0];
  }
  outlined destroy of ViewTransform.Conversion((uint64_t)v77);
  swift_release();
  specialized ArrayWith2Inline.init<A>(_:)((uint64_t)v9, __src);
  _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<()>, MEMORY[0x263F8EE60] + 8, (uint64_t (*)(void, uint64_t))type metadata accessor for GesturePhase);
  __int16 v40 = *(_WORD *)AGGraphGetValue();
  int v41 = *(_DWORD *)AGGraphGetValue();
  int v42 = (uint64_t *)AGGraphGetValue();
  uint64_t v43 = *v42;
  uint64_t v44 = v42[1];
  specialized ArrayWith2Inline.init<A>(_:)((uint64_t *)(v7 + 32), 0, (uint64_t)v71);
  long long v59 = v71[1];
  long long v61 = v71[0];
  __n128 v57 = (__n128)v71[2];
  uint64_t v45 = v72;
  uint64_t v46 = v73;
  char v47 = v74;
  uint64_t v48 = swift_allocObject();
  memcpy((void *)(v48 + 16), __src, 0x121uLL);
  *(unsigned char *)a2 = 4;
  *(_DWORD *)(a2 + 1) = v62;
  *(_DWORD *)(a2 + 4) = *(_DWORD *)((char *)&v62 + 3);
  *(void *)(a2 + 8) = &type metadata for DefaultLayoutGesture;
  *(_WORD *)(a2 + 16) = v40;
  *(_DWORD *)(a2 + 20) = v3;
  *(_DWORD *)(a2 + 24) = v41;
  *(void *)(a2 + 32) = v38;
  *(void *)(a2 + 40) = v39;
  *(void *)(a2 + 48) = v43;
  *(void *)(a2 + 56) = v44;
  *(_OWORD *)(a2 + 64) = v61;
  *(_OWORD *)(a2 + 80) = v59;
  __n128 result = v57;
  *(__n128 *)(a2 + 96) = v57;
  *(void *)(a2 + 112) = v45;
  *(void *)(a2 + 120) = v46;
  *(unsigned char *)(a2 + 128) = v47;
  *(_DWORD *)(a2 + 129) = *(_DWORD *)v76;
  *(_DWORD *)(a2 + 132) = *(_DWORD *)&v76[3];
  *(void *)(a2 + 136) = v48;
  return result;
}

uint64_t protocol witness for static UnaryLayout.makeViewImpl(modifier:inputs:body:) in conformance LayoutPriorityLayout@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, long long *)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = *a1;
  long long v5 = *(_OWORD *)(a2 + 48);
  void v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  int v9 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static UnaryLayout<>.makeViewImpl(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t specialized GesturePhase.applyingDependency(_:inheritedPhase:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X8>)
{
  switch((char)result)
  {
    case 1:
      if ((a2 & 2) == 0) {
        goto LABEL_12;
      }
      goto LABEL_3;
    case 2:
      goto LABEL_11;
    case 3:
      if ((a2 & 2) != 0)
      {
        *(void *)a7 = 0;
        *(void *)(a7 + 8) = 0;
        *(void *)(a7 + 16) = 0;
        *(unsigned char *)(a7 + 24) = 3;
      }
      else
      {
LABEL_11:
        if (a2)
        {
LABEL_12:
          *(void *)a7 = a3;
          *(void *)(a7 + 8) = a4;
          *(void *)(a7 + 16) = a5;
          *(unsigned char *)(a7 + 24) = a6;
        }
        else
        {
LABEL_3:
          if (((a6 - 1) & 0xFE) != 0) {
            uint64_t v7 = a3;
          }
          else {
            uint64_t v7 = a3;
          }
          if (((a6 - 1) & 0xFE) != 0) {
            char v8 = a6;
          }
          else {
            char v8 = 0;
          }
          *(void *)a7 = v7;
          *(void *)(a7 + 8) = a4;
          *(void *)(a7 + 16) = a5;
          *(unsigned char *)(a7 + 24) = v8;
        }
        return outlined copy of GesturePhase<TappableEvent>(a3, a4, a5, a6);
      }
      return result;
    default:
      goto LABEL_12;
  }
}

uint64_t protocol witness for static UnaryLayout.makeViewImpl(modifier:inputs:body:) in conformance _SafeAreaIgnoringLayout@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr, uint64_t, long long *)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = *a1;
  long long v5 = *(_OWORD *)(a2 + 48);
  void v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  int v9 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static UnaryLayout<>.makeViewImpl(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t protocol witness for static UnaryLayout.makeViewImpl(modifier:inputs:body:) in conformance _SafeAreaRegionsIgnoringLayout@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr, uint64_t, long long *)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = *a1;
  long long v5 = *(_OWORD *)(a2 + 48);
  void v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  int v9 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static UnaryLayout<>.makeViewImpl(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

void specialized ForEachState.update(view:)(int64_t *a1)
{
  uint64_t v2 = (int64_t *)v1;
  unint64_t v3 = a1;
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v7 = a1[2];
  uint64_t v6 = a1[3];
  unint64_t v9 = a1[4];
  uint64_t v8 = a1[5];
  int64_t isUniquelyReferenced_nonNull_native = a1[6];
  if (!AGSubgraphIsValid()) {
    return;
  }
  uint64_t v133 = v7;
  uint64_t v135 = v6;
  *(void *)(v1 + 248) = AGMakeUniqueID();
  int v11 = *(_DWORD *)(v1 + 256);
  *(_DWORD *)(v1 + 256) = v11 + 1;
  specialized ForEachState.invalidateViewCounts()();
  swift_beginAccess();
  uint64_t v12 = *(void *)(v1 + 144);
  if (v12 && !v2[20])
  {
    uint64_t v13 = v2[16];
    uint64_t v14 = v2[17];
    BOOL v15 = __OFSUB__(v14, v13);
    uint64_t v16 = v14 - v13;
    if (v15) {
      goto LABEL_148;
    }
    int64_t v17 = v3[1];
    uint64_t v18 = v17 - *v3;
    if (__OFSUB__(v17, *v3)) {
      goto LABEL_149;
    }
    uint64_t v130 = v9;
    uint64_t v131 = v8;
    int64_t v132 = isUniquelyReferenced_nonNull_native;
    if (v16 == v18) {
      goto LABEL_10;
    }
    int64_t isUniquelyReferenced_nonNull_native = 0xD000000000000018;
    uint64_t v144 = 0;
    unint64_t v145 = 0xE000000000000000;
    _StringGuts.grow(_:)(204);
    v19._countAndFlagsBits = 0xD0000000000000A2;
    v19._object = (void *)0x8000000246220AD0;
    String.append(_:)(v19);
    v20._countAndFlagsBits = 0x2820746E756F6320;
    v20._object = (void *)0xE800000000000000;
    String.append(_:)(v20);
    uint64_t v143 = v18;
    v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v22._object = (void *)0x8000000246220B80;
    v22._countAndFlagsBits = 0xD000000000000018;
    String.append(_:)(v22);
    if (v2[18])
    {
      uint64_t v23 = v2[16];
      uint64_t v24 = v2[17];
      BOOL v15 = __OFSUB__(v24, v23);
      uint64_t v25 = v24 - v23;
      if (v15) {
        goto LABEL_150;
      }
      uint64_t v143 = v25;
      v26._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v26);
      swift_bridgeObjectRelease();
      v27._countAndFlagsBits = 0xD0000000000000A6;
      v27._object = (void *)0x8000000246220BA0;
      String.append(_:)(v27);
      specialized static Log.externalWarning(_:)(v144, v145);
      swift_bridgeObjectRelease();
      uint64_t v12 = v2[18];
      if (v12)
      {
LABEL_10:
        uint64_t v28 = v2[16];
        uint64_t v29 = v2[17];
        unint64_t v9 = v2[20];
        outlined retain of ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>((uint64_t)v3);
        v2[18] = v133;
        v2[19] = v135;
        v2[20] = v130;
        v2[21] = v8;
        v2[22] = v132;
        v2[16] = v28;
        v2[17] = v29;
        outlined consume of ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>?(v28, v29, v12);
        swift_beginAccess();
        uint64_t v30 = v2[27];
        uint64_t v33 = *(void *)(v30 + 64);
        uint64_t v32 = v30 + 64;
        uint64_t v31 = v33;
        uint64_t v34 = -1;
        uint64_t v35 = -1 << *(unsigned char *)(v2[27] + 32);
        if (-v35 < 64) {
          uint64_t v34 = ~(-1 << -(char)v35);
        }
        unint64_t v36 = v34 & v31;
        int64_t isUniquelyReferenced_nonNull_native = (unint64_t)(63 - v35) >> 6;
        uint64_t v37 = swift_bridgeObjectRetain();
        int64_t v38 = 0;
        while (1)
        {
          if (v36)
          {
            unint64_t v39 = __clz(__rbit64(v36));
            v36 &= v36 - 1;
            unint64_t v40 = v39 | (v38 << 6);
          }
          else
          {
            int64_t v41 = v38 + 1;
            if (__OFADD__(v38, 1))
            {
              __break(1u);
              goto LABEL_134;
            }
            if (v41 >= isUniquelyReferenced_nonNull_native) {
              goto LABEL_67;
            }
            unint64_t v42 = *(void *)(v32 + 8 * v41);
            int64_t v43 = v38 + 1;
            if (!v42)
            {
              int64_t v43 = v38 + 2;
              if (v38 + 2 >= isUniquelyReferenced_nonNull_native) {
                goto LABEL_67;
              }
              unint64_t v42 = *(void *)(v32 + 8 * v43);
              if (!v42)
              {
                int64_t v44 = v38 + 3;
                if (v38 + 3 >= isUniquelyReferenced_nonNull_native)
                {
LABEL_67:
                  outlined consume of Set<EventID>.Iterator._Variant();
                  return;
                }
                unint64_t v42 = *(void *)(v32 + 8 * v44);
                int64_t v43 = v38 + 3;
                if (!v42)
                {
                  while (1)
                  {
                    int64_t v43 = v44 + 1;
                    if (__OFADD__(v44, 1)) {
                      break;
                    }
                    if (v43 >= isUniquelyReferenced_nonNull_native) {
                      goto LABEL_67;
                    }
                    unint64_t v42 = *(void *)(v32 + 8 * v43);
                    ++v44;
                    if (v42) {
                      goto LABEL_25;
                    }
                  }
LABEL_134:
                  __break(1u);
LABEL_135:
                  __break(1u);
                  goto LABEL_136;
                }
              }
            }
LABEL_25:
            unint64_t v36 = (v42 - 1) & v42;
            unint64_t v40 = __clz(__rbit64(v42)) + (v43 << 6);
            int64_t v38 = v43;
          }
          uint64_t v45 = *(void *)(*(void *)(v37 + 56) + 8 * v40);
          *(void *)(v45 + 120) = v2[31];
          if (*(_DWORD *)(v45 + 128) == v11) {
            *(_DWORD *)(v45 + 128) = *((_DWORD *)v2 + 64);
          }
        }
      }
      goto LABEL_161;
    }
LABEL_160:
    __break(1u);
LABEL_161:
    __break(1u);
LABEL_162:
    __break(1u);
LABEL_163:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  uint64_t v46 = v2[16];
  uint64_t v128 = v2[17];
  uint64_t v130 = v2[19];
  uint64_t v131 = v2[22];
  outlined retain of ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>((uint64_t)v3);
  v2[16] = v4;
  v2[17] = v5;
  v2[18] = v133;
  v2[19] = v6;
  v2[20] = v9;
  v2[21] = v8;
  v2[22] = isUniquelyReferenced_nonNull_native;
  outlined consume of ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>?(v46, v128, v12);
  char v47 = v2 + 28;
  swift_beginAccess();
  v2[28] = MEMORY[0x263F8EE80];
  swift_bridgeObjectRelease();
  if (*((unsigned char *)v2 + 124))
  {
    __break(1u);
    goto LABEL_160;
  }
  id v48 = (id)AGGraphGetAttributeGraph();
  uint64_t Counter = AGGraphGetCounter();

  v2[29] = Counter;
  if (v2[30] < 0)
  {
    v2[30] = 0x7FFFFFFFFFFFFFFFLL;
    goto LABEL_157;
  }
  int64_t v50 = *v3;
  int64_t isUniquelyReferenced_nonNull_native = v3[1];
  uint64_t v134 = v2 + 27;
  swift_beginAccess();
  uint64_t v51 = *(void *)(v2[27] + 16);
  int64_t v132 = (int64_t)(v2 + 34);
  swift_beginAccess();
  uint64_t v52 = *(void *)(v2[34] + 16);
  long long v53 = (void *)v2[28];
  uint64_t v142 = MEMORY[0x263F8EE88];
  v2[30] = 0;
  uint64_t v136 = v52;
  uint64_t v54 = v51 | v52;
  BOOL v55 = v51 == 0;
  uint64_t v126 = v53;
  swift_bridgeObjectRetain();
  uint64_t v129 = v2 + 28;
  if (v54 && v50 != isUniquelyReferenced_nonNull_native)
  {
    uint64_t v56 = 0;
    if (isUniquelyReferenced_nonNull_native <= v50) {
      int64_t v57 = v50;
    }
    else {
      int64_t v57 = isUniquelyReferenced_nonNull_native;
    }
    uint64_t v130 = v57 - v50;
    unint64_t v9 = v50;
    id v125 = v2;
    uint64_t v131 = isUniquelyReferenced_nonNull_native;
    while (1)
    {
      uint64_t v58 = v56;
      if (v3[4])
      {
        uint64_t v139 = (void *)v9;
        swift_retain();
        swift_getAtKeyPath();
        swift_release();
        uint64_t v58 = v141[0];
      }
      swift_beginAccess();
      uint64_t v59 = *v134;
      if (!*(void *)(*v134 + 16)) {
        break;
      }
      unint64_t v60 = specialized __RawDictionaryStorage.find<A>(_:)(v58);
      if ((v61 & 1) == 0) {
        break;
      }
      uint64_t v62 = *(void *)(*(void *)(v59 + 56) + 8 * v60);
      swift_endAccess();
      v2[30] = v56;
      swift_beginAccess();
      *(void *)(v62 + 104) = v9;
      uint64_t v63 = v2[31];
      *(void *)(v62 + 112) = v56;
      *(void *)(v62 + 120) = v63;
      *(_DWORD *)(v62 + 128) = *((_DWORD *)v2 + 64);
      --v51;
      if (*(unsigned char *)(v62 + 134)) {
        goto LABEL_43;
      }
      swift_bridgeObjectRelease();
      uint64_t v126 = (void *)*v47;
      swift_bridgeObjectRetain();
      int v64 = 1;
LABEL_44:
      uint64_t v65 = *(void *)v132;
      if (*(void *)(*(void *)v132 + 16)
        && (uint64_t v66 = static Hasher._hash(seed:_:)(),
            uint64_t v67 = -1 << *(unsigned char *)(v65 + 32),
            unint64_t v68 = v66 & ~v67,
            ((*(void *)(v65 + 56 + ((v68 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v68) & 1) != 0))
      {
        uint64_t v69 = ~v67;
        while (*(void *)(*(void *)(v65 + 48) + 8 * v68) != v58)
        {
          unint64_t v68 = (v68 + 1) & v69;
          if (((*(void *)(v65 + 56 + ((v68 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v68) & 1) == 0) {
            goto LABEL_49;
          }
        }
        specialized Set._Variant.insert(_:)(v141, v58);
        --v136;
      }
      else
      {
LABEL_49:
        if (!v64)
        {
          uint64_t v2 = v3;
          int64_t v70 = v50;
          uint64_t v71 = v51;
          swift_beginAccess();
          int64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v139 = (void *)*v47;
          uint64_t v72 = v139;
          void *v47 = 0x8000000000000000;
          unint64_t v74 = specialized __RawDictionaryStorage.find<A>(_:)(v58);
          uint64_t v75 = v72[2];
          BOOL v76 = (v73 & 1) == 0;
          uint64_t v77 = v75 + v76;
          if (__OFADD__(v75, v76)) {
            goto LABEL_138;
          }
          char v78 = v73;
          if (v72[3] >= v77)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
              specialized _NativeDictionary.copy()();
            }
          }
          else
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v77, isUniquelyReferenced_nonNull_native);
            unint64_t v79 = specialized __RawDictionaryStorage.find<A>(_:)(v58);
            if ((v78 & 1) != (v80 & 1)) {
              goto LABEL_163;
            }
            unint64_t v74 = v79;
          }
          unsigned int v81 = v139;
          if (v78)
          {
            *(unsigned char *)(v139[7] + v74) = 0;
          }
          else
          {
            v139[(v74 >> 6) + 8] |= 1 << v74;
            *(void *)(v81[6] + 8 * v74) = v58;
            *(unsigned char *)(v81[7] + v74) = 0;
            uint64_t v82 = v81[2];
            BOOL v15 = __OFADD__(v82, 1);
            uint64_t v83 = v82 + 1;
            if (v15) {
              goto LABEL_147;
            }
            v81[2] = v83;
          }
          char v47 = v129;
          *uint64_t v129 = v81;
          swift_bridgeObjectRelease();
          swift_endAccess();
          uint64_t v51 = v71;
          int64_t v50 = v70;
          unint64_t v3 = v2;
          uint64_t v2 = v125;
        }
      }
      int64_t isUniquelyReferenced_nonNull_native = v131;
      if (v131 < v50) {
        goto LABEL_135;
      }
      if (v56 == v130)
      {
LABEL_136:
        __break(1u);
LABEL_137:
        __break(1u);
LABEL_138:
        __break(1u);
LABEL_139:
        __break(1u);
LABEL_140:
        __break(1u);
LABEL_141:
        __break(1u);
LABEL_142:
        __break(1u);
LABEL_143:
        __break(1u);
LABEL_144:
        __break(1u);
LABEL_145:
        __break(1u);
LABEL_146:
        __break(1u);
LABEL_147:
        __break(1u);
LABEL_148:
        __break(1u);
LABEL_149:
        __break(1u);
LABEL_150:
        __break(1u);
LABEL_151:
        __break(1u);
LABEL_152:
        swift_bridgeObjectRetain();
        uint64_t v123 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v123) {
          goto LABEL_113;
        }
        goto LABEL_153;
      }
      BOOL v55 = v51 == 0;
      if (v51 | v136)
      {
        ++v9;
        ++v56;
        if (v9 != v131) {
          continue;
        }
      }
      goto LABEL_68;
    }
    swift_endAccess();
LABEL_43:
    int v64 = 0;
    goto LABEL_44;
  }
LABEL_68:
  if (*((unsigned char *)v2 + 260))
  {
    swift_bridgeObjectRelease();
    if (v55) {
      goto LABEL_154;
    }
  }
  else
  {
    void *v47 = v126;
    swift_bridgeObjectRelease();
    if (v55) {
      goto LABEL_154;
    }
  }
  unint64_t v140 = MEMORY[0x263F8EE78];
  uint64_t v84 = *v134;
  uint64_t v85 = specialized Dictionary.startIndex.getter(*v134);
  if (v87) {
    goto LABEL_162;
  }
  uint64_t v88 = v86;
  int v127 = *(_DWORD *)(v84 + 36);
  if (v127 != v86) {
    goto LABEL_151;
  }
  unint64_t v9 = v85;
  uint64_t v137 = 1 << *(unsigned char *)(v84 + 32);
  if (v85 == v137)
  {
    uint64_t v131 = v85;
    unint64_t v9 = MEMORY[0x263F8EE78];
    uint64_t v130 = v86;
    goto LABEL_111;
  }
  uint64_t v130 = v86;
  while (1)
  {
    if ((v9 & 0x8000000000000000) != 0) {
      goto LABEL_139;
    }
    int64_t isUniquelyReferenced_nonNull_native = *v134;
    uint64_t v89 = 1 << *(unsigned char *)(*v134 + 32);
    if ((uint64_t)v9 >= v89) {
      goto LABEL_139;
    }
    unint64_t v90 = v9 >> 6;
    uint64_t v91 = 1 << v9;
    if ((*(void *)(isUniquelyReferenced_nonNull_native + 8 * (v9 >> 6) + 64) & (1 << v9)) == 0) {
      goto LABEL_140;
    }
    if (*(_DWORD *)(isUniquelyReferenced_nonNull_native + 36) != v88) {
      goto LABEL_141;
    }
    uint64_t v92 = v51;
    uint64_t v93 = *(void *)(*(void *)(isUniquelyReferenced_nonNull_native + 56) + 8 * v9);
    if (*(unsigned char *)(v93 + 134) == 1)
    {
      swift_retain();
    }
    else
    {
      uint64_t v131 = v9;
      int v94 = *(_DWORD *)(v93 + 128);
      int v95 = *((_DWORD *)v2 + 64);
      swift_retain();
      if (v94 != v95)
      {
        uint64_t v96 = swift_retain();
        MEMORY[0x24C522D60](v96);
        if (*(void *)((v140 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v140 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        --v92;
        uint64_t v97 = *(void *)(v93 + 32);
        swift_beginAccess();
        char v98 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v139 = (void *)*v129;
        *uint64_t v129 = 0x8000000000000000;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(1, v97, v98);
        *uint64_t v129 = v139;
        swift_bridgeObjectRelease();
        swift_endAccess();
        int64_t isUniquelyReferenced_nonNull_native = *v134;
        uint64_t v89 = 1 << *(unsigned char *)(*v134 + 32);
      }
      unint64_t v9 = v131;
    }
    if ((uint64_t)v9 >= v89) {
      goto LABEL_142;
    }
    int64_t v99 = isUniquelyReferenced_nonNull_native + 64;
    uint64_t v100 = *(void *)(isUniquelyReferenced_nonNull_native + 64 + 8 * v90);
    if ((v100 & v91) == 0) {
      goto LABEL_143;
    }
    if (*(_DWORD *)(isUniquelyReferenced_nonNull_native + 36) != v88) {
      goto LABEL_144;
    }
    unint64_t v101 = v9;
    unint64_t v102 = v100 & (-2 << (v9 & 0x3F));
    if (v102)
    {
      swift_release();
      unint64_t v9 = __clz(__rbit64(v102)) | v101 & 0xFFFFFFFFFFFFFFC0;
      goto LABEL_105;
    }
    unint64_t v103 = v90 + 1;
    unint64_t v104 = (unint64_t)(v89 + 63) >> 6;
    if (v90 + 1 >= v104) {
      goto LABEL_104;
    }
    uint64_t v105 = v101;
    unint64_t v106 = *(void *)(v99 + 8 * v103);
    if (!v106)
    {
      unint64_t v103 = v90 + 2;
      if (v90 + 2 >= v104) {
        goto LABEL_104;
      }
      unint64_t v106 = *(void *)(v99 + 8 * v103);
      if (!v106)
      {
        while (v104 - 3 != v90)
        {
          unint64_t v106 = *(void *)(isUniquelyReferenced_nonNull_native + 88 + 8 * v90++);
          if (v106)
          {
            outlined consume of [String : AccessibilityCustomAttributes.Value].Index._Variant(v105, v88, 0);
            swift_release();
            unint64_t v103 = v90 + 2;
            goto LABEL_97;
          }
        }
        outlined consume of [String : AccessibilityCustomAttributes.Value].Index._Variant(v105, v88, 0);
LABEL_104:
        swift_release();
        unint64_t v9 = v89;
        goto LABEL_105;
      }
    }
    swift_release();
LABEL_97:
    unint64_t v9 = __clz(__rbit64(v106)) | (v103 << 6);
LABEL_105:
    uint64_t v51 = v92;
    if (!v92) {
      break;
    }
    if (v127 != v88) {
      goto LABEL_145;
    }
    uint64_t v88 = v130;
    if (v9 == v137)
    {
      uint64_t v131 = v137;
      goto LABEL_110;
    }
  }
  uint64_t v131 = v9;
LABEL_110:
  unint64_t v9 = v140;
LABEL_111:
  int64_t isUniquelyReferenced_nonNull_native = v9 >> 62;
  if (v9 >> 62) {
    goto LABEL_152;
  }
  if (*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_113:
    unint64_t v107 = 0;
    unint64_t v108 = v9 & 0xC000000000000001;
    int64_t v124 = isUniquelyReferenced_nonNull_native;
    do
    {
      if (v108)
      {
        uint64_t v110 = MEMORY[0x24C523D60](v107, v9);
        unint64_t v111 = v107 + 1;
        if (__OFADD__(v107, 1)) {
          goto LABEL_137;
        }
      }
      else
      {
        if (v107 >= *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_146;
        }
        uint64_t v110 = *(void *)(v9 + 8 * v107 + 32);
        swift_retain();
        unint64_t v111 = v107 + 1;
        if (__OFADD__(v107, 1)) {
          goto LABEL_137;
        }
      }
      AGSubgraphApply();
      AGSubgraphRemoveChild();
      *(_WORD *)(v110 + 133) = 256;
      swift_beginAccess();
      int v112 = *(_DWORD *)(v110 + 24) - 1;
      *(_DWORD *)(v110 + 24) = v112;
      if (!v112)
      {
        uint64_t Strong = swift_weakLoadStrong();
        if (Strong)
        {
          uint64_t v114 = Strong;
          swift_beginAccess();
          uint64_t v115 = *(void *)(v114 + 216);
          if (*(void *)(v115 + 16)
            && (unint64_t v116 = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)(v110 + 32)), (v117 & 1) != 0))
          {
            unint64_t v118 = v116;
            int v119 = *(_DWORD *)(v115 + 36);
            swift_beginAccess();
            specialized Dictionary._Variant.remove(at:)(&v138, v118, v119);
            swift_endAccess();
            swift_release();
            swift_release();
          }
          else
          {
            swift_retain();
            uint64_t v120 = swift_bridgeObjectRetain();
            uint64_t v121 = specialized _NativeDictionary.filter(_:)(v120, v110);
            swift_bridgeObjectRelease();
            *(void *)(v114 + 216) = v121;
            swift_release();
            swift_bridgeObjectRelease();
          }
          int64_t isUniquelyReferenced_nonNull_native = v124;
        }
        IsValidouble d = AGSubgraphIsValid();
        unint64_t v108 = v9 & 0xC000000000000001;
        if (IsValid)
        {
          MEMORY[0x270FA5388](IsValid);
          AGSubgraphApply();
          AGSubgraphInvalidate();
        }
      }
      swift_release();
      if (isUniquelyReferenced_nonNull_native)
      {
        swift_bridgeObjectRetain();
        uint64_t v109 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v109 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      ++v107;
    }
    while (v111 != v109);
  }
LABEL_153:
  swift_bridgeObjectRelease();
  outlined consume of [String : AccessibilityCustomAttributes.Value].Index._Variant(v131, v130, 0);
LABEL_154:
  if ((*((unsigned char *)v2 + 260) & 1) == 0) {
    v2[30] = 0x7FFFFFFFFFFFFFFFLL;
  }
  *(void *)int64_t v132 = v142;
  swift_bridgeObjectRelease();
LABEL_157:
  *((unsigned char *)v2 + 260) = 0;
}

uint64_t protocol witness for static UnaryLayout.makeViewImpl(modifier:inputs:body:) in conformance SpacingLayout@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, long long *)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = *a1;
  long long v5 = *(_OWORD *)(a2 + 48);
  void v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  int v9 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static UnaryLayout<>.makeViewImpl(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(void *a1, uint64_t a2, void (*a3)(void), void (*a4)(void))
{
  return swift_bridgeObjectRelease();
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t (*a5)(void))
{
  return AGGraphSetOutputValue();
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(uint64_t a1, uint64_t a2, void (*a3)(_OWORD *__return_ptr))
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  a3(v4);
  AGGraphSetOutputValue();
  v5[6] = v4[6];
  v5[7] = v4[7];
  v5[8] = v4[8];
  v5[2] = v4[2];
  v5[3] = v4[3];
  v5[4] = v4[4];
  v5[5] = v4[5];
  v5[0] = v4[0];
  v5[1] = v4[1];
  return outlined release of GestureDebug.Data((uint64_t)v5);
}

uint64_t sub_245DB70C8(char *a1)
{
  char v2 = *a1;
  return EnvironmentValues.layoutDirection.setter(&v2);
}

unint64_t instantiation function for generic protocol witness table for LayoutPositionQuery(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type LayoutPositionQuery and conformance LayoutPositionQuery();
  *(void *)(a1 + 8) = result;
  return result;
}

ValueMetadata *type metadata accessor for LayoutPositionQuery()
{
  return &type metadata for LayoutPositionQuery;
}

uint64_t base witness table accessor for _AttributeBody in UnaryPositionAwareChildGeometry<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in UnaryPositionAwareLayoutComputer<A>()
{
  return swift_getWitnessTable();
}

unint64_t *specialized _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v4 = (unint64_t *)isStackAllocationSafe;
  v11[1] = *MEMORY[0x263EF8340];
  char v5 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v6 = (unint64_t)((1 << v5) + 63) >> 6;
  size_t v7 = 8 * v6;
  if ((v5 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x270FA5388](isStackAllocationSafe);
    bzero((char *)v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    uint64_t v8 = specialized closure #1 in _NativeDictionary.filter(_:)((void *)((char *)v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0)), v6, (uint64_t)v4, a2);
    if (v2) {
      swift_willThrow();
    }
    else {
      uint64_t v4 = v8;
    }
    swift_release();
  }
  else
  {
    int v9 = (void *)swift_slowAlloc();
    bzero(v9, v7);
    uint64_t v4 = specialized closure #1 in _NativeDictionary.filter(_:)((unint64_t *)v9, v6, (uint64_t)v4, a2);
    MEMORY[0x24C527CC0](v9, -1, -1);
    swift_release();
  }
  return v4;
}

uint64_t specialized Dictionary._Variant.remove(at:)(uint64_t a1, unint64_t a2, int a3, char a4)
{
  char v5 = v4;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t v16 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    specialized _NativeDictionary.copy()();
    *uint64_t v4 = v16;
    uint64_t result = swift_bridgeObjectRelease();
  }
  if (a4) {
    goto LABEL_12;
  }
  if ((a2 & 0x8000000000000000) != 0 || (uint64_t v11 = *v4, 1 << *(unsigned char *)(*v5 + 32) <= (uint64_t)a2))
  {
    __break(1u);
  }
  else if ((*(void *)(v11 + 8 * (a2 >> 6) + 64) >> a2))
  {
    if (*(_DWORD *)(v11 + 36) == a3)
    {
      *char v5 = 0x8000000000000000;
      uint64_t v12 = *(void *)(v11 + 56);
      uint64_t v13 = *(void *)(v11 + 48) + 40 * a2;
      long long v14 = *(_OWORD *)(v13 + 16);
      *(_OWORD *)a1 = *(_OWORD *)v13;
      *(_OWORD *)(a1 + 16) = v14;
      *(void *)(a1 + 32) = *(void *)(v13 + 32);
      uint64_t v15 = *(void *)(v12 + 8 * a2);
      specialized _NativeDictionary._delete(at:)(a2, v11);
      *char v5 = v11;
      swift_bridgeObjectRelease();
      return v15;
    }
    goto LABEL_11;
  }
  __break(1u);
LABEL_11:
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  long long v14;
  uint64_t v15;
  uint64_t v16;

  char v5 = v4;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t v16 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    specialized _NativeDictionary.copy()();
    *uint64_t v4 = v16;
    uint64_t result = swift_bridgeObjectRelease();
  }
  if (a4) {
    goto LABEL_12;
  }
  if ((a2 & 0x8000000000000000) != 0 || (uint64_t v11 = *v4, 1 << *(unsigned char *)(*v5 + 32) <= (uint64_t)a2))
  {
    __break(1u);
  }
  else if ((*(void *)(v11 + 8 * (a2 >> 6) + 64) >> a2))
  {
    if (*(_DWORD *)(v11 + 36) == a3)
    {
      *char v5 = 0x8000000000000000;
      uint64_t v12 = *(void *)(v11 + 56);
      uint64_t v13 = *(void *)(v11 + 48) + 40 * a2;
      long long v14 = *(_OWORD *)(v13 + 16);
      *(_OWORD *)a1 = *(_OWORD *)v13;
      *(_OWORD *)(a1 + 16) = v14;
      *(void *)(a1 + 32) = *(void *)(v13 + 32);
      uint64_t v15 = *(void *)(v12 + 8 * a2);
      specialized _NativeDictionary._delete(at:)(a2, v11);
      *char v5 = v11;
      swift_bridgeObjectRelease();
      return v15;
    }
    goto LABEL_11;
  }
  __break(1u);
LABEL_11:
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t specialized Dictionary._Variant.remove(at:)(void *a1, unint64_t a2, int a3)
{
  uint64_t v4 = v3;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t v11 = *v3;
    *unint64_t v3 = 0x8000000000000000;
    specialized _NativeDictionary.copy()();
    *unint64_t v3 = v11;
    uint64_t result = swift_bridgeObjectRelease();
  }
  if ((a2 & 0x8000000000000000) != 0 || (uint64_t v9 = *v3, 1 << *(unsigned char *)(*v4 + 32) <= (uint64_t)a2))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (((*(void *)(v9 + 8 * (a2 >> 6) + 64) >> a2) & 1) == 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (*(_DWORD *)(v9 + 36) == a3)
  {
    *uint64_t v4 = 0x8000000000000000;
    uint64_t v10 = *(void *)(*(void *)(v9 + 48) + 8 * a2);
    *a1 = *(void *)(*(void *)(v9 + 56) + 8 * a2);
    specialized _NativeDictionary._delete(at:)(a2, v9);
    *uint64_t v4 = v9;
    swift_bridgeObjectRelease();
    return v10;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t specialized Slice.distance(from:to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  unint64_t v6 = (void *)(v2 + 16);
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  uint64_t v7 = static Update._lock;
  _MovableLockLock(static Update._lock);
  specialized static Update.begin()();
  uint64_t v8 = *(void *)(v2 + 40);
  uint64_t v9 = *(void *)(v3 + 48);
  __swift_project_boxed_opaque_existential_1(v6, *(void *)(v3 + 40));
  uint64_t v10 = ViewList.count.getter(v8, v9);
  static Update.end()();
  uint64_t result = _MovableLockUnlock(v7);
  if (a1 < 0 || v10 < a1)
  {
    __break(1u);
  }
  else
  {
    _MovableLockLock(v7);
    specialized static Update.begin()();
    uint64_t v12 = *(void *)(v3 + 40);
    uint64_t v13 = *(void *)(v3 + 48);
    __swift_project_boxed_opaque_existential_1(v6, v12);
    uint64_t v14 = ViewList.count.getter(v12, v13);
    static Update.end()();
    uint64_t result = _MovableLockUnlock(v7);
    if ((a2 & 0x8000000000000000) == 0 && v14 >= a2) {
      return a2 - a1;
    }
  }
  __break(1u);
  return result;
}

__n128 specialized closure #1 in Attribute.syncMainIfReferences<A>(do:)(__n128 *a1, void (*a2)(_OWORD *__return_ptr, _OWORD *), uint64_t a3, _OWORD *a4)
{
  long long v5 = a4[1];
  v13[0] = *a4;
  v13[1] = v5;
  a2(v11, v13);
  __n128 v9 = (__n128)v11[1];
  __n128 v10 = (__n128)v11[0];
  __n128 v8 = (__n128)v11[2];
  unint64_t v6 = v12;
  outlined consume of ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>?(a1->n128_u64[0], a1->n128_i64[1], a1[1].n128_i64[0]);
  *a1 = v10;
  a1[1] = v9;
  __n128 result = v8;
  a1[2] = v8;
  a1[3].n128_u64[0] = v6;
  return result;
}

uint64_t partial apply for specialized closure #1 in static UnaryLayout<>.makeViewImpl(modifier:inputs:body:)(uint64_t a1)
{
  return specialized closure #1 in static UnaryLayout<>.makeViewImpl(modifier:inputs:body:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

{
  uint64_t v1;

  return specialized closure #1 in static UnaryLayout<>.makeViewImpl(modifier:inputs:body:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for specialized closure #2 in static UnaryLayout<>.makeViewImpl(modifier:inputs:body:)(uint64_t a1)
{
  return specialized closure #2 in static UnaryLayout<>.makeViewImpl(modifier:inputs:body:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

{
  uint64_t v1;

  return specialized closure #2 in static UnaryLayout<>.makeViewImpl(modifier:inputs:body:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_245DB785C()
{
  outlined consume of GraphicsFilter(*(void **)(v0 + 16), *(void *)(v0 + 24), *(id *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112), *(void *)(v0 + 120), *(_DWORD *)(v0 + 128), BYTE2(*(_DWORD *)(v0 + 128)));

  return swift_deallocObject();
}

uint64_t specialized UnaryChildGeometry.description.getter(int a1, int a2, Swift::Int a3, uint64_t a4, void *a5)
{
  _StringGuts.grow(_:)(a3);
  uint64_t v7 = _typeName(_:qualified:)();
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = a4;
  v8._object = a5;
  String.append(_:)(v8);
  return v7;
}

uint64_t sub_245DB7954()
{
  long long v3 = *(_OWORD *)(v0 + 256);
  long long v4 = *(_OWORD *)(v0 + 272);
  long long v2 = *(_OWORD *)(v0 + 224);
  outlined consume of ArrayWith2Inline<GestureDebug.Data>.Storage(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112), *(void *)(v0 + 120), *(void *)(v0 + 128), *(void *)(v0 + 136), *(_OWORD *)(v0 + 144), *(void *)(v0 + 152), *(void *)(v0 + 160),
    *(void *)(v0 + 168),
    *(void *)(v0 + 176),
    *(void *)(v0 + 184),
    *(void *)(v0 + 192),
    *(void *)(v0 + 200),
    *(void *)(v0 + 208),
    *(void *)(v0 + 216),
    v2,
    *((uint64_t *)&v2 + 1),
    *(void *)(v0 + 240),
    *(void *)(v0 + 248),
    v3,
    *((uint64_t *)&v3 + 1),
    v4,
    *((uint64_t *)&v4 + 1),
    *(void *)(v0 + 288),
    *(void *)(v0 + 296),
    *(unsigned char *)(v0 + 304));

  return swift_deallocObject();
}

uint64_t outlined init with take of GestureDebug.Data?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(void, uint64_t))
{
  _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(a2, a1, v7);
  return a2;
}

uint64_t _s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOSgWOg(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 4);
  if (v1 > 0x80000000) {
    return -v1;
  }
  else {
    return 0;
  }
}

uint64_t outlined init with take of LayoutGestureBox.Child.DebugData(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOWOg(uint64_t a1)
{
  return *(void *)(a1 + 136) >> 63;
}

uint64_t *outlined retain of LayoutGestureBox.Child.DebugData(uint64_t *a1)
{
  return a1;
}

uint64_t _s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOWOj0_(uint64_t result)
{
  *(void *)(result + 136) &= ~0x8000000000000000;
  return result;
}

unint64_t *outlined release of LayoutGestureBox.Child.DebugData?(unint64_t *a1)
{
  return a1;
}

uint64_t specialized LayoutGesture.childEvents(events:index:box:)(unint64_t a1, unint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  if ((a2 & 0x8000000000000000) != 0)
  {
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  uint64_t v6 = *(void *)(a3 + 160);
  if (*(void *)(v6 + 16) <= a2) {
    goto LABEL_68;
  }
  uint64_t v7 = (_OWORD *)(v6 + 208 * a2);
  v85[0] = v7[2];
  long long v8 = v7[3];
  long long v9 = v7[4];
  long long v10 = v7[6];
  long long v87 = v7[5];
  long long v88 = v10;
  v85[1] = v8;
  long long v86 = v9;
  long long v11 = v7[7];
  long long v12 = v7[8];
  long long v13 = v7[10];
  long long v91 = v7[9];
  long long v92 = v13;
  long long v89 = v11;
  long long v90 = v12;
  long long v14 = v7[11];
  long long v15 = v7[12];
  long long v16 = v7[13];
  *(_OWORD *)((char *)v95 + 12) = *(_OWORD *)((char *)v7 + 220);
  long long v94 = v15;
  v95[0] = v16;
  long long v93 = v14;
  v96[0] = *((void *)&v86 + 1);
  if (*(void *)(*((void *)&v86 + 1) + 16))
  {
    unint64_t v69 = a1 + 64;
    uint64_t v71 = *((void *)&v86 + 1);
    uint64_t v17 = 1 << *(unsigned char *)(a1 + 32);
    if (v17 < 64) {
      uint64_t v18 = ~(-1 << v17);
    }
    else {
      uint64_t v18 = -1;
    }
    unint64_t v19 = v18 & *(void *)(a1 + 64);
    uint64_t v74 = *(void *)&v85[0];
    outlined retain of LayoutGestureBox.Child((uint64_t)v85);
    outlined retain of RadialGradient(v96);
    unint64_t v20 = v17 + 63;
    uint64_t v21 = v71;
    uint64_t v70 = v71 + 56;
    int64_t v72 = v20 >> 6;
    uint64_t v68 = (v20 >> 6) - 1;
    swift_bridgeObjectRetain();
    uint64_t v73 = 0;
    Swift::String v22 = (void *)MEMORY[0x263F8EE80];
    while (!v19)
    {
      uint64_t v30 = v73 + 1;
      if (__OFADD__(v73, 1)) {
        goto LABEL_65;
      }
      if (v30 < v72)
      {
        unint64_t v31 = *(void *)(v69 + 8 * v30);
        if (v31) {
          goto LABEL_17;
        }
        uint64_t v32 = v73 + 2;
        ++v73;
        if (v30 + 1 < v72)
        {
          unint64_t v31 = *(void *)(v69 + 8 * v32);
          if (v31) {
            goto LABEL_20;
          }
          uint64_t v73 = v30 + 1;
          if (v30 + 2 < v72)
          {
            unint64_t v31 = *(void *)(v69 + 8 * (v30 + 2));
            if (v31)
            {
              v30 += 2;
              goto LABEL_17;
            }
            uint64_t v32 = v30 + 3;
            uint64_t v73 = v30 + 2;
            if (v30 + 3 < v72)
            {
              unint64_t v31 = *(void *)(v69 + 8 * v32);
              if (!v31)
              {
                while (1)
                {
                  uint64_t v30 = v32 + 1;
                  if (__OFADD__(v32, 1)) {
                    goto LABEL_69;
                  }
                  if (v30 >= v72)
                  {
                    uint64_t v73 = v68;
                    goto LABEL_31;
                  }
                  unint64_t v31 = *(void *)(v69 + 8 * v30);
                  ++v32;
                  if (v31) {
                    goto LABEL_17;
                  }
                }
              }
LABEL_20:
              uint64_t v30 = v32;
LABEL_17:
              unint64_t v19 = (v31 - 1) & v31;
              unint64_t v25 = __clz(__rbit64(v31)) + (v30 << 6);
              uint64_t v73 = v30;
LABEL_13:
              uint64_t v26 = *(void *)(a1 + 56);
              Swift::String v27 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v25);
              uint64_t v29 = *v27;
              uint64_t v28 = v27[1];
              *(void *)&long long v76 = v29;
              *((void *)&v76 + 1) = v28;
              outlined init with copy of AnyTrackedValue(v26 + 40 * v25, (uint64_t)&v77);
              goto LABEL_32;
            }
          }
        }
      }
LABEL_31:
      unint64_t v19 = 0;
      uint64_t v79 = 0;
      long long v77 = 0u;
      long long v78 = 0u;
      long long v76 = 0u;
LABEL_32:
      outlined init with take of (key: AnyHashable, value: ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Item)?((uint64_t)&v76, (uint64_t)v83, (unint64_t *)&lazy cache variable for type metadata for (key: EventID, value: EventType)?, (void (*)(uint64_t))type metadata accessor for (key: EventID, value: EventType));
      Swift::UInt v33 = v83[0];
      if (!v83[0])
      {
        swift_release();
        outlined release of RadialGradient(v96);
        goto LABEL_63;
      }
      Swift::UInt v34 = v83[1];
      outlined init with take of ScrollStateRequest(&v84, (uint64_t)v80);
      uint64_t v35 = v81;
      uint64_t v36 = v82;
      __swift_project_boxed_opaque_existential_1(v80, v81);
      (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v36 + 24))(&v76, v35, v36);
      uint64_t v37 = v76;
      if ((void)v76)
      {
        swift_retain_n();
        if (v74 == v37) {
          goto LABEL_39;
        }
        int64_t v38 = *(uint64_t (**)(uint64_t))(*(void *)v37 + 88);
        uint64_t v39 = swift_retain();
        uint64_t v40 = v38(v39);
        swift_retain();
        swift_release_n();
        if (v40)
        {
          swift_release();
          if (v74 == v40)
          {
LABEL_39:
            unint64_t v44 = a1;
            swift_release();
            swift_release();
            outlined init with copy of AnyTrackedValue((uint64_t)v80, (uint64_t)&v76);
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *(void *)&v75[0] = v22;
            unint64_t v47 = specialized __RawDictionaryStorage.find<A>(_:)(v33, v34);
            uint64_t v48 = v22[2];
            BOOL v49 = (v46 & 1) == 0;
            uint64_t v50 = v48 + v49;
            if (__OFADD__(v48, v49))
            {
              __break(1u);
LABEL_65:
              __break(1u);
LABEL_66:
              __break(1u);
              goto LABEL_67;
            }
            char v51 = v46;
            if (v22[3] >= v50)
            {
              if (isUniquelyReferenced_nonNull_native)
              {
                Swift::String v22 = *(void **)&v75[0];
                if ((v46 & 1) == 0) {
                  goto LABEL_56;
                }
              }
              else
              {
                specialized _NativeDictionary.copy()();
                Swift::String v22 = *(void **)&v75[0];
                if ((v51 & 1) == 0) {
                  goto LABEL_56;
                }
              }
            }
            else
            {
              specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v50, isUniquelyReferenced_nonNull_native);
              unint64_t v52 = specialized __RawDictionaryStorage.find<A>(_:)(v33, v34);
              if ((v51 & 1) != (v53 & 1)) {
                goto LABEL_70;
              }
              unint64_t v47 = v52;
              Swift::String v22 = *(void **)&v75[0];
              if ((v51 & 1) == 0)
              {
LABEL_56:
                v22[(v47 >> 6) + 8] |= 1 << v47;
                unint64_t v60 = (Swift::UInt *)(v22[6] + 16 * v47);
                *unint64_t v60 = v33;
                v60[1] = v34;
                outlined init with take of ScrollStateRequest(&v76, v22[7] + 40 * v47);
                uint64_t v61 = v22[2];
                BOOL v62 = __OFADD__(v61, 1);
                uint64_t v63 = v61 + 1;
                if (v62) {
                  goto LABEL_66;
                }
                v22[2] = v63;
                goto LABEL_9;
              }
            }
            uint64_t v23 = v22[7] + 40 * v47;
            __swift_destroy_boxed_opaque_existential_1(v23);
            outlined init with take of ScrollStateRequest(&v76, v23);
LABEL_9:
            swift_release();
            swift_bridgeObjectRelease();
            a1 = v44;
            uint64_t v21 = v71;
            goto LABEL_10;
          }
          while (1)
          {
            int64_t v41 = *(uint64_t (**)(uint64_t))(*(void *)v40 + 88);
            uint64_t v42 = swift_retain();
            uint64_t v43 = v41(v42);
            swift_retain();
            swift_release_n();
            if (!v43) {
              break;
            }
            swift_release();
            uint64_t v40 = v43;
            if (v74 == v43) {
              goto LABEL_39;
            }
          }
        }
        swift_release_n();
      }
      if (*(void *)(v21 + 16))
      {
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v33);
        Hasher._combine(_:)(v34);
        Swift::Int v54 = Hasher._finalize()();
        uint64_t v55 = -1 << *(unsigned char *)(v21 + 32);
        unint64_t v56 = v54 & ~v55;
        if ((*(void *)(v70 + ((v56 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v56))
        {
          uint64_t v57 = ~v55;
          while (1)
          {
            uint64_t v58 = (void *)(*(void *)(v21 + 48) + 16 * v56);
            if (v58[1] == v34 && *v58 == v33) {
              break;
            }
            unint64_t v56 = (v56 + 1) & v57;
            if (((*(void *)(v70 + ((v56 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v56) & 1) == 0) {
              goto LABEL_10;
            }
          }
          outlined init with copy of AnyTrackedValue((uint64_t)v80, (uint64_t)&v76);
          uint64_t v64 = *((void *)&v77 + 1);
          uint64_t v65 = v78;
          __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v76, *((uint64_t *)&v77 + 1));
          *(void *)&v75[0] = 0;
          (*(void (**)(long long *, uint64_t, uint64_t))(v65 + 32))(v75, v64, v65);
          outlined init with copy of AnyTrackedValue((uint64_t)&v76, (uint64_t)v75);
          char v66 = swift_isUniquelyReferenced_nonNull_native();
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v75, v33, v34, v66);
          swift_bridgeObjectRelease();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v76);
        }
      }
LABEL_10:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v80);
    }
    unint64_t v24 = __clz(__rbit64(v19));
    v19 &= v19 - 1;
    unint64_t v25 = v24 | (v73 << 6);
    goto LABEL_13;
  }
  outlined retain of LayoutGestureBox.Child((uint64_t)v85);
  Swift::String v22 = (void *)specialized Dictionary.optimisticFilter(_:)(a1, (uint64_t *)v85);
LABEL_63:
  outlined release of LayoutGestureBox.Child((uint64_t)v85);
  return (uint64_t)v22;
}

{
  uint64_t result;
  uint64_t v6;
  _OWORD *v7;
  long long v8;
  long long v9;
  long long v10;
  long long v11;
  long long v12;
  long long v13;
  long long v14;
  long long v15;
  long long v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  Swift::UInt v34;
  Swift::UInt v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t);
  uint64_t v43;
  uint64_t v44;
  Swift::Int v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v51;
  uint64_t v52;
  char v53;
  unint64_t v54;
  int64_t v55;
  uint64_t v56;
  int64_t v58;
  long long v59[2];
  long long v60;
  long long v61;
  long long v62;
  uint64_t v63;
  void v64[3];
  uint64_t v65;
  uint64_t v66;
  void v67[2];
  long long v68;
  _OWORD v69[2];
  long long v70;
  long long v71;
  long long v72;
  long long v73;
  long long v74;
  long long v75;
  long long v76;
  long long v77;
  long long v78;
  _OWORD v79[2];
  void v80[2];

  uint64_t result = swift_beginAccess();
  if ((a2 & 0x8000000000000000) != 0)
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  uint64_t v6 = *(void *)(a3 + 160);
  if (*(void *)(v6 + 16) <= a2)
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  uint64_t v7 = (_OWORD *)(v6 + 208 * a2);
  v69[0] = v7[2];
  long long v8 = v7[3];
  long long v9 = v7[4];
  long long v10 = v7[6];
  uint64_t v71 = v7[5];
  int64_t v72 = v10;
  v69[1] = v8;
  uint64_t v70 = v9;
  long long v11 = v7[7];
  long long v12 = v7[8];
  long long v13 = v7[10];
  uint64_t v75 = v7[9];
  long long v76 = v13;
  uint64_t v73 = v11;
  uint64_t v74 = v12;
  long long v14 = v7[11];
  long long v15 = v7[12];
  long long v16 = v7[13];
  *(_OWORD *)((char *)v79 + 12) = *(_OWORD *)((char *)v7 + 220);
  long long v78 = v15;
  v79[0] = v16;
  long long v77 = v14;
  v80[0] = *((void *)&v70 + 1);
  if (!*(void *)(*((void *)&v70 + 1) + 16))
  {
    outlined retain of LayoutGestureBox.Child((uint64_t)v69);
    uint64_t v23 = specialized Dictionary.optimisticFilter(_:)(a1, (uint64_t *)v69);
LABEL_52:
    outlined release of LayoutGestureBox.Child((uint64_t)v69);
    return v23;
  }
  unint64_t v56 = *((void *)&v70 + 1);
  Swift::Int v54 = a1 + 64;
  uint64_t v17 = 1 << *(unsigned char *)(a1 + 32);
  if (v17 < 64) {
    uint64_t v18 = ~(-1 << v17);
  }
  else {
    uint64_t v18 = -1;
  }
  unint64_t v19 = v18 & *(void *)(a1 + 64);
  unint64_t v20 = *(void *)&v69[0];
  outlined retain of LayoutGestureBox.Child((uint64_t)v69);
  outlined retain of LinearGradient((uint64_t)v80);
  uint64_t v21 = v56 + 56;
  uint64_t v55 = (unint64_t)(v17 + 63) >> 6;
  Swift::String v22 = v56;
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v58 = 0;
  uint64_t v23 = MEMORY[0x263F8EE80];
  while (1)
  {
    if (v19)
    {
      unint64_t v25 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      uint64_t v26 = v25 | (v58 << 6);
LABEL_12:
      Swift::String v27 = *(void *)(a1 + 56);
      uint64_t v28 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v26);
      uint64_t v30 = *v28;
      uint64_t v29 = v28[1];
      *(void *)&unint64_t v60 = v30;
      *((void *)&v60 + 1) = v29;
      outlined init with copy of AnyTrackedValue(v27 + 40 * v26, (uint64_t)&v61);
      goto LABEL_31;
    }
    unint64_t v31 = v58 + 1;
    if (__OFADD__(v58, 1))
    {
      __break(1u);
      goto LABEL_54;
    }
    if (v31 < v55)
    {
      uint64_t v32 = *(void *)(v54 + 8 * v31);
      if (v32) {
        goto LABEL_16;
      }
      Swift::UInt v33 = v58 + 2;
      ++v58;
      if (v31 + 1 < v55)
      {
        uint64_t v32 = *(void *)(v54 + 8 * v33);
        if (v32) {
          goto LABEL_19;
        }
        uint64_t v58 = v31 + 1;
        if (v31 + 2 < v55)
        {
          uint64_t v32 = *(void *)(v54 + 8 * (v31 + 2));
          if (v32)
          {
            v31 += 2;
            goto LABEL_16;
          }
          Swift::UInt v33 = v31 + 3;
          uint64_t v58 = v31 + 2;
          if (v31 + 3 < v55) {
            break;
          }
        }
      }
    }
LABEL_30:
    unint64_t v19 = 0;
    uint64_t v63 = 0;
    uint64_t v61 = 0u;
    BOOL v62 = 0u;
    unint64_t v60 = 0u;
LABEL_31:
    outlined init with take of (key: EventID, value: EventType)?((uint64_t)&v60, (uint64_t)v67);
    Swift::UInt v34 = v67[0];
    if (!v67[0])
    {
      swift_release();
      outlined release of LinearGradient((uint64_t)v80);
      goto LABEL_52;
    }
    uint64_t v35 = v67[1];
    outlined init with take of ScrollStateRequest(&v68, (uint64_t)v64);
    uint64_t v36 = v65;
    uint64_t v37 = v66;
    __swift_project_boxed_opaque_existential_1(v64, v65);
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v37 + 24))(&v60, v36, v37);
    int64_t v38 = v60;
    if ((void)v60)
    {
      swift_retain_n();
      if (v20 == v38) {
        goto LABEL_8;
      }
      uint64_t v39 = *(uint64_t (**)(uint64_t))(*(void *)v38 + 88);
      uint64_t v40 = swift_retain();
      int64_t v41 = v39(v40);
      swift_retain();
      swift_release_n();
      if (v41)
      {
        swift_release();
        if (v20 == v41)
        {
LABEL_8:
          swift_release();
          swift_release();
          outlined init with copy of AnyTrackedValue((uint64_t)v64, (uint64_t)&v60);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(void *)&v59[0] = v23;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v60, v34, v35, isUniquelyReferenced_nonNull_native);
          uint64_t v23 = *(void *)&v59[0];
          swift_release();
          swift_bridgeObjectRelease();
          Swift::String v22 = v56;
          goto LABEL_9;
        }
        while (1)
        {
          uint64_t v42 = *(uint64_t (**)(uint64_t))(*(void *)v41 + 88);
          uint64_t v43 = swift_retain();
          unint64_t v44 = v42(v43);
          swift_retain();
          swift_release_n();
          if (!v44) {
            break;
          }
          swift_release();
          int64_t v41 = v44;
          if (v20 == v44) {
            goto LABEL_8;
          }
        }
      }
      swift_release_n();
      Swift::String v22 = v56;
    }
    if (*(void *)(v22 + 16))
    {
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v34);
      Hasher._combine(_:)(v35);
      uint64_t v45 = Hasher._finalize()();
      char v46 = -1 << *(unsigned char *)(v22 + 32);
      unint64_t v47 = v45 & ~v46;
      if ((*(void *)(v21 + ((v47 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v47))
      {
        uint64_t v48 = ~v46;
        while (1)
        {
          BOOL v49 = (void *)(*(void *)(v22 + 48) + 16 * v47);
          if (v49[1] == v35 && *v49 == v34) {
            break;
          }
          unint64_t v47 = (v47 + 1) & v48;
          if (((*(void *)(v21 + ((v47 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v47) & 1) == 0) {
            goto LABEL_9;
          }
        }
        outlined init with copy of AnyTrackedValue((uint64_t)v64, (uint64_t)&v60);
        char v51 = *((void *)&v61 + 1);
        unint64_t v52 = v62;
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v60, *((uint64_t *)&v61 + 1));
        *(void *)&v59[0] = 0;
        (*(void (**)(long long *, uint64_t, uint64_t))(v52 + 32))(v59, v51, v52);
        outlined init with copy of AnyTrackedValue((uint64_t)&v60, (uint64_t)v59);
        char v53 = swift_isUniquelyReferenced_nonNull_native();
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v59, v34, v35, v53);
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v60);
      }
    }
LABEL_9:
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v64);
  }
  uint64_t v32 = *(void *)(v54 + 8 * v33);
  if (v32)
  {
LABEL_19:
    unint64_t v31 = v33;
LABEL_16:
    unint64_t v19 = (v32 - 1) & v32;
    uint64_t v26 = __clz(__rbit64(v32)) + (v31 << 6);
    uint64_t v58 = v31;
    goto LABEL_12;
  }
  while (1)
  {
    unint64_t v31 = v33 + 1;
    if (__OFADD__(v33, 1)) {
      break;
    }
    if (v31 >= v55)
    {
      uint64_t v58 = v55 - 1;
      goto LABEL_30;
    }
    uint64_t v32 = *(void *)(v54 + 8 * v31);
    ++v33;
    if (v32) {
      goto LABEL_16;
    }
  }
LABEL_56:
  __break(1u);
  return result;
}

uint64_t specialized LayoutGestureBox.willSendEvents<A>(_:gesture:boxValueAttribute:)(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = v2 + 160;
  uint64_t result = swift_beginAccess();
  uint64_t v7 = *(void *)(v2 + 160);
  uint64_t v8 = *(void *)(v7 + 16);
  if (!v8)
  {
LABEL_10:
    if (!*(void *)(a1 + 16)) {
      return result;
    }
    uint64_t v13 = *(void *)(v7 + 16);
    if (!v13) {
      return result;
    }
    __int32 v41 = *MEMORY[0x263F288F8];
    swift_bridgeObjectRetain();
    unint64_t v14 = 0;
    uint64_t v15 = 29;
    uint64_t v39 = v13;
    while (1)
    {
      unint64_t v16 = swift_bridgeObjectRetain();
      uint64_t v17 = specialized LayoutGesture.childEvents(events:index:box:)(v16, v14, v3);
      uint64_t result = swift_bridgeObjectRelease();
      if (*(void *)(v17 + 16))
      {
        if (v14 >= *(void *)(*(void *)v5 + 16)) {
          goto LABEL_44;
        }
        swift_beginAccess();
        uint64_t v18 = *(void **)v5;
        swift_bridgeObjectRetain();
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        *(void *)uint64_t v5 = v18;
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v18);
          uint64_t v18 = (void *)result;
          *(void *)uint64_t v5 = result;
        }
        if (v14 >= v18[2]) {
          goto LABEL_45;
        }
        specialized Set.formUnion<A>(_:)(v17);
        uint64_t v19 = *(void *)v5;
        unint64_t v20 = *(void *)(*(void *)v5 + 16);
        uint64_t result = swift_bridgeObjectRetain();
        if (v14 >= v20) {
          goto LABEL_46;
        }
        *(void *)(v19 + v15 * 8 - 168) = v17;
        swift_endAccess();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        ++*(_DWORD *)(v3 + 172);
        uint64_t v21 = *(void *)(v3 + 160);
        if (v14 >= *(void *)(v21 + 16)) {
          goto LABEL_47;
        }
        if ((*(unsigned char *)(v21 + v15 * 8 - 172) & 1) == 0) {
          goto LABEL_14;
        }
        if (AGSubgraphIsValid())
        {
          unsigned int v22 = *(_DWORD *)(v21 + v15 * 8 - 192);
          id v23 = (id)AGSubgraphGetGraph();
          unint64_t v24 = (void *)AGSubgraphCreate();

          AGSubgraphAddChild();
          AGGraphClearUpdate();
          id v25 = (id)AGSubgraphGetCurrent();
          AGSubgraphSetCurrent();
          specialized closure #1 in LayoutGestureBox.willSendEvents<A>(_:gesture:boxValueAttribute:)(v3, a2, v22, v14);
          AGSubgraphSetCurrent();

          AGGraphSetUpdate();
          int v26 = v46[0];
          __int32 v27 = v46[1];
          uint64_t v42 = v47;
          int v43 = v48;
          swift_beginAccess();
          uint64_t v28 = *(void **)(v3 + 160);
          id v29 = v24;
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          *(void *)(v3 + 160) = v28;
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v28);
            uint64_t v28 = (void *)result;
            *(void *)uint64_t v5 = result;
          }
          if (v14 >= v28[2]) {
            goto LABEL_51;
          }
          uint64_t v30 = &v28[v15];
          unint64_t v31 = (void *)v28[v15 - 23];
          *(v30 - 23) = v24;
          swift_endAccess();

          uint64_t v13 = v39;
        }
        else
        {
          int v26 = specialized _GestureInputs.intern<A>(_:id:)(768, 4);
          int v43 = 0;
          __int32 v27 = v41;
          uint64_t v42 = MEMORY[0x263F8EE78];
        }
        swift_beginAccess();
        uint64_t v32 = *(void **)v5;
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        *(void *)uint64_t v5 = v32;
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v32);
          uint64_t v32 = (void *)result;
          *(void *)uint64_t v5 = result;
        }
        if (v14 >= v32[2]) {
          goto LABEL_48;
        }
        Swift::UInt v33 = &v32[v15];
        *((_DWORD *)v33 - 44) = v26;
        *((unsigned char *)v33 - 172) = 0;
        Swift::UInt v34 = *(void **)v5;
        if (v27 == v41)
        {
          _s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOSgWOi0_((uint64_t)v45);
        }
        else
        {
          v44[0].i32[0] = v27;
          _s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOWOi0_(v44);
          outlined init with take of LayoutGestureBox.Child.DebugData((uint64_t)v44, (uint64_t)v45);
          _ViewInputs.base.modify(v45, v35);
        }
        outlined init with take of GestureDebug.Data?((uint64_t)v45, (uint64_t)v46, &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, MEMORY[0x263F8D8F0]);
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        *(void *)uint64_t v5 = v34;
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v34);
          Swift::UInt v34 = (void *)result;
          *(void *)uint64_t v5 = result;
        }
        if (v14 >= v34[2]) {
          goto LABEL_49;
        }
        uint64_t v36 = (uint64_t)&v34[v15 - 19];
        uint64_t v37 = (uint64_t (*)(void, uint64_t))MEMORY[0x263F8D8F0];
        outlined init with take of GestureDebug.Data?(v36, (uint64_t)v45, &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, MEMORY[0x263F8D8F0]);
        outlined init with take of GestureDebug.Data?((uint64_t)v46, v36, &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, v37);
        uint64_t result = (uint64_t)outlined release of LayoutGestureBox.Child.DebugData?(v45);
        if (v14 >= *(void *)(*(void *)v5 + 16)) {
          goto LABEL_50;
        }
        int64_t v38 = (_DWORD *)(*(void *)v5 + v15 * 8);
        *((void *)v38 - 1) = v42;
        *int64_t v38 = v43;
        swift_endAccess();
      }
      swift_bridgeObjectRelease();
LABEL_14:
      ++v14;
      v15 += 26;
      if (v13 == v14) {
        return swift_bridgeObjectRelease();
      }
    }
  }
  unint64_t v9 = 0;
  uint64_t v10 = 8;
  uint64_t v11 = MEMORY[0x263F8EE80];
  while (v9 < *(void *)(v7 + 16))
  {
    if (*(void *)(*(void *)(v7 + v10 * 8) + 16))
    {
      swift_beginAccess();
      long long v12 = *(void **)v5;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      *(void *)uint64_t v5 = v12;
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v12);
        long long v12 = (void *)result;
        *(void *)uint64_t v5 = result;
      }
      if (v9 >= v12[2]) {
        goto LABEL_43;
      }
      v12[v10] = v11;
      uint64_t v7 = *(void *)(v3 + 160);
      swift_endAccess();
      uint64_t result = swift_bridgeObjectRelease();
      ++*(_DWORD *)(v3 + 172);
    }
    ++v9;
    v10 += 26;
    if (v8 == v9) {
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
  return result;
}

uint64_t specialized LayoutGestureBox.resetTerminalChildren<A>(gesture:)()
{
  uint64_t v1 = v0 + 160;
  uint64_t result = swift_beginAccess();
  uint64_t v53 = v0;
  uint64_t v3 = *(void *)(*(void *)(v0 + 160) + 16);
  if (v3)
  {
    long long v4 = *(void **)(v0 + 160);
    if (v4[2])
    {
      unint64_t v5 = 0;
      uint64_t v6 = v3 - 1;
      uint64_t v7 = 10;
      uint64_t v8 = MEMORY[0x263F8EE60] + 8;
      uint64_t v52 = MEMORY[0x263F8EE60] + 8;
      uint64_t v51 = v3 - 1;
      do
      {
        unint64_t v9 = (long long *)&v4[v7];
        long long v80 = *(v9 - 3);
        long long v10 = *(v9 - 2);
        long long v11 = *(v9 - 1);
        long long v12 = *v9;
        long long v84 = v9[1];
        long long v83 = v12;
        long long v82 = v11;
        long long v81 = v10;
        long long v13 = v9[2];
        long long v14 = v9[3];
        long long v15 = v9[4];
        long long v88 = v9[5];
        long long v87 = v15;
        long long v86 = v14;
        long long v85 = v13;
        long long v16 = v9[6];
        long long v17 = v9[7];
        long long v18 = v9[8];
        *(_OWORD *)((char *)v91 + 12) = *(long long *)((char *)v9 + 140);
        v91[0] = v18;
        long long v90 = v17;
        long long v89 = v16;
        if (*(void *)(*((void *)&v82 + 1) + 16))
        {
          if (BYTE12(v81)) {
            goto LABEL_32;
          }
          _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<()>, v8, (uint64_t (*)(void, uint64_t))type metadata accessor for GesturePhase);
          uint64_t result = AGGraphGetValue();
          int v19 = *(unsigned __int8 *)(result + 1);
          if (v19 == 2 || v19 == 3 && !*(unsigned char *)result)
          {
            swift_beginAccess();
            unint64_t v20 = *(void **)v1;
            outlined retain of LayoutGestureBox.Child((uint64_t)&v80);
            uint64_t result = swift_isUniquelyReferenced_nonNull_native();
            *(void *)uint64_t v1 = v20;
            if ((result & 1) == 0)
            {
              uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v20);
              unint64_t v20 = (void *)result;
              *(void *)uint64_t v1 = result;
            }
            if (v5 >= v20[2]) {
              goto LABEL_31;
            }
            uint64_t v21 = &v20[v7];
            if (*(void *)(v20[v7 - 1] + 16))
            {
              if ((*((unsigned char *)v21 - 20) & 1) == 0)
              {
                unsigned int v22 = (uint64_t (*)(void, uint64_t))MEMORY[0x263F8D8F0];
                outlined init with take of GestureDebug.Data?((uint64_t)&v20[v7], (uint64_t)v78, &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, MEMORY[0x263F8D8F0]);
                outlined init with take of GestureDebug.Data?((uint64_t)v78, (uint64_t)v79, &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, v22);
                if (_s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOSgWOg((uint64_t)v79) == 1)
                {
                  id v23 = (uint64_t (*)(void, uint64_t))MEMORY[0x263F8D8F0];
                  unint64_t v24 = v78;
                }
                else
                {
                  outlined init with take of GestureDebug.Data?((uint64_t)v78, (uint64_t)v67, &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, MEMORY[0x263F8D8F0]);
                  outlined init with take of LayoutGestureBox.Child.DebugData((uint64_t)v67, (uint64_t)v68);
                  if (_s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOWOg((uint64_t)v68) == 1)
                  {
                    _s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOWOj0_((uint64_t)v68);
                    uint64_t Value = (long long *)AGGraphGetValue();
                    long long v69 = *Value;
                    long long v26 = Value[4];
                    long long v28 = Value[1];
                    long long v27 = Value[2];
                    long long v72 = Value[3];
                    long long v73 = v26;
                    long long v70 = v28;
                    long long v71 = v27;
                    long long v29 = Value[8];
                    long long v31 = Value[5];
                    long long v30 = Value[6];
                    long long v76 = Value[7];
                    long long v77 = v29;
                    long long v74 = v31;
                    long long v75 = v30;
                    outlined retain of GestureDebug.Data((uint64_t)&v69);
                    outlined release of LayoutGestureBox.Child.DebugData?(v78);
                    uint64_t v32 = *((void *)&v77 + 1);
                    long long v33 = v73;
                    long long v34 = v74;
                    long long v35 = v75;
                    long long v36 = v76;
                    char v37 = v77;
                    long long v38 = v71;
                    long long v39 = v72;
                    uint64_t v40 = *(void *)((char *)&v70 + 4);
                    char v41 = v70;
                    char v42 = BYTE1(v70);
                    uint64_t v43 = *((void *)&v69 + 1);
                    __int8 v44 = v69;
                  }
                  else
                  {
                    uint64_t v45 = _s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOWOj0_((uint64_t)v68);
                    uint64_t v32 = *(void *)(v45 + 136);
                    long long v33 = *(_OWORD *)(v45 + 64);
                    long long v34 = *(_OWORD *)(v45 + 80);
                    long long v35 = *(_OWORD *)(v45 + 96);
                    long long v36 = *(_OWORD *)(v45 + 112);
                    char v37 = *(unsigned char *)(v45 + 128);
                    long long v38 = *(_OWORD *)(v45 + 32);
                    long long v39 = *(_OWORD *)(v45 + 48);
                    uint64_t v40 = *(void *)(v45 + 20);
                    char v41 = *(unsigned char *)(v45 + 16);
                    char v42 = *(unsigned char *)(v45 + 17);
                    uint64_t v43 = *(void *)(v45 + 8);
                    __int8 v44 = *(unsigned char *)v45;
                  }
                  v54.i8[0] = v44;
                  v54.i64[1] = v43;
                  char v55 = v41;
                  char v56 = v42;
                  uint64_t v57 = v40;
                  long long v58 = v38;
                  long long v59 = v39;
                  long long v60 = v33;
                  long long v61 = v34;
                  long long v62 = v35;
                  long long v63 = v36;
                  char v64 = v37;
                  uint64_t v65 = v32;
                  _s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOWOi_(&v54);
                  outlined init with take of LayoutGestureBox.Child.DebugData((uint64_t)&v54, (uint64_t)v66);
                  _ViewInputs.base.modify(v66, v46);
                  id v23 = (uint64_t (*)(void, uint64_t))MEMORY[0x263F8D8F0];
                  unint64_t v24 = (unint64_t *)v66;
                }
                outlined init with take of GestureDebug.Data?((uint64_t)v24, (uint64_t)&v69, &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, v23);
                outlined init with take of GestureDebug.Data?((uint64_t)&v69, (uint64_t)&v20[v7], &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, MEMORY[0x263F8D8F0]);
                *((_DWORD *)v21 - 6) = 0;
                *((unsigned char *)v21 - 20) = 1;
                uint64_t v47 = &v20[v7];
                uint64_t v48 = v20[v7 - 4];
                if (v48)
                {
                  MEMORY[0x270FA5388](v48);
                  AGSubgraphApply();
                  BOOL v49 = (void *)*(v47 - 4);
                  if (v49)
                  {
                    AGSubgraphInvalidate();
                  }
                }
                *(v47 - 4) = 0;
                (*(void (**)(void))(*(void *)*(v21 - 6) + 120))();
                uint64_t v6 = v51;
              }
              uint64_t v50 = &v20[v7];
              swift_bridgeObjectRelease();
              *(v50 - 2) = MEMORY[0x263F8EE80];
              swift_bridgeObjectRelease();
              *(v21 - 1) = MEMORY[0x263F8EE88];
              ++*((_DWORD *)v50 - 9);
            }
            swift_endAccess();
            ++*(_DWORD *)(v53 + 172);
            uint64_t result = outlined release of LayoutGestureBox.Child((uint64_t)&v80);
            uint64_t v8 = v52;
          }
        }
        if (v6 == v5) {
          return result;
        }
        long long v4 = *(void **)v1;
        v7 += 26;
        ++v5;
      }
      while (v5 < *(void *)(*(void *)v1 + 16));
    }
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  void *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  long long *v9;
  long long v10;
  long long v11;
  long long v12;
  long long v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  int v19;
  void *v20;
  void *v21;
  uint64_t (*v22)(void, uint64_t);
  uint64_t (*v23)(void, uint64_t);
  unint64_t *v24;
  long long *Value;
  long long v26;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  uint64_t v32;
  long long v33;
  long long v34;
  long long v35;
  long long v36;
  char v37;
  long long v38;
  long long v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  __int8 v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  void *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int8x16_t v54;
  char v55;
  char v56;
  uint64_t v57;
  long long v58;
  long long v59;
  long long v60;
  long long v61;
  long long v62;
  long long v63;
  char v64;
  uint64_t v65;
  unsigned char v66[144];
  unsigned char v67[144];
  unsigned char v68[144];
  long long v69;
  long long v70;
  long long v71;
  long long v72;
  long long v73;
  long long v74;
  long long v75;
  long long v76;
  long long v77;
  unint64_t v78[18];
  unsigned char v79[168];
  long long v80;
  long long v81;
  long long v82;
  long long v83;
  long long v84;
  long long v85;
  long long v86;
  long long v87;
  long long v88;
  long long v89;
  long long v90;
  _OWORD v91[2];

  uint64_t v1 = v0 + 160;
  uint64_t result = swift_beginAccess();
  uint64_t v53 = v0;
  uint64_t v3 = *(void *)(*(void *)(v0 + 160) + 16);
  if (v3)
  {
    long long v4 = *(void **)(v0 + 160);
    if (v4[2])
    {
      unint64_t v5 = 0;
      uint64_t v6 = v3 - 1;
      uint64_t v7 = 10;
      uint64_t v8 = MEMORY[0x263F8EE60] + 8;
      uint64_t v52 = MEMORY[0x263F8EE60] + 8;
      uint64_t v51 = v3 - 1;
      do
      {
        unint64_t v9 = (long long *)&v4[v7];
        long long v80 = *(v9 - 3);
        long long v10 = *(v9 - 2);
        long long v11 = *(v9 - 1);
        long long v12 = *v9;
        long long v84 = v9[1];
        long long v83 = v12;
        long long v82 = v11;
        long long v81 = v10;
        long long v13 = v9[2];
        long long v14 = v9[3];
        long long v15 = v9[4];
        long long v88 = v9[5];
        long long v87 = v15;
        long long v86 = v14;
        long long v85 = v13;
        long long v16 = v9[6];
        long long v17 = v9[7];
        long long v18 = v9[8];
        *(_OWORD *)((char *)v91 + 12) = *(long long *)((char *)v9 + 140);
        v91[0] = v18;
        long long v90 = v17;
        long long v89 = v16;
        if (*(void *)(*((void *)&v82 + 1) + 16))
        {
          if (BYTE12(v81)) {
            goto LABEL_32;
          }
          type metadata accessor for Attribute<LayoutGestureBox.Value>(0, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<()>, v8, (uint64_t (*)(void, uint64_t))type metadata accessor for GesturePhase);
          uint64_t result = AGGraphGetValue();
          int v19 = *(unsigned __int8 *)(result + 1);
          if (v19 == 2 || v19 == 3 && !*(unsigned char *)result)
          {
            swift_beginAccess();
            unint64_t v20 = *(void **)v1;
            outlined retain of LayoutGestureBox.Child((uint64_t)&v80);
            uint64_t result = swift_isUniquelyReferenced_nonNull_native();
            *(void *)uint64_t v1 = v20;
            if ((result & 1) == 0)
            {
              uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v20);
              unint64_t v20 = (void *)result;
              *(void *)uint64_t v1 = result;
            }
            if (v5 >= v20[2]) {
              goto LABEL_31;
            }
            uint64_t v21 = &v20[v7];
            if (*(void *)(v20[v7 - 1] + 16))
            {
              if ((*((unsigned char *)v21 - 20) & 1) == 0)
              {
                unsigned int v22 = (uint64_t (*)(void, uint64_t))MEMORY[0x263F8D8F0];
                outlined init with take of LayoutGestureBox.Child.DebugData?((uint64_t)&v20[v7], (uint64_t)v78, &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, MEMORY[0x263F8D8F0]);
                outlined init with take of LayoutGestureBox.Child.DebugData?((uint64_t)v78, (uint64_t)v79, &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, v22);
                if (_s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOSgWOg((uint64_t)v79) == 1)
                {
                  id v23 = (uint64_t (*)(void, uint64_t))MEMORY[0x263F8D8F0];
                  unint64_t v24 = v78;
                }
                else
                {
                  outlined init with take of LayoutGestureBox.Child.DebugData?((uint64_t)v78, (uint64_t)v67, &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, MEMORY[0x263F8D8F0]);
                  outlined init with take of LayoutGestureBox.Child.DebugData((uint64_t)v67, (uint64_t)v68);
                  if (_s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOWOg((uint64_t)v68) == 1)
                  {
                    _s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOWOj0_((uint64_t)v68);
                    uint64_t Value = (long long *)AGGraphGetValue();
                    long long v69 = *Value;
                    long long v26 = Value[4];
                    long long v28 = Value[1];
                    long long v27 = Value[2];
                    long long v72 = Value[3];
                    long long v73 = v26;
                    long long v70 = v28;
                    long long v71 = v27;
                    long long v29 = Value[8];
                    long long v31 = Value[5];
                    long long v30 = Value[6];
                    long long v76 = Value[7];
                    long long v77 = v29;
                    long long v74 = v31;
                    long long v75 = v30;
                    outlined retain of GestureDebug.Data((uint64_t)&v69);
                    outlined release of LayoutGestureBox.Child.DebugData?(v78);
                    uint64_t v32 = *((void *)&v77 + 1);
                    long long v33 = v73;
                    long long v34 = v74;
                    long long v35 = v75;
                    long long v36 = v76;
                    char v37 = v77;
                    long long v38 = v71;
                    long long v39 = v72;
                    uint64_t v40 = *(void *)((char *)&v70 + 4);
                    char v41 = v70;
                    char v42 = BYTE1(v70);
                    uint64_t v43 = *((void *)&v69 + 1);
                    __int8 v44 = v69;
                  }
                  else
                  {
                    uint64_t v45 = _s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOWOj0_((uint64_t)v68);
                    uint64_t v32 = *(void *)(v45 + 136);
                    long long v33 = *(_OWORD *)(v45 + 64);
                    long long v34 = *(_OWORD *)(v45 + 80);
                    long long v35 = *(_OWORD *)(v45 + 96);
                    long long v36 = *(_OWORD *)(v45 + 112);
                    char v37 = *(unsigned char *)(v45 + 128);
                    long long v38 = *(_OWORD *)(v45 + 32);
                    long long v39 = *(_OWORD *)(v45 + 48);
                    uint64_t v40 = *(void *)(v45 + 20);
                    char v41 = *(unsigned char *)(v45 + 16);
                    char v42 = *(unsigned char *)(v45 + 17);
                    uint64_t v43 = *(void *)(v45 + 8);
                    __int8 v44 = *(unsigned char *)v45;
                  }
                  v54.i8[0] = v44;
                  v54.i64[1] = v43;
                  char v55 = v41;
                  char v56 = v42;
                  uint64_t v57 = v40;
                  long long v58 = v38;
                  long long v59 = v39;
                  long long v60 = v33;
                  long long v61 = v34;
                  long long v62 = v35;
                  long long v63 = v36;
                  char v64 = v37;
                  uint64_t v65 = v32;
                  _s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOWOi_(&v54);
                  outlined init with take of LayoutGestureBox.Child.DebugData((uint64_t)&v54, (uint64_t)v66);
                  _ViewInputs.base.modify(v66, v46);
                  id v23 = (uint64_t (*)(void, uint64_t))MEMORY[0x263F8D8F0];
                  unint64_t v24 = (unint64_t *)v66;
                }
                outlined init with take of LayoutGestureBox.Child.DebugData?((uint64_t)v24, (uint64_t)&v69, &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, v23);
                outlined init with take of LayoutGestureBox.Child.DebugData?((uint64_t)&v69, (uint64_t)&v20[v7], &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, MEMORY[0x263F8D8F0]);
                *((_DWORD *)v21 - 6) = 0;
                *((unsigned char *)v21 - 20) = 1;
                uint64_t v47 = &v20[v7];
                uint64_t v48 = v20[v7 - 4];
                if (v48)
                {
                  MEMORY[0x270FA5388](v48);
                  AGSubgraphApply();
                  BOOL v49 = (void *)*(v47 - 4);
                  if (v49)
                  {
                    AGSubgraphInvalidate();
                  }
                }
                *(v47 - 4) = 0;
                (*(void (**)(void))(*(void *)*(v21 - 6) + 120))();
                uint64_t v6 = v51;
              }
              uint64_t v50 = &v20[v7];
              swift_bridgeObjectRelease();
              *(v50 - 2) = MEMORY[0x263F8EE80];
              swift_bridgeObjectRelease();
              *(v21 - 1) = MEMORY[0x263F8EE88];
              ++*((_DWORD *)v50 - 9);
            }
            swift_endAccess();
            ++*(_DWORD *)(v53 + 172);
            uint64_t result = outlined release of LayoutGestureBox.Child((uint64_t)&v80);
            uint64_t v8 = v52;
          }
        }
        if (v6 == v5) {
          return result;
        }
        long long v4 = *(void **)v1;
        v7 += 26;
        ++v5;
      }
      while (v5 < *(void *)(*(void *)v1 + 16));
    }
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
  }
  return result;
}

unint64_t outlined consume of LayoutGestureBox.Child.DebugData?(unint64_t result, uint64_t a2, int a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17, uint64_t a18, uint64_t (*a19)(void))
{
  if (HIDWORD(a4)
    || result < 0xFFFFFFFF00000000
    || a3 & 0xFFFFFC00 | a2 & 0xF000000000000007
    || a17 > 3
    || (a18 & 0xF000000000000007) != 0)
  {
    return a19();
  }
  return result;
}

int8x16_t _s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOWOi_(int8x16_t *a1)
{
  int8x16_t v1 = vandq_s8(a1[1], (int8x16_t)xmmword_2461E0A90);
  *a1 = vandq_s8(*a1, (int8x16_t)xmmword_2461E0A80);
  a1[1] = v1;
  int8x16_t result = vandq_s8(a1[8], (int8x16_t)xmmword_2461E0AA0);
  a1[8] = result;
  return result;
}

int8x16_t _s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOWOi0_(int8x16_t *a1)
{
  int8x16_t result = vandq_s8(*a1, (int8x16_t)xmmword_2461E0A80);
  int8x16_t v2 = vandq_s8(a1[1], (int8x16_t)xmmword_2461E0A90);
  uint64_t v3 = a1[8].i64[0] & 3;
  unint64_t v4 = a1[8].i64[1] & 0xFFFFFFFFFFFFFF8 | 0x8000000000000000;
  *a1 = result;
  a1[1] = v2;
  a1[8].i64[0] = v3;
  a1[8].i64[1] = v4;
  return result;
}

double _s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOSgWOi0_(uint64_t a1)
{
  *(void *)a1 = 0xFFFFFFFF00000000;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(void *)(a1 + 136) = 0;
  return result;
}

unint64_t lazy protocol witness table accessor for type LayoutChildEvents<DefaultLayoutGesture> and conformance LayoutChildEvents<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type LayoutChildEvents<DefaultLayoutGesture> and conformance LayoutChildEvents<A>;
  if (!lazy protocol witness table cache variable for type LayoutChildEvents<DefaultLayoutGesture> and conformance LayoutChildEvents<A>)
  {
    type metadata accessor for ModifiedContent<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, _SafeAreaInsetsModifier>(255, &lazy cache variable for type metadata for LayoutChildEvents<DefaultLayoutGesture>, (uint64_t)&type metadata for DefaultLayoutGesture, (uint64_t)&protocol witness table for DefaultLayoutGesture, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for LayoutChildEvents);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LayoutChildEvents<DefaultLayoutGesture> and conformance LayoutChildEvents<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LayoutChildSeed<DefaultLayoutGesture> and conformance LayoutChildSeed<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type LayoutChildSeed<DefaultLayoutGesture> and conformance LayoutChildSeed<A>;
  if (!lazy protocol witness table cache variable for type LayoutChildSeed<DefaultLayoutGesture> and conformance LayoutChildSeed<A>)
  {
    type metadata accessor for ModifiedContent<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, _SafeAreaInsetsModifier>(255, &lazy cache variable for type metadata for LayoutChildSeed<DefaultLayoutGesture>, (uint64_t)&type metadata for DefaultLayoutGesture, (uint64_t)&protocol witness table for DefaultLayoutGesture, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for LayoutChildSeed);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LayoutChildSeed<DefaultLayoutGesture> and conformance LayoutChildSeed<A>);
  }
  return result;
}

uint64_t outlined init with take of (key: AnyHashable, value: ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Item)?(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  type metadata accessor for (key: AnyHashable, value: ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Item)?(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t specialized _NativeDictionary.filter(_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(char *, unint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = v3;
  v17[1] = *MEMORY[0x263EF8340];
  char v8 = *(unsigned char *)(a1 + 32);
  unsigned int v9 = v8 & 0x3F;
  unint64_t v10 = (unint64_t)((1 << v8) + 63) >> 6;
  size_t v11 = 8 * v10;
  uint64_t isStackAllocationSafe = swift_retain_n();
  if (v9 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x270FA5388](isStackAllocationSafe);
    bzero((char *)v17 - ((v11 + 15) & 0x3FFFFFFFFFFFFFF0), v11);
    swift_retain();
    uint64_t v13 = v5;
    uint64_t v14 = a3((char *)v17 - ((v11 + 15) & 0x3FFFFFFFFFFFFFF0), v10, a1, a2);
    swift_release();
    if (v13) {
      swift_willThrow();
    }
    swift_release_n();
  }
  else
  {
    long long v15 = (void *)swift_slowAlloc();
    bzero(v15, v11);
    swift_retain();
    uint64_t v14 = a3((char *)v15, v10, a1, a2);
    swift_release();
    MEMORY[0x24C527CC0](v15, -1, -1);
    swift_release_n();
  }
  return v14;
}

unint64_t *specialized closure #1 in _NativeDictionary.filter(_:)(unint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = 0;
  int64_t v6 = 0;
  uint64_t v7 = a3 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(a3 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      unint64_t v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v13 = v12 | (v6 << 6);
      goto LABEL_5;
    }
    int64_t v14 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_24;
    }
    if (v14 >= v11) {
      return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v5, a3);
    }
    unint64_t v15 = *(void *)(v7 + 8 * v14);
    ++v6;
    if (!v15)
    {
      int64_t v6 = v14 + 1;
      if (v14 + 1 >= v11) {
        return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v5, a3);
      }
      unint64_t v15 = *(void *)(v7 + 8 * v6);
      if (!v15) {
        break;
      }
    }
LABEL_18:
    unint64_t v17 = __clz(__rbit64(v15));
    unint64_t v10 = (v15 - 1) & v15;
    unint64_t v13 = v17 + (v6 << 6);
LABEL_5:
    if (*(void *)(*(void *)(a3 + 56) + 8 * v13) != a4)
    {
      *(unint64_t *)((char *)result + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      if (__OFADD__(v5++, 1))
      {
        __break(1u);
        return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v5, a3);
      }
    }
  }
  int64_t v16 = v14 + 2;
  if (v16 >= v11) {
    return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v5, a3);
  }
  unint64_t v15 = *(void *)(v7 + 8 * v16);
  if (v15)
  {
    int64_t v6 = v16;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v6 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v6 >= v11) {
      return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v5, a3);
    }
    unint64_t v15 = *(void *)(v7 + 8 * v6);
    ++v16;
    if (v15) {
      goto LABEL_18;
    }
  }
LABEL_24:
  __break(1u);
  return result;
}

uint64_t outlined retain of ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>(uint64_t a1)
{
  return a1;
}

void type metadata accessor for ForEachState<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>.Info()
{
  if (!lazy cache variable for type metadata for ForEachState<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>.Info)
  {
    type metadata accessor for ModifiedContent<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, _SafeAreaInsetsModifier>(255, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x263F8D6C8], MEMORY[0x263F8D6E0], MEMORY[0x263F8D870]);
    type metadata accessor for ShapeStyleBox<ShapeStylePair<AnyShapeStyle, AnyShapeStyle>>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, (uint64_t)&type metadata for _OffsetEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ModifiedContent);
    lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for ForEachState.Info();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ForEachState<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>.Info);
    }
  }
}

uint64_t outlined consume of ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t partial apply for specialized closure #1 in closure #1 in SecondaryChild.value.getter(uint64_t a1)
{
  return specialized closure #1 in closure #1 in SecondaryChild.value.getter(*(void (**)(uint64_t *))a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(v1 + 16));
}

double partial apply for specialized closure #1 in Attribute.syncMainIfReferences<A>(do:)()
{
  *(void *)&double result = specialized closure #1 in Attribute.syncMainIfReferences<A>(do:)((__n128 *)v0[2], (void (*)(_OWORD *__return_ptr, _OWORD *))v0[3], v0[4], (_OWORD *)v0[5]).n128_u64[0];
  return result;
}

uint64_t outlined release of (ViewGeometry, ViewGeometry)(uint64_t a1)
{
  return a1;
}

uint64_t sub_245DB9938()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type ProjectionTransformElement and conformance ProjectionTransformElement()
{
  unint64_t result = lazy protocol witness table cache variable for type ProjectionTransformElement and conformance ProjectionTransformElement;
  if (!lazy protocol witness table cache variable for type ProjectionTransformElement and conformance ProjectionTransformElement)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProjectionTransformElement and conformance ProjectionTransformElement);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ProjectionTransformElement and conformance ProjectionTransformElement;
  if (!lazy protocol witness table cache variable for type ProjectionTransformElement and conformance ProjectionTransformElement)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProjectionTransformElement and conformance ProjectionTransformElement);
  }
  return result;
}

void type metadata accessor for (key: Subview.ID, value: ForEachState<Slice<SubviewsCollection>, Subview.ID, Subview>.Item)()
{
  if (!lazy cache variable for type metadata for (key: Subview.ID, value: ForEachState<Slice<SubviewsCollection>, Subview.ID, Subview>.Item))
  {
    type metadata accessor for ForEachState<Slice<SubviewsCollection>, Subview.ID, Subview>.Item(255, (unint64_t *)&lazy cache variable for type metadata for ForEachState<Slice<SubviewsCollection>, Subview.ID, Subview>.Item, (uint64_t (*)(uint64_t, void *))type metadata accessor for ForEachState.Item);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (key: Subview.ID, value: ForEachState<Slice<SubviewsCollection>, Subview.ID, Subview>.Item));
    }
  }
}

uint64_t outlined assign with take of Slice<SubviewsCollection>(uint64_t a1, uint64_t a2)
{
  _s7SwiftUI17UnaryLayoutEngine33_1C3B77B617AD058A6802F719E38F5D79LLVyAA023IgnoresAutomaticPaddingD033_47C1BD8C61550BB60F4F3D12F752D53DLLVGMaTm_0(0, &lazy cache variable for type metadata for Slice<SubviewsCollection>, (uint64_t (*)(void))lazy protocol witness table accessor for type SubviewsCollection and conformance SubviewsCollection, (uint64_t)&type metadata for SubviewsCollection, MEMORY[0x263F8E738]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_245DB9AC0()
{
  return swift_deallocObject();
}

uint64_t *_s7SwiftUI22RequiredTapCountWriter33_7C0ADFDC1D38FCDDCFDE5CE8530A0B2ELLV5ChildV5valueyySiSgzcvgyAHzcfU_TA_0(uint64_t *a1)
{
  return closure #1 in RequiredTapCountWriter.Child.value.getter(a1, *(void *)(v1 + 16), *(unsigned char *)(v1 + 24));
}

uint64_t sub_245DB9ADC()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t lazy protocol witness table accessor for type ModifierGesture<CategoryGesture<TappableEvent>, ModifierGesture<RepeatGesture<TappableEvent>, SingleTapGesture<TappableEvent>>> and conformance ModifierGesture<A, B>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void _s7SwiftUI11Map2GestureVyAA13TappableEventVAA08ModifierD0VyAA015CoordinateSpaceD0Vy12CoreGraphics7CGFloatVGAA08DistanceD0VGAEGMaTm_0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), unint64_t *a4, void (*a5)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    lazy protocol witness table accessor for type ModifierGesture<CategoryGesture<TappableEvent>, ModifierGesture<RepeatGesture<TappableEvent>, SingleTapGesture<TappableEvent>>> and conformance ModifierGesture<A, B>(a4, a5);
    unint64_t v8 = type metadata accessor for Map2Gesture();
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type RequiredTapCountWriter<TappableEvent> and conformance RequiredTapCountWriter<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(void, uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(255, a2, (uint64_t)&type metadata for TappableEvent, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s7SwiftUI12GesturePhaseOyAA13TappableEventVGAF_ACy12CoreGraphics7CGFloatVGtcMaTm_0(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(255, &lazy cache variable for type metadata for GesturePhase<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(void, uint64_t))type metadata accessor for GesturePhase);
    _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(255, a3, a4, (uint64_t (*)(void, uint64_t))type metadata accessor for GesturePhase);
    uint64_t result = swift_getFunctionTypeMetadata2();
    atomic_store(result, a2);
  }
  return result;
}

void type metadata accessor for ModifierGesture<RequiredTapCountWriter<TappableEvent>, ModifierGesture<CategoryGesture<TappableEvent>, ModifierGesture<RepeatGesture<TappableEvent>, SingleTapGesture<TappableEvent>>>>()
{
  if (!lazy cache variable for type metadata for ModifierGesture<RequiredTapCountWriter<TappableEvent>, ModifierGesture<CategoryGesture<TappableEvent>, ModifierGesture<RepeatGesture<TappableEvent>, SingleTapGesture<TappableEvent>>>>)
  {
    _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(255, &lazy cache variable for type metadata for RequiredTapCountWriter<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(void, uint64_t))type metadata accessor for RequiredTapCountWriter);
    type metadata accessor for ModifierGesture<CategoryGesture<TappableEvent>, ModifierGesture<RepeatGesture<TappableEvent>, SingleTapGesture<TappableEvent>>>();
    lazy protocol witness table accessor for type RequiredTapCountWriter<TappableEvent> and conformance RequiredTapCountWriter<A>(&lazy protocol witness table cache variable for type RequiredTapCountWriter<TappableEvent> and conformance RequiredTapCountWriter<A>, &lazy cache variable for type metadata for RequiredTapCountWriter<TappableEvent>, (uint64_t (*)(void, uint64_t))type metadata accessor for RequiredTapCountWriter);
    lazy protocol witness table accessor for type ModifierGesture<CategoryGesture<TappableEvent>, ModifierGesture<RepeatGesture<TappableEvent>, SingleTapGesture<TappableEvent>>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type ModifierGesture<CategoryGesture<TappableEvent>, ModifierGesture<RepeatGesture<TappableEvent>, SingleTapGesture<TappableEvent>>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<CategoryGesture<TappableEvent>, ModifierGesture<RepeatGesture<TappableEvent>, SingleTapGesture<TappableEvent>>>);
    unint64_t v0 = type metadata accessor for ModifierGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<RequiredTapCountWriter<TappableEvent>, ModifierGesture<CategoryGesture<TappableEvent>, ModifierGesture<RepeatGesture<TappableEvent>, SingleTapGesture<TappableEvent>>>>);
    }
  }
}

void type metadata accessor for ModifierGesture<CategoryGesture<TappableEvent>, ModifierGesture<RepeatGesture<TappableEvent>, SingleTapGesture<TappableEvent>>>()
{
  if (!lazy cache variable for type metadata for ModifierGesture<CategoryGesture<TappableEvent>, ModifierGesture<RepeatGesture<TappableEvent>, SingleTapGesture<TappableEvent>>>)
  {
    _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(255, &lazy cache variable for type metadata for CategoryGesture<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(void, uint64_t))type metadata accessor for CategoryGesture);
    type metadata accessor for ModifierGesture<RepeatGesture<TappableEvent>, SingleTapGesture<TappableEvent>>();
    lazy protocol witness table accessor for type RequiredTapCountWriter<TappableEvent> and conformance RequiredTapCountWriter<A>(&lazy protocol witness table cache variable for type CategoryGesture<TappableEvent> and conformance CategoryGesture<A>, &lazy cache variable for type metadata for CategoryGesture<TappableEvent>, (uint64_t (*)(void, uint64_t))type metadata accessor for CategoryGesture);
    lazy protocol witness table accessor for type ModifierGesture<CategoryGesture<TappableEvent>, ModifierGesture<RepeatGesture<TappableEvent>, SingleTapGesture<TappableEvent>>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type ModifierGesture<RepeatGesture<TappableEvent>, SingleTapGesture<TappableEvent>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<RepeatGesture<TappableEvent>, SingleTapGesture<TappableEvent>>);
    unint64_t v0 = type metadata accessor for ModifierGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<CategoryGesture<TappableEvent>, ModifierGesture<RepeatGesture<TappableEvent>, SingleTapGesture<TappableEvent>>>);
    }
  }
}

void type metadata accessor for ModifierGesture<RepeatGesture<TappableEvent>, SingleTapGesture<TappableEvent>>()
{
  if (!lazy cache variable for type metadata for ModifierGesture<RepeatGesture<TappableEvent>, SingleTapGesture<TappableEvent>>)
  {
    _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(255, &lazy cache variable for type metadata for RepeatGesture<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(void, uint64_t))type metadata accessor for RepeatGesture);
    type metadata accessor for ModifiedContent<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, _SafeAreaInsetsModifier>(255, &lazy cache variable for type metadata for SingleTapGesture<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t)&protocol witness table for TappableEvent, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SingleTapGesture);
    lazy protocol witness table accessor for type RequiredTapCountWriter<TappableEvent> and conformance RequiredTapCountWriter<A>(&lazy protocol witness table cache variable for type RepeatGesture<TappableEvent> and conformance RepeatGesture<A>, &lazy cache variable for type metadata for RepeatGesture<TappableEvent>, (uint64_t (*)(void, uint64_t))type metadata accessor for RepeatGesture);
    lazy protocol witness table accessor for type SingleTapGesture<TappableEvent> and conformance SingleTapGesture<A>();
    unint64_t v0 = type metadata accessor for ModifierGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<RepeatGesture<TappableEvent>, SingleTapGesture<TappableEvent>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type CoordinateSpaceElement and conformance CoordinateSpaceElement()
{
  unint64_t result = lazy protocol witness table cache variable for type CoordinateSpaceElement and conformance CoordinateSpaceElement;
  if (!lazy protocol witness table cache variable for type CoordinateSpaceElement and conformance CoordinateSpaceElement)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CoordinateSpaceElement and conformance CoordinateSpaceElement);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CoordinateSpaceElement and conformance CoordinateSpaceElement;
  if (!lazy protocol witness table cache variable for type CoordinateSpaceElement and conformance CoordinateSpaceElement)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CoordinateSpaceElement and conformance CoordinateSpaceElement);
  }
  return result;
}

uint64_t outlined destroy of CoordinateSpaceElement(uint64_t a1)
{
  return a1;
}

void type metadata accessor for (key: AnyHashable, value: ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Item)()
{
  if (!lazy cache variable for type metadata for (key: AnyHashable, value: ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Item))
  {
    type metadata accessor for ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Item(255, (unint64_t *)&lazy cache variable for type metadata for ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Item, (uint64_t (*)(uint64_t, void *))type metadata accessor for ForEachState.Item);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (key: AnyHashable, value: ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Item));
    }
  }
}

uint64_t outlined assign with take of _VariadicView_Children(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_245DBA228()
{
  return swift_deallocObject();
}

uint64_t sub_245DBA2A0()
{
  outlined consume of ContentTransition.Storage(*(void *)(v0 + 16), *(unsigned int *)(v0 + 24) | ((unint64_t)*(unsigned __int8 *)(v0 + 28) << 32), *(unsigned char *)(v0 + 29));
  swift_release();

  return swift_deallocObject();
}

uint64_t outlined destroy of TimelineSchedule?(uint64_t a1)
{
  _s7SwiftUI16TimelineSchedule_pSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for TimelineSchedule?, (unint64_t *)&lazy cache variable for type metadata for TimelineSchedule, (uint64_t)&protocol descriptor for TimelineSchedule, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_245DBA378()
{
  return swift_deallocObject();
}

uint64_t sub_245DBA388()
{
  return swift_deallocObject();
}

uint64_t *initializeBufferWithCopyOfBuffer for UnaryPositionAwareLayoutEngine(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || ((((((v6 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 15) & 0xFFFFFFFFFFFFFFFCLL) + 19) & 0xFFFFFFFFFFFFFFF8) + 161 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v10 = ((unint64_t)v4 + v6 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v11 = ((unint64_t)a2 + v6 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v12 = *(void *)v11;
    *(_DWORD *)(v10 + 8) = *(_DWORD *)(v11 + 8);
    *(void *)unint64_t v10 = v12;
    unint64_t v13 = (v10 + 15) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v14 = (v11 + 15) & 0xFFFFFFFFFFFFFFFCLL;
    LODWORD(v12) = *(_DWORD *)(v14 + 8);
    *(void *)unint64_t v13 = *(void *)v14;
    *(_DWORD *)(v13 + 8) = v12;
    unint64_t v15 = (v13 + 19) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v16 = (v14 + 19) & 0xFFFFFFFFFFFFFFF8;
    long long v18 = *(_OWORD *)(v16 + 16);
    long long v17 = *(_OWORD *)(v16 + 32);
    *(_OWORD *)unint64_t v15 = *(_OWORD *)v16;
    *(_OWORD *)(v15 + 16) = v18;
    *(_OWORD *)(v15 + 32) = v17;
    long long v19 = *(_OWORD *)(v16 + 96);
    long long v21 = *(_OWORD *)(v16 + 48);
    long long v20 = *(_OWORD *)(v16 + 64);
    *(_OWORD *)(v15 + 80) = *(_OWORD *)(v16 + 80);
    *(_OWORD *)(v15 + 96) = v19;
    *(_OWORD *)(v15 + 48) = v21;
    *(_OWORD *)(v15 + 64) = v20;
    long long v23 = *(_OWORD *)(v16 + 128);
    long long v22 = *(_OWORD *)(v16 + 144);
    long long v24 = *(_OWORD *)(v16 + 112);
    *(unsigned char *)(v15 + 160) = *(unsigned char *)(v16 + 160);
    *(_OWORD *)(v15 + 128) = v23;
    *(_OWORD *)(v15 + 144) = v22;
    *(_OWORD *)(v15 + 112) = v24;
  }
  return v4;
}

uint64_t initializeWithCopy for UnaryPositionAwareLayoutEngine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 3;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFFCLL;
  uint64_t v9 = *(void *)v8;
  *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 + 8);
  *(void *)unint64_t v7 = v9;
  unint64_t v10 = (v7 + 15) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v11 = (v8 + 15) & 0xFFFFFFFFFFFFFFFCLL;
  uint64_t v12 = *(void *)v11;
  *(_DWORD *)(v10 + 8) = *(_DWORD *)(v11 + 8);
  *(void *)unint64_t v10 = v12;
  unint64_t v13 = (v10 + 19) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = (v11 + 19) & 0xFFFFFFFFFFFFFFF8;
  long long v15 = *(_OWORD *)(v14 + 32);
  long long v16 = *(_OWORD *)v14;
  *(_OWORD *)(v13 + 16) = *(_OWORD *)(v14 + 16);
  *(_OWORD *)(v13 + 32) = v15;
  *(_OWORD *)unint64_t v13 = v16;
  long long v17 = *(_OWORD *)(v14 + 96);
  long long v19 = *(_OWORD *)(v14 + 48);
  long long v18 = *(_OWORD *)(v14 + 64);
  *(_OWORD *)(v13 + 80) = *(_OWORD *)(v14 + 80);
  *(_OWORD *)(v13 + 96) = v17;
  *(_OWORD *)(v13 + 48) = v19;
  *(_OWORD *)(v13 + 64) = v18;
  long long v21 = *(_OWORD *)(v14 + 128);
  long long v20 = *(_OWORD *)(v14 + 144);
  long long v22 = *(_OWORD *)(v14 + 112);
  *(unsigned char *)(v13 + 160) = *(unsigned char *)(v14 + 160);
  *(_OWORD *)(v13 + 128) = v21;
  *(_OWORD *)(v13 + 144) = v20;
  *(_OWORD *)(v13 + 112) = v22;
  return a1;
}

uint64_t assignWithCopy for UnaryPositionAwareLayoutEngine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 3;
  unint64_t v7 = (_DWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v8 = (_DWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  *unint64_t v7 = *v8;
  v7[1] = v8[1];
  uint64_t v7[2] = v8[2];
  uint64_t v9 = (_DWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v10 = (_DWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v9 = *v10;
  v9[1] = v10[1];
  v9[2] = v10[2];
  unint64_t v11 = ((unint64_t)v9 + 19) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = ((unint64_t)v10 + 19) & 0xFFFFFFFFFFFFFFF8;
  char v13 = *(unsigned char *)(v12 + 48);
  long long v15 = *(_OWORD *)(v12 + 16);
  long long v14 = *(_OWORD *)(v12 + 32);
  *(_OWORD *)unint64_t v11 = *(_OWORD *)v12;
  *(_OWORD *)(v11 + 16) = v15;
  *(_OWORD *)(v11 + 32) = v14;
  *(unsigned char *)(v11 + 48) = v13;
  long long v16 = *(_OWORD *)(v12 + 56);
  long long v17 = *(_OWORD *)(v12 + 72);
  long long v18 = *(_OWORD *)(v12 + 88);
  *(unsigned char *)(v11 + 104) = *(unsigned char *)(v12 + 104);
  *(_OWORD *)(v11 + 88) = v18;
  *(_OWORD *)(v11 + 72) = v17;
  *(_OWORD *)(v11 + 56) = v16;
  long long v19 = *(_OWORD *)(v12 + 112);
  long long v20 = *(_OWORD *)(v12 + 128);
  long long v21 = *(_OWORD *)(v12 + 144);
  *(unsigned char *)(v11 + 160) = *(unsigned char *)(v12 + 160);
  *(_OWORD *)(v11 + 128) = v20;
  *(_OWORD *)(v11 + 144) = v21;
  *(_OWORD *)(v11 + 112) = v19;
  return a1;
}

uint64_t initializeWithTake for UnaryPositionAwareLayoutEngine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 3;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFFCLL;
  uint64_t v9 = *(void *)v8;
  *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 + 8);
  *(void *)unint64_t v7 = v9;
  unint64_t v10 = (v7 + 15) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v11 = (v8 + 15) & 0xFFFFFFFFFFFFFFFCLL;
  uint64_t v12 = *(void *)v11;
  *(_DWORD *)(v10 + 8) = *(_DWORD *)(v11 + 8);
  *(void *)unint64_t v10 = v12;
  unint64_t v13 = (v10 + 19) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = (v11 + 19) & 0xFFFFFFFFFFFFFFF8;
  long long v15 = *(_OWORD *)(v14 + 32);
  long long v16 = *(_OWORD *)v14;
  *(_OWORD *)(v13 + 16) = *(_OWORD *)(v14 + 16);
  *(_OWORD *)(v13 + 32) = v15;
  *(_OWORD *)unint64_t v13 = v16;
  long long v17 = *(_OWORD *)(v14 + 96);
  long long v19 = *(_OWORD *)(v14 + 48);
  long long v18 = *(_OWORD *)(v14 + 64);
  *(_OWORD *)(v13 + 80) = *(_OWORD *)(v14 + 80);
  *(_OWORD *)(v13 + 96) = v17;
  *(_OWORD *)(v13 + 48) = v19;
  *(_OWORD *)(v13 + 64) = v18;
  long long v21 = *(_OWORD *)(v14 + 128);
  long long v20 = *(_OWORD *)(v14 + 144);
  long long v22 = *(_OWORD *)(v14 + 112);
  *(unsigned char *)(v13 + 160) = *(unsigned char *)(v14 + 160);
  *(_OWORD *)(v13 + 128) = v21;
  *(_OWORD *)(v13 + 144) = v20;
  *(_OWORD *)(v13 + 112) = v22;
  return a1;
}

uint64_t assignWithTake for UnaryPositionAwareLayoutEngine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 3;
  unint64_t v7 = (_DWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v8 = (_DWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  *unint64_t v7 = *v8;
  v7[1] = v8[1];
  uint64_t v7[2] = v8[2];
  uint64_t v9 = (_DWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v10 = (_DWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v9 = *v10;
  v9[1] = v10[1];
  v9[2] = v10[2];
  unint64_t v11 = ((unint64_t)v9 + 19) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = ((unint64_t)v10 + 19) & 0xFFFFFFFFFFFFFFF8;
  char v13 = *(unsigned char *)(v12 + 48);
  long long v15 = *(_OWORD *)(v12 + 16);
  long long v14 = *(_OWORD *)(v12 + 32);
  *(_OWORD *)unint64_t v11 = *(_OWORD *)v12;
  *(_OWORD *)(v11 + 16) = v15;
  *(_OWORD *)(v11 + 32) = v14;
  *(unsigned char *)(v11 + 48) = v13;
  long long v16 = *(_OWORD *)(v12 + 56);
  long long v17 = *(_OWORD *)(v12 + 72);
  long long v18 = *(_OWORD *)(v12 + 88);
  *(unsigned char *)(v11 + 104) = *(unsigned char *)(v12 + 104);
  *(_OWORD *)(v11 + 88) = v18;
  *(_OWORD *)(v11 + 72) = v17;
  *(_OWORD *)(v11 + 56) = v16;
  long long v19 = *(_OWORD *)(v12 + 112);
  long long v20 = *(_OWORD *)(v12 + 128);
  long long v21 = *(_OWORD *)(v12 + 144);
  *(unsigned char *)(v11 + 160) = *(unsigned char *)(v12 + 160);
  *(_OWORD *)(v11 + 128) = v20;
  *(_OWORD *)(v11 + 144) = v21;
  *(_OWORD *)(v11 + 112) = v19;
  return a1;
}

uint64_t getEnumTagSinglePayload for UnaryPositionAwareLayoutEngine(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (!a2) {
    return 0;
  }
  if (v5 < a2)
  {
    unint64_t v6 = ((((((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 3) & 0xFFFFFFFFFFFFFFFCLL) + 15) & 0xFFFFFFFFFFFFFFFCLL)
         + 19) & 0xFFFFFFFFFFFFFFF8)
       + 161;
    unsigned int v7 = (a2 - v5 + 255) >> (8
                           * (((((((*(unsigned char *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 3) & 0xFC) + 15) & 0xFC)
                              + 19) & 0xF8)
                            - 95));
    if (v6 < 4) {
      unsigned int v8 = v7 + 1;
    }
    else {
      unsigned int v8 = 2;
    }
    if (v8 >= 0x10000) {
      unsigned int v9 = 4;
    }
    else {
      unsigned int v9 = 2;
    }
    if (v8 < 0x100) {
      unsigned int v9 = 1;
    }
    if (v8 >= 2) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    switch(v10)
    {
      case 1:
        int v11 = a1[v6];
        if (!a1[v6]) {
          break;
        }
        goto LABEL_18;
      case 2:
        int v11 = *(unsigned __int16 *)&a1[v6];
        if (*(_WORD *)&a1[v6]) {
          goto LABEL_18;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x245DBAA38);
      case 4:
        int v11 = *(_DWORD *)&a1[v6];
        if (!v11) {
          break;
        }
LABEL_18:
        int v12 = (v11 - 1) << (8
                          * (((((((*(unsigned char *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 3) & 0xFC) + 15) & 0xFC)
                             + 19) & 0xF8)
                           - 95));
        if (v6 >= 4) {
          int v12 = 0;
        }
        if (((((((*(_DWORD *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 3) & 0xFFFFFFFC) + 15) & 0xFFFFFFFC)
             + 19) & 0xFFFFFFF8) == 0xFFFFFF60)
          int v13 = *a1;
        else {
          int v13 = *(_DWORD *)a1;
        }
        return v5 + (v13 | v12) + 1;
      default:
        break;
    }
  }
  if (v5) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for UnaryPositionAwareLayoutEngine(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  uint64_t v7 = v6;
  unsigned int v8 = *(_DWORD *)(v6 + 84);
  size_t v9 = ((((((*(void *)(v6 + 64) + 3) & 0xFFFFFFFFFFFFFFFCLL) + 15) & 0xFFFFFFFFFFFFFFFCLL) + 19) & 0xFFFFFFFFFFFFFFF8)
     + 161;
  char v10 = 8 * (((((((*(unsigned char *)(v6 + 64) + 3) & 0xFC) + 15) & 0xFC) + 19) & 0xF8) - 95);
  if (v8 >= a3)
  {
    int v14 = 0;
    if (v8 >= a2)
    {
LABEL_14:
      switch(v14)
      {
        case 1:
          a1[v9] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_31;
        case 2:
          *(_WORD *)&a1[v9] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_31;
        case 3:
          goto LABEL_38;
        case 4:
          *(_DWORD *)&a1[v9] = 0;
          goto LABEL_30;
        default:
LABEL_30:
          if (a2)
          {
LABEL_31:
            long long v18 = *(void (**)(void))(v7 + 56);
            v18();
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = (a3 - v8 + 255) >> v10;
    if (v9 <= 3) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    if (v8 >= a2) {
      goto LABEL_14;
    }
  }
  unsigned int v15 = (~v8 + a2) >> v10;
  if (v9 < 4) {
    int v16 = v15 + 1;
  }
  else {
    int v16 = 1;
  }
  if (v9 >= 4) {
    unsigned int v17 = ~v8 + a2;
  }
  else {
    unsigned int v17 = (~(_BYTE)v8 + a2);
  }
  bzero(a1, v9);
  if (v9 == 1) {
    *a1 = v17;
  }
  else {
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v9] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v9] = v16;
      break;
    case 3:
LABEL_38:
      __break(1u);
      JUMPOUT(0x245DBAC30);
    case 4:
      *(_DWORD *)&a1[v9] = v16;
      break;
    default:
      return;
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for UnaryLayoutEngine(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || ((((((v6 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 15) & 0xFFFFFFFFFFFFFFFCLL) + 187) & 0xFFFFFFFFFFFFFFF8) + 305 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v10 = ((unint64_t)v4 + v6 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v11 = ((unint64_t)a2 + v6 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v12 = *(void *)v11;
    *(_DWORD *)(v10 + 8) = *(_DWORD *)(v11 + 8);
    *(void *)unint64_t v10 = v12;
    unint64_t v13 = (v10 + 15) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v14 = (v11 + 15) & 0xFFFFFFFFFFFFFFFCLL;
    LODWORD(v12) = *(_DWORD *)(v14 + 8);
    *(void *)unint64_t v13 = *(void *)v14;
    *(_DWORD *)(v13 + 8) = v12;
    unint64_t v15 = (v13 + 19) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v16 = (v14 + 19) & 0xFFFFFFFFFFFFFFF8;
    long long v18 = *(_OWORD *)(v16 + 16);
    long long v17 = *(_OWORD *)(v16 + 32);
    *(_OWORD *)unint64_t v15 = *(_OWORD *)v16;
    *(_OWORD *)(v15 + 16) = v18;
    *(_OWORD *)(v15 + 32) = v17;
    long long v19 = *(_OWORD *)(v16 + 96);
    long long v21 = *(_OWORD *)(v16 + 48);
    long long v20 = *(_OWORD *)(v16 + 64);
    *(_OWORD *)(v15 + 80) = *(_OWORD *)(v16 + 80);
    *(_OWORD *)(v15 + 96) = v19;
    *(_OWORD *)(v15 + 48) = v21;
    *(_OWORD *)(v15 + 64) = v20;
    long long v23 = *(_OWORD *)(v16 + 128);
    long long v22 = *(_OWORD *)(v16 + 144);
    long long v24 = *(_OWORD *)(v16 + 112);
    *(unsigned char *)(v15 + 160) = *(unsigned char *)(v16 + 160);
    *(_OWORD *)(v15 + 128) = v23;
    *(_OWORD *)(v15 + 144) = v22;
    *(_OWORD *)(v15 + 112) = v24;
    memcpy((void *)((v13 + 187) & 0xFFFFFFFFFFFFFFF8), (const void *)((v14 + 187) & 0xFFFFFFFFFFFFFFF8), 0x131uLL);
  }
  return v4;
}

uint64_t assignWithCopy for UnaryLayoutEngine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 3;
  int v7 = (_DWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFFCLL);
  unsigned int v8 = (_DWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  *int v7 = *v8;
  v7[1] = v8[1];
  uint64_t v7[2] = v8[2];
  uint64_t v9 = (_DWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v10 = (_DWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v9 = *v10;
  v9[1] = v10[1];
  v9[2] = v10[2];
  unint64_t v11 = ((unint64_t)v9 + 19) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = ((unint64_t)v10 + 19) & 0xFFFFFFFFFFFFFFF8;
  char v13 = *(unsigned char *)(v12 + 48);
  long long v15 = *(_OWORD *)(v12 + 16);
  long long v14 = *(_OWORD *)(v12 + 32);
  *(_OWORD *)unint64_t v11 = *(_OWORD *)v12;
  *(_OWORD *)(v11 + 16) = v15;
  *(_OWORD *)(v11 + 32) = v14;
  *(unsigned char *)(v11 + 48) = v13;
  long long v16 = *(_OWORD *)(v12 + 56);
  long long v17 = *(_OWORD *)(v12 + 72);
  long long v18 = *(_OWORD *)(v12 + 88);
  *(unsigned char *)(v11 + 104) = *(unsigned char *)(v12 + 104);
  *(_OWORD *)(v11 + 88) = v18;
  *(_OWORD *)(v11 + 72) = v17;
  *(_OWORD *)(v11 + 56) = v16;
  long long v19 = *(_OWORD *)(v12 + 112);
  long long v20 = *(_OWORD *)(v12 + 128);
  long long v21 = *(_OWORD *)(v12 + 144);
  *(unsigned char *)(v11 + 160) = *(unsigned char *)(v12 + 160);
  *(_OWORD *)(v11 + 128) = v20;
  *(_OWORD *)(v11 + 144) = v21;
  *(_OWORD *)(v11 + 112) = v19;
  unint64_t v22 = ((unint64_t)v9 + 187) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v23 = ((unint64_t)v10 + 187) & 0xFFFFFFFFFFFFFFF8;
  long long v25 = *(_OWORD *)(v23 + 64);
  long long v24 = *(_OWORD *)(v23 + 80);
  long long v26 = *(_OWORD *)(v23 + 48);
  *(unsigned char *)(v22 + 96) = *(unsigned char *)(v23 + 96);
  *(_OWORD *)(v22 + 64) = v25;
  *(_OWORD *)(v22 + 80) = v24;
  *(_OWORD *)(v22 + 48) = v26;
  long long v27 = *(_OWORD *)v23;
  long long v28 = *(_OWORD *)(v23 + 32);
  *(_OWORD *)(v22 + 16) = *(_OWORD *)(v23 + 16);
  *(_OWORD *)(v22 + 32) = v28;
  *(_OWORD *)unint64_t v22 = v27;
  long long v29 = *(_OWORD *)(v23 + 136);
  long long v30 = *(_OWORD *)(v23 + 120);
  *(_OWORD *)(v22 + 104) = *(_OWORD *)(v23 + 104);
  *(_OWORD *)(v22 + 120) = v30;
  *(_OWORD *)(v22 + 136) = v29;
  LOBYTE(v11) = *(unsigned char *)(v23 + 200);
  long long v31 = *(_OWORD *)(v23 + 184);
  long long v32 = *(_OWORD *)(v23 + 168);
  *(_OWORD *)(v22 + 152) = *(_OWORD *)(v23 + 152);
  *(_OWORD *)(v22 + 168) = v32;
  *(_OWORD *)(v22 + 184) = v31;
  *(unsigned char *)(v22 + 200) = v11;
  long long v34 = *(_OWORD *)(v23 + 272);
  long long v33 = *(_OWORD *)(v23 + 288);
  long long v35 = *(_OWORD *)(v23 + 256);
  *(unsigned char *)(v22 + 304) = *(unsigned char *)(v23 + 304);
  *(_OWORD *)(v22 + 256) = v35;
  *(_OWORD *)(v22 + 272) = v34;
  *(_OWORD *)(v22 + 288) = v33;
  long long v36 = *(_OWORD *)(v23 + 208);
  long long v37 = *(_OWORD *)(v23 + 240);
  *(_OWORD *)(v22 + 224) = *(_OWORD *)(v23 + 224);
  *(_OWORD *)(v22 + 240) = v37;
  *(_OWORD *)(v22 + 208) = v36;
  return a1;
}

uint64_t initializeWithTake for UnaryLayoutEngine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 3;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFFCLL;
  uint64_t v9 = *(void *)v8;
  *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 + 8);
  *(void *)unint64_t v7 = v9;
  unint64_t v10 = (v7 + 15) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v11 = (v8 + 15) & 0xFFFFFFFFFFFFFFFCLL;
  uint64_t v12 = *(void *)v11;
  *(_DWORD *)(v10 + 8) = *(_DWORD *)(v11 + 8);
  *(void *)unint64_t v10 = v12;
  unint64_t v13 = (v10 + 19) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = (v11 + 19) & 0xFFFFFFFFFFFFFFF8;
  long long v15 = *(_OWORD *)(v14 + 32);
  long long v16 = *(_OWORD *)v14;
  *(_OWORD *)(v13 + 16) = *(_OWORD *)(v14 + 16);
  *(_OWORD *)(v13 + 32) = v15;
  *(_OWORD *)unint64_t v13 = v16;
  long long v17 = *(_OWORD *)(v14 + 96);
  long long v19 = *(_OWORD *)(v14 + 48);
  long long v18 = *(_OWORD *)(v14 + 64);
  *(_OWORD *)(v13 + 80) = *(_OWORD *)(v14 + 80);
  *(_OWORD *)(v13 + 96) = v17;
  *(_OWORD *)(v13 + 48) = v19;
  *(_OWORD *)(v13 + 64) = v18;
  long long v21 = *(_OWORD *)(v14 + 128);
  long long v20 = *(_OWORD *)(v14 + 144);
  long long v22 = *(_OWORD *)(v14 + 112);
  *(unsigned char *)(v13 + 160) = *(unsigned char *)(v14 + 160);
  *(_OWORD *)(v13 + 128) = v21;
  *(_OWORD *)(v13 + 144) = v20;
  *(_OWORD *)(v13 + 112) = v22;
  memcpy((void *)((v10 + 187) & 0xFFFFFFFFFFFFFFF8), (const void *)((v11 + 187) & 0xFFFFFFFFFFFFFFF8), 0x131uLL);
  return a1;
}

uint64_t assignWithTake for UnaryLayoutEngine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 3;
  unint64_t v7 = (_DWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v8 = (_DWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  *unint64_t v7 = *v8;
  v7[1] = v8[1];
  uint64_t v7[2] = v8[2];
  uint64_t v9 = (_DWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v10 = (_DWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v9 = *v10;
  v9[1] = v10[1];
  v9[2] = v10[2];
  unint64_t v11 = ((unint64_t)v9 + 19) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = ((unint64_t)v10 + 19) & 0xFFFFFFFFFFFFFFF8;
  char v13 = *(unsigned char *)(v12 + 48);
  long long v15 = *(_OWORD *)(v12 + 16);
  long long v14 = *(_OWORD *)(v12 + 32);
  *(_OWORD *)unint64_t v11 = *(_OWORD *)v12;
  *(_OWORD *)(v11 + 16) = v15;
  *(_OWORD *)(v11 + 32) = v14;
  *(unsigned char *)(v11 + 48) = v13;
  long long v16 = *(_OWORD *)(v12 + 56);
  long long v17 = *(_OWORD *)(v12 + 72);
  long long v18 = *(_OWORD *)(v12 + 88);
  *(unsigned char *)(v11 + 104) = *(unsigned char *)(v12 + 104);
  *(_OWORD *)(v11 + 88) = v18;
  *(_OWORD *)(v11 + 72) = v17;
  *(_OWORD *)(v11 + 56) = v16;
  long long v19 = *(_OWORD *)(v12 + 112);
  long long v20 = *(_OWORD *)(v12 + 128);
  long long v21 = *(_OWORD *)(v12 + 144);
  *(unsigned char *)(v11 + 160) = *(unsigned char *)(v12 + 160);
  *(_OWORD *)(v11 + 128) = v20;
  *(_OWORD *)(v11 + 144) = v21;
  *(_OWORD *)(v11 + 112) = v19;
  unint64_t v22 = ((unint64_t)v9 + 187) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v23 = ((unint64_t)v10 + 187) & 0xFFFFFFFFFFFFFFF8;
  long long v25 = *(_OWORD *)(v23 + 64);
  long long v24 = *(_OWORD *)(v23 + 80);
  long long v26 = *(_OWORD *)(v23 + 48);
  *(unsigned char *)(v22 + 96) = *(unsigned char *)(v23 + 96);
  *(_OWORD *)(v22 + 64) = v25;
  *(_OWORD *)(v22 + 80) = v24;
  *(_OWORD *)(v22 + 48) = v26;
  long long v27 = *(_OWORD *)v23;
  long long v28 = *(_OWORD *)(v23 + 32);
  *(_OWORD *)(v22 + 16) = *(_OWORD *)(v23 + 16);
  *(_OWORD *)(v22 + 32) = v28;
  *(_OWORD *)unint64_t v22 = v27;
  long long v29 = *(_OWORD *)(v23 + 136);
  long long v30 = *(_OWORD *)(v23 + 120);
  *(_OWORD *)(v22 + 104) = *(_OWORD *)(v23 + 104);
  *(_OWORD *)(v22 + 120) = v30;
  *(_OWORD *)(v22 + 136) = v29;
  LOBYTE(v11) = *(unsigned char *)(v23 + 200);
  long long v31 = *(_OWORD *)(v23 + 184);
  long long v32 = *(_OWORD *)(v23 + 168);
  *(_OWORD *)(v22 + 152) = *(_OWORD *)(v23 + 152);
  *(_OWORD *)(v22 + 168) = v32;
  *(_OWORD *)(v22 + 184) = v31;
  *(unsigned char *)(v22 + 200) = v11;
  long long v34 = *(_OWORD *)(v23 + 272);
  long long v33 = *(_OWORD *)(v23 + 288);
  long long v35 = *(_OWORD *)(v23 + 256);
  *(unsigned char *)(v22 + 304) = *(unsigned char *)(v23 + 304);
  *(_OWORD *)(v22 + 256) = v35;
  *(_OWORD *)(v22 + 272) = v34;
  *(_OWORD *)(v22 + 288) = v33;
  long long v36 = *(_OWORD *)(v23 + 208);
  long long v37 = *(_OWORD *)(v23 + 240);
  *(_OWORD *)(v22 + 224) = *(_OWORD *)(v23 + 224);
  *(_OWORD *)(v22 + 240) = v37;
  *(_OWORD *)(v22 + 208) = v36;
  return a1;
}

uint64_t getEnumTagSinglePayload for UnaryLayoutEngine(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (!a2) {
    return 0;
  }
  if (v5 < a2)
  {
    unint64_t v6 = ((((((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 3) & 0xFFFFFFFFFFFFFFFCLL) + 15) & 0xFFFFFFFFFFFFFFFCLL)
         + 187) & 0xFFFFFFFFFFFFFFF8)
       + 305;
    unsigned int v7 = (a2 - v5 + 255) >> (8
                           * (((((((*(unsigned char *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 3) & 0xFC) + 15) & 0xFC)
                              - 69) & 0xF8)
                            + 49));
    if (v6 < 4) {
      unsigned int v8 = v7 + 1;
    }
    else {
      unsigned int v8 = 2;
    }
    if (v8 >= 0x10000) {
      unsigned int v9 = 4;
    }
    else {
      unsigned int v9 = 2;
    }
    if (v8 < 0x100) {
      unsigned int v9 = 1;
    }
    if (v8 >= 2) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    switch(v10)
    {
      case 1:
        int v11 = a1[v6];
        if (!a1[v6]) {
          break;
        }
        goto LABEL_18;
      case 2:
        int v11 = *(unsigned __int16 *)&a1[v6];
        if (*(_WORD *)&a1[v6]) {
          goto LABEL_18;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x245DBB37CLL);
      case 4:
        int v11 = *(_DWORD *)&a1[v6];
        if (!v11) {
          break;
        }
LABEL_18:
        int v12 = (v11 - 1) << (8
                          * (((((((*(unsigned char *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 3) & 0xFC) + 15) & 0xFC)
                             - 69) & 0xF8)
                           + 49));
        if (v6 >= 4) {
          int v12 = 0;
        }
        if (((((((*(_DWORD *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 3) & 0xFFFFFFFC) + 15) & 0xFFFFFFFC)
             + 187) & 0xFFFFFFF8) == 0xFFFFFED0)
          int v13 = *a1;
        else {
          int v13 = *(_DWORD *)a1;
        }
        return v5 + (v13 | v12) + 1;
      default:
        break;
    }
  }
  if (v5) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for UnaryLayoutEngine(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  uint64_t v7 = v6;
  unsigned int v8 = *(_DWORD *)(v6 + 84);
  size_t v9 = ((((((*(void *)(v6 + 64) + 3) & 0xFFFFFFFFFFFFFFFCLL) + 15) & 0xFFFFFFFFFFFFFFFCLL) + 187) & 0xFFFFFFFFFFFFFFF8)
     + 305;
  char v10 = 8 * (((((((*(unsigned char *)(v6 + 64) + 3) & 0xFC) + 15) & 0xFC) - 69) & 0xF8) + 49);
  if (v8 >= a3)
  {
    int v14 = 0;
    if (v8 >= a2)
    {
LABEL_14:
      switch(v14)
      {
        case 1:
          a1[v9] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_31;
        case 2:
          *(_WORD *)&a1[v9] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_31;
        case 3:
          goto LABEL_38;
        case 4:
          *(_DWORD *)&a1[v9] = 0;
          goto LABEL_30;
        default:
LABEL_30:
          if (a2)
          {
LABEL_31:
            long long v18 = *(void (**)(void))(v7 + 56);
            v18();
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = (a3 - v8 + 255) >> v10;
    if (v9 <= 3) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    if (v8 >= a2) {
      goto LABEL_14;
    }
  }
  unsigned int v15 = (~v8 + a2) >> v10;
  if (v9 < 4) {
    int v16 = v15 + 1;
  }
  else {
    int v16 = 1;
  }
  if (v9 >= 4) {
    unsigned int v17 = ~v8 + a2;
  }
  else {
    unsigned int v17 = (~(_BYTE)v8 + a2);
  }
  bzero(a1, v9);
  if (v9 == 1) {
    *a1 = v17;
  }
  else {
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v9] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v9] = v16;
      break;
    case 3:
LABEL_38:
      __break(1u);
      JUMPOUT(0x245DBB574);
    case 4:
      *(_DWORD *)&a1[v9] = v16;
      break;
    default:
      return;
  }
}

uint64_t sub_245DBB59C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF10Foundation4DateV_s5NeverOSbTg5(void (*a1)(uint64_t *__return_ptr, char *))
{
  void (*v13)(uint64_t *__return_ptr, char *);
  uint64_t v14;

  int v13 = a1;
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (void (*)(uint64_t))MEMORY[0x263F07490];
  _s11Observation0A8TrackingV11_AccessListVSgMaTm_0(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
  MEMORY[0x270FA5388](v8 - 8);
  char v10 = (char *)&v12 - v9;
  _s11Observation0A8TrackingV11_AccessListVSgWOcTm_0(v1, (uint64_t)&v12 - v9, &lazy cache variable for type metadata for Date?, v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v10, 1, v3) == 1) {
    return 2;
  }
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v10, v3);
  v13(&v14, v6);
  if (v2) {
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v14;
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF10Foundation4DateV_s5NeverOSdTg5(void (*a1)(void *__return_ptr, char *))
{
  void (*v13)(void *__return_ptr, char *);

  int v13 = a1;
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (void (*)(uint64_t))MEMORY[0x263F07490];
  _s11Observation0A8TrackingV11_AccessListVSgMaTm_0(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
  MEMORY[0x270FA5388](v8 - 8);
  char v10 = (char *)v12 - v9;
  _s11Observation0A8TrackingV11_AccessListVSgWOcTm_0(v1, (uint64_t)v12 - v9, &lazy cache variable for type metadata for Date?, v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v10, 1, v3) == 1) {
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v10, v3);
  v13(v12, v6);
  if (v2) {
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v12[0];
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI30_EnvironmentKeyWritingModifierVyAD4FontVSgG_s5NeverOSbTg5(void (*a1)(uint64_t *__return_ptr, void *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return 2;
  }
  v7[0] = a3;
  v7[1] = a4;
  swift_retain();
  swift_retain();
  a1(&v8, v7);
  swift_release();
  uint64_t result = swift_release();
  if (!v4) {
    return v8;
  }
  return result;
}

uint64_t GeometryReader.content.getter(uint64_t a1)
{
  return a1;
}

uint64_t GeometryReader.content.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_release();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*GeometryReader.content.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t protocol witness for static StatefulRule.initialValue.getter in conformance GeometryReader<A>.Child@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for _LayoutRoot<GeometryReaderLayout>();
  uint64_t v2 = type metadata accessor for _VariadicView.Tree();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t GeometryProxy.context.getter()
{
  return AGWeakAttributeGetAttribute();
}

double GeometryProxy.frame(in:)(uint64_t a1, __n128 a2)
{
  int v4 = *v2;
  int v5 = v2[1];
  int v6 = v2[2];
  a2.n128_u64[0] = *(void *)(v2 + 3);
  __n128 v23 = a2;
  uint64_t v7 = *(void *)(v2 + 5);
  uint64_t v8 = *(void *)(v2 + 7);
  uint64_t v9 = *(void *)(v2 + 9);
  uint64_t v10 = *(void *)(v2 + 11);
  specialized static Update.begin()();
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  if (AGWeakAttributeGetAttribute() != *MEMORY[0x263F288F8])
  {
    AGWeakAttributeGetAttribute();
    Inputuint64_t Value = (uint64_t *)AGGraphGetInputValue();
    uint64_t v12 = *InputValue;
    uint64_t v11 = InputValue[1];
  }
  static Update.end()();
  specialized static Update.begin()();
  v33[0] = 0;
  v33[1] = 0;
  v33[2] = v12;
  v33[3] = v11;
  int v24 = v4;
  int v25 = v5;
  int v26 = v6;
  unint64_t v27 = v23.n128_u64[0];
  uint64_t v28 = v7;
  uint64_t v29 = v8;
  uint64_t v30 = v9;
  uint64_t v31 = v10;
  uint64_t v14 = GeometryProxy.placementContext.getter((uint64_t)&v32);
  MEMORY[0x270FA5388](v14);
  v22[2] = v33;
  v22[3] = a1;
  LOBYTE(v24) = v15;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI30_PositionAwarePlacementContextV_s5NeverOytTB5((void *(*)(uint64_t *__return_ptr, void *))partial apply for closure #1 in GeometryProxy.rect(_:in:), (uint64_t)v22, v17, v18, v19, v16 | ((unint64_t)v15 << 32));
  double v20 = *(double *)v33;
  static Update.end()();
  return v20;
}

double GeometryProxy.rect(_:in:)(uint64_t a1, double a2, double a3, double a4, double a5)
{
  int v11 = *((_DWORD *)v5 + 12);
  specialized static Update.begin()();
  *(double *)__n128 v23 = a2;
  *(double *)&v23[1] = a3;
  *(double *)&v23[2] = a4;
  *(double *)&v23[3] = a5;
  long long v12 = v5[1];
  long long v16 = *v5;
  long long v17 = v12;
  long long v18 = v5[2];
  int v19 = v11;
  GeometryProxy.placementContext.getter((uint64_t)v20);
  void v15[2] = v23;
  v15[3] = a1;
  LOBYTE(v16) = v22;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI30_PositionAwarePlacementContextV_s5NeverOytTB5((void *(*)(uint64_t *__return_ptr, void *))partial apply for closure #1 in GeometryProxy.rect(_:in:), (uint64_t)v15, v20[0], v20[1], v20[2], v21 | ((unint64_t)v22 << 32));
  double v13 = *(double *)v23;
  static Update.end()();
  return v13;
}

uint64_t closure #1 in GeometryProxy.rect(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized ViewTransformable.convert(from:to:)(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned int *)(a1 + 24), a3);
}

uint64_t static GeometryProxy.current.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = _threadGeometryProxyData();
  if (result)
  {
    long long v3 = *(_OWORD *)result;
    long long v4 = *(_OWORD *)(result + 16);
    long long v5 = *(_OWORD *)(result + 32);
    int v6 = *(_DWORD *)(result + 48);
  }
  else
  {
    int v6 = 0;
    long long v3 = 0uLL;
    long long v4 = 0uLL;
    long long v5 = 0uLL;
  }
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 48) = v6;
  *(unsigned char *)(a1 + 52) = result == 0;
  return result;
}

double GeometryProxy.convert<A>(globalPoint:to:)(double a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v10 = *((_DWORD *)v5 + 12);
  long long v11 = v5[1];
  long long v20 = *v5;
  long long v21 = v11;
  long long v22 = v5[2];
  v23[0] = v10;
  GeometryProxy.transform.getter((uint64_t)v25);
  double v12 = *(double *)v25;
  double v13 = *(double *)&v25[1];
  double v14 = *(double *)&v25[2];
  double v15 = *(double *)&v25[3];
  double v16 = *(double *)&v25[4];
  (*(void (**)(double *__return_ptr, uint64_t, uint64_t))(a5 + 8))(v19, a4, a5);
  *(void *)&long long v22 = 0;
  long long v20 = 0u;
  long long v21 = 0u;
  BYTE8(v22) = 2;
  outlined init with copy of CoordinateSpace((uint64_t)v19, (uint64_t)v23);
  char v24 = 4;
  outlined destroy of CoordinateSpace((uint64_t)v19);
  if (v12 != 0.0 || v15 != 0.0 || v16 != 0.0)
  {
    *(double *)long long v18 = a1;
    *(double *)&v18[1] = a2;
    v19[0] = v12;
    v19[1] = v13;
    v19[2] = v14;
    _OWORD v19[3] = v15;
    v19[4] = v16;
    specialized ViewTransform.convert(_:_:)((uint64_t)&v20, v19, (uint64_t)v18);
    a1 = *(double *)v18;
  }
  outlined destroy of ViewTransform.Conversion((uint64_t)&v20);
  swift_release();
  return a1;
}

uint64_t sub_245DBBFE8@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  *a2 = v2;
  a2[1] = v3;
  return swift_retain();
}

uint64_t sub_245DBBFF4(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  swift_retain();
  uint64_t result = swift_release();
  *a2 = v4;
  a2[1] = v3;
  return result;
}

uint64_t sub_245DBC038()
{
  return 16;
}

__n128 sub_245DBC044(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t Transaction.isContinuous.getter(uint64_t a1)
{
  return Transaction.isContinuous.getter(a1, (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t Transaction.isContinuous.setter(uint64_t a1)
{
  return Transaction.fromScrollView.setter(a1, (void (*)(uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

void (*Transaction.isContinuous.modify(void *a1))(char **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = swift_retain();
  char v5 = specialized closure #1 in PropertyList.subscript.getter(v4);
  v3[4] = 0;
  swift_release();
  *((unsigned char *)v3 + 40) = v5 & 1;
  return Transaction.isContinuous.modify;
}

void Transaction.isContinuous.modify(char **a1, char a2)
{
}

uint64_t key path getter for Transaction.isContinuous : Transaction@<X0>(uint64_t (*a1)(uint64_t, uint64_t *)@<X3>, unsigned char *a2@<X8>)
{
  uint64_t v4 = swift_retain();
  LOBYTE(a1) = a1(v4, &v6);
  uint64_t result = swift_release();
  *a2 = a1 & 1;
  return result;
}

uint64_t key path setter for Transaction.isContinuous : Transaction(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t *))
{
  uint64_t v7 = *a1;
  swift_retain();
  a5(a2, v7, &v9);
  return swift_release();
}

void (*Transaction.fromScrollView.modify(void *a1))(char **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = swift_retain();
  char v5 = specialized closure #1 in PropertyList.subscript.getter(v4);
  v3[4] = 0;
  swift_release();
  *((unsigned char *)v3 + 40) = v5 & 1;
  return Transaction.fromScrollView.modify;
}

void Transaction.fromScrollView.modify(char **a1, char a2)
{
}

void Transaction.isContinuous.modify(char **a1, char a2, void (*a3)(uint64_t, uint64_t, char *))
{
  char v5 = *a1;
  uint64_t v6 = *((void *)*a1 + 3);
  uint64_t v7 = (*a1)[40];
  swift_retain();
  if (a2) {
    uint64_t v8 = v5 + 8;
  }
  else {
    uint64_t v8 = v5 + 16;
  }
  a3(v6, v7, v8);
  swift_release();

  free(v5);
}

uint64_t sub_245DBC344@<X0>(unsigned char *a1@<X8>)
{
  return key path getter for Transaction.isContinuous : Transaction((uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a1);
}

uint64_t sub_245DBC370(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Transaction.isContinuous : Transaction(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t sub_245DBC39C@<X0>(unsigned char *a1@<X8>)
{
  return key path getter for Transaction.isContinuous : Transaction((uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a1);
}

uint64_t sub_245DBC3C8(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Transaction.isContinuous : Transaction(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

ValueMetadata *type metadata accessor for ContinuousKey()
{
  return &type metadata for ContinuousKey;
}

ValueMetadata *type metadata accessor for FromScrollViewKey()
{
  return &type metadata for FromScrollViewKey;
}

uint64_t static DynamicContainerAdaptor.maxUnusedItems.getter()
{
  return 0;
}

uint64_t DynamicContainerAdaptor<>.foreachItem(items:_:)(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t static DynamicContainerAdaptor<>.containsItem(_:_:)(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 32);
  uint64_t v5 = swift_checkMetadataState();
  return v4(a2, v5, AssociatedConformanceWitness) & 1;
}

uint64_t DynamicContainerAdaptor<>.foreachItem(items:_:)(uint64_t a1, void (*a2)(char *), uint64_t a3)
{
  __n128 v23 = a2;
  uint64_t v24 = a3;
  uint64_t v26 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v6 = (char *)&v21 - v5;
  uint64_t v7 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v21 - v8;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  double v13 = (char *)&v21 - v12;
  uint64_t v14 = swift_getAssociatedTypeWitness();
  uint64_t v22 = *(void *)(v14 - 8);
  double v15 = MEMORY[0x270FA5388](v14);
  long long v17 = (char *)&v21 - v16;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))(v13, v26, v10, v15);
  dispatch thunk of Sequence.makeIterator()();
  swift_getAssociatedConformanceWitness();
  int v25 = v17;
  uint64_t v26 = v14;
  dispatch thunk of IteratorProtocol.next()();
  long long v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48);
  if (v18(v9, 1, AssociatedTypeWitness) != 1)
  {
    int v19 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    do
    {
      v19(v6, v9, AssociatedTypeWitness);
      v23(v6);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, AssociatedTypeWitness);
      dispatch thunk of IteratorProtocol.next()();
    }
    while (v18(v9, 1, AssociatedTypeWitness) != 1);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v25, v26);
}

uint64_t static DynamicContainerAdaptor<>.containsItem(_:_:)()
{
  return Sequence.contains(where:)() & 1;
}

uint64_t closure #1 in static DynamicContainerAdaptor<>.containsItem(_:_:)(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 32);
  uint64_t v5 = swift_checkMetadataState();
  return v4(a2, v5, AssociatedConformanceWitness) & 1;
}

uint64_t partial apply for closure #1 in static DynamicContainerAdaptor<>.containsItem(_:_:)(uint64_t a1)
{
  return closure #1 in static DynamicContainerAdaptor<>.containsItem(_:_:)(a1, *(void *)(v1 + 40)) & 1;
}

uint64_t dispatch thunk of static DynamicContainerAdaptor.maxUnusedItems.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of DynamicContainerAdaptor.updatedItems()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of DynamicContainerAdaptor.foreachItem(items:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 56))();
}

uint64_t dispatch thunk of static DynamicContainerAdaptor.containsItem(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 64))();
}

uint64_t dispatch thunk of DynamicContainerAdaptor.makeItemLayout(item:uniqueId:inputs:containerInfo:containerInputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return (*(uint64_t (**)(void))(a10 + 72))();
}

uint64_t dispatch thunk of DynamicContainerAdaptor.removeItemLayout(uniqueId:itemLayout:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 80))();
}

uint64_t DynamicViewListItem.matchesIdentity(of:)(uint64_t a1)
{
  if ((*(unsigned char *)(v1 + 68) & 1) == 0)
  {
    if ((*(unsigned char *)(a1 + 68) & 1) == 0)
    {
      int v3 = *(_DWORD *)(v1 + 64);
      int v4 = *(_DWORD *)(a1 + 64);
      outlined init with copy of DynamicViewListItem(v1, (uint64_t)v11);
      outlined init with copy of DynamicViewListItem(a1, (uint64_t)v9);
      if (v3 == v4) {
        goto LABEL_7;
      }
LABEL_10:
      char v5 = 0;
      goto LABEL_11;
    }
LABEL_5:
    outlined init with copy of DynamicViewListItem(v1, (uint64_t)v11);
    outlined init with copy of DynamicViewListItem(a1, (uint64_t)v9);
    goto LABEL_10;
  }
  if ((*(unsigned char *)(a1 + 68) & 1) == 0) {
    goto LABEL_5;
  }
  outlined init with copy of DynamicViewListItem(v1, (uint64_t)v11);
  outlined init with copy of DynamicViewListItem(a1, (uint64_t)v9);
LABEL_7:
  char v5 = 0;
  if (v11[0] == v9[0] && v11[1] == v9[1])
  {
    uint64_t v6 = v10;
    uint64_t v7 = v12;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v5 = specialized static Array<A>.== infix(_:_:)(v7, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
LABEL_11:
  outlined destroy of DynamicViewListItem((uint64_t)v9);
  outlined destroy of DynamicViewListItem((uint64_t)v11);
  return v5 & 1;
}

uint64_t protocol witness for DynamicContainerItem.count.getter in conformance DynamicViewListItem()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
}

double protocol witness for DynamicContainerItem.zIndex.getter in conformance DynamicViewListItem()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  double v1 = specialized ViewTraitCollection.value<A>(for:defaultValue:)(v0, 0.0);
  swift_bridgeObjectRelease();
  return v1;
}

unint64_t protocol witness for DynamicContainerItem.list.getter in conformance DynamicViewListItem()
{
  return *(unsigned int *)(v0 + 64) | ((unint64_t)*(unsigned __int8 *)(v0 + 68) << 32);
}

uint64_t protocol witness for DynamicContainerItem.viewID.getter in conformance DynamicViewListItem@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t specialized closure #1 in static DynamicContainerAdaptor<>.containsItem(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 16) == *(_DWORD *)a2 && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 4))
  {
    uint64_t v4 = *(void *)(a2 + 8);
    uint64_t v5 = *(void *)(a1 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v6 = specialized static Array<A>.== infix(_:_:)(v5, v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v3 = v6 ^ 1;
  }
  else
  {
    char v3 = 1;
  }
  return v3 & 1;
}

BOOL protocol witness for static DynamicContainerAdaptor.containsItem(_:_:) in conformance DynamicLayoutViewAdaptor(void *a1, uint64_t a2)
{
  uint64_t v8 = 0;
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  v6[2] = a2;
  char v7 = 1;
  return (ViewList.applySublists(from:list:to:)((uint64_t)&v8, 0x100000000uLL, (uint64_t)partial apply for specialized closure #1 in static DynamicContainerAdaptor<>.containsItem(_:_:), (uint64_t)v6, v3, v4) & 1) == 0;
}

__n128 __swift_memcpy69_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 61) = *(void *)(a2 + 61);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for DynamicViewListItem(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 68) = *(unsigned char *)(a2 + 68);
  return a1;
}

uint64_t getEnumTagSinglePayload for DynamicViewListItem(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 69)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DynamicViewListItem(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 68) = 0;
    *(_DWORD *)(result + 64) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 69) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 69) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t partial apply for specialized closure #1 in static DynamicContainerAdaptor<>.containsItem(_:_:)(uint64_t a1)
{
  return specialized closure #1 in static DynamicContainerAdaptor<>.containsItem(_:_:)(a1, *(void *)(v1 + 16));
}

BOOL static ObservableObject.hasDefaultPublisher.getter()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return AssociatedTypeWitness == type metadata accessor for ObservableObjectPublisher();
}

uint64_t ObservedObject._seed.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*ObservedObject._seed.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ObservedObject.wrappedValue.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t ObservedObject.wrappedValue.setter(uint64_t a1)
{
  uint64_t result = swift_unknownObjectRelease();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*ObservedObject.wrappedValue.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t static ObservedObject._makeProperty<A>(in:container:fieldOffset:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return specialized static ObservedObject._makeProperty<A>(in:container:fieldOffset:inputs:)(a1, a3, a4, a5, a6);
}

uint64_t static ObservedObject._propertyBehaviors.getter()
{
  return 2;
}

void *assignWithCopy for ObservedObject(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return a1;
}

void *assignWithTake for ObservedObject(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_unknownObjectRelease();
  return a1;
}

uint64_t type metadata accessor for ObservedObject.Wrapper()
{
  return __swift_instantiateGenericMetadata();
}

void *assignWithCopy for ObservedObjectPropertyBox(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return a1;
}

uint64_t assignWithTake for ObservedObjectPropertyBox(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_unknownObjectRelease();
  return a1;
}

_UNKNOWN **associated type witness table accessor for DynamicPropertyBox.Property : DynamicProperty in ObservedObjectPropertyBox<A>()
{
  return &protocol witness table for ObservedObject<A>;
}

uint64_t specialized UnaryLayout.spacing(in:child:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*MEMORY[0x263F288F8] == HIDWORD(a3))
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    Inputuint64_t Value = &static LayoutComputer.defaultValue;
  }
  else
  {
    Inputuint64_t Value = (long long *)AGGraphGetInputValue();
  }
  uint64_t v4 = *(void *)InputValue;
  uint64_t v5 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v5 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_12;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (!_MovableLockIsOwner(static Update._lock))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_12:
    (*(void (**)(void))(*(void *)v4 + 112))();
    return swift_release();
  }
  return result;
}

SwiftUI::Spacing UnaryLayout.spacing(in:child:)()
{
  return LayoutProxy.spacing()();
}

{
  return UnaryLayout.spacing(in:child:)();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance IgnoresAutomaticPaddingLayout(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance IgnoresAutomaticPaddingLayout(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static UnaryLayout<>.makeViewImpl(modifier:inputs:body:));
}

uint64_t static UnaryLayout._makeView(modifier:inputs:body:)(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *a2;
  int v7 = *((_DWORD *)a2 + 2);
  uint64_t v8 = a2[2];
  int v9 = *((_DWORD *)a2 + 20);
  int v20 = *a1;
  uint64_t v12 = v6;
  int v13 = v7;
  uint64_t v14 = v8;
  long long v10 = *(_OWORD *)(a2 + 5);
  long long v15 = *(_OWORD *)(a2 + 3);
  long long v16 = v10;
  long long v17 = *(_OWORD *)(a2 + 7);
  uint64_t v18 = a2[9];
  int v19 = v9;
  return (*(uint64_t (**)(int *, uint64_t *))(a6 + 80))(&v20, &v12);
}

uint64_t protocol witness for UnaryLayout.spacing(in:child:) in conformance AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout(uint64_t a1, uint64_t *a2)
{
  return specialized UnaryLayout.spacing(in:child:)(*(void *)a1, *(unsigned int *)(a1 + 8), *a2);
}

double UnaryLayout.layoutPriority(child:)()
{
  return 0.0;
}

uint64_t UnaryLayout.ignoresAutomaticPadding(child:)()
{
  return 0;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance IgnoresAutomaticPaddingLayout(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static UnaryLayout<>.makeViewImpl(modifier:inputs:body:));
}

uint64_t dispatch thunk of UnaryLayout.spacing(in:child:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t protocol witness for UnaryLayout.spacing(in:child:) in conformance MoveTransition.MoveLayout(uint64_t a1, uint64_t *a2)
{
  return specialized UnaryLayout.spacing(in:child:)(*(void *)a1, *(unsigned int *)(a1 + 8), *a2);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance MoveTransition.MoveLayout(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance IgnoresAutomaticPaddingLayout(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static UnaryLayout<>.makeViewImpl(modifier:inputs:body:));
}

uint64_t dispatch thunk of UnaryLayout.placement(of:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

uint64_t dispatch thunk of UnaryLayout.sizeThatFits(in:context:child:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 56))();
}

uint64_t dispatch thunk of UnaryLayout.layoutPriority(child:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of UnaryLayout.ignoresAutomaticPadding(child:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t dispatch thunk of static UnaryLayout.makeViewImpl(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 80))();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _AlignmentLayout(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance IgnoresAutomaticPaddingLayout(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static UnaryLayout<>.makeViewImpl(modifier:inputs:body:));
}

uint64_t static DerivedLayout.layoutProperties.getter()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 24))(AssociatedTypeWitness, AssociatedConformanceWitness);
}

uint64_t DerivedLayout.makeCache(subviews:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v17 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  double v9 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v11 = (char *)&v17 - v10;
  int v12 = *a1;
  uint64_t v13 = *((void *)a1 + 1);
  char v14 = *((unsigned char *)a1 + 16);
  LOBYTE(a1) = *((unsigned char *)a1 + 17);
  (*(void (**)(uint64_t, uint64_t, double))(a3 + 32))(a2, a3, v9);
  int v18 = v12;
  uint64_t v19 = v13;
  char v20 = v14;
  char v21 = (char)a1;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(int *, uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(&v18, AssociatedTypeWitness, AssociatedConformanceWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, AssociatedTypeWitness);
}

uint64_t DerivedLayout.updateCache(_:subviews:)(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  double v9 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v11 = (char *)&v17 - v10;
  int v12 = *a2;
  uint64_t v13 = *((void *)a2 + 1);
  char v14 = *((unsigned char *)a2 + 16);
  LOBYTE(a2) = *((unsigned char *)a2 + 17);
  (*(void (**)(uint64_t, uint64_t, double))(a4 + 32))(a3, a4, v9);
  int v18 = v12;
  uint64_t v19 = v13;
  char v20 = v14;
  char v21 = (char)a2;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, int *, uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(v17, &v18, AssociatedTypeWitness, AssociatedConformanceWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, AssociatedTypeWitness);
}

uint64_t protocol witness for Layout.spacing(subviews:cache:) in conformance ZStackLayout@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *((void *)a1 + 1);
  char v3 = *((unsigned char *)a1 + 16);
  char v4 = *((unsigned char *)a1 + 17);
  int v6 = *a1;
  uint64_t v7 = v2;
  char v8 = v3;
  char v9 = v4;
  return _ZStackLayout.spacing(subviews:cache:)((uint64_t)&v6, a2);
}

uint64_t DerivedLayout.spacing(subviews:cache:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  v18[1] = a5;
  uint64_t v19 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  double v10 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  int v12 = (char *)v18 - v11;
  int v13 = *a1;
  uint64_t v14 = *((void *)a1 + 1);
  char v15 = *((unsigned char *)a1 + 16);
  LOBYTE(a1) = *((unsigned char *)a1 + 17);
  (*(void (**)(uint64_t, uint64_t, double))(a4 + 32))(a3, a4, v10);
  int v20 = v13;
  uint64_t v21 = v14;
  char v22 = v15;
  char v23 = (char)a1;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(int *, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 48))(&v20, v19, AssociatedTypeWitness, AssociatedConformanceWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, AssociatedTypeWitness);
}

uint64_t protocol witness for Layout.sizeThatFits(proposal:subviews:cache:) in conformance ZStackLayout(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = *(void *)(a5 + 8);
  char v8 = *(unsigned char *)(a5 + 16);
  char v9 = *(unsigned char *)(a5 + 17);
  unint64_t v10 = *v6;
  unint64_t v11 = v6[1];
  int v13 = *(_DWORD *)a5;
  uint64_t v14 = v7;
  char v15 = v8;
  char v16 = v9;
  return _ZStackLayout.sizeThatFits(proposal:subviews:cache:)(a1, a2 & 1, a3, a4 & 1, &v13, a6, v10, v11);
}

double DerivedLayout.sizeThatFits(proposal:subviews:cache:)(uint64_t a1, int a2, uint64_t a3, int a4, int *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v26 = a3;
  uint64_t v27 = a6;
  int v23 = a2;
  int v24 = a4;
  uint64_t v25 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  double v13 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  char v15 = (char *)&v22 - v14;
  int v16 = *a5;
  uint64_t v17 = *((void *)a5 + 1);
  char v18 = *((unsigned char *)a5 + 16);
  LOBYTE(a5) = *((unsigned char *)a5 + 17);
  (*(void (**)(uint64_t, uint64_t, double))(a8 + 32))(a7, a8, v13);
  int v30 = v16;
  uint64_t v31 = v17;
  char v32 = v18;
  char v33 = (char)a5;
  uint64_t v19 = *(double (**)(uint64_t))(swift_getAssociatedConformanceWitness() + 56);
  char v29 = v23 & 1;
  char v28 = v24 & 1;
  double v20 = v19(v25);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, AssociatedTypeWitness);
  return v20;
}

uint64_t protocol witness for Layout.placeSubviews(in:proposal:subviews:cache:) in conformance ZStackLayout(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11 = *(void *)(a9 + 8);
  char v12 = *(unsigned char *)(a9 + 16);
  char v13 = *(unsigned char *)(a9 + 17);
  unint64_t v14 = *v10;
  unint64_t v15 = v10[1];
  int v17 = *(_DWORD *)a9;
  uint64_t v18 = v11;
  char v19 = v12;
  char v20 = v13;
  return specialized _ZStackLayout.placeSubviews(in:proposal:subviews:cache:)(&v17, a1, a2, a3, a4, a10, v14, v15);
}

uint64_t DerivedLayout.placeSubviews(in:proposal:subviews:cache:)(uint64_t a1, int a2, uint64_t a3, int a4, int *a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12)
{
  uint64_t v33 = a3;
  uint64_t v34 = a6;
  int v30 = a2;
  int v31 = a4;
  uint64_t v32 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v20 = *(void *)(AssociatedTypeWitness - 8);
  double v21 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  int v23 = (char *)&v29 - v22;
  int v24 = *a5;
  uint64_t v25 = *((void *)a5 + 1);
  char v26 = *((unsigned char *)a5 + 16);
  LOBYTE(a5) = *((unsigned char *)a5 + 17);
  (*(void (**)(uint64_t, uint64_t, double))(a8 + 32))(a7, a8, v21);
  int v37 = v24;
  uint64_t v38 = v25;
  char v39 = v26;
  char v40 = (char)a5;
  uint64_t v27 = *(void (**)(uint64_t, double, double, double, double))(swift_getAssociatedConformanceWitness() + 64);
  char v36 = v30 & 1;
  char v35 = v31 & 1;
  v27(v32, a9, a10, a11, a12);
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v23, AssociatedTypeWitness);
}

uint64_t DerivedLayout.explicitAlignment(of:in:proposal:subviews:cache:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, int *a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, uint64_t a13)
{
  uint64_t v34 = a4;
  uint64_t v35 = a7;
  int v30 = a3;
  int v31 = a5;
  uint64_t v32 = a1;
  uint64_t v33 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v20 = *(void *)(AssociatedTypeWitness - 8);
  double v21 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  int v23 = (char *)&v30 - v22;
  int v24 = *a6;
  uint64_t v25 = *((void *)a6 + 1);
  char v26 = *((unsigned char *)a6 + 16);
  LOBYTE(a6) = *((unsigned char *)a6 + 17);
  (*(void (**)(uint64_t, uint64_t, double))(a13 + 32))(a8, a13, v21);
  int v38 = v24;
  uint64_t v39 = v25;
  char v40 = v26;
  char v41 = (char)a6;
  uint64_t v27 = *(uint64_t (**)(uint64_t, uint64_t, double, double, double, double))(swift_getAssociatedConformanceWitness()
                                                                                   + 72);
  char v37 = v30 & 1;
  char v36 = v31 & 1;
  uint64_t v28 = v27(v32, v33, a9, a10, a11, a12);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v23, AssociatedTypeWitness);
  return v28;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v20;
  double v21;
  uint64_t v22;
  char *v23;
  int v24;
  uint64_t v25;
  char v26;
  uint64_t (*v27)(uint64_t, uint64_t, double, double, double, double);
  uint64_t v28;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  int v38;
  uint64_t v39;
  char v40;
  char v41;

  uint64_t v34 = a4;
  uint64_t v35 = a7;
  int v30 = a3;
  int v31 = a5;
  uint64_t v32 = a1;
  uint64_t v33 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v20 = *(void *)(AssociatedTypeWitness - 8);
  double v21 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  int v23 = (char *)&v30 - v22;
  int v24 = *a6;
  uint64_t v25 = *((void *)a6 + 1);
  char v26 = *((unsigned char *)a6 + 16);
  LOBYTE(a6) = *((unsigned char *)a6 + 17);
  (*(void (**)(uint64_t, uint64_t, double))(a13 + 32))(a8, a13, v21);
  int v38 = v24;
  uint64_t v39 = v25;
  char v40 = v26;
  char v41 = (char)a6;
  uint64_t v27 = *(uint64_t (**)(uint64_t, uint64_t, double, double, double, double))(swift_getAssociatedConformanceWitness()
                                                                                   + 80);
  char v37 = v30 & 1;
  char v36 = v31 & 1;
  uint64_t v28 = v27(v32, v33, a9, a10, a11, a12);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v23, AssociatedTypeWitness);
  return v28;
}

uint64_t dispatch thunk of DerivedLayout.base.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

double protocol witness for Layout.sizeThatFits(proposal:subviews:cache:) in conformance <> VStack<A>(uint64_t a1, char a2, uint64_t a3, char a4, unsigned int *a5, __n128 *a6)
{
  char v6 = a2 & 1;
  char v7 = a4 & 1;
  if (*((unsigned char *)a5 + 17)) {
    int v8 = 256;
  }
  else {
    int v8 = 0;
  }
  return specialized HVStack.sizeThatFits(proposal:subviews:cache:)(a1, v6, a3, v7, *a5, *((void *)a5 + 1), v8 | *((unsigned __int8 *)a5 + 16), a6);
}

uint64_t LayoutChildGeometries.init(parentSize:parentPosition:layoutComputer:)@<X0>(uint64_t result@<X0>, int a2@<W1>, int a3@<W2>, _DWORD *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance LayoutChildGeometries@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = LayoutChildGeometries.value.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance LayoutChildGeometry@<X0>(uint64_t a1@<X8>)
{
  unint64_t v3 = *(void *)(v1 + 8);
  _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_1(0, &lazy cache variable for type metadata for [ViewGeometry], (uint64_t)&type metadata for ViewGeometry, MEMORY[0x263F8D488]);
  uint64_t result = AGGraphGetValue();
  if ((v3 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (v3 >= *(void *)(*(void *)result + 16))
  {
LABEL_7:
    __break(1u);
    return result;
  }
  uint64_t v5 = *(void *)result + (v3 << 6);
  uint64_t v6 = *(void *)(v5 + 48);
  uint64_t v7 = *(void *)(v5 + 56);
  *(_OWORD *)a1 = *(_OWORD *)(v5 + 32);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  long long v8 = *(_OWORD *)(v5 + 80);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v5 + 64);
  *(_OWORD *)(a1 + 48) = v8;

  return swift_retain();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance StaticLayoutComputer<A>()
{
  return specialized StaticLayoutComputer.description.getter();
}

uint64_t sub_245DBE364()
{
  return swift_deallocObject();
}

unint64_t instantiation function for generic protocol witness table for LayoutChildGeometries(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type LayoutChildGeometries and conformance LayoutChildGeometries();
  *(void *)(a1 + 8) = result;
  return result;
}

ValueMetadata *type metadata accessor for LayoutChildGeometries()
{
  return &type metadata for LayoutChildGeometries;
}

uint64_t specialized StaticLayoutComputer.description.getter()
{
  uint64_t v3 = _typeName(_:qualified:)();
  v0._countAndFlagsBits = 0x209286E220;
  v0._object = (void *)0xA500000000000000;
  String.append(_:)(v0);
  v1._countAndFlagsBits = 0x6F4374756F79614CLL;
  v1._object = (void *)0xEE0072657475706DLL;
  String.append(_:)(v1);
  return v3;
}

void *type metadata accessor for LayoutChildGeometry()
{
  return &unk_26FA5E8C8;
}

unint64_t instantiation function for generic protocol witness table for LayoutChildGeometry(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type LayoutChildGeometry and conformance LayoutChildGeometry();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t _OverlayPreferenceModifier.init(alignment:transform:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t View.overlayPreferenceValue<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10)
{
  return View.overlayPreferenceValue<A, B>(_:_:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&unk_26FA8DD10, (void (*)(uint64_t, uint64_t, _UNKNOWN **))type metadata accessor for _OverlayModifier, (uint64_t)&protocol witness table for _OverlayModifier<A>, (uint64_t)partial apply for closure #1 in View.overlayPreferenceValue<A, B>(_:_:));
}

uint64_t partial apply for closure #1 in View.overlayPreferenceValue<A, B>(_:_:)(uint64_t a1)
{
  return partial apply for closure #1 in View.overlayPreferenceValue<A, B>(_:_:)(a1, (void (*)(void *, void, void, uint64_t, uint64_t, uint64_t, _UNKNOWN **))View.overlay<A>(_:alignment:));
}

uint64_t View.backgroundPreferenceValue<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10)
{
  return View.overlayPreferenceValue<A, B>(_:_:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&unk_26FA8DD38, (void (*)(uint64_t, uint64_t, _UNKNOWN **))type metadata accessor for _BackgroundModifier, (uint64_t)&protocol witness table for _BackgroundModifier<A>, (uint64_t)partial apply for closure #1 in View.backgroundPreferenceValue<A, B>(_:_:));
}

uint64_t View.overlayPreferenceValue<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, void (*a12)(uint64_t, uint64_t, _UNKNOWN **), uint64_t a13, uint64_t a14)
{
  uint64_t v32 = a8;
  uint64_t v33 = a2;
  int v38 = a9;
  uint64_t v39 = a7;
  uint64_t v36 = a13;
  uint64_t v37 = a14;
  uint64_t v34 = a3;
  uint64_t v35 = a12;
  uint64_t v18 = *(void *)(a4 - 8);
  uint64_t v19 = *(void *)(v18 + 64);
  double v20 = MEMORY[0x270FA5388](a1);
  double v21 = (char *)&v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v18 + 16))(v21, v14, v22, v20);
  unint64_t v23 = (*(unsigned __int8 *)(v18 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  unint64_t v24 = (v19 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v25 = (char *)swift_allocObject();
  *((void *)v25 + 2) = a4;
  *((void *)v25 + 3) = a5;
  uint64_t v26 = v39;
  *((void *)v25 + 4) = a6;
  *((void *)v25 + 5) = v26;
  uint64_t v27 = v32;
  *((void *)v25 + 6) = v32;
  *((void *)v25 + 7) = a10;
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(&v25[v23], v21, a4);
  uint64_t v28 = &v25[v24];
  uint64_t v29 = v34;
  *(void *)uint64_t v28 = v33;
  *((void *)v28 + 1) = v29;
  uint64_t v42 = a5;
  uint64_t v43 = a6;
  uint64_t v44 = v27;
  uint64_t v45 = a10;
  uint64_t v30 = type metadata accessor for _PreferenceReadingView();
  v35(255, v30, &protocol witness table for _PreferenceReadingView<A, B>);
  type metadata accessor for ModifiedContent();
  uint64_t v40 = v39;
  uint64_t v41 = v36;
  swift_getWitnessTable();
  static PreferenceKey._delay<A>(_:)(v37, (uint64_t)v25, v38);
  swift_retain();
  return swift_release();
}

uint64_t closure #1 in View.overlayPreferenceValue<A, B>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void (*a11)(void *, void, void, uint64_t, uint64_t, uint64_t, _UNKNOWN **))
{
  type metadata accessor for _PreferenceValue();
  _PreferenceValue._force<A>(_:)(a3, a4, v18);
  if (one-time initialization token for center != -1) {
    swift_once();
  }
  long long v14 = static Alignment.center;
  uint64_t v15 = type metadata accessor for _PreferenceReadingView();
  a11(v18, v14, *((void *)&v14 + 1), a5, v15, a8, &protocol witness table for _PreferenceReadingView<A, B>);
  return swift_release();
}

uint64_t partial apply for closure #1 in View.backgroundPreferenceValue<A, B>(_:_:)(uint64_t a1)
{
  return partial apply for closure #1 in View.overlayPreferenceValue<A, B>(_:_:)(a1, (void (*)(void *, void, void, uint64_t, uint64_t, uint64_t, _UNKNOWN **))View.background<A>(_:alignment:));
}

uint64_t partial apply for closure #1 in View.overlayPreferenceValue<A, B>(_:_:)(uint64_t a1, void (*a2)(void *, void, void, uint64_t, uint64_t, uint64_t, _UNKNOWN **))
{
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)(v2[2] - 8) + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v2[2] - 8) + 80);
  char v4 = (uint64_t *)((char *)v2 + ((*(void *)(*(void *)(v2[2] - 8) + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  return closure #1 in View.overlayPreferenceValue<A, B>(_:_:)(a1, (uint64_t)v2 + v3, *v4, v4[1], v2[2], v2[3], v2[4], v2[5], v2[6], v2[7], a2);
}

uint64_t _OverlayPreferenceModifier.transform.getter(uint64_t a1)
{
  return a1;
}

uint64_t _OverlayPreferenceModifier.transform.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_release();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*_OverlayPreferenceModifier.transform.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _OverlayPreferenceModifier.alignment.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t _OverlayPreferenceModifier.alignment.setter(uint64_t result, uint64_t a2)
{
  *(void *)(v2 + 16) = result;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*_OverlayPreferenceModifier.alignment.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t specialized makeSecondaryPreferenceView<A, B>(modifier:inputs:body:flipOrder:)@<X0>(unsigned int a1@<W0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  v115[1] = *MEMORY[0x263EF8340];
  long long v5 = *(_OWORD *)(a2 + 48);
  long long v114 = *(_OWORD *)(a2 + 32);
  long long v109 = v114;
  long long v6 = *(_OWORD *)(a2 + 16);
  v113[0] = *(_OWORD *)a2;
  v113[1] = v6;
  long long v110 = v5;
  long long v111 = *(_OWORD *)(a2 + 64);
  int v112 = *(_DWORD *)(a2 + 80);
  long long v107 = v113[0];
  long long v108 = v6;
  outlined retain of _ViewInputs(a2);
  PreferenceKeys.add(_:)((uint64_t)&type metadata for Text.LayoutKey, (uint64_t)&protocol witness table for Text.LayoutKey);
  __int16 v50 = WORD2(v114);
  if ((WORD2(v114) & 0x100) != 0) {
    specialized _GraphInputs.pushScope<A>(id:)(0);
  }
  unsigned int v52 = *(_DWORD *)(a2 + 76);
  int v53 = *(_DWORD *)(a2 + 80);
  unsigned int v65 = *(_DWORD *)(a2 + 72);
  unsigned int v46 = *(_DWORD *)(a2 + 60);
  unsigned int v48 = *(_DWORD *)(a2 + 68);
  uint64_t v62 = a2;
  unsigned int v63 = *(_DWORD *)(a2 + 64);
  int v55 = v109;
  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  *(void *)&long long v101 = v107;
  long long v102 = v108;
  DWORD2(v101) = DWORD2(v107);
  DWORD1(v103) = DWORD1(v109);
  *((void *)&v103 + 1) = *((void *)&v109 + 1);
  *(void *)&long long v104 = v110;
  *((void *)&v104 + 1) = __PAIR64__(v46, DWORD2(v110));
  *(void *)&long long v105 = __PAIR64__(v48, v63);
  *((void *)&v105 + 1) = __PAIR64__(v52, v65);
  int v106 = v53;
  LODWORD(v69) = OffsetAttribute2;
  unint64_t v88 = v107;
  long long v90 = v108;
  int v89 = DWORD2(v107);
  LODWORD(v91) = 0;
  uint64_t v92 = *((void *)&v109 + 1);
  uint64_t v93 = v110;
  HIDWORD(v91) = DWORD1(v109);
  int v94 = DWORD2(v110);
  unsigned int v95 = v46;
  unsigned int v96 = v63;
  unsigned int v97 = v48;
  unsigned int v98 = v65;
  unsigned int v99 = v52;
  int v100 = v53;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static Text._makeView(view:inputs:)(&v69, (uint64_t)&v88, &v71);
  LODWORD(v103) = v55;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(&v71, &v101);
    AGSubgraphEndTreeElement();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  unint64_t v7 = v71;
  unsigned int v8 = v73;
  int v54 = v72;
  unsigned int v9 = AGGraphCreateOffsetAttribute2();
  uint64_t KeyPath = swift_getKeyPath();
  swift_beginAccess();
  outlined retain of _GraphInputs((uint64_t)v113);
  unsigned int v11 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
  swift_endAccess();
  outlined release of _GraphInputs((uint64_t)v113);
  swift_release();
  unsigned int v12 = *MEMORY[0x263F288F8];
  *(void *)&long long v101 = __PAIR64__(v11, v9);
  *((void *)&v101 + 1) = __PAIR64__(v65, v63);
  *(void *)&long long v102 = __PAIR64__(v12, v8);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type SecondaryLayerGeometryQuery and conformance SecondaryLayerGeometryQuery();
  Attribute.init<A>(body:value:flags:update:)();
  int v13 = v114;
  long long v14 = *(_OWORD *)(v62 + 48);
  long long v103 = *(_OWORD *)(v62 + 32);
  long long v104 = v14;
  long long v105 = *(_OWORD *)(v62 + 64);
  int v106 = *(_DWORD *)(v62 + 80);
  long long v15 = *(_OWORD *)(v62 + 16);
  long long v101 = *(_OWORD *)v62;
  long long v102 = v15;
  outlined retain of _ViewInputs(v62);
  LODWORD(v105) = AGGraphCreateOffsetAttribute2();
  int v16 = AGGraphCreateOffsetAttribute2();
  v115[0] = *(void *)&v113[0];
  DWORD2(v105) = v16;
  LODWORD(v103) = v13 | 0x18;
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v101, (uint64_t)&type metadata for _ZStackLayout, (uint64_t)&protocol witness table for _ZStackLayout);
  outlined release of ViewTransform((uint64_t)v115);
  if ((v50 & 0x100) != 0) {
    specialized _GraphInputs.pushScope<A>(id:)((void *)1);
  }
  uint64_t v17 = *(void *)(v7 + 16);
  unsigned int v60 = v8;
  unint64_t v56 = v7;
  if (v17)
  {
    uint64_t v18 = (ValueMetadata **)(v7 + 48);
    while (*(v18 - 2) != &type metadata for Text.LayoutKey)
    {
      v18 += 3;
      if (!--v17) {
        goto LABEL_13;
      }
    }
    char v19 = 0;
    LODWORD(v17) = *(_DWORD *)v18;
  }
  else
  {
LABEL_13:
    char v19 = 1;
  }
  if (v19) {
    unsigned int v20 = v12;
  }
  else {
    unsigned int v20 = v17;
  }
  uint64_t v64 = v102;
  unint64_t v66 = v101;
  int v21 = DWORD2(v101);
  unsigned int v22 = HIDWORD(v102);
  uint64_t v24 = *((void *)&v103 + 1);
  uint64_t v23 = v104;
  int v25 = DWORD1(v103);
  int v49 = DWORD2(v104);
  int v51 = v103;
  unsigned int v45 = v105;
  unsigned int v47 = HIDWORD(v104);
  unsigned int v43 = DWORD2(v105);
  unsigned int v44 = DWORD1(v105);
  unsigned int v42 = HIDWORD(v105);
  unsigned int v40 = DWORD2(v102);
  int v41 = v106;
  type metadata accessor for ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>();
  unint64_t v88 = __PAIR64__(v20, a1);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for SecondaryChild<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>>();
  lazy protocol witness table accessor for type SecondaryChild<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>> and conformance SecondaryChild<A, B>();
  int v26 = Attribute.init<A>(body:value:flags:update:)();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  unint64_t v88 = v66;
  *(void *)&long long v90 = v64;
  int v89 = v21;
  *((void *)&v90 + 1) = __PAIR64__(v22, v40);
  HIDWORD(v91) = v25;
  uint64_t v92 = v24;
  uint64_t v93 = v23;
  int v94 = v49;
  unsigned int v95 = v47;
  unsigned int v96 = v45;
  unsigned int v97 = v44;
  unsigned int v98 = v43;
  unsigned int v99 = v42;
  int v100 = v41;
  unint64_t v71 = v66;
  int v72 = v21;
  uint64_t v74 = v64;
  unsigned int v75 = v40;
  unsigned int v76 = v22;
  int v77 = 0;
  int v78 = v25;
  uint64_t v79 = v24;
  uint64_t v80 = v23;
  int v81 = v49;
  unsigned int v82 = v47;
  unsigned int v83 = v45;
  unsigned int v84 = v44;
  unsigned int v85 = v43;
  unsigned int v86 = v42;
  int v87 = v41;
  uint64_t v27 = swift_allocObject();
  *(_DWORD *)(v27 + 16) = v26;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static _ViewOutputs.multiView(inputs:body:)((uint64_t)&v71, (uint64_t)partial apply for specialized closure #1 in static View.makeImplicitRoot(view:inputs:), v27, (uint64_t)&v69);
  swift_release();
  LODWORD(v91) = v51;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(&v69, &v88);
    AGSubgraphEndTreeElement();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v28 = swift_release();
  unint64_t v29 = v69;
  int v68 = v70;
  MEMORY[0x270FA5388](v28);
  MEMORY[0x270FA5388](v30);
  AGGraphMutateAttribute();
  int v31 = v68;
  if (a3)
  {
    unint64_t v32 = v29;
    int v33 = v68;
    unint64_t v29 = v56;
    int v31 = v54;
  }
  else
  {
    unint64_t v32 = v56;
    int v33 = v54;
  }
  uint64_t v91 = MEMORY[0x263F8EE78];
  LODWORD(v92) = 0;
  unint64_t v88 = v32;
  *(void *)&long long v90 = v29;
  int v89 = v33;
  DWORD2(v90) = v31;
  unint64_t v34 = *(void *)(v62 + 48);
  unint64_t v71 = v34;
  int v72 = *(_DWORD *)(v62 + 56);
  uint64_t v35 = *(void *)(v34 + 16);
  if (v35)
  {
    swift_bridgeObjectRetain();
    outlined retain of LinearGradient((uint64_t)&v71);
    uint64_t v36 = (uint64_t *)(v34 + 40);
    do
    {
      static PreferenceKey.visitKey<A>(_:)((uint64_t)&v88, *(v36 - 1), (uint64_t)&type metadata for PairwisePreferenceCombinerVisitor, *v36, (uint64_t)&protocol witness table for PairwisePreferenceCombinerVisitor);
      v36 += 2;
      --v35;
    }
    while (v35);
    outlined release of LinearGradient((uint64_t)&v71);
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v37 = v91;
  int v38 = v92;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a4 = v37;
  *(_DWORD *)(a4 + 8) = v38;
  *(_DWORD *)(a4 + 12) = v60;
  return result;
}

uint64_t (*_BackgroundPreferenceModifier.transform.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_BackgroundPreferenceModifier.alignment.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

_OWORD *assignWithTake for _OverlayPreferenceModifier(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  return a1;
}

uint64_t sub_245DBF30C(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzAA13PreferenceKeyRd__AaBRd_0_r_0_lAA15ModifiedContentVyxAA08_OverlayD8ModifierVyqd__qd_0_GGAaBHPxAaBHD1__AhA0cI0HPyHCHCTm(a1, (void (*)(uint64_t, _OWORD *))type metadata accessor for _OverlayPreferenceModifier);
}

uint64_t sub_245DBF32C(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzAA13PreferenceKeyRd__AaBRd_0_r_0_lAA15ModifiedContentVyxAA08_OverlayD8ModifierVyqd__qd_0_GGAaBHPxAaBHD1__AhA0cI0HPyHCHCTm(a1, (void (*)(uint64_t, _OWORD *))type metadata accessor for _BackgroundPreferenceModifier);
}

uint64_t get_witness_table_7SwiftUI4ViewRzAA13PreferenceKeyRd__AaBRd_0_r_0_lAA15ModifiedContentVyxAA08_OverlayD8ModifierVyqd__qd_0_GGAaBHPxAaBHD1__AhA0cI0HPyHCHCTm(uint64_t a1, void (*a2)(uint64_t, _OWORD *))
{
  long long v2 = *(_OWORD *)(a1 + 32);
  v4[0] = *(_OWORD *)(a1 + 8);
  v4[1] = v2;
  a2(255, v4);
  type metadata accessor for ModifiedContent();
  return swift_getWitnessTable();
}

_UNKNOWN **sub_245DBF3D8()
{
  return &protocol witness table for _DelayedPreferenceView<A, B>;
}

_UNKNOWN **sub_245DBF3E4()
{
  return &protocol witness table for _DelayedPreferenceView<A, B>;
}

void type metadata accessor for SecondaryChild<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>>()
{
  if (!lazy cache variable for type metadata for SecondaryChild<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>>)
  {
    type metadata accessor for ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>();
    lazy protocol witness table accessor for type ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>> and conformance <> ForEach<A, B, C>();
    unint64_t v0 = type metadata accessor for SecondaryChild();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SecondaryChild<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type SecondaryChild<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>> and conformance SecondaryChild<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type SecondaryChild<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>> and conformance SecondaryChild<A, B>;
  if (!lazy protocol witness table cache variable for type SecondaryChild<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>> and conformance SecondaryChild<A, B>)
  {
    type metadata accessor for SecondaryChild<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SecondaryChild<Text.LayoutKey, ForEach<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>> and conformance SecondaryChild<A, B>);
  }
  return result;
}

uint64_t sub_245DBF4D0()
{
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in static View.makeImplicitRoot(view:inputs:)@<X0>(uint64_t a1@<X8>)
{
  return specialized closure #1 in static View.makeImplicitRoot(view:inputs:)(*(_DWORD *)(v1 + 16), a1);
}

{
  return specialized closure #1 in static View.makeImplicitRoot(view:inputs:)(a1);
}

{
  return specialized closure #1 in static View.makeImplicitRoot(view:inputs:)(a1);
}

ValueMetadata *type metadata accessor for SomersaultTextEffect()
{
  return &type metadata for SomersaultTextEffect;
}

uint64_t closure #1 in SomersaultTextEffect.configuration(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  long long v10 = *(_OWORD *)(a2 + 16);
  v34[0] = *(_OWORD *)a2;
  v34[1] = v10;
  _OWORD v34[2] = *(_OWORD *)(a2 + 32);
  uint64_t v35 = *(void *)(a2 + 48);
  uint64_t v11 = specialized static Text.Effect.ClusterTransformMap.byWords(fragment:)((uint64_t)v34);
  uint64_t v13 = v12;
  outlined retain of Text.Effect.DrawableFragment<SmallTextEffect>(a2);
  specialized Text.Effect.PathInterpolator.init<A>(_:quantization:options:)(v32, a2, a3, 1);
  uint64_t v36 = v6;
  uint64_t v37 = v7;
  uint64_t v38 = v8;
  uint64_t v39 = v9;
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = *(_OWORD *)a1;
  *(void *)(v14 + 32) = v6;
  *(void *)(v14 + 40) = v7;
  *(void *)(v14 + 48) = v8;
  *(void *)(v14 + 56) = v9;
  *(void *)(v14 + 64) = v11;
  *(void *)(v14 + 72) = v13;
  uint64_t v15 = swift_allocObject();
  long long v16 = v32[3];
  *(_OWORD *)(v15 + 48) = v32[2];
  *(_OWORD *)(v15 + 64) = v16;
  *(_OWORD *)(v15 + 80) = v32[4];
  uint64_t v17 = v33;
  long long v18 = v32[1];
  *(_OWORD *)(v15 + 16) = v32[0];
  *(_OWORD *)(v15 + 32) = v18;
  *(void *)(v15 + 96) = v17;
  *(void *)(v15 + 104) = partial apply for closure #1 in closure #1 in SomersaultTextEffect.configuration(_:);
  *(void *)(v15 + 112) = v14;
  char v19 = (uint64_t (*)(void, uint64_t))MEMORY[0x263F8E0F8];
  _ss23_ContiguousArrayStorageCy7SwiftUI4TextVACE6EffectO8DrawableV8FragmentOGMaTm_0(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Drawable.Fragment>, (uint64_t)&type metadata for Text.Effect.Drawable.Fragment, MEMORY[0x263F8E0F8]);
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_2461B9DC0;
  *(void *)(v20 + 32) = partial apply for closure #1 in Text.Effect.DrawableFragment.transform(with:transform:);
  unint64_t v21 = v20 + 32;
  *(void *)(v20 + 40) = v15;
  _ss23_ContiguousArrayStorageCy7SwiftUI4TextVACE6EffectO8DrawableV8FragmentOGMaTm_0(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.Drawable>, (uint64_t)&type metadata for Text.Effect.Drawable, v19);
  initedouble d = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2461B9DC0;
  *(void *)(inited + 32) = v20;
  int64_t v23 = *(void *)(v20 + 16);
  outlined retain of LinearGradient((uint64_t)&v36);
  outlined retain of LinearGradient((uint64_t)&v37);
  outlined retain of LinearGradient((uint64_t)&v38);
  outlined retain of LinearGradient((uint64_t)&v39);
  outlined retain of Text.Effect.PathInterpolator((uint64_t)v32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23, 1, MEMORY[0x263F8EE78]);
  int v25 = v24;
  if (!*(void *)(v20 + 16))
  {
    if (!v23) {
      goto LABEL_9;
    }
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v26 = v24[2];
  if ((v24[3] >> 1) - v26 < v23)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  unint64_t v27 = (unint64_t)&v24[2 * v26 + 4];
  if (v21 < v27 + 16 * v23 && v27 < v21 + 16 * v23) {
    goto LABEL_13;
  }
  swift_arrayInitWithCopy();
  if (!v23)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_setDeallocating();
    swift_arrayDestroy();
    outlined release of Text.Effect.PathInterpolator((uint64_t)v32);
    return (uint64_t)v25;
  }
  uint64_t v28 = v25[2];
  BOOL v29 = __OFADD__(v28, v23);
  uint64_t v30 = v28 + v23;
  if (!v29)
  {
    v25[2] = v30;
    goto LABEL_9;
  }
LABEL_12:
  __break(1u);
LABEL_13:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t closure #1 in closure #1 in SomersaultTextEffect.configuration(_:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  double v5 = *(double *)&result;
  if (*(void *)(*(void *)(a3 + 16) + 16) <= result)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v6 = *(void *)(a3 + 32);
  if (*(void *)(v6 + 16) <= result)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v8 = v6 + 40 * result;
  double v9 = *(double *)(v8 + 32);
  double v10 = *(double *)(v8 + 40);
  double v11 = *(double *)(a2 + 40) - *(double *)(a2 + 32);
  double v12 = 0.0;
  if (v11 >= 0.0)
  {
    if (v11 <= v9) {
      goto LABEL_11;
    }
    if (v9 + v10 <= v11) {
      goto LABEL_7;
    }
    goto LABEL_10;
  }
  if (v9 < 0.0)
  {
    double v11 = 0.0;
    if (v9 + v10 <= 0.0)
    {
LABEL_7:
      double v12 = 6.28318531;
      goto LABEL_11;
    }
LABEL_10:
    double v12 = (v11 - v9) / v10 * 360.0 * 0.0174532925;
  }
LABEL_11:
  long long v28 = *(_OWORD *)(v8 + 48);
  uint64_t v13 = *(void *)(v8 + 64);
  Text.Effect.ClusterTransformMap.subscript.getter(result, a4, a5, (uint64_t)v31);
  uint64_t result = outlined init with take of Text.Effect.ClusterTransformMap.Element?((uint64_t)v31, (uint64_t)v33);
  if ((v39 & 1) == 0)
  {
    double v18 = v34;
    double v16 = v35;
    double v17 = v36;
    double v14 = v37;
    double v15 = v38;
LABEL_17:
    double v19 = v16 - v14;
    double v20 = v14 + v15;
    double v21 = v19;
    CGFloat MidX = CGRectGetMidX(*(CGRect *)&v18);
    memset(v40, 0, 24);
    *(double *)&v40[3] = v12;
    *(CGFloat *)&v40[4] = MidX;
    *(double *)&_OWORD v40[5] = v19;
    __asm { FMOV            V0.2D, #1.0 }
    long long v41 = _Q0;
    uint64_t v42 = 0x3FF0000000000000;
    char v43 = 0;
    long long v29 = v28;
    uint64_t v30 = v13;
    Text.Effect.TransformContext.record(target:for:spring:)((uint64_t)v40, v5, (double *)&v29, (uint64_t)v32);
    return Text.Effect.TransformContext.draw(state:keyPath:)((uint64_t)v32, 0, 0, 0, 1);
  }
  if (!__OFSUB__(*(void *)a2, *(void *)&v5))
  {
    double v14 = *(double *)(a2 + 232);
    double v15 = *(double *)(a2 + 240);
    double v16 = *(double *)(a2 + 216);
    double v17 = *(double *)(a2 + 224);
    double v18 = *(double *)(a2 + 208);
    if (*(void *)a2 != *(void *)&v5)
    {
      double v18 = 0.0;
      double v16 = 0.0;
      double v17 = 0.0;
      double v14 = 0.0;
      double v15 = 0.0;
    }
    goto LABEL_17;
  }
LABEL_21:
  __break(1u);
  return result;
}

uint64_t protocol witness for static TextEffect.name.getter in conformance SomersaultTextEffect()
{
  return 0x75617372656D6F73;
}

double protocol witness for Text.Effect.Base.timing(for:from:to:duration:) in conformance SomersaultTextEffect@<D0>(uint64_t a1@<X0>, double a2@<X5>, char a3@<W6>, _OWORD *a4@<X8>)
{
  type metadata accessor for Text.Effect.DrawableContent<SomersaultTextEffect>();
  MEMORY[0x270FA5388](v8 - 8);
  double v10 = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v34 = 1;
  char v33 = 0;
  char v32 = 0;
  long long v17 = xmmword_2461C0DD0;
  char v18 = 1;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  char v21 = 2;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v22 = 0x3F947AE147AE147BLL;
  char v25 = 0;
  long long v26 = xmmword_2461E19C0;
  char v27 = 0;
  uint64_t v28 = MEMORY[0x263F8EE78];
  char v29 = 0;
  long long v30 = xmmword_2461BD450;
  char v31 = 0;
  if (one-time initialization token for spring != -1) {
    swift_once();
  }
  long long v11 = static SomersaultTextEffect.spring;
  double v12 = *(double *)&qword_268F735B0;
  outlined init with copy of Text.Effect.DrawableContent<SomersaultTextEffect>(a1, (uint64_t)v10);
  specialized Text.Effect.Timing.init<A>(configuration:duration:spring:content:)((uint64_t)&v17, a2, a3 & 1, (uint64_t)v10, (double *)v15, *(double *)&v11, *((double *)&v11 + 1), v12);
  long long v13 = v15[1];
  *a4 = v15[0];
  a4[1] = v13;
  double result = *(double *)&v16;
  a4[2] = v16;
  return result;
}

unint64_t instantiation function for generic protocol witness table for SomersaultTextEffect(uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type SomersaultTextEffect and conformance SomersaultTextEffect();
  unint64_t result = lazy protocol witness table accessor for type SomersaultTextEffect and conformance SomersaultTextEffect();
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t specialized SomersaultTextEffect.configuration(_:)()
{
  unint64_t v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
  unint64_t v2 = v0[2];
  unint64_t v1 = v0[3];
  if (v2 >= v1 >> 1) {
    unint64_t v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v1 > 1), v2 + 1, 1, v0);
  }
  v0[2] = v2 + 1;
  unint64_t v3 = &v0[2 * v2];
  v3[4] = specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.Text.Effect.Base.Timing, @guaranteed Text.Effect.DrawableFragment<A>, @unowned Text.Effect.QuantizationContext) -> (@owned Text.Effect.Drawable);
  v3[5] = 0;
  return MEMORY[0x263F8EE78];
}

uint64_t sub_245DBFDAC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

unint64_t partial apply for closure #1 in closure #1 in SomersaultTextEffect.configuration(_:)(unint64_t a1, uint64_t a2)
{
  return closure #1 in closure #1 in SomersaultTextEffect.configuration(_:)(a1, a2, v2 + 16, *(void *)(v2 + 64), *(void *)(v2 + 72));
}

uint64_t sub_245DBFE18()
{
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 96) >= 3uLL) {
    swift_bridgeObjectRelease();
  }
  swift_release();

  return swift_deallocObject();
}

uint64_t outlined init with take of Text.Effect.ClusterTransformMap.Element?(uint64_t a1, uint64_t a2)
{
  _ss23_ContiguousArrayStorageCy7SwiftUI4TextVACE6EffectO8DrawableV8FragmentOGMaTm_0(0, &lazy cache variable for type metadata for Text.Effect.ClusterTransformMap.Element?, (uint64_t)&type metadata for Text.Effect.ClusterTransformMap.Element, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for Text.Effect.DrawableContent<SomersaultTextEffect>()
{
  if (!lazy cache variable for type metadata for Text.Effect.DrawableContent<SomersaultTextEffect>)
  {
    lazy protocol witness table accessor for type SomersaultTextEffect and conformance SomersaultTextEffect();
    unint64_t v0 = type metadata accessor for Text.Effect.DrawableContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Text.Effect.DrawableContent<SomersaultTextEffect>);
    }
  }
}

uint64_t outlined init with copy of Text.Effect.DrawableContent<SomersaultTextEffect>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Text.Effect.DrawableContent<SomersaultTextEffect>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t AnyLayout.makeCache(subviews:)(int *a1, uint64_t a2)
{
  uint64_t v2 = *((void *)a1 + 1);
  char v3 = *((unsigned char *)a1 + 16);
  char v4 = *((unsigned char *)a1 + 17);
  int v6 = *a1;
  uint64_t v7 = v2;
  char v8 = v3;
  char v9 = v4;
  return (*(uint64_t (**)(int *))(*(void *)a2 + 88))(&v6);
}

uint64_t AnyLayout.updateCache(_:subviews:)(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v3 = *((void *)a2 + 1);
  char v4 = *((unsigned char *)a2 + 16);
  char v5 = *((unsigned char *)a2 + 17);
  int v7 = *a2;
  uint64_t v8 = v3;
  char v9 = v4;
  char v10 = v5;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a3 + 96))(a1, &v7);
}

uint64_t AnyLayout.spacing(subviews:cache:)(int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *((void *)a1 + 1);
  char v4 = *((unsigned char *)a1 + 16);
  char v5 = *((unsigned char *)a1 + 17);
  int v7 = *a1;
  uint64_t v8 = v3;
  char v9 = v4;
  char v10 = v5;
  return (*(uint64_t (**)(int *))(*(void *)a3 + 104))(&v7);
}

uint64_t AnyLayout.sizeThatFits(proposal:subviews:cache:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(*(void *)a7 + 112))();
}

uint64_t AnyLayout.placeSubviews(in:proposal:subviews:cache:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(*(void *)a7 + 120))();
}

uint64_t AnyLayout.explicitAlignment(of:in:proposal:subviews:cache:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(*(void *)a8 + 128))();
}

{
  return (*(uint64_t (**)(void))(*(void *)a8 + 136))();
}

uint64_t AnyLayout.animatableData.getter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 144))();
}

uint64_t key path setter for AnyLayout.animatableData : AnyLayout(void *a1, uint64_t *a2)
{
  outlined init with copy of _AnyAnimatableData(a1, v8);
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v4 = *a2;
  if (isUniquelyReferenced_nonNull_native)
  {
    outlined init with copy of _AnyAnimatableData(v8, v7);
    (*(void (**)(void *))(*(void *)v4 + 152))(v7);
    return outlined destroy of _AnyAnimatableData((uint64_t)v8);
  }
  else
  {
    uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v4 + 168))(v8);
    outlined destroy of _AnyAnimatableData((uint64_t)v8);
    *a2 = v6;
    return swift_release();
  }
}

uint64_t AnyLayout.animatableData.setter(void *a1)
{
  uint64_t v2 = v1;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v5 = *v1;
  if (isUniquelyReferenced_nonNull_native)
  {
    outlined init with copy of _AnyAnimatableData(a1, v8);
    (*(void (**)(void *))(*(void *)v5 + 152))(v8);
    return outlined destroy of _AnyAnimatableData((uint64_t)a1);
  }
  else
  {
    uint64_t v7 = (*(uint64_t (**)(void *))(*(void *)v5 + 168))(a1);
    outlined destroy of _AnyAnimatableData((uint64_t)a1);
    *uint64_t v2 = v7;
    return swift_release();
  }
}

void (*AnyLayout.animatableData.modify(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x80uLL);
  *a1 = v3;
  v3[15] = v1;
  (*(void (**)(void))(**(void **)v1 + 144))();
  return AnyLayout.animatableData.modify;
}

void AnyLayout.animatableData.modify(void **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a1 + 5;
  uint64_t v4 = (uint64_t *)(*a1)[15];
  if (a2)
  {
    outlined init with copy of _AnyAnimatableData(*a1, v3);
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v6 = *v4;
    if (isUniquelyReferenced_nonNull_native)
    {
      outlined init with copy of _AnyAnimatableData(v3, v2 + 10);
      (*(void (**)(void *))(*(void *)v6 + 152))(v2 + 10);
      outlined destroy of _AnyAnimatableData((uint64_t)v3);
    }
    else
    {
      char v9 = (uint64_t *)v2[15];
      uint64_t v10 = (*(uint64_t (**)(void *))(*(void *)v6 + 168))(v3);
      outlined destroy of _AnyAnimatableData((uint64_t)v3);
      *char v9 = v10;
      swift_release();
    }
    goto LABEL_7;
  }
  int v7 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v8 = *v4;
  if (v7)
  {
    outlined init with copy of _AnyAnimatableData(v2, v3);
    (*(void (**)(void *))(*(void *)v8 + 152))(v3);
LABEL_7:
    outlined destroy of _AnyAnimatableData((uint64_t)v2);
    goto LABEL_9;
  }
  long long v11 = (uint64_t *)v2[15];
  uint64_t v12 = (*(uint64_t (**)(void *))(*(void *)v8 + 168))(v2);
  outlined destroy of _AnyAnimatableData((uint64_t)v2);
  *long long v11 = v12;
  swift_release();
LABEL_9:

  free(v2);
}

uint64_t protocol witness for Animatable.animatableData.getter in conformance AnyLayout()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 144))();
}

uint64_t protocol witness for Animatable.animatableData.setter in conformance AnyLayout(void *a1)
{
  uint64_t v2 = v1;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v5 = *v1;
  if (isUniquelyReferenced_nonNull_native)
  {
    outlined init with copy of _AnyAnimatableData(a1, v8);
    (*(void (**)(void *))(*(void *)v5 + 152))(v8);
    return outlined destroy of _AnyAnimatableData((uint64_t)a1);
  }
  else
  {
    uint64_t v7 = (*(uint64_t (**)(void *))(*(void *)v5 + 168))(a1);
    outlined destroy of _AnyAnimatableData((uint64_t)a1);
    *uint64_t v2 = v7;
    return swift_release();
  }
}

void (*protocol witness for Animatable.animatableData.modify in conformance AnyLayout(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x80uLL);
  *a1 = v3;
  v3[15] = v1;
  (*(void (**)(void))(**(void **)v1 + 144))();
  return AnyLayout.animatableData.modify;
}

void AnyLayoutBox.layoutProperties.getter()
{
}

void AnyLayoutBox.makeCache(subviews:)()
{
}

void AnyLayoutBox.updateCache(_:subviews:)()
{
}

void AnyLayoutBox.spacing(subviews:cache:)()
{
}

void AnyLayoutBox.sizeThatFits(proposal:subviews:cache:)()
{
}

void AnyLayoutBox.placeSubviews(in:proposal:subviews:cache:)()
{
}

void AnyLayoutBox.explicitAlignment(of:in:proposal:subviews:cache:)()
{
}

{
  AnyLayoutBox.explicitAlignment(of:in:proposal:subviews:cache:)();
}

{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyLayoutBox.animatableData.getter()
{
}

void AnyLayoutBox.animatableData.setter()
{
}

void AnyLayoutBox.withAnimatableData(_:)()
{
}

uint64_t AnyLayoutBox.deinit()
{
  return v0;
}

uint64_t AnyLayoutBox.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t sub_245DC0C64(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 144))();
}

uint64_t method lookup function for AnyLayoutBox(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AnyLayoutBox);
}

uint64_t _AnyLayoutBox.animatableData.setter(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t)v1 + *(void *)(*v1 + 200);
  swift_beginAccess();
  _AnyAnimatableData.update<A>(_:)(v4, *(void *)(v3 + 184), *(void *)(*(void *)(v3 + 192) + 8));
  swift_endAccess();
  return outlined destroy of _AnyAnimatableData(a1);
}

uint64_t _AnyLayoutBox.withAnimatableData(_:)(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 184);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)&v9 - v5;
  uint64_t v7 = (uint64_t)v1 + *(void *)(v2 + 200);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v7, v3);
  _AnyAnimatableData.update<A>(_:)((uint64_t)v6, v3, *(void *)(*(void *)(v2 + 192) + 8));
  return _AnyLayoutBox.__allocating_init(_:)((uint64_t)v6);
}

uint64_t _AnyLayoutBox.__ivar_destroyer()
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 184) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 200));
}

void one-time initialization function for effectWidth()
{
  static GlimmerTextEffect.effectWidth = 0x4049000000000000;
}

void one-time initialization function for gradientWidth()
{
  static GlimmerTextEffect.gradientWidth = 0x4034000000000000;
}

uint64_t GlimmerTextEffect.Timing.init(content:duration:from:to:)@<X0>(uint64_t a1@<X0>, double a2@<X1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, double *a6@<X8>)
{
  int v59 = a4;
  int v60 = a5;
  uint64_t v14 = type metadata accessor for Text.Effect.BaseContent(0);
  MEMORY[0x270FA5388](v14 - 8);
  long long v16 = (uint64_t *)((char *)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for IndexingIterator<Text.Effect.BaseContent>();
  uint64_t v18 = v17;
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v54 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (uint64_t *)((char *)&v54 - v22);
  uint64_t v24 = specialized Sequence.reduce<A>(_:_:)(0, a1);
  uint64_t v25 = v24 - 1;
  if (__OFSUB__(v24, 1))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    swift_endAccess();
    __break(1u);
LABEL_28:
    swift_endAccess();
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v57 = a6;
  double v58 = a2;
  int v56 = a3;
  uint64_t v55 = a1;
  outlined init with copy of Text.Effect.BaseContent(a1, (uint64_t)v16);
  outlined init with copy of Text.Effect.BaseContent((uint64_t)v16, (uint64_t)v20);
  uint64_t v26 = *v16;
  Swift::UInt64 v27 = v16[1];
  uint64_t v28 = v16[2];
  swift_beginAccess();
  if (!*(void *)(*(void *)(v26 + 48) + 16)
    || (specialized __RawDictionaryStorage.find<A>(_:)(v27, v28), (v29 & 1) == 0))
  {
LABEL_29:
    uint64_t result = swift_endAccess();
    __break(1u);
    return result;
  }
  swift_endAccess();
  outlined destroy of Text.Effect.BaseContent((uint64_t)v16, type metadata accessor for Text.Effect.BaseContent);
  *(void *)&v20[*(int *)(v18 + 36)] = 0;
  outlined init with take of IndexingIterator<Text.Effect.BaseContent>((uint64_t)v20, (uint64_t)v23);
  uint64_t v30 = *(int *)(v18 + 36);
  uint64_t v31 = *v23;
  Swift::UInt64 v32 = v23[1];
  uint64_t v33 = v23[2];
  uint64_t v34 = *v23 + 48;
  unint64_t v35 = *(uint64_t *)((char *)v23 + v30);
  swift_beginAccess();
  uint64_t v36 = *(void *)(v31 + 48);
  if (*(void *)(v36 + 16))
  {
    v59 &= 1u;
    v60 &= 1u;
    double v8 = (double)v25 * 0.05;
    double v9 = v8 + 1.16666667;
    double v6 = v58;
    double v7 = 0.0;
    double v37 = 0.0;
    do
    {
      unint64_t v38 = specialized __RawDictionaryStorage.find<A>(_:)(v32, v33);
      if ((v39 & 1) == 0) {
        break;
      }
      uint64_t v40 = *(void *)(*(void *)(v36 + 56) + 16 * v38);
      swift_endAccess();
      uint64_t v41 = *(void *)(v40 + 16);
      if (__OFSUB__(v41, v35))
      {
        __break(1u);
LABEL_25:
        __break(1u);
        goto LABEL_26;
      }
      if (v41 == v35) {
        goto LABEL_18;
      }
      swift_retain();
      swift_retain();
      specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v31, v32, v33, v35, v62);
      swift_beginAccess();
      if (!*(void *)(*(void *)(v31 + 48) + 16)) {
        goto LABEL_27;
      }
      specialized __RawDictionaryStorage.find<A>(_:)(v32, v33);
      if ((v42 & 1) == 0) {
        goto LABEL_27;
      }
      swift_endAccess();
      swift_beginAccess();
      uint64_t v43 = *(void *)v34;
      if (!*(void *)(*(void *)v34 + 16)) {
        goto LABEL_28;
      }
      unint64_t v44 = specialized __RawDictionaryStorage.find<A>(_:)(v32, v33);
      if ((v45 & 1) == 0) {
        goto LABEL_28;
      }
      uint64_t v46 = *(void *)(*(void *)(v43 + 56) + 16 * v44);
      swift_endAccess();
      if (v35 >= *(void *)(v46 + 16)) {
        goto LABEL_25;
      }
      *(uint64_t *)((char *)v23 + v30) = v35 + 1;
      uint64_t v47 = v63;
      double v48 = v37 + CGRectGetWidth(*(CGRect *)(v63 + 120));
      if (v7 <= v48) {
        double v7 = v48;
      }
      double Width = CGRectGetWidth(*(CGRect *)(v47 + 120));
      outlined release of Text.Effect.BaseFragment((uint64_t)v62);
      double v37 = v37 + Width;
      unint64_t v35 = *(uint64_t *)((char *)v23 + v30);
      swift_beginAccess();
      uint64_t v36 = *(void *)v34;
    }
    while (*(void *)(*(void *)v34 + 16));
  }
  swift_endAccess();
  __break(1u);
LABEL_18:
  outlined destroy of Text.Effect.BaseContent((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for IndexingIterator<Text.Effect.BaseContent>);
  uint64_t v50 = v55;
  if (v56)
  {
    double v6 = 0.0;
    if (v59 != v60)
    {
      if (v59) {
        double v6 = 0.2;
      }
      else {
        double v6 = v9;
      }
    }
  }
  Text.Effect.BaseContent.layoutDirection.getter(v61);
  uint64_t result = outlined destroy of Text.Effect.BaseContent(v50, type metadata accessor for Text.Effect.BaseContent);
  char v52 = v61[0];
  int v53 = v57;
  double *v57 = v6;
  v53[1] = v7;
  v53[2] = v9 / (v8 + 0.1133);
  *((unsigned char *)v53 + 24) = v52;
  return result;
}

uint64_t GlimmerTextEffect.timing(for:from:to:duration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, double a4@<X5>, char a5@<W6>, double *a6@<X8>)
{
  uint64_t v12 = type metadata accessor for Text.Effect.BaseContent(0);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Text.Effect.BaseContent(a1, (uint64_t)v14);
  if (a2)
  {
    type metadata accessor for Text.Effect.ConcreteConfiguration<GlimmerTextEffect>(0, &lazy cache variable for type metadata for Text.Effect.ConcretePhase<GlimmerTextEffect>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for Text.Effect.ConcretePhase);
    uint64_t v15 = swift_dynamicCastClass();
    if (!v15)
    {
      LODWORD(a2) = 0;
      if (!a3) {
        goto LABEL_8;
      }
      goto LABEL_5;
    }
    LODWORD(a2) = *(unsigned __int8 *)(v15 + 16);
  }
  if (!a3)
  {
LABEL_8:
    int v17 = 0;
    return GlimmerTextEffect.Timing.init(content:duration:from:to:)((uint64_t)v14, a4, a5 & 1, a2, v17, a6);
  }
LABEL_5:
  type metadata accessor for Text.Effect.ConcreteConfiguration<GlimmerTextEffect>(0, &lazy cache variable for type metadata for Text.Effect.ConcretePhase<GlimmerTextEffect>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for Text.Effect.ConcretePhase);
  uint64_t v16 = swift_dynamicCastClass();
  if (!v16) {
    goto LABEL_8;
  }
  int v17 = *(unsigned __int8 *)(v16 + 16);
  return GlimmerTextEffect.Timing.init(content:duration:from:to:)((uint64_t)v14, a4, a5 & 1, a2, v17, a6);
}

float static Shader.glimmer(point:opacity:shine:bulge:)@<S0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>, double a6@<D4>)
{
  type metadata accessor for TextEffectClass();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v13 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  id v14 = objc_msgSend(self, sel_defaultLibraryWithBundle_, v13);

  type metadata accessor for _ContiguousArrayStorage<Text.Effect.Drawable.Fragment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Shader.Argument>);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_2461C6AA0;
  *(float *)&unsigned int v16 = a2;
  *(float *)&unsigned int v17 = a3;
  *(void *)(v15 + 32) = v16 | ((unint64_t)v17 << 32);
  *(void *)(v15 + 40) = 0;
  *(unsigned char *)(v15 + 48) = 1;
  *(float *)&unsigned int v18 = a4;
  *(void *)(v15 + 56) = v18;
  *(void *)(v15 + 64) = 0;
  *(unsigned char *)(v15 + 72) = 0;
  *(float *)&unsigned int v19 = a5;
  *(void *)(v15 + 80) = v19;
  *(void *)(v15 + 88) = 0;
  *(unsigned char *)(v15 + 96) = 0;
  float result = a6;
  *(void *)(v15 + 104) = LODWORD(result);
  *(void *)(v15 + 112) = 0;
  *(unsigned char *)(v15 + 120) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)a1 = v14;
  *(void *)(a1 + 8) = 0xD000000000000011;
  *(void *)(a1 + 16) = 0x8000000246220DD0;
  *(void *)(a1 + 24) = v15;
  return result;
}

uint64_t protocol witness for Text.Effect.Filter.apply(to:fragment:timing:state:context:in:) in conformance GlimmerTextEffect(long long *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  return specialized GlimmerTextEffect.apply(to:fragment:timing:state:context:in:)(a1, a2, a3, a4, a6);
}

double protocol witness for Text.Effect.Filter.drawingOutsets.getter in conformance GlimmerTextEffect()
{
  if (Edge.Set.contains(_:)(SwiftUI_Edge_top)) {
    double v0 = 8.0;
  }
  else {
    double v0 = 0.0;
  }
  Edge.Set.contains(_:)(SwiftUI_Edge_leading);
  Edge.Set.contains(_:)(SwiftUI_Edge_bottom);
  Edge.Set.contains(_:)(SwiftUI_Edge_trailing);
  return v0;
}

void *protocol witness for static Text.Effect.Base.animatorConfiguration(from:) in conformance GlimmerTextEffect@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  float result = specialized static GlimmerTextEffect.animatorConfiguration(from:)(a1);
  *a2 = result;
  a2[1] = v4;
  a2[2] = v5;
  return result;
}

uint64_t protocol witness for Text.Effect.Base.timing(for:from:to:duration:) in conformance GlimmerTextEffect@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, double a4@<X5>, char a5@<W6>, double *a6@<X8>)
{
  return GlimmerTextEffect.timing(for:from:to:duration:)(a1, a2, a3, a4, a5 & 1, a6);
}

uint64_t type metadata accessor for TextEffectClass()
{
  return self;
}

ValueMetadata *type metadata accessor for GlimmerTextEffect()
{
  return &type metadata for GlimmerTextEffect;
}

unint64_t lazy protocol witness table accessor for type Text.Effect.OnOffAnimatorPhase and conformance Text.Effect.OnOffAnimatorPhase()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.OnOffAnimatorPhase and conformance Text.Effect.OnOffAnimatorPhase;
  if (!lazy protocol witness table cache variable for type Text.Effect.OnOffAnimatorPhase and conformance Text.Effect.OnOffAnimatorPhase)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.OnOffAnimatorPhase and conformance Text.Effect.OnOffAnimatorPhase);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.OnOffAnimatorPhase and conformance Text.Effect.OnOffAnimatorPhase;
  if (!lazy protocol witness table cache variable for type Text.Effect.OnOffAnimatorPhase and conformance Text.Effect.OnOffAnimatorPhase)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.OnOffAnimatorPhase and conformance Text.Effect.OnOffAnimatorPhase);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.OnOffAnimatorPhase and conformance Text.Effect.OnOffAnimatorPhase;
  if (!lazy protocol witness table cache variable for type Text.Effect.OnOffAnimatorPhase and conformance Text.Effect.OnOffAnimatorPhase)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.OnOffAnimatorPhase and conformance Text.Effect.OnOffAnimatorPhase);
  }
  return result;
}

_UNKNOWN **associated type witness table accessor for Text.Effect.Base.Timing : Text.Effect.DurationProvider in GlimmerTextEffect()
{
  return &protocol witness table for GlimmerTextEffect.Timing;
}

unint64_t instantiation function for generic protocol witness table for GlimmerTextEffect(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type GlimmerTextEffect and conformance GlimmerTextEffect();
  *(void *)(a1 + 8) = result;
  return result;
}

void *specialized static GlimmerTextEffect.animatorConfiguration(from:)(uint64_t a1)
{
  if (one-time initialization token for blue != -1) {
    swift_once();
  }
  uint64_t v2 = static Color.blue;
  uint64_t v3 = *(void *)(a1 + 16);
  swift_retain();
  if (v3)
  {
    unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(0x756F726765726F66, 0xEF726F6C6F43646ELL);
    if (v5)
    {
      outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v4, (uint64_t)v13);
      type metadata accessor for NSObject();
      if (swift_dynamicCast())
      {
        id v6 = (id)CGColorForCoreColor(0, v12);

        if (v6)
        {
          swift_release();
          type metadata accessor for ColorBox<CGColorRef>();
          uint64_t v2 = (void *)swift_allocObject();
          v2[2] = v6;
        }
      }
    }
  }
  if (*(void *)(a1 + 16)
    && (unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(0x65676C7562, 0xE500000000000000), (v8 & 1) != 0)
    && (outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v7, (uint64_t)v13), (swift_dynamicCast() & 1) != 0))
  {
    if (!*(void *)(a1 + 16)) {
      return v2;
    }
  }
  else if (!*(void *)(a1 + 16))
  {
    return v2;
  }
  unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(0x656E696873, 0xE500000000000000);
  if (v10)
  {
    outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v9, (uint64_t)v13);
    swift_dynamicCast();
  }
  return v2;
}

uint64_t specialized closure #3 in GlimmerTextEffect.apply(to:fragment:timing:state:context:in:)(uint64_t *a1, long long *a2, long long *a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, double a8, double a9, double a10, double a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unsigned int a17, unsigned int a18, unsigned int a19, unsigned int a20)
{
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v30 = RBDrawingStateInit();
    type metadata accessor for GraphicsContext.Storage();
    swift_allocObject();
    uint64_t v31 = swift_retain();
    *a1 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v31, v30, 1, 0);
    swift_release();
  }
  uint64_t v32 = RBDrawingStateBeginLayer();
  type metadata accessor for GraphicsContext.Storage();
  swift_allocObject();
  uint64_t v33 = swift_retain();
  uint64_t v34 = (double *)GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v33, v32, 0, 1);
  swift_retain();
  v68.origin.x = a4;
  v68.origin.y = a5;
  v68.size.width = a6;
  v68.size.height = a7;
  BOOL IsNull = CGRectIsNull(v68);
  if (IsNull) {
    uint64_t v36 = 0;
  }
  else {
    uint64_t v36 = *(void *)&a4;
  }
  if (IsNull) {
    uint64_t v37 = 0;
  }
  else {
    uint64_t v37 = *(void *)&a5;
  }
  v66[0] = v36;
  v66[1] = v37;
  if (IsNull) {
    uint64_t v38 = 0;
  }
  else {
    uint64_t v38 = *(void *)&a6;
  }
  if (IsNull) {
    uint64_t v39 = 0;
  }
  else {
    uint64_t v39 = *(void *)&a7;
  }
  v66[2] = v38;
  v66[3] = v39;
  if (IsNull) {
    unsigned __int8 v40 = 6;
  }
  else {
    unsigned __int8 v40 = 0;
  }
  unsigned __int8 v67 = v40;
  long long v41 = a2[3];
  *(_OWORD *)int v60 = a2[2];
  *(_OWORD *)&v60[16] = v41;
  *(_OWORD *)&v60[25] = *(long long *)((char *)a2 + 57);
  long long v42 = a2[1];
  long long v58 = *a2;
  long long v59 = v42;
  uint64_t v62 = 256;
  long long v63 = 0u;
  long long v64 = 0u;
  char v65 = 0;
  GraphicsContext.draw(_:with:style:)((uint64_t)v66, (uint64_t)&v58, (uint64_t)&v62, v34);
  outlined consume of Path.Storage(v36, v37, v38, v39, v40);
  swift_release();
  RBDrawingStateClipLayer();
  swift_release();
  static Shader.glimmer(point:opacity:shine:bulge:)((uint64_t)&v58, a8, a9, 1.0, a11, a10);
  uint64_t v43 = (void *)v58;
  *(void *)int v60 = *(unsigned int *)v60;
  __asm { FMOV            V0.2D, #8.0 }
  *(_OWORD *)&v60[8] = _Q0;
  memset(&v60[24], 0, 24);
  uint64_t v61 = 3087007744;
  GraphicsContext.addFilter(_:options:)((uint64_t)&v58, 0, v49, v50, v51, v52, v53);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  long long v54 = a3[1];
  long long v58 = *a3;
  long long v59 = v54;
  long long v55 = a3[3];
  *(_OWORD *)int v60 = a3[2];
  *(_OWORD *)&v60[16] = v55;
  return Text.Effect.DrawingContent.draw(options:in:)(a17 | ((unint64_t)a18 << 32), a19 | ((unint64_t)a20 << 32), 0, a1);
}

uint64_t specialized GlimmerTextEffect.apply(to:fragment:timing:state:context:in:)(long long *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  long long v6 = a1[1];
  long long v583 = *a1;
  long long v584 = v6;
  long long v7 = a1[3];
  long long v585 = a1[2];
  long long v586 = v7;
  double v475 = *(double *)(a3 + 16);
  double v476 = *(double *)(a3 + 8);
  char v483 = *(unsigned char *)(a3 + 24);
  double v480 = *(double *)(a4 + 24);
  double v481 = *(double *)(a4 + 16);
  double v479 = *(double *)(a4 + 48);
  char v488 = *(unsigned char *)(a4 + 56);
  uint64_t v9 = *(void *)(a4 + 80);
  uint64_t v8 = *(void *)(a4 + 88);
  if (*(void *)(a4 + 64)
    && (type metadata accessor for Text.Effect.ConcreteConfiguration<GlimmerTextEffect>(0, &lazy cache variable for type metadata for Text.Effect.ConcretePhase<GlimmerTextEffect>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for Text.Effect.ConcretePhase), (uint64_t v10 = swift_dynamicCastClass()) != 0))
  {
    int v490 = *(unsigned __int8 *)(v10 + 16);
    if (!v9)
    {
LABEL_9:
      int v489 = 0;
      if (!v8) {
        goto LABEL_12;
      }
      goto LABEL_10;
    }
  }
  else
  {
    int v490 = 0;
    if (!v9) {
      goto LABEL_9;
    }
  }
  type metadata accessor for Text.Effect.ConcreteConfiguration<GlimmerTextEffect>(0, &lazy cache variable for type metadata for Text.Effect.ConcretePhase<GlimmerTextEffect>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for Text.Effect.ConcretePhase);
  uint64_t v11 = swift_dynamicCastClass();
  if (!v11) {
    goto LABEL_9;
  }
  int v489 = *(unsigned __int8 *)(v11 + 16);
  if (!v8)
  {
LABEL_12:
    double v477 = 0.4;
    double v478 = 0.1;
    if (one-time initialization token for blue != -1) {
      goto LABEL_323;
    }
    goto LABEL_13;
  }
LABEL_10:
  type metadata accessor for Text.Effect.ConcreteConfiguration<GlimmerTextEffect>(0, &lazy cache variable for type metadata for Text.Effect.ConcreteConfiguration<GlimmerTextEffect>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))type metadata accessor for Text.Effect.ConcreteConfiguration);
  uint64_t v12 = swift_dynamicCastClass();
  if (!v12) {
    goto LABEL_12;
  }
  id v13 = (uint64_t *)(v12 + 16);
  double v477 = *(double *)(v12 + 32);
  double v478 = *(double *)(v12 + 24);
  while (1)
  {
    uint64_t v495 = *v13;
    swift_retain();
    uint64_t v14 = *(void *)(*a5 + 32);
    if (v14 == 1)
    {
      uint64_t v15 = *(void *)(*a5 + 16);
      uint64_t v16 = *(void *)(v15 + 48);
      uint64_t v17 = *(void *)(v15 + 56);
      swift_retain();
      swift_retain();
    }
    else
    {
      uint64_t v17 = *(void *)(*a5 + 40);
      uint64_t v16 = *(void *)(*a5 + 32);
    }
    *(void *)&long long v577 = v16;
    *((void *)&v577 + 1) = v17;
    unsigned int v18 = *(float (**)(long long *))(*(void *)v495 + 104);
    swift_retain();
    outlined copy of EnvironmentValues?(v14);
    unsigned int v486 = v18(&v577);
    unsigned int v487 = v19;
    unsigned int v484 = v20;
    unsigned int v485 = v21;
    swift_release();
    swift_release();
    swift_release();
    v588[0] = *((void *)&v583 + 1);
    v587[2] = v586;
    v587[0] = v584;
    v587[1] = v585;
    double v22 = *MEMORY[0x263F001A0];
    double v23 = *(double *)(MEMORY[0x263F001A0] + 8);
    double v25 = *(double *)(MEMORY[0x263F001A0] + 16);
    double v24 = *(double *)(MEMORY[0x263F001A0] + 24);
    uint64_t v26 = *(void *)(*((void *)&v583 + 1) + 16);
    if (!v26) {
      break;
    }
    uint64_t v27 = *((void *)&v583 + 1) + 32;
    uint64_t v548 = v585;
    outlined retain of Text.Effect.DrawingContent((uint64_t)&v583);
    outlined retain of LinearGradient((uint64_t)v588);
    uint64_t v28 = 0;
    v510 = (uint64_t *)(v548 + 32);
    v516 = (uint64_t *)(v548 + 40);
    CGFloat y = v23;
    CGFloat x = v22;
    CGFloat height = v24;
    CGFloat width = v25;
    CGFloat r2_24 = v24;
    double r2_16 = v22;
    double r2_8 = v23;
    CGFloat v546 = v25;
    uint64_t v501 = v27;
    uint64_t v502 = v26;
    while (1)
    {
      uint64_t v33 = (long long *)(v27 + 144 * v28);
      long long v577 = *v33;
      long long v34 = v33[1];
      long long v35 = v33[2];
      long long v36 = v33[3];
      long long v580 = v33[4];
      *(_OWORD *)&v579[16] = v36;
      *(_OWORD *)v579 = v35;
      long long v578 = v34;
      long long v37 = v33[5];
      long long v38 = v33[6];
      long long v39 = v33[7];
      *(_OWORD *)&v582.CGFloat tx = v33[8];
      *(_OWORD *)&v582.CGFloat c = v39;
      *(_OWORD *)&v582.CGFloat a = v38;
      long long v581 = v37;
      if (*((double *)&v37 + 1) > 0.0009765625) {
        break;
      }
      outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v577, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
      CGFloat v29 = v22;
      CGFloat v30 = v23;
      CGFloat v31 = v25;
      CGFloat v32 = r2_24;
LABEL_20:
      ++v28;
      v597.origin.CGFloat y = y;
      v597.origin.CGFloat x = x;
      v597.size.CGFloat height = height;
      v597.size.CGFloat width = width;
      CGRect v598 = CGRectUnion(v597, *(CGRect *)&v29);
      CGFloat y = v598.origin.y;
      CGFloat x = v598.origin.x;
      CGFloat height = v598.size.height;
      CGFloat width = v598.size.width;
      outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v577, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
      if (v28 == v26)
      {
        outlined release of LinearGradient((uint64_t)v588);
        outlined release of Text.Effect.DrawingContent((uint64_t)&v583);
        CGFloat v376 = width;
        CGFloat v377 = y;
        CGFloat v378 = height;
        goto LABEL_238;
      }
    }
    uint64_t v507 = v28;
    long long v40 = v577;
    CGFloat v549 = *((double *)&v578 + 1);
    CGFloat v41 = *(double *)&v578;
    CGFloat v42 = *(double *)v579;
    uint64_t v44 = *(void *)&v579[24];
    CFIndex v43 = *(void *)&v579[16];
    switch(v581 >> 5)
    {
      case 1:
        outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v577, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
        outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v577, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
        swift_retain_n();
        long long v63 = (id)_CTLineGetRunAtIndex((const __CTLine *)(id)v40, *((CFIndex *)&v40 + 1));
        if (__OFSUB__(v44, v43)) {
          goto LABEL_318;
        }
        long long v64 = v63;
        v589.location = v43;
        v589.length = v44 - v43;
        CGRect ImageBounds = CTRunGetImageBounds((CTRunRef)v63, 0, v589);
        CGFloat v65 = ImageBounds.origin.x;
        CGFloat v66 = ImageBounds.origin.y;
        CGFloat v67 = ImageBounds.size.width;
        CGFloat v68 = ImageBounds.size.height;

        v572.CGFloat b = 0.0;
        v572.CGFloat c = 0.0;
        v572.CGFloat a = 1.0;
        v572.CGFloat d = -1.0;
        v572.CGFloat tx = v41;
        v572.CGFloat ty = v549;
        v600.origin.CGFloat x = v65;
        v600.origin.CGFloat y = v66;
        v600.size.CGFloat width = v67;
        v600.size.CGFloat height = v68;
        CGRect v601 = CGRectApplyAffineTransform(v600, &v572);
        CGFloat v69 = v601.origin.x;
        CGFloat v70 = v601.origin.y;
        CGFloat v71 = v601.size.width;
        CGFloat v72 = v601.size.height;
        outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v577, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
        v602.origin.CGFloat x = v69;
        v602.origin.CGFloat y = v70;
        v602.size.CGFloat width = v71;
        v602.size.CGFloat height = v72;
        CGRect v603 = CGRectInset(v602, -1.0, -1.0);
        CGFloat v46 = v603.origin.x;
        CGFloat v47 = v603.origin.y;
        CGFloat v73 = v603.size.width;
        double v5 = v603.size.height;
        outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v577, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
        uint64_t v74 = outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind;
        goto LABEL_233;
      case 2:
        double v45 = v25;
        CGFloat v46 = v22;
        CGFloat v47 = v23;
        double v62 = r2_24;
        switch(v579[0])
        {
          case 2:
            CGFloat v46 = *(double *)(v577 + 16);
            CGFloat v47 = *(double *)(v577 + 24);
            CGFloat v73 = *(double *)(v577 + 32);
            double v5 = *(double *)(v577 + 40);
            v371 = (void (*)(void *, uint64_t, uint64_t, uint64_t, unsigned __int8, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int8))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind;
            goto LABEL_232;
          case 3:
          case 4:
            goto LABEL_335;
          case 5:
            if (*(unsigned char *)(v577 + 16))
            {
              if (*(unsigned char *)(v577 + 16) == 1)
              {
                outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v577, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                RBPathGetBoundingRect();
              }
              else
              {
                outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v577, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                MEMORY[0x24C526C90](v40 + 24);
              }
LABEL_35:
              CGFloat v46 = v76;
              CGFloat v47 = v77;
            }
            else
            {
              v372 = *(void **)(v577 + 24);
              if (!v372) {
                goto LABEL_334;
              }
              v373 = v372;
              outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v577, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
              swift_retain();
              PathBoundingBoCGFloat x = CGPathGetPathBoundingBox(v373);
              CGFloat v46 = PathBoundingBox.origin.x;
              CGFloat v47 = PathBoundingBox.origin.y;
              CGFloat v73 = PathBoundingBox.size.width;
              double v5 = PathBoundingBox.size.height;

              v371 = outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind;
LABEL_232:
              uint64_t v74 = v371;
LABEL_233:
              outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v577, (void (*)(void, void, void, void, void, void, void, void, void, void, char))v74);
              double v62 = v5;
              double v45 = v73;
            }
            break;
          case 6:
            goto LABEL_234;
          default:
            CGFloat v47 = *((double *)&v577 + 1);
            CGFloat v46 = *(double *)&v577;
            double v62 = *((double *)&v578 + 1);
            double v45 = *(double *)&v578;
            goto LABEL_234;
        }
        goto LABEL_234;
      case 3:
        outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v577, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
        LODWORD(v75) = DWORD2(v40);
        objc_msgSend((id)v40, sel_boundingRectWithProgress_, v75);
        goto LABEL_35;
      case 4:
        swift_beginAccess();
        if (specialized Set.contains(_:)(v40, *v516)) {
          goto LABEL_45;
        }
        swift_beginAccess();
        uint64_t v48 = *v510;
        if (*(void *)(*v510 + 16) && (uint64_t v49 = specialized __RawDictionaryStorage.find<A>(_:)(v40), (v50 & 1) != 0))
        {
          uint64_t v51 = *(void **)(*(void *)(v48 + 56) + 8 * v49);
          swift_endAccess();
          uint64_t v52 = *(double (**)(void))((*MEMORY[0x263F8EED0] & *v51) + 0xE0);
          outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v577, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
          outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v577, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
          uint64_t v53 = v51;
          double v54 = v52();
          double v493 = v55;
          double v494 = v54;
          double v491 = v56;
          double v492 = v57;

          uint64_t v58 = *(void *)(*(void *)&v41 + 16);
          if (!v58) {
            goto LABEL_29;
          }
        }
        else
        {
          swift_endAccess();
LABEL_45:
          outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v577, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
          swift_bridgeObjectRetain();
          double v493 = 0.0;
          double v494 = 0.0;
          double v491 = 0.0;
          double v492 = 0.0;
          uint64_t v58 = *(void *)(*(void *)&v41 + 16);
          if (!v58)
          {
LABEL_29:
            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v577, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
            double v59 = v22;
            CGFloat v47 = v23;
            CGFloat v60 = v25;
            CGFloat v61 = r2_24;
            goto LABEL_216;
          }
        }
        uint64_t v97 = *(void *)&v41 + 32;
        outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v577, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
        uint64_t v98 = 0;
        CGFloat v527 = v23;
        CGFloat v528 = v22;
        CGFloat v525 = r2_24;
        CGFloat v526 = v25;
        uint64_t v508 = *(void *)&v41 + 32;
        uint64_t v509 = v58;
        do
        {
          long long v103 = (_OWORD *)(v97 + 144 * v98);
          *(_OWORD *)&v572.CGFloat a = *v103;
          long long v104 = v103[1];
          long long v105 = v103[2];
          long long v106 = v103[3];
          long long v574 = v103[4];
          long long v573 = v106;
          *(_OWORD *)&v572.CGFloat tx = v105;
          *(_OWORD *)&v572.CGFloat c = v104;
          long long v107 = v103[5];
          long long v108 = v103[6];
          long long v109 = v103[7];
          *(_OWORD *)&v576.CGFloat tx = v103[8];
          *(_OWORD *)&v576.CGFloat c = v109;
          *(_OWORD *)&v576.CGFloat a = v108;
          long long v575 = v107;
          if (*((double *)&v107 + 1) <= 0.0009765625)
          {
            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v572, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
            CGFloat v99 = v22;
            CGFloat v100 = v23;
            CGFloat v101 = v25;
            CGFloat v102 = r2_24;
          }
          else
          {
            uint64_t v517 = v98;
            Swift::UInt64 v110 = *(void *)&v572.a;
            CFIndex v111 = *(void *)&v572.b;
            CGFloat c = v572.c;
            CGFloat d = v572.d;
            CGFloat tx = v572.tx;
            uint64_t v116 = *((void *)&v573 + 1);
            CFIndex v115 = v573;
            unsigned __int8 v117 = v575;
            switch(v575 >> 5)
            {
              case 1:
                outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v572, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v572, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                swift_retain_n();
                uint64_t v134 = (id)_CTLineGetRunAtIndex((const __CTLine *)(id)v110, v111);
                if (__OFSUB__(v116, v115)) {
                  goto LABEL_315;
                }
                uint64_t v135 = v134;
                v591.location = v115;
                v591.length = v116 - v115;
                CGRect v612 = CTRunGetImageBounds((CTRunRef)v134, 0, v591);
                CGFloat v136 = v612.origin.x;
                CGFloat v137 = v612.origin.y;
                CGFloat v138 = v612.size.width;
                CGFloat v139 = v612.size.height;

                v567.CGFloat b = 0.0;
                v567.CGFloat c = 0.0;
                v567.CGFloat a = 1.0;
                v567.CGFloat d = -1.0;
                v567.CGFloat tx = c;
                v567.CGFloat ty = d;
                v613.origin.CGFloat x = v136;
                v613.origin.CGFloat y = v137;
                v613.size.CGFloat width = v138;
                v613.size.CGFloat height = v139;
                CGRect v614 = CGRectApplyAffineTransform(v613, &v567);
                CGFloat v140 = v614.origin.x;
                double v5 = v614.origin.y;
                CGFloat v141 = v614.size.width;
                CGFloat v142 = v614.size.height;
                outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v572, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                v615.origin.CGFloat x = v140;
                v615.origin.CGFloat y = v5;
                v615.size.CGFloat width = v141;
                v615.size.CGFloat height = v142;
                CGRect v616 = CGRectInset(v615, -1.0, -1.0);
                CGFloat a = v616.origin.x;
                CGFloat b = v616.origin.y;
                CGFloat v143 = v616.size.width;
                double v129 = v616.size.height;
                outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v572, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                uint64_t v144 = outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind;
                goto LABEL_212;
              case 2:
                CGFloat a = v22;
                CGFloat b = v23;
                CGFloat v121 = v546;
                double v129 = r2_24;
                switch(LOBYTE(v572.tx))
                {
                  case 2:
                    CGFloat a = *(double *)(*(void *)&v572.a + 16);
                    CGFloat b = *(double *)(*(void *)&v572.a + 24);
                    CGFloat v143 = *(double *)(*(void *)&v572.a + 32);
                    double v129 = *(double *)(*(void *)&v572.a + 40);
                    v355 = (void (*)(void *, uint64_t, uint64_t, uint64_t, unsigned __int8, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int8))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind;
                    goto LABEL_211;
                  case 3:
                  case 4:
                    goto LABEL_335;
                  case 5:
                    if (*(unsigned char *)(*(void *)&v572.a + 16))
                    {
                      if (*(unsigned char *)(*(void *)&v572.a + 16) == 1)
                      {
                        outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v572, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                        RBPathGetBoundingRect();
                      }
                      else
                      {
                        outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v572, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                        MEMORY[0x24C526C90](v110 + 24);
                      }
LABEL_60:
                      CGFloat a = v131;
                      CGFloat b = v132;
                      double v129 = v133;
                    }
                    else
                    {
                      v358 = *(void **)(*(void *)&v572.a + 24);
                      if (!v358) {
                        goto LABEL_333;
                      }
                      v359 = v358;
                      outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v572, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                      swift_retain();
                      CGRect v673 = CGPathGetPathBoundingBox(v359);
                      CGFloat a = v673.origin.x;
                      CGFloat b = v673.origin.y;
                      CGFloat v143 = v673.size.width;
                      double v129 = v673.size.height;

                      v355 = outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind;
LABEL_211:
                      uint64_t v144 = v355;
LABEL_212:
                      outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v572, (void (*)(void, void, void, void, void, void, void, void, void, void, char))v144);
                      CGFloat v121 = v143;
                    }
                    break;
                  case 6:
                    goto LABEL_213;
                  default:
                    CGFloat a = v572.a;
                    CGFloat b = v572.b;
                    CGFloat v121 = v572.c;
                    double v129 = v572.d;
                    goto LABEL_213;
                }
                goto LABEL_213;
              case 3:
                outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v572, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                LODWORD(v130) = v111;
                objc_msgSend((id)v110, sel_boundingRectWithProgress_, v130);
                goto LABEL_60;
              case 4:
                uint64_t r1 = *((void *)&v574 + 1);
                uint64_t r2 = v574;
                CGFloat ty = v572.ty;
                uint64_t v122 = *v516;
                if (*(void *)(*v516 + 16)
                  && (Hasher.init(_seed:)(),
                      Hasher._combine(_:)(v110),
                      Swift::Int v123 = Hasher._finalize()(),
                      uint64_t v124 = -1 << *(unsigned char *)(v122 + 32),
                      unint64_t v125 = v123 & ~v124,
                      uint64_t v126 = v122 + 56,
                      ((*(void *)(v122 + 56 + ((v125 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v125) & 1) != 0))
                {
                  uint64_t v127 = *(void *)(v122 + 48);
                  if (*(void *)(v127 + 8 * v125) == v110)
                  {
                    uint64_t v128 = *(void *)&ty;
                    goto LABEL_69;
                  }
                  uint64_t v356 = ~v124;
                  unint64_t v357 = (v125 + 1) & v356;
                  uint64_t v128 = *(void *)&ty;
                  if ((*(void *)(v126 + ((v357 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v357))
                  {
                    while (*(void *)(v127 + 8 * v357) != v110)
                    {
                      unint64_t v357 = (v357 + 1) & v356;
                      if (((*(void *)(v126 + ((v357 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v357) & 1) == 0) {
                        goto LABEL_64;
                      }
                    }
                    goto LABEL_69;
                  }
                }
                else
                {
                  uint64_t v128 = *(void *)&ty;
                }
LABEL_64:
                swift_beginAccess();
                uint64_t v145 = *v510;
                if (*(void *)(*v510 + 16))
                {
                  uint64_t v146 = specialized __RawDictionaryStorage.find<A>(_:)(v110);
                  if (v147)
                  {
                    v148 = *(void **)(*(void *)(v145 + 56) + 8 * v146);
                    swift_endAccess();
                    v149 = *(double (**)(void))((*MEMORY[0x263F8EED0] & *v148) + 0xE0);
                    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v572, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v572, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                    v150 = v148;
                    double v151 = v149();
                    double v499 = v152;
                    double v500 = v151;
                    double v497 = v153;
                    double v498 = v154;

                    uint64_t v155 = *(void *)(*(void *)&c + 16);
                    if (!v155) {
                      goto LABEL_67;
                    }
                    goto LABEL_70;
                  }
                }
                swift_endAccess();
LABEL_69:
                outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v572, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind((id)v110, v111, *(uint64_t *)&c, *(uint64_t *)&d, LOBYTE(tx), v128, v115, v116, r2, r1, v117);
                double v499 = 0.0;
                double v500 = 0.0;
                double v497 = 0.0;
                double v498 = 0.0;
                uint64_t v155 = *(void *)(*(void *)&c + 16);
                if (!v155)
                {
LABEL_67:
                  outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v572, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                  double v156 = v22;
                  CGFloat b = v23;
                  CGFloat v157 = v25;
                  double v129 = r2_24;
                  goto LABEL_183;
                }
LABEL_70:
                uint64_t v158 = *(void *)&c + 32;
                outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v572, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                uint64_t v159 = 0;
                r2CGFloat a = v22;
                r1CGFloat a = v23;
                CGFloat v537 = r2_24;
                CGFloat v538 = v25;
                uint64_t v518 = *(void *)&c + 32;
                uint64_t v519 = v155;
                do
                {
                  v164 = (_OWORD *)(v158 + 144 * v159);
                  *(_OWORD *)&v567.CGFloat a = *v164;
                  long long v165 = v164[1];
                  long long v166 = v164[2];
                  long long v167 = v164[3];
                  long long v569 = v164[4];
                  long long v568 = v167;
                  *(_OWORD *)&v567.CGFloat tx = v166;
                  *(_OWORD *)&v567.CGFloat c = v165;
                  long long v168 = v164[5];
                  long long v169 = v164[6];
                  long long v170 = v164[7];
                  *(_OWORD *)&v571.CGFloat tx = v164[8];
                  *(_OWORD *)&v571.CGFloat c = v170;
                  *(_OWORD *)&v571.CGFloat a = v169;
                  long long v570 = v168;
                  if (*((double *)&v168 + 1) <= 0.0009765625)
                  {
                    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v567, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                    CGFloat v160 = v22;
                    CGFloat v161 = v23;
                    CGFloat v162 = v25;
                    CGFloat v163 = r2_24;
                  }
                  else
                  {
                    uint64_t v524 = v159;
                    Swift::UInt64 v171 = *(void *)&v567.a;
                    CFIndex v172 = *(void *)&v567.b;
                    CGFloat v173 = v567.c;
                    CGFloat v174 = v567.d;
                    CGFloat v175 = v567.tx;
                    uint64_t v177 = *((void *)&v568 + 1);
                    CFIndex v176 = v568;
                    unsigned __int8 v178 = v570;
                    switch(v570 >> 5)
                    {
                      case 1:
                        outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v567, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                        outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v567, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                        swift_retain_n();
                        v213 = (id)_CTLineGetRunAtIndex((const __CTLine *)(id)v171, v172);
                        if (__OFSUB__(v177, v176)) {
                          goto LABEL_311;
                        }
                        v214 = v213;
                        v593.location = v176;
                        v593.length = v177 - v176;
                        CGRect v626 = CTRunGetImageBounds((CTRunRef)v213, 0, v593);
                        CGFloat v215 = v626.origin.x;
                        CGFloat v216 = v626.origin.y;
                        CGFloat v217 = v626.size.width;
                        CGFloat v218 = v626.size.height;

                        v562.CGFloat b = 0.0;
                        v562.CGFloat c = 0.0;
                        v562.CGFloat a = 1.0;
                        v562.CGFloat d = -1.0;
                        v562.CGFloat tx = v173;
                        v562.CGFloat ty = v174;
                        v627.origin.CGFloat x = v215;
                        v627.origin.CGFloat y = v216;
                        v627.size.CGFloat width = v217;
                        v627.size.CGFloat height = v218;
                        CGRect v628 = CGRectApplyAffineTransform(v627, &v562);
                        CGFloat v219 = v628.origin.x;
                        double v5 = v628.origin.y;
                        CGFloat v220 = v628.size.width;
                        CGFloat v221 = v628.size.height;
                        outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v567, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                        v629.origin.CGFloat x = v219;
                        v629.origin.CGFloat y = v5;
                        v629.size.CGFloat width = v220;
                        v629.size.CGFloat height = v221;
                        CGRect v630 = CGRectInset(v629, -1.0, -1.0);
                        double v179 = v630.origin.x;
                        double v180 = v630.origin.y;
                        double v181 = v630.size.width;
                        double v182 = v630.size.height;
                        outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v567, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                        v222 = outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind;
                        goto LABEL_170;
                      case 2:
                        switch(LOBYTE(v567.tx))
                        {
                          case 2:
                            double v179 = *(double *)(*(void *)&v567.a + 16);
                            double v180 = *(double *)(*(void *)&v567.a + 24);
                            double v181 = *(double *)(*(void *)&v567.a + 32);
                            double v182 = *(double *)(*(void *)&v567.a + 40);
                            goto LABEL_168;
                          case 3:
                          case 4:
                            goto LABEL_335;
                          case 5:
                            if (*(unsigned char *)(*(void *)&v567.a + 16))
                            {
                              if (*(unsigned char *)(*(void *)&v567.a + 16) == 1)
                              {
                                outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v567, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                RBPathGetBoundingRect();
                              }
                              else
                              {
                                outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v567, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                MEMORY[0x24C526C90](v171 + 24);
                              }
LABEL_91:
                              double v179 = v209;
                              double v180 = v210;
                              double v181 = v211;
                              double v182 = v212;
                            }
                            else
                            {
                              v325 = *(void **)(*(void *)&v567.a + 24);
                              if (!v325) {
                                goto LABEL_332;
                              }
                              v326 = v325;
                              outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v567, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                              swift_retain();
                              CGRect v662 = CGPathGetPathBoundingBox(v326);
                              double v179 = v662.origin.x;
                              double v180 = v662.origin.y;
                              double v181 = v662.size.width;
                              double v182 = v662.size.height;

                              v322 = outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind;
LABEL_169:
                              v222 = v322;
LABEL_170:
                              outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v567, (void (*)(void, void, void, void, void, void, void, void, void, void, char))v222);
                            }
                            break;
                          case 6:
                            goto LABEL_94;
                          default:
                            double v179 = v567.a;
                            double v180 = v567.b;
                            double v181 = v567.c;
                            double v182 = v567.d;
LABEL_168:
                            v322 = (void (*)(void *, uint64_t, uint64_t, uint64_t, unsigned __int8, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int8))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind;
                            goto LABEL_169;
                        }
                        goto LABEL_171;
                      case 3:
                        outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v567, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                        LODWORD(v208) = v172;
                        objc_msgSend((id)v171, sel_boundingRectWithProgress_, v208);
                        goto LABEL_91;
                      case 4:
                        uint64_t v533 = *((void *)&v569 + 1);
                        uint64_t v535 = v569;
                        CGFloat v551 = v567.ty;
                        uint64_t v201 = *v516;
                        if (*(void *)(*v516 + 16)
                          && (Hasher.init(_seed:)(),
                              Hasher._combine(_:)(v171),
                              Swift::Int v202 = Hasher._finalize()(),
                              uint64_t v203 = -1 << *(unsigned char *)(v201 + 32),
                              unint64_t v204 = v202 & ~v203,
                              uint64_t v205 = v201 + 56,
                              ((*(void *)(v201 + 56 + ((v204 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v204) & 1) != 0))
                        {
                          uint64_t v206 = *(void *)(v201 + 48);
                          if (*(void *)(v206 + 8 * v204) == v171)
                          {
                            uint64_t v207 = *(void *)&v551;
                            goto LABEL_101;
                          }
                          uint64_t v323 = ~v203;
                          unint64_t v324 = (v204 + 1) & v323;
                          uint64_t v207 = *(void *)&v551;
                          if ((*(void *)(v205 + ((v324 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v324))
                          {
                            while (*(void *)(v206 + 8 * v324) != v171)
                            {
                              unint64_t v324 = (v324 + 1) & v323;
                              if (((*(void *)(v205 + ((v324 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v324) & 1) == 0) {
                                goto LABEL_96;
                              }
                            }
                            goto LABEL_101;
                          }
                        }
                        else
                        {
                          uint64_t v207 = *(void *)&v551;
                        }
LABEL_96:
                        swift_beginAccess();
                        uint64_t v223 = *v510;
                        if (*(void *)(*v510 + 16))
                        {
                          uint64_t v224 = specialized __RawDictionaryStorage.find<A>(_:)(v171);
                          if (v225)
                          {
                            v226 = *(void **)(*(void *)(v223 + 56) + 8 * v224);
                            swift_endAccess();
                            v227 = *(double (**)(void))((*MEMORY[0x263F8EED0] & *v226) + 0xE0);
                            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v567, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v567, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                            v228 = v226;
                            double v229 = v227();
                            double v505 = v230;
                            double v506 = v229;
                            double v503 = v231;
                            double v504 = v232;

                            uint64_t v233 = *(void *)(*(void *)&v173 + 16);
                            if (!v233) {
                              goto LABEL_99;
                            }
                            goto LABEL_102;
                          }
                        }
                        swift_endAccess();
LABEL_101:
                        outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v567, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                        outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind((id)v171, v172, *(uint64_t *)&v173, *(uint64_t *)&v174, LOBYTE(v175), v207, v176, v177, v535, v533, v178);
                        double v505 = 0.0;
                        double v506 = 0.0;
                        double v503 = 0.0;
                        double v504 = 0.0;
                        uint64_t v233 = *(void *)(*(void *)&v173 + 16);
                        if (!v233)
                        {
LABEL_99:
                          outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v567, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                          double v179 = v22;
                          double v180 = v23;
                          double v181 = v25;
                          double v182 = r2_24;
                          goto LABEL_160;
                        }
LABEL_102:
                        uint64_t v234 = *(void *)&v173 + 32;
                        outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v567, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                        uint64_t v235 = 0;
                        double v179 = v22;
                        double v180 = v23;
                        double v181 = v25;
                        double v182 = r2_24;
                        uint64_t v529 = *(void *)&v173 + 32;
                        uint64_t v530 = v233;
                        do
                        {
                          v240 = (_OWORD *)(v234 + 144 * v235);
                          *(_OWORD *)&v562.CGFloat a = *v240;
                          long long v241 = v240[1];
                          long long v242 = v240[2];
                          long long v243 = v240[4];
                          long long v563 = v240[3];
                          long long v564 = v243;
                          *(_OWORD *)&v562.CGFloat c = v241;
                          *(_OWORD *)&v562.CGFloat tx = v242;
                          long long v244 = v240[5];
                          long long v245 = v240[6];
                          long long v246 = v240[8];
                          *(_OWORD *)&v566.CGFloat c = v240[7];
                          *(_OWORD *)&v566.CGFloat tx = v246;
                          long long v565 = v244;
                          *(_OWORD *)&v566.CGFloat a = v245;
                          if (*((double *)&v244 + 1) <= 0.0009765625)
                          {
                            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v562, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                            CGFloat v236 = v22;
                            CGFloat v237 = v23;
                            CGFloat v238 = v25;
                            CGFloat v239 = r2_24;
                          }
                          else
                          {
                            Swift::UInt64 v247 = *(void *)&v562.a;
                            CFIndex v248 = *(void *)&v562.b;
                            CGFloat v249 = v562.c;
                            CGFloat v552 = v562.d;
                            CGFloat v250 = v562.tx;
                            uint64_t v252 = *((void *)&v563 + 1);
                            CFIndex v251 = v563;
                            unsigned __int8 v253 = v565;
                            uint64_t v254 = *(uint64_t *)&v562.c;
                            double v534 = v180;
                            double v536 = v179;
                            double v531 = v182;
                            double v532 = v181;
                            switch(v565 >> 5)
                            {
                              case 1:
                                outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v562, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v562, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                swift_retain_n();
                                v269 = (id)_CTLineGetRunAtIndex((const __CTLine *)(id)v247, v248);
                                if (__OFSUB__(v252, v251))
                                {
                                  __break(1u);
LABEL_311:
                                  __break(1u);
LABEL_312:
                                  __break(1u);
                                  goto LABEL_313;
                                }
                                v270 = v269;
                                v594.location = v251;
                                v594.length = v252 - v251;
                                CGRect v633 = CTRunGetImageBounds((CTRunRef)v269, 0, v594);
                                CGFloat v271 = v633.origin.x;
                                CGFloat v272 = v633.origin.y;
                                CGFloat v273 = v633.size.width;
                                CGFloat v274 = v633.size.height;

                                v555.CGFloat b = 0.0;
                                v555.CGFloat c = 0.0;
                                v555.CGFloat a = 1.0;
                                v555.CGFloat d = -1.0;
                                v555.CGFloat tx = v249;
                                v555.CGFloat ty = v552;
                                v634.origin.CGFloat x = v271;
                                v634.origin.CGFloat y = v272;
                                v634.size.CGFloat width = v273;
                                v634.size.CGFloat height = v274;
                                CGRect v635 = CGRectApplyAffineTransform(v634, &v555);
                                CGFloat v275 = v635.origin.x;
                                double v5 = v635.origin.y;
                                CGFloat v276 = v635.size.width;
                                CGFloat v277 = v635.size.height;
                                outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v562, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                                v636.origin.CGFloat x = v275;
                                v636.origin.CGFloat y = v5;
                                v636.size.CGFloat width = v276;
                                v636.size.CGFloat height = v277;
                                CGRect v637 = CGRectInset(v636, -1.0, -1.0);
                                double MinX = v637.origin.x;
                                double v256 = v637.origin.y;
                                double v25 = v637.size.width;
                                double v263 = v637.size.height;
                                outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v562, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                                v278 = outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind;
LABEL_156:
                                outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v562, (void (*)(void, void, void, void, void, void, void, void, void, void, char))v278);
                                goto LABEL_157;
                              case 2:
                                double MinX = v22;
                                double v256 = v23;
                                double v263 = r2_24;
                                switch(LOBYTE(v562.tx))
                                {
                                  case 2:
                                    double MinX = *(double *)(*(void *)&v562.a + 16);
                                    double v256 = *(double *)(*(void *)&v562.a + 24);
                                    double v25 = *(double *)(*(void *)&v562.a + 32);
                                    double v263 = *(double *)(*(void *)&v562.a + 40);
                                    v318 = (void (*)(void *, uint64_t, uint64_t, uint64_t, unsigned __int8, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int8))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind;
                                    goto LABEL_155;
                                  case 3:
                                  case 4:
                                    goto LABEL_335;
                                  case 5:
                                    if (*(unsigned char *)(*(void *)&v562.a + 16))
                                    {
                                      if (*(unsigned char *)(*(void *)&v562.a + 16) == 1)
                                      {
                                        outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v562, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                        RBPathGetBoundingRect();
                                      }
                                      else
                                      {
                                        outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v562, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                        MEMORY[0x24C526C90](v247 + 24);
                                      }
LABEL_119:
                                      double MinX = v265;
                                      double v256 = v266;
                                      double v25 = v267;
                                      double v263 = v268;
                                      goto LABEL_157;
                                    }
                                    v319 = *(void **)(*(void *)&v562.a + 24);
                                    if (!v319) {
                                      goto LABEL_331;
                                    }
                                    v320 = v319;
                                    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v562, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                    swift_retain();
                                    CGRect v652 = CGPathGetPathBoundingBox(v320);
                                    double MinX = v652.origin.x;
                                    double v256 = v652.origin.y;
                                    double v25 = v652.size.width;
                                    double v263 = v652.size.height;

                                    v318 = outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind;
LABEL_155:
                                    v278 = v318;
                                    break;
                                  case 6:
                                    goto LABEL_157;
                                  default:
                                    double MinX = v562.a;
                                    double v256 = v562.b;
                                    double v25 = v562.c;
                                    double v263 = v562.d;
                                    goto LABEL_157;
                                }
                                goto LABEL_156;
                              case 3:
                                outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v562, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                LODWORD(v264) = v248;
                                objc_msgSend((id)v247, sel_boundingRectWithProgress_, v264);
                                goto LABEL_119;
                              case 4:
                                uint64_t v511 = *((void *)&v564 + 1);
                                uint64_t v512 = v564;
                                uint64_t v514 = *(void *)&v562.ty;
                                uint64_t v257 = *v516;
                                if (!*(void *)(*v516 + 16)) {
                                  goto LABEL_122;
                                }
                                Hasher.init(_seed:)();
                                Hasher._combine(_:)(v247);
                                Swift::Int v258 = Hasher._finalize()();
                                uint64_t v259 = -1 << *(unsigned char *)(v257 + 32);
                                unint64_t v260 = v258 & ~v259;
                                if (((*(void *)(v257 + 56 + ((v260 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v260) & 1) == 0) {
                                  goto LABEL_122;
                                }
                                uint64_t v261 = *(void *)(v257 + 48);
                                if (*(void *)(v261 + 8 * v260) == v247) {
                                  goto LABEL_127;
                                }
                                uint64_t v262 = ~v259;
                                while (1)
                                {
                                  unint64_t v260 = (v260 + 1) & v262;
                                  if (((*(void *)(v257 + 56 + ((v260 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v260) & 1) == 0) {
                                    break;
                                  }
                                  if (*(void *)(v261 + 8 * v260) == v247) {
                                    goto LABEL_127;
                                  }
                                }
LABEL_122:
                                swift_beginAccess();
                                uint64_t v279 = *v510;
                                if (*(void *)(*v510 + 16)
                                  && (uint64_t v280 = specialized __RawDictionaryStorage.find<A>(_:)(v247), (v281 & 1) != 0))
                                {
                                  v282 = *(void **)(*(void *)(v279 + 56) + 8 * v280);
                                  swift_endAccess();
                                  v283 = *(double (**)(void))((*MEMORY[0x263F8EED0] & *v282) + 0xE0);
                                  outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v562, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                  outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v562, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                  v284 = v282;
                                  double v285 = v283();
                                  double v513 = v286;
                                  double v515 = v285;
                                  double v553 = v287;
                                  double v5 = v288;

                                  uint64_t v289 = *(void *)(v254 + 16);
                                  if (!v289) {
                                    goto LABEL_125;
                                  }
                                }
                                else
                                {
                                  swift_endAccess();
LABEL_127:
                                  outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v562, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                  outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind((id)v247, v248, v254, *(uint64_t *)&v552, LOBYTE(v250), v514, v251, v252, v512, v511, v253);
                                  double v513 = 0.0;
                                  double v515 = 0.0;
                                  double v553 = 0.0;
                                  double v5 = 0.0;
                                  uint64_t v289 = *(void *)(v254 + 16);
                                  if (!v289)
                                  {
LABEL_125:
                                    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v562, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                                    double MinX = v22;
                                    double v256 = v23;
                                    double v263 = r2_24;
                                    goto LABEL_132;
                                  }
                                }
                                v290 = (_OWORD *)(v254 + 32);
                                outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v562, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                uint64_t v291 = v289 - 1;
                                double MinX = v22;
                                double v256 = v23;
                                double v263 = r2_24;
                                while (1)
                                {
                                  *(_OWORD *)&v555.CGFloat a = *v290;
                                  long long v292 = v290[1];
                                  long long v293 = v290[2];
                                  long long v294 = v290[4];
                                  long long v556 = v290[3];
                                  long long v557 = v294;
                                  *(_OWORD *)&v555.CGFloat c = v292;
                                  *(_OWORD *)&v555.CGFloat tx = v293;
                                  long long v295 = v290[5];
                                  long long v296 = v290[6];
                                  long long v297 = v290[8];
                                  long long v560 = v290[7];
                                  long long v561 = v297;
                                  long long v558 = v295;
                                  long long v559 = v296;
                                  outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v555, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                  Text.Effect.ResolvedDrawing.Operation.drawingBounds(context:)((uint64_t)v587);
                                  v687.origin.CGFloat x = v298;
                                  v687.origin.CGFloat y = v299;
                                  v687.size.CGFloat width = v300;
                                  v687.size.CGFloat height = v301;
                                  v638.origin.CGFloat x = MinX;
                                  v638.origin.CGFloat y = v256;
                                  v638.size.CGFloat width = v25;
                                  v638.size.CGFloat height = v263;
                                  CGRect v639 = CGRectUnion(v638, v687);
                                  double MinX = v639.origin.x;
                                  double v256 = v639.origin.y;
                                  double v25 = v639.size.width;
                                  double v263 = v639.size.height;
                                  outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v555, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                                  if (!v291) {
                                    break;
                                  }
                                  --v291;
                                  v290 += 9;
                                }
                                outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v562, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                                outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v562, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
LABEL_132:
                                v640.origin.CGFloat x = MinX;
                                v640.origin.CGFloat y = v256;
                                v640.size.CGFloat width = v25;
                                v640.size.CGFloat height = v263;
                                if (CGRectIsNull(v640)) {
                                  goto LABEL_157;
                                }
                                v641.origin.CGFloat x = MinX;
                                v641.origin.CGFloat y = v256;
                                v641.size.CGFloat width = v25;
                                v641.size.CGFloat height = v263;
                                CGRect v642 = CGRectStandardize(v641);
                                if (v553 == v5) {
                                  double v302 = v5;
                                }
                                else {
                                  double v302 = v553;
                                }
                                double MinX = v642.origin.x - v302;
                                double v256 = v642.origin.y - v515;
                                double v25 = v642.size.width - (-v5 - v553);
                                double v263 = v642.size.height - (-v513 - v515);
                                v643.origin.CGFloat x = v642.origin.x - v302;
                                v643.origin.CGFloat y = v642.origin.y - v515;
                                v643.size.CGFloat width = v25;
                                v643.size.CGFloat height = v263;
                                if (CGRectGetWidth(v643) < 0.0)
                                {
                                  double MinX = r2_16;
                                  double v256 = r2_8;
                                  double v25 = v546;
                                  goto LABEL_138;
                                }
                                v651.origin.CGFloat x = MinX;
                                v651.origin.CGFloat y = v256;
                                v651.size.CGFloat width = v25;
                                v651.size.CGFloat height = v263;
                                if (CGRectGetHeight(v651) < 0.0)
                                {
                                  double MinX = r2_16;
                                  double v256 = r2_8;
                                  double v25 = v546;
                                  double v263 = r2_24;
                                }
                                goto LABEL_157;
                              default:
                                if ((void)v563 != *((void *)&v563 + 1))
                                {
                                  if (*((uint64_t *)&v563 + 1) < (uint64_t)v563) {
                                    goto LABEL_312;
                                  }
                                  if ((uint64_t)v563 < *((uint64_t *)&v563 + 1))
                                  {
                                    outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v562, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                    double MinX = v22;
                                    double v256 = v23;
                                    double v263 = r2_24;
                                    while (1)
                                    {
                                      if (LOBYTE(v249))
                                      {
                                        outlined copy of Text.Layout.Line.Line((void *)v247, v248, 1);
                                        id v317 = (id)_NSTextLineFragmentGetCTLine((void *)v247);
                                        if (!v317)
                                        {
                                          __break(1u);
LABEL_327:
                                          swift_once();
LABEL_259:
                                          double v395 = MinX - *(double *)&static GlimmerTextEffect.effectWidth;
                                          goto LABEL_277;
                                        }
                                        v303 = v317;
                                        outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v562, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                                      }
                                      else
                                      {
                                        outlined copy of Text.Layout.Line.Line((void *)v247, v248, 0);
                                        outlined copy of Text.Layout.Line.Line((void *)v247, v248, 0);

                                        swift_release();
                                        v303 = (void *)v247;
                                      }
                                      CFIndex v304 = v251 + 1;
                                      swift_retain();
                                      v305 = v303;
                                      v306 = (id)_CTLineGetRunAtIndex(v305, v251);
                                      v595.location = 0;
                                      v595.length = 0;
                                      CGRect v644 = CTRunGetImageBounds((CTRunRef)v306, 0, v595);
                                      CGFloat v307 = v644.origin.x;
                                      CGFloat v308 = v644.origin.y;
                                      CGFloat v309 = v644.size.width;
                                      CGFloat v310 = v644.size.height;

                                      v555.CGFloat b = 0.0;
                                      v555.CGFloat c = 0.0;
                                      v555.CGFloat a = 1.0;
                                      v555.CGFloat d = -1.0;
                                      v555.CGFloat tx = v552;
                                      v555.CGFloat ty = v250;
                                      v645.origin.CGFloat x = v307;
                                      v645.origin.CGFloat y = v308;
                                      v645.size.CGFloat width = v309;
                                      v645.size.CGFloat height = v310;
                                      CGRect v646 = CGRectApplyAffineTransform(v645, &v555);
                                      CGFloat v311 = v646.origin.x;
                                      CGFloat v312 = v646.origin.y;
                                      CGFloat v313 = v646.size.width;
                                      CGFloat v314 = v646.size.height;
                                      swift_release();

                                      v647.origin.CGFloat x = v311;
                                      v647.origin.CGFloat y = v312;
                                      v647.size.CGFloat width = v313;
                                      v647.size.CGFloat height = v314;
                                      CGRect v648 = CGRectInset(v647, -1.0, -1.0);
                                      double v5 = v648.origin.x;
                                      double v179 = v648.origin.y;
                                      double v180 = v648.size.width;
                                      CGFloat v315 = v648.size.height;
                                      swift_release();

                                      v649.origin.CGFloat x = MinX;
                                      v649.origin.CGFloat y = v256;
                                      v649.size.CGFloat width = v25;
                                      v649.size.CGFloat height = v263;
                                      v688.origin.CGFloat x = v5;
                                      v688.origin.CGFloat y = v179;
                                      v688.size.CGFloat width = v180;
                                      v688.size.CGFloat height = v315;
                                      CGRect v650 = CGRectUnion(v649, v688);
                                      double MinX = v650.origin.x;
                                      double v256 = v650.origin.y;
                                      double v25 = v650.size.width;
                                      double v263 = v650.size.height;
                                      CFIndex v251 = v304;
                                      _ZF = v252 == v304;
                                      CGFloat v249 = *(double *)&v254;
                                      if (_ZF) {
                                        goto LABEL_157;
                                      }
                                    }
                                  }
LABEL_313:
                                  __break(1u);
LABEL_314:
                                  __break(1u);
LABEL_315:
                                  __break(1u);
LABEL_316:
                                  __break(1u);
                                  goto LABEL_317;
                                }
                                outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v562, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                                double MinX = v22;
                                double v256 = v23;
LABEL_138:
                                double v263 = r2_24;
LABEL_157:
                                CGAffineTransform v555 = v566;
                                v653.origin.CGFloat x = MinX;
                                v653.origin.CGFloat y = v256;
                                v653.size.CGFloat width = v25;
                                v653.size.CGFloat height = v263;
                                CGRect v654 = CGRectApplyAffineTransform(v653, &v555);
                                CGFloat v236 = v654.origin.x;
                                CGFloat v237 = v654.origin.y;
                                CGFloat v238 = v654.size.width;
                                CGFloat v239 = v654.size.height;
                                double v22 = r2_16;
                                double v23 = r2_8;
                                double v25 = v546;
                                double v180 = v534;
                                double v179 = v536;
                                double v182 = v531;
                                double v181 = v532;
                                uint64_t v234 = v529;
                                uint64_t v233 = v530;
                                break;
                            }
                          }
                          ++v235;
                          v631.origin.CGFloat x = v179;
                          v631.origin.CGFloat y = v180;
                          v631.size.CGFloat width = v181;
                          v631.size.CGFloat height = v182;
                          CGRect v632 = CGRectUnion(v631, *(CGRect *)&v236);
                          double v179 = v632.origin.x;
                          double v180 = v632.origin.y;
                          double v181 = v632.size.width;
                          double v182 = v632.size.height;
                          outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v562, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                        }
                        while (v235 != v233);
                        outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v567, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                        outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v567, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
LABEL_160:
                        v655.origin.CGFloat x = v179;
                        v655.origin.CGFloat y = v180;
                        v655.size.CGFloat width = v181;
                        v655.size.CGFloat height = v182;
                        if (!CGRectIsNull(v655))
                        {
                          v656.size.CGFloat height = v182;
                          double v5 = v504;
                          v656.origin.CGFloat x = v179;
                          v656.origin.CGFloat y = v180;
                          v656.size.CGFloat width = v181;
                          CGRect v657 = CGRectStandardize(v656);
                          double v321 = v505 == v504 ? v504 : v505;
                          double v179 = v657.origin.x - v321;
                          double v180 = v657.origin.y - v506;
                          double v181 = v657.size.width - (-v504 - v505);
                          double v182 = v657.size.height - (-v503 - v506);
                          v658.origin.CGFloat x = v657.origin.x - v321;
                          v658.origin.CGFloat y = v657.origin.y - v506;
                          v658.size.CGFloat width = v181;
                          v658.size.CGFloat height = v182;
                          if (CGRectGetWidth(v658) < 0.0) {
                            goto LABEL_166;
                          }
                          v659.origin.CGFloat x = v179;
                          v659.origin.CGFloat y = v180;
                          v659.size.CGFloat width = v181;
                          v659.size.CGFloat height = v182;
                          if (CGRectGetHeight(v659) < 0.0) {
                            goto LABEL_166;
                          }
                        }
                        goto LABEL_171;
                      default:
                        if ((void)v568 != *((void *)&v568 + 1))
                        {
                          if (*((uint64_t *)&v568 + 1) < (uint64_t)v568) {
                            goto LABEL_316;
                          }
                          if ((uint64_t)v568 < *((uint64_t *)&v568 + 1))
                          {
                            outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v567, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                            double v179 = v22;
                            double v180 = v23;
                            double v181 = v25;
                            double v182 = r2_24;
                            while (1)
                            {
                              if (LOBYTE(v173))
                              {
                                outlined copy of Text.Layout.Line.Line((void *)v171, v172, 1);
                                id v200 = (id)_NSTextLineFragmentGetCTLine((void *)v171);
                                if (!v200)
                                {
                                  __break(1u);
LABEL_329:
                                  __break(1u);
LABEL_330:
                                  __break(1u);
LABEL_331:
                                  __break(1u);
LABEL_332:
                                  __break(1u);
LABEL_333:
                                  __break(1u);
LABEL_334:
                                  __break(1u);
LABEL_335:
                                  _assertionFailure(_:_:file:line:flags:)();
                                  __break(1u);
                                  JUMPOUT(0x245DC55E4);
                                }
                                v184 = v200;
                                CGFloat v183 = v182;
                                double v5 = v181;
                                outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v567, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                              }
                              else
                              {
                                CGFloat v183 = v182;
                                double v5 = v181;
                                outlined copy of Text.Layout.Line.Line((void *)v171, v172, 0);
                                outlined copy of Text.Layout.Line.Line((void *)v171, v172, 0);

                                swift_release();
                                v184 = (void *)v171;
                              }
                              CFIndex v185 = v176 + 1;
                              swift_retain();
                              v186 = v184;
                              v187 = (id)_CTLineGetRunAtIndex(v186, v176);
                              v592.location = 0;
                              v592.length = 0;
                              CGRect v619 = CTRunGetImageBounds((CTRunRef)v187, 0, v592);
                              CGFloat v188 = v619.origin.x;
                              CGFloat v189 = v619.origin.y;
                              CGFloat v190 = v619.size.width;
                              CGFloat v191 = v619.size.height;

                              v562.CGFloat b = 0.0;
                              v562.CGFloat c = 0.0;
                              v562.CGFloat a = 1.0;
                              v562.CGFloat d = -1.0;
                              v562.CGFloat tx = v174;
                              v562.CGFloat ty = v175;
                              v620.origin.CGFloat x = v188;
                              v620.origin.CGFloat y = v189;
                              v620.size.CGFloat width = v190;
                              v620.size.CGFloat height = v191;
                              CGRect v621 = CGRectApplyAffineTransform(v620, &v562);
                              CGFloat v192 = v621.origin.x;
                              CGFloat v193 = v621.origin.y;
                              CGFloat v194 = v621.size.width;
                              CGFloat v195 = v621.size.height;
                              swift_release();

                              v622.origin.CGFloat x = v192;
                              v622.origin.CGFloat y = v193;
                              v622.size.CGFloat width = v194;
                              v622.size.CGFloat height = v195;
                              CGRect v623 = CGRectInset(v622, -1.0, -1.0);
                              CGFloat v196 = v623.origin.x;
                              CGFloat v197 = v623.origin.y;
                              CGFloat v198 = v623.size.width;
                              CGFloat v199 = v623.size.height;
                              swift_release();

                              v624.origin.CGFloat x = v179;
                              v624.origin.CGFloat y = v180;
                              v624.size.CGFloat width = v5;
                              v624.size.CGFloat height = v183;
                              v686.origin.CGFloat x = v196;
                              v686.origin.CGFloat y = v197;
                              v686.size.CGFloat width = v198;
                              v686.size.CGFloat height = v199;
                              CGRect v625 = CGRectUnion(v624, v686);
                              double v179 = v625.origin.x;
                              double v180 = v625.origin.y;
                              double v181 = v625.size.width;
                              double v182 = v625.size.height;
                              CFIndex v176 = v185;
                              double v22 = r2_16;
                              double v23 = r2_8;
                              double v25 = v546;
                              if (v177 == v185) {
                                goto LABEL_171;
                              }
                            }
                          }
LABEL_317:
                          __break(1u);
LABEL_318:
                          __break(1u);
LABEL_319:
                          __break(1u);
                          goto LABEL_320;
                        }
LABEL_94:
                        outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v567, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
LABEL_166:
                        double v179 = v22;
                        double v180 = v23;
                        double v181 = v25;
                        double v182 = r2_24;
LABEL_171:
                        CGAffineTransform v562 = v571;
                        v660.origin.CGFloat x = v179;
                        v660.origin.CGFloat y = v180;
                        v660.size.CGFloat width = v181;
                        v660.size.CGFloat height = v182;
                        CGRect v661 = CGRectApplyAffineTransform(v660, &v562);
                        CGFloat v160 = v661.origin.x;
                        CGFloat v161 = v661.origin.y;
                        CGFloat v162 = v661.size.width;
                        CGFloat v163 = v661.size.height;
                        uint64_t v158 = v518;
                        uint64_t v155 = v519;
                        uint64_t v159 = v524;
                        break;
                    }
                  }
                  ++v159;
                  v617.origin.CGFloat x = r2a;
                  v617.origin.CGFloat y = r1a;
                  v617.size.CGFloat height = v537;
                  v617.size.CGFloat width = v538;
                  CGRect v618 = CGRectUnion(v617, *(CGRect *)&v160);
                  r2CGFloat a = v618.origin.x;
                  r1CGFloat a = v618.origin.y;
                  CGFloat v537 = v618.size.height;
                  CGFloat v538 = v618.size.width;
                  outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v567, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                }
                while (v159 != v155);
                outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v572, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v572, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                double v156 = r2a;
                CGFloat b = r1a;
                double v129 = v537;
                CGFloat v157 = v538;
LABEL_183:
                CGFloat a = v156;
                CGFloat v327 = b;
                CGFloat v328 = v157;
                double v329 = v129;
                if (CGRectIsNull(*(CGRect *)&v156))
                {
                  CGFloat v121 = v157;
                  goto LABEL_213;
                }
                double v5 = -v497;
                v669.origin.CGFloat x = a;
                v669.origin.CGFloat y = b;
                v669.size.CGFloat width = v157;
                v669.size.CGFloat height = v129;
                CGRect v670 = CGRectStandardize(v669);
                if (v499 == v498) {
                  double v351 = v498;
                }
                else {
                  double v351 = v499;
                }
                double v352 = v670.origin.x - v351;
                double v353 = v670.origin.y - v500;
                double v354 = v670.size.width - (-v498 - v499);
                double v129 = v670.size.height - (v5 - v500);
                v671.origin.CGFloat x = v670.origin.x - v351;
                v671.origin.CGFloat y = v670.origin.y - v500;
                v671.size.CGFloat width = v354;
                v671.size.CGFloat height = v129;
                if (CGRectGetWidth(v671) < 0.0
                  || (CGFloat a = v352,
                      v672.origin.CGFloat x = v352,
                      CGFloat b = v353,
                      v672.origin.CGFloat y = v353,
                      double v5 = v354,
                      v672.size.CGFloat width = v354,
                      v672.size.CGFloat height = v129,
                      CGRectGetHeight(v672) < 0.0))
                {
                  CGFloat a = r2_16;
                  CGFloat b = v23;
                  CGFloat v121 = v546;
                  goto LABEL_199;
                }
                CGFloat v121 = v354;
                goto LABEL_213;
              default:
                if ((void)v573 == *((void *)&v573 + 1))
                {
                  outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v572, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                  double v118 = v25;
                  CGFloat a = v22;
                  CGFloat b = v23;
                  CGFloat v121 = v118;
LABEL_199:
                  double v129 = r2_24;
                }
                else
                {
                  if (*((uint64_t *)&v573 + 1) < (uint64_t)v573) {
                    goto LABEL_319;
                  }
                  if ((uint64_t)v573 >= *((uint64_t *)&v573 + 1))
                  {
LABEL_320:
                    __break(1u);
LABEL_321:
                    __break(1u);
                    goto LABEL_322;
                  }
                  outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v572, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
                  double v330 = v25;
                  CGFloat a = v22;
                  CGFloat b = v23;
                  CGFloat v121 = v330;
                  double v129 = r2_24;
                  do
                  {
                    CGFloat v349 = v121;
                    if (LOBYTE(c))
                    {
                      outlined copy of Text.Layout.Line.Line((void *)v110, v111, 1);
                      id v350 = (id)_NSTextLineFragmentGetCTLine((void *)v110);
                      if (!v350) {
                        goto LABEL_329;
                      }
                      v331 = v350;
                      outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v572, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
                    }
                    else
                    {
                      outlined copy of Text.Layout.Line.Line((void *)v110, v111, 0);
                      outlined copy of Text.Layout.Line.Line((void *)v110, v111, 0);

                      swift_release();
                      v331 = (void *)v110;
                    }
                    CFIndex v332 = v115 + 1;
                    swift_retain();
                    v333 = v331;
                    v334 = (id)_CTLineGetRunAtIndex(v333, v115);
                    v596.location = 0;
                    v596.length = 0;
                    CGRect v663 = CTRunGetImageBounds((CTRunRef)v334, 0, v596);
                    CGFloat v335 = v663.origin.x;
                    CGFloat v336 = v663.origin.y;
                    CGFloat v337 = v663.size.width;
                    CGFloat v338 = v663.size.height;

                    v567.CGFloat b = 0.0;
                    v567.CGFloat c = 0.0;
                    v567.CGFloat a = 1.0;
                    v567.CGFloat d = -1.0;
                    v567.CGFloat tx = d;
                    v567.CGFloat ty = tx;
                    v664.origin.CGFloat x = v335;
                    v664.origin.CGFloat y = v336;
                    v664.size.CGFloat width = v337;
                    v664.size.CGFloat height = v338;
                    CGRect v665 = CGRectApplyAffineTransform(v664, &v567);
                    CGFloat v339 = v665.origin.x;
                    CGFloat v340 = v665.origin.y;
                    CGFloat v341 = v665.size.width;
                    CGFloat v342 = v665.size.height;
                    swift_release();

                    v666.origin.CGFloat x = v339;
                    v666.origin.CGFloat y = v340;
                    v666.size.CGFloat width = v341;
                    v666.size.CGFloat height = v342;
                    CGRect v667 = CGRectInset(v666, -1.0, -1.0);
                    CGFloat v343 = v667.origin.x;
                    double v5 = v667.origin.y;
                    CGFloat v344 = v667.size.width;
                    CGFloat v345 = v667.size.height;
                    swift_release();

                    v668.origin.CGFloat x = a;
                    v668.origin.CGFloat y = b;
                    v668.size.CGFloat width = v349;
                    v668.size.CGFloat height = v129;
                    v689.origin.CGFloat x = v343;
                    v689.origin.CGFloat y = v5;
                    v689.size.CGFloat width = v344;
                    v689.size.CGFloat height = v345;
                    *(CGRect *)(&v121 - 2) = CGRectUnion(v668, v689);
                    CGFloat a = v346;
                    CGFloat b = v347;
                    double v129 = v348;
                    CFIndex v115 = v332;
                  }
                  while (v116 != v332);
                }
LABEL_213:
                CGAffineTransform v567 = v576;
                CGFloat v360 = a;
                CGFloat v361 = b;
                double v362 = v129;
                CGRect v674 = CGRectApplyAffineTransform(*(CGRect *)(&v121 - 2), &v567);
                CGFloat v99 = v674.origin.x;
                CGFloat v100 = v674.origin.y;
                CGFloat v101 = v674.size.width;
                CGFloat v102 = v674.size.height;
                uint64_t v97 = v508;
                uint64_t v58 = v509;
                uint64_t v98 = v517;
                double v25 = v546;
                double v23 = r2_8;
                double v22 = r2_16;
                break;
            }
          }
          ++v98;
          v610.origin.CGFloat y = v527;
          v610.origin.CGFloat x = v528;
          v610.size.CGFloat height = v525;
          v610.size.CGFloat width = v526;
          CGRect v611 = CGRectUnion(v610, *(CGRect *)&v99);
          CGFloat v527 = v611.origin.y;
          CGFloat v528 = v611.origin.x;
          CGFloat v525 = v611.size.height;
          CGFloat v526 = v611.size.width;
          outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v572, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
        }
        while (v98 != v58);
        outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v577, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
        outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v577, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
        CGFloat v47 = v527;
        double v59 = v528;
        CGFloat v61 = v525;
        CGFloat v60 = v526;
LABEL_216:
        CGFloat v46 = v59;
        CGFloat v363 = v47;
        CGFloat v364 = v60;
        CGFloat v365 = v61;
        if (CGRectIsNull(*(CGRect *)&v59))
        {
          double v45 = v60;
          double v62 = v61;
          goto LABEL_234;
        }
        double v5 = -v491;
        v675.origin.CGFloat x = v46;
        v675.origin.CGFloat y = v47;
        v675.size.CGFloat width = v60;
        v675.size.CGFloat height = v61;
        CGRect v676 = CGRectStandardize(v675);
        if (v493 == v492) {
          double v366 = v492;
        }
        else {
          double v366 = v493;
        }
        double v367 = v676.origin.x - v366;
        double v368 = v676.origin.y - v494;
        double v369 = v676.size.width - (-v492 - v493);
        double v370 = v676.size.height - (v5 - v494);
        v677.origin.CGFloat x = v676.origin.x - v366;
        v677.origin.CGFloat y = v676.origin.y - v494;
        v677.size.CGFloat width = v369;
        v677.size.CGFloat height = v370;
        if (CGRectGetWidth(v677) < 0.0
          || (CGFloat v46 = v367,
              v678.origin.CGFloat x = v367,
              CGFloat v47 = v368,
              v678.origin.CGFloat y = v368,
              double v5 = v369,
              v678.size.CGFloat width = v369,
              v678.size.CGFloat height = v370,
              CGRectGetHeight(v678) < 0.0))
        {
          CGFloat v46 = r2_16;
          CGFloat v47 = r2_8;
          double v45 = v546;
          goto LABEL_224;
        }
        double v45 = v369;
        double v62 = v370;
        goto LABEL_234;
      default:
        if (*(void *)&v579[16] == *(void *)&v579[24])
        {
          outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v577, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
          double v45 = v25;
          CGFloat v46 = v22;
          CGFloat v47 = v23;
LABEL_224:
          double v62 = r2_24;
          goto LABEL_234;
        }
        if (*(uint64_t *)&v579[24] < *(uint64_t *)&v579[16]) {
          goto LABEL_321;
        }
        if (*(uint64_t *)&v579[16] < *(uint64_t *)&v579[24])
        {
          outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v577, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
          double v45 = v25;
          CGFloat v46 = v22;
          CGFloat v47 = v23;
          double v62 = r2_24;
          char v78 = LOBYTE(v41);
          do
          {
            CGFloat v94 = v62;
            CGFloat v95 = v45;
            if (LOBYTE(v41))
            {
              outlined copy of Text.Layout.Line.Line((void *)v40, *((uint64_t *)&v40 + 1), 1);
              id v96 = (id)_NSTextLineFragmentGetCTLine((void *)v40);
              if (!v96) {
                goto LABEL_330;
              }
              uint64_t v79 = v96;
              outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)&v577, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
            }
            else
            {
              outlined copy of Text.Layout.Line.Line((void *)v40, *((uint64_t *)&v40 + 1), 0);
              outlined copy of Text.Layout.Line.Line((void *)v40, *((uint64_t *)&v40 + 1), 0);

              swift_release();
              uint64_t v79 = (void *)v40;
            }
            swift_retain();
            CGFloat v41 = COERCE_DOUBLE(v79);
            uint64_t v80 = (id)_CTLineGetRunAtIndex(*(const __CTLine **)&v41, v43);
            v590.location = 0;
            v590.length = 0;
            CGRect v604 = CTRunGetImageBounds((CTRunRef)v80, 0, v590);
            CGFloat v81 = v604.origin.x;
            CGFloat v82 = v604.origin.y;
            CGFloat v83 = v604.size.width;
            CGFloat v84 = v604.size.height;

            v572.CGFloat b = 0.0;
            v572.CGFloat c = 0.0;
            v572.CGFloat a = 1.0;
            v572.CGFloat d = -1.0;
            v572.CGFloat tx = v549;
            v572.CGFloat ty = v42;
            v605.origin.CGFloat x = v81;
            v605.origin.CGFloat y = v82;
            v605.size.CGFloat width = v83;
            v605.size.CGFloat height = v84;
            CGRect v606 = CGRectApplyAffineTransform(v605, &v572);
            CGFloat v85 = v606.origin.x;
            CGFloat v86 = v606.origin.y;
            CGFloat v87 = v606.size.width;
            CGFloat v88 = v606.size.height;
            swift_release();

            v607.origin.CGFloat x = v85;
            v607.origin.CGFloat y = v86;
            v607.size.CGFloat width = v87;
            v607.size.CGFloat height = v88;
            CGRect v608 = CGRectInset(v607, -1.0, -1.0);
            CGFloat v89 = v608.origin.x;
            double v5 = v608.origin.y;
            CGFloat v90 = v608.size.width;
            CGFloat v91 = v608.size.height;
            swift_release();

            v609.origin.CGFloat x = v46;
            v609.origin.CGFloat y = v47;
            v609.size.CGFloat width = v95;
            v609.size.CGFloat height = v94;
            v685.origin.CGFloat x = v89;
            v685.origin.CGFloat y = v5;
            v685.size.CGFloat width = v90;
            v685.size.CGFloat height = v91;
            *(CGRect *)(&v45 - 2) = CGRectUnion(v609, v685);
            CGFloat v46 = v92;
            CGFloat v47 = v93;
            ++v43;
            LOBYTE(v41) = v78;
          }
          while (v44 != v43);
LABEL_234:
          CGAffineTransform v572 = v582;
          CGFloat v374 = v46;
          CGFloat v375 = v47;
          CGRect v680 = CGRectApplyAffineTransform(*(CGRect *)(&v45 - 2), &v572);
          CGFloat v29 = v680.origin.x;
          CGFloat v30 = v680.origin.y;
          CGFloat v31 = v680.size.width;
          CGFloat v32 = v680.size.height;
          uint64_t v27 = v501;
          uint64_t v26 = v502;
          uint64_t v28 = v507;
          double v25 = v546;
          double v23 = r2_8;
          double v22 = r2_16;
          goto LABEL_20;
        }
LABEL_322:
        __break(1u);
LABEL_323:
        swift_once();
LABEL_13:
        id v13 = (uint64_t *)&static Color.blue;
        break;
    }
  }
  CGFloat x = *MEMORY[0x263F001A0];
  CGFloat v376 = *(double *)(MEMORY[0x263F001A0] + 16);
  CGFloat v377 = *(double *)(MEMORY[0x263F001A0] + 8);
  CGFloat v378 = *(double *)(MEMORY[0x263F001A0] + 24);
LABEL_238:
  CGFloat v249 = COERCE_DOUBLE(&v577);
  double v379 = 8.0;
  if (Edge.Set.contains(_:)(SwiftUI_Edge_top)) {
    double v380 = 8.0;
  }
  else {
    double v380 = 0.0;
  }
  if (Edge.Set.contains(_:)(SwiftUI_Edge_leading)) {
    double v381 = 8.0;
  }
  else {
    double v381 = 0.0;
  }
  if (Edge.Set.contains(_:)(SwiftUI_Edge_bottom)) {
    double v382 = 8.0;
  }
  else {
    double v382 = 0.0;
  }
  if (Edge.Set.contains(_:)(SwiftUI_Edge_trailing)) {
    double v383 = 8.0;
  }
  else {
    double v383 = 0.0;
  }
  double v384 = v381;
  double v385 = v382;
  double v5 = x;
  double v179 = v377;
  CGFloat v386 = v377;
  double v180 = v376;
  double v25 = v378;
  double v387 = CGRect.outset(by:)(v380, v384, v385, v383, x, v386, v376, v378);
  if (v490 == v489 || (v488 & 0xFE) != 2)
  {
    if (!v489)
    {
      long long v577 = v583;
      long long v578 = v584;
      *(_OWORD *)v579 = v585;
      *(_OWORD *)&v579[16] = v586;
      Text.Effect.DrawingContent.draw(options:in:)(0, 0, 1, a5);
      return swift_release();
    }
    if (v483)
    {
      v681.origin.CGFloat x = x;
      v681.origin.CGFloat y = v179;
      v681.size.CGFloat width = v376;
      v681.size.CGFloat height = v378;
      double MinX = CGRectGetMinX(v681);
      if (one-time initialization token for effectWidth != -1) {
        goto LABEL_327;
      }
      goto LABEL_259;
    }
    v682.origin.CGFloat x = x;
    v682.origin.CGFloat y = v179;
    v682.size.CGFloat width = v376;
    v682.size.CGFloat height = v378;
    double MaxX = CGRectGetMaxX(v682);
    if (one-time initialization token for effectWidth != -1) {
      swift_once();
    }
    double v395 = MaxX + *(double *)&static GlimmerTextEffect.effectWidth;
LABEL_277:
    v683.origin.CGFloat x = v5;
    v683.origin.CGFloat y = v179;
    v683.size.CGFloat width = v180;
    v683.size.CGFloat height = v25;
    double MidY = CGRectGetMidY(v683);
    long long v577 = v583;
    long long v578 = v584;
    *(_OWORD *)v579 = v585;
    *(_OWORD *)&v579[16] = v586;
    Text.Effect.DrawingContent.draw(options:in:)(0, 0, 1, a5);
    uint64_t v409 = RBDrawingStateBeginLayer();
    type metadata accessor for GraphicsContext.Storage();
    swift_allocObject();
    uint64_t v410 = swift_retain();
    *(void *)&v572.CGFloat a = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v410, v409, 0, 1);
    swift_retain();
    static Shader.glimmer(point:opacity:shine:bulge:)((uint64_t)&v577, v395, MidY, 1.0, 1.0, v478);
    v411 = (void *)v577;
    uint64_t v412 = *(unsigned int *)v579;
    __asm { FMOV            V0.2D, #8.0 }
    *(_OWORD *)(*(void *)&v249 + 40) = _Q0;
    *(void *)v579 = v412;
    *(void *)&v579[24] = 0;
    long long v580 = 0uLL;
    *(void *)&long long v581 = 3087007744;
    GraphicsContext.addFilter(_:options:)((uint64_t)&v577, 0, v417, v418, v419, v420, v421);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    long long v577 = v583;
    long long v578 = v584;
    *(_OWORD *)v579 = v585;
    *(_OWORD *)&v579[16] = v586;
    Text.Effect.DrawingContent.draw(options:in:)(v486 | ((unint64_t)v487 << 32), v484 | ((unint64_t)v485 << 32), 0, (uint64_t *)&v572);
    swift_release();
LABEL_286:
    RBDrawingStateDrawLayer();
    swift_release();
    return swift_release();
  }
  if (!v489)
  {
    long long v577 = v583;
    long long v578 = v584;
    *(_OWORD *)v579 = v585;
    *(_OWORD *)&v579[16] = v586;
    Text.Effect.DrawingContent.draw(options:in:)(0, 0, 1, a5);
    if (v480 - v481 >= 0.0)
    {
      double v397 = (v480 - v481) / v479;
      double v396 = 0.0;
      if (v397 < 0.0)
      {
LABEL_281:
        double v422 = v396 * 0.5 + 0.5 + v396 * 0.5 + 0.5 + -1.0;
        double v423 = 1.0 - v422 * v422;
        uint64_t v424 = RBDrawingStateBeginLayer();
        type metadata accessor for GraphicsContext.Storage();
        swift_allocObject();
        uint64_t v425 = swift_retain();
        uint64_t v426 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v425, v424, 0, 1);
        *(void *)&v572.CGFloat a = v426;
        float v427 = v423;
        float v428 = *(float *)(v426 + 48);
        swift_retain();
        if (v428 != v427)
        {
          uint64_t v429 = v426;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            uint64_t v430 = RBDrawingStateInit();
            swift_allocObject();
            uint64_t v431 = swift_retain();
            uint64_t v429 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v431, v430, 1, 0);
            *(void *)&v572.CGFloat a = v429;
            swift_release();
          }
          *(float *)(v429 + 48) = v427;
        }
        long long v577 = v583;
        long long v578 = v584;
        *(_OWORD *)v579 = v585;
        *(_OWORD *)&v579[16] = v586;
        Text.Effect.DrawingContent.draw(options:in:)(v486 | ((unint64_t)v487 << 32), v484 | ((unint64_t)v485 << 32), 0, (uint64_t *)&v572);
        swift_release();
        goto LABEL_286;
      }
    }
    else
    {
      double v396 = 0.0;
      double v397 = 0.0 / v479;
      if (0.0 / v479 < 0.0) {
        goto LABEL_281;
      }
    }
    double v396 = 1.0;
    if (v397 <= 1.0) {
      double v396 = v397;
    }
    goto LABEL_281;
  }
  double v391 = v387;
  double v392 = v388;
  CGFloat v554 = v389;
  CGFloat v547 = v390;
  if (v480 - v481 >= 0.0)
  {
    double v394 = (v480 - v481) / v479;
    double v393 = 0.0;
    if (v394 < 0.0) {
      goto LABEL_268;
    }
  }
  else
  {
    double v393 = 0.0;
    double v394 = 0.0 / v479;
    if (0.0 / v479 < 0.0) {
      goto LABEL_268;
    }
  }
  if (v394 <= 1.0) {
    double v393 = v394;
  }
  else {
    double v393 = 1.0;
  }
LABEL_268:
  uint64_t v398 = *a2;
  Swift::UInt64 v399 = a2[1];
  uint64_t v400 = a2[2];
  uint64_t v401 = a2[4];
  double v402 = CGRectGetWidth(*(CGRect *)(a2[3] + 120));
  if (v401 < 0)
  {
    __break(1u);
  }
  else
  {
    double v403 = v402;
    CGFloat r2_24 = v392;
    CGFloat v546 = v391;
    if (v401)
    {
      outlined retain of Text.Effect.DrawableFragment<SmallTextEffect>((uint64_t)a2);
      unint64_t v404 = 0;
      double v405 = 0.0;
      do
      {
        if (v401 == v404) {
          goto LABEL_314;
        }
        swift_retain();
        swift_retain();
        specialized Text.Effect.BaseFragment.init(keyframes:key:fragment:)(v398, v399, v400, v404, &v567);
        double v406 = CGRectGetWidth(*(CGRect *)(*(void *)&v567.d + 120));
        outlined release of Text.Effect.BaseFragment((uint64_t)&v567);
        double v405 = v405 + v406;
        ++v404;
      }
      while (v401 != v404);
      outlined release of Text.Effect.BaseFragment((uint64_t)a2);
    }
    else
    {
      double v405 = 0.0;
    }
    if ((v476 * (v475 * v393) - v405) / v403 < 0.0) {
      double v379 = 0.0;
    }
    else {
      double v379 = (v476 * (v475 * v393) - v405) / v403;
    }
    double v432 = x;
    double v433 = v179;
    double v434 = v180;
    CGFloat v435 = v25;
    if (one-time initialization token for effectWidth == -1) {
      goto LABEL_292;
    }
  }
  swift_once();
  CGFloat v435 = v25;
  double v434 = v180;
  double v433 = v179;
  double v432 = x;
LABEL_292:
  double v436 = *(double *)&static GlimmerTextEffect.effectWidth;
  CGFloat v437 = v432;
  CGFloat v438 = v433;
  CGFloat v439 = v434;
  CGFloat v440 = v435;
  double v441 = v379 * CGRectGetWidth(*(CGRect *)&v432);
  CGFloat v442 = v437;
  CGFloat v443 = v438;
  CGFloat v444 = v439;
  CGFloat v445 = v435;
  if (v483)
  {
    double v446 = v436 + CGRectGetMaxX(*(CGRect *)&v442) - v441;
    double v447 = 0.0;
  }
  else
  {
    double v446 = v441 + CGRectGetMinX(*(CGRect *)&v442) - v436;
    double v447 = 1.0;
  }
  v684.origin.CGFloat x = v437;
  v684.origin.CGFloat y = v438;
  v684.size.CGFloat width = v439;
  v684.size.CGFloat height = v435;
  double v448 = CGRectGetMidY(v684);
  double v449 = v446 - v436;
  double v450 = v436 + v436;
  if (one-time initialization token for gradientWidth != -1) {
    swift_once();
  }
  double v451 = v449 + v447 * (v450 - *(double *)&static GlimmerTextEffect.gradientWidth);
  double v452 = *(double *)&static GlimmerTextEffect.gradientWidth + v451;
  type metadata accessor for _ContiguousArrayStorage<Text.Effect.Drawable.Fragment>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Color>);
  uint64_t v453 = swift_allocObject();
  *(_OWORD *)(v453 + 16) = xmmword_2461BDD50;
  if (v483)
  {
    if (one-time initialization token for clear != -1) {
      swift_once();
    }
    *(void *)(v453 + 32) = static Color.clear;
    uint64_t v454 = one-time initialization token for white;
    swift_retain();
    if (v454 != -1) {
      swift_once();
    }
    uint64_t v455 = static Color.white;
  }
  else
  {
    if (one-time initialization token for white != -1) {
      swift_once();
    }
    *(void *)(v453 + 32) = static Color.white;
    uint64_t v456 = one-time initialization token for clear;
    swift_retain();
    if (v456 != -1) {
      swift_once();
    }
    uint64_t v455 = static Color.clear;
  }
  *(void *)(v453 + 40) = v455;
  *(void *)&long long v577 = v453;
  specialized Array._endMutation()();
  uint64_t v457 = v577;
  swift_retain();
  *(void *)&v572.CGFloat a = specialized Gradient.init(colors:)(v457);
  v572.CGFloat b = 0.0;
  v572.CGFloat c = v451;
  v572.CGFloat d = v448;
  v572.CGFloat tx = v452;
  v572.CGFloat ty = v448;
  *(void *)&long long v574 = 0;
  long long v573 = 0uLL;
  BYTE8(v574) = 5;
  uint64_t v458 = RBDrawingStateBeginLayer();
  type metadata accessor for GraphicsContext.Storage();
  swift_allocObject();
  uint64_t v459 = swift_retain();
  *(void *)&v562.CGFloat a = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v459, v458, 0, 1);
  swift_retain();
  static Shader.glimmer(point:opacity:shine:bulge:)((uint64_t)&v577, v446, v448, 1.0, 0.0, v478);
  v460 = (void *)v577;
  __asm { FMOV            V0.2D, #8.0 }
  *(_OWORD *)&v579[8] = _Q0;
  *(void *)v579 = *(unsigned int *)v579;
  *(void *)&v579[24] = 0;
  long long v580 = 0uLL;
  *(void *)&long long v581 = 3087007744;
  GraphicsContext.addFilter(_:options:)((uint64_t)&v577, 0, v462, v463, v464, v465, v466);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  long long v577 = v583;
  long long v578 = v584;
  *(_OWORD *)v579 = v585;
  *(_OWORD *)&v579[16] = v586;
  Text.Effect.DrawingContent.draw(options:in:)(0, 0, 1, (uint64_t *)&v562);
  swift_release();
  RBDrawingStateDrawLayer();
  swift_release();
  uint64_t v467 = RBDrawingStateBeginLayer();
  swift_allocObject();
  uint64_t v468 = swift_retain();
  *(void *)&long long v577 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v468, v467, 0, 1);
  swift_retain();
  specialized closure #3 in GlimmerTextEffect.apply(to:fragment:timing:state:context:in:)((uint64_t *)&v577, (long long *)&v572, &v583, v546, r2_24, v554, v547, v446, v448, v478, v477, v469, v470, v471, v472, v473, v486, v487, v484,
    v485);
  swift_release();
  RBDrawingStateDrawLayer();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t outlined retain of Text.Effect.DrawingContent(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of Text.Effect.DrawingContent(uint64_t a1)
{
  return a1;
}

void type metadata accessor for Text.Effect.ConcreteConfiguration<GlimmerTextEffect>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = lazy protocol witness table accessor for type GlimmerTextEffect and conformance GlimmerTextEffect();
    unint64_t v7 = a3(a1, &type metadata for GlimmerTextEffect, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t outlined init with copy of Text.Effect.BaseContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Text.Effect.BaseContent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Text.Effect.BaseContent(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for GlimmerTextEffect.Timing(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

ValueMetadata *type metadata accessor for GlimmerTextEffect.Timing()
{
  return &type metadata for GlimmerTextEffect.Timing;
}

ValueMetadata *type metadata accessor for GlimmerTextEffect.AnimatorConfiguration()
{
  return &type metadata for GlimmerTextEffect.AnimatorConfiguration;
}

uint64_t LogicalCompletionModifier.animate<A, B>(base:value:time:context:)(double a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char v12 = *(unsigned char *)(a5 + 17);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a9 + 16))(a4, a5, a6, a8, a7, a9);
  if ((v12 & 1) == 0) {
    *(unsigned char *)(a5 + 17) = a2 <= a1;
  }
  return result;
}

uint64_t protocol witness for CustomAnimationModifier.animate<A, B>(base:value:time:context:) in conformance LogicalCompletionModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8)
{
  return LogicalCompletionModifier.animate<A, B>(base:value:time:context:)(a8, *v8, a1, a2, a3, a4, a5, a6, a7);
}

uint64_t protocol witness for CustomAnimationModifier.function(base:) in conformance LogicalCompletionModifier@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  *(void *)a2 = *(void *)a1;
  *(void *)(a2 + 8) = v2;
  *(void *)(a2 + 16) = v4;
  *(void *)(a2 + 24) = v5;
  *(void *)(a2 + 32) = v6;
  char v7 = *(unsigned char *)(a1 + 40);
  *(unsigned char *)(a2 + 40) = v7;
  return outlined copy of Animation.Function(v3, v2, v4, v5, v6, v7);
}

uint64_t Animation.logicallyComplete(after:)(uint64_t a1, double a2)
{
  double v5 = a2;
  uint64_t v2 = *(uint64_t (**)(double *, void *, unint64_t))(*(void *)a1 + 144);
  unint64_t v3 = lazy protocol witness table accessor for type LogicalCompletionModifier and conformance LogicalCompletionModifier();
  return v2(&v5, &unk_26FA6CE68, v3);
}

unint64_t lazy protocol witness table accessor for type LogicalCompletionModifier and conformance LogicalCompletionModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type LogicalCompletionModifier and conformance LogicalCompletionModifier;
  if (!lazy protocol witness table cache variable for type LogicalCompletionModifier and conformance LogicalCompletionModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LogicalCompletionModifier and conformance LogicalCompletionModifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LogicalCompletionModifier and conformance LogicalCompletionModifier;
  if (!lazy protocol witness table cache variable for type LogicalCompletionModifier and conformance LogicalCompletionModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LogicalCompletionModifier and conformance LogicalCompletionModifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LogicalCompletionModifier and conformance LogicalCompletionModifier;
  if (!lazy protocol witness table cache variable for type LogicalCompletionModifier and conformance LogicalCompletionModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LogicalCompletionModifier and conformance LogicalCompletionModifier);
  }
  return result;
}

void *type metadata accessor for LogicalCompletionModifier()
{
  return &unk_26FA6CE68;
}

unint64_t instantiation function for generic protocol witness table for LogicalCompletionModifier(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type LogicalCompletionModifier and conformance LogicalCompletionModifier();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t specialized ScrollableContainer.setParentTarget(_:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for Scrollable);
  Weakuint64_t Value = AGGraphGetWeakValue();
  if (WeakValue)
  {
    outlined init with copy of AnyTrackedValue(WeakValue, (uint64_t)v9);
    uint64_t v5 = v10;
    uint64_t v6 = v11;
    __swift_project_boxed_opaque_existential_1(v9, v10);
    char v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 16))(a1, a2, v5, v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  }
  else
  {
    char v7 = 0;
  }
  return v7 & 1;
}

uint64_t implicit closure #9 in static Layout.makeDynamicView(root:inputs:properties:list:)(uint64_t a1)
{
  v3[15] = *MEMORY[0x263EF8340];
  outlined init with copy of ScrollStateRequestTransform(a1, (uint64_t)v3);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for (_:)();
  lazy protocol witness table accessor for type ScrollStateRequestTransform and conformance ScrollStateRequestTransform();
  uint64_t v1 = Attribute.init<A>(body:value:flags:update:)();
  outlined destroy of ScrollStateRequestTransform((uint64_t)v3);
  return v1;
}

uint64_t DynamicLayoutViewAdaptor.MakeTransition.makeArchivedTransition<A>(helper:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v30)(long long *__return_ptr, long long *);
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t result;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  void v42[2];
  _OWORD v43[3];
  unsigned char v44[21];
  unsigned char v45[72];
  long long v46;
  _OWORD v47[2];
  _OWORD v48[2];
  int v49;
  long long v50;
  unsigned char v51[32];
  unsigned char v52[32];
  int v53;
  uint64_t v54;

  uint64_t v4 = v3;
  double v54 = *MEMORY[0x263EF8340];
  uint64_t v8 = type metadata accessor for TransitionHelper();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x270FA5388](v8);
  char v12 = (char *)&v37 - v11;
  if (Transition.hasContentTransition.getter(a2, a3))
  {
    long long v39 = a1;
    long long v40 = v12;
    CGFloat v41 = a3;
    int v13 = *(_DWORD *)(v3 + 88);
    uint64_t v14 = *(void *)(v3 + 96);
    uint64_t v16 = *(void *)(v4 + 120);
    uint64_t v15 = *(void *)(v4 + 128);
    int v17 = *(_DWORD *)(v4 + 160);
    *(void *)&CGFloat v46 = *(void *)(v4 + 80);
    DWORD2(v46) = v13;
    *(_OWORD *)((char *)v47 + 8) = *(_OWORD *)(v4 + 104);
    *(void *)&v47[0] = v14;
    *((void *)&v47[1] + 1) = v16;
    *(void *)&v48[0] = v15;
    *(_OWORD *)((char *)v48 + 8) = *(_OWORD *)(v4 + 136);
    *((void *)&v48[1] + 1) = *(void *)(v4 + 152);
    uint64_t v49 = v17;
    __int16 v18 = WORD2(v47[1]);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((v18 & 0x100) != 0)
    {
      AGTypeGetSignature();
      specialized _GraphInputs.pushScope<A>(id:)(v50, *((uint64_t *)&v50 + 1), (void *)*(unsigned int *)v51);
    }
    unsigned int v19 = (_DWORD *)(v4 + 72);
    if (*(unsigned char *)(v4 + 76)) {
      unsigned int v19 = (_DWORD *)MEMORY[0x263F288F8];
    }
    LODWORD(v50) = *v19;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    lazy protocol witness table accessor for type ViewListArchivedAnimation and conformance ViewListArchivedAnimation();
    long long v38 = Attribute.init<A>(body:value:flags:update:)();
    *(_OWORD *)&unsigned char v51[16] = v47[1];
    *(_OWORD *)uint64_t v52 = v48[0];
    *(_OWORD *)&v52[16] = v48[1];
    uint64_t v53 = v49;
    char v50 = v46;
    *(_OWORD *)uint64_t v51 = v47[0];
    outlined init with copy of DynamicViewListItem(v4 + 8, (uint64_t)v45);
    uint64_t v20 = *(void *)(v4 + 176);
    long long v37 = *(void *)(v4 + 168);
    outlined init with copy of DynamicViewListItem((uint64_t)v45, (uint64_t)v43);
    unsigned int v21 = v40;
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v40, v39, v8);
    unint64_t v22 = (*(unsigned __int8 *)(v9 + 80) + 101) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    uint64_t v23 = swift_allocObject();
    uint64_t v24 = v41;
    *(void *)(v23 + 16) = a2;
    *(void *)(v23 + 24) = v24;
    long long v25 = *(_OWORD *)v44;
    *(_OWORD *)(v23 + 64) = v43[2];
    *(_OWORD *)(v23 + 80) = v25;
    *(void *)(v23 + 93) = *(void *)&v44[13];
    long long v26 = v43[1];
    *(_OWORD *)(v23 + 32) = v43[0];
    *(_OWORD *)(v23 + 48) = v26;
    (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v23 + v22, v21, v8);
    uint64_t v27 = (void *)(v23 + ((v10 + v22 + 7) & 0xFFFFFFFFFFFFFFF8));
    *uint64_t v27 = v37;
    v27[1] = v20;
    outlined retain of _ViewInputs((uint64_t)&v50);
    swift_retain();
    specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(v38, (uint64_t)&v50, (void (*)(void *__return_ptr, uint64_t, long long *))partial apply for closure #1 in DynamicLayoutViewAdaptor.MakeTransition.makeArchivedTransition<A>(helper:), v42);
    swift_release();
    outlined destroy of DynamicViewListItem((uint64_t)v45);
    outlined release of _ViewInputs((uint64_t)&v50);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    uint64_t v28 = v42[0];
    uint64_t v29 = v42[1];
  }
  else
  {
    CGFloat v30 = *(void (**)(long long *__return_ptr, long long *))(v3 + 168);
    CGFloat v31 = *(_DWORD *)(v3 + 88);
    CGFloat v32 = *(void *)(v3 + 96);
    uint64_t v33 = *(void *)(v3 + 120);
    long long v34 = *(void *)(v3 + 128);
    long long v35 = *(_DWORD *)(v3 + 160);
    *(void *)&char v50 = *(void *)(v3 + 80);
    DWORD2(v50) = v31;
    *(_OWORD *)&v51[8] = *(_OWORD *)(v3 + 104);
    *(void *)uint64_t v51 = v32;
    *(void *)&v51[24] = v33;
    *(void *)uint64_t v52 = v34;
    *(_OWORD *)&v52[8] = *(_OWORD *)(v3 + 136);
    *(void *)&v52[24] = *(void *)(v3 + 152);
    uint64_t v53 = v35;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v30(&v46, &v50);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    uint64_t v29 = *((void *)&v46 + 1);
    uint64_t v28 = v46;
  }
  unint64_t result = swift_bridgeObjectRelease();
  *(void *)(v4 + 184) = v28;
  *(void *)(v4 + 192) = v29;
  return result;
}

uint64_t closure #1 in DynamicLayoutViewAdaptor.MakeTransition.makeArchivedTransition<A>(helper:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, void (*a4)(uint64_t *__return_ptr, long long *)@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, void *a8@<X8>)
{
  void (*v47)(uint64_t *__return_ptr, long long *);
  uint64_t v48;
  long long v49;
  int v50;
  Swift::UInt v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;

  uint64_t v48 = a5;
  CGFloat v47 = a4;
  uint64_t v42 = a3;
  CGFloat v46 = a8;
  uint64_t v38 = type metadata accessor for TransitionHelper();
  uint64_t v12 = *(void *)(v38 - 8);
  MEMORY[0x270FA5388](v38);
  uint64_t v14 = (char *)&v38 - v13;
  uint64_t v43 = a6;
  uint64_t v44 = a7;
  uint64_t v15 = type metadata accessor for ViewListContentTransition();
  uint64_t v45 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  CGFloat v41 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  unsigned int v19 = (char *)&v38 - v18;
  uint64_t v20 = *(void *)a1;
  int v40 = *(_DWORD *)(a1 + 8);
  uint64_t v21 = *(void *)(a1 + 16);
  uint64_t v22 = *(void *)(a1 + 24);
  uint64_t v23 = *(void *)(a1 + 32);
  uint64_t v24 = *(void *)(a1 + 40);
  uint64_t v25 = *(void *)(a1 + 48);
  uint64_t v26 = *(void *)(a1 + 56);
  uint64_t v27 = *(void *)(a1 + 64);
  *(void *)&long long v28 = *(void *)(a1 + 72);
  uint64_t v49 = v28;
  int v39 = *(_DWORD *)(a1 + 80);
  uint64_t v29 = *(void *)(a2 + 56);
  uint64_t v30 = one-time initialization token for defaultValue;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v30 != -1) {
    swift_once();
  }
  uint64_t v31 = specialized ViewTraitCollection.value<A>(for:defaultValue:)(static _DisplayList_StableIdentityScope.defaultValue, v29);
  swift_bridgeObjectRelease();
  if (AGWeakAttributeGetAttribute() == *MEMORY[0x263F288F8])
  {
    Swift::UInt value = v20;
  }
  else
  {
    uint64_t v33 = swift_retain();
    if (!specialized find<A>(_:key:)(v33) || (Swift::UInt value = v20, (static WeakAttribute.== infix(_:_:)() & 1) == 0))
    {
      type metadata accessor for _TraitWritingModifier<ZIndexTraitKey>(0, &lazy cache variable for type metadata for TypedElement<_DisplayList_StableIdentityScope>, (uint64_t)&type metadata for _DisplayList_StableIdentityScope, (uint64_t)&protocol witness table for _DisplayList_StableIdentityScope, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TypedElement);
      *(void *)(swift_allocObject() + 72) = v31;
      Swift::UInt value = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for _DisplayList_StableIdentityScope, 0, v20).value;
    }
    swift_release();
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v42, v38);
  swift_beginAccess();
  ViewListContentTransition.init(helper:size:environment:)((uint64_t)v14, v49, *(_DWORD *)(v21 + 16), (uint64_t)v19);
  uint64_t v34 = v45;
  uint64_t v35 = (uint64_t)v41;
  (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v41, v19, v15);
  uint64_t WitnessTable = swift_getWitnessTable();
  _GraphValue.init<A>(_:)(v35, (uint64_t)&type metadata for ContentTransitionEffect, v15, WitnessTable, &v50);
  LODWORD(v35) = v50;
  uint64_t v51 = value;
  uint64_t v52 = v40;
  uint64_t v53 = v21;
  double v54 = v22;
  double v55 = v23;
  double v56 = v24;
  double v57 = v25;
  uint64_t v58 = v26;
  double v59 = v27;
  CGFloat v60 = v49;
  CGFloat v61 = v39;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(v35, (uint64_t)&v51, v47, v46);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v34 + 8))(v19, v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t ViewListContentTransition.init(helper:size:environment:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for TransitionHelper();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(a4, a1, v8);
  uint64_t result = type metadata accessor for ViewListContentTransition();
  *(_DWORD *)(a4 + *(int *)(result + 36)) = a2;
  *(_DWORD *)(a4 + *(int *)(result + 40)) = a3;
  return result;
}

uint64_t protocol witness for DynamicContainerAdaptor.foreachItem(items:_:) in conformance DynamicLayoutViewAdaptor(void *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = *v3;
  uint64_t v12 = 0;
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  v10[2] = a2;
  void v10[3] = a3;
  char v11 = 0;
  return ViewList.applySublists(from:list:to:)((uint64_t)&v12, v6, (uint64_t)partial apply for closure #1 in DynamicLayoutViewAdaptor.foreachItem(items:_:), (uint64_t)v10, v7, v8);
}

uint64_t protocol witness for DynamicContainerAdaptor.makeItemLayout(item:uniqueId:inputs:containerInfo:containerInputs:) in conformance DynamicLayoutViewAdaptor(void *a1, uint64_t *a2, void *a3, int a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = DynamicLayoutViewAdaptor.makeItemLayout(item:uniqueId:inputs:containerInfo:containerInputs:)(a1, a3, a4, a5, a6, a7, a8, *(void *)v8, *(void *)(v8 + 8), *(void *)(v8 + 16));
  *a2 = result;
  return result;
}

uint64_t protocol witness for DynamicContainerAdaptor.removeItemLayout(uniqueId:itemLayout:) in conformance DynamicLayoutViewAdaptor(int a1)
{
  uint64_t v2 = *(uint64_t (**)(void (*)(), _DWORD *))(v1 + 8);
  v4[4] = a1;
  return v2(_s7SwiftUI24DynamicLayoutViewAdaptorV010removeItemD08uniqueId04itemD0ys6UInt32V_AC0hD0VtFyAA0cD3MapVzXEfU_TA_0, v4);
}

uint64_t protocol witness for static StatefulRule.initialValue.getter in conformance ViewListTransition<A>@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56);

  return v3(a1, 1, 1, AssociatedTypeWitness);
}

uint64_t ViewListArchivedAnimation.value.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  if (*MEMORY[0x263F288F8] == result)
  {
    uint64_t v3 = 0;
    int v4 = 0;
    long long v5 = 0uLL;
    char v6 = 1;
  }
  else
  {
    type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
    uint64_t Value = AGGraphGetValue();
    outlined init with copy of AnyTrackedValue(Value, (uint64_t)v15);
    uint64_t v8 = v16;
    uint64_t v9 = v17;
    __swift_project_boxed_opaque_existential_1(v15, v16);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v9 + 40))(&v14, v8, v9);
    char v6 = 1;
    specialized ViewTraitCollection.value<A>(for:defaultValue:)(1, 0, 0, 0, v14, (uint64_t)&v11);
    swift_bridgeObjectRelease();
    long long v10 = v11;
    uint64_t v3 = v12;
    int v4 = v13;
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    long long v5 = v10;
    if ((void)v10 == 1)
    {
      uint64_t v3 = 0;
      int v4 = 0;
      long long v5 = 0uLL;
    }
    else
    {
      char v6 = 0;
    }
  }
  *(_OWORD *)a2 = v5;
  *(void *)(a2 + 16) = v3;
  *(_DWORD *)(a2 + 24) = v4;
  *(unsigned char *)(a2 + 28) = v6;
  return result;
}

uint64_t ViewListContentTransition.environment.getter@<X0>(void *a1@<X8>)
{
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v4 = *Value;
  uint64_t v3 = Value[1];
  *a1 = v4;
  a1[1] = v3;
  swift_retain();

  return swift_retain();
}

void protocol witness for _RendererEffect.effectValue(size:) in conformance ViewListArchivedAnimation.Effect(uint64_t a1@<X8>)
{
  if (*((unsigned char *)v1 + 28))
  {
    uint64_t v3 = 0;
    char v4 = 19;
  }
  else
  {
    int v5 = *((_DWORD *)v1 + 6);
    uint64_t v7 = v1[1];
    uint64_t v6 = v1[2];
    uint64_t v8 = *v1;
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v7;
    *(void *)(v3 + 24) = v6;
    *(_DWORD *)(v3 + 32) = v5;
    *(unsigned char *)(v3 + 36) = 0;
    *(void *)(v3 + 40) = v8;
    swift_retain();
    char v4 = 18;
  }
  *(void *)a1 = v3;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = v4;
}

void protocol witness for static Rule.initialValue.getter in conformance ViewListArchivedAnimation(void *a1@<X8>)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 1;
  *(void *)((char *)a1 + 21) = 0;
}

uint64_t protocol witness for Rule.value.getter in conformance ViewListArchivedAnimation@<X0>(uint64_t a1@<X8>)
{
  return ViewListArchivedAnimation.value.getter(*v1, a1);
}

uint64_t ViewListContentTransition.updateValue()(uint64_t a1)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = type metadata accessor for TransitionHelper();
  if ((TransitionHelper.update()(v3) & 1) != 0 || (uint64_t result = AGGraphGetOutputValue()) == 0)
  {
    ViewListContentTransition.environment.getter(&v19);
    uint64_t v5 = v19;
    uint64_t v18 = v2;
    if (v20)
    {
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.value<A>(_:for:)(v5, (uint64_t)&v23);
      swift_release_n();
      swift_release_n();
      char v6 = v27;
      uint64_t v7 = v23;
      unint64_t v8 = v24 | ((unint64_t)v25 << 32);
      char v9 = v26;
      LOBYTE(v10) = v28;
    }
    else
    {
      uint64_t v11 = swift_retain_n();
      uint64_t v12 = specialized find<A>(_:key:)(v11);
      if (v12)
      {
        char v17 = *(unsigned char *)(v12 + 87);
        int v10 = *(_DWORD *)(v12 + 96);
        uint64_t v13 = *(void *)(v12 + 72);
        unint64_t v8 = *(unsigned int *)(v12 + 80) | ((unint64_t)*(unsigned __int8 *)(v12 + 84) << 32);
        char v9 = *(unsigned char *)(v12 + 85);
        outlined copy of ContentTransition.Storage(v13, v8, v9);
        swift_retain();
      }
      else
      {
        char v9 = 0;
        char v17 = 0;
        LOBYTE(v10) = 0;
        unint64_t v8 = 0x302000000;
        uint64_t v13 = 0x8000000000;
      }
      swift_release_n();
      uint64_t v7 = v13;
      char v6 = v17;
    }
    LOBYTE(v19) = v6;
    char v14 = v6;
    uint64_t Value = (double *)AGGraphGetValue();
    uint64_t v16 = Transition.contentTransitionEffects(style:size:)((unsigned __int8 *)&v19, *Value, Value[1], v1, v18);
    outlined consume of ContentTransition.Storage(v7, v8, v9);
    swift_release();
    uint64_t v19 = v16;
    BYTE4(v20) = 2;
    LODWORD(v20) = 6;
    *(_WORD *)((char *)&v20 + 5) = 1;
    HIBYTE(v20) = v14;
    uint64_t v21 = 0;
    int v22 = v10 & 1 | 4;
    AGGraphSetOutputValue();
    return outlined consume of ContentTransition.Storage(v16, 0x200000006, 1);
  }
  return result;
}

void protocol witness for static StatefulRule.initialValue.getter in conformance ViewListContentTransition<A>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 1;
  *(_DWORD *)(a1 + 24) = 0;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ViewListContentTransition<A>()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

double static ZIndexTraitKey.defaultValue.getter()
{
  return 0.0;
}

uint64_t (*ViewTraitCollection.zIndex.modify(double *a1))(double *a1)
{
  *((void *)a1 + 1) = v1;
  uint64_t v3 = swift_bridgeObjectRetain();
  double v4 = specialized ViewTraitCollection.value<A>(for:defaultValue:)(v3, 0.0);
  swift_bridgeObjectRelease();
  *a1 = v4;
  return ViewTraitCollection.zIndex.modify;
}

uint64_t ViewTraitCollection.zIndex.modify(double *a1)
{
  return specialized ViewTraitCollection.subscript.setter(*a1);
}

uint64_t sub_245DC6DF4@<X0>(double *a1@<X8>)
{
  uint64_t v2 = swift_bridgeObjectRetain();
  double v3 = specialized ViewTraitCollection.value<A>(for:defaultValue:)(v2, 0.0);
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

uint64_t sub_245DC6E40(double *a1)
{
  return specialized ViewTraitCollection.subscript.setter(*a1);
}

uint64_t sub_245DC6E68()
{
  return swift_getWitnessTable();
}

uint64_t (*DynamicLayoutScrollable.makeTarget<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v4 = v3;
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  uint64_t result = (uint64_t (*)())AGGraphGetWeakValue();
  if (result)
  {
    outlined init with copy of AnyTrackedValue((uint64_t)result, (uint64_t)v23);
    uint64_t v9 = v24;
    uint64_t v10 = v25;
    __swift_project_boxed_opaque_existential_1(v23, v24);
    uint64_t v22 = 2;
    uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 64))(a1, &v22, a2, a3, v9, v10);
    char v13 = v12;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
    if (v13)
    {
      return 0;
    }
    else
    {
      if (_threadTransactionData())
      {
        type metadata accessor for PropertyList.Element();
        swift_unknownObjectRetain();
        swift_dynamicCastClassUnconditional();
      }
      uint64_t v14 = swift_retain();
      uint64_t v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
      uint64_t v17 = v16;
      char v19 = v18;
      swift_release_n();
      uint64_t v20 = swift_allocObject();
      long long v21 = *(_OWORD *)(v4 + 16);
      *(_OWORD *)(v20 + 16) = *(_OWORD *)v4;
      *(_OWORD *)(v20 + 32) = v21;
      *(_OWORD *)(v20 + 48) = *(_OWORD *)(v4 + 32);
      *(void *)(v20 + 64) = *(void *)(v4 + 48);
      *(void *)(v20 + 72) = v11;
      *(void *)(v20 + 80) = v15;
      *(void *)(v20 + 88) = v17;
      *(unsigned char *)(v20 + 96) = v19 & 1;
      return partial apply for closure #1 in DynamicLayoutScrollable.makeTarget(at:);
    }
  }
  return result;
}

float64_t closure #1 in DynamicLayoutScrollable.makeTarget(at:)@<D0>(uint64_t a1@<X3>, uint64_t a2@<X4>, uint64_t a3@<X5>, char a4@<W6>, uint64_t a5@<X8>)
{
  type metadata accessor for [ViewGeometry](0, &lazy cache variable for type metadata for [ViewGeometry], (uint64_t)&type metadata for ViewGeometry, MEMORY[0x263F8D488]);
  Weakuint64_t Value = AGGraphGetWeakValue();
  if (WeakValue)
  {
    uint64_t v11 = *(void *)WeakValue;
    if (*(void *)(*(void *)WeakValue + 16) > a1)
    {
      char v12 = (void *)AGGraphGetWeakValue();
      if (v12)
      {
        char v13 = v12;
        uint64_t v14 = *v12;
        uint64_t v15 = (float64x2_t *)AGGraphGetWeakValue();
        if (v15)
        {
          if (a1 < 0)
          {
            __break(1u);
          }
          else
          {
            a4 &= 1u;
            float64x2_t v21 = vsubq_f64(*(float64x2_t *)(v13 + 3), vsubq_f64(*v15, *(float64x2_t *)(v13 + 1)));
            float64x2_t v22 = *v15;
            uint64_t v16 = v11 + (a1 << 6);
            long long v17 = *(_OWORD *)(v16 + 64);
            float64x2_t v28 = vsubq_f64(*(float64x2_t *)(v16 + 32), *v15);
            long long v29 = v17;
            uint64_t v18 = one-time initialization token for content;
            swift_retain();
            if (v18 == -1)
            {
LABEL_7:
              v26[0] = static ScrollCoordinateSpace.content;
              char v27 = 1;
              uint64_t v23 = v14;
              float64x2_t v24 = v22;
              float64x2_t v25 = v21;
              CGRect.convert(to:transform:)((uint64_t)v26, (double *)&v23);
              outlined destroy of CoordinateSpace((uint64_t)v26);
              swift_release();
              float64_t result = v28.f64[0];
              long long v20 = v29;
              *(float64x2_t *)a5 = v28;
              *(_OWORD *)(a5 + 16) = v20;
              *(void *)(a5 + 32) = a2;
              *(void *)(a5 + 40) = a3;
              *(unsigned char *)(a5 + 48) = a4;
              *(unsigned char *)(a5 + 49) = 0;
              return result;
            }
          }
          swift_once();
          goto LABEL_7;
        }
      }
    }
  }
  float64_t result = 0.0;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)a5 = 0u;
  *(_WORD *)(a5 + 48) = 256;
  return result;
}

uint64_t protocol witness for ScrollableContainer.children.getter in conformance DynamicLayoutScrollable()
{
  type metadata accessor for [Scrollable](0, &lazy cache variable for type metadata for [Scrollable], &lazy cache variable for type metadata for Scrollable, (uint64_t)&protocol descriptor for Scrollable, MEMORY[0x263F8D488]);
  uint64_t result = AGGraphGetWeakValue();
  if (result) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

double protocol witness for ScrollableContainer.parent.getter in conformance DynamicLayoutScrollable@<D0>(uint64_t a1@<X8>)
{
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for Scrollable);
  Weakuint64_t Value = AGGraphGetWeakValue();
  if (WeakValue)
  {
    outlined init with copy of AnyTrackedValue(WeakValue, a1);
  }
  else
  {
    *(void *)(a1 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t DynamicLayoutScrollable.visibleCollectionViewIDs.getter()
{
  void (*v18)(uint64_t *__return_ptr, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void v22[3];
  uint64_t v23;
  uint64_t v24;

  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  Weakuint64_t Value = AGGraphGetWeakValue();
  if (!WeakValue) {
    return MEMORY[0x263F8EE78];
  }
  outlined init with copy of AnyTrackedValue(WeakValue, (uint64_t)v22);
  uint64_t v1 = v23;
  uint64_t v2 = v24;
  __swift_project_boxed_opaque_existential_1(v22, v23);
  uint64_t v3 = ViewList.allViewIDs.getter(v1, v2);
  uint64_t v4 = *(uint64_t (**)(void))(*(void *)v3 + 88);
  int64_t v5 = v4();
  uint64_t result = v4();
  if ((result & 0x8000000000000000) == 0)
  {
    uint64_t result = v4();
    if (v5 < 0 || result < v5) {
      goto LABEL_22;
    }
    if (v5)
    {
      float64x2_t v21 = MEMORY[0x263F8EE78];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
      uint64_t v7 = 0;
      uint64_t v8 = v21;
      uint64_t v18 = *(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v3 + 96);
      int64_t v17 = v5;
      while (1)
      {
        uint64_t v9 = v3;
        v18(&v19, v7);
        int v11 = v19;
        int v10 = HIDWORD(v19);
        if (*(void *)(v20 + 16))
        {
          uint64_t v12 = *(void *)(v20 + 32);
          int v13 = *(unsigned __int8 *)(v20 + 52);
          swift_retain();
          swift_bridgeObjectRelease();
          if (v13) {
            int v10 = -1;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          uint64_t v12 = 0;
        }
        float64x2_t v21 = v8;
        unint64_t v15 = *(void *)(v8 + 16);
        unint64_t v14 = *(void *)(v8 + 24);
        if (v15 >= v14 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
          uint64_t v8 = v21;
        }
        *(void *)(v8 + 16) = v15 + 1;
        uint64_t v16 = v8 + 16 * v15;
        *(_DWORD *)(v16 + 32) = v11;
        *(_DWORD *)(v16 + 36) = v10;
        *(void *)(v16 + 40) = v12;
        uint64_t v3 = v9;
        uint64_t result = v4();
        if (v7 >= result) {
          break;
        }
        if (v17 == ++v7)
        {
          swift_release();
          goto LABEL_18;
        }
      }
      __break(1u);
      goto LABEL_21;
    }
    swift_release();
    uint64_t v8 = MEMORY[0x263F8EE78];
LABEL_18:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    return v8;
  }
LABEL_21:
  __break(1u);
LABEL_22:
  __break(1u);
  return result;
}

uint64_t DynamicLayoutScrollable.forEachVisibleSubview(_:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  uint64_t result = AGGraphGetWeakValue();
  if (result)
  {
    outlined init with copy of AnyTrackedValue(result, (uint64_t)v21);
    type metadata accessor for [ViewGeometry](0, &lazy cache variable for type metadata for [ViewGeometry], (uint64_t)&type metadata for ViewGeometry, MEMORY[0x263F8D488]);
    Weakuint64_t Value = AGGraphGetWeakValue();
    if (WeakValue)
    {
      char v6 = (uint64_t *)WeakValue;
      uint64_t v7 = AGGraphGetWeakValue();
      if (v7)
      {
        uint64_t v8 = *v6;
        long long v9 = *(_OWORD *)v7;
        long long v10 = *(_OWORD *)(v7 + 16);
        uint64_t v25 = *(void *)(v7 + 32);
        v24[0] = v9;
        v24[1] = v10;
        char v20 = 0;
        uint64_t v18 = 0;
        uint64_t v19 = 0;
        uint64_t v11 = v22;
        uint64_t v12 = v23;
        __swift_project_boxed_opaque_existential_1(v21, v22);
        uint64_t Attribute = AGWeakAttributeGetAttribute();
        BOOL v14 = Attribute == *MEMORY[0x263F288F8];
        if (Attribute == *MEMORY[0x263F288F8]) {
          uint64_t v15 = 0;
        }
        else {
          uint64_t v15 = Attribute;
        }
        MEMORY[0x270FA5388](Attribute);
        void v16[2] = v8;
        v16[3] = &v18;
        v16[4] = v24;
        v16[5] = a1;
        v16[6] = a2;
        v16[7] = &v20;
        swift_bridgeObjectRetain();
        outlined retain of ViewTransform((uint64_t)v24);
        BOOL v17 = v14;
        ViewList.applyIDs(from:listAttribute:to:)((uint64_t)&v19, v15 | ((unint64_t)v14 << 32), (uint64_t (*)(unint64_t *))partial apply for closure #1 in DynamicLayoutScrollable.forEachVisibleSubview(_:), (uint64_t)v16, v11, v12);
        swift_bridgeObjectRelease();
        outlined release of ViewTransform((uint64_t)v24);
      }
    }
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  }
  return result;
}

BOOL closure #1 in DynamicLayoutScrollable.forEachVisibleSubview(_:)(void *a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *, unsigned char *), uint64_t a6, unsigned char *a7)
{
  uint64_t v9 = *a3;
  if ((*a3 & 0x8000000000000000) == 0 && v9 < *(void *)(a2 + 16))
  {
    uint64_t v12 = a1[1];
    uint64_t v13 = *(void *)a4;
    uint64_t v14 = a2 + (v9 << 6);
    v18[0] = *a1;
    v18[1] = v12;
    long long v15 = *(_OWORD *)(v14 + 64);
    long long v19 = *(_OWORD *)(v14 + 32);
    long long v20 = v15;
    uint64_t v21 = v13;
    long long v16 = *(_OWORD *)(a4 + 24);
    long long v22 = *(_OWORD *)(a4 + 8);
    long long v23 = v16;
    swift_bridgeObjectRetain();
    outlined retain of ViewTransform(a4);
    a5(v18, a7);
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v9 = *a3;
  }
  *a3 = v9 + 1;
  return (*a7 & 1) == 0;
}

uint64_t closure #1 in DynamicLayoutScrollable.subviewClosestTo(rect:)(uint64_t result, double a2, double a3, uint64_t a4, double *a5, uint64_t a6)
{
  double v6 = *(double *)(result + 16);
  double v7 = *(double *)(result + 24);
  double v8 = sqrt((a2 - v6) * (a2 - v6) + (a3 - v7) * (a3 - v7));
  if (v8 < *a5)
  {
    uint64_t v9 = *(void *)(result + 80);
    uint64_t v10 = *(void *)result;
    uint64_t v11 = *(void *)(result + 8);
    *a5 = v8;
    uint64_t v12 = *(void *)a6;
    uint64_t v13 = *(void *)(a6 + 8);
    *(void *)a6 = v10;
    *(void *)(a6 + 8) = v11;
    *(double *)(a6 + 16) = v6;
    *(double *)(a6 + 24) = v7;
    long long v14 = *(_OWORD *)(result + 48);
    *(_OWORD *)(a6 + 32) = *(_OWORD *)(result + 32);
    *(_OWORD *)(a6 + 48) = v14;
    *(_OWORD *)(a6 + 64) = *(_OWORD *)(result + 64);
    *(void *)(a6 + 80) = v9;
    swift_retain();
    swift_bridgeObjectRetain();
    return outlined consume of ScrollableCollectionSubview?(v12, v13);
  }
  return result;
}

uint64_t DynamicLayoutScrollable.firstCollectionViewIndex(of:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  Weakuint64_t Value = AGGraphGetWeakValue();
  if (!WeakValue) {
    return 0;
  }
  outlined init with copy of AnyTrackedValue(WeakValue, (uint64_t)v9);
  uint64_t v4 = v10;
  uint64_t v5 = v11;
  __swift_project_boxed_opaque_existential_1(v9, v10);
  v8[0] = v1;
  v8[1] = v2;
  uint64_t v6 = ViewList.firstOffset(of:)(v8, v4, v5);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  return v6;
}

uint64_t DynamicLayoutScrollable.applyCollectionViewIDs(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  Weakuint64_t Value = AGGraphGetWeakValue();
  if (WeakValue)
  {
    outlined init with copy of AnyTrackedValue(WeakValue, (uint64_t)v16);
    uint64_t v7 = v17;
    uint64_t v8 = v18;
    __swift_project_boxed_opaque_existential_1(v16, v17);
    uint64_t Attribute = AGWeakAttributeGetAttribute();
    MEMORY[0x270FA5388](Attribute);
    _OWORD v14[2] = a2;
    v14[3] = a3;
    unsigned __int8 v15 = v10;
    char v12 = ViewList.applyIDs(from:listAttribute:to:)(a1, v11 | ((unint64_t)v10 << 32), (uint64_t (*)(unint64_t *))partial apply for closure #1 in DynamicLayoutScrollable.applyCollectionViewIDs(from:to:), (uint64_t)v14, v7, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  }
  else
  {
    char v12 = 1;
  }
  return v12 & 1;
}

BOOL closure #1 in DynamicLayoutScrollable.applyCollectionViewIDs(from:to:)(int *a1, void (*a2)(_DWORD *, char *))
{
  int v3 = *a1;
  int v4 = a1[1];
  uint64_t v5 = *((void *)a1 + 1);
  char v11 = 0;
  if (*(void *)(v5 + 16))
  {
    uint64_t v6 = *(void *)(v5 + 32);
    int v7 = *(unsigned __int8 *)(v5 + 52);
    swift_retain();
    if (v7) {
      int v4 = -1;
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  v9[0] = v3;
  v9[1] = v4;
  uint64_t v10 = v6;
  a2(v9, &v11);
  swift_release();
  return (v11 & 1) == 0;
}

void DynamicLayoutScrollable.collectionViewID(for:)(void *a1@<X0>, unint64_t *a2@<X8>)
{
  Weakuint64_t Value = (unint64_t *)AGGraphGetWeakValue();
  if (!WeakValue) {
    goto LABEL_8;
  }
  unint64_t v5 = *WeakValue;
  swift_bridgeObjectRetain();
  id v6 = a1;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  uint64_t v7 = specialized Sequence.first(where:)(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();

  if (!v7) {
    goto LABEL_8;
  }
  (*(void (**)(unint64_t *__return_ptr))(*(void *)v7 + 184))(&v12);
  swift_release();
  if (v13)
  {
    unsigned int v8 = v12;
    unint64_t v9 = HIDWORD(v12);
    if (*(void *)(v13 + 16))
    {
      unint64_t v10 = *(void *)(v13 + 32);
      int v11 = *(unsigned __int8 *)(v13 + 52);
      swift_retain();
      swift_bridgeObjectRelease();
      if (v11) {
        LODWORD(v9) = -1;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      unint64_t v10 = 0;
    }
    *a2 = v8 | ((unint64_t)v9 << 32);
    a2[1] = v10;
  }
  else
  {
LABEL_8:
    *(_OWORD *)a2 = xmmword_24619B550;
  }
}

double protocol witness for ScrollableCollection.subviewClosestTo(rect:) in conformance DynamicLayoutScrollable@<D0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  uint64_t v17 = 0x7FF0000000000000;
  uint64_t v16 = 0;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v11 = 0u;
  *(double *)&v10[2] = a2;
  *(double *)&void v10[3] = a3;
  *(double *)&void v10[4] = a4;
  *(double *)&v10[5] = a5;
  v10[6] = &v17;
  v10[7] = &v11;
  DynamicLayoutScrollable.forEachVisibleSubview(_:)((uint64_t)partial apply for closure #1 in DynamicLayoutScrollable.subviewClosestTo(rect:), (uint64_t)v10);
  uint64_t v6 = v16;
  long long v7 = v12;
  *(_OWORD *)a1 = v11;
  *(_OWORD *)(a1 + 16) = v7;
  long long v8 = v14;
  *(_OWORD *)(a1 + 32) = v13;
  *(_OWORD *)(a1 + 48) = v8;
  double result = *(double *)&v15;
  *(_OWORD *)(a1 + 64) = v15;
  *(void *)(a1 + 80) = v6;
  return result;
}

uint64_t protocol witness for ScrollableCollection.firstCollectionViewIndex(of:) in conformance DynamicLayoutScrollable(uint64_t *a1)
{
  return DynamicLayoutScrollable.firstCollectionViewIndex(of:)(a1);
}

uint64_t protocol witness for ScrollableCollection.scroll(toCollectionViewID:anchor:) in conformance DynamicLayoutScrollable(uint64_t *a1)
{
  return specialized DynamicLayoutScrollable.scroll(toCollectionViewID:anchor:)(a1) & 1;
}

uint64_t specialized Sequence.first(where:)(unint64_t a1)
{
  if (a1 >> 62)
  {
LABEL_15:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    if (v2) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v2)
    {
LABEL_3:
      uint64_t v3 = 4;
      do
      {
        uint64_t v4 = v3 - 4;
        if ((a1 & 0xC000000000000001) != 0)
        {
          uint64_t v5 = MEMORY[0x24C523D60](v3 - 4, a1);
          BOOL v6 = __OFADD__(v4, 1);
          uint64_t v7 = v3 - 3;
          if (v6) {
            goto LABEL_14;
          }
        }
        else
        {
          uint64_t v5 = *(void *)(a1 + 8 * v3);
          swift_retain();
          BOOL v6 = __OFADD__(v4, 1);
          uint64_t v7 = v3 - 3;
          if (v6)
          {
LABEL_14:
            __break(1u);
            goto LABEL_15;
          }
        }
        if (AGSubgraphIsAncestor())
        {
          swift_bridgeObjectRelease();
          return v5;
        }
        swift_release();
        ++v3;
      }
      while (v7 != v2);
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized DynamicLayoutScrollable.scroll(toCollectionViewID:anchor:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  Weakuint64_t Value = AGGraphGetWeakValue();
  if (!WeakValue) {
    goto LABEL_5;
  }
  outlined init with copy of AnyTrackedValue(WeakValue, (uint64_t)v21);
  uint64_t v6 = v22;
  uint64_t v7 = v23;
  __swift_project_boxed_opaque_existential_1(v21, v22);
  v20[0] = v3;
  v20[1] = v4;
  uint64_t v8 = ViewList.firstOffset(of:)(v20, v6, v7);
  LOBYTE(v7) = v9;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  if (v7)
  {
LABEL_5:
    char v10 = 0;
  }
  else
  {
    if (_threadTransactionData())
    {
      type metadata accessor for PropertyList.Element();
      swift_unknownObjectRetain();
      swift_dynamicCastClassUnconditional();
    }
    uint64_t v11 = swift_retain();
    uint64_t v12 = specialized closure #1 in PropertyList.subscript.getter(v11);
    uint64_t v14 = v13;
    char v16 = v15;
    swift_release_n();
    uint64_t v17 = swift_allocObject();
    long long v18 = *(_OWORD *)(v2 + 16);
    *(_OWORD *)(v17 + 16) = *(_OWORD *)v2;
    *(_OWORD *)(v17 + 32) = v18;
    *(_OWORD *)(v17 + 48) = *(_OWORD *)(v2 + 32);
    *(void *)(v17 + 64) = *(void *)(v2 + 48);
    *(void *)(v17 + 72) = v8;
    *(void *)(v17 + 80) = v12;
    *(void *)(v17 + 88) = v14;
    *(unsigned char *)(v17 + 96) = v16 & 1;
    char v10 = specialized ScrollableContainer.setParentTarget(_:)((uint64_t)partial apply for closure #1 in DynamicLayoutScrollable.makeTarget(at:), v17);
    swift_release();
  }
  return v10 & 1;
}

uint64_t sub_245DC80EC()
{
  return swift_deallocObject();
}

BOOL partial apply for closure #1 in DynamicLayoutScrollable.applyCollectionViewIDs(from:to:)(int *a1)
{
  return closure #1 in DynamicLayoutScrollable.applyCollectionViewIDs(from:to:)(a1, *(void (**)(_DWORD *, char *))(v1 + 16));
}

uint64_t partial apply for closure #1 in DynamicLayoutScrollable.subviewClosestTo(rect:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in DynamicLayoutScrollable.subviewClosestTo(rect:)(a1, *(double *)(v2 + 16), *(double *)(v2 + 24), a2, *(double **)(v2 + 48), *(void *)(v2 + 56));
}

BOOL partial apply for closure #1 in DynamicLayoutScrollable.forEachVisibleSubview(_:)(void *a1)
{
  return closure #1 in DynamicLayoutScrollable.forEachVisibleSubview(_:)(a1, *(void *)(v1 + 16), *(uint64_t **)(v1 + 24), *(void *)(v1 + 32), *(void (**)(void *, unsigned char *))(v1 + 40), *(void *)(v1 + 48), *(unsigned char **)(v1 + 56));
}

uint64_t outlined consume of ScrollableCollectionSubview?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t sub_245DC816C()
{
  return swift_deallocObject();
}

uint64_t sub_245DC817C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_245DC81B4()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #9 in static Layout.makeDynamicView(root:inputs:properties:list:)()
{
  return implicit closure #9 in static Layout.makeDynamicView(root:inputs:properties:list:)(*(void *)(v0 + 16));
}

uint64_t lazy protocol witness table accessor for type PreferenceTransform<ScrollTargetRole.ContentKey> and conformance PreferenceTransform<A>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for _TraitWritingModifier<ZIndexTraitKey>(255, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PreferenceTransform);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of ScrollStateRequestTransform(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_245DC8294()
{
  return swift_deallocObject();
}

void *type metadata accessor for DynamicLayoutViewChildGeometry()
{
  return &unk_26FA72240;
}

uint64_t initializeWithCopy for DynamicLayoutViewAdaptor.MakeTransition(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = a2 + 24;
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 48) = v5;
  uint64_t v6 = v5;
  uint64_t v7 = **(void (***)(uint64_t, uint64_t, uint64_t))(v5 - 8);
  swift_bridgeObjectRetain();
  v7(a1 + 24, v4, v6);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 76) = *(unsigned char *)(a2 + 76);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  uint64_t v8 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  uint64_t v9 = *(void *)(a2 + 176);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = v9;
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DynamicLayoutViewAdaptor.MakeTransition(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 24), (uint64_t *)(a2 + 24));
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  int v4 = *(_DWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 76) = *(unsigned char *)(a2 + 76);
  *(_DWORD *)(a1 + 72) = v4;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  uint64_t v5 = *(void *)(a2 + 176);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = v5;
  swift_retain();
  swift_release();
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  *(_DWORD *)(a1 + 196) = *(_DWORD *)(a2 + 196);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  return a1;
}

uint64_t assignWithTake for DynamicLayoutViewAdaptor.MakeTransition(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 24);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v4;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 76) = *(unsigned char *)(a2 + 76);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_release();
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_release();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  swift_release();
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  return a1;
}

uint64_t getEnumTagSinglePayload for DynamicLayoutViewAdaptor.MakeTransition(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 201)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DynamicLayoutViewAdaptor.MakeTransition(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 200) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 201) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 201) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for DynamicLayoutViewAdaptor.MakeTransition()
{
  return &unk_26FA6ADD8;
}

ValueMetadata *type metadata accessor for DynamicLayoutViewAdaptor()
{
  return &type metadata for DynamicLayoutViewAdaptor;
}

uint64_t assignWithCopy for DynamicLayoutComputer(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for DynamicLayoutComputer(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for DynamicLayoutComputer(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 36)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DynamicLayoutComputer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 36) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 36) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

__n128 __swift_memcpy56_4(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for DynamicLayoutScrollable(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 56)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for DynamicLayoutScrollable(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 56) = v3;
  return result;
}

ValueMetadata *type metadata accessor for DynamicLayoutScrollable()
{
  return &type metadata for DynamicLayoutScrollable;
}

unint64_t instantiation function for generic protocol witness table for DynamicLayoutViewChildGeometry(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type DynamicLayoutViewChildGeometry and conformance DynamicLayoutViewChildGeometry();
  *(void *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **associated type witness table accessor for DynamicContainerAdaptor.Item : DynamicContainerItem in DynamicLayoutViewAdaptor()
{
  return &protocol witness table for DynamicViewListItem;
}

uint64_t sub_245DC89AC()
{
  return swift_deallocObject();
}

float64_t partial apply for closure #1 in DynamicLayoutScrollable.makeTarget(at:)@<D0>(uint64_t a1@<X8>)
{
  return closure #1 in DynamicLayoutScrollable.makeTarget(at:)(*(void *)(v1 + 72), *(void *)(v1 + 80), *(void *)(v1 + 88), *(unsigned char *)(v1 + 96), a1);
}

uint64_t sub_245DC89D0()
{
  swift_release();

  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type ViewListArchivedAnimation and conformance ViewListArchivedAnimation()
{
  unint64_t result = lazy protocol witness table cache variable for type ViewListArchivedAnimation and conformance ViewListArchivedAnimation;
  if (!lazy protocol witness table cache variable for type ViewListArchivedAnimation and conformance ViewListArchivedAnimation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewListArchivedAnimation and conformance ViewListArchivedAnimation);
  }
  return result;
}

uint64_t sub_245DC8A5C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  unint64_t v2 = (int *)(type metadata accessor for TransitionHelper() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v2 + 80) + 101) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v2 + 80);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 48);
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0 + v2[13] + v3, v1);
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in DynamicLayoutViewAdaptor.MakeTransition.makeArchivedTransition<A>(helper:)@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  void (*v10)(uint64_t *__return_ptr, long long *);
  uint64_t v11;
  uint64_t vars8;

  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v7 = *(void *)(type metadata accessor for TransitionHelper() - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 101) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v9 = (*(void *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  char v10 = *(void (**)(uint64_t *__return_ptr, long long *))(v2 + v9);
  uint64_t v11 = *(void *)(v2 + v9 + 8);

  return closure #1 in DynamicLayoutViewAdaptor.MakeTransition.makeArchivedTransition<A>(helper:)(a1, v2 + 32, v2 + v8, v10, v11, v5, v6, a2);
}

uint64_t sub_245DC8C54()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t type metadata accessor for ViewListContentTransition()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for ViewListContentTransition()
{
  uint64_t result = type metadata accessor for TransitionHelper();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ViewListContentTransition(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  long long v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = ((v6 + 12) & ~v6) + v7;
  if ((v6 | 3uLL) > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || (((v8 & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFFCLL) + 4 > 0x18)
  {
    uint64_t v11 = *a2;
    *long long v4 = *a2;
    long long v4 = (uint64_t *)(v11 + ((v6 + 16) & ~(v6 | 3)));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    uint64_t v12 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v13 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    _DWORD *v12 = *v13;
    uint64_t v14 = (_DWORD *)(((unint64_t)v12 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    char v15 = (_DWORD *)(((unint64_t)v13 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    _DWORD *v14 = *v15;
    uint64_t v16 = ((unint64_t)v14 + v6 + 4) & ~v6;
    uint64_t v17 = ((unint64_t)v15 + v6 + 4) & ~v6;
    (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v16, v17);
    *(unsigned char *)(v16 + v7) = *(unsigned char *)(v17 + v7);
    long long v18 = (_DWORD *)(((unint64_t)v4 + v8 + 4) & 0xFFFFFFFFFFFFFFFCLL);
    long long v19 = (_DWORD *)(((unint64_t)a2 + v8 + 4) & 0xFFFFFFFFFFFFFFFCLL);
    *long long v18 = *v19;
    *(_DWORD *)(((unint64_t)v18 + 7) & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)(((unint64_t)v19 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  }
  return v4;
}

_DWORD *initializeWithCopy for ViewListContentTransition(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v6 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v5 = *v6;
  uint64_t v7 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v8 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v7 = *v8;
  uint64_t v9 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v10 = v9 + 16;
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = ((unint64_t)v7 + v11 + 4) & ~v11;
  uint64_t v13 = ((unint64_t)v8 + v11 + 4) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v9 + 16))(v12, v13);
  uint64_t v14 = *(void *)(v10 + 48);
  *(unsigned char *)(v14 + v12) = *(unsigned char *)(v14 + v13);
  uint64_t v15 = v14 + ((v11 + 12) & ~v11) + 4;
  uint64_t v16 = (_DWORD *)(((unint64_t)a1 + v15) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v17 = (_DWORD *)(((unint64_t)a2 + v15) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v16 = *v17;
  *(_DWORD *)(((unint64_t)v16 + 7) & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)(((unint64_t)v17 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  return a1;
}

_DWORD *assignWithCopy for ViewListContentTransition(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v6 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v5 = *v6;
  uint64_t v7 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v8 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v7 = *v8;
  uint64_t v9 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v10 = v9 + 24;
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = ((unint64_t)v7 + v11 + 4) & ~v11;
  uint64_t v13 = ((unint64_t)v8 + v11 + 4) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v9 + 24))(v12, v13);
  uint64_t v14 = *(void *)(v10 + 40);
  *(unsigned char *)(v14 + v12) = *(unsigned char *)(v14 + v13);
  uint64_t v15 = v14 + ((v11 + 12) & ~v11) + 4;
  uint64_t v16 = (_DWORD *)(((unint64_t)a1 + v15) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v17 = (_DWORD *)(((unint64_t)a2 + v15) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v16 = *v17;
  *(_DWORD *)(((unint64_t)v16 + 7) & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)(((unint64_t)v17 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  return a1;
}

_DWORD *initializeWithTake for ViewListContentTransition(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v6 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v5 = *v6;
  uint64_t v7 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v8 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v7 = *v8;
  uint64_t v9 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v10 = v9 + 32;
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = ((unint64_t)v7 + v11 + 4) & ~v11;
  uint64_t v13 = ((unint64_t)v8 + v11 + 4) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v9 + 32))(v12, v13);
  uint64_t v14 = *(void *)(v10 + 32);
  *(unsigned char *)(v14 + v12) = *(unsigned char *)(v14 + v13);
  uint64_t v15 = v14 + ((v11 + 12) & ~v11) + 4;
  uint64_t v16 = (_DWORD *)(((unint64_t)a1 + v15) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v17 = (_DWORD *)(((unint64_t)a2 + v15) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v16 = *v17;
  *(_DWORD *)(((unint64_t)v16 + 7) & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)(((unint64_t)v17 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  return a1;
}

_DWORD *assignWithTake for ViewListContentTransition(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v6 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v5 = *v6;
  uint64_t v7 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v8 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v7 = *v8;
  uint64_t v9 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v10 = v9 + 40;
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = ((unint64_t)v7 + v11 + 4) & ~v11;
  uint64_t v13 = ((unint64_t)v8 + v11 + 4) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v9 + 40))(v12, v13);
  uint64_t v14 = *(void *)(v10 + 24);
  *(unsigned char *)(v14 + v12) = *(unsigned char *)(v14 + v13);
  uint64_t v15 = v14 + ((v11 + 12) & ~v11) + 4;
  uint64_t v16 = (_DWORD *)(((unint64_t)a1 + v15) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v17 = (_DWORD *)(((unint64_t)a2 + v15) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v16 = *v17;
  *(_DWORD *)(((unint64_t)v16 + 7) & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)(((unint64_t)v17 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  return a1;
}

uint64_t getEnumTagSinglePayload for ViewListContentTransition(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = *(void *)(v4 + 64);
  if (v5 <= 0xFD) {
    unsigned int v8 = 253;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v8 < a2)
  {
    unint64_t v9 = ((((((v6 + 12) & ~v6) + v7) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFFCLL) + 4;
    unsigned int v10 = a2 - v8;
    uint64_t v11 = v9 & 0xFFFFFFFC;
    if ((v9 & 0xFFFFFFFC) != 0) {
      unsigned int v12 = 2;
    }
    else {
      unsigned int v12 = v10 + 1;
    }
    if (v12 >= 0x10000) {
      unsigned int v13 = 4;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v12 < 0x100) {
      unsigned int v13 = 1;
    }
    if (v12 >= 2) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    switch(v14)
    {
      case 1:
        int v15 = *((unsigned __int8 *)a1 + v9);
        if (!v15) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v15 = *(unsigned __int16 *)((char *)a1 + v9);
        if (v15) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x245DC9400);
      case 4:
        int v15 = *(_DWORD *)((char *)a1 + v9);
        if (!v15) {
          break;
        }
LABEL_22:
        int v17 = v15 - 1;
        if (v11)
        {
          int v17 = 0;
          LODWORD(v11) = *a1;
        }
        return v8 + (v11 | v17) + 1;
      default:
        break;
    }
  }
  unint64_t v18 = ((((((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + v6 + 4) & ~v6;
  if (v5 >= 0xFD) {
    return (*(uint64_t (**)(unint64_t))(v4 + 48))(v18);
  }
  unsigned int v19 = *(unsigned __int8 *)(v18 + v7);
  if (v19 >= 3) {
    return v19 - 2;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for ViewListContentTransition(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFD) {
    unsigned int v8 = 253;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v11 = ((((((v9 + 12) & ~v9) + v10) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFFCLL) + 4;
  if (v8 >= a3)
  {
    int v15 = 0;
    int v16 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v15)
      {
        case 1:
          a1[v11] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v11] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_39;
        case 4:
          *(_DWORD *)&a1[v11] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            unint64_t v19 = (((((unint64_t)(a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + v9 + 4) & ~v9;
            if (v7 < 0xFD)
            {
              *(unsigned char *)(v19 + v10) = a2 + 2;
            }
            else
            {
              long long v20 = *(void (**)(unint64_t))(v6 + 56);
              v20(v19);
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v12 = a3 - v8;
    if (((((((v9 + 12) & ~v9) + v10) & 0xFFFFFFFC) + 11) & 0xFFFFFFFC) == 0xFFFFFFFC) {
      unsigned int v13 = v12 + 1;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v13 >= 0x10000) {
      int v14 = 4;
    }
    else {
      int v14 = 2;
    }
    if (v13 < 0x100) {
      int v14 = 1;
    }
    if (v13 >= 2) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
    int v16 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((((v9 + 12) & ~v9) + v10) & 0xFFFFFFFC) + 11) & 0xFFFFFFFC) == 0xFFFFFFFC) {
    int v17 = v16;
  }
  else {
    int v17 = 1;
  }
  if (((((((v9 + 12) & ~v9) + v10) & 0xFFFFFFFC) + 11) & 0xFFFFFFFC) != 0xFFFFFFFC)
  {
    int v18 = ~v8 + a2;
    bzero(a1, ((((((v9 + 12) & ~v9) + v10) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFFCLL) + 4);
    *(_DWORD *)a1 = v18;
  }
  switch(v15)
  {
    case 1:
      a1[v11] = v17;
      break;
    case 2:
      *(_WORD *)&a1[v11] = v17;
      break;
    case 3:
LABEL_39:
      __break(1u);
      JUMPOUT(0x245DC9610);
    case 4:
      *(_DWORD *)&a1[v11] = v17;
      break;
    default:
      return;
  }
}

void *type metadata accessor for ViewListArchivedAnimation()
{
  return &unk_26FA6D7A8;
}

uint64_t initializeWithCopy for ViewListArchivedAnimation.Effect(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 21) = *(void *)(a2 + 21);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ViewListArchivedAnimation.Effect(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  long long v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 21) = *(void *)(a2 + 21);
  *(_OWORD *)(a1 + 8) = v4;
  return a1;
}

__n128 __swift_memcpy29_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 13) = *(_OWORD *)(a2 + 13);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ViewListArchivedAnimation.Effect(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 21) = *(void *)(a2 + 21);
  return a1;
}

uint64_t getEnumTagSinglePayload for ViewListArchivedAnimation.Effect(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 29)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ViewListArchivedAnimation.Effect(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 28) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 29) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 29) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ViewListArchivedAnimation.Effect()
{
  return &type metadata for ViewListArchivedAnimation.Effect;
}

uint64_t getEnumTagSinglePayload for TransitionHelper(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = *(void *)(v4 + 64);
  if (v5 <= 0xFD) {
    unsigned int v8 = 253;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v9 = a2 - v8;
  if (a2 <= v8) {
    goto LABEL_23;
  }
  uint64_t v10 = v7 + ((v6 + 12) & ~v6) + 1;
  char v11 = 8 * v10;
  if (v10 <= 3)
  {
    unsigned int v14 = ((v9 + ~(-1 << v11)) >> v11) + 1;
    if (HIWORD(v14))
    {
      int v12 = *(_DWORD *)((char *)a1 + v10);
      if (!v12) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v14 > 0xFF)
    {
      int v12 = *(unsigned __int16 *)((char *)a1 + v10);
      if (!*(unsigned __int16 *)((char *)a1 + v10)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v14 < 2)
    {
LABEL_23:
      unint64_t v16 = ((((((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + v6 + 4) & ~v6;
      if (v5 >= 0xFD) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(v16);
      }
      unsigned int v17 = *(unsigned __int8 *)(v16 + v7);
      if (v17 >= 3) {
        return v17 - 2;
      }
      else {
        return 0;
      }
    }
  }
  int v12 = *((unsigned __int8 *)a1 + v10);
  if (!*((unsigned char *)a1 + v10)) {
    goto LABEL_23;
  }
LABEL_15:
  int v15 = (v12 - 1) << v11;
  if (v10 > 3) {
    int v15 = 0;
  }
  if (v10)
  {
    if (v10 > 3) {
      LODWORD(v10) = 4;
    }
    switch((int)v10)
    {
      case 2:
        LODWORD(v10) = *a1;
        break;
      case 3:
        LODWORD(v10) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v10) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v10) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v8 + (v10 | v15) + 1;
}

void storeEnumTagSinglePayload for TransitionHelper(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFD) {
    unsigned int v8 = 253;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v11 = v10 + ((v9 + 12) & ~v9) + 1;
  BOOL v12 = a3 >= v8;
  unsigned int v13 = a3 - v8;
  if (v13 != 0 && v12)
  {
    if (v11 <= 3)
    {
      unsigned int v17 = ((v13 + ~(-1 << (8 * v11))) >> (8 * v11)) + 1;
      if (HIWORD(v17))
      {
        int v14 = 4;
      }
      else if (v17 >= 0x100)
      {
        int v14 = 2;
      }
      else
      {
        int v14 = v17 > 1;
      }
    }
    else
    {
      int v14 = 1;
    }
  }
  else
  {
    int v14 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v15 = ~v8 + a2;
    if (v11 < 4)
    {
      int v16 = (v15 >> (8 * v11)) + 1;
      if (v10 + ((v9 + 12) & ~v9) != -1)
      {
        int v18 = v15 & ~(-1 << (8 * v11));
        bzero(a1, v11);
        if (v11 == 3)
        {
          *(_WORD *)a1 = v18;
          a1[2] = BYTE2(v18);
        }
        else if (v11 == 2)
        {
          *(_WORD *)a1 = v18;
        }
        else
        {
          *a1 = v18;
        }
      }
    }
    else
    {
      bzero(a1, v11);
      *(_DWORD *)a1 = v15;
      int v16 = 1;
    }
    switch(v14)
    {
      case 1:
        a1[v11] = v16;
        return;
      case 2:
        *(_WORD *)&a1[v11] = v16;
        return;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v11] = v16;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v11] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v11] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_39:
      __break(1u);
      JUMPOUT(0x245DC9C30);
    case 4:
      *(_DWORD *)&a1[v11] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        unint64_t v19 = (((((unint64_t)(a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + v9 + 4) & ~v9;
        if (v7 < 0xFD)
        {
          *(unsigned char *)(v19 + v10) = a2 + 2;
        }
        else
        {
          long long v20 = *(void (**)(unint64_t))(v6 + 56);
          v20(v19);
        }
      }
      return;
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for TransitionHelper(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64);
  if ((v5 | 3uLL) > 7 || (*(_DWORD *)(v4 + 80) & 0x100000) != 0 || v6 + ((v5 + 12) & (unint64_t)~v5) + 1 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v9 + ((v5 + 16) & ~(v5 | 3)));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    uint64_t v10 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    size_t v11 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *uint64_t v10 = *v11;
    BOOL v12 = (_DWORD *)(((unint64_t)v10 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    unsigned int v13 = (_DWORD *)(((unint64_t)v11 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    _DWORD *v12 = *v13;
    uint64_t v14 = ((unint64_t)v12 + v5 + 4) & ~v5;
    uint64_t v15 = ((unint64_t)v13 + v5 + 4) & ~v5;
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v14, v15);
    *(unsigned char *)(v14 + v6) = *(unsigned char *)(v15 + v6);
  }
  return v3;
}

_DWORD *assignWithCopy for TransitionHelper(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v4 = *v5;
  uint64_t v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  unsigned int v7 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v6 = *v7;
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v9 = v8 + 24;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = ((unint64_t)v6 + v10 + 4) & ~v10;
  uint64_t v12 = ((unint64_t)v7 + v10 + 4) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v11, v12);
  *(unsigned char *)(*(void *)(v9 + 40) + v11) = *(unsigned char *)(*(void *)(v9 + 40) + v12);
  return a1;
}

_DWORD *initializeWithTake for TransitionHelper(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v4 = *v5;
  uint64_t v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  unsigned int v7 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v6 = *v7;
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v9 = v8 + 32;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = ((unint64_t)v6 + v10 + 4) & ~v10;
  uint64_t v12 = ((unint64_t)v7 + v10 + 4) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v11, v12);
  *(unsigned char *)(*(void *)(v9 + 32) + v11) = *(unsigned char *)(*(void *)(v9 + 32) + v12);
  return a1;
}

_DWORD *assignWithTake for TransitionHelper(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v4 = *v5;
  uint64_t v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  unsigned int v7 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v6 = *v7;
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v9 = v8 + 40;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = ((unint64_t)v6 + v10 + 4) & ~v10;
  uint64_t v12 = ((unint64_t)v7 + v10 + 4) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 40))(v11, v12);
  *(unsigned char *)(*(void *)(v9 + 24) + v11) = *(unsigned char *)(*(void *)(v9 + 24) + v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for ViewListTransition(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = *(void *)(v4 + 64);
  if (v5 <= 0xFD) {
    unsigned int v8 = 253;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v9 = a2 - v8;
  if (a2 <= v8) {
    goto LABEL_23;
  }
  uint64_t v10 = v7 + ((v6 + 12) & ~v6) + 1;
  char v11 = 8 * v10;
  if (v10 <= 3)
  {
    unsigned int v14 = ((v9 + ~(-1 << v11)) >> v11) + 1;
    if (HIWORD(v14))
    {
      int v12 = *(_DWORD *)((char *)a1 + v10);
      if (!v12) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v14 > 0xFF)
    {
      int v12 = *(unsigned __int16 *)((char *)a1 + v10);
      if (!*(unsigned __int16 *)((char *)a1 + v10)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v14 < 2)
    {
LABEL_23:
      unint64_t v16 = ((((((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + v6 + 4) & ~v6;
      if (v5 >= 0xFD) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(v16);
      }
      unsigned int v17 = *(unsigned __int8 *)(v16 + v7);
      if (v17 >= 3) {
        return v17 - 2;
      }
      else {
        return 0;
      }
    }
  }
  int v12 = *((unsigned __int8 *)a1 + v10);
  if (!*((unsigned char *)a1 + v10)) {
    goto LABEL_23;
  }
LABEL_15:
  int v15 = (v12 - 1) << v11;
  if (v10 > 3) {
    int v15 = 0;
  }
  if (v10)
  {
    if (v10 > 3) {
      LODWORD(v10) = 4;
    }
    switch((int)v10)
    {
      case 2:
        LODWORD(v10) = *a1;
        break;
      case 3:
        LODWORD(v10) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v10) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v10) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v8 + (v10 | v15) + 1;
}

void storeEnumTagSinglePayload for ViewListTransition(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFD) {
    unsigned int v8 = 253;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v11 = v10 + ((v9 + 12) & ~v9) + 1;
  BOOL v12 = a3 >= v8;
  unsigned int v13 = a3 - v8;
  if (v13 != 0 && v12)
  {
    if (v11 <= 3)
    {
      unsigned int v17 = ((v13 + ~(-1 << (8 * v11))) >> (8 * v11)) + 1;
      if (HIWORD(v17))
      {
        int v14 = 4;
      }
      else if (v17 >= 0x100)
      {
        int v14 = 2;
      }
      else
      {
        int v14 = v17 > 1;
      }
    }
    else
    {
      int v14 = 1;
    }
  }
  else
  {
    int v14 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v15 = ~v8 + a2;
    if (v11 < 4)
    {
      int v16 = (v15 >> (8 * v11)) + 1;
      if (v10 + ((v9 + 12) & ~v9) != -1)
      {
        int v18 = v15 & ~(-1 << (8 * v11));
        bzero(a1, v11);
        if (v11 == 3)
        {
          *(_WORD *)a1 = v18;
          a1[2] = BYTE2(v18);
        }
        else if (v11 == 2)
        {
          *(_WORD *)a1 = v18;
        }
        else
        {
          *a1 = v18;
        }
      }
    }
    else
    {
      bzero(a1, v11);
      *(_DWORD *)a1 = v15;
      int v16 = 1;
    }
    switch(v14)
    {
      case 1:
        a1[v11] = v16;
        return;
      case 2:
        *(_WORD *)&a1[v11] = v16;
        return;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v11] = v16;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v11] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v11] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_39:
      __break(1u);
      JUMPOUT(0x245DCA3ACLL);
    case 4:
      *(_DWORD *)&a1[v11] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        unint64_t v19 = (((((unint64_t)(a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + v9 + 4) & ~v9;
        if (v7 < 0xFD)
        {
          *(unsigned char *)(v19 + v10) = a2 + 2;
        }
        else
        {
          long long v20 = *(void (**)(unint64_t))(v6 + 56);
          v20(v19);
        }
      }
      return;
  }
}

unint64_t instantiation function for generic protocol witness table for ViewListArchivedAnimation(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type ViewListArchivedAnimation and conformance ViewListArchivedAnimation();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for ViewListContentTransition<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for _AttributeBody in ViewListContentTransition<A>()
{
  return swift_getWitnessTable();
}

SwiftUI::LayoutProperties __swiftcall LayoutProperties.init()()
{
  *(_WORD *)uint64_t v0 = 2;
  *(unsigned char *)(v0 + 2) = 0;
  return result;
}

uint64_t LayoutSubview.priority.getter()
{
  return LayoutProxy.layoutPriority.getter();
}

void LayoutSubview.place(in:layoutDirection:)(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  uint64_t v8 = a1[5];
  uint64_t v9 = a1[6];
  uint64_t v10 = a1[7];
  unsigned __int8 v11 = *a2;
  unint64_t v12 = *(int *)(v2 + 12);
  unsigned int v13 = (unsigned char *)_threadLayoutData();
  if (v13)
  {
    if ((*v13 & 1) == 0)
    {
      v15[0] = v3;
      v15[1] = v4;
      _OWORD v15[2] = v5;
      void v15[3] = v6;
      void v15[4] = v7;
      v15[5] = v8;
      void v15[6] = v9;
      v15[7] = v10;
      unsigned __int8 v14 = v11;
      PlacementData.setGeometry(_:at:layoutDirection:)((uint64_t)v15, v12, &v14);
      return;
    }
    __break(1u);
  }
  __break(1u);
}

SwiftUI::ViewSpacing __swiftcall ViewSpacing.init(_:layoutDirection:)(SwiftUI::Spacing _, SwiftUI::LayoutDirection layoutDirection)
{
  char v3 = *(unsigned char *)layoutDirection;
  *(void *)uint64_t v2 = *(void *)_.minima._rawValue;
  *(unsigned char *)(v2 + 8) = v3;
  result.spacing = _;
  result.layoutDirection.Swift::UInt value = layoutDirection;
  return result;
}

CGSize __swiftcall ProposedViewSize.replacingUnspecifiedDimensions(by:)(CGSize by)
{
  if ((v2 & 1) == 0) {
    by.CGFloat width = v1;
  }
  if ((v4 & 1) == 0) {
    by.CGFloat height = v3;
  }
  return by;
}

uint64_t protocol witness for Layout.spacing(subviews:cache:) in conformance GeometryReaderLayout@<X0>(uint64_t a1@<X0>, unint64_t a2@<X8>)
{
  if (*(unsigned char *)(a1 + 17)) {
    int v2 = 256;
  }
  else {
    int v2 = 0;
  }
  return specialized Layout.spacing(subviews:cache:)(*(void *)(a1 + 8), v2 | *(unsigned __int8 *)(a1 + 16), a2);
}

uint64_t specialized Layout.spacing(subviews:cache:)@<X0>(uint64_t a1@<X1>, unsigned int a2@<W2>, unint64_t a3@<X8>)
{
  unint64_t v3 = a3;
  if (!*(void *)(a1 + 16))
  {
    if (one-time initialization token for zero != -1) {
      goto LABEL_132;
    }
    goto LABEL_119;
  }
  uint64_t v4 = a1;
  uint64_t v5 = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  unint64_t v3 = *(void *)(v4 + 16);
  swift_bridgeObjectRetain();
  if (!v3)
  {
    LOBYTE(v7) = 2;
LABEL_123:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)a3 = v5;
    *(unsigned char *)(a3 + 8) = v7;
    return result;
  }
  unint64_t v6 = 0;
  uint64_t v87 = v4 + 32;
  int v86 = *MEMORY[0x263F288F8];
  int v7 = 2;
  uint64_t v85 = v4;
  while (1)
  {
    if (a2)
    {
      if (v6 >= v3) {
        goto LABEL_130;
      }
      uint64_t v8 = (_DWORD *)(v87 + 12 * v6);
    }
    else
    {
      if (v6 >= v3) {
        goto LABEL_129;
      }
      uint64_t v8 = (_DWORD *)(v87 + 8 * v6);
    }
    if (v6 >= v3) {
      goto LABEL_128;
    }
    CGFloat v91 = v5;
    if (*v8 == v86)
    {
      Inputuint64_t Value = &static LayoutComputer.defaultValue;
      if (one-time initialization token for defaultValue != -1)
      {
        swift_once();
        Inputuint64_t Value = &static LayoutComputer.defaultValue;
      }
    }
    else
    {
      Inputuint64_t Value = (long long *)AGGraphGetInputValue();
    }
    uint64_t v10 = *(void *)InputValue;
    uint64_t v11 = one-time initialization token for lockAssertionsAreEnabled;
    swift_retain();
    if (v11 != -1) {
      swift_once();
    }
    unint64_t v3 = 1;
    if (lockAssertionsAreEnabled)
    {
      if (one-time initialization token for _lock != -1) {
        swift_once();
      }
      if (!_MovableLockIsOwner(static Update._lock))
      {
LABEL_134:
        uint64_t result = _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        return result;
      }
    }
    (*(void (**)(unsigned __int8 *__return_ptr))(*(void *)v10 + 112))(v103);
    swift_release();
    uint64_t v12 = *(void *)v103;
    if (v7 == 2) {
      int v7 = (a2 >> 8) & 1;
    }
    v103[0] = v7 & 1;
    AbsoluteEdge.Set.init(_:layoutDirection:)(v103, &v102);
    int v13 = v102;
    if (!v102)
    {
      swift_bridgeObjectRelease();
      uint64_t v5 = v91;
      goto LABEL_5;
    }
    unint64_t v89 = v6;
    int v90 = v7;
    uint64_t v14 = v12 + 64;
    uint64_t v15 = 1 << *(unsigned char *)(v12 + 32);
    uint64_t v16 = v15 < 64 ? ~(-1 << v15) : -1;
    unint64_t v17 = v16 & *(void *)(v12 + 64);
    int64_t v18 = (unint64_t)(v15 + 63) >> 6;
    swift_bridgeObjectRetain_n();
    int64_t v19 = 0;
    uint64_t v20 = MEMORY[0x263F8EE78];
    uint64_t v94 = v12;
    while (1)
    {
      if (v17)
      {
        unint64_t v21 = __clz(__rbit64(v17));
        v17 &= v17 - 1;
        unint64_t v22 = v21 | (v19 << 6);
        goto LABEL_51;
      }
      int64_t v23 = v19 + 1;
      if (__OFADD__(v19, 1))
      {
        __break(1u);
LABEL_125:
        __break(1u);
LABEL_126:
        __break(1u);
LABEL_127:
        __break(1u);
LABEL_128:
        __break(1u);
LABEL_129:
        __break(1u);
LABEL_130:
        __break(1u);
        goto LABEL_131;
      }
      if (v23 >= v18) {
        goto LABEL_63;
      }
      unint64_t v24 = *(void *)(v14 + 8 * v23);
      ++v19;
      if (!v24)
      {
        int64_t v19 = v23 + 1;
        if (v23 + 1 >= v18) {
          goto LABEL_63;
        }
        unint64_t v24 = *(void *)(v14 + 8 * v19);
        if (!v24)
        {
          int64_t v19 = v23 + 2;
          if (v23 + 2 >= v18) {
            goto LABEL_63;
          }
          unint64_t v24 = *(void *)(v14 + 8 * v19);
          if (!v24)
          {
            int64_t v19 = v23 + 3;
            if (v23 + 3 >= v18) {
              goto LABEL_63;
            }
            unint64_t v24 = *(void *)(v14 + 8 * v19);
            if (!v24)
            {
              int64_t v19 = v23 + 4;
              if (v23 + 4 >= v18) {
                goto LABEL_63;
              }
              unint64_t v24 = *(void *)(v14 + 8 * v19);
              if (!v24)
              {
                int64_t v19 = v23 + 5;
                if (v23 + 5 >= v18) {
                  goto LABEL_63;
                }
                unint64_t v24 = *(void *)(v14 + 8 * v19);
                if (!v24) {
                  break;
                }
              }
            }
          }
        }
      }
LABEL_50:
      unint64_t v17 = (v24 - 1) & v24;
      unint64_t v22 = __clz(__rbit64(v24)) + (v19 << 6);
LABEL_51:
      uint64_t v26 = *(void *)(v12 + 48) + 16 * v22;
      unsigned int v27 = *(unsigned __int8 *)(v26 + 8);
      if (v27 - 9 <= 0xEE) {
        goto LABEL_56;
      }
      if ((v27 & 0x80) == 0)
      {
        if (v27 >= 8) {
          goto LABEL_56;
        }
        int v28 = 1 << v27;
        goto LABEL_55;
      }
      if (v27 <= 0xF8)
      {
LABEL_56:
        uint64_t v29 = *(void *)v26;
        uint64_t v30 = *(void *)(v12 + 56) + 40 * v22;
        uint64_t v31 = *(void *)v30;
        uint64_t v32 = *(void *)(v30 + 8);
        uint64_t v95 = *(void *)(v30 + 24);
        uint64_t v97 = *(void *)(v30 + 16);
        char v92 = *(unsigned char *)(v30 + 32);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)long long v103 = v20;
        uint64_t v99 = v32;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v20 + 16) + 1, 1);
          uint64_t v20 = *(void *)v103;
        }
        unint64_t v35 = *(void *)(v20 + 16);
        unint64_t v34 = *(void *)(v20 + 24);
        if (v35 >= v34 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v34 > 1, v35 + 1, 1);
          uint64_t v20 = *(void *)v103;
        }
        *(void *)(v20 + 16) = v35 + 1;
        uint64_t v36 = v20 + 56 * v35;
        *(void *)(v36 + 32) = v29;
        *(unsigned char *)(v36 + 40) = v27;
        *(void *)(v36 + 48) = v31;
        *(void *)(v36 + 56) = v99;
        uint64_t v12 = v94;
        *(void *)(v36 + 64) = v97;
        *(void *)(v36 + 72) = v95;
        *(unsigned char *)(v36 + 80) = v92;
        unint64_t v3 = 1;
      }
      else
      {
        int v28 = 0;
LABEL_55:
        if ((v28 & ~v13) == 0) {
          goto LABEL_56;
        }
      }
    }
    int64_t v25 = v23 + 6;
    if (v25 < v18) {
      break;
    }
LABEL_63:
    swift_release();
    uint64_t v37 = specialized _arrayForceCast<A, B>(_:)(v20);
    swift_release();
    uint64_t v5 = v91;
    unint64_t v3 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)long long v103 = v91;
    uint64_t v38 = *(void *)(v37 + 16);
    swift_bridgeObjectRetain();
    uint64_t v93 = v38;
    if (v38)
    {
      unint64_t v39 = 0;
      int v40 = (unsigned __int8 *)(v37 + 80);
      while (1)
      {
        if (v39 >= *(void *)(v37 + 16)) {
          goto LABEL_125;
        }
        Swift::UInt v49 = *((void *)v40 - 6);
        if (v49 == 1) {
          goto LABEL_4;
        }
        Swift::UInt8 v50 = *(v40 - 40);
        double v47 = *((double *)v40 - 4);
        unint64_t v96 = v39;
        double v98 = *((double *)v40 - 3);
        double v100 = *((double *)v40 - 2);
        double v101 = *((double *)v40 - 1);
        int v51 = *v40;
        unint64_t v53 = specialized __RawDictionaryStorage.find<A>(_:)(v49, v50);
        uint64_t v54 = v5[2];
        BOOL v55 = (v52 & 1) == 0;
        uint64_t v56 = v54 + v55;
        if (__OFADD__(v54, v55)) {
          goto LABEL_126;
        }
        char v57 = v52;
        if (v5[3] >= v56)
        {
          if ((v3 & 1) == 0) {
            specialized _NativeDictionary.copy()();
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v56, v3 & 1);
          unint64_t v58 = specialized __RawDictionaryStorage.find<A>(_:)(v49, v50);
          if ((v57 & 1) != (v59 & 1))
          {
            KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            goto LABEL_134;
          }
          unint64_t v53 = v58;
        }
        uint64_t v5 = *(void **)v103;
        if (v57) {
          break;
        }
        *(void *)(*(void *)v103 + 8 * (v53 >> 6) + 64) |= 1 << v53;
        uint64_t v74 = v5[6] + 16 * v53;
        *(void *)uint64_t v74 = v49;
        *(unsigned char *)(v74 + 8) = v50;
        uint64_t v75 = v5[7] + 40 * v53;
        *(double *)uint64_t v75 = v47;
        *(double *)(v75 + 8) = v98;
        *(double *)(v75 + 16) = v100;
        *(double *)(v75 + 24) = v101;
        *(unsigned char *)(v75 + 32) = v51;
        uint64_t v76 = v5[2];
        BOOL v77 = __OFADD__(v76, 1);
        uint64_t v78 = v76 + 1;
        if (v77) {
          goto LABEL_127;
        }
        v5[2] = v78;
        unint64_t v45 = v96;
LABEL_71:
        unint64_t v39 = v45 + 1;
        v40 += 56;
        unint64_t v3 = 1;
        if (v93 == v39) {
          goto LABEL_4;
        }
      }
      uint64_t v60 = *(void *)(*(void *)v103 + 56) + 40 * v53;
      double v61 = *(double *)v60;
      double v62 = *(double *)(v60 + 8);
      double v64 = *(double *)(v60 + 16);
      double v63 = *(double *)(v60 + 24);
      unint64_t v48 = *(unsigned __int8 *)(v60 + 32);
      if (v51)
      {
        if (v51 == 1)
        {
          if (v48 == 1)
          {
            double v65 = v47;
            double v43 = v98;
            double v44 = v100;
            double v66 = v98;
            double v67 = v100;
            double v42 = v101;
            double v68 = *(double *)v60;
            double v69 = *(double *)(v60 + 8);
            double v70 = *(double *)(v60 + 16);
            BOOL v73 = v47 == v61 && v98 == v62 && v100 == v64 && v101 == v63;
            unint64_t v45 = v96;
            if (!v73)
            {
LABEL_111:
              BOOL v46 = v65 + v66 + v67 < v68 + v69 + v70;
              goto LABEL_67;
            }
            LOBYTE(v48) = 1;
LABEL_70:
            *(double *)uint64_t v60 = v47;
            *(double *)(v60 + 8) = v43;
            *(double *)(v60 + 16) = v44;
            *(double *)(v60 + 24) = v42;
            *(unsigned char *)(v60 + 32) = v48;
            goto LABEL_71;
          }
          unint64_t v41 = 1;
        }
        else
        {
          if (v48 == 2)
          {
            double v65 = v47;
            double v43 = v98;
            double v44 = v100;
            double v66 = v98;
            double v67 = v100;
            double v42 = v101;
            double v68 = *(double *)v60;
            double v69 = *(double *)(v60 + 8);
            double v70 = *(double *)(v60 + 16);
            BOOL v81 = v47 == v61 && v98 == v62 && v100 == v64 && v101 == v63;
            unint64_t v45 = v96;
            if (!v81) {
              goto LABEL_111;
            }
            LOBYTE(v48) = 2;
            goto LABEL_70;
          }
          unint64_t v41 = 2;
        }
      }
      else
      {
        if (!*(unsigned char *)(v60 + 32))
        {
          if (v47 != v61)
          {
            BOOL v46 = v47 < v61;
            double v42 = v101;
            double v43 = v98;
            double v44 = v100;
            unint64_t v45 = v96;
LABEL_67:
            if (v46)
            {
              double v47 = *(double *)v60;
              double v43 = *(double *)(v60 + 8);
              double v44 = *(double *)(v60 + 16);
              double v42 = *(double *)(v60 + 24);
            }
            else
            {
              LOBYTE(v48) = v51;
            }
            goto LABEL_70;
          }
          LOBYTE(v48) = 0;
          double v42 = v101;
          double v43 = v98;
          double v44 = v100;
          unint64_t v45 = v96;
          goto LABEL_70;
        }
        unint64_t v41 = 0;
      }
      double v42 = v101;
      double v43 = v98;
      double v44 = v100;
      unint64_t v45 = v96;
      BOOL v46 = v41 < v48;
      goto LABEL_67;
    }
LABEL_4:
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    uint64_t v4 = v85;
    unint64_t v6 = v89;
    int v7 = v90;
LABEL_5:
    ++v6;
    unint64_t v3 = *(void *)(v4 + 16);
    if (v6 == v3) {
      goto LABEL_123;
    }
  }
  unint64_t v24 = *(void *)(v14 + 8 * v25);
  if (v24)
  {
    int64_t v19 = v25;
    goto LABEL_50;
  }
  while (1)
  {
    int64_t v19 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v19 >= v18) {
      goto LABEL_63;
    }
    unint64_t v24 = *(void *)(v14 + 8 * v19);
    ++v25;
    if (v24) {
      goto LABEL_50;
    }
  }
LABEL_131:
  __break(1u);
LABEL_132:
  swift_once();
LABEL_119:
  char v82 = byte_268EFC898;
  *(void *)unint64_t v3 = static ViewSpacing.zero;
  *(unsigned char *)(v3 + 8) = v82;

  return swift_bridgeObjectRetain();
}

void protocol witness for static Layout.layoutProperties.getter in conformance AnyLayout(uint64_t a1@<X8>)
{
  *(_WORD *)a1 = 2;
  *(unsigned char *)(a1 + 2) = 0;
}

uint64_t AnyLayoutProperties.init(layout:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t _ViewInputs.needsDynamicLayout.getter()
{
  return (*(unsigned __int8 *)(v0 + 37) >> 3) & 1;
}

uint64_t _ViewInputs.needsDynamicLayout.setter(uint64_t result)
{
  if (result) {
    int v2 = 2048;
  }
  else {
    int v2 = 0;
  }
  *(_DWORD *)(v1 + 36) = *(_DWORD *)(v1 + 36) & 0xFFFFF7FF | v2;
  return result;
}

SwiftUI::ViewSpacing __swiftcall ViewSpacing.init()()
{
  uint64_t v1 = v0;
  int v2 = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(void *)uint64_t v1 = v2;
  *(unsigned char *)(v1 + 8) = 2;
  result.spacing.minima._rawuint64_t Value = v2;
  result.layoutDirection.Swift::UInt value = v3;
  return result;
}

unsigned __int8 *ViewSpacing.formUnion(_:edges:)(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 8);
  if (*(unsigned char *)(v1 + 8) != 2) {
    char v2 = *(unsigned char *)(v1 + 8);
  }
  *(unsigned char *)(v1 + 8) = v2;
  unsigned __int8 v5 = v2 & 1;
  AbsoluteEdge.Set.init(_:layoutDirection:)(&v5, &v4);
  return Spacing.incorporate(_:of:)(&v4);
}

uint64_t LayoutProperties.stackOrientation.getter()
{
  return *v0;
}

uint64_t LayoutProperties.stackOrientation.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*LayoutProperties.stackOrientation.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t LayoutProperties.isDefaultEmptyLayout.getter()
{
  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t LayoutProperties.isDefaultEmptyLayout.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 1) = result;
  return result;
}

uint64_t (*LayoutProperties.isDefaultEmptyLayout.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t LayoutProperties.isIdentityUnaryLayout.getter()
{
  return *(unsigned __int8 *)(v0 + 2);
}

uint64_t LayoutProperties.isIdentityUnaryLayout.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 2) = result;
  return result;
}

uint64_t (*LayoutProperties.isIdentityUnaryLayout.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ProposedViewSize.width.setter(uint64_t result, char a2)
{
  *(void *)uint64_t v2 = result;
  *(unsigned char *)(v2 + 8) = a2 & 1;
  return result;
}

uint64_t (*ProposedViewSize.width.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ProposedViewSize.height.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t ProposedViewSize.height.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 16) = result;
  *(unsigned char *)(v2 + 24) = a2 & 1;
  return result;
}

uint64_t (*ProposedViewSize.height.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t static ProposedViewSize.zero.getter()
{
  if (one-time initialization token for zero != -1) {
    swift_once();
  }
  return static ProposedViewSize.zero;
}

uint64_t static ProposedViewSize.infinity.getter()
{
  if (one-time initialization token for infinity != -1) {
    swift_once();
  }
  return static ProposedViewSize.infinity;
}

uint64_t ProposedViewSize.subscript.setter(uint64_t result, char a2, char a3)
{
  if (a3)
  {
    v3[2] = result;
    unsigned __int8 v4 = v3 + 3;
  }
  else
  {
    *SwiftUI::LayoutDirection v3 = result;
    unsigned __int8 v4 = v3 + 1;
  }
  *unsigned __int8 v4 = a2 & 1;
  return result;
}

uint64_t (*ProposedViewSize.subscript.modify(uint64_t a1, char a2))(uint64_t result)
{
  *(void *)(a1 + 16) = v2;
  *(unsigned char *)(a1 + 9) = a2;
  SwiftUI::LayoutDirection v3 = (char *)(v2 + 8);
  unsigned __int8 v4 = (uint64_t *)(v2 + 16);
  if ((a2 & 1) == 0) {
    unsigned __int8 v4 = (uint64_t *)v2;
  }
  uint64_t v5 = *v4;
  if (a2) {
    SwiftUI::LayoutDirection v3 = (char *)(v2 + 24);
  }
  char v6 = *v3;
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 8) = v6;
  return _ProposedSize.subscript.modify;
}

uint64_t static ProposedViewSize.== infix(_:_:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, char a6, uint64_t a7, char a8)
{
  if (a2)
  {
    if ((a6 & 1) == 0) {
      return 0;
    }
  }
  else if ((a6 & 1) != 0 || *(double *)&a1 != *(double *)&a5)
  {
    return 0;
  }
  if (a4)
  {
    if (a8) {
      return 1;
    }
  }
  else if ((a8 & 1) == 0 && *(double *)&a3 == *(double *)&a7)
  {
    return 1;
  }
  return 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ProposedViewSize(uint64_t a1, uint64_t a2)
{
  char v2 = *(unsigned char *)(a2 + 8);
  char v3 = *(unsigned char *)(a2 + 24);
  if (*(unsigned char *)(a1 + 8))
  {
    if (!*(unsigned char *)(a2 + 8)) {
      return 0;
    }
  }
  else
  {
    if (*(double *)a1 != *(double *)a2) {
      char v2 = 1;
    }
    if (v2) {
      return 0;
    }
  }
  if (*(unsigned char *)(a1 + 24))
  {
    if (*(unsigned char *)(a2 + 24)) {
      return 1;
    }
  }
  else
  {
    if (*(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      char v3 = 1;
    }
    if ((v3 & 1) == 0) {
      return 1;
    }
  }
  return 0;
}

uint64_t ViewSpacing.spacing.getter@<X0>(void *a1@<X8>)
{
  *a1 = *v1;
  return swift_bridgeObjectRetain();
}

uint64_t ViewSpacing.spacing.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = v2;
  return result;
}

uint64_t (*ViewSpacing.spacing.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

SwiftUI::ViewSpacing __swiftcall ViewSpacing.init(_:)(SwiftUI::Spacing a1)
{
  *(void *)uint64_t v1 = *(void *)a1.minima._rawValue;
  *(unsigned char *)(v1 + 8) = 2;
  result.spacing = a1;
  return result;
}

uint64_t static ViewSpacing.zero.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for zero != -1) {
    swift_once();
  }
  char v2 = byte_268EFC898;
  *(void *)a1 = static ViewSpacing.zero;
  *(unsigned char *)(a1 + 8) = v2;

  return swift_bridgeObjectRetain();
}

unsigned __int8 *ViewSpacing.union(_:edges:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v4 = *(unsigned char *)(a1 + 8);
  int v5 = *(unsigned __int8 *)(v2 + 8);
  *(void *)a2 = *(void *)v2;
  if (v5 != 2) {
    char v4 = v5;
  }
  *(unsigned char *)(a2 + 8) = v4;
  unsigned __int8 v8 = v4 & 1;
  AbsoluteEdge.Set.init(_:layoutDirection:)(&v8, &v7);
  swift_bridgeObjectRetain();
  return Spacing.incorporate(_:of:)(&v7);
}

double ViewSpacing.distance(to:along:)(uint64_t *a1, char a2)
{
  int v3 = a2 & 1;
  uint64_t v4 = *a1;
  char v5 = *((unsigned char *)v2 + 8);
  uint64_t v12 = *v2;
  char v11 = v5 & 1;
  uint64_t v10 = v4;
  double v6 = COERCE_DOUBLE(Spacing.distanceToSuccessorView(along:layoutDirection:preferring:)(a2 & 1, &v11, &v10));
  if ((v7 & 1) == 0) {
    return v6;
  }
  if (one-time initialization token for defaultSpacingValue != -1) {
    swift_once();
  }
  p_CGFloat height = &defaultSpacingValue;
  if (v3) {
    p_CGFloat height = (CGSize *)&defaultSpacingValue.height;
  }
  return p_height->width;
}

uint64_t ViewSpacing.description.getter()
{
  return Spacing.description.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ViewSpacing()
{
  return Spacing.description.getter();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance LayoutSubviews.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(int32x2_t **)a1;
  char v5 = *(int32x2_t **)a2;
  char v6 = *(unsigned char *)(a2 + 8);
  if (*(unsigned char *)(a1 + 8))
  {
    if (v6) {
      return specialized static Array<A>.== infix(_:_:)((uint64_t)v4, (uint64_t)v5);
    }
    return 0;
  }
  if (v6) {
    return 0;
  }
  return specialized static Array<A>.== infix(_:_:)(v4, v5);
}

void LayoutSubviews.layoutDirection.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 17);
}

unsigned char *LayoutSubviews.layoutDirection.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 17) = *result;
  return result;
}

uint64_t (*LayoutSubviews.layoutDirection.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t LayoutSubviews.startIndex.getter()
{
  return 0;
}

uint64_t LayoutSubviews.subscript.getter@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int v7 = *v3;
  uint64_t v8 = *((void *)v3 + 1);
  char v9 = *((unsigned char *)v3 + 16);
  int v10 = *((unsigned __int8 *)v3 + 17);
  swift_bridgeObjectRetain();
  if (v10) {
    uint64_t v11 = 256;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_7SwiftUI14LayoutSubviewsV7Storage33_57DDCF0A00C1B77B475771403C904EF9LLO17IndexedAttributesVs5NeverOTg503_s7d4UI14fg31V9selecting7indicesACx_tSTRzSi7b20RtzlFAC7Storage33_57ijklmno5LLO17pQ8VSiXEfU_AITf1cn_nTf4ng_n(a1, a2, v8, v11 | v9, v11);
  uint64_t result = swift_bridgeObjectRelease();
  *(_DWORD *)a3 = v7;
  *(void *)(a3 + 8) = v12;
  *(unsigned char *)(a3 + 16) = 1;
  *(unsigned char *)(a3 + 17) = v10;
  return result;
}

uint64_t LayoutSubviews.selecting<A>(indices:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X7>, uint64_t a4@<X8>)
{
  uint64_t v7 = *((void *)v4 + 1);
  char v8 = *((unsigned char *)v4 + 16);
  char v9 = *((unsigned char *)v4 + 17);
  int v12 = *v4;
  int v6 = v12;
  uint64_t v13 = v7;
  char v14 = v8;
  char v15 = v9;
  uint64_t result = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in LayoutSubviews.selecting<A>(indices:), (uint64_t)&v11, a1, (char *)&type metadata for LayoutSubviews.Storage.IndexedAttributes, MEMORY[0x263F8E628], a2, MEMORY[0x263F8E658], a3);
  *(_DWORD *)a4 = v6;
  *(void *)(a4 + 8) = result;
  *(unsigned char *)(a4 + 16) = 1;
  *(unsigned char *)(a4 + 17) = v9;
  return result;
}

uint64_t LayoutSubviews.subscript.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X7>, uint64_t a4@<X8>)
{
  return LayoutSubviews.selecting<A>(indices:)(a1, a2, a3, a4);
}

unint64_t *closure #1 in LayoutSubviews.selecting<A>(indices:)@<X0>(unint64_t *result@<X0>, uint64_t a2@<X2>, char a3@<W3>, _DWORD *a4@<X8>)
{
  unint64_t v4 = *result;
  if ((a3 & 1) == 0)
  {
    if ((v4 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v4 < *(void *)(a2 + 16))
    {
      uint64_t v5 = a2 + 8 * v4;
      int v6 = (_DWORD *)(v5 + 32);
      uint64_t v7 = (int *)(v5 + 36);
LABEL_8:
      int v8 = *v7;
      *a4 = *v6;
      a4[1] = v8;
      a4[2] = v4;
      return result;
    }
    __break(1u);
    goto LABEL_11;
  }
  if ((v4 & 0x8000000000000000) != 0)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v4 < *(void *)(a2 + 16))
  {
    unint64_t v4 = a2 + 12 * v4;
    int v6 = (_DWORD *)(v4 + 32);
    uint64_t v7 = (int *)(v4 + 36);
    LODWORD(v4) = *(_DWORD *)(v4 + 40);
    goto LABEL_8;
  }
LABEL_12:
  __break(1u);
  return result;
}

uint64_t protocol witness for Collection.subscript.getter in conformance LayoutSubviews@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (_DWORD *)a1[1];
  int v6 = *v2;
  uint64_t v7 = *((void *)v2 + 1);
  char v8 = *((unsigned char *)v2 + 16);
  int v9 = *((unsigned __int8 *)v2 + 17);
  swift_bridgeObjectRetain();
  if (v9) {
    uint64_t v10 = 256;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_7SwiftUI14LayoutSubviewsV7Storage33_57DDCF0A00C1B77B475771403C904EF9LLO17IndexedAttributesVs5NeverOTg503_s7d4UI14fg31V9selecting7indicesACx_tSTRzSi7b20RtzlFAC7Storage33_57ijklmno5LLO17pQ8VSiXEfU_AITf1cn_nTf4ng_n(v4, v5, v7, v10 | v8, v10);
  uint64_t result = swift_bridgeObjectRelease();
  *(_DWORD *)a2 = v6;
  *(void *)(a2 + 8) = v11;
  *(unsigned char *)(a2 + 16) = 1;
  *(unsigned char *)(a2 + 17) = v9;
  return result;
}

unint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance LayoutSubviews@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v6 & 1;
  return result;
}

void *protocol witness for Sequence._copyToContiguousArray() in conformance LayoutSubviews()
{
  uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(v0);
  swift_bridgeObjectRelease();
  return v1;
}

double LayoutSubview.proxy.getter@<D0>(uint64_t a1@<X8>)
{
  int v2 = *(_DWORD *)(v1 + 8);
  double result = *(double *)v1;
  *(void *)a1 = *(void *)v1;
  *(_DWORD *)(a1 + 8) = v2;
  return result;
}

uint64_t LayoutSubview._trait<A>(key:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return LayoutProxy.subscript.getter(a1, a1, a2, a3);
}

uint64_t LayoutSubview.lengthThatFits(_:in:)(uint64_t a1, char a2, uint64_t a3, char a4, char a5)
{
  int v6 = *((_DWORD *)v5 + 2);
  uint64_t v12 = *v5;
  int v13 = v6;
  uint64_t v8 = a1;
  char v9 = a2 & 1;
  uint64_t v10 = a3;
  char v11 = a4 & 1;
  return LayoutProxy.lengthThatFits(_:in:)(&v8, a5 & 1);
}

uint64_t _LayoutRoot.layout.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t _LayoutRoot.layout.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*_LayoutRoot.layout.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t AnyLayoutProperties.value.getter()
{
  void (*v0)(uint64_t *__return_ptr, uint64_t);
  uint64_t v1;
  uint64_t v3;

  uint64_t v0 = *(void (**)(uint64_t *__return_ptr, uint64_t))(**(void **)AGGraphGetValue() + 80);
  uint64_t v1 = swift_retain();
  v0(&v3, v1);
  swift_release();
  return v3;
}

uint64_t protocol witness for Rule.value.getter in conformance AnyLayoutProperties@<X0>(unsigned char *a1@<X8>)
{
  void (*v2)(uint64_t *__return_ptr, uint64_t);
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  uint64_t v2 = *(void (**)(uint64_t *__return_ptr, uint64_t))(**(void **)AGGraphGetValue() + 80);
  int v3 = swift_retain();
  v2(&v5, v3);
  double result = swift_release();
  *a1 = v5;
  return result;
}

uint64_t _GraphInputs.needsDynamicLayout.getter()
{
  return (*(unsigned __int8 *)(v0 + 37) >> 3) & 1;
}

uint64_t _GraphInputs.needsDynamicLayout.setter(uint64_t result)
{
  if (result) {
    int v2 = 2048;
  }
  else {
    int v2 = 0;
  }
  *(_DWORD *)(v1 + 36) = *(_DWORD *)(v1 + 36) & 0xFFFFF7FF | v2;
  return result;
}

unsigned char *(*_GraphInputs.needsDynamicLayout.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = (*(_DWORD *)(v1 + 36) & 0x800) != 0;
  return _GraphInputs.needsDynamicLayout.modify;
}

unsigned char *_GraphInputs.needsDynamicLayout.modify(unsigned char *result)
{
  if (result[8]) {
    int v1 = 2048;
  }
  else {
    int v1 = 0;
  }
  *(_DWORD *)(*(void *)result + 36) = *(_DWORD *)(*(void *)result + 36) & 0xFFFFF7FF | v1;
  return result;
}

unsigned char *(*_ViewInputs.needsDynamicLayout.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = (*(_DWORD *)(v1 + 36) & 0x800) != 0;
  return _GraphInputs.needsDynamicLayout.modify;
}

uint64_t specialized static LayoutSubview.== infix(_:_:)(int32x4_t *a1, int32x4_t *a2)
{
  if (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_s32(*a1, *a2)), 0xFuLL)))) {
    return (a2[1].u8[0] ^ a1[1].u8[0] ^ 1) & 1;
  }
  else {
    return 0;
  }
}

uint64_t specialized static LayoutSubviews.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(_DWORD *)a2) {
    return 0;
  }
  uint64_t v4 = *(int32x2_t **)(a1 + 8);
  int v5 = *(unsigned __int8 *)(a1 + 17);
  int v6 = *(int32x2_t **)(a2 + 8);
  int v7 = *(unsigned __int8 *)(a2 + 17);
  if ((*(unsigned char *)(a1 + 16) & 1) == 0)
  {
    if ((*(unsigned char *)(a2 + 16) & 1) != 0 || (specialized static Array<A>.== infix(_:_:)(v4, v6) & 1) == 0) {
      return 0;
    }
    return v5 ^ v7 ^ 1u;
  }
  if (*(unsigned char *)(a2 + 16) & 1) != 0 && (specialized static Array<A>.== infix(_:_:)((uint64_t)v4, (uint64_t)v6)) {
    return v5 ^ v7 ^ 1u;
  }
  return 0;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_7SwiftUI14LayoutSubviewsV7Storage33_57DDCF0A00C1B77B475771403C904EF9LLO17IndexedAttributesVs5NeverOTg503_s7d4UI14fg31V9selecting7indicesACx_tSTRzSi7b20RtzlFAC7Storage33_57ijklmno5LLO17pQ8VSiXEfU_AITf1cn_nTf4ng_n@<X0>(uint64_t result@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X3>, char a4@<W4>, uint64_t a5@<X8>)
{
  uint64_t v5 = (uint64_t)a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v29 = result;
  uint64_t v32 = MEMORY[0x263F8EE78];
  unint64_t v31 = (unint64_t)a2 - result;
  double result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5 & ~(v5 >> 63), 0);
  uint64_t v6 = v31;
  if ((v31 & 0x8000000000000000) != 0)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  double result = v32;
  if (!v31)
  {
    uint64_t v5 = v29;
    a5 = (uint64_t)a2;
    if ((_DWORD *)v29 == a2) {
      return result;
    }
    goto LABEL_33;
  }
  uint64_t v8 = v29;
  int v7 = a2;
  if ((uint64_t)a2 >= v29)
  {
    uint64_t v9 = 0;
    uint64_t v10 = a3;
    uint64_t v11 = a3 + 32;
    uint64_t v12 = a3 + 32 + 12 * v29;
    a5 = a3 + 8 * v29;
    int v13 = (_DWORD *)(a5 + 36);
    uint64_t v14 = v29 - (void)a2;
    uint64_t v15 = v29;
    char v16 = a4;
    while (1)
    {
      uint64_t v17 = v9 + 1;
      if (__OFADD__(v9, 1)) {
        break;
      }
      a5 = v14 + v9;
      if (!(v14 + v9)) {
        goto LABEL_24;
      }
      a5 = v8 + v9;
      if (v8 + v9 >= (uint64_t)v7 || v9 >= v6) {
        goto LABEL_25;
      }
      if (v16)
      {
        if (a5 < 0) {
          goto LABEL_26;
        }
        uint64_t v5 = *(void *)(v10 + 16);
        if (a5 >= (unint64_t)v5) {
          goto LABEL_29;
        }
        uint64_t v5 = v11 + 12 * v15 + 4;
        int v19 = *(_DWORD *)(v12 + 8);
        int64_t v18 = (int *)v12;
      }
      else
      {
        if (a5 < 0) {
          goto LABEL_27;
        }
        uint64_t v5 = *(void *)(v10 + 16);
        if (a5 >= (unint64_t)v5) {
          goto LABEL_28;
        }
        int64_t v18 = (int *)(v11 + 8 * v15);
        int v19 = v8 + v9;
        uint64_t v5 = (uint64_t)v13;
      }
      int v20 = *(_DWORD *)v5;
      int v21 = *v18;
      uint64_t v33 = result;
      unint64_t v23 = *(void *)(result + 16);
      unint64_t v22 = *(void *)(result + 24);
      if (v23 >= v22 >> 1)
      {
        int v24 = v19;
        uint64_t v25 = v14;
        uint64_t v26 = v11;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
        int v19 = v24;
        uint64_t v17 = v9 + 1;
        uint64_t v14 = v25;
        uint64_t v11 = v26;
        uint64_t v10 = a3;
        int v7 = a2;
        uint64_t v6 = v31;
        char v16 = a4;
        uint64_t v8 = v29;
        double result = v33;
      }
      *(void *)(result + 16) = v23 + 1;
      a5 = result + 12 * v23;
      ++v9;
      *(_DWORD *)(a5 + 32) = v21;
      *(_DWORD *)(a5 + 36) = v20;
      *(_DWORD *)(a5 + 40) = v19;
      v12 += 12;
      v13 += 2;
      ++v15;
      if (v17 == v6) {
        return result;
      }
    }
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
LABEL_32:
  __break(1u);
LABEL_33:
  if (a5 >= v5) {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : RandomAccessCollection in LayoutSubviews()
{
  return _sSnySiGSnyxGSksSxRzSZ6StrideRpzrlWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in LayoutSubviews()
{
  return _sSnySiGSnyxGSksSxRzSZ6StrideRpzrlWlTm_2(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in LayoutSubviews()
{
  return _sSnySiGSnyxGSksSxRzSZ6StrideRpzrlWlTm_2(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

unint64_t lazy protocol witness table accessor for type IndexingIterator<LayoutSubviews> and conformance IndexingIterator<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type IndexingIterator<LayoutSubviews> and conformance IndexingIterator<A>;
  if (!lazy protocol witness table cache variable for type IndexingIterator<LayoutSubviews> and conformance IndexingIterator<A>)
  {
    type metadata accessor for IndexingIterator<LayoutSubviews>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexingIterator<LayoutSubviews> and conformance IndexingIterator<A>);
  }
  return result;
}

void type metadata accessor for IndexingIterator<LayoutSubviews>()
{
  if (!lazy cache variable for type metadata for IndexingIterator<LayoutSubviews>)
  {
    lazy protocol witness table accessor for type LayoutSubviews and conformance LayoutSubviews();
    unint64_t v0 = type metadata accessor for IndexingIterator();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for IndexingIterator<LayoutSubviews>);
    }
  }
}

unint64_t instantiation function for generic protocol witness table for AnyLayoutProperties(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AnyLayoutProperties and conformance AnyLayoutProperties();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_245DCC1F8@<X0>(uint64_t result@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = (char *)(result + 8);
  uint64_t v4 = (uint64_t *)(result + 16);
  if (!*a2) {
    uint64_t v4 = (uint64_t *)result;
  }
  uint64_t v5 = *v4;
  if (*a2) {
    int v3 = (char *)(result + 24);
  }
  char v6 = *v3;
  *(void *)a3 = v5;
  *(unsigned char *)(a3 + 8) = v6;
  return result;
}

uint64_t *sub_245DCC228(uint64_t *result, uint64_t a2, unsigned char *a3)
{
  uint64_t v3 = *result;
  char v4 = *((unsigned char *)result + 8);
  if (*a3)
  {
    *(void *)(a2 + 16) = v3;
    *(unsigned char *)(a2 + 24) = v4;
  }
  else
  {
    *(void *)a2 = v3;
    *(unsigned char *)(a2 + 8) = v4;
  }
  return result;
}

uint64_t sub_245DCC250()
{
  return 0;
}

uint64_t sub_245DCC260@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = (*(_DWORD *)(result + 36) & 0x800) != 0;
  return result;
}

unsigned char *sub_245DCC270(unsigned char *result, uint64_t a2)
{
  if (*result) {
    int v2 = 2048;
  }
  else {
    int v2 = 0;
  }
  *(_DWORD *)(a2 + 36) = *(_DWORD *)(a2 + 36) & 0xFFFFF7FF | v2;
  return result;
}

uint64_t sub_245DCC294@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = (*(_DWORD *)(result + 36) & 0x800) != 0;
  return result;
}

unsigned char *sub_245DCC2A4(unsigned char *result, uint64_t a2)
{
  if (*result) {
    int v2 = 2048;
  }
  else {
    int v2 = 0;
  }
  *(_DWORD *)(a2 + 36) = *(_DWORD *)(a2 + 36) & 0xFFFFF7FF | v2;
  return result;
}

uint64_t dispatch thunk of static Layout.layoutProperties.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of Layout.makeCache(subviews:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of Layout.updateCache(_:subviews:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of Layout.spacing(subviews:cache:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

uint64_t dispatch thunk of Layout.sizeThatFits(proposal:subviews:cache:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 56))();
}

uint64_t dispatch thunk of Layout.placeSubviews(in:proposal:subviews:cache:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 64))();
}

uint64_t dispatch thunk of Layout.explicitAlignment(of:in:proposal:subviews:cache:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (*(uint64_t (**)(uint64_t))(a9 + 72))(a1);
}

{
  return (*(uint64_t (**)(uint64_t))(a9 + 80))(a1);
}

uint64_t dispatch thunk of static Layout._makeLayoutView(root:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 88))();
}

uint64_t getEnumTagSinglePayload for LayoutProperties(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF)
  {
    if ((a2 + 33554177) >> 24)
    {
      int v2 = a1[3];
      if (a1[3]) {
        return (*(unsigned __int16 *)a1 | (a1[2] << 16) | (v2 << 24)) - 16776961;
      }
    }
    else
    {
      int v2 = *(unsigned __int16 *)(a1 + 3);
      if (*(_WORD *)(a1 + 3)) {
        return (*(unsigned __int16 *)a1 | (a1[2] << 16) | (v2 << 24)) - 16776961;
      }
    }
  }
  unsigned int v4 = a1[1];
  BOOL v5 = v4 >= 2;
  int v6 = (v4 + 2147483646) & 0x7FFFFFFF;
  if (!v5) {
    int v6 = -1;
  }
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for LayoutProperties(uint64_t result, unsigned int a2, unsigned int a3)
{
  if ((a3 + 33554177) >> 24) {
    int v3 = 1;
  }
  else {
    int v3 = 2;
  }
  if (a3 <= 0xFE) {
    int v3 = 0;
  }
  if (a2 > 0xFE)
  {
    *(_WORD *)unint64_t result = a2 - 255;
    *(unsigned char *)(result + 2) = (a2 - 255) >> 16;
    if (v3)
    {
      unsigned int v4 = ((a2 - 255) >> 24) + 1;
      if (v3 == 2) {
        *(_WORD *)(result + 3) = v4;
      }
      else {
        *(unsigned char *)(result + 3) = v4;
      }
    }
  }
  else
  {
    if (!v3) {
      goto LABEL_10;
    }
    if (v3 == 2)
    {
      *(_WORD *)(result + 3) = 0;
LABEL_10:
      if (!a2) {
        return result;
      }
LABEL_16:
      *(unsigned char *)(result + 1) = a2 + 1;
      return result;
    }
    *(unsigned char *)(result + 3) = 0;
    if (a2) {
      goto LABEL_16;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LayoutProperties()
{
  return &type metadata for LayoutProperties;
}

ValueMetadata *type metadata accessor for ProposedViewSize()
{
  return &type metadata for ProposedViewSize;
}

uint64_t assignWithCopy for LayoutSubviews(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  char v4 = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  return a1;
}

uint64_t assignWithTake for LayoutSubviews(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  char v4 = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  return a1;
}

uint64_t getEnumTagSinglePayload for LayoutSubviews(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 18)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for LayoutSubviews(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 18) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 18) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t dispatch thunk of static LayoutValueKey.defaultValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

ValueMetadata *type metadata accessor for AnyLayoutProperties()
{
  return &type metadata for AnyLayoutProperties;
}

__n128 __swift_memcpy161_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  long long v4 = a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  __n128 result = (__n128)a2[7];
  long long v8 = a2[8];
  long long v9 = a2[9];
  *(unsigned char *)(a1 + 160) = *((unsigned char *)a2 + 160);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(__n128 *)(a1 + 112) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ViewSizeCache(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 161)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ViewSizeCache(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 160) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 161) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ViewSizeCache()
{
  return &type metadata for ViewSizeCache;
}

uint64_t sub_245DCC7A4()
{
  return swift_getWitnessTable();
}

uint64_t initializeBufferWithCopyOfBuffer for LayoutSubviews.Storage(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for LayoutSubviews.Storage(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for LayoutSubviews.Storage(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

void *type metadata accessor for LayoutSubviews.Storage()
{
  return &unk_26FA4CD70;
}

uint64_t *initializeBufferWithCopyOfBuffer for ViewLayoutEngine(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v7 + v10) & ~v10;
  uint64_t v13 = *(void *)(v9 + 64);
  unint64_t v14 = ((((((v13 + v12 + 199) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 87) & 0xFFFFFFFFFFFFFFF8) + 8;
  unsigned int v15 = v10 | *(_DWORD *)(v6 + 80) & 0xF8;
  if (v15 > 7 || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0 || v14 > 0x18)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + (((v15 | 7) + 16) & ~(unint64_t)(v15 | 7)));
    swift_retain();
  }
  else
  {
    uint64_t v19 = AssociatedTypeWitness;
    uint64_t v20 = ~v10;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    unint64_t v21 = ((unint64_t)a1 + v11) & v20;
    unint64_t v22 = ((unint64_t)a2 + v11) & v20;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(v21, v22, v19);
    unint64_t v23 = (v21 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v24 = (v22 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(_DWORD *)unint64_t v23 = *(_DWORD *)v24;
    *(void *)(v23 + 8) = *(void *)(v24 + 8);
    *(unsigned char *)(v23 + 16) = *(unsigned char *)(v24 + 16);
    unint64_t v25 = (v21 + v13 + 31) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v26 = (v22 + v13 + 31) & 0xFFFFFFFFFFFFFFF8;
    long long v27 = *(_OWORD *)(v26 + 112);
    long long v28 = *(_OWORD *)(v26 + 128);
    long long v29 = *(_OWORD *)(v26 + 144);
    *(unsigned char *)(v25 + 160) = *(unsigned char *)(v26 + 160);
    *(_OWORD *)(v25 + 128) = v28;
    *(_OWORD *)(v25 + 144) = v29;
    *(_OWORD *)(v25 + 112) = v27;
    long long v30 = *(_OWORD *)(v26 + 48);
    long long v31 = *(_OWORD *)(v26 + 64);
    long long v32 = *(_OWORD *)(v26 + 96);
    *(_OWORD *)(v25 + 80) = *(_OWORD *)(v26 + 80);
    *(_OWORD *)(v25 + 96) = v32;
    *(_OWORD *)(v25 + 48) = v30;
    *(_OWORD *)(v25 + 64) = v31;
    long long v33 = *(_OWORD *)v26;
    long long v34 = *(_OWORD *)(v26 + 32);
    *(_OWORD *)(v25 + 16) = *(_OWORD *)(v26 + 16);
    *(_OWORD *)(v25 + 32) = v34;
    *(_OWORD *)unint64_t v25 = v33;
    unint64_t v35 = (_OWORD *)((v21 + v13 + 199) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v36 = (_OWORD *)((v22 + v13 + 199) & 0xFFFFFFFFFFFFFFF8);
    long long v37 = v36[1];
    *unint64_t v35 = *v36;
    v35[1] = v37;
    uint64_t v38 = (void *)(((unint64_t)v35 + 39) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v39 = (void *)(((unint64_t)v36 + 39) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v38 = *v39;
    unint64_t v40 = ((unint64_t)v38 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v41 = ((unint64_t)v39 + 15) & 0xFFFFFFFFFFFFFFF8;
    long long v42 = *(_OWORD *)(v41 + 16);
    long long v43 = *(_OWORD *)(v41 + 32);
    long long v44 = *(_OWORD *)(v41 + 48);
    *(unsigned char *)(v40 + 64) = *(unsigned char *)(v41 + 64);
    *(_OWORD *)(v40 + 32) = v43;
    *(_OWORD *)(v40 + 48) = v44;
    *(_OWORD *)(v40 + 16) = v42;
    *(_OWORD *)unint64_t v40 = *(_OWORD *)v41;
    *(void *)(((unint64_t)v38 + 87) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v39 + 87) & 0xFFFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t assignWithCopy for ViewLayoutEngine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, void))v5)(a1, a2, *(void *)(a3 + 16));
  uint64_t v6 = *(void *)(v5 + 40);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = v8 + 24;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = (v6 + v10 + a1) & ~v10;
  uint64_t v12 = (v6 + v10 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 24))(v11, v12, AssociatedTypeWitness);
  uint64_t v13 = *(void *)(v9 + 40);
  uint64_t v14 = v13 + v11;
  uint64_t v15 = v13 + v12;
  unint64_t v16 = (v13 + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = (v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)unint64_t v16 = *(_DWORD *)v17;
  *(void *)(v16 + 8) = *(void *)(v17 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v16 + 16) = *(unsigned char *)(v17 + 16);
  unint64_t v18 = (v14 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = (v15 + 31) & 0xFFFFFFFFFFFFFFF8;
  long long v20 = *(_OWORD *)v19;
  long long v21 = *(_OWORD *)(v19 + 16);
  long long v22 = *(_OWORD *)(v19 + 32);
  *(unsigned char *)(v18 + 48) = *(unsigned char *)(v19 + 48);
  *(_OWORD *)(v18 + 16) = v21;
  *(_OWORD *)(v18 + 32) = v22;
  *(_OWORD *)unint64_t v18 = v20;
  long long v23 = *(_OWORD *)(v19 + 56);
  long long v24 = *(_OWORD *)(v19 + 72);
  long long v25 = *(_OWORD *)(v19 + 88);
  *(unsigned char *)(v18 + 104) = *(unsigned char *)(v19 + 104);
  *(_OWORD *)(v18 + 88) = v25;
  *(_OWORD *)(v18 + 72) = v24;
  *(_OWORD *)(v18 + 56) = v23;
  long long v26 = *(_OWORD *)(v19 + 112);
  long long v27 = *(_OWORD *)(v19 + 128);
  long long v28 = *(_OWORD *)(v19 + 144);
  *(unsigned char *)(v18 + 160) = *(unsigned char *)(v19 + 160);
  *(_OWORD *)(v18 + 128) = v27;
  *(_OWORD *)(v18 + 144) = v28;
  *(_OWORD *)(v18 + 112) = v26;
  unint64_t v29 = (v14 + 199) & 0xFFFFFFFFFFFFFFF8;
  long long v30 = (void *)((v15 + 199) & 0xFFFFFFFFFFFFFFF8);
  *(void *)unint64_t v29 = *v30;
  *(void *)(v29 + 8) = v30[1];
  *(void *)(v29 + 16) = v30[2];
  *(void *)(v29 + 24) = v30[3];
  v29 += 39;
  long long v31 = (void *)(((unint64_t)v30 + 39) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v32 = (v29 & 0xFFFFFFFFFFFFFFF8) + 15;
  *(void *)(v29 & 0xFFFFFFFFFFFFFFF8) = *v31;
  unint64_t v33 = (v29 & 0xFFFFFFFFFFFFFFF8) + 87;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v34 = v32 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v35 = ((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8;
  long long v36 = *(_OWORD *)v35;
  *(unsigned char *)(v34 + 16) = *(unsigned char *)(v35 + 16);
  *(_OWORD *)unint64_t v34 = v36;
  long long v37 = *(_OWORD *)(v35 + 24);
  *(unsigned char *)(v34 + 40) = *(unsigned char *)(v35 + 40);
  *(_OWORD *)(v34 + 24) = v37;
  long long v38 = *(_OWORD *)(v35 + 48);
  *(unsigned char *)(v34 + 64) = *(unsigned char *)(v35 + 64);
  *(_OWORD *)(v34 + 48) = v38;
  *(void *)(v33 & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v31 + 87) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for ViewLayoutEngine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, void))v5)(a1, a2, *(void *)(a3 + 16));
  uint64_t v6 = *(void *)(v5 + 32);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = v8 + 32;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = (v6 + v10 + a1) & ~v10;
  uint64_t v12 = (v6 + v10 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v11, v12, AssociatedTypeWitness);
  uint64_t v13 = *(void *)(v9 + 32);
  uint64_t v14 = v13 + v11;
  uint64_t v15 = v13 + v12;
  unint64_t v16 = (v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = (v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)unint64_t v16 = *(_OWORD *)v17;
  *(unsigned char *)(v16 + 16) = *(unsigned char *)(v17 + 16);
  unint64_t v18 = (v14 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = (v15 + 31) & 0xFFFFFFFFFFFFFFF8;
  long long v20 = *(_OWORD *)(v19 + 112);
  long long v21 = *(_OWORD *)(v19 + 128);
  long long v22 = *(_OWORD *)(v19 + 144);
  *(unsigned char *)(v18 + 160) = *(unsigned char *)(v19 + 160);
  *(_OWORD *)(v18 + 128) = v21;
  *(_OWORD *)(v18 + 144) = v22;
  *(_OWORD *)(v18 + 112) = v20;
  long long v23 = *(_OWORD *)(v19 + 48);
  long long v24 = *(_OWORD *)(v19 + 64);
  long long v25 = *(_OWORD *)(v19 + 96);
  *(_OWORD *)(v18 + 80) = *(_OWORD *)(v19 + 80);
  *(_OWORD *)(v18 + 96) = v25;
  *(_OWORD *)(v18 + 48) = v23;
  *(_OWORD *)(v18 + 64) = v24;
  long long v26 = *(_OWORD *)v19;
  long long v27 = *(_OWORD *)(v19 + 32);
  *(_OWORD *)(v18 + 16) = *(_OWORD *)(v19 + 16);
  *(_OWORD *)(v18 + 32) = v27;
  *(_OWORD *)unint64_t v18 = v26;
  long long v28 = (_OWORD *)((v14 + 199) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v29 = (_OWORD *)((v15 + 199) & 0xFFFFFFFFFFFFFFF8);
  long long v30 = v29[1];
  *long long v28 = *v29;
  v28[1] = v30;
  long long v31 = (void *)(((unint64_t)v28 + 39) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v32 = (void *)(((unint64_t)v29 + 39) & 0xFFFFFFFFFFFFFFF8);
  *long long v31 = *v32;
  unint64_t v33 = ((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v34 = ((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8;
  long long v35 = *(_OWORD *)(v34 + 16);
  long long v36 = *(_OWORD *)(v34 + 32);
  long long v37 = *(_OWORD *)(v34 + 48);
  *(unsigned char *)(v33 + 64) = *(unsigned char *)(v34 + 64);
  *(_OWORD *)(v33 + 32) = v36;
  *(_OWORD *)(v33 + 48) = v37;
  *(_OWORD *)(v33 + 16) = v35;
  *(_OWORD *)unint64_t v33 = *(_OWORD *)v34;
  *(void *)(((unint64_t)v31 + 87) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v32 + 87) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for ViewLayoutEngine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, void))v5)(a1, a2, *(void *)(a3 + 16));
  uint64_t v6 = *(void *)(v5 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = v8 + 40;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = (v6 + v10 + a1) & ~v10;
  uint64_t v12 = (v6 + v10 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 40))(v11, v12, AssociatedTypeWitness);
  uint64_t v13 = *(void *)(v9 + 24);
  uint64_t v14 = v13 + v11;
  uint64_t v15 = v13 + v12;
  unint64_t v16 = (v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = (v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)unint64_t v16 = *(_DWORD *)v17;
  *(void *)(v16 + 8) = *(void *)(v17 + 8);
  swift_bridgeObjectRelease();
  *(unsigned char *)(v16 + 16) = *(unsigned char *)(v17 + 16);
  unint64_t v18 = (v14 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = (v15 + 31) & 0xFFFFFFFFFFFFFFF8;
  long long v20 = *(_OWORD *)v19;
  long long v21 = *(_OWORD *)(v19 + 16);
  long long v22 = *(_OWORD *)(v19 + 32);
  *(unsigned char *)(v18 + 48) = *(unsigned char *)(v19 + 48);
  *(_OWORD *)(v18 + 16) = v21;
  *(_OWORD *)(v18 + 32) = v22;
  *(_OWORD *)unint64_t v18 = v20;
  long long v23 = *(_OWORD *)(v19 + 56);
  long long v24 = *(_OWORD *)(v19 + 72);
  long long v25 = *(_OWORD *)(v19 + 88);
  *(unsigned char *)(v18 + 104) = *(unsigned char *)(v19 + 104);
  *(_OWORD *)(v18 + 88) = v25;
  *(_OWORD *)(v18 + 72) = v24;
  *(_OWORD *)(v18 + 56) = v23;
  long long v26 = *(_OWORD *)(v19 + 112);
  long long v27 = *(_OWORD *)(v19 + 128);
  long long v28 = *(_OWORD *)(v19 + 144);
  *(unsigned char *)(v18 + 160) = *(unsigned char *)(v19 + 160);
  *(_OWORD *)(v18 + 128) = v27;
  *(_OWORD *)(v18 + 144) = v28;
  *(_OWORD *)(v18 + 112) = v26;
  unint64_t v29 = (v14 + 199) & 0xFFFFFFFFFFFFFFF8;
  long long v30 = (void *)((v15 + 199) & 0xFFFFFFFFFFFFFFF8);
  *(void *)unint64_t v29 = *v30;
  *(void *)(v29 + 8) = v30[1];
  *(void *)(v29 + 16) = v30[2];
  *(void *)(v29 + 24) = v30[3];
  v29 += 39;
  long long v31 = (void *)(((unint64_t)v30 + 39) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v32 = (v29 & 0xFFFFFFFFFFFFFFF8) + 15;
  *(void *)(v29 & 0xFFFFFFFFFFFFFFF8) = *v31;
  unint64_t v33 = (v29 & 0xFFFFFFFFFFFFFFF8) + 87;
  swift_bridgeObjectRelease();
  unint64_t v34 = v32 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v35 = ((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8;
  long long v36 = *(_OWORD *)v35;
  *(unsigned char *)(v34 + 16) = *(unsigned char *)(v35 + 16);
  *(_OWORD *)unint64_t v34 = v36;
  long long v37 = *(_OWORD *)(v35 + 24);
  *(unsigned char *)(v34 + 40) = *(unsigned char *)(v35 + 40);
  *(_OWORD *)(v34 + 24) = v37;
  long long v38 = *(_OWORD *)(v35 + 48);
  *(unsigned char *)(v34 + 64) = *(unsigned char *)(v35 + 64);
  *(_OWORD *)(v34 + 48) = v38;
  *(void *)(v33 & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v31 + 87) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ViewLayoutEngine(int *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = *(void *)(v8 + 64);
  if (v9 <= v7) {
    unsigned int v12 = v7;
  }
  else {
    unsigned int v12 = *(_DWORD *)(v8 + 84);
  }
  if (v12 <= 0x7FFFFFFF) {
    unsigned int v12 = 0x7FFFFFFF;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v13 = *(void *)(v6 + 64) + v10;
  if (v12 < a2)
  {
    unint64_t v14 = ((((((v11 + (v13 & ~v10) + 199) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 87) & 0xFFFFFFFFFFFFFFF8)
        + 8;
    uint64_t v15 = v14 & 0xFFFFFFF8;
    if ((v14 & 0xFFFFFFF8) != 0) {
      unsigned int v16 = 2;
    }
    else {
      unsigned int v16 = a2 - v12 + 1;
    }
    if (v16 >= 0x10000) {
      unsigned int v17 = 4;
    }
    else {
      unsigned int v17 = 2;
    }
    if (v16 < 0x100) {
      unsigned int v17 = 1;
    }
    if (v16 >= 2) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = 0;
    }
    switch(v18)
    {
      case 1:
        int v19 = *((unsigned __int8 *)a1 + v14);
        if (!v19) {
          break;
        }
        goto LABEL_24;
      case 2:
        int v19 = *(unsigned __int16 *)((char *)a1 + v14);
        if (v19) {
          goto LABEL_24;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x245DCD474);
      case 4:
        int v19 = *(int *)((char *)a1 + v14);
        if (!v19) {
          break;
        }
LABEL_24:
        int v21 = v19 - 1;
        if (v15)
        {
          int v21 = 0;
          int v22 = *a1;
        }
        else
        {
          int v22 = 0;
        }
        return v12 + (v22 | v21) + 1;
      default:
        break;
    }
  }
  if (v7 == v12)
  {
    long long v23 = *(uint64_t (**)(int *, uint64_t, uint64_t))(v6 + 48);
    return v23(a1, v7, v5);
  }
  else
  {
    unint64_t v24 = ((unint64_t)a1 + v13) & ~v10;
    if (v9 == v12)
    {
      long long v25 = *(uint64_t (**)(unint64_t))(v8 + 48);
      return v25(v24);
    }
    else
    {
      unint64_t v26 = *(void *)(((v11 + v24 + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
      if (v26 >= 0xFFFFFFFF) {
        LODWORD(v26) = -1;
      }
      return (v26 + 1);
    }
  }
}

void storeEnumTagSinglePayload for ViewLayoutEngine(_DWORD *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v28 = v8;
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  uint64_t v10 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v11 = *(_DWORD *)(v10 + 84);
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = *(void *)(v10 + 64);
  if (v11 <= v9) {
    unsigned int v14 = v9;
  }
  else {
    unsigned int v14 = *(_DWORD *)(v10 + 84);
  }
  if (v14 <= 0x7FFFFFFF) {
    unsigned int v14 = 0x7FFFFFFF;
  }
  uint64_t v15 = *(void *)(v8 + 64) + v12;
  unint64_t v16 = ((((((v13 + (v15 & ~v12) + 199) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 87) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v14 >= a3)
  {
    int v19 = 0;
    int v20 = a2 - v14;
    if (a2 <= v14)
    {
LABEL_19:
      uint64_t v21 = ~v12;
      switch(v19)
      {
        case 1:
          *((unsigned char *)a1 + v16) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_32;
        case 2:
          *(_WORD *)((char *)a1 + v16) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_32;
        case 3:
          goto LABEL_48;
        case 4:
          *(_DWORD *)((char *)a1 + v16) = 0;
          goto LABEL_31;
        default:
LABEL_31:
          if (a2)
          {
LABEL_32:
            if (v9 == v14)
            {
              unint64_t v24 = *(void (**)(_DWORD *, uint64_t, uint64_t, uint64_t))(v28 + 56);
              v24(a1, a2, v9, v7);
            }
            else
            {
              unint64_t v25 = ((unint64_t)a1 + v15) & v21;
              if (v11 == v14)
              {
                unint64_t v26 = *(void (**)(unint64_t, uint64_t))(v10 + 56);
                v26(v25, a2);
              }
              else
              {
                long long v27 = (void *)((v13 + v25 + 7) & 0xFFFFFFFFFFFFFFF8);
                if ((a2 & 0x80000000) != 0)
                {
                  *long long v27 = a2 ^ 0x80000000;
                  v27[1] = 0;
                }
                else
                {
                  v27[1] = (a2 - 1);
                }
              }
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    if (((((((v13 + (v15 & ~v12) + 199) & 0xFFFFFFF8) + 39) & 0xFFFFFFF8) + 87) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v17 = a3 - v14 + 1;
    }
    else {
      unsigned int v17 = 2;
    }
    if (v17 >= 0x10000) {
      int v18 = 4;
    }
    else {
      int v18 = 2;
    }
    if (v17 < 0x100) {
      int v18 = 1;
    }
    if (v17 >= 2) {
      int v19 = v18;
    }
    else {
      int v19 = 0;
    }
    int v20 = a2 - v14;
    if (a2 <= v14) {
      goto LABEL_19;
    }
  }
  if (((((((v13 + (v15 & ~v12) + 199) & 0xFFFFFFF8) + 39) & 0xFFFFFFF8) + 87) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v22 = v20;
  }
  else {
    int v22 = 1;
  }
  if (((((((v13 + (v15 & ~v12) + 199) & 0xFFFFFFF8) + 39) & 0xFFFFFFF8) + 87) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    int v23 = ~v14 + a2;
    bzero(a1, ((((((v13 + (v15 & ~v12) + 199) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 87) & 0xFFFFFFFFFFFFFFF8)+ 8);
    *a1 = v23;
  }
  switch(v19)
  {
    case 1:
      *((unsigned char *)a1 + v16) = v22;
      break;
    case 2:
      *(_WORD *)((char *)a1 + v16) = v22;
      break;
    case 3:
LABEL_48:
      __break(1u);
      JUMPOUT(0x245DCD77CLL);
    case 4:
      *(_DWORD *)((char *)a1 + v16) = v22;
      break;
    default:
      return;
  }
}

unint64_t *partial apply for closure #1 in LayoutSubviews.selecting<A>(indices:)@<X0>(unint64_t *a1@<X0>, _DWORD *a2@<X8>)
{
  return closure #1 in LayoutSubviews.selecting<A>(indices:)(a1, *(void *)(v2 + 24), *(unsigned char *)(v2 + 32), a2);
}

ValueMetadata *type metadata accessor for LayoutSubviews.Storage.IndexedAttributes()
{
  return &type metadata for LayoutSubviews.Storage.IndexedAttributes;
}

uint64_t _IdentifiedViewProxy.identifier.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of AnyHashable(v1, a1);
}

uint64_t _IdentifiedViewProxy.identifier.setter(uint64_t a1)
{
  return outlined assign with take of AnyHashable(a1, v1);
}

uint64_t (*_IdentifiedViewProxy.identifier.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double _IdentifiedViewProxy.size.getter()
{
  return *(double *)(v0 + 40);
}

void _IdentifiedViewProxy.size.setter(double a1, double a2)
{
  *(double *)(v2 + 40) = a1;
  *(double *)(v2 + 48) = a2;
}

uint64_t (*_IdentifiedViewProxy.size.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double _IdentifiedViewProxy.position.getter()
{
  return *(double *)(v0 + 56);
}

void _IdentifiedViewProxy.position.setter(double a1, double a2)
{
  *(double *)(v2 + 56) = a1;
  *(double *)(v2 + 64) = a2;
}

uint64_t (*_IdentifiedViewProxy.position.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _IdentifiedViewProxy.transform.getter@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = *(void *)(v1 + 72);
  long long v2 = *(_OWORD *)(v1 + 96);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(a1 + 24) = v2;
  return swift_retain();
}

__n128 _IdentifiedViewProxy.transform.setter(uint64_t a1)
{
  unint64_t v2 = *(void *)a1;
  __n128 v6 = *(__n128 *)(a1 + 8);
  unint64_t v3 = *(void *)(a1 + 24);
  unint64_t v4 = *(void *)(a1 + 32);
  swift_release();
  v1[4].n128_u64[1] = v2;
  __n128 result = v6;
  v1[5] = v6;
  v1[6].n128_u64[0] = v3;
  v1[6].n128_u64[1] = v4;
  return result;
}

uint64_t (*_IdentifiedViewProxy.transform.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t key path getter for _IdentifiedViewProxy.adjustment : _IdentifiedViewProxy@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v4 = *(void *)(a1 + 120);
  if (v3)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    __n128 v6 = partial apply for specialized closure #1 in StatefulRule<>.update<A>(modify:create:);
  }
  else
  {
    __n128 v6 = 0;
    uint64_t v5 = 0;
  }
  *a2 = v6;
  a2[1] = (uint64_t (*)())v5;

  return outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v3);
}

uint64_t key path setter for _IdentifiedViewProxy.adjustment : _IdentifiedViewProxy(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    __n128 v6 = partial apply for thunk for @escaping @callee_guaranteed (@inout CGRect) -> (@out ());
  }
  else
  {
    __n128 v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = *(void *)(a2 + 112);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v3);
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v7);
  *(void *)(a2 + 112) = v6;
  *(void *)(a2 + 120) = v5;
  return result;
}

uint64_t _IdentifiedViewProxy.adjustment.getter()
{
  uint64_t v1 = *(void *)(v0 + 112);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v1);
  return v1;
}

uint64_t _IdentifiedViewProxy.adjustment.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(*(void *)(v2 + 112));
  *(void *)(v2 + 112) = a1;
  *(void *)(v2 + 120) = a2;
  return result;
}

uint64_t (*_IdentifiedViewProxy.adjustment.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _IdentifiedViewProxy.accessibilityNodeStorage.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of Any?(v1 + 128, a1);
}

uint64_t _IdentifiedViewProxy.accessibilityNodeStorage.setter(uint64_t a1)
{
  return outlined assign with take of Any?(a1, v1 + 128);
}

uint64_t outlined assign with take of Any?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Any?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*_IdentifiedViewProxy.accessibilityNodeStorage.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_IdentifiedViewProxy.platform.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _IdentifiedViewProxy.init(identifier:size:position:transform:accessibilityNode:platform:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>, double a8@<D3>)
{
  uint64_t v8 = *a2;
  long long v9 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a4 = *(_OWORD *)a1;
  *(_OWORD *)(a4 + 16) = v9;
  *(_OWORD *)(a4 + 144) = 0u;
  *(void *)(a4 + 32) = *(void *)(a1 + 32);
  *(double *)(a4 + 40) = a5;
  *(double *)(a4 + 48) = a6;
  *(double *)(a4 + 56) = a7;
  *(double *)(a4 + 64) = a8;
  *(void *)(a4 + 72) = v8;
  long long v10 = *(_OWORD *)(a2 + 3);
  *(_OWORD *)(a4 + 80) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(a4 + 96) = v10;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 128) = 0u;
  return outlined assign with take of Any?(a3, a4 + 128);
}

double _IdentifiedViewProxy.boundingRect.getter()
{
  uint64_t v1 = *(void *)(v0 + 72);
  v11[0] = 0;
  v11[1] = 0;
  long long v12 = *(_OWORD *)(v0 + 40);
  uint64_t v9 = 0;
  memset(v8, 0, sizeof(v8));
  char v10 = 2;
  uint64_t v5 = v1;
  float64x2_t v2 = vsubq_f64(*(float64x2_t *)(v0 + 96), vsubq_f64(*(float64x2_t *)(v0 + 56), *(float64x2_t *)(v0 + 80)));
  long long v6 = *(_OWORD *)(v0 + 56);
  float64x2_t v7 = v2;
  swift_retain();
  CGRect.convert(to:transform:)((uint64_t)v8, (double *)&v5);
  outlined destroy of CoordinateSpace((uint64_t)v8);
  uint64_t v3 = *(void (**)(void *))(v0 + 112);
  if (v3) {
    v3(v11);
  }
  swift_release();
  return *(double *)v11;
}

uint64_t IdentifiedViewPlatformInputs.init(inputs:outputs:)()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_release();
}

uint64_t destroy for _IdentifiedViewProxy(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  uint64_t result = swift_release();
  if (*(void *)(a1 + 112)) {
    uint64_t result = swift_release();
  }
  if (*(void *)(a1 + 152)) {
    return __swift_destroy_boxed_opaque_existential_1(a1 + 128);
  }
  return result;
}

uint64_t initializeWithCopy for _IdentifiedViewProxy(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  uint64_t v5 = *(void *)(a2 + 112);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  long long v6 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v6;
  swift_retain();
  if (v5)
  {
    uint64_t v7 = *(void *)(a2 + 120);
    *(void *)(a1 + 112) = v5;
    *(void *)(a1 + 120) = v7;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  }
  uint64_t v8 = (_OWORD *)(a1 + 128);
  uint64_t v9 = (_OWORD *)(a2 + 128);
  uint64_t v10 = *(void *)(a2 + 152);
  if (v10)
  {
    *(void *)(a1 + 152) = v10;
    (**(void (***)(_OWORD *, _OWORD *))(v10 - 8))(v8, v9);
  }
  else
  {
    long long v11 = *(_OWORD *)(a2 + 144);
    *uint64_t v8 = *v9;
    *(_OWORD *)(a1 + 144) = v11;
  }
  return a1;
}

uint64_t assignWithCopy for _IdentifiedViewProxy(uint64_t a1, uint64_t a2)
{
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_retain();
  swift_release();
  uint64_t v4 = *(void *)(a1 + 112);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  uint64_t v5 = *(void *)(a2 + 112);
  if (v4)
  {
    if (v5)
    {
      uint64_t v6 = *(void *)(a2 + 120);
      *(void *)(a1 + 112) = v5;
      *(void *)(a1 + 120) = v6;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v5)
  {
    uint64_t v7 = *(void *)(a2 + 120);
    *(void *)(a1 + 112) = v5;
    *(void *)(a1 + 120) = v7;
    swift_retain();
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
LABEL_8:
  uint64_t v8 = *(void *)(a2 + 152);
  if (!*(void *)(a1 + 152))
  {
    if (v8)
    {
      *(void *)(a1 + 152) = v8;
      (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 128, a2 + 128);
      return a1;
    }
LABEL_14:
    long long v9 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v9;
    return a1;
  }
  if (!v8)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 128);
    goto LABEL_14;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)(a1 + 128), (uint64_t *)(a2 + 128));
  return a1;
}

uint64_t assignWithTake for _IdentifiedViewProxy(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_release();
  uint64_t v5 = *(void *)(a2 + 112);
  uint64_t v6 = *(void *)(a1 + 112);
  long long v7 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v7;
  if (v6)
  {
    if (v5)
    {
      uint64_t v8 = *(void *)(a2 + 120);
      *(void *)(a1 + 112) = v5;
      *(void *)(a1 + 120) = v8;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v5)
  {
    uint64_t v9 = *(void *)(a2 + 120);
    *(void *)(a1 + 112) = v5;
    *(void *)(a1 + 120) = v9;
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
LABEL_8:
  if (*(void *)(a1 + 152)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 128);
  }
  long long v10 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v10;
  return a1;
}

uint64_t getEnumTagSinglePayload for _IdentifiedViewProxy(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 160)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _IdentifiedViewProxy(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 160) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 160) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _IdentifiedViewProxy()
{
  return &type metadata for _IdentifiedViewProxy;
}

ValueMetadata *type metadata accessor for IdentifiedViewPlatformInputs()
{
  return &type metadata for IdentifiedViewPlatformInputs;
}

ValueMetadata *type metadata accessor for _IdentifiedViewProxy.Platform()
{
  return &type metadata for _IdentifiedViewProxy.Platform;
}

uint64_t sub_245DCE154()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@inout CGRect) -> (@out ())()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t _BenchmarkHost.viewForIdentifier<A, B>(_:_:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  swift_getObjectType();
  uint64_t v6 = swift_conformsToProtocol2();
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  if (v6) {
    uint64_t v8 = v3;
  }
  else {
    uint64_t v8 = 0;
  }
  if (v8)
  {
    uint64_t ObjectType = swift_getObjectType();
    swift_unknownObjectRetain();
    ViewRendererHost.findIdentifier<A, B>(_:root:filter:)(0x100000000, ObjectType, a1, v7, a2);
    return swift_unknownObjectRelease();
  }
  else
  {
    long long v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56);
    return v11(a2, 1, 1, a1);
  }
}

uint64_t _BenchmarkHost.stateForIdentifier<A, B, C>(_:type:in:)@<X0>(uint64_t a1@<X8>)
{
  swift_getObjectType();
  uint64_t v3 = swift_conformsToProtocol2();
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  if (v3) {
    uint64_t v5 = v1;
  }
  else {
    uint64_t v5 = 0;
  }
  if (v5)
  {
    uint64_t ObjectType = swift_getObjectType();
    swift_unknownObjectRetain();
    ViewRendererHost.stateForIdentifier<A, B, C>(_:type:in:)(ObjectType, v4, a1);
    return swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v8 = type metadata accessor for Binding();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56);
    return v9(a1, 1, 1, v8);
  }
}

uint64_t ViewRendererHost.stateForIdentifier<A, B, C>(_:type:in:)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X7>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Binding();
  return ViewRendererHost.findIdentifier<A, B>(_:root:filter:)(0x100000000, a1, v6, a2, a3);
}

uint64_t dispatch thunk of IdentifierProvider.matchesIdentifier<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t closure #1 in ViewRendererHost.viewForIdentifier<A, B>(_:_:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v22 = a5;
  uint64_t v23 = a6;
  int v24 = a1;
  uint64_t v25 = a8;
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v22 - v14;
  uint64_t v16 = type metadata accessor for ViewValuePredicate();
  uint64_t v17 = *(void *)(v16 - 8);
  double v18 = MEMORY[0x270FA5388](v16);
  int v20 = (char *)&v22 - v19;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(*(void *)(a4 - 8) + 56))(v15, 1, 1, a4, v18);
  ViewValuePredicate.init(view:)((uint64_t)v15, a4, (uint64_t)v20);
  uint64_t v26 = a2;
  uint64_t v27 = a3;
  uint64_t v28 = a4;
  uint64_t v29 = v22;
  uint64_t v30 = v23;
  uint64_t v31 = a7;
  unint64_t v32 = v20;
  AGAttribute.breadthFirstSearch(options:_:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 16))(v25, v20, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v20, v16);
}

uint64_t ViewRendererHost.findIdentifier<A, B>(_:root:filter:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X4>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  if ((a1 & 0x100000000) != 0)
  {
    (*(void (**)(uint64_t, uint64_t))(a4 + 16))(a2, a4);
    swift_release();
  }
  uint64_t v6 = type metadata accessor for Optional();
  swift_allocBox();
  uint64_t v8 = v7;
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56))(v7, 1, 1, a3);
  MEMORY[0x270FA5388](v9);
  AGAttribute.breadthFirstSearch(options:_:)();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a5, v8, v6);
  return swift_release();
}

uint64_t closure #1 in ViewRendererHost.stateForIdentifier<A, B, C>(_:type:in:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  v22[1] = a1;
  uint64_t v23 = a9;
  uint64_t v16 = type metadata accessor for ViewStatePredicate();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)v22 - v18;
  ViewStatePredicate.init()((uint64_t)v22 - v18);
  uint64_t v24 = a2;
  uint64_t v25 = a3;
  uint64_t v26 = a4;
  uint64_t v27 = a5;
  uint64_t v28 = a6;
  uint64_t v29 = a7;
  uint64_t v30 = a8;
  uint64_t v31 = v19;
  AGAttribute.breadthFirstSearch(options:_:)();
  type metadata accessor for Binding();
  uint64_t v20 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v20 - 8) + 16))(v23, v19, v20);
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v19, v16);
}

uint64_t partial apply for closure #1 in ViewRendererHost.stateForIdentifier<A, B, C>(_:type:in:)@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  return closure #1 in ViewRendererHost.stateForIdentifier<A, B, C>(_:type:in:)(a1, v2[2], v2[3], v2[4], v2[5], v2[6], v2[7], v2[8], a2);
}

uint64_t partial apply for closure #1 in ViewRendererHost.findIdentifier<A, B>(_:root:filter:)(uint64_t a1)
{
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v7 = v1[7];
  uint64_t v9 = (void (*)(uint64_t))v1[8];
  uint64_t v10 = v1[9];
  uint64_t v11 = v1[10];
  AttributeInfo = (uint64_t *)AGGraphGetAttributeInfo();
  return project #1 <A><A1, B1><A2>(type:) in closure #1 in ViewRendererHost.findIdentifier<A, B>(_:root:filter:)(*AttributeInfo, a1, v7, v9, v10, v11, v3, v4, v5, *AttributeInfo, v6, v8) & 1;
}

uint64_t project #1 <A><A1, B1><A2>(type:) in closure #1 in ViewRendererHost.findIdentifier<A, B>(_:root:filter:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v48 = a3;
  uint64_t v49 = a8;
  uint64_t v47 = a5;
  long long v44 = a4;
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v46 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v40 - v17;
  uint64_t v45 = *(void *)(a9 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = *(void *)(a10 - 8);
  MEMORY[0x270FA5388](v23);
  uint64_t v25 = (char *)&v40 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = swift_projectBox();
  AGGraphGetAttributeInfo();
  (*(void (**)(char *))(v22 + 16))(v25);
  type metadata accessor for IdentifierProvider();
  if (swift_dynamicCast())
  {
    unint64_t v41 = v21;
    uint64_t v42 = v26;
    uint64_t v27 = v45;
    long long v43 = v15;
    uint64_t v28 = v46;
    outlined init with take of ScrollStateRequest(v50, (uint64_t)v52);
    uint64_t v29 = v53;
    uint64_t v30 = v54;
    __swift_project_boxed_opaque_existential_1(v52, v53);
    if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 8))(v48, v49, a12, v29, v30))
    {
      v44(a2);
      uint64_t v31 = v27;
      int v32 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48))(v18, 1, a9);
      uint64_t v33 = v28;
      if (v32 != 1)
      {
        long long v36 = *(void (**)(char *, char *, uint64_t))(v31 + 32);
        long long v37 = v41;
        v36(v41, v18, a9);
        long long v38 = v43;
        v36(v43, v37, a9);
        uint64_t v34 = 1;
        (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v38, 0, 1, a9);
        uint64_t v39 = v42;
        swift_beginAccess();
        (*(void (**)(uint64_t, char *, uint64_t))(v33 + 40))(v39, v38, v13);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
        return v34;
      }
      (*(void (**)(char *, uint64_t))(v28 + 8))(v18, v13);
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
  }
  else
  {
    uint64_t v51 = 0;
    memset(v50, 0, sizeof(v50));
    outlined destroy of IdentifierProvider?((uint64_t)v50);
  }
  return 0;
}

unint64_t type metadata accessor for IdentifierProvider()
{
  unint64_t result = lazy cache variable for type metadata for IdentifierProvider;
  if (!lazy cache variable for type metadata for IdentifierProvider)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for IdentifierProvider);
  }
  return result;
}

uint64_t outlined destroy of IdentifierProvider?(uint64_t a1)
{
  type metadata accessor for IdentifierProvider?();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for IdentifierProvider?()
{
  if (!lazy cache variable for type metadata for IdentifierProvider?)
  {
    type metadata accessor for IdentifierProvider();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for IdentifierProvider?);
    }
  }
}

BOOL partial apply for closure #1 in closure #1 in ViewRendererHost.stateForIdentifier<A, B, C>(_:type:in:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ViewStatePredicate();
  return ViewStatePredicate.apply(to:)(a1, v2);
}

uint64_t partial apply for closure #1 in ViewRendererHost.viewForIdentifier<A, B>(_:_:)@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  return closure #1 in ViewRendererHost.viewForIdentifier<A, B>(_:_:)(a1, v2[2], v2[3], v2[4], v2[5], v2[6], v2[7], a2);
}

BOOL partial apply for closure #1 in closure #1 in ViewRendererHost.viewForIdentifier<A, B>(_:_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ViewValuePredicate();
  return ViewValuePredicate.apply(to:)(a1, v2);
}

uint64_t Text.init(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  type metadata accessor for ConcatenatedTextStorage();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  *(void *)(result + 24) = a2;
  *(unsigned char *)(result + 32) = a3 & 1;
  *(void *)(result + 40) = a4;
  *(void *)(result + 48) = a5;
  *(void *)(result + 56) = a6;
  *(unsigned char *)(result + 64) = a7 & 1;
  *(void *)(result + 72) = a8;
  return result;
}

uint64_t ConcatenatedTextStorage.resolvesToEmpty(in:with:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = *a2;
  uint64_t v7 = *(void *)(v2 + 16);
  unint64_t v8 = *(void *)(v3 + 24);
  if (*(unsigned char *)(v3 + 32) != 1)
  {
    uint64_t v14 = HIBYTE(v8) & 0xF;
    if ((v8 & 0x2000000000000000) == 0) {
      uint64_t v14 = v7 & 0xFFFFFFFFFFFFLL;
    }
    if (!v14) {
      goto LABEL_3;
    }
LABEL_8:
    char v13 = 0;
    return v13 & 1;
  }
  uint64_t v18 = *a1;
  uint64_t v19 = v5;
  uint64_t v17 = v6;
  uint64_t v9 = *(uint64_t (**)(uint64_t *, uint64_t *))(*(void *)v7 + 88);
  swift_retain();
  LOBYTE(v9) = v9(&v18, &v17);
  outlined consume of Text.Storage(v7, v8, 1);
  if ((v9 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_3:
  uint64_t v10 = *(void *)(v3 + 48);
  unint64_t v11 = *(void *)(v3 + 56);
  if (*(unsigned char *)(v3 + 64))
  {
    uint64_t v18 = v4;
    uint64_t v19 = v5;
    uint64_t v17 = v6;
    uint64_t v12 = *(uint64_t (**)(uint64_t *, uint64_t *))(*(void *)v10 + 88);
    swift_retain();
    char v13 = v12(&v18, &v17);
    outlined consume of Text.Storage(v10, v11, 1);
  }
  else
  {
    uint64_t v15 = HIBYTE(v11) & 0xF;
    if ((v11 & 0x2000000000000000) == 0) {
      uint64_t v15 = v10 & 0xFFFFFFFFFFFFLL;
    }
    char v13 = v15 == 0;
  }
  return v13 & 1;
}

uint64_t ConcatenatedTextStorage.isStyled(options:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(v1 + 40);
  if (*(unsigned char *)(v1 + 32) != 1) {
    goto LABEL_3;
  }
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v21 = *a1;
  uint64_t v7 = *(uint64_t (**)(uint64_t *))(*(void *)v6 + 104);
  swift_retain();
  LOBYTE(v7) = v7(&v21);
  uint64_t v8 = 1;
  outlined consume of Text.Storage(v6, v5, 1);
  if ((v7 & 1) == 0)
  {
LABEL_3:
    uint64_t v9 = *(void *)(v4 + 16);
    if (v9)
    {
      uint64_t v10 = (unsigned char *)(v4 + 40);
      while ((*v10 & 0xE0) == 0xC0)
      {
        uint64_t v11 = *((void *)v10 - 1);
        uint64_t v21 = v3;
        if ((*(uint64_t (**)(uint64_t *))(*(void *)v11 + 80))(&v21)) {
          break;
        }
        v10 += 16;
        if (!--v9) {
          goto LABEL_8;
        }
      }
      return 1;
    }
LABEL_8:
    uint64_t v12 = *(void *)(v2 + 72);
    if (*(unsigned char *)(v2 + 64) != 1) {
      goto LABEL_10;
    }
    uint64_t v15 = v2 + 48;
    uint64_t v13 = *(void *)(v2 + 48);
    uint64_t v14 = *(void *)(v15 + 8);
    uint64_t v21 = v3;
    uint64_t v16 = *(uint64_t (**)(uint64_t *))(*(void *)v13 + 104);
    swift_retain();
    LOBYTE(v16) = v16(&v21);
    uint64_t v8 = 1;
    outlined consume of Text.Storage(v13, v14, 1);
    if ((v16 & 1) == 0)
    {
LABEL_10:
      uint64_t v17 = *(void *)(v12 + 16);
      if (v17)
      {
        for (uint64_t i = (unsigned char *)(v12 + 40); (*i & 0xE0) == 0xC0; i += 16)
        {
          uint64_t v19 = *((void *)i - 1);
          uint64_t v21 = v3;
          if ((*(uint64_t (**)(uint64_t *))(*(void *)v19 + 80))(&v21)) {
            break;
          }
          if (!--v17) {
            return 0;
          }
        }
        return 1;
      }
      return 0;
    }
  }
  return v8;
}

uint64_t ConcatenatedTextStorage.__ivar_destroyer()
{
  outlined consume of Text.Storage(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
  swift_bridgeObjectRelease();
  outlined consume of Text.Storage(*(void *)(v0 + 48), *(void *)(v0 + 56), *(unsigned char *)(v0 + 64));

  return swift_bridgeObjectRelease();
}

void *Text.Encapsulation.resolve(in:)(uint64_t *a1)
{
  uint64_t v26 = a1[1];
  uint64_t v27 = *a1;
  uint64_t v2 = *v1;
  char v3 = *((unsigned char *)v1 + 8);
  uint64_t v4 = v1[2];
  char v5 = *((unsigned char *)v1 + 24);
  uint64_t v6 = v1[4];
  char v7 = *((unsigned char *)v1 + 40);
  double v8 = *((double *)v1 + 6);
  char v9 = *((unsigned char *)v1 + 56);
  uint64_t v10 = v1[8];
  double v11 = *((double *)v1 + 9);
  char v28 = *((unsigned char *)v1 + 80);
  uint64_t v25 = v1[11];
  char v12 = *((unsigned char *)v1 + 96);
  id v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F03980]), sel_init);
  uint64_t v14 = v13;
  if (v3)
  {
    if (v5) {
      goto LABEL_3;
    }
  }
  else
  {
    objc_msgSend(v13, sel_setScale_, v2);
    if (v5)
    {
LABEL_3:
      if (v7) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  objc_msgSend(v14, sel_setShape_, v4, v25);
  if (v7)
  {
LABEL_4:
    if (v12) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  objc_msgSend(v14, sel_setStyle_, v6, v25);
  if (v12)
  {
LABEL_5:
    if (v9) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
LABEL_13:
  objc_msgSend(v14, sel_setPlatterSize_, v25, v25);
  if (v9)
  {
LABEL_6:
    if (!v10) {
      goto LABEL_7;
    }
LABEL_15:
    v29[0] = v27;
    v29[1] = v26;
    uint64_t v16 = *(float (**)(void *))(*(void *)v10 + 104);
    swift_retain();
    float v17 = v16(v29);
    float v19 = v18;
    float v21 = v20;
    float v23 = v22;
    if (one-time initialization token for cache != -1) {
      swift_once();
    }
    uint64_t v24 = (void *)specialized ObjectCache.subscript.getter(v17, v19, v21, v23);
    objc_msgSend(v14, sel_setPlatformColor_, v24);
    swift_release();

    if ((v28 & 1) == 0) {
      goto LABEL_8;
    }
    return v14;
  }
LABEL_14:
  objc_msgSend(v14, sel_setLineWeight_, v8, v25);
  if (v10) {
    goto LABEL_15;
  }
LABEL_7:
  if ((v28 & 1) == 0) {
LABEL_8:
  }
    objc_msgSend(v14, sel_setMinimumWidth_, v11, v25);
  return v14;
}

uint64_t Text.Encapsulation.init(scale:shape:style:lineWeight:color:minimumWidth:)@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>)
{
  char v9 = *(unsigned char *)(result + 8);
  uint64_t v10 = *a2;
  char v11 = *((unsigned char *)a2 + 8);
  uint64_t v12 = *a3;
  char v13 = *((unsigned char *)a3 + 8);
  *(void *)a9 = *(void *)result;
  *(unsigned char *)(a9 + 8) = v9;
  *(void *)(a9 + 16) = v10;
  *(unsigned char *)(a9 + 24) = v11;
  *(void *)(a9 + 32) = v12;
  *(unsigned char *)(a9 + 40) = v13;
  *(void *)(a9 + 48) = a4;
  *(unsigned char *)(a9 + 56) = a5 & 1;
  *(void *)(a9 + 64) = a6;
  *(void *)(a9 + 72) = a7;
  *(unsigned char *)(a9 + 80) = a8 & 1;
  *(void *)(a9 + 88) = 0;
  *(unsigned char *)(a9 + 96) = 1;
  return result;
}

uint64_t Text.Encapsulation.init(scale:shape:style:platterSize:lineWeight:color:minimumWidth:)@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char a10)
{
  char v10 = *(unsigned char *)(result + 8);
  uint64_t v11 = *a2;
  char v12 = *((unsigned char *)a2 + 8);
  uint64_t v13 = *a3;
  char v14 = *((unsigned char *)a3 + 8);
  uint64_t v15 = *a4;
  char v16 = *((unsigned char *)a4 + 8);
  *(void *)a9 = *(void *)result;
  *(unsigned char *)(a9 + 8) = v10;
  *(void *)(a9 + 16) = v11;
  *(unsigned char *)(a9 + 24) = v12;
  *(void *)(a9 + 32) = v13;
  *(unsigned char *)(a9 + 40) = v14;
  *(void *)(a9 + 48) = a5;
  *(unsigned char *)(a9 + 56) = a6 & 1;
  *(void *)(a9 + 64) = a7;
  *(void *)(a9 + 72) = a8;
  *(unsigned char *)(a9 + 80) = a10 & 1;
  *(void *)(a9 + 88) = v15;
  *(unsigned char *)(a9 + 96) = v16;
  return result;
}

void static Text.Encapsulation.Scale.large.getter(void *a1@<X8>)
{
  *a1 = 2;
}

void static Text.Encapsulation.PlatterSize.regular.getter(void *a1@<X8>)
{
  *a1 = 0;
}

void static Text.Encapsulation.PlatterSize.large.getter(void *a1@<X8>)
{
  *a1 = 1;
}

void Text.Encapsulation.PlatterSize.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

BOOL static Text.Encapsulation.PlatterSize.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2;
}

void Text.Encapsulation.hash(into:)(uint64_t a1)
{
  Swift::UInt v3 = *(void *)(v1 + 16);
  int v4 = *(unsigned __int8 *)(v1 + 24);
  Swift::UInt v5 = *(void *)(v1 + 32);
  int v6 = *(unsigned __int8 *)(v1 + 40);
  Swift::UInt64 v7 = *(void *)(v1 + 48);
  int v8 = *(unsigned __int8 *)(v1 + 56);
  uint64_t v9 = *(void *)(v1 + 64);
  Swift::UInt v10 = *(void *)(v1 + 88);
  int v18 = *(unsigned __int8 *)(v1 + 96);
  int v19 = *(unsigned __int8 *)(v1 + 80);
  Swift::UInt64 v17 = *(void *)(v1 + 72);
  if (*(unsigned char *)(v1 + 8) == 1)
  {
    Hasher._combine(_:)(0);
    if (!v4) {
      goto LABEL_3;
    }
  }
  else
  {
    Swift::UInt v16 = *(void *)(v1 + 88);
    Swift::UInt v13 = *(void *)v1;
    Hasher._combine(_:)(1u);
    Swift::UInt v14 = v13;
    Swift::UInt v10 = v16;
    Hasher._combine(_:)(v14);
    if (!v4)
    {
LABEL_3:
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v3);
      if (!v6) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  Hasher._combine(_:)(0);
  if (!v6)
  {
LABEL_4:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v5);
    if (!v8) {
      goto LABEL_5;
    }
LABEL_15:
    Hasher._combine(_:)(0);
    if (v9) {
      goto LABEL_9;
    }
    goto LABEL_16;
  }
LABEL_14:
  Hasher._combine(_:)(0);
  if (v8) {
    goto LABEL_15;
  }
LABEL_5:
  Hasher._combine(_:)(1u);
  if ((v7 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v11 = v7;
  }
  else {
    Swift::UInt64 v11 = 0;
  }
  Hasher._combine(_:)(v11);
  if (v9)
  {
LABEL_9:
    Hasher._combine(_:)(1u);
    char v12 = *(void (**)(uint64_t))(*(void *)v9 + 136);
    swift_retain();
    v12(a1);
    swift_release();
    if (v19) {
      goto LABEL_10;
    }
LABEL_17:
    Hasher._combine(_:)(1u);
    if ((v17 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v15 = v17;
    }
    else {
      Swift::UInt64 v15 = 0;
    }
    Hasher._combine(_:)(v15);
    if (!v18) {
      goto LABEL_11;
    }
    goto LABEL_21;
  }
LABEL_16:
  Hasher._combine(_:)(0);
  if (!v19) {
    goto LABEL_17;
  }
LABEL_10:
  Hasher._combine(_:)(0);
  if (!v18)
  {
LABEL_11:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v10);
    return;
  }
LABEL_21:
  Hasher._combine(_:)(0);
}

Swift::Int Text.Encapsulation.hashValue.getter()
{
  char v1 = *(unsigned char *)(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 16);
  char v3 = *(unsigned char *)(v0 + 24);
  uint64_t v4 = *(void *)(v0 + 32);
  char v5 = *(unsigned char *)(v0 + 40);
  uint64_t v6 = *(void *)(v0 + 48);
  char v7 = *(unsigned char *)(v0 + 56);
  char v8 = *(unsigned char *)(v0 + 80);
  uint64_t v9 = *(void *)(v0 + 88);
  char v10 = *(unsigned char *)(v0 + 96);
  v12[9] = *(void *)v0;
  char v13 = v1;
  uint64_t v14 = v2;
  char v15 = v3;
  uint64_t v16 = v4;
  char v17 = v5;
  uint64_t v18 = v6;
  char v19 = v7;
  long long v20 = *(_OWORD *)(v0 + 64);
  char v21 = v8;
  uint64_t v22 = v9;
  char v23 = v10;
  Hasher.init(_seed:)();
  Text.Encapsulation.hash(into:)((uint64_t)v12);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Text.Encapsulation()
{
  char v1 = *(unsigned char *)(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 16);
  char v3 = *(unsigned char *)(v0 + 24);
  uint64_t v4 = *(void *)(v0 + 32);
  char v5 = *(unsigned char *)(v0 + 40);
  uint64_t v6 = *(void *)(v0 + 48);
  char v7 = *(unsigned char *)(v0 + 56);
  char v8 = *(unsigned char *)(v0 + 80);
  uint64_t v9 = *(void *)(v0 + 88);
  char v10 = *(unsigned char *)(v0 + 96);
  v12[9] = *(void *)v0;
  char v13 = v1;
  uint64_t v14 = v2;
  char v15 = v3;
  uint64_t v16 = v4;
  char v17 = v5;
  uint64_t v18 = v6;
  char v19 = v7;
  long long v20 = *(_OWORD *)(v0 + 64);
  char v21 = v8;
  uint64_t v22 = v9;
  char v23 = v10;
  Hasher.init(_seed:)();
  Text.Encapsulation.hash(into:)((uint64_t)v12);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Text.Encapsulation()
{
  Hasher.init(_seed:)();
  Text.Encapsulation.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

BOOL specialized static Text.Encapsulation.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  char v3 = *(unsigned char *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  char v5 = *(unsigned char *)(a1 + 40);
  double v6 = *(double *)(a1 + 48);
  char v7 = *(unsigned char *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 64);
  double v9 = *(double *)(a1 + 72);
  char v10 = *(unsigned char *)(a1 + 80);
  uint64_t v11 = *(void *)(a1 + 88);
  char v12 = *(unsigned char *)(a1 + 96);
  uint64_t v13 = *(void *)(a2 + 64);
  double v14 = *(double *)(a2 + 72);
  int v15 = *(unsigned __int8 *)(a2 + 80);
  uint64_t v16 = *(void *)(a2 + 88);
  char v17 = *(unsigned char *)(a2 + 96);
  if (*(unsigned char *)(a1 + 8))
  {
    if (!*(unsigned char *)(a2 + 8)) {
      return 0;
    }
  }
  else
  {
    if (*(void *)a1 == *(void *)a2) {
      char v18 = *(unsigned char *)(a2 + 8);
    }
    else {
      char v18 = 1;
    }
    if (v18) {
      return 0;
    }
  }
  if (v3)
  {
    if (!*(unsigned char *)(a2 + 24)) {
      return 0;
    }
  }
  else
  {
    if (v2 == *(void *)(a2 + 16)) {
      char v19 = *(unsigned char *)(a2 + 24);
    }
    else {
      char v19 = 1;
    }
    if (v19) {
      return 0;
    }
  }
  if (v5)
  {
    if (!*(unsigned char *)(a2 + 40)) {
      return 0;
    }
  }
  else
  {
    if (v4 == *(void *)(a2 + 32)) {
      char v20 = *(unsigned char *)(a2 + 40);
    }
    else {
      char v20 = 1;
    }
    if (v20) {
      return 0;
    }
  }
  if (v7)
  {
    if (!*(unsigned char *)(a2 + 56)) {
      return 0;
    }
  }
  else
  {
    if (v6 == *(double *)(a2 + 48)) {
      char v21 = *(unsigned char *)(a2 + 56);
    }
    else {
      char v21 = 1;
    }
    if (v21) {
      return 0;
    }
  }
  if (v8)
  {
    if (!v13) {
      return 0;
    }
    if (v8 != v13)
    {
      uint64_t v22 = *(uint64_t (**)(uint64_t))(*(void *)v8 + 88);
      swift_retain();
      swift_retain();
      LOBYTE(v22) = v22(v13);
      swift_release();
      swift_release();
      if ((v22 & 1) == 0) {
        return 0;
      }
    }
  }
  else if (v13)
  {
    return 0;
  }
  if (v10)
  {
    if (!v15) {
      return 0;
    }
  }
  else
  {
    if (v9 == v14) {
      char v23 = v15;
    }
    else {
      char v23 = 1;
    }
    if (v23) {
      return 0;
    }
  }
  if ((v12 & 1) == 0)
  {
    if (v11 == v16) {
      char v25 = v17;
    }
    else {
      char v25 = 1;
    }
    return (v25 & 1) == 0;
  }
  return (v17 & 1) != 0;
}

unint64_t lazy protocol witness table accessor for type Text.Encapsulation.Scale and conformance Text.Encapsulation.Scale()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.Encapsulation.Scale and conformance Text.Encapsulation.Scale;
  if (!lazy protocol witness table cache variable for type Text.Encapsulation.Scale and conformance Text.Encapsulation.Scale)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Encapsulation.Scale and conformance Text.Encapsulation.Scale);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Text.Encapsulation.Shape and conformance Text.Encapsulation.Shape()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.Encapsulation.Shape and conformance Text.Encapsulation.Shape;
  if (!lazy protocol witness table cache variable for type Text.Encapsulation.Shape and conformance Text.Encapsulation.Shape)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Encapsulation.Shape and conformance Text.Encapsulation.Shape);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Text.Encapsulation.Style and conformance Text.Encapsulation.Style()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.Encapsulation.Style and conformance Text.Encapsulation.Style;
  if (!lazy protocol witness table cache variable for type Text.Encapsulation.Style and conformance Text.Encapsulation.Style)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Encapsulation.Style and conformance Text.Encapsulation.Style);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Text.Encapsulation.PlatterSize and conformance Text.Encapsulation.PlatterSize()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.Encapsulation.PlatterSize and conformance Text.Encapsulation.PlatterSize;
  if (!lazy protocol witness table cache variable for type Text.Encapsulation.PlatterSize and conformance Text.Encapsulation.PlatterSize)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Encapsulation.PlatterSize and conformance Text.Encapsulation.PlatterSize);
  }
  return result;
}

uint64_t initializeWithCopy for Text.Encapsulation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  uint64_t v3 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v3;
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for Text.Encapsulation(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  uint64_t v5 = a2[2];
  *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
  *(void *)(a1 + 16) = v5;
  uint64_t v6 = a2[4];
  *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
  *(void *)(a1 + 32) = v6;
  uint64_t v7 = a2[6];
  *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
  *(void *)(a1 + 48) = v7;
  *(void *)(a1 + 64) = a2[8];
  swift_retain();
  swift_release();
  uint64_t v8 = a2[9];
  *(unsigned char *)(a1 + 80) = *((unsigned char *)a2 + 80);
  *(void *)(a1 + 72) = v8;
  uint64_t v9 = a2[11];
  *(unsigned char *)(a1 + 96) = *((unsigned char *)a2 + 96);
  *(void *)(a1 + 88) = v9;
  return a1;
}

__n128 __swift_memcpy97_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(unsigned char *)(a1 + 96) = *((unsigned char *)a2 + 96);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for Text.Encapsulation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_release();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  return a1;
}

uint64_t getEnumTagSinglePayload for Text.Encapsulation(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 97)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 64);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Text.Encapsulation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 96) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 97) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 97) = 0;
    }
    if (a2) {
      *(void *)(result + 64) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.Encapsulation()
{
  return &type metadata for Text.Encapsulation;
}

ValueMetadata *type metadata accessor for Text.Encapsulation.Scale()
{
  return &type metadata for Text.Encapsulation.Scale;
}

ValueMetadata *type metadata accessor for Text.Encapsulation.Shape()
{
  return &type metadata for Text.Encapsulation.Shape;
}

ValueMetadata *type metadata accessor for Text.Encapsulation.Style()
{
  return &type metadata for Text.Encapsulation.Style;
}

ValueMetadata *type metadata accessor for Text.Encapsulation.PlatterSize()
{
  return &type metadata for Text.Encapsulation.PlatterSize;
}

double specialized Sequence.reduce<A>(into:_:)(uint64_t a1, double a2, double a3, double a4, double a5)
{
  uint64_t v5 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for CTFontRef(0);
    lazy protocol witness table accessor for type AnyTextSizingModifier and conformance AnyTextSizingModifier(&lazy protocol witness table cache variable for type CTFontRef and conformance CTFontRef, 255, type metadata accessor for CTFontRef);
    Set.Iterator.init(_cocoa:)();
    uint64_t v5 = v28;
    uint64_t v26 = v29;
    uint64_t v10 = v30;
    uint64_t v11 = v31;
    unint64_t v12 = v32;
  }
  else
  {
    uint64_t v13 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v26 = a1 + 56;
    uint64_t v10 = ~v13;
    uint64_t v14 = -v13;
    if (v14 < 64) {
      uint64_t v15 = ~(-1 << v14);
    }
    else {
      uint64_t v15 = -1;
    }
    unint64_t v12 = v15 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v11 = 0;
  }
  int64_t v16 = (unint64_t)(v10 + 64) >> 6;
  while (v5 < 0)
  {
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_42;
    }
    type metadata accessor for CTFontRef(0);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v20 = v27;
    swift_unknownObjectRelease();
    uint64_t v19 = v11;
    uint64_t v17 = v12;
    if (!v27) {
      goto LABEL_42;
    }
LABEL_32:
    uint64_t v27 = 0;
    int LanguageAwareOutsets = CTFontGetLanguageAwareOutsets();

    if (LanguageAwareOutsets)
    {
      if (a3 <= 0.0) {
        a3 = 0.0;
      }
      if (a2 <= 0.0) {
        a2 = 0.0;
      }
      if (a5 <= 0.0) {
        a5 = 0.0;
      }
      if (a4 <= 0.0) {
        a4 = 0.0;
      }
    }
    uint64_t v11 = v19;
    unint64_t v12 = v17;
  }
  if (v12)
  {
    uint64_t v17 = (v12 - 1) & v12;
    unint64_t v18 = __clz(__rbit64(v12)) | (v11 << 6);
    uint64_t v19 = v11;
    goto LABEL_31;
  }
  int64_t v21 = v11 + 1;
  if (__OFADD__(v11, 1)) {
    __break(1u);
  }
  if (v21 >= v16) {
    goto LABEL_42;
  }
  unint64_t v22 = *(void *)(v26 + 8 * v21);
  uint64_t v19 = v11 + 1;
  if (v22) {
    goto LABEL_30;
  }
  uint64_t v19 = v11 + 2;
  if (v11 + 2 >= v16) {
    goto LABEL_42;
  }
  unint64_t v22 = *(void *)(v26 + 8 * v19);
  if (v22) {
    goto LABEL_30;
  }
  uint64_t v19 = v11 + 3;
  if (v11 + 3 >= v16) {
    goto LABEL_42;
  }
  unint64_t v22 = *(void *)(v26 + 8 * v19);
  if (v22) {
    goto LABEL_30;
  }
  uint64_t v19 = v11 + 4;
  if (v11 + 4 >= v16) {
    goto LABEL_42;
  }
  unint64_t v22 = *(void *)(v26 + 8 * v19);
  if (v22) {
    goto LABEL_30;
  }
  uint64_t v19 = v11 + 5;
  if (v11 + 5 >= v16) {
    goto LABEL_42;
  }
  unint64_t v22 = *(void *)(v26 + 8 * v19);
  if (v22)
  {
LABEL_30:
    uint64_t v17 = (v22 - 1) & v22;
    unint64_t v18 = __clz(__rbit64(v22)) + (v19 << 6);
LABEL_31:
    id v20 = *(id *)(*(void *)(v5 + 48) + 8 * v18);
    if (!v20) {
      goto LABEL_42;
    }
    goto LABEL_32;
  }
  uint64_t v23 = v11 + 6;
  while (v16 != v23)
  {
    unint64_t v22 = *(void *)(v26 + 8 * v23++);
    if (v22)
    {
      uint64_t v19 = v23 - 1;
      goto LABEL_30;
    }
  }
LABEL_42:
  outlined consume of Set<EventID>.Iterator._Variant();
  return a2;
}

uint64_t EnvironmentValues.textSizing.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a1);
    swift_release_n();
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, a1);
  }
  return swift_release_n();
}

uint64_t EnvironmentValues.textSizing.setter(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *v1;
  unsigned __int8 v4 = *(unsigned char *)a1;
  swift_retain_n();
  swift_bridgeObjectRetain();
  specialized closure #1 in PropertyList.subscript.setter(v1, v4, v2);
  swift_bridgeObjectRelease();
  swift_release();
  if (v1[1])
  {
    uint64_t v5 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v5);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return swift_release();
}

unint64_t static Text.Sizing.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 == *a2) {
    return specialized static Array<A>.== infix(_:_:)(*((void *)a1 + 1), *((void *)a2 + 1));
  }
  else {
    return 0;
  }
}

uint64_t Text.Sizing.Storage.rawValue.getter()
{
  return *v0;
}

uint64_t Text.Sizing.Storage.init(rawValue:)@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v2 = result;
  if (result >= 3u) {
    char v2 = 3;
  }
  *a2 = v2;
  return result;
}

unsigned char *Text.Sizing.init(_:)@<X0>(unsigned char *result@<X0>, uint64_t a2@<X8>)
{
  *(unsigned char *)a2 = *result;
  *(void *)(a2 + 8) = MEMORY[0x263F8EE78];
  return result;
}

void AnyTextSizingModifier.updateLayoutMargins(_:)()
{
}

void AnyTextSizingModifier.isEqual(to:)()
{
}

uint64_t protocol witness for TextSizingModifier.updateLayoutMargins(_:) in conformance AnyTextSizingModifier()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 80))();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnyTextSizingModifier(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 88))(*a2) & 1;
}

uint64_t ConcreteTextSizingModifier.isEqual(to:)()
{
  uint64_t result = swift_dynamicCastClass();
  if (result)
  {
    swift_retain();
    char v1 = dispatch thunk of static Equatable.== infix(_:_:)();
    swift_release();
    return v1 & 1;
  }
  return result;
}

uint64_t ConcreteTextSizingModifier.updateLayoutMargins(_:)(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(*(void *)v1 + 112) + 16))(a1, *(void *)(*(void *)v1 + 104));
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Text.Sizing.Storage@<X0>(unsigned __int8 *a1@<X0>, char *a2@<X8>)
{
  return Text.Sizing.Storage.init(rawValue:)(*a1, a2);
}

void Text.Sizing.storage.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *Text.Sizing.storage.setter(unsigned char *result)
{
  *uint64_t v1 = *result;
  return result;
}

uint64_t (*Text.Sizing.storage.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t static Text.Sizing.standard.getter@<X0>(uint64_t a1@<X8>)
{
  return static Text.Sizing.standard.getter(&one-time initialization token for standard, &static Text.Sizing.standard, &qword_26B0F0F48, a1);
}

uint64_t static Text.Sizing.uniformLineHeight.getter@<X0>(uint64_t a1@<X8>)
{
  return static Text.Sizing.standard.getter(&one-time initialization token for uniformLineHeight, &static Text.Sizing.uniformLineHeight, &qword_26B0ECAE0, a1);
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance TextSizingKey@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  uint64_t v2 = qword_26B0F0C60;
  *(unsigned char *)a1 = static TextSizingKey.defaultValue;
  *(void *)(a1 + 8) = v2;

  return swift_bridgeObjectRetain();
}

void (*EnvironmentValues.textSizing.modify(void *a1))(unsigned __int8 **a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[5] = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v4, (uint64_t)v3);
    swift_release_n();
  }
  else
  {
    uint64_t v5 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v5, (uint64_t)v3);
  }
  swift_release_n();
  v3[6] = 0;
  return EnvironmentValues.textSizing.modify;
}

void EnvironmentValues.textSizing.modify(unsigned __int8 **a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (uint64_t *)*((void *)*a1 + 5);
  unsigned __int8 v5 = **a1;
  unint64_t v6 = *((void *)*a1 + 1);
  uint64_t v7 = *v4;
  swift_retain_n();
  swift_bridgeObjectRetain();
  if (a2)
  {
    swift_bridgeObjectRetain();
    specialized closure #1 in PropertyList.subscript.setter(v4, v5, v6);
    swift_release();
    swift_bridgeObjectRelease();
    if (v4[1])
    {
      uint64_t v8 = **((void **)v3 + 5);
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v7, v8);
      swift_release();
      swift_release();
    }
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    specialized closure #1 in PropertyList.subscript.setter(v4, v5, v6);
    swift_release();
    swift_bridgeObjectRelease();
    if (v4[1])
    {
      uint64_t v9 = **((void **)v3 + 5);
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v7, v9);
      swift_release();
      swift_release();
    }
    swift_bridgeObjectRelease();
    swift_release();
  }

  free(v3);
}

uint64_t static PreferTextLayoutManagerInput.defaultValue.getter()
{
  return 0;
}

uint64_t protocol witness for static ViewInputsModifier._makeViewInputs(modifier:inputs:) in conformance PreferTextLayoutManagerInputModifier(uint64_t a1, uint64_t *a2)
{
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a2, 1, (uint64_t)&v4);
  return swift_release();
}

uint64_t View.preferTextLayoutManager()(uint64_t a1)
{
  return View.modifier<A>(_:)(a1, a1, &type metadata for PreferTextLayoutManagerInputModifier);
}

unint64_t lazy protocol witness table accessor for type Text.Sizing.Storage and conformance Text.Sizing.Storage()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.Sizing.Storage and conformance Text.Sizing.Storage;
  if (!lazy protocol witness table cache variable for type Text.Sizing.Storage and conformance Text.Sizing.Storage)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Sizing.Storage and conformance Text.Sizing.Storage);
  }
  return result;
}

uint64_t type metadata accessor for AnyTextSizingModifier()
{
  return self;
}

uint64_t type metadata accessor for ConcreteTextSizingModifier()
{
  return __swift_instantiateGenericMetadata();
}

unsigned char *storeEnumTagSinglePayload for Text.Sizing.Storage(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245DD0F00);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.Sizing.Storage()
{
  return &type metadata for Text.Sizing.Storage;
}

ValueMetadata *type metadata accessor for PreferTextLayoutManagerInput()
{
  return &type metadata for PreferTextLayoutManagerInput;
}

ValueMetadata *type metadata accessor for PreferTextLayoutManagerInputModifier()
{
  return &type metadata for PreferTextLayoutManagerInputModifier;
}

uint64_t instantiation function for generic protocol witness table for AnyTextSizingModifier(uint64_t a1, uint64_t a2)
{
  uint64_t result = lazy protocol witness table accessor for type AnyTextSizingModifier and conformance AnyTextSizingModifier(&lazy protocol witness table cache variable for type AnyTextSizingModifier and conformance AnyTextSizingModifier, a2, (void (*)(uint64_t))type metadata accessor for AnyTextSizingModifier);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_245DD0FB0()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NSAttributedString.allFonts()(uint64_t a1)
{
  return closure #1 in NSAttributedString.allFonts()(a1);
}

uint64_t sub_245DD0FC8()
{
  return swift_deallocObject();
}

uint64_t lazy protocol witness table accessor for type AnyTextSizingModifier and conformance AnyTextSizingModifier(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for TextSizingKey()
{
  return &type metadata for TextSizingKey;
}

uint64_t static AnyTransition.slide.getter()
{
  type metadata accessor for TransitionBox<SlideTransition>();

  return swift_allocObject();
}

void type metadata accessor for TransitionBox<SlideTransition>()
{
  if (!lazy cache variable for type metadata for TransitionBox<SlideTransition>)
  {
    lazy protocol witness table accessor for type SlideTransition and conformance SlideTransition();
    unint64_t v0 = type metadata accessor for TransitionBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TransitionBox<SlideTransition>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type SlideTransition and conformance SlideTransition()
{
  unint64_t result = lazy protocol witness table cache variable for type SlideTransition and conformance SlideTransition;
  if (!lazy protocol witness table cache variable for type SlideTransition and conformance SlideTransition)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SlideTransition and conformance SlideTransition);
  }
  return result;
}

void SlideTransition.body(content:phase:)(char a1@<W1>, unsigned char *a2@<X8>)
{
  *a2 = 0x30401u >> (8 * a1);
}

uint64_t associated type witness table accessor for Transition.Body : View in SlideTransition()
{
  return swift_getOpaqueTypeConformance2();
}

void protocol witness for Transition.body(content:phase:) in conformance SlideTransition(char a1@<W1>, unsigned char *a2@<X8>)
{
  *a2 = 0x30401u >> (8 * a1);
}

ValueMetadata *type metadata accessor for SlideTransition()
{
  return &type metadata for SlideTransition;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<PlaceholderContentView<SlideTransition>, MoveTransition.MoveLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<PlaceholderContentView<SlideTransition>, MoveTransition.MoveLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<PlaceholderContentView<SlideTransition>, MoveTransition.MoveLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<PlaceholderContentView<SlideTransition>, MoveTransition.MoveLayout>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<PlaceholderContentView<SlideTransition>, MoveTransition.MoveLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<PlaceholderContentView<SlideTransition>, MoveTransition.MoveLayout>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<PlaceholderContentView<SlideTransition>, MoveTransition.MoveLayout>)
  {
    type metadata accessor for PlaceholderContentView<SlideTransition>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<PlaceholderContentView<SlideTransition>, MoveTransition.MoveLayout>);
    }
  }
}

void type metadata accessor for PlaceholderContentView<SlideTransition>()
{
  if (!lazy cache variable for type metadata for PlaceholderContentView<SlideTransition>)
  {
    unint64_t v0 = type metadata accessor for PlaceholderContentView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlaceholderContentView<SlideTransition>);
    }
  }
}

uint64_t ResolvableAbsoluteDate.init(_:style:in:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for TimeZone();
  uint64_t v42 = *(void *)(v8 - 8);
  uint64_t v43 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v40 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Locale();
  uint64_t v35 = *(void *)(v10 - 8);
  uint64_t v36 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v34 = (uint64_t)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = type metadata accessor for Calendar();
  uint64_t v12 = *(void *)(v33 - 8);
  MEMORY[0x270FA5388](v33);
  uint64_t v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v15 = *a2;
  uint64_t v16 = *((void *)a2 + 1);
  char v17 = a2[16];
  uint64_t v19 = *a3;
  uint64_t v18 = a3[1];
  uint64_t v20 = type metadata accessor for Date();
  uint64_t v38 = *(void *)(v20 - 8);
  uint64_t v39 = v20;
  int64_t v21 = *(void (**)(uint64_t, uint64_t))(v38 + 16);
  uint64_t v41 = a1;
  v21(a4, a1);
  uint64_t v37 = type metadata accessor for ResolvableAbsoluteDate();
  uint64_t v22 = a4;
  uint64_t v23 = a4 + *(int *)(v37 + 20);
  *(unsigned char *)uint64_t v23 = v15;
  *(void *)(v23 + 8) = v16;
  *(unsigned char *)(v23 + 16) = v17;
  if (v18)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v19, (uint64_t)v14);
  }
  else
  {
    uint64_t v24 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v24, (uint64_t)v14);
  }
  swift_release_n();
  swift_release_n();
  uint64_t v25 = v37;
  uint64_t v26 = v22;
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v22 + *(int *)(v37 + 24), v14, v33);
  uint64_t v27 = (uint64_t)v40;
  if (v18)
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v28 = v34;
    specialized PropertyList.Tracker.value<A>(_:for:)(v19, v34);
  }
  else
  {
    uint64_t v29 = swift_retain_n();
    uint64_t v28 = v34;
    specialized closure #1 in PropertyList.subscript.getter(v29, v34);
  }
  swift_release_n();
  swift_release_n();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 32))(v26 + *(int *)(v25 + 28), v28, v36);
  if (v18)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v19, v27);
    swift_release_n();
  }
  else
  {
    uint64_t v30 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v30, v27);
    swift_release();
  }
  swift_release_n();
  (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v41, v39);
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v42 + 32))(v26 + *(int *)(v25 + 32), v27, v43);
}

uint64_t specialized static TimeDataFormatting.Configuration.makeConfiguration(from:format:sizeVariant:secondsUpdateFrequencyBudget:)(uint64_t a1, uint64_t a2, double a3, uint64_t a4, uint64_t a5)
{
  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = &v25[-v10 - 16];
  type metadata accessor for (style: SystemFormatStyle.Timer, exact: Bool)(0, &lazy cache variable for type metadata for (style: SystemFormatStyle.Timer, exact: Bool), (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.Timer);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = &v25[-v13 - 16];
  uint64_t v16 = *(int *)(v15 + 56);
  v25[v16 - 16 - v13] = specialized FormatStyle.exactSizeVariant(_:)((uint64_t)&v25[-v13 - 16], a5) & 1;
  specialized DiscreteFormatStyle.alwaysOnDisplayFormat<A>(source:secondsUpdateFrequencyBudget:sizeVariant:)(a2, a5, (uint64_t)&v31, a3);
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(a2, (uint64_t)v11);
  specialized DiscreteFormatStyle.paused<A>(accordingTo:)(a2, (uint64_t *)&v24);
  if (*(void *)&v32[8])
  {
    outlined init with copy of AnyTrackedValue((uint64_t)&v31, (uint64_t)&v26);
    v27[24] = v32[24];
    if (*(void *)&v27[8])
    {
LABEL_3:
      outlined init with take of ScrollStateRequest(&v26, (uint64_t)&v28);
      goto LABEL_6;
    }
  }
  else
  {
    long long v26 = v31;
    *(_OWORD *)uint64_t v27 = *(unint64_t *)v32;
    *(_OWORD *)&v27[9] = *(_OWORD *)&v32[9];
    if (*(void *)&v27[8]) {
      goto LABEL_3;
    }
  }
  long long v28 = 0u;
  long long v29 = 0u;
  uint64_t v30 = 0;
LABEL_6:
  _s10Foundation4DateVSgWObTm_1((uint64_t)v11, a1, (uint64_t)&lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t)type metadata accessor for TimeDataSource<A>.DateStorage, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TimeDataSource<Date><A>.DateStorage);
  type metadata accessor for TimeDataFormatting.Configuration<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.Timer>(0, &lazy cache variable for type metadata for TimeDataFormatting.Configuration<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.Timer>, (uint64_t (*)(uint64_t))type metadata accessor for SystemFormatStyle.Timer, lazy protocol witness table accessor for type SystemFormatStyle.Timer and conformance SystemFormatStyle.Timer, (uint64_t (*)(uint64_t, void *))type metadata accessor for TimeDataFormatting.Configuration);
  uint64_t v18 = v17;
  outlined init with take of ScrollStateRequest(&v24, a1 + *(int *)(v17 + 52));
  uint64_t v19 = a1 + *(int *)(v18 + 56);
  if (*((void *)&v29 + 1))
  {
    outlined init with take of ScrollStateRequest(&v28, v19);
  }
  else
  {
    long long v20 = (unint64_t)v29;
    *(_OWORD *)uint64_t v19 = v28;
    *(_OWORD *)(v19 + 16) = v20;
    *(void *)(v19 + 32) = v30;
  }
  int v21 = v14[v16];
  outlined destroy of (style: SystemFormatStyle.Timer, exact: Bool)((uint64_t)v14, &lazy cache variable for type metadata for (style: SystemFormatStyle.Timer, exact: Bool), (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.Timer);
  long long v26 = v31;
  *(_OWORD *)uint64_t v27 = *(_OWORD *)v32;
  *(_OWORD *)&v27[9] = *(_OWORD *)&v32[9];
  if (v21 == 1)
  {
    if (*(void *)&v27[8]) {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v26);
    }
    return 1;
  }
  else
  {
    *(_OWORD *)&v25[9] = *(_OWORD *)&v27[9];
    *(_OWORD *)uint64_t v25 = *(_OWORD *)v27;
    long long v24 = v26;
    if (*(void *)&v27[8])
    {
      uint64_t v22 = v25[24];
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v24);
    }
    else
    {
      return 0;
    }
  }
  return v22;
}

{
  uint64_t v9;
  uint64_t v10;
  unsigned char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  int v21;
  uint64_t v22;
  long long v24;
  unsigned char v25[25];
  long long v26;
  unsigned char v27[25];
  long long v28;
  long long v29;
  uint64_t v30;
  long long v31;
  unsigned char v32[25];

  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = &v25[-v10 - 16];
  type metadata accessor for (style: SystemFormatStyle.Timer, exact: Bool)(0, &lazy cache variable for type metadata for (style: SystemFormatStyle.DateOffset, exact: Bool), (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.DateOffset);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = &v25[-v13 - 16];
  uint64_t v16 = *(int *)(v15 + 56);
  v25[v16 - 16 - v13] = specialized FormatStyle.exactSizeVariant(_:)((uint64_t)&v25[-v13 - 16], a5) & 1;
  specialized DiscreteFormatStyle.alwaysOnDisplayFormat<A>(source:secondsUpdateFrequencyBudget:sizeVariant:)(a2, a5, (uint64_t)&v31, a3);
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(a2, (uint64_t)v11);
  specialized DiscreteFormatStyle.paused<A>(accordingTo:)(a2, (uint64_t *)&v24);
  if (*(void *)&v32[8])
  {
    outlined init with copy of AnyTrackedValue((uint64_t)&v31, (uint64_t)&v26);
    v27[24] = v32[24];
    if (*(void *)&v27[8])
    {
LABEL_3:
      outlined init with take of ScrollStateRequest(&v26, (uint64_t)&v28);
      goto LABEL_6;
    }
  }
  else
  {
    long long v26 = v31;
    *(_OWORD *)uint64_t v27 = *(unint64_t *)v32;
    *(_OWORD *)&v27[9] = *(_OWORD *)&v32[9];
    if (*(void *)&v27[8]) {
      goto LABEL_3;
    }
  }
  long long v28 = 0u;
  long long v29 = 0u;
  uint64_t v30 = 0;
LABEL_6:
  _s10Foundation4DateVSgWObTm_1((uint64_t)v11, a1, (uint64_t)&lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t)type metadata accessor for TimeDataSource<A>.DateStorage, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TimeDataSource<Date><A>.DateStorage);
  type metadata accessor for TimeDataFormatting.Configuration<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.Timer>(0, &lazy cache variable for type metadata for TimeDataFormatting.Configuration<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.DateOffset>, (uint64_t (*)(uint64_t))type metadata accessor for SystemFormatStyle.DateOffset, lazy protocol witness table accessor for type SystemFormatStyle.DateOffset and conformance SystemFormatStyle.DateOffset, (uint64_t (*)(uint64_t, void *))type metadata accessor for TimeDataFormatting.Configuration);
  uint64_t v18 = v17;
  outlined init with take of ScrollStateRequest(&v24, a1 + *(int *)(v17 + 52));
  uint64_t v19 = a1 + *(int *)(v18 + 56);
  if (*((void *)&v29 + 1))
  {
    outlined init with take of ScrollStateRequest(&v28, v19);
  }
  else
  {
    long long v20 = (unint64_t)v29;
    *(_OWORD *)uint64_t v19 = v28;
    *(_OWORD *)(v19 + 16) = v20;
    *(void *)(v19 + 32) = v30;
  }
  int v21 = v14[v16];
  outlined destroy of (style: SystemFormatStyle.Timer, exact: Bool)((uint64_t)v14, &lazy cache variable for type metadata for (style: SystemFormatStyle.DateOffset, exact: Bool), (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.DateOffset);
  long long v26 = v31;
  *(_OWORD *)uint64_t v27 = *(_OWORD *)v32;
  *(_OWORD *)&v27[9] = *(_OWORD *)&v32[9];
  if (v21 == 1)
  {
    if (*(void *)&v27[8]) {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v26);
    }
    return 1;
  }
  else
  {
    *(_OWORD *)&v25[9] = *(_OWORD *)&v27[9];
    *(_OWORD *)uint64_t v25 = *(_OWORD *)v27;
    long long v24 = v26;
    if (*(void *)&v27[8])
    {
      uint64_t v22 = v25[24];
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v24);
    }
    else
    {
      return 0;
    }
  }
  return v22;
}

uint64_t type metadata accessor for ResolvableAbsoluteDate()
{
  uint64_t result = type metadata singleton initialization cache for ResolvableAbsoluteDate;
  if (!type metadata singleton initialization cache for ResolvableAbsoluteDate) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t specialized FormatStyle.exactSizeVariant(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  type metadata accessor for (SystemFormatStyle.Timer, Bool)(0, &lazy cache variable for type metadata for (SystemFormatStyle.Timer, Bool), (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.Timer);
  uint64_t v7 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v24 - v8;
  type metadata accessor for (style: SystemFormatStyle.Timer, exact: Bool)(0, &lazy cache variable for type metadata for (style: SystemFormatStyle.Timer, exact: Bool), (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.Timer);
  uint64_t v11 = v10 - 8;
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v24 - v12;
  *(void *)&long long v30 = type metadata accessor for SystemFormatStyle.Timer();
  *((void *)&v30 + 1) = lazy protocol witness table accessor for type SystemFormatStyle.DateOffset and conformance SystemFormatStyle.DateOffset(&lazy protocol witness table cache variable for type SystemFormatStyle.Timer and conformance SystemFormatStyle.Timer, (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.Timer);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v29);
  _s7SwiftUI17SystemFormatStyleO10DateOffsetVWOcTm_0(v3, (uint64_t)boxed_opaque_existential_1, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  long long v24 = v30;
  uint64_t v15 = v30;
  uint64_t v16 = __swift_project_boxed_opaque_existential_1(v29, v30);
  uint64_t v25 = a2;
  uint64_t v17 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v24 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(a2) = SystemFormatStyle.Timer.withSizeVariant(_:)((uint64_t)v19, &v25);
  long long v27 = v24;
  long long v20 = __swift_allocate_boxed_opaque_existential_1(v26);
  (*(void (**)(uint64_t *, char *, uint64_t))(v17 + 32))(v20, v19, v15);
  char v28 = a2 & 1;
  type metadata accessor for (style: SizeAdaptiveFormatStyle, exact: Bool)(0, (unint64_t *)&lazy cache variable for type metadata for (style: SizeAdaptiveFormatStyle, exact: Bool), (unint64_t *)&lazy cache variable for type metadata for SizeAdaptiveFormatStyle);
  swift_dynamicCast();
  LOBYTE(v7) = v9[*(int *)(v7 + 48)];
  uint64_t v21 = *(int *)(v11 + 56);
  outlined init with take of SystemFormatStyle.DateOffset((uint64_t)v9, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  v13[v21] = v7;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  uint64_t v22 = v13[v21];
  outlined init with take of SystemFormatStyle.DateOffset((uint64_t)v13, a1, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  return v22;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  long long v24;
  uint64_t v25;
  uint64_t v26[3];
  long long v27;
  char v28;
  uint64_t v29[3];
  long long v30;

  uint64_t v3 = v2;
  type metadata accessor for (SystemFormatStyle.Timer, Bool)(0, &lazy cache variable for type metadata for (SystemFormatStyle.DateOffset, Bool), (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.DateOffset);
  uint64_t v7 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v24 - v8;
  type metadata accessor for (style: SystemFormatStyle.Timer, exact: Bool)(0, &lazy cache variable for type metadata for (style: SystemFormatStyle.DateOffset, exact: Bool), (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.DateOffset);
  uint64_t v11 = v10 - 8;
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v24 - v12;
  *(void *)&long long v30 = type metadata accessor for SystemFormatStyle.DateOffset();
  *((void *)&v30 + 1) = lazy protocol witness table accessor for type SystemFormatStyle.DateOffset and conformance SystemFormatStyle.DateOffset(&lazy protocol witness table cache variable for type SystemFormatStyle.DateOffset and conformance SystemFormatStyle.DateOffset, (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.DateOffset);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v29);
  _s7SwiftUI17SystemFormatStyleO10DateOffsetVWOcTm_0(v3, (uint64_t)boxed_opaque_existential_1, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
  long long v24 = v30;
  uint64_t v15 = v30;
  uint64_t v16 = __swift_project_boxed_opaque_existential_1(v29, v30);
  uint64_t v25 = a2;
  uint64_t v17 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v24 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(a2) = SystemFormatStyle.DateOffset.withSizeVariant(_:)((uint64_t)v19, &v25);
  long long v27 = v24;
  long long v20 = __swift_allocate_boxed_opaque_existential_1(v26);
  (*(void (**)(uint64_t *, char *, uint64_t))(v17 + 32))(v20, v19, v15);
  char v28 = a2 & 1;
  type metadata accessor for (style: SizeAdaptiveFormatStyle, exact: Bool)(0, (unint64_t *)&lazy cache variable for type metadata for (style: SizeAdaptiveFormatStyle, exact: Bool), (unint64_t *)&lazy cache variable for type metadata for SizeAdaptiveFormatStyle);
  swift_dynamicCast();
  LOBYTE(v7) = v9[*(int *)(v7 + 48)];
  uint64_t v21 = *(int *)(v11 + 56);
  outlined init with take of SystemFormatStyle.DateOffset((uint64_t)v9, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
  v13[v21] = v7;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  uint64_t v22 = v13[v21];
  outlined init with take of SystemFormatStyle.DateOffset((uint64_t)v13, a1, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
  return v22;
}

uint64_t ResolvableAbsoluteDate.date.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Date();
  unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t ResolvableAbsoluteDate.date.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Date();
  unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);

  return v4(v1, a1, v3);
}

uint64_t (*ResolvableAbsoluteDate.date.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ResolvableAbsoluteDate.style.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = type metadata accessor for ResolvableAbsoluteDate();
  unsigned int v4 = (char *)(v1 + *(int *)(result + 20));
  char v5 = *v4;
  uint64_t v6 = *((void *)v4 + 1);
  LOBYTE(v4) = v4[16];
  *(unsigned char *)a1 = v5;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = (_BYTE)v4;
  return result;
}

uint64_t ResolvableAbsoluteDate.calendar.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ResolvableAbsoluteDate() + 24);
  uint64_t v4 = type metadata accessor for Calendar();
  char v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t ResolvableAbsoluteDate.locale.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ResolvableAbsoluteDate() + 28);
  uint64_t v4 = type metadata accessor for Locale();
  char v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t ResolvableAbsoluteDate.timeZone.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ResolvableAbsoluteDate() + 32);
  uint64_t v4 = type metadata accessor for TimeZone();
  char v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ResolvableAbsoluteDate.CodingKeys()
{
  uint64_t result = 1702125924;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x656C797473;
      break;
    case 2:
      uint64_t result = 0x7261646E656C6163;
      break;
    case 3:
      uint64_t result = 0x656C61636F6CLL;
      break;
    case 4:
      uint64_t result = 0x656E6F5A656D6974;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ResolvableAbsoluteDate.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized ResolvableAbsoluteDate.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ResolvableAbsoluteDate.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ResolvableAbsoluteDate.CodingKeys and conformance ResolvableAbsoluteDate.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ResolvableAbsoluteDate.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ResolvableAbsoluteDate.CodingKeys and conformance ResolvableAbsoluteDate.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t static ResolvableAbsoluteDate.decode(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  double v64 = a2;
  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v65 = (uint64_t)&v56 - v4;
  type metadata accessor for SystemFormatStyle.DateOffset?(0, &lazy cache variable for type metadata for SystemFormatStyle.DateOffset?, (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.DateOffset);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v56 - v6;
  uint64_t v8 = type metadata accessor for SystemFormatStyle.DateOffset();
  uint64_t v62 = *(void *)(v8 - 8);
  double v63 = (int *)v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v56 - v12;
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v56 - v15;
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v56 - v18;
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v56 - v21;
  MEMORY[0x270FA5388](v23);
  uint64_t v25 = (char *)&v56 - v24;
  uint64_t v66 = type metadata accessor for ResolvableAbsoluteDate();
  MEMORY[0x270FA5388](v66);
  long long v27 = (char *)&v56 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AnyTrackedValue(a1, (uint64_t)v67);
  uint64_t v28 = (uint64_t)v69;
  uint64_t result = ResolvableAbsoluteDate.init(from:)(v67, (uint64_t)v27);
  if (!v28)
  {
    char v57 = v16;
    unint64_t v58 = v10;
    char v59 = v13;
    uint64_t v60 = v19;
    double v69 = v22;
    double v61 = v25;
    uint64_t v30 = v65;
    long long v31 = &v27[*(int *)(v66 + 20)];
    char v32 = *v31;
    uint64_t v33 = *((void *)v31 + 1);
    LOBYTE(v31) = v31[16];
    LOBYTE(v67[0]) = v32;
    v67[1] = v33;
    char v68 = (char)v31;
    Text.DateStyle.format(for:)((uint64_t)v27, (uint64_t)v7);
    uint64_t v34 = v63;
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v62 + 48))(v7, 1, v63) == 1)
    {
      outlined destroy of ResolvableAbsoluteDate((uint64_t)v27, (uint64_t (*)(void))type metadata accessor for ResolvableAbsoluteDate);
      uint64_t result = _s10Foundation4DateVSgWOhTm_1((uint64_t)v7, (uint64_t)&lazy cache variable for type metadata for SystemFormatStyle.DateOffset?, (uint64_t)type metadata accessor for SystemFormatStyle.DateOffset, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset?);
      uint64_t v35 = v64;
      *(_OWORD *)double v64 = 0u;
      *((_OWORD *)v35 + 1) = 0u;
      v35[4] = 0;
    }
    else
    {
      uint64_t v62 = 0;
      uint64_t v36 = (uint64_t)v61;
      outlined init with take of SystemFormatStyle.DateOffset((uint64_t)v7, (uint64_t)v61, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
      type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for (pauseDate: Date), MEMORY[0x263F07490]);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v30, 1, 1, v37);
      uint64_t v38 = v66;
      uint64_t v39 = &v27[*(int *)(v66 + 28)];
      uint64_t v40 = (uint64_t)v58;
      _s7SwiftUI17SystemFormatStyleO10DateOffsetVWOcTm_0(v36, (uint64_t)v58, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
      uint64_t v41 = v40 + v34[9];
      uint64_t v42 = type metadata accessor for Locale();
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v42 - 8) + 24))(v41, v39, v42);
      uint64_t v43 = (uint64_t)v59;
      outlined init with take of SystemFormatStyle.DateOffset(v40, (uint64_t)v59, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
      long long v44 = &v27[*(int *)(v38 + 24)];
      _s7SwiftUI17SystemFormatStyleO10DateOffsetVWOcTm_0(v43, v40, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
      uint64_t v45 = v40 + v34[10];
      uint64_t v46 = type metadata accessor for Calendar();
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v46 - 8) + 24))(v45, v44, v46);
      uint64_t v47 = (uint64_t)v57;
      outlined init with take of SystemFormatStyle.DateOffset(v40, (uint64_t)v57, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
      outlined destroy of ResolvableAbsoluteDate(v43, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
      uint64_t v48 = v47;
      uint64_t v49 = (uint64_t)v60;
      outlined init with take of SystemFormatStyle.DateOffset(v48, (uint64_t)v60, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
      uint64_t v50 = (uint64_t)v69;
      _s7SwiftUI17SystemFormatStyleO10DateOffsetVWOcTm_0(v49, (uint64_t)v69, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
      *(unsigned char *)(v50 + v34[12]) = 0;
      outlined destroy of ResolvableAbsoluteDate(v49, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
      type metadata accessor for TimeDataFormatting.Resolvable<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.DateOffset>();
      char v52 = v51;
      uint64_t v53 = v64;
      v64[3] = (uint64_t)v51;
      v53[4] = lazy protocol witness table accessor for type SystemFormatStyle.DateOffset and conformance SystemFormatStyle.DateOffset(&lazy protocol witness table cache variable for type TimeDataFormatting.Resolvable<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.DateOffset> and conformance TimeDataFormatting.Resolvable<A, B>, (void (*)(uint64_t))type metadata accessor for TimeDataFormatting.Resolvable<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.DateOffset>);
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v53);
      uint64_t v55 = v65;
      specialized static TimeDataFormatting.Configuration.makeConfiguration(from:format:sizeVariant:secondsUpdateFrequencyBudget:)((uint64_t)boxed_opaque_existential_1 + v52[17], v65, 0.0, v50, 0);
      outlined init with copy of TimeDataSource<Date><A>.DateStorage(v55, (uint64_t)boxed_opaque_existential_1);
      _s7SwiftUI17SystemFormatStyleO10DateOffsetVWOcTm_0(v50, (uint64_t)boxed_opaque_existential_1 + v52[15], (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
      *(uint64_t *)((char *)boxed_opaque_existential_1 + v52[16]) = 0;
      *(uint64_t *)((char *)boxed_opaque_existential_1 + v52[18]) = 0;
      outlined destroy of ResolvableAbsoluteDate(v50, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
      _s10Foundation4DateVSgWOhTm_1(v55, (uint64_t)&lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t)type metadata accessor for TimeDataSource<A>.DateStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<Date><A>.DateStorage);
      outlined destroy of ResolvableAbsoluteDate((uint64_t)v61, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
      return outlined destroy of ResolvableAbsoluteDate((uint64_t)v27, (uint64_t (*)(void))type metadata accessor for ResolvableAbsoluteDate);
    }
  }
  return result;
}

uint64_t ResolvableAbsoluteDate.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v35 = a2;
  uint64_t v37 = type metadata accessor for TimeZone();
  uint64_t v34 = *(void *)(v37 - 8);
  MEMORY[0x270FA5388](v37);
  uint64_t v36 = (char *)v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Locale();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v39 = v4;
  uint64_t v40 = v5;
  MEMORY[0x270FA5388](v4);
  uint64_t v38 = (char *)v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Calendar();
  uint64_t v42 = *(void *)(v7 - 8);
  uint64_t v43 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v41 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v45 = (char *)v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for KeyedDecodingContainer<ResolvableAbsoluteDate.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<ResolvableAbsoluteDate.CodingKeys>, MEMORY[0x263F8E040]);
  uint64_t v46 = v12;
  uint64_t v44 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)v32 - v13;
  uint64_t v15 = type metadata accessor for ResolvableAbsoluteDate();
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ResolvableAbsoluteDate.CodingKeys and conformance ResolvableAbsoluteDate.CodingKeys();
  uint64_t v47 = v14;
  uint64_t v18 = (uint64_t)v48;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v18) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v19 = v9;
  uint64_t v33 = (int *)v15;
  uint64_t v48 = a1;
  uint64_t v20 = v42;
  uint64_t v21 = v43;
  char v49 = 0;
  lazy protocol witness table accessor for type SystemFormatStyle.DateOffset and conformance SystemFormatStyle.DateOffset(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v17, v45, v10);
  char v52 = 1;
  lazy protocol witness table accessor for type Text.DateStyle and conformance Text.DateStyle();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v32[1] = v10;
  uint64_t v22 = v50;
  char v23 = v51;
  uint64_t v24 = &v17[v33[5]];
  *uint64_t v24 = v49;
  *((void *)v24 + 1) = v22;
  v24[16] = v23;
  char v49 = 2;
  lazy protocol witness table accessor for type SystemFormatStyle.DateOffset and conformance SystemFormatStyle.DateOffset(&lazy protocol witness table cache variable for type Calendar and conformance Calendar, MEMORY[0x263F07920]);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(&v17[v33[6]], v19, v21);
  char v49 = 3;
  lazy protocol witness table accessor for type SystemFormatStyle.DateOffset and conformance SystemFormatStyle.DateOffset(&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x263F07690]);
  uint64_t v25 = v38;
  uint64_t v26 = v39;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v27 = (uint64_t)v17;
  uint64_t v28 = v33;
  (*(void (**)(uint64_t, char *, uint64_t))(v40 + 32))(v27 + v33[7], v25, v26);
  char v49 = 4;
  lazy protocol witness table accessor for type SystemFormatStyle.DateOffset and conformance SystemFormatStyle.DateOffset(&lazy protocol witness table cache variable for type TimeZone and conformance TimeZone, MEMORY[0x263F079C8]);
  uint64_t v30 = v36;
  uint64_t v29 = v37;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v44 + 8))(v47, v46);
  (*(void (**)(uint64_t, char *, uint64_t))(v34 + 32))(v27 + v28[8], v30, v29);
  _s7SwiftUI17SystemFormatStyleO10DateOffsetVWOcTm_0(v27, v35, (uint64_t (*)(void))type metadata accessor for ResolvableAbsoluteDate);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v48);
  return outlined destroy of ResolvableAbsoluteDate(v27, (uint64_t (*)(void))type metadata accessor for ResolvableAbsoluteDate);
}

uint64_t one-time initialization function for attribute()
{
  uint64_t result = MEMORY[0x24C522820](0xD00000000000001ELL, 0x8000000246220EE0);
  static ResolvableAbsoluteDate.attribute = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = MEMORY[0x24C522820](0xD00000000000001FLL, 0x8000000246223BC0);
  static ResolvableTimer.attribute = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = MEMORY[0x24C522820](0xD00000000000001ALL, 0x8000000246224060);
  static ResolvableProgress.attribute = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = MEMORY[0x24C522820](0xD00000000000001ELL, 0x8000000246224080);
  static ResolvableDateInterval.attribute = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = MEMORY[0x24C522820](0xD00000000000001DLL, 0x80000002462240A0);
  static ResolvableCurrentDate.attribute = result;
  return result;
}

id static ResolvableAbsoluteDate.attribute.getter()
{
  if (one-time initialization token for attribute != -1) {
    swift_once();
  }
  unint64_t v0 = (void *)static ResolvableAbsoluteDate.attribute;

  return v0;
}

uint64_t ResolvableAbsoluteDate.invalidationConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = (unsigned __int8 *)(v1 + *(int *)(type metadata accessor for ResolvableAbsoluteDate() + 20));
  unsigned int v4 = *v3;
  BOOL v5 = v4 >= 2;
  unsigned int v6 = v4 - 2;
  if (v5)
  {
    if (v6 >= 2 || v3[16] == 3 || (v3[8] & 0x80) != 0)
    {
      uint64_t v7 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a1, v1, v7);
      type metadata accessor for ResolvableAttributeConfiguration(0);
    }
    else
    {
      *(void *)a1 = 0x404E000000000000;
      *(unsigned char *)(a1 + 8) = 0;
      type metadata accessor for ResolvableAttributeConfiguration(0);
    }
  }
  else
  {
    type metadata accessor for ResolvableAttributeConfiguration(0);
  }

  return swift_storeEnumTagMultiPayload();
}

uint64_t ResolvableAbsoluteDate.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  type metadata accessor for KeyedDecodingContainer<ResolvableAbsoluteDate.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<ResolvableAbsoluteDate.CodingKeys>, MEMORY[0x263F8E0C0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = &v14[-v8];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ResolvableAbsoluteDate.CodingKeys and conformance ResolvableAbsoluteDate.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v15 = 0;
  type metadata accessor for Date();
  lazy protocol witness table accessor for type SystemFormatStyle.DateOffset and conformance SystemFormatStyle.DateOffset(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v10 = v3 + *(int *)(type metadata accessor for ResolvableAbsoluteDate() + 20);
    char v11 = *(unsigned char *)v10;
    uint64_t v12 = *(void *)(v10 + 8);
    LOBYTE(v10) = *(unsigned char *)(v10 + 16);
    char v15 = v11;
    uint64_t v16 = v12;
    char v17 = v10;
    v14[7] = 1;
    lazy protocol witness table accessor for type Text.DateStyle and conformance Text.DateStyle();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    char v15 = 2;
    type metadata accessor for Calendar();
    lazy protocol witness table accessor for type SystemFormatStyle.DateOffset and conformance SystemFormatStyle.DateOffset(&lazy protocol witness table cache variable for type Calendar and conformance Calendar, MEMORY[0x263F07920]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    char v15 = 3;
    type metadata accessor for Locale();
    lazy protocol witness table accessor for type SystemFormatStyle.DateOffset and conformance SystemFormatStyle.DateOffset(&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x263F07690]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    char v15 = 4;
    type metadata accessor for TimeZone();
    lazy protocol witness table accessor for type SystemFormatStyle.DateOffset and conformance SystemFormatStyle.DateOffset(&lazy protocol witness table cache variable for type TimeZone and conformance TimeZone, MEMORY[0x263F079C8]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
}

id protocol witness for static ResolvableStringAttributeFamily.attribute.getter in conformance ResolvableAbsoluteDate()
{
  if (one-time initialization token for attribute != -1) {
    swift_once();
  }
  unint64_t v0 = (void *)static ResolvableAbsoluteDate.attribute;

  return v0;
}

uint64_t protocol witness for static ResolvableStringAttributeFamily.decode(from:) in conformance ResolvableAbsoluteDate@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return static ResolvableAbsoluteDate.decode(from:)(a1, a2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ResolvableAbsoluteDate@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ResolvableAbsoluteDate.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ResolvableAbsoluteDate(void *a1)
{
  return ResolvableAbsoluteDate.encode(to:)(a1);
}

uint64_t ResolvableAbsoluteDate.hash(into:)()
{
  type metadata accessor for Date();
  lazy protocol witness table accessor for type SystemFormatStyle.DateOffset and conformance SystemFormatStyle.DateOffset(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v1 = (unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ResolvableAbsoluteDate() + 20));
  Hasher._combine(_:)(*v1);
  Swift::UInt v2 = v1[16];
  if (v2 == 3)
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v3 = *((void *)v1 + 1);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
  }
  type metadata accessor for Calendar();
  lazy protocol witness table accessor for type SystemFormatStyle.DateOffset and conformance SystemFormatStyle.DateOffset(&lazy protocol witness table cache variable for type Calendar and conformance Calendar, MEMORY[0x263F07920]);
  dispatch thunk of Hashable.hash(into:)();
  type metadata accessor for Locale();
  lazy protocol witness table accessor for type SystemFormatStyle.DateOffset and conformance SystemFormatStyle.DateOffset(&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x263F07690]);
  dispatch thunk of Hashable.hash(into:)();
  type metadata accessor for TimeZone();
  lazy protocol witness table accessor for type SystemFormatStyle.DateOffset and conformance SystemFormatStyle.DateOffset(&lazy protocol witness table cache variable for type TimeZone and conformance TimeZone, MEMORY[0x263F079C8]);
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int ResolvableAbsoluteDate.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ResolvableAbsoluteDate()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ResolvableAbsoluteDate()
{
  return Hasher._finalize()();
}

uint64_t specialized DiscreteFormatStyle.alwaysOnDisplayFormat<A>(source:secondsUpdateFrequencyBudget:sizeVariant:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v5 = v4;
  type metadata accessor for (SystemFormatStyle.Timer, Bool)(0, &lazy cache variable for type metadata for (SystemFormatStyle.Timer, Bool), (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.Timer);
  uint64_t v11 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v51 - v12;
  uint64_t v14 = type metadata accessor for SystemFormatStyle.Timer();
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _MixedAoDFrequencyFormatInitializer<SystemFormatStyle.Timer>(0, &lazy cache variable for type metadata for _MixedAoDFrequencyFormatInitializer<SystemFormatStyle.Timer>, (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.Timer, (void (*)(void))lazy protocol witness table accessor for type SystemFormatStyle.Timer and conformance SystemFormatStyle.Timer);
  MEMORY[0x270FA5388](v17);
  _s7SwiftUI17SystemFormatStyleO10DateOffsetVWOcTm_0(v5, (uint64_t)&v51 - v18, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
  type metadata accessor for any MixedAoDFrequencyFormatInitializer<Self.MixedAoDFrequencyFormatInitializer.FormatInput == Date, Self.MixedAoDFrequencyFormatInitializer.FormatOutput == AttributedString>();
  if (swift_dynamicCast())
  {
    outlined init with take of ScrollStateRequest(&v61, (uint64_t)v57);
    uint64_t v19 = v58;
    uint64_t v20 = v59;
    __swift_project_boxed_opaque_existential_1(v57, v58);
    v55[0] = a2;
    char v21 = (*(uint64_t (**)(long long *, uint64_t *, uint64_t, uint64_t, double))(v20 + 24))(&v61, v55, v19, v20, a4);
    uint64_t v22 = v62;
    __swift_project_boxed_opaque_existential_1(&v61, v62);
    type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage);
    uint64_t v24 = v23;
    unint64_t v25 = lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage();
    DiscreteFormatStyle.paused<A>(accordingTo:)(a1, v22, v24, v25, (uint64_t *)a3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v61);
    uint64_t v26 = v57;
  }
  else
  {
    *(void *)&long long v62 = v14;
    *((void *)&v62 + 1) = lazy protocol witness table accessor for type SystemFormatStyle.DateOffset and conformance SystemFormatStyle.DateOffset(&lazy protocol witness table cache variable for type SystemFormatStyle.Timer and conformance SystemFormatStyle.Timer, (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.Timer);
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v61);
    _s7SwiftUI17SystemFormatStyleO10DateOffsetVWOcTm_0(v5, (uint64_t)boxed_opaque_existential_1, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
    long long v53 = v62;
    uint64_t v28 = __swift_project_boxed_opaque_existential_1(&v61, v62);
    long long v56 = v53;
    uint64_t v29 = __swift_allocate_boxed_opaque_existential_1(v55);
    _s7SwiftUI17SystemFormatStyleO10DateOffsetVWOcTm_0((uint64_t)v28, (uint64_t)v29, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
    uint64_t v30 = static Duration.seconds(_:)();
    uint64_t v52 = a1;
    uint64_t v32 = v31;
    uint64_t v33 = (void *)((char *)v28 + *(int *)(v14 + 36));
    *(void *)&long long v53 = a3;
    uint64_t v35 = *v33;
    uint64_t v34 = v33[1];
    char v36 = static Duration.< infix(_:_:)();
    if (v36) {
      uint64_t v37 = v30;
    }
    else {
      uint64_t v37 = v35;
    }
    if (v36) {
      uint64_t v38 = v32;
    }
    else {
      uint64_t v38 = v34;
    }
    uint64_t v39 = (uint64_t *)((char *)v29 + *(int *)(v14 + 40));
    uint64_t *v39 = v37;
    v39[1] = v38;
    uint64_t v41 = *((void *)&v56 + 1);
    uint64_t v40 = v56;
    uint64_t v42 = __swift_project_boxed_opaque_existential_1(v55, v56);
    uint64_t v43 = *(void *)(v40 - 8);
    uint64_t v54 = a2;
    uint64_t v44 = v43;
    MEMORY[0x270FA5388](v42);
    uint64_t v46 = (char *)&v51 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
    char v47 = FormatStyle.exactSizeVariant(_:)(v46, &v54, v40);
    uint64_t v58 = v40;
    uint64_t v59 = v41;
    uint64_t v48 = __swift_allocate_boxed_opaque_existential_1(v57);
    uint64_t v49 = v40;
    a3 = v53;
    (*(void (**)(uint64_t *, char *, uint64_t))(v44 + 32))(v48, v46, v49);
    char v60 = v47 & 1;
    type metadata accessor for (style: SizeAdaptiveFormatStyle, exact: Bool)(0, (unint64_t *)&lazy cache variable for type metadata for (style: UpdateFrequencyDependentFormatStyle, exact: Bool), (unint64_t *)&lazy cache variable for type metadata for UpdateFrequencyDependentFormatStyle);
    swift_dynamicCast();
    char v21 = v13[*(int *)(v11 + 48)];
    outlined init with take of SystemFormatStyle.DateOffset((uint64_t)v13, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v55);
    specialized DiscreteFormatStyle.paused<A>(accordingTo:)(v52, (uint64_t *)a3);
    outlined destroy of ResolvableAbsoluteDate((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
    uint64_t v26 = (uint64_t *)&v61;
  }
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
  *(unsigned char *)(a3 + 40) = v21 & 1;
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned long long v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t *boxed_opaque_existential_1;
  void *v29;
  uint64_t *v30;
  long long v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char v37;
  uint64_t *v38;
  uint64_t result;
  long long v40;
  uint64_t v41;
  uint64_t v42[3];
  long long v43;
  uint64_t v44[3];
  long long v45;
  char v46;
  long long v47;
  long long v48;

  uint64_t v5 = v4;
  type metadata accessor for (SystemFormatStyle.Timer, Bool)(0, &lazy cache variable for type metadata for (SystemFormatStyle.DateOffset, Bool), (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.DateOffset);
  uint64_t v11 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v40 - v12;
  uint64_t v14 = type metadata accessor for SystemFormatStyle.DateOffset();
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _MixedAoDFrequencyFormatInitializer<SystemFormatStyle.Timer>(0, &lazy cache variable for type metadata for _MixedAoDFrequencyFormatInitializer<SystemFormatStyle.DateOffset>, (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.DateOffset, (void (*)(void))lazy protocol witness table accessor for type SystemFormatStyle.DateOffset and conformance SystemFormatStyle.DateOffset);
  MEMORY[0x270FA5388](v17);
  _s7SwiftUI17SystemFormatStyleO10DateOffsetVWOcTm_0(v5, (uint64_t)&v40 - v18, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
  type metadata accessor for any MixedAoDFrequencyFormatInitializer<Self.MixedAoDFrequencyFormatInitializer.FormatInput == Date, Self.MixedAoDFrequencyFormatInitializer.FormatOutput == AttributedString>();
  if (swift_dynamicCast())
  {
    outlined init with take of ScrollStateRequest(&v47, (uint64_t)v44);
    char v21 = v45;
    uint64_t v20 = v21 >> 64;
    uint64_t v19 = v21;
    __swift_project_boxed_opaque_existential_1(v44, v45);
    v42[0] = a2;
    uint64_t v22 = (*(uint64_t (**)(long long *, uint64_t *, uint64_t, uint64_t, double))(v20 + 24))(&v47, v42, v19, v20, a4);
    uint64_t v23 = v48;
    __swift_project_boxed_opaque_existential_1(&v47, v48);
    type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage);
    unint64_t v25 = v24;
    uint64_t v26 = lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage();
    DiscreteFormatStyle.paused<A>(accordingTo:)(a1, v23, v25, v26, (uint64_t *)a3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v47);
    uint64_t v27 = v44;
  }
  else
  {
    *(void *)&uint64_t v48 = v14;
    *((void *)&v48 + 1) = lazy protocol witness table accessor for type SystemFormatStyle.DateOffset and conformance SystemFormatStyle.DateOffset(&lazy protocol witness table cache variable for type SystemFormatStyle.DateOffset and conformance SystemFormatStyle.DateOffset, (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.DateOffset);
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v47);
    _s7SwiftUI17SystemFormatStyleO10DateOffsetVWOcTm_0(v5, (uint64_t)boxed_opaque_existential_1, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
    uint64_t v40 = v48;
    uint64_t v29 = __swift_project_boxed_opaque_existential_1(&v47, v48);
    uint64_t v43 = v40;
    uint64_t v30 = __swift_allocate_boxed_opaque_existential_1(v42);
    _s7SwiftUI17SystemFormatStyleO10DateOffsetVWOcTm_0((uint64_t)v29, (uint64_t)v30, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
    *((unsigned char *)v30 + *(int *)(v14 + 44)) = 2;
    uint64_t v31 = v43;
    uint64_t v32 = __swift_project_boxed_opaque_existential_1(v42, v43);
    uint64_t v33 = *(void *)(v31 - 8);
    uint64_t v41 = a2;
    *(void *)&uint64_t v40 = a1;
    uint64_t v34 = v33;
    MEMORY[0x270FA5388](v32);
    char v36 = (char *)&v40 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v37 = FormatStyle.exactSizeVariant(_:)(v36, &v41, v31);
    uint64_t v45 = v31;
    uint64_t v38 = __swift_allocate_boxed_opaque_existential_1(v44);
    (*(void (**)(uint64_t *, char *, void))(v34 + 32))(v38, v36, v31);
    uint64_t v46 = v37 & 1;
    type metadata accessor for (style: SizeAdaptiveFormatStyle, exact: Bool)(0, (unint64_t *)&lazy cache variable for type metadata for (style: UpdateFrequencyDependentFormatStyle, exact: Bool), (unint64_t *)&lazy cache variable for type metadata for UpdateFrequencyDependentFormatStyle);
    swift_dynamicCast();
    uint64_t v22 = v13[*(int *)(v11 + 48)];
    outlined init with take of SystemFormatStyle.DateOffset((uint64_t)v13, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
    specialized DiscreteFormatStyle.paused<A>(accordingTo:)(v40, (uint64_t *)a3);
    outlined destroy of ResolvableAbsoluteDate((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
    uint64_t v27 = (uint64_t *)&v47;
  }
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
  *(unsigned char *)(a3 + 40) = v22 & 1;
  return result;
}

uint64_t specialized DiscreteFormatStyle.paused<A>(accordingTo:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v26 - v6;
  type metadata accessor for SystemFormatStyle.DateOffset?(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v26 - v12;
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(a1, (uint64_t)v7);
  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for (pauseDate: Date), MEMORY[0x263F07490]);
  uint64_t v15 = 1;
  int v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v7, 1, v14);
  uint64_t v17 = type metadata accessor for Date();
  uint64_t v18 = *(void *)(v17 - 8);
  if (v16 != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32))(v10, v7, v17);
    uint64_t v15 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v10, v15, 1, v17);
  uint64_t v19 = MEMORY[0x263F07490];
  _s10Foundation4DateVSgWObTm_1((uint64_t)v10, (uint64_t)v13, (uint64_t)&lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SystemFormatStyle.DateOffset?);
  int v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v13, 1, v17);
  _s10Foundation4DateVSgWOhTm_1((uint64_t)v13, (uint64_t)&lazy cache variable for type metadata for Date?, v19, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset?);
  if (v20 == 1)
  {
    a2[3] = type metadata accessor for SystemFormatStyle.Timer();
    a2[4] = lazy protocol witness table accessor for type SystemFormatStyle.Timer and conformance SystemFormatStyle.Timer();
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a2);
  }
  else
  {
    type metadata accessor for TimeDataFormatting.Configuration<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.Timer>(0, &lazy cache variable for type metadata for PausedFormatStyle<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.Timer>, (uint64_t (*)(uint64_t))type metadata accessor for SystemFormatStyle.Timer, lazy protocol witness table accessor for type SystemFormatStyle.Timer and conformance SystemFormatStyle.Timer, (uint64_t (*)(uint64_t, void *))type metadata accessor for PausedFormatStyle);
    uint64_t v23 = v22;
    a2[3] = v22;
    a2[4] = lazy protocol witness table accessor for type PausedFormatStyle<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.Timer> and conformance PausedFormatStyle<A, B>(&lazy protocol witness table cache variable for type PausedFormatStyle<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.Timer> and conformance PausedFormatStyle<A, B>, &lazy cache variable for type metadata for PausedFormatStyle<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.Timer>, (uint64_t (*)(uint64_t))type metadata accessor for SystemFormatStyle.Timer, lazy protocol witness table accessor for type SystemFormatStyle.Timer and conformance SystemFormatStyle.Timer);
    uint64_t v24 = __swift_allocate_boxed_opaque_existential_1(a2);
    outlined init with copy of TimeDataSource<Date><A>.DateStorage(a1, (uint64_t)v24);
    boxed_opaque_existential_1 = (uint64_t *)((char *)v24 + *(int *)(v23 + 52));
  }
  return _s7SwiftUI17SystemFormatStyleO10DateOffsetVWOcTm_0(v2, (uint64_t)boxed_opaque_existential_1, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.Timer);
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v26;

  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v26 - v6;
  type metadata accessor for SystemFormatStyle.DateOffset?(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v26 - v12;
  outlined init with copy of TimeDataSource<Date><A>.DateStorage(a1, (uint64_t)v7);
  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for (pauseDate: Date), MEMORY[0x263F07490]);
  uint64_t v15 = 1;
  int v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v7, 1, v14);
  uint64_t v17 = type metadata accessor for Date();
  uint64_t v18 = *(void *)(v17 - 8);
  if (v16 != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32))(v10, v7, v17);
    uint64_t v15 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v10, v15, 1, v17);
  uint64_t v19 = MEMORY[0x263F07490];
  _s10Foundation4DateVSgWObTm_1((uint64_t)v10, (uint64_t)v13, (uint64_t)&lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SystemFormatStyle.DateOffset?);
  int v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v13, 1, v17);
  _s10Foundation4DateVSgWOhTm_1((uint64_t)v13, (uint64_t)&lazy cache variable for type metadata for Date?, v19, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset?);
  if (v20 == 1)
  {
    a2[3] = type metadata accessor for SystemFormatStyle.DateOffset();
    a2[4] = lazy protocol witness table accessor for type SystemFormatStyle.DateOffset and conformance SystemFormatStyle.DateOffset();
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a2);
  }
  else
  {
    type metadata accessor for TimeDataFormatting.Configuration<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.Timer>(0, &lazy cache variable for type metadata for PausedFormatStyle<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.DateOffset>, (uint64_t (*)(uint64_t))type metadata accessor for SystemFormatStyle.DateOffset, lazy protocol witness table accessor for type SystemFormatStyle.DateOffset and conformance SystemFormatStyle.DateOffset, (uint64_t (*)(uint64_t, void *))type metadata accessor for PausedFormatStyle);
    uint64_t v23 = v22;
    a2[3] = v22;
    a2[4] = lazy protocol witness table accessor for type PausedFormatStyle<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.Timer> and conformance PausedFormatStyle<A, B>(&lazy protocol witness table cache variable for type PausedFormatStyle<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.DateOffset> and conformance PausedFormatStyle<A, B>, &lazy cache variable for type metadata for PausedFormatStyle<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.DateOffset>, (uint64_t (*)(uint64_t))type metadata accessor for SystemFormatStyle.DateOffset, lazy protocol witness table accessor for type SystemFormatStyle.DateOffset and conformance SystemFormatStyle.DateOffset);
    uint64_t v24 = __swift_allocate_boxed_opaque_existential_1(a2);
    outlined init with copy of TimeDataSource<Date><A>.DateStorage(a1, (uint64_t)v24);
    boxed_opaque_existential_1 = (uint64_t *)((char *)v24 + *(int *)(v23 + 52));
  }
  return _s7SwiftUI17SystemFormatStyleO10DateOffsetVWOcTm_0(v2, (uint64_t)boxed_opaque_existential_1, (uint64_t (*)(void))type metadata accessor for SystemFormatStyle.DateOffset);
}

void type metadata accessor for TimeDataFormatting.Resolvable<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.DateOffset>()
{
  if (!lazy cache variable for type metadata for TimeDataFormatting.Resolvable<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.DateOffset>)
  {
    type metadata accessor for TimeDataSource<Date><A>.DateStorage(255, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage);
    type metadata accessor for SystemFormatStyle.DateOffset();
    lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage();
    lazy protocol witness table accessor for type SystemFormatStyle.DateOffset and conformance SystemFormatStyle.DateOffset();
    unint64_t v0 = type metadata accessor for TimeDataFormatting.Resolvable();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TimeDataFormatting.Resolvable<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.DateOffset>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type SystemFormatStyle.DateOffset and conformance SystemFormatStyle.DateOffset()
{
  return lazy protocol witness table accessor for type SystemFormatStyle.DateOffset and conformance SystemFormatStyle.DateOffset(&lazy protocol witness table cache variable for type SystemFormatStyle.DateOffset and conformance SystemFormatStyle.DateOffset, (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.DateOffset);
}

uint64_t outlined init with copy of TimeDataSource<Date><A>.DateStorage(uint64_t a1, uint64_t a2)
{
  type metadata accessor for TimeDataSource<Date><A>.DateStorage(0, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type ResolvableAbsoluteDate.CodingKeys and conformance ResolvableAbsoluteDate.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ResolvableAbsoluteDate.CodingKeys and conformance ResolvableAbsoluteDate.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableAbsoluteDate.CodingKeys and conformance ResolvableAbsoluteDate.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableAbsoluteDate.CodingKeys and conformance ResolvableAbsoluteDate.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvableAbsoluteDate.CodingKeys and conformance ResolvableAbsoluteDate.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableAbsoluteDate.CodingKeys and conformance ResolvableAbsoluteDate.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableAbsoluteDate.CodingKeys and conformance ResolvableAbsoluteDate.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvableAbsoluteDate.CodingKeys and conformance ResolvableAbsoluteDate.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableAbsoluteDate.CodingKeys and conformance ResolvableAbsoluteDate.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableAbsoluteDate.CodingKeys and conformance ResolvableAbsoluteDate.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvableAbsoluteDate.CodingKeys and conformance ResolvableAbsoluteDate.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableAbsoluteDate.CodingKeys and conformance ResolvableAbsoluteDate.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableAbsoluteDate.CodingKeys and conformance ResolvableAbsoluteDate.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Text.DateStyle and conformance Text.DateStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.DateStyle and conformance Text.DateStyle;
  if (!lazy protocol witness table cache variable for type Text.DateStyle and conformance Text.DateStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.DateStyle and conformance Text.DateStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.DateStyle and conformance Text.DateStyle;
  if (!lazy protocol witness table cache variable for type Text.DateStyle and conformance Text.DateStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.DateStyle and conformance Text.DateStyle);
  }
  return result;
}

uint64_t _s7SwiftUI17SystemFormatStyleO10DateOffsetVWOcTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void type metadata accessor for KeyedDecodingContainer<ResolvableAbsoluteDate.CodingKeys>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = lazy protocol witness table accessor for type ResolvableAbsoluteDate.CodingKeys and conformance ResolvableAbsoluteDate.CodingKeys();
    unint64_t v7 = a3(a1, &unk_26FA66CA8, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t specialized static ResolvableAbsoluteDate.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (static Date.== infix(_:_:)())
  {
    uint64_t v4 = (int *)type metadata accessor for ResolvableAbsoluteDate();
    uint64_t v5 = v4[5];
    uint64_t v6 = *(void *)(a1 + v5 + 8);
    char v7 = *(unsigned char *)(a1 + v5 + 16);
    v15[0] = *(unsigned char *)(a1 + v5);
    uint64_t v16 = v6;
    char v17 = v7;
    uint64_t v8 = a2 + v5;
    unsigned __int8 v9 = *(unsigned char *)v8;
    uint64_t v10 = *(void *)(v8 + 8);
    LOBYTE(v8) = *(unsigned char *)(v8 + 16);
    v12[0] = v9;
    uint64_t v13 = v10;
    char v14 = v8;
    if ((specialized static Text.DateStyle.== infix(_:_:)(v15, v12) & 1) != 0
      && (MEMORY[0x24C521A00](a1 + v4[6], a2 + v4[6]) & 1) != 0
      && (MEMORY[0x24C5218A0](a1 + v4[7], a2 + v4[7]) & 1) != 0)
    {
      JUMPOUT(0x24C521B70);
    }
  }
  return 0;
}

uint64_t instantiation function for generic protocol witness table for ResolvableAbsoluteDate(uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type SystemFormatStyle.DateOffset and conformance SystemFormatStyle.DateOffset(&lazy protocol witness table cache variable for type ResolvableAbsoluteDate and conformance ResolvableAbsoluteDate, (void (*)(uint64_t))type metadata accessor for ResolvableAbsoluteDate);
  uint64_t result = lazy protocol witness table accessor for type SystemFormatStyle.DateOffset and conformance SystemFormatStyle.DateOffset(&lazy protocol witness table cache variable for type ResolvableAbsoluteDate and conformance ResolvableAbsoluteDate, (void (*)(uint64_t))type metadata accessor for ResolvableAbsoluteDate);
  *(void *)(a1 + 16) = result;
  return result;
}

_UNKNOWN **associated type witness table accessor for ResolvableStringAttributeRepresentation.Family : ResolvableStringAttributeFamily in ResolvableAbsoluteDate()
{
  return &protocol witness table for ResolvableAbsoluteDate;
}

uint64_t base witness table accessor for Equatable in ResolvableAbsoluteDate()
{
  return lazy protocol witness table accessor for type SystemFormatStyle.DateOffset and conformance SystemFormatStyle.DateOffset(&lazy protocol witness table cache variable for type ResolvableAbsoluteDate and conformance ResolvableAbsoluteDate, (void (*)(uint64_t))type metadata accessor for ResolvableAbsoluteDate);
}

uint64_t *initializeBufferWithCopyOfBuffer for ResolvableAbsoluteDate(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v23 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v23 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (char *)a1 + v8;
    uint64_t v11 = (char *)a2 + v8;
    *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
    v10[16] = v11[16];
    uint64_t v12 = (char *)a1 + v9;
    uint64_t v13 = (char *)a2 + v9;
    uint64_t v14 = type metadata accessor for Calendar();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
    uint64_t v15 = a3[7];
    uint64_t v16 = (char *)a1 + v15;
    char v17 = (char *)a2 + v15;
    uint64_t v18 = type metadata accessor for Locale();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
    uint64_t v19 = a3[8];
    int v20 = (char *)a1 + v19;
    char v21 = (char *)a2 + v19;
    uint64_t v22 = type metadata accessor for TimeZone();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16))(v20, v21, v22);
  }
  return a1;
}

uint64_t destroy for ResolvableAbsoluteDate(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + a2[6];
  uint64_t v6 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = a1 + a2[7];
  uint64_t v8 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = a1 + a2[8];
  uint64_t v10 = type metadata accessor for TimeZone();
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8);

  return v11(v9, v10);
}

uint64_t initializeWithCopy for ResolvableAbsoluteDate(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  *(unsigned char *)(v9 + 16) = *(unsigned char *)(v10 + 16);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  uint64_t v13 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
  uint64_t v14 = a3[7];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  uint64_t v17 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
  uint64_t v18 = a3[8];
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  uint64_t v21 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 16))(v19, v20, v21);
  return a1;
}

uint64_t assignWithCopy for ResolvableAbsoluteDate(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(unsigned char *)uint64_t v8 = *(unsigned char *)v9;
  uint64_t v10 = *(void *)(v9 + 8);
  *(unsigned char *)(v8 + 16) = *(unsigned char *)(v9 + 16);
  *(void *)(v8 + 8) = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 24))(v12, v13, v14);
  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 24))(v16, v17, v18);
  uint64_t v19 = a3[8];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  uint64_t v22 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 24))(v20, v21, v22);
  return a1;
}

uint64_t initializeWithTake for ResolvableAbsoluteDate(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  *(unsigned char *)(v9 + 16) = *(unsigned char *)(v10 + 16);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  uint64_t v13 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
  uint64_t v14 = a3[7];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  uint64_t v17 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 32))(v15, v16, v17);
  uint64_t v18 = a3[8];
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  uint64_t v21 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 32))(v19, v20, v21);
  return a1;
}

uint64_t assignWithTake for ResolvableAbsoluteDate(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(unsigned char *)uint64_t v9 = *(unsigned char *)v10;
  *(void *)(v9 + 8) = *(void *)(v10 + 8);
  *(unsigned char *)(v9 + 16) = *(unsigned char *)(v10 + 16);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  uint64_t v13 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 40))(v11, v12, v13);
  uint64_t v14 = a3[7];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  uint64_t v17 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 40))(v15, v16, v17);
  uint64_t v18 = a3[8];
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  uint64_t v21 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 40))(v19, v20, v21);
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvableAbsoluteDate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_245DD5B40);
}

uint64_t sub_245DD5B40(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_15:
    return v9(v10, a2, v8);
  }
  if (a2 == 252)
  {
    if (*(unsigned __int8 *)(a1 + a3[5] + 16) <= 3u) {
      int v11 = 3;
    }
    else {
      int v11 = *(unsigned __int8 *)(a1 + a3[5] + 16);
    }
    unsigned int v12 = v11 - 3;
    if (*(unsigned __int8 *)(a1 + a3[5] + 16) >= 3u) {
      return v12;
    }
    else {
      return 0;
    }
  }
  uint64_t v14 = type metadata accessor for Calendar();
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
  {
    uint64_t v8 = v14;
    uint64_t v15 = *(void *)(v14 - 8);
    uint64_t v16 = a3[6];
LABEL_14:
    uint64_t v10 = a1 + v16;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
    goto LABEL_15;
  }
  uint64_t v17 = type metadata accessor for Locale();
  if (*(_DWORD *)(*(void *)(v17 - 8) + 84) == a2)
  {
    uint64_t v8 = v17;
    uint64_t v15 = *(void *)(v17 - 8);
    uint64_t v16 = a3[7];
    goto LABEL_14;
  }
  uint64_t v18 = type metadata accessor for TimeZone();
  uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48);
  uint64_t v20 = v18;
  uint64_t v21 = a1 + a3[8];

  return v19(v21, a2, v20);
}

uint64_t storeEnumTagSinglePayload for ResolvableAbsoluteDate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_245DD5D28);
}

uint64_t sub_245DD5D28(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result = type metadata accessor for Date();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    int v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_10:
    return v11(v12, a2, a2, v10);
  }
  if (a3 == 252)
  {
    *(unsigned char *)(a1 + a4[5] + 16) = a2 + 3;
    return result;
  }
  uint64_t v13 = type metadata accessor for Calendar();
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v15 = a4[6];
LABEL_9:
    uint64_t v12 = a1 + v15;
    int v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_10;
  }
  uint64_t v16 = type metadata accessor for Locale();
  if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a3)
  {
    uint64_t v10 = v16;
    uint64_t v14 = *(void *)(v16 - 8);
    uint64_t v15 = a4[7];
    goto LABEL_9;
  }
  uint64_t v17 = type metadata accessor for TimeZone();
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56);
  uint64_t v19 = v17;
  uint64_t v20 = a1 + a4[8];

  return v18(v20, a2, a2, v19);
}

uint64_t type metadata completion function for ResolvableAbsoluteDate()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Calendar();
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for Locale();
      if (v3 <= 0x3F)
      {
        uint64_t result = type metadata accessor for TimeZone();
        if (v4 <= 0x3F)
        {
          swift_initStructMetadata();
          return 0;
        }
      }
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ResolvableAbsoluteDate.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245DD6108);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

void *type metadata accessor for ResolvableAbsoluteDate.CodingKeys()
{
  return &unk_26FA66CA8;
}

uint64_t specialized ResolvableAbsoluteDate.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1702125924 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C797473 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7261646E656C6163 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x656E6F5A656D6974 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t _s10Foundation4DateVSgWObTm_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  uint64_t v7 = a5(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(a2, a1, v7);
  return a2;
}

uint64_t lazy protocol witness table accessor for type SystemFormatStyle.Timer and conformance SystemFormatStyle.Timer()
{
  return lazy protocol witness table accessor for type SystemFormatStyle.DateOffset and conformance SystemFormatStyle.DateOffset(&lazy protocol witness table cache variable for type SystemFormatStyle.Timer and conformance SystemFormatStyle.Timer, (void (*)(uint64_t))type metadata accessor for SystemFormatStyle.Timer);
}

void type metadata accessor for SystemFormatStyle.DateOffset?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for TimeDataFormatting.Configuration<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.Timer>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void), uint64_t (*a5)(uint64_t, void *))
{
  if (!*a2)
  {
    type metadata accessor for TimeDataSource<Date><A>.DateStorage(255, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage);
    v13[0] = v10;
    v13[1] = a3(255);
    _OWORD v13[2] = lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage();
    v13[3] = a4();
    unint64_t v11 = a5(a1, v13);
    if (!v12) {
      atomic_store(v11, a2);
    }
  }
}

unint64_t type metadata accessor for any MixedAoDFrequencyFormatInitializer<Self.MixedAoDFrequencyFormatInitializer.FormatInput == Date, Self.MixedAoDFrequencyFormatInitializer.FormatOutput == AttributedString>()
{
  unint64_t result = lazy cache variable for type metadata for any MixedAoDFrequencyFormatInitializer<Self.MixedAoDFrequencyFormatInitializer.FormatInput == Date, Self.MixedAoDFrequencyFormatInitializer.FormatOutput == AttributedString>;
  if (!lazy cache variable for type metadata for any MixedAoDFrequencyFormatInitializer<Self.MixedAoDFrequencyFormatInitializer.FormatInput == Date, Self.MixedAoDFrequencyFormatInitializer.FormatOutput == AttributedString>)
  {
    type metadata accessor for Date();
    type metadata accessor for AttributedString();
    unint64_t result = swift_getExtendedExistentialTypeMetadata_unique();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for any MixedAoDFrequencyFormatInitializer<Self.MixedAoDFrequencyFormatInitializer.FormatInput == Date, Self.MixedAoDFrequencyFormatInitializer.FormatOutput == AttributedString>);
  }
  return result;
}

void type metadata accessor for (style: SizeAdaptiveFormatStyle, exact: Bool)(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  if (!*a2)
  {
    type metadata accessor for ScrollStateRequest(255, a3);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v5) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

uint64_t outlined init with take of SystemFormatStyle.DateOffset(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of ResolvableAbsoluteDate(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void type metadata accessor for (style: SystemFormatStyle.Timer, exact: Bool)(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v5) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

uint64_t outlined destroy of (style: SystemFormatStyle.Timer, exact: Bool)(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  type metadata accessor for (style: SystemFormatStyle.Timer, exact: Bool)(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t lazy protocol witness table accessor for type PausedFormatStyle<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.Timer> and conformance PausedFormatStyle<A, B>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for TimeDataFormatting.Configuration<TimeDataSource<Date><A>.DateStorage, SystemFormatStyle.Timer>(255, a2, a3, a4, (uint64_t (*)(uint64_t, void *))type metadata accessor for PausedFormatStyle);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for (SystemFormatStyle.Timer, Bool)(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v5) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

void type metadata accessor for _MixedAoDFrequencyFormatInitializer<SystemFormatStyle.Timer>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  if (!*a2)
  {
    a3(255);
    a4();
    unint64_t v6 = type metadata accessor for _MixedAoDFrequencyFormatInitializer();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type SystemFormatStyle.DateOffset and conformance SystemFormatStyle.DateOffset(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t ConcreteCustomTextAttachment.draw(with:in:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)(*(void *)v2 + 128) + 32))(a1, a2, *(void *)(*(void *)v2 + 120));
}

uint64_t initializeWithCopy for LineAttachment(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  outlined copy of Text.Layout.Line.Line(*(void **)a2, v5, v6);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  long long v7 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  return a1;
}

uint64_t assignWithCopy for LineAttachment(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  outlined copy of Text.Layout.Line.Line(*(void **)a2, v5, v6);
  long long v7 = *(void **)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  char v9 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  outlined consume of Text.Layout.Line.Line(v7, v8, v9);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  return a1;
}

uint64_t assignWithTake for LineAttachment(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void **)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v4;
  outlined consume of Text.Layout.Line.Line(v5, v6, v7);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  long long v8 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v8;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for LineAttachment(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 96)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for LineAttachment(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 96) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LineAttachment()
{
  return &type metadata for LineAttachment;
}

void protocol witness for TextAttachment.draw(with:in:) in conformance LineAttachment(long long *a1, uint64_t *a2)
{
  unsigned int v3 = *(void **)v2;
  uint64_t v4 = *(void *)(v2 + 8);
  char v5 = *(unsigned char *)(v2 + 16);
  int v6 = *(_DWORD *)(v2 + 40);
  uint64_t v7 = *a2;
  v8[0] = v3;
  v8[1] = v4;
  char v9 = v5;
  long long v10 = *a1;
  int v11 = v6;
  outlined copy of Text.Layout.Line.Line(v3, v4, v5);
  GraphicsContext.draw(_:options:)((uint64_t)v8, 0, v7);

  outlined consume of Text.Layout.Line.Line(v3, v4, v5);
}

BOOL static Text.WritingMode.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

BOOL static Text.WritingMode.Storage.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void Text.WritingMode.Storage.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int Text.WritingMode.Storage.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void Text.WritingMode.storage.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *Text.WritingMode.storage.setter(unsigned char *result)
{
  *Swift::UInt v1 = *result;
  return result;
}

uint64_t (*Text.WritingMode.storage.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void static Text.WritingMode.verticalRightToLeft.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void Text.WritingMode.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int Text.WritingMode.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t key path setter for EnvironmentValues.writingMode : EnvironmentValues(char *a1)
{
  char v2 = *a1;
  return EnvironmentValues.writingMode.setter(&v2);
}

uint64_t (*EnvironmentValues.writingMode.modify(uint64_t a1))(uint64_t a1)
{
  char v2 = (char *)(a1 + 24);
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, v2);
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<WritingModeKey>();
    BloomFilter.init(hashValue:)(v4);
    uint64_t v5 = swift_retain_n();
    uint64_t v6 = specialized find1<A>(_:key:filter:)(v5, v9);
    if (v6) {
      char v7 = *(unsigned char *)(v6 + 72);
    }
    else {
      char v7 = 0;
    }
    *char v2 = v7;
  }
  swift_release_n();
  return EnvironmentValues.writingMode.modify;
}

uint64_t EnvironmentValues.writingMode.modify(uint64_t a1)
{
  char v2 = *(uint64_t **)(a1 + 16);
  char v3 = *(unsigned char *)(a1 + 24);
  uint64_t v4 = *v2;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3);
  swift_release();
  if (v2[1])
  {
    uint64_t v5 = **(void **)(a1 + 16);
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v5);
    swift_release();
    swift_release();
  }

  return swift_release();
}

uint64_t View.writingMode(_:)(char *a1, uint64_t a2, uint64_t a3)
{
  char v5 = *a1;
  uint64_t KeyPath = (uint64_t *)swift_getKeyPath();
  char v8 = v5;
  View.environment<A>(_:_:)(KeyPath, (uint64_t)&v8, a2, a3);
  return swift_release();
}

uint64_t Text.WritingMode.protobufValue.getter()
{
  return *v0;
}

uint64_t Text.WritingMode.init(protobufValue:)@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  if (result)
  {
    if (result == 1) {
      *a2 = 1;
    }
    else {
      *a2 = 2;
    }
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

uint64_t protocol witness for ProtobufEnum.init(protobufValue:) in conformance Text.WritingMode@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  if (result == 1)
  {
    *a2 = 1;
  }
  else if (result)
  {
    *a2 = 2;
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

void type metadata accessor for EnvironmentPropertyKey<WritingModeKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<WritingModeKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<WritingModeKey>);
    }
  }
}

uint64_t sub_245DD71B8(char *a1)
{
  char v2 = *a1;
  return EnvironmentValues.writingMode.setter(&v2);
}

unint64_t lazy protocol witness table accessor for type Text.WritingMode.Storage and conformance Text.WritingMode.Storage()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.WritingMode.Storage and conformance Text.WritingMode.Storage;
  if (!lazy protocol witness table cache variable for type Text.WritingMode.Storage and conformance Text.WritingMode.Storage)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.WritingMode.Storage and conformance Text.WritingMode.Storage);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Text.WritingMode and conformance Text.WritingMode()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.WritingMode and conformance Text.WritingMode;
  if (!lazy protocol witness table cache variable for type Text.WritingMode and conformance Text.WritingMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.WritingMode and conformance Text.WritingMode);
  }
  return result;
}

uint64_t sub_245DD72C8()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _EnvironmentKeyWritingModifier<Text.WritingMode>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Text.WritingMode>)
  {
    unint64_t v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Text.WritingMode>);
    }
  }
}

ValueMetadata *type metadata accessor for WritingModeKey()
{
  return &type metadata for WritingModeKey;
}

uint64_t NSTextHorizontalAlignment.init(_:layoutDirection:writingMode:)(char a1, unsigned char *a2, unsigned char *a3)
{
  if (*a3) {
    return qword_2461E3BE8[a1];
  }
  if (a1)
  {
    if (a1 == 1) {
      return 4;
    }
    if (*a2) {
      return 2;
    }
  }
  else if ((*a2 & 1) == 0)
  {
    return 2;
  }
  return 3;
}

uint64_t EnvironmentValues.avoidsOrphans.getter()
{
  return EnvironmentValues.avoidsOrphans.getter(specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

double EnvironmentValues.bodyHeadOutdent.getter()
{
  return EnvironmentValues.bodyHeadOutdent.getter(specialized PropertyList.Tracker.value<A>(_:for:), (double (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

NSWritingDirection __swiftcall NSWritingDirection.init(_:)(SwiftUI::LayoutDirection a1)
{
  return (unint64_t)*(unsigned __int8 *)a1;
}

uint64_t EnvironmentValues.allowsTightening.getter()
{
  return EnvironmentValues.avoidsOrphans.getter(specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

double EnvironmentValues.lineSpacing.getter()
{
  return EnvironmentValues.bodyHeadOutdent.getter(specialized PropertyList.Tracker.value<A>(_:for:), (double (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

double EnvironmentValues.lineHeightMultiple.getter()
{
  return EnvironmentValues.bodyHeadOutdent.getter(specialized PropertyList.Tracker.value<A>(_:for:), (double (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

double EnvironmentValues.maximumLineHeight.getter()
{
  return EnvironmentValues.bodyHeadOutdent.getter(specialized PropertyList.Tracker.value<A>(_:for:), (double (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

double EnvironmentValues.minimumLineHeight.getter()
{
  return EnvironmentValues.bodyHeadOutdent.getter(specialized PropertyList.Tracker.value<A>(_:for:), (double (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

double EnvironmentValues.hyphenationFactor.getter()
{
  return EnvironmentValues.bodyHeadOutdent.getter(specialized PropertyList.Tracker.value<A>(_:for:), (double (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t EnvironmentValues.hyphenationDisabled.getter()
{
  return EnvironmentValues.avoidsOrphans.getter(specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t EnvironmentValues.avoidsOrphans.getter(uint64_t (*a1)(uint64_t), uint64_t (*a2)(uint64_t, uint64_t *))
{
  uint64_t v3 = *v2;
  if (v2[1])
  {
    swift_retain_n();
    swift_retain_n();
    LOBYTE(a1) = a1(v3);
    swift_release_n();
    swift_release_n();
    return a1 & 1;
  }
  else
  {
    uint64_t v7 = swift_retain_n();
    char v8 = a2(v7, &v9);
    swift_release_n();
    return v8 & 1;
  }
}

uint64_t EnvironmentValues.lineSpacing.setter(double a1)
{
  return EnvironmentValues.lineSpacing.setter((void (*)(uint64_t *, uint64_t *, double))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:), a1);
}

uint64_t EnvironmentValues.lineHeightMultiple.setter(double a1)
{
  return EnvironmentValues.lineSpacing.setter((void (*)(uint64_t *, uint64_t *, double))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:), a1);
}

uint64_t EnvironmentValues.maximumLineHeight.setter(double a1)
{
  return EnvironmentValues.lineSpacing.setter((void (*)(uint64_t *, uint64_t *, double))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:), a1);
}

uint64_t EnvironmentValues.minimumLineHeight.setter(double a1)
{
  return EnvironmentValues.lineSpacing.setter((void (*)(uint64_t *, uint64_t *, double))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:), a1);
}

uint64_t EnvironmentValues.hyphenationDisabled.setter(uint64_t a1)
{
  return EnvironmentValues.hyphenationDisabled.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

BOOL static Text.TruncationMode.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t NSTextHorizontalAlignment.init(in:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    unsigned __int8 v2 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    swift_release();
    swift_release();
    if (v2 == 3) {
      unsigned __int8 v2 = 0;
    }
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v1, &v16);
    swift_release_n();
    swift_release_n();
    char v3 = v16;
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v1, &v15);
    swift_release_n();
    swift_release_n();
    if ((v15 & 1) == 0)
    {
LABEL_5:
      int v4 = v2;
      if (v2) {
        goto LABEL_6;
      }
LABEL_20:
      if ((v3 & 1) == 0) {
        return 2;
      }
      return 3;
    }
    return qword_2461E3BE8[(char)v2];
  }
  uint64_t v6 = swift_retain_n();
  unsigned __int8 v7 = specialized closure #1 in PropertyList.subscript.getter(v6);
  swift_release_n();
  if (v7 == 3) {
    unsigned __int8 v2 = 0;
  }
  else {
    unsigned __int8 v2 = v7;
  }
  uint64_t v8 = swift_retain_n();
  uint64_t v9 = specialized find<A>(_:key:)(v8);
  if (v9) {
    char v3 = *(unsigned char *)(v9 + 72);
  }
  else {
    char v3 = 0;
  }
  swift_release_n();
  type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<WritingModeKey>);
  BloomFilter.init(hashValue:)(v10);
  uint64_t v11 = swift_retain_n();
  uint64_t v12 = specialized find1<A>(_:key:filter:)(v11, v14);
  if (v12)
  {
    char v13 = *(unsigned char *)(v12 + 72);
    swift_release_n();
    if ((v13 & 1) == 0) {
      goto LABEL_5;
    }
    return qword_2461E3BE8[(char)v2];
  }
  swift_release_n();
  int v4 = v2;
  if (!v2) {
    goto LABEL_20;
  }
LABEL_6:
  if (v4 == 1) {
    return 4;
  }
  if (v3) {
    return 2;
  }
  return 3;
}

void Text.TruncationMode.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int Text.TruncationMode.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t Text.TruncationMode.protobufValue.getter()
{
  return *v0 + 1;
}

unint64_t Text.TruncationMode.init(protobufValue:)@<X0>(unint64_t result@<X0>, unsigned char *a2@<X8>)
{
  unsigned int v2 = 0x2010003u >> (8 * result);
  if (result >= 4) {
    LOBYTE(v2) = 3;
  }
  *a2 = v2;
  return result;
}

uint64_t protocol witness for ProtobufEnum.protobufValue.getter in conformance Text.TruncationMode()
{
  return *v0 + 1;
}

unsigned char *CodableTextCase.init(_:)@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void CodableTextCase.textCase.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

BOOL static CodableTextCase.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void CodableTextCase.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CodableTextCase.CodingKeys()
{
  if (*v0) {
    return 0x7361637265776F6CLL;
  }
  else {
    return 0x7361637265707075;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CodableTextCase.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized CodableTextCase.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CodableTextCase.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CodableTextCase.CodingKeys and conformance CodableTextCase.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CodableTextCase.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CodableTextCase.CodingKeys and conformance CodableTextCase.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CodableTextCase.LowercaseCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CodableTextCase.LowercaseCodingKeys and conformance CodableTextCase.LowercaseCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CodableTextCase.LowercaseCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CodableTextCase.LowercaseCodingKeys and conformance CodableTextCase.LowercaseCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CodableTextCase.UppercaseCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CodableTextCase.UppercaseCodingKeys and conformance CodableTextCase.UppercaseCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CodableTextCase.UppercaseCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CodableTextCase.UppercaseCodingKeys and conformance CodableTextCase.UppercaseCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t CodableTextCase.encode(to:)(void *a1)
{
  char v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8E0C0];
  type metadata accessor for KeyedEncodingContainer<CodableTextCase.LowercaseCodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<CodableTextCase.LowercaseCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableTextCase.LowercaseCodingKeys and conformance CodableTextCase.LowercaseCodingKeys, (uint64_t)&unk_26FA4F328, MEMORY[0x263F8E0C0]);
  uint64_t v24 = *(void *)(v4 - 8);
  uint64_t v25 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v23 = (char *)&v19 - v5;
  type metadata accessor for KeyedEncodingContainer<CodableTextCase.LowercaseCodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<CodableTextCase.UppercaseCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableTextCase.UppercaseCodingKeys and conformance CodableTextCase.UppercaseCodingKeys, (uint64_t)&unk_26FA4F348, v3);
  uint64_t v21 = *(void *)(v6 - 8);
  uint64_t v22 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v20 = (char *)&v19 - v7;
  type metadata accessor for KeyedEncodingContainer<CodableTextCase.LowercaseCodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<CodableTextCase.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableTextCase.CodingKeys and conformance CodableTextCase.CodingKeys, (uint64_t)&unk_26FA4F298, v3);
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v19 - v11;
  char v13 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CodableTextCase.CodingKeys and conformance CodableTextCase.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v14 = (uint64_t (**)(char *, uint64_t))(v10 + 8);
  if (v13)
  {
    char v27 = 1;
    lazy protocol witness table accessor for type CodableTextCase.LowercaseCodingKeys and conformance CodableTextCase.LowercaseCodingKeys();
    char v15 = v23;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v17 = v24;
    uint64_t v16 = v25;
  }
  else
  {
    char v26 = 0;
    lazy protocol witness table accessor for type CodableTextCase.UppercaseCodingKeys and conformance CodableTextCase.UppercaseCodingKeys();
    char v15 = v20;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v17 = v21;
    uint64_t v16 = v22;
  }
  (*(void (**)(char *, uint64_t))(v17 + 8))(v15, v16);
  return (*v14)(v12, v9);
}

uint64_t CodableTextCase.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v34 = a2;
  char v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8E040];
  type metadata accessor for KeyedEncodingContainer<CodableTextCase.LowercaseCodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<CodableTextCase.LowercaseCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableTextCase.LowercaseCodingKeys and conformance CodableTextCase.LowercaseCodingKeys, (uint64_t)&unk_26FA4F328, MEMORY[0x263F8E040]);
  uint64_t v30 = v4;
  uint64_t v33 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v32 = (char *)&v28 - v5;
  type metadata accessor for KeyedEncodingContainer<CodableTextCase.LowercaseCodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<CodableTextCase.UppercaseCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableTextCase.UppercaseCodingKeys and conformance CodableTextCase.UppercaseCodingKeys, (uint64_t)&unk_26FA4F348, v3);
  uint64_t v7 = v6;
  uint64_t v29 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v28 - v8;
  type metadata accessor for KeyedEncodingContainer<CodableTextCase.LowercaseCodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<CodableTextCase.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type CodableTextCase.CodingKeys and conformance CodableTextCase.CodingKeys, (uint64_t)&unk_26FA4F298, v3);
  uint64_t v11 = v10;
  uint64_t v31 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  char v13 = (char *)&v28 - v12;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CodableTextCase.CodingKeys and conformance CodableTextCase.CodingKeys();
  uint64_t v14 = v35;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v14) {
    goto LABEL_6;
  }
  uint64_t v28 = v7;
  char v15 = v32;
  uint64_t v16 = v33;
  uint64_t v17 = v34;
  uint64_t v35 = a1;
  uint64_t v18 = v13;
  uint64_t v19 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v19 + 16) != 1)
  {
    uint64_t v21 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v22 = v11;
    uint64_t v24 = v23;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *uint64_t v24 = &type metadata for CodableTextCase;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v21 - 8) + 104))(v24, *MEMORY[0x263F8DCB0], v21);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v18, v22);
    a1 = v35;
LABEL_6:
    uint64_t v25 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v25);
  }
  int v36 = *(unsigned __int8 *)(v19 + 32);
  if (v36)
  {
    char v38 = 1;
    lazy protocol witness table accessor for type CodableTextCase.LowercaseCodingKeys and conformance CodableTextCase.LowercaseCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v20 = v31;
    (*(void (**)(char *, uint64_t))(v16 + 8))(v15, v30);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v13, v11);
  }
  else
  {
    char v37 = 0;
    lazy protocol witness table accessor for type CodableTextCase.UppercaseCodingKeys and conformance CodableTextCase.UppercaseCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v27 = v31;
    (*(void (**)(char *, uint64_t))(v29 + 8))(v9, v28);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v13, v11);
  }
  *uint64_t v17 = v36;
  uint64_t v25 = (uint64_t)v35;
  return __swift_destroy_boxed_opaque_existential_1(v25);
}

uint64_t protocol witness for Decodable.init(from:) in conformance CodableTextCase@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return CodableTextCase.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CodableTextCase(void *a1)
{
  return CodableTextCase.encode(to:)(a1);
}

unsigned char *static Text.Case.unwrap(codingProxy:)@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void (*EnvironmentValues.multilineTextAlignment.modify(void *a1))(uint64_t a1)
{
  char v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    char v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    char v5 = specialized closure #1 in PropertyList.subscript.getter(v6);
  }
  swift_release_n();
  v3[4] = 0;
  if (v5 == 3) {
    char v7 = 0;
  }
  else {
    char v7 = v5;
  }
  *((unsigned char *)v3 + 40) = v7;
  return EnvironmentValues.multilineTextAlignment.modify;
}

void EnvironmentValues.multilineTextAlignment.modify(uint64_t a1)
{
  Swift::UInt v1 = *(void ***)a1;
  unsigned __int8 v2 = *(unsigned char *)(*(void *)a1 + 40);
  char v3 = *(uint64_t **)(*(void *)a1 + 24);
  uint64_t v4 = *v3;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v3, v2);
  swift_release();
  if (v3[1])
  {
    uint64_t v5 = *v1[3];
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v5);
    swift_release();
    swift_release();
  }
  swift_release();

  free(v1);
}

uint64_t EnvironmentValues.explicitTruncationMode.getter()
{
  return EnvironmentValues.explicitTruncationMode.getter((void (*)(uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t EnvironmentValues.explicitTruncationMode.setter(unsigned __int8 *a1)
{
  return EnvironmentValues.explicitTruncationMode.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t (*EnvironmentValues.truncationMode.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)(a1 + 16) = v1;
  EnvironmentValues.truncationMode.getter((char *)(a1 + 24));
  return EnvironmentValues.truncationMode.modify;
}

uint64_t EnvironmentValues.truncationMode.modify(uint64_t a1)
{
  unsigned __int8 v2 = *(unsigned char *)(a1 + 24);
  char v3 = *(uint64_t **)(a1 + 16);
  uint64_t v4 = *v3;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v3, v2);
  swift_release();
  if (v3[1])
  {
    uint64_t v5 = **(void **)(a1 + 16);
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v5);
    swift_release();
    swift_release();
  }

  return swift_release();
}

uint64_t (*EnvironmentValues.explicitTruncationMode.modify(uint64_t a1))(uint64_t a1, char a2)
{
  unsigned __int8 v2 = (char *)(a1 + 24);
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, v2);
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TruncationModeKey>);
    BloomFilter.init(hashValue:)(v4);
    uint64_t v5 = swift_retain_n();
    uint64_t v6 = specialized find1<A>(_:key:filter:)(v5, v9);
    if (v6) {
      char v7 = *(unsigned char *)(v6 + 72);
    }
    else {
      char v7 = 3;
    }
    *unsigned __int8 v2 = v7;
  }
  swift_release_n();
  return EnvironmentValues.explicitTruncationMode.modify;
}

uint64_t EnvironmentValues.explicitTruncationMode.modify(uint64_t a1, char a2)
{
  return EnvironmentValues.explicitTruncationMode.modify(a1, a2, (void (*)(void *, uint64_t, uint64_t))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t EnvironmentValues.defaultTextFieldTruncationMode.getter()
{
  return EnvironmentValues.explicitTruncationMode.getter((void (*)(uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t EnvironmentValues.defaultTextFieldTruncationMode.setter(unsigned __int8 *a1)
{
  return EnvironmentValues.explicitTruncationMode.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t (*EnvironmentValues.defaultTextFieldTruncationMode.modify(uint64_t a1))(uint64_t a1, char a2)
{
  unsigned __int8 v2 = (char *)(a1 + 24);
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, v2);
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultTextFieldTruncationMode>);
    BloomFilter.init(hashValue:)(v4);
    uint64_t v5 = swift_retain_n();
    uint64_t v6 = specialized find1<A>(_:key:filter:)(v5, v9);
    if (v6) {
      char v7 = *(unsigned char *)(v6 + 72);
    }
    else {
      char v7 = 3;
    }
    *unsigned __int8 v2 = v7;
  }
  swift_release_n();
  return EnvironmentValues.defaultTextFieldTruncationMode.modify;
}

uint64_t EnvironmentValues.defaultTextFieldTruncationMode.modify(uint64_t a1, char a2)
{
  return EnvironmentValues.explicitTruncationMode.modify(a1, a2, (void (*)(void *, uint64_t, uint64_t))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

void (*EnvironmentValues.lineSpacing.modify(double **a1))(double **a1, char a2)
{
  uint64_t v3 = (double *)malloc(0x30uLL);
  *a1 = v3;
  *((void *)v3 + 4) = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    double v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    double v5 = specialized closure #1 in PropertyList.subscript.getter(v6);
  }
  swift_release_n();
  v3[5] = 0.0;
  *uint64_t v3 = v5;
  return EnvironmentValues.lineSpacing.modify;
}

void EnvironmentValues.lineSpacing.modify(double **a1, char a2)
{
}

double EnvironmentValues._lineHeightMultiple.getter()
{
  return EnvironmentValues.bodyHeadOutdent.getter(specialized PropertyList.Tracker.value<A>(_:for:), (double (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t key path getter for EnvironmentValues._lineHeightMultiple : EnvironmentValues@<X0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  return key path getter for EnvironmentValues.lineSpacing : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (double (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t EnvironmentValues._lineHeightMultiple.setter(double a1)
{
  return EnvironmentValues.lineSpacing.setter((void (*)(uint64_t *, uint64_t *, double))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:), a1);
}

void (*EnvironmentValues._lineHeightMultiple.modify(double **a1))(double **a1, char a2)
{
  uint64_t v3 = (double *)malloc(0x30uLL);
  *a1 = v3;
  *((void *)v3 + 4) = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    double v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    double v5 = specialized closure #1 in PropertyList.subscript.getter(v6);
  }
  swift_release_n();
  v3[5] = 0.0;
  *uint64_t v3 = v5;
  return EnvironmentValues._lineHeightMultiple.modify;
}

void EnvironmentValues._lineHeightMultiple.modify(double **a1, char a2)
{
}

uint64_t key path setter for EnvironmentValues.lineHeightMultiple : EnvironmentValues(double *a1)
{
  return EnvironmentValues.lineHeightMultiple.setter(*a1);
}

void (*EnvironmentValues.lineHeightMultiple.modify(double **a1))(double **a1, char a2)
{
  uint64_t v3 = (double *)malloc(0x30uLL);
  *a1 = v3;
  *((void *)v3 + 4) = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    double v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    double v5 = specialized closure #1 in PropertyList.subscript.getter(v6);
  }
  swift_release_n();
  v3[5] = 0.0;
  *uint64_t v3 = v5;
  return EnvironmentValues._lineHeightMultiple.modify;
}

uint64_t key path getter for EnvironmentValues.maximumLineHeight : EnvironmentValues@<X0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  return key path getter for EnvironmentValues.lineSpacing : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (double (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t key path setter for EnvironmentValues.maximumLineHeight : EnvironmentValues(double *a1)
{
  return EnvironmentValues.maximumLineHeight.setter(*a1);
}

void (*EnvironmentValues.maximumLineHeight.modify(double **a1))(double **a1, char a2)
{
  uint64_t v3 = (double *)malloc(0x30uLL);
  *a1 = v3;
  *((void *)v3 + 4) = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    double v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    double v5 = specialized closure #1 in PropertyList.subscript.getter(v6);
  }
  swift_release_n();
  v3[5] = 0.0;
  *uint64_t v3 = v5;
  return EnvironmentValues.maximumLineHeight.modify;
}

void EnvironmentValues.maximumLineHeight.modify(double **a1, char a2)
{
}

uint64_t key path getter for EnvironmentValues.minimumLineHeight : EnvironmentValues@<X0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  return key path getter for EnvironmentValues.lineSpacing : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (double (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t key path setter for EnvironmentValues.minimumLineHeight : EnvironmentValues(double *a1)
{
  return EnvironmentValues.minimumLineHeight.setter(*a1);
}

void (*EnvironmentValues.minimumLineHeight.modify(double **a1))(double **a1, char a2)
{
  uint64_t v3 = (double *)malloc(0x30uLL);
  *a1 = v3;
  *((void *)v3 + 4) = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    double v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    double v5 = specialized closure #1 in PropertyList.subscript.getter(v6);
  }
  swift_release_n();
  v3[5] = 0.0;
  *uint64_t v3 = v5;
  return EnvironmentValues.minimumLineHeight.modify;
}

void EnvironmentValues.minimumLineHeight.modify(double **a1, char a2)
{
}

uint64_t key path setter for EnvironmentValues.hyphenationFactor : EnvironmentValues(double *a1)
{
  return EnvironmentValues.hyphenationFactor.setter(*a1);
}

void (*EnvironmentValues.hyphenationFactor.modify(double **a1))(double **a1, char a2)
{
  uint64_t v3 = (double *)malloc(0x30uLL);
  *a1 = v3;
  *((void *)v3 + 4) = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    double v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    double v5 = specialized closure #1 in PropertyList.subscript.getter(v6);
  }
  swift_release_n();
  v3[5] = 0.0;
  *uint64_t v3 = v5;
  return EnvironmentValues.hyphenationFactor.modify;
}

void EnvironmentValues.hyphenationFactor.modify(double **a1, char a2)
{
}

void EnvironmentValues.lineSpacing.modify(double **a1, char a2, void (*a3)(uint64_t *, void **, double), void (*a4)(uint64_t, uint64_t))
{
  char v7 = *a1;
  uint64_t v8 = (uint64_t *)*((void *)*a1 + 4);
  double v9 = **a1;
  uint64_t v10 = *v8;
  swift_retain_n();
  if (a2) {
    uint64_t v11 = (void **)(v7 + 2);
  }
  else {
    uint64_t v11 = (void **)(v7 + 3);
  }
  a3(v8, v11, v9);
  swift_release();
  if (v8[1])
  {
    uint64_t v12 = **((void **)v7 + 4);
    swift_retain();
    swift_retain();
    a4(v10, v12);
    swift_release();
    swift_release();
  }
  swift_release();

  free(v7);
}

uint64_t key path getter for EnvironmentValues.hyphenationDisabled : EnvironmentValues@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return key path getter for EnvironmentValues.hyphenationDisabled : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t key path setter for EnvironmentValues.hyphenationDisabled : EnvironmentValues(unsigned __int8 *a1)
{
  return EnvironmentValues.hyphenationDisabled.setter(*a1);
}

void (*EnvironmentValues.hyphenationDisabled.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    char v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    char v5 = specialized closure #1 in PropertyList.subscript.getter(v6);
  }
  swift_release_n();
  v3[4] = 0;
  *((unsigned char *)v3 + 40) = v5 & 1;
  return EnvironmentValues.hyphenationDisabled.modify;
}

void EnvironmentValues.hyphenationDisabled.modify(uint64_t a1, char a2)
{
}

void (*EnvironmentValues.allowsTightening.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    char v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    char v5 = specialized closure #1 in PropertyList.subscript.getter(v6);
  }
  swift_release_n();
  v3[4] = 0;
  *((unsigned char *)v3 + 40) = v5 & 1;
  return EnvironmentValues.allowsTightening.modify;
}

void EnvironmentValues.allowsTightening.modify(uint64_t a1, char a2)
{
}

uint64_t key path getter for EnvironmentValues.avoidsOrphans : EnvironmentValues@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return key path getter for EnvironmentValues.hyphenationDisabled : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t key path setter for EnvironmentValues.avoidsOrphans : EnvironmentValues(unsigned __int8 *a1)
{
  return EnvironmentValues.avoidsOrphans.setter(*a1);
}

uint64_t EnvironmentValues.avoidsOrphans.setter(uint64_t a1)
{
  return EnvironmentValues.hyphenationDisabled.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

void (*EnvironmentValues.avoidsOrphans.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    char v5 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    char v5 = specialized closure #1 in PropertyList.subscript.getter(v6, (uint64_t)v3);
  }
  swift_release_n();
  v3[4] = 0;
  *((unsigned char *)v3 + 40) = v5 & 1;
  return EnvironmentValues.avoidsOrphans.modify;
}

void EnvironmentValues.avoidsOrphans.modify(uint64_t a1, char a2)
{
}

void EnvironmentValues.hyphenationDisabled.modify(uint64_t a1, char a2, void (*a3)(uint64_t *, uint64_t, void **), void (*a4)(uint64_t, uint64_t))
{
  char v7 = *(void ***)a1;
  uint64_t v8 = *(uint64_t **)(*(void *)a1 + 24);
  uint64_t v9 = *(unsigned __int8 *)(*(void *)a1 + 40);
  uint64_t v10 = *v8;
  swift_retain_n();
  if (a2) {
    uint64_t v11 = v7 + 1;
  }
  else {
    uint64_t v11 = v7 + 2;
  }
  a3(v8, v9, v11);
  swift_release();
  if (v8[1])
  {
    uint64_t v12 = *v7[3];
    swift_retain();
    swift_retain();
    a4(v10, v12);
    swift_release();
    swift_release();
  }
  swift_release();

  free(v7);
}

uint64_t (*EnvironmentValues.minimumScaleFactor.modify(double *a1))(double *a1)
{
  *((void *)a1 + 2) = v1;
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    double v4 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
    swift_release_n();
  }
  else
  {
    uint64_t v5 = swift_retain_n();
    double v4 = specialized closure #1 in PropertyList.subscript.getter(v5);
  }
  swift_release_n();
  *a1 = v4;
  return EnvironmentValues.minimumScaleFactor.modify;
}

uint64_t EnvironmentValues.minimumScaleFactor.modify(double *a1)
{
  return EnvironmentValues.minimumScaleFactor.setter(*a1);
}

uint64_t EnvironmentValues.textCase.getter()
{
  return EnvironmentValues.explicitTruncationMode.getter((void (*)(uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t EnvironmentValues.explicitTruncationMode.getter(void (*a1)(uint64_t), void (*a2)(uint64_t, uint64_t *))
{
  uint64_t v3 = *v2;
  if (v2[1])
  {
    swift_retain_n();
    swift_retain_n();
    a1(v3);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    a2(v6, &v8);
  }
  return swift_release_n();
}

uint64_t (*EnvironmentValues.textCase.modify(uint64_t a1))(uint64_t a1, char a2)
{
  unsigned __int8 v2 = (char *)(a1 + 24);
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, v2);
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextCaseKey>);
    BloomFilter.init(hashValue:)(v4);
    char v5 = 2;
    uint64_t v6 = swift_retain_n();
    uint64_t v7 = specialized find1<A>(_:key:filter:)(v6, v9);
    if (v7) {
      char v5 = *(unsigned char *)(v7 + 72);
    }
    *unsigned __int8 v2 = v5;
  }
  swift_release_n();
  return EnvironmentValues.textCase.modify;
}

uint64_t EnvironmentValues.textCase.modify(uint64_t a1, char a2)
{
  return EnvironmentValues.explicitTruncationMode.modify(a1, a2, (void (*)(void *, uint64_t, uint64_t))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t EnvironmentValues.explicitTruncationMode.modify(uint64_t a1, char a2, void (*a3)(void *, uint64_t, uint64_t), void (*a4)(uint64_t, uint64_t))
{
  uint64_t v8 = *(unsigned __int8 *)(a1 + 24);
  uint64_t v9 = *(void **)(a1 + 16);
  uint64_t v10 = *v9;
  swift_retain_n();
  if (a2)
  {
    uint64_t v11 = v9;
    uint64_t v12 = v8;
    uint64_t v13 = a1;
  }
  else
  {
    uint64_t v13 = a1 + 8;
    uint64_t v11 = v9;
    uint64_t v12 = v8;
  }
  a3(v11, v12, v13);
  swift_release();
  if (v9[1])
  {
    uint64_t v14 = **(void **)(a1 + 16);
    swift_retain();
    swift_retain();
    a4(v10, v14);
    swift_release();
    swift_release();
  }

  return swift_release();
}

uint64_t View.multilineTextAlignment(_:)(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t KeyPath = (uint64_t *)swift_getKeyPath();
  char v8 = a1;
  View.environment<A>(_:_:)(KeyPath, (uint64_t)&v8, a2, a3);
  return swift_release();
}

uint64_t View.truncationMode(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return View.truncationMode(_:)(a1, a2, a3);
}

{
  uint64_t *KeyPath;
  uint64_t vars8;

  uint64_t KeyPath = (uint64_t *)swift_getKeyPath();
  View.environment<A>(_:_:)(KeyPath, a1, a2, a3);

  return swift_release();
}

uint64_t View._lineHeightMultiple(_:)(uint64_t a1, uint64_t a2, double a3)
{
  return View.lineSpacing(_:)(a1, a2, a3);
}

uint64_t View.lineHeightMultiple(_:)(uint64_t a1, uint64_t a2, double a3)
{
  return View.lineSpacing(_:)(a1, a2, a3);
}

uint64_t View.maximumLineHeight(_:)(uint64_t a1, uint64_t a2, double a3)
{
  return View.lineSpacing(_:)(a1, a2, a3);
}

uint64_t View.minimumLineHeight(_:)(uint64_t a1, uint64_t a2, double a3)
{
  return View.lineSpacing(_:)(a1, a2, a3);
}

uint64_t View.hyphenationDisabled(_:)(char a1, uint64_t a2, uint64_t a3)
{
  return View.hyphenationDisabled(_:)(a1, a2, a3);
}

{
  uint64_t *KeyPath;
  char v8;

  uint64_t KeyPath = (uint64_t *)swift_getKeyPath();
  char v8 = a1;
  View.environment<A>(_:_:)(KeyPath, (uint64_t)&v8, a2, a3);
  return swift_release();
}

uint64_t View.allowsTightening(_:)(char a1, uint64_t a2, uint64_t a3)
{
  return View.hyphenationDisabled(_:)(a1, a2, a3);
}

uint64_t View.avoidsOrphans(_:)(char a1, uint64_t a2, uint64_t a3)
{
  return View.hyphenationDisabled(_:)(a1, a2, a3);
}

uint64_t View.minimumScaleFactor(_:)(uint64_t a1, uint64_t a2, double a3)
{
  return View.lineSpacing(_:)(a1, a2, a3);
}

uint64_t View.textCase(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return View.truncationMode(_:)(a1, a2, a3);
}

uint64_t key path getter for EnvironmentValues.textCase : EnvironmentValues, serialized@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a2);
    swift_release_n();
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, a2);
  }
  return swift_release_n();
}

double protocol witness for static EnvironmentKey.defaultValue.getter in conformance LineSpacingKey@<D0>(void *a1@<X8>)
{
  return protocol witness for static EnvironmentKey.defaultValue.getter in conformance LineSpacingKey(&one-time initialization token for defaultValue, (double *)&static LineSpacingKey.defaultValue, a1);
}

double protocol witness for static EnvironmentKey.defaultValue.getter in conformance LineHeightMultipleKey@<D0>(void *a1@<X8>)
{
  return protocol witness for static EnvironmentKey.defaultValue.getter in conformance LineSpacingKey(&one-time initialization token for defaultValue, (double *)&static LineHeightMultipleKey.defaultValue, a1);
}

double static MaximumLineHeightKey.defaultValue.getter()
{
  return static MaximumLineHeightKey.defaultValue.getter(&one-time initialization token for defaultValue, (uint64_t)&static MaximumLineHeightKey.defaultValue);
}

double protocol witness for static EnvironmentKey.defaultValue.getter in conformance MaximumLineHeightKey@<D0>(void *a1@<X8>)
{
  return protocol witness for static EnvironmentKey.defaultValue.getter in conformance LineSpacingKey(&one-time initialization token for defaultValue, (double *)&static MaximumLineHeightKey.defaultValue, a1);
}

double static MinimumLineHeightKey.defaultValue.getter()
{
  return static MaximumLineHeightKey.defaultValue.getter(&one-time initialization token for defaultValue, (uint64_t)&static MinimumLineHeightKey.defaultValue);
}

double protocol witness for static EnvironmentKey.defaultValue.getter in conformance MinimumLineHeightKey@<D0>(void *a1@<X8>)
{
  return protocol witness for static EnvironmentKey.defaultValue.getter in conformance LineSpacingKey(&one-time initialization token for defaultValue, (double *)&static MinimumLineHeightKey.defaultValue, a1);
}

double protocol witness for static EnvironmentKey.defaultValue.getter in conformance HyphenationFactorKey@<D0>(void *a1@<X8>)
{
  return protocol witness for static EnvironmentKey.defaultValue.getter in conformance LineSpacingKey(&one-time initialization token for defaultValue, (double *)&static HyphenationFactorKey.defaultValue, a1);
}

double protocol witness for static EnvironmentKey.defaultValue.getter in conformance MinimumScaleFactorKey@<D0>(void *a1@<X8>)
{
  return protocol witness for static EnvironmentKey.defaultValue.getter in conformance LineSpacingKey(&one-time initialization token for defaultValue, (double *)&static MinimumScaleFactorKey.defaultValue, a1);
}

unint64_t lazy protocol witness table accessor for type CodableTextCase.LowercaseCodingKeys and conformance CodableTextCase.LowercaseCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type CodableTextCase.LowercaseCodingKeys and conformance CodableTextCase.LowercaseCodingKeys;
  if (!lazy protocol witness table cache variable for type CodableTextCase.LowercaseCodingKeys and conformance CodableTextCase.LowercaseCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableTextCase.LowercaseCodingKeys and conformance CodableTextCase.LowercaseCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableTextCase.LowercaseCodingKeys and conformance CodableTextCase.LowercaseCodingKeys;
  if (!lazy protocol witness table cache variable for type CodableTextCase.LowercaseCodingKeys and conformance CodableTextCase.LowercaseCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableTextCase.LowercaseCodingKeys and conformance CodableTextCase.LowercaseCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableTextCase.LowercaseCodingKeys and conformance CodableTextCase.LowercaseCodingKeys;
  if (!lazy protocol witness table cache variable for type CodableTextCase.LowercaseCodingKeys and conformance CodableTextCase.LowercaseCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableTextCase.LowercaseCodingKeys and conformance CodableTextCase.LowercaseCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableTextCase.UppercaseCodingKeys and conformance CodableTextCase.UppercaseCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type CodableTextCase.UppercaseCodingKeys and conformance CodableTextCase.UppercaseCodingKeys;
  if (!lazy protocol witness table cache variable for type CodableTextCase.UppercaseCodingKeys and conformance CodableTextCase.UppercaseCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableTextCase.UppercaseCodingKeys and conformance CodableTextCase.UppercaseCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableTextCase.UppercaseCodingKeys and conformance CodableTextCase.UppercaseCodingKeys;
  if (!lazy protocol witness table cache variable for type CodableTextCase.UppercaseCodingKeys and conformance CodableTextCase.UppercaseCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableTextCase.UppercaseCodingKeys and conformance CodableTextCase.UppercaseCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableTextCase.UppercaseCodingKeys and conformance CodableTextCase.UppercaseCodingKeys;
  if (!lazy protocol witness table cache variable for type CodableTextCase.UppercaseCodingKeys and conformance CodableTextCase.UppercaseCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableTextCase.UppercaseCodingKeys and conformance CodableTextCase.UppercaseCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableTextCase.CodingKeys and conformance CodableTextCase.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type CodableTextCase.CodingKeys and conformance CodableTextCase.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableTextCase.CodingKeys and conformance CodableTextCase.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableTextCase.CodingKeys and conformance CodableTextCase.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableTextCase.CodingKeys and conformance CodableTextCase.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableTextCase.CodingKeys and conformance CodableTextCase.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableTextCase.CodingKeys and conformance CodableTextCase.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableTextCase.CodingKeys and conformance CodableTextCase.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableTextCase.CodingKeys and conformance CodableTextCase.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableTextCase.CodingKeys and conformance CodableTextCase.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableTextCase.CodingKeys and conformance CodableTextCase.CodingKeys;
  if (!lazy protocol witness table cache variable for type CodableTextCase.CodingKeys and conformance CodableTextCase.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableTextCase.CodingKeys and conformance CodableTextCase.CodingKeys);
  }
  return result;
}

void type metadata accessor for KeyedEncodingContainer<CodableTextCase.LowercaseCodingKeys>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t sub_245DDA0D8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.multilineTextAlignment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_245DDA104(unsigned __int8 *a1)
{
  return EnvironmentValues.multilineTextAlignment.setter(*a1);
}

uint64_t sub_245DDA12C@<X0>(char *a1@<X8>)
{
  return EnvironmentValues.truncationMode.getter(a1);
}

uint64_t sub_245DDA150(unsigned __int8 *a1)
{
  unsigned __int8 v2 = *a1;
  return EnvironmentValues.truncationMode.setter(&v2);
}

uint64_t sub_245DDA188@<X0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  return key path getter for EnvironmentValues.lineSpacing : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (double (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_245DDA1CC(double *a1)
{
  return EnvironmentValues.lineSpacing.setter(*a1);
}

uint64_t sub_245DDA1F8(double *a1)
{
  return EnvironmentValues.lineHeightMultiple.setter(*a1);
}

uint64_t sub_245DDA228(double *a1)
{
  return EnvironmentValues.maximumLineHeight.setter(*a1);
}

uint64_t sub_245DDA254(double *a1)
{
  return EnvironmentValues.minimumLineHeight.setter(*a1);
}

uint64_t sub_245DDA280(double *a1)
{
  return EnvironmentValues.hyphenationFactor.setter(*a1);
}

uint64_t sub_245DDA2AC(unsigned __int8 *a1)
{
  return EnvironmentValues.hyphenationDisabled.setter(*a1);
}

uint64_t sub_245DDA2D4@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return key path getter for EnvironmentValues.hyphenationDisabled : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_245DDA318(unsigned __int8 *a1)
{
  return EnvironmentValues.allowsTightening.setter(*a1);
}

uint64_t sub_245DDA344(unsigned __int8 *a1)
{
  return EnvironmentValues.avoidsOrphans.setter(*a1);
}

uint64_t sub_245DDA36C@<X0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  return key path getter for EnvironmentValues.lineSpacing : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (double (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_245DDA3B0(double *a1)
{
  return EnvironmentValues.minimumScaleFactor.setter(*a1);
}

uint64_t sub_245DDA3D8@<X0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  return key path getter for EnvironmentValues.lineSpacing : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (double (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_245DDA41C(double *a1)
{
  return EnvironmentValues.lineSpacing.setter((void (*)(uint64_t *, uint64_t *, double))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:), *a1);
}

uint64_t sub_245DDA470(unsigned __int8 *a1)
{
  unsigned __int8 v2 = *a1;
  return EnvironmentValues.textCase.setter(&v2);
}

unint64_t lazy protocol witness table accessor for type Text.TruncationMode and conformance Text.TruncationMode()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.TruncationMode and conformance Text.TruncationMode;
  if (!lazy protocol witness table cache variable for type Text.TruncationMode and conformance Text.TruncationMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.TruncationMode and conformance Text.TruncationMode);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Text.Case and conformance Text.Case()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.Case and conformance Text.Case;
  if (!lazy protocol witness table cache variable for type Text.Case and conformance Text.Case)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Case and conformance Text.Case);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableTextCase and conformance CodableTextCase()
{
  unint64_t result = lazy protocol witness table cache variable for type CodableTextCase and conformance CodableTextCase;
  if (!lazy protocol witness table cache variable for type CodableTextCase and conformance CodableTextCase)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableTextCase and conformance CodableTextCase);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableTextCase and conformance CodableTextCase;
  if (!lazy protocol witness table cache variable for type CodableTextCase and conformance CodableTextCase)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableTextCase and conformance CodableTextCase);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodableTextCase and conformance CodableTextCase;
  if (!lazy protocol witness table cache variable for type CodableTextCase and conformance CodableTextCase)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodableTextCase and conformance CodableTextCase);
  }
  return result;
}

uint64_t sub_245DDA660@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.multilineTextAlignment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_245DDA69C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.truncationMode.getter(&v3);
  *a1 = v3;
  return result;
}

uint64_t sub_245DDA6E0(unsigned __int8 *a1)
{
  unsigned __int8 v2 = *a1;
  return EnvironmentValues.truncationMode.setter(&v2);
}

uint64_t sub_245DDA718@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return key path getter for EnvironmentValues.explicitTruncationMode : EnvironmentValues(a1, (void (*)(uint64_t *__return_ptr, uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(uint64_t *__return_ptr, uint64_t, unsigned char *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_245DDA758(unsigned __int8 *a1)
{
  unsigned __int8 v2 = *a1;
  return EnvironmentValues.explicitTruncationMode.setter(&v2);
}

uint64_t sub_245DDA790@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return key path getter for EnvironmentValues.explicitTruncationMode : EnvironmentValues(a1, (void (*)(uint64_t *__return_ptr, uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(uint64_t *__return_ptr, uint64_t, unsigned char *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_245DDA7D0(unsigned __int8 *a1)
{
  unsigned __int8 v2 = *a1;
  return EnvironmentValues.defaultTextFieldTruncationMode.setter(&v2);
}

uint64_t sub_245DDA808@<X0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  return key path getter for EnvironmentValues.lineSpacing : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (double (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_245DDA84C@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return key path getter for EnvironmentValues.hyphenationDisabled : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_245DDA890@<X0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  return key path getter for EnvironmentValues.lineSpacing : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (double (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_245DDA8D4@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return key path getter for EnvironmentValues.explicitTruncationMode : EnvironmentValues(a1, (void (*)(uint64_t *__return_ptr, uint64_t))specialized PropertyList.Tracker.value<A>(_:for:), (void (*)(uint64_t *__return_ptr, uint64_t, unsigned char *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t sub_245DDA914(unsigned __int8 *a1)
{
  unsigned __int8 v2 = *a1;
  return EnvironmentValues.textCase.setter(&v2);
}

ValueMetadata *type metadata accessor for CodableTextCase()
{
  return &type metadata for CodableTextCase;
}

ValueMetadata *type metadata accessor for MaximumLineHeightKey()
{
  return &type metadata for MaximumLineHeightKey;
}

ValueMetadata *type metadata accessor for MinimumLineHeightKey()
{
  return &type metadata for MinimumLineHeightKey;
}

ValueMetadata *type metadata accessor for MinimumScaleFactorKey()
{
  return &type metadata for MinimumScaleFactorKey;
}

uint64_t sub_245DDA9B4(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVyAA13TextAlignmentOGGAaBHPxAaBHD1__AiA0cI0HPyHCHCTm(a1, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TextAlignment>, (uint64_t)&type metadata for TextAlignment);
}

uint64_t sub_245DDA9C8(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVyAA13TextAlignmentOGGAaBHPxAaBHD1__AiA0cI0HPyHCHCTm(a1, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Text.TruncationMode>, (uint64_t)&type metadata for Text.TruncationMode);
}

uint64_t sub_245DDA9DC(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVyAA13TextAlignmentOGGAaBHPxAaBHD1__AiA0cI0HPyHCHCTm(a1, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<CGFloat>, MEMORY[0x263F8EF38]);
}

uint64_t sub_245DDA9F0(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVyAA13TextAlignmentOGGAaBHPxAaBHD1__AiA0cI0HPyHCHCTm(a1, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x263F8D4F8]);
}

uint64_t sub_245DDAA04()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _EnvironmentKeyWritingModifier<Text.Case?>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Text.Case?>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<TextAlignment>(255, (unint64_t *)&lazy cache variable for type metadata for Text.Case?, (uint64_t)&type metadata for Text.Case, MEMORY[0x263F8D8F0]);
    unint64_t v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Text.Case?>);
    }
  }
}

ValueMetadata *type metadata accessor for DefaultTextFieldTruncationMode()
{
  return &type metadata for DefaultTextFieldTruncationMode;
}

void *type metadata accessor for CodableTextCase.CodingKeys()
{
  return &unk_26FA4F298;
}

void *type metadata accessor for CodableTextCase.UppercaseCodingKeys()
{
  return &unk_26FA4F348;
}

void *type metadata accessor for CodableTextCase.LowercaseCodingKeys()
{
  return &unk_26FA4F328;
}

ValueMetadata *type metadata accessor for TextCaseKey()
{
  return &type metadata for TextCaseKey;
}

ValueMetadata *type metadata accessor for TruncationModeKey()
{
  return &type metadata for TruncationModeKey;
}

uint64_t specialized CodableTextCase.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7361637265707075 && a2 == 0xE900000000000065;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7361637265776F6CLL && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

ValueMetadata *type metadata accessor for HyphenationDisabledKey()
{
  return &type metadata for HyphenationDisabledKey;
}

ValueMetadata *type metadata accessor for HyphenationFactorKey()
{
  return &type metadata for HyphenationFactorKey;
}

ValueMetadata *type metadata accessor for LineHeightMultipleKey()
{
  return &type metadata for LineHeightMultipleKey;
}

ValueMetadata *type metadata accessor for LineSpacingKey()
{
  return &type metadata for LineSpacingKey;
}

ValueMetadata *type metadata accessor for TextAlignmentKey()
{
  return &type metadata for TextAlignmentKey;
}

ValueMetadata *type metadata accessor for AllowsTighteningKey()
{
  return &type metadata for AllowsTighteningKey;
}

ValueMetadata *type metadata accessor for AvoidsOrphansKey()
{
  return &type metadata for AvoidsOrphansKey;
}

ValueMetadata *type metadata accessor for BodyHeadOutdentKey()
{
  return &type metadata for BodyHeadOutdentKey;
}

uint64_t Image.init(_:scale:orientation:label:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, double a7)
{
  uint64_t v13 = a5 & 1;
  type metadata accessor for ImageProviderBox<Image.CGImageProvider>();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  *(double *)(result + 24) = a7;
  *(unsigned char *)(result + 32) = a2;
  *(void *)(result + 40) = a3;
  *(void *)(result + 48) = a4;
  *(void *)(result + 56) = v13;
  *(void *)(result + 64) = a6;
  *(unsigned char *)(result + 72) = 0;
  return result;
}

double CGImageRef.size.getter()
{
  double Width = (double)(uint64_t)CGImageGetWidth(v0);
  CGImageGetHeight(v0);
  return Width;
}

uint64_t initializeWithCopy for Image.CGImageProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 48);
  id v7 = v4;
  if (v6)
  {
    uint64_t v8 = *(void *)(a2 + 24);
    uint64_t v9 = *(void *)(a2 + 32);
    char v10 = *(unsigned char *)(a2 + 40);
    outlined copy of Text.Storage(v8, v9, v10);
    *(void *)(a1 + 24) = v8;
    *(void *)(a1 + 32) = v9;
    *(unsigned char *)(a1 + 40) = v10;
    *(void *)(a1 + 48) = v6;
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v11 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = v11;
  }
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

uint64_t assignWithCopy for Image.CGImageProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  id v7 = (_OWORD *)(a1 + 24);
  uint64_t v8 = (_OWORD *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 48);
  if (*(void *)(a1 + 48))
  {
    if (v9)
    {
      uint64_t v10 = *(void *)(a2 + 24);
      uint64_t v11 = *(void *)(a2 + 32);
      char v12 = *(unsigned char *)(a2 + 40);
      outlined copy of Text.Storage(v10, v11, v12);
      uint64_t v13 = *(void *)(a1 + 24);
      uint64_t v14 = *(void *)(a1 + 32);
      char v15 = *(unsigned char *)(a1 + 40);
      *(void *)(a1 + 24) = v10;
      *(void *)(a1 + 32) = v11;
      *(unsigned char *)(a1 + 40) = v12;
      outlined consume of Text.Storage(v13, v14, v15);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1 + 24);
      long long v19 = *(_OWORD *)(a2 + 40);
      *id v7 = *v8;
      *(_OWORD *)(a1 + 40) = v19;
    }
  }
  else if (v9)
  {
    uint64_t v16 = *(void *)(a2 + 24);
    uint64_t v17 = *(void *)(a2 + 32);
    char v18 = *(unsigned char *)(a2 + 40);
    outlined copy of Text.Storage(v16, v17, v18);
    *(void *)(a1 + 24) = v16;
    *(void *)(a1 + 32) = v17;
    *(unsigned char *)(a1 + 40) = v18;
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v20 = *(_OWORD *)(a2 + 40);
    *id v7 = *v8;
    *(_OWORD *)(a1 + 40) = v20;
  }
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

uint64_t assignWithTake for Image.CGImageProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  if (!*(void *)(a1 + 48)) {
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(a2 + 48);
  if (!v5)
  {
    outlined destroy of Text(a1 + 24);
LABEL_5:
    long long v10 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = v10;
    goto LABEL_6;
  }
  char v6 = *(unsigned char *)(a2 + 40);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  char v9 = *(unsigned char *)(a1 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = v6;
  outlined consume of Text.Storage(v7, v8, v9);
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
LABEL_6:
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

void *type metadata accessor for Image.CGImageProvider()
{
  return &unk_26FA7D3C0;
}

CGColorSpaceRef one-time initialization function for sRGB()
{
  CGColorSpaceRef result = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x263F002D8]);
  if (result) {
    static CGImageRef.sRGB = (uint64_t)result;
  }
  else {
    __break(1u);
  }
  return result;
}

uint64_t sub_245DDB2E8()
{
  return swift_deallocObject();
}

ValueMetadata *type metadata accessor for Text.Effect.Markers()
{
  return &type metadata for Text.Effect.Markers;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in Text.Effect.Markers()
{
  return lazy protocol witness table accessor for type IndexingIterator<Text.Effect.Markers> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type IndexingIterator<Text.Effect.Markers> and conformance IndexingIterator<A>, &lazy cache variable for type metadata for IndexingIterator<Text.Effect.Markers>, MEMORY[0x263F8DE58]);
}

unint64_t lazy protocol witness table accessor for type Text.Effect.Markers and conformance Text.Effect.Markers()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.Markers and conformance Text.Effect.Markers;
  if (!lazy protocol witness table cache variable for type Text.Effect.Markers and conformance Text.Effect.Markers)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.Markers and conformance Text.Effect.Markers);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.Markers and conformance Text.Effect.Markers;
  if (!lazy protocol witness table cache variable for type Text.Effect.Markers and conformance Text.Effect.Markers)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.Markers and conformance Text.Effect.Markers);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.Markers and conformance Text.Effect.Markers;
  if (!lazy protocol witness table cache variable for type Text.Effect.Markers and conformance Text.Effect.Markers)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.Markers and conformance Text.Effect.Markers);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.Markers and conformance Text.Effect.Markers;
  if (!lazy protocol witness table cache variable for type Text.Effect.Markers and conformance Text.Effect.Markers)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.Markers and conformance Text.Effect.Markers);
  }
  return result;
}

uint64_t Text.Effect.Markers.layoutInfo(for:glyphOrigin:metrics:layoutAttributedString:)(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v67 = a3;
  uint64_t v73 = a2;
  uint64_t v88 = *MEMORY[0x263EF8340];
  type metadata accessor for Text.Effect.InteractionMetrics?(0);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = type metadata accessor for Text.Effect.InteractionMetrics();
  MEMORY[0x270FA5388](v70);
  long long v63 = *(_OWORD *)a1;
  int v62 = *((unsigned __int8 *)a1 + 16);
  double v11 = a1[4];
  uint64_t v61 = *((void *)a1 + 3);
  int v60 = *((_DWORD *)a1 + 10);
  uint64_t v57 = MEMORY[0x263F8EE78];
  uint64_t v80 = MEMORY[0x263F8EE78];
  uint64_t v59 = *(void *)(a4 + 16);
  if (v59)
  {
    uint64_t v66 = (uint64_t)v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v58 = a4 + 32;
    CGFloat v72 = (unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
    CGFloat v71 = v85;
    v56[1] = a4;
    swift_bridgeObjectRetain();
    uint64_t v12 = 0;
    while (1)
    {
      uint64_t v13 = v58 + 32 * v12;
      uint64_t v14 = *(void *)v13;
      char v15 = *(unsigned char *)(v13 + 8);
      CFIndex v16 = *(void *)(v13 + 16);
      CFIndex v17 = *(void *)(v13 + 24);
      long long v83 = v63;
      LOBYTE(v84) = v62;
      *((void *)&v84 + 1) = v61;
      *(double *)uint64_t v85 = v11;
      DWORD2(v85[0]) = v60;
      outlined copy of Text.Effect.Markers.MarkerType(v14, v15);
      CFIndex v18 = Text.Layout.Line.xranges(range:)(v16, v17);
      int64_t v19 = *(void *)(v18 + 16);
      if (v19) {
        break;
      }
      swift_bridgeObjectRelease();
      outlined consume of Text.Effect.Markers.MarkerType(v14, v15);
      uint64_t v25 = MEMORY[0x263F8EE78];
LABEL_3:
      ++v12;
      specialized Array.append<A>(contentsOf:)(v25);
      if (v12 == v59)
      {
        swift_bridgeObjectRelease();
        return v80;
      }
    }
    uint64_t v77 = v14;
    uint64_t v65 = v12;
    BOOL v20 = v17 != v16;
    if (!__OFSUB__(v17, 1)) {
      BOOL v20 = 0;
    }
    BOOL v69 = v20;
    uint64_t v68 = v17 - v16;
    uint64_t v79 = MEMORY[0x263F8EE78];
    BOOL v21 = __OFSUB__(v17, v16);
    BOOL v75 = v21;
    if (v17 == v16) {
      CFIndex v22 = v17;
    }
    else {
      CFIndex v22 = v17 - 1;
    }
    CFIndex v23 = v18;
    int64_t v74 = v19;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19, 0);
    uint64_t v24 = 0;
    uint64_t v25 = v79;
    CFIndex v64 = v23;
    CFIndex v76 = v23 + 32;
    uint64_t v26 = v70;
    while (1)
    {
      uint64_t v27 = (double *)(v76 + 16 * v24);
      double v28 = *v27;
      double v29 = v27[1];
      outlined init with copy of Text.Effect.InteractionMetrics?(v73, (uint64_t)v8);
      if ((*v72)(v8, 1, v26) == 1)
      {
        outlined destroy of Text.Effect.InteractionMetrics((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for Text.Effect.InteractionMetrics?);
        double v30 = v29;
        double v31 = v28;
        if (v15) {
          goto LABEL_16;
        }
        goto LABEL_49;
      }
      uint64_t v32 = v66;
      outlined init with take of Text.Effect.InteractionMetrics((uint64_t)v8, v66);
      uint64_t v33 = *(void *)v32;
      uint64_t v34 = *(void *)(*(void *)v32 + 16);
      if (v34) {
        break;
      }
LABEL_26:
      char v38 = (double *)(v32 + *(int *)(v26 + 28));
      double v39 = *v38;
      if (v34 && v39 == 0.0 && v38[1] == 0.0)
      {
        uint64_t v35 = (double *)(v33 + 96 * v34 - 48);
LABEL_30:
        double v39 = *v35;
      }
      if (v75)
      {
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
      }
      if (v69) {
        goto LABEL_59;
      }
      if (v34)
      {
        uint64_t v40 = (double *)(v33 + 88);
        uint64_t v41 = *(void *)(*(void *)v32 + 16);
        while (v22 < *((void *)v40 - 7) || v22 >= *((void *)v40 - 6))
        {
          v40 += 12;
          if (!--v41) {
            goto LABEL_40;
          }
        }
        double v44 = *(v40 - 5);
        if (v17 != v16) {
          double v44 = v44 - *v40 + v40[4];
        }
      }
      else
      {
LABEL_40:
        uint64_t v43 = (double *)(v32 + *(int *)(v26 + 28));
        double v44 = *v43;
        if (v34 && v44 == 0.0 && v43[1] == 0.0) {
          double v44 = *(double *)(v33 + 96 * v34 - 48);
        }
      }
      double v31 = v28 + v39;
      outlined destroy of Text.Effect.InteractionMetrics(v32, (uint64_t (*)(void))type metadata accessor for Text.Effect.InteractionMetrics);
      double v30 = v29 + v44;
      if (v15)
      {
LABEL_16:
        double v78 = 0.0;
        if (v75) {
          goto LABEL_58;
        }
        if ((id)_NSTextCorrectionMarkerRenderingAdjustment(v67, v16, v68, (uint64_t)&v78))
        {
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
        }
        else
        {
          memset(v81, 0, sizeof(v81));
        }
        uint64_t v26 = v70;
        outlined init with take of Any?((uint64_t)v81, (uint64_t)v82);
        double v45 = v11 + v78;
        goto LABEL_50;
      }
LABEL_49:
      memset(v82, 0, sizeof(v82));
      double v45 = v11;
LABEL_50:
      uint64_t v46 = v77;
      *(void *)&long long v83 = v77;
      BYTE8(v83) = v15;
      *(void *)&long long v84 = v16;
      *((void *)&v84 + 1) = v17;
      CFIndex v47 = v17;
      outlined init with take of Any?((uint64_t)v82, (uint64_t)v71);
      *(double *)&long long v86 = v30 - v31;
      *((double *)&v86 + 1) = v29 - v28;
      *(double *)&long long v87 = v31;
      *((double *)&v87 + 1) = v45;
      outlined copy of Text.Effect.Markers.MarkerType(v46, v15);
      uint64_t v79 = v25;
      unint64_t v49 = *(void *)(v25 + 16);
      unint64_t v48 = *(void *)(v25 + 24);
      if (v49 >= v48 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v48 > 1, v49 + 1, 1);
        uint64_t v26 = v70;
        uint64_t v25 = v79;
      }
      ++v24;
      *(void *)(v25 + 16) = v49 + 1;
      uint64_t v50 = (_OWORD *)(v25 + 96 * v49);
      long long v51 = v84;
      long long v50[2] = v83;
      v50[3] = v51;
      long long v52 = v85[0];
      long long v53 = v85[1];
      long long v54 = v87;
      v50[6] = v86;
      v50[7] = v54;
      v50[4] = v52;
      v50[5] = v53;
      CFIndex v17 = v47;
      if (v24 == v74)
      {
        swift_bridgeObjectRelease();
        outlined consume of Text.Effect.Markers.MarkerType(v77, v15);
        uint64_t v12 = v65;
        goto LABEL_3;
      }
    }
    uint64_t v35 = (double *)(v33 + 48);
    uint64_t v36 = *(void *)(*(void *)v32 + 16);
    while (v16 < *((void *)v35 - 2) || v16 >= *((void *)v35 - 1))
    {
      v35 += 12;
      if (!--v36) {
        goto LABEL_26;
      }
    }
    goto LABEL_30;
  }
  return v57;
}

double Text.Effect.MarkerLayoutInfo.rect(for:with:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v5 = Text.Effect.MarkerLayoutInfo.filter(by:)(a1, a2, a3);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 + 16);
  if (v7)
  {
    outlined init with copy of Text.Effect.MarkerLayoutInfo.Element(v5 + 32, (uint64_t)v14);
    outlined init with copy of Text.Effect.MarkerLayoutInfo.Element(v6 + 32 + 96 * v7 - 96, (uint64_t)v9);
    swift_bridgeObjectRelease();
    if (*((void *)&v10 + 1) == 1)
    {
      outlined destroy of Text.Effect.MarkerLayoutInfo.Element((uint64_t)v14);
      outlined destroy of NamedImage.Cache.WeakCatalog?((uint64_t)v9, &lazy cache variable for type metadata for Text.Effect.MarkerLayoutInfo.Element?);
    }
    else
    {
      void v13[4] = v11;
      v13[5] = v12;
      _OWORD v13[2] = v9[2];
      v13[3] = v10;
      v13[0] = v9[0];
      v13[1] = v9[1];
      a4 = v15;
      outlined destroy of Text.Effect.MarkerLayoutInfo.Element((uint64_t)v13);
      outlined destroy of Text.Effect.MarkerLayoutInfo.Element((uint64_t)v14);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return a4;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Text.Effect.Markers.Marker(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t result = specialized static Text.Effect.Markers.MarkerType.== infix(_:_:)(*(void *)a1, *(unsigned char *)(a1 + 8), *(void *)a2, *(unsigned char *)(a2 + 8));
  if ((result & 1) == 0) {
    return 0;
  }
  if (__OFSUB__(v5, v3))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 != v3) {
    return 0;
  }
  if (!__OFSUB__(v4, v2)) {
    return v4 == v2;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t Dictionary<>.underlineStyle.getter(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    long long v7 = 0u;
    long long v8 = 0u;
    goto LABEL_10;
  }
  id v2 = (id)*MEMORY[0x263F815F8];
  uint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)(v2);
  if ((v4 & 1) == 0)
  {
    long long v7 = 0u;
    long long v8 = 0u;

    goto LABEL_10;
  }
  outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v3, (uint64_t)&v7);

  if (!*((void *)&v8 + 1))
  {
LABEL_10:
    outlined destroy of NamedImage.Cache.WeakCatalog?((uint64_t)&v7, (unint64_t *)&lazy cache variable for type metadata for Any?);
    return 0;
  }
  if (swift_dynamicCast()) {
    return v6;
  }
  else {
    return 0;
  }
}

uint64_t Dictionary<>.foregroundColor.getter(uint64_t a1, id *a2)
{
  if (!*(void *)(a1 + 16))
  {
    long long v8 = 0u;
    long long v9 = 0u;
    goto LABEL_9;
  }
  id v3 = *a2;
  uint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(v3);
  if ((v5 & 1) == 0)
  {
    long long v8 = 0u;
    long long v9 = 0u;

    goto LABEL_9;
  }
  outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v4, (uint64_t)&v8);

  if (!*((void *)&v9 + 1))
  {
LABEL_9:
    outlined destroy of NamedImage.Cache.WeakCatalog?((uint64_t)&v8, (unint64_t *)&lazy cache variable for type metadata for Any?);
    return 0;
  }
  type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  if (swift_dynamicCast()) {
    return v7;
  }
  else {
    return 0;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Text.Effect.Markers.MarkerType(uint64_t a1, uint64_t a2)
{
  return specialized static Text.Effect.Markers.MarkerType.== infix(_:_:)(*(void *)a1, *(unsigned char *)(a1 + 8), *(void *)a2, *(unsigned char *)(a2 + 8));
}

void closure #1 in Text.Effect.Markers.init(fragment:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (!a1) {
    return;
  }
  CFIndex v23 = a1;
  long long v10 = v23;
  long long v11 = NSTextRange.textRange.getter();
  if ((v13 & 1) != 0 || !a2)
  {
  }
  else
  {
    if (*(void *)(a2 + 16))
    {
      uint64_t v14 = -a3;
      if (__OFSUB__(0, a3))
      {
        __break(1u);
      }
      else
      {
        char v5 = &v11[-a3];
        if (!__OFADD__(v11, v14))
        {
          uint64_t v6 = v12 - a3;
          if (!__OFADD__(v12, v14))
          {
            if (v6 >= (uint64_t)v5)
            {
              long long v10 = a5 + 2;
              swift_beginAccess();
              a5 = (void *)a5[2];
              swift_bridgeObjectRetain();
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              *long long v10 = a5;
              if (isUniquelyReferenced_nonNull_native)
              {
LABEL_10:
                unint64_t v16 = a5[2];
                unint64_t v17 = a5[3];
                unint64_t v18 = v16 + 1;
                if (v16 >= v17 >> 1)
                {
                  BOOL v20 = a5;
                  unint64_t v21 = a5[2];
                  CFIndex v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v16 + 1, 1, v20);
                  unint64_t v16 = v21;
                  a5 = v22;
                  *long long v10 = v22;
                }
                a5[2] = v18;
                int64_t v19 = &a5[4 * v16];
                v19[4] = a2;
                *((unsigned char *)v19 + 40) = 0;
                double v19[6] = v5;
                v19[7] = v6;
                swift_endAccess();

                return;
              }
LABEL_24:
              a5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a5[2] + 1, 1, a5);
              *long long v10 = a5;
              goto LABEL_10;
            }
LABEL_23:
            __break(1u);
            goto LABEL_24;
          }
LABEL_22:
          __break(1u);
          goto LABEL_23;
        }
      }
      __break(1u);
      goto LABEL_22;
    }
    MEMORY[0x270F9A790](v11);
  }
}

void closure #2 in Text.Effect.Markers.init(fragment:)(int a1, int a2, void *a3, unsigned char *a4, uint64_t a5, uint64_t a6, uint64_t a7, void **a8)
{
  long long v11 = a3;
  id v12 = objc_msgSend(objc_msgSend(a3, sel_endLocation), sel_compare_, a5);
  swift_unknownObjectRelease();
  if ((unint64_t)v12 + 1 > 1)
  {
    *a4 = 1;
    return;
  }
  Class v13 = (Class)self;
  type metadata accessor for NSAttributedStringKey(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
  v14.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  id v15 = [(objc_class *)v13 textCorrectionMarkerTypeWithAttributes:v14.super.isa];

  if (v15 != (id)-1)
  {
    unint64_t v16 = NSTextRange.textRange.getter();
    if ((v18 & 1) == 0)
    {
      uint64_t v19 = -a6;
      if (__OFSUB__(0, a6))
      {
        __break(1u);
      }
      else
      {
        Class v13 = (Class)&v16[-a6];
        if (!__OFADD__(v16, v19))
        {
          v14.super.Class isa = (Class)(v17 - a6);
          if (!__OFADD__(v17, v19))
          {
            if ((uint64_t)v14.super.isa >= (uint64_t)v13)
            {
              swift_beginAccess();
              long long v11 = *a8;
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              *a8 = v11;
              if (isUniquelyReferenced_nonNull_native)
              {
LABEL_9:
                unint64_t v22 = v11[2];
                unint64_t v21 = v11[3];
                if (v22 >= v21 >> 1)
                {
                  long long v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v21 > 1), v22 + 1, 1, v11);
                  *a8 = v11;
                }
                void v11[2] = v22 + 1;
                CFIndex v23 = &v11[4 * v22];
                void v23[4] = v15;
                *((unsigned char *)v23 + 40) = 1;
                v23[6] = v13;
                v23[7] = v14.super.isa;
                swift_endAccess();
                return;
              }
LABEL_18:
              long long v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
              *a8 = v11;
              goto LABEL_9;
            }
LABEL_17:
            __break(1u);
            goto LABEL_18;
          }
LABEL_16:
          __break(1u);
          goto LABEL_17;
        }
      }
      __break(1u);
      goto LABEL_16;
    }
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Text.Effect.Markers(uint64_t *a1, uint64_t *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance Text.Effect.Markers@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  return protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance Text.Effect.Markers(a1, a2, a3, specialized RandomAccessCollection.index(_:offsetBy:limitedBy:), a4);
}

unsigned char *protocol witness for Collection.subscript.read in conformance Text.Effect.Markers(unsigned char *result, unint64_t *a2)
{
  unint64_t v3 = *a2;
  if ((*a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v3 < *(void *)(*(void *)v2 + 16))
  {
    uint64_t v4 = *(void *)v2 + 32 * v3;
    char v5 = *(unsigned char *)(v4 + 40);
    long long v6 = *(_OWORD *)(v4 + 48);
    *(void *)uint64_t result = *(void *)(v4 + 32);
    result[8] = v5;
    *((_OWORD *)result + 1) = v6;
    return _ViewInputs.base.modify;
  }
  __break(1u);
  return result;
}

void *protocol witness for Sequence._copyToContiguousArray() in conformance Text.Effect.Markers()
{
  uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance Text.Effect.Markers(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copyContents(initializing:)(a1, a2, a3, *v3);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in Text.Effect.Markers()
{
  return lazy protocol witness table accessor for type IndexingIterator<Text.Effect.Markers> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.Markers> and conformance Slice<A>, (unint64_t *)&lazy cache variable for type metadata for Slice<Text.Effect.Markers>, MEMORY[0x263F8E738]);
}

uint64_t lazy protocol witness table accessor for type IndexingIterator<Text.Effect.Markers> and conformance IndexingIterator<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for IndexingIterator<Text.Effect.Markers>(255, a2, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.Markers and conformance Text.Effect.Markers, (uint64_t)&type metadata for Text.Effect.Markers, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in Text.Effect.Markers()
{
  return lazy protocol witness table accessor for type Slice<Text.Effect.Markers> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.Markers> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.Markers and conformance Text.Effect.Markers);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in Text.Effect.Markers()
{
  return lazy protocol witness table accessor for type Slice<Text.Effect.Markers> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.Markers> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.Markers and conformance Text.Effect.Markers);
}

uint64_t lazy protocol witness table accessor for type Slice<Text.Effect.Markers> and conformance <> Slice<A>(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for IndexingIterator<Text.Effect.Markers>(255, (unint64_t *)&lazy cache variable for type metadata for Slice<Text.Effect.Markers>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.Markers and conformance Text.Effect.Markers, (uint64_t)&type metadata for Text.Effect.Markers, MEMORY[0x263F8E738]);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t Text.Effect.MarkerLayoutInfo.filter(by:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = MEMORY[0x263F8EE78];
  uint64_t v27 = MEMORY[0x263F8EE78];
  uint64_t v7 = *(void *)(a3 + 16);
  swift_bridgeObjectRetain();
  if (!v7)
  {
LABEL_20:
    swift_bridgeObjectRelease();
    return v6;
  }
  uint64_t v8 = a3 + 32;
  BOOL v9 = __OFSUB__(a2, a1);
  while (1)
  {
    uint64_t result = outlined init with copy of Text.Effect.MarkerLayoutInfo.Element(v8, (uint64_t)&v21);
    if ((uint64_t)v22 >= a2 || *((void *)&v22 + 1) <= a1) {
      goto LABEL_5;
    }
    if (__OFSUB__(*((void *)&v22 + 1), (void)v22)) {
      break;
    }
    if (*((void *)&v22 + 1) != (void)v22)
    {
      if (v9) {
        goto LABEL_22;
      }
      if (a2 != a1)
      {
        long long v17 = v23;
        long long v18 = v24;
        long long v19 = v25;
        long long v20 = v26;
        long long v15 = v21;
        long long v16 = v22;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v6 + 16) + 1, 1);
        }
        uint64_t v6 = v27;
        unint64_t v13 = *(void *)(v27 + 16);
        unint64_t v12 = *(void *)(v27 + 24);
        if (v13 >= v12 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
          uint64_t v6 = v27;
        }
        *(void *)(v6 + 16) = v13 + 1;
        NSDictionary v14 = (_OWORD *)(v6 + 96 * v13);
        void v14[4] = v17;
        v14[5] = v18;
        v14[6] = v19;
        v14[7] = v20;
        _OWORD v14[2] = v15;
        v14[3] = v16;
        goto LABEL_6;
      }
    }
LABEL_5:
    outlined destroy of Text.Effect.MarkerLayoutInfo.Element((uint64_t)&v21);
LABEL_6:
    v8 += 96;
    if (!--v7) {
      goto LABEL_20;
    }
  }
  __break(1u);
LABEL_22:
  __break(1u);
  return result;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance Text.Effect.MarkerLayoutInfo(uint64_t a1, void *a2))(void, void)
{
  if ((*a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*a2 < *(void *)(*(void *)v2 + 16))
  {
    return _ViewInputs.base.modify;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance Text.Effect.Markers@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t (*a4)(void, uint64_t, void, void)@<X5>, uint64_t a5@<X8>)
{
  uint64_t result = a4(*a1, a2, *a3, *v5);
  *(void *)a5 = result;
  *(unsigned char *)(a5 + 8) = v8 & 1;
  return result;
}

void *protocol witness for Sequence._copyToContiguousArray() in conformance Text.Effect.MarkerLayoutInfo()
{
  uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance Text.Effect.MarkerLayoutInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3);
}

uint64_t specialized static Text.Effect.Markers.MarkerType.== infix(_:_:)(uint64_t a1, char a2, uint64_t a3, unsigned __int8 a4)
{
  if (a2) {
    return a4 & (a1 == a3);
  }
  if (a4) {
    return 0;
  }
  outlined copy of Text.Effect.Markers.MarkerType(a1, 0);
  outlined copy of Text.Effect.Markers.MarkerType(a3, 0);
  specialized static Dictionary.Keys.== infix(_:_:)(a1, a3);
  char v8 = v7;
  outlined consume of Text.Effect.Markers.MarkerType(a3, 0);
  outlined consume of Text.Effect.Markers.MarkerType(a1, 0);
  uint64_t result = 0;
  if ((v8 & 1) == 0) {
    return result;
  }
  uint64_t v9 = Dictionary<>.underlineStyle.getter(a1);
  char v11 = v10;
  uint64_t v12 = Dictionary<>.underlineStyle.getter(a3);
  if (v11)
  {
    if ((v13 & 1) == 0) {
      return 0;
    }
  }
  else
  {
    uint64_t v14 = v12;
    uint64_t result = 0;
    if ((v13 & 1) != 0 || v9 != v14) {
      return result;
    }
  }
  long long v15 = (id *)MEMORY[0x263F81500];
  long long v16 = (void *)Dictionary<>.foregroundColor.getter(a1, MEMORY[0x263F81500]);
  uint64_t v17 = Dictionary<>.foregroundColor.getter(a3, v15);
  long long v18 = (void *)v17;
  if (v16)
  {
    if (!v17) {
      goto LABEL_25;
    }
    type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    id v19 = v16;
    char v20 = static NSObject.== infix(_:_:)();

    if ((v20 & 1) == 0) {
      return 0;
    }
  }
  else if (v17)
  {
    goto LABEL_21;
  }
  long long v21 = (id *)MEMORY[0x263F814F0];
  long long v16 = (void *)Dictionary<>.foregroundColor.getter(a1, MEMORY[0x263F814F0]);
  uint64_t v22 = Dictionary<>.foregroundColor.getter(a3, v21);
  long long v18 = (void *)v22;
  if (v16)
  {
    if (!v22) {
      goto LABEL_25;
    }
    type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    id v23 = v16;
    char v24 = static NSObject.== infix(_:_:)();

    if ((v24 & 1) == 0) {
      return 0;
    }
    goto LABEL_22;
  }
  if (v22)
  {
LABEL_21:

    return 0;
  }
LABEL_22:
  long long v25 = (id *)MEMORY[0x263F815F0];
  long long v16 = (void *)Dictionary<>.foregroundColor.getter(a1, MEMORY[0x263F815F0]);
  long long v26 = (void *)Dictionary<>.foregroundColor.getter(a3, v25);
  uint64_t v27 = v26;
  if (v16)
  {
    if (v26)
    {
      type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
      id v28 = v16;
      char v29 = static NSObject.== infix(_:_:)();

      return v29 & 1;
    }
LABEL_25:

    return 0;
  }
  if (v26)
  {

    return 0;
  }
  return 1;
}

uint64_t outlined init with copy of Text.Effect.InteractionMetrics?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Text.Effect.InteractionMetrics?(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Text.Effect.InteractionMetrics(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with take of Text.Effect.InteractionMetrics(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Text.Effect.InteractionMetrics();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void specialized Text.Effect.Markers.init(fragment:)(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = &_OBJC_LABEL_PROTOCOL____NSTextAnimatorStateSnapshot;
    id v3 = objc_msgSend(v1, sel_rangeInElement);
    uint64_t v4 = NSTextRange.textRange.getter();
    uint64_t v29 = v5;
    double v30 = v4;
    char v7 = v6;

    if (v7)
    {

      return;
    }
    id v8 = objc_msgSend(v1, sel_rangeInElement);
    id v9 = objc_msgSend(v8, sel_endLocation);

    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 16) = MEMORY[0x263F8EE78];
    uint64_t v11 = v10 + 16;
    id v12 = objc_msgSend(v1, sel_textLayoutManager);
    char v13 = (void *)&unk_2461BC000;
    if (!v12) {
      goto LABEL_17;
    }
    uint64_t v14 = v12;
    id v15 = objc_msgSend(v1, sel_textLineFragments);
    type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSTextLineFragment);
    unint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v16 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v17) {
        goto LABEL_6;
      }
    }
    else
    {
      uint64_t v17 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v17)
      {
LABEL_6:
        id v28 = v9;
        if (v17 < 1) {
          goto LABEL_23;
        }
        uint64_t v18 = 0;
        do
        {
          if ((v16 & 0xC000000000000001) != 0) {
            id v19 = (id)MEMORY[0x24C523D60](v18, v16);
          }
          else {
            id v19 = *(id *)(v16 + 8 * v18 + 32);
          }
          char v20 = v19;
          ++v18;
          long long v21 = (void *)swift_allocObject();
          v21[2] = v30;
          void v21[3] = v29;
          void v21[4] = v10;
          uint64_t v35 = partial apply for closure #1 in Text.Effect.Markers.init(fragment:);
          uint64_t v36 = v21;
          uint64_t aBlock = MEMORY[0x263EF8330];
          uint64_t v32 = 1107296256;
          uint64_t v33 = thunk for @escaping @callee_guaranteed (@guaranteed NSTextRange?, @guaranteed [NSAttributedStringKey : Any]?) -> ();
          uint64_t v34 = &block_descriptor_12_2;
          uint64_t v22 = _Block_copy(&aBlock);
          swift_retain();
          swift_release();
          _NSMarkedTextAttributes(v14, v20, v22);
          _Block_release(v22);
        }
        while (v17 != v18);

        swift_bridgeObjectRelease();
        id v9 = v28;
        uint64_t v2 = &_OBJC_LABEL_PROTOCOL____NSTextAnimatorStateSnapshot;
        goto LABEL_16;
      }
    }

    swift_bridgeObjectRelease();
LABEL_16:
    char v13 = &unk_2461BC000;
LABEL_17:
    id v23 = [v1 (SEL)v2[482]];
    id v24 = objc_msgSend(v23, sel_location);

    long long v25 = (void *)swift_allocObject();
    v25[2] = v9;
    v25[3] = v30;
    v25[4] = v29;
    void v25[5] = v11;
    uint64_t v26 = swift_allocObject();
    *(void *)(v26 + 16) = partial apply for closure #2 in Text.Effect.Markers.init(fragment:);
    *(void *)(v26 + 24) = v25;
    uint64_t v35 = partial apply for thunk for @callee_guaranteed (@guaranteed NSTextLayoutManager, @guaranteed [NSAttributedStringKey : Any], @guaranteed NSTextRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
    uint64_t v36 = (void *)v26;
    uint64_t aBlock = MEMORY[0x263EF8330];
    uint64_t v32 = v13[338];
    uint64_t v33 = thunk for @escaping @callee_guaranteed (@guaranteed NSTextLayoutManager, @guaranteed [NSAttributedStringKey : Any], @guaranteed NSTextRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
    uint64_t v34 = &block_descriptor_18;
    uint64_t v27 = _Block_copy(&aBlock);
    swift_unknownObjectRetain();
    swift_retain();
    swift_release();
    objc_msgSend(v1, sel_enumerateRenderingAttributesFromLocation_reverse_usingBlock_, v24, 0, v27);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

    _Block_release(v27);
    LOBYTE(v27) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v27 & 1) == 0)
    {
      swift_beginAccess();
      if (*(void *)(*(void *)v11 + 16))
      {
        swift_bridgeObjectRetain();
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        swift_release();
      }
      return;
    }
    __break(1u);
LABEL_23:
    __break(1u);
  }
}

uint64_t sub_245DDD108()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_245DDD140()
{
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

void partial apply for closure #2 in Text.Effect.Markers.init(fragment:)(int a1, int a2, void *a3, unsigned char *a4)
{
  closure #2 in Text.Effect.Markers.init(fragment:)(a1, a2, a3, a4, *(void *)(v4 + 16), *(void *)(v4 + 24), *(void *)(v4 + 32), *(void ***)(v4 + 40));
}

uint64_t sub_245DDD184()
{
  return swift_deallocObject();
}

uint64_t sub_245DDD1BC()
{
  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #1 in Text.Effect.Markers.init(fragment:)(void *a1, uint64_t a2)
{
  closure #1 in Text.Effect.Markers.init(fragment:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void **)(v2 + 32));
}

uint64_t destroy for Text.Effect.MarkerLayoutInfo.Element(uint64_t a1)
{
  uint64_t result = outlined consume of Text.Effect.Markers.MarkerType(*(void *)a1, *(unsigned char *)(a1 + 8));
  if (*(void *)(a1 + 56))
  {
    return __swift_destroy_boxed_opaque_existential_1(a1 + 32);
  }
  return result;
}

uint64_t initializeWithCopy for Text.Effect.MarkerLayoutInfo.Element(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Text.Effect.Markers.MarkerType(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  char v6 = (_OWORD *)(a1 + 32);
  char v7 = (_OWORD *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 56);
  if (v8)
  {
    *(void *)(a1 + 56) = v8;
    (**(void (***)(_OWORD *, _OWORD *))(v8 - 8))(v6, v7);
  }
  else
  {
    long long v9 = *(_OWORD *)(a2 + 48);
    *char v6 = *v7;
    *(_OWORD *)(a1 + 48) = v9;
  }
  long long v10 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v10;
  return a1;
}

uint64_t assignWithCopy for Text.Effect.MarkerLayoutInfo.Element(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Text.Effect.Markers.MarkerType(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of Text.Effect.Markers.MarkerType(v6, v7);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 56);
  if (!*(void *)(a1 + 56))
  {
    if (v8)
    {
      *(void *)(a1 + 56) = v8;
      (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 32, a2 + 32);
      goto LABEL_8;
    }
LABEL_7:
    long long v9 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v9;
    goto LABEL_8;
  }
  if (!v8)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 32);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)(a1 + 32), (uint64_t *)(a2 + 32));
LABEL_8:
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  return a1;
}

uint64_t assignWithTake for Text.Effect.MarkerLayoutInfo.Element(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  char v5 = *((unsigned char *)a2 + 8);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of Text.Effect.Markers.MarkerType(v6, v7);
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  if (*(void *)(a1 + 56)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 32);
  }
  long long v8 = *((_OWORD *)a2 + 3);
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 48) = v8;
  long long v9 = *((_OWORD *)a2 + 5);
  *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
  *(_OWORD *)(a1 + 80) = v9;
  return a1;
}

uint64_t getEnumTagSinglePayload for Text.Effect.MarkerLayoutInfo.Element(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 96)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 56);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Text.Effect.MarkerLayoutInfo.Element(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 96) = 0;
    }
    if (a2) {
      *(void *)(result + 56) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.MarkerLayoutInfo.Element()
{
  return &type metadata for Text.Effect.MarkerLayoutInfo.Element;
}

uint64_t initializeWithCopy for Text.Effect.Markers.Marker(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Text.Effect.Markers.MarkerType(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  return a1;
}

uint64_t assignWithCopy for Text.Effect.Markers.Marker(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Text.Effect.Markers.MarkerType(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of Text.Effect.Markers.MarkerType(v6, v7);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for Text.Effect.Markers.Marker(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  char v5 = *((unsigned char *)a2 + 8);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of Text.Effect.Markers.MarkerType(v6, v7);
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  return a1;
}

uint64_t getEnumTagSinglePayload for Text.Effect.Markers.Marker(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Text.Effect.Markers.Marker(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.Markers.Marker()
{
  return &type metadata for Text.Effect.Markers.Marker;
}

uint64_t initializeBufferWithCopyOfBuffer for Text.Effect.Markers.MarkerType(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  outlined copy of Text.Effect.Markers.MarkerType(*(void *)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

uint64_t destroy for Text.Effect.Markers.MarkerType(uint64_t a1)
{
  return outlined consume of Text.Effect.Markers.MarkerType(*(void *)a1, *(unsigned char *)(a1 + 8));
}

uint64_t assignWithCopy for Text.Effect.Markers.MarkerType(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  outlined copy of Text.Effect.Markers.MarkerType(*(void *)a2, v4);
  uint64_t v5 = *(void *)a1;
  char v6 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  outlined consume of Text.Effect.Markers.MarkerType(v5, v6);
  return a1;
}

uint64_t assignWithTake for Text.Effect.Markers.MarkerType(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  char v4 = *((unsigned char *)a2 + 8);
  uint64_t v5 = *(void *)a1;
  char v6 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  outlined consume of Text.Effect.Markers.MarkerType(v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for Text.Effect.Markers.MarkerType()
{
  return &type metadata for Text.Effect.Markers.MarkerType;
}

ValueMetadata *type metadata accessor for Text.Effect.MarkerLayoutInfo()
{
  return &type metadata for Text.Effect.MarkerLayoutInfo;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in Text.Effect.MarkerLayoutInfo()
{
  return lazy protocol witness table accessor for type IndexingIterator<Text.Effect.MarkerLayoutInfo> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type IndexingIterator<Text.Effect.MarkerLayoutInfo> and conformance IndexingIterator<A>, &lazy cache variable for type metadata for IndexingIterator<Text.Effect.MarkerLayoutInfo>, MEMORY[0x263F8DE58]);
}

unint64_t lazy protocol witness table accessor for type Text.Effect.MarkerLayoutInfo and conformance Text.Effect.MarkerLayoutInfo()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.MarkerLayoutInfo and conformance Text.Effect.MarkerLayoutInfo;
  if (!lazy protocol witness table cache variable for type Text.Effect.MarkerLayoutInfo and conformance Text.Effect.MarkerLayoutInfo)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.MarkerLayoutInfo and conformance Text.Effect.MarkerLayoutInfo);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.MarkerLayoutInfo and conformance Text.Effect.MarkerLayoutInfo;
  if (!lazy protocol witness table cache variable for type Text.Effect.MarkerLayoutInfo and conformance Text.Effect.MarkerLayoutInfo)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.MarkerLayoutInfo and conformance Text.Effect.MarkerLayoutInfo);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.MarkerLayoutInfo and conformance Text.Effect.MarkerLayoutInfo;
  if (!lazy protocol witness table cache variable for type Text.Effect.MarkerLayoutInfo and conformance Text.Effect.MarkerLayoutInfo)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.MarkerLayoutInfo and conformance Text.Effect.MarkerLayoutInfo);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.MarkerLayoutInfo and conformance Text.Effect.MarkerLayoutInfo;
  if (!lazy protocol witness table cache variable for type Text.Effect.MarkerLayoutInfo and conformance Text.Effect.MarkerLayoutInfo)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.MarkerLayoutInfo and conformance Text.Effect.MarkerLayoutInfo);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in Text.Effect.MarkerLayoutInfo()
{
  return lazy protocol witness table accessor for type IndexingIterator<Text.Effect.MarkerLayoutInfo> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.MarkerLayoutInfo> and conformance Slice<A>, &lazy cache variable for type metadata for Slice<Text.Effect.MarkerLayoutInfo>, MEMORY[0x263F8E738]);
}

uint64_t lazy protocol witness table accessor for type IndexingIterator<Text.Effect.MarkerLayoutInfo> and conformance IndexingIterator<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for IndexingIterator<Text.Effect.Markers>(255, a2, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.MarkerLayoutInfo and conformance Text.Effect.MarkerLayoutInfo, (uint64_t)&type metadata for Text.Effect.MarkerLayoutInfo, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for IndexingIterator<Text.Effect.Markers>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in Text.Effect.MarkerLayoutInfo()
{
  return lazy protocol witness table accessor for type Slice<Text.Effect.MarkerLayoutInfo> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.MarkerLayoutInfo> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.MarkerLayoutInfo and conformance Text.Effect.MarkerLayoutInfo);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in Text.Effect.MarkerLayoutInfo()
{
  return lazy protocol witness table accessor for type Slice<Text.Effect.MarkerLayoutInfo> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.MarkerLayoutInfo> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.MarkerLayoutInfo and conformance Text.Effect.MarkerLayoutInfo);
}

uint64_t lazy protocol witness table accessor for type Slice<Text.Effect.MarkerLayoutInfo> and conformance <> Slice<A>(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for IndexingIterator<Text.Effect.Markers>(255, &lazy cache variable for type metadata for Slice<Text.Effect.MarkerLayoutInfo>, (uint64_t (*)(void))lazy protocol witness table accessor for type Text.Effect.MarkerLayoutInfo and conformance Text.Effect.MarkerLayoutInfo, (uint64_t)&type metadata for Text.Effect.MarkerLayoutInfo, MEMORY[0x263F8E738]);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _FillMaskEffect.style.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t _FillMaskEffect.style.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*_FillMaskEffect.style.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t static _FillMaskEffect._makeView(modifier:inputs:body:)@<X0>(int *a1@<X0>, long long *a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, long long *)@<X2>, uint64_t a4@<X3>, ValueMetadata *a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  void (*v33)(uint64_t *__return_ptr, uint64_t, long long *);
  int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t KeyPath;
  int v40;
  uint64_t v41;
  uint64_t v42;
  long long v43;
  uint64_t v44;
  unsigned __int8 v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  int *v52;
  int OffsetAttribute2;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  long long v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  int v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  unsigned int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  long long v73;
  uint64_t v74;
  unsigned __int8 v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  unsigned int v81;
  long long v82;
  long long v83;
  long long v84;
  long long v85;
  int v86;
  unsigned int v87;
  uint64_t v88;
  int v89;
  int v90;
  unint64_t v91;
  unint64_t v92;
  long long v93;
  int v94;
  unint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  unsigned int v100;
  unsigned int v101;
  uint64_t result;
  void *v103;
  void (*v104)(long long *, void);
  uint64_t v105;
  uint64_t v106;
  uint64_t WitnessTable;
  int v108;
  long long v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  ValueMetadata *v116;
  uint64_t v117;
  void *v118;
  long long v119;
  long long v120;
  uint64_t v121;
  uint64_t v122;
  long long v123;
  void (*v124)(uint64_t *__return_ptr, uint64_t, long long *);
  int *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  long long v130;
  char v131;
  uint64_t v132;
  uint64_t v133;
  _DWORD v134[6];
  long long v135;
  long long v136;
  long long v137;
  int v138;
  uint64_t v139;
  long long v140;
  long long v141;
  long long v142;
  long long v143;
  long long v144;
  int v145;
  long long v146;
  long long v147;
  long long v148;
  long long v149;
  long long v150;
  int v151;
  long long v152;
  long long v153;
  long long v154;
  uint64_t v155;

  CFIndex v115 = a6;
  double v118 = a7;
  uint64_t v155 = *MEMORY[0x263EF8340];
  long long v114 = *a1;
  double v151 = *((_DWORD *)a2 + 20);
  long long v7 = a2[4];
  long long v8 = a2[2];
  v149 = a2[3];
  v150 = v7;
  long long v9 = *a2;
  char v147 = a2[1];
  v148 = v8;
  uint64_t v146 = v9;
  uint64_t v10 = *(void *)(v149 + 16);
  uint64_t v128 = v149;
  uint64_t v116 = a5;
  uint64_t v124 = a3;
  *(void *)&Swift::Int v123 = a4;
  if (v10)
  {
    uint64_t v11 = (ValueMetadata **)(v149 + 32);
    uint64_t v12 = v10 - 1;
    do
    {
      char v13 = *v11;
      v11 += 2;
      BOOL v14 = v13 == &type metadata for DisplayList.Key;
    }
    while (v13 != &type metadata for DisplayList.Key && v12-- != 0);
  }
  else
  {
    BOOL v14 = 0;
  }
  long long v16 = a2[2];
  long long v17 = *a2;
  double v153 = a2[1];
  double v154 = v16;
  double v152 = v17;
  int v18 = v16;
  uint64_t v19 = v153;
  uint64_t v20 = *((void *)&v147 + 1);
  LODWORD(v119) = DWORD2(v146);
  LODWORD(v125) = v148;
  uint64_t v126 = *((void *)&v148 + 1);
  uint64_t v127 = v146;
  uint64_t v21 = *((void *)&v149 + 1);
  LODWORD(v122) = DWORD1(v148);
  LODWORD(v121) = v150;
  uint64_t v22 = *((void *)&v150 + 1);
  *(void *)&double v130 = DWORD1(v150);
  LODWORD(v120) = v151;
  swift_beginAccess();
  LODWORD(v140) = *(_DWORD *)(v19 + 16);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  outlined retain of _ViewInputs((uint64_t)&v146);
  lazy protocol witness table accessor for type MaskDefaultForeground and conformance MaskDefaultForeground();
  int v23 = Attribute.init<A>(body:value:flags:update:)();
  uint64_t v24 = MEMORY[0x263F8EE78];
  unint64_t v25 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  _s7SwiftUI10MutableBoxCyAA17CachedEnvironmentVGMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(void, uint64_t))type metadata accessor for MutableBox);
  uint64_t v26 = swift_allocObject();
  *(_DWORD *)(v26 + 16) = v23;
  *(void *)(v26 + 24) = v24;
  *(_OWORD *)(v26 + 32) = 0u;
  *(_OWORD *)(v26 + 48) = 0u;
  *(_OWORD *)(v26 + 64) = 0u;
  *(_WORD *)(v26 + 80) = 256;
  double v129 = v26;
  *(void *)(v26 + 88) = v25;
  unsigned __int8 v117 = v19;
  swift_release();
  if ((v18 & 0x20) != 0) {
    int v27 = (int)v125;
  }
  else {
    int v27 = v18 | 0x20;
  }
  unint64_t v125 = (int *)(v19 + 16);
  if (!v14)
  {
    uint64_t v30 = v127;
    uint64_t v29 = v128;
    uint64_t v31 = v126;
    uint64_t v32 = v129;
    uint64_t v33 = v124;
    goto LABEL_31;
  }
  swift_beginAccess();
  if ((BYTE4(v154) & 0x20) != 0)
  {
    int v112 = v147;
    int v113 = v146;
    uint64_t v34 = DWORD2(v146);
    uint64_t v35 = DWORD2(v147);
    uint64_t v36 = v148;
    Swift::UInt64 v110 = v149;
    CFIndex v111 = *((void *)&v148 + 1);
    char v37 = *((void *)&v149 + 1);
    *(void *)&long long v28 = v150;
    double v130 = v28;
    *(void *)&long long v28 = *((void *)&v150 + 1);
    long long v109 = v28;
    CGFloat v143 = v149;
    uint64_t v144 = v150;
    long long v108 = v151;
    uint64_t v145 = v151;
    CGFloat v140 = v146;
    CGFloat v141 = v147;
    CGFloat v142 = v148;
    outlined retain of _ViewInputs((uint64_t)&v146);
    char v38 = _ViewInputs.geometryTransaction()();
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v40 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
    swift_release();
    uint64_t v41 = v117;
    if ((*(unsigned char *)(v117 + 81) & 1) == 0
      && v130 == *(_DWORD *)(v117 + 32)
      && __PAIR64__(v40, v109) == *(void *)(v117 + 36)
      && v34 == *(_DWORD *)(v117 + 44)
      && v38 == *(_DWORD *)(v117 + 48)
      && v35 == *(_DWORD *)(v117 + 52))
    {
      if ((*(unsigned char *)(v117 + 64) & 1) == 0)
      {
        uint64_t v42 = *(unsigned int *)(v117 + 60);
LABEL_28:
        *(void *)&double v130 = v42;
        goto LABEL_29;
      }
    }
    else
    {
      *(void *)&CGFloat v140 = v113;
      *(void *)&CGFloat v141 = v112;
      DWORD2(v140) = v34;
      *((void *)&v141 + 1) = __PAIR64__(v38, v35);
      *(void *)&CGFloat v142 = v36;
      *((void *)&v142 + 1) = v111;
      *(void *)&CGFloat v143 = v110;
      *((void *)&v143 + 1) = v37;
      *(void *)&uint64_t v144 = v130;
      *((void *)&v144 + 1) = v109;
      uint64_t v145 = v108;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v140, v40, (uint64_t)&v135);
      uint64_t v41 = v117;
      uint64_t v43 = v136;
      double v44 = v137;
      double v45 = v138;
      uint64_t v46 = v137 | ((unint64_t)DWORD1(v137) << 32);
      CFIndex v47 = BYTE8(v137) | ((unint64_t)HIDWORD(v137) << 32);
      *(_OWORD *)(v117 + 32) = v135;
      *(_OWORD *)(v41 + 48) = v43;
      *(void *)(v41 + 64) = v46;
      *(void *)(v41 + 72) = v47;
      *(_WORD *)(v41 + 80) = v45;
      if (v44 != 1)
      {
        uint64_t v42 = HIDWORD(*((void *)&v43 + 1));
        goto LABEL_28;
      }
    }
    unint64_t v48 = v41;
    *(void *)&double v130 = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v48 + 60) = v130;
    *(unsigned char *)(v48 + 64) = 0;
LABEL_29:
    uint64_t v30 = v127;
    uint64_t v29 = v128;
    uint64_t v31 = v126;
    uint64_t v32 = v129;
    uint64_t v33 = v124;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    goto LABEL_30;
  }
  *(void *)&double v130 = v150;
  uint64_t v30 = v127;
  uint64_t v29 = v128;
  uint64_t v31 = v126;
  uint64_t v32 = v129;
  uint64_t v33 = v124;
LABEL_30:
  swift_endAccess();
LABEL_31:
  *(void *)&CGFloat v140 = v30;
  *(void *)&CGFloat v141 = v32;
  *((void *)&v141 + 1) = v20;
  DWORD2(v140) = v119;
  *(void *)&CGFloat v142 = __PAIR64__(v122, v27);
  *((void *)&v142 + 1) = v31;
  *(void *)&CGFloat v143 = v29;
  *((void *)&v143 + 1) = v21;
  *(void *)&uint64_t v144 = __PAIR64__(v130, v121);
  *((void *)&v144 + 1) = v22;
  uint64_t v145 = v120;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  unint64_t v49 = swift_bridgeObjectRetain();
  v33(&v132, v49, &v140);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (!v10)
  {
LABEL_35:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_74:
    swift_release();
    uint64_t result = swift_release();
    long long v103 = v118;
    *double v118 = v132;
    v103[1] = v133;
    return result;
  }
  uint64_t v50 = 32;
  long long v51 = v125;
  while (*(ValueMetadata **)(v29 + v50) != &type metadata for DisplayList.Key)
  {
    v50 += 16;
    if (!--v10) {
      goto LABEL_35;
    }
  }
  long long v52 = (int *)MEMORY[0x263F288F8];
  if (v116 == &type metadata for ForegroundStyle)
  {
    CGFloat v143 = v149;
    uint64_t v144 = v150;
    uint64_t v145 = v151;
    CGFloat v140 = v146;
    CGFloat v141 = v147;
    CGFloat v142 = v148;
    LOBYTE(v134[0]) = 0;
    swift_beginAccess();
    double v131 = 1;
    LODWORD(v124) = CachedEnvironment.resolvedShapeStyles(for:role:mode:)((uint64_t)&v140, (unsigned __int8 *)v134, 0x100000000);
    swift_endAccess();
  }
  else
  {
    if (*((void *)v116[-1].Description + 8)) {
      closure #1 in static _FillMaskEffect._makeView(modifier:inputs:body:)(1, (uint64_t)v116);
    }
    int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    long long v54 = *v51;
    LOBYTE(v134[0]) = 0;
    *(void *)&uint64_t v135 = __PAIR64__(DWORD2(v152), DWORD2(v153));
    DWORD2(v135) = HIDWORD(v153);
    CGFloat v136 = 0uLL;
    LODWORD(v137) = 0;
    ShapeStyleResolver.init(style:mode:environment:role:animationsDisabled:helper:)(OffsetAttribute2, *v52, v54, (char *)v134, BYTE4(v154) & 1, (uint64_t)&v135, (uint64_t)&v140);
    DWORD2(v135) = DWORD2(v140);
    *(void *)&uint64_t v135 = v140;
    WORD6(v135) = WORD6(v140);
    *(void *)&CGFloat v136 = v141;
    DWORD2(v136) = DWORD2(v141);
    CGFloat v137 = v142;
    CGFloat v138 = v143;
    CGFloat v139 = *((void *)&v143 + 1);
    MEMORY[0x270FA5388](v55);
    long long v106 = type metadata accessor for ShapeStyleResolver();
    uint64_t WitnessTable = swift_getWitnessTable();
    _s7SwiftUI10MutableBoxCyAA17CachedEnvironmentVGMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<_ShapeStyle_Pack>, (uint64_t)&type metadata for _ShapeStyle_Pack, MEMORY[0x263F28898]);
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v135, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_5, (uint64_t)&v105, v106, MEMORY[0x263F8E628], v56, MEMORY[0x263F8E658], v57);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    LODWORD(v124) = v134[0];
    AGGraphSetFlags();
  }
  LODWORD(v130) = ++lastIdentity;
  uint64_t v58 = BYTE4(v154);
  if ((WORD2(v154) & 0x100) == 0)
  {
LABEL_42:
    swift_beginAccess();
    if ((v58 & 0x20) == 0)
    {
      int v60 = v150;
      uint64_t v61 = AGGraphCreateOffsetAttribute2();
LABEL_67:
      swift_endAccess();
      uint64_t v94 = *v125;
      *(void *)&CGFloat v140 = v132;
      DWORD2(v140) = v133;
      uint64_t v95 = PreferencesOutputs.subscript.getter((uint64_t)&type metadata for DisplayList.Key);
      if ((v95 & 0x100000000) != 0) {
        unint64_t v96 = *MEMORY[0x263F288F8];
      }
      else {
        unint64_t v96 = v95;
      }
      uint64_t v97 = v152;
      *(void *)&uint64_t v135 = v152;
      outlined retain of _ViewInputs((uint64_t)&v146);
      outlined retain of _GraphInputs((uint64_t)&v152);
      outlined retain of ViewTransform((uint64_t)&v135);
      double v98 = specialized find<A>(_:key:)(v97);
      if (v98) {
        uint64_t v99 = *(unsigned char *)(v98 + 72);
      }
      else {
        uint64_t v99 = 0;
      }
      double v100 = DWORD1(v150);
      outlined release of ViewTransform((uint64_t)&v135);
      outlined release of _GraphInputs((uint64_t)&v152);
      outlined release of _ViewInputs((uint64_t)&v146);
      *(void *)&CGFloat v140 = __PAIR64__(v124, v130);
      *((void *)&v140 + 1) = __PAIR64__(v61, v60);
      *(void *)&CGFloat v141 = __PAIR64__(v94, v100);
      DWORD2(v141) = v96;
      BYTE12(v141) = v99;
      HIWORD(v141) = 0;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      lazy protocol witness table accessor for type FillMaskDisplayList and conformance FillMaskDisplayList();
      double v101 = Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v140) = 0;
      PreferencesOutputs.subscript.setter(v101, &type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_74;
    }
    int v62 = v146;
    long long v63 = DWORD2(v146);
    CFIndex v64 = DWORD2(v147);
    uint64_t v65 = v148;
    uint64_t v66 = v149;
    CGFloat v121 = *((void *)&v148 + 1);
    uint64_t v122 = v147;
    uint64_t v67 = *((void *)&v149 + 1);
    *(void *)&uint64_t v59 = v150;
    Swift::Int v123 = v59;
    *(void *)&uint64_t v59 = *((void *)&v150 + 1);
    uint64_t v120 = v59;
    uint64_t v68 = v151;
    CGFloat v143 = v149;
    uint64_t v144 = v150;
    uint64_t v145 = v151;
    CGFloat v140 = v146;
    CGFloat v141 = v147;
    CGFloat v142 = v148;
    outlined retain of _ViewInputs((uint64_t)&v146);
    BOOL v69 = _ViewInputs.geometryTransaction()();
    uint64_t v70 = swift_getKeyPath();
    CGFloat v71 = specialized CachedEnvironment.attribute<A>(keyPath:)(v70);
    swift_release();
    CGFloat v72 = v117;
    if ((*(unsigned char *)(v117 + 81) & 1) == 0
      && v123 == *(_DWORD *)(v117 + 32)
      && __PAIR64__(v71, v120) == *(void *)(v117 + 36)
      && v63 == *(_DWORD *)(v117 + 44)
      && v69 == *(_DWORD *)(v117 + 48)
      && v64 == *(_DWORD *)(v117 + 52))
    {
      if (*(unsigned char *)(v117 + 64)) {
        goto LABEL_53;
      }
      double v78 = *(unsigned int *)(v117 + 60);
    }
    else
    {
      *(void *)&CGFloat v140 = v62;
      *(void *)&CGFloat v141 = v122;
      DWORD2(v140) = v63;
      *((void *)&v141 + 1) = __PAIR64__(v69, v64);
      *(void *)&CGFloat v142 = v65;
      *((void *)&v142 + 1) = v121;
      *(void *)&CGFloat v143 = v66;
      *((void *)&v143 + 1) = v67;
      *(void *)&uint64_t v144 = v123;
      *((void *)&v144 + 1) = v120;
      uint64_t v145 = v68;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v140, v71, (uint64_t)&v135);
      CGFloat v72 = v117;
      uint64_t v73 = v136;
      int64_t v74 = v137;
      BOOL v75 = v138;
      CFIndex v76 = v137 | ((unint64_t)DWORD1(v137) << 32);
      uint64_t v77 = BYTE8(v137) | ((unint64_t)HIDWORD(v137) << 32);
      *(_OWORD *)(v117 + 32) = v135;
      *(_OWORD *)(v72 + 48) = v73;
      *(void *)(v72 + 64) = v76;
      *(void *)(v72 + 72) = v77;
      *(_WORD *)(v72 + 80) = v75;
      if (v74 == 1)
      {
LABEL_53:
        uint64_t v79 = v72;
        *(void *)&Swift::Int v123 = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v79 + 60) = v123;
        *(unsigned char *)(v79 + 64) = 0;
LABEL_56:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        CGFloat v121 = v147;
        uint64_t v122 = v146;
        uint64_t v80 = DWORD2(v146);
        BOOL v81 = DWORD2(v147);
        char v82 = v148;
        long long v83 = v149;
        *(void *)&long long v84 = *((void *)&v150 + 1);
        *(void *)&uint64_t v85 = v150;
        int v119 = v84;
        uint64_t v120 = v85;
        long long v86 = v151;
        CGFloat v143 = v149;
        uint64_t v144 = v150;
        uint64_t v145 = v151;
        CGFloat v140 = v146;
        CGFloat v141 = v147;
        CGFloat v142 = v148;
        outlined retain of _ViewInputs((uint64_t)&v146);
        long long v87 = _ViewInputs.geometryTransaction()();
        uint64_t v88 = swift_getKeyPath();
        unint64_t v89 = specialized CachedEnvironment.attribute<A>(keyPath:)(v88);
        swift_release();
        if ((*(unsigned char *)(v79 + 81) & 1) == 0
          && v120 == *(_DWORD *)(v79 + 32)
          && __PAIR64__(v89, v119) == *(void *)(v79 + 36)
          && v80 == *(_DWORD *)(v79 + 44)
          && v87 == *(_DWORD *)(v79 + 48)
          && v81 == *(_DWORD *)(v79 + 52))
        {
          if ((*(unsigned char *)(v79 + 80) & 1) == 0)
          {
            uint64_t v61 = *(_DWORD *)(v79 + 76);
            goto LABEL_66;
          }
        }
        else
        {
          *(void *)&CGFloat v140 = v122;
          *(void *)&CGFloat v141 = v121;
          DWORD2(v140) = v80;
          *((void *)&v141 + 1) = __PAIR64__(v87, v81);
          CGFloat v142 = v82;
          CGFloat v143 = v83;
          *(void *)&uint64_t v144 = v120;
          *((void *)&v144 + 1) = v119;
          uint64_t v145 = v86;
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v140, v89, (uint64_t)&v135);
          uint64_t v79 = v117;
          uint64_t v61 = HIDWORD(v137);
          int v90 = v138;
          CGFloat v91 = v137 | ((unint64_t)DWORD1(v137) << 32);
          char v92 = BYTE8(v137) | ((unint64_t)HIDWORD(v137) << 32);
          uint64_t v93 = v136;
          *(_OWORD *)(v117 + 32) = v135;
          *(_OWORD *)(v79 + 48) = v93;
          *(void *)(v79 + 64) = v91;
          *(void *)(v79 + 72) = v92;
          *(_WORD *)(v79 + 80) = v90;
          if (v90 != 1) {
            goto LABEL_66;
          }
        }
        uint64_t v61 = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v79 + 76) = v61;
        *(unsigned char *)(v79 + 80) = 0;
LABEL_66:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        int v60 = v123;
        goto LABEL_67;
      }
      double v78 = HIDWORD(*((void *)&v73 + 1));
    }
    *(void *)&Swift::Int v123 = v78;
    uint64_t v79 = v72;
    goto LABEL_56;
  }
  outlined retain of _ViewInputs((uint64_t)&v146);
  specialized _ViewInputs.subscript.getter();
  outlined release of _ViewInputs((uint64_t)&v146);
  uint64_t result = AGWeakAttributeGetAttribute();
  if (result != *v52)
  {
    LODWORD(v135) = v130;
    long long v104 = (void (*)(long long *, void))Attribute<A>.subscript.modify();
    _DisplayList_StableIdentityScope.pushIdentity(_:)((Swift::UInt32 *)&v135);
    v104(&v140, 0);
    goto LABEL_42;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in static _FillMaskEffect._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2)
{
  void v7[2] = type metadata accessor for _FillMaskEffect();
  v7[3] = a2;
  uint64_t v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:), (uint64_t)v7, a2, MEMORY[0x263F8E628], v4, MEMORY[0x263F8E658], v5);
  return v7[5];
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _FillMaskEffect<A>@<X0>(int *a1@<X0>, long long *a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, long long *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  return static _FillMaskEffect._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(ValueMetadata **)(a5 + 16), *(void *)(a5 + 24), a6);
}

uint64_t FillMaskDisplayList.updateValue()()
{
  void (*v91)(__int16 *__return_ptr, uint64_t, uint64_t);
  uint64_t v92;
  uint64_t v93;
  int v94;
  void (*v95)(__int16 *__return_ptr, uint64_t, uint64_t);
  unint64_t v96;
  __int16 v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t v100;
  unsigned int v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  double v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t v113;
  __int16 v114;
  long long v115;
  unsigned char v116[48];
  long long v117;
  long long v118;
  long long v119;
  long long v120;
  long long v121;
  long long v122;
  long long v123;
  long long v124;
  long long v125;
  long long v126;
  _OWORD v127[2];
  long long v128;
  long long v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  __int16 v134;
  char v135;
  int v136;
  long long v137;
  long long v138;
  long long v139;
  long long v140;
  long long v141;
  long long v142;
  unsigned char v143[48];
  long long v144;
  long long v145;
  long long v146;
  long long v147;
  long long v148;
  unsigned char v149[25];
  long long v150;
  long long v151;
  long long v152;
  long long v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;

  double v156 = *MEMORY[0x263EF8340];
  if (v0[6] == *MEMORY[0x263F288F8]
    || (Value = AGGraphGetValue(), uint64_t v3 = *(void *)Value, !*(void *)(*(void *)Value + 16)))
  {
    *(void *)&CGFloat v137 = MEMORY[0x263F8EE78];
    WORD4(v137) = 0;
    BYTE10(v137) = 0;
    return AGGraphSetOutputValue();
  }
  int v4 = *(unsigned __int16 *)(Value + 8);
  int v5 = *(unsigned __int8 *)(Value + 10);
  unsigned int v6 = v0[1];
  if (v2 & 1) != 0 || (AGGraphGetValue(), (v7) || !*((_WORD *)v0 + 15))
  {
    swift_bridgeObjectRetain();
    unint64_t v10 = ++static DisplayList.Version.lastValue;
  }
  else
  {
    int v8 = v0[4];
    LODWORD(v137) = v0[2];
    DWORD1(v137) = v8;
    swift_bridgeObjectRetain();
    int v9 = AGGraphAnyInputsChanged();
    unint64_t v10 = ++static DisplayList.Version.lastValue;
    if (!v9) {
      goto LABEL_14;
    }
  }
  if (v10) {
    int v12 = (2 * ((33 * (v10 >> 16)) ^ v10)) | 1;
  }
  else {
    LOWORD(v12) = 0;
  }
  *((_WORD *)v0 + 15) = v12;
LABEL_14:
  int v112 = v6;
  char v13 = (double *)AGGraphGetValue();
  double v14 = *v13;
  Swift::UInt64 v110 = v13[1];
  id v15 = (double *)AGGraphGetValue();
  double v17 = *v15;
  double v16 = v15[1];
  type metadata accessor for CGSize(0);
  int v18 = (uint64_t *)AGGraphGetValue();
  uint64_t v19 = *v18;
  uint64_t v20 = v18[1];
  if (*(void *)(v3 + 16) == 1)
  {
    uint64_t v21 = *(void *)(v3 + 40);
    long long v108 = *(void *)(v3 + 32);
    uint64_t v22 = *(void *)(v3 + 48);
    uint64_t v23 = *(void *)(v3 + 56);
    unint64_t v25 = *(void *)(v3 + 64);
    uint64_t v24 = *(void *)(v3 + 72);
    unint64_t v27 = *(void *)(v3 + 80);
    uint64_t v26 = *(void *)(v3 + 88);
    int v28 = *(unsigned __int16 *)(v3 + 96) | (*(unsigned __int8 *)(v3 + 98) << 16);
    uint64_t v29 = *(unsigned int *)(v3 + 100);
    outlined copy of DisplayList.Item.Value(v24, v27);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v24 = 0;
    uint64_t v29 = 0;
    unint64_t v27 = 0x4000001300000000;
    long long v108 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = *v18;
    uint64_t v23 = v18[1];
    unint64_t v25 = v10;
    uint64_t v26 = v3;
    int v28 = v4 | (v5 << 16);
  }
  double v30 = v14 - v17;
  double v152 = 0u;
  double v153 = 0u;
  double v31 = v110 - v16;
  v150 = 0u;
  double v151 = 0u;
  double v154 = 0;
  uint64_t v155 = 0x80000000;
  uint64_t v32 = *(void *)&v28 & 0xFFFFFFLL | (v29 << 32);
  int v33 = *v0;
  __int16 v34 = *((_WORD *)v0 + 15);
  char v35 = *((unsigned char *)v0 + 28);
  int v36 = v0[5];
  outlined copy of DisplayList.Item.Value(v24, v27);
  if (one-time initialization token for normal != -1) {
    swift_once();
  }
  *(void *)&CGFloat v137 = v108;
  *((void *)&v137 + 1) = v21;
  *(void *)&CGFloat v138 = v22;
  *((void *)&v138 + 1) = v23;
  *(void *)&CGFloat v139 = v25;
  long long v106 = v24;
  *((void *)&v139 + 1) = v24;
  *(void *)&CGFloat v140 = v27;
  *((void *)&v140 + 1) = v26;
  CGFloat v141 = (unint64_t)v32;
  CGFloat v142 = 0uLL;
  *(_DWORD *)CGFloat v143 = 6291456;
  *(_WORD *)&v143[4] = v34;
  *(double *)&v143[8] = v30;
  *(double *)&v143[16] = v31;
  *(void *)&v143[24] = v19;
  *(void *)&v143[32] = v20;
  *(void *)&v143[40] = 0;
  LODWORD(v144) = 0;
  *((double *)&v144 + 1) = v30;
  *(double *)&uint64_t v145 = v31;
  *((void *)&v145 + 1) = v19;
  *(void *)&uint64_t v146 = v20;
  char v147 = xmmword_2461B9DE0;
  *((void *)&v146 + 1) = v10;
  *(void *)&v148 = 0;
  BYTE10(v148) = 0;
  WORD4(v148) = 0;
  HIDWORD(v148) = v33;
  v149[0] = v35;
  *(_DWORD *)&v149[4] = v36;
  *(void *)&v149[8] = static GraphicsBlendMode.normal;
  v149[16] = byte_26B0EB4A0;
  *(_DWORD *)&v149[20] = 1065353216;
  v149[24] = 0;
  LOBYTE(v115) = 0;
  outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_26B0EB4A0);
  _ShapeStyle_RenderedShape.renderItem(name:styles:layers:)((unsigned __int8 *)&v115, v112, (uint64_t)&v150);
  uint64_t v37 = *((void *)&v151 + 1);
  CFIndex v111 = v151;
  int v113 = *((void *)&v150 + 1);
  long long v38 = v152;
  unint64_t v39 = *((void *)&v153 + 1);
  long long v109 = v153;
  uint64_t v40 = v155;
  if (!(v155 >> 30))
  {
    if (*((void *)&v153 + 1) >> 62 != 3
      || *((void *)&v153 + 1) != 0xC000000000000000
      || v154 | (unint64_t)v153
      || (v155 & 0xFFFFFF) != 0)
    {
      uint64_t v64 = v154;
      _s7SwiftUI10MutableBoxCyAA17CachedEnvironmentVGMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
      uint64_t v57 = swift_allocObject();
      *(_OWORD *)(v57 + 16) = xmmword_2461B9DC0;
      *(void *)(v57 + 32) = v113;
      *(void *)(v57 + 40) = v111;
      *(void *)(v57 + 48) = v37;
      *(_OWORD *)(v57 + 56) = v38;
      *(void *)(v57 + 72) = v109;
      *(void *)(v57 + 80) = v39;
      *(void *)(v57 + 88) = v64;
      *(unsigned char *)(v57 + 98) = BYTE2(v40);
      *(_WORD *)(v57 + 96) = v40;
      *(_DWORD *)(v57 + 100) = HIDWORD(v40);
      *(void *)&CFIndex v115 = v113;
      *((void *)&v115 + 1) = v111;
      *(void *)uint64_t v116 = v37;
      *(_OWORD *)&v116[8] = v38;
      *(void *)&v116[24] = v109;
      *(void *)&v116[32] = v39;
      *(void *)&v116[40] = v64;
      BYTE2(v117) = BYTE2(v40);
      LOWORD(v117) = v40;
      DWORD1(v117) = HIDWORD(v40);
      outlined copy of DisplayList.Item.Value(v109, v39);
      DisplayList.Item.features.getter((__int16 *)&v128);
      __int16 v53 = v128;
      *(void *)&CFIndex v115 = v113;
      *((void *)&v115 + 1) = v111;
      *(void *)uint64_t v116 = v37;
      *(_OWORD *)&v116[8] = v38;
      *(void *)&v116[24] = v109;
      *(void *)&v116[32] = v39;
      *(void *)&v116[40] = v64;
      BYTE2(v117) = BYTE2(v40);
      LOWORD(v117) = v40;
      DWORD1(v117) = HIDWORD(v40);
      DisplayList.Item.properties.getter(&v128);
      outlined consume of _ShapeStyle_RenderedLayers.Layers(v113, v111, v37, v38, *((uint64_t *)&v38 + 1), v109, v39, v64, v40);
      CFIndex v111 = 0;
      int v113 = 0;
      uint64_t v54 = 0;
      long long v107 = 0;
      long long v109 = 0;
      uint64_t v55 = 0;
      unint64_t v39 = 0;
      uint64_t v56 = 0;
      char v52 = v128;
    }
    else
    {
      outlined consume of _ShapeStyle_RenderedLayers.Layers(*((uint64_t *)&v150 + 1), v151, *((uint64_t *)&v151 + 1), v152, *((uint64_t *)&v152 + 1), 0, 0xC000000000000000, 0, v155);
      CFIndex v111 = 0;
      int v113 = 0;
      uint64_t v54 = 0;
      long long v107 = 0;
      long long v109 = 0;
      uint64_t v55 = 0;
      unint64_t v39 = 0;
      uint64_t v56 = 0;
      __int16 v53 = 0;
      char v52 = 0;
      uint64_t v57 = MEMORY[0x263F8EE78];
    }
    LODWORD(v40) = 0x80000000;
    goto LABEL_78;
  }
  long long v105 = *((void *)&v151 + 1);
  if (v155 >> 30 == 1)
  {
    long long v103 = *((void *)&v153 + 1);
    long long v104 = v154;
    double v101 = v155;
    uint64_t v41 = swift_bridgeObjectRetain();
    DisplayList.init(_:)(v41, (uint64_t)&v128);
    CFIndex v115 = *(_OWORD *)&v143[8];
    *(_OWORD *)uint64_t v116 = *(_OWORD *)&v143[24];
    *(void *)&v116[16] = *((void *)&v146 + 1);
    *(_OWORD *)&v116[24] = xmmword_2461B9DD0;
    *(void *)&v116[40] = v128;
    BYTE2(v117) = BYTE10(v128);
    LOWORD(v117) = WORD4(v128);
    DWORD1(v117) = HIDWORD(v148);
    LOBYTE(v128) = v35;
    DisplayList.Item.canonicalize(options:)((char *)&v128);
    long long v42 = v115;
    long long v43 = *(_OWORD *)v116;
    unint64_t v44 = *(void *)&v116[24];
    unsigned __int8 v102 = *(void *)&v116[16];
    unint64_t v45 = *(void *)&v116[32];
    uint64_t v46 = *(void *)&v116[40];
    unsigned int v47 = (unsigned __int16)v117 | (BYTE2(v117) << 16);
    int v48 = DWORD1(v117);
    uint64_t v49 = *(void *)&v116[32] >> 62;
    if (*(void *)&v116[32] >> 62 == 3
      && (v47 & 0xFFFFFF) == 0
      && *(void *)&v116[32] == 0xC000000000000000
      && !(*(void *)&v116[40] | *(void *)&v116[24]))
    {
      uint64_t v50 = v38;
      unint64_t v51 = *(void *)&v116[32];
      char v52 = 0;
      __int16 v53 = 0;
      double v100 = MEMORY[0x263F8EE78];
LABEL_77:
      outlined consume of DisplayList.Item.Value(v44, v51);
      outlined consume of _ShapeStyle_RenderedLayers.Layers(v113, v111, v105, v50, *((uint64_t *)&v38 + 1), v109, v103, v104, v101);
      CFIndex v111 = 0;
      int v113 = 0;
      uint64_t v54 = 0;
      long long v107 = 0;
      long long v109 = 0;
      uint64_t v55 = 0;
      unint64_t v39 = 0;
      uint64_t v56 = 0;
      LODWORD(v40) = 0x80000000;
      uint64_t v57 = v100;
      goto LABEL_78;
    }
    _s7SwiftUI10MutableBoxCyAA17CachedEnvironmentVGMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
    uint64_t v58 = swift_allocObject();
    *(_OWORD *)(v58 + 16) = xmmword_2461B9DC0;
    *(_OWORD *)(v58 + 32) = v42;
    *(_OWORD *)(v58 + 48) = v43;
    *(void *)(v58 + 64) = v102;
    *(void *)(v58 + 72) = v44;
    *(void *)(v58 + 80) = v45;
    *(void *)(v58 + 88) = v46;
    *(unsigned char *)(v58 + 98) = BYTE2(v47);
    *(_WORD *)(v58 + 96) = v47;
    uint64_t v59 = v49;
    *(_DWORD *)(v58 + 100) = v48;
    int v60 = v48;
    double v100 = v58;
    switch(v59)
    {
      case 1:
        uint64_t v99 = HIWORD(v47);
        uint64_t v50 = v38;
        uint64_t v65 = outlined copy of DisplayList.Item.Value(v44, v45);
        switch(BYTE4(v45))
        {
          case 2:
            outlined copy of DisplayList.Item.Value(v44, v45);
            outlined copy of DisplayList.Item.Value(v44, v45);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v44, v45, 2);
            LODWORD(v66) = (v44 >> 2) & 1;
            break;
          case 3:
            outlined init with copy of AnyTrackedValue(v44 + 16, (uint64_t)&v128);
            uint64_t v66 = v130;
            uint64_t v93 = *((void *)&v129 + 1);
            BOOL v81 = (id *)(v130 + 56);
            __swift_project_boxed_opaque_existential_1(&v128, *((uint64_t *)&v129 + 1));
            CGFloat v91 = (void (*)(__int16 *__return_ptr, uint64_t, uint64_t))*v81;
            outlined copy of DisplayList.Item.Value(v44, v45);
            outlined copy of DisplayList.Item.Value(v44, v45);
            v91(&v114, v93, v66);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v128);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v44, v45, 3);
            LOWORD(v66) = v114;
            break;
          case 7:
            LOWORD(v66) = *(_WORD *)(v44 + 24);
            outlined copy of DisplayList.Item.Value(v44, v45);
            outlined copy of DisplayList.Item.Value(v44, v45);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v44, v45, 7);
            break;
          case 0xA:
            outlined copy of DisplayList.Item.Value(v44, v45);
            outlined copy of DisplayList.Item.Value(v44, v45);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v44, v45, 10);
            LOWORD(v66) = 4;
            break;
          case 0xC:
            outlined copy of DisplayList.Item.Value(v44, v45);
            outlined copy of DisplayList.Item.Value(v44, v45);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v44, v45, 12);
            LOWORD(v66) = 2;
            break;
          case 0xE:
            outlined copy of DisplayList.Item.Value(v44, v45);
            outlined copy of DisplayList.Item.Value(v44, v45);
            swift_bridgeObjectRelease();
            uint64_t v82 = v44;
            char v83 = v45;
            char v84 = 14;
            goto LABEL_67;
          case 0xF:
            outlined copy of DisplayList.Item.Value(v44, v45);
            outlined copy of DisplayList.Item.Value(v44, v45);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v44, v45, 15);
            LOWORD(v66) = 64;
            break;
          case 0x10:
            outlined copy of DisplayList.Item.Value(v44, v45);
            outlined copy of DisplayList.Item.Value(v44, v45);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v44, v45, 16);
            LOWORD(v66) = 32;
            break;
          case 0x11:
            (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v44 + 112))(&v128, v65);
            uint64_t v97 = v128;
            int v85 = (unsigned __int16)word_26FA429C8;
            uint64_t v94 = (unsigned __int16)word_26FA429CA;
            outlined copy of DisplayList.Item.Value(v44, v45);
            outlined copy of DisplayList.Item.Value(v44, v45);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v44, v45, 17);
            __int16 v86 = v94;
            if ((v94 & ~v85) == 0) {
              __int16 v86 = 0;
            }
            LOWORD(v66) = v97 | v85 | v86;
            break;
          default:
            outlined copy of DisplayList.Item.Value(v44, v45);
            outlined copy of DisplayList.Item.Value(v44, v45);
            swift_bridgeObjectRelease();
            uint64_t v82 = v44;
            char v83 = v45;
            char v84 = BYTE4(v45);
LABEL_67:
            outlined consume of DisplayList.Effect(v82, v83, v84);
            LOWORD(v66) = 0;
            break;
        }
        __int16 v53 = v66 | v47;
        goto LABEL_74;
      case 2:
        uint64_t v67 = *(void *)(v44 + 16);
        if (!v67)
        {
          unsigned int v68 = HIWORD(v47);
          uint64_t v50 = v38;
          __int16 v53 = 128;
          goto LABEL_49;
        }
        unsigned int v68 = HIWORD(v47);
        uint64_t v50 = v38;
        if (v67 == 1)
        {
          uint64_t v69 = 0;
          __int16 v53 = 128;
LABEL_47:
          uint64_t v76 = v67 - v69;
          uint64_t v77 = (__int16 *)(v44 + 40 * v69 + 64);
          do
          {
            __int16 v78 = *v77;
            v77 += 20;
            v53 |= v78;
            --v76;
          }
          while (v76);
          goto LABEL_49;
        }
        __int16 v70 = 0;
        uint64_t v69 = v67 & 0x7FFFFFFFFFFFFFFELL;
        CGFloat v71 = (__int16 *)(v44 + 104);
        __int16 v72 = 128;
        uint64_t v73 = v67 & 0x7FFFFFFFFFFFFFFELL;
        do
        {
          __int16 v74 = *(v71 - 20);
          __int16 v75 = *v71;
          v71 += 40;
          v72 |= v74;
          v70 |= v75;
          v73 -= 2;
        }
        while (v73);
        __int16 v53 = v70 | v72;
        if (v67 != v69) {
          goto LABEL_47;
        }
LABEL_49:
        outlined copy of DisplayList.Item.Value(v44, v45);
        outlined copy of DisplayList.Item.Value(v44, v45);
        __int16 v62 = v47;
        uint64_t v63 = v46;
        goto LABEL_76;
      case 3:
        uint64_t v50 = v38;
        long long v114 = 0;
        unsigned int v68 = HIWORD(v47);
        outlined copy of DisplayList.Item.Value(v44, v45);
        __int16 v62 = v47;
        uint64_t v63 = v46;
        __int16 v53 = 0;
        goto LABEL_76;
      default:
        uint64_t v99 = HIWORD(v47);
        switch(v44 >> 60)
        {
          case 6uLL:
            uint64_t v50 = v38;
            outlined init with copy of AnyTrackedValue((v44 & 0xFFFFFFFFFFFFFFFLL) + 16, (uint64_t)&v128);
            uint64_t v61 = v130;
            double v98 = *((void *)&v129 + 1);
            __swift_project_boxed_opaque_existential_1(&v128, *((uint64_t *)&v129 + 1));
            uint64_t v95 = *(void (**)(__int16 *__return_ptr, uint64_t, uint64_t))(v61 + 40);
            outlined copy of DisplayList.Item.Value(v44, v45);
            outlined copy of DisplayList.Item.Value(v44, v45);
            v95(&v114, v98, v61);
            int v60 = v48;
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v128);
            __int16 v62 = v47;
            uint64_t v63 = v46;
            __int16 v53 = v114;
            goto LABEL_75;
          case 8uLL:
            uint64_t v79 = *(void *)((v44 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
            if (!*(void *)(v79 + 216)) {
              goto LABEL_57;
            }
            id v89 = *(id *)(v79 + 216);
            char v92 = *(void *)((v44 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
            outlined copy of DisplayList.Item.Value(v44, v45);
            outlined copy of DisplayList.Item.Value(v44, v45);
            outlined copy of DisplayList.Item.Value(v44, v45);
            outlined copy of DisplayList.Item.Value(v44, v45);
            swift_retain();
            unint64_t v96 = v45;
            swift_retain();
            if ((uint64_t)objc_msgSend(v89, sel_length) <= 0)
            {
              uint64_t v50 = v38;
              outlined consume of DisplayList.Item.Value(v44, v45);
              swift_release();
              swift_release();
              uint64_t v87 = v44;
              unint64_t v88 = v45;
            }
            else
            {
              if (one-time initialization token for updateSchedule != -1) {
                swift_once();
              }
              uint64_t v80 = static NSAttributedStringKey.updateSchedule;
              objc_msgSend(v89, sel_length);
              if (objc_msgSend(v89, sel_attribute_atIndex_effectiveRange_, v80, 0, 0))
              {
                uint64_t v50 = v38;
                _bridgeAnyObjectToAny(_:)();
                swift_unknownObjectRelease();
                outlined destroy of Any?((uint64_t)&v128);
                unint64_t v45 = v96;
                char v90 = *(unsigned char *)(v92 + 256);
                outlined consume of DisplayList.Item.Value(v44, v96);
                swift_release();
                swift_release();
                outlined consume of DisplayList.Item.Value(v44, v96);
                if (v90)
                {
                  __int16 v53 = 8;
                  goto LABEL_74;
                }
LABEL_82:
                __int16 v53 = 0;
LABEL_74:
                uint64_t v63 = v46;
                __int16 v62 = v47;
                int v60 = v48;
LABEL_75:
                LOBYTE(v68) = v99;
LABEL_76:
                uint64_t v128 = v42;
                double v129 = v43;
                double v130 = v102;
                double v131 = v44;
                double v132 = v45;
                double v133 = v63;
                uint64_t v135 = v68;
                uint64_t v134 = v62;
                CGFloat v136 = v60;
                unint64_t v51 = v45;
                DisplayList.Item.properties.getter(&v114);
                outlined consume of DisplayList.Item.Value(v44, v45);
                char v52 = v114;
                goto LABEL_77;
              }
              uint64_t v50 = v38;
              uint64_t v128 = 0u;
              double v129 = 0u;
              outlined destroy of Any?((uint64_t)&v128);
              unint64_t v45 = v96;
              outlined consume of DisplayList.Item.Value(v44, v96);
              swift_release();
              swift_release();
              uint64_t v87 = v44;
              unint64_t v88 = v96;
            }
            outlined consume of DisplayList.Item.Value(v87, v88);
            goto LABEL_82;
          case 9uLL:
            uint64_t v50 = v38;
            __int16 v53 = *(_WORD *)((v44 & 0xFFFFFFFFFFFFFFFLL) + 0x18) | 0x200;
            outlined copy of DisplayList.Item.Value(v44, v45);
            outlined copy of DisplayList.Item.Value(v44, v45);
            __int16 v62 = v47;
            uint64_t v63 = v46;
            goto LABEL_75;
          case 0xBuLL:
            goto LABEL_60;
          case 0xCuLL:
            outlined copy of DisplayList.Item.Value(v44, v45);
LABEL_60:
            uint64_t v50 = v38;
            outlined copy of DisplayList.Item.Value(v44, v45);
            outlined copy of DisplayList.Item.Value(v44, v45);
            __int16 v62 = v47;
            uint64_t v63 = v46;
            __int16 v53 = 2;
            goto LABEL_75;
          default:
LABEL_57:
            uint64_t v50 = v38;
            outlined copy of DisplayList.Item.Value(v44, v45);
            outlined copy of DisplayList.Item.Value(v44, v45);
            __int16 v53 = 0;
            goto LABEL_74;
        }
    }
  }
  long long v107 = v152;
  __int16 v53 = 0;
  char v52 = 0;
  uint64_t v57 = MEMORY[0x263F8EE78];
  uint64_t v55 = *((void *)&v152 + 1);
  uint64_t v56 = v154;
  uint64_t v54 = *((void *)&v151 + 1);
LABEL_78:
  *(void *)&CFIndex v115 = v57;
  WORD4(v115) = v53;
  BYTE10(v115) = v52;
  AGGraphSetOutputValue();
  outlined consume of DisplayList.Item.Value(v106, v27);
  swift_bridgeObjectRelease();
  unint64_t v125 = v147;
  uint64_t v126 = v148;
  v127[0] = *(_OWORD *)v149;
  *(_OWORD *)((char *)v127 + 9) = *(_OWORD *)&v149[9];
  CGFloat v121 = *(_OWORD *)&v143[32];
  uint64_t v122 = v144;
  Swift::Int v123 = v145;
  uint64_t v124 = v146;
  unsigned __int8 v117 = v141;
  double v118 = v142;
  int v119 = *(_OWORD *)v143;
  uint64_t v120 = *(_OWORD *)&v143[16];
  CFIndex v115 = v137;
  *(_OWORD *)uint64_t v116 = v138;
  *(_OWORD *)&v116[16] = v139;
  *(_OWORD *)&v116[32] = v140;
  outlined release of _ShapeStyle_RenderedShape((uint64_t)&v115);
  swift_release();
  return outlined consume of _ShapeStyle_RenderedLayers.Layers(v113, v111, v54, v107, v55, v109, v39, v56, v40);
}

unint64_t lazy protocol witness table accessor for type FillMaskDisplayList and conformance FillMaskDisplayList()
{
  unint64_t result = lazy protocol witness table cache variable for type FillMaskDisplayList and conformance FillMaskDisplayList;
  if (!lazy protocol witness table cache variable for type FillMaskDisplayList and conformance FillMaskDisplayList)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FillMaskDisplayList and conformance FillMaskDisplayList);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for _FillMaskEffect(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for _FillMaskEffect(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x245DE01B0);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        double v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for _FillMaskEffect()
{
  return __swift_instantiateGenericMetadata();
}

void *type metadata accessor for FillMaskDisplayList()
{
  return &unk_26FA5E310;
}

unint64_t instantiation function for generic protocol witness table for FillMaskDisplayList(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type FillMaskDisplayList and conformance FillMaskDisplayList();
  *(void *)(a1 + 8) = result;
  return result;
}

double ResolvedShadowStyle.insets.getter()
{
  double result = 0.0;
  if ((*(unsigned char *)(v0 + 44) & 1) == 0) {
    return *(double *)(v0 + 32) + *(double *)(v0 + 16) * -2.8;
  }
  return result;
}

char *ResolvedShadowStyle.init(color:radius:offset:midpoint:kind:)@<X0>(char *result@<X0>, uint64_t a2@<X8>, float a3@<S0>, float a4@<S1>, float a5@<S2>, float a6@<S3>, double a7@<D4>, double a8@<D5>, double a9@<D6>, float a10@<S7>)
{
  char v10 = *result;
  *(float *)a2 = a3;
  *(float *)(a2 + 4) = a4;
  *(float *)(a2 + 8) = a5;
  *(float *)(a2 + 12) = a6;
  *(double *)(a2 + 16) = a7;
  *(double *)(a2 + 24) = a8;
  *(double *)(a2 + 32) = a9;
  *(float *)(a2 + 40) = a10;
  *(unsigned char *)(a2 + 44) = v10;
  return result;
}

double ResolvedShadowStyle.animatableData.setter(uint64_t a1)
{
  float32x4_t v3 = *(float32x4_t *)a1;
  v4.i64[0] = 0x3C0000003C000000;
  v4.i64[1] = 0x3C0000003C000000;
  if (one-time initialization token for legacyInterpolation != -1)
  {
    float32x4_t v11 = *(float32x4_t *)a1;
    swift_once();
    v4.i64[0] = 0x3C0000003C000000;
    v4.i64[1] = 0x3C0000003C000000;
    float32x4_t v3 = v11;
  }
  float32x4_t v10 = vmulq_f32(v3, v4);
  swift_beginAccess();
  if (static Color.Resolved.legacyInterpolation)
  {
    float v5 = v10.f32[0];
    __int32 v7 = v10.i32[2];
    __int32 v6 = v10.i32[1];
    __int32 v8 = v10.i32[3];
  }
  else
  {
    char v13 = 2;
    float32x4_t v12 = v10;
    float v5 = ResolvedGradient.ColorSpace.convertOut(_:)(v12.f32);
  }
  *(float *)uint64_t v1 = v5;
  *(_DWORD *)(v1 + 4) = v6;
  *(_DWORD *)(v1 + 8) = v7;
  *(_DWORD *)(v1 + 12) = v8;
  double result = *(double *)(a1 + 32);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(a1 + 16);
  *(double *)(v1 + 32) = result;
  return result;
}

uint64_t ShadowStyle.Kind.rawValue.getter()
{
  return *v0;
}

uint64_t ShadowStyle.Kind.init(rawValue:)@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static ShadowStyle.Kind.drop.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void static ShadowStyle.Kind.inner.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void static ShadowStyle.Kind.only.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

void static ShadowStyle.Kind.nonOpaque.getter(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

void static ShadowStyle.Kind.ignoresFill.getter(unsigned char *a1@<X8>)
{
  *a1 = 8;
}

double static ShadowStyle.drop.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 40) = 1056964608;
  return result;
}

double static ShadowStyle.inner.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 1;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1056964608;
  return result;
}

uint64_t static ShadowStyle.drop(color:radius:x:y:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = a1 | 0x8000000000000000;
  *(double *)(a2 + 16) = a3;
  *(double *)(a2 + 24) = a4;
  *(double *)(a2 + 32) = a5;
  *(_DWORD *)(a2 + 40) = 1056964608;
  return swift_retain();
}

uint64_t static ShadowStyle.inner(color:radius:x:y:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>)
{
  *(void *)a2 = 1;
  *(void *)(a2 + 8) = a1 | 0x8000000000000000;
  *(double *)(a2 + 16) = a3;
  *(double *)(a2 + 24) = a4;
  *(double *)(a2 + 32) = a5;
  *(_DWORD *)(a2 + 40) = 1056964608;
  return swift_retain();
}

uint64_t static ShadowStyle.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  float v3 = *(float *)(a1 + 40);
  uint64_t v4 = *(void *)(a2 + 32);
  float v5 = *(float *)(a2 + 40);
  long long v6 = *(_OWORD *)(a1 + 16);
  v11[0] = *(_OWORD *)a1;
  v11[1] = v6;
  uint64_t v12 = v2;
  long long v7 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v7;
  uint64_t v10 = v4;
  return specialized static ShadowStyle.Storage.== infix(_:_:)((uint64_t)v11, (uint64_t)v9) & (v3 == v5);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ShadowStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  float v3 = *(float *)(a1 + 40);
  uint64_t v4 = *(void *)(a2 + 32);
  float v5 = *(float *)(a2 + 40);
  long long v6 = *(_OWORD *)(a1 + 16);
  v11[0] = *(_OWORD *)a1;
  v11[1] = v6;
  uint64_t v12 = v2;
  long long v7 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v7;
  uint64_t v10 = v4;
  return static ShadowStyle.Storage.== infix(_:_:)(v11, v9) & (v3 == v5);
}

uint64_t ShadowStyle.ignoresFill(_:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t result = *(void *)v2;
  uint64_t v6 = *(void *)(v2 + 8);
  int v7 = *(_DWORD *)(v2 + 40);
  if (v6 < 0)
  {
    uint64_t v10 = *(void *)(v2 + 24);
    uint64_t v11 = *(void *)(v2 + 32);
    uint64_t v9 = *(void *)(v2 + 16);
    BOOL v12 = (a1 & 1) == 0;
    uint64_t v15 = 8;
    if (v12) {
      uint64_t v15 = 0;
    }
    uint64_t v14 = *(void *)v2 & 0xF7 | v15;
    unint64_t v8 = v6 | 0x8000000000000000;
    uint64_t result = outlined copy of ShadowStyle.Storage(result, v6);
  }
  else
  {
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    BOOL v12 = (a1 & 1) == 0;
    uint64_t v13 = 8;
    if (v12) {
      uint64_t v13 = 0;
    }
    uint64_t v14 = result & 0xF7 | (unint64_t)v13;
  }
  *(void *)a2 = v14;
  *(void *)(a2 + 8) = v8;
  *(void *)(a2 + 16) = v9;
  *(void *)(a2 + 24) = v10;
  *(void *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 40) = v7;
  return result;
}

uint64_t ShadowStyle.midpoint(_:)@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  uint64_t v5 = v2[2];
  uint64_t v6 = v2[3];
  uint64_t v7 = v2[4];
  float v8 = a2;
  *(void *)a1 = *v2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(float *)(a1 + 40) = v8;
  return outlined copy of ShadowStyle.Storage(v3, v4);
}

uint64_t ShapeStyle.shadow(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v20[1] = a3;
  uint64_t v8 = *(void *)(a2 - 8);
  double v9 = MEMORY[0x270FA5388](a1);
  uint64_t v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v11, v4, a2, v9);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  int v17 = *(_DWORD *)(a1 + 40);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(a4, v11, a2);
  uint64_t v18 = a4 + *(int *)(type metadata accessor for _ShadowShapeStyle() + 36);
  *(void *)uint64_t v18 = v12;
  *(void *)(v18 + 8) = v13;
  *(void *)(v18 + 16) = v14;
  *(void *)(v18 + 24) = v15;
  *(void *)(v18 + 32) = v16;
  *(_DWORD *)(v18 + 40) = v17;
  return outlined copy of ShadowStyle.Storage(v12, v13);
}

float _ShadowShapeStyle.init(style:shadowStyle:)@<S0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a4, a1);
  uint64_t v6 = a4 + *(int *)(type metadata accessor for _ShadowShapeStyle() + 36);
  uint64_t v7 = *(void *)(a2 + 32);
  float result = *(float *)(a2 + 40);
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v6 = *(_OWORD *)a2;
  *(_OWORD *)(v6 + 16) = v9;
  *(void *)(v6 + 32) = v7;
  *(float *)(v6 + 40) = result;
  return result;
}

uint64_t _ShadowShapeStyle.style.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t _ShadowShapeStyle.style.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*_ShadowShapeStyle.style.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _ShadowShapeStyle.shadowStyle.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2 + *(int *)(a1 + 36);
  uint64_t v4 = *(void *)v3;
  uint64_t v5 = *(void *)(v3 + 8);
  uint64_t v6 = *(void *)(v3 + 16);
  uint64_t v7 = *(void *)(v3 + 24);
  uint64_t v8 = *(void *)(v3 + 32);
  int v9 = *(_DWORD *)(v3 + 40);
  *(void *)a2 = *(void *)v3;
  *(void *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = v6;
  *(void *)(a2 + 24) = v7;
  *(void *)(a2 + 32) = v8;
  *(_DWORD *)(a2 + 40) = v9;
  return outlined copy of ShadowStyle.Storage(v4, v5);
}

__n128 _ShadowShapeStyle.shadowStyle.setter(__n128 *a1, uint64_t a2)
{
  uint64_t v3 = (__n128 *)(v2 + *(int *)(a2 + 36));
  __n128 v7 = a1[1];
  __n128 v8 = *a1;
  unint64_t v4 = a1[2].n128_u64[0];
  unsigned __int32 v5 = a1[2].n128_u32[2];
  outlined consume of ShadowStyle.Storage(v3->n128_u64[0], v3->n128_i64[1]);
  __n128 result = v7;
  *uint64_t v3 = v8;
  v3[1] = v7;
  v3[2].n128_u64[0] = v4;
  v3[2].n128_u32[2] = v5;
  return result;
}

uint64_t (*_ShadowShapeStyle.shadowStyle.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void _ShadowShapeStyle._apply(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  v8.n128_f64[0] = MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v7;
  uint64_t v12 = v7[1];
  switch(*((unsigned char *)v7 + 24))
  {
    case 1:
      uint64_t v73 = v7[2];
      (*(void (**)(uint64_t, uint64_t, double))(*(void *)(a2 + 24) + 32))(a1, v5, v8.n128_f64[0]);
      uint64_t v14 = v2 + *(int *)(a2 + 36);
      uint64_t v15 = *(void *)v14;
      uint64_t v16 = *(void *)(v14 + 8);
      uint64_t v17 = *(void *)(v14 + 16);
      uint64_t v18 = *(float (**)(void *))(v14 + 24);
      uint64_t v19 = *(void *)(v14 + 32);
      uint64_t v67 = *(unsigned int *)(v14 + 40);
      uint64_t v68 = v15;
      uint64_t v72 = v12;
      if (v16 < 0)
      {
        uint64_t v26 = *(void *)(a1 + 56);
        v75[0] = *(void *)(a1 + 48);
        v75[1] = v26;
        uint64_t v27 = *(void *)(v16 & 0x7FFFFFFFFFFFFFFFLL);
        int v28 = v18;
        uint64_t v74 = v19;
        uint64_t v29 = v17;
        CGFloat v71 = *(float (**)(void *))(v27 + 104);
        uint64_t v30 = v15;
        swift_retain();
        swift_retain();
        outlined copy of ShadowStyle.Storage(v30, v16);
        float v31 = v71(v75);
        uint64_t v12 = v72;
        float v32 = v31;
        unsigned int v34 = v33;
        unsigned int v36 = v35;
        unsigned int v38 = v37;
        swift_release();
        swift_release();
        uint64_t v70 = v29;
        CGFloat v71 = v28;
        uint64_t v21 = v74;
        outlined consume of ShadowStyle.Storage(v30, v16);
        uint64_t v66 = LODWORD(v32);
        unint64_t v65 = (unint64_t)v34 << 32;
        uint64_t v20 = v36;
        unint64_t v22 = (unint64_t)v38 << 32;
      }
      else
      {
        outlined consume of ShadowStyle.Storage(v15, v16);
        unint64_t v65 = 0;
        uint64_t v66 = 0;
        uint64_t v20 = 0;
        uint64_t v21 = 0x3FF8000000000000;
        uint64_t v70 = 0x3FF0000000000000;
        CGFloat v71 = 0;
        unint64_t v22 = 0x3EA8F5C300000000;
      }
      int v39 = *(unsigned __int8 *)(a1 + 40);
      if (v39 == 1) {
        uint64_t v40 = 0;
      }
      else {
        uint64_t v40 = *(void *)(a1 + 32);
      }
      if (v39 == 1) {
        int v41 = 5;
      }
      else {
        int v41 = *(unsigned __int8 *)(a1 + 40);
      }
      if (v39 == 1) {
        long long v42 = *(void **)(a1 + 32);
      }
      else {
        long long v42 = (void *)MEMORY[0x263F8EE78];
      }
      v75[0] = v42;
      v76[0] = v11;
      int64_t v43 = _ShapeStyle_Pack.indices(of:)(v76);
      if (v43 == v44)
      {
        uint64_t v45 = v40;
        char v46 = v41;
        goto LABEL_49;
      }
      unint64_t v47 = v43;
      int64_t v48 = v44;
      int v69 = v41;
      if (v44 < v43) {
        goto LABEL_53;
      }
      if (v43 >= v44) {
        goto LABEL_54;
      }
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v64 = v40;
      if (isUniquelyReferenced_nonNull_native) {
        goto LABEL_26;
      }
      break;
    case 2:
    case 4:
      goto LABEL_2;
    case 3:
      uint64_t v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v10, v2, v5, v8.n128_f64[0]);
      MEMORY[0x270FA5388](v23);
      uint64_t v24 = *(void *)(a2 + 24);
      *(&v64 - 4) = v5;
      *(&v64 - 3) = v24;
      *(&v64 - 2) = v2;
      type metadata accessor for _ShadowShapeStyle<AnyShapeStyle>();
      ShapeStyle.mapCopiedStyle<A>(in:body:)(a1, (void (*)(uint64_t))partial apply for closure #2 in _ShadowShapeStyle._apply(to:), (uint64_t)(&v64 - 6), v5, v25);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
      return;
    case 5:
      if (!(v7[2] | v12 | v11))
      {
LABEL_2:
        uint64_t v13 = *(void (**)(uint64_t, uint64_t, __n128))(*(void *)(a2 + 24) + 32);
        v13(a1, v5, v8);
      }
      return;
    default:
      outlined consume of _ShapeStyle_Shape.Result(*(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
      *(void *)(a1 + 32) = 0;
      *(unsigned char *)(a1 + 40) = 0;
      return;
  }
LABEL_55:
  long long v42 = specialized _ArrayBuffer._consumeAndCreateNew()(v42);
LABEL_26:
  uint64_t v50 = v73;
  char v46 = v69;
  uint64_t v51 = 15 * v47;
  v66 |= v65;
  v67 |= v68 << 32;
  unint64_t v65 = v22 | v20;
  uint64_t v74 = v21;
  uint64_t v68 = v48;
  do
  {
    if ((v47 & 0x8000000000000000) != 0)
    {
      __break(1u);
LABEL_52:
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
      goto LABEL_55;
    }
    if (v47 >= v42[2]) {
      goto LABEL_52;
    }
    uint64_t v56 = BYTE1(v42[v51 + 4]);
    if (v12 <= v56 && v50 > v56)
    {
      if (one-time initialization token for introduced != -1) {
        swift_once();
      }
      unsigned int v58 = static _SemanticFeature_v6.introduced;
      if (one-time initialization token for forced != -1) {
        swift_once();
      }
      swift_beginAccess();
      if (byte_26B0F44FC == 1)
      {
        if (dyld_program_sdk_at_least())
        {
LABEL_41:
          uint64_t v20 = 0;
          float v59 = 1.0;
          unsigned __int8 v60 = -1;
LABEL_44:
          uint64_t v21 = (uint64_t)&v42[v51];
          unint64_t v22 = v42[v51 + 18];
          outlined copy of GraphicsBlendMode?(v20, v60);
          char v61 = swift_isUniquelyReferenced_nonNull_native();
          v42[v51 + 18] = v22;
          if ((v61 & 1) == 0)
          {
            unint64_t v22 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v22 + 16) + 1, 1, (void *)v22);
            *(void *)(v21 + 144) = v22;
          }
          unint64_t v63 = *(void *)(v22 + 16);
          unint64_t v62 = *(void *)(v22 + 24);
          if (v63 >= v62 >> 1)
          {
            unint64_t v22 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v62 > 1), v63 + 1, 1, (void *)v22);
            *(void *)(v21 + 144) = v22;
          }
          *(void *)(v22 + 16) = v63 + 1;
          unint64_t v52 = v22 + 72 * v63;
          uint64_t v53 = v67;
          unint64_t v54 = v65;
          *(void *)(v52 + 32) = v66;
          *(void *)(v52 + 40) = v54;
          uint64_t v55 = (float (*)(void))v71;
          *(void *)(v52 + 48) = v70;
          *(void *)(v52 + 56) = v55;
          *(void *)(v52 + 64) = v74;
          *(unsigned char *)(v52 + 76) = BYTE4(v53);
          *(_DWORD *)(v52 + 72) = v53;
          *(unsigned char *)(v52 + 77) = 0;
          *(float *)(v52 + 80) = v59;
          *(void *)(v52 + 88) = v20;
          *(unsigned char *)(v52 + 96) = v60;
          outlined consume of GraphicsBlendMode?(v20, v60);
          uint64_t v12 = v72;
          uint64_t v50 = v73;
          char v46 = v69;
          int64_t v48 = v68;
          goto LABEL_28;
        }
      }
      else if (static Semantics.forced >= v58)
      {
        goto LABEL_41;
      }
      float v59 = *((float *)&v42[v51 + 15] + 1);
      uint64_t v20 = v42[v51 + 16];
      unsigned __int8 v60 = v42[v51 + 17];
      outlined copy of GraphicsBlendMode?(v20, v60);
      goto LABEL_44;
    }
LABEL_28:
    ++v47;
    v51 += 15;
  }
  while (v48 != v47);
  uint64_t v45 = v64;
LABEL_49:
  outlined consume of _ShapeStyle_Shape.Result(v45, v46);
  *(void *)(a1 + 32) = v42;
  *(unsigned char *)(a1 + 40) = 1;
}

uint64_t closure #2 in _ShadowShapeStyle._apply(to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a2 + *(int *)(type metadata accessor for _ShadowShapeStyle() + 36);
  uint64_t v6 = *(void *)v5;
  uint64_t v7 = *(void *)(v5 + 8);
  uint64_t v8 = *(void *)(v5 + 16);
  uint64_t v9 = *(void *)(v5 + 24);
  uint64_t v10 = *(void *)(v5 + 32);
  int v11 = *(_DWORD *)(v5 + 40);
  *(void *)a3 = a1;
  *(void *)(a3 + 8) = v6;
  *(void *)(a3 + 16) = v7;
  *(void *)(a3 + 24) = v8;
  *(void *)(a3 + 32) = v9;
  *(void *)(a3 + 40) = v10;
  *(_DWORD *)(a3 + 48) = v11;
  swift_retain();

  return outlined copy of ShadowStyle.Storage(v6, v7);
}

uint64_t static _ShadowShapeStyle._apply(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t protocol witness for static ShapeStyle._apply(to:) in conformance _ShadowShapeStyle<A>(uint64_t a1, uint64_t a2)
{
  return static _ShadowShapeStyle._apply(to:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
}

float ResolvedShadowStyle.color.getter()
{
  return *(float *)v0;
}

void ResolvedShadowStyle.color.setter(float a1, float a2, float a3, float a4)
{
  *unint64_t v4 = a1;
  v4[1] = a2;
  _OWORD v4[2] = a3;
  v4[3] = a4;
}

uint64_t (*ResolvedShadowStyle.color.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double ResolvedShadowStyle.radius.getter()
{
  return *(double *)(v0 + 16);
}

void ResolvedShadowStyle.radius.setter(double a1)
{
  *(double *)(v1 + 16) = a1;
}

uint64_t (*ResolvedShadowStyle.radius.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double ResolvedShadowStyle.offset.getter()
{
  return *(double *)(v0 + 24);
}

void ResolvedShadowStyle.offset.setter(double a1, double a2)
{
  *(double *)(v2 + 24) = a1;
  *(double *)(v2 + 32) = a2;
}

uint64_t (*ResolvedShadowStyle.offset.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

float ResolvedShadowStyle.midpoint.getter()
{
  return *(float *)(v0 + 40);
}

void ResolvedShadowStyle.midpoint.setter(float a1)
{
  *(float *)(v1 + 40) = a1;
}

uint64_t (*ResolvedShadowStyle.midpoint.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void ResolvedShadowStyle.kind.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 44);
}

unsigned char *ResolvedShadowStyle.kind.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 44) = *result;
  return result;
}

uint64_t (*ResolvedShadowStyle.kind.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double key path getter for ResolvedShadowStyle.animatableData : ResolvedShadowStyle@<D0>(uint64_t a1@<X8>)
{
  ResolvedShadowStyle.animatableData.getter((uint64_t)v4);
  double result = *(double *)v4;
  long long v3 = v4[1];
  *(_OWORD *)a1 = v4[0];
  *(_OWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 32) = v5;
  return result;
}

void (*ResolvedShadowStyle.animatableData.modify(void *a1))(float32x4_t **a1, char a2)
{
  long long v3 = malloc(0x48uLL);
  *a1 = v3;
  v3[8] = v1;
  int8x16_t v9 = *(int8x16_t *)v1;
  long long v10 = *(_OWORD *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 32);
  if (one-time initialization token for legacyInterpolation != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (static Color.Resolved.legacyInterpolation)
  {
    float32x4_t v6 = (float32x4_t)v9;
  }
  else
  {
    ResolvedGradient.ColorSpace.convertIn(_:)(v11.f32, v9, *(float *)&v9.i32[1], v9.u32[2], *(float *)&v9.i32[3], v5);
    float32x4_t v6 = v11;
  }
  v7.i64[0] = 0x4300000043000000;
  v7.i64[1] = 0x4300000043000000;
  *(float32x4_t *)long long v3 = vmulq_f32(v6, v7);
  *((_OWORD *)v3 + 1) = v10;
  v3[4] = v4;
  return _ShadowEffect._Resolved.animatableData.modify;
}

double protocol witness for Animatable.animatableData.getter in conformance ResolvedShadowStyle@<D0>(uint64_t a1@<X8>)
{
  ResolvedShadowStyle.animatableData.getter((uint64_t)v4);
  double result = *(double *)v4;
  long long v3 = v4[1];
  *(_OWORD *)a1 = v4[0];
  *(_OWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 32) = v5;
  return result;
}

void (*protocol witness for Animatable.animatableData.modify in conformance ResolvedShadowStyle(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = ResolvedShadowStyle.animatableData.modify(v2);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

void ResolvedShadowStyle.encode(to:)(uint64_t a1)
{
  uint64_t v3 = v1;
  float v5 = *(float *)v3;
  float v6 = *(float *)(v3 + 4);
  float v7 = *(float *)(v3 + 8);
  float v8 = *(float *)(v3 + 12);
  double v10 = *(double *)(v3 + 16);
  double v9 = *(double *)(v3 + 24);
  double v11 = *(double *)(v3 + 32);
  float v12 = *(float *)(v3 + 40);
  Swift::UInt v13 = *(unsigned __int8 *)(v3 + 44);
  if (*(float *)v3 != 0.0 || v6 != 0.0 || (v7 == 0.0 ? (BOOL v14 = v8 == 1.0) : (BOOL v14 = 0), !v14))
  {
    ProtobufEncoder.encodeVarint(_:)(0xAuLL);
    specialized ProtobufEncoder.encodeMessage<A>(_:)(v5, v6, v7, v8);
    if (v2) {
      return;
    }
  }
  if (v10 != 0.0)
  {
    double v15 = fabs(v10);
    if (v15 >= 65536.0) {
      Swift::UInt v16 = 17;
    }
    else {
      Swift::UInt v16 = 21;
    }
    ProtobufEncoder.encodeVarint(_:)(v16);
    if (v15 >= 65536.0)
    {
      uint64_t v19 = *(void *)(a1 + 8);
      int64_t v20 = v19 + 8;
      if (__OFADD__(v19, 8))
      {
        __break(1u);
      }
      else if (*(void *)(a1 + 16) >= v20)
      {
        *(void *)(a1 + 8) = v20;
        *(double *)(*(void *)a1 + v19) = v10;
        goto LABEL_19;
      }
      *(double *)ProtobufEncoder.growBufferSlow(to:)(v20) = v10;
    }
    else
    {
      uint64_t v17 = *(void *)(a1 + 8);
      int64_t v18 = v17 + 4;
      if (__OFADD__(v17, 4))
      {
        __break(1u);
      }
      else
      {
        *(float *)&double v15 = v10;
        if (*(void *)(a1 + 16) >= v18)
        {
          *(void *)(a1 + 8) = v18;
          *(_DWORD *)(*(void *)a1 + v17) = LODWORD(v15);
          goto LABEL_19;
        }
      }
      *(_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v18) = LODWORD(v15);
    }
  }
LABEL_19:
  if (v9 != 0.0 || v11 != 0.0)
  {
    ProtobufEncoder.encodeVarint(_:)(0x1AuLL);
    uint64_t v21 = *(void *)(a1 + 8);
    unint64_t v22 = *(void **)(a1 + 24);
    int64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      int64_t isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22[2] + 1, 1, v22);
      unint64_t v22 = (void *)isUniquelyReferenced_nonNull_native;
    }
    unint64_t v25 = v22[2];
    unint64_t v24 = v22[3];
    if (v25 >= v24 >> 1)
    {
      int64_t isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v24 > 1), v25 + 1, 1, v22);
      unint64_t v22 = (void *)isUniquelyReferenced_nonNull_native;
    }
    _DWORD v22[2] = v25 + 1;
    v22[v25 + 4] = v21;
    *(void *)(a1 + 24) = v22;
    if (__OFADD__(v21, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    *(void *)(a1 + 8) = v21 + 1;
    CGSize.encode(to:)((double *)a1, v9, v11);
    ProtobufEncoder.endLengthDelimited()();
  }
  if (v13)
  {
    ProtobufEncoder.encodeVarint(_:)(0x20uLL);
    ProtobufEncoder.encodeVarint(_:)(v13);
  }
  if (v12 != 0.5)
  {
    ProtobufEncoder.encodeVarint(_:)(0x2DuLL);
    uint64_t v26 = *(void *)(a1 + 8);
    int64_t isUniquelyReferenced_nonNull_native = v26 + 4;
    if (!__OFADD__(v26, 4))
    {
      if (*(void *)(a1 + 16) >= isUniquelyReferenced_nonNull_native)
      {
        *(void *)(a1 + 8) = isUniquelyReferenced_nonNull_native;
        *(float *)(*(void *)a1 + v26) = v12;
        return;
      }
LABEL_36:
      *(float *)ProtobufEncoder.growBufferSlow(to:)(isUniquelyReferenced_nonNull_native) = v12;
      return;
    }
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
}

unint64_t ResolvedShadowStyle.init(from:)@<X0>(unint64_t result@<X0>, unint64_t a2@<X8>)
{
  uint64_t v3 = (void *)result;
  unint64_t v5 = *(void *)(result + 8);
  unint64_t v6 = *(void *)(result + 16);
  if (v5 >= v6)
  {
    char v7 = 0;
    int v8 = 0;
    float v9 = 1.0;
    uint64_t v10 = 0;
    float v11 = 0.5;
    double v12 = 0.0;
    double v13 = 0.0;
    int v14 = 0;
    float v15 = 0.0;
LABEL_4:
    v3[3] = 0;
    *(float *)a2 = v15;
    *(_DWORD *)(a2 + 4) = v14;
    *(_DWORD *)(a2 + 8) = v8;
    *(float *)(a2 + 12) = v9;
    *(double *)(a2 + 16) = v13;
    *(double *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v10;
    *(float *)(a2 + 40) = v11;
    *(unsigned char *)(a2 + 44) = v7;
    return result;
  }
  char v7 = 0;
  int v8 = 0;
  float v9 = 1.0;
  uint64_t v10 = 0;
  float v11 = 0.5;
  double v12 = 0.0;
  double v13 = 0.0;
  int v14 = 0;
  float v15 = 0.0;
  while (2)
  {
    double result = v3[3];
    if (result)
    {
      unint64_t v20 = v3[4];
      if (v5 < v20) {
        goto LABEL_14;
      }
      if (v20 < v5) {
        goto LABEL_82;
      }
      v3[3] = 0;
    }
    double result = ProtobufDecoder.decodeVarint()();
    if (v2) {
      return result;
    }
    if (result <= 7) {
      goto LABEL_82;
    }
LABEL_14:
    switch(result >> 3)
    {
      case 1uLL:
        if ((result & 7) != 2) {
          goto LABEL_82;
        }
        uint64_t v21 = (void *)v3[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21[2] + 1, 1, v21);
        }
        unint64_t v23 = v21[2];
        unint64_t v22 = v21[3];
        if (v23 >= v22 >> 1) {
          uint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v22 > 1), v23 + 1, 1, v21);
        }
        v21[2] = v23 + 1;
        v21[v23 + 4] = v6;
        v3[5] = v21;
        double result = ProtobufDecoder.decodeVarint()();
        if (!v2)
        {
          if ((result & 0x8000000000000000) != 0)
          {
            __break(1u);
            goto LABEL_89;
          }
          unint64_t v24 = v3[1] + result;
          if (v6 < v24) {
            goto LABEL_82;
          }
          v3[2] = v24;
          float v25 = specialized Color.Resolved.init(from:)(v3);
          Swift::UInt v16 = (void *)v3[5];
          if (!v16[2]) {
            goto LABEL_90;
          }
          float v15 = v25;
          int v14 = v26;
          int v8 = v27;
          float v9 = v28;
          double result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            double result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v16);
            Swift::UInt v16 = (void *)result;
            uint64_t v17 = *(void *)(result + 16);
            if (!v17) {
              goto LABEL_91;
            }
            goto LABEL_6;
          }
          uint64_t v17 = v16[2];
          if (v17) {
            goto LABEL_6;
          }
          goto LABEL_91;
        }
        return result;
      case 2uLL:
        unint64_t v29 = result & 7;
        switch(v29)
        {
          case 5uLL:
            uint64_t v40 = (float *)v3[1];
            if (v6 < (unint64_t)(v40 + 1)) {
              goto LABEL_82;
            }
            float v41 = *v40;
            v3[1] = v40 + 1;
            double v13 = v41;
            goto LABEL_7;
          case 2uLL:
            double result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return result;
            }
            if ((result & 0x8000000000000000) != 0) {
              goto LABEL_95;
            }
            uint64_t v30 = (double *)v3[1];
            if (v6 < (unint64_t)v30 + result) {
              goto LABEL_82;
            }
            v3[3] = 17;
            v3[4] = (char *)v30 + result;
            break;
          case 1uLL:
            uint64_t v30 = (double *)v3[1];
            break;
          default:
            goto LABEL_82;
        }
        int v39 = v30 + 1;
        if (v6 < (unint64_t)(v30 + 1)) {
          goto LABEL_82;
        }
        double v13 = *v30;
        goto LABEL_71;
      case 3uLL:
        if ((result & 7) != 2) {
          goto LABEL_82;
        }
        float v31 = (void *)v3[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          float v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31[2] + 1, 1, v31);
        }
        unint64_t v33 = v31[2];
        unint64_t v32 = v31[3];
        if (v33 >= v32 >> 1) {
          float v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v32 > 1), v33 + 1, 1, v31);
        }
        v31[2] = v33 + 1;
        v31[v33 + 4] = v6;
        v3[5] = v31;
        double result = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return result;
        }
        if ((result & 0x8000000000000000) == 0)
        {
          unint64_t v34 = v3[1] + result;
          if (v6 < v34) {
            goto LABEL_82;
          }
          v3[2] = v34;
          double v35 = specialized CGPoint.init(from:)(v3);
          Swift::UInt v16 = (void *)v3[5];
          if (!v16[2]) {
            goto LABEL_92;
          }
          double v12 = v35;
          uint64_t v10 = v36;
          double result = swift_isUniquelyReferenced_nonNull_native();
          if (result)
          {
            uint64_t v17 = v16[2];
            if (!v17) {
              goto LABEL_81;
            }
          }
          else
          {
            double result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v16);
            Swift::UInt v16 = (void *)result;
            uint64_t v17 = *(void *)(result + 16);
            if (!v17)
            {
LABEL_81:
              __break(1u);
LABEL_82:
              lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
              swift_allocError();
              return swift_willThrow();
            }
          }
LABEL_6:
          uint64_t v18 = v17 - 1;
          uint64_t v19 = v16[v18 + 4];
          void v16[2] = v18;
          v3[5] = v16;
          v3[2] = v19;
LABEL_7:
          unint64_t v5 = v3[1];
          unint64_t v6 = v3[2];
          if (v5 >= v6) {
            goto LABEL_4;
          }
          continue;
        }
LABEL_89:
        __break(1u);
LABEL_90:
        __break(1u);
LABEL_91:
        __break(1u);
LABEL_92:
        __break(1u);
LABEL_93:
        __break(1u);
LABEL_94:
        __break(1u);
LABEL_95:
        __break(1u);
LABEL_96:
        __break(1u);
        __break(1u);
LABEL_97:
        __break(1u);
LABEL_98:
        double result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)a2);
        a2 = result;
        for (uint64_t i = *(void *)(result + 16); !i; uint64_t i = *(void *)(a2 + 16))
        {
          __break(1u);
          double result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)a2);
          a2 = result;
          uint64_t i = *(void *)(result + 16);
          if (i) {
            break;
          }
          __break(1u);
          a2 = v3[5];
          if (!*(void *)(a2 + 16)) {
            goto LABEL_97;
          }
          double result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0) {
            goto LABEL_98;
          }
        }
        uint64_t v44 = i - 1;
        uint64_t v45 = *(void *)(a2 + 8 * v44 + 32);
        *(void *)(a2 + 16) = v44;
        v3[5] = a2;
        v3[2] = v45;
        return result;
      case 4uLL:
        if ((result & 7) == 0) {
          goto LABEL_52;
        }
        if ((result & 7) != 2) {
          goto LABEL_82;
        }
        double result = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return result;
        }
        if ((result & 0x8000000000000000) != 0) {
          goto LABEL_93;
        }
        unint64_t v37 = v3[1] + result;
        if (v6 < v37) {
          goto LABEL_82;
        }
        v3[3] = 32;
        v3[4] = v37;
LABEL_52:
        double result = ProtobufDecoder.decodeVarint()();
        if (v2) {
          return result;
        }
        char v7 = result;
        goto LABEL_7;
      case 5uLL:
        if ((result & 7) == 2)
        {
          double result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return result;
          }
          if ((result & 0x8000000000000000) != 0) {
            goto LABEL_94;
          }
          unsigned int v38 = (float *)v3[1];
          if (v6 < (unint64_t)v38 + result) {
            goto LABEL_82;
          }
          v3[3] = 45;
          v3[4] = (char *)v38 + result;
        }
        else
        {
          if ((result & 7) != 5) {
            goto LABEL_82;
          }
          unsigned int v38 = (float *)v3[1];
        }
        int v39 = (double *)(v38 + 1);
        if (v6 < (unint64_t)(v38 + 1)) {
          goto LABEL_82;
        }
        float v11 = *v38;
LABEL_71:
        v3[1] = v39;
        goto LABEL_7;
      default:
        switch(result & 7)
        {
          case 0uLL:
            double result = ProtobufDecoder.decodeVarint()();
            if (!v2) {
              goto LABEL_7;
            }
            return result;
          case 1uLL:
            unint64_t v42 = v3[1] + 8;
            if (v6 < v42) {
              goto LABEL_82;
            }
            goto LABEL_79;
          case 2uLL:
            double result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return result;
            }
            if ((result & 0x8000000000000000) != 0) {
              goto LABEL_96;
            }
            unint64_t v42 = v3[1] + result;
            if (v6 < v42) {
              goto LABEL_82;
            }
LABEL_79:
            v3[1] = v42;
            break;
          case 5uLL:
            unint64_t v42 = v3[1] + 4;
            if (v6 < v42) {
              goto LABEL_82;
            }
            goto LABEL_79;
          default:
            goto LABEL_82;
        }
        goto LABEL_7;
    }
  }
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance ResolvedShadowStyle(uint64_t a1)
{
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance ResolvedShadowStyle@<X0>(unint64_t a1@<X0>, unint64_t a2@<X8>)
{
  return ResolvedShadowStyle.init(from:)(a1, a2);
}

BOOL specialized static ResolvedShadowStyle.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  BOOL result = 0;
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_f32(*(float32x4_t *)a1, *(float32x4_t *)a2)), 0xFuLL))) & 1) != 0
    && *(float *)(a1 + 40) == *(float *)(a2 + 40)
    && *(double *)(a1 + 16) == *(double *)(a2 + 16)
    && *(double *)(a1 + 24) == *(double *)(a2 + 24)
    && *(double *)(a1 + 32) == *(double *)(a2 + 32))
  {
    return *(unsigned __int8 *)(a1 + 44) == *(unsigned __int8 *)(a2 + 44);
  }
  return result;
}

BOOL specialized static ShadowStyle.Storage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  double v5 = *(double *)(a1 + 16);
  double v4 = *(double *)(a1 + 24);
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  double v9 = *(double *)(a2 + 16);
  double v8 = *(double *)(a2 + 24);
  double v10 = *(double *)(a2 + 32);
  if ((v3 & 0x8000000000000000) == 0)
  {
    if ((v7 & 0x8000000000000000) == 0)
    {
      int v11 = *(void *)a1;
      outlined consume of ShadowStyle.Storage(*(void *)a1, v3);
      outlined consume of ShadowStyle.Storage(v6, v7);
      return v11 == v6;
    }
    goto LABEL_6;
  }
  double v19 = *(double *)(a1 + 32);
  uint64_t v13 = v3 & 0x7FFFFFFFFFFFFFFFLL;
  if ((v7 & 0x8000000000000000) == 0)
  {
    swift_retain();
LABEL_6:
    uint64_t v14 = v6;
    uint64_t v15 = v7;
LABEL_7:
    outlined copy of ShadowStyle.Storage(v14, v15);
    outlined consume of ShadowStyle.Storage(v2, v3);
    outlined consume of ShadowStyle.Storage(v6, v7);
    return 0;
  }
  if (*(void *)a1 != v6)
  {
    outlined copy of ShadowStyle.Storage(v6, v7);
    uint64_t v14 = v2;
    uint64_t v15 = v3;
    goto LABEL_7;
  }
  if (v13 == (v7 & 0x7FFFFFFFFFFFFFFFLL))
  {
    outlined copy of ShadowStyle.Storage(v6, v7);
    double v17 = v19;
    outlined copy of ShadowStyle.Storage(v2, v3);
    outlined consume of ShadowStyle.Storage(v2, v3);
    outlined consume of ShadowStyle.Storage(v6, v7);
    if (v5 != v9) {
      return 0;
    }
    return v17 == v10 && v4 == v8;
  }
  uint64_t v18 = *(uint64_t (**)(uint64_t))(*(void *)v13 + 88);
  outlined copy of ShadowStyle.Storage(v6, v7);
  outlined copy of ShadowStyle.Storage(v2, v3);
  char v16 = v18(v7 & 0x7FFFFFFFFFFFFFFFLL);
  outlined consume of ShadowStyle.Storage(v2, v3);
  outlined consume of ShadowStyle.Storage(v6, v7);
  BOOL result = 0;
  if (v16)
  {
    double v17 = v19;
    if (v5 == v9) {
      return v17 == v10 && v4 == v8;
    }
  }
  return result;
}

uint64_t outlined copy of ShadowStyle.Storage(uint64_t a1, uint64_t a2)
{
  if (a2 < 0) {
    return swift_retain();
  }
  return result;
}

uint64_t type metadata accessor for _ShadowShapeStyle()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t outlined consume of ShadowStyle.Storage(uint64_t a1, uint64_t a2)
{
  if (a2 < 0) {
    return swift_release();
  }
  return result;
}

uint64_t partial apply for closure #2 in _ShadowShapeStyle._apply(to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #2 in _ShadowShapeStyle._apply(to:)(a1, *(void *)(v2 + 32), a2);
}

void type metadata accessor for _ShadowShapeStyle<AnyShapeStyle>()
{
  if (!lazy cache variable for type metadata for _ShadowShapeStyle<AnyShapeStyle>)
  {
    unint64_t v0 = type metadata accessor for _ShadowShapeStyle();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ShadowShapeStyle<AnyShapeStyle>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ShadowStyle.Kind and conformance ShadowStyle.Kind()
{
  unint64_t result = lazy protocol witness table cache variable for type ShadowStyle.Kind and conformance ShadowStyle.Kind;
  if (!lazy protocol witness table cache variable for type ShadowStyle.Kind and conformance ShadowStyle.Kind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShadowStyle.Kind and conformance ShadowStyle.Kind);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ShadowStyle.Kind and conformance ShadowStyle.Kind;
  if (!lazy protocol witness table cache variable for type ShadowStyle.Kind and conformance ShadowStyle.Kind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShadowStyle.Kind and conformance ShadowStyle.Kind);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ShadowStyle.Kind and conformance ShadowStyle.Kind;
  if (!lazy protocol witness table cache variable for type ShadowStyle.Kind and conformance ShadowStyle.Kind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShadowStyle.Kind and conformance ShadowStyle.Kind);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ShadowStyle.Kind and conformance ShadowStyle.Kind;
  if (!lazy protocol witness table cache variable for type ShadowStyle.Kind and conformance ShadowStyle.Kind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShadowStyle.Kind and conformance ShadowStyle.Kind);
  }
  return result;
}

uint64_t associated type witness table accessor for Animatable.AnimatableData : VectorArithmetic in ResolvedShadowStyle()
{
  return _s7SwiftUI14AnimatablePairVyACySfACySfACyS2fGGGACy12CoreGraphics7CGFloatVACyA2IGGGACyxq_GAA16VectorArithmeticAAWlTm_0(&lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>> and conformance AnimatablePair<A, B>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>);
}

uint64_t _s7SwiftUI14AnimatablePairVyACySfACySfACyS2fGGGACy12CoreGraphics7CGFloatVACyA2IGGGACyxq_GAA16VectorArithmeticAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

double sub_245DE2218(uint64_t a1)
{
  return ResolvedShadowStyle.animatableData.setter(a1);
}

uint64_t initializeWithCopy for ShadowStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  outlined copy of ShadowStyle.Storage(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return a1;
}

uint64_t assignWithCopy for ShadowStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  outlined copy of ShadowStyle.Storage(*(void *)a2, v5);
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  outlined consume of ShadowStyle.Storage(v9, v10);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for ShadowStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  long long v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v7;
  *(void *)(a1 + 32) = v4;
  outlined consume of ShadowStyle.Storage(v5, v6);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for ShadowStyle(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 44)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unsigned int v2 = *(_DWORD *)(a1 + 1);
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

double storeEnumTagSinglePayload for ShadowStyle(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    double result = 0.0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_DWORD *)(a1 + 40) = 0;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 44) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)a1 = (unint64_t)-a2 << 8;
      double result = 0.0;
      *(_OWORD *)(a1 + 8) = 0u;
      *(_OWORD *)(a1 + 24) = 0u;
      return result;
    }
    *(unsigned char *)(a1 + 44) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ShadowStyle()
{
  return &type metadata for ShadowStyle;
}

uint64_t type metadata completion function for _ShadowShapeStyle()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _ShadowShapeStyle(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 44 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v12 = *(void *)v11;
    uint64_t v13 = *(void *)(v11 + 8);
    uint64_t v14 = *(void *)(v11 + 16);
    uint64_t v15 = *(void *)(v11 + 24);
    uint64_t v16 = *(void *)(v11 + 32);
    outlined copy of ShadowStyle.Storage(*(void *)v11, v13);
    *(void *)unint64_t v10 = v12;
    *(void *)(v10 + 8) = v13;
    *(void *)(v10 + 16) = v14;
    *(void *)(v10 + 24) = v15;
    *(void *)(v10 + 32) = v16;
    *(_DWORD *)(v10 + 40) = *(_DWORD *)(v11 + 40);
  }
  return v4;
}

uint64_t destroy for _ShadowShapeStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v3)();
  uint64_t v4 = (uint64_t *)((a1 + *(void *)(v3 + 56) + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];

  return outlined consume of ShadowStyle.Storage(v5, v6);
}

uint64_t initializeWithCopy for _ShadowShapeStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)v8;
  uint64_t v10 = *(void *)(v8 + 8);
  uint64_t v11 = *(void *)(v8 + 16);
  uint64_t v12 = *(void *)(v8 + 24);
  uint64_t v13 = *(void *)(v8 + 32);
  outlined copy of ShadowStyle.Storage(*(void *)v8, v10);
  *(void *)unint64_t v7 = v9;
  *(void *)(v7 + 8) = v10;
  *(void *)(v7 + 16) = v11;
  *(void *)(v7 + 24) = v12;
  *(void *)(v7 + 32) = v13;
  *(_DWORD *)(v7 + 40) = *(_DWORD *)(v8 + 40);
  return a1;
}

uint64_t assignWithCopy for _ShadowShapeStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)v8;
  uint64_t v10 = *(void *)(v8 + 8);
  uint64_t v11 = *(void *)(v8 + 16);
  uint64_t v12 = *(void *)(v8 + 24);
  uint64_t v13 = *(void *)(v8 + 32);
  outlined copy of ShadowStyle.Storage(*(void *)v8, v10);
  uint64_t v14 = *(void *)v7;
  uint64_t v15 = *(void *)(v7 + 8);
  *(void *)unint64_t v7 = v9;
  *(void *)(v7 + 8) = v10;
  *(void *)(v7 + 16) = v11;
  *(void *)(v7 + 24) = v12;
  *(void *)(v7 + 32) = v13;
  outlined consume of ShadowStyle.Storage(v14, v15);
  *(_DWORD *)(v7 + 40) = *(_DWORD *)(v8 + 40);
  return a1;
}

uint64_t initializeWithTake for _ShadowShapeStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  unint64_t v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  long long v9 = *(_OWORD *)((char *)v8 + 28);
  long long v10 = v8[1];
  *unint64_t v7 = *v8;
  v7[1] = v10;
  *(_OWORD *)((char *)v7 + 28) = v9;
  return a1;
}

uint64_t assignWithTake for _ShadowShapeStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  unint64_t v7 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void *)(v7 + 32);
  unint64_t v9 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = *(void *)v9;
  uint64_t v11 = *(void *)(v9 + 8);
  long long v12 = *(_OWORD *)(v7 + 16);
  *(_OWORD *)unint64_t v9 = *(_OWORD *)v7;
  *(_OWORD *)(v9 + 16) = v12;
  *(void *)(v9 + 32) = v8;
  outlined consume of ShadowStyle.Storage(v10, v11);
  *(_DWORD *)(v9 + 40) = *(_DWORD *)(v7 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ShadowShapeStyle(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2 && *((unsigned char *)a1 + ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 44)) {
    return v7 + *a1 + 1;
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unsigned int v9 = *(_DWORD *)((((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 1);
  if (v9 > 0x80000000) {
    return -v9;
  }
  else {
    return 0;
  }
}

double storeEnumTagSinglePayload for _ShadowShapeStyle(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 44;
  if (v8 >= a2)
  {
    if (v8 < a3) {
      a1[v10] = 0;
    }
    if (a2)
    {
      if (v7 < 0x7FFFFFFF)
      {
        unint64_t v14 = (unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8;
        if ((a2 & 0x80000000) != 0)
        {
          double result = 0.0;
          *(_OWORD *)(v14 + 24) = 0u;
          *(_OWORD *)(v14 + 8) = 0u;
          *(_DWORD *)(v14 + 40) = 0;
          *(void *)unint64_t v14 = a2 ^ 0x80000000;
        }
        else
        {
          *(void *)unint64_t v14 = (unint64_t)-a2 << 8;
          double result = 0.0;
          *(_OWORD *)(v14 + 8) = 0u;
          *(_OWORD *)(v14 + 24) = 0u;
        }
      }
      else
      {
        uint64_t v13 = *(void (**)(void))(v6 + 56);
        v13();
      }
    }
  }
  else
  {
    int v11 = ~v8 + a2;
    bzero(a1, v10);
    *(_DWORD *)a1 = v11;
    if (v8 < a3) {
      a1[v10] = 1;
    }
  }
  return result;
}

_UNKNOWN **sub_245DE2B68()
{
  return &protocol witness table for _ShadowShapeStyle<A>;
}

uint64_t destroy for ShadowStyle(uint64_t *a1)
{
  return outlined consume of ShadowStyle.Storage(*a1, a1[1]);
}

uint64_t *initializeWithCopy for ShadowStyle.Storage(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  outlined copy of ShadowStyle.Storage(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  return a1;
}

uint64_t *assignWithCopy for ShadowStyle.Storage(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  outlined copy of ShadowStyle.Storage(*a2, v4);
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  outlined consume of ShadowStyle.Storage(v8, v9);
  return a1;
}

uint64_t assignWithTake for ShadowStyle.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = v3;
  outlined consume of ShadowStyle.Storage(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for ShadowStyle.Storage(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unsigned int v2 = *(_DWORD *)(a1 + 1);
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

double storeEnumTagSinglePayload for ShadowStyle.Storage(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    double result = 0.0;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)a1 = (unint64_t)-a2 << 8;
      double result = 0.0;
      *(_OWORD *)(a1 + 8) = 0u;
      *(_OWORD *)(a1 + 24) = 0u;
      return result;
    }
    *(unsigned char *)(a1 + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *destructiveInjectEnumTag for ShadowStyle.Storage(void *result, uint64_t a2)
{
  uint64_t v2 = result[1] & 0xFFFFFFFFFFFFFF8 | (a2 << 63);
  *double result = *(unsigned __int8 *)result;
  result[1] = v2;
  return result;
}

ValueMetadata *type metadata accessor for ShadowStyle.Storage()
{
  return &type metadata for ShadowStyle.Storage;
}

uint64_t AnchoredResolvedPaint.init(_:bounds:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>, double a8@<D3>)
{
  return AnchoredResolvedPaint.init(_:bounds:)(a1, a2, a3, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AnchoredResolvedPaint, a4, a5, a6, a7, a8);
}

uint64_t type metadata accessor for AnchoredResolvedPaint()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t _AnchoredShapeStyle.style.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t _AnchoredShapeStyle.style.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*_AnchoredShapeStyle.style.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double _AnchoredShapeStyle.bounds.getter(uint64_t a1)
{
  return *(double *)(v1 + *(int *)(a1 + 36));
}

uint64_t _AnchoredShapeStyle.bounds.setter(uint64_t result, double a2, double a3, double a4, double a5)
{
  long long v6 = (double *)(v5 + *(int *)(result + 36));
  *long long v6 = a2;
  v6[1] = a3;
  v6[2] = a4;
  v6[3] = a5;
  return result;
}

uint64_t (*_AnchoredShapeStyle.bounds.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double static _AnchoredShapeStyle._makeView<A>(view:inputs:)@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  int v9 = *a1;
  uint64_t v10 = *a2;
  int v11 = *((_DWORD *)a2 + 2);
  uint64_t v12 = a2[2];
  int v13 = *((_DWORD *)a2 + 20);
  unint64_t v14 = (ValueMetadata *)type metadata accessor for _AnchoredShapeStyle();
  int v25 = v9;
  uint64_t v17 = v10;
  int v18 = v11;
  uint64_t v19 = v12;
  long long v15 = *(_OWORD *)(a2 + 5);
  long long v20 = *(_OWORD *)(a2 + 3);
  long long v21 = v15;
  long long v22 = *(_OWORD *)(a2 + 7);
  uint64_t v23 = a2[9];
  int v24 = v13;
  return static ShapeStyle.legacyMakeShapeView<A>(view:inputs:)(&v25, (uint64_t)&v17, v14, a3, (uint64_t)&protocol witness table for _AnchoredShapeStyle<A>, a4, a5);
}

double protocol witness for static ShapeStyle._makeView<A>(view:inputs:) in conformance _AnchoredShapeStyle<A>@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static _AnchoredShapeStyle._makeView<A>(view:inputs:)(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for static ShapeStyle._apply(to:) in conformance _AnchoredShapeStyle<A>(uint64_t a1, uint64_t a2)
{
  return static _AnchoredShapeStyle._apply(to:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t static _AnchoredShapeStyle._apply(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t AnchoredResolvedPaint.paint.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t AnchoredResolvedPaint.paint.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*AnchoredResolvedPaint.paint.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double AnchoredResolvedPaint.bounds.getter(uint64_t a1)
{
  return *(double *)(v1 + *(int *)(a1 + 36));
}

uint64_t AnchoredResolvedPaint.bounds.setter(uint64_t result, double a2, double a3, double a4, double a5)
{
  long long v6 = (double *)(v5 + *(int *)(result + 36));
  *long long v6 = a2;
  v6[1] = a3;
  v6[2] = a4;
  v6[3] = a5;
  return result;
}

uint64_t (*AnchoredResolvedPaint.bounds.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t AnchoredResolvedPaint.draw(path:style:in:bounds:)(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  long long v18 = a2[1];
  long long v19 = *a2;
  uint64_t v9 = *((void *)a2 + 4);
  char v10 = *((unsigned char *)a2 + 40);
  uint64_t v11 = v5 + *(int *)(a5 + 36);
  uint64_t v12 = *(void *)(v11 + 16);
  uint64_t v13 = *(void *)(v11 + 24);
  float64x2_t v17 = *(float64x2_t *)v11;
  outlined init with take of CGRect?(a4, (uint64_t)v23);
  int32x2_t v14 = vdup_n_s32(v24);
  v15.i64[0] = v14.u32[0];
  v15.i64[1] = v14.u32[1];
  v20[0] = v19;
  v20[1] = v18;
  uint64_t v21 = v9;
  char v22 = v10;
  float64x2_t v25 = vaddq_f64(v17, (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v15, 0x3FuLL)), (int8x16_t)vdupq_n_s64(0x8000000000000000), v23[0]));
  uint64_t v26 = v12;
  uint64_t v27 = v13;
  char v28 = 0;
  return (*(uint64_t (**)(uint64_t, _OWORD *, uint64_t, float64x2_t *, void))(*(void *)(a5 + 24) + 32))(a1, v20, a3, &v25, *(void *)(a5 + 16));
}

uint64_t AnchoredResolvedPaint.isClear.getter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 40))(*(void *)(a1 + 16));
}

uint64_t AnchoredResolvedPaint.isOpaque.getter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 48))(*(void *)(a1 + 16));
}

uint64_t AnchoredResolvedPaint.isCALayerCompatible.getter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))(*(void *)(a1 + 16));
}

uint64_t AnchoredResolvedPaint.animatableData.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(*(void *)(a1 + 24) + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  double v8 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  char v10 = (char *)v16 - v9;
  (*(void (**)(uint64_t, uint64_t, double))(v6 + 24))(v5, v6, v8);
  uint64_t v11 = (_OWORD *)(v2 + *(int *)(a1 + 36));
  long long v12 = v11[1];
  v16[0] = *v11;
  v16[1] = v12;
  type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
  uint64_t v14 = v13;
  swift_getAssociatedConformanceWitness();
  _s7SwiftUI14AnimatablePairVy12CoreGraphics7CGFloatVAFGACyxq_GAA16VectorArithmeticAAWlTm_0(&lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>);
  return AnimatablePair.init(_:_:)((uint64_t)v10, (uint64_t)v16, AssociatedTypeWitness, v14, a2);
}

uint64_t AnchoredResolvedPaint.animatableData.setter(uint64_t a1, uint64_t a2)
{
  specialized AnchoredResolvedPaint.animatableData.setter(a1, a2);
  swift_getAssociatedTypeWitness();
  type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
  swift_getAssociatedConformanceWitness();
  _s7SwiftUI14AnimatablePairVy12CoreGraphics7CGFloatVAFGACyxq_GAA16VectorArithmeticAAWlTm_0(&lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>);
  uint64_t v3 = type metadata accessor for AnimatablePair();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
}

void (*AnchoredResolvedPaint.animatableData.modify(void *a1, uint64_t a2))(uint64_t a1, char a2)
{
  uint64_t v5 = malloc(0x50uLL);
  *a1 = v5;
  v5[4] = a2;
  v5[5] = v2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
  uint64_t v8 = v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v10 = _s7SwiftUI14AnimatablePairVy12CoreGraphics7CGFloatVAFGACyxq_GAA16VectorArithmeticAAWlTm_0(&lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>);
  *uint64_t v5 = AssociatedTypeWitness;
  v5[1] = v8;
  v5[2] = AssociatedConformanceWitness;
  v5[3] = v10;
  uint64_t v11 = type metadata accessor for AnimatablePair();
  v5[6] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v5[7] = v12;
  size_t v13 = *(void *)(v12 + 64);
  v5[8] = malloc(v13);
  uint64_t v14 = malloc(v13);
  _OWORD v5[9] = v14;
  AnchoredResolvedPaint.animatableData.getter(a2, (uint64_t)v14);
  return AnchoredResolvedPaint.animatableData.modify;
}

void AnchoredResolvedPaint.animatableData.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 64);
  uint64_t v4 = *(void **)(*(void *)a1 + 72);
  uint64_t v5 = *(void *)(*(void *)a1 + 48);
  uint64_t v6 = *(void *)(*(void *)a1 + 56);
  uint64_t v7 = *(void *)(*(void *)a1 + 32);
  if (a2)
  {
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*(void *)a1 + 64), v4, v5);
    double v8 = specialized AnchoredResolvedPaint.animatableData.setter((uint64_t)v3, v7);
    uint64_t v9 = *(void (**)(void *, uint64_t, double))(v6 + 8);
    v9(v3, v5, v8);
    ((void (*)(void *, uint64_t))v9)(v4, v5);
  }
  else
  {
    double v10 = specialized AnchoredResolvedPaint.animatableData.setter(*(void *)(*(void *)a1 + 72), v7);
    (*(void (**)(void *, uint64_t, double))(v6 + 8))(v4, v5, v10);
  }
  free(v4);
  free(v3);

  free(v2);
}

void static AnchoredResolvedPaint.leafProtobufTag.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
}

BOOL static AnchoredResolvedPaint.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = *(int *)(type metadata accessor for AnchoredResolvedPaint() + 36);
  return CGRectEqualToRect(*(CGRect *)(a1 + v4), *(CGRect *)(a2 + v4));
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AnchoredResolvedPaint<A>(uint64_t a1, uint64_t a2)
{
  return static AnchoredResolvedPaint.== infix(_:_:)(a1, a2);
}

uint64_t protocol witness for Animatable.animatableData.setter in conformance AnchoredResolvedPaint<A>(uint64_t a1, uint64_t a2)
{
  specialized AnchoredResolvedPaint.animatableData.setter(a1, a2);
  swift_getAssociatedTypeWitness();
  type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
  swift_getAssociatedConformanceWitness();
  _s7SwiftUI14AnimatablePairVy12CoreGraphics7CGFloatVAFGACyxq_GAA16VectorArithmeticAAWlTm_0(&lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>);
  uint64_t v3 = type metadata accessor for AnimatablePair();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
}

void (*protocol witness for Animatable.animatableData.modify in conformance AnchoredResolvedPaint<A>(void *a1, uint64_t a2))(void *a1)
{
  uint64_t v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = AnchoredResolvedPaint.animatableData.modify(v4, a2);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

uint64_t AnchoredResolvedPaint.encode(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)(a2 + 24) + 80))(a1, *(void *)(a2 + 16));
  if (!v3)
  {
    uint64_t v6 = (double *)(v2 + *(int *)(a2 + 36));
    double v7 = *v6;
    double v8 = v6[1];
    double v9 = v6[2];
    double v10 = v6[3];
    ProtobufEncoder.encodeVarint(_:)(0x3AuLL);
    return specialized ProtobufEncoder.encodeMessage<A>(_:)(v7, v8, v9, v10);
  }
  return result;
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance AnchoredResolvedPaint<A>(uint64_t a1, uint64_t a2)
{
  return AnchoredResolvedPaint.encode(to:)(a1, a2);
}

uint64_t ShapeStyle.in(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  uint64_t v13 = *(void *)(a1 - 8);
  double v14 = MEMORY[0x270FA5388](a1);
  uint64_t v16 = (char *)&v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))(v16, v6, a1, v14);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(a2, v16, a1);
  uint64_t result = type metadata accessor for _AnchoredShapeStyle();
  long long v18 = (double *)(a2 + *(int *)(result + 36));
  *long long v18 = a3;
  v18[1] = a4;
  void v18[2] = a5;
  v18[3] = a6;
  return result;
}

double specialized AnchoredResolvedPaint.animatableData.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(*(void *)(a2 + 24) + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  double v8 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  double v10 = (char *)&v21 - v9;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))((char *)&v21 - v9, a1, AssociatedTypeWitness, v8);
  type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
  uint64_t v13 = v12;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v15 = _s7SwiftUI14AnimatablePairVy12CoreGraphics7CGFloatVAFGACyxq_GAA16VectorArithmeticAAWlTm_0(&lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>);
  uint64_t v22 = AssociatedTypeWitness;
  uint64_t v23 = v13;
  uint64_t v24 = AssociatedConformanceWitness;
  uint64_t v25 = v15;
  uint64_t v16 = (long long *)(a1 + *(int *)(type metadata accessor for AnimatablePair() + 52));
  long long v21 = *v16;
  uint64_t v17 = *((void *)v16 + 2);
  uint64_t v18 = *((void *)v16 + 3);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v10, v5, v6);
  uint64_t v19 = v2 + *(int *)(a2 + 36);
  double result = *(double *)&v21;
  *(_OWORD *)uint64_t v19 = v21;
  *(void *)(v19 + 16) = v17;
  *(void *)(v19 + 24) = v18;
  return result;
}

uint64_t instantiation function for generic protocol witness table for AnchoredResolvedPaint<A>(uint64_t a1)
{
  *(void *)(a1 + 8) = swift_getWitnessTable();
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_245DE3C44@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for AnchoredResolvedPaint();
  return AnchoredResolvedPaint.animatableData.getter(v2, a1);
}

double sub_245DE3C80(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AnchoredResolvedPaint();
  return specialized AnchoredResolvedPaint.animatableData.setter(a1, v2);
}

uint64_t sub_245DE3CC0()
{
  return 16;
}

__n128 sub_245DE3CCC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _AnchoredShapeStyle(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 32 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    double v10 = (_OWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    long long v11 = v10[1];
    uint64_t v12 = (_OWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    _OWORD *v12 = *v10;
    v12[1] = v11;
  }
  return v4;
}

uint64_t assignWithCopy for _AnchoredShapeStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  double v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  v7[1] = v8[1];
  void v7[2] = v8[2];
  v7[3] = v8[3];
  return a1;
}

uint64_t initializeWithTake for _AnchoredShapeStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  int v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  double v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  long long v9 = v8[1];
  *int v7 = *v8;
  v7[1] = v9;
  return a1;
}

uint64_t assignWithTake for _AnchoredShapeStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  double v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  v7[1] = v8[1];
  void v7[2] = v8[2];
  v7[3] = v8[3];
  return a1;
}

_UNKNOWN **sub_245DE3FC0()
{
  return &protocol witness table for _AnchoredShapeStyle<A>;
}

double StrokeStyle.lineWidth.getter()
{
  return *(double *)v0;
}

void StrokeStyle.lineWidth.setter(double a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*StrokeStyle.lineWidth.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t StrokeStyle.lineCap.getter()
{
  return *(unsigned int *)(v0 + 8);
}

uint64_t StrokeStyle.lineCap.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*StrokeStyle.lineCap.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t StrokeStyle.lineJoin.getter()
{
  return *(unsigned int *)(v0 + 12);
}

uint64_t StrokeStyle.lineJoin.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 12) = result;
  return result;
}

uint64_t (*StrokeStyle.lineJoin.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double StrokeStyle.miterLimit.getter()
{
  return *(double *)(v0 + 16);
}

void StrokeStyle.miterLimit.setter(double a1)
{
  *(double *)(v1 + 16) = a1;
}

uint64_t (*StrokeStyle.miterLimit.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t StrokeStyle.dash.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t StrokeStyle.dash.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 24) = a1;
  return result;
}

uint64_t (*StrokeStyle.dash.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double StrokeStyle.dashPhase.getter()
{
  return *(double *)(v0 + 32);
}

void StrokeStyle.dashPhase.setter(double a1)
{
  *(double *)(v1 + 32) = a1;
}

uint64_t (*StrokeStyle.dashPhase.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double StrokeStyle.animatableData.getter()
{
  return *(double *)v0;
}

void StrokeStyle.animatableData.setter(double a1, double a2, double a3)
{
  *uint64_t v3 = a1;
  v3[2] = a2;
  v3[4] = a3;
}

uint64_t (*StrokeStyle.animatableData.modify(void *a1))()
{
  a1[3] = v1;
  uint64_t v2 = v1[2];
  uint64_t v3 = v1[4];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = v3;
  return StrokeStyle.animatableData.modify;
}

double protocol witness for Animatable.animatableData.getter in conformance StrokeStyle@<D0>(void *a1@<X8>)
{
  double result = *(double *)v1;
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 32);
  *a1 = *(void *)v1;
  a1[1] = v3;
  a1[2] = v4;
  return result;
}

double protocol witness for Animatable.animatableData.setter in conformance StrokeStyle(uint64_t a1)
{
  double result = *(double *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  *uint64_t v1 = *(void *)a1;
  v1[2] = v3;
  v1[4] = v4;
  return result;
}

uint64_t (*protocol witness for Animatable.animatableData.modify in conformance StrokeStyle(void *a1))()
{
  a1[3] = v1;
  uint64_t v2 = v1[2];
  uint64_t v3 = v1[4];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = v3;
  return StrokeStyle.animatableData.modify;
}

double StrokeStyle.animatableData.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 24);
  double result = *(double *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  *uint64_t v1 = *(void *)a1;
  v1[2] = v3;
  v1[4] = v4;
  return result;
}

uint64_t associated type witness table accessor for Animatable.AnimatableData : VectorArithmetic in StrokeStyle()
{
  return lazy protocol witness table accessor for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>(&lazy protocol witness table cache variable for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>);
}

uint64_t lazy protocol witness table accessor for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

double sub_245DE427C@<D0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  double result = *(double *)a1;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 32);
  *a2 = *(void *)a1;
  a2[1] = v3;
  a2[2] = v4;
  return result;
}

double sub_245DE4294(uint64_t a1, void *a2)
{
  double result = *(double *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  *a2 = *(void *)a1;
  a2[2] = v3;
  a2[4] = v4;
  return result;
}

void *initializeWithCopy for StrokeStyle(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v3 = a2[3];
  a1[2] = a2[2];
  a1[3] = v3;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for StrokeStyle(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

void *assignWithTake for StrokeStyle(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  return a1;
}

ValueMetadata *type metadata accessor for Image.RenderingModeProvider()
{
  return &type metadata for Image.RenderingModeProvider;
}

double Image.RenderingModeProvider.resolveNamedImage(in:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for ImageResolutionContext();
  MEMORY[0x270FA5388](v5);
  int v7 = &v18[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v8);
  double v10 = (long long *)&v18[-v9];
  uint64_t v11 = *v2;
  unsigned __int8 v12 = *((unsigned char *)v2 + 8);
  outlined init with copy of ImageResolutionContext(a1, (uint64_t)v7);
  long long v21 = *v7;
  LOBYTE(v20) = v12;
  if ((EnvironmentValues.imageIsTemplate(renderingMode:)((unsigned __int8 *)&v20) & 1) == 0)
  {
    uint64_t v13 = *(int *)(v5 + 32);
    if (*((unsigned char *)v7 + v13) == 8) {
      *((unsigned char *)v7 + v13) = 1;
    }
  }
  outlined init with take of ImageResolutionContext((uint64_t)v7, (uint64_t)v10);
  (*(void (**)(long long *__return_ptr, long long *))(*(void *)v11 + 88))(&v21, v10);
  uint64_t v14 = *((void *)&v21 + 1);
  if (*((void *)&v21 + 1))
  {
    long long v20 = *v10;
    unsigned __int8 v19 = v12;
    char v15 = EnvironmentValues.imageIsTemplate(renderingMode:)(&v19);
    outlined destroy of ImageResolutionContext((uint64_t)v10);
    BYTE14(v22) = v15 & 1;
  }
  else
  {
    outlined destroy of ImageResolutionContext((uint64_t)v10);
  }
  *(void *)a2 = v21;
  *(void *)(a2 + 8) = v14;
  double result = *(double *)&v22;
  long long v17 = v23;
  *(_OWORD *)(a2 + 16) = v22;
  *(_OWORD *)(a2 + 32) = v17;
  return result;
}

uint64_t specialized static Image.RenderingModeProvider.== infix(_:_:)(unsigned __int8 *a1, uint64_t a2)
{
  int v2 = a1[8];
  int v3 = *(unsigned __int8 *)(a2 + 8);
  if (*(void *)a1 != *(void *)a2 && ((*(uint64_t (**)(void))(**(void **)a1 + 96))() & 1) == 0) {
    return 0;
  }
  if (v2 == 2)
  {
    if (v3 != 2) {
      return 0;
    }
  }
  else if (v3 == 2 || ((v3 ^ v2) & 1) != 0)
  {
    return 0;
  }
  return 1;
}

uint64_t TypesettingLanguage.Flags.rawValue.getter()
{
  return *v0;
}

uint64_t TypesettingLanguage.Flags.rawValue.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*TypesettingLanguage.Flags.rawValue.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t TypesettingLanguage.Flags.init(rawValue:)@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static TypesettingLanguage.Flags.modifyFont.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t TypesettingLanguage.storage.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of TypesettingLanguage.Storage(v1, a1, type metadata accessor for TypesettingLanguage.Storage);
}

uint64_t TypesettingLanguage.storage.setter(uint64_t a1)
{
  return outlined assign with take of TypesettingLanguage.Storage(a1, v1);
}

uint64_t (*TypesettingLanguage.storage.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t static TypesettingLanguage.explicit(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)(0, (unint64_t *)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags), MEMORY[0x263F07648]);
  uint64_t v5 = v4;
  uint64_t v6 = *(int *)(v4 + 48);
  uint64_t v7 = type metadata accessor for Locale.Language();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a2, a1, v7);
  *(unsigned char *)(a2 + v6) = 1;
  uint64_t v8 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);

  return v8(a2, 0, 2, v5);
}

uint64_t one-time initialization function for contentAware(uint64_t a1)
{
  return one-time initialization function for automatic(a1, static TypesettingLanguage.contentAware, 2);
}

uint64_t static TypesettingLanguage.contentAware.getter@<X0>(uint64_t a1@<X8>)
{
  return static TypesettingLanguage.automatic.getter(one-time initialization token for contentAware, (uint64_t)static TypesettingLanguage.contentAware, a1);
}

void one-time initialization function for languageModifiers()
{
  static AnyFontModifier.languageModifiers = (_UNKNOWN *)MEMORY[0x263F8EE80];
}

void LanguageFontModifier.modify(descriptor:in:)(CTFontDescriptorRef *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *a1;
  uint64_t v8 = (void *)*MEMORY[0x263F03A20];
  CFTypeRef v9 = CTFontDescriptorCopyAttribute(*a1, (CFStringRef)*MEMORY[0x263F03A20]);
  swift_unknownObjectRelease();
  if (!v9)
  {
    type metadata accessor for _ContiguousArrayStorage<(CFStringRef, String)>();
    initeCGFloat d = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2461B9DC0;
    *(void *)(inited + 32) = v8;
    *(void *)(inited + 40) = a3;
    *(void *)(inited + 48) = a4;
    id v11 = v8;
    swift_bridgeObjectRetain();
    specialized Dictionary.init(dictionaryLiteral:)(inited);
    type metadata accessor for CFStringRef(0);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef();
    CFDictionaryRef isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    CTFontDescriptorRef CopyWithAttributes = CTFontDescriptorCreateCopyWithAttributes(v7, isa);

    *a1 = CopyWithAttributes;
  }
}

void protocol witness for FontModifier.modify(descriptor:in:) in conformance LanguageFontModifier(CTFontDescriptorRef *a1, uint64_t a2)
{
  LanguageFontModifier.modify(descriptor:in:)(a1, a2, *v2, v2[1]);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance LanguageFontModifier()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance LanguageFontModifier()
{
  return String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance LanguageFontModifier()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance LanguageFontModifier(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t View.typesettingLanguage(_:isEnabled:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v14 = a4;
  uint64_t v7 = type metadata accessor for Locale.Language();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  MEMORY[0x270FA5388](v7);
  uint64_t KeyPath = swift_getKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v7);
  unint64_t v11 = (*(unsigned __int8 *)(v8 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v12 = swift_allocObject();
  *(unsigned char *)(v12 + 16) = a2;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v12 + v11, (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  View.transformEnvironment<A>(_:transform:)(KeyPath, (uint64_t)partial apply for closure #1 in View.typesettingLanguage(_:isEnabled:), v12, a3);
  swift_release();
  return swift_release();
}

uint64_t closure #1 in View.typesettingLanguage(_:isEnabled:)(uint64_t result, char a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = result;
    outlined destroy of TypesettingLanguage.Storage(result, type metadata accessor for TypesettingLanguage);
    type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)(0, (unint64_t *)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags), MEMORY[0x263F07648]);
    uint64_t v6 = v5;
    uint64_t v7 = *(int *)(v5 + 48);
    uint64_t v8 = type metadata accessor for Locale.Language();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v4, a3, v8);
    *(unsigned char *)(v4 + v7) = 1;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v4, 0, 2, v6);
    double result = type metadata accessor for TypesettingConfiguration();
    uint64_t v9 = v4 + *(int *)(result + 20);
    *(void *)uint64_t v9 = 0;
    *(unsigned char *)(v9 + 8) = 1;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  if (a2)
  {
    int v3 = result;
    outlined assign with copy of TypesettingLanguage(a3, result);
    double result = type metadata accessor for TypesettingConfiguration();
    uint64_t v4 = v3 + *(int *)(result + 20);
    *(void *)uint64_t v4 = 0;
    *(unsigned char *)(v4 + 8) = 1;
  }
  return result;
}

uint64_t View.typesettingLanguage(_:isEnabled:)(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TypesettingLanguage(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t KeyPath = swift_getKeyPath();
  outlined init with copy of TypesettingLanguage.Storage(a1, (uint64_t)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for TypesettingLanguage);
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = swift_allocObject();
  *(unsigned char *)(v11 + 16) = a2;
  outlined init with take of TypesettingLanguage((uint64_t)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v11 + v10);
  View.transformEnvironment<A>(_:transform:)(KeyPath, (uint64_t)partial apply for closure #1 in View.typesettingLanguage(_:isEnabled:), v11, a3);
  swift_release();
  return swift_release();
}

uint64_t LanguageTextModifier.modify(style:environment:)(uint64_t a1)
{
  uint64_t v2 = v1 + OBJC_IVAR____TtC7SwiftUI20LanguageTextModifier_language;
  uint64_t v3 = a1 + *(int *)(type metadata accessor for Text.Style(0) + 84);
  outlined assign with copy of TypesettingLanguage(v2, v3);
  uint64_t result = type metadata accessor for TypesettingConfiguration();
  uint64_t v5 = v3 + *(int *)(result + 20);
  *(void *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 8) = 1;
  return result;
}

uint64_t LanguageTextModifier.isEqual(to:)()
{
  uint64_t result = swift_dynamicCastClass();
  if (result)
  {
    uint64_t v2 = result + OBJC_IVAR____TtC7SwiftUI20LanguageTextModifier_language;
    uint64_t v3 = v0 + OBJC_IVAR____TtC7SwiftUI20LanguageTextModifier_language;
    swift_retain();
    LOBYTE(v3) = specialized static TypesettingLanguage.Storage.== infix(_:_:)(v2, v3);
    swift_release();
    return v3 & 1;
  }
  return result;
}

uint64_t LanguageTextModifier.__ivar_destroyer()
{
  return outlined destroy of TypesettingLanguage.Storage(v0 + OBJC_IVAR____TtC7SwiftUI20LanguageTextModifier_language, type metadata accessor for TypesettingLanguage);
}

uint64_t LanguageTextModifier.__deallocating_deinit()
{
  outlined destroy of TypesettingLanguage.Storage(v0 + OBJC_IVAR____TtC7SwiftUI20LanguageTextModifier_language, type metadata accessor for TypesettingLanguage);

  return swift_deallocClassInstance();
}

uint64_t Text.typesettingLanguage(_:isEnabled:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, char a5, void *a6)
{
  uint64_t v12 = type metadata accessor for TypesettingLanguage(0);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)(0, (unint64_t *)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags), MEMORY[0x263F07648]);
    uint64_t v16 = v15;
    uint64_t v17 = *(int *)(v15 + 48);
    uint64_t v18 = type metadata accessor for Locale.Language();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(v14, a1, v18);
    v14[v17] = 1;
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v14, 0, 2, v16);
    type metadata accessor for LanguageTextModifier(0);
    uint64_t v19 = swift_allocObject();
    outlined init with take of TypesettingLanguage((uint64_t)v14, v19 + OBJC_IVAR____TtC7SwiftUI20LanguageTextModifier_language);
    outlined copy of Text.Storage(a3, a4, a5 & 1);
    swift_bridgeObjectRetain();
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      a6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a6[2] + 1, 1, a6);
    }
    unint64_t v21 = a6[2];
    unint64_t v20 = a6[3];
    if (v21 >= v20 >> 1) {
      a6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v20 > 1), v21 + 1, 1, a6);
    }
    a6[2] = v21 + 1;
    long long v22 = &a6[2 * v21];
    void v22[4] = v19;
    *((unsigned char *)v22 + 40) = -64;
    swift_release();
  }
  else
  {
    outlined copy of Text.Storage(a3, a4, a5 & 1);
    swift_bridgeObjectRetain();
  }
  return a3;
}

{
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned char *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  unsigned char v21[16];

  uint64_t v12 = type metadata accessor for TypesettingLanguage(0);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v15 = &v21[-v14];
  if (a2)
  {
    outlined init with copy of TypesettingLanguage.Storage(a1, (uint64_t)&v21[-v14], type metadata accessor for TypesettingLanguage);
    type metadata accessor for LanguageTextModifier(0);
    uint64_t v16 = swift_allocObject();
    outlined init with take of TypesettingLanguage((uint64_t)v15, v16 + OBJC_IVAR____TtC7SwiftUI20LanguageTextModifier_language);
    outlined copy of Text.Storage(a3, a4, a5 & 1);
    swift_bridgeObjectRetain();
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      a6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a6[2] + 1, 1, a6);
    }
    uint64_t v18 = a6[2];
    uint64_t v17 = a6[3];
    if (v18 >= v17 >> 1) {
      a6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v18 + 1, 1, a6);
    }
    a6[2] = v18 + 1;
    uint64_t v19 = &a6[2 * v18];
    v19[4] = v16;
    *((unsigned char *)v19 + 40) = -64;
    swift_release();
  }
  else
  {
    outlined copy of Text.Storage(a3, a4, a5 & 1);
    swift_bridgeObjectRetain();
  }
  return a3;
}

uint64_t outlined assign with take of TypesettingLanguage.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TypesettingLanguage.Storage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_245DE53C8()
{
  uint64_t v1 = type metadata accessor for Locale.Language();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80)), v1);

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.typesettingLanguage(_:isEnabled:)(uint64_t a1)
{
  return partial apply for closure #1 in View.typesettingLanguage(_:isEnabled:)(a1, MEMORY[0x263F07648], (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in View.typesettingLanguage(_:isEnabled:));
}

{
  return partial apply for closure #1 in View.typesettingLanguage(_:isEnabled:)(a1, type metadata accessor for TypesettingLanguage, (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in View.typesettingLanguage(_:isEnabled:));
}

uint64_t sub_245DE5484()
{
  uint64_t v1 = *(void *)(type metadata accessor for TypesettingLanguage(0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)(0, (unint64_t *)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags), MEMORY[0x263F07648]);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 48))(v0 + v2, 2, v3))
  {
    uint64_t v4 = type metadata accessor for Locale.Language();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v0 + v2, v4);
  }

  return swift_deallocObject();
}

uint64_t outlined init with take of TypesettingLanguage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TypesettingLanguage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in View.typesettingLanguage(_:isEnabled:)(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = *(void *)(a2(0) - 8);
  uint64_t v6 = *(unsigned __int8 *)(v3 + 16);
  uint64_t v7 = v3 + ((*(unsigned __int8 *)(v5 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return a3(a1, v6, v7);
}

uint64_t type metadata accessor for LanguageTextModifier(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for LanguageTextModifier);
}

unint64_t lazy protocol witness table accessor for type TypesettingLanguage.Flags and conformance TypesettingLanguage.Flags()
{
  unint64_t result = lazy protocol witness table cache variable for type TypesettingLanguage.Flags and conformance TypesettingLanguage.Flags;
  if (!lazy protocol witness table cache variable for type TypesettingLanguage.Flags and conformance TypesettingLanguage.Flags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TypesettingLanguage.Flags and conformance TypesettingLanguage.Flags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TypesettingLanguage.Flags and conformance TypesettingLanguage.Flags;
  if (!lazy protocol witness table cache variable for type TypesettingLanguage.Flags and conformance TypesettingLanguage.Flags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TypesettingLanguage.Flags and conformance TypesettingLanguage.Flags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TypesettingLanguage.Flags and conformance TypesettingLanguage.Flags;
  if (!lazy protocol witness table cache variable for type TypesettingLanguage.Flags and conformance TypesettingLanguage.Flags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TypesettingLanguage.Flags and conformance TypesettingLanguage.Flags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TypesettingLanguage.Flags and conformance TypesettingLanguage.Flags;
  if (!lazy protocol witness table cache variable for type TypesettingLanguage.Flags and conformance TypesettingLanguage.Flags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TypesettingLanguage.Flags and conformance TypesettingLanguage.Flags);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TypesettingLanguage(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(type metadata accessor for TypesettingLanguage.Storage(0) - 8);
  int v5 = *(_DWORD *)(v4 + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = v4;
    type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)(0, (unint64_t *)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags), MEMORY[0x263F07648]);
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v9 + 48))(a2, 2, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      uint64_t v11 = type metadata accessor for Locale.Language();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
      *((unsigned char *)a1 + *(int *)(v8 + 48)) = *((unsigned char *)a2 + *(int *)(v8 + 48));
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v9 + 56))(a1, 0, 2, v8);
    }
  }
  return a1;
}

void *initializeWithTake for TypesettingLanguage(void *a1, const void *a2)
{
  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)(0, (unint64_t *)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags), MEMORY[0x263F07648]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 2, v4))
  {
    uint64_t v7 = type metadata accessor for TypesettingLanguage.Storage(0);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    uint64_t v8 = type metadata accessor for Locale.Language();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
    *((unsigned char *)a1 + *(int *)(v5 + 48)) = *((unsigned char *)a2 + *(int *)(v5 + 48));
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  }
  return a1;
}

uint64_t sub_245DE5B2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TypesettingLanguage.Storage(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_245DE5B98(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TypesettingLanguage.Storage(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

ValueMetadata *type metadata accessor for TypesettingLanguage.Flags()
{
  return &type metadata for TypesettingLanguage.Flags;
}

uint64_t *initializeBufferWithCopyOfBuffer for TypesettingLanguage.Storage(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)(0, (unint64_t *)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags), MEMORY[0x263F07648]);
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v9 + 48))(a2, 2, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      uint64_t v11 = type metadata accessor for Locale.Language();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
      *((unsigned char *)a1 + *(int *)(v8 + 48)) = *((unsigned char *)a2 + *(int *)(v8 + 48));
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v9 + 56))(a1, 0, 2, v8);
    }
  }
  return a1;
}

unsigned char *assignWithCopy for TypesettingLanguage.Storage(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)(0, (unint64_t *)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags), MEMORY[0x263F07648]);
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  uint64_t v9 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v8 + 48);
  int v10 = v9(a1, 2, v6);
  int v11 = v9(a2, 2, v7);
  if (!v10)
  {
    if (!v11)
    {
      uint64_t v14 = type metadata accessor for Locale.Language();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v14 - 8) + 24))(a1, a2, v14);
      a1[*(int *)(v7 + 48)] = a2[*(int *)(v7 + 48)];
      return a1;
    }
    outlined destroy of (Locale.Language, TypesettingLanguage.Flags)((uint64_t)a1, (uint64_t)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags), MEMORY[0x263F07648], (uint64_t)&type metadata for TypesettingLanguage.Flags, (uint64_t (*)(void))type metadata accessor for (Locale.Language, TypesettingLanguage.Flags));
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  uint64_t v12 = type metadata accessor for Locale.Language();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v12 - 8) + 16))(a1, a2, v12);
  a1[*(int *)(v7 + 48)] = a2[*(int *)(v7 + 48)];
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 2, v7);
  return a1;
}

void *initializeWithTake for TypesettingLanguage.Storage(void *a1, const void *a2, uint64_t a3)
{
  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)(0, (unint64_t *)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags), MEMORY[0x263F07648]);
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(a2, 2, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v9 = type metadata accessor for Locale.Language();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
    *((unsigned char *)a1 + *(int *)(v7 + 48)) = *((unsigned char *)a2 + *(int *)(v7 + 48));
    (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 2, v7);
  }
  return a1;
}

unsigned char *assignWithTake for TypesettingLanguage.Storage(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)(0, (unint64_t *)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags), MEMORY[0x263F07648]);
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  uint64_t v9 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v8 + 48);
  int v10 = v9(a1, 2, v6);
  int v11 = v9(a2, 2, v7);
  if (!v10)
  {
    if (!v11)
    {
      uint64_t v14 = type metadata accessor for Locale.Language();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v14 - 8) + 40))(a1, a2, v14);
      a1[*(int *)(v7 + 48)] = a2[*(int *)(v7 + 48)];
      return a1;
    }
    outlined destroy of (Locale.Language, TypesettingLanguage.Flags)((uint64_t)a1, (uint64_t)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags), MEMORY[0x263F07648], (uint64_t)&type metadata for TypesettingLanguage.Flags, (uint64_t (*)(void))type metadata accessor for (Locale.Language, TypesettingLanguage.Flags));
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  uint64_t v12 = type metadata accessor for Locale.Language();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v12 - 8) + 32))(a1, a2, v12);
  a1[*(int *)(v7 + 48)] = a2[*(int *)(v7 + 48)];
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 2, v7);
  return a1;
}

uint64_t sub_245DE62E4(uint64_t a1, uint64_t a2)
{
  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)(0, (unint64_t *)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags), MEMORY[0x263F07648]);
  unsigned int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 3) {
    return v5 - 2;
  }
  else {
    return 0;
  }
}

uint64_t sub_245DE6374(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 2);
  }
  else {
    uint64_t v5 = 0;
  }
  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)(0, (unint64_t *)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags), MEMORY[0x263F07648]);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(a1, v5, a3, v6);
}

uint64_t getEnumTag for TypesettingLanguage.Storage(uint64_t a1)
{
  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)(0, (unint64_t *)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags), MEMORY[0x263F07648]);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48);

  return v3(a1, 2, v2);
}

uint64_t destructiveInjectEnumTag for TypesettingLanguage.Storage(uint64_t a1, uint64_t a2)
{
  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)(0, (unint64_t *)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags), MEMORY[0x263F07648]);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, 2, v4);
}

uint64_t ObjC metadata update function for LanguageTextModifier()
{
  return type metadata accessor for LanguageTextModifier(0);
}

uint64_t type metadata completion function for LanguageTextModifier()
{
  uint64_t result = type metadata accessor for TypesettingLanguage.Storage(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_245DE65D4()
{
  return swift_getWitnessTable();
}

uint64_t outlined assign with copy of TypesettingLanguage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TypesettingLanguage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t specialized static AnyFontModifier.languageModifier(_:)(uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for languageModifiers != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v4 = static AnyFontModifier.languageModifiers;
  if (!*((void *)static AnyFontModifier.languageModifiers + 2)) {
    goto LABEL_7;
  }
  swift_bridgeObjectRetain();
  unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v6 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_7:
    swift_endAccess();
    type metadata accessor for AnyDynamicFontModifier<LanguageFontModifier>();
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = a1;
    *(void *)(v7 + 24) = a2;
    swift_beginAccess();
    swift_bridgeObjectRetain_n();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    int v10 = static AnyFontModifier.languageModifiers;
    static AnyFontModifier.languageModifiers = (_UNKNOWN *)0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v7, a1, a2, isUniquelyReferenced_nonNull_native);
    static AnyFontModifier.languageModifiers = v10;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    return v7;
  }
  uint64_t v7 = *(void *)(v4[7] + 8 * v5);
  swift_endAccess();
  swift_retain();
  swift_bridgeObjectRelease();
  return v7;
}

void type metadata accessor for AnyDynamicFontModifier<LanguageFontModifier>()
{
  if (!lazy cache variable for type metadata for AnyDynamicFontModifier<LanguageFontModifier>)
  {
    lazy protocol witness table accessor for type LanguageFontModifier and conformance LanguageFontModifier();
    unint64_t v0 = type metadata accessor for AnyDynamicFontModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnyDynamicFontModifier<LanguageFontModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type LanguageFontModifier and conformance LanguageFontModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type LanguageFontModifier and conformance LanguageFontModifier;
  if (!lazy protocol witness table cache variable for type LanguageFontModifier and conformance LanguageFontModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LanguageFontModifier and conformance LanguageFontModifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LanguageFontModifier and conformance LanguageFontModifier;
  if (!lazy protocol witness table cache variable for type LanguageFontModifier and conformance LanguageFontModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LanguageFontModifier and conformance LanguageFontModifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LanguageFontModifier and conformance LanguageFontModifier;
  if (!lazy protocol witness table cache variable for type LanguageFontModifier and conformance LanguageFontModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LanguageFontModifier and conformance LanguageFontModifier);
  }
  return result;
}

uint64_t outlined destroy of (Locale.Language, TypesettingLanguage.Flags)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = a5(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

ValueMetadata *type metadata accessor for LanguageFontModifier()
{
  return &type metadata for LanguageFontModifier;
}

unint64_t instantiation function for generic protocol witness table for LanguageFontModifier(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type LanguageFontModifier and conformance LanguageFontModifier();
  *(void *)(a1 + 8) = result;
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<(CFStringRef, String)>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, String)>)
  {
    type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)(255, &lazy cache variable for type metadata for (CFStringRef, String), type metadata accessor for CFStringRef);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, String)>);
    }
  }
}

uint64_t protocol witness for ViewGraphRenderDelegate.withMainThreadRender(wasAsync:_:) in conformance CAHostingLayer<A1>(uint64_t a1, uint64_t (*a2)(void))
{
  return ViewGraphRenderDelegate.withMainThreadRender(wasAsync:_:)(0, a2);
}

uint64_t ViewGraphRenderDelegate.withMainThreadRender(wasAsync:_:)(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

double ViewGraphRenderContext.contentsScale.getter()
{
  return *(double *)v0;
}

uint64_t (*ViewGraphRenderContext.contentsScale.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ViewGraphRenderContext.opaqueBackground.getter()
{
  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t ViewGraphRenderContext.opaqueBackground.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 8) = result;
  return result;
}

uint64_t (*ViewGraphRenderContext.opaqueBackground.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t sub_245DE6B5C()
{
  return swift_deallocObject();
}

uint64_t dispatch thunk of ViewGraphRenderDelegate.renderingRootView.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ViewGraphRenderDelegate.updateRenderContext(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of ViewGraphRenderDelegate.withMainThreadRender(wasAsync:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

ValueMetadata *type metadata accessor for ViewGraphRenderContext()
{
  return &type metadata for ViewGraphRenderContext;
}

uint64_t dispatch thunk of ViewGraphRenderHost.renderDisplayList(_:asynchronously:time:nextTime:targetTimestamp:version:maxVersion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (*(uint64_t (**)(void))(a9 + 8))();
}

uint64_t dispatch thunk of ViewGraphRenderObserver.didRender()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t Transaction._disablesPageScrollAnimations.getter(uint64_t a1)
{
  return Transaction._disablesPageScrollAnimations.getter(a1, (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t Transaction.scrollTargetAnchor.getter()
{
  uint64_t v0 = swift_retain();
  uint64_t v1 = specialized closure #1 in PropertyList.subscript.getter(v0);
  swift_release();
  return v1;
}

uint64_t Transaction.scrollTargetAnchor.setter(uint64_t a1, uint64_t a2, char a3)
{
  char v6 = a3 & 1;
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v3, a1, a2, v6);
  return swift_release();
}

uint64_t Transaction.scrollPositionUpdatePreservesVelocity.getter(uint64_t a1)
{
  return Transaction._disablesPageScrollAnimations.getter(a1, (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t Transaction._disablesPageScrollAnimations.getter(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t *))
{
  uint64_t v3 = swift_retain();
  LOBYTE(a2) = a2(v3, &v5);
  swift_release();
  return a2 & 1;
}

uint64_t key path getter for Transaction.scrollTargetAnchor : Transaction@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = swift_retain();
  uint64_t v3 = specialized closure #1 in PropertyList.subscript.getter(v2);
  uint64_t v5 = v4;
  char v7 = v6;
  uint64_t result = swift_release();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v7 & 1;
  return result;
}

uint64_t key path setter for Transaction.scrollTargetAnchor : Transaction(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  char v5 = *(unsigned char *)(a1 + 16);
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a2, v3, v4, v5);
  return swift_release();
}

void (*Transaction.scrollTargetAnchor.modify(void *a1))(uint64_t **a1)
{
  uint64_t v3 = malloc(0x40uLL);
  *a1 = v3;
  v3[6] = v1;
  uint64_t v4 = swift_retain();
  uint64_t v5 = specialized closure #1 in PropertyList.subscript.getter(v4);
  uint64_t v7 = v6;
  char v9 = v8;
  v3[7] = 0;
  swift_release();
  *uint64_t v3 = v5;
  v3[1] = v7;
  *((unsigned char *)v3 + 16) = v9 & 1;
  return Transaction.scrollTargetAnchor.modify;
}

void Transaction.scrollTargetAnchor.modify(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (uint64_t *)(*a1)[6];
  uint64_t v3 = **a1;
  uint64_t v4 = (*a1)[1];
  char v5 = *((unsigned char *)*a1 + 16);
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3, v4, v5);
  swift_release();

  free(v1);
}

uint64_t Transaction._disablesPageScrollAnimations.setter(uint64_t a1)
{
  return Transaction._disablesPageScrollAnimations.setter(a1, (void (*)(uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

void (*Transaction._disablesPageScrollAnimations.modify(void *a1))(char **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = swift_retain();
  char v5 = specialized closure #1 in PropertyList.subscript.getter(v4);
  v3[4] = 0;
  swift_release();
  *((unsigned char *)v3 + 40) = v5 & 1;
  return Transaction._disablesPageScrollAnimations.modify;
}

void Transaction._disablesPageScrollAnimations.modify(char **a1, char a2)
{
}

uint64_t Transaction.isPageScrollAnimated.getter()
{
  uint64_t v0 = swift_retain();
  uint64_t v1 = specialized find<A>(_:key:)(v0);
  if (!v1)
  {
    swift_release();
LABEL_6:
    char v7 = 0;
    return v7 & 1;
  }
  uint64_t v2 = *(void *)(v1 + 72);
  swift_release();
  if (!v2) {
    goto LABEL_6;
  }
  uint64_t v3 = swift_retain();
  char v4 = specialized closure #1 in PropertyList.subscript.getter(v3);
  swift_release();
  if (v4) {
    goto LABEL_6;
  }
  uint64_t v5 = swift_retain();
  char v6 = specialized closure #1 in PropertyList.subscript.getter(v5);
  swift_release();
  char v7 = v6 ^ 1;
  return v7 & 1;
}

uint64_t key path setter for Transaction._disablesPageScrollAnimations : Transaction(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t *))
{
  uint64_t v7 = *a1;
  swift_retain();
  a5(a2, v7, &v9);
  return swift_release();
}

uint64_t Transaction.scrollPositionUpdatePreservesVelocity.setter(uint64_t a1)
{
  return Transaction._disablesPageScrollAnimations.setter(a1, (void (*)(uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t Transaction._disablesPageScrollAnimations.setter(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t *))
{
  swift_retain();
  a2(v2, a1, &v6);
  return swift_release();
}

void (*Transaction.scrollPositionUpdatePreservesVelocity.modify(void *a1))(char **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = swift_retain();
  char v5 = specialized closure #1 in PropertyList.subscript.getter(v4);
  v3[4] = 0;
  swift_release();
  *((unsigned char *)v3 + 40) = v5 & 1;
  return Transaction.scrollPositionUpdatePreservesVelocity.modify;
}

void Transaction.scrollPositionUpdatePreservesVelocity.modify(char **a1, char a2)
{
}

void Transaction._disablesPageScrollAnimations.modify(char **a1, char a2, void (*a3)(uint64_t, uint64_t, char *))
{
  char v5 = *a1;
  uint64_t v6 = *((void *)*a1 + 3);
  uint64_t v7 = (*a1)[40];
  swift_retain();
  if (a2) {
    char v8 = v5 + 8;
  }
  else {
    char v8 = v5 + 16;
  }
  a3(v6, v7, v8);
  swift_release();

  free(v5);
}

uint64_t Transaction.disablesPageScrollAnimations.getter()
{
  uint64_t v0 = swift_retain();
  char v1 = specialized closure #1 in PropertyList.subscript.getter(v0);
  swift_release();
  return v1 & 1;
}

uint64_t key path getter for Transaction._disablesPageScrollAnimations : Transaction@<X0>(uint64_t (*a1)(uint64_t, uint64_t *)@<X3>, unsigned char *a2@<X8>)
{
  uint64_t v4 = swift_retain();
  LOBYTE(a1) = a1(v4, &v6);
  uint64_t result = swift_release();
  *a2 = a1 & 1;
  return result;
}

uint64_t key path setter for Transaction.disablesPageScrollAnimations : Transaction(char *a1, uint64_t *a2)
{
  char v3 = *a1;
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a2, v3);
  return swift_release();
}

void (*Transaction.disablesPageScrollAnimations.modify(void *a1))(uint64_t a1)
{
  char v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = swift_retain();
  char v5 = specialized closure #1 in PropertyList.subscript.getter(v4);
  v3[4] = 0;
  swift_release();
  *((unsigned char *)v3 + 40) = v5 & 1;
  return Transaction.disablesPageScrollAnimations.modify;
}

void Transaction.disablesPageScrollAnimations.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(uint64_t **)(*(void *)a1 + 24);
  char v3 = *(unsigned char *)(*(void *)a1 + 40);
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3);
  swift_release();

  free(v1);
}

BOOL static ScrollContentOffsetAdjustmentBehavior.Role.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void ScrollContentOffsetAdjustmentBehavior.Role.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int ScrollContentOffsetAdjustmentBehavior.Role.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void static ScrollContentOffsetAdjustmentBehavior.automatic.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void static ScrollContentOffsetAdjustmentBehavior.disabled.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

void ScrollContentOffsetAdjustmentBehavior.role.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *ScrollContentOffsetAdjustmentBehavior.role.setter(unsigned char *result)
{
  *Swift::UInt v1 = *result;
  return result;
}

uint64_t (*ScrollContentOffsetAdjustmentBehavior.role.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t key path getter for Transaction.scrollContentOffsetAdjustmentBehavior : Transaction@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v2 = swift_retain();
  specialized closure #1 in PropertyList.subscript.getter(v2, &v4);
  uint64_t result = swift_release();
  *a1 = v4;
  return result;
}

uint64_t key path setter for Transaction.scrollContentOffsetAdjustmentBehavior : Transaction(char *a1, uint64_t *a2)
{
  char v3 = *a1;
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a2, v3);
  return swift_release();
}

uint64_t Transaction.scrollContentOffsetAdjustmentBehavior.setter(char *a1)
{
  char v2 = *a1;
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v1, v2);
  return swift_release();
}

uint64_t (*Transaction.scrollContentOffsetAdjustmentBehavior.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)(a1 + 16) = v1;
  type metadata accessor for TransactionPropertyKey<Transaction.ScrollContentAdjustmentBehaviorKey>();
  BloomFilter.init(hashValue:)(v3);
  uint64_t v4 = swift_retain();
  uint64_t v5 = specialized find1<A>(_:key:filter:)(v4, v8);
  if (v5) {
    char v6 = *(unsigned char *)(v5 + 72);
  }
  else {
    char v6 = 0;
  }
  *(unsigned char *)(a1 + 24) = v6;
  swift_release();
  return Transaction.scrollContentOffsetAdjustmentBehavior.modify;
}

uint64_t Transaction.scrollContentOffsetAdjustmentBehavior.modify(uint64_t a1)
{
  char v1 = *(unsigned char *)(a1 + 24);
  char v2 = *(uint64_t **)(a1 + 16);
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, v1);

  return swift_release();
}

void type metadata accessor for TransactionPropertyKey<Transaction.ScrollContentAdjustmentBehaviorKey>()
{
  if (!lazy cache variable for type metadata for TransactionPropertyKey<Transaction.ScrollContentAdjustmentBehaviorKey>)
  {
    unint64_t v0 = type metadata accessor for TransactionPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TransactionPropertyKey<Transaction.ScrollContentAdjustmentBehaviorKey>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ScrollContentOffsetAdjustmentBehavior.Role and conformance ScrollContentOffsetAdjustmentBehavior.Role()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollContentOffsetAdjustmentBehavior.Role and conformance ScrollContentOffsetAdjustmentBehavior.Role;
  if (!lazy protocol witness table cache variable for type ScrollContentOffsetAdjustmentBehavior.Role and conformance ScrollContentOffsetAdjustmentBehavior.Role)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollContentOffsetAdjustmentBehavior.Role and conformance ScrollContentOffsetAdjustmentBehavior.Role);
  }
  return result;
}

uint64_t sub_245DE7908@<X0>(unsigned char *a1@<X8>)
{
  return key path getter for Transaction._disablesPageScrollAnimations : Transaction((uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a1);
}

uint64_t sub_245DE7934(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Transaction._disablesPageScrollAnimations : Transaction(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t sub_245DE7960@<X0>(unsigned char *a1@<X8>)
{
  return key path getter for Transaction._disablesPageScrollAnimations : Transaction((uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a1);
}

uint64_t sub_245DE798C(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Transaction._disablesPageScrollAnimations : Transaction(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t sub_245DE79B8@<X0>(unsigned char *a1@<X8>)
{
  return key path getter for Transaction._disablesPageScrollAnimations : Transaction((uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a1);
}

ValueMetadata *type metadata accessor for ScrollContentOffsetAdjustmentBehavior()
{
  return &type metadata for ScrollContentOffsetAdjustmentBehavior;
}

unsigned char *storeEnumTagSinglePayload for ScrollContentOffsetAdjustmentBehavior(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245DE7AD0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollContentOffsetAdjustmentBehavior.Role()
{
  return &type metadata for ScrollContentOffsetAdjustmentBehavior.Role;
}

ValueMetadata *type metadata accessor for Transaction.ScrollContentAdjustmentBehaviorKey()
{
  return &type metadata for Transaction.ScrollContentAdjustmentBehaviorKey;
}

ValueMetadata *type metadata accessor for Transaction.ScrollTargetAnchorKey()
{
  return &type metadata for Transaction.ScrollTargetAnchorKey;
}

ValueMetadata *type metadata accessor for Transaction.DisabledPageScrollAnimationKey()
{
  return &type metadata for Transaction.DisabledPageScrollAnimationKey;
}

ValueMetadata *type metadata accessor for Transaction.ScrollPreservesVelocityKey()
{
  return &type metadata for Transaction.ScrollPreservesVelocityKey;
}

uint64_t NSAttributedString.range.getter()
{
  objc_msgSend(v0, sel_length);
  return 0;
}

uint64_t NSAttributedString.firstAttribute<A>(_:name:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  unsigned int v4 = v3;
  uint64_t v18 = a3;
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  double v9 = MEMORY[0x270FA5388](v7);
  int v11 = (char *)&v17 - v10;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(*(void *)(a2 - 8) + 56))((char *)&v17 - v10, 1, 1, a2, v9);
  id v12 = objc_msgSend(v4, sel_length);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a2;
  *(void *)(v13 + 24) = v11;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = partial apply for closure #1 in NSAttributedString.firstAttribute<A>(_:name:);
  *(void *)(v14 + 24) = v13;
  aBlock[4] = thunk for @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()partial apply;
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  aBlock[3] = &block_descriptor_13_0;
  uint64_t v15 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v4, sel_enumerateAttribute_inRange_options_usingBlock_, a1, 0, v12, 0, v15);
  _Block_release(v15);
  LOBYTE(a1) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (a1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v18, v11, v7);
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in NSAttributedString.firstAttribute<A>(_:name:)(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = &v20[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = &v20[-v15];
  outlined init with copy of Any?(a1, (uint64_t)v20);
  type metadata accessor for Any?();
  int v17 = swift_dynamicCast();
  uint64_t v18 = *(void *)(a6 - 8);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v18 + 56))(v16, v17 ^ 1u, 1, a6);
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(v11 + 40))(a5, v16, v10);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v11 + 16))(v13, a5, v10);
  LODWORD(a6) = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v18 + 48))(v13, 1, a6);
  uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t))(v11 + 8))(v13, v10);
  if (a6 != 1) {
    *a4 = 1;
  }
  return result;
}

uint64_t sub_245DE7FC4()
{
  return swift_deallocObject();
}

uint64_t sub_245DE7FFC()
{
  return swift_deallocObject();
}

uint64_t NSMutableAttributedString.addUniformAttribute(_:value:)(uint64_t a1, void *a2)
{
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  objc_msgSend(v2, sel_addAttribute_value_range_, a1, _bridgeAnythingToObjectiveC<A>(_:)(), 0, objc_msgSend(v2, sel_length));

  return swift_unknownObjectRelease();
}

Swift::Void __swiftcall NSMutableAttributedString.addUniformAttributes(_:)(Swift::OpaquePointer a1)
{
  type metadata accessor for NSAttributedStringKey(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v1, sel_addAttributes_range_, isa, 0, objc_msgSend(v1, sel_length));
}

Swift::Void __swiftcall NSMutableAttributedString.mergeAttributes(_:in:)(Swift::OpaquePointer _, __C::_NSRange_optional in)
{
  id length = (id)in.value.length;
  Swift::Int location = in.value.location;
  if (in.is_nil)
  {
    id length = objc_msgSend(v2, sel_length);
    Swift::Int location = 0;
  }
  if (!length) {
    return;
  }
  uint64_t v27 = MEMORY[0x263F8EE80];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = &v27;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = partial apply for closure #1 in NSMutableAttributedString.mergeAttributes(_:in:);
  *(void *)(v6 + 24) = v5;
  aBlock[4] = _sSDySo21NSAttributedStringKeyaypGSo8_NSRangeVSpy10ObjectiveC8ObjCBoolVGIggyy_AceIIeggyy_TRTA_0;
  aBlock[5] = v6;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  aBlock[3] = &block_descriptor_22;
  uint64_t v7 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v2, sel_enumerateAttributesInRange_options_usingBlock_, location, length, 0, v7);
  _Block_release(v7);
  LOBYTE(v7) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v7) {
    goto LABEL_29;
  }
  type metadata accessor for NSAttributedStringKey(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  double v9 = v2;
  objc_msgSend(v2, sel_setAttributes_range_, isa, location, length);

  uint64_t v10 = v27;
  uint64_t v24 = v27 + 64;
  uint64_t v11 = 1 << *(unsigned char *)(v27 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v27 + 64);
  int64_t v25 = (unint64_t)(v11 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v14 = 0;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v14 << 6);
      goto LABEL_9;
    }
    int64_t v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v25) {
      goto LABEL_25;
    }
    unint64_t v22 = *(void *)(v24 + 8 * v21);
    ++v14;
    if (!v22)
    {
      int64_t v14 = v21 + 1;
      if (v21 + 1 >= v25) {
        goto LABEL_25;
      }
      unint64_t v22 = *(void *)(v24 + 8 * v14);
      if (!v22)
      {
        int64_t v14 = v21 + 2;
        if (v21 + 2 >= v25) {
          goto LABEL_25;
        }
        unint64_t v22 = *(void *)(v24 + 8 * v14);
        if (!v22) {
          break;
        }
      }
    }
LABEL_24:
    unint64_t v13 = (v22 - 1) & v22;
    unint64_t v16 = __clz(__rbit64(v22)) + (v14 << 6);
LABEL_9:
    int v17 = (uint64_t *)(*(void *)(v10 + 48) + 16 * v16);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    swift_bridgeObjectRetain();
    Class v20 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v9, sel_addAttributes_range_, v20, v18, v19);
  }
  int64_t v23 = v21 + 3;
  if (v23 >= v25)
  {
LABEL_25:
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    return;
  }
  unint64_t v22 = *(void *)(v24 + 8 * v23);
  if (v22)
  {
    int64_t v14 = v23;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v14 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v14 >= v25) {
      goto LABEL_25;
    }
    unint64_t v22 = *(void *)(v24 + 8 * v14);
    ++v23;
    if (v22) {
      goto LABEL_24;
    }
  }
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
}

uint64_t closure #1 in NSMutableAttributedString.mergeAttributes(_:in:)(uint64_t a1, Swift::UInt a2, Swift::UInt a3, uint64_t a4, uint64_t *a5)
{
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v11 = *a5;
  *a5 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, isUniquelyReferenced_nonNull_native);
  *a5 = v11;

  return swift_bridgeObjectRelease();
}

uint64_t NSAttributedString.runs(in:)(uint64_t a1, id a2, char a3)
{
  uint64_t v13 = MEMORY[0x263F8EE78];
  if (a3)
  {
    a2 = objc_msgSend(v3, sel_length);
    a1 = 0;
  }
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = &v13;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = partial apply for closure #1 in NSAttributedString.runs(in:);
  *(void *)(v7 + 24) = v6;
  aBlock[4] = thunk for @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()partial apply;
  aBlock[5] = v7;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  aBlock[3] = &block_descriptor_32;
  uint64_t v8 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v3, sel_enumerateAttributesInRange_options_usingBlock_, a1, a2, 0, v8);
  _Block_release(v8);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
  }
  else
  {
    uint64_t v11 = v13;
    swift_release();
    return v11;
  }
  return result;
}

uint64_t closure #1 in NSAttributedString.runs(in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  double v9 = (void *)*a5;
  swift_bridgeObjectRetain();
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *a5 = (uint64_t)v9;
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
    double v9 = (void *)result;
    *a5 = result;
  }
  unint64_t v12 = v9[2];
  unint64_t v11 = v9[3];
  if (v12 >= v11 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v12 + 1, 1, v9);
    double v9 = (void *)result;
    *a5 = result;
  }
  _OWORD v9[2] = v12 + 1;
  uint64_t v13 = &v9[3 * v12];
  void v13[4] = a2;
  v13[5] = a3;
  _OWORD v13[6] = a1;
  return result;
}

uint64_t sub_245DE87C4()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NSAttributedString.firstAttribute<A>(_:name:)(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  return closure #1 in NSAttributedString.firstAttribute<A>(_:name:)(a1, a2, a3, a4, *(void *)(v4 + 24), *(void *)(v4 + 16));
}

uint64_t sub_245DE87DC()
{
  return swift_deallocObject();
}

uint64_t sub_245DE87EC()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NSMutableAttributedString.mergeAttributes(_:in:)(uint64_t a1, Swift::UInt a2, Swift::UInt a3, uint64_t a4)
{
  return closure #1 in NSMutableAttributedString.mergeAttributes(_:in:)(a1, a2, a3, a4, *(uint64_t **)(v4 + 16));
}

uint64_t sub_245DE8804()
{
  return swift_deallocObject();
}

uint64_t sub_245DE8814()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NSAttributedString.runs(in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return closure #1 in NSAttributedString.runs(in:)(a1, a2, a3, a4, *(uint64_t **)(v4 + 16));
}

uint64_t sub_245DE882C()
{
  return swift_deallocObject();
}

uint64_t EnvironmentValues.lowerLineLimit.setter(uint64_t a1, char a2)
{
  return EnvironmentValues.lineLimit.setter(a1, a2, (void (*)(uint64_t *, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t protocol witness for static EnvironmentModifier.makeEnvironment(modifier:environment:) in conformance LineLimitModifier()
{
  uint64_t Value = AGGraphGetValue();
  specialized EnvironmentValues.subscript.setter(*(void *)(Value + 16), *(unsigned char *)(Value + 24));
  uint64_t v1 = AGGraphGetValue();
  return specialized EnvironmentValues.subscript.setter(*(void *)v1, *(unsigned char *)(v1 + 8));
}

uint64_t View.lineLimit(_:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t KeyPath = (uint64_t *)swift_getKeyPath();
  uint64_t v10 = a1;
  char v11 = a2 & 1;
  View.environment<A>(_:_:)(KeyPath, (uint64_t)&v10, a3, a4);
  return swift_release();
}

uint64_t View.lineLimit(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  char v4 = 0;
  uint64_t v5 = 0;
  char v6 = 1;
  return View.modifier<A>(_:)(&v3, a2, &type metadata for LineLimitModifier);
}

{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  uint64_t v3 = 0;
  char v4 = 1;
  uint64_t v5 = a1;
  char v6 = 0;
  return View.modifier<A>(_:)(&v3, a2, &type metadata for LineLimitModifier);
}

uint64_t View.lineLimit(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  char v5 = 0;
  uint64_t v6 = a2;
  char v7 = 0;
  return View.modifier<A>(_:)(&v4, a3, &type metadata for LineLimitModifier);
}

void (*EnvironmentValues.lineLimit.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  *uint64_t v3 = EnvironmentValues.lineLimit.getter();
  *((unsigned char *)v3 + 8) = v4 & 1;
  return EnvironmentValues.lineLimit.modify;
}

void EnvironmentValues.lineLimit.modify(uint64_t **a1, char a2)
{
}

void (*EnvironmentValues.lowerLineLimit.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  *uint64_t v3 = EnvironmentValues.lowerLineLimit.getter();
  *((unsigned char *)v3 + 8) = v4 & 1;
  return EnvironmentValues.lowerLineLimit.modify;
}

void EnvironmentValues.lowerLineLimit.modify(uint64_t **a1, char a2)
{
}

void EnvironmentValues.lineLimit.modify(uint64_t **a1, char a2, void (*a3)(uint64_t *, uint64_t, uint64_t, void **), void (*a4)(uint64_t, uint64_t))
{
  char v7 = *a1;
  uint64_t v8 = (uint64_t *)(*a1)[4];
  uint64_t v9 = **a1;
  uint64_t v10 = *((unsigned __int8 *)*a1 + 8);
  uint64_t v11 = *v8;
  swift_retain_n();
  if (a2) {
    unint64_t v12 = (void **)(v7 + 2);
  }
  else {
    unint64_t v12 = (void **)(v7 + 3);
  }
  a3(v8, v9, v10, v12);
  swift_release();
  if (v8[1])
  {
    uint64_t v13 = *(void *)v7[4];
    swift_retain();
    swift_retain();
    a4(v11, v13);
    swift_release();
    swift_release();
  }
  swift_release();

  free(v7);
}

uint64_t sub_245DE8C78@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = EnvironmentValues.lineLimit.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_245DE8CAC(uint64_t a1)
{
  return EnvironmentValues.lineLimit.setter(*(void *)a1, *(unsigned char *)(a1 + 8));
}

uint64_t sub_245DE8CDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return keypath_get_2Tm_0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))EnvironmentValues.lineLimit.getter, a3);
}

uint64_t sub_245DE8CF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return keypath_get_2Tm_0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))EnvironmentValues.lowerLineLimit.getter, a3);
}

uint64_t sub_245DE8D0C(uint64_t a1)
{
  return EnvironmentValues.lowerLineLimit.setter(*(void *)a1, *(unsigned char *)(a1 + 8));
}

uint64_t sub_245DE8D3C()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _EnvironmentKeyWritingModifier<Int?>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Int?>)
  {
    type metadata accessor for Int?();
    unint64_t v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Int?>);
    }
  }
}

uint64_t sub_245DE8E00()
{
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for EnvironmentValues.LowerLineLimitKey()
{
  return &type metadata for EnvironmentValues.LowerLineLimitKey;
}

ValueMetadata *type metadata accessor for EnvironmentValues.LineLimitKey()
{
  return &type metadata for EnvironmentValues.LineLimitKey;
}

uint64_t ResolvedStyledText.StringDrawing.__allocating_init(storage:layoutProperties:layoutMargins:stylePadding:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:scaleFactorOverride:)(void *a1, uint64_t a2, uint64_t a3, char *a4, char a5, __int16 *a6, uint64_t *a7, uint64_t *a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, uint64_t a17, uint64_t a18, double a19, char a20)
{
  swift_allocObject();
  return ResolvedStyledText.StringDrawing.init(storage:layoutProperties:layoutMargins:stylePadding:archiveOptions:isCollapsible:features:suffix:attachments:styles:transitions:scaleFactorOverride:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, v27, v28, v29, v30, a17, a18, a19,
           a20 & 1);
}

id one-time initialization function for emptyString()
{
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x263F086A0]), sel_init);
  static NSAttributedString.emptyString = (uint64_t)result;
  return result;
}

Swift::Void __swiftcall ResolvedStyledText.StringDrawing.resetCache()()
{
  uint64_t v1 = *(void **)(v0 + 216);
  swift_beginAccess();
  double v17 = *(double *)(v0 + 200);
  char v2 = *(unsigned char *)(v0 + 208);
  swift_beginAccess();
  uint64_t v3 = *(void *)(v0 + 16);
  char v4 = *(unsigned char *)(v0 + 24);
  uint64_t v5 = *(void *)(v0 + 32);
  char v6 = *(unsigned char *)(v0 + 40);
  double v7 = *(double *)(v0 + 48);
  double v8 = *(double *)(v0 + 104);
  double v9 = *(double *)(v0 + 112);
  swift_beginAccess();
  char v10 = *(unsigned char *)(v0 + 424);
  char v11 = *(double *)(v0 + 88) != 0.0;
  char v12 = *(unsigned char *)(v0 + 426);
  id v13 = v1;
  specialized NSAttributedString.MetricsCache.init(_:scaleFactorOverride:lineLimit:lowerLineLimit:minScaleFactor:bodyHeadOutdent:pixelLength:widthIsFlexible:drawWithRequestedWidth:isCollapsible:)(v1, v17, v2, v3, v4, v5, v6, v10, (uint64_t)v18, v7, v8, v9, v11, v12);
  int64_t v14 = *(void **)(v0 + 360);
  long long v15 = v18[3];
  *(_OWORD *)(v0 + 384) = v18[2];
  *(_OWORD *)(v0 + 400) = v15;
  *(_OWORD *)(v0 + 416) = v18[4];
  *(void *)(v0 + 432) = v19;
  long long v16 = v18[1];
  *(_OWORD *)(v0 + 352) = v18[0];
  *(_OWORD *)(v0 + 368) = v16;
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
}

uint64_t ResolvedStyledText.StringDrawing.majorAxis.getter()
{
  return 1;
}

uint64_t ResolvedStyledText.StringDrawing.drawingScale(size:)(double a1, double a2)
{
  uint64_t result = swift_beginAccess();
  if (*(unsigned char *)(v2 + 208) == 1)
  {
    uint64_t result = swift_beginAccess();
    if (*(double *)(v2 + 48) != 1.0)
    {
      swift_beginAccess();
      double v6 = *(double *)(v2 + 168);
      double v7 = *(double *)(v2 + 176);
      double v9 = *(double *)(v2 + 184);
      double v8 = *(double *)(v2 + 192);
      swift_beginAccess();
      if (one-time initialization token for shared != -1) {
        swift_once();
      }
      uint64_t v10 = static TextDrawingContext.shared;
      swift_retain();
      NSAttributedString.MetricsCache.metrics(requestedSize:layoutMargins:wantsNumberOfLineFragments:context:)(0, v10, (uint64_t)v11, a1, a2, v6, v7, v9, v8);
      swift_endAccess();
      return swift_release();
    }
  }
  return result;
}

double ResolvedStyledText.StringDrawing.size(in:context:)(uint64_t a1, double a2, double a3)
{
  swift_beginAccess();
  double v7 = v3[21];
  double v8 = v3[22];
  double v9 = v3[23];
  double v10 = v3[24];
  swift_beginAccess();
  NSAttributedString.MetricsCache.metrics(requestedSize:layoutMargins:wantsNumberOfLineFragments:context:)(0, a1, (uint64_t)&v12, a2, a3, v7, v8, v9, v10);
  swift_endAccess();
  return v12;
}

uint64_t thunk for @escaping @callee_unowned @convention(block) (@unowned RBDrawingState, @unowned Int) -> ()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 16))(a3, a1, a2);
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned RBDrawingState, @unowned Int) -> ()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v5(a2, a3);

  return swift_release();
}

uint64_t ResolvedStyledText.StringDrawing.linkURL(at:in:)(double a1, double a2, double a3, double a4)
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  *(double *)double v12 = a1;
  *(double *)&v12[1] = a2;
  *(double *)&void v12[2] = a3;
  *(double *)&v12[3] = a4;
  v12[4] = v4;
  double v9 = *(void (**)(void *))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue2.shared) + 0x88);
  double v10 = static CoreGlue2.shared;
  swift_retain();
  v9(v12);

  return swift_release();
}

uint64_t ResolvedStyledText.StringDrawing.__ivar_destroyer()
{
  uint64_t v1 = *(void **)(v0 + 360);
  swift_bridgeObjectRelease();

  return swift_unknownObjectRelease();
}

uint64_t ResolvedStyledText.StringDrawing.deinit()
{
  long long v1 = *(_OWORD *)(v0 + 128);
  void v7[6] = *(_OWORD *)(v0 + 112);
  v7[7] = v1;
  v7[8] = *(_OWORD *)(v0 + 144);
  char v8 = *(unsigned char *)(v0 + 160);
  long long v2 = *(_OWORD *)(v0 + 64);
  void v7[2] = *(_OWORD *)(v0 + 48);
  v7[3] = v2;
  long long v3 = *(_OWORD *)(v0 + 96);
  v7[4] = *(_OWORD *)(v0 + 80);
  void v7[5] = v3;
  long long v4 = *(_OWORD *)(v0 + 32);
  v7[0] = *(_OWORD *)(v0 + 16);
  v7[1] = v4;
  outlined release of TextLayoutProperties((uint64_t)v7);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void **)(v0 + 360);
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  return v0;
}

uint64_t sub_245DE966C()
{
  return swift_deallocObject();
}

uint64_t sub_245DE967C()
{
  return swift_deallocObject();
}

uint64_t sub_245DE968C()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_245DE96C4()
{
  _Block_release(*(const void **)(v0 + 16));

  return swift_deallocObject();
}

uint64_t destroy for NSAttributedString.MetricsCache(uint64_t a1)
{
  swift_unknownObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for NSAttributedString.MetricsCache(uint64_t a1, uint64_t a2)
{
  long long v3 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(_WORD *)(a1 + 73) = *(_WORD *)(a2 + 73);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_unknownObjectRetain();
  id v4 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for NSAttributedString.MetricsCache(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  id v4 = *(void **)(a2 + 8);
  uint64_t v5 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  id v6 = v4;

  uint64_t v7 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v7;
  uint64_t v8 = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(unsigned char *)(a1 + 73) = *(unsigned char *)(a2 + 73);
  *(unsigned char *)(a1 + 74) = *(unsigned char *)(a2 + 74);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for NSAttributedString.MetricsCache(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectRelease();
  id v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(unsigned char *)(a1 + 73) = *(unsigned char *)(a2 + 73);
  *(unsigned char *)(a1 + 74) = *(unsigned char *)(a2 + 74);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for NSAttributedString.MetricsCache()
{
  return &type metadata for NSAttributedString.MetricsCache;
}

uint64_t sub_245DE9938()
{
  return swift_deallocObject();
}

uint64_t sub_245DE9948()
{
  return swift_deallocObject();
}

__n128 __swift_memcpy66_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for NSAttributedString.Metrics(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 66)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 65);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for NSAttributedString.Metrics(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 64) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 66) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 66) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 65) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NSAttributedString.Metrics()
{
  return &type metadata for NSAttributedString.Metrics;
}

uint64_t *NSAttributedStringKey.resolvableTextSegment.unsafeMutableAddressor()
{
  if (one-time initialization token for resolvableTextSegment != -1) {
    swift_once();
  }
  return &static NSAttributedStringKey.resolvableTextSegment;
}

Swift::Bool __swiftcall ResolvableTextSegmentAttribute.Value.isAttributeRequiredForResolution(_:includeNonFunctionalAttributes:)(NSAttributedStringKey _, Swift::Bool includeNonFunctionalAttributes)
{
  uint64_t v5 = type metadata accessor for ResolvableTextSegmentAttribute.Value(0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  double v10 = (char *)v57 - v9;
  MEMORY[0x270FA5388](v11);
  id v13 = (char *)v57 - v12;
  if (one-time initialization token for resolvableTextSegment != -1) {
    swift_once();
  }
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v16 = v15;
  if (v14 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v16 == v17) {
    goto LABEL_12;
  }
  char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v19)
  {
LABEL_13:
    _s7SwiftUI30ResolvableTextSegmentAttributeO5ValueVWOcTm_0(v2, (uint64_t)v13, type metadata accessor for ResolvableTextSegmentAttribute.Value);
LABEL_14:
    outlined destroy of ResolvableTextSegmentAttribute.Value((uint64_t)v13, type metadata accessor for ResolvableTextSegmentAttribute.Value);
    _s7SwiftUI30ResolvableTextSegmentAttributeO5ValueVWOcTm_0(v2, (uint64_t)v10, type metadata accessor for ResolvableTextSegmentAttribute.Value);
LABEL_15:
    Swift::Bool v24 = 1;
LABEL_16:
    outlined destroy of ResolvableTextSegmentAttribute.Value((uint64_t)v10, type metadata accessor for ResolvableTextSegmentAttribute.Value);
    return v24;
  }
  if (one-time initialization token for updateSchedule != -1) {
    swift_once();
  }
  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v22 = v21;
  if (v20 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v22 == v23)
  {
LABEL_12:
    swift_bridgeObjectRelease_n();
    goto LABEL_13;
  }
  char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _s7SwiftUI30ResolvableTextSegmentAttributeO5ValueVWOcTm_0(v2, (uint64_t)v13, type metadata accessor for ResolvableTextSegmentAttribute.Value);
  if (v26) {
    goto LABEL_14;
  }
  uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v29 = v28;
  if (v27 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v29 == v30)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_14;
  }
  char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of ResolvableTextSegmentAttribute.Value((uint64_t)v13, type metadata accessor for ResolvableTextSegmentAttribute.Value);
  _s7SwiftUI30ResolvableTextSegmentAttributeO5ValueVWOcTm_0(v2, (uint64_t)v10, type metadata accessor for ResolvableTextSegmentAttribute.Value);
  if (v32) {
    goto LABEL_15;
  }
  _s7SwiftUI30ResolvableTextSegmentAttributeO5ValueVWOcTm_0((uint64_t)v10, (uint64_t)v7, type metadata accessor for ResolvableTextSegmentAttribute.Value);
  if (!includeNonFunctionalAttributes || (uint64_t v33 = *(void *)&v7[*(int *)(v5 + 24)], (v34 = *(void *)(v33 + 16)) == 0))
  {
LABEL_58:
    Swift::Bool v24 = 0;
LABEL_61:
    outlined destroy of ResolvableTextSegmentAttribute.Value((uint64_t)v7, type metadata accessor for ResolvableTextSegmentAttribute.Value);
    goto LABEL_16;
  }
  uint64_t v59 = v33 + 32;
  v57[1] = v33;
  swift_bridgeObjectRetain();
  uint64_t v35 = 0;
  uint64_t v58 = MEMORY[0x263F8EE58] + 8;
  v57[0] = v34;
  while (1)
  {
    uint64_t v36 = v59 + 32 * v35;
    uint64_t v38 = *(void *)(v36 + 16);
    uint64_t v37 = *(void *)(v36 + 24);
    if (!*(void *)(v38 + 16)) {
      break;
    }
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    int v39 = _;
    uint64_t v40 = specialized __RawDictionaryStorage.find<A>(_:)(v39);
    if (v41)
    {
      outlined init with copy of Any(*(void *)(v38 + 56) + 32 * v40, (uint64_t)&v62);
    }
    else
    {
      long long v62 = 0u;
      long long v63 = 0u;
    }

    swift_bridgeObjectRelease();
    if (!*((void *)&v63 + 1)) {
      goto LABEL_35;
    }
    _s10Foundation6LocaleV8LanguageV_7SwiftUI011TypesettingC0V5FlagsVtWOhTm_0((uint64_t)&v62, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0], (uint64_t (*)(void))_sypSgMaTm_4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_28:
    if (++v35 == v34)
    {
      swift_bridgeObjectRelease();
      goto LABEL_58;
    }
  }
  long long v62 = 0u;
  long long v63 = 0u;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
LABEL_35:
  _s10Foundation6LocaleV8LanguageV_7SwiftUI011TypesettingC0V5FlagsVtWOhTm_0((uint64_t)&v62, (uint64_t)&lazy cache variable for type metadata for Any?, v58, MEMORY[0x263F8D8F0], (uint64_t (*)(void))_sypSgMaTm_4);
  uint64_t v42 = *(void *)(v37 + 16);
  if (!v42)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_60;
  }
  uint64_t v60 = v38;
  uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v45 = v44;
  if (v43 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v45 == v46)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_43;
  }
  char v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRelease();
  Swift::Bool result = swift_bridgeObjectRelease();
  if (v48)
  {
    swift_bridgeObjectRelease();
LABEL_43:
    swift_bridgeObjectRelease_n();
    goto LABEL_28;
  }
  if (v42 == 1)
  {
LABEL_53:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
LABEL_60:
    Swift::Bool v24 = 1;
    goto LABEL_61;
  }
  uint64_t v61 = v37;
  uint64_t v49 = 5;
  while (1)
  {
    uint64_t v50 = v49 - 3;
    if (__OFADD__(v49 - 4, 1)) {
      break;
    }
    uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v53 = v52;
    if (v51 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v53 == v54)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
LABEL_56:
      swift_bridgeObjectRelease_n();
      uint64_t v34 = v57[0];
      goto LABEL_28;
    }
    char v56 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    Swift::Bool result = swift_bridgeObjectRelease();
    if (v56)
    {
      swift_bridgeObjectRelease();
      goto LABEL_56;
    }
    ++v49;
    if (v50 == v42) {
      goto LABEL_53;
    }
  }
  __break(1u);
  return result;
}

uint64_t static ResolvableTextSegmentAttribute.toggleAttributes(in:)(id a1)
{
  if (one-time initialization token for resolvableTextSegment != -1) {
    swift_once();
  }
  uint64_t v2 = static NSAttributedStringKey.resolvableTextSegment;
  id v3 = objc_msgSend(a1, sel_length);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = partial apply for closure #1 in static ResolvableTextSegmentAttribute.toggleAttributes(in:);
  *(void *)(v5 + 24) = v4;
  v9[4] = _sypSgSo8_NSRangeVSpy10ObjectiveC8ObjCBoolVGIgnyy_AacGIegnyy_TRTA_0;
  v9[5] = v5;
  v9[0] = MEMORY[0x263EF8330];
  v9[1] = 1107296256;
  _OWORD v9[2] = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  _OWORD v9[3] = &block_descriptor_21;
  uint64_t v6 = _Block_copy(v9);
  id v7 = a1;
  swift_retain();
  swift_release();
  objc_msgSend(v7, sel_enumerateAttribute_inRange_options_usingBlock_, v2, 0, v3, 0, v6);
  _Block_release(v6);
  LOBYTE(v7) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v7) {
    __break(1u);
  }
  return result;
}

uint64_t static ResolvableTextSegmentAttribute.legacySegment(resolvableAttributeKey:length:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _sypSgMaTm_4(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ResolvableTextSegmentAttribute.Value.Run>, (uint64_t)&type metadata for ResolvableTextSegmentAttribute.Value.Run, MEMORY[0x263F8E0F8]);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_2461B9DC0;
  id v7 = a1;
  uint64_t v8 = MEMORY[0x263F8EE78];
  unint64_t v9 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  unint64_t v10 = specialized Dictionary.init(dictionaryLiteral:)(v8);
  ResolvableTextSegmentAttribute.Value.Run.init(range:oldAttributes:newAttributes:)(0, a2, v9, v10, (int64_t *)(v6 + 32));
  UUID.init()();
  uint64_t result = type metadata accessor for ResolvableTextSegmentAttribute.Value(0);
  *(void *)(a3 + *(int *)(result + 20)) = v7;
  *(void *)(a3 + *(int *)(result + 24)) = v6;
  return result;
}

uint64_t static ResolvableTextSegmentAttribute.update(_:in:)(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ResolvableStringResolutionContext();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x270FA5388](v4 - 8);
  if (one-time initialization token for resolvableTextSegment != -1) {
    swift_once();
  }
  uint64_t v7 = static NSAttributedStringKey.resolvableTextSegment;
  id v8 = objc_msgSend(a1, sel_length);
  _s7SwiftUI30ResolvableTextSegmentAttributeO5ValueVWOcTm_0(a2, (uint64_t)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for ResolvableStringResolutionContext);
  unint64_t v9 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a1;
  _s7SwiftUI33ResolvableStringResolutionContextVWObTm_1((uint64_t)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v10 + v9, (uint64_t (*)(void))type metadata accessor for ResolvableStringResolutionContext);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = partial apply for closure #1 in static ResolvableTextSegmentAttribute.update(_:in:);
  *(void *)(v11 + 24) = v10;
  aBlock[4] = thunk for @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()partial apply;
  aBlock[5] = v11;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  aBlock[3] = &block_descriptor_13_1;
  uint64_t v12 = _Block_copy(aBlock);
  id v13 = a1;
  swift_retain();
  swift_release();
  objc_msgSend(v13, sel_enumerateAttribute_inRange_options_usingBlock_, v7, 0, v8, 2, v12);
  _Block_release(v12);
  LOBYTE(v13) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v13) {
    __break(1u);
  }
  return result;
}

id static NSAttributedStringKey.resolvableTextSegment.getter()
{
  if (one-time initialization token for resolvableTextSegment != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static NSAttributedStringKey.resolvableTextSegment;

  return v0;
}

int64_t ResolvableTextSegmentAttribute.Value.Run.init(range:oldAttributes:newAttributes:)@<X0>(int64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int64_t *a5@<X8>)
{
  int64_t v5 = result + a2;
  if (__OFADD__(result, a2))
  {
    __break(1u);
    goto LABEL_8;
  }
  int64_t v6 = result;
  if (v5 < result)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  if (*(void *)(a4 + 16))
  {
    uint64_t v14 = MEMORY[0x263F8EE88];
    MEMORY[0x270FA5388](result);
    _OWORD v13[2] = a4;
    v13[3] = &v14;
    uint64_t v10 = specialized _NativeDictionary.filter(_:)(a3, (uint64_t (*)(id))closure #1 in ResolvableTextSegmentAttribute.Value.Run.init(range:oldAttributes:newAttributes:)partial apply, (uint64_t)v13);
    swift_bridgeObjectRelease();
    swift_retain();
    specialized Sequence.filter(_:)(a4, v10, &v14);
    int64_t v12 = v11;
    swift_release();
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    int64_t v12 = MEMORY[0x263F8EE78];
    uint64_t result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    uint64_t v10 = result;
  }
  *a5 = v6;
  a5[1] = v5;
  a5[2] = v10;
  a5[3] = v12;
  return result;
}

uint64_t areEqual #1 (_:_:) in ResolvableTextSegmentAttribute.Value.Run.init(range:oldAttributes:newAttributes:)(uint64_t a1, uint64_t a2)
{
  outlined init with copy of Any(a1, (uint64_t)v9);
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for Equatable);
  if (swift_dynamicCast())
  {
    outlined init with take of ScrollStateRequest(v7, (uint64_t)v10);
    uint64_t v3 = v11;
    uint64_t v4 = __swift_project_boxed_opaque_existential_1(v10, v11);
    char v5 = areEqual #1 <A>(_:_:) in areEqual #1 (_:_:) in ResolvableTextSegmentAttribute.Value.Run.init(range:oldAttributes:newAttributes:)((uint64_t)v4, a2, v3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  }
  else
  {
    uint64_t v8 = 0;
    memset(v7, 0, sizeof(v7));
    outlined destroy of AttributedString?((uint64_t)v7, (uint64_t)&lazy cache variable for type metadata for Equatable?, (uint64_t)&lazy cache variable for type metadata for Equatable, MEMORY[0x263F8D220], (uint64_t (*)(void))type metadata accessor for AnyTrackedValue?);
    char v5 = 0;
  }
  return v5 & 1;
}

uint64_t areEqual #1 <A>(_:_:) in areEqual #1 (_:_:) in ResolvableTextSegmentAttribute.Value.Run.init(range:oldAttributes:newAttributes:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = &v17[-v7];
  uint64_t v9 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v10);
  int64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of Any(a2, (uint64_t)v17);
  int v13 = swift_dynamicCast();
  uint64_t v14 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
  if (v13)
  {
    v14(v8, 0, 1, a3);
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v9 + 32))(v12, v8, a3);
    char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(unsigned char *, uint64_t))(v9 + 8))(v12, a3);
  }
  else
  {
    v14(v8, 1, 1, a3);
    (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
    char v15 = 0;
  }
  return v15 & 1;
}

uint64_t closure #1 in ResolvableTextSegmentAttribute.Value.Run.init(range:oldAttributes:newAttributes:)(void *a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a3 + 16))
  {
    long long v9 = 0u;
    long long v10 = 0u;
    goto LABEL_8;
  }
  id v5 = a1;
  uint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(v5);
  if ((v7 & 1) == 0)
  {
    long long v9 = 0u;
    long long v10 = 0u;

    goto LABEL_8;
  }
  outlined init with copy of Any(*(void *)(a3 + 56) + 32 * v6, (uint64_t)&v9);

  if (!*((void *)&v10 + 1))
  {
LABEL_8:
    _s10Foundation6LocaleV8LanguageV_7SwiftUI011TypesettingC0V5FlagsVtWOhTm_0((uint64_t)&v9, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0], (uint64_t (*)(void))_sypSgMaTm_4);
    return 1;
  }
  outlined init with take of Any(&v9, v11);
  if (areEqual #1 (_:_:) in ResolvableTextSegmentAttribute.Value.Run.init(range:oldAttributes:newAttributes:)((uint64_t)v11, a2))
  {
    specialized Set._Variant.insert(_:)(&v9, v5);

    __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
    return 0;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  return 1;
}

uint64_t ResolvableTextSegmentAttribute.Value.Run.encode(to:)(void *a1)
{
  type metadata accessor for KeyedEncodingContainer<ResolvableTextSegmentAttribute.Value.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<ResolvableTextSegmentAttribute.Value.Run.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvableTextSegmentAttribute.Value.Run.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.Run.CodingKeys, (uint64_t)&unk_26FA72570, MEMORY[0x263F8E0C0]);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v17 - v5;
  uint64_t v7 = *v1;
  uint64_t v8 = v1[1];
  uint64_t v9 = v1[2];
  uint64_t v18 = v1[3];
  uint64_t v19 = v9;
  uint64_t v10 = a1[3];
  uint64_t v11 = a1;
  uint64_t v13 = v12;
  __swift_project_boxed_opaque_existential_1(v11, v10);
  lazy protocol witness table accessor for type ResolvableTextSegmentAttribute.Value.Run.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.Run.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v21 = v7;
  uint64_t v22 = v8;
  char v23 = 0;
  _sSnySiGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x263F8D6C8], MEMORY[0x263F8D6E0], MEMORY[0x263F8D870]);
  lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
  uint64_t v14 = v20;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v14)
  {
    uint64_t v15 = v18;
    uint64_t v21 = v19;
    char v23 = 1;
    lazy protocol witness table accessor for type CodableNSAttributes and conformance CodableNSAttributes();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v21 = v15;
    char v23 = 2;
    type metadata accessor for ProxyCodable<[NSAttributedStringKey]>();
    _s10Foundation4UUIDVACSEAAWlTm_0(&lazy protocol witness table cache variable for type ProxyCodable<[NSAttributedStringKey]> and conformance ProxyCodable<A>, (void (*)(uint64_t))type metadata accessor for ProxyCodable<[NSAttributedStringKey]>);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v13);
}

uint64_t ResolvableTextSegmentAttribute.Value.Run.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  type metadata accessor for KeyedEncodingContainer<ResolvableTextSegmentAttribute.Value.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<ResolvableTextSegmentAttribute.Value.Run.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvableTextSegmentAttribute.Value.Run.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.Run.CodingKeys, (uint64_t)&unk_26FA72570, MEMORY[0x263F8E040]);
  uint64_t v17 = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v16 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ResolvableTextSegmentAttribute.Value.Run.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.Run.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v9 = v6;
  _sSnySiGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x263F8D6C8], MEMORY[0x263F8D6E0], MEMORY[0x263F8D870]);
  char v20 = 0;
  lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
  uint64_t v10 = v17;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v11 = v18;
  uint64_t v12 = v19;
  char v20 = 1;
  lazy protocol witness table accessor for type CodableNSAttributes and conformance CodableNSAttributes();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v16 = v11;
  uint64_t v13 = v18;
  type metadata accessor for ProxyCodable<[NSAttributedStringKey]>();
  char v20 = 2;
  _s10Foundation4UUIDVACSEAAWlTm_0(&lazy protocol witness table cache variable for type ProxyCodable<[NSAttributedStringKey]> and conformance ProxyCodable<A>, (void (*)(uint64_t))type metadata accessor for ProxyCodable<[NSAttributedStringKey]>);
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v8, v10);
  uint64_t v14 = v18;
  *a2 = v16;
  a2[1] = v12;
  a2[2] = v13;
  a2[3] = v14;
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ResolvableTextSegmentAttribute.Value.Run.CodingKeys()
{
  unint64_t v1 = 0xD000000000000011;
  if (*v0 != 1) {
    unint64_t v1 = 0xD000000000000014;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x65676E6172;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ResolvableTextSegmentAttribute.Value.Run.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized ResolvableTextSegmentAttribute.Value.Run.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ResolvableTextSegmentAttribute.Value.Run.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ResolvableTextSegmentAttribute.Value.Run.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.Run.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ResolvableTextSegmentAttribute.Value.Run.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ResolvableTextSegmentAttribute.Value.Run.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.Run.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ResolvableTextSegmentAttribute.Value.Run@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return ResolvableTextSegmentAttribute.Value.Run.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ResolvableTextSegmentAttribute.Value.Run(void *a1)
{
  return ResolvableTextSegmentAttribute.Value.Run.encode(to:)(a1);
}

uint64_t property wrapper backing initializer of ResolvableTextSegmentAttribute.Value.resolvableAttributeKey@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

Swift::Void __swiftcall ResolvableTextSegmentAttribute.Value.restoreDefault(in:of:)(__C::_NSRange in, NSMutableAttributedString of)
{
  Swift::Int location = in.location;
  uint64_t v4 = *(void *)(v2 + *(int *)(type metadata accessor for ResolvableTextSegmentAttribute.Value(0) + 24));
  uint64_t v21 = *(void *)(v4 + 16);
  if (v21)
  {
    uint64_t v20 = v4 + 32;
    swift_bridgeObjectRetain();
    unint64_t v5 = 0;
    uint64_t v19 = v4;
    do
    {
      if (v5 >= *(void *)(v4 + 16))
      {
        __break(1u);
LABEL_16:
        __break(1u);
LABEL_17:
        __break(1u);
        return;
      }
      uint64_t v7 = (uint64_t *)(v20 + 32 * v5);
      uint64_t v8 = *v7;
      uint64_t v9 = v7[1];
      uint64_t v10 = v7[3];
      swift_bridgeObjectRetain();
      uint64_t v11 = swift_bridgeObjectRetain();
      uint64_t v12 = MEMORY[0x24C526EA0](v11);
      Swift::Int v13 = location + v8;
      if (__OFADD__(location, v8)) {
        goto LABEL_16;
      }
      uint64_t v14 = v9 - v8;
      if (__OFSUB__(v9, v8)) {
        goto LABEL_17;
      }
      uint64_t v15 = (void *)v12;
      uint64_t v16 = *(void *)(v10 + 16);
      if (v16)
      {
        swift_bridgeObjectRetain();
        for (uint64_t i = 0; i != v16; ++i)
        {
          uint64_t v18 = *(void *)(v10 + 8 * i + 32);
          -[objc_class removeAttribute:range:](of.super.super.isa, sel_removeAttribute_range_, v18, v13, v14);
        }
        swift_bridgeObjectRelease();
      }
      ++v5;
      type metadata accessor for NSAttributedStringKey(0);
      _s10Foundation4UUIDVACSEAAWlTm_0(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
      swift_bridgeObjectRetain();
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      -[objc_class addAttributes:range:](of.super.super.isa, sel_addAttributes_range_, isa, v13, v14);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v4 = v19;
    }
    while (v5 != v21);
    swift_bridgeObjectRelease();
  }
}

Swift::Void __swiftcall ResolvableTextSegmentAttribute.Value.toggleAttributes(in:of:)(__C::_NSRange in, NSMutableAttributedString of)
{
  Swift::Int length = in.length;
  Swift::Int location = in.location;
  uint64_t v102 = type metadata accessor for ResolvableTextSegmentAttribute.Value(0);
  MEMORY[0x270FA5388](v102);
  uint64_t v101 = (uint64_t)&isa - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  long long v103 = (char *)&isa - v7;
  if (one-time initialization token for resolvableTextSegment != -1) {
    goto LABEL_111;
  }
  while (1)
  {
    -[objc_class removeAttribute:range:](of.super.super.isa, sel_removeAttribute_range_, static NSAttributedStringKey.resolvableTextSegment, location, length);
    uint64_t v8 = (objc_class *)MEMORY[0x263F8EE78];
    double v132 = (objc_class *)MEMORY[0x263F8EE78];
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = &v132;
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 16) = closure #1 in NSAttributedString.runs(in:)partial apply;
    *(void *)(v10 + 24) = v9;
    double v129 = thunk for @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()partial apply;
    uint64_t v130 = v10;
    *(void *)&long long aBlock = MEMORY[0x263EF8330];
    *((void *)&aBlock + 1) = 1107296256;
    *(void *)&long long v128 = thunk for @escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
    *((void *)&v128 + 1) = &block_descriptor_72;
    uint64_t v11 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    -[objc_class enumerateAttributesInRange:options:usingBlock:](of.super.super.isa, sel_enumerateAttributesInRange_options_usingBlock_, location, length, 0, v11);
    _Block_release(v11);
    LOBYTE(v11) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if (v11)
    {
      __break(1u);
LABEL_113:
      __break(1u);
      return;
    }
    uint64_t v12 = v8;
    Swift::Int v13 = v132;
    swift_release();
    v14.Swift::Int location = location;
    ResolvableTextSegmentAttribute.Value.restoreDefault(in:of:)(v14, of);
    double v132 = v12;
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = &v132;
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = closure #1 in NSAttributedString.runs(in:)partial apply;
    *(void *)(v16 + 24) = v15;
    double v129 = thunk for @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()partial apply;
    uint64_t v130 = v16;
    *(void *)&long long aBlock = MEMORY[0x263EF8330];
    *((void *)&aBlock + 1) = 1107296256;
    *(void *)&long long v128 = thunk for @escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
    *((void *)&v128 + 1) = &block_descriptor_83_0;
    uint64_t v17 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    Class isa = of.super.super.isa;
    Swift::Int v109 = location;
    Swift::Int v100 = length;
    objc_msgSend(of.super.super.isa, (SEL)&selRef_setTransform_ + 2, location, length, 0, v17);
    _Block_release(v17);
    LOBYTE(v17) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if (v17) {
      goto LABEL_113;
    }
    uint64_t v18 = v132;
    swift_release();
    unint64_t v19 = *((void *)v13 + 2);
    unint64_t v115 = *((void *)v18 + 2);
    int64_t v20 = v115 <= v19 ? v19 : v115;
    uint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20, 0, MEMORY[0x263F8EE78]);
    uint64_t v22 = v21;
    uint64_t v23 = *((void *)v13 + 2);
    if (!v23) {
      break;
    }
    unint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v120 = 0;
    long long v107 = (char *)v13 + 32;
    Swift::UInt64 v110 = (char *)v18 + 32;
    uint64_t v122 = MEMORY[0x263F8EE58] + 8;
    int64_t v26 = v109;
    long long v106 = v13;
    int v113 = v18;
    uint64_t v105 = v23;
    while (v25 >= v115)
    {
LABEL_10:
      ++v24;
      if (v25 <= 0)
      {
        if (v24 == v23)
        {
LABEL_99:
          char v92 = v22;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_100;
        }
        uint64_t v25 = 0;
      }
      else
      {
        if (v24 == v23) {
          goto LABEL_99;
        }
        --v25;
      }
      if (v24 >= *((void *)v13 + 2)) {
        goto LABEL_109;
      }
    }
    uint64_t v27 = &v107[24 * v24];
    uint64_t v28 = *((void *)v27 + 1);
    uint64_t v112 = *(void *)v27;
    uint64_t v114 = v112 + v28;
    if (__OFADD__(v112, v28)) {
      goto LABEL_110;
    }
    unint64_t v108 = v24;
    uint64_t v111 = *((void *)v27 + 2);
    uint64_t v29 = v22;
    uint64_t v30 = v25;
    uint64_t v31 = swift_bridgeObjectRetain();
    unint64_t v32 = v30;
    uint64_t v33 = v113;
    uint64_t v34 = v29;
    uint64_t v35 = v110;
    uint64_t v36 = v112;
    while (1)
    {
      if (v32 >= *((void *)v33 + 2)) {
        goto LABEL_102;
      }
      uint64_t v37 = (uint64_t *)&v35[24 * v32];
      uint64_t v38 = *v37;
      uint64_t v39 = v37[1];
      BOOL v40 = __OFADD__(v38, v39);
      uint64_t v41 = v38 + v39;
      if (v40) {
        break;
      }
      if (v41 >= v114) {
        uint64_t v42 = v114;
      }
      else {
        uint64_t v42 = v41;
      }
      if (v38 >= v36 && v38 < v114)
      {
        uint64_t v45 = v42 - v38;
        if (__OFSUB__(v42, v38)) {
          goto LABEL_107;
        }
      }
      else
      {
        if (v36 < v38 || v36 >= v41)
        {
          uint64_t v90 = v32;
          CGFloat v91 = v34;
LABEL_9:
          swift_bridgeObjectRelease();
          Swift::Int v13 = v106;
          uint64_t v22 = v91;
          uint64_t v23 = v105;
          unint64_t v24 = v108;
          uint64_t v25 = v90;
          goto LABEL_10;
        }
        uint64_t v45 = v42 - v36;
        if (__OFSUB__(v42, v36)) {
          goto LABEL_108;
        }
        uint64_t v38 = v36;
      }
      uint64_t v46 = v38 - v26;
      if (__OFSUB__(v38, v26)) {
        goto LABEL_104;
      }
      BOOL v40 = __OFADD__(v46, v45);
      unint64_t v47 = (objc_class *)(v46 + v45);
      if (v40) {
        goto LABEL_105;
      }
      if ((uint64_t)v47 < v46) {
        goto LABEL_106;
      }
      Swift::Int location = *(void *)&v35[24 * v32 + 16];
      if (*(void *)(location + 16))
      {
        uint64_t v116 = v47;
        uint64_t v117 = v38 - v26;
        unint64_t v118 = v32;
        int v119 = v34;
        double v132 = (objc_class *)MEMORY[0x263F8EE88];
        MEMORY[0x270FA5388](v31);
        *(&isa - 2) = (Class)location;
        *(&isa - 1) = (Class)&v132;
        uint64_t v48 = v111;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v49 = v120;
        uint64_t v50 = specialized _NativeDictionary.filter(_:)(v48, (uint64_t (*)(id))closure #1 in ResolvableTextSegmentAttribute.Value.Run.init(range:oldAttributes:newAttributes:)partial apply, (uint64_t)(&isa - 4));
        uint64_t v120 = v49;
        swift_bridgeObjectRelease();
        uint64_t v51 = *(void *)(location + 64);
        Swift::Int v123 = location + 64;
        uint64_t v52 = 1 << *(unsigned char *)(location + 32);
        if (v52 < 64) {
          uint64_t v53 = ~(-1 << v52);
        }
        else {
          uint64_t v53 = -1;
        }
        unint64_t v54 = v53 & v51;
        int64_t v124 = (unint64_t)(v52 + 63) >> 6;
        swift_retain();
        int64_t v26 = 0;
        CGFloat v121 = (NSMutableAttributedString *)MEMORY[0x263F8EE78];
        while (1)
        {
          if (v54)
          {
            unint64_t v55 = __clz(__rbit64(v54));
            v54 &= v54 - 1;
            unint64_t v56 = v55 | (v26 << 6);
          }
          else
          {
            int64_t v57 = v26 + 1;
            if (__OFADD__(v26, 1))
            {
              __break(1u);
              goto LABEL_99;
            }
            if (v57 >= v124) {
              goto LABEL_89;
            }
            unint64_t v58 = *(void *)(v123 + 8 * v57);
            ++v26;
            if (!v58)
            {
              int64_t v26 = v57 + 1;
              if (v57 + 1 >= v124) {
                goto LABEL_89;
              }
              unint64_t v58 = *(void *)(v123 + 8 * v26);
              if (!v58)
              {
                int64_t v26 = v57 + 2;
                if (v57 + 2 >= v124) {
                  goto LABEL_89;
                }
                unint64_t v58 = *(void *)(v123 + 8 * v26);
                if (!v58)
                {
                  int64_t v26 = v57 + 3;
                  if (v57 + 3 >= v124) {
                    goto LABEL_89;
                  }
                  unint64_t v58 = *(void *)(v123 + 8 * v26);
                  if (!v58)
                  {
                    int64_t v59 = v57 + 4;
                    if (v59 >= v124)
                    {
LABEL_89:
                      swift_release();
                      swift_release();
                      int64_t v26 = v109;
                      uint64_t v31 = swift_bridgeObjectRelease();
                      uint64_t v34 = v119;
                      uint64_t v33 = v113;
                      uint64_t v35 = v110;
                      unint64_t v32 = v118;
                      uint64_t v36 = v112;
                      uint64_t v46 = v117;
                      unint64_t v47 = v116;
                      goto LABEL_91;
                    }
                    unint64_t v58 = *(void *)(v123 + 8 * v59);
                    int64_t v26 = v59;
                    if (!v58)
                    {
                      while (1)
                      {
                        int64_t v26 = v59 + 1;
                        if (__OFADD__(v59, 1)) {
                          break;
                        }
                        if (v26 >= v124) {
                          goto LABEL_89;
                        }
                        unint64_t v58 = *(void *)(v123 + 8 * v26);
                        ++v59;
                        if (v58) {
                          goto LABEL_59;
                        }
                      }
                      __break(1u);
LABEL_102:
                      __break(1u);
                      goto LABEL_103;
                    }
                  }
                }
              }
            }
LABEL_59:
            unint64_t v54 = (v58 - 1) & v58;
            unint64_t v56 = __clz(__rbit64(v58)) + (v26 << 6);
          }
          uint64_t v60 = *(void **)(*(void *)(location + 48) + 8 * v56);
          if (*(void *)(v50 + 16))
          {
            of.super.super.Class isa = (Class)v60;
            uint64_t v61 = specialized __RawDictionaryStorage.find<A>(_:)(of.super.super.isa);
            if (v62)
            {
              outlined init with copy of Any(*(void *)(v50 + 56) + 32 * v61, (uint64_t)&aBlock);
            }
            else
            {
              long long aBlock = 0u;
              long long v128 = 0u;
            }

            if (*((void *)&v128 + 1))
            {
              _s10Foundation6LocaleV8LanguageV_7SwiftUI011TypesettingC0V5FlagsVtWOhTm_0((uint64_t)&aBlock, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0], (uint64_t (*)(void))_sypSgMaTm_4);

              continue;
            }
          }
          else
          {
            long long aBlock = 0u;
            long long v128 = 0u;
            id v63 = v60;
          }
          _s10Foundation6LocaleV8LanguageV_7SwiftUI011TypesettingC0V5FlagsVtWOhTm_0((uint64_t)&aBlock, (uint64_t)&lazy cache variable for type metadata for Any?, v122, MEMORY[0x263F8D8F0], (uint64_t (*)(void))_sypSgMaTm_4);
          of.super.super.Class isa = v132;
          if (*((void *)v132 + 2))
          {
            unint64_t v125 = v54;
            int64_t v126 = v26;
            Swift::Int v64 = location;
            static String._unconditionallyBridgeFromObjectiveC(_:)();
            Hasher.init(_seed:)();
            swift_bridgeObjectRetain();
            String.hash(into:)();
            Swift::Int v65 = Hasher._finalize()();
            swift_bridgeObjectRelease();
            Swift::Int length = -1 << *((unsigned char *)of.super.super.isa + 32);
            unint64_t v66 = v65 & ~length;
            if ((*(void *)((char *)of.super.super.isa + ((v66 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) >> v66))
            {
              uint64_t v67 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v69 = v68;
              if (v67 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v69 == v70)
              {
LABEL_81:
                swift_bridgeObjectRelease_n();
LABEL_82:

                swift_bridgeObjectRelease();
                Swift::Int location = v64;
                unint64_t v54 = v125;
                int64_t v26 = v126;
                continue;
              }
              char v72 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (v72) {
                goto LABEL_82;
              }
              Swift::Int length = ~length;
              while (1)
              {
                unint64_t v66 = (v66 + 1) & length;
                if (((*(void *)((char *)of.super.super.isa + ((v66 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) >> v66) & 1) == 0) {
                  break;
                }
                uint64_t v73 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                uint64_t v75 = v74;
                if (v73 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v75 == v76) {
                  goto LABEL_81;
                }
                char v78 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if (v78) {
                  goto LABEL_82;
                }
              }
            }
            swift_bridgeObjectRelease();
            Swift::Int location = v64;
            unint64_t v54 = v125;
            int64_t v26 = v126;
          }
          uint64_t v79 = v121;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          BOOL v81 = v79;
          double v131 = v79;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)v79[2].super.super.isa + 1, 1);
            BOOL v81 = v131;
          }
          uint64_t v82 = v81;
          unint64_t v84 = (unint64_t)v81[2].super.super.isa;
          unint64_t v83 = (unint64_t)v81[3].super.super.isa;
          of.super.super.Class isa = (Class)(v84 + 1);
          if (v84 >= v83 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v83 > 1, v84 + 1, 1);
            uint64_t v82 = v131;
          }
          v82[2].super.super.Class isa = of.super.super.isa;
          CGFloat v121 = v82;
          v82[v84 + 4].super.super.Class isa = (Class)v60;
        }
      }
      uint64_t v50 = MEMORY[0x263F8EE80];
      CGFloat v121 = (NSMutableAttributedString *)MEMORY[0x263F8EE78];
LABEL_91:
      unint64_t v86 = v34[2];
      unint64_t v85 = v34[3];
      if (v86 >= v85 >> 1)
      {
        unint64_t v89 = v32;
        Swift::Int location = v46;
        of.super.super.Class isa = v47;
        uint64_t v31 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v85 > 1), v86 + 1, 1, v34);
        unint64_t v47 = of.super.super.isa;
        uint64_t v46 = location;
        unint64_t v32 = v89;
        uint64_t v35 = v110;
        uint64_t v34 = (void *)v31;
        uint64_t v36 = v112;
        uint64_t v33 = v113;
      }
      _OWORD v34[2] = v86 + 1;
      uint64_t v87 = &v34[4 * v86];
      v87[4] = v46;
      v87[5] = v47;
      unint64_t v88 = v121;
      v87[6] = v50;
      v87[7] = v88;
      if (++v32 == v115)
      {
        CGFloat v91 = v34;
        uint64_t v90 = v115;
        goto LABEL_9;
      }
    }
LABEL_103:
    __break(1u);
LABEL_104:
    __break(1u);
LABEL_105:
    __break(1u);
LABEL_106:
    __break(1u);
LABEL_107:
    __break(1u);
LABEL_108:
    __break(1u);
LABEL_109:
    __break(1u);
LABEL_110:
    __break(1u);
LABEL_111:
    swift_once();
  }
  char v92 = v21;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  int64_t v26 = v109;
LABEL_100:
  uint64_t v93 = (uint64_t)v103;
  UUID.init()();
  uint64_t v94 = v102;
  uint64_t v95 = *(int *)(v102 + 20);
  unint64_t v96 = *(void **)(v104 + v95);
  *(void *)(v93 + v95) = v96;
  *(void *)(v93 + *(int *)(v94 + 24)) = v92;
  uint64_t v97 = static NSAttributedStringKey.resolvableTextSegment;
  _s7SwiftUI30ResolvableTextSegmentAttributeO5ValueVWOcTm_0(v93, v101, type metadata accessor for ResolvableTextSegmentAttribute.Value);
  id v98 = v96;
  -[objc_class addAttribute:value:range:](isa, sel_addAttribute_value_range_, v97, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(), v26, v100);
  swift_unknownObjectRelease();
  outlined destroy of ResolvableTextSegmentAttribute.Value(v93, type metadata accessor for ResolvableTextSegmentAttribute.Value);
}

uint64_t ResolvableTextSegmentAttribute.Value.update(_:of:in:)(Swift::Int a1, void *a2, objc_class *a3, char *a4)
{
  uint64_t v5 = v4;
  long long v128 = a4;
  double v132 = a2;
  uint64_t v8 = type metadata accessor for ResolvableTextSegmentAttribute.Value(0);
  MEMORY[0x270FA5388](v8);
  uint64_t v124 = (uint64_t)v115 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v127 = (char *)v115 - v11;
  MEMORY[0x270FA5388](v12);
  uint64_t v123 = (uint64_t)v115 - v13;
  unint64_t v125 = (void (*)(char *, uint64_t))type metadata accessor for AttributedString.CharacterView();
  MEMORY[0x270FA5388](v125);
  type metadata accessor for AttributedString.AdaptiveImageGlyph?(0, &lazy cache variable for type metadata for AttributedString?, MEMORY[0x263F06828], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)v115 - v15;
  uint64_t v131 = type metadata accessor for AttributedString();
  int64_t v130 = *(void *)(v131 - 8);
  MEMORY[0x270FA5388](v131);
  int64_t v126 = (char *)v115 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v19 = MEMORY[0x270FA5388](v18);
  double v129 = (char *)v115 - v20;
  v133.super.super.Class isa = a3;
  Swift::Int v134 = a1;
  id v21 = -[objc_class attributesAtIndex:effectiveRange:](a3, sel_attributesAtIndex_effectiveRange_, a1, 0, v19);
  type metadata accessor for NSAttributedStringKey(0);
  _s10Foundation4UUIDVACSEAAWlTm_0(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
  uint64_t v22 = MEMORY[0x263F8EE58];
  uint64_t v23 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (!*(void *)(v23 + 16))
  {
    long long aBlock = 0u;
    long long v136 = 0u;
LABEL_9:
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  uint64_t v122 = v8;
  uint64_t v24 = *(int *)(v8 + 20);
  id v25 = *(id *)((char *)v5 + v24);
  uint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(v25);
  if ((v27 & 1) == 0)
  {
    long long aBlock = 0u;
    long long v136 = 0u;

    goto LABEL_9;
  }
  outlined init with copy of Any(*(void *)(v23 + 56) + 32 * v26, (uint64_t)&aBlock);

  swift_bridgeObjectRelease();
  if (!*((void *)&v136 + 1))
  {
LABEL_10:
    _s10Foundation6LocaleV8LanguageV_7SwiftUI011TypesettingC0V5FlagsVtWOhTm_0((uint64_t)&aBlock, (uint64_t)&lazy cache variable for type metadata for Any?, v22 + 8, MEMORY[0x263F8D8F0], (uint64_t (*)(void))_sypSgMaTm_4);
    goto LABEL_11;
  }
  outlined init with take of Any(&aBlock, &v143);
  outlined init with copy of Any((uint64_t)&v143, (uint64_t)v139);
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for ResolvableStringAttribute);
  if ((swift_dynamicCast() & 1) == 0)
  {
    CGFloat v137 = 0;
    long long aBlock = 0u;
    long long v136 = 0u;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v143);
    outlined destroy of AttributedString?((uint64_t)&aBlock, (uint64_t)&lazy cache variable for type metadata for ResolvableStringAttribute?, (uint64_t)&lazy cache variable for type metadata for ResolvableStringAttribute, (uint64_t)&protocol descriptor for ResolvableStringAttribute, (uint64_t (*)(void))type metadata accessor for AnyTrackedValue?);
    goto LABEL_11;
  }
  uint64_t v119 = v24;
  uint64_t v120 = v5;
  outlined init with take of ScrollStateRequest(&aBlock, (uint64_t)&v140);
  uint64_t v29 = v141;
  uint64_t v28 = v142;
  __swift_project_boxed_opaque_existential_1(&v140, v141);
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 40))(v128, v29, v28);
  int64_t v30 = v130;
  uint64_t v31 = v131;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v130 + 48))(v16, 1, v131) == 1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v143);
    outlined destroy of AttributedString?((uint64_t)v16, (uint64_t)&lazy cache variable for type metadata for AttributedString?, MEMORY[0x263F06828], MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for AttributedString.AdaptiveImageGlyph?);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v140);
LABEL_11:
    _sypSgMaTm_4(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Any>, v22 + 8, MEMORY[0x263F8E0F8]);
    uint64_t v32 = swift_allocObject();
    *(_OWORD *)(v32 + 16) = xmmword_2461B9DC0;
    *(void *)&long long aBlock = 0;
    *((void *)&aBlock + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(38);
    *(void *)&long long aBlock = 0;
    *((void *)&aBlock + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(54);
    v33._countAndFlagsBits = 0xD00000000000002DLL;
    v33._object = (void *)0x80000002462210F0;
    String.append(_:)(v33);
    v34._countAndFlagsBits = _NSRange.description.getter();
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    v35._countAndFlagsBits = 543584032;
    v35._object = (void *)0xE400000000000000;
    String.append(_:)(v35);
    id v36 = [(objc_class *)v133.super.super.isa description];
    uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v39 = v38;

    v40._countAndFlagsBits = v37;
    v40._object = v39;
    String.append(_:)(v40);
    swift_bridgeObjectRelease();
    v41._countAndFlagsBits = 34;
    v41._object = (void *)0xE100000000000000;
    String.append(_:)(v41);
    swift_bridgeObjectRelease();
    v42._countAndFlagsBits = 2108704;
    v42._object = (void *)0xE300000000000000;
    String.append(_:)(v42);
    v43._countAndFlagsBits = StaticString.description.getter();
    String.append(_:)(v43);
    swift_bridgeObjectRelease();
    v44._countAndFlagsBits = 58;
    v44._object = (void *)0xE100000000000000;
    String.append(_:)(v44);
    uint64_t v140 = 84;
    v45._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v45);
    swift_bridgeObjectRelease();
    v46._object = (void *)0x800000024621D860;
    v46._countAndFlagsBits = 0xD00000000000001CLL;
    String.append(_:)(v46);
    long long v47 = aBlock;
    *(void *)(v32 + 56) = MEMORY[0x263F8D310];
    *(_OWORD *)(v32 + 32) = v47;
    print(_:separator:terminator:)();
    return swift_bridgeObjectRelease();
  }
  (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v129, v16, v31);
  Swift::Int v49 = v134;
  v50.Swift::Int location = v134;
  Class isa = v133.super.super.isa;
  p_long long aBlock = v120;
  ResolvableTextSegmentAttribute.Value.restoreDefault(in:of:)(v50, v133);
  if (one-time initialization token for resolvableTextSegment != -1) {
    goto LABEL_41;
  }
  while (1)
  {
    uint64_t v53 = v132;
    -[objc_class removeAttribute:range:](isa, sel_removeAttribute_range_, static NSAttributedStringKey.resolvableTextSegment, v49, v132);
    -[objc_class removeAttribute:range:](isa, sel_removeAttribute_range_, *(void *)((char *)p_aBlock + v119), v49, v53);
    id v54 = [(objc_class *)isa attributesAtIndex:v49 effectiveRange:0];
    uint64_t v121 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    unint64_t v55 = *(void (**)(char *, char *, uint64_t))(v30 + 16);
    unint64_t v56 = v126;
    uint64_t v57 = v131;
    v55(v126, v129, v131);
    AttributedString.characters.getter();
    _s10Foundation4UUIDVACSEAAWlTm_0(&lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView, MEMORY[0x263F066D8]);
    uint64_t v58 = String.init<A>(_:)();
    uint64_t v60 = v59;
    uint64_t v61 = *(void (**)(char *, uint64_t))(v30 + 8);
    int64_t v130 = v30 + 8;
    unint64_t v125 = v61;
    v61(v56, v57);
    char v62 = (uint64_t *)&v128[*(int *)(type metadata accessor for ResolvableStringResolutionContext() + 20)];
    uint64_t v64 = *v62;
    uint64_t v63 = v62[1];
    if (v63)
    {
      swift_retain_n();
      swift_retain_n();
      char v65 = specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v64);
      swift_release();
      swift_release();
      if (v65) {
        goto LABEL_16;
      }
    }
    else
    {
      long long aBlock = (unint64_t)v64;
      swift_retain();
      if (specialized static ShouldRedactContentKey.value(in:)((uint64_t *)&aBlock))
      {
LABEL_16:
        uint64_t v66 = String.count.getter();
        uint64_t v58 = MEMORY[0x24C522AC0](3081666804, 0xA400000000000000, v66);
        uint64_t v68 = v67;
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t v60 = v68;
        goto LABEL_19;
      }
    }
    swift_release();
    swift_release();
LABEL_19:
    *(void *)&long long aBlock = v64;
    *((void *)&aBlock + 1) = v63;
    swift_retain();
    swift_retain();
    uint64_t v69 = String.caseConvertedIfNeeded(_:)((uint64_t *)&aBlock, v58, v60);
    uint64_t v71 = v70;
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    char v72 = (void *)MEMORY[0x24C522820](v69, v71);
    swift_bridgeObjectRelease();
    Class v73 = v133.super.super.isa;
    Swift::Int v74 = v134;
    uint64_t v75 = v132;
    -[objc_class replaceCharactersInRange:withString:](v133.super.super.isa, sel_replaceCharactersInRange_withString_, v134, v132, v72);

    type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
    v55(v56, v129, v131);
    uint64_t v76 = (char *)NSAttributedString.init(_:)();
    id v77 = objc_msgSend(v76, sel_length);
    char v78 = (void *)swift_allocObject();
    v78[2] = v73;
    v78[3] = v74;
    v78[4] = v75;
    uint64_t v79 = swift_allocObject();
    *(void *)(v79 + 16) = partial apply for closure #1 in ResolvableTextSegmentAttribute.Value.update(_:of:in:);
    *(void *)(v79 + 24) = v78;
    double v132 = v78;
    CGFloat v137 = thunk for @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()partial apply;
    uint64_t v138 = v79;
    *(void *)&long long aBlock = MEMORY[0x263EF8330];
    *((void *)&aBlock + 1) = 1107296256;
    *(void *)&long long v136 = thunk for @escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
    *((void *)&v136 + 1) = &block_descriptor_94;
    uint64_t v80 = _Block_copy(&aBlock);
    BOOL v81 = v73;
    uint64_t v82 = v76;
    unint64_t v83 = v81;
    swift_retain();
    swift_release();
    objc_msgSend(v82, sel_enumerateAttributesInRange_options_usingBlock_, 0, v77, 0, v80);
    _Block_release(v80);
    LOBYTE(v80) = swift_isEscapingClosureAtFileLocation();
    uint64_t result = swift_release();
    if (v80)
    {
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    long long v128 = v82;
    unint64_t v84 = (char *)objc_msgSend(v82, sel_length);
    uint64_t v117 = static NSAttributedStringKey.resolvableTextSegment;
    unint64_t v85 = *(void **)((char *)v120 + v119);
    unint64_t v86 = v83;
    Class isa = v85;
    uint64_t v87 = v127;
    UUID.init()();
    uint64_t v88 = v122;
    *(void *)&v87[*(int *)(v122 + 20)] = isa;
    v139[0] = MEMORY[0x263F8EE78];
    uint64_t v89 = swift_allocObject();
    *(void *)(v89 + 16) = v139;
    uint64_t v90 = swift_allocObject();
    *(void *)(v90 + 16) = closure #1 in NSAttributedString.runs(in:)partial apply;
    *(void *)(v90 + 24) = v89;
    CGFloat v137 = thunk for @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()partial apply;
    uint64_t v138 = v90;
    *(void *)&long long aBlock = MEMORY[0x263EF8330];
    *((void *)&aBlock + 1) = 1107296256;
    *(void *)&long long v136 = thunk for @escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
    *((void *)&v136 + 1) = &block_descriptor_105;
    CGFloat v91 = _Block_copy(&aBlock);
    Swift::Int v49 = v138;
    uint64_t v116 = isa;
    swift_retain();
    swift_release();
    unint64_t v118 = v86;
    int64_t v126 = v84;
    -[objc_class enumerateAttributesInRange:options:usingBlock:](v86, sel_enumerateAttributesInRange_options_usingBlock_, v74, v84, 0, v91);
    _Block_release(v91);
    LOBYTE(v91) = swift_isEscapingClosureAtFileLocation();
    uint64_t result = swift_release();
    if (v91) {
      goto LABEL_43;
    }
    uint64_t v92 = v139[0];
    swift_release();
    int64_t v30 = *(void *)(v92 + 16);
    if (!v30) {
      break;
    }
    v115[0] = v115;
    *(void *)&long long aBlock = MEMORY[0x263F8EE78];
    p_long long aBlock = &aBlock;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v30, 0);
    Swift::Int v93 = aBlock;
    v115[1] = v92;
    uint64_t v94 = (long long **)(v92 + 48);
    while (1)
    {
      uint64_t v95 = (uint64_t)*(v94 - 2);
      uint64_t v96 = v95 - v74;
      if (__OFSUB__(v95, v74)) {
        break;
      }
      Swift::Int v49 = v93;
      uint64_t v97 = (uint64_t)*(v94 - 1);
      p_long long aBlock = *v94;
      Class isa = (Class)(v96 + v97);
      BOOL v98 = __OFADD__(v96, v97);
      uint64_t v99 = swift_bridgeObjectRetain();
      if (v98) {
        goto LABEL_39;
      }
      if ((uint64_t)isa < v96) {
        goto LABEL_40;
      }
      if (*((void *)p_aBlock + 2))
      {
        v133.super.super.Class isa = (Class)v115;
        v139[0] = MEMORY[0x263F8EE88];
        MEMORY[0x270FA5388](v99);
        v115[-2] = p_aBlock;
        v115[-1] = v139;
        uint64_t v100 = swift_bridgeObjectRetain();
        uint64_t v101 = specialized _NativeDictionary.filter(_:)(v100, (uint64_t (*)(id))closure #1 in ResolvableTextSegmentAttribute.Value.Run.init(range:oldAttributes:newAttributes:)partial apply, (uint64_t)&v115[-4]);
        swift_bridgeObjectRelease();
        swift_retain();
        specialized Sequence.filter(_:)((uint64_t)p_aBlock, v101, v139);
        uint64_t v103 = v102;
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v103 = MEMORY[0x263F8EE78];
        uint64_t v101 = MEMORY[0x263F8EE80];
      }
      Swift::Int v93 = v49;
      *(void *)&long long aBlock = v49;
      unint64_t v105 = *(void *)(v49 + 16);
      unint64_t v104 = *(void *)(v49 + 24);
      Swift::Int v49 = v105 + 1;
      if (v105 >= v104 >> 1)
      {
        p_long long aBlock = &aBlock;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v104 > 1, v105 + 1, 1);
        Swift::Int v93 = aBlock;
      }
      *(void *)(v93 + 16) = v49;
      long long v106 = (void *)(v93 + 32 * v105);
      unsigned char v106[4] = v96;
      v106[5] = isa;
      v106[6] = v101;
      v106[7] = v103;
      v94 += 3;
      --v30;
      Swift::Int v74 = v134;
      if (!v30)
      {
        Swift::Int v107 = v93;

        unint64_t v108 = v118;
        uint64_t v88 = v122;
        goto LABEL_37;
      }
    }
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    swift_once();
  }

  unint64_t v108 = v118;
  Swift::Int v107 = MEMORY[0x263F8EE78];
LABEL_37:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v109 = (uint64_t)v127;
  *(void *)&v127[*(int *)(v88 + 24)] = v107;
  uint64_t v110 = v123;
  _s7SwiftUI33ResolvableStringResolutionContextVWObTm_1(v109, v123, type metadata accessor for ResolvableTextSegmentAttribute.Value);
  _s7SwiftUI30ResolvableTextSegmentAttributeO5ValueVWOcTm_0(v110, v124, type metadata accessor for ResolvableTextSegmentAttribute.Value);
  uint64_t v111 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  outlined destroy of ResolvableTextSegmentAttribute.Value(v110, type metadata accessor for ResolvableTextSegmentAttribute.Value);
  uint64_t v112 = v126;
  -[objc_class addAttribute:value:range:](v108, sel_addAttribute_value_range_, v117, v111, v74, v126);
  swift_unknownObjectRelease();
  int v113 = *(void **)((char *)v120 + v119);
  __swift_project_boxed_opaque_existential_1(&v140, v141);
  id v114 = v113;
  -[objc_class addAttribute:value:range:](v108, sel_addAttribute_value_range_, v114, _bridgeAnythingToObjectiveC<A>(_:)(), v74, v112);

  swift_unknownObjectRelease();
  v125(v129, v131);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v143);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v140);
  return swift_release();
}

void closure #1 in ResolvableTextSegmentAttribute.Value.update(_:of:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  type metadata accessor for NSAttributedStringKey(0);
  _s10Foundation4UUIDVACSEAAWlTm_0(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
  v9.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  if (__OFADD__(a6, a2))
  {
    __break(1u);
  }
  else
  {
    Class isa = v9.super.isa;
    objc_msgSend(a5, sel_addAttributes_range_);
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ResolvableTextSegmentAttribute.Value.CodingKeys()
{
  unint64_t v1 = 0xD000000000000016;
  if (*v0 != 1) {
    unint64_t v1 = 1936618866;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 1684632949;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ResolvableTextSegmentAttribute.Value.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized ResolvableTextSegmentAttribute.Value.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ResolvableTextSegmentAttribute.Value.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ResolvableTextSegmentAttribute.Value.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ResolvableTextSegmentAttribute.Value.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ResolvableTextSegmentAttribute.Value.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ResolvableTextSegmentAttribute.Value.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  type metadata accessor for KeyedEncodingContainer<ResolvableTextSegmentAttribute.Value.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<ResolvableTextSegmentAttribute.Value.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvableTextSegmentAttribute.Value.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.CodingKeys, (uint64_t)&unk_26FA724E0, MEMORY[0x263F8E0C0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  NSDictionary v9 = (char *)&v12 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ResolvableTextSegmentAttribute.Value.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v14) = 0;
  type metadata accessor for UUID();
  _s10Foundation4UUIDVACSEAAWlTm_0(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v10 = type metadata accessor for ResolvableTextSegmentAttribute.Value(0);
    uint64_t v14 = *(void *)(v3 + *(int *)(v10 + 20));
    char v13 = 1;
    type metadata accessor for CodableRawRepresentable<NSAttributedStringKey>();
    _s10Foundation4UUIDVACSEAAWlTm_0(&lazy protocol witness table cache variable for type CodableRawRepresentable<NSAttributedStringKey> and conformance CodableRawRepresentable<A>, (void (*)(uint64_t))type metadata accessor for CodableRawRepresentable<NSAttributedStringKey>);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v14 = *(void *)(v3 + *(int *)(v10 + 24));
    char v13 = 2;
    _sypSgMaTm_4(0, &lazy cache variable for type metadata for [ResolvableTextSegmentAttribute.Value.Run], (uint64_t)&type metadata for ResolvableTextSegmentAttribute.Value.Run, MEMORY[0x263F8D488]);
    lazy protocol witness table accessor for type [ResolvableTextSegmentAttribute.Value.Run] and conformance <A> [A](&lazy protocol witness table cache variable for type [ResolvableTextSegmentAttribute.Value.Run] and conformance <A> [A], (void (*)(void))lazy protocol witness table accessor for type ResolvableTextSegmentAttribute.Value.Run and conformance ResolvableTextSegmentAttribute.Value.Run);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

Swift::Int ResolvableTextSegmentAttribute.Value.hashValue.getter()
{
  return Hasher._finalize()();
}

void ResolvableTextSegmentAttribute.Value.init(from:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v16 = a2;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v18 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  double v19 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for KeyedEncodingContainer<ResolvableTextSegmentAttribute.Value.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<ResolvableTextSegmentAttribute.Value.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvableTextSegmentAttribute.Value.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.CodingKeys, (uint64_t)&unk_26FA724E0, MEMORY[0x263F8E040]);
  uint64_t v20 = v5;
  uint64_t v17 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v16 - v6;
  uint64_t v8 = type metadata accessor for ResolvableTextSegmentAttribute.Value(0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ResolvableTextSegmentAttribute.Value.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.CodingKeys();
  id v21 = v7;
  uint64_t v11 = v22;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v11)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    uint64_t v12 = v17;
    uint64_t v13 = v18;
    uint64_t v22 = v8;
    uint64_t v14 = (uint64_t)a1;
    LOBYTE(v24) = 0;
    _s10Foundation4UUIDVACSEAAWlTm_0(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    uint64_t v15 = v19;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v15, v3);
    type metadata accessor for CodableRawRepresentable<NSAttributedStringKey>();
    char v23 = 1;
    _s10Foundation4UUIDVACSEAAWlTm_0(&lazy protocol witness table cache variable for type CodableRawRepresentable<NSAttributedStringKey> and conformance CodableRawRepresentable<A>, (void (*)(uint64_t))type metadata accessor for CodableRawRepresentable<NSAttributedStringKey>);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(void *)&v10[*(int *)(v22 + 20)] = v24;
    _sypSgMaTm_4(0, &lazy cache variable for type metadata for [ResolvableTextSegmentAttribute.Value.Run], (uint64_t)&type metadata for ResolvableTextSegmentAttribute.Value.Run, MEMORY[0x263F8D488]);
    char v23 = 2;
    lazy protocol witness table accessor for type [ResolvableTextSegmentAttribute.Value.Run] and conformance <A> [A](&lazy protocol witness table cache variable for type [ResolvableTextSegmentAttribute.Value.Run] and conformance <A> [A], (void (*)(void))lazy protocol witness table accessor for type ResolvableTextSegmentAttribute.Value.Run and conformance ResolvableTextSegmentAttribute.Value.Run);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v21, v20);
    *(void *)&v10[*(int *)(v22 + 24)] = v24;
    _s7SwiftUI30ResolvableTextSegmentAttributeO5ValueVWOcTm_0((uint64_t)v10, v16, type metadata accessor for ResolvableTextSegmentAttribute.Value);
    __swift_destroy_boxed_opaque_existential_1(v14);
    outlined destroy of ResolvableTextSegmentAttribute.Value((uint64_t)v10, type metadata accessor for ResolvableTextSegmentAttribute.Value);
  }
}

void protocol witness for Decodable.init(from:) in conformance ResolvableTextSegmentAttribute.Value(void *a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ResolvableTextSegmentAttribute.Value(void *a1)
{
  return ResolvableTextSegmentAttribute.Value.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ResolvableTextSegmentAttribute.Value()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ResolvableTextSegmentAttribute.Value()
{
  return Hasher._finalize()();
}

unint64_t static ResolvableTextSegmentAttribute.name.getter()
{
  return 0xD00000000000001DLL;
}

uint64_t protocol witness for static DecodableAttributedStringKey.decode(from:) in conformance ResolvableTextSegmentAttribute()
{
  return static DecodableAttributedStringKey<>.decode(from:)();
}

uint64_t protocol witness for static EncodableAttributedStringKey.encode(_:to:) in conformance ResolvableTextSegmentAttribute()
{
  return static EncodableAttributedStringKey<>.encode(_:to:)();
}

unint64_t protocol witness for static AttributedStringKey.name.getter in conformance ResolvableTextSegmentAttribute()
{
  return 0xD00000000000001DLL;
}

uint64_t closure #1 in static ResolvableTextSegmentAttribute.toggleAttributes(in:)(uint64_t a1, Swift::Int a2, Swift::Int a3, uint64_t a4, NSMutableAttributedString a5)
{
  type metadata accessor for AttributedString.AdaptiveImageGlyph?(0, &lazy cache variable for type metadata for ResolvableTextSegmentAttribute.Value?, type metadata accessor for ResolvableTextSegmentAttribute.Value, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = &v21[-v10];
  uint64_t v12 = type metadata accessor for ResolvableTextSegmentAttribute.Value(0);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = &v21[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of Any?(a1, (uint64_t)v21);
  if (v22)
  {
    int v16 = swift_dynamicCast();
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v13 + 56))(v11, v16 ^ 1u, 1, v12);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) != 1)
    {
      uint64_t v17 = _s7SwiftUI33ResolvableStringResolutionContextVWObTm_1((uint64_t)v11, (uint64_t)v15, type metadata accessor for ResolvableTextSegmentAttribute.Value);
      uint64_t v18 = (void *)MEMORY[0x24C526EA0](v17);
      v19.Swift::Int location = a2;
      v19.Swift::Int length = a3;
      ResolvableTextSegmentAttribute.Value.toggleAttributes(in:of:)(v19, a5);
      return outlined destroy of ResolvableTextSegmentAttribute.Value((uint64_t)v15, type metadata accessor for ResolvableTextSegmentAttribute.Value);
    }
  }
  else
  {
    _s10Foundation6LocaleV8LanguageV_7SwiftUI011TypesettingC0V5FlagsVtWOhTm_0((uint64_t)v21, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0], (uint64_t (*)(void))_sypSgMaTm_4);
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
  }
  return outlined destroy of AttributedString?((uint64_t)v11, (uint64_t)&lazy cache variable for type metadata for ResolvableTextSegmentAttribute.Value?, (uint64_t)type metadata accessor for ResolvableTextSegmentAttribute.Value, MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for AttributedString.AdaptiveImageGlyph?);
}

uint64_t closure #1 in static ResolvableTextSegmentAttribute.update(_:in:)(uint64_t a1, Swift::Int a2, void *a3, uint64_t a4, objc_class *a5, char *a6)
{
  type metadata accessor for AttributedString.AdaptiveImageGlyph?(0, &lazy cache variable for type metadata for ResolvableTextSegmentAttribute.Value?, type metadata accessor for ResolvableTextSegmentAttribute.Value, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = &v20[-v12];
  uint64_t v14 = type metadata accessor for ResolvableTextSegmentAttribute.Value(0);
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = &v20[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of Any?(a1, (uint64_t)v20);
  if (v21)
  {
    int v18 = swift_dynamicCast();
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v15 + 56))(v13, v18 ^ 1u, 1, v14);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) != 1)
    {
      _s7SwiftUI33ResolvableStringResolutionContextVWObTm_1((uint64_t)v13, (uint64_t)v17, type metadata accessor for ResolvableTextSegmentAttribute.Value);
      ResolvableTextSegmentAttribute.Value.update(_:of:in:)(a2, a3, a5, a6);
      return outlined destroy of ResolvableTextSegmentAttribute.Value((uint64_t)v17, type metadata accessor for ResolvableTextSegmentAttribute.Value);
    }
  }
  else
  {
    _s10Foundation6LocaleV8LanguageV_7SwiftUI011TypesettingC0V5FlagsVtWOhTm_0((uint64_t)v20, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0], (uint64_t (*)(void))_sypSgMaTm_4);
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v13, 1, 1, v14);
  }
  return outlined destroy of AttributedString?((uint64_t)v13, (uint64_t)&lazy cache variable for type metadata for ResolvableTextSegmentAttribute.Value?, (uint64_t)type metadata accessor for ResolvableTextSegmentAttribute.Value, MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for AttributedString.AdaptiveImageGlyph?);
}

void *static ResolvableTextSegmentAttribute.buildDynamicTextSegment<A>(for:style:environment:includeDefaultAttributes:options:properties:)(uint64_t a1, SEL *a2, uint64_t *a3, char a4, uint64_t *a5, char *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a3[1];
  uint64_t v9 = *a5;
  if ((*a5 & 0x80) != 0)
  {
    uint64_t v12 = *a3;
    uint64_t v13 = v8;
    uint64_t v11 = v9;
    return (void *)static ResolvableTextSegmentAttribute.buildResolvableTextSegment<A>(for:style:environment:includeDefaultAttributes:options:properties:)(a1, a2, &v12, a4 & 1, &v11, a6, a7, a8);
  }
  else
  {
    uint64_t v12 = *a3;
    uint64_t v13 = v8;
    uint64_t v11 = v9;
    return static ResolvableTextSegmentAttribute.buildUpdatableTextSegment<A>(for:style:environment:includeDefaultAttributes:options:properties:)(a1, (uint64_t)a2, &v12, a4 & 1, &v11, (uint64_t)a6, a7, a8);
  }
}

uint64_t static ResolvableTextSegmentAttribute.buildResolvableTextSegment<A>(for:style:environment:includeDefaultAttributes:options:properties:)(uint64_t a1, SEL *a2, uint64_t *a3, int a4, uint64_t *a5, char *a6, uint64_t a7, uint64_t a8)
{
  LODWORD(v130) = a4;
  uint64_t v131 = a2;
  long long v136 = (void *)a1;
  uint64_t v13 = type metadata accessor for ResolvableTextSegmentAttribute.Value(0);
  MEMORY[0x270FA5388](v13);
  uint64_t v123 = (uint64_t)&v121 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  double v132 = (char *)&v121 - v16;
  MEMORY[0x270FA5388](v17);
  __C::_NSRange v19 = (SEL **)((char *)&v121 - v18);
  uint64_t v125 = type metadata accessor for PlatformAttributeResolver(0);
  MEMORY[0x270FA5388](v125);
  Swift::Int v134 = (uint64_t *)((char *)&v121 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v128 = *(void *)(a7 - 8);
  MEMORY[0x270FA5388](v21);
  CGFloat v137 = (char *)&v121 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v138 = a7;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  id v25 = (char *)&v121 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v26);
  uint64_t v28 = (char *)&v121 - v27;
  uint64_t v29 = *a3;
  uint64_t v30 = a3[1];
  uint64_t v139 = *a5;
  uint64_t v124 = v19;
  uint64_t v133 = v13;
  uint64_t v126 = v31;
  uint64_t v140 = v30;
  double v129 = a6;
  uint64_t v135 = (SEL **)v29;
  if (v30)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v29, (uint64_t *)v144);
    swift_release_n();
    swift_release_n();
    uint64_t v32 = *(void *)&v144[0];
  }
  else
  {
    _sSnySiGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>, (uint64_t)&type metadata for EnvironmentValues.TextSizeVariantKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSizeVariantKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    BloomFilter.init(hashValue:)(v33);
    uint64_t v34 = *(void *)&v144[0];
    uint64_t v35 = swift_retain_n();
    uint64_t v36 = specialized find1<A>(_:key:filter:)(v35, v34);
    if (v36) {
      uint64_t v32 = *(void *)(v36 + 72);
    }
    else {
      uint64_t v32 = 0;
    }
    swift_release_n();
  }
  uint64_t v37 = TupleTypeMetadata2;
  uint64_t v38 = *(int *)(TupleTypeMetadata2 + 48);
  aBlock[0] = v32;
  uint64_t v39 = v28;
  Swift::String v40 = v28;
  uint64_t v41 = v138;
  char v42 = (*(uint64_t (**)(char *, uint64_t *, uint64_t, uint64_t))(a8 + 72))(v40, aBlock, v138, a8);
  long long v136 = (void *)a8;
  v39[v38] = v42 & 1;
  int64_t v127 = v37;
  uint64_t v43 = *(int *)(v37 + 48);
  uint64_t v44 = v128;
  Swift::String v45 = *(void (**)(char *, char *, uint64_t))(v128 + 16);
  v45(v25, v39, v41);
  v25[v43] = v42 & 1;
  uint64_t v46 = v44 + 8;
  long long v47 = *(void (**)(char *, uint64_t))(v44 + 8);
  v47(v25, v41);
  __int16 v48 = word_26FA724C8;
  if ((v42 & 1) == 0) {
    __int16 v48 = 0;
  }
  Swift::Int v49 = v129;
  *((_WORD *)v129 + 16) |= v48;
  v45(v25, v39, v41);
  __C::_NSRange v50 = v137;
  (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v137, v25, v41);
  *(void *)&v144[0] = v135;
  *((void *)&v144[0] + 1) = v140;
  uint64_t v51 = v139;
  aBlock[0] = v139;
  int v52 = v130 & 1;
  uint64_t v53 = (uint64_t)v131;
  id v54 = (void *)static ResolvableTextSegmentAttribute.buildStaticTextSegment<A>(for:style:environment:includeDefaultAttributes:options:properties:)(v50, (uint64_t)v131, (uint64_t *)v144, v52, aBlock, (uint64_t)v49, v41, (uint64_t)v136);
  unint64_t v55 = v54;
  if (v54)
  {
    uint64_t v122 = (void (*)(char *, char *))v47;
    uint64_t v128 = v46;
    int64_t v130 = v39;
    uint64_t v56 = v53;
    id v57 = objc_msgSend(v54, sel_string);
    uint64_t v58 = v51;
    uint64_t v59 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v61 = v60;

    uint64_t v62 = swift_allocObject();
    *(void *)(v62 + 16) = v59;
    *(void *)(v62 + 24) = v61;
    uint64_t v63 = v135;
    uint64_t v64 = v140;
    *(void *)&v144[0] = v135;
    *((void *)&v144[0] + 1) = v140;
    aBlock[0] = v58;
    swift_bridgeObjectRetain();
    uint64_t v65 = Text.Style.nsAttributes(content:environment:includeDefaultAttributes:with:properties:)((uint64_t)partial apply for closure #1 in static ResolvableTextSegmentAttribute.buildResolvableTextSegment<A>(for:style:environment:includeDefaultAttributes:options:properties:), v62, (uint64_t *)v144, v52, aBlock, (uint64_t)v49);
    swift_release();
    uint64_t v66 = (int *)v125;
    uint64_t v67 = v134;
    _s7SwiftUI30ResolvableTextSegmentAttributeO5ValueVWOcTm_0(v56, (uint64_t)v134 + *(int *)(v125 + 20), type metadata accessor for Text.Style);
    uint64_t *v67 = v59;
    v67[1] = v61;
    uint64_t v68 = (SEL ***)((char *)v67 + v66[6]);
    *uint64_t v68 = v63;
    v68[1] = (SEL **)v64;
    *(uint64_t *)((char *)v67 + v66[7]) = v139;
    *(uint64_t *)((char *)v67 + v66[8]) = v65;
    uint64_t v69 = (char *)v67 + v66[9];
    long long v70 = *((_OWORD *)v49 + 7);
    *((_OWORD *)v69 + 6) = *((_OWORD *)v49 + 6);
    *((_OWORD *)v69 + 7) = v70;
    *((void *)v69 + 16) = *((void *)v49 + 16);
    long long v71 = *((_OWORD *)v49 + 3);
    *((_OWORD *)v69 + 2) = *((_OWORD *)v49 + 2);
    *((_OWORD *)v69 + 3) = v71;
    long long v72 = *((_OWORD *)v49 + 5);
    *((_OWORD *)v69 + 4) = *((_OWORD *)v49 + 4);
    *((_OWORD *)v69 + 5) = v72;
    long long v73 = *((_OWORD *)v49 + 1);
    *(_OWORD *)uint64_t v69 = *(_OWORD *)v49;
    *((_OWORD *)v69 + 1) = v73;
    uint64_t v74 = (uint64_t)v136;
    uint64_t v75 = v55;
    uint64_t v76 = (void (*)(uint64_t *, uint64_t, uint64_t))v136[8];
    swift_retain();
    uint64_t v139 = v65;
    swift_bridgeObjectRetain();
    swift_retain();
    id v77 = (char *)v138;
    v76(v67, v138, v74);
    long long v78 = *((_OWORD *)v69 + 5);
    long long v79 = *((_OWORD *)v69 + 7);
    long long v149 = *((_OWORD *)v69 + 6);
    long long v150 = v79;
    long long v80 = *((_OWORD *)v69 + 1);
    long long v81 = *((_OWORD *)v69 + 3);
    long long v145 = *((_OWORD *)v69 + 2);
    long long v82 = v145;
    long long v146 = v81;
    long long v83 = *((_OWORD *)v69 + 3);
    long long v84 = *((_OWORD *)v69 + 5);
    long long v147 = *((_OWORD *)v69 + 4);
    long long v85 = v147;
    long long v148 = v84;
    long long v86 = *((_OWORD *)v69 + 1);
    v144[0] = *(_OWORD *)v69;
    long long v87 = v144[0];
    v144[1] = v86;
    long long v88 = *((_OWORD *)v69 + 7);
    *((_OWORD *)v49 + 6) = v149;
    *((_OWORD *)v49 + 7) = v88;
    *((_OWORD *)v49 + 2) = v82;
    *((_OWORD *)v49 + 3) = v83;
    *((_OWORD *)v49 + 4) = v85;
    *((_OWORD *)v49 + 5) = v78;
    uint64_t v151 = *((void *)v69 + 16);
    *((void *)v49 + 16) = *((void *)v69 + 16);
    *(_OWORD *)Swift::Int v49 = v87;
    *((_OWORD *)v49 + 1) = v80;
    outlined retain of Text.ResolvedProperties(v144);
    uint64_t v89 = *(SEL ***)(v74 + 8);
    uint64_t v90 = (void *)static ResolvableStringAttributeRepresentation.attribute.getter();
    long long v136 = v75;
    CGFloat v91 = v75;
    id v92 = objc_msgSend(v91, sel_length);
    Swift::Int v93 = v132;
    UUID.init()();
    *(void *)&v93[*(int *)(v133 + 20)] = v90;
    uint64_t v94 = (SEL *)v91;
    uint64_t v143 = MEMORY[0x263F8EE78];
    uint64_t v95 = (SEL *)swift_allocObject();
    _OWORD v95[2] = (SEL)&v143;
    uint64_t v96 = swift_allocObject();
    *(void *)(v96 + 16) = partial apply for closure #1 in NSAttributedString.runs(in:);
    *(void *)(v96 + 24) = v95;
    aBlock[4] = (uint64_t)thunk for @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()partial apply;
    int64_t v142 = v96;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
    aBlock[3] = (uint64_t)&block_descriptor_46;
    uint64_t v97 = _Block_copy(aBlock);
    int64_t v98 = v142;
    id v99 = v90;
    swift_retain();
    swift_release();
    -[SEL enumerateAttributesInRange:options:usingBlock:](v94, sel_enumerateAttributesInRange_options_usingBlock_, 0, v92, 0, v97);
    _Block_release(v97);
    LOBYTE(v92) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v92 & 1) == 0)
    {
      uint64_t v135 = v89;
      uint64_t v100 = v143;
      swift_release();
      int64_t v98 = *(void *)(v100 + 16);
      if (!v98)
      {

        uint64_t v111 = MEMORY[0x263F8EE78];
LABEL_27:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v112 = (uint64_t)v132;
        *(void *)&v132[*(int *)(v133 + 24)] = v111;
        uint64_t v89 = v124;
        _s7SwiftUI33ResolvableStringResolutionContextVWObTm_1(v112, (uint64_t)v124, type metadata accessor for ResolvableTextSegmentAttribute.Value);
        int v113 = (void *)static ResolvableStringAttributeRepresentation.attribute.getter();
        Swift::Int v49 = v137;
        uint64_t v114 = _bridgeAnythingToObjectiveC<A>(_:)();
        uint64_t v95 = v94;
        uint64_t v94 = (SEL *)&_OBJC_LABEL_PROTOCOL____NSTextAnimatorStateSnapshot;
        id v115 = [(SEL *)v95 length];

        -[SEL addAttribute:value:range:](v95, sel_addAttribute_value_range_, v113, v114, 0, v115);
        swift_unknownObjectRelease();
        int64_t v98 = v127;
        if (one-time initialization token for resolvableTextSegment == -1) {
          goto LABEL_28;
        }
        goto LABEL_33;
      }
      uint64_t v121 = (uint64_t)&v121;
      double v129 = (char *)v99;
      uint64_t v131 = v94;
      aBlock[0] = MEMORY[0x263F8EE78];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v98, 0);
      uint64_t v140 = aBlock[0];
      uint64_t v125 = v100;
      uint64_t v89 = (SEL **)(v100 + 48);
      while (1)
      {
        uint64_t v101 = (uint64_t)*(v89 - 1);
        uint64_t v95 = *v89;
        uint64_t v94 = *(v89 - 2);
        id v77 = (char *)v94 + v101;
        BOOL v102 = __OFADD__(v94, v101);
        uint64_t v103 = swift_bridgeObjectRetain();
        if (v102) {
          break;
        }
        if ((uint64_t)v77 < (uint64_t)v94) {
          goto LABEL_31;
        }
        if (v95[2])
        {
          uint64_t v143 = MEMORY[0x263F8EE88];
          MEMORY[0x270FA5388](v103);
          *(&v121 - 2) = (uint64_t)v95;
          *(&v121 - 1) = (uint64_t)&v143;
          uint64_t v104 = swift_bridgeObjectRetain();
          uint64_t v105 = specialized _NativeDictionary.filter(_:)(v104, (uint64_t (*)(id))partial apply for closure #1 in ResolvableTextSegmentAttribute.Value.Run.init(range:oldAttributes:newAttributes:), (uint64_t)(&v121 - 4));
          swift_bridgeObjectRelease();
          swift_retain();
          specialized Sequence.filter(_:)((uint64_t)v95, v105, &v143);
          Swift::Int v49 = v106;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          Swift::Int v49 = (char *)MEMORY[0x263F8EE78];
          uint64_t v105 = MEMORY[0x263F8EE80];
        }
        uint64_t v107 = v140;
        aBlock[0] = v140;
        unint64_t v109 = *(void *)(v140 + 16);
        unint64_t v108 = *(void *)(v140 + 24);
        if (v109 >= v108 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v108 > 1, v109 + 1, 1);
          uint64_t v107 = aBlock[0];
        }
        *(void *)(v107 + 16) = v109 + 1;
        uint64_t v140 = v107;
        uint64_t v110 = (void *)(v107 + 32 * v109);
        v110[4] = v94;
        v110[5] = v77;
        v110[6] = v105;
        v110[7] = v49;
        v89 += 3;
        if (!--v98)
        {

          uint64_t v94 = v131;
          id v77 = (char *)v138;
          uint64_t v111 = v140;
          goto LABEL_27;
        }
      }
      __break(1u);
LABEL_31:
      __break(1u);
    }
    __break(1u);
LABEL_33:
    swift_once();
LABEL_28:
    uint64_t v116 = static NSAttributedStringKey.resolvableTextSegment;
    _s7SwiftUI30ResolvableTextSegmentAttributeO5ValueVWOcTm_0((uint64_t)v89, v123, type metadata accessor for ResolvableTextSegmentAttribute.Value);
    uint64_t v117 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    unint64_t v118 = v95;
    id v119 = [v118 v94[128]];

    -[SEL addAttribute:value:range:](v118, sel_addAttribute_value_range_, v116, v117, 0, v119);
    swift_unknownObjectRelease();
    outlined destroy of ResolvableTextSegmentAttribute.Value((uint64_t)v89, type metadata accessor for ResolvableTextSegmentAttribute.Value);
    outlined destroy of ResolvableTextSegmentAttribute.Value((uint64_t)v134, type metadata accessor for PlatformAttributeResolver);
    v122(v49, v77);
    (*(void (**)(char *, int64_t))(v126 + 8))(v130, v98);
    return (uint64_t)v136;
  }
  v47(v50, v138);
  (*(void (**)(char *, int64_t))(v126 + 8))(v39, v127);
  return (uint64_t)v55;
}

void *static ResolvableTextSegmentAttribute.buildUpdatableTextSegment<A>(for:style:environment:includeDefaultAttributes:options:properties:)(uint64_t a1, uint64_t a2, uint64_t *a3, char a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v80 = type metadata accessor for ResolvableTextSegmentAttribute.Value(0);
  MEMORY[0x270FA5388](v80);
  uint64_t v74 = (uint64_t)v69 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  id v77 = (char *)v69 - v17;
  MEMORY[0x270FA5388](v18);
  uint64_t v75 = (char *)v69 - v19;
  uint64_t v79 = a7;
  uint64_t v20 = *(void (***)(void *, uint64_t))(a7 - 8);
  MEMORY[0x270FA5388](v21);
  long long v78 = (char *)v69 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = *a3;
  uint64_t v24 = a3[1];
  uint64_t v25 = *a5;
  uint64_t v76 = v20;
  if (v24)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v23, &aBlock);
    swift_release_n();
    swift_release_n();
    uint64_t v26 = aBlock;
  }
  else
  {
    _sSnySiGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>, (uint64_t)&type metadata for EnvironmentValues.TextSizeVariantKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSizeVariantKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    BloomFilter.init(hashValue:)(v27);
    uint64_t v28 = aBlock;
    uint64_t v29 = swift_retain_n();
    uint64_t v30 = specialized find1<A>(_:key:filter:)(v29, v28);
    if (v30) {
      uint64_t v26 = *(void *)(v30 + 72);
    }
    else {
      uint64_t v26 = 0;
    }
    swift_release_n();
  }
  v88[0] = v26;
  uint64_t v31 = v78;
  uint64_t v32 = v79;
  char v33 = (*(uint64_t (**)(char *, uint64_t *, uint64_t, uint64_t))(a8 + 72))(v78, v88, v79, a8);
  __int16 v34 = word_26FA724A0;
  if ((v33 & 1) == 0) {
    __int16 v34 = 0;
  }
  *(_WORD *)(a6 + 32) |= v34;
  uint64_t aBlock = v23;
  uint64_t v83 = v24;
  unint64_t v35 = (unint64_t)v31;
  v88[0] = v25;
  uint64_t v36 = (void *)static ResolvableTextSegmentAttribute.buildStaticTextSegment<A>(for:style:environment:includeDefaultAttributes:options:properties:)(v31, a2, &aBlock, a4 & 1, v88, a6, v32, a8);
  if (v36)
  {
    uint64_t v72 = *(void *)(a8 + 8);
    uint64_t v37 = (void *)static ResolvableStringAttributeRepresentation.attribute.getter();
    long long v73 = v36;
    uint64_t v38 = v36;
    id v39 = objc_msgSend(v38, sel_length);
    Swift::String v40 = v77;
    UUID.init()();
    *(void *)&v40[*(int *)(v80 + 20)] = v37;
    v88[0] = MEMORY[0x263F8EE78];
    uint64_t v41 = (void (**)(void *, uint64_t))swift_allocObject();
    v41[2] = (void (*)(void *, uint64_t))v88;
    uint64_t v42 = swift_allocObject();
    *(void *)(v42 + 16) = closure #1 in NSAttributedString.runs(in:)partial apply;
    *(void *)(v42 + 24) = v41;
    long long v86 = thunk for @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()partial apply;
    uint64_t v87 = v42;
    uint64_t aBlock = MEMORY[0x263EF8330];
    uint64_t v83 = 1107296256;
    long long v84 = thunk for @escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
    long long v85 = &block_descriptor_58;
    uint64_t v43 = _Block_copy(&aBlock);
    uint64_t v44 = v37;
    swift_retain();
    swift_release();
    long long v71 = v38;
    objc_msgSend(v38, sel_enumerateAttributesInRange_options_usingBlock_, 0, v39, 0, v43);
    _Block_release(v43);
    LOBYTE(v39) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v39 & 1) == 0)
    {
      uint64_t v45 = v88[0];
      swift_release();
      int64_t v46 = *(void *)(v45 + 16);
      if (!v46)
      {

        uint64_t v58 = v71;
        uint64_t v59 = MEMORY[0x263F8EE78];
        uint64_t v57 = v80;
LABEL_24:
        swift_bridgeObjectRelease();
        uint64_t v60 = (uint64_t)v77;
        *(void *)&v77[*(int *)(v57 + 24)] = v59;
        uint64_t v43 = v75;
        _s7SwiftUI33ResolvableStringResolutionContextVWObTm_1(v60, (uint64_t)v75, type metadata accessor for ResolvableTextSegmentAttribute.Value);
        uint64_t v61 = (void *)static ResolvableStringAttributeRepresentation.attribute.getter();
        uint64_t v62 = _bridgeAnythingToObjectiveC<A>(_:)();
        uint64_t v41 = v58;
        uint64_t v44 = (SEL *)&_OBJC_LABEL_PROTOCOL____NSTextAnimatorStateSnapshot;
        id v63 = objc_msgSend(v41, sel_length);

        objc_msgSend(v41, sel_addAttribute_value_range_, v61, v62, 0, v63);
        swift_unknownObjectRelease();
        uint64_t v38 = v76;
        if (one-time initialization token for resolvableTextSegment == -1) {
          goto LABEL_25;
        }
        goto LABEL_30;
      }
      v69[1] = v69;
      long long v70 = v44;
      uint64_t aBlock = MEMORY[0x263F8EE78];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v46, 0);
      uint64_t v81 = aBlock;
      v69[2] = v45;
      long long v47 = (void (***)(void *, uint64_t))(v45 + 48);
      while (1)
      {
        uint64_t v38 = *(v47 - 1);
        uint64_t v41 = *v47;
        uint64_t v44 = (SEL *)*(v47 - 2);
        swift_bridgeObjectRetain();
        uint64_t v43 = (void *)MEMORY[0x263F8EE78];
        unint64_t v35 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
        unint64_t v48 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)v43);
        uint64_t v32 = (uint64_t)v38 + (void)v44;
        if (__OFADD__(v44, v38)) {
          break;
        }
        if (v32 < (uint64_t)v44) {
          goto LABEL_28;
        }
        uint64_t v49 = v48;
        if (*(void *)(v48 + 16))
        {
          v88[0] = MEMORY[0x263F8EE88];
          MEMORY[0x270FA5388](v48);
          v69[-2] = v49;
          v69[-1] = v88;
          uint64_t v50 = specialized _NativeDictionary.filter(_:)(v35, (uint64_t (*)(id))closure #1 in ResolvableTextSegmentAttribute.Value.Run.init(range:oldAttributes:newAttributes:)partial apply, (uint64_t)&v69[-4]);
          swift_bridgeObjectRelease();
          swift_retain();
          specialized Sequence.filter(_:)(v49, v50, v88);
          uint64_t v52 = v51;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v52 = MEMORY[0x263F8EE78];
          uint64_t v50 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
        }
        swift_bridgeObjectRelease();
        uint64_t v53 = v81;
        uint64_t aBlock = v81;
        unint64_t v55 = *(void *)(v81 + 16);
        unint64_t v54 = *(void *)(v81 + 24);
        if (v55 >= v54 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v54 > 1, v55 + 1, 1);
          uint64_t v53 = aBlock;
        }
        *(void *)(v53 + 16) = v55 + 1;
        uint64_t v81 = v53;
        uint64_t v56 = (void *)(v53 + 32 * v55);
        v56[4] = v44;
        v56[5] = v32;
        v56[6] = v50;
        v56[7] = v52;
        v47 += 3;
        --v46;
        uint64_t v57 = v80;
        if (!v46)
        {

          uint64_t v58 = v71;
          unint64_t v35 = (unint64_t)v78;
          uint64_t v32 = v79;
          uint64_t v59 = v81;
          goto LABEL_24;
        }
      }
      __break(1u);
LABEL_28:
      __break(1u);
    }
    __break(1u);
LABEL_30:
    swift_once();
LABEL_25:
    uint64_t v64 = static NSAttributedStringKey.resolvableTextSegment;
    _s7SwiftUI30ResolvableTextSegmentAttributeO5ValueVWOcTm_0((uint64_t)v43, v74, type metadata accessor for ResolvableTextSegmentAttribute.Value);
    uint64_t v65 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    uint64_t v66 = v41;
    id v67 = [v66 v44[128]];

    objc_msgSend(v66, sel_addAttribute_value_range_, v64, v65, 0, v67);
    swift_unknownObjectRelease();
    outlined destroy of ResolvableTextSegmentAttribute.Value((uint64_t)v43, type metadata accessor for ResolvableTextSegmentAttribute.Value);
    v38[1]((void *)v35, v32);
    return v73;
  }
  v76[1](v31, v32);
  return v36;
}

uint64_t static ResolvableTextSegmentAttribute.buildStaticTextSegment<A>(for:style:environment:includeDefaultAttributes:options:properties:)(void *a1, uint64_t a2, uint64_t *a3, int a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  LODWORD(v66) = a4;
  uint64_t v64 = a2;
  id v69 = a1;
  uint64_t v13 = type metadata accessor for Text.Style(0);
  uint64_t v62 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v63 = v14;
  uint64_t v65 = (uint64_t)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AttributedString.AdaptiveImageGlyph?(0, &lazy cache variable for type metadata for AttributedString?, MEMORY[0x263F06828], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v17 = (char *)&v58 - v16;
  uint64_t v18 = type metadata accessor for AttributedString();
  uint64_t v71 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v61 = (char *)&v58 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  id v67 = (char *)&v58 - v21;
  uint64_t v68 = *(void *)(a7 - 8);
  MEMORY[0x270FA5388](v22);
  long long v70 = (char *)&v58 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = *a3;
  uint64_t v25 = a3[1];
  uint64_t v26 = *a5;
  if (v25)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v24, &aBlock);
    swift_release_n();
    swift_release_n();
    uint64_t v27 = aBlock;
  }
  else
  {
    _sSnySiGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>, (uint64_t)&type metadata for EnvironmentValues.TextSizeVariantKey, (uint64_t)&protocol witness table for EnvironmentValues.TextSizeVariantKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    BloomFilter.init(hashValue:)(v28);
    uint64_t v29 = aBlock;
    uint64_t v30 = swift_retain_n();
    uint64_t v31 = specialized find1<A>(_:key:filter:)(v30, v29);
    if (v31) {
      uint64_t v27 = *(void *)(v31 + 72);
    }
    else {
      uint64_t v27 = 0;
    }
    swift_release_n();
  }
  v78[0] = v27;
  uint64_t v32 = v70;
  char v33 = (*(uint64_t (**)(char *, uint64_t *, uint64_t, uint64_t))(a8 + 72))(v70, v78, a7, a8);
  __int16 v34 = word_26FA72478;
  if ((v33 & 1) == 0) {
    __int16 v34 = 0;
  }
  *(_WORD *)(a6 + 32) |= v34;
  uint64_t aBlock = v24;
  uint64_t v73 = v25;
  v78[0] = v26;
  ResolvableStringAttribute.initialResolution(in:options:properties:)(&aBlock, v78, a6, a7, a8, (uint64_t)v17);
  uint64_t v35 = v71;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v71 + 48))(v17, 1, v18) == 1)
  {
    (*(void (**)(char *, uint64_t))(v68 + 8))(v32, a7);
    outlined destroy of AttributedString?((uint64_t)v17, (uint64_t)&lazy cache variable for type metadata for AttributedString?, MEMORY[0x263F06828], MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for AttributedString.AdaptiveImageGlyph?);
    return 0;
  }
  uint64_t v60 = a7;
  uint64_t v37 = v67;
  (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v67, v17, v18);
  type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableAttributedString);
  uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v35 + 16);
  uint64_t v59 = v18;
  v38(v61, v37, v18);
  uint64_t v61 = (char *)NSAttributedString.init(_:)();
  id v69 = objc_msgSend(v61, sel_length);
  uint64_t v39 = v64;
  uint64_t v64 = v26;
  uint64_t v40 = v65;
  _s7SwiftUI30ResolvableTextSegmentAttributeO5ValueVWOcTm_0(v39, v65, type metadata accessor for Text.Style);
  unint64_t v41 = (*(unsigned __int8 *)(v62 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v62 + 80);
  unint64_t v42 = (v63 + v41 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v43 = (v42 + 39) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v44 = swift_allocObject();
  _s7SwiftUI33ResolvableStringResolutionContextVWObTm_1(v40, v44 + v41, type metadata accessor for Text.Style);
  id v45 = v61;
  *(void *)(v44 + v42) = v61;
  unint64_t v46 = v44 + ((v42 + 15) & 0xFFFFFFFFFFFFFFF8);
  *(void *)unint64_t v46 = v24;
  *(void *)(v46 + 8) = v25;
  *(unsigned char *)(v46 + 16) = v66 & 1;
  *(void *)(v44 + v43) = v64;
  uint64_t v66 = a6;
  *(void *)(v44 + ((v43 + 15) & 0xFFFFFFFFFFFFFFF8)) = a6;
  uint64_t v47 = swift_allocObject();
  *(void *)(v47 + 16) = partial apply for closure #1 in NSMutableAttributedString.convertToPlatformStyled(style:environment:includeDefaultAttributes:options:properties:);
  *(void *)(v47 + 24) = v44;
  uint64_t v76 = _sSDySo21NSAttributedStringKeyaypGSo8_NSRangeVSpy10ObjectiveC8ObjCBoolVGIggyy_AceIIeggyy_TRTA_0;
  uint64_t v77 = v47;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v73 = 1107296256;
  uint64_t v74 = thunk for @escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  uint64_t v75 = &block_descriptor_33_0;
  unint64_t v48 = _Block_copy(&aBlock);
  swift_retain();
  id v36 = v45;
  swift_retain();
  swift_retain();
  swift_release();
  objc_msgSend(v36, sel_enumerateAttributesInRange_options_usingBlock_, 0, v69, 0, v48);
  _Block_release(v48);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) == 0)
  {
    swift_retain();
    swift_retain_n();
    if (v25)
    {
      uint64_t v51 = swift_retain();
      char v52 = specialized PropertyList.Tracker.value<A>(_:for:)(v51);
    }
    else
    {
      uint64_t v53 = swift_retain_n();
      char v52 = specialized closure #1 in PropertyList.subscript.getter(v53);
    }
    swift_release_n();
    swift_release_n();
    uint64_t v54 = v60;
    uint64_t v55 = v59;
    uint64_t v56 = v70;
    if (v52)
    {
      __int16 v57 = *(_WORD *)(v66 + 32);
      if ((v57 & 4) == 0) {
        *(_WORD *)(v66 + 32) = v57 | 4;
      }
    }
    swift_release();
    (*(void (**)(char *, uint64_t))(v71 + 8))(v67, v55);
    (*(void (**)(char *, uint64_t))(v68 + 8))(v56, v54);
    return (uint64_t)v36;
  }
  __break(1u);
  return result;
}

uint64_t ResolvableStringAttribute.initialResolution(in:options:properties:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  void (*v22)(uint64_t *__return_ptr, uint64_t, uint64_t, double);
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  uint64_t v35 = a6;
  type metadata accessor for AttributedString.AdaptiveImageGlyph?(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v32 = (uint64_t)&v31 - v13;
  uint64_t v14 = type metadata accessor for ResolvableStringResolutionContext();
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for AttributeContainer();
  double v18 = MEMORY[0x270FA5388](v17 - 8);
  uint64_t v20 = *a1;
  uint64_t v19 = a1[1];
  uint64_t v21 = *a2;
  uint64_t v22 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, double))(a5 + 56);
  char v33 = a4;
  __int16 v34 = v6;
  v22(&v36, a4, a5, v18);
  *(_WORD *)(a3 + 32) |= v36;
  if ((v21 & 4) != 0)
  {
    id v36 = 12369903;
    MEMORY[0x24C522990](&v36, 3);
    AttributeContainer.init()();
    uint64_t v26 = v35;
    AttributedString.init(_:attributes:)();
    uint64_t v27 = type metadata accessor for AttributedString();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v26, 0, 1, v27);
  }
  else
  {
    uint64_t v23 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v16, 1, 1, v23);
    uint64_t v24 = &v16[*(int *)(v14 + 24)];
    *(void *)uint64_t v24 = 0;
    v24[8] = 1;
    if (v19)
    {
      swift_retain_n();
      swift_retain_n();
      uint64_t v25 = v32;
      specialized PropertyList.Tracker.value<A>(_:for:)(v20, v32);
      swift_release();
    }
    else
    {
      uint64_t v29 = swift_retain_n();
      uint64_t v25 = v32;
      specialized closure #1 in PropertyList.subscript.getter(v29, v32);
      swift_release_n();
    }
    swift_release();
    outlined assign with take of Date?(v25, (uint64_t)v16);
    uint64_t v30 = (uint64_t *)&v16[*(int *)(v14 + 20)];
    *uint64_t v30 = v20;
    v30[1] = v19;
    *(void *)uint64_t v24 = 0;
    v24[8] = 1;
    (*(void (**)(char *, uint64_t, uint64_t))(a5 + 40))(v16, v33, a5);
    return outlined destroy of ResolvableTextSegmentAttribute.Value((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for ResolvableStringResolutionContext);
  }
}

uint64_t PlatformAttributeResolver.platformAttributes(for:includeDefaultValueAttributes:)(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  LODWORD(v79) = a2;
  uint64_t v5 = type metadata accessor for Text.Style(0);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v78 = v7;
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v69 - v9;
  uint64_t v11 = type metadata accessor for AttributeContainer();
  MEMORY[0x270FA5388](v11);
  uint64_t v72 = (char *)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v14 = MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v69 - v15;
  *(void *)&long long v77 = v17;
  double v18 = *(void (**)(char *, uint64_t, double))(v17 + 16);
  uint64_t v73 = v19;
  v18((char *)&v69 - v15, a1, v14);
  uint64_t v89 = Dictionary<>.init(_:)();
  uint64_t v20 = (int *)type metadata accessor for PlatformAttributeResolver(0);
  _s7SwiftUI30ResolvableTextSegmentAttributeO5ValueVWOcTm_0((uint64_t)v3 + v20[5], (uint64_t)v10, type metadata accessor for Text.Style);
  Dictionary<>.transferAttributedStringStyles(to:)((uint64_t)v10);
  uint64_t v22 = *v3;
  uint64_t v21 = v3[1];
  _s7SwiftUI30ResolvableTextSegmentAttributeO5ValueVWOcTm_0((uint64_t)v10, (uint64_t)v7, type metadata accessor for Text.Style);
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = v22;
  *(void *)(v23 + 24) = v21;
  uint64_t v24 = v20[7];
  uint64_t v25 = (void *)((char *)v3 + v20[6]);
  uint64_t v26 = v25[1];
  uint64_t v87 = (void *)*v25;
  uint64_t v88 = v26;
  *(void *)&v85[0] = *(void *)((char *)v3 + v24);
  uint64_t v80 = v20;
  uint64_t v27 = v20[9];
  uint64_t v74 = v3;
  Swift::Int v28 = (char *)v3 + v27;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v29 = (uint64_t)v28;
  uint64_t v30 = (uint64_t)v78;
  uint64_t v31 = Text.Style.nsAttributes(content:environment:includeDefaultAttributes:with:properties:)((uint64_t)partial apply for implicit closure #2 in FormatStyleBox.format(in:idiom:), v23, (uint64_t *)&v87, 1, (uint64_t *)v85, v29);
  swift_release();
  swift_release();
  swift_release();
  outlined destroy of ResolvableTextSegmentAttribute.Value(v30, type metadata accessor for Text.Style);
  uint64_t v32 = v89;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v87 = (void *)v32;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v31, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, (uint64_t)&v87);
  uint64_t v34 = (uint64_t)v87;
  uint64_t v89 = (uint64_t)v87;
  swift_bridgeObjectRelease();
  if (v79)
  {
    outlined destroy of ResolvableTextSegmentAttribute.Value((uint64_t)v10, type metadata accessor for Text.Style);
    return v34;
  }
  uint64_t v35 = *(void *)(v34 + 64);
  long long v70 = v10;
  uint64_t v71 = v34 + 64;
  uint64_t v36 = 1 << *(unsigned char *)(v34 + 32);
  uint64_t v37 = -1;
  if (v36 < 64) {
    uint64_t v37 = ~(-1 << v36);
  }
  unint64_t v38 = v37 & v35;
  long long v78 = (char *)v85 + 8;
  uint64_t v79 = &v88;
  uint64_t v39 = (void (**)(char *, uint64_t))(v77 + 8);
  int64_t v75 = (unint64_t)(v36 + 63) >> 6;
  int64_t v69 = v75 - 1;
  swift_bridgeObjectRetain();
  int64_t v40 = 0;
  uint64_t v76 = MEMORY[0x263F8EE58] + 8;
  long long v77 = xmmword_2461B9DC0;
LABEL_9:
  unint64_t v41 = v74;
  if (v38)
  {
    while (1)
    {
      unint64_t v42 = __clz(__rbit64(v38));
      v38 &= v38 - 1;
      unint64_t v43 = v42 | (v40 << 6);
LABEL_13:
      uint64_t v44 = *(void *)(v34 + 56);
      *(void *)&v85[0] = *(void *)(*(void *)(v34 + 48) + 8 * v43);
      id v45 = *(void **)&v85[0];
      outlined init with copy of Any(v44 + 32 * v43, (uint64_t)v78);
      id v46 = v45;
LABEL_32:
      outlined init with take of (key: NSAttributedStringKey, value: Any)?((uint64_t)v85, (uint64_t)&v87);
      uint64_t v50 = v87;
      if (!v87) {
        break;
      }
      outlined init with take of Any(v79, v85);
      uint64_t v51 = *(void *)((char *)v41 + v80[8]);
      if (*(void *)(v51 + 16))
      {
        id v52 = v50;
        uint64_t v53 = specialized __RawDictionaryStorage.find<A>(_:)(v52);
        if (v54)
        {
          outlined init with copy of Any(*(void *)(v51 + 56) + 32 * v53, (uint64_t)&v82);
        }
        else
        {
          long long v82 = 0u;
          long long v83 = 0u;
        }

        if (*((void *)&v83 + 1))
        {
          outlined init with take of Any(&v82, v84);
          type metadata accessor for _ContiguousArrayStorage<(NSAttributedStringKey, Any)>();
          initeCGFloat d = swift_initStackObject();
          *(_OWORD *)(inited + 16) = v77;
          *(void *)(inited + 32) = v52;
          outlined init with copy of Any((uint64_t)v85, inited + 40);
          id v56 = v52;
          specialized Dictionary.init(dictionaryLiteral:)(inited);
          AttributeContainer.init(_:)();
          uint64_t v57 = swift_initStackObject();
          *(_OWORD *)(v57 + 16) = v77;
          *(void *)(v57 + 32) = v56;
          outlined init with copy of Any((uint64_t)v84, v57 + 40);
          id v58 = v56;
          specialized Dictionary.init(dictionaryLiteral:)(v57);
          uint64_t v59 = v72;
          AttributeContainer.init(_:)();
          LOBYTE(v57) = static AttributeContainer.== infix(_:_:)();
          uint64_t v60 = *v39;
          uint64_t v61 = v59;
          uint64_t v62 = v73;
          (*v39)(v61, v73);
          v60(v16, v62);
          if (v57)
          {
            uint64_t v63 = v89;
            id v58 = v58;
            swift_bridgeObjectRetain();
            uint64_t v64 = specialized __RawDictionaryStorage.find<A>(_:)(v58);
            char v66 = v65;
            swift_bridgeObjectRelease();
            if (v66)
            {
              char v67 = swift_isUniquelyReferenced_nonNull_native();
              uint64_t v81 = v63;
              if ((v67 & 1) == 0)
              {
                specialized _NativeDictionary.copy()();
                uint64_t v63 = v81;
              }

              outlined init with take of Any((_OWORD *)(*(void *)(v63 + 56) + 32 * v64), &v82);
              specialized _NativeDictionary._delete(at:)(v64, v63);
              uint64_t v89 = v63;
              swift_bridgeObjectRelease();
            }
            else
            {
              long long v82 = 0u;
              long long v83 = 0u;
            }

            _s10Foundation6LocaleV8LanguageV_7SwiftUI011TypesettingC0V5FlagsVtWOhTm_0((uint64_t)&v82, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0], (uint64_t (*)(void))_sypSgMaTm_4);
          }

          __swift_destroy_boxed_opaque_existential_1((uint64_t)v84);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v85);
          goto LABEL_9;
        }
      }
      else
      {
        long long v82 = 0u;
        long long v83 = 0u;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v85);

      _s10Foundation6LocaleV8LanguageV_7SwiftUI011TypesettingC0V5FlagsVtWOhTm_0((uint64_t)&v82, (uint64_t)&lazy cache variable for type metadata for Any?, v76, MEMORY[0x263F8D8F0], (uint64_t (*)(void))_sypSgMaTm_4);
      if (!v38) {
        goto LABEL_14;
      }
    }
    swift_release();
    outlined destroy of ResolvableTextSegmentAttribute.Value((uint64_t)v70, type metadata accessor for Text.Style);
    return v89;
  }
LABEL_14:
  int64_t v47 = v40 + 1;
  if (!__OFADD__(v40, 1))
  {
    if (v47 < v75)
    {
      unint64_t v48 = *(void *)(v71 + 8 * v47);
      if (v48)
      {
LABEL_17:
        unint64_t v38 = (v48 - 1) & v48;
        unint64_t v43 = __clz(__rbit64(v48)) + (v47 << 6);
        int64_t v40 = v47;
        goto LABEL_13;
      }
      int64_t v49 = v40 + 2;
      ++v40;
      if (v47 + 1 < v75)
      {
        unint64_t v48 = *(void *)(v71 + 8 * v49);
        if (v48)
        {
LABEL_20:
          int64_t v47 = v49;
          goto LABEL_17;
        }
        int64_t v40 = v47 + 1;
        if (v47 + 2 < v75)
        {
          unint64_t v48 = *(void *)(v71 + 8 * (v47 + 2));
          if (v48)
          {
            v47 += 2;
            goto LABEL_17;
          }
          int64_t v49 = v47 + 3;
          int64_t v40 = v47 + 2;
          if (v47 + 3 < v75)
          {
            unint64_t v48 = *(void *)(v71 + 8 * v49);
            if (v48) {
              goto LABEL_20;
            }
            while (1)
            {
              int64_t v47 = v49 + 1;
              if (__OFADD__(v49, 1)) {
                goto LABEL_47;
              }
              if (v47 >= v75) {
                break;
              }
              unint64_t v48 = *(void *)(v71 + 8 * v47);
              ++v49;
              if (v48) {
                goto LABEL_17;
              }
            }
            int64_t v40 = v69;
          }
        }
      }
    }
    unint64_t v38 = 0;
    uint64_t v86 = 0;
    memset(v85, 0, sizeof(v85));
    goto LABEL_32;
  }
  __break(1u);
LABEL_47:
  __break(1u);
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t _s10Foundation6LocaleV8LanguageV_7SwiftUI011TypesettingC0V5FlagsVtWOhTm_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = a5(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t sub_245DF0D48()
{
  return swift_deallocObject();
}

uint64_t sub_245DF0D80()
{
  return swift_deallocObject();
}

uint64_t _s7SwiftUI30ResolvableTextSegmentAttributeO5ValueVWOcTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_245DF0DF8()
{
  uint64_t v1 = *(void *)(type metadata accessor for ResolvableStringResolutionContext() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);

  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v4 + 48))(v0 + v2, 1, v3)) {
    (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v0 + v2, v3);
  }
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_245DF0F44()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type ResolvableTextSegmentAttribute.Value.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute.Value.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute.Value.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute.Value.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute.Value.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute.Value.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute.Value.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute.Value.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute.Value.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute.Value.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute.Value.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute.Value.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute.Value.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.CodingKeys);
  }
  return result;
}

void type metadata accessor for CodableRawRepresentable<NSAttributedStringKey>()
{
  if (!lazy cache variable for type metadata for CodableRawRepresentable<NSAttributedStringKey>)
  {
    type metadata accessor for NSAttributedStringKey(255);
    _s10Foundation4UUIDVACSEAAWlTm_0(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
    unint64_t v0 = type metadata accessor for CodableRawRepresentable();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CodableRawRepresentable<NSAttributedStringKey>);
    }
  }
}

uint64_t _s10Foundation4UUIDVACSEAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ResolvableTextSegmentAttribute.Value.Run and conformance ResolvableTextSegmentAttribute.Value.Run()
{
  unint64_t result = lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute.Value.Run and conformance ResolvableTextSegmentAttribute.Value.Run;
  if (!lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute.Value.Run and conformance ResolvableTextSegmentAttribute.Value.Run)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute.Value.Run and conformance ResolvableTextSegmentAttribute.Value.Run);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute.Value.Run and conformance ResolvableTextSegmentAttribute.Value.Run;
  if (!lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute.Value.Run and conformance ResolvableTextSegmentAttribute.Value.Run)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute.Value.Run and conformance ResolvableTextSegmentAttribute.Value.Run);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [ResolvableTextSegmentAttribute.Value.Run] and conformance <A> [A](unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    _sypSgMaTm_4(255, &lazy cache variable for type metadata for [ResolvableTextSegmentAttribute.Value.Run], (uint64_t)&type metadata for ResolvableTextSegmentAttribute.Value.Run, MEMORY[0x263F8D488]);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in ResolvableTextSegmentAttribute.Value()
{
  return _s10Foundation4UUIDVACSEAAWlTm_0(&lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute.Value and conformance ResolvableTextSegmentAttribute.Value, (void (*)(uint64_t))type metadata accessor for ResolvableTextSegmentAttribute.Value);
}

unint64_t lazy protocol witness table accessor for type ResolvableTextSegmentAttribute and conformance ResolvableTextSegmentAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute and conformance ResolvableTextSegmentAttribute;
  if (!lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute and conformance ResolvableTextSegmentAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute and conformance ResolvableTextSegmentAttribute);
  }
  return result;
}

uint64_t associated type witness table accessor for AttributedStringKey.Value : Hashable in ResolvableTextSegmentAttribute()
{
  return _s10Foundation4UUIDVACSEAAWlTm_0(&lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute.Value and conformance ResolvableTextSegmentAttribute.Value, (void (*)(uint64_t))type metadata accessor for ResolvableTextSegmentAttribute.Value);
}

ValueMetadata *type metadata accessor for ResolvableTextSegmentAttribute()
{
  return &type metadata for ResolvableTextSegmentAttribute;
}

uint64_t *initializeBufferWithCopyOfBuffer for ResolvableTextSegmentAttribute.Value(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = *(void **)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = (uint64_t)v10;
    *(uint64_t *)((char *)a1 + v9) = *(uint64_t *)((char *)a2 + v9);
    id v11 = v10;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for ResolvableTextSegmentAttribute.Value(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ResolvableTextSegmentAttribute.Value(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = *(void **)(a2 + v7);
  *(void *)(a1 + v7) = v9;
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  id v10 = v9;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ResolvableTextSegmentAttribute.Value(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void **)(a2 + v7);
  uint64_t v9 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = v8;
  id v10 = v8;

  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for ResolvableTextSegmentAttribute.Value(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  return a1;
}

uint64_t assignWithTake for ResolvableTextSegmentAttribute.Value(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);

  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_245DF1680(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_245DF1740(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PlatformAttributeResolver(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v4 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    uint64_t v16 = v15 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = a3[5];
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    unint64_t v9 = *(uint64_t *)((char *)a2 + v6);
    swift_bridgeObjectRetain();
    if (v9 >= 2) {
      swift_retain();
    }
    uint64_t v10 = *((void *)v8 + 1);
    unint64_t v11 = *((void *)v8 + 2);
    *(void *)uint64_t v7 = v9;
    *((void *)v7 + 1) = v10;
    swift_bridgeObjectRetain();
    outlined copy of Text.Style.TextStyleColor(v11);
    uint64_t v12 = *((void *)v8 + 4);
    *((void *)v7 + 3) = *((void *)v8 + 3);
    *((void *)v7 + 4) = v12;
    v7[40] = v8[40];
    *((void *)v7 + 6) = *((void *)v8 + 6);
    v7[56] = v8[56];
    *((void *)v7 + 8) = *((void *)v8 + 8);
    v7[72] = v8[72];
    uint64_t v13 = v8 + 80;
    uint64_t v14 = *((void *)v8 + 11);
    *((void *)v7 + 2) = v11;
    swift_retain();
    if ((unint64_t)(v14 - 1) >= 2)
    {
      *((void *)v7 + 10) = *v13;
      *((void *)v7 + 11) = v14;
      swift_retain();
    }
    else
    {
      *((_OWORD *)v7 + 5) = *(_OWORD *)v13;
    }
    uint64_t v17 = v8 + 96;
    uint64_t v18 = *((void *)v8 + 13);
    if ((unint64_t)(v18 - 1) >= 2)
    {
      *((void *)v7 + 12) = *v17;
      *((void *)v7 + 13) = v18;
      swift_retain();
    }
    else
    {
      *((_OWORD *)v7 + 6) = *(_OWORD *)v17;
    }
    uint64_t v19 = v7 + 112;
    uint64_t v20 = v8 + 112;
    uint64_t v21 = *((void *)v8 + 22);
    if (v21 == 1)
    {
      long long v22 = *((_OWORD *)v8 + 12);
      *((_OWORD *)v7 + 11) = *((_OWORD *)v8 + 11);
      *((_OWORD *)v7 + 12) = v22;
      v7[208] = v8[208];
      long long v23 = *((_OWORD *)v8 + 8);
      *uint64_t v19 = *v20;
      *((_OWORD *)v7 + 8) = v23;
      long long v24 = *((_OWORD *)v8 + 10);
      *((_OWORD *)v7 + 9) = *((_OWORD *)v8 + 9);
      *((_OWORD *)v7 + 10) = v24;
    }
    else
    {
      *(void *)uint64_t v19 = *(void *)v20;
      v7[120] = v8[120];
      *((void *)v7 + 16) = *((void *)v8 + 16);
      v7[136] = v8[136];
      *((void *)v7 + 18) = *((void *)v8 + 18);
      v7[152] = v8[152];
      v7[168] = v8[168];
      *((void *)v7 + 20) = *((void *)v8 + 20);
      v7[192] = v8[192];
      uint64_t v25 = *((void *)v8 + 23);
      *((void *)v7 + 22) = v21;
      *((void *)v7 + 23) = v25;
      v7[208] = v8[208];
      *((void *)v7 + 25) = *((void *)v8 + 25);
      swift_retain();
    }
    uint64_t v26 = *((void *)v8 + 31);
    if (v26 == 1)
    {
      long long v27 = *(_OWORD *)(v8 + 232);
      *(_OWORD *)(v7 + 216) = *(_OWORD *)(v8 + 216);
      *(_OWORD *)(v7 + 232) = v27;
      *((void *)v7 + 31) = *((void *)v8 + 31);
    }
    else
    {
      *((_WORD *)v7 + 108) = *((_WORD *)v8 + 108);
      *((void *)v7 + 28) = *((void *)v8 + 28);
      *((_WORD *)v7 + 116) = *((_WORD *)v8 + 116);
      *((void *)v7 + 30) = *((void *)v8 + 30);
      *((void *)v7 + 31) = v26;
      swift_bridgeObjectRetain();
    }
    uint64_t v28 = *((void *)v8 + 36);
    long long v83 = a1;
    if (v28 == 1)
    {
      long long v29 = *((_OWORD *)v8 + 17);
      *((_OWORD *)v7 + 16) = *((_OWORD *)v8 + 16);
      *((_OWORD *)v7 + 17) = v29;
      *((void *)v7 + 36) = *((void *)v8 + 36);
    }
    else
    {
      v7[256] = v8[256];
      *(_WORD *)(v7 + 257) = *(_WORD *)(v8 + 257);
      if (v28)
      {
        uint64_t v30 = *((void *)v8 + 33);
        uint64_t v31 = *((void *)v8 + 34);
        char v32 = v8[280];
        outlined copy of Text.Storage(v30, v31, v32);
        *((void *)v7 + 33) = v30;
        *((void *)v7 + 34) = v31;
        v7[280] = v32;
        *((void *)v7 + 36) = *((void *)v8 + 36);
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v33 = *(_OWORD *)(v8 + 280);
        *(_OWORD *)(v7 + 264) = *(_OWORD *)(v8 + 264);
        *(_OWORD *)(v7 + 280) = v33;
      }
    }
    uint64_t v34 = (void *)*((void *)v8 + 37);
    uint64_t v35 = *((void *)v8 + 38);
    *((void *)v7 + 37) = v34;
    *((void *)v7 + 38) = v35;
    *((void *)v7 + 39) = *((void *)v8 + 39);
    *((_WORD *)v7 + 160) = *((_WORD *)v8 + 160);
    uint64_t v36 = type metadata accessor for Text.Style(0);
    uint64_t v37 = *(int *)(v36 + 84);
    __dst = &v7[v37];
    long long v77 = (int *)v36;
    unint64_t v38 = &v8[v37];
    _s10Foundation6LocaleV8LanguageV_7SwiftUI011TypesettingC0V5FlagsVtMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags), MEMORY[0x263F07648]);
    uint64_t v40 = v39;
    uint64_t v41 = *(void *)(v39 - 8);
    unint64_t v42 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48);
    id v43 = v34;
    swift_retain();
    swift_retain();
    if (v42(v38, 2, v40))
    {
      uint64_t v44 = type metadata accessor for TypesettingLanguage.Storage(0);
      id v45 = __dst;
      memcpy(__dst, v38, *(void *)(*(void *)(v44 - 8) + 64));
    }
    else
    {
      uint64_t v46 = type metadata accessor for Locale.Language();
      id v45 = __dst;
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v46 - 8) + 16))(__dst, v38, v46);
      __dst[*(int *)(v40 + 48)] = v38[*(int *)(v40 + 48)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(__dst, 0, 2, v40);
    }
    uint64_t v47 = *(int *)(type metadata accessor for TypesettingConfiguration() + 20);
    unint64_t v48 = &v45[v47];
    int64_t v49 = &v38[v47];
    *(void *)unint64_t v48 = *(void *)v49;
    v48[8] = v49[8];
    *(void *)&v7[v77[22]] = *(void *)&v8[v77[22]];
    uint64_t v50 = v77[23];
    uint64_t v51 = &v7[v50];
    id v52 = &v8[v50];
    uint64_t v53 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
    uint64_t v54 = *(void *)(v53 - 8);
    uint64_t v55 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48);
    swift_bridgeObjectRetain();
    if (v55(v52, 1, v53))
    {
      type metadata accessor for AttributedString.AdaptiveImageGlyph?(0, &lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, MEMORY[0x263F03950], MEMORY[0x263F8D8F0]);
      memcpy(v51, v52, *(void *)(*(void *)(v56 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v54 + 16))(v51, v52, v53);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
    }
    *(void *)&v7[v77[24]] = *(void *)&v8[v77[24]];
    uint64_t v57 = a3[6];
    uint64_t v58 = a3[7];
    uint64_t v59 = (uint64_t *)((char *)v83 + v57);
    uint64_t v60 = (uint64_t *)((char *)a2 + v57);
    uint64_t v61 = v60[1];
    void *v59 = *v60;
    v59[1] = v61;
    *(uint64_t *)((char *)v83 + v58) = *(uint64_t *)((char *)a2 + v58);
    uint64_t v62 = a3[9];
    *(uint64_t *)((char *)v83 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    uint64_t v63 = (char *)v83 + v62;
    uint64_t v64 = (uint64_t *)((char *)a2 + v62);
    long long v65 = *(_OWORD *)((char *)a2 + v62 + 16);
    *(_OWORD *)uint64_t v63 = *(_OWORD *)((char *)a2 + v62);
    *((_OWORD *)v63 + 1) = v65;
    *((_WORD *)v63 + 16) = *(_WORD *)((char *)a2 + v62 + 32);
    uint64_t v66 = *(uint64_t *)((char *)a2 + v62 + 48);
    *((void *)v63 + 5) = *(uint64_t *)((char *)a2 + v62 + 40);
    *((void *)v63 + 6) = v66;
    uint64_t v67 = *(uint64_t *)((char *)a2 + v62 + 64);
    uint64_t v68 = *(uint64_t *)((char *)a2 + v62 + 72);
    uint64_t v69 = *(uint64_t *)((char *)a2 + v62 + 80);
    uint64_t v78 = *(uint64_t *)((char *)a2 + v62 + 88);
    uint64_t v80 = *(void **)((char *)a2 + v62 + 56);
    __dstCGFloat a = *(void **)((char *)a2 + v62 + 96);
    uint64_t v82 = *(uint64_t *)((char *)a2 + v62 + 104);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of ResolvedTextSuffix(v80, v67, v68, v69, v78, (uint64_t)__dsta);
    *((void *)v63 + 7) = v80;
    *((void *)v63 + 8) = v67;
    *((void *)v63 + 9) = v68;
    *((void *)v63 + 10) = v69;
    *((void *)v63 + 11) = v78;
    *((void *)v63 + 12) = __dsta;
    uint64_t v70 = v64[14];
    uint64_t v71 = v64[15];
    *((void *)v63 + 13) = v82;
    *((void *)v63 + 14) = v70;
    uint64_t v72 = (void *)v64[16];
    *((void *)v63 + 15) = v71;
    *((void *)v63 + 16) = v72;
    swift_bridgeObjectRetain();
    id v73 = v72;
    return v83;
  }
  return (uint64_t *)v16;
}

void destroy for PlatformAttributeResolver(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  if (*(void *)v4 >= 2uLL) {
    swift_release();
  }
  swift_bridgeObjectRelease();
  outlined consume of Text.Style.TextStyleColor(*(void *)(v4 + 16));
  swift_release();
  if ((unint64_t)(*(void *)(v4 + 88) - 1) >= 2) {
    swift_release();
  }
  if ((unint64_t)(*(void *)(v4 + 104) - 1) >= 2) {
    swift_release();
  }
  if (*(void *)(v4 + 176) != 1) {
    swift_release();
  }
  if (*(void *)(v4 + 248) != 1) {
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v4 + 288) >= 2uLL)
  {
    outlined consume of Text.Storage(*(void *)(v4 + 264), *(void *)(v4 + 272), *(unsigned char *)(v4 + 280));
    swift_bridgeObjectRelease();
  }

  swift_release();
  swift_release();
  uint64_t v5 = type metadata accessor for Text.Style(0);
  uint64_t v6 = v4 + *(int *)(v5 + 84);
  _s10Foundation6LocaleV8LanguageV_7SwiftUI011TypesettingC0V5FlagsVtMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags), MEMORY[0x263F07648]);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 2, v7))
  {
    uint64_t v8 = type metadata accessor for Locale.Language();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v6, v8);
  }
  swift_bridgeObjectRelease();
  uint64_t v9 = v4 + *(int *)(v5 + 92);
  uint64_t v10 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
  uint64_t v11 = *(void *)(v10 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10)) {
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v12 = a1 + *(int *)(a2 + 36);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of ResolvedTextSuffix(*(void **)(v12 + 56), *(void *)(v12 + 64), *(void *)(v12 + 72), *(void *)(v12 + 80), *(void *)(v12 + 88), *(void *)(v12 + 96));
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void **)(v12 + 128);
}

void *initializeWithCopy for PlatformAttributeResolver(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a3[5];
  uint64_t v80 = a1;
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  unint64_t v8 = *(void *)((char *)a2 + v5);
  swift_bridgeObjectRetain();
  if (v8 >= 2) {
    swift_retain();
  }
  uint64_t v9 = *((void *)v7 + 1);
  unint64_t v10 = *((void *)v7 + 2);
  *(void *)uint64_t v6 = v8;
  *((void *)v6 + 1) = v9;
  swift_bridgeObjectRetain();
  outlined copy of Text.Style.TextStyleColor(v10);
  uint64_t v11 = *((void *)v7 + 4);
  *((void *)v6 + 3) = *((void *)v7 + 3);
  *((void *)v6 + 4) = v11;
  v6[40] = v7[40];
  *((void *)v6 + 6) = *((void *)v7 + 6);
  v6[56] = v7[56];
  *((void *)v6 + 8) = *((void *)v7 + 8);
  v6[72] = v7[72];
  uint64_t v12 = v7 + 80;
  uint64_t v13 = *((void *)v7 + 11);
  *((void *)v6 + 2) = v10;
  swift_retain();
  if ((unint64_t)(v13 - 1) >= 2)
  {
    *((void *)v6 + 10) = *v12;
    *((void *)v6 + 11) = v13;
    swift_retain();
  }
  else
  {
    *((_OWORD *)v6 + 5) = *(_OWORD *)v12;
  }
  uint64_t v14 = v7 + 96;
  uint64_t v15 = *((void *)v7 + 13);
  if ((unint64_t)(v15 - 1) >= 2)
  {
    *((void *)v6 + 12) = *v14;
    *((void *)v6 + 13) = v15;
    swift_retain();
  }
  else
  {
    *((_OWORD *)v6 + 6) = *(_OWORD *)v14;
  }
  uint64_t v16 = v6 + 112;
  uint64_t v17 = v7 + 112;
  uint64_t v18 = *((void *)v7 + 22);
  if (v18 == 1)
  {
    long long v19 = *((_OWORD *)v7 + 12);
    *((_OWORD *)v6 + 11) = *((_OWORD *)v7 + 11);
    *((_OWORD *)v6 + 12) = v19;
    v6[208] = v7[208];
    long long v20 = *((_OWORD *)v7 + 8);
    *uint64_t v16 = *v17;
    *((_OWORD *)v6 + 8) = v20;
    long long v21 = *((_OWORD *)v7 + 10);
    *((_OWORD *)v6 + 9) = *((_OWORD *)v7 + 9);
    *((_OWORD *)v6 + 10) = v21;
  }
  else
  {
    *(void *)uint64_t v16 = *(void *)v17;
    v6[120] = v7[120];
    *((void *)v6 + 16) = *((void *)v7 + 16);
    v6[136] = v7[136];
    *((void *)v6 + 18) = *((void *)v7 + 18);
    v6[152] = v7[152];
    v6[168] = v7[168];
    *((void *)v6 + 20) = *((void *)v7 + 20);
    v6[192] = v7[192];
    uint64_t v22 = *((void *)v7 + 23);
    *((void *)v6 + 22) = v18;
    *((void *)v6 + 23) = v22;
    v6[208] = v7[208];
    *((void *)v6 + 25) = *((void *)v7 + 25);
    swift_retain();
  }
  uint64_t v23 = *((void *)v7 + 31);
  if (v23 == 1)
  {
    long long v24 = *(_OWORD *)(v7 + 232);
    *(_OWORD *)(v6 + 216) = *(_OWORD *)(v7 + 216);
    *(_OWORD *)(v6 + 232) = v24;
    *((void *)v6 + 31) = *((void *)v7 + 31);
  }
  else
  {
    *((_WORD *)v6 + 108) = *((_WORD *)v7 + 108);
    *((void *)v6 + 28) = *((void *)v7 + 28);
    *((_WORD *)v6 + 116) = *((_WORD *)v7 + 116);
    *((void *)v6 + 30) = *((void *)v7 + 30);
    *((void *)v6 + 31) = v23;
    swift_bridgeObjectRetain();
  }
  uint64_t v25 = *((void *)v7 + 36);
  if (v25 == 1)
  {
    long long v26 = *((_OWORD *)v7 + 17);
    *((_OWORD *)v6 + 16) = *((_OWORD *)v7 + 16);
    *((_OWORD *)v6 + 17) = v26;
    *((void *)v6 + 36) = *((void *)v7 + 36);
  }
  else
  {
    v6[256] = v7[256];
    *(_WORD *)(v6 + 257) = *(_WORD *)(v7 + 257);
    if (v25)
    {
      uint64_t v27 = *((void *)v7 + 33);
      uint64_t v28 = *((void *)v7 + 34);
      char v29 = v7[280];
      outlined copy of Text.Storage(v27, v28, v29);
      *((void *)v6 + 33) = v27;
      *((void *)v6 + 34) = v28;
      v6[280] = v29;
      *((void *)v6 + 36) = *((void *)v7 + 36);
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v30 = *(_OWORD *)(v7 + 280);
      *(_OWORD *)(v6 + 264) = *(_OWORD *)(v7 + 264);
      *(_OWORD *)(v6 + 280) = v30;
    }
  }
  uint64_t v31 = (void *)*((void *)v7 + 37);
  uint64_t v32 = *((void *)v7 + 38);
  *((void *)v6 + 37) = v31;
  *((void *)v6 + 38) = v32;
  *((void *)v6 + 39) = *((void *)v7 + 39);
  *((_WORD *)v6 + 160) = *((_WORD *)v7 + 160);
  uint64_t v33 = type metadata accessor for Text.Style(0);
  uint64_t v34 = *(int *)(v33 + 84);
  __dst = &v6[v34];
  uint64_t v74 = (int *)v33;
  uint64_t v35 = &v7[v34];
  _s10Foundation6LocaleV8LanguageV_7SwiftUI011TypesettingC0V5FlagsVtMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags), MEMORY[0x263F07648]);
  uint64_t v37 = v36;
  uint64_t v38 = *(void *)(v36 - 8);
  uint64_t v39 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48);
  id v40 = v31;
  swift_retain();
  swift_retain();
  if (v39(v35, 2, v37))
  {
    uint64_t v41 = type metadata accessor for TypesettingLanguage.Storage(0);
    unint64_t v42 = __dst;
    memcpy(__dst, v35, *(void *)(*(void *)(v41 - 8) + 64));
  }
  else
  {
    uint64_t v43 = type metadata accessor for Locale.Language();
    unint64_t v42 = __dst;
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 16))(__dst, v35, v43);
    __dst[*(int *)(v37 + 48)] = v35[*(int *)(v37 + 48)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(__dst, 0, 2, v37);
  }
  uint64_t v44 = *(int *)(type metadata accessor for TypesettingConfiguration() + 20);
  id v45 = &v42[v44];
  uint64_t v46 = &v35[v44];
  *(void *)id v45 = *(void *)v46;
  v45[8] = v46[8];
  *(void *)&v6[v74[22]] = *(void *)&v7[v74[22]];
  uint64_t v47 = v74[23];
  unint64_t v48 = &v6[v47];
  int64_t v49 = &v7[v47];
  uint64_t v50 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
  uint64_t v51 = *(void *)(v50 - 8);
  id v52 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48);
  swift_bridgeObjectRetain();
  if (v52(v49, 1, v50))
  {
    type metadata accessor for AttributedString.AdaptiveImageGlyph?(0, &lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, MEMORY[0x263F03950], MEMORY[0x263F8D8F0]);
    memcpy(v48, v49, *(void *)(*(void *)(v53 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v48, v49, v50);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v51 + 56))(v48, 0, 1, v50);
  }
  *(void *)&v6[v74[24]] = *(void *)&v7[v74[24]];
  uint64_t v54 = a3[6];
  uint64_t v55 = a3[7];
  uint64_t v56 = (void *)((char *)v80 + v54);
  uint64_t v57 = (void *)((char *)a2 + v54);
  uint64_t v58 = v57[1];
  *uint64_t v56 = *v57;
  v56[1] = v58;
  *(void *)((char *)v80 + v55) = *(void *)((char *)a2 + v55);
  uint64_t v59 = a3[9];
  *(void *)((char *)v80 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  uint64_t v60 = (char *)v80 + v59;
  uint64_t v61 = (void *)((char *)a2 + v59);
  long long v62 = *(_OWORD *)((char *)a2 + v59 + 16);
  *(_OWORD *)uint64_t v60 = *(_OWORD *)((char *)a2 + v59);
  *((_OWORD *)v60 + 1) = v62;
  *((_WORD *)v60 + 16) = *(_WORD *)((char *)a2 + v59 + 32);
  uint64_t v63 = *(void *)((char *)a2 + v59 + 48);
  *((void *)v60 + 5) = *(void *)((char *)a2 + v59 + 40);
  *((void *)v60 + 6) = v63;
  uint64_t v64 = *(void *)((char *)a2 + v59 + 72);
  uint64_t v75 = *(void *)((char *)a2 + v59 + 64);
  long long v77 = *(void **)((char *)a2 + v59 + 56);
  uint64_t v65 = *(void *)((char *)a2 + v59 + 80);
  uint64_t v71 = *(void *)((char *)a2 + v59 + 96);
  __dstCGFloat a = *(void **)((char *)a2 + v59 + 88);
  uint64_t v79 = *(void *)((char *)a2 + v59 + 104);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of ResolvedTextSuffix(v77, v75, v64, v65, (uint64_t)__dsta, v71);
  *((void *)v60 + 7) = v77;
  *((void *)v60 + 8) = v75;
  *((void *)v60 + 9) = v64;
  *((void *)v60 + 10) = v65;
  *((void *)v60 + 11) = __dsta;
  *((void *)v60 + 12) = v71;
  uint64_t v66 = v61[14];
  uint64_t v67 = v61[15];
  *((void *)v60 + 13) = v79;
  *((void *)v60 + 14) = v66;
  uint64_t v68 = (void *)v61[16];
  *((void *)v60 + 15) = v67;
  *((void *)v60 + 16) = v68;
  swift_bridgeObjectRetain();
  id v69 = v68;
  return v80;
}

void *assignWithCopy for PlatformAttributeResolver(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v125 = a2;
  uint64_t v126 = a1;
  uint64_t v7 = (char *)a1 + v6;
  unint64_t v8 = (char *)a2 + v6;
  unint64_t v9 = *(void *)((char *)a2 + v6);
  uint64_t v124 = a3;
  if (*(void *)((char *)a1 + v6) >= 2uLL)
  {
    if (v9 >= 2)
    {
      *(void *)uint64_t v7 = v9;
      swift_retain();
      swift_release();
    }
    else
    {
      outlined destroy of Font((uint64_t)a1 + v6);
      *(void *)uint64_t v7 = *(void *)v8;
    }
  }
  else
  {
    *(void *)uint64_t v7 = v9;
    if (v9 >= 2) {
      swift_retain();
    }
  }
  *((void *)v7 + 1) = *((void *)v8 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v10 = *((void *)v8 + 2);
  outlined copy of Text.Style.TextStyleColor(v10);
  unint64_t v11 = *((void *)v7 + 2);
  *((void *)v7 + 2) = v10;
  outlined consume of Text.Style.TextStyleColor(v11);
  *((void *)v7 + 3) = *((void *)v8 + 3);
  swift_retain();
  swift_release();
  uint64_t v12 = *((void *)v8 + 4);
  v7[40] = v8[40];
  *((void *)v7 + 4) = v12;
  uint64_t v13 = *((void *)v8 + 6);
  v7[56] = v8[56];
  *((void *)v7 + 6) = v13;
  uint64_t v14 = *((void *)v8 + 8);
  v7[72] = v8[72];
  *((void *)v7 + 8) = v14;
  unint64_t v15 = *((void *)v8 + 11) - 1;
  if ((unint64_t)(*((void *)v7 + 11) - 1) < 2)
  {
    if (v15 >= 2)
    {
      *((void *)v7 + 10) = *((void *)v8 + 10);
      *((void *)v7 + 11) = *((void *)v8 + 11);
      swift_retain();
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (v15 < 2)
  {
    outlined destroy of Text.LineStyle((uint64_t)(v7 + 80));
LABEL_13:
    *((_OWORD *)v7 + 5) = *((_OWORD *)v8 + 5);
    goto LABEL_15;
  }
  *((void *)v7 + 10) = *((void *)v8 + 10);
  *((void *)v7 + 11) = *((void *)v8 + 11);
  swift_retain();
  swift_release();
LABEL_15:
  unint64_t v16 = *((void *)v8 + 13) - 1;
  if ((unint64_t)(*((void *)v7 + 13) - 1) < 2)
  {
    if (v16 >= 2)
    {
      *((void *)v7 + 12) = *((void *)v8 + 12);
      *((void *)v7 + 13) = *((void *)v8 + 13);
      swift_retain();
      goto LABEL_22;
    }
    goto LABEL_20;
  }
  if (v16 < 2)
  {
    outlined destroy of Text.LineStyle((uint64_t)(v7 + 96));
LABEL_20:
    *((_OWORD *)v7 + 6) = *((_OWORD *)v8 + 6);
    goto LABEL_22;
  }
  *((void *)v7 + 12) = *((void *)v8 + 12);
  *((void *)v7 + 13) = *((void *)v8 + 13);
  swift_retain();
  swift_release();
LABEL_22:
  uint64_t v17 = (long long *)(v7 + 112);
  uint64_t v18 = (long long *)(v8 + 112);
  uint64_t v19 = *((void *)v8 + 22);
  if (*((void *)v7 + 22) == 1)
  {
    if (v19 == 1)
    {
      long long v20 = *v18;
      long long v21 = *((_OWORD *)v8 + 9);
      *((_OWORD *)v7 + 8) = *((_OWORD *)v8 + 8);
      *((_OWORD *)v7 + 9) = v21;
      *uint64_t v17 = v20;
      long long v22 = *((_OWORD *)v8 + 10);
      long long v23 = *((_OWORD *)v8 + 11);
      long long v24 = *((_OWORD *)v8 + 12);
      v7[208] = v8[208];
      *((_OWORD *)v7 + 11) = v23;
      *((_OWORD *)v7 + 12) = v24;
      *((_OWORD *)v7 + 10) = v22;
    }
    else
    {
      uint64_t v30 = *(void *)v18;
      v7[120] = v8[120];
      *(void *)uint64_t v17 = v30;
      uint64_t v31 = *((void *)v8 + 16);
      v7[136] = v8[136];
      *((void *)v7 + 16) = v31;
      uint64_t v32 = *((void *)v8 + 18);
      v7[152] = v8[152];
      *((void *)v7 + 18) = v32;
      uint64_t v33 = *((void *)v8 + 20);
      v7[168] = v8[168];
      *((void *)v7 + 20) = v33;
      *((void *)v7 + 22) = *((void *)v8 + 22);
      uint64_t v34 = *((void *)v8 + 23);
      v7[192] = v8[192];
      *((void *)v7 + 23) = v34;
      uint64_t v35 = *((void *)v8 + 25);
      v7[208] = v8[208];
      *((void *)v7 + 25) = v35;
      swift_retain();
    }
  }
  else if (v19 == 1)
  {
    outlined destroy of Text.Encapsulation((uint64_t)(v7 + 112));
    long long v26 = *((_OWORD *)v8 + 8);
    long long v25 = *((_OWORD *)v8 + 9);
    *uint64_t v17 = *v18;
    *((_OWORD *)v7 + 8) = v26;
    *((_OWORD *)v7 + 9) = v25;
    long long v28 = *((_OWORD *)v8 + 11);
    long long v27 = *((_OWORD *)v8 + 12);
    long long v29 = *((_OWORD *)v8 + 10);
    v7[208] = v8[208];
    *((_OWORD *)v7 + 11) = v28;
    *((_OWORD *)v7 + 12) = v27;
    *((_OWORD *)v7 + 10) = v29;
  }
  else
  {
    uint64_t v36 = *(void *)v18;
    v7[120] = v8[120];
    *(void *)uint64_t v17 = v36;
    uint64_t v37 = *((void *)v8 + 16);
    v7[136] = v8[136];
    *((void *)v7 + 16) = v37;
    uint64_t v38 = *((void *)v8 + 18);
    v7[152] = v8[152];
    *((void *)v7 + 18) = v38;
    uint64_t v39 = *((void *)v8 + 20);
    v7[168] = v8[168];
    *((void *)v7 + 20) = v39;
    *((void *)v7 + 22) = *((void *)v8 + 22);
    swift_retain();
    swift_release();
    uint64_t v40 = *((void *)v8 + 23);
    v7[192] = v8[192];
    *((void *)v7 + 23) = v40;
    uint64_t v41 = *((void *)v8 + 25);
    v7[208] = v8[208];
    *((void *)v7 + 25) = v41;
  }
  unint64_t v42 = (long long *)(v7 + 216);
  uint64_t v43 = (long long *)(v8 + 216);
  uint64_t v44 = *((void *)v8 + 31);
  if (*((void *)v7 + 31) == 1)
  {
    if (v44 == 1)
    {
      long long v45 = *v43;
      long long v46 = *(_OWORD *)(v8 + 232);
      *((void *)v7 + 31) = *((void *)v8 + 31);
      *unint64_t v42 = v45;
      *(_OWORD *)(v7 + 232) = v46;
    }
    else
    {
      v7[216] = v8[216];
      v7[217] = v8[217];
      uint64_t v49 = *((void *)v8 + 28);
      v7[232] = v8[232];
      *((void *)v7 + 28) = v49;
      v7[233] = v8[233];
      *((void *)v7 + 30) = *((void *)v8 + 30);
      *((void *)v7 + 31) = *((void *)v8 + 31);
      swift_bridgeObjectRetain();
    }
  }
  else if (v44 == 1)
  {
    outlined destroy of AccessibilitySpeechAttributes((uint64_t)(v7 + 216));
    uint64_t v47 = *((void *)v8 + 31);
    long long v48 = *(_OWORD *)(v8 + 232);
    *unint64_t v42 = *v43;
    *(_OWORD *)(v7 + 232) = v48;
    *((void *)v7 + 31) = v47;
  }
  else
  {
    v7[216] = v8[216];
    v7[217] = v8[217];
    uint64_t v50 = *((void *)v8 + 28);
    v7[232] = v8[232];
    *((void *)v7 + 28) = v50;
    v7[233] = v8[233];
    *((void *)v7 + 30) = *((void *)v8 + 30);
    *((void *)v7 + 31) = *((void *)v8 + 31);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  uint64_t v51 = (long long *)(v7 + 256);
  id v52 = (long long *)(v8 + 256);
  uint64_t v53 = *((void *)v7 + 36);
  uint64_t v54 = *((void *)v8 + 36);
  if (v53 == 1)
  {
    if (v54 == 1)
    {
      long long v55 = *v52;
      long long v56 = *((_OWORD *)v8 + 17);
      *((void *)v7 + 36) = *((void *)v8 + 36);
LABEL_39:
      *uint64_t v51 = v55;
      v51[1] = v56;
      goto LABEL_50;
    }
    v7[256] = v8[256];
    v7[257] = v8[257];
    v7[258] = v8[258];
    if (!*((void *)v8 + 36))
    {
      long long v59 = *(_OWORD *)(v8 + 280);
      *(_OWORD *)(v7 + 264) = *(_OWORD *)(v8 + 264);
      *(_OWORD *)(v7 + 280) = v59;
      goto LABEL_50;
    }
    goto LABEL_48;
  }
  if (v54 == 1)
  {
    outlined destroy of AccessibilityTextAttributes((uint64_t)(v7 + 256));
    uint64_t v57 = *((void *)v8 + 36);
    long long v58 = *((_OWORD *)v8 + 17);
    *uint64_t v51 = *v52;
    *((_OWORD *)v7 + 17) = v58;
    *((void *)v7 + 36) = v57;
    goto LABEL_50;
  }
  v7[256] = v8[256];
  v7[257] = v8[257];
  v7[258] = v8[258];
  uint64_t v51 = (long long *)(v7 + 264);
  uint64_t v60 = (long long *)(v8 + 264);
  uint64_t v61 = *((void *)v8 + 36);
  if (!v53)
  {
    if (!v61)
    {
      long long v55 = *v60;
      long long v56 = *(_OWORD *)(v8 + 280);
      goto LABEL_39;
    }
LABEL_48:
    uint64_t v68 = *((void *)v8 + 33);
    uint64_t v69 = *((void *)v8 + 34);
    char v70 = v8[280];
    outlined copy of Text.Storage(v68, v69, v70);
    *((void *)v7 + 33) = v68;
    *((void *)v7 + 34) = v69;
    v7[280] = v70;
    *((void *)v7 + 36) = *((void *)v8 + 36);
    swift_bridgeObjectRetain();
    goto LABEL_50;
  }
  if (v61)
  {
    uint64_t v62 = *((void *)v8 + 33);
    uint64_t v63 = *((void *)v8 + 34);
    char v64 = v8[280];
    outlined copy of Text.Storage(v62, v63, v64);
    uint64_t v65 = *((void *)v7 + 33);
    uint64_t v66 = *((void *)v7 + 34);
    char v67 = v7[280];
    *((void *)v7 + 33) = v62;
    *((void *)v7 + 34) = v63;
    v7[280] = v64;
    outlined consume of Text.Storage(v65, v66, v67);
    *((void *)v7 + 36) = *((void *)v8 + 36);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of Text((uint64_t)(v7 + 264));
    long long v71 = *(_OWORD *)(v8 + 280);
    *uint64_t v51 = *v60;
    *(_OWORD *)(v7 + 280) = v71;
  }
LABEL_50:
  uint64_t v72 = (void *)*((void *)v7 + 37);
  id v73 = (void *)*((void *)v8 + 37);
  *((void *)v7 + 37) = v73;
  id v74 = v73;

  *((void *)v7 + 38) = *((void *)v8 + 38);
  swift_retain();
  swift_release();
  *((void *)v7 + 39) = *((void *)v8 + 39);
  swift_retain();
  swift_release();
  v7[320] = v8[320];
  v7[321] = v8[321];
  uint64_t v75 = (int *)type metadata accessor for Text.Style(0);
  uint64_t v76 = v75[21];
  long long v77 = &v7[v76];
  uint64_t v78 = &v8[v76];
  _s10Foundation6LocaleV8LanguageV_7SwiftUI011TypesettingC0V5FlagsVtMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags), MEMORY[0x263F07648]);
  uint64_t v80 = v79;
  uint64_t v81 = *(void *)(v79 - 8);
  uint64_t v82 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v81 + 48);
  int v83 = v82(v77, 2, v79);
  int v84 = v82(v78, 2, v80);
  if (v83)
  {
    if (!v84)
    {
      uint64_t v85 = type metadata accessor for Locale.Language();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v85 - 8) + 16))(v77, v78, v85);
      v77[*(int *)(v80 + 48)] = v78[*(int *)(v80 + 48)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v81 + 56))(v77, 0, 2, v80);
      goto LABEL_56;
    }
    goto LABEL_55;
  }
  if (v84)
  {
    _s10Foundation6LocaleV8LanguageV_7SwiftUI011TypesettingC0V5FlagsVtWOhTm_0((uint64_t)v77, (uint64_t)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags), MEMORY[0x263F07648], (uint64_t)&type metadata for TypesettingLanguage.Flags, (uint64_t (*)(void))_s10Foundation6LocaleV8LanguageV_7SwiftUI011TypesettingC0V5FlagsVtMaTm_0);
LABEL_55:
    uint64_t v86 = type metadata accessor for TypesettingLanguage.Storage(0);
    memcpy(v77, v78, *(void *)(*(void *)(v86 - 8) + 64));
    goto LABEL_56;
  }
  uint64_t v123 = type metadata accessor for Locale.Language();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v123 - 8) + 24))(v77, v78, v123);
  v77[*(int *)(v80 + 48)] = v78[*(int *)(v80 + 48)];
LABEL_56:
  uint64_t v87 = *(int *)(type metadata accessor for TypesettingConfiguration() + 20);
  uint64_t v88 = &v77[v87];
  uint64_t v89 = &v78[v87];
  char v90 = v89[8];
  *(void *)uint64_t v88 = *(void *)v89;
  v88[8] = v90;
  *(void *)&v7[v75[22]] = *(void *)&v8[v75[22]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v91 = v75[23];
  id v92 = &v7[v91];
  Swift::Int v93 = &v8[v91];
  uint64_t v94 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
  uint64_t v95 = *(void *)(v94 - 8);
  uint64_t v96 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v95 + 48);
  int v97 = v96(v92, 1, v94);
  int v98 = v96(v93, 1, v94);
  if (!v97)
  {
    if (!v98)
    {
      (*(void (**)(char *, char *, uint64_t))(v95 + 24))(v92, v93, v94);
      goto LABEL_62;
    }
    (*(void (**)(char *, uint64_t))(v95 + 8))(v92, v94);
    goto LABEL_61;
  }
  if (v98)
  {
LABEL_61:
    type metadata accessor for AttributedString.AdaptiveImageGlyph?(0, &lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, MEMORY[0x263F03950], MEMORY[0x263F8D8F0]);
    memcpy(v92, v93, *(void *)(*(void *)(v99 - 8) + 64));
    goto LABEL_62;
  }
  (*(void (**)(char *, char *, uint64_t))(v95 + 16))(v92, v93, v94);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v95 + 56))(v92, 0, 1, v94);
LABEL_62:
  *(void *)&v7[v75[24]] = *(void *)&v8[v75[24]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v100 = v124[6];
  uint64_t v101 = (char *)v126 + v100;
  BOOL v102 = (char *)v125 + v100;
  *(void *)((char *)v126 + v100) = *(void *)((char *)v125 + v100);
  swift_retain();
  swift_release();
  *((void *)v101 + 1) = *((void *)v102 + 1);
  swift_retain();
  swift_release();
  *(void *)((char *)v126 + v124[7]) = *(void *)((char *)v125 + v124[7]);
  *(void *)((char *)v126 + v124[8]) = *(void *)((char *)v125 + v124[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v103 = v124[9];
  uint64_t v104 = (char *)v126 + v103;
  uint64_t v105 = (void *)((char *)v125 + v103);
  *(void *)uint64_t v104 = *(void *)((char *)v125 + v103);
  *((void *)v104 + 1) = *(void *)((char *)v125 + v103 + 8);
  *((void *)v104 + 2) = *(void *)((char *)v125 + v103 + 16);
  *((void *)v104 + 3) = *(void *)((char *)v125 + v103 + 24);
  *((_WORD *)v104 + 16) = *(_WORD *)((char *)v125 + v103 + 32);
  *((void *)v104 + 5) = *(void *)((char *)v125 + v103 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v104 + 6) = v105[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  long long v106 = (void *)v105[7];
  uint64_t v107 = v105[8];
  uint64_t v108 = v105[9];
  uint64_t v109 = v105[10];
  uint64_t v110 = v105[11];
  uint64_t v111 = v105[12];
  uint64_t v112 = v105[13];
  outlined copy of ResolvedTextSuffix(v106, v107, v108, v109, v110, v111);
  int v113 = (void *)*((void *)v104 + 7);
  uint64_t v114 = *((void *)v104 + 8);
  uint64_t v115 = *((void *)v104 + 9);
  uint64_t v116 = *((void *)v104 + 10);
  uint64_t v117 = *((void *)v104 + 11);
  uint64_t v118 = *((void *)v104 + 12);
  *((void *)v104 + 7) = v106;
  *((void *)v104 + 8) = v107;
  *((void *)v104 + 9) = v108;
  *((void *)v104 + 10) = v109;
  *((void *)v104 + 11) = v110;
  *((void *)v104 + 12) = v111;
  *((void *)v104 + 13) = v112;
  outlined consume of ResolvedTextSuffix(v113, v114, v115, v116, v117, v118);
  *((void *)v104 + 14) = v105[14];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v104 + 15) = v105[15];
  id v119 = (void *)*((void *)v104 + 16);
  uint64_t v120 = (void *)v105[16];
  *((void *)v104 + 16) = v120;
  id v121 = v120;

  return v126;
}

uint64_t outlined destroy of Text.LineStyle(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of Text.Encapsulation(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of AccessibilitySpeechAttributes(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of AccessibilityTextAttributes(uint64_t a1)
{
  return a1;
}

_OWORD *initializeWithTake for PlatformAttributeResolver(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  unint64_t v8 = (char *)a2 + v6;
  long long v9 = *(_OWORD *)((char *)a2 + v6 + 16);
  *(_OWORD *)uint64_t v7 = *(_OWORD *)((char *)a2 + v6);
  *((_OWORD *)v7 + 1) = v9;
  v7[40] = *((unsigned char *)a2 + v6 + 40);
  *((void *)v7 + 4) = *(void *)((char *)a2 + v6 + 32);
  v7[56] = *((unsigned char *)a2 + v6 + 56);
  *((void *)v7 + 6) = *(void *)((char *)a2 + v6 + 48);
  v7[72] = *((unsigned char *)a2 + v6 + 72);
  *((void *)v7 + 8) = *(void *)((char *)a2 + v6 + 64);
  long long v10 = *(_OWORD *)((char *)a2 + v6 + 96);
  *((_OWORD *)v7 + 5) = *(_OWORD *)((char *)a2 + v6 + 80);
  *((_OWORD *)v7 + 6) = v10;
  long long v11 = *(_OWORD *)((char *)a2 + v6 + 192);
  *((_OWORD *)v7 + 11) = *(_OWORD *)((char *)a2 + v6 + 176);
  *((_OWORD *)v7 + 12) = v11;
  v7[208] = *((unsigned char *)a2 + v6 + 208);
  long long v12 = *(_OWORD *)((char *)a2 + v6 + 128);
  *((_OWORD *)v7 + 7) = *(_OWORD *)((char *)a2 + v6 + 112);
  *((_OWORD *)v7 + 8) = v12;
  long long v13 = *(_OWORD *)((char *)a2 + v6 + 160);
  *((_OWORD *)v7 + 9) = *(_OWORD *)((char *)a2 + v6 + 144);
  *((_OWORD *)v7 + 10) = v13;
  long long v14 = *(_OWORD *)((char *)a2 + v6 + 216);
  long long v15 = *(_OWORD *)((char *)a2 + v6 + 232);
  *((void *)v7 + 31) = *(void *)((char *)a2 + v6 + 248);
  *(_OWORD *)(v7 + 232) = v15;
  *(_OWORD *)(v7 + 216) = v14;
  long long v16 = *(_OWORD *)((char *)a2 + v6 + 272);
  *((_OWORD *)v7 + 16) = *(_OWORD *)((char *)a2 + v6 + 256);
  *((_OWORD *)v7 + 17) = v16;
  uint64_t v17 = *(void *)((char *)a2 + v6 + 296);
  *((void *)v7 + 36) = *(void *)((char *)a2 + v6 + 288);
  *((void *)v7 + 37) = v17;
  *((_OWORD *)v7 + 19) = *(_OWORD *)((char *)a2 + v6 + 304);
  *((_WORD *)v7 + 160) = *(_WORD *)((char *)a2 + v6 + 320);
  uint64_t v18 = (int *)type metadata accessor for Text.Style(0);
  uint64_t v19 = v18[21];
  long long v20 = &v7[v19];
  long long v21 = &v8[v19];
  _s10Foundation6LocaleV8LanguageV_7SwiftUI011TypesettingC0V5FlagsVtMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags), MEMORY[0x263F07648]);
  uint64_t v23 = v22;
  uint64_t v24 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v21, 2, v22))
  {
    uint64_t v25 = type metadata accessor for TypesettingLanguage.Storage(0);
    memcpy(v20, v21, *(void *)(*(void *)(v25 - 8) + 64));
  }
  else
  {
    uint64_t v26 = type metadata accessor for Locale.Language();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32))(v20, v21, v26);
    v20[*(int *)(v23 + 48)] = v21[*(int *)(v23 + 48)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v20, 0, 2, v23);
  }
  uint64_t v27 = *(int *)(type metadata accessor for TypesettingConfiguration() + 20);
  long long v28 = &v20[v27];
  long long v29 = &v21[v27];
  *(void *)long long v28 = *(void *)v29;
  v28[8] = v29[8];
  *(void *)&v7[v18[22]] = *(void *)&v8[v18[22]];
  uint64_t v30 = v18[23];
  uint64_t v31 = &v7[v30];
  uint64_t v32 = &v8[v30];
  uint64_t v33 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
  uint64_t v34 = *(void *)(v33 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
  {
    type metadata accessor for AttributedString.AdaptiveImageGlyph?(0, &lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, MEMORY[0x263F03950], MEMORY[0x263F8D8F0]);
    memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v31, v32, v33);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
  }
  *(void *)&v7[v18[24]] = *(void *)&v8[v18[24]];
  uint64_t v36 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(void *)((char *)a1 + v36) = *(void *)((char *)a2 + v36);
  uint64_t v37 = a3[9];
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  uint64_t v38 = (char *)a1 + v37;
  uint64_t v39 = (char *)a2 + v37;
  long long v40 = *((_OWORD *)v39 + 7);
  *((_OWORD *)v38 + 6) = *((_OWORD *)v39 + 6);
  *((_OWORD *)v38 + 7) = v40;
  *((void *)v38 + 16) = *((void *)v39 + 16);
  long long v41 = *((_OWORD *)v39 + 3);
  *((_OWORD *)v38 + 2) = *((_OWORD *)v39 + 2);
  *((_OWORD *)v38 + 3) = v41;
  long long v42 = *((_OWORD *)v39 + 5);
  *((_OWORD *)v38 + 4) = *((_OWORD *)v39 + 4);
  *((_OWORD *)v38 + 5) = v42;
  long long v43 = *((_OWORD *)v39 + 1);
  *(_OWORD *)uint64_t v38 = *(_OWORD *)v39;
  *((_OWORD *)v38 + 1) = v43;
  return a1;
}

void *assignWithTake for PlatformAttributeResolver(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[5];
  uint64_t v8 = (uint64_t)a1 + v7;
  long long v9 = (char *)a2 + v7;
  unint64_t v10 = *(void *)((char *)a1 + v7);
  unint64_t v11 = *(void *)((char *)a2 + v7);
  if (v10 < 2) {
    goto LABEL_4;
  }
  if (v11 < 2)
  {
    outlined destroy of Font(v8);
    unint64_t v11 = *(void *)v9;
LABEL_4:
    *(void *)uint64_t v8 = v11;
    goto LABEL_6;
  }
  *(void *)uint64_t v8 = v11;
  swift_release();
LABEL_6:
  *(void *)(v8 + 8) = *((void *)v9 + 1);
  swift_bridgeObjectRelease();
  unint64_t v12 = *(void *)(v8 + 16);
  *(void *)(v8 + 16) = *((void *)v9 + 2);
  outlined consume of Text.Style.TextStyleColor(v12);
  *(void *)(v8 + 24) = *((void *)v9 + 3);
  swift_release();
  *(void *)(v8 + 32) = *((void *)v9 + 4);
  *(unsigned char *)(v8 + 40) = v9[40];
  *(void *)(v8 + 48) = *((void *)v9 + 6);
  *(unsigned char *)(v8 + 56) = v9[56];
  *(void *)(v8 + 64) = *((void *)v9 + 8);
  *(unsigned char *)(v8 + 72) = v9[72];
  long long v13 = v9 + 80;
  if ((unint64_t)(*(void *)(v8 + 88) - 1) < 2)
  {
LABEL_9:
    *(_OWORD *)(v8 + 80) = *v13;
    goto LABEL_11;
  }
  uint64_t v14 = *((void *)v9 + 11);
  if ((unint64_t)(v14 - 1) < 2)
  {
    outlined destroy of Text.LineStyle(v8 + 80);
    goto LABEL_9;
  }
  *(void *)(v8 + 80) = *(void *)v13;
  *(void *)(v8 + 88) = v14;
  swift_release();
LABEL_11:
  long long v15 = v9 + 96;
  if ((unint64_t)(*(void *)(v8 + 104) - 1) < 2)
  {
LABEL_14:
    *(_OWORD *)(v8 + 96) = *v15;
    goto LABEL_16;
  }
  uint64_t v16 = *((void *)v9 + 13);
  if ((unint64_t)(v16 - 1) < 2)
  {
    outlined destroy of Text.LineStyle(v8 + 96);
    goto LABEL_14;
  }
  *(void *)(v8 + 96) = *(void *)v15;
  *(void *)(v8 + 104) = v16;
  swift_release();
LABEL_16:
  uint64_t v17 = (_OWORD *)(v8 + 112);
  uint64_t v18 = v9 + 112;
  if (*(void *)(v8 + 176) == 1)
  {
LABEL_19:
    long long v20 = *((_OWORD *)v9 + 12);
    *(_OWORD *)(v8 + 176) = *((_OWORD *)v9 + 11);
    *(_OWORD *)(v8 + 192) = v20;
    *(unsigned char *)(v8 + 208) = v9[208];
    long long v21 = *((_OWORD *)v9 + 8);
    *uint64_t v17 = *v18;
    *(_OWORD *)(v8 + 128) = v21;
    long long v22 = *((_OWORD *)v9 + 10);
    *(_OWORD *)(v8 + 144) = *((_OWORD *)v9 + 9);
    *(_OWORD *)(v8 + 160) = v22;
    goto LABEL_21;
  }
  uint64_t v19 = *((void *)v9 + 22);
  if (v19 == 1)
  {
    outlined destroy of Text.Encapsulation(v8 + 112);
    goto LABEL_19;
  }
  *(void *)uint64_t v17 = *(void *)v18;
  *(unsigned char *)(v8 + 120) = v9[120];
  *(void *)(v8 + 128) = *((void *)v9 + 16);
  *(unsigned char *)(v8 + 136) = v9[136];
  *(void *)(v8 + 144) = *((void *)v9 + 18);
  *(unsigned char *)(v8 + 152) = v9[152];
  *(unsigned char *)(v8 + 168) = v9[168];
  *(void *)(v8 + 160) = *((void *)v9 + 20);
  *(void *)(v8 + 176) = v19;
  swift_release();
  *(void *)(v8 + 184) = *((void *)v9 + 23);
  *(unsigned char *)(v8 + 192) = v9[192];
  *(void *)(v8 + 200) = *((void *)v9 + 25);
  *(unsigned char *)(v8 + 208) = v9[208];
LABEL_21:
  if (*(void *)(v8 + 248) == 1)
  {
LABEL_24:
    long long v24 = *(_OWORD *)(v9 + 232);
    *(_OWORD *)(v8 + 216) = *(_OWORD *)(v9 + 216);
    *(_OWORD *)(v8 + 232) = v24;
    *(void *)(v8 + 248) = *((void *)v9 + 31);
    goto LABEL_26;
  }
  uint64_t v23 = *((void *)v9 + 31);
  if (v23 == 1)
  {
    outlined destroy of AccessibilitySpeechAttributes(v8 + 216);
    goto LABEL_24;
  }
  *(_WORD *)(v8 + 216) = *((_WORD *)v9 + 108);
  *(void *)(v8 + 224) = *((void *)v9 + 28);
  *(_WORD *)(v8 + 232) = *((_WORD *)v9 + 116);
  *(void *)(v8 + 240) = *((void *)v9 + 30);
  *(void *)(v8 + 248) = v23;
  swift_bridgeObjectRelease();
LABEL_26:
  uint64_t v25 = *(void *)(v8 + 288);
  uint64_t v80 = a2;
  uint64_t v81 = a1;
  uint64_t v79 = a3;
  if (v25 == 1)
  {
LABEL_29:
    long long v27 = *((_OWORD *)v9 + 17);
    *(_OWORD *)(v8 + 256) = *((_OWORD *)v9 + 16);
    *(_OWORD *)(v8 + 272) = v27;
    *(void *)(v8 + 288) = *((void *)v9 + 36);
    goto LABEL_30;
  }
  uint64_t v26 = *((void *)v9 + 36);
  if (v26 == 1)
  {
    outlined destroy of AccessibilityTextAttributes(v8 + 256);
    goto LABEL_29;
  }
  *(unsigned char *)(v8 + 256) = v9[256];
  *(_WORD *)(v8 + 257) = *(_WORD *)(v9 + 257);
  long long v71 = (_OWORD *)(v8 + 264);
  uint64_t v72 = v9 + 264;
  if (v25)
  {
    if (v26)
    {
      char v73 = v9[280];
      uint64_t v74 = *(void *)(v8 + 264);
      uint64_t v75 = *(void *)(v8 + 272);
      char v76 = *(unsigned char *)(v8 + 280);
      *long long v71 = *v72;
      *(unsigned char *)(v8 + 280) = v73;
      outlined consume of Text.Storage(v74, v75, v76);
      *(void *)(v8 + 288) = *((void *)v9 + 36);
      swift_bridgeObjectRelease();
      goto LABEL_30;
    }
    outlined destroy of Text(v8 + 264);
  }
  long long v78 = *(_OWORD *)(v9 + 280);
  *long long v71 = *v72;
  *(_OWORD *)(v8 + 280) = v78;
LABEL_30:
  long long v28 = *(void **)(v8 + 296);
  *(void *)(v8 + 296) = *((void *)v9 + 37);

  *(void *)(v8 + 304) = *((void *)v9 + 38);
  swift_release();
  *(void *)(v8 + 312) = *((void *)v9 + 39);
  swift_release();
  *(_WORD *)(v8 + 320) = *((_WORD *)v9 + 160);
  long long v29 = (int *)type metadata accessor for Text.Style(0);
  uint64_t v30 = v29[21];
  uint64_t v31 = (char *)(v8 + v30);
  uint64_t v32 = &v9[v30];
  _s10Foundation6LocaleV8LanguageV_7SwiftUI011TypesettingC0V5FlagsVtMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags), MEMORY[0x263F07648]);
  uint64_t v34 = v33;
  uint64_t v35 = *(void *)(v33 - 8);
  uint64_t v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 48);
  int v37 = v36(v31, 2, v33);
  int v38 = v36(v32, 2, v34);
  if (v37)
  {
    if (!v38)
    {
      uint64_t v39 = type metadata accessor for Locale.Language();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v39 - 8) + 32))(v31, v32, v39);
      v31[*(int *)(v34 + 48)] = v32[*(int *)(v34 + 48)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v31, 0, 2, v34);
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  if (v38)
  {
    _s10Foundation6LocaleV8LanguageV_7SwiftUI011TypesettingC0V5FlagsVtWOhTm_0((uint64_t)v31, (uint64_t)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags), MEMORY[0x263F07648], (uint64_t)&type metadata for TypesettingLanguage.Flags, (uint64_t (*)(void))_s10Foundation6LocaleV8LanguageV_7SwiftUI011TypesettingC0V5FlagsVtMaTm_0);
LABEL_35:
    uint64_t v40 = type metadata accessor for TypesettingLanguage.Storage(0);
    memcpy(v31, v32, *(void *)(*(void *)(v40 - 8) + 64));
    goto LABEL_36;
  }
  uint64_t v77 = type metadata accessor for Locale.Language();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v77 - 8) + 40))(v31, v32, v77);
  v31[*(int *)(v34 + 48)] = v32[*(int *)(v34 + 48)];
LABEL_36:
  uint64_t v41 = *(int *)(type metadata accessor for TypesettingConfiguration() + 20);
  long long v42 = &v31[v41];
  long long v43 = &v32[v41];
  *(void *)long long v42 = *(void *)v43;
  v42[8] = v43[8];
  *(void *)(v8 + v29[22]) = *(void *)&v9[v29[22]];
  swift_bridgeObjectRelease();
  uint64_t v44 = v29[23];
  long long v45 = (void *)(v8 + v44);
  long long v46 = &v9[v44];
  uint64_t v47 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
  uint64_t v48 = *(void *)(v47 - 8);
  uint64_t v49 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v48 + 48);
  int v50 = v49(v45, 1, v47);
  int v51 = v49(v46, 1, v47);
  if (!v50)
  {
    if (!v51)
    {
      (*(void (**)(void *, char *, uint64_t))(v48 + 40))(v45, v46, v47);
      goto LABEL_42;
    }
    (*(void (**)(void *, uint64_t))(v48 + 8))(v45, v47);
    goto LABEL_41;
  }
  if (v51)
  {
LABEL_41:
    type metadata accessor for AttributedString.AdaptiveImageGlyph?(0, &lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, MEMORY[0x263F03950], MEMORY[0x263F8D8F0]);
    memcpy(v45, v46, *(void *)(*(void *)(v52 - 8) + 64));
    goto LABEL_42;
  }
  (*(void (**)(void *, char *, uint64_t))(v48 + 32))(v45, v46, v47);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
LABEL_42:
  *(void *)(v8 + v29[24]) = *(void *)&v9[v29[24]];
  swift_bridgeObjectRelease();
  uint64_t v53 = v79[6];
  uint64_t v54 = (char *)v81 + v53;
  long long v55 = (char *)v80 + v53;
  *(void *)((char *)v81 + v53) = *(void *)((char *)v80 + v53);
  swift_release();
  *((void *)v54 + 1) = *((void *)v55 + 1);
  swift_release();
  uint64_t v56 = v79[8];
  *(void *)((char *)v81 + v79[7]) = *(void *)((char *)v80 + v79[7]);
  *(void *)((char *)v81 + v56) = *(void *)((char *)v80 + v56);
  swift_bridgeObjectRelease();
  uint64_t v57 = v79[9];
  long long v58 = (char *)v81 + v57;
  long long v59 = (char *)v80 + v57;
  long long v60 = *(_OWORD *)((char *)v80 + v57 + 16);
  *(_OWORD *)long long v58 = *(_OWORD *)((char *)v80 + v57);
  *((_OWORD *)v58 + 1) = v60;
  *((_WORD *)v58 + 16) = *(_WORD *)((char *)v80 + v57 + 32);
  *((void *)v58 + 5) = *(void *)((char *)v80 + v57 + 40);
  swift_bridgeObjectRelease();
  *((void *)v58 + 6) = *((void *)v59 + 6);
  swift_bridgeObjectRelease();
  uint64_t v61 = *((void *)v59 + 13);
  uint64_t v62 = (void *)*((void *)v58 + 7);
  uint64_t v63 = *((void *)v58 + 8);
  uint64_t v64 = *((void *)v58 + 9);
  uint64_t v65 = *((void *)v58 + 10);
  uint64_t v66 = *((void *)v58 + 11);
  uint64_t v67 = *((void *)v58 + 12);
  *(_OWORD *)(v58 + 56) = *(_OWORD *)(v59 + 56);
  *(_OWORD *)(v58 + 72) = *(_OWORD *)(v59 + 72);
  *(_OWORD *)(v58 + 88) = *(_OWORD *)(v59 + 88);
  *((void *)v58 + 13) = v61;
  outlined consume of ResolvedTextSuffix(v62, v63, v64, v65, v66, v67);
  *((void *)v58 + 14) = *((void *)v59 + 14);
  swift_bridgeObjectRelease();
  uint64_t v68 = (void *)*((void *)v58 + 16);
  uint64_t v69 = *((void *)v59 + 16);
  *((void *)v58 + 15) = *((void *)v59 + 15);
  *((void *)v58 + 16) = v69;

  return v81;
}

uint64_t getEnumTagSinglePayload for PlatformAttributeResolver(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_245DF3F78);
}

uint64_t sub_245DF3F78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for Text.Style(0);
    long long v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for PlatformAttributeResolver(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_245DF403C);
}

uint64_t sub_245DF403C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for Text.Style(0);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for PlatformAttributeResolver(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for PlatformAttributeResolver);
}

uint64_t type metadata completion function for PlatformAttributeResolver()
{
  uint64_t result = type metadata accessor for Text.Style(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *type metadata accessor for ResolvableTextSegmentAttribute.Value.CodingKeys()
{
  return &unk_26FA724E0;
}

uint64_t initializeWithCopy for ResolvableTextSegmentAttribute.Value.Run(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ResolvableTextSegmentAttribute.Value.Run(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for ResolvableTextSegmentAttribute.Value.Run(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ResolvableTextSegmentAttribute.Value.Run()
{
  return &type metadata for ResolvableTextSegmentAttribute.Value.Run;
}

void specialized closure #1 in _NativeDictionary.filter(_:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(id))
{
  uint64_t v22 = 0;
  int64_t v6 = 0;
  uint64_t v7 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 64);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      unint64_t v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v12 = v11 | (v6 << 6);
      goto LABEL_5;
    }
    int64_t v16 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v16 >= v10) {
      goto LABEL_24;
    }
    unint64_t v17 = *(void *)(v24 + 8 * v16);
    ++v6;
    if (!v17)
    {
      int64_t v6 = v16 + 1;
      if (v16 + 1 >= v10) {
        goto LABEL_24;
      }
      unint64_t v17 = *(void *)(v24 + 8 * v6);
      if (!v17)
      {
        int64_t v6 = v16 + 2;
        if (v16 + 2 >= v10) {
          goto LABEL_24;
        }
        unint64_t v17 = *(void *)(v24 + 8 * v6);
        if (!v17) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v9 = (v17 - 1) & v17;
    unint64_t v12 = __clz(__rbit64(v17)) + (v6 << 6);
LABEL_5:
    long long v13 = *(void **)(*(void *)(a3 + 48) + 8 * v12);
    outlined init with copy of Any(*(void *)(a3 + 56) + 32 * v12, (uint64_t)v23);
    id v14 = v13;
    char v15 = a4(v14);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);

    if (v15)
    {
      *(unint64_t *)((char *)a1 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      if (__OFADD__(v22++, 1))
      {
        __break(1u);
LABEL_24:
        specialized _NativeDictionary.extractDictionary(using:count:)(a1, a2, v22, a3);
        return;
      }
    }
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v10) {
    goto LABEL_24;
  }
  unint64_t v17 = *(void *)(v24 + 8 * v18);
  if (v17)
  {
    int64_t v6 = v18;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v6 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v6 >= v10) {
      goto LABEL_24;
    }
    unint64_t v17 = *(void *)(v24 + 8 * v6);
    ++v18;
    if (v17) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
}

uint64_t specialized _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe, uint64_t (*a2)(id), uint64_t a3)
{
  uint64_t v6 = isStackAllocationSafe;
  v14[1] = *MEMORY[0x263EF8340];
  char v7 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v8 = (unint64_t)((1 << v7) + 63) >> 6;
  size_t v9 = 8 * v8;
  if ((v7 & 0x3Fu) <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x270FA5388](isStackAllocationSafe);
    bzero((char *)v14 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    specialized closure #1 in _NativeDictionary.filter(_:)((void *)((char *)v14 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0)), v8, v6, a2);
    if (v3) {
      swift_willThrow();
    }
    else {
      return v10;
    }
  }
  else
  {
    unint64_t v11 = (void *)swift_slowAlloc();
    bzero(v11, v9);
    specialized closure #1 in _NativeDictionary.filter(_:)((unint64_t *)v11, v8, v6, a2);
    a3 = v12;
    MEMORY[0x24C527CC0](v11, -1, -1);
  }
  return a3;
}

void specialized Sequence.filter(_:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int64_t v5 = 0;
  uint64_t v6 = a1 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a1 + 64);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v28 = MEMORY[0x263F8EE78];
  uint64_t v29 = MEMORY[0x263F8EE58] + 8;
  while (v9)
  {
    unint64_t v11 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    unint64_t v12 = v11 | (v5 << 6);
LABEL_23:
    int64_t v16 = *(void **)(*(void *)(a1 + 48) + 8 * v12);
    if (*(void *)(a2 + 16))
    {
      id v17 = v16;
      uint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v17);
      if (v19)
      {
        outlined init with copy of Any(*(void *)(a2 + 56) + 32 * v18, (uint64_t)&v31);
      }
      else
      {
        long long v31 = 0u;
        long long v32 = 0u;
      }

      if (!*((void *)&v32 + 1)) {
        goto LABEL_29;
      }
      _s10Foundation6LocaleV8LanguageV_7SwiftUI011TypesettingC0V5FlagsVtWOhTm_0((uint64_t)&v31, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0], (uint64_t (*)(void))_sypSgMaTm_4);
    }
    else
    {
      long long v31 = 0u;
      long long v32 = 0u;
      id v20 = v16;
LABEL_29:
      _s10Foundation6LocaleV8LanguageV_7SwiftUI011TypesettingC0V5FlagsVtWOhTm_0((uint64_t)&v31, (uint64_t)&lazy cache variable for type metadata for Any?, v29, MEMORY[0x263F8D8F0], (uint64_t (*)(void))_sypSgMaTm_4);
      uint64_t v21 = *a3;
      swift_bridgeObjectRetain();
      char v22 = specialized Set.contains(_:)((uint64_t)v16, v21);
      swift_bridgeObjectRelease();
      if (v22)
      {
      }
      else
      {
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v24 = v28;
        uint64_t v33 = v28;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v28 + 16) + 1, 1);
          uint64_t v24 = v33;
        }
        unint64_t v26 = *(void *)(v24 + 16);
        unint64_t v25 = *(void *)(v24 + 24);
        unint64_t v27 = v26 + 1;
        if (v26 >= v25 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1);
          unint64_t v27 = v26 + 1;
          uint64_t v24 = v33;
        }
        *(void *)(v24 + 16) = v27;
        uint64_t v28 = v24;
        *(void *)(v24 + 8 * v26 + 32) = v16;
      }
    }
  }
  int64_t v13 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    goto LABEL_38;
  }
  if (v13 >= v10) {
    goto LABEL_36;
  }
  unint64_t v14 = *(void *)(v6 + 8 * v13);
  ++v5;
  if (v14) {
    goto LABEL_22;
  }
  int64_t v5 = v13 + 1;
  if (v13 + 1 >= v10) {
    goto LABEL_36;
  }
  unint64_t v14 = *(void *)(v6 + 8 * v5);
  if (v14) {
    goto LABEL_22;
  }
  int64_t v5 = v13 + 2;
  if (v13 + 2 >= v10) {
    goto LABEL_36;
  }
  unint64_t v14 = *(void *)(v6 + 8 * v5);
  if (v14) {
    goto LABEL_22;
  }
  int64_t v5 = v13 + 3;
  if (v13 + 3 >= v10) {
    goto LABEL_36;
  }
  unint64_t v14 = *(void *)(v6 + 8 * v5);
  if (v14)
  {
LABEL_22:
    unint64_t v9 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v5 << 6);
    goto LABEL_23;
  }
  int64_t v15 = v13 + 4;
  if (v15 >= v10)
  {
LABEL_36:
    swift_release();
    return;
  }
  unint64_t v14 = *(void *)(v6 + 8 * v15);
  if (v14)
  {
    int64_t v5 = v15;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v5 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_36;
    }
    unint64_t v14 = *(void *)(v6 + 8 * v5);
    ++v15;
    if (v14) {
      goto LABEL_22;
    }
  }
LABEL_38:
  __break(1u);
}

uint64_t specialized ResolvableTextSegmentAttribute.Value.Run.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65676E6172 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000246221120 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x8000000246221140)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t specialized ResolvableTextSegmentAttribute.Value.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1684632949 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x80000002462210B0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1936618866 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

unint64_t lazy protocol witness table accessor for type ResolvableTextSegmentAttribute.Value.Run.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.Run.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute.Value.Run.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.Run.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute.Value.Run.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.Run.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute.Value.Run.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.Run.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute.Value.Run.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.Run.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute.Value.Run.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.Run.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute.Value.Run.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.Run.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute.Value.Run.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.Run.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute.Value.Run.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.Run.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute.Value.Run.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.Run.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute.Value.Run.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.Run.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute.Value.Run.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.Run.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableTextSegmentAttribute.Value.Run.CodingKeys and conformance ResolvableTextSegmentAttribute.Value.Run.CodingKeys);
  }
  return result;
}

void type metadata accessor for ProxyCodable<[NSAttributedStringKey]>()
{
  if (!lazy cache variable for type metadata for ProxyCodable<[NSAttributedStringKey]>)
  {
    type metadata accessor for AttributedString.AdaptiveImageGlyph?(255, &lazy cache variable for type metadata for [NSAttributedStringKey], (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, MEMORY[0x263F8D488]);
    lazy protocol witness table accessor for type [NSAttributedStringKey] and conformance <A> [A]();
    unint64_t v0 = type metadata accessor for ProxyCodable();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ProxyCodable<[NSAttributedStringKey]>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type [NSAttributedStringKey] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [NSAttributedStringKey] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [NSAttributedStringKey] and conformance <A> [A])
  {
    type metadata accessor for AttributedString.AdaptiveImageGlyph?(255, &lazy cache variable for type metadata for [NSAttributedStringKey], (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, MEMORY[0x263F8D488]);
    _s10Foundation4UUIDVACSEAAWlTm_0(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [NSAttributedStringKey] and conformance <A> [A]);
  }
  return result;
}

void type metadata accessor for KeyedEncodingContainer<ResolvableTextSegmentAttribute.Value.CodingKeys>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t sub_245DF52A4()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

void type metadata accessor for _ContiguousArrayStorage<(NSAttributedStringKey, Any)>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(NSAttributedStringKey, Any)>)
  {
    _s10Foundation6LocaleV8LanguageV_7SwiftUI011TypesettingC0V5FlagsVtMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for (NSAttributedStringKey, Any), type metadata accessor for NSAttributedStringKey);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(NSAttributedStringKey, Any)>);
    }
  }
}

uint64_t sub_245DF535C()
{
  uint64_t v1 = type metadata accessor for Text.Style(0);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v4 = v0 + v2;
  if (*(void *)(v0 + v2) >= 2uLL) {
    swift_release();
  }
  swift_bridgeObjectRelease();
  outlined consume of Text.Style.TextStyleColor(*(void *)(v4 + 16));
  swift_release();
  if ((unint64_t)(*(void *)(v4 + 88) - 1) >= 2) {
    swift_release();
  }
  if ((unint64_t)(*(void *)(v4 + 104) - 1) >= 2) {
    swift_release();
  }
  if (*(void *)(v4 + 176) != 1) {
    swift_release();
  }
  if (*(void *)(v4 + 248) != 1) {
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v4 + 288) >= 2uLL)
  {
    outlined consume of Text.Storage(*(void *)(v4 + 264), *(void *)(v4 + 272), *(unsigned char *)(v4 + 280));
    swift_bridgeObjectRelease();
  }

  swift_release();
  swift_release();
  uint64_t v5 = v4 + *(int *)(v1 + 84);
  _s10Foundation6LocaleV8LanguageV_7SwiftUI011TypesettingC0V5FlagsVtMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags), MEMORY[0x263F07648]);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 2, v6))
  {
    uint64_t v7 = type metadata accessor for Locale.Language();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v5, v7);
  }
  swift_bridgeObjectRelease();
  uint64_t v8 = v4 + *(int *)(v1 + 92);
  uint64_t v9 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
  uint64_t v10 = *(void *)(v9 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  }
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_245DF563C()
{
  return swift_deallocObject();
}

uint64_t sub_245DF564C()
{
  return swift_deallocObject();
}

uint64_t sub_245DF565C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ResolvableTextSegmentAttribute.Value.Run.init(range:oldAttributes:newAttributes:)(void *a1, uint64_t a2)
{
  return closure #1 in ResolvableTextSegmentAttribute.Value.Run.init(range:oldAttributes:newAttributes:)(a1, a2, *(void *)(v2 + 16));
}

uint64_t outlined destroy of ResolvableTextSegmentAttribute.Value(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_245DF56D4()
{
  return swift_deallocObject();
}

uint64_t sub_245DF56E4()
{
  return swift_deallocObject();
}

uint64_t sub_245DF56F4()
{
  return swift_deallocObject();
}

uint64_t sub_245DF5704()
{
  return swift_deallocObject();
}

uint64_t sub_245DF5714()
{
  return swift_deallocObject();
}

uint64_t sub_245DF5724()
{
  return swift_deallocObject();
}

uint64_t outlined destroy of AttributedString?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = a5(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t sub_245DF5794()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in ResolvableTextSegmentAttribute.Value.update(_:of:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  closure #1 in ResolvableTextSegmentAttribute.Value.update(_:of:in:)(a1, a2, a3, a4, *(void **)(v4 + 16), *(void *)(v4 + 24));
}

uint64_t sub_245DF57D8()
{
  return swift_deallocObject();
}

uint64_t sub_245DF57E8()
{
  return swift_deallocObject();
}

uint64_t sub_245DF57F8()
{
  return swift_deallocObject();
}

unsigned char *storeEnumTagSinglePayload for ResolvableTextSegmentAttribute.Value.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245DF58D4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void *type metadata accessor for ResolvableTextSegmentAttribute.Value.Run.CodingKeys()
{
  return &unk_26FA72570;
}

uint64_t EnvironmentValues.typesettingConfiguration.setter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for TypesettingConfiguration();
  MEMORY[0x270FA5388](v2 - 8);
  unsigned int v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s7SwiftUI24TypesettingConfigurationVWOcTm_0(a1, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for TypesettingConfiguration);
  specialized EnvironmentValues.subscript.setter((uint64_t)v4);
  return _s7SwiftUI24TypesettingConfigurationVWOhTm_0(a1, (uint64_t (*)(void))type metadata accessor for TypesettingConfiguration);
}

uint64_t TypesettingConfiguration.language.getter@<X0>(uint64_t a1@<X8>)
{
  return _s7SwiftUI24TypesettingConfigurationVWOcTm_0(v1, a1, type metadata accessor for TypesettingLanguage);
}

uint64_t TypesettingConfiguration.language.setter(uint64_t a1)
{
  return outlined assign with take of TypesettingLanguage(a1, v1);
}

uint64_t (*TypesettingConfiguration.language.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t TypesettingConfiguration.languageAwareLineHeightRatio.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = type metadata accessor for TypesettingConfiguration();
  unsigned int v4 = (uint64_t *)(v1 + *(int *)(result + 20));
  uint64_t v5 = *v4;
  LOBYTE(v4) = *((unsigned char *)v4 + 8);
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 8) = (_BYTE)v4;
  return result;
}

uint64_t TypesettingConfiguration.languageAwareLineHeightRatio.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char v3 = *((unsigned char *)a1 + 8);
  uint64_t result = type metadata accessor for TypesettingConfiguration();
  uint64_t v5 = v1 + *(int *)(result + 20);
  *(void *)uint64_t v5 = v2;
  *(unsigned char *)(v5 + 8) = v3;
  return result;
}

uint64_t (*TypesettingConfiguration.languageAwareLineHeightRatio.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

BOOL static TypesettingConfiguration.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (!specialized static TypesettingLanguage.Storage.== infix(_:_:)(a1, a2)) {
    return 0;
  }
  uint64_t v4 = *(int *)(type metadata accessor for TypesettingConfiguration() + 20);
  double v5 = *(double *)(a1 + v4);
  int v6 = *(unsigned __int8 *)(a1 + v4 + 8);
  uint64_t v7 = a2 + v4;
  double v8 = *(double *)v7;
  char v9 = *(unsigned char *)(v7 + 8);
  if (v6 != 1)
  {
    if (v5 != v8) {
      char v9 = 1;
    }
    return (v9 & 1) == 0;
  }
  if (v5 == 0.0)
  {
    if (v8 != 0.0) {
      char v9 = 0;
    }
    return (v9 & 1) != 0;
  }
  if (*(void *)&v5 != 1)
  {
    if (*(void *)&v8 <= 1uLL) {
      char v9 = 0;
    }
    return (v9 & 1) != 0;
  }
  if (*(void *)&v8 != 1) {
    char v9 = 0;
  }
  return (v9 & 1) != 0;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance TypesettingConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!specialized static TypesettingLanguage.Storage.== infix(_:_:)(a1, a2)) {
    return 0;
  }
  uint64_t v6 = *(int *)(a3 + 20);
  double v7 = *(double *)(a1 + v6);
  int v8 = *(unsigned __int8 *)(a1 + v6 + 8);
  uint64_t v9 = a2 + v6;
  double v10 = *(double *)v9;
  int v11 = *(unsigned __int8 *)(v9 + 8);
  if (v8 != 1)
  {
    if (v7 != v10) {
      LOBYTE(v11) = 1;
    }
    return (v11 & 1) == 0;
  }
  if (v7 == 0.0)
  {
    if (v10 != 0.0) {
      LOBYTE(v11) = 0;
    }
    return (v11 & 1) != 0;
  }
  if (*(void *)&v7 != 1)
  {
    if (*(void *)&v10 <= 1uLL) {
      int v11 = 0;
    }
    return v11 == 1;
  }
  if (*(void *)&v10 != 1) {
    LOBYTE(v11) = 0;
  }
  return (v11 & 1) != 0;
}

uint64_t static TypesettingConfigurationKey.defaultValue.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for TypesettingConfiguration();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static TypesettingConfigurationKey.defaultValue);
  return _s7SwiftUI24TypesettingConfigurationVWOcTm_0(v3, a1, (uint64_t (*)(void))type metadata accessor for TypesettingConfiguration);
}

uint64_t specialized EnvironmentValues.subscript.setter(unsigned __int8 a1)
{
  uint64_t v2 = v1;
  unsigned __int8 v14 = a1;
  uint64_t v4 = *v1;
  uint64_t v5 = v1[1];
  if (v5)
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v6 = specialized PropertyList.Tracker.value<A>(_:for:)(v4);
    uint64_t v8 = v7;
    swift_release_n();
    swift_release_n();
    if (v6) {
      return (*(uint64_t (**)(ValueMetadata *, uint64_t *, unsigned __int8 *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t))(v8 + 16))(&type metadata for EnvironmentValues.MaxAllowedDynamicRangeKey, v2, &v14, &type metadata for EnvironmentValues.MaxAllowedDynamicRangeKey, &protocol witness table for EnvironmentValues.MaxAllowedDynamicRangeKey, v6, v8);
    }
  }
  else
  {
    uint64_t v10 = swift_retain_n();
    uint64_t v6 = specialized closure #1 in PropertyList.subscript.getter(v10, (uint64_t)v13);
    uint64_t v8 = v11;
    swift_release_n();
    if (v6) {
      return (*(uint64_t (**)(ValueMetadata *, uint64_t *, unsigned __int8 *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t))(v8 + 16))(&type metadata for EnvironmentValues.MaxAllowedDynamicRangeKey, v2, &v14, &type metadata for EnvironmentValues.MaxAllowedDynamicRangeKey, &protocol witness table for EnvironmentValues.MaxAllowedDynamicRangeKey, v6, v8);
    }
  }
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v2, a1);
  swift_release();
  if (v5)
  {
    uint64_t v12 = *v2;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v12);
    swift_release();
    swift_release();
  }
  return swift_release();
}

void (*EnvironmentValues.typesettingConfiguration.modify(void *a1))(void *a1, char a2)
{
  *a1 = v1;
  size_t v3 = *(void *)(*(void *)(type metadata accessor for TypesettingConfiguration() - 8) + 64);
  a1[1] = malloc(v3);
  a1[2] = malloc(v3);
  uint64_t v4 = malloc(v3);
  a1[3] = v4;
  uint64_t v5 = *(void *)(v1 + 8);
  swift_retain();
  uint64_t v6 = swift_retain();
  specialized EnvironmentValues.subscript.getter(v6, v5, (uint64_t)v4);
  swift_release();
  swift_release();
  return EnvironmentValues.typesettingConfiguration.modify;
}

void EnvironmentValues.typesettingConfiguration.modify(void *a1, char a2)
{
  uint64_t v4 = (void *)a1[2];
  uint64_t v5 = (void *)a1[3];
  _s7SwiftUI24TypesettingConfigurationVWOcTm_0((uint64_t)v5, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for TypesettingConfiguration);
  uint64_t v6 = (void *)a1[1];
  if (a2)
  {
    _s7SwiftUI24TypesettingConfigurationVWOcTm_0((uint64_t)v4, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for TypesettingConfiguration);
    specialized EnvironmentValues.subscript.setter((uint64_t)v6);
    _s7SwiftUI24TypesettingConfigurationVWOhTm_0((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for TypesettingConfiguration);
  }
  else
  {
    specialized EnvironmentValues.subscript.setter((uint64_t)v4);
  }
  _s7SwiftUI24TypesettingConfigurationVWOhTm_0((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for TypesettingConfiguration);
  free(v5);
  free(v4);

  free(v6);
}

uint64_t *initializeBufferWithCopyOfBuffer for TypesettingConfiguration(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)();
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v9 + 48))(a2, 2, v7))
    {
      uint64_t v10 = type metadata accessor for TypesettingLanguage.Storage(0);
      memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    }
    else
    {
      uint64_t v12 = type metadata accessor for Locale.Language();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v12 - 8) + 16))(a1, a2, v12);
      *((unsigned char *)a1 + *(int *)(v8 + 48)) = *((unsigned char *)a2 + *(int *)(v8 + 48));
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v9 + 56))(a1, 0, 2, v8);
    }
    uint64_t v13 = *(int *)(a3 + 20);
    unsigned __int8 v14 = (char *)a1 + v13;
    int64_t v15 = (char *)a2 + v13;
    *(void *)unsigned __int8 v14 = *(void *)v15;
    unsigned char v14[8] = v15[8];
  }
  return a1;
}

char *initializeWithTake for TypesettingConfiguration(char *a1, char *a2, uint64_t a3)
{
  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)();
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(a2, 2, v6))
  {
    uint64_t v9 = type metadata accessor for TypesettingLanguage.Storage(0);
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    uint64_t v10 = type metadata accessor for Locale.Language();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(a1, a2, v10);
    a1[*(int *)(v7 + 48)] = a2[*(int *)(v7 + 48)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 2, v7);
  }
  uint64_t v11 = *(int *)(a3 + 20);
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  *(void *)uint64_t v12 = *(void *)v13;
  unsigned __int8 v12[8] = v13[8];
  return a1;
}

uint64_t sub_245DF6440(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TypesettingLanguage(0);
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_245DF64AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TypesettingLanguage(0);
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

ValueMetadata *type metadata accessor for TypesettingConfigurationKey()
{
  return &type metadata for TypesettingConfigurationKey;
}

uint64_t EnvironmentValues.backgroundProminence.getter@<X0>(char *a1@<X8>)
{
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a1);
    swift_release_n();
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, a1);
  }
  return swift_release_n();
}

BOOL static BackgroundProminence.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void static BackgroundProminence.increased.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void BackgroundProminence.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int BackgroundProminence.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t (*EnvironmentValues.backgroundProminence.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v2 = (char *)(a1 + 24);
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, v2);
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<BackgroundProminence.Key>();
    BloomFilter.init(hashValue:)(v4);
    uint64_t v5 = swift_retain_n();
    uint64_t v6 = specialized find1<A>(_:key:filter:)(v5, v9);
    if (v6) {
      char v7 = *(unsigned char *)(v6 + 72);
    }
    else {
      char v7 = 0;
    }
    *uint64_t v2 = v7;
  }
  swift_release_n();
  return EnvironmentValues.backgroundProminence.modify;
}

uint64_t EnvironmentValues.backgroundProminence.modify(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 16);
  char v3 = *(unsigned char *)(a1 + 24);
  uint64_t v4 = *v2;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3);
  swift_release();
  if (v2[1])
  {
    uint64_t v5 = **(void **)(a1 + 16);
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v5);
    swift_release();
    swift_release();
  }

  return swift_release();
}

void type metadata accessor for EnvironmentPropertyKey<BackgroundProminence.Key>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundProminence.Key>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundProminence.Key>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type BackgroundProminence and conformance BackgroundProminence()
{
  unint64_t result = lazy protocol witness table cache variable for type BackgroundProminence and conformance BackgroundProminence;
  if (!lazy protocol witness table cache variable for type BackgroundProminence and conformance BackgroundProminence)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BackgroundProminence and conformance BackgroundProminence);
  }
  return result;
}

uint64_t sub_245DF68CC(char *a1)
{
  char v2 = *a1;
  return EnvironmentValues.backgroundProminence.setter(&v2);
}

ValueMetadata *type metadata accessor for BackgroundProminence.Guts()
{
  return &type metadata for BackgroundProminence.Guts;
}

ValueMetadata *type metadata accessor for BackgroundProminence.Key()
{
  return &type metadata for BackgroundProminence.Key;
}

unint64_t lazy protocol witness table accessor for type BackgroundProminence.Guts and conformance BackgroundProminence.Guts()
{
  unint64_t result = lazy protocol witness table cache variable for type BackgroundProminence.Guts and conformance BackgroundProminence.Guts;
  if (!lazy protocol witness table cache variable for type BackgroundProminence.Guts and conformance BackgroundProminence.Guts)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BackgroundProminence.Guts and conformance BackgroundProminence.Guts);
  }
  return result;
}

uint64_t static TypesettingLanguageAwareLineHeightRatio.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)a1;
  double v3 = *(double *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  if (*(unsigned char *)(a1 + 8) == 1)
  {
    if (v2 == 0.0)
    {
      if (v3 != 0.0) {
        char v4 = 0;
      }
      if (v4) {
        return 1;
      }
    }
    else if (*(void *)&v2 == 1)
    {
      if (*(void *)&v3 != 1) {
        char v4 = 0;
      }
      if (v4) {
        return 1;
      }
    }
    else
    {
      if (*(void *)&v3 <= 1uLL) {
        char v4 = 0;
      }
      if (v4) {
        return 1;
      }
    }
  }
  else
  {
    if (v2 != v3) {
      char v4 = 1;
    }
    if ((v4 & 1) == 0) {
      return 1;
    }
  }
  return 0;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance TypesettingLanguageAwareLineHeightRatio.Storage(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)a1;
  double v3 = *(double *)a2;
  if (*(unsigned char *)(a1 + 8) == 1)
  {
    if (v2 == 0.0)
    {
      if (v3 == 0.0) {
        uint64_t v6 = *(unsigned __int8 *)(a2 + 8);
      }
      else {
        LOBYTE(v6) = 0;
      }
      if (v6) {
        return 1;
      }
    }
    else if (*(void *)&v2 == 1)
    {
      if (*(void *)&v3 == 1) {
        char v4 = *(unsigned char *)(a2 + 8);
      }
      else {
        char v4 = 0;
      }
      if (v4) {
        return 1;
      }
    }
    else
    {
      if (*(void *)&v3 > 1uLL) {
        char v7 = *(unsigned char *)(a2 + 8);
      }
      else {
        char v7 = 0;
      }
      if (v7) {
        return 1;
      }
    }
  }
  else if ((*(unsigned char *)(a2 + 8) & 1) == 0)
  {
    return v2 == *(double *)a2;
  }
  return 0;
}

void static TypesettingLanguageAwareLineHeightRatio.automatic.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
}

void static TypesettingLanguageAwareLineHeightRatio.legacy.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 2;
  *(unsigned char *)(a1 + 8) = 1;
}

void static TypesettingLanguageAwareLineHeightRatio.custom(_:)(uint64_t a1@<X8>, double a2@<D0>)
{
  if (a2 < 0.0) {
    a2 = 0.0;
  }
  if (a2 > 1.0) {
    a2 = 1.0;
  }
  *(double *)a1 = a2;
  *(unsigned char *)(a1 + 8) = 0;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance TypesettingLanguageAwareLineHeightRatio(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)a1;
  double v3 = *(double *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 8);
  if (*(unsigned char *)(a1 + 8) != 1)
  {
    if (v2 != v3) {
      LOBYTE(v4) = 1;
    }
    return (v4 & 1) == 0;
  }
  if (v2 != 0.0)
  {
    if (*(void *)&v2 == 1)
    {
      BOOL v5 = *(void *)&v3 == 1;
      goto LABEL_10;
    }
    if (*(void *)&v3 <= 1uLL) {
      int v4 = 0;
    }
    return v4 == 1;
  }
  BOOL v5 = *(void *)&v3 == 0;
LABEL_10:
  if (!v5) {
    LOBYTE(v4) = 0;
  }
  return (v4 & 1) != 0;
}

uint64_t sub_245DF6B6C()
{
  return swift_deallocObject();
}

uint64_t sub_245DF6B7C()
{
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for TypesettingLanguageAwareLineHeightRatio.Storage()
{
  return &type metadata for TypesettingLanguageAwareLineHeightRatio.Storage;
}

ValueMetadata *type metadata accessor for LanguageAwareLineHeightRatioFontModifier()
{
  return &type metadata for LanguageAwareLineHeightRatioFontModifier;
}

void *Image.Location.bundle.getter()
{
  uint64_t v1 = *v0;
  if ((unint64_t)*v0 < 2) {
    return 0;
  }
  id v2 = v1;
  return v1;
}

uint64_t NamedImage.Cache.decode(_:)@<X0>(uint64_t a1@<X0>, CGImage **a2@<X8>)
{
  void (*v41)(void **__return_ptr, char *);
  char *v42;
  uint64_t v43;
  CGImage *v44;
  CGImage *v45;
  char v46;
  CGImage *v47;
  char v48;
  CGImage *v49;
  CGImage **v50;
  unsigned char *v51;
  void *v52;
  CGImage *v53;
  char v54;
  uint64_t v55;
  CGImage *v56;
  double Width;
  int64_t Height;
  uint64_t v59;
  os_unfair_lock_s *v60;
  char isUniquelyReferenced_nonNull_native;
  uint64_t (*v62)(char *, uint64_t);
  CGImage *v63;
  double v64;
  int64_t v65;
  CGImage **v66;
  void (*v67)(void, char *, uint64_t);
  os_unfair_lock_t v68;
  long long v69;
  uint64_t v70;
  char *v71;
  CGImage **v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(char *, uint64_t);
  void *v76[3];
  void *v77;
  CGImage *v78;
  CGImage *v79;
  uint64_t v80;
  CGImage *v81;
  CGImage *v82;
  char v83;
  long long v84;
  CGImage *v85;
  double v86;
  double v87;
  char v88;

  uint64_t v74 = a1;
  uint64_t v72 = a2;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v67 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v75 = (void (*)(char *, uint64_t))((char *)&v67 - v8);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v67 - v10;
  uint64_t v12 = type metadata accessor for NamedImage.BitmapKey(0);
  MEMORY[0x270FA5388](v12 - 8);
  unsigned __int8 v14 = (char *)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for NamedImage.Key(0);
  MEMORY[0x270FA5388](v15);
  id v17 = (char *)&v67 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v19 = *(void **)v2;
  uint64_t v18 = *(void *)(v2 + 8);
  outlined init with copy of NamedImage.Key(v74, (uint64_t)v17, type metadata accessor for NamedImage.Key);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *(void *)&uint64_t v69 = v6;
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v11, v17, v3);
    uint64_t v74 = v4;
    id v20 = *(void (**)(void, char *, uint64_t))(v4 + 16);
    long long v71 = v11;
    char v70 = v3;
    uint64_t v67 = v20;
    v20(v75, v11, v3);
    uint64_t v21 = (os_unfair_lock_s *)(v18 + 16);
    swift_retain();
    swift_retain_n();
    os_unfair_lock_lock((os_unfair_lock_t)(v18 + 16));
    uint64_t v22 = v18;
    uint64_t v23 = *(void *)(v18 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v68 = v21;
    os_unfair_lock_unlock(v21);
    swift_release();
    uint64_t v24 = v22;
    swift_release_n();
    if (*(void *)(v23 + 16) && (unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v75), (v26 & 1) != 0))
    {
      uint64_t v27 = *(void *)(v23 + 56) + 48 * v25;
      uint64_t v28 = *(void **)v27;
      uint64_t v69 = *(_OWORD *)(v27 + 16);
      uint64_t v29 = *(CGImage **)(v27 + 32);
      char v30 = *(unsigned char *)(v27 + 40);
      char v31 = *(unsigned char *)(v27 + 8);
      outlined copy of GraphicsImage.Contents(v28, v31);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      long long v32 = *(uint64_t (**)(char *, uint64_t))(v74 + 8);
      uint64_t v33 = v70;
      v32((char *)v75, v70);
      uint64_t result = v32(v71, v33);
      uint64_t v35 = v72;
      *uint64_t v72 = (CGImage *)v28;
      *((unsigned char *)v35 + 8) = v31;
      *((_OWORD *)v35 + 1) = v69;
      v35[4] = v29;
      *((unsigned char *)v35 + 40) = v30;
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v39 = v74 + 8;
      int v38 = *(void (**)(char *, uint64_t))(v74 + 8);
      uint64_t v40 = v70;
      v38((char *)v75, v70);
      if (v19)
      {
        uint64_t v75 = v38;
        uint64_t v74 = v39;
        uint64_t v41 = *(void (**)(void **__return_ptr, char *))(*(void *)v19 + 88);
        swift_retain();
        long long v42 = v71;
        long long v43 = v73;
        v41(&v77, v71);
        if (v43)
        {
          v75(v42, v40);
          return swift_release();
        }
        else
        {
          uint64_t v52 = v77;
          uint64_t v53 = v78;
          uint64_t v54 = (char)v79;
          LODWORD(v73) = v79;
          long long v55 = v69;
          v67(v69, v42, v40);
          uint64_t v56 = v52;
          double Width = (double)(uint64_t)CGImageGetWidth(v56);
          Height = CGImageGetHeight(v56);
          *(void *)&int v84 = v56;
          BYTE8(v84) = 0;
          uint64_t v85 = v53;
          uint64_t v86 = Width;
          uint64_t v87 = (double)Height;
          uint64_t v88 = v54;
          swift_retain();
          long long v59 = v24;
          swift_retain_n();
          long long v60 = v68;
          os_unfair_lock_lock(v68);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v77 = *(void **)(v59 + 40);
          *(void *)(v59 + 40) = 0x8000000000000000;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v84, v55, isUniquelyReferenced_nonNull_native);
          *(void *)(v59 + 40) = v77;
          swift_bridgeObjectRelease();
          uint64_t v62 = (uint64_t (*)(char *, uint64_t))v75;
          v75((char *)v55, v40);
          os_unfair_lock_unlock(v60);
          swift_release();
          swift_release_n();
          uint64_t v63 = v56;
          uint64_t v64 = (double)(uint64_t)CGImageGetWidth(v63);
          uint64_t v65 = CGImageGetHeight(v63);

          swift_release();
          uint64_t v66 = v72;
          *uint64_t v72 = v56;
          *((unsigned char *)v66 + 8) = 0;
          v66[2] = v53;
          *((double *)v66 + 3) = v64;
          *((double *)v66 + 4) = (double)v65;
          *((unsigned char *)v66 + 40) = v73;
          return v62(v71, v40);
        }
      }
      else
      {
        lazy protocol witness table accessor for type NamedImage.Errors and conformance NamedImage.Errors();
        swift_allocError();
        *int v51 = 1;
        swift_willThrow();
        return ((uint64_t (*)(char *, uint64_t))v38)(v71, v40);
      }
    }
  }
  else
  {
    outlined init with take of NamedImage.BitmapKey((uint64_t)v17, (uint64_t)v14, type metadata accessor for NamedImage.BitmapKey);
    uint64_t v36 = (void *)*((void *)v14 + 4);
    v76[1] = v19;
    v76[2] = (void *)v18;
    v76[0] = v36;
    NamedImage.Cache.subscript.getter((uint64_t)v14, v76, (uint64_t)&v77);
    if (v83 == 3)
    {
      lazy protocol witness table accessor for type NamedImage.Errors and conformance NamedImage.Errors();
      swift_allocError();
      *int v37 = 0;
      swift_willThrow();
      return outlined destroy of NamedImage.BitmapKey((uint64_t)v14, type metadata accessor for NamedImage.BitmapKey);
    }
    else
    {
      long long v45 = v81;
      uint64_t v44 = v82;
      long long v46 = v80;
      uint64_t v47 = v79;
      uint64_t v49 = (CGImage *)v77;
      uint64_t v48 = (char)v78;
      uint64_t result = outlined destroy of NamedImage.BitmapKey((uint64_t)v14, type metadata accessor for NamedImage.BitmapKey);
      int v50 = v72;
      *uint64_t v72 = v49;
      *((unsigned char *)v50 + 8) = v48;
      long long v50[2] = v47;
      v50[3] = v45;
      v50[4] = v44;
      *((unsigned char *)v50 + 40) = v46;
    }
  }
  return result;
}

uint64_t type metadata accessor for NamedImage.Key(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for NamedImage.Key);
}

uint64_t (*NamedImage.VectorKey.catalogKey.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*NamedImage.VectorKey.name.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*NamedImage.VectorKey.scale.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void NamedImage.VectorKey.layoutDirection.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 32);
}

unsigned char *NamedImage.VectorKey.layoutDirection.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 32) = *result;
  return result;
}

uint64_t (*NamedImage.VectorKey.layoutDirection.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t NamedImage.VectorKey.locale.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for NamedImage.VectorKey(0) + 32);
  uint64_t v4 = type metadata accessor for Locale();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t NamedImage.VectorKey.locale.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for NamedImage.VectorKey(0) + 32);
  uint64_t v4 = type metadata accessor for Locale();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);

  return v5(v3, a1, v4);
}

uint64_t (*NamedImage.VectorKey.locale.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double NamedImage.VectorKey.weight.getter()
{
  return *(double *)(v0 + *(int *)(type metadata accessor for NamedImage.VectorKey(0) + 36));
}

uint64_t NamedImage.VectorKey.weight.setter(double a1)
{
  uint64_t result = type metadata accessor for NamedImage.VectorKey(0);
  *(double *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*NamedImage.VectorKey.weight.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t NamedImage.VectorKey.imageScale.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = type metadata accessor for NamedImage.VectorKey(0);
  *a1 = *(unsigned char *)(v1 + *(int *)(result + 40));
  return result;
}

uint64_t NamedImage.VectorKey.imageScale.setter(char *a1)
{
  char v2 = *a1;
  uint64_t result = type metadata accessor for NamedImage.VectorKey(0);
  *(unsigned char *)(v1 + *(int *)(result + 40)) = v2;
  return result;
}

uint64_t (*NamedImage.VectorKey.imageScale.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double NamedImage.VectorKey.pointSize.getter()
{
  return *(double *)(v0 + *(int *)(type metadata accessor for NamedImage.VectorKey(0) + 44));
}

uint64_t NamedImage.VectorKey.pointSize.setter(double a1)
{
  uint64_t result = type metadata accessor for NamedImage.VectorKey(0);
  *(double *)(v1 + *(int *)(result + 44)) = a1;
  return result;
}

uint64_t (*NamedImage.VectorKey.pointSize.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

id NamedImage.VectorKey.location.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void **)(v1 + *(int *)(type metadata accessor for NamedImage.VectorKey(0) + 48));
  *a1 = v3;

  return outlined copy of Image.Location(v3);
}

void NamedImage.VectorKey.location.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(int *)(type metadata accessor for NamedImage.VectorKey(0) + 48);
  outlined consume of Image.Location(*(id *)(v1 + v3));
  *(void *)(v1 + v3) = v2;
}

uint64_t (*NamedImage.VectorKey.location.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t NamedImage.VectorKey.idiom.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for NamedImage.VectorKey(0) + 52));
}

uint64_t NamedImage.VectorKey.idiom.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for NamedImage.VectorKey(0);
  *(void *)(v1 + *(int *)(result + 52)) = a1;
  return result;
}

uint64_t (*NamedImage.VectorKey.idiom.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

unsigned char *Image.HashableScale.init(_:)@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *result;
  return result;
}

BOOL static Image.HashableScale.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int NamedImage.VectorKey.hashValue.getter()
{
  return NamedImage.VectorKey.hashValue.getter((void (*)(unsigned char *))NamedImage.VectorKey.hash(into:));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NamedImage.VectorKey(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance NamedImage.VectorKey(a1, a2, (void (*)(unsigned char *))NamedImage.VectorKey.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NamedImage.VectorKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance NamedImage.VectorKey(a1, a2, a3, (void (*)(unsigned char *))NamedImage.VectorKey.hash(into:));
}

void NamedImage.BitmapKey.catalogKey.getter(unsigned char *a1@<X8>)
{
  char v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
}

unsigned char *NamedImage.BitmapKey.catalogKey.setter(unsigned char *result)
{
  char v2 = result[1];
  *uint64_t v1 = *result;
  v1[1] = v2;
  return result;
}

uint64_t (*NamedImage.BitmapKey.catalogKey.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t NamedImage.BitmapKey.name.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NamedImage.BitmapKey.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 8) = a1;
  *(void *)(v2 + 16) = a2;
  return result;
}

uint64_t (*NamedImage.BitmapKey.name.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double NamedImage.BitmapKey.scale.getter()
{
  return *(double *)(v0 + 24);
}

void NamedImage.BitmapKey.scale.setter(double a1)
{
  *(double *)(v1 + 24) = a1;
}

uint64_t (*NamedImage.BitmapKey.scale.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

id NamedImage.BitmapKey.location.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void **)(v1 + 32);
  *a1 = v2;
  return outlined copy of Image.Location(v2);
}

void NamedImage.BitmapKey.location.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  outlined consume of Image.Location(*(id *)(v1 + 32));
  *(void *)(v1 + 32) = v2;
}

uint64_t (*NamedImage.BitmapKey.location.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void NamedImage.BitmapKey.layoutDirection.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 40);
}

unsigned char *NamedImage.BitmapKey.layoutDirection.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 40) = *result;
  return result;
}

uint64_t (*NamedImage.BitmapKey.layoutDirection.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t NamedImage.BitmapKey.locale.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for NamedImage.BitmapKey(0) + 36);
  uint64_t v4 = type metadata accessor for Locale();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t NamedImage.BitmapKey.locale.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for NamedImage.BitmapKey(0) + 36);
  uint64_t v4 = type metadata accessor for Locale();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);

  return v5(v3, a1, v4);
}

uint64_t (*NamedImage.BitmapKey.locale.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t NamedImage.BitmapKey.gamut.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = type metadata accessor for NamedImage.BitmapKey(0);
  *a1 = *(unsigned char *)(v1 + *(int *)(result + 40));
  return result;
}

uint64_t NamedImage.BitmapKey.gamut.setter(char *a1)
{
  char v2 = *a1;
  uint64_t result = type metadata accessor for NamedImage.BitmapKey(0);
  *(unsigned char *)(v1 + *(int *)(result + 40)) = v2;
  return result;
}

uint64_t (*NamedImage.BitmapKey.gamut.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t NamedImage.BitmapKey.idiom.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for NamedImage.BitmapKey(0) + 44));
}

uint64_t NamedImage.BitmapKey.idiom.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for NamedImage.BitmapKey(0);
  *(void *)(v1 + *(int *)(result + 44)) = a1;
  return result;
}

uint64_t (*NamedImage.BitmapKey.idiom.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t NamedImage.BitmapKey.subtype.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for NamedImage.BitmapKey(0) + 48));
}

uint64_t NamedImage.BitmapKey.subtype.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for NamedImage.BitmapKey(0);
  *(void *)(v1 + *(int *)(result + 48)) = a1;
  return result;
}

uint64_t (*NamedImage.BitmapKey.subtype.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t NamedImage.BitmapKey.horizontalSizeClass.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NamedImage.BitmapKey(0) + 52));
}

uint64_t NamedImage.BitmapKey.horizontalSizeClass.setter(char a1)
{
  uint64_t result = type metadata accessor for NamedImage.BitmapKey(0);
  *(unsigned char *)(v1 + *(int *)(result + 52)) = a1;
  return result;
}

uint64_t (*NamedImage.BitmapKey.horizontalSizeClass.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t NamedImage.BitmapKey.verticalSizeClass.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NamedImage.BitmapKey(0) + 56));
}

uint64_t NamedImage.BitmapKey.verticalSizeClass.setter(char a1)
{
  uint64_t result = type metadata accessor for NamedImage.BitmapKey(0);
  *(unsigned char *)(v1 + *(int *)(result + 56)) = a1;
  return result;
}

uint64_t (*NamedImage.BitmapKey.verticalSizeClass.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t NamedImage.BitmapKey.init(catalogKey:name:scale:location:layoutDirection:locale:gamut:idiom:subtype:horizontalSizeClass:verticalSizeClass:)@<X0>(unsigned char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, char *a5@<X4>, uint64_t a6@<X5>, char *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, uint64_t a11, char a12, char a13)
{
  char v16 = a1[1];
  uint64_t v17 = *a4;
  char v18 = *a5;
  char v19 = *a7;
  *(unsigned char *)a9 = *a1;
  *(unsigned char *)(a9 + 1) = v16;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = a3;
  *(double *)(a9 + 24) = a10;
  *(void *)(a9 + 32) = v17;
  *(unsigned char *)(a9 + 40) = v18;
  id v20 = (int *)type metadata accessor for NamedImage.BitmapKey(0);
  uint64_t v21 = a9 + v20[9];
  uint64_t v22 = type metadata accessor for Locale();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 32))(v21, a6, v22);
  *(unsigned char *)(a9 + v20[10]) = v19;
  *(void *)(a9 + v20[11]) = a8;
  *(void *)(a9 + v20[12]) = a11;
  *(unsigned char *)(a9 + v20[13]) = a12;
  *(unsigned char *)(a9 + v20[14]) = a13;
  return result;
}

void NamedImage.BitmapKey.hash(into:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::UInt v6 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v6);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if ((*((void *)v0 + 3) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v7 = *((void *)v0 + 3);
  }
  else {
    Swift::UInt64 v7 = 0;
  }
  Hasher._combine(_:)(v7);
  uint64_t v8 = (void *)*((void *)v0 + 4);
  if (v8)
  {
    if (v8 != (void *)1)
    {
      Hasher._combine(_:)(0);
      id v10 = objc_msgSend(v8, sel_bundleURL);
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      URL.hash(into:)();
      outlined consume of Image.Location(v8);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      outlined consume of Image.Location(v8);
      goto LABEL_10;
    }
    Swift::UInt v9 = 2;
  }
  else
  {
    Swift::UInt v9 = 1;
  }
  Hasher._combine(_:)(v9);
LABEL_10:
  Hasher._combine(_:)(v1[40]);
  uint64_t v11 = (int *)type metadata accessor for NamedImage.BitmapKey(0);
  type metadata accessor for Locale();
  lazy protocol witness table accessor for type Locale and conformance Locale(&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x263F07690]);
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(v1[v11[10]]);
  Hasher._combine(_:)(*(void *)&v1[v11[11]]);
  Hasher._combine(_:)(*(void *)&v1[v11[12]]);
  Hasher._combine(_:)(v1[v11[13]]);
  Hasher._combine(_:)(v1[v11[14]]);
}

Swift::Int NamedImage.BitmapKey.hashValue.getter()
{
  return NamedImage.VectorKey.hashValue.getter((void (*)(unsigned char *))NamedImage.BitmapKey.hash(into:));
}

Swift::Int NamedImage.VectorKey.hashValue.getter(void (*a1)(unsigned char *))
{
  Hasher.init(_seed:)();
  a1(v3);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NamedImage.BitmapKey(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance NamedImage.VectorKey(a1, a2, (void (*)(unsigned char *))NamedImage.BitmapKey.hash(into:));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NamedImage.VectorKey(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *))
{
  Hasher.init(_seed:)();
  a3(v5);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NamedImage.BitmapKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance NamedImage.VectorKey(a1, a2, a3, (void (*)(unsigned char *))NamedImage.BitmapKey.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NamedImage.VectorKey(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *))
{
  Hasher.init(_seed:)();
  a4(v6);
  return Hasher._finalize()();
}

id NamedImage.BitmapInfo.contents.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void **)v1;
  *(void *)a1 = *(void *)v1;
  char v3 = *(unsigned char *)(v1 + 8);
  *(unsigned char *)(a1 + 8) = v3;
  return outlined copy of GraphicsImage.Contents(v2, v3);
}

void NamedImage.BitmapInfo.contents.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char v3 = *((unsigned char *)a1 + 8);
  outlined consume of GraphicsImage.Contents(*(void **)v1, *(unsigned char *)(v1 + 8));
  *(void *)uint64_t v1 = v2;
  *(unsigned char *)(v1 + 8) = v3;
}

uint64_t (*NamedImage.BitmapInfo.contents.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double NamedImage.BitmapInfo.scale.getter()
{
  return *(double *)(v0 + 16);
}

void NamedImage.BitmapInfo.scale.setter(double a1)
{
  *(double *)(v1 + 16) = a1;
}

uint64_t (*NamedImage.BitmapInfo.scale.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t NamedImage.BitmapInfo.orientation.getter()
{
  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t NamedImage.BitmapInfo.orientation.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 24) = result;
  return result;
}

uint64_t (*NamedImage.BitmapInfo.orientation.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double NamedImage.BitmapInfo.unrotatedPixelSize.getter()
{
  return *(double *)(v0 + 32);
}

void NamedImage.BitmapInfo.unrotatedPixelSize.setter(double a1, double a2)
{
  *(double *)(v2 + 32) = a1;
  *(double *)(v2 + 40) = a2;
}

uint64_t (*NamedImage.BitmapInfo.unrotatedPixelSize.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void NamedImage.BitmapInfo.renderingMode.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 48);
}

unsigned char *NamedImage.BitmapInfo.renderingMode.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 48) = *result;
  return result;
}

uint64_t (*NamedImage.BitmapInfo.renderingMode.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

__n128 NamedImage.BitmapInfo.resizingInfo.getter@<Q0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 88);
  __n128 result = *(__n128 *)(v1 + 56);
  long long v4 = *(_OWORD *)(v1 + 72);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = v2;
  return result;
}

__n128 NamedImage.BitmapInfo.resizingInfo.setter(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 32);
  __n128 result = *(__n128 *)a1;
  long long v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 56) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 72) = v4;
  *(unsigned char *)(v1 + 88) = v2;
  return result;
}

uint64_t (*NamedImage.BitmapInfo.resizingInfo.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

__n128 NamedImage.BitmapInfo.init(contents:scale:orientation:unrotatedPixelSize:renderingMode:resizingInfo:)@<Q0>(uint64_t a1@<X0>, char a2@<W1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D1>, double a8@<D2>)
{
  char v8 = *(unsigned char *)(a1 + 8);
  char v9 = *a3;
  char v10 = *(unsigned char *)(a4 + 32);
  *(void *)a5 = *(void *)a1;
  *(unsigned char *)(a5 + 8) = v8;
  *(double *)(a5 + 16) = a6;
  *(unsigned char *)(a5 + 24) = a2;
  *(double *)(a5 + 32) = a7;
  *(double *)(a5 + 40) = a8;
  *(unsigned char *)(a5 + 48) = v9;
  __n128 result = *(__n128 *)a4;
  long long v12 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(a5 + 56) = *(_OWORD *)a4;
  *(_OWORD *)(a5 + 72) = v12;
  *(unsigned char *)(a5 + 88) = v10;
  return result;
}

id NamedImage.DecodedInfo.contents.getter@<X0>(uint64_t a1@<X8>)
{
  char v2 = *(void **)v1;
  *(void *)a1 = *(void *)v1;
  char v3 = *(unsigned char *)(v1 + 8);
  *(unsigned char *)(a1 + 8) = v3;
  return outlined copy of GraphicsImage.Contents(v2, v3);
}

void NamedImage.DecodedInfo.contents.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char v3 = *((unsigned char *)a1 + 8);
  outlined consume of GraphicsImage.Contents(*(void **)v1, *(unsigned char *)(v1 + 8));
  *(void *)uint64_t v1 = v2;
  *(unsigned char *)(v1 + 8) = v3;
}

uint64_t (*NamedImage.DecodedInfo.contents.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double NamedImage.DecodedInfo.scale.getter()
{
  return *(double *)(v0 + 16);
}

void NamedImage.DecodedInfo.scale.setter(double a1)
{
  *(double *)(v1 + 16) = a1;
}

uint64_t (*NamedImage.DecodedInfo.scale.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double NamedImage.DecodedInfo.unrotatedPixelSize.getter()
{
  return *(double *)(v0 + 24);
}

void NamedImage.DecodedInfo.unrotatedPixelSize.setter(double a1, double a2)
{
  *(double *)(v2 + 24) = a1;
  *(double *)(v2 + 32) = a2;
}

uint64_t (*NamedImage.DecodedInfo.unrotatedPixelSize.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t NamedImage.DecodedInfo.orientation.getter()
{
  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t NamedImage.DecodedInfo.orientation.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 40) = result;
  return result;
}

uint64_t (*NamedImage.DecodedInfo.orientation.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

BOOL static NamedImage.Errors.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void NamedImage.Errors.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int NamedImage.Errors.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t NamedImage.Cache.archiveDelegate.getter()
{
  return swift_retain();
}

uint64_t NamedImage.Cache.archiveDelegate.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *Swift::UInt v1 = a1;
  return result;
}

uint64_t (*NamedImage.Cache.archiveDelegate.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t property wrapper backing initializer of NamedImage.Cache.data@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  type metadata accessor for AtomicBuffer<NamedImage.Cache.ImageCacheData>(0, &lazy cache variable for type metadata for AtomicBuffer<NamedImage.Cache.ImageCacheData>, (uint64_t)&unk_26FA402C8, (uint64_t (*)(void, uint64_t))type metadata accessor for AtomicBuffer);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  *(void *)(result + 24) = a1;
  *(void *)(result + 32) = a2;
  *(void *)(result + 40) = a3;
  *(void *)(result + 48) = a4;
  *a5 = result;
  return result;
}

uint64_t NamedImage.Cache.init(archiveDelegate:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  type metadata accessor for AtomicBuffer<NamedImage.Cache.ImageCacheData>(0, &lazy cache variable for type metadata for AtomicBuffer<NamedImage.Cache.ImageCacheData>, (uint64_t)&unk_26FA402C8, (uint64_t (*)(void, uint64_t))type metadata accessor for AtomicBuffer);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  uint64_t v5 = MEMORY[0x263F8EE80];
  *(void *)(result + 24) = MEMORY[0x263F8EE80];
  *(void *)(result + 32) = v5;
  *(void *)(result + 40) = v5;
  *(void *)(result + 48) = v5;
  *a2 = a1;
  a2[1] = result;
  return result;
}

id NamedImage.Cache.subscript.getter(void *a1)
{
  type metadata accessor for Text.Style?(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)v52 - v4;
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v63 = *(void (**)(char *, uint64_t))(v6 - 8);
  MEMORY[0x270FA5388](v6);
  char v8 = (char *)v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)v52 - v10;
  MEMORY[0x270FA5388](v12);
  unsigned __int8 v14 = (char *)v52 - v13;
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)v52 - v16;
  uint64_t v19 = *v1;
  char v18 = (os_unfair_lock_s *)v1[1];
  id v20 = objc_msgSend(self, sel_defaultUICatalogForBundle_, a1);
  if (!v20)
  {
    uint64_t v61 = v5;
    uint64_t v62 = v6;
    uint64_t v56 = v18;
    uint64_t v57 = v11;
    long long v55 = v8;
    long long v59 = v14;
    uint64_t v60 = v19;
    uint64_t v22 = v63;
    long long v58 = v17;
    uint64_t v23 = (void *)MEMORY[0x24C522820](0x737465737341, 0xE600000000000000);
    uint64_t v24 = (void *)MEMORY[0x24C522820](7496035, 0xE300000000000000);
    id v25 = objc_msgSend(a1, sel_URLForResource_withExtension_, v23, v24);

    if (v25)
    {
      char v26 = v59;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v27 = v22;
      uint64_t v28 = (void (*)(char *, char *, uint64_t))*((void *)v22 + 4);
      uint64_t v30 = (uint64_t)v61;
      uint64_t v29 = v62;
      v28(v61, v26, v62);
      (*((void (**)(uint64_t, void, uint64_t, uint64_t))v27 + 7))(v30, 0, 1, v29);
      if ((*((unsigned int (**)(uint64_t, uint64_t, uint64_t))v27 + 6))(v30, 1, v29) != 1)
      {
        char v31 = v58;
        v28(v58, (char *)v30, v29);
        long long v32 = (void (*)(uint64_t, char *, uint64_t))*((void *)v27 + 2);
        uint64_t v33 = (uint64_t)v57;
        v52[1] = (char *)v27 + 16;
        uint64_t v53 = v32;
        v32((uint64_t)v57, v31, v29);
        uint64_t v34 = v56;
        uint64_t v35 = v56 + 4;
        swift_retain();
        swift_retain_n();
        os_unfair_lock_lock(v34 + 4);
        uint64_t v36 = *(void *)&v34[8]._os_unfair_lock_opaque;
        int v38 = v34 + 12;
        uint64_t v37 = *(void *)&v34[12]._os_unfair_lock_opaque;
        uint64_t v61 = *(char **)&v34[6]._os_unfair_lock_opaque;
        swift_bridgeObjectRetain();
        uint64_t v54 = v36;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        os_unfair_lock_unlock(v34 + 4);
        swift_release();
        swift_release_n();
        if (*(void *)(v37 + 16))
        {
          unint64_t v39 = specialized __RawDictionaryStorage.find<A>(_:)(v33);
          uint64_t v40 = (uint64_t)v55;
          if (v41)
          {
            outlined init with copy of NamedImage.Cache.WeakCatalog(*(void *)(v37 + 56) + 8 * v39, (uint64_t)&v64);
            char v42 = 0;
          }
          else
          {
            uint64_t v64 = 0;
            char v42 = 1;
          }
        }
        else
        {
          uint64_t v64 = 0;
          char v42 = 1;
          uint64_t v40 = (uint64_t)v55;
        }
        char v65 = v42;
        uint64_t v44 = (void (*)(char *, uint64_t))*((void *)v27 + 1);
        v44(v57, v29);
        v52[0] = v38;
        if (v65)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          _sypSgWOhTm_10((uint64_t)&v64, (unint64_t *)&lazy cache variable for type metadata for NamedImage.Cache.WeakCatalog?, (uint64_t)&type metadata for NamedImage.Cache.WeakCatalog);
        }
        else
        {
          uint64_t v21 = MEMORY[0x24C527E00](&v64);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          _sypSgWOhTm_10((uint64_t)&v64, (unint64_t *)&lazy cache variable for type metadata for NamedImage.Cache.WeakCatalog?, (uint64_t)&type metadata for NamedImage.Cache.WeakCatalog);
          if (v21)
          {
            v44(v58, v29);
            return (id)v21;
          }
        }
        uint64_t v63 = v44;
        swift_retain();
        long long v45 = v56;
        swift_retain_n();
        os_unfair_lock_lock(v35);
        uint64_t v46 = *(void *)&v45[12]._os_unfair_lock_opaque;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        os_unfair_lock_unlock(v35);
        swift_release();
        swift_release_n();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v47 = specialized _NativeDictionary.filter(_:)(v46);
        uint64_t v48 = v58;
        swift_bridgeObjectRelease();
        swift_retain();
        swift_retain_n();
        os_unfair_lock_lock(v35);
        *(void *)&v45[12]._os_unfair_lock_opaque = v47;
        swift_bridgeObjectRelease();
        os_unfair_lock_unlock(v35);
        swift_release();
        swift_release_n();
        v53(v40, v48, v29);
        id v49 = objc_allocWithZone(MEMORY[0x263F38378]);
        id v50 = @nonobjc CUICatalog.init(url:)(v40);
        uint64_t v21 = (uint64_t)v50;
        if (v50)
        {
          uint64_t v51 = (uint64_t)v59;
          v53((uint64_t)v59, v48, v29);
          swift_unknownObjectWeakInit();
          char v65 = 0;
          swift_retain();
          swift_retain_n();
          os_unfair_lock_lock(v35);
          specialized Dictionary.subscript.setter((uint64_t)&v64, v51);
          os_unfair_lock_unlock(v35);
          swift_release();
          swift_release_n();
          v63(v48, v29);
          return (id)v21;
        }
        v63(v48, v29);
        return 0;
      }
    }
    else
    {
      uint64_t v30 = (uint64_t)v61;
      (*((void (**)(char *, uint64_t, uint64_t, uint64_t))v22 + 7))(v61, 1, 1, v62);
    }
    outlined destroy of Text.Style?(v30, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x263F06EA8]);
    return 0;
  }
  return v20;
}

uint64_t static NamedImage.sharedCache.getter@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for sharedCache != -1) {
    swift_once();
  }
  uint64_t v2 = unk_26B0EE920;
  *a1 = static NamedImage.sharedCache;
  a1[1] = v2;
  swift_retain();

  return swift_retain();
}

uint64_t static Image._mainNamedBundle.getter()
{
  return 0;
}

BOOL Image.Location.supportsNonVectorImages.getter()
{
  return *v0 > 1uLL;
}

uint64_t Image.Location.findShapeAndFillVariantName<A>(_:base:body:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void (*a4)(uint64_t, uint64_t)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X8>)
{
  uint64_t v65 = a5;
  uint64_t v66 = a4;
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v58 = *(void *)(v13 - 8);
  uint64_t v59 = v13;
  MEMORY[0x270FA5388](v13);
  uint64_t v57 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v56 - v16;
  uint64_t v63 = a6;
  uint64_t v64 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v56 = (char *)&v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v56 - v21;
  unsigned __int8 v23 = *a1;
  unsigned __int8 v24 = a1[1];
  uint64_t v25 = *v7;
  LOBYTE(v69) = *a1;
  BYTE1(v69) = v24;
  uint64_t v60 = a2;
  uint64_t v61 = (uint64_t)a3;
  v26._countAndFlagsBits = a2;
  v26._object = a3;
  Swift::String_optional v27 = SymbolVariants.shapeVariantName(name:)(v26);
  uint64_t v62 = a7;
  if (v27.value._object)
  {
    uint64_t v69 = v25;
    uint64_t v28 = Image.Location.aliasedName(_:)(v27.value._countAndFlagsBits, (uint64_t)v27.value._object);
    uint64_t v30 = v29;
    swift_bridgeObjectRelease();
    uint64_t v69 = v25;
    LOBYTE(v67) = v23;
    BYTE1(v67) = v24;
    uint64_t v31 = Image.Location.fillVariant(_:name:)((unsigned __int8 *)&v67, v28, v30);
    if (v32)
    {
      uint64_t v33 = v31;
      uint64_t v34 = v32;
      swift_bridgeObjectRelease();
      uint64_t v28 = v33;
      uint64_t v30 = v34;
    }
    uint64_t v35 = v63;
    uint64_t v36 = v64;
    v66(v28, v30);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v17, 1, v35) != 1)
    {
      id v50 = *(void (**)(char *, char *, uint64_t))(v36 + 32);
      v50(v22, v17, v35);
      uint64_t v51 = v62;
      v50(v62, v22, v35);
      return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v51, 0, 1, v35);
    }
    (*(void (**)(char *, uint64_t))(v58 + 8))(v17, v59);
  }
  uint64_t v69 = v25;
  v68[0] = v23;
  v68[1] = v24;
  uint64_t v67 = v25;
  uint64_t v38 = v60;
  uint64_t v37 = v61;
  uint64_t v39 = Image.Location.aliasedName(_:)(v60, v61);
  uint64_t v41 = Image.Location.fillVariant(_:name:)(v68, v39, v40);
  uint64_t v43 = v42;
  swift_bridgeObjectRelease();
  uint64_t v44 = (void (*)(uint64_t))v66;
  if (!v43)
  {
LABEL_9:
    uint64_t v69 = v25;
    uint64_t v48 = Image.Location.aliasedName(_:)(v38, v37);
    v44(v48);
    return swift_bridgeObjectRelease();
  }
  long long v45 = v57;
  v66(v41, v43);
  swift_bridgeObjectRelease();
  uint64_t v46 = v63;
  uint64_t v47 = v64;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v45, 1, v63) == 1)
  {
    (*(void (**)(char *, uint64_t))(v58 + 8))(v45, v59);
    goto LABEL_9;
  }
  uint64_t v52 = *(void (**)(char *, char *, uint64_t))(v47 + 32);
  uint64_t v53 = v56;
  v52(v56, v45, v46);
  uint64_t v54 = v46;
  long long v55 = v62;
  v52(v62, v53, v54);
  return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v47 + 56))(v55, 0, 1, v54);
}

uint64_t Image.Location.findName<A>(_:base:body:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void (*a4)(uint64_t, uint64_t)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X8>)
{
  uint64_t v15 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v30 - v18;
  char v20 = *a1;
  uint64_t v21 = *v7;
  if ((*a1 & 4) != 0) {
    char v22 = 3;
  }
  else {
    char v22 = a1[1];
  }
  if ((v20 & 4) != 0) {
    char v23 = ((v20 & 1) == 0) | v20 & 0xFB;
  }
  else {
    char v23 = v20;
  }
  if ((v23 & 2) == 0) {
    goto LABEL_10;
  }
  uint64_t v31 = v17;
  uint64_t v32 = v16;
  uint64_t v35 = a7;
  uint64_t v36 = a2;
  uint64_t v38 = 0x6873616C732ELL;
  unint64_t v39 = 0xE600000000000000;
  uint64_t v33 = a2;
  uint64_t v34 = a3;
  uint64_t v37 = a3;
  uint64_t v24 = v21;
  swift_bridgeObjectRetain();
  uint64_t v36 = String.init<A>(_:)();
  uint64_t v37 = v25;
  String.append<A>(contentsOf:)();
  uint64_t v26 = v36;
  uint64_t v30 = v24;
  uint64_t v38 = v24;
  LOBYTE(v36) = v23;
  BYTE1(v36) = v22;
  Image.Location.findShapeAndFillVariantName<A>(_:base:body:)((unsigned __int8 *)&v36, v26, v37, a4, a5, a6, v19);
  swift_bridgeObjectRelease();
  uint64_t v27 = *(void *)(a6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v19, 1, a6) == 1)
  {
    (*(void (**)(char *, uint64_t))(v31 + 8))(v19, v32);
    a3 = v34;
    a7 = v35;
    a2 = v33;
    uint64_t v21 = v30;
LABEL_10:
    uint64_t v38 = v21;
    LOBYTE(v36) = v23;
    BYTE1(v36) = v22;
    return Image.Location.findShapeAndFillVariantName<A>(_:base:body:)((unsigned __int8 *)&v36, a2, a3, a4, a5, a6, a7);
  }
  uint64_t v29 = v35;
  (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v35, v19, a6);
  return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v29, 0, 1, a6);
}

uint64_t static Image.Location.systemAssetManager.getter@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for systemAssetManager != -1) {
    swift_once();
  }
  uint64_t v2 = (void *)static Image.Location.systemAssetManager;
  uint64_t v3 = off_26B0EE3B8;
  uint64_t v4 = off_26B0EE3C0;
  uint64_t v5 = off_26B0EE3C8;
  *a1 = static Image.Location.systemAssetManager;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  id v6 = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t static Image.Location.privateSystemAssetManager.getter@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for privateSystemAssetManager != -1) {
    swift_once();
  }
  uint64_t v2 = (void *)static Image.Location.privateSystemAssetManager;
  uint64_t v3 = off_26B0EB010;
  uint64_t v4 = off_26B0EB018;
  uint64_t v5 = off_26B0EB020;
  *a1 = static Image.Location.privateSystemAssetManager;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  id v6 = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

void Image.Location.hash(into:)()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *v0;
  if (!*v0)
  {
    Swift::UInt v6 = 1;
    goto LABEL_5;
  }
  if (v5 == (void *)1)
  {
    Swift::UInt v6 = 2;
LABEL_5:
    Hasher._combine(_:)(v6);
    return;
  }
  Hasher._combine(_:)(0);
  id v7 = objc_msgSend(v5, sel_bundleURL);
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  URL.hash(into:)();
  outlined consume of Image.Location(v5);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

Swift::Int Image.Location.hashValue.getter()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *v0;
  Hasher.init(_seed:)();
  if (v5)
  {
    if (v5 != (void *)1)
    {
      Hasher._combine(_:)(0);
      id v7 = objc_msgSend(v5, sel_bundleURL);
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      URL.hash(into:)();
      outlined consume of Image.Location(v5);
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      return Hasher._finalize()();
    }
    Swift::UInt v6 = 2;
  }
  else
  {
    Swift::UInt v6 = 1;
  }
  Hasher._combine(_:)(v6);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Image.Location()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)();
  uint64_t v5 = *v0;
  if (*v0)
  {
    if (v5 != (void *)1)
    {
      Hasher._combine(_:)(0);
      id v7 = objc_msgSend(v5, sel_bundleURL);
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      URL.hash(into:)();
      outlined consume of Image.Location(v5);
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      return Hasher._finalize()();
    }
    Swift::UInt v6 = 2;
  }
  else
  {
    Swift::UInt v6 = 1;
  }
  Hasher._combine(_:)(v6);
  return Hasher._finalize()();
}

uint64_t Image.init(_:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  type metadata accessor for LocalizedTextStorage();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  *(unsigned char *)(v6 + 32) = 0;
  uint64_t v7 = MEMORY[0x263F8EE78];
  *(void *)(v6 + 40) = MEMORY[0x263F8EE78];
  *(void *)(v6 + 48) = 0;
  *(void *)(v6 + 56) = 0;
  *(void *)(v6 + 64) = a3;
  if (a3)
  {
    swift_bridgeObjectRetain();
    id v8 = a3;
  }
  else
  {
    uint64_t v9 = self;
    swift_bridgeObjectRetain();
    id v8 = objc_msgSend(v9, sel_mainBundle);
  }
  type metadata accessor for ImageProviderBox<Image.NamedImageProvider>(0, &lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (void (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a1;
  *(void *)(v10 + 24) = a2;
  *(_DWORD *)(v10 + 32) = 0;
  *(unsigned char *)(v10 + 36) = 1;
  *(void *)(v10 + 40) = v8;
  *(void *)(v10 + 48) = 2;
  *(void *)(v10 + 56) = v6;
  *(_OWORD *)(v10 + 64) = xmmword_24619B550;
  *(void *)(v10 + 80) = v7;
  *(unsigned char *)(v10 + 88) = 0;
  id v11 = a3;
  return v10;
}

uint64_t Image.init(_:bundle:label:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  id v11 = a3;
  if (!a3) {
    id v11 = objc_msgSend(self, sel_mainBundle);
  }
  type metadata accessor for ImageProviderBox<Image.NamedImageProvider>(0, &lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (void (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider);
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  *(void *)(result + 24) = a2;
  *(_DWORD *)(result + 32) = 0;
  *(unsigned char *)(result + 36) = 1;
  *(void *)(result + 40) = v11;
  *(void *)(result + 48) = 2;
  *(void *)(result + 56) = a4;
  *(void *)(result + 64) = a5;
  *(void *)(result + 72) = a6 & 1;
  *(void *)(result + 80) = a7;
  *(unsigned char *)(result + 88) = 0;
  return result;
}

__n128 Image.NamedImageProvider.init(name:value:location:label:decorative:backupLocation:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t *a7@<X6>, uint64_t a8@<X8>)
{
  __n128 result = *(__n128 *)a5;
  long long v9 = *(_OWORD *)(a5 + 16);
  *(_OWORD *)(a8 + 40) = *(_OWORD *)a5;
  uint64_t v10 = *a4;
  uint64_t v11 = *a7;
  *(void *)a8 = a1;
  *(void *)(a8 + 8) = a2;
  *(_DWORD *)(a8 + 16) = a3;
  *(unsigned char *)(a8 + 20) = BYTE4(a3) & 1;
  *(void *)(a8 + 24) = v10;
  *(void *)(a8 + 32) = v11;
  *(_OWORD *)(a8 + 56) = v9;
  *(unsigned char *)(a8 + 72) = a6;
  return result;
}

double Image.init(decorative:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  if (!a3) {
    id v3 = objc_msgSend(self, sel_mainBundle);
  }
  type metadata accessor for ImageProviderBox<Image.NamedImageProvider>(0, &lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (void (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  *(_DWORD *)(v6 + 32) = 0;
  *(unsigned char *)(v6 + 36) = 1;
  *(void *)(v6 + 40) = v3;
  *(void *)(v6 + 48) = 2;
  *(void *)(v6 + 56) = 0;
  *(void *)(v6 + 64) = 0;
  *(void *)&double result = 0x1FFFFFFFELL;
  *(_OWORD *)(v6 + 72) = xmmword_24619B540;
  *(unsigned char *)(v6 + 88) = 1;
  return result;
}

uint64_t Image.NamedImageProvider.name.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Image.NamedImageProvider.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*Image.NamedImageProvider.name.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

unint64_t Image.NamedImageProvider.value.getter()
{
  return *(unsigned int *)(v0 + 16) | ((unint64_t)*(unsigned __int8 *)(v0 + 20) << 32);
}

uint64_t Image.NamedImageProvider.value.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 16) = result;
  *(unsigned char *)(v1 + 20) = BYTE4(result) & 1;
  return result;
}

uint64_t (*Image.NamedImageProvider.value.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

id Image.NamedImageProvider.location.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void **)(v1 + 24);
  *a1 = v2;
  return outlined copy of Image.Location(v2);
}

void Image.NamedImageProvider.location.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  outlined consume of Image.Location(*(id *)(v1 + 24));
  *(void *)(v1 + 24) = v2;
}

uint64_t (*Image.NamedImageProvider.location.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

id Image.NamedImageProvider.backupLocation.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void **)(v1 + 32);
  *a1 = v2;
  return outlined copy of Image.Location?(v2);
}

void Image.NamedImageProvider.backupLocation.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  outlined consume of Image.Location?(*(id *)(v1 + 32));
  *(void *)(v1 + 32) = v2;
}

uint64_t (*Image.NamedImageProvider.backupLocation.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t Image.NamedImageProvider.label.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1[5];
  uint64_t v3 = v1[6];
  uint64_t v4 = v1[7];
  uint64_t v5 = v1[8];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return outlined copy of AccessibilityImageLabel?(v2, v3, v4);
}

__n128 Image.NamedImageProvider.label.setter(__n128 *a1)
{
  __n128 v5 = *a1;
  uint64_t v2 = a1[1].n128_i64[0];
  uint64_t v3 = a1[1].n128_i64[1];
  outlined consume of AccessibilityImageLabel?(v1[5], v1[6], v1[7]);
  __n128 result = v5;
  *(__n128 *)(v1 + 5) = v5;
  v1[7] = v2;
  v1[8] = v3;
  return result;
}

uint64_t (*Image.NamedImageProvider.label.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t Image.NamedImageProvider.decorative.getter()
{
  return *(unsigned __int8 *)(v0 + 72);
}

uint64_t Image.NamedImageProvider.decorative.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 72) = result;
  return result;
}

uint64_t (*Image.NamedImageProvider.decorative.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void Image.NamedImageProvider.resolveBitmap(key:info:in:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *(void **)a2;
  char v8 = *(unsigned char *)(a2 + 8);
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v10 = *(void *)(a2 + 32);
  uint64_t v11 = *(void *)(a2 + 40);
  char v12 = *(unsigned char *)(a2 + 48);
  uint64_t v37 = *(void *)(a2 + 64);
  uint64_t v38 = *(void *)(a2 + 56);
  uint64_t v35 = *(void *)(a2 + 80);
  uint64_t v36 = *(void *)(a2 + 72);
  char v33 = *(unsigned char *)(a2 + 24);
  char v34 = *(unsigned char *)(a2 + 88);
  uint64_t v29 = *(void *)(v4 + 48);
  uint64_t v30 = *(void *)(v4 + 40);
  uint64_t v27 = *(void *)(v4 + 64);
  uint64_t v28 = *(void *)(v4 + 56);
  char v31 = *(unsigned char *)(v4 + 72);
  uint64_t v14 = *a3;
  uint64_t v13 = a3[1];
  uint64_t v43 = *a3;
  uint64_t v44 = v13;
  LOBYTE(v40) = v12;
  char v15 = EnvironmentValues.imageIsTemplate(renderingMode:)((unsigned __int8 *)&v40);
  if ((*((unsigned char *)a3 + *(int *)(type metadata accessor for ImageResolutionContext() + 40)) & 4) != 0)
  {
    type metadata accessor for NamedImage.Key(0);
    uint64_t v7 = (void *)swift_allocBox();
    outlined init with copy of NamedImage.Key(a1, v16, type metadata accessor for NamedImage.BitmapKey);
    swift_storeEnumTagMultiPayload();
    char v8 = 5;
  }
  else
  {
    outlined copy of GraphicsImage.Contents(v7, v8);
  }
  uint64_t v43 = (uint64_t)v7;
  if (v15) {
    uint64_t v17 = 0x3F8000003F800000;
  }
  else {
    uint64_t v17 = 0;
  }
  LOBYTE(v44) = v8;
  char v18 = v15 ^ 1;
  uint64_t v45 = v9;
  uint64_t v46 = v10;
  uint64_t v47 = v11;
  char v48 = v33;
  uint64_t v49 = v17;
  uint64_t v50 = v17;
  char v51 = (v15 ^ 1) & 1;
  uint64_t v52 = v38;
  uint64_t v53 = v37;
  uint64_t v54 = v36;
  uint64_t v55 = v35;
  char v56 = v34;
  __int16 v57 = 257;
  char v58 = 3;
  outlined copy of GraphicsImage.Contents?(v7, v8);
  ImageResolutionContext.effectiveAllowedDynamicRange(for:)((uint64_t)&v43, (unsigned __int8 *)&v40);
  char v26 = v40;
  if (v13)
  {
    swift_retain_n();
    swift_retain_n();
    char v19 = specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v14);
    swift_release_n();
    swift_release_n();
  }
  else
  {
    uint64_t v43 = v14;
    uint64_t v44 = 0;
    swift_retain();
    char v19 = specialized static ShouldRedactContentKey.value(in:)(&v43);
    swift_release();
  }
  char v20 = v8;
  uint64_t v21 = (uint64_t)v7;
  if (v19)
  {
    uint64_t v21 = swift_allocObject();
    uint64_t v22 = one-time initialization token for foreground;
    swift_retain();
    swift_retain();
    if (v22 != -1) {
      swift_once();
    }
    uint64_t v43 = v14;
    uint64_t v44 = v13;
    *(float *)(v21 + 16) = (*(float (**)(uint64_t *))(*(void *)static Color.foreground + 104))(&v43);
    *(_DWORD *)(v21 + 20) = v23;
    *(_DWORD *)(v21 + 24) = v25;
    *(float *)(v21 + 28) = v24 * 0.16;
    outlined consume of GraphicsImage.Contents?(v7, v8);
    swift_release();
    swift_release();
    char v20 = 4;
  }
  uint64_t v43 = v21;
  LOBYTE(v44) = v20;
  uint64_t v45 = v9;
  uint64_t v46 = v10;
  uint64_t v47 = v11;
  char v48 = v33;
  uint64_t v49 = v17;
  uint64_t v50 = v17;
  char v51 = v18 & 1;
  uint64_t v52 = v38;
  uint64_t v53 = v37;
  uint64_t v54 = v36;
  uint64_t v55 = v35;
  char v56 = v34;
  __int16 v57 = 257;
  char v58 = v26;
  *(void *)&long long v40 = v30;
  *((void *)&v40 + 1) = v29;
  uint64_t v41 = v28;
  uint64_t v42 = v27;
  unsigned __int8 v39 = 3;
  outlined copy of GraphicsImage.Contents?((id)v21, v20);
  outlined copy of AccessibilityImageLabel?(v30, v29, v28);
  Image.Resolved.init(image:decorative:label:basePlatformItemImage:backgroundShape:backgroundCornerRadius:)(&v43, v31, &v40, 0, &v39, 0.0, 1, a4);
  outlined consume of GraphicsImage.Contents?(v7, v8);

  outlined consume of GraphicsImage.Contents?((void *)v21, v20);
}

uint64_t Image.init(systemName:variableValue:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v7 = a4 & 1;
  if (a4)
  {
    float v8 = 0.0;
  }
  else
  {
    float v6 = *(double *)&a3;
    float v8 = v6;
  }
  type metadata accessor for ImageProviderBox<Image.NamedImageProvider>(0, &lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (void (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a1;
  *(void *)(v9 + 24) = a2;
  *(float *)(v9 + 32) = v8;
  *(unsigned char *)(v9 + 36) = v7;
  *(_OWORD *)(v9 + 40) = xmmword_2461E55C0;
  *(void *)(v9 + 56) = a1;
  *(void *)(v9 + 64) = a2;
  *(_OWORD *)(v9 + 72) = xmmword_24619B530;
  *(unsigned char *)(v9 + 88) = 0;
  swift_bridgeObjectRetain();
  return v9;
}

uint64_t Image.init(_internalSystemName:variableValue:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v7 = a4 & 1;
  if (a4)
  {
    float v8 = 0.0;
  }
  else
  {
    float v6 = *(double *)&a3;
    float v8 = v6;
  }
  type metadata accessor for ImageProviderBox<Image.NamedImageProvider>(0, &lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (void (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a1;
  *(void *)(v9 + 24) = a2;
  *(float *)(v9 + 32) = v8;
  *(unsigned char *)(v9 + 36) = v7;
  *(_OWORD *)(v9 + 40) = xmmword_24619B520;
  *(void *)(v9 + 56) = a1;
  *(void *)(v9 + 64) = a2;
  *(_OWORD *)(v9 + 72) = xmmword_24619B530;
  *(unsigned char *)(v9 + 88) = 0;
  swift_bridgeObjectRetain();
  return v9;
}

uint64_t Image.init(_:variableValue:bundle:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  char v9 = a4 & 1;
  type metadata accessor for LocalizedTextStorage();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a1;
  *(void *)(v10 + 24) = a2;
  *(unsigned char *)(v10 + 32) = 0;
  uint64_t v11 = MEMORY[0x263F8EE78];
  *(void *)(v10 + 40) = MEMORY[0x263F8EE78];
  *(void *)(v10 + 48) = 0;
  *(void *)(v10 + 56) = 0;
  *(void *)(v10 + 64) = a5;
  id v12 = a5;
  swift_bridgeObjectRetain();
  return specialized Image.init(_:variableValue:bundle:label:)(a1, a2, a3, v9, a5, v10, 0, 1, v11);
}

uint64_t Image.init(_:variableValue:bundle:label:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9)
{
  return specialized Image.init(_:variableValue:bundle:label:)(a1, a2, a3, a4 & 1, a5, a6, a7, a8 & 1, a9);
}

double Image.init(decorative:variableValue:bundle:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  id v5 = a5;
  if (!a5) {
    id v5 = objc_msgSend(self, sel_mainBundle);
  }
  int v11 = a4 & 1;
  if (v11)
  {
    float v12 = 0.0;
  }
  else
  {
    float v10 = *(double *)&a3;
    float v12 = v10;
  }
  type metadata accessor for ImageProviderBox<Image.NamedImageProvider>(0, &lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (void (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a1;
  *(void *)(v13 + 24) = a2;
  *(float *)(v13 + 32) = v12;
  *(unsigned char *)(v13 + 36) = v11;
  *(void *)(v13 + 40) = v5;
  *(void *)(v13 + 48) = 2;
  *(void *)(v13 + 56) = 0;
  *(void *)(v13 + 64) = 0;
  *(void *)&double result = 0x1FFFFFFFELL;
  *(_OWORD *)(v13 + 72) = xmmword_24619B540;
  *(unsigned char *)(v13 + 88) = 1;
  return result;
}

uint64_t Image.Location.encode(to:)(uint64_t a1)
{
  uint64_t v4 = v1;
  float v6 = *v4;
  if (*v4)
  {
    if (v6 != (void *)1)
    {
      id v17 = objc_msgSend(v6, sel_bundlePath);
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v15 = v18;

      ProtobufEncoder.encodeVarint(_:)(0xAuLL);
      uint64_t v3 = *(void *)(a1 + 8);
      unint64_t v14 = *(void *)(a1 + 24);
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_17;
      }
      goto LABEL_25;
    }
    ProtobufEncoder.encodeVarint(_:)(0x1AuLL);
    uint64_t v7 = *(void *)(a1 + 8);
    float v8 = *(void **)(a1 + 24);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      float v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
    }
    unint64_t v10 = v8[2];
    unint64_t v9 = v8[3];
    if (v10 >= v9 >> 1) {
      float v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1, v8);
    }
    void v8[2] = v10 + 1;
    v8[v10 + 4] = v7;
    *(void *)(a1 + 24) = v8;
    uint64_t v11 = v7 + 1;
    if (!__OFADD__(v7, 1)) {
      goto LABEL_15;
    }
    __break(1u);
  }
  ProtobufEncoder.encodeVarint(_:)(0x12uLL);
  uint64_t v12 = *(void *)(a1 + 8);
  float v6 = *(void **)(a1 + 24);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    float v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
  }
  unint64_t v14 = v6[2];
  unint64_t v13 = v6[3];
  unint64_t v15 = v14 + 1;
  if (v14 >= v13 >> 1) {
    float v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v13 > 1), v14 + 1, 1, v6);
  }
  v6[2] = v15;
  v6[v14 + 4] = v12;
  *(void *)(a1 + 24) = v6;
  uint64_t v11 = v12 + 1;
  if (!__OFADD__(v12, 1))
  {
LABEL_15:
    *(void *)(a1 + 8) = v11;
    return ProtobufEncoder.endLengthDelimited()();
  }
  __break(1u);
  do
  {
    __break(1u);
LABEL_25:
    unint64_t v14 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v14 + 16) + 1, 1, (void *)v14);
LABEL_17:
    unint64_t v20 = *(void *)(v14 + 16);
    unint64_t v19 = *(void *)(v14 + 24);
    if (v20 >= v19 >> 1) {
      unint64_t v14 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v19 > 1), v20 + 1, 1, (void *)v14);
    }
    *(void *)(v14 + 16) = v20 + 1;
    *(void *)(v14 + 8 * v20 + 32) = v3;
    *(void *)(a1 + 24) = v14;
  }
  while (__OFADD__(v3, 1));
  *(void *)(a1 + 8) = v3 + 1;
  swift_bridgeObjectRetain();
  specialized ProtobufEncoder.encodeAttachedValue<A>(key:data:)(v12, v15, a1, v12, v15);
  swift_bridgeObjectRelease();
  if (!v2) {
    ProtobufEncoder.endLengthDelimited()();
  }
  outlined consume of Image.Location(v6);
  return swift_bridgeObjectRelease();
}

void Image.Location.init(from:)(void *a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v5 = a1[1];
  unint64_t v6 = a1[2];
  if (v5 >= v6)
  {
    a1[3] = 0;
    goto LABEL_4;
  }
  uint64_t v7 = v2;
  uint64_t v8 = 2;
  while (1)
  {
    unint64_t v10 = a1[3];
    if (v10)
    {
      unint64_t v11 = a1[4];
      if (v5 < v11) {
        goto LABEL_14;
      }
      if (v11 < v5) {
        goto LABEL_55;
      }
      a1[3] = 0;
    }
    unint64_t v12 = ProtobufDecoder.decodeVarint()();
    if (v7) {
      goto LABEL_57;
    }
    unint64_t v10 = v12;
    if (v12 < 8) {
      goto LABEL_55;
    }
LABEL_14:
    unint64_t v13 = v10 >> 3;
    if (v10 >> 3 == 3)
    {
      outlined consume of Image.Location?((id)v8);
      switch(v10 & 7)
      {
        case 0uLL:
          ProtobufDecoder.decodeVarint()();
          if (v7) {
            return;
          }
          uint64_t v8 = 1;
          goto LABEL_7;
        case 1uLL:
          unint64_t v25 = a1[1] + 8;
          goto LABEL_38;
        case 2uLL:
          uint64_t v26 = ProtobufDecoder.decodeVarint()();
          if (v7) {
            return;
          }
          if (v26 < 0) {
            goto LABEL_64;
          }
          unint64_t v25 = a1[1] + v26;
LABEL_38:
          if (v6 < v25) {
            goto LABEL_4;
          }
          a1[1] = v25;
          uint64_t v8 = 1;
          break;
        case 5uLL:
          unint64_t v25 = a1[1] + 4;
          goto LABEL_38;
        default:
          goto LABEL_4;
      }
      goto LABEL_7;
    }
    if (v13 == 2)
    {
      outlined consume of Image.Location?((id)v8);
      switch(v10 & 7)
      {
        case 0uLL:
          ProtobufDecoder.decodeVarint()();
          if (v7) {
            return;
          }
          uint64_t v8 = 0;
          goto LABEL_7;
        case 1uLL:
          unint64_t v27 = a1[1] + 8;
          goto LABEL_45;
        case 2uLL:
          uint64_t v28 = ProtobufDecoder.decodeVarint()();
          if (v7) {
            return;
          }
          if (v28 < 0) {
            goto LABEL_65;
          }
          unint64_t v27 = a1[1] + v28;
LABEL_45:
          if (v6 < v27) {
            goto LABEL_4;
          }
          uint64_t v8 = 0;
          a1[1] = v27;
          break;
        case 5uLL:
          unint64_t v27 = a1[1] + 4;
          goto LABEL_45;
        default:
          goto LABEL_4;
      }
      goto LABEL_7;
    }
    if (v13 != 1)
    {
      switch(v10 & 7)
      {
        case 0uLL:
          ProtobufDecoder.decodeVarint()();
          if (v7) {
            goto LABEL_57;
          }
          goto LABEL_7;
        case 1uLL:
          unint64_t v9 = a1[1] + 8;
          if (v6 < v9) {
            goto LABEL_55;
          }
          goto LABEL_6;
        case 2uLL:
          uint64_t v29 = ProtobufDecoder.decodeVarint()();
          if (v7) {
            goto LABEL_57;
          }
          if (v29 < 0) {
            goto LABEL_66;
          }
          unint64_t v9 = a1[1] + v29;
          if (v6 < v9) {
            goto LABEL_55;
          }
LABEL_6:
          a1[1] = v9;
          break;
        case 5uLL:
          unint64_t v9 = a1[1] + 4;
          if (v6 < v9) {
            goto LABEL_55;
          }
          goto LABEL_6;
        default:
          goto LABEL_55;
      }
      goto LABEL_7;
    }
    if ((v10 & 7) != 2) {
      goto LABEL_55;
    }
    ProtobufDecoder.beginMessage()();
    if (v7) {
      goto LABEL_57;
    }
    uint64_t v14 = specialized ProtobufDecoder.decodeAttachedValue<A>(as:generator:)((uint64_t)a1);
    uint64_t v7 = 0;
    uint64_t v16 = (void *)a1[5];
    if (!v16[2]) {
      break;
    }
    uint64_t v17 = v14;
    uint64_t v18 = v15;
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      uint64_t v19 = v16[2];
      if (!v19) {
        goto LABEL_54;
      }
    }
    else
    {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew()(v16);
      uint64_t v19 = v16[2];
      if (!v19)
      {
LABEL_54:
        __break(1u);
LABEL_55:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        goto LABEL_56;
      }
    }
    uint64_t v20 = v19 - 1;
    uint64_t v21 = v16[v20 + 4];
    _OWORD v16[2] = v20;
    a1[5] = v16;
    a1[2] = v21;
    id v22 = objc_allocWithZone(MEMORY[0x263F086E0]);
    swift_bridgeObjectRetain();
    int v23 = (void *)MEMORY[0x24C522820](v17, v18);
    swift_bridgeObjectRelease();
    id v24 = objc_msgSend(v22, sel_initWithPath_, v23);

    if (!v24)
    {
      lazy protocol witness table accessor for type Image.Location.Error and conformance Image.Location.Error();
      swift_allocError();
      *uint64_t v32 = v17;
      v32[1] = v18;
LABEL_56:
      swift_willThrow();
LABEL_57:
      outlined consume of Image.Location?((id)v8);
      return;
    }
    outlined consume of Image.Location?((id)v8);
    swift_bridgeObjectRelease();
    uint64_t v8 = (uint64_t)v24;
LABEL_7:
    unint64_t v5 = a1[1];
    unint64_t v6 = a1[2];
    if (v5 >= v6)
    {
      a1[3] = 0;
      if (v8 != 2)
      {
        *a2 = v8;
        return;
      }
LABEL_4:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      swift_willThrow();
      return;
    }
  }
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
  __break(1u);
  char v33 = specialized _ArrayBuffer._consumeAndCreateNew()(a2);
  uint64_t v34 = v33[2];
  if (!v34)
  {
    __break(1u);
    JUMPOUT(0x245DFAEE0);
  }
  uint64_t v30 = v34 - 1;
  uint64_t v31 = v33[v30 + 4];
  v33[2] = v30;
  outlined consume of Image.Location?((id)v8);
  a1[5] = v33;
  a1[2] = v31;
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance Image.Location.BundlePath(uint64_t a1)
{
  unint64_t v4 = *v1;
  unint64_t v3 = v1[1];
  swift_bridgeObjectRetain();
  specialized ProtobufEncoder.encodeAttachedValue<A>(key:data:)(v4, v3, a1, v4, v3);
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance Image.Location.BundlePath@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized ProtobufDecoder.decodeAttachedValue<A>(as:generator:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance Image.Location(uint64_t a1)
{
  return Image.Location.encode(to:)(a1);
}

void protocol witness for ProtobufDecodableMessage.init(from:) in conformance Image.Location(void *a1@<X0>, uint64_t *a2@<X8>)
{
}

double Font.Weight.glyphContinuousWeight.getter(double a1)
{
  unint64_t v1 = Font.Weight.glyphWeight.getter(a1);
  if (v1 > 9) {
    uint64_t v2 = MEMORY[0x263F38410];
  }
  else {
    uint64_t v2 = qword_2651D5B10[v1];
  }
  return *(double *)v2;
}

double Image.HashableScale.circleDotFillSize(pointSize:weight:)(double a1, double a2)
{
  int v3 = 1 << *v2;
  if ((v3 & 0x52) != 0)
  {
    if (a2 == 0.0)
    {
      double v4 = 99.61;
      return v4 * 0.01 * a1;
    }
    double v5 = 99.61;
    if (a2 < 0.0)
    {
      double v6 = 94.63;
LABEL_15:
      double v4 = v6 + (a2 + 0.8) / 0.8 * (v5 - v6);
      return v4 * 0.01 * a1;
    }
    double v7 = 106.64;
LABEL_19:
    double v4 = v5 + a2 / 0.62 * (v7 - v5);
    return v4 * 0.01 * a1;
  }
  if ((v3 & 9) == 0)
  {
    if (a2 == 0.0)
    {
      double v4 = 127.2;
      return v4 * 0.01 * a1;
    }
    double v5 = 127.2;
    if (a2 < 0.0)
    {
      double v6 = 121.66;
      goto LABEL_15;
    }
    double v7 = 135.89;
    goto LABEL_19;
  }
  if (a2 != 0.0)
  {
    double v5 = 78.86;
    if (a2 < 0.0)
    {
      double v6 = 74.46;
      goto LABEL_15;
    }
    double v7 = 83.98;
    goto LABEL_19;
  }
  double v4 = 78.86;
  return v4 * 0.01 * a1;
}

double Image.HashableScale.maxRadius(diameter:)(double a1)
{
  unsigned int v2 = *v1;
  double v3 = a1 * 0.5;
  BOOL v4 = v2 >= 3;
  unsigned int v5 = v2 - 3;
  if (v4)
  {
    if (v5 >= 3)
    {
      double v10 = 1.1;
      return v3 * v10;
    }
    id v6 = objc_msgSend(self, sel_standardUserDefaults);
    double v7 = (void *)MEMORY[0x24C522820](0xD000000000000018, 0x8000000246221300);
    id v8 = objc_msgSend(v6, sel_valueForKey_, v7);

    if (v8)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v13, 0, sizeof(v13));
    }
    uint64_t v9 = MEMORY[0x263F8EE58] + 8;
    _sypSgWObTm_4((uint64_t)v13, (uint64_t)v14, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8);
    if (v15)
    {
      if (swift_dynamicCast())
      {
        double v10 = v12;
        return v3 * v10;
      }
    }
    else
    {
      _sypSgWOhTm_10((uint64_t)v14, (unint64_t *)&lazy cache variable for type metadata for Any?, v9);
    }
    double v10 = 1.2;
    return v3 * v10;
  }
  return v3;
}

void Image.HashableScale.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int Image.HashableScale.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t closure #1 in closure #1 in RadiusAccumulator.addPath(_:)(float32x2_t *a1, unsigned __int8 a2, float64x2_t *a3)
{
  if (a2 <= 1u)
  {
    float32x2_t v3 = vsub_f32(vmul_n_f32(vcvt_f32_f64(*a3), a1[1].f32[0]), *a1);
    float v4 = vaddv_f32(vmul_f32(v3, v3));
    if (a1[1].f32[1] < v4) {
      a1[1].f32[1] = v4;
    }
  }
  return 1;
}

uint64_t @objc closure #1 in closure #1 in RadiusAccumulator.addPath(_:)(float32x2_t *a1, unsigned __int8 a2, float64x2_t *a3)
{
  return closure #1 in closure #1 in RadiusAccumulator.addPath(_:)(a1, a2, a3) & 1;
}

uint64_t Image.init(uuid:size:label:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7)
{
  uint64_t v14 = type metadata accessor for UUIDImageProvider(0);
  uint64_t v15 = v14 - 8;
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 32))(v17, a1, v18);
  uint64_t v19 = (double *)&v17[*(int *)(v15 + 28)];
  *uint64_t v19 = a6;
  v19[1] = a7;
  uint64_t v20 = &v17[*(int *)(v15 + 32)];
  *(void *)uint64_t v20 = a2;
  *((void *)v20 + 1) = a3;
  *((void *)v20 + 2) = a4;
  *((void *)v20 + 3) = a5;
  type metadata accessor for ImageProviderBox<UUIDImageProvider>();
  uint64_t v21 = swift_allocObject();
  outlined init with take of NamedImage.BitmapKey((uint64_t)v17, v21 + *(void *)(*(void *)v21 + 128), type metadata accessor for UUIDImageProvider);
  return v21;
}

uint64_t Image.ResolvedUUID.init(cgImage:scale:orientation:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>, double a4@<D0>)
{
  *(void *)a3 = result;
  *(double *)(a3 + 8) = a4;
  *(unsigned char *)(a3 + 16) = a2;
  return result;
}

void UUIDImageProvider.resolve(in:)(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v41 = (_OWORD *)*a1;
  uint64_t v42 = v6;
  LOBYTE(v38) = 2;
  char v7 = EnvironmentValues.imageIsTemplate(renderingMode:)((unsigned __int8 *)&v38);
  if ((*((unsigned char *)a1 + *(int *)(type metadata accessor for ImageResolutionContext() + 40)) & 2) != 0)
  {
    type metadata accessor for NamedImage.Key(0);
    id v8 = (_OWORD *)swift_allocBox();
    uint64_t v11 = v10;
    uint64_t v12 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v11, v3, v12);
    swift_storeEnumTagMultiPayload();
    char v9 = 5;
  }
  else
  {
    id v8 = (_OWORD *)swift_allocObject();
    v8[1] = xmmword_2461E55D0;
    char v9 = 4;
  }
  uint64_t v34 = type metadata accessor for UUIDImageProvider(0);
  uint64_t v35 = v3;
  unint64_t v13 = (uint64_t *)(v3 + *(int *)(v34 + 20));
  uint64_t v14 = *v13;
  uint64_t v15 = v13[1];
  if (v7) {
    uint64_t v16 = 0x3F8000003F800000;
  }
  else {
    uint64_t v16 = 0;
  }
  char v17 = v7 ^ 1;
  uint64_t v41 = v8;
  LOBYTE(v42) = v9;
  uint64_t v43 = 0x3FF0000000000000;
  uint64_t v44 = v14;
  uint64_t v45 = v15;
  char v46 = 0;
  uint64_t v47 = v16;
  uint64_t v48 = v16;
  char v49 = (v7 ^ 1) & 1;
  long long v50 = 0u;
  long long v51 = 0u;
  int v52 = 50397442;
  outlined copy of GraphicsImage.Contents?(v8, v9);
  ImageResolutionContext.effectiveAllowedDynamicRange(for:)((uint64_t)&v41, (unsigned __int8 *)&v38);
  char v33 = v38;
  if (v6)
  {
    swift_retain_n();
    swift_retain_n();
    char v18 = specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v5);
    swift_release_n();
    swift_release_n();
  }
  else
  {
    uint64_t v41 = (_OWORD *)v5;
    uint64_t v42 = 0;
    swift_retain();
    char v18 = specialized static ShouldRedactContentKey.value(in:)((uint64_t *)&v41);
    swift_release();
  }
  char v19 = v9;
  uint64_t v20 = (uint64_t)v8;
  if (v18)
  {
    uint64_t v20 = swift_allocObject();
    uint64_t v21 = one-time initialization token for foreground;
    swift_retain();
    swift_retain();
    if (v21 != -1) {
      swift_once();
    }
    uint64_t v41 = (_OWORD *)v5;
    uint64_t v42 = v6;
    *(float *)(v20 + 16) = (*(float (**)(_OWORD **))(*(void *)static Color.foreground + 104))(&v41);
    *(_DWORD *)(v20 + 20) = v22;
    *(_DWORD *)(v20 + 24) = v24;
    *(float *)(v20 + 28) = v23 * 0.16;
    outlined consume of GraphicsImage.Contents?(v8, v9);
    swift_release();
    swift_release();
    char v19 = 4;
  }
  uint64_t v41 = (_OWORD *)v20;
  LOBYTE(v42) = v19;
  uint64_t v43 = 0x3FF0000000000000;
  uint64_t v44 = v14;
  uint64_t v45 = v15;
  char v46 = 0;
  uint64_t v47 = v16;
  uint64_t v48 = v16;
  char v49 = v17 & 1;
  long long v50 = 0u;
  long long v51 = 0u;
  LOWORD(v52) = 258;
  BYTE2(v52) = 1;
  HIBYTE(v52) = v33;
  unint64_t v25 = (uint64_t *)(v35 + *(int *)(v34 + 24));
  uint64_t v26 = *v25;
  uint64_t v27 = v25[1];
  uint64_t v28 = v25[2];
  uint64_t v29 = v25[3];
  uint64_t v30 = v28 & 1;
  if (v29) {
    uint64_t v31 = v26;
  }
  else {
    uint64_t v31 = 0;
  }
  if (v29) {
    uint64_t v32 = v27;
  }
  else {
    uint64_t v32 = 0;
  }
  if (!v29) {
    uint64_t v30 = 0x1FFFFFFFELL;
  }
  *(void *)&long long v38 = v31;
  *((void *)&v38 + 1) = v32;
  uint64_t v39 = v30;
  uint64_t v40 = v29;
  unsigned __int8 v37 = 3;
  outlined copy of GraphicsImage.Contents?((id)v20, v19);
  outlined copy of Text?(v26, v27, v28, v29);
  Image.Resolved.init(image:decorative:label:basePlatformItemImage:backgroundShape:backgroundCornerRadius:)((uint64_t *)&v41, v29 == 0, &v38, 0, &v37, 0.0, 1, a2);
  outlined consume of GraphicsImage.Contents?(v8, v9);

  outlined consume of GraphicsImage.Contents?((void *)v20, v19);
}

uint64_t Image.init(_systemName:colorPalette:)(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  type metadata accessor for ImageProviderBox<Image.NamedImageProvider>(0, &lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (void (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  *(_DWORD *)(v4 + 32) = 0;
  *(unsigned char *)(v4 + 36) = 1;
  *(_OWORD *)(v4 + 40) = xmmword_2461E55C0;
  *(void *)(v4 + 56) = a1;
  *(void *)(v4 + 64) = a2;
  *(_OWORD *)(v4 + 72) = xmmword_24619B530;
  *(unsigned char *)(v4 + 88) = 0;
  type metadata accessor for ImageProviderBox<Image.NamedImageProvider>(0, (unint64_t *)&lazy cache variable for type metadata for ImageProviderBox<Image.RenderingModeProvider>, (void (*)(void))lazy protocol witness table accessor for type Image.RenderingModeProvider and conformance Image.RenderingModeProvider);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(unsigned char *)(v5 + 24) = 1;
  swift_bridgeObjectRetain();
  return v5;
}

uint64_t Image.init(_internalSystemName:colorPalette:)(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  type metadata accessor for ImageProviderBox<Image.NamedImageProvider>(0, &lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (void (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  *(_DWORD *)(v4 + 32) = 0;
  *(unsigned char *)(v4 + 36) = 1;
  *(_OWORD *)(v4 + 40) = xmmword_24619B520;
  *(void *)(v4 + 56) = a1;
  *(void *)(v4 + 64) = a2;
  *(_OWORD *)(v4 + 72) = xmmword_24619B530;
  *(unsigned char *)(v4 + 88) = 0;
  type metadata accessor for ImageProviderBox<Image.NamedImageProvider>(0, (unint64_t *)&lazy cache variable for type metadata for ImageProviderBox<Image.RenderingModeProvider>, (void (*)(void))lazy protocol witness table accessor for type Image.RenderingModeProvider and conformance Image.RenderingModeProvider);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(unsigned char *)(v5 + 24) = 1;
  swift_bridgeObjectRetain();
  return v5;
}

uint64_t NamedImage.Key.encode(to:)(void *a1)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  char v7 = (char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for NamedImage.BitmapKey(0);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for NamedImage.Key(0);
  MEMORY[0x270FA5388](v11);
  unint64_t v13 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of NamedImage.Key(v1, (uint64_t)v13, type metadata accessor for NamedImage.Key);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v13, v4);
    ProtobufEncoder.encodeVarint(_:)(0x12uLL);
    uint64_t v14 = a1[1];
    uint64_t v15 = (void *)a1[3];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15[2] + 1, 1, v15);
    }
    unint64_t v17 = v15[2];
    unint64_t v16 = v15[3];
    uint64_t v10 = (char *)(v17 + 1);
    if (v17 >= v16 >> 1) {
      uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v16 > 1), v17 + 1, 1, v15);
    }
    _OWORD v15[2] = v10;
    v15[v17 + 4] = v14;
    a1[3] = v15;
    if (!__OFADD__(v14, 1))
    {
      a1[1] = v14 + 1;
      UUID.encode(to:)();
      char v18 = (uint64_t (**)(char *, uint64_t))(v5 + 8);
      if (!v2) {
        ProtobufEncoder.endLengthDelimited()();
      }
      return (*v18)(v7, v4);
    }
    __break(1u);
    goto LABEL_18;
  }
  outlined init with take of NamedImage.BitmapKey((uint64_t)v13, (uint64_t)v10, type metadata accessor for NamedImage.BitmapKey);
  ProtobufEncoder.encodeVarint(_:)(0xAuLL);
  char v7 = (char *)a1[1];
  uint64_t v15 = (void *)a1[3];
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
LABEL_18:
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15[2] + 1, 1, v15);
    uint64_t v15 = (void *)result;
  }
  unint64_t v21 = v15[2];
  unint64_t v20 = v15[3];
  if (v21 >= v20 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v20 > 1), v21 + 1, 1, v15);
    uint64_t v15 = (void *)result;
  }
  _OWORD v15[2] = v21 + 1;
  v15[v21 + 4] = v7;
  a1[3] = v15;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
  }
  else
  {
    a1[1] = v7 + 1;
    NamedImage.BitmapKey.encode(to:)(a1);
    if (!v2) {
      ProtobufEncoder.endLengthDelimited()();
    }
    return outlined destroy of NamedImage.BitmapKey((uint64_t)v10, type metadata accessor for NamedImage.BitmapKey);
  }
  return result;
}

uint64_t NamedImage.Key.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v43 = a2;
  type metadata accessor for Text.Style?(0, &lazy cache variable for type metadata for NamedImage.Key?, type metadata accessor for NamedImage.Key, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (uint64_t *)((char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v43 - v9;
  MEMORY[0x270FA5388](v11);
  uint64_t v48 = (uint64_t)&v43 - v12;
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v43 - v14;
  uint64_t v16 = type metadata accessor for NamedImage.Key(0);
  uint64_t v47 = *(void *)(v16 - 8);
  unint64_t v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v47 + 56);
  uint64_t v49 = v47 + 56;
  v17(v15, 1, 1, v16);
  unint64_t v18 = a1[1];
  unint64_t v19 = a1[2];
  if (v18 < v19)
  {
    uint64_t v45 = v7;
    char v46 = v15;
    uint64_t v44 = v17;
    do
    {
      unint64_t v25 = a1[3];
      if (v25)
      {
        unint64_t v26 = a1[4];
        if (v18 < v26) {
          goto LABEL_13;
        }
        if (v26 < v18) {
          goto LABEL_47;
        }
        a1[3] = 0;
      }
      unint64_t v25 = ProtobufDecoder.decodeVarint()();
      if (v3) {
        return outlined destroy of Text.Style?((uint64_t)v15, &lazy cache variable for type metadata for NamedImage.Key?, type metadata accessor for NamedImage.Key);
      }
      if (v25 <= 7) {
        goto LABEL_47;
      }
LABEL_13:
      if (v25 >> 3 == 2)
      {
        if ((v25 & 7) != 2) {
          goto LABEL_47;
        }
        char v7 = (void *)a1[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          char v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
        }
        unint64_t v28 = v7[2];
        unint64_t v27 = v7[3];
        if (v28 >= v27 >> 1) {
          char v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v27 > 1), v28 + 1, 1, v7);
        }
        long long v7[2] = v28 + 1;
        v7[v28 + 4] = v19;
        a1[5] = v7;
        uint64_t v29 = ProtobufDecoder.decodeVarint()();
        if (v3)
        {
          uint64_t v15 = v46;
          return outlined destroy of Text.Style?((uint64_t)v15, &lazy cache variable for type metadata for NamedImage.Key?, type metadata accessor for NamedImage.Key);
        }
        uint64_t v15 = v46;
        if (v29 < 0)
        {
          __break(1u);
LABEL_56:
          __break(1u);
LABEL_57:
          __break(1u);
LABEL_58:
          __break(1u);
LABEL_59:
          __break(1u);
LABEL_60:
          __break(1u);
          __break(1u);
          uint64_t v39 = specialized _ArrayBuffer._consumeAndCreateNew()(v7);
          uint64_t v40 = v39[2];
          if (!v40)
          {
            __break(1u);
            uint64_t v39 = (void *)a1[5];
            if (v39[2])
            {
              if (swift_isUniquelyReferenced_nonNull_native())
              {
                uint64_t v40 = v39[2];
                if (v40) {
                  goto LABEL_54;
                }
LABEL_64:
                __break(1u);
                JUMPOUT(0x245DFC4B4);
              }
            }
            else
            {
              __break(1u);
            }
            uint64_t v39 = specialized _ArrayBuffer._consumeAndCreateNew()(v39);
            uint64_t v40 = v39[2];
            if (!v40) {
              goto LABEL_64;
            }
          }
LABEL_54:
          uint64_t v41 = v40 - 1;
          uint64_t v42 = v39[v41 + 4];
          _OWORD v39[2] = v41;
          a1[5] = v39;
          a1[2] = v42;
          return outlined destroy of Text.Style?((uint64_t)v15, &lazy cache variable for type metadata for NamedImage.Key?, type metadata accessor for NamedImage.Key);
        }
        unint64_t v30 = a1[1] + v29;
        if (v19 < v30) {
          goto LABEL_47;
        }
        a1[2] = v30;
        uint64_t v31 = (uint64_t)v45;
        UUID.init(from:)(a1);
        char v7 = (void *)a1[5];
        if (!v7[2]) {
          goto LABEL_58;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          char v7 = specialized _ArrayBuffer._consumeAndCreateNew()(v7);
        }
        unint64_t v17 = v44;
        uint64_t v32 = v7[2];
        if (!v32) {
          goto LABEL_59;
        }
        uint64_t v33 = v32 - 1;
        uint64_t v34 = v7[v33 + 4];
        long long v7[2] = v33;
        a1[5] = v7;
        a1[2] = v34;
        char v7 = type metadata accessor for NamedImage.Key;
        outlined destroy of Text.Style?((uint64_t)v15, &lazy cache variable for type metadata for NamedImage.Key?, type metadata accessor for NamedImage.Key);
        swift_storeEnumTagMultiPayload();
        v17((char *)v31, 0, 1, v16);
        uint64_t v23 = v31;
        uint64_t v24 = (uint64_t)v15;
      }
      else
      {
        if (v25 >> 3 != 1)
        {
          switch(v25 & 7)
          {
            case 0uLL:
              ProtobufDecoder.decodeVarint()();
              if (v3) {
                return outlined destroy of Text.Style?((uint64_t)v15, &lazy cache variable for type metadata for NamedImage.Key?, type metadata accessor for NamedImage.Key);
              }
              goto LABEL_6;
            case 1uLL:
              unint64_t v35 = a1[1] + 8;
              if (v19 < v35) {
                goto LABEL_47;
              }
              goto LABEL_44;
            case 2uLL:
              uint64_t v36 = ProtobufDecoder.decodeVarint()();
              if (v3) {
                return outlined destroy of Text.Style?((uint64_t)v15, &lazy cache variable for type metadata for NamedImage.Key?, type metadata accessor for NamedImage.Key);
              }
              if (v36 < 0) {
                goto LABEL_60;
              }
              unint64_t v35 = a1[1] + v36;
              if (v19 < v35) {
                goto LABEL_47;
              }
LABEL_44:
              a1[1] = v35;
              break;
            case 5uLL:
              unint64_t v35 = a1[1] + 4;
              if (v19 >= v35) {
                goto LABEL_44;
              }
              goto LABEL_47;
            default:
              goto LABEL_47;
          }
          goto LABEL_6;
        }
        if ((v25 & 7) != 2) {
          goto LABEL_47;
        }
        ProtobufDecoder.beginMessage()();
        if (v3) {
          return outlined destroy of Text.Style?((uint64_t)v15, &lazy cache variable for type metadata for NamedImage.Key?, type metadata accessor for NamedImage.Key);
        }
        NamedImage.BitmapKey.init(from:)((unint64_t)a1, v10);
        uint64_t v3 = 0;
        char v7 = (void *)a1[5];
        if (!v7[2]) {
          goto LABEL_56;
        }
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v20 = v7[2];
          if (!v20) {
            goto LABEL_57;
          }
        }
        else
        {
          char v7 = specialized _ArrayBuffer._consumeAndCreateNew()(v7);
          uint64_t v20 = v7[2];
          if (!v20) {
            goto LABEL_57;
          }
        }
        uint64_t v21 = v20 - 1;
        uint64_t v22 = v7[v21 + 4];
        long long v7[2] = v21;
        a1[5] = v7;
        a1[2] = v22;
        char v7 = type metadata accessor for NamedImage.Key;
        outlined destroy of Text.Style?((uint64_t)v15, &lazy cache variable for type metadata for NamedImage.Key?, type metadata accessor for NamedImage.Key);
        swift_storeEnumTagMultiPayload();
        v17(v10, 0, 1, v16);
        uint64_t v23 = (uint64_t)v10;
        uint64_t v24 = (uint64_t)v15;
      }
      outlined init with take of NamedImage.Key?(v23, v24, &lazy cache variable for type metadata for NamedImage.Key?, type metadata accessor for NamedImage.Key);
LABEL_6:
      unint64_t v18 = a1[1];
      unint64_t v19 = a1[2];
    }
    while (v18 < v19);
  }
  a1[3] = 0;
  uint64_t v37 = v48;
  outlined init with copy of Text.Style?((uint64_t)v15, v48, &lazy cache variable for type metadata for NamedImage.Key?, type metadata accessor for NamedImage.Key);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v37, 1, v16) == 1)
  {
    outlined destroy of Text.Style?(v37, &lazy cache variable for type metadata for NamedImage.Key?, type metadata accessor for NamedImage.Key);
LABEL_47:
    lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
    swift_allocError();
    swift_willThrow();
    return outlined destroy of Text.Style?((uint64_t)v15, &lazy cache variable for type metadata for NamedImage.Key?, type metadata accessor for NamedImage.Key);
  }
  outlined destroy of Text.Style?((uint64_t)v15, &lazy cache variable for type metadata for NamedImage.Key?, type metadata accessor for NamedImage.Key);
  return outlined init with take of NamedImage.BitmapKey(v37, v43, type metadata accessor for NamedImage.Key);
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance NamedImage.Key(void *a1)
{
  return NamedImage.Key.encode(to:)(a1);
}

uint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance NamedImage.Key@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return NamedImage.Key.init(from:)(a1, a2);
}

void NamedImage.BitmapKey.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  __int16 v5 = *v3;
  int v6 = v3[1];
  ProtobufEncoder.encodeVarint(_:)(0xAuLL);
  if (v6) {
    __int16 v7 = 256;
  }
  else {
    __int16 v7 = 0;
  }
  specialized ProtobufEncoder.encodeMessage<A>(_:)(v7 | v5);
  if (v2) {
    return;
  }
  if (*((void *)v3 + 1)) {
    BOOL v8 = 0;
  }
  else {
    BOOL v8 = *((void *)v3 + 2) == 0xE000000000000000;
  }
  if (!v8 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    ProtobufEncoder.stringFieldAlways(_:_:)(2);
  }
  double v9 = *((double *)v3 + 3);
  if (v9 != 1.0)
  {
    double v10 = fabs(v9);
    if (v10 >= 65536.0) {
      Swift::UInt v11 = 25;
    }
    else {
      Swift::UInt v11 = 29;
    }
    ProtobufEncoder.encodeVarint(_:)(v11);
    if (v10 < 65536.0)
    {
      uint64_t v12 = a1[1];
      int64_t v13 = v12 + 4;
      if (!__OFADD__(v12, 4))
      {
        *(float *)&double v9 = v9;
        if (a1[2] >= v13)
        {
          a1[1] = v13;
          *(_DWORD *)(*a1 + v12) = LODWORD(v9);
          goto LABEL_22;
        }
        goto LABEL_43;
      }
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      *(_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v13) = LODWORD(v9);
      goto LABEL_22;
    }
    uint64_t v14 = a1[1];
    int64_t v13 = v14 + 8;
    if (__OFADD__(v14, 8)) {
      goto LABEL_42;
    }
    if (a1[2] < v13)
    {
      *(double *)ProtobufEncoder.growBufferSlow(to:)(v13) = v9;
    }
    else
    {
      a1[1] = v13;
      *(double *)(*a1 + v14) = v9;
    }
  }
LABEL_22:
  uint64_t v15 = (void *)*((void *)v3 + 4);
  if (!v15)
  {
    outlined consume of Image.Location(0);
    outlined consume of Image.Location(0);
    if ((v3[40] & 1) == 0) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  outlined copy of Image.Location(*((id *)v3 + 4));
  outlined copy of Image.Location(v15);
  outlined consume of Image.Location(v15);
  outlined consume of Image.Location(0);
  specialized ProtobufEncoder.messageField<A>(_:_:)(4, (uint64_t)v15);
  outlined consume of Image.Location(v15);
  if (v3[40])
  {
LABEL_24:
    ProtobufEncoder.encodeVarint(_:)(0x28uLL);
    ProtobufEncoder.encodeVarint(_:)(1uLL);
  }
LABEL_25:
  uint64_t v16 = (int *)type metadata accessor for NamedImage.BitmapKey(0);
  if (v3[v16[10]])
  {
    ProtobufEncoder.encodeVarint(_:)(0x30uLL);
    ProtobufEncoder.encodeVarint(_:)(1uLL);
  }
  uint64_t v17 = *(void *)&v3[v16[11]];
  if (v17)
  {
    ProtobufEncoder.encodeVarint(_:)(0x38uLL);
    ProtobufEncoder.encodeVarint(_:)((2 * v17) ^ (v17 >> 63));
  }
  uint64_t v18 = *(void *)&v3[v16[12]];
  if (v18)
  {
    ProtobufEncoder.encodeVarint(_:)(0x40uLL);
    ProtobufEncoder.encodeVarint(_:)((2 * v18) ^ (v18 >> 63));
  }
  if ((char)v3[v16[13]] < 0) {
    goto LABEL_45;
  }
  Swift::UInt v19 = v3[v16[13]];
  if (v3[v16[13]])
  {
    ProtobufEncoder.encodeVarint(_:)(0x48uLL);
    ProtobufEncoder.encodeVarint(_:)(v19);
  }
  if ((char)v3[v16[14]] < 0)
  {
LABEL_45:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    Swift::UInt v20 = v3[v16[14]];
    if (v3[v16[14]])
    {
      ProtobufEncoder.encodeVarint(_:)(0x50uLL);
      ProtobufEncoder.encodeVarint(_:)(v20);
    }
    ProtobufEncoder.encodeVarint(_:)(0x5AuLL);
    specialized ProtobufEncoder.encodeMessage<A>(_:)();
  }
}

uint64_t NamedImage.BitmapKey.init(from:)@<X0>(unint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v110 = a2;
  uint64_t v5 = type metadata accessor for Locale();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v111 = (char *)&v101 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for String.Encoding();
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v114 = (char *)&v101 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Text.Style?(0, &lazy cache variable for type metadata for Locale?, MEMORY[0x263F07690], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v108 = (uint64_t)&v101 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v101 - v13;
  double v16 = MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v101 - v17;
  uint64_t v109 = v6;
  Swift::UInt v20 = *(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56);
  id v19 = (id)(v6 + 56);
  int v113 = v20;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t, double))v20)((char *)&v101 - v17, 1, 1, v5, v16);
  unint64_t v21 = *(void *)(a1 + 8);
  unint64_t v22 = *(void *)(a1 + 16);
  if (v21 >= v22)
  {
    id v24 = 0;
    *(void *)(a1 + 24) = 0;
    goto LABEL_4;
  }
  uint64_t v103 = 0;
  uint64_t v104 = 0;
  uint64_t v105 = 0;
  uint64_t v106 = 0;
  uint64_t v102 = 0;
  int v107 = 2;
  unint64_t v115 = 0xE000000000000000;
  id v116 = 0;
  double v23 = 1.0;
  uint64_t v112 = v18;
  while (2)
  {
    unint64_t v26 = *(void *)(a1 + 24);
    if (v26)
    {
      unint64_t v27 = *(void *)(a1 + 32);
      if (v21 < v27) {
        goto LABEL_14;
      }
      if (v27 < v21) {
        goto LABEL_136;
      }
      *(void *)(a1 + 24) = 0;
    }
    unint64_t v28 = ProtobufDecoder.decodeVarint()();
    if (v3) {
      goto LABEL_137;
    }
    unint64_t v26 = v28;
    if (v28 < 8) {
      goto LABEL_136;
    }
LABEL_14:
    switch(v26 >> 3)
    {
      case 1uLL:
        if ((v26 & 7) != 2) {
          goto LABEL_136;
        }
        unint64_t v26 = *(void *)(a1 + 40);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v26 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v26 + 16) + 1, 1, (void *)v26);
        }
        unint64_t v30 = *(void *)(v26 + 16);
        unint64_t v29 = *(void *)(v26 + 24);
        if (v30 >= v29 >> 1) {
          unint64_t v26 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v29 > 1), v30 + 1, 1, (void *)v26);
        }
        *(void *)(v26 + 16) = v30 + 1;
        *(void *)(v26 + 8 * v30 + 32) = v22;
        *(void *)(a1 + 40) = v26;
        uint64_t v31 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_146;
        }
        uint64_t v18 = v112;
        if ((v31 & 0x8000000000000000) == 0)
        {
          unint64_t v32 = *(void *)(a1 + 8) + v31;
          if (v22 < v32) {
            goto LABEL_136;
          }
          *(void *)(a1 + 16) = v32;
          CatalogKey.init(from:)(a1, v117);
          unint64_t v26 = *(void *)(a1 + 40);
          if (!*(void *)(v26 + 16)) {
            goto LABEL_163;
          }
          if (swift_isUniquelyReferenced_nonNull_native())
          {
            uint64_t v33 = *(void *)(v26 + 16);
            if (!v33) {
              goto LABEL_165;
            }
          }
          else
          {
            unint64_t v26 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)v26);
            uint64_t v33 = *(void *)(v26 + 16);
            if (!v33) {
              goto LABEL_165;
            }
          }
          uint64_t v34 = v33 - 1;
          uint64_t v35 = *(void *)(v26 + 8 * v34 + 32);
          *(void *)(v26 + 16) = v34;
          *(void *)(a1 + 40) = v26;
          *(void *)(a1 + 16) = v35;
          if (v117[1]) {
            int v36 = 256;
          }
          else {
            int v36 = 0;
          }
          int v107 = v36 | v117[0];
          goto LABEL_7;
        }
        __break(1u);
LABEL_157:
        __break(1u);
LABEL_158:
        __break(1u);
LABEL_159:
        __break(1u);
LABEL_160:
        __break(1u);
LABEL_161:
        __break(1u);
LABEL_162:
        __break(1u);
LABEL_163:
        __break(1u);
LABEL_164:
        __break(1u);
LABEL_165:
        __break(1u);
LABEL_166:
        __break(1u);
LABEL_167:
        __break(1u);
LABEL_168:
        __break(1u);
LABEL_169:
        __break(1u);
LABEL_170:
        __break(1u);
LABEL_171:
        __break(1u);
LABEL_172:
        __break(1u);
LABEL_173:
        __break(1u);
LABEL_174:
        __break(1u);
LABEL_175:
        __break(1u);
        __break(1u);
        uint64_t v95 = specialized _ArrayBuffer._consumeAndCreateNew()((void *)v26);
        uint64_t v97 = v95[2];
        if (v97) {
          goto LABEL_153;
        }
        __break(1u);
        uint64_t v95 = *(void **)(a1 + 40);
        if (v95[2])
        {
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          id v19 = v116;
          if (isUniquelyReferenced_nonNull_native)
          {
            uint64_t v97 = v95[2];
            if (v97)
            {
LABEL_153:
              uint64_t v99 = v97 - 1;
              uint64_t v100 = v95[v99 + 4];
              _OWORD v95[2] = v99;
              outlined consume of Image.Location(v19);
              swift_bridgeObjectRelease();
              *(void *)(a1 + 40) = v95;
              *(void *)(a1 + 16) = v100;
              return outlined destroy of Text.Style?((uint64_t)v18, &lazy cache variable for type metadata for Locale?, MEMORY[0x263F07690]);
            }
LABEL_150:
            __break(1u);
            uint64_t v95 = *(void **)(a1 + 40);
            if (v95[2])
            {
              char v98 = swift_isUniquelyReferenced_nonNull_native();
              id v19 = v116;
              if (v98)
              {
                uint64_t v97 = v95[2];
                if (v97) {
                  goto LABEL_153;
                }
LABEL_182:
                __break(1u);
                JUMPOUT(0x245DFD644);
              }
            }
            else
            {
              __break(1u);
            }
            uint64_t v95 = specialized _ArrayBuffer._consumeAndCreateNew()(v95);
            uint64_t v97 = v95[2];
            if (v97) {
              goto LABEL_153;
            }
            goto LABEL_182;
          }
        }
        else
        {
          __break(1u);
        }
        uint64_t v95 = specialized _ArrayBuffer._consumeAndCreateNew()(v95);
        uint64_t v97 = v95[2];
        if (v97) {
          goto LABEL_153;
        }
        goto LABEL_150;
      case 2uLL:
        swift_bridgeObjectRelease();
        if ((v26 & 7) != 2) {
          goto LABEL_145;
        }
        uint64_t v37 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_155;
        }
        unint64_t v26 = v37;
        if (v37 < 0) {
          goto LABEL_157;
        }
        uint64_t v38 = *(void *)(a1 + 8);
        if (v22 < v38 + v37)
        {
LABEL_145:
          lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
          swift_allocError();
          swift_willThrow();
          goto LABEL_155;
        }
        *(void *)(a1 + 8) = v38 + v37;
        if (v37)
        {
          int64_t v39 = v38 - (void)objc_msgSend(objc_retainAutorelease(*(id *)a1), sel_bytes);
          uint64_t v40 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v42 = v41;
          if (__OFADD__(v39, v26)) {
            goto LABEL_166;
          }
          if ((uint64_t)(v39 + v26) < v39) {
            goto LABEL_167;
          }
          uint64_t v43 = v40;
          uint64_t v44 = Data._Representation.subscript.getter();
          unint64_t v46 = v45;
          outlined consume of Data._Representation(v43, v42);
          uint64_t v18 = v112;
        }
        else
        {
          uint64_t v44 = 0;
          unint64_t v46 = 0xC000000000000000;
        }
        static String.Encoding.utf8.getter();
        uint64_t v78 = String.init(data:encoding:)();
        if (v79)
        {
          uint64_t v102 = v78;
          unint64_t v115 = v79;
          outlined consume of Data._Representation(v44, v46);
LABEL_7:
          unint64_t v21 = *(void *)(a1 + 8);
          unint64_t v22 = *(void *)(a1 + 16);
          if (v21 >= v22)
          {
            *(void *)(a1 + 24) = 0;
            if (v107 != 2)
            {
              uint64_t v85 = v108;
              outlined init with copy of Text.Style?((uint64_t)v18, v108, &lazy cache variable for type metadata for Locale?, MEMORY[0x263F07690]);
              uint64_t v86 = v109;
              int v87 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v109 + 48))(v85, 1, v5);
              id v88 = v116;
              if (v87 == 1)
              {
                uint64_t v89 = v111;
                static Locale.current.getter();
                char v90 = (uint64_t (*)(uint64_t))MEMORY[0x263F07690];
                outlined destroy of Text.Style?((uint64_t)v18, &lazy cache variable for type metadata for Locale?, MEMORY[0x263F07690]);
                outlined destroy of Text.Style?(v85, &lazy cache variable for type metadata for Locale?, v90);
              }
              else
              {
                outlined destroy of Text.Style?((uint64_t)v18, &lazy cache variable for type metadata for Locale?, MEMORY[0x263F07690]);
                uint64_t v89 = v111;
                (*(void (**)(char *, uint64_t, uint64_t))(v86 + 32))(v111, v85, v5);
              }
              char v91 = BYTE1(v107);
              id v92 = v110;
              *uint64_t v110 = v107 & 1;
              v92[1] = v91 & 1;
              unint64_t v93 = v115;
              *((void *)v92 + 1) = v102;
              *((void *)v92 + 2) = v93;
              *((double *)v92 + 3) = v23;
              *((void *)v92 + 4) = v88;
              v92[40] = v104 & 1;
              uint64_t v94 = (int *)type metadata accessor for NamedImage.BitmapKey(0);
              uint64_t result = (*(uint64_t (**)(unsigned char *, char *, uint64_t))(v86 + 32))(&v92[v94[9]], v89, v5);
              v92[v94[10]] = BYTE4(v104) & 1;
              *(void *)&v92[v94[11]] = v105;
              *(void *)&v92[v94[12]] = v106;
              v92[v94[13]] = v103;
              v92[v94[14]] = BYTE4(v103);
              return result;
            }
            swift_bridgeObjectRelease();
            id v24 = v116;
LABEL_4:
            lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
            swift_allocError();
            swift_willThrow();
            outlined consume of Image.Location(v24);
            return outlined destroy of Text.Style?((uint64_t)v18, &lazy cache variable for type metadata for Locale?, MEMORY[0x263F07690]);
          }
          continue;
        }
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        swift_willThrow();
        outlined consume of Data._Representation(v44, v46);
LABEL_155:
        outlined consume of Image.Location(v116);
        return outlined destroy of Text.Style?((uint64_t)v18, &lazy cache variable for type metadata for Locale?, MEMORY[0x263F07690]);
      case 3uLL:
        unint64_t v47 = v26 & 7;
        if (v47 == 5)
        {
          uint64_t v80 = *(float **)(a1 + 8);
          if (v22 < (unint64_t)(v80 + 1)) {
            goto LABEL_136;
          }
          float v81 = *v80;
          *(void *)(a1 + 8) = v80 + 1;
          double v23 = v81;
        }
        else
        {
          if (v47 == 2)
          {
            uint64_t v82 = ProtobufDecoder.decodeVarint()();
            if (v3) {
              goto LABEL_137;
            }
            if (v82 < 0) {
              goto LABEL_174;
            }
            uint64_t v48 = *(double **)(a1 + 8);
            if (v22 < (unint64_t)v48 + v82) {
              goto LABEL_136;
            }
            *(void *)(a1 + 24) = 25;
            *(void *)(a1 + 32) = (char *)v48 + v82;
          }
          else
          {
            if (v47 != 1) {
              goto LABEL_136;
            }
            uint64_t v48 = *(double **)(a1 + 8);
          }
          if (v22 < (unint64_t)(v48 + 1)) {
            goto LABEL_136;
          }
          double v23 = *v48;
          *(void *)(a1 + 8) = v48 + 1;
        }
        goto LABEL_7;
      case 4uLL:
        if ((v26 & 7) != 2) {
          goto LABEL_136;
        }
        ProtobufDecoder.beginMessage()();
        if (v3) {
          goto LABEL_137;
        }
        Image.Location.init(from:)((void *)a1, (uint64_t *)&v118);
        uint64_t v3 = 0;
        unint64_t v26 = *(void *)(a1 + 40);
        if (!*(void *)(v26 + 16)) {
          goto LABEL_161;
        }
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v49 = *(void *)(v26 + 16);
          if (!v49) {
            goto LABEL_162;
          }
        }
        else
        {
          unint64_t v26 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)v26);
          uint64_t v49 = *(void *)(v26 + 16);
          if (!v49) {
            goto LABEL_162;
          }
        }
        uint64_t v50 = v49 - 1;
        uint64_t v51 = *(void *)(v26 + 8 * v50 + 32);
        *(void *)(v26 + 16) = v50;
        outlined consume of Image.Location(v116);
        *(void *)(a1 + 40) = v26;
        *(void *)(a1 + 16) = v51;
        id v116 = v118;
        goto LABEL_7;
      case 5uLL:
        if ((v26 & 7) == 0) {
          goto LABEL_57;
        }
        if ((v26 & 7) != 2) {
          goto LABEL_136;
        }
        uint64_t v52 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_137;
        }
        if (v52 < 0) {
          goto LABEL_168;
        }
        unint64_t v53 = *(void *)(a1 + 8) + v52;
        if (v22 < v53) {
          goto LABEL_136;
        }
        *(void *)(a1 + 24) = 40;
        *(void *)(a1 + 32) = v53;
LABEL_57:
        uint64_t v54 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_137;
        }
        LODWORD(v104) = v54 != 0;
        goto LABEL_7;
      case 6uLL:
        if ((v26 & 7) == 0) {
          goto LABEL_65;
        }
        if ((v26 & 7) != 2) {
          goto LABEL_136;
        }
        uint64_t v55 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_137;
        }
        if (v55 < 0) {
          goto LABEL_169;
        }
        unint64_t v56 = *(void *)(a1 + 8) + v55;
        if (v22 < v56) {
          goto LABEL_136;
        }
        *(void *)(a1 + 24) = 48;
        *(void *)(a1 + 32) = v56;
LABEL_65:
        uint64_t v57 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_137;
        }
        HIDWORD(v104) = v57 == 1;
        goto LABEL_7;
      case 7uLL:
        if ((v26 & 7) == 0) {
          goto LABEL_73;
        }
        if ((v26 & 7) != 2) {
          goto LABEL_136;
        }
        uint64_t v58 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_137;
        }
        if (v58 < 0) {
          goto LABEL_170;
        }
        unint64_t v59 = *(void *)(a1 + 8) + v58;
        if (v22 < v59) {
          goto LABEL_136;
        }
        *(void *)(a1 + 24) = 56;
        *(void *)(a1 + 32) = v59;
LABEL_73:
        uint64_t v60 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_137;
        }
        uint64_t v105 = -(v60 & 1) ^ (v60 >> 1);
        goto LABEL_7;
      case 8uLL:
        if ((v26 & 7) == 0) {
          goto LABEL_81;
        }
        if ((v26 & 7) != 2) {
          goto LABEL_136;
        }
        uint64_t v61 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_137;
        }
        if (v61 < 0) {
          goto LABEL_171;
        }
        unint64_t v62 = *(void *)(a1 + 8) + v61;
        if (v22 < v62) {
          goto LABEL_136;
        }
        *(void *)(a1 + 24) = 64;
        *(void *)(a1 + 32) = v62;
LABEL_81:
        uint64_t v63 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_137;
        }
        uint64_t v106 = -(v63 & 1) ^ (v63 >> 1);
        goto LABEL_7;
      case 9uLL:
        if ((v26 & 7) == 0) {
          goto LABEL_89;
        }
        if ((v26 & 7) != 2) {
          goto LABEL_136;
        }
        uint64_t v64 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_137;
        }
        if (v64 < 0) {
          goto LABEL_172;
        }
        unint64_t v65 = *(void *)(a1 + 8) + v64;
        if (v22 < v65) {
          goto LABEL_136;
        }
        *(void *)(a1 + 24) = 72;
        *(void *)(a1 + 32) = v65;
LABEL_89:
        char v66 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_137;
        }
        if (v66 < 0) {
          goto LABEL_159;
        }
        LODWORD(v103) = v66;
        goto LABEL_7;
      case 0xAuLL:
        if ((v26 & 7) == 0) {
          goto LABEL_98;
        }
        if ((v26 & 7) != 2) {
          goto LABEL_136;
        }
        uint64_t v67 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_137;
        }
        if (v67 < 0) {
          goto LABEL_173;
        }
        unint64_t v68 = *(void *)(a1 + 8) + v67;
        if (v22 < v68) {
          goto LABEL_136;
        }
        *(void *)(a1 + 24) = 80;
        *(void *)(a1 + 32) = v68;
LABEL_98:
        char v69 = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_137;
        }
        if (v69 < 0) {
          goto LABEL_160;
        }
        HIDWORD(v103) = v69;
        goto LABEL_7;
      case 0xBuLL:
        if ((v26 & 7) != 2) {
          goto LABEL_136;
        }
        unint64_t v26 = *(void *)(a1 + 40);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v26 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v26 + 16) + 1, 1, (void *)v26);
        }
        unint64_t v71 = *(void *)(v26 + 16);
        unint64_t v70 = *(void *)(v26 + 24);
        if (v71 >= v70 >> 1) {
          unint64_t v26 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v70 > 1), v71 + 1, 1, (void *)v26);
        }
        *(void *)(v26 + 16) = v71 + 1;
        *(void *)(v26 + 8 * v71 + 32) = v22;
        *(void *)(a1 + 40) = v26;
        uint64_t v72 = ProtobufDecoder.decodeVarint()();
        if (v3)
        {
LABEL_146:
          outlined consume of Image.Location(v116);
          swift_bridgeObjectRelease();
          uint64_t v18 = v112;
          return outlined destroy of Text.Style?((uint64_t)v18, &lazy cache variable for type metadata for Locale?, MEMORY[0x263F07690]);
        }
        uint64_t v18 = v112;
        if (v72 < 0) {
          goto LABEL_158;
        }
        unint64_t v73 = *(void *)(a1 + 8) + v72;
        if (v22 < v73) {
          goto LABEL_136;
        }
        *(void *)(a1 + 16) = v73;
        Locale.init(from:)(a1);
        unint64_t v26 = *(void *)(a1 + 40);
        if (!*(void *)(v26 + 16)) {
          goto LABEL_164;
        }
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v74 = *(void *)(v26 + 16);
          if (!v74) {
            goto LABEL_135;
          }
        }
        else
        {
          unint64_t v26 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)v26);
          uint64_t v74 = *(void *)(v26 + 16);
          if (!v74)
          {
LABEL_135:
            __break(1u);
LABEL_136:
            lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
            swift_allocError();
            swift_willThrow();
LABEL_137:
            outlined consume of Image.Location(v116);
            swift_bridgeObjectRelease();
            return outlined destroy of Text.Style?((uint64_t)v18, &lazy cache variable for type metadata for Locale?, MEMORY[0x263F07690]);
          }
        }
        uint64_t v75 = v74 - 1;
        uint64_t v76 = *(void *)(v26 + 8 * v75 + 32);
        *(void *)(v26 + 16) = v75;
        *(void *)(a1 + 40) = v26;
        *(void *)(a1 + 16) = v76;
        uint64_t v77 = (uint64_t (*)(uint64_t))MEMORY[0x263F07690];
        outlined destroy of Text.Style?((uint64_t)v18, &lazy cache variable for type metadata for Locale?, MEMORY[0x263F07690]);
        v113(v14, 0, 1, v5);
        outlined init with take of NamedImage.Key?((uint64_t)v14, (uint64_t)v18, &lazy cache variable for type metadata for Locale?, v77);
        goto LABEL_7;
      default:
        switch(v26 & 7)
        {
          case 0uLL:
            ProtobufDecoder.decodeVarint()();
            if (v3) {
              goto LABEL_137;
            }
            goto LABEL_7;
          case 1uLL:
            unint64_t v25 = *(void *)(a1 + 8) + 8;
            if (v22 >= v25) {
              goto LABEL_6;
            }
            goto LABEL_136;
          case 2uLL:
            uint64_t v83 = ProtobufDecoder.decodeVarint()();
            if (v3) {
              goto LABEL_137;
            }
            if (v83 < 0) {
              goto LABEL_175;
            }
            unint64_t v25 = *(void *)(a1 + 8) + v83;
            if (v22 < v25) {
              goto LABEL_136;
            }
LABEL_6:
            *(void *)(a1 + 8) = v25;
            break;
          case 5uLL:
            unint64_t v25 = *(void *)(a1 + 8) + 4;
            if (v22 < v25) {
              goto LABEL_136;
            }
            goto LABEL_6;
          default:
            goto LABEL_136;
        }
        goto LABEL_7;
    }
  }
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance NamedImage.BitmapKey(void *a1)
{
}

uint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance NamedImage.BitmapKey@<X0>(unint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return NamedImage.BitmapKey.init(from:)(a1, a2);
}

uint64_t Image.init(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NamedResource();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ResourceReference();
  uint64_t v7 = *(void *)(v6 - 8);
  double v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24C521D70](v8);
  if ((*(unsigned int (**)(char *, uint64_t))(v7 + 88))(v10, v6) == *MEMORY[0x263F04948])
  {
    (*(void (**)(char *, uint64_t))(v7 + 96))(v10, v6);
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v10, v2);
    uint64_t v11 = NamedResource.name.getter();
    uint64_t v13 = v12;
    uint64_t v14 = (void *)NamedResource.bundle.getter();
    type metadata accessor for LocalizedTextStorage();
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = v11;
    *(void *)(v15 + 24) = v13;
    *(unsigned char *)(v15 + 32) = 0;
    uint64_t v16 = MEMORY[0x263F8EE78];
    *(void *)(v15 + 40) = MEMORY[0x263F8EE78];
    *(void *)(v15 + 48) = 0;
    *(void *)(v15 + 56) = 0;
    *(void *)(v15 + 64) = v14;
    type metadata accessor for ImageProviderBox<Image.NamedImageProvider>(0, &lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (void (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider);
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = v11;
    *(void *)(v17 + 24) = v13;
    *(_DWORD *)(v17 + 32) = 0;
    *(unsigned char *)(v17 + 36) = 1;
    *(void *)(v17 + 40) = v14;
    *(void *)(v17 + 48) = 2;
    *(void *)(v17 + 56) = v15;
    *(_OWORD *)(v17 + 64) = xmmword_24619B550;
    *(void *)(v17 + 80) = v16;
    *(unsigned char *)(v17 + 88) = 0;
    uint64_t v18 = type metadata accessor for ImageResource();
    id v19 = *(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8);
    swift_bridgeObjectRetain();
    id v20 = v14;
    v19(a1, v18);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    return v17;
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

id @nonobjc CUICatalog.init(url:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v15 = (NSURL *)*MEMORY[0x263EF8340];
  URL._bridgeToObjectiveC()(v15);
  uint64_t v5 = v4;
  id v14 = 0;
  id v6 = objc_msgSend(v2, sel_initWithURL_error_, v4, &v14);

  id v7 = v14;
  if (v6)
  {
    uint64_t v8 = type metadata accessor for URL();
    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
    id v10 = v7;
    v9(a1, v8);
  }
  else
  {
    id v11 = v14;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v12 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(a1, v12);
  }
  return v6;
}

unint64_t lazy protocol witness table accessor for type NamedImage.Errors and conformance NamedImage.Errors()
{
  unint64_t result = lazy protocol witness table cache variable for type NamedImage.Errors and conformance NamedImage.Errors;
  if (!lazy protocol witness table cache variable for type NamedImage.Errors and conformance NamedImage.Errors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NamedImage.Errors and conformance NamedImage.Errors);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NamedImage.Errors and conformance NamedImage.Errors;
  if (!lazy protocol witness table cache variable for type NamedImage.Errors and conformance NamedImage.Errors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NamedImage.Errors and conformance NamedImage.Errors);
  }
  return result;
}

uint64_t specialized _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe)
{
  uint64_t v2 = isStackAllocationSafe;
  v10[1] = *MEMORY[0x263EF8340];
  char v3 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v4 = (unint64_t)((1 << v3) + 63) >> 6;
  size_t v5 = 8 * v4;
  if ((v3 & 0x3Fu) <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x270FA5388](isStackAllocationSafe);
    bzero((char *)v10 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v5);
    specialized closure #1 in _NativeDictionary.filter(_:)((void *)((char *)v10 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)), v4, v2);
    if (v1) {
      swift_willThrow();
    }
    else {
      return v6;
    }
  }
  else
  {
    id v7 = (void *)swift_slowAlloc();
    bzero(v7, v5);
    specialized closure #1 in _NativeDictionary.filter(_:)((unint64_t *)v7, v4, v2);
    uint64_t v2 = v8;
    MEMORY[0x24C527CC0](v7, -1, -1);
  }
  return v2;
}

void specialized closure #1 in _NativeDictionary.filter(_:)(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v34 = a2;
  uint64_t v35 = a1;
  type metadata accessor for (key: URL, value: NamedImage.Cache.WeakCatalog)();
  uint64_t v44 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v43 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v40 = (char *)&v33 - v7;
  uint64_t v8 = type metadata accessor for URL();
  MEMORY[0x270FA5388](v8);
  id v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v12 = 0;
  unint64_t v45 = (void *)a3;
  uint64_t v13 = *(void *)(a3 + 64);
  uint64_t v36 = 0;
  uint64_t v37 = a3 + 64;
  uint64_t v14 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & v13;
  uint64_t v41 = v9 + 16;
  uint64_t v42 = v9;
  int64_t v38 = (unint64_t)(v14 + 63) >> 6;
  int64_t v39 = (void (**)(char *, uint64_t))(v9 + 8);
  uint64_t v17 = (uint64_t)v40;
  uint64_t v18 = v43;
  while (v16)
  {
    uint64_t v46 = (v16 - 1) & v16;
    int64_t v47 = v12;
    unint64_t v19 = __clz(__rbit64(v16)) | (v12 << 6);
LABEL_5:
    id v20 = v45;
    unint64_t v21 = *(void (**)(char *, unint64_t, uint64_t))(v42 + 16);
    v21(v11, v45[6] + *(void *)(v42 + 72) * v19, v8);
    outlined init with copy of NamedImage.Cache.WeakCatalog(v20[7] + 8 * v19, (uint64_t)v48);
    uint64_t v22 = v44;
    uint64_t v23 = v17 + *(int *)(v44 + 48);
    v21((char *)v17, (unint64_t)v11, v8);
    outlined init with copy of NamedImage.Cache.WeakCatalog((uint64_t)v48, v23);
    uint64_t v24 = (uint64_t)&v18[*(int *)(v22 + 48)];
    v21(v18, v17, v8);
    outlined init with copy of NamedImage.Cache.WeakCatalog(v23, v24);
    unint64_t v25 = (void *)MEMORY[0x24C527E00](v24);
    outlined destroy of NamedImage.BitmapKey(v17, (uint64_t (*)(void))type metadata accessor for (key: URL, value: NamedImage.Cache.WeakCatalog));
    outlined destroy of weak GestureGraphDelegate?(v24);
    if (v25)
    {

      uint64_t v31 = *v39;
      (*v39)(v18, v8);
      outlined destroy of weak GestureGraphDelegate?((uint64_t)v48);
      v31(v11, v8);
      *(unint64_t *)((char *)v35 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      BOOL v32 = __OFADD__(v36++, 1);
      unint64_t v16 = v46;
      int64_t v12 = v47;
      if (v32)
      {
        __break(1u);
LABEL_25:
        specialized _NativeDictionary.extractDictionary(using:count:)(v35, v34, v36, v45);
        return;
      }
    }
    else
    {
      unint64_t v26 = *v39;
      (*v39)(v18, v8);
      outlined destroy of weak GestureGraphDelegate?((uint64_t)v48);
      v26(v11, v8);
      unint64_t v16 = v46;
      int64_t v12 = v47;
    }
  }
  int64_t v27 = v12 + 1;
  if (__OFADD__(v12, 1))
  {
    __break(1u);
    goto LABEL_27;
  }
  if (v27 >= v38) {
    goto LABEL_25;
  }
  unint64_t v28 = *(void *)(v37 + 8 * v27);
  int64_t v29 = v12 + 1;
  if (v28) {
    goto LABEL_21;
  }
  int64_t v29 = v12 + 2;
  if (v12 + 2 >= v38) {
    goto LABEL_25;
  }
  unint64_t v28 = *(void *)(v37 + 8 * v29);
  if (v28) {
    goto LABEL_21;
  }
  int64_t v29 = v12 + 3;
  if (v12 + 3 >= v38) {
    goto LABEL_25;
  }
  unint64_t v28 = *(void *)(v37 + 8 * v29);
  if (v28)
  {
LABEL_21:
    uint64_t v46 = (v28 - 1) & v28;
    int64_t v47 = v29;
    unint64_t v19 = __clz(__rbit64(v28)) + (v29 << 6);
    goto LABEL_5;
  }
  uint64_t v30 = v12 + 4;
  if (v12 + 4 >= v38) {
    goto LABEL_25;
  }
  unint64_t v28 = *(void *)(v37 + 8 * v30);
  if (v28)
  {
    int64_t v29 = v12 + 4;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v29 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v29 >= v38) {
      goto LABEL_25;
    }
    unint64_t v28 = *(void *)(v37 + 8 * v29);
    ++v30;
    if (v28) {
      goto LABEL_21;
    }
  }
LABEL_27:
  __break(1u);
}

BOOL specialized static NamedImage.BitmapKey.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  BOOL result = 0;
  if (*a1 == *a2 && ((a1[1] ^ a2[1]) & 1) == 0)
  {
    BOOL v5 = *((void *)a1 + 1) == *((void *)a2 + 1) && *((void *)a1 + 2) == *((void *)a2 + 2);
    if (v5 || (char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v6 & 1) != 0))
    {
      if (*((double *)a1 + 3) == *((double *)a2 + 3)
        && (uint64_t v7 = (void *)*((void *)a1 + 4),
            id v9 = (id)*((void *)a2 + 4),
            uint64_t v10 = v7,
            (specialized static Image.Location.== infix(_:_:)(&v10, &v9) & 1) != 0)
        && a1[40] == a2[40]
        && (uint64_t v8 = (int *)type metadata accessor for NamedImage.BitmapKey(0),
            (MEMORY[0x24C5218A0](&a1[v8[9]], &a2[v8[9]]) & 1) != 0)
        && a1[v8[10]] == a2[v8[10]]
        && *(void *)&a1[v8[11]] == *(void *)&a2[v8[11]]
        && *(void *)&a1[v8[12]] == *(void *)&a2[v8[12]]
        && a1[v8[13]] == a2[v8[13]])
      {
        return a1[v8[14]] == a2[v8[14]];
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t specialized static NamedImage.Key.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = a2;
  uint64_t v25 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v25 - 8);
  MEMORY[0x270FA5388](v25);
  BOOL v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for NamedImage.BitmapKey(0);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (unsigned __int8 *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for NamedImage.Key(0);
  MEMORY[0x270FA5388](v9);
  id v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (unsigned __int8 *)&v25 - v13;
  type metadata accessor for (NamedImage.Key, NamedImage.Key)();
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = (uint64_t)&v17[*(int *)(v18 + 56)];
  outlined init with copy of NamedImage.Key(a1, (uint64_t)v17, type metadata accessor for NamedImage.Key);
  outlined init with copy of NamedImage.Key(v26, v19, type metadata accessor for NamedImage.Key);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with copy of NamedImage.Key((uint64_t)v17, (uint64_t)v11, type metadata accessor for NamedImage.Key);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v20 = v25;
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v5, v19, v25);
      char v21 = static UUID.== infix(_:_:)();
      uint64_t v22 = *(void (**)(char *, uint64_t))(v3 + 8);
      v22(v5, v20);
      v22(v11, v20);
LABEL_9:
      uint64_t v23 = type metadata accessor for NamedImage.Key;
      goto LABEL_10;
    }
    (*(void (**)(char *, uint64_t))(v3 + 8))(v11, v25);
  }
  else
  {
    outlined init with copy of NamedImage.Key((uint64_t)v17, (uint64_t)v14, type metadata accessor for NamedImage.Key);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined init with take of NamedImage.BitmapKey(v19, (uint64_t)v8, type metadata accessor for NamedImage.BitmapKey);
      char v21 = specialized static NamedImage.BitmapKey.== infix(_:_:)(v14, v8);
      outlined destroy of NamedImage.BitmapKey((uint64_t)v8, type metadata accessor for NamedImage.BitmapKey);
      outlined destroy of NamedImage.BitmapKey((uint64_t)v14, type metadata accessor for NamedImage.BitmapKey);
      goto LABEL_9;
    }
    outlined destroy of NamedImage.BitmapKey((uint64_t)v14, type metadata accessor for NamedImage.BitmapKey);
  }
  char v21 = 0;
  uint64_t v23 = (uint64_t (*)(void))type metadata accessor for (NamedImage.Key, NamedImage.Key);
LABEL_10:
  outlined destroy of NamedImage.BitmapKey((uint64_t)v17, v23);
  return v21 & 1;
}

BOOL specialized static NamedImage.VectorKey.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  BOOL result = 0;
  if (*a1 == *a2 && ((a1[1] ^ a2[1]) & 1) == 0)
  {
    BOOL v5 = *((void *)a1 + 1) == *((void *)a2 + 1) && *((void *)a1 + 2) == *((void *)a2 + 2);
    if (v5 || (char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v6 & 1) != 0))
    {
      if (*((double *)a1 + 3) == *((double *)a2 + 3)
        && a1[32] == a2[32]
        && (uint64_t v7 = (int *)type metadata accessor for NamedImage.VectorKey(0),
            (MEMORY[0x24C5218A0](&a1[v7[8]], &a2[v7[8]]) & 1) != 0)
        && *(double *)&a1[v7[9]] == *(double *)&a2[v7[9]]
        && a1[v7[10]] == a2[v7[10]]
        && *(double *)&a1[v7[11]] == *(double *)&a2[v7[11]]
        && (uint64_t v8 = v7[12],
            uint64_t v9 = *(void **)&a1[v8],
            id v10 = *(id *)&a2[v8],
            id v11 = v9,
            (specialized static Image.Location.== infix(_:_:)(&v11, &v10) & 1) != 0))
      {
        return *(void *)&a1[v7[13]] == *(void *)&a2[v7[13]];
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

BOOL specialized static UUIDImageProvider.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((static UUID.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = type metadata accessor for UUIDImageProvider(0);
  uint64_t v5 = *(int *)(v4 + 20);
  double v6 = *(double *)(a1 + v5);
  double v7 = *(double *)(a1 + v5 + 8);
  uint64_t v8 = (double *)(a2 + v5);
  if (v6 != *v8 || v7 != v8[1]) {
    return 0;
  }
  uint64_t v10 = *(int *)(v4 + 24);
  id v11 = (uint64_t *)(a1 + v10);
  uint64_t v12 = *(void *)(a1 + v10 + 24);
  uint64_t v13 = (uint64_t *)(a2 + v10);
  uint64_t v14 = v13[3];
  if (!v12) {
    return !v14;
  }
  if (!v14) {
    return 0;
  }
  uint64_t v15 = *v11;
  uint64_t v16 = v11[1];
  uint64_t v17 = v11[2];
  uint64_t v18 = *v13;
  uint64_t v19 = v13[1];
  uint64_t v20 = v13[2];
  if (v17)
  {
    if (v20)
    {
      int64_t v27 = *(uint64_t (**)(uint64_t))(*(void *)v15 + 96);
      outlined copy of Text?(v15, v16, v17, v12);
      outlined copy of Text?(v15, v16, v17, v12);
      outlined copy of Text?(v18, v19, v20, v14);
      char v21 = 1;
      outlined copy of Text.Storage(v15, v16, 1);
      outlined copy of Text.Storage(v18, v19, 1);
      char v22 = v27(v18);
      outlined consume of Text.Storage(v18, v19, 1);
      outlined consume of Text.Storage(v15, v16, 1);
      if (v22) {
        goto LABEL_26;
      }
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  if (v20)
  {
LABEL_16:
    char v21 = (v11[2] & 1) == 0;
    outlined copy of Text?(*v11, v11[1], v11[2], v12);
    outlined copy of Text?(v15, v16, v17, v12);
    outlined copy of Text?(v18, v19, v20, v14);
LABEL_17:
    outlined consume of Text.Storage(v18, v19, v21);
    swift_bridgeObjectRelease();
    outlined consume of Text.Storage(v15, v16, v17 & 1);
    swift_bridgeObjectRelease();
    outlined consume of Text?(v15, v16, v17, v12);
    return 0;
  }
  if (v15 == v18 && v16 == v19)
  {
    outlined copy of Text?(*v11, v11[1], v11[2], v12);
    outlined copy of Text?(v15, v16, v17, v12);
    outlined copy of Text?(v15, v16, v20, v14);
    goto LABEL_26;
  }
  char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
  outlined copy of Text?(v15, v16, v17, v12);
  outlined copy of Text?(v15, v16, v17, v12);
  outlined copy of Text?(v18, v19, v20, v14);
  char v21 = 0;
  if ((v25 & 1) == 0) {
    goto LABEL_17;
  }
LABEL_26:
  char v26 = specialized static Array<A>.== infix(_:_:)(v12, v14);
  outlined consume of Text.Storage(v18, v19, v20 & 1);
  swift_bridgeObjectRelease();
  outlined consume of Text.Storage(v15, v16, v17 & 1);
  swift_bridgeObjectRelease();
  outlined consume of Text?(v15, v16, v17, v12);
  return (v26 & 1) != 0;
}

id outlined copy of NamedImage.BitmapInfo?(id result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if (a7 != 3) {
    return outlined copy of GraphicsImage.Contents(result, a2);
  }
  return result;
}

void outlined consume of NamedImage.BitmapInfo?(void *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if (a7 != 3) {
    outlined consume of GraphicsImage.Contents(a1, a2);
  }
}

uint64_t specialized Image.init(_:variableValue:bundle:label:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9)
{
  id v12 = a5;
  if (!a5) {
    id v12 = objc_msgSend(self, sel_mainBundle);
  }
  int v18 = a4 & 1;
  if (v18)
  {
    float v19 = 0.0;
  }
  else
  {
    float v17 = *(double *)&a3;
    float v19 = v17;
  }
  type metadata accessor for ImageProviderBox<Image.NamedImageProvider>(0, &lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (void (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider);
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  *(void *)(result + 24) = a2;
  *(float *)(result + 32) = v19;
  *(unsigned char *)(result + 36) = v18;
  *(void *)(result + 40) = v12;
  *(void *)(result + 48) = 2;
  *(void *)(result + 56) = a6;
  *(void *)(result + 64) = a7;
  *(void *)(result + 72) = a8 & 1;
  *(void *)(result + 80) = a9;
  *(unsigned char *)(result + 88) = 0;
  return result;
}

unint64_t lazy protocol witness table accessor for type Image.Location.Error and conformance Image.Location.Error()
{
  unint64_t result = lazy protocol witness table cache variable for type Image.Location.Error and conformance Image.Location.Error;
  if (!lazy protocol witness table cache variable for type Image.Location.Error and conformance Image.Location.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.Location.Error and conformance Image.Location.Error);
  }
  return result;
}

uint64_t type metadata accessor for UUIDImageProvider(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for UUIDImageProvider);
}

void type metadata accessor for ImageProviderBox<UUIDImageProvider>()
{
  if (!lazy cache variable for type metadata for ImageProviderBox<UUIDImageProvider>)
  {
    type metadata accessor for UUIDImageProvider(255);
    lazy protocol witness table accessor for type Locale and conformance Locale(&lazy protocol witness table cache variable for type UUIDImageProvider and conformance UUIDImageProvider, (void (*)(uint64_t))type metadata accessor for UUIDImageProvider);
    unint64_t v0 = type metadata accessor for ImageProviderBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ImageProviderBox<UUIDImageProvider>);
    }
  }
}

uint64_t outlined init with take of NamedImage.Key?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  type metadata accessor for Text.Style?(0, a3, a4, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t base witness table accessor for Equatable in NamedImage.BitmapKey()
{
  return lazy protocol witness table accessor for type Locale and conformance Locale(&lazy protocol witness table cache variable for type NamedImage.BitmapKey and conformance NamedImage.BitmapKey, (void (*)(uint64_t))type metadata accessor for NamedImage.BitmapKey);
}

unint64_t lazy protocol witness table accessor for type Image.Location and conformance Image.Location()
{
  unint64_t result = lazy protocol witness table cache variable for type Image.Location and conformance Image.Location;
  if (!lazy protocol witness table cache variable for type Image.Location and conformance Image.Location)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.Location and conformance Image.Location);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Image.HashableScale and conformance Image.HashableScale()
{
  unint64_t result = lazy protocol witness table cache variable for type Image.HashableScale and conformance Image.HashableScale;
  if (!lazy protocol witness table cache variable for type Image.HashableScale and conformance Image.HashableScale)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.HashableScale and conformance Image.HashableScale);
  }
  return result;
}

ValueMetadata *type metadata accessor for NamedImage()
{
  return &type metadata for NamedImage;
}

void *initializeBufferWithCopyOfBuffer for NamedImage.VectorKey(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    uint64_t v7 = a2[2];
    *(void *)(a1 + 8) = a2[1];
    *(void *)(a1 + 16) = v7;
    *(void *)(a1 + 24) = a2[3];
    uint64_t v8 = a3[8];
    uint64_t v9 = a1 + v8;
    uint64_t v10 = (uint64_t)a2 + v8;
    *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
    uint64_t v11 = type metadata accessor for Locale();
    id v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = a3[10];
    *(void *)((char *)v4 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    *((unsigned char *)v4 + v13) = *((unsigned char *)a2 + v13);
    uint64_t v14 = a3[12];
    *(void *)((char *)v4 + a3[11]) = *(uint64_t *)((char *)a2 + a3[11]);
    uint64_t v15 = *(void **)((char *)a2 + v14);
    if ((unint64_t)v15 >= 2) {
      id v16 = v15;
    }
    *(void *)((char *)v4 + v14) = v15;
    *(void *)((char *)v4 + a3[13]) = *(uint64_t *)((char *)a2 + a3[13]);
  }
  return v4;
}

uint64_t assignWithCopy for NamedImage.VectorKey(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v6 = a3[8];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  uint64_t v10 = a3[12];
  uint64_t v11 = *(void **)(a1 + v10);
  id v12 = *(void **)(a2 + v10);
  if ((unint64_t)v11 >= 2)
  {
    if ((unint64_t)v12 >= 2)
    {
      *(void *)(a1 + v10) = v12;
      id v14 = v12;

      goto LABEL_8;
    }

    id v12 = *(void **)(a2 + v10);
    goto LABEL_6;
  }
  if ((unint64_t)v12 < 2)
  {
LABEL_6:
    *(void *)(a1 + v10) = v12;
    goto LABEL_8;
  }
  *(void *)(a1 + v10) = v12;
  id v13 = v12;
LABEL_8:
  *(void *)(a1 + a3[13]) = *(void *)(a2 + a3[13]);
  return a1;
}

uint64_t initializeWithTake for NamedImage.VectorKey(uint64_t a1, uint64_t a2, int *a3)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v6 = a3[8];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v10) = *(unsigned char *)(a2 + v10);
  uint64_t v11 = a3[12];
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  *(void *)(a1 + v11) = *(void *)(a2 + v11);
  *(void *)(a1 + a3[13]) = *(void *)(a2 + a3[13]);
  return a1;
}

uint64_t assignWithTake for NamedImage.VectorKey(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v7 = a3[8];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v11) = *(unsigned char *)(a2 + v11);
  uint64_t v12 = a3[12];
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  id v13 = *(void **)(a1 + v12);
  unint64_t v14 = *(void *)(a2 + v12);
  if ((unint64_t)v13 >= 2)
  {
    if (v14 >= 2)
    {
      *(void *)(a1 + v12) = v14;
    }
    else
    {

      *(void *)(a1 + v12) = *(void *)(a2 + v12);
    }
  }
  else
  {
    *(void *)(a1 + v12) = v14;
  }
  *(void *)(a1 + a3[13]) = *(void *)(a2 + a3[13]);
  return a1;
}

uint64_t getEnumTagSinglePayload for NamedImage.VectorKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_245DFF29C);
}

uint64_t sub_245DFF29C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for Locale();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 32);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for NamedImage.VectorKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_245DFF360);
}

uint64_t sub_245DFF360(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for Locale();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 32);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

_WORD *initializeBufferWithCopyOfBuffer for NamedImage.BitmapKey(_WORD *a1, uint64_t *a2, int *a3)
{
  unint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *(void *)unint64_t v4 = *a2;
    unint64_t v4 = (_WORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *(_WORD *)a2;
    uint64_t v7 = a2[2];
    *((void *)v4 + 1) = a2[1];
    *((void *)v4 + 2) = v7;
    uint64_t v8 = (void *)a2[4];
    *((void *)v4 + 3) = a2[3];
    swift_bridgeObjectRetain();
    if ((unint64_t)v8 >= 2) {
      id v9 = v8;
    }
    *((void *)v4 + 4) = v8;
    *((unsigned char *)v4 + 40) = *((unsigned char *)a2 + 40);
    uint64_t v10 = a3[9];
    uint64_t v11 = (char *)v4 + v10;
    uint64_t v12 = (uint64_t)a2 + v10;
    uint64_t v13 = type metadata accessor for Locale();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
    uint64_t v14 = a3[11];
    *((unsigned char *)v4 + a3[10]) = *((unsigned char *)a2 + a3[10]);
    *(void *)((char *)v4 + v14) = *(uint64_t *)((char *)a2 + v14);
    uint64_t v15 = a3[13];
    *(void *)((char *)v4 + a3[12]) = *(uint64_t *)((char *)a2 + a3[12]);
    *((unsigned char *)v4 + v15) = *((unsigned char *)a2 + v15);
    *((unsigned char *)v4 + a3[14]) = *((unsigned char *)a2 + a3[14]);
  }
  return v4;
}

uint64_t assignWithCopy for NamedImage.BitmapKey(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v6 = *(void **)(a1 + 32);
  uint64_t v7 = *(void **)(a2 + 32);
  if ((unint64_t)v6 >= 2)
  {
    if ((unint64_t)v7 >= 2)
    {
      *(void *)(a1 + 32) = v7;
      id v9 = v7;

      goto LABEL_8;
    }

    uint64_t v7 = *(void **)(a2 + 32);
    goto LABEL_6;
  }
  if ((unint64_t)v7 < 2)
  {
LABEL_6:
    *(void *)(a1 + 32) = v7;
    goto LABEL_8;
  }
  *(void *)(a1 + 32) = v7;
  id v8 = v7;
LABEL_8:
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v10 = a3[9];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  *(unsigned char *)(a1 + a3[14]) = *(unsigned char *)(a2 + a3[14]);
  return a1;
}

uint64_t initializeWithTake for NamedImage.BitmapKey(uint64_t a1, uint64_t a2, int *a3)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v6 = a3[9];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[11];
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  *(void *)(a1 + v10) = *(void *)(a2 + v10);
  uint64_t v11 = a3[13];
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  *(unsigned char *)(a1 + v11) = *(unsigned char *)(a2 + v11);
  *(unsigned char *)(a1 + a3[14]) = *(unsigned char *)(a2 + a3[14]);
  return a1;
}

uint64_t assignWithTake for NamedImage.BitmapKey(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v7 = *(void **)(a1 + 32);
  unint64_t v8 = *(void *)(a2 + 32);
  if ((unint64_t)v7 >= 2)
  {
    if (v8 >= 2)
    {
      *(void *)(a1 + 32) = v8;

      goto LABEL_6;
    }
  }
  *(void *)(a1 + 32) = v8;
LABEL_6:
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v9 = a3[9];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 40))(v10, v11, v12);
  uint64_t v13 = a3[11];
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  *(void *)(a1 + v13) = *(void *)(a2 + v13);
  uint64_t v14 = a3[13];
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  *(unsigned char *)(a1 + v14) = *(unsigned char *)(a2 + v14);
  *(unsigned char *)(a1 + a3[14]) = *(unsigned char *)(a2 + a3[14]);
  return a1;
}

uint64_t getEnumTagSinglePayload for NamedImage.BitmapKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_245DFF894);
}

uint64_t sub_245DFF894(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for Locale();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 36);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for NamedImage.BitmapKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_245DFF958);
}

uint64_t sub_245DFF958(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for Locale();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 36);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t initializeWithCopy for NamedImage.BitmapInfo(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of GraphicsImage.Contents(*(id *)a2, v5);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  return a1;
}

uint64_t assignWithCopy for NamedImage.BitmapInfo(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of GraphicsImage.Contents(*(id *)a2, v5);
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = v4;
  char v7 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of GraphicsImage.Contents(v6, v7);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  long long v8 = *(_OWORD *)(a2 + 56);
  long long v9 = *(_OWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v9;
  *(_OWORD *)(a1 + 56) = v8;
  return a1;
}

uint64_t assignWithTake for NamedImage.BitmapInfo(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 8);
  char v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  char v6 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v4;
  outlined consume of GraphicsImage.Contents(v5, v6);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  return a1;
}

uint64_t getEnumTagSinglePayload for NamedImage.BitmapInfo(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 89)) {
    return (*(_DWORD *)a1 + 254);
  }
  if (*(unsigned __int8 *)(a1 + 48) <= 2u) {
    int v3 = 2;
  }
  else {
    int v3 = *(unsigned __int8 *)(a1 + 48);
  }
  int v4 = v3 - 3;
  if (*(unsigned __int8 *)(a1 + 48) < 2u) {
    int v5 = -1;
  }
  else {
    int v5 = v4;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for NamedImage.BitmapInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 88) = 0;
    *(void *)unint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 89) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 89) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 48) = a2 + 2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NamedImage.BitmapInfo()
{
  return &type metadata for NamedImage.BitmapInfo;
}

uint64_t initializeWithCopy for NamedImage.DecodedInfo(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of GraphicsImage.Contents(*(id *)a2, v5);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t assignWithCopy for NamedImage.DecodedInfo(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of GraphicsImage.Contents(*(id *)a2, v5);
  char v6 = *(void **)a1;
  *(void *)a1 = v4;
  char v7 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of GraphicsImage.Contents(v6, v7);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for NamedImage.DecodedInfo(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 8);
  char v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  char v6 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v4;
  outlined consume of GraphicsImage.Contents(v5, v6);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for NamedImage.DecodedInfo(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFB && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 251);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 5) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NamedImage.DecodedInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)unint64_t result = a2 - 251;
    if (a3 >= 0xFB) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFB) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NamedImage.DecodedInfo()
{
  return &type metadata for NamedImage.DecodedInfo;
}

uint64_t initializeBufferWithCopyOfBuffer for NamedImage.Key(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *(void *)a1 = *a2;
    a1 = v7 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *(_WORD *)a1 = *(_WORD *)a2;
      uint64_t v8 = a2[2];
      *(void *)(a1 + 8) = a2[1];
      *(void *)(a1 + 16) = v8;
      long long v9 = (void *)a2[4];
      *(void *)(a1 + 24) = a2[3];
      swift_bridgeObjectRetain();
      if ((unint64_t)v9 >= 2) {
        id v10 = v9;
      }
      *(void *)(a1 + 32) = v9;
      *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
      uint64_t v11 = (int *)type metadata accessor for NamedImage.BitmapKey(0);
      uint64_t v12 = v11[9];
      uint64_t v13 = a1 + v12;
      uint64_t v14 = (uint64_t)a2 + v12;
      uint64_t v15 = type metadata accessor for Locale();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
      *(unsigned char *)(a1 + v11[10]) = *((unsigned char *)a2 + v11[10]);
      *(void *)(a1 + v11[11]) = *(uint64_t *)((char *)a2 + v11[11]);
      *(void *)(a1 + v11[12]) = *(uint64_t *)((char *)a2 + v11[12]);
      *(unsigned char *)(a1 + v11[13]) = *((unsigned char *)a2 + v11[13]);
      *(unsigned char *)(a1 + v11[14]) = *((unsigned char *)a2 + v11[14]);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for NamedImage.Key(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = type metadata accessor for UUID();
  }
  else
  {
    swift_bridgeObjectRelease();
    unsigned int v3 = *(void **)(a1 + 32);
    if ((unint64_t)v3 >= 2) {

    }
    a1 += *(int *)(type metadata accessor for NamedImage.BitmapKey(0) + 36);
    uint64_t v2 = type metadata accessor for Locale();
  }
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v4(a1, v2);
}

uint64_t initializeWithCopy for NamedImage.Key(uint64_t a1, uint64_t a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    uint64_t v5 = *(void *)(a2 + 16);
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a1 + 16) = v5;
    uint64_t v6 = *(void **)(a2 + 32);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    swift_bridgeObjectRetain();
    if ((unint64_t)v6 >= 2) {
      id v7 = v6;
    }
    *(void *)(a1 + 32) = v6;
    *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
    uint64_t v8 = (int *)type metadata accessor for NamedImage.BitmapKey(0);
    uint64_t v9 = v8[9];
    uint64_t v10 = a1 + v9;
    uint64_t v11 = a2 + v9;
    uint64_t v12 = type metadata accessor for Locale();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    *(unsigned char *)(a1 + v8[10]) = *(unsigned char *)(a2 + v8[10]);
    *(void *)(a1 + v8[11]) = *(void *)(a2 + v8[11]);
    *(void *)(a1 + v8[12]) = *(void *)(a2 + v8[12]);
    *(unsigned char *)(a1 + v8[13]) = *(unsigned char *)(a2 + v8[13]);
    *(unsigned char *)(a1 + v8[14]) = *(unsigned char *)(a2 + v8[14]);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for NamedImage.Key(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of NamedImage.BitmapKey(a1, type metadata accessor for NamedImage.Key);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v4 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
    }
    else
    {
      *(_WORD *)a1 = *(_WORD *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      uint64_t v5 = *(void **)(a2 + 32);
      swift_bridgeObjectRetain();
      if ((unint64_t)v5 >= 2) {
        id v6 = v5;
      }
      *(void *)(a1 + 32) = v5;
      *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
      id v7 = (int *)type metadata accessor for NamedImage.BitmapKey(0);
      uint64_t v8 = v7[9];
      uint64_t v9 = a1 + v8;
      uint64_t v10 = a2 + v8;
      uint64_t v11 = type metadata accessor for Locale();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
      *(unsigned char *)(a1 + v7[10]) = *(unsigned char *)(a2 + v7[10]);
      *(void *)(a1 + v7[11]) = *(void *)(a2 + v7[11]);
      *(void *)(a1 + v7[12]) = *(void *)(a2 + v7[12]);
      *(unsigned char *)(a1 + v7[13]) = *(unsigned char *)(a2 + v7[13]);
      *(unsigned char *)(a1 + v7[14]) = *(unsigned char *)(a2 + v7[14]);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for NamedImage.Key(uint64_t a1, uint64_t a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
    uint64_t v5 = (int *)type metadata accessor for NamedImage.BitmapKey(0);
    uint64_t v6 = v5[9];
    uint64_t v7 = a1 + v6;
    uint64_t v8 = a2 + v6;
    uint64_t v9 = type metadata accessor for Locale();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
    *(unsigned char *)(a1 + v5[10]) = *(unsigned char *)(a2 + v5[10]);
    *(void *)(a1 + v5[11]) = *(void *)(a2 + v5[11]);
    *(void *)(a1 + v5[12]) = *(void *)(a2 + v5[12]);
    *(unsigned char *)(a1 + v5[13]) = *(unsigned char *)(a2 + v5[13]);
    *(unsigned char *)(a1 + v5[14]) = *(unsigned char *)(a2 + v5[14]);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for NamedImage.Key(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of NamedImage.BitmapKey(a1, type metadata accessor for NamedImage.Key);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v4 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
    }
    else
    {
      *(_WORD *)a1 = *(_WORD *)a2;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
      uint64_t v5 = (int *)type metadata accessor for NamedImage.BitmapKey(0);
      uint64_t v6 = v5[9];
      uint64_t v7 = a1 + v6;
      uint64_t v8 = a2 + v6;
      uint64_t v9 = type metadata accessor for Locale();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
      *(unsigned char *)(a1 + v5[10]) = *(unsigned char *)(a2 + v5[10]);
      *(void *)(a1 + v5[11]) = *(void *)(a2 + v5[11]);
      *(void *)(a1 + v5[12]) = *(void *)(a2 + v5[12]);
      *(unsigned char *)(a1 + v5[13]) = *(unsigned char *)(a2 + v5[13]);
      *(unsigned char *)(a1 + v5[14]) = *(unsigned char *)(a2 + v5[14]);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata completion function for NamedImage.Key()
{
  uint64_t result = type metadata accessor for NamedImage.BitmapKey(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for UUID();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for NamedImage.Errors(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245E00818);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NamedImage.Errors()
{
  return &type metadata for NamedImage.Errors;
}

void *assignWithCopy for NamedImage.Cache(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for NamedImage.Cache()
{
  return &type metadata for NamedImage.Cache;
}

void *initializeBufferWithCopyOfBuffer for Image.Location(void *a1, void **a2)
{
  int v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF) {
    id v4 = v3;
  }
  *a1 = v3;
  return a1;
}

void destroy for Image.Location(void **a1)
{
  unint64_t v1 = *a1;
  if ((unint64_t)v1 >= 0xFFFFFFFF) {
}
  }

void **assignWithCopy for Image.Location(void **a1, void **a2)
{
  int v3 = *a1;
  id v4 = *a2;
  if ((unint64_t)*a1 < 0xFFFFFFFF)
  {
    if ((unint64_t)v4 >= 0xFFFFFFFF)
    {
      *a1 = v4;
      id v6 = v4;
      return a1;
    }
LABEL_7:
    *a1 = v4;
    return a1;
  }
  if ((unint64_t)v4 < 0xFFFFFFFF)
  {

    id v4 = *a2;
    goto LABEL_7;
  }
  *a1 = v4;
  id v5 = v4;

  return a1;
}

void **assignWithTake for Image.Location(void **a1, unint64_t *a2)
{
  int v3 = *a1;
  unint64_t v4 = *a2;
  if ((unint64_t)*a1 < 0xFFFFFFFF) {
    goto LABEL_6;
  }
  if (v4 < 0xFFFFFFFF)
  {

LABEL_6:
    *a1 = (void *)v4;
    return a1;
  }
  *a1 = (void *)v4;

  return a1;
}

ValueMetadata *type metadata accessor for Image.Location()
{
  return &type metadata for Image.Location;
}

uint64_t destroy for Image.Location.SystemAssetManager(id *a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for Image.Location.SystemAssetManager(void *a1, uint64_t a2)
{
  int v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v5;
  id v6 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Image.Location.SystemAssetManager(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Image.Location.SystemAssetManager(uint64_t a1, _OWORD *a2)
{
  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = a2[1];
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for Image.Location.SystemAssetManager()
{
  return &type metadata for Image.Location.SystemAssetManager;
}

uint64_t initializeWithCopy for Image.NamedImageProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  uint64_t v5 = *(void **)(a2 + 24);
  swift_bridgeObjectRetain();
  if ((unint64_t)v5 >= 2) {
    id v6 = v5;
  }
  *(void *)(a1 + 24) = v5;
  unint64_t v7 = *(void *)(a2 + 32);
  if (v7 >= 2)
  {
    if (v7 != 2)
    {
      *(void *)(a1 + 32) = v7;
      id v8 = (id)v7;
      goto LABEL_8;
    }
    unint64_t v7 = 2;
  }
  *(void *)(a1 + 32) = v7;
LABEL_8:
  unint64_t v9 = *(void *)(a2 + 56);
  if (v9 >> 1 == 0xFFFFFFFF)
  {
    long long v10 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v10;
  }
  else
  {
    uint64_t v11 = *(void *)(a2 + 40);
    uint64_t v12 = *(void *)(a2 + 48);
    uint64_t v13 = *(void *)(a2 + 64);
    outlined copy of AccessibilityImageLabel(v11, v12, *(void *)(a2 + 56));
    *(void *)(a1 + 40) = v11;
    *(void *)(a1 + 48) = v12;
    *(void *)(a1 + 56) = v9;
    *(void *)(a1 + 64) = v13;
  }
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  return a1;
}

uint64_t assignWithCopy for Image.NamedImageProvider(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  int v4 = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void **)(a1 + 24);
  id v6 = *(void **)(a2 + 24);
  if ((unint64_t)v5 < 2)
  {
    if ((unint64_t)v6 >= 2)
    {
      *(void *)(a1 + 24) = v6;
      id v7 = v6;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if ((unint64_t)v6 < 2)
  {

    id v6 = *(void **)(a2 + 24);
LABEL_6:
    *(void *)(a1 + 24) = v6;
    goto LABEL_8;
  }
  *(void *)(a1 + 24) = v6;
  id v8 = v6;

LABEL_8:
  unint64_t v9 = (unint64_t *)(a1 + 32);
  long long v10 = *(void **)(a1 + 32);
  unint64_t v11 = *(void *)(a2 + 32);
  if (v10 == (void *)2)
  {
    if (v11 < 2)
    {
LABEL_20:
      *unint64_t v9 = v11;
      goto LABEL_21;
    }
    if (v11 == 2)
    {
      unint64_t v11 = 2;
      goto LABEL_20;
    }
LABEL_16:
    *unint64_t v9 = v11;
    id v12 = (id)v11;
    goto LABEL_21;
  }
  if (v11 == 2)
  {
    outlined destroy of Image.Location((id *)(a1 + 32));
LABEL_19:
    unint64_t v11 = *(void *)(a2 + 32);
    goto LABEL_20;
  }
  if ((unint64_t)v10 < 2)
  {
    if (v11 < 2) {
      goto LABEL_20;
    }
    goto LABEL_16;
  }
  if (v11 < 2)
  {

    goto LABEL_19;
  }
  *unint64_t v9 = v11;
  id v29 = (id)v11;

LABEL_21:
  uint64_t v13 = (_OWORD *)(a1 + 40);
  uint64_t v14 = (_OWORD *)(a2 + 40);
  uint64_t v15 = *(void *)(a2 + 56);
  unint64_t v16 = v15 & 0xFFFFFFFFFFFFFFFELL;
  if (*(void *)(a1 + 56) >> 1 == 0xFFFFFFFFLL)
  {
    if (v16 == 0x1FFFFFFFELL)
    {
      long long v17 = *(_OWORD *)(a2 + 56);
      *uint64_t v13 = *v14;
      *(_OWORD *)(a1 + 56) = v17;
    }
    else
    {
      uint64_t v19 = *(void *)(a2 + 40);
      uint64_t v20 = *(void *)(a2 + 48);
      uint64_t v21 = *(void *)(a2 + 64);
      outlined copy of AccessibilityImageLabel(v19, v20, *(void *)(a2 + 56));
      *(void *)(a1 + 40) = v19;
      *(void *)(a1 + 48) = v20;
      *(void *)(a1 + 56) = v15;
      *(void *)(a1 + 64) = v21;
    }
  }
  else if (v16 == 0x1FFFFFFFELL)
  {
    outlined destroy of AccessibilityImageLabel(a1 + 40);
    long long v18 = *(_OWORD *)(a2 + 56);
    *uint64_t v13 = *v14;
    *(_OWORD *)(a1 + 56) = v18;
  }
  else
  {
    uint64_t v22 = *(void *)(a2 + 40);
    uint64_t v23 = *(void *)(a2 + 48);
    uint64_t v24 = *(void *)(a2 + 64);
    outlined copy of AccessibilityImageLabel(v22, v23, *(void *)(a2 + 56));
    uint64_t v25 = *(void *)(a1 + 40);
    uint64_t v26 = *(void *)(a1 + 48);
    uint64_t v27 = *(void *)(a1 + 56);
    *(void *)(a1 + 40) = v22;
    *(void *)(a1 + 48) = v23;
    *(void *)(a1 + 56) = v15;
    *(void *)(a1 + 64) = v24;
    outlined consume of AccessibilityImageLabel(v25, v26, v27);
  }
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  return a1;
}

id *outlined destroy of Image.Location(id *a1)
{
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {

  }
  return a1;
}

uint64_t assignWithTake for Image.NamedImageProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  uint64_t v5 = *(void **)(a1 + 24);
  unint64_t v6 = *(void *)(a2 + 24);
  if ((unint64_t)v5 < 2) {
    goto LABEL_4;
  }
  if (v6 < 2)
  {

LABEL_4:
    *(void *)(a1 + 24) = v6;
    goto LABEL_6;
  }
  *(void *)(a1 + 24) = v6;

LABEL_6:
  id v8 = (unint64_t *)(a1 + 32);
  id v7 = *(void **)(a1 + 32);
  unint64_t v9 = *(void *)(a2 + 32);
  if (v7 == (void *)2)
  {
    if (v9 != 2)
    {
      *id v8 = v9;
      goto LABEL_17;
    }
    goto LABEL_11;
  }
  if (v9 == 2)
  {
    outlined destroy of Image.Location((id *)(a1 + 32));
LABEL_11:
    *id v8 = 2;
    goto LABEL_17;
  }
  if ((unint64_t)v7 >= 2)
  {
    if (v9 >= 2)
    {
      *id v8 = v9;
    }
    else
    {

      *id v8 = v9;
    }
  }
  else
  {
    *id v8 = v9;
  }
LABEL_17:
  unint64_t v10 = *(void *)(a1 + 56);
  if (v10 >> 1 != 0xFFFFFFFF)
  {
    unint64_t v11 = *(void *)(a2 + 56);
    if (v11 >> 1 != 0xFFFFFFFF)
    {
      uint64_t v13 = *(void *)(a2 + 64);
      uint64_t v14 = *(void *)(a1 + 40);
      uint64_t v15 = *(void *)(a1 + 48);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(void *)(a1 + 56) = v11;
      *(void *)(a1 + 64) = v13;
      outlined consume of AccessibilityImageLabel(v14, v15, v10);
      goto LABEL_22;
    }
    outlined destroy of AccessibilityImageLabel(a1 + 40);
  }
  long long v12 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v12;
LABEL_22:
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for Image.NamedImageProvider(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 73)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Image.NamedImageProvider(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 72) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 73) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 73) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Image.NamedImageProvider()
{
  return &type metadata for Image.NamedImageProvider;
}

unsigned char *storeEnumTagSinglePayload for Image.HashableScale(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245E0116CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Image.HashableScale()
{
  return &type metadata for Image.HashableScale;
}

uint64_t initializeBufferWithCopyOfBuffer for Image.ResolvedUUID(uint64_t a1, uint64_t a2)
{
  int v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  id v5 = v3;
  return a1;
}

uint64_t assignWithCopy for Image.ResolvedUUID(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for Image.ResolvedUUID(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for Image.ResolvedUUID()
{
  return &type metadata for Image.ResolvedUUID;
}

uint64_t *initializeBufferWithCopyOfBuffer for UUIDImageProvider(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 24);
    *(_OWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 20));
    unint64_t v9 = (char *)a1 + v8;
    unint64_t v10 = (char *)a2 + v8;
    if (*(uint64_t *)((char *)a2 + v8 + 24))
    {
      uint64_t v11 = *(void *)v10;
      uint64_t v12 = *((void *)v10 + 1);
      char v13 = v10[16];
      outlined copy of Text.Storage(*(void *)v10, v12, v13);
      *(void *)unint64_t v9 = v11;
      *((void *)v9 + 1) = v12;
      v9[16] = v13;
      *((void *)v9 + 3) = *((void *)v10 + 3);
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v15 = *((_OWORD *)v10 + 1);
      *(_OWORD *)unint64_t v9 = *(_OWORD *)v10;
      *((_OWORD *)v9 + 1) = v15;
    }
  }
  return a1;
}

uint64_t destroy for UUIDImageProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v6 = a1 + *(int *)(a2 + 24);
  if (*(void *)(v6 + 24))
  {
    outlined consume of Text.Storage(*(void *)v6, *(void *)(v6 + 8), *(unsigned char *)(v6 + 16));
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for UUIDImageProvider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  if (*(void *)(a2 + v7 + 24))
  {
    uint64_t v10 = *(void *)v9;
    uint64_t v11 = *(void *)(v9 + 8);
    char v12 = *(unsigned char *)(v9 + 16);
    outlined copy of Text.Storage(*(void *)v9, v11, v12);
    *(void *)uint64_t v8 = v10;
    *(void *)(v8 + 8) = v11;
    *(unsigned char *)(v8 + 16) = v12;
    *(void *)(v8 + 24) = *(void *)(v9 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v13 = *(_OWORD *)(v9 + 16);
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    *(_OWORD *)(v8 + 16) = v13;
  }
  return a1;
}

uint64_t assignWithCopy for UUIDImageProvider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = *(void *)(a1 + v10 + 24);
  uint64_t v14 = *(void *)(a2 + v10 + 24);
  if (v13)
  {
    if (v14)
    {
      uint64_t v15 = *(void *)v12;
      uint64_t v16 = *(void *)(v12 + 8);
      char v17 = *(unsigned char *)(v12 + 16);
      outlined copy of Text.Storage(*(void *)v12, v16, v17);
      uint64_t v18 = *(void *)v11;
      uint64_t v19 = *(void *)(v11 + 8);
      char v20 = *(unsigned char *)(v11 + 16);
      *(void *)uint64_t v11 = v15;
      *(void *)(v11 + 8) = v16;
      *(unsigned char *)(v11 + 16) = v17;
      outlined consume of Text.Storage(v18, v19, v20);
      *(void *)(v11 + 24) = *(void *)(v12 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(v11);
      long long v24 = *(_OWORD *)(v12 + 16);
      *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
      *(_OWORD *)(v11 + 16) = v24;
    }
  }
  else if (v14)
  {
    uint64_t v21 = *(void *)v12;
    uint64_t v22 = *(void *)(v12 + 8);
    char v23 = *(unsigned char *)(v12 + 16);
    outlined copy of Text.Storage(*(void *)v12, v22, v23);
    *(void *)uint64_t v11 = v21;
    *(void *)(v11 + 8) = v22;
    *(unsigned char *)(v11 + 16) = v23;
    *(void *)(v11 + 24) = *(void *)(v12 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v25 = *(_OWORD *)(v12 + 16);
    *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
    *(_OWORD *)(v11 + 16) = v25;
  }
  return a1;
}

uint64_t initializeWithTake for UUIDImageProvider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  uint64_t v8 = (_OWORD *)(a1 + v7);
  uint64_t v9 = (_OWORD *)(a2 + v7);
  long long v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  return a1;
}

uint64_t assignWithTake for UUIDImageProvider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  if (!*(void *)(a1 + v7 + 24)) {
    goto LABEL_5;
  }
  if (!*(void *)(v9 + 24))
  {
    outlined destroy of Text(a1 + v7);
LABEL_5:
    long long v14 = *(_OWORD *)(v9 + 16);
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    *(_OWORD *)(v8 + 16) = v14;
    return a1;
  }
  char v10 = *(unsigned char *)(v9 + 16);
  uint64_t v11 = *(void *)v8;
  uint64_t v12 = *(void *)(v8 + 8);
  char v13 = *(unsigned char *)(v8 + 16);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *(unsigned char *)(v8 + 16) = v10;
  outlined consume of Text.Storage(v11, v12, v13);
  *(void *)(v8 + 24) = *(void *)(v9 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for UUIDImageProvider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_245E017C4);
}

uint64_t sub_245E017C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24) + 24);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for UUIDImageProvider(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_245E018A8);
}

uint64_t sub_245E018A8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24) + 24) = a2;
  }
  return result;
}

uint64_t type metadata completion function for UUIDImageProvider()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *type metadata accessor for Image.Location.Error()
{
  return &unk_26FA7DC20;
}

uint64_t destroy for NamedImage.VectorInfo(id *a1)
{
  return swift_unknownObjectWeakDestroy();
}

uint64_t assignWithCopy for NamedImage.VectorInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  int v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_unknownObjectWeakCopyAssign();
  return a1;
}

uint64_t assignWithTake for NamedImage.VectorInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  long long v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
  long long v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  swift_unknownObjectWeakTakeAssign();
  return a1;
}

ValueMetadata *type metadata accessor for NamedImage.VectorInfo()
{
  return &type metadata for NamedImage.VectorInfo;
}

ValueMetadata *type metadata accessor for NamedImage.Cache.WeakCatalog()
{
  return &type metadata for NamedImage.Cache.WeakCatalog;
}

void *type metadata accessor for NamedImage.Cache.ImageCacheData()
{
  return &unk_26FA402C8;
}

uint64_t instantiation function for generic protocol witness table for UUIDImageProvider(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type Locale and conformance Locale(&lazy protocol witness table cache variable for type UUIDImageProvider and conformance UUIDImageProvider, (void (*)(uint64_t))type metadata accessor for UUIDImageProvider);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_245E01BE8()
{
  return swift_deallocObject();
}

uint64_t sub_245E01BF8()
{
  unint64_t v1 = *(void **)(v0 + 32);
  if ((unint64_t)v1 >= 2) {

  }
  return swift_deallocObject();
}

uint64_t sub_245E01C48()
{
  return swift_deallocObject();
}

void type metadata accessor for (key: URL, value: NamedImage.Cache.WeakCatalog)()
{
  if (!lazy cache variable for type metadata for (key: URL, value: NamedImage.Cache.WeakCatalog))
  {
    type metadata accessor for URL();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (key: URL, value: NamedImage.Cache.WeakCatalog));
    }
  }
}

uint64_t sub_245E01CC4()
{
  swift_release();
  uint64_t v1 = *(void **)(v0 + 24);
  if ((unint64_t)v1 >= 3) {

  }
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t outlined consume of VectorImageLayer?(uint64_t result, void *a2)
{
  if (result)
  {
    swift_release();
    outlined consume of Image.Location?(a2);
    return swift_bridgeObjectRelease();
  }
  return result;
}

void type metadata accessor for (NamedImage.Key, NamedImage.Key)()
{
  if (!lazy cache variable for type metadata for (NamedImage.Key, NamedImage.Key))
  {
    type metadata accessor for NamedImage.Key(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (NamedImage.Key, NamedImage.Key));
    }
  }
}

ValueMetadata *type metadata accessor for Image.Location.BundlePath()
{
  return &type metadata for Image.Location.BundlePath;
}

unsigned char *storeEnumTagSinglePayload for Image.Location.BundlePath.Error(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x245E01E70);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for Image.Location.BundlePath.Error()
{
  return &type metadata for Image.Location.BundlePath.Error;
}

unint64_t lazy protocol witness table accessor for type Image.Location.BundlePath.Error and conformance Image.Location.BundlePath.Error()
{
  unint64_t result = lazy protocol witness table cache variable for type Image.Location.BundlePath.Error and conformance Image.Location.BundlePath.Error;
  if (!lazy protocol witness table cache variable for type Image.Location.BundlePath.Error and conformance Image.Location.BundlePath.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.Location.BundlePath.Error and conformance Image.Location.BundlePath.Error);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Image.Location.BundlePath.Error and conformance Image.Location.BundlePath.Error;
  if (!lazy protocol witness table cache variable for type Image.Location.BundlePath.Error and conformance Image.Location.BundlePath.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.Location.BundlePath.Error and conformance Image.Location.BundlePath.Error);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Image.Location.BundlePath and conformance Image.Location.BundlePath()
{
  unint64_t result = lazy protocol witness table cache variable for type Image.Location.BundlePath and conformance Image.Location.BundlePath;
  if (!lazy protocol witness table cache variable for type Image.Location.BundlePath and conformance Image.Location.BundlePath)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.Location.BundlePath and conformance Image.Location.BundlePath);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Image.Location.BundlePath and conformance Image.Location.BundlePath;
  if (!lazy protocol witness table cache variable for type Image.Location.BundlePath and conformance Image.Location.BundlePath)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.Location.BundlePath and conformance Image.Location.BundlePath);
  }
  return result;
}

uint64_t VectorArithmetic.scaled(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(a3, v4, a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, double))(a2 + 16))(a1, a2, a4);
}

Swift::Void __swiftcall VectorArithmetic.applyUnitScale()()
{
  (*(void (**)(double))(v0 + 16))(128.0);
}

Swift::Void __swiftcall VectorArithmetic.unapplyUnitScale()()
{
  (*(void (**)(double))(v0 + 16))(0.0078125);
}

uint64_t mix<A>(_:_:by:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>, double a4@<D0>)
{
  dispatch thunk of static AdditiveArithmetic.-= infix(_:_:)();
  (*(void (**)(uint64_t, uint64_t, double))(a2 + 16))(a1, a2, a4);
  return dispatch thunk of static AdditiveArithmetic.+= infix(_:_:)();
}

double static VectorArithmetic.unitScale.getter()
{
  return 128.0;
}

double static VectorArithmetic.inverseUnitScale.getter()
{
  return 0.0078125;
}

Swift::Void __swiftcall Float.scale(by:)(Swift::Double by)
{
  float v2 = by;
  *uint64_t v1 = *v1 * v2;
}

double Float.magnitudeSquared.getter(float a1)
{
  return (float)(a1 * a1);
}

float protocol witness for VectorArithmetic.scale(by:) in conformance Float(double a1)
{
  float v2 = a1;
  float result = *v1 * v2;
  *uint64_t v1 = result;
  return result;
}

double protocol witness for VectorArithmetic.magnitudeSquared.getter in conformance Float()
{
  return (float)(*v0 * *v0);
}

double Double.magnitudeSquared.getter(double a1)
{
  return a1 * a1;
}

Swift::Void __swiftcall CGFloat.scale(by:)(Swift::Double by)
{
  *uint64_t v1 = *v1 * by;
}

double CGFloat.magnitudeSquared.getter(double a1)
{
  return a1 * a1;
}

double protocol witness for VectorArithmetic.magnitudeSquared.getter in conformance CGFloat()
{
  return *v0 * *v0;
}

uint64_t dispatch thunk of VectorArithmetic.magnitudeSquared.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t specialized Collection.prefix(_:)(uint64_t result, uint64_t a2, uint64_t a3, int64_t a4, unint64_t a5)
{
  if (result < 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  int64_t v5 = a5 >> 1;
  uint64_t v6 = (a5 >> 1) - a4;
  if (__OFSUB__(a5 >> 1, a4))
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (!result || v6 < 0 || (int64_t v7 = a5 >> 1, v6 >= result))
  {
    int64_t v7 = a4 + result;
    if (__OFADD__(a4, result)) {
      goto LABEL_18;
    }
  }
  if (v7 < a4) {
    goto LABEL_14;
  }
  if (v5 < a4)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v5 >= v7)
  {
    if ((v7 & 0x8000000000000000) == 0) {
      return a2;
    }
    goto LABEL_17;
  }
LABEL_16:
  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t specialized Collection.prefix(_:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result < 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v3 = a3 - a2;
  if (__OFSUB__(a3, a2))
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (result && (v3 & 0x8000000000000000) == 0 && v3 < result)
  {
LABEL_10:
    if (a3 >= a2) {
      return a2;
    }
    goto LABEL_14;
  }
  uint64_t v4 = a2 + result;
  if (!__OFADD__(a2, result))
  {
    if (v4 < a2) {
      goto LABEL_16;
    }
    BOOL v5 = v4 <= a3;
    a3 = a2 + result;
    if (!v5) {
      goto LABEL_16;
    }
    goto LABEL_10;
  }
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

uint64_t specialized Collection.prefix(_:)(uint64_t result, uint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v3 = *(void *)(a2 + 16);
    if ((uint64_t)v3 >= result) {
      unint64_t v4 = result;
    }
    else {
      unint64_t v4 = *(void *)(a2 + 16);
    }
    if (result) {
      unint64_t v5 = v4;
    }
    else {
      unint64_t v5 = 0;
    }
    if (v3 >= v5)
    {
      type metadata accessor for UUID();
      return a2;
    }
  }
  __break(1u);
  return result;
}

int64_t specialized Collection.prefix(_:)(int64_t result, uint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v2 = *(void *)(a2 + 16);
    if ((uint64_t)v2 >= result) {
      unint64_t v3 = result;
    }
    else {
      unint64_t v3 = *(void *)(a2 + 16);
    }
    if (!result) {
      unint64_t v3 = 0;
    }
    if (v2 >= v3) {
      return a2;
    }
  }
  __break(1u);
  return result;
}

uint64_t _ViewListCountInputs.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PropertyList.subscript.getter(a1, *v3, a2, *(void *)(a3 + 8));
}

uint64_t _ViewListCountInputs.subscript.setter(uint64_t a1, Swift::Int a2, uint64_t a3, uint64_t a4)
{
  specialized _ViewListCountInputs.subscript.setter(a1, a2, a3, a4);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);

  return v6(a1, AssociatedTypeWitness);
}

_OWORD *_ViewListOutputs.init(_:nextImplicitID:staticCount:)@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  float result = outlined init with take of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content(a1, (_OWORD *)a5);
  *(void *)(a5 + 48) = a2;
  *(void *)(a5 + 56) = a3;
  *(unsigned char *)(a5 + 64) = a4 & 1;
  return result;
}

uint64_t _ViewListCountInputs.base.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  int v4 = *((_DWORD *)v1 + 4);
  int v5 = *MEMORY[0x263F288F8];
  *(_DWORD *)(a1 + 32) = -1;
  *(void *)(a1 + 40) = MEMORY[0x263F8EE88];
  *(_DWORD *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 24) = v5;
  uint64_t v6 = MEMORY[0x263F8EE78];
  unint64_t v7 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  _s7SwiftUI10MutableBoxCyAA17CachedEnvironmentVGMaTm_4(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(void, uint64_t))type metadata accessor for MutableBox);
  uint64_t v8 = swift_allocObject();
  *(_DWORD *)(v8 + 16) = v5;
  *(void *)(v8 + 24) = v6;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_WORD *)(v8 + 80) = 256;
  *(void *)(v8 + 88) = v7;
  *(void *)(a1 + 16) = v8;
  *(_DWORD *)(a1 + 28) = v5;
  *(void *)a1 = v3;
  *(_DWORD *)(a1 + 36) = v4;

  return swift_retain();
}

SwiftUI::_ViewListInputs::Options __swiftcall _ViewListInputs.Options.init(rawValue:)(SwiftUI::_ViewListInputs::Options rawValue)
{
  v1->rawuint64_t Value = rawValue.rawValue;
  return rawValue;
}

uint64_t _ViewListInputs.subscript.setter(uint64_t a1, Swift::Int a2, uint64_t a3, uint64_t a4)
{
  specialized _ViewInputs.subscript.setter(a1, a2, a3, a4);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);

  return v6(a1, AssociatedTypeWitness);
}

uint64_t _ViewList_Elements.makeAllElements(inputs:body:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _OWORD *a6@<X8>)
{
  uint64_t v10 = *a1;
  int v11 = *((_DWORD *)a1 + 2);
  uint64_t v12 = a1[2];
  int v13 = *((_DWORD *)a1 + 20);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a2;
  *(void *)(v14 + 24) = a3;
  uint64_t v31 = 0;
  uint64_t v22 = v10;
  int v23 = v11;
  uint64_t v24 = v12;
  long long v15 = *(_OWORD *)(a1 + 5);
  long long v25 = *(_OWORD *)(a1 + 3);
  long long v26 = v15;
  long long v27 = *(_OWORD *)(a1 + 7);
  uint64_t v28 = a1[9];
  int v29 = v13;
  char v20 = _s7SwiftUI11_ViewInputsVAcA01_C7OutputsVIegnr_AESgIgngr_A2cEIegnr_AFIegngr_TRTA_0;
  uint64_t v21 = v14;
  (*(void (**)(long long *, uint64_t *, uint64_t *, void, uint64_t (*)(uint64_t, uint64_t *, uint64_t, uint64_t), unsigned char *, uint64_t, uint64_t))(a5 + 16))(&v30, &v31, &v22, 0, partial apply for closure #1 in closure #1 in _ViewList_Elements.makeAllElements(inputs:indirectMap:body:), v19, a4, a5);
  *a6 = v30;
  LOBYTE(a5) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (a5) {
    __break(1u);
  }
  return result;
}

SwiftUI::_ViewList_IteratorStyle __swiftcall _ViewList_IteratorStyle.init()()
{
  *uint64_t v0 = 2;
  return result;
}

uint64_t ViewList.allViewIDs.getter(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void))(a2 + 32))();
  if (!result)
  {
    uint64_t v7 = 0;
    uint64_t v8 = MEMORY[0x263F8EE78];
    MEMORY[0x270FA5388](0);
    v6[2] = &v8;
    uint64_t v10 = 2;
    char v9 = 1;
    ViewList.applySublists(from:style:list:to:)((uint64_t)&v7, &v10, 0x100000000, (uint64_t)partial apply for closure #1 in ViewList.allViewIDs.getter, (uint64_t)v6, a1, a2);
    uint64_t v5 = v8;
    type metadata accessor for _ViewList_ID._Views<[_ViewList_ID]>();
    uint64_t result = swift_allocObject();
    *(void *)(result + 24) = v5;
    *(unsigned char *)(result + 16) = 1;
  }
  return result;
}

uint64_t ViewList.applyIDs(from:listAttribute:to:)(uint64_t a1, unint64_t a2, uint64_t (*a3)(unint64_t *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = MEMORY[0x263F8EE78];
  return ViewList.applyIDs(from:listAttribute:transform:to:)(a1, a2 | ((HIDWORD(a2) & 1) << 32), &v7, a3, a4, a5, a6) & 1;
}

uint64_t ViewList.firstOffset(of:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1[1];
  v6[0] = *a1;
  v6[1] = v3;
  uint64_t v5 = 2;
  return ViewList.firstOffset(of:style:)((unsigned int *)v6, &v5, a2, a3);
}

uint64_t static _ViewListOutputs.makeModifiedList(list:modifier:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
    lazy protocol witness table accessor for type _ViewListOutputs.ApplyModifiers and conformance _ViewListOutputs.ApplyModifiers();
    swift_retain();
    a1 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
  }
  return a1;
}

uint64_t _ViewListInputs.base.getter@<X0>(uint64_t a1@<X8>)
{
  int v2 = *(_DWORD *)(v1 + 8);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 40);
  *(void *)a1 = *(void *)v1;
  *(_DWORD *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  *(void *)(a1 + 40) = v4;
  swift_retain();
  swift_retain();

  return swift_bridgeObjectRetain();
}

double _ViewListInputs.base.setter(uint64_t *a1)
{
  uint64_t v3 = *a1;
  int v4 = *((_DWORD *)a1 + 2);
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[5];
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(void *)uint64_t v1 = v3;
  *(_DWORD *)(v1 + 8) = v4;
  *(void *)(v1 + 16) = v5;
  double result = *((double *)a1 + 3);
  uint64_t v8 = a1[4];
  *(double *)(v1 + 24) = result;
  *(void *)(v1 + 32) = v8;
  *(void *)(v1 + 40) = v6;
  return result;
}

uint64_t (*_ViewListInputs.base.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _ViewListInputs.implicitID.getter()
{
  return *(void *)(v0 + 48);
}

uint64_t _ViewListInputs.implicitID.setter(uint64_t result)
{
  *(void *)(v1 + 48) = result;
  return result;
}

uint64_t (*_ViewListInputs.implicitID.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _ViewListInputs.Options.rawValue.getter()
{
  return *(void *)v0;
}

void static _ViewListInputs.Options.canTransition.getter(void *a1@<X8>)
{
  *a1 = 1;
}

void static _ViewListInputs.Options.disableTransitions.getter(void *a1@<X8>)
{
  *a1 = 2;
}

void static _ViewListInputs.Options.requiresDepthAndSections.getter(void *a1@<X8>)
{
  *a1 = 4;
}

void static _ViewListInputs.Options.requiresNonEmptyGroupParent.getter(void *a1@<X8>)
{
  *a1 = 8;
}

void static _ViewListInputs.Options.isNonEmptyParent.getter(void *a1@<X8>)
{
  *a1 = 16;
}

void static _ViewListInputs.Options.resetHeaderStyleContext.getter(void *a1@<X8>)
{
  *a1 = 32;
}

void static _ViewListInputs.Options.resetFooterStyleContext.getter(void *a1@<X8>)
{
  *a1 = 64;
}

void static _ViewListInputs.Options.layoutPriorityIsTrait.getter(void *a1@<X8>)
{
  *a1 = 128;
}

void static _ViewListInputs.Options.requiresSections.getter(void *a1@<X8>)
{
  *a1 = 256;
}

void static _ViewListInputs.Options.tupleViewCreatesUnaryElements.getter(void *a1@<X8>)
{
  *a1 = 512;
}

void static _ViewListInputs.Options.previewContext.getter(void *a1@<X8>)
{
  *a1 = 1024;
}

void static _ViewListInputs.Options.needsDynamicTraits.getter(void *a1@<X8>)
{
  *a1 = 2048;
}

void static _ViewListInputs.Options.allowsNestedSections.getter(void *a1@<X8>)
{
  *a1 = 4096;
}

void static _ViewListInputs.Options.sectionsConcatenateFooter.getter(void *a1@<X8>)
{
  *a1 = 0x2000;
}

void static _ViewListInputs.Options.needsArchivedAnimationTraits.getter(void *a1@<X8>)
{
  *a1 = 0x4000;
}

void static _ViewListInputs.Options.sectionsAreHierarchical.getter(void *a1@<X8>)
{
  *a1 = 0x8000;
}

void _ViewListInputs.options.getter(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 56);
}

void *_ViewListInputs.options.setter(void *result)
{
  *(void *)(v1 + 56) = *result;
  return result;
}

uint64_t (*_ViewListInputs.options.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

unsigned char *(*_ViewListInputs.traits.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  int v2 = *(_DWORD *)(v1 + 64);
  int v3 = *MEMORY[0x263F288F8];
  *(_DWORD *)(a1 + 16) = *MEMORY[0x263F288F8];
  BOOL v4 = v2 == v3;
  if (v2 == v3) {
    int v2 = 0;
  }
  *(_DWORD *)(a1 + 8) = v2;
  char v5 = v4;
  *(unsigned char *)(a1 + 12) = v5;
  return _ViewListInputs.traits.modify;
}

unsigned char *_ViewListInputs.traits.modify(unsigned char *result)
{
  uint64_t v1 = result + 8;
  if (result[12]) {
    uint64_t v1 = result + 16;
  }
  *(_DWORD *)(*(void *)result + 64) = *v1;
  return result;
}

uint64_t _ViewListInputs.traitKeys.getter@<X0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 80);
  *(void *)a1 = *(void *)(v1 + 72);
  *(unsigned char *)(a1 + 8) = v2;
  return swift_bridgeObjectRetain();
}

uint64_t _ViewListInputs.traitKeys.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char v3 = *((unsigned char *)a1 + 8);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 72) = v2;
  *(unsigned char *)(v1 + 80) = v3;
  return result;
}

uint64_t (*_ViewListInputs.traitKeys.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

__n128 _ViewListInputs.init(_:implicitID:options:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  int v4 = *(_DWORD *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *a3;
  int v8 = *MEMORY[0x263F288F8];
  *(void *)a4 = *(void *)a1;
  *(_DWORD *)(a4 + 8) = v4;
  *(void *)(a4 + 16) = v5;
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a4 + 24) = result;
  *(void *)(a4 + 40) = v6;
  *(void *)(a4 + 48) = a2;
  *(void *)(a4 + 56) = v7;
  *(_DWORD *)(a4 + 64) = v8;
  *(void *)(a4 + 72) = MEMORY[0x263F8EE88];
  *(unsigned char *)(a4 + 80) = 0;
  return result;
}

__n128 _ViewListInputs.init(_:implicitID:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *(_DWORD *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 40);
  int v6 = *MEMORY[0x263F288F8];
  *(void *)a3 = *(void *)a1;
  *(_DWORD *)(a3 + 8) = v3;
  *(void *)(a3 + 16) = v4;
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a3 + 24) = result;
  *(void *)(a3 + 40) = v5;
  *(void *)(a3 + 48) = a2;
  *(void *)(a3 + 56) = 0;
  *(_DWORD *)(a3 + 64) = v6;
  *(void *)(a3 + 72) = MEMORY[0x263F8EE88];
  *(unsigned char *)(a3 + 80) = 0;
  return result;
}

void (*_ViewListInputs.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(Swift::Int **a1, char a2)
{
  char v9 = malloc(0x40uLL);
  *a1 = v9;
  *char v9 = a2;
  v9[1] = a3;
  uint64_t v10 = *(void *)(a4 + 8);
  _OWORD v9[2] = v4;
  _OWORD v9[3] = v10;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9[4] = AssociatedTypeWitness;
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  v9[5] = v12;
  size_t v13 = *(void *)(v12 + 64);
  void v9[6] = malloc(v13);
  v9[7] = malloc(v13);
  _GraphInputs.subscript.getter(a2, a3, v10);
  return _ViewInputs.subscript.modify;
}

uint64_t _ViewListInputs.subscript.setter(uint64_t a1, Swift::Int a2, Swift::Int a3, uint64_t a4)
{
  specialized _ViewInputs.subscript.setter(a1, a2, a3, a4);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  int v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);

  return v6(a1, AssociatedTypeWitness);
}

void (*_ViewListInputs.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(Swift::Int **a1, char a2)
{
  int v11 = malloc(0x48uLL);
  *a1 = v11;
  _OWORD v11[2] = a5;
  _OWORD v11[3] = v5;
  *int v11 = a2;
  v11[1] = a3;
  uint64_t v12 = *(void *)(a4 + 8);
  v11[4] = v12;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11[5] = AssociatedTypeWitness;
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  v11[6] = v14;
  size_t v15 = *(void *)(v14 + 64);
  v11[7] = malloc(v15);
  v11[8] = malloc(v15);
  _GraphInputs.subscript.getter(a2, a3, v12);
  return _ViewInputs.subscript.modify;
}

BOOL _ViewListInputs.canTransition.getter()
{
  return (*(void *)(v0 + 56) & 3) == 1;
}

uint64_t _ViewListCountInputs.customInputs.getter()
{
  return swift_retain();
}

uint64_t _ViewListCountInputs.customInputs.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*_ViewListCountInputs.customInputs.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void _ViewListCountInputs.options.getter(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 8);
}

void *_ViewListCountInputs.options.setter(void *result)
{
  *(void *)(v1 + 8) = *result;
  return result;
}

uint64_t (*_ViewListCountInputs.options.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void _ViewListCountInputs.baseOptions.getter(_DWORD *a1@<X8>)
{
  *a1 = *(_DWORD *)(v1 + 16);
}

_DWORD *_ViewListCountInputs.baseOptions.setter(_DWORD *result)
{
  *(_DWORD *)(v1 + 16) = *result;
  return result;
}

uint64_t (*_ViewListCountInputs.baseOptions.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _ViewListCountInputs.customModifierTypes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t _ViewListCountInputs.customModifierTypes.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 24) = a1;
  return result;
}

uint64_t (*_ViewListCountInputs.customModifierTypes.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _ViewListCountInputs.init(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  int v4 = *((_DWORD *)a1 + 9);
  uint64_t v5 = a1[7];
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = v5;
  *(_DWORD *)(a2 + 16) = v4;
  *(void *)(a2 + 24) = MEMORY[0x263F8EE78];
  return result;
}

void (*_ViewListCountInputs.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(Swift::Int **a1, char a2)
{
  char v9 = malloc(0x40uLL);
  *a1 = v9;
  *char v9 = a2;
  v9[1] = a3;
  uint64_t v10 = *(void *)(a4 + 8);
  _OWORD v9[2] = v4;
  _OWORD v9[3] = v10;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9[4] = AssociatedTypeWitness;
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  v9[5] = v12;
  size_t v13 = *(void *)(v12 + 64);
  void v9[6] = malloc(v13);
  v9[7] = malloc(v13);
  PropertyList.subscript.getter(a2, *v4, a3, v10);
  return _ViewListCountInputs.subscript.modify;
}

void _ViewListCountInputs.subscript.modify(Swift::Int **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a1)[6];
  int v4 = (void *)(*a1)[7];
  Swift::Int v5 = (*a1)[4];
  Swift::Int v6 = (*a1)[5];
  uint64_t v7 = (*a1)[3];
  Swift::Int v9 = **a1;
  uint64_t v8 = (*a1)[1];
  if (a2)
  {
    (*(void (**)(Swift::Int, void *, Swift::Int))(v6 + 16))((*a1)[6], v4, v5);
    specialized PropertyList.subscript.setter((uint64_t)v3, v9, v8, v7);
    uint64_t v10 = *(void (**)(void *, Swift::Int))(v6 + 8);
    v10(v3, v5);
    v10(v4, v5);
  }
  else
  {
    specialized PropertyList.subscript.setter((*a1)[7], v9, v8, v7);
    (*(void (**)(void *, Swift::Int))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t _ViewListOutputs.views.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of _ViewListOutputs.Views(v1, a1);
}

uint64_t _ViewListOutputs.views.setter(uint64_t a1)
{
  return outlined assign with take of _ViewListOutputs.Views(a1, v1);
}

uint64_t (*_ViewListOutputs.views.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _ViewListOutputs.nextImplicitID.getter()
{
  return *(void *)(v0 + 48);
}

uint64_t _ViewListOutputs.nextImplicitID.setter(uint64_t result)
{
  *(void *)(v1 + 48) = result;
  return result;
}

uint64_t (*_ViewListOutputs.nextImplicitID.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _ViewListOutputs.staticCount.getter()
{
  return *(void *)(v0 + 56);
}

uint64_t _ViewListOutputs.staticCount.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 56) = result;
  *(unsigned char *)(v2 + 64) = a2 & 1;
  return result;
}

uint64_t (*_ViewListOutputs.staticCount.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

_OWORD *_ViewListOutputs.init(_:nextImplicitID:)@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = outlined init with take of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content(a1, (_OWORD *)a3);
  *(void *)(a3 + 48) = a2;
  *(void *)(a3 + 56) = 0;
  *(unsigned char *)(a3 + 64) = 1;
  return result;
}

uint64_t _ViewListOutputs.ListModifier.deinit()
{
  return v0;
}

uint64_t _ViewListOutputs.ListModifier.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t _ViewList_IteratorStyle.applyGranularity.getter()
{
  return *v0 & 1;
}

uint64_t _ViewList_IteratorStyle.applyGranularity.setter(uint64_t result)
{
  *uint64_t v1 = *v1 & 0xFFFFFFFFFFFFFFFELL | result & 1;
  return result;
}

uint64_t (*_ViewList_IteratorStyle.applyGranularity.modify(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *v1 & 1;
  return _ViewList_IteratorStyle.applyGranularity.modify;
}

uint64_t _ViewList_IteratorStyle.applyGranularity.modify(uint64_t result)
{
  **(void **)uint64_t result = **(void **)result & 0xFFFFFFFFFFFFFFFELL | *(unsigned __int8 *)(result + 8);
  return result;
}

uint64_t _ViewList_IteratorStyle.granularity.getter()
{
  return *v0 >> 1;
}

uint64_t _ViewList_IteratorStyle.granularity.setter(uint64_t result)
{
  *uint64_t v1 = *v1 & 1 | (2 * result);
  return result;
}

uint64_t (*_ViewList_IteratorStyle.granularity.modify(void *a1))(uint64_t result)
{
  *a1 = *v1 >> 1;
  a1[1] = v1;
  return _ViewList_IteratorStyle.granularity.modify;
}

uint64_t _ViewList_IteratorStyle.granularity.modify(uint64_t result)
{
  **(void **)(result + 8) = **(void **)(result + 8) & 1 | (2 * *(void *)result);
  return result;
}

SwiftUI::_ViewList_IteratorStyle __swiftcall _ViewList_IteratorStyle.init(granularity:)(SwiftUI::_ViewList_IteratorStyle granularity)
{
  *uint64_t v1 = 2 * granularity.value;
  return granularity;
}

Swift::Int __swiftcall _ViewList_IteratorStyle.applyGranularity(to:)(Swift::Int to)
{
  if (*v1)
  {
    uint64_t v2 = *v1 >> 1;
    uint64_t v3 = (unsigned __int128)(to * (__int128)v2) >> 64;
    to *= v2;
    if (v3 != to >> 63) {
      __break(1u);
    }
  }
  return to;
}

Swift::Void __swiftcall _ViewList_IteratorStyle.alignToPreviousGranularityMultiple(_:)(Swift::Int *a1)
{
  Swift::Int v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = *v1 >> 1;
    if (v3 != 1)
    {
      if (v3)
      {
        uint64_t v4 = v2 % v3;
        BOOL v5 = __OFSUB__(v2, v4);
        Swift::Int v6 = v2 - v4;
        if (!v5)
        {
          *a1 = v6;
          return;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
    }
  }
}

Swift::Void __swiftcall _ViewList_IteratorStyle.alignToNextGranularityMultiple(_:)(Swift::Int *a1)
{
  uint64_t v2 = *v1 >> 1;
  if (v2 != 1)
  {
    if (*v1 < 2uLL)
    {
      __break(1u);
    }
    else
    {
      Swift::Int v3 = *a1;
      Swift::Int v4 = *a1 % v2;
      if (!v4) {
        return;
      }
      BOOL v5 = __OFSUB__(v2, v4);
      Swift::Int v6 = v2 - v4;
      if (!v5)
      {
        BOOL v5 = __OFADD__(v3, v6);
        Swift::Int v7 = v3 + v6;
        if (!v5)
        {
          *a1 = v7;
          return;
        }
LABEL_10:
        __break(1u);
        return;
      }
    }
    __break(1u);
    goto LABEL_10;
  }
}

BOOL static _ViewList_IteratorStyle.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2;
}

BOOL static _ViewList_Edit.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void _ViewList_Edit.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int _ViewList_Edit.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t _ViewList_Sublist.start.getter()
{
  return *(void *)v0;
}

uint64_t _ViewList_Sublist.start.setter(uint64_t result)
{
  *Swift::UInt v1 = result;
  return result;
}

uint64_t (*_ViewList_Sublist.start.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _ViewList_Sublist.count.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t _ViewList_Sublist.count.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t (*_ViewList_Sublist.count.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _ViewList_Sublist.id.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 24);
  *a1 = *(void *)(v1 + 16);
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

double _ViewList_Sublist.id.setter(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  swift_bridgeObjectRelease();
  double result = *(double *)a1;
  *(void *)(v1 + 16) = *(void *)a1;
  *(void *)(v1 + 24) = v3;
  return result;
}

uint64_t (*_ViewList_Sublist.id.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _ViewList_Sublist.elements.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of AnyTrackedValue(v1 + 32, a1);
}

uint64_t _ViewList_Sublist.elements.setter(long long *a1)
{
  uint64_t v3 = v1 + 32;
  __swift_destroy_boxed_opaque_existential_1(v3);

  return outlined init with take of ScrollStateRequest(a1, v3);
}

uint64_t (*_ViewList_Sublist.elements.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _ViewList_Sublist.traits.getter@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 72);
  return swift_bridgeObjectRetain();
}

uint64_t _ViewList_Sublist.traits.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 72) = v2;
  return result;
}

uint64_t (*_ViewList_Sublist.traits.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _ViewList_Sublist.list.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 80) = result;
  *(unsigned char *)(v1 + 84) = BYTE4(result) & 1;
  return result;
}

uint64_t (*_ViewList_Sublist.list.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _ViewList_Sublist.init(start:count:id:elements:traits:list:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, long long *a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v9 = a3[1];
  uint64_t v10 = *a5;
  *(void *)a7 = a1;
  *(void *)(a7 + 8) = a2;
  *(void *)(a7 + 16) = *a3;
  *(void *)(a7 + 24) = v9;
  uint64_t result = outlined init with take of ScrollStateRequest(a4, a7 + 32);
  *(void *)(a7 + 72) = v10;
  *(_DWORD *)(a7 + 80) = a6;
  *(unsigned char *)(a7 + 84) = BYTE4(a6) & 1;
  return result;
}

uint64_t (*_ViewList_SublistTransform.items.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

BOOL _ViewList_SublistTransform.isEmpty.getter()
{
  return *(void *)(*(void *)v0 + 16) == 0;
}

uint64_t _ViewList_SublistTransform.bindID(_:)(uint64_t result)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 16);
  if (v3)
  {
    uint64_t v4 = result;
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v5 = v2 + 40 * v3 - 8;
    while (v3 <= *(void *)(v2 + 16))
    {
      --v3;
      outlined init with copy of AnyTrackedValue(v5, (uint64_t)v8);
      uint64_t v6 = v9;
      uint64_t v7 = v10;
      __swift_project_boxed_opaque_existential_1(v8, v9);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v4, v6, v7);
      uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
      v5 -= 40;
      if (!v3) {
        return swift_bridgeObjectRelease();
      }
    }
    __break(1u);
  }
  return result;
}

Swift::Int __swiftcall _ViewList_Node.count(style:)(SwiftUI::_ViewList_IteratorStyle style)
{
  unint64_t v2 = *(void *)style.value;
  outlined init with copy of _ViewList_Node(v1, (uint64_t)&v14);
  switch(v19)
  {
    case 1:
      long long v10 = v16;
      long long v11 = v17;
      v12[0] = *(_OWORD *)v18;
      *(void *)((char *)v12 + 13) = *(void *)&v18[13];
      long long v8 = v14;
      long long v9 = v15;
      uint64_t v5 = *((void *)&v14 + 1);
      outlined destroy of _ViewList_Sublist((uint64_t)&v8);
      if (v2)
      {
        uint64_t v6 = (unsigned __int128)(v5 * (__int128)(v2 >> 1)) >> 64;
        v5 *= v2 >> 1;
        if (v6 != v5 >> 63)
        {
          __break(1u);
          goto LABEL_6;
        }
      }
      break;
    case 2:
LABEL_6:
      *(void *)&long long v8 = v14;
      unint64_t v13 = v2;
      uint64_t v5 = _ViewList_Group.count(style:)((SwiftUI::_ViewList_IteratorStyle)&v13);
      goto LABEL_8;
    case 3:
      LODWORD(v8) = v14;
      *((void *)&v8 + 1) = *((void *)&v14 + 1);
      *(void *)&long long v9 = v15;
      BYTE8(v9) = BYTE8(v15);
      unint64_t v13 = v2;
      uint64_t v5 = _ViewList_Section.count(style:)((SwiftUI::_ViewList_IteratorStyle)&v13);
      swift_bridgeObjectRelease();
LABEL_8:
      swift_bridgeObjectRelease();
      break;
    default:
      outlined init with take of ScrollStateRequest(&v14, (uint64_t)&v8);
      uint64_t v3 = *((void *)&v9 + 1);
      uint64_t v4 = v10;
      __swift_project_boxed_opaque_existential_1(&v8, *((uint64_t *)&v9 + 1));
      unint64_t v13 = v2;
      uint64_t v5 = (*(uint64_t (**)(unint64_t *, uint64_t, uint64_t))(v4 + 8))(&v13, v3, v4);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v8);
      break;
  }
  return v5;
}

Swift::Int __swiftcall _ViewList_Section.estimatedCount(style:)(SwiftUI::_ViewList_IteratorStyle style)
{
  unint64_t v2 = *(void *)style.value;
  uint64_t v3 = *(void *)(v1 + 8);
  if (*(unsigned char *)(v1 + 24) != 1)
  {
    if (*(void *)(v3 + 16) >= 2uLL)
    {
      outlined init with copy of (list: ViewList, attribute: Attribute<ViewList>)(v3 + 80, (uint64_t)v24);
      outlined init with take of ScrollStateRequest(v24, (uint64_t)v25);
      uint64_t v7 = v26;
      uint64_t v8 = v27;
      __swift_project_boxed_opaque_existential_1(v25, v26);
      *(void *)&v24[0] = v2;
      uint64_t v9 = (*(uint64_t (**)(long long *, uint64_t, uint64_t))(v8 + 16))(v24, v7, v8);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
      int64_t v10 = v2 >> 1;
      if (v2 >> 1 != 1)
      {
        if (v2 < 2)
        {
LABEL_21:
          __break(1u);
          goto LABEL_22;
        }
        uint64_t v11 = v9 % v10;
        if (v9 % v10)
        {
          BOOL v12 = __OFSUB__(v10, v11);
          int64_t v13 = v10 - v11;
          if (v12)
          {
LABEL_22:
            __break(1u);
            goto LABEL_23;
          }
          BOOL v12 = __OFADD__(v9, v13);
          v9 += v13;
          if (v12)
          {
LABEL_23:
            __break(1u);
            JUMPOUT(0x245E03EECLL);
          }
        }
      }
      if (*(void *)(v3 + 16))
      {
        BOOL v14 = v10 != 1;
        outlined init with copy of (list: ViewList, attribute: Attribute<ViewList>)(v3 + 32, (uint64_t)v24);
        outlined init with take of ScrollStateRequest(v24, (uint64_t)v25);
        uint64_t v15 = v26;
        uint64_t v16 = v27;
        __swift_project_boxed_opaque_existential_1(v25, v26);
        unint64_t v17 = v2 & 0xFFFFFFFFFFFFFFFELL | v14;
        *(void *)&v24[0] = v17;
        uint64_t v18 = (*(uint64_t (**)(long long *, uint64_t, uint64_t))(v16 + 16))(v24, v15, v16);
        uint64_t v19 = v9 + v18;
        if (!__OFADD__(v9, v18))
        {
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
          if (*(void *)(v3 + 16) >= 3uLL)
          {
            outlined init with copy of (list: ViewList, attribute: Attribute<ViewList>)(v3 + 128, (uint64_t)v24);
            outlined init with take of ScrollStateRequest(v24, (uint64_t)v25);
            uint64_t v20 = v26;
            uint64_t v21 = v27;
            __swift_project_boxed_opaque_existential_1(v25, v26);
            *(void *)&v24[0] = v17;
            uint64_t v22 = (*(uint64_t (**)(long long *, uint64_t, uint64_t))(v21 + 16))(v24, v20, v21);
            Swift::Int v6 = v19 + v22;
            if (!__OFADD__(v19, v22)) {
              goto LABEL_14;
            }
            goto LABEL_20;
          }
LABEL_19:
          __break(1u);
LABEL_20:
          __break(1u);
          goto LABEL_21;
        }
LABEL_18:
        __break(1u);
        goto LABEL_19;
      }
LABEL_17:
      __break(1u);
      goto LABEL_18;
    }
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (!*(void *)(v3 + 16))
  {
    __break(1u);
    goto LABEL_16;
  }
  outlined init with copy of (list: ViewList, attribute: Attribute<ViewList>)(v3 + 32, (uint64_t)v24);
  outlined init with take of ScrollStateRequest(v24, (uint64_t)v25);
  uint64_t v4 = v26;
  uint64_t v5 = v27;
  __swift_project_boxed_opaque_existential_1(v25, v26);
  *(void *)&v24[0] = v2;
  Swift::Int v6 = (*(uint64_t (**)(long long *, uint64_t, uint64_t))(v5 + 16))(v24, v4, v5);
LABEL_14:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
  return v6;
}

uint64_t _ViewList_Section.header.getter(uint64_t result)
{
  uint64_t v2 = *(void *)(v1 + 8);
  if (*(void *)(v2 + 16))
  {
    uint64_t v3 = result;
    outlined init with copy of (list: ViewList, attribute: Attribute<ViewList>)(v2 + 32, (uint64_t)v5);
    uint64_t v4 = v6;
    outlined init with take of ScrollStateRequest(v5, v3);
    return v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _ViewList_Node.applyNodes(from:transform:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _ViewList_Node.applyNodes(from:transform:to:)(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t))_ViewList_Node.applyNodes(from:style:transform:to:));
}

uint64_t ViewList.applySublists(from:style:list:transform:to:)(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = *a2;
  _OWORD v9[2] = a5;
  _OWORD v9[3] = a6;
  return (*(uint64_t (**)(uint64_t, uint64_t *, unint64_t, uint64_t, uint64_t (*)(), void *))(a8 + 48))(a1, &v10, a3 | ((HIDWORD(a3) & 1) << 32), a4, partial apply for closure #1 in _ViewList_Node.applySublists(from:style:transform:to:), v9) & 1;
}

uint64_t _ViewList_Section.applyNodes(from:style:transform:to:)(uint64_t result, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v37 = a4;
  uint64_t v38 = a5;
  uint64_t v36 = a3;
  uint64_t v6 = result;
  unint64_t v7 = *a2;
  int v35 = *v5;
  long long v8 = *(_OWORD *)(v5 + 2);
  int v9 = *((unsigned __int8 *)v5 + 24);
  uint64_t v10 = *(void *)result;
  BOOL v12 = *(void *)result == 0;
  unint64_t v39 = v7;
  int64_t v11 = v7 >> 1;
  BOOL v12 = v12 || v11 == 1;
  if (v12)
  {
LABEL_8:
    int64_t v31 = v7 >> 1;
    long long v34 = v8;
    uint64_t v40 = v8;
    if (v9) {
      uint64_t v15 = 1;
    }
    else {
      uint64_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    uint64_t result = specialized Collection.prefix(_:)(v15, 0, *(void *)(v8 + 16));
    if (result == v16) {
      return 1;
    }
    uint64_t v17 = result;
    uint64_t v18 = v16;
    if (v16 >= result)
    {
      unint64_t v32 = v39 & 0xFFFFFFFFFFFFFFFELL | ((v39 & 0xFFFFFFFFFFFFFFFELL) != 2);
      uint64_t v19 = v40 + 48 * result + 32;
      uint64_t v20 = result;
      uint64_t v33 = (uint64_t *)v6;
      while (v20 < v18)
      {
        if (v17 < 0) {
          goto LABEL_32;
        }
        if ((unint64_t)v20 >= *(void *)(v40 + 16)) {
          goto LABEL_33;
        }
        outlined init with copy of (list: ViewList, attribute: Attribute<ViewList>)(v19, (uint64_t)v43);
        uint64_t v21 = v44;
        outlined init with take of ScrollStateRequest(v43, (uint64_t)v45);
        if (v20 == 1) {
          unint64_t v22 = v39;
        }
        else {
          unint64_t v22 = v32;
        }
        uint64_t v23 = v45[4];
        uint64_t v24 = __swift_project_boxed_opaque_existential_1(v45, v45[3]);
        uint64_t v41 = &v30;
        *(void *)&v43[0] = v22;
        MEMORY[0x270FA5388](v24);
        long long v25 = *(uint64_t (**)(uint64_t *, long long *, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t *, uint64_t, uint64_t)))(v23 + 48);
        char v42 = 0;
        uint64_t v26 = v21;
        uint64_t v27 = v33;
        uint64_t result = v25(v33, v43, v26, v36, partial apply for closure #1 in _ViewList_Section.applyNodes(from:style:transform:to:));
        if ((result & 1) == 0) {
          goto LABEL_29;
        }
        uint64_t v28 = *v27;
        if (*v27 && v31 != 1)
        {
          if (!v31) {
            goto LABEL_34;
          }
          BOOL v13 = __OFSUB__(v28, v28 % v31);
          uint64_t v29 = v28 - v28 % v31;
          if (v13)
          {
            __break(1u);
LABEL_29:
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v45);
            return 0;
          }
          *uint64_t v27 = v29;
        }
        ++v20;
        uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v45);
        v19 += 48;
        if (v18 == v20) {
          return 1;
        }
      }
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
    }
    __break(1u);
    goto LABEL_36;
  }
  if (!v11)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  BOOL v13 = __OFSUB__(v10, v10 % v11);
  uint64_t v14 = v10 - v10 % v11;
  if (!v13)
  {
    *(void *)uint64_t result = v14;
    goto LABEL_8;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t _ViewList_Node.applySublists(from:transform:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _ViewList_Node.applyNodes(from:transform:to:)(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t))_ViewList_Node.applySublists(from:style:transform:to:));
}

uint64_t _ViewList_Node.applyNodes(from:transform:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t))
{
  uint64_t v6 = 2;
  return a5(a1, &v6, a2, a3, a4) & 1;
}

uint64_t _ViewList_Group.firstOffset<A>(forID:style:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*v4 + 16);
  uint64_t v27 = *v4 + 32;
  uint64_t v28 = *v4;
  uint64_t v29 = *a2;
  uint64_t result = swift_bridgeObjectRetain();
  unint64_t v7 = 0;
  while (1)
  {
    if (v7 == v5)
    {
      unint64_t v8 = v5;
      memset(v45, 0, sizeof(v45));
    }
    else
    {
      if ((v7 & 0x8000000000000000) != 0) {
        goto LABEL_25;
      }
      if (v7 >= *(void *)(v28 + 16)) {
        goto LABEL_26;
      }
      unint64_t v8 = v7 + 1;
      outlined init with copy of (list: ViewList, attribute: Attribute<ViewList>)(v27 + 48 * v7, (uint64_t)&v44[1]);
      *(void *)unint64_t v45 = v7;
      *(_OWORD *)&v45[8] = *(_OWORD *)&v44[1];
      *(_OWORD *)&v45[24] = *(_OWORD *)&v44[3];
      *(_OWORD *)&v45[36] = *(_OWORD *)((char *)&v44[4] + 4);
    }
    outlined init with take of (list: ViewList, attribute: Attribute<ViewList>)?((uint64_t)v45, (uint64_t)&v46, &lazy cache variable for type metadata for (offset: Int, element: (list: ViewList, attribute: Attribute<ViewList>))?, (void (*)(uint64_t))type metadata accessor for (offset: Int, element: (list: ViewList, attribute: Attribute<ViewList>)));
    if (!v48) {
      break;
    }
    unint64_t v26 = v8;
    uint64_t v9 = v46;
    int v10 = v49;
    outlined init with take of ScrollStateRequest(&v47, (uint64_t)v40);
    int v41 = v10;
    outlined init with take of ScrollStateRequest(v40, (uint64_t)v42);
    int v43 = v10;
    outlined init with copy of AnyTrackedValue((uint64_t)v42, (uint64_t)v45);
    outlined init with take of ScrollStateRequest((long long *)v45, (uint64_t)v37);
    uint64_t v11 = v38;
    uint64_t v12 = v39;
    __swift_project_boxed_opaque_existential_1(v37, v38);
    *(void *)unint64_t v45 = v29;
    uint64_t v13 = (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 64))(a1, v45, a3, a4, v11, v12);
    if ((v14 & 1) == 0)
    {
      uint64_t v15 = v13;
      uint64_t result = swift_bridgeObjectRetain();
      unint64_t v16 = 0;
      if (!v5)
      {
LABEL_12:
        unint64_t v16 = v5;
        memset(v44, 0, 52);
        goto LABEL_15;
      }
      while (v16 < *(void *)(v28 + 16))
      {
        outlined init with copy of (list: ViewList, attribute: Attribute<ViewList>)(v27 + 48 * v16, (uint64_t)&v35);
        v44[0] = v16;
        *(_OWORD *)&v44[1] = v35;
        *(_OWORD *)&v44[3] = *(_OWORD *)v36;
        *(_OWORD *)((char *)&v44[4] + 4) = *(_OWORD *)&v36[12];
        ++v16;
LABEL_15:
        outlined init with take of (list: ViewList, attribute: Attribute<ViewList>)?((uint64_t)v44, (uint64_t)v45, &lazy cache variable for type metadata for (offset: Int, element: (list: ViewList, attribute: Attribute<ViewList>))?, (void (*)(uint64_t))type metadata accessor for (offset: Int, element: (list: ViewList, attribute: Attribute<ViewList>)));
        if (!*(void *)&v45[32])
        {
          swift_bridgeObjectRelease();
          goto LABEL_3;
        }
        uint64_t v17 = *(void *)v45;
        int v18 = *(_DWORD *)&v45[48];
        outlined init with take of ScrollStateRequest((long long *)&v45[8], (uint64_t)&v34);
        *(_DWORD *)&v36[16] = v18;
        outlined init with take of ScrollStateRequest((long long *)&v34, (uint64_t)v44);
        LODWORD(v44[5]) = v18;
        if (v17 == v9)
        {
          outlined destroy of (list: ViewList, attribute: Attribute<ViewList>)((uint64_t)v44);
          swift_bridgeObjectRelease();
          outlined destroy of (list: ViewList, attribute: Attribute<ViewList>)((uint64_t)v42);
          swift_bridgeObjectRelease();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
          return v15;
        }
        outlined init with copy of AnyTrackedValue((uint64_t)v44, (uint64_t)v30);
        outlined init with take of ScrollStateRequest(v30, (uint64_t)v31);
        uint64_t v19 = v32;
        uint64_t v20 = v33;
        __swift_project_boxed_opaque_existential_1(v31, v32);
        *(void *)&v30[0] = v29;
        uint64_t v21 = (*(uint64_t (**)(long long *, uint64_t, uint64_t))(v20 + 8))(v30, v19, v20);
        uint64_t result = outlined destroy of (list: ViewList, attribute: Attribute<ViewList>)((uint64_t)v44);
        BOOL v22 = __OFADD__(v15, v21);
        v15 += v21;
        if (v22)
        {
          __break(1u);
          break;
        }
        uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
        if (v16 == v5) {
          goto LABEL_12;
        }
      }
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
      return result;
    }
LABEL_3:
    outlined destroy of (list: ViewList, attribute: Attribute<ViewList>)((uint64_t)v42);
    unint64_t v7 = v26;
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t _ViewList_Section.firstOffset<A>(forID:style:)(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = *a2;
  uint64_t v42 = *(void *)(v4 + 8);
  if (*(unsigned char *)(v4 + 24)) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t result = specialized Collection.prefix(_:)(v6, 0, *(void *)(v42 + 16));
  if (result == v8)
  {
    return 0;
  }
  else
  {
    uint64_t v9 = result;
    uint64_t v10 = v8;
    if (v8 < result)
    {
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
    }
    else
    {
      unint64_t v37 = v5 & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v38 = v5 & 0xFFFFFFFFFFFFFFFELL | ((v5 & 0xFFFFFFFFFFFFFFFELL) != 2);
      uint64_t v11 = v42 + 32 + 48 * result;
      uint64_t v12 = result;
      while (1)
      {
        if (v12 >= v10)
        {
          __break(1u);
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          goto LABEL_45;
        }
        if (v9 < 0) {
          goto LABEL_43;
        }
        if ((unint64_t)v12 >= *(void *)(v42 + 16)) {
          goto LABEL_44;
        }
        outlined init with copy of (list: ViewList, attribute: Attribute<ViewList>)(v11, (uint64_t)v46);
        outlined init with take of ScrollStateRequest(v46, (uint64_t)v47);
        unint64_t v13 = v5;
        unint64_t v14 = v12 == 1 ? v5 : v38;
        uint64_t v15 = v48;
        uint64_t v16 = v49;
        __swift_project_boxed_opaque_existential_1(v47, v48);
        *(void *)&v46[0] = v14;
        uint64_t result = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 64))(a1, v46, a3, a4, v15, v16);
        if ((v17 & 1) == 0) {
          break;
        }
        ++v12;
        uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
        v11 += 48;
        unint64_t v5 = v13;
        if (v10 == v12) {
          return 0;
        }
      }
      uint64_t v18 = result;
      if (!v12) {
        goto LABEL_40;
      }
      if ((unint64_t)(v12 - 1) >= *(void *)(v42 + 16)) {
        goto LABEL_50;
      }
      unint64_t v19 = v13;
      int64_t v20 = v13 >> 1;
      unint64_t v21 = v37 | (v13 >> 1 != 1);
      outlined init with copy of (list: ViewList, attribute: Attribute<ViewList>)(v42 + 32, (uint64_t)v46);
      outlined init with take of ScrollStateRequest(v46, (uint64_t)v43);
      uint64_t v22 = v44;
      uint64_t v23 = v45;
      __swift_project_boxed_opaque_existential_1(v43, v44);
      *(void *)&v46[0] = v21;
      uint64_t result = (*(uint64_t (**)(long long *, uint64_t, uint64_t))(v23 + 8))(v46, v22, v23);
      if (v20 == 1) {
        goto LABEL_23;
      }
      if (v19 < 2)
      {
LABEL_46:
        __break(1u);
        goto LABEL_47;
      }
      uint64_t v24 = result % v20;
      if (!(result % v20)) {
        goto LABEL_23;
      }
      BOOL v25 = __OFSUB__(v20, v24);
      int64_t v26 = v20 - v24;
      if (v25) {
        goto LABEL_48;
      }
      BOOL v25 = __OFADD__(result, v26);
      result += v26;
      if (!v25)
      {
LABEL_23:
        BOOL v25 = __OFADD__(v18, result);
        v18 += result;
        if (v25) {
          goto LABEL_45;
        }
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
        if (v12 == 1) {
          goto LABEL_40;
        }
        outlined init with copy of (list: ViewList, attribute: Attribute<ViewList>)(v42 + 80, (uint64_t)v46);
        outlined init with take of ScrollStateRequest(v46, (uint64_t)v43);
        uint64_t v27 = v44;
        uint64_t v28 = v45;
        __swift_project_boxed_opaque_existential_1(v43, v44);
        *(void *)&v46[0] = v19;
        uint64_t result = (*(uint64_t (**)(long long *, uint64_t, uint64_t))(v28 + 8))(v46, v27, v28);
        if (v20 == 1) {
          goto LABEL_30;
        }
        if (v19 < 2) {
          goto LABEL_46;
        }
        uint64_t v29 = result % v20;
        if (!(result % v20)) {
          goto LABEL_30;
        }
        BOOL v25 = __OFSUB__(v20, v29);
        int64_t v30 = v20 - v29;
        if (v25) {
          goto LABEL_48;
        }
        BOOL v25 = __OFADD__(result, v30);
        result += v30;
        if (!v25)
        {
LABEL_30:
          BOOL v25 = __OFADD__(v18, result);
          v18 += result;
          if (!v25)
          {
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
            if (v12 != 2)
            {
              uint64_t v31 = v42 + 128;
              for (uint64_t i = 2; i != v12; ++i)
              {
                outlined init with copy of (list: ViewList, attribute: Attribute<ViewList>)(v31, (uint64_t)v46);
                outlined init with take of ScrollStateRequest(v46, (uint64_t)v43);
                uint64_t v33 = v44;
                uint64_t v34 = v45;
                __swift_project_boxed_opaque_existential_1(v43, v44);
                *(void *)&v46[0] = v21;
                uint64_t result = (*(uint64_t (**)(long long *, uint64_t, uint64_t))(v34 + 8))(v46, v33, v34);
                if (v20 != 1)
                {
                  if (v19 < 2) {
                    goto LABEL_46;
                  }
                  uint64_t v35 = result % v20;
                  if (result % v20)
                  {
                    BOOL v25 = __OFSUB__(v20, v35);
                    int64_t v36 = v20 - v35;
                    if (v25) {
                      goto LABEL_48;
                    }
                    BOOL v25 = __OFADD__(result, v36);
                    result += v36;
                    if (v25) {
                      goto LABEL_49;
                    }
                  }
                }
                BOOL v25 = __OFADD__(v18, result);
                v18 += result;
                if (v25) {
                  goto LABEL_45;
                }
                __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
                v31 += 48;
              }
            }
LABEL_40:
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
            return v18;
          }
LABEL_45:
          __break(1u);
          goto LABEL_46;
        }
      }
    }
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
  }
  return result;
}

BOOL ViewList.isEmpty.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 2;
  return (*(uint64_t (**)(uint64_t *, uint64_t))(a2 + 8))(&v3, a1) == 0;
}

uint64_t ViewList.estimatedCount.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 2;
  return (*(uint64_t (**)(uint64_t *, uint64_t))(a2 + 16))(&v3, a1);
}

uint64_t ViewList.applySublists(from:style:to:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = *a2;
  return ViewList.applySublists(from:style:list:to:)(a1, &v7, 0x100000000, a3, a4, a5, a6) & 1;
}

uint64_t ViewList.applySublists(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = 2;
  return ViewList.applySublists(from:style:list:to:)(a1, &v6, 0x100000000, a2, a3, a4, a5) & 1;
}

uint64_t _ViewList_ID.elementIDs(count:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = v2[1];
  *a2 = *v2;
  a2[1] = v3;
  a2[2] = a1;
  return swift_bridgeObjectRetain();
}

unsigned char *_ViewList_ID._Views.__allocating_init(_:isDataDependent:)(uint64_t a1, char a2)
{
  uint64_t v4 = specialized _ViewList_ID._Views.__allocating_init(_:isDataDependent:)(a1, a2);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v2 + 128) - 8) + 8))(a1);
  return v4;
}

uint64_t ViewList.applyIDs(from:style:listAttribute:transform:to:)(uint64_t a1, unint64_t *a2, unint64_t a3, uint64_t *a4, uint64_t (*a5)(unint64_t *), uint64_t a6, uint64_t a7, uint64_t a8)
{
  void (*v25)(void *__return_ptr, void);
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  void (*v38)(void *__return_ptr, void);
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t (*v42)(uint64_t);
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;

  uint64_t v12 = (uint64_t *)a1;
  unint64_t v13 = *a2;
  if (*a2 != 2 || (a1 = (*(uint64_t (**)(uint64_t, uint64_t))(a8 + 32))(a7, a8)) == 0)
  {
    int v43 = v13;
    double v23 = MEMORY[0x270FA5388](a1);
    char v22 = (*(uint64_t (**)(uint64_t *, unint64_t *, unint64_t, uint64_t *, uint64_t (*)(uint64_t *, unint64_t *, uint64_t, uint64_t *), double))(a8 + 48))(v12, &v43, a3 | ((HIDWORD(a3) & 1) << 32), a4, partial apply for closure #1 in ViewList.applyIDs(from:style:listAttribute:transform:to:), v23);
    return v22 & 1;
  }
  unint64_t v14 = *(uint64_t (**)(void))(*(void *)a1 + 88);
  swift_retain();
  uint64_t v15 = v14();
  uint64_t result = v14();
  if (result < 0)
  {
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v17 = v14();
  uint64_t result = swift_release();
  if (v15 < 0 || v17 < v15) {
    goto LABEL_27;
  }
  uint64_t v18 = *v12;
  uint64_t v19 = *v12 - v15;
  if (*v12 >= v15)
  {
    swift_release();
    uint64_t *v12 = v19;
    char v22 = 1;
    return v22 & 1;
  }
  swift_retain();
  uint64_t result = specialized Collection.dropFirst(_:)(v18);
  if (result == v20)
  {
LABEL_8:
    swift_release();
    swift_release();
    uint64_t *v12 = 0;
    char v22 = 1;
    return v22 & 1;
  }
  uint64_t v24 = result;
  BOOL v25 = *(void (**)(void *__return_ptr, void))(*(void *)v21 + 96);
  uint64_t v42 = *(uint64_t (**)(uint64_t))(*(void *)v21 + 88);
  int64_t v26 = result;
  int v41 = a4;
  uint64_t v40 = result;
  unint64_t v38 = v25;
  uint64_t v39 = v20;
  while (v26 < v20)
  {
    v25(&v43, v26);
    uint64_t v27 = v43;
    uint64_t v28 = HIDWORD(v43);
    uint64_t v29 = v44;
    int64_t v30 = swift_retain();
    uint64_t v31 = v42(v30);
    uint64_t result = swift_release();
    if (v24 < 0 || v26 >= v31) {
      goto LABEL_29;
    }
    long long v47 = v27;
    uint64_t v48 = v28;
    uint64_t v49 = v29;
    uint64_t v32 = *v41;
    uint64_t v33 = *(void *)(*v41 + 16);
    if (v33)
    {
      swift_bridgeObjectRetain();
      uint64_t v34 = v32 + 40 * v33 - 8;
      while (v33 <= *(void *)(v32 + 16))
      {
        --v33;
        outlined init with copy of AnyTrackedValue(v34, (uint64_t)&v43);
        uint64_t v35 = v45;
        int64_t v36 = v46;
        __swift_project_boxed_opaque_existential_1(&v43, v45);
        (*(void (**)(unsigned int *, uint64_t, uint64_t))(v36 + 16))(&v47, v35, v36);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v43);
        v34 -= 40;
        if (!v33)
        {
          swift_bridgeObjectRelease();
          uint64_t v27 = v47;
          uint64_t v28 = v48;
          uint64_t v29 = v49;
          goto LABEL_21;
        }
      }
      __break(1u);
LABEL_25:
      swift_release();
      swift_release();
      char v22 = 0;
      uint64_t *v12 = 0;
      return v22 & 1;
    }
LABEL_21:
    int v43 = __PAIR64__(v28, v27);
    uint64_t v44 = v29;
    unint64_t v37 = a5(&v43);
    uint64_t result = swift_bridgeObjectRelease();
    if ((v37 & 1) == 0) {
      goto LABEL_25;
    }
    ++v26;
    uint64_t v20 = v39;
    uint64_t v24 = v40;
    BOOL v25 = v38;
    if (v26 == v39) {
      goto LABEL_8;
    }
  }
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t closure #1 in ViewList.applyIDs(from:style:listAttribute:transform:to:)(uint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t (*a5)(long long *), uint64_t a6)
{
  unint64_t v9 = *a2;
  outlined init with copy of _ViewList_Node(a3, (uint64_t)&v58);
  uint64_t v10 = a1;
  switch(v63)
  {
    case 1:
      long long v51 = v60;
      long long v52 = v61;
      v53[0] = *(_OWORD *)v62;
      *(void *)((char *)v53 + 13) = *(void *)&v62[13];
      long long v49 = v58;
      long long v50 = v59;
      uint64_t v16 = *((void *)&v58 + 1);
      uint64_t v17 = *((void *)&v58 + 1);
      if (v9)
      {
        uint64_t v17 = *((void *)&v58 + 1) * (v9 >> 1);
        if ((unsigned __int128)(*((uint64_t *)&v58 + 1) * (__int128)(v9 >> 1)) >> 64 != v17 >> 63) {
          goto LABEL_52;
        }
      }
      if (*a1 >= v17)
      {
        outlined destroy of _ViewList_Sublist((uint64_t)&v49);
        *a1 -= v17;
        char v15 = 1;
        return v15 & 1;
      }
      uint64_t v18 = *a4;
      uint64_t v19 = *(void *)(v18 + 16);
      if (!v19) {
        goto LABEL_11;
      }
      swift_bridgeObjectRetain();
      uint64_t v20 = v18 + 40 * v19 - 8;
      do
      {
        if (v19 > *(void *)(v18 + 16))
        {
          __break(1u);
LABEL_47:
          swift_bridgeObjectRelease();
          outlined destroy of _ViewList_Sublist((uint64_t)&v49);
          char v15 = 0;
          *a1 = 0;
          return v15 & 1;
        }
        --v19;
        outlined init with copy of AnyTrackedValue(v20, (uint64_t)&v56);
        uint64_t v21 = v57[1];
        uint64_t v22 = v57[2];
        __swift_project_boxed_opaque_existential_1(&v56, v57[1]);
        (*(void (**)(long long *, uint64_t, uint64_t))(v22 + 8))(&v49, v21, v22);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v56);
        v20 -= 40;
      }
      while (v19);
      swift_bridgeObjectRelease();
      uint64_t v16 = *((void *)&v49 + 1);
LABEL_11:
      if (v16)
      {
        unsigned int v23 = DWORD1(v50);
        uint64_t v24 = *((void *)&v50 + 1);
        swift_bridgeObjectRetain();
        for (uint64_t i = 0; i != v16; ++i)
        {
          if (i == 0x80000000) {
            goto LABEL_50;
          }
          if ((v16 & ~(v16 >> 63)) == i) {
            goto LABEL_51;
          }
          *(void *)&long long v56 = __PAIR64__(v23, i);
          *((void *)&v56 + 1) = v24;
          swift_bridgeObjectRetain();
          char v26 = a5(&v56);
          swift_bridgeObjectRelease();
          if ((v26 & 1) == 0) {
            goto LABEL_47;
          }
        }
        swift_bridgeObjectRelease();
      }
      outlined destroy of _ViewList_Sublist((uint64_t)&v49);
      *a1 = 0;
      char v15 = 1;
      return v15 & 1;
    case 2:
      unint64_t v27 = 0;
      uint64_t v28 = v58;
      unint64_t v29 = *(void *)(v58 + 16);
      uint64_t v46 = v58 + 32;
      if (!v29) {
        goto LABEL_20;
      }
LABEL_21:
      if (v27 >= *(void *)(v28 + 16))
      {
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
        JUMPOUT(0x245E05434);
      }
      outlined init with copy of (list: ViewList, attribute: Attribute<ViewList>)(v46 + 48 * v27++, (uint64_t)&v56);
      while (1)
      {
        outlined init with take of (list: ViewList, attribute: Attribute<ViewList>)?((uint64_t)&v56, (uint64_t)&v49, &lazy cache variable for type metadata for (list: ViewList, attribute: Attribute<ViewList>)?, (void (*)(uint64_t))type metadata accessor for (list: ViewList, attribute: Attribute<ViewList>));
        if (!*((void *)&v50 + 1))
        {
          swift_bridgeObjectRelease();
          char v15 = 1;
          return v15 & 1;
        }
        uint64_t v30 = DWORD2(v51);
        outlined init with take of ScrollStateRequest(&v49, (uint64_t)&v56);
        uint64_t v31 = v57[1];
        uint64_t v32 = v57[2];
        __swift_project_boxed_opaque_existential_1(&v56, v57[1]);
        unint64_t v55 = v9;
        char v54 = 0;
        if ((ViewList.applyIDs(from:style:listAttribute:transform:to:)(v10, &v55, v30, a4, a5, a6, v31, v32) & 1) == 0) {
          break;
        }
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v56);
        if (v27 != v29) {
          goto LABEL_21;
        }
LABEL_20:
        unint64_t v27 = v29;
        long long v56 = 0u;
        memset(v57, 0, 28);
      }
      swift_bridgeObjectRelease();
      goto LABEL_44;
    case 3:
      uint64_t v33 = *((void *)&v58 + 1);
      int v34 = BYTE8(v59);
      swift_bridgeObjectRelease();
      if (v34) {
        int64_t v35 = 1;
      }
      else {
        int64_t v35 = 0x7FFFFFFFFFFFFFFFLL;
      }
      specialized Collection.prefix(_:)(v35, v33);
      uint64_t v47 = v36;
      uint64_t v38 = v37;
      int64_t v40 = v39 >> 1;
      uint64_t v41 = v37;
      if (v37 == v39 >> 1) {
        goto LABEL_31;
      }
LABEL_32:
      if (v41 < v38 || v41 >= v40) {
        goto LABEL_49;
      }
      outlined init with copy of (list: ViewList, attribute: Attribute<ViewList>)(v47 + 48 * v41++, (uint64_t)&v56);
      break;
    default:
      uint64_t v11 = DWORD2(v60);
      unsigned __int8 v12 = BYTE12(v60);
      outlined init with take of ScrollStateRequest(&v58, (uint64_t)&v49);
      uint64_t v13 = *((void *)&v50 + 1);
      uint64_t v14 = v51;
      __swift_project_boxed_opaque_existential_1(&v49, *((uint64_t *)&v50 + 1));
      *(void *)&long long v56 = v9;
      LOBYTE(v55) = v12;
      char v15 = ViewList.applyIDs(from:style:listAttribute:transform:to:)(a1, &v56, v11 | ((unint64_t)v12 << 32), a4, a5, a6, v13, v14);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v49);
      return v15 & 1;
  }
  while (1)
  {
    outlined init with take of (list: ViewList, attribute: Attribute<ViewList>)?((uint64_t)&v56, (uint64_t)&v49, &lazy cache variable for type metadata for (list: ViewList, attribute: Attribute<ViewList>)?, (void (*)(uint64_t))type metadata accessor for (list: ViewList, attribute: Attribute<ViewList>));
    if (!*((void *)&v50 + 1))
    {
      swift_unknownObjectRelease();
      char v15 = 1;
      return v15 & 1;
    }
    uint64_t v42 = DWORD2(v51);
    outlined init with take of ScrollStateRequest(&v49, (uint64_t)&v56);
    uint64_t v43 = v57[1];
    uint64_t v44 = v57[2];
    __swift_project_boxed_opaque_existential_1(&v56, v57[1]);
    unint64_t v55 = v9;
    char v54 = 0;
    if ((ViewList.applyIDs(from:style:listAttribute:transform:to:)(v10, &v55, v42, a4, a5, a6, v43, v44) & 1) == 0) {
      break;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v56);
    if (v41 != v40) {
      goto LABEL_32;
    }
LABEL_31:
    uint64_t v41 = v40;
    long long v56 = 0u;
    memset(v57, 0, 28);
  }
  swift_unknownObjectRelease();
LABEL_44:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v56);
  char v15 = 0;
  return v15 & 1;
}

uint64_t ViewList.applyIDs(from:listAttribute:transform:to:)(uint64_t a1, unint64_t a2, uint64_t *a3, uint64_t (*a4)(unint64_t *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = *a3;
  unint64_t v15 = 2;
  uint64_t v16 = v13;
  swift_bridgeObjectRetain();
  LOBYTE(a7) = ViewList.applyIDs(from:style:listAttribute:transform:to:)(a1, &v15, a2 | ((HIDWORD(a2) & 1) << 32), &v16, a4, a5, a6, a7);
  swift_bridgeObjectRelease();
  return a7 & 1;
}

uint64_t ViewList.applyIDs(from:transform:to:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(unint64_t *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = *a2;
  return ViewList.applyIDs(from:listAttribute:transform:to:)(a1, 0x100000000uLL, &v7, a3, a4, a5, a6) & 1;
}

uint64_t ViewList.firstOffset(of:style:)(unsigned int *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  uint64_t v8 = *((void *)a1 + 1);
  uint64_t v9 = *a2;
  if (*a2 == 2 && (a1 = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t))(a4 + 32))(a3, a4)) != 0)
  {
    uint64_t v10 = (uint64_t)a1;
    swift_retain();
    uint64_t v11 = specialized Collection.firstIndex(where:)(v10, v6 | (v7 << 32), v8);
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v18 = 0;
    char v19 = 1;
    MEMORY[0x270FA5388](a1);
    void v14[4] = v6;
    v14[5] = v7;
    uint64_t v15 = v8;
    uint64_t v16 = &v18;
    uint64_t v17 = &v20;
    uint64_t v23 = v9;
    unsigned __int8 v22 = v12;
    ViewList.applySublists(from:style:list:to:)((uint64_t)&v21, &v23, (unint64_t)v12 << 32, (uint64_t)partial apply for closure #2 in ViewList.firstOffset(of:style:), (uint64_t)v14, a3, a4);
    return v18;
  }
  return v11;
}

uint64_t closure #2 in ViewList.firstOffset(of:style:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (!v5) {
    return 1;
  }
  uint64_t v8 = *(void *)(a1 + 24);
  int v9 = *(_DWORD *)(a1 + 20);
  unint64_t v19 = HIDWORD(a2);
  uint64_t v10 = a2;
  uint64_t v11 = v5 & ~(v5 >> 63);
  uint64_t result = swift_bridgeObjectRetain();
  for (uint64_t i = 0x80000000; i; --i)
  {
    if (!v11) {
      goto LABEL_30;
    }
    if (*(void *)(v8 + 16))
    {
      uint64_t v14 = *(void *)(v8 + 32);
      if (*(unsigned char *)(v8 + 52))
      {
        if (v10 || v19 != -1) {
          goto LABEL_6;
        }
        swift_retain();
        goto LABEL_19;
      }
      swift_retain();
      if (v10) {
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v14 = 0;
      if (v10) {
        goto LABEL_5;
      }
    }
    if (v9 != v19) {
      goto LABEL_5;
    }
    if (!v14)
    {
      if (!a3) {
        goto LABEL_28;
      }
      goto LABEL_4;
    }
LABEL_19:
    if (!a3)
    {
      swift_retain();
LABEL_4:
      swift_retain();
      swift_release_n();
LABEL_5:
      uint64_t result = swift_release();
      goto LABEL_6;
    }
    if (v14 == a3)
    {
      swift_release();
LABEL_28:
      swift_bridgeObjectRelease();
      uint64_t result = 0;
      *(void *)a4 = *a5;
      *(unsigned char *)(a4 + 8) = 0;
      return result;
    }
    uint64_t v18 = *(uint64_t (**)(uint64_t))(*(void *)v14 + 104);
    swift_retain_n();
    uint64_t v15 = swift_retain();
    char v16 = v18(v15);
    swift_release_n();
    uint64_t result = swift_release();
    if (v16) {
      goto LABEL_28;
    }
LABEL_6:
    ++*a5;
    --v11;
    --v10;
    if (!--v5)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
  }
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t _ViewList_Elements.retain()()
{
  return 0;
}

uint64_t _ViewList_Elements.makeAllElements(inputs:indirectMap:body:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _OWORD *a7@<X8>)
{
  uint64_t v12 = *a1;
  int v13 = *((_DWORD *)a1 + 2);
  uint64_t v14 = a1[2];
  int v15 = *((_DWORD *)a1 + 20);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a3;
  *(void *)(v16 + 24) = a4;
  uint64_t v33 = 0;
  uint64_t v24 = v12;
  int v25 = v13;
  uint64_t v26 = v14;
  long long v17 = *(_OWORD *)(a1 + 5);
  long long v27 = *(_OWORD *)(a1 + 3);
  long long v28 = v17;
  long long v29 = *(_OWORD *)(a1 + 7);
  uint64_t v30 = a1[9];
  int v31 = v15;
  unsigned __int8 v22 = thunk for @callee_guaranteed (@in_guaranteed _ViewInputs, @guaranteed @escaping @callee_guaranteed (@in_guaranteed _ViewInputs) -> (@out _ViewOutputs)) -> (@out _ViewOutputs?)partial apply;
  uint64_t v23 = v16;
  (*(void (**)(long long *, uint64_t *, uint64_t *, uint64_t, uint64_t (*)(), unsigned char *, uint64_t, uint64_t))(a6 + 16))(&v32, &v33, &v24, a2, closure #1 in closure #1 in _ViewList_Elements.makeAllElements(inputs:indirectMap:body:)partial apply, v21, a5, a6);
  *a7 = v32;
  LOBYTE(a6) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (a6) {
    __break(1u);
  }
  return result;
}

uint64_t _ViewList_Elements.makeOneElement(at:inputs:body:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _OWORD *a7@<X8>)
{
  uint64_t v12 = *a2;
  int v13 = *((_DWORD *)a2 + 2);
  uint64_t v14 = a2[2];
  int v15 = *((_DWORD *)a2 + 20);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a3;
  *(void *)(v16 + 24) = a4;
  uint64_t v33 = a1;
  uint64_t v24 = v12;
  int v25 = v13;
  uint64_t v26 = v14;
  long long v17 = *(_OWORD *)(a2 + 5);
  long long v27 = *(_OWORD *)(a2 + 3);
  long long v28 = v17;
  long long v29 = *(_OWORD *)(a2 + 7);
  uint64_t v30 = a2[9];
  int v31 = v15;
  unsigned __int8 v22 = thunk for @callee_guaranteed (@in_guaranteed _ViewInputs, @guaranteed @escaping @callee_guaranteed (@in_guaranteed _ViewInputs) -> (@out _ViewOutputs)) -> (@out _ViewOutputs?)partial apply;
  uint64_t v23 = v16;
  (*(void (**)(long long *, uint64_t *, uint64_t *, void, uint64_t (*)(), unsigned char *, uint64_t, uint64_t))(a6 + 16))(&v32, &v33, &v24, 0, closure #1 in closure #1 in _ViewList_Elements.makeOneElement(at:inputs:indirectMap:body:)partial apply, v21, a5, a6);
  *a7 = v32;
  LOBYTE(v15) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v15) {
    __break(1u);
  }
  return result;
}

uint64_t _ViewList_ID.index.getter()
{
  return *v0;
}

uint64_t (*_ViewList_ID.index.modify(void *a1))()
{
  *a1 = *v1;
  a1[1] = v1;
  return _ViewList_ID.index.modify;
}

uint64_t _ViewList_ID.init(implicitID:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (result <= 0x7FFFFFFF)
  {
    *(_DWORD *)a2 = 0;
    *(_DWORD *)(a2 + 4) = result;
    *(void *)(a2 + 8) = MEMORY[0x263F8EE78];
    return result;
  }
  __break(1u);
  return result;
}

void _ViewList_ID.init()(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = MEMORY[0x263F8EE78];
}

uint64_t static _ViewList_ID.explicit<A>(_:owner:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = MEMORY[0x263F8EE78];
  return _ViewList_ID.bind<A>(explicitID:owner:isUnary:reuseID:)(a1, a2, 1, 0);
}

uint64_t _ViewList_ID.bind<A>(explicitID:owner:isUnary:)(uint64_t a1, int a2, char a3)
{
  return _ViewList_ID.bind<A>(explicitID:owner:isUnary:reuseID:)(a1, a2, a3, 0);
}

uint64_t static _ViewList_ID.explicit<A>(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  int v2 = *MEMORY[0x263F288F8];
  *a2 = 0;
  a2[1] = MEMORY[0x263F8EE78];
  return _ViewList_ID.bind<A>(explicitID:owner:isUnary:reuseID:)(a1, v2, 1, 0);
}

uint64_t _ViewList_ID.index.setter(uint64_t result)
{
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (result <= 0x7FFFFFFF)
  {
    *uint64_t v1 = result;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t (*_ViewList_ID.Canonical.index.modify(void *a1))()
{
  *a1 = *v1;
  a1[1] = v1;
  return _ViewList_ID.index.modify;
}

uint64_t _ViewList_ID.index.modify(uint64_t result, char a2)
{
  uint64_t v2 = *(void *)result;
  BOOL v3 = *(void *)result < (uint64_t)0xFFFFFFFF80000000;
  if (a2)
  {
    if (*(void *)result < (int64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
      goto LABEL_9;
    }
    BOOL v3 = v2 < 0x7FFFFFFF;
    if (v2 <= 0x7FFFFFFF)
    {
LABEL_7:
      **(_DWORD **)(result + 8) = v2;
      return result;
    }
    __break(1u);
  }
  if (v3)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v2 <= 0x7FFFFFFF) {
    goto LABEL_7;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t _ViewList_ID.Canonical.explicitID.getter@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 8);
  return swift_retain();
}

uint64_t _ViewList_ID.Canonical.explicitID.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = swift_release();
  *(void *)(v1 + 8) = v2;
  return result;
}

uint64_t (*_ViewList_ID.Canonical.explicitID.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

BOOL _ViewList_ID.Canonical.requiresImplicitID.getter()
{
  return *(_DWORD *)(v0 + 4) >= 0;
}

uint64_t _ViewList_ID.Canonical.description.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  if (v1)
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 88);
    uint64_t v3 = swift_retain();
    uint64_t v4 = v2(v3);
    swift_release();
  }
  else
  {
    v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    return 64;
  }
  return v4;
}

Swift::Int _ViewList_ID.Canonical.hashValue.getter()
{
  Swift::UInt32 v1 = *(_DWORD *)v0;
  Swift::UInt32 v2 = *(_DWORD *)(v0 + 4);
  uint64_t v3 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  if (v3)
  {
    Hasher._combine(_:)(1u);
    uint64_t v4 = *(void (**)(unsigned char *))(*(void *)v3 + 112);
    swift_retain();
    v4(v6);
    swift_release();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance _ViewList_ID.Canonical()
{
  Swift::UInt32 v1 = *(_DWORD *)v0;
  Swift::UInt32 v2 = *(_DWORD *)(v0 + 4);
  uint64_t v3 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  if (v3)
  {
    Hasher._combine(_:)(1u);
    uint64_t v4 = *(void (**)(unsigned char *))(*(void *)v3 + 112);
    swift_retain();
    v4(v6);
    swift_release();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t _ViewList_ID.ElementCollection.id.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

double _ViewList_ID.ElementCollection.id.setter(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  swift_bridgeObjectRelease();
  double result = *(double *)a1;
  *Swift::UInt32 v1 = *(void *)a1;
  v1[1] = v3;
  return result;
}

uint64_t (*_ViewList_ID.ElementCollection.id.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _ViewList_ID.ElementCollection.count.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t _ViewList_ID.ElementCollection.count.setter(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t (*_ViewList_ID.ElementCollection.count.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double _ViewList_ID.ElementCollection.init(id:count:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  double result = *(double *)a1;
  *a3 = *(void *)a1;
  a3[1] = v3;
  a3[2] = a2;
  return result;
}

uint64_t _ViewList_ID.ElementCollection.startIndex.getter()
{
  return 0;
}

uint64_t _ViewList_ID.ElementCollection.subscript.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (result <= 0x7FFFFFFF)
  {
    int v3 = *(_DWORD *)(v2 + 4);
    uint64_t v4 = *(void *)(v2 + 8);
    *(_DWORD *)a2 = result;
    *(_DWORD *)(a2 + 4) = v3;
    *(void *)(a2 + 8) = v4;
    return swift_bridgeObjectRetain();
  }
  __break(1u);
  return result;
}

void *protocol witness for BidirectionalCollection.index(before:) in conformance _ViewList_ID.ElementCollection@<X0>(void *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else if ((v3 & 0x8000000000000000) == 0 && v3 < *(void *)(v2 + 16))
  {
    *a2 = v3;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t *protocol witness for BidirectionalCollection.formIndex(before:) in conformance _ViewList_ID.ElementCollection(uint64_t *result)
{
  uint64_t v2 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else if ((v2 & 0x8000000000000000) == 0 && v2 < *(void *)(v1 + 16))
  {
    *double result = v2;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t *protocol witness for Collection.subscript.getter in conformance _ViewList_ID.ElementCollection@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = v2[2];
  if (v3 < 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t v4 = *result;
  if (*result < 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v5 = result[1];
  if (v3 >= v5)
  {
    uint64_t v6 = v2[1];
    a2[2] = *v2;
    a2[3] = v6;
    a2[4] = v3;
    *a2 = v4;
    a2[1] = v5;
    return (uint64_t *)swift_bridgeObjectRetain();
  }
LABEL_7:
  __break(1u);
  return result;
}

void protocol witness for Collection.indices.getter in conformance _ViewList_ID.ElementCollection(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    *a1 = 0;
    a1[1] = v2;
  }
}

BOOL protocol witness for Collection.isEmpty.getter in conformance _ViewList_ID.ElementCollection()
{
  return *(void *)(v0 + 16) == 0;
}

void *protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance _ViewList_ID.ElementCollection@<X0>(void *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0 && *(void *)(v3 + 16) >= v4)
  {
    *a3 = v4;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance _ViewList_ID.ElementCollection@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v6 & 1;
  return result;
}

uint64_t *protocol witness for RandomAccessCollection.distance(from:to:) in conformance _ViewList_ID.ElementCollection(uint64_t *result, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)(v2 + 16);
  if (v4 >= *a2)
  {
    uint64_t v5 = *result;
    if (((v3 | *result) & 0x8000000000000000) == 0 && v4 >= v5) {
      return (uint64_t *)(v3 - v5);
    }
  }
  __break(1u);
  return result;
}

uint64_t *protocol witness for Collection.index(after:) in conformance _ViewList_ID.ElementCollection@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *result;
  if (*result < 0 || v3 >= *(void *)(v2 + 16)) {
    __break(1u);
  }
  else {
    *a2 = v3 + 1;
  }
  return result;
}

uint64_t *protocol witness for Collection.formIndex(after:) in conformance _ViewList_ID.ElementCollection(uint64_t *result)
{
  uint64_t v2 = *result;
  if (*result < 0 || v2 >= *(void *)(v1 + 16)) {
    __break(1u);
  }
  else {
    *uint64_t result = v2 + 1;
  }
  return result;
}

double protocol witness for Sequence.makeIterator() in conformance _ViewList_ID.ElementCollection@<D0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t v3 = *(void *)(v1 + 16);
  double result = *(double *)v1;
  *a1 = *(void *)v1;
  a1[1] = v2;
  a1[2] = v3;
  a1[3] = 0;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance _ViewList_ID.ElementCollection()
{
  return *(void *)(v0 + 16);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance _ViewList_ID.ElementCollection()
{
  uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(v0);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t _ViewList_ID.bind<A>(explicitID:owner:)(uint64_t a1, int a2)
{
  return _ViewList_ID.bind<A>(explicitID:owner:isUnary:reuseID:)(a1, a2, 0, 0);
}

uint64_t _ViewList_ID.primaryExplicitID.getter@<X0>(uint64_t *a1@<X8>)
{
  if (*(void *)(*(void *)(v1 + 8) + 16)) {
    uint64_t result = swift_retain();
  }
  else {
    uint64_t result = 0;
  }
  *a1 = result;
  return result;
}

uint64_t _ViewList_ID._Views.base.getter@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v1 + 128) - 8) + 16))(a1, v1 + *(void *)(*(void *)v1 + 152));
}

unsigned char *_ViewList_ID._Views.init(_:isDataDependent:)(uint64_t a1, char a2)
{
  uint64_t v4 = *v2;
  uint64_t v5 = specialized _ViewList_ID._Views.init(_:isDataDependent:)(a1, a2);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v4 + 128) - 8) + 8))(a1);
  return v5;
}

uint64_t _ViewList_ID_Views.init(isDataDependent:)(char a1)
{
  *(unsigned char *)(v1 + 16) = a1;
  return v1;
}

uint64_t _ViewList_ID_Views.startIndex.getter()
{
  return 0;
}

uint64_t _ViewList_ID._Views.isEqual(to:)()
{
  uint64_t result = swift_dynamicCastClass();
  if (result)
  {
    swift_retain();
    char v1 = dispatch thunk of static Equatable.== infix(_:_:)();
    swift_release();
    return v1 & 1;
  }
  return result;
}

void _ViewList_ID._Views.__allocating_init(isDataDependent:)()
{
}

void _ViewList_ID._Views.init(isDataDependent:)()
{
}

uint64_t _ViewList_ID._Views.__ivar_destroyer()
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 128) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 152));
}

uint64_t _ViewList_ID._Views.deinit()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 128) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 152));
  return v0;
}

uint64_t _ViewList_ID_Views.deinit()
{
  return v0;
}

uint64_t _ViewList_ID_Views.withDataDependency()()
{
  uint64_t v1 = v0;
  if ((*(unsigned char *)(v0 + 16) & 1) == 0)
  {
    type metadata accessor for _ViewList_ID._Views<_ViewList_ID_Views>();
    uint64_t v1 = swift_allocObject();
    *(void *)(v1 + 24) = v0;
    *(unsigned char *)(v1 + 16) = 1;
  }
  swift_retain();
  return v1;
}

uint64_t _ViewList_ID.JoinedViews.views.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t _ViewList_ID.JoinedViews.count.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t _ViewList_ID.JoinedViews.__allocating_init(_:isDataDependent:)(unint64_t a1, char a2)
{
  uint64_t v4 = swift_allocObject();
  uint64_t v5 = specialized _ViewList_ID.JoinedViews.init(_:isDataDependent:)(a1, a2, v4);
  swift_bridgeObjectRelease();
  swift_release();
  return v5;
}

uint64_t _ViewList_ID.JoinedViews.init(_:isDataDependent:)(unint64_t a1, char a2)
{
  uint64_t v3 = specialized _ViewList_ID.JoinedViews.init(_:isDataDependent:)(a1, a2, v2);
  swift_bridgeObjectRelease();
  swift_release();
  return v3;
}

uint64_t _ViewList_ID.JoinedViews.subscript.getter(uint64_t result)
{
  uint64_t v2 = result;
  uint64_t v3 = *(void *)(v1 + 24);
  unint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    unint64_t v5 = 0;
    uint64_t v6 = v3 + 32;
    unint64_t v7 = *(void *)(v3 + 16);
    do
    {
      unint64_t v8 = v7 >> 1;
      unint64_t v9 = v5 + (v7 >> 1);
      if (__OFADD__(v5, v7 >> 1))
      {
        __break(1u);
LABEL_20:
        __break(1u);
        goto LABEL_21;
      }
      if (v9 >= v4) {
        goto LABEL_20;
      }
      v7 += ~v8;
      if (*(void *)(v6 + 16 * v9 + 8) <= result) {
        unint64_t v5 = v9 + 1;
      }
      else {
        unint64_t v7 = v8;
      }
    }
    while ((uint64_t)v7 > 0);
    if (!v5) {
      goto LABEL_13;
    }
    if ((uint64_t)(v5 - 1) < (uint64_t)v4)
    {
      uint64_t v2 = result - *(void *)(v6 + 16 * (v5 - 1) + 8);
      goto LABEL_13;
    }
    goto LABEL_23;
  }
  unint64_t v5 = 0;
LABEL_13:
  if (v5 >= v4)
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    return result;
  }
  uint64_t v10 = *(void *)(v3 + 16 * v5 + 32);
  uint64_t v11 = *(uint64_t (**)(uint64_t))(*(void *)v10 + 88);
  uint64_t v12 = swift_retain();
  uint64_t result = v11(v12);
  if (v2 < 0 || result < v2) {
    goto LABEL_22;
  }
  (*(void (**)(uint64_t))(*(void *)v10 + 96))(v2);

  return swift_release();
}

uint64_t _ViewList_ID.JoinedViews.isEqual(to:)()
{
  uint64_t result = swift_dynamicCastClass();
  if (!result || *(void *)(v0 + 32) != *(void *)(result + 32)) {
    return 0;
  }
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v14 = *(void *)(v2 + 16);
  if (!v14) {
    return 1;
  }
  uint64_t v3 = *(void *)(result + 24);
  if (*(void *)(v3 + 16))
  {
    unint64_t v4 = *(uint64_t (**)(uint64_t))(**(void **)(v2 + 32) + 104);
    swift_retain();
    swift_retain();
    uint64_t v5 = swift_retain();
    LOBYTE(v4) = v4(v5);
    swift_release();
    uint64_t result = swift_release();
    if (v4)
    {
      uint64_t v6 = v2 + 48;
      uint64_t v7 = v3 + 48;
      unint64_t v8 = 1;
      do
      {
        BOOL v9 = v14 == v8;
        if (v14 == v8) {
          break;
        }
        if (v8 >= *(void *)(v2 + 16))
        {
          __break(1u);
LABEL_18:
          __break(1u);
          goto LABEL_19;
        }
        if (v8++ >= *(void *)(v3 + 16)) {
          goto LABEL_18;
        }
        uint64_t v10 = v6 + 16;
        uint64_t v11 = v7 + 16;
        uint64_t v12 = *(uint64_t (**)(uint64_t))(**(void **)v6 + 104);
        swift_retain();
        uint64_t v13 = swift_retain();
        LOBYTE(v12) = v12(v13);
        swift_release();
        uint64_t result = swift_release();
        uint64_t v7 = v11;
        uint64_t v6 = v10;
      }
      while ((v12 & 1) != 0);
    }
    else
    {
      BOOL v9 = 0;
    }
    swift_release();
    return v9;
  }
LABEL_19:
  __break(1u);
  return result;
}

uint64_t static _ViewList_ID_Views.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a2) & 1;
}

void _ViewList_ID.JoinedViews.__allocating_init(isDataDependent:)()
{
}

void _ViewList_ID.JoinedViews.init(isDataDependent:)()
{
}

uint64_t _ViewList_ID.JoinedViews.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t _ViewList_ID.JoinedViews.__deallocating_deinit()
{
  return _ViewList_ID.JoinedViews.__deallocating_deinit(MEMORY[0x263F8EEA0]);
}

Swift::Int _ViewList_ID.hashValue.getter()
{
  uint64_t v1 = v0[1];
  uint64_t v4 = *v0;
  uint64_t v5 = v1;
  Hasher.init(_seed:)();
  _ViewList_ID.hash(into:)((uint64_t)v3);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance _ViewList_ID()
{
  uint64_t v1 = v0[1];
  uint64_t v4 = *v0;
  uint64_t v5 = v1;
  Hasher.init(_seed:)();
  _ViewList_ID.hash(into:)((uint64_t)v3);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance _ViewList_ID()
{
  Hasher.init(_seed:)();
  _ViewList_ID.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t _ViewList_ID_Views.isDataDependent.getter()
{
  return *(unsigned __int8 *)(v0 + 16);
}

void _ViewList_ID_Views.endIndex.getter()
{
}

void _ViewList_ID_Views.subscript.getter()
{
}

void _ViewList_ID_Views.isEqual(to:)()
{
}

uint64_t _ViewList_ID_Views.__allocating_init(isDataDependent:)(char a1)
{
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 16) = a1;
  return result;
}

uint64_t _ViewList_ID_Views.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance _ViewList_ID_Views(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 104))(*a2) & 1;
}

void *protocol witness for BidirectionalCollection.index(before:) in conformance _ViewList_ID_Views@<X0>(void *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t result = (void *)(*(uint64_t (**)(void))(**(void **)v2 + 88))();
    if ((v4 & 0x8000000000000000) == 0 && v4 < (uint64_t)result)
    {
      *a2 = v4;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t *protocol witness for BidirectionalCollection.formIndex(before:) in conformance _ViewList_ID_Views(uint64_t *result)
{
  uint64_t v2 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v3 = result;
    uint64_t result = (uint64_t *)(*(uint64_t (**)(void))(**(void **)v1 + 88))();
    if ((v2 & 0x8000000000000000) == 0 && v2 < (uint64_t)result)
    {
      *uint64_t v3 = v2;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Collection.endIndex.getter in conformance _ViewList_ID_Views@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 88))();
  *a1 = result;
  return result;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance _ViewList_ID_Views(uint64_t a1, void *a2))()
{
  (*(void (**)(void))(**(void **)v2 + 96))(*a2);
  return destroy for Image.Location.Error;
}

uint64_t protocol witness for Collection.subscript.getter in conformance _ViewList_ID_Views@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v6 = *v2;
  uint64_t result = (*(uint64_t (**)(void))(*(void *)v6 + 88))();
  if (result < 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v5 < 0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (result < v4)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  *a2 = v5;
  a2[1] = v4;
  a2[2] = v6;

  return swift_retain();
}

uint64_t protocol witness for Collection.indices.getter in conformance _ViewList_ID_Views@<X0>(void *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 88))();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    *a1 = 0;
    a1[1] = result;
  }
  return result;
}

void *protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance _ViewList_ID_Views@<X0>(void *result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
  }
  else
  {
    uint64_t result = (void *)(*(uint64_t (**)(void))(**(void **)v3 + 88))();
    if ((v5 & 0x8000000000000000) == 0 && (uint64_t)result >= v5)
    {
      *a3 = v5;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance _ViewList_ID_Views@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v6 & 1;
  return result;
}

uint64_t protocol witness for RandomAccessCollection.distance(from:to:) in conformance _ViewList_ID_Views(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  uint64_t v5 = *(uint64_t (**)(void))(**(void **)v2 + 88);
  uint64_t result = v5();
  if (v3 < 0 || result < v3)
  {
    __break(1u);
  }
  else
  {
    uint64_t result = v5();
    if ((v4 & 0x8000000000000000) == 0 && result >= v4) {
      return v4 - v3;
    }
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Collection.index(after:) in conformance _ViewList_ID_Views@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v2 + 88))();
  if (v4 < 0 || v4 >= result) {
    __break(1u);
  }
  else {
    *a2 = v4 + 1;
  }
  return result;
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance _ViewList_ID_Views(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 88))();
  if (v3 < 0 || v3 >= result) {
    __break(1u);
  }
  else {
    *a1 = v3 + 1;
  }
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance _ViewList_ID_Views(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270F9E108](a1, WitnessTable);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance _ViewList_ID_Views()
{
  uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0);
  swift_release();
  return v1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance _ViewList_ID_Views(uint64_t a1, void *a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3);
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance _ViewList_ID_Views()
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)();
}

uint64_t sub_245E07300()
{
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t protocol witness for Rule.value.getter in conformance _ViewListOutputs.ApplyModifiers@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 8);
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  uint64_t Value = AGGraphGetValue();
  outlined init with copy of AnyTrackedValue(Value, a1);
  return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 80))(a1);
}

Swift::Int __swiftcall EmptyViewList.count(style:)(SwiftUI::_ViewList_IteratorStyle style)
{
  return 0;
}

Swift::Int __swiftcall EmptyViewList.estimatedCount(style:)(SwiftUI::_ViewList_IteratorStyle style)
{
  return 0;
}

void EmptyViewList.traitKeys.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = MEMORY[0x263F8EE88];
  *(unsigned char *)(a1 + 8) = 0;
}

void EmptyViewList.traits.getter(void *a1@<X8>)
{
  *a1 = MEMORY[0x263F8EE78];
}

uint64_t EmptyViewList.viewIDs.getter()
{
  type metadata accessor for _ViewList_ID._Views<EmptyCollection<_ViewList_ID>>();
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 16) = 0;
  return result;
}

uint64_t EmptyViewList.applyNodes(from:style:list:transform:to:)()
{
  return 1;
}

void EmptyViewList.edit(forID:since:)(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t EmptyViewList.firstOffset<A>(forID:style:)()
{
  return 0;
}

void protocol witness for ViewList.traitKeys.getter in conformance EmptyViewList(uint64_t a1@<X8>)
{
  *(void *)a1 = MEMORY[0x263F8EE88];
  *(unsigned char *)(a1 + 8) = 0;
}

uint64_t protocol witness for ViewList.viewIDs.getter in conformance EmptyViewList()
{
  type metadata accessor for _ViewList_ID._Views<EmptyCollection<_ViewList_ID>>();
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 16) = 0;
  return result;
}

uint64_t EmptyViewListElements.count.getter()
{
  return 0;
}

uint64_t EmptyViewListElements.makeElements(from:inputs:indirectMap:body:)(void *a1)
{
  *a1 = 0;
  a1[1] = 0;
  return 1;
}

uint64_t EmptyViewListElements.tryToReuseElement(at:by:at:indirectMap:testOnly:)(uint64_t a1, uint64_t a2)
{
  outlined init with copy of AnyTrackedValue(a2, (uint64_t)v4);
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for _ViewList_Elements);
  uint64_t v2 = swift_dynamicCast();
  if ((v2 & 1) == 0) {
    specialized static Log.graphReuse(_:)();
  }
  return v2;
}

uint64_t protocol witness for _ViewList_Elements.tryToReuseElement(at:by:at:indirectMap:testOnly:) in conformance EmptyViewListElements(uint64_t a1, uint64_t a2)
{
  outlined init with copy of AnyTrackedValue(a2, (uint64_t)v4);
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for _ViewList_Elements);
  uint64_t v2 = swift_dynamicCast();
  if ((v2 & 1) == 0) {
    specialized static Log.graphReuse(_:)();
  }
  return v2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance BaseViewList.Init()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 93;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return 0x73746E656D656C45;
}

uint64_t ViewListSlice.ViewIDsSlice.endIndex.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t result = v2 - v1;
  if (__OFSUB__(v2, v1)) {
    __break(1u);
  }
  return result;
}

uint64_t ViewListSlice.ViewIDsSlice.subscript.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 32);
  BOOL v3 = __OFADD__(a1, v2);
  uint64_t result = a1 + v2;
  if (!v3) {
    return (*(uint64_t (**)(uint64_t))(**(void **)(v1 + 24) + 96))(result);
  }
  __break(1u);
  return result;
}

uint64_t ViewListSlice.ViewIDsSlice.__deallocating_deinit()
{
  return _ViewList_ID.JoinedViews.__deallocating_deinit(MEMORY[0x263F8EED8]);
}

uint64_t _ViewList_ID.JoinedViews.__deallocating_deinit(void (*a1)(void))
{
  a1(*(void *)(v1 + 24));

  return swift_deallocClassInstance();
}

void vtable thunk for _ViewList_ID_Views.__allocating_init(isDataDependent:) dispatching to ViewListSlice.ViewIDsSlice.__allocating_init(isDataDependent:)()
{
}

uint64_t sub_245E0772C()
{
  return swift_retain();
}

void ViewListSlice.traitKeys.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
}

void ViewListSlice.traits.getter(void *a1@<X8>)
{
  *a1 = MEMORY[0x263F8EE78];
}

uint64_t ViewListSlice.viewIDs.getter()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
  uint64_t v5 = v0[5];
  uint64_t v4 = v0[6];
  type metadata accessor for ViewListSlice.ViewIDsSlice();
  uint64_t result = swift_allocObject();
  if (v3)
  {
    *(void *)(result + 24) = v3;
    *(void *)(result + 32) = v5;
    *(void *)(result + 40) = v4;
    *(unsigned char *)(result + 16) = *(unsigned char *)(v3 + 16);
  }
  else
  {
    swift_deallocPartialClassInstance();
    return 0;
  }
  return result;
}

uint64_t ViewListSlice.init(base:bounds:)@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = outlined init with take of ScrollStateRequest(a1, a4);
  *(void *)(a4 + 40) = a2;
  *(void *)(a4 + 48) = a3;
  return result;
}

uint64_t ViewListSlice.count(style:)()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t result = v2 - v1;
  if (__OFSUB__(v2, v1)) {
    __break(1u);
  }
  return result;
}

void *ViewListSlice.applyNodes(from:style:list:transform:to:)(void *result, uint64_t *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(v4 + 40);
  BOOL v6 = __OFADD__(v5, *result);
  uint64_t v7 = v5 + *result;
  if (v6)
  {
    __break(1u);
  }
  else
  {
    uint64_t v10 = *a2;
    uint64_t v16 = v7;
    outlined init with copy of AnyTrackedValue(v4, (uint64_t)v15);
    uint64_t v11 = v15[4];
    uint64_t v12 = __swift_project_boxed_opaque_existential_1(v15, v15[3]);
    uint64_t v14 = v10;
    double v13 = MEMORY[0x270FA5388](v12);
    LOBYTE(a4) = (*(uint64_t (**)(uint64_t *, uint64_t *, unint64_t, uint64_t, uint64_t (*)(void *, uint64_t *), double))(v11 + 48))(&v16, &v14, a3 | ((HIDWORD(a3) & 1) << 32), a4, partial apply for closure #1 in ViewListSlice.applyNodes(from:style:list:transform:to:), v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    return (void *)(a4 & 1);
  }
  return result;
}

uint64_t ViewListSlice.edit(forID:since:)(void *a1, uint64_t *a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = *a2;
  uint64_t v6 = v2[3];
  uint64_t v7 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v6);
  v10[0] = *a1;
  v10[1] = v4;
  uint64_t v9 = v5;
  return (*(uint64_t (**)(void *, uint64_t *, uint64_t, uint64_t))(v7 + 56))(v10, &v9, v6, v7);
}

uint64_t ViewListSlice.firstOffset<A>(forID:style:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v9 = *a2;
  uint64_t v10 = v5[3];
  uint64_t v11 = v5[4];
  __swift_project_boxed_opaque_existential_1(v5, v10);
  uint64_t v16 = v9;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 64))(a1, &v16, a3, a4, v10, v11);
  if ((v13 & 1) == 0)
  {
    uint64_t v14 = v5[5];
    BOOL v15 = __OFSUB__(result, v14);
    result -= v14;
    if (v15) {
      __break(1u);
    }
  }
  return result;
}

void *protocol witness for ViewList.applyNodes(from:style:list:transform:to:) in conformance ViewListSlice(void *a1, uint64_t *a2, unint64_t a3, uint64_t a4)
{
  return ViewListSlice.applyNodes(from:style:list:transform:to:)(a1, a2, a3 | ((HIDWORD(a3) & 1) << 32), a4);
}

uint64_t protocol witness for ViewList.firstOffset<A>(forID:style:) in conformance ViewListSlice(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return ViewListSlice.firstOffset<A>(forID:style:)(a1, a2, a3, a4);
}

uint64_t protocol witness for _ViewList_Elements.tryToReuseElement(at:by:at:indirectMap:testOnly:) in conformance UnaryElements<A>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  return specialized UnaryElements.tryToReuseElement(at:by:at:indirectMap:testOnly:)(a2, a4, a5, a6);
}

uint64_t _ViewList_Group.lists.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t _ViewList_Group.lists.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*_ViewList_Group.lists.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void _ViewList_Group.traits.getter(void *a1@<X8>)
{
  *a1 = MEMORY[0x263F8EE78];
}

uint64_t _ViewList_Group.applyNodes(from:style:list:transform:to:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t *, void *, uint64_t))
{
  uint64_t v9 = *v5;
  uint64_t v14 = *a2;
  v12[0] = v9;
  char v13 = 2;
  swift_bridgeObjectRetain();
  char v10 = a5(a1, &v14, v12, a4);
  outlined destroy of _ViewList_Node((uint64_t)v12);
  return v10 & 1;
}

void _ViewList_Group.Init.value.getter(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  uint64_t v5 = MEMORY[0x263F8EE78];
  if (v4)
  {
    uint64_t v16 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
    type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
    uint64_t v6 = 0;
    uint64_t v5 = v16;
    do
    {
      int v7 = *(_DWORD *)(v3 + 4 * v6 + 32);
      uint64_t Value = AGGraphGetValue();
      outlined init with copy of AnyTrackedValue(Value, (uint64_t)&v14);
      *(_DWORD *)&v15[24] = v7;
      uint64_t v16 = v5;
      unint64_t v10 = *(void *)(v5 + 16);
      unint64_t v9 = *(void *)(v5 + 24);
      if (v10 >= v9 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
        uint64_t v5 = v16;
      }
      ++v6;
      *(void *)(v5 + 16) = v10 + 1;
      uint64_t v11 = (_OWORD *)(v5 + 48 * v10);
      long long v12 = v14;
      long long v13 = *(_OWORD *)v15;
      *(_OWORD *)((char *)v11 + 60) = *(_OWORD *)&v15[12];
      _OWORD v11[2] = v12;
      _OWORD v11[3] = v13;
    }
    while (v4 != v6);
    swift_bridgeObjectRelease();
  }
  a1[3] = &type metadata for _ViewList_Group;
  a1[4] = &protocol witness table for _ViewList_Group;
  *a1 = v5;
}

uint64_t _ViewList_Group.Init.description.getter()
{
  return 11176162;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance _ViewList_Group.Init()
{
  return 11176162;
}

uint64_t protocol witness for ViewList.firstOffset<A>(forID:style:) in conformance _ViewList_Group(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return _ViewList_Group.firstOffset<A>(forID:style:)(a1, a2, a3, a4);
}

uint64_t _ViewList_Section.id.getter()
{
  return *v0;
}

uint64_t _ViewList_Section.id.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*_ViewList_Section.id.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _ViewList_Section.base.getter@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 8);
  return swift_bridgeObjectRetain();
}

uint64_t _ViewList_Section.base.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = v2;
  return result;
}

uint64_t (*_ViewList_Section.base.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _ViewList_Section.traits.getter@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 16);
  return swift_bridgeObjectRetain();
}

uint64_t _ViewList_Section.traits.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 16) = v2;
  return result;
}

uint64_t (*_ViewList_Section.traits.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _ViewList_Section.isHierarchical.getter()
{
  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t _ViewList_Section.isHierarchical.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 24) = result;
  return result;
}

uint64_t (*_ViewList_Section.isHierarchical.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _ViewList_Section.footer.getter(uint64_t result)
{
  uint64_t v2 = *(void *)(v1 + 8);
  if (*(void *)(v2 + 16) < 3uLL)
  {
    __break(1u);
  }
  else
  {
    uint64_t v3 = result;
    outlined init with copy of (list: ViewList, attribute: Attribute<ViewList>)(v2 + 128, (uint64_t)v5);
    uint64_t v4 = v6;
    outlined init with take of ScrollStateRequest(v5, v3);
    return v4;
  }
  return result;
}

uint64_t _ViewList_Section.traitKeys.getter@<X0>(uint64_t a1@<X8>)
{
  return _ViewList_Group.traitKeys.getter(a1);
}

void _ViewList_Section.viewIDs.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  if (*(unsigned char *)(v0 + 24) == 1)
  {
    if (*(void *)(v1 + 16))
    {
      outlined init with copy of (list: ViewList, attribute: Attribute<ViewList>)(v1 + 32, (uint64_t)v4);
      outlined init with take of ScrollStateRequest(v4, (uint64_t)v5);
      uint64_t v2 = v6;
      uint64_t v3 = v7;
      __swift_project_boxed_opaque_existential_1(v5, v6);
      (*(void (**)(uint64_t, uint64_t))(v3 + 32))(v2, v3);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *(void *)&v4[0] = *(void *)(v0 + 8);
    _ViewList_Group.viewIDs.getter();
  }
}

uint64_t _ViewList_Section.applyNodes(from:style:list:transform:to:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t *, int *, uint64_t))
{
  int v9 = *v5;
  uint64_t v10 = *((void *)v5 + 1);
  uint64_t v11 = *((void *)v5 + 2);
  char v12 = *((unsigned char *)v5 + 24);
  uint64_t v20 = *a2;
  int v15 = v9;
  uint64_t v16 = v10;
  uint64_t v17 = v11;
  char v18 = v12;
  char v19 = 3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v13 = a5(a1, &v20, &v15, a4);
  outlined destroy of _ViewList_Node((uint64_t)&v15);
  return v13 & 1;
}

uint64_t _ViewList_Section.Info.id.getter()
{
  return *v0;
}

uint64_t _ViewList_Section.Info.id.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*_ViewList_Section.Info.id.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _ViewList_Section.Info.isHeader.getter()
{
  return *(unsigned __int8 *)(v0 + 4);
}

uint64_t _ViewList_Section.Info.isHeader.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 4) = result;
  return result;
}

uint64_t (*_ViewList_Section.Info.isHeader.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _ViewList_Section.Info.isFooter.getter()
{
  return *(unsigned __int8 *)(v0 + 5);
}

uint64_t _ViewList_Section.Info.isFooter.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 5) = result;
  return result;
}

uint64_t (*_ViewList_Section.Info.isFooter.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _ViewList_Section.edit(forID:since:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *(void *)(v3 + 8);
  v8[1] = a1[1];
  void v8[2] = v5;
  v8[0] = *a1;
  uint64_t v7 = v4;
  return _ViewList_Group.edit(forID:since:)(v8, &v7, a3);
}

uint64_t protocol witness for ViewList.traits.getter in conformance _ViewList_Section@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 16);
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for ViewList.edit(forID:since:) in conformance _ViewList_Section@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *(void *)(v3 + 8);
  v8[1] = a1[1];
  void v8[2] = v5;
  v8[0] = *a1;
  uint64_t v7 = v4;
  return _ViewList_Group.edit(forID:since:)(v8, &v7, a3);
}

uint64_t protocol witness for ViewList.firstOffset<A>(forID:style:) in conformance _ViewList_Section(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  return _ViewList_Section.firstOffset<A>(forID:style:)(a1, a2, a3, a4);
}

uint64_t MergedElements.tryToReuseElement(at:by:at:indirectMap:testOnly:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  outlined init with copy of AnyTrackedValue(a2, (uint64_t)&v26);
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for _ViewList_Elements);
  if (!swift_dynamicCast())
  {
    swift_beginAccess();
    if (static ReuseTrace.recorder) {
      AGGraphAddTraceEvent();
    }
    goto LABEL_12;
  }
  uint64_t v24 = a4;
  uint64_t v15 = v29[1];
  uint64_t v17 = v29[2];
  unint64_t v16 = v30;
  MergedElements.findElement(at:)(a1, a7, a8, a9, (uint64_t)&v26);
  if (!v27)
  {
    outlined destroy of (_ViewList_Elements, Int)?((uint64_t)&v26);
LABEL_9:
    swift_beginAccess();
    if (static ReuseTrace.recorder) {
      AGGraphAddTraceEvent();
    }
    swift_unknownObjectRelease();
LABEL_12:
    char v22 = 0;
    return v22 & 1;
  }
  uint64_t v18 = v28;
  outlined init with take of ScrollStateRequest(&v26, (uint64_t)v29);
  MergedElements.findElement(at:)(a3, v15, v17, v16, (uint64_t)&v26);
  if (!v27)
  {
    outlined destroy of (_ViewList_Elements, Int)?((uint64_t)&v26);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
    goto LABEL_9;
  }
  uint64_t v19 = v28;
  outlined init with take of ScrollStateRequest(&v26, (uint64_t)v25);
  uint64_t v20 = v30;
  uint64_t v21 = v31;
  __swift_project_boxed_opaque_existential_1(v29, v30);
  char v22 = (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t, uint64_t, void, uint64_t, uint64_t))(v21 + 24))(v18, v25, v19, v24, a5 & 1, v20, v21);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  return v22 & 1;
}

uint64_t MergedElements.findElement(at:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, unint64_t a4@<X4>, uint64_t a5@<X8>)
{
  int64_t v6 = a4 >> 1;
  if (a4 >> 1 == a3)
  {
LABEL_12:
    *(_OWORD *)(a5 + 16) = 0u;
    *(_OWORD *)(a5 + 32) = 0u;
    *(_OWORD *)a5 = 0u;
  }
  else
  {
    uint64_t v7 = a3;
    uint64_t v9 = result;
    swift_unknownObjectRetain();
    uint64_t v10 = 0;
    uint64_t v11 = a2 + 72 * v7;
    while (v7 < v6)
    {
      outlined init with copy of _ViewListOutputs(v11, (uint64_t)v21);
      outlined init with copy of _ViewListOutputs.Views((uint64_t)v21, (uint64_t)v16);
      outlined destroy of _ViewListOutputs((uint64_t)v21);
      if (v17) {
        goto LABEL_17;
      }
      outlined init with take of ScrollStateRequest(v16, (uint64_t)v18);
      uint64_t v12 = v19;
      uint64_t v13 = v20;
      __swift_project_boxed_opaque_existential_1(v18, v19);
      uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v12, v13);
      uint64_t v15 = v10 + v14;
      if (__OFADD__(v10, v14)) {
        goto LABEL_15;
      }
      if (v15 < v10) {
        goto LABEL_16;
      }
      if (v9 >= v10 && v15 > v9)
      {
        swift_unknownObjectRelease();
        outlined init with copy of AnyTrackedValue((uint64_t)v18, a5);
        *(void *)(a5 + 40) = v9 - v10;
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
      }
      ++v7;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
      v11 += 72;
      uint64_t v10 = v15;
      if (v6 == v7)
      {
        uint64_t result = swift_unknownObjectRelease();
        goto LABEL_12;
      }
    }
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    outlined destroy of _ViewListOutputs.Views((uint64_t)v16);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for _ViewList_Elements.tryToReuseElement(at:by:at:indirectMap:testOnly:) in conformance MergedElements(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  return MergedElements.tryToReuseElement(at:by:at:indirectMap:testOnly:)(a1, a2, a3, a4, a5, *(void *)v5, *(void *)(v5 + 8), *(void *)(v5 + 16), *(void *)(v5 + 24)) & 1;
}

uint64_t ModifiedElements.tryToReuseElement(at:by:at:indirectMap:testOnly:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v54 = *MEMORY[0x263EF8340];
  outlined init with copy of AnyTrackedValue((uint64_t)a2, (uint64_t)&v41);
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for _ViewList_Elements);
  if (swift_dynamicCast())
  {
    v51[2] = v47[2];
    long long v52 = v48;
    *(_OWORD *)unint64_t v53 = v49;
    *(_OWORD *)&v53[16] = v50;
    v51[0] = v47[0];
    v51[1] = v47[1];
    unsigned int Attribute = AGWeakAttributeGetAttribute();
    int v15 = *MEMORY[0x263F288F8];
    if (Attribute != *MEMORY[0x263F288F8])
    {
      unsigned int v16 = Attribute;
      uint64_t v17 = AGWeakAttributeGetAttribute();
      if v17 != v15 && (Attribute.tryToReuse(by:indirectMap:testOnly:)(v17, a4, a5 & 1, v16))
      {
        uint64_t v40 = *(void *)(v7 + 64);
        uint64_t v32 = *(void *)(v7 + 76);
        int v30 = *(_DWORD *)(v7 + 84);
        uint64_t v38 = *(void *)(v7 + 88);
        uint64_t v39 = *(void *)(v7 + 48);
        unsigned int v35 = DWORD2(v52);
        unsigned int v36 = *(_DWORD *)(v7 + 56);
        uint64_t v18 = *(void *)v53;
        unsigned int v33 = *(_DWORD *)&v53[8];
        unsigned int v34 = *(_DWORD *)(v7 + 72);
        uint64_t v31 = *(void *)&v53[12];
        int v29 = *(_DWORD *)&v53[20];
        uint64_t v19 = *(void *)&v53[24];
        uint64_t v37 = v52;
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        if ((specialized Attribute.tryToReuse(by:indirectMap:testOnly:)(v35, a4, a5 & 1, v36) & 1) != 0
          && (specialized Attribute.tryToReuse(by:indirectMap:testOnly:)(v33, a4, a5 & 1, v34) & 1) != 0
          && (swift_beginAccess(),
              unsigned int v28 = *(_DWORD *)(v40 + 16),
              swift_beginAccess(),
              (specialized Attribute.tryToReuse(by:indirectMap:testOnly:)(*(unsigned int *)(v18 + 16), a4, a5 & 1, v28) & 1) != 0)
          && (specialized Attribute.tryToReuse(by:indirectMap:testOnly:)(v31, a4, a5 & 1, v32) & 1) != 0)
        {
          *(void *)&v47[0] = v39;
          DWORD2(v47[0]) = v36;
          *(void *)&v47[1] = v40;
          DWORD2(v47[1]) = v34;
          *(void *)((char *)&v47[1] + 12) = v32;
          DWORD1(v47[2]) = v30;
          *((void *)&v47[2] + 1) = v38;
          *(void *)&long long v41 = v37;
          DWORD2(v41) = v35;
          uint64_t v42 = v18;
          unsigned int v43 = v33;
          uint64_t v44 = v31;
          int v45 = v29;
          uint64_t v46 = v19;
          char v20 = _GraphInputs.reuseCustomInputs(by:indirectMap:testOnly:)(&v41, a4, a5 & 1);
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          if (v20)
          {
            uint64_t v21 = *(void *)(v7 + 24);
            uint64_t v22 = *(void *)(v7 + 32);
            __swift_project_boxed_opaque_existential_1((void *)v7, v21);
            char v23 = (*(uint64_t (**)(uint64_t, _OWORD *, uint64_t, uint64_t, void, uint64_t, uint64_t))(v22 + 24))(a1, v51, a3, a4, a5 & 1, v21, v22);
            (*(void (**)(_OWORD *, uint64_t))(*(void *)(a6 - 8) + 8))(v51, a6);
            return v23 & 1;
          }
        }
        else
        {
          specialized static Log.graphReuse(_:)();
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
        }
      }
    }
    (*(void (**)(_OWORD *, uint64_t))(*(void *)(a6 - 8) + 8))(v51, a6);
  }
  else
  {
    uint64_t v24 = type metadata accessor for Optional();
    memset(v47, 0, sizeof(v47));
    long long v48 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    (*(void (**)(_OWORD *, uint64_t))(*(void *)(v24 - 8) + 8))(v47, v24);
  }
  uint64_t v25 = type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  uint64_t DynamicType = swift_getDynamicType();
  swift_beginAccess();
  if (static ReuseTrace.recorder)
  {
    *(void *)&v47[0] = v25;
    *((void *)&v47[0] + 1) = DynamicType;
    AGGraphAddTraceEvent();
  }
  char v23 = 0;
  return v23 & 1;
}

uint64_t ModifiedViewList.ListModifier.__ivar_destroyer()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_release();
}

uint64_t TypedUnaryViewGenerator.tryToReuse(by:indirectMap:testOnly:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t Attribute = AGWeakAttributeGetAttribute();
  int v6 = *MEMORY[0x263F288F8];
  if (Attribute == *MEMORY[0x263F288F8]
    || (unsigned int v7 = Attribute, Attribute = AGWeakAttributeGetAttribute(), Attribute == v6))
  {
    MEMORY[0x270FA5388](Attribute);
    specialized static Log.graphReuse(_:)(partial apply for implicit closure #1 in TypedUnaryViewGenerator.tryToReuse(by:indirectMap:testOnly:));
    return 0;
  }
  else
  {
    return Attribute.tryToReuse(by:indirectMap:testOnly:)(Attribute, a2, a3 & 1, v7);
  }
}

uint64_t implicit closure #1 in TypedUnaryViewGenerator.tryToReuse(by:indirectMap:testOnly:)()
{
  _StringGuts.grow(_:)(38);
  v0._object = (void *)0x8000000246221620;
  v0._countAndFlagsBits = 0xD000000000000024;
  String.append(_:)(v0);
  v1._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  String.append(_:)(v2);
  return 0;
}

uint64_t protocol witness for UnaryViewGenerator.tryToReuse(by:indirectMap:testOnly:) in conformance TypedUnaryViewGenerator<A>(uint64_t *a1, uint64_t a2, char a3)
{
  return TypedUnaryViewGenerator.tryToReuse(by:indirectMap:testOnly:)(*a1, a2, a3);
}

uint64_t implicit closure #1 in BodyUnaryViewGenerator.tryToReuse(by:indirectMap:testOnly:)()
{
  _StringGuts.grow(_:)(34);
  v0._countAndFlagsBits = 0x6166206573756552;
  v0._object = (void *)0xEE00203A64656C69;
  String.append(_:)(v0);
  v1._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._object = (void *)0x80000002462215E0;
  v2._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v2);
  return 0;
}

uint64_t protocol witness for UnaryViewGenerator.tryToReuse(by:indirectMap:testOnly:) in conformance BodyUnaryViewGenerator<A>()
{
  return specialized BodyUnaryViewGenerator.tryToReuse(by:indirectMap:testOnly:)();
}

id _ViewList_Subgraph.subgraph.getter()
{
  return *(id *)(v0 + 16);
}

uint64_t _ViewList_Subgraph.refcount.getter()
{
  swift_beginAccess();
  return *(unsigned int *)(v0 + 24);
}

uint64_t _ViewList_Subgraph.__allocating_init(subgraph:)(uint64_t a1)
{
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 24) = 1;
  *(void *)(result + 16) = a1;
  return result;
}

uint64_t _ViewList_Subgraph.init(subgraph:)(uint64_t a1)
{
  *(_DWORD *)(v1 + 24) = 1;
  *(void *)(v1 + 16) = a1;
  return v1;
}

uint64_t _ViewList_Subgraph.wrapping(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return _ViewList_Subgraph.wrapping(_:)(a1, (uint64_t)&type metadata for SubgraphElements, (uint64_t)&protocol witness table for SubgraphElements, a2);
}

{
  return _ViewList_Subgraph.wrapping(_:)(a1, (uint64_t)&unk_26FA46AF0, (uint64_t)&protocol witness table for SubgraphList, a2);
}

uint64_t _ViewList_Subgraph.wrapping(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  a4[3] = a2;
  a4[4] = a3;
  uint64_t v7 = swift_allocObject();
  *a4 = v7;
  outlined init with copy of AnyTrackedValue(a1, v7 + 16);
  *(void *)(v7 + 56) = v4;

  return swift_retain();
}

uint64_t _ViewList_Subgraph.deinit()
{
  return v0;
}

uint64_t _ViewList_Subgraph.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t SubgraphElements.tryToReuseElement(at:by:at:indirectMap:testOnly:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  outlined init with copy of AnyTrackedValue((uint64_t)a2, (uint64_t)v19);
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for _ViewList_Elements);
  if (swift_dynamicCast())
  {
    v20[1] = v17;
    _OWORD v20[2] = v18;
    v20[0] = v16;
    swift_beginAccess();
    if (*(_DWORD *)(*((void *)&v18 + 1) + 24) && AGSubgraphIsValid())
    {
      uint64_t v11 = v5[3];
      uint64_t v12 = v5[4];
      __swift_project_boxed_opaque_existential_1(v5, v11);
      char v13 = (*(uint64_t (**)(uint64_t, _OWORD *, uint64_t, uint64_t, void, uint64_t, uint64_t))(v12 + 24))(a1, v20, a3, a4, a5 & 1, v11, v12);
      outlined destroy of SubgraphElements((uint64_t)v20);
      return v13 & 1;
    }
    outlined destroy of SubgraphElements((uint64_t)v20);
  }
  else
  {
    long long v17 = 0u;
    long long v18 = 0u;
    long long v16 = 0u;
    outlined destroy of SubgraphElements?((uint64_t)&v16);
  }
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  uint64_t DynamicType = swift_getDynamicType();
  swift_beginAccess();
  if (static ReuseTrace.recorder)
  {
    v19[0] = DynamicType;
    AGGraphAddTraceEvent();
  }
  char v13 = 0;
  return v13 & 1;
}

uint64_t SubgraphList.applyNodes(from:style:list:transform:to:)(uint64_t a1, uint64_t *a2, unint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v12 = *a2;
  uint64_t v13 = v6[5];
  uint64_t v14 = (void *)*a4;
  swift_retain_n();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
  }
  unint64_t v16 = v14[2];
  unint64_t v15 = v14[3];
  if (v16 >= v15 >> 1) {
    uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v16 + 1, 1, v14);
  }
  char v23 = &unk_26FA46A80;
  uint64_t v24 = &protocol witness table for SubgraphList.Transform;
  *(void *)&long long v22 = v13;
  void v14[2] = v16 + 1;
  outlined init with take of ScrollStateRequest(&v22, (uint64_t)&v14[5 * v16 + 4]);
  swift_release();
  *a4 = v14;
  uint64_t v17 = v7[3];
  uint64_t v18 = v7[4];
  __swift_project_boxed_opaque_existential_1(v7, v17);
  *(void *)&long long v22 = v12;
  char v19 = (*(uint64_t (**)(uint64_t, long long *, unint64_t, void *, uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 48))(a1, &v22, a3 | ((HIDWORD(a3) & 1) << 32), a4, a5, a6, v17, v18);
  $defer #1 () in SubgraphList.applyNodes(from:style:list:transform:to:)(a4);
  return v19 & 1;
}

uint64_t SubgraphList.firstOffset<A>(forID:style:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *a2;
  uint64_t v9 = v4[3];
  uint64_t v10 = v4[4];
  __swift_project_boxed_opaque_existential_1(v4, v9);
  uint64_t v12 = v8;
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 64))(a1, &v12, a3, a4, v9, v10);
}

uint64_t protocol witness for _ViewList_SublistTransform_Item.apply(sublist:) in conformance SubgraphList.Transform(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = a1 + 32;
  int v6 = &type metadata for SubgraphElements;
  uint64_t v7 = &protocol witness table for SubgraphElements;
  *(void *)&long long v5 = swift_allocObject();
  outlined init with copy of AnyTrackedValue(v3, v5 + 16);
  *(void *)(v5 + 56) = v2;
  swift_retain();
  __swift_destroy_boxed_opaque_existential_1(v3);
  return outlined init with take of ScrollStateRequest(&v5, v3);
}

uint64_t protocol witness for ViewList.applyNodes(from:style:list:transform:to:) in conformance SubgraphList(uint64_t a1, uint64_t *a2, unint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  return SubgraphList.applyNodes(from:style:list:transform:to:)(a1, a2, a3 | ((HIDWORD(a3) & 1) << 32), a4, a5, a6);
}

uint64_t protocol witness for ViewList.firstOffset<A>(forID:style:) in conformance SubgraphList(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return SubgraphList.firstOffset<A>(forID:style:)(a1, a2, a3, a4);
}

uint64_t specialized static _ViewList_ID.Explicit.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = *(_DWORD *)(a1 + 16);
  int v4 = *(unsigned __int8 *)(a1 + 20);
  uint64_t v5 = *(void *)(a2 + 8);
  int v6 = *(_DWORD *)(a2 + 16);
  int v7 = *(unsigned __int8 *)(a2 + 20);
  if (*(void *)a1 == *(void *)a2)
  {
    if (v2 != v5 || v3 != v6) {
      return 0;
    }
    return v4 ^ v7 ^ 1u;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t))(**(void **)a1 + 104);
  swift_retain();
  uint64_t v9 = swift_retain();
  LOBYTE(v8) = v8(v9);
  swift_release();
  swift_release();
  uint64_t result = 0;
  if ((v8 & 1) != 0 && v2 == v5 && v3 == v6) {
    return v4 ^ v7 ^ 1u;
  }
  return result;
}

uint64_t specialized static _ViewList_ID.ElementCollection.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(_DWORD *)a2 || *(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)) {
    return 0;
  }
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unsigned __int8 v8 = specialized static Array<A>.== infix(_:_:)(v6, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & (v7 == v5);
}

unsigned char *specialized _ViewList_ID._Views.init(_:isDataDependent:)(uint64_t a1, char a2)
{
  (*(void (**)(unsigned char *, uint64_t))(*(void *)(*(void *)(*(void *)v2 + 128) - 8) + 16))(&v2[*(void *)(*(void *)v2 + 152)], a1);
  v2[16] = a2;
  return v2;
}

uint64_t specialized _ViewList_ID.JoinedViews.init(_:isDataDependent:)(unint64_t a1, char a2, uint64_t a3)
{
  LOBYTE(v4) = a2;
  if (a1 >> 62) {
    goto LABEL_24;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  for (result = swift_retain(); ; uint64_t v6 = result)
  {
    uint64_t v19 = a3;
    char v18 = (char)v4;
    if (!v6) {
      break;
    }
    if (v6 < 1)
    {
      __break(1u);
      return result;
    }
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        uint64_t v11 = MEMORY[0x24C523D60](v9, a1);
      }
      else
      {
        uint64_t v11 = *(void *)(a1 + 8 * v9 + 32);
        swift_retain();
      }
      uint64_t v4 = *(uint64_t (**)(void))(*(void *)v11 + 88);
      a3 = *(void *)v11 + 88;
      uint64_t v12 = v4();
      if (v4() < 0) {
        break;
      }
      uint64_t v13 = v4();
      if (v12 < 0 || v13 < v12) {
        goto LABEL_22;
      }
      BOOL v14 = __OFADD__(v8, v12);
      v8 += v12;
      if (v14) {
        goto LABEL_23;
      }
      swift_retain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
      }
      unint64_t v16 = v10[2];
      unint64_t v15 = v10[3];
      if (v16 >= v15 >> 1) {
        uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v16 + 1, 1, v10);
      }
      ++v9;
      void v10[2] = v16 + 1;
      uint64_t v17 = &v10[2 * v16];
      v17[4] = v11;
      v17[5] = v8;
      swift_release();
      if (v6 == v9) {
        goto LABEL_20;
      }
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    swift_retain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  }
  uint64_t v8 = 0;
  uint64_t v10 = (void *)MEMORY[0x263F8EE78];
LABEL_20:
  uint64_t result = v19;
  *(void *)(v19 + 24) = v10;
  *(void *)(v19 + 32) = v8;
  *(unsigned char *)(v19 + 16) = v18 & 1;
  return result;
}

uint64_t specialized Collection.firstIndex(where:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v20)(uint64_t *__return_ptr, uint64_t);

  uint64_t v6 = *(uint64_t (**)(void))(*(void *)a1 + 88);
  if (v6())
  {
    uint64_t v17 = a3;
    uint64_t v7 = 0;
    char v20 = *(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 96);
    while (1)
    {
      v20(&v18, v7);
      unsigned int v9 = v18;
      unsigned int v8 = HIDWORD(v18);
      if (*(void *)(v19 + 16))
      {
        uint64_t v10 = *(void *)(v19 + 32);
        if (*(unsigned char *)(v19 + 52))
        {
          if (a2 != (v18 | 0xFFFFFFFF00000000))
          {
            uint64_t v11 = swift_bridgeObjectRelease();
            goto LABEL_16;
          }
          swift_retain();
          uint64_t v12 = v17;
          if (!v17)
          {
LABEL_22:
            swift_retain();
LABEL_23:
            swift_bridgeObjectRelease();
            uint64_t v11 = swift_release_n();
            goto LABEL_16;
          }
          goto LABEL_12;
        }
        swift_retain();
      }
      else
      {
        uint64_t v10 = 0;
      }
      if (__PAIR64__(v8, v9) != a2)
      {
        swift_bridgeObjectRelease();
        uint64_t v11 = swift_release();
        goto LABEL_16;
      }
      uint64_t v12 = v17;
      if (!v10)
      {
        if (!v17)
        {
          swift_bridgeObjectRelease();
          return v7;
        }
        goto LABEL_23;
      }
      if (!v17) {
        goto LABEL_22;
      }
LABEL_12:
      if (v10 == v12)
      {
        swift_bridgeObjectRelease();
        swift_release();
        return v7;
      }
      uint64_t v13 = *(uint64_t (**)(uint64_t))(*(void *)v10 + 104);
      swift_retain_n();
      uint64_t v14 = swift_retain();
      char v15 = v13(v14);
      swift_bridgeObjectRelease();
      swift_release_n();
      uint64_t v11 = swift_release();
      if (v15) {
        return v7;
      }
LABEL_16:
      uint64_t result = ((uint64_t (*)(uint64_t))v6)(v11);
      if (v7 >= result)
      {
        __break(1u);
        return result;
      }
      if (++v7 == v6()) {
        return 0;
      }
    }
  }
  return 0;
}

uint64_t sub_245E09A4C()
{
  return swift_deallocObject();
}

uint64_t sub_245E09A5C()
{
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_245E09A94()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_245E09ADC()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_245E09B24()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ViewList.allViewIDs.getter(void *a1)
{
  uint64_t v2 = a1[2];
  uint64_t v1 = a1[3];
  uint64_t v3 = a1[1];
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v2, v1, v3);
  return 1;
}

void type metadata accessor for _ViewList_ID._Views<[_ViewList_ID]>()
{
  if (!lazy cache variable for type metadata for _ViewList_ID._Views<[_ViewList_ID]>)
  {
    uint64_t v0 = (uint64_t (*)(void, uint64_t))MEMORY[0x263F8D488];
    _s7SwiftUI10MutableBoxCyAA17CachedEnvironmentVGMaTm_4(255, &lazy cache variable for type metadata for [_ViewList_ID], (uint64_t)&type metadata for _ViewList_ID, MEMORY[0x263F8D488]);
    lazy protocol witness table accessor for type [_ViewList_ID] and conformance <A> [A]();
    lazy protocol witness table accessor for type EmptyCollection<_ViewList_ID> and conformance EmptyCollection<A>(&lazy protocol witness table cache variable for type [_ViewList_ID] and conformance [A], &lazy cache variable for type metadata for [_ViewList_ID], v0);
    unint64_t v1 = type metadata accessor for _ViewList_ID._Views();
    if (!v2) {
      atomic_store(v1, (unint64_t *)&lazy cache variable for type metadata for _ViewList_ID._Views<[_ViewList_ID]>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type [_ViewList_ID] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [_ViewList_ID] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [_ViewList_ID] and conformance <A> [A])
  {
    _s7SwiftUI10MutableBoxCyAA17CachedEnvironmentVGMaTm_4(255, &lazy cache variable for type metadata for [_ViewList_ID], (uint64_t)&type metadata for _ViewList_ID, MEMORY[0x263F8D488]);
    lazy protocol witness table accessor for type _ViewList_ID and conformance _ViewList_ID();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [_ViewList_ID] and conformance <A> [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewList_ID and conformance _ViewList_ID()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewList_ID and conformance _ViewList_ID;
  if (!lazy protocol witness table cache variable for type _ViewList_ID and conformance _ViewList_ID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewList_ID and conformance _ViewList_ID);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type EmptyCollection<_ViewList_ID> and conformance EmptyCollection<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(void, uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    _s7SwiftUI10MutableBoxCyAA17CachedEnvironmentVGMaTm_4(255, a2, (uint64_t)&type metadata for _ViewList_ID, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #2 in _ViewList_Node.applySublists(from:style:transform:to:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *(void *)(v5 + 16);
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v10 = *a2;
  return _ViewList_Node.applySublists(from:style:transform:to:)(a1, &v10, a5, v7, v8) & 1;
}

uint64_t partial apply for closure #1 in _ViewList_Section.applyNodes(from:style:transform:to:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  int v5 = *(_DWORD *)(v4 + 16);
  uint64_t v6 = *(void *)(v4 + 48);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t *, uint64_t, int *, uint64_t))(v4 + 56);
  uint64_t v12 = *a2;
  int v9 = v5;
  BOOL v10 = v6 == 0;
  BOOL v11 = v6 == 2;
  return v7(a1, &v12, a3, &v9, a4) & 1;
}

void type metadata accessor for (offset: Int, element: (list: ViewList, attribute: Attribute<ViewList>))()
{
  if (!lazy cache variable for type metadata for (offset: Int, element: (list: ViewList, attribute: Attribute<ViewList>)))
  {
    type metadata accessor for (list: ViewList, attribute: Attribute<ViewList>)();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (offset: Int, element: (list: ViewList, attribute: Attribute<ViewList>)));
    }
  }
}

uint64_t partial apply for closure #1 in ViewList.applyIDs(from:style:listAttribute:transform:to:)(uint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t *a4)
{
  return closure #1 in ViewList.applyIDs(from:style:listAttribute:transform:to:)(a1, a2, a3, a4, *(uint64_t (**)(long long *))(v4 + 16), *(void *)(v4 + 24));
}

uint64_t partial apply for closure #2 in ViewList.firstOffset(of:style:)(uint64_t a1)
{
  return closure #2 in ViewList.firstOffset(of:style:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void **)(v1 + 40));
}

uint64_t sub_245E09EC0()
{
  return swift_deallocObject();
}

uint64_t sub_245E09ED0()
{
  return swift_deallocObject();
}

uint64_t sub_245E09EE0()
{
  return swift_deallocObject();
}

void specialized _ViewList_ID._Views.init(isDataDependent:)()
{
}

void type metadata accessor for _ViewList_ID._Views<_ViewList_ID_Views>()
{
  if (!lazy cache variable for type metadata for _ViewList_ID._Views<_ViewList_ID_Views>)
  {
    type metadata accessor for _ViewList_ID_Views();
    lazy protocol witness table accessor for type _ViewList_ID_Views and conformance _ViewList_ID_Views(&lazy protocol witness table cache variable for type _ViewList_ID_Views and conformance _ViewList_ID_Views, v0, (void (*)(uint64_t))type metadata accessor for _ViewList_ID_Views);
    lazy protocol witness table accessor for type _ViewList_ID_Views and conformance _ViewList_ID_Views(&lazy protocol witness table cache variable for type _ViewList_ID_Views and conformance _ViewList_ID_Views, v1, (void (*)(uint64_t))type metadata accessor for _ViewList_ID_Views);
    unint64_t v2 = type metadata accessor for _ViewList_ID._Views();
    if (!v3) {
      atomic_store(v2, (unint64_t *)&lazy cache variable for type metadata for _ViewList_ID._Views<_ViewList_ID_Views>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type _ViewList_ID_Views and conformance _ViewList_ID_Views(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for _ViewList_ID._Views<EmptyCollection<_ViewList_ID>>()
{
  if (!lazy cache variable for type metadata for _ViewList_ID._Views<EmptyCollection<_ViewList_ID>>)
  {
    uint64_t v0 = (uint64_t (*)(void, uint64_t))MEMORY[0x263F8DDD8];
    _s7SwiftUI10MutableBoxCyAA17CachedEnvironmentVGMaTm_4(255, (unint64_t *)&lazy cache variable for type metadata for EmptyCollection<_ViewList_ID>, (uint64_t)&type metadata for _ViewList_ID, MEMORY[0x263F8DDD8]);
    lazy protocol witness table accessor for type EmptyCollection<_ViewList_ID> and conformance EmptyCollection<A>(&lazy protocol witness table cache variable for type EmptyCollection<_ViewList_ID> and conformance EmptyCollection<A>, (unint64_t *)&lazy cache variable for type metadata for EmptyCollection<_ViewList_ID>, v0);
    lazy protocol witness table accessor for type EmptyCollection<_ViewList_ID> and conformance EmptyCollection<A>(&lazy protocol witness table cache variable for type EmptyCollection<_ViewList_ID> and conformance EmptyCollection<A>, (unint64_t *)&lazy cache variable for type metadata for EmptyCollection<_ViewList_ID>, v0);
    unint64_t v1 = type metadata accessor for _ViewList_ID._Views();
    if (!v2) {
      atomic_store(v1, (unint64_t *)&lazy cache variable for type metadata for _ViewList_ID._Views<EmptyCollection<_ViewList_ID>>);
    }
  }
}

uint64_t type metadata accessor for ViewListSlice.ViewIDsSlice()
{
  return self;
}

uint64_t partial apply for closure #1 in ViewListSlice.applyNodes(from:style:list:transform:to:)(void *a1, uint64_t *a2)
{
  if (*a1 >= *(void *)(*(void *)(v2 + 16) + 48))
  {
    LOBYTE(result) = 0;
    return result & 1;
  }
  uint64_t v4 = *(uint64_t (**)(void))(v2 + 24);
  uint64_t v6 = *a2;
  uint64_t result = v4();
  if (!__OFADD__(*a1, 1))
  {
    ++*a1;
    return result & 1;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for _ViewList_ID.JoinedViews()
{
  return self;
}

unint64_t lazy protocol witness table accessor for type _ViewListInputs.Options and conformance _ViewListInputs.Options()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewListInputs.Options and conformance _ViewListInputs.Options;
  if (!lazy protocol witness table cache variable for type _ViewListInputs.Options and conformance _ViewListInputs.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewListInputs.Options and conformance _ViewListInputs.Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _ViewListInputs.Options and conformance _ViewListInputs.Options;
  if (!lazy protocol witness table cache variable for type _ViewListInputs.Options and conformance _ViewListInputs.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewListInputs.Options and conformance _ViewListInputs.Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _ViewListInputs.Options and conformance _ViewListInputs.Options;
  if (!lazy protocol witness table cache variable for type _ViewListInputs.Options and conformance _ViewListInputs.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewListInputs.Options and conformance _ViewListInputs.Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _ViewListInputs.Options and conformance _ViewListInputs.Options;
  if (!lazy protocol witness table cache variable for type _ViewListInputs.Options and conformance _ViewListInputs.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewListInputs.Options and conformance _ViewListInputs.Options);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewList_Edit and conformance _ViewList_Edit()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewList_Edit and conformance _ViewList_Edit;
  if (!lazy protocol witness table cache variable for type _ViewList_Edit and conformance _ViewList_Edit)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewList_Edit and conformance _ViewList_Edit);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : RandomAccessCollection in _ViewList_ID.ElementCollection()
{
  return _sSnySiGSnyxGSksSxRzSZ6StrideRpzrlWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in _ViewList_ID.ElementCollection()
{
  return lazy protocol witness table accessor for type Slice<_ViewList_ID.ElementCollection> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<_ViewList_ID.ElementCollection> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type _ViewList_ID.ElementCollection and conformance _ViewList_ID.ElementCollection);
}

uint64_t lazy protocol witness table accessor for type Slice<_ViewList_ID.ElementCollection> and conformance <> Slice<A>(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Slice<_ViewList_ID.ElementCollection>(255, &lazy cache variable for type metadata for Slice<_ViewList_ID.ElementCollection>, MEMORY[0x263F8E738]);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in _ViewList_ID.ElementCollection()
{
  return _sSnySiGSnyxGSksSxRzSZ6StrideRpzrlWlTm_3(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in _ViewList_ID.ElementCollection()
{
  return lazy protocol witness table accessor for type Slice<_ViewList_ID.ElementCollection> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<_ViewList_ID.ElementCollection> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type _ViewList_ID.ElementCollection and conformance _ViewList_ID.ElementCollection);
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in _ViewList_ID.ElementCollection()
{
  return _sSnySiGSnyxGSksSxRzSZ6StrideRpzrlWlTm_3(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in _ViewList_ID.ElementCollection()
{
  return lazy protocol witness table accessor for type IndexingIterator<_ViewList_ID.ElementCollection> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type Slice<_ViewList_ID.ElementCollection> and conformance Slice<A>, &lazy cache variable for type metadata for Slice<_ViewList_ID.ElementCollection>, MEMORY[0x263F8E738]);
}

uint64_t lazy protocol witness table accessor for type IndexingIterator<_ViewList_ID.ElementCollection> and conformance IndexingIterator<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Slice<_ViewList_ID.ElementCollection>(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in _ViewList_ID.ElementCollection()
{
  return lazy protocol witness table accessor for type IndexingIterator<_ViewList_ID.ElementCollection> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type IndexingIterator<_ViewList_ID.ElementCollection> and conformance IndexingIterator<A>, &lazy cache variable for type metadata for IndexingIterator<_ViewList_ID.ElementCollection>, MEMORY[0x263F8DE58]);
}

void type metadata accessor for Slice<_ViewList_ID.ElementCollection>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = lazy protocol witness table accessor for type _ViewList_ID.ElementCollection and conformance _ViewList_ID.ElementCollection();
    unint64_t v7 = a3(a1, &type metadata for _ViewList_ID.ElementCollection, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t base witness table accessor for BidirectionalCollection in _ViewList_ID_Views(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type _ViewList_ID_Views and conformance _ViewList_ID_Views(&lazy protocol witness table cache variable for type _ViewList_ID_Views and conformance _ViewList_ID_Views, a2, (void (*)(uint64_t))type metadata accessor for _ViewList_ID_Views);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in _ViewList_ID_Views()
{
  return lazy protocol witness table accessor for type Slice<_ViewList_ID_Views> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<_ViewList_ID_Views> and conformance <> Slice<A>, &lazy protocol witness table cache variable for type _ViewList_ID_Views and conformance _ViewList_ID_Views);
}

uint64_t lazy protocol witness table accessor for type Slice<_ViewList_ID_Views> and conformance <> Slice<A>(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Slice<_ViewList_ID_Views>(255);
    lazy protocol witness table accessor for type _ViewList_ID_Views and conformance _ViewList_ID_Views(a2, v5, (void (*)(uint64_t))type metadata accessor for _ViewList_ID_Views);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for Slice<_ViewList_ID_Views>(uint64_t a1)
{
}

uint64_t base witness table accessor for Collection in _ViewList_ID_Views(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type _ViewList_ID_Views and conformance _ViewList_ID_Views(&lazy protocol witness table cache variable for type _ViewList_ID_Views and conformance _ViewList_ID_Views, a2, (void (*)(uint64_t))type metadata accessor for _ViewList_ID_Views);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in _ViewList_ID_Views()
{
  return lazy protocol witness table accessor for type Slice<_ViewList_ID_Views> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<_ViewList_ID_Views> and conformance <> Slice<A>, &lazy protocol witness table cache variable for type _ViewList_ID_Views and conformance _ViewList_ID_Views);
}

uint64_t base witness table accessor for Sequence in _ViewList_ID_Views(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type _ViewList_ID_Views and conformance _ViewList_ID_Views(&lazy protocol witness table cache variable for type _ViewList_ID_Views and conformance _ViewList_ID_Views, a2, (void (*)(uint64_t))type metadata accessor for _ViewList_ID_Views);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in _ViewList_ID_Views()
{
  return lazy protocol witness table accessor for type _ViewList_ID_Views and conformance _ViewList_ID_Views(&lazy protocol witness table cache variable for type Slice<_ViewList_ID_Views> and conformance Slice<A>, 255, type metadata accessor for Slice<_ViewList_ID_Views>);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in _ViewList_ID_Views()
{
  return lazy protocol witness table accessor for type _ViewList_ID_Views and conformance _ViewList_ID_Views(&lazy protocol witness table cache variable for type IndexingIterator<_ViewList_ID_Views> and conformance IndexingIterator<A>, 255, type metadata accessor for IndexingIterator<_ViewList_ID_Views>);
}

void type metadata accessor for IndexingIterator<_ViewList_ID_Views>(uint64_t a1)
{
}

void type metadata accessor for Slice<_ViewList_ID_Views>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v6 = type metadata accessor for _ViewList_ID_Views();
    uint64_t v8 = lazy protocol witness table accessor for type _ViewList_ID_Views and conformance _ViewList_ID_Views(&lazy protocol witness table cache variable for type _ViewList_ID_Views and conformance _ViewList_ID_Views, v7, (void (*)(uint64_t))type metadata accessor for _ViewList_ID_Views);
    unint64_t v9 = a3(a1, v6, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

unint64_t instantiation function for generic protocol witness table for _ViewList_Group.Init(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _ViewList_Group.Init and conformance _ViewList_Group.Init();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_245E0AA48@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2 = *(_DWORD *)(result + 64);
  BOOL v3 = v2 == *MEMORY[0x263F288F8];
  if (v2 == *MEMORY[0x263F288F8]) {
    int v2 = 0;
  }
  *(_DWORD *)a2 = v2;
  *(unsigned char *)(a2 + 4) = v3;
  return result;
}

uint64_t sub_245E0AA70(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(result + 4)) {
    int v2 = (_DWORD *)MEMORY[0x263F288F8];
  }
  else {
    int v2 = (_DWORD *)result;
  }
  *(_DWORD *)(a2 + 64) = *v2;
  return result;
}

unsigned char *sub_245E0AA90@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *result & 1;
  return result;
}

unsigned __int8 *sub_245E0AAA0(unsigned __int8 *result, unint64_t *a2)
{
  *a2 = *a2 & 0xFFFFFFFFFFFFFFFELL | *result;
  return result;
}

void *sub_245E0AAB8@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result >> 1;
  return result;
}

void *sub_245E0AAC8(void *result, uint64_t *a2)
{
  *a2 = *a2 & 1 | (2 * *result);
  return result;
}

int *sub_245E0AADC@<X0>(int *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t *keypath_set_48Tm(uint64_t *result, _DWORD *a2)
{
  uint64_t v2 = *result;
  if (*result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (v2 <= 0x7FFFFFFF)
  {
    *a2 = v2;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t destroy for _ViewListInputs()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for _ViewListInputs(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _ViewListInputs(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  return a1;
}

uint64_t assignWithTake for _ViewListInputs(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ViewListInputs(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 81)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _ViewListInputs(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 80) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 81) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 81) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _ViewListInputs()
{
  return &type metadata for _ViewListInputs;
}

uint64_t initializeWithCopy for _ViewListCountInputs(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _ViewListCountInputs(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for _ViewListCountInputs(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithCopy for _ViewListOutputs(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of _ViewListOutputs.Views(a1);
    if (*(unsigned char *)(a2 + 40))
    {
      *(_DWORD *)a1 = *(_DWORD *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(unsigned char *)(a1 + 40) = 1;
      swift_retain();
    }
    else
    {
      uint64_t v4 = *(void *)(a2 + 24);
      *(void *)(a1 + 24) = v4;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
      *(unsigned char *)(a1 + 40) = 0;
    }
  }
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v5 = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 56) = v5;
  return a1;
}

uint64_t assignWithTake for _ViewListOutputs(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of _ViewListOutputs.Views(a1);
    long long v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v4;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  return a1;
}

ValueMetadata *type metadata accessor for _ViewListOutputs()
{
  return &type metadata for _ViewListOutputs;
}

uint64_t assignWithCopy for _ViewListOutputs.Views(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1) {
      swift_release();
    }
    else {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      *(_DWORD *)a1 = *(_DWORD *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(unsigned char *)(a1 + 40) = 1;
      swift_retain();
    }
    else
    {
      uint64_t v6 = *(void *)(a2 + 24);
      *(void *)(a1 + 24) = v6;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
      *(unsigned char *)(a1 + 40) = 0;
    }
  }
  return a1;
}

ValueMetadata *type metadata accessor for _ViewListOutputs.Views()
{
  return &type metadata for _ViewListOutputs.Views;
}

uint64_t method lookup function for _ViewListOutputs.ListModifier(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for _ViewListOutputs.ListModifier);
}

uint64_t dispatch thunk of _ViewListOutputs.ListModifier.apply(to:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 80))();
}

uint64_t dispatch thunk of ViewList.count(style:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of ViewList.estimatedCount(style:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of ViewList.traitKeys.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of ViewList.viewIDs.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of ViewList.traits.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of ViewList.applyNodes(from:style:list:transform:to:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(a8 + 48))(a1, a2, a3 | ((HIDWORD(a3) & 1) << 32));
}

uint64_t dispatch thunk of ViewList.edit(forID:since:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 56))();
}

uint64_t dispatch thunk of ViewList.firstOffset<A>(forID:style:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 64))();
}

ValueMetadata *type metadata accessor for _ViewList_IteratorStyle()
{
  return &type metadata for _ViewList_IteratorStyle;
}

ValueMetadata *type metadata accessor for _ViewList_Edit()
{
  return &type metadata for _ViewList_Edit;
}

uint64_t assignWithCopy for _ViewList_Sublist(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 32), (uint64_t *)(a2 + 32));
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  int v4 = *(_DWORD *)(a2 + 80);
  *(unsigned char *)(a1 + 84) = *(unsigned char *)(a2 + 84);
  *(_DWORD *)(a1 + 80) = v4;
  return a1;
}

__n128 __swift_memcpy85_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 77) = *(void *)(a2 + 77);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for _ViewList_Sublist(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  uint64_t v5 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v5;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(unsigned char *)(a1 + 84) = *(unsigned char *)(a2 + 84);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ViewList_Sublist(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 85)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _ViewList_Sublist(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 84) = 0;
    *(_DWORD *)(result + 80) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 85) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 85) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _ViewList_Sublist()
{
  return &type metadata for _ViewList_Sublist;
}

uint64_t dispatch thunk of _ViewList_SublistTransform_Item.apply(sublist:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of _ViewList_SublistTransform_Item.bindID(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t assignWithCopy for _ViewList_Node(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 85);
    if (v4 >= 4) {
      unsigned int v4 = *(_DWORD *)a1 + 4;
    }
    switch(v4)
    {
      case 1u:
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1(a1 + 32);
        goto LABEL_8;
      case 2u:
        goto LABEL_8;
      case 3u:
        swift_bridgeObjectRelease();
LABEL_8:
        swift_bridgeObjectRelease();
        break;
      default:
        __swift_destroy_boxed_opaque_existential_1(a1);
        break;
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 85);
    if (v5 >= 4) {
      unsigned int v5 = *(_DWORD *)a2 + 4;
    }
    switch(v5)
    {
      case 1u:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
        *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        uint64_t v8 = *(void *)(a2 + 56);
        *(void *)(a1 + 56) = v8;
        *(void *)(a1 + 64) = *(void *)(a2 + 64);
        unint64_t v9 = **(void (***)(uint64_t, uint64_t, uint64_t))(v8 - 8);
        swift_bridgeObjectRetain();
        v9(a1 + 32, a2 + 32, v8);
        *(void *)(a1 + 72) = *(void *)(a2 + 72);
        int v10 = *(_DWORD *)(a2 + 80);
        *(unsigned char *)(a1 + 84) = *(unsigned char *)(a2 + 84);
        *(_DWORD *)(a1 + 80) = v10;
        *(unsigned char *)(a1 + 85) = 1;
        goto LABEL_16;
      case 2u:
        *(void *)a1 = *(void *)a2;
        *(unsigned char *)(a1 + 85) = 2;
        goto LABEL_16;
      case 3u:
        *(_DWORD *)a1 = *(_DWORD *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
        *(unsigned char *)(a1 + 85) = 3;
        swift_bridgeObjectRetain();
LABEL_16:
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v6 = *(void *)(a2 + 24);
        *(void *)(a1 + 24) = v6;
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
        char v7 = *(unsigned char *)(a2 + 44);
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
        *(unsigned char *)(a1 + 44) = v7;
        *(unsigned char *)(a1 + 85) = 0;
        break;
    }
  }
  return a1;
}

__n128 __swift_memcpy86_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 78) = *(void *)(a2 + 78);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for _ViewList_Node(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 85);
    if (v4 >= 4) {
      unsigned int v4 = *(_DWORD *)a1 + 4;
    }
    switch(v4)
    {
      case 1u:
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1(a1 + 32);
        goto LABEL_8;
      case 2u:
        goto LABEL_8;
      case 3u:
        swift_bridgeObjectRelease();
LABEL_8:
        swift_bridgeObjectRelease();
        break;
      default:
        __swift_destroy_boxed_opaque_existential_1(a1);
        break;
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 85);
    if (v5 >= 4) {
      unsigned int v5 = *(_DWORD *)a2 + 4;
    }
    switch(v5)
    {
      case 1u:
        long long v8 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = v8;
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
        *(void *)(a1 + 77) = *(void *)(a2 + 77);
        long long v9 = *(_OWORD *)(a2 + 16);
        char v6 = 1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v9;
        break;
      case 2u:
        *(void *)a1 = *(void *)a2;
        char v6 = 2;
        break;
      case 3u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
        char v6 = 3;
        break;
      default:
        char v6 = 0;
        long long v7 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v7;
        *(_OWORD *)(a1 + 29) = *(_OWORD *)(a2 + 29);
        break;
    }
    *(unsigned char *)(a1 + 85) = v6;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for _ViewList_Node(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 86)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 85);
  if (v3 >= 4) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for _ViewList_Node(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(void *)(result + 78) = 0;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)__n128 result = 0u;
    *(_DWORD *)__n128 result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 86) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 86) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 85) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for _ViewList_Node(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 85);
  if (result >= 4) {
    return (*(_DWORD *)a1 + 4);
  }
  return result;
}

uint64_t destructiveInjectEnumTag for _ViewList_Node(uint64_t result, unsigned int a2)
{
  if (a2 > 3)
  {
    unsigned int v2 = a2 - 4;
    *(void *)(result + 77) = 0;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    LOBYTE(a2) = 4;
    *(_DWORD *)uint64_t result = v2;
  }
  *(unsigned char *)(result + 85) = a2;
  return result;
}

ValueMetadata *type metadata accessor for _ViewList_Node()
{
  return &type metadata for _ViewList_Node;
}

uint64_t dispatch thunk of _ViewList_Elements.count.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of _ViewList_Elements.makeElements(from:inputs:indirectMap:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 16))();
}

uint64_t dispatch thunk of _ViewList_Elements.tryToReuseElement(at:by:at:indirectMap:testOnly:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 24))();
}

uint64_t dispatch thunk of _ViewList_Elements.retain()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t assignWithCopy for _ViewList_ID.Canonical(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for _ViewList_ID.Canonical(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_release();
  return a1;
}

void *initializeBufferWithCopyOfBuffer for _ViewList_ID.ElementCollection(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = a2[2];
  a1[1] = a2[1];
  a1[2] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _ViewList_ID.ElementCollection(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return a1;
}

void *assignWithTake for _ViewList_ID.ElementCollection(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

ValueMetadata *type metadata accessor for _ViewList_ID.ElementCollection()
{
  return &type metadata for _ViewList_ID.ElementCollection;
}

uint64_t method lookup function for _ViewList_ID._Views(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for _ViewList_ID._Views);
}

uint64_t dispatch thunk of _ViewList_ID._Views.__allocating_init(_:isDataDependent:)()
{
  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t method lookup function for _ViewList_ID.JoinedViews(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for _ViewList_ID.JoinedViews);
}

uint64_t dispatch thunk of _ViewList_ID.JoinedViews.__allocating_init(_:isDataDependent:)()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t method lookup function for _ViewList_ID_Views(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for _ViewList_ID_Views);
}

uint64_t dispatch thunk of _ViewList_ID_Views.isEqual(to:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of _ViewList_ID_Views.__allocating_init(isDataDependent:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of _ViewList_ID_Views.withDataDependency()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

ValueMetadata *type metadata accessor for EmptyViewList()
{
  return &type metadata for EmptyViewList;
}

ValueMetadata *type metadata accessor for EmptyViewListElements()
{
  return &type metadata for EmptyViewListElements;
}

uint64_t initializeWithCopy for ViewListSlice(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  return a1;
}

uint64_t *assignWithCopy for ViewListSlice(uint64_t *a1, uint64_t *a2)
{
  a1[5] = a2[5];
  a1[6] = a2[6];
  return a1;
}

uint64_t assignWithTake for ViewListSlice(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  return a1;
}

ValueMetadata *type metadata accessor for ViewListSlice()
{
  return &type metadata for ViewListSlice;
}

ValueMetadata *type metadata accessor for _ViewList_Group.Init()
{
  return &type metadata for _ViewList_Group.Init;
}

uint64_t initializeWithCopy for _ViewList_Section(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _ViewList_Section(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for _ViewList_Section(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ViewList_Section(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 25)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _ViewList_Section(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 25) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _ViewList_Section()
{
  return &type metadata for _ViewList_Section;
}

ValueMetadata *type metadata accessor for _ViewList_Section.Info()
{
  return &type metadata for _ViewList_Section.Info;
}

uint64_t method lookup function for _ViewList_Subgraph(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for _ViewList_Subgraph);
}

uint64_t dispatch thunk of _ViewList_Subgraph.__allocating_init(subgraph:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of _ViewList_Subgraph.invalidate()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t method lookup function for _ViewList_ReleaseElements(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for _ViewList_ReleaseElements);
}

uint64_t initializeBufferWithCopyOfBuffer for _ViewList_ID.Explicit(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for _ViewList_ID.Explicit(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  return a1;
}

__n128 __swift_memcpy21_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(void *)(a1 + 13) = *(void *)(a2 + 13);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for _ViewList_ID.Explicit(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ViewList_ID.Explicit(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 21)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _ViewList_ID.Explicit(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 20) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 21) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 21) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _ViewList_ID.Explicit()
{
  return &type metadata for _ViewList_ID.Explicit;
}

uint64_t destroy for SubgraphList(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);

  return swift_release();
}

void *type metadata accessor for SubgraphList()
{
  return &unk_26FA46AF0;
}

uint64_t initializeWithCopy for SubgraphList(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  return a1;
}

uint64_t *assignWithCopy for SubgraphList(uint64_t *a1, uint64_t *a2)
{
  a1[5] = a2[5];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for SubgraphList(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for SubgraphElements()
{
  return &type metadata for SubgraphElements;
}

uint64_t assignWithCopy for BaseViewList(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for BaseViewList(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for BaseViewList(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BaseViewList(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BaseViewList()
{
  return &type metadata for BaseViewList;
}

ValueMetadata *type metadata accessor for _ViewListOutputs.ApplyModifiers()
{
  return &type metadata for _ViewListOutputs.ApplyModifiers;
}

uint64_t initializeWithCopy for MergedElements(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_unknownObjectRetain();
  return a1;
}

void *assignWithCopy for MergedElements(void *a1, void *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

_OWORD *assignWithTake for MergedElements(_OWORD *a1, _OWORD *a2)
{
  swift_unknownObjectRelease();
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  return a1;
}

void *type metadata accessor for MergedElements()
{
  return &unk_26FA4D168;
}

uint64_t destroy for UnaryElements(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t assignWithCopy for UnaryElements(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v7 = *(void *)v8;
  swift_retain();
  swift_release();
  *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 + 8);
  *(void *)(v7 + 16) = *(void *)(v8 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(v7 + 24) = *(_DWORD *)(v8 + 24);
  *(_DWORD *)(v7 + 28) = *(_DWORD *)(v8 + 28);
  *(_DWORD *)(v7 + 32) = *(_DWORD *)(v8 + 32);
  *(_DWORD *)(v7 + 36) = *(_DWORD *)(v8 + 36);
  *(void *)(v7 + 40) = *(void *)(v8 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for UnaryElements(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  unint64_t v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  long long v10 = v8[1];
  long long v9 = v8[2];
  *unint64_t v7 = *v8;
  v7[1] = v10;
  long long v7[2] = v9;
  return a1;
}

uint64_t assignWithTake for UnaryElements(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v7 = *(void *)v8;
  swift_release();
  *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 + 8);
  *(void *)(v7 + 16) = *(void *)(v8 + 16);
  swift_release();
  *(_DWORD *)(v7 + 24) = *(_DWORD *)(v8 + 24);
  *(_DWORD *)(v7 + 28) = *(_DWORD *)(v8 + 28);
  *(_DWORD *)(v7 + 32) = *(_DWORD *)(v8 + 32);
  *(_DWORD *)(v7 + 36) = *(_DWORD *)(v8 + 36);
  *(void *)(v7 + 40) = *(void *)(v8 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for UnaryElements(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 48;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x245E0C908);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)((((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

double storeEnumTagSinglePayload for UnaryElements(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 48;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFD0) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFD0) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFD0)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 48);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return result;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return result;
      case 3:
        goto LABEL_43;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return result;
      default:
        return result;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return result;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return result;
      }
      goto LABEL_33;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x245E0CB0CLL);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          unint64_t v19 = (unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8;
          if ((a2 & 0x80000000) != 0)
          {
            *(void *)(v19 + 40) = 0;
            double result = 0.0;
            *(_OWORD *)(v19 + 24) = 0u;
            *(_OWORD *)(v19 + 8) = 0u;
            *(void *)unint64_t v19 = a2 ^ 0x80000000;
          }
          else
          {
            *(void *)(v19 + 16) = a2 - 1;
          }
        }
        else
        {
          uint64_t v18 = *(void (**)(void))(v6 + 56);
          v18();
        }
      }
      return result;
  }
}

unint64_t instantiation function for generic protocol witness table for _ViewListOutputs.ApplyModifiers(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _ViewListOutputs.ApplyModifiers and conformance _ViewListOutputs.ApplyModifiers();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t specialized BodyUnaryViewGenerator.tryToReuse(by:indirectMap:testOnly:)()
{
  type metadata accessor for (_:)();
  uint64_t v0 = AGCompareValues();
  if ((v0 & 1) == 0)
  {
    uint64_t v1 = swift_beginAccess();
    if (static ReuseTrace.recorder) {
      uint64_t v1 = AGGraphAddTraceEvent();
    }
    MEMORY[0x270FA5388](v1);
    specialized static Log.graphReuse(_:)(partial apply for implicit closure #1 in BodyUnaryViewGenerator.tryToReuse(by:indirectMap:testOnly:));
  }
  return v0;
}

uint64_t partial apply for implicit closure #1 in BodyUnaryViewGenerator.tryToReuse(by:indirectMap:testOnly:)()
{
  return implicit closure #1 in BodyUnaryViewGenerator.tryToReuse(by:indirectMap:testOnly:)();
}

uint64_t specialized UnaryElements.tryToReuseElement(at:by:at:indirectMap:testOnly:)(void *a1, uint64_t a2, int a3, uint64_t a4)
{
  int v82 = a3;
  uint64_t v80 = a2;
  uint64_t v98 = *MEMORY[0x263EF8340];
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  unint64_t v10 = &v65[-v9];
  uint64_t v11 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = &v65[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v15);
  float v81 = &v65[-v16];
  MEMORY[0x270FA5388](v17);
  unint64_t v19 = &v65[-v18];
  MEMORY[0x270FA5388](v20);
  long long v22 = &v65[-v21];
  outlined init with copy of AnyTrackedValue((uint64_t)a1, (uint64_t)&v90);
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for _ViewList_Elements);
  int v23 = swift_dynamicCast();
  uint64_t v24 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  if (!v23)
  {
    v24(v10, 1, 1, a4);
    (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v7);
    specialized static Log.graphReuse(_:)();
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    uint64_t DynamicType = swift_getDynamicType();
    swift_beginAccess();
    if (static ReuseTrace.recorder)
    {
      *(void *)&long long v84 = DynamicType;
      AGGraphAddTraceEvent();
    }
    goto LABEL_18;
  }
  unint64_t v79 = v14;
  int v25 = 1;
  v24(v10, 0, 1, a4);
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v11 + 32))(v22, v10, a4);
  long long v26 = *(void **)&v4[*(int *)(a4 + 36)];
  uint64_t v27 = MEMORY[0x263F8EE88];
  uint64_t v90 = MEMORY[0x263F8EE88];
  v97[0] = 1;
  _s7SwiftUI10MutableBoxCyAA17CachedEnvironmentVGMaTm_4(0, &lazy cache variable for type metadata for BodyInput<()>, MEMORY[0x263F8EE60] + 8, (uint64_t (*)(void, uint64_t))type metadata accessor for BodyInput);
  uint64_t v29 = v28;
  uint64_t v83 = v22;
  if (v26)
  {
    uint64_t v30 = MEMORY[0x24C525770](v28);
    *(void *)&long long v84 = 0;
    specialized PropertyList.Element.forEach(filter:_:)((uint64_t *)&v84, v26, v30, &v90, v97);
    int v25 = v97[0];
  }
  swift_bridgeObjectRelease();
  uint64_t v32 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v11 + 16);
  v32(v19, v83, a4);
  if (!v25)
  {
    unsigned int v36 = *(void (**)(unsigned char *, uint64_t))(v11 + 8);
    v36(v19, a4);
LABEL_17:
    v36(v83, a4);
LABEL_18:
    char v62 = 0;
    return v62 & 1;
  }
  unsigned int v33 = *(void **)&v19[*(int *)(a4 + 36)];
  uint64_t v90 = v27;
  char v34 = 1;
  v97[0] = 1;
  if (v33)
  {
    uint64_t v35 = MEMORY[0x24C525770](v29);
    *(void *)&long long v84 = 0;
    specialized PropertyList.Element.forEach(filter:_:)((uint64_t *)&v84, v33, v35, &v90, v97);
    char v34 = v97[0];
  }
  swift_bridgeObjectRelease();
  unsigned int v36 = *(void (**)(unsigned char *, uint64_t))(v11 + 8);
  v36(v19, a4);
  if ((v34 & 1) == 0) {
    goto LABEL_17;
  }
  uint64_t v37 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)(a4 + 24) + 16);
  uint64_t v38 = v83;
  uint64_t v39 = v80;
  int v78 = v82 & 1;
  char v40 = v37(v83, v80);
  long long v41 = v81;
  v32(v81, v4, a4);
  uint64_t v42 = v79;
  v32(v79, v38, a4);
  if (v40)
  {
    uint64_t v44 = *(int *)(a4 + 36);
    uint64_t v45 = *(void *)&v41[v44];
    unsigned int v74 = *(_DWORD *)&v41[v44 + 8];
    uint64_t v72 = *(void *)&v41[v44 + 16];
    unsigned int v73 = *(_DWORD *)&v41[v44 + 24];
    *(void *)&long long v43 = *(void *)&v41[v44 + 28];
    long long v70 = v43;
    int v68 = *(_DWORD *)&v41[v44 + 36];
    uint64_t v46 = *(void *)&v41[v44 + 40];
    uint64_t v47 = (uint64_t *)&v42[v44];
    uint64_t v48 = *v47;
    uint64_t v49 = *((unsigned int *)v47 + 2);
    uint64_t v50 = v47[2];
    unsigned int v71 = *((_DWORD *)v47 + 6);
    *(void *)&long long v43 = *(uint64_t *)((char *)v47 + 28);
    long long v69 = v43;
    int v66 = *((_DWORD *)v47 + 9);
    uint64_t v51 = v47[5];
    uint64_t v77 = v48;
    swift_retain();
    swift_retain();
    uint64_t v76 = v51;
    swift_bridgeObjectRetain();
    uint64_t v75 = v45;
    swift_retain();
    uint64_t v52 = v72;
    swift_retain();
    uint64_t v53 = v46;
    swift_bridgeObjectRetain();
    int v67 = v49;
    uint64_t v54 = v49;
    uint64_t v55 = v52;
    char v56 = specialized Attribute.tryToReuse(by:indirectMap:testOnly:)(v54, v39, v78, v74);
    uint64_t v57 = v41;
    unsigned int v58 = v73;
    if ((v56 & 1) != 0
      && (uint64_t v59 = v39,
          char v60 = v82 & 1,
          (specialized Attribute.tryToReuse(by:indirectMap:testOnly:)(v71, v59, v82 & 1, v73) & 1) != 0)
      && (swift_beginAccess(),
          int v78 = *(_DWORD *)(v55 + 16),
          swift_beginAccess(),
          (specialized Attribute.tryToReuse(by:indirectMap:testOnly:)(*(unsigned int *)(v50 + 16), v59, v60, v78) & 1) != 0)
      && (char v61 = v82 & 1,
          (specialized Attribute.tryToReuse(by:indirectMap:testOnly:)(v69, v59, v82 & 1, v70) & 1) != 0))
    {
      uint64_t v90 = v75;
      unsigned int v91 = v74;
      uint64_t v92 = v55;
      unsigned int v93 = v58;
      uint64_t v94 = v70;
      int v95 = v68;
      uint64_t v96 = v53;
      *(void *)&long long v84 = v77;
      DWORD2(v84) = v67;
      uint64_t v85 = v50;
      unsigned int v86 = v71;
      uint64_t v87 = v69;
      int v88 = v66;
      uint64_t v89 = v76;
      char v62 = _GraphInputs.reuseCustomInputs(by:indirectMap:testOnly:)(&v84, v59, v61);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      specialized static Log.graphReuse(_:)();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      char v62 = 0;
    }
    uint64_t v64 = v83;
  }
  else
  {
    char v62 = 0;
    uint64_t v64 = v83;
    uint64_t v57 = v41;
  }
  v36(v79, a4);
  v36(v57, a4);
  v36(v64, a4);
  return v62 & 1;
}

uint64_t sub_245E0D4D8()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(type metadata accessor for UnaryElements() - 8) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0 + ((v2 + 32) & ~v2), v1);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t outlined destroy of (_ViewList_Elements, Int)?(uint64_t a1)
{
  type metadata accessor for (_ViewList_Elements, Int)?(0, &lazy cache variable for type metadata for (_ViewList_Elements, Int)?, (void (*)(uint64_t))type metadata accessor for (_ViewList_Elements, Int));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for (_ViewList_Elements, Int)()
{
  if (!lazy cache variable for type metadata for (_ViewList_Elements, Int))
  {
    type metadata accessor for ScrollStateRequest(255, (unint64_t *)&lazy cache variable for type metadata for _ViewList_Elements);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (_ViewList_Elements, Int));
    }
  }
}

uint64_t partial apply for implicit closure #1 in TypedUnaryViewGenerator.tryToReuse(by:indirectMap:testOnly:)()
{
  return implicit closure #1 in TypedUnaryViewGenerator.tryToReuse(by:indirectMap:testOnly:)();
}

uint64_t sub_245E0D6F0()
{
  return swift_deallocObject();
}

uint64_t sub_245E0D700()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_245E0D758()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t outlined destroy of SubgraphElements?(uint64_t a1)
{
  _s7SwiftUI10MutableBoxCyAA17CachedEnvironmentVGMaTm_4(0, &lazy cache variable for type metadata for SubgraphElements?, (uint64_t)&type metadata for SubgraphElements, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined destroy of SubgraphElements(uint64_t a1)
{
  return a1;
}

uint64_t assignWithCopy for BaseViewList.Init(uint64_t a1, uint64_t a2)
{
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 52);
  *(unsigned char *)(a1 + 60) = *(unsigned char *)(a2 + 60);
  *(void *)(a1 + 52) = v4;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  return a1;
}

uint64_t assignWithTake for BaseViewList.Init(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 52) = *(void *)(a2 + 52);
  *(unsigned char *)(a1 + 60) = *(unsigned char *)(a2 + 60);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  return a1;
}

uint64_t getEnumTagSinglePayload for BaseViewList.Init(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BaseViewList.Init(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BaseViewList.Init()
{
  return &type metadata for BaseViewList.Init;
}

uint64_t destroy for ModifiedElements(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ModifiedElements(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ModifiedElements(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ModifiedElements(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_release();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_release();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease();
  return a1;
}

void *type metadata accessor for SubgraphList.Transform()
{
  return &unk_26FA46A80;
}

unint64_t instantiation function for generic protocol witness table for BaseViewList.Init(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type BaseViewList.Init and conformance BaseViewList.Init();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t assignWithCopy for ModifiedViewList.Transform(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ModifiedViewList.Transform(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t ForEachSubviewCollection.init<A>(elementOf:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X8>)
{
  uint64_t v29 = a6;
  uint64_t v30 = a1;
  uint64_t v31 = a4;
  uint64_t v32 = a2;
  unsigned int v33 = a8;
  uint64_t v14 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v17 = lazy protocol witness table accessor for type SubviewsCollection and conformance SubviewsCollection();
  unint64_t v18 = lazy protocol witness table accessor for type Subview.ID and conformance Subview.ID();
  uint64_t v35 = &type metadata for SubviewsCollection;
  unsigned int v36 = &type metadata for Subview.ID;
  uint64_t v37 = a4;
  unint64_t v38 = v17;
  unint64_t v39 = v18;
  uint64_t v19 = type metadata accessor for ForEach();
  uint64_t v34 = a6;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v35 = (ValueMetadata *)a5;
  unsigned int v36 = (ValueMetadata *)v19;
  uint64_t v37 = a7;
  unint64_t v38 = WitnessTable;
  uint64_t v21 = type metadata accessor for GroupElementsOfContent();
  double v22 = MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)&v28 - v23;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v14 + 16))(v16, a1, a5, v22);
  int v25 = (void *)swift_allocObject();
  v25[2] = v31;
  void v25[3] = a5;
  v25[4] = v29;
  void v25[5] = a7;
  v25[6] = v32;
  v25[7] = a3;
  swift_retain();
  GroupElementsOfContent.init(subviews:content:)((uint64_t)v16, (uint64_t)partial apply for closure #1 in ForEachSubviewCollection.init<A>(elementOf:content:), (uint64_t)v25, a5, v19, a7, WitnessTable, (uint64_t)v24);
  swift_getWitnessTable();
  uint64_t v26 = AnyView.init<A>(_:)((uint64_t)v24, v21);
  swift_release();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(v30, a5);
  *unsigned int v33 = v26;
  return result;
}

void sub_245E0DFF4()
{
}

__n128 ForEach.init<A>(elementOf:content:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v16 = *(void *)(a5 - 8);
  double v17 = MEMORY[0x270FA5388](a1);
  uint64_t v19 = (char *)&KeyPath - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v19, a1, v20, v17);
  swift_retain();
  ForEachSubviewCollection.init<A>(elementOf:content:)((uint64_t)v19, a2, a3, a4, a5, a6, a7, &v26);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v21 = type metadata accessor for ForEachSubviewCollection();
  swift_getWitnessTable();
  lazy protocol witness table accessor for type Subview.ID and conformance Subview.ID();
  ForEach.init(_:idGenerator:content:)((uint64_t)&v26, &KeyPath, a2, a3, v21, (uint64_t)&v27);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(a1, a5);
  uint64_t v22 = v28;
  uint64_t v23 = v30;
  __n128 result = v29;
  *(_OWORD *)a8 = v27;
  *(void *)(a8 + 16) = v22;
  *(__n128 *)(a8 + 24) = result;
  *(void *)(a8 + 40) = v23;
  return result;
}

uint64_t closure #1 in ForEachSubviewCollection.init<A>(elementOf:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  outlined init with copy of SubviewsCollection(a1, (uint64_t)v19);
  uint64_t v15 = (void *)swift_allocObject();
  _OWORD v15[2] = a4;
  void v15[3] = a5;
  void v15[4] = a6;
  void v15[5] = a7;
  void v15[6] = a2;
  v15[7] = a3;
  unint64_t v16 = lazy protocol witness table accessor for type SubviewsCollection and conformance SubviewsCollection();
  unint64_t v17 = lazy protocol witness table accessor for type Subview and conformance Subview();
  swift_retain();
  return ForEach<>.init(_:content:)((uint64_t)v19, (uint64_t)partial apply for closure #1 in closure #1 in ForEachSubviewCollection.init<A>(elementOf:content:), (uint64_t)v15, (uint64_t)&type metadata for SubviewsCollection, (uint64_t)&type metadata for Subview.ID, a4, v16, a6, a8, v17);
}

uint64_t closure #1 in closure #1 in ForEachSubviewCollection.init<A>(elementOf:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  unint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v12 = MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v18 - v13;
  v15(v12);
  static ViewBuilder.buildExpression<A>(_:)(v10, a4, a6);
  unint64_t v16 = *(void (**)(char *, uint64_t))(v8 + 8);
  v16(v10, a4);
  static ViewBuilder.buildExpression<A>(_:)(v14, a4, a6);
  return ((uint64_t (*)(char *, uint64_t))v16)(v14, a4);
}

void ForEachSubviewCollection.startIndex.getter()
{
}

void ForEachSubviewCollection.endIndex.getter()
{
}

void ForEachSubviewCollection.subscript.getter()
{
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in ForEachSubviewCollection<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in ForEachSubviewCollection<A>()
{
  return swift_getWitnessTable();
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance ForEachSubviewCollection<A>(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v5 = MEMORY[0x263F8D708];

  return MEMORY[0x270F9E060](a1, a2, WitnessTable, v5);
}

void *protocol witness for BidirectionalCollection.formIndex(before:) in conformance ForEachSubviewCollection<A>(void *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance ForEachSubviewCollection<A>(a1, a2, a3, MEMORY[0x263F8D7A8]);
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance ForEachSubviewCollection<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x263F8D708];

  return MEMORY[0x270F9E068](a1, a2, a3, WitnessTable, v7);
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance ForEachSubviewCollection<A>()
{
  swift_getWitnessTable();

  return RandomAccessCollection.index(_:offsetBy:limitedBy:)();
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance ForEachSubviewCollection<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x263F8D708];

  return MEMORY[0x270F9E078](a1, a2, a3, WitnessTable, v7);
}

void protocol witness for Collection.startIndex.getter in conformance ForEachSubviewCollection<A>()
{
}

void protocol witness for Collection.endIndex.getter in conformance ForEachSubviewCollection<A>()
{
}

void protocol witness for Collection.subscript.read in conformance ForEachSubviewCollection<A>(void **a1)
{
  *a1 = malloc(0x28uLL);
  ForEachSubviewCollection.subscript.read();
}

void (*sub_245E0E88C(uint64_t a1))(void *a1)
{
  *(void *)(v1 + 32) = a1;
  return protocol witness for Collection.subscript.read in conformance ArrayWith2Inline<A>;
}

void ForEachSubviewCollection.subscript.read()
{
}

uint64_t protocol witness for Collection.subscript.getter in conformance ForEachSubviewCollection<A>()
{
  return MEMORY[0x270F9E1D0]();
}

uint64_t protocol witness for Collection.indices.getter in conformance ForEachSubviewCollection<A>()
{
  swift_getWitnessTable();

  return RandomAccessCollection<>.indices.getter();
}

uint64_t protocol witness for Collection.index(after:) in conformance ForEachSubviewCollection<A>(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v5 = MEMORY[0x263F8D708];

  return MEMORY[0x270F9E058](a1, a2, WitnessTable, v5);
}

void *protocol witness for Collection.formIndex(after:) in conformance ForEachSubviewCollection<A>(void *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance ForEachSubviewCollection<A>(a1, a2, a3, MEMORY[0x263F8D7A0]);
}

void *protocol witness for BidirectionalCollection.formIndex(before:) in conformance ForEachSubviewCollection<A>(void *a1, uint64_t a2, uint64_t a3, void *(*a4)(uint64_t *__return_ptr, void *, uint64_t, uint64_t, void))
{
  uint64_t WitnessTable = swift_getWitnessTable();
  __n128 result = a4(&v9, a1, a2, WitnessTable, MEMORY[0x263F8D708]);
  *a1 = v9;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance ForEachSubviewCollection<A>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270F9E108](a1, WitnessTable);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance ForEachSubviewCollection<A>()
{
  swift_getWitnessTable();

  return Collection._copyToContiguousArray()();
}

uint64_t sub_245E0EB20()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ForEachSubviewCollection.init<A>(elementOf:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in ForEachSubviewCollection.init<A>(elementOf:content:)(a1, v2[6], v2[7], v2[2], v2[3], v2[4], v2[5], a2);
}

uint64_t partial apply for closure #1 in closure #1 in ForEachSubviewCollection.init<A>(elementOf:content:)(uint64_t a1)
{
  return closure #1 in closure #1 in ForEachSubviewCollection.init<A>(elementOf:content:)(a1, v1[6], v1[7], v1[2], v1[3], v1[4]);
}

uint64_t FloatingPoint.isAlmostEqual(to:tolerance:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v34 = a2;
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  unint64_t v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v31 - v12;
  MEMORY[0x270FA5388](v14);
  unint64_t v16 = (char *)&v31 - v15;
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v31 - v18;
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v31 - v21;
  uint64_t v36 = v4;
  char v23 = dispatch thunk of FloatingPoint.isFinite.getter();
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v35 = a1;
  v24(v22, a1, a3);
  if ((v23 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v22, a3);
    goto LABEL_5;
  }
  unsigned int v33 = v19;
  char v25 = dispatch thunk of FloatingPoint.isFinite.getter();
  uint64_t v26 = *(void (**)(char *, uint64_t))(v8 + 8);
  v26(v22, a3);
  if ((v25 & 1) == 0)
  {
LABEL_5:
    char v29 = FloatingPoint.rescaledAlmostEqual(to:tolerance:)(v35, v34, a3, a4);
    return v29 & 1;
  }
  uint64_t v32 = v16;
  abs<A>(_:)();
  abs<A>(_:)();
  dispatch thunk of static FloatingPoint.leastNormalMagnitude.getter();
  static Array._allocateUninitialized(_:)();
  long long v27 = v32;
  max<A>(_:_:_:_:)();
  swift_bridgeObjectRelease();
  v26(v10, a3);
  v26(v13, a3);
  v26(v27, a3);
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  abs<A>(_:)();
  v26(v13, a3);
  uint64_t v28 = v33;
  dispatch thunk of static Numeric.* infix(_:_:)();
  char v29 = dispatch thunk of static Comparable.< infix(_:_:)();
  v26(v13, a3);
  v26(v27, a3);
  v26(v28, a3);
  return v29 & 1;
}

uint64_t FloatingPoint.rescaledAlmostEqual(to:tolerance:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v50 = a2;
  uint64_t v53 = a1;
  swift_getAssociatedTypeWitness();
  uint64_t v45 = *(void *)(*(void *)(*(void *)(swift_getAssociatedConformanceWitness() + 8) + 24) + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v48 = (char *)v37 - v7;
  uint64_t v44 = *(void *)(*(void *)(*(void *)(a4 + 16) + 8) + 16);
  uint64_t v42 = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](v42);
  long long v41 = (char *)v37 - v8;
  uint64_t v46 = swift_checkMetadataState();
  MEMORY[0x270FA5388](v46);
  uint64_t v47 = (char *)v37 - v9;
  uint64_t v10 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v11);
  long long v43 = (char *)v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)v37 - v14;
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)v37 - v17;
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)v37 - v20;
  uint64_t v51 = v4;
  uint64_t v52 = a4;
  char v22 = dispatch thunk of FloatingPoint.isNaN.getter();
  char v23 = *(void (**)(char *))(v10 + 16);
  uint64_t v24 = a3;
  v23(v21);
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v21, a3);
    char v25 = 0;
  }
  else
  {
    v37[1] = v10 + 16;
    unint64_t v38 = (void (*)(char *, uint64_t, uint64_t))v23;
    unint64_t v39 = v15;
    char v40 = v18;
    long long v27 = v51;
    uint64_t v26 = v52;
    uint64_t v28 = a3;
    char v29 = dispatch thunk of FloatingPoint.isNaN.getter();
    uint64_t v30 = *(void (**)(char *, uint64_t))(v10 + 8);
    v30(v21, v24);
    if (v29)
    {
      char v25 = 0;
    }
    else
    {
      if (dispatch thunk of FloatingPoint.isInfinite.getter())
      {
        if ((dispatch thunk of FloatingPoint.isInfinite.getter() & 1) == 0)
        {
          dispatch thunk of FloatingPoint.sign.getter();
          uint64_t v32 = v39;
          dispatch thunk of static FloatingPoint.greatestFiniteMagnitude.getter();
          dispatch thunk of FloatingPoint.exponent.getter();
          v30(v32, v24);
          swift_getAssociatedConformanceWitness();
          dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
          uint64_t v51 = v30;
          unsigned int v33 = v43;
          dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
          dispatch thunk of FloatingPoint.init(sign:exponent:significand:)();
          swift_getAssociatedConformanceWitness();
          dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
          dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
          v38(v33, v53, v28);
          dispatch thunk of FloatingPoint.init(sign:exponent:significand:)();
          uint64_t v34 = v40;
          char v25 = FloatingPoint.isAlmostEqual(to:tolerance:)(v32, v50, v28, v26);
          uint64_t v35 = v51;
          v51(v32, v28);
          v35(v34, v28);
          return v25 & 1;
        }
        char v31 = dispatch thunk of static Equatable.== infix(_:_:)();
      }
      else
      {
        char v31 = FloatingPoint.rescaledAlmostEqual(to:tolerance:)(v27, v50, v24, v26);
      }
      char v25 = v31;
    }
  }
  return v25 & 1;
}

uint64_t FloatingPoint.isAlmostEqual(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v15 - v10;
  dispatch thunk of static FloatingPoint.ulpOfOne.getter();
  dispatch thunk of FloatingPoint.squareRoot()();
  uint64_t v12 = *(void (**)(char *, uint64_t))(v6 + 8);
  v12(v8, a2);
  char v13 = FloatingPoint.isAlmostEqual(to:tolerance:)(a1, (uint64_t)v11, a2, a3);
  v12(v11, a2);
  return v13 & 1;
}

uint64_t FloatingPoint.isAlmostZero(absoluteTolerance:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  abs<A>(_:)();
  char v6 = dispatch thunk of static Comparable.< infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, a2);
  return v6 & 1;
}

Swift::Bool __swiftcall FloatingPoint.isAlmostZero()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 - 8);
  ((void (*)())MEMORY[0x270FA5388])();
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v11 - v6;
  dispatch thunk of static FloatingPoint.ulpOfOne.getter();
  dispatch thunk of FloatingPoint.squareRoot()();
  uint64_t v8 = *(void (**)(char *, uint64_t))(v2 + 8);
  v8(v4, v1);
  char v9 = FloatingPoint.isAlmostZero(absoluteTolerance:)((uint64_t)v7, v1);
  v8(v7, v1);
  return v9 & 1;
}

uint64_t TimeDataFormatting.Resolvable.entries(from:mode:)(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  char v15 = *a2;
  long long v13 = *(_OWORD *)(a3 + 32);
  long long v14 = *(_OWORD *)(a3 + 16);
  long long v17 = v14;
  long long v18 = v13;
  uint64_t v6 = type metadata accessor for TimeDataFormatting.Configuration();
  TimeDataFormatting.Configuration.formatAndFrequency(for:mode:)((uint64_t)&v17, (char *)&v16, a1, &v15, v6);
  int v7 = v16;
  uint64_t v9 = *((void *)&v18 + 1);
  uint64_t v8 = v19;
  __swift_project_boxed_opaque_existential_1(&v17, *((uint64_t *)&v18 + 1));
  if (v7 == 3)
  {
    uint64_t v10 = DiscreteFormatStyle.complyingFormatStyleEntries<A>(from:for:)(a1, v4, v9, v14, v8, v13);
  }
  else
  {
    unsigned __int8 v16 = v7;
    uint64_t v10 = DiscreteFormatStyle.fallbackRedactionEntries<A>(from:for:allowedFrequency:)(a1, v4, &v16, v9, v14, v8, v13);
  }
  uint64_t v11 = v10;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
  return v11;
}

uint64_t DiscreteFormatStyle.fallbackRedactionEntries<A>(from:for:allowedFrequency:)(uint64_t a1, uint64_t a2, unsigned char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v31 = a2;
  v27[1] = a7;
  v27[2] = a6;
  uint64_t v8 = a6;
  uint64_t v28 = a1;
  uint64_t v30 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  char v29 = (char *)v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v15);
  long long v17 = (char *)v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for TimeDataFormatting.EntriesState();
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)v27 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33[0] = a5;
  v33[1] = a4;
  v33[2] = a7;
  v33[3] = v8;
  uint64_t v21 = type metadata accessor for TimeDataFormatting.FallbackRedactionEntries();
  MEMORY[0x270FA5388](v21);
  char v23 = (char *)v27 - v22;
  LOBYTE(v8) = *a3;
  uint64_t v24 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v24 - 8) + 16))(v20, v28, v24);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, v31, a5);
  uint64_t v25 = (uint64_t)v29;
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v29, v32, a4);
  LOBYTE(v33[0]) = v8;
  TimeDataFormatting.FallbackRedactionEntries.init(state:source:format:allowedFrequency:)((uint64_t)v20, (uint64_t)v17, v25, (char *)v33, a5, a4, (uint64_t)v23);
  swift_getWitnessTable();
  return AnySequence.init<A>(_:)();
}

uint64_t DiscreteFormatStyle.complyingFormatStyleEntries<A>(from:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v29 = a2;
  v26[0] = a6;
  v26[1] = a5;
  uint64_t v10 = *(void *)(a3 - 8);
  uint64_t v27 = a1;
  uint64_t v28 = v10;
  MEMORY[0x270FA5388](a1);
  uint64_t v12 = (char *)v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v15);
  long long v17 = (char *)v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for TimeDataFormatting.EntriesState();
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)v26 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = a4;
  uint64_t v32 = a3;
  uint64_t v33 = a6;
  uint64_t v34 = a5;
  uint64_t v21 = type metadata accessor for TimeDataFormatting.ComplyingFormatStyleEntries();
  MEMORY[0x270FA5388](v21);
  char v23 = (char *)v26 - v22;
  uint64_t v24 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v24 - 8) + 16))(v20, v27, v24);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, v29, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v12, v30, a3);
  TimeDataFormatting.ComplyingFormatStyleEntries.init(state:source:format:)((uint64_t)v20, (uint64_t)v17, (uint64_t)v12, a4, a3, (uint64_t)v23);
  swift_getWitnessTable();
  return AnySequence.init<A>(_:)();
}

uint64_t protocol witness for TimelineSchedule.entries(from:mode:) in conformance TimeDataFormatting.Resolvable<A, B>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = TimeDataFormatting.Resolvable.entries(from:mode:)(a1, a2, a3);
  *a4 = result;
  return result;
}

uint64_t type metadata accessor for TimeDataFormatting.EntriesState()
{
  uint64_t result = type metadata singleton initialization cache for TimeDataFormatting.EntriesState;
  if (!type metadata singleton initialization cache for TimeDataFormatting.EntriesState) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata accessor for TimeDataFormatting.FallbackRedactionEntries()
{
  return swift_getGenericMetadata();
}

uint64_t TimeDataFormatting.ComplyingFormatStyleEntries.init(state:source:format:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  outlined init with take of TimeDataFormatting.EntriesState(a1, a6);
  uint64_t v11 = type metadata accessor for TimeDataFormatting.ComplyingFormatStyleEntries();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a6 + *(int *)(v11 + 52), a2, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(a6 + *(int *)(v11 + 56), a3, a5);
}

uint64_t TimeDataFormatting.FallbackRedactionEntries.init(state:source:format:allowedFrequency:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  char v12 = *a4;
  outlined init with take of TimeDataFormatting.EntriesState(a1, a7);
  uint64_t v13 = (int *)type metadata accessor for TimeDataFormatting.FallbackRedactionEntries();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(a7 + v13[13], a2, a5);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(a7 + v13[14], a3, a6);
  *(unsigned char *)(a7 + v13[15]) = v12;
  return result;
}

uint64_t outlined init with take of TimeDataFormatting.EntriesState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TimeDataFormatting.EntriesState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for TimeDataFormatting.ComplyingFormatStyleEntries()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata completion function for TimeDataFormatting.ComplyingFormatStyleEntries()
{
  uint64_t result = type metadata accessor for TimeDataFormatting.EntriesState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for TimeDataFormatting.ComplyingFormatStyleEntries(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  size_t v9 = v8 + 1;
  uint64_t v11 = *(void *)(a3 + 16);
  uint64_t v10 = *(void *)(a3 + 24);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(_DWORD *)(v12 + 80);
  uint64_t v14 = v8 + 1 + v13;
  uint64_t v15 = *(void *)(v12 + 64);
  uint64_t v16 = *(void *)(v10 - 8);
  uint64_t v17 = *(_DWORD *)(v16 + 80);
  uint64_t v18 = (*(unsigned char *)(v12 + 80) | *(unsigned char *)(v7 + 80) | *(unsigned char *)(v16 + 80));
  if (v18 <= 7
    && ((v15 + v17 + ((v8 + 1 + v13) & ~v13)) & (unint64_t)~v17) + *(void *)(*(void *)(v10 - 8) + 64) <= 0x18
    && ((*(_DWORD *)(v12 + 80) | *(_DWORD *)(v7 + 80) | *(_DWORD *)(v16 + 80)) & 0x100000) == 0)
  {
    unsigned int v22 = a2[v8];
    unsigned int v23 = v22 - 2;
    if (v22 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v24 = v8;
      }
      else {
        uint64_t v24 = 4;
      }
      switch(v24)
      {
        case 1:
          int v25 = *a2;
          if (v8 < 4) {
            goto LABEL_19;
          }
          goto LABEL_21;
        case 2:
          int v25 = *(unsigned __int16 *)a2;
          if (v8 >= 4) {
            goto LABEL_21;
          }
          goto LABEL_19;
        case 3:
          int v25 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v8 < 4) {
            goto LABEL_19;
          }
          goto LABEL_21;
        case 4:
          int v25 = *(_DWORD *)a2;
          if (v8 < 4) {
LABEL_19:
          }
            unsigned int v22 = (v25 | (v23 << (8 * v8))) + 2;
          else {
LABEL_21:
          }
            unsigned int v22 = v25 + 2;
          break;
        default:
          break;
      }
    }
    uint64_t v26 = ~v13;
    uint64_t v33 = v10;
    if (v22 == 1)
    {
      uint64_t v32 = v11;
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v7 + 16))(a1, a2, v6);
      uint64_t v27 = v32;
      *((unsigned char *)a1 + v8) = 1;
    }
    else if (v22)
    {
      uint64_t v28 = v11;
      memcpy(a1, a2, v9);
      uint64_t v27 = v28;
    }
    else
    {
      uint64_t v31 = v11;
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v7 + 16))(a1, a2, v6);
      uint64_t v27 = v31;
      *((unsigned char *)a1 + v8) = 0;
    }
    unint64_t v29 = (unint64_t)&a2[v14] & v26;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v12 + 16))(((unint64_t)a1 + v14) & v26, v29, v27);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v16 + 16))(((((unint64_t)a1 + v14) & v26) + v15 + v17) & ~v17, (v29 + v15 + v17) & ~v17, v33);
  }
  else
  {
    uint64_t v21 = *(void *)a2;
    *a1 = *(void *)a2;
    a1 = (void *)(v21 + ((v18 + 16) & ~v18));
    swift_retain();
  }
  return a1;
}

unsigned char *initializeWithCopy for TimeDataFormatting.ComplyingFormatStyleEntries(unsigned char *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  unsigned int v9 = a2[v8];
  unsigned int v10 = v9 - 2;
  if (v9 >= 2)
  {
    if (v8 <= 3) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = 4;
    }
    switch(v11)
    {
      case 1:
        int v12 = *a2;
        goto LABEL_10;
      case 2:
        int v12 = *(unsigned __int16 *)a2;
        goto LABEL_10;
      case 3:
        int v12 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_10;
      case 4:
        int v12 = *(_DWORD *)a2;
LABEL_10:
        int v13 = (v12 | (v10 << (8 * v8))) + 2;
        unsigned int v9 = v12 + 2;
        if (v8 < 4) {
          unsigned int v9 = v13;
        }
        break;
      default:
        break;
    }
  }
  if (v9 == 1)
  {
    (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v7 + 16))(a1, a2, v6);
    a1[v8] = 1;
  }
  else if (v9)
  {
    memcpy(a1, a2, v8 + 1);
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v7 + 16))(a1, a2, v6);
    a1[v8] = 0;
  }
  uint64_t v14 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v15 = v14 + 16;
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = v8 + v16 + 1;
  unint64_t v18 = (unint64_t)&a1[v17] & ~v16;
  unint64_t v19 = (unint64_t)&a2[v17] & ~v16;
  (*(void (**)(unint64_t, unint64_t))(v14 + 16))(v18, v19);
  uint64_t v20 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v20 + 16))((*(void *)(v15 + 48) + *(unsigned __int8 *)(v20 + 80) + v18) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80), (*(void *)(v15 + 48) + *(unsigned __int8 *)(v20 + 80) + v19) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
  return a1;
}

unsigned __int8 *assignWithCopy for TimeDataFormatting.ComplyingFormatStyleEntries(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = type metadata accessor for Date();
    uint64_t v7 = *(void *)(v6 - 8);
    uint64_t v8 = *(void *)(v7 + 64);
    unsigned int v9 = a1[v8];
    unsigned int v10 = v9 - 2;
    if (v9 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v11 = v8;
      }
      else {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 1:
          int v12 = *a1;
          goto LABEL_11;
        case 2:
          int v12 = *(unsigned __int16 *)a1;
          goto LABEL_11;
        case 3:
          int v12 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_11;
        case 4:
          int v12 = *(_DWORD *)a1;
LABEL_11:
          int v13 = (v12 | (v10 << (8 * v8))) + 2;
          unsigned int v9 = v12 + 2;
          if (v8 < 4) {
            unsigned int v9 = v13;
          }
          break;
        default:
          break;
      }
    }
    if (v9 <= 1) {
      (*(void (**)(unsigned __int8 *, uint64_t))(v7 + 8))(a1, v6);
    }
    unsigned int v14 = a2[v8];
    unsigned int v15 = v14 - 2;
    if (v14 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v16 = v8;
      }
      else {
        uint64_t v16 = 4;
      }
      switch(v16)
      {
        case 1:
          int v17 = *a2;
          goto LABEL_24;
        case 2:
          int v17 = *(unsigned __int16 *)a2;
          goto LABEL_24;
        case 3:
          int v17 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_24;
        case 4:
          int v17 = *(_DWORD *)a2;
LABEL_24:
          int v18 = (v17 | (v15 << (8 * v8))) + 2;
          unsigned int v14 = v17 + 2;
          if (v8 < 4) {
            unsigned int v14 = v18;
          }
          break;
        default:
          break;
      }
    }
    if (v14 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 16))(a1, a2, v6);
      a1[v8] = 1;
    }
    else if (v14)
    {
      memcpy(a1, a2, v8 + 1);
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 16))(a1, a2, v6);
      a1[v8] = 0;
    }
  }
  uint64_t v19 = type metadata accessor for Date();
  uint64_t v20 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v21 = v20 + 24;
  uint64_t v22 = *(unsigned __int8 *)(v20 + 80);
  uint64_t v23 = *(void *)(*(void *)(v19 - 8) + 64) + v22 + 1;
  unint64_t v24 = (unint64_t)&a1[v23] & ~v22;
  unint64_t v25 = (unint64_t)&a2[v23] & ~v22;
  (*(void (**)(unint64_t, unint64_t))(v20 + 24))(v24, v25);
  uint64_t v26 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v26 + 24))((*(void *)(v21 + 40) + *(unsigned __int8 *)(v26 + 80) + v24) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80), (*(void *)(v21 + 40) + *(unsigned __int8 *)(v26 + 80) + v25) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80));
  return a1;
}

unsigned char *initializeWithTake for TimeDataFormatting.ComplyingFormatStyleEntries(unsigned char *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  unsigned int v9 = a2[v8];
  unsigned int v10 = v9 - 2;
  if (v9 >= 2)
  {
    if (v8 <= 3) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = 4;
    }
    switch(v11)
    {
      case 1:
        int v12 = *a2;
        goto LABEL_10;
      case 2:
        int v12 = *(unsigned __int16 *)a2;
        goto LABEL_10;
      case 3:
        int v12 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_10;
      case 4:
        int v12 = *(_DWORD *)a2;
LABEL_10:
        int v13 = (v12 | (v10 << (8 * v8))) + 2;
        unsigned int v9 = v12 + 2;
        if (v8 < 4) {
          unsigned int v9 = v13;
        }
        break;
      default:
        break;
    }
  }
  if (v9 == 1)
  {
    (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v7 + 32))(a1, a2, v6);
    a1[v8] = 1;
  }
  else if (v9)
  {
    memcpy(a1, a2, v8 + 1);
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v7 + 32))(a1, a2, v6);
    a1[v8] = 0;
  }
  uint64_t v14 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v15 = v14 + 32;
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = v8 + v16 + 1;
  unint64_t v18 = (unint64_t)&a1[v17] & ~v16;
  unint64_t v19 = (unint64_t)&a2[v17] & ~v16;
  (*(void (**)(unint64_t, unint64_t))(v14 + 32))(v18, v19);
  uint64_t v20 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v20 + 32))((*(void *)(v15 + 32) + *(unsigned __int8 *)(v20 + 80) + v18) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80), (*(void *)(v15 + 32) + *(unsigned __int8 *)(v20 + 80) + v19) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
  return a1;
}

unsigned __int8 *assignWithTake for TimeDataFormatting.ComplyingFormatStyleEntries(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = type metadata accessor for Date();
    uint64_t v7 = *(void *)(v6 - 8);
    uint64_t v8 = *(void *)(v7 + 64);
    unsigned int v9 = a1[v8];
    unsigned int v10 = v9 - 2;
    if (v9 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v11 = v8;
      }
      else {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 1:
          int v12 = *a1;
          goto LABEL_11;
        case 2:
          int v12 = *(unsigned __int16 *)a1;
          goto LABEL_11;
        case 3:
          int v12 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_11;
        case 4:
          int v12 = *(_DWORD *)a1;
LABEL_11:
          int v13 = (v12 | (v10 << (8 * v8))) + 2;
          unsigned int v9 = v12 + 2;
          if (v8 < 4) {
            unsigned int v9 = v13;
          }
          break;
        default:
          break;
      }
    }
    if (v9 <= 1) {
      (*(void (**)(unsigned __int8 *, uint64_t))(v7 + 8))(a1, v6);
    }
    unsigned int v14 = a2[v8];
    unsigned int v15 = v14 - 2;
    if (v14 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v16 = v8;
      }
      else {
        uint64_t v16 = 4;
      }
      switch(v16)
      {
        case 1:
          int v17 = *a2;
          goto LABEL_24;
        case 2:
          int v17 = *(unsigned __int16 *)a2;
          goto LABEL_24;
        case 3:
          int v17 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_24;
        case 4:
          int v17 = *(_DWORD *)a2;
LABEL_24:
          int v18 = (v17 | (v15 << (8 * v8))) + 2;
          unsigned int v14 = v17 + 2;
          if (v8 < 4) {
            unsigned int v14 = v18;
          }
          break;
        default:
          break;
      }
    }
    if (v14 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 32))(a1, a2, v6);
      a1[v8] = 1;
    }
    else if (v14)
    {
      memcpy(a1, a2, v8 + 1);
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 32))(a1, a2, v6);
      a1[v8] = 0;
    }
  }
  uint64_t v19 = type metadata accessor for Date();
  uint64_t v20 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v21 = v20 + 40;
  uint64_t v22 = *(unsigned __int8 *)(v20 + 80);
  uint64_t v23 = *(void *)(*(void *)(v19 - 8) + 64) + v22 + 1;
  unint64_t v24 = (unint64_t)&a1[v23] & ~v22;
  unint64_t v25 = (unint64_t)&a2[v23] & ~v22;
  (*(void (**)(unint64_t, unint64_t))(v20 + 40))(v24, v25);
  uint64_t v26 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v26 + 40))((*(void *)(v21 + 24) + *(unsigned __int8 *)(v26 + 80) + v24) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80), (*(void *)(v21 + 24) + *(unsigned __int8 *)(v26 + 80) + v25) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for TimeDataFormatting.ComplyingFormatStyleEntries(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(type metadata accessor for Date() - 8) + 64);
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  uint64_t v10 = *(void *)(v7 - 8);
  uint64_t v11 = *(unsigned int *)(v10 + 84);
  uint64_t v12 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v13 = *(void *)(v8 + 64);
  uint64_t v14 = *(unsigned __int8 *)(v10 + 80);
  if (v9 <= v11) {
    unsigned int v15 = *(_DWORD *)(v10 + 84);
  }
  else {
    unsigned int v15 = *(_DWORD *)(v8 + 84);
  }
  if (v15 <= 0xFD) {
    unsigned int v16 = 253;
  }
  else {
    unsigned int v16 = v15;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v17 = v6 + v12 + 1;
  if (a2 <= v16) {
    goto LABEL_28;
  }
  uint64_t v18 = ((v13 + v14 + (v17 & ~v12)) & ~v14) + *(void *)(*(void *)(v7 - 8) + 64);
  char v19 = 8 * v18;
  if (v18 <= 3)
  {
    unsigned int v22 = ((a2 - v16 + ~(-1 << v19)) >> v19) + 1;
    if (HIWORD(v22))
    {
      int v20 = *(_DWORD *)((char *)a1 + v18);
      if (!v20) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v22 > 0xFF)
    {
      int v20 = *(unsigned __int16 *)((char *)a1 + v18);
      if (!*(unsigned __int16 *)((char *)a1 + v18)) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v22 < 2)
    {
LABEL_28:
      if (v15 > 0xFD)
      {
        unint64_t v27 = ((unint64_t)a1 + v17) & ~v12;
        if (v9 == v16)
        {
          uint64_t v28 = *(uint64_t (**)(unint64_t))(v8 + 48);
          return v28(v27);
        }
        else
        {
          unint64_t v29 = (v27 + v13 + v14) & ~v14;
          uint64_t v30 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v10 + 48);
          return v30(v29, v11, v7);
        }
      }
      else
      {
        unsigned int v26 = *((unsigned __int8 *)a1 + v6);
        if (v26 >= 3) {
          return (v26 ^ 0xFF) + 1;
        }
        else {
          return 0;
        }
      }
    }
  }
  int v20 = *((unsigned __int8 *)a1 + v18);
  if (!*((unsigned char *)a1 + v18)) {
    goto LABEL_28;
  }
LABEL_18:
  int v23 = (v20 - 1) << v19;
  if (v18 > 3) {
    int v23 = 0;
  }
  if (v18)
  {
    if (v18 <= 3) {
      int v24 = v18;
    }
    else {
      int v24 = 4;
    }
    switch(v24)
    {
      case 2:
        int v25 = *a1;
        break;
      case 3:
        int v25 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v25 = *(_DWORD *)a1;
        break;
      default:
        int v25 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v25 = 0;
  }
  return v16 + (v25 | v23) + 1;
}

void storeEnumTagSinglePayload for TimeDataFormatting.ComplyingFormatStyleEntries(unsigned char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(*(void *)(type metadata accessor for Date() - 8) + 64);
  uint64_t v9 = *(void *)(a4 + 24);
  uint64_t v10 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v11 = *(_DWORD *)(v10 + 84);
  uint64_t v12 = *(void *)(v9 - 8);
  uint64_t v13 = *(unsigned int *)(v12 + 84);
  uint64_t v14 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v15 = *(void *)(v10 + 64);
  uint64_t v16 = *(unsigned __int8 *)(v12 + 80);
  if (v11 <= v13) {
    unsigned int v17 = *(_DWORD *)(v12 + 84);
  }
  else {
    unsigned int v17 = *(_DWORD *)(v10 + 84);
  }
  if (v17 <= 0xFD) {
    unsigned int v18 = 253;
  }
  else {
    unsigned int v18 = v17;
  }
  unsigned int v19 = v8 + 1;
  uint64_t v20 = v8 + 1 + v14;
  size_t v21 = ((v15 + v16 + (v20 & ~v14)) & ~v16) + *(void *)(*(void *)(v9 - 8) + 64);
  if (a3 <= v18)
  {
    int v22 = 0;
  }
  else if (v21 <= 3)
  {
    unsigned int v26 = ((a3 - v18 + ~(-1 << (8 * v21))) >> (8 * v21)) + 1;
    if (HIWORD(v26))
    {
      int v22 = 4;
    }
    else if (v26 >= 0x100)
    {
      int v22 = 2;
    }
    else
    {
      int v22 = v26 > 1;
    }
  }
  else
  {
    int v22 = 1;
  }
  if (v18 < a2)
  {
    unsigned int v23 = ~v18 + a2;
    if (v21 < 4)
    {
      int v24 = (v23 >> (8 * v21)) + 1;
      if (v21)
      {
        int v27 = v23 & ~(-1 << (8 * v21));
        bzero(a1, v21);
        if (v21 == 3)
        {
          *(_WORD *)a1 = v27;
          a1[2] = BYTE2(v27);
        }
        else if (v21 == 2)
        {
          *(_WORD *)a1 = v27;
        }
        else
        {
          *a1 = v27;
        }
      }
    }
    else
    {
      bzero(a1, v21);
      *(_DWORD *)a1 = v23;
      int v24 = 1;
    }
    switch(v22)
    {
      case 1:
        a1[v21] = v24;
        return;
      case 2:
        *(_WORD *)&a1[v21] = v24;
        return;
      case 3:
        goto LABEL_55;
      case 4:
        *(_DWORD *)&a1[v21] = v24;
        return;
      default:
        return;
    }
  }
  uint64_t v25 = ~v14;
  switch(v22)
  {
    case 1:
      a1[v21] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)&a1[v21] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_55:
      __break(1u);
      JUMPOUT(0x245E115C0);
    case 4:
      *(_DWORD *)&a1[v21] = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (a2)
      {
LABEL_27:
        if (v17 > 0xFD)
        {
          unint64_t v28 = (unint64_t)&a1[v20] & v25;
          if (v11 == v18)
          {
            unint64_t v29 = *(void (**)(unint64_t, uint64_t))(v10 + 56);
            v29(v28, a2);
          }
          else
          {
            unint64_t v31 = (v28 + v15 + v16) & ~v16;
            uint64_t v32 = *(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56);
            v32(v31, a2, v13, v9);
          }
        }
        else if (a2 > 0xFD)
        {
          int v30 = a2 - 254;
          if (v19 < 4)
          {
            if (v8 != -1)
            {
              int v33 = v30 & ~(-1 << (8 * v19));
              bzero(a1, v8 + 1);
              if (v19 == 3)
              {
                *(_WORD *)a1 = v33;
                a1[2] = BYTE2(v33);
              }
              else if (v19 == 2)
              {
                *(_WORD *)a1 = v33;
              }
              else
              {
                *a1 = v33;
              }
            }
          }
          else
          {
            bzero(a1, v8 + 1);
            *(_DWORD *)a1 = v30;
          }
        }
        else
        {
          a1[v8] = -(char)a2;
        }
      }
      return;
  }
}

uint64_t type metadata completion function for TimeDataFormatting.FallbackRedactionEntries()
{
  uint64_t result = type metadata accessor for TimeDataFormatting.EntriesState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for TimeDataFormatting.FallbackRedactionEntries(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  size_t v9 = v8 + 1;
  uint64_t v11 = *(void *)(a3 + 16);
  uint64_t v10 = *(void *)(a3 + 24);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(_DWORD *)(v12 + 80);
  uint64_t v14 = v8 + 1 + v13;
  uint64_t v15 = *(void *)(v10 - 8);
  uint64_t v16 = *(_DWORD *)(v15 + 80);
  uint64_t v17 = *(void *)(v15 + 64);
  uint64_t v18 = (*(unsigned char *)(v12 + 80) | *(unsigned char *)(v7 + 80) | *(unsigned char *)(v15 + 80));
  if (v18 <= 7
    && v17 + ((*(void *)(*(void *)(v11 - 8) + 64) + v16 + ((v8 + 1 + v13) & ~v13)) & (unint64_t)~v16) + 1 <= 0x18
    && ((*(_DWORD *)(v12 + 80) | *(_DWORD *)(v7 + 80) | *(_DWORD *)(v15 + 80)) & 0x100000) == 0)
  {
    unsigned int v22 = a2[v8];
    unsigned int v23 = v22 - 2;
    if (v22 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v24 = v8;
      }
      else {
        uint64_t v24 = 4;
      }
      switch(v24)
      {
        case 1:
          int v25 = *a2;
          if (v8 < 4) {
            goto LABEL_19;
          }
          goto LABEL_21;
        case 2:
          int v25 = *(unsigned __int16 *)a2;
          if (v8 >= 4) {
            goto LABEL_21;
          }
          goto LABEL_19;
        case 3:
          int v25 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v8 < 4) {
            goto LABEL_19;
          }
          goto LABEL_21;
        case 4:
          int v25 = *(_DWORD *)a2;
          if (v8 < 4) {
LABEL_19:
          }
            unsigned int v22 = (v25 | (v23 << (8 * v8))) + 2;
          else {
LABEL_21:
          }
            unsigned int v22 = v25 + 2;
          break;
        default:
          break;
      }
    }
    uint64_t v26 = ~v13;
    uint64_t v27 = ~v16;
    uint64_t v37 = *(void *)(*(void *)(v11 - 8) + 64);
    uint64_t v38 = v10;
    if (v22 == 1)
    {
      uint64_t v36 = v11;
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v7 + 16))(a1, a2, v6);
      uint64_t v28 = v36;
      *((unsigned char *)a1 + v8) = 1;
    }
    else if (v22)
    {
      uint64_t v29 = v11;
      memcpy(a1, a2, v9);
      uint64_t v28 = v29;
    }
    else
    {
      uint64_t v35 = v11;
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v7 + 16))(a1, a2, v6);
      uint64_t v28 = v35;
      *((unsigned char *)a1 + v8) = 0;
    }
    unint64_t v30 = (unint64_t)&a2[v14] & v26;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v12 + 16))(((unint64_t)a1 + v14) & v26, v30, v28);
    uint64_t v31 = v37 + v16;
    unint64_t v32 = ((((unint64_t)a1 + v14) & v26) + v37 + v16) & v27;
    unint64_t v33 = (v30 + v31) & v27;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v15 + 16))(v32, v33, v38);
    *(unsigned char *)(v32 + v17) = *(unsigned char *)(v33 + v17);
  }
  else
  {
    uint64_t v21 = *(void *)a2;
    *a1 = *(void *)a2;
    a1 = (void *)(v21 + ((v18 + 16) & ~v18));
    swift_retain();
  }
  return a1;
}

uint64_t destroy for TimeDataFormatting.ComplyingFormatStyleEntries(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(*(void *)(v4 - 8) + 64);
  unsigned int v6 = a1[v5];
  unsigned int v7 = v6 - 2;
  if (v6 >= 2)
  {
    if (v5 <= 3) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = 4;
    }
    switch(v8)
    {
      case 1:
        int v9 = *a1;
        goto LABEL_10;
      case 2:
        int v9 = *(unsigned __int16 *)a1;
        goto LABEL_10;
      case 3:
        int v9 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_10;
      case 4:
        int v9 = *(_DWORD *)a1;
LABEL_10:
        int v10 = (v9 | (v7 << (8 * v5))) + 2;
        unsigned int v6 = v9 + 2;
        if (v5 < 4) {
          unsigned int v6 = v10;
        }
        break;
      default:
        break;
    }
  }
  if (v6 <= 1) {
    (*(void (**)(unsigned __int8 *, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  uint64_t v11 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v12 = v11 + 8;
  unint64_t v13 = (unint64_t)&a1[v5 + 1 + *(unsigned __int8 *)(v11 + 80)] & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  (*(void (**)(unint64_t))(v11 + 8))(v13);
  uint64_t v14 = *(void *)(*(void *)(a2 + 24) - 8);
  uint64_t v15 = *(uint64_t (**)(unint64_t))(v14 + 8);
  unint64_t v16 = (v13 + *(void *)(v12 + 56) + *(unsigned __int8 *)(v14 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);

  return v15(v16);
}

unsigned char *initializeWithCopy for TimeDataFormatting.FallbackRedactionEntries(unsigned char *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  unsigned int v9 = a2[v8];
  unsigned int v10 = v9 - 2;
  if (v9 >= 2)
  {
    if (v8 <= 3) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = 4;
    }
    switch(v11)
    {
      case 1:
        int v12 = *a2;
        goto LABEL_10;
      case 2:
        int v12 = *(unsigned __int16 *)a2;
        goto LABEL_10;
      case 3:
        int v12 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_10;
      case 4:
        int v12 = *(_DWORD *)a2;
LABEL_10:
        int v13 = (v12 | (v10 << (8 * v8))) + 2;
        unsigned int v9 = v12 + 2;
        if (v8 < 4) {
          unsigned int v9 = v13;
        }
        break;
      default:
        break;
    }
  }
  if (v9 == 1)
  {
    (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v7 + 16))(a1, a2, v6);
    a1[v8] = 1;
  }
  else if (v9)
  {
    memcpy(a1, a2, v8 + 1);
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v7 + 16))(a1, a2, v6);
    a1[v8] = 0;
  }
  uint64_t v14 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v15 = v14 + 16;
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = v8 + v16 + 1;
  unint64_t v18 = (unint64_t)&a1[v17] & ~v16;
  unint64_t v19 = (unint64_t)&a2[v17] & ~v16;
  (*(void (**)(unint64_t, unint64_t))(v14 + 16))(v18, v19);
  uint64_t v20 = *(void *)(v15 + 48);
  uint64_t v21 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v22 = v21 + 16;
  uint64_t v23 = *(unsigned __int8 *)(v21 + 80);
  uint64_t v24 = v20 + v23;
  unint64_t v25 = (v24 + v18) & ~v23;
  unint64_t v26 = (v24 + v19) & ~v23;
  (*(void (**)(unint64_t, unint64_t))(v21 + 16))(v25, v26);
  *(unsigned char *)(*(void *)(v22 + 48) + v25) = *(unsigned char *)(*(void *)(v22 + 48) + v26);
  return a1;
}

unsigned __int8 *assignWithCopy for TimeDataFormatting.FallbackRedactionEntries(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = type metadata accessor for Date();
    uint64_t v7 = *(void *)(v6 - 8);
    uint64_t v8 = *(void *)(v7 + 64);
    unsigned int v9 = a1[v8];
    unsigned int v10 = v9 - 2;
    if (v9 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v11 = v8;
      }
      else {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 1:
          int v12 = *a1;
          if (v8 >= 4) {
            goto LABEL_23;
          }
          goto LABEL_12;
        case 2:
          int v12 = *(unsigned __int16 *)a1;
          if (v8 >= 4) {
            goto LABEL_23;
          }
          goto LABEL_12;
        case 3:
          int v12 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v8 < 4) {
            goto LABEL_12;
          }
          goto LABEL_23;
        case 4:
          int v12 = *(_DWORD *)a1;
          if (v8 < 4)
          {
LABEL_12:
            unsigned int v9 = (v12 | (v10 << (8 * v8))) + 2;
            break;
          }
LABEL_23:
          if ((v12 + 2) > 1) {
            goto LABEL_15;
          }
          goto LABEL_14;
        default:
          break;
      }
    }
    if (v9 <= 1) {
LABEL_14:
    }
      (*(void (**)(unsigned __int8 *, uint64_t))(v7 + 8))(a1, v6);
LABEL_15:
    unsigned int v13 = a2[v8];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v15 = v8;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          if (v8 >= 4) {
            goto LABEL_34;
          }
          goto LABEL_28;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          if (v8 >= 4) {
            goto LABEL_34;
          }
          goto LABEL_28;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v8 < 4) {
            goto LABEL_28;
          }
          goto LABEL_34;
        case 4:
          int v16 = *(_DWORD *)a2;
          if (v8 < 4)
          {
LABEL_28:
            unsigned int v13 = (v16 | (v14 << (8 * v8))) + 2;
            break;
          }
LABEL_34:
          unsigned int v13 = v16 + 2;
          if (v13 == 1) {
            goto LABEL_35;
          }
          goto LABEL_30;
        default:
          break;
      }
    }
    if (v13 == 1)
    {
LABEL_35:
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 16))(a1, a2, v6);
      a1[v8] = 1;
    }
    else
    {
LABEL_30:
      if (v13)
      {
        memcpy(a1, a2, v8 + 1);
      }
      else
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 16))(a1, a2, v6);
        a1[v8] = 0;
      }
    }
  }
  uint64_t v17 = type metadata accessor for Date();
  uint64_t v18 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v19 = v18 + 24;
  uint64_t v20 = *(unsigned __int8 *)(v18 + 80);
  uint64_t v21 = *(void *)(*(void *)(v17 - 8) + 64) + v20 + 1;
  unint64_t v22 = (unint64_t)&a1[v21] & ~v20;
  unint64_t v23 = (unint64_t)&a2[v21] & ~v20;
  (*(void (**)(unint64_t, unint64_t))(v18 + 24))(v22, v23);
  uint64_t v24 = *(void *)(v19 + 40);
  uint64_t v25 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v26 = v25 + 24;
  uint64_t v27 = *(unsigned __int8 *)(v25 + 80);
  uint64_t v28 = v24 + v27;
  unint64_t v29 = (v28 + v22) & ~v27;
  unint64_t v30 = (v28 + v23) & ~v27;
  (*(void (**)(unint64_t, unint64_t))(v25 + 24))(v29, v30);
  *(unsigned char *)(*(void *)(v26 + 40) + v29) = *(unsigned char *)(*(void *)(v26 + 40) + v30);
  return a1;
}

unsigned char *initializeWithTake for TimeDataFormatting.FallbackRedactionEntries(unsigned char *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  unsigned int v9 = a2[v8];
  unsigned int v10 = v9 - 2;
  if (v9 >= 2)
  {
    if (v8 <= 3) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = 4;
    }
    switch(v11)
    {
      case 1:
        int v12 = *a2;
        goto LABEL_10;
      case 2:
        int v12 = *(unsigned __int16 *)a2;
        goto LABEL_10;
      case 3:
        int v12 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_10;
      case 4:
        int v12 = *(_DWORD *)a2;
LABEL_10:
        int v13 = (v12 | (v10 << (8 * v8))) + 2;
        unsigned int v9 = v12 + 2;
        if (v8 < 4) {
          unsigned int v9 = v13;
        }
        break;
      default:
        break;
    }
  }
  if (v9 == 1)
  {
    (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v7 + 32))(a1, a2, v6);
    a1[v8] = 1;
  }
  else if (v9)
  {
    memcpy(a1, a2, v8 + 1);
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v7 + 32))(a1, a2, v6);
    a1[v8] = 0;
  }
  uint64_t v14 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v15 = v14 + 32;
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = v8 + v16 + 1;
  unint64_t v18 = (unint64_t)&a1[v17] & ~v16;
  unint64_t v19 = (unint64_t)&a2[v17] & ~v16;
  (*(void (**)(unint64_t, unint64_t))(v14 + 32))(v18, v19);
  uint64_t v20 = *(void *)(v15 + 32);
  uint64_t v21 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v22 = v21 + 32;
  uint64_t v23 = *(unsigned __int8 *)(v21 + 80);
  uint64_t v24 = v20 + v23;
  unint64_t v25 = (v24 + v18) & ~v23;
  unint64_t v26 = (v24 + v19) & ~v23;
  (*(void (**)(unint64_t, unint64_t))(v21 + 32))(v25, v26);
  *(unsigned char *)(*(void *)(v22 + 32) + v25) = *(unsigned char *)(*(void *)(v22 + 32) + v26);
  return a1;
}

unsigned __int8 *assignWithTake for TimeDataFormatting.FallbackRedactionEntries(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = type metadata accessor for Date();
    uint64_t v7 = *(void *)(v6 - 8);
    uint64_t v8 = *(void *)(v7 + 64);
    unsigned int v9 = a1[v8];
    unsigned int v10 = v9 - 2;
    if (v9 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v11 = v8;
      }
      else {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 1:
          int v12 = *a1;
          if (v8 >= 4) {
            goto LABEL_23;
          }
          goto LABEL_12;
        case 2:
          int v12 = *(unsigned __int16 *)a1;
          if (v8 >= 4) {
            goto LABEL_23;
          }
          goto LABEL_12;
        case 3:
          int v12 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v8 < 4) {
            goto LABEL_12;
          }
          goto LABEL_23;
        case 4:
          int v12 = *(_DWORD *)a1;
          if (v8 < 4)
          {
LABEL_12:
            unsigned int v9 = (v12 | (v10 << (8 * v8))) + 2;
            break;
          }
LABEL_23:
          if ((v12 + 2) > 1) {
            goto LABEL_15;
          }
          goto LABEL_14;
        default:
          break;
      }
    }
    if (v9 <= 1) {
LABEL_14:
    }
      (*(void (**)(unsigned __int8 *, uint64_t))(v7 + 8))(a1, v6);
LABEL_15:
    unsigned int v13 = a2[v8];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v15 = v8;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          if (v8 >= 4) {
            goto LABEL_34;
          }
          goto LABEL_28;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          if (v8 >= 4) {
            goto LABEL_34;
          }
          goto LABEL_28;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v8 < 4) {
            goto LABEL_28;
          }
          goto LABEL_34;
        case 4:
          int v16 = *(_DWORD *)a2;
          if (v8 < 4)
          {
LABEL_28:
            unsigned int v13 = (v16 | (v14 << (8 * v8))) + 2;
            break;
          }
LABEL_34:
          unsigned int v13 = v16 + 2;
          if (v13 == 1) {
            goto LABEL_35;
          }
          goto LABEL_30;
        default:
          break;
      }
    }
    if (v13 == 1)
    {
LABEL_35:
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 32))(a1, a2, v6);
      a1[v8] = 1;
    }
    else
    {
LABEL_30:
      if (v13)
      {
        memcpy(a1, a2, v8 + 1);
      }
      else
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 32))(a1, a2, v6);
        a1[v8] = 0;
      }
    }
  }
  uint64_t v17 = type metadata accessor for Date();
  uint64_t v18 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v19 = v18 + 40;
  uint64_t v20 = *(unsigned __int8 *)(v18 + 80);
  uint64_t v21 = *(void *)(*(void *)(v17 - 8) + 64) + v20 + 1;
  unint64_t v22 = (unint64_t)&a1[v21] & ~v20;
  unint64_t v23 = (unint64_t)&a2[v21] & ~v20;
  (*(void (**)(unint64_t, unint64_t))(v18 + 40))(v22, v23);
  uint64_t v24 = *(void *)(v19 + 24);
  uint64_t v25 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v26 = v25 + 40;
  uint64_t v27 = *(unsigned __int8 *)(v25 + 80);
  uint64_t v28 = v24 + v27;
  unint64_t v29 = (v28 + v22) & ~v27;
  unint64_t v30 = (v28 + v23) & ~v27;
  (*(void (**)(unint64_t, unint64_t))(v25 + 40))(v29, v30);
  *(unsigned char *)(*(void *)(v26 + 24) + v29) = *(unsigned char *)(*(void *)(v26 + 24) + v30);
  return a1;
}

uint64_t getEnumTagSinglePayload for TimeDataFormatting.FallbackRedactionEntries(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(type metadata accessor for Date() - 8) + 64);
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  uint64_t v10 = *(void *)(v7 - 8);
  uint64_t v11 = *(unsigned int *)(v10 + 84);
  uint64_t v12 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v13 = *(void *)(v8 + 64);
  uint64_t v14 = *(unsigned __int8 *)(v10 + 80);
  if (v9 <= v11) {
    unsigned int v15 = *(_DWORD *)(v10 + 84);
  }
  else {
    unsigned int v15 = *(_DWORD *)(v8 + 84);
  }
  if (v15 <= 0xFD) {
    unsigned int v16 = 253;
  }
  else {
    unsigned int v16 = v15;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v17 = v6 + v12 + 1;
  if (a2 <= v16) {
    goto LABEL_28;
  }
  uint64_t v18 = *(void *)(*(void *)(v7 - 8) + 64) + ((v13 + v14 + (v17 & ~v12)) & ~v14) + 1;
  char v19 = 8 * v18;
  if (v18 <= 3)
  {
    unsigned int v22 = ((a2 - v16 + ~(-1 << v19)) >> v19) + 1;
    if (HIWORD(v22))
    {
      int v20 = *(_DWORD *)((char *)a1 + v18);
      if (!v20) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v22 > 0xFF)
    {
      int v20 = *(unsigned __int16 *)((char *)a1 + v18);
      if (!*(unsigned __int16 *)((char *)a1 + v18)) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v22 < 2)
    {
LABEL_28:
      if (v15 > 0xFD)
      {
        unint64_t v27 = ((unint64_t)a1 + v17) & ~v12;
        if (v9 == v16)
        {
          uint64_t v28 = *(uint64_t (**)(unint64_t))(v8 + 48);
          return v28(v27);
        }
        else
        {
          unint64_t v29 = (v27 + v13 + v14) & ~v14;
          unint64_t v30 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v10 + 48);
          return v30(v29, v11, v7);
        }
      }
      else
      {
        unsigned int v26 = *((unsigned __int8 *)a1 + v6);
        if (v26 >= 3) {
          return (v26 ^ 0xFF) + 1;
        }
        else {
          return 0;
        }
      }
    }
  }
  int v20 = *((unsigned __int8 *)a1 + v18);
  if (!*((unsigned char *)a1 + v18)) {
    goto LABEL_28;
  }
LABEL_18:
  int v23 = (v20 - 1) << v19;
  if (v18 > 3) {
    int v23 = 0;
  }
  if (v18)
  {
    if (v18 <= 3) {
      int v24 = v18;
    }
    else {
      int v24 = 4;
    }
    switch(v24)
    {
      case 2:
        int v25 = *a1;
        break;
      case 3:
        int v25 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v25 = *(_DWORD *)a1;
        break;
      default:
        int v25 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v25 = 0;
  }
  return v16 + (v25 | v23) + 1;
}

void storeEnumTagSinglePayload for TimeDataFormatting.FallbackRedactionEntries(unsigned char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(*(void *)(type metadata accessor for Date() - 8) + 64);
  uint64_t v9 = *(void *)(a4 + 24);
  uint64_t v10 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v11 = *(_DWORD *)(v10 + 84);
  uint64_t v12 = *(void *)(v9 - 8);
  uint64_t v13 = *(unsigned int *)(v12 + 84);
  uint64_t v14 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v15 = *(void *)(v10 + 64);
  uint64_t v16 = *(unsigned __int8 *)(v12 + 80);
  if (v11 <= v13) {
    unsigned int v17 = *(_DWORD *)(v12 + 84);
  }
  else {
    unsigned int v17 = *(_DWORD *)(v10 + 84);
  }
  if (v17 <= 0xFD) {
    unsigned int v18 = 253;
  }
  else {
    unsigned int v18 = v17;
  }
  unsigned int v19 = v8 + 1;
  uint64_t v20 = v8 + 1 + v14;
  size_t v21 = *(void *)(*(void *)(v9 - 8) + 64) + ((v15 + v16 + (v20 & ~v14)) & ~v16) + 1;
  if (a3 <= v18)
  {
    int v22 = 0;
  }
  else if (v21 <= 3)
  {
    unsigned int v26 = ((a3 - v18 + ~(-1 << (8 * v21))) >> (8 * v21)) + 1;
    if (HIWORD(v26))
    {
      int v22 = 4;
    }
    else if (v26 >= 0x100)
    {
      int v22 = 2;
    }
    else
    {
      int v22 = v26 > 1;
    }
  }
  else
  {
    int v22 = 1;
  }
  if (v18 < a2)
  {
    unsigned int v23 = ~v18 + a2;
    if (v21 < 4)
    {
      int v24 = (v23 >> (8 * v21)) + 1;
      if (*(_DWORD *)(*(void *)(v9 - 8) + 64)
         + ((v15 + v16 + (v20 & ~v14)) & ~v16) != -1)
      {
        int v27 = v23 & ~(-1 << (8 * v21));
        bzero(a1, v21);
        if (v21 == 3)
        {
          *(_WORD *)a1 = v27;
          a1[2] = BYTE2(v27);
        }
        else if (v21 == 2)
        {
          *(_WORD *)a1 = v27;
        }
        else
        {
          *a1 = v27;
        }
      }
    }
    else
    {
      bzero(a1, v21);
      *(_DWORD *)a1 = v23;
      int v24 = 1;
    }
    switch(v22)
    {
      case 1:
        a1[v21] = v24;
        return;
      case 2:
        *(_WORD *)&a1[v21] = v24;
        return;
      case 3:
        goto LABEL_55;
      case 4:
        *(_DWORD *)&a1[v21] = v24;
        return;
      default:
        return;
    }
  }
  uint64_t v25 = ~v14;
  switch(v22)
  {
    case 1:
      a1[v21] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)&a1[v21] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_55:
      __break(1u);
      JUMPOUT(0x245E12D00);
    case 4:
      *(_DWORD *)&a1[v21] = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (a2)
      {
LABEL_27:
        if (v17 > 0xFD)
        {
          unint64_t v28 = (unint64_t)&a1[v20] & v25;
          if (v11 == v18)
          {
            unint64_t v29 = *(void (**)(unint64_t, uint64_t))(v10 + 56);
            v29(v28, a2);
          }
          else
          {
            unint64_t v31 = (v28 + v15 + v16) & ~v16;
            unint64_t v32 = *(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56);
            v32(v31, a2, v13, v9);
          }
        }
        else if (a2 > 0xFD)
        {
          int v30 = a2 - 254;
          if (v19 < 4)
          {
            if (v8 != -1)
            {
              int v33 = v30 & ~(-1 << (8 * v19));
              bzero(a1, v8 + 1);
              if (v19 == 3)
              {
                *(_WORD *)a1 = v33;
                a1[2] = BYTE2(v33);
              }
              else if (v19 == 2)
              {
                *(_WORD *)a1 = v33;
              }
              else
              {
                *a1 = v33;
              }
            }
          }
          else
          {
            bzero(a1, v8 + 1);
            *(_DWORD *)a1 = v30;
          }
        }
        else
        {
          a1[v8] = -(char)a2;
        }
      }
      return;
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for TimeDataFormatting.EntriesState(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    if (swift_getEnumCaseMultiPayload() > 1)
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      uint64_t v7 = type metadata accessor for Date();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t destroy for TimeDataFormatting.EntriesState(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result <= 1)
  {
    uint64_t v3 = type metadata accessor for Date();
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    return v4(a1, v3);
  }
  return result;
}

void *initializeWithCopy for TimeDataFormatting.EntriesState(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() > 1)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = type metadata accessor for Date();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithCopy for TimeDataFormatting.EntriesState(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of TimeDataFormatting.EntriesState((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() > 1)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = type metadata accessor for Date();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t outlined destroy of TimeDataFormatting.EntriesState(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for TimeDataFormatting.EntriesState();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *initializeWithTake for TimeDataFormatting.EntriesState(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() > 1)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = type metadata accessor for Date();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for TimeDataFormatting.EntriesState(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of TimeDataFormatting.EntriesState((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() > 1)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = type metadata accessor for Date();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t type metadata completion function for TimeDataFormatting.EntriesState()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t (*implicit closure #1 in TimeDataFormatting.ComplyingFormatStyleEntries.next()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(uint64_t a1)
{
  v18[0] = a2;
  v18[1] = a3;
  void v18[2] = a4;
  void v18[3] = a5;
  uint64_t v10 = type metadata accessor for TimeDataFormatting.ComplyingFormatStyleEntries();
  uint64_t v11 = *(void *)(v10 - 8);
  double v12 = MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)v18 - v13;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))((char *)v18 - v13, a1, v10, v12);
  unint64_t v15 = (*(unsigned __int8 *)(v11 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v16 = (char *)swift_allocObject();
  *((void *)v16 + 2) = a2;
  *((void *)v16 + 3) = a3;
  *((void *)v16 + 4) = a4;
  *((void *)v16 + 5) = a5;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v16[v15], v14, v10);
  return partial apply for implicit closure #2 in implicit closure #1 in TimeDataFormatting.ComplyingFormatStyleEntries.next();
}

uint64_t TimeDataFormatting.ComplyingFormatStyleEntries.nextEntry(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v24 = a1;
  uint64_t v25 = a3;
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  _ss11AnySequenceVy10Foundation4DateVGMaTm_0(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v18 = MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v24 - v19;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v13, v3 + *(int *)(a2 + 52), v9, v18);
  uint64_t v21 = *(void *)(a2 + 24);
  uint64_t v27 = v9;
  uint64_t v28 = v21;
  long long v29 = *(_OWORD *)(a2 + 32);
  uint64_t v30 = v3;
  TimeDataSourceStorage.withValue(for:call:)(v24, (void (*)(char *))partial apply for closure #1 in TimeDataFormatting.ComplyingFormatStyleEntries.nextEntry(for:), (uint64_t)v26, v9, v29, (uint64_t)v20);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  outlined init with copy of Date?((uint64_t)v20, (uint64_t)v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v16, 1, v5) == 1)
  {
    outlined destroy of Date?((uint64_t)v16);
    return outlined init with take of Date?((uint64_t)v20, v25);
  }
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v16, v5);
  lazy protocol witness table accessor for type Date and conformance Date();
  if (dispatch thunk of static Comparable.< infix(_:_:)())
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    return outlined init with take of Date?((uint64_t)v20, v25);
  }
  Date.timeIntervalSinceReferenceDate.getter();
  uint64_t v23 = v25;
  Date.init(timeIntervalSinceReferenceDate:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  outlined destroy of Date?((uint64_t)v20);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(v23, 0, 1, v5);
}

uint64_t TimeDataFormatting.EntriesState.next(_:)@<X0>(void (*a1)(char *)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v27 = a1;
  _ss11AnySequenceVy10Foundation4DateVGMaTm_0(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v26 - v5;
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v26 - v12;
  uint64_t v14 = type metadata accessor for TimeDataFormatting.EntriesState();
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TimeDataFormatting.EntriesState(v2, (uint64_t)v16);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    outlined destroy of TimeDataFormatting.EntriesState(v2);
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(a2, v16, v7);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v2, a2, v7);
    swift_storeEnumTagMultiPayload();
LABEL_11:
    uint64_t v20 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(a2, v20, 1, v7);
  }
  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v20 = 1;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(a2, v20, 1, v7);
  }
  uint64_t v26 = a2;
  outlined destroy of TimeDataFormatting.EntriesState(v2);
  double v18 = v16;
  uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v19(v13, v18, v7);
  v27(v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
  {
    v19(v10, v6, v7);
    uint64_t v21 = *(void (**)(uint64_t, char *, uint64_t))(v8 + 16);
    v21(v2, v10, v7);
    swift_storeEnumTagMultiPayload();
    Date.timeIntervalSince(_:)();
    if (v22 <= 0.0333333333)
    {
      uint64_t v23 = v26;
      v21(v26, v10, v7);
      a2 = v23;
    }
    else
    {
      a2 = v26;
      static Date.+ infix(_:_:)();
    }
    uint64_t v24 = *(void (**)(char *, uint64_t))(v8 + 8);
    v24(v10, v7);
    v24(v13, v7);
    goto LABEL_11;
  }
  (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
  outlined destroy of Date?((uint64_t)v6);
  swift_storeEnumTagMultiPayload();
  uint64_t v20 = 1;
  a2 = v26;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(a2, v20, 1, v7);
}