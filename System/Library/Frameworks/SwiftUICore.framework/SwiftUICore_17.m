uint64_t assignWithCopy for TimeDataSource<A>.DateRangeStorage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if (a1 != a2)
  {
    outlined destroy of (pauseDate: Date)(a1, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage);
    swift_getEnumCaseMultiPayload();
    v4 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t outlined destroy of (pauseDate: Date)(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void))
{
  _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t initializeWithTake for TimeDataSource<A>.DateRangeStorage(uint64_t a1, uint64_t a2)
{
  swift_getEnumCaseMultiPayload();
  uint64_t v4 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for TimeDataSource<A>.DateRangeStorage(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of (pauseDate: Date)(a1, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage);
    swift_getEnumCaseMultiPayload();
    uint64_t v4 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

ValueMetadata *type metadata accessor for SystemFormatStyle()
{
  return &type metadata for SystemFormatStyle;
}

uint64_t type metadata completion function for TimeDataFormattingStorage()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_initClassMetadata2();
      if (!result) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t type metadata accessor for TimeDataFormattingStorage()
{
  return swift_getGenericMetadata();
}

uint64_t dispatch thunk of AttributedStringConvertible.attributedString.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

unsigned char *storeEnumTagSinglePayload for TimeDataSource<A>.DateRangeStorage.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245FC4E18);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for TimeDataSource<A>.DateRangeStorage.DateRangeStartingAtCodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x245FC4EDCLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t base witness table accessor for Equatable in TimeDataSource<A><A>.DateStorage.IdentityWithPauseCodingKeys()
{
  return lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Date><A>.DateStorage.IdentityWithPauseCodingKeys and conformance TimeDataSource<A><A>.DateStorage.IdentityWithPauseCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.IdentityWithPauseCodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage.IdentityWithPauseCodingKeys);
}

uint64_t base witness table accessor for Equatable in TimeDataSource<A><A>.DateStorage.CodingKeys()
{
  return lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Date><A>.DateStorage.CodingKeys and conformance TimeDataSource<A><A>.DateStorage.CodingKeys, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.CodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage.CodingKeys);
}

uint64_t base witness table accessor for Equatable in TimeDataSource<A><A>.DurationStorage.DurationOffsetCodingKeys()
{
  return lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Duration><A>.DurationStorage.DurationOffsetCodingKeys and conformance TimeDataSource<A><A>.DurationStorage.DurationOffsetCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage.DurationOffsetCodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DurationStorage.DurationOffsetCodingKeys);
}

uint64_t base witness table accessor for Equatable in TimeDataSource<A><A>.DurationStorage.CodingKeys()
{
  return lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Duration><A>.DurationStorage.CodingKeys and conformance TimeDataSource<A><A>.DurationStorage.CodingKeys, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage.CodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DurationStorage.CodingKeys);
}

uint64_t base witness table accessor for Equatable in TimeDataSource<A><A>.DateRangeStorage.DateRangeEndingAtCodingKeys()
{
  return lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeEndingAtCodingKeys and conformance TimeDataSource<A><A>.DateRangeStorage.DateRangeEndingAtCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeEndingAtCodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage.DateRangeEndingAtCodingKeys);
}

uint64_t base witness table accessor for Equatable in TimeDataSource<A><A>.DateRangeStorage.DateRangeStartingAtCodingKeys()
{
  return lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeStartingAtCodingKeys and conformance TimeDataSource<A><A>.DateRangeStorage.DateRangeStartingAtCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeStartingAtCodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage.DateRangeStartingAtCodingKeys);
}

uint64_t base witness table accessor for Equatable in TimeDataSource<A><A>.DateRangeStorage.CodingKeys()
{
  return lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Range<Date>><A>.DateRangeStorage.CodingKeys and conformance TimeDataSource<A><A>.DateRangeStorage.CodingKeys, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.CodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage.CodingKeys);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in TimeDataSource<A><A>.DateRangeStorage.CodingKeys()
{
  return lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Range<Date>><A>.DateRangeStorage.CodingKeys and conformance TimeDataSource<A><A>.DateRangeStorage.CodingKeys, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.CodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage.CodingKeys);
}

uint64_t base witness table accessor for CustomStringConvertible in TimeDataSource<A><A>.DateRangeStorage.CodingKeys()
{
  return lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Range<Date>><A>.DateRangeStorage.CodingKeys and conformance TimeDataSource<A><A>.DateRangeStorage.CodingKeys, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.CodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage.CodingKeys);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in TimeDataSource<A><A>.DateRangeStorage.DateRangeStartingAtCodingKeys()
{
  return lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeStartingAtCodingKeys and conformance TimeDataSource<A><A>.DateRangeStorage.DateRangeStartingAtCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeStartingAtCodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage.DateRangeStartingAtCodingKeys);
}

uint64_t base witness table accessor for CustomStringConvertible in TimeDataSource<A><A>.DateRangeStorage.DateRangeStartingAtCodingKeys()
{
  return lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeStartingAtCodingKeys and conformance TimeDataSource<A><A>.DateRangeStorage.DateRangeStartingAtCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeStartingAtCodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage.DateRangeStartingAtCodingKeys);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in TimeDataSource<A><A>.DateRangeStorage.DateRangeEndingAtCodingKeys()
{
  return lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeEndingAtCodingKeys and conformance TimeDataSource<A><A>.DateRangeStorage.DateRangeEndingAtCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeEndingAtCodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage.DateRangeEndingAtCodingKeys);
}

uint64_t base witness table accessor for CustomStringConvertible in TimeDataSource<A><A>.DateRangeStorage.DateRangeEndingAtCodingKeys()
{
  return lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeEndingAtCodingKeys and conformance TimeDataSource<A><A>.DateRangeStorage.DateRangeEndingAtCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Range<Date>><A>.DateRangeStorage.DateRangeEndingAtCodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateRangeStorage.DateRangeEndingAtCodingKeys);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in TimeDataSource<A><A>.DurationStorage.CodingKeys()
{
  return lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Duration><A>.DurationStorage.CodingKeys and conformance TimeDataSource<A><A>.DurationStorage.CodingKeys, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage.CodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DurationStorage.CodingKeys);
}

uint64_t base witness table accessor for CustomStringConvertible in TimeDataSource<A><A>.DurationStorage.CodingKeys()
{
  return lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Duration><A>.DurationStorage.CodingKeys and conformance TimeDataSource<A><A>.DurationStorage.CodingKeys, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage.CodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DurationStorage.CodingKeys);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in TimeDataSource<A><A>.DurationStorage.DurationOffsetCodingKeys()
{
  return lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Duration><A>.DurationStorage.DurationOffsetCodingKeys and conformance TimeDataSource<A><A>.DurationStorage.DurationOffsetCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage.DurationOffsetCodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DurationStorage.DurationOffsetCodingKeys);
}

uint64_t base witness table accessor for CustomStringConvertible in TimeDataSource<A><A>.DurationStorage.DurationOffsetCodingKeys()
{
  return lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Duration><A>.DurationStorage.DurationOffsetCodingKeys and conformance TimeDataSource<A><A>.DurationStorage.DurationOffsetCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Duration><A>.DurationStorage.DurationOffsetCodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DurationStorage.DurationOffsetCodingKeys);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in TimeDataSource<A><A>.DateStorage.CodingKeys()
{
  return lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Date><A>.DateStorage.CodingKeys and conformance TimeDataSource<A><A>.DateStorage.CodingKeys, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.CodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage.CodingKeys);
}

uint64_t base witness table accessor for CustomStringConvertible in TimeDataSource<A><A>.DateStorage.CodingKeys()
{
  return lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Date><A>.DateStorage.CodingKeys and conformance TimeDataSource<A><A>.DateStorage.CodingKeys, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.CodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage.CodingKeys);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in TimeDataSource<A><A>.DateStorage.IdentityCodingKeys()
{
  return lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Date><A>.DateStorage.IdentityCodingKeys and conformance TimeDataSource<A><A>.DateStorage.IdentityCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.IdentityCodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage.IdentityCodingKeys);
}

uint64_t base witness table accessor for CustomStringConvertible in TimeDataSource<A><A>.DateStorage.IdentityCodingKeys()
{
  return lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Date><A>.DateStorage.IdentityCodingKeys and conformance TimeDataSource<A><A>.DateStorage.IdentityCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.IdentityCodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage.IdentityCodingKeys);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in TimeDataSource<A><A>.DateStorage.IdentityWithPauseCodingKeys()
{
  return lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Date><A>.DateStorage.IdentityWithPauseCodingKeys and conformance TimeDataSource<A><A>.DateStorage.IdentityWithPauseCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.IdentityWithPauseCodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage.IdentityWithPauseCodingKeys);
}

uint64_t base witness table accessor for CustomStringConvertible in TimeDataSource<A><A>.DateStorage.IdentityWithPauseCodingKeys()
{
  return lazy protocol witness table accessor for type TimeDataSource<Date><A>.DateStorage and conformance TimeDataSource<A><A>.DateStorage(&lazy protocol witness table cache variable for type TimeDataSource<Date><A>.DateStorage.IdentityWithPauseCodingKeys and conformance TimeDataSource<A><A>.DateStorage.IdentityWithPauseCodingKeys, &lazy cache variable for type metadata for TimeDataSource<Date><A>.DateStorage.IdentityWithPauseCodingKeys, (uint64_t (*)(void))type metadata accessor for TimeDataSource<A>.DateStorage.IdentityWithPauseCodingKeys);
}

void type metadata accessor for (TimeDataSource<Duration><A>.DurationStorage, TimeDataSource<Duration><A>.DurationStorage)(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(void))
{
  if (!*a2)
  {
    _s7SwiftUI14TimeDataSourceVAA10Foundation4DateVRszlE0G7StorageOyAF_GMaTm_0(255, a3, a4);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v6) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

uint64_t outlined destroy of (TimeDataSource<Date><A>.DateStorage, TimeDataSource<Date><A>.DateStorage)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = a5(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t static HermiteCurve.linear(start:end:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v22 = a3;
  uint64_t v23 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  v12 = (char *)&v22 - v11;
  MEMORY[0x270FA5388](v13);
  v15 = (char *)&v22 - v14;
  double v17 = MEMORY[0x270FA5388](v16);
  v19 = (char *)&v22 - v18;
  v20 = *(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16);
  v20((char *)&v22 - v18, a1, AssociatedTypeWitness, v17);
  ((void (*)(char *, uint64_t, uint64_t))v20)(v15, a2, AssociatedTypeWitness);
  swift_getAssociatedConformanceWitness();
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  return HermiteCurve.init(start:end:startTangent:endTangent:)((uint64_t)v19, (uint64_t)v15, (uint64_t)v12, (uint64_t)v9, v23);
}

uint64_t static HermiteCurve.hermite(start:end:startTangent:endTangent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v23 = a3;
  uint64_t v24 = a4;
  uint64_t v22 = a2;
  uint64_t v25 = a5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  v12 = (char *)&v22 - v11;
  MEMORY[0x270FA5388](v13);
  v15 = (char *)&v22 - v14;
  double v17 = MEMORY[0x270FA5388](v16);
  v19 = (char *)&v22 - v18;
  v20 = *(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16);
  v20((char *)&v22 - v18, a1, AssociatedTypeWitness, v17);
  ((void (*)(char *, uint64_t, uint64_t))v20)(v15, v22, AssociatedTypeWitness);
  ((void (*)(char *, uint64_t, uint64_t))v20)(v12, v23, AssociatedTypeWitness);
  ((void (*)(char *, uint64_t, uint64_t))v20)(v9, v24, AssociatedTypeWitness);
  return HermiteCurve.init(start:end:startTangent:endTangent:)((uint64_t)v19, (uint64_t)v15, (uint64_t)v12, (uint64_t)v9, v25);
}

uint64_t HermiteCurve.init(start:end:startTangent:endTangent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t, uint64_t))v14)((void *)(AssociatedTypeWitness - 8), a5, a1, AssociatedTypeWitness);
  uint64_t v11 = (int *)type metadata accessor for HermiteCurve();
  v14(a5 + v11[9], a2, AssociatedTypeWitness);
  v14(a5 + v11[10], a3, AssociatedTypeWitness);
  uint64_t v12 = a5 + v11[11];

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v14)(v12, a4, AssociatedTypeWitness);
}

uint64_t HermiteCurve.value(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v4 = v3;
  uint64_t v48 = a2;
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v45 = *(void *)(a1 + 16);
  uint64_t v46 = v7;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v44 = (uint64_t)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v41 - v12;
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v41 - v15;
  MEMORY[0x270FA5388](v17);
  v47 = (char *)&v41 - v18;
  MEMORY[0x270FA5388](v19);
  v49 = (char *)&v41 - v20;
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v41 - v22;
  MEMORY[0x270FA5388](v24);
  v26 = (char *)&v41 - v25;
  v42 = (char *)&v41 - v25;
  double v28 = MEMORY[0x270FA5388](v27);
  v50 = (char *)&v41 - v29;
  double v30 = a3 * a3 * a3;
  v31 = *(void (**)(double))(v9 + 16);
  v31(v28);
  ((void (*)(char *, uint64_t, uint64_t))v31)(v26, v4 + *(int *)(a1 + 40), AssociatedTypeWitness);
  uint64_t v32 = v4 + *(int *)(a1 + 36);
  v43 = v23;
  ((void (*)(char *, uint64_t, uint64_t))v31)(v23, v32, AssociatedTypeWitness);
  ((void (*)(char *, uint64_t, uint64_t))v31)(v49, v4 + *(int *)(a1 + 44), AssociatedTypeWitness);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  VectorArithmetic.scaled(by:)(AssociatedTypeWitness, AssociatedConformanceWitness, (uint64_t)v13, v30 + v30 - a3 * a3 * 3.0 + 1.0);
  uint64_t v34 = v44;
  VectorArithmetic.scaled(by:)(AssociatedTypeWitness, AssociatedConformanceWitness, v44, a3 * a3 * 3.0 - (v30 + v30));
  dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)();
  v35 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v35(v34, AssociatedTypeWitness);
  v35((uint64_t)v13, AssociatedTypeWitness);
  v36 = v42;
  VectorArithmetic.scaled(by:)(AssociatedTypeWitness, AssociatedConformanceWitness, (uint64_t)v13, v30 - (a3 * a3 + a3 * a3) + a3);
  v37 = v47;
  dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)();
  v35((uint64_t)v13, AssociatedTypeWitness);
  v35((uint64_t)v16, AssociatedTypeWitness);
  uint64_t v38 = AssociatedConformanceWitness;
  v39 = v49;
  VectorArithmetic.scaled(by:)(AssociatedTypeWitness, v38, (uint64_t)v16, v30 - a3 * a3);
  dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)();
  v35((uint64_t)v16, AssociatedTypeWitness);
  v35((uint64_t)v37, AssociatedTypeWitness);
  v35((uint64_t)v39, AssociatedTypeWitness);
  v35((uint64_t)v43, AssociatedTypeWitness);
  v35((uint64_t)v36, AssociatedTypeWitness);
  return ((uint64_t (*)(char *, uint64_t))v35)(v50, AssociatedTypeWitness);
}

uint64_t HermiteCurve.velocity(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v4 = v3;
  uint64_t v54 = a2;
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v51 = *(void *)(a1 + 16);
  uint64_t v52 = v7;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v50 = (uint64_t)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v46 - v12;
  MEMORY[0x270FA5388](v14);
  v49 = (char *)&v46 - v15;
  MEMORY[0x270FA5388](v16);
  v53 = (char *)&v46 - v17;
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v46 - v19;
  uint64_t v48 = (char *)&v46 - v19;
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v46 - v22;
  MEMORY[0x270FA5388](v24);
  v26 = (char *)&v46 - v25;
  v47 = (char *)&v46 - v25;
  double v28 = MEMORY[0x270FA5388](v27);
  v55 = (char *)&v46 - v29;
  double v30 = *(void (**)(double))(v9 + 16);
  v30(v28);
  ((void (*)(char *, uint64_t, uint64_t))v30)(v26, v4 + *(int *)(a1 + 40), AssociatedTypeWitness);
  uint64_t v31 = v4 + *(int *)(a1 + 36);
  uint64_t v46 = v23;
  ((void (*)(char *, uint64_t, uint64_t))v30)(v23, v31, AssociatedTypeWitness);
  ((void (*)(char *, uint64_t, uint64_t))v30)(v20, v4 + *(int *)(a1 + 44), AssociatedTypeWitness);
  double v32 = a3 * a3 * 6.0 - a3 * 6.0;
  double v33 = a3 * 6.0 - a3 * a3 * 6.0;
  double v34 = a3 * a3 * 3.0;
  double v35 = v34 + a3 * -4.0 + 1.0;
  double v36 = v34 - (a3 + a3);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  VectorArithmetic.scaled(by:)(AssociatedTypeWitness, AssociatedConformanceWitness, (uint64_t)v13, v32);
  uint64_t v38 = v50;
  VectorArithmetic.scaled(by:)(AssociatedTypeWitness, AssociatedConformanceWitness, v50, v33);
  uint64_t v39 = (uint64_t)v49;
  dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)();
  v40 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v40(v38, AssociatedTypeWitness);
  v40((uint64_t)v13, AssociatedTypeWitness);
  uint64_t v41 = v47;
  VectorArithmetic.scaled(by:)(AssociatedTypeWitness, AssociatedConformanceWitness, (uint64_t)v13, v35);
  v42 = v53;
  dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)();
  v40((uint64_t)v13, AssociatedTypeWitness);
  v40(v39, AssociatedTypeWitness);
  uint64_t v43 = AssociatedConformanceWitness;
  uint64_t v44 = v48;
  VectorArithmetic.scaled(by:)(AssociatedTypeWitness, v43, v39, v36);
  dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)();
  v40(v39, AssociatedTypeWitness);
  v40((uint64_t)v42, AssociatedTypeWitness);
  v40((uint64_t)v44, AssociatedTypeWitness);
  v40((uint64_t)v46, AssociatedTypeWitness);
  v40((uint64_t)v41, AssociatedTypeWitness);
  return ((uint64_t (*)(char *, uint64_t))v40)(v55, AssociatedTypeWitness);
}

uint64_t HermiteCurve.value(atArcLength:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, Swift::Double a3@<D0>)
{
  double v5 = HermiteCurve.parametricTime(forArcLength:)(a3);

  return HermiteCurve.value(at:)(a1, a2, v5);
}

Swift::Double __swiftcall HermiteCurve.parametricTime(forArcLength:)(Swift::Double forArcLength)
{
  uint64_t v2 = v1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v7 = (char *)&v18 - v6;
  double v8 = HermiteCurve.arcLength(at:)(1.0);
  if (v8 <= 0.0) {
    return 0.0;
  }
  double v9 = forArcLength / v8;
  double v10 = HermiteCurve.arcLength(at:)(forArcLength / v8);
  if (vabdd_f64(v10, forArcLength) >= 0.1)
  {
    double v11 = v10 - forArcLength;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v13 = *(double (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 24);
    uint64_t v14 = (void (**)(char *, uint64_t))(v5 + 8);
    uint64_t v15 = 10;
    do
    {
      HermiteCurve.velocity(at:)(v2, (uint64_t)v7, v9);
      double v9 = v9 - v11 / sqrt(v13(AssociatedTypeWitness, AssociatedConformanceWitness));
      if ((~*(void *)&v9 & 0x7FF0000000000000) != 0)
      {
        (*v14)(v7, AssociatedTypeWitness);
        if (!--v15) {
          return v9;
        }
      }
      else
      {
        (*v14)(v7, AssociatedTypeWitness);
        if ((*(void *)&v9 & 0xFFFFFFFFFFFFFLL) != 0) {
          return 0.0;
        }
        if (!--v15) {
          return v9;
        }
      }
      double v16 = HermiteCurve.arcLength(at:)(v9);
      double v11 = v16 - forArcLength;
    }
    while (vabdd_f64(v16, forArcLength) >= 0.1);
  }
  return v9;
}

uint64_t HermiteCurve.velocity(atArcLength:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, Swift::Double a3@<D0>)
{
  double v5 = HermiteCurve.parametricTime(forArcLength:)(a3);

  return HermiteCurve.velocity(at:)(a1, a2, v5);
}

double HermiteCurve.arcLength.getter()
{
  return HermiteCurve.arcLength(at:)(1.0);
}

Swift::Double __swiftcall HermiteCurve.arcLength(at:)(Swift::Double at)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v31 = v1;
  uint64_t v5 = v3;
  uint64_t v6 = v4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v33 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  double v32 = (char *)&v31 - v8;
  type metadata accessor for Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>();
  uint64_t v35 = v9;
  MEMORY[0x270FA5388](v9);
  double v11 = (double *)((char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v31 - v13;
  uint64_t v15 = type metadata accessor for Quadrature.Integrator();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (uint64_t *)((char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = type metadata accessor for Quadrature();
  uint64_t v20 = *(void *)(v19 - 8);
  v22.n128_f64[0] = MEMORY[0x270FA5388](v19);
  uint64_t v24 = (char *)&v31 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (at < 0.0)
  {
    if (at <= 0.0) {
      goto LABEL_5;
    }
    __break(1u);
  }
  if (at < 0.0)
  {
    __break(1u);
    return v22.n128_f64[0];
  }
LABEL_5:
  uint64_t v34 = v21;
  *uint64_t v18 = 8;
  (*(void (**)(void *, void, uint64_t, __n128))(v16 + 104))(v18, *MEMORY[0x263F8C9A8], v15, v22);
  uint64_t v25 = Quadrature.init(integrator:absoluteTolerance:relativeTolerance:)();
  MEMORY[0x270FA5388](v25);
  *(&v31 - 4) = v6;
  *(&v31 - 3) = v5;
  *(&v31 - 2) = v36;
  Quadrature.integrate(over:integrand:)();
  outlined init with copy of Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>((uint64_t)v14, (uint64_t)v11);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v27 = v32;
    dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
    double v28 = (*(double (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 24))(AssociatedTypeWitness, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v27, AssociatedTypeWitness);
    double v29 = sqrt(v28);
    outlined destroy of Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>((uint64_t)v14);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v24, v34);
    outlined destroy of Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>((uint64_t)v11);
  }
  else
  {
    outlined destroy of Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>((uint64_t)v14);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v24, v34);
    if (at < 0.0) {
      double v29 = -*v11;
    }
    else {
      double v29 = *v11;
    }
  }
  v22.n128_f64[0] = v29;
  return v22.n128_f64[0];
}

double closure #1 in HermiteCurve.arcLength(at:)(double a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v5 = (char *)&v10 - v4;
  uint64_t v6 = type metadata accessor for HermiteCurve();
  HermiteCurve.velocity(at:)(v6, (uint64_t)v5, a1);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  double v8 = (*(double (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 24))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, AssociatedTypeWitness);
  return sqrt(v8);
}

double partial apply for closure #1 in HermiteCurve.arcLength(at:)(double a1)
{
  return closure #1 in HermiteCurve.arcLength(at:)(a1);
}

uint64_t outlined init with copy of Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>(uint64_t a1)
{
  type metadata accessor for Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for HermiteCurve()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for HermiteCurve()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for HermiteCurve(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = ~v7;
  uint64_t v9 = v6 + v7;
  unint64_t v10 = ((v6 + v7 + ((v6 + v7 + ((v6 + v7) & ~v7)) & ~v7)) & ~v7) + v6;
  if (v7 > 7 || (*(_DWORD *)(v5 + 80) & 0x100000) != 0 || v10 > 0x18)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v7 + 16) & v8));
    swift_retain();
  }
  else
  {
    uint64_t v14 = AssociatedTypeWitness;
    uint64_t v15 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16);
    v15(a1, a2, AssociatedTypeWitness);
    unint64_t v16 = ((unint64_t)a2 + v9) & v8;
    v15((uint64_t *)(((unint64_t)a1 + v9) & v8), (uint64_t *)v16, v14);
    unint64_t v17 = (v9 + v16) & v8;
    v15((uint64_t *)((v9 + (((unint64_t)a1 + v9) & v8)) & v8), (uint64_t *)v17, v14);
    v15((uint64_t *)((v9 + ((v9 + (((unint64_t)a1 + v9) & v8)) & v8)) & v8), (uint64_t *)((v9 + v17) & v8), v14);
  }
  return a1;
}

uint64_t destroy for HermiteCurve(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  uint64_t v10 = v3 + 8;
  v9(a1, AssociatedTypeWitness);
  uint64_t v4 = *(unsigned __int8 *)(v10 + 72);
  uint64_t v5 = *(void *)(v10 + 56) + v4;
  uint64_t v6 = (v5 + a1) & ~v4;
  v9(v6, AssociatedTypeWitness);
  uint64_t v7 = (v5 + v6) & ~v4;
  v9(v7, AssociatedTypeWitness);

  return ((uint64_t (*)(uint64_t, uint64_t))v9)((v5 + v7) & ~v4, AssociatedTypeWitness);
}

uint64_t initializeWithCopy for HermiteCurve(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  uint64_t v7 = v5 + 16;
  v6(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 64);
  uint64_t v9 = *(void *)(v7 + 48) + v8;
  uint64_t v10 = (v9 + a2) & ~v8;
  v6((v9 + a1) & ~v8, v10, AssociatedTypeWitness);
  uint64_t v11 = (v9 + v10) & ~v8;
  v6((v9 + ((v9 + a1) & ~v8)) & ~v8, v11, AssociatedTypeWitness);
  v6((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8, (v9 + v11) & ~v8, AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithCopy for HermiteCurve(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24);
  uint64_t v7 = v5 + 24;
  v6(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 56);
  uint64_t v9 = *(void *)(v7 + 40) + v8;
  uint64_t v10 = (v9 + a2) & ~v8;
  v6((v9 + a1) & ~v8, v10, AssociatedTypeWitness);
  uint64_t v11 = (v9 + v10) & ~v8;
  v6((v9 + ((v9 + a1) & ~v8)) & ~v8, v11, AssociatedTypeWitness);
  v6((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8, (v9 + v11) & ~v8, AssociatedTypeWitness);
  return a1;
}

uint64_t initializeWithTake for HermiteCurve(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  uint64_t v7 = v5 + 32;
  v6(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 48);
  uint64_t v9 = *(void *)(v7 + 32) + v8;
  uint64_t v10 = (v9 + a2) & ~v8;
  v6((v9 + a1) & ~v8, v10, AssociatedTypeWitness);
  uint64_t v11 = (v9 + v10) & ~v8;
  v6((v9 + ((v9 + a1) & ~v8)) & ~v8, v11, AssociatedTypeWitness);
  v6((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8, (v9 + v11) & ~v8, AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithTake for HermiteCurve(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40);
  uint64_t v7 = v5 + 40;
  v6(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 40);
  uint64_t v9 = *(void *)(v7 + 24) + v8;
  uint64_t v10 = (v9 + a2) & ~v8;
  v6((v9 + a1) & ~v8, v10, AssociatedTypeWitness);
  uint64_t v11 = (v9 + v10) & ~v8;
  v6((v9 + ((v9 + a1) & ~v8)) & ~v8, v11, AssociatedTypeWitness);
  v6((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8, (v9 + v11) & ~v8, AssociatedTypeWitness);
  return a1;
}

uint64_t getEnumTagSinglePayload for HermiteCurve(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  if (!a2) {
    return 0;
  }
  if (a2 <= v6) {
    goto LABEL_19;
  }
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = ((*(void *)(*(void *)(AssociatedTypeWitness - 8) + 64)
       + v7
       + ((*(void *)(*(void *)(AssociatedTypeWitness - 8) + 64)
         + v7
         + ((*(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) + v7) & ~v7)) & ~v7)) & ~v7)
     + *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  char v9 = 8 * v8;
  if (v8 <= 3)
  {
    unsigned int v11 = ((a2 - v6 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v8);
      if (!v10) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      int v10 = *(unsigned __int16 *)((char *)a1 + v8);
      if (!*(unsigned __int16 *)((char *)a1 + v8)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_19:
      if (v6)
      {
        uint64_t v13 = *(uint64_t (**)(unsigned __int16 *))(v5 + 48);
        return v13(a1);
      }
      return 0;
    }
  }
  int v10 = *((unsigned __int8 *)a1 + v8);
  if (!*((unsigned char *)a1 + v8)) {
    goto LABEL_19;
  }
LABEL_11:
  int v12 = (v10 - 1) << v9;
  if (v8 > 3) {
    int v12 = 0;
  }
  if (v8)
  {
    if (v8 > 3) {
      LODWORD(v8) = 4;
    }
    switch((int)v8)
    {
      case 2:
        LODWORD(v8) = *a1;
        break;
      case 3:
        LODWORD(v8) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v8) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v8) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v6 + (v8 | v12) + 1;
}

void storeEnumTagSinglePayload for HermiteCurve(unsigned char *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  size_t v9 = ((*(void *)(v6 + 64) + v8 + ((*(void *)(v6 + 64) + v8 + ((*(void *)(v6 + 64) + v8) & ~v8)) & ~v8)) & ~v8)
     + *(void *)(v6 + 64);
  if (a3 <= v7)
  {
    int v10 = 0;
  }
  else if (v9 <= 3)
  {
    unsigned int v13 = ((a3 - v7 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
    if (HIWORD(v13))
    {
      int v10 = 4;
    }
    else if (v13 >= 0x100)
    {
      int v10 = 2;
    }
    else
    {
      int v10 = v13 > 1;
    }
  }
  else
  {
    int v10 = 1;
  }
  if (v7 < a2)
  {
    unsigned int v11 = ~v7 + a2;
    if (v9 < 4)
    {
      int v12 = (v11 >> (8 * v9)) + 1;
      if (v9)
      {
        int v14 = v11 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if (v9 == 3)
        {
          *(_WORD *)a1 = v14;
          a1[2] = BYTE2(v14);
        }
        else if (v9 == 2)
        {
          *(_WORD *)a1 = v14;
        }
        else
        {
          *a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v11;
      int v12 = 1;
    }
    switch(v10)
    {
      case 1:
        a1[v9] = v12;
        return;
      case 2:
        *(_WORD *)&a1[v9] = v12;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v9] = v12;
        return;
      default:
        return;
    }
  }
  switch(v10)
  {
    case 1:
      a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x245FC7950);
    case 4:
      *(_DWORD *)&a1[v9] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v15 = *(void (**)(unsigned char *, uint64_t))(v6 + 56);
        v15(a1, a2);
      }
      return;
  }
}

uint64_t static HermiteCurve.== infix(_:_:)()
{
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0
    && (type metadata accessor for HermiteCurve(), (dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
    && (dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
  {
    return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
  }
  else
  {
    return 0;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance HermiteCurve<A>()
{
  return static HermiteCurve.== infix(_:_:)();
}

double ContainerRelativeShape.path(in:)@<D0>(uint64_t a1@<X8>, __n128 a2@<Q0>, __n128 a3@<Q1>, __n128 a4@<Q2>, __n128 a5@<Q3>)
{
  specialized ContainerRelativeShape.path(in:)((uint64_t)v8, a2, a3, a4, a5);
  double result = *(double *)v8;
  long long v7 = v8[1];
  *(_OWORD *)a1 = v8[0];
  *(_OWORD *)(a1 + 16) = v7;
  *(unsigned char *)(a1 + 32) = v9;
  return result;
}

double protocol witness for Shape.path(in:) in conformance ContainerRelativeShape@<D0>(uint64_t a1@<X8>, __n128 a2@<Q0>, __n128 a3@<Q1>, __n128 a4@<Q2>, __n128 a5@<Q3>)
{
  specialized ContainerRelativeShape.path(in:)((uint64_t)v8, a2, a3, a4, a5);
  double result = *(double *)v8;
  long long v7 = v8[1];
  *(_OWORD *)a1 = v8[0];
  *(_OWORD *)(a1 + 16) = v7;
  *(unsigned char *)(a1 + 32) = v9;
  return result;
}

void ContainerRelativeShape.inset(by:)(double *a1@<X8>, double a2@<D0>)
{
  *a1 = a2;
}

void ContainerRelativeShape._Inset.amount.setter(double a1)
{
  *unint64_t v1 = a1;
}

uint64_t (*ContainerRelativeShape._Inset.amount.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double ContainerRelativeShape._Inset.path(in:)@<D0>(uint64_t a1@<X8>, double a2@<D0>, CGFloat a3@<D4>)
{
  CGRect v11 = CGRectInset(*(CGRect *)&a2, a3, a3);
  specialized ContainerRelativeShape.path(in:)((uint64_t)v9, (__n128)v11.origin, *(__n128 *)&v11.origin.y, (__n128)v11.size, *(__n128 *)&v11.size.height);
  double result = *(double *)v9;
  long long v8 = v9[1];
  *(_OWORD *)a1 = v9[0];
  *(_OWORD *)(a1 + 16) = v8;
  *(unsigned char *)(a1 + 32) = v10;
  return result;
}

void ContainerRelativeShape._Inset.animatableData.setter(double a1)
{
  *unint64_t v1 = a1;
}

double (*ContainerRelativeShape._Inset.animatableData.modify(void *a1))(uint64_t a1)
{
  a1[1] = v1;
  *a1 = *v1;
  return ViewOrigin.x.modify;
}

double ContainerRelativeShape._Inset.inset(by:)(double a1, double a2)
{
  return a1 + a2;
}

double protocol witness for Shape.path(in:) in conformance ContainerRelativeShape._Inset@<D0>(uint64_t a1@<X8>, double a2@<D0>)
{
  CGRect v11 = CGRectInset(*(CGRect *)&a2, *v5, *v5);
  specialized ContainerRelativeShape.path(in:)((uint64_t)v9, (__n128)v11.origin, *(__n128 *)&v11.origin.y, (__n128)v11.size, *(__n128 *)&v11.size.height);
  double result = *(double *)v9;
  long long v8 = v9[1];
  *(_OWORD *)a1 = v9[0];
  *(_OWORD *)(a1 + 16) = v8;
  *(unsigned char *)(a1 + 32) = v10;
  return result;
}

uint64_t ShapeStyle._fillingContainerShape()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  lazy protocol witness table accessor for type ContainerRelativeShape and conformance ContainerRelativeShape();
  return Shape.fill<A>(_:style:)(v2, 256, (uint64_t)&type metadata for ContainerRelativeShape, a1, a2);
}

uint64_t View.containerShape<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  long long v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for _ContainerShapeModifier();
  uint64_t v10 = *(void *)(v9 - 8);
  double v11 = MEMORY[0x270FA5388](v9);
  unsigned int v13 = (char *)&v15 - v12;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v8, a1, a3, v11);
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v13, v8, a3);
  View.modifier<A>(_:)(v13, a2, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

uint64_t _ContainerShapeModifier.init(shape:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t View._containerShape<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  long long v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for SystemContainerShapeModifier();
  uint64_t v10 = *(void *)(v9 - 8);
  double v11 = MEMORY[0x270FA5388](v9);
  unsigned int v13 = (char *)&v15 - v12;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v8, a1, a3, v11);
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v13, v8, a3);
  View.modifier<A>(_:)(v13, a2, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

uint64_t _ContainerShapeModifier.shape.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t _ContainerShapeModifier.shape.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*_ContainerShapeModifier.shape.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t static _ContainerShapeModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, ValueMetadata *a5, uint64_t a6)
{
  int v9 = *(_DWORD *)(a2 + 8);
  uint64_t v10 = *(void *)(a2 + 16);
  unsigned int v12 = *(_DWORD *)(a2 + 24);
  unsigned int v11 = *(_DWORD *)(a2 + 28);
  unsigned int v19 = *(_DWORD *)(a2 + 36);
  unsigned int v20 = *(_DWORD *)(a2 + 32);
  uint64_t v14 = *(void *)(a2 + 40);
  uint64_t v13 = *(void *)(a2 + 48);
  int v15 = *(_DWORD *)(a2 + 80);
  uint64_t v32 = *(void *)a2;
  uint64_t v8 = v32;
  int v33 = v9;
  uint64_t v34 = v10;
  *(void *)&long long v35 = __PAIR64__(v11, v12);
  *((void *)&v35 + 1) = __PAIR64__(v19, v20);
  uint64_t v36 = v14;
  uint64_t v37 = v13;
  long long v38 = *(_OWORD *)(a2 + 56);
  uint64_t v39 = *(void *)(a2 + 72);
  int v40 = v15;
  type metadata accessor for _ContainerShapeModifier();
  type metadata accessor for _GraphValue();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static _ContainerShapeModifier._makeView(modifier:inputs:body:), (uint64_t)a5, &v31);
  uint64_t v22 = v8;
  int v23 = v9;
  uint64_t v24 = v10;
  *(void *)&long long v25 = __PAIR64__(v11, v12);
  *((void *)&v25 + 1) = __PAIR64__(v19, v20);
  uint64_t v26 = v14;
  uint64_t v16 = static Animatable.makeAnimatable(value:inputs:)(&v31, &v22, (uint64_t)a5, *(void *)(*(void *)(a6 + 8) + 8));
  _ViewInputs.setContainerShape<A>(_:isSystemShape:)(v16, 0, a5);
  uint64_t v22 = v32;
  int v23 = v33;
  uint64_t v24 = v34;
  long long v25 = v35;
  uint64_t v26 = v36;
  uint64_t v27 = v37;
  long long v28 = v38;
  uint64_t v29 = v39;
  int v30 = v40;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v17 = swift_bridgeObjectRetain();
  a3(v17, &v22);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ContainerShapeModifier<A>(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  return static _ContainerShapeModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(ValueMetadata **)(a5 + 16), *(void *)(a5 + 24));
}

uint64_t static SystemContainerShapeModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, ValueMetadata *a5, uint64_t a6)
{
  int v9 = *(_DWORD *)(a2 + 8);
  uint64_t v10 = *(void *)(a2 + 16);
  unsigned int v12 = *(_DWORD *)(a2 + 24);
  unsigned int v11 = *(_DWORD *)(a2 + 28);
  unsigned int v19 = *(_DWORD *)(a2 + 36);
  unsigned int v20 = *(_DWORD *)(a2 + 32);
  uint64_t v14 = *(void *)(a2 + 40);
  uint64_t v13 = *(void *)(a2 + 48);
  int v15 = *(_DWORD *)(a2 + 80);
  uint64_t v32 = *(void *)a2;
  uint64_t v8 = v32;
  int v33 = v9;
  uint64_t v34 = v10;
  *(void *)&long long v35 = __PAIR64__(v11, v12);
  *((void *)&v35 + 1) = __PAIR64__(v19, v20);
  uint64_t v36 = v14;
  uint64_t v37 = v13;
  long long v38 = *(_OWORD *)(a2 + 56);
  uint64_t v39 = *(void *)(a2 + 72);
  int v40 = v15;
  type metadata accessor for SystemContainerShapeModifier();
  type metadata accessor for _GraphValue();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static SystemContainerShapeModifier._makeView(modifier:inputs:body:), (uint64_t)a5, &v31);
  uint64_t v22 = v8;
  int v23 = v9;
  uint64_t v24 = v10;
  *(void *)&long long v25 = __PAIR64__(v11, v12);
  *((void *)&v25 + 1) = __PAIR64__(v19, v20);
  uint64_t v26 = v14;
  uint64_t v16 = static Animatable.makeAnimatable(value:inputs:)(&v31, &v22, (uint64_t)a5, *(void *)(*(void *)(a6 + 8) + 8));
  _ViewInputs.setContainerShape<A>(_:isSystemShape:)(v16, 1, a5);
  uint64_t v22 = v32;
  int v23 = v33;
  uint64_t v24 = v34;
  long long v25 = v35;
  uint64_t v26 = v36;
  uint64_t v27 = v37;
  long long v28 = v38;
  uint64_t v29 = v39;
  int v30 = v40;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v17 = swift_bridgeObjectRetain();
  a3(v17, &v22);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t closure #1 in static _ContainerShapeModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t a5)
{
  v11[2] = a4(0);
  v11[3] = a2;
  uint64_t v8 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, a5, (uint64_t)v11, a2, MEMORY[0x263F8E628], v8, MEMORY[0x263F8E658], v9);
  return v11[5];
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance SystemContainerShapeModifier<A>(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  return static SystemContainerShapeModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(ValueMetadata **)(a5 + 16), *(void *)(a5 + 24));
}

double ContainerShapeContext.convert(_:to:)(uint64_t *a1, __n128 a2, double a3, double a4, double a5)
{
  double v8 = a2.n128_f64[0];
  uint64_t v9 = *a1;
  uint64_t v10 = a1[1];
  uint64_t v11 = a1[2];
  int v12 = *((_DWORD *)a1 + 6);
  int v13 = *((_DWORD *)a1 + 7);
  int v14 = *((_DWORD *)a1 + 8);
  a2.n128_u64[0] = *(uint64_t *)((char *)a1 + 36);
  __n128 v28 = a2;
  uint64_t v15 = *(uint64_t *)((char *)a1 + 44);
  if (static WeakAttribute.== infix(_:_:)())
  {
    uint64_t WeakValue = AGGraphGetWeakValue();
    if (WeakValue)
    {
      uint64_t v17 = (double *)WeakValue;
      uint64_t v18 = (double *)AGGraphGetWeakValue();
      if (v18) {
        return *v17 - *v18 + v8;
      }
    }
  }
  lazy protocol witness table accessor for type UniqueID and conformance UniqueID();
  AnyHashable.init<A>(_:)();
  v39[40] = 0;
  specialized static Update.begin()();
  *(double *)long long v38 = v8;
  *(double *)&v38[1] = a3;
  *(double *)&v38[2] = a4;
  *(double *)&v38[3] = a5;
  uint64_t v29 = v9;
  uint64_t v30 = v10;
  uint64_t v31 = v11;
  int v32 = v12;
  int v33 = v13;
  int v34 = v14;
  unint64_t v35 = v28.n128_u64[0];
  uint64_t v36 = v15;
  uint64_t v20 = GeometryProxy.placementContext.getter((uint64_t)&v37);
  MEMORY[0x270FA5388](v20);
  v27[2] = v38;
  v27[3] = v39;
  LOBYTE(v29) = v21;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI30_PositionAwarePlacementContextV_s5NeverOytTB5((void *(*)(uint64_t *__return_ptr, void *))_s7SwiftUI13GeometryProxyV4rect_2inSo6CGRectVAG_AA15CoordinateSpaceOtFyAA30_PositionAwarePlacementContextVXEfU_TA_0, (uint64_t)v27, v23, v24, v25, v22 | ((unint64_t)v21 << 32));
  double v19 = *(double *)v38;
  static Update.end()();
  outlined destroy of CoordinateSpace((uint64_t)v39);
  return v19;
}

uint64_t static ContainerShapeType.path(in:proxy:shape:context:)()
{
  AGWeakAttributeGetAttribute();
  uint64_t result = AGGraphWithUpdate();
  __break(1u);
  return result;
}

uint64_t closure #1 in static ContainerShapeType.path(in:proxy:shape:context:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, CGFloat a5, double a6, double a7, double a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  CGFloat v86 = *(double *)&a4;
  CGFloat v85 = *(double *)&a2;
  *(void *)&long long v88 = a13;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v87 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  v89 = (char *)&MaxX - v23;
  uint64_t v24 = *(void *)(a12 - 8);
  MEMORY[0x270FA5388](v25);
  uint64_t v27 = (char *)&MaxX - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t WeakValue = AGGraphGetWeakValue();
  if (WeakValue && (uint64_t v29 = (CGFloat *)WeakValue, (v30 = AGGraphGetWeakValue()) != 0))
  {
    CGFloat v81 = *(double *)&a1;
    int v31 = LODWORD(v85);
    *(void *)&CGFloat v83 = HIDWORD(*(void *)&v85);
    uint64_t v84 = AssociatedTypeWitness;
    *(void *)&double v82 = HIDWORD(a3);
    int v32 = LODWORD(v86);
    uint64_t v33 = HIDWORD(*(void *)&v86);
    CGFloat v35 = *v29;
    CGFloat v34 = v29[1];
    (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v27, v30, a12);
    CGFloat v93 = v81;
    int v94 = v31;
    int v95 = LODWORD(v83);
    int v96 = a3;
    int v97 = LODWORD(v82);
    int v98 = v32;
    int v99 = v33;
    long long v36 = *(_OWORD *)(a11 + 16);
    *(_OWORD *)v90 = *(_OWORD *)a11;
    *(_OWORD *)&v90[16] = v36;
    long long v91 = *(_OWORD *)(a11 + 32);
    v37.n128_u64[1] = *((void *)&v91 + 1);
    int v92 = *(_DWORD *)(a11 + 48);
    v37.n128_f64[0] = a5;
    v101.origin.CGFloat x = ContainerShapeContext.convert(_:to:)((uint64_t *)v90, v37, a6, a7, a8);
    CGFloat x = v101.origin.x;
    CGFloat y = v101.origin.y;
    CGFloat v86 = a8;
    CGFloat width = v101.size.width;
    CGFloat v85 = a7;
    CGFloat height = v101.size.height;
    CGFloat MinX = CGRectGetMinX(v101);
    CGFloat v83 = a6;
    double v43 = MinX;
    v102.origin.CGFloat x = 0.0;
    v102.origin.CGFloat y = 0.0;
    v102.size.CGFloat width = v35;
    v102.size.CGFloat height = v34;
    double v82 = v43 - CGRectGetMinX(v102);
    v103.origin.CGFloat x = x;
    v103.origin.CGFloat y = y;
    v103.size.CGFloat width = width;
    v103.size.CGFloat height = height;
    double MinY = CGRectGetMinY(v103);
    v104.origin.CGFloat x = 0.0;
    v104.origin.CGFloat y = 0.0;
    v104.size.CGFloat width = v35;
    v104.size.CGFloat height = v34;
    double v45 = MinY - CGRectGetMinY(v104);
    v105.origin.CGFloat x = 0.0;
    v105.origin.CGFloat y = 0.0;
    v105.size.CGFloat width = v35;
    v105.size.CGFloat height = v34;
    CGFloat MaxX = CGRectGetMaxX(v105);
    v106.origin.CGFloat x = x;
    v106.origin.CGFloat y = y;
    v106.size.CGFloat width = width;
    v106.size.CGFloat height = height;
    CGFloat v46 = CGRectGetMaxX(v106);
    CGFloat v81 = a5;
    double v47 = v46;
    v107.origin.CGFloat x = 0.0;
    v107.origin.CGFloat y = 0.0;
    v107.size.CGFloat width = v35;
    v107.size.CGFloat height = v34;
    double MaxY = CGRectGetMaxY(v107);
    v108.origin.CGFloat x = x;
    v108.origin.CGFloat y = y;
    v108.size.CGFloat width = width;
    v108.size.CGFloat height = height;
    double v49 = CGRectGetMaxY(v108);
    double v50 = v82;
    if (v45 < v82) {
      double v50 = v45;
    }
    if (MaxX - v47 < v50) {
      double v50 = MaxX - v47;
    }
    double v51 = MaxY - v49;
    if (v51 >= v50) {
      double v51 = v50;
    }
    if (v51 < 0.0) {
      double v52 = 0.0;
    }
    else {
      double v52 = v51;
    }
    v53 = v89;
    (*(void (**)(uint64_t, void, double))(v88 + 32))(a12, v88, v52);
    v109.origin.CGFloat x = v81;
    v109.origin.CGFloat y = v83;
    v109.size.CGFloat width = v85;
    v109.size.CGFloat height = v86;
    CGRect v110 = CGRectInset(v109, -v52, -v52);
    double v54 = v110.origin.x;
    double v55 = v110.origin.y;
    double v56 = v110.size.width;
    double v57 = v110.size.height;
    uint64_t v58 = v84;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    (*(void (**)(unsigned char *__return_ptr, uint64_t, double, double, double, double))(*(void *)(AssociatedConformanceWitness + 8)
                                                                                         + 24))(v90, v58, v54, v55, v56, v57);
    uint64_t v60 = *(void *)v90;
    long long v88 = *(_OWORD *)&v90[8];
    uint64_t v61 = *(void *)&v90[24];
    char v62 = v91;
    (*(void (**)(char *, uint64_t))(v87 + 8))(v53, v58);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v27, a12);
    uint64_t v63 = *(void *)a10;
    uint64_t v64 = *(void *)(a10 + 8);
    uint64_t v65 = *(void *)(a10 + 16);
    uint64_t v66 = *(void *)(a10 + 24);
    *(void *)a10 = v60;
    *(_OWORD *)(a10 + 8) = v88;
    *(void *)(a10 + 24) = v61;
    unsigned __int8 v67 = *(unsigned char *)(a10 + 32);
    *(unsigned char *)(a10 + 32) = v62;
    return outlined consume of Path?(v63, v64, v65, v66, v67);
  }
  else
  {
    v111.origin.CGFloat x = a5;
    v111.origin.CGFloat y = a6;
    v111.size.CGFloat width = a7;
    v111.size.CGFloat height = a8;
    BOOL IsNull = CGRectIsNull(v111);
    double v70 = 0.0;
    if (IsNull) {
      double v71 = 0.0;
    }
    else {
      double v71 = a5;
    }
    if (IsNull) {
      double v72 = 0.0;
    }
    else {
      double v72 = a6;
    }
    if (IsNull) {
      double v73 = 0.0;
    }
    else {
      double v73 = a7;
    }
    if (IsNull)
    {
      char v74 = 6;
    }
    else
    {
      double v70 = a8;
      char v74 = 0;
    }
    uint64_t v75 = *(void *)a10;
    uint64_t v76 = *(void *)(a10 + 8);
    uint64_t v77 = *(void *)(a10 + 16);
    uint64_t v78 = *(void *)(a10 + 24);
    *(double *)a10 = v71;
    *(double *)(a10 + 8) = v72;
    *(double *)(a10 + 16) = v73;
    *(double *)(a10 + 24) = v70;
    unsigned __int8 v79 = *(unsigned char *)(a10 + 32);
    *(unsigned char *)(a10 + 32) = v74;
    return outlined consume of Path?(v75, v76, v77, v78, v79);
  }
}

double protocol witness for static AnyContainerShapeType.path(in:proxy:shape:context:) in conformance ContainerShapeType<A>@<D0>(uint64_t a1@<X8>)
{
  static ContainerShapeType.path(in:proxy:shape:context:)();
  double result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = v5;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance ContainerShapeEnvironment@<X0>(void *a1@<X8>)
{
  long long v3 = *(_OWORD *)(v1 + 24);
  v8[0] = *(_OWORD *)(v1 + 8);
  v8[1] = v3;
  v9[0] = *(_OWORD *)(v1 + 40);
  *(_OWORD *)((char *)v9 + 9) = *(_OWORD *)(v1 + 49);
  Value = (uint64_t *)AGGraphGetValue();
  uint64_t v6 = *Value;
  uint64_t v5 = Value[1];
  *a1 = v6;
  a1[1] = v5;
  swift_retain();
  swift_retain();
  return specialized EnvironmentValues.subscript.setter(v8);
}

uint64_t ContainerShapeTransform.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Value = AGGraphGetValue();
  double v3 = *(double *)(Value + 8);
  double v4 = *(double *)(Value + 16);
  double v5 = *(double *)(Value + 24);
  double v6 = *(double *)(Value + 32);
  *(void *)a1 = *(void *)Value;
  uint64_t v7 = AGGraphGetValue();
  double v8 = *(double *)v7;
  double v9 = *(double *)(v7 + 8);
  *(double *)(a1 + 24) = v5 - (*(double *)v7 - v3);
  *(double *)(a1 + 32) = v6 - (v9 - v4);
  *(double *)(a1 + 8) = v8;
  *(double *)(a1 + 16) = v9;
  lazy protocol witness table accessor for type UniqueID and conformance UniqueID();
  swift_retain();
  AnyHashable.init<A>(_:)();
  ViewTransform.appendCoordinateSpace(name:)((uint64_t)v11);
  return outlined destroy of AnyHashable((uint64_t)v11);
}

double protocol witness for static EnvironmentKey.defaultValue.getter in conformance ContainerShapeKey@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = &type metadata for DefaultContainerShapeType;
  *(void *)(a1 + 8) = &protocol witness table for DefaultContainerShapeType;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 41) = 0u;
  return result;
}

void *specialized ContainerRelativeShape.path(in:)@<X0>(uint64_t a1@<X8>, __n128 a2@<Q0>, __n128 a3@<Q1>, __n128 a4@<Q2>, __n128 a5@<Q3>)
{
  double v6 = (unsigned int *)_threadGeometryProxyData();
  if (v6)
  {
    unsigned int v7 = *v6;
    unsigned int v8 = v6[1];
    unsigned int v9 = v6[2];
    unsigned int v10 = v6[3];
    unsigned int v11 = v6[4];
    unsigned int v12 = v6[5];
    unsigned int v13 = v6[6];
    unsigned int v14 = v6[7];
    unsigned int v15 = v6[8];
    unsigned int v16 = v6[9];
    unsigned int v17 = v6[10];
    unsigned int v18 = v6[11];
    unsigned int v19 = v6[12];
    unsigned int v50 = v8;
    unsigned int v51 = v7;
    uint64_t v64 = (ValueMetadata *)__PAIR64__(v8, v7);
    unsigned int v48 = v10;
    unsigned int v49 = v9;
    uint64_t v65 = (_UNKNOWN **)__PAIR64__(v10, v9);
    unsigned int v46 = v12;
    unsigned int v47 = v11;
    unint64_t v66 = __PAIR64__(v12, v11);
    unsigned int v44 = v14;
    unsigned int v45 = v13;
    unint64_t v67 = __PAIR64__(v14, v13);
    unsigned int v42 = v16;
    unsigned int v43 = v15;
    unint64_t v68 = __PAIR64__(v16, v15);
    unsigned int v40 = v18;
    unsigned int v41 = v17;
    unsigned int v69 = v17;
    unsigned int v70 = v18;
    unsigned int v39 = v19;
    unsigned int v71 = v19;
    GeometryProxy.environment.getter(v74);
    uint64_t v20 = v74[0];
    if (v74[1])
    {
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.value<A>(_:for:)(v20, (uint64_t)&v64);
      swift_release_n();
      swift_release_n();
      unsigned __int8 v21 = v64;
      uint64_t v22 = v65;
      unint64_t v23 = v67;
      unsigned int v24 = v68;
      unsigned int v25 = HIDWORD(v68);
      int v26 = v69;
      int v27 = v70;
      int v28 = v71;
      int v29 = v72;
    }
    else
    {
      uint64_t v34 = swift_retain_n();
      uint64_t v35 = specialized find<A>(_:key:)(v34);
      if (v35)
      {
        unsigned __int8 v21 = *(ValueMetadata **)(v35 + 72);
        uint64_t v22 = *(_UNKNOWN ***)(v35 + 80);
        unint64_t v36 = *(void *)(v35 + 96);
        unsigned int v24 = *(_DWORD *)(v35 + 104);
        unsigned int v25 = *(_DWORD *)(v35 + 108);
        int v26 = *(_DWORD *)(v35 + 112);
        int v27 = *(_DWORD *)(v35 + 116);
        int v28 = *(_DWORD *)(v35 + 120);
        int v29 = *(_DWORD *)(v35 + 124);
        char v37 = *(unsigned char *)(v35 + 128);
        uint64_t v64 = v21;
        uint64_t v65 = v22;
        unint64_t v66 = *(void *)(v35 + 88);
        unint64_t v38 = v36;
        unint64_t v67 = v36;
        unint64_t v68 = __PAIR64__(v25, v24);
        char v73 = v37;
      }
      else
      {
        unsigned int v25 = 0;
        unsigned int v24 = 0;
        unint64_t v38 = 0;
        int v26 = 0;
        int v27 = 0;
        int v28 = 0;
        int v29 = 0;
        unsigned __int8 v21 = &type metadata for DefaultContainerShapeType;
        uint64_t v22 = &protocol witness table for DefaultContainerShapeType;
        uint64_t v64 = &type metadata for DefaultContainerShapeType;
        uint64_t v65 = &protocol witness table for DefaultContainerShapeType;
        unint64_t v67 = 0;
        unint64_t v68 = 0;
        unint64_t v66 = 0;
      }
      unsigned int v69 = v26;
      unsigned int v70 = v27;
      unsigned int v71 = v28;
      int v72 = v29;
      swift_release_n();
      unint64_t v23 = v38;
    }
    v63[0] = v51;
    v63[1] = v50;
    v63[2] = v49;
    v63[3] = v48;
    v63[4] = v47;
    v63[5] = v46;
    v63[6] = v45;
    v63[7] = v44;
    v63[8] = v43;
    v63[9] = v42;
    v63[10] = v41;
    v63[11] = v40;
    v63[12] = v39;
    unint64_t v56 = v23;
    unsigned int v57 = v24;
    unsigned int v58 = v25;
    int v59 = v26;
    int v60 = v27;
    int v61 = v28;
    int v62 = v29;
    double result = ((void *(*)(_OWORD *__return_ptr, _DWORD *, unint64_t, unint64_t *, ValueMetadata *, _UNKNOWN **, __n128, __n128, __n128, __n128))v22[1])(v75, v63, v66, &v56, v21, v22, a2, a3, a4, a5);
    long long v31 = v75[0];
    long long v33 = v75[1];
    char v32 = v76;
  }
  else
  {
    *(void *)&v77.size.CGFloat width = a4.n128_u64[0];
    *(void *)&v77.origin.CGFloat x = a2.n128_u64[0];
    *(void *)&v77.origin.CGFloat y = a3.n128_u64[0];
    *(void *)&v77.size.CGFloat height = a5.n128_u64[0];
    double result = (void *)CGRectIsNull(v77);
    if (result)
    {
      long long v31 = 0uLL;
      char v32 = 6;
      long long v33 = 0uLL;
    }
    else
    {
      char v32 = 0;
      *(void *)&long long v31 = a2.n128_u64[0];
      *((void *)&v31 + 1) = a3.n128_u64[0];
      *(void *)&long long v33 = a4.n128_u64[0];
      *((void *)&v33 + 1) = a5.n128_u64[0];
    }
  }
  *(_OWORD *)a1 = v31;
  *(_OWORD *)(a1 + 16) = v33;
  *(unsigned char *)(a1 + 32) = v32;
  return result;
}

uint64_t type metadata accessor for _ContainerShapeModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for SystemContainerShapeModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #1 in static _ContainerShapeModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  return closure #1 in static _ContainerShapeModifier._makeView(modifier:inputs:body:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), (uint64_t (*)(void))type metadata accessor for _ContainerShapeModifier, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
}

unint64_t instantiation function for generic protocol witness table for ContainerRelativeShape(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type ContainerRelativeShape and conformance ContainerRelativeShape();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table accessor for type ContainerRelativeShape and conformance ContainerRelativeShape();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for ContainerRelativeShape._Inset(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type ContainerRelativeShape._Inset and conformance ContainerRelativeShape._Inset();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table accessor for type ContainerRelativeShape._Inset and conformance ContainerRelativeShape._Inset();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for InsettableShape.InsetShape : InsettableShape in ContainerRelativeShape()
{
  return swift_getOpaqueTypeConformance2();
}

double sub_245FC94A4@<D0>(double *a1@<X0>, void *a2@<X8>)
{
  double result = *a1;
  *a2 = *(void *)a1;
  return result;
}

double sub_245FC94B0(double *a1, void *a2)
{
  double result = *a1;
  *a2 = *(void *)a1;
  return result;
}

ValueMetadata *type metadata accessor for ContainerRelativeShape()
{
  return &type metadata for ContainerRelativeShape;
}

ValueMetadata *type metadata accessor for ContainerRelativeShape._Inset()
{
  return &type metadata for ContainerRelativeShape._Inset;
}

_UNKNOWN **sub_245FC94E8()
{
  return &protocol witness table for _ShapeView<A, B>;
}

uint64_t sub_245FC94F4(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzAA15InsettableShapeRd__r__lAA15ModifiedContentVyxAA010_ContainerE8ModifierVyqd__GGAaBHPxAaBHD1__AhA0cI0HPyHCHCTm(a1, (void (*)(uint64_t, void, void))type metadata accessor for _ContainerShapeModifier);
}

uint64_t sub_245FC9514(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzAA15InsettableShapeRd__r__lAA15ModifiedContentVyxAA010_ContainerE8ModifierVyqd__GGAaBHPxAaBHD1__AhA0cI0HPyHCHCTm(a1, (void (*)(uint64_t, void, void))type metadata accessor for SystemContainerShapeModifier);
}

uint64_t get_witness_table_7SwiftUI4ViewRzAA15InsettableShapeRd__r__lAA15ModifiedContentVyxAA010_ContainerE8ModifierVyqd__GGAaBHPxAaBHD1__AhA0cI0HPyHCHCTm(uint64_t a1, void (*a2)(uint64_t, void, void))
{
  return swift_getWitnessTable();
}

uint64_t getEnumTagSinglePayload for _ContainerShapeModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for _ContainerShapeModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x245FC9924);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unsigned int v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t partial apply for closure #1 in static SystemContainerShapeModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  return closure #1 in static _ContainerShapeModifier._makeView(modifier:inputs:body:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), (uint64_t (*)(void))type metadata accessor for SystemContainerShapeModifier, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:));
}

uint64_t getEnumTagSinglePayload for ContainerShapeEnvironment(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 65)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ContainerShapeEnvironment(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 64) = 0;
    *(void *)double result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 65) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 65) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for ContainerShapeEnvironment()
{
  return &unk_26FA6C940;
}

void *type metadata accessor for ContainerShapeTransform()
{
  return &unk_26FA68FA0;
}

ValueMetadata *type metadata accessor for ContainerShapeData()
{
  return &type metadata for ContainerShapeData;
}

ValueMetadata *type metadata accessor for ContainerShapeKey()
{
  return &type metadata for ContainerShapeKey;
}

ValueMetadata *type metadata accessor for DefaultContainerShapeType()
{
  return &type metadata for DefaultContainerShapeType;
}

unint64_t instantiation function for generic protocol witness table for ContainerShapeTransform(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type ContainerShapeTransform and conformance ContainerShapeTransform();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for ContainerShapeEnvironment(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type ContainerShapeEnvironment and conformance ContainerShapeEnvironment();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t partial apply for closure #1 in static ContainerShapeType.path(in:proxy:shape:context:)()
{
  return closure #1 in static ContainerShapeType.path(in:proxy:shape:context:)(*(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(CGFloat *)(v0 + 80), *(double *)(v0 + 88), *(double *)(v0 + 96), *(double *)(v0 + 104), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 112), *(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t outlined consume of Path?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 != 0xFF) {
    return outlined consume of Path.Storage(a1, a2, a3, a4, a5);
  }
  return a1;
}

void *type metadata accessor for ContainerShapeContext()
{
  return &unk_26FA63C08;
}

uint64_t _ResolvedKeyframeTrackContent.init()@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for _ResolvedKeyframeTrackContent.Segment();
  uint64_t result = static Array._allocateUninitialized(_:)();
  *a1 = result;
  return result;
}

uint64_t _ResolvedKeyframeTrackContent.Segment.end.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v27 = a2;
  uint64_t v26 = type metadata accessor for _ResolvedKeyframeTrackContent.Linear();
  uint64_t v24 = *(void *)(v26 - 8);
  MEMORY[0x270FA5388](v26);
  uint64_t v4 = (char *)&v23 - v3;
  uint64_t v5 = type metadata accessor for _ResolvedKeyframeTrackContent._Spring();
  uint64_t v25 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  unsigned int v7 = (char *)&v23 - v6;
  uint64_t v8 = type metadata accessor for _ResolvedKeyframeTrackContent.Cubic();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  int v11 = (char *)&v23 - v10;
  double v13 = MEMORY[0x270FA5388](v12);
  int v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v15, v28, a1, v13);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v15, v8);
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(v27, v11, AssociatedTypeWitness);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      break;
    case 2u:
      uint64_t v19 = v25;
      (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v7, v15, v5);
      uint64_t v20 = swift_getAssociatedTypeWitness();
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v20 - 8) + 16))(v27, v7, v20);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v7, v5);
      break;
    case 3u:
      (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v4, v15, v26);
      uint64_t v21 = swift_getAssociatedTypeWitness();
      uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v27, v4, v21);
      break;
    default:
      uint64_t v17 = swift_getAssociatedTypeWitness();
      uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v17 - 8) + 32))(v27, v15, v17);
      break;
  }
  return result;
}

uint64_t MergedKeyframeTrackContent.init(first:second:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a5, a1, a3);
  uint64_t v8 = type metadata accessor for MergedKeyframeTrackContent();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(v8 + 60), a2, a4);
}

void LinearKeyframe.init(_:duration:timingCurve:)(uint64_t a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness - 8);
  uint64_t v14 = (char *)&v18 - v13;
  __n128 v18 = *a2;
  unint64_t v15 = a2[1].n128_u64[0];
  unint64_t v16 = a2[1].n128_u64[1];
  unsigned __int8 v17 = a2[2].n128_u8[0];
  (*(void (**)(uint64_t, uint64_t))(a4 + 24))(a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a1, a3);
  __n128 v19 = v18;
  unint64_t v20 = v15;
  unint64_t v21 = v16;
  unsigned __int8 v22 = v17;
  _ResolvedKeyframeTrackContent.Linear.init(to:duration:timingCurve:)((uint64_t)v14, &v19, a5, a6);
}

void PrimitiveKeyframeTrackContent.body.getter()
{
}

uint64_t KeyframeTrackContent<>._resolve(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  double v8 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v10 = (char *)&v13 - v9;
  (*(void (**)(uint64_t, uint64_t, double))(a3 + 40))(a2, a3, v8);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 48))(a1, AssociatedTypeWitness, AssociatedConformanceWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, AssociatedTypeWitness);
}

uint64_t _ResolvedKeyframeTrackContent.append(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for _ResolvedKeyframeTrackContent.Segment();
  double v3 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))((char *)&v7 - v4, a1, v2, v3);
  type metadata accessor for Array();
  return Array.append(_:)();
}

uint64_t _ResolvedKeyframeTrackContent.Cubic.init(to:startVelocity:endVelocity:duration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(a4, a1, AssociatedTypeWitness);
  int v11 = (int *)type metadata accessor for _ResolvedKeyframeTrackContent.Cubic();
  uint64_t v12 = a4 + v11[9];
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32);
  v14(v12, a2, v13);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v14)(a4 + v11[10], a3, v13);
  *(double *)(a4 + v11[11]) = a5;
  return result;
}

uint64_t _ResolvedKeyframeTrackContent._Spring.init(to:spring:startVelocity:duration:)@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  long long v19 = *a2;
  uint64_t v11 = *((void *)a2 + 2);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(a6, a1, AssociatedTypeWitness);
  uint64_t v13 = (int *)type metadata accessor for _ResolvedKeyframeTrackContent._Spring();
  uint64_t v14 = a6 + v13[9];
  *(_OWORD *)uint64_t v14 = v19;
  *(void *)(v14 + 16) = v11;
  uint64_t v15 = a6 + v13[10];
  uint64_t v16 = type metadata accessor for Optional();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 32))(v15, a3, v16);
  uint64_t v18 = a6 + v13[11];
  *(void *)uint64_t v18 = a4;
  *(unsigned char *)(v18 + 8) = a5 & 1;
  return result;
}

__n128 _ResolvedKeyframeTrackContent.Linear.init(to:duration:timingCurve:)@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  __n128 v14 = *a2;
  unint64_t v7 = a2[1].n128_u64[0];
  unint64_t v8 = a2[1].n128_u64[1];
  unsigned __int8 v9 = a2[2].n128_u8[0];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(a3, a1, AssociatedTypeWitness);
  uint64_t v11 = type metadata accessor for _ResolvedKeyframeTrackContent.Linear();
  *(double *)(a3 + *(int *)(v11 + 36)) = a4;
  uint64_t v12 = (__n128 *)(a3 + *(int *)(v11 + 40));
  __n128 result = v14;
  __n128 *v12 = v14;
  v12[1].n128_u64[0] = v7;
  v12[1].n128_u64[1] = v8;
  v12[2].n128_u8[0] = v9;
  return result;
}

uint64_t CubicKeyframe.init(_:duration:startVelocity:endVelocity:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, double a7@<D0>)
{
  uint64_t v58 = a3;
  uint64_t v62 = a6;
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v63 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  unsigned __int8 v17 = (char *)&v48 - v16;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v19 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v19 - 8);
  unsigned int v57 = (char *)&v48 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v65 = (uint64_t)&v48 - v22;
  uint64_t v66 = AssociatedTypeWitness;
  uint64_t v64 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v23);
  uint64_t v25 = (char *)&v48 - v24;
  uint64_t v26 = type metadata accessor for _ResolvedKeyframeTrackContent.Cubic();
  uint64_t v55 = *(void *)(v26 - 8);
  uint64_t v56 = v26;
  double v27 = MEMORY[0x270FA5388](v26);
  uint64_t v53 = (uint64_t)&v48 - v28;
  double v54 = v25;
  int v29 = *(void (**)(uint64_t, uint64_t, double))(a5 + 24);
  uint64_t v60 = a1;
  v29(a4, a5, v27);
  uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  uint64_t v59 = a2;
  uint64_t v52 = v12;
  unsigned int v50 = v30;
  v30(v17, a2, v12);
  uint64_t v31 = *(void *)(a4 - 8);
  char v32 = v17;
  unsigned int v49 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48);
  int v33 = v49(v17, 1, a4);
  uint64_t v61 = a5;
  unsigned int v48 = (void (*)(uint64_t, uint64_t))v29;
  if (v33 == 1)
  {
    uint64_t v34 = v52;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v17, v52);
    unsigned int v51 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v64 + 56);
    v51(v65, 1, 1, v66);
  }
  else
  {
    uint64_t v35 = a5;
    uint64_t v36 = v65;
    ((void (*)(uint64_t, uint64_t))v29)(a4, v35);
    uint64_t v37 = v66;
    (*(void (**)(char *, uint64_t))(v31 + 8))(v32, a4);
    unsigned int v51 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v64 + 56);
    v51(v36, 0, 1, v37);
    uint64_t v34 = v52;
  }
  unint64_t v38 = v63;
  uint64_t v39 = v58;
  v50(v63, v58, v34);
  if (v49(v38, 1, a4) == 1)
  {
    unsigned int v40 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v40(v39, v34);
    v40(v59, v34);
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v60, a4);
    v40((uint64_t)v63, v34);
    uint64_t v41 = 1;
    uint64_t v42 = (uint64_t)v57;
  }
  else
  {
    uint64_t v42 = (uint64_t)v57;
    unsigned int v43 = v63;
    v48(a4, v61);
    unsigned int v44 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v44(v39, v34);
    v44(v59, v34);
    unsigned int v45 = *(void (**)(uint64_t, uint64_t))(v31 + 8);
    v45(v60, a4);
    v45((uint64_t)v43, a4);
    uint64_t v41 = 0;
  }
  v51(v42, v41, 1, v66);
  uint64_t v46 = v53;
  _ResolvedKeyframeTrackContent.Cubic.init(to:startVelocity:endVelocity:duration:)((uint64_t)v54, v65, v42, v53, a7);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v55 + 32))(v62, v46, v56);
}

uint64_t type metadata accessor for _ResolvedKeyframeTrackContent.Cubic()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t CubicKeyframe._resolve(into:)(uint64_t a1, uint64_t a2)
{
  return CubicKeyframe._resolve(into:)(a1, a2, (uint64_t (*)(void, uint64_t, uint64_t, double))type metadata accessor for _ResolvedKeyframeTrackContent.Cubic);
}

uint64_t type metadata accessor for _ResolvedKeyframeTrackContent.Segment()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for _ResolvedKeyframeTrackContent()
{
  return __swift_instantiateGenericMetadata();
}

void protocol witness for KeyframeTrackContent.body.getter in conformance CubicKeyframe<A>()
{
  swift_getWitnessTable();

  PrimitiveKeyframeTrackContent.body.getter();
}

uint64_t SpringKeyframe.init(_:duration:spring:startVelocity:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v34 = a5;
  int v40 = a3;
  uint64_t v41 = a2;
  uint64_t v42 = a8;
  unsigned int v45 = a1;
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v33 - v13;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v16 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v16 - 8);
  unsigned int v43 = (char *)&v33 - v17;
  uint64_t v39 = AssociatedTypeWitness;
  uint64_t v38 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v33 - v19;
  uint64_t v37 = type metadata accessor for _ResolvedKeyframeTrackContent._Spring();
  uint64_t v35 = *(void *)(v37 - 8);
  MEMORY[0x270FA5388](v37);
  uint64_t v22 = (char *)&v33 - v21;
  long long v33 = *(_OWORD *)a4;
  uint64_t v23 = *(void *)(a4 + 16);
  uint64_t v24 = *(void (**)(uint64_t, uint64_t))(a7 + 24);
  uint64_t v36 = v20;
  uint64_t v44 = a7;
  v24(a6, a7);
  long long v46 = v33;
  uint64_t v47 = v23;
  uint64_t v25 = v34;
  uint64_t v26 = v11;
  (*(void (**)(char *))(v12 + 16))(v14);
  uint64_t v27 = *(void *)(a6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v14, 1, a6) == 1)
  {
    uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v28(v25, v26);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v45, a6);
    v28((uint64_t)v14, v26);
    uint64_t v29 = 1;
  }
  else
  {
    v24(a6, v44);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v25, v26);
    uint64_t v30 = *(void (**)(char *, uint64_t))(v27 + 8);
    v30(v45, a6);
    v30(v14, a6);
    uint64_t v29 = 0;
  }
  uint64_t v31 = (uint64_t)v43;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v38 + 56))(v43, v29, 1, v39);
  _ResolvedKeyframeTrackContent._Spring.init(to:spring:startVelocity:duration:)((uint64_t)v36, &v46, v31, v41, v40 & 1, (uint64_t)v22);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v35 + 32))(v42, v22, v37);
}

uint64_t type metadata accessor for _ResolvedKeyframeTrackContent._Spring()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t SpringKeyframe._resolve(into:)(uint64_t a1, uint64_t a2)
{
  return CubicKeyframe._resolve(into:)(a1, a2, (uint64_t (*)(void, uint64_t, uint64_t, double))type metadata accessor for _ResolvedKeyframeTrackContent._Spring);
}

void protocol witness for KeyframeTrackContent.body.getter in conformance SpringKeyframe<A>()
{
  swift_getWitnessTable();

  PrimitiveKeyframeTrackContent.body.getter();
}

uint64_t LinearKeyframe._resolve(into:)(uint64_t a1, uint64_t a2)
{
  return CubicKeyframe._resolve(into:)(a1, a2, (uint64_t (*)(void, uint64_t, uint64_t, double))type metadata accessor for _ResolvedKeyframeTrackContent.Linear);
}

uint64_t CubicKeyframe._resolve(into:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void, uint64_t, uint64_t, double))
{
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = type metadata accessor for _ResolvedKeyframeTrackContent.Segment();
  uint64_t v8 = *(void *)(v7 - 8);
  double v9 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v14 - v10;
  uint64_t v12 = a3(0, v5, v6, v9);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v11, v3, v12);
  swift_storeEnumTagMultiPayload();
  type metadata accessor for _ResolvedKeyframeTrackContent();
  _ResolvedKeyframeTrackContent.append(_:)((uint64_t)v11);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

void protocol witness for KeyframeTrackContent.body.getter in conformance LinearKeyframe<A>()
{
  swift_getWitnessTable();

  PrimitiveKeyframeTrackContent.body.getter();
}

uint64_t MoveKeyframe.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t MoveKeyframe._resolve(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t v4 = type metadata accessor for _ResolvedKeyframeTrackContent.Segment();
  uint64_t v5 = *(void *)(v4 - 8);
  double v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v10 - v7;
  (*(void (**)(uint64_t, uint64_t, double))(v3 + 24))(v2, v3, v6);
  swift_storeEnumTagMultiPayload();
  type metadata accessor for _ResolvedKeyframeTrackContent();
  _ResolvedKeyframeTrackContent.append(_:)((uint64_t)v8);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

void protocol witness for KeyframeTrackContent.body.getter in conformance MoveKeyframe<A>()
{
  swift_getWitnessTable();

  PrimitiveKeyframeTrackContent.body.getter();
}

uint64_t MergedKeyframeTrackContent._resolve(into:)(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(uint64_t, void))(a2[6] + 48))(a1, a2[4]);
}

void protocol witness for KeyframeTrackContent.body.getter in conformance MergedKeyframeTrackContent<A, B, C>()
{
  swift_getWitnessTable();

  PrimitiveKeyframeTrackContent.body.getter();
}

void protocol witness for KeyframeTrackContent.body.getter in conformance EmptyKeyframeTrackContent<A>()
{
  swift_getWitnessTable();

  PrimitiveKeyframeTrackContent.body.getter();
}

uint64_t protocol witness for KeyframeTrackContent._resolve(into:) in conformance EmptyKeyframeTrackContent<A>(uint64_t a1, uint64_t a2)
{
  return _ViewInputs.base.modify(a1, *(void *)(a2 + 16));
}

uint64_t ArrayKeyframeTrackContent._resolve(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v18 = a1;
  uint64_t v8 = *(void *)(a4 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  if (MEMORY[0x24C522EA0](a2, a4))
  {
    uint64_t v16 = v9;
    uint64_t v17 = a5;
    uint64_t v11 = 0;
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(a5 + 48);
    while (1)
    {
      Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
      Array._checkSubscript(_:wasNativeTypeChecked:)();
      if (IsNativeType)
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v10, a2+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(void *)(v8 + 72) * v11, a4);
        uint64_t v14 = v11 + 1;
        if (__OFADD__(v11, 1)) {
          goto LABEL_10;
        }
      }
      else
      {
        uint64_t result = _ArrayBuffer._getElementSlowPath(_:)();
        if (v16 != 8)
        {
          __break(1u);
          return result;
        }
        uint64_t v19 = result;
        (*(void (**)(char *, uint64_t *, uint64_t))(v8 + 16))(v10, &v19, a4);
        swift_unknownObjectRelease();
        uint64_t v14 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_10:
          __break(1u);
          return swift_bridgeObjectRelease();
        }
      }
      v12(v18, a4, v17);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, a4);
      ++v11;
      if (v14 == MEMORY[0x24C522EA0](a2, a4)) {
        return swift_bridgeObjectRelease();
      }
    }
  }

  return swift_bridgeObjectRelease();
}

void protocol witness for KeyframeTrackContent.body.getter in conformance ArrayKeyframeTrackContent<A, B>()
{
  swift_getWitnessTable();

  PrimitiveKeyframeTrackContent.body.getter();
}

uint64_t protocol witness for KeyframeTrackContent._resolve(into:) in conformance ArrayKeyframeTrackContent<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ArrayKeyframeTrackContent._resolve(into:)(a1, *v3, a3, *(void *)(a2 + 24), *(void *)(a2 + 32));
}

void protocol witness for KeyframeTrackContent.body.getter in conformance KeyframeTrackContentBuilder<A>.Conditional<A1, B1, C1>()
{
  swift_getWitnessTable();

  PrimitiveKeyframeTrackContent.body.getter();
}

uint64_t associated type witness table accessor for KeyframeTrackContent.Body : KeyframeTrackContent in CubicKeyframe<A>()
{
  return swift_getWitnessTable();
}

uint64_t instantiation function for generic protocol witness table for CubicKeyframe<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for KeyframeTrackContent.Body : KeyframeTrackContent in SpringKeyframe<A>()
{
  return swift_getWitnessTable();
}

uint64_t instantiation function for generic protocol witness table for SpringKeyframe<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for KeyframeTrackContent.Body : KeyframeTrackContent in LinearKeyframe<A>()
{
  return swift_getWitnessTable();
}

uint64_t instantiation function for generic protocol witness table for LinearKeyframe<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for KeyframeTrackContent.Body : KeyframeTrackContent in MoveKeyframe<A>()
{
  return swift_getWitnessTable();
}

uint64_t instantiation function for generic protocol witness table for MoveKeyframe<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t default associated conformance accessor for KeyframeTrackContent.KeyframeTrackContent.Value: Animatable()
{
  swift_getAssociatedTypeWitness();

  return swift_getAssociatedConformanceWitness();
}

uint64_t dispatch thunk of KeyframeTrackContent.body.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of KeyframeTrackContent._resolve(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t type metadata completion function for CubicKeyframe(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for CubicKeyframe(a1, a2, a3, (uint64_t (*)(uint64_t, void, void))type metadata accessor for _ResolvedKeyframeTrackContent.Cubic);
}

uint64_t getEnumTagSinglePayload for CubicKeyframe(_DWORD *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v5 = v4;
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v4 + 64);
  if (v6) {
    uint64_t v8 = *(void *)(v4 + 64);
  }
  else {
    uint64_t v8 = v7 + 1;
  }
  if (!a2) {
    return 0;
  }
  if (v6 < a2)
  {
    unint64_t v9 = ((v8
         + ((v8
           + *(unsigned __int8 *)(v5 + 80)
           + ((v7 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
         + 7) & 0xFFFFFFFFFFFFFFF8)
       + 8;
    uint64_t v10 = v9 & 0xFFFFFFF8;
    if ((v9 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = a2 - v6 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v9);
        if (!v14) {
          break;
        }
        goto LABEL_21;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v9);
        if (v14) {
          goto LABEL_21;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x245FCBE58);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v9);
        if (!v14) {
          break;
        }
LABEL_21:
        int v15 = v14 - 1;
        if (v10)
        {
          int v15 = 0;
          LODWORD(v10) = *a1;
        }
        return v6 + (v10 | v15) + 1;
      default:
        break;
    }
  }
  if (!v6) {
    return 0;
  }
  uint64_t v17 = *(uint64_t (**)(_DWORD *))(v5 + 48);

  return v17(a1);
}

void storeEnumTagSinglePayload for CubicKeyframe(_DWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = (v8 + v9) & ~v9;
  if (!v7) {
    ++v8;
  }
  size_t v11 = ((v8 + ((v8 + v9 + v10) & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v7 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v7;
    if (a2 <= v7)
    {
LABEL_16:
      switch(v14)
      {
        case 1:
          *((unsigned char *)a1 + v11) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_29;
        case 2:
          *(_WORD *)((char *)a1 + v11) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_29;
        case 3:
          goto LABEL_36;
        case 4:
          *(_DWORD *)((char *)a1 + v11) = 0;
          goto LABEL_28;
        default:
LABEL_28:
          if (a2)
          {
LABEL_29:
            uint64_t v18 = *(void (**)(_DWORD *, uint64_t))(v6 + 56);
            v18(a1, a2);
          }
          break;
      }
      return;
    }
  }
  else
  {
    if (((v8 + ((v8 + v9 + v10) & ~v9) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v12 = a3 - v7 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v7;
    if (a2 <= v7) {
      goto LABEL_16;
    }
  }
  if (v11) {
    int v16 = 1;
  }
  else {
    int v16 = v15;
  }
  if (v11)
  {
    int v17 = ~v7 + a2;
    bzero(a1, v11);
    *a1 = v17;
  }
  switch(v14)
  {
    case 1:
      *((unsigned char *)a1 + v11) = v16;
      break;
    case 2:
      *(_WORD *)((char *)a1 + v11) = v16;
      break;
    case 3:
LABEL_36:
      __break(1u);
      JUMPOUT(0x245FCC060);
    case 4:
      *(_DWORD *)((char *)a1 + v11) = v16;
      break;
    default:
      return;
  }
}

uint64_t type metadata accessor for CubicKeyframe()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for SpringKeyframe(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for CubicKeyframe(a1, a2, a3, (uint64_t (*)(uint64_t, void, void))type metadata accessor for _ResolvedKeyframeTrackContent._Spring);
}

uint64_t getEnumTagSinglePayload for SpringKeyframe(unsigned __int8 *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  uint64_t v7 = v6 + 7;
  uint64_t v8 = v6 + 8;
  if (v5) {
    uint64_t v8 = v7;
  }
  if (!a2) {
    return 0;
  }
  if (v5 < a2)
  {
    unint64_t v9 = ((v8
         + (((v7 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))) & 0xFFFFFFFFFFFFFFF8)
       + 9;
    if (v9 < 4) {
      unsigned int v10 = ((a2 - v5 + 255) >> (8 * v9)) + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      unsigned int v11 = 4;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v10 < 0x100) {
      unsigned int v11 = 1;
    }
    if (v10 >= 2) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    switch(v12)
    {
      case 1:
        int v13 = a1[v9];
        if (!a1[v9]) {
          break;
        }
        goto LABEL_20;
      case 2:
        int v13 = *(unsigned __int16 *)&a1[v9];
        if (*(_WORD *)&a1[v9]) {
          goto LABEL_20;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x245FCC278);
      case 4:
        int v13 = *(_DWORD *)&a1[v9];
        if (!v13) {
          break;
        }
LABEL_20:
        int v14 = (v13 - 1) << (8 * v9);
        if (v9 >= 4) {
          int v14 = 0;
        }
        if (v9 == 1) {
          int v15 = *a1;
        }
        else {
          int v15 = *(_DWORD *)a1;
        }
        return v5 + (v15 | v14) + 1;
      default:
        break;
    }
  }
  if (!v5) {
    return 0;
  }
  int v16 = *(uint64_t (**)(unsigned __int8 *))(v4 + 48);

  return v16(a1);
}

void storeEnumTagSinglePayload for SpringKeyframe(unsigned char *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = v8 + 7;
  unint64_t v10 = (((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v6 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v11 = v8 + 8;
  if (v7) {
    uint64_t v11 = v9;
  }
  size_t v12 = ((v11 + v10) & 0xFFFFFFFFFFFFFFF8) + 9;
  char v13 = 8 * v12;
  if (v7 >= a3)
  {
    int v16 = 0;
    if (v7 >= a2)
    {
LABEL_16:
      switch(v16)
      {
        case 1:
          a1[v12] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_33;
        case 2:
          *(_WORD *)&a1[v12] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_33;
        case 3:
          goto LABEL_40;
        case 4:
          *(_DWORD *)&a1[v12] = 0;
          goto LABEL_32;
        default:
LABEL_32:
          if (a2)
          {
LABEL_33:
            uint64_t v22 = *(void (**)(unsigned char *, uint64_t))(v6 + 56);
            v22(a1, a2);
          }
          break;
      }
      return;
    }
  }
  else
  {
    if (v12 <= 3) {
      unsigned int v14 = ((a3 - v7 + 255) >> v13) + 1;
    }
    else {
      unsigned int v14 = 2;
    }
    if (v14 >= 0x10000) {
      int v15 = 4;
    }
    else {
      int v15 = 2;
    }
    if (v14 < 0x100) {
      int v15 = 1;
    }
    if (v14 >= 2) {
      int v16 = v15;
    }
    else {
      int v16 = 0;
    }
    if (v7 >= a2) {
      goto LABEL_16;
    }
  }
  unsigned int v17 = ~v7 + a2;
  unsigned int v18 = v17 >> v13;
  unsigned int v19 = (~(_BYTE)v7 + a2);
  if (v12 < 4) {
    int v20 = v18 + 1;
  }
  else {
    int v20 = 1;
  }
  if (v12 >= 4) {
    unsigned int v21 = v17;
  }
  else {
    unsigned int v21 = v19;
  }
  bzero(a1, v12);
  if (v12 == 1) {
    *a1 = v21;
  }
  else {
    *(_DWORD *)a1 = v21;
  }
  switch(v16)
  {
    case 1:
      a1[v12] = v20;
      break;
    case 2:
      *(_WORD *)&a1[v12] = v20;
      break;
    case 3:
LABEL_40:
      __break(1u);
      JUMPOUT(0x245FCC4A8);
    case 4:
      *(_DWORD *)&a1[v12] = v20;
      break;
    default:
      return;
  }
}

uint64_t type metadata accessor for SpringKeyframe()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t getEnumTagSinglePayload for LinearKeyframe(unsigned __int8 *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  if (!a2) {
    return 0;
  }
  if (v6 < a2)
  {
    unint64_t v7 = ((((*(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
       + 33;
    if (v7 < 4) {
      unsigned int v8 = ((a2 - v6 + 255) >> (8 * v7)) + 1;
    }
    else {
      unsigned int v8 = 2;
    }
    if (v8 >= 0x10000) {
      unsigned int v9 = 4;
    }
    else {
      unsigned int v9 = 2;
    }
    if (v8 < 0x100) {
      unsigned int v9 = 1;
    }
    if (v8 >= 2) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    switch(v10)
    {
      case 1:
        int v11 = a1[v7];
        if (!a1[v7]) {
          break;
        }
        goto LABEL_18;
      case 2:
        int v11 = *(unsigned __int16 *)&a1[v7];
        if (*(_WORD *)&a1[v7]) {
          goto LABEL_18;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x245FCC68CLL);
      case 4:
        int v11 = *(_DWORD *)&a1[v7];
        if (!v11) {
          break;
        }
LABEL_18:
        int v12 = (v11 - 1) << (8 * v7);
        if (v7 >= 4) {
          int v12 = 0;
        }
        if (((((*(_DWORD *)(*(void *)(AssociatedTypeWitness - 8) + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFE0) {
          int v13 = *a1;
        }
        else {
          int v13 = *(_DWORD *)a1;
        }
        return v6 + (v13 | v12) + 1;
      default:
        break;
    }
  }
  if (!v6) {
    return 0;
  }
  unsigned int v14 = *(uint64_t (**)(unsigned __int8 *))(v5 + 48);

  return v14(a1);
}

void storeEnumTagSinglePayload for LinearKeyframe(unsigned char *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = ((((*(void *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 33;
  char v9 = 8 * v8;
  if (v7 >= a3)
  {
    int v12 = 0;
    if (v7 >= a2)
    {
LABEL_14:
      switch(v12)
      {
        case 1:
          a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_31;
        case 2:
          *(_WORD *)&a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_31;
        case 3:
          goto LABEL_38;
        case 4:
          *(_DWORD *)&a1[v8] = 0;
          goto LABEL_30;
        default:
LABEL_30:
          if (a2)
          {
LABEL_31:
            unsigned int v18 = *(void (**)(unsigned char *, uint64_t))(v6 + 56);
            v18(a1, a2);
          }
          break;
      }
      return;
    }
  }
  else
  {
    if (v8 <= 3) {
      unsigned int v10 = ((a3 - v7 + 255) >> v9) + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      int v11 = 4;
    }
    else {
      int v11 = 2;
    }
    if (v10 < 0x100) {
      int v11 = 1;
    }
    if (v10 >= 2) {
      int v12 = v11;
    }
    else {
      int v12 = 0;
    }
    if (v7 >= a2) {
      goto LABEL_14;
    }
  }
  unsigned int v13 = ~v7 + a2;
  unsigned int v14 = v13 >> v9;
  unsigned int v15 = (~(_BYTE)v7 + a2);
  if (v8 < 4) {
    int v16 = v14 + 1;
  }
  else {
    int v16 = 1;
  }
  if (v8 >= 4) {
    unsigned int v17 = v13;
  }
  else {
    unsigned int v17 = v15;
  }
  bzero(a1, v8);
  if (v8 == 1) {
    *a1 = v17;
  }
  else {
    *(_DWORD *)a1 = v17;
  }
  switch(v12)
  {
    case 1:
      a1[v8] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v8] = v16;
      break;
    case 3:
LABEL_38:
      __break(1u);
      JUMPOUT(0x245FCC8A0);
    case 4:
      *(_DWORD *)&a1[v8] = v16;
      break;
    default:
      return;
  }
}

uint64_t getEnumTagSinglePayload for MoveKeyframe(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for MoveKeyframe(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x245FCCC3CLL);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        int v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for MoveKeyframe()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t getEnumTagSinglePayload for MergedKeyframeTrackContent(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v5 = *(void *)(a3 + 32);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void storeEnumTagSinglePayload for MergedKeyframeTrackContent(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 32);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x245FCD140);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v10)
        {
          uint64_t v24 = *(void (**)(void))(v6 + 56);
          v24();
        }
        else
        {
          unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
          uint64_t v23 = *(void (**)(unint64_t))(v9 + 56);
          v23(v22);
        }
      }
      return;
  }
}

uint64_t type metadata accessor for ArrayKeyframeTrackContent()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for EmptyKeyframeTrackContent()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t *initializeBufferWithCopyOfBuffer for LinearKeyframe(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 33 > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    unsigned int v10 = (void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v11 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *unsigned int v10 = *v11;
    unint64_t v12 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
    long long v14 = *(_OWORD *)v12;
    long long v13 = *(_OWORD *)(v12 + 16);
    unint64_t v15 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
    *(unsigned char *)(v15 + 32) = *(unsigned char *)(v12 + 32);
    *(_OWORD *)unint64_t v15 = v14;
    *(_OWORD *)(v15 + 16) = v13;
  }
  return a1;
}

uint64_t destroy for LinearKeyframe(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);

  return v3(a1, AssociatedTypeWitness);
}

uint64_t initializeWithCopy for LinearKeyframe(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  unint64_t v7 = v6 + a1;
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v7 &= 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v7 = *v8;
  unint64_t v9 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  long long v12 = *(_OWORD *)v10;
  long long v11 = *(_OWORD *)(v10 + 16);
  *(unsigned char *)(v9 + 32) = *(unsigned char *)(v10 + 32);
  *(_OWORD *)unint64_t v9 = v12;
  *(_OWORD *)(v9 + 16) = v11;
  return a1;
}

uint64_t assignWithCopy for LinearKeyframe(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  unint64_t v7 = v6 + a1;
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v7 &= 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v7 = *v8;
  unint64_t v9 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  long long v12 = *(_OWORD *)v10;
  long long v11 = *(_OWORD *)(v10 + 16);
  *(unsigned char *)(v9 + 32) = *(unsigned char *)(v10 + 32);
  *(_OWORD *)unint64_t v9 = v12;
  *(_OWORD *)(v9 + 16) = v11;
  return a1;
}

uint64_t initializeWithTake for LinearKeyframe(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  unint64_t v7 = v6 + a1;
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v7 &= 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v7 = *v8;
  unint64_t v9 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  long long v12 = *(_OWORD *)v10;
  long long v11 = *(_OWORD *)(v10 + 16);
  *(unsigned char *)(v9 + 32) = *(unsigned char *)(v10 + 32);
  *(_OWORD *)unint64_t v9 = v12;
  *(_OWORD *)(v9 + 16) = v11;
  return a1;
}

uint64_t assignWithTake for LinearKeyframe(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  unint64_t v7 = v6 + a1;
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v7 &= 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v7 = *v8;
  unint64_t v9 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  long long v12 = *(_OWORD *)v10;
  long long v11 = *(_OWORD *)(v10 + 16);
  *(unsigned char *)(v9 + 32) = *(unsigned char *)(v10 + 32);
  *(_OWORD *)unint64_t v9 = v12;
  *(_OWORD *)(v9 + 16) = v11;
  return a1;
}

uint64_t getEnumTagSinglePayload for _ResolvedKeyframeTrackContent.Linear(unsigned __int8 *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  if (!a2) {
    return 0;
  }
  if (v6 < a2)
  {
    unint64_t v7 = ((((*(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
       + 33;
    if (v7 < 4) {
      unsigned int v8 = ((a2 - v6 + 255) >> (8 * v7)) + 1;
    }
    else {
      unsigned int v8 = 2;
    }
    if (v8 >= 0x10000) {
      unsigned int v9 = 4;
    }
    else {
      unsigned int v9 = 2;
    }
    if (v8 < 0x100) {
      unsigned int v9 = 1;
    }
    if (v8 >= 2) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    switch(v10)
    {
      case 1:
        int v11 = a1[v7];
        if (!a1[v7]) {
          break;
        }
        goto LABEL_18;
      case 2:
        int v11 = *(unsigned __int16 *)&a1[v7];
        if (*(_WORD *)&a1[v7]) {
          goto LABEL_18;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x245FCD7B4);
      case 4:
        int v11 = *(_DWORD *)&a1[v7];
        if (!v11) {
          break;
        }
LABEL_18:
        int v12 = (v11 - 1) << (8 * v7);
        if (v7 >= 4) {
          int v12 = 0;
        }
        if (((((*(_DWORD *)(*(void *)(AssociatedTypeWitness - 8) + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFE0) {
          int v13 = *a1;
        }
        else {
          int v13 = *(_DWORD *)a1;
        }
        return v6 + (v13 | v12) + 1;
      default:
        break;
    }
  }
  if (!v6) {
    return 0;
  }
  long long v14 = *(uint64_t (**)(unsigned __int8 *))(v5 + 48);

  return v14(a1);
}

void storeEnumTagSinglePayload for _ResolvedKeyframeTrackContent.Linear(unsigned char *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = ((((*(void *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 33;
  char v9 = 8 * v8;
  if (v7 >= a3)
  {
    int v12 = 0;
    if (v7 >= a2)
    {
LABEL_14:
      switch(v12)
      {
        case 1:
          a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_31;
        case 2:
          *(_WORD *)&a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_31;
        case 3:
          goto LABEL_38;
        case 4:
          *(_DWORD *)&a1[v8] = 0;
          goto LABEL_30;
        default:
LABEL_30:
          if (a2)
          {
LABEL_31:
            unsigned int v18 = *(void (**)(unsigned char *, uint64_t))(v6 + 56);
            v18(a1, a2);
          }
          break;
      }
      return;
    }
  }
  else
  {
    if (v8 <= 3) {
      unsigned int v10 = ((a3 - v7 + 255) >> v9) + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      int v11 = 4;
    }
    else {
      int v11 = 2;
    }
    if (v10 < 0x100) {
      int v11 = 1;
    }
    if (v10 >= 2) {
      int v12 = v11;
    }
    else {
      int v12 = 0;
    }
    if (v7 >= a2) {
      goto LABEL_14;
    }
  }
  unsigned int v13 = ~v7 + a2;
  unsigned int v14 = v13 >> v9;
  unsigned int v15 = (~(_BYTE)v7 + a2);
  if (v8 < 4) {
    int v16 = v14 + 1;
  }
  else {
    int v16 = 1;
  }
  if (v8 >= 4) {
    unsigned int v17 = v13;
  }
  else {
    unsigned int v17 = v15;
  }
  bzero(a1, v8);
  if (v8 == 1) {
    *a1 = v17;
  }
  else {
    *(_DWORD *)a1 = v17;
  }
  switch(v12)
  {
    case 1:
      a1[v8] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v8] = v16;
      break;
    case 3:
LABEL_38:
      __break(1u);
      JUMPOUT(0x245FCD9C8);
    case 4:
      *(_DWORD *)&a1[v8] = v16;
      break;
    default:
      return;
  }
}

uint64_t type metadata completion function for _ResolvedKeyframeTrackContent._Spring()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    uint64_t AssociatedTypeWitness = type metadata accessor for Optional();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return AssociatedTypeWitness;
}

uint64_t *initializeBufferWithCopyOfBuffer for SpringKeyframe(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 + 64);
  int v8 = *(_DWORD *)(v5 + 80);
  uint64_t v9 = v8;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v10 = *(void *)(v5 + 64);
  }
  else {
    size_t v10 = v7 + 1;
  }
  size_t v11 = v10 + 7;
  int v12 = v8 & 0x100000;
  if (v9 > 7
    || v12 != 0
    || ((v10 + 7 + ((v9 + ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 24) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 9 > 0x18)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v9 & 0xF8 ^ 0x1F8) & (v9 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v16 = AssociatedTypeWitness;
    uint64_t v26 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16);
    v26(a1, a2, AssociatedTypeWitness);
    unint64_t v17 = ((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v18 = ((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v19 = *(void *)(v18 + 16);
    *(_OWORD *)unint64_t v17 = *(_OWORD *)v18;
    *(void *)(v17 + 16) = v19;
    unsigned int v20 = (void *)((v17 + v9 + 24) & ~v9);
    int v21 = (void *)((v18 + v9 + 24) & ~v9);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v6 + 48))(v21, 1, v16))
    {
      memcpy(v20, v21, v10);
    }
    else
    {
      v26(v20, v21, v16);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v20, 0, 1, v16);
    }
    unint64_t v22 = ((unint64_t)v21 + v11) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v23 = *(void *)v22;
    unint64_t v24 = ((unint64_t)v20 + v11) & 0xFFFFFFFFFFFFFFF8;
    *(unsigned char *)(v24 + 8) = *(unsigned char *)(v22 + 8);
    *(void *)unint64_t v24 = v23;
  }
  return a1;
}

uint64_t destroy for SpringKeyframe(unint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(uint64_t (**)(unint64_t, uint64_t))(v3 + 8);
  v6(a1, AssociatedTypeWitness);
  unint64_t v4 = (((a1 + *(void *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, AssociatedTypeWitness);
  if (!result)
  {
    return v6(v4, AssociatedTypeWitness);
  }
  return result;
}

uint64_t initializeWithCopy for SpringKeyframe(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = v5;
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v7(a1, a2, AssociatedTypeWitness);
  size_t v8 = *(void *)(v5 + 64);
  unint64_t v9 = (v8 + 7 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (v8 + 7 + a2) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v11 = *(void *)(v10 + 16);
  *(_OWORD *)unint64_t v9 = *(_OWORD *)v10;
  *(void *)(v9 + 16) = v11;
  uint64_t v12 = *(unsigned __int8 *)(v5 + 80);
  unsigned int v13 = (void *)((v12 + 24 + v9) & ~v12);
  unsigned int v14 = (const void *)((v12 + 24 + v10) & ~v12);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(v14, 1, AssociatedTypeWitness))
  {
    int v15 = *(_DWORD *)(v6 + 84);
    if (v15) {
      size_t v16 = v8;
    }
    else {
      size_t v16 = v8 + 1;
    }
    memcpy(v13, v14, v16);
  }
  else
  {
    v7((uint64_t)v13, (uint64_t)v14, AssociatedTypeWitness);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v13, 0, 1, AssociatedTypeWitness);
    int v15 = *(_DWORD *)(v6 + 84);
  }
  if (v15) {
    size_t v17 = v8;
  }
  else {
    size_t v17 = v8 + 1;
  }
  uint64_t v18 = (uint64_t)v13 + v17 + 7;
  unint64_t v19 = ((unint64_t)v14 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = *(void *)v19;
  v18 &= 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)(v18 + 8) = *(unsigned char *)(v19 + 8);
  *(void *)uint64_t v18 = v20;
  return a1;
}

uint64_t assignWithCopy for SpringKeyframe(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = v5;
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24);
  v7(a1, a2, AssociatedTypeWitness);
  size_t v8 = *(void *)(v5 + 64);
  uint64_t v24 = a1;
  unint64_t v9 = (void *)((v8 + 7 + a1) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v10 = (void *)((v8 + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  void *v9 = *v10;
  v9[1] = v10[1];
  _OWORD v9[2] = v10[2];
  uint64_t v11 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v12 = (void *)(((unint64_t)v9 + v11 + 24) & ~v11);
  unsigned int v13 = (void *)(((unint64_t)v10 + v11 + 24) & ~v11);
  unsigned int v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v15 = v14(v12, 1, AssociatedTypeWitness);
  int v16 = v14(v13, 1, AssociatedTypeWitness);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(v12, v13, AssociatedTypeWitness);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v12, 0, 1, AssociatedTypeWitness);
      goto LABEL_12;
    }
    int v17 = *(_DWORD *)(v6 + 84);
  }
  else
  {
    if (!v16)
    {
      v7((uint64_t)v12, (uint64_t)v13, AssociatedTypeWitness);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(v12, AssociatedTypeWitness);
    int v17 = *(_DWORD *)(v6 + 84);
  }
  if (v17) {
    size_t v18 = v8;
  }
  else {
    size_t v18 = v8 + 1;
  }
  memcpy(v12, v13, v18);
LABEL_12:
  if (*(_DWORD *)(v6 + 84)) {
    size_t v19 = v8;
  }
  else {
    size_t v19 = v8 + 1;
  }
  uint64_t v20 = (uint64_t)v12 + v19 + 7;
  unint64_t v21 = ((unint64_t)v13 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  char v22 = *(unsigned char *)(v21 + 8);
  v20 &= 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v20 = *(void *)v21;
  *(unsigned char *)(v20 + 8) = v22;
  return v24;
}

uint64_t initializeWithTake for SpringKeyframe(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = v5;
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  v7(a1, a2, AssociatedTypeWitness);
  size_t v8 = *(void *)(v5 + 64);
  unint64_t v9 = (v8 + 7 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (v8 + 7 + a2) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v11 = *(void *)(v10 + 16);
  *(_OWORD *)unint64_t v9 = *(_OWORD *)v10;
  *(void *)(v9 + 16) = v11;
  uint64_t v12 = *(unsigned __int8 *)(v5 + 80);
  unsigned int v13 = (void *)((v12 + 24 + v9) & ~v12);
  unsigned int v14 = (const void *)((v12 + 24 + v10) & ~v12);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(v14, 1, AssociatedTypeWitness))
  {
    int v15 = *(_DWORD *)(v6 + 84);
    if (v15) {
      size_t v16 = v8;
    }
    else {
      size_t v16 = v8 + 1;
    }
    memcpy(v13, v14, v16);
  }
  else
  {
    v7((uint64_t)v13, (uint64_t)v14, AssociatedTypeWitness);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v13, 0, 1, AssociatedTypeWitness);
    int v15 = *(_DWORD *)(v6 + 84);
  }
  if (v15) {
    size_t v17 = v8;
  }
  else {
    size_t v17 = v8 + 1;
  }
  uint64_t v18 = (uint64_t)v13 + v17 + 7;
  unint64_t v19 = ((unint64_t)v14 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = *(void *)v19;
  v18 &= 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)(v18 + 8) = *(unsigned char *)(v19 + 8);
  *(void *)uint64_t v18 = v20;
  return a1;
}

uint64_t assignWithTake for SpringKeyframe(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = v5;
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40);
  v7(a1, a2, AssociatedTypeWitness);
  size_t v8 = *(void *)(v5 + 64);
  uint64_t v24 = a1;
  unint64_t v9 = (void *)((v8 + 7 + a1) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v10 = (void *)((v8 + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  void *v9 = *v10;
  v9[1] = v10[1];
  _OWORD v9[2] = v10[2];
  uint64_t v11 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v12 = (void *)(((unint64_t)v9 + v11 + 24) & ~v11);
  unsigned int v13 = (void *)(((unint64_t)v10 + v11 + 24) & ~v11);
  unsigned int v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v15 = v14(v12, 1, AssociatedTypeWitness);
  int v16 = v14(v13, 1, AssociatedTypeWitness);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(v12, v13, AssociatedTypeWitness);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v12, 0, 1, AssociatedTypeWitness);
      goto LABEL_12;
    }
    int v17 = *(_DWORD *)(v6 + 84);
  }
  else
  {
    if (!v16)
    {
      v7((uint64_t)v12, (uint64_t)v13, AssociatedTypeWitness);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(v12, AssociatedTypeWitness);
    int v17 = *(_DWORD *)(v6 + 84);
  }
  if (v17) {
    size_t v18 = v8;
  }
  else {
    size_t v18 = v8 + 1;
  }
  memcpy(v12, v13, v18);
LABEL_12:
  if (*(_DWORD *)(v6 + 84)) {
    size_t v19 = v8;
  }
  else {
    size_t v19 = v8 + 1;
  }
  uint64_t v20 = (uint64_t)v12 + v19 + 7;
  unint64_t v21 = ((unint64_t)v13 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  char v22 = *(unsigned char *)(v21 + 8);
  v20 &= 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v20 = *(void *)v21;
  *(unsigned char *)(v20 + 8) = v22;
  return v24;
}

uint64_t getEnumTagSinglePayload for _ResolvedKeyframeTrackContent._Spring(unsigned __int8 *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  uint64_t v7 = v6 + 7;
  uint64_t v8 = v6 + 8;
  if (v5) {
    uint64_t v8 = v7;
  }
  if (!a2) {
    return 0;
  }
  if (v5 < a2)
  {
    unint64_t v9 = ((v8
         + (((v7 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))) & 0xFFFFFFFFFFFFFFF8)
       + 9;
    if (v9 < 4) {
      unsigned int v10 = ((a2 - v5 + 255) >> (8 * v9)) + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      unsigned int v11 = 4;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v10 < 0x100) {
      unsigned int v11 = 1;
    }
    if (v10 >= 2) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    switch(v12)
    {
      case 1:
        int v13 = a1[v9];
        if (!a1[v9]) {
          break;
        }
        goto LABEL_20;
      case 2:
        int v13 = *(unsigned __int16 *)&a1[v9];
        if (*(_WORD *)&a1[v9]) {
          goto LABEL_20;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x245FCE794);
      case 4:
        int v13 = *(_DWORD *)&a1[v9];
        if (!v13) {
          break;
        }
LABEL_20:
        int v14 = (v13 - 1) << (8 * v9);
        if (v9 >= 4) {
          int v14 = 0;
        }
        if (v9 == 1) {
          int v15 = *a1;
        }
        else {
          int v15 = *(_DWORD *)a1;
        }
        return v5 + (v15 | v14) + 1;
      default:
        break;
    }
  }
  if (!v5) {
    return 0;
  }
  int v16 = *(uint64_t (**)(unsigned __int8 *))(v4 + 48);

  return v16(a1);
}

void storeEnumTagSinglePayload for _ResolvedKeyframeTrackContent._Spring(unsigned char *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = v8 + 7;
  unint64_t v10 = (((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v6 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v11 = v8 + 8;
  if (v7) {
    uint64_t v11 = v9;
  }
  size_t v12 = ((v11 + v10) & 0xFFFFFFFFFFFFFFF8) + 9;
  char v13 = 8 * v12;
  if (v7 >= a3)
  {
    int v16 = 0;
    if (v7 >= a2)
    {
LABEL_16:
      switch(v16)
      {
        case 1:
          a1[v12] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_33;
        case 2:
          *(_WORD *)&a1[v12] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_33;
        case 3:
          goto LABEL_40;
        case 4:
          *(_DWORD *)&a1[v12] = 0;
          goto LABEL_32;
        default:
LABEL_32:
          if (a2)
          {
LABEL_33:
            char v22 = *(void (**)(unsigned char *, uint64_t))(v6 + 56);
            v22(a1, a2);
          }
          break;
      }
      return;
    }
  }
  else
  {
    if (v12 <= 3) {
      unsigned int v14 = ((a3 - v7 + 255) >> v13) + 1;
    }
    else {
      unsigned int v14 = 2;
    }
    if (v14 >= 0x10000) {
      int v15 = 4;
    }
    else {
      int v15 = 2;
    }
    if (v14 < 0x100) {
      int v15 = 1;
    }
    if (v14 >= 2) {
      int v16 = v15;
    }
    else {
      int v16 = 0;
    }
    if (v7 >= a2) {
      goto LABEL_16;
    }
  }
  unsigned int v17 = ~v7 + a2;
  unsigned int v18 = v17 >> v13;
  unsigned int v19 = (~(_BYTE)v7 + a2);
  if (v12 < 4) {
    int v20 = v18 + 1;
  }
  else {
    int v20 = 1;
  }
  if (v12 >= 4) {
    unsigned int v21 = v17;
  }
  else {
    unsigned int v21 = v19;
  }
  bzero(a1, v12);
  if (v12 == 1) {
    *a1 = v21;
  }
  else {
    *(_DWORD *)a1 = v21;
  }
  switch(v16)
  {
    case 1:
      a1[v12] = v20;
      break;
    case 2:
      *(_WORD *)&a1[v12] = v20;
      break;
    case 3:
LABEL_40:
      __break(1u);
      JUMPOUT(0x245FCE9C4);
    case 4:
      *(_DWORD *)&a1[v12] = v20;
      break;
    default:
      return;
  }
}

uint64_t type metadata completion function for _ResolvedKeyframeTrackContent.Cubic()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    uint64_t AssociatedTypeWitness = type metadata accessor for Optional();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return AssociatedTypeWitness;
}

uint64_t *initializeBufferWithCopyOfBuffer for CubicKeyframe(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = v7;
  uint64_t v9 = v6 + v7;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v10 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  }
  else {
    size_t v10 = v6 + 1;
  }
  unint64_t v11 = ((v10
        + 7
        + ((v10 + v7 + ((v6 + v7) & ~(unint64_t)v7)) & ~(unint64_t)v7)) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  int v12 = v7 & 0x100000;
  if (v8 > 7 || v12 != 0 || v11 > 0x18)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    int v16 = (uint64_t *)(v15 + ((v8 & 0xF8 ^ 0x1F8) & (v8 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v17 = AssociatedTypeWitness;
    uint64_t v18 = ~v8;
    unsigned int v19 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16);
    v19(a1, a2, AssociatedTypeWitness);
    uint64_t v28 = a1;
    unint64_t v25 = (unint64_t)a1 + v9;
    int v20 = (void *)(((unint64_t)a1 + v9) & ~v8);
    unint64_t v26 = (unint64_t)a2 + v9;
    unsigned int v21 = (const void *)(((unint64_t)a2 + v9) & ~v8);
    uint64_t v27 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
    if (v27(v21, 1, v17))
    {
      memcpy(v20, v21, v10);
    }
    else
    {
      v19((uint64_t *)v20, (uint64_t *)v21, v17);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v20, 0, 1, v17);
    }
    char v22 = (void *)(((v25 | v8) + v10) & v18);
    uint64_t v23 = (const void *)(((v26 | v8) + v10) & v18);
    if (v27(v23, 1, v17))
    {
      memcpy(v22, v23, v10);
    }
    else
    {
      v19((uint64_t *)v22, (uint64_t *)v23, v17);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v22, 0, 1, v17);
    }
    int v16 = v28;
    *(void *)(((unint64_t)v22 + v10 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v23 + v10 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  return v16;
}

uint64_t destroy for CubicKeyframe(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  int v12 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v12(a1, AssociatedTypeWitness);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64) + v4;
  uint64_t v6 = ~v4;
  uint64_t v7 = (v5 + a1) & ~v4;
  uint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (!v8(v7, 1, AssociatedTypeWitness)) {
    v12(v7, AssociatedTypeWitness);
  }
  uint64_t v9 = v5 + v7;
  if (!*(_DWORD *)(v3 + 84)) {
    ++v9;
  }
  uint64_t v10 = v9 & v6;
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v8)(v9 & v6, 1, AssociatedTypeWitness);
  if (!result)
  {
    return ((uint64_t (*)(uint64_t, uint64_t))v12)(v10, AssociatedTypeWitness);
  }
  return result;
}

uint64_t initializeWithCopy for CubicKeyframe(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = v5;
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v7(a1, a2, AssociatedTypeWitness);
  size_t v8 = *(void *)(v5 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v5 + 80);
  size_t v19 = v8 + v9 + a1;
  uint64_t v20 = ~v9;
  uint64_t v10 = (void *)(v19 & ~v9);
  size_t v18 = v8 + v9 + a2;
  unint64_t v11 = (const void *)(v18 & ~v9);
  unsigned int v21 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48);
  uint64_t v22 = a1;
  if (v21(v11, 1, AssociatedTypeWitness))
  {
    int v12 = *(_DWORD *)(v6 + 84);
    if (v12) {
      size_t v13 = v8;
    }
    else {
      size_t v13 = v8 + 1;
    }
    memcpy(v10, v11, v13);
  }
  else
  {
    v7((uint64_t)v10, (uint64_t)v11, AssociatedTypeWitness);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v10, 0, 1, AssociatedTypeWitness);
    int v12 = *(_DWORD *)(v6 + 84);
  }
  if (v12) {
    size_t v14 = v8;
  }
  else {
    size_t v14 = v8 + 1;
  }
  uint64_t v15 = (void *)(((v19 | v9) + v14) & v20);
  int v16 = (const void *)(((v18 | v9) + v14) & v20);
  if (v21(v16, 1, AssociatedTypeWitness))
  {
    memcpy(v15, v16, v14);
  }
  else
  {
    v7((uint64_t)v15, (uint64_t)v16, AssociatedTypeWitness);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v15, 0, 1, AssociatedTypeWitness);
  }
  *(void *)(((unint64_t)v15 + v14 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v16 + v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  return v22;
}

uint64_t assignWithCopy for CubicKeyframe(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = v5;
  unsigned int v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24);
  v21(a1, a2, AssociatedTypeWitness);
  size_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v24 = ~v8;
  uint64_t v25 = a1;
  uint64_t v9 = (void *)((v7 + v8 + a1) & ~v8);
  size_t v22 = v7 + v8 + a2;
  size_t v23 = v7 + v8 + a1;
  uint64_t v10 = (void *)(v22 & ~v8);
  unint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  LODWORD(a1) = v11(v9, 1, AssociatedTypeWitness);
  int v12 = v11(v10, 1, AssociatedTypeWitness);
  if (a1)
  {
    if (!v12)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(v9, v10, AssociatedTypeWitness);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v9, 0, 1, AssociatedTypeWitness);
      goto LABEL_12;
    }
    int v13 = *(_DWORD *)(v6 + 84);
  }
  else
  {
    if (!v12)
    {
      v21((uint64_t)v9, (uint64_t)v10, AssociatedTypeWitness);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(v9, AssociatedTypeWitness);
    int v13 = *(_DWORD *)(v6 + 84);
  }
  if (v13) {
    size_t v14 = v7;
  }
  else {
    size_t v14 = v7 + 1;
  }
  memcpy(v9, v10, v14);
LABEL_12:
  if (*(_DWORD *)(v6 + 84)) {
    size_t v15 = v7;
  }
  else {
    size_t v15 = v7 + 1;
  }
  int v16 = (void *)(((v23 | v8) + v15) & v24);
  uint64_t v17 = (void *)(((v22 | v8) + v15) & v24);
  int v18 = v11(v16, 1, AssociatedTypeWitness);
  int v19 = v11(v17, 1, AssociatedTypeWitness);
  if (!v18)
  {
    if (!v19)
    {
      v21((uint64_t)v16, (uint64_t)v17, AssociatedTypeWitness);
      goto LABEL_21;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(v16, AssociatedTypeWitness);
    goto LABEL_20;
  }
  if (v19)
  {
LABEL_20:
    memcpy(v16, v17, v15);
    goto LABEL_21;
  }
  (*(void (**)(void *, void *, uint64_t))(v6 + 16))(v16, v17, AssociatedTypeWitness);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v16, 0, 1, AssociatedTypeWitness);
LABEL_21:
  *(void *)(((unint64_t)v16 + v15 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v17 + v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  return v25;
}

uint64_t initializeWithTake for CubicKeyframe(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = v5;
  size_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  v7(a1, a2, AssociatedTypeWitness);
  size_t v8 = *(void *)(v5 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v5 + 80);
  size_t v19 = v8 + v9 + a1;
  uint64_t v20 = ~v9;
  uint64_t v10 = (void *)(v19 & ~v9);
  size_t v18 = v8 + v9 + a2;
  unint64_t v11 = (const void *)(v18 & ~v9);
  unsigned int v21 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48);
  uint64_t v22 = a1;
  if (v21(v11, 1, AssociatedTypeWitness))
  {
    int v12 = *(_DWORD *)(v6 + 84);
    if (v12) {
      size_t v13 = v8;
    }
    else {
      size_t v13 = v8 + 1;
    }
    memcpy(v10, v11, v13);
  }
  else
  {
    v7((uint64_t)v10, (uint64_t)v11, AssociatedTypeWitness);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v10, 0, 1, AssociatedTypeWitness);
    int v12 = *(_DWORD *)(v6 + 84);
  }
  if (v12) {
    size_t v14 = v8;
  }
  else {
    size_t v14 = v8 + 1;
  }
  size_t v15 = (void *)(((v19 | v9) + v14) & v20);
  int v16 = (const void *)(((v18 | v9) + v14) & v20);
  if (v21(v16, 1, AssociatedTypeWitness))
  {
    memcpy(v15, v16, v14);
  }
  else
  {
    v7((uint64_t)v15, (uint64_t)v16, AssociatedTypeWitness);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v15, 0, 1, AssociatedTypeWitness);
  }
  *(void *)(((unint64_t)v15 + v14 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v16 + v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  return v22;
}

uint64_t assignWithTake for CubicKeyframe(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = v5;
  unsigned int v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40);
  v21(a1, a2, AssociatedTypeWitness);
  size_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v24 = ~v8;
  uint64_t v25 = a1;
  uint64_t v9 = (void *)((v7 + v8 + a1) & ~v8);
  size_t v22 = v7 + v8 + a2;
  size_t v23 = v7 + v8 + a1;
  uint64_t v10 = (void *)(v22 & ~v8);
  unint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  LODWORD(a1) = v11(v9, 1, AssociatedTypeWitness);
  int v12 = v11(v10, 1, AssociatedTypeWitness);
  if (a1)
  {
    if (!v12)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(v9, v10, AssociatedTypeWitness);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v9, 0, 1, AssociatedTypeWitness);
      goto LABEL_12;
    }
    int v13 = *(_DWORD *)(v6 + 84);
  }
  else
  {
    if (!v12)
    {
      v21((uint64_t)v9, (uint64_t)v10, AssociatedTypeWitness);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(v9, AssociatedTypeWitness);
    int v13 = *(_DWORD *)(v6 + 84);
  }
  if (v13) {
    size_t v14 = v7;
  }
  else {
    size_t v14 = v7 + 1;
  }
  memcpy(v9, v10, v14);
LABEL_12:
  if (*(_DWORD *)(v6 + 84)) {
    size_t v15 = v7;
  }
  else {
    size_t v15 = v7 + 1;
  }
  int v16 = (void *)(((v23 | v8) + v15) & v24);
  uint64_t v17 = (void *)(((v22 | v8) + v15) & v24);
  int v18 = v11(v16, 1, AssociatedTypeWitness);
  int v19 = v11(v17, 1, AssociatedTypeWitness);
  if (!v18)
  {
    if (!v19)
    {
      v21((uint64_t)v16, (uint64_t)v17, AssociatedTypeWitness);
      goto LABEL_21;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(v16, AssociatedTypeWitness);
    goto LABEL_20;
  }
  if (v19)
  {
LABEL_20:
    memcpy(v16, v17, v15);
    goto LABEL_21;
  }
  (*(void (**)(void *, void *, uint64_t))(v6 + 32))(v16, v17, AssociatedTypeWitness);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v16, 0, 1, AssociatedTypeWitness);
LABEL_21:
  *(void *)(((unint64_t)v16 + v15 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v17 + v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  return v25;
}

uint64_t getEnumTagSinglePayload for _ResolvedKeyframeTrackContent.Cubic(_DWORD *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v5 = v4;
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v4 + 64);
  if (v6) {
    uint64_t v8 = *(void *)(v4 + 64);
  }
  else {
    uint64_t v8 = v7 + 1;
  }
  if (!a2) {
    return 0;
  }
  if (v6 < a2)
  {
    unint64_t v9 = ((v8
         + ((v8
           + *(unsigned __int8 *)(v5 + 80)
           + ((v7 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
         + 7) & 0xFFFFFFFFFFFFFFF8)
       + 8;
    uint64_t v10 = v9 & 0xFFFFFFF8;
    if ((v9 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = a2 - v6 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v9);
        if (!v14) {
          break;
        }
        goto LABEL_21;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v9);
        if (v14) {
          goto LABEL_21;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x245FCFAECLL);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v9);
        if (!v14) {
          break;
        }
LABEL_21:
        int v15 = v14 - 1;
        if (v10)
        {
          int v15 = 0;
          LODWORD(v10) = *a1;
        }
        return v6 + (v10 | v15) + 1;
      default:
        break;
    }
  }
  if (!v6) {
    return 0;
  }
  uint64_t v17 = *(uint64_t (**)(_DWORD *))(v5 + 48);

  return v17(a1);
}

void storeEnumTagSinglePayload for _ResolvedKeyframeTrackContent.Cubic(_DWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = (v8 + v9) & ~v9;
  if (!v7) {
    ++v8;
  }
  size_t v11 = ((v8 + ((v8 + v9 + v10) & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v7 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v7;
    if (a2 <= v7)
    {
LABEL_16:
      switch(v14)
      {
        case 1:
          *((unsigned char *)a1 + v11) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_29;
        case 2:
          *(_WORD *)((char *)a1 + v11) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_29;
        case 3:
          goto LABEL_36;
        case 4:
          *(_DWORD *)((char *)a1 + v11) = 0;
          goto LABEL_28;
        default:
LABEL_28:
          if (a2)
          {
LABEL_29:
            int v18 = *(void (**)(_DWORD *, uint64_t))(v6 + 56);
            v18(a1, a2);
          }
          break;
      }
      return;
    }
  }
  else
  {
    if (((v8 + ((v8 + v9 + v10) & ~v9) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v12 = a3 - v7 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v7;
    if (a2 <= v7) {
      goto LABEL_16;
    }
  }
  if (v11) {
    int v16 = 1;
  }
  else {
    int v16 = v15;
  }
  if (v11)
  {
    int v17 = ~v7 + a2;
    bzero(a1, v11);
    *a1 = v17;
  }
  switch(v14)
  {
    case 1:
      *((unsigned char *)a1 + v11) = v16;
      break;
    case 2:
      *(_WORD *)((char *)a1 + v11) = v16;
      break;
    case 3:
LABEL_36:
      __break(1u);
      JUMPOUT(0x245FCFCF4);
    case 4:
      *(_DWORD *)((char *)a1 + v11) = v16;
      break;
    default:
      return;
  }
}

uint64_t type metadata completion function for _ResolvedKeyframeTrackContent.Segment()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for _ResolvedKeyframeTrackContent.Cubic();
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for _ResolvedKeyframeTrackContent._Spring();
      if (v3 <= 0x3F)
      {
        uint64_t result = type metadata accessor for _ResolvedKeyframeTrackContent.Linear();
        if (v4 <= 0x3F)
        {
          swift_initEnumMetadataMultiPayload();
          return 0;
        }
      }
    }
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for _ResolvedKeyframeTrackContent.Segment(void *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v5 = *(void *)(v4 + 64);
  int v6 = *(_DWORD *)(v4 + 80);
  uint64_t v7 = v6;
  if (*(_DWORD *)(v4 + 84)) {
    size_t v8 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  }
  else {
    size_t v8 = v5 + 1;
  }
  size_t v9 = v8 + v6;
  unint64_t v10 = ((v8
        + 7
        + ((v9 + ((v5 + v6) & ~(unint64_t)v6)) & ~(unint64_t)v6)) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v10 <= v5) {
    unint64_t v10 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  }
  unint64_t v11 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = (v8 + 7 + ((v6 + v11 + 24) & ~(unint64_t)v6)) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = v12 + 9;
  if (v12 + 9 > v10) {
    unint64_t v10 = v12 + 9;
  }
  unint64_t v14 = (v11 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = v14 + 33;
  if (v14 + 33 <= v10) {
    unint64_t v16 = v10;
  }
  else {
    unint64_t v16 = v14 + 33;
  }
  int v17 = v6 & 0x100000;
  BOOL v18 = v7 <= 7 && v17 == 0;
  if (v18 && v16 + 1 <= 0x18)
  {
    uint64_t v19 = AssociatedTypeWitness;
    unsigned int v20 = a2[v16];
    unsigned int v21 = v20 - 4;
    if (v20 >= 4)
    {
      if (v16 <= 3) {
        uint64_t v22 = v16;
      }
      else {
        uint64_t v22 = 4;
      }
      switch(v22)
      {
        case 1:
          int v23 = *a2;
          if (v16 < 4) {
            goto LABEL_29;
          }
          goto LABEL_31;
        case 2:
          int v23 = *(unsigned __int16 *)a2;
          if (v16 >= 4) {
            goto LABEL_31;
          }
          goto LABEL_29;
        case 3:
          int v23 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v16 < 4) {
            goto LABEL_29;
          }
          goto LABEL_31;
        case 4:
          int v23 = *(_DWORD *)a2;
          if (v16 < 4) {
LABEL_29:
          }
            unsigned int v20 = (v23 | (v21 << (8 * v16))) + 4;
          else {
LABEL_31:
          }
            unsigned int v20 = v23 + 4;
          break;
        default:
          break;
      }
    }
    uint64_t v56 = ~v7;
    switch(v20)
    {
      case 1u:
        unint64_t v50 = v12 + 9;
        uint64_t v51 = AssociatedTypeWitness;
        int v54 = *(_DWORD *)(v4 + 84);
        unsigned int v48 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v4 + 16);
        v48(a1, a2, AssociatedTypeWitness);
        __dst = (void *)(((unint64_t)a1 + v5 + v7) & v56);
        uint64_t v27 = (void *)((unint64_t)&a2[v5 + v7] & v56);
        unsigned int v49 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v4 + 48);
        if (v49(v27, 1, v51))
        {
          memcpy(__dst, v27, v8);
        }
        else
        {
          v48(__dst, (unsigned __int8 *)v27, v51);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v4 + 56))(__dst, 0, 1, v51);
        }
        uint64_t v39 = (void *)(((unint64_t)__dst + v9) & v56);
        int v40 = (void *)(((unint64_t)v27 + v9) & v56);
        if (v49(v40, 1, v51))
        {
          memcpy(v39, v40, v8);
        }
        else
        {
          v48(v39, (unsigned __int8 *)v40, v51);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v4 + 56))(v39, 0, 1, v51);
        }
        unint64_t v46 = v5 + 8;
        if (v54) {
          unint64_t v46 = v5 + 7;
        }
        *(void *)(((unint64_t)v39 + v46) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v40 + v46) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v25 = a1;
        unint64_t v47 = ((v8 + 7 + ((((v5 + v7) | v7) + v8) & v56)) & 0xFFFFFFFFFFFFFFF8) + 8;
        if (v47 <= v5) {
          unint64_t v47 = v5;
        }
        if (v50 > v47) {
          unint64_t v47 = v50;
        }
        if (v15 > v47) {
          unint64_t v47 = v15;
        }
        *((unsigned char *)a1 + v47) = 1;
        break;
      case 2u:
        int v55 = *(_DWORD *)(v4 + 84);
        __dsta = *(void (**)(void *, unsigned __int8 *, uint64_t))(v4 + 16);
        __dsta(a1, a2, AssociatedTypeWitness);
        unint64_t v28 = ((unint64_t)a1 + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v29 = (unint64_t)&a2[v5 + 7] & 0xFFFFFFFFFFFFFFF8;
        uint64_t v30 = *(void *)(v29 + 16);
        *(_OWORD *)unint64_t v28 = *(_OWORD *)v29;
        *(void *)(v28 + 16) = v30;
        uint64_t v31 = (void *)((v28 + v7 + 24) & v56);
        char v32 = (void *)((v29 + v7 + 24) & v56);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v4 + 48))(v32, 1, v19))
        {
          memcpy(v31, v32, v8);
        }
        else
        {
          __dsta(v31, (unsigned __int8 *)v32, v19);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v4 + 56))(v31, 0, 1, v19);
        }
        unint64_t v41 = v5 + 8;
        if (v55) {
          unint64_t v41 = v5 + 7;
        }
        unint64_t v42 = ((unint64_t)v31 + v41) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v43 = ((unint64_t)v32 + v41) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v44 = *(void *)v43;
        *(unsigned char *)(v42 + 8) = *(unsigned char *)(v43 + 8);
        *(void *)unint64_t v42 = v44;
        uint64_t v25 = a1;
        unint64_t v45 = ((v8 + 7 + ((((v5 + v7) | v7) + v8) & v56)) & 0xFFFFFFFFFFFFFFF8) + 8;
        if (v45 <= v5) {
          unint64_t v45 = v5;
        }
        if (v13 > v45) {
          unint64_t v45 = v13;
        }
        if (v15 > v45) {
          unint64_t v45 = v15;
        }
        *((unsigned char *)a1 + v45) = 2;
        break;
      case 3u:
        uint64_t v25 = a1;
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v4 + 16))(a1, a2, AssociatedTypeWitness);
        long long v33 = (void *)(((unint64_t)a1 + v5 + 7) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v34 = (void *)((unint64_t)&a2[v5 + 7] & 0xFFFFFFFFFFFFFFF8);
        *long long v33 = *v34;
        unint64_t v35 = ((unint64_t)v34 + 15) & 0xFFFFFFFFFFFFFFF8;
        long long v37 = *(_OWORD *)v35;
        long long v36 = *(_OWORD *)(v35 + 16);
        unint64_t v38 = ((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8;
        *(unsigned char *)(v38 + 32) = *(unsigned char *)(v35 + 32);
        *(_OWORD *)unint64_t v38 = v37;
        *(_OWORD *)(v38 + 16) = v36;
        *((unsigned char *)a1 + v16) = 3;
        break;
      default:
        uint64_t v25 = a1;
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v4 + 16))(a1, a2, AssociatedTypeWitness);
        *((unsigned char *)a1 + v16) = 0;
        break;
    }
  }
  else
  {
    uint64_t v24 = *(void *)a2;
    *a1 = *(void *)a2;
    uint64_t v25 = (void *)(v24 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
    swift_retain();
  }
  return v25;
}

uint64_t destroy for _ResolvedKeyframeTrackContent.Segment(unsigned __int8 *a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v4 = v3;
  unint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(unsigned __int8 *)(v3 + 80);
  if (*(_DWORD *)(v3 + 84)) {
    unint64_t v7 = *(void *)(v3 + 64);
  }
  else {
    unint64_t v7 = v5 + 1;
  }
  unint64_t v8 = ((v7 + 7 + ((v7 + v6 + ((v5 + v6) & ~v6)) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v8 <= v5) {
    unint64_t v8 = v5;
  }
  unint64_t v9 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = (v6 + v9 + 24) & ~v6;
  unint64_t v11 = ((v9 + 15) & 0xFFFFFFFFFFFFFFF8) + 33;
  if (((v7 + 7 + v10) & 0xFFFFFFFFFFFFFFF8) + 9 > v8) {
    unint64_t v8 = ((v7 + 7 + v10) & 0xFFFFFFFFFFFFFFF8) + 9;
  }
  if (v11 > v8) {
    unint64_t v8 = v11;
  }
  unsigned int v12 = a1[v8];
  unsigned int v13 = v12 - 4;
  if (v12 >= 4)
  {
    if (v8 <= 3) {
      uint64_t v14 = v8;
    }
    else {
      uint64_t v14 = 4;
    }
    switch(v14)
    {
      case 1:
        int v15 = *a1;
        goto LABEL_19;
      case 2:
        int v15 = *(unsigned __int16 *)a1;
        goto LABEL_19;
      case 3:
        int v15 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_19;
      case 4:
        int v15 = *(_DWORD *)a1;
LABEL_19:
        int v16 = (v15 | (v13 << (8 * v8))) + 4;
        unsigned int v12 = v15 + 4;
        if (v8 < 4) {
          unsigned int v12 = v16;
        }
        break;
      default:
        break;
    }
  }
  uint64_t v17 = ~v6;
  switch(v12)
  {
    case 1u:
      uint64_t v24 = *(void *)(AssociatedTypeWitness - 8);
      int v23 = *(void (**)(unsigned __int8 *, uint64_t))(v4 + 8);
      v23(a1, AssociatedTypeWitness);
      unint64_t v20 = (unint64_t)&a1[v5 + v6];
      unsigned int v21 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v24 + 48);
      if (!v21(v20 & v17, 1, AssociatedTypeWitness)) {
        v23((unsigned __int8 *)(v20 & v17), AssociatedTypeWitness);
      }
      unint64_t v22 = ((v20 | v6) + v7) & v17;
      uint64_t result = ((uint64_t (*)(unint64_t, uint64_t, uint64_t))v21)(v22, 1, AssociatedTypeWitness);
      if (!result) {
        goto LABEL_28;
      }
      break;
    case 2u:
      uint64_t v25 = *(void *)(AssociatedTypeWitness - 8);
      int v23 = *(void (**)(unsigned __int8 *, uint64_t))(v4 + 8);
      v23(a1, AssociatedTypeWitness);
      unint64_t v22 = (((unint64_t)&a1[v5 + 7] & 0xFFFFFFFFFFFFFFF8) + v6 + 24) & v17;
      uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v25 + 48))(v22, 1, AssociatedTypeWitness);
      if (!result)
      {
LABEL_28:
        uint64_t result = ((uint64_t (*)(unint64_t, uint64_t))v23)(v22, AssociatedTypeWitness);
      }
      break;
    default:
      BOOL v18 = *(uint64_t (**)(unsigned __int8 *, uint64_t))(v4 + 8);
      uint64_t result = v18(a1, AssociatedTypeWitness);
      break;
  }
  return result;
}

uint64_t initializeWithCopy for _ResolvedKeyframeTrackContent.Segment(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v5 = v4;
  unint64_t v6 = *(void *)(v4 + 64);
  uint64_t v7 = *(unsigned __int8 *)(v4 + 80);
  if (*(_DWORD *)(v4 + 84)) {
    size_t v8 = *(void *)(v4 + 64);
  }
  else {
    size_t v8 = v6 + 1;
  }
  size_t v9 = v8 + v7;
  unint64_t v10 = ((v8 + 7 + ((v8 + v7 + ((v6 + v7) & ~v7)) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v10 <= v6) {
    unint64_t v10 = v6;
  }
  unint64_t v11 = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = ((v11 + 15) & 0xFFFFFFFFFFFFFFF8) + 33;
  unint64_t v13 = (v8 + 7 + ((v7 + v11 + 24) & ~v7)) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = v13 + 9;
  if (v13 + 9 > v10) {
    unint64_t v10 = v13 + 9;
  }
  if (v12 <= v10) {
    unint64_t v15 = v10;
  }
  else {
    unint64_t v15 = v12;
  }
  unsigned int v16 = a2[v15];
  unsigned int v17 = v16 - 4;
  if (v16 >= 4)
  {
    if (v15 <= 3) {
      uint64_t v18 = v15;
    }
    else {
      uint64_t v18 = 4;
    }
    switch(v18)
    {
      case 1:
        int v19 = *a2;
        goto LABEL_20;
      case 2:
        int v19 = *(unsigned __int16 *)a2;
        goto LABEL_20;
      case 3:
        int v19 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_20;
      case 4:
        int v19 = *(_DWORD *)a2;
LABEL_20:
        int v20 = (v19 | (v17 << (8 * v15))) + 4;
        unsigned int v16 = v19 + 4;
        if (v15 < 4) {
          unsigned int v16 = v20;
        }
        break;
      default:
        break;
    }
  }
  uint64_t v21 = ~v7;
  switch(v16)
  {
    case 1u:
      unint64_t v48 = v14;
      int v52 = *(_DWORD *)(v5 + 84);
      unint64_t v54 = v12;
      unint64_t v46 = *(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v5 + 16);
      v46(a1, a2, AssociatedTypeWitness);
      unint64_t v50 = (void *)((v6 + v7 + a1) & v21);
      uint64_t v49 = ~v7;
      uint64_t v24 = (void *)((unint64_t)&a2[v6 + v7] & v21);
      unint64_t v47 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
      if (v47(v24, 1, AssociatedTypeWitness))
      {
        memcpy(v50, v24, v8);
      }
      else
      {
        v46((uint64_t)v50, (unsigned __int8 *)v24, AssociatedTypeWitness);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v50, 0, 1, AssociatedTypeWitness);
      }
      long long v36 = (void *)(((unint64_t)v50 + v9) & v49);
      long long v37 = (void *)(((unint64_t)v24 + v9) & v49);
      if (v47(v37, 1, AssociatedTypeWitness))
      {
        memcpy(v36, v37, v8);
      }
      else
      {
        v46((uint64_t)v36, (unsigned __int8 *)v37, AssociatedTypeWitness);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v36, 0, 1, AssociatedTypeWitness);
      }
      unint64_t v43 = v6 + 8;
      if (v52) {
        unint64_t v43 = v6 + 7;
      }
      *(void *)(((unint64_t)v36 + v43) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v37 + v43) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v44 = ((v8 + 7 + ((((v6 + v7) | v7) + v8) & v49)) & 0xFFFFFFFFFFFFFFF8) + 8;
      if (v44 <= v6) {
        unint64_t v44 = v6;
      }
      if (v48 > v44) {
        unint64_t v44 = v48;
      }
      if (v54 <= v44) {
        unint64_t v15 = v44;
      }
      else {
        unint64_t v15 = v54;
      }
      char v23 = 1;
      goto LABEL_54;
    case 2u:
      int v53 = *(_DWORD *)(v5 + 84);
      unint64_t v55 = v12;
      uint64_t v51 = *(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v5 + 16);
      v51(a1, a2, AssociatedTypeWitness);
      unint64_t v25 = (a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v26 = (unint64_t)&a2[v6 + 7] & 0xFFFFFFFFFFFFFFF8;
      uint64_t v27 = *(void *)(v26 + 16);
      *(_OWORD *)unint64_t v25 = *(_OWORD *)v26;
      *(void *)(v25 + 16) = v27;
      unint64_t v28 = (void *)((v25 + v7 + 24) & v21);
      unint64_t v29 = (void *)((v26 + v7 + 24) & v21);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v5 + 48))(v29, 1, AssociatedTypeWitness))
      {
        memcpy(v28, v29, v8);
      }
      else
      {
        v51((uint64_t)v28, (unsigned __int8 *)v29, AssociatedTypeWitness);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v28, 0, 1, AssociatedTypeWitness);
      }
      unint64_t v38 = v6 + 8;
      if (v53) {
        unint64_t v38 = v6 + 7;
      }
      unint64_t v39 = ((unint64_t)v28 + v38) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v40 = ((unint64_t)v29 + v38) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v41 = *(void *)v40;
      *(unsigned char *)(v39 + 8) = *(unsigned char *)(v40 + 8);
      *(void *)unint64_t v39 = v41;
      unint64_t v42 = ((v8 + 7 + ((((v6 + v7) | v7) + v8) & v21)) & 0xFFFFFFFFFFFFFFF8) + 8;
      if (v42 <= v6) {
        unint64_t v42 = v6;
      }
      if (v14 > v42) {
        unint64_t v42 = v14;
      }
      if (v55 <= v42) {
        unint64_t v15 = v42;
      }
      else {
        unint64_t v15 = v55;
      }
      char v23 = 2;
LABEL_54:
      uint64_t v22 = a1;
      break;
    case 3u:
      uint64_t v22 = a1;
      (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      uint64_t v30 = (void *)((unint64_t)&a2[v6 + 7] & 0xFFFFFFFFFFFFFFF8);
      uint64_t v31 = (void *)((a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v31 = *v30;
      unint64_t v32 = ((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8;
      long long v34 = *(_OWORD *)v32;
      long long v33 = *(_OWORD *)(v32 + 16);
      unint64_t v35 = ((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8;
      *(unsigned char *)(v35 + 32) = *(unsigned char *)(v32 + 32);
      *(_OWORD *)unint64_t v35 = v34;
      *(_OWORD *)(v35 + 16) = v33;
      char v23 = 3;
      break;
    default:
      uint64_t v22 = a1;
      (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      char v23 = 0;
      break;
  }
  *(unsigned char *)(v22 + v15) = v23;
  return v22;
}

unsigned __int8 *assignWithCopy for _ResolvedKeyframeTrackContent.Segment(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 != a2)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
    unint64_t v6 = *(void *)(v5 + 64);
    uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
    uint64_t v73 = v6 + v7;
    int v70 = *(_DWORD *)(v5 + 84);
    if (v70) {
      size_t v8 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
    }
    else {
      size_t v8 = v6 + 1;
    }
    size_t v68 = v8 + v7;
    size_t v9 = v8 + 7;
    unint64_t v10 = ((v8 + 7 + ((v8 + v7 + ((v6 + v7) & ~v7)) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 8;
    if (v10 <= v6) {
      unint64_t v10 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
    }
    unint64_t v11 = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v12 = ((v11 + 15) & 0xFFFFFFFFFFFFFFF8) + 33;
    unint64_t v13 = ((v9 + ((v7 + v11 + 24) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 9;
    if (v13 > v10) {
      unint64_t v10 = ((v9 + ((v7 + v11 + 24) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 9;
    }
    if (v12 <= v10) {
      unint64_t v14 = v10;
    }
    else {
      unint64_t v14 = ((v11 + 15) & 0xFFFFFFFFFFFFFFF8) + 33;
    }
    unsigned int v15 = a1[v14];
    unsigned int v16 = v15 - 4;
    if (v15 >= 4)
    {
      if (v14 <= 3) {
        uint64_t v17 = v14;
      }
      else {
        uint64_t v17 = 4;
      }
      switch(v17)
      {
        case 1:
          int v18 = *a1;
          if (v14 < 4) {
            goto LABEL_20;
          }
          goto LABEL_24;
        case 2:
          int v18 = *(unsigned __int16 *)a1;
          if (v14 < 4) {
            goto LABEL_20;
          }
          goto LABEL_24;
        case 3:
          int v18 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v14 < 4) {
            goto LABEL_20;
          }
          goto LABEL_24;
        case 4:
          int v18 = *(_DWORD *)a1;
          if (v14 < 4) {
LABEL_20:
          }
            unsigned int v15 = (v18 | (v16 << (8 * v14))) + 4;
          else {
LABEL_24:
          }
            unsigned int v15 = v18 + 4;
          break;
        default:
          break;
      }
    }
    uint64_t v75 = ~v7;
    size_t __n = v8;
    uint64_t v72 = AssociatedTypeWitness;
    size_t v69 = v8 + 7;
    switch(v15)
    {
      case 1u:
        unint64_t v64 = v12;
        uint64_t v20 = AssociatedTypeWitness;
        uint64_t v62 = *(void (**)(unsigned __int8 *, uint64_t))(v5 + 8);
        v62(a1, AssociatedTypeWitness);
        unint64_t v21 = (unint64_t)&a1[v73] & ~v7;
        uint64_t v63 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48);
        if (!v63(v21, 1, v20)) {
          v62((unsigned __int8 *)v21, v20);
        }
        unint64_t v22 = (v68 + v21) & v75;
        if (!v63(v22, 1, v20)) {
          v62((unsigned __int8 *)v22, v72);
        }
        unint64_t v23 = v6;
        unint64_t v12 = v64;
        size_t v9 = v8 + 7;
        uint64_t v19 = ~v7;
        if (!v70) {
          goto LABEL_36;
        }
        break;
      case 2u:
        uint64_t v24 = AssociatedTypeWitness;
        uint64_t v65 = *(void (**)(unsigned __int8 *, uint64_t))(v5 + 8);
        v65(a1, AssociatedTypeWitness);
        if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))((((unint64_t)&a1[v6 + 7] & 0xFFFFFFFFFFFFFFF8) + v7 + 24) & ~v7, 1, v24))v65((unsigned __int8 *)((((unint64_t)&a1[v6 + 7] & 0xFFFFFFFFFFFFFFF8) + v7 + 24) & ~v7), v72); {
        unint64_t v23 = v6;
        }
        size_t v9 = v69;
        size_t v8 = __n;
        uint64_t v19 = ~v7;
        if (!v70) {
          goto LABEL_36;
        }
        break;
      default:
        (*(void (**)(unsigned __int8 *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
        uint64_t v19 = ~v7;
LABEL_36:
        unint64_t v23 = v8;
        break;
    }
    unint64_t v25 = ((v9 + (((v73 | v7) + v23) & v19)) & 0xFFFFFFFFFFFFFFF8) + 8;
    if (v25 <= v6) {
      unint64_t v25 = v6;
    }
    if (v13 > v25) {
      unint64_t v25 = v13;
    }
    if (v12 > v25) {
      unint64_t v25 = v12;
    }
    unsigned int v26 = a2[v25];
    unsigned int v27 = v26 - 4;
    if (v26 >= 4)
    {
      if (v14 <= 3) {
        uint64_t v28 = v14;
      }
      else {
        uint64_t v28 = 4;
      }
      switch(v28)
      {
        case 1:
          int v29 = *a2;
          if (v14 < 4) {
            goto LABEL_51;
          }
          goto LABEL_55;
        case 2:
          int v29 = *(unsigned __int16 *)a2;
          if (v14 < 4) {
            goto LABEL_51;
          }
          goto LABEL_55;
        case 3:
          int v29 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v14 < 4) {
            goto LABEL_51;
          }
          goto LABEL_55;
        case 4:
          int v29 = *(_DWORD *)a2;
          if (v14 < 4) {
LABEL_51:
          }
            unsigned int v26 = (v29 | (v27 << (8 * v14))) + 4;
          else {
LABEL_55:
          }
            unsigned int v26 = v29 + 4;
          break;
        default:
          break;
      }
    }
    switch(v26)
    {
      case 1u:
        uint64_t v66 = v73 | v7;
        uint64_t v30 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 16);
        uint64_t v31 = v19;
        v30(a1, a2, v72);
        unint64_t v32 = (void *)((unint64_t)&a1[v73] & v31);
        long long v33 = (void *)((unint64_t)&a2[v73] & v31);
        char v74 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
        if (v74(v33, 1, v72))
        {
          memcpy(v32, v33, __n);
        }
        else
        {
          v30((unsigned __int8 *)v32, (unsigned __int8 *)v33, v72);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v32, 0, 1, v72);
        }
        unint64_t v54 = (void *)(((unint64_t)v32 + v68) & v75);
        unint64_t v55 = (void *)(((unint64_t)v33 + v68) & v75);
        if (v74(v55, 1, v72))
        {
          size_t v56 = __n;
          memcpy(v54, v55, __n);
          unint64_t v58 = v13;
          size_t v57 = v69;
          unint64_t v59 = v6 + 7;
        }
        else
        {
          v30((unsigned __int8 *)v54, (unsigned __int8 *)v55, v72);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v54, 0, 1, v72);
          unint64_t v58 = v13;
          size_t v57 = v69;
          unint64_t v59 = v6 + 7;
          size_t v56 = __n;
        }
        unint64_t v60 = v6 + 8;
        if (v70) {
          unint64_t v60 = v59;
        }
        *(void *)(((unint64_t)v54 + v60) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v55 + v60) & 0xFFFFFFFFFFFFFFF8);
        unint64_t v52 = ((v57 + ((v66 + v56) & v75)) & 0xFFFFFFFFFFFFFFF8) + 8;
        if (v52 <= v6) {
          unint64_t v52 = v6;
        }
        if (v58 > v52) {
          unint64_t v52 = v58;
        }
        if (v12 > v52) {
          unint64_t v52 = v12;
        }
        char v53 = 1;
        goto LABEL_86;
      case 2u:
        uint64_t v67 = v73 | v7;
        long long v34 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 16);
        uint64_t v35 = v19;
        v34(a1, a2, v72);
        unint64_t v36 = (unint64_t)&a1[v6 + 7] & 0xFFFFFFFFFFFFFFF8;
        unint64_t v37 = (unint64_t)&a2[v6 + 7] & 0xFFFFFFFFFFFFFFF8;
        uint64_t v38 = *(void *)(v37 + 16);
        *(_OWORD *)unint64_t v36 = *(_OWORD *)v37;
        *(void *)(v36 + 16) = v38;
        unint64_t v39 = (void *)((v36 + v7 + 24) & v35);
        unint64_t v40 = (void *)((v37 + v7 + 24) & v35);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v5 + 48))(v40, 1, v72))
        {
          size_t v41 = __n;
          memcpy(v39, v40, __n);
        }
        else
        {
          v34((unsigned __int8 *)v39, (unsigned __int8 *)v40, v72);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v39, 0, 1, v72);
          size_t v41 = __n;
        }
        unint64_t v48 = v6 + 8;
        if (v70) {
          unint64_t v48 = v6 + 7;
        }
        unint64_t v49 = ((unint64_t)v39 + v48) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v50 = ((unint64_t)v40 + v48) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v51 = *(void *)v50;
        *(unsigned char *)(v49 + 8) = *(unsigned char *)(v50 + 8);
        *(void *)unint64_t v49 = v51;
        unint64_t v52 = ((v69 + ((v67 + v41) & v75)) & 0xFFFFFFFFFFFFFFF8) + 8;
        if (v52 <= v6) {
          unint64_t v52 = v6;
        }
        if (v13 > v52) {
          unint64_t v52 = v13;
        }
        if (v12 > v52) {
          unint64_t v52 = v12;
        }
        char v53 = 2;
LABEL_86:
        a1[v52] = v53;
        break;
      case 3u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, v72);
        unint64_t v42 = (void *)((unint64_t)&a1[v6 + 7] & 0xFFFFFFFFFFFFFFF8);
        unint64_t v43 = (void *)((unint64_t)&a2[v6 + 7] & 0xFFFFFFFFFFFFFFF8);
        void *v42 = *v43;
        unint64_t v44 = ((unint64_t)v43 + 15) & 0xFFFFFFFFFFFFFFF8;
        long long v46 = *(_OWORD *)v44;
        long long v45 = *(_OWORD *)(v44 + 16);
        unint64_t v47 = ((unint64_t)v42 + 15) & 0xFFFFFFFFFFFFFFF8;
        *(unsigned char *)(v47 + 32) = *(unsigned char *)(v44 + 32);
        *(_OWORD *)unint64_t v47 = v46;
        *(_OWORD *)(v47 + 16) = v45;
        a1[v14] = 3;
        break;
      default:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, v72);
        a1[v14] = 0;
        break;
    }
  }
  return a1;
}

uint64_t initializeWithTake for _ResolvedKeyframeTrackContent.Segment(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v5 = v4;
  unint64_t v6 = *(void *)(v4 + 64);
  uint64_t v7 = *(unsigned __int8 *)(v4 + 80);
  if (*(_DWORD *)(v4 + 84)) {
    size_t v8 = *(void *)(v4 + 64);
  }
  else {
    size_t v8 = v6 + 1;
  }
  size_t v9 = v8 + v7;
  unint64_t v10 = ((v8 + 7 + ((v8 + v7 + ((v6 + v7) & ~v7)) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v10 <= v6) {
    unint64_t v10 = v6;
  }
  unint64_t v11 = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = ((v11 + 15) & 0xFFFFFFFFFFFFFFF8) + 33;
  unint64_t v13 = (v8 + 7 + ((v7 + v11 + 24) & ~v7)) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = v13 + 9;
  if (v13 + 9 > v10) {
    unint64_t v10 = v13 + 9;
  }
  if (v12 <= v10) {
    unint64_t v15 = v10;
  }
  else {
    unint64_t v15 = v12;
  }
  unsigned int v16 = a2[v15];
  unsigned int v17 = v16 - 4;
  if (v16 >= 4)
  {
    if (v15 <= 3) {
      uint64_t v18 = v15;
    }
    else {
      uint64_t v18 = 4;
    }
    switch(v18)
    {
      case 1:
        int v19 = *a2;
        goto LABEL_20;
      case 2:
        int v19 = *(unsigned __int16 *)a2;
        goto LABEL_20;
      case 3:
        int v19 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_20;
      case 4:
        int v19 = *(_DWORD *)a2;
LABEL_20:
        int v20 = (v19 | (v17 << (8 * v15))) + 4;
        unsigned int v16 = v19 + 4;
        if (v15 < 4) {
          unsigned int v16 = v20;
        }
        break;
      default:
        break;
    }
  }
  uint64_t v21 = ~v7;
  switch(v16)
  {
    case 1u:
      unint64_t v48 = v14;
      int v52 = *(_DWORD *)(v5 + 84);
      unint64_t v54 = v12;
      long long v46 = *(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v5 + 32);
      v46(a1, a2, AssociatedTypeWitness);
      unint64_t v50 = (void *)((v6 + v7 + a1) & v21);
      uint64_t v49 = ~v7;
      uint64_t v24 = (void *)((unint64_t)&a2[v6 + v7] & v21);
      unint64_t v47 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
      if (v47(v24, 1, AssociatedTypeWitness))
      {
        memcpy(v50, v24, v8);
      }
      else
      {
        v46((uint64_t)v50, (unsigned __int8 *)v24, AssociatedTypeWitness);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v50, 0, 1, AssociatedTypeWitness);
      }
      unint64_t v36 = (void *)(((unint64_t)v50 + v9) & v49);
      unint64_t v37 = (void *)(((unint64_t)v24 + v9) & v49);
      if (v47(v37, 1, AssociatedTypeWitness))
      {
        memcpy(v36, v37, v8);
      }
      else
      {
        v46((uint64_t)v36, (unsigned __int8 *)v37, AssociatedTypeWitness);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v36, 0, 1, AssociatedTypeWitness);
      }
      unint64_t v43 = v6 + 8;
      if (v52) {
        unint64_t v43 = v6 + 7;
      }
      *(void *)(((unint64_t)v36 + v43) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v37 + v43) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v44 = ((v8 + 7 + ((((v6 + v7) | v7) + v8) & v49)) & 0xFFFFFFFFFFFFFFF8) + 8;
      if (v44 <= v6) {
        unint64_t v44 = v6;
      }
      if (v48 > v44) {
        unint64_t v44 = v48;
      }
      if (v54 <= v44) {
        unint64_t v15 = v44;
      }
      else {
        unint64_t v15 = v54;
      }
      char v23 = 1;
      goto LABEL_54;
    case 2u:
      int v53 = *(_DWORD *)(v5 + 84);
      unint64_t v55 = v12;
      uint64_t v51 = *(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v5 + 32);
      v51(a1, a2, AssociatedTypeWitness);
      unint64_t v25 = (a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v26 = (unint64_t)&a2[v6 + 7] & 0xFFFFFFFFFFFFFFF8;
      uint64_t v27 = *(void *)(v26 + 16);
      *(_OWORD *)unint64_t v25 = *(_OWORD *)v26;
      *(void *)(v25 + 16) = v27;
      uint64_t v28 = (void *)((v25 + v7 + 24) & v21);
      int v29 = (void *)((v26 + v7 + 24) & v21);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v5 + 48))(v29, 1, AssociatedTypeWitness))
      {
        memcpy(v28, v29, v8);
      }
      else
      {
        v51((uint64_t)v28, (unsigned __int8 *)v29, AssociatedTypeWitness);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v28, 0, 1, AssociatedTypeWitness);
      }
      unint64_t v38 = v6 + 8;
      if (v53) {
        unint64_t v38 = v6 + 7;
      }
      unint64_t v39 = ((unint64_t)v28 + v38) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v40 = ((unint64_t)v29 + v38) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v41 = *(void *)v40;
      *(unsigned char *)(v39 + 8) = *(unsigned char *)(v40 + 8);
      *(void *)unint64_t v39 = v41;
      unint64_t v42 = ((v8 + 7 + ((((v6 + v7) | v7) + v8) & v21)) & 0xFFFFFFFFFFFFFFF8) + 8;
      if (v42 <= v6) {
        unint64_t v42 = v6;
      }
      if (v14 > v42) {
        unint64_t v42 = v14;
      }
      if (v55 <= v42) {
        unint64_t v15 = v42;
      }
      else {
        unint64_t v15 = v55;
      }
      char v23 = 2;
LABEL_54:
      uint64_t v22 = a1;
      break;
    case 3u:
      uint64_t v22 = a1;
      (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
      uint64_t v30 = (void *)((unint64_t)&a2[v6 + 7] & 0xFFFFFFFFFFFFFFF8);
      uint64_t v31 = (void *)((a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v31 = *v30;
      unint64_t v32 = ((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8;
      long long v34 = *(_OWORD *)v32;
      long long v33 = *(_OWORD *)(v32 + 16);
      unint64_t v35 = ((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8;
      *(unsigned char *)(v35 + 32) = *(unsigned char *)(v32 + 32);
      *(_OWORD *)unint64_t v35 = v34;
      *(_OWORD *)(v35 + 16) = v33;
      char v23 = 3;
      break;
    default:
      uint64_t v22 = a1;
      (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
      char v23 = 0;
      break;
  }
  *(unsigned char *)(v22 + v15) = v23;
  return v22;
}

unsigned __int8 *assignWithTake for _ResolvedKeyframeTrackContent.Segment(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 != a2)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
    unint64_t v6 = *(void *)(v5 + 64);
    uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
    uint64_t v73 = v6 + v7;
    int v70 = *(_DWORD *)(v5 + 84);
    if (v70) {
      size_t v8 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
    }
    else {
      size_t v8 = v6 + 1;
    }
    size_t v68 = v8 + v7;
    size_t v9 = v8 + 7;
    unint64_t v10 = ((v8 + 7 + ((v8 + v7 + ((v6 + v7) & ~v7)) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 8;
    if (v10 <= v6) {
      unint64_t v10 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
    }
    unint64_t v11 = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v12 = ((v11 + 15) & 0xFFFFFFFFFFFFFFF8) + 33;
    unint64_t v13 = ((v9 + ((v7 + v11 + 24) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 9;
    if (v13 > v10) {
      unint64_t v10 = ((v9 + ((v7 + v11 + 24) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 9;
    }
    if (v12 <= v10) {
      unint64_t v14 = v10;
    }
    else {
      unint64_t v14 = ((v11 + 15) & 0xFFFFFFFFFFFFFFF8) + 33;
    }
    unsigned int v15 = a1[v14];
    unsigned int v16 = v15 - 4;
    if (v15 >= 4)
    {
      if (v14 <= 3) {
        uint64_t v17 = v14;
      }
      else {
        uint64_t v17 = 4;
      }
      switch(v17)
      {
        case 1:
          int v18 = *a1;
          if (v14 < 4) {
            goto LABEL_20;
          }
          goto LABEL_24;
        case 2:
          int v18 = *(unsigned __int16 *)a1;
          if (v14 < 4) {
            goto LABEL_20;
          }
          goto LABEL_24;
        case 3:
          int v18 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v14 < 4) {
            goto LABEL_20;
          }
          goto LABEL_24;
        case 4:
          int v18 = *(_DWORD *)a1;
          if (v14 < 4) {
LABEL_20:
          }
            unsigned int v15 = (v18 | (v16 << (8 * v14))) + 4;
          else {
LABEL_24:
          }
            unsigned int v15 = v18 + 4;
          break;
        default:
          break;
      }
    }
    uint64_t v75 = ~v7;
    size_t __n = v8;
    uint64_t v72 = AssociatedTypeWitness;
    size_t v69 = v8 + 7;
    switch(v15)
    {
      case 1u:
        unint64_t v64 = v12;
        uint64_t v20 = AssociatedTypeWitness;
        uint64_t v62 = *(void (**)(unsigned __int8 *, uint64_t))(v5 + 8);
        v62(a1, AssociatedTypeWitness);
        unint64_t v21 = (unint64_t)&a1[v73] & ~v7;
        uint64_t v63 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48);
        if (!v63(v21, 1, v20)) {
          v62((unsigned __int8 *)v21, v20);
        }
        unint64_t v22 = (v68 + v21) & v75;
        if (!v63(v22, 1, v20)) {
          v62((unsigned __int8 *)v22, v72);
        }
        unint64_t v23 = v6;
        unint64_t v12 = v64;
        size_t v9 = v8 + 7;
        uint64_t v19 = ~v7;
        if (!v70) {
          goto LABEL_36;
        }
        break;
      case 2u:
        uint64_t v24 = AssociatedTypeWitness;
        uint64_t v65 = *(void (**)(unsigned __int8 *, uint64_t))(v5 + 8);
        v65(a1, AssociatedTypeWitness);
        if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))((((unint64_t)&a1[v6 + 7] & 0xFFFFFFFFFFFFFFF8) + v7 + 24) & ~v7, 1, v24))v65((unsigned __int8 *)((((unint64_t)&a1[v6 + 7] & 0xFFFFFFFFFFFFFFF8) + v7 + 24) & ~v7), v72); {
        unint64_t v23 = v6;
        }
        size_t v9 = v69;
        size_t v8 = __n;
        uint64_t v19 = ~v7;
        if (!v70) {
          goto LABEL_36;
        }
        break;
      default:
        (*(void (**)(unsigned __int8 *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
        uint64_t v19 = ~v7;
LABEL_36:
        unint64_t v23 = v8;
        break;
    }
    unint64_t v25 = ((v9 + (((v73 | v7) + v23) & v19)) & 0xFFFFFFFFFFFFFFF8) + 8;
    if (v25 <= v6) {
      unint64_t v25 = v6;
    }
    if (v13 > v25) {
      unint64_t v25 = v13;
    }
    if (v12 > v25) {
      unint64_t v25 = v12;
    }
    unsigned int v26 = a2[v25];
    unsigned int v27 = v26 - 4;
    if (v26 >= 4)
    {
      if (v14 <= 3) {
        uint64_t v28 = v14;
      }
      else {
        uint64_t v28 = 4;
      }
      switch(v28)
      {
        case 1:
          int v29 = *a2;
          if (v14 < 4) {
            goto LABEL_51;
          }
          goto LABEL_55;
        case 2:
          int v29 = *(unsigned __int16 *)a2;
          if (v14 < 4) {
            goto LABEL_51;
          }
          goto LABEL_55;
        case 3:
          int v29 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v14 < 4) {
            goto LABEL_51;
          }
          goto LABEL_55;
        case 4:
          int v29 = *(_DWORD *)a2;
          if (v14 < 4) {
LABEL_51:
          }
            unsigned int v26 = (v29 | (v27 << (8 * v14))) + 4;
          else {
LABEL_55:
          }
            unsigned int v26 = v29 + 4;
          break;
        default:
          break;
      }
    }
    switch(v26)
    {
      case 1u:
        uint64_t v66 = v73 | v7;
        uint64_t v30 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 32);
        uint64_t v31 = v19;
        v30(a1, a2, v72);
        unint64_t v32 = (void *)((unint64_t)&a1[v73] & v31);
        long long v33 = (void *)((unint64_t)&a2[v73] & v31);
        char v74 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
        if (v74(v33, 1, v72))
        {
          memcpy(v32, v33, __n);
        }
        else
        {
          v30((unsigned __int8 *)v32, (unsigned __int8 *)v33, v72);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v32, 0, 1, v72);
        }
        unint64_t v54 = (void *)(((unint64_t)v32 + v68) & v75);
        unint64_t v55 = (void *)(((unint64_t)v33 + v68) & v75);
        if (v74(v55, 1, v72))
        {
          size_t v56 = __n;
          memcpy(v54, v55, __n);
          unint64_t v58 = v13;
          size_t v57 = v69;
          unint64_t v59 = v6 + 7;
        }
        else
        {
          v30((unsigned __int8 *)v54, (unsigned __int8 *)v55, v72);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v54, 0, 1, v72);
          unint64_t v58 = v13;
          size_t v57 = v69;
          unint64_t v59 = v6 + 7;
          size_t v56 = __n;
        }
        unint64_t v60 = v6 + 8;
        if (v70) {
          unint64_t v60 = v59;
        }
        *(void *)(((unint64_t)v54 + v60) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v55 + v60) & 0xFFFFFFFFFFFFFFF8);
        unint64_t v52 = ((v57 + ((v66 + v56) & v75)) & 0xFFFFFFFFFFFFFFF8) + 8;
        if (v52 <= v6) {
          unint64_t v52 = v6;
        }
        if (v58 > v52) {
          unint64_t v52 = v58;
        }
        if (v12 > v52) {
          unint64_t v52 = v12;
        }
        char v53 = 1;
        goto LABEL_86;
      case 2u:
        uint64_t v67 = v73 | v7;
        long long v34 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 32);
        uint64_t v35 = v19;
        v34(a1, a2, v72);
        unint64_t v36 = (unint64_t)&a1[v6 + 7] & 0xFFFFFFFFFFFFFFF8;
        unint64_t v37 = (unint64_t)&a2[v6 + 7] & 0xFFFFFFFFFFFFFFF8;
        uint64_t v38 = *(void *)(v37 + 16);
        *(_OWORD *)unint64_t v36 = *(_OWORD *)v37;
        *(void *)(v36 + 16) = v38;
        unint64_t v39 = (void *)((v36 + v7 + 24) & v35);
        unint64_t v40 = (void *)((v37 + v7 + 24) & v35);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v5 + 48))(v40, 1, v72))
        {
          size_t v41 = __n;
          memcpy(v39, v40, __n);
        }
        else
        {
          v34((unsigned __int8 *)v39, (unsigned __int8 *)v40, v72);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v39, 0, 1, v72);
          size_t v41 = __n;
        }
        unint64_t v48 = v6 + 8;
        if (v70) {
          unint64_t v48 = v6 + 7;
        }
        unint64_t v49 = ((unint64_t)v39 + v48) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v50 = ((unint64_t)v40 + v48) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v51 = *(void *)v50;
        *(unsigned char *)(v49 + 8) = *(unsigned char *)(v50 + 8);
        *(void *)unint64_t v49 = v51;
        unint64_t v52 = ((v69 + ((v67 + v41) & v75)) & 0xFFFFFFFFFFFFFFF8) + 8;
        if (v52 <= v6) {
          unint64_t v52 = v6;
        }
        if (v13 > v52) {
          unint64_t v52 = v13;
        }
        if (v12 > v52) {
          unint64_t v52 = v12;
        }
        char v53 = 2;
LABEL_86:
        a1[v52] = v53;
        break;
      case 3u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, v72);
        unint64_t v42 = (void *)((unint64_t)&a1[v6 + 7] & 0xFFFFFFFFFFFFFFF8);
        unint64_t v43 = (void *)((unint64_t)&a2[v6 + 7] & 0xFFFFFFFFFFFFFFF8);
        void *v42 = *v43;
        unint64_t v44 = ((unint64_t)v43 + 15) & 0xFFFFFFFFFFFFFFF8;
        long long v46 = *(_OWORD *)v44;
        long long v45 = *(_OWORD *)(v44 + 16);
        unint64_t v47 = ((unint64_t)v42 + 15) & 0xFFFFFFFFFFFFFFF8;
        *(unsigned char *)(v47 + 32) = *(unsigned char *)(v44 + 32);
        *(_OWORD *)unint64_t v47 = v46;
        *(_OWORD *)(v47 + 16) = v45;
        a1[v14] = 3;
        break;
      default:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, v72);
        a1[v14] = 0;
        break;
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for _ResolvedKeyframeTrackContent.Segment(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  unint64_t v7 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = (v7 + v6 + 24) & ~v6;
  unint64_t v9 = ((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 33;
  if (*(_DWORD *)(v4 + 84)) {
    unint64_t v10 = v5;
  }
  else {
    unint64_t v10 = v5 + 1;
  }
  unint64_t v11 = ((v10 + 7 + ((v10 + v6 + ((v5 + v6) & ~v6)) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v11 > v5) {
    unint64_t v5 = v11;
  }
  if (((v10 + 7 + v8) & 0xFFFFFFFFFFFFFFF8) + 9 > v5) {
    unint64_t v5 = ((v10 + 7 + v8) & 0xFFFFFFFFFFFFFFF8) + 9;
  }
  if (v9 <= v5) {
    unint64_t v9 = v5;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_29;
  }
  unint64_t v12 = v9 + 1;
  char v13 = 8 * (v9 + 1);
  if ((v9 + 1) <= 3)
  {
    unsigned int v16 = ((a2 + ~(-1 << v13) - 252) >> v13) + 1;
    if (HIWORD(v16))
    {
      int v14 = *(_DWORD *)((char *)a1 + v12);
      if (!v14) {
        goto LABEL_29;
      }
      goto LABEL_21;
    }
    if (v16 > 0xFF)
    {
      int v14 = *(unsigned __int16 *)((char *)a1 + v12);
      if (!*(unsigned __int16 *)((char *)a1 + v12)) {
        goto LABEL_29;
      }
      goto LABEL_21;
    }
    if (v16 < 2)
    {
LABEL_29:
      unsigned int v18 = *((unsigned __int8 *)a1 + v9);
      if (v18 >= 4) {
        return (v18 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v14 = *((unsigned __int8 *)a1 + v12);
  if (!*((unsigned char *)a1 + v12)) {
    goto LABEL_29;
  }
LABEL_21:
  int v17 = (v14 - 1) << v13;
  if (v12 > 3) {
    int v17 = 0;
  }
  if (v12)
  {
    if (v12 > 3) {
      LODWORD(v12) = 4;
    }
    switch((int)v12)
    {
      case 2:
        LODWORD(v12) = *a1;
        break;
      case 3:
        LODWORD(v12) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v12) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v12) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v12 | v17) + 253;
}

void storeEnumTagSinglePayload for _ResolvedKeyframeTrackContent.Segment(unsigned char *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  unint64_t v9 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = (v9 + v8 + 24) & ~v8;
  unint64_t v11 = ((v9 + 15) & 0xFFFFFFFFFFFFFFF8) + 33;
  if (*(_DWORD *)(v6 + 84)) {
    unint64_t v12 = v7;
  }
  else {
    unint64_t v12 = v7 + 1;
  }
  unint64_t v13 = ((v12 + 7 + ((v12 + v8 + ((v7 + v8) & ~v8)) & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v13 > v7) {
    unint64_t v7 = v13;
  }
  if (((v12 + 7 + v10) & 0xFFFFFFFFFFFFFFF8) + 9 > v7) {
    unint64_t v7 = ((v12 + 7 + v10) & 0xFFFFFFFFFFFFFFF8) + 9;
  }
  if (v11 > v7) {
    unint64_t v7 = v11;
  }
  size_t v14 = v7 + 1;
  if (a3 < 0xFD)
  {
    int v15 = 0;
  }
  else if (v14 <= 3)
  {
    unsigned int v18 = ((a3 + ~(-1 << (8 * v14)) - 252) >> (8 * v14)) + 1;
    if (HIWORD(v18))
    {
      int v15 = 4;
    }
    else if (v18 >= 0x100)
    {
      int v15 = 2;
    }
    else
    {
      int v15 = v18 > 1;
    }
  }
  else
  {
    int v15 = 1;
  }
  if (a2 > 0xFC)
  {
    unsigned int v16 = a2 - 253;
    if (v14 < 4)
    {
      int v17 = (v16 >> (8 * v14)) + 1;
      if (v7 != -1)
      {
        int v19 = v16 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v19;
          a1[2] = BYTE2(v19);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v19;
        }
        else
        {
          *a1 = v19;
        }
      }
    }
    else
    {
      bzero(a1, v7 + 1);
      *(_DWORD *)a1 = v16;
      int v17 = 1;
    }
    switch(v15)
    {
      case 1:
        a1[v14] = v17;
        break;
      case 2:
        *(_WORD *)&a1[v14] = v17;
        break;
      case 3:
LABEL_41:
        __break(1u);
        JUMPOUT(0x245FD28F4);
      case 4:
        *(_DWORD *)&a1[v14] = v17;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v15)
    {
      case 1:
        a1[v14] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_30;
      case 2:
        *(_WORD *)&a1[v14] = 0;
        goto LABEL_29;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_30;
      default:
LABEL_29:
        if (a2) {
LABEL_30:
        }
          a1[v7] = -(char)a2;
        break;
    }
  }
}

uint64_t getEnumTag for _ResolvedKeyframeTrackContent.Segment(unsigned __int8 *a1)
{
  uint64_t v2 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v3 = *(void *)(v2 + 64);
  uint64_t v4 = *(unsigned __int8 *)(v2 + 80);
  if (*(_DWORD *)(v2 + 84)) {
    unint64_t v5 = v3;
  }
  else {
    unint64_t v5 = v3 + 1;
  }
  unint64_t v6 = (v5 + v4 + ((v3 + v4) & ~v4)) & ~v4;
  unint64_t v7 = v5 + 7;
  unint64_t v8 = ((v7 + v6) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v8 <= v3) {
    unint64_t v8 = v3;
  }
  unint64_t v9 = (v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = (v9 + v4 + 24) & ~v4;
  unint64_t v11 = ((v9 + 15) & 0xFFFFFFFFFFFFFFF8) + 33;
  unint64_t v12 = ((v7 + v10) & 0xFFFFFFFFFFFFFFF8) + 9;
  if (v12 <= v8) {
    unint64_t v12 = v8;
  }
  if (v11 <= v12) {
    unint64_t v11 = v12;
  }
  uint64_t result = a1[v11];
  if (result >= 4)
  {
    if (v11 <= 3) {
      uint64_t v14 = v11;
    }
    else {
      uint64_t v14 = 4;
    }
    switch(v14)
    {
      case 1:
        int v15 = *a1;
        if (v11 < 4) {
          goto LABEL_20;
        }
        goto LABEL_22;
      case 2:
        int v15 = *(unsigned __int16 *)a1;
        if (v11 >= 4) {
          goto LABEL_22;
        }
        goto LABEL_20;
      case 3:
        int v15 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        if (v11 < 4) {
          goto LABEL_20;
        }
        goto LABEL_22;
      case 4:
        int v15 = *(_DWORD *)a1;
        if (v11 < 4) {
LABEL_20:
        }
          uint64_t result = (v15 | ((result - 4) << (8 * v11))) + 4;
        else {
LABEL_22:
        }
          uint64_t result = (v15 + 4);
        break;
      default:
        return result;
    }
  }
  return result;
}

void destructiveInjectEnumTag for _ResolvedKeyframeTrackContent.Segment(unsigned char *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (*(_DWORD *)(v4 + 84)) {
    unint64_t v7 = *(void *)(v4 + 64);
  }
  else {
    unint64_t v7 = v5 + 1;
  }
  unint64_t v8 = (v7 + v6 + ((v5 + v6) & ~v6)) & ~v6;
  unint64_t v9 = v7 + 7;
  unint64_t v10 = ((v9 + v8) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v10 <= v5) {
    unint64_t v10 = v5;
  }
  unint64_t v11 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v12 = (v11 + v6 + 24) & ~v6;
  if (a2 > 3)
  {
    unint64_t v15 = ((v9 + v12) & 0xFFFFFFFFFFFFFFF8) + 9;
    if (v15 > v10) {
      unint64_t v10 = v15;
    }
    if (((v11 + 15) & 0xFFFFFFFFFFFFFFF8) + 33 <= v10) {
      size_t v16 = v10;
    }
    else {
      size_t v16 = ((v11 + 15) & 0xFFFFFFFFFFFFFFF8) + 33;
    }
    unsigned int v17 = ((a2 - 4) >> (8 * v16)) + 4;
    if (v16 <= 3)
    {
      int v18 = (a2 - 4) & ~(-1 << (8 * v16));
    }
    else
    {
      LOBYTE(v17) = 4;
      int v18 = a2 - 4;
    }
    a1[v16] = v17;
    if (v16 >= 4) {
      int v19 = 4;
    }
    else {
      int v19 = v16;
    }
    bzero(a1, v16);
    switch(v19)
    {
      case 2:
        *(_WORD *)a1 = v18;
        break;
      case 3:
        *(_WORD *)a1 = v18;
        a1[2] = BYTE2(v18);
        break;
      case 4:
        *(_DWORD *)a1 = v18;
        break;
      default:
        *a1 = v18;
        break;
    }
  }
  else
  {
    unint64_t v13 = ((v11 + 15) & 0xFFFFFFFFFFFFFFF8) + 33;
    unint64_t v14 = ((v9 + v12) & 0xFFFFFFFFFFFFFFF8) + 9;
    if (v14 > v10) {
      unint64_t v10 = v14;
    }
    if (v13 > v10) {
      unint64_t v10 = v13;
    }
    a1[v10] = a2;
  }
}

uint64_t instantiation function for generic protocol witness table for EmptyKeyframeTrackContent<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for ArrayKeyframeTrackContent<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for MergedKeyframeTrackContent<A, B, C>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for KeyframeTrackContent.Body : KeyframeTrackContent in MergedKeyframeTrackContent<A, B, C>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for KeyframeTrackContent.Value : Animatable in MergedKeyframeTrackContent<A, B, C>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for KeyframeTrackContent.Body : KeyframeTrackContent in ArrayKeyframeTrackContent<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for KeyframeTrackContent.Value : Animatable in ArrayKeyframeTrackContent<A, B>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for KeyframeTrackContent.Body : KeyframeTrackContent in EmptyKeyframeTrackContent<A>()
{
  return swift_getWitnessTable();
}

void specialized PrimitiveKeyframeTrackContent.bodyError()()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 46;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for SerialExecutor.enqueue(_:) in conformance _ImpossibleExecutor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for SerialExecutor.enqueue(_:) in conformance _ImpossibleExecutor(a1, a2, a3, MEMORY[0x263F8F498]);
}

{
  return protocol witness for SerialExecutor.enqueue(_:) in conformance _ImpossibleExecutor(a1, a2, a3, MEMORY[0x263F8F4A0]);
}

uint64_t protocol witness for SerialExecutor.enqueue(_:) in conformance _ImpossibleExecutor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6 = *v4;
  uint64_t v7 = lazy protocol witness table accessor for type _ImpossibleExecutor and conformance _ImpossibleExecutor(&lazy protocol witness table cache variable for type _ImpossibleExecutor and conformance _ImpossibleExecutor, 255, (void (*)(uint64_t))type metadata accessor for _ImpossibleExecutor);

  return a4(a1, v6, v7);
}

uint64_t protocol witness for SerialExecutor.asUnownedSerialExecutor() in conformance _ImpossibleExecutor()
{
  return SerialExecutor.asUnownedSerialExecutor()();
}

uint64_t protocol witness for SerialExecutor.isSameExclusiveExecutionContext(other:) in conformance _ImpossibleExecutor(uint64_t a1)
{
  return MEMORY[0x270FA2038](a1, *v1);
}

void protocol witness for SerialExecutor.checkIsolated() in conformance _ImpossibleExecutor()
{
}

uint64_t protocol witness for Executor.enqueue(_:) in conformance _ImpossibleExecutor(uint64_t a1)
{
  return MEMORY[0x270FA1E38](a1, *v1);
}

{
  void *v1;

  return MEMORY[0x270FA1E40](a1, *v1);
}

void protocol witness for Executor.enqueue(_:) in conformance _ImpossibleExecutor()
{
}

uint64_t static _ImpossibleActor.shared.getter()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_retain();
}

uint64_t static _ImpossibleActor.shared.setter(uint64_t a1)
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  static _ImpossibleActor.shared = a1;
  return swift_release();
}

uint64_t (*static _ImpossibleActor.shared.modify())()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  return DisplayList.GraphicsRenderer.platformViewMode.modify;
}

uint64_t _ImpossibleActor.unownedExecutor.getter()
{
  return SerialExecutor.asUnownedSerialExecutor()();
}

uint64_t type metadata accessor for _ImpossibleExecutor()
{
  return self;
}

uint64_t _ImpossibleActor.deinit()
{
  return v0;
}

uint64_t _ImpossibleActor.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t protocol witness for Actor.unownedExecutor.getter in conformance _ImpossibleActor()
{
  return SerialExecutor.asUnownedSerialExecutor()();
}

uint64_t associated type witness table accessor for GlobalActor.ActorType : Actor in _ImpossibleActor(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type _ImpossibleExecutor and conformance _ImpossibleExecutor(&lazy protocol witness table cache variable for type _ImpossibleActor and conformance _ImpossibleActor, a2, (void (*)(uint64_t))type metadata accessor for _ImpossibleActor);
}

uint64_t type metadata accessor for _ImpossibleActor()
{
  return self;
}

uint64_t protocol witness for static GlobalActor.shared.getter in conformance _ImpossibleActor()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_retain();
}

uint64_t protocol witness for static GlobalActor.sharedUnownedExecutor.getter in conformance _ImpossibleActor(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for _ImpossibleActor();

  return MEMORY[0x270FA2150](v3, a2);
}

uint64_t method lookup function for _ImpossibleActor(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for _ImpossibleActor);
}

uint64_t dispatch thunk of _ImpossibleActor.unownedExecutor.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88))();
}

uint64_t base witness table accessor for Executor in _ImpossibleExecutor()
{
  return lazy protocol witness table accessor for type _ImpossibleExecutor and conformance _ImpossibleExecutor(&lazy protocol witness table cache variable for type _ImpossibleExecutor and conformance _ImpossibleExecutor, 255, (void (*)(uint64_t))type metadata accessor for _ImpossibleExecutor);
}

uint64_t lazy protocol witness table accessor for type _ImpossibleExecutor and conformance _ImpossibleExecutor(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

BOOL static PhaseAnimator.Behavior.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  if (*a1)
  {
    if (v3)
    {
      if (v2 != v3)
      {
        uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 80);
        swift_retain_n();
        swift_retain_n();
        LOBYTE(v4) = v4(v3);
        swift_release_n();
        swift_release_n();
        return v4 & 1;
      }
      return 1;
    }
    return 0;
  }
  return !v3;
}

double PhaseAnimator.init<A, B>(_:trigger:content:animation:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, uint64_t a8)
{
  uint64_t v22 = a5;
  uint64_t v23 = a6;
  uint64_t v20 = a3;
  uint64_t v21 = a4;
  uint64_t v11 = *(void *)(a8 - 8);
  double v12 = MEMORY[0x270FA5388](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))((char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a8, v12);
  uint64_t v14 = Array.init<A>(_:)();
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a1, a8);
  AnyEquatable.init<A>(_:)(a2, &v24);
  uint64_t v15 = v20;
  *(void *)a7 = v14;
  *(void *)(a7 + 8) = v15;
  uint64_t v16 = v22;
  *(void *)(a7 + 16) = v21;
  *(void *)(a7 + 24) = v16;
  uint64_t v17 = v24;
  *(void *)(a7 + 32) = v23;
  *(void *)(a7 + 40) = v17;
  double result = 0.0;
  *(_OWORD *)(a7 + 48) = 0u;
  *(_OWORD *)(a7 + 64) = 0u;
  return result;
}

double PhaseAnimator.init<A>(_:content:animation:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  uint64_t v20 = a5;
  uint64_t v13 = *(void *)(a6 - 8);
  double v14 = MEMORY[0x270FA5388](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))((char *)&v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v16, v14);
  uint64_t v17 = Array.init<A>(_:)();
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, a6);
  *(void *)a7 = v17;
  *(void *)(a7 + 8) = a2;
  *(void *)(a7 + 16) = a3;
  *(void *)(a7 + 24) = a4;
  *(void *)(a7 + 32) = v20;
  double result = 0.0;
  *(_OWORD *)(a7 + 40) = 0u;
  *(_OWORD *)(a7 + 56) = 0u;
  *(void *)(a7 + 72) = 0;
  return result;
}

uint64_t PhaseAnimator.body.getter(void *a1)
{
  long long v27 = v1[1];
  long long v29 = *v1;
  uint64_t v3 = *((void *)v1 + 4);
  uint64_t v4 = *((void *)v1 + 5);
  *(void *)&long long v41 = *(void *)v1;
  uint64_t v32 = a1[2];
  type metadata accessor for Array();
  swift_getWitnessTable();
  if (Collection.isEmpty.getter())
  {
    uint64_t v5 = a1[3];
    uint64_t v6 = a1[4];
    uint64_t v30 = a1[5];
    *(void *)&long long v41 = v32;
    *((void *)&v41 + 1) = v5;
    *(void *)&long long v42 = v6;
    *((void *)&v42 + 1) = v30;
    uint64_t v7 = type metadata accessor for PhaseAnimator.EmptyPhasesView();
    swift_getWitnessTable();
    View.onAppear(perform:)((uint64_t)closure #1 in PhaseAnimator.body.getter, 0, v7);
    long long v37 = v41;
    long long v38 = v42;
    uint64_t v8 = type metadata accessor for ModifiedContent();
    uint64_t WitnessTable = swift_getWitnessTable();
    static ViewBuilder.buildExpression<A>(_:)(&v37, v8, WitnessTable);
    outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v32);
    outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v6);
    uint64_t v10 = v46;
    uint64_t v11 = v47;
    long long v41 = v46;
    long long v42 = v47;
    static ViewBuilder.buildExpression<A>(_:)(&v41, v8, WitnessTable);
    outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v10);
    outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v11);
    uint64_t v12 = v37;
    uint64_t v13 = v38;
    long long v33 = v37;
    long long v34 = v38;
    *(void *)&long long v41 = v32;
    *((void *)&v41 + 1) = v5;
    *(void *)&long long v42 = v6;
    *((void *)&v42 + 1) = v30;
    type metadata accessor for PhaseAnimator.StateTransitioningContainer();
    static ViewBuilder.buildEither<A, B>(first:)((uint64_t)&v33, v8, (uint64_t)&v41);
    outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v12);
    outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v13);
  }
  else
  {
    uint64_t v14 = a1[3];
    uint64_t v15 = a1[4];
    uint64_t v16 = a1[5];
    long long v41 = v29;
    long long v42 = v27;
    uint64_t v43 = v3;
    uint64_t v44 = v4;
    *(void *)&long long v46 = v32;
    *((void *)&v46 + 1) = v14;
    *(void *)&long long v47 = v15;
    *((void *)&v47 + 1) = v16;
    uint64_t v17 = type metadata accessor for PhaseAnimator.StateTransitioningContainer();
    static ViewBuilder.buildExpression<A>(_:)(&v41, v17, &protocol witness table for PhaseAnimator<A, B>.StateTransitioningContainer);
    long long v41 = v46;
    long long v42 = v47;
    uint64_t v43 = v48;
    uint64_t v44 = v49;
    static ViewBuilder.buildExpression<A>(_:)(&v41, v17, &protocol witness table for PhaseAnimator<A, B>.StateTransitioningContainer);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    long long v33 = v37;
    long long v34 = v38;
    uint64_t v35 = v39;
    uint64_t v36 = v40;
    *(void *)&long long v41 = v32;
    *((void *)&v41 + 1) = v14;
    *(void *)&long long v42 = v15;
    *((void *)&v42 + 1) = v16;
    type metadata accessor for PhaseAnimator.EmptyPhasesView();
    type metadata accessor for ModifiedContent();
    swift_getWitnessTable();
    swift_getWitnessTable();
    static ViewBuilder.buildEither<A, B>(second:)((uint64_t)&v33, v17, (uint64_t)&v41);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
  }
  long long v18 = v41;
  long long v19 = v42;
  uint64_t v26 = v43;
  uint64_t v28 = v44;
  char v31 = v45;
  uint64_t v21 = a1[3];
  uint64_t v20 = a1[4];
  uint64_t v22 = a1[5];
  *(void *)&long long v46 = v32;
  *((void *)&v46 + 1) = v21;
  *(void *)&long long v47 = v20;
  *((void *)&v47 + 1) = v22;
  type metadata accessor for PhaseAnimator.EmptyPhasesView();
  type metadata accessor for ModifiedContent();
  *(void *)&long long v46 = v32;
  *((void *)&v46 + 1) = v21;
  *(void *)&long long v47 = v20;
  *((void *)&v47 + 1) = v22;
  type metadata accessor for PhaseAnimator.StateTransitioningContainer();
  uint64_t v23 = type metadata accessor for _ConditionalContent();
  swift_getWitnessTable();
  swift_getWitnessTable();
  uint64_t v24 = swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(&v41, v23, v24);
  return outlined consume of _ConditionalContent<ModifiedContent<PhaseAnimator<A, B>.EmptyPhasesView, _AppearanceActionModifier>, PhaseAnimator<A, B>.StateTransitioningContainer>.Storage<A, B>(v18, *((uint64_t *)&v18 + 1), v19, *((uint64_t *)&v19 + 1), v26, v28, v31);
}

uint64_t closure #1 in PhaseAnimator.body.getter()
{
  static os_log_type_t.fault.getter();
  if (one-time initialization token for runtimeIssuesLog != -1) {
    swift_once();
  }

  return os_log(_:dso:log:_:_:)();
}

uint64_t type metadata accessor for PhaseAnimator.StateTransitioningContainer()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for PhaseAnimator.EmptyPhasesView()
{
  return swift_getGenericMetadata();
}

uint64_t outlined consume of _ConditionalContent<ModifiedContent<PhaseAnimator<A, B>.EmptyPhasesView, _AppearanceActionModifier>, PhaseAnimator<A, B>.StateTransitioningContainer>.Storage<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if (a7)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_release();
  }
  else
  {
    outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(a1);
    return outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(a3);
  }
}

uint64_t static PhaseAnimator.StateTransitioningContainer._makeView(view:inputs:)@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, __n128 a8@<Q0>)
{
  uint64_t v88 = *MEMORY[0x263EF8340];
  LODWORD(v67) = *a1;
  unint64_t v64 = *(void *)a2;
  int v63 = *(_DWORD *)(a2 + 8);
  uint64_t v62 = *(void *)(a2 + 16);
  unsigned int v70 = *(_DWORD *)(a2 + 24);
  a8.n128_u64[0] = *(void *)(a2 + 28);
  __n128 v69 = a8;
  int v61 = *(_DWORD *)(a2 + 36);
  long long v65 = *(_OWORD *)(a2 + 40);
  uint64_t v13 = *(void *)(a2 + 56);
  uint64_t v14 = *(void *)(a2 + 64);
  uint64_t v15 = *(void *)(a2 + 72);
  int v60 = *(_DWORD *)(a2 + 80);
  uint64_t v16 = MEMORY[0x263F8D4F8];
  type metadata accessor for External<Bool>(0, &lazy cache variable for type metadata for External<Bool>, MEMORY[0x263F8D4F8], MEMORY[0x263F288C8]);
  lazy protocol witness table accessor for type External<Bool> and conformance External<A>(&lazy protocol witness table cache variable for type External<Bool> and conformance External<A>, &lazy cache variable for type metadata for External<Bool>, v16);
  Attribute.init<A>(body:value:flags:update:)();
  uint64_t v17 = AGCreateWeakAttribute();
  uint64_t v74 = -1;
  LOBYTE(v75) = 0;
  unint64_t v78 = a3;
  unint64_t v79 = a4;
  uint64_t v80 = a5;
  *(void *)&long long v81 = a6;
  uint64_t v73 = type metadata accessor for PhaseAnimator.StateTransitioningContainer.AnimationCompletion();
  uint64_t v18 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v74, (uint64_t)partial apply for closure #1 in Attribute.init(value:), (uint64_t)v72, v73, MEMORY[0x263F8E628], v18, MEMORY[0x263F8E658], v19);
  uint64_t v20 = AGCreateWeakAttribute();
  int CurrentAttribute = AGGraphGetCurrentAttribute();
  int v68 = *MEMORY[0x263F288F8];
  if (CurrentAttribute == v68)
  {
    id v22 = (id)AGSubgraphGetCurrent();
    if (!v22) {
      goto LABEL_14;
    }
    uint64_t v23 = v22;
    id v24 = (id)AGSubgraphGetGraph();
  }
  else
  {
    id v24 = (id)AGGraphGetAttributeGraph();
  }
  uint64_t v66 = a7;
  uint64_t Context = AGGraphGetContext();
  if (!Context)
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v26 = Context;
  swift_retain();

  swift_beginAccess();
  unsigned int v27 = *(_DWORD *)(v26 + 68);
  uint64_t v28 = swift_release();
  unint64_t v78 = __PAIR64__(v69.n128_u32[0], v67);
  unsigned __int32 v59 = v69.n128_u32[0];
  unint64_t v79 = __PAIR64__(v70, v27);
  uint64_t v80 = v20;
  uint64_t v67 = v17;
  long long v81 = (unint64_t)v17;
  uint64_t v83 = 0;
  *(void *)&long long v82 = 0;
  DWORD2(v82) = 0;
  LOBYTE(v84) = 1;
  long long v85 = xmmword_24619B520;
  int v86 = 0;
  char v87 = 1;
  MEMORY[0x270FA5388](v28);
  uint64_t v74 = a3;
  uint64_t v75 = a4;
  uint64_t v76 = a5;
  uint64_t v77 = a6;
  uint64_t v54 = type metadata accessor for PhaseAnimator.StateTransitioningContainer.Child.Value();
  uint64_t v74 = a3;
  uint64_t v75 = a4;
  uint64_t v76 = a5;
  uint64_t v77 = a6;
  uint64_t v55 = type metadata accessor for PhaseAnimator.StateTransitioningContainer.Child();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v29 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v78, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)&v53, v55, MEMORY[0x263F8E628], v29, MEMORY[0x263F8E658], v30);
  outlined consume of Transaction?(v85);
  swift_release();
  unsigned int v31 = v74;
  if (AGGraphGetCurrentAttribute() != v68)
  {
    id v34 = (id)AGGraphGetAttributeGraph();
LABEL_10:
    uint64_t v35 = AGGraphGetContext();
    if (v35)
    {
      uint64_t v36 = v35;
      swift_retain();

      swift_beginAccess();
      int v37 = *(_DWORD *)(v36 + 68);
      swift_release();
      closure #1 in static PhaseAnimator.StateTransitioningContainer._makeView(view:inputs:)(1, a3, a4, a5, a6);
      int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
      closure #2 in static PhaseAnimator.StateTransitioningContainer._makeView(view:inputs:)(1, a3, a4, a5, a6);
      uint64_t v39 = AGGraphCreateOffsetAttribute2();
      unsigned int v58 = v31;
      v71[0] = v59;
      v71[1] = v37;
      v71[2] = OffsetAttribute2;
      v71[3] = v39;
      MEMORY[0x270FA5388](v39);
      unint64_t v78 = a3;
      unint64_t v79 = a4;
      uint64_t v80 = a5;
      *(void *)&long long v81 = a6;
      uint64_t v40 = type metadata accessor for PhaseAnimator.StateTransitioningContainer.TransactionRule();
      uint64_t WitnessTable = v40;
      uint64_t v57 = swift_getWitnessTable();
      type metadata accessor for External<Bool>(0, &lazy cache variable for type metadata for Attribute<Transaction>, (uint64_t)&type metadata for Transaction, MEMORY[0x263F28898]);
      _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v71, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)&v54, v40, MEMORY[0x263F8E628], v41, MEMORY[0x263F8E658], v42);
      int v43 = v78;
      uint64_t v44 = v67;
      char v45 = static PhaseAnimator.StateTransitioningContainer.appearanceHandler(_:_:)(v67, 1, a3, a4, a5, a6);
      unint64_t v47 = v46;
      uint64_t v48 = static PhaseAnimator.StateTransitioningContainer.appearanceHandler(_:_:)(v44, 0, a3, a4, a5, a6);
      unint64_t v78 = (unint64_t)v45;
      unint64_t v79 = v47;
      uint64_t v80 = (uint64_t)v48;
      *(void *)&long long v81 = v49;
      type metadata accessor for External<Bool>(0, &lazy cache variable for type metadata for External<_AppearanceActionModifier>, (uint64_t)&type metadata for _AppearanceActionModifier, MEMORY[0x263F288C8]);
      lazy protocol witness table accessor for type External<Bool> and conformance External<A>(&lazy protocol witness table cache variable for type External<_AppearanceActionModifier> and conformance External<A>, &lazy cache variable for type metadata for External<_AppearanceActionModifier>, (uint64_t)&type metadata for _AppearanceActionModifier);
      swift_retain();
      LODWORD(v44) = Attribute.init<A>(body:value:flags:update:)();
      swift_release();
      unsigned int v50 = v70;
      unint64_t v78 = __PAIR64__(v70, v44);
      unint64_t v79 = 1;
      uint64_t v80 = 0;
      long long v81 = 0uLL;
      LOBYTE(v82) = 0;
      DWORD1(v82) = 0;
      DWORD2(v82) = v68;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      lazy protocol witness table accessor for type AppearanceEffect and conformance AppearanceEffect();
      Attribute.init<A>(body:value:flags:update:)();
      uint64_t v51 = AGGraphSetFlags();
      unint64_t v78 = v64;
      LODWORD(v79) = v63;
      uint64_t v80 = v62;
      LODWORD(v81) = v50;
      *(void *)((char *)&v81 + 4) = v69.n128_u64[0];
      HIDWORD(v81) = v61;
      long long v82 = v65;
      uint64_t v83 = v13;
      uint64_t v84 = v14;
      *(void *)&long long v85 = v15;
      DWORD2(v85) = v60;
      closure #3 in static PhaseAnimator.StateTransitioningContainer._makeView(view:inputs:)(v51, (uint64_t *)&v78, v43, v58, a3, a4, a5, a6);
      swift_release();
      return swift_release();
    }
LABEL_13:
    __break(1u);
  }
  id v32 = (id)AGSubgraphGetCurrent();
  if (v32)
  {
    long long v33 = v32;
    id v34 = (id)AGSubgraphGetGraph();

    goto LABEL_10;
  }
LABEL_14:
  LODWORD(v57) = 0;
  uint64_t WitnessTable = 216;
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in static PhaseAnimator.StateTransitioningContainer._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v12 = a2;
  uint64_t v13 = a3;
  uint64_t v14 = a4;
  uint64_t v15 = a5;
  uint64_t v6 = type metadata accessor for PhaseAnimator.StateTransitioningContainer.Child.Value();
  uint64_t v7 = a1 + *(int *)(v6 + 52);
  v11[2] = v6;
  uint64_t v8 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v7, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v11, (uint64_t)&type metadata for Transaction, MEMORY[0x263F8E628], v8, MEMORY[0x263F8E658], v9);
  return v12;
}

uint64_t closure #2 in static PhaseAnimator.StateTransitioningContainer._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = a2;
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  uint64_t v17 = a5;
  uint64_t v6 = type metadata accessor for PhaseAnimator.StateTransitioningContainer.Child.Value();
  uint64_t v7 = a1 + *(int *)(v6 + 56);
  v13[2] = v6;
  type metadata accessor for External<Bool>(0, &lazy cache variable for type metadata for UInt32?, MEMORY[0x263F8E8F8], MEMORY[0x263F8D8F0]);
  uint64_t v9 = v8;
  uint64_t v10 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v7, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v13, v9, MEMORY[0x263F8E628], v10, MEMORY[0x263F8E658], v11);
  return v14;
}

uint64_t (*static PhaseAnimator.StateTransitioningContainer.appearanceHandler(_:_:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6))()
{
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x263F288F8])
  {
    id v11 = (id)AGSubgraphGetCurrent();
    if (!v11) {
      goto LABEL_8;
    }
    uint64_t v12 = v11;
    id v13 = (id)AGSubgraphGetGraph();
  }
  else
  {
    id v13 = (id)AGGraphGetAttributeGraph();
  }
  uint64_t v14 = a5;
  if (AGGraphGetContext())
  {
    uint64_t v15 = swift_allocObject();
    swift_retain();

    swift_weakInit();
    swift_release();
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = a3;
    *(void *)(v16 + 24) = a4;
    *(void *)(v16 + 32) = v14;
    *(void *)(v16 + 40) = a6;
    *(void *)(v16 + 48) = v15;
    *(void *)(v16 + 56) = a1;
    *(unsigned char *)(v16 + 64) = a2 & 1;
    return partial apply for closure #1 in static PhaseAnimator.StateTransitioningContainer.appearanceHandler(_:_:);
  }
  __break(1u);
LABEL_8:
  uint64_t result = (uint64_t (*)())_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #3 in static PhaseAnimator.StateTransitioningContainer._makeView(view:inputs:)(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12 = *a2;
  int v25 = *((_DWORD *)a2 + 2);
  uint64_t v13 = a2[2];
  uint64_t v14 = a2[4];
  uint64_t v15 = a2[5];
  uint64_t v16 = a2[6];
  uint64_t v17 = a2[7];
  uint64_t v18 = a2[8];
  uint64_t v19 = a2[9];
  int v23 = *((_DWORD *)a2 + 20);
  int v24 = *((_DWORD *)a2 + 6);
  uint64_t v20 = *(void *)(*(void *)(a6 - 8) + 64);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v20) {
    closure #1 in closure #3 in static PhaseAnimator.StateTransitioningContainer._makeView(view:inputs:)(1, a5, a6, a7, a8, (uint64_t (*)(void, void *))type metadata accessor for PhaseAnimator.StateTransitioningContainer.Child.Value, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:));
  }
  uint64_t OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  _GraphValue.init(_:)(OffsetAttribute2, &v39);
  uint64_t v27 = v12;
  int v28 = v25;
  uint64_t v29 = v13;
  int v30 = v24;
  int v31 = a3;
  uint64_t v32 = v14;
  uint64_t v33 = v15;
  uint64_t v34 = v16;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v37 = v19;
  int v38 = v23;
  (*(void (**)(int *, uint64_t *, uint64_t, uint64_t))(a8 + 24))(&v39, &v27, a6, a8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_release();
}

uint64_t PhaseAnimator.StateTransitioningContainer.Child.view.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for PhaseAnimator.StateTransitioningContainer();
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(void *)(Value + 32);
  uint64_t v3 = *(void *)(Value + 40);
  long long v6 = *(_OWORD *)(Value + 16);
  *(_OWORD *)a1 = *(_OWORD *)Value;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v3;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  return swift_retain();
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance PhaseAnimator<A, B>.StateTransitioningContainer@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>, __n128 a5@<Q0>)
{
  return static PhaseAnimator.StateTransitioningContainer._makeView(view:inputs:)(a1, a2, a3[2], a3[3], a3[4], a3[5], a4, a5);
}

uint64_t PhaseAnimator.StateTransitioningContainer.Child.Value.init(content:phaseChangeTransaction:phaseChangeTransactionSeed:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5, a1, a4);
  uint64_t result = type metadata accessor for PhaseAnimator.StateTransitioningContainer.Child.Value();
  *(void *)(a5 + *(int *)(result + 52)) = a2;
  uint64_t v9 = a5 + *(int *)(result + 56);
  *(_DWORD *)uint64_t v9 = a3;
  *(unsigned char *)(v9 + 4) = BYTE4(a3) & 1;
  return result;
}

uint64_t PhaseAnimator.StateTransitioningContainer.Child.clampedIndex.getter(uint64_t a1)
{
  if (*(unsigned char *)(v1 + 64) == 1 && *(void *)(v1 + 56) != 0) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(v1 + 32);
  PhaseAnimator.StateTransitioningContainer.Child.view.getter((uint64_t)&v8);
  uint64_t v5 = v8;
  swift_release();
  swift_release();
  swift_release();
  uint64_t v6 = MEMORY[0x24C522E60](v5, v3);
  uint64_t result = swift_bridgeObjectRelease();
  if (__OFSUB__(v6, 1))
  {
    __break(1u);
  }
  else if (v6 - 1 >= v4)
  {
    return v4;
  }
  else
  {
    return v6 - 1;
  }
  return result;
}

uint64_t static PhaseAnimator.StateTransitioningContainer.Child.EndlessLoopState.== infix(_:_:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  BOOL v5 = (a4 & 1) == 0 && a1 == a3;
  unsigned int v6 = a4 & 1;
  if (a3) {
    int v7 = a4 & 1;
  }
  else {
    int v7 = 0;
  }
  if (a3) {
    unsigned int v6 = 0;
  }
  if (a1) {
    unsigned int v6 = v7;
  }
  if (a2) {
    return v6;
  }
  else {
    return v5;
  }
}

Swift::Void __swiftcall PhaseAnimator.StateTransitioningContainer.Child.updateValue()()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  int v4 = *(_DWORD *)(v1 + 48);
  int v5 = *(_DWORD *)AGGraphGetValue() >> 1;
  if (v5 != v4)
  {
    *(_DWORD *)(v2 + 48) = v5;
    *(void *)(v2 + 32) = 0;
    outlined consume of Transaction?(*(void *)(v2 + 72));
    *(void *)(v2 + 72) = 1;
    *(void *)(v2 + 56) = 0;
    *(unsigned char *)(v2 + 64) = 1;
    ++*(void *)(v2 + 40);
  }
  Swift::Int v6 = *(void *)(v2 + 32);
  uint64_t v8 = v3[2];
  uint64_t v7 = v3[3];
  uint64_t v9 = v3[4];
  uint64_t v10 = v3[5];
  *(void *)&long long v47 = v8;
  *((void *)&v47 + 1) = v7;
  *(void *)&long long v48 = v9;
  *((void *)&v48 + 1) = v10;
  type metadata accessor for PhaseAnimator.StateTransitioningContainer();
  uint64_t Value = (long long *)AGGraphGetValue();
  char v13 = v12;
  long long v15 = Value[1];
  long long v14 = Value[2];
  long long v47 = *Value;
  long long v48 = v15;
  long long v49 = v14;
  int Attribute = AGWeakAttributeGetAttribute();
  int v17 = *MEMORY[0x263F288F8];
  if (Attribute == *MEMORY[0x263F288F8])
  {
    outlined retain of PhaseAnimator<A, B>.StateTransitioningContainer((uint64_t)&v47);
    goto LABEL_38;
  }
  uint64_t v18 = (unsigned char *)AGGraphGetValue();
  if (v19)
  {
    if (*v18 == 1)
    {
      uint64_t v43 = v8;
      uint64_t v44 = v7;
      uint64_t v45 = v9;
      uint64_t v46 = v10;
      uint64_t v41 = v8;
      uint64_t v20 = type metadata accessor for PhaseAnimator.Behavior();
      uint64_t v21 = *(void (**)(uint64_t *, char *, uint64_t))(*(void *)(v20 - 8) + 32);
      v21((uint64_t *)v52, (char *)&v49 + 8, v20);
      uint64_t v22 = v20;
      uint64_t v8 = v41;
      v21(&v53, v52, v22);
      uint64_t v23 = v53;
      outlined retain of PhaseAnimator<A, B>.StateTransitioningContainer((uint64_t)&v47);
      if (!v23) {
        PhaseAnimator.StateTransitioningContainer.Child.advance(from:)(v6);
      }
    }
    else
    {
      outlined retain of PhaseAnimator<A, B>.StateTransitioningContainer((uint64_t)&v47);
      *(void *)(v2 + 32) = 0;
      outlined consume of Transaction?(*(void *)(v2 + 72));
      *(void *)(v2 + 72) = 1;
      *(void *)(v2 + 56) = 0;
      *(unsigned char *)(v2 + 64) = 1;
      ++*(void *)(v2 + 40);
    }
  }
  else
  {
    outlined retain of PhaseAnimator<A, B>.StateTransitioningContainer((uint64_t)&v47);
  }
  if (v13)
  {
    uint64_t v24 = *(void *)(v2 + 56);
    int v25 = *(unsigned __int8 *)(v2 + 64);
    *(void *)(v2 + 56) = 0;
    *(unsigned char *)(v2 + 64) = 1;
    if (v25 == 1)
    {
      if (v24)
      {
        uint64_t v43 = v8;
        uint64_t v44 = v7;
        uint64_t v45 = v9;
        uint64_t v46 = v10;
        uint64_t v26 = type metadata accessor for PhaseAnimator.Behavior();
        uint64_t v27 = *(void (**)(uint64_t *, char *, uint64_t))(*(void *)(v26 - 8) + 32);
        v27((uint64_t *)v51, (char *)&v49 + 8, v26);
        v27(&v54, v51, v26);
        if (!v54) {
          PhaseAnimator.StateTransitioningContainer.Child.advance(from:)(*(void *)(v2 + 32));
        }
      }
    }
  }
  uint64_t v28 = *(void *)(v2 + 72);
  if (v28 != 1)
  {
    uint64_t v42 = v8;
    uint64_t v43 = v8;
    uint64_t v44 = v7;
    uint64_t v45 = v9;
    uint64_t v46 = v10;
    uint64_t v29 = type metadata accessor for PhaseAnimator.Behavior();
    int v30 = *(void (**)(uint64_t *, char *, uint64_t))(*(void *)(v29 - 8) + 32);
    v30((uint64_t *)v50, (char *)&v49 + 8, v29);
    v30(&v43, v50, v29);
    v55[0] = v28;
    swift_retain();
    if (static PhaseAnimator.Behavior.== infix(_:_:)(&v43, v55))
    {
LABEL_18:
      outlined consume of Transaction?(v28);
      uint64_t v8 = v42;
      goto LABEL_19;
    }
    if (v28)
    {
      v30(v55, v50, v29);
      uint64_t v39 = v55[0];
      if (!v55[0])
      {
        PhaseAnimator.StateTransitioningContainer.Child.advance(from:)(*(void *)(v2 + 32));
        goto LABEL_18;
      }
      uint64_t v8 = v42;
      if (v55[0] == v28)
      {
        outlined consume of Transaction?(v28);
      }
      else
      {
        uint64_t v40 = *(uint64_t (**)(uint64_t))(*(void *)v28 + 80);
        outlined copy of SafeAreaInsets.OptionalValue?(v28);
        outlined retain of ViewTransform((uint64_t)v50);
        if ((v40(v39) & 1) == 0) {
          PhaseAnimator.StateTransitioningContainer.Child.advance(from:)(0);
        }
        outlined consume of Transaction?(v28);
        outlined release of ViewTransform((uint64_t)v50);
        outlined consume of Transaction?(v28);
      }
    }
    else
    {
      v30(v55, v50, v29);
      uint64_t v8 = v42;
      if (v55[0]) {
        PhaseAnimator.StateTransitioningContainer.Child.advance(to:)(0);
      }
    }
  }
LABEL_19:
  uint64_t v31 = *((void *)&v49 + 1);
  uint64_t v32 = *(void *)(v2 + 72);
  *(void *)(v2 + 72) = *((void *)&v49 + 1);
  swift_retain();
  outlined consume of Transaction?(v32);
  Swift::Int v33 = *(void *)(v2 + 32);
  uint64_t v34 = *(void *)(v2 + 40);
  if (AGWeakAttributeGetAttribute() != v17)
  {
    uint64_t v43 = v8;
    uint64_t v44 = v7;
    uint64_t v45 = v9;
    uint64_t v46 = v10;
    type metadata accessor for PhaseAnimator.StateTransitioningContainer.AnimationCompletion();
    uint64_t v35 = AGGraphGetValue();
    if ((v36 & 1) != 0 && *(void *)v35 == v34)
    {
      char v37 = *(unsigned char *)(v35 + 8);
      uint64_t v43 = v8;
      uint64_t v44 = v7;
      uint64_t v45 = v9;
      uint64_t v46 = v10;
      type metadata accessor for PhaseAnimator.Behavior();
      if (!v31 || v33)
      {
        if (v37)
        {
          Swift::Int v38 = 0;
        }
        else
        {
          uint64_t v43 = v8;
          uint64_t v44 = v7;
          uint64_t v45 = v9;
          uint64_t v46 = v10;
          type metadata accessor for PhaseAnimator.StateTransitioningContainer.Child.EndlessLoopState();
          if (*(unsigned char *)(v2 + 64) != 1) {
            goto LABEL_37;
          }
          Swift::Int v38 = v33;
          if (*(void *)(v2 + 56)) {
            goto LABEL_37;
          }
        }
        *(void *)(v2 + 56) = v38;
        *(unsigned char *)(v2 + 64) = v37;
LABEL_37:
        PhaseAnimator.StateTransitioningContainer.Child.advance(from:)(v33);
      }
    }
  }
LABEL_38:
  $defer #1 <A, B>() in PhaseAnimator.StateTransitioningContainer.Child.updateValue()((long long *)v2, (uint64_t)&v47, v8, v7, v9);
  outlined release of PhaseAnimator<A, B>.StateTransitioningContainer((uint64_t)&v47);
}

uint64_t $defer #1 <A, B>() in PhaseAnimator.StateTransitioningContainer.Child.updateValue()(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  uint64_t v37 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  id v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  long long v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v47 = v15;
  *((void *)&v47 + 1) = v16;
  *(void *)&long long v48 = v17;
  *((void *)&v48 + 1) = v18;
  uint64_t v35 = v17;
  uint64_t v19 = v18;
  uint64_t v36 = v18;
  uint64_t v38 = type metadata accessor for PhaseAnimator.StateTransitioningContainer.Child.Value();
  uint64_t v39 = *(void *)(v38 - 8);
  MEMORY[0x270FA5388](v38);
  uint64_t v21 = (char *)&v33 - v20;
  uint64_t v33 = *(void *)(a2 + 16);
  uint64_t v34 = *(void (**)(char *))(a2 + 8);
  LODWORD(v20) = *((_DWORD *)a1 + 12);
  uint64_t v22 = *((void *)a1 + 7);
  char v23 = *((unsigned char *)a1 + 64);
  int v24 = *((_DWORD *)a1 + 22);
  char v25 = *((unsigned char *)a1 + 92);
  long long v26 = a1[1];
  long long v47 = *a1;
  long long v48 = v26;
  long long v49 = a1[2];
  int v50 = v20;
  uint64_t v51 = v22;
  char v52 = v23;
  long long v53 = *(long long *)((char *)a1 + 72);
  int v54 = v24;
  char v55 = v25;
  uint64_t v43 = a3;
  uint64_t v44 = a4;
  uint64_t v45 = a5;
  uint64_t v46 = v19;
  uint64_t v27 = type metadata accessor for PhaseAnimator.StateTransitioningContainer.Child();
  PhaseAnimator.StateTransitioningContainer.Child.clampedIndex.getter(v27);
  Array.subscript.getter();
  v34(v11);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v11, a3);
  uint64_t v28 = *((void *)a1 + 10);
  uint64_t v29 = *((unsigned int *)a1 + 22);
  LOBYTE(v47) = *((unsigned char *)a1 + 92);
  PhaseAnimator.StateTransitioningContainer.Child.Value.init(content:phaseChangeTransaction:phaseChangeTransactionSeed:)((uint64_t)v14, v28, v29 | ((unint64_t)v47 << 32), a4, (uint64_t)v21);
  uint64_t v41 = v27;
  uint64_t WitnessTable = swift_getWitnessTable();
  swift_retain();
  uint64_t v30 = v38;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v21, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)v40, v38, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v31);
  return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v21, v30);
}

Swift::Void __swiftcall PhaseAnimator.StateTransitioningContainer.Child.advance(from:)(Swift::Int from)
{
  uint64_t v3 = v1;
  int v5 = v2[2];
  int v4 = v2[3];
  int v7 = v2[4];
  int v6 = v2[5];
  int v9 = v2[6];
  int v8 = v2[7];
  uint64_t v11 = *((void *)v2 + 4);
  uint64_t v10 = *((void *)v2 + 5);
  int v12 = v2[12];
  uint64_t v13 = *((void *)v2 + 7);
  char v14 = *((unsigned char *)v2 + 64);
  uint64_t v16 = *((void *)v2 + 9);
  uint64_t v15 = *((void *)v2 + 10);
  int v17 = v2[22];
  char v18 = *((unsigned char *)v2 + 92);
  int v28 = *v2;
  int v29 = v2[1];
  int v41 = *v2;
  int v42 = v29;
  int v30 = v5;
  int v31 = v4;
  int v43 = v5;
  int v44 = v4;
  int v32 = v7;
  int v33 = v6;
  int v45 = v7;
  int v46 = v6;
  int v34 = v9;
  int v35 = v8;
  int v47 = v9;
  int v48 = v8;
  uint64_t v36 = v11;
  uint64_t v37 = v10;
  uint64_t v49 = v11;
  uint64_t v50 = v10;
  int v38 = v12;
  int v51 = v12;
  uint64_t v39 = v13;
  uint64_t v52 = v13;
  char v53 = v14;
  uint64_t v54 = v16;
  uint64_t v55 = v15;
  int v56 = v17;
  char v57 = v18;
  PhaseAnimator.StateTransitioningContainer.Child.view.getter((uint64_t)v58);
  uint64_t v19 = v58[0];
  swift_release();
  swift_release();
  swift_release();
  uint64_t v20 = *(void *)(v3 + 16);
  uint64_t v21 = MEMORY[0x24C522E60](v19, v20);
  swift_bridgeObjectRelease();
  if (v21 >= 2)
  {
    int v41 = v28;
    int v42 = v29;
    int v43 = v30;
    int v44 = v31;
    int v45 = v32;
    int v46 = v33;
    int v47 = v34;
    int v48 = v35;
    uint64_t v49 = v36;
    uint64_t v50 = v37;
    int v51 = v38;
    uint64_t v52 = v39;
    char v53 = v14;
    uint64_t v54 = v16;
    uint64_t v55 = v15;
    int v56 = v17;
    char v57 = v18;
    PhaseAnimator.StateTransitioningContainer.Child.view.getter((uint64_t)v58);
    uint64_t v22 = v58[5];
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    if (v22)
    {
      swift_release();
      Swift::Int v23 = from + 1;
      if (__OFADD__(from, 1))
      {
        __break(1u);
        return;
      }
    }
    else
    {
      Swift::Int v23 = from + 1;
      if (__OFADD__(from, 1))
      {
        __break(1u);
        return;
      }
    }
    int v41 = v28;
    int v42 = v29;
    int v43 = v30;
    int v44 = v31;
    int v45 = v32;
    int v46 = v33;
    int v47 = v34;
    int v48 = v35;
    uint64_t v49 = v36;
    uint64_t v50 = v37;
    int v51 = v38;
    uint64_t v52 = v39;
    char v53 = v14;
    uint64_t v54 = v16;
    uint64_t v55 = v15;
    int v56 = v17;
    char v57 = v18;
    PhaseAnimator.StateTransitioningContainer.Child.view.getter((uint64_t)&v40);
    uint64_t v24 = v40;
    swift_release();
    swift_release();
    swift_release();
    uint64_t v25 = MEMORY[0x24C522E60](v24, v20);
    swift_bridgeObjectRelease();
    if (v23 >= v25) {
      Swift::Int v26 = 0;
    }
    else {
      Swift::Int v26 = v23;
    }
    PhaseAnimator.StateTransitioningContainer.Child.advance(to:)(v26);
  }
}

Swift::Void __swiftcall PhaseAnimator.StateTransitioningContainer.Child.advance(to:)(Swift::Int to)
{
  uint64_t v3 = v2;
  int v4 = v1;
  unint64_t v6 = v1[2];
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](to);
  int v9 = (char *)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *((void *)v2 + 7);
  int v11 = *((unsigned __int8 *)v2 + 64);
  if (v11 == 1)
  {
    if (v10) {
      return;
    }
  }
  else if (v10 == to)
  {
    *((void *)v2 + 7) = 1;
    *((unsigned char *)v2 + 64) = 1;
    *((void *)v2 + 4) = 0;
    return;
  }
  unint64_t v78 = v9;
  unsigned int v12 = v2[1];
  unsigned int v13 = v2[2];
  unsigned int v14 = v2[3];
  unsigned int v15 = v2[4];
  unsigned int v16 = v2[5];
  unsigned int v17 = v2[6];
  unsigned int v18 = v2[7];
  Swift::Int v20 = *((void *)v2 + 4);
  unint64_t v19 = *((void *)v2 + 5);
  unsigned int v21 = v2[12];
  uint64_t v22 = *((void *)v2 + 9);
  uint64_t v23 = *((void *)v2 + 10);
  unsigned int v24 = v2[22];
  int v25 = *((unsigned __int8 *)v2 + 92);
  unsigned int v71 = *v2;
  unint64_t v81 = __PAIR64__(v12, v71);
  unsigned int v70 = v12;
  unsigned int v69 = v13;
  unint64_t v82 = __PAIR64__(v14, v13);
  unsigned int v68 = v14;
  unsigned int v77 = v15;
  unint64_t v83 = __PAIR64__(v16, v15);
  unsigned int v76 = v16;
  unsigned int v67 = v17;
  unint64_t v84 = __PAIR64__(v18, v17);
  unsigned int v66 = v18;
  Swift::Int v85 = v20;
  unint64_t v86 = v19;
  unint64_t v64 = v19;
  unsigned int v65 = v21;
  unsigned int v87 = v21;
  uint64_t v88 = v10;
  char v89 = v11;
  uint64_t v75 = v22;
  uint64_t v90 = v22;
  uint64_t v91 = v23;
  uint64_t v74 = v23;
  unsigned int v73 = v24;
  unsigned int v92 = v24;
  int v72 = v25;
  char v93 = v25;
  PhaseAnimator.StateTransitioningContainer.Child.view.getter((uint64_t)v94);
  uint64_t v26 = v94[0];
  unint64_t v79 = v6;
  swift_release();
  swift_release();
  unint64_t v27 = v79;
  swift_release();
  Swift::Int v28 = MEMORY[0x24C522E60](v26, v27);
  swift_bridgeObjectRelease();
  if (v28 > to)
  {
    uint64_t v61 = v7;
    unint64_t v81 = __PAIR64__(v70, v71);
    unint64_t v82 = __PAIR64__(v68, v69);
    unint64_t v83 = __PAIR64__(v76, v77);
    unint64_t v84 = __PAIR64__(v66, v67);
    Swift::Int v85 = v20;
    unint64_t v29 = v64;
    unint64_t v86 = v64;
    unsigned int v87 = v65;
    uint64_t v88 = v10;
    char v89 = v11;
    uint64_t v90 = v75;
    uint64_t v91 = v74;
    unsigned int v92 = v73;
    char v93 = v72;
    PhaseAnimator.StateTransitioningContainer.Child.view.getter((uint64_t)v94);
    unint64_t v63 = v94[5];
    Array.subscript.getter();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    unint64_t v30 = v29 + 1;
    *((void *)v3 + 4) = to;
    *((void *)v3 + 5) = v29 + 1;
    AGGraphClearUpdate();
    unint64_t v31 = v4[4];
    unint64_t v32 = v4[5];
    unint64_t v62 = v4[3];
    unint64_t v64 = v31;
    unint64_t v63 = v32;
    closure #1 in PhaseAnimator.StateTransitioningContainer.Child.advance(to:)(&v81);
    AGGraphSetUpdate();
    uint64_t v33 = v81;
    unint64_t v80 = v81;
    unint64_t v81 = __PAIR64__(v70, v71);
    unint64_t v82 = __PAIR64__(v68, v69);
    unint64_t v83 = __PAIR64__(v76, v77);
    unint64_t v84 = __PAIR64__(v66, v67);
    Swift::Int v85 = to;
    unint64_t v86 = v30;
    unsigned int v87 = v65;
    uint64_t v88 = v10;
    char v89 = v11;
    uint64_t v90 = v75;
    uint64_t v91 = v74;
    unsigned int v92 = v73;
    char v93 = v72;
    PhaseAnimator.StateTransitioningContainer.Child.view.getter((uint64_t)v94);
    int v34 = (uint64_t (*)(char *))v94[3];
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v35 = v34(v78);
    swift_release();
    if (v35)
    {
      if (AGGraphGetCurrentAttribute() != *MEMORY[0x263F288F8])
      {
        id v39 = (id)AGGraphGetAttributeGraph();
        unint64_t v37 = v62;
        goto LABEL_18;
      }
      id v36 = (id)AGSubgraphGetCurrent();
      unint64_t v37 = v62;
      if (v36)
      {
        int v38 = v36;
        id v39 = (id)AGSubgraphGetGraph();

LABEL_18:
        if (AGGraphGetContext())
        {
          uint64_t v47 = swift_allocObject();
          swift_retain();

          swift_weakInit();
          swift_release();
          uint64_t v48 = *((void *)v3 + 5);
          uint64_t v49 = (void *)swift_allocObject();
          v49[2] = v79;
          v49[3] = v37;
          unint64_t v50 = v63;
          v49[4] = v64;
          v49[5] = v50;
          v49[6] = v47;
          v49[7] = *((void *)v3 + 2);
          v49[8] = v48;
          type metadata accessor for CompletionListener();
          uint64_t v51 = swift_allocObject();
          *(void *)(v51 + 24) = v49;
          *(void *)(v51 + 32) = 0;
          *(_WORD *)(v51 + 40) = 0;
          *(void *)(v51 + 16) = partial apply for closure #2 in PhaseAnimator.StateTransitioningContainer.Child.advance(to:);
          swift_retain();
          swift_retain_n();
          swift_retain();
          specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v80, v35);
          swift_release_n();
          swift_release();
          Transaction.addAnimationLogicalListener(_:)(v51);
          swift_retain();
          specialized static Update.begin()();
          uint64_t v52 = swift_allocObject();
          *(void *)(v52 + 16) = partial apply for closure #3 in PhaseAnimator.StateTransitioningContainer.Child.advance(to:);
          *(void *)(v52 + 24) = v51;
          uint64_t v53 = one-time initialization token for actions;
          swift_retain();
          if (v53 != -1) {
            swift_once();
          }
          uint64_t v54 = static Update.actions;
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v54[2] + 1, 1, v54);
          }
          unint64_t v56 = v54[2];
          unint64_t v55 = v54[3];
          if (v56 >= v55 >> 1) {
            uint64_t v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v55 > 1), v56 + 1, 1, v54);
          }
          v54[2] = v56 + 1;
          char v57 = &v54[2 * v56];
          v57[4] = partial apply for thunk for @escaping @callee_guaranteed () -> ();
          v57[5] = v52;
          static Update.actions = v54;
          swift_bridgeObjectRelease();
          static Update.end()();
          swift_release();
          swift_release();
          swift_release_n();
          uint64_t v33 = v80;
          unint64_t v42 = v79;
          unint64_t v43 = v64;
          unint64_t v44 = v63;
          goto LABEL_29;
        }
        __break(1u);
LABEL_32:
        __break(1u);
      }
LABEL_33:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return;
    }
    unsigned int v40 = v77;
    if (AGGraphGetCurrentAttribute() == *MEMORY[0x263F288F8])
    {
      id v41 = (id)AGSubgraphGetCurrent();
      unint64_t v42 = v79;
      unint64_t v37 = v62;
      unint64_t v43 = v64;
      unint64_t v44 = v63;
      if (!v41) {
        goto LABEL_33;
      }
      int v45 = v41;
      id v46 = (id)AGSubgraphGetGraph();
    }
    else
    {
      id v46 = (id)AGGraphGetAttributeGraph();
      unint64_t v42 = v79;
      unint64_t v37 = v62;
      unint64_t v43 = v64;
      unint64_t v44 = v63;
    }
    if (AGGraphGetContext())
    {
      swift_retain();

      uint64_t v58 = swift_allocObject();
      *(void *)(v58 + 16) = v42;
      *(void *)(v58 + 24) = v37;
      *(void *)(v58 + 32) = v43;
      *(void *)(v58 + 40) = v44;
      unsigned int v59 = v76;
      *(_DWORD *)(v58 + 48) = v40;
      *(_DWORD *)(v58 + 52) = v59;
      *(void *)(v58 + 56) = v30;
      GraphHost.continueTransaction(_:)((uint64_t)partial apply for closure #4 in PhaseAnimator.StateTransitioningContainer.Child.advance(to:), v58);
      swift_release();
      swift_release();
LABEL_29:
      swift_retain();
      swift_release();
      *((void *)v3 + 10) = v33;
      AGGraphClearUpdate();
      unint64_t v81 = v42;
      unint64_t v82 = v37;
      unint64_t v83 = v43;
      unint64_t v84 = v44;
      type metadata accessor for PhaseAnimator.StateTransitioningContainer.Child();
      unsigned int v60 = *(_DWORD *)AGGraphGetValue();
      AGGraphSetUpdate();
      swift_release();
      (*(void (**)(char *, unint64_t))(v61 + 8))(v78, v42);
      v3[22] = v60;
      *((unsigned char *)v3 + 92) = 0;
      return;
    }
    goto LABEL_32;
  }

  PhaseAnimator.StateTransitioningContainer.Child.advance(from:)(to);
}

uint64_t closure #1 in PhaseAnimator.StateTransitioningContainer.Child.advance(to:)@<X0>(void *a1@<X8>)
{
  type metadata accessor for PhaseAnimator.StateTransitioningContainer.Child();
  *a1 = *(void *)AGGraphGetValue();

  return swift_retain();
}

uint64_t closure #2 in PhaseAnimator.StateTransitioningContainer.Child.advance(to:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  uint64_t v16 = static Update._lock;
  _MovableLockLock(static Update._lock);
  specialized static Update.begin()();
  closure #1 in closure #2 in PhaseAnimator.StateTransitioningContainer.Child.advance(to:)(a2, a3, a4, a1 & 1, a5, a6, a7, a8);
  static Update.end()();

  return _MovableLockUnlock(v16);
}

uint64_t closure #1 in closure #2 in PhaseAnimator.StateTransitioningContainer.Child.advance(to:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v16 = result;
    swift_beginAccess();
    if (*(unsigned char *)(v16 + 128) == 1)
    {
      uint64_t v17 = swift_allocObject();
      *(void *)(v17 + 16) = a5;
      *(void *)(v17 + 24) = a6;
      *(void *)(v17 + 32) = a7;
      *(void *)(v17 + 40) = a8;
      *(void *)(v17 + 48) = a2;
      *(void *)(v17 + 56) = a3;
      *(unsigned char *)(v17 + 64) = a4 & 1;
      int v18 = _threadTransactionID();
      swift_retain();
      specialized GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)(0, v18, (void **)partial apply for closure #1 in closure #1 in closure #2 in PhaseAnimator.StateTransitioningContainer.Child.advance(to:), v17, 1, 1);
      swift_release();
      return swift_release_n();
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

uint64_t closure #1 in closure #1 in closure #2 in PhaseAnimator.StateTransitioningContainer.Child.advance(to:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t result = AGWeakAttributeGetAttribute();
  if (result != *MEMORY[0x263F288F8])
  {
    int v14 = result;
    uint64_t v19 = a2;
    char v20 = a3 & 1;
    MEMORY[0x270FA5388](result);
    uint64_t v21 = a4;
    uint64_t v22 = a5;
    uint64_t v23 = a6;
    uint64_t v24 = a7;
    uint64_t v17 = type metadata accessor for PhaseAnimator.StateTransitioningContainer.AnimationCompletion();
    int v18 = v14;
    return _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v19, (uint64_t)partial apply for closure #1 in Attribute.setValue(_:), (uint64_t)&v16, v17, MEMORY[0x263F8E628], MEMORY[0x263F8D4F8], MEMORY[0x263F8E658], v15);
  }
  return result;
}

uint64_t closure #4 in PhaseAnimator.StateTransitioningContainer.Child.advance(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t result = AGWeakAttributeGetAttribute();
  if (result != *MEMORY[0x263F288F8])
  {
    int v12 = result;
    uint64_t v17 = a2;
    char v18 = 0;
    MEMORY[0x270FA5388](result);
    uint64_t v19 = a3;
    uint64_t v20 = a4;
    uint64_t v21 = a5;
    uint64_t v22 = a6;
    uint64_t v15 = type metadata accessor for PhaseAnimator.StateTransitioningContainer.AnimationCompletion();
    int v16 = v12;
    return _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v17, (uint64_t)closure #1 in Attribute.setValue(_:)partial apply, (uint64_t)&v14, v15, MEMORY[0x263F8E628], MEMORY[0x263F8D4F8], MEMORY[0x263F8E658], v13);
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PhaseAnimator<A, B>.StateTransitioningContainer.Child.EndlessLoopState(uint64_t a1, uint64_t a2)
{
  return static PhaseAnimator.StateTransitioningContainer.Child.EndlessLoopState.== infix(_:_:)(*(void *)a1, *(unsigned char *)(a1 + 8), *(void *)a2, *(unsigned char *)(a2 + 8));
}

uint64_t protocol witness for static StatefulRule.initialValue.getter in conformance PhaseAnimator<A, B>.StateTransitioningContainer.Child@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for PhaseAnimator.StateTransitioningContainer.Child.Value();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

Swift::Void __swiftcall PhaseAnimator.StateTransitioningContainer.TransactionRule.updateValue()()
{
  AGGraphGetValue();
  AGGraphGetValue();
  type metadata accessor for External<Bool>(0, &lazy cache variable for type metadata for UInt32?, MEMORY[0x263F8E8F8], MEMORY[0x263F8D8F0]);
  uint64_t Value = AGGraphGetValue();
  int v1 = *(_DWORD *)Value;
  char v2 = *(unsigned char *)(Value + 4);
  swift_retain();
  swift_retain();
  if ((v2 & 1) == 0)
  {
    AGGraphClearUpdate();
    int v3 = *(_DWORD *)AGGraphGetValue();
    AGGraphSetUpdate();
    if (v3 == v1)
    {
      swift_release();
      swift_retain();
    }
  }
  AGGraphSetOutputValue();
  swift_release();
  swift_release();
}

void protocol witness for StatefulRule.updateValue() in conformance PhaseAnimator<A, B>.StateTransitioningContainer.TransactionRule()
{
}

uint64_t PhaseAnimator.StateTransitioningContainer.VisibilityMutation.apply()()
{
  uint64_t result = AGWeakAttributeGetAttribute();
  if (result != *MEMORY[0x263F288F8]) {
    return AGGraphSetValue();
  }
  return result;
}

uint64_t PhaseAnimator.StateTransitioningContainer.VisibilityMutation.combine<A>(with:)(uint64_t a1)
{
  double v2 = MEMORY[0x270FA5388](a1);
  (*(void (**)(unsigned char *, double))(v4 + 16))(&v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)], v2);
  if ((swift_dynamicCast() & 1) == 0) {
    return 0;
  }
  char v5 = v16[16];
  int Attribute = AGWeakAttributeGetAttribute();
  int v7 = *MEMORY[0x263F288F8];
  BOOL v8 = Attribute == *MEMORY[0x263F288F8];
  int v9 = AGWeakAttributeGetAttribute();
  BOOL v10 = v9 == v7;
  BOOL v11 = v9 == v7;
  if (v8)
  {
    if (v9 == v7)
    {
LABEL_14:
      *(unsigned char *)(v1 + 8) = v5;
      return 1;
    }
    return 0;
  }
  int v12 = v9;
  uint64_t result = 0;
  if (v10) {
    int v12 = 0;
  }
  if (Attribute == v7) {
    int v14 = 0;
  }
  else {
    int v14 = Attribute;
  }
  if (!v11 && v14 == v12) {
    goto LABEL_14;
  }
  return result;
}

uint64_t protocol witness for GraphMutation.apply() in conformance PhaseAnimator<A, B>.StateTransitioningContainer.VisibilityMutation()
{
  return PhaseAnimator.StateTransitioningContainer.VisibilityMutation.apply()();
}

uint64_t protocol witness for GraphMutation.combine<A>(with:) in conformance PhaseAnimator<A, B>.StateTransitioningContainer.VisibilityMutation(uint64_t a1)
{
  return PhaseAnimator.StateTransitioningContainer.VisibilityMutation.combine<A>(with:)(a1);
}

uint64_t closure #1 in static PhaseAnimator.StateTransitioningContainer.appearanceHandler(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  uint64_t v14 = static Update._lock;
  _MovableLockLock(static Update._lock);
  specialized static Update.begin()();
  closure #1 in closure #1 in static PhaseAnimator.StateTransitioningContainer.appearanceHandler(_:_:)(a1, a2, a3 & 1, a4, a5, a6, a7);
  static Update.end()();

  return _MovableLockUnlock(v14);
}

uint64_t closure #1 in closure #1 in static PhaseAnimator.StateTransitioningContainer.appearanceHandler(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v14 = (void **)_threadTransactionData();
    if (v14)
    {
      type metadata accessor for PropertyList.Element();
      swift_unknownObjectRetain();
      uint64_t v14 = (void **)swift_dynamicCastClassUnconditional();
    }
    uint64_t v17 = a2;
    char v18 = a3 & 1;
    char v19 = 0;
    v16[0] = a4;
    v16[1] = a5;
    v16[2] = a6;
    v16[3] = a7;
    uint64_t v15 = type metadata accessor for PhaseAnimator.StateTransitioningContainer.VisibilityMutation();
    default argument 1 of GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)(v16);
    GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)(v14, (uint64_t)v16, (uint64_t)&v17, (uint64_t)&v19, 1, v15, (uint64_t)&protocol witness table for PhaseAnimator<A, B>.StateTransitioningContainer.VisibilityMutation);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t PhaseAnimator.EmptyPhasesView.body.getter@<X0>(uint64_t a1@<X8>)
{
  _s7SwiftUI16ImageProviderBoxCyAA0C0V05NamedcD0VGMaTm_0(0, &lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider, (uint64_t)&type metadata for Image.NamedImageProvider, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ImageProviderBox);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = 0xD00000000000001BLL;
  *(void *)(v2 + 24) = 0x8000000246223E80;
  *(_DWORD *)(v2 + 32) = 0;
  *(unsigned char *)(v2 + 36) = 1;
  *(_OWORD *)(v2 + 40) = xmmword_2461E55C0;
  *(void *)(v2 + 56) = 0xD00000000000001BLL;
  *(void *)(v2 + 64) = 0x8000000246223E80;
  *(_OWORD *)(v2 + 72) = xmmword_24619B530;
  *(unsigned char *)(v2 + 88) = 0;
  _s7SwiftUI16ImageProviderBoxCyAA0C0V05NamedcD0VGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for FontBox<Font.SystemProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Font.SystemProvider and conformance Font.SystemProvider, (uint64_t)&type metadata for Font.SystemProvider, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for FontBox);
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = 0x4040000000000000;
  *(void *)(v3 + 24) = 0;
  *(unsigned char *)(v3 + 32) = 1;
  *(_WORD *)(v3 + 33) = 3588;
  *(void *)(v3 + 40) = 0;
  *(unsigned char *)(v3 + 48) = 1;
  uint64_t KeyPath = swift_getKeyPath();
  if (one-time initialization token for red != -1) {
    swift_once();
  }
  uint64_t v5 = static Color.red;
  uint64_t v6 = one-time initialization token for yellow;
  swift_retain();
  if (v6 != -1) {
    swift_once();
  }
  uint64_t v7 = static Color.yellow;
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = KeyPath;
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 24) = 15;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(unsigned char *)(a1 + 64) = 1;
  *(void *)(a1 + 72) = v5;
  *(void *)(a1 + 80) = v7;
  *(unsigned char *)(a1 + 88) = 15;

  return swift_retain();
}

uint64_t View.phaseAnimator<A, B, C, D>(_:trigger:content:animation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  v19[0] = a8;
  v19[1] = a11;
  v19[2] = a13;
  v19[3] = a16;
  type metadata accessor for PhaseAnimator();
  swift_getWitnessTable();
  partial apply for closure #1 in View.phaseAnimator<A, B, C, D>(_:trigger:content:animation:)((uint64_t)v19);
  uint64_t v17 = type metadata accessor for CustomModifier();
  View.modifier<A>(_:)(v19, a7, v17);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in View.phaseAnimator<A, B, C, D>(_:trigger:content:animation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  *(void *)&long long v50 = a8;
  uint64_t v40 = a7;
  *(void *)&long long v48 = a6;
  *(void *)&long long v47 = a5;
  *(void *)&long long v51 = a4;
  *(void *)&long long v46 = a3;
  uint64_t v49 = a9;
  uint64_t v45 = a17;
  uint64_t v42 = a16;
  uint64_t v19 = *(void *)(a11 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v21 = (char *)&v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v43 = v21;
  double v23 = MEMORY[0x270FA5388](v22);
  uint64_t v44 = (uint64_t)&v38 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(double))(v25 + 16))(v23);
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
  uint64_t v39 = a11;
  v26(v21, a2, a11);
  unint64_t v27 = (void *)swift_allocObject();
  v27[2] = a7;
  uint64_t v28 = v50;
  v27[3] = v50;
  void v27[4] = a10;
  uint64_t v41 = a10;
  v27[5] = a11;
  v27[6] = a12;
  v27[7] = a13;
  v27[8] = a14;
  uint64_t v29 = v42;
  v27[9] = a15;
  v27[10] = v29;
  uint64_t v30 = v45;
  uint64_t v31 = v46;
  v27[11] = v45;
  v27[12] = v31;
  v27[13] = v51;
  unint64_t v32 = (void *)swift_allocObject();
  v32[2] = v40;
  v32[3] = v28;
  v32[4] = a10;
  v32[5] = v39;
  v32[6] = a12;
  v32[7] = a13;
  v32[8] = a14;
  v32[9] = a15;
  v32[10] = v29;
  uint64_t v33 = v47;
  v32[11] = v30;
  v32[12] = v33;
  v32[13] = v48;
  swift_retain();
  swift_retain();
  uint64_t v34 = v50;
  PhaseAnimator.init<A, B>(_:trigger:content:animation:)(v44, (uint64_t)v43, (uint64_t)partial apply for closure #1 in closure #1 in View.phaseAnimator<A, B, C, D>(_:trigger:content:animation:), (uint64_t)v27, (uint64_t)partial apply for closure #2 in closure #1 in View.phaseAnimator<A, B, C, D>(_:trigger:content:animation:), (uint64_t)v32, (uint64_t)&v57, v41);
  long long v47 = v57;
  long long v46 = v58;
  v52[0] = v57;
  v52[1] = v58;
  uint64_t v53 = v59;
  long long v48 = v60;
  long long v54 = v60;
  long long v51 = v61;
  long long v55 = v61;
  uint64_t v56 = v62;
  *(void *)&long long v63 = v34;
  *((void *)&v63 + 1) = a12;
  *(void *)&long long v64 = a14;
  *((void *)&v64 + 1) = v30;
  uint64_t v35 = type metadata accessor for PhaseAnimator();
  uint64_t WitnessTable = swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v52, v35, WitnessTable);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  long long v48 = v63;
  long long v47 = v64;
  long long v57 = v63;
  long long v58 = v64;
  uint64_t v59 = v65;
  long long v50 = v66;
  long long v60 = v66;
  long long v51 = v67;
  long long v61 = v67;
  uint64_t v62 = v68;
  static ViewBuilder.buildExpression<A>(_:)(&v57, v35, WitnessTable);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t partial apply for closure #1 in View.phaseAnimator<A, B, C, D>(_:trigger:content:animation:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in View.phaseAnimator<A, B, C, D>(_:trigger:content:animation:)(v1[12], v1[13], v1[14], v1[15], v1[16], v1[17], v1[2], v1[3], a1, v1[4], v1[5], v1[6], v1[7], v1[8], v1[9], v1[10], v1[11]);
}

uint64_t closure #1 in closure #1 in View.phaseAnimator<A, B, C, D>(_:trigger:content:animation:)(uint64_t a1, void (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v16 = *(void *)(a8 - 8);
  MEMORY[0x270FA5388](a1);
  char v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v20 = MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v27 - v21;
  uint64_t v24 = PlaceholderContentView.init()(v23, v20);
  a2(v24, a1);
  static ViewBuilder.buildExpression<A>(_:)(v18, a8, a13);
  uint64_t v25 = *(void (**)(char *, uint64_t))(v16 + 8);
  v25(v18, a8);
  static ViewBuilder.buildExpression<A>(_:)(v22, a8, a13);
  return ((uint64_t (*)(char *, uint64_t))v25)(v22, a8);
}

uint64_t type metadata accessor for PhaseAnimator()
{
  return swift_getGenericMetadata();
}

uint64_t View.phaseAnimator<A, B, C>(_:content:animation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  v23[0] = a7;
  v23[1] = a9;
  v23[2] = a11;
  v23[3] = a13;
  type metadata accessor for PhaseAnimator();
  swift_getWitnessTable();
  closure #1 in View.phaseAnimator<A, B, C>(_:content:animation:)(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t)v23, a9, a10, a11, a12, a13);
  uint64_t v16 = type metadata accessor for CustomModifier();
  View.modifier<A>(_:)(v23, a6, v16);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in View.phaseAnimator<A, B, C>(_:content:animation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  *(void *)&long long v32 = a5;
  *(void *)&long long v31 = a4;
  uint64_t v28 = a3;
  *(void *)&long long v29 = a2;
  uint64_t v33 = a9;
  uint64_t v27 = a11;
  double v17 = MEMORY[0x270FA5388](a1);
  *(void *)&long long v30 = (char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(double))(v19 + 16))(v17);
  double v20 = (void *)swift_allocObject();
  v20[2] = a6;
  v20[3] = a7;
  v20[4] = a8;
  v20[5] = a10;
  v20[6] = a11;
  v20[7] = a12;
  v20[8] = a13;
  v20[9] = a14;
  uint64_t v21 = v28;
  v20[10] = v29;
  v20[11] = v21;
  uint64_t v22 = (void *)swift_allocObject();
  v22[2] = a6;
  v22[3] = a7;
  v22[4] = a8;
  v22[5] = a10;
  v22[6] = v27;
  v22[7] = a12;
  v22[8] = a13;
  v22[9] = a14;
  uint64_t v23 = v32;
  v22[10] = v31;
  v22[11] = v23;
  swift_retain();
  swift_retain();
  PhaseAnimator.init<A>(_:content:animation:)(v30, (uint64_t)partial apply for closure #1 in closure #1 in View.phaseAnimator<A, B, C>(_:content:animation:), (uint64_t)v20, (uint64_t)partial apply for closure #2 in closure #1 in View.phaseAnimator<A, B, C>(_:content:animation:), (uint64_t)v22, a8, (uint64_t)&v39);
  long long v30 = v39;
  long long v29 = v40;
  v34[0] = v39;
  v34[1] = v40;
  uint64_t v35 = v41;
  long long v31 = v42;
  long long v36 = v42;
  long long v32 = v43;
  long long v37 = v43;
  uint64_t v38 = v44;
  *(void *)&long long v45 = a7;
  *((void *)&v45 + 1) = a10;
  *(void *)&long long v46 = a12;
  *((void *)&v46 + 1) = a14;
  uint64_t v24 = type metadata accessor for PhaseAnimator();
  uint64_t WitnessTable = swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v34, v24, WitnessTable);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  long long v30 = v45;
  long long v29 = v46;
  long long v39 = v45;
  long long v40 = v46;
  uint64_t v41 = v47;
  long long v31 = v48;
  long long v42 = v48;
  long long v32 = v49;
  long long v43 = v49;
  uint64_t v44 = v50;
  static ViewBuilder.buildExpression<A>(_:)(&v39, v24, WitnessTable);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t associated type witness table accessor for View.Body : View in PhaseAnimator<A, B>()
{
  return associated type witness table accessor for View.Body : View in PhaseAnimator<A, B>();
}

{
  return swift_getOpaqueTypeConformance2();
}

uint64_t destroy for PhaseAnimator()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for PhaseAnimator(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for PhaseAnimator(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = a2[4];
  a1[3] = a2[3];
  a1[4] = v5;
  swift_retain();
  swift_release();
  a1[5] = a2[5];
  swift_retain();
  swift_release();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_retain();
  swift_release();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for PhaseAnimator(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release();
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v4;
  swift_release();
  uint64_t v5 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v5;
  swift_release();
  return a1;
}

uint64_t closure #1 in closure #1 in View.phaseAnimator<A, B, C>(_:content:animation:)(uint64_t a1, void (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v14 = *(void *)(a7 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v18 = MEMORY[0x270FA5388](v17);
  double v20 = (char *)&v25 - v19;
  uint64_t v22 = PlaceholderContentView.init()(v21, v18);
  a2(v22, a1);
  static ViewBuilder.buildExpression<A>(_:)(v16, a7, a11);
  uint64_t v23 = *(void (**)(char *, uint64_t))(v14 + 8);
  v23(v16, a7);
  static ViewBuilder.buildExpression<A>(_:)(v20, a7, a11);
  return ((uint64_t (*)(char *, uint64_t))v23)(v20, a7);
}

uint64_t closure #1 in closure #3 in static PhaseAnimator.StateTransitioningContainer._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void, void *), uint64_t a7)
{
  v14[0] = a2;
  v14[1] = a3;
  v14[2] = a4;
  v14[3] = a5;
  v13[2] = a6(0, v14);
  v13[3] = a3;
  uint64_t v10 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, a7, (uint64_t)v13, a3, MEMORY[0x263F8E628], v10, MEMORY[0x263F8E658], v11);
  return v14[0];
}

void CompletionListener.animationWasAdded()()
{
  ++*(void *)(v0 + 32);
  *(unsigned char *)(v0 + 40) = 1;
}

uint64_t CompletionListener.animationWasRemoved()()
{
  uint64_t v1 = *(void *)(v0 + 32) - 1;
  *(void *)(v0 + 32) = v1;
  if (!v1 && (*(unsigned char *)(v0 + 41) & 1) == 0)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v0 + 16))(1);
    *(unsigned char *)(v0 + 41) = 1;
  }
  return result;
}

void CompletionListener.__allocating_init()()
{
}

uint64_t CompletionListener.__deallocating_deinit()
{
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CompletionListener()
{
  return self;
}

uint64_t sub_245FD86D8()
{
  return swift_getWitnessTable();
}

uint64_t sub_245FD87E0()
{
  return swift_getWitnessTable();
}

uint64_t sub_245FD88A0()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for PhaseAnimator.Behavior()
{
  return swift_getGenericMetadata();
}

uint64_t destroy for PhaseAnimator.StateTransitioningContainer()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for PhaseAnimator.StateTransitioningContainer(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for PhaseAnimator.StateTransitioningContainer(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = a2[4];
  a1[3] = a2[3];
  a1[4] = v5;
  swift_retain();
  swift_release();
  a1[5] = a2[5];
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for PhaseAnimator.StateTransitioningContainer(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  a1[2] = a2[2];
  swift_release();
  return a1;
}

uint64_t associated type witness table accessor for View.Body : View in PhaseAnimator<A, B>.EmptyPhasesView()
{
  return associated type witness table accessor for View.Body : View in PhaseAnimator<A, B>();
}

uint64_t type metadata accessor for PhaseAnimator.StateTransitioningContainer.AnimationCompletion()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for PhaseAnimator.StateTransitioningContainer.Child.Value()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for PhaseAnimator.StateTransitioningContainer.Child()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for PhaseAnimator.StateTransitioningContainer.TransactionRule()
{
  return swift_getGenericMetadata();
}

uint64_t lazy protocol witness table accessor for type External<Bool> and conformance External<A>(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for External<Bool>(255, a2, a3, MEMORY[0x263F288C8]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_245FD8FF4()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t sub_245FD902C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static PhaseAnimator.StateTransitioningContainer.appearanceHandler(_:_:)()
{
  return partial apply for closure #1 in static PhaseAnimator.StateTransitioningContainer.appearanceHandler(_:_:)((uint64_t (*)(void, void, void, void, void, void, void))closure #1 in static PhaseAnimator.StateTransitioningContainer.appearanceHandler(_:_:));
}

uint64_t type metadata accessor for PhaseAnimator.StateTransitioningContainer.VisibilityMutation()
{
  return swift_getGenericMetadata();
}

uint64_t sub_245FD911C()
{
  return swift_deallocObject();
}

uint64_t sub_245FD917C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in View.phaseAnimator<A, B, C>(_:content:animation:)(uint64_t a1)
{
  return closure #1 in closure #1 in View.phaseAnimator<A, B, C>(_:content:animation:)(a1, *(void (**)(uint64_t, uint64_t))(v1 + 80), *(void *)(v1 + 88), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 72));
}

uint64_t partial apply for closure #2 in closure #1 in View.phaseAnimator<A, B, C>(_:content:animation:)()
{
  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t sub_245FD921C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in View.phaseAnimator<A, B, C, D>(_:trigger:content:animation:)(uint64_t a1)
{
  return closure #1 in closure #1 in View.phaseAnimator<A, B, C, D>(_:trigger:content:animation:)(a1, *(void (**)(uint64_t, uint64_t))(v1 + 96), *(void *)(v1 + 104), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 72), *(void *)(v1 + 80), *(void *)(v1 + 88));
}

uint64_t partial apply for closure #2 in closure #1 in View.phaseAnimator<A, B, C, D>(_:trigger:content:animation:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t type metadata instantiation function for PhaseAnimator.StateTransitioningContainer.Child(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 88);
}

uint64_t destroy for PhaseAnimator.StateTransitioningContainer.Child(uint64_t a1)
{
  if (*(void *)(a1 + 72) != 1) {
    swift_release();
  }

  return swift_release();
}

uint64_t initializeWithCopy for PhaseAnimator.StateTransitioningContainer.Child(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  uint64_t v5 = *(void *)(a2 + 72);
  if (v5 != 1) {
    uint64_t v5 = swift_retain();
  }
  uint64_t v6 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = v5;
  *(void *)(a1 + 80) = v6;
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(unsigned char *)(a1 + 92) = *(unsigned char *)(a2 + 92);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for PhaseAnimator.StateTransitioningContainer.Child(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 56) = v4;
  uint64_t v5 = (uint64_t *)(a1 + 72);
  uint64_t v6 = *(void *)(a1 + 72);
  uint64_t v7 = *(void *)(a2 + 72);
  if (v6 == 1)
  {
    if (v7 != 1)
    {
      *uint64_t v5 = v7;
      swift_retain();
      goto LABEL_9;
    }
    uint64_t v8 = 1;
  }
  else
  {
    if (v7 != 1)
    {
      *uint64_t v5 = v7;
      swift_retain();
      swift_release();
      goto LABEL_9;
    }
    uint64_t v9 = type metadata accessor for PhaseAnimator.Behavior();
    (*(void (**)(uint64_t *, uint64_t))(*(void *)(v9 - 8) + 8))(v5, v9);
    uint64_t v8 = *(void *)(a2 + 72);
  }
  *uint64_t v5 = v8;
LABEL_9:
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_retain();
  swift_release();
  int v10 = *(_DWORD *)(a2 + 88);
  *(unsigned char *)(a1 + 92) = *(unsigned char *)(a2 + 92);
  *(_DWORD *)(a1 + 88) = v10;
  return a1;
}

__n128 __swift_memcpy93_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 77) = *(_OWORD *)(a2 + 77);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for PhaseAnimator.StateTransitioningContainer.Child(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  long long v5 = (void *)(a1 + 72);
  uint64_t v6 = *(void *)(a2 + 72);
  if (*(void *)(a1 + 72) != 1)
  {
    if (v6 != 1)
    {
      *long long v5 = v6;
      swift_release();
      goto LABEL_6;
    }
    uint64_t v7 = type metadata accessor for PhaseAnimator.Behavior();
    (*(void (**)(void *, uint64_t))(*(void *)(v7 - 8) + 8))(v5, v7);
    uint64_t v6 = *(void *)(a2 + 72);
  }
  *long long v5 = v6;
LABEL_6:
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_release();
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(unsigned char *)(a1 + 92) = *(unsigned char *)(a2 + 92);
  return a1;
}

uint64_t getEnumTagSinglePayload for PhaseAnimator.StateTransitioningContainer.Child(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 93)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 80);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PhaseAnimator.StateTransitioningContainer.Child(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 92) = 0;
    *(_DWORD *)(result + 88) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 93) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 93) = 0;
    }
    if (a2) {
      *(void *)(result + 80) = a2;
    }
  }
  return result;
}

uint64_t type metadata completion function for PhaseAnimator.StateTransitioningContainer.Child.Value()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PhaseAnimator.StateTransitioningContainer.Child.Value(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8 | 5) > 0x18)
  {
    uint64_t v9 = *a2;
    *int v4 = *a2;
    int v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    int v10 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v11 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *int v10 = *v11;
    unint64_t v12 = ((unint64_t)v11 + 11) & 0xFFFFFFFFFFFFFFF8;
    int v13 = *(_DWORD *)v12;
    unint64_t v14 = ((unint64_t)v10 + 11) & 0xFFFFFFFFFFFFFFF8;
    *(unsigned char *)(v14 + 4) = *(unsigned char *)(v12 + 4);
    *(_DWORD *)unint64_t v14 = v13;
  }
  swift_retain();
  return v4;
}

uint64_t destroy for PhaseAnimator.StateTransitioningContainer.Child.Value(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 24) - 8) + 8))();

  return swift_release();
}

uint64_t initializeWithCopy for PhaseAnimator.StateTransitioningContainer.Child.Value(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  unint64_t v9 = ((unint64_t)v7 + 11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = ((unint64_t)v8 + 11) & 0xFFFFFFFFFFFFFFF8;
  char v11 = *(unsigned char *)(v10 + 4);
  *(_DWORD *)unint64_t v9 = *(_DWORD *)v10;
  *(unsigned char *)(v9 + 4) = v11;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for PhaseAnimator.StateTransitioningContainer.Child.Value(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 11;
  *int v7 = *(void *)(v8 & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  unint64_t v10 = ((unint64_t)v7 + 11) & 0xFFFFFFFFFFFFFFF8;
  int v11 = *(_DWORD *)(v9 & 0xFFFFFFFFFFFFFFF8);
  *(unsigned char *)(v10 + 4) = *(unsigned char *)((v9 & 0xFFFFFFFFFFFFFFF8) + 4);
  *(_DWORD *)unint64_t v10 = v11;
  return a1;
}

uint64_t initializeWithTake for PhaseAnimator.StateTransitioningContainer.Child.Value(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  unint64_t v9 = ((unint64_t)v7 + 11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = ((unint64_t)v8 + 11) & 0xFFFFFFFFFFFFFFF8;
  char v11 = *(unsigned char *)(v10 + 4);
  *(_DWORD *)unint64_t v9 = *(_DWORD *)v10;
  *(unsigned char *)(v9 + 4) = v11;
  return a1;
}

uint64_t assignWithTake for PhaseAnimator.StateTransitioningContainer.Child.Value(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)v8;
  v8 += 11;
  *int v7 = v9;
  swift_release();
  unint64_t v10 = ((unint64_t)v7 + 11) & 0xFFFFFFFFFFFFFFF8;
  int v11 = *(_DWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
  *(unsigned char *)(v10 + 4) = *(unsigned char *)((v8 & 0xFFFFFFFFFFFFFFF8) + 4);
  *(_DWORD *)unint64_t v10 = v11;
  return a1;
}

uint64_t getEnumTagSinglePayload for PhaseAnimator.StateTransitioningContainer.Child.Value(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFE) {
    unsigned int v7 = 2147483646;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2 && *((unsigned char *)a1 + ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8 | 5))) {
    return v7 + *a1 + 1;
  }
  if (v5 >= 0x7FFFFFFE) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v9 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v9) = -1;
  }
  int v10 = v9 - 1;
  if (v10 < 0) {
    int v10 = -1;
  }
  return (v10 + 1);
}

void storeEnumTagSinglePayload for PhaseAnimator.StateTransitioningContainer.Child.Value(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFE) {
    unsigned int v8 = 2147483646;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64);
  size_t v10 = (((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8 | 5;
  if (v8 >= a2)
  {
    if (v8 < a3) {
      a1[v10] = 0;
    }
    if (a2)
    {
      if (v7 < 0x7FFFFFFE)
      {
        int v13 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
        if (a2 > 0x7FFFFFFE) {
          uint64_t v14 = a2 - 0x7FFFFFFF;
        }
        else {
          uint64_t v14 = a2;
        }
        *int v13 = v14;
      }
      else
      {
        unint64_t v12 = *(void (**)(void))(v6 + 56);
        v12();
      }
    }
  }
  else
  {
    unsigned int v11 = ~v8 + a2;
    bzero(a1, v10);
    *(_DWORD *)a1 = v11;
    if (v8 < a3) {
      a1[v10] = 1;
    }
  }
}

uint64_t sub_245FD9DA4()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _ForegroundStyleModifier<Color>>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _ForegroundStyleModifier<Color>>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _ForegroundStyleModifier<Color>>, _BackgroundStyleModifier<Color>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _ForegroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _ForegroundStyleModifier<Color>>, _BackgroundStyleModifier<Color>>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _ForegroundStyleModifier<Color>>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _ForegroundStyleModifier<Color>>, _BackgroundStyleModifier<Color>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), unint64_t *a4, uint64_t (*a5)(void, ValueMetadata *, _UNKNOWN **))
{
  if (!*a2)
  {
    a3(255);
    type metadata accessor for _ForegroundStyleModifier<Color>(255, a4, a5);
    unint64_t v8 = type metadata accessor for ModifiedContent();
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>)
  {
    type metadata accessor for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>);
    }
  }
}

void type metadata accessor for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Font?>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>);
    }
  }
}

void type metadata accessor for External<Bool>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void type metadata accessor for _ForegroundStyleModifier<Color>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, ValueMetadata *, _UNKNOWN **))
{
  if (!*a2)
  {
    unint64_t v4 = a3(0, &type metadata for Color, &protocol witness table for Color);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _ForegroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _ForegroundStyleModifier<Color>>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _ForegroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _ForegroundStyleModifier<Color>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _ForegroundStyleModifier<Color>>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _ForegroundStyleModifier<Color>>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t base witness table accessor for _AttributeBody in PhaseAnimator<A, B>.StateTransitioningContainer.TransactionRule()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in PhaseAnimator<A, B>.StateTransitioningContainer.Child()
{
  return swift_getWitnessTable();
}

uint64_t outlined retain of PhaseAnimator<A, B>.StateTransitioningContainer(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of PhaseAnimator<A, B>.StateTransitioningContainer(uint64_t a1)
{
  return a1;
}

uint64_t type metadata accessor for PhaseAnimator.StateTransitioningContainer.Child.EndlessLoopState()
{
  return swift_getGenericMetadata();
}

uint64_t sub_245FDA2BC()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #4 in PhaseAnimator.StateTransitioningContainer.Child.advance(to:)()
{
  return closure #4 in PhaseAnimator.StateTransitioningContainer.Child.advance(to:)(v0[6], v0[7], v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_245FDA2DC()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in PhaseAnimator.StateTransitioningContainer.Child.advance(to:)(char a1)
{
  return closure #2 in PhaseAnimator.StateTransitioningContainer.Child.advance(to:)(a1, v1[6], v1[7], v1[8], v1[2], v1[3], v1[4], v1[5]);
}

uint64_t partial apply for closure #3 in PhaseAnimator.StateTransitioningContainer.Child.advance(to:)()
{
  if ((*(unsigned char *)(v0 + 40) & 1) == 0)
  {
    uint64_t result = (*(uint64_t (**)(void))(v0 + 16))(0);
    *(unsigned char *)(v0 + 41) = 1;
  }
  return result;
}

uint64_t sub_245FDA368()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_245FDA3A0()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #2 in PhaseAnimator.StateTransitioningContainer.Child.advance(to:)()
{
  return partial apply for closure #1 in static PhaseAnimator.StateTransitioningContainer.appearanceHandler(_:_:)((uint64_t (*)(void, void, void, void, void, void, void))closure #1 in closure #1 in closure #2 in PhaseAnimator.StateTransitioningContainer.Child.advance(to:));
}

uint64_t partial apply for closure #1 in static PhaseAnimator.StateTransitioningContainer.appearanceHandler(_:_:)(uint64_t (*a1)(void, void, void, void, void, void, void))
{
  return a1(*(void *)(v1 + 48), *(void *)(v1 + 56), *(unsigned __int8 *)(v1 + 64), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t type metadata completion function for TimeDataFormatting.Configuration()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TimeDataFormatting.Configuration(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 40 > 0x18)
  {
    uint64_t v9 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v12 = *(void *)(v11 + 24);
    *(void *)(v10 + 24) = v12;
    *(void *)(v10 + 32) = *(void *)(v11 + 32);
    (**(void (***)(unint64_t, unint64_t))(v12 - 8))(v10, v11);
    unint64_t v13 = (v10 + 47) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v14 = (v11 + 47) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v15 = *(void *)(v14 + 24);
    if (v15 < 0xFFFFFFFF)
    {
      long long v16 = *(_OWORD *)v14;
      long long v17 = *(_OWORD *)(v14 + 16);
      *(void *)(v13 + 32) = *(void *)(v14 + 32);
      *(_OWORD *)unint64_t v13 = v16;
      *(_OWORD *)(v13 + 16) = v17;
    }
    else
    {
      *(void *)(v13 + 24) = v15;
      *(void *)(v13 + 32) = *(void *)(v14 + 32);
      (**(void (***)(void))(v15 - 8))();
    }
  }
  return v4;
}

unint64_t destroy for TimeDataFormatting.Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v3)();
  unint64_t v4 = (a1 + *(void *)(v3 + 56) + 7) & 0xFFFFFFFFFFFFFFF8;
  __swift_destroy_boxed_opaque_existential_1(v4);
  unint64_t result = (v4 + 47) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(result + 24) >= 0xFFFFFFFFuLL) {
    return __swift_destroy_boxed_opaque_existential_1(result);
  }
  return result;
}

uint64_t initializeWithCopy for TimeDataFormatting.Configuration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)(v8 + 24);
  *(void *)(v7 + 24) = v9;
  *(void *)(v7 + 32) = *(void *)(v8 + 32);
  (**(void (***)(unint64_t, unint64_t))(v9 - 8))(v7, v8);
  unint64_t v10 = (v7 + 47) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = (v8 + 47) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = *(void *)(v11 + 24);
  if (v12 < 0xFFFFFFFF)
  {
    long long v13 = *(_OWORD *)v11;
    long long v14 = *(_OWORD *)(v11 + 16);
    *(void *)(v10 + 32) = *(void *)(v11 + 32);
    *(_OWORD *)unint64_t v10 = v13;
    *(_OWORD *)(v10 + 16) = v14;
  }
  else
  {
    *(void *)(v10 + 24) = v12;
    *(void *)(v10 + 32) = *(void *)(v11 + 32);
    (**(void (***)(void))(v12 - 8))();
  }
  return a1;
}

uint64_t assignWithCopy for TimeDataFormatting.Configuration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  unint64_t v7 = (uint64_t *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v8 = (uint64_t *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  __swift_assign_boxed_opaque_existential_1(v7, v8);
  unint64_t v9 = ((unint64_t)v7 + 47) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = ((unint64_t)v8 + 47) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = *(void *)(v10 + 24);
  if (*(void *)(v9 + 24) < 0xFFFFFFFFuLL)
  {
    if (v11 >= 0xFFFFFFFF)
    {
      *(void *)(v9 + 24) = v11;
      *(void *)(v9 + 32) = *(void *)(v10 + 32);
      (**(void (***)(unint64_t, unint64_t))(v11 - 8))(v9, ((unint64_t)v8 + 47) & 0xFFFFFFFFFFFFFFF8);
      return a1;
    }
LABEL_7:
    long long v12 = *(_OWORD *)v10;
    long long v13 = *(_OWORD *)(v10 + 16);
    *(void *)(v9 + 32) = *(void *)(v10 + 32);
    *(_OWORD *)unint64_t v9 = v12;
    *(_OWORD *)(v9 + 16) = v13;
    return a1;
  }
  if (v11 < 0xFFFFFFFF)
  {
    __swift_destroy_boxed_opaque_existential_1(v9);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)v9, (uint64_t *)(((unint64_t)v8 + 47) & 0xFFFFFFFFFFFFFFF8));
  return a1;
}

uint64_t initializeWithTake for TimeDataFormatting.Configuration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  long long v9 = *(_OWORD *)v8;
  long long v10 = *(_OWORD *)(v8 + 16);
  *(void *)(v7 + 32) = *(void *)(v8 + 32);
  *(_OWORD *)unint64_t v7 = v9;
  *(_OWORD *)(v7 + 16) = v10;
  unint64_t v11 = (v7 + 47) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = (v8 + 47) & 0xFFFFFFFFFFFFFFF8;
  long long v13 = *(_OWORD *)v12;
  long long v14 = *(_OWORD *)(v12 + 16);
  *(void *)(v11 + 32) = *(void *)(v12 + 32);
  *(_OWORD *)unint64_t v11 = v13;
  *(_OWORD *)(v11 + 16) = v14;
  return a1;
}

uint64_t assignWithTake for TimeDataFormatting.Configuration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  __swift_destroy_boxed_opaque_existential_1(v7);
  long long v9 = *(_OWORD *)v8;
  long long v10 = *(_OWORD *)(v8 + 16);
  *(void *)(v7 + 32) = *(void *)(v8 + 32);
  *(_OWORD *)unint64_t v7 = v9;
  *(_OWORD *)(v7 + 16) = v10;
  unint64_t v11 = (v7 + 47) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v11 + 24) >= 0xFFFFFFFFuLL) {
    __swift_destroy_boxed_opaque_existential_1((v7 + 47) & 0xFFFFFFFFFFFFFFF8);
  }
  unint64_t v12 = (v8 + 47) & 0xFFFFFFFFFFFFFFF8;
  long long v13 = *(_OWORD *)v12;
  long long v14 = *(_OWORD *)(v12 + 16);
  *(void *)(v11 + 32) = *(void *)(v12 + 32);
  *(_OWORD *)unint64_t v11 = v13;
  *(_OWORD *)(v11 + 16) = v14;
  return a1;
}

uint64_t getEnumTagSinglePayload for TimeDataFormatting.Configuration(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 40;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x245FDABD8);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)((((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 24);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

double storeEnumTagSinglePayload for TimeDataFormatting.Configuration(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 40;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return result;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return result;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_42;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 < 0x7FFFFFFF)
            {
              unint64_t v20 = (unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8;
              if ((a2 & 0x80000000) != 0)
              {
                double result = 0.0;
                *(_OWORD *)(v20 + 8) = 0u;
                *(_OWORD *)(v20 + 24) = 0u;
                *(void *)unint64_t v20 = a2 ^ 0x80000000;
              }
              else
              {
                *(void *)(v20 + 24) = a2 - 1;
              }
            }
            else
            {
              uint64_t v19 = *(void (**)(void))(v6 + 56);
              v19();
            }
          }
          break;
      }
      return result;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((v9 + 7) & 0xFFFFFFF8) + 47) & 0xFFFFFFF8) == 0xFFFFFFD8) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((v9 + 7) & 0xFFFFFFF8) + 47) & 0xFFFFFFF8) == 0xFFFFFFD8) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((((v9 + 7) & 0xFFFFFFF8) + 47) & 0xFFFFFFF8) != 0xFFFFFFD8)
  {
    int v17 = ~v8 + a2;
    bzero(a1, ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 40);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x245FDADECLL);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t type metadata accessor for TimeDataFormatting.Configuration()
{
  return swift_getGenericMetadata();
}

uint64_t static TimeDataFormatting.Configuration.makeConfiguration(from:format:sizeVariant:secondsUpdateFrequencyBudget:)(uint64_t a1, uint64_t a2, double a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v39 = a8;
  uint64_t v38 = a1;
  uint64_t v15 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](a1);
  int v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v34 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  unint64_t v20 = (char *)&v34 - v19;
  uint64_t v21 = *a5;
  uint64_t v36 = v22;
  uint64_t v23 = *(int *)(v22 + 48);
  *(void *)&long long v46 = v21;
  char v24 = FormatStyle.exactSizeVariant(_:)((char *)&v34 - v19, (uint64_t *)&v46, a7);
  uint64_t v35 = v23;
  v20[v23] = v24 & 1;
  *(void *)&long long v42 = v21;
  uint64_t v25 = v39;
  DiscreteFormatStyle.alwaysOnDisplayFormat<A>(source:secondsUpdateFrequencyBudget:sizeVariant:)(a2, (uint64_t *)&v42, a7, a6, a9, v39, (uint64_t *)&v46, a3);
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  long long v37 = v17;
  v26(v17, a2, a6);
  DiscreteFormatStyle.paused<A>(accordingTo:)(a2, a7, a6, v25, (uint64_t *)&v40);
  if (*(void *)&v47[8])
  {
    outlined init with copy of AnyTrackedValue((uint64_t)&v46, (uint64_t)&v42);
    v43[24] = v47[24];
  }
  else
  {
    long long v42 = v46;
    *(_OWORD *)long long v43 = *(unint64_t *)v47;
    *(_OWORD *)&v43[9] = *(_OWORD *)&v47[9];
  }
  uint64_t v27 = v36;
  uint64_t v28 = v35;
  uint64_t v29 = v34;
  if (*(void *)&v43[8])
  {
    outlined init with take of ScrollStateRequest(&v42, (uint64_t)v44);
  }
  else
  {
    memset(v44, 0, sizeof(v44));
    uint64_t v45 = 0;
  }
  __n128 v30 = TimeDataFormatting.Configuration.init(source:highFrequencyFormat:lowFrequencyFormat:)((uint64_t)v37, &v40, (uint64_t)v44, a6, v38);
  int v31 = v20[v28];
  (*(void (**)(char *, uint64_t, __n128))(v29 + 8))(v20, v27, v30);
  long long v42 = v46;
  *(_OWORD *)long long v43 = *(_OWORD *)v47;
  *(_OWORD *)&v43[9] = *(_OWORD *)&v47[9];
  if (v31 == 1)
  {
    if (*(void *)&v43[8]) {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v42);
    }
    return 1;
  }
  else
  {
    *(_OWORD *)((char *)v41 + 9) = *(_OWORD *)&v43[9];
    v41[0] = *(_OWORD *)v43;
    long long v40 = v42;
    if (*(void *)&v43[8])
    {
      uint64_t v32 = BYTE8(v41[1]);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v40);
    }
    else
    {
      return 0;
    }
  }
  return v32;
}

uint64_t TimeDataFormatting.Configuration.formatAndFrequency(for:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  unsigned int v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned int v12 = (uint64_t *)(a3 + *(int *)(type metadata accessor for ResolvableStringResolutionContext() + 20));
  uint64_t v13 = *v12;
  if (v12[1])
  {
    swift_retain_n();
    swift_retain_n();
    char v14 = specialized PropertyList.Tracker.value<A>(_:for:)(v13);
    swift_release_n();
  }
  else
  {
    uint64_t v15 = swift_retain_n();
    char v14 = specialized closure #1 in PropertyList.subscript.getter(v15);
  }
  swift_release_n();
  ResolvableStringResolutionContext.date.getter((uint64_t)v11);
  char v18 = v14 & 1;
  TimeDataFormatting.Configuration.formatAndFrequency(for:mode:)(a1, a2, (uint64_t)v11, &v18, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t static TimeDataFormatting.Configuration.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)&long long v50 = a3;
  *((void *)&v50 + 1) = a4;
  *(void *)&long long v51 = a5;
  *((void *)&v51 + 1) = a6;
  uint64_t v10 = type metadata accessor for TimeDataFormatting.Configuration();
  uint64_t v41 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  long long v40 = (char *)&v40 - v11;
  uint64_t v13 = *(int *)(v12 + 52);
  uint64_t v42 = a1;
  uint64_t v14 = *(void *)(a1 + v13 + 24);
  uint64_t v15 = __swift_project_boxed_opaque_existential_1((void *)(a1 + v13), v14);
  uint64_t v16 = *(int *)(v10 + 52);
  uint64_t v43 = a2;
  uint64_t v17 = (void *)(a2 + v16);
  uint64_t v18 = *(void *)(a2 + v16 + 24);
  uint64_t v19 = __swift_project_boxed_opaque_existential_1(v17, v18);
  *((void *)&v51 + 1) = v18;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v50);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v18 - 8) + 16))(boxed_opaque_existential_1, v19, v18);
  uint64_t v21 = (uint64_t)v15;
  uint64_t v22 = a4;
  LOBYTE(v18) = equals #1 <A, B><A1>(lhs:rhs:) in static TimeDataFormatting.Configuration.== infix(_:_:)(v21, (uint64_t)&v50, a3, a4, v14);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v50);
  if (v18)
  {
    uint64_t v23 = v42 + *(int *)(v10 + 56);
    if (*(void *)(v23 + 24))
    {
      outlined init with copy of AnyTrackedValue(v42 + *(int *)(v10 + 56), (uint64_t)&v47);
    }
    else
    {
      long long v25 = *(_OWORD *)(v23 + 16);
      long long v47 = *(_OWORD *)v23;
      long long v48 = v25;
      uint64_t v49 = *(void *)(v23 + 32);
    }
    uint64_t v26 = v43;
    if (*((void *)&v48 + 1))
    {
      outlined init with take of ScrollStateRequest(&v47, (uint64_t)&v50);
      uint64_t v27 = v26 + *(int *)(v10 + 56);
      if (*(void *)(v27 + 24))
      {
        outlined init with copy of AnyTrackedValue(v27, (uint64_t)&v44);
        if (*((void *)&v45 + 1))
        {
LABEL_9:
          outlined init with take of ScrollStateRequest(&v44, (uint64_t)&v47);
          uint64_t v28 = *((void *)&v51 + 1);
          uint64_t v29 = __swift_project_boxed_opaque_existential_1(&v50, *((uint64_t *)&v51 + 1));
          uint64_t v30 = *((void *)&v48 + 1);
          int v31 = __swift_project_boxed_opaque_existential_1(&v47, *((uint64_t *)&v48 + 1));
          *((void *)&v45 + 1) = v30;
          uint64_t v32 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v44);
          (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v30 - 8) + 16))(v32, v31, v30);
          char v24 = equals #1 <A, B><A1>(lhs:rhs:) in static TimeDataFormatting.Configuration.== infix(_:_:)((uint64_t)v29, (uint64_t)&v44, a3, v22, v28);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v44);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v47);
LABEL_20:
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v50);
          return v24 & 1;
        }
      }
      else
      {
        long long v33 = *(_OWORD *)(v27 + 16);
        long long v44 = *(_OWORD *)v27;
        long long v45 = v33;
        uint64_t v46 = *(void *)(v27 + 32);
        if (*((void *)&v33 + 1)) {
          goto LABEL_9;
        }
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v50);
    }
    uint64_t v35 = v40;
    uint64_t v34 = v41;
    if (*(void *)(v23 + 24))
    {
      outlined init with copy of AnyTrackedValue(v23, (uint64_t)&v50);
      if (*((void *)&v51 + 1))
      {
LABEL_14:
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v50);
        (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))(v35, v26, v10);
        (*(void (**)(char *, uint64_t))(v34 + 8))(v35, v10);
        char v24 = 0;
        return v24 & 1;
      }
    }
    else
    {
      long long v36 = *(_OWORD *)(v23 + 16);
      long long v50 = *(_OWORD *)v23;
      long long v51 = v36;
      uint64_t v52 = *(void *)(v23 + 32);
      if (*((void *)&v36 + 1)) {
        goto LABEL_14;
      }
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))(v35, v26, v10);
    uint64_t v37 = (uint64_t)&v35[*(int *)(v10 + 56)];
    if (*(void *)(v37 + 24))
    {
      outlined init with copy of AnyTrackedValue(v37, (uint64_t)&v50);
    }
    else
    {
      long long v38 = *(_OWORD *)(v37 + 16);
      long long v50 = *(_OWORD *)v37;
      long long v51 = v38;
      uint64_t v52 = *(void *)(v37 + 32);
    }
    (*(void (**)(char *, uint64_t))(v34 + 8))(v35, v10);
    char v24 = *((void *)&v51 + 1) == 0;
    if (*((void *)&v51 + 1)) {
      goto LABEL_20;
    }
  }
  else
  {
    char v24 = 0;
  }
  return v24 & 1;
}

uint64_t TimeDataFormatting.Configuration.formatAndFrequency(for:mode:)(uint64_t a1, char *a2, uint64_t a3, unsigned char *a4, uint64_t a5)
{
  long long v45 = a2;
  uint64_t v44 = a3;
  uint64_t v8 = *(void *)(a5 + 32);
  uint64_t v9 = *(void *)(a5 + 16);
  swift_getAssociatedTypeWitness();
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v39 - v12;
  _s10Foundation4DateVSgMaTm_5(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)&v39 - v15;
  uint64_t v17 = type metadata accessor for Date();
  double v20 = MEMORY[0x270FA5388](v17);
  if (*a4 != 1)
  {
    uint64_t v31 = v46 + *(int *)(a5 + 52);
    uint64_t v32 = a1;
    goto LABEL_9;
  }
  long long v40 = (char *)&v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = a1;
  uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t, double))(v8 + 72);
  uint64_t v43 = v19;
  uint64_t v22 = v10;
  uint64_t v23 = a5;
  uint64_t v24 = v46;
  uint64_t v25 = v21(v9, v8, v20);
  uint64_t v42 = &v39;
  MEMORY[0x270FA5388](v25);
  uint64_t v26 = *(void *)(v23 + 24);
  *(&v39 - 6) = v9;
  *(&v39 - 5) = v26;
  uint64_t v27 = *(void *)(v23 + 40);
  *(&v39 - 4) = v8;
  *(&v39 - 3) = v27;
  *(&v39 - 2) = v24;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in TimeDataFormatting.Configuration.formatAndFrequency(for:mode:), (uint64_t)(&v39 - 8), MEMORY[0x263F8E628], v17, v28, (uint64_t)v16);
  uint64_t v29 = v22;
  uint64_t v30 = v43;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v29);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v16, 1, v17) != 1)
  {
    long long v33 = v40;
    (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v40, v16, v17);
    lazy protocol witness table accessor for type Date and conformance Date();
    char v34 = dispatch thunk of static Comparable.< infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v33, v17);
    if (v34) {
      goto LABEL_6;
    }
    uint64_t v31 = v24 + *(int *)(v23 + 52);
    uint64_t v32 = v41;
LABEL_9:
    uint64_t result = outlined init with copy of AnyTrackedValue(v31, v32);
    goto LABEL_13;
  }
  _s10Foundation4DateVSgWOhTm_3((uint64_t)v16, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
LABEL_6:
  uint64_t v35 = v24 + *(int *)(v23 + 56);
  if (*(void *)(v35 + 24))
  {
    outlined init with copy of AnyTrackedValue(v35, (uint64_t)&v47);
  }
  else
  {
    long long v37 = *(_OWORD *)(v35 + 16);
    long long v47 = *(_OWORD *)v35;
    long long v48 = v37;
    uint64_t v49 = *(void *)(v35 + 32);
  }
  if (!*((void *)&v48 + 1))
  {
    uint64_t result = outlined init with copy of AnyTrackedValue(v24 + *(int *)(v23 + 52), v41);
    char v38 = 2;
    goto LABEL_14;
  }
  uint64_t result = outlined init with take of ScrollStateRequest(&v47, v41);
LABEL_13:
  char v38 = 3;
LABEL_14:
  *long long v45 = v38;
  return result;
}

uint64_t DiscreteFormatStyle.alwaysOnDisplayFormat<A>(source:secondsUpdateFrequencyBudget:sizeVariant:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>, double a8@<D0>)
{
  uint64_t v9 = v8;
  uint64_t v61 = a6;
  uint64_t v60 = a4;
  uint64_t v59 = a1;
  long long v63 = a7;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  long long v54 = (char *)&v52 - v14;
  uint64_t v15 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v52 - v20;
  uint64_t v22 = type metadata accessor for _MixedAoDFrequencyFormatInitializer();
  double v23 = MEMORY[0x270FA5388](v22);
  uint64_t v25 = (char *)&v52 - v24;
  uint64_t v62 = *a2;
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16);
  uint64_t v58 = v9;
  v26(v21, v9, a3, v23);
  uint64_t v56 = v15;
  uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
  uint64_t v53 = v21;
  uint64_t v52 = v27;
  v27(v25, v21, a3);
  uint64_t v57 = a5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v29 = swift_getAssociatedTypeWitness();
  v65[0] = AssociatedTypeWitness;
  v65[1] = v29;
  swift_getExtendedExistentialTypeMetadata_unique();
  if (swift_dynamicCast())
  {
    outlined init with take of ScrollStateRequest(&v72, (uint64_t)&v68);
    uint64_t v30 = *((void *)&v69 + 1);
    uint64_t v31 = v70;
    __swift_project_boxed_opaque_existential_1(&v68, *((uint64_t *)&v69 + 1));
    v65[0] = v62;
    LOBYTE(v30) = (*(uint64_t (**)(long long *, uint64_t *, uint64_t, uint64_t, double))(v31 + 24))(&v72, v65, v30, v31, a8);
    uint64_t v32 = v73;
    __swift_project_boxed_opaque_existential_1(&v72, v73);
    long long v33 = v63;
    DiscreteFormatStyle.paused<A>(accordingTo:)(v59, v32, v60, v61, v63);
    *((unsigned char *)v33 + 40) = v30 & 1;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v72);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v68);
  }
  else
  {
    uint64_t v35 = v62;
    long long v36 = v63;
    ((void (*)(char *, uint64_t, uint64_t))v26)(v18, v58, a3);
    type metadata accessor for UpdateFrequencyDependentFormatStyle();
    if (swift_dynamicCast())
    {
      outlined init with take of ScrollStateRequest(&v68, (uint64_t)&v72);
      uint64_t v37 = v73;
      uint64_t v38 = v74;
      __swift_project_boxed_opaque_existential_1(&v72, v73);
      LOBYTE(v68) = 2;
      uint64_t v39 = *(void (**)(long long *, uint64_t, uint64_t))(v38 + 16);
      uint64_t v66 = v37;
      uint64_t v67 = v38;
      __swift_allocate_boxed_opaque_existential_1(v65);
      v39(&v68, v37, v38);
      uint64_t v40 = v66;
      uint64_t v41 = v67;
      uint64_t v42 = __swift_project_boxed_opaque_existential_1(v65, v66);
      uint64_t v43 = *(void *)(v40 - 8);
      uint64_t v64 = v35;
      uint64_t v44 = v43;
      MEMORY[0x270FA5388](v42);
      uint64_t v46 = (char *)&v52 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
      char v47 = FormatStyle.exactSizeVariant(_:)(v46, &v64, v40);
      *((void *)&v69 + 1) = v40;
      uint64_t v70 = v41;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v68);
      (*(void (**)(uint64_t *, char *, uint64_t))(v44 + 32))(boxed_opaque_existential_1, v46, v40);
      char v71 = v47 & 1;
      type metadata accessor for (style: UpdateFrequencyDependentFormatStyle, exact: Bool)();
      uint64_t v49 = v54;
      uint64_t v50 = TupleTypeMetadata2;
      swift_dynamicCast();
      LOBYTE(v50) = v49[*(int *)(v50 + 48)];
      long long v51 = v53;
      v52(v53, v49, a3);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v65);
      DiscreteFormatStyle.paused<A>(accordingTo:)(v59, a3, v60, v61, v36);
      (*(void (**)(char *, uint64_t))(v56 + 8))(v51, a3);
      *((unsigned char *)v36 + 40) = v50;
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v72);
    }
    else
    {
      uint64_t v70 = 0;
      long long v68 = 0u;
      long long v69 = 0u;
      uint64_t result = _s10Foundation4DateVSgWOhTm_3((uint64_t)&v68, &lazy cache variable for type metadata for UpdateFrequencyDependentFormatStyle?, (void (*)(uint64_t))type metadata accessor for UpdateFrequencyDependentFormatStyle);
      *(_OWORD *)((char *)v36 + 25) = 0u;
      *(_OWORD *)long long v36 = 0u;
      *((_OWORD *)v36 + 1) = 0u;
    }
  }
  return result;
}

uint64_t DiscreteFormatStyle.paused<A>(accordingTo:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t v32 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v31 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v30 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = v15;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v17 = type metadata accessor for Optional();
  uint64_t v18 = *(void *)(v17 - 8);
  double v19 = MEMORY[0x270FA5388](v17);
  uint64_t v21 = (char *)&v29 - v20;
  (*(void (**)(uint64_t, uint64_t, double))(a4 + 72))(a3, a4, v19);
  LODWORD(AssociatedTypeWitness) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8)
                                                                                       + 48))(v21, 1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
  uint64_t v22 = (uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v32 + 16);
  if (AssociatedTypeWitness == 1)
  {
    uint64_t v23 = v34;
    a5[3] = a2;
    a5[4] = v23;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a5);
    return (*v22)(boxed_opaque_existential_1, v33, a2);
  }
  else
  {
    uint64_t v26 = (uint64_t)v30;
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v30, a1, a3);
    uint64_t v27 = (uint64_t)v31;
    (*v22)((uint64_t *)v31, v33, a2);
    uint64_t v35 = a3;
    uint64_t v36 = a2;
    uint64_t v37 = a4;
    uint64_t v38 = v34;
    a5[3] = type metadata accessor for PausedFormatStyle();
    a5[4] = swift_getWitnessTable();
    uint64_t v28 = __swift_allocate_boxed_opaque_existential_1(a5);
    return PausedFormatStyle.init(source:base:)(v26, v27, a3, a2, (uint64_t)v28);
  }
}

__n128 TimeDataFormatting.Configuration.init(source:highFrequencyFormat:lowFrequencyFormat:)@<Q0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5, a1, a4);
  uint64_t v8 = type metadata accessor for TimeDataFormatting.Configuration();
  outlined init with take of ScrollStateRequest(a2, a5 + *(int *)(v8 + 52));
  uint64_t v9 = a5 + *(int *)(v8 + 56);
  if (*(void *)(a3 + 24))
  {
    outlined init with take of ScrollStateRequest((long long *)a3, v9);
  }
  else
  {
    __n128 result = *(__n128 *)a3;
    long long v11 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)uint64_t v9 = *(_OWORD *)a3;
    *(_OWORD *)(v9 + 16) = v11;
    *(void *)(v9 + 32) = *(void *)(a3 + 32);
  }
  return result;
}

__n128 TimeDataFormatting.Configuration.hash(into:)(uint64_t a1, uint64_t a2)
{
  __swift_project_boxed_opaque_existential_1((void *)(v2 + *(int *)(a2 + 52)), *(void *)(v2 + *(int *)(a2 + 52) + 24));
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v4 = v2 + *(int *)(a2 + 56);
  if (*(void *)(v4 + 24))
  {
    outlined init with copy of AnyTrackedValue(v4, (uint64_t)&v7);
    if (!*((void *)&v8 + 1)) {
      return result;
    }
  }
  else
  {
    __n128 result = *(__n128 *)v4;
    long long v6 = *(_OWORD *)(v4 + 16);
    __n128 v7 = *(__n128 *)v4;
    long long v8 = v6;
    uint64_t v9 = *(void *)(v4 + 32);
    if (!*((void *)&v6 + 1)) {
      return result;
    }
  }
  outlined init with take of ScrollStateRequest((long long *)&v7, (uint64_t)v10);
  __swift_project_boxed_opaque_existential_1(v10, v10[3]);
  dispatch thunk of Hashable.hash(into:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  return result;
}

uint64_t equals #1 <A, B><A1>(lhs:rhs:) in static TimeDataFormatting.Configuration.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = &v19[-v9];
  uint64_t v11 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = &v19[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of Any(a2, (uint64_t)v19);
  int v15 = swift_dynamicCast();
  uint64_t v16 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  if (v15)
  {
    v16(v10, 0, 1, a5);
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v11 + 32))(v14, v10, a5);
    char v17 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(unsigned char *, uint64_t))(v11 + 8))(v14, a5);
  }
  else
  {
    v16(v10, 1, 1, a5);
    (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v7);
    char v17 = 0;
  }
  return v17 & 1;
}

Swift::Int TimeDataFormatting.Configuration.hashValue.getter(uint64_t a1)
{
  Hasher.init(_seed:)();
  TimeDataFormatting.Configuration.hash(into:)((uint64_t)v3, a1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TimeDataFormatting.Configuration<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance TimeDataFormatting.Configuration<A, B>(a1, a2, a3, (void (*)(unsigned char *, uint64_t))TimeDataFormatting.Configuration.hash(into:));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TimeDataFormatting.Configuration<A, B>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return static TimeDataFormatting.Configuration.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4], a3[5]);
}

uint64_t PausedFormatStyle.init(source:base:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a5, a1);
  uint64_t v8 = type metadata accessor for PausedFormatStyle();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(v8 + 52), a2, a4);
}

uint64_t PausedFormatStyle.endDate.getter@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = a1[4];
  uint64_t v6 = a1[2];
  swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  double v9 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = &v17[-v10];
  (*(void (**)(uint64_t, uint64_t, double))(v5 + 72))(v6, v5, v9);
  uint64_t v12 = a1[3];
  uint64_t v18 = v6;
  uint64_t v19 = v12;
  uint64_t v13 = a1[5];
  uint64_t v20 = v5;
  uint64_t v21 = v13;
  uint64_t v22 = v2;
  uint64_t v14 = type metadata accessor for Date();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in TimeDataFormatting.Configuration.formatAndFrequency(for:mode:), (uint64_t)v17, MEMORY[0x263F8E628], v14, v15, a2);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t PausedFormatStyle.format(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v31 = a3;
  uint64_t v32 = a1;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v28 = *(void *)(v4 - 8);
  uint64_t v29 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v27 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v27 - v7;
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v30 = a2;
  uint64_t v10 = *(void *)(a2 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v27 - v14;
  uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
  double v18 = MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v27 - v19;
  (*(void (**)(uint64_t, uint64_t, double))(v9 + 72))(v10, v9, v18);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v20, v15, AssociatedTypeWitness);
    uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    v21(v32, v10, v9);
    uint64_t v22 = v27;
    v21((uint64_t)v20, v10, v9);
    char v23 = static Date.> infix(_:_:)();
    uint64_t v24 = v29;
    uint64_t v25 = *(void (**)(char *, uint64_t))(v28 + 8);
    v25(v22, v29);
    v25(v8, v24);
    if (v23)
    {
      dispatch thunk of FormatStyle.format(_:)();
      return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v20, AssociatedTypeWitness);
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v20, AssociatedTypeWitness);
  }
  return dispatch thunk of FormatStyle.format(_:)();
}

uint64_t PausedFormatStyle.discreteInput(before:)@<X0>(void (*a1)(void, void, void)@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v71 = a3;
  long long v72 = a1;
  uint64_t v6 = a2[2];
  uint64_t v69 = a2[4];
  uint64_t v70 = v6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v65 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v64 = (char *)v58 - v8;
  _s10Foundation4DateVSgMaTm_5(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)v58 - v10;
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  long long v68 = (char *)v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v66 = AssociatedTypeWitness;
  uint64_t v67 = (char *)v58 - v16;
  uint64_t v17 = type metadata accessor for Optional();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)v58 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  char v23 = (char *)v58 - v22;
  dispatch thunk of DiscreteFormatStyle.discreteInput(before:)();
  uint64_t v24 = a2;
  uint64_t v25 = v4;
  PausedFormatStyle.endDate.getter(v24, (uint64_t)v11);
  uint64_t v26 = v12;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    _s10Foundation4DateVSgWOhTm_3((uint64_t)v11, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v18 + 32))(v71, v23, v17);
  }
  else
  {
    uint64_t v60 = v20;
    uint64_t v61 = v17;
    uint64_t v62 = v23;
    uint64_t v63 = v18;
    uint64_t v28 = v67;
    uint64_t v29 = v11;
    uint64_t v30 = v26;
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v67, v29, v26);
    uint64_t v31 = v68;
    uint64_t v32 = v69;
    uint64_t v33 = v72;
    uint64_t v34 = v25;
    uint64_t v35 = v70;
    long long v72 = *(void (**)(void, void, void))(v69 + 48);
    v72(v33, v70, v69);
    char v36 = static Date.< infix(_:_:)();
    uint64_t v37 = *(void (**)(char *, uint64_t))(v13 + 8);
    v37(v31, v30);
    if (v36)
    {
      v58[1] = v34;
      uint64_t v59 = v37;
      uint64_t v39 = v62;
      uint64_t v38 = v63;
      uint64_t v41 = v60;
      uint64_t v40 = v61;
      (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v60, v62, v61);
      uint64_t v42 = v65;
      uint64_t v43 = v66;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48))(v41, 1, v66) == 1)
      {
        v59(v28, v30);
        uint64_t v44 = *(void (**)(char *, uint64_t))(v38 + 8);
        v44(v39, v40);
        v44(v41, v40);
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 56))(v71, 1, 1, v43);
      }
      else
      {
        uint64_t v45 = *(void (**)(char *, char *, uint64_t))(v42 + 32);
        uint64_t v46 = v64;
        uint64_t v60 = (char *)(v42 + 32);
        v58[0] = v45;
        v45(v64, v41, v43);
        long long v48 = v68;
        uint64_t v47 = v69;
        v72(v46, v70, v69);
        uint64_t v49 = v28;
        char v50 = static Date.> infix(_:_:)();
        long long v51 = v48;
        uint64_t v52 = v46;
        uint64_t v53 = v61;
        long long v54 = v59;
        v59(v51, v30);
        uint64_t v55 = v30;
        uint64_t v56 = v71;
        if (v50)
        {
          v54(v49, v55);
          (*(void (**)(char *, uint64_t))(v63 + 8))(v62, v53);
          uint64_t v57 = v66;
          ((void (*)(uint64_t, char *, uint64_t))v58[0])(v56, v52, v66);
          return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v42 + 56))(v56, 0, 1, v57);
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t))(v47 + 72))(v70, v47);
          (*(void (**)(char *, uint64_t))(v42 + 8))(v52, v66);
          v54(v49, v55);
          return (*(uint64_t (**)(char *, uint64_t))(v63 + 8))(v62, v53);
        }
      }
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v32 + 72))(v35, v32);
      v37(v28, v30);
      return (*(uint64_t (**)(char *, uint64_t))(v63 + 8))(v62, v61);
    }
  }
}

uint64_t PausedFormatStyle.discreteInput(after:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v57 = a3;
  uint64_t v58 = a1;
  uint64_t v4 = a2[4];
  uint64_t v54 = a2[2];
  uint64_t v55 = v4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v53 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  char v50 = (char *)v46 - v6;
  _s10Foundation4DateVSgMaTm_5(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)v46 - v8;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  long long v51 = (char *)v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v56 = (char *)v46 - v14;
  uint64_t v52 = AssociatedTypeWitness;
  uint64_t v15 = type metadata accessor for Optional();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)v46 - v20;
  dispatch thunk of DiscreteFormatStyle.discreteInput(after:)();
  PausedFormatStyle.endDate.getter(a2, (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    _s10Foundation4DateVSgWOhTm_3((uint64_t)v9, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490]);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v16 + 32))(v57, v21, v15);
  }
  else
  {
    char v23 = v18;
    uint64_t v49 = v21;
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v56, v9, v10);
    uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v55 + 48);
    uint64_t v25 = v51;
    v24(v58, v54);
    char v26 = static Date.< infix(_:_:)();
    uint64_t v28 = *(void (**)(char *, uint64_t))(v11 + 8);
    uint64_t v27 = v11 + 8;
    uint64_t v29 = v25;
    uint64_t v30 = v28;
    v28(v29, v10);
    if (v26)
    {
      uint64_t v47 = v16;
      long long v48 = v30;
      uint64_t v58 = v27;
      uint64_t v31 = v49;
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v23, v49, v15);
      uint64_t v32 = v52;
      uint64_t v33 = v53;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v23, 1, v52) == 1)
      {
        uint64_t v34 = *(void (**)(char *, uint64_t))(v47 + 8);
        v34(v23, v15);
        (*(void (**)(uint64_t))(v55 + 72))(v54);
        v48(v56, v10);
        return ((uint64_t (*)(char *, uint64_t))v34)(v31, v15);
      }
      else
      {
        uint64_t v35 = v50;
        v46[0] = *(void *)(v33 + 32);
        v46[1] = v33 + 32;
        ((void (*)(char *, char *, uint64_t))v46[0])(v50, v23, v32);
        char v36 = v51;
        uint64_t v37 = v35;
        uint64_t v39 = v54;
        uint64_t v38 = v55;
        ((void (*)(char *, uint64_t, uint64_t))v24)(v37, v54, v55);
        uint64_t v40 = v56;
        char v41 = static Date.< infix(_:_:)();
        uint64_t v42 = v48;
        v48(v36, v10);
        uint64_t v43 = v47;
        if (v41)
        {
          uint64_t v44 = v57;
          v42(v40, v10);
          (*(void (**)(char *, uint64_t))(v43 + 8))(v49, v15);
          uint64_t v45 = v52;
          ((void (*)(uint64_t, char *, uint64_t))v46[0])(v44, v50, v52);
          return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v53 + 56))(v44, 0, 1, v45);
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t))(v38 + 72))(v39, v38);
          (*(void (**)(char *, uint64_t))(v53 + 8))(v50, v52);
          v42(v40, v10);
          return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v49, v15);
        }
      }
    }
    else
    {
      v30(v56, v10);
      (*(void (**)(char *, uint64_t))(v16 + 8))(v49, v15);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v53 + 56))(v57, 1, 1, v52);
    }
  }
}

uint64_t PausedFormatStyle.input(before:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, void, void))
{
  return a3(a1, *(void *)(a2 + 24), *(void *)(a2 + 40));
}

uint64_t PausedFormatStyle.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t static PausedFormatStyle.== infix(_:_:)()
{
  if (dispatch thunk of static Equatable.== infix(_:_:)())
  {
    type metadata accessor for PausedFormatStyle();
    char v0 = dispatch thunk of static Equatable.== infix(_:_:)();
  }
  else
  {
    char v0 = 0;
  }
  return v0 & 1;
}

uint64_t PausedFormatStyle.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656372756F73 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1702060386 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t PausedFormatStyle.CodingKeys.stringValue.getter(char a1)
{
  if (a1) {
    return 1702060386;
  }
  else {
    return 0x656372756F73;
  }
}

uint64_t PausedFormatStyle.encode(to:)(void *a1, void *a2)
{
  uint64_t v3 = a2[3];
  uint64_t v13 = a2[2];
  uint64_t v14 = v13;
  uint64_t v5 = a2[4];
  uint64_t v4 = a2[5];
  v12[2] = v3;
  v12[3] = v5;
  uint64_t v15 = v3;
  uint64_t v16 = v5;
  v12[1] = v4;
  uint64_t v17 = v4;
  type metadata accessor for PausedFormatStyle.CodingKeys();
  swift_getWitnessTable();
  uint64_t v6 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v12 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v14) = 0;
  uint64_t v10 = v18;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v10)
  {
    LOBYTE(v14) = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t PausedFormatStyle.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v34 = a6;
  uint64_t v33 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  char v36 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v40 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = v15;
  uint64_t v44 = v16;
  uint64_t v45 = v17;
  uint64_t v46 = v18;
  type metadata accessor for PausedFormatStyle.CodingKeys();
  swift_getWitnessTable();
  uint64_t v42 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v38 = *(void *)(v42 - 8);
  MEMORY[0x270FA5388](v42);
  uint64_t v20 = (char *)&v31 - v19;
  uint64_t v41 = a2;
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v39 = a4;
  uint64_t v45 = a4;
  uint64_t v46 = a5;
  uint64_t v37 = a5;
  uint64_t v21 = type metadata accessor for PausedFormatStyle();
  uint64_t v32 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  char v23 = (char *)&v31 - v22;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v24 = (uint64_t)v47;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v24) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v47 = a1;
  uint64_t v25 = v36;
  uint64_t v26 = v35;
  LOBYTE(v43) = 0;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
  uint64_t v39 = v23;
  v27(v23, v40, v41);
  LOBYTE(v43) = 1;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v38 + 8))(v20, v42);
  uint64_t v28 = v39;
  (*(void (**)(char *, char *, uint64_t))(v33 + 32))(&v39[*(int *)(v21 + 52)], v25, a3);
  uint64_t v29 = v32;
  (*(void (**)(uint64_t, char *, uint64_t))(v32 + 16))(v34, v28, v21);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
  return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v28, v21);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PausedFormatStyle<A, B>.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static Pair.CodingKeys.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PausedFormatStyle<A, B>.CodingKeys()
{
  return Pair.CodingKeys.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance PausedFormatStyle<A, B>.CodingKeys(uint64_t a1)
{
  Pair.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PausedFormatStyle<A, B>.CodingKeys()
{
  Hasher.init(_seed:)();
  Pair.CodingKeys.hash(into:)((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PausedFormatStyle<A, B>.CodingKeys()
{
  return PausedFormatStyle.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PausedFormatStyle<A, B>.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = PausedFormatStyle.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance PausedFormatStyle<A, B>.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = protocol witness for static _AttributeBody.comparisonMode.getter in conformance ResetDeltaModifier.ChildPhase();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PausedFormatStyle<A, B>.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270FA00B0](a1, WitnessTable);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PausedFormatStyle<A, B>.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270FA00B8](a1, WitnessTable);
}

uint64_t protocol witness for DiscreteFormatStyle.input(before:) in conformance PausedFormatStyle<A, B>(uint64_t a1, uint64_t a2)
{
  return PausedFormatStyle.input(before:)(a1, a2, MEMORY[0x263F06980]);
}

uint64_t protocol witness for DiscreteFormatStyle.input(after:) in conformance PausedFormatStyle<A, B>(uint64_t a1, uint64_t a2)
{
  return PausedFormatStyle.input(before:)(a1, a2, MEMORY[0x263F06978]);
}

uint64_t protocol witness for FormatStyle.locale(_:) in conformance PausedFormatStyle<A, B>()
{
  return MEMORY[0x270EEDD40]();
}

uint64_t protocol witness for Decodable.init(from:) in conformance PausedFormatStyle<A, B>@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return PausedFormatStyle.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), *(char **)(a2 + 32), *(void *)(a2 + 40), a3);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PausedFormatStyle<A, B>(void *a1, void *a2)
{
  return PausedFormatStyle.encode(to:)(a1, a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PausedFormatStyle<A, B>(uint64_t a1)
{
  return PausedFormatStyle.hashValue.getter(a1, (void (*)(unsigned char *, uint64_t))PausedFormatStyle.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PausedFormatStyle<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance TimeDataFormatting.Configuration<A, B>(a1, a2, a3, (void (*)(unsigned char *, uint64_t))PausedFormatStyle.hash(into:));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PausedFormatStyle<A, B>()
{
  return static PausedFormatStyle.== infix(_:_:)();
}

uint64_t MixedFormatStyle.base(for:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(a1 + 16);
  swift_getAssociatedTypeWitness();
  type metadata accessor for ClosedRange();
  if ((ClosedRange.contains(_:)() & 1) == 0) {
    uint64_t v3 = v2 + *(int *)(a1 + 72);
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);

  return v7(a2, v3, v6);
}

uint64_t MixedFormatStyle.effectiveInput(for:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v62 = a3;
  uint64_t v71 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v59 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v67 = (char *)&v58 - v9;
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v58 - v11;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v61 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v73 = (char *)&v58 - v17;
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v58 - v19;
  uint64_t v21 = &v4[*(int *)(a2 + 68)];
  uint64_t v22 = *(void *)(a2 + 32);
  type metadata accessor for ClosedRange();
  uint64_t v60 = v21;
  char v23 = dispatch thunk of static Comparable.> infix(_:_:)();
  uint64_t v69 = a1;
  uint64_t v70 = v14;
  long long v68 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
  v68(v20, a1, AssociatedTypeWitness);
  uint64_t v24 = v71;
  uint64_t v25 = *(void (**)(void, void, void))(v71 + 16);
  uint64_t v65 = (void (*)(char *, uint64_t))v4;
  uint64_t v26 = v4;
  uint64_t v27 = (void (*)(char *, char *, uint64_t))v25;
  v25(v12, v26, a2);
  uint64_t v66 = v22;
  uint64_t v72 = v14 + 16;
  uint64_t v64 = v27;
  if (v23)
  {
    uint64_t v28 = *(void *)(a2 + 56);
    uint64_t v74 = AssociatedTypeWitness;
    uint64_t v75 = v22;
    long long v76 = *(_OWORD *)(a2 + 40);
    uint64_t v77 = v28;
    type metadata accessor for TimeDataFormatting.FormatTransition();
    LODWORD(v63) = dispatch thunk of static Comparable.< infix(_:_:)();
  }
  else
  {
    LODWORD(v63) = 0;
  }
  uint64_t v29 = v70;
  uint64_t v30 = *(void (**)(char *, uint64_t))(v24 + 8);
  uint64_t v31 = v12;
  uint64_t v32 = v24 + 8;
  v30(v31, a2);
  uint64_t v35 = *(void (**)(char *, uint64_t))(v29 + 8);
  uint64_t v33 = v29 + 8;
  uint64_t v34 = v35;
  v35(v20, AssociatedTypeWitness);
  char v36 = v68;
  v68(v73, v69, AssociatedTypeWitness);
  uint64_t v37 = v67;
  uint64_t v38 = v64;
  v64(v67, (char *)v65, a2);
  if (v63)
  {
    v30(v37, a2);
    v34(v73, AssociatedTypeWitness);
    uint64_t v39 = *(void *)(a2 + 40);
    uint64_t v40 = *(void *)(a2 + 48);
    uint64_t v41 = *(void *)(a2 + 56);
    uint64_t v42 = v62;
    uint64_t v43 = (uint64_t (*)(uint64_t, char *, uint64_t))v36;
LABEL_8:
    uint64_t v74 = AssociatedTypeWitness;
    uint64_t v75 = v66;
    *(void *)&long long v76 = v39;
    *((void *)&v76 + 1) = v40;
    uint64_t v77 = v41;
    uint64_t v54 = &v60[*(int *)(type metadata accessor for TimeDataFormatting.FormatTransition() + 60)];
    return v43(v42, v54, AssociatedTypeWitness);
  }
  uint64_t v70 = v33;
  uint64_t v71 = v32;
  uint64_t v63 = v30;
  uint64_t v65 = v34;
  uint64_t v44 = v73;
  uint64_t v45 = v66;
  char v46 = dispatch thunk of static Comparable.< infix(_:_:)();
  v36(v61, v44, AssociatedTypeWitness);
  uint64_t v47 = v59;
  v38(v59, v37, a2);
  if ((v46 & 1) == 0)
  {
    uint64_t v55 = v63;
    v63(v47, a2);
    uint64_t v56 = v65;
    v65(v61, AssociatedTypeWitness);
    v55(v37, a2);
    v56(v73, AssociatedTypeWitness);
    uint64_t v42 = v62;
    uint64_t v43 = (uint64_t (*)(uint64_t, char *, uint64_t))v68;
    uint64_t v54 = v69;
    return v43(v42, v54, AssociatedTypeWitness);
  }
  uint64_t v39 = *(void *)(a2 + 40);
  uint64_t v40 = *(void *)(a2 + 48);
  uint64_t v48 = v45;
  uint64_t v41 = *(void *)(a2 + 56);
  uint64_t v74 = AssociatedTypeWitness;
  uint64_t v75 = v48;
  *(void *)&long long v76 = v39;
  *((void *)&v76 + 1) = v40;
  uint64_t v77 = v41;
  type metadata accessor for TimeDataFormatting.FormatTransition();
  uint64_t v49 = v61;
  char v50 = dispatch thunk of static Comparable.> infix(_:_:)();
  long long v51 = v63;
  v63(v47, a2);
  uint64_t v52 = v49;
  uint64_t v53 = v65;
  v65(v52, AssociatedTypeWitness);
  v51(v67, a2);
  v53(v73, AssociatedTypeWitness);
  uint64_t v42 = v62;
  uint64_t v43 = (uint64_t (*)(uint64_t, char *, uint64_t))v68;
  uint64_t v54 = v69;
  if (v50) {
    goto LABEL_8;
  }
  return v43(v42, v54, AssociatedTypeWitness);
}

uint64_t MixedFormatStyle.format(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v14[1] = a3;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v12 = (char *)v14 - v11;
  MixedFormatStyle.effectiveInput(for:)(a1, a2, (uint64_t)v14 - v11);
  MixedFormatStyle.base(for:)(a2, (uint64_t)v8);
  dispatch thunk of FormatStyle.format(_:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
}

uint64_t MixedFormatStyle.discreteInput(before:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  CGRect v111 = a3;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(uint64_t (**)(char *, uint64_t, uint64_t))(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v114 = type metadata accessor for Optional();
  CGRect v103 = *(char **)(v114 - 8);
  v117 = v103;
  MEMORY[0x270FA5388](v114);
  CGRect v101 = (char *)&v96 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  CGRect v102 = (char *)&v96 - v11;
  MEMORY[0x270FA5388](v12);
  int v99 = (char *)&v96 - v13;
  MEMORY[0x270FA5388](v14);
  CGRect v107 = (void (*)(char *, char *, uint64_t))((char *)&v96 - v15);
  MEMORY[0x270FA5388](v16);
  CGRect v109 = (char *)&v96 - v17;
  MEMORY[0x270FA5388](v18);
  CGRect v104 = (char *)&v96 - v19;
  MEMORY[0x270FA5388](v20);
  CGRect v108 = (char *)&v96 - v21;
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char *)&v96 - v23;
  uint64_t v110 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v25);
  uint64_t v27 = (char *)&v96 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v115 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v28);
  int v97 = (char *)&v96 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v30);
  int v98 = (char *)&v96 - v31;
  MEMORY[0x270FA5388](v32);
  v100 = (char *)&v96 - v33;
  MEMORY[0x270FA5388](v34);
  char v36 = (char *)&v96 - v35;
  MEMORY[0x270FA5388](v37);
  uint64_t v39 = (char *)&v96 - v38;
  MixedFormatStyle.effectiveInput(for:)(a1, a2, (uint64_t)&v96 - v38);
  MixedFormatStyle.base(for:)(a2, (uint64_t)v27);
  v113 = v27;
  uint64_t v40 = v6;
  CGRect v106 = v7;
  dispatch thunk of DiscreteFormatStyle.discreteInput(before:)();
  uint64_t v41 = v3 + *(int *)(a2 + 68);
  uint64_t v42 = *(char **)(a2 + 32);
  uint64_t v43 = (char *)(v41 + *(int *)(type metadata accessor for ClosedRange() + 36));
  char v44 = dispatch thunk of static Comparable.> infix(_:_:)();
  uint64_t v112 = v40;
  v116 = v24;
  if (v44)
  {
    CGRect v102 = (char *)a2;
    CGRect v103 = v36;
    CGRect v109 = v43;
    CGRect v105 = v39;
    uint64_t v45 = v117;
    char v46 = (void (*)(char *, char *, uint64_t))*((void *)v117 + 2);
    uint64_t v47 = v108;
    uint64_t v48 = v24;
    uint64_t v49 = v114;
    v46(v108, v48, v114);
    uint64_t v50 = v115;
    CGRect v106 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v115 + 48);
    int v51 = v106(v47, 1, AssociatedTypeWitness);
    CGRect v107 = v46;
    if (v51 == 1)
    {
      uint64_t v52 = v50;
      (*((void (**)(char *, uint64_t))v45 + 1))(v47, v49);
    }
    else
    {
      uint64_t v63 = v103;
      (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v103, v47, AssociatedTypeWitness);
      uint64_t v64 = *((void *)v102 + 7);
      uint64_t v118 = AssociatedTypeWitness;
      v119 = v42;
      long long v120 = *(_OWORD *)(v102 + 40);
      uint64_t v121 = v64;
      type metadata accessor for TimeDataFormatting.FormatTransition();
      char v65 = dispatch thunk of static Comparable.< infix(_:_:)();
      uint64_t v52 = v50;
      uint64_t v66 = *(void (**)(char *, uint64_t))(v50 + 8);
      v66(v63, AssociatedTypeWitness);
      if (v65)
      {
        (*((void (**)(char *, uint64_t))v117 + 1))(v116, v49);
        (*(void (**)(char *, uint64_t))(v110 + 8))(v113, v112);
        v66(v105, AssociatedTypeWitness);
        uint64_t v67 = v111;
        (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v111, v109, AssociatedTypeWitness);
        return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v50 + 56))(v67, 0, 1, AssociatedTypeWitness);
      }
    }
    uint64_t v69 = v104;
    uint64_t v70 = AssociatedTypeWitness;
    uint64_t v71 = v116;
    v107(v104, v116, v49);
    int v72 = v106(v69, 1, v70);
    uint64_t v73 = v113;
    if (v72 == 1)
    {
      uint64_t v74 = v69;
      uint64_t v75 = (void (*)(char *, uint64_t))*((void *)v117 + 1);
      v75(v71, v49);
      (*(void (**)(char *, uint64_t))(v110 + 8))(v73, v112);
      (*(void (**)(char *, uint64_t))(v52 + 8))(v105, v70);
      v75(v74, v49);
      long long v76 = v111;
      (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v111, v109, v70);
      return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v52 + 56))(v76, 0, 1, v70);
    }
    else
    {
      uint64_t v77 = v52;
      unint64_t v78 = *(void (**)(char *, char *, uint64_t))(v52 + 32);
      unint64_t v79 = v100;
      v78(v100, v69, v70);
      unint64_t v80 = v111;
      max<A>(_:_:)();
      unint64_t v81 = *(void (**)(char *, uint64_t))(v77 + 8);
      v81(v79, v70);
      (*((void (**)(char *, uint64_t))v117 + 1))(v71, v49);
      (*(void (**)(char *, uint64_t))(v110 + 8))(v73, v112);
      v81(v105, v70);
      return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v77 + 56))(v80, 0, 1, v70);
    }
  }
  else
  {
    uint64_t v53 = (char *)v107;
    uint64_t v55 = v114;
    uint64_t v54 = v115;
    if ((dispatch thunk of static Comparable.> infix(_:_:)() & 1) == 0)
    {
      (*(void (**)(char *, uint64_t))(v110 + 8))(v113, v112);
      (*(void (**)(char *, uint64_t))(v54 + 8))(v39, AssociatedTypeWitness);
      return (*((uint64_t (**)(char *, char *, uint64_t))v117 + 4))(v111, v116, v55);
    }
    CGRect v104 = v42;
    CGRect v105 = v39;
    uint64_t v57 = v112;
    uint64_t v56 = v113;
    dispatch thunk of DiscreteFormatStyle.input(before:)();
    CGRect v106 = (uint64_t (*)(char *, uint64_t, uint64_t))*((void *)v117 + 2);
    v106(v53, (uint64_t)v116, v55);
    uint64_t v58 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v54 + 48);
    CGRect v108 = (char *)AssociatedTypeWitness;
    if (v58(v53, 1, AssociatedTypeWitness) == 1)
    {
      CGRect v106 = v58;
      (*(void (**)(char *, uint64_t))(v110 + 8))(v56, v57);
      uint64_t v59 = v108;
      (*(void (**)(char *, char *))(v54 + 8))(v105, v108);
      uint64_t v60 = v117;
      uint64_t v61 = (void (*)(char *, uint64_t))*((void *)v117 + 1);
      v61(v53, v55);
      uint64_t v62 = v111;
    }
    else
    {
      unint64_t v82 = *(void (**)(char *, char *, char *))(v54 + 32);
      unint64_t v83 = v98;
      uint64_t v59 = v108;
      v82(v98, v53, v108);
      unint64_t v84 = v99;
      v106(v99, (uint64_t)v109, v55);
      if (v58(v84, 1, (uint64_t)v59) != 1)
      {
        uint64_t v90 = v97;
        v82(v97, v84, v59);
        uint64_t v91 = v111;
        max<A>(_:_:)();
        uint64_t v92 = v115;
        char v93 = *(void (**)(char *, char *))(v115 + 8);
        v93(v90, v59);
        v93(v83, v59);
        int v94 = (void (*)(char *, uint64_t))*((void *)v117 + 1);
        uint64_t v95 = v114;
        v94(v109, v114);
        v94(v116, v95);
        (*(void (**)(char *, uint64_t))(v110 + 8))(v113, v112);
        v93(v105, v59);
        return (*(uint64_t (**)(char *, void, uint64_t, char *))(v92 + 56))(v91, 0, 1, v59);
      }
      CGRect v106 = v58;
      Swift::Int v85 = *(void (**)(char *, char *))(v115 + 8);
      v85(v83, v59);
      (*(void (**)(char *, uint64_t))(v110 + 8))(v113, v112);
      v85(v105, v59);
      uint64_t v60 = v117;
      uint64_t v61 = (void (*)(char *, uint64_t))*((void *)v117 + 1);
      uint64_t v55 = v114;
      v61(v84, v114);
      uint64_t v62 = v111;
    }
    unint64_t v86 = (void (*)(char *, char *, uint64_t))*((void *)v60 + 4);
    unsigned int v87 = v102;
    v86(v102, v116, v55);
    uint64_t v88 = v101;
    v86(v101, v109, v55);
    if (v106(v87, 1, (uint64_t)v59) == 1)
    {
      v86(v62, v88, v55);
      return ((uint64_t (*)(char *, uint64_t))v61)(v87, v55);
    }
    else
    {
      v61(v88, v55);
      uint64_t v89 = v115;
      (*(void (**)(char *, char *, char *))(v115 + 32))(v62, v87, v59);
      return (*(uint64_t (**)(char *, void, uint64_t, char *))(v89 + 56))(v62, 0, 1, v59);
    }
  }
}

uint64_t MixedFormatStyle.discreteInput(after:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v4 = v3;
  v116 = a3;
  uint64_t v7 = *(void **)(a2 + 16);
  uint64_t v117 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v120 = type metadata accessor for Optional();
  CGRect v109 = *(char **)(v120 - 8);
  v122 = v109;
  MEMORY[0x270FA5388](v120);
  CGRect v107 = (char *)&v104 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  CGRect v108 = (void (*)(char *, char *, uint64_t))((char *)&v104 - v11);
  MEMORY[0x270FA5388](v12);
  CGRect v106 = (char *)&v104 - v13;
  MEMORY[0x270FA5388](v14);
  uint64_t v112 = (char *)&v104 - v15;
  MEMORY[0x270FA5388](v16);
  uint64_t v114 = (unsigned int (*)(char *, uint64_t, uint64_t))((char *)&v104 - v17);
  MEMORY[0x270FA5388](v18);
  uint64_t v110 = (char *)&v104 - v19;
  MEMORY[0x270FA5388](v20);
  v113 = (char *)&v104 - v21;
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char *)&v104 - v23;
  uint64_t v115 = *(v7 - 1);
  MEMORY[0x270FA5388](v25);
  uint64_t v27 = (char *)&v104 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v123 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v28);
  CGRect v104 = (char *)&v104 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v30);
  CGRect v105 = (char *)&v104 - v31;
  MEMORY[0x270FA5388](v32);
  uint64_t v34 = (char *)&v104 - v33;
  MEMORY[0x270FA5388](v35);
  uint64_t v37 = (char *)&v104 - v36;
  MEMORY[0x270FA5388](v38);
  uint64_t v40 = (char *)&v104 - v39;
  MixedFormatStyle.effectiveInput(for:)(a1, a2, (uint64_t)&v104 - v39);
  MixedFormatStyle.base(for:)(a2, (uint64_t)v27);
  uint64_t v118 = v27;
  v119 = (void (*)(void, void))v7;
  dispatch thunk of DiscreteFormatStyle.discreteInput(after:)();
  uint64_t v41 = v4 + *(int *)(a2 + 68);
  uint64_t v42 = *(char **)(a2 + 32);
  char v43 = dispatch thunk of static Comparable.< infix(_:_:)();
  uint64_t v121 = v24;
  if (v43)
  {
    CGRect v111 = v40;
    uint64_t v112 = v37;
    CGRect v109 = v34;
    uint64_t v117 = v41;
    char v44 = v122;
    uint64_t v45 = (void (*)(char *, char *, uint64_t))*((void *)v122 + 2);
    char v46 = v113;
    uint64_t v47 = v120;
    v45(v113, v24, v120);
    uint64_t v48 = v123;
    uint64_t v114 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v123 + 48);
    if (v114(v46, 1, AssociatedTypeWitness) == 1)
    {
      (*((void (**)(char *, uint64_t))v44 + 1))(v46, v47);
    }
    else
    {
      uint64_t v61 = *(void (**)(char *, char *, uint64_t))(v48 + 32);
      CGRect v108 = v45;
      uint64_t v62 = v112;
      v61(v112, v46, AssociatedTypeWitness);
      uint64_t v63 = *(void *)(a2 + 56);
      uint64_t v124 = AssociatedTypeWitness;
      v125 = v42;
      long long v126 = *(_OWORD *)(a2 + 40);
      uint64_t v127 = v63;
      type metadata accessor for TimeDataFormatting.FormatTransition();
      char v64 = dispatch thunk of static Comparable.> infix(_:_:)();
      char v65 = *(void (**)(char *, uint64_t))(v48 + 8);
      uint64_t v66 = v62;
      uint64_t v45 = v108;
      v65(v66, AssociatedTypeWitness);
      if (v64)
      {
        (*((void (**)(char *, uint64_t))v122 + 1))(v121, v47);
        (*(void (**)(char *, void))(v115 + 8))(v118, v119);
        v65(v111, AssociatedTypeWitness);
        uint64_t v67 = v123;
        long long v68 = v116;
        (*(void (**)(char *, uint64_t, uint64_t))(v123 + 16))(v116, v117, AssociatedTypeWitness);
        return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v67 + 56))(v68, 0, 1, AssociatedTypeWitness);
      }
    }
    uint64_t v70 = v110;
    uint64_t v71 = AssociatedTypeWitness;
    int v72 = v121;
    v45(v110, v121, v47);
    unsigned int v73 = v114(v70, 1, v71);
    uint64_t v74 = v119;
    if (v73 == 1)
    {
      uint64_t v75 = (void (*)(char *, uint64_t))*((void *)v122 + 1);
      v75(v72, v47);
      (*(void (**)(char *, void))(v115 + 8))(v118, v74);
      uint64_t v76 = v123;
      (*(void (**)(char *, uint64_t))(v123 + 8))(v111, v71);
      v75(v70, v47);
      uint64_t v77 = v116;
      (*(void (**)(char *, uint64_t, uint64_t))(v76 + 16))(v116, v117, v71);
      return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v76 + 56))(v77, 0, 1, v71);
    }
    else
    {
      uint64_t v78 = v123;
      unint64_t v79 = v109;
      (*(void (**)(char *, char *, uint64_t))(v123 + 32))(v109, v70, v71);
      unint64_t v80 = v116;
      min<A>(_:_:)();
      unint64_t v81 = *(void (**)(char *, uint64_t))(v78 + 8);
      v81(v79, v71);
      (*((void (**)(char *, uint64_t))v122 + 1))(v72, v47);
      (*(void (**)(char *, void))(v115 + 8))(v118, v74);
      v81(v111, v71);
      return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v78 + 56))(v80, 0, 1, v71);
    }
  }
  else
  {
    uint64_t v49 = v112;
    uint64_t v50 = v120;
    uint64_t v51 = v123;
    type metadata accessor for ClosedRange();
    if ((dispatch thunk of static Comparable.< infix(_:_:)() & 1) == 0)
    {
      (*(void (**)(char *, void))(v115 + 8))(v118, v119);
      (*(void (**)(char *, uint64_t))(v51 + 8))(v40, AssociatedTypeWitness);
      return (*((uint64_t (**)(char *, char *, uint64_t))v122 + 4))(v116, v121, v50);
    }
    uint64_t v110 = v42;
    CGRect v111 = v40;
    uint64_t v52 = v118;
    uint64_t v53 = v119;
    dispatch thunk of DiscreteFormatStyle.input(after:)();
    uint64_t v54 = v122;
    uint64_t v55 = (void (*)(char *, char *, uint64_t))*((void *)v122 + 2);
    v55(v49, v121, v50);
    uint64_t v56 = v51;
    uint64_t v57 = *(char **)(v51 + 48);
    uint64_t v117 = AssociatedTypeWitness;
    v113 = v57;
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v57)(v49, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(char *, void))(v115 + 8))(v52, v53);
      uint64_t v58 = v117;
      (*(void (**)(char *, uint64_t))(v51 + 8))(v111, v117);
      v119 = (void (*)(void, void))*((void *)v54 + 1);
      v119(v49, v50);
      uint64_t v60 = (unsigned int (*)(char *, uint64_t, uint64_t))v113;
      uint64_t v59 = (char *)v114;
    }
    else
    {
      unint64_t v82 = *(void (**)(char *, char *, uint64_t))(v51 + 32);
      unint64_t v83 = v105;
      uint64_t v58 = v117;
      v82(v105, v49, v117);
      unint64_t v84 = v106;
      Swift::Int v85 = (char *)v114;
      v55(v106, (char *)v114, v50);
      unint64_t v86 = v83;
      unsigned int v87 = (unsigned int (*)(char *, uint64_t, uint64_t))v113;
      int v88 = ((uint64_t (*)(char *, uint64_t, uint64_t))v113)(v84, 1, v58);
      uint64_t v89 = v115;
      uint64_t v59 = v85;
      if (v88 != 1)
      {
        int v98 = v104;
        v82(v104, v84, v58);
        int v99 = v116;
        min<A>(_:_:)();
        uint64_t v100 = v123;
        CGRect v101 = *(void (**)(char *, uint64_t))(v123 + 8);
        v101(v98, v58);
        v101(v86, v58);
        CGRect v102 = (void (*)(char *, uint64_t))*((void *)v122 + 1);
        uint64_t v103 = v120;
        v102(v85, v120);
        v102(v121, v103);
        (*(void (**)(char *, void))(v89 + 8))(v118, v119);
        v101(v111, v58);
        return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v100 + 56))(v99, 0, 1, v58);
      }
      uint64_t v60 = v87;
      uint64_t v90 = v123;
      uint64_t v91 = *(void (**)(char *, uint64_t))(v123 + 8);
      v91(v86, v58);
      (*(void (**)(char *, void))(v89 + 8))(v118, v119);
      v91(v111, v58);
      uint64_t v92 = v122;
      uint64_t v93 = v120;
      v119 = (void (*)(void, void))*((void *)v122 + 1);
      v119(v84, v120);
      uint64_t v56 = v90;
      uint64_t v50 = v93;
      uint64_t v54 = v92;
    }
    int v94 = (void (*)(char *, char *, uint64_t))*((void *)v54 + 4);
    uint64_t v95 = (char *)v108;
    v94((char *)v108, v121, v50);
    uint64_t v96 = v107;
    v94(v107, v59, v50);
    if (v60(v95, 1, v58) == 1)
    {
      v94(v116, v96, v50);
      return ((uint64_t (*)(char *, uint64_t))v119)(v95, v50);
    }
    else
    {
      v119(v96, v50);
      int v97 = v116;
      (*(void (**)(char *, char *, uint64_t))(v56 + 32))(v116, v95, v58);
      return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v56 + 56))(v97, 0, 1, v58);
    }
  }
}

uint64_t MixedFormatStyle.input(before:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, void (*a3)(char *, uint64_t, uint64_t)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v17 = a4;
  uint64_t v18 = a3;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(v10 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v15 = (char *)&v17 - v14;
  MixedFormatStyle.effectiveInput(for:)(a1, a2, (uint64_t)&v17 - v14);
  MixedFormatStyle.base(for:)(a2, (uint64_t)v9);
  v18(v15, v6, v11);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, AssociatedTypeWitness);
}

uint64_t MixedFormatStyle.hash(into:)(uint64_t a1)
{
  dispatch thunk of Hashable.hash(into:)();
  swift_getAssociatedTypeWitness();
  uint64_t v2 = type metadata accessor for TimeDataFormatting.FormatTransition();
  TimeDataFormatting.FormatTransition.hash(into:)(a1, v2);
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t static MixedFormatStyle.== infix(_:_:)()
{
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0
    && (type metadata accessor for MixedFormatStyle(),
        swift_getAssociatedTypeWitness(),
        (static TimeDataFormatting.FormatTransition.== infix(_:_:)() & 1) != 0))
  {
    char v0 = dispatch thunk of static Equatable.== infix(_:_:)();
  }
  else
  {
    char v0 = 0;
  }
  return v0 & 1;
}

uint64_t MixedFormatStyle.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6572726566657270 && a2 == 0xE900000000000064;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x697469736E617274 && a2 == 0xEA00000000006E6FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6B6361626C6C6166 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t MixedFormatStyle.CodingKeys.stringValue.getter(char a1)
{
  if (!a1) {
    return 0x6572726566657270;
  }
  if (a1 == 1) {
    return 0x697469736E617274;
  }
  return 0x6B6361626C6C6166;
}

uint64_t MixedFormatStyle.encode(to:)(void *a1, void *a2)
{
  uint64_t v3 = a2[3];
  uint64_t v21 = a2[2];
  uint64_t AssociatedTypeWitness = v21;
  uint64_t v4 = a2[4];
  uint64_t v5 = a2[5];
  uint64_t v6 = a2[6];
  uint64_t v7 = a2[7];
  uint64_t v23 = v3;
  uint64_t v24 = v4;
  uint64_t v18 = v4;
  uint64_t v19 = v3;
  uint64_t v16 = v6;
  uint64_t v17 = v5;
  uint64_t v25 = v5;
  uint64_t v26 = v6;
  uint64_t v15 = v7;
  uint64_t v27 = v7;
  type metadata accessor for MixedFormatStyle.CodingKeys();
  swift_getWitnessTable();
  uint64_t v8 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v15 - v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(AssociatedTypeWitness) = 0;
  uint64_t v12 = *(void *)(*(void *)(v19 + 8) + 16);
  uint64_t v13 = v20;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v13) {
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  uint64_t v19 = v12;
  uint64_t v20 = v9;
  char v28 = 1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v23 = v18;
  uint64_t v24 = v17;
  uint64_t v25 = v16;
  uint64_t v26 = v15;
  type metadata accessor for TimeDataFormatting.FormatTransition();
  swift_getWitnessTable();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  LOBYTE(AssociatedTypeWitness) = 2;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v11, v8);
}

Swift::Int PausedFormatStyle.hashValue.getter(uint64_t a1, void (*a2)(unsigned char *, uint64_t))
{
  Hasher.init(_seed:)();
  a2(v5, a1);
  return Hasher._finalize()();
}

uint64_t MixedFormatStyle.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v57 = a1;
  uint64_t v38 = a8;
  uint64_t v47 = *(void (**)(char *, char *, uint64_t))(a3 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v52 = a4;
  uint64_t v53 = a5;
  uint64_t v54 = a6;
  uint64_t v55 = a7;
  uint64_t v42 = type metadata accessor for TimeDataFormatting.FormatTransition();
  uint64_t v40 = *(void *)(v42 - 8);
  MEMORY[0x270FA5388](v42);
  char v44 = (char *)&v36 - v14;
  uint64_t v41 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v39 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v45 = (char *)&v36 - v18;
  uint64_t AssociatedTypeWitness = a2;
  uint64_t v52 = a3;
  uint64_t v53 = a4;
  uint64_t v54 = a5;
  uint64_t v55 = a6;
  uint64_t v56 = a7;
  type metadata accessor for MixedFormatStyle.CodingKeys();
  swift_getWitnessTable();
  uint64_t v48 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v43 = *(void *)(v48 - 8);
  MEMORY[0x270FA5388](v48);
  uint64_t v20 = (char *)&v36 - v19;
  uint64_t v46 = a2;
  uint64_t AssociatedTypeWitness = a2;
  uint64_t v52 = a3;
  uint64_t v53 = a4;
  uint64_t v54 = a5;
  uint64_t v55 = a6;
  uint64_t v56 = a7;
  uint64_t v21 = type metadata accessor for MixedFormatStyle();
  uint64_t v37 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v36 - v22;
  uint64_t v24 = v57;
  __swift_project_boxed_opaque_existential_1(v57, v57[3]);
  uint64_t v49 = v20;
  uint64_t v25 = v50;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v25) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  }
  uint64_t v26 = v23;
  char v28 = v44;
  uint64_t v27 = v45;
  uint64_t v50 = v21;
  LOBYTE(AssociatedTypeWitness) = 0;
  uint64_t v29 = v46;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v30 = (char *)(v41 + 32);
  uint64_t v47 = *(void (**)(char *, char *, uint64_t))(v41 + 32);
  v47(v26, v27, v29);
  LOBYTE(AssociatedTypeWitness) = 1;
  uint64_t v31 = v42;
  swift_getWitnessTable();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v45 = v30;
  uint64_t v32 = v50;
  (*(void (**)(char *, char *, uint64_t))(v40 + 32))(&v26[*(int *)(v50 + 68)], v28, v31);
  LOBYTE(AssociatedTypeWitness) = 2;
  uint64_t v33 = v39;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v43 + 8))(v49, v48);
  v47(&v26[*(int *)(v32 + 72)], v33, v29);
  uint64_t v34 = v37;
  (*(void (**)(uint64_t, char *, uint64_t))(v37 + 16))(v38, v26, v32);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v57);
  return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v26, v32);
}

uint64_t MixedFormatStyle.init(preferred:transition:fallback:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32);
  v11(a5, a1, a4);
  uint64_t v7 = type metadata accessor for MixedFormatStyle();
  uint64_t v8 = a5 + *(int *)(v7 + 68);
  swift_getAssociatedTypeWitness();
  uint64_t v9 = type metadata accessor for TimeDataFormatting.FormatTransition();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8, a2, v9);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v11)(a5 + *(int *)(v7 + 72), a3, a4);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance MixedFormatStyle<A>.CodingKeys(char *a1, char *a2)
{
  return static EventListenerPhase.FailureReason.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MixedFormatStyle<A>.CodingKeys()
{
  return EventListenerPhase.FailureReason.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance MixedFormatStyle<A>.CodingKeys(uint64_t a1)
{
  EventListenerPhase.FailureReason.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MixedFormatStyle<A>.CodingKeys()
{
  Hasher.init(_seed:)();
  EventListenerPhase.FailureReason.hash(into:)((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance MixedFormatStyle<A>.CodingKeys()
{
  return MixedFormatStyle.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance MixedFormatStyle<A>.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = MixedFormatStyle.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance MixedFormatStyle<A>.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = specialized TimeDataFormatting.Resolvable.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MixedFormatStyle<A>.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270FA00B0](a1, WitnessTable);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MixedFormatStyle<A>.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270FA00B8](a1, WitnessTable);
}

uint64_t protocol witness for DiscreteFormatStyle.input(before:) in conformance MixedFormatStyle<A>@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return MixedFormatStyle.input(before:)(a1, a2, MEMORY[0x263F06980], a3);
}

uint64_t protocol witness for DiscreteFormatStyle.input(after:) in conformance MixedFormatStyle<A>@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return MixedFormatStyle.input(before:)(a1, a2, MEMORY[0x263F06978], a3);
}

uint64_t protocol witness for Decodable.init(from:) in conformance MixedFormatStyle<A>@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return MixedFormatStyle.init(from:)(a1, a2[2], a2[3], a2[4], a2[5], a2[6], a2[7], a3);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance MixedFormatStyle<A>(void *a1, void *a2)
{
  return MixedFormatStyle.encode(to:)(a1, a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MixedFormatStyle<A>(uint64_t a1)
{
  return PausedFormatStyle.hashValue.getter(a1, (void (*)(unsigned char *, uint64_t))MixedFormatStyle.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MixedFormatStyle<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance TimeDataFormatting.Configuration<A, B>(a1, a2, a3, (void (*)(unsigned char *, uint64_t))MixedFormatStyle.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TimeDataFormatting.Configuration<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *, uint64_t))
{
  Hasher.init(_seed:)();
  a4(v7, a2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MixedFormatStyle<A>()
{
  return static MixedFormatStyle.== infix(_:_:)();
}

uint64_t _MixedAoDFrequencyFormatInitializer<>.alwaysOnDisplayFormat(secondsUpdateFrequencyBudget:sizeVariant:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  CGRect v109 = a1;
  uint64_t v17 = *(void *)(a3 + 16);
  uint64_t v110 = *(void *)(a3 + 24);
  uint64_t v115 = *(void *)(v110 + 8);
  uint64_t AssociatedTypeWitness = (void (*)(void, void, void))swift_getAssociatedTypeWitness();
  *(void *)&long long v117 = AssociatedTypeWitness;
  *((void *)&v117 + 1) = a5;
  uint64_t v101 = a5;
  uint64_t v102 = a6;
  uint64_t v118 = a6;
  uint64_t v119 = a7;
  uint64_t v103 = a7;
  uint64_t v100 = a8;
  uint64_t v120 = a8;
  uint64_t v97 = type metadata accessor for TimeDataFormatting.FormatTransition();
  uint64_t v96 = *(void *)(v97 - 8);
  MEMORY[0x270FA5388](v97);
  uint64_t v104 = (uint64_t)v89 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v95 = (char *)v89 - v20;
  uint64_t v21 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v22);
  CGRect v105 = (char *)v89 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  uint64_t v26 = (char *)v89 - v25;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v108 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  int v98 = (char *)v89 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v29);
  int v94 = (char *)v89 - v30;
  MEMORY[0x270FA5388](v31);
  v113 = (char *)v89 - v32;
  MEMORY[0x270FA5388](v33);
  uint64_t v93 = (char *)v89 - v34;
  double v36 = MEMORY[0x270FA5388](v35);
  uint64_t v38 = (char *)v89 - v37;
  uint64_t v39 = *a2;
  uint64_t v114 = v40;
  uint64_t v112 = (char *)*(int *)(v40 + 48);
  LOBYTE(v117) = 2;
  uint64_t v41 = a4 + 16;
  uint64_t v42 = *(void (**)(long long *, uint64_t, uint64_t, double))(a4 + 16);
  CGRect v107 = v9;
  uint64_t v99 = a4;
  v42(&v117, v17, a4, v36);
  *(void *)&long long v117 = v39;
  uint64_t v43 = v21;
  int v44 = FormatStyle.exactSizeVariant(_:)(v38, (uint64_t *)&v117, v17);
  uint64_t v46 = v21 + 8;
  uint64_t v45 = *(void (**)(char *, uint64_t))(v21 + 8);
  uint64_t v111 = v17;
  v45(v26, v17);
  int v116 = v44;
  char v47 = v44 & 1;
  v112[(void)v38] = v47;
  if (a9 >= 60.0)
  {
    uint64_t v57 = (void (*)(long long *, uint64_t, uint64_t))v42;
    v89[1] = v41;
    uint64_t v90 = v39;
    uint64_t v91 = v45;
    uint64_t v92 = v46;
    uint64_t v112 = v38;
    uint64_t v58 = v43;
    uint64_t v59 = *(void (**)(char *, void, uint64_t))(v43 + 16);
    uint64_t v60 = v111;
    v59(v105, v107, v111);
    v122 = AssociatedTypeWitness;
    swift_getExtendedExistentialTypeMetadata();
    if (swift_dynamicCast())
    {
      outlined init with take of ScrollStateRequest(&v117, (uint64_t)&v123);
      uint64_t AssociatedTypeWitness = (void (*)(void, void, void))v59;
      uint64_t v61 = v124;
      uint64_t v62 = v125;
      __swift_project_boxed_opaque_existential_1(&v123, v124);
      uint64_t v63 = v95;
      (*(void (**)(uint64_t, uint64_t))(v62 + 48))(v61, v62);
      uint64_t v64 = *(int *)(v114 + 48);
      LOBYTE(v117) = 1;
      v57(&v117, v60, v99);
      *(void *)&long long v117 = v90;
      char v65 = v93;
      int v66 = FormatStyle.exactSizeVariant(_:)(v93, (uint64_t *)&v117, v60);
      v91(v26, v60);
      LODWORD(v105) = v66;
      LODWORD(v115) = v66 & 1;
      v65[v64] = v66 & 1;
      AssociatedTypeWitness(v113, v65, v60);
      (*(void (**)(uint64_t, char *, uint64_t))(v96 + 32))(v104, v63, v97);
      CGRect v107 = *(void (**)(char *, char *, uint64_t))(v58 + 32);
      uint64_t v67 = (uint64_t)v94;
      v107(v94, v112, v60);
      *(void *)&long long v117 = v60;
      *((void *)&v117 + 1) = v110;
      uint64_t v118 = v101;
      uint64_t v119 = v102;
      uint64_t v120 = v103;
      uint64_t v121 = v100;
      uint64_t v68 = type metadata accessor for MixedFormatStyle();
      uint64_t v69 = v109;
      v109[3] = v68;
      v69[4] = swift_getWitnessTable();
      uint64_t v70 = v69;
      uint64_t v71 = (uint64_t)v113;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v70);
      char v73 = v115;
      uint64_t v74 = v114;
      MixedFormatStyle.init(preferred:transition:fallback:)(v71, v104, v67, v60, (uint64_t)boxed_opaque_existential_1);
      uint64_t v75 = *(int *)(v74 + 48);
      uint64_t v76 = v98;
      uint64_t v77 = v65;
      uint64_t v78 = (void (*)(uint64_t, char *, uint64_t))v107;
      v107(v98, v77, v60);
      v76[v75] = v73;
      if (v116)
      {
        (*(void (**)(char *, uint64_t))(v108 + 8))(v76, v74);
        int v79 = 1;
      }
      else
      {
        uint64_t v87 = *(int *)(v74 + 48);
        v78(v71, v76, v60);
        *(unsigned char *)(v71 + v87) = v73;
        v91((char *)v71, v60);
        int v79 = (int)v105;
      }
      int v116 = v79;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v123);
    }
    else
    {
      unint64_t v81 = v113;
      uint64_t v80 = v114;
      uint64_t v82 = *(int *)(v114 + 48);
      unint64_t v83 = v112;
      v59(v113, v112, v60);
      v81[v82] = v47;
      unint64_t v84 = v109;
      uint64_t v85 = v110;
      v109[3] = v60;
      v84[4] = v85;
      unint64_t v86 = __swift_allocate_boxed_opaque_existential_1(v84);
      (*(void (**)(uint64_t *, char *, uint64_t))(v58 + 32))(v86, v81, v60);
      (*(void (**)(char *, uint64_t))(v108 + 8))(v83, v80);
    }
  }
  else
  {
    uint64_t v48 = v114;
    uint64_t v49 = *(int *)(v114 + 48);
    uint64_t v50 = v43;
    uint64_t v51 = *(void (**)(char *, char *, uint64_t))(v43 + 16);
    uint64_t v52 = v113;
    uint64_t v53 = v111;
    v51(v113, v38, v111);
    v52[v49] = v47;
    uint64_t v54 = v109;
    uint64_t v55 = v110;
    v109[3] = v53;
    v54[4] = v55;
    uint64_t v56 = __swift_allocate_boxed_opaque_existential_1(v54);
    (*(void (**)(uint64_t *, char *, uint64_t))(v50 + 32))(v56, v52, v53);
    (*(void (**)(char *, uint64_t))(v108 + 8))(v38, v48);
  }
  return v116 & 1;
}

uint64_t protocol witness for MixedAoDFrequencyFormatInitializer.alwaysOnDisplayFormat(secondsUpdateFrequencyBudget:sizeVariant:) in conformance <> _MixedAoDFrequencyFormatInitializer<A>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, double a5)
{
  return _MixedAoDFrequencyFormatInitializer<>.alwaysOnDisplayFormat(secondsUpdateFrequencyBudget:sizeVariant:)(a1, a2, a3, *(void *)(a4 - 8), *(void *)(a4 - 16), *(void *)(a4 - 24), *(void *)(a4 - 32), *(void *)(a4 - 40), a5);
}

uint64_t base witness table accessor for Equatable in TimeDataFormatting.Configuration<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for MixedFormatStyle()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for PausedFormatStyle()
{
  return swift_getGenericMetadata();
}

uint64_t partial apply for closure #1 in TimeDataFormatting.Configuration.formatAndFrequency(for:mode:)(uint64_t a1)
{
  return partial apply for closure #1 in TimeDataFormatting.Configuration.formatAndFrequency(for:mode:)(a1);
}

{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v1 + 32) + 48))(a1, *(void *)(v1 + 16));
}

uint64_t type metadata accessor for _MixedAoDFrequencyFormatInitializer()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t type metadata accessor for UpdateFrequencyDependentFormatStyle()
{
  unint64_t result = lazy cache variable for type metadata for UpdateFrequencyDependentFormatStyle;
  if (!lazy cache variable for type metadata for UpdateFrequencyDependentFormatStyle)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UpdateFrequencyDependentFormatStyle);
  }
  return result;
}

void type metadata accessor for (style: UpdateFrequencyDependentFormatStyle, exact: Bool)()
{
  if (!lazy cache variable for type metadata for (style: UpdateFrequencyDependentFormatStyle, exact: Bool))
  {
    type metadata accessor for UpdateFrequencyDependentFormatStyle();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (style: UpdateFrequencyDependentFormatStyle, exact: Bool));
    }
  }
}

uint64_t getEnumTagSinglePayload for PausedFormatStyle(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void storeEnumTagSinglePayload for PausedFormatStyle(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x245FE251CLL);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v10)
        {
          uint64_t v24 = *(void (**)(void))(v6 + 56);
          v24();
        }
        else
        {
          unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
          uint64_t v23 = *(void (**)(unint64_t))(v9 + 56);
          v23(v22);
        }
      }
      return;
  }
}

uint64_t type metadata completion function for MixedFormatStyle()
{
  uint64_t v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_getAssociatedTypeWitness();
    uint64_t v0 = type metadata accessor for TimeDataFormatting.FormatTransition();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return v0;
}

uint64_t *initializeBufferWithCopyOfBuffer for MixedFormatStyle(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = v6 + v9;
  uint64_t v11 = *(void *)(v8 + 64);
  uint64_t v12 = v11 + v9;
  uint64_t v13 = ((v11 + v9) & ~v9) + v11;
  uint64_t v14 = *(_DWORD *)(v5 + 80);
  if ((v14 | v9) > 7
    || ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0
    || ((((v13 + v9) & ~v9) + v11 + v14 + ((v6 + v9) & ~v9)) & ~v14) + v6 > 0x18)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    uint64_t v25 = (uint64_t *)(v17 + (((v14 | v9) + 16) & ~(v14 | v9)));
    swift_retain();
  }
  else
  {
    uint64_t v18 = v4;
    uint64_t v29 = ((v13 + v9) & ~v9) + v11 + v14;
    uint64_t v30 = v4;
    uint64_t v19 = ~v9;
    uint64_t v31 = ~v14;
    uint64_t v28 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16);
    uint64_t v20 = AssociatedTypeWitness;
    v28(a1, a2, v18);
    unint64_t v21 = (unint64_t)a1 + v10;
    unint64_t v22 = ((unint64_t)a1 + v10) & ~v9;
    unint64_t v27 = (unint64_t)a2 + v10;
    unint64_t v23 = ((unint64_t)a2 + v10) & ~v9;
    uint64_t v24 = *(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16);
    v24(v22, v23, v20);
    v24((v12 + v22) & v19, (v12 + v23) & v19, v20);
    v24(((v21 | v9) + v13) & v19, ((v27 | v9) + v13) & v19, v20);
    uint64_t v25 = a1;
    v28((uint64_t *)((v29 + v22) & v31), (uint64_t *)((v29 + v23) & v31), v30);
  }
  return v25;
}

uint64_t destroy for MixedFormatStyle(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v17 = *(uint64_t (**)(unint64_t, uint64_t))(v4 + 8);
  v17(a1, v3);
  unint64_t v5 = *(void *)(v4 + 64) + a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  uint64_t v9 = v7 + 8;
  uint64_t v10 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = v5 + v10;
  uint64_t v12 = (v5 + v10) & ~v10;
  v8(v12, AssociatedTypeWitness);
  uint64_t v13 = *(void *)(v9 + 56);
  v8((v13 + v10 + v12) & ~v10, AssociatedTypeWitness);
  uint64_t v14 = ((v13 + v10) & ~v10) + v13;
  v8(((v11 | v10) + v14) & ~v10, AssociatedTypeWitness);
  unint64_t v15 = (v12 + v13 + *(unsigned __int8 *)(v4 + 80) + ((v14 + v10) & ~v10)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);

  return v17(v15, v3);
}

uint64_t initializeWithCopy for MixedFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t v21 = *(void (**)(void))(v5 + 16);
  uint64_t v6 = v5 + 16;
  v21();
  uint64_t v8 = *(void *)(v6 + 48);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
  uint64_t v12 = v10 + 16;
  uint64_t v13 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v14 = v8 + v13;
  uint64_t v15 = (v8 + v13 + a1) & ~v13;
  uint64_t v16 = (v14 + a2) & ~v13;
  v11(v15, v16, AssociatedTypeWitness);
  uint64_t v17 = *(void *)(v12 + 48);
  v11((v17 + v13 + v15) & ~v13, (v17 + v13 + v16) & ~v13, AssociatedTypeWitness);
  uint64_t v18 = v17 + v13 + ((v17 + v13) & ~v13);
  v11((v18 + v15) & ~v13, (v18 + v16) & ~v13, AssociatedTypeWitness);
  ((void (*)(unint64_t, unint64_t, uint64_t))v21)(((v18 & ~v13) + v17 + *(unsigned __int8 *)(v6 + 64) + v15) & ~(unint64_t)*(unsigned __int8 *)(v6 + 64), ((v18 & ~v13) + v17 + *(unsigned __int8 *)(v6 + 64) + v16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 64), v4);
  return a1;
}

uint64_t assignWithCopy for MixedFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t v21 = *(void (**)(void))(v5 + 24);
  uint64_t v6 = v5 + 24;
  v21();
  uint64_t v8 = *(void *)(v6 + 40);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 24);
  uint64_t v12 = v10 + 24;
  uint64_t v13 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v14 = v8 + v13;
  uint64_t v15 = (v8 + v13 + a1) & ~v13;
  uint64_t v16 = (v14 + a2) & ~v13;
  v11(v15, v16, AssociatedTypeWitness);
  uint64_t v17 = *(void *)(v12 + 40);
  v11((v17 + v13 + v15) & ~v13, (v17 + v13 + v16) & ~v13, AssociatedTypeWitness);
  uint64_t v18 = v17 + v13 + ((v17 + v13) & ~v13);
  v11((v18 + v15) & ~v13, (v18 + v16) & ~v13, AssociatedTypeWitness);
  ((void (*)(unint64_t, unint64_t, uint64_t))v21)(((v18 & ~v13) + v17 + *(unsigned __int8 *)(v6 + 56) + v15) & ~(unint64_t)*(unsigned __int8 *)(v6 + 56), ((v18 & ~v13) + v17 + *(unsigned __int8 *)(v6 + 56) + v16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 56), v4);
  return a1;
}

uint64_t initializeWithTake for MixedFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t v21 = *(void (**)(void))(v5 + 32);
  uint64_t v6 = v5 + 32;
  v21();
  uint64_t v8 = *(void *)(v6 + 32);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32);
  uint64_t v12 = v10 + 32;
  uint64_t v13 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v14 = v8 + v13;
  uint64_t v15 = (v8 + v13 + a1) & ~v13;
  uint64_t v16 = (v14 + a2) & ~v13;
  v11(v15, v16, AssociatedTypeWitness);
  uint64_t v17 = *(void *)(v12 + 32);
  v11((v17 + v13 + v15) & ~v13, (v17 + v13 + v16) & ~v13, AssociatedTypeWitness);
  uint64_t v18 = v17 + v13 + ((v17 + v13) & ~v13);
  v11((v18 + v15) & ~v13, (v18 + v16) & ~v13, AssociatedTypeWitness);
  ((void (*)(unint64_t, unint64_t, uint64_t))v21)(((v18 & ~v13) + v17 + *(unsigned __int8 *)(v6 + 48) + v15) & ~(unint64_t)*(unsigned __int8 *)(v6 + 48), ((v18 & ~v13) + v17 + *(unsigned __int8 *)(v6 + 48) + v16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 48), v4);
  return a1;
}

uint64_t assignWithTake for MixedFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t v21 = *(void (**)(void))(v5 + 40);
  uint64_t v6 = v5 + 40;
  v21();
  uint64_t v8 = *(void *)(v6 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 40);
  uint64_t v12 = v10 + 40;
  uint64_t v13 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v14 = v8 + v13;
  uint64_t v15 = (v8 + v13 + a1) & ~v13;
  uint64_t v16 = (v14 + a2) & ~v13;
  v11(v15, v16, AssociatedTypeWitness);
  uint64_t v17 = *(void *)(v12 + 24);
  v11((v17 + v13 + v15) & ~v13, (v17 + v13 + v16) & ~v13, AssociatedTypeWitness);
  uint64_t v18 = v17 + v13 + ((v17 + v13) & ~v13);
  v11((v18 + v15) & ~v13, (v18 + v16) & ~v13, AssociatedTypeWitness);
  ((void (*)(unint64_t, unint64_t, uint64_t))v21)(((v18 & ~v13) + v17 + *(unsigned __int8 *)(v6 + 40) + v15) & ~(unint64_t)*(unsigned __int8 *)(v6 + 40), ((v18 & ~v13) + v17 + *(unsigned __int8 *)(v6 + 40) + v16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 40), v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for MixedFormatStyle(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  if (v10 <= v7) {
    unsigned int v11 = v7;
  }
  else {
    unsigned int v11 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v12 = *(void *)(v6 + 64);
  uint64_t v13 = *(unsigned __int8 *)(v9 + 80);
  if (!a2) {
    return 0;
  }
  uint64_t v14 = v12 + v13;
  if (a2 <= v11) {
    goto LABEL_24;
  }
  uint64_t v15 = (((v14 & ~v13)
        + *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64)
        + *(unsigned __int8 *)(v6 + 80)
        + ((*(void *)(*(void *)(AssociatedTypeWitness - 8) + 64)
          + v13
          + ((*(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) + v13) & ~v13)) & ~v13)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
      + v12;
  char v16 = 8 * v15;
  if (v15 <= 3)
  {
    unsigned int v18 = ((a2 - v11 + ~(-1 << v16)) >> v16) + 1;
    if (HIWORD(v18))
    {
      int v17 = *(_DWORD *)((char *)a1 + v15);
      if (!v17) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v18 > 0xFF)
    {
      int v17 = *(unsigned __int16 *)((char *)a1 + v15);
      if (!*(unsigned __int16 *)((char *)a1 + v15)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v18 < 2)
    {
LABEL_24:
      if (v11)
      {
        if (v7 >= v10)
        {
          uint64_t v24 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v6 + 48);
          return v24(a1, v7, v5);
        }
        else
        {
          unint64_t v22 = *(uint64_t (**)(unint64_t))(v9 + 48);
          return v22(((unint64_t)a1 + v14) & ~v13);
        }
      }
      return 0;
    }
  }
  int v17 = *((unsigned __int8 *)a1 + v15);
  if (!*((unsigned char *)a1 + v15)) {
    goto LABEL_24;
  }
LABEL_14:
  int v19 = (v17 - 1) << v16;
  if (v15 > 3) {
    int v19 = 0;
  }
  if (v15)
  {
    if (v15 <= 3) {
      int v20 = v15;
    }
    else {
      int v20 = 4;
    }
    switch(v20)
    {
      case 2:
        int v21 = *a1;
        break;
      case 3:
        int v21 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v21 = *(_DWORD *)a1;
        break;
      default:
        int v21 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v21 = 0;
  }
  return v11 + (v21 | v19) + 1;
}

void storeEnumTagSinglePayload for MixedFormatStyle(unsigned char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v29 = v8;
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  uint64_t v10 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v11 = v10;
  unsigned int v12 = *(_DWORD *)(v10 + 84);
  if (v12 <= v9) {
    unsigned int v13 = v9;
  }
  else {
    unsigned int v13 = *(_DWORD *)(v10 + 84);
  }
  uint64_t v14 = *(void *)(v8 + 64);
  uint64_t v15 = *(unsigned __int8 *)(v10 + 80);
  size_t v16 = ((*(void *)(v10 + 64) + v15 + ((*(void *)(v10 + 64) + v15) & ~v15)) & ~v15) + *(void *)(v10 + 64);
  size_t v17 = ((((v14 + v15) & ~v15) + *(unsigned __int8 *)(v8 + 80) + v16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
      + v14;
  if (a3 <= v13)
  {
    int v18 = 0;
  }
  else if (v17 <= 3)
  {
    unsigned int v21 = ((a3 - v13 + ~(-1 << (8 * v17))) >> (8 * v17)) + 1;
    if (HIWORD(v21))
    {
      int v18 = 4;
    }
    else if (v21 >= 0x100)
    {
      int v18 = 2;
    }
    else
    {
      int v18 = v21 > 1;
    }
  }
  else
  {
    int v18 = 1;
  }
  if (v13 < a2)
  {
    unsigned int v19 = ~v13 + a2;
    if (v17 < 4)
    {
      int v20 = (v19 >> (8 * v17)) + 1;
      if (v17)
      {
        int v22 = v19 & ~(-1 << (8 * v17));
        bzero(a1, v17);
        if (v17 == 3)
        {
          *(_WORD *)a1 = v22;
          a1[2] = BYTE2(v22);
        }
        else if (v17 == 2)
        {
          *(_WORD *)a1 = v22;
        }
        else
        {
          *a1 = v22;
        }
      }
    }
    else
    {
      bzero(a1, v17);
      *(_DWORD *)a1 = v19;
      int v20 = 1;
    }
    switch(v18)
    {
      case 1:
        a1[v17] = v20;
        return;
      case 2:
        *(_WORD *)&a1[v17] = v20;
        return;
      case 3:
        goto LABEL_54;
      case 4:
        *(_DWORD *)&a1[v17] = v20;
        return;
      default:
        return;
    }
  }
  switch(v18)
  {
    case 1:
      a1[v17] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v17] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_54:
      __break(1u);
      JUMPOUT(0x245FE36D4);
    case 4:
      *(_DWORD *)&a1[v17] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v9 >= v12)
        {
          unint64_t v27 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v29 + 56);
          v27(a1, a2, v9, v7);
        }
        else
        {
          unint64_t v23 = (unsigned char *)((unint64_t)&a1[v14 + v15] & ~v15);
          if (v12 >= a2)
          {
            uint64_t v28 = *(void (**)(unsigned char *, uint64_t))(v11 + 56);
            v28(v23, a2);
          }
          else
          {
            if (v16 <= 3) {
              int v24 = ~(-1 << (8 * v16));
            }
            else {
              int v24 = -1;
            }
            if (v16)
            {
              int v25 = v24 & (~v12 + a2);
              if (v16 <= 3) {
                int v26 = v16;
              }
              else {
                int v26 = 4;
              }
              bzero(v23, v16);
              switch(v26)
              {
                case 2:
                  *(_WORD *)unint64_t v23 = v25;
                  break;
                case 3:
                  *(_WORD *)unint64_t v23 = v25;
                  v23[2] = BYTE2(v25);
                  break;
                case 4:
                  *(_DWORD *)unint64_t v23 = v25;
                  break;
                default:
                  *unint64_t v23 = v25;
                  break;
              }
            }
          }
        }
      }
      return;
  }
}

uint64_t getEnumTagSinglePayload for _MixedAoDFrequencyFormatInitializer(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for _MixedAoDFrequencyFormatInitializer(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x245FE3A80);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        size_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t base witness table accessor for Equatable in MixedFormatStyle<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Decodable in MixedFormatStyle<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Encodable in MixedFormatStyle<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Hashable in MixedFormatStyle<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in PausedFormatStyle<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Decodable in PausedFormatStyle<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Encodable in PausedFormatStyle<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Hashable in PausedFormatStyle<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for FormatStyle in PausedFormatStyle<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for FormatStyle in MixedFormatStyle<A>()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for PausedFormatStyle.CodingKeys()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for MixedFormatStyle.CodingKeys()
{
  return swift_getGenericMetadata();
}

unsigned char *storeEnumTagSinglePayload for MixedFormatStyle.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245FE3D00);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for PausedFormatStyle.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x245FE3DF4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t base witness table accessor for Equatable in PausedFormatStyle<A, B>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in MixedFormatStyle<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomDebugStringConvertible in MixedFormatStyle<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomStringConvertible in MixedFormatStyle<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomDebugStringConvertible in PausedFormatStyle<A, B>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomStringConvertible in PausedFormatStyle<A, B>.CodingKeys()
{
  return swift_getWitnessTable();
}

void *_RendererConfiguration.init(renderer:)@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  a2[1] = 0;
  return result;
}

double _RendererConfiguration.RasterizationOptions.init()@<D0>(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)&double result = 65792;
  *(_DWORD *)(a1 + 9) = 65792;
  *(void *)(a1 + 16) = 3;
  return result;
}

uint64_t _RendererConfiguration.renderer.getter@<X0>(void *a1@<X8>)
{
  *a1 = *v1;
  return swift_retain();
}

uint64_t _RendererConfiguration.renderer.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = swift_release();
  *unint64_t v1 = v2;
  return result;
}

uint64_t (*_RendererConfiguration.renderer.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double _RendererConfiguration.minFrameInterval.getter()
{
  return *(double *)(v0 + 8);
}

void _RendererConfiguration.minFrameInterval.setter(double a1)
{
  *(double *)(v1 + 8) = a1;
}

uint64_t (*_RendererConfiguration.minFrameInterval.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t static _RendererConfiguration.rasterized(_:)@<X0>(char *a1@<X0>, uint64_t *a2@<X8>)
{
  char v3 = *a1;
  int v4 = *((_DWORD *)a1 + 1);
  char v5 = a1[8];
  char v6 = a1[9];
  char v7 = a1[10];
  char v8 = a1[11];
  char v9 = a1[12];
  uint64_t v10 = *((void *)a1 + 2);
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 16) = v3;
  *(_DWORD *)(result + 20) = v4;
  *(unsigned char *)(result + 24) = v5;
  *(unsigned char *)(result + 25) = v6;
  *(unsigned char *)(result + 26) = v7;
  *(unsigned char *)(result + 27) = v8;
  *(unsigned char *)(result + 28) = v9;
  *(void *)(result + 32) = v10;
  *a2 = result;
  a2[1] = 0;
  return result;
}

uint64_t sub_245FE4018()
{
  return swift_deallocObject();
}

void _RendererConfiguration.RasterizationOptions.colorMode.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *_RendererConfiguration.RasterizationOptions.colorMode.setter(unsigned char *result)
{
  *uint64_t v1 = *result;
  return result;
}

uint64_t (*_RendererConfiguration.RasterizationOptions.colorMode.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

unint64_t _RendererConfiguration.RasterizationOptions.rbColorMode.getter()
{
  return *(unsigned int *)(v0 + 4) | ((unint64_t)*(unsigned __int8 *)(v0 + 8) << 32);
}

uint64_t _RendererConfiguration.RasterizationOptions.rbColorMode.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 4) = result;
  *(unsigned char *)(v1 + 8) = BYTE4(result) & 1;
  return result;
}

uint64_t (*_RendererConfiguration.RasterizationOptions.rbColorMode.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _RendererConfiguration.RasterizationOptions.rendersAsynchronously.getter()
{
  return *(unsigned __int8 *)(v0 + 9);
}

uint64_t _RendererConfiguration.RasterizationOptions.rendersAsynchronously.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 9) = result;
  return result;
}

uint64_t (*_RendererConfiguration.RasterizationOptions.rendersAsynchronously.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _RendererConfiguration.RasterizationOptions.isOpaque.getter()
{
  return *(unsigned __int8 *)(v0 + 10);
}

uint64_t _RendererConfiguration.RasterizationOptions.isOpaque.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 10) = result;
  return result;
}

uint64_t (*_RendererConfiguration.RasterizationOptions.isOpaque.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _RendererConfiguration.RasterizationOptions.drawsPlatformViews.getter()
{
  return *(unsigned __int8 *)(v0 + 11);
}

uint64_t _RendererConfiguration.RasterizationOptions.drawsPlatformViews.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 11) = result;
  return result;
}

uint64_t (*_RendererConfiguration.RasterizationOptions.drawsPlatformViews.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _RendererConfiguration.RasterizationOptions.prefersDisplayCompositing.getter()
{
  return *(unsigned __int8 *)(v0 + 12);
}

uint64_t _RendererConfiguration.RasterizationOptions.prefersDisplayCompositing.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 12) = result;
  return result;
}

uint64_t (*_RendererConfiguration.RasterizationOptions.prefersDisplayCompositing.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _RendererConfiguration.RasterizationOptions.maxDrawableCount.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t _RendererConfiguration.RasterizationOptions.maxDrawableCount.setter(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t (*_RendererConfiguration.RasterizationOptions.maxDrawableCount.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void *assignWithCopy for _RendererConfiguration(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  return a1;
}

void *assignWithTake for _RendererConfiguration(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for _RendererConfiguration()
{
  return &type metadata for _RendererConfiguration;
}

ValueMetadata *type metadata accessor for _RendererConfiguration.Renderer()
{
  return &type metadata for _RendererConfiguration.Renderer;
}

uint64_t getEnumTagSinglePayload for _RendererConfiguration.RasterizationOptions(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 9);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for _RendererConfiguration.RasterizationOptions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 9) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _RendererConfiguration.RasterizationOptions()
{
  return &type metadata for _RendererConfiguration.RasterizationOptions;
}

uint64_t key path getter for _ViewInputs.position : _ViewInputs@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(result + 64);
  return result;
}

void *specialized Sequence._copyContents(initializing:)(void *result, unsigned char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a2)
  {
    a3 = 0;
    goto LABEL_21;
  }
  if (!a3)
  {
LABEL_21:
    *uint64_t result = a4;
    result[1] = a5;
    result[2] = a3;
    return (void *)a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = *(void *)(a4 + 16);
    if (!v5)
    {
LABEL_20:
      a3 = v5;
      goto LABEL_21;
    }
    *a2 = *(unsigned char *)(a4 + 32);
    if (a3 != 1)
    {
      if (v5 != 1)
      {
        uint64_t v6 = v5 - 2;
        if (v5 - 2 >= (unint64_t)(a3 - 2)) {
          uint64_t v6 = a3 - 2;
        }
        unint64_t v7 = v6 + 1;
        if (v7 < 0x21 || ((unint64_t)&a2[-a4] & 0xFFFFFFFFFFFFFFE0) == 0x20)
        {
          uint64_t v8 = 2;
          uint64_t v9 = 1;
          uint64_t v10 = a2;
        }
        else
        {
          uint64_t v11 = v7 & 0x1F;
          if ((v7 & 0x1F) == 0) {
            uint64_t v11 = 32;
          }
          unint64_t v12 = v7 - v11;
          uint64_t v9 = v7 - v11 + 1;
          uint64_t v10 = &a2[v12];
          uint64_t v8 = v12 + 2;
          int v13 = (long long *)(a4 + 49);
          unsigned int v14 = a2 + 17;
          do
          {
            long long v15 = *v13;
            *(v14 - 1) = *(v13 - 1);
            *unsigned int v14 = v15;
            v13 += 2;
            v14 += 2;
            v12 -= 32;
          }
          while (v12);
        }
        size_t v16 = v10 + 1;
        while (1)
        {
          *size_t v16 = *(unsigned char *)(a4 + 32 + v9);
          if (a3 == v8) {
            goto LABEL_21;
          }
          uint64_t v9 = v8;
          ++v16;
          if (v5 + 1 == ++v8) {
            goto LABEL_20;
          }
        }
      }
      goto LABEL_20;
    }
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copyContents(initializing:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7 = (void *)result;
  if (!a2)
  {
    uint64_t v8 = 0;
    goto LABEL_11;
  }
  uint64_t v8 = a3;
  if (!a3)
  {
LABEL_11:
    *unint64_t v7 = a4;
    v7[1] = v8;
    return v8;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a4 + 16);
    if (!v9)
    {
LABEL_10:
      uint64_t v8 = v9;
      goto LABEL_11;
    }
    uint64_t result = *(void *)(a4 + 32);
    char v11 = *(unsigned char *)(a4 + 40);
    long long v12 = *(_OWORD *)(a4 + 48);
    *(void *)a2 = result;
    *(unsigned char *)(a2 + 8) = v11;
    *(_OWORD *)(a2 + 16) = v12;
    if (a3 == 1)
    {
      outlined copy of Text.Effect.Markers.MarkerType(result, v11);
      goto LABEL_11;
    }
    uint64_t v22 = v9 - 1;
    if (v9 == 1)
    {
      outlined copy of Text.Effect.Markers.MarkerType(result, v11);
      goto LABEL_10;
    }
    uint64_t v19 = result;
    char v20 = v11;
    uint64_t v21 = v9;
    if (*(void *)(a4 + 16) < 2uLL)
    {
LABEL_18:
      __break(1u);
LABEL_19:
      outlined copy of Text.Effect.Markers.MarkerType(v19, v20);
      outlined copy of Text.Effect.Markers.MarkerType(v5, v4);
      goto LABEL_11;
    }
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = a3 - 2;
    while (v22 != v14)
    {
      uint64_t v16 = a2 + v13;
      uint64_t v5 = *(void *)(a4 + v13 + 64);
      char v4 = *(unsigned char *)(a4 + v13 + 72);
      long long v17 = *(_OWORD *)(a4 + v13 + 80);
      *(void *)(v16 + 32) = v5;
      *(unsigned char *)(v16 + 40) = v4;
      *(_OWORD *)(v16 + 48) = v17;
      if (v15 == v14) {
        goto LABEL_19;
      }
      if (v21 - 2 == v14)
      {
        outlined copy of Text.Effect.Markers.MarkerType(v19, v20);
        outlined copy of Text.Effect.Markers.MarkerType(v5, v4);
        uint64_t v8 = v21;
        goto LABEL_11;
      }
      uint64_t result = outlined copy of Text.Effect.Markers.MarkerType(v5, v4);
      unint64_t v18 = v14 + 2;
      ++v14;
      v13 += 32;
      if (v18 >= *(void *)(a4 + 16)) {
        goto LABEL_18;
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  uint64_t v5 = (void *)result;
  if (!a2)
  {
    uint64_t v6 = 0;
    goto LABEL_11;
  }
  uint64_t v6 = a3;
  if (!a3)
  {
LABEL_11:
    *uint64_t v5 = a4;
    v5[1] = v6;
    return v6;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    unint64_t v7 = *(void *)(a4 + 16);
    if (v7)
    {
      uint64_t v8 = a2;
      uint64_t v9 = 0;
      uint64_t v10 = a3 - 1;
      while (v9 < *(void *)(a4 + 16))
      {
        char v11 = *(void *)(type metadata accessor for Text.Effect.RenderSegmentation.Segment(0) - 8);
        long long v12 = *(void *)(v11 + 72);
        uint64_t result = _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOcTm_1(a4+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ v12 * v9, v8, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
        if (v10 == v9) {
          goto LABEL_11;
        }
        v8 += v12;
        if (v7 == ++v9) {
          goto LABEL_9;
        }
      }
      __break(1u);
      goto LABEL_13;
    }
LABEL_9:
    uint64_t v6 = v7;
    goto LABEL_11;
  }
LABEL_13:
  __break(1u);
  return result;
}

{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;

  uint64_t v5 = (void *)result;
  if (!a2)
  {
    uint64_t v6 = 0;
    goto LABEL_20;
  }
  uint64_t v6 = a3;
  if (!a3)
  {
LABEL_20:
    *uint64_t v5 = a4;
    v5[1] = v6;
    return v6;
  }
  if (a3 < 0) {
    goto LABEL_22;
  }
  unint64_t v7 = *(void *)(a4 + 16);
  if (!v7)
  {
    uint64_t v6 = 0;
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)(a4 + 40);
  uint64_t v10 = *(unsigned char *)(a4 + 48);
  *(void *)a2 = *(void *)(a4 + 32);
  *(void *)(a2 + 8) = v9;
  *(unsigned char *)(a2 + 16) = v10;
  if (a3 == 1)
  {
LABEL_19:
    swift_bridgeObjectRetain();
    goto LABEL_20;
  }
  uint64_t v21 = v7 - 1;
  if (v7 == 1)
  {
    uint64_t v6 = 1;
    goto LABEL_19;
  }
  char v20 = v7;
  if (*(void *)(a4 + 16) < 2uLL)
  {
LABEL_16:
    __break(1u);
LABEL_17:
    uint64_t v6 = v20;
LABEL_18:
    swift_bridgeObjectRetain();
    goto LABEL_19;
  }
  char v11 = 0;
  long long v12 = 0;
  uint64_t v13 = a3 - 2;
  uint64_t v14 = v7 - 2;
  while (v21 != v12)
  {
    uint64_t v15 = a2 + v11;
    uint64_t v16 = *(unsigned char *)(a4 + v11 + 72);
    long long v17 = *(void *)(a4 + v11 + 64);
    *(void *)(v15 + 24) = *(void *)(a4 + v11 + 56);
    *(void *)(v15 + 32) = v17;
    *(unsigned char *)(v15 + 40) = v16;
    if (v13 == v12) {
      goto LABEL_18;
    }
    if (v14 == v12) {
      goto LABEL_17;
    }
    unint64_t v18 = *(void *)(a4 + 16);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v19 = v12 + 2;
    ++v12;
    v11 += 24;
    if (v19 >= v18) {
      goto LABEL_16;
    }
  }
  __break(1u);
LABEL_22:
  __break(1u);
  return result;
}

void *specialized Sequence._copyContents(initializing:)(void *result, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  if (!a2)
  {
    a3 = 0;
    goto LABEL_29;
  }
  if (!a3)
  {
LABEL_29:
    *uint64_t result = a4;
    result[1] = a3;
    return (void *)a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v4 = *(void *)(a4 + 16);
    if (!v4)
    {
LABEL_28:
      a3 = v4;
      goto LABEL_29;
    }
    *a2 = *(_OWORD *)(a4 + 32);
    if (a3 != 1)
    {
      if (v4 != 1)
      {
        unint64_t v5 = v4 - 2;
        if (v4 - 2 >= (unint64_t)(a3 - 2)) {
          uint64_t v6 = a3 - 2;
        }
        else {
          uint64_t v6 = v4 - 2;
        }
        unint64_t v7 = v6 + 1;
        if (v7 < 0xB) {
          goto LABEL_24;
        }
        if (v5 >= a3 - 2) {
          unint64_t v5 = a3 - 2;
        }
        uint64_t v8 = v5;
        if ((unint64_t)(a2 + 1) >= v8 * 16 + a4 + 64 || a4 + 48 >= (unint64_t)&a2[v8 + 2])
        {
          uint64_t v10 = v7 & 3;
          if ((v7 & 3) == 0) {
            uint64_t v10 = 4;
          }
          unint64_t v11 = v7 - v10;
          uint64_t v12 = v7 - v10 + 1;
          uint64_t v13 = &a2[v11];
          uint64_t v14 = v11 + 2;
          uint64_t v15 = (long long *)(a4 + 80);
          uint64_t v16 = a2 + 3;
          do
          {
            long long v18 = *(v15 - 2);
            long long v17 = *(v15 - 1);
            long long v20 = *v15;
            long long v19 = v15[1];
            v15 += 4;
            *(v16 - 2) = v18;
            *(v16 - 1) = v17;
            *uint64_t v16 = v20;
            v16[1] = v19;
            v16 += 4;
            v11 -= 4;
          }
          while (v11);
        }
        else
        {
LABEL_24:
          uint64_t v14 = 2;
          uint64_t v12 = 1;
          uint64_t v13 = a2;
        }
        uint64_t v21 = v13 + 1;
        while (1)
        {
          *uint64_t v21 = *(_OWORD *)(a4 + 32 + 16 * v12);
          if (a3 == v14) {
            goto LABEL_29;
          }
          uint64_t v12 = v14;
          ++v21;
          if (v4 + 1 == ++v14) {
            goto LABEL_28;
          }
        }
      }
      goto LABEL_28;
    }
    goto LABEL_29;
  }
  __break(1u);
  return result;
}

{
  uint64_t v4;
  long long v5;
  uint64_t v6;
  long long *v7;
  _OWORD *v8;
  long long v9;

  if (!a2)
  {
    a3 = 0;
    goto LABEL_13;
  }
  if (!a3) {
    goto LABEL_13;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v4 = *(void *)(a4 + 16);
    if (!v4)
    {
LABEL_11:
      a3 = v4;
      goto LABEL_13;
    }
    unint64_t v5 = *(_OWORD *)(a4 + 48);
    *a2 = *(_OWORD *)(a4 + 32);
    a2[1] = v5;
    if (a3 != 1)
    {
      if (v4 != 1)
      {
        uint64_t v6 = 0;
        unint64_t v7 = (long long *)(a4 + 80);
        uint64_t v8 = a2 + 3;
        while ((unint64_t)(v6 + 1) < *(void *)(a4 + 16))
        {
          uint64_t v9 = *v7;
          *(v8 - 1) = *(v7 - 1);
          *uint64_t v8 = v9;
          if (a3 - 2 == v6) {
            goto LABEL_13;
          }
          ++v6;
          v7 += 2;
          v8 += 2;
          if (v4 - 1 == v6) {
            goto LABEL_11;
          }
        }
        __break(1u);
        goto LABEL_15;
      }
      goto LABEL_11;
    }
LABEL_13:
    *uint64_t result = a4;
    result[1] = a3;
    return (void *)a3;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copyContents(initializing:)(uint64_t result, void *a2, uint64_t a3, void *a4, char a5)
{
  uint64_t v7 = result;
  if (!a2)
  {
    uint64_t v8 = 0;
    goto LABEL_18;
  }
  uint64_t v8 = a3;
  if (!a3)
  {
LABEL_18:
    *(void *)uint64_t v7 = a4;
    *(unsigned char *)(v7 + 8) = a5;
    *(void *)(v7 + 16) = v8;
    return v8;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = a4[2];
    if (v9)
    {
      *a2 = a4[4];
      if (a3 != 1)
      {
        if (v9 == 1)
        {
          uint64_t v8 = 1;
        }
        else
        {
          a2[1] = a4[5];
          uint64_t v10 = a3 - 2;
          if (a3 != 2)
          {
            uint64_t v11 = 0;
            uint64_t v12 = a2 + 2;
            while (v9 - 2 != v11)
            {
              swift_retain();
              v12[v11] = a4[v11 + 6];
              if (v10 == ++v11) {
                goto LABEL_16;
              }
            }
            uint64_t v8 = v9;
          }
LABEL_16:
          swift_retain();
        }
      }
      swift_retain();
    }
    else
    {
      uint64_t v8 = 0;
    }
    goto LABEL_18;
  }
  __break(1u);
  return result;
}

void specialized Sequence._copyContents(initializing:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 + 16);
  if (!a2 || !a3) {
    goto LABEL_16;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    if (v5 == *(void *)(a4 + 24))
    {
LABEL_16:
      *a1 = a4;
      a1[1] = v5;
      return;
    }
    uint64_t v6 = a2;
    uint64_t v16 = a1;
    uint64_t v7 = 0;
    uint64_t v8 = a3 - 1;
    while (1)
    {
      uint64_t v9 = v7;
      uint64_t v11 = *(void **)(a4 + 32);
      uint64_t v10 = *(void *)(a4 + 40);
      long long v17 = *(_OWORD *)(a4 + 56);
      int v12 = *(_DWORD *)(a4 + 72);
      if (*(unsigned char *)(a4 + 48))
      {
        outlined copy of Text.Layout.Line.Line(v11, v10, 1);
        id v13 = (id)_NSTextLineFragmentGetCTLine(v11);
        if (!v13) {
          goto LABEL_19;
        }
        id v14 = v13;
        outlined consume of Text.Layout.Line.Line(v11, v10, 1);
        uint64_t v10 = 0;
        uint64_t v11 = v14;
      }
      else
      {
        outlined copy of Text.Layout.Line.Line(v11, v10, 0);
        outlined copy of Text.Layout.Line.Line(v11, v10, 0);

        swift_release();
      }
      uint64_t v15 = v5 + v9;
      if (v5 + v9 < *(void *)(a4 + 16) || v15 >= *(void *)(a4 + 24)) {
        break;
      }
      *(void *)uint64_t v6 = v11;
      *(void *)(v6 + 8) = v15;
      *(_OWORD *)(v6 + 16) = v17;
      *(_DWORD *)(v6 + 32) = v12;
      *(void *)(v6 + 40) = v10;
      if (v8 != v9)
      {
        uint64_t v7 = v9 + 1;
        v6 += 48;
        if (v5 + v9 + 1 != *(void *)(a4 + 24)) {
          continue;
        }
      }
      v5 += v9 + 1;
      a1 = v16;
      goto LABEL_16;
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  __break(1u);
}

void *specialized Sequence._copyContents(initializing:)(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2)
  {
    a3 = 0;
    goto LABEL_11;
  }
  if (!a3)
  {
LABEL_11:
    *uint64_t result = a4;
    result[1] = a3;
    return (void *)a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v4 = *(void *)(a4 + 16);
    if (v4)
    {
      uint64_t v5 = 0;
      for (uint64_t i = 1; ; ++i)
      {
        uint64_t v7 = *(void *)(a4 + v5 + 96);
        uint64_t v8 = a2 + v5;
        char v9 = *(unsigned char *)(a4 + v5 + 104);
        long long v10 = *(_OWORD *)(a4 + v5 + 48);
        long long v11 = *(_OWORD *)(a4 + v5 + 64);
        long long v12 = *(_OWORD *)(a4 + v5 + 80);
        long long v13 = *(_OWORD *)(a4 + v5 + 112);
        *(_OWORD *)uint64_t v8 = *(_OWORD *)(a4 + v5 + 32);
        *(_OWORD *)(v8 + 16) = v10;
        *(_OWORD *)(v8 + 32) = v11;
        *(_OWORD *)(v8 + 48) = v12;
        *(void *)(v8 + 64) = v7;
        *(unsigned char *)(v8 + 72) = v9;
        *(_OWORD *)(v8 + 80) = v13;
        if (a3 == i) {
          break;
        }
        if (v4 == i) {
          goto LABEL_10;
        }
        v5 += 96;
      }
    }
    else
    {
LABEL_10:
      a3 = v4;
    }
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

void *specialized Sequence._copyContents(initializing:)(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!a2)
  {
LABEL_11:
    uint64_t v7 = 0;
    goto LABEL_15;
  }
  uint64_t v7 = a3;
  if (!a3)
  {
LABEL_15:
    *uint64_t result = a4;
    result[1] = a5;
    result[2] = a6;
    result[3] = v7;
    return (void *)v7;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = *(void *)(a6 + 16);
    if (v8)
    {
      uint64_t v23 = a4;
      int v24 = result;
      uint64_t v25 = a5;
      uint64_t v10 = 0;
      unint64_t v11 = 1;
      while (1)
      {
        uint64_t v12 = *(void *)(a6 + v10 + 88);
        uint64_t v13 = a2 + v10;
        int v14 = *(_DWORD *)(a6 + v10 + 64);
        uint64_t v16 = *(void **)(a6 + v10 + 32);
        uint64_t v15 = *(void *)(a6 + v10 + 40);
        long long v17 = *(_OWORD *)(a6 + v10 + 48);
        long long v18 = *(_OWORD *)(a6 + v10 + 72);
        *(void *)uint64_t v13 = v16;
        *(void *)(v13 + 8) = v15;
        *(_OWORD *)(v13 + 16) = v17;
        *(_DWORD *)(v13 + 32) = v14;
        *(_OWORD *)(v13 + 40) = v18;
        *(void *)(v13 + 56) = v12;
        if (v7 == v11) {
          break;
        }
        if (v8 == v11)
        {
          uint64_t v7 = v8;
          break;
        }
        unint64_t v19 = *(void *)(a6 + 16);
        id v20 = v16;
        uint64_t result = (void *)swift_retain();
        v10 += 64;
        if (v11++ >= v19)
        {
          __break(1u);
          goto LABEL_11;
        }
      }
      swift_retain();
      id v22 = v16;
      uint64_t result = v24;
      a5 = v25;
      a4 = v23;
    }
    else
    {
      uint64_t v7 = 0;
    }
    goto LABEL_15;
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copyContents(initializing:)(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  _s10Foundation4DateVSgMaTm_6(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v21 - v9;
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  int v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries(0);
  MEMORY[0x270FA5388](v15 - 8);
  long long v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = outlined init with take of ClusterIndexSequence.Iterator(v4, (uint64_t)v17, type metadata accessor for TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries);
  if (!a2)
  {
    a3 = 0;
    goto LABEL_12;
  }
  if (!a3)
  {
LABEL_12:
    outlined init with take of ClusterIndexSequence.Iterator((uint64_t)v17, a1, type metadata accessor for TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries);
    return a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v23 = a1;
    TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries.next()(v10);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
    {
      a3 = 0;
LABEL_10:
      outlined destroy of Date?((uint64_t)v10);
      a1 = v23;
    }
    else
    {
      uint64_t v19 = a3;
      a3 = 0;
      id v20 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
      uint64_t v22 = v19;
      uint64_t v24 = v19 - 1;
      while (1)
      {
        v20(v14, v10, v11);
        v20(a2, v14, v11);
        if (v24 == a3) {
          break;
        }
        a2 += *(void *)(v12 + 72);
        TimerIntervalTimelineSchedule.CountdownReducedFrequencyEntries.next()(v10);
        ++a3;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1) {
          goto LABEL_10;
        }
      }
      a3 = v22;
      a1 = v23;
    }
    goto LABEL_12;
  }
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  void (**v20)(char *, void, uint64_t, uint64_t);
  unsigned int (**v21)(char *, uint64_t, uint64_t);
  void (**v22)(char *, char *, uint64_t);
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  uint64_t v29;

  uint64_t v4 = v3;
  _s10Foundation4DateVSgMaTm_6(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v24 - v9;
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v29 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v14 = type metadata accessor for PeriodicTimelineSchedule.Entries(0);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = outlined init with take of ClusterIndexSequence.Iterator(v4, (uint64_t)v16, type metadata accessor for PeriodicTimelineSchedule.Entries);
  if (!a2)
  {
    long long v18 = 0;
LABEL_13:
    outlined init with take of ClusterIndexSequence.Iterator((uint64_t)v16, a1, type metadata accessor for PeriodicTimelineSchedule.Entries);
    return v18;
  }
  if (!a3)
  {
    long long v18 = 0;
    goto LABEL_13;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v25 = a1;
    long long v18 = 0;
    unint64_t v27 = *(void (**)(char *, char *, uint64_t))(v29 + 16);
    uint64_t v28 = v29 + 16;
    uint64_t v19 = a3;
    id v20 = (void (**)(char *, void, uint64_t, uint64_t))(v29 + 56);
    uint64_t v21 = (unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
    uint64_t v22 = (void (**)(char *, char *, uint64_t))(v29 + 32);
    uint64_t v24 = v19;
    int v26 = v19 - 1;
    while (1)
    {
      v27(v10, v16, v11);
      (*v20)(v10, 0, 1, v11);
      static Date.+= infix(_:_:)();
      if ((*v21)(v10, 1, v11) == 1)
      {
        outlined destroy of Date?((uint64_t)v10);
        goto LABEL_12;
      }
      uint64_t v23 = *v22;
      (*v22)(v13, v10, v11);
      v23(a2, v13, v11);
      if (v26 == v18) {
        break;
      }
      a2 += *(void *)(v29 + 72);
      ++v18;
    }
    long long v18 = v24;
LABEL_12:
    a1 = v25;
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copyContents(initializing:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v81 = type metadata accessor for Calendar.SearchDirection();
  uint64_t v86 = *(void *)(v81 - 8);
  MEMORY[0x270FA5388](v81);
  uint64_t v80 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = type metadata accessor for Calendar.RepeatedTimePolicy();
  uint64_t v85 = *(char **)(v79 - 8);
  MEMORY[0x270FA5388](v79);
  uint64_t v78 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = type metadata accessor for Calendar.MatchingPolicy();
  uint64_t v84 = *(void *)(v77 - 8);
  MEMORY[0x270FA5388](v77);
  uint64_t v76 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = type metadata accessor for Calendar();
  uint64_t v83 = *(void *)(v75 - 8);
  MEMORY[0x270FA5388](v75);
  uint64_t v10 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s10Foundation4DateVSgMaTm_6(0, &lazy cache variable for type metadata for Date?, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v52 - v15;
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v52 - v18;
  uint64_t v20 = type metadata accessor for Date();
  uint64_t v82 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v54 = (char *)&v52 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char *)&v52 - v23;
  MEMORY[0x270FA5388](v25);
  uint64_t v74 = (char *)&v52 - v26;
  uint64_t v27 = type metadata accessor for EveryMinuteTimelineSchedule.Entries(0);
  MEMORY[0x270FA5388](v27 - 8);
  uint64_t v29 = (char *)&v52 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = outlined init with take of ClusterIndexSequence.Iterator((uint64_t)v88, (uint64_t)v29, type metadata accessor for EveryMinuteTimelineSchedule.Entries);
  if (!a2)
  {
    a3 = 0;
    goto LABEL_9;
  }
  if (!a3)
  {
LABEL_9:
    outlined init with take of ClusterIndexSequence.Iterator((uint64_t)v29, a1, type metadata accessor for EveryMinuteTimelineSchedule.Entries);
    return a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v53 = a1;
    outlined init with copy of Date?((uint64_t)v29, (uint64_t)v16);
    uint64_t v32 = v82 + 48;
    uint64_t v31 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v82 + 48);
    char v73 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v82 + 56);
    int v88 = v31;
    if (v31((uint64_t)v16, 1, v20) == 1)
    {
      a3 = 0;
LABEL_6:
      outlined destroy of Date?((uint64_t)v16);
      (*v73)(v19, 1, 1, v20);
    }
    else
    {
      uint64_t v33 = a3;
      a3 = 0;
      unsigned int v69 = *MEMORY[0x263F07780];
      uint64_t v68 = (void (**)(char *, void, uint64_t))(v84 + 104);
      unsigned int v67 = *MEMORY[0x263F07800];
      int v66 = (void (**)(char *, void, uint64_t))(v85 + 104);
      unsigned int v65 = *MEMORY[0x263F077E0];
      uint64_t v64 = (void (**)(char *, void, uint64_t))(v86 + 104);
      uint64_t v63 = (void (**)(char *, uint64_t))(v86 + 8);
      uint64_t v62 = (void (**)(char *, uint64_t))(v85 + 8);
      uint64_t v61 = (void (**)(char *, uint64_t))(v84 + 8);
      uint64_t v60 = (void (**)(char *, uint64_t))(v83 + 8);
      uint64_t v85 = *(char **)(v32 - 16);
      uint64_t v86 = v32 - 16;
      uint64_t v52 = v33;
      uint64_t v58 = v33 - 1;
      int v72 = v19;
      uint64_t v57 = v16;
      uint64_t v70 = v24;
      uint64_t v71 = v29;
      uint64_t v87 = v32;
      uint64_t v56 = v10;
      uint64_t v55 = v13;
      uint64_t v59 = v20;
      while (1)
      {
        uint64_t v83 = a2;
        uint64_t v84 = a3;
        uint64_t v34 = (uint64_t)v13;
        ((void (*)(char *, char *, uint64_t))v85)(v24, v16, v20);
        static Calendar.current.getter();
        uint64_t v35 = v10;
        if (one-time initialization token for zeroSecondComponents != -1) {
          swift_once();
        }
        uint64_t v36 = type metadata accessor for DateComponents();
        __swift_project_value_buffer(v36, (uint64_t)static EveryMinuteTimelineSchedule.Entries.zeroSecondComponents);
        uint64_t v38 = v76;
        uint64_t v37 = v77;
        (*v68)(v76, v69, v77);
        uint64_t v39 = v78;
        uint64_t v40 = v79;
        (*v66)(v78, v67, v79);
        uint64_t v41 = v80;
        uint64_t v42 = v81;
        (*v64)(v80, v65, v81);
        Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)();
        (*v63)(v41, v42);
        (*v62)(v39, v40);
        (*v61)(v38, v37);
        (*v60)(v35, v75);
        uint64_t v20 = v59;
        int v43 = v88(v34, 1, v59);
        int v44 = v73;
        if (v43 == 1)
        {
          outlined destroy of Date?(v34);
          uint64_t v29 = v71;
          outlined destroy of Date?((uint64_t)v71);
          uint64_t v45 = *v44;
          (*v44)(v29, 1, 1, v20);
          uint64_t v19 = v72;
          a3 = v84;
          uint64_t v46 = (void (*)(char *, char *, uint64_t))v85;
        }
        else
        {
          char v47 = v54;
          uint64_t v46 = (void (*)(char *, char *, uint64_t))v85;
          ((void (*)(char *, uint64_t, uint64_t))v85)(v54, v34, v20);
          uint64_t v29 = v71;
          outlined destroy of Date?((uint64_t)v71);
          v46(v29, v47, v20);
          uint64_t v45 = *v44;
          (*v44)(v29, 0, 1, v20);
          uint64_t v19 = v72;
          a3 = v84;
        }
        uint64_t v24 = v70;
        v46(v19, v70, v20);
        v45(v19, 0, 1, v20);
        if (v88((uint64_t)v19, 1, v20) == 1) {
          break;
        }
        uint64_t v48 = v74;
        v46(v74, v19, v20);
        uint64_t v49 = v83;
        v46((char *)v83, v48, v20);
        if (v58 == a3)
        {
          a1 = v53;
          a3 = v52;
          goto LABEL_9;
        }
        uint64_t v50 = v82;
        a2 = v49 + *(void *)(v82 + 72);
        uint64_t v16 = v57;
        outlined init with copy of Date?((uint64_t)v29, (uint64_t)v57);
        int v88 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v50 + 48);
        int v51 = v88((uint64_t)v16, 1, v20);
        ++a3;
        uint64_t v10 = v56;
        uint64_t v13 = v55;
        if (v51 == 1) {
          goto LABEL_6;
        }
      }
    }
    a1 = v53;
    outlined destroy of Date?((uint64_t)v19);
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copyContents(initializing:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for ClusterIndexSequence.Iterator(0);
  uint64_t v8 = (int *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (uint64_t *)((char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v48 - v12;
  _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOcTm_1(v3, (uint64_t)&v48 - v12, type metadata accessor for Text.Effect.BaseContent);
  uint64_t v14 = type metadata accessor for ClusterIndexSequence(0);
  uint64_t v15 = *(int *)(v14 + 24);
  uint64_t v16 = (uint64_t *)(v3 + *(int *)(v14 + 20));
  uint64_t v18 = *v16;
  uint64_t v17 = v16[1];
  uint64_t v19 = &v13[v8[7]];
  *(void *)uint64_t v19 = v18;
  *((void *)v19 + 1) = v17;
  uint64_t v20 = v8[8];
  long long v21 = *(_OWORD *)(v3 + v15);
  uint64_t v52 = v13;
  uint64_t v53 = &v13[v20];
  *(_OWORD *)&v13[v20] = v21;
  uint64_t v22 = &v13[v8[9]];
  *(void *)uint64_t v22 = v18;
  *((void *)v22 + 1) = v17;
  outlined destroy of ClusterIndexSequence(v3, type metadata accessor for ClusterIndexSequence);
  if (!a2)
  {
    a3 = 0;
    goto LABEL_29;
  }
  if (!a3)
  {
LABEL_29:
    outlined init with take of ClusterIndexSequence.Iterator((uint64_t)v52, a1, type metadata accessor for ClusterIndexSequence.Iterator);
    return a3;
  }
  if (a3 < 0)
  {
LABEL_39:
    __break(1u);
LABEL_40:
    swift_retain();
    swift_retain();
  }
  else
  {
    uint64_t v49 = a1;
    uint64_t v50 = a3;
    uint64_t v23 = 0;
    int v51 = v22;
    while (1)
    {
      unint64_t v24 = *(void *)v22;
      uint64_t v25 = *(void *)v53;
      if (*(void *)v22 >= *(void *)v53)
      {
        if (__OFSUB__(v25, v24)) {
          goto LABEL_37;
        }
        if (v25 != v24 || *((void *)v22 + 1) >= *((void *)v53 + 1))
        {
          a3 = v23;
LABEL_28:
          a1 = v49;
          goto LABEL_29;
        }
      }
      uint64_t v54 = v23;
      _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOcTm_1((uint64_t)v52, (uint64_t)v10, type metadata accessor for ClusterIndexSequence.Iterator);
      uint64_t v27 = *v10;
      Swift::UInt64 v26 = v10[1];
      uint64_t v28 = v10[2];
      swift_beginAccess();
      uint64_t v29 = *(void *)(v27 + 48);
      if (!*(void *)(v29 + 16)) {
        goto LABEL_40;
      }
      uint64_t v30 = (uint64_t)v10;
      swift_retain_n();
      swift_retain();
      unint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v28);
      if ((v32 & 1) == 0) {
        break;
      }
      uint64_t v33 = *(void *)(*(void *)(v29 + 56) + 16 * v31);
      swift_endAccess();
      swift_bridgeObjectRetain();
      swift_release();
      if ((v24 & 0x8000000000000000) != 0) {
        goto LABEL_31;
      }
      unint64_t v34 = *(void *)(v33 + 16);
      if (v24 >= v34) {
        goto LABEL_32;
      }
      uint64_t v35 = v33 + 32;
      uint64_t v36 = *(void *)(v33 + 32 + 8 * v24);
      uint64_t v37 = 0;
      if (v24)
      {
        unint64_t v38 = v24;
        while (1)
        {
          uint64_t v39 = *(void *)(*(void *)(*(void *)v35 + 96) + 16);
          BOOL v40 = __OFADD__(v37, v39);
          v37 += v39;
          if (v40) {
            break;
          }
          v35 += 8;
          if (!--v38) {
            goto LABEL_18;
          }
        }
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
LABEL_18:
      swift_retain();
      swift_bridgeObjectRelease();
      uint64_t v10 = (uint64_t *)v30;
      outlined destroy of ClusterIndexSequence(v30, type metadata accessor for Text.Effect.BaseContent);
      uint64_t v22 = v51;
      uint64_t v41 = *((void *)v51 + 1);
      uint64_t v42 = v41 + 1;
      if (__OFADD__(v41, 1)) {
        goto LABEL_33;
      }
      *((void *)v51 + 1) = v42;
      uint64_t v43 = *(void *)(*(void *)(v36 + 96) + 16);
      BOOL v40 = __OFADD__(v37, v43);
      uint64_t v44 = v37 + v43;
      if (v40) {
        goto LABEL_34;
      }
      if (v44 < v37) {
        goto LABEL_35;
      }
      BOOL v45 = v44 == v42;
      if (__OFSUB__(v44, v42)) {
        goto LABEL_36;
      }
      uint64_t v46 = v54;
      if (v45)
      {
        if (__OFADD__(*(void *)v22, 1)) {
          goto LABEL_38;
        }
        ++*(void *)v22;
      }
      uint64_t v23 = v46 + 1;
      *a2 = v27;
      a2[1] = v26;
      a2[2] = v28;
      a2[3] = v36;
      a2[4] = v24;
      a2[5] = v34;
      a2[6] = v37;
      a2[7] = v41;
      a2 += 8;
      a3 = v50;
      if (v23 == v50) {
        goto LABEL_28;
      }
    }
    swift_release();
  }
  swift_endAccess();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *specialized Sequence._copyContents(initializing:)(void *result, void *a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v6 = result;
  if (!a2)
  {
LABEL_9:
    uint64_t v7 = 0;
    goto LABEL_10;
  }
  uint64_t v7 = a3;
  if (!a3)
  {
LABEL_10:
    *uint64_t v6 = a4;
    v6[1] = a5;
    return (void *)v7;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    if (a4)
    {
      uint64_t v8 = a2;
      uint64_t v9 = 0;
      uint64_t v10 = a3 - 1;
      if (a4 == a5)
      {
LABEL_8:
        uint64_t v7 = v9;
      }
      else
      {
        while (1)
        {
          uint64_t v11 = a4 + 4;
          uint64_t v12 = a4[1];
          uint64_t v13 = a4[2];
          uint64_t v14 = a4[3];
          *uint64_t v8 = *a4;
          v8[1] = v12;
          _OWORD v8[2] = v13;
          v8[3] = v14;
          if (v10 == v9) {
            break;
          }
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          ++v9;
          v8 += 4;
          a4 = v11;
          if (v11 == a5) {
            goto LABEL_8;
          }
        }
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        a4 = v11;
      }
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

void *specialized ArrayWith2Inline.init<A>(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 < 3)
  {
    if (v3)
    {
      long long v4 = *(_OWORD *)(a1 + 144);
      long long v28 = *(_OWORD *)(a1 + 128);
      long long v29 = v4;
      long long v30 = *(_OWORD *)(a1 + 160);
      long long v5 = *(_OWORD *)(a1 + 80);
      long long v24 = *(_OWORD *)(a1 + 64);
      long long v25 = v5;
      long long v6 = *(_OWORD *)(a1 + 112);
      long long v26 = *(_OWORD *)(a1 + 96);
      long long v27 = v6;
      long long v7 = *(_OWORD *)(a1 + 48);
      long long v22 = *(_OWORD *)(a1 + 32);
      long long v23 = v7;
      if (v3 != 1)
      {
        long long v9 = *(_OWORD *)(a1 + 288);
        long long v19 = *(_OWORD *)(a1 + 272);
        long long v20 = v9;
        long long v21 = *(_OWORD *)(a1 + 304);
        long long v10 = *(_OWORD *)(a1 + 224);
        long long v15 = *(_OWORD *)(a1 + 208);
        long long v16 = v10;
        long long v11 = *(_OWORD *)(a1 + 256);
        long long v17 = *(_OWORD *)(a1 + 240);
        long long v18 = v11;
        long long v12 = *(_OWORD *)(a1 + 192);
        long long v13 = *(_OWORD *)(a1 + 176);
        long long v14 = v12;
        outlined retain of GestureDebug.Data((uint64_t)&v22);
        outlined retain of GestureDebug.Data((uint64_t)&v13);
        swift_bridgeObjectRelease();
        __src[6] = v28;
        __src[7] = v29;
        __src[2] = v24;
        __src[3] = v25;
        __src[4] = v26;
        __src[5] = v27;
        __src[0] = v22;
        __src[1] = v23;
        __src[14] = v18;
        __src[15] = v19;
        __src[16] = v20;
        __src[17] = v21;
        __src[10] = v14;
        __src[11] = v15;
        __src[12] = v16;
        __src[13] = v17;
        __src[8] = v30;
        __src[9] = v13;
        _s7SwiftUI16ArrayWith2InlineV7StorageOyAA12GestureDebugO4DataV_GWOi0_((uint64_t)__src);
        return memcpy(a2, __src, 0x121uLL);
      }
      outlined retain of GestureDebug.Data((uint64_t)&v22);
      swift_bridgeObjectRelease();
      long long v19 = v28;
      long long v20 = v29;
      long long v21 = v30;
      long long v15 = v24;
      long long v16 = v25;
      long long v17 = v26;
      long long v18 = v27;
      long long v13 = v22;
      long long v14 = v23;
      _s7SwiftUI16ArrayWith2InlineV7StorageOyAA12GestureDebugO4DataV_GWOi_((uint64_t)&v13);
    }
    else
    {
      swift_bridgeObjectRelease();
      _s7SwiftUI16ArrayWith2InlineV7StorageOyAA12GestureDebugO4DataV_GWOi2_((uint64_t)&v13);
    }
  }
  else
  {
    *(void *)&long long v13 = a1;
    _s7SwiftUI16ArrayWith2InlineV7StorageOyAA12GestureDebugO4DataV_GWOi1_((uint64_t)&v13);
  }
  outlined init with take of LayoutGestureBox.Child.DebugData?((uint64_t)&v13, (uint64_t)__src, &lazy cache variable for type metadata for ArrayWith2Inline<GestureDebug.Data>.Storage, (uint64_t)&type metadata for GestureDebug.Data, (uint64_t (*)(void, uint64_t))type metadata accessor for ArrayWith2Inline.Storage);
  return memcpy(a2, __src, 0x121uLL);
}

uint64_t *specialized ArrayWith2Inline.init<A>(_:)@<X0>(uint64_t *result@<X0>, int64_t a2@<X1>, uint64_t a3@<X8>)
{
  long long v4 = result;
  if (a2 <= 2)
  {
    if (!result || !a2)
    {
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      char v14 = 3;
      goto LABEL_11;
    }
    uint64_t v13 = *result;
    uint64_t v12 = result[1];
    uint64_t v10 = result[3];
    if (a2 == 1)
    {
      uint64_t v15 = result[2];
      swift_bridgeObjectRetain();
      uint64_t result = (uint64_t *)swift_bridgeObjectRetain();
      uint64_t v11 = v15;
      char v14 = 0;
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      goto LABEL_11;
    }
    uint64_t v23 = result[2];
    uint64_t v9 = result[4];
    uint64_t v8 = result[5];
    uint64_t v7 = result[6];
    uint64_t v6 = result[7];
    if (a2 == 2)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t result = (uint64_t *)swift_bridgeObjectRetain();
      char v14 = 1;
      uint64_t v11 = v23;
      goto LABEL_11;
    }
    long long v21 = result + 12;
    long long v22 = &result[4 * a2];
    uint64_t v16 = result[9];
    uint64_t v17 = result[11];
    uint64_t v19 = result[10];
    uint64_t v20 = result[8];
    _s10Foundation4DateVSgMaTm_6(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(String, String)>, (uint64_t (*)(uint64_t))type metadata accessor for (String, String), MEMORY[0x263F8E0F8]);
    uint64_t v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_2461BE2B0;
    *(void *)(v18 + 32) = v13;
    *(void *)(v18 + 40) = v12;
    *(void *)(v18 + 48) = v23;
    *(void *)(v18 + 56) = v10;
    *(void *)(v18 + 64) = v9;
    *(void *)(v18 + 72) = v8;
    *(void *)(v18 + 80) = v7;
    *(void *)(v18 + 88) = v6;
    *(void *)(v18 + 96) = v20;
    *(void *)(v18 + 104) = v16;
    *(void *)(v18 + 112) = v19;
    *(void *)(v18 + 120) = v17;
    uint64_t v24 = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t result = (uint64_t *)specialized ContiguousArray.append<A>(contentsOf:)(v21, v22);
  }
  else
  {
    uint64_t v24 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, a2, 0);
    uint64_t result = specialized ContiguousArray.append<A>(contentsOf:)(v4, a2);
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = v24;
  char v14 = 2;
LABEL_11:
  *(void *)a3 = v13;
  *(void *)(a3 + 8) = v12;
  *(void *)(a3 + 16) = v11;
  *(void *)(a3 + 24) = v10;
  *(void *)(a3 + 32) = v9;
  *(void *)(a3 + 40) = v8;
  *(void *)(a3 + 48) = v7;
  *(void *)(a3 + 56) = v6;
  *(unsigned char *)(a3 + 64) = v14;
  return result;
}

uint64_t *specialized ContiguousArray.append<A>(contentsOf:)(uint64_t *result, uint64_t a2)
{
  uint64_t v3 = *v2;
  int64_t v4 = *(void *)(*v2 + 16);
  int64_t v5 = v4 + a2;
  if (__OFADD__(v4, a2))
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  unint64_t v7 = (unint64_t)result;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v2 = v3;
  if (!isUniquelyReferenced_nonNull_native || (int64_t v9 = *(void *)(v3 + 24) >> 1, v9 < v5))
  {
    if (v4 <= v5) {
      int64_t v10 = v5;
    }
    else {
      int64_t v10 = v4;
    }
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v10, 1);
    uint64_t v3 = *v2;
    int64_t v9 = *(void *)(*v2 + 24) >> 1;
  }
  uint64_t v11 = *(void *)(v3 + 16);
  uint64_t v12 = v9 - v11;
  uint64_t result = (uint64_t *)specialized UnsafeBufferPointer._copyContents(initializing:)(v3 + 32 * v11 + 32, v9 - v11, v7, a2);
  if (v14 < a2) {
    goto LABEL_34;
  }
  uint64_t v15 = v13;
  if (v14 < 1) {
    goto LABEL_12;
  }
  uint64_t v16 = *(void *)(v3 + 16);
  BOOL v17 = __OFADD__(v16, v14);
  uint64_t v18 = v16 + v14;
  if (v17)
  {
LABEL_35:
    __break(1u);
    return result;
  }
  *(void *)(v3 + 16) = v18;
LABEL_12:
  if (v14 == v12 && result && result != v13)
  {
    uint64_t v20 = *(void *)(v3 + 16);
    unint64_t v38 = result + 4;
    uint64_t v21 = *result;
    uint64_t v22 = result[1];
    uint64_t v23 = result[2];
    uint64_t v24 = result[3];
    swift_bridgeObjectRetain();
    uint64_t result = (uint64_t *)swift_bridgeObjectRetain();
    uint64_t v25 = v20;
    uint64_t v37 = v2;
    BOOL v40 = v15;
    while (1)
    {
      while (1)
      {
        unint64_t v27 = *(void *)(v3 + 24);
        uint64_t v28 = v25 + 1;
        if (v25 + 1 > (uint64_t)(v27 >> 1))
        {
          uint64_t v36 = v25;
          uint64_t result = (uint64_t *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v25 + 1, 1);
          uint64_t v25 = v36;
        }
        uint64_t v3 = *v2;
        uint64_t v29 = *(void *)(*v2 + 24) >> 1;
        if (v25 < v29) {
          break;
        }
        uint64_t v26 = v25;
        swift_retain();
        outlined copy of (String, String)?(v21, v22);
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t result = (uint64_t *)swift_bridgeObjectRelease();
        uint64_t v25 = v26;
        *(void *)(v3 + 16) = v26;
      }
      long long v30 = (void *)(v3 + 32 * v25);
      v30[4] = v21;
      v30[5] = v22;
      v30[6] = v23;
      v30[7] = v24;
      if (v38 == v15) {
        break;
      }
      uint64_t v39 = v3;
      unint64_t v31 = v38 + 4;
      uint64_t v21 = *v38;
      uint64_t v32 = v38[1];
      uint64_t v23 = v38[2];
      uint64_t v33 = v38[3];
      if (v28 < v29)
      {
        unint64_t v34 = (uint64_t *)(v39 + 32 * v25 + 88);
        while (1)
        {
          *(v34 - 3) = v21;
          *(v34 - 2) = v32;
          *(v34 - 1) = v23;
          *unint64_t v34 = v33;
          ++v28;
          if (v31 == v40) {
            break;
          }
          uint64_t v35 = v31 + 4;
          uint64_t v21 = *v31;
          uint64_t v22 = v31[1];
          uint64_t v23 = v31[2];
          uint64_t v24 = v31[3];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v34 += 4;
          uint64_t v33 = v24;
          uint64_t v32 = v22;
          v31 += 4;
          if (v29 == v28)
          {
            unint64_t v31 = v35;
            uint64_t v15 = v40;
            goto LABEL_29;
          }
        }
        swift_bridgeObjectRetain();
        uint64_t result = (uint64_t *)swift_bridgeObjectRetain();
        uint64_t v2 = v37;
        uint64_t v3 = v39;
        break;
      }
      uint64_t v29 = v28;
      uint64_t v22 = v38[1];
      uint64_t v24 = v38[3];
LABEL_29:
      swift_bridgeObjectRetain();
      uint64_t result = (uint64_t *)swift_bridgeObjectRetain();
      uint64_t v3 = v39;
      *(void *)(v39 + 16) = v29;
      uint64_t v25 = v29;
      unint64_t v38 = v31;
      uint64_t v2 = v37;
    }
    *(void *)(v3 + 16) = v28;
  }
  *uint64_t v2 = v3;
  return result;
}

uint64_t specialized ContiguousArray.append<A>(contentsOf:)(void *a1, void *a2)
{
  uint64_t v5 = *v2;
  int64_t v6 = *(void *)(*v2 + 16);
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v2 = v5;
  if (!isUniquelyReferenced_nonNull_native || (int64_t v8 = *(void *)(v5 + 24) >> 1, v8 < v6))
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v6, 1);
    uint64_t v5 = *v2;
    int64_t v8 = *(void *)(*v2 + 24) >> 1;
  }
  uint64_t v9 = *(void *)(v5 + 16);
  uint64_t v10 = v8 - v9;
  uint64_t result = (uint64_t)specialized Sequence._copyContents(initializing:)(&v34, (void *)(v5 + 32 * v9 + 32), v8 - v9, a1, a2);
  if (result < 0)
  {
    __break(1u);
    goto LABEL_28;
  }
  if (!result) {
    goto LABEL_8;
  }
  uint64_t v12 = *(void *)(v5 + 16);
  BOOL v13 = __OFADD__(v12, result);
  uint64_t v14 = v12 + result;
  if (v13)
  {
LABEL_28:
    __break(1u);
    return result;
  }
  *(void *)(v5 + 16) = v14;
LABEL_8:
  if (result == v10)
  {
    if (v34)
    {
      uint64_t v33 = v35;
      if (v34 != v35)
      {
        uint64_t v15 = *(void *)(v5 + 16);
        uint64_t v16 = v34 + 4;
        uint64_t v17 = *v34;
        uint64_t v18 = v34[1];
        uint64_t v19 = v34[2];
        uint64_t v20 = v34[3];
        swift_bridgeObjectRetain();
        uint64_t result = swift_bridgeObjectRetain();
        unint64_t v31 = v2;
        while (1)
        {
          while (1)
          {
            unint64_t v21 = *(void *)(v5 + 24);
            uint64_t v22 = v15 + 1;
            if (v15 + 1 > (uint64_t)(v21 >> 1)) {
              uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v15 + 1, 1);
            }
            uint64_t v5 = *v2;
            uint64_t v23 = *(void *)(*v2 + 24) >> 1;
            if (v15 < v23) {
              break;
            }
            swift_retain();
            outlined copy of (String, String)?(v17, v18);
            swift_release();
            swift_bridgeObjectRelease();
            uint64_t result = swift_bridgeObjectRelease();
            *(void *)(v5 + 16) = v15;
          }
          uint64_t v24 = (void *)(v5 + 32 * v15);
          v24[4] = v17;
          v24[5] = v18;
          v24[6] = v19;
          v24[7] = v20;
          if (v16 == v33) {
            break;
          }
          uint64_t v25 = v15;
          uint64_t v26 = v16;
          v16 += 4;
          uint64_t v17 = *v26;
          uint64_t v27 = v26[1];
          uint64_t v19 = v26[2];
          uint64_t v28 = v26[3];
          if (v22 < v23)
          {
            uint64_t v32 = v5;
            uint64_t v29 = (uint64_t *)(v5 + 32 * v25 + 88);
            while (1)
            {
              *(v29 - 3) = v17;
              *(v29 - 2) = v27;
              *(v29 - 1) = v19;
              *uint64_t v29 = v28;
              ++v22;
              if (v16 == v33) {
                break;
              }
              long long v30 = v16 + 4;
              uint64_t v17 = *v16;
              uint64_t v18 = v16[1];
              uint64_t v19 = v16[2];
              uint64_t v20 = v16[3];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v29 += 4;
              uint64_t v28 = v20;
              uint64_t v27 = v18;
              v16 += 4;
              if (v23 == v22)
              {
                uint64_t v16 = v30;
                uint64_t v2 = v31;
                uint64_t v5 = v32;
                goto LABEL_23;
              }
            }
            swift_bridgeObjectRetain();
            uint64_t result = swift_bridgeObjectRetain();
            uint64_t v2 = v31;
            uint64_t v5 = v32;
            break;
          }
          uint64_t v23 = v22;
          uint64_t v18 = v26[1];
          uint64_t v20 = v26[3];
LABEL_23:
          swift_bridgeObjectRetain();
          uint64_t result = swift_bridgeObjectRetain();
          *(void *)(v5 + 16) = v23;
          uint64_t v15 = v23;
        }
        *(void *)(v5 + 16) = v22;
      }
    }
  }
  *uint64_t v2 = v5;
  return result;
}

double specialized static LayoutGesture._makeGesture(gesture:inputs:)@<D0>(unsigned int a1@<W0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  uint64_t v42 = a3;
  uint64_t v65 = *MEMORY[0x263EF8340];
  long long v5 = *(_OWORD *)(a2 + 64);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v63 = *(_OWORD *)(a2 + 80);
  v64[0] = v6;
  *(_OWORD *)((char *)v64 + 12) = *(_OWORD *)(a2 + 108);
  long long v7 = *(_OWORD *)(a2 + 16);
  long long v58 = *(_OWORD *)a2;
  long long v59 = v7;
  long long v8 = *(_OWORD *)(a2 + 48);
  long long v60 = *(_OWORD *)(a2 + 32);
  long long v61 = v8;
  long long v62 = v5;
  type metadata accessor for LayoutGestureBox();
  swift_allocObject();
  outlined retain of _GestureInputs(a2);
  id v9 = LayoutGestureBox.init(inputs:)(&v58);
  unsigned int v10 = *(_DWORD *)(a2 + 112);
  *(void *)&long long v58 = __PAIR64__(*(_DWORD *)(a2 + 108), a1);
  DWORD2(v58) = v10;
  id v43 = v9;
  *(void *)&long long v59 = v9;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  _sSnySiGMaTm_4(0, &lazy cache variable for type metadata for UpdateLayoutGestureBox<DefaultLayoutGesture>, (uint64_t)&type metadata for DefaultLayoutGesture, (uint64_t)&protocol witness table for DefaultLayoutGesture, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for UpdateLayoutGestureBox);
  lazy protocol witness table accessor for type LayoutDebug<DefaultLayoutGesture> and conformance LayoutDebug<A>(&lazy protocol witness table cache variable for type UpdateLayoutGestureBox<DefaultLayoutGesture> and conformance UpdateLayoutGestureBox<A>, &lazy cache variable for type metadata for UpdateLayoutGestureBox<DefaultLayoutGesture>, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for UpdateLayoutGestureBox);
  unsigned int v11 = Attribute.init<A>(body:value:flags:update:)();
  unsigned int v46 = a1;
  *(void *)&long long v58 = __PAIR64__(v11, a1);
  unsigned int v47 = v11;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  uint64_t v12 = MEMORY[0x263F8EE60];
  type metadata accessor for Attribute<LayoutGestureBox.Value>(0, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<()>, MEMORY[0x263F8EE60] + 8, (uint64_t (*)(void, uint64_t))type metadata accessor for GesturePhase);
  _sSnySiGMaTm_4(0, &lazy cache variable for type metadata for LayoutPhase<DefaultLayoutGesture>, (uint64_t)&type metadata for DefaultLayoutGesture, (uint64_t)&protocol witness table for DefaultLayoutGesture, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for LayoutPhase);
  lazy protocol witness table accessor for type LayoutDebug<DefaultLayoutGesture> and conformance LayoutDebug<A>(&lazy protocol witness table cache variable for type LayoutPhase<DefaultLayoutGesture> and conformance LayoutPhase<A>, &lazy cache variable for type metadata for LayoutPhase<DefaultLayoutGesture>, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for LayoutPhase);
  unsigned int v13 = Attribute.init<A>(body:value:flags:update:)();
  unsigned int v14 = *MEMORY[0x263F288F8];
  uint64_t v50 = MEMORY[0x263F8EE78];
  int v51 = 0;
  double v49 = COERCE_DOUBLE(__PAIR64__(v14, v13));
  if ((*(unsigned char *)(a2 + 120) & 8) != 0)
  {
    unsigned int v15 = v13;
    outlined retain of _GestureInputs(a2);
    specialized _GestureInputs.intern<A>(_:id:)(0);
    AGGraphClearUpdate();
    id v16 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    unsigned int IndirectAttribute2 = AGGraphCreateIndirectAttribute2();
    AGGraphSetIndirectAttribute();
    AGSubgraphSetCurrent();

    AGGraphSetUpdate();
    specialized _GestureInputs.intern<A>(_:id:)(0);
    AGGraphClearUpdate();
    id v18 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    unsigned int v19 = AGGraphCreateIndirectAttribute2();
    AGGraphSetIndirectAttribute();
    AGSubgraphSetCurrent();

    AGGraphSetUpdate();
    *(void *)&long long v60 = 0;
    long long v58 = 0u;
    long long v59 = 0u;
    specialized _GestureInputs.intern<A>(_:id:)((uint64_t)&v58, 0);
    AGGraphClearUpdate();
    id v20 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    unsigned int v21 = AGGraphCreateIndirectAttribute2();
    AGGraphSetIndirectAttribute();
    AGSubgraphSetCurrent();

    uint64_t v12 = MEMORY[0x263F8EE60];
    AGGraphSetUpdate();
    outlined release of _GestureInputs(a2);
    uint64_t v54 = &type metadata for DefaultLayoutGesture;
    unint64_t v55 = __PAIR64__(v47, v15);
    uint64_t v56 = (_UNKNOWN **)__PAIR64__(IndirectAttribute2, v10);
    unint64_t v57 = __PAIR64__(v21, v19);
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    _sSnySiGMaTm_4(0, &lazy cache variable for type metadata for LayoutDebug<DefaultLayoutGesture>, (uint64_t)&type metadata for DefaultLayoutGesture, (uint64_t)&protocol witness table for DefaultLayoutGesture, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for LayoutDebug);
    lazy protocol witness table accessor for type LayoutDebug<DefaultLayoutGesture> and conformance LayoutDebug<A>(&lazy protocol witness table cache variable for type LayoutDebug<DefaultLayoutGesture> and conformance LayoutDebug<A>, &lazy cache variable for type metadata for LayoutDebug<DefaultLayoutGesture>, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for LayoutDebug);
    HIDWORD(v49) = Attribute.init<A>(body:value:flags:update:)();
  }
  uint64_t v22 = *(void *)(a2 + 96);
  uint64_t v52 = v22;
  int v53 = *(_DWORD *)(a2 + 104);
  if (*(void *)(v22 + 16))
  {
    uint64_t v23 = outlined retain of LinearGradient((uint64_t)&v52);
    unint64_t v24 = 0;
    unint64_t v25 = *(void *)(v22 + 16);
    uint64_t v26 = (uint64_t *)(v22 + 40);
    uint64_t v44 = v12 + 8;
    uint64_t v45 = v22;
    do
    {
      if (v24 >= v25) {
        __break(1u);
      }
      ++v24;
      uint64_t v28 = (ValueMetadata *)*(v26 - 1);
      uint64_t v27 = *v26;
      v48[0] = v46;
      v48[1] = v47;
      MEMORY[0x270FA5388](v23);
      _OWORD v41[2] = swift_getAssociatedTypeWitness();
      uint64_t v54 = &type metadata for DefaultLayoutGesture;
      unint64_t v55 = (unint64_t)v28;
      uint64_t v56 = &protocol witness table for DefaultLayoutGesture;
      unint64_t v57 = v27;
      uint64_t v29 = type metadata accessor for LayoutGesturePreferenceCombiner();
      v41[3] = v29;
      v41[4] = swift_getWitnessTable();
      uint64_t v30 = type metadata accessor for Attribute();
      _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v48, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v41, v29, MEMORY[0x263F8E628], v30, MEMORY[0x263F8E658], v31);
      unint64_t v32 = v54;
      swift_beginAccess();
      type metadata accessor for Attribute<LayoutGestureBox.Value>(0, &lazy cache variable for type metadata for _GestureOutputs<()>, v44, (uint64_t (*)(void, uint64_t))type metadata accessor for _GestureOutputs);
      uint64_t v34 = v33;
      LOBYTE(v48[0]) = 0;
      unint64_t v35 = v32;
      uint64_t v36 = v45;
      _GestureOutputs.subscript.setter(v35, v28, v34, (uint64_t)v28, v27);
      uint64_t v23 = swift_endAccess();
      unint64_t v25 = *(void *)(v36 + 16);
      v26 += 2;
    }
    while (v24 != v25);
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_release();
  }
  swift_beginAccess();
  uint64_t v37 = v50;
  int v38 = v51;
  double result = v49;
  BOOL v40 = v42;
  double *v42 = v49;
  *((void *)v40 + 1) = v37;
  *((_DWORD *)v40 + 4) = v38;
  return result;
}

double static LayoutGesture._makeGesture(gesture:inputs:)@<D0>(unsigned int *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, double *a5@<X8>)
{
  unint64_t v55 = a5;
  uint64_t v91 = *MEMORY[0x263EF8340];
  long long v7 = a2[5];
  long long v8 = a2[3];
  long long v88 = a2[4];
  long long v89 = v7;
  long long v9 = a2[5];
  *(_OWORD *)uint64_t v90 = a2[6];
  *(_OWORD *)&v90[12] = *(_OWORD *)((char *)a2 + 108);
  long long v10 = a2[1];
  v85[0] = *a2;
  v85[1] = v10;
  long long v11 = a2[3];
  long long v13 = *a2;
  long long v12 = a2[1];
  long long v86 = a2[2];
  long long v87 = v11;
  long long v82 = v88;
  long long v83 = v9;
  v84[0] = a2[6];
  *(_OWORD *)((char *)v84 + 12) = *(_OWORD *)((char *)a2 + 108);
  long long v78 = v13;
  long long v79 = v12;
  unsigned int v14 = *a1;
  long long v80 = v86;
  long long v81 = v8;
  type metadata accessor for LayoutGestureBox();
  swift_allocObject();
  outlined retain of _GestureInputs((uint64_t)v85);
  id v15 = LayoutGestureBox.init(inputs:)(&v78);
  *(void *)&long long v78 = __PAIR64__(*(unsigned int *)&v90[12], v14);
  LODWORD(v63) = *(_DWORD *)&v90[16];
  DWORD2(v78) = *(_DWORD *)&v90[16];
  *(void *)&long long v79 = v15;
  uint64_t updated = type metadata accessor for UpdateLayoutGestureBox();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<LayoutGestureBox.Value>(0, &lazy cache variable for type metadata for Attribute<LayoutGestureBox.Value>, (uint64_t)&type metadata for LayoutGestureBox.Value, MEMORY[0x263F28898]);
  uint64_t v17 = v16;
  id v56 = v15;
  swift_retain();
  uint64_t v18 = MEMORY[0x263F8E628];
  uint64_t v19 = MEMORY[0x263F8E658];
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v78, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_14, (uint64_t)&v71, updated, MEMORY[0x263F8E628], v17, MEMORY[0x263F8E658], v20);
  swift_release();
  int v21 = v74;
  unsigned int v59 = v14;
  *(void *)&long long v78 = __PAIR64__(v74, v14);
  uint64_t v69 = type metadata accessor for LayoutPhase();
  uint64_t v70 = swift_getWitnessTable();
  type metadata accessor for Attribute<GesturePhase<()>>();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v78, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)&v68, v69, v18, v22, v19, v23);
  unsigned int v24 = v74;
  unsigned int v25 = *MEMORY[0x263F288F8];
  uint64_t v66 = MEMORY[0x263F8EE78];
  int v67 = 0;
  double v65 = COERCE_DOUBLE(__PAIR64__(v25, v74));
  uint64_t v60 = a3;
  unint64_t v61 = a4;
  if ((v90[24] & 8) != 0)
  {
    outlined retain of _GestureInputs((uint64_t)v85);
    specialized _GestureInputs.intern<A>(_:id:)(0);
    AGGraphClearUpdate();
    id v26 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    LODWORD(v62) = AGGraphCreateIndirectAttribute2();
    int v58 = HIDWORD(v87);
    AGGraphSetIndirectAttribute();
    AGSubgraphSetCurrent();

    AGGraphSetUpdate();
    specialized _GestureInputs.intern<A>(_:id:)(0);
    AGGraphClearUpdate();
    unsigned int v27 = v21;
    id v28 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    unsigned int IndirectAttribute2 = AGGraphCreateIndirectAttribute2();
    AGGraphSetIndirectAttribute();
    AGSubgraphSetCurrent();

    AGGraphSetUpdate();
    *(void *)&long long v80 = 0;
    long long v78 = 0u;
    long long v79 = 0u;
    specialized _GestureInputs.intern<A>(_:id:)((uint64_t)&v78, 0);
    AGGraphClearUpdate();
    id v30 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    unsigned int v31 = AGGraphCreateIndirectAttribute2();
    AGGraphSetIndirectAttribute();
    AGSubgraphSetCurrent();

    int v21 = v27;
    AGGraphSetUpdate();
    uint64_t v32 = outlined release of _GestureInputs((uint64_t)v85);
    uint64_t v74 = v60;
    unint64_t v75 = __PAIR64__(v27, v24);
    unint64_t v76 = __PAIR64__(v62, v63);
    unint64_t v77 = __PAIR64__(v31, IndirectAttribute2);
    MEMORY[0x270FA5388](v32);
    uint64_t v52 = type metadata accessor for LayoutDebug();
    uint64_t v53 = swift_getWitnessTable();
    type metadata accessor for Attribute<LayoutGestureBox.Value>(0, &lazy cache variable for type metadata for Attribute<GestureDebug.Data>, (uint64_t)&type metadata for GestureDebug.Data, MEMORY[0x263F28898]);
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v74, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v51, v52, MEMORY[0x263F8E628], v33, MEMORY[0x263F8E658], v34);
    HIDWORD(v65) = v64[0];
  }
  uint64_t v35 = *(void *)v90;
  unint64_t v36 = *(void *)(*(void *)v90 + 16);
  if (v36)
  {
    int v58 = v21;
    uint64_t v37 = swift_bridgeObjectRetain();
    unint64_t v38 = 0;
    uint64_t v39 = (uint64_t *)(v35 + 40);
    uint64_t v57 = MEMORY[0x263F8EE60] + 8;
    do
    {
      if (v38 >= v36) {
        __break(1u);
      }
      ++v38;
      uint64_t v41 = (ValueMetadata *)*(v39 - 1);
      uint64_t v40 = *v39;
      long long v62 = &v54;
      uint64_t v63 = v40;
      v64[0] = v59;
      v64[1] = v58;
      MEMORY[0x270FA5388](v37);
      v51[0] = swift_getAssociatedTypeWitness();
      uint64_t v74 = v60;
      unint64_t v75 = (unint64_t)v41;
      unint64_t v76 = v61;
      unint64_t v77 = v40;
      uint64_t v42 = type metadata accessor for LayoutGesturePreferenceCombiner();
      v51[1] = v42;
      uint64_t v52 = swift_getWitnessTable();
      uint64_t v43 = type metadata accessor for Attribute();
      _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v64, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)(&v54 - 6), v42, MEMORY[0x263F8E628], v43, MEMORY[0x263F8E658], v44);
      unint64_t v45 = v74;
      swift_beginAccess();
      type metadata accessor for Attribute<LayoutGestureBox.Value>(0, &lazy cache variable for type metadata for _GestureOutputs<()>, v57, (uint64_t (*)(void, uint64_t))type metadata accessor for _GestureOutputs);
      LOBYTE(v64[0]) = 0;
      _GestureOutputs.subscript.setter(v45, v41, v46, (uint64_t)v41, v63);
      uint64_t v37 = swift_endAccess();
      unint64_t v36 = *(void *)(v35 + 16);
      v39 += 2;
    }
    while (v38 != v36);
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_release();
  }
  swift_beginAccess();
  uint64_t v47 = v66;
  int v48 = v67;
  double result = v65;
  uint64_t v50 = v55;
  double *v55 = v65;
  *((void *)v50 + 1) = v47;
  *((_DWORD *)v50 + 4) = v48;
  return result;
}

uint64_t LayoutGestureBox.Child.binds(_:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *v1;
  swift_retain_n();
  if (v3 == v2)
  {
    swift_release_n();
    return 1;
  }
  else
  {
    uint64_t v4 = v2;
    while (1)
    {
      long long v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 88);
      uint64_t v6 = swift_retain();
      uint64_t v7 = v5(v6);
      swift_retain();
      swift_release_n();
      if (!v7) {
        break;
      }
      swift_release();
      uint64_t v4 = v7;
      if (v3 == v7)
      {
        swift_release();
        swift_release();
        return 1;
      }
    }
    swift_release();
    return 0;
  }
}

char *LayoutGesture.phase(box:)@<X0>(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  swift_beginAccess();
  uint64_t v3 = *(void *)(a1 + 160);
  uint64_t v4 = *(void *)(v3 + 16);
  uint64_t v5 = MEMORY[0x263F8EE78];
  if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = v4 - 1;
    uint64_t v7 = MEMORY[0x263F8EE78];
    for (uint64_t i = 32; ; i += 208)
    {
      long long v43 = *(_OWORD *)(v3 + i);
      long long v9 = *(_OWORD *)(v3 + i + 16);
      long long v10 = *(_OWORD *)(v3 + i + 32);
      long long v11 = *(_OWORD *)(v3 + i + 64);
      long long v46 = *(_OWORD *)(v3 + i + 48);
      long long v47 = v11;
      long long v44 = v9;
      long long v45 = v10;
      long long v12 = *(_OWORD *)(v3 + i + 80);
      long long v13 = *(_OWORD *)(v3 + i + 96);
      long long v14 = *(_OWORD *)(v3 + i + 128);
      long long v50 = *(_OWORD *)(v3 + i + 112);
      long long v51 = v14;
      long long v48 = v12;
      long long v49 = v13;
      long long v15 = *(_OWORD *)(v3 + i + 144);
      long long v16 = *(_OWORD *)(v3 + i + 160);
      long long v17 = *(_OWORD *)(v3 + i + 176);
      *(_OWORD *)((char *)v54 + 12) = *(_OWORD *)(v3 + i + 188);
      long long v53 = v16;
      v54[0] = v17;
      long long v52 = v15;
      if (*(void *)(*((void *)&v45 + 1) + 16))
      {
        outlined retain of LayoutGestureBox.Child((uint64_t)&v43);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v55 = v7;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v7 + 16) + 1, 1);
          uint64_t v7 = v55;
        }
        unint64_t v20 = *(void *)(v7 + 16);
        unint64_t v19 = *(void *)(v7 + 24);
        if (v20 >= v19 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
          uint64_t v7 = v55;
        }
        *(void *)(v7 + 16) = v20 + 1;
        int v21 = (_OWORD *)(v7 + 208 * v20);
        v21[2] = v43;
        long long v22 = v44;
        long long v23 = v45;
        long long v24 = v47;
        v21[5] = v46;
        v21[6] = v24;
        v21[3] = v22;
        v21[4] = v23;
        long long v25 = v48;
        long long v26 = v49;
        long long v27 = v51;
        v21[9] = v50;
        v21[10] = v27;
        v21[7] = v25;
        v21[8] = v26;
        long long v28 = v52;
        long long v29 = v53;
        long long v30 = v54[0];
        *(_OWORD *)((char *)v21 + 220) = *(_OWORD *)((char *)v54 + 12);
        v21[12] = v29;
        v21[13] = v30;
        v21[11] = v28;
      }
      if (!v6) {
        break;
      }
      --v6;
    }
    swift_bridgeObjectRelease();
    int64_t v31 = *(void *)(v7 + 16);
    if (v31)
    {
LABEL_12:
      *(void *)&long long v43 = v5;
      double result = (char *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31, 0);
      unint64_t v33 = v43;
      uint64_t v34 = (unsigned char *)(v7 + 60);
      uint64_t v35 = MEMORY[0x263F8EE60] + 8;
      while ((*v34 & 1) == 0)
      {
        type metadata accessor for Attribute<LayoutGestureBox.Value>(0, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<()>, v35, (uint64_t (*)(void, uint64_t))type metadata accessor for GesturePhase);
        double result = (char *)AGGraphGetValue();
        char v36 = *result;
        char v37 = result[1];
        if (v37) {
          BOOL v38 = 0;
        }
        else {
          BOOL v38 = (*result & 1) == 0;
        }
        if (v38)
        {
          char v36 = 0;
          LOBYTE(v55) = 0;
        }
        *(void *)&long long v43 = v33;
        unint64_t v40 = *(void *)(v33 + 16);
        unint64_t v39 = *(void *)(v33 + 24);
        if (v40 >= v39 >> 1)
        {
          double result = (char *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1, v40 + 1, 1);
          unint64_t v33 = v43;
        }
        *(void *)(v33 + 16) = v40 + 1;
        unint64_t v41 = v33 + 2 * v40;
        *(unsigned char *)(v41 + 32) = v36;
        *(unsigned char *)(v41 + 33) = v37;
        v34 += 208;
        if (!--v31)
        {
          swift_release();
          goto LABEL_26;
        }
      }
      __break(1u);
      return result;
    }
  }
  else
  {
    uint64_t v7 = MEMORY[0x263F8EE78];
    int64_t v31 = *(void *)(MEMORY[0x263F8EE78] + 16);
    if (v31) {
      goto LABEL_12;
    }
  }
  swift_release();
  unint64_t v33 = MEMORY[0x263F8EE78];
LABEL_26:
  specialized Collection<>.merged()(v33, a2);
  return (char *)swift_bridgeObjectRelease();
}

unint64_t specialized Collection<>.merged()@<X0>(unint64_t result@<X0>, BOOL *a2@<X8>)
{
  unint64_t v2 = *(void *)(result + 16);
  if (v2)
  {
    unint64_t v3 = 0;
    LOBYTE(v4) = 0;
    unint64_t v5 = result + 32;
    unint64_t v6 = result + 35;
    char v7 = 1;
    unint64_t v8 = *(void *)(result + 16);
    char v9 = 1;
    do
    {
      unint64_t v10 = v3;
      char v11 = v7;
      while (1)
      {
        double result = v10 + 1;
        switch(*(unsigned char *)(v5 + 2 * v10 + 1))
        {
          case 1:
            if (result == v2) {
              goto LABEL_45;
            }
            goto LABEL_11;
          case 2:
            if (result == v2) {
              goto LABEL_36;
            }
            uint64_t v4 = (unsigned char *)(v6 + 2 * v10);
            break;
          case 3:
            if (result != v2) {
              goto LABEL_5;
            }
            if (v11) {
              goto LABEL_39;
            }
            goto LABEL_40;
          default:
            unint64_t v3 = v10 + 1;
            double result = v10;
            goto LABEL_25;
        }
        while (1)
        {
          if (v8 == result) {
            goto LABEL_43;
          }
          int v12 = *v4;
          if (v12 != 2) {
            break;
          }
          ++result;
          v4 += 2;
          if (result == v2)
          {
LABEL_36:
            if (v7)
            {
LABEL_37:
              BOOL v13 = 0;
              char v14 = 2;
              goto LABEL_46;
            }
            goto LABEL_45;
          }
        }
        if (!*v4) {
          break;
        }
        if (v12 == 1)
        {
          if (++result == v2) {
            goto LABEL_45;
          }
LABEL_11:
          char v11 = 0;
          char v7 = 0;
          LOBYTE(v4) = 1;
        }
        else
        {
          LOBYTE(v4) = 1;
          if (result - v2 == -1)
          {
LABEL_40:
            if (v7) {
              goto LABEL_37;
            }
LABEL_41:
            if ((v4 & 1) == 0)
            {
              char v14 = 0;
              BOOL v13 = (v9 & 1) == 0;
              goto LABEL_46;
            }
            goto LABEL_45;
          }
          char v11 = 0;
          ++result;
        }
LABEL_5:
        unint64_t v10 = result;
        if (result <= v2) {
          unint64_t v8 = v2;
        }
        else {
          unint64_t v8 = result;
        }
        if (result >= v2) {
          goto LABEL_43;
        }
      }
      unint64_t v3 = result + 1;
      LOBYTE(v4) = 1;
LABEL_25:
      if (*(unsigned char *)(v5 + 2 * result))
      {
        if (v3 == v2) {
          goto LABEL_44;
        }
        char v9 = 0;
      }
      else if (v3 == v2)
      {
        goto LABEL_41;
      }
      char v7 = 0;
      if (v3 <= v2) {
        unint64_t v8 = v2;
      }
      else {
        unint64_t v8 = v3;
      }
    }
    while (v3 < v2);
LABEL_43:
    __break(1u);
LABEL_44:
    if (v4)
    {
LABEL_45:
      BOOL v13 = 0;
      char v14 = 1;
      goto LABEL_46;
    }
    char v14 = 0;
    BOOL v13 = 1;
  }
  else
  {
LABEL_39:
    BOOL v13 = 0;
    char v14 = 3;
  }
LABEL_46:
  *a2 = v13;
  a2[1] = v14;
  return result;
}

uint64_t LayoutGesture.preferenceValue<A>(key:box:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v44 = a3;
  uint64_t v45 = a5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  double v13 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  long long v46 = (char *)&v37 - v14;
  uint64_t v47 = a7;
  (*(void (**)(uint64_t, uint64_t, double))(a6 + 16))(a4, a6, v13);
  uint64_t v15 = a2 + 160;
  uint64_t result = swift_beginAccess();
  unint64_t v17 = *(void *)(*(void *)(a2 + 160) + 16);
  if (!v17) {
    return result;
  }
  unint64_t v18 = 0;
  unint64_t v40 = (void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  uint64_t v41 = a6 + 24;
  BOOL v38 = (uint64_t (**)(uint64_t, char *, uint64_t))(v12 + 32);
  unint64_t v39 = (void (**)(uint64_t, uint64_t))(v12 + 8);
  unint64_t v19 = v17 - 1;
  int v42 = 1;
  uint64_t v48 = 32;
  while (2)
  {
    uint64_t v20 = v48 + 208 * v18;
    while (1)
    {
      if (v18 >= *(void *)(*(void *)v15 + 16))
      {
        __break(1u);
        return result;
      }
      int v21 = (_OWORD *)(*(void *)v15 + v20);
      v51[0] = *v21;
      long long v22 = v21[1];
      long long v23 = v21[2];
      long long v24 = v21[4];
      long long v53 = v21[3];
      long long v54 = v24;
      v51[1] = v22;
      long long v52 = v23;
      long long v25 = v21[5];
      long long v26 = v21[6];
      long long v27 = v21[8];
      long long v57 = v21[7];
      long long v58 = v27;
      long long v55 = v25;
      long long v56 = v26;
      long long v28 = v21[9];
      long long v29 = v21[10];
      long long v30 = v21[11];
      *(_OWORD *)((char *)v61 + 12) = *(_OWORD *)((char *)v21 + 188);
      long long v60 = v29;
      v61[0] = v30;
      long long v59 = v28;
      if (*(void *)(*((void *)&v52 + 1) + 16))
      {
        if (*(void *)&v61[1]) {
          break;
        }
      }
LABEL_9:
      if (v19 == v18) {
        return result;
      }
      ++v18;
      v20 += 208;
      if (v18 >= v17) {
        goto LABEL_17;
      }
    }
    uint64_t v49 = *(void *)&v61[1];
    int v50 = DWORD2(v61[1]);
    outlined retain of LayoutGestureBox.Child((uint64_t)v51);
    unint64_t v31 = PreferencesOutputs.subscript.getter(a1, a4, a6);
    if ((v31 & 0x100000000) != 0)
    {
      uint64_t result = outlined release of LayoutGestureBox.Child((uint64_t)v51);
      goto LABEL_9;
    }
    if (v42)
    {
      uint64_t v32 = AssociatedTypeWitness;
      uint64_t Value = AGGraphGetValue();
      (*v40)(v46, Value, v32);
      outlined release of LayoutGestureBox.Child((uint64_t)v51);
      uint64_t v34 = v47;
      (*v39)(v47, v32);
      uint64_t result = (*v38)(v34, v46, v32);
    }
    else
    {
      double v35 = MEMORY[0x270FA5388](v31);
      *(&v37 - 6) = v44;
      *(&v37 - 5) = a4;
      *(&v37 - 4) = v45;
      *(&v37 - 3) = a6;
      *((_DWORD *)&v37 - 4) = v36;
      (*(void (**)(uint64_t, uint64_t (*)@<X0>(uint64_t@<X8>), double))(a6 + 24))(v47, partial apply for closure #1 in LayoutGesture.preferenceValue<A>(key:box:), v35);
      uint64_t result = outlined release of LayoutGestureBox.Child((uint64_t)v51);
    }
    if (v19 != v18)
    {
      int v42 = 0;
      if (++v18 < v17) {
        continue;
      }
LABEL_17:
      __break(1u);
    }
    return result;
  }
}

uint64_t closure #1 in LayoutGesture.preferenceValue<A>(key:box:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16);

  return v4(a1, Value, AssociatedTypeWitness);
}

uint64_t DefaultLayoutGesture.responder.getter()
{
  return swift_retain();
}

uint64_t DefaultLayoutGesture.responder.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*DefaultLayoutGesture.responder.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance DefaultLayoutGesture@<D0>(unsigned int *a1@<X0>, _OWORD *a2@<X1>, double *a3@<X8>)
{
  unsigned int v3 = *a1;
  long long v4 = a2[5];
  v8[4] = a2[4];
  v8[5] = v4;
  v9[0] = a2[6];
  *(_OWORD *)((char *)v9 + 12) = *(_OWORD *)((char *)a2 + 108);
  long long v5 = a2[1];
  v8[0] = *a2;
  v8[1] = v5;
  long long v6 = a2[3];
  _OWORD v8[2] = a2[2];
  v8[3] = v6;
  return specialized static LayoutGesture._makeGesture(gesture:inputs:)(v3, (uint64_t)v8, a3);
}

id LayoutGestureBox.init(inputs:)(_OWORD *a1)
{
  uint64_t v2 = v1;
  swift_weakInit();
  *(void *)(v2 + 160) = MEMORY[0x263F8EE78];
  *(void *)(v2 + 168) = 0;
  *(_DWORD *)(v2 + 176) = 0;
  long long v4 = a1[5];
  *(_OWORD *)(v2 + 80) = a1[4];
  *(_OWORD *)(v2 + 96) = v4;
  *(_OWORD *)(v2 + 112) = a1[6];
  *(_OWORD *)(v2 + 124) = *(_OWORD *)((char *)a1 + 108);
  long long v5 = a1[1];
  *(_OWORD *)(v2 + 16) = *a1;
  *(_OWORD *)(v2 + 32) = v5;
  long long v6 = a1[3];
  *(_OWORD *)(v2 + 48) = a1[2];
  *(_OWORD *)(v2 + 64) = v6;
  uint64_t v7 = specialized static ViewGraph.current.getter() + 200;
  swift_beginAccess();
  uint64_t v8 = MEMORY[0x24C527E00](v7);
  swift_release();
  if (v8)
  {
    swift_getObjectType();
    uint64_t v9 = swift_conformsToProtocol2();
    if (v9) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    if (v9) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = 0;
    }
    if (v11)
    {
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v13 = type metadata accessor for PreferenceKey(0, (unint64_t *)&lazy cache variable for type metadata for EventGraphHost);
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)(v10 + 8) + 16))(v17, v13, v13, ObjectType);
      swift_unknownObjectRelease();
      if (v17[0])
      {
        uint64_t v14 = v17[1];
        uint64_t v15 = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v15, v14);
        swift_unknownObjectRelease();
      }
    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
  swift_weakAssign();
  swift_release();
  id result = (id)AGSubgraphGetCurrent();
  if (result)
  {
    *(void *)(v2 + 152) = result;
    return (id)v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t LayoutGestureBox.updateResetSeed(_:)(uint64_t result)
{
  if (*(_DWORD *)(v1 + 176) != result)
  {
    uint64_t v2 = v1;
    *(_DWORD *)(v1 + 176) = result;
    unsigned int v3 = (uint64_t *)(v1 + 160);
    id result = swift_beginAccess();
    uint64_t v4 = *(void *)(v1 + 160);
    uint64_t v5 = *(void *)(v4 + 16);
    if (v5)
    {
      unint64_t v6 = 0;
      uint64_t v7 = MEMORY[0x263F8EE80];
      uint64_t v8 = 10;
      uint64_t v39 = *(void *)(v4 + 16);
      while (1)
      {
        swift_beginAccess();
        uint64_t v11 = (void *)*v3;
        id result = swift_isUniquelyReferenced_nonNull_native();
        *unsigned int v3 = (uint64_t)v11;
        if ((result & 1) == 0)
        {
          id result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v11);
          uint64_t v11 = (void *)result;
          *unsigned int v3 = result;
        }
        if (v6 >= v11[2]) {
          break;
        }
        uint64_t v12 = &v11[v8];
        if (*(void *)(v11[v8 - 1] + 16))
        {
          if ((*((unsigned char *)v12 - 20) & 1) == 0)
          {
            uint64_t v13 = (uint64_t (*)(void, uint64_t))MEMORY[0x263F8D8F0];
            outlined init with take of LayoutGestureBox.Child.DebugData?((uint64_t)&v11[v8], (uint64_t)v64, &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, MEMORY[0x263F8D8F0]);
            outlined init with take of LayoutGestureBox.Child.DebugData?((uint64_t)v64, (uint64_t)v65, &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, v13);
            if (_s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOSgWOg((uint64_t)v65) == 1)
            {
              outlined init with take of LayoutGestureBox.Child.DebugData?((uint64_t)v64, (uint64_t)&v55, &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, MEMORY[0x263F8D8F0]);
              uint64_t v5 = v39;
            }
            else
            {
              outlined init with take of LayoutGestureBox.Child.DebugData?((uint64_t)v64, (uint64_t)v53, &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, MEMORY[0x263F8D8F0]);
              outlined init with take of LayoutGestureBox.Child.DebugData((uint64_t)v53, (uint64_t)v54);
              if (_s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOWOg((uint64_t)v54) == 1)
              {
                _s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOWOj0_((uint64_t)v54);
                uint64_t Value = (long long *)AGGraphGetValue();
                long long v55 = *Value;
                long long v15 = Value[4];
                long long v17 = Value[1];
                long long v16 = Value[2];
                long long v58 = Value[3];
                long long v59 = v15;
                long long v56 = v17;
                long long v57 = v16;
                long long v18 = Value[8];
                long long v20 = Value[5];
                long long v19 = Value[6];
                long long v62 = Value[7];
                long long v63 = v18;
                long long v60 = v20;
                long long v61 = v19;
                outlined retain of GestureDebug.Data((uint64_t)&v55);
                outlined release of LayoutGestureBox.Child.DebugData?(v64);
                uint64_t v22 = *((void *)&v63 + 1);
                long long v23 = v59;
                long long v24 = v60;
                long long v25 = v61;
                long long v26 = v62;
                char v27 = v63;
                long long v28 = v57;
                long long v29 = v58;
                uint64_t v30 = *(void *)((char *)&v56 + 4);
                char v31 = v56;
                char v32 = BYTE1(v56);
                uint64_t v33 = *((void *)&v55 + 1);
                __int8 v34 = v55;
              }
              else
              {
                uint64_t v21 = _s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOWOj0_((uint64_t)v54);
                uint64_t v22 = *(void *)(v21 + 136);
                long long v23 = *(_OWORD *)(v21 + 64);
                long long v24 = *(_OWORD *)(v21 + 80);
                long long v25 = *(_OWORD *)(v21 + 96);
                long long v26 = *(_OWORD *)(v21 + 112);
                char v27 = *(unsigned char *)(v21 + 128);
                long long v28 = *(_OWORD *)(v21 + 32);
                long long v29 = *(_OWORD *)(v21 + 48);
                uint64_t v30 = *(void *)(v21 + 20);
                char v31 = *(unsigned char *)(v21 + 16);
                char v32 = *(unsigned char *)(v21 + 17);
                uint64_t v33 = *(void *)(v21 + 8);
                __int8 v34 = *(unsigned char *)v21;
              }
              uint64_t v5 = v39;
              v40.i8[0] = v34;
              v40.i64[1] = v33;
              char v41 = v31;
              char v42 = v32;
              uint64_t v43 = v30;
              long long v44 = v28;
              long long v45 = v29;
              long long v46 = v23;
              long long v47 = v24;
              long long v48 = v25;
              long long v49 = v26;
              char v50 = v27;
              uint64_t v51 = v22;
              _s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOWOi_(&v40);
              outlined init with take of LayoutGestureBox.Child.DebugData((uint64_t)&v40, (uint64_t)v52);
              _ViewInputs.base.modify(v52, v35);
              outlined init with take of LayoutGestureBox.Child.DebugData?((uint64_t)v52, (uint64_t)&v55, &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, MEMORY[0x263F8D8F0]);
            }
            outlined init with take of LayoutGestureBox.Child.DebugData?((uint64_t)&v55, (uint64_t)&v11[v8], &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, MEMORY[0x263F8D8F0]);
            *((_DWORD *)v12 - 6) = 0;
            *((unsigned char *)v12 - 20) = 1;
            int v36 = &v11[v8];
            uint64_t v37 = v11[v8 - 4];
            if (v37)
            {
              MEMORY[0x270FA5388](v37);
              AGSubgraphApply();
              BOOL v38 = (void *)*(v36 - 4);
              if (v38)
              {
                AGSubgraphInvalidate();
              }
            }
            *(v36 - 4) = 0;
            (*(void (**)(void))(*(void *)*(v12 - 6) + 120))();
            uint64_t v7 = MEMORY[0x263F8EE80];
          }
          uint64_t v9 = &v11[v8];
          swift_bridgeObjectRelease();
          *(v9 - 2) = v7;
          swift_bridgeObjectRelease();
          *(v12 - 1) = MEMORY[0x263F8EE88];
          ++*((_DWORD *)v9 - 9);
        }
        ++v6;
        id result = swift_endAccess();
        int v10 = *(_DWORD *)(v2 + 172) + 1;
        *(_DWORD *)(v2 + 172) = v10;
        v8 += 26;
        if (v5 == v6) {
          goto LABEL_22;
        }
      }
      __break(1u);
    }
    else
    {
      int v10 = *(_DWORD *)(v1 + 172);
LABEL_22:
      *(_DWORD *)(v2 + 172) = v10 + 1;
    }
  }
  return result;
}

uint64_t LayoutGestureBox.updateResponder(_:)(uint64_t a1)
{
  uint64_t v3 = v1 + 160;
  swift_beginAccess();
  uint64_t v144 = v1;
  uint64_t v4 = *(void *)(*(void *)(v1 + 160) + 16);
  swift_beginAccess();
  unint64_t v5 = *(void *)(a1 + 40);
  if (!(v5 >> 62))
  {
    uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    uint64_t v143 = v6;
    if (v6) {
      goto LABEL_3;
    }
LABEL_53:
    uint64_t result = swift_bridgeObjectRelease();
    if (!v4) {
      return result;
    }
    goto LABEL_54;
  }
LABEL_52:
  swift_bridgeObjectRetain();
  uint64_t v143 = _CocoaArrayWrapper.endIndex.getter();
  if (!v143) {
    goto LABEL_53;
  }
LABEL_3:
  unint64_t v7 = 0;
  char v8 = 0;
  unint64_t v137 = v5;
  unint64_t v139 = v5 & 0xC000000000000001;
  unint64_t v134 = v5 + 32;
  uint64_t v135 = v5 & 0xFFFFFFFFFFFFFF8;
  uint64_t v141 = -v4;
  unint64_t v5 = 208;
  while (1)
  {
LABEL_4:
    uint64_t v9 = 208 * v7 + 32;
    unint64_t v10 = v7;
    unint64_t v145 = v4;
LABEL_5:
    if (v139)
    {
      uint64_t v11 = MEMORY[0x24C523D60](v10, v137);
      if (__OFADD__(v10, 1)) {
        goto LABEL_45;
      }
    }
    else
    {
      if (v10 >= *(void *)(v135 + 16)) {
        goto LABEL_48;
      }
      uint64_t v11 = *(void *)(v134 + 8 * v10);
      swift_retain();
      if (__OFADD__(v10, 1))
      {
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
        goto LABEL_52;
      }
    }
    if (v4 < (uint64_t)v10) {
      goto LABEL_46;
    }
    unint64_t v7 = v10 + 1;
    if (v10 != v4) {
      break;
    }
    unint64_t v10 = v4;
LABEL_23:
    int v13 = *(_DWORD *)(v144 + 168);
    swift_beginAccess();
    uint64_t v14 = *(void **)(v144 + 160);
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v144 + 160) = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
      *(void *)uint64_t v3 = v14;
    }
    unint64_t v17 = v14[2];
    unint64_t v16 = v14[3];
    if (v17 >= v16 >> 1)
    {
      uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v16 > 1), v17 + 1, 1, v14);
      *(void *)uint64_t v3 = v14;
    }
    _s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOSgWOi0_((uint64_t)v187);
    *(void *)&v188[0] = v11;
    DWORD2(v188[0]) = v13;
    *(void *)((char *)v188 + 12) = 0;
    *(void *)((char *)&v188[1] + 4) = 0;
    BYTE12(v188[1]) = 1;
    long long v189 = MEMORY[0x263F8EE80];
    outlined init with take of LayoutGestureBox.Child.DebugData?((uint64_t)v187, (uint64_t)v190, &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, MEMORY[0x263F8D8F0]);
    *(void *)&v191[1] = 0;
    DWORD2(v191[1]) = 0;
    void v14[2] = v17 + 1;
    long long v18 = &v14[26 * v17];
    unint64_t v5 = 208;
    v18[2] = v188[0];
    long long v19 = v190[1];
    long long v20 = v189;
    long long v21 = v188[1];
    v18[5] = v190[0];
    v18[6] = v19;
    v18[3] = v21;
    v18[4] = v20;
    long long v22 = v190[5];
    long long v23 = v190[3];
    long long v24 = v190[2];
    v18[9] = v190[4];
    v18[10] = v22;
    v18[7] = v24;
    v18[8] = v23;
    long long v25 = v191[0];
    long long v26 = v190[7];
    long long v27 = v190[6];
    *(_OWORD *)((char *)v18 + 220) = *(_OWORD *)((char *)v191 + 12);
    v18[12] = v26;
    v18[13] = v25;
    v18[11] = v27;
    swift_endAccess();
    uint64_t v4 = v145;
    ++*(_DWORD *)(v144 + 168);
    if ((uint64_t)v10 < (uint64_t)v145)
    {
      swift_beginAccess();
      long long v28 = *(void **)v3;
      unint64_t v29 = *(void *)(*(void *)v3 + 16);
      if (v10 >= v29) {
        goto LABEL_49;
      }
      uint64_t v30 = 26 * v10;
      char v31 = (long long *)&v28[26 * v10 + 4];
      long long v151 = *v31;
      long long v32 = v31[1];
      long long v33 = v31[2];
      long long v34 = v31[4];
      long long v154 = v31[3];
      long long v155 = v34;
      long long v152 = v32;
      long long v153 = v33;
      long long v35 = v31[5];
      long long v36 = v31[6];
      long long v37 = v31[8];
      long long v158 = v31[7];
      long long v159 = v37;
      long long v156 = v35;
      long long v157 = v36;
      long long v38 = v31[9];
      long long v39 = v31[10];
      long long v40 = v31[11];
      *(_OWORD *)((char *)v162 + 12) = *(long long *)((char *)v31 + 188);
      long long v161 = v39;
      v162[0] = v40;
      long long v160 = v38;
      if (v145 >= v29) {
        goto LABEL_50;
      }
      uint64_t v41 = 208 * v145;
      char v42 = (long long *)&v28[26 * v145 + 4];
      long long v163 = *v42;
      long long v43 = v42[1];
      long long v44 = v42[2];
      long long v45 = v42[4];
      long long v166 = v42[3];
      long long v167 = v45;
      long long v164 = v43;
      long long v165 = v44;
      long long v46 = v42[5];
      long long v47 = v42[6];
      long long v48 = v42[8];
      long long v170 = v42[7];
      long long v171 = v48;
      long long v168 = v46;
      long long v169 = v47;
      long long v49 = v42[9];
      long long v50 = v42[10];
      long long v51 = v42[11];
      *(_OWORD *)((char *)v174 + 12) = *(long long *)((char *)v42 + 188);
      long long v173 = v50;
      v174[0] = v51;
      long long v172 = v49;
      outlined retain of LayoutGestureBox.Child((uint64_t)&v151);
      outlined retain of LayoutGestureBox.Child((uint64_t)&v163);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        long long v28 = specialized _ArrayBuffer._consumeAndCreateNew()(v28);
      }
      uint64_t v4 = (uint64_t)(v28 + 4);
      long long v52 = &v28[v30 + 4];
      v147[0] = *v52;
      long long v53 = v52[1];
      long long v54 = v52[2];
      long long v55 = v52[4];
      v147[3] = v52[3];
      v147[4] = v55;
      v147[1] = v53;
      v147[2] = v54;
      long long v56 = v52[5];
      long long v57 = v52[6];
      long long v58 = v52[8];
      v147[7] = v52[7];
      v147[8] = v58;
      v147[5] = v56;
      v147[6] = v57;
      long long v59 = v52[9];
      long long v60 = v52[10];
      long long v61 = v52[11];
      *(_OWORD *)((char *)v148 + 12) = *(_OWORD *)((char *)v52 + 188);
      v147[10] = v60;
      v148[0] = v61;
      v147[9] = v59;
      *long long v52 = v163;
      long long v62 = v164;
      long long v63 = v165;
      long long v64 = v167;
      v52[3] = v166;
      v52[4] = v64;
      v52[1] = v62;
      _OWORD v52[2] = v63;
      long long v65 = v168;
      long long v66 = v169;
      long long v67 = v171;
      v52[7] = v170;
      unsigned char v52[8] = v67;
      v52[5] = v65;
      v52[6] = v66;
      long long v68 = v172;
      long long v69 = v173;
      long long v70 = v174[0];
      *(_OWORD *)((char *)v52 + 188) = *(_OWORD *)((char *)v174 + 12);
      v52[10] = v69;
      v52[11] = v70;
      v52[9] = v68;
      outlined release of LayoutGestureBox.Child((uint64_t)v147);
      if (v145 >= v28[2]) {
        goto LABEL_51;
      }
      uint64_t v71 = (_OWORD *)(v4 + v41);
      v149[0] = *(_OWORD *)(v4 + 208 * v145);
      long long v72 = *(_OWORD *)(v4 + v41 + 16);
      long long v73 = *(_OWORD *)(v4 + v41 + 32);
      long long v74 = *(_OWORD *)(v4 + v41 + 64);
      v149[3] = *(_OWORD *)(v4 + v41 + 48);
      v149[4] = v74;
      v149[1] = v72;
      v149[2] = v73;
      long long v75 = *(_OWORD *)(v4 + v41 + 80);
      long long v76 = *(_OWORD *)(v4 + v41 + 96);
      long long v77 = *(_OWORD *)(v4 + v41 + 128);
      v149[7] = *(_OWORD *)(v4 + v41 + 112);
      v149[8] = v77;
      v149[5] = v75;
      v149[6] = v76;
      long long v78 = *(_OWORD *)(v4 + v41 + 144);
      long long v79 = *(_OWORD *)(v4 + v41 + 160);
      long long v80 = *(_OWORD *)(v4 + v41 + 176);
      *(_OWORD *)((char *)v150 + 12) = *(_OWORD *)(v4 + v41 + 188);
      v149[10] = v79;
      v150[0] = v80;
      v149[9] = v78;
      *uint64_t v71 = v151;
      long long v81 = v152;
      long long v82 = v153;
      long long v83 = v155;
      v71[3] = v154;
      v71[4] = v83;
      v71[1] = v81;
      v71[2] = v82;
      long long v84 = v156;
      long long v85 = v157;
      long long v86 = v159;
      v71[7] = v158;
      v71[8] = v86;
      v71[5] = v84;
      _DWORD v71[6] = v85;
      long long v87 = v160;
      long long v88 = v161;
      long long v89 = v162[0];
      *(_OWORD *)((char *)v71 + 188) = *(_OWORD *)((char *)v162 + 12);
      v71[10] = v88;
      v71[11] = v89;
      v71[9] = v87;
      outlined release of LayoutGestureBox.Child((uint64_t)v149);
      *(void *)uint64_t v3 = v28;
      swift_endAccess();
      uint64_t v4 = v145;
    }
    swift_release();
    if (__OFADD__(v4++, 1)) {
      goto LABEL_47;
    }
    uint64_t v91 = v143;
    if (v7 == v143) {
      goto LABEL_38;
    }
    --v141;
    char v8 = 1;
  }
  unint64_t v5 = 0;
  uint64_t v12 = (void *)(*(void *)v3 + v9);
  while (1)
  {
    if ((uint64_t)(v10 + v5) >= v4)
    {
      __break(1u);
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
    if ((int64_t)(v10 + v5) >= *(void *)(*(void *)v3 + 16)) {
      goto LABEL_44;
    }
    if (*v12 == v11) {
      break;
    }
    ++v5;
    v12 += 26;
    if (!(v141 + v10 + v5)) {
      goto LABEL_23;
    }
  }
  if (v5)
  {
    swift_beginAccess();
    specialized MutableCollection.swapAt(_:_:)(v10, v10 + v5);
    swift_endAccess();
    swift_release();
    char v8 = 1;
    uint64_t v91 = v143;
    unint64_t v5 = 208;
    if (v7 != v143) {
      goto LABEL_4;
    }
LABEL_38:
    uint64_t result = swift_bridgeObjectRelease();
    if (v91 < v4) {
      goto LABEL_54;
    }
LABEL_42:
    ++*(_DWORD *)(v144 + 172);
    return result;
  }
  swift_release();
  v9 += 208;
  ++v10;
  unint64_t v5 = v143;
  if (v7 != v143) {
    goto LABEL_5;
  }
  uint64_t result = swift_bridgeObjectRelease();
  if (v143 >= v4)
  {
    if ((v8 & 1) == 0) {
      return result;
    }
    goto LABEL_42;
  }
LABEL_54:
  uint64_t v93 = 208 * v4 - 176;
  while (1)
  {
    swift_beginAccess();
    int v94 = *(void **)v3;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *(void *)uint64_t v3 = v94;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v94);
      int v94 = (void *)result;
      *(void *)uint64_t v3 = result;
    }
    if (v4 < 1) {
      break;
    }
    unint64_t v95 = v4 - 1;
    if (v95 >= v94[2]) {
      goto LABEL_81;
    }
    uint64_t v96 = (char *)v94 + v93;
    if (*(void *)(*(void *)((char *)v94 + v93 + 40) + 16))
    {
      if ((v96[28] & 1) == 0)
      {
        uint64_t v97 = v94;
        uint64_t v98 = (uint64_t)v94 + v93 + 48;
        uint64_t v99 = (uint64_t (*)(void, uint64_t))MEMORY[0x263F8D8F0];
        outlined init with take of LayoutGestureBox.Child.DebugData?(v98, (uint64_t)&v163, &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, MEMORY[0x263F8D8F0]);
        outlined init with take of LayoutGestureBox.Child.DebugData?((uint64_t)&v163, (uint64_t)v188, &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, v99);
        if (_s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOSgWOg((uint64_t)v188) == 1)
        {
          outlined init with take of LayoutGestureBox.Child.DebugData?((uint64_t)&v163, (uint64_t)&v151, &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, MEMORY[0x263F8D8F0]);
          int v94 = v97;
        }
        else
        {
          outlined init with take of LayoutGestureBox.Child.DebugData?((uint64_t)&v163, (uint64_t)v147, &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, MEMORY[0x263F8D8F0]);
          outlined init with take of LayoutGestureBox.Child.DebugData((uint64_t)v147, (uint64_t)v149);
          if (_s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOWOg((uint64_t)v149) == 1)
          {
            _s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOWOj0_((uint64_t)v149);
            uint64_t Value = (long long *)AGGraphGetValue();
            long long v151 = *Value;
            long long v101 = Value[4];
            long long v103 = Value[1];
            long long v102 = Value[2];
            long long v154 = Value[3];
            long long v155 = v101;
            long long v152 = v103;
            long long v153 = v102;
            long long v104 = Value[8];
            long long v106 = Value[5];
            long long v105 = Value[6];
            long long v158 = Value[7];
            long long v159 = v104;
            long long v156 = v106;
            long long v157 = v105;
            outlined retain of GestureDebug.Data((uint64_t)&v151);
            outlined release of LayoutGestureBox.Child.DebugData?((unint64_t *)&v163);
            uint64_t v107 = *((void *)&v159 + 1);
            long long v108 = v155;
            long long v109 = v156;
            long long v110 = v157;
            long long v111 = v158;
            char v112 = v159;
            long long v113 = v153;
            long long v114 = v154;
            uint64_t v115 = *(void *)((char *)&v152 + 4);
            char v116 = v152;
            char v117 = BYTE1(v152);
            uint64_t v118 = *((void *)&v151 + 1);
            __int8 v119 = v151;
          }
          else
          {
            uint64_t v120 = _s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOWOj0_((uint64_t)v149);
            uint64_t v107 = *(void *)(v120 + 136);
            long long v108 = *(_OWORD *)(v120 + 64);
            long long v109 = *(_OWORD *)(v120 + 80);
            long long v110 = *(_OWORD *)(v120 + 96);
            long long v111 = *(_OWORD *)(v120 + 112);
            char v112 = *(unsigned char *)(v120 + 128);
            long long v113 = *(_OWORD *)(v120 + 32);
            long long v114 = *(_OWORD *)(v120 + 48);
            uint64_t v115 = *(void *)(v120 + 20);
            char v116 = *(unsigned char *)(v120 + 16);
            char v117 = *(unsigned char *)(v120 + 17);
            uint64_t v118 = *(void *)(v120 + 8);
            __int8 v119 = *(unsigned char *)v120;
          }
          int v94 = v97;
          v175.i8[0] = v119;
          v175.i64[1] = v118;
          char v176 = v116;
          char v177 = v117;
          uint64_t v178 = v115;
          long long v179 = v113;
          long long v180 = v114;
          long long v181 = v108;
          long long v182 = v109;
          long long v183 = v110;
          long long v184 = v111;
          char v185 = v112;
          uint64_t v186 = v107;
          _s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOWOi_(&v175);
          outlined init with take of LayoutGestureBox.Child.DebugData((uint64_t)&v175, (uint64_t)v187);
          _ViewInputs.base.modify(v187, v121);
          outlined init with take of LayoutGestureBox.Child.DebugData?((uint64_t)v187, (uint64_t)&v151, &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, MEMORY[0x263F8D8F0]);
        }
        outlined init with take of LayoutGestureBox.Child.DebugData?((uint64_t)&v151, v98, &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, MEMORY[0x263F8D8F0]);
        *((_DWORD *)v96 + 6) = 0;
        v96[28] = 1;
        v122 = (char *)v94 + v93;
        uint64_t v123 = *(void *)((char *)v94 + v93 + 16);
        if (v123)
        {
          MEMORY[0x270FA5388](v123);
          AGSubgraphApply();
          uint64_t v124 = (void *)*((void *)v122 + 2);
          if (v124)
          {
            AGSubgraphInvalidate();
          }
        }
        *((void *)v122 + 2) = 0;
        (*(void (**)(void))(**(void **)v96 + 120))();
      }
      uint64_t v125 = (char *)v94 + v93;
      swift_bridgeObjectRelease();
      *((void *)v125 + 4) = MEMORY[0x263F8EE80];
      uint64_t result = swift_bridgeObjectRelease();
      *((void *)v96 + 5) = MEMORY[0x263F8EE88];
      ++*((_DWORD *)v125 + 3);
      int v94 = *(void **)v3;
    }
    ++*(_DWORD *)(v144 + 172);
    if (!v94[2]) {
      goto LABEL_82;
    }
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *(void *)uint64_t v3 = v94;
    if (result)
    {
      uint64_t v126 = v94[2];
      if (!v126) {
        goto LABEL_78;
      }
    }
    else
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v94);
      int v94 = (void *)result;
      *(void *)uint64_t v3 = result;
      uint64_t v126 = *(void *)(result + 16);
      if (!v126)
      {
LABEL_78:
        __break(1u);
        return result;
      }
    }
    uint64_t v127 = v126 - 1;
    v128 = &v94[26 * v126 - 26];
    uint64_t v138 = v128[4];
    uint64_t v142 = v128[6];
    int v140 = *((_DWORD *)v128 + 14);
    uint64_t v146 = v95;
    char v129 = *((unsigned char *)v128 + 60);
    uint64_t v130 = v128[5];
    long long v136 = *((_OWORD *)v128 + 4);
    v131 = (uint64_t (*)(void, uint64_t))MEMORY[0x263F8D8F0];
    outlined init with take of LayoutGestureBox.Child.DebugData?((uint64_t)(v128 + 10), (uint64_t)&v163, &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, MEMORY[0x263F8D8F0]);
    uint64_t v132 = v93;
    uint64_t v133 = v128[28];
    LODWORD(v128) = *((_DWORD *)v128 + 58);
    v94[2] = v127;
    *(void *)uint64_t v3 = v94;
    *(void *)&v188[0] = v138;
    *((void *)&v188[0] + 1) = v130;
    *(void *)&v188[1] = v142;
    DWORD2(v188[1]) = v140;
    BYTE12(v188[1]) = v129;
    uint64_t v4 = v146;
    long long v189 = v136;
    outlined init with take of LayoutGestureBox.Child.DebugData?((uint64_t)&v163, (uint64_t)v190, &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, v131);
    *(void *)&v191[1] = v133;
    DWORD2(v191[1]) = v128;
    swift_endAccess();
    uint64_t result = outlined release of LayoutGestureBox.Child((uint64_t)v188);
    uint64_t v93 = v132 - 208;
    if (v143 >= v146) {
      goto LABEL_42;
    }
  }
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
  return result;
}

uint64_t LayoutGestureBox.willSendEvents<A>(_:gesture:boxValueAttribute:)(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v8 = v5 + 160;
  uint64_t result = swift_beginAccess();
  uint64_t v10 = *(void *)(v5 + 160);
  uint64_t v11 = *(void *)(v10 + 16);
  if (v11)
  {
    unint64_t v12 = 0;
    uint64_t v13 = 8;
    uint64_t v14 = MEMORY[0x263F8EE80];
    while (v12 < *(void *)(v10 + 16))
    {
      if (*(void *)(*(void *)(v10 + v13 * 8) + 16))
      {
        swift_beginAccess();
        long long v15 = *(void **)v8;
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        *(void *)uint64_t v8 = v15;
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v15);
          long long v15 = (void *)result;
          *(void *)uint64_t v8 = result;
        }
        if (v12 >= v15[2]) {
          goto LABEL_43;
        }
        v15[v13] = v14;
        uint64_t v10 = *(void *)(v5 + 160);
        swift_endAccess();
        uint64_t result = swift_bridgeObjectRelease();
        ++*(_DWORD *)(v5 + 172);
      }
      ++v12;
      v13 += 26;
      if (v11 == v12) {
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
  }
  else
  {
LABEL_10:
    if (*(void *)(a1 + 16))
    {
      uint64_t v54 = a1;
      v52[0] = v5;
      unint64_t v16 = *(void (**)(uint64_t *, void *, uint64_t, uint64_t))(a5 + 32);
      swift_bridgeObjectRetain();
      v16(&v54, v52, a4, a5);
      uint64_t v49 = *(void *)(*(void *)(v5 + 160) + 16);
      if (v49)
      {
        unint64_t v17 = 0;
        __int32 v46 = *MEMORY[0x263F288F8];
        uint64_t v18 = 29;
        uint64_t v44 = v5;
        do
        {
          unint64_t v19 = swift_bridgeObjectRetain();
          uint64_t v20 = specialized LayoutGesture.childEvents(events:index:box:)(v19, v17, v6);
          uint64_t result = swift_bridgeObjectRelease();
          if (*(void *)(v20 + 16))
          {
            if (v17 >= *(void *)(*(void *)v8 + 16)) {
              goto LABEL_44;
            }
            swift_beginAccess();
            long long v21 = *(void **)v8;
            swift_bridgeObjectRetain();
            uint64_t result = swift_isUniquelyReferenced_nonNull_native();
            *(void *)uint64_t v8 = v21;
            if ((result & 1) == 0)
            {
              uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v21);
              long long v21 = (void *)result;
              *(void *)uint64_t v8 = result;
            }
            if (v17 >= v21[2]) {
              goto LABEL_45;
            }
            specialized Set.formUnion<A>(_:)(v20);
            uint64_t v22 = *(void *)v8;
            unint64_t v23 = *(void *)(*(void *)v8 + 16);
            uint64_t result = swift_bridgeObjectRetain();
            if (v17 >= v23) {
              goto LABEL_46;
            }
            *(void *)(v22 + v18 * 8 - 168) = v20;
            swift_endAccess();
            swift_bridgeObjectRelease();
            uint64_t result = swift_bridgeObjectRelease();
            ++*(_DWORD *)(v6 + 172);
            uint64_t v24 = *(void *)(v6 + 160);
            if (v17 >= *(void *)(v24 + 16)) {
              goto LABEL_47;
            }
            if (*(unsigned char *)(v24 + v18 * 8 - 172))
            {
              if (AGSubgraphIsValid())
              {
                unsigned int v25 = *(_DWORD *)(v24 + v18 * 8 - 192);
                id v26 = (id)AGSubgraphGetGraph();
                long long v27 = (void *)AGSubgraphCreate();

                AGSubgraphAddChild();
                AGGraphClearUpdate();
                id v28 = (id)AGSubgraphGetCurrent();
                AGSubgraphSetCurrent();
                closure #1 in LayoutGestureBox.willSendEvents<A>(_:gesture:boxValueAttribute:)(v6, a3, v25, v17);
                AGSubgraphSetCurrent();

                AGGraphSetUpdate();
                int v29 = v52[0];
                __int32 v30 = HIDWORD(v52[0]);
                uint64_t v47 = v52[1];
                int v48 = v53;
                swift_beginAccess();
                char v31 = *(void **)(v6 + 160);
                id v32 = v27;
                uint64_t result = swift_isUniquelyReferenced_nonNull_native();
                *(void *)(v6 + 160) = v31;
                if ((result & 1) == 0)
                {
                  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v31);
                  char v31 = (void *)result;
                  *(void *)uint64_t v8 = result;
                }
                if (v17 >= v31[2]) {
                  goto LABEL_51;
                }
                long long v33 = &v31[v18];
                long long v34 = (void *)v31[v18 - 23];
                *(v33 - 23) = v27;
                swift_endAccess();
              }
              else
              {
                int v29 = specialized _GestureInputs.intern<A>(_:id:)(768, 4);
                int v48 = 0;
                __int32 v30 = v46;
                uint64_t v47 = MEMORY[0x263F8EE78];
              }
              swift_beginAccess();
              long long v35 = *(void **)v8;
              uint64_t result = swift_isUniquelyReferenced_nonNull_native();
              *(void *)uint64_t v8 = v35;
              if ((result & 1) == 0)
              {
                uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v35);
                long long v35 = (void *)result;
                *(void *)uint64_t v8 = result;
              }
              if (v17 >= v35[2]) {
                goto LABEL_48;
              }
              long long v36 = &v35[v18];
              *((_DWORD *)v36 - 44) = v29;
              *((unsigned char *)v36 - 172) = 0;
              long long v37 = *(void **)v8;
              if (v30 == v46)
              {
                _s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOSgWOi0_((uint64_t)v51);
              }
              else
              {
                v50[0].i32[0] = v30;
                _s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOWOi0_(v50);
                outlined init with take of LayoutGestureBox.Child.DebugData((uint64_t)v50, (uint64_t)v51);
                _ViewInputs.base.modify(v51, v38);
              }
              outlined init with take of LayoutGestureBox.Child.DebugData?((uint64_t)v51, (uint64_t)v52, &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, MEMORY[0x263F8D8F0]);
              uint64_t result = swift_isUniquelyReferenced_nonNull_native();
              *(void *)uint64_t v8 = v37;
              if ((result & 1) == 0)
              {
                uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v37);
                long long v37 = (void *)result;
                *(void *)uint64_t v8 = result;
              }
              if (v17 >= v37[2]) {
                goto LABEL_49;
              }
              uint64_t v39 = (uint64_t)&v37[v18 - 19];
              long long v40 = (uint64_t (*)(void, uint64_t))MEMORY[0x263F8D8F0];
              outlined init with take of LayoutGestureBox.Child.DebugData?(v39, (uint64_t)v51, &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, MEMORY[0x263F8D8F0]);
              outlined init with take of LayoutGestureBox.Child.DebugData?((uint64_t)v52, v39, &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, v40);
              uint64_t result = (uint64_t)outlined release of LayoutGestureBox.Child.DebugData?(v51);
              if (v17 >= *(void *)(*(void *)v8 + 16)) {
                goto LABEL_50;
              }
              uint64_t v41 = (_DWORD *)(*(void *)v8 + v18 * 8);
              *((void *)v41 - 1) = v47;
              *uint64_t v41 = v48;
              swift_endAccess();
              swift_bridgeObjectRelease();
              uint64_t v6 = v44;
            }
          }
          else
          {
            swift_bridgeObjectRelease();
          }
          ++v17;
          v18 += 26;
        }
        while (v49 != v17);
      }
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t closure #1 in LayoutGestureBox.willSendEvents<A>(_:gesture:boxValueAttribute:)(uint64_t a1, unsigned int a2, unsigned int a3, unint64_t a4)
{
  unint64_t v42 = __PAIR64__(a3, a2);
  uint64_t v61 = *MEMORY[0x263EF8340];
  long long v5 = *(_OWORD *)(a1 + 32);
  v52[0] = *(_OWORD *)(a1 + 16);
  v52[1] = v5;
  long long v6 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)int v53 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)&v53[16] = v6;
  long long v7 = *(_OWORD *)(a1 + 96);
  long long v54 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)long long v55 = v7;
  *(_OWORD *)&v55[16] = *(_OWORD *)(a1 + 112);
  *(_OWORD *)&v55[28] = *(_OWORD *)(a1 + 124);
  uint64_t v8 = v5;
  uint64_t v35 = *(void *)&v52[0];
  int v34 = DWORD2(v52[0]);
  uint64_t v9 = *((void *)&v5 + 1);
  uint64_t v10 = *(void *)v53;
  uint64_t v11 = *(void *)&v53[24];
  long long v12 = v54;
  long long v38 = *(_OWORD *)&v55[8];
  long long v39 = *(_OWORD *)&v53[8];
  int v36 = *(_DWORD *)&v55[24];
  int v37 = v7;
  uint64_t v13 = *(void *)&v55[36];
  swift_beginAccess();
  int v14 = *(_DWORD *)(v8 + 16);
  uint64_t v15 = *(void *)(v8 + 24);
  long long v40 = *(_OWORD *)(v8 + 48);
  long long v41 = *(_OWORD *)(v8 + 32);
  uint64_t v17 = *(void *)(v8 + 64);
  uint64_t v16 = *(void *)(v8 + 72);
  char v18 = *(unsigned char *)(v8 + 80);
  char v19 = *(unsigned char *)(v8 + 81);
  uint64_t v20 = *(void *)(v8 + 88);
  type metadata accessor for Attribute<LayoutGestureBox.Value>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(void, uint64_t))type metadata accessor for MutableBox);
  uint64_t v21 = swift_allocObject();
  *(_DWORD *)(v21 + 16) = v14;
  *(void *)(v21 + 24) = v15;
  *(_OWORD *)(v21 + 32) = v41;
  *(_OWORD *)(v21 + 48) = v40;
  *(void *)(v21 + 64) = v17;
  *(void *)(v21 + 72) = v16;
  *(unsigned char *)(v21 + 80) = v18;
  *(unsigned char *)(v21 + 81) = v19;
  *(void *)(v21 + 88) = v20;
  outlined retain of _GestureInputs((uint64_t)v52);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  *(void *)&long long v56 = v42;
  uint64_t v48 = type metadata accessor for LayoutChildEvents();
  uint64_t WitnessTable = swift_getWitnessTable();
  _s10Foundation4DateVSgMaTm_6(0, &lazy cache variable for type metadata for Attribute<[EventID : EventType]>, (uint64_t (*)(uint64_t))type metadata accessor for [EventID : EventType], MEMORY[0x263F28898]);
  uint64_t v22 = MEMORY[0x263F8E628];
  uint64_t v23 = MEMORY[0x263F8E658];
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v56, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_5, (uint64_t)v47, v48, MEMORY[0x263F8E628], v24, MEMORY[0x263F8E658], v25);
  int v26 = v50[0];
  *(void *)&long long v56 = v42;
  uint64_t v45 = type metadata accessor for LayoutChildSeed();
  uint64_t v46 = swift_getWitnessTable();
  type metadata accessor for Attribute<LayoutGestureBox.Value>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<UInt32>, MEMORY[0x263F8E8F8], MEMORY[0x263F28898]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v56, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_11, (uint64_t)v44, v45, v22, v27, v23, v28);
  int v29 = v50[0];
  swift_beginAccess();
  if ((a4 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_5:
    __break(1u);
  }
  uint64_t v30 = *(void *)(a1 + 160);
  if (*(void *)(v30 + 16) <= a4) {
    goto LABEL_5;
  }
  uint64_t v31 = *(void *)(v30 + 208 * a4 + 32);
  *(void *)&long long v56 = v35;
  DWORD2(v56) = v34;
  *(void *)&long long v57 = v21;
  *((void *)&v57 + 1) = v9;
  *(void *)long long v58 = v10;
  *(_OWORD *)&v58[8] = v39;
  *(void *)&v58[24] = v11;
  long long v59 = v12;
  *(_OWORD *)&v60[8] = v38;
  *(_DWORD *)long long v60 = v37;
  *(_DWORD *)&v60[24] = v36;
  *(_DWORD *)&v60[28] = v26;
  *(_DWORD *)&v60[32] = v29;
  *(void *)&v60[36] = v13;
  v50[4] = v12;
  v50[5] = *(_OWORD *)v60;
  *(_OWORD *)long long v51 = *(_OWORD *)&v60[16];
  *(_OWORD *)&v51[12] = *(_OWORD *)&v60[28];
  v50[0] = v56;
  v50[1] = v57;
  v50[2] = *(_OWORD *)v58;
  v50[3] = *(_OWORD *)&v58[16];
  id v32 = *(void (**)(_OWORD *))(*(void *)v31 + 112);
  swift_retain();
  outlined retain of _GestureInputs((uint64_t)&v56);
  v32(v50);
  swift_release();
  outlined release of _GestureInputs((uint64_t)&v56);
  return outlined release of _GestureInputs((uint64_t)&v56);
}

uint64_t LayoutGestureBox.__deallocating_deinit()
{
  long long v1 = *(_OWORD *)(v0 + 96);
  v5[4] = *(_OWORD *)(v0 + 80);
  v5[5] = v1;
  v6[0] = *(_OWORD *)(v0 + 112);
  *(_OWORD *)((char *)v6 + 12) = *(_OWORD *)(v0 + 124);
  long long v2 = *(_OWORD *)(v0 + 32);
  v5[0] = *(_OWORD *)(v0 + 16);
  v5[1] = v2;
  long long v3 = *(_OWORD *)(v0 + 64);
  v5[2] = *(_OWORD *)(v0 + 48);
  v5[3] = v3;
  outlined release of _GestureInputs((uint64_t)v5);
  swift_weakDestroy();

  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t LayoutGestureChildProxy.Child.binds(_:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  long long v3 = v1[11];
  long long v21 = v1[10];
  v22[0] = v3;
  *(_OWORD *)((char *)v22 + 12) = *(long long *)((char *)v1 + 188);
  long long v4 = v1[7];
  long long v17 = v1[6];
  long long v18 = v4;
  long long v5 = v1[9];
  long long v19 = v1[8];
  long long v20 = v5;
  long long v6 = v1[3];
  long long v13 = v1[2];
  long long v14 = v6;
  long long v7 = v1[5];
  long long v15 = v1[4];
  long long v16 = v7;
  long long v8 = v1[1];
  long long v11 = *v1;
  long long v12 = v8;
  uint64_t v10 = v2;
  return LayoutGestureBox.Child.binds(_:)(&v10) & 1;
}

Swift::Bool __swiftcall LayoutGestureChildProxy.Child.containsGlobalLocation(_:)(CGPoint a1)
{
  void (*v12)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t *);
  uint64_t v14;
  uint64_t v15;
  _OWORD v16[11];
  _OWORD v17[2];

  CGFloat y = a1.y;
  CGFloat x = a1.x;
  long long v4 = v1[11];
  v16[10] = v1[10];
  v17[0] = v4;
  *(_OWORD *)((char *)v17 + 12) = *(_OWORD *)((char *)v1 + 188);
  long long v5 = v1[7];
  v16[6] = v1[6];
  v16[7] = v5;
  long long v6 = v1[9];
  v16[8] = v1[8];
  v16[9] = v6;
  long long v7 = v1[3];
  v16[2] = v1[2];
  v16[3] = v7;
  long long v8 = v1[5];
  void v16[4] = v1[4];
  v16[5] = v8;
  long long v9 = v1[1];
  v16[0] = *v1;
  v16[1] = v9;
  uint64_t v10 = *(void *)&v16[0];
  _s10Foundation4DateVSgMaTm_6(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CGPoint>, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, MEMORY[0x263F8E0F8]);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_2461B9DC0;
  *(CGFloat *)(v11 + 32) = x;
  *(CGFloat *)(v11 + 40) = y;
  long long v14 = 0;
  long long v12 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t *))(*(void *)v10 + 168);
  outlined retain of LayoutGestureBox.Child((uint64_t)v16);
  LOBYTE(v15) = 1;
  v12(&v15, v11, 0x100000000, &v14);
  swift_bridgeObjectRelease();
  LOBYTE(v11) = v15;
  swift_bridgeObjectRelease();
  outlined release of LayoutGestureBox.Child((uint64_t)v16);
  return v11 & 1;
}

uint64_t LayoutGestureChildProxy.startIndex.getter()
{
  return 0;
}

uint64_t LayoutGestureChildProxy.endIndex.getter()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  return *(void *)(*(void *)(v1 + 160) + 16);
}

uint64_t LayoutGestureChildProxy.subscript.getter@<X0>(unint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = *v2;
  uint64_t result = swift_beginAccess();
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v7 = *(void *)(v5 + 160);
    if (*(void *)(v7 + 16) > a1)
    {
      long long v8 = (_OWORD *)(v7 + 208 * a1);
      v24[0] = v8[2];
      long long v9 = v8[3];
      long long v10 = v8[4];
      long long v11 = v8[6];
      v24[3] = v8[5];
      v24[4] = v11;
      v24[1] = v9;
      v24[2] = v10;
      long long v12 = v8[7];
      long long v13 = v8[8];
      long long v14 = v8[10];
      v24[7] = v8[9];
      v24[8] = v14;
      v24[5] = v12;
      v24[6] = v13;
      long long v15 = v8[11];
      long long v16 = v8[12];
      long long v17 = v8[13];
      *(_OWORD *)((char *)v25 + 12) = *(_OWORD *)((char *)v8 + 220);
      v24[10] = v16;
      v25[0] = v17;
      v24[9] = v15;
      long long v18 = v8[13];
      a2[10] = v8[12];
      a2[11] = v18;
      *(_OWORD *)((char *)a2 + 188) = *(_OWORD *)((char *)v8 + 220);
      long long v19 = v8[9];
      a2[6] = v8[8];
      a2[7] = v19;
      long long v20 = v8[11];
      a2[8] = v8[10];
      a2[9] = v20;
      long long v21 = v8[5];
      a2[2] = v8[4];
      a2[3] = v21;
      long long v22 = v8[7];
      a2[4] = v8[6];
      a2[5] = v22;
      long long v23 = v8[3];
      *a2 = v8[2];
      a2[1] = v23;
      return outlined retain of LayoutGestureBox.Child((uint64_t)v24);
    }
  }
  __break(1u);
  return result;
}

uint64_t LayoutGestureChildProxy.bindChild(index:event:id:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, Swift::UInt *a3@<X2>, long long *a4@<X8>)
{
  Swift::UInt v9 = *a3;
  Swift::UInt v10 = a3[1];
  uint64_t v11 = *v4;
  uint64_t v12 = *v4 + 160;
  swift_beginAccess();
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v13 = *(void *)(v11 + 160);
  if (*(void *)(v13 + 16) <= a1)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  long long v14 = (_OWORD *)(v13 + 208 * a1);
  v47[0] = v14[2];
  long long v15 = v14[3];
  long long v16 = v14[4];
  long long v17 = v14[6];
  v47[3] = v14[5];
  v47[4] = v17;
  v47[1] = v15;
  v47[2] = v16;
  long long v18 = v14[7];
  long long v19 = v14[8];
  long long v20 = v14[10];
  v47[7] = v14[9];
  v47[8] = v20;
  v47[5] = v18;
  v47[6] = v19;
  long long v21 = v14[11];
  long long v22 = v14[12];
  long long v23 = v14[13];
  *(_OWORD *)((char *)v48 + 12) = *(_OWORD *)((char *)v14 + 220);
  v47[10] = v22;
  v48[0] = v23;
  v47[9] = v21;
  uint64_t v24 = *(void *)&v47[0];
  outlined init with copy of AnyTrackedValue(a2, (uint64_t)v41);
  swift_retain_n();
  outlined retain of LayoutGestureBox.Child((uint64_t)v47);
  HitTestableEvent.init(_:)((uint64_t)v41, (uint64_t)&v42);
  uint64_t v25 = v43;
  if (v43 == 1)
  {
    swift_release();
    outlined release of LayoutGestureBox.Child((uint64_t)v47);
  }
  else
  {
    uint64_t v5 = *(void *)&v44;
    long long v26 = v42;
    *(void *)&long long v42 = 0;
    LOBYTE(v41[0]) = 1;
    uint64_t v27 = ViewResponder.hitTest(globalPoint:radius:cacheKey:options:)(0x100000000, (uint64_t *)&v42, v44, v45, v46);
    swift_release();
    outlined consume of HitTestableEvent?(v26, *((uint64_t *)&v26 + 1), v25);
    if (v27)
    {
      swift_release();
      outlined release of LayoutGestureBox.Child((uint64_t)v47);
      uint64_t v24 = v27;
    }
    else
    {
      outlined release of LayoutGestureBox.Child((uint64_t)v47);
    }
  }
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    goto LABEL_10;
  }
  long long v4 = (void *)Strong;
  v41[0] = v9;
  v41[1] = v10;
  swift_retain();
  EventBindingManager.rebindEvent(_:to:)(v41, v24, (uint64_t *)&v42);
  swift_release();
  swift_release();
  int v29 = (void *)v42;
  if ((void)v42 == 1)
  {
LABEL_10:
    uint64_t result = swift_release();
    long long v31 = xmmword_24619B520;
LABEL_27:
    *a4 = v31;
    return result;
  }
  long long v39 = v42;
  swift_retain();
  if (!v29) {
    goto LABEL_22;
  }
  uint64_t v38 = *(void *)(*(void *)v12 + 16);
  if (!v38)
  {
LABEL_21:
    swift_release();
LABEL_22:
    uint64_t result = swift_release();
LABEL_26:
    long long v31 = v39;
    goto LABEL_27;
  }
  uint64_t v40 = v11;
  Swift::UInt v9 = 0;
  int v37 = a4;
  while (v9 < *(void *)(*(void *)v12 + 16))
  {
    uint64_t v5 = 208 * v9;
    id v32 = *(void **)(*(void *)v12 + 208 * v9 + 32);
    swift_retain_n();
    swift_retain();
    if (v32 == v29)
    {
LABEL_23:
      swift_release_n();
      swift_release_n();
      swift_beginAccess();
      long long v4 = *(void **)v12;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      *(void *)uint64_t v12 = v4;
      if ((result & 1) == 0) {
        goto LABEL_32;
      }
      goto LABEL_24;
    }
    Swift::UInt v33 = v9 + 1;
    long long v4 = v29;
    while (1)
    {
      int v34 = *(uint64_t (**)(uint64_t))(*v4 + 88);
      uint64_t v35 = swift_retain();
      uint64_t v36 = v34(v35);
      swift_retain();
      swift_release_n();
      if (!v36) {
        break;
      }
      swift_release();
      long long v4 = (void *)v36;
      if (v32 == (void *)v36)
      {
        a4 = v37;
        goto LABEL_23;
      }
    }
    swift_release();
    swift_release_n();
    ++v9;
    a4 = v37;
    if (v33 == v38) {
      goto LABEL_21;
    }
  }
LABEL_31:
  __break(1u);
LABEL_32:
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v4);
  long long v4 = (void *)result;
  *(void *)uint64_t v12 = result;
LABEL_24:
  if (v9 < v4[2])
  {
    ++*(_DWORD *)((char *)v4 + v5 + 44);
    swift_endAccess();
    swift_release();
    uint64_t result = swift_release();
    ++*(_DWORD *)(v40 + 172);
    goto LABEL_26;
  }
  __break(1u);
  return result;
}

void *protocol witness for BidirectionalCollection.index(before:) in conformance LayoutGestureChildProxy@<X0>(void *result@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v4 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = *v2;
    uint64_t result = (void *)swift_beginAccess();
    if (v4 < *(void *)(*(void *)(v5 + 160) + 16))
    {
      *a2 = v4;
      return result;
    }
  }
  __break(1u);
  return result;
}

unint64_t *protocol witness for BidirectionalCollection.formIndex(before:) in conformance LayoutGestureChildProxy(unint64_t *result)
{
  unint64_t v2 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else
  {
    long long v3 = result;
    uint64_t v4 = *v1;
    uint64_t result = (unint64_t *)swift_beginAccess();
    if (v2 < *(void *)(*(void *)(v4 + 160) + 16))
    {
      *long long v3 = v2;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance LayoutGestureChildProxy(unint64_t *a1, unint64_t *a2)
{
  return specialized RandomAccessCollection<>.distance(from:to:)(*a1, *a2);
}

uint64_t protocol witness for Collection.endIndex.getter in conformance LayoutGestureChildProxy@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t result = swift_beginAccess();
  *a1 = *(void *)(*(void *)(v3 + 160) + 16);
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance LayoutGestureChildProxy(void *a1, unint64_t *a2))(void *a1)
{
  uint64_t v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = LayoutGestureChildProxy.subscript.read(v4, *a2);
  return protocol witness for Collection.subscript.read in conformance ArrayWith2Inline<A>;
}

void (*LayoutGestureChildProxy.subscript.read(void *a1, unint64_t a2))(_OWORD **a1)
{
  uint64_t v5 = malloc(0x288uLL);
  *a1 = v5;
  uint64_t v6 = *v2;
  uint64_t result = (void (*)(_OWORD **))swift_beginAccess();
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v8 = *(void *)(v6 + 160);
    if (*(void *)(v8 + 16) > a2)
    {
      Swift::UInt v9 = (_OWORD *)(v8 + 208 * a2);
      *uint64_t v5 = v9[2];
      long long v10 = v9[3];
      long long v11 = v9[4];
      long long v12 = v9[6];
      v5[3] = v9[5];
      v5[4] = v12;
      v5[1] = v10;
      v5[2] = v11;
      long long v13 = v9[7];
      long long v14 = v9[8];
      long long v15 = v9[10];
      v5[7] = v9[9];
      v5[8] = v15;
      v5[5] = v13;
      _OWORD v5[6] = v14;
      long long v16 = v9[11];
      long long v17 = v9[12];
      long long v18 = v9[13];
      *(_OWORD *)((char *)v5 + 188) = *(_OWORD *)((char *)v9 + 220);
      v5[10] = v17;
      v5[11] = v18;
      v5[9] = v16;
      memmove(v5 + 13, v9 + 2, 0xCCuLL);
      outlined retain of LayoutGestureBox.Child((uint64_t)v5);
      return LayoutGestureChildProxy.subscript.read;
    }
  }
  __break(1u);
  return result;
}

void LayoutGestureChildProxy.subscript.read(_OWORD **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (uint64_t)(*a1 + 13);
  uint64_t v3 = (uint64_t)(*a1 + 26);
  long long v4 = v1[24];
  v1[36] = v1[23];
  v1[37] = v4;
  long long v5 = v1[20];
  v1[32] = v1[19];
  v1[33] = v5;
  long long v6 = v1[22];
  v1[34] = v1[21];
  v1[35] = v6;
  long long v7 = v1[16];
  v1[28] = v1[15];
  v1[29] = v7;
  long long v8 = v1[18];
  v1[30] = v1[17];
  v1[31] = v8;
  long long v9 = v1[14];
  v1[26] = v1[13];
  v1[27] = v9;
  *(_OWORD *)(v3 + 188) = *(_OWORD *)(v2 + 188);
  outlined release of LayoutGestureBox.Child(v3);

  free(v1);
}

uint64_t protocol witness for Collection.subscript.getter in conformance LayoutGestureChildProxy@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = *v2;
  uint64_t result = swift_beginAccess();
  if (v4 < 0 || *(void *)(*(void *)(v6 + 160) + 16) < v5)
  {
    __break(1u);
  }
  else
  {
    a2[1] = v5;
    a2[2] = v6;
    *a2 = v4;
    return swift_retain();
  }
  return result;
}

uint64_t protocol witness for Collection.indices.getter in conformance LayoutGestureChildProxy@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t result = swift_beginAccess();
  uint64_t v5 = *(void *)(*(void *)(v3 + 160) + 16);
  *a1 = 0;
  a1[1] = v5;
  return result;
}

BOOL protocol witness for Collection.isEmpty.getter in conformance LayoutGestureChildProxy()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  return *(void *)(*(void *)(v1 + 160) + 16) == 0;
}

void *protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance LayoutGestureChildProxy@<X0>(void *result@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v5 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
  }
  else
  {
    uint64_t v6 = *v3;
    uint64_t result = (void *)swift_beginAccess();
    if (v5 <= *(void *)(*(void *)(v6 + 160) + 16))
    {
      *a3 = v5;
      return result;
    }
  }
  __break(1u);
  return result;
}

unint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance LayoutGestureChildProxy@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v6 & 1;
  return result;
}

uint64_t protocol witness for Collection.index(after:) in conformance LayoutGestureChildProxy@<X0>(unint64_t *a1@<X0>, void *a2@<X8>)
{
  unint64_t v4 = *a1;
  uint64_t v5 = *v2;
  uint64_t result = swift_beginAccess();
  if (v4 >= *(void *)(*(void *)(v5 + 160) + 16)) {
    __break(1u);
  }
  else {
    *a2 = v4 + 1;
  }
  return result;
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance LayoutGestureChildProxy(unint64_t *a1)
{
  unint64_t v3 = *a1;
  uint64_t v4 = *v1;
  uint64_t result = swift_beginAccess();
  if (v3 >= *(void *)(*(void *)(v4 + 160) + 16)) {
    __break(1u);
  }
  else {
    *a1 = v3 + 1;
  }
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance LayoutGestureChildProxy()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  return *(void *)(*(void *)(v1 + 160) + 16);
}

_OWORD *protocol witness for Sequence._copyToContiguousArray() in conformance LayoutGestureChildProxy()
{
  uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(v0);
  swift_release();
  return v1;
}

void protocol witness for static Rule.initialValue.getter in conformance UpdateLayoutGestureBox<A>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
}

uint64_t protocol witness for Rule.value.getter in conformance UpdateLayoutGestureBox<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = specialized UpdateLayoutGestureBox.value.getter(*(void *)v2, *(unsigned int *)(v2 + 8), *(void *)(v2 + 16), *(void *)(a1 + 16), *(void *)(a1 + 24));
  *(_DWORD *)(a2 + 8) = v4;

  return swift_retain();
}

uint64_t LayoutChildEvents.value.getter(uint64_t a1)
{
  int v1 = HIDWORD(a1);
  uint64_t v2 = *(void *)AGGraphGetValue();
  swift_beginAccess();
  uint64_t v3 = *(void *)(v2 + 160);
  uint64_t v4 = *(void *)(v3 + 16);
  if (!v4) {
    return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  }
  for (uint64_t i = v3 + 64; *(_DWORD *)(i - 24) != v1; i += 208)
  {
    if (!--v4) {
      return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    }
  }
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for Rule.value.getter in conformance LayoutChildEvents<A>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = LayoutChildEvents.value.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t LayoutChildSeed.value.getter(uint64_t a1)
{
  int v1 = HIDWORD(a1);
  uint64_t Value = AGGraphGetValue();
  uint64_t v3 = *(void *)Value;
  int v4 = *(_DWORD *)(*(void *)Value + 176);
  swift_beginAccess();
  uint64_t v5 = *(void *)(v3 + 160);
  uint64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
    long long v7 = (int *)(v5 + 44);
    while (*(v7 - 1) != v1)
    {
      v7 += 52;
      if (!--v6) {
        goto LABEL_5;
      }
    }
    int v8 = *v7;
  }
  else
  {
LABEL_5:
    int v8 = 0x10000;
  }
  return (v8 + v4);
}

uint64_t protocol witness for Rule.value.getter in conformance LayoutChildSeed<A>@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = LayoutChildSeed.value.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t LayoutPhase.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _WORD *a3@<X8>)
{
  long long v14 = a3;
  uint64_t v4 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  AGGraphGetValue();
  uint64_t Value = AGGraphGetValue();
  int v8 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v8(v6, Value, a2);
  uint64_t v9 = swift_retain();
  LayoutGesture.phase(box:)(v9, (BOOL *)&v15);
  long long v10 = *(void (**)(char *, uint64_t))(v4 + 8);
  v10(v6, a2);
  __int16 v11 = v15;
  uint64_t v12 = AGGraphGetValue();
  v8(v6, v12, a2);
  specialized LayoutGestureBox.resetTerminalChildren<A>(gesture:)();
  swift_release();
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v10)(v6, a2);
  *long long v14 = v11;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance LayoutPhase<A>@<X0>(uint64_t a1@<X0>, _WORD *a2@<X8>)
{
  return LayoutPhase.value.getter(*v2, *(void *)(a1 + 16), a2);
}

uint64_t static LayoutGesturePreferenceCombiner.initialValue.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56);

  return v5(a3, 0, 1, AssociatedTypeWitness);
}

uint64_t LayoutGesturePreferenceCombiner.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  long long v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, Value, a2);
  uint64_t v15 = *(void *)AGGraphGetValue();
  swift_retain();
  LayoutGesture.preferenceValue<A>(key:box:)(a3, v15, a2, a3, a4, a5, a6);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, a2);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance LayoutGesturePreferenceCombiner<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return static LayoutGesturePreferenceCombiner.initialValue.getter(*(void *)(a1 + 24), *(void *)(a1 + 40), a2);
}

uint64_t protocol witness for Rule.value.getter in conformance LayoutGesturePreferenceCombiner<A, B>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return LayoutGesturePreferenceCombiner.value.getter(*v2, a1[2], a1[3], a1[4], a1[5], a2);
}

uint64_t protocol witness for static _AttributeBody._updateDefault(_:) in conformance LayoutGesturePreferenceCombiner<A, B>(uint64_t a1, uint64_t a2)
{
  v17[1] = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v17 - v8;
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v11);
  long long v13 = (char *)v17 - v12;
  static LayoutGesturePreferenceCombiner.initialValue.getter(v4, v3, (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, AssociatedTypeWitness) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  uint64_t v15 = (*(uint64_t (**)(char *, char *, uint64_t))(v10 + 32))(v13, v9, AssociatedTypeWitness);
  MEMORY[0x270FA5388](v15);
  v17[-2] = a2;
  v17[-1] = swift_getWitnessTable();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v13, (uint64_t)partial apply for closure #1 in static Rule._update(_:attribute:), (uint64_t)&v17[-4], AssociatedTypeWitness, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v16);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, AssociatedTypeWitness);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance LayoutGesturePreferenceCombiner<A, B>()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

double LayoutDebug.value.getter@<D0>(unint64_t a1@<X1>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  unint64_t v5 = HIDWORD(a1);
  uint64_t v6 = *(void *)AGGraphGetValue();
  swift_beginAccess();
  uint64_t v7 = *(void *)(v6 + 160);
  uint64_t v8 = *(void *)(v7 + 16);
  if (v8)
  {
    int v47 = v5;
    uint64_t v48 = a2;
    uint64_t v49 = a3;
    uint64_t v9 = v7 + 80;
    swift_bridgeObjectRetain_n();
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
    for (uint64_t i = v8 - 1; ; --i)
    {
      uint64_t v12 = (uint64_t (*)(void, uint64_t))MEMORY[0x263F8D8F0];
      outlined init with take of LayoutGestureBox.Child.DebugData?(v9, (uint64_t)v70, &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, MEMORY[0x263F8D8F0]);
      outlined init with take of LayoutGestureBox.Child.DebugData?((uint64_t)v70, (uint64_t)__src, &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, v12);
      if (_s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOSgWOg((uint64_t)__src) != 1)
      {
        outlined init with take of LayoutGestureBox.Child.DebugData((uint64_t)__src, (uint64_t)&v67);
        if (_s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOWOg((uint64_t)&v67) == 1)
        {
          _s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOWOj0_((uint64_t)&v67);
          uint64_t Value = (long long *)AGGraphGetValue();
          long long v58 = *Value;
          long long v14 = Value[4];
          long long v16 = Value[1];
          long long v15 = Value[2];
          long long v61 = Value[3];
          long long v62 = v14;
          long long v59 = v16;
          long long v60 = v15;
          long long v17 = Value[7];
          long long v19 = Value[5];
          long long v18 = Value[6];
          long long v66 = Value[8];
          long long v64 = v18;
          long long v65 = v17;
          long long v63 = v19;
          outlined retain of GestureDebug.Data((uint64_t)&v58);
          outlined release of LayoutGestureBox.Child.DebugData?(v70);
          uint64_t v56 = *((void *)&v66 + 1);
          long long v54 = v63;
          long long v55 = v62;
          long long v52 = v65;
          long long v53 = v64;
          char v20 = v66;
          long long v50 = v61;
          long long v51 = v60;
          uint64_t v21 = *(void *)((char *)&v59 + 4);
          char v22 = v59;
          char v23 = BYTE1(v59);
          uint64_t v24 = *((void *)&v58 + 1);
          char v25 = v58;
        }
        else
        {
          uint64_t v26 = _s7SwiftUI16LayoutGestureBox33_05F3243F43C616B77CCF383885E80E96LLC5ChildV9DebugDataOWOj0_((uint64_t)&v67);
          uint64_t v56 = *(void *)(v26 + 136);
          long long v54 = *(_OWORD *)(v26 + 80);
          long long v55 = *(_OWORD *)(v26 + 64);
          long long v52 = *(_OWORD *)(v26 + 112);
          long long v53 = *(_OWORD *)(v26 + 96);
          char v20 = *(unsigned char *)(v26 + 128);
          long long v50 = *(_OWORD *)(v26 + 48);
          long long v51 = *(_OWORD *)(v26 + 32);
          uint64_t v21 = *(void *)(v26 + 20);
          char v22 = *(unsigned char *)(v26 + 16);
          char v23 = *(unsigned char *)(v26 + 17);
          uint64_t v24 = *(void *)(v26 + 8);
          char v25 = *(unsigned char *)v26;
          outlined init with take of LayoutGestureBox.Child.DebugData?((uint64_t)v70, (uint64_t)&v58, &lazy cache variable for type metadata for LayoutGestureBox.Child.DebugData?, (uint64_t)&type metadata for LayoutGestureBox.Child.DebugData, MEMORY[0x263F8D8F0]);
          outlined retain of LayoutGestureBox.Child.DebugData((uint64_t *)&v58);
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
        }
        unint64_t v28 = v10[2];
        unint64_t v27 = v10[3];
        if (v28 >= v27 >> 1) {
          uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v27 > 1), v28 + 1, 1, v10);
        }
        v10[2] = v28 + 1;
        int v29 = &v10[18 * v28];
        *((unsigned char *)v29 + 32) = v25;
        int v30 = *(_DWORD *)((char *)&v58 + 3);
        *(_DWORD *)((char *)v29 + 33) = v58;
        *((_DWORD *)v29 + 9) = v30;
        v29[5] = v24;
        *((unsigned char *)v29 + 48) = v22;
        *((unsigned char *)v29 + 49) = v23;
        *(void *)((char *)v29 + 52) = v21;
        *((_OWORD *)v29 + 4) = v51;
        *((_OWORD *)v29 + 5) = v50;
        *((_OWORD *)v29 + 6) = v55;
        *((_OWORD *)v29 + 7) = v54;
        *((_OWORD *)v29 + 8) = v53;
        *((_OWORD *)v29 + 9) = v52;
        *((unsigned char *)v29 + 160) = v20;
        *((_DWORD *)v29 + 41) = *(_DWORD *)&v57[3];
        *(_DWORD *)((char *)v29 + 161) = *(_DWORD *)v57;
        v29[21] = v56;
      }
      if (!i) {
        break;
      }
      v9 += 208;
    }
    swift_bridgeObjectRelease_n();
    a2 = v48;
    a3 = v49;
    LODWORD(v5) = v47;
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  uint64_t v31 = AGGraphGetValue();
  double v32 = *(double *)v31;
  double v33 = *(double *)(v31 + 8);
  double v34 = *(double *)(v31 + 16);
  double v35 = *(double *)(v31 + 24);
  double v36 = *(double *)(v31 + 32);
  swift_retain();
  memset(v70, 0, sizeof(v70));
  char v71 = 2;
  char v72 = 2;
  int v37 = (uint64_t *)AGGraphGetValue();
  uint64_t v38 = *v37;
  uint64_t v39 = v37[1];
  if (v32 != 0.0 || v35 != 0.0 || v36 != 0.0)
  {
    uint64_t v67 = *v37;
    uint64_t v68 = v39;
    __src[0] = v32;
    __src[1] = v33;
    __src[2] = v34;
    __src[3] = v35;
    __src[4] = v36;
    specialized ViewTransform.convert(_:_:)((uint64_t)v70, __src, (uint64_t)&v67);
    uint64_t v38 = v67;
    uint64_t v39 = v68;
  }
  outlined destroy of ViewTransform.Conversion((uint64_t)v70);
  swift_release();
  specialized ArrayWith2Inline.init<A>(_:)((uint64_t)v10, __src);
  type metadata accessor for Attribute<LayoutGestureBox.Value>(0, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<()>, MEMORY[0x263F8EE60] + 8, (uint64_t (*)(void, uint64_t))type metadata accessor for GesturePhase);
  __int16 v40 = *(_WORD *)AGGraphGetValue();
  int v41 = *(_DWORD *)AGGraphGetValue();
  long long v42 = (uint64_t *)AGGraphGetValue();
  uint64_t v43 = *v42;
  uint64_t v44 = v42[1];
  uint64_t v45 = swift_allocObject();
  memcpy((void *)(v45 + 16), __src, 0x121uLL);
  *(unsigned char *)a3 = 4;
  *(_DWORD *)(a3 + 1) = v67;
  *(_DWORD *)(a3 + 4) = *(_DWORD *)((char *)&v67 + 3);
  *(void *)(a3 + 8) = a2;
  *(_WORD *)(a3 + 16) = v40;
  *(_DWORD *)(a3 + 20) = v5;
  *(_DWORD *)(a3 + 24) = v41;
  *(void *)(a3 + 32) = v38;
  *(void *)(a3 + 40) = v39;
  *(void *)(a3 + 48) = v43;
  *(void *)(a3 + 56) = v44;
  double result = 0.0;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(unsigned char *)(a3 + 128) = 3;
  *(_DWORD *)(a3 + 129) = v58;
  *(_DWORD *)(a3 + 132) = *(_DWORD *)((char *)&v58 + 3);
  *(void *)(a3 + 136) = v45;
  return result;
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance LayoutDebug<A>@<X0>(uint64_t a1@<X8>)
{
  _s7SwiftUI15TextRenderLayerC6Layout33_FB86B422571764190CF2C7C4C92612D4LLVSgWOi0_(v3);
  return outlined init with take of LayoutGestureBox.Child.DebugData?((uint64_t)v3, a1, &lazy cache variable for type metadata for GestureDebug.Data?, (uint64_t)&type metadata for GestureDebug.Data, MEMORY[0x263F8D8F0]);
}

double protocol witness for Rule.value.getter in conformance LayoutDebug<A>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return LayoutDebug.value.getter(*(void *)(v2 + 8), *(void *)(a1 + 16), a2);
}

uint64_t type metadata accessor for LayoutGestureBox()
{
  return self;
}

uint64_t type metadata accessor for UpdateLayoutGestureBox()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for LayoutPhase()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for Attribute<GesturePhase<()>>()
{
  if (!lazy cache variable for type metadata for Attribute<GesturePhase<()>>)
  {
    type metadata accessor for Attribute<LayoutGestureBox.Value>(255, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<()>, MEMORY[0x263F8EE60] + 8, (uint64_t (*)(void, uint64_t))type metadata accessor for GesturePhase);
    unint64_t v0 = type metadata accessor for Attribute();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<GesturePhase<()>>);
    }
  }
}

uint64_t type metadata accessor for LayoutGesturePreferenceCombiner()
{
  return swift_getGenericMetadata();
}

uint64_t specialized UnsafeBufferPointer._copyContents(initializing:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4 = a3;
  if (!a4 || !a2) {
    return v4;
  }
  if (a4 >= a2) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = a4;
  }
  if ((v5 & 0x8000000000000000) == 0 && (a1 + 32 * v5 <= a3 || a3 + 32 * v5 <= a1))
  {
    type metadata accessor for (String, String)();
    swift_arrayInitWithCopy();
    v4 += 32 * v5;
    return v4;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for LayoutDebug()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type LayoutGestureChildProxy and conformance LayoutGestureChildProxy()
{
  unint64_t result = lazy protocol witness table cache variable for type LayoutGestureChildProxy and conformance LayoutGestureChildProxy;
  if (!lazy protocol witness table cache variable for type LayoutGestureChildProxy and conformance LayoutGestureChildProxy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LayoutGestureChildProxy and conformance LayoutGestureChildProxy);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LayoutGestureChildProxy and conformance LayoutGestureChildProxy;
  if (!lazy protocol witness table cache variable for type LayoutGestureChildProxy and conformance LayoutGestureChildProxy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LayoutGestureChildProxy and conformance LayoutGestureChildProxy);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LayoutGestureChildProxy and conformance LayoutGestureChildProxy;
  if (!lazy protocol witness table cache variable for type LayoutGestureChildProxy and conformance LayoutGestureChildProxy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LayoutGestureChildProxy and conformance LayoutGestureChildProxy);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LayoutGestureChildProxy and conformance LayoutGestureChildProxy;
  if (!lazy protocol witness table cache variable for type LayoutGestureChildProxy and conformance LayoutGestureChildProxy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LayoutGestureChildProxy and conformance LayoutGestureChildProxy);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : RandomAccessCollection in LayoutGestureChildProxy()
{
  return _sSnySiGSnyxGSksSxRzSZ6StrideRpzrlWlTm_6((unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in LayoutGestureChildProxy()
{
  return lazy protocol witness table accessor for type Slice<LayoutGestureChildProxy> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<LayoutGestureChildProxy> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type LayoutGestureChildProxy and conformance LayoutGestureChildProxy);
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in LayoutGestureChildProxy()
{
  return _sSnySiGSnyxGSksSxRzSZ6StrideRpzrlWlTm_6(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in LayoutGestureChildProxy()
{
  return lazy protocol witness table accessor for type Slice<LayoutGestureChildProxy> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<LayoutGestureChildProxy> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type LayoutGestureChildProxy and conformance LayoutGestureChildProxy);
}

uint64_t lazy protocol witness table accessor for type Slice<LayoutGestureChildProxy> and conformance <> Slice<A>(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Slice<LayoutGestureChildProxy>(255, &lazy cache variable for type metadata for Slice<LayoutGestureChildProxy>, MEMORY[0x263F8E738]);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in LayoutGestureChildProxy()
{
  return _sSnySiGSnyxGSksSxRzSZ6StrideRpzrlWlTm_6(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in LayoutGestureChildProxy()
{
  return lazy protocol witness table accessor for type Slice<LayoutGestureChildProxy> and conformance Slice<A>(&lazy protocol witness table cache variable for type Slice<LayoutGestureChildProxy> and conformance Slice<A>, &lazy cache variable for type metadata for Slice<LayoutGestureChildProxy>, MEMORY[0x263F8E738]);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in LayoutGestureChildProxy()
{
  return lazy protocol witness table accessor for type Slice<LayoutGestureChildProxy> and conformance Slice<A>(&lazy protocol witness table cache variable for type IndexingIterator<LayoutGestureChildProxy> and conformance IndexingIterator<A>, &lazy cache variable for type metadata for IndexingIterator<LayoutGestureChildProxy>, MEMORY[0x263F8DE58]);
}

uint64_t lazy protocol witness table accessor for type Slice<LayoutGestureChildProxy> and conformance Slice<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Slice<LayoutGestureChildProxy>(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for Slice<LayoutGestureChildProxy>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = lazy protocol witness table accessor for type LayoutGestureChildProxy and conformance LayoutGestureChildProxy();
    unint64_t v7 = a3(a1, &type metadata for LayoutGestureChildProxy, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t dispatch thunk of LayoutGesture.responder.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of LayoutGesture.updateEventBindings(_:proxy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

ValueMetadata *type metadata accessor for DefaultLayoutGesture()
{
  return &type metadata for DefaultLayoutGesture;
}

ValueMetadata *type metadata accessor for LayoutGestureChildProxy()
{
  return &type metadata for LayoutGestureChildProxy;
}

uint64_t *outlined destroy of LayoutGestureBox.Child.DebugData(uint64_t *a1)
{
  return a1;
}

__n128 __swift_memcpy204_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  long long v5 = *(_OWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  __n128 result = *(__n128 *)(a2 + 144);
  long long v9 = *(_OWORD *)(a2 + 160);
  long long v10 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 188) = *(_OWORD *)(a2 + 188);
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 144) = result;
  return result;
}

ValueMetadata *type metadata accessor for LayoutGestureChildProxy.Child()
{
  return &type metadata for LayoutGestureChildProxy.Child;
}

uint64_t destroy for LayoutGestureBox.Child.DebugData(uint64_t *a1)
{
  return outlined consume of LayoutGestureBox.Child.DebugData(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17]);
}

uint64_t *initializeWithCopy for LayoutGestureBox.Child.DebugData(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a2[6];
  uint64_t v10 = a2[7];
  uint64_t v11 = a2[8];
  uint64_t v13 = a2[9];
  uint64_t v14 = a2[10];
  uint64_t v15 = a2[11];
  uint64_t v16 = a2[12];
  uint64_t v17 = a2[13];
  uint64_t v18 = a2[14];
  uint64_t v19 = a2[15];
  uint64_t v20 = a2[16];
  uint64_t v21 = a2[17];
  outlined copy of LayoutGestureBox.Child.DebugData(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14, v15, v16, v17, v18, v19, v20, v21);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  a1[9] = v13;
  a1[10] = v14;
  a1[11] = v15;
  a1[12] = v16;
  a1[13] = v17;
  a1[14] = v18;
  a1[15] = v19;
  a1[16] = v20;
  a1[17] = v21;
  return a1;
}

uint64_t assignWithCopy for LayoutGestureBox.Child.DebugData(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a2[6];
  uint64_t v10 = a2[7];
  uint64_t v11 = a2[8];
  uint64_t v27 = a2[9];
  uint64_t v28 = a2[10];
  uint64_t v29 = a2[11];
  uint64_t v30 = a2[12];
  uint64_t v31 = a2[13];
  uint64_t v32 = a2[14];
  uint64_t v33 = a2[15];
  uint64_t v34 = a2[16];
  uint64_t v35 = a2[17];
  outlined copy of LayoutGestureBox.Child.DebugData(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v27, v28, v29, v30, v31, v32, v33, v34, v35);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  long long v20 = *(_OWORD *)(a1 + 64);
  long long v21 = *(_OWORD *)(a1 + 80);
  long long v22 = *(_OWORD *)(a1 + 96);
  long long v23 = *(_OWORD *)(a1 + 112);
  uint64_t v24 = *(void *)(a1 + 128);
  uint64_t v25 = *(void *)(a1 + 136);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v27;
  *(void *)(a1 + 80) = v28;
  *(void *)(a1 + 88) = v29;
  *(void *)(a1 + 96) = v30;
  *(void *)(a1 + 104) = v31;
  *(void *)(a1 + 112) = v32;
  *(void *)(a1 + 120) = v33;
  *(void *)(a1 + 128) = v34;
  *(void *)(a1 + 136) = v35;
  outlined consume of LayoutGestureBox.Child.DebugData(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, v25);
  return a1;
}

uint64_t assignWithTake for LayoutGestureBox.Child.DebugData(uint64_t a1, _OWORD *a2)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v10 = *(void *)(a1 + 56);
  long long v11 = *(_OWORD *)(a1 + 64);
  long long v12 = *(_OWORD *)(a1 + 80);
  long long v13 = *(_OWORD *)(a1 + 96);
  long long v14 = *(_OWORD *)(a1 + 112);
  uint64_t v15 = *(void *)(a1 + 128);
  uint64_t v16 = *(void *)(a1 + 136);
  long long v17 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v17;
  long long v18 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v18;
  long long v19 = a2[5];
  *(_OWORD *)(a1 + 64) = a2[4];
  *(_OWORD *)(a1 + 80) = v19;
  long long v20 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v20;
  *(_OWORD *)(a1 + 128) = a2[8];
  outlined consume of LayoutGestureBox.Child.DebugData(v3, v5, v4, v6, v7, v8, v9, v10, v11, *((uint64_t *)&v11 + 1), v12, *((uint64_t *)&v12 + 1), v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for LayoutGestureBox.Child.DebugData(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 144)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unsigned int v2 = *(_DWORD *)(a1 + 4);
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

double storeEnumTagSinglePayload for LayoutGestureBox.Child.DebugData(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(a1 + 136) = 0;
    double result = 0.0;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 144) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)a1 = (unint64_t)-a2 << 32;
      double result = 0.0;
      *(_OWORD *)(a1 + 8) = 0u;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
      *(_OWORD *)(a1 + 56) = 0u;
      *(_OWORD *)(a1 + 72) = 0u;
      *(_OWORD *)(a1 + 88) = 0u;
      *(_OWORD *)(a1 + 104) = 0u;
      *(_OWORD *)(a1 + 120) = 0u;
      *(void *)(a1 + 136) = 0;
      return result;
    }
    *(unsigned char *)(a1 + 144) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

int8x16_t destructiveInjectEnumTag for LayoutGestureBox.Child.DebugData(int8x16_t *a1, uint64_t a2)
{
  int8x16_t result = vandq_s8(*a1, (int8x16_t)xmmword_2461E0A80);
  int8x16_t v3 = vandq_s8(a1[1], (int8x16_t)xmmword_2461E0A90);
  uint64_t v4 = a1[8].i64[0] & 3;
  uint64_t v5 = a1[8].i64[1] & 0xFFFFFFFFFFFFFF8 | (a2 << 63);
  *a1 = result;
  a1[1] = v3;
  a1[8].i64[0] = v4;
  a1[8].i64[1] = v5;
  return result;
}

ValueMetadata *type metadata accessor for LayoutGestureBox.Child.DebugData()
{
  return &type metadata for LayoutGestureBox.Child.DebugData;
}

uint64_t destroy for LayoutGestureChildProxy.Child(uint64_t a1)
{
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 56);
  unint64_t v4 = *(void *)(a1 + 72);
  uint64_t v5 = *(void *)(a1 + 184);
  if ((v5 & 0xF000000000000007) != 0
    || *(void *)(a1 + 176) > 3uLL
    || HIDWORD(v4) != 0
    || v2 < 0xFFFFFFFF00000000
    || (*(void *)(a1 + 64) & 0xFFFFFC00 | v3 & 0xF000000000000007) != 0)
  {
    outlined consume of LayoutGestureBox.Child.DebugData(v2, v3, *(void *)(a1 + 64), v4, *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144), *(void *)(a1 + 152), *(void *)(a1 + 160), *(void *)(a1 + 168), *(void *)(a1 + 176), v5);
  }

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for LayoutGestureChildProxy.Child(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  unint64_t v4 = *(void **)(a2 + 16);
  *(void *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = (_OWORD *)(a2 + 48);
  uint64_t v33 = *(void *)(a2 + 56);
  unint64_t v34 = *(void *)(a2 + 48);
  unint64_t v7 = *(void *)(a2 + 72);
  uint64_t v32 = *(void *)(a2 + 64);
  unint64_t v8 = *(void *)(a2 + 176);
  uint64_t v9 = *(void *)(a2 + 184);
  swift_retain();
  id v10 = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((v9 & 0xF000000000000007) != 0
    || v8 > 3
    || HIDWORD(v7)
    || v34 < 0xFFFFFFFF00000000
    || v32 & 0xFFFFFC00 | v33 & 0xF000000000000007)
  {
    uint64_t v15 = *(void *)(a2 + 80);
    uint64_t v16 = *(void *)(a2 + 96);
    uint64_t v22 = *(void *)(a2 + 112);
    uint64_t v23 = *(void *)(a2 + 120);
    uint64_t v25 = *(void *)(a2 + 128);
    uint64_t v26 = *(void *)(a2 + 136);
    uint64_t v27 = *(void *)(a2 + 144);
    uint64_t v28 = *(void *)(a2 + 152);
    uint64_t v29 = *(void *)(a2 + 160);
    uint64_t v30 = *(void *)(a2 + 168);
    uint64_t v21 = v9;
    unint64_t v31 = v8;
    char v20 = v8;
    uint64_t v24 = v9;
    uint64_t v17 = *(void *)(a2 + 88);
    uint64_t v18 = *(void *)(a2 + 104);
    outlined copy of LayoutGestureBox.Child.DebugData(v34, v33, v32, v7, v15, v17, v16, v18, v22, v23, v25, v26, v27, v28, v29, v30, v20, v21);
    *(void *)(a1 + 48) = v34;
    *(void *)(a1 + 56) = v33;
    *(void *)(a1 + 64) = v32;
    *(void *)(a1 + 72) = v7;
    *(void *)(a1 + 80) = v15;
    *(void *)(a1 + 88) = v17;
    *(void *)(a1 + 96) = v16;
    *(void *)(a1 + 104) = v18;
    *(void *)(a1 + 112) = v22;
    *(void *)(a1 + 120) = v23;
    *(void *)(a1 + 128) = v25;
    *(void *)(a1 + 136) = v26;
    *(void *)(a1 + 144) = v27;
    *(void *)(a1 + 152) = v28;
    *(void *)(a1 + 160) = v29;
    *(void *)(a1 + 168) = v30;
    *(void *)(a1 + 176) = v31;
    *(void *)(a1 + 184) = v24;
  }
  else
  {
    long long v11 = v6[7];
    *(_OWORD *)(a1 + 144) = v6[6];
    *(_OWORD *)(a1 + 160) = v11;
    *(_OWORD *)(a1 + 176) = v6[8];
    long long v12 = v6[3];
    *(_OWORD *)(a1 + 80) = v6[2];
    *(_OWORD *)(a1 + 96) = v12;
    long long v13 = v6[5];
    *(_OWORD *)(a1 + 112) = v6[4];
    *(_OWORD *)(a1 + 128) = v13;
    long long v14 = v6[1];
    *(_OWORD *)(a1 + 48) = *v6;
    *(_OWORD *)(a1 + 64) = v14;
  }
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for LayoutGestureChildProxy.Child(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  unint64_t v4 = *(void **)(a1 + 16);
  uint64_t v5 = *(void **)(a2 + 16);
  *(void *)(a1 + 16) = v5;
  id v6 = v5;

  int v7 = *(_DWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v8 = (_OWORD *)(a1 + 48);
  unint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  long long v11 = (_OWORD *)(a2 + 48);
  uint64_t v12 = *(void *)(a2 + 64);
  unint64_t v13 = *(void *)(a2 + 72);
  unint64_t v14 = *(void *)(a2 + 176);
  uint64_t v15 = *(void *)(a2 + 184);
  BOOL v16 = (v15 & 0xF000000000000007) == 0;
  if (v9 <= 0xFFFFFFFEFFFFFFFFLL
    || (*(void *)(a2 + 64) & 0xFFFFFC00 | v10 & 0xF000000000000007) != 0
    || HIDWORD(v13) != 0
    || v14 >= 4)
  {
    BOOL v16 = 0;
  }
  if ((*(void *)(a1 + 184) & 0xF000000000000007) != 0
    || *(void *)(a1 + 176) > 3uLL
    || HIDWORD(*(void *)(a1 + 72))
    || *(void *)(a1 + 48) < 0xFFFFFFFF00000000
    || *(void *)(a1 + 64) & 0xFFFFFC00 | *(void *)(a1 + 56) & 0xF000000000000007)
  {
    if (v16)
    {
      outlined destroy of LayoutGestureBox.Child.DebugData((uint64_t *)(a1 + 48));
      *unint64_t v8 = *v11;
      long long v26 = *(_OWORD *)(a2 + 112);
      long long v28 = *(_OWORD *)(a2 + 64);
      long long v27 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v26;
      *(_OWORD *)(a1 + 64) = v28;
      *(_OWORD *)(a1 + 80) = v27;
      long long v29 = *(_OWORD *)(a2 + 176);
      long long v31 = *(_OWORD *)(a2 + 128);
      long long v30 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 176) = v29;
      *(_OWORD *)(a1 + 128) = v31;
      *(_OWORD *)(a1 + 144) = v30;
    }
    else
    {
      uint64_t v35 = *(void *)(a2 + 80);
      uint64_t v34 = *(void *)(a2 + 88);
      uint64_t v52 = *(void *)(a2 + 104);
      uint64_t v54 = *(void *)(a2 + 96);
      uint64_t v56 = *(void *)(a2 + 112);
      uint64_t v58 = *(void *)(a2 + 120);
      uint64_t v60 = *(void *)(a2 + 128);
      uint64_t v62 = *(void *)(a2 + 136);
      uint64_t v64 = *(void *)(a2 + 144);
      uint64_t v66 = *(void *)(a2 + 152);
      uint64_t v68 = *(void *)(a2 + 160);
      uint64_t v70 = *(void *)(a2 + 168);
      outlined copy of LayoutGestureBox.Child.DebugData(v9, v10, v12, v13, v35, v34, v54, v52, v56, v58, v60, v62, v64, v66, v68, v70, v14, v15);
      uint64_t v36 = *(void *)(a1 + 48);
      uint64_t v37 = *(void *)(a1 + 56);
      uint64_t v38 = *(void *)(a1 + 64);
      uint64_t v39 = *(void *)(a1 + 72);
      uint64_t v40 = *(void *)(a1 + 80);
      uint64_t v41 = *(void *)(a1 + 88);
      uint64_t v42 = *(void *)(a1 + 96);
      uint64_t v43 = *(void *)(a1 + 104);
      long long v44 = *(_OWORD *)(a1 + 112);
      long long v45 = *(_OWORD *)(a1 + 128);
      long long v46 = *(_OWORD *)(a1 + 144);
      long long v47 = *(_OWORD *)(a1 + 160);
      uint64_t v48 = *(void *)(a1 + 176);
      uint64_t v49 = *(void *)(a1 + 184);
      *(void *)(a1 + 48) = v9;
      *(void *)(a1 + 56) = v10;
      *(void *)(a1 + 64) = v12;
      *(void *)(a1 + 72) = v13;
      *(void *)(a1 + 80) = v35;
      *(void *)(a1 + 88) = v34;
      *(void *)(a1 + 96) = v54;
      *(void *)(a1 + 104) = v52;
      *(void *)(a1 + 112) = v56;
      *(void *)(a1 + 120) = v58;
      *(void *)(a1 + 128) = v60;
      *(void *)(a1 + 136) = v62;
      *(void *)(a1 + 144) = v64;
      *(void *)(a1 + 152) = v66;
      *(void *)(a1 + 160) = v68;
      *(void *)(a1 + 168) = v70;
      *(void *)(a1 + 176) = v14;
      *(void *)(a1 + 184) = v15;
      outlined consume of LayoutGestureBox.Child.DebugData(v36, v37, v38, v39, v40, v41, v42, v43, v44, *((uint64_t *)&v44 + 1), v45, *((uint64_t *)&v45 + 1), v46, *((uint64_t *)&v46 + 1), v47, *((uint64_t *)&v47 + 1), v48, v49);
    }
  }
  else if (v16)
  {
    *unint64_t v8 = *v11;
    long long v20 = *(_OWORD *)(a2 + 64);
    long long v21 = *(_OWORD *)(a2 + 80);
    long long v22 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v22;
    *(_OWORD *)(a1 + 64) = v20;
    *(_OWORD *)(a1 + 80) = v21;
    long long v23 = *(_OWORD *)(a2 + 128);
    long long v24 = *(_OWORD *)(a2 + 144);
    long long v25 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v25;
    *(_OWORD *)(a1 + 128) = v23;
    *(_OWORD *)(a1 + 144) = v24;
  }
  else
  {
    uint64_t v33 = *(void *)(a2 + 80);
    uint64_t v32 = *(void *)(a2 + 88);
    uint64_t v51 = *(void *)(a2 + 104);
    uint64_t v53 = *(void *)(a2 + 96);
    uint64_t v55 = *(void *)(a2 + 112);
    uint64_t v57 = *(void *)(a2 + 120);
    uint64_t v59 = *(void *)(a2 + 128);
    uint64_t v61 = *(void *)(a2 + 136);
    uint64_t v63 = *(void *)(a2 + 144);
    uint64_t v65 = *(void *)(a2 + 152);
    uint64_t v67 = *(void *)(a2 + 160);
    uint64_t v69 = *(void *)(a2 + 168);
    outlined copy of LayoutGestureBox.Child.DebugData(v9, v10, v12, v13, v33, v32, v53, v51, v55, v57, v59, v61, v63, v65, v67, v69, v14, v15);
    *(void *)(a1 + 48) = v9;
    *(void *)(a1 + 56) = v10;
    *(void *)(a1 + 64) = v12;
    *(void *)(a1 + 72) = v13;
    *(void *)(a1 + 80) = v33;
    *(void *)(a1 + 88) = v32;
    *(void *)(a1 + 96) = v53;
    *(void *)(a1 + 104) = v51;
    *(void *)(a1 + 112) = v55;
    *(void *)(a1 + 120) = v57;
    *(void *)(a1 + 128) = v59;
    *(void *)(a1 + 136) = v61;
    *(void *)(a1 + 144) = v63;
    *(void *)(a1 + 152) = v65;
    *(void *)(a1 + 160) = v67;
    *(void *)(a1 + 168) = v69;
    *(void *)(a1 + 176) = v14;
    *(void *)(a1 + 184) = v15;
  }
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  return a1;
}

uint64_t assignWithTake for LayoutGestureChildProxy.Child(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  unint64_t v4 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);

  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  unint64_t v5 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  unint64_t v7 = *(void *)(a2 + 48);
  uint64_t v8 = *(void *)(a2 + 56);
  uint64_t v9 = *(void *)(a1 + 64);
  unint64_t v10 = *(void *)(a1 + 72);
  unint64_t v11 = *(void *)(a1 + 176);
  uint64_t v12 = *(void *)(a1 + 184);
  uint64_t v13 = *(void *)(a2 + 64);
  unint64_t v14 = *(void *)(a2 + 72);
  unint64_t v15 = *(void *)(a2 + 176);
  uint64_t v16 = *(void *)(a2 + 184);
  if ((v12 & 0xF000000000000007) != 0
    || v11 > 3
    || HIDWORD(v10)
    || v5 < 0xFFFFFFFF00000000
    || *(void *)(a1 + 64) & 0xFFFFFC00 | v6 & 0xF000000000000007)
  {
    if ((v16 & 0xF000000000000007) != 0
      || v15 > 3
      || HIDWORD(v14)
      || v7 < 0xFFFFFFFF00000000
      || *(void *)(a2 + 64) & 0xFFFFFC00 | v8 & 0xF000000000000007)
    {
      uint64_t v21 = *(void *)(a1 + 80);
      uint64_t v22 = *(void *)(a1 + 88);
      uint64_t v23 = *(void *)(a1 + 96);
      uint64_t v24 = *(void *)(a1 + 104);
      long long v25 = *(_OWORD *)(a1 + 112);
      long long v26 = *(_OWORD *)(a1 + 128);
      long long v27 = *(_OWORD *)(a1 + 144);
      uint64_t v28 = *(void *)(a1 + 160);
      uint64_t v29 = *(void *)(a1 + 168);
      *(void *)(a1 + 48) = v7;
      *(void *)(a1 + 56) = v8;
      *(void *)(a1 + 64) = v13;
      *(void *)(a1 + 72) = v14;
      long long v30 = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 96) = v30;
      long long v31 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 128) = v31;
      long long v32 = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 160) = v32;
      *(void *)(a1 + 176) = v15;
      *(void *)(a1 + 184) = v16;
      outlined consume of LayoutGestureBox.Child.DebugData(v5, v6, v9, v10, v21, v22, v23, v24, v25, *((uint64_t *)&v25 + 1), v26, *((uint64_t *)&v26 + 1), v27, *((uint64_t *)&v27 + 1), v28, v29, v11, v12);
      goto LABEL_14;
    }
    outlined destroy of LayoutGestureBox.Child.DebugData((uint64_t *)(a1 + 48));
  }
  long long v17 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v17;
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  long long v18 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v18;
  long long v19 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v19;
  long long v20 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v20;
LABEL_14:
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  return a1;
}

uint64_t getEnumTagSinglePayload for LayoutGestureChildProxy.Child(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 204)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LayoutGestureChildProxy.Child(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 200) = 0;
    *(void *)int8x16_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 204) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)int8x16_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 204) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LayoutGestureBox.Child()
{
  return &type metadata for LayoutGestureBox.Child;
}

ValueMetadata *type metadata accessor for LayoutGestureBox.Value()
{
  return &type metadata for LayoutGestureBox.Value;
}

uint64_t instantiation function for generic protocol witness table for LayoutGesturePreferenceCombiner<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for _AttributeBody in LayoutDebug<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in LayoutGesturePreferenceCombiner<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in LayoutPhase<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in UpdateLayoutGestureBox<A>()
{
  return swift_getWitnessTable();
}

uint64_t specialized UpdateLayoutGestureBox.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  unint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Value = (unsigned int *)AGGraphGetValue();
  LayoutGestureBox.updateResetSeed(_:)(*Value);
  uint64_t v12 = AGGraphGetValue();
  char v14 = v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v12, a4);
  if (v14)
  {
    uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 24))(a4, a5);
    LayoutGestureBox.updateResponder(_:)(v15);
    swift_release();
  }
  type metadata accessor for [EventID : EventType]();
  uint64_t result = AGGraphGetCurrentAttribute();
  if (result == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    unsigned int v17 = result;
    AGGraphGetValue();
    uint64_t v18 = swift_bridgeObjectRetain();
    LayoutGestureBox.willSendEvents<A>(_:gesture:boxValueAttribute:)(v18, (uint64_t)v10, v17, a4, a5);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, a4);
    return a3;
  }
  return result;
}

uint64_t type metadata accessor for LayoutChildEvents()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for LayoutChildSeed()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #1 in LayoutGesture.preferenceValue<A>(key:box:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in LayoutGesture.preferenceValue<A>(key:box:)(a1);
}

uint64_t sub_245FEDC2C()
{
  long long v3 = *(_OWORD *)(v0 + 256);
  long long v4 = *(_OWORD *)(v0 + 272);
  long long v2 = *(_OWORD *)(v0 + 224);
  outlined consume of ArrayWith2Inline<GestureDebug.Data>.Storage(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112), *(void *)(v0 + 120), *(void *)(v0 + 128), *(void *)(v0 + 136), *(_OWORD *)(v0 + 144), *(void *)(v0 + 152), *(void *)(v0 + 160),
    *(void *)(v0 + 168),
    *(void *)(v0 + 176),
    *(void *)(v0 + 184),
    *(void *)(v0 + 192),
    *(void *)(v0 + 200),
    *(void *)(v0 + 208),
    *(void *)(v0 + 216),
    v2,
    *((uint64_t *)&v2 + 1),
    *(void *)(v0 + 240),
    *(void *)(v0 + 248),
    v3,
    *((uint64_t *)&v3 + 1),
    v4,
    *((uint64_t *)&v4 + 1),
    *(void *)(v0 + 288),
    *(void *)(v0 + 296),
    *(unsigned char *)(v0 + 304));

  return swift_deallocObject();
}

uint64_t outlined copy of (String, String)?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined init with take of LayoutGestureBox.Child.DebugData?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(void, uint64_t))
{
  type metadata accessor for Attribute<LayoutGestureBox.Value>(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(a2, a1, v7);
  return a2;
}

uint64_t _s7SwiftUI16ArrayWith2InlineV7StorageOyAA12GestureDebugO4DataV_GWOi1_(uint64_t result)
{
  *(unsigned char *)(result + 288) = 2;
  return result;
}

void type metadata accessor for Attribute<LayoutGestureBox.Value>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type LayoutDebug<DefaultLayoutGesture> and conformance LayoutDebug<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(void, uint64_t, uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    _sSnySiGMaTm_4(255, a2, (uint64_t)&type metadata for DefaultLayoutGesture, (uint64_t)&protocol witness table for DefaultLayoutGesture, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for _AttributeBody in LayoutChildSeed<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in LayoutChildEvents<A>()
{
  return swift_getWitnessTable();
}

uint64_t outlined init with take of ClusterIndexSequence.Iterator(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t _s7SwiftUI4TextVAAE6EffectO18RenderSegmentationV7SegmentOWOcTm_1(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of ClusterIndexSequence(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t KeyframeTimeline.init<A>(initialValue:content:)@<X0>(uint64_t a1@<X0>, void (*a2)(void)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  long long v25 = a2;
  uint64_t v26 = a6;
  v24[1] = a3;
  uint64_t v27 = type metadata accessor for Optional();
  uint64_t v11 = *(void *)(v27 - 8);
  MEMORY[0x270FA5388](v27);
  char v13 = (char *)v24 - v12;
  uint64_t v14 = *(void *)(a5 - 8);
  v16.n128_f64[0] = MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(void *)(a4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v19 + 16))(a7, a1, a4, v16);
  type metadata accessor for _ResolvedKeyframes.Track();
  uint64_t v20 = static Array._allocateUninitialized(_:)();
  protocol witness for ProtobufTag.init(rawValue:) in conformance CodableResolvedPaint.Tag(v20, &v28);
  uint64_t v21 = v28;
  uint64_t v22 = (void *)(a7 + *(int *)(type metadata accessor for KeyframeTimeline() + 28));
  *uint64_t v22 = v21;
  v25();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v13, 1, 1, a4);
  (*(void (**)(void *, uint64_t, char *, uint64_t))(v26 + 40))(v22, a1, v13, a5);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(a1, a4);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v27);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v18, a5);
}

double KeyframeTimeline.duration.getter()
{
  return _ResolvedKeyframes.duration.getter();
}

uint64_t KeyframeTimeline.value(progress:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v3, *(void *)(a1 + 16));
  swift_bridgeObjectRetain();
  type metadata accessor for _ResolvedKeyframes();
  double v6 = _ResolvedKeyframes.duration.getter();
  _ResolvedKeyframes.update(value:time:)(a2, v6 * a3);

  return swift_bridgeObjectRelease();
}

uint64_t KeyframeTimeline.value(time:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  return KeyframeTimeline.value(time:)(a1, (uint64_t (*)(uint64_t, uint64_t, double))_ResolvedKeyframes.update(value:time:), a2, a3);
}

uint64_t KeyframeTimeline.velocity(time:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  return KeyframeTimeline.value(time:)(a1, (uint64_t (*)(uint64_t, uint64_t, double))_ResolvedKeyframes.update(velocity:time:), a2, a3);
}

uint64_t KeyframeTimeline.value(time:)@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, double)@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a3, v4, *(void *)(a1 + 16));
  uint64_t v8 = type metadata accessor for _ResolvedKeyframes();
  return a2(a3, v8, a4);
}

uint64_t KeyframeTimeline.init<A>(initialValue:initialVelocity:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(void)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v35 = a7;
  uint64_t v31 = a6;
  uint64_t v32 = a4;
  uint64_t v33 = a3;
  uint64_t v30 = a1;
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v36 = *(void *)(v13 - 8);
  uint64_t v37 = v13;
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v29 - v14;
  uint64_t v34 = *(void *)(a6 - 8);
  v17.n128_f64[0] = MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = *(void *)(a5 - 8);
  uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v20 + 16);
  v21(a8, a1, a5, v17);
  type metadata accessor for _ResolvedKeyframes.Track();
  uint64_t v22 = static Array._allocateUninitialized(_:)();
  protocol witness for ProtobufTag.init(rawValue:) in conformance CodableResolvedPaint.Tag(v22, &v38);
  uint64_t v23 = v38;
  uint64_t v24 = (void *)(a8 + *(int *)(type metadata accessor for KeyframeTimeline() + 28));
  *uint64_t v24 = v23;
  v33();
  ((void (*)(char *, uint64_t, uint64_t))v21)(v15, a2, a5);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v15, 0, 1, a5);
  uint64_t v26 = v30;
  uint64_t v25 = v31;
  (*(void (**)(void *, uint64_t, char *, uint64_t))(v35 + 40))(v24, v30, v15, v31);
  uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
  v27(a2, a5);
  v27(v26, a5);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v15, v37);
  return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v19, v25);
}

uint64_t KeyframeTimeline.initialValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t KeyframeTimeline.initialValue.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*KeyframeTimeline.initialValue.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t KeyframeTimeline.content.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(v2 + *(int *)(a1 + 28));
  return swift_bridgeObjectRetain();
}

uint64_t KeyframeTimeline.content.setter(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(int *)(a2 + 28);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + v4) = v3;
  return result;
}

uint64_t (*KeyframeTimeline.content.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t KeyframeTimeline.update(value:time:)(uint64_t a1, double a2)
{
  return _ResolvedKeyframes.update(value:time:)(a1, a2);
}

uint64_t getEnumTagSinglePayload for KeyframeTimeline(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x245FEE958);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for KeyframeTimeline(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x245FEEB48);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          uint64_t v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0) {
            uint64_t v19 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v19 = a2 - 1;
          }
          *uint64_t v18 = v19;
        }
        else
        {
          unint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t specialized static ModifierGesture._makeGesture(gesture:inputs:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  type metadata accessor for RequiredTapCountWriter<TappableEvent>(0, &lazy cache variable for type metadata for RequiredTapCountWriter<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(void, uint64_t))type metadata accessor for RequiredTapCountWriter);
  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  AGGraphCreateOffsetAttribute2();
  uint64_t result = specialized static ModifierGesture._makeGesture(gesture:inputs:)(a1, (uint64_t)&v25);
  int v6 = v25;
  unsigned int v7 = v26;
  uint64_t v8 = v27;
  int v9 = v28;
  int v21 = v25;
  unsigned int v22 = v26;
  uint64_t v23 = v27;
  int v24 = v28;
  uint64_t v10 = *(void *)(a1 + 96);
  uint64_t v29 = v10;
  int v30 = *(_DWORD *)(a1 + 104);
  uint64_t v11 = *(void *)(v10 + 16);
  if (v11)
  {
    int v12 = (ValueMetadata **)(v10 + 32);
    while (*v12 != &type metadata for RequiredTapCountKey)
    {
      v12 += 2;
      if (!--v11) {
        goto LABEL_13;
      }
    }
    int v25 = OffsetAttribute2;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    outlined retain of LinearGradient((uint64_t)&v29);
    type metadata accessor for (_:)();
    type metadata accessor for RequiredTapCountWriter<TappableEvent>(0, &lazy cache variable for type metadata for RequiredTapCountWriter<TappableEvent>.Child, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(void, uint64_t))type metadata accessor for RequiredTapCountWriter.Child);
    lazy protocol witness table accessor for type RepeatGesture<TappableEvent> and conformance RepeatGesture<A>(&lazy protocol witness table cache variable for type RequiredTapCountWriter<TappableEvent>.Child and conformance RequiredTapCountWriter<A>.Child, &lazy cache variable for type metadata for RequiredTapCountWriter<TappableEvent>.Child, (uint64_t (*)(void, uint64_t))type metadata accessor for RequiredTapCountWriter.Child);
    int v13 = Attribute.init<A>(body:value:flags:update:)();
    uint64_t v14 = *(void *)(v8 + 16);
    if (v14)
    {
      int v15 = (ValueMetadata **)(v8 + 48);
      while (*(v15 - 2) != &type metadata for RequiredTapCountKey)
      {
        v15 += 3;
        if (!--v14)
        {
          int v15 = (ValueMetadata **)MEMORY[0x263F288F8];
          break;
        }
      }
    }
    else
    {
      int v15 = (ValueMetadata **)MEMORY[0x263F288F8];
    }
    int v16 = *(_DWORD *)v15;
    int v25 = v13;
    int v26 = v16;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for RequiredTapCountWriter<TappableEvent>(0, (unint64_t *)&lazy cache variable for type metadata for Int?, MEMORY[0x263F8D6C8], MEMORY[0x263F8D8F0]);
    type metadata accessor for SingleTapGesture<TappableEvent>(0, (unint64_t *)&lazy cache variable for type metadata for PreferenceTransform<RequiredTapCountKey>, (uint64_t)&type metadata for RequiredTapCountKey, (uint64_t)&protocol witness table for RequiredTapCountKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PreferenceTransform);
    lazy protocol witness table accessor for type PreferenceTransform<RequiredTapCountKey> and conformance PreferenceTransform<A>();
    unsigned int v17 = Attribute.init<A>(body:value:flags:update:)();
    LOBYTE(v25) = 0;
    PreferencesOutputs.subscript.setter(v17, &type metadata for RequiredTapCountKey, (uint64_t)&protocol witness table for RequiredTapCountKey);
    uint64_t result = outlined release of LinearGradient((uint64_t)&v29);
    int v6 = v21;
    unsigned int v7 = v22;
    uint64_t v8 = v23;
    int v9 = v24;
  }
LABEL_13:
  int v25 = v6;
  int v26 = v7;
  uint64_t v27 = v8;
  int v28 = v9;
  if ((*(unsigned char *)(a1 + 120) & 8) != 0)
  {
    _gestureModifierProtocolDescriptor();
    uint64_t v18 = swift_conformsToProtocol();
    if (v7 == *MEMORY[0x263F288F8]) {
      uint64_t v19 = 0;
    }
    else {
      uint64_t v19 = v7;
    }
    if (v18) {
      uint64_t v20 = 2;
    }
    else {
      uint64_t v20 = 1;
    }
    uint64_t result = specialized _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(v20, 0x100000000, a1, v19 | ((unint64_t)(v7 == *MEMORY[0x263F288F8]) << 32), 0x100000000);
    int v6 = v25;
    unsigned int v7 = v26;
    uint64_t v8 = v27;
    int v9 = v28;
  }
  *(_DWORD *)a2 = v6;
  *(_DWORD *)(a2 + 4) = v7;
  *(void *)(a2 + 8) = v8;
  *(_DWORD *)(a2 + 16) = v9;
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  int OffsetAttribute2;
  uint64_t result;
  unsigned int v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  ValueMetadata **v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  ValueMetadata **v17;
  int v18;
  unsigned int v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;

  uint64_t v34 = *MEMORY[0x263EF8340];
  type metadata accessor for RequiredTapCountWriter<TappableEvent>(0, &lazy cache variable for type metadata for CategoryGesture<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(void, uint64_t))type metadata accessor for CategoryGesture);
  unsigned int v5 = v4;
  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  AGGraphCreateOffsetAttribute2();
  uint64_t result = specialized static ModifierGesture._makeGesture(gesture:inputs:)(a1, (uint64_t)&v28);
  int v9 = v28;
  uint64_t v8 = v29;
  uint64_t v10 = v30;
  uint64_t v11 = v31;
  int v24 = v28;
  int v25 = v29;
  int v26 = v30;
  uint64_t v27 = v31;
  int v12 = *(void *)(v30 + 16);
  if (v12)
  {
    int v13 = (ValueMetadata **)(v30 + 48);
    while (*(v13 - 2) != &type metadata for GestureCategory.Key)
    {
      v13 += 3;
      if (!--v12) {
        goto LABEL_5;
      }
    }
    uint64_t v14 = 0;
    LODWORD(v12) = *(_DWORD *)v13;
  }
  else
  {
LABEL_5:
    uint64_t v14 = 1;
  }
  int v15 = *(void *)(a1 + 96);
  uint64_t v32 = v15;
  uint64_t v33 = *(_DWORD *)(a1 + 104);
  int v16 = *(void *)(v15 + 16);
  if (v16)
  {
    unsigned int v17 = (ValueMetadata **)(v15 + 32);
    while (*v17 != &type metadata for GestureCategory.Key)
    {
      v17 += 2;
      if (!--v16) {
        goto LABEL_15;
      }
    }
    uint64_t v18 = *MEMORY[0x263F288F8];
    if (!v14) {
      uint64_t v18 = v12;
    }
    int v28 = OffsetAttribute2;
    uint64_t v29 = v18;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    outlined retain of LinearGradient((uint64_t)&v32);
    type metadata accessor for SingleTapGesture<TappableEvent>(0, &lazy cache variable for type metadata for CategoryGesture<TappableEvent>.Combiner<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for CategoryGesture.Combiner);
    lazy protocol witness table accessor for type CategoryGesture<TappableEvent>.Combiner<TappableEvent> and conformance CategoryGesture<A>.Combiner<A1>();
    uint64_t v19 = Attribute.init<A>(body:value:flags:update:)();
    LOBYTE(v28) = 0;
    PreferencesOutputs.subscript.setter(v19, &type metadata for GestureCategory.Key, (uint64_t)&protocol witness table for GestureCategory.Key);
    uint64_t result = outlined release of LinearGradient((uint64_t)&v32);
    int v9 = v24;
    uint64_t v8 = v25;
    uint64_t v10 = v26;
    uint64_t v11 = v27;
  }
LABEL_15:
  int v28 = v9;
  uint64_t v29 = v8;
  int v30 = v10;
  uint64_t v31 = v11;
  if ((*(unsigned char *)(a1 + 120) & 8) != 0)
  {
    uint64_t result = swift_conformsToProtocol2();
    if (!(result ? v5 : 0))
    {
      _gestureModifierProtocolDescriptor();
      int v21 = swift_conformsToProtocol();
      if (v8 == *MEMORY[0x263F288F8]) {
        unsigned int v22 = 0;
      }
      else {
        unsigned int v22 = v8;
      }
      if (v21) {
        uint64_t v23 = 2;
      }
      else {
        uint64_t v23 = 1;
      }
      uint64_t result = specialized _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(v23, 0x100000000, a1, v22 | ((unint64_t)(v8 == *MEMORY[0x263F288F8]) << 32), 0x100000000);
      int v9 = v28;
      uint64_t v8 = v29;
      uint64_t v10 = v30;
      uint64_t v11 = v31;
    }
  }
  *(_DWORD *)a2 = v9;
  *(_DWORD *)(a2 + 4) = v8;
  *(void *)(a2 + 8) = v10;
  *(_DWORD *)(a2 + 16) = v11;
  return result;
}

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  int v11;
  uint64_t result;
  unsigned int v13;
  uint64_t v14;
  int v15;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  int v26;
  unsigned int OffsetAttribute2;
  int v29;
  unsigned int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  int v46;
  unsigned int v47;
  uint64_t v48;
  int v49;
  _OWORD v50[6];
  _OWORD v51[2];
  long long v52;
  long long v53;
  long long v54;
  long long v55;
  long long v56;
  long long v57;
  unsigned char v58[28];
  unint64_t v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  _DWORD v65[13];
  id v66;
  uint64_t v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;

  long long v73 = *MEMORY[0x263EF8340];
  type metadata accessor for RequiredTapCountWriter<TappableEvent>(0, &lazy cache variable for type metadata for RepeatGesture<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(void, uint64_t))type metadata accessor for RepeatGesture);
  int v21 = v3;
  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  LODWORD(v59) = 0;
  type metadata accessor for RequiredTapCountWriter<TappableEvent>(0, (unint64_t *)&lazy cache variable for type metadata for External<UInt32>, MEMORY[0x263F8E8F8], MEMORY[0x263F288C8]);
  lazy protocol witness table accessor for type External<UInt32> and conformance External<A>();
  int v25 = Attribute.init<A>(body:value:flags:update:)();
  uint64_t v4 = *(void *)a1;
  unsigned int v5 = *(void *)(a1 + 16);
  uint64_t v34 = *(void *)(a1 + 24);
  int v30 = *(_DWORD *)(a1 + 32);
  unsigned int v22 = *(_DWORD *)(a1 + 8);
  uint64_t v23 = *(_DWORD *)(a1 + 36);
  unsigned int v7 = *(void *)(a1 + 40);
  int v6 = *(void *)(a1 + 48);
  uint64_t v40 = *(_DWORD *)(a1 + 60);
  uint64_t v41 = *(_DWORD *)(a1 + 56);
  uint64_t v38 = *(_DWORD *)(a1 + 68);
  uint64_t v39 = *(_DWORD *)(a1 + 64);
  uint64_t v36 = *(_DWORD *)(a1 + 76);
  uint64_t v37 = *(_DWORD *)(a1 + 72);
  uint64_t v35 = *(_DWORD *)(a1 + 80);
  int v9 = *(void **)(a1 + 88);
  uint64_t v8 = *(void *)(a1 + 96);
  uint64_t v32 = *(_DWORD *)(a1 + 108);
  uint64_t v33 = *(_DWORD *)(a1 + 104);
  uint64_t v29 = *(_DWORD *)(a1 + 120);
  uint64_t v31 = *(_DWORD *)(a1 + 116);
  LODWORD(v59) = *(_DWORD *)(a1 + 112);
  int v24 = v59;
  HIDWORD(v59) = v25;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  outlined retain of _GestureInputs(a1);
  lazy protocol witness table accessor for type RepeatResetSeed and conformance RepeatResetSeed();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v10 = v9;
  swift_bridgeObjectRetain();
  int v26 = Attribute.init<A>(body:value:flags:update:)();
  *(void *)&uint64_t v52 = v4;
  DWORD2(v52) = v22;
  *(void *)&uint64_t v53 = v5;
  *((void *)&v53 + 1) = v34;
  *(void *)&uint64_t v54 = __PAIR64__(v23, v30);
  *((void *)&v54 + 1) = v7;
  *(void *)&uint64_t v55 = v6;
  *((void *)&v55 + 1) = __PAIR64__(v40, v41);
  *(void *)&uint64_t v56 = __PAIR64__(v38, v39);
  *((void *)&v56 + 1) = __PAIR64__(v36, v37);
  LODWORD(v57) = v35;
  *((void *)&v57 + 1) = v10;
  *(void *)uint64_t v58 = v8;
  *(_DWORD *)&v58[8] = v33;
  *(_DWORD *)&v58[12] = v32;
  *(_DWORD *)&v58[16] = v26;
  *(_DWORD *)&v58[20] = v31;
  *(_DWORD *)&v58[24] = v29;
  v50[2] = v54;
  v50[3] = v55;
  v50[0] = v52;
  v50[1] = v53;
  *(_OWORD *)((char *)v51 + 12) = *(_OWORD *)&v58[12];
  v50[5] = v57;
  v51[0] = *(_OWORD *)v58;
  v50[4] = v56;
  outlined retain of _GestureInputs((uint64_t)&v52);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  specialized closure #2 in static ModifierGesture._makeGesture(gesture:inputs:)((uint64_t)v50, (uint64_t)&v42);
  outlined release of _GestureInputs((uint64_t)&v52);
  uint64_t v59 = __PAIR64__(v42, OffsetAttribute2);
  uint64_t v60 = v22;
  uint64_t v61 = v24;
  LODWORD(v62) = v25;
  BYTE4(v62) = (v29 & 0x10) != 0;
  uint64_t v63 = 0;
  LOBYTE(v64) = 1;
  *(void *)uint64_t v65 = 0;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for RequiredTapCountWriter<TappableEvent>(0, &lazy cache variable for type metadata for GesturePhase<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(void, uint64_t))type metadata accessor for GesturePhase);
  type metadata accessor for RequiredTapCountWriter<TappableEvent>(0, &lazy cache variable for type metadata for RepeatPhase<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(void, uint64_t))type metadata accessor for RepeatPhase);
  lazy protocol witness table accessor for type RepeatGesture<TappableEvent> and conformance RepeatGesture<A>(&lazy protocol witness table cache variable for type RepeatPhase<TappableEvent> and conformance RepeatPhase<A>, &lazy cache variable for type metadata for RepeatPhase<TappableEvent>, (uint64_t (*)(void, uint64_t))type metadata accessor for RepeatPhase);
  uint64_t v11 = Attribute.init<A>(body:value:flags:update:)();
  uint64_t v59 = v4;
  uint64_t v60 = v22;
  uint64_t v62 = v5;
  uint64_t v63 = v34;
  uint64_t v64 = v30;
  v65[0] = v23;
  *(void *)&v65[1] = v7;
  *(void *)&uint64_t v65[3] = v6;
  v65[5] = v41;
  v65[6] = v40;
  v65[7] = v39;
  v65[8] = v38;
  v65[9] = v37;
  v65[10] = v36;
  v65[11] = v35;
  uint64_t v66 = v10;
  uint64_t v67 = v8;
  uint64_t v68 = v33;
  uint64_t v69 = v32;
  uint64_t v70 = v26;
  char v71 = v31;
  char v72 = v29;
  uint64_t result = outlined release of _GestureInputs((uint64_t)&v59);
  int v13 = v43;
  uint64_t v14 = v44;
  int v15 = v45;
  long long v46 = v11;
  long long v47 = v43;
  uint64_t v48 = v44;
  uint64_t v49 = v45;
  if ((v29 & 8) != 0)
  {
    uint64_t result = swift_conformsToProtocol2();
    if (!(result ? v21 : 0))
    {
      _gestureModifierProtocolDescriptor();
      unsigned int v17 = swift_conformsToProtocol();
      uint64_t v18 = v13 == *MEMORY[0x263F288F8];
      if (v13 == *MEMORY[0x263F288F8]) {
        uint64_t v19 = 0;
      }
      else {
        uint64_t v19 = v13;
      }
      LOBYTE(v42) = 1;
      if (v17) {
        uint64_t v20 = 2;
      }
      else {
        uint64_t v20 = 1;
      }
      uint64_t result = specialized _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(v20, 0x100000000, a1, v19 | ((unint64_t)v18 << 32), 0x100000000);
      uint64_t v11 = v46;
      int v13 = v47;
      uint64_t v14 = v48;
      int v15 = v49;
    }
  }
  *(_DWORD *)a2 = v11;
  *(_DWORD *)(a2 + 4) = v13;
  *(void *)(a2 + 8) = v14;
  *(_DWORD *)(a2 + 16) = v15;
  return result;
}

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  int v10;
  int v11;
  id v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int OffsetAttribute2;
  int v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  _OWORD v45[6];
  _OWORD v46[2];
  long long v47;
  long long v48;
  long long v49;
  long long v50;
  long long v51;
  long long v52;
  unsigned char v53[28];
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  int v69;
  id v70;
  uint64_t v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  uint64_t v77;

  long long v77 = *MEMORY[0x263EF8340];
  type metadata accessor for RequiredTapCountWriter<TappableEvent>(0, (unint64_t *)&lazy cache variable for type metadata for EventFilter<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(void, uint64_t))type metadata accessor for EventFilter);
  uint64_t v23 = v3;
  uint64_t v54 = __PAIR64__(*(_DWORD *)(a1 + 108), AGGraphCreateOffsetAttribute2());
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for RequiredTapCountWriter<TappableEvent>(0, &lazy cache variable for type metadata for EventFilterEvents<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(void, uint64_t))type metadata accessor for EventFilterEvents);
  lazy protocol witness table accessor for type RepeatGesture<TappableEvent> and conformance RepeatGesture<A>(&lazy protocol witness table cache variable for type EventFilterEvents<TappableEvent> and conformance EventFilterEvents<A>, &lazy cache variable for type metadata for EventFilterEvents<TappableEvent>, (uint64_t (*)(void, uint64_t))type metadata accessor for EventFilterEvents);
  int v24 = Attribute.init<A>(body:value:flags:update:)();
  uint64_t v4 = *(void *)a1;
  uint64_t v33 = *(_DWORD *)(a1 + 8);
  unsigned int v5 = *(void *)(a1 + 16);
  long long v44 = *(_DWORD *)(a1 + 28);
  uint64_t v42 = *(_DWORD *)(a1 + 24);
  uint64_t v43 = *(_DWORD *)(a1 + 32);
  int v6 = *(void *)(a1 + 40);
  unsigned int v7 = *(void *)(a1 + 48);
  uint64_t v40 = *(_DWORD *)(a1 + 56);
  uint64_t v41 = *(_DWORD *)(a1 + 36);
  uint64_t v38 = *(_DWORD *)(a1 + 64);
  uint64_t v39 = *(_DWORD *)(a1 + 60);
  uint64_t v36 = *(_DWORD *)(a1 + 72);
  uint64_t v37 = *(_DWORD *)(a1 + 68);
  uint64_t v34 = *(_DWORD *)(a1 + 80);
  uint64_t v35 = *(_DWORD *)(a1 + 76);
  uint64_t v8 = *(void **)(a1 + 88);
  int v9 = *(void *)(a1 + 96);
  uint64_t v10 = *(_DWORD *)(a1 + 112);
  uint64_t v11 = *(_DWORD *)(a1 + 116);
  uint64_t v31 = *(_DWORD *)(a1 + 120);
  uint64_t v32 = *(_DWORD *)(a1 + 104);
  outlined retain of _GestureInputs(a1);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  int v25 = v7;
  swift_bridgeObjectRetain();
  int v12 = v8;
  swift_bridgeObjectRetain();
  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  *(void *)&long long v47 = v4;
  uint64_t v27 = v6;
  int v28 = v4;
  *(void *)&uint64_t v48 = v5;
  int v26 = v5;
  DWORD2(v47) = v33;
  *((void *)&v48 + 1) = __PAIR64__(v44, v42);
  *(void *)&uint64_t v49 = __PAIR64__(v41, v43);
  *((void *)&v49 + 1) = v6;
  *(void *)&long long v50 = v7;
  *((void *)&v50 + 1) = __PAIR64__(v39, v40);
  *(void *)&uint64_t v51 = __PAIR64__(v37, v38);
  *((void *)&v51 + 1) = __PAIR64__(v35, v36);
  LODWORD(v52) = v34;
  *((void *)&v52 + 1) = v12;
  *(void *)uint64_t v53 = v9;
  *(_DWORD *)&v53[8] = v32;
  *(_DWORD *)&v53[12] = OffsetAttribute2;
  *(_DWORD *)&v53[16] = v10;
  *(_DWORD *)&v53[20] = v11;
  *(_DWORD *)&v53[24] = v31;
  v45[2] = v49;
  v45[3] = v50;
  v45[0] = v47;
  v45[1] = v48;
  *(_OWORD *)((char *)v46 + 12) = *(_OWORD *)&v53[12];
  v45[5] = v52;
  v46[0] = *(_OWORD *)v53;
  v45[4] = v51;
  outlined retain of _GestureInputs((uint64_t)&v47);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  AGGraphCreateOffsetAttribute2();
  int v13 = AGGraphCreateOffsetAttribute2();
  specialized static Map2Gesture._makeGesture(modifier:inputs:body:)(v13, (uint64_t)v45, (uint64_t)&v54);
  outlined release of _GestureInputs((uint64_t)&v47);
  uint64_t v14 = HIDWORD(v54);
  int v15 = v55;
  int v16 = v56;
  HIDWORD(v54) = v24;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for RequiredTapCountWriter<TappableEvent>(0, &lazy cache variable for type metadata for GesturePhase<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(void, uint64_t))type metadata accessor for GesturePhase);
  type metadata accessor for RequiredTapCountWriter<TappableEvent>(0, &lazy cache variable for type metadata for EventFilterPhase<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(void, uint64_t))type metadata accessor for EventFilterPhase);
  lazy protocol witness table accessor for type RepeatGesture<TappableEvent> and conformance RepeatGesture<A>(&lazy protocol witness table cache variable for type EventFilterPhase<TappableEvent> and conformance EventFilterPhase<A>, &lazy cache variable for type metadata for EventFilterPhase<TappableEvent>, (uint64_t (*)(void, uint64_t))type metadata accessor for EventFilterPhase);
  unsigned int v17 = Attribute.init<A>(body:value:flags:update:)();
  uint64_t v54 = v28;
  uint64_t v56 = v26;
  LODWORD(v55) = v33;
  uint64_t v57 = v42;
  uint64_t v58 = v44;
  uint64_t v61 = v27;
  uint64_t v62 = v25;
  uint64_t v59 = v43;
  uint64_t v60 = v41;
  uint64_t v63 = v40;
  uint64_t v64 = v39;
  uint64_t v65 = v38;
  uint64_t v66 = v37;
  uint64_t v67 = v36;
  uint64_t v68 = v35;
  uint64_t v69 = v34;
  uint64_t v70 = v12;
  char v71 = v9;
  char v72 = v32;
  long long v73 = OffsetAttribute2;
  long long v74 = v10;
  long long v75 = v11;
  long long v76 = v31;
  uint64_t result = outlined release of _GestureInputs((uint64_t)&v54);
  if ((v31 & 8) != 0)
  {
    uint64_t result = swift_conformsToProtocol2();
    if (!(result ? v23 : 0))
    {
      _gestureModifierProtocolDescriptor();
      uint64_t v20 = swift_conformsToProtocol();
      if (v14 == *MEMORY[0x263F288F8]) {
        int v21 = 0;
      }
      else {
        int v21 = v14;
      }
      if (v20) {
        unsigned int v22 = 2;
      }
      else {
        unsigned int v22 = 1;
      }
      uint64_t result = specialized _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(v22, 0x100000000, a1, v21 | ((unint64_t)(v14 == *MEMORY[0x263F288F8]) << 32), 0x100000000);
    }
  }
  *(_DWORD *)a2 = v17;
  *(_DWORD *)(a2 + 4) = v14;
  *(void *)(a2 + 8) = v15;
  *(_DWORD *)(a2 + 16) = v16;
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int OffsetAttribute2;
  unsigned int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t result;
  int v15;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  int v25;
  uint64_t v26;

  int v26 = *MEMORY[0x263EF8340];
  uint64_t v4 = MEMORY[0x263F8EF38];
  type metadata accessor for StateContainerGesture<DistanceGesture.StateType, SpatialEvent, CGFloat>(0, (unint64_t *)&lazy cache variable for type metadata for StateContainerGesture<DistanceGesture.StateType, SpatialEvent, CGFloat>, (uint64_t)&type metadata for SpatialEvent, MEMORY[0x263F8EF38], (uint64_t (*)(void, void *))type metadata accessor for StateContainerGesture);
  int v6 = v5;
  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  uint64_t v8 = AGGraphCreateOffsetAttribute2();
  specialized static EventListener._makeGesture(gesture:inputs:)(v8, a1, (uint64_t)&v18);
  int v9 = v18;
  uint64_t v10 = v19;
  uint64_t v11 = v20;
  int v12 = v21;
  int v13 = *(_DWORD *)(a1 + 112);
  uint64_t v18 = OffsetAttribute2;
  uint64_t v19 = v9;
  LODWORD(v20) = v13;
  int v21 = 0;
  unsigned int v22 = 0;
  uint64_t v23 = 1;
  int v24 = 0;
  int v25 = 0;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for RequiredTapCountWriter<TappableEvent>(0, &lazy cache variable for type metadata for GesturePhase<CGFloat>, v4, (uint64_t (*)(void, uint64_t))type metadata accessor for GesturePhase);
  type metadata accessor for StateContainerGesture<DistanceGesture.StateType, SpatialEvent, CGFloat>(0, &lazy cache variable for type metadata for StateContainerPhase<DistanceGesture.StateType, CGFloat, SpatialEvent>, v4, (uint64_t)&type metadata for SpatialEvent, (uint64_t (*)(void, void *))type metadata accessor for StateContainerPhase);
  lazy protocol witness table accessor for type StateContainerPhase<DistanceGesture.StateType, CGFloat, SpatialEvent> and conformance StateContainerPhase<A, B, C>();
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  int v15 = result;
  uint64_t v18 = result;
  uint64_t v19 = v10;
  uint64_t v20 = v11;
  LODWORD(v21) = v12;
  if ((*(unsigned char *)(a1 + 120) & 8) != 0)
  {
    uint64_t result = swift_conformsToProtocol2();
    if (!(result ? v6 : 0))
    {
      _gestureModifierProtocolDescriptor();
      if (swift_conformsToProtocol()) {
        unsigned int v17 = 2;
      }
      else {
        unsigned int v17 = 1;
      }
      uint64_t result = specialized _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(v17, 0x100000000, a1);
      int v15 = v18;
      uint64_t v10 = v19;
      uint64_t v11 = v20;
      int v12 = v21;
    }
  }
  *(_DWORD *)a2 = v15;
  *(_DWORD *)(a2 + 4) = v10;
  *(void *)(a2 + 8) = v11;
  *(_DWORD *)(a2 + 16) = v12;
  return result;
}

{
  unsigned int OffsetAttribute2;
  unsigned int v5;
  int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  ValueMetadata **v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;

  int v28 = *MEMORY[0x263EF8340];
  type metadata accessor for RequiredTapCountWriter<TappableEvent>(0, &lazy cache variable for type metadata for DependentGesture<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(void, uint64_t))type metadata accessor for DependentGesture);
  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  AGGraphCreateOffsetAttribute2();
  specialized static ModifierGesture._makeGesture(gesture:inputs:)(a1, (uint64_t)&v22);
  unsigned int v5 = v22;
  uint64_t v19 = v23;
  uint64_t v20 = v24;
  int v21 = v25;
  int v6 = *(_DWORD *)(a1 + 116);
  unsigned int v22 = OffsetAttribute2;
  uint64_t v23 = v5;
  LODWORD(v24) = v6;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for RequiredTapCountWriter<TappableEvent>(0, &lazy cache variable for type metadata for GesturePhase<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(void, uint64_t))type metadata accessor for GesturePhase);
  type metadata accessor for RequiredTapCountWriter<TappableEvent>(0, &lazy cache variable for type metadata for DependentPhase<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(void, uint64_t))type metadata accessor for DependentPhase);
  lazy protocol witness table accessor for type RepeatGesture<TappableEvent> and conformance RepeatGesture<A>(&lazy protocol witness table cache variable for type DependentPhase<TappableEvent> and conformance DependentPhase<A>, &lazy cache variable for type metadata for DependentPhase<TappableEvent>, (uint64_t (*)(void, uint64_t))type metadata accessor for DependentPhase);
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  uint64_t v18 = result;
  uint64_t v8 = *(void *)(a1 + 96);
  int v26 = v8;
  uint64_t v27 = *(_DWORD *)(a1 + 104);
  int v9 = *(void *)(v8 + 16);
  if (v9)
  {
    uint64_t v10 = (ValueMetadata **)(v8 + 32);
    while (*v10 != &type metadata for GestureDependency.Key)
    {
      v10 += 2;
      if (!--v9) {
        goto LABEL_7;
      }
    }
    outlined retain of LinearGradient((uint64_t)&v26);
    uint64_t v11 = AGGraphCreateOffsetAttribute2();
    LOBYTE(v22) = 0;
    PreferencesOutputs.subscript.setter(v11, &type metadata for GestureDependency.Key, (uint64_t)&protocol witness table for GestureDependency.Key);
    outlined release of LinearGradient((uint64_t)&v26);
    uint64_t result = v18;
  }
LABEL_7:
  int v12 = v19;
  int v13 = v20;
  uint64_t v14 = v21;
  unsigned int v22 = result;
  uint64_t v23 = v19;
  int v24 = v20;
  int v25 = v21;
  if ((*(unsigned char *)(a1 + 120) & 8) != 0)
  {
    _gestureModifierProtocolDescriptor();
    int v15 = swift_conformsToProtocol();
    if (v19 == *MEMORY[0x263F288F8]) {
      int v16 = 0;
    }
    else {
      int v16 = v19;
    }
    if (v15) {
      unsigned int v17 = 2;
    }
    else {
      unsigned int v17 = 1;
    }
    specialized _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(v17, 0x100000000, a1, v16 | ((unint64_t)(v19 == *MEMORY[0x263F288F8]) << 32), 0x100000000);
    uint64_t result = v22;
    int v12 = v23;
    int v13 = v24;
    uint64_t v14 = v25;
  }
  *(_DWORD *)a2 = result;
  *(_DWORD *)(a2 + 4) = v12;
  *(void *)(a2 + 8) = v13;
  *(_DWORD *)(a2 + 16) = v14;
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  int OffsetAttribute2;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t result;
  int v14;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;

  int v24 = *MEMORY[0x263EF8340];
  type metadata accessor for SingleTapGesture<TappableEvent>(0, &lazy cache variable for type metadata for MapGesture<TappableEvent, TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for MapGesture);
  unsigned int v5 = v4;
  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  unsigned int v7 = AGGraphCreateOffsetAttribute2();
  specialized static EventListener._makeGesture(gesture:inputs:)(v7, a1, (uint64_t)&v20);
  uint64_t v8 = v20;
  int v9 = v21;
  uint64_t v10 = v22;
  uint64_t v11 = v23;
  int v12 = *(_DWORD *)(a1 + 112);
  uint64_t v20 = OffsetAttribute2;
  int v21 = v8;
  unsigned int v22 = v12;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for RequiredTapCountWriter<TappableEvent>(0, &lazy cache variable for type metadata for GesturePhase<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(void, uint64_t))type metadata accessor for GesturePhase);
  type metadata accessor for SingleTapGesture<TappableEvent>(0, &lazy cache variable for type metadata for MapPhase<TappableEvent, TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for MapPhase);
  lazy protocol witness table accessor for type MapPhase<TappableEvent, TappableEvent> and conformance MapPhase<A, B>();
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  uint64_t v14 = result;
  uint64_t v20 = result;
  int v21 = v9;
  unsigned int v22 = v10;
  uint64_t v23 = v11;
  if ((*(unsigned char *)(a1 + 120) & 8) != 0)
  {
    uint64_t result = swift_conformsToProtocol2();
    if (!(result ? v5 : 0))
    {
      int v16 = *MEMORY[0x263F288F8];
      _gestureModifierProtocolDescriptor();
      unsigned int v17 = swift_conformsToProtocol();
      if (v9 == v16) {
        uint64_t v18 = 0;
      }
      else {
        uint64_t v18 = v9;
      }
      if (v17) {
        uint64_t v19 = 2;
      }
      else {
        uint64_t v19 = 1;
      }
      uint64_t result = specialized _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(v19, 0x100000000, a1, v18 | ((unint64_t)(v9 == v16) << 32), 0x100000000);
      uint64_t v14 = v20;
      int v9 = v21;
      uint64_t v10 = v22;
      uint64_t v11 = v23;
    }
  }
  *(_DWORD *)a2 = v14;
  *(_DWORD *)(a2 + 4) = v9;
  *(void *)(a2 + 8) = v10;
  *(_DWORD *)(a2 + 16) = v11;
  return result;
}

double specialized static ModifierGesture._makeGesture(gesture:inputs:)@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  type metadata accessor for RequiredTapCountWriter<TappableEvent>(0, &lazy cache variable for type metadata for CoordinateSpaceGesture<CGFloat>, MEMORY[0x263F8EF38], (uint64_t (*)(void, uint64_t))type metadata accessor for CoordinateSpaceGesture);
  uint64_t v24 = v3;
  unsigned int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  uint64_t v28 = *(void *)(a1 + 88);
  uint64_t v5 = *(void *)a1;
  int v6 = *(_DWORD *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  unsigned int v8 = *(_DWORD *)(a1 + 24);
  unsigned int v9 = *(_DWORD *)(a1 + 28);
  unsigned int v11 = *(_DWORD *)(a1 + 32);
  unsigned int v10 = *(_DWORD *)(a1 + 36);
  unsigned int v30 = OffsetAttribute2;
  uint64_t v25 = *(void *)(a1 + 40);
  uint64_t v35 = *(void *)(a1 + 48);
  unsigned int v12 = *(_DWORD *)(a1 + 56);
  int v31 = v6;
  unsigned int v32 = v12;
  unsigned int v26 = *(_DWORD *)(a1 + 60);
  unsigned int v39 = *(_DWORD *)(a1 + 72);
  unsigned int v40 = *(_DWORD *)(a1 + 68);
  unsigned int v38 = *(_DWORD *)(a1 + 76);
  unsigned int v36 = *(_DWORD *)(a1 + 64);
  int v37 = *(_DWORD *)(a1 + 80);
  int v33 = *(_DWORD *)(a1 + 120);
  unsigned int v29 = *(_DWORD *)(a1 + 108);
  outlined retain of _GestureInputs(a1);
  AGGraphClearUpdate();
  id v27 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  *(void *)&long long v50 = v5;
  *(void *)&long long v51 = v7;
  DWORD2(v50) = v6;
  *((void *)&v51 + 1) = __PAIR64__(v9, v8);
  *(void *)&long long v52 = __PAIR64__(v10, v11);
  *((void *)&v52 + 1) = v25;
  *(void *)&long long v53 = v35;
  *((void *)&v53 + 1) = __PAIR64__(v26, v12);
  *(void *)&long long v54 = __PAIR64__(v40, v36);
  *((void *)&v54 + 1) = __PAIR64__(v38, v39);
  LODWORD(v55) = v37;
  swift_beginAccess();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unsigned int v13 = CachedEnvironment.animatedPosition(for:)((uint64_t *)&v50);
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  uint64_t v58 = 0;
  memset(v57, 0, sizeof(v57));
  outlined retain of _GestureInputs(a1);
  specialized _GestureInputs.intern<A>(_:id:)((uint64_t)v57, 0);
  AGGraphClearUpdate();
  id v14 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  unsigned int IndirectAttribute2 = AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  outlined release of _GestureInputs(a1);
  *(void *)&long long v50 = __PAIR64__(v29, v30);
  *((void *)&v50 + 1) = __PAIR64__(IndirectAttribute2, v13);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for [EventID : EventType]();
  type metadata accessor for RequiredTapCountWriter<TappableEvent>(0, &lazy cache variable for type metadata for CoordinateSpaceEvents<CGFloat>, MEMORY[0x263F8EF38], (uint64_t (*)(void, uint64_t))type metadata accessor for CoordinateSpaceEvents);
  lazy protocol witness table accessor for type CoordinateSpaceEvents<CGFloat> and conformance CoordinateSpaceEvents<A>();
  int v16 = Attribute.init<A>(body:value:flags:update:)();
  uint64_t v17 = *(void *)(a1 + 96);
  int v18 = *(_DWORD *)(a1 + 104);
  *(void *)&long long v43 = v5;
  DWORD2(v43) = v31;
  *(void *)&long long v44 = v7;
  *((void *)&v44 + 1) = __PAIR64__(v9, v8);
  *(void *)&long long v45 = __PAIR64__(v10, v11);
  *((void *)&v45 + 1) = v25;
  *(void *)&long long v46 = v35;
  *((void *)&v46 + 1) = __PAIR64__(v26, v32);
  *(void *)&long long v47 = __PAIR64__(v40, v36);
  *((void *)&v47 + 1) = __PAIR64__(v38, v39);
  LODWORD(v48) = v37;
  *((void *)&v48 + 1) = v28;
  *(void *)uint64_t v49 = v17;
  *(_DWORD *)&v49[8] = v18;
  *(_DWORD *)&v49[12] = v16;
  *(void *)&v49[16] = *(void *)(a1 + 112);
  *(_DWORD *)&v49[24] = v33 | 1;
  long long v52 = v45;
  long long v53 = v46;
  long long v50 = v43;
  long long v51 = v44;
  *(_OWORD *)((char *)v56 + 12) = *(_OWORD *)&v49[12];
  long long v55 = v48;
  v56[0] = *(_OWORD *)v49;
  long long v54 = v47;
  specialized closure #2 in static ModifierGesture._makeGesture(gesture:inputs:)((uint64_t)&v50, (uint64_t)v41);
  outlined release of _GestureInputs((uint64_t)&v43);
  if ((v33 & 8) != 0 && !(swift_conformsToProtocol2() ? v24 : 0))
  {
    _gestureModifierProtocolDescriptor();
    if (swift_conformsToProtocol()) {
      uint64_t v20 = 2;
    }
    else {
      uint64_t v20 = 1;
    }
    specialized _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(v20, 0x100000000, a1);
  }
  uint64_t v21 = v41[1];
  int v22 = v42;
  double result = *(double *)v41;
  *(void *)a2 = v41[0];
  *(void *)(a2 + 8) = v21;
  *(_DWORD *)(a2 + 16) = v22;
  return result;
}

uint64_t specialized static ModifierGesture._makeGesture(gesture:inputs:)@<X0>(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  type metadata accessor for RequiredTapCountWriter<TappableEvent>(0, &lazy cache variable for type metadata for DurationGesture<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(void, uint64_t))type metadata accessor for DurationGesture);
  uint64_t v17 = v3;
  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  unsigned int v5 = AGGraphCreateOffsetAttribute2();
  specialized static EventListener._makeGesture(gesture:inputs:)(v5, (uint64_t)a1, (uint64_t)&v19);
  int v6 = v19;
  int v7 = v20;
  unint64_t v8 = v21;
  int v9 = v22;
  unsigned int v10 = a1[2];
  unsigned int v11 = a1[28];
  int v12 = a1[30];
  int v19 = OffsetAttribute2;
  int v20 = v6;
  unint64_t v21 = __PAIR64__(v11, v10);
  LOBYTE(v22) = (v12 & 0x10) != 0;
  uint64_t v23 = 0;
  char v24 = 1;
  int v25 = 0;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for RequiredTapCountWriter<TappableEvent>(0, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<Double>, MEMORY[0x263F8D538], (uint64_t (*)(void, uint64_t))type metadata accessor for GesturePhase);
  type metadata accessor for RequiredTapCountWriter<TappableEvent>(0, &lazy cache variable for type metadata for DurationPhase<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(void, uint64_t))type metadata accessor for DurationPhase);
  lazy protocol witness table accessor for type RepeatGesture<TappableEvent> and conformance RepeatGesture<A>(&lazy protocol witness table cache variable for type DurationPhase<TappableEvent> and conformance DurationPhase<A>, &lazy cache variable for type metadata for DurationPhase<TappableEvent>, (uint64_t (*)(void, uint64_t))type metadata accessor for DurationPhase);
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  int v14 = result;
  int v19 = result;
  int v20 = v7;
  unint64_t v21 = v8;
  int v22 = v9;
  if ((v12 & 8) != 0)
  {
    uint64_t result = swift_conformsToProtocol2();
    if (!(result ? v17 : 0))
    {
      _gestureModifierProtocolDescriptor();
      if (swift_conformsToProtocol()) {
        uint64_t v16 = 2;
      }
      else {
        uint64_t v16 = 1;
      }
      uint64_t result = specialized _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(v16, 0x100000000, (uint64_t)a1);
      int v14 = v19;
      int v7 = v20;
      unint64_t v8 = v21;
      int v9 = v22;
    }
  }
  *(_DWORD *)a2 = v14;
  *(_DWORD *)(a2 + 4) = v7;
  *(void *)(a2 + 8) = v8;
  *(_DWORD *)(a2 + 16) = v9;
  return result;
}

double specialized closure #2 in static ModifierGesture._makeGesture(gesture:inputs:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  type metadata accessor for SingleTapGesture<TappableEvent>(0, &lazy cache variable for type metadata for SingleTapGesture<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t)&protocol witness table for TappableEvent, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SingleTapGesture);
  uint64_t v6 = v5;
  specialized static Gesture<>._makeGesture(gesture:inputs:)(OffsetAttribute2, (long long *)a1, (uint64_t)v14);
  if ((*(unsigned char *)(a1 + 120) & 8) != 0 && !(swift_conformsToProtocol2() ? v6 : 0))
  {
    _gestureModifierProtocolDescriptor();
    uint64_t v8 = swift_conformsToProtocol();
    if (HIDWORD(v14[0]) == *MEMORY[0x263F288F8]) {
      uint64_t v9 = 0;
    }
    else {
      uint64_t v9 = HIDWORD(v14[0]);
    }
    if (v8) {
      uint64_t v10 = 2;
    }
    else {
      uint64_t v10 = 1;
    }
    specialized _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(v10, 0x100000000, a1, v9 | ((unint64_t)(HIDWORD(v14[0]) == *MEMORY[0x263F288F8]) << 32), 0x100000000);
  }
  uint64_t v11 = v14[1];
  int v12 = v15;
  double result = *(double *)v14;
  *(void *)a2 = v14[0];
  *(void *)(a2 + 8) = v11;
  *(_DWORD *)(a2 + 16) = v12;
  return result;
}

{
  int OffsetAttribute2;
  uint64_t v6;
  uint64_t v7;
  int v8;
  double result;
  void v10[2];
  int v11;

  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  specialized static Gesture<>._makeGesture(gesture:inputs:)(OffsetAttribute2, (long long *)a1, (uint64_t)v10);
  if ((*(unsigned char *)(a1 + 120) & 8) != 0 && !(swift_conformsToProtocol2() ? &type metadata for DistanceGesture : 0))
  {
    _gestureModifierProtocolDescriptor();
    if (swift_conformsToProtocol()) {
      uint64_t v6 = 2;
    }
    else {
      uint64_t v6 = 1;
    }
    specialized _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(v6, 0x100000000, a1);
  }
  int v7 = v10[1];
  uint64_t v8 = v11;
  double result = *(double *)v10;
  *(void *)a2 = v10[0];
  *(void *)(a2 + 8) = v7;
  *(_DWORD *)(a2 + 16) = v8;
  return result;
}

uint64_t specialized static EventListener._makeGesture(gesture:inputs:)@<X0>(unsigned int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  unsigned int v6 = *(_DWORD *)(a2 + 108);
  long long v7 = *(_OWORD *)(a2 + 48);
  long long v30 = *(_OWORD *)(a2 + 32);
  long long v31 = v7;
  long long v32 = *(_OWORD *)(a2 + 64);
  int v33 = *(_DWORD *)(a2 + 80);
  long long v8 = *(_OWORD *)(a2 + 16);
  long long v28 = *(_OWORD *)a2;
  long long v29 = v8;
  AGGraphClearUpdate();
  id v9 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  long long v24 = v30;
  long long v25 = v31;
  long long v26 = v32;
  int v27 = v33;
  long long v22 = v28;
  long long v23 = v29;
  swift_beginAccess();
  outlined retain of _ViewInputs((uint64_t)&v28);
  unsigned int v10 = CachedEnvironment.animatedPosition(for:)((uint64_t *)&v22);
  swift_endAccess();
  outlined release of _ViewInputs((uint64_t)&v28);
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  uint64_t v35 = 0;
  memset(v34, 0, sizeof(v34));
  outlined retain of _GestureInputs(a2);
  specialized _GestureInputs.intern<A>(_:id:)((uint64_t)v34, 0);
  AGGraphClearUpdate();
  id v11 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  unsigned int IndirectAttribute2 = AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  outlined release of _GestureInputs(a2);
  int v13 = *(_DWORD *)(a2 + 112);
  int v14 = *(_DWORD *)(a2 + 120);
  *(void *)&long long v22 = __PAIR64__(v6, a1);
  *((void *)&v22 + 1) = __PAIR64__(IndirectAttribute2, v10);
  LODWORD(v23) = v13;
  BYTE4(v23) = v14 & 1;
  BYTE5(v23) = (v14 & 2) != 0;
  *((void *)&v23 + 1) = 0;
  *(void *)&long long v24 = 0;
  DWORD2(v24) = 0;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for SingleTapGesture<TappableEvent>(0, &lazy cache variable for type metadata for EventListenerPhase<SpatialEvent>.Value, (uint64_t)&type metadata for SpatialEvent, (uint64_t)&protocol witness table for SpatialEvent, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EventListenerPhase.Value);
  type metadata accessor for SingleTapGesture<TappableEvent>(0, &lazy cache variable for type metadata for EventListenerPhase<SpatialEvent>, (uint64_t)&type metadata for SpatialEvent, (uint64_t)&protocol witness table for SpatialEvent, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EventListenerPhase);
  lazy protocol witness table accessor for type EventListenerPhase<SpatialEvent> and conformance EventListenerPhase<A>();
  LODWORD(v9) = Attribute.init<A>(body:value:flags:update:)();
  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  int v16 = *MEMORY[0x263F288F8];
  *(void *)(a3 + 8) = MEMORY[0x263F8EE78];
  *(_DWORD *)(a3 + 16) = 0;
  *(_DWORD *)a3 = OffsetAttribute2;
  *(_DWORD *)(a3 + 4) = v16;
  type metadata accessor for SingleTapGesture<TappableEvent>(0, &lazy cache variable for type metadata for EventListener<SpatialEvent>, (uint64_t)&type metadata for SpatialEvent, (uint64_t)&protocol witness table for SpatialEvent, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EventListener);
  uint64_t KeyPath = swift_getKeyPath();
  LODWORD(v22) = v9;
  *((void *)&v22 + 1) = KeyPath;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for ArrayWith2Inline<(String, String)>();
  type metadata accessor for Focus<EventListenerPhase<SpatialEvent>.Value, ArrayWith2Inline<(String, String)>>(0, &lazy cache variable for type metadata for Focus<EventListenerPhase<SpatialEvent>.Value, ArrayWith2Inline<(String, String)>>, &lazy cache variable for type metadata for EventListenerPhase<SpatialEvent>.Value, (uint64_t)&type metadata for SpatialEvent, (uint64_t)&protocol witness table for SpatialEvent);
  lazy protocol witness table accessor for type Focus<EventListenerPhase<SpatialEvent>.Value, ArrayWith2Inline<(String, String)>> and conformance Focus<A, B>();
  unsigned int v18 = Attribute.init<A>(body:value:flags:update:)();
  uint64_t result = swift_release();
  if ((v14 & 8) != 0)
  {
    _gestureModifierProtocolDescriptor();
    uint64_t v20 = swift_conformsToProtocol();
    LOBYTE(v22) = 1;
    if (v20) {
      uint64_t v21 = 2;
    }
    else {
      uint64_t v21 = 1;
    }
    return specialized _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(v21, v18, a2);
  }
  return result;
}

{
  unsigned int v6;
  long long v7;
  long long v8;
  id v9;
  unsigned int v10;
  id v11;
  unsigned int IndirectAttribute2;
  int v13;
  int v14;
  int OffsetAttribute2;
  int v16;
  uint64_t KeyPath;
  unsigned int v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  int v29;
  long long v30;
  long long v31;
  long long v32;
  long long v33;
  long long v34;
  int v35;
  _OWORD v36[2];
  uint64_t v37;
  uint64_t v38;

  unsigned int v38 = *MEMORY[0x263EF8340];
  unsigned int v6 = *(_DWORD *)(a2 + 108);
  long long v7 = *(_OWORD *)(a2 + 48);
  long long v32 = *(_OWORD *)(a2 + 32);
  int v33 = v7;
  uint64_t v34 = *(_OWORD *)(a2 + 64);
  uint64_t v35 = *(_DWORD *)(a2 + 80);
  long long v8 = *(_OWORD *)(a2 + 16);
  long long v30 = *(_OWORD *)a2;
  long long v31 = v8;
  AGGraphClearUpdate();
  id v9 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  long long v26 = v32;
  int v27 = v33;
  long long v28 = v34;
  long long v29 = v35;
  long long v24 = v30;
  long long v25 = v31;
  swift_beginAccess();
  outlined retain of _ViewInputs((uint64_t)&v30);
  unsigned int v10 = CachedEnvironment.animatedPosition(for:)((uint64_t *)&v24);
  swift_endAccess();
  outlined release of _ViewInputs((uint64_t)&v30);
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  int v37 = 0;
  memset(v36, 0, sizeof(v36));
  outlined retain of _GestureInputs(a2);
  specialized _GestureInputs.intern<A>(_:id:)((uint64_t)v36, 0);
  AGGraphClearUpdate();
  id v11 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  unsigned int IndirectAttribute2 = AGGraphCreateIndirectAttribute2();
  AGGraphSetIndirectAttribute();
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  outlined release of _GestureInputs(a2);
  int v13 = *(_DWORD *)(a2 + 112);
  int v14 = *(_DWORD *)(a2 + 120);
  *(void *)&long long v24 = __PAIR64__(v6, a1);
  *((void *)&v24 + 1) = __PAIR64__(IndirectAttribute2, v10);
  LODWORD(v25) = v13;
  BYTE4(v25) = v14 & 1;
  BYTE5(v25) = (v14 & 2) != 0;
  *((void *)&v25 + 1) = 0;
  *(void *)&long long v26 = 0;
  DWORD2(v26) = 0;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for SingleTapGesture<TappableEvent>(0, &lazy cache variable for type metadata for EventListenerPhase<TappableEvent>.Value, (uint64_t)&type metadata for TappableEvent, (uint64_t)&protocol witness table for TappableEvent, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EventListenerPhase.Value);
  type metadata accessor for SingleTapGesture<TappableEvent>(0, &lazy cache variable for type metadata for EventListenerPhase<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t)&protocol witness table for TappableEvent, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EventListenerPhase);
  lazy protocol witness table accessor for type EventListenerPhase<TappableEvent> and conformance EventListenerPhase<A>();
  LODWORD(v9) = Attribute.init<A>(body:value:flags:update:)();
  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  int v16 = *MEMORY[0x263F288F8];
  *(void *)(a3 + 8) = MEMORY[0x263F8EE78];
  *(_DWORD *)(a3 + 16) = 0;
  *(_DWORD *)a3 = OffsetAttribute2;
  *(_DWORD *)(a3 + 4) = v16;
  type metadata accessor for SingleTapGesture<TappableEvent>(0, &lazy cache variable for type metadata for EventListener<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t)&protocol witness table for TappableEvent, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EventListener);
  uint64_t KeyPath = swift_getKeyPath();
  LODWORD(v24) = v9;
  *((void *)&v24 + 1) = KeyPath;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for ArrayWith2Inline<(String, String)>();
  type metadata accessor for Focus<EventListenerPhase<SpatialEvent>.Value, ArrayWith2Inline<(String, String)>>(0, &lazy cache variable for type metadata for Focus<EventListenerPhase<TappableEvent>.Value, ArrayWith2Inline<(String, String)>>, &lazy cache variable for type metadata for EventListenerPhase<TappableEvent>.Value, (uint64_t)&type metadata for TappableEvent, (uint64_t)&protocol witness table for TappableEvent);
  lazy protocol witness table accessor for type Focus<EventListenerPhase<TappableEvent>.Value, ArrayWith2Inline<(String, String)>> and conformance Focus<A, B>();
  unsigned int v18 = Attribute.init<A>(body:value:flags:update:)();
  uint64_t result = swift_release();
  if ((v14 & 8) != 0)
  {
    _gestureModifierProtocolDescriptor();
    uint64_t v20 = swift_conformsToProtocol();
    LODWORD(v21) = *(_DWORD *)(a3 + 4);
    long long v22 = v21 == v16;
    if (v21 == v16) {
      uint64_t v21 = 0;
    }
    else {
      uint64_t v21 = v21;
    }
    LOBYTE(v24) = 1;
    if (v20) {
      long long v23 = 2;
    }
    else {
      long long v23 = 1;
    }
    return specialized _GestureOutputs.reallyWrap<A>(_:kind:properties:inputs:data:)(v23, v18, a2, v21 | ((unint64_t)v22 << 32), 0x100000000);
  }
  return result;
}

uint64_t TapGesture.count.getter()
{
  return *(void *)v0;
}

uint64_t TapGesture.count.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*TapGesture.count.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

SwiftUI::TapGesture __swiftcall TapGesture.init(count:)(SwiftUI::TapGesture count)
{
  v1->count = count.count;
  return count;
}

uint64_t static TapGesture._makeGesture(gesture:inputs:)@<X0>(int *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  int v4 = *a1;
  long long v5 = a2[5];
  v15[4] = a2[4];
  v15[5] = v5;
  v16[0] = a2[6];
  *(_OWORD *)((char *)v16 + 12) = *(_OWORD *)((char *)a2 + 108);
  long long v6 = a2[1];
  v15[0] = *a2;
  v15[1] = v6;
  long long v7 = a2[3];
  v15[2] = a2[2];
  v15[3] = v7;
  v12[0] = v4;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for ModifierGesture<RequiredTapCountWriter<TappableEvent>, ModifierGesture<CategoryGesture<TappableEvent>, ModifierGesture<RepeatGesture<TappableEvent>, SingleTapGesture<TappableEvent>>>>();
  lazy protocol witness table accessor for type TapGesture.Child and conformance TapGesture.Child();
  Attribute.init<A>(body:value:flags:update:)();
  specialized static ModifierGesture._makeGesture(gesture:inputs:)((uint64_t)v15, (uint64_t)v12);
  int v8 = v12[1];
  uint64_t v9 = v13;
  int v10 = v14;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for RequiredTapCountWriter<TappableEvent>(0, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<()>, MEMORY[0x263F8EE60] + 8, (uint64_t (*)(void, uint64_t))type metadata accessor for GesturePhase);
  lazy protocol witness table accessor for type TapGesture.Phase and conformance TapGesture.Phase();
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  *(_DWORD *)a3 = result;
  *(_DWORD *)(a3 + 4) = v8;
  *(void *)(a3 + 8) = v9;
  *(_DWORD *)(a3 + 16) = v10;
  return result;
}

uint64_t *TapGesture.Child.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (uint64_t *)AGGraphGetValue();
  uint64_t v3 = *result;
  if (*result <= 0)
  {
    uint64_t result = (uint64_t *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *(void *)a1 = v3;
    *(void *)(a1 + 8) = 0x3FD6666666666666;
    *(void *)(a1 + 16) = 8 * (v3 == 1);
    *(unsigned char *)(a1 + 24) = 1;
    *(void *)(a1 + 32) = v3;
    *(unsigned char *)(a1 + 40) = 0;
  }
  return result;
}

double protocol witness for static Rule.initialValue.getter in conformance TapGesture.Child@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)&double result = 2;
  *(_OWORD *)(a1 + 24) = xmmword_2461BAA80;
  *(unsigned char *)(a1 + 40) = 0;
  return result;
}

uint64_t *protocol witness for Rule.value.getter in conformance TapGesture.Child@<X0>(uint64_t a1@<X8>)
{
  return TapGesture.Child.value.getter(a1);
}

uint64_t protocol witness for Rule.value.getter in conformance TapGesture.Phase@<X0>(unsigned char *a1@<X8>)
{
  type metadata accessor for RequiredTapCountWriter<TappableEvent>(0, &lazy cache variable for type metadata for GesturePhase<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(void, uint64_t))type metadata accessor for GesturePhase);
  uint64_t Value = AGGraphGetValue();
  uint64_t v3 = *(void *)Value;
  uint64_t v4 = *(void *)(Value + 8);
  uint64_t v5 = *(void *)(Value + 16);
  char v6 = *(unsigned char *)(Value + 24);
  outlined copy of GesturePhase<TappableEvent>(*(void *)Value, v4, v5, v6);
  specialized GesturePhase.withValue<A>(_:)(v3, v4, v5, v6, a1);

  return outlined consume of GesturePhase<TappableEvent>(v3, v4, v5, v6);
}

void one-time initialization function for tapMovementThreshold()
{
  tapMovementThreshold = 0x4046800000000000;
}

double tapDurationThreshold.getter()
{
  return 0.75;
}

uint64_t SingleTapGesture.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (one-time initialization token for tapMovementThreshold != -1) {
    swift_once();
  }
  uint64_t v3 = tapMovementThreshold;
  uint64_t v58 = 0;
  long long v56 = 0u;
  long long v57 = 0u;
  char v59 = 2;
  outlined init with copy of CoordinateSpace((uint64_t)&v56, (uint64_t)&v47);
  outlined init with copy of CoordinateSpaceGesture<CGFloat>((uint64_t)&v47, (uint64_t)&v61);
  v60[0] = 0;
  v60[1] = v3;
  outlined destroy of CoordinateSpaceGesture<CGFloat>((uint64_t)&v47);
  outlined destroy of CoordinateSpace((uint64_t)&v56);
  uint64_t v4 = *(void *)(a1 + 16);
  EventListener.init(ignoresOtherEvents:)(0, &v56);
  v31[0] = v56;
  uint64_t v5 = type metadata accessor for EventListener();
  uint64_t WitnessTable = swift_getWitnessTable();
  Gesture.discrete(_:)(1, v5, WitnessTable, (uint64_t)&v47);
  char v43 = v47;
  uint64_t v44 = v48;
  uint64_t v45 = v49;
  v40[0] = 3;
  uint64_t v7 = type metadata accessor for MapGesture();
  uint64_t v8 = swift_getWitnessTable();
  *(void *)&long long v56 = v7;
  *((void *)&v56 + 1) = v5;
  *(void *)&long long v57 = v8;
  *((void *)&v57 + 1) = WitnessTable;
  uint64_t v9 = type metadata accessor for ModifierGesture();
  uint64_t v10 = swift_getWitnessTable();
  Gesture.dependency(_:)(v40, v9, (uint64_t)v31);
  swift_release();
  char v43 = v31[0];
  uint64_t v44 = v32;
  uint64_t v45 = v33;
  char v46 = v34;
  v40[0] = 0;
  long long v41 = xmmword_2461BE2C0;
  char v42 = 0;
  uint64_t v11 = type metadata accessor for DependentGesture();
  uint64_t v12 = swift_getWitnessTable();
  *(void *)&long long v56 = v11;
  *((void *)&v56 + 1) = v9;
  *(void *)&long long v57 = v12;
  *((void *)&v57 + 1) = v10;
  uint64_t v13 = type metadata accessor for ModifierGesture();
  type metadata accessor for ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>();
  uint64_t v15 = v14;
  uint64_t v16 = swift_getWitnessTable();
  uint64_t v17 = lazy protocol witness table accessor for type ModifierGesture<RepeatGesture<TappableEvent>, SingleTapGesture<TappableEvent>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>);
  Gesture.gated<A>(by:)((uint64_t)v40, v13, v15, v16, v17, (uint64_t)&v47);
  swift_release();
  v31[0] = v47;
  uint64_t v32 = v48;
  uint64_t v33 = v49;
  char v34 = v50;
  char v35 = v51;
  long long v36 = v52;
  char v37 = v53;
  uint64_t v38 = v54;
  uint64_t v39 = v55;
  *(void *)&long long v56 = v4;
  *((void *)&v56 + 1) = v15;
  *(void *)&long long v57 = v4;
  *((void *)&v57 + 1) = v17;
  uint64_t v18 = type metadata accessor for Map2Gesture();
  uint64_t v19 = swift_getWitnessTable();
  *(void *)&long long v56 = v18;
  *((void *)&v56 + 1) = v13;
  *(void *)&long long v57 = v19;
  *((void *)&v57 + 1) = v16;
  uint64_t v20 = type metadata accessor for ModifierGesture();
  type metadata accessor for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>();
  uint64_t v22 = v21;
  uint64_t v23 = swift_getWitnessTable();
  uint64_t v24 = lazy protocol witness table accessor for type ModifierGesture<RepeatGesture<TappableEvent>, SingleTapGesture<TappableEvent>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>);
  Gesture.gated<A>(by:)((uint64_t)v60, v20, v22, v23, v24, (uint64_t)&v56);
  swift_release();
  swift_release();
  uint64_t v47 = v4;
  uint64_t v48 = v22;
  uint64_t v49 = v4;
  uint64_t v50 = v24;
  uint64_t v25 = type metadata accessor for Map2Gesture();
  uint64_t v26 = swift_getWitnessTable();
  uint64_t v47 = v25;
  uint64_t v48 = v20;
  uint64_t v49 = v26;
  uint64_t v50 = v23;
  uint64_t v27 = type metadata accessor for ModifierGesture();
  uint64_t v28 = swift_getWitnessTable();
  Gesture.eventFilter<A>(forType:_:)((uint64_t)closure #1 in SingleTapGesture.body.getter, 0, v27, (uint64_t)&type metadata for MouseEvent, v28, (uint64_t)&protocol witness table for MouseEvent, a2);
  (*(void (**)(long long *, uint64_t))(*(void *)(v27 - 8) + 8))(&v56, v27);
  return outlined destroy of ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>((uint64_t)v60);
}

BOOL closure #1 in SingleTapGesture.body.getter(uint64_t a1)
{
  return *(void *)(a1 + 16) == 1;
}

uint64_t protocol witness for Gesture.body.getter in conformance SingleTapGesture<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return SingleTapGesture.body.getter(a1, a2);
}

uint64_t type metadata accessor for SingleTapGesture()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t lazy protocol witness table accessor for type RepeatGesture<TappableEvent> and conformance RepeatGesture<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(void, uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for RequiredTapCountWriter<TappableEvent>(255, a2, (uint64_t)&type metadata for TappableEvent, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TapGesture.Child and conformance TapGesture.Child()
{
  unint64_t result = lazy protocol witness table cache variable for type TapGesture.Child and conformance TapGesture.Child;
  if (!lazy protocol witness table cache variable for type TapGesture.Child and conformance TapGesture.Child)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TapGesture.Child and conformance TapGesture.Child);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TapGesture.Phase and conformance TapGesture.Phase()
{
  unint64_t result = lazy protocol witness table cache variable for type TapGesture.Phase and conformance TapGesture.Phase;
  if (!lazy protocol witness table cache variable for type TapGesture.Phase and conformance TapGesture.Phase)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TapGesture.Phase and conformance TapGesture.Phase);
  }
  return result;
}

uint64_t sub_245FF2030()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t outlined init with copy of CoordinateSpaceGesture<CGFloat>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for RequiredTapCountWriter<TappableEvent>(0, &lazy cache variable for type metadata for CoordinateSpaceGesture<CGFloat>, MEMORY[0x263F8EF38], (uint64_t (*)(void, uint64_t))type metadata accessor for CoordinateSpaceGesture);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of CoordinateSpaceGesture<CGFloat>(uint64_t a1)
{
  type metadata accessor for RequiredTapCountWriter<TappableEvent>(0, &lazy cache variable for type metadata for CoordinateSpaceGesture<CGFloat>, MEMORY[0x263F8EF38], (uint64_t (*)(void, uint64_t))type metadata accessor for CoordinateSpaceGesture);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t lazy protocol witness table accessor for type ModifierGesture<RepeatGesture<TappableEvent>, SingleTapGesture<TappableEvent>> and conformance ModifierGesture<A, B>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined destroy of ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>(uint64_t a1)
{
  type metadata accessor for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t associated type witness table accessor for Gesture.Body : Gesture in SingleTapGesture<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_245FF2264()
{
  return swift_getWitnessTable();
}

uint64_t sub_245FF22D0()
{
  return swift_getWitnessTable();
}

void *type metadata accessor for TapGesture.Phase()
{
  return &unk_26FA40860;
}

void *type metadata accessor for TapGesture.Child()
{
  return &unk_26FA40838;
}

void type metadata accessor for StateContainerGesture<DistanceGesture.StateType, SpatialEvent, CGFloat>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void *))
{
  if (!*a2)
  {
    v8[0] = &type metadata for DistanceGesture.StateType;
    v8[1] = a3;
    _OWORD v8[2] = a4;
    v8[3] = &protocol witness table for DistanceGesture.StateType;
    unint64_t v6 = a5(0, v8);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type StateContainerPhase<DistanceGesture.StateType, CGFloat, SpatialEvent> and conformance StateContainerPhase<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StateContainerPhase<DistanceGesture.StateType, CGFloat, SpatialEvent> and conformance StateContainerPhase<A, B, C>;
  if (!lazy protocol witness table cache variable for type StateContainerPhase<DistanceGesture.StateType, CGFloat, SpatialEvent> and conformance StateContainerPhase<A, B, C>)
  {
    type metadata accessor for StateContainerGesture<DistanceGesture.StateType, SpatialEvent, CGFloat>(255, &lazy cache variable for type metadata for StateContainerPhase<DistanceGesture.StateType, CGFloat, SpatialEvent>, MEMORY[0x263F8EF38], (uint64_t)&type metadata for SpatialEvent, (uint64_t (*)(void, void *))type metadata accessor for StateContainerPhase);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StateContainerPhase<DistanceGesture.StateType, CGFloat, SpatialEvent> and conformance StateContainerPhase<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EventListenerPhase<SpatialEvent> and conformance EventListenerPhase<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EventListenerPhase<SpatialEvent> and conformance EventListenerPhase<A>;
  if (!lazy protocol witness table cache variable for type EventListenerPhase<SpatialEvent> and conformance EventListenerPhase<A>)
  {
    type metadata accessor for SingleTapGesture<TappableEvent>(255, &lazy cache variable for type metadata for EventListenerPhase<SpatialEvent>, (uint64_t)&type metadata for SpatialEvent, (uint64_t)&protocol witness table for SpatialEvent, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EventListenerPhase);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EventListenerPhase<SpatialEvent> and conformance EventListenerPhase<A>);
  }
  return result;
}

uint64_t sub_245FF26F4()
{
  return 16;
}

__n128 sub_245FF2700(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

unint64_t lazy protocol witness table accessor for type Focus<EventListenerPhase<SpatialEvent>.Value, ArrayWith2Inline<(String, String)>> and conformance Focus<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type Focus<EventListenerPhase<SpatialEvent>.Value, ArrayWith2Inline<(String, String)>> and conformance Focus<A, B>;
  if (!lazy protocol witness table cache variable for type Focus<EventListenerPhase<SpatialEvent>.Value, ArrayWith2Inline<(String, String)>> and conformance Focus<A, B>)
  {
    type metadata accessor for Focus<EventListenerPhase<SpatialEvent>.Value, ArrayWith2Inline<(String, String)>>(255, &lazy cache variable for type metadata for Focus<EventListenerPhase<SpatialEvent>.Value, ArrayWith2Inline<(String, String)>>, &lazy cache variable for type metadata for EventListenerPhase<SpatialEvent>.Value, (uint64_t)&type metadata for SpatialEvent, (uint64_t)&protocol witness table for SpatialEvent);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Focus<EventListenerPhase<SpatialEvent>.Value, ArrayWith2Inline<(String, String)>> and conformance Focus<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CategoryGesture<TappableEvent>.Combiner<TappableEvent> and conformance CategoryGesture<A>.Combiner<A1>()
{
  unint64_t result = lazy protocol witness table cache variable for type CategoryGesture<TappableEvent>.Combiner<TappableEvent> and conformance CategoryGesture<A>.Combiner<A1>;
  if (!lazy protocol witness table cache variable for type CategoryGesture<TappableEvent>.Combiner<TappableEvent> and conformance CategoryGesture<A>.Combiner<A1>)
  {
    type metadata accessor for SingleTapGesture<TappableEvent>(255, &lazy cache variable for type metadata for CategoryGesture<TappableEvent>.Combiner<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for CategoryGesture.Combiner);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CategoryGesture<TappableEvent>.Combiner<TappableEvent> and conformance CategoryGesture<A>.Combiner<A1>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CoordinateSpaceEvents<CGFloat> and conformance CoordinateSpaceEvents<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type CoordinateSpaceEvents<CGFloat> and conformance CoordinateSpaceEvents<A>;
  if (!lazy protocol witness table cache variable for type CoordinateSpaceEvents<CGFloat> and conformance CoordinateSpaceEvents<A>)
  {
    type metadata accessor for RequiredTapCountWriter<TappableEvent>(255, &lazy cache variable for type metadata for CoordinateSpaceEvents<CGFloat>, MEMORY[0x263F8EF38], (uint64_t (*)(void, uint64_t))type metadata accessor for CoordinateSpaceEvents);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CoordinateSpaceEvents<CGFloat> and conformance CoordinateSpaceEvents<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EventListenerPhase<TappableEvent> and conformance EventListenerPhase<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EventListenerPhase<TappableEvent> and conformance EventListenerPhase<A>;
  if (!lazy protocol witness table cache variable for type EventListenerPhase<TappableEvent> and conformance EventListenerPhase<A>)
  {
    type metadata accessor for SingleTapGesture<TappableEvent>(255, &lazy cache variable for type metadata for EventListenerPhase<TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t)&protocol witness table for TappableEvent, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EventListenerPhase);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EventListenerPhase<TappableEvent> and conformance EventListenerPhase<A>);
  }
  return result;
}

void type metadata accessor for Focus<EventListenerPhase<SpatialEvent>.Value, ArrayWith2Inline<(String, String)>>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  if (!*a2)
  {
    type metadata accessor for SingleTapGesture<TappableEvent>(255, a3, a4, a5, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EventListenerPhase.Value);
    type metadata accessor for ArrayWith2Inline<(String, String)>();
    unint64_t v6 = type metadata accessor for Focus();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Focus<EventListenerPhase<TappableEvent>.Value, ArrayWith2Inline<(String, String)>> and conformance Focus<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type Focus<EventListenerPhase<TappableEvent>.Value, ArrayWith2Inline<(String, String)>> and conformance Focus<A, B>;
  if (!lazy protocol witness table cache variable for type Focus<EventListenerPhase<TappableEvent>.Value, ArrayWith2Inline<(String, String)>> and conformance Focus<A, B>)
  {
    type metadata accessor for Focus<EventListenerPhase<SpatialEvent>.Value, ArrayWith2Inline<(String, String)>>(255, &lazy cache variable for type metadata for Focus<EventListenerPhase<TappableEvent>.Value, ArrayWith2Inline<(String, String)>>, &lazy cache variable for type metadata for EventListenerPhase<TappableEvent>.Value, (uint64_t)&type metadata for TappableEvent, (uint64_t)&protocol witness table for TappableEvent);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Focus<EventListenerPhase<TappableEvent>.Value, ArrayWith2Inline<(String, String)>> and conformance Focus<A, B>);
  }
  return result;
}

void type metadata accessor for RequiredTapCountWriter<TappableEvent>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type MapPhase<TappableEvent, TappableEvent> and conformance MapPhase<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type MapPhase<TappableEvent, TappableEvent> and conformance MapPhase<A, B>;
  if (!lazy protocol witness table cache variable for type MapPhase<TappableEvent, TappableEvent> and conformance MapPhase<A, B>)
  {
    type metadata accessor for SingleTapGesture<TappableEvent>(255, &lazy cache variable for type metadata for MapPhase<TappableEvent, TappableEvent>, (uint64_t)&type metadata for TappableEvent, (uint64_t)&type metadata for TappableEvent, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for MapPhase);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MapPhase<TappableEvent, TappableEvent> and conformance MapPhase<A, B>);
  }
  return result;
}

void AnyTextFilterEffect.apply(_:at:to:context:in:)()
{
}

void AnyTextFilterEffect.drawingOutsets.getter()
{
}

id AnyTextFilterEffect.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AnyTextFilterEffect();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for AnyTextFilterEffect()
{
  return self;
}

uint64_t type metadata completion function for TextFilterEffect()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t TextFilterEffect.AnimationInfo.updateLayout(effect:identifier:context:)(uint64_t a1, Swift::UInt64 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v60 = a6;
  uint64_t v58 = a4;
  uint64_t v57 = a3;
  uint64_t v64 = a1;
  uint64_t v10 = *(void *)(*(void *)(*v6 + 128) + 8);
  uint64_t v11 = *(void *)(*v6 + 120);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v68 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v61 = (char *)v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)v53 - v15;
  uint64_t v17 = type metadata accessor for Text.Effect.DrawableContent();
  uint64_t v62 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v66 = (char *)v53 - v18;
  type metadata accessor for Text.Effect.ConcreteLayoutState();
  uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 128))(v11, v10);
  uint64_t v20 = Text.Effect.ConcreteLayoutState.__allocating_init(state:)(v19);
  swift_beginAccess();
  uint64_t v59 = a5;
  uint64_t v21 = *(void *)(a5 + 48);
  if (!*(void *)(v21 + 16)) {
    goto LABEL_15;
  }
  uint64_t v63 = v17;
  swift_retain();
  uint64_t v65 = a2;
  unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(a2, v20);
  uint64_t v23 = v20;
  if ((v24 & 1) == 0)
  {
    swift_release();
LABEL_15:
    swift_endAccess();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t v67 = v16;
  uint64_t v69 = AssociatedTypeWitness;
  uint64_t v25 = *(void *)(*(void *)(v21 + 56) + 16 * v22);
  swift_bridgeObjectRetain();
  swift_endAccess();
  swift_release();
  int64_t v26 = *(void *)(v25 + 16);
  uint64_t v70 = v23;
  char v71 = v7;
  if (v26)
  {
    v73[0] = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26, 0);
    uint64_t v27 = 0;
    uint64_t v28 = v73[0];
    unint64_t v29 = *(void *)(v73[0] + 16);
    do
    {
      uint64_t v30 = *(void *)(*(void *)(*(void *)(v25 + 8 * v27 + 32) + 96) + 16);
      v73[0] = v28;
      unint64_t v31 = *(void *)(v28 + 24);
      if (v29 >= v31 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v29 + 1, 1);
        uint64_t v28 = v73[0];
      }
      ++v27;
      *(void *)(v28 + 16) = v29 + 1;
      *(void *)(v28 + 8 * v29++ + 32) = v30;
    }
    while (v26 != v27);
    swift_bridgeObjectRelease();
    uint64_t v23 = v70;
    uint64_t v7 = v71;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v28 = MEMORY[0x263F8EE78];
  }
  LODWORD(v32) = specialized static Array<A>.== infix(_:_:)(v28, v7[2]);
  Swift::UInt64 v33 = v65;
  if (v32)
  {
    uint64_t v34 = v58;
    LODWORD(v58) = v32;
    uint64_t v35 = v60;
    Text.Effect.BaseContext.content<A>(for:key:)(v11, v65, v23, v57, v34, v59, v60, v11, v10);
    v72[0] = *(double *)(v35 + 56);
    TextEffectsAnimationController.state(for:time:)(v33, v72, (uint64_t)v73);
    uint64_t v59 = v74;
    uint64_t v60 = v75;
    uint64_t v36 = v76;
    uint64_t v37 = v77;
    v53[1] = v76;
    uint64_t v65 = _ViewInputs.base.modify(v74, v75);
    uint64_t v56 = v38;
    v53[0] = v37;
    uint64_t v54 = _ViewInputs.base.modify(v36, v37);
    uint64_t v55 = v39;
    uint64_t v57 = (uint64_t)v7 + *(void *)(*v7 + 144);
    uint64_t v40 = v57;
    swift_beginAccess();
    uint64_t v41 = v69;
    uint64_t v42 = v68;
    uint64_t v32 = v61;
    (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v61, v40, v69);
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v44 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 8);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v45 = v44(v41, AssociatedConformanceWitness);
    uint64_t v47 = v46 & 1;
    (*(void (**)(char *, uint64_t))(v42 + 8))(v32, v41);
    uint64_t v48 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 136);
    uint64_t v52 = v10;
    uint64_t v49 = v66;
    v48(v66, v65, v56, v54, v55, v45, v47, v11, v52);
    LOBYTE(v32) = v58;
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v62 + 8))(v49, v63);
    uint64_t v50 = v57;
    swift_beginAccess();
    (*(void (**)(uint64_t, char *, uint64_t))(v68 + 40))(v50, v67, v69);
    swift_endAccess();
    v71[2] = v28;
  }
  else
  {
    swift_release();
  }
  swift_bridgeObjectRelease();
  return v32 & 1;
}

uint64_t TextFilterEffect.AnimationInfo.clearFrameCache()()
{
  return swift_release();
}

uint64_t TextFilterEffect.AnimationInfo.restart()()
{
  uint64_t v1 = *(void *)(v0 + *(void *)(*(void *)v0 + 152));
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 48) = 1;
  return result;
}

BOOL TextFilterEffect.AnimationInfo.isSettled.getter()
{
  uint64_t v1 = *(void *)(v0 + *(void *)(*(void *)v0 + 152));
  swift_beginAccess();
  return *(void *)(v1 + 32) == 0;
}

Swift::UInt TextFilterEffect.AnimationInfo.needsUpdate(for:state:)(Swift::UInt a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 32);
  char v5 = *(unsigned char *)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 48);
  char v7 = *(unsigned char *)(a2 + 56);
  v18[0] = *(unsigned char *)a2;
  long long v19 = *(_OWORD *)(a2 + 8);
  uint64_t v20 = v3;
  uint64_t v21 = v4;
  char v22 = v5;
  uint64_t v23 = v6;
  char v24 = v7;
  long long v8 = *(_OWORD *)(a2 + 80);
  long long v25 = *(_OWORD *)(a2 + 64);
  long long v26 = v8;
  swift_beginAccess();
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v10 = *(uint64_t (**)(Swift::UInt, uint64_t, uint64_t))(AssociatedConformanceWitness + 16);
  uint64_t v11 = swift_checkMetadataState();
  uint64_t v12 = v10(a1, v11, AssociatedConformanceWitness);
  uint64_t v14 = v13;
  char v16 = v15 & 1;
  swift_retain();
  LOBYTE(a1) = Text.Effect.AttributeTracker.needsUpdate(for:state:interval:consideringRestart:)(a1, (uint64_t)v18, v12, v14, v16, 1);
  swift_release();
  return a1 & 1;
}

uint64_t TextFilterEffect.AnimationInfo.__ivar_destroyer()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 144);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(v1, AssociatedTypeWitness);

  return swift_release();
}

uint64_t TextFilterEffect.AnimationInfo.deinit()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 144);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(v1, AssociatedTypeWitness);
  swift_release();
  return v0;
}

uint64_t TextFilterEffect.AnimationInfo.__deallocating_deinit()
{
  TextFilterEffect.AnimationInfo.deinit();

  return swift_deallocClassInstance();
}

uint64_t TextFilterEffect.animationInfo(persist:from:to:variant:duration:context:)(char a1)
{
  if (TextEffectsAnimationController.animationInfo(for:persist:default:)(*(void *)(v1 + OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id), a1, (uint64_t (*)(uint64_t))partial apply for implicit closure #1 in TextFilterEffect.animationInfo(persist:from:to:variant:duration:context:)))
  {
    type metadata accessor for TextFilterEffect.AnimationInfo();
    uint64_t result = swift_dynamicCastClass();
    if (result) {
      return result;
    }
    swift_release();
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t implicit closure #1 in TextFilterEffect.animationInfo(persist:from:to:variant:duration:context:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v41 = a7;
  uint64_t v32 = a2;
  uint64_t v38 = a12;
  uint64_t v39 = a10;
  uint64_t v37 = a9;
  int v40 = a8 & 1;
  uint64_t v17 = *MEMORY[0x263F8EED0] & *a1;
  uint64_t v18 = *(void *)(v17 + 0xE8);
  uint64_t v19 = *(void *)(v18 - 8);
  double v20 = MEMORY[0x270FA5388](a1);
  char v22 = (char *)&v32 - v21;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v19 + 16))((char *)&v32 - v21, v23 + *(void *)(v17 + 248), v18, v20);
  Swift::UInt64 v36 = *(void *)((char *)a1 + OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id);
  uint64_t v24 = _ViewInputs.base.modify(a2, a3);
  uint64_t v34 = v25;
  uint64_t v35 = v24;
  uint64_t v26 = _ViewInputs.base.modify(a4, a5);
  uint64_t v33 = v27;
  swift_retain();
  uint64_t v28 = v37;
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v29 = v38;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v30 = specialized TextFilterEffect.AnimationInfo.__allocating_init(effect:identifier:from:to:variant:duration:context:)((uint64_t)v22, v36, v35, v34, v26, v33, v41, v40, v28, v39, a11, v29);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
  return v30;
}

uint64_t TextFilterEffect.updateInfo(_:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v18 = a5;
  uint64_t v9 = *MEMORY[0x263F8EED0] & *(void *)v5;
  uint64_t v10 = *(void *)(v9 + 0xE8);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v13 = (char *)&v17 - v12;
  type metadata accessor for TextFilterEffect.AnimationInfo();
  if (swift_dynamicCastClass())
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v13, &v5[*(void *)(v9 + 248)], v10);
    Swift::UInt64 v14 = *(void *)&v5[OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id];
    swift_retain();
    char v15 = TextFilterEffect.AnimationInfo.updateLayout(effect:identifier:context:)((uint64_t)v13, v14, a2, a3, a4, v18);
    swift_release();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

uint64_t TextFilterEffect.duration(from:to:variant:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v17[0] = a8;
  v17[1] = a7;
  void v17[2] = a6;
  v17[3] = a3;
  v17[4] = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v11 = (char *)v17 - v10;
  uint64_t v12 = TextFilterEffect.animationInfo(persist:from:to:variant:duration:context:)(1);
  uint64_t v13 = v12 + *(void *)(*(void *)v12 + 144);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v13, AssociatedTypeWitness);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 8))(AssociatedTypeWitness, AssociatedConformanceWitness);
  swift_release();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, AssociatedTypeWitness);
  return v15;
}

uint64_t TextFilterEffect.delay(for:duration:)()
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)((*MEMORY[0x263F8EED0] & *v0) + 0xF0) + 8) + 144))();
}

uint64_t TextFilterEffect.apply(_:at:to:context:in:)(Swift::UInt64 a1, unint64_t a2, double *a3, double *a4, uint64_t a5, uint64_t *a6)
{
  char v7 = v6;
  uint64_t v68 = a6;
  unint64_t v56 = a2;
  uint64_t v12 = *MEMORY[0x263F8EED0] & *v7;
  uint64_t v70 = *(void *)(v12 + 0xF0);
  uint64_t v13 = *(void *)(v12 + 232);
  uint64_t v55 = *(void *)(v70 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v59 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v57 = (char *)v46 - v14;
  uint64_t v58 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v69 = (char *)v46 - v16;
  double v17 = *a3;
  double v18 = *a4;
  double v61 = a4[1];
  double v62 = a4[2];
  double v63 = a4[3];
  double v64 = a4[4];
  double v65 = a4[5];
  double v66 = a4[6];
  double v67 = a4[7];
  uint64_t v49 = *(void *)(a5 + 8);
  uint64_t v51 = *(void *)(a5 + 16);
  uint64_t v50 = a5;
  v72[0] = v17;
  uint64_t v19 = TextEffectsAnimationController.state(for:time:)(a1, v72, (uint64_t)&v73);
  char v20 = LOBYTE(v73);
  double v21 = v74;
  double v22 = v75;
  double v23 = v76;
  double v24 = v79;
  uint64_t v26 = v81;
  uint64_t v25 = v82;
  uint64_t v27 = v83;
  int v28 = LOBYTE(v80) & 0xFE;
  int v54 = LOBYTE(v80);
  uint64_t v71 = v84;
  double v53 = v77;
  int v52 = LOBYTE(v78);
  if (v28 == 2
    || v83
    && (char v29 = LOBYTE(v73),
        char v30 = (*(uint64_t (**)(uint64_t))(*(void *)v83 + 104))(v19),
        char v20 = v29,
        (v30 & 1) == 0))
  {
    char v31 = v28 == 2;
    uint64_t v32 = v51;
    uint64_t v48 = v26;
    uint64_t v47 = v25;
    char v33 = v20;
    uint64_t v34 = TextFilterEffect.animationInfo(persist:from:to:variant:duration:context:)(v31);
    Swift::UInt64 v35 = *(void *)((char *)v7 + OBJC_IVAR____TtC7SwiftUI16AnyTextAnimation_id);
    uint64_t v36 = specialized TextFilterEffect.defaultDrawingState.getter(v13, v70);
    specialized Text.Effect.BaseContext.fragment<A>(for:key:fragment:)(v35, v36, v56, v32, (uint64_t)v85);
    swift_release();
    uint64_t v37 = (char *)v7 + *(void *)((*MEMORY[0x263F8EED0] & *v7) + 0xF8);
    uint64_t v38 = v58;
    uint64_t v39 = *(void (**)(char *, char *, uint64_t))(v58 + 16);
    v46[1] = v27;
    v39(v69, v37, v13);
    v72[0] = v18;
    v72[1] = v61;
    v72[2] = v62;
    double v72[3] = v63;
    v72[4] = v64;
    v72[5] = v65;
    v72[6] = v66;
    v72[7] = v67;
    uint64_t v40 = v34 + *(void *)(*(void *)v34 + 144);
    swift_beginAccess();
    uint64_t v41 = v59;
    uint64_t v42 = v57;
    uint64_t v43 = AssociatedTypeWitness;
    (*(void (**)(char *, uint64_t, uint64_t))(v59 + 16))(v57, v40, AssociatedTypeWitness);
    LOBYTE(v73) = v33;
    double v74 = v21;
    double v75 = v22;
    double v76 = v23;
    double v77 = v53;
    LOBYTE(v78) = v52;
    double v79 = v24;
    LOBYTE(v80) = v54;
    uint64_t v81 = v48;
    uint64_t v82 = v47;
    uint64_t v83 = v27;
    uint64_t v84 = v71;
    uint64_t v44 = v69;
    (*(void (**)(double *, char *, char *, double *, uint64_t, uint64_t *, uint64_t))(v70 + 24))(v72, v85, v42, &v73, v50, v68, v13);
    outlined release of Text.Effect.BaseFragment((uint64_t)v85);
    swift_release();
    (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v43);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v44, v13);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    double v73 = v18;
    double v74 = v61;
    double v75 = v62;
    double v76 = v63;
    double v77 = v64;
    double v78 = v65;
    double v79 = v66;
    double v80 = v67;
    Text.Effect.DrawingContent.draw(options:in:)(0, 0, 1, v68);
    swift_release();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t TextFilterEffect.defaultDrawingState.getter()
{
  return specialized TextFilterEffect.defaultDrawingState.getter(*(void *)((*MEMORY[0x263F8EED0] & *v0) + 0xE8), *(void *)((*MEMORY[0x263F8EED0] & *v0) + 0xF0));
}

uint64_t TextFilterEffect.needsUpdate(_:at:context:)(Swift::UInt64 a1, Swift::UInt a2, uint64_t *a3)
{
  uint64_t v19 = *a3;
  TextEffectsAnimationController.state(for:time:)(a1, (double *)&v19, (uint64_t)v20);
  char v4 = v27;
  uint64_t v6 = v28;
  uint64_t v5 = v29;
  uint64_t v8 = v30;
  uint64_t v7 = v31;
  if ((v27 & 0xFE) == 2)
  {
    Swift::UInt v18 = a2;
    char v9 = v20[0];
    uint64_t v10 = v21;
    uint64_t v11 = v22;
    uint64_t v12 = v23;
    uint64_t v17 = v24;
    char v16 = v25;
    uint64_t v13 = v26;
    TextFilterEffect.animationInfo(persist:from:to:variant:duration:context:)(1);
    v20[0] = v9;
    uint64_t v21 = v10;
    uint64_t v22 = v11;
    uint64_t v23 = v12;
    uint64_t v24 = v17;
    char v25 = v16;
    uint64_t v26 = v13;
    char v27 = v4;
    uint64_t v28 = v6;
    uint64_t v29 = v5;
    uint64_t v30 = v8;
    uint64_t v31 = v7;
    char v14 = TextFilterEffect.AnimationInfo.needsUpdate(for:state:)(v18, (uint64_t)v20);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    char v14 = 0;
  }
  return v14 & 1;
}

double TextFilterEffect.drawingOutsets.getter(uint64_t a1)
{
  objc_super v2 = (void *)(*MEMORY[0x263F8EED0] & *(void *)v1);
  uint64_t v3 = v2[29];
  uint64_t v4 = *(void *)(v3 - 8);
  double v5 = MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v10 - v6;
  (*(void (**)(char *, char *, uint64_t, double))(v4 + 16))((char *)&v10 - v6, &v1[v2[31]], v3, v5);
  double v8 = (*(double (**)(uint64_t))(v2[30] + 32))(v3);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  return v8;
}

uint64_t TextFilterEffect.phase(from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = a2;
  uint64_t v4 = *(void *)(*(void *)((*MEMORY[0x263F8EED0] & *v2) + 0xF0) + 8);
  uint64_t v5 = *(void *)((*MEMORY[0x263F8EED0] & *v2) + 0xE8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v21 - v9;
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v12);
  char v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v16 = MEMORY[0x270FA5388](v15);
  Swift::UInt v18 = (char *)&v21 - v17;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, double))(v4 + 88))(a1, v22, v5, v4, v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    return 0;
  }
  else
  {
    char v20 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    v20(v18, v10, AssociatedTypeWitness);
    type metadata accessor for Text.Effect.ConcretePhase();
    v20(v14, v18, AssociatedTypeWitness);
    return Text.Effect.ConcretePhase.__allocating_init(_:)((uint64_t)v14);
  }
}

uint64_t TextFilterEffect.defaultAnimatorPhase.getter()
{
  uint64_t v1 = *(void *)(*(void *)((*MEMORY[0x263F8EED0] & *v0) + 0xF0) + 8);
  uint64_t v2 = *(void *)((*MEMORY[0x263F8EED0] & *v0) + 0xE8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness - 8);
  uint64_t v5 = (char *)&v7 - v4;
  type metadata accessor for Text.Effect.ConcretePhase();
  (*(void (**)(uint64_t, uint64_t))(v1 + 72))(v2, v1);
  return Text.Effect.ConcretePhase.__allocating_init(_:)((uint64_t)v5);
}

uint64_t TextFilterEffect.configuration(from:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)((*MEMORY[0x263F8EED0] & *v1) + 0xF0) + 8);
  uint64_t v4 = *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0xE8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v20 - v8;
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v15 = MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v20 - v16;
  if (!a1) {
    return 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(v3 + 64))(a1, v4, v3, v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    return 0;
  }
  uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v19(v17, v9, AssociatedTypeWitness);
  type metadata accessor for Text.Effect.ConcreteConfiguration();
  v19(v13, v17, AssociatedTypeWitness);
  return Text.Effect.ConcreteConfiguration.__allocating_init(_:)((uint64_t)v13);
}

uint64_t TextFilterEffect.states.getter()
{
  uint64_t v1 = *(void *)((*MEMORY[0x263F8EED0] & *v0) + 0xE8);
  uint64_t v2 = *(void *)(*(void *)((*MEMORY[0x263F8EED0] & *v0) + 0xF0) + 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 112))(v1, v2);
  if (!result) {
    return 0;
  }
  uint64_t v4 = result;
  uint64_t v5 = *(void *)(result + 16);
  if (!v5)
  {
LABEL_6:
    swift_bridgeObjectRelease();
    uint64_t v7 = *(void *)(MEMORY[0x263F8EE78] + 16);
    if (v7)
    {
      uint64_t v10 = MEMORY[0x263F8EE78];
      specialized ContiguousArray.reserveCapacity(_:)();
      uint64_t v8 = type metadata accessor for Text.Effect.ConcreteLayoutState();
      do
      {
        Text.Effect.ConcreteLayoutState.__allocating_init(state:)(v8);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        uint64_t v8 = specialized ContiguousArray._endMutation()();
        --v7;
      }
      while (v7);
      uint64_t v9 = v10;
    }
    else
    {
      uint64_t v9 = MEMORY[0x263F8EE78];
    }
    swift_release();
    return v9;
  }
  unint64_t v6 = 0;
  while (v6 < *(void *)(v4 + 16))
  {
    ++v6;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 120))(v1, v2);
    if (v5 == v6) {
      goto LABEL_6;
    }
  }
  __break(1u);
  return result;
}

uint64_t TextFilterEffect.lineBreakingState.getter()
{
  uint64_t v1 = *(void *)((*MEMORY[0x263F8EED0] & *v0) + 0xE8);
  uint64_t v2 = *(void *)(*(void *)((*MEMORY[0x263F8EED0] & *v0) + 0xF0) + 8);
  type metadata accessor for Text.Effect.ConcreteLayoutState();
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 120))(v1, v2);
  return Text.Effect.ConcreteLayoutState.__allocating_init(state:)(v3);
}

void @objc TextFilterEffect.init()()
{
}

uint64_t TextFilterEffect.__ivar_destroyer()
{
  return (*(uint64_t (**)(char *))(*(void *)(*(void *)((*MEMORY[0x263F8EED0] & *(void *)v0) + 0xE8)
                                                       - 8)
                                           + 8))(&v0[*(void *)((*MEMORY[0x263F8EED0] & *(void *)v0) + 0xF8)]);
}

uint64_t @objc TextFilterEffect.__ivar_destroyer(char *a1)
{
  return (*(uint64_t (**)(char *))(*(void *)(*(void *)((*MEMORY[0x263F8EED0] & *(void *)a1) + 0xE8)
                                                       - 8)
                                           + 8))(&a1[*(void *)((*MEMORY[0x263F8EED0] & *(void *)a1) + 0xF8)]);
}

uint64_t type metadata accessor for TextFilterEffect()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for TextFilterEffect.AnimationInfo()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for TextFilterEffect.AnimationInfo()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t specialized TextFilterEffect.defaultDrawingState.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  type metadata accessor for Text.Effect.ConcreteLayoutState();
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 128))(a1, v3);
  return Text.Effect.ConcreteLayoutState.__allocating_init(state:)(v4);
}

uint64_t partial apply for implicit closure #1 in TextFilterEffect.animationInfo(persist:from:to:variant:duration:context:)()
{
  return implicit closure #1 in TextFilterEffect.animationInfo(persist:from:to:variant:duration:context:)(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(unsigned __int8 *)(v0 + 56), *(void *)(v0 + 64), *(unsigned char *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104));
}

uint64_t specialized TextFilterEffect.AnimationInfo.init(effect:identifier:from:to:variant:duration:context:)(uint64_t a1, Swift::UInt64 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *a13)
{
  LODWORD(v45) = a8;
  uint64_t v48 = a1;
  uint64_t v49 = a7;
  uint64_t v56 = a5;
  uint64_t v57 = a6;
  uint64_t v52 = a4;
  Swift::UInt64 v53 = a2;
  uint64_t v58 = a3;
  uint64_t v13 = *(void *)a13;
  uint64_t v14 = *(void *)(*(void *)(*(void *)a13 + 128) + 8);
  uint64_t v15 = *(void *)(*(void *)a13 + 120);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  Swift::UInt v18 = (char *)&v43 - v17;
  uint64_t v19 = type metadata accessor for Text.Effect.DrawableContent();
  uint64_t v50 = *(void *)(v19 - 8);
  uint64_t v51 = v19;
  MEMORY[0x270FA5388](v19);
  int v54 = (char *)&v43 - v20;
  uint64_t v21 = *(void *)(v13 + 152);
  type metadata accessor for Text.Effect.AttributeTracker();
  uint64_t v22 = swift_allocObject();
  uint64_t v23 = MEMORY[0x263F8EE80];
  *(void *)(v22 + 16) = MEMORY[0x263F8EE80];
  *(void *)(v22 + 24) = v23;
  *(void *)(v22 + 32) = 0;
  *(void *)(v22 + 40) = v23;
  *(unsigned char *)(v22 + 48) = 0;
  *(void *)(v22 + 56) = MEMORY[0x263F8EE88];
  *(void *)&a13[v21] = v22;
  type metadata accessor for Text.Effect.ConcreteLayoutState();
  uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t))(v14 + 128);
  swift_retain();
  uint64_t v25 = v24(v15, v14);
  uint64_t v26 = Text.Effect.ConcreteLayoutState.__allocating_init(state:)(v25);
  swift_beginAccess();
  uint64_t v55 = a11;
  uint64_t v27 = *(void *)(a11 + 48);
  uint64_t v28 = *(void *)(v27 + 16);
  swift_retain();
  if (!v28) {
    goto LABEL_12;
  }
  uint64_t v44 = v18;
  uint64_t v46 = v16;
  swift_retain();
  unint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)(v53, v26);
  if ((v30 & 1) == 0)
  {
    swift_release();
LABEL_12:
    swift_endAccess();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t v31 = v45 & 1;
  uint64_t v32 = *(void *)(*(void *)(v27 + 56) + 16 * v29);
  swift_bridgeObjectRetain();
  swift_endAccess();
  swift_release();
  uint64_t v33 = v53;
  uint64_t v34 = v54;
  Swift::UInt64 v53 = a9;
  uint64_t v45 = a12;
  Text.Effect.BaseContext.content<A>(for:key:)(v15, v33, v26, a9, a10, v55, a12, v15, v14);
  Swift::UInt64 v35 = v44;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 136))(v34, v58, v52, v56, v57, v49, v31, v15, v14);
  (*(void (**)(char *, char *, uint64_t))(v46 + 32))(&a13[*(void *)(*(void *)a13 + 144)], v35, AssociatedTypeWitness);
  int64_t v36 = *(void *)(v32 + 16);
  if (v36)
  {
    uint64_t v59 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v36, 0);
    uint64_t v37 = v59;
    uint64_t v38 = v32 + 32;
    unint64_t v39 = *(void *)(v59 + 16);
    do
    {
      uint64_t v40 = *(void *)(*(void *)(*(void *)v38 + 96) + 16);
      uint64_t v59 = v37;
      unint64_t v41 = *(void *)(v37 + 24);
      if (v39 >= v41 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v41 > 1, v39 + 1, 1);
        uint64_t v37 = v59;
      }
      *(void *)(v37 + 16) = v39 + 1;
      *(void *)(v37 + 8 * v39 + 32) = v40;
      v38 += 8;
      ++v39;
      --v36;
    }
    while (v36);
    swift_release();
  }
  else
  {
    swift_release();
    uint64_t v37 = MEMORY[0x263F8EE78];
  }
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v50 + 8))(v54, v51);
  swift_bridgeObjectRelease();
  *((void *)a13 + 2) = v37;
  return (uint64_t)a13;
}

uint64_t specialized TextFilterEffect.AnimationInfo.__allocating_init(effect:identifier:from:to:variant:duration:context:)(uint64_t a1, Swift::UInt64 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  int v18 = a8 & 1;
  type metadata accessor for TextFilterEffect.AnimationInfo();
  uint64_t v19 = (char *)swift_allocObject();
  uint64_t v20 = specialized TextFilterEffect.AnimationInfo.init(effect:identifier:from:to:variant:duration:context:)(a1, a2, a3, a4, a5, a6, a7, v18, a9, a10, a11, a12, v19);
  swift_release();
  return v20;
}

void specialized TextFilterEffect.init()()
{
}

uint64_t KeyframeTrackContentBuilder.Conditional.init(first:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t KeyframeTrackContentBuilder.Conditional.init(second:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t static KeyframeTrackContentBuilder.buildArray<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = _ViewInputs.base.modify(a1, a2);

  return swift_bridgeObjectRetain();
}

uint64_t static KeyframeTrackContentBuilder.buildEither<A, B>(first:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  double v5 = MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v8 + 16))(v7, v5);
  swift_getAssociatedConformanceWitness();
  return KeyframeTrackContentBuilder.Conditional.init(first:)((uint64_t)v7, a2, a3);
}

uint64_t static KeyframeTrackContentBuilder.buildEither<A, B>(second:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  double v5 = MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v8 + 16))(v7, v5);
  swift_getAssociatedConformanceWitness();
  return KeyframeTrackContentBuilder.Conditional.init(second:)((uint64_t)v7, a2, a3);
}

uint64_t static KeyframeTrackContentBuilder.buildPartialBlock<A, B>(accumulated:next:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v9 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v13 = MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v16 + 16))(v15, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, a4);
  return MergedKeyframeTrackContent.init(first:second:)((uint64_t)v15, (uint64_t)v11, a3, a4, a5);
}

uint64_t KeyframeTrackContentBuilder.Conditional._resolve(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = a1;
  uint64_t v2 = *(void *)(a2 + 40);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](a1);
  double v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(v6 + 32);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(v12 + 48);
  uint64_t v14 = *(void *)(v12 + 56);
  uint64_t v15 = *(void *)(v12 + 64);
  long long v24 = *(_OWORD *)(v12 + 16);
  uint64_t v25 = v7;
  uint64_t v26 = v2;
  uint64_t v27 = v13;
  uint64_t v28 = v14;
  uint64_t v29 = v15;
  uint64_t v16 = type metadata accessor for KeyframeTrackContentBuilder.Conditional.Storage();
  double v17 = MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v22 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v20 + 16))((char *)&v22 - v18, v22, v16, v17);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v19, v2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v23, v2, v15);
    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v11, v19, v7);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v23, v7, v14);
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  }
}

uint64_t associated type witness table accessor for KeyframeTrackContent.Body : KeyframeTrackContent in KeyframeTrackContentBuilder<A>.Conditional<A1, B1, C1>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for KeyframeTrackContent.Value : Animatable in KeyframeTrackContentBuilder<A>.Conditional<A1, B1, C1>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t instantiation function for generic protocol witness table for KeyframeTrackContentBuilder<A>.Conditional<A1, B1, C1>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for KeyframeTrackContentBuilder()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_245FF63B4()
{
  type metadata accessor for EmptyKeyframeTrackContent();

  return swift_getWitnessTable();
}

uint64_t sub_245FF63FC()
{
  type metadata accessor for ArrayKeyframeTrackContent();

  return swift_getWitnessTable();
}

uint64_t sub_245FF6448()
{
  return swift_getWitnessTable();
}

void *initializeBufferWithCopyOfBuffer for KeyframeTrackContentBuilder.Conditional(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 32) - 8);
  uint64_t v5 = *(void *)(*(void *)(a3 + 40) - 8);
  if (*(void *)(v5 + 64) <= *(void *)(v4 + 64)) {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 32) - 8) + 64);
  }
  else {
    uint64_t v6 = *(void *)(v5 + 64);
  }
  uint64_t v7 = (*(unsigned char *)(v5 + 80) | *(unsigned char *)(v4 + 80));
  if (v7 <= 7
    && (unint64_t)(v6 + 1) <= 0x18
    && ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v4 + 80)) & 0x100000) == 0)
  {
    unsigned int v11 = a2[v6];
    unsigned int v12 = v11 - 2;
    if (v11 >= 2)
    {
      if (v6 <= 3) {
        uint64_t v13 = v6;
      }
      else {
        uint64_t v13 = 4;
      }
      switch(v13)
      {
        case 1:
          int v14 = *a2;
          goto LABEL_21;
        case 2:
          int v14 = *(unsigned __int16 *)a2;
          goto LABEL_21;
        case 3:
          int v14 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_21;
        case 4:
          int v14 = *(_DWORD *)a2;
LABEL_21:
          int v15 = (v14 | (v12 << (8 * v6))) + 2;
          unsigned int v11 = v14 + 2;
          if (v6 < 4) {
            unsigned int v11 = v15;
          }
          break;
        default:
          break;
      }
    }
    if (v11 == 1)
    {
      (*(void (**)(void *))(v5 + 16))(a1);
      *((unsigned char *)v3 + v6) = 1;
    }
    else
    {
      (*(void (**)(void *))(v4 + 16))(a1);
      *((unsigned char *)v3 + v6) = 0;
    }
  }
  else
  {
    uint64_t v10 = *(void *)a2;
    *uint64_t v3 = *(void *)a2;
    uint64_t v3 = (void *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }
  return v3;
}

uint64_t destroy for KeyframeTrackContentBuilder.Conditional(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40) - 8;
  uint64_t v3 = *(void *)v2;
  unint64_t v4 = *(void *)(*(void *)v2 + 64);
  if (v4 <= *(void *)(*(void *)(*(void *)(a2 + 32) - 8) + 64)) {
    unint64_t v4 = *(void *)(*(void *)(*(void *)(a2 + 32) - 8) + 64);
  }
  unsigned int v5 = a1[v4];
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a1;
        goto LABEL_12;
      case 2:
        int v8 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v8 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v8 = *(_DWORD *)a1;
LABEL_12:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v5 == 1) {
    uint64_t v10 = v3;
  }
  else {
    uint64_t v10 = *(void *)(*(void *)(a2 + 32) - 8);
  }
  return (*(uint64_t (**)(void))(v10 + 8))();
}

uint64_t initializeWithCopy for KeyframeTrackContentBuilder.Conditional(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 40);
  uint64_t v5 = *(void *)(*(void *)(a3 + 32) - 8);
  if (*(void *)(*(void *)(v4 - 8) + 64) <= *(void *)(v5 + 64)) {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 32) - 8) + 64);
  }
  else {
    uint64_t v6 = *(void *)(*(void *)(v4 - 8) + 64);
  }
  unsigned int v7 = a2[v6];
  unsigned int v8 = v7 - 2;
  if (v7 >= 2)
  {
    if (v6 <= 3) {
      uint64_t v9 = v6;
    }
    else {
      uint64_t v9 = 4;
    }
    switch(v9)
    {
      case 1:
        int v10 = *a2;
        goto LABEL_13;
      case 2:
        int v10 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v10 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v10 = *(_DWORD *)a2;
LABEL_13:
        int v11 = (v10 | (v8 << (8 * v6))) + 2;
        unsigned int v7 = v10 + 2;
        if (v6 < 4) {
          unsigned int v7 = v11;
        }
        break;
      default:
        break;
    }
  }
  BOOL v12 = v7 == 1;
  if (v7 == 1) {
    uint64_t v5 = *(void *)(v4 - 8);
  }
  (*(void (**)(uint64_t))(v5 + 16))(a1);
  *(unsigned char *)(a1 + v6) = v12;
  return a1;
}

unsigned __int8 *assignWithCopy for KeyframeTrackContentBuilder.Conditional(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 32);
    uint64_t v6 = *(void *)(a3 + 40);
    uint64_t v7 = *(void *)(v5 - 8);
    uint64_t v8 = *(void *)(v6 - 8);
    if (*(void *)(v8 + 64) <= *(void *)(v7 + 64)) {
      uint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 32) - 8) + 64);
    }
    else {
      uint64_t v9 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    unsigned int v10 = a1[v9];
    unsigned int v11 = v10 - 2;
    if (v10 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v12 = v9;
      }
      else {
        uint64_t v12 = 4;
      }
      switch(v12)
      {
        case 1:
          int v13 = *a1;
          goto LABEL_14;
        case 2:
          int v13 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v13 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v13 = *(_DWORD *)a1;
LABEL_14:
          int v14 = (v13 | (v11 << (8 * v9))) + 2;
          unsigned int v10 = v13 + 2;
          if (v9 < 4) {
            unsigned int v10 = v14;
          }
          break;
        default:
          break;
      }
    }
    if (v10 == 1) {
      uint64_t v15 = *(void *)(v6 - 8);
    }
    else {
      uint64_t v15 = *(void *)(*(void *)(a3 + 32) - 8);
    }
    if (v10 == 1) {
      uint64_t v16 = *(void *)(a3 + 40);
    }
    else {
      uint64_t v16 = *(void *)(a3 + 32);
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v15 + 8))(a1, v16);
    unsigned int v17 = a2[v9];
    unsigned int v18 = v17 - 2;
    if (v17 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v19 = v9;
      }
      else {
        uint64_t v19 = 4;
      }
      switch(v19)
      {
        case 1:
          int v20 = *a2;
          goto LABEL_31;
        case 2:
          int v20 = *(unsigned __int16 *)a2;
          goto LABEL_31;
        case 3:
          int v20 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_31;
        case 4:
          int v20 = *(_DWORD *)a2;
LABEL_31:
          int v21 = (v20 | (v18 << (8 * v9))) + 2;
          unsigned int v17 = v20 + 2;
          if (v9 < 4) {
            unsigned int v17 = v21;
          }
          break;
        default:
          break;
      }
    }
    BOOL v22 = v17 == 1;
    if (v17 == 1) {
      uint64_t v23 = v8;
    }
    else {
      uint64_t v23 = v7;
    }
    if (v17 == 1) {
      uint64_t v24 = v6;
    }
    else {
      uint64_t v24 = v5;
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v23 + 16))(a1, a2, v24);
    a1[v9] = v22;
  }
  return a1;
}

uint64_t initializeWithTake for KeyframeTrackContentBuilder.Conditional(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 40);
  uint64_t v5 = *(void *)(*(void *)(a3 + 32) - 8);
  if (*(void *)(*(void *)(v4 - 8) + 64) <= *(void *)(v5 + 64)) {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 32) - 8) + 64);
  }
  else {
    uint64_t v6 = *(void *)(*(void *)(v4 - 8) + 64);
  }
  unsigned int v7 = a2[v6];
  unsigned int v8 = v7 - 2;
  if (v7 >= 2)
  {
    if (v6 <= 3) {
      uint64_t v9 = v6;
    }
    else {
      uint64_t v9 = 4;
    }
    switch(v9)
    {
      case 1:
        int v10 = *a2;
        goto LABEL_13;
      case 2:
        int v10 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v10 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v10 = *(_DWORD *)a2;
LABEL_13:
        int v11 = (v10 | (v8 << (8 * v6))) + 2;
        unsigned int v7 = v10 + 2;
        if (v6 < 4) {
          unsigned int v7 = v11;
        }
        break;
      default:
        break;
    }
  }
  BOOL v12 = v7 == 1;
  if (v7 == 1) {
    uint64_t v5 = *(void *)(v4 - 8);
  }
  (*(void (**)(uint64_t))(v5 + 32))(a1);
  *(unsigned char *)(a1 + v6) = v12;
  return a1;
}

unsigned __int8 *assignWithTake for KeyframeTrackContentBuilder.Conditional(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 32);
    uint64_t v6 = *(void *)(a3 + 40);
    uint64_t v7 = *(void *)(v5 - 8);
    uint64_t v8 = *(void *)(v6 - 8);
    if (*(void *)(v8 + 64) <= *(void *)(v7 + 64)) {
      uint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 32) - 8) + 64);
    }
    else {
      uint64_t v9 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    unsigned int v10 = a1[v9];
    unsigned int v11 = v10 - 2;
    if (v10 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v12 = v9;
      }
      else {
        uint64_t v12 = 4;
      }
      switch(v12)
      {
        case 1:
          int v13 = *a1;
          goto LABEL_14;
        case 2:
          int v13 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v13 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v13 = *(_DWORD *)a1;
LABEL_14:
          int v14 = (v13 | (v11 << (8 * v9))) + 2;
          unsigned int v10 = v13 + 2;
          if (v9 < 4) {
            unsigned int v10 = v14;
          }
          break;
        default:
          break;
      }
    }
    if (v10 == 1) {
      uint64_t v15 = *(void *)(v6 - 8);
    }
    else {
      uint64_t v15 = *(void *)(*(void *)(a3 + 32) - 8);
    }
    if (v10 == 1) {
      uint64_t v16 = *(void *)(a3 + 40);
    }
    else {
      uint64_t v16 = *(void *)(a3 + 32);
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v15 + 8))(a1, v16);
    unsigned int v17 = a2[v9];
    unsigned int v18 = v17 - 2;
    if (v17 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v19 = v9;
      }
      else {
        uint64_t v19 = 4;
      }
      switch(v19)
      {
        case 1:
          int v20 = *a2;
          goto LABEL_31;
        case 2:
          int v20 = *(unsigned __int16 *)a2;
          goto LABEL_31;
        case 3:
          int v20 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_31;
        case 4:
          int v20 = *(_DWORD *)a2;
LABEL_31:
          int v21 = (v20 | (v18 << (8 * v9))) + 2;
          unsigned int v17 = v20 + 2;
          if (v9 < 4) {
            unsigned int v17 = v21;
          }
          break;
        default:
          break;
      }
    }
    BOOL v22 = v17 == 1;
    if (v17 == 1) {
      uint64_t v23 = v8;
    }
    else {
      uint64_t v23 = v7;
    }
    if (v17 == 1) {
      uint64_t v24 = v6;
    }
    else {
      uint64_t v24 = v5;
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v23 + 32))(a1, a2, v24);
    a1[v9] = v22;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for KeyframeTrackContentBuilder.Conditional(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 40) - 8) + 64);
  if (v3 <= *(void *)(*(void *)(*(void *)(a3 + 32) - 8) + 64)) {
    unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 32) - 8) + 64);
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_22;
  }
  unint64_t v4 = v3 + 1;
  char v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    unsigned int v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      int v6 = *(_DWORD *)((char *)a1 + v4);
      if (!v6) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      int v6 = *(unsigned __int16 *)((char *)a1 + v4);
      if (!*(unsigned __int16 *)((char *)a1 + v4)) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_22:
      unsigned int v10 = *((unsigned __int8 *)a1 + v3);
      if (v10 >= 2) {
        return (v10 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v6 = *((unsigned __int8 *)a1 + v4);
  if (!*((unsigned char *)a1 + v4)) {
    goto LABEL_22;
  }
LABEL_14:
  int v9 = (v6 - 1) << v5;
  if (v4 > 3) {
    int v9 = 0;
  }
  if (v4)
  {
    if (v4 > 3) {
      LODWORD(v4) = 4;
    }
    switch((int)v4)
    {
      case 2:
        LODWORD(v4) = *a1;
        break;
      case 3:
        LODWORD(v4) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v4) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v4) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v4 | v9) + 255;
}

void storeEnumTagSinglePayload for KeyframeTrackContentBuilder.Conditional(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 32) - 8) + 64);
  if (*(void *)(*(void *)(*(void *)(a4 + 40) - 8) + 64) > v5) {
    unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 40) - 8) + 64);
  }
  size_t v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    int v7 = 0;
  }
  else if (v6 <= 3)
  {
    unsigned int v10 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v10))
    {
      int v7 = 4;
    }
    else if (v10 >= 0x100)
    {
      int v7 = 2;
    }
    else
    {
      int v7 = v10 > 1;
    }
  }
  else
  {
    int v7 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v8 = a2 - 255;
    if (v6 < 4)
    {
      int v9 = (v8 >> (8 * v6)) + 1;
      if (v5 != -1)
      {
        int v11 = v8 & ~(-1 << (8 * v6));
        bzero(a1, v6);
        if (v6 == 3)
        {
          *(_WORD *)a1 = v11;
          a1[2] = BYTE2(v11);
        }
        else if (v6 == 2)
        {
          *(_WORD *)a1 = v11;
        }
        else
        {
          *a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v8;
      int v9 = 1;
    }
    switch(v7)
    {
      case 1:
        a1[v6] = v9;
        break;
      case 2:
        *(_WORD *)&a1[v6] = v9;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x245FF7230);
      case 4:
        *(_DWORD *)&a1[v6] = v9;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v7)
    {
      case 1:
        a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v6] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v5] = -(char)a2;
        break;
    }
  }
}

uint64_t getEnumTag for KeyframeTrackContentBuilder.Conditional.Storage(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 40) - 8) + 64);
  if (v2 <= *(void *)(*(void *)(*(void *)(a2 + 32) - 8) + 64)) {
    unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 32) - 8) + 64);
  }
  uint64_t v3 = a1[v2];
  int v4 = v3 - 2;
  if (v3 >= 2)
  {
    if (v2 <= 3) {
      uint64_t v5 = v2;
    }
    else {
      uint64_t v5 = 4;
    }
    switch(v5)
    {
      case 1:
        int v6 = *a1;
        goto LABEL_12;
      case 2:
        int v6 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v6 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v6 = *(_DWORD *)a1;
LABEL_12:
        unsigned int v7 = (v6 | (v4 << (8 * v2))) + 2;
        LODWORD(v3) = v6 + 2;
        if (v2 >= 4) {
          uint64_t v3 = v3;
        }
        else {
          uint64_t v3 = v7;
        }
        break;
      default:
        return v3;
    }
  }
  return v3;
}

void destructiveInjectEnumTag for KeyframeTrackContentBuilder.Conditional.Storage(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  if (a2 > 1)
  {
    uint64_t v6 = *(void *)(*(void *)(a3 + 40) - 8);
    if (*(void *)(v6 + 64) <= *(void *)(*(void *)(*(void *)(a3 + 32) - 8) + 64)) {
      size_t v7 = *(void *)(*(void *)(*(void *)(a3 + 32) - 8) + 64);
    }
    else {
      size_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = a2 - 2;
    if (v7 < 4)
    {
      unsigned int v9 = v8 >> (8 * v7);
      int v10 = v8 & ~(-1 << (8 * v7));
      a1[v7] = v9 + 2;
      bzero(a1, v7);
      if (v7 == 3)
      {
        *(_WORD *)a1 = v10;
        a1[2] = BYTE2(v10);
      }
      else if (v7 == 2)
      {
        *(_WORD *)a1 = v10;
      }
      else
      {
        *a1 = v10;
      }
    }
    else
    {
      a1[v7] = 2;
      bzero(a1, v7);
      *(_DWORD *)a1 = v8;
    }
  }
  else
  {
    uint64_t v4 = *(void *)(*(void *)(a3 + 40) - 8);
    unint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 32) - 8) + 64);
    if (*(void *)(v4 + 64) > v5) {
      unint64_t v5 = *(void *)(v4 + 64);
    }
    a1[v5] = a2;
  }
}

uint64_t AnimationPath.append(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AnimationPath.Element();
  double v3 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))((char *)&v7 - v4, a1, v2, v3);
  type metadata accessor for Array();
  return Array.append(_:)();
}

uint64_t AnimationPath.Element.endVelocity.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v53 = a2;
  uint64_t v3 = type metadata accessor for AnimationPath.SpringElement();
  uint64_t v47 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v46 - v4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v51 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  unsigned int v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v50 = (char *)&v46 - v10;
  MEMORY[0x270FA5388](v11);
  uint64_t v48 = (uint64_t)&v46 - v12;
  uint64_t v46 = type metadata accessor for AnimationPath.CurveElement();
  uint64_t v49 = *(void *)(v46 - 8);
  MEMORY[0x270FA5388](v46);
  int v14 = (char *)&v46 - v13;
  uint64_t v15 = *(void *)(a1 - 8);
  double v17 = MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v46 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16))(v19, v52, a1, v17);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v21 = v47;
      (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v5, v19, v3);
      uint64_t v22 = *((void *)v5 + 2);
      long long v54 = *(_OWORD *)v5;
      *(void *)&long long v55 = v22;
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      uint64_t v24 = (uint64_t)v50;
      dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
      Spring.velocity<A>(target:initialVelocity:time:)(v24, AssociatedTypeWitness, AssociatedConformanceWitness, v53, *(double *)&v5[*(int *)(v3 + 52)]);
      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v24, AssociatedTypeWitness);
      return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v5, v3);
    }
    else
    {
      swift_getAssociatedConformanceWitness();
      dispatch thunk of static AdditiveArithmetic.zero.getter();
      return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v19, a1);
    }
  }
  else
  {
    uint64_t v26 = (int *)v46;
    (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v14, v19, v46);
    uint64_t v27 = type metadata accessor for HermiteCurve();
    HermiteCurve.velocity(at:)(v27, v48, 1.0);
    uint64_t v29 = (uint64_t)v50;
    uint64_t v28 = v51;
    if (v14[v26[10]] == 1)
    {
      double v30 = HermiteCurve.arcLength.getter();
      uint64_t v31 = swift_getAssociatedConformanceWitness();
      uint64_t v32 = v48;
      double v33 = (*(double (**)(uint64_t, uint64_t))(v31 + 24))(AssociatedTypeWitness, v31);
      VectorArithmetic.scaled(by:)(AssociatedTypeWitness, v31, (uint64_t)v8, 1.0 / sqrt(v33));
      VectorArithmetic.scaled(by:)(AssociatedTypeWitness, v31, v29, v30 / *(double *)&v14[v26[9]]);
      uint64_t v34 = *(void (**)(char *, uint64_t))(v28 + 8);
      v34(v8, AssociatedTypeWitness);
      Swift::UInt64 v35 = &v14[v26[11]];
      char v36 = v35[32];
      long long v37 = *((_OWORD *)v35 + 1);
      long long v54 = *(_OWORD *)v35;
      long long v55 = v37;
      char v56 = v36;
      double v38 = UnitCurve.velocity(at:)(1.0);
      VectorArithmetic.scaled(by:)(AssociatedTypeWitness, v31, v53, v38);
      v34((char *)v29, AssociatedTypeWitness);
      v34((char *)v32, AssociatedTypeWitness);
    }
    else
    {
      unint64_t v39 = &v14[v26[11]];
      char v40 = v39[32];
      long long v41 = *((_OWORD *)v39 + 1);
      long long v54 = *(_OWORD *)v39;
      long long v55 = v41;
      char v56 = v40;
      double v42 = UnitCurve.velocity(at:)(1.0);
      uint64_t v43 = swift_getAssociatedConformanceWitness();
      uint64_t v44 = v48;
      VectorArithmetic.scaled(by:)(AssociatedTypeWitness, v43, v29, v42);
      VectorArithmetic.scaled(by:)(AssociatedTypeWitness, v43, v53, 1.0 / *(double *)&v14[v26[9]]);
      uint64_t v45 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
      v45(v29, AssociatedTypeWitness);
      v45(v44, AssociatedTypeWitness);
    }
    return (*(uint64_t (**)(char *, int *))(v49 + 8))(v14, v26);
  }
}

uint64_t AnimationPath.Element.end.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v26 = a2;
  uint64_t v4 = type metadata accessor for AnimationPath.SpringElement();
  uint64_t v25 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v25 - v5;
  uint64_t v7 = type metadata accessor for AnimationPath.CurveElement();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v25 - v9;
  double v12 = MEMORY[0x270FA5388](v11);
  int v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16))(v14, v2, a1, v12);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v17 = v25;
      (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v6, v14, v4);
      uint64_t v18 = &v6[*(int *)(v4 + 48)];
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(v26, v18, AssociatedTypeWitness);
      return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v6, v4);
    }
    else
    {
      uint64_t v24 = swift_getAssociatedTypeWitness();
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v24 - 8) + 32))(v26, v14, v24);
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v14, v7);
    uint64_t v21 = type metadata accessor for HermiteCurve();
    uint64_t v22 = &v10[*(int *)(v21 + 36)];
    uint64_t v23 = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v23 - 8) + 16))(v26, v22, v23);
    return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v21 - 8) + 8))(v10, v21);
  }
}

uint64_t AnimationPath.SpringElement.init(spring:from:to:initialVelocity:end:duration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, double a7@<D0>)
{
  uint64_t v13 = *(void *)(a1 + 16);
  *(_OWORD *)a6 = *(_OWORD *)a1;
  *(void *)(a6 + 16) = v13;
  int v14 = (int *)type metadata accessor for AnimationPath.SpringElement();
  uint64_t v15 = a6 + v14[9];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32);
  v17(v15, a2, AssociatedTypeWitness);
  v17(a6 + v14[10], a3, AssociatedTypeWitness);
  v17(a6 + v14[11], a4, AssociatedTypeWitness);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v17)(a6 + v14[12], a5, AssociatedTypeWitness);
  *(double *)(a6 + v14[13]) = a7;
  return result;
}

__n128 AnimationPath.CurveElement.init(curve:duration:constantVelocity:timingCurve:)@<Q0>(uint64_t a1@<X0>, char a2@<W1>, __n128 *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  __n128 v16 = *a3;
  unint64_t v9 = a3[1].n128_u64[0];
  unint64_t v10 = a3[1].n128_u64[1];
  unsigned __int8 v11 = a3[2].n128_u8[0];
  uint64_t v12 = type metadata accessor for HermiteCurve();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32))(a4, a1, v12);
  uint64_t v13 = (int *)type metadata accessor for AnimationPath.CurveElement();
  *(double *)(a4 + v13[9]) = a5;
  *(unsigned char *)(a4 + v13[10]) = a2;
  int v14 = (__n128 *)(a4 + v13[11]);
  __n128 result = v16;
  *int v14 = v16;
  v14[1].n128_u64[0] = v9;
  v14[1].n128_u64[1] = v10;
  v14[2].n128_u8[0] = v11;
  return result;
}

uint64_t AnimationPath.currentVelocity.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v15 = a2;
  uint64_t v3 = type metadata accessor for AnimationPath.Element();
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v4 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v6 = (char *)&v13 - v5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  unint64_t v10 = (char *)&v13 - v9;
  uint64_t v16 = a1;
  type metadata accessor for Array();
  swift_getWitnessTable();
  BidirectionalCollection.last.getter();
  uint64_t v11 = *(void *)(v3 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v6, 1, v3) == 1)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v14);
    swift_getAssociatedConformanceWitness();
    return dispatch thunk of static AdditiveArithmetic.zero.getter();
  }
  else
  {
    AnimationPath.Element.endVelocity.getter(v3, (uint64_t)v10);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v6, v3);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(v15, v10, AssociatedTypeWitness);
  }
}

uint64_t AnimationPath.init(_:)(void (*a1)(uint64_t *))
{
  type metadata accessor for AnimationPath.Element();
  uint64_t v3 = static Array._allocateUninitialized(_:)();
  a1(&v3);
  return v3;
}

uint64_t AnimationPath.duration.getter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AnimationPath.Element();
  uint64_t v3 = swift_bridgeObjectRetain();
  if (!MEMORY[0x24C522EA0](v3, v2)) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v4 = 0;
  double v5 = 0.0;
  while (1)
  {
    uint64_t result = Array._checkSubscript(_:wasNativeTypeChecked:)();
    uint64_t v7 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      break;
    }
    double v5 = v5 + AnimationPath.Element.duration.getter(v2);
    ++v4;
    if (v7 == MEMORY[0x24C522EA0](a1, v2)) {
      return swift_bridgeObjectRelease();
    }
  }
  __break(1u);
  return result;
}

uint64_t AnimationPath.update(value:time:)(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness - 8);
  uint64_t v11 = (char *)v13 - v10;
  v13[1] = a3;
  type metadata accessor for AnimationPath.Element();
  type metadata accessor for Array();
  swift_getWitnessTable();
  uint64_t result = Collection.isEmpty.getter();
  if ((result & 1) == 0)
  {
    AnimationPath.animatableData(at:)(a3, a4, a5, (uint64_t)v11, a1);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(a5 + 32))(v11, a4, a5);
  }
  return result;
}

uint64_t AnimationPath.update(velocity:time:)(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness - 8);
  uint64_t v11 = (char *)&v13 - v10;
  AnimationPath.velocity(at:)(a3, a4, (uint64_t)&v13 - v10, a1);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(a5 + 32))(v11, a4, a5);
}

double AnimationPath.Element.duration.getter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for AnimationPath.SpringElement();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v20 - v6;
  uint64_t v8 = type metadata accessor for AnimationPath.CurveElement();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v20 - v10;
  uint64_t v12 = *(void *)(a1 - 8);
  double v14 = MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))(v16, v2, a1, v14);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v16, v4);
      double v18 = *(double *)&v7[*(int *)(v4 + 52)];
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v12 + 8))(v16, a1);
      return 0.0;
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v16, v8);
    double v18 = *(double *)&v11[*(int *)(v8 + 36)];
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  return v18;
}

uint64_t AnimationPath.animatableData(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v10 = type metadata accessor for AnimationPath.Element();
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v35 = *(void *)(v11 - 8);
  uint64_t v36 = v11;
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v28 - v12;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v34 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v33 = (uint64_t)&v28 - v15;
  uint64_t v16 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v28 - v18;
  uint64_t v20 = swift_bridgeObjectRetain();
  if (MEMORY[0x24C522EA0](v20, v10))
  {
    uint64_t v29 = AssociatedTypeWitness;
    uint64_t v30 = a3;
    uint64_t v31 = a2;
    uint64_t v32 = a4;
    uint64_t v21 = 0;
    uint64_t v22 = a1 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
    uint64_t v23 = (uint64_t (**)(char *, uint64_t))(v16 + 8);
    while (1)
    {
      uint64_t result = Array._checkSubscript(_:wasNativeTypeChecked:)();
      uint64_t v25 = v21 + 1;
      if (__OFADD__(v21, 1)) {
        break;
      }
      (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, v22 + *(void *)(v16 + 72) * v21, v10);
      if (a5 <= AnimationPath.Element.duration.getter(v10))
      {
        swift_bridgeObjectRelease();
        AnimationPath.Element.animatableData(at:)(v10, v32, a5);
        return (*v23)(v19, v10);
      }
      double v26 = AnimationPath.Element.duration.getter(v10);
      (*v23)(v19, v10);
      a5 = a5 - v26;
      ++v21;
      if (v25 == MEMORY[0x24C522EA0](a1, v10))
      {
        swift_bridgeObjectRelease();
        a4 = v32;
        uint64_t AssociatedTypeWitness = v29;
        goto LABEL_8;
      }
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
LABEL_8:
    uint64_t v37 = a1;
    type metadata accessor for Array();
    swift_getWitnessTable();
    BidirectionalCollection.last.getter();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v13, 1, v10) == 1)
    {
      (*(void (**)(char *, uint64_t))(v35 + 8))(v13, v36);
      swift_getAssociatedConformanceWitness();
      return dispatch thunk of static AdditiveArithmetic.zero.getter();
    }
    else
    {
      uint64_t v27 = v33;
      AnimationPath.Element.end.getter(v10, v33);
      (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v10);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v34 + 32))(a4, v27, AssociatedTypeWitness);
    }
  }
  return result;
}

uint64_t AnimationPath.velocity(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v8 = type metadata accessor for AnimationPath.Element();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v19 - v10;
  uint64_t v12 = swift_bridgeObjectRetain();
  if (MEMORY[0x24C522EA0](v12, v8))
  {
    uint64_t v19 = a2;
    uint64_t v20 = a3;
    uint64_t v13 = 0;
    uint64_t v14 = a1 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v15 = (uint64_t (**)(char *, uint64_t))(v9 + 8);
    while (1)
    {
      uint64_t result = Array._checkSubscript(_:wasNativeTypeChecked:)();
      uint64_t v17 = v13 + 1;
      if (__OFADD__(v13, 1)) {
        break;
      }
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v14 + *(void *)(v9 + 72) * v13, v8);
      if (a4 <= AnimationPath.Element.duration.getter(v8))
      {
        swift_bridgeObjectRelease();
        AnimationPath.Element.velocity(at:)(v8, v20, a4);
        return (*v15)(v11, v8);
      }
      double v18 = AnimationPath.Element.duration.getter(v8);
      (*v15)(v11, v8);
      a4 = a4 - v18;
      ++v13;
      if (v17 == MEMORY[0x24C522EA0](a1, v8)) {
        goto LABEL_6;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_6:
    swift_bridgeObjectRelease();
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    return dispatch thunk of static AdditiveArithmetic.zero.getter();
  }
  return result;
}

uint64_t type metadata accessor for AnimationPath.Element()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t AnimationPath.Element.animatableData(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v53 = a2;
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v52 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v48 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v49 = (char *)&v46 - v10;
  MEMORY[0x270FA5388](v11);
  uint64_t v51 = (char *)&v46 - v12;
  uint64_t v13 = type metadata accessor for AnimationPath.SpringElement();
  uint64_t v47 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v46 - v14;
  uint64_t v50 = v6;
  uint64_t v16 = (int *)type metadata accessor for AnimationPath.CurveElement();
  uint64_t v17 = *((void *)v16 - 1);
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v46 - v18;
  double v21 = MEMORY[0x270FA5388](v20);
  uint64_t v23 = (char *)&v46 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v24 + 16))(v23, v3, a1, v21);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v26 = v47;
      (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v15, v23, v13);
      uint64_t v27 = v52;
      (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v51, &v15[*(int *)(v13 + 36)], AssociatedTypeWitness);
      uint64_t v28 = *((void *)v15 + 2);
      long long v54 = *(_OWORD *)v15;
      *(void *)&long long v55 = v28;
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      uint64_t v30 = (uint64_t)v48;
      dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
      uint64_t v31 = v49;
      Spring.value<A>(target:initialVelocity:time:)(v30, a3, (uint64_t)&v15[*(int *)(v13 + 44)], AssociatedTypeWitness, AssociatedConformanceWitness);
      uint64_t v32 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
      v32(v30, AssociatedTypeWitness);
      uint64_t v33 = v51;
      dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)();
      v32((uint64_t)v31, AssociatedTypeWitness);
      v32((uint64_t)v33, AssociatedTypeWitness);
      return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v15, v13);
    }
    else
    {
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v52 + 32))(v53, v23, AssociatedTypeWitness);
    }
  }
  else
  {
    (*(void (**)(char *, char *, int *))(v17 + 32))(v19, v23, v16);
    if (a3 >= 0.0)
    {
      if (AnimationPath.Element.duration.getter(a1) >= a3)
      {
        uint64_t v37 = &v19[v16[11]];
        char v38 = v37[32];
        long long v39 = *((_OWORD *)v37 + 1);
        long long v54 = *(_OWORD *)v37;
        long long v55 = v39;
        char v56 = v38;
        double v40 = UnitCurve.value(at:)(a3 / *(double *)&v19[v16[9]]);
        int v41 = v19[v16[10]];
        uint64_t v42 = type metadata accessor for HermiteCurve();
        uint64_t v43 = v42;
        uint64_t v44 = v53;
        if (v41 == 1)
        {
          double v45 = HermiteCurve.arcLength.getter();
          HermiteCurve.value(atArcLength:)(v43, v44, v40 * v45);
        }
        else
        {
          HermiteCurve.value(at:)(v42, v53, v40);
        }
        return (*(uint64_t (**)(char *, int *))(v17 + 8))(v19, v16);
      }
      else
      {
        uint64_t v36 = type metadata accessor for HermiteCurve();
        (*(void (**)(uint64_t, char *, uint64_t))(v52 + 16))(v53, &v19[*(int *)(v36 + 36)], AssociatedTypeWitness);
        return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v36 - 8) + 8))(v19, v36);
      }
    }
    else
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v52 + 16))(v53, v19, AssociatedTypeWitness);
      uint64_t v35 = type metadata accessor for HermiteCurve();
      return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v35 - 8) + 8))(v19, v35);
    }
  }
}

uint64_t AnimationPath.Element.velocity(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v60 = a2;
  uint64_t v5 = type metadata accessor for AnimationPath.SpringElement();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v55 = v5;
  uint64_t v56 = v6;
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v54 - v7;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v58 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v59 = AssociatedTypeWitness;
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v11 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v57 = (uint64_t)&v54 - v13;
  uint64_t v14 = type metadata accessor for AnimationPath.CurveElement();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v54 - v16;
  uint64_t v18 = *(void *)(a1 - 8);
  double v20 = MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v54 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t, double))(v18 + 16))(v22, v61, a1, v20);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v24 = v55;
      uint64_t v25 = v56;
      (*(void (**)(char *, char *, uint64_t))(v56 + 32))(v8, v22, v55);
      uint64_t v26 = *((void *)v8 + 2);
      long long v62 = *(_OWORD *)v8;
      uint64_t v63 = v26;
      uint64_t v27 = v59;
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      uint64_t v29 = v57;
      dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
      Spring.velocity<A>(target:initialVelocity:time:)(v29, v27, AssociatedConformanceWitness, v60, a3);
      (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v29, v27);
      return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v8, v24);
    }
    else
    {
      swift_getAssociatedConformanceWitness();
      dispatch thunk of static AdditiveArithmetic.zero.getter();
      return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v22, a1);
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v22, v14);
    double v31 = *(double *)&v17[*(int *)(v14 + 36)];
    uint64_t v32 = v15;
    if (v31 > 0.0 && a3 >= 0.0 && v31 >= a3)
    {
      uint64_t v33 = &v17[*(int *)(v14 + 44)];
      uint64_t v34 = *(void *)v33;
      uint64_t v35 = *((void *)v33 + 1);
      uint64_t v54 = v14;
      uint64_t v36 = *((void *)v33 + 2);
      uint64_t v37 = *((void *)v33 + 3);
      double v61 = v17;
      *(void *)&long long v62 = v34;
      char v38 = v33[32];
      *((void *)&v62 + 1) = v35;
      uint64_t v63 = v36;
      Swift::Double v39 = a3 / v31;
      uint64_t v64 = v37;
      char v65 = v38;
      double v40 = UnitCurve.value(at:)(v39);
      *(void *)&long long v62 = v34;
      *((void *)&v62 + 1) = v35;
      uint64_t v63 = v36;
      uint64_t v64 = v37;
      uint64_t v41 = v54;
      char v65 = v38;
      uint64_t v42 = v61;
      double v43 = UnitCurve.velocity(at:)(v39);
      int v44 = v42[*(int *)(v41 + 40)];
      uint64_t v45 = type metadata accessor for HermiteCurve();
      uint64_t v46 = v45;
      uint64_t v47 = v60;
      if (v44 == 1)
      {
        double v48 = HermiteCurve.arcLength.getter();
        HermiteCurve.velocity(atArcLength:)(v46, v47, v40 * v48);
        return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v42, v41);
      }
      else
      {
        uint64_t v49 = v11;
        HermiteCurve.velocity(at:)(v45, (uint64_t)v11, v40);
        uint64_t v50 = v59;
        uint64_t v51 = swift_getAssociatedConformanceWitness();
        uint64_t v52 = v57;
        VectorArithmetic.scaled(by:)(v50, v51, v57, 1.0 / v31);
        uint64_t v53 = *(void (**)(char *, uint64_t))(v58 + 8);
        v53(v49, v50);
        VectorArithmetic.scaled(by:)(v50, v51, v47, v43);
        v53((char *)v52, v50);
        return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v42, v54);
      }
    }
    else
    {
      swift_getAssociatedConformanceWitness();
      dispatch thunk of static AdditiveArithmetic.zero.getter();
      return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    }
  }
}

uint64_t static AnimationPath.CurveElement.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((static HermiteCurve.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = (int *)type metadata accessor for AnimationPath.CurveElement();
  if (*(double *)(a1 + v4[9]) != *(double *)(a2 + v4[9])
    || *(unsigned __int8 *)(a1 + v4[10]) != *(unsigned __int8 *)(a2 + v4[10]))
  {
    return 0;
  }
  uint64_t v5 = v4[11];
  uint64_t v6 = (float64x2_t *)(a1 + v5);
  int v7 = *(unsigned __int8 *)(a1 + v5 + 32);
  uint64_t v8 = a2 + v5;
  float64x2_t v10 = *v6;
  float64x2_t v9 = v6[1];
  float64x2_t v12 = *(float64x2_t *)v8;
  float64x2_t v11 = *(float64x2_t *)(v8 + 16);
  int v13 = *(unsigned __int8 *)(v8 + 32);
  if (v7 != 1) {
    return (v13 & 1) == 0
  }
        && (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(v10, v12), (int32x4_t)vceqq_f64(v9, v11))), 0xFuLL))) & 1) != 0;
  int8x16_t v14 = vorrq_s8((int8x16_t)vdupq_lane_s64(*(uint64_t *)&v9.f64[0], 0), (int8x16_t)v10);
  if (!(v14.i64[1] | *(void *)&v10.f64[0] | *(void *)&v9.f64[1])) {
    return v13
  }
        && !(vorrq_s8((int8x16_t)vdupq_lane_s64(*(uint64_t *)&v11, 0), *(int8x16_t *)&v12).i64[1] | *(void *)&v12.f64[0] | *(void *)&v11.f64[1]);
  uint64_t v15 = v14.i64[1] | *(void *)&v9.f64[1];
  if (*(void *)&v10.f64[0] == 1 && !v15)
  {
    if (!v13) {
      return 0;
    }
    int8x16_t v16 = vorrq_s8((int8x16_t)vdupq_lane_s64(*(uint64_t *)&v11.f64[0], 0), (int8x16_t)v12);
    BOOL v17 = v16.i64[1] | *(void *)&v12.f64[0] | *(void *)&v11.f64[1] && *(void *)&v12.f64[0] == 1;
    return v17 && (v16.i64[1] | *(void *)&v11.f64[1]) == 0;
  }
  if (*(void *)&v10.f64[0] == 2 && !v15)
  {
    if (!v13) {
      return 0;
    }
    int8x16_t v20 = vorrq_s8((int8x16_t)vdupq_lane_s64(*(uint64_t *)&v11.f64[0], 0), (int8x16_t)v12);
    if (!(v20.i64[1] | *(void *)&v12.f64[0] | *(void *)&v11.f64[1])) {
      return 0;
    }
    uint64_t v21 = v20.i64[1] | *(void *)&v11.f64[1];
    if (*(void *)&v12.f64[0] == 1 && !v21) {
      return 0;
    }
    return *(void *)&v12.f64[0] == 2 && !v21;
  }
  if ((v13 & 1) == 0) {
    return 0;
  }
  int8x16_t v22 = vorrq_s8((int8x16_t)vdupq_lane_s64(*(uint64_t *)&v11.f64[0], 0), (int8x16_t)v12);
  if (!(v22.i64[1] | *(void *)&v12.f64[0] | *(void *)&v11.f64[1])) {
    return 0;
  }
  uint64_t result = 1;
  if ((unint64_t)(*(void *)&v12.f64[0] - 1) <= 1 && !(v22.i64[1] | *(void *)&v11.f64[1])) {
    return 0;
  }
  return result;
}

BOOL static AnimationPath.SpringElement.== infix(_:_:)(double *a1, double *a2)
{
  BOOL v3 = *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
  if (v3
    && (swift_getAssociatedTypeWitness(),
        uint64_t v6 = type metadata accessor for AnimationPath.SpringElement(),
        swift_getAssociatedConformanceWitness(),
        (dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
    && (dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0
    && (dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0
    && (dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
  {
    return *(double *)((char *)a1 + *(int *)(v6 + 52)) == *(double *)((char *)a2 + *(int *)(v6 + 52));
  }
  else
  {
    return 0;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnimationPath<A>.CurveElement(uint64_t a1, uint64_t a2)
{
  return static AnimationPath.CurveElement.== infix(_:_:)(a1, a2);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AnimationPath<A>.SpringElement(double *a1, double *a2)
{
  return static AnimationPath.SpringElement.== infix(_:_:)(a1, a2);
}

uint64_t type metadata accessor for AnimationPath.SpringElement()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for AnimationPath.CurveElement()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for AnimationPath()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for AnimationPath.CurveElement()
{
  uint64_t result = type metadata accessor for HermiteCurve();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AnimationPath.CurveElement(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = v6 + v7;
  uint64_t v9 = ((v6 + v7 + ((v6 + v7 + ((v6 + v7) & ~v7)) & ~v7)) & ~v7) + v6;
  if (v7 > 7 || (*(_DWORD *)(v5 + 80) & 0x100000) != 0 || ((v9 + 23) & 0xFFFFFFFFFFFFFFF8) + 33 > 0x18)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v13 = AssociatedTypeWitness;
    uint64_t v14 = ~v7;
    uint64_t v15 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16);
    v15(a1, a2, AssociatedTypeWitness);
    v15((uint64_t *)(((unint64_t)a1 + v8) & v14), (uint64_t *)(((unint64_t)a2 + v8) & v14), v13);
    unint64_t v16 = (v8 + (((unint64_t)a2 + v8) & v14)) & v14;
    v15((uint64_t *)((v8 + (((unint64_t)a1 + v8) & v14)) & v14), (uint64_t *)v16, v13);
    v15((uint64_t *)((v8 + ((v8 + (((unint64_t)a1 + v8) & v14)) & v14)) & v14), (uint64_t *)((v8 + v16) & v14), v13);
    unint64_t v17 = ((unint64_t)a1 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v18 = ((unint64_t)a2 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v17 = *(void *)v18;
    *(unsigned char *)(v17 + 8) = *(unsigned char *)(v18 + 8);
    unint64_t v19 = ((unint64_t)a1 + v9 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v20 = ((unint64_t)a2 + v9 + 23) & 0xFFFFFFFFFFFFFFF8;
    long long v22 = *(_OWORD *)v20;
    long long v21 = *(_OWORD *)(v20 + 16);
    *(unsigned char *)(v19 + 32) = *(unsigned char *)(v20 + 32);
    *(_OWORD *)unint64_t v19 = v22;
    *(_OWORD *)(v19 + 16) = v21;
  }
  return a1;
}

uint64_t initializeWithCopy for AnimationPath.CurveElement(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  uint64_t v7 = v5 + 16;
  v6(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 64);
  uint64_t v10 = v8 + v9;
  v6((v8 + v9 + a1) & ~v9, (v8 + v9 + a2) & ~v9, AssociatedTypeWitness);
  uint64_t v11 = (v8 + v9 + ((v8 + v9 + a2) & ~v9)) & ~v9;
  v6((v8 + v9 + ((v8 + v9 + a1) & ~v9)) & ~v9, v11, AssociatedTypeWitness);
  v6((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9, (v10 + v11) & ~v9, AssociatedTypeWitness);
  uint64_t v12 = ((v10 + ((v10 + (v10 & ~v9)) & ~v9)) & ~v9) + v8;
  uint64_t v13 = v12 + a1;
  uint64_t v14 = v12 + a2;
  unint64_t v15 = (v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = (v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v15 = *(void *)v16;
  *(unsigned char *)(v15 + 8) = *(unsigned char *)(v16 + 8);
  unint64_t v17 = (v14 + 23) & 0xFFFFFFFFFFFFFFF8;
  long long v19 = *(_OWORD *)v17;
  long long v18 = *(_OWORD *)(v17 + 16);
  unint64_t v20 = (v13 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)(v20 + 32) = *(unsigned char *)(v17 + 32);
  *(_OWORD *)unint64_t v20 = v19;
  *(_OWORD *)(v20 + 16) = v18;
  return a1;
}

uint64_t assignWithCopy for AnimationPath.CurveElement(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24);
  uint64_t v7 = v5 + 24;
  v6(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v7 + 40);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 56);
  uint64_t v10 = v8 + v9;
  v6((v8 + v9 + a1) & ~v9, (v8 + v9 + a2) & ~v9, AssociatedTypeWitness);
  uint64_t v11 = (v8 + v9 + ((v8 + v9 + a2) & ~v9)) & ~v9;
  v6((v8 + v9 + ((v8 + v9 + a1) & ~v9)) & ~v9, v11, AssociatedTypeWitness);
  v6((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9, (v10 + v11) & ~v9, AssociatedTypeWitness);
  uint64_t v12 = ((v10 + ((v10 + (v10 & ~v9)) & ~v9)) & ~v9) + v8;
  uint64_t v13 = v12 + a1;
  uint64_t v14 = v12 + a2;
  unint64_t v15 = (v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = (v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v15 = *(void *)v16;
  *(unsigned char *)(v15 + 8) = *(unsigned char *)(v16 + 8);
  unint64_t v17 = (v14 + 23) & 0xFFFFFFFFFFFFFFF8;
  long long v19 = *(_OWORD *)v17;
  long long v18 = *(_OWORD *)(v17 + 16);
  unint64_t v20 = (v13 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)(v20 + 32) = *(unsigned char *)(v17 + 32);
  *(_OWORD *)unint64_t v20 = v19;
  *(_OWORD *)(v20 + 16) = v18;
  return a1;
}

uint64_t initializeWithTake for AnimationPath.CurveElement(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  uint64_t v7 = v5 + 32;
  v6(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v7 + 32);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 48);
  uint64_t v10 = v8 + v9;
  v6((v8 + v9 + a1) & ~v9, (v8 + v9 + a2) & ~v9, AssociatedTypeWitness);
  uint64_t v11 = (v8 + v9 + ((v8 + v9 + a2) & ~v9)) & ~v9;
  v6((v8 + v9 + ((v8 + v9 + a1) & ~v9)) & ~v9, v11, AssociatedTypeWitness);
  v6((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9, (v10 + v11) & ~v9, AssociatedTypeWitness);
  uint64_t v12 = ((v10 + ((v10 + (v10 & ~v9)) & ~v9)) & ~v9) + v8;
  uint64_t v13 = v12 + a1;
  uint64_t v14 = v12 + a2;
  unint64_t v15 = (v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = (v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v15 = *(void *)v16;
  *(unsigned char *)(v15 + 8) = *(unsigned char *)(v16 + 8);
  unint64_t v17 = (v14 + 23) & 0xFFFFFFFFFFFFFFF8;
  long long v19 = *(_OWORD *)v17;
  long long v18 = *(_OWORD *)(v17 + 16);
  unint64_t v20 = (v13 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)(v20 + 32) = *(unsigned char *)(v17 + 32);
  *(_OWORD *)unint64_t v20 = v19;
  *(_OWORD *)(v20 + 16) = v18;
  return a1;
}

uint64_t assignWithTake for AnimationPath.CurveElement(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40);
  uint64_t v7 = v5 + 40;
  v6(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v7 + 24);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 40);
  uint64_t v10 = v8 + v9;
  v6((v8 + v9 + a1) & ~v9, (v8 + v9 + a2) & ~v9, AssociatedTypeWitness);
  uint64_t v11 = (v8 + v9 + ((v8 + v9 + a2) & ~v9)) & ~v9;
  v6((v8 + v9 + ((v8 + v9 + a1) & ~v9)) & ~v9, v11, AssociatedTypeWitness);
  v6((v10 + ((v10 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & ~v9, (v10 + v11) & ~v9, AssociatedTypeWitness);
  uint64_t v12 = ((v10 + ((v10 + (v10 & ~v9)) & ~v9)) & ~v9) + v8;
  uint64_t v13 = v12 + a1;
  uint64_t v14 = v12 + a2;
  unint64_t v15 = (v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = (v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v15 = *(void *)v16;
  *(unsigned char *)(v15 + 8) = *(unsigned char *)(v16 + 8);
  unint64_t v17 = (v14 + 23) & 0xFFFFFFFFFFFFFFF8;
  long long v19 = *(_OWORD *)v17;
  long long v18 = *(_OWORD *)(v17 + 16);
  unint64_t v20 = (v13 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)(v20 + 32) = *(unsigned char *)(v17 + 32);
  *(_OWORD *)unint64_t v20 = v19;
  *(_OWORD *)(v20 + 16) = v18;
  return a1;
}

uint64_t getEnumTagSinglePayload for AnimationPath.CurveElement(unsigned __int8 *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  if (v6 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = ((*(void *)(*(void *)(AssociatedTypeWitness - 8) + 64)
       + v8
       + ((*(void *)(*(void *)(AssociatedTypeWitness - 8) + 64)
         + v8
         + ((*(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) + v8) & ~v8)) & ~v8)) & ~v8)
     + *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  if (v7 < a2)
  {
    unint64_t v10 = ((v9 + 23) & 0xFFFFFFFFFFFFFFF8) + 33;
    if (v10 < 4) {
      unsigned int v11 = ((a2 - v7 + 255) >> (8 * v10)) + 1;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = a1[v10];
        if (!a1[v10]) {
          break;
        }
        goto LABEL_21;
      case 2:
        int v14 = *(unsigned __int16 *)&a1[v10];
        if (*(_WORD *)&a1[v10]) {
          goto LABEL_21;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x245FFA9FCLL);
      case 4:
        int v14 = *(_DWORD *)&a1[v10];
        if (!v14) {
          break;
        }
LABEL_21:
        int v15 = (v14 - 1) << (8 * v10);
        if (v10 >= 4) {
          int v15 = 0;
        }
        if (v10 == 1) {
          int v16 = *a1;
        }
        else {
          int v16 = *(_DWORD *)a1;
        }
        int v20 = v7 + (v16 | v15);
        return (v20 + 1);
      default:
        break;
    }
  }
  if (v6 >= 0xFE)
  {
    unint64_t v17 = *(uint64_t (**)(unsigned __int8 *))(v5 + 48);
    return v17(a1);
  }
  unsigned int v19 = *(unsigned __int8 *)(((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8) + 8);
  if (v19 < 2) {
    return 0;
  }
  int v20 = (v19 + 2147483646) & 0x7FFFFFFF;
  return (v20 + 1);
}

void storeEnumTagSinglePayload for AnimationPath.CurveElement(unsigned char *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((*(void *)(v6 + 64) + v9 + ((*(void *)(v6 + 64) + v9 + ((*(void *)(v6 + 64) + v9) & ~v9)) & ~v9)) & ~v9)
      + *(void *)(v6 + 64);
  unint64_t v11 = ((v10 + 23) & 0xFFFFFFFFFFFFFFF8) + 33;
  char v12 = 8 * v11;
  if (v8 >= a3)
  {
    int v15 = 0;
    if (v8 >= a2)
    {
LABEL_17:
      switch(v15)
      {
        case 1:
          a1[v11] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 2:
          *(_WORD *)&a1[v11] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 3:
          goto LABEL_57;
        case 4:
          *(_DWORD *)&a1[v11] = 0;
          goto LABEL_33;
        default:
LABEL_33:
          if (a2)
          {
LABEL_34:
            if (v7 < 0xFE)
            {
              *(unsigned char *)(((unint64_t)&a1[v10 + 7] & 0xFFFFFFFFFFFFFFF8) + 8) = a2 + 1;
            }
            else if (v7 >= a2)
            {
              uint64_t v23 = *(void (**)(unsigned char *, uint64_t))(v6 + 56);
              v23(a1, a2);
            }
            else
            {
              if (v10 <= 3) {
                int v20 = ~(-1 << (8 * v10));
              }
              else {
                int v20 = -1;
              }
              if (v10)
              {
                int v21 = v20 & (~v7 + a2);
                if (v10 <= 3) {
                  int v22 = v10;
                }
                else {
                  int v22 = 4;
                }
                bzero(a1, v10);
                switch(v22)
                {
                  case 2:
                    *(_WORD *)a1 = v21;
                    break;
                  case 3:
                    *(_WORD *)a1 = v21;
                    a1[2] = BYTE2(v21);
                    break;
                  case 4:
                    *(_DWORD *)a1 = v21;
                    break;
                  default:
                    *a1 = v21;
                    break;
                }
              }
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    if (v11 <= 3) {
      unsigned int v13 = ((a3 - v8 + 255) >> v12) + 1;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v13 >= 0x10000) {
      int v14 = 4;
    }
    else {
      int v14 = 2;
    }
    if (v13 < 0x100) {
      int v14 = 1;
    }
    if (v13 >= 2) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
    if (v8 >= a2) {
      goto LABEL_17;
    }
  }
  unsigned int v16 = ~v8 + a2;
  unsigned int v17 = v16 >> v12;
  if (v11 < 4) {
    int v18 = v17 + 1;
  }
  else {
    int v18 = 1;
  }
  if (v11 >= 4) {
    unsigned int v19 = v16;
  }
  else {
    unsigned int v19 = v16;
  }
  bzero(a1, ((v10 + 23) & 0xFFFFFFFFFFFFFFF8) + 33);
  if (v11 == 1) {
    *a1 = v19;
  }
  else {
    *(_DWORD *)a1 = v19;
  }
  switch(v15)
  {
    case 1:
      a1[v11] = v18;
      break;
    case 2:
      *(_WORD *)&a1[v11] = v18;
      break;
    case 3:
LABEL_57:
      __break(1u);
      JUMPOUT(0x245FFACE4);
    case 4:
      *(_DWORD *)&a1[v11] = v18;
      break;
    default:
      return;
  }
}

uint64_t type metadata completion function for AnimationPath.SpringElement()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AnimationPath.SpringElement(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + 7;
  unint64_t v10 = ((v7 + 7 + ((v7 + v6 + ((v7 + v6 + ((v7 + v6 + ((v6 + 24) & ~v6)) & ~v6)) & ~v6)) & ~v6)) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v6 > 7 || (*(_DWORD *)(v5 + 80) & 0x100000) != 0 || v10 > 0x18)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v14 = AssociatedTypeWitness;
    uint64_t v15 = ~v6;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
    unsigned int v16 = (char *)a1 + v6;
    unsigned int v17 = (char *)a2 + v6;
    uint64_t v18 = (unint64_t)(v16 + 24) & v15;
    uint64_t v19 = (unint64_t)(v17 + 24) & v15;
    int v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    v20(v18, v19, AssociatedTypeWitness);
    uint64_t v21 = (v8 + v18) & v15;
    uint64_t v22 = (v8 + v19) & v15;
    v20(v21, v22, v14);
    uint64_t v23 = (v8 + v21) & v15;
    uint64_t v24 = (v8 + v22) & v15;
    v20(v23, v24, v14);
    uint64_t v25 = (v8 + v23) & v15;
    uint64_t v26 = (v8 + v24) & v15;
    v20(v25, v26, v14);
    *(void *)((v9 + v25) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v9 + v26) & 0xFFFFFFFFFFFFFFF8);
  }
  return a1;
}

uint64_t destroy for AnimationPath.SpringElement(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v10 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  uint64_t v11 = v3 + 8;
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (a1 + v4 + 24) & ~v4;
  v10(v5, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v11 + 56) + v4;
  uint64_t v7 = (v6 + v5) & ~v4;
  v10(v7, AssociatedTypeWitness);
  uint64_t v8 = (v6 + v7) & ~v4;
  v10(v8, AssociatedTypeWitness);

  return ((uint64_t (*)(uint64_t, uint64_t))v10)((v6 + v8) & ~v4, AssociatedTypeWitness);
}

uint64_t initializeWithCopy for AnimationPath.SpringElement(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  uint64_t v7 = v5 + 16;
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = (v8 + 24 + a2) & ~v8;
  v6((v8 + 24 + a1) & ~v8, v9, AssociatedTypeWitness);
  uint64_t v10 = *(void *)(v7 + 48);
  uint64_t v11 = (v10 + v8 + ((v8 + 24 + a1) & ~v8)) & ~v8;
  uint64_t v12 = (v10 + v8 + v9) & ~v8;
  v6(v11, v12, AssociatedTypeWitness);
  uint64_t v13 = (v10 + v8 + v11) & ~v8;
  uint64_t v14 = (v10 + v8 + v12) & ~v8;
  v6(v13, v14, AssociatedTypeWitness);
  uint64_t v15 = (v10 + v8 + v13) & ~v8;
  uint64_t v16 = (v10 + v8 + v14) & ~v8;
  v6(v15, v16, AssociatedTypeWitness);
  *(void *)((v10 + 7 + v15) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v10 + 7 + v16) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void *assignWithCopy for AnimationPath.SpringElement(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 24);
  uint64_t v7 = v5 + 24;
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = ((unint64_t)a2 + v8 + 24) & ~v8;
  v6(((unint64_t)a1 + v8 + 24) & ~v8, v9, AssociatedTypeWitness);
  uint64_t v10 = *(void *)(v7 + 40);
  uint64_t v11 = (v10 + v8 + (((unint64_t)a1 + v8 + 24) & ~v8)) & ~v8;
  uint64_t v12 = (v10 + v8 + v9) & ~v8;
  v6(v11, v12, AssociatedTypeWitness);
  uint64_t v13 = (v10 + v8 + v11) & ~v8;
  uint64_t v14 = (v10 + v8 + v12) & ~v8;
  v6(v13, v14, AssociatedTypeWitness);
  uint64_t v15 = (v10 + v8 + v13) & ~v8;
  uint64_t v16 = (v10 + v8 + v14) & ~v8;
  v6(v15, v16, AssociatedTypeWitness);
  *(void *)((v10 + 7 + v15) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v10 + 7 + v16) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for AnimationPath.SpringElement(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  uint64_t v7 = v5 + 32;
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = (v8 + 24 + a2) & ~v8;
  v6((v8 + 24 + a1) & ~v8, v9, AssociatedTypeWitness);
  uint64_t v10 = *(void *)(v7 + 32);
  uint64_t v11 = (v10 + v8 + ((v8 + 24 + a1) & ~v8)) & ~v8;
  uint64_t v12 = (v10 + v8 + v9) & ~v8;
  v6(v11, v12, AssociatedTypeWitness);
  uint64_t v13 = (v10 + v8 + v11) & ~v8;
  uint64_t v14 = (v10 + v8 + v12) & ~v8;
  v6(v13, v14, AssociatedTypeWitness);
  uint64_t v15 = (v10 + v8 + v13) & ~v8;
  uint64_t v16 = (v10 + v8 + v14) & ~v8;
  v6(v15, v16, AssociatedTypeWitness);
  *(void *)((v10 + 7 + v15) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v10 + 7 + v16) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for AnimationPath.SpringElement(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40);
  uint64_t v7 = v5 + 40;
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = (v8 + 24 + a2) & ~v8;
  v6((v8 + 24 + a1) & ~v8, v9, AssociatedTypeWitness);
  uint64_t v10 = *(void *)(v7 + 24);
  uint64_t v11 = (v10 + v8 + ((v8 + 24 + a1) & ~v8)) & ~v8;
  uint64_t v12 = (v10 + v8 + v9) & ~v8;
  v6(v11, v12, AssociatedTypeWitness);
  uint64_t v13 = (v10 + v8 + v11) & ~v8;
  uint64_t v14 = (v10 + v8 + v12) & ~v8;
  v6(v13, v14, AssociatedTypeWitness);
  uint64_t v15 = (v10 + v8 + v13) & ~v8;
  uint64_t v16 = (v10 + v8 + v14) & ~v8;
  v6(v15, v16, AssociatedTypeWitness);
  *(void *)((v10 + 7 + v15) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v10 + 7 + v16) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnimationPath.SpringElement(_DWORD *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  if (!a2) {
    return 0;
  }
  if (v6 < a2)
  {
    uint64_t v8 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
    unint64_t v9 = ((v8 + ((v8 + v7 + ((v8 + v7 + ((v8 + v7 + ((v7 + 24) & ~v7)) & ~v7)) & ~v7)) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 8;
    uint64_t v10 = v9 & 0xFFFFFFF8;
    if ((v9 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = a2 - v6 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v9);
        if (!v14) {
          break;
        }
        goto LABEL_18;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v9);
        if (v14) {
          goto LABEL_18;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x245FFB80CLL);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v9);
        if (!v14) {
          break;
        }
LABEL_18:
        int v15 = v14 - 1;
        if (v10)
        {
          int v15 = 0;
          LODWORD(v10) = *a1;
        }
        return v6 + (v10 | v15) + 1;
      default:
        break;
    }
  }
  if (!v6) {
    return 0;
  }
  unsigned int v17 = *(uint64_t (**)(unint64_t))(v5 + 48);

  return v17(((unint64_t)a1 + v7 + 24) & ~v7);
}

void storeEnumTagSinglePayload for AnimationPath.SpringElement(_DWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  size_t v9 = ((*(void *)(v6 + 64)
       + ((*(void *)(v6 + 64)
         + v8
         + ((*(void *)(v6 + 64) + v8 + ((*(void *)(v6 + 64) + v8 + ((v8 + 24) & ~v8)) & ~v8)) & ~v8)) & ~v8)
       + 7) & 0xFFFFFFFFFFFFFFF8)
     + 8;
  if (v7 >= a3)
  {
    int v12 = 0;
    int v13 = a2 - v7;
    if (a2 <= v7)
    {
LABEL_14:
      switch(v12)
      {
        case 1:
          *((unsigned char *)a1 + v9) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 2:
          *(_WORD *)((char *)a1 + v9) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 3:
          goto LABEL_34;
        case 4:
          *(_DWORD *)((char *)a1 + v9) = 0;
          goto LABEL_26;
        default:
LABEL_26:
          if (a2)
          {
LABEL_27:
            uint64_t v16 = *(void (**)(unint64_t, uint64_t))(v6 + 56);
            v16(((unint64_t)a1 + v8 + 24) & ~v8, a2);
          }
          break;
      }
      return;
    }
  }
  else
  {
    if (((*(_DWORD *)(v6 + 64)
         + ((*(_DWORD *)(v6 + 64)
           + v8
           + ((*(_DWORD *)(v6 + 64)
             + v8
             + ((*(_DWORD *)(v6 + 64) + v8 + ((v8 + 24) & ~v8)) & ~v8)) & ~v8)) & ~v8)
         + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      unsigned int v10 = a3 - v7 + 1;
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      int v11 = 4;
    }
    else {
      int v11 = 2;
    }
    if (v10 < 0x100) {
      int v11 = 1;
    }
    if (v10 >= 2) {
      int v12 = v11;
    }
    else {
      int v12 = 0;
    }
    int v13 = a2 - v7;
    if (a2 <= v7) {
      goto LABEL_14;
    }
  }
  if (((*(_DWORD *)(v6 + 64)
       + ((*(_DWORD *)(v6 + 64)
         + v8
         + ((*(_DWORD *)(v6 + 64)
           + v8
           + ((*(_DWORD *)(v6 + 64) + v8 + ((v8 + 24) & ~v8)) & ~v8)) & ~v8)) & ~v8)
       + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
    int v14 = v13;
  else {
    int v14 = 1;
  }
  if (((*(_DWORD *)(v6 + 64)
       + ((*(_DWORD *)(v6 + 64)
         + v8
         + ((*(_DWORD *)(v6 + 64)
           + v8
           + ((*(_DWORD *)(v6 + 64) + v8 + ((v8 + 24) & ~v8)) & ~v8)) & ~v8)) & ~v8)
       + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    int v15 = ~v7 + a2;
    bzero(a1, v9);
    *a1 = v15;
  }
  switch(v12)
  {
    case 1:
      *((unsigned char *)a1 + v9) = v14;
      break;
    case 2:
      *(_WORD *)((char *)a1 + v9) = v14;
      break;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x245FFBA28);
    case 4:
      *(_DWORD *)((char *)a1 + v9) = v14;
      break;
    default:
      return;
  }
}

uint64_t type metadata completion function for AnimationPath.Element()
{
  uint64_t result = type metadata accessor for AnimationPath.CurveElement();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for AnimationPath.SpringElement();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_getAssociatedTypeWitness();
      if (v3 <= 0x3F)
      {
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for AnimationPath.Element(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = v7;
  unint64_t v9 = v6 + v7;
  unint64_t v10 = ((v6 + v8 + ((v6 + v8 + ((v6 + v8) & ~v8)) & ~v8)) & ~v8) + v6;
  unint64_t v11 = ((v10 + 23) & 0xFFFFFFFFFFFFFFF8) + 33;
  unint64_t v12 = v6 + 7;
  if (((v6 + 7 + ((v6 + v8 + ((v6 + v8 + ((v6 + v8 + ((v8 + 24) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & 0xFFFFFFFFFFFFFFF8)
     + 8 > v11)
    unint64_t v11 = ((v6
          + 7
          + ((v6
            + v7
            + ((v6
              + v7
              + ((v6 + v7 + ((v7 + 24) & ~(unint64_t)v7)) & ~(unint64_t)v7)) & ~(unint64_t)v7)) & ~(unint64_t)v7)) & 0xFFFFFFFFFFFFFFF8)
        + 8;
  if (v6 <= v11) {
    unint64_t v13 = v11;
  }
  else {
    unint64_t v13 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  }
  BOOL v14 = v7 <= 7u && (v7 & 0x100000) == 0;
  if (v14 && v13 + 1 <= 0x18)
  {
    uint64_t v15 = AssociatedTypeWitness;
    unsigned int v16 = a2[v13];
    unsigned int v17 = v16 - 3;
    if (v16 >= 3)
    {
      if (v13 <= 3) {
        uint64_t v18 = v13;
      }
      else {
        uint64_t v18 = 4;
      }
      switch(v18)
      {
        case 1:
          int v19 = *a2;
          if (v13 >= 4) {
            goto LABEL_29;
          }
          goto LABEL_21;
        case 2:
          int v19 = *(unsigned __int16 *)a2;
          if (v13 < 4) {
            goto LABEL_21;
          }
          goto LABEL_29;
        case 3:
          int v19 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v13 < 4) {
            goto LABEL_21;
          }
          goto LABEL_29;
        case 4:
          int v19 = *(_DWORD *)a2;
          if (v13 < 4)
          {
LABEL_21:
            unsigned int v16 = (v19 | (v17 << (8 * v13))) + 3;
            break;
          }
LABEL_29:
          unsigned int v16 = v19 + 3;
          if (v16 == 2) {
            goto LABEL_30;
          }
          goto LABEL_23;
        default:
          break;
      }
    }
    if (v16 == 2)
    {
LABEL_30:
      (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      char v33 = 2;
      goto LABEL_31;
    }
LABEL_23:
    uint64_t v21 = ~v8;
    if (v16 == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(void *)(a1 + 16) = *((void *)a2 + 2);
      uint64_t v22 = a1 + v8;
      uint64_t v23 = &a2[v8];
      uint64_t v24 = (v22 + 24) & v21;
      uint64_t v25 = (unint64_t)(v23 + 24) & v21;
      uint64_t v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
      v26(v24, v25, AssociatedTypeWitness);
      uint64_t v27 = (v9 + v24) & v21;
      uint64_t v28 = (v9 + v25) & v21;
      v26(v27, v28, v15);
      uint64_t v29 = (v9 + v27) & v21;
      uint64_t v30 = (v9 + v28) & v21;
      v26(v29, v30, v15);
      unint64_t v31 = (v9 + v29) & v21;
      unint64_t v32 = (v9 + v30) & v21;
      v26(v31, v32, v15);
      *(void *)((v12 + v31) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v12 + v32) & 0xFFFFFFFFFFFFFFF8);
      char v33 = 1;
LABEL_31:
      *(unsigned char *)(a1 + v13) = v33;
      return a1;
    }
    unint64_t v43 = v10;
    uint64_t v34 = *(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v5 + 16);
    v34(a1, a2, AssociatedTypeWitness);
    v34((v9 + a1) & v21, (unsigned __int8 *)((unint64_t)&a2[v9] & v21), v15);
    unint64_t v35 = (v9 + ((unint64_t)&a2[v9] & v21)) & v21;
    v34((v9 + ((v9 + a1) & v21)) & v21, (unsigned __int8 *)v35, v15);
    v34((v9 + ((v9 + ((v9 + a1) & v21)) & v21)) & v21, (unsigned __int8 *)((v9 + v35) & v21), v15);
    unint64_t v36 = (v43 + a1 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v37 = (unint64_t)&a2[v43 + 7] & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v36 = *(void *)v37;
    *(unsigned char *)(v36 + 8) = *(unsigned char *)(v37 + 8);
    unint64_t v38 = (v43 + a1 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v39 = (unint64_t)&a2[v43 + 23] & 0xFFFFFFFFFFFFFFF8;
    long long v41 = *(_OWORD *)v39;
    long long v40 = *(_OWORD *)(v39 + 16);
    *(unsigned char *)(v38 + 32) = *(unsigned char *)(v39 + 32);
    *(_OWORD *)unint64_t v38 = v41;
    *(_OWORD *)(v38 + 16) = v40;
    *(unsigned char *)(a1 + v13) = 0;
  }
  else
  {
    uint64_t v20 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v20 + ((v7 & 0xF8 ^ 0x1F8u) & (v7 + 16));
    swift_retain();
  }
  return a1;
}

uint64_t destroy for AnimationPath.Element(unsigned __int8 *a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v4 = *(void *)(v3 + 64);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = v4 + v5;
  unint64_t v7 = ((v4 + ((v4 + v5 + ((v4 + v5 + ((v4 + v5) & ~v5)) & ~v5)) & ~v5) + 23) & 0xFFFFFFFFFFFFFFF8) + 33;
  if (((v4 + ((v4 + v5 + ((v4 + v5 + ((v4 + v5 + ((v5 + 24) & ~v5)) & ~v5)) & ~v5)) & ~v5) + 7) & 0xFFFFFFFFFFFFFFF8)
     + 8 > v7)
    unint64_t v7 = ((v4 + ((v4 + v5 + ((v4 + v5 + ((v4 + v5 + ((v5 + 24) & ~v5)) & ~v5)) & ~v5)) & ~v5) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 8;
  if (v4 <= v7) {
    unint64_t v4 = v7;
  }
  unsigned int v8 = a1[v4];
  unsigned int v9 = v8 - 3;
  if (v8 >= 3)
  {
    if (v4 <= 3) {
      uint64_t v10 = v4;
    }
    else {
      uint64_t v10 = 4;
    }
    switch(v10)
    {
      case 1:
        int v11 = *a1;
        if (v4 >= 4) {
          goto LABEL_21;
        }
        goto LABEL_15;
      case 2:
        int v11 = *(unsigned __int16 *)a1;
        if (v4 >= 4) {
          goto LABEL_21;
        }
        goto LABEL_15;
      case 3:
        int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        if (v4 < 4) {
          goto LABEL_15;
        }
        goto LABEL_21;
      case 4:
        int v11 = *(_DWORD *)a1;
        if (v4 < 4)
        {
LABEL_15:
          unsigned int v8 = (v11 | (v9 << (8 * v4))) + 3;
          break;
        }
LABEL_21:
        unsigned int v8 = v11 + 3;
        if (v8 == 2) {
          goto LABEL_22;
        }
        goto LABEL_17;
      default:
        break;
    }
  }
  if (v8 == 2)
  {
LABEL_22:
    unsigned int v17 = *(uint64_t (**)(unsigned __int8 *, uint64_t))(v3 + 8);
    uint64_t v15 = a1;
    uint64_t v16 = AssociatedTypeWitness;
  }
  else
  {
LABEL_17:
    uint64_t v12 = ~v5;
    if (v8 == 1) {
      a1 = (unsigned __int8 *)((unint64_t)&a1[v5 + 24] & v12);
    }
    int v19 = *(void (**)(unsigned __int8 *, uint64_t))(v3 + 8);
    v19(a1, AssociatedTypeWitness);
    unint64_t v13 = (unint64_t)&a1[v6] & v12;
    v19((unsigned __int8 *)v13, AssociatedTypeWitness);
    unint64_t v14 = (v6 + v13) & v12;
    v19((unsigned __int8 *)v14, AssociatedTypeWitness);
    uint64_t v15 = (unsigned __int8 *)((v6 + v14) & v12);
    uint64_t v16 = AssociatedTypeWitness;
    unsigned int v17 = (uint64_t (*)(unsigned __int8 *, uint64_t))v19;
  }

  return v17(v15, v16);
}

uint64_t initializeWithCopy for AnimationPath.Element(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = v6 + v7;
  unint64_t v9 = ((v6 + v7 + ((v6 + v7 + ((v6 + v7) & ~v7)) & ~v7)) & ~v7) + v6;
  unint64_t v10 = ((v9 + 23) & 0xFFFFFFFFFFFFFFF8) + 33;
  unint64_t v11 = v6 + 7;
  if (((v6 + 7 + ((v6 + v7 + ((v6 + v7 + ((v6 + v7 + ((v7 + 24) & ~v7)) & ~v7)) & ~v7)) & ~v7)) & 0xFFFFFFFFFFFFFFF8)
     + 8 > v10)
    unint64_t v10 = ((v6 + 7 + ((v6 + v7 + ((v6 + v7 + ((v6 + v7 + ((v7 + 24) & ~v7)) & ~v7)) & ~v7)) & ~v7)) & 0xFFFFFFFFFFFFFFF8)
        + 8;
  if (v6 <= v10) {
    unint64_t v12 = v10;
  }
  else {
    unint64_t v12 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  }
  unsigned int v13 = a2[v12];
  unsigned int v14 = v13 - 3;
  if (v13 >= 3)
  {
    if (v12 <= 3) {
      uint64_t v15 = v12;
    }
    else {
      uint64_t v15 = 4;
    }
    switch(v15)
    {
      case 1:
        int v16 = *a2;
        if (v12 >= 4) {
          goto LABEL_22;
        }
        goto LABEL_16;
      case 2:
        int v16 = *(unsigned __int16 *)a2;
        if (v12 >= 4) {
          goto LABEL_22;
        }
        goto LABEL_16;
      case 3:
        int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        if (v12 < 4) {
          goto LABEL_16;
        }
        goto LABEL_22;
      case 4:
        int v16 = *(_DWORD *)a2;
        if (v12 < 4)
        {
LABEL_16:
          unsigned int v13 = (v16 | (v14 << (8 * v12))) + 3;
          break;
        }
LABEL_22:
        unsigned int v13 = v16 + 3;
        if (v13 == 2) {
          goto LABEL_23;
        }
        goto LABEL_18;
      default:
        break;
    }
  }
  if (v13 == 2)
  {
LABEL_23:
    (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    char v29 = 2;
  }
  else
  {
LABEL_18:
    uint64_t v17 = ~v7;
    if (v13 == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(void *)(a1 + 16) = *((void *)a2 + 2);
      uint64_t v18 = a1 + v7;
      int v19 = &a2[v7];
      uint64_t v20 = (v18 + 24) & v17;
      uint64_t v21 = (unint64_t)(v19 + 24) & v17;
      uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
      v22(v20, v21, AssociatedTypeWitness);
      uint64_t v23 = (v8 + v20) & v17;
      uint64_t v24 = (v8 + v21) & v17;
      v22(v23, v24, AssociatedTypeWitness);
      uint64_t v25 = (v8 + v23) & v17;
      uint64_t v26 = (v8 + v24) & v17;
      v22(v25, v26, AssociatedTypeWitness);
      uint64_t v27 = (v8 + v25) & v17;
      uint64_t v28 = (v8 + v26) & v17;
      v22(v27, v28, AssociatedTypeWitness);
      *(void *)((v11 + v27) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v11 + v28) & 0xFFFFFFFFFFFFFFF8);
      char v29 = 1;
    }
    else
    {
      unint64_t v39 = v9;
      uint64_t v30 = *(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v5 + 16);
      v30(a1, a2, AssociatedTypeWitness);
      v30((v8 + a1) & v17, (unsigned __int8 *)((unint64_t)&a2[v8] & v17), AssociatedTypeWitness);
      unint64_t v31 = (v8 + ((unint64_t)&a2[v8] & v17)) & v17;
      v30((v8 + ((v8 + a1) & v17)) & v17, (unsigned __int8 *)v31, AssociatedTypeWitness);
      v30((v8 + ((v8 + ((v8 + a1) & v17)) & v17)) & v17, (unsigned __int8 *)((v8 + v31) & v17), AssociatedTypeWitness);
      char v29 = 0;
      unint64_t v32 = (v39 + a1 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v33 = (unint64_t)&a2[v39 + 7] & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v32 = *(void *)v33;
      *(unsigned char *)(v32 + 8) = *(unsigned char *)(v33 + 8);
      unint64_t v34 = (v39 + a1 + 23) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v35 = (unint64_t)&a2[v39 + 23] & 0xFFFFFFFFFFFFFFF8;
      long long v37 = *(_OWORD *)v35;
      long long v36 = *(_OWORD *)(v35 + 16);
      *(unsigned char *)(v34 + 32) = *(unsigned char *)(v35 + 32);
      *(_OWORD *)unint64_t v34 = v37;
      *(_OWORD *)(v34 + 16) = v36;
    }
  }
  *(unsigned char *)(a1 + v12) = v29;
  return a1;
}

unsigned __int8 *assignWithCopy for AnimationPath.Element(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 != a2)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
    unint64_t v6 = *(void *)(v5 + 64);
    uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
    uint64_t v8 = v6 + v7;
    unint64_t v9 = ((v6 + v7 + ((v6 + v7 + ((v6 + v7) & ~v7)) & ~v7)) & ~v7) + v6;
    unint64_t v10 = ((v9 + 23) & 0xFFFFFFFFFFFFFFF8) + 33;
    unint64_t v11 = v6 + 7;
    if (((v6 + 7 + ((v6 + v7 + ((v6 + v7 + ((v6 + v7 + ((v7 + 24) & ~v7)) & ~v7)) & ~v7)) & ~v7)) & 0xFFFFFFFFFFFFFFF8)
       + 8 > v10)
      unint64_t v10 = ((v6 + 7 + ((v6 + v7 + ((v6 + v7 + ((v6 + v7 + ((v7 + 24) & ~v7)) & ~v7)) & ~v7)) & ~v7)) & 0xFFFFFFFFFFFFFFF8)
          + 8;
    if (v6 <= v10) {
      unint64_t v12 = v10;
    }
    else {
      unint64_t v12 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
    }
    unsigned int v13 = a1[v12];
    unsigned int v14 = v13 - 3;
    if (v13 >= 3)
    {
      if (v12 <= 3) {
        uint64_t v15 = v12;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a1;
          if (v12 < 4) {
            goto LABEL_15;
          }
          goto LABEL_19;
        case 2:
          int v16 = *(unsigned __int16 *)a1;
          if (v12 < 4) {
            goto LABEL_15;
          }
          goto LABEL_19;
        case 3:
          int v16 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v12 < 4) {
            goto LABEL_15;
          }
          goto LABEL_19;
        case 4:
          int v16 = *(_DWORD *)a1;
          if (v12 < 4) {
LABEL_15:
          }
            unsigned int v13 = (v16 | (v14 << (8 * v12))) + 3;
          else {
LABEL_19:
          }
            unsigned int v13 = v16 + 3;
          break;
        default:
          break;
      }
    }
    uint64_t v17 = ~v7;
    unint64_t v43 = v11;
    unint64_t v44 = v9;
    if (v13 == 2)
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
    }
    else
    {
      unint64_t v42 = v12;
      if (v13 == 1)
      {
        uint64_t v18 = *(void (**)(unint64_t, uint64_t))(v5 + 8);
        v18((unint64_t)&a1[v7 + 24] & v17, AssociatedTypeWitness);
        uint64_t v19 = (v8 + ((unint64_t)&a1[v7 + 24] & v17)) & v17;
        v18(v19, AssociatedTypeWitness);
        uint64_t v20 = (v8 + v19) & v17;
        v18(v20, AssociatedTypeWitness);
        v18((v8 + v20) & v17, AssociatedTypeWitness);
      }
      else
      {
        uint64_t v21 = *(void (**)(unsigned __int8 *, uint64_t))(v5 + 8);
        v21(a1, AssociatedTypeWitness);
        v21((unsigned __int8 *)((unint64_t)&a1[v8] & v17), AssociatedTypeWitness);
        unint64_t v22 = (v8 + ((unint64_t)&a1[v8] & v17)) & v17;
        v21((unsigned __int8 *)v22, AssociatedTypeWitness);
        v21((unsigned __int8 *)((v8 + v22) & v17), AssociatedTypeWitness);
      }
      unint64_t v12 = v42;
    }
    unsigned int v23 = a2[v12];
    unsigned int v24 = v23 - 3;
    if (v23 >= 3)
    {
      if (v12 <= 3) {
        uint64_t v25 = v12;
      }
      else {
        uint64_t v25 = 4;
      }
      switch(v25)
      {
        case 1:
          int v26 = *a2;
          if (v12 >= 4) {
            goto LABEL_42;
          }
          goto LABEL_34;
        case 2:
          int v26 = *(unsigned __int16 *)a2;
          if (v12 < 4) {
            goto LABEL_34;
          }
          goto LABEL_42;
        case 3:
          int v26 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v12 < 4) {
            goto LABEL_34;
          }
          goto LABEL_42;
        case 4:
          int v26 = *(_DWORD *)a2;
          if (v12 < 4)
          {
LABEL_34:
            unsigned int v23 = (v26 | (v24 << (8 * v12))) + 3;
            break;
          }
LABEL_42:
          unsigned int v23 = v26 + 3;
          if (v23 == 2) {
            goto LABEL_43;
          }
          goto LABEL_36;
        default:
          break;
      }
    }
    if (v23 == 2)
    {
LABEL_43:
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      char v32 = 2;
    }
    else
    {
LABEL_36:
      if (v23 == 1)
      {
        long long v27 = *(_OWORD *)a2;
        *((void *)a1 + 2) = *((void *)a2 + 2);
        *(_OWORD *)a1 = v27;
        uint64_t v28 = *(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16);
        v28((unint64_t)&a1[v7 + 24] & v17, (unint64_t)&a2[v7 + 24] & v17, AssociatedTypeWitness);
        uint64_t v29 = (v8 + ((unint64_t)&a2[v7 + 24] & v17)) & v17;
        v28((v8 + ((unint64_t)&a1[v7 + 24] & v17)) & v17, v29, AssociatedTypeWitness);
        uint64_t v30 = (v8 + v29) & v17;
        v28((v8 + ((v8 + ((unint64_t)&a1[v7 + 24] & v17)) & v17)) & v17, v30, AssociatedTypeWitness);
        uint64_t v31 = (v8 + v30) & v17;
        v28((v8 + ((v8 + ((v8 + ((unint64_t)&a1[v7 + 24] & v17)) & v17)) & v17)) & v17, v31, AssociatedTypeWitness);
        *(void *)((v43 + ((v8 + ((v8 + ((v8 + ((unint64_t)&a1[v7 + 24] & v17)) & v17)) & v17)) & v17)) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v43 + v31) & 0xFFFFFFFFFFFFFFF8);
        char v32 = 1;
      }
      else
      {
        unint64_t v33 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 16);
        v33(a1, a2, AssociatedTypeWitness);
        v33((unsigned __int8 *)((unint64_t)&a1[v8] & v17), (unsigned __int8 *)((unint64_t)&a2[v8] & v17), AssociatedTypeWitness);
        unint64_t v34 = (v8 + ((unint64_t)&a2[v8] & v17)) & v17;
        v33((unsigned __int8 *)((v8 + ((unint64_t)&a1[v8] & v17)) & v17), (unsigned __int8 *)v34, AssociatedTypeWitness);
        v33((unsigned __int8 *)((v8 + ((v8 + ((unint64_t)&a1[v8] & v17)) & v17)) & v17), (unsigned __int8 *)((v8 + v34) & v17), AssociatedTypeWitness);
        char v32 = 0;
        unint64_t v35 = (unint64_t)&a1[v44 + 7] & 0xFFFFFFFFFFFFFFF8;
        unint64_t v36 = (unint64_t)&a2[v44 + 7] & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v35 = *(void *)v36;
        *(unsigned char *)(v35 + 8) = *(unsigned char *)(v36 + 8);
        unint64_t v37 = (unint64_t)&a1[v44 + 23] & 0xFFFFFFFFFFFFFFF8;
        unint64_t v38 = (unint64_t)&a2[v44 + 23] & 0xFFFFFFFFFFFFFFF8;
        long long v40 = *(_OWORD *)v38;
        long long v39 = *(_OWORD *)(v38 + 16);
        *(unsigned char *)(v37 + 32) = *(unsigned char *)(v38 + 32);
        *(_OWORD *)unint64_t v37 = v40;
        *(_OWORD *)(v37 + 16) = v39;
      }
    }
    a1[v12] = v32;
  }
  return a1;
}

uint64_t initializeWithTake for AnimationPath.Element(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = v6 + v7;
  unint64_t v9 = ((v6 + v7 + ((v6 + v7 + ((v6 + v7) & ~v7)) & ~v7)) & ~v7) + v6;
  unint64_t v10 = ((v9 + 23) & 0xFFFFFFFFFFFFFFF8) + 33;
  unint64_t v11 = v6 + 7;
  if (((v6 + 7 + ((v6 + v7 + ((v6 + v7 + ((v6 + v7 + ((v7 + 24) & ~v7)) & ~v7)) & ~v7)) & ~v7)) & 0xFFFFFFFFFFFFFFF8)
     + 8 > v10)
    unint64_t v10 = ((v6 + 7 + ((v6 + v7 + ((v6 + v7 + ((v6 + v7 + ((v7 + 24) & ~v7)) & ~v7)) & ~v7)) & ~v7)) & 0xFFFFFFFFFFFFFFF8)
        + 8;
  if (v6 <= v10) {
    unint64_t v12 = v10;
  }
  else {
    unint64_t v12 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  }
  unsigned int v13 = a2[v12];
  unsigned int v14 = v13 - 3;
  if (v13 >= 3)
  {
    if (v12 <= 3) {
      uint64_t v15 = v12;
    }
    else {
      uint64_t v15 = 4;
    }
    switch(v15)
    {
      case 1:
        int v16 = *a2;
        if (v12 >= 4) {
          goto LABEL_22;
        }
        goto LABEL_16;
      case 2:
        int v16 = *(unsigned __int16 *)a2;
        if (v12 >= 4) {
          goto LABEL_22;
        }
        goto LABEL_16;
      case 3:
        int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        if (v12 < 4) {
          goto LABEL_16;
        }
        goto LABEL_22;
      case 4:
        int v16 = *(_DWORD *)a2;
        if (v12 < 4)
        {
LABEL_16:
          unsigned int v13 = (v16 | (v14 << (8 * v12))) + 3;
          break;
        }
LABEL_22:
        unsigned int v13 = v16 + 3;
        if (v13 == 2) {
          goto LABEL_23;
        }
        goto LABEL_18;
      default:
        break;
    }
  }
  if (v13 == 2)
  {
LABEL_23:
    (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
    char v29 = 2;
  }
  else
  {
LABEL_18:
    uint64_t v17 = ~v7;
    if (v13 == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(void *)(a1 + 16) = *((void *)a2 + 2);
      uint64_t v18 = a1 + v7;
      uint64_t v19 = &a2[v7];
      uint64_t v20 = (v18 + 24) & v17;
      uint64_t v21 = (unint64_t)(v19 + 24) & v17;
      unint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
      v22(v20, v21, AssociatedTypeWitness);
      uint64_t v23 = (v8 + v20) & v17;
      uint64_t v24 = (v8 + v21) & v17;
      v22(v23, v24, AssociatedTypeWitness);
      uint64_t v25 = (v8 + v23) & v17;
      uint64_t v26 = (v8 + v24) & v17;
      v22(v25, v26, AssociatedTypeWitness);
      uint64_t v27 = (v8 + v25) & v17;
      uint64_t v28 = (v8 + v26) & v17;
      v22(v27, v28, AssociatedTypeWitness);
      *(void *)((v11 + v27) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v11 + v28) & 0xFFFFFFFFFFFFFFF8);
      char v29 = 1;
    }
    else
    {
      unint64_t v39 = v9;
      uint64_t v30 = *(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v5 + 32);
      v30(a1, a2, AssociatedTypeWitness);
      v30((v8 + a1) & v17, (unsigned __int8 *)((unint64_t)&a2[v8] & v17), AssociatedTypeWitness);
      unint64_t v31 = (v8 + ((unint64_t)&a2[v8] & v17)) & v17;
      v30((v8 + ((v8 + a1) & v17)) & v17, (unsigned __int8 *)v31, AssociatedTypeWitness);
      v30((v8 + ((v8 + ((v8 + a1) & v17)) & v17)) & v17, (unsigned __int8 *)((v8 + v31) & v17), AssociatedTypeWitness);
      char v29 = 0;
      unint64_t v32 = (v39 + a1 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v33 = (unint64_t)&a2[v39 + 7] & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v32 = *(void *)v33;
      *(unsigned char *)(v32 + 8) = *(unsigned char *)(v33 + 8);
      unint64_t v34 = (v39 + a1 + 23) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v35 = (unint64_t)&a2[v39 + 23] & 0xFFFFFFFFFFFFFFF8;
      long long v37 = *(_OWORD *)v35;
      long long v36 = *(_OWORD *)(v35 + 16);
      *(unsigned char *)(v34 + 32) = *(unsigned char *)(v35 + 32);
      *(_OWORD *)unint64_t v34 = v37;
      *(_OWORD *)(v34 + 16) = v36;
    }
  }
  *(unsigned char *)(a1 + v12) = v29;
  return a1;
}

unsigned __int8 *assignWithTake for AnimationPath.Element(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 != a2)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
    unint64_t v6 = *(void *)(v5 + 64);
    uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
    uint64_t v8 = v6 + v7;
    unint64_t v9 = ((v6 + v7 + ((v6 + v7 + ((v6 + v7) & ~v7)) & ~v7)) & ~v7) + v6;
    unint64_t v10 = ((v9 + 23) & 0xFFFFFFFFFFFFFFF8) + 33;
    unint64_t v11 = v6 + 7;
    if (((v6 + 7 + ((v6 + v7 + ((v6 + v7 + ((v6 + v7 + ((v7 + 24) & ~v7)) & ~v7)) & ~v7)) & ~v7)) & 0xFFFFFFFFFFFFFFF8)
       + 8 > v10)
      unint64_t v10 = ((v6 + 7 + ((v6 + v7 + ((v6 + v7 + ((v6 + v7 + ((v7 + 24) & ~v7)) & ~v7)) & ~v7)) & ~v7)) & 0xFFFFFFFFFFFFFFF8)
          + 8;
    if (v6 <= v10) {
      unint64_t v12 = v10;
    }
    else {
      unint64_t v12 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
    }
    unsigned int v13 = a1[v12];
    unsigned int v14 = v13 - 3;
    if (v13 >= 3)
    {
      if (v12 <= 3) {
        uint64_t v15 = v12;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a1;
          if (v12 < 4) {
            goto LABEL_15;
          }
          goto LABEL_19;
        case 2:
          int v16 = *(unsigned __int16 *)a1;
          if (v12 < 4) {
            goto LABEL_15;
          }
          goto LABEL_19;
        case 3:
          int v16 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v12 < 4) {
            goto LABEL_15;
          }
          goto LABEL_19;
        case 4:
          int v16 = *(_DWORD *)a1;
          if (v12 < 4) {
LABEL_15:
          }
            unsigned int v13 = (v16 | (v14 << (8 * v12))) + 3;
          else {
LABEL_19:
          }
            unsigned int v13 = v16 + 3;
          break;
        default:
          break;
      }
    }
    uint64_t v17 = ~v7;
    unint64_t v42 = v11;
    unint64_t v43 = v9;
    if (v13 == 2)
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
    }
    else
    {
      unint64_t v41 = v12;
      if (v13 == 1)
      {
        uint64_t v18 = *(void (**)(unint64_t, uint64_t))(v5 + 8);
        v18((unint64_t)&a1[v7 + 24] & v17, AssociatedTypeWitness);
        uint64_t v19 = (v8 + ((unint64_t)&a1[v7 + 24] & v17)) & v17;
        v18(v19, AssociatedTypeWitness);
        uint64_t v20 = (v8 + v19) & v17;
        v18(v20, AssociatedTypeWitness);
        v18((v8 + v20) & v17, AssociatedTypeWitness);
      }
      else
      {
        uint64_t v21 = *(void (**)(unsigned __int8 *, uint64_t))(v5 + 8);
        v21(a1, AssociatedTypeWitness);
        v21((unsigned __int8 *)((unint64_t)&a1[v8] & v17), AssociatedTypeWitness);
        unint64_t v22 = (v8 + ((unint64_t)&a1[v8] & v17)) & v17;
        v21((unsigned __int8 *)v22, AssociatedTypeWitness);
        v21((unsigned __int8 *)((v8 + v22) & v17), AssociatedTypeWitness);
      }
      unint64_t v12 = v41;
    }
    unsigned int v23 = a2[v12];
    unsigned int v24 = v23 - 3;
    if (v23 >= 3)
    {
      if (v12 <= 3) {
        uint64_t v25 = v12;
      }
      else {
        uint64_t v25 = 4;
      }
      switch(v25)
      {
        case 1:
          int v26 = *a2;
          if (v12 >= 4) {
            goto LABEL_42;
          }
          goto LABEL_34;
        case 2:
          int v26 = *(unsigned __int16 *)a2;
          if (v12 < 4) {
            goto LABEL_34;
          }
          goto LABEL_42;
        case 3:
          int v26 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v12 < 4) {
            goto LABEL_34;
          }
          goto LABEL_42;
        case 4:
          int v26 = *(_DWORD *)a2;
          if (v12 < 4)
          {
LABEL_34:
            unsigned int v23 = (v26 | (v24 << (8 * v12))) + 3;
            break;
          }
LABEL_42:
          unsigned int v23 = v26 + 3;
          if (v23 == 2) {
            goto LABEL_43;
          }
          goto LABEL_36;
        default:
          break;
      }
    }
    if (v23 == 2)
    {
LABEL_43:
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
      char v31 = 2;
    }
    else
    {
LABEL_36:
      if (v23 == 1)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((void *)a1 + 2) = *((void *)a2 + 2);
        uint64_t v27 = *(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 32);
        v27((unint64_t)&a1[v7 + 24] & v17, (unint64_t)&a2[v7 + 24] & v17, AssociatedTypeWitness);
        uint64_t v28 = (v8 + ((unint64_t)&a2[v7 + 24] & v17)) & v17;
        v27((v8 + ((unint64_t)&a1[v7 + 24] & v17)) & v17, v28, AssociatedTypeWitness);
        uint64_t v29 = (v8 + v28) & v17;
        v27((v8 + ((v8 + ((unint64_t)&a1[v7 + 24] & v17)) & v17)) & v17, v29, AssociatedTypeWitness);
        uint64_t v30 = (v8 + v29) & v17;
        v27((v8 + ((v8 + ((v8 + ((unint64_t)&a1[v7 + 24] & v17)) & v17)) & v17)) & v17, v30, AssociatedTypeWitness);
        *(void *)((v42 + ((v8 + ((v8 + ((v8 + ((unint64_t)&a1[v7 + 24] & v17)) & v17)) & v17)) & v17)) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v42 + v30) & 0xFFFFFFFFFFFFFFF8);
        char v31 = 1;
      }
      else
      {
        unint64_t v32 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 32);
        v32(a1, a2, AssociatedTypeWitness);
        v32((unsigned __int8 *)((unint64_t)&a1[v8] & v17), (unsigned __int8 *)((unint64_t)&a2[v8] & v17), AssociatedTypeWitness);
        unint64_t v33 = (v8 + ((unint64_t)&a2[v8] & v17)) & v17;
        v32((unsigned __int8 *)((v8 + ((unint64_t)&a1[v8] & v17)) & v17), (unsigned __int8 *)v33, AssociatedTypeWitness);
        v32((unsigned __int8 *)((v8 + ((v8 + ((unint64_t)&a1[v8] & v17)) & v17)) & v17), (unsigned __int8 *)((v8 + v33) & v17), AssociatedTypeWitness);
        char v31 = 0;
        unint64_t v34 = (unint64_t)&a1[v43 + 7] & 0xFFFFFFFFFFFFFFF8;
        unint64_t v35 = (unint64_t)&a2[v43 + 7] & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v34 = *(void *)v35;
        *(unsigned char *)(v34 + 8) = *(unsigned char *)(v35 + 8);
        unint64_t v36 = (unint64_t)&a1[v43 + 23] & 0xFFFFFFFFFFFFFFF8;
        unint64_t v37 = (unint64_t)&a2[v43 + 23] & 0xFFFFFFFFFFFFFFF8;
        long long v39 = *(_OWORD *)v37;
        long long v38 = *(_OWORD *)(v37 + 16);
        *(unsigned char *)(v36 + 32) = *(unsigned char *)(v37 + 32);
        *(_OWORD *)unint64_t v36 = v39;
        *(_OWORD *)(v36 + 16) = v38;
      }
    }
    a1[v12] = v31;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for AnimationPath.Element(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  unint64_t v7 = ((v5 + ((v5 + v6 + ((v5 + v6 + ((v5 + v6) & ~v6)) & ~v6)) & ~v6) + 23) & 0xFFFFFFFFFFFFFFF8) + 33;
  unint64_t v8 = ((v5 + ((v5 + v6 + ((v5 + v6 + ((v5 + v6 + ((v6 + 24) & ~v6)) & ~v6)) & ~v6)) & ~v6) + 7) & 0xFFFFFFFFFFFFFFF8)
     + 8;
  if (v8 <= v7) {
    unint64_t v8 = v7;
  }
  if (v5 > v8) {
    unint64_t v8 = v5;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_24;
  }
  unint64_t v9 = v8 + 1;
  char v10 = 8 * (v8 + 1);
  if ((v8 + 1) <= 3)
  {
    unsigned int v13 = ((a2 + ~(-1 << v10) - 253) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_24;
      }
      goto LABEL_16;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_24;
      }
      goto LABEL_16;
    }
    if (v13 < 2)
    {
LABEL_24:
      unsigned int v15 = *((unsigned __int8 *)a1 + v8);
      if (v15 >= 3) {
        return (v15 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_24;
  }
LABEL_16:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v9 | v14) + 254;
}

void storeEnumTagSinglePayload for AnimationPath.Element(unsigned char *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  unint64_t v9 = ((v7 + ((v7 + v8 + ((v7 + v8 + ((v7 + v8) & ~v8)) & ~v8)) & ~v8) + 23) & 0xFFFFFFFFFFFFFFF8) + 33;
  unint64_t v10 = ((v7 + ((v7 + v8 + ((v7 + v8 + ((v7 + v8 + ((v8 + 24) & ~v8)) & ~v8)) & ~v8)) & ~v8) + 7) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v10 <= v9) {
    unint64_t v10 = v9;
  }
  if (v7 <= v10) {
    unint64_t v7 = v10;
  }
  size_t v11 = v7 + 1;
  if (a3 < 0xFE)
  {
    int v12 = 0;
  }
  else if (v11 <= 3)
  {
    unsigned int v15 = ((a3 + ~(-1 << (8 * v11)) - 253) >> (8 * v11)) + 1;
    if (HIWORD(v15))
    {
      int v12 = 4;
    }
    else if (v15 >= 0x100)
    {
      int v12 = 2;
    }
    else
    {
      int v12 = v15 > 1;
    }
  }
  else
  {
    int v12 = 1;
  }
  if (a2 > 0xFD)
  {
    unsigned int v13 = a2 - 254;
    if (v11 < 4)
    {
      int v14 = (v13 >> (8 * v11)) + 1;
      if (v7 != -1)
      {
        int v16 = v13 & ~(-1 << (8 * v11));
        bzero(a1, v11);
        if (v11 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if (v11 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v7 + 1);
      *(_DWORD *)a1 = v13;
      int v14 = 1;
    }
    switch(v12)
    {
      case 1:
        a1[v11] = v14;
        break;
      case 2:
        *(_WORD *)&a1[v11] = v14;
        break;
      case 3:
LABEL_36:
        __break(1u);
        JUMPOUT(0x245FFD908);
      case 4:
        *(_DWORD *)&a1[v11] = v14;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v12)
    {
      case 1:
        a1[v11] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_25;
      case 2:
        *(_WORD *)&a1[v11] = 0;
        goto LABEL_24;
      case 3:
        goto LABEL_36;
      case 4:
        *(_DWORD *)&a1[v11] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_25;
      default:
LABEL_24:
        if (a2) {
LABEL_25:
        }
          a1[v7] = -(char)a2;
        break;
    }
  }
}

uint64_t getEnumTag for AnimationPath.Element(unsigned __int8 *a1)
{
  uint64_t v2 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v3 = *(void *)(v2 + 64);
  uint64_t v4 = *(unsigned __int8 *)(v2 + 80);
  unint64_t v5 = ((v3 + ((v3 + v4 + ((v3 + v4 + ((v3 + v4) & ~v4)) & ~v4)) & ~v4) + 23) & 0xFFFFFFFFFFFFFFF8) + 33;
  unint64_t v6 = ((v3 + ((v3 + v4 + ((v3 + v4 + ((v3 + v4 + ((v4 + 24) & ~v4)) & ~v4)) & ~v4)) & ~v4) + 7) & 0xFFFFFFFFFFFFFFF8)
     + 8;
  if (v6 <= v5) {
    unint64_t v6 = v5;
  }
  if (v3 <= v6) {
    unint64_t v3 = v6;
  }
  uint64_t result = a1[v3];
  if (result >= 3)
  {
    if (v3 <= 3) {
      uint64_t v8 = v3;
    }
    else {
      uint64_t v8 = 4;
    }
    switch(v8)
    {
      case 1:
        int v9 = *a1;
        goto LABEL_14;
      case 2:
        int v9 = *(unsigned __int16 *)a1;
        goto LABEL_14;
      case 3:
        int v9 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_14;
      case 4:
        int v9 = *(_DWORD *)a1;
LABEL_14:
        unsigned int v10 = (v9 | ((result - 3) << (8 * v3))) + 3;
        unsigned int v11 = v9 + 3;
        if (v3 >= 4) {
          uint64_t result = v11;
        }
        else {
          uint64_t result = v10;
        }
        break;
      default:
        return result;
    }
  }
  return result;
}

void destructiveInjectEnumTag for AnimationPath.Element(unsigned char *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  size_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (a2 > 2)
  {
    unint64_t v9 = ((v5 + ((v5 + v6 + ((v5 + v6 + ((v5 + v6) & ~v6)) & ~v6)) & ~v6) + 23) & 0xFFFFFFFFFFFFFFF8) + 33;
    unint64_t v10 = ((v5 + ((v5 + v6 + ((v5 + v6 + ((v5 + v6 + ((v6 + 24) & ~v6)) & ~v6)) & ~v6)) & ~v6) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 8;
    if (v10 <= v9) {
      unint64_t v10 = v9;
    }
    if (v5 <= v10) {
      size_t v11 = v10;
    }
    else {
      size_t v11 = v5;
    }
    unsigned int v12 = a2 - 3;
    if (v11 < 4)
    {
      unsigned int v13 = v12 >> (8 * v11);
      int v14 = v12 & ~(-1 << (8 * v11));
      a1[v11] = v13 + 3;
      bzero(a1, v11);
      if (v11 == 3)
      {
        *(_WORD *)a1 = v14;
        a1[2] = BYTE2(v14);
      }
      else if (v11 == 2)
      {
        *(_WORD *)a1 = v14;
      }
      else
      {
        *a1 = v14;
      }
    }
    else
    {
      a1[v11] = 3;
      bzero(a1, v11);
      *(_DWORD *)a1 = v12;
    }
  }
  else
  {
    unint64_t v7 = ((v5 + ((v5 + v6 + ((v5 + v6 + ((v5 + v6 + ((v6 + 24) & ~v6)) & ~v6)) & ~v6)) & ~v6) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 8;
    unint64_t v8 = ((v5 + ((v5 + v6 + ((v5 + v6 + ((v5 + v6) & ~v6)) & ~v6)) & ~v6) + 23) & 0xFFFFFFFFFFFFFFF8) + 33;
    if (v7 > v8) {
      unint64_t v8 = v7;
    }
    if (v5 <= v8) {
      size_t v5 = v8;
    }
    a1[v5] = a2;
  }
}

uint64_t EnvironmentValues.paragraphTypesetting.getter@<X0>(char *a1@<X8>)
{
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a1);
    swift_release_n();
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, a1);
  }
  return swift_release_n();
}

void static ParagraphTypesetting.automatic.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

BOOL static ParagraphTypesetting.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_245FFDD50(char *a1)
{
  char v2 = *a1;
  return EnvironmentValues.paragraphTypesetting.setter(&v2);
}

uint64_t sub_245FFDD88()
{
  return swift_deallocObject();
}

uint64_t sub_245FFDD98()
{
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for ParagraphTypesetting.Storage()
{
  return &type metadata for ParagraphTypesetting.Storage;
}

ValueMetadata *type metadata accessor for ParagraphTypesettingKey()
{
  return &type metadata for ParagraphTypesettingKey;
}

unint64_t lazy protocol witness table accessor for type ParagraphTypesetting.Storage and conformance ParagraphTypesetting.Storage()
{
  unint64_t result = lazy protocol witness table cache variable for type ParagraphTypesetting.Storage and conformance ParagraphTypesetting.Storage;
  if (!lazy protocol witness table cache variable for type ParagraphTypesetting.Storage and conformance ParagraphTypesetting.Storage)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParagraphTypesetting.Storage and conformance ParagraphTypesetting.Storage);
  }
  return result;
}

uint64_t ResolvableProgress.interval.getter@<X0>(uint64_t a1@<X8>)
{
  return _sSNy10Foundation4DateVGWOcTm_0(v1, a1, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
}

uint64_t ResolvableProgress.interval.setter(uint64_t a1)
{
  return outlined assign with take of ClosedRange<Date>(a1, v1);
}

uint64_t outlined assign with take of ClosedRange<Date>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ClosedRange<Date>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*ResolvableProgress.interval.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ResolvableProgress.countdown.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ResolvableProgress() + 20));
}

uint64_t type metadata accessor for ResolvableProgress()
{
  uint64_t result = type metadata singleton initialization cache for ResolvableProgress;
  if (!type metadata singleton initialization cache for ResolvableProgress) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t ResolvableProgress.countdown.setter(char a1)
{
  uint64_t result = type metadata accessor for ResolvableProgress();
  *(unsigned char *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*ResolvableProgress.countdown.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ResolvableProgress.CodingKeys()
{
  if (*v0) {
    return 0x776F64746E756F63;
  }
  else {
    return 0x6C61767265746E69;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ResolvableProgress.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized ResolvableProgress.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ResolvableProgress.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ResolvableProgress.CodingKeys and conformance ResolvableProgress.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ResolvableProgress.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ResolvableProgress.CodingKeys and conformance ResolvableProgress.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

id static ResolvableProgress.attribute.getter()
{
  if (one-time initialization token for attribute != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v0 = (void *)static ResolvableProgress.attribute;

  return v0;
}

void static ResolvableProgress.attribute.setter(uint64_t a1)
{
  if (one-time initialization token for attribute != -1) {
    swift_once();
  }
  swift_beginAccess();
  unint64_t v2 = (void *)static ResolvableProgress.attribute;
  static ResolvableProgress.attribute = a1;
}

uint64_t (*static ResolvableProgress.attribute.modify())()
{
  if (one-time initialization token for attribute != -1) {
    swift_once();
  }
  swift_beginAccess();
  return DisplayList.GraphicsRenderer.platformViewMode.modify;
}

uint64_t ResolvableProgress.resolve(in:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v35 = a1;
  uint64_t v1 = MEMORY[0x263F8D538];
  type metadata accessor for FloatingPointFormatStyle<Double>.Attributed(0, &lazy cache variable for type metadata for FloatingPointFormatStyle<Double>.Attributed, (uint64_t (*)(void))lazy protocol witness table accessor for type Double and conformance Double, MEMORY[0x263F8D538], MEMORY[0x263F06D60]);
  uint64_t v33 = *(void *)(v2 - 8);
  uint64_t v34 = v2;
  MEMORY[0x270FA5388](v2);
  unint64_t v32 = (char *)&v30 - v3;
  uint64_t v4 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v30 = *(void *)(v4 - 8);
  uint64_t v31 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Locale();
  MEMORY[0x270FA5388](v7 - 8);
  type metadata accessor for FloatingPointFormatStyle<Double>.Attributed(0, &lazy cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent, (uint64_t (*)(void))lazy protocol witness table accessor for type Double and conformance Double, v1, MEMORY[0x263F06D88]);
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  unsigned int v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  unsigned int v15 = (char *)&v30 - v14;
  uint64_t v16 = type metadata accessor for Date();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  ResolvableStringResolutionContext.date.getter((uint64_t)v19);
  type metadata accessor for ResolvableProgress();
  ClosedRange<>.progress(at:countdown:)();
  uint64_t v21 = v20;
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  uint64_t v36 = v21;
  static Locale.autoupdatingCurrent.getter();
  lazy protocol witness table accessor for type Double and conformance Double();
  FloatingPointFormatStyle.Percent.init(locale:)();
  uint64_t v23 = v30;
  uint64_t v22 = v31;
  (*(void (**)(char *, void, uint64_t))(v30 + 104))(v6, *MEMORY[0x263F8E210], v31);
  MEMORY[0x24C520A20](v6, 0x3FF0000000000000, 0, v9);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v6, v22);
  unsigned int v24 = *(void (**)(char *, uint64_t))(v10 + 8);
  v24(v12, v9);
  uint64_t v25 = v32;
  FloatingPointFormatStyle.Percent.attributed.getter();
  v24(v15, v9);
  lazy protocol witness table accessor for type FloatingPointFormatStyle<Double>.Attributed and conformance FloatingPointFormatStyle<A>.Attributed();
  uint64_t v27 = v34;
  uint64_t v26 = v35;
  BinaryFloatingPoint.formatted<A>(_:)();
  (*(void (**)(char *, uint64_t))(v33 + 8))(v25, v27);
  uint64_t v28 = type metadata accessor for AttributedString();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v26, 0, 1, v28);
}

unint64_t lazy protocol witness table accessor for type FloatingPointFormatStyle<Double>.Attributed and conformance FloatingPointFormatStyle<A>.Attributed()
{
  unint64_t result = lazy protocol witness table cache variable for type FloatingPointFormatStyle<Double>.Attributed and conformance FloatingPointFormatStyle<A>.Attributed;
  if (!lazy protocol witness table cache variable for type FloatingPointFormatStyle<Double>.Attributed and conformance FloatingPointFormatStyle<A>.Attributed)
  {
    type metadata accessor for FloatingPointFormatStyle<Double>.Attributed(255, &lazy cache variable for type metadata for FloatingPointFormatStyle<Double>.Attributed, (uint64_t (*)(void))lazy protocol witness table accessor for type Double and conformance Double, MEMORY[0x263F8D538], MEMORY[0x263F06D60]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FloatingPointFormatStyle<Double>.Attributed and conformance FloatingPointFormatStyle<A>.Attributed);
  }
  return result;
}

uint64_t ResolvableProgress.invalidationConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v15 - v8;
  type metadata accessor for (interval: DateInterval, countdown: Bool)();
  uint64_t v11 = *(int *)(v10 + 48);
  unsigned int v12 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v12(v9, v1, v3);
  type metadata accessor for ClosedRange<Date>();
  v12(v6, v1 + *(int *)(v13 + 36), v3);
  DateInterval.init(start:end:)();
  *(unsigned char *)(a1 + v11) = *(unsigned char *)(v1 + *(int *)(type metadata accessor for ResolvableProgress() + 20));
  type metadata accessor for ResolvableAttributeConfiguration(0);
  return swift_storeEnumTagMultiPayload();
}

uint64_t ResolvableProgress.encode(to:)(void *a1)
{
  type metadata accessor for FloatingPointFormatStyle<Double>.Attributed(0, &lazy cache variable for type metadata for KeyedEncodingContainer<ResolvableProgress.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvableProgress.CodingKeys and conformance ResolvableProgress.CodingKeys, (uint64_t)&unk_26FA5B8C0, MEMORY[0x263F8E0C0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v9 - v6;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ResolvableProgress.CodingKeys and conformance ResolvableProgress.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v11 = 0;
  type metadata accessor for ClosedRange<Date>();
  lazy protocol witness table accessor for type ClosedRange<Date> and conformance <> ClosedRange<A>(&lazy protocol witness table cache variable for type ClosedRange<Date> and conformance <> ClosedRange<A>, &lazy protocol witness table cache variable for type Date and conformance Date);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for ResolvableProgress();
    char v10 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t lazy protocol witness table accessor for type ResolvableProgress.CodingKeys and conformance ResolvableProgress.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ResolvableProgress.CodingKeys and conformance ResolvableProgress.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableProgress.CodingKeys and conformance ResolvableProgress.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableProgress.CodingKeys and conformance ResolvableProgress.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvableProgress.CodingKeys and conformance ResolvableProgress.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableProgress.CodingKeys and conformance ResolvableProgress.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableProgress.CodingKeys and conformance ResolvableProgress.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvableProgress.CodingKeys and conformance ResolvableProgress.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableProgress.CodingKeys and conformance ResolvableProgress.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableProgress.CodingKeys and conformance ResolvableProgress.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvableProgress.CodingKeys and conformance ResolvableProgress.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableProgress.CodingKeys and conformance ResolvableProgress.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableProgress.CodingKeys and conformance ResolvableProgress.CodingKeys);
  }
  return result;
}

uint64_t ResolvableProgress.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v19 = a2;
  type metadata accessor for ClosedRange<Date>();
  uint64_t v20 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v22 = (uint64_t)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for FloatingPointFormatStyle<Double>.Attributed(0, &lazy cache variable for type metadata for KeyedDecodingContainer<ResolvableProgress.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvableProgress.CodingKeys and conformance ResolvableProgress.CodingKeys, (uint64_t)&unk_26FA5B8C0, MEMORY[0x263F8E040]);
  uint64_t v21 = v6;
  uint64_t v18 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v17 - v7;
  uint64_t v9 = type metadata accessor for ResolvableProgress();
  MEMORY[0x270FA5388](v9);
  char v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ResolvableProgress.CodingKeys and conformance ResolvableProgress.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v13 = v18;
  uint64_t v12 = v19;
  char v24 = 0;
  lazy protocol witness table accessor for type ClosedRange<Date> and conformance <> ClosedRange<A>(&lazy protocol witness table cache variable for type ClosedRange<Date> and conformance <> ClosedRange<A>, &lazy protocol witness table cache variable for type Date and conformance Date);
  uint64_t v14 = v21;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  outlined init with take of ClosedRange<Date>(v22, (uint64_t)v11);
  char v23 = 1;
  char v15 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v14);
  v11[*(int *)(v9 + 20)] = v15 & 1;
  _sSNy10Foundation4DateVGWOcTm_0((uint64_t)v11, v12, (uint64_t (*)(void))type metadata accessor for ResolvableProgress);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return _sSNy10Foundation4DateVGWOhTm_0((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for ResolvableProgress);
}

void type metadata accessor for FloatingPointFormatStyle<Double>.Attributed(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type ClosedRange<Date> and conformance <> ClosedRange<A>(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for ClosedRange<Date>();
    _s10Foundation4DateVACSLAAWlTm_4(a2, MEMORY[0x263F07490]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with take of ClosedRange<Date>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ClosedRange<Date>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t _sSNy10Foundation4DateVGWOcTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _sSNy10Foundation4DateVGWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t protocol witness for ConfigurationBasedResolvableStringAttributeRepresentation.invalidationConfiguration.getter in conformance ResolvableProgress@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v17 - v10;
  type metadata accessor for (interval: DateInterval, countdown: Bool)();
  uint64_t v13 = *(int *)(v12 + 48);
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v14(v11, v2, v5);
  type metadata accessor for ClosedRange<Date>();
  v14(v8, v2 + *(int *)(v15 + 36), v5);
  DateInterval.init(start:end:)();
  *(unsigned char *)(a2 + v13) = *(unsigned char *)(v2 + *(int *)(a1 + 20));
  type metadata accessor for ResolvableAttributeConfiguration(0);
  return swift_storeEnumTagMultiPayload();
}

id protocol witness for static ResolvableStringAttributeFamily.attribute.getter in conformance ResolvableProgress()
{
  if (one-time initialization token for attribute != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v0 = (void *)static ResolvableProgress.attribute;

  return v0;
}

uint64_t protocol witness for Decodable.init(from:) in conformance ResolvableProgress@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ResolvableProgress.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ResolvableProgress(void *a1)
{
  return ResolvableProgress.encode(to:)(a1);
}

void ResolvableProgress.hash(into:)()
{
  type metadata accessor for Date();
  _s10Foundation4DateVACSLAAWlTm_4(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
  dispatch thunk of Hashable.hash(into:)();
  type metadata accessor for ClosedRange<Date>();
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v1 = type metadata accessor for ResolvableProgress();
  Hasher._combine(_:)(*(unsigned char *)(v0 + *(int *)(v1 + 20)));
}

Swift::Int ResolvableProgress.hashValue.getter()
{
  Hasher.init(_seed:)();
  type metadata accessor for Date();
  _s10Foundation4DateVACSLAAWlTm_4(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
  dispatch thunk of Hashable.hash(into:)();
  type metadata accessor for ClosedRange<Date>();
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v1 = type metadata accessor for ResolvableProgress();
  Hasher._combine(_:)(*(unsigned char *)(v0 + *(int *)(v1 + 20)));
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ResolvableProgress(uint64_t a1)
{
  Hasher.init(_seed:)();
  type metadata accessor for Date();
  _s10Foundation4DateVACSLAAWlTm_4(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
  dispatch thunk of Hashable.hash(into:)();
  type metadata accessor for ClosedRange<Date>();
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*(unsigned char *)(v1 + *(int *)(a1 + 20)));
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ResolvableProgress(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Date();
  _s10Foundation4DateVACSLAAWlTm_4(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
  dispatch thunk of Hashable.hash(into:)();
  type metadata accessor for ClosedRange<Date>();
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*(unsigned char *)(v2 + *(int *)(a2 + 20)));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ResolvableProgress(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  type metadata accessor for Date();
  _s10Foundation4DateVACSLAAWlTm_4(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
  dispatch thunk of Hashable.hash(into:)();
  type metadata accessor for ClosedRange<Date>();
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*(unsigned char *)(v2 + *(int *)(a2 + 20)));
  return Hasher._finalize()();
}

uint64_t ResolvableProgress.debugDescription.getter()
{
  _StringGuts.grow(_:)(55);
  v1._countAndFlagsBits = 0xD000000000000021;
  v1._object = (void *)0x8000000246224010;
  String.append(_:)(v1);
  type metadata accessor for Date();
  _print_unlocked<A, B>(_:_:)();
  v2._countAndFlagsBits = 3026478;
  v2._object = (void *)0xE300000000000000;
  String.append(_:)(v2);
  type metadata accessor for ClosedRange<Date>();
  _print_unlocked<A, B>(_:_:)();
  v3._countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._object = (void *)0x8000000246224040;
  v4._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v4);
  uint64_t v5 = type metadata accessor for ResolvableProgress();
  BOOL v6 = *(unsigned char *)(v0 + *(int *)(v5 + 20)) == 0;
  if (*(unsigned char *)(v0 + *(int *)(v5 + 20))) {
    uint64_t v7 = 1702195828;
  }
  else {
    uint64_t v7 = 0x65736C6166;
  }
  if (v6) {
    unint64_t v8 = 0xE500000000000000;
  }
  else {
    unint64_t v8 = 0xE400000000000000;
  }
  unint64_t v9 = v8;
  String.append(_:)(*(Swift::String *)&v7);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 8745;
  v10._object = (void *)0xE200000000000000;
  String.append(_:)(v10);
  return 0;
}

uint64_t specialized static ResolvableProgress.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ClosedRange<Date>();
  MEMORY[0x270FA5388](v4);
  BOOL v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  unint64_t v9 = (char *)&v15 - v8;
  type metadata accessor for Date();
  _s10Foundation4DateVACSLAAWlTm_4(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x263F07490]);
  char v10 = dispatch thunk of static Equatable.== infix(_:_:)();
  _sSNy10Foundation4DateVGWOcTm_0(a1, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  _sSNy10Foundation4DateVGWOcTm_0(a2, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  if ((v10 & 1) == 0)
  {
    _sSNy10Foundation4DateVGWOhTm_0((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
    _sSNy10Foundation4DateVGWOhTm_0((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
    goto LABEL_5;
  }
  char v11 = dispatch thunk of static Equatable.== infix(_:_:)();
  _sSNy10Foundation4DateVGWOhTm_0((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  _sSNy10Foundation4DateVGWOhTm_0((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  if ((v11 & 1) == 0)
  {
LABEL_5:
    char v13 = 0;
    return v13 & 1;
  }
  uint64_t v12 = type metadata accessor for ResolvableProgress();
  char v13 = *(unsigned char *)(a1 + *(int *)(v12 + 20)) ^ *(unsigned char *)(a2 + *(int *)(v12 + 20)) ^ 1;
  return v13 & 1;
}

uint64_t instantiation function for generic protocol witness table for ResolvableProgress(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for ResolvableProgress(a1, a2, a3, &lazy protocol witness table cache variable for type ResolvableProgress and conformance ResolvableProgress, (uint64_t)&protocol conformance descriptor for ResolvableProgress, &lazy protocol witness table cache variable for type ResolvableProgress and conformance ResolvableProgress);
}

{
  return instantiation function for generic protocol witness table for ResolvableProgress(a1, a2, a3, &lazy protocol witness table cache variable for type ResolvableProgress and conformance ResolvableProgress, (uint64_t)&protocol conformance descriptor for ResolvableProgress, &lazy protocol witness table cache variable for type ResolvableProgress and conformance ResolvableProgress);
}

uint64_t instantiation function for generic protocol witness table for ResolvableProgress(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5, unint64_t *a6)
{
  *(void *)(a1 + 8) = _s10Foundation4DateVACSLAAWlTm_4(a4, (void (*)(uint64_t))type metadata accessor for ResolvableProgress);
  uint64_t result = _s10Foundation4DateVACSLAAWlTm_4(a6, (void (*)(uint64_t))type metadata accessor for ResolvableProgress);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t associated type witness table accessor for ResolvableStringAttribute.Schedule : TimelineSchedule in ResolvableProgress()
{
  return _s10Foundation4DateVACSLAAWlTm_4(&lazy protocol witness table cache variable for type ResolvableAttributeConfiguration.Schedule and conformance ResolvableAttributeConfiguration.Schedule, (void (*)(uint64_t))type metadata accessor for ResolvableAttributeConfiguration.Schedule);
}

uint64_t instantiation function for generic protocol witness table for ResolvableProgress(uint64_t a1)
{
  uint64_t result = _s10Foundation4DateVACSLAAWlTm_4(&lazy protocol witness table cache variable for type ResolvableProgress and conformance ResolvableProgress, (void (*)(uint64_t))type metadata accessor for ResolvableProgress);
  *(void *)(a1 + 16) = result;
  return result;
}

_UNKNOWN **associated type witness table accessor for ResolvableStringAttributeRepresentation.Family : ResolvableStringAttributeFamily in ResolvableProgress()
{
  return &protocol witness table for ResolvableProgress;
}

uint64_t associated type witness table accessor for TimelineSchedule.Entries : Sequence in ResolvableProgress()
{
  return _s10Foundation4DateVACSLAAWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type AnySequence<Date> and conformance AnySequence<A>, (void (*)(uint64_t))type metadata accessor for AnySequence<Date>);
}

void type metadata accessor for AnySequence<Date>()
{
  if (!lazy cache variable for type metadata for AnySequence<Date>)
  {
    type metadata accessor for Date();
    unint64_t v0 = type metadata accessor for AnySequence();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnySequence<Date>);
    }
  }
}

uint64_t base witness table accessor for Equatable in ResolvableProgress()
{
  return _s10Foundation4DateVACSLAAWlTm_4(&lazy protocol witness table cache variable for type ResolvableProgress and conformance ResolvableProgress, (void (*)(uint64_t))type metadata accessor for ResolvableProgress);
}

void *initializeBufferWithCopyOfBuffer for ResolvableProgress(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (void *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    type metadata accessor for ClosedRange<Date>();
    v8((void *)((char *)a1 + *(int *)(v9 + 36)), (void *)((char *)a2 + *(int *)(v9 + 36)), v7);
    *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t destroy for ResolvableProgress(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date();
  BOOL v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t))v6)((void *)(v2 - 8), a1, v2);
  type metadata accessor for ClosedRange<Date>();
  uint64_t v4 = a1 + *(int *)(v3 + 36);

  return v6(v4, v2);
}

uint64_t initializeWithCopy for ResolvableProgress(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  type metadata accessor for ClosedRange<Date>();
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithCopy for ResolvableProgress(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  type metadata accessor for ClosedRange<Date>();
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t initializeWithTake for ResolvableProgress(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  type metadata accessor for ClosedRange<Date>();
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for ResolvableProgress(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  type metadata accessor for ClosedRange<Date>();
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvableProgress(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24600016C);
}

uint64_t sub_24600016C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for ClosedRange<Date>();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 2) {
      return ((v10 + 2147483646) & 0x7FFFFFFF) + 1;
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for ResolvableProgress(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246000250);
}

void sub_246000250(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for ClosedRange<Date>();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v10(a1, a2, a2, v8);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
  }
}

void type metadata completion function for ResolvableProgress()
{
  type metadata accessor for ClosedRange<Date>();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

unsigned char *storeEnumTagSinglePayload for ResolvableProgress.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24600046CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for ResolvableProgress.CodingKeys()
{
  return &unk_26FA5B8C0;
}

uint64_t specialized ResolvableProgress.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6C61767265746E69 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x776F64746E756F63 && a2 == 0xE90000000000006ELL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

ValueMetadata *type metadata accessor for Text.Effect.FragmentIdentifier()
{
  return &type metadata for Text.Effect.FragmentIdentifier;
}

ValueMetadata *type metadata accessor for Text.Effect.BaseFragmentIdentifierMap()
{
  return &type metadata for Text.Effect.BaseFragmentIdentifierMap;
}

uint64_t Text.Effect.RelativeIdentifierKey.identifierKey(base:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(result + 16);
  if (v6)
  {
    uint64_t v7 = result;
    uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a3);
    if (v8) {
      uint64_t v6 = *(void *)(*(void *)(v7 + 56) + 8 * result);
    }
    else {
      uint64_t v6 = 0;
    }
  }
  if (!__OFADD__(v6, a4)) {
    return a3;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Text.Effect.BaseFragmentIdentifierMap(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a2[1];
  return specialized static Dictionary<>.== infix(_:_:)(*a1, *a2) & (v2 == v3);
}

unint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v7 = specialized LazyMapSequence.Iterator.next()();
  if (v9) {
    goto LABEL_24;
  }
  uint64_t v10 = v7;
  uint64_t v11 = v8;
  uint64_t v12 = (void *)*a5;
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v7);
  uint64_t v15 = v12[2];
  BOOL v16 = (v14 & 1) == 0;
  BOOL v17 = __OFADD__(v15, v16);
  uint64_t v18 = v15 + v16;
  if (v17)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  char v19 = v14;
  if (v12[3] < v18)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, a4 & 1);
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v10);
    if ((v19 & 1) == (v20 & 1)) {
      goto LABEL_7;
    }
LABEL_5:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  if (a4)
  {
LABEL_7:
    uint64_t v21 = (void *)*a5;
    if (v19) {
      goto LABEL_8;
    }
    goto LABEL_12;
  }
  unint64_t v24 = result;
  specialized _NativeDictionary.copy()();
  unint64_t result = v24;
  uint64_t v21 = (void *)*a5;
  if (v19)
  {
LABEL_8:
    uint64_t v22 = (void *)(v21[7] + 8 * result);
    uint64_t v23 = *v22 + v11;
    if (__OFADD__(*v22, v11))
    {
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
LABEL_13:
    *uint64_t v22 = v23;
    uint64_t v27 = specialized LazyMapSequence.Iterator.next()();
    if ((v29 & 1) == 0)
    {
      uint64_t v10 = v27;
      uint64_t v11 = v28;
      char v19 = 1;
      do
      {
        uint64_t v36 = (void *)*a5;
        unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v10);
        uint64_t v38 = v36[2];
        BOOL v39 = (v37 & 1) == 0;
        BOOL v17 = __OFADD__(v38, v39);
        uint64_t v40 = v38 + v39;
        if (v17) {
          goto LABEL_25;
        }
        a4 = v37;
        if (v36[3] < v40)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v40, 1);
          unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v10);
          if ((a4 & 1) != (v41 & 1)) {
            goto LABEL_5;
          }
        }
        unint64_t v42 = (void *)*a5;
        if (a4)
        {
          uint64_t v31 = (void *)(v42[7] + 8 * result);
          uint64_t v33 = *v31 + v11;
          if (__OFADD__(*v31, v11)) {
            goto LABEL_23;
          }
        }
        else
        {
          v42[(result >> 6) + 8] |= 1 << result;
          uint64_t v30 = 8 * result;
          *(void *)(v42[6] + v30) = v10;
          *(void *)(v42[7] + v30) = v11;
          uint64_t v32 = v42[2];
          uint64_t v31 = v42 + 2;
          uint64_t v33 = v32 + 1;
          if (__OFADD__(v32, 1)) {
            goto LABEL_26;
          }
        }
        *uint64_t v31 = v33;
        uint64_t v10 = specialized LazyMapSequence.Iterator.next()();
        uint64_t v11 = v34;
      }
      while ((v35 & 1) == 0);
    }
LABEL_24:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of Set<EventID>.Iterator._Variant();
    return swift_release();
  }
LABEL_12:
  v21[(result >> 6) + 8] |= 1 << result;
  uint64_t v25 = 8 * result;
  *(void *)(v21[6] + v25) = v10;
  *(void *)(v21[7] + v25) = v11;
  uint64_t v26 = v21[2];
  uint64_t v22 = v21 + 2;
  uint64_t v23 = v26 + 1;
  if (!__OFADD__(v26, 1)) {
    goto LABEL_13;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t specialized Text.Effect.BaseFragmentIdentifierMap.updateKeyframes(_:)(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v10 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(a1, (uint64_t)protocol witness for static CodableByProxy.unwrap(codingProxy:) in conformance UnitPoint, 0, isUniquelyReferenced_nonNull_native, &v10);
  *uint64_t v2 = v10;
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v7 = v2[1];
  BOOL v8 = __OFADD__(v7, a2);
  uint64_t v9 = v7 + a2;
  if (v8) {
    __break(1u);
  }
  else {
    v2[1] = v9;
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.RelativeFragmentIdentifier()
{
  return &type metadata for Text.Effect.RelativeFragmentIdentifier;
}

unint64_t lazy protocol witness table accessor for type Text.Effect.RelativeFragmentIdentifier and conformance Text.Effect.RelativeFragmentIdentifier()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.RelativeFragmentIdentifier and conformance Text.Effect.RelativeFragmentIdentifier;
  if (!lazy protocol witness table cache variable for type Text.Effect.RelativeFragmentIdentifier and conformance Text.Effect.RelativeFragmentIdentifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.RelativeFragmentIdentifier and conformance Text.Effect.RelativeFragmentIdentifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.RelativeFragmentIdentifier and conformance Text.Effect.RelativeFragmentIdentifier;
  if (!lazy protocol witness table cache variable for type Text.Effect.RelativeFragmentIdentifier and conformance Text.Effect.RelativeFragmentIdentifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.RelativeFragmentIdentifier and conformance Text.Effect.RelativeFragmentIdentifier);
  }
  return result;
}

uint64_t ResolvableDateInterval.init(_:in:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for TimeZone();
  uint64_t v31 = *(void *)(v6 - 8);
  uint64_t v32 = v6;
  MEMORY[0x270FA5388](v6);
  char v29 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Locale();
  uint64_t v26 = *(void *)(v8 - 8);
  uint64_t v27 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Calendar();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  char v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *a2;
  uint64_t v15 = a2[1];
  uint64_t v17 = type metadata accessor for DateInterval();
  uint64_t v18 = *(void *)(v17 - 8);
  char v19 = *(void (**)(uint64_t, uint64_t))(v18 + 16);
  uint64_t v33 = a3;
  uint64_t v30 = a1;
  uint64_t v28 = v17;
  v19(a3, a1);
  if (v15)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v16, (uint64_t)v14);
  }
  else
  {
    uint64_t v20 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v20, (uint64_t)v14);
  }
  swift_release_n();
  swift_release_n();
  uint64_t v21 = (int *)type metadata accessor for ResolvableDateInterval();
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v33 + v21[5], v14, v11);
  uint64_t v22 = (uint64_t)v29;
  if (v15)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v16, (uint64_t)v10);
  }
  else
  {
    uint64_t v23 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v23, (uint64_t)v10);
  }
  swift_release_n();
  swift_release_n();
  (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(v33 + v21[6], v10, v27);
  if (v15)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v16, v22);
    swift_release_n();
  }
  else
  {
    uint64_t v24 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v24, v22);
    swift_release();
  }
  swift_release_n();
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v30, v28);
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v31 + 32))(v33 + v21[7], v22, v32);
}

uint64_t ResolvableDateInterval.interval.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for DateInterval();
  unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t ResolvableDateInterval.interval.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DateInterval();
  unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);

  return v4(v1, a1, v3);
}

uint64_t (*ResolvableDateInterval.interval.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ResolvableDateInterval.calendar.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ResolvableDateInterval() + 20);
  uint64_t v4 = type metadata accessor for Calendar();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t ResolvableDateInterval.locale.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ResolvableDateInterval() + 24);
  uint64_t v4 = type metadata accessor for Locale();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t ResolvableDateInterval.timeZone.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ResolvableDateInterval() + 28);
  uint64_t v4 = type metadata accessor for TimeZone();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ResolvableDateInterval.CodingKeys()
{
  uint64_t result = 0x6C61767265746E69;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x7261646E656C6163;
      break;
    case 2:
      uint64_t result = 0x656C61636F6CLL;
      break;
    case 3:
      uint64_t result = 0x656E6F5A656D6974;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ResolvableDateInterval.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized ResolvableDateInterval.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ResolvableDateInterval.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ResolvableDateInterval.CodingKeys and conformance ResolvableDateInterval.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ResolvableDateInterval.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ResolvableDateInterval.CodingKeys and conformance ResolvableDateInterval.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

id static ResolvableDateInterval.attribute.getter()
{
  if (one-time initialization token for attribute != -1) {
    swift_once();
  }
  unint64_t v0 = (void *)static ResolvableDateInterval.attribute;

  return v0;
}

uint64_t ResolvableDateInterval.resolve(in:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v33 = a1;
  uint64_t v2 = type metadata accessor for AttributeContainer();
  MEMORY[0x270FA5388](v2 - 8);
  v31[1] = (char *)v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s10Foundation8TimeZoneVSgMaTm_0(0, &lazy cache variable for type metadata for TimeZone?, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)v31 - v5;
  uint64_t v32 = type metadata accessor for Locale();
  uint64_t v7 = *(void *)(v32 - 8);
  MEMORY[0x270FA5388](v32);
  uint64_t v9 = (char *)v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Calendar();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Date();
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  char v19 = (char *)v31 - v18;
  DateInterval.start.getter();
  DateInterval.end.getter();
  uint64_t v20 = (int *)type metadata accessor for ResolvableDateInterval();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v1 + v20[5], v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v1 + v20[6], v32);
  uint64_t v21 = v1 + v20[7];
  uint64_t v22 = type metadata accessor for TimeZone();
  uint64_t v23 = *(void *)(v22 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v6, v21, v22);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v6, 0, 1, v22);
  id v24 = objc_allocWithZone((Class)TimeIntervalProvider);
  id v25 = @nonobjc TimeIntervalProvider.init(start:end:calendar:locale:timeZone:)((uint64_t)v19, (uint64_t)v16, (uint64_t)v13, (uint64_t)v9, (uint64_t)v6);
  id v26 = objc_msgSend(v25, sel_formattedString);

  if (v26)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    swift_bridgeObjectRetain();
    AttributeContainer.init()();
    uint64_t v27 = v33;
    AttributedString.init(_:attributes:)();
    uint64_t v28 = type metadata accessor for AttributedString();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v27, 0, 1, v28);
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v30 = type metadata accessor for AttributedString();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v33, 1, 1, v30);
  }
}

void ResolvableDateInterval.schedule.getter(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t ResolvableDateInterval.encode(to:)(void *a1)
{
  type metadata accessor for KeyedEncodingContainer<ResolvableDateInterval.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<ResolvableDateInterval.CodingKeys>, MEMORY[0x263F8E0C0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = &v9[-v6];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ResolvableDateInterval.CodingKeys and conformance ResolvableDateInterval.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[15] = 0;
  type metadata accessor for DateInterval();
  lazy protocol witness table accessor for type DateInterval and conformance DateInterval(&lazy protocol witness table cache variable for type DateInterval and conformance DateInterval, MEMORY[0x263F062D0]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for ResolvableDateInterval();
    v9[14] = 1;
    type metadata accessor for Calendar();
    lazy protocol witness table accessor for type DateInterval and conformance DateInterval(&lazy protocol witness table cache variable for type Calendar and conformance Calendar, MEMORY[0x263F07920]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v9[13] = 2;
    type metadata accessor for Locale();
    lazy protocol witness table accessor for type DateInterval and conformance DateInterval(&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x263F07690]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v9[12] = 3;
    type metadata accessor for TimeZone();
    lazy protocol witness table accessor for type DateInterval and conformance DateInterval(&lazy protocol witness table cache variable for type TimeZone and conformance TimeZone, MEMORY[0x263F079C8]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t ResolvableDateInterval.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v35 = a2;
  uint64_t v36 = type metadata accessor for TimeZone();
  uint64_t v34 = *(void *)(v36 - 8);
  MEMORY[0x270FA5388](v36);
  char v37 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Locale();
  uint64_t v42 = *(void *)(v4 - 8);
  uint64_t v43 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v38 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = type metadata accessor for Calendar();
  uint64_t v44 = *(void *)(v41 - 8);
  MEMORY[0x270FA5388](v41);
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DateInterval();
  uint64_t v39 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v45 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for KeyedEncodingContainer<ResolvableDateInterval.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<ResolvableDateInterval.CodingKeys>, MEMORY[0x263F8E040]);
  uint64_t v47 = v10;
  uint64_t v40 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v31 - v11;
  uint64_t v13 = type metadata accessor for ResolvableDateInterval();
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ResolvableDateInterval.CodingKeys and conformance ResolvableDateInterval.CodingKeys();
  uint64_t v46 = v12;
  uint64_t v16 = (uint64_t)v48;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v16) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v33 = v13;
  uint64_t v17 = v15;
  double v48 = a1;
  uint64_t v18 = v43;
  uint64_t v19 = v44;
  uint64_t v21 = v41;
  uint64_t v20 = v42;
  char v52 = 0;
  lazy protocol witness table accessor for type DateInterval and conformance DateInterval(&lazy protocol witness table cache variable for type DateInterval and conformance DateInterval, MEMORY[0x263F062D0]);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v39 + 32);
  uint64_t v23 = v45;
  uint64_t v45 = (char *)v8;
  v22(v17, v23, v8);
  char v51 = 1;
  lazy protocol witness table accessor for type DateInterval and conformance DateInterval(&lazy protocol witness table cache variable for type Calendar and conformance Calendar, MEMORY[0x263F07920]);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v24 = v33;
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(&v17[*(int *)(v33 + 20)], v7, v21);
  char v50 = 2;
  lazy protocol witness table accessor for type DateInterval and conformance DateInterval(&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x263F07690]);
  id v25 = v38;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v26 = *(int *)(v24 + 24);
  uint64_t v32 = (uint64_t)v17;
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(&v17[v26], v25, v18);
  char v49 = 3;
  lazy protocol witness table accessor for type DateInterval and conformance DateInterval(&lazy protocol witness table cache variable for type TimeZone and conformance TimeZone, MEMORY[0x263F079C8]);
  uint64_t v27 = v36;
  uint64_t v28 = v37;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v40 + 8))(v46, v47);
  uint64_t v29 = v32;
  (*(void (**)(uint64_t, char *, uint64_t))(v34 + 32))(v32 + *(int *)(v24 + 28), v28, v27);
  outlined init with copy of ResolvableDateInterval(v29, v35);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v48);
  return outlined destroy of ResolvableDateInterval(v29);
}

id protocol witness for static ResolvableStringAttributeFamily.attribute.getter in conformance ResolvableDateInterval()
{
  if (one-time initialization token for attribute != -1) {
    swift_once();
  }
  unint64_t v0 = (void *)static ResolvableDateInterval.attribute;

  return v0;
}

uint64_t protocol witness for Decodable.init(from:) in conformance ResolvableDateInterval@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ResolvableDateInterval.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ResolvableDateInterval(void *a1)
{
  return ResolvableDateInterval.encode(to:)(a1);
}

uint64_t ResolvableDateInterval.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t static ResolvableDateInterval.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (static DateInterval.== infix(_:_:)())
  {
    uint64_t v4 = type metadata accessor for ResolvableDateInterval();
    if ((MEMORY[0x24C521A00](a1 + *(int *)(v4 + 20), a2 + *(int *)(v4 + 20)) & 1) != 0
      && (MEMORY[0x24C5218A0](a1 + *(int *)(v4 + 24), a2 + *(int *)(v4 + 24)) & 1) != 0)
    {
      JUMPOUT(0x24C521B70);
    }
  }
  return 0;
}

Swift::Int ResolvableDateInterval.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ResolvableDateInterval()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ResolvableDateInterval()
{
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ResolvableDateInterval()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ResolvableDateInterval(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((static DateInterval.== infix(_:_:)() & 1) != 0
    && (MEMORY[0x24C521A00](a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20)) & 1) != 0
    && (MEMORY[0x24C5218A0](a1 + *(int *)(a3 + 24), a2 + *(int *)(a3 + 24)) & 1) != 0)
  {
    JUMPOUT(0x24C521B70);
  }
  return 0;
}

uint64_t type metadata accessor for ResolvableDateInterval()
{
  uint64_t result = type metadata singleton initialization cache for ResolvableDateInterval;
  if (!type metadata singleton initialization cache for ResolvableDateInterval) {
    return swift_getSingletonMetadata();
  }
  return result;
}

id @nonobjc TimeIntervalProvider.init(start:end:calendar:locale:timeZone:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v9.super.Class isa = Date._bridgeToObjectiveC()().super.isa;
  uint64_t v24 = a2;
  v10.super.Class isa = Date._bridgeToObjectiveC()().super.isa;
  uint64_t v23 = a3;
  v11.super.Class isa = Calendar._bridgeToObjectiveC()().super.isa;
  v12.super.Class isa = Locale._bridgeToObjectiveC()().super.isa;
  uint64_t v13 = type metadata accessor for TimeZone();
  uint64_t v14 = *(void *)(v13 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(a5, 1, v13) != 1)
  {
    Class isa = TimeZone._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a5, v13);
  }
  id v16 = objc_msgSend(v22, sel_initWithStartDate_endDate_calendar_locale_timeZone_, v9.super.isa, v10.super.isa, v11.super.isa, v12.super.isa, isa);

  uint64_t v17 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(a4, v17);
  uint64_t v18 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v23, v18);
  uint64_t v19 = type metadata accessor for Date();
  uint64_t v20 = *(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8);
  v20(v24, v19);
  v20(a1, v19);
  return v16;
}

unint64_t lazy protocol witness table accessor for type ResolvableDateInterval.CodingKeys and conformance ResolvableDateInterval.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ResolvableDateInterval.CodingKeys and conformance ResolvableDateInterval.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableDateInterval.CodingKeys and conformance ResolvableDateInterval.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableDateInterval.CodingKeys and conformance ResolvableDateInterval.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvableDateInterval.CodingKeys and conformance ResolvableDateInterval.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableDateInterval.CodingKeys and conformance ResolvableDateInterval.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableDateInterval.CodingKeys and conformance ResolvableDateInterval.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvableDateInterval.CodingKeys and conformance ResolvableDateInterval.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableDateInterval.CodingKeys and conformance ResolvableDateInterval.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableDateInterval.CodingKeys and conformance ResolvableDateInterval.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvableDateInterval.CodingKeys and conformance ResolvableDateInterval.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableDateInterval.CodingKeys and conformance ResolvableDateInterval.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableDateInterval.CodingKeys and conformance ResolvableDateInterval.CodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type DateInterval and conformance DateInterval(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for KeyedEncodingContainer<ResolvableDateInterval.CodingKeys>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = lazy protocol witness table accessor for type ResolvableDateInterval.CodingKeys and conformance ResolvableDateInterval.CodingKeys();
    unint64_t v7 = a3(a1, &unk_26FA66D80, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t outlined init with copy of ResolvableDateInterval(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ResolvableDateInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ResolvableDateInterval(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ResolvableDateInterval();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t associated type witness table accessor for ResolvableStringAttribute.Schedule : TimelineSchedule in ResolvableDateInterval()
{
  return lazy protocol witness table accessor for type DateInterval and conformance DateInterval((unint64_t *)&lazy protocol witness table cache variable for type ExplicitTimelineSchedule<[Date]> and conformance ExplicitTimelineSchedule<A>, (void (*)(uint64_t))type metadata accessor for ExplicitTimelineSchedule<[Date]>);
}

uint64_t lazy protocol witness table accessor for type AnySequence<Date> and conformance AnySequence<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    _s10Foundation8TimeZoneVSgMaTm_0(255, a2, MEMORY[0x263F07490], a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for ResolvableDateInterval(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type DateInterval and conformance DateInterval(&lazy protocol witness table cache variable for type ResolvableDateInterval and conformance ResolvableDateInterval, (void (*)(uint64_t))type metadata accessor for ResolvableDateInterval);
  *(void *)(a1 + 16) = result;
  return result;
}

_UNKNOWN **associated type witness table accessor for ResolvableStringAttributeRepresentation.Family : ResolvableStringAttributeFamily in ResolvableDateInterval()
{
  return &protocol witness table for ResolvableDateInterval;
}

uint64_t associated type witness table accessor for TimelineSchedule.Entries : Sequence in ResolvableDateInterval()
{
  return lazy protocol witness table accessor for type AnySequence<Date> and conformance AnySequence<A>((unint64_t *)&lazy protocol witness table cache variable for type AnySequence<Date> and conformance AnySequence<A>, (unint64_t *)&lazy cache variable for type metadata for AnySequence<Date>, MEMORY[0x263F8DB98]);
}

void _s10Foundation8TimeZoneVSgMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t base witness table accessor for Equatable in ResolvableDateInterval()
{
  return lazy protocol witness table accessor for type DateInterval and conformance DateInterval(&lazy protocol witness table cache variable for type ResolvableDateInterval and conformance ResolvableDateInterval, (void (*)(uint64_t))type metadata accessor for ResolvableDateInterval);
}

uint64_t *initializeBufferWithCopyOfBuffer for ResolvableDateInterval(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for DateInterval();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    NSDate v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Calendar();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    uint64_t v12 = a3[6];
    uint64_t v13 = (char *)a1 + v12;
    uint64_t v14 = (char *)a2 + v12;
    uint64_t v15 = type metadata accessor for Locale();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
    uint64_t v16 = a3[7];
    uint64_t v17 = (char *)a1 + v16;
    uint64_t v18 = (char *)a2 + v16;
    uint64_t v19 = type metadata accessor for TimeZone();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
  }
  return a1;
}

uint64_t destroy for ResolvableDateInterval(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + a2[5];
  uint64_t v6 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = a1 + a2[6];
  uint64_t v8 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = a1 + a2[7];
  uint64_t v10 = type metadata accessor for TimeZone();
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8);

  return v11(v9, v10);
}

uint64_t initializeWithCopy for ResolvableDateInterval(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
  return a1;
}

uint64_t assignWithCopy for ResolvableDateInterval(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 24))(v12, v13, v14);
  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 24))(v16, v17, v18);
  return a1;
}

uint64_t initializeWithTake for ResolvableDateInterval(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 32))(v16, v17, v18);
  return a1;
}

uint64_t assignWithTake for ResolvableDateInterval(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 40))(v16, v17, v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvableDateInterval(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246003A3C);
}

uint64_t sub_246003A3C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DateInterval();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_8:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for Calendar();
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = a3[5];
LABEL_7:
    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_8;
  }
  uint64_t v14 = type metadata accessor for Locale();
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
  {
    uint64_t v8 = v14;
    uint64_t v12 = *(void *)(v14 - 8);
    uint64_t v13 = a3[6];
    goto LABEL_7;
  }
  uint64_t v16 = type metadata accessor for TimeZone();
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48);
  uint64_t v18 = v16;
  uint64_t v19 = a1 + a3[7];

  return v17(v19, a2, v18);
}

uint64_t storeEnumTagSinglePayload for ResolvableDateInterval(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246003BE8);
}

uint64_t sub_246003BE8(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for DateInterval();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_8:
    return v11(v12, a2, a2, v10);
  }
  uint64_t v13 = type metadata accessor for Calendar();
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v15 = a4[5];
LABEL_7:
    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_8;
  }
  uint64_t v16 = type metadata accessor for Locale();
  if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a3)
  {
    uint64_t v10 = v16;
    uint64_t v14 = *(void *)(v16 - 8);
    uint64_t v15 = a4[6];
    goto LABEL_7;
  }
  uint64_t v18 = type metadata accessor for TimeZone();
  uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
  uint64_t v20 = v18;
  uint64_t v21 = a1 + a4[7];

  return v19(v21, a2, a2, v20);
}

uint64_t type metadata completion function for ResolvableDateInterval()
{
  uint64_t result = type metadata accessor for DateInterval();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Calendar();
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for Locale();
      if (v3 <= 0x3F)
      {
        uint64_t result = type metadata accessor for TimeZone();
        if (v4 <= 0x3F)
        {
          swift_initStructMetadata();
          return 0;
        }
      }
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ResolvableDateInterval.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x246003F98);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

void *type metadata accessor for ResolvableDateInterval.CodingKeys()
{
  return &unk_26FA66D80;
}

uint64_t specialized ResolvableDateInterval.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6C61767265746E69 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7261646E656C6163 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x656E6F5A656D6974 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t ResolvableCurrentDate.init(dateFormat:timeZone:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v32 = a2;
  _s10Foundation8TimeZoneVSgMaTm_1(0, &lazy cache variable for type metadata for TimeZone?, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v37 = (uint64_t)&v32 - v8;
  uint64_t v34 = type metadata accessor for TimeZone();
  uint64_t v9 = *(void *)(v34 - 8);
  MEMORY[0x270FA5388](v34);
  uint64_t v33 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Locale();
  uint64_t v35 = *(void *)(v11 - 8);
  uint64_t v36 = v11;
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Calendar();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(v16) = *(unsigned char *)(a1 + 16);
  uint64_t v19 = *a3;
  uint64_t v18 = a3[1];
  *(_OWORD *)a4 = *(_OWORD *)a1;
  uint64_t v20 = a4;
  *(unsigned char *)(a4 + 16) = v16;
  if (v18)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v19, (uint64_t)v17);
  }
  else
  {
    uint64_t v21 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v21, (uint64_t)v17);
  }
  swift_release_n();
  swift_release_n();
  id v22 = (int *)type metadata accessor for ResolvableCurrentDate();
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v20 + v22[5], v17, v14);
  if (v18)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v19, (uint64_t)v13);
  }
  else
  {
    uint64_t v23 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v23, (uint64_t)v13);
  }
  uint64_t v24 = v20;
  uint64_t v26 = (uint64_t)v33;
  uint64_t v25 = v34;
  uint64_t v27 = v32;
  swift_release_n();
  swift_release_n();
  (*(void (**)(uint64_t, char *, uint64_t))(v35 + 32))(v24 + v22[6], v13, v36);
  uint64_t v28 = v37;
  outlined init with copy of TimeZone?(v27, v37);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v28, 1, v25) == 1)
  {
    if (v18)
    {
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.value<A>(_:for:)(v19, v26);
    }
    else
    {
      uint64_t v31 = swift_retain_n();
      specialized closure #1 in PropertyList.subscript.getter(v31, v26);
    }
    swift_release_n();
    swift_release_n();
    outlined destroy of TimeZone?(v27);
    swift_release();
    swift_release();
    outlined destroy of TimeZone?(v28);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v24 + v22[7], v26, v25);
  }
  else
  {
    outlined destroy of TimeZone?(v27);
    swift_release();
    swift_release();
    uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32);
    v29(v26, v28, v25);
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v29)(v24 + v22[7], v26, v25);
  }
}

uint64_t ResolvableCurrentDate.DateFormat.hash(into:)()
{
  Hasher._combine(_:)(*(unsigned __int8 *)(v0 + 16));

  return String.hash(into:)();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ResolvableCurrentDate.DateFormat.CodingKeys()
{
  if (*v0) {
    return 0x6574616C706D6574;
  }
  else {
    return 0x74616D726F66;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ResolvableCurrentDate.DateFormat.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized ResolvableCurrentDate.DateFormat.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ResolvableCurrentDate.DateFormat.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ResolvableCurrentDate.DateFormat.CodingKeys and conformance ResolvableCurrentDate.DateFormat.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ResolvableCurrentDate.DateFormat.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ResolvableCurrentDate.DateFormat.CodingKeys and conformance ResolvableCurrentDate.DateFormat.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ResolvableCurrentDate.DateFormat.FormatCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ResolvableCurrentDate.DateFormat.FormatCodingKeys and conformance ResolvableCurrentDate.DateFormat.FormatCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ResolvableCurrentDate.DateFormat.FormatCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ResolvableCurrentDate.DateFormat.FormatCodingKeys and conformance ResolvableCurrentDate.DateFormat.FormatCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ResolvableCurrentDate.DateFormat.TemplateCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ResolvableCurrentDate.DateFormat.TemplateCodingKeys and conformance ResolvableCurrentDate.DateFormat.TemplateCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ResolvableCurrentDate.DateFormat.TemplateCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ResolvableCurrentDate.DateFormat.TemplateCodingKeys and conformance ResolvableCurrentDate.DateFormat.TemplateCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ResolvableCurrentDate.DateFormat.encode(to:)(void *a1)
{
  int v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8E0C0];
  type metadata accessor for KeyedEncodingContainer<ResolvableCurrentDate.DateFormat.TemplateCodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<ResolvableCurrentDate.DateFormat.TemplateCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvableCurrentDate.DateFormat.TemplateCodingKeys and conformance ResolvableCurrentDate.DateFormat.TemplateCodingKeys, (uint64_t)&unk_26FA648D0, MEMORY[0x263F8E0C0]);
  uint64_t v23 = *(void *)(v4 - 8);
  uint64_t v24 = v4;
  MEMORY[0x270FA5388](v4);
  id v22 = (char *)&v19 - v5;
  type metadata accessor for KeyedEncodingContainer<ResolvableCurrentDate.DateFormat.TemplateCodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<ResolvableCurrentDate.DateFormat.FormatCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvableCurrentDate.DateFormat.FormatCodingKeys and conformance ResolvableCurrentDate.DateFormat.FormatCodingKeys, (uint64_t)&unk_26FA647B0, v3);
  uint64_t v20 = *(void *)(v6 - 8);
  uint64_t v21 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v19 - v7;
  type metadata accessor for KeyedEncodingContainer<ResolvableCurrentDate.DateFormat.TemplateCodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<ResolvableCurrentDate.DateFormat.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvableCurrentDate.DateFormat.CodingKeys and conformance ResolvableCurrentDate.DateFormat.CodingKeys, (uint64_t)&unk_26FA64840, v3);
  uint64_t v10 = v9;
  uint64_t v25 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v19 - v11;
  uint64_t v13 = *v1;
  uint64_t v26 = v1[1];
  uint64_t v27 = v13;
  char v14 = *((unsigned char *)v1 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ResolvableCurrentDate.DateFormat.CodingKeys and conformance ResolvableCurrentDate.DateFormat.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v14)
  {
    char v29 = 1;
    lazy protocol witness table accessor for type ResolvableCurrentDate.DateFormat.TemplateCodingKeys and conformance ResolvableCurrentDate.DateFormat.TemplateCodingKeys();
    uint64_t v15 = v22;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v16 = v24;
    KeyedEncodingContainer.encode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v15, v16);
  }
  else
  {
    char v28 = 0;
    lazy protocol witness table accessor for type ResolvableCurrentDate.DateFormat.FormatCodingKeys and conformance ResolvableCurrentDate.DateFormat.FormatCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v17 = v21;
    KeyedEncodingContainer.encode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v8, v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v12, v10);
}

Swift::Int ResolvableCurrentDate.DateFormat.hashValue.getter()
{
  Swift::UInt v1 = *(unsigned __int8 *)(v0 + 16);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t ResolvableCurrentDate.DateFormat.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v34 = a2;
  int v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8E040];
  type metadata accessor for KeyedEncodingContainer<ResolvableCurrentDate.DateFormat.TemplateCodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<ResolvableCurrentDate.DateFormat.TemplateCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvableCurrentDate.DateFormat.TemplateCodingKeys and conformance ResolvableCurrentDate.DateFormat.TemplateCodingKeys, (uint64_t)&unk_26FA648D0, MEMORY[0x263F8E040]);
  uint64_t v35 = v4;
  uint64_t v37 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v39 = (char *)&v33 - v5;
  type metadata accessor for KeyedEncodingContainer<ResolvableCurrentDate.DateFormat.TemplateCodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<ResolvableCurrentDate.DateFormat.FormatCodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvableCurrentDate.DateFormat.FormatCodingKeys and conformance ResolvableCurrentDate.DateFormat.FormatCodingKeys, (uint64_t)&unk_26FA647B0, v3);
  uint64_t v7 = v6;
  uint64_t v36 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v33 - v8;
  type metadata accessor for KeyedEncodingContainer<ResolvableCurrentDate.DateFormat.TemplateCodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<ResolvableCurrentDate.DateFormat.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvableCurrentDate.DateFormat.CodingKeys and conformance ResolvableCurrentDate.DateFormat.CodingKeys, (uint64_t)&unk_26FA64840, v3);
  uint64_t v11 = v10;
  uint64_t v38 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v33 - v12;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ResolvableCurrentDate.DateFormat.CodingKeys and conformance ResolvableCurrentDate.DateFormat.CodingKeys();
  char v14 = v40;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v14) {
    goto LABEL_6;
  }
  uint64_t v15 = v7;
  uint64_t v16 = v39;
  uint64_t v40 = a1;
  uint64_t v17 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v17 + 16) != 1)
  {
    uint64_t v23 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v25 = v24;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *uint64_t v25 = &type metadata for ResolvableCurrentDate.DateFormat;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v23 - 8) + 104))(v25, *MEMORY[0x263F8DCB0], v23);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v38 + 8))(v13, v11);
    a1 = v40;
LABEL_6:
    uint64_t v26 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v26);
  }
  char v18 = *(unsigned char *)(v17 + 32);
  if (v18)
  {
    LODWORD(v36) = *(unsigned __int8 *)(v17 + 32);
    char v42 = 1;
    lazy protocol witness table accessor for type ResolvableCurrentDate.DateFormat.TemplateCodingKeys and conformance ResolvableCurrentDate.DateFormat.TemplateCodingKeys();
    uint64_t v19 = v16;
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v20 = v35;
    uint64_t v21 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v22 = v38;
    uint64_t v30 = v29;
    uint64_t v33 = v21;
    (*(void (**)(char *, uint64_t))(v37 + 8))(v19, v20);
    char v18 = v36;
  }
  else
  {
    char v41 = 0;
    lazy protocol witness table accessor for type ResolvableCurrentDate.DateFormat.FormatCodingKeys and conformance ResolvableCurrentDate.DateFormat.FormatCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v28 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v30 = v31;
    uint64_t v33 = v28;
    (*(void (**)(char *, uint64_t))(v36 + 8))(v9, v15);
    uint64_t v22 = v38;
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v22 + 8))(v13, v11);
  uint64_t v32 = v34;
  *uint64_t v34 = v33;
  v32[1] = v30;
  *((unsigned char *)v32 + 16) = v18;
  uint64_t v26 = (uint64_t)v40;
  return __swift_destroy_boxed_opaque_existential_1(v26);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ResolvableCurrentDate.DateFormat()
{
  Swift::UInt v1 = *(unsigned __int8 *)(v0 + 16);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ResolvableCurrentDate.DateFormat()
{
  Hasher._combine(_:)(*(unsigned __int8 *)(v0 + 16));

  return String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ResolvableCurrentDate.DateFormat()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(unsigned __int8 *)(v0 + 16));
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance ResolvableCurrentDate.DateFormat@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return ResolvableCurrentDate.DateFormat.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ResolvableCurrentDate.DateFormat(void *a1)
{
  return ResolvableCurrentDate.DateFormat.encode(to:)(a1);
}

uint64_t ResolvableCurrentDate.dateFormat.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  char v3 = *(unsigned char *)(v1 + 16);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = v3;
  return outlined copy of ResolvableCurrentDate.DateFormat();
}

uint64_t ResolvableCurrentDate.calendar.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ResolvableCurrentDate() + 20);
  uint64_t v4 = type metadata accessor for Calendar();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t ResolvableCurrentDate.locale.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ResolvableCurrentDate() + 24);
  uint64_t v4 = type metadata accessor for Locale();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t ResolvableCurrentDate.timeZone.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ResolvableCurrentDate() + 28);
  uint64_t v4 = type metadata accessor for TimeZone();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ResolvableCurrentDate.CodingKeys()
{
  uint64_t result = 0x6D726F4665746164;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x7261646E656C6163;
      break;
    case 2:
      uint64_t result = 0x656C61636F6CLL;
      break;
    case 3:
      uint64_t result = 0x656E6F5A656D6974;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ResolvableCurrentDate.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized ResolvableCurrentDate.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ResolvableCurrentDate.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ResolvableCurrentDate.CodingKeys and conformance ResolvableCurrentDate.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ResolvableCurrentDate.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ResolvableCurrentDate.CodingKeys and conformance ResolvableCurrentDate.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

id static ResolvableCurrentDate.attribute.getter()
{
  if (one-time initialization token for attribute != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static ResolvableCurrentDate.attribute;

  return v0;
}

id ResolvableCurrentDate.provider.getter()
{
  _s10Foundation8TimeZoneVSgMaTm_1(0, &lazy cache variable for type metadata for TimeZone?, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)v19 - v2;
  uint64_t v4 = type metadata accessor for Locale();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Calendar();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(v0 + 8);
  uint64_t v21 = *(void *)v0;
  int v20 = *(unsigned __int8 *)(v0 + 16);
  v19[1] = type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for DateProvider);
  uint64_t v13 = (int *)type metadata accessor for ResolvableCurrentDate();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v0 + v13[5], v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v0 + v13[6], v4);
  uint64_t v14 = v0 + v13[7];
  uint64_t v15 = type metadata accessor for TimeZone();
  uint64_t v16 = *(void *)(v15 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v3, v14, v15);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v3, 0, 1, v15);
  swift_bridgeObjectRetain();
  if (v20) {
    uint64_t v17 = &selRef_initWithDateFormatTemplate_calendar_locale_timeZone_;
  }
  else {
    uint64_t v17 = &selRef_initWithDateFormat_calendar_locale_timeZone_;
  }
  return DateProvider.__allocating_init(dateFormat:calendar:locale:timeZone:)(v21, v12, (uint64_t)v11, (uint64_t)v7, (uint64_t)v3, (SEL *)v17);
}

id DateProvider.__allocating_init(dateFormat:calendar:locale:timeZone:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, SEL *a6)
{
  uint64_t v9 = (void *)MEMORY[0x24C522820]();
  swift_bridgeObjectRelease();
  v10.super.Class isa = Calendar._bridgeToObjectiveC()().super.isa;
  v11.super.Class isa = Locale._bridgeToObjectiveC()().super.isa;
  uint64_t v12 = type metadata accessor for TimeZone();
  uint64_t v13 = *(void *)(v12 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(a5, 1, v12) != 1)
  {
    Class isa = TimeZone._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a5, v12);
  }
  id v15 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), *a6, v9, v10.super.isa, v11.super.isa, isa);

  uint64_t v16 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(a4, v16);
  uint64_t v17 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(a3, v17);
  return v15;
}

uint64_t ResolvableCurrentDate.resolve(in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for AttributeContainer();
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v5 = type metadata accessor for ResolvableStringResolutionContext();
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = ResolvableCurrentDate.provider.getter();
  if (v8)
  {
    uint64_t v9 = v8;
    type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for DateFormattingContext);
    outlined init with copy of ResolvableCurrentDate(a1, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for ResolvableStringResolutionContext);
    id v10 = DateFormattingContext.init(_:)((uint64_t)v7);
    id v11 = objc_msgSend(v9, sel_formattedStringInContext_, v10);

    if (v11)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      swift_bridgeObjectRetain();
      AttributeContainer.init()();
      AttributedString.init(_:attributes:)();
      uint64_t v12 = type metadata accessor for AttributedString();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(a2, 0, 1, v12);
      return swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v16 = type metadata accessor for AttributedString();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(a2, 1, 1, v16);
    }
  }
  else
  {
    uint64_t v14 = type metadata accessor for AttributedString();
    id v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
    return v15(a2, 1, 1, v14);
  }
}

uint64_t ResolvableCurrentDate.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  type metadata accessor for KeyedEncodingContainer<ResolvableCurrentDate.DateFormat.TemplateCodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<ResolvableCurrentDate.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvableCurrentDate.CodingKeys and conformance ResolvableCurrentDate.CodingKeys, (uint64_t)&unk_26FA649F0, MEMORY[0x263F8E0C0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v12 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ResolvableCurrentDate.CodingKeys and conformance ResolvableCurrentDate.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v10 = *((unsigned char *)v3 + 16);
  long long v12 = *v3;
  char v13 = v10;
  char v14 = 0;
  lazy protocol witness table accessor for type ResolvableCurrentDate.DateFormat and conformance ResolvableCurrentDate.DateFormat();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    type metadata accessor for ResolvableCurrentDate();
    LOBYTE(v12) = 1;
    type metadata accessor for Calendar();
    lazy protocol witness table accessor for type Calendar and conformance Calendar(&lazy protocol witness table cache variable for type Calendar and conformance Calendar, MEMORY[0x263F07920]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12) = 2;
    type metadata accessor for Locale();
    lazy protocol witness table accessor for type Calendar and conformance Calendar(&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x263F07690]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12) = 3;
    type metadata accessor for TimeZone();
    lazy protocol witness table accessor for type Calendar and conformance Calendar(&lazy protocol witness table cache variable for type TimeZone and conformance TimeZone, MEMORY[0x263F079C8]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t ResolvableCurrentDate.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v24 = a2;
  uint64_t v25 = type metadata accessor for TimeZone();
  uint64_t v23 = *(void *)(v25 - 8);
  MEMORY[0x270FA5388](v25);
  uint64_t v26 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = type metadata accessor for Locale();
  uint64_t v27 = *(void *)(v32 - 8);
  MEMORY[0x270FA5388](v32);
  uint64_t v31 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = type metadata accessor for Calendar();
  uint64_t v28 = *(void *)(v30 - 8);
  MEMORY[0x270FA5388](v30);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for KeyedEncodingContainer<ResolvableCurrentDate.DateFormat.TemplateCodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<ResolvableCurrentDate.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvableCurrentDate.CodingKeys and conformance ResolvableCurrentDate.CodingKeys, (uint64_t)&unk_26FA649F0, MEMORY[0x263F8E040]);
  uint64_t v34 = v7;
  uint64_t v29 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v22 - v8;
  uint64_t v10 = type metadata accessor for ResolvableCurrentDate();
  MEMORY[0x270FA5388](v10);
  long long v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ResolvableCurrentDate.CodingKeys and conformance ResolvableCurrentDate.CodingKeys();
  uint64_t v33 = v9;
  uint64_t v13 = (uint64_t)v35;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v13) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v14 = v29;
  uint64_t v22 = (int *)v10;
  uint64_t v35 = a1;
  uint64_t v15 = v30;
  uint64_t v16 = v31;
  uint64_t v17 = v32;
  char v38 = 0;
  lazy protocol witness table accessor for type ResolvableCurrentDate.DateFormat and conformance ResolvableCurrentDate.DateFormat();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  char v18 = v37;
  uint64_t v19 = (uint64_t)v12;
  *(_OWORD *)long long v12 = v36;
  v12[16] = v18;
  LOBYTE(v36) = 1;
  lazy protocol witness table accessor for type Calendar and conformance Calendar(&lazy protocol witness table cache variable for type Calendar and conformance Calendar, MEMORY[0x263F07920]);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, char *, uint64_t))(v28 + 32))(&v12[v22[5]], v6, v15);
  LOBYTE(v36) = 2;
  lazy protocol witness table accessor for type Calendar and conformance Calendar(&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x263F07690]);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, char *, uint64_t))(v27 + 32))(&v12[v22[6]], v16, v17);
  LOBYTE(v36) = 3;
  lazy protocol witness table accessor for type Calendar and conformance Calendar(&lazy protocol witness table cache variable for type TimeZone and conformance TimeZone, MEMORY[0x263F079C8]);
  uint64_t v20 = v25;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v33, v34);
  (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(v19 + v22[7], v26, v20);
  outlined init with copy of ResolvableCurrentDate(v19, v24, (uint64_t (*)(void))type metadata accessor for ResolvableCurrentDate);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
  return outlined destroy of ResolvableCurrentDate(v19);
}

id protocol witness for static ResolvableStringAttributeFamily.attribute.getter in conformance ResolvableCurrentDate()
{
  if (one-time initialization token for attribute != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static ResolvableCurrentDate.attribute;

  return v0;
}

uint64_t protocol witness for Decodable.init(from:) in conformance ResolvableCurrentDate@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ResolvableCurrentDate.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ResolvableCurrentDate(void *a1)
{
  return ResolvableCurrentDate.encode(to:)(a1);
}

uint64_t ResolvableCurrentDate.hash(into:)()
{
  Hasher._combine(_:)(*(unsigned __int8 *)(v0 + 16));
  swift_bridgeObjectRetain();
  String.hash(into:)();
  outlined consume of ResolvableCurrentDate.DateFormat();
  type metadata accessor for ResolvableCurrentDate();
  type metadata accessor for Calendar();
  lazy protocol witness table accessor for type Calendar and conformance Calendar(&lazy protocol witness table cache variable for type Calendar and conformance Calendar, MEMORY[0x263F07920]);
  dispatch thunk of Hashable.hash(into:)();
  type metadata accessor for Locale();
  lazy protocol witness table accessor for type Calendar and conformance Calendar(&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x263F07690]);
  dispatch thunk of Hashable.hash(into:)();
  type metadata accessor for TimeZone();
  lazy protocol witness table accessor for type Calendar and conformance Calendar(&lazy protocol witness table cache variable for type TimeZone and conformance TimeZone, MEMORY[0x263F079C8]);
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int ResolvableCurrentDate.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(unsigned __int8 *)(v0 + 16));
  swift_bridgeObjectRetain();
  String.hash(into:)();
  outlined consume of ResolvableCurrentDate.DateFormat();
  type metadata accessor for ResolvableCurrentDate();
  type metadata accessor for Calendar();
  lazy protocol witness table accessor for type Calendar and conformance Calendar(&lazy protocol witness table cache variable for type Calendar and conformance Calendar, MEMORY[0x263F07920]);
  dispatch thunk of Hashable.hash(into:)();
  type metadata accessor for Locale();
  lazy protocol witness table accessor for type Calendar and conformance Calendar(&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x263F07690]);
  dispatch thunk of Hashable.hash(into:)();
  type metadata accessor for TimeZone();
  lazy protocol witness table accessor for type Calendar and conformance Calendar(&lazy protocol witness table cache variable for type TimeZone and conformance TimeZone, MEMORY[0x263F079C8]);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ResolvableCurrentDate()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(unsigned __int8 *)(v0 + 16));
  swift_bridgeObjectRetain();
  String.hash(into:)();
  outlined consume of ResolvableCurrentDate.DateFormat();
  type metadata accessor for Calendar();
  lazy protocol witness table accessor for type Calendar and conformance Calendar(&lazy protocol witness table cache variable for type Calendar and conformance Calendar, MEMORY[0x263F07920]);
  dispatch thunk of Hashable.hash(into:)();
  type metadata accessor for Locale();
  lazy protocol witness table accessor for type Calendar and conformance Calendar(&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x263F07690]);
  dispatch thunk of Hashable.hash(into:)();
  type metadata accessor for TimeZone();
  lazy protocol witness table accessor for type Calendar and conformance Calendar(&lazy protocol witness table cache variable for type TimeZone and conformance TimeZone, MEMORY[0x263F079C8]);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t type metadata accessor for ResolvableCurrentDate()
{
  uint64_t result = type metadata singleton initialization cache for ResolvableCurrentDate;
  if (!type metadata singleton initialization cache for ResolvableCurrentDate) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t outlined init with copy of TimeZone?(uint64_t a1, uint64_t a2)
{
  _s10Foundation8TimeZoneVSgMaTm_1(0, &lazy cache variable for type metadata for TimeZone?, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of TimeZone?(uint64_t a1)
{
  _s10Foundation8TimeZoneVSgMaTm_1(0, &lazy cache variable for type metadata for TimeZone?, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t specialized static ResolvableCurrentDate.DateFormat.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (a1[2])
  {
    if (a2[2])
    {
      if (v2 != v4 || v3 != v5)
      {
LABEL_15:
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
        goto LABEL_17;
      }
LABEL_16:
      char v7 = 1;
      goto LABEL_17;
    }
  }
  else if ((a2[2] & 1) == 0)
  {
    if (v2 != v4 || v3 != v5) {
      goto LABEL_15;
    }
    goto LABEL_16;
  }
  char v7 = 0;
LABEL_17:
  outlined copy of ResolvableCurrentDate.DateFormat();
  outlined copy of ResolvableCurrentDate.DateFormat();
  outlined consume of ResolvableCurrentDate.DateFormat();
  outlined consume of ResolvableCurrentDate.DateFormat();
  return v7 & 1;
}

unint64_t lazy protocol witness table accessor for type ResolvableCurrentDate.DateFormat.TemplateCodingKeys and conformance ResolvableCurrentDate.DateFormat.TemplateCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.TemplateCodingKeys and conformance ResolvableCurrentDate.DateFormat.TemplateCodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.TemplateCodingKeys and conformance ResolvableCurrentDate.DateFormat.TemplateCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.TemplateCodingKeys and conformance ResolvableCurrentDate.DateFormat.TemplateCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.TemplateCodingKeys and conformance ResolvableCurrentDate.DateFormat.TemplateCodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.TemplateCodingKeys and conformance ResolvableCurrentDate.DateFormat.TemplateCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.TemplateCodingKeys and conformance ResolvableCurrentDate.DateFormat.TemplateCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.TemplateCodingKeys and conformance ResolvableCurrentDate.DateFormat.TemplateCodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.TemplateCodingKeys and conformance ResolvableCurrentDate.DateFormat.TemplateCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.TemplateCodingKeys and conformance ResolvableCurrentDate.DateFormat.TemplateCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.TemplateCodingKeys and conformance ResolvableCurrentDate.DateFormat.TemplateCodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.TemplateCodingKeys and conformance ResolvableCurrentDate.DateFormat.TemplateCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.TemplateCodingKeys and conformance ResolvableCurrentDate.DateFormat.TemplateCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ResolvableCurrentDate.DateFormat.FormatCodingKeys and conformance ResolvableCurrentDate.DateFormat.FormatCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.FormatCodingKeys and conformance ResolvableCurrentDate.DateFormat.FormatCodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.FormatCodingKeys and conformance ResolvableCurrentDate.DateFormat.FormatCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.FormatCodingKeys and conformance ResolvableCurrentDate.DateFormat.FormatCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.FormatCodingKeys and conformance ResolvableCurrentDate.DateFormat.FormatCodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.FormatCodingKeys and conformance ResolvableCurrentDate.DateFormat.FormatCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.FormatCodingKeys and conformance ResolvableCurrentDate.DateFormat.FormatCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.FormatCodingKeys and conformance ResolvableCurrentDate.DateFormat.FormatCodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.FormatCodingKeys and conformance ResolvableCurrentDate.DateFormat.FormatCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.FormatCodingKeys and conformance ResolvableCurrentDate.DateFormat.FormatCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.FormatCodingKeys and conformance ResolvableCurrentDate.DateFormat.FormatCodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.FormatCodingKeys and conformance ResolvableCurrentDate.DateFormat.FormatCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.FormatCodingKeys and conformance ResolvableCurrentDate.DateFormat.FormatCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ResolvableCurrentDate.DateFormat.CodingKeys and conformance ResolvableCurrentDate.DateFormat.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.CodingKeys and conformance ResolvableCurrentDate.DateFormat.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.CodingKeys and conformance ResolvableCurrentDate.DateFormat.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.CodingKeys and conformance ResolvableCurrentDate.DateFormat.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.CodingKeys and conformance ResolvableCurrentDate.DateFormat.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.CodingKeys and conformance ResolvableCurrentDate.DateFormat.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.CodingKeys and conformance ResolvableCurrentDate.DateFormat.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.CodingKeys and conformance ResolvableCurrentDate.DateFormat.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.CodingKeys and conformance ResolvableCurrentDate.DateFormat.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.CodingKeys and conformance ResolvableCurrentDate.DateFormat.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.CodingKeys and conformance ResolvableCurrentDate.DateFormat.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.CodingKeys and conformance ResolvableCurrentDate.DateFormat.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat.CodingKeys and conformance ResolvableCurrentDate.DateFormat.CodingKeys);
  }
  return result;
}

uint64_t outlined init with copy of ResolvableCurrentDate(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t lazy protocol witness table accessor for type ResolvableCurrentDate.CodingKeys and conformance ResolvableCurrentDate.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ResolvableCurrentDate.CodingKeys and conformance ResolvableCurrentDate.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableCurrentDate.CodingKeys and conformance ResolvableCurrentDate.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableCurrentDate.CodingKeys and conformance ResolvableCurrentDate.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvableCurrentDate.CodingKeys and conformance ResolvableCurrentDate.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableCurrentDate.CodingKeys and conformance ResolvableCurrentDate.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableCurrentDate.CodingKeys and conformance ResolvableCurrentDate.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvableCurrentDate.CodingKeys and conformance ResolvableCurrentDate.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableCurrentDate.CodingKeys and conformance ResolvableCurrentDate.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableCurrentDate.CodingKeys and conformance ResolvableCurrentDate.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvableCurrentDate.CodingKeys and conformance ResolvableCurrentDate.CodingKeys;
  if (!lazy protocol witness table cache variable for type ResolvableCurrentDate.CodingKeys and conformance ResolvableCurrentDate.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableCurrentDate.CodingKeys and conformance ResolvableCurrentDate.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ResolvableCurrentDate.DateFormat and conformance ResolvableCurrentDate.DateFormat()
{
  unint64_t result = lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat and conformance ResolvableCurrentDate.DateFormat;
  if (!lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat and conformance ResolvableCurrentDate.DateFormat)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat and conformance ResolvableCurrentDate.DateFormat);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat and conformance ResolvableCurrentDate.DateFormat;
  if (!lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat and conformance ResolvableCurrentDate.DateFormat)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat and conformance ResolvableCurrentDate.DateFormat);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat and conformance ResolvableCurrentDate.DateFormat;
  if (!lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat and conformance ResolvableCurrentDate.DateFormat)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvableCurrentDate.DateFormat and conformance ResolvableCurrentDate.DateFormat);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type Calendar and conformance Calendar(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for KeyedEncodingContainer<ResolvableCurrentDate.DateFormat.TemplateCodingKeys>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t outlined destroy of ResolvableCurrentDate(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ResolvableCurrentDate();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t specialized static ResolvableCurrentDate.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  if (a1[2])
  {
    if (a2[2])
    {
      if (v5 != v7 || v4 != v6) {
        goto LABEL_14;
      }
      goto LABEL_16;
    }
LABEL_9:
    outlined copy of ResolvableCurrentDate.DateFormat();
    outlined copy of ResolvableCurrentDate.DateFormat();
    outlined consume of ResolvableCurrentDate.DateFormat();
    outlined consume of ResolvableCurrentDate.DateFormat();
    return 0;
  }
  if (a2[2]) {
    goto LABEL_9;
  }
  if (v5 != v7 || v4 != v6)
  {
LABEL_14:
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    outlined copy of ResolvableCurrentDate.DateFormat();
    outlined copy of ResolvableCurrentDate.DateFormat();
    outlined consume of ResolvableCurrentDate.DateFormat();
    outlined consume of ResolvableCurrentDate.DateFormat();
    if ((v10 & 1) == 0) {
      return 0;
    }
    goto LABEL_17;
  }
LABEL_16:
  outlined copy of ResolvableCurrentDate.DateFormat();
  outlined copy of ResolvableCurrentDate.DateFormat();
  outlined consume of ResolvableCurrentDate.DateFormat();
  outlined consume of ResolvableCurrentDate.DateFormat();
LABEL_17:
  uint64_t v11 = type metadata accessor for ResolvableCurrentDate();
  if ((MEMORY[0x24C521A00]((char *)a1 + *(int *)(v11 + 20), (char *)a2 + *(int *)(v11 + 20)) & 1) != 0
    && (MEMORY[0x24C5218A0]((char *)a1 + *(int *)(v11 + 24), (char *)a2 + *(int *)(v11 + 24)) & 1) != 0)
  {
    JUMPOUT(0x24C521B70);
  }
  return 0;
}

uint64_t instantiation function for generic protocol witness table for ResolvableCurrentDate(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type Calendar and conformance Calendar(&lazy protocol witness table cache variable for type ResolvableCurrentDate and conformance ResolvableCurrentDate, (void (*)(uint64_t))type metadata accessor for ResolvableCurrentDate);
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = lazy protocol witness table accessor for type Calendar and conformance Calendar(&lazy protocol witness table cache variable for type ResolvableCurrentDate and conformance ResolvableCurrentDate, (void (*)(uint64_t))type metadata accessor for ResolvableCurrentDate);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for ResolvableCurrentDate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for ResolvableCurrentDate(a1, a2, a3, &lazy protocol witness table cache variable for type ResolvableCurrentDate and conformance ResolvableCurrentDate, (uint64_t)&protocol conformance descriptor for ResolvableCurrentDate, &lazy protocol witness table cache variable for type ResolvableCurrentDate and conformance ResolvableCurrentDate);
}

{
  return instantiation function for generic protocol witness table for ResolvableCurrentDate(a1, a2, a3, &lazy protocol witness table cache variable for type ResolvableCurrentDate and conformance ResolvableCurrentDate, (uint64_t)&protocol conformance descriptor for ResolvableCurrentDate, &lazy protocol witness table cache variable for type ResolvableCurrentDate and conformance ResolvableCurrentDate);
}

uint64_t instantiation function for generic protocol witness table for ResolvableCurrentDate(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5, unint64_t *a6)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type Calendar and conformance Calendar(a4, (void (*)(uint64_t))type metadata accessor for ResolvableCurrentDate);
  uint64_t result = lazy protocol witness table accessor for type Calendar and conformance Calendar(a6, (void (*)(uint64_t))type metadata accessor for ResolvableCurrentDate);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t associated type witness table accessor for ResolvableStringAttribute.Schedule : TimelineSchedule in ResolvableCurrentDate()
{
  return lazy protocol witness table accessor for type Calendar and conformance Calendar(&lazy protocol witness table cache variable for type ResolvableAttributeConfiguration.Schedule and conformance ResolvableAttributeConfiguration.Schedule, (void (*)(uint64_t))type metadata accessor for ResolvableAttributeConfiguration.Schedule);
}

_UNKNOWN **associated type witness table accessor for ResolvableStringAttributeRepresentation.Family : ResolvableStringAttributeFamily in ResolvableCurrentDate()
{
  return &protocol witness table for ResolvableCurrentDate;
}

void _s10Foundation8TimeZoneVSgMaTm_1(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t base witness table accessor for Equatable in ResolvableCurrentDate()
{
  return lazy protocol witness table accessor for type Calendar and conformance Calendar(&lazy protocol witness table cache variable for type ResolvableCurrentDate and conformance ResolvableCurrentDate, (void (*)(uint64_t))type metadata accessor for ResolvableCurrentDate);
}

uint64_t initializeBufferWithCopyOfBuffer for ResolvableCurrentDate(uint64_t a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v22 = *a2;
    *(void *)a1 = *a2;
    a1 = v22 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    uint64_t v8 = a2[1];
    char v9 = *((unsigned char *)a2 + 16);
    outlined copy of ResolvableCurrentDate.DateFormat();
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    *(unsigned char *)(a1 + 16) = v9;
    uint64_t v10 = a3[5];
    uint64_t v11 = a1 + v10;
    uint64_t v12 = (uint64_t)a2 + v10;
    uint64_t v13 = type metadata accessor for Calendar();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
    uint64_t v14 = a3[6];
    uint64_t v15 = a1 + v14;
    uint64_t v16 = (uint64_t)a2 + v14;
    uint64_t v17 = type metadata accessor for Locale();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
    uint64_t v18 = a3[7];
    uint64_t v19 = a1 + v18;
    uint64_t v20 = (uint64_t)a2 + v18;
    uint64_t v21 = type metadata accessor for TimeZone();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 16))(v19, v20, v21);
  }
  return a1;
}

uint64_t destroy for ResolvableCurrentDate(uint64_t a1, int *a2)
{
  outlined consume of ResolvableCurrentDate.DateFormat();
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = a1 + a2[6];
  uint64_t v7 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  uint64_t v8 = a1 + a2[7];
  uint64_t v9 = type metadata accessor for TimeZone();
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);

  return v10(v8, v9);
}

uint64_t initializeWithCopy for ResolvableCurrentDate(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  char v8 = *((unsigned char *)a2 + 16);
  outlined copy of ResolvableCurrentDate.DateFormat();
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v8;
  uint64_t v9 = a3[5];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = (uint64_t)a2 + v9;
  uint64_t v12 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  uint64_t v13 = a3[6];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = (uint64_t)a2 + v13;
  uint64_t v16 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
  uint64_t v17 = a3[7];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = (uint64_t)a2 + v17;
  uint64_t v20 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
  return a1;
}

uint64_t assignWithCopy for ResolvableCurrentDate(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  char v8 = *((unsigned char *)a2 + 16);
  outlined copy of ResolvableCurrentDate.DateFormat();
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v8;
  outlined consume of ResolvableCurrentDate.DateFormat();
  uint64_t v9 = a3[5];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = (uint64_t)a2 + v9;
  uint64_t v12 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 24))(v10, v11, v12);
  uint64_t v13 = a3[6];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = (uint64_t)a2 + v13;
  uint64_t v16 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 24))(v14, v15, v16);
  uint64_t v17 = a3[7];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = (uint64_t)a2 + v17;
  uint64_t v20 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 24))(v18, v19, v20);
  return a1;
}

uint64_t initializeWithTake for ResolvableCurrentDate(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = a3[5];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
  uint64_t v14 = a3[7];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  uint64_t v17 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 32))(v15, v16, v17);
  return a1;
}

uint64_t assignWithTake for ResolvableCurrentDate(uint64_t a1, uint64_t a2, int *a3)
{
  char v6 = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v6;
  outlined consume of ResolvableCurrentDate.DateFormat();
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 40))(v16, v17, v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvableCurrentDate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_246007EB0);
}

uint64_t sub_246007EB0(uint64_t a1, uint64_t a2, int *a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 16);
    if (v4 > 1) {
      return (v4 ^ 0xFF) + 1;
    }
    else {
      return 0;
    }
  }
  uint64_t v8 = type metadata accessor for Calendar();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a2)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a3[5];
LABEL_9:
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    return v13(a1 + v11, a2, v9);
  }
  uint64_t v12 = type metadata accessor for Locale();
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a3[6];
    goto LABEL_9;
  }
  uint64_t v14 = type metadata accessor for TimeZone();
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + a3[7];

  return v15(v17, a2, v16);
}

uint64_t storeEnumTagSinglePayload for ResolvableCurrentDate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_246008034);
}

uint64_t sub_246008034(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 254)
  {
    *(unsigned char *)(result + 16) = -(char)a2;
    return result;
  }
  uint64_t v8 = type metadata accessor for Calendar();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[5];
LABEL_7:
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v13(v5 + v11, a2, a2, v9);
  }
  uint64_t v12 = type metadata accessor for Locale();
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[6];
    goto LABEL_7;
  }
  uint64_t v14 = type metadata accessor for TimeZone();
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  uint64_t v16 = v14;
  uint64_t v17 = v5 + a4[7];

  return v15(v17, a2, a2, v16);
}

uint64_t type metadata completion function for ResolvableCurrentDate()
{
  uint64_t result = type metadata accessor for Calendar();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Locale();
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for TimeZone();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t destroy for ResolvableCurrentDate.DateFormat()
{
  return outlined consume of ResolvableCurrentDate.DateFormat();
}

uint64_t initializeBufferWithCopyOfBuffer for ResolvableCurrentDate.DateFormat(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  outlined copy of ResolvableCurrentDate.DateFormat();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for ResolvableCurrentDate.DateFormat(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  outlined copy of ResolvableCurrentDate.DateFormat();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of ResolvableCurrentDate.DateFormat();
  return a1;
}

uint64_t assignWithTake for ResolvableCurrentDate.DateFormat(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of ResolvableCurrentDate.DateFormat();
  return a1;
}

ValueMetadata *type metadata accessor for ResolvableCurrentDate.DateFormat()
{
  return &type metadata for ResolvableCurrentDate.DateFormat;
}

unsigned char *storeEnumTagSinglePayload for ResolvableCurrentDate.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x246008494);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

void *type metadata accessor for ResolvableCurrentDate.CodingKeys()
{
  return &unk_26FA649F0;
}

unsigned char *storeEnumTagSinglePayload for ResolvableCurrentDate.DateFormat.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x246008598);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for ResolvableCurrentDate.DateFormat.CodingKeys()
{
  return &unk_26FA64840;
}

void *type metadata accessor for ResolvableCurrentDate.DateFormat.FormatCodingKeys()
{
  return &unk_26FA647B0;
}

unsigned char *storeEnumTagSinglePayload for ResolvableCurrentDate.DateFormat.FormatCodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x246008680);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for ResolvableCurrentDate.DateFormat.TemplateCodingKeys()
{
  return &unk_26FA648D0;
}

uint64_t specialized ResolvableCurrentDate.DateFormat.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x74616D726F66 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6574616C706D6574 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized ResolvableCurrentDate.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6D726F4665746164 && a2 == 0xEA00000000007461;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7261646E656C6163 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x656E6F5A656D6974 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t specialized static MainActor.assumeIsolated<A>(_:file:line:)(uint64_t a1, uint64_t a2)
{
  static MainActor.shared.getter();
  swift_release();
  swift_task_getMainExecutor();
  if ((swift_task_isCurrentExecutor() & 1) == 0) {
    goto LABEL_6;
  }
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  thunk for @callee_guaranteed () -> (@out A, @error @owned Error)specialized partial apply();
  if (v2) {
    return swift_release();
  }
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
LABEL_6:
    _StringGuts.grow(_:)(66);
    v8._object = (void *)0x80000002462239F0;
    v8._countAndFlagsBits = 0xD00000000000003FLL;
    String.append(_:)(v8);
    v9._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 46;
    v10._object = (void *)0xE100000000000000;
    String.append(_:)(v10);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t StateObject.storage.getter(uint64_t a1, uint64_t a2, char a3)
{
  return a1;
}

uint64_t StateObject.storage.setter(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = outlined consume of StateObject<A>.Storage<A>(*(void *)v3, *(void *)(v3 + 8), *(unsigned char *)(v3 + 16));
  *(void *)uint64_t v3 = a1;
  *(void *)(v3 + 8) = a2;
  *(unsigned char *)(v3 + 16) = a3 & 1;
  return result;
}

uint64_t (*StateObject.storage.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t StateObject.projectedValue.getter(void (*a1)(uint64_t), uint64_t a2, char a3)
{
  StateObject.objectValue.getter(a1, a2, a3 & 1);
  uint64_t v3 = ObservedObject.projectedValue.getter();
  swift_unknownObjectRelease();
  return v3;
}

void static StateObject._makeProperty<A>(in:container:fieldOffset:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
}

void StateObject.Box.destroy()()
{
}

uint64_t StateObject.Box.reset()()
{
  unint64_t v1 = v0;
  int v2 = *((_DWORD *)v0 + 3);
  if (!v2)
  {
LABEL_8:
    uint64_t result = swift_unknownObjectRelease();
    v1[2] = 0;
    v1[3] = 0;
    return result;
  }
  uint64_t v3 = *v0;
  if (*v0)
  {
    int v4 = 0;
    int v5 = v2 - 1;
    do
    {
      Swift::String v8 = (uint64_t *)(v3 + v4);
      if (v5) {
        v4 += *((_DWORD *)v8 + 2);
      }
      else {
        int v4 = 0;
      }
      int v6 = v5 | v4;
      uint64_t v7 = *v8;
      Swift::String v10 = v8;
      (*(void (**)(uint64_t **))(v7 + 112))(&v10);
      --v5;
    }
    while (v6);
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

uint64_t static StateObject._propertyBehaviors.getter()
{
  return 2;
}

uint64_t assignWithCopy for StateObject(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of StateObject<A>.Storage<A>(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  char v8 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of StateObject<A>.Storage<A>(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for StateObject(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  char v6 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of StateObject<A>.Storage<A>(v4, v5, v6);
  return a1;
}

uint64_t destroy for StateObject.Box()
{
  return swift_unknownObjectRelease();
}

uint64_t assignWithCopy for StateObject.Box(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return a1;
}

void *assignWithTake for StateObject.Box(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v3 = a2[3];
  a1[2] = a2[2];
  a1[3] = v3;
  swift_unknownObjectRelease();
  return a1;
}

_UNKNOWN **associated type witness table accessor for DynamicPropertyBox.Property : DynamicProperty in StateObject<A>.Box()
{
  return &protocol witness table for StateObject<A>;
}

uint64_t sub_246009278()
{
  return swift_deallocObject();
}

uint64_t sub_246009288()
{
  return swift_deallocObject();
}

uint64_t thunk for @callee_guaranteed () -> (@out A, @error @owned Error)specialized partial apply()
{
  return partial apply for specialized thunk for @callee_guaranteed () -> (@out A, @error @owned Error)();
}

double static LayoutPriorityTraitKey.defaultValue.getter()
{
  return 0.0;
}

SwiftUI::LayoutPriorityLayout __swiftcall LayoutPriorityLayout.init(priority:)(SwiftUI::LayoutPriorityLayout priority)
{
  v1->prioritCGFloat y = priority.priority;
  return priority;
}

uint64_t LayoutPriorityLayout.sizeThatFits(in:context:child:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *(void *)a1;
  char v4 = *(unsigned char *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  char v6 = *(unsigned char *)(a1 + 24);
  int v7 = *((_DWORD *)a3 + 2);
  uint64_t v13 = *a3;
  int v14 = v7;
  uint64_t v9 = v3;
  char v10 = v4;
  uint64_t v11 = v5;
  char v12 = v6;
  return LayoutProxy.size(in:)(&v9);
}

double LayoutPriorityLayout.layoutPriority(child:)()
{
  return *(double *)v0;
}

uint64_t LayoutPriorityLayout.ignoresAutomaticPadding(child:)(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 4) == *MEMORY[0x263F288F8])
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    Inputuint64_t Value = &static LayoutComputer.defaultValue;
  }
  else
  {
    Inputuint64_t Value = (long long *)AGGraphGetInputValue();
  }
  uint64_t v2 = *(void *)InputValue;
  uint64_t v3 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v3 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_12;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (!_MovableLockIsOwner(static Update._lock))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_12:
    char v4 = (*(uint64_t (**)(void))(*(void *)v2 + 96))();
    swift_release();
    return v4 & 1;
  }
  return result;
}

double LayoutPriorityLayout.priority.getter()
{
  return *(double *)v0;
}

void LayoutPriorityLayout.priority.setter(double a1)
{
  *unint64_t v1 = a1;
}

uint64_t (*LayoutPriorityLayout.priority.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t protocol witness for UnaryLayout.ignoresAutomaticPadding(child:) in conformance LayoutPriorityLayout(uint64_t a1)
{
  return LayoutPriorityLayout.ignoresAutomaticPadding(child:)(a1) & 1;
}

ValueMetadata *type metadata accessor for LayoutPriorityLayout()
{
  return &type metadata for LayoutPriorityLayout;
}

uint64_t sub_24600951C()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _TraitWritingModifier<LayoutPriorityTraitKey>()
{
  if (!lazy cache variable for type metadata for _TraitWritingModifier<LayoutPriorityTraitKey>)
  {
    unint64_t v0 = type metadata accessor for _TraitWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<LayoutPriorityTraitKey>);
    }
  }
}

uint64_t _GraphInputs.imageAccessibilityProvider.getter()
{
  uint64_t v1 = *v0;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v2 = specialized find<A>(_:key:)(v1);
  if (v2)
  {
    uint64_t v3 = (long long *)(v2 + 72);
  }
  else
  {
    uint64_t v3 = &static _GraphInputs.ImageAccessibilityProviderKey.defaultValue;
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
  }
  uint64_t v4 = *(void *)v3;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  return v4;
}

uint64_t key path getter for _GraphInputs.imageAccessibilityProvider : _GraphInputs@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = _GraphInputs.imageAccessibilityProvider.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t key path setter for _GraphInputs.imageAccessibilityProvider : _GraphInputs(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a2, v3, v4);
  return swift_release();
}

uint64_t _GraphInputs.imageAccessibilityProvider.setter(uint64_t a1, uint64_t a2)
{
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, a1, a2);
  return swift_release();
}

void (*_GraphInputs.imageAccessibilityProvider.modify(void *a1))(uint64_t **a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  uint64_t v4 = *v1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v5 = specialized find<A>(_:key:)(v4);
  if (v5)
  {
    char v6 = (long long *)(v5 + 72);
    int v7 = (uint64_t *)(v5 + 80);
  }
  else
  {
    char v6 = &static _GraphInputs.ImageAccessibilityProviderKey.defaultValue;
    int v7 = (uint64_t *)&static _GraphInputs.ImageAccessibilityProviderKey.defaultValue + 1;
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
  }
  uint64_t v8 = *v7;
  uint64_t v9 = *(void *)v6;
  swift_release_n();
  swift_release();
  swift_bridgeObjectRelease();
  *uint64_t v3 = v9;
  v3[1] = v8;
  return _GraphInputs.imageAccessibilityProvider.modify;
}

void _GraphInputs.imageAccessibilityProvider.modify(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (uint64_t *)(*a1)[4];
  uint64_t v3 = **a1;
  uint64_t v4 = (*a1)[1];
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3, v4);
  swift_release();

  free(v1);
}

double protocol witness for static PropertyKey.defaultValue.getter in conformance _GraphInputs.ImageAccessibilityProviderKey@<D0>(_OWORD *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  double result = *(double *)&static _GraphInputs.ImageAccessibilityProviderKey.defaultValue;
  *a1 = static _GraphInputs.ImageAccessibilityProviderKey.defaultValue;
  return result;
}

uint64_t _ViewInputs.imageAccessibilityProvider.getter()
{
  uint64_t v1 = *v0;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v2 = specialized find<A>(_:key:)(v1);
  if (v2)
  {
    uint64_t v3 = (long long *)(v2 + 72);
  }
  else
  {
    uint64_t v3 = &static _GraphInputs.ImageAccessibilityProviderKey.defaultValue;
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
  }
  uint64_t v4 = *(void *)v3;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  return v4;
}

uint64_t key path getter for _ViewInputs.imageAccessibilityProvider : _ViewInputs@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = _ViewInputs.imageAccessibilityProvider.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void (*_ViewInputs.imageAccessibilityProvider.modify(void *a1))(uint64_t **a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  uint64_t v4 = *v1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v5 = specialized find<A>(_:key:)(v4);
  if (v5)
  {
    char v6 = (long long *)(v5 + 72);
    int v7 = (uint64_t *)(v5 + 80);
  }
  else
  {
    char v6 = &static _GraphInputs.ImageAccessibilityProviderKey.defaultValue;
    int v7 = (uint64_t *)&static _GraphInputs.ImageAccessibilityProviderKey.defaultValue + 1;
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
  }
  uint64_t v8 = *v7;
  uint64_t v9 = *(void *)v6;
  swift_release_n();
  swift_release();
  swift_bridgeObjectRelease();
  *uint64_t v3 = v9;
  v3[1] = v8;
  return _GraphInputs.imageAccessibilityProvider.modify;
}

uint64_t protocol witness for static ImageAccessibilityProvider.makeView(image:resolved:) in conformance EmptyImageAccessibilityProvider@<X0>(long long *a1@<X1>, uint64_t a2@<X8>)
{
  long long v2 = a1[9];
  long long v3 = a1[7];
  long long v24 = a1[8];
  long long v25 = v2;
  long long v4 = a1[9];
  v26[0] = a1[10];
  long long v5 = a1[5];
  long long v7 = a1[3];
  long long v20 = a1[4];
  long long v6 = v20;
  long long v21 = v5;
  long long v8 = a1[5];
  long long v9 = a1[7];
  long long v22 = a1[6];
  long long v10 = v22;
  long long v23 = v9;
  long long v11 = a1[1];
  v17[0] = *a1;
  v17[1] = v11;
  long long v12 = a1[3];
  long long v14 = *a1;
  long long v13 = a1[1];
  long long v18 = a1[2];
  long long v15 = v18;
  long long v19 = v12;
  *(_OWORD *)(a2 + 128) = v24;
  *(_OWORD *)(a2 + 144) = v4;
  *(_OWORD *)(a2 + 160) = a1[10];
  *(_OWORD *)(a2 + 64) = v6;
  *(_OWORD *)(a2 + 80) = v8;
  *(_OWORD *)(a2 + 96) = v10;
  *(_OWORD *)(a2 + 112) = v3;
  *(_OWORD *)a2 = v14;
  *(_OWORD *)(a2 + 16) = v13;
  *(_DWORD *)((char *)v26 + 15) = *(_DWORD *)((char *)a1 + 175);
  *(_DWORD *)(a2 + 175) = *(_DWORD *)((char *)a1 + 175);
  *(_OWORD *)(a2 + 32) = v15;
  *(_OWORD *)(a2 + 48) = v7;
  return outlined retain of Image.Resolved((uint64_t)v17);
}

uint64_t dispatch thunk of static ImageAccessibilityProvider.makeView(image:resolved:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

unint64_t lazy protocol witness table accessor for type EmptyImageAccessibilityProvider and conformance EmptyImageAccessibilityProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type EmptyImageAccessibilityProvider and conformance EmptyImageAccessibilityProvider;
  if (!lazy protocol witness table cache variable for type EmptyImageAccessibilityProvider and conformance EmptyImageAccessibilityProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmptyImageAccessibilityProvider and conformance EmptyImageAccessibilityProvider);
  }
  return result;
}

ValueMetadata *type metadata accessor for EmptyImageAccessibilityProvider()
{
  return &type metadata for EmptyImageAccessibilityProvider;
}

ValueMetadata *type metadata accessor for _GraphInputs.ImageAccessibilityProviderKey()
{
  return &type metadata for _GraphInputs.ImageAccessibilityProviderKey;
}

uint64_t associated type witness table accessor for ImageAccessibilityProvider.Body : View in EmptyImageAccessibilityProvider()
{
  return swift_getOpaqueTypeConformance2();
}

_UNKNOWN **sub_246009D98()
{
  return &protocol witness table for Image.Resolved;
}

uint64_t sub_246009DA4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = specialized EnvironmentValues.subscript.getter();
  *a1 = result;
  return result;
}

uint64_t sub_246009DF0()
{
  return 16;
}

uint64_t sub_246009DFC()
{
  return 1;
}

Swift::Int sub_246009E04(uint64_t a1, uint64_t a2)
{
  return specialized EnvironmentObjectKey.hashValue.getter(*(void *)(a2 + a1 - 16));
}

__n128 sub_246009E10(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_246009E1C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = specialized EnvironmentValues.subscript.getter();
  *a1 = result;
  return result;
}

uint64_t sub_246009E68()
{
  return 16;
}

uint64_t sub_246009E74()
{
  return 1;
}

__n128 sub_246009E7C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_246009F5C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = specialized EnvironmentValues.subscript.getter();
  *a1 = result;
  return result;
}

uint64_t sub_246009FA8()
{
  return 32;
}

uint64_t sub_246009FB4()
{
  return 1;
}

Swift::Int sub_246009FBC(uint64_t a1, uint64_t a2)
{
  return specialized EnvironmentObjectKey.hashValue.getter(*(void *)(a2 + a1 - 24));
}

__n128 sub_246009FC8(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_246009FD4()
{
  return swift_getWitnessTable();
}

uint64_t _PreferenceActionModifier.action.getter(uint64_t a1)
{
  return a1;
}

uint64_t _PreferenceActionModifier.action.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_release();
  *long long v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*_PreferenceActionModifier.action.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t key path getter for _PreferenceActionModifier.action : <A>_PreferenceActionModifier<A>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, void *a5@<X8>)
{
  uint64_t v7 = a3 + a2;
  uint64_t v8 = *(void *)(a3 + a2 - 8);
  uint64_t v10 = *a1;
  uint64_t v9 = a1[1];
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = *(_OWORD *)(v7 - 24);
  *(void *)(v11 + 32) = v8;
  *(void *)(v11 + 40) = v10;
  *(void *)(v11 + 48) = v9;
  *a5 = a4;
  a5[1] = v11;

  return swift_retain();
}

uint64_t key path setter for _PreferenceActionModifier.action : <A>_PreferenceActionModifier<A>(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = a4 + a3;
  uint64_t v9 = *(void *)(a4 + a3 - 8);
  uint64_t v11 = *a1;
  uint64_t v10 = a1[1];
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = *(_OWORD *)(v8 - 24);
  *(void *)(v12 + 32) = v9;
  *(void *)(v12 + 40) = v11;
  *(void *)(v12 + 48) = v10;
  swift_retain();
  uint64_t result = swift_release();
  *a2 = a6;
  a2[1] = v12;
  return result;
}

uint64_t (*TransactionalPreferenceActionModifier.action.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t static TransactionalPreferenceActionModifier._makeView(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  uint64_t v43 = a4;
  uint64_t v44 = a8;
  uint64_t v67 = *MEMORY[0x263EF8340];
  swift_getAssociatedTypeWitness();
  uint64_t v14 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v39 = (char *)&v37 - v15;
  uint64_t v41 = a7;
  uint64_t v16 = type metadata accessor for TransactionalPreferenceBinder();
  uint64_t v42 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v40 = (uint64_t)&v37 - v17;
  int v38 = *a1;
  LODWORD(v17) = *((_DWORD *)a2 + 2);
  uint64_t v18 = a2[2];
  uint64_t v19 = a2[5];
  uint64_t v20 = a2[6];
  int v21 = *((_DWORD *)a2 + 20);
  uint64_t v58 = *a2;
  int v59 = v17;
  long long v37 = *(_OWORD *)(a2 + 3);
  long long v61 = v37;
  uint64_t v60 = v18;
  uint64_t v62 = v19;
  uint64_t v63 = v20;
  long long v64 = *(_OWORD *)(a2 + 7);
  uint64_t v65 = a2[9];
  int v66 = v21;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PreferencesInputs.add<A>(_:)(a5, a5, a6);
  uint64_t v48 = v58;
  int v49 = v59;
  uint64_t v51 = v60;
  long long v52 = v61;
  uint64_t v53 = v62;
  uint64_t v54 = v63;
  long long v55 = v64;
  uint64_t v56 = v65;
  int v57 = v66;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v22 = swift_bridgeObjectRetain();
  a3(&v45, v22, &v48);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  int v23 = v46;
  int v24 = v47;
  uint64_t v43 = v45;
  uint64_t v48 = v45;
  int v49 = v46;
  int v50 = v47;
  uint64_t v25 = _ViewOutputs.subscript.getter(a5, a5, a6);
  if ((v25 & 0x100000000) == 0)
  {
    int v26 = v25;
    default argument 2 of BindingActionDispatcher.init(modifier:phase:cycleDetector:lastValue:lastAction:lastResetSeed:)((uint64_t)&v48);
    uint64_t v45 = v48;
    int v46 = v49;
    LOBYTE(v47) = v50;
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v28 = (uint64_t)v39;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v39, 1, 1, AssociatedTypeWitness);
    uint64_t v29 = v40;
    uint64_t v30 = TransactionalPreferenceBinder.init(modifier:keyValue:phase:transaction:cycleDetector:lastResetSeed:lastValue:)(v38, v26, v37, SDWORD1(v37), (uint64_t)&v45, 0, v28, v40);
    MEMORY[0x270FA5388](v30);
    uint64_t v35 = v16;
    uint64_t WitnessTable = swift_getWitnessTable();
    type metadata accessor for Attribute<()>();
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v29, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)(&v37 - 2), v16, MEMORY[0x263F8E628], v31, MEMORY[0x263F8E658], v32);
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v29, v16);
    AGGraphGetFlags();
    AGGraphSetFlags();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = swift_release();
  uint64_t v34 = v44;
  *uint64_t v44 = v43;
  *((_DWORD *)v34 + 2) = v23;
  *((_DWORD *)v34 + 3) = v24;
  return result;
}

uint64_t TransactionalPreferenceBinder.init(modifier:keyValue:phase:transaction:cycleDetector:lastResetSeed:lastValue:)@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  int v9 = *(_DWORD *)(a5 + 8);
  char v10 = *(unsigned char *)(a5 + 12);
  *(_DWORD *)a8 = a1;
  *(_DWORD *)(a8 + 4) = a2;
  *(_DWORD *)(a8 + 8) = a3;
  *(_DWORD *)(a8 + 12) = a4;
  *(void *)(a8 + 16) = *(void *)a5;
  *(_DWORD *)(a8 + 24) = v9;
  *(unsigned char *)(a8 + 28) = v10;
  *(_DWORD *)(a8 + 32) = a6;
  uint64_t v11 = a8 + *(int *)(type metadata accessor for TransactionalPreferenceBinder() + 64);
  swift_getAssociatedTypeWitness();
  uint64_t v12 = type metadata accessor for Optional();
  long long v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32);

  return v13(v11, a7, v12);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance TransactionalPreferenceActionModifier<A>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, void *a6@<X8>)
{
  return static TransactionalPreferenceActionModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5[2], a5[3], a5[4], a6);
}

uint64_t TransactionalPreferenceBinder.updateValue()(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v110 = *(void *)(a1 + 24);
  uint64_t v113 = v3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v100 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  long long v104 = (char *)v97 - v6;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v99 = (char *)v97 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  long long v105 = (char *)v97 - v11;
  MEMORY[0x270FA5388](v12);
  long long v106 = (char *)v97 - v13;
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)v97 - v15;
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v18);
  long long v109 = (char *)v97 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v98 = (char *)v97 - v21;
  MEMORY[0x270FA5388](v22);
  long long v114 = (char *)v97 - v23;
  MEMORY[0x270FA5388](v24);
  __int8 v119 = (char *)v97 - v25;
  uint64_t v108 = v26;
  MEMORY[0x270FA5388](v27);
  uint64_t v29 = (char *)v97 - v28;
  int v30 = *(_DWORD *)AGGraphGetValue() >> 1;
  if (v30 != *(_DWORD *)(v1 + 32))
  {
    *(_DWORD *)(v1 + 32) = v30;
    *(void *)(v1 + 20) = 0xFFFFFFFFLL;
    *(unsigned char *)(v1 + 28) = 0;
    uint64_t v31 = v1 + *(int *)(a1 + 64);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v31, v5);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(v31, 1, 1, AssociatedTypeWitness);
  }
  uint64_t Value = AGGraphGetValue();
  long long v111 = v33;
  uint64_t v34 = v17 + 16;
  uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v35(v29, Value, AssociatedTypeWitness);
  uint64_t v112 = a1;
  uint64_t v36 = *(int *)(a1 + 64);
  uint64_t v115 = v1;
  long long v37 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  char v117 = (char *)(v1 + v36);
  long long v101 = v37;
  ((void (*)(char *))v37)(v16);
  uint64_t v38 = v17;
  uint64_t v39 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48);
  uint64_t v103 = v17 + 48;
  long long v102 = v39;
  unsigned int v40 = v39(v16, 1, AssociatedTypeWitness);
  uint64_t v41 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  uint64_t v118 = v7 + 8;
  char v116 = v41;
  v41((uint64_t)v16, v5);
  uint64_t v42 = (void (*)(char *, char *, uint64_t))v35;
  uint64_t v43 = v119;
  uint64_t v120 = v29;
  v42(v119, v29, AssociatedTypeWitness);
  uint64_t v121 = v38;
  uint64_t v44 = v5;
  if (v40 == 1)
  {
    uint64_t v45 = *(void (**)(char *, uint64_t))(v38 + 8);
    v45(v43, AssociatedTypeWitness);
    uint64_t v46 = v38;
    int v47 = v120;
    uint64_t v48 = v115;
LABEL_5:
    int v49 = v116;
    goto LABEL_6;
  }
  uint64_t v58 = v114;
  v42(v114, v43, AssociatedTypeWitness);
  if ((v111 & 1) == 0)
  {
    uint64_t v45 = *(void (**)(char *, uint64_t))(v121 + 8);
    v45(v58, AssociatedTypeWitness);
    v45(v43, AssociatedTypeWitness);
    int v47 = v120;
    return ((uint64_t (*)(char *, uint64_t))v45)(v47, AssociatedTypeWitness);
  }
  double v78 = v106;
  double v79 = v101;
  v101(v106, v117, v44);
  uint64_t v80 = v44;
  uint64_t v81 = v105;
  v97[1] = v34;
  v97[0] = v42;
  v42(v105, v58, AssociatedTypeWitness);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v121 + 56))(v81, 0, 1, AssociatedTypeWitness);
  uint64_t v82 = v104;
  uint64_t v83 = &v104[*(int *)(TupleTypeMetadata2 + 48)];
  v79(v104, v78, v80);
  long long v111 = v83;
  uint64_t v84 = v80;
  v79(v83, v81, v80);
  long long v85 = v102;
  if (v102(v82, 1, AssociatedTypeWitness) == 1)
  {
    long long v86 = v81;
    uint64_t v44 = v80;
    long long v87 = (void (*)(char *, uint64_t))v116;
    v116((uint64_t)v86, v80);
    v87(v78, v80);
    uint64_t v45 = *(void (**)(char *, uint64_t))(v121 + 8);
    v45(v58, AssociatedTypeWitness);
    v45(v119, AssociatedTypeWitness);
    int v88 = v85(v111, 1, AssociatedTypeWitness);
    int v47 = v120;
    uint64_t v48 = v115;
    if (v88 == 1)
    {
      v87(v82, v84);
      return ((uint64_t (*)(char *, uint64_t))v45)(v47, AssociatedTypeWitness);
    }
    uint64_t v92 = v121;
LABEL_29:
    (*(void (**)(char *, uint64_t))(v100 + 8))(v82, TupleTypeMetadata2);
    uint64_t v42 = (void (*)(char *, char *, uint64_t))v97[0];
    uint64_t v46 = v92;
    goto LABEL_5;
  }
  long long v89 = v99;
  v79(v99, v82, v80);
  uint64_t v90 = v111;
  uint64_t v44 = v80;
  if (v85(v111, 1, AssociatedTypeWitness) == 1)
  {
    uint64_t v91 = (void (*)(char *, uint64_t))v116;
    v116((uint64_t)v105, v80);
    v91(v106, v80);
    uint64_t v92 = v121;
    uint64_t v45 = *(void (**)(char *, uint64_t))(v121 + 8);
    v45(v114, AssociatedTypeWitness);
    v45(v119, AssociatedTypeWitness);
    v45(v89, AssociatedTypeWitness);
    int v47 = v120;
    uint64_t v48 = v115;
    goto LABEL_29;
  }
  uint64_t v93 = v121;
  int v94 = v98;
  (*(void (**)(char *, char *, uint64_t))(v121 + 32))(v98, v90, AssociatedTypeWitness);
  char v95 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v45 = *(void (**)(char *, uint64_t))(v93 + 8);
  v45(v94, AssociatedTypeWitness);
  uint64_t v96 = (void (*)(char *, uint64_t))v116;
  v116((uint64_t)v105, v44);
  v96(v106, v44);
  v45(v114, AssociatedTypeWitness);
  v45(v119, AssociatedTypeWitness);
  v45(v89, AssociatedTypeWitness);
  int v49 = (void (*)(uint64_t, uint64_t))v96;
  v96(v82, v44);
  int v47 = v120;
  uint64_t v48 = v115;
  if (v95) {
    return ((uint64_t (*)(void, void))v45)(v47, AssociatedTypeWitness);
  }
  uint64_t v42 = (void (*)(char *, char *, uint64_t))v97[0];
  uint64_t v46 = v121;
LABEL_6:
  int v50 = v117;
  v49((uint64_t)v117, v44);
  uint64_t v51 = v42;
  v42(v50, v47, AssociatedTypeWitness);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v46 + 56))(v50, 0, 1, AssociatedTypeWitness);
  AGGraphClearUpdate();
  int v52 = *(_DWORD *)AGGraphGetValue();
  AGGraphSetUpdate();
  if (*(_DWORD *)(v48 + 20) == v52)
  {
    int v53 = *(_DWORD *)(v48 + 24);
    if (!v53 || (int v54 = v53 - 1, (*(_DWORD *)(v48 + 24) = v54) == 0))
    {
      if ((*(unsigned char *)(v48 + 28) & 1) == 0)
      {
        v122[0] = 0;
        v122[1] = 0xE000000000000000;
        _StringGuts.grow(_:)(44);
        v122[0] = 0;
        v122[1] = 0xE000000000000000;
        _StringGuts.grow(_:)(19);
        swift_bridgeObjectRelease();
        v122[0] = 0xD000000000000011;
        v122[1] = 0x80000002462241A0;
        v55._countAndFlagsBits = _typeName(_:qualified:)();
        String.append(_:)(v55);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v56._countAndFlagsBits = 0xD00000000000002ALL;
        v56._object = (void *)0x800000024621E040;
        String.append(_:)(v56);
        specialized static Log.externalWarning(_:)(v122[0], v122[1]);
        swift_bridgeObjectRelease();
        *(unsigned char *)(v48 + 28) = 1;
      }
      return ((uint64_t (*)(void, void))v45)(v47, AssociatedTypeWitness);
    }
  }
  else
  {
    *(_DWORD *)(v48 + 20) = v52;
    *(_DWORD *)(v48 + 24) = 2;
  }
  __int8 v119 = (char *)v45;
  AGGraphClearUpdate();
  uint64_t v59 = v113;
  uint64_t v60 = *(void *)(v112 + 32);
  uint64_t v61 = v110;
  closure #1 in PreferenceBinder.updateValue()(v113, v110, v60, (uint64_t (*)(void))type metadata accessor for TransactionalPreferenceBinder, (void (*)(void, void, void, void))type metadata accessor for TransactionalPreferenceActionModifier, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.PreferenceKey.Value, @guaranteed Transaction) -> (), v122);
  AGGraphSetUpdate();
  uint64_t v62 = swift_allocObject();
  *(void *)(v62 + 16) = v59;
  *(void *)(v62 + 24) = v61;
  *(void *)(v62 + 32) = v60;
  *(_OWORD *)(v62 + 40) = *(_OWORD *)v122;
  AGGraphClearUpdate();
  closure #2 in TransactionalPreferenceBinder.updateValue()(v122);
  AGGraphSetUpdate();
  uint64_t v118 = v122[0];
  uint64_t v63 = AssociatedTypeWitness;
  long long v64 = v109;
  v51(v109, v47, v63);
  uint64_t v65 = v121;
  unint64_t v66 = (*(unsigned __int8 *)(v121 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v121 + 80);
  unint64_t v67 = (v108 + v66 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v68 = (char *)swift_allocObject();
  *((void *)v68 + 2) = v59;
  *((void *)v68 + 3) = v61;
  *((void *)v68 + 4) = v60;
  *((void *)v68 + 5) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.PreferenceKey.Value, @in_guaranteed Transaction) -> (@out ());
  *((void *)v68 + 6) = v62;
  uint64_t v69 = v64;
  uint64_t v70 = v63;
  uint64_t v71 = v118;
  (*(void (**)(char *, char *, uint64_t))(v65 + 32))(&v68[v66], v69, v70);
  *(void *)&v68[v67] = v71;
  swift_retain();
  swift_retain();
  specialized static Update.begin()();
  uint64_t v72 = swift_allocObject();
  *(void *)(v72 + 16) = partial apply for closure #3 in TransactionalPreferenceBinder.updateValue();
  *(void *)(v72 + 24) = v68;
  uint64_t v73 = one-time initialization token for actions;
  swift_retain();
  if (v73 != -1) {
    swift_once();
  }
  double v74 = static Update.actions;
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    double v74 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v74[2] + 1, 1, v74);
  }
  unint64_t v76 = v74[2];
  unint64_t v75 = v74[3];
  if (v76 >= v75 >> 1) {
    double v74 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v75 > 1), v76 + 1, 1, v74);
  }
  void v74[2] = v76 + 1;
  double v77 = &v74[2 * v76];
  v77[4] = thunk for @escaping @callee_guaranteed () -> ()partial apply;
  v77[5] = v72;
  static Update.actions = v74;
  swift_bridgeObjectRelease();
  static Update.end()();
  swift_release();
  swift_release();
  swift_release();
  return ((uint64_t (*)(char *, uint64_t))v119)(v120, v70);
}

uint64_t closure #1 in PreferenceBinder.updateValue()@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t (*a4)(void)@<X4>, void (*a5)(void, void, void, void)@<X5>, uint64_t a6@<X7>, void *a7@<X8>)
{
  uint64_t v13 = (void *)a4(0);
  uint64_t v14 = specialized PreferenceBinder.modifier.getter(v13, a5);
  uint64_t v16 = v15;
  uint64_t v17 = (void *)swift_allocObject();
  _OWORD v17[2] = a1;
  v17[3] = a2;
  v17[4] = a3;
  void v17[5] = v14;
  v17[6] = v16;
  *a7 = a6;
  a7[1] = v17;

  return swift_retain();
}

uint64_t closure #2 in TransactionalPreferenceBinder.updateValue()@<X0>(void *a1@<X8>)
{
  type metadata accessor for TransactionalPreferenceBinder();
  *a1 = *(void *)AGGraphGetValue();

  return swift_retain();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance TransactionalPreferenceBinder<A>()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

uint64_t type metadata accessor for TransactionalPreferenceBinder()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_24600B678@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  return key path getter for _PreferenceActionModifier.action : <A>_PreferenceActionModifier<A>(a1, a2, a3, (uint64_t)thunk for @escaping @callee_guaranteed (@in_guaranteed A.PreferenceKey.Value) -> ()partial apply, a4);
}

uint64_t sub_24600B6AC(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for _PreferenceActionModifier.action : <A>_PreferenceActionModifier<A>(a1, a2, a3, a4, (uint64_t)&unk_26FA92C30, (uint64_t)thunk for @escaping @callee_guaranteed (@in_guaranteed A.PreferenceKey.Value) -> (@out ())partial apply);
}

uint64_t sub_24600B6E0()
{
  return 24;
}

__n128 sub_24600B6EC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_24600B700@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  return key path getter for _PreferenceActionModifier.action : <A>_PreferenceActionModifier<A>(a1, a2, a3, (uint64_t)thunk for @escaping @callee_guaranteed (@in_guaranteed A.PreferenceKey.Value, @guaranteed Transaction) -> ()partial apply, a4);
}

uint64_t sub_24600B734(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for _PreferenceActionModifier.action : <A>_PreferenceActionModifier<A>(a1, a2, a3, a4, (uint64_t)&unk_26FA92BE0, (uint64_t)thunk for @escaping @callee_guaranteed (@in_guaranteed A.PreferenceKey.Value, @in_guaranteed Transaction) -> (@out ())partial apply);
}

uint64_t sub_24600B768()
{
  return 24;
}

__n128 sub_24600B774(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t type metadata accessor for TransactionalPreferenceActionModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_24600B7A0()
{
  return swift_getWitnessTable();
}

uint64_t type metadata completion function for TransactionalPreferenceBinder()
{
  swift_getAssociatedTypeWitness();
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TransactionalPreferenceBinder(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = v6;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v8 = *(void *)(v5 + 64);
  }
  else {
    size_t v8 = *(void *)(v5 + 64) + 1;
  }
  int v9 = v6 & 0x100000;
  if ((v7 | 3uLL) > 7 || v9 != 0 || ((v7 + 36) & ~v7) + v8 > 0x18)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v7 + 16) & ~(v7 | 3)));
    swift_retain();
  }
  else
  {
    uint64_t v13 = AssociatedTypeWitness;
    *(_DWORD *)a1 = *(_DWORD *)a2;
    uint64_t v14 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v15 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    _DWORD *v15 = *v14;
    uint64_t v16 = (_DWORD *)(((unint64_t)v14 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v17 = (_DWORD *)(((unint64_t)v15 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *uint64_t v17 = *v16;
    uint64_t v18 = (_DWORD *)(((unint64_t)v17 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v19 = (_DWORD *)(((unint64_t)v16 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *uint64_t v18 = *v19;
    uint64_t v20 = (void *)(((unint64_t)v18 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v21 = (uint64_t *)(((unint64_t)v19 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v22 = *v21;
    *(void *)((char *)v20 + 5) = *(uint64_t *)((char *)v21 + 5);
    *uint64_t v20 = v22;
    uint64_t v23 = (_DWORD *)(((unint64_t)v18 + 23) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v24 = (_DWORD *)(((unint64_t)v19 + 23) & 0xFFFFFFFFFFFFFFFCLL);
    *uint64_t v23 = *v24;
    uint64_t v25 = (void *)(((unint64_t)v23 + v7 + 4) & ~v7);
    uint64_t v26 = (const void *)(((unint64_t)v24 + v7 + 4) & ~v7);
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(((unint64_t)v24 + v7 + 4) & ~v7, 1, AssociatedTypeWitness))
    {
      memcpy(v25, v26, v8);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v25, v26, v13);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v25, 0, 1, v13);
    }
  }
  return a1;
}

uint64_t destroy for TransactionalPreferenceBinder(uint64_t a1)
{
  unint64_t v1 = (((((((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 23) & 0xFFFFFFFFFFFFFFFCLL;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v4 = (v1 + *(unsigned __int8 *)(v3 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = v3;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, AssociatedTypeWitness);
  if (!result)
  {
    int v6 = *(uint64_t (**)(unint64_t, uint64_t))(v7 + 8);
    return v6(v4, AssociatedTypeWitness);
  }
  return result;
}

_DWORD *initializeWithCopy for TransactionalPreferenceBinder(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  uint64_t v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v3 = *v4;
  uint64_t v5 = (_DWORD *)(((unint64_t)v3 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  int v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v5 = *v6;
  uint64_t v7 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  size_t v8 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v7 = *v8;
  int v9 = (void *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v10 = (uint64_t *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v11 = *v10;
  *(void *)((char *)v9 + 5) = *(uint64_t *)((char *)v10 + 5);
  void *v9 = v11;
  uint64_t v12 = (_DWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v13 = (_DWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v12 = *v13;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v16 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v17 = (void *)(((unint64_t)v12 + v16 + 4) & ~v16);
  uint64_t v18 = (const void *)(((unint64_t)v13 + v16 + 4) & ~v16);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48))(v18, 1, AssociatedTypeWitness))
  {
    if (*(_DWORD *)(v15 + 84)) {
      size_t v19 = *(void *)(v15 + 64);
    }
    else {
      size_t v19 = *(void *)(v15 + 64) + 1;
    }
    memcpy(v17, v18, v19);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v17, v18, AssociatedTypeWitness);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v17, 0, 1, AssociatedTypeWitness);
  }
  return a1;
}

_DWORD *assignWithCopy for TransactionalPreferenceBinder(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  uint64_t v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v3 = *v4;
  uint64_t v5 = (_DWORD *)(((unint64_t)v3 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  int v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v5 = *v6;
  uint64_t v7 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  size_t v8 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v7 = *v8;
  unint64_t v9 = ((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v10 = ((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)unint64_t v9 = *(_DWORD *)v10;
  *(_DWORD *)(v9 + 4) = *(_DWORD *)(v10 + 4);
  *(_DWORD *)(v9 + 8) = *(_DWORD *)(v10 + 8);
  *(unsigned char *)(v9 + 12) = *(unsigned char *)(v10 + 12);
  uint64_t v11 = (_DWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v12 = (_DWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v11 = *v12;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v15 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v16 = (void *)(((unint64_t)v11 + v15 + 4) & ~v15);
  uint64_t v17 = (void *)(((unint64_t)v12 + v15 + 4) & ~v15);
  uint64_t v18 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  int v19 = v18(v16, 1, AssociatedTypeWitness);
  int v20 = v18(v17, 1, AssociatedTypeWitness);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 16))(v16, v17, AssociatedTypeWitness);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v16, 0, 1, AssociatedTypeWitness);
      return a1;
    }
    int v21 = *(_DWORD *)(v14 + 84);
    size_t v22 = *(void *)(v14 + 64);
  }
  else
  {
    if (!v20)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 24))(v16, v17, AssociatedTypeWitness);
      return a1;
    }
    uint64_t v24 = *(void (**)(void *, uint64_t))(v14 + 8);
    uint64_t v23 = v14 + 8;
    v24(v16, AssociatedTypeWitness);
    int v21 = *(_DWORD *)(v23 + 76);
    size_t v22 = *(void *)(v23 + 56);
  }
  if (v21) {
    size_t v25 = v22;
  }
  else {
    size_t v25 = v22 + 1;
  }
  memcpy(v16, v17, v25);
  return a1;
}

_DWORD *initializeWithTake for TransactionalPreferenceBinder(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  uint64_t v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v3 = *v4;
  uint64_t v5 = (_DWORD *)(((unint64_t)v3 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  int v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v5 = *v6;
  uint64_t v7 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  size_t v8 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v7 = *v8;
  unint64_t v9 = (void *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v10 = (uint64_t *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v11 = *v10;
  *(void *)((char *)v9 + 5) = *(uint64_t *)((char *)v10 + 5);
  void *v9 = v11;
  uint64_t v12 = (_DWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v13 = (_DWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v12 = *v13;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v16 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v17 = (void *)(((unint64_t)v12 + v16 + 4) & ~v16);
  uint64_t v18 = (const void *)(((unint64_t)v13 + v16 + 4) & ~v16);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48))(v18, 1, AssociatedTypeWitness))
  {
    if (*(_DWORD *)(v15 + 84)) {
      size_t v19 = *(void *)(v15 + 64);
    }
    else {
      size_t v19 = *(void *)(v15 + 64) + 1;
    }
    memcpy(v17, v18, v19);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 32))(v17, v18, AssociatedTypeWitness);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v17, 0, 1, AssociatedTypeWitness);
  }
  return a1;
}

_DWORD *assignWithTake for TransactionalPreferenceBinder(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  uint64_t v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v3 = *v4;
  uint64_t v5 = (_DWORD *)(((unint64_t)v3 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  int v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v5 = *v6;
  uint64_t v7 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  size_t v8 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v7 = *v8;
  unint64_t v9 = ((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v10 = ((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)unint64_t v9 = *(_DWORD *)v10;
  *(_DWORD *)(v9 + 4) = *(_DWORD *)(v10 + 4);
  *(_DWORD *)(v9 + 8) = *(_DWORD *)(v10 + 8);
  *(unsigned char *)(v9 + 12) = *(unsigned char *)(v10 + 12);
  uint64_t v11 = (_DWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v12 = (_DWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v11 = *v12;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v15 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v16 = (void *)(((unint64_t)v11 + v15 + 4) & ~v15);
  uint64_t v17 = (void *)(((unint64_t)v12 + v15 + 4) & ~v15);
  uint64_t v18 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  int v19 = v18(v16, 1, AssociatedTypeWitness);
  int v20 = v18(v17, 1, AssociatedTypeWitness);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 32))(v16, v17, AssociatedTypeWitness);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v16, 0, 1, AssociatedTypeWitness);
      return a1;
    }
    int v21 = *(_DWORD *)(v14 + 84);
    size_t v22 = *(void *)(v14 + 64);
  }
  else
  {
    if (!v20)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 40))(v16, v17, AssociatedTypeWitness);
      return a1;
    }
    uint64_t v24 = *(void (**)(void *, uint64_t))(v14 + 8);
    uint64_t v23 = v14 + 8;
    v24(v16, AssociatedTypeWitness);
    int v21 = *(_DWORD *)(v23 + 76);
    size_t v22 = *(void *)(v23 + 56);
  }
  if (v21) {
    size_t v25 = v22;
  }
  else {
    size_t v25 = v22 + 1;
  }
  memcpy(v16, v17, v25);
  return a1;
}

uint64_t getEnumTagSinglePayload for TransactionalPreferenceBinder(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v5 = v4;
  int v6 = *(_DWORD *)(v4 + 84);
  if (v6) {
    unsigned int v7 = v6 - 1;
  }
  else {
    unsigned int v7 = 0;
  }
  if (v7 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = v7;
  }
  uint64_t v9 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v10 = *(void *)(v4 + 64);
  if (!v6) {
    ++v10;
  }
  if (!a2) {
    return 0;
  }
  if (a2 > v8)
  {
    uint64_t v11 = v10 + ((v9 + 36) & ~v9);
    char v12 = 8 * v11;
    if (v11 > 3) {
      goto LABEL_12;
    }
    unsigned int v14 = ((a2 - v8 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v14))
    {
      int v13 = *(_DWORD *)((char *)a1 + v11);
      if (!v13) {
        goto LABEL_27;
      }
      goto LABEL_19;
    }
    if (v14 > 0xFF)
    {
      int v13 = *(unsigned __int16 *)((char *)a1 + v11);
      if (!*(unsigned __int16 *)((char *)a1 + v11)) {
        goto LABEL_27;
      }
      goto LABEL_19;
    }
    if (v14 >= 2)
    {
LABEL_12:
      int v13 = *((unsigned __int8 *)a1 + v11);
      if (!*((unsigned char *)a1 + v11)) {
        goto LABEL_27;
      }
LABEL_19:
      int v15 = (v13 - 1) << v12;
      if (v11 > 3) {
        int v15 = 0;
      }
      if (v11)
      {
        if (v11 > 3) {
          LODWORD(v11) = 4;
        }
        switch((int)v11)
        {
          case 2:
            LODWORD(v11) = *a1;
            break;
          case 3:
            LODWORD(v11) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            LODWORD(v11) = *(_DWORD *)a1;
            break;
          default:
            LODWORD(v11) = *(unsigned __int8 *)a1;
            break;
        }
      }
      int v20 = v8 + (v11 | v15);
      return (v20 + 1);
    }
  }
LABEL_27:
  unint64_t v16 = ((((((((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL)
       + 7) & 0xFFFFFFFFFFFFFFFCLL;
  if (v7 <= 0xFE)
  {
    unsigned int v17 = *(unsigned __int8 *)(v16 + 12);
    if (v17 < 2) {
      return 0;
    }
    int v20 = (v17 + 2147483646) & 0x7FFFFFFF;
    return (v20 + 1);
  }
  unsigned int v19 = (*(uint64_t (**)(unint64_t))(v5 + 48))((v16 + v9 + 20) & ~v9);
  if (v19 >= 2) {
    return v19 - 1;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for TransactionalPreferenceBinder(unsigned char *a1, unsigned int a2, unsigned int a3)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (!v8) {
    unsigned int v9 = 0;
  }
  uint64_t v10 = *(unsigned __int8 *)(v7 + 80);
  if (v9 <= 0xFE) {
    unsigned int v11 = 254;
  }
  else {
    unsigned int v11 = v9;
  }
  if (v8) {
    size_t v12 = *(void *)(v7 + 64);
  }
  else {
    size_t v12 = *(void *)(v7 + 64) + 1;
  }
  size_t v13 = ((v10 + 36) & ~v10) + v12;
  if (a3 <= v11) {
    goto LABEL_17;
  }
  if (v13 <= 3)
  {
    unsigned int v14 = ((a3 - v11 + ~(-1 << (8 * v13))) >> (8 * v13)) + 1;
    if (HIWORD(v14))
    {
      int v6 = 4;
      if (v11 >= a2) {
        goto LABEL_25;
      }
      goto LABEL_18;
    }
    if (v14 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v14 > 1;
    }
LABEL_17:
    if (v11 >= a2) {
      goto LABEL_25;
    }
    goto LABEL_18;
  }
  int v6 = 1;
  if (v11 >= a2)
  {
LABEL_25:
    switch(v6)
    {
      case 1:
        a1[v13] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_30;
      case 2:
        *(_WORD *)&a1[v13] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_30;
      case 3:
        goto LABEL_59;
      case 4:
        *(_DWORD *)&a1[v13] = 0;
        goto LABEL_29;
      default:
LABEL_29:
        if (a2)
        {
LABEL_30:
          unint64_t v18 = (((((((unint64_t)(a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL)
               + 7) & 0xFFFFFFFFFFFFFFFCLL;
          if (v9 > 0xFE)
          {
            unsigned int v19 = (unsigned char *)((v18 + v10 + 20) & ~v10);
            if (v9 >= a2)
            {
              uint64_t v23 = *(void (**)(unint64_t, void))(v7 + 56);
              v23((v18 + v10 + 20) & ~v10, a2 + 1);
            }
            else
            {
              if (v12 <= 3) {
                int v20 = ~(-1 << (8 * v12));
              }
              else {
                int v20 = -1;
              }
              if (v12)
              {
                int v21 = v20 & (~v9 + a2);
                if (v12 <= 3) {
                  int v22 = v12;
                }
                else {
                  int v22 = 4;
                }
                bzero(v19, v12);
                switch(v22)
                {
                  case 2:
                    *(_WORD *)unsigned int v19 = v21;
                    break;
                  case 3:
                    *(_WORD *)unsigned int v19 = v21;
                    void v19[2] = BYTE2(v21);
                    break;
                  case 4:
                    *(_DWORD *)unsigned int v19 = v21;
                    break;
                  default:
                    unsigned char *v19 = v21;
                    break;
                }
              }
            }
          }
          else if (a2 > 0xFE)
          {
            *(unsigned char *)(v18 + 12) = 0;
            *(_DWORD *)(v18 + 8) = 0;
            *(void *)unint64_t v18 = a2 - 255;
          }
          else
          {
            *(unsigned char *)(v18 + 12) = a2 + 1;
          }
        }
        break;
    }
    return;
  }
LABEL_18:
  unsigned int v15 = ~v11 + a2;
  if (v13 < 4)
  {
    int v16 = (v15 >> (8 * v13)) + 1;
    if (v13)
    {
      int v17 = v15 & ~(-1 << (8 * v13));
      bzero(a1, v13);
      if (v13 == 3)
      {
        *(_WORD *)a1 = v17;
        a1[2] = BYTE2(v17);
      }
      else if (v13 == 2)
      {
        *(_WORD *)a1 = v17;
      }
      else
      {
        *a1 = v17;
      }
    }
  }
  else
  {
    bzero(a1, ((v10 + 36) & ~v10) + v12);
    *(_DWORD *)a1 = v15;
    int v16 = 1;
  }
  switch(v6)
  {
    case 1:
      a1[v13] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v13] = v16;
      break;
    case 3:
LABEL_59:
      __break(1u);
      JUMPOUT(0x24600C868);
    case 4:
      *(_DWORD *)&a1[v13] = v16;
      break;
    default:
      return;
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for PreferenceBinder(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = v6;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v8 = *(void *)(v5 + 64);
  }
  else {
    size_t v8 = *(void *)(v5 + 64) + 1;
  }
  int v9 = v6 & 0x100000;
  if ((v7 | 3uLL) > 7 || v9 != 0 || ((v7 + 32) & ~v7) + v8 > 0x18)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v7 + 16) & ~(v7 | 3)));
    swift_retain();
  }
  else
  {
    uint64_t v13 = AssociatedTypeWitness;
    *(_DWORD *)a1 = *(_DWORD *)a2;
    unsigned int v14 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    unsigned int v15 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    _DWORD *v15 = *v14;
    int v16 = (_DWORD *)(((unint64_t)v15 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    int v17 = (_DWORD *)(((unint64_t)v14 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *int v16 = *v17;
    unint64_t v18 = (void *)(((unint64_t)v16 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    unsigned int v19 = (uint64_t *)(((unint64_t)v17 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v20 = *v19;
    *(void *)((char *)v18 + 5) = *(uint64_t *)((char *)v19 + 5);
    *unint64_t v18 = v20;
    int v21 = (_DWORD *)(((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFFFFCLL);
    int v22 = (_DWORD *)(((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFFFFCLL);
    *int v21 = *v22;
    uint64_t v23 = (void *)(((unint64_t)v21 + v7 + 4) & ~v7);
    uint64_t v24 = (const void *)(((unint64_t)v22 + v7 + 4) & ~v7);
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(((unint64_t)v22 + v7 + 4) & ~v7, 1, AssociatedTypeWitness))
    {
      memcpy(v23, v24, v8);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v23, v24, v13);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v23, 0, 1, v13);
    }
  }
  return a1;
}

_DWORD *assignWithCopy for PreferenceBinder(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  uint64_t v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v3 = *v4;
  uint64_t v5 = (_DWORD *)(((unint64_t)v3 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  int v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v5 = *v6;
  unint64_t v7 = ((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v8 = ((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)unint64_t v7 = *(_DWORD *)v8;
  *(_DWORD *)(v7 + 4) = *(_DWORD *)(v8 + 4);
  *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 + 8);
  *(unsigned char *)(v7 + 12) = *(unsigned char *)(v8 + 12);
  int v9 = (_DWORD *)(((unint64_t)v5 + 23) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v10 = (_DWORD *)(((unint64_t)v6 + 23) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v9 = *v10;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v13 = *(unsigned __int8 *)(v12 + 80);
  unsigned int v14 = (void *)(((unint64_t)v9 + v13 + 4) & ~v13);
  unsigned int v15 = (void *)(((unint64_t)v10 + v13 + 4) & ~v13);
  int v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  int v17 = v16(v14, 1, AssociatedTypeWitness);
  int v18 = v16(v15, 1, AssociatedTypeWitness);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 16))(v14, v15, AssociatedTypeWitness);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v14, 0, 1, AssociatedTypeWitness);
      return a1;
    }
    int v19 = *(_DWORD *)(v12 + 84);
    size_t v20 = *(void *)(v12 + 64);
  }
  else
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 24))(v14, v15, AssociatedTypeWitness);
      return a1;
    }
    int v22 = *(void (**)(void *, uint64_t))(v12 + 8);
    uint64_t v21 = v12 + 8;
    v22(v14, AssociatedTypeWitness);
    int v19 = *(_DWORD *)(v21 + 76);
    size_t v20 = *(void *)(v21 + 56);
  }
  if (v19) {
    size_t v23 = v20;
  }
  else {
    size_t v23 = v20 + 1;
  }
  memcpy(v14, v15, v23);
  return a1;
}

_DWORD *initializeWithTake for PreferenceBinder(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  uint64_t v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v3 = *v4;
  uint64_t v5 = (_DWORD *)(((unint64_t)v3 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  int v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v5 = *v6;
  unint64_t v7 = (void *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v8 = (uint64_t *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v9 = *v8;
  *(void *)((char *)v7 + 5) = *(uint64_t *)((char *)v8 + 5);
  *unint64_t v7 = v9;
  uint64_t v10 = (_DWORD *)(((unint64_t)v5 + 23) & 0xFFFFFFFFFFFFFFFCLL);
  unsigned int v11 = (_DWORD *)(((unint64_t)v6 + 23) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v10 = *v11;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v14 = *(unsigned __int8 *)(v13 + 80);
  unsigned int v15 = (void *)(((unint64_t)v10 + v14 + 4) & ~v14);
  int v16 = (const void *)(((unint64_t)v11 + v14 + 4) & ~v14);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v16, 1, AssociatedTypeWitness))
  {
    if (*(_DWORD *)(v13 + 84)) {
      size_t v17 = *(void *)(v13 + 64);
    }
    else {
      size_t v17 = *(void *)(v13 + 64) + 1;
    }
    memcpy(v15, v16, v17);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 32))(v15, v16, AssociatedTypeWitness);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v15, 0, 1, AssociatedTypeWitness);
  }
  return a1;
}

_DWORD *assignWithTake for PreferenceBinder(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  uint64_t v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v3 = *v4;
  uint64_t v5 = (_DWORD *)(((unint64_t)v3 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  int v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v5 = *v6;
  unint64_t v7 = ((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v8 = ((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)unint64_t v7 = *(_DWORD *)v8;
  *(_DWORD *)(v7 + 4) = *(_DWORD *)(v8 + 4);
  *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 + 8);
  *(unsigned char *)(v7 + 12) = *(unsigned char *)(v8 + 12);
  uint64_t v9 = (_DWORD *)(((unint64_t)v5 + 23) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v10 = (_DWORD *)(((unint64_t)v6 + 23) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v9 = *v10;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v13 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v14 = (void *)(((unint64_t)v9 + v13 + 4) & ~v13);
  unsigned int v15 = (void *)(((unint64_t)v10 + v13 + 4) & ~v13);
  int v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  int v17 = v16(v14, 1, AssociatedTypeWitness);
  int v18 = v16(v15, 1, AssociatedTypeWitness);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v14, v15, AssociatedTypeWitness);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v14, 0, 1, AssociatedTypeWitness);
      return a1;
    }
    int v19 = *(_DWORD *)(v12 + 84);
    size_t v20 = *(void *)(v12 + 64);
  }
  else
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 40))(v14, v15, AssociatedTypeWitness);
      return a1;
    }
    int v22 = *(void (**)(void *, uint64_t))(v12 + 8);
    uint64_t v21 = v12 + 8;
    v22(v14, AssociatedTypeWitness);
    int v19 = *(_DWORD *)(v21 + 76);
    size_t v20 = *(void *)(v21 + 56);
  }
  if (v19) {
    size_t v23 = v20;
  }
  else {
    size_t v23 = v20 + 1;
  }
  memcpy(v14, v15, v23);
  return a1;
}

uint64_t getEnumTagSinglePayload for PreferenceBinder(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v5 = v4;
  int v6 = *(_DWORD *)(v4 + 84);
  if (v6) {
    unsigned int v7 = v6 - 1;
  }
  else {
    unsigned int v7 = 0;
  }
  if (v7 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = v7;
  }
  uint64_t v9 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v10 = *(void *)(v4 + 64);
  if (!v6) {
    ++v10;
  }
  if (!a2) {
    return 0;
  }
  if (a2 > v8)
  {
    uint64_t v11 = v10 + ((v9 + 32) & ~v9);
    char v12 = 8 * v11;
    if (v11 > 3) {
      goto LABEL_12;
    }
    unsigned int v14 = ((a2 - v8 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v14))
    {
      int v13 = *(_DWORD *)((char *)a1 + v11);
      if (!v13) {
        goto LABEL_27;
      }
      goto LABEL_19;
    }
    if (v14 > 0xFF)
    {
      int v13 = *(unsigned __int16 *)((char *)a1 + v11);
      if (!*(unsigned __int16 *)((char *)a1 + v11)) {
        goto LABEL_27;
      }
      goto LABEL_19;
    }
    if (v14 >= 2)
    {
LABEL_12:
      int v13 = *((unsigned __int8 *)a1 + v11);
      if (!*((unsigned char *)a1 + v11)) {
        goto LABEL_27;
      }
LABEL_19:
      int v15 = (v13 - 1) << v12;
      if (v11 > 3) {
        int v15 = 0;
      }
      if (v11)
      {
        if (v11 > 3) {
          LODWORD(v11) = 4;
        }
        switch((int)v11)
        {
          case 2:
            LODWORD(v11) = *a1;
            break;
          case 3:
            LODWORD(v11) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            LODWORD(v11) = *(_DWORD *)a1;
            break;
          default:
            LODWORD(v11) = *(unsigned __int8 *)a1;
            break;
        }
      }
      int v20 = v8 + (v11 | v15);
      return (v20 + 1);
    }
  }
LABEL_27:
  unint64_t v16 = ((((((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL;
  if (v7 <= 0xFE)
  {
    unsigned int v17 = *(unsigned __int8 *)(v16 + 12);
    if (v17 < 2) {
      return 0;
    }
    int v20 = (v17 + 2147483646) & 0x7FFFFFFF;
    return (v20 + 1);
  }
  unsigned int v19 = (*(uint64_t (**)(unint64_t))(v5 + 48))((v16 + v9 + 20) & ~v9);
  if (v19 >= 2) {
    return v19 - 1;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for PreferenceBinder(unsigned char *a1, unsigned int a2, unsigned int a3)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (!v8) {
    unsigned int v9 = 0;
  }
  uint64_t v10 = *(unsigned __int8 *)(v7 + 80);
  if (v9 <= 0xFE) {
    unsigned int v11 = 254;
  }
  else {
    unsigned int v11 = v9;
  }
  if (v8) {
    size_t v12 = *(void *)(v7 + 64);
  }
  else {
    size_t v12 = *(void *)(v7 + 64) + 1;
  }
  size_t v13 = ((v10 + 32) & ~v10) + v12;
  if (a3 <= v11) {
    goto LABEL_17;
  }
  if (v13 <= 3)
  {
    unsigned int v14 = ((a3 - v11 + ~(-1 << (8 * v13))) >> (8 * v13)) + 1;
    if (HIWORD(v14))
    {
      int v6 = 4;
      if (v11 >= a2) {
        goto LABEL_25;
      }
      goto LABEL_18;
    }
    if (v14 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v14 > 1;
    }
LABEL_17:
    if (v11 >= a2) {
      goto LABEL_25;
    }
    goto LABEL_18;
  }
  int v6 = 1;
  if (v11 >= a2)
  {
LABEL_25:
    switch(v6)
    {
      case 1:
        a1[v13] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_30;
      case 2:
        *(_WORD *)&a1[v13] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_30;
      case 3:
        goto LABEL_59;
      case 4:
        *(_DWORD *)&a1[v13] = 0;
        goto LABEL_29;
      default:
LABEL_29:
        if (a2)
        {
LABEL_30:
          unint64_t v18 = (((((unint64_t)(a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL;
          if (v9 > 0xFE)
          {
            unsigned int v19 = (unsigned char *)((v18 + v10 + 20) & ~v10);
            if (v9 >= a2)
            {
              size_t v23 = *(void (**)(unint64_t, void))(v7 + 56);
              v23((v18 + v10 + 20) & ~v10, a2 + 1);
            }
            else
            {
              if (v12 <= 3) {
                int v20 = ~(-1 << (8 * v12));
              }
              else {
                int v20 = -1;
              }
              if (v12)
              {
                int v21 = v20 & (~v9 + a2);
                if (v12 <= 3) {
                  int v22 = v12;
                }
                else {
                  int v22 = 4;
                }
                bzero(v19, v12);
                switch(v22)
                {
                  case 2:
                    *(_WORD *)unsigned int v19 = v21;
                    break;
                  case 3:
                    *(_WORD *)unsigned int v19 = v21;
                    void v19[2] = BYTE2(v21);
                    break;
                  case 4:
                    *(_DWORD *)unsigned int v19 = v21;
                    break;
                  default:
                    unsigned char *v19 = v21;
                    break;
                }
              }
            }
          }
          else if (a2 > 0xFE)
          {
            *(unsigned char *)(v18 + 12) = 0;
            *(_DWORD *)(v18 + 8) = 0;
            *(void *)unint64_t v18 = a2 - 255;
          }
          else
          {
            *(unsigned char *)(v18 + 12) = a2 + 1;
          }
        }
        break;
    }
    return;
  }
LABEL_18:
  unsigned int v15 = ~v11 + a2;
  if (v13 < 4)
  {
    int v16 = (v15 >> (8 * v13)) + 1;
    if (v13)
    {
      int v17 = v15 & ~(-1 << (8 * v13));
      bzero(a1, v13);
      if (v13 == 3)
      {
        *(_WORD *)a1 = v17;
        a1[2] = BYTE2(v17);
      }
      else if (v13 == 2)
      {
        *(_WORD *)a1 = v17;
      }
      else
      {
        *a1 = v17;
      }
    }
  }
  else
  {
    bzero(a1, ((v10 + 32) & ~v10) + v12);
    *(_DWORD *)a1 = v15;
    int v16 = 1;
  }
  switch(v6)
  {
    case 1:
      a1[v13] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v13] = v16;
      break;
    case 3:
LABEL_59:
      __break(1u);
      JUMPOUT(0x24600D550);
    case 4:
      *(_DWORD *)&a1[v13] = v16;
      break;
    default:
      return;
  }
}

uint64_t instantiation function for generic protocol witness table for TransactionalPreferenceBinder<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for _AttributeBody in TransactionalPreferenceBinder<A>()
{
  return swift_getWitnessTable();
}

uint64_t sub_24600D5E0()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_24600D618()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, AssociatedTypeWitness);

  return swift_deallocObject();
}

uint64_t sub_24600D6F8()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.PreferenceKey.Value, @in_guaranteed Transaction) -> (@out ())(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t *))(v2 + 40);
  uint64_t v5 = a2;
  return v3(a1, &v5);
}

uint64_t sub_24600D768()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, AssociatedTypeWitness);
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in TransactionalPreferenceBinder.updateValue()()
{
  uint64_t v1 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return (*(uint64_t (**)(unint64_t, void))(v0 + 40))(v0 + v2, *(void *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t specialized PreferenceBinder.modifier.getter(void *a1, void (*a2)(void, void, void, void))
{
  return *(void *)AGGraphGetValue();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.PreferenceKey.Value, @guaranteed Transaction) -> ()(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(uint64_t, void))(v2 + 40))(a1, *a2);
}

uint64_t AnyView.init(_fromValue:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t DynamicType = swift_getDynamicType();
  _viewProtocolDescriptor();
  if (!swift_conformsToProtocol())
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return 0;
  }
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v5);
  uint64_t v6 = 0;
  uint64_t result = visit<A>(type:) in Visitor #1 in AnyView.init(_fromValue:)(DynamicType, DynamicType);
  uint64_t v4 = v6;
  if (v6)
  {
    swift_retain();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    outlined destroy of Visitor #1 in AnyView.init(_fromValue:)((uint64_t)v5);
    return v4;
  }
  __break(1u);
  return result;
}

uint64_t static AnyView._makeView(view:inputs:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static DynamicView.makeDynamicView(metadata:view:inputs:)(v3, (uint64_t)v7, a3);
}

uint64_t static AnyView._makeViewList(view:inputs:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 48);
  v5[2] = *(_OWORD *)(a1 + 32);
  v5[3] = v2;
  v5[4] = *(_OWORD *)(a1 + 64);
  char v6 = *(unsigned char *)(a1 + 80);
  long long v3 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v3;
  return specialized static DynamicView.makeDynamicViewList(metadata:view:inputs:)((uint64_t)v5, a2);
}

uint64_t AnyView.visitContent<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 104))(a1, a3, a4);
}

uint64_t AnyView.debugDescription.getter(uint64_t a1)
{
  uint64_t v6 = 0;
  unint64_t v7 = 0xE000000000000000;
  v2._countAndFlagsBits = 0x2877656956796E41;
  v2._object = (void *)0xE800000000000000;
  String.append(_:)(v2);
  (*(void (**)(void *__return_ptr))(*(void *)a1 + 112))(v5);
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for View);
  _print_unlocked<A, B>(_:_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  v3._countAndFlagsBits = 41;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  return v6;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AnyView()
{
  uint64_t v1 = *v0;
  uint64_t v6 = 0;
  unint64_t v7 = 0xE000000000000000;
  v2._countAndFlagsBits = 0x2877656956796E41;
  v2._object = (void *)0xE800000000000000;
  String.append(_:)(v2);
  (*(void (**)(void *__return_ptr))(*(void *)v1 + 112))(v5);
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for View);
  _print_unlocked<A, B>(_:_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  v3._countAndFlagsBits = 41;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  return v6;
}

uint64_t static AnyView.canTransition.getter()
{
  return 0;
}

uint64_t AnyView.childInfo(metadata:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)a2 + 80))();
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  return result;
}

uint64_t AnyView.makeChildView(metadata:view:inputs:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *((_DWORD *)a2 + 2);
  uint64_t v4 = a2[2];
  int v5 = *((_DWORD *)a2 + 20);
  uint64_t v8 = *a2;
  int v9 = v3;
  uint64_t v10 = v4;
  long long v6 = *(_OWORD *)(a2 + 5);
  long long v11 = *(_OWORD *)(a2 + 3);
  long long v12 = v6;
  long long v13 = *(_OWORD *)(a2 + 7);
  uint64_t v14 = a2[9];
  int v15 = v5;
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a3 + 88))(a1, &v8);
}

uint64_t AnyView.makeChildViewList(metadata:view:inputs:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *((_DWORD *)a2 + 2);
  uint64_t v4 = a2[2];
  uint64_t v5 = a2[5];
  int v6 = *((_DWORD *)a2 + 16);
  uint64_t v7 = a2[9];
  char v8 = *((unsigned char *)a2 + 80);
  uint64_t v10 = *a2;
  int v11 = v3;
  uint64_t v12 = v4;
  long long v13 = *(_OWORD *)(a2 + 3);
  uint64_t v14 = v5;
  long long v15 = *((_OWORD *)a2 + 3);
  int v16 = v6;
  uint64_t v17 = v7;
  char v18 = v8;
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a3 + 96))(a1, &v10);
}

uint64_t protocol witness for DynamicView.childInfo(metadata:) in conformance AnyView(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 80))();
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  return result;
}

uint64_t protocol witness for DynamicView.makeChildView(metadata:view:inputs:) in conformance AnyView(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *v3;
  int v5 = *((_DWORD *)a3 + 2);
  uint64_t v6 = a3[2];
  int v7 = *((_DWORD *)a3 + 20);
  uint64_t v10 = *a3;
  int v11 = v5;
  uint64_t v12 = v6;
  long long v8 = *(_OWORD *)(a3 + 5);
  long long v13 = *(_OWORD *)(a3 + 3);
  long long v14 = v8;
  long long v15 = *(_OWORD *)(a3 + 7);
  uint64_t v16 = a3[9];
  int v17 = v7;
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v4 + 88))(a2, &v10);
}

uint64_t protocol witness for DynamicView.makeChildViewList(metadata:view:inputs:) in conformance AnyView(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *v3;
  int v5 = *((_DWORD *)a3 + 2);
  uint64_t v6 = a3[2];
  uint64_t v7 = a3[5];
  int v8 = *((_DWORD *)a3 + 16);
  uint64_t v9 = a3[9];
  char v10 = *((unsigned char *)a3 + 80);
  uint64_t v12 = *a3;
  int v13 = v5;
  uint64_t v14 = v6;
  long long v15 = *(_OWORD *)(a3 + 3);
  uint64_t v16 = v7;
  long long v17 = *((_OWORD *)a3 + 3);
  int v18 = v8;
  uint64_t v19 = v9;
  char v20 = v10;
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v4 + 96))(a2, &v12);
}

void AnyViewStorageBase.childType.getter()
{
}

void AnyViewStorageBase.makeChildView(view:inputs:)()
{
}

void AnyViewStorageBase.makeChildViewList(view:inputs:)()
{
}

void AnyViewStorageBase.visitContent<A>(_:)()
{
}

void AnyViewStorageBase.content.getter()
{
}

uint64_t AnyViewStorageBase.deinit()
{
  return v0;
}

uint64_t AnyViewStorageBase.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t AnyViewStorage.visitContent<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void, void, uint64_t, uint64_t))(a3 + 8))(v3 + *(void *)(*(void *)v3 + 144), *(void *)(*(void *)v3 + 128), *(void *)(*(void *)v3 + 136), a2, a3);
}

uint64_t visit<A>(type:) in Visitor #1 in AnyView.init(_fromValue:)(uint64_t a1, uint64_t a2)
{
  MEMORY[0x270FA5388](a1);
  int v5 = &v8[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of Any(v2, (uint64_t)v8);
  swift_dynamicCast();
  uint64_t v6 = AnyView.init<A>(_:)((uint64_t)v5, a2);
  uint64_t result = swift_release();
  *(void *)(v2 + 32) = v6;
  return result;
}

uint64_t outlined destroy of Visitor #1 in AnyView.init(_fromValue:)(uint64_t a1)
{
  return a1;
}

uint64_t method lookup function for AnyViewStorageBase(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AnyViewStorageBase);
}

uint64_t destroy for Visitor #1 in AnyView.init(_fromValue:)(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);

  return swift_release();
}

uint64_t initializeWithCopy for Visitor #1 in AnyView.init(_fromValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  return a1;
}

uint64_t *assignWithCopy for Visitor #1 in AnyView.init(_fromValue:)(uint64_t *a1, uint64_t *a2)
{
  a1[4] = a2[4];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for Visitor #1 in AnyView.init(_fromValue:)(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  return a1;
}

void *type metadata accessor for Visitor #1 in AnyView.init(_fromValue:)()
{
  return &unk_26FA7EB70;
}

BOOL static Time.== infix(_:_:)(double *a1, double *a2)
{
  return *a1 == *a2;
}

SwiftUI::Time __swiftcall Time.init()()
{
  *uint64_t v0 = 0;
  return result;
}

double static Time.- infix(_:_:)(double *a1, double *a2)
{
  return *a1 - *a2;
}

BOOL static Time.< infix(_:_:)(double *a1, double *a2)
{
  return *a1 < *a2;
}

double static Time.+= infix(_:_:)(double *a1, double a2)
{
  double result = *a1 + a2;
  *a1 = result;
  return result;
}

double static Time.+ infix(_:_:)@<D0>(double *a1@<X0>, double *a2@<X8>, double a3@<D0>)
{
  double result = *a1 + a3;
  *a2 = result;
  return result;
}

{
  double result;

  double result = *a1 + a3;
  *a2 = result;
  return result;
}

void static Time.systemUptime.getter(CFTimeInterval *a1@<X8>)
{
  *a1 = CACurrentMediaTime();
}

SwiftUI::Time __swiftcall Time.init(seconds:)(SwiftUI::Time seconds)
{
  v1->seconds = seconds.seconds;
  return seconds;
}

double static Time.- infix(_:_:)@<D0>(double *a1@<X0>, double *a2@<X8>, double a3@<D0>)
{
  double result = *a1 - a3;
  *a2 = result;
  return result;
}

double static Time.- prefix(_:)@<D0>(double *a1@<X0>, double *a2@<X8>)
{
  double result = -*a1;
  *a2 = result;
  return result;
}

double Time.seconds.getter()
{
  return *(double *)v0;
}

void Time.seconds.setter(double a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*Time.seconds.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void static Time.zero.getter(void *a1@<X8>)
{
  *a1 = 0;
}

double static Time.* infix(_:_:)@<D0>(double *a1@<X0>, double *a2@<X8>, double a3@<D0>)
{
  double result = *a1 * a3;
  *a2 = result;
  return result;
}

double static Time./ infix(_:_:)@<D0>(double *a1@<X0>, double *a2@<X8>, double a3@<D0>)
{
  double result = *a1 / a3;
  *a2 = result;
  return result;
}

double static Time.-= infix(_:_:)(double *a1, double a2)
{
  double result = *a1 - a2;
  *a1 = result;
  return result;
}

double static Time.*= infix(_:_:)(double *a1, double a2)
{
  double result = *a1 * a2;
  *a1 = result;
  return result;
}

double static Time./= infix(_:_:)(double *a1, double a2)
{
  double result = *a1 / a2;
  *a1 = result;
  return result;
}

void Time.hash(into:)()
{
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v1 = *v0;
  }
  else {
    Swift::UInt64 v1 = 0;
  }
  Hasher._combine(_:)(v1);
}

Swift::Int Time.hashValue.getter()
{
  Swift::UInt64 v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = v1;
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type Time and conformance Time()
{
  unint64_t result = lazy protocol witness table cache variable for type Time and conformance Time;
  if (!lazy protocol witness table cache variable for type Time and conformance Time)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Time and conformance Time);
  }
  return result;
}

uint64_t static _VectorMath.+ infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static _VectorMath.+ infix(_:_:)(a1, a2, a3, a4, static _VectorMath.+= infix(_:_:), a5);
}

void static _VectorMath.- prefix(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
}

double _VectorMath.magnitude.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  double v6 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  int v8 = (char *)&v12 - v7;
  (*(void (**)(uint64_t, uint64_t, double))(v3 + 24))(a1, v3, v6);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  double v10 = (*(double (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 24))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, AssociatedTypeWitness);
  return sqrt(v10);
}

Swift::Void __swiftcall _VectorMath.negate()()
{
  uint64_t v2 = v0;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  double v10 = (char *)&v15 - v9;
  MEMORY[0x270FA5388](v11);
  int v13 = (char *)&v15 - v12;
  swift_getAssociatedConformanceWitness();
  dispatch thunk of static AdditiveArithmetic.zero.getter();
  (*(void (**)(uint64_t, uint64_t))(v3 + 24))(v2, v3);
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v7, AssociatedTypeWitness);
  v14(v10, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v13, v2, v3);
}

uint64_t static _VectorMath.+= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static _VectorMath.+= infix(_:_:)(a1, a2, a3, a4, MEMORY[0x263F8DF30]);
}

uint64_t static _VectorMath.-= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static _VectorMath.+= infix(_:_:)(a1, a2, a3, a4, MEMORY[0x263F8DF38]);
}

uint64_t static _VectorMath.+= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, unsigned char *, uint64_t, void))
{
  uint64_t v7 = *(void *)(a4 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  double v10 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v12 = &v18[-v11];
  (*(void (**)(uint64_t, uint64_t, double))(v7 + 24))(a3, v7, v10);
  int v13 = (uint64_t (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v7 + 40))(v18, a3, v7);
  uint64_t v15 = v14;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  a5(v15, v12, AssociatedTypeWitness, *(void *)(AssociatedConformanceWitness + 8));
  (*(void (**)(unsigned char *, uint64_t))(v9 + 8))(v12, AssociatedTypeWitness);
  return v13(v18, 0);
}

uint64_t static _VectorMath.- infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static _VectorMath.+ infix(_:_:)(a1, a2, a3, a4, static _VectorMath.-= infix(_:_:), a5);
}

uint64_t static _VectorMath.+ infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t)@<X4>, uint64_t a6@<X8>)
{
  return a5(a6, a2, a3, a4);
}

uint64_t static _VectorMath.*= infix(_:_:)(double a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (uint64_t (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))(*(void *)(a4 + 8) + 40))(v10);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, double))(AssociatedConformanceWitness + 16);
  uint64_t v8 = swift_checkMetadataState();
  v7(v8, AssociatedConformanceWitness, a1);
  return v5(v10, 0);
}

uint64_t static _VectorMath.* infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  return static _VectorMath.*= infix(_:_:)(a5, a4, a2, a3);
}

uint64_t static _VectorMath./= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  return static _VectorMath.*= infix(_:_:)(1.0 / a4, a1, a2, a3);
}

uint64_t static _VectorMath./ infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  return static _VectorMath.*= infix(_:_:)(1.0 / a5, a4, a2, a3);
}

Swift::Void __swiftcall _VectorMath.normalize()()
{
  uint64_t v3 = v1;
  uint64_t v4 = v0;
  uint64_t v5 = *(void *)(v1 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  double v8 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  double v10 = (char *)&v13 - v9;
  (*(void (**)(uint64_t, uint64_t, double))(v5 + 24))(v4, v5, v8);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  double v12 = (*(double (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 24))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, AssociatedTypeWitness);
  if (v12 != 0.0) {
    static _VectorMath.*= infix(_:_:)(1.0 / sqrt(v12), v2, v4, v3);
  }
}

void _VectorMath.normalized()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(a2, v2, a1);
  _VectorMath.normalize()();
}

BOOL static Prominence.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void Prominence.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int Prominence.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t EnvironmentValues.headerProminence.getter@<X0>(char *a1@<X8>)
{
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a1);
    swift_release_n();
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, a1);
  }
  return swift_release_n();
}

uint64_t key path setter for EnvironmentValues.headerProminence : EnvironmentValues(char *a1)
{
  char v2 = *a1;
  return EnvironmentValues.headerProminence.setter(&v2);
}

uint64_t EnvironmentValues.headerProminence.setter(char *a1)
{
  char v2 = *a1;
  uint64_t v3 = *v1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, v2);
  swift_release();
  if (v1[1])
  {
    uint64_t v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t (*EnvironmentValues.headerProminence.modify(uint64_t a1))(uint64_t a1)
{
  char v2 = (char *)(a1 + 24);
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, v2);
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<HeaderProminenceKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<HeaderProminenceKey>, (uint64_t)&protocol witness table for HeaderProminenceKey, (uint64_t (*)(void, ValueMetadata *))type metadata accessor for EnvironmentPropertyKey);
    BloomFilter.init(hashValue:)(v4);
    uint64_t v5 = swift_retain_n();
    uint64_t v6 = specialized find1<A>(_:key:filter:)(v5, v9);
    if (v6) {
      char v7 = *(unsigned char *)(v6 + 72);
    }
    else {
      char v7 = 0;
    }
    *char v2 = v7;
  }
  swift_release_n();
  return EnvironmentValues.headerProminence.modify;
}

uint64_t EnvironmentValues.headerProminence.modify(uint64_t a1)
{
  char v2 = *(uint64_t **)(a1 + 16);
  char v3 = *(unsigned char *)(a1 + 24);
  uint64_t v4 = *v2;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3);
  swift_release();
  if (v2[1])
  {
    uint64_t v5 = **(void **)(a1 + 16);
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v5);
    swift_release();
    swift_release();
  }

  return swift_release();
}

uint64_t View.headerProminence(_:)(char *a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for _EnvironmentKeyWritingModifier<Prominence>();
  uint64_t v6 = type metadata accessor for ModifiedContent();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v13 - v8;
  char v10 = *a1;
  uint64_t KeyPath = (uint64_t *)swift_getKeyPath();
  char v14 = v10;
  View.environment<A>(_:_:)(KeyPath, (uint64_t)&v14, a2, a3);
  swift_release();
  char v14 = v10;
  v13[1] = a3;
  void v13[2] = &protocol witness table for _EnvironmentKeyWritingModifier<A>;
  swift_getWitnessTable();
  View._trait<A>(_:_:)((uint64_t)&type metadata for HeaderProminenceKey, (uint64_t)&v14, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

void static HeaderProminenceKey.defaultValue.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t View.controlProminence(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(a2, v2, a1);
}

void EnvironmentValues.controlProminence.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t (*EnvironmentValues.controlProminence.modify(unsigned char *a1))(void, void)
{
  *a1 = 0;
  return _ViewInputs.base.modify;
}

uint64_t View.prominence(_:)(char *a1, uint64_t a2, uint64_t a3)
{
  char v4 = *a1;
  return View.headerProminence(_:)(&v4, a2, a3);
}

void type metadata accessor for _EnvironmentKeyWritingModifier<Prominence>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Prominence>)
  {
    unint64_t v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Prominence>);
    }
  }
}

uint64_t sub_24600F70C(char *a1)
{
  char v2 = *a1;
  return EnvironmentValues.headerProminence.setter(&v2);
}

unint64_t lazy protocol witness table accessor for type Prominence and conformance Prominence()
{
  unint64_t result = lazy protocol witness table cache variable for type Prominence and conformance Prominence;
  if (!lazy protocol witness table cache variable for type Prominence and conformance Prominence)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Prominence and conformance Prominence);
  }
  return result;
}

void sub_24600F79C(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

ValueMetadata *type metadata accessor for HeaderProminenceKey()
{
  return &type metadata for HeaderProminenceKey;
}

uint64_t sub_24600F7E0()
{
  return swift_getWitnessTable();
}

void type metadata accessor for EnvironmentPropertyKey<HeaderProminenceKey>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, ValueMetadata *))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, &type metadata for HeaderProminenceKey);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t sub_24600F908(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t *printGestures(data:host:)(void (*a1)(void *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3)
{
  if (one-time initialization token for _eventDebugTriggers != -1) {
    swift_once();
  }
  unint64_t result = (uint64_t *)swift_beginAccess();
  if ((_eventDebugTriggers.rawValue & 0x20) != 0)
  {
    a1(v21, result);
    outlined init with take of GestureDebug.Data?((uint64_t)v21, (uint64_t)v22);
    outlined init with take of GestureDebug.Data?((uint64_t)v22, (uint64_t)v23);
    unint64_t result = (uint64_t *)_s7SwiftUI12GestureDebugO4DataVSgWOg((uint64_t)v23);
    if (result != 1)
    {
      *(void *)&v20[0] = 0x5345525554534547;
      *((void *)&v20[0] + 1) = 0xEA00000000002820;
      v6._countAndFlagsBits = succinctDescription(of:)(a3);
      String.append(_:)(v6);
      swift_bridgeObjectRelease();
      v7._countAndFlagsBits = 41;
      v7._object = (void *)0xE100000000000000;
      String.append(_:)(v7);
      specialized static Log.eventDebug(_:)(0x5345525554534547, 0xEA00000000002820);
      swift_bridgeObjectRelease();
      long long v17 = v23[6];
      long long v18 = v23[7];
      long long v19 = v23[8];
      long long v13 = v23[2];
      long long v14 = v23[3];
      long long v15 = v23[4];
      long long v16 = v23[5];
      long long v11 = v23[0];
      long long v12 = v23[1];
      _s7SwiftUI15TextRenderLayerC6Layout33_FB86B422571764190CF2C7C4C92612D4LLVSgWOi0_(v20);
      outlined init with take of GestureDebug.Data?((uint64_t)v20, (uint64_t)v10);
      v8[0] = 0;
      v8[1] = 0xE000000000000000;
      char v9 = v23[0];
      GestureDebug.Data.printSubtree(parent:indent:)((uint64_t)v10, (uint64_t)v8);
      specialized static Log.eventDebug(_:)(0, 0xE000000000000000);
      return outlined release of GestureDebug.Data?(v22);
    }
  }
  return result;
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1)
{
  uint64_t v2 = a1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_5;
    }
    int64_t v14 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v6) {
      return swift_release();
    }
    unint64_t v15 = *(void *)(v2 + 8 * v14);
    ++v8;
    if (!v15)
    {
      int64_t v8 = v14 + 1;
      if (v14 + 1 >= v6) {
        return swift_release();
      }
      unint64_t v15 = *(void *)(v2 + 8 * v8);
      if (!v15)
      {
        int64_t v8 = v14 + 2;
        if (v14 + 2 >= v6) {
          return swift_release();
        }
        unint64_t v15 = *(void *)(v2 + 8 * v8);
        if (!v15)
        {
          int64_t v8 = v14 + 3;
          if (v14 + 3 >= v6) {
            return swift_release();
          }
          unint64_t v15 = *(void *)(v2 + 8 * v8);
          if (!v15) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v5 = (v15 - 1) & v15;
    unint64_t v10 = __clz(__rbit64(v15)) + (v8 << 6);
LABEL_5:
    long long v11 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v10);
    uint64_t v13 = *v11;
    uint64_t v12 = v11[1];
    outlined init with copy of AnyTrackedValue(*(void *)(a1 + 56) + 40 * v10, (uint64_t)v18);
    v17[0] = v13;
    v17[1] = v12;
    closure #1 in printEvents(_:)(v17, (uint64_t)v18);
    uint64_t result = outlined destroy of (key: EventID, value: EventType)((uint64_t)v17);
  }
  int64_t v16 = v14 + 4;
  if (v16 >= v6) {
    return swift_release();
  }
  unint64_t v15 = *(void *)(v2 + 8 * v16);
  if (v15)
  {
    int64_t v8 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v8 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v8 >= v6) {
      return swift_release();
    }
    unint64_t v15 = *(void *)(v2 + 8 * v8);
    ++v16;
    if (v15) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

Swift::Void __swiftcall printEvents(_:)(Swift::OpaquePointer a1)
{
  specialized Sequence.forEach(_:)((uint64_t)a1._rawValue);
  if (one-time initialization token for _eventDebugTriggers != -1) {
    swift_once();
  }
  swift_beginAccess();
  if ((_eventDebugTriggers.rawValue & 4) != 0)
  {
    type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for EventType);
    lazy protocol witness table accessor for type EventID and conformance EventID();
    v1._countAndFlagsBits = Dictionary.description.getter();
    String.append(_:)(v1);
    swift_bridgeObjectRelease();
    v2._countAndFlagsBits = 10;
    v2._object = (void *)0xE100000000000000;
    String.append(_:)(v2);
    specialized static Log.eventDebug(_:)(0x2053544E455645, 0xE700000000000000);
    swift_bridgeObjectRelease();
  }
}

Swift::Void __swiftcall printEventBindings(_:)(Swift::OpaquePointer a1)
{
  if (one-time initialization token for _eventDebugTriggers != -1) {
    goto LABEL_42;
  }
  while (1)
  {
    swift_beginAccess();
    if ((_eventDebugTriggers.rawValue & 8) == 0) {
      return;
    }
    specialized static Log.eventDebug(_:)(0x53474E49444E4942, 0xE800000000000000);
    uint64_t v39 = (char *)a1._rawValue + 64;
    uint64_t v1 = 1 << *((unsigned char *)a1._rawValue + 32);
    uint64_t v2 = -1;
    if (v1 < 64) {
      uint64_t v2 = ~(-1 << v1);
    }
    unint64_t v3 = v2 & *((void *)a1._rawValue + 8);
    int64_t v40 = (unint64_t)(v1 + 63) >> 6;
    swift_bridgeObjectRetain();
    int64_t v4 = 0;
    unint64_t v5 = &lazy cache variable for type metadata for CustomStringConvertible;
    uint64_t v6 = MEMORY[0x263F8E0C8];
LABEL_7:
    if (v3)
    {
      uint64_t v42 = (v3 - 1) & v3;
      int64_t v43 = v4;
      unint64_t v7 = __clz(__rbit64(v3)) | (v4 << 6);
      goto LABEL_23;
    }
    int64_t v8 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_41;
    }
    if (v8 >= v40) {
      break;
    }
    unint64_t v9 = *(void *)&v39[8 * v8];
    int64_t v10 = v4 + 1;
    if (v9) {
      goto LABEL_22;
    }
    int64_t v10 = v4 + 2;
    if (v4 + 2 >= v40) {
      break;
    }
    unint64_t v9 = *(void *)&v39[8 * v10];
    if (v9) {
      goto LABEL_22;
    }
    int64_t v10 = v4 + 3;
    if (v4 + 3 >= v40) {
      break;
    }
    unint64_t v9 = *(void *)&v39[8 * v10];
    if (v9) {
      goto LABEL_22;
    }
    uint64_t v11 = v4 + 4;
    if (v4 + 4 >= v40) {
      break;
    }
    unint64_t v9 = *(void *)&v39[8 * v11];
    if (v9)
    {
      int64_t v10 = v4 + 4;
LABEL_22:
      uint64_t v42 = (v9 - 1) & v9;
      int64_t v43 = v10;
      unint64_t v7 = __clz(__rbit64(v9)) + (v10 << 6);
LABEL_23:
      uint64_t v12 = *(void *)(*((void *)a1._rawValue + 6) + 16 * v7 + 8);
      uint64_t v13 = *(void *)(*((void *)a1._rawValue + 7) + 8 * v7);
      swift_retain();
      v47._countAndFlagsBits = _typeName(_:qualified:)();
      v47._object = v14;
      v15._countAndFlagsBits = 35;
      v15._object = (void *)0xE100000000000000;
      String.append(_:)(v15);
      *(void *)&v44[0] = v12;
      v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v16);
      swift_bridgeObjectRelease();
      v17._countAndFlagsBits = 0x5B203E2D20;
      v17._object = (void *)0xE500000000000000;
      String.append(_:)(v17);
      specialized static Log.eventDebug(_:)(v47._countAndFlagsBits, (unint64_t)v47._object);
      swift_bridgeObjectRelease();
      swift_retain();
      char v18 = 1;
      uint64_t v19 = v13;
      while (1)
      {
        if (v18)
        {
          swift_retain();
          if (!v19) {
            goto LABEL_6;
          }
        }
        else if (!v19 {
               || (char v20 = *(uint64_t (**)(uint64_t))(*(void *)v19 + 88),
        }
                   uint64_t v21 = swift_retain(),
                   uint64_t v22 = v20(v21),
                   swift_retain(),
                   swift_release_n(),
                   (uint64_t v19 = v22) == 0))
        {
LABEL_6:
          specialized static Log.eventDebug(_:)(2653, 0xE200000000000000);
          swift_release();
          unint64_t v3 = v42;
          int64_t v4 = v43;
          goto LABEL_7;
        }
        uint64_t v49 = 8224;
        unint64_t v50 = 0xE200000000000000;
        uint64_t v46 = v19;
        type metadata accessor for ScrollStateRequest(0, v5);
        swift_retain_n();
        if (swift_dynamicCast())
        {
          outlined init with take of ScrollStateRequest(v44, (uint64_t)&v47);
          __swift_project_boxed_opaque_existential_1(&v47, v48);
          uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter();
          size_t v25 = v24;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v47);
        }
        else
        {
          uint64_t v45 = 0;
          memset(v44, 0, sizeof(v44));
          outlined destroy of CustomStringConvertible?((uint64_t)v44);
          swift_getObjectType();
          uint64_t v23 = AGTypeID.description.getter();
          size_t v25 = v26;
        }
        v47._countAndFlagsBits = 0;
        v47._object = (void *)0xE000000000000000;
        v27._countAndFlagsBits = v23;
        v27._object = v25;
        String.append(_:)(v27);
        swift_bridgeObjectRelease();
        v28._countAndFlagsBits = 32;
        v28._object = (void *)0xE100000000000000;
        String.append(_:)(v28);
        *(void *)&v44[0] = v19;
        _print_unlocked<A, B>(_:_:)();
        swift_release_n();
        String.append(_:)(v47);
        swift_bridgeObjectRelease();
        uint64_t v30 = v49;
        unint64_t v29 = v50;
        if (one-time initialization token for eventDebuggingLog != -1) {
          swift_once();
        }
        swift_beginAccess();
        uint64_t v31 = (void *)static Log.eventDebuggingLog;
        swift_bridgeObjectRetain_n();
        uint64_t v32 = v31;
        os_log_type_t v33 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v32, v33))
        {
          uint64_t v34 = swift_slowAlloc();
          uint64_t v35 = v6;
          uint64_t v36 = v5;
          uint64_t v37 = swift_slowAlloc();
          v47._countAndFlagsBits = v37;
          *(_DWORD *)uint64_t v34 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v34 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v29, &v47._countAndFlagsBits);
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_245728000, v32, v33, "%s", (uint8_t *)v34, 0xCu);
          swift_arrayDestroy();
          uint64_t v38 = v37;
          unint64_t v5 = v36;
          uint64_t v6 = v35;
          MEMORY[0x24C527CC0](v38, -1, -1);
          MEMORY[0x24C527CC0](v34, -1, -1);
          swift_release();
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_release();
          swift_bridgeObjectRelease_n();
        }

        char v18 = 0;
      }
    }
    while (1)
    {
      int64_t v10 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        break;
      }
      if (v10 >= v40) {
        goto LABEL_38;
      }
      unint64_t v9 = *(void *)&v39[8 * v10];
      ++v11;
      if (v9) {
        goto LABEL_22;
      }
    }
LABEL_41:
    __break(1u);
LABEL_42:
    swift_once();
  }
LABEL_38:
  swift_release();
}

uint64_t ResponderNode.log(action:data:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v25 = a1;
  unint64_t v26 = a2;
  swift_bridgeObjectRetain();
  if (String.count.getter() <= 11)
  {
    uint64_t result = String.count.getter();
    if (__OFSUB__(12, result))
    {
      __break(1u);
      return result;
    }
    v7._countAndFlagsBits = MEMORY[0x24C522AC0](32, 0xE100000000000000, 12 - result);
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
  }
  type metadata accessor for ViewResponder();
  uint64_t v8 = swift_dynamicCastClass();
  if (v8)
  {
    uint64_t v9 = v8 + 16;
    swift_beginAccess();
    uint64_t v10 = MEMORY[0x24C527E00](v9);
    swift_retain();
    uint64_t v11 = succinctDescription(of:)(v10);
    uint64_t v13 = v12;
    swift_unknownObjectRelease();
    swift_release();
  }
  else
  {
    uint64_t v13 = (void *)0xE300000000000000;
    uint64_t v11 = 7104878;
  }
  *(void *)&v24[0] = 0;
  *((void *)&v24[0] + 1) = 0xE000000000000000;
  v14._countAndFlagsBits = 32;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  v15._countAndFlagsBits = v11;
  v15._object = v13;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 540945696;
  v16._object = (void *)0xE400000000000000;
  String.append(_:)(v16);
  v17._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = 32;
  v18._object = (void *)0xE100000000000000;
  String.append(_:)(v18);
  v22._countAndFlagsBits = v4;
  _print_unlocked<A, B>(_:_:)();
  v19._countAndFlagsBits = 32;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
  v20._countAndFlagsBits = 0;
  v20._object = (void *)0xE000000000000000;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  outlined init with copy of Any?(a3, (uint64_t)&v22);
  if (v23)
  {
    outlined init with take of Any(&v22, v24);
    v22._countAndFlagsBits = 0;
    v22._object = (void *)0xE000000000000000;
    v21._countAndFlagsBits = 32;
    v21._object = (void *)0xE100000000000000;
    String.append(_:)(v21);
    _print_unlocked<A, B>(_:_:)();
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v22);
  }
  specialized static Log.eventDebug(_:)(v25, v26);
  return swift_bridgeObjectRelease();
}

uint64_t _EventDebugTriggers.rawValue.getter()
{
  return *(void *)v0;
}

SwiftUI::_EventDebugTriggers __swiftcall _EventDebugTriggers.init(rawValue:)(SwiftUI::_EventDebugTriggers rawValue)
{
  v1->rawuint64_t Value = rawValue.rawValue;
  return rawValue;
}

void static _EventDebugTriggers.responders.getter(void *a1@<X8>)
{
  *a1 = 2;
}

void static _EventDebugTriggers.sendEvents.getter(void *a1@<X8>)
{
  *a1 = 4;
}

void static _EventDebugTriggers.eventBindings.getter(void *a1@<X8>)
{
  *a1 = 8;
}

void static _EventDebugTriggers.eventPhases.getter(void *a1@<X8>)
{
  *a1 = 16;
}

void static _EventDebugTriggers.gestures.getter(void *a1@<X8>)
{
  *a1 = 32;
}

void static _EventDebugTriggers.hitTest.getter(void *a1@<X8>)
{
  *a1 = 64;
}

void static _EventDebugTriggers.all.getter(void *a1@<X8>)
{
  *a1 = -1;
}

SwiftUI::_EventDebugTriggers __swiftcall _EventDebugTriggers.init(environmentString:)(Swift::String environmentString)
{
  uint64_t v2 = v1;
  String.lowercased()();
  swift_bridgeObjectRelease();
  Swift::String_optional v3 = String.Iterator.next()();
  if (v3.value._object)
  {
    uint64_t countAndFlagsBits = v3.value._countAndFlagsBits;
    object = v3.value._object;
    uint64_t v6 = 0;
    while (1)
    {
      if (countAndFlagsBits == 42 && object == (void *)0xE100000000000000
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v6 = -1;
      }
      else if (countAndFlagsBits == 114 && object == (void *)0xE100000000000000 {
             || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      }
      {
        swift_bridgeObjectRelease();
        v6 |= 2uLL;
      }
      else if (countAndFlagsBits == 101 && object == (void *)0xE100000000000000 {
             || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      }
      {
        swift_bridgeObjectRelease();
        v6 |= 4uLL;
      }
      else if (countAndFlagsBits == 98 && object == (void *)0xE100000000000000 {
             || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      }
      {
        swift_bridgeObjectRelease();
        v6 |= 8uLL;
      }
      else if (countAndFlagsBits == 112 && object == (void *)0xE100000000000000 {
             || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      }
      {
        swift_bridgeObjectRelease();
        v6 |= 0x10uLL;
      }
      else if (countAndFlagsBits == 103 && object == (void *)0xE100000000000000 {
             || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      }
      {
        swift_bridgeObjectRelease();
        v6 |= 0x20uLL;
      }
      else
      {
        if (countAndFlagsBits == 104 && object == (void *)0xE100000000000000)
        {
          swift_bridgeObjectRelease();
LABEL_32:
          v6 |= 0x40uLL;
          goto LABEL_4;
        }
        char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v8) {
          goto LABEL_32;
        }
      }
LABEL_4:
      Swift::String_optional v7 = String.Iterator.next()();
      uint64_t countAndFlagsBits = v7.value._countAndFlagsBits;
      object = v7.value._object;
      if (!v7.value._object) {
        goto LABEL_34;
      }
    }
  }
  uint64_t v6 = 0;
LABEL_34:
  result.rawuint64_t Value = swift_bridgeObjectRelease();
  *uint64_t v2 = v6;
  return result;
}

void one-time initialization function for _eventDebugTriggers()
{
  if (getenv("SWIFTUI_EVENT_DEBUG"))
  {
    uint64_t v0 = String.init(cString:)();
  }
  else
  {
    id v2 = objc_msgSend(self, sel_standardUserDefaults);
    Swift::String_optional v3 = (void *)MEMORY[0x24C522820](0xD000000000000024, 0x8000000246224260);
    id v4 = objc_msgSend(v2, sel_stringForKey_, v3);

    if (!v4)
    {
      Swift::Int v8 = 0;
      goto LABEL_6;
    }
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;

    uint64_t v0 = v5;
    uint64_t v1 = v7;
  }
  _EventDebugTriggers.init(environmentString:)(*(Swift::String *)&v0);
  Swift::Int v8 = v9;
LABEL_6:
  _eventDebugTriggers.rawuint64_t Value = v8;
}

uint64_t outlined init with take of GestureDebug.Data?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Any?(0, &lazy cache variable for type metadata for GestureDebug.Data?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t _eventDebugTriggers.getter@<X0>(SwiftUI::_EventDebugTriggers *a1@<X8>)
{
  if (one-time initialization token for _eventDebugTriggers != -1) {
    swift_once();
  }
  uint64_t result = swift_beginAccess();
  a1->rawuint64_t Value = _eventDebugTriggers.rawValue;
  return result;
}

uint64_t _eventDebugTriggers.setter(Swift::Int *a1)
{
  Swift::Int v1 = *a1;
  if (one-time initialization token for _eventDebugTriggers != -1) {
    swift_once();
  }
  uint64_t result = swift_beginAccess();
  _eventDebugTriggers.rawuint64_t Value = v1;
  return result;
}

uint64_t (*_eventDebugTriggers.modify())()
{
  if (one-time initialization token for _eventDebugTriggers != -1) {
    swift_once();
  }
  swift_beginAccess();
  return DisplayList.GraphicsRenderer.platformViewMode.modify;
}

uint64_t closure #1 in printEvents(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OSSignpostID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *a1;
  char v9 = static os_signpost_type_t.event.getter();
  outlined init with copy of AnyTrackedValue(a2, (uint64_t)v32);
  static os_signpost_type_t.event.getter();
  if (kdebug_is_enabled())
  {
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    if (OS_os_log.signpostsEnabled.getter())
    {
      static OSSignpostID.exclusive.getter();
      type metadata accessor for _ViewList_Elements?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8], MEMORY[0x263F8E0F8]);
      uint64_t v10 = swift_allocObject();
      *(_OWORD *)(v10 + 16) = xmmword_2461BE2B0;
      v27[0] = v8;
      type metadata accessor for Any.Type();
      uint64_t v11 = String.init<A>(describing:)();
      uint64_t v13 = v12;
      uint64_t v14 = MEMORY[0x263F8D310];
      *(void *)(v10 + 56) = MEMORY[0x263F8D310];
      unint64_t v15 = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v10 + 64) = v15;
      *(void *)(v10 + 32) = v11;
      *(void *)(v10 + 40) = v13;
      uint64_t v16 = v33;
      uint64_t v17 = v34;
      __swift_project_boxed_opaque_existential_1(v32, v33);
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v17 + 8))(v27, v16, v17);
      uint64_t v18 = String.init<A>(describing:)();
      *(void *)(v10 + 96) = v14;
      *(void *)(v10 + 104) = v15;
      *(void *)(v10 + 72) = v18;
      *(void *)(v10 + 80) = v19;
      uint64_t v20 = v33;
      uint64_t v21 = v34;
      __swift_project_boxed_opaque_existential_1(v32, v33);
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v21 + 16))(v27, v20, v21);
      uint64_t v22 = MEMORY[0x263F8D5B8];
      uint64_t v23 = v27[0];
      *(void *)(v10 + 136) = MEMORY[0x263F8D538];
      *(void *)(v10 + 144) = v22;
      *(void *)(v10 + 112) = v23;
      char v31 = v9;
      uint64_t v29 = _signpostLog;
      uint64_t v30 = &dword_245728000;
      v27[0] = "EventHandling";
      v27[1] = 13;
      char v28 = 2;
      _OWORD v25[2] = "Event: %{public}@.%{public}@ at %3.6f";
      v25[3] = 37;
      char v26 = 2;
      v25[1] = v10;
      specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      swift_bridgeObjectRelease();
    }
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
}

uint64_t succinctDescription(of:)(uint64_t a1)
{
  if (!a1) {
    return 0x736F68206C696E28;
  }
  uint64_t v11 = a1;
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for CustomStringConvertible);
  swift_unknownObjectRetain_n();
  if (swift_dynamicCast())
  {
    outlined init with take of ScrollStateRequest(v9, (uint64_t)v12);
    __swift_project_boxed_opaque_existential_1(v12, v12[3]);
    uint64_t v2 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v4 = v3;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  }
  else
  {
    uint64_t v10 = 0;
    memset(v9, 0, sizeof(v9));
    outlined destroy of CustomStringConvertible?((uint64_t)v9);
    swift_getObjectType();
    uint64_t v2 = AGTypeID.description.getter();
    uint64_t v4 = v6;
  }
  v12[0] = 0;
  v12[1] = 0xE000000000000000;
  v7._uint64_t countAndFlagsBits = v2;
  v7._object = v4;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = 32;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  *(void *)&v9[0] = a1;
  _print_unlocked<A, B>(_:_:)();
  swift_unknownObjectRelease();
  return v12[0];
}

uint64_t _GestureInputs.InheritedPhase.description.getter()
{
  uint64_t v1 = *v0;
  if (*v0)
  {
    v2._uint64_t countAndFlagsBits = 0x2064656C696166;
    v2._object = (void *)0xE700000000000000;
    String.append(_:)(v2);
  }
  if ((v1 & 2) != 0)
  {
    v3._uint64_t countAndFlagsBits = 0x20657669746361;
    v3._object = (void *)0xE700000000000000;
    String.append(_:)(v3);
  }
  swift_bridgeObjectRetain();
  v4._uint64_t countAndFlagsBits = 93;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  return 8283;
}

uint64_t outlined destroy of CustomStringConvertible?(uint64_t a1)
{
  type metadata accessor for _ViewList_Elements?(0, &lazy cache variable for type metadata for CustomStringConvertible?, &lazy cache variable for type metadata for CustomStringConvertible, MEMORY[0x263F8E0C8], MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type _EventDebugTriggers and conformance _EventDebugTriggers()
{
  unint64_t result = lazy protocol witness table cache variable for type _EventDebugTriggers and conformance _EventDebugTriggers;
  if (!lazy protocol witness table cache variable for type _EventDebugTriggers and conformance _EventDebugTriggers)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EventDebugTriggers and conformance _EventDebugTriggers);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _EventDebugTriggers and conformance _EventDebugTriggers;
  if (!lazy protocol witness table cache variable for type _EventDebugTriggers and conformance _EventDebugTriggers)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EventDebugTriggers and conformance _EventDebugTriggers);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _EventDebugTriggers and conformance _EventDebugTriggers;
  if (!lazy protocol witness table cache variable for type _EventDebugTriggers and conformance _EventDebugTriggers)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EventDebugTriggers and conformance _EventDebugTriggers);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _EventDebugTriggers and conformance _EventDebugTriggers;
  if (!lazy protocol witness table cache variable for type _EventDebugTriggers and conformance _EventDebugTriggers)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EventDebugTriggers and conformance _EventDebugTriggers);
  }
  return result;
}

ValueMetadata *type metadata accessor for _EventDebugTriggers()
{
  return &type metadata for _EventDebugTriggers;
}

uint64_t specialized printGestures(data:host:)(uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for _eventDebugTriggers != -1) {
    swift_once();
  }
  uint64_t result = swift_beginAccess();
  if ((_eventDebugTriggers.rawValue & 0x20) != 0)
  {
    uint64_t result = *(unsigned int *)(a2 + 236);
    if (result != *MEMORY[0x263F288F8])
    {
      uint64_t Value = (long long *)AGGraphGetValue();
      long long v26 = *Value;
      long long v6 = Value[4];
      long long v8 = Value[1];
      long long v7 = Value[2];
      long long v29 = Value[3];
      long long v30 = v6;
      long long v27 = v8;
      long long v28 = v7;
      long long v9 = Value[8];
      long long v11 = Value[5];
      long long v10 = Value[6];
      long long v33 = Value[7];
      long long v34 = v9;
      long long v31 = v11;
      long long v32 = v10;
      *(void *)&v35[0] = 0x5345525554534547;
      *((void *)&v35[0] + 1) = 0xEA00000000002820;
      outlined retain of GestureDebug.Data((uint64_t)&v26);
      v12._uint64_t countAndFlagsBits = succinctDescription(of:)(a1);
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
      v13._uint64_t countAndFlagsBits = 41;
      v13._object = (void *)0xE100000000000000;
      String.append(_:)(v13);
      specialized static Log.eventDebug(_:)(*(uint64_t *)&v35[0], *((unint64_t *)&v35[0] + 1));
      swift_bridgeObjectRelease();
      long long v23 = v32;
      long long v24 = v33;
      long long v25 = v34;
      long long v19 = v28;
      long long v20 = v29;
      long long v21 = v30;
      long long v22 = v31;
      long long v17 = v26;
      long long v18 = v27;
      _s7SwiftUI15TextRenderLayerC6Layout33_FB86B422571764190CF2C7C4C92612D4LLVSgWOi0_(v35);
      outlined init with take of GestureDebug.Data?((uint64_t)v35, (uint64_t)v16);
      v14[0] = 0;
      v14[1] = 0xE000000000000000;
      char v15 = v26;
      GestureDebug.Data.printSubtree(parent:indent:)((uint64_t)v16, (uint64_t)v14);
      specialized static Log.eventDebug(_:)(0, 0xE000000000000000);
      return outlined release of GestureDebug.Data((uint64_t)&v26);
    }
  }
  return result;
}

{
  uint64_t result;
  long long *Value;
  long long v6;
  long long v7;
  long long v8;
  long long v9;
  long long v10;
  long long v11;
  Swift::String v12;
  Swift::String v13;
  void v14[2];
  char v15;
  unsigned char v16[144];
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  long long v32;
  long long v33;
  long long v34;
  _OWORD v35[9];

  if (one-time initialization token for _eventDebugTriggers != -1) {
    swift_once();
  }
  uint64_t result = swift_beginAccess();
  if ((_eventDebugTriggers.rawValue & 0x20) != 0)
  {
    uint64_t result = *(unsigned int *)(a2 + 296);
    if (result != *MEMORY[0x263F288F8])
    {
      uint64_t Value = (long long *)AGGraphGetValue();
      long long v26 = *Value;
      long long v6 = Value[4];
      long long v8 = Value[1];
      long long v7 = Value[2];
      long long v29 = Value[3];
      long long v30 = v6;
      long long v27 = v8;
      long long v28 = v7;
      long long v9 = Value[8];
      long long v11 = Value[5];
      long long v10 = Value[6];
      long long v33 = Value[7];
      long long v34 = v9;
      long long v31 = v11;
      long long v32 = v10;
      *(void *)&v35[0] = 0x5345525554534547;
      *((void *)&v35[0] + 1) = 0xEA00000000002820;
      outlined retain of GestureDebug.Data((uint64_t)&v26);
      v12._uint64_t countAndFlagsBits = succinctDescription(of:)(a1);
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
      v13._uint64_t countAndFlagsBits = 41;
      v13._object = (void *)0xE100000000000000;
      String.append(_:)(v13);
      specialized static Log.eventDebug(_:)(*(uint64_t *)&v35[0], *((unint64_t *)&v35[0] + 1));
      swift_bridgeObjectRelease();
      long long v23 = v32;
      long long v24 = v33;
      long long v25 = v34;
      long long v19 = v28;
      long long v20 = v29;
      long long v21 = v30;
      long long v22 = v31;
      long long v17 = v26;
      long long v18 = v27;
      _s7SwiftUI15TextRenderLayerC6Layout33_FB86B422571764190CF2C7C4C92612D4LLVSgWOi0_(v35);
      outlined init with take of GestureDebug.Data?((uint64_t)v35, (uint64_t)v16);
      v14[0] = 0;
      v14[1] = 0xE000000000000000;
      char v15 = v26;
      GestureDebug.Data.printSubtree(parent:indent:)((uint64_t)v16, (uint64_t)v14);
      specialized static Log.eventDebug(_:)(0, 0xE000000000000000);
      return outlined release of GestureDebug.Data((uint64_t)&v26);
    }
  }
  return result;
}

uint64_t _ColorMatrix.init(_:premultiplied:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  specialized _ColorMatrix.init(_:premultiplied:)(a1, a2, (uint64_t)v5);
  return outlined init with take of _ColorMatrix?((uint64_t)v5, a3);
}

__n128 static _ColorMatrix.* infix(_:_:)@<Q0>(_OWORD *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>, int8x16_t a4@<Q0>, int32x4_t a5@<Q2>, int32x4_t a6@<Q6>, int32x4_t a7@<Q7>)
{
  specialized static _ColorMatrix.* infix(_:_:)(a1, a2, (uint64_t)v10, a4, a5, a6, a7);
  long long v8 = v10[3];
  *(_OWORD *)(a3 + 32) = v10[2];
  *(_OWORD *)(a3 + 48) = v8;
  *(_OWORD *)(a3 + 64) = v10[4];
  __n128 result = (__n128)v10[1];
  *(_OWORD *)a3 = v10[0];
  *(__n128 *)(a3 + 16) = result;
  return result;
}

BOOL static _ColorMatrix.== infix(_:_:)(float *a1, float *a2)
{
  return specialized static ColorMatrix.== infix(_:_:)(a1, a2);
}

Swift::Void __swiftcall _ColorMatrix.add(_:)(SwiftUI::_ColorMatrix *a1)
{
  float32x4_t v2 = vaddq_f32(*(float32x4_t *)&a1->m15, v1[1]);
  *uint64_t v1 = vaddq_f32(*(float32x4_t *)&a1->m11, *v1);
  v1[1] = v2;
  float32x4_t v3 = vaddq_f32(*(float32x4_t *)&a1->m33, v1[3]);
  v1[2] = vaddq_f32(*(float32x4_t *)&a1->m24, v1[2]);
  v1[3] = v3;
  v1[4] = vaddq_f32(*(float32x4_t *)&a1->m42, v1[4]);
}

Swift::Void __swiftcall _ColorMatrix.subtract(_:)(SwiftUI::_ColorMatrix *a1)
{
  float32x4_t v2 = vsubq_f32(v1[1], *(float32x4_t *)&a1->m15);
  *uint64_t v1 = vsubq_f32(*v1, *(float32x4_t *)&a1->m11);
  v1[1] = v2;
  float32x4_t v3 = vsubq_f32(v1[3], *(float32x4_t *)&a1->m33);
  v1[2] = vsubq_f32(v1[2], *(float32x4_t *)&a1->m24);
  v1[3] = v3;
  v1[4] = vsubq_f32(v1[4], *(float32x4_t *)&a1->m42);
}

Swift::Void __swiftcall _ColorMatrix.negate()()
{
  float32x4_t v1 = vnegq_f32(v0[1]);
  *uint64_t v0 = vnegq_f32(*v0);
  v0[1] = v1;
  float32x4_t v2 = vnegq_f32(v0[3]);
  v0[2] = vnegq_f32(v0[2]);
  v0[3] = v2;
  v0[4] = vnegq_f32(v0[4]);
}

Swift::Void __swiftcall _ColorMatrix.scale(by:)(Swift::Double by)
{
  float v2 = by;
  float32x4_t v3 = vmulq_n_f32(v1[1], v2);
  *float32x4_t v1 = vmulq_n_f32(*v1, v2);
  v1[1] = v3;
  float32x4_t v4 = vmulq_n_f32(v1[3], v2);
  v1[2] = vmulq_n_f32(v1[2], v2);
  v1[3] = v4;
  v1[4] = vmulq_n_f32(v1[4], v2);
}

double _ColorMatrix.magnitudeSquared.getter()
{
  return (float)((float)((float)((float)((float)((float)((float)((float)(*v0 * *v0) + (float)(v0[1] * v0[1]))
                                                       + (float)(v0[2] * v0[2]))
                                               + (float)(v0[3] * v0[3]))
                                       + (float)(v0[4] * v0[4]))
                               + (float)((float)((float)((float)((float)(v0[5] * v0[5]) + (float)(v0[6] * v0[6]))
                                                       + (float)(v0[7] * v0[7]))
                                               + (float)(v0[8] * v0[8]))
                                       + (float)(v0[9] * v0[9])))
                       + (float)((float)((float)((float)((float)(v0[10] * v0[10]) + (float)(v0[11] * v0[11]))
                                               + (float)(v0[12] * v0[12]))
                                       + (float)(v0[13] * v0[13]))
                               + (float)(v0[14] * v0[14])))
               + (float)((float)((float)((float)((float)(v0[15] * v0[15]) + (float)(v0[16] * v0[16]))
                                       + (float)(v0[17] * v0[17]))
                               + (float)(v0[18] * v0[18]))
                       + (float)(v0[19] * v0[19])));
}

void __swiftcall _ColorMatrix.init(_:)(SwiftUI::_ColorMatrix *__return_ptr retstr, SwiftUI::ColorMatrix *a2)
{
  long long v2 = *(_OWORD *)&a2->r5;
  *(_OWORD *)&retstr->m11 = *(_OWORD *)&a2->r1;
  *(_OWORD *)&retstr->m15 = v2;
  long long v3 = *(_OWORD *)&a2->b3;
  *(_OWORD *)&retstr->m24 = *(_OWORD *)&a2->g4;
  *(_OWORD *)&retstr->m33 = v3;
  *(_OWORD *)&retstr->m42 = *(_OWORD *)&a2->a2;
}

float ColorMatrix.r1.getter()
{
  return *(float *)v0;
}

void ColorMatrix.r1.setter(float a1)
{
  *float32x4_t v1 = a1;
}

uint64_t (*ColorMatrix.r1.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

float ColorMatrix.r2.getter()
{
  return *(float *)(v0 + 4);
}

void ColorMatrix.r2.setter(float a1)
{
  *(float *)(v1 + 4) = a1;
}

uint64_t (*ColorMatrix.r2.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

float ColorMatrix.r3.getter()
{
  return *(float *)(v0 + 8);
}

void ColorMatrix.r3.setter(float a1)
{
  *(float *)(v1 + 8) = a1;
}

uint64_t (*ColorMatrix.r3.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

float ColorMatrix.r4.getter()
{
  return *(float *)(v0 + 12);
}

void ColorMatrix.r4.setter(float a1)
{
  *(float *)(v1 + 12) = a1;
}

uint64_t (*ColorMatrix.r4.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

float ColorMatrix.r5.getter()
{
  return *(float *)(v0 + 16);
}

void ColorMatrix.r5.setter(float a1)
{
  *(float *)(v1 + 16) = a1;
}

uint64_t (*ColorMatrix.r5.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

float ColorMatrix.g1.getter()
{
  return *(float *)(v0 + 20);
}

void ColorMatrix.g1.setter(float a1)
{
  *(float *)(v1 + 20) = a1;
}

uint64_t (*ColorMatrix.g1.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

float ColorMatrix.g2.getter()
{
  return *(float *)(v0 + 24);
}

void ColorMatrix.g2.setter(float a1)
{
  *(float *)(v1 + 24) = a1;
}

uint64_t (*ColorMatrix.g2.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

float ColorMatrix.g3.getter()
{
  return *(float *)(v0 + 28);
}

void ColorMatrix.g3.setter(float a1)
{
  *(float *)(v1 + 28) = a1;
}

uint64_t (*ColorMatrix.g3.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

float ColorMatrix.g4.getter()
{
  return *(float *)(v0 + 32);
}

void ColorMatrix.g4.setter(float a1)
{
  *(float *)(v1 + 32) = a1;
}

uint64_t (*ColorMatrix.g4.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

float ColorMatrix.g5.getter()
{
  return *(float *)(v0 + 36);
}

void ColorMatrix.g5.setter(float a1)
{
  *(float *)(v1 + 36) = a1;
}

uint64_t (*ColorMatrix.g5.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

float ColorMatrix.b1.getter()
{
  return *(float *)(v0 + 40);
}

void ColorMatrix.b1.setter(float a1)
{
  *(float *)(v1 + 40) = a1;
}

uint64_t (*ColorMatrix.b1.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

float ColorMatrix.b2.getter()
{
  return *(float *)(v0 + 44);
}

void ColorMatrix.b2.setter(float a1)
{
  *(float *)(v1 + 44) = a1;
}

uint64_t (*ColorMatrix.b2.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

float ColorMatrix.b3.getter()
{
  return *(float *)(v0 + 48);
}

void ColorMatrix.b3.setter(float a1)
{
  *(float *)(v1 + 48) = a1;
}

uint64_t (*ColorMatrix.b3.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

float ColorMatrix.b4.getter()
{
  return *(float *)(v0 + 52);
}

void ColorMatrix.b4.setter(float a1)
{
  *(float *)(v1 + 52) = a1;
}

uint64_t (*ColorMatrix.b4.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

float ColorMatrix.b5.getter()
{
  return *(float *)(v0 + 56);
}

void ColorMatrix.b5.setter(float a1)
{
  *(float *)(v1 + 56) = a1;
}

uint64_t (*ColorMatrix.b5.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

float ColorMatrix.a1.getter()
{
  return *(float *)(v0 + 60);
}

void ColorMatrix.a1.setter(float a1)
{
  *(float *)(v1 + 60) = a1;
}

uint64_t (*ColorMatrix.a1.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

float ColorMatrix.a2.getter()
{
  return *(float *)(v0 + 64);
}

void ColorMatrix.a2.setter(float a1)
{
  *(float *)(v1 + 64) = a1;
}

uint64_t (*ColorMatrix.a2.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

float ColorMatrix.a3.getter()
{
  return *(float *)(v0 + 68);
}

void ColorMatrix.a3.setter(float a1)
{
  *(float *)(v1 + 68) = a1;
}

uint64_t (*ColorMatrix.a3.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

float ColorMatrix.a4.getter()
{
  return *(float *)(v0 + 72);
}

void ColorMatrix.a4.setter(float a1)
{
  *(float *)(v1 + 72) = a1;
}

uint64_t (*ColorMatrix.a4.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

float ColorMatrix.a5.getter()
{
  return *(float *)(v0 + 76);
}

void ColorMatrix.a5.setter(float a1)
{
  *(float *)(v1 + 76) = a1;
}

uint64_t (*ColorMatrix.a5.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double _ColorMatrix.init()@<D0>(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 1065353216;
  *(void *)(a1 + 12) = 0;
  *(void *)(a1 + 4) = 0;
  *(void *)(a1 + 20) = 0x3F80000000000000;
  *(void *)(a1 + 36) = 0;
  *(void *)(a1 + 28) = 0;
  *(void *)(a1 + 44) = 0x3F80000000000000;
  *(void *)(a1 + 60) = 0;
  *(void *)(a1 + 52) = 0;
  *(_DWORD *)(a1 + 68) = 0;
  *(void *)&double result = 1065353216;
  *(void *)(a1 + 72) = 1065353216;
  return result;
}

BOOL static ColorMatrix.== infix(_:_:)(float *a1, float *a2)
{
  return specialized static ColorMatrix.== infix(_:_:)(a1, a2);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ColorMatrix(_OWORD *a1, long long *a2)
{
  long long v2 = a1[3];
  void v8[2] = a1[2];
  v8[3] = v2;
  long long v3 = a1[4];
  long long v4 = a1[1];
  v8[0] = *a1;
  v8[1] = v4;
  long long v5 = a2[3];
  long long v9[2] = a2[2];
  v9[3] = v5;
  v9[4] = a2[4];
  long long v6 = *a2;
  v9[1] = a2[1];
  void v8[4] = v3;
  v9[0] = v6;
  return specialized static ColorMatrix.== infix(_:_:)((float *)v8, (float *)v9);
}

float _ColorMatrix.m11.getter()
{
  return *(float *)v0;
}

void _ColorMatrix.m11.setter(float a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*_ColorMatrix.m11.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_ColorMatrix.m12.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_ColorMatrix.m13.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_ColorMatrix.m14.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_ColorMatrix.m15.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_ColorMatrix.m21.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_ColorMatrix.m22.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_ColorMatrix.m23.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_ColorMatrix.m24.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_ColorMatrix.m25.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_ColorMatrix.m31.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_ColorMatrix.m32.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_ColorMatrix.m33.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_ColorMatrix.m34.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_ColorMatrix.m35.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_ColorMatrix.m41.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_ColorMatrix.m42.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_ColorMatrix.m43.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_ColorMatrix.m44.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*_ColorMatrix.m45.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void _ColorMatrix.init(color:in:)(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = a2[1];
  v20[0] = *a2;
  v20[1] = v4;
  float v5 = (*(float (**)(void *))(*(void *)a1 + 104))(v20);
  float v7 = v6;
  float v9 = v8;
  int v11 = v10;
  swift_release();
  swift_release();
  float v12 = -v5;
  if (v5 > 0.0) {
    float v12 = v5;
  }
  if (v12 <= 0.0031308)
  {
    float v13 = v12 * 12.92;
  }
  else
  {
    float v13 = 1.0;
    if (v12 != 1.0) {
      float v13 = (float)(powf(v12, 0.41667) * 1.055) + -0.055;
    }
  }
  float v14 = -v7;
  if (v7 > 0.0) {
    float v14 = v7;
  }
  if (v14 <= 0.0031308)
  {
    float v15 = v14 * 12.92;
  }
  else
  {
    float v15 = 1.0;
    if (v14 != 1.0) {
      float v15 = (float)(powf(v14, 0.41667) * 1.055) + -0.055;
    }
  }
  if (v9 <= 0.0) {
    float v16 = -v9;
  }
  else {
    float v16 = v9;
  }
  if (v16 <= 0.0031308)
  {
    swift_release();
    float v17 = v16 * 12.92;
  }
  else
  {
    swift_release();
    float v17 = 1.0;
    if (v16 != 1.0) {
      float v17 = (float)(powf(v16, 0.41667) * 1.055) + -0.055;
    }
  }
  float v18 = -v15;
  if (v7 > 0.0) {
    float v18 = v15;
  }
  float v19 = -v13;
  if (v5 > 0.0) {
    float v19 = v13;
  }
  *(float *)a3 = v19;
  *(void *)(a3 + 12) = 0;
  *(void *)(a3 + 4) = 0;
  *(_DWORD *)(a3 + 20) = 0;
  *(float *)(a3 + 24) = v18;
  if (v9 <= 0.0) {
    float v17 = -v17;
  }
  *(void *)(a3 + 36) = 0;
  *(void *)(a3 + 28) = 0;
  *(_DWORD *)(a3 + 44) = 0;
  *(float *)(a3 + 48) = v17;
  *(void *)(a3 + 60) = 0;
  *(void *)(a3 + 52) = 0;
  *(_DWORD *)(a3 + 68) = 0;
  *(_DWORD *)(a3 + 72) = v11;
  *(_DWORD *)(a3 + 76) = 0;
}

uint64_t _ColorMatrix.encode(to:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
  UnkeyedEncodingContainer.encodeRow(_:)();
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    UnkeyedEncodingContainer.encodeRow(_:)();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    UnkeyedEncodingContainer.encodeRow(_:)();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    UnkeyedEncodingContainer.encodeRow(_:)();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

uint64_t UnkeyedEncodingContainer.encodeRow(_:)()
{
  uint64_t result = dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  if (!v0)
  {
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    return dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  }
  return result;
}

__n128 _ColorMatrix.init(from:)@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  specialized _ColorMatrix.init(from:)(a1, (uint64_t)v6);
  if (!v2)
  {
    long long v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = v6[4];
    __n128 result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

{
  uint64_t v2;
  __n128 result;
  long long v5;
  uint64_t v6;
  unsigned char v7[80];
  uint64_t v8;

  float v8 = *MEMORY[0x263EF8340];
  *(_DWORD *)float v7 = 1065353216;
  *(_OWORD *)&v7[4] = 0uLL;
  *(void *)&v7[20] = 0x3F80000000000000;
  *(_OWORD *)&v7[28] = 0uLL;
  *(_OWORD *)&v7[44] = 0x3F80000000000000uLL;
  *(void *)&v7[60] = 0;
  *(_DWORD *)&v7[68] = 0;
  *(void *)&unsigned char v7[72] = 1065353216;
  closure #1 in _ColorMatrix.init(from:)((unint64_t)v7, a1, &v6);
  if (!v2)
  {
    long long v5 = *(_OWORD *)&v7[48];
    *(_OWORD *)(a2 + 32) = *(_OWORD *)&v7[32];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = *(_OWORD *)&v7[64];
    __n128 result = *(__n128 *)&v7[16];
    *(_OWORD *)a2 = *(_OWORD *)v7;
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t UnkeyedDecodingContainer.decodeRow()@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
  if (!v1)
  {
    int v5 = v4;
    dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    int v7 = v6;
    dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    int v9 = v8;
    dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    int v11 = v10;
    uint64_t result = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    *a1 = v5;
    a1[1] = v7;
    a1[2] = v9;
    a1[3] = v11;
    a1[4] = v12;
  }
  return result;
}

__n128 protocol witness for Decodable.init(from:) in conformance _ColorMatrix@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  specialized _ColorMatrix.init(from:)(a1, (uint64_t)v6);
  if (!v2)
  {
    long long v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = v6[4];
    __n128 result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance _ColorMatrix(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
  UnkeyedEncodingContainer.encodeRow(_:)();
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    UnkeyedEncodingContainer.encodeRow(_:)();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    UnkeyedEncodingContainer.encodeRow(_:)();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    UnkeyedEncodingContainer.encodeRow(_:)();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

void __swiftcall _ColorMatrix.init(row1:row2:row3:row4:)(SwiftUI::_ColorMatrix *__return_ptr retstr, Swift::tuple_Float_Float_Float_Float_Float *row1, Swift::tuple_Float_Float_Float_Float_Float *row2, Swift::tuple_Float_Float_Float_Float_Float *row3, Swift::tuple_Float_Float_Float_Float_Float *row4)
{
  retstr->m11 = v5;
  retstr->m12 = v6;
  retstr->m13 = v7;
  retstr->m14 = v8;
  retstr->m15 = v9;
  retstr->m21 = v10;
  retstr->m22 = v11;
  retstr->m23 = v12;
  *(_OWORD *)&retstr->m24 = v13;
  *(_OWORD *)&retstr->m33 = v14;
  *(_OWORD *)&retstr->m42 = v15;
}

__n128 _ColorMatrix.init(colorMultiply:premultiplied:)@<Q0>(char a1@<W0>, uint64_t a2@<X8>, float a3@<S0>, float a4@<S1>, float a5@<S2>, float a6@<S3>)
{
  specialized _ColorMatrix.init(colorMultiply:premultiplied:)(a1, (uint64_t)v9, a3, a4, a5, a6);
  long long v7 = v9[3];
  *(_OWORD *)(a2 + 32) = v9[2];
  *(_OWORD *)(a2 + 48) = v7;
  *(_OWORD *)(a2 + 64) = v9[4];
  __n128 result = (__n128)v9[1];
  *(_OWORD *)a2 = v9[0];
  *(__n128 *)(a2 + 16) = result;
  return result;
}

void __swiftcall _ColorMatrix.init(hueRotation:)(SwiftUI::_ColorMatrix *__return_ptr retstr, SwiftUI::Angle hueRotation)
{
  specialized _ColorMatrix.init(hueRotation:)((uint64_t)v5, hueRotation.radians);
  long long v3 = v5[3];
  *(_OWORD *)&retstr->m24 = v5[2];
  *(_OWORD *)&retstr->m33 = v3;
  *(_OWORD *)&retstr->m42 = v5[4];
  long long v4 = v5[1];
  *(_OWORD *)&retstr->m11 = v5[0];
  *(_OWORD *)&retstr->m15 = v4;
}

void __swiftcall _ColorMatrix.init(brightness:)(SwiftUI::_ColorMatrix *__return_ptr retstr, Swift::Double brightness)
{
  Swift::Float v2 = brightness;
  *(_OWORD *)&retstr->m11 = xmmword_2461ECA30;
  retstr->m15 = v2;
  *(_OWORD *)&retstr->m21 = xmmword_246203150;
  retstr->m25 = v2;
  *(_OWORD *)&retstr->m31 = xmmword_246203160;
  retstr->m35 = v2;
  *(_OWORD *)&retstr->m41 = xmmword_2461C6A90;
  retstr->m45 = 0.0;
}

void __swiftcall _ColorMatrix.init(contrast:)(SwiftUI::_ColorMatrix *__return_ptr retstr, Swift::Double contrast)
{
  Swift::Float v2 = contrast;
  retstr->m11 = v2;
  Swift::Float v3 = (float)(1.0 - v2) * 0.5;
  *(void *)&retstr->m12 = 0;
  retstr->m14 = 0.0;
  retstr->m15 = v3;
  retstr->m21 = 0.0;
  retstr->m22 = v2;
  *(void *)&retstr->m23 = 0;
  retstr->m25 = v3;
  *(void *)&retstr->m31 = 0;
  retstr->m33 = v2;
  retstr->m34 = 0.0;
  retstr->m35 = v3;
  *(_OWORD *)&retstr->m41 = xmmword_2461C6A90;
  retstr->m45 = 0.0;
}

double _ColorMatrix.init(luminanceToAlpha:)@<D0>(uint64_t a1@<X8>)
{
  *(_OWORD *)(a1 + 44) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  double result = 0.000352343834;
  *(_OWORD *)(a1 + 60) = xmmword_246203170;
  *(_DWORD *)(a1 + 76) = 0;
  return result;
}

void __swiftcall _ColorMatrix.init(colorInvert:)(SwiftUI::_ColorMatrix *__return_ptr retstr, Swift::Float colorInvert)
{
  Swift::Float v2 = 1.0 - (float)(colorInvert + colorInvert);
  retstr->m11 = v2;
  *(void *)&retstr->m12 = 0;
  retstr->m14 = 0.0;
  retstr->m15 = colorInvert;
  retstr->m21 = 0.0;
  retstr->m22 = v2;
  *(void *)&retstr->m23 = 0;
  retstr->m25 = colorInvert;
  *(void *)&retstr->m31 = 0;
  retstr->m33 = v2;
  retstr->m34 = 0.0;
  retstr->m35 = colorInvert;
  *(_OWORD *)&retstr->m41 = xmmword_2461C6A90;
  retstr->m45 = 0.0;
}

__n128 _ColorMatrix.init(colorMonochrome:amount:bias:)@<Q0>(uint64_t a1@<X8>, float a2@<S0>, float a3@<S1>, float a4@<S2>, float a5@<S3>, float a6@<S4>, float a7@<S5>)
{
  specialized _ColorMatrix.init(colorMonochrome:amount:bias:)((uint64_t)v10, a2, a3, a4, a5, a6, a7);
  long long v8 = v10[3];
  *(_OWORD *)(a1 + 32) = v10[2];
  *(_OWORD *)(a1 + 48) = v8;
  *(_OWORD *)(a1 + 64) = v10[4];
  __n128 result = (__n128)v10[1];
  *(_OWORD *)a1 = v10[0];
  *(__n128 *)(a1 + 16) = result;
  return result;
}

void __swiftcall _ColorMatrix.init(floatArray:)(SwiftUI::_ColorMatrix *__return_ptr retstr, Swift::OpaquePointer floatArray)
{
  unint64_t v3 = *((void *)floatArray._rawValue + 2);
  if (!v3)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v3 == 1)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v3 < 3)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (v3 == 3)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (v3 < 5)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (v3 == 5)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (v3 < 7)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v3 == 7)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v3 < 9)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (v3 == 9)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (v3 < 0xB)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  if (v3 == 11)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (v3 < 0xD)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v3 == 13)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if (v3 < 0xF)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if (v3 == 15)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if (v3 < 0x11)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  if (v3 == 17)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  if (v3 < 0x13)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (v3 != 19)
  {
    Swift::Float v4 = *((float *)floatArray._rawValue + 8);
    Swift::Float v5 = *((float *)floatArray._rawValue + 9);
    Swift::Float v6 = *((float *)floatArray._rawValue + 10);
    Swift::Float v7 = *((float *)floatArray._rawValue + 11);
    Swift::Float v8 = *((float *)floatArray._rawValue + 12);
    Swift::Float v9 = *((float *)floatArray._rawValue + 13);
    Swift::Float v10 = *((float *)floatArray._rawValue + 14);
    Swift::Float v11 = *((float *)floatArray._rawValue + 15);
    Swift::Float v21 = *((float *)floatArray._rawValue + 17);
    Swift::Float v22 = *((float *)floatArray._rawValue + 16);
    Swift::Float v19 = *((float *)floatArray._rawValue + 19);
    Swift::Float v20 = *((float *)floatArray._rawValue + 18);
    Swift::Float v17 = *((float *)floatArray._rawValue + 21);
    Swift::Float v18 = *((float *)floatArray._rawValue + 20);
    Swift::Float v15 = *((float *)floatArray._rawValue + 23);
    Swift::Float v16 = *((float *)floatArray._rawValue + 22);
    Swift::Float v13 = *((float *)floatArray._rawValue + 25);
    Swift::Float v14 = *((float *)floatArray._rawValue + 24);
    uint64_t v12 = *((void *)floatArray._rawValue + 13);
    swift_bridgeObjectRelease();
    retstr->m11 = v4;
    retstr->m12 = v5;
    retstr->m13 = v6;
    retstr->m14 = v7;
    retstr->m15 = v8;
    retstr->m21 = v9;
    retstr->m22 = v10;
    retstr->m23 = v11;
    retstr->m24 = v22;
    retstr->m25 = v21;
    retstr->m31 = v20;
    retstr->m32 = v19;
    retstr->m33 = v18;
    retstr->m34 = v17;
    retstr->m35 = v16;
    retstr->m41 = v15;
    retstr->m42 = v14;
    retstr->m43 = v13;
    *(void *)&retstr->m44 = v12;
    return;
  }
LABEL_41:
  __break(1u);
}

__n128 _ColorMatrix.floatArray.getter()
{
  type metadata accessor for EdgeInsets?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Float>, MEMORY[0x263F8D5C8], MEMORY[0x263F8E0F8]);
  uint64_t v1 = swift_allocObject();
  long long v2 = *v0;
  long long v3 = v0[1];
  *(_OWORD *)(v1 + 16) = xmmword_246203180;
  *(_OWORD *)(v1 + 32) = v2;
  long long v4 = v0[2];
  long long v5 = v0[3];
  *(_OWORD *)(v1 + 48) = v3;
  *(_OWORD *)(v1 + 64) = v4;
  __n128 result = (__n128)v0[4];
  *(_OWORD *)(v1 + 80) = v5;
  *(__n128 *)(v1 + 96) = result;
  return result;
}

uint64_t _ColorMatrix._apply(to:)(uint64_t result)
{
  long long v2 = v1[1];
  long long v3 = v1[2];
  long long v4 = v1[3];
  long long v5 = v1[4];
  uint64_t v7 = *(void *)result;
  uint64_t v6 = *(void *)(result + 8);
  uint64_t v8 = result;
  switch(*(unsigned char *)(result + 24))
  {
    case 1:
      if (v6 != *(void *)(result + 16))
      {
        v15[0] = *v1;
        v15[1] = v2;
        v15[2] = v3;
        v15[3] = v4;
        v15[4] = v5;
        char v16 = 5;
        int v17 = 1065353216;
        uint64_t v18 = 0;
        char v19 = -1;
        uint64_t v9 = MEMORY[0x263F8EE78];
        uint64_t v20 = MEMORY[0x263F8EE78];
        unsigned __int8 v14 = v7;
        int v10 = *(unsigned __int8 *)(result + 40);
        if (v10 == 1)
        {
          uint64_t v9 = *(void *)(result + 32);
          uint64_t v11 = 0;
        }
        else
        {
          uint64_t v11 = *(void *)(result + 32);
        }
        if (v10 == 1) {
          char v12 = 5;
        }
        else {
          char v12 = *(unsigned char *)(result + 40);
        }
        uint64_t v13 = v9;
        _ShapeStyle_Pack.subscript.setter((uint64_t *)v15, &v14, v6);
        __n128 result = outlined consume of _ShapeStyle_Shape.Result(v11, v12);
        *(void *)(v8 + 32) = v13;
        *(unsigned char *)(v8 + 40) = 1;
      }
      break;
    case 2:
    case 3:
    case 4:
    case 5:
      return result;
    default:
      __n128 result = outlined consume of _ShapeStyle_Shape.Result(*(void *)(result + 32), *(unsigned char *)(result + 40));
      *(void *)(v8 + 32) = 0;
      *(unsigned char *)(v8 + 40) = 0;
      break;
  }
  return result;
}

float *_ColorMatrix.encode(to:)(void *a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  long long v2 = v1[3];
  v5[2] = v1[2];
  v5[3] = v2;
  v5[4] = v1[4];
  long long v3 = v1[1];
  v5[0] = *v1;
  v5[1] = v3;
  return closure #1 in _ColorMatrix.encode(to:)((float *)v5, a1);
}

float *closure #1 in _ColorMatrix.encode(to:)(float *result, void *a2)
{
  long long v3 = result;
  unint64_t v4 = 0;
  unint64_t v5 = 1;
  while (1)
  {
    unint64_t v8 = __ROR8__(v4, 1);
    float v9 = 0.0;
    if (v8 <= 9) {
      float v9 = flt_246203320[v8];
    }
    float v6 = v3[v4];
    if (v6 == v9) {
      goto LABEL_3;
    }
    unint64_t v10 = (8 * v5) | 5;
    uint64_t v11 = a2[1];
    if (v10 > 0x7F)
    {
      __n128 result = (float *)(v11 + 2);
      if (__OFADD__(v11, 2)) {
        goto LABEL_27;
      }
    }
    else
    {
      if (v11 < a2[2])
      {
        *(unsigned char *)(*a2 + v11) = v10;
        uint64_t v12 = v11 + 1;
        a2[1] = v12;
        goto LABEL_16;
      }
      __n128 result = (float *)(v11 + 1);
      if (__OFADD__(v11, 1)) {
        goto LABEL_27;
      }
    }
    if (a2[2] < (uint64_t)result)
    {
      uint64_t v13 = (unsigned char *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
    }
    else
    {
      a2[1] = result;
      uint64_t v13 = (unsigned char *)(*a2 + v11);
    }
    LOBYTE(v14) = (8 * v5) & 0x78 | 5;
    if (v5 >= 0x10)
    {
      unint64_t v15 = 8 * v5;
      do
      {
        char v16 = v14 | 0x80;
        uint64_t v14 = (v15 >> 7) & 0x7F;
        *v13++ = v16;
        BOOL v17 = v15 >= 0x4000;
        v15 >>= 7;
      }
      while (v17);
    }
    *uint64_t v13 = v14;
    uint64_t v12 = a2[1];
LABEL_16:
    __n128 result = (float *)(v12 + 4);
    if (__OFADD__(v12, 4)) {
      break;
    }
    if (a2[2] < (uint64_t)result)
    {
      __n128 result = (float *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
    }
    else
    {
      a2[1] = result;
      __n128 result = (float *)(*a2 + v12);
    }
    *__n128 result = v6;
LABEL_3:
    unint64_t v4 = v5;
    if (v5++ == 20) {
      return result;
    }
  }
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

unint64_t closure #1 in _ColorMatrix.init(from:)(unint64_t result, void *a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  unint64_t v6 = a2[1];
  if (v6 >= a2[2])
  {
LABEL_34:
    a2[3] = 0;
    return result;
  }
  unint64_t v8 = result;
  while (1)
  {
    unint64_t v10 = a2[3];
    if (v10)
    {
      unint64_t v11 = a2[4];
      if (v6 < v11) {
        goto LABEL_12;
      }
      if (v11 < v6) {
        break;
      }
      a2[3] = 0;
    }
    __n128 result = ProtobufDecoder.decodeVarint()();
    if (v3) {
      goto LABEL_33;
    }
    unint64_t v10 = result;
    if (result <= 7) {
      break;
    }
LABEL_12:
    if (v10 <= 0xA7)
    {
      uint64_t v12 = (v10 >> 3) - 1;
      if (!(v10 >> 3))
      {
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
        JUMPOUT(0x246013144);
      }
      if (v12 < 0) {
        goto LABEL_36;
      }
      if ((v10 & 7) == 2)
      {
        __n128 result = ProtobufDecoder.decodeVarint()();
        if (v3) {
          goto LABEL_33;
        }
        if ((result & 0x8000000000000000) != 0) {
          goto LABEL_37;
        }
        uint64_t v13 = (int *)a2[1];
        unint64_t v14 = a2[2];
        if (v14 < (unint64_t)v13 + result) {
          break;
        }
        a2[3] = v10 & 0xFFFFFFFFFFFFFFF8 | 5;
        a2[4] = (char *)v13 + result;
      }
      else
      {
        if ((v10 & 7) != 5) {
          break;
        }
        uint64_t v13 = (int *)a2[1];
        unint64_t v14 = a2[2];
      }
      if (v14 < (unint64_t)(v13 + 1)) {
        break;
      }
      int v15 = *v13;
      a2[1] = v13 + 1;
      *(_DWORD *)(v8 + 4 * v12) = v15;
    }
    else
    {
      switch(v10 & 7)
      {
        case 0uLL:
          __n128 result = ProtobufDecoder.decodeVarint()();
          if (v3) {
            goto LABEL_33;
          }
          break;
        case 1uLL:
          unint64_t v9 = a2[1] + 8;
          if (a2[2] >= v9) {
            goto LABEL_4;
          }
          goto LABEL_32;
        case 2uLL:
          __n128 result = ProtobufDecoder.decodeVarint()();
          if (v3) {
            goto LABEL_33;
          }
          if ((result & 0x8000000000000000) != 0) {
            goto LABEL_38;
          }
          unint64_t v9 = a2[1] + result;
          if (a2[2] < v9) {
            goto LABEL_32;
          }
LABEL_4:
          a2[1] = v9;
          break;
        case 5uLL:
          unint64_t v9 = a2[1] + 4;
          if (a2[2] < v9) {
            goto LABEL_32;
          }
          goto LABEL_4;
        default:
          goto LABEL_32;
      }
    }
    unint64_t v6 = a2[1];
    if (v6 >= a2[2]) {
      goto LABEL_34;
    }
  }
LABEL_32:
  lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
  uint64_t v4 = swift_allocError();
  __n128 result = swift_willThrow();
LABEL_33:
  *a3 = v4;
  return result;
}

float *protocol witness for ProtobufEncodableMessage.encode(to:) in conformance _ColorMatrix(void *a1)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  long long v2 = v1[3];
  v5[2] = v1[2];
  v5[3] = v2;
  v5[4] = v1[4];
  long long v3 = v1[1];
  v5[0] = *v1;
  v5[1] = v3;
  return closure #1 in _ColorMatrix.encode(to:)((float *)v5, a1);
}

__n128 protocol witness for ProtobufDecodableMessage.init(from:) in conformance _ColorMatrix@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  *(_DWORD *)uint64_t v7 = 1065353216;
  *(_OWORD *)&v7[4] = 0uLL;
  *(void *)&v7[20] = 0x3F80000000000000;
  *(_OWORD *)&v7[28] = 0uLL;
  *(_OWORD *)&v7[44] = 0x3F80000000000000uLL;
  *(void *)&v7[60] = 0;
  *(_DWORD *)&v7[68] = 0;
  *(void *)&unsigned char v7[72] = 1065353216;
  closure #1 in _ColorMatrix.init(from:)((unint64_t)v7, a1, &v6);
  if (!v2)
  {
    long long v5 = *(_OWORD *)&v7[48];
    *(_OWORD *)(a2 + 32) = *(_OWORD *)&v7[32];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = *(_OWORD *)&v7[64];
    __n128 result = *(__n128 *)&v7[16];
    *(_OWORD *)a2 = *(_OWORD *)v7;
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

BOOL specialized static ColorMatrix.== infix(_:_:)(float *a1, float *a2)
{
  return *a1 == *a2
      && a1[1] == a2[1]
      && a1[2] == a2[2]
      && a1[3] == a2[3]
      && a1[4] == a2[4]
      && a1[5] == a2[5]
      && a1[6] == a2[6]
      && a1[7] == a2[7]
      && a1[8] == a2[8]
      && a1[9] == a2[9]
      && a1[10] == a2[10]
      && a1[11] == a2[11]
      && a1[12] == a2[12]
      && a1[13] == a2[13]
      && a1[14] == a2[14]
      && a1[15] == a2[15]
      && a1[16] == a2[16]
      && a1[17] == a2[17]
      && a1[18] == a2[18]
      && a1[19] == a2[19];
}

float specialized static _ColorMatrix.* infix(_:_:)@<S0>(_OWORD *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>, int8x16_t a4@<Q0>, int32x4_t a5@<Q2>, int32x4_t a6@<Q6>, int32x4_t a7@<Q7>)
{
  float v7 = *((float *)a1 + 2);
  float v8 = *((float *)a1 + 3);
  int32x4_t v9 = *(int32x4_t *)((char *)a1 + 4);
  int32x4_t v10 = *(int32x4_t *)a1;
  float v11 = *((float *)a1 + 7);
  float v12 = *((float *)a1 + 8);
  a6.i32[0] = *((_DWORD *)a1 + 5);
  a7.i32[0] = *((_DWORD *)a1 + 6);
  float v13 = *((float *)a1 + 12);
  float v14 = *((float *)a1 + 13);
  a4.i32[0] = *((_DWORD *)a1 + 10);
  a5.i32[0] = *((_DWORD *)a1 + 11);
  float v15 = *((float *)a1 + 17);
  float v16 = *((float *)a1 + 18);
  float v18 = *((float *)a1 + 15);
  float v17 = *((float *)a1 + 16);
  float v19 = *((float *)a2 + 19);
  float32_t v20 = v8 * v19;
  float v21 = *((float *)a2 + 14);
  float v22 = (float)((float)((float)((float)(v16 * v19) + (float)(v15 * v21)) + (float)(v17 * *((float *)a2 + 9)))
              + (float)(v18 * *((float *)a2 + 4)))
      + *((float *)a1 + 19);
  float32x4_t v23 = *(float32x4_t *)((char *)a2 + 60);
  float32x4_t v24 = *(float32x4_t *)((char *)a2 + 40);
  float32x4_t v25 = *(float32x4_t *)((char *)a2 + 20);
  float32x4_t v26 = *(float32x4_t *)a2;
  float32x4_t v27 = vaddq_f32(vaddq_f32(vaddq_f32(vmulq_n_f32(v23, v8), vmulq_n_f32(v24, v7)), vmulq_n_f32(v25, *(float *)v9.i32)), vmulq_n_f32(*(float32x4_t *)a2, COERCE_FLOAT(*a1)));
  float v28 = (float)((float)(vmuls_lane_f32(v12, v23, 3) + vmuls_lane_f32(v11, v24, 3))
              + vmuls_lane_f32(*(float *)a7.i32, v25, 3))
      + vmuls_lane_f32(*(float *)a6.i32, *(float32x4_t *)a2, 3);
  float v29 = (float)((float)(vmuls_lane_f32(v14, v23, 3) + vmuls_lane_f32(v13, v24, 3))
              + vmuls_lane_f32(*(float *)a5.i32, v25, 3))
      + vmuls_lane_f32(*(float *)a4.i32, *(float32x4_t *)a2, 3);
  float32x4_t v30 = (float32x4_t)vextq_s8(a4, (int8x16_t)v23, 0xCuLL);
  float32x4_t v31 = v30;
  v31.f32[0] = v20;
  float v32 = vmuls_lane_f32(v16, v23, 3) + vmuls_lane_f32(v15, v24, 3);
  float32x4_t v33 = v31;
  v33.f32[3] = v12;
  float32x4_t v34 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v33, 3);
  v34.i32[3] = *(void *)((char *)a2 + 68);
  float32x4_t v35 = vmulq_f32(v33, v34);
  v34.f32[0] = v7 * v21;
  unsigned __int32 v36 = vaddq_f32(v31, v34).u32[0];
  float32x4_t v37 = *((float32x4_t *)a1 + 1);
  v35.i32[0] = v36;
  float v38 = v32 + vmuls_lane_f32(v17, v25, 3);
  *(float *)&v9.i32[1] = v11;
  float32x4_t v39 = (float32x4_t)vzip1q_s32(v9, vdupq_lane_s32(*(int32x2_t *)v9.i8, 1));
  v10.i32[1] = a7.i32[0];
  float32x4_t v40 = (float32x4_t)vzip1q_s32(v10, vdupq_lane_s32(*(int32x2_t *)v10.i8, 1));
  float32x4_t v41 = *(float32x4_t *)((char *)a2 + 36);
  float32x4_t v42 = *((float32x4_t *)a2 + 1);
  float32x4_t v43 = vaddq_f32(vaddq_f32(v35, vmulq_f32(v41, v39)), vmulq_f32(v42, v40));
  *(int8x8_t *)v40.f32 = vext_s8(*(int8x8_t *)a2, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL), 4uLL);
  v37.f32[1] = *(float *)a6.i32 * COERCE_FLOAT(*a2);
  *(float32x2_t *)&v37.u32[2] = vmul_n_f32(*(float32x2_t *)v40.f32, *(float *)a6.i32);
  *(float32x4_t *)a3 = v27;
  *(float32x4_t *)(a3 + 16) = vaddq_f32(v37, v43);
  float32_t v44 = v12 * v19;
  float32_t v45 = v14 * v19;
  float32x4_t v46 = v30;
  v46.f32[0] = v44;
  float32x4_t v47 = v46;
  v47.f32[3] = v14;
  *(float *)(a3 + 32) = v28;
  float32x4_t v48 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v47, 3);
  v48.i32[3] = v23.i32[2];
  float32x4_t v49 = vmulq_f32(v47, v48);
  v48.f32[0] = v11 * v21;
  v49.i32[0] = vaddq_f32(v46, v48).u32[0];
  float32_t v50 = v13 * v21;
  *(float *)&a7.i32[1] = v13;
  a6.i32[1] = a5.i32[0];
  float32x4_t v51 = *(float32x4_t *)((char *)a1 + 36);
  v51.f32[1] = *(float *)a4.i32 * v26.f32[0];
  *(float32x2_t *)&v51.u32[2] = vmul_n_f32(*(float32x2_t *)v40.f32, *(float *)a4.i32);
  *(float32x4_t *)(a3 + 36) = vaddq_f32(vaddq_f32(vaddq_f32(v49, vmulq_f32(v41, (float32x4_t)vzip1q_s32(a7, vdupq_lane_s32(*(int32x2_t *)a7.i8, 1)))), vmulq_f32(v42, (float32x4_t)vzip1q_s32(a6, vdupq_lane_s32(*(int32x2_t *)a6.i8, 1)))), v51);
  *(float *)(a3 + 52) = v29;
  v30.f32[0] = v45;
  float32x4_t v52 = v30;
  v52.f32[3] = v16;
  float32x4_t v53 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v52, 3);
  v53.i32[3] = v23.i32[2];
  float32x4_t v54 = vmulq_f32(v52, v53);
  v53.f32[0] = v50;
  v54.i32[0] = vaddq_f32(v30, v53).u32[0];
  *(float *)&a5.i32[1] = v15;
  *(float *)&a4.i32[1] = v17;
  float32x4_t v55 = vaddq_f32(v54, vmulq_f32(v41, (float32x4_t)vzip1q_s32(a5, vdupq_lane_s32(*(int32x2_t *)a5.i8, 1))));
  float32x4_t v56 = *(float32x4_t *)((char *)a1 + 56);
  v56.f32[1] = v18 * v26.f32[0];
  *(float32x2_t *)&v56.u32[2] = vmul_n_f32(*(float32x2_t *)v40.f32, v18);
  *(float32x4_t *)(a3 + 56) = vaddq_f32(vaddq_f32(v55, vmulq_f32(v42, (float32x4_t)vzip1q_s32((int32x4_t)a4, vdupq_lane_s32(*(int32x2_t *)a4.i8, 1)))), v56);
  float result = v38 + vmuls_lane_f32(v18, v26, 3);
  *(float *)(a3 + 72) = result;
  *(float *)(a3 + 76) = v22;
  return result;
}

double specialized _ColorMatrix.init(hueRotation:)@<D0>(uint64_t a1@<X8>, double a2@<D0>)
{
  __double2 v3 = __sincos_stret(a2);
  float cosval = v3.__cosval;
  float sinval = v3.__sinval;
  v6.i32[0] = 1046066128;
  float v7 = (float)((float)(cosval * 0.7873) + 0.2126) - (float)(sinval * 0.2126);
  float v8 = 0.0722 - (float)(cosval * 0.0722);
  *(float *)(a1 + 8) = (float)(sinval * 0.9278) + v8;
  float32x2_t v9 = vmul_n_f32((float32x2_t)0x3E91D14E3E59B3D0, cosval);
  v6.f32[0] = vsub_f32(v6, v9).f32[0];
  v6.i32[1] = vadd_f32(v9, (float32x2_t)vdup_n_s32(0x3F371759u)).i32[1];
  *(void *)(a1 + 12) = 0;
  *(float32x2_t *)(a1 + 20) = vadd_f32(vmul_n_f32((float32x2_t)0x3E0F5C293E126E98, sinval), v6);
  *(float *)(a1 + 28) = v8 + (float)(sinval * -0.283);
  *(void *)(a1 + 32) = 0;
  *(float *)(a1 + 40) = v6.f32[0] - (float)(sinval * 0.7873);
  float32x2_t v10 = vmul_n_f32((float32x2_t)0x3F6D844D3F371759, cosval);
  float32x2_t v11 = vsub_f32((float32x2_t)0x3F6D844D3F371759, v10);
  float32x2_t v12 = vmul_n_f32((float32x2_t)0x3D93DD983F371759, sinval);
  v6.i32[0] = vsub_f32(v11, v12).u32[0];
  v11.i32[1] = vadd_f32(v10, (float32x2_t)vdup_n_s32(0x3D93DD98u)).i32[1];
  *(float *)a1 = v7;
  *(_DWORD *)(a1 + 4) = v6.i32[0];
  *(float32x2_t *)(a1 + 44) = vadd_f32(v12, v11);
  *(void *)(a1 + 60) = 0;
  *(void *)(a1 + 52) = 0;
  *(_DWORD *)(a1 + 68) = 0;
  *(void *)&double result = 1065353216;
  *(void *)(a1 + 72) = 1065353216;
  return result;
}

float specialized _ColorMatrix.init(colorMonochrome:amount:bias:)@<S0>(uint64_t a1@<X8>, float a2@<S0>, float a3@<S1>, float a4@<S2>, float a5@<S3>, float a6@<S4>, float a7@<S5>)
{
  float v12 = -a2;
  if (a2 <= 0.0) {
    float v13 = -a2;
  }
  else {
    float v13 = a2;
  }
  if (v13 > 0.0031308)
  {
    float v14 = 1.0;
    if (v13 == 1.0)
    {
      if (a2 <= 0.0) {
        goto LABEL_14;
      }
    }
    else
    {
      float v14 = (float)(powf(v13, 0.41667) * 1.055) + -0.055;
      if (a2 <= 0.0) {
        goto LABEL_14;
      }
    }
LABEL_9:
    float v68 = (float)(v14 * 0.7152) * a6;
    if (a2 > 0.0031308)
    {
      float v15 = 1.0;
      float v12 = a2;
      if (a2 == 1.0) {
        goto LABEL_20;
      }
      goto LABEL_16;
    }
    float v12 = a2;
LABEL_17:
    float v12 = v12 * 12.92;
LABEL_18:
    float v15 = v12;
    if (a2 > 0.0) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  float v14 = v13 * 12.92;
  if (a2 > 0.0) {
    goto LABEL_9;
  }
LABEL_14:
  float v68 = (float)(v14 * -0.7152) * a6;
  if (a2 >= -0.0031308) {
    goto LABEL_17;
  }
  if (a2 != -1.0)
  {
LABEL_16:
    float v12 = (float)(powf(v12, 0.41667) * 1.055) + -0.055;
    goto LABEL_18;
  }
LABEL_19:
  float v15 = -v12;
LABEL_20:
  float v65 = v15;
  if (a3 <= 0.0) {
    float v16 = -a3;
  }
  else {
    float v16 = a3;
  }
  if (v16 > 0.0031308)
  {
    float v17 = 1.0;
    if (v16 != 1.0) {
      float v17 = (float)(powf(v16, 0.41667) * 1.055) + -0.055;
    }
  }
  else
  {
    float v17 = v16 * 12.92;
  }
  float v64 = v17;
  if (v16 <= 0.0031308)
  {
    float v18 = v16 * 12.92;
  }
  else
  {
    float v18 = 1.0;
    if (v16 != 1.0) {
      float v18 = (float)(powf(v16, 0.41667) * 1.055) + -0.055;
    }
  }
  float v63 = v18;
  float v66 = v14;
  if (v16 > 0.0031308)
  {
    float v19 = 1.0;
    if (v16 != 1.0) {
      float v19 = (float)(powf(v16, 0.41667) * 1.055) + -0.055;
    }
  }
  else
  {
    float v19 = v16 * 12.92;
  }
  if (a4 <= 0.0) {
    float v20 = -a4;
  }
  else {
    float v20 = a4;
  }
  if (v20 > 0.0031308)
  {
    float v21 = 1.0;
    if (v20 != 1.0) {
      float v21 = (float)(powf(v20, 0.41667) * 1.055) + -0.055;
    }
  }
  else
  {
    float v21 = v20 * 12.92;
  }
  float v67 = a3;
  if (v20 <= 0.0031308)
  {
    float v22 = v20 * 12.92;
  }
  else
  {
    float v22 = 1.0;
    if (v20 == 1.0)
    {
      if (a4 <= 0.0) {
        float v23 = -0.7152;
      }
      else {
        float v23 = 0.7152;
      }
      goto LABEL_52;
    }
    float v24 = v21;
    float v25 = powf(v20, 0.41667);
    float v21 = v24;
    float v22 = (float)(v25 * 1.055) + -0.055;
  }
  float v26 = -0.7152;
  if (a4 > 0.0) {
    float v26 = 0.7152;
  }
  float v23 = v26 * v22;
LABEL_52:
  float v69 = a4;
  if (v13 > 0.0031308)
  {
    float v27 = 1.0;
    if (v13 != 1.0)
    {
      float v28 = v13;
      float v29 = v21;
      float v30 = v23;
      float v31 = powf(v28, 0.41667);
      float v23 = v30;
      float v21 = v29;
      float v27 = (float)(v31 * 1.055) + -0.055;
    }
  }
  else
  {
    float v27 = v13 * 12.92;
  }
  if (v16 > 0.0031308)
  {
    float v32 = 1.0;
    if (v16 != 1.0)
    {
      float v33 = v16;
      float v34 = v21;
      float v35 = v23;
      float v36 = powf(v33, 0.41667);
      float v23 = v35;
      float v21 = v34;
      float v32 = (float)(v36 * 1.055) + -0.055;
    }
  }
  else
  {
    float v32 = v16 * 12.92;
  }
  if (v20 > 0.0031308)
  {
    float v37 = 1.0;
    if (v20 != 1.0)
    {
      float v38 = v20;
      float v39 = v21;
      float v40 = v23;
      float v41 = powf(v38, 0.41667);
      float v23 = v40;
      float v21 = v39;
      float v37 = (float)(v41 * 1.055) + -0.055;
    }
  }
  else
  {
    float v37 = v20 * 12.92;
  }
  float v42 = -0.2126;
  if (v67 <= 0.0) {
    float v43 = -0.2126;
  }
  else {
    float v43 = 0.2126;
  }
  float v44 = -v32;
  if (v67 > 0.0) {
    float v44 = v32;
  }
  float v45 = -v27;
  float v46 = -v19;
  if (v67 > 0.0) {
    float v46 = v19;
  }
  float v47 = -v63;
  if (v67 > 0.0) {
    float v47 = v63;
  }
  if (a2 > 0.0) {
    float v45 = v27;
  }
  float v48 = -v66;
  if (a2 > 0.0) {
    float v48 = v66;
  }
  if (v69 > 0.0) {
    float v42 = 0.2126;
  }
  float v49 = v42 * v21;
  float v50 = v43 * v64;
  float v51 = (float)(v44 * a7) * a6;
  float v52 = (float)(v45 * a7) * a6;
  float v53 = a5 * a6;
  float v54 = 1.0 - a6;
  float v55 = -v22;
  if (v69 > 0.0) {
    float v55 = v22;
  }
  float v56 = v54 + (float)((float)(v55 * 0.0722) * a6);
  float v57 = v23 * a6;
  float v58 = v49 * a6;
  float v59 = (float)(v46 * 0.0722) * a6;
  float v60 = v54 + (float)((float)(v47 * 0.7152) * a6);
  float v61 = v50 * a6;
  *(float *)a1 = v54 + (float)((float)(v48 * 0.2126) * a6);
  *(float *)(a1 + 4) = v68;
  if (v69 <= 0.0) {
    float v37 = -v37;
  }
  *(float *)(a1 + 8) = (float)(v65 * 0.0722) * a6;
  *(_DWORD *)(a1 + 12) = 0;
  *(float *)(a1 + 16) = v52;
  *(float *)(a1 + 20) = v61;
  *(float *)(a1 + 24) = v60;
  *(float *)(a1 + 28) = v59;
  *(_DWORD *)(a1 + 32) = 0;
  *(float *)(a1 + 36) = v51;
  *(float *)(a1 + 40) = v58;
  *(float *)(a1 + 44) = v57;
  *(float *)(a1 + 48) = v56;
  *(_DWORD *)(a1 + 52) = 0;
  *(float *)(a1 + 56) = (float)(v37 * a7) * a6;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 60) = 0;
  float result = v53 + v54;
  *(float *)(a1 + 72) = v53 + v54;
  *(_DWORD *)(a1 + 76) = 0;
  return result;
}

uint64_t specialized _ColorMatrix.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v16, v17);
  UnkeyedDecodingContainer.decodeRow()(&v14);
  long long v13 = v14;
  int v5 = v15;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v16, v17);
  UnkeyedDecodingContainer.decodeRow()(&v14);
  long long v12 = v14;
  int v6 = v15;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v16, v17);
  UnkeyedDecodingContainer.decodeRow()(&v14);
  long long v11 = v14;
  int v7 = v15;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v16, v17);
  UnkeyedDecodingContainer.decodeRow()(&v14);
  long long v10 = v14;
  int v8 = v15;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  *(_OWORD *)a2 = v13;
  *(_DWORD *)(a2 + 16) = v5;
  *(_OWORD *)(a2 + 20) = v12;
  *(_DWORD *)(a2 + 36) = v6;
  *(_OWORD *)(a2 + 40) = v11;
  *(_DWORD *)(a2 + 56) = v7;
  *(_OWORD *)(a2 + 60) = v10;
  *(_DWORD *)(a2 + 76) = v8;
  return result;
}

ValueMetadata *type metadata accessor for ColorMatrix()
{
  return &type metadata for ColorMatrix;
}

void Text.Effect.TransformContext.update(target:for:spring:)(uint64_t a1@<X0>, uint64_t a2@<X1>, double *a3@<X2>, uint64_t a4@<X8>)
{
  if (__OFSUB__(*(void *)v4, a2))
  {
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v16 = *(void *)a1;
  double v7 = *(double *)(a1 + 8);
  double v8 = *(double *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(void *)(a1 + 32);
  double v11 = *(double *)(a1 + 40);
  double v12 = *(double *)(a1 + 48);
  uint64_t v13 = *(void *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 64);
  char v5 = *(unsigned char *)(a1 + 72);
  if (*(void *)v4 == a2)
  {
    if (*(unsigned char *)(v4 + 16))
    {
      uint64_t v17 = *(void *)(v4 + 8);
      *(void *)&long long v93 = &type metadata for Text.Effect.DrawingStateAttribute;
      *((void *)&v93 + 1) = v17;
      long long v94 = (unint64_t)a2;
      LOBYTE(v4) = 1;
      LOBYTE(v95) = 1;
      uint64_t v96 = 0;
      LOBYTE(v97) = 1;
      uint64_t v49 = v16;
      if (one-time initialization token for zero == -1)
      {
LABEL_5:
        LOBYTE(v89[0]) = v4;
        uint64_t v60 = v16;
        double v61 = v7;
        double v62 = v8;
        *(void *)&long long v63 = v9;
        *((void *)&v63 + 1) = v10;
        double v64 = v11;
        double v65 = v12;
        uint64_t v66 = v13;
        uint64_t v67 = v6;
        char v68 = v5;
        *(void *)&long long v69 = v16;
        *((double *)&v69 + 1) = v7;
        *(double *)&long long v70 = v8;
        *((void *)&v70 + 1) = v9;
        *(void *)&long long v71 = v10;
        *((double *)&v71 + 1) = v11;
        *(double *)&long long v72 = v12;
        *((void *)&v72 + 1) = v13;
        *(void *)&long long v73 = v6;
        BYTE8(v73) = v5;
        long long v74 = static Text.Effect.DrawingState.zero;
        long long v75 = xmmword_268F73640;
        long long v76 = xmmword_268F73650;
        long long v77 = xmmword_268F73660;
        *(void *)&long long v78 = qword_268F73670;
        BYTE8(v78) = byte_268F73678;
        *(void *)&long long v80 = 0;
        long long v79 = 0uLL;
        BYTE8(v80) = v4;
        *(void *)&long long v81 = 0;
        BYTE8(v81) = v4;
        *(void *)&long long v82 = 0;
        BYTE8(v82) = v4;
        swift_beginAccess();
        specialized Text.Effect.AttributeTracker.Tracker.subscript.setter((uint64_t)&v60, (uint64_t)&v93);
        swift_endAccess();
        uint64_t v16 = v49;
        goto LABEL_14;
      }
LABEL_16:
      swift_once();
      uint64_t v16 = v49;
      goto LABEL_5;
    }
    if (*(unsigned char *)(v4 + 56))
    {
      double v18 = *a3;
      double v19 = a3[1];
      double v20 = a3[2];
      uint64_t v21 = *(void *)(v4 + 8);
      double v22 = *(double *)(v4 + 40) - *(double *)(v4 + 24);
      if (v22 < 0.0) {
        double v22 = 0.0;
      }
      *(void *)&long long v93 = &type metadata for Text.Effect.DrawingStateAttribute;
      *((void *)&v93 + 1) = v21;
      long long v94 = (unint64_t)a2;
      LOBYTE(v95) = 1;
      uint64_t v96 = 0;
      LOBYTE(v97) = 1;
      specialized Text.Effect.AttributeTracker.update<A>(for:target:spring:at:)((uint64_t)&v93, a1, (uint64_t)&v60, v18, v19, v20, v22);
      uint64_t v16 = v60;
      double v7 = v61;
      double v8 = v62;
      uint64_t v10 = *((void *)&v63 + 1);
      uint64_t v9 = v63;
      double v11 = v64;
      double v12 = v65;
      uint64_t v13 = v66;
      uint64_t v6 = v67;
      char v5 = v68;
    }
    else
    {
      double v23 = *(double *)(v4 + 48);
      double v24 = *(double *)(v4 + 8);
      double v25 = *(double *)(v4 + 40);
      uint64_t v26 = *(void *)(v4 + 64);
      char v27 = *(unsigned char *)(v4 + 72);
      uint64_t v28 = *(void *)(v4 + 368);
      char v29 = *(unsigned char *)(v4 + 376);
      uint64_t v60 = a2;
      double v61 = v24;
      LOBYTE(v62) = 0;
      long long v63 = *(_OWORD *)(v4 + 24);
      double v64 = v25;
      double v65 = v23;
      LOBYTE(v66) = 0;
      uint64_t v67 = v26;
      char v68 = v27;
      long long v30 = *(_OWORD *)(v4 + 96);
      long long v69 = *(_OWORD *)(v4 + 80);
      long long v70 = v30;
      long long v31 = *(_OWORD *)(v4 + 128);
      long long v71 = *(_OWORD *)(v4 + 112);
      long long v72 = v31;
      long long v32 = *(_OWORD *)(v4 + 160);
      long long v73 = *(_OWORD *)(v4 + 144);
      long long v74 = v32;
      long long v33 = *(_OWORD *)(v4 + 192);
      long long v75 = *(_OWORD *)(v4 + 176);
      long long v76 = v33;
      long long v34 = *(_OWORD *)(v4 + 224);
      long long v77 = *(_OWORD *)(v4 + 208);
      long long v78 = v34;
      long long v35 = *(_OWORD *)(v4 + 256);
      long long v79 = *(_OWORD *)(v4 + 240);
      long long v80 = v35;
      long long v36 = *(_OWORD *)(v4 + 288);
      long long v81 = *(_OWORD *)(v4 + 272);
      long long v82 = v36;
      long long v37 = *(_OWORD *)(v4 + 320);
      long long v83 = *(_OWORD *)(v4 + 304);
      long long v84 = v37;
      long long v38 = *(_OWORD *)(v4 + 352);
      long long v85 = *(_OWORD *)(v4 + 336);
      long long v86 = v38;
      uint64_t v87 = v28;
      char v88 = v29;
      double v39 = v25 - v23;
      if (v39 < 0.0) {
        double v40 = 0.0;
      }
      else {
        double v40 = v39;
      }
      uint64_t v41 = *(void *)(a1 + 32);
      uint64_t v42 = *(void *)(a1 + 40);
      v89[0] = &type metadata for Text.Effect.DrawingStateAttribute;
      *(double *)&v89[1] = v24;
      void v89[2] = a2;
      v89[3] = 0;
      char v90 = 1;
      uint64_t v91 = 0;
      char v92 = 1;
      swift_beginAccess();
      specialized Text.Effect.AttributeTracker.Tracker.ensureEntry<A>(for:value:)((uint64_t)v89, (uint64_t *)a1);
      swift_endAccess();
      outlined retain of Text.Effect.TransformContext((uint64_t)&v60);
      long long v93 = 0u;
      long long v94 = 0u;
      uint64_t v95 = v41;
      uint64_t v96 = v42;
      __asm { FMOV            V0.2D, #1.0 }
      long long v97 = _Q0;
      uint64_t v98 = 0x3FF0000000000000;
      char v99 = 0;
      specialized Spring.settlingDuration<A>(target:initialVelocity:epsilon:)(1.0, 0.0, 0.001, 0.0, 10.0);
      Spring.scaledResponse(_:)(0.2 / v48);
      outlined release of Text.Effect.TransformContext((uint64_t)&v60);
      specialized Text.Effect.AttributeTracker.update<A>(for:target:spring:at:)((uint64_t)v89, (uint64_t)&v93, (uint64_t)&v50, v50, v51, v52, v40);
      uint64_t v16 = *(void *)&v50;
      double v7 = v51;
      double v8 = v52;
      uint64_t v9 = v53;
      uint64_t v10 = v54;
      double v11 = v55;
      double v12 = v56;
      uint64_t v13 = v57;
      uint64_t v6 = v58;
      char v5 = v59;
    }
  }
LABEL_14:
  *(void *)a4 = v16;
  *(double *)(a4 + 8) = v7;
  *(double *)(a4 + 16) = v8;
  *(void *)(a4 + 24) = v9;
  *(void *)(a4 + 32) = v10;
  *(double *)(a4 + 40) = v11;
  *(double *)(a4 + 48) = v12;
  *(void *)(a4 + 56) = v13;
  *(void *)(a4 + 64) = v6;
  *(unsigned char *)(a4 + 72) = v5;
}

void specialized Spring.velocity<A>(target:initialVelocity:time:)(uint64_t a1@<X0>, float64x2_t *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>)
{
  if (a5 >= 0.0)
  {
    if (a5 <= 0.0)
    {
      double v49 = *(double *)(a1 + 64);
      double v50 = v49 * a6 - a2[4].f64[0];
      long double v51 = exp(-(a6 * a4));
      float64x2_t v52 = *(float64x2_t *)(a1 + 16);
      float64x2_t v53 = vsubq_f64(vmulq_n_f64(v52, a6), a2[1]);
      float64x2_t v54 = *(float64x2_t *)(a1 + 32);
      float64x2_t v55 = *(float64x2_t *)(a1 + 48);
      float64x2_t v56 = vsubq_f64(vmulq_n_f64(v54, a6), a2[2]);
      double v57 = (a4 * a6 + -1.0) * v51;
      double v58 = v51 * a6;
      double v40 = v58 * v49;
      float64x2_t v41 = vmulq_n_f64(v52, v58);
      float64x2_t v42 = vmulq_n_f64(v53, v57);
      float64x2_t v43 = vmulq_n_f64(v54, v58);
      float64x2_t v44 = vmulq_n_f64(v56, v57);
      float64x2_t v59 = vsubq_f64(vmulq_n_f64(v55, a6), a2[3]);
      float64x2_t v46 = vmulq_n_f64(v55, v58);
      float64x2_t v47 = vmulq_n_f64(v59, v57);
      double v48 = v57 * v50;
      float64x2_t v23 = vaddq_f64(vmulq_n_f64(*(float64x2_t *)a1, v58), vmulq_n_f64(vsubq_f64(vmulq_n_f64(*(float64x2_t *)a1, a6), *a2), v57));
    }
    else
    {
      double v28 = exp(-(a6 * a4));
      double v29 = a4 * a5;
      double v30 = *(double *)(a1 + 64);
      double v31 = v30 * a6 - a2[4].f64[0];
      __double2 v32 = __sincos_stret(v29);
      double v33 = v28 * (v32.__sinval * a5 + v32.__cosval * a6);
      double v34 = v28 * (v32.__sinval * a6 - v32.__cosval * a5) / a5;
      float64x2_t v35 = *(float64x2_t *)(a1 + 16);
      float64x2_t v36 = vsubq_f64(vmulq_n_f64(v35, a6), a2[1]);
      float64x2_t v37 = *(float64x2_t *)(a1 + 32);
      float64x2_t v38 = *(float64x2_t *)(a1 + 48);
      float64x2_t v39 = vsubq_f64(vmulq_n_f64(v37, a6), a2[2]);
      double v40 = v33 * v30;
      float64x2_t v41 = vmulq_n_f64(v35, v33);
      float64x2_t v42 = vmulq_n_f64(v36, v34);
      float64x2_t v43 = vmulq_n_f64(v37, v33);
      float64x2_t v44 = vmulq_n_f64(v39, v34);
      float64x2_t v45 = vsubq_f64(vmulq_n_f64(v38, a6), a2[3]);
      float64x2_t v46 = vmulq_n_f64(v38, v33);
      float64x2_t v47 = vmulq_n_f64(v45, v34);
      double v48 = v34 * v31;
      float64x2_t v23 = vaddq_f64(vmulq_n_f64(*(float64x2_t *)a1, v33), vmulq_n_f64(vsubq_f64(vmulq_n_f64(*(float64x2_t *)a1, a6), *a2), v34));
    }
    float64x2_t v24 = vaddq_f64(v41, v42);
    float64x2_t v25 = vaddq_f64(v43, v44);
    float64x2_t v26 = vaddq_f64(v46, v47);
    double v27 = v40 + v48;
  }
  else
  {
    double v11 = -a5 - a6;
    long double v12 = v11 * exp(v11 * a4);
    long double v13 = (a5 - a6) * exp((a5 - a6) * a4);
    double v14 = ((a6 - a5) * v12 + v11 * v13) / (a5 + a5) + 1.0;
    double v15 = v14 * *(double *)(a1 + 64);
    double v16 = (v12 - v13) / (a5 + a5);
    float64x2_t v17 = vmulq_n_f64(a2[1], v16);
    float64x2_t v18 = vmulq_n_f64(*(float64x2_t *)(a1 + 32), v14);
    float64x2_t v19 = vmulq_n_f64(*(float64x2_t *)(a1 + 48), v14);
    float64x2_t v20 = vmulq_n_f64(a2[2], v16);
    float64x2_t v21 = vmulq_n_f64(a2[3], v16);
    double v22 = v16 * a2[4].f64[0];
    float64x2_t v23 = vsubq_f64(vmulq_n_f64(*(float64x2_t *)a1, v14), vmulq_n_f64(*a2, v16));
    float64x2_t v24 = vsubq_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 16), v14), v17);
    float64x2_t v25 = vsubq_f64(v18, v20);
    float64x2_t v26 = vsubq_f64(v19, v21);
    double v27 = v15 - v22;
  }
  char v60 = *(unsigned char *)(a1 + 72);
  *(float64x2_t *)a3 = v23;
  *(float64x2_t *)(a3 + 16) = v24;
  *(float64x2_t *)(a3 + 32) = v25;
  *(float64x2_t *)(a3 + 48) = v26;
  *(double *)(a3 + 64) = v27;
  *(unsigned char *)(a3 + 72) = v60;
}

void specialized Spring.velocity<A>(target:initialVelocity:time:)(double a1, double a2, double a3, double a4, double a5)
{
  if (a4 >= 0.0)
  {
    if (a4 <= 0.0)
    {
      exp(-(a5 * a3));
    }
    else
    {
      exp(-(a5 * a3));
      __sincos_stret(a3 * a4);
    }
  }
  else
  {
    exp((-a4 - a5) * a3);
    exp((a4 - a5) * a3);
  }
}

void specialized Text.Effect.AttributeTracker.Value.updateSettlingTime(spring:target:at:)(uint64_t a1, double a2, double a3, double a4, double a5)
{
  float64x2_t v10 = *(float64x2_t *)a1;
  float64x2_t v11 = *(float64x2_t *)(a1 + 16);
  float64x2_t v12 = vmulq_f64(v10, v10);
  float64x2_t v13 = vmulq_f64(v11, v11);
  float64x2_t v14 = vaddq_f64(vaddq_f64(vaddq_f64(v12, (float64x2_t)vdupq_laneq_s64((int64x2_t)v12, 1)), v13), (float64x2_t)vdupq_laneq_s64((int64x2_t)v13, 1));
  float64x2_t v15 = *(float64x2_t *)(a1 + 32);
  float64x2_t v16 = *(float64x2_t *)(a1 + 48);
  float64x2_t v17 = vmulq_f64(v15, v15);
  float64x2_t v18 = vaddq_f64(vaddq_f64(v14, v17), (float64x2_t)vdupq_laneq_s64((int64x2_t)v17, 1));
  float64x2_t v19 = vmulq_f64(v16, v16);
  double v20 = *(double *)(a1 + 64);
  double v21 = vaddq_f64(vaddq_f64(v18, v19), (float64x2_t)vdupq_laneq_s64((int64x2_t)v19, 1)).f64[0] + v20 * v20;
  double v22 = *(double *)(v5 + 240);
  double v23 = *(double *)(v5 + 248);
  double v24 = *(double *)(v5 + 256);
  int v25 = *(unsigned __int8 *)(v5 + 264);
  if (v25 != 1) {
    goto LABEL_4;
  }
  long long v26 = *(_OWORD *)(v5 + 128);
  long long v53 = *(_OWORD *)(v5 + 112);
  *(_OWORD *)float64x2_t v54 = v26;
  *(_OWORD *)&v54[9] = *(_OWORD *)(v5 + 137);
  long long v27 = *(_OWORD *)(v5 + 96);
  long long v51 = *(_OWORD *)(v5 + 80);
  long long v52 = v27;
  float64x2_t v43 = v15;
  float64x2_t v44 = v10;
  float64x2_t v41 = v16;
  float64x2_t v42 = v11;
  BOOL v28 = specialized static Text.Effect.DrawingState.== infix(_:_:)((uint64_t)&v51, a1);
  float64x2_t v16 = v41;
  float64x2_t v11 = v42;
  float64x2_t v15 = v43;
  float64x2_t v10 = v44;
  if (v28
    || vabdd_f64(v21, *(double *)&v51 * *(double *)&v51+ *((double *)&v51 + 1) * *((double *)&v51 + 1)+ *(double *)&v52 * *(double *)&v52+ *((double *)&v52 + 1) * *((double *)&v52 + 1)+ *(double *)&v53 * *(double *)&v53+ *((double *)&v53 + 1) * *((double *)&v53 + 1)+ *(double *)v54 * *(double *)v54+ *(double *)&v54[8] * *(double *)&v54[8]+ *(double *)&v54[16] * *(double *)&v54[16]) <= 0.001)
  {
    *(void *)(v5 + 288) = 0;
    *(unsigned char *)(v5 + 296) = 1;
  }
  else
  {
LABEL_4:
    if (vabdd_f64(v21, *(double *)v5 * *(double *)v5+ *(double *)(v5 + 8) * *(double *)(v5 + 8)+ *(double *)(v5 + 16) * *(double *)(v5 + 16)+ *(double *)(v5 + 24) * *(double *)(v5 + 24)+ *(double *)(v5 + 32) * *(double *)(v5 + 32)+ *(double *)(v5 + 40) * *(double *)(v5 + 40)+ *(double *)(v5 + 48) * *(double *)(v5 + 48)+ *(double *)(v5 + 56) * *(double *)(v5 + 56)+ *(double *)(v5 + 64) * *(double *)(v5 + 64)) > 0.001)int v29 = 1; {
    else
    }
      int v29 = v25;
    if (v29 == 1 || v22 != a2 || v23 != a3 || v24 != a4)
    {
      long long v33 = *(_OWORD *)(a1 + 48);
      *(_OWORD *)(v5 + 32) = *(_OWORD *)(a1 + 32);
      *(_OWORD *)(v5 + 48) = v33;
      *(_OWORD *)(v5 + 57) = *(_OWORD *)(a1 + 57);
      long long v34 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)uint64_t v5 = *(_OWORD *)a1;
      *(_OWORD *)(v5 + 16) = v34;
      *(double *)&long long v34 = v20 - *(double *)(v5 + 144);
      char v35 = *(unsigned char *)(a1 + 72);
      float64x2_t v36 = vsubq_f64(v11, *(float64x2_t *)(v5 + 96));
      v46[0] = vsubq_f64(v10, *(float64x2_t *)(v5 + 80));
      v46[1] = v36;
      float64x2_t v37 = vsubq_f64(v16, *(float64x2_t *)(v5 + 128));
      void v46[2] = vsubq_f64(v15, *(float64x2_t *)(v5 + 112));
      v46[3] = v37;
      uint64_t v47 = v34;
      char v48 = v35;
      long long v38 = *(_OWORD *)(v5 + 208);
      v49[2] = *(float64x2_t *)(v5 + 192);
      v50[0] = v38;
      *(_OWORD *)((char *)v50 + 9) = *(_OWORD *)(v5 + 217);
      float64x2_t v39 = *(float64x2_t *)(v5 + 176);
      v49[0] = *(float64x2_t *)(v5 + 160);
      v49[1] = v39;
      specialized Spring.settlingDuration<A>(target:initialVelocity:epsilon:)((double *)v46, v49, 0.01, a2, a3);
      *(double *)(v5 + 288) = v40 + a5;
      *(unsigned char *)(v5 + 296) = 0;
      *(double *)(v5 + 240) = a2;
      *(double *)(v5 + 248) = a3;
      *(double *)(v5 + 256) = a4;
      *(unsigned char *)(v5 + 264) = 0;
    }
  }
}

void specialized Text.Effect.AttributeTracker.Value.updateSettlingTime(spring:target:at:)(double a1, double a2, double a3, double a4, double a5)
{
  double v10 = a4 * a4;
  int v11 = *(unsigned __int8 *)(v5 + 48);
  if (v11 == 1 && ((double v12 = *(double *)(v5 + 8), v12 == a4) || vabdd_f64(v10, v12 * v12) <= 0.001))
  {
    *(void *)(v5 + 72) = 0;
    *(unsigned char *)(v5 + 80) = 1;
  }
  else
  {
    if (vabdd_f64(v10, *(double *)v5 * *(double *)v5) > 0.001) {
      int v11 = 1;
    }
    if (v11 == 1 || *(double *)(v5 + 24) != a1 || *(double *)(v5 + 32) != a2 || *(double *)(v5 + 40) != a3)
    {
      *(double *)uint64_t v5 = a4;
      specialized Spring.settlingDuration<A>(target:initialVelocity:epsilon:)(a4 - *(double *)(v5 + 8), *(double *)(v5 + 16), 0.01, a1, a2);
      *(double *)(v5 + 72) = v16 + a5;
      *(unsigned char *)(v5 + 80) = 0;
      *(double *)(v5 + 24) = a1;
      *(double *)(v5 + 32) = a2;
      *(double *)(v5 + 40) = a3;
      *(unsigned char *)(v5 + 48) = 0;
    }
  }
}

uint64_t specialized Text.Effect.AttributeTracker.Tracker.subscript.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (double *)v2;
  long long v6 = *(_OWORD *)(a2 + 16);
  v47[0] = *(_OWORD *)a2;
  v47[1] = v6;
  v47[2] = *(_OWORD *)(a2 + 32);
  char v48 = *(unsigned char *)(a2 + 48);
  unint64_t v9 = !*(void *)(*(void *)(v2 + 8) + 16)
    || (specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v47), (v7 & 1) == 0)
    || (type metadata accessor for Text.Effect.AttributeTracker.ValueBox<Text.Effect.DrawingStateAttribute>(0, &lazy cache variable for type metadata for Text.Effect.AttributeTracker.ValueBox<Text.Effect.DrawingStateAttribute>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.DrawingStateAttribute and conformance Text.Effect.DrawingStateAttribute), (uint64_t v8 = swift_dynamicCastClass()) == 0)|| (*(unsigned char *)(v8 + 296) & 1) != 0|| (*(unsigned char *)(v8 + 312) & 1) != 0|| *(double *)(v8 + 304) <= *(double *)(v8 + 288);
  type metadata accessor for Text.Effect.AttributeTracker.ValueBox<Text.Effect.DrawingStateAttribute>(0, &lazy cache variable for type metadata for Text.Effect.AttributeTracker.ValueBox<Text.Effect.DrawingStateAttribute>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.DrawingStateAttribute and conformance Text.Effect.DrawingStateAttribute);
  uint64_t v10 = swift_allocObject();
  memcpy((void *)(v10 + 16), (const void *)a1, 0x129uLL);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  double v51 = *(double *)(v2 + 8);
  *(void *)(v2 + 8) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v10, (uint64_t)v47, isUniquelyReferenced_nonNull_native);
  *(double *)(v2 + 8) = v51;
  uint64_t result = swift_bridgeObjectRelease();
  double v13 = *(double *)(a1 + 272);
  char v14 = *(unsigned char *)(a1 + 280);
  if ((v14 & 1) != 0
    || (outlined init with take of Double?(a1 + 288, (uint64_t)v46),
        uint64_t result = outlined init with take of Double?((uint64_t)v46, (uint64_t)&v49),
        (v50 & 1) != 0))
  {
    if (v9) {
      return result;
    }
  }
  else
  {
    double v26 = v13;
    if ((v9 ^ (v49 > v13))) {
      return result;
    }
    if (v9)
    {
      long long v27 = 0;
LABEL_24:
      outlined init with take of Double?(a1 + 288, (uint64_t)v45);
      outlined init with take of Double?((uint64_t)v45, (uint64_t)&v51);
      if ((v52 & 1) != 0 || v51 <= v26) {
        return outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?((uint64_t)v27);
      }
      uint64_t v31 = *((void *)v4 + 2);
      BOOL v16 = __OFADD__(v31, 1);
      uint64_t v32 = v31 + 1;
      if (v16)
      {
        __break(1u);
      }
      else
      {
        *((void *)v4 + 2) = v32;
        a1 = *((void *)&v47[0] + 1);
        char v33 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v34 = *((void *)v4 + 3);
        uint64_t v44 = v34;
        v4[3] = -0.0;
        unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
        uint64_t v36 = *(void *)(v34 + 16);
        BOOL v37 = (v35 & 1) == 0;
        uint64_t v38 = v36 + v37;
        if (!__OFADD__(v36, v37))
        {
          char v3 = v35;
          if (*(void *)(v34 + 24) >= v38)
          {
            if ((v33 & 1) == 0) {
              goto LABEL_46;
            }
            goto LABEL_32;
          }
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v38, v33);
          uint64_t v39 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
          if ((v3 & 1) == (v40 & 1))
          {
            unint64_t v9 = v39;
            while (1)
            {
LABEL_32:
              *((void *)v4 + 3) = v34;
              swift_bridgeObjectRelease();
              uint64_t v4 = (double *)*((void *)v4 + 3);
              swift_bridgeObjectRetain();
              if ((v3 & 1) == 0) {
                specialized _NativeDictionary._insert(at:key:value:)(v9, a1, 0, v4);
              }
              uint64_t v41 = *((void *)v4 + 7);
              swift_bridgeObjectRelease();
              uint64_t v42 = *(void *)(v41 + 8 * v9);
              BOOL v16 = __OFADD__(v42, 1);
              uint64_t v43 = v42 + 1;
              if (!v16) {
                break;
              }
LABEL_45:
              __break(1u);
LABEL_46:
              specialized _NativeDictionary.copy()();
              uint64_t v34 = v44;
            }
            *(void *)(v41 + 8 * v9) = v43;
            return outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?((uint64_t)v27);
          }
LABEL_47:
          uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          return result;
        }
      }
      __break(1u);
      goto LABEL_45;
    }
  }
  uint64_t v15 = *(void *)(v2 + 16);
  BOOL v16 = __OFSUB__(v15, 1);
  uint64_t v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
    goto LABEL_40;
  }
  *(void *)(v2 + 16) = v17;
  uint64_t v10 = *((void *)&v47[0] + 1);
  char v18 = swift_isUniquelyReferenced_nonNull_native();
  double v51 = *(double *)(v2 + 24);
  double v19 = v51;
  v4[3] = -0.0;
  unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(v10);
  uint64_t v21 = *(void *)(*(void *)&v19 + 16);
  BOOL v22 = (v20 & 1) == 0;
  uint64_t v23 = v21 + v22;
  if (__OFADD__(v21, v22))
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  char v3 = v20;
  if (*(void *)(*(void *)&v19 + 24) >= v23)
  {
    if ((v18 & 1) == 0) {
      goto LABEL_42;
    }
  }
  else
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v23, v18);
    double v19 = v51;
    uint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(v10);
    if ((v3 & 1) != (v25 & 1)) {
      goto LABEL_47;
    }
    unint64_t v9 = v24;
  }
  while (1)
  {
    v4[3] = v19;
    swift_bridgeObjectRelease();
    BOOL v28 = (void *)*((void *)v4 + 3);
    swift_bridgeObjectRetain();
    if ((v3 & 1) == 0) {
      specialized _NativeDictionary._insert(at:key:value:)(v9, v10, 0, v28);
    }
    uint64_t v10 = v28[7];
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v29 = *(void *)(v10 + 8 * v9);
    BOOL v16 = __OFSUB__(v29, 1);
    uint64_t v30 = v29 - 1;
    if (!v16) {
      break;
    }
LABEL_41:
    __break(1u);
LABEL_42:
    specialized _NativeDictionary.copy()();
    double v19 = v51;
  }
  *(void *)(v10 + 8 * v9) = v30;
  if ((v14 & 1) == 0)
  {
    double v26 = v13;
    long long v27 = protocol witness for SetAlgebra.init() in conformance NSTextLayoutManagerSegmentCategory;
    goto LABEL_24;
  }
  return result;
}

{
  uint64_t v2;
  char v3;
  double *v4;
  long long v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  long long v11;
  long long v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  double v15;
  char v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  char v20;
  double v21;
  char v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  double v28;
  void (*v29)(void *@<X8>);
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned char v47[16];
  unsigned char v48[16];
  _OWORD v49[3];
  char v50;
  double v51;
  char v52;
  double v53;
  char v54;

  uint64_t v4 = (double *)v2;
  long long v6 = *(_OWORD *)(a2 + 16);
  v49[0] = *(_OWORD *)a2;
  v49[1] = v6;
  v49[2] = *(_OWORD *)(a2 + 32);
  char v50 = *(unsigned char *)(a2 + 48);
  unint64_t v9 = !*(void *)(*(void *)(v2 + 8) + 16)
    || (specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v49), (v7 & 1) == 0)
    || (type metadata accessor for Text.Effect.AttributeTracker.ValueBox<Text.Effect.DrawingStateAttribute>(0, &lazy cache variable for type metadata for Text.Effect.AttributeTracker.ValueBox<Text.Effect.WidthMultiplierAttribute>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.WidthMultiplierAttribute and conformance Text.Effect.WidthMultiplierAttribute), (uint64_t v8 = swift_dynamicCastClass()) == 0)|| (*(unsigned char *)(v8 + 80) & 1) != 0|| (*(unsigned char *)(v8 + 96) & 1) != 0|| *(double *)(v8 + 88) <= *(double *)(v8 + 72);
  type metadata accessor for Text.Effect.AttributeTracker.ValueBox<Text.Effect.DrawingStateAttribute>(0, &lazy cache variable for type metadata for Text.Effect.AttributeTracker.ValueBox<Text.Effect.WidthMultiplierAttribute>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.WidthMultiplierAttribute and conformance Text.Effect.WidthMultiplierAttribute);
  uint64_t v10 = swift_allocObject();
  int v11 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v10 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v10 + 64) = v11;
  *(_OWORD *)(v10 + 80) = *(_OWORD *)(a1 + 64);
  *(unsigned char *)(v10 + 96) = *(unsigned char *)(a1 + 80);
  double v12 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v10 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v10 + 32) = v12;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  long long v53 = *(double *)(v2 + 8);
  *(void *)(v2 + 8) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v10, (uint64_t)v49, isUniquelyReferenced_nonNull_native);
  *(double *)(v2 + 8) = v53;
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v15 = *(double *)(a1 + 56);
  BOOL v16 = *(unsigned char *)(a1 + 64);
  if ((v16 & 1) != 0
    || (outlined init with take of Double?(a1 + 72, (uint64_t)v48),
        uint64_t result = outlined init with take of Double?((uint64_t)v48, (uint64_t)&v51),
        (v52 & 1) != 0))
  {
    if (v9) {
      return result;
    }
  }
  else
  {
    BOOL v28 = v15;
    if ((v9 ^ (v51 > v15))) {
      return result;
    }
    if (v9)
    {
      uint64_t v29 = 0;
LABEL_24:
      outlined init with take of Double?(a1 + 72, (uint64_t)v47);
      outlined init with take of Double?((uint64_t)v47, (uint64_t)&v53);
      if ((v54 & 1) != 0 || v53 <= v28) {
        return outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?((uint64_t)v29);
      }
      char v33 = *((void *)v4 + 2);
      char v18 = __OFADD__(v33, 1);
      uint64_t v34 = v33 + 1;
      if (v18)
      {
        __break(1u);
      }
      else
      {
        *((void *)v4 + 2) = v34;
        a1 = *((void *)&v49[0] + 1);
        char v35 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v36 = *((void *)v4 + 3);
        float64x2_t v46 = v36;
        v4[3] = -0.0;
        unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
        uint64_t v38 = *(void *)(v36 + 16);
        uint64_t v39 = (v37 & 1) == 0;
        char v40 = v38 + v39;
        if (!__OFADD__(v38, v39))
        {
          char v3 = v37;
          if (*(void *)(v36 + 24) >= v40)
          {
            if ((v35 & 1) == 0) {
              goto LABEL_46;
            }
            goto LABEL_32;
          }
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v40, v35);
          uint64_t v41 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
          if ((v3 & 1) == (v42 & 1))
          {
            unint64_t v9 = v41;
            while (1)
            {
LABEL_32:
              *((void *)v4 + 3) = v36;
              swift_bridgeObjectRelease();
              uint64_t v4 = (double *)*((void *)v4 + 3);
              swift_bridgeObjectRetain();
              if ((v3 & 1) == 0) {
                specialized _NativeDictionary._insert(at:key:value:)(v9, a1, 0, v4);
              }
              uint64_t v43 = *((void *)v4 + 7);
              swift_bridgeObjectRelease();
              uint64_t v44 = *(void *)(v43 + 8 * v9);
              char v18 = __OFADD__(v44, 1);
              float64x2_t v45 = v44 + 1;
              if (!v18) {
                break;
              }
LABEL_45:
              __break(1u);
LABEL_46:
              specialized _NativeDictionary.copy()();
              uint64_t v36 = v46;
            }
            *(void *)(v43 + 8 * v9) = v45;
            return outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?((uint64_t)v29);
          }
LABEL_47:
          uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          return result;
        }
      }
      __break(1u);
      goto LABEL_45;
    }
  }
  uint64_t v17 = *(void *)(v2 + 16);
  char v18 = __OFSUB__(v17, 1);
  double v19 = v17 - 1;
  if (v18)
  {
    __break(1u);
    goto LABEL_40;
  }
  *(void *)(v2 + 16) = v19;
  uint64_t v10 = *((void *)&v49[0] + 1);
  char v20 = swift_isUniquelyReferenced_nonNull_native();
  long long v53 = *(double *)(v2 + 24);
  uint64_t v21 = v53;
  v4[3] = -0.0;
  unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(v10);
  uint64_t v23 = *(void *)(*(void *)&v21 + 16);
  uint64_t v24 = (v22 & 1) == 0;
  char v25 = v23 + v24;
  if (__OFADD__(v23, v24))
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  char v3 = v22;
  if (*(void *)(*(void *)&v21 + 24) >= v25)
  {
    if ((v20 & 1) == 0) {
      goto LABEL_42;
    }
  }
  else
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v25, v20);
    uint64_t v21 = v53;
    double v26 = specialized __RawDictionaryStorage.find<A>(_:)(v10);
    if ((v3 & 1) != (v27 & 1)) {
      goto LABEL_47;
    }
    unint64_t v9 = v26;
  }
  while (1)
  {
    v4[3] = v21;
    swift_bridgeObjectRelease();
    uint64_t v30 = (void *)*((void *)v4 + 3);
    swift_bridgeObjectRetain();
    if ((v3 & 1) == 0) {
      specialized _NativeDictionary._insert(at:key:value:)(v9, v10, 0, v30);
    }
    uint64_t v10 = v30[7];
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v31 = *(void *)(v10 + 8 * v9);
    char v18 = __OFSUB__(v31, 1);
    uint64_t v32 = v31 - 1;
    if (!v18) {
      break;
    }
LABEL_41:
    __break(1u);
LABEL_42:
    specialized _NativeDictionary.copy()();
    uint64_t v21 = v53;
  }
  *(void *)(v10 + 8 * v9) = v32;
  if ((v16 & 1) == 0)
  {
    BOOL v28 = v15;
    uint64_t v29 = protocol witness for SetAlgebra.init() in conformance NSTextLayoutManagerSegmentCategory;
    goto LABEL_24;
  }
  return result;
}

__n128 specialized Text.Effect.AttributeTracker.update<A>(for:target:spring:at:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>, double a7@<D3>)
{
  swift_beginAccess();
  if (!*(void *)(*(void *)(v7 + 16) + 16)) {
    goto LABEL_5;
  }
  long long v15 = *(_OWORD *)(a1 + 16);
  v39[0] = *(_OWORD *)a1;
  v39[1] = v15;
  v39[2] = *(_OWORD *)(a1 + 32);
  char v40 = *(unsigned char *)(a1 + 48);
  specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v39);
  if ((v16 & 1) == 0) {
    goto LABEL_5;
  }
  type metadata accessor for Text.Effect.AttributeTracker.ValueBox<Text.Effect.DrawingStateAttribute>(0, &lazy cache variable for type metadata for Text.Effect.AttributeTracker.ValueBox<Text.Effect.DrawingStateAttribute>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.DrawingStateAttribute and conformance Text.Effect.DrawingStateAttribute);
  uint64_t v17 = swift_dynamicCastClass();
  if (v17)
  {
    memmove(__dst, (const void *)(v17 + 16), 0x129uLL);
  }
  else
  {
LABEL_5:
    if (one-time initialization token for zero != -1) {
      swift_once();
    }
    memset(__dst, 0, 48);
    __asm { FMOV            V2.2D, #1.0 }
    __dst[3] = _Q2;
    *(void *)&__dst[4] = 0x3FF0000000000000;
    BYTE8(__dst[4]) = 0;
    memset(&__dst[5], 0, 48);
    __dst[8] = _Q2;
    *(void *)&__dst[9] = 0x3FF0000000000000;
    BYTE8(__dst[9]) = 0;
    __dst[10] = static Text.Effect.DrawingState.zero;
    __dst[11] = xmmword_268F73640;
    __dst[12] = xmmword_268F73650;
    __dst[13] = xmmword_268F73660;
    *(void *)&__dst[14] = qword_268F73670;
    BYTE8(__dst[14]) = byte_268F73678;
    memset(&__dst[15], 0, 24);
    BYTE8(__dst[16]) = 1;
    *(void *)&__dst[17] = 0;
    BYTE8(__dst[17]) = 1;
    *(void *)&__dst[18] = 0;
    BYTE8(__dst[18]) = 1;
  }
  swift_endAccess();
  if (((~*(void *)&a4 & 0x7FF0000000000000) != 0 || (*(void *)&a4 & 0xFFFFFFFFFFFFFLL) == 0)
    && (~*(void *)&a5 & 0x7FF0000000000000) != 0)
  {
    double v25 = *(double *)(a2 + 32);
    double v26 = *(double *)(a2 + 40);
    *(double *)&__dst[7] = v25;
    *((double *)&__dst[7] + 1) = v26;
    *(double *)&__dst[2] = v25;
    *((double *)&__dst[2] + 1) = v26;
    __dst[12] = 0uLL;
    specialized Text.Effect.AttributeTracker.Value.updateSettlingTime(spring:target:at:)(a2, a4, a5, a6, a7);
    if (BYTE8(__dst[17]))
    {
      if (a7 < 0.0) {
        double v27 = 0.0;
      }
      else {
        double v27 = a7;
      }
    }
    else
    {
      double v27 = a7 - *(double *)&__dst[17];
      if (a7 - *(double *)&__dst[17] < 0.0) {
        double v27 = 0.0;
      }
    }
    double v28 = *(double *)&__dst[7];
    char v29 = *(unsigned char *)(a2 + 72);
    double v30 = *(double *)(a2 + 64) - *(double *)&__dst[9];
    float64x2_t v36 = (float64x2_t)__dst[5];
    float64x2_t v37 = (float64x2_t)__dst[6];
    float64x2_t v31 = vsubq_f64(*(float64x2_t *)(a2 + 16), (float64x2_t)__dst[6]);
    v42[0] = vsubq_f64(*(float64x2_t *)a2, (float64x2_t)__dst[5]);
    v42[1] = v31;
    double v43 = v25 - *(double *)&__dst[7];
    double v44 = v26 - *((double *)&__dst[7] + 1);
    float64x2_t v45 = vsubq_f64(*(float64x2_t *)(a2 + 48), (float64x2_t)__dst[8]);
    double v46 = v30;
    char v47 = v29;
    v48[1] = (float64x2_t)__dst[11];
    _DWORD v48[2] = (float64x2_t)__dst[12];
    float64x2_t v34 = *(float64x2_t *)((char *)&__dst[8] + 8);
    float64x2_t v35 = *(float64x2_t *)((char *)&__dst[7] + 8);
    v49[0] = __dst[13];
    *(_OWORD *)((char *)v49 + 9) = *(_OWORD *)((char *)&__dst[13] + 9);
    v48[0] = (float64x2_t)__dst[10];
    specialized Spring.velocity<A>(target:initialVelocity:time:)((uint64_t)v42, v48, (uint64_t)v41, v27, a4, a5);
    specialized Spring.value<A>(target:initialVelocity:time:)((uint64_t)v42, v48, (uint64_t)&v50, v27, a4, a5);
    __dst[5] = vaddq_f64(v36, v50);
    __dst[6] = vaddq_f64(v37, v51);
    *(float64x2_t *)((char *)&__dst[7] + 8) = vaddq_f64(v35, *(float64x2_t *)((char *)v52 + 8));
    *(float64x2_t *)((char *)&__dst[8] + 8) = vaddq_f64(v34, *(float64x2_t *)((char *)&v52[1] + 8));
    __dst[10] = v41[0];
    __dst[11] = v41[1];
    __dst[12] = v41[2];
    __dst[13] = v41[3];
    *(double *)&__dst[7] = v28 + *(double *)v52;
    *(void *)&__dst[14] = *(void *)&v41[4];
    BYTE8(__dst[14]) = BYTE8(v41[4]);
    *(double *)&__dst[17] = a7;
    BYTE8(__dst[17]) = 0;
  }
  else
  {
    if (one-time initialization token for zero != -1) {
      swift_once();
    }
    long long v23 = *(_OWORD *)(a2 + 48);
    __dst[2] = *(_OWORD *)(a2 + 32);
    __dst[3] = v23;
    *(_OWORD *)((char *)&__dst[3] + 9) = *(_OWORD *)(a2 + 57);
    long long v24 = *(_OWORD *)(a2 + 16);
    __dst[0] = *(_OWORD *)a2;
    __dst[1] = v24;
    *(_OWORD *)((char *)&__dst[8] + 9) = *(_OWORD *)((char *)&__dst[3] + 9);
    __dst[7] = __dst[2];
    __dst[8] = v23;
    __dst[5] = __dst[0];
    __dst[6] = v24;
    __dst[10] = static Text.Effect.DrawingState.zero;
    __dst[11] = xmmword_268F73640;
    __dst[12] = xmmword_268F73650;
    __dst[13] = xmmword_268F73660;
    *(void *)&__dst[14] = qword_268F73670;
    BYTE8(__dst[14]) = byte_268F73678;
    *(double *)&__dst[15] = a4;
    *((double *)&__dst[15] + 1) = a5;
    *(double *)&__dst[16] = a6;
    BYTE8(__dst[16]) = 0;
    BYTE8(__dst[17]) = 1;
    *(void *)&__dst[17] = 0;
    *(void *)&__dst[18] = 0;
    BYTE8(__dst[18]) = 1;
  }
  memcpy(v41, __dst, 0x129uLL);
  v52[0] = v41[7];
  v52[1] = v41[8];
  *(_OWORD *)((char *)&v52[1] + 9) = *(_OWORD *)((char *)&v41[8] + 9);
  float64x2_t v50 = (float64x2_t)v41[5];
  float64x2_t v51 = (float64x2_t)v41[6];
  swift_beginAccess();
  specialized Text.Effect.AttributeTracker.Tracker.subscript.setter((uint64_t)v41, a1);
  swift_endAccess();
  long long v32 = v52[1];
  *(_OWORD *)(a3 + 32) = v52[0];
  *(_OWORD *)(a3 + 48) = v32;
  *(_OWORD *)(a3 + 57) = *(_OWORD *)((char *)&v52[1] + 9);
  __n128 result = (__n128)v51;
  *(float64x2_t *)a3 = v50;
  *(__n128 *)(a3 + 16) = result;
  return result;
}

double specialized Text.Effect.AttributeTracker.update<A>(for:target:spring:at:)(uint64_t a1, double a2, double a3, double a4, double a5, double a6)
{
  swift_beginAccess();
  if (!*(void *)(*(void *)(v6 + 16) + 16)) {
    goto LABEL_5;
  }
  long long v13 = *(_OWORD *)(a1 + 16);
  v34[0] = *(_OWORD *)a1;
  long long v14 = *(_OWORD *)(a1 + 32);
  v34[1] = v13;
  _OWORD v34[2] = v14;
  char v35 = *(unsigned char *)(a1 + 48);
  specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v34);
  if ((v15 & 1) == 0) {
    goto LABEL_5;
  }
  type metadata accessor for Text.Effect.AttributeTracker.ValueBox<Text.Effect.DrawingStateAttribute>(0, &lazy cache variable for type metadata for Text.Effect.AttributeTracker.ValueBox<Text.Effect.WidthMultiplierAttribute>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.WidthMultiplierAttribute and conformance Text.Effect.WidthMultiplierAttribute);
  uint64_t v16 = swift_dynamicCastClass();
  if (v16)
  {
    char v17 = *(unsigned char *)(v16 + 96);
    long long v29 = *(_OWORD *)(v16 + 16);
    *(void *)&v30[0] = *(void *)(v16 + 32);
    *(_OWORD *)((char *)v30 + 8) = *(_OWORD *)(v16 + 40);
    *((void *)&v30[1] + 1) = *(void *)(v16 + 56);
    LOBYTE(v31) = *(unsigned char *)(v16 + 64);
    *((void *)&v31 + 1) = *(void *)(v16 + 72);
    LOBYTE(v32) = *(unsigned char *)(v16 + 80);
    *((void *)&v32 + 1) = *(void *)(v16 + 88);
  }
  else
  {
LABEL_5:
    __asm { FMOV            V0.2D, #1.0 }
    long long v29 = _Q0;
    memset(v30, 0, sizeof(v30));
    char v17 = 1;
    LOBYTE(v31) = 1;
    *((void *)&v31 + 1) = 0;
    LOBYTE(v32) = 1;
    *((void *)&v32 + 1) = 0;
  }
  char v33 = v17;
  swift_endAccess();
  if (((~*(void *)&a3 & 0x7FF0000000000000) != 0 || (*(void *)&a3 & 0xFFFFFFFFFFFFFLL) == 0)
    && (~*(void *)&a4 & 0x7FF0000000000000) != 0)
  {
    specialized Text.Effect.AttributeTracker.Value.updateSettlingTime(spring:target:at:)(a3, a4, a5, a2, a6);
    if (v32)
    {
      if (a6 < 0.0) {
        double v23 = 0.0;
      }
      else {
        double v23 = a6;
      }
    }
    else
    {
      double v23 = a6 - *((double *)&v31 + 1);
      if (a6 - *((double *)&v31 + 1) < 0.0) {
        double v23 = 0.0;
      }
    }
    double v24 = a2 - *((double *)&v29 + 1);
    specialized Spring.velocity<A>(target:initialVelocity:time:)(v24, *(double *)v30, v23, a3, a4);
    uint64_t v26 = v25;
    specialized Spring.value<A>(target:initialVelocity:time:)(v24, *(double *)v30, v23, a3, a4);
    *((double *)&v29 + 1) = *((double *)&v29 + 1) + v27;
    *(void *)&v30[0] = v26;
    *((double *)&v31 + 1) = a6;
    LOBYTE(v32) = 0;
  }
  else
  {
    *(double *)&long long v29 = a2;
    *((double *)&v29 + 1) = a2;
    *(void *)&v30[0] = 0;
    *((double *)v30 + 1) = a3;
    *(double *)&v30[1] = a4;
    *((double *)&v30[1] + 1) = a5;
    LOBYTE(v31) = 0;
    *((void *)&v31 + 1) = 0;
    LOBYTE(v32) = 1;
    *((void *)&v32 + 1) = 0;
    char v33 = 1;
  }
  v36[2] = v30[1];
  v36[3] = v31;
  v36[4] = v32;
  char v37 = v33;
  v36[0] = v29;
  v36[1] = v30[0];
  swift_beginAccess();
  specialized Text.Effect.AttributeTracker.Tracker.subscript.setter((uint64_t)v36, a1);
  swift_endAccess();
  return *((double *)&v29 + 1);
}

unint64_t specialized Text.Effect.AttributeTracker.Tracker.ensureEntry<A>(for:value:)(uint64_t a1, uint64_t *a2)
{
  char v3 = v2;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v6 = a2[2];
  uint64_t v7 = a2[3];
  uint64_t v8 = a2[4];
  uint64_t v9 = a2[5];
  uint64_t v10 = a2[6];
  uint64_t v11 = a2[7];
  uint64_t v24 = a2[8];
  char v12 = *((unsigned char *)a2 + 72);
  long long v13 = *(_OWORD *)(a1 + 16);
  v26[0] = *(_OWORD *)a1;
  v26[1] = v13;
  _OWORD v26[2] = *(_OWORD *)(a1 + 32);
  char v27 = *(unsigned char *)(a1 + 48);
  if (!*(void *)(*v2 + 16) || (unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v26), (v15 & 1) == 0))
  {
    if (one-time initialization token for zero != -1) {
      swift_once();
    }
    long long v22 = xmmword_268F73640;
    long long v23 = static Text.Effect.DrawingState.zero;
    long long v20 = xmmword_268F73660;
    long long v21 = xmmword_268F73650;
    uint64_t v19 = qword_268F73670;
    char v16 = byte_268F73678;
    type metadata accessor for Text.Effect.AttributeTracker.ValueBox<Text.Effect.DrawingStateAttribute>(0, &lazy cache variable for type metadata for Text.Effect.AttributeTracker.ValueBox<Text.Effect.DrawingStateAttribute>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.DrawingStateAttribute and conformance Text.Effect.DrawingStateAttribute);
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = v4;
    *(void *)(v17 + 24) = v5;
    *(void *)(v17 + 32) = v6;
    *(void *)(v17 + 40) = v7;
    *(void *)(v17 + 48) = v8;
    *(void *)(v17 + 56) = v9;
    *(void *)(v17 + 64) = v10;
    *(void *)(v17 + 72) = v11;
    *(void *)(v17 + 80) = v24;
    *(unsigned char *)(v17 + 88) = v12;
    *(void *)(v17 + 96) = v4;
    *(void *)(v17 + 104) = v5;
    *(void *)(v17 + 112) = v6;
    *(void *)(v17 + 120) = v7;
    *(void *)(v17 + 128) = v8;
    *(void *)(v17 + 136) = v9;
    *(void *)(v17 + 144) = v10;
    *(void *)(v17 + 152) = v11;
    *(void *)(v17 + 160) = v24;
    *(unsigned char *)(v17 + 168) = v12;
    *(_OWORD *)(v17 + 176) = v23;
    *(_OWORD *)(v17 + 192) = v22;
    *(_OWORD *)(v17 + 208) = v21;
    *(_OWORD *)(v17 + 224) = v20;
    *(void *)(v17 + 240) = v19;
    *(unsigned char *)(v17 + 248) = v16;
    *(void *)(v17 + 256) = 0;
    *(void *)(v17 + 264) = 0;
    *(void *)(v17 + 272) = 0;
    *(unsigned char *)(v17 + 280) = 1;
    *(void *)(v17 + 288) = 0;
    *(unsigned char *)(v17 + 296) = 1;
    *(void *)(v17 + 304) = 0;
    *(unsigned char *)(v17 + 312) = 1;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v25 = *v3;
    *char v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v17, (uint64_t)v26, isUniquelyReferenced_nonNull_native);
    *char v3 = v25;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t Text.Effect.TransformContext.subcomponents(for:)(uint64_t a1)
{
  unint64_t v2 = v1[34];
  if (!v2) {
    goto LABEL_28;
  }
  uint64_t v3 = v1[42];
  unint64_t v4 = a1 - v3;
  if (__OFSUB__(a1, v3)) {
    goto LABEL_25;
  }
  if ((v4 & 0x8000000000000000) != 0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v5 = v1[43];
  if (v4 < *(void *)(v5 + 16))
  {
    uint64_t v6 = *(void *)(v5 + 56 * v4 + 56);
    unint64_t v31 = v1[44];
    uint64_t v32 = v1[41];
    uint64_t v39 = v1[43];
    uint64_t v40 = v1[42];
    unint64_t v41 = v1[34];
    uint64_t v37 = v1[36];
    uint64_t v38 = v1[35];
    uint64_t v35 = v1[38];
    uint64_t v36 = v1[37];
    uint64_t v33 = v1[40];
    uint64_t v34 = v1[39];
    outlined copy of Text.Effect.TransformContext.DrawingMode(v2, v38, v37, v36, v35, v34, v33, v32, v3, v5, v31);
    swift_bridgeObjectRetain();
    unint64_t v7 = 0;
    uint64_t v8 = v6 + 72;
    uint64_t v9 = (void *)MEMORY[0x263F8EE78];
    uint64_t v42 = v6 + 72;
    uint64_t v43 = v6;
LABEL_6:
    unint64_t v10 = *(void *)(v6 + 16);
    if (v7 <= v10) {
      unint64_t v11 = *(void *)(v6 + 16);
    }
    else {
      unint64_t v11 = v7;
    }
    uint64_t v12 = v8 + 120 * v7;
    while (1)
    {
      if (v10 == v7)
      {
        swift_bridgeObjectRelease();
        outlined consume of Text.Effect.TransformContext.DrawingMode(v41, v38, v37, v36, v35, v34, v33, v32, v40, v39, v31);
        return (uint64_t)v9;
      }
      unint64_t v13 = v7;
      if (v11 == v7) {
        break;
      }
      long long v14 = (uint64_t *)v12;
      char v15 = *(void **)(v12 - 40);
      char v16 = *(unsigned char *)(v12 + 72);
      if ((v16 - 3) > 1u)
      {
        uint64_t v17 = 1;
LABEL_16:
        uint64_t v18 = *(v14 - 4);
        uint64_t v19 = *(v14 - 3);
        uint64_t v20 = *(v14 - 2);
        uint64_t v21 = *(v14 - 1);
        uint64_t v22 = *v14;
        uint64_t v45 = v14[8];
        uint64_t v46 = v14[7];
        uint64_t v47 = v14[6];
        uint64_t v48 = v14[5];
        uint64_t v49 = v14[4];
        uint64_t v50 = v14[3];
        uint64_t v51 = v14[2];
        uint64_t v52 = v14[1];
        outlined copy of Text.Effect.PathInterpolator.Glyph(v15, v18, v19, v20, v21, *v14, v52, v51, v50, v49, v48, v47, v46, v45, v16);
        uint64_t v56 = v18;
        uint64_t v54 = v21;
        uint64_t v55 = v20;
        uint64_t v53 = v22;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
        }
        uint64_t v23 = 0;
        unint64_t v7 = v13 + 1;
        uint64_t v24 = v9[2];
        uint64_t v25 = 3 * v24;
        uint64_t v26 = a1;
        do
        {
          unint64_t v27 = v9[3];
          if (v24 + v23 >= v27 >> 1)
          {
            long long v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v27 > 1), v24 + v23 + 1, 1, v9);
            uint64_t v26 = a1;
            uint64_t v9 = v29;
          }
          long long v9[2] = v24 + v23 + 1;
          double v28 = &v9[v25];
          v28[5] = v13;
          v28[6] = v23;
          v28[4] = v26;
          v25 += 3;
          ++v23;
        }
        while (v17 != v23);
        outlined consume of Text.Effect.PathInterpolator.Glyph(v15, v56, v19, v55, v54, v53, v52, v51, v50, v49, v48, v47, v46, v45, v16);
        uint64_t v8 = v42;
        uint64_t v6 = v43;
        goto LABEL_6;
      }
      uint64_t v17 = v15[2];
      v12 += 120;
      ++v7;
      if (v17) {
        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
LABEL_27:
  __break(1u);
LABEL_28:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void Text.Effect.TransformContext.subcomponentBounds(for:)(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (!v3[34]) {
    goto LABEL_13;
  }
  uint64_t v4 = v3[42];
  BOOL v5 = __OFSUB__(a1, v4);
  unint64_t v6 = a1 - v4;
  if (v5)
  {
    __break(1u);
    goto LABEL_9;
  }
  if ((v6 & 0x8000000000000000) != 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v7 = v3[43];
  if (v6 >= *(void *)(v7 + 16))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if ((a2 & 0x8000000000000000) == 0)
  {
    if (*(void *)(*(void *)(v7 + 56 * v6 + 56) + 16) > a2)
    {
      Text.Effect.PathInterpolator.Glyph.bounds(for:)(a3);
      return;
    }
    goto LABEL_12;
  }
LABEL_11:
  __break(1u);
LABEL_12:
  __break(1u);
LABEL_13:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

unint64_t Text.Effect.TransformContext.draw(position:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  if (*(unsigned char *)(v5 + 56))
  {
    uint64_t v10 = *(uint64_t *)a1;
    double v11 = *(double *)(a1 + 8);
    double v12 = *(double *)(a1 + 16);
    uint64_t v13 = *(void *)(a1 + 24);
    uint64_t v14 = *(void *)(a1 + 32);
    double v15 = *(double *)(a1 + 40);
    double v16 = *(double *)(a1 + 48);
    uint64_t v17 = *(void *)(a1 + 56);
    uint64_t v18 = *(void *)(a1 + 64);
    char v19 = *(unsigned char *)(a1 + 72);
    uint64_t v20 = *(void *)(v5 + 8);
    *(void *)&long long v96 = &type metadata for Text.Effect.DrawingStateAttribute;
    *((void *)&v96 + 1) = v20;
    *(void *)&long long v97 = a2;
    *((void *)&v97 + 1) = a3;
    LOBYTE(v98) = 0;
    uint64_t v99 = a4;
    LOBYTE(v100) = 0;
    uint64_t v51 = v10;
    if (one-time initialization token for zero != -1)
    {
      swift_once();
      uint64_t v10 = v51;
    }
    LOBYTE(v92[0]) = 1;
    char v81 = 1;
    uint64_t v52 = v10;
    double v53 = v11;
    double v54 = v12;
    *(void *)&long long v55 = v13;
    *((void *)&v55 + 1) = v14;
    double v56 = v15;
    double v57 = v16;
    uint64_t v58 = v17;
    uint64_t v59 = v18;
    char v60 = v19;
    *(void *)&long long v61 = v10;
    *((double *)&v61 + 1) = v11;
    *(double *)&long long v62 = v12;
    *((void *)&v62 + 1) = v13;
    *(void *)&long long v63 = v14;
    *((double *)&v63 + 1) = v15;
    *(double *)&long long v64 = v16;
    *((void *)&v64 + 1) = v17;
    *(void *)&long long v65 = v18;
    BYTE8(v65) = v19;
    long long v66 = static Text.Effect.DrawingState.zero;
    long long v67 = xmmword_268F73640;
    long long v68 = xmmword_268F73650;
    long long v69 = xmmword_268F73660;
    *(void *)&long long v70 = qword_268F73670;
    BYTE8(v70) = byte_268F73678;
    *(void *)&long long v72 = 0;
    long long v71 = 0uLL;
    BYTE8(v72) = 1;
    *(void *)&long long v73 = 0;
    BYTE8(v73) = 1;
    *(void *)&long long v74 = 0;
    BYTE8(v74) = 1;
    swift_beginAccess();
    specialized Text.Effect.AttributeTracker.Tracker.subscript.setter((uint64_t)&v52, (uint64_t)&v96);
    swift_endAccess();
    double v21 = *(double *)&v51;
  }
  else
  {
    double v22 = *(double *)(v5 + 48);
    uint64_t v23 = *(void *)v5;
    double v24 = *(double *)(v5 + 8);
    char v25 = *(unsigned char *)(v5 + 16);
    double v26 = *(double *)(v5 + 40);
    uint64_t v27 = *(void *)(v5 + 64);
    char v28 = *(unsigned char *)(v5 + 72);
    uint64_t v29 = *(void *)(v5 + 368);
    char v30 = *(unsigned char *)(v5 + 376);
    uint64_t v52 = *(void *)v5;
    double v53 = v24;
    LOBYTE(v54) = v25;
    long long v55 = *(_OWORD *)(v5 + 24);
    double v56 = v26;
    double v57 = v22;
    LOBYTE(v58) = 0;
    uint64_t v59 = v27;
    char v60 = v28;
    long long v31 = *(_OWORD *)(v5 + 96);
    long long v61 = *(_OWORD *)(v5 + 80);
    long long v62 = v31;
    long long v32 = *(_OWORD *)(v5 + 128);
    long long v63 = *(_OWORD *)(v5 + 112);
    long long v64 = v32;
    long long v33 = *(_OWORD *)(v5 + 160);
    long long v65 = *(_OWORD *)(v5 + 144);
    long long v66 = v33;
    long long v34 = *(_OWORD *)(v5 + 192);
    long long v67 = *(_OWORD *)(v5 + 176);
    long long v68 = v34;
    long long v35 = *(_OWORD *)(v5 + 224);
    long long v69 = *(_OWORD *)(v5 + 208);
    long long v70 = v35;
    long long v36 = *(_OWORD *)(v5 + 256);
    long long v71 = *(_OWORD *)(v5 + 240);
    long long v72 = v36;
    long long v37 = *(_OWORD *)(v5 + 288);
    long long v73 = *(_OWORD *)(v5 + 272);
    long long v74 = v37;
    long long v38 = *(_OWORD *)(v5 + 320);
    long long v75 = *(_OWORD *)(v5 + 304);
    long long v76 = v38;
    long long v39 = *(_OWORD *)(v5 + 352);
    long long v77 = *(_OWORD *)(v5 + 336);
    long long v78 = v39;
    uint64_t v79 = v29;
    char v80 = v30;
    double v40 = v26 - v22;
    if (v40 < 0.0) {
      double v41 = 0.0;
    }
    else {
      double v41 = v40;
    }
    uint64_t v42 = *(void *)(a1 + 32);
    uint64_t v43 = *(void *)(a1 + 40);
    v92[0] = &type metadata for Text.Effect.DrawingStateAttribute;
    *(double *)&v92[1] = v24;
    v92[2] = v23;
    v92[3] = 0;
    char v93 = 1;
    uint64_t v94 = 0;
    char v95 = 1;
    swift_beginAccess();
    specialized Text.Effect.AttributeTracker.Tracker.ensureEntry<A>(for:value:)((uint64_t)v92, (uint64_t *)a1);
    swift_endAccess();
    outlined retain of Text.Effect.TransformContext((uint64_t)&v52);
    long long v96 = 0u;
    long long v97 = 0u;
    uint64_t v98 = v42;
    uint64_t v99 = v43;
    __asm { FMOV            V0.2D, #1.0 }
    long long v100 = _Q0;
    uint64_t v101 = 0x3FF0000000000000;
    char v102 = 0;
    specialized Spring.settlingDuration<A>(target:initialVelocity:epsilon:)(1.0, 0.0, 0.001, 0.0, 10.0);
    Spring.scaledResponse(_:)(0.2 / v49);
    outlined release of Text.Effect.TransformContext((uint64_t)&v52);
    specialized Text.Effect.AttributeTracker.update<A>(for:target:spring:at:)((uint64_t)v92, (uint64_t)&v96, (uint64_t)&v82, v82, v83, v84, v41);
    double v21 = v82;
    double v11 = v83;
    double v12 = v84;
    uint64_t v13 = v85;
    uint64_t v14 = v86;
    double v15 = v87;
    double v16 = v88;
    uint64_t v17 = v89;
    uint64_t v18 = v90;
    char v19 = v91;
  }
  double v82 = v21;
  double v83 = v11;
  double v84 = v12;
  uint64_t v85 = v13;
  uint64_t v86 = v14;
  double v87 = v15;
  double v88 = v16;
  uint64_t v89 = v17;
  uint64_t v90 = v18;
  char v91 = v19;
  return Text.Effect.TransformContext.draw(state:keyPath:)((uint64_t)&v82, a2, a3, a4, 0);
}

void Text.Effect.TransformContext.record(target:for:spring:)(uint64_t a1@<X0>, double a2@<X1>, double *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v11 = a4;
  if (__OFSUB__(*(void *)v4, *(void *)&a2))
  {
    __break(1u);
LABEL_35:
    uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
LABEL_14:
    unint64_t v50 = v8[2];
    unint64_t v49 = v8[3];
    uint64_t v51 = v133;
    if (v50 >= v49 >> 1)
    {
      char v95 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v49 > 1), v50 + 1, 1, v8);
      uint64_t v51 = v133;
      uint64_t v101 = v95;
    }
    else
    {
      uint64_t v101 = v8;
    }
    uint64_t v166 = v128;
    uint64_t v167 = v6;
    uint64_t v168 = v7;
    *(void *)&long long v169 = v4;
    *((void *)&v169 + 1) = v108;
    double v170 = *(double *)&v106;
    double v171 = *(double *)&v104;
    uint64_t v172 = v130;
    uint64_t v173 = v105;
    uint64_t v174 = v103;
    *(void *)&long long v175 = v102;
    *((void *)&v175 + 1) = v51;
    *(double *)&long long v176 = v9;
    double v14 = v10;
    *((double *)&v176 + 1) = v10;
    uint64_t v16 = v123;
    uint64_t v15 = v125;
    *(void *)&long long v177 = v125;
    *((void *)&v177 + 1) = v123;
    double v18 = v118;
    double v17 = v121;
    *(double *)&long long v178 = v121;
    *((double *)&v178 + 1) = v118;
    uint64_t v20 = v112;
    uint64_t v19 = v115;
    *(void *)&long long v179 = v115;
    *((void *)&v179 + 1) = v112;
    char v21 = v132;
    LOBYTE(v180) = v132;
    _s7SwiftUI4TextVAAE6EffectO11DisplayInfoV13DrawOperationOWOi1_((uint64_t)&v166);
    v101[2] = v50 + 1;
    outlined init with take of Text.Effect.DisplayInfo.DrawOperation((uint64_t)&v166, (uint64_t)&v101[27 * v50 + 4]);
    outlined consume of Text.Effect.TransformContext.DrawingMode(v128, v6, v7, v4, v108, v106, v104, v130, v105, v103, v102);
    uint64_t v13 = v133;
    v5[33] = v101;
    uint64_t v11 = v109;
    goto LABEL_33;
  }
  uint64_t v5 = (void *)v4;
  uint64_t v13 = *(void *)a1;
  double v9 = *(double *)(a1 + 8);
  double v14 = *(double *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  double v17 = *(double *)(a1 + 40);
  double v18 = *(double *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  uint64_t v20 = *(void *)(a1 + 64);
  char v21 = *(unsigned char *)(a1 + 72);
  if (*(void *)v4 != *(void *)&a2)
  {
    unint64_t v43 = *(void *)(v4 + 272);
    if (!v43) {
      goto LABEL_33;
    }
    uint64_t v109 = a4;
    uint64_t v112 = *(void *)(a1 + 64);
    uint64_t v115 = *(void *)(a1 + 56);
    double v118 = *(double *)(a1 + 48);
    double v121 = *(double *)(a1 + 40);
    uint64_t v123 = *(void *)(a1 + 32);
    uint64_t v125 = *(void *)(a1 + 24);
    double v10 = *(double *)(a1 + 16);
    uint64_t v133 = *(void *)a1;
    uint64_t v45 = v5[35];
    uint64_t v44 = v5[36];
    uint64_t v46 = v5[37];
    uint64_t v48 = v5[43];
    unint64_t v47 = v5[44];
    uint64_t v8 = (void *)v5[33];
    uint64_t v105 = v5[42];
    uint64_t v106 = v5[39];
    uint64_t v108 = v5[38];
    uint64_t v104 = v5[40];
    uint64_t v130 = v5[41];
    outlined copy of Text.Effect.TransformContext.DrawingMode(v43, v45, v44, v46, v108, v106, v104, v130, v105, v48, v47);
    unint64_t v128 = v43;
    swift_retain();
    uint64_t v7 = v44;
    swift_retain();
    uint64_t v4 = v46;
    swift_retain();
    uint64_t v103 = v48;
    swift_bridgeObjectRetain();
    unint64_t v102 = v47;
    outlined copy of Text.Effect.PathInterpolator.MapKeys(v47);
    char v132 = v21;
    uint64_t v6 = v45;
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_14;
    }
    goto LABEL_35;
  }
  if (*(unsigned char *)(v4 + 16))
  {
    double v22 = *(double *)(v4 + 8);
    long long v156 = &type metadata for Text.Effect.DrawingStateAttribute;
    double v157 = v22;
    double v158 = a2;
    uint64_t v159 = 0;
    LOBYTE(v160) = 1;
    double v161 = 0.0;
    LOBYTE(v162) = 1;
    if (one-time initialization token for zero != -1)
    {
      uint64_t v127 = v15;
      double v96 = v14;
      double v97 = v9;
      uint64_t v98 = v13;
      swift_once();
      uint64_t v13 = v98;
      double v9 = v97;
      double v14 = v96;
      uint64_t v15 = v127;
    }
    LOBYTE(v195[0]) = 1;
    LOBYTE(v154) = 1;
    char v153 = 1;
    uint64_t v166 = v13;
    *(double *)&uint64_t v167 = v9;
    *(double *)&uint64_t v168 = v14;
    *(void *)&long long v169 = v15;
    *((void *)&v169 + 1) = v16;
    double v170 = v17;
    double v171 = v18;
    uint64_t v172 = v19;
    uint64_t v173 = v20;
    LOBYTE(v174) = v21;
    uint64_t v134 = v13;
    *(void *)&long long v175 = v13;
    *((double *)&v175 + 1) = v9;
    *(double *)&long long v176 = v14;
    *((void *)&v176 + 1) = v15;
    *(void *)&long long v177 = v16;
    *((double *)&v177 + 1) = v17;
    *(double *)&long long v178 = v18;
    *((void *)&v178 + 1) = v19;
    *(void *)&long long v179 = v20;
    BYTE8(v179) = v21;
    long long v180 = static Text.Effect.DrawingState.zero;
    long long v181 = xmmword_268F73640;
    long long v182 = xmmword_268F73650;
    long long v183 = xmmword_268F73660;
    *(void *)&long long v184 = qword_268F73670;
    BYTE8(v184) = byte_268F73678;
    *(void *)&long long v186 = 0;
    long long v185 = 0uLL;
    BYTE8(v186) = 1;
    *(void *)&long long v187 = 0;
    BYTE8(v187) = 1;
    *(void *)&long long v188 = 0;
    BYTE8(v188) = 1;
    swift_beginAccess();
    specialized Text.Effect.AttributeTracker.Tracker.subscript.setter((uint64_t)&v166, (uint64_t)&v156);
    swift_endAccess();
    unint64_t v23 = *(void *)(v4 + 272);
    if (!v23)
    {
      uint64_t v13 = v134;
      goto LABEL_33;
    }
    uint64_t v24 = *(void *)(v4 + 288);
    uint64_t v25 = *(void *)(v4 + 296);
    uint64_t v27 = *(void *)(v4 + 344);
    unint64_t v26 = *(void *)(v4 + 352);
    char v28 = *(void **)(v4 + 264);
    uint64_t v113 = v5[38];
    uint64_t v116 = v5[42];
    uint64_t v129 = v5[40];
    uint64_t v131 = v5[35];
    uint64_t v124 = v5[39];
    uint64_t v126 = v5[41];
    outlined copy of Text.Effect.TransformContext.DrawingMode(v23, v131, v5[36], v5[37], v113, v124, v129, v126, v116, v5[43], v5[44]);
    unint64_t v122 = v23;
    swift_retain();
    uint64_t v29 = v24;
    swift_retain();
    uint64_t v30 = v25;
    long long v31 = v28;
    swift_retain();
    uint64_t v110 = v27;
    swift_bridgeObjectRetain();
    unint64_t v32 = v26;
    outlined copy of Text.Effect.PathInterpolator.MapKeys(v26);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      long long v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31[2] + 1, 1, v31);
    }
    unint64_t v34 = v31[2];
    unint64_t v33 = v31[3];
    uint64_t v35 = v134;
    if (v34 >= v33 >> 1)
    {
      uint64_t v99 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v33 > 1), v34 + 1, 1, v31);
      uint64_t v35 = v134;
      __int8 v119 = v99;
    }
    else
    {
      __int8 v119 = v31;
    }
    *(void *)&long long v135 = v122;
    *((void *)&v135 + 1) = v131;
    uint64_t v107 = v29;
    *(void *)&long long v136 = v29;
    *((void *)&v136 + 1) = v30;
    uint64_t v37 = v113;
    uint64_t v36 = v116;
    uint64_t v137 = v113;
    uint64_t v138 = v124;
    *(void *)&long long v139 = v129;
    *((void *)&v139 + 1) = v126;
    uint64_t v38 = v110;
    uint64_t v140 = v116;
    uint64_t v141 = v110;
    unint64_t v39 = v32;
    unint64_t v142 = v32;
    uint64_t v143 = v35;
    double v144 = v9;
    double v145 = v14;
    uint64_t v146 = v15;
    uint64_t v147 = v16;
    double v148 = v17;
    double v149 = v18;
    uint64_t v150 = v19;
    uint64_t v151 = v20;
    char v152 = v21;
    _s7SwiftUI4TextVAAE6EffectO11DisplayInfoV13DrawOperationOWOi1_((uint64_t)&v135);
    double v40 = v119;
    v119[2] = v34 + 1;
    uint64_t v41 = (uint64_t)&v119[27 * v34 + 4];
    uint64_t v42 = (uint64_t *)&v135;
    goto LABEL_31;
  }
  if ((*(unsigned char *)(v4 + 56) & 1) == 0)
  {
    double v58 = *(double *)(v4 + 48);
    uint64_t v59 = *(uint64_t *)(v4 + 8);
    double v60 = *(double *)(v4 + 40);
    uint64_t v61 = *(void *)(v4 + 64);
    char v62 = *(unsigned char *)(v4 + 72);
    uint64_t v63 = *(void *)(v4 + 368);
    char v64 = *(unsigned char *)(v4 + 376);
    uint64_t v166 = *(void *)&a2;
    uint64_t v167 = v59;
    LOBYTE(v168) = 0;
    long long v169 = *(_OWORD *)(v4 + 24);
    double v170 = v60;
    double v171 = v58;
    LOBYTE(v172) = 0;
    uint64_t v173 = v61;
    LOBYTE(v174) = v62;
    long long v65 = *(_OWORD *)(v4 + 96);
    long long v175 = *(_OWORD *)(v4 + 80);
    long long v176 = v65;
    long long v66 = *(_OWORD *)(v4 + 128);
    long long v177 = *(_OWORD *)(v4 + 112);
    long long v178 = v66;
    long long v67 = *(_OWORD *)(v4 + 160);
    long long v179 = *(_OWORD *)(v4 + 144);
    long long v180 = v67;
    long long v68 = *(_OWORD *)(v4 + 192);
    long long v181 = *(_OWORD *)(v4 + 176);
    long long v182 = v68;
    long long v69 = *(_OWORD *)(v4 + 224);
    long long v183 = *(_OWORD *)(v4 + 208);
    long long v184 = v69;
    long long v70 = *(_OWORD *)(v4 + 256);
    long long v185 = *(_OWORD *)(v4 + 240);
    long long v186 = v70;
    long long v71 = *(_OWORD *)(v4 + 288);
    long long v187 = *(_OWORD *)(v4 + 272);
    long long v188 = v71;
    long long v72 = *(_OWORD *)(v4 + 320);
    long long v189 = *(_OWORD *)(v4 + 304);
    long long v190 = v72;
    long long v73 = *(_OWORD *)(v4 + 352);
    long long v191 = *(_OWORD *)(v4 + 336);
    long long v192 = v73;
    uint64_t v193 = v63;
    char v194 = v64;
    double v74 = v60 - v58;
    if (v74 < 0.0) {
      double v75 = 0.0;
    }
    else {
      double v75 = v74;
    }
    uint64_t v76 = *(void *)(a1 + 32);
    uint64_t v77 = *(void *)(a1 + 40);
    v195[0] = &type metadata for Text.Effect.DrawingStateAttribute;
    v195[1] = v59;
    *(double *)&v195[2] = a2;
    v195[3] = 0;
    char v196 = 1;
    uint64_t v197 = 0;
    char v198 = 1;
    swift_beginAccess();
    specialized Text.Effect.AttributeTracker.Tracker.ensureEntry<A>(for:value:)((uint64_t)v195, (uint64_t *)a1);
    swift_endAccess();
    outlined retain of Text.Effect.TransformContext((uint64_t)&v166);
    long long v135 = 0u;
    long long v136 = 0u;
    uint64_t v137 = v76;
    uint64_t v138 = v77;
    __asm { FMOV            V0.2D, #1.0 }
    long long v139 = _Q0;
    uint64_t v140 = 0x3FF0000000000000;
    LOBYTE(v141) = 0;
    specialized Spring.settlingDuration<A>(target:initialVelocity:epsilon:)(1.0, 0.0, 0.001, 0.0, 10.0);
    long long v154 = xmmword_2461BDB90;
    uint64_t v155 = 0x3FF0000000000000;
    Spring.scaledResponse(_:)(0.2 / v83);
    outlined release of Text.Effect.TransformContext((uint64_t)&v166);
    specialized Text.Effect.AttributeTracker.update<A>(for:target:spring:at:)((uint64_t)v195, (uint64_t)&v135, (uint64_t)&v156, *(double *)&v156, v157, v158, v75);
    uint64_t v13 = (uint64_t)v156;
    double v9 = v157;
    double v14 = v158;
    uint64_t v15 = v159;
    uint64_t v16 = v160;
    double v17 = v161;
    double v18 = v162;
    uint64_t v19 = v163;
    uint64_t v20 = v164;
    char v21 = v165;
    unint64_t v57 = *(void *)(v4 + 272);
    if (!v57) {
      goto LABEL_33;
    }
LABEL_26:
    uint64_t v134 = v13;
    uint64_t v84 = *(void *)(v4 + 288);
    uint64_t v85 = *(void *)(v4 + 296);
    uint64_t v87 = *(void *)(v4 + 344);
    unint64_t v86 = *(void *)(v4 + 352);
    double v88 = *(void **)(v4 + 264);
    uint64_t v114 = v5[38];
    uint64_t v117 = v5[42];
    uint64_t v129 = v5[40];
    uint64_t v131 = v5[35];
    uint64_t v124 = v5[39];
    uint64_t v126 = v5[41];
    outlined copy of Text.Effect.TransformContext.DrawingMode(v57, v131, v5[36], v5[37], v114, v124, v129, v126, v117, v5[43], v5[44]);
    unint64_t v122 = v57;
    swift_retain();
    uint64_t v89 = v84;
    swift_retain();
    uint64_t v30 = v85;
    uint64_t v90 = v88;
    swift_retain();
    uint64_t v111 = v87;
    swift_bridgeObjectRetain();
    unint64_t v91 = v86;
    outlined copy of Text.Effect.PathInterpolator.MapKeys(v86);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v90 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v90[2] + 1, 1, v90);
    }
    unint64_t v93 = v90[2];
    unint64_t v92 = v90[3];
    uint64_t v94 = v134;
    if (v93 >= v92 >> 1)
    {
      long long v100 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v92 > 1), v93 + 1, 1, v90);
      uint64_t v94 = v134;
      uint64_t v120 = v100;
    }
    else
    {
      uint64_t v120 = v90;
    }
    uint64_t v166 = v122;
    uint64_t v167 = v131;
    uint64_t v107 = v89;
    uint64_t v168 = v89;
    *(void *)&long long v169 = v30;
    uint64_t v37 = v114;
    uint64_t v36 = v117;
    *((void *)&v169 + 1) = v114;
    double v170 = *(double *)&v124;
    double v171 = *(double *)&v129;
    uint64_t v172 = v126;
    uint64_t v173 = v117;
    uint64_t v38 = v111;
    uint64_t v174 = v111;
    unint64_t v39 = v91;
    *(void *)&long long v175 = v91;
    *((void *)&v175 + 1) = v94;
    *(double *)&long long v176 = v9;
    *((double *)&v176 + 1) = v14;
    *(void *)&long long v177 = v15;
    *((void *)&v177 + 1) = v16;
    *(double *)&long long v178 = v17;
    *((double *)&v178 + 1) = v18;
    *(void *)&long long v179 = v19;
    *((void *)&v179 + 1) = v20;
    LOBYTE(v180) = v21;
    _s7SwiftUI4TextVAAE6EffectO11DisplayInfoV13DrawOperationOWOi1_((uint64_t)&v166);
    double v40 = v120;
    v120[2] = v93 + 1;
    uint64_t v41 = (uint64_t)&v120[27 * v93 + 4];
    uint64_t v42 = &v166;
LABEL_31:
    outlined init with take of Text.Effect.DisplayInfo.DrawOperation((uint64_t)v42, v41);
    outlined consume of Text.Effect.TransformContext.DrawingMode(v122, v131, v107, v30, v37, v124, v129, v126, v36, v38, v39);
    uint64_t v13 = v134;
    v5[33] = v40;
    goto LABEL_33;
  }
  double v52 = *a3;
  double v53 = a3[1];
  double v54 = a3[2];
  uint64_t v55 = *(void *)(v4 + 8);
  double v56 = *(double *)(v4 + 40) - *(double *)(v4 + 24);
  if (v56 < 0.0) {
    double v56 = 0.0;
  }
  *(void *)&long long v135 = &type metadata for Text.Effect.DrawingStateAttribute;
  *((void *)&v135 + 1) = v55;
  long long v136 = *(unint64_t *)&a2;
  LOBYTE(v137) = 1;
  uint64_t v138 = 0;
  LOBYTE(v139) = 1;
  specialized Text.Effect.AttributeTracker.update<A>(for:target:spring:at:)((uint64_t)&v135, a1, (uint64_t)&v166, v52, v53, v54, v56);
  uint64_t v13 = v166;
  double v9 = *(double *)&v167;
  double v14 = *(double *)&v168;
  uint64_t v16 = *((void *)&v169 + 1);
  uint64_t v15 = v169;
  double v17 = v170;
  double v18 = v171;
  uint64_t v19 = v172;
  uint64_t v20 = v173;
  char v21 = v174;
  unint64_t v57 = *(void *)(v4 + 272);
  if (v57) {
    goto LABEL_26;
  }
LABEL_33:
  *(void *)uint64_t v11 = v13;
  *(double *)(v11 + 8) = v9;
  *(double *)(v11 + 16) = v14;
  *(void *)(v11 + 24) = v15;
  *(void *)(v11 + 32) = v16;
  *(double *)(v11 + 40) = v17;
  *(double *)(v11 + 48) = v18;
  *(void *)(v11 + 56) = v19;
  *(void *)(v11 + 64) = v20;
  *(unsigned char *)(v11 + 72) = v21;
}

unint64_t Text.Effect.TransformContext.draw(state:keyPath:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v13 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  uint64_t v44 = *(void *)(a1 + 64);
  char v14 = *(unsigned char *)(a1 + 72);
  unint64_t v15 = *(void *)(v5 + 272);
  if (v15)
  {
    uint64_t v16 = *(void *)(v5 + 280);
    uint64_t v17 = *(void *)(v5 + 288);
    uint64_t v18 = *(void *)(v5 + 296);
    uint64_t v20 = *(void *)(v5 + 344);
    unint64_t v19 = *(void *)(v5 + 352);
    uint64_t v32 = *(void *)(v5 + 368);
    uint64_t v33 = *(void *)(v5 + 360);
    char v31 = *(unsigned char *)(v5 + 376);
    char v21 = *(void **)(v5 + 264);
    uint64_t v35 = *(void *)(v5 + 320);
    uint64_t v36 = *(void *)(v5 + 336);
    uint64_t v40 = *(void *)(v5 + 304);
    uint64_t v42 = *(void *)(v5 + 328);
    uint64_t v43 = *(void *)(v5 + 312);
    outlined copy of Text.Effect.TransformContext.DrawingMode(v15, v16, v17, v18, v40, v43, v35, v42, v36, v20, v19);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    outlined copy of Text.Effect.PathInterpolator.MapKeys(v19);
    char v41 = v14;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      char v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21[2] + 1, 1, v21);
    }
    unint64_t v23 = v21[2];
    unint64_t v22 = v21[3];
    if (v23 >= v22 >> 1) {
      char v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v22 > 1), v23 + 1, 1, v21);
    }
    unint64_t v45 = v15;
    uint64_t v46 = v16;
    uint64_t v47 = v17;
    uint64_t v48 = v18;
    uint64_t v49 = v40;
    uint64_t v50 = v43;
    uint64_t v51 = v35;
    uint64_t v52 = v42;
    uint64_t v53 = v36;
    *(void *)double v54 = v20;
    *(void *)&v54[8] = v19;
    *(void *)&v54[16] = v6;
    uint64_t v55 = v7;
    uint64_t v56 = v9;
    uint64_t v57 = v8;
    uint64_t v58 = v11;
    uint64_t v59 = v10;
    uint64_t v60 = v13;
    uint64_t v61 = v12;
    uint64_t v62 = v44;
    char v63 = v41;
    uint64_t v64 = v33;
    uint64_t v65 = v32;
    char v66 = v31;
    uint64_t v67 = a2;
    uint64_t v68 = a3;
    uint64_t v69 = a4;
    char v70 = a5 & 1;
    _s7SwiftUI4TextVAAE6EffectO11DisplayInfoV13DrawOperationOWOi0_((uint64_t)&v45);
    v21[2] = v23 + 1;
    outlined init with take of Text.Effect.DisplayInfo.DrawOperation((uint64_t)&v45, (uint64_t)&v21[27 * v23 + 4]);
    unint64_t result = outlined consume of Text.Effect.TransformContext.DrawingMode(v15, v16, v17, v18, v40, v43, v35, v42, v36, v20, v19);
    *(void *)(v5 + 264) = v21;
  }
  else
  {
    uint64_t v25 = *(void *)(v5 + 360);
    uint64_t v26 = *(void *)(v5 + 368);
    char v27 = *(unsigned char *)(v5 + 376);
    char v28 = *(void **)(v5 + 264);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      char v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28[2] + 1, 1, v28);
    }
    unint64_t v30 = v28[2];
    unint64_t v29 = v28[3];
    if (v30 >= v29 >> 1) {
      char v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v29 > 1), v30 + 1, 1, v28);
    }
    unint64_t v45 = v6;
    uint64_t v46 = v7;
    uint64_t v47 = v9;
    uint64_t v48 = v8;
    uint64_t v49 = v11;
    uint64_t v50 = v10;
    uint64_t v51 = v13;
    uint64_t v52 = v12;
    uint64_t v53 = v44;
    v54[0] = v14;
    *(void *)&v54[4] = v25;
    *(void *)&v54[12] = v26;
    v54[20] = v27;
    _s7SwiftUI4TextVAAE6EffectO11DisplayInfoV13DrawOperationOWOi_((uint64_t)&v45);
    v28[2] = v30 + 1;
    unint64_t result = outlined init with take of Text.Effect.DisplayInfo.DrawOperation((uint64_t)&v45, (uint64_t)&v28[27 * v30 + 4]);
    *(void *)(v5 + 264) = v28;
  }
  return result;
}

void Text.Effect.TransformContext.record(position:for:)(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v15 = v3;
  _ZF = *v3 == a2;
  if (__OFSUB__(*v3, a2))
  {
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v19 = *(void *)a1;
  double v8 = *(double *)(a1 + 8);
  double v9 = *(double *)(a1 + 16);
  uint64_t v10 = *(void *)(a1 + 24);
  uint64_t v11 = *(void *)(a1 + 32);
  double v12 = *(double *)(a1 + 40);
  double v13 = *(double *)(a1 + 48);
  uint64_t v14 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  char v20 = *(unsigned char *)(a1 + 72);
  if (_ZF)
  {
    if (v15[7])
    {
      uint64_t v21 = v15[1];
      *(void *)&long long v168 = &type metadata for Text.Effect.DrawingStateAttribute;
      *((void *)&v168 + 1) = v21;
      long long v169 = a2;
      LOBYTE(v170) = 1;
      uint64_t v171 = 0;
      LOBYTE(v172) = 1;
      uint64_t v96 = v7;
      if (one-time initialization token for zero != -1)
      {
        uint64_t v88 = v14;
        double v89 = v13;
        double v90 = v12;
        uint64_t v91 = v11;
        uint64_t v92 = v10;
        double v93 = v9;
        double v94 = v8;
        uint64_t v95 = v19;
        swift_once();
        uint64_t v19 = v95;
        double v8 = v94;
        double v9 = v93;
        uint64_t v10 = v92;
        uint64_t v11 = v91;
        double v12 = v90;
        double v13 = v89;
        uint64_t v14 = v88;
        uint64_t v7 = v96;
      }
      LOBYTE(v164[0]) = 1;
      char v163 = 1;
      unint64_t v113 = v19;
      double v114 = v8;
      uint64_t v115 = *(void *)&v9;
      *(void *)&long long v116 = v10;
      *((void *)&v116 + 1) = v11;
      double v117 = v12;
      double v118 = v13;
      uint64_t v119 = v14;
      uint64_t v120 = v7;
      LOBYTE(v121) = v20;
      *(void *)&long long v122 = v19;
      *((double *)&v122 + 1) = v8;
      *(double *)&long long v123 = v9;
      *((void *)&v123 + 1) = v10;
      *(void *)&long long v124 = v11;
      *((double *)&v124 + 1) = v12;
      *(double *)&long long v125 = v13;
      *((void *)&v125 + 1) = v14;
      *(void *)&long long v126 = v7;
      BYTE8(v126) = v20;
      uint64_t v22 = v14;
      double v23 = v13;
      double v24 = v12;
      uint64_t v25 = v11;
      uint64_t v26 = v10;
      double v27 = v9;
      double v28 = v8;
      uint64_t v29 = v19;
      long long v127 = static Text.Effect.DrawingState.zero;
      long long v128 = xmmword_268F73640;
      long long v129 = xmmword_268F73650;
      long long v130 = xmmword_268F73660;
      *(void *)&long long v131 = qword_268F73670;
      BYTE8(v131) = byte_268F73678;
      *(void *)&long long v133 = 0;
      long long v132 = 0uLL;
      BYTE8(v133) = 1;
      *(void *)&long long v134 = 0;
      BYTE8(v134) = 1;
      *(void *)&long long v135 = 0;
      BYTE8(v135) = 1;
      swift_beginAccess();
      specialized Text.Effect.AttributeTracker.Tracker.subscript.setter((uint64_t)&v113, (uint64_t)&v168);
      swift_endAccess();
      uint64_t v19 = v29;
      double v8 = v28;
      double v9 = v27;
      uint64_t v10 = v26;
      uint64_t v11 = v25;
      double v12 = v24;
      double v13 = v23;
      uint64_t v14 = v22;
      uint64_t v7 = v96;
      unint64_t v30 = v15[34];
      if (*(double *)&v30 == 0.0) {
        goto LABEL_24;
      }
    }
    else
    {
      double v48 = *((double *)v15 + 6);
      double v49 = *((double *)v15 + 1);
      char v50 = *((unsigned char *)v15 + 16);
      double v51 = *((double *)v15 + 5);
      uint64_t v52 = v15[8];
      char v53 = *((unsigned char *)v15 + 72);
      uint64_t v54 = v15[46];
      char v55 = *((unsigned char *)v15 + 376);
      unint64_t v113 = a2;
      double v114 = v49;
      LOBYTE(v115) = v50;
      long long v116 = *(_OWORD *)(v15 + 3);
      double v117 = v51;
      double v118 = v48;
      LOBYTE(v119) = 0;
      uint64_t v120 = v52;
      LOBYTE(v121) = v53;
      long long v56 = *((_OWORD *)v15 + 6);
      long long v122 = *((_OWORD *)v15 + 5);
      long long v123 = v56;
      long long v57 = *((_OWORD *)v15 + 8);
      long long v124 = *((_OWORD *)v15 + 7);
      long long v125 = v57;
      long long v58 = *((_OWORD *)v15 + 10);
      long long v126 = *((_OWORD *)v15 + 9);
      long long v127 = v58;
      long long v59 = *((_OWORD *)v15 + 12);
      long long v128 = *((_OWORD *)v15 + 11);
      long long v129 = v59;
      long long v60 = *((_OWORD *)v15 + 14);
      long long v130 = *((_OWORD *)v15 + 13);
      long long v131 = v60;
      long long v61 = *((_OWORD *)v15 + 16);
      long long v132 = *((_OWORD *)v15 + 15);
      long long v133 = v61;
      long long v62 = *((_OWORD *)v15 + 18);
      long long v134 = *((_OWORD *)v15 + 17);
      long long v135 = v62;
      long long v63 = *((_OWORD *)v15 + 20);
      long long v136 = *((_OWORD *)v15 + 19);
      long long v137 = v63;
      long long v64 = *((_OWORD *)v15 + 22);
      long long v138 = *((_OWORD *)v15 + 21);
      long long v139 = v64;
      uint64_t v140 = v54;
      char v141 = v55;
      double v65 = v51 - v48;
      if (v65 < 0.0) {
        double v66 = 0.0;
      }
      else {
        double v66 = v65;
      }
      uint64_t v67 = *(void *)(a1 + 32);
      uint64_t v68 = *(void *)(a1 + 40);
      v164[0] = &type metadata for Text.Effect.DrawingStateAttribute;
      *(double *)&v164[1] = v49;
      v164[2] = a2;
      v164[3] = 0;
      char v165 = 1;
      uint64_t v166 = 0;
      char v167 = 1;
      swift_beginAccess();
      specialized Text.Effect.AttributeTracker.Tracker.ensureEntry<A>(for:value:)((uint64_t)v164, (uint64_t *)a1);
      swift_endAccess();
      outlined retain of Text.Effect.TransformContext((uint64_t)&v113);
      long long v168 = 0u;
      long long v169 = 0u;
      uint64_t v170 = v67;
      uint64_t v171 = v68;
      __asm { FMOV            V0.2D, #1.0 }
      long long v172 = _Q0;
      uint64_t v173 = 0x3FF0000000000000;
      char v174 = 0;
      specialized Spring.settlingDuration<A>(target:initialVelocity:epsilon:)(1.0, 0.0, 0.001, 0.0, 10.0);
      Spring.scaledResponse(_:)(0.2 / v73);
      outlined release of Text.Effect.TransformContext((uint64_t)&v113);
      specialized Text.Effect.AttributeTracker.update<A>(for:target:spring:at:)((uint64_t)v164, (uint64_t)&v168, (uint64_t)&v142, v142, v143, v144, v66);
      uint64_t v19 = *(void *)&v142;
      double v8 = v143;
      double v9 = v144;
      uint64_t v10 = v145;
      uint64_t v11 = v146;
      double v12 = *(double *)&v147;
      double v13 = *(double *)&v148;
      uint64_t v14 = v149;
      uint64_t v7 = v150;
      char v20 = v151;
      unint64_t v30 = v15[34];
      if (*(double *)&v30 == 0.0) {
        goto LABEL_24;
      }
    }
    uint64_t v112 = v19;
    uint64_t v75 = v15[35];
    uint64_t v74 = v15[36];
    uint64_t v76 = v15[37];
    uint64_t v78 = v15[43];
    unint64_t v77 = v15[44];
    uint64_t v79 = (void *)v15[33];
    uint64_t v103 = v15[38];
    uint64_t v105 = v15[42];
    uint64_t v107 = v15[39];
    uint64_t v108 = v15[41];
    uint64_t v109 = v15[40];
    outlined copy of Text.Effect.TransformContext.DrawingMode(v30, v75, v74, v76, v103, v107, v109, v108, v105, v78, v77);
    unint64_t v106 = v30;
    swift_retain();
    uint64_t v110 = v74;
    swift_retain();
    uint64_t v6 = v76;
    char v80 = v79;
    swift_retain();
    uint64_t v101 = v78;
    swift_bridgeObjectRetain();
    unint64_t v81 = v77;
    outlined copy of Text.Effect.PathInterpolator.MapKeys(v77);
    double v82 = *(double *)&v75;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      char v80 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v80[2] + 1, 1, v80);
    }
    unint64_t v84 = v80[2];
    unint64_t v83 = v80[3];
    uint64_t v85 = v112;
    if (v84 >= v83 >> 1)
    {
      uint64_t v87 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v83 > 1), v84 + 1, 1, v80);
      uint64_t v85 = v112;
      uint64_t v98 = v87;
    }
    else
    {
      uint64_t v98 = v80;
    }
    uint64_t v41 = v105;
    double v142 = *(double *)&v106;
    uint64_t v99 = *(void *)&v82;
    double v143 = v82;
    double v144 = *(double *)&v110;
    uint64_t v145 = v6;
    uint64_t v42 = v78;
    uint64_t v43 = v103;
    uint64_t v146 = v103;
    uint64_t v147 = v107;
    uint64_t v148 = v109;
    uint64_t v149 = v108;
    uint64_t v150 = v105;
    uint64_t v151 = v101;
    unint64_t v44 = v81;
    unint64_t v152 = v81;
    uint64_t v153 = v85;
    double v154 = v8;
    double v155 = v9;
    uint64_t v156 = v10;
    uint64_t v157 = v11;
    double v158 = v12;
    double v159 = v13;
    uint64_t v160 = v14;
    uint64_t v161 = v7;
    char v162 = v20;
    _s7SwiftUI4TextVAAE6EffectO11DisplayInfoV13DrawOperationOWOi1_((uint64_t)&v142);
    unint64_t v45 = v98;
    v98[2] = v84 + 1;
    uint64_t v46 = (uint64_t)&v98[27 * v84 + 4];
    uint64_t v47 = &v142;
    goto LABEL_23;
  }
  unint64_t v31 = v15[34];
  if (*(double *)&v31 != 0.0)
  {
    uint64_t v112 = *(void *)a1;
    uint64_t v33 = v15[35];
    uint64_t v32 = v15[36];
    uint64_t v34 = v15[37];
    uint64_t v36 = v15[43];
    unint64_t v35 = v15[44];
    uint64_t v37 = (void *)v15[33];
    uint64_t v102 = v15[38];
    uint64_t v104 = v15[42];
    uint64_t v107 = v15[39];
    uint64_t v108 = v15[41];
    uint64_t v109 = v15[40];
    outlined copy of Text.Effect.TransformContext.DrawingMode(v31, v33, v32, v34, v102, v107, v109, v108, v104, v36, v35);
    unint64_t v106 = v31;
    swift_retain();
    uint64_t v110 = v32;
    swift_retain();
    uint64_t v6 = v34;
    uint64_t v5 = v37;
    swift_retain();
    uint64_t v100 = v36;
    swift_bridgeObjectRetain();
    uint64_t v3 = (void *)v35;
    outlined copy of Text.Effect.PathInterpolator.MapKeys(v35);
    char v111 = v20;
    uint64_t v4 = v33;
    if (swift_isUniquelyReferenced_nonNull_native())
    {
LABEL_11:
      unint64_t v39 = v5[2];
      unint64_t v38 = v5[3];
      uint64_t v40 = v112;
      if (v39 >= v38 >> 1)
      {
        unint64_t v86 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v38 > 1), v39 + 1, 1, v5);
        uint64_t v40 = v112;
        double v97 = v86;
      }
      else
      {
        double v97 = v5;
      }
      uint64_t v41 = v104;
      unint64_t v113 = v106;
      double v114 = *(double *)&v4;
      uint64_t v99 = v4;
      uint64_t v115 = v110;
      *(void *)&long long v116 = v6;
      uint64_t v42 = v100;
      uint64_t v43 = v102;
      *((void *)&v116 + 1) = v102;
      double v117 = *(double *)&v107;
      double v118 = *(double *)&v109;
      uint64_t v119 = v108;
      uint64_t v120 = v104;
      uint64_t v121 = v100;
      unint64_t v44 = (unint64_t)v3;
      *(void *)&long long v122 = v3;
      *((void *)&v122 + 1) = v40;
      *(double *)&long long v123 = v8;
      *((double *)&v123 + 1) = v9;
      *(void *)&long long v124 = v10;
      *((void *)&v124 + 1) = v11;
      *(double *)&long long v125 = v12;
      *((double *)&v125 + 1) = v13;
      *(void *)&long long v126 = v14;
      *((void *)&v126 + 1) = v7;
      char v20 = v111;
      LOBYTE(v127) = v111;
      _s7SwiftUI4TextVAAE6EffectO11DisplayInfoV13DrawOperationOWOi1_((uint64_t)&v113);
      unint64_t v45 = v97;
      void v97[2] = v39 + 1;
      uint64_t v46 = (uint64_t)&v97[27 * v39 + 4];
      uint64_t v47 = (double *)&v113;
LABEL_23:
      outlined init with take of Text.Effect.DisplayInfo.DrawOperation((uint64_t)v47, v46);
      outlined consume of Text.Effect.TransformContext.DrawingMode(v106, v99, v110, v6, v43, v107, v109, v108, v41, v42, v44);
      uint64_t v19 = v112;
      v15[33] = v45;
      goto LABEL_24;
    }
LABEL_26:
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
    goto LABEL_11;
  }
LABEL_24:
  *(void *)a3 = v19;
  *(double *)(a3 + 8) = v8;
  *(double *)(a3 + 16) = v9;
  *(void *)(a3 + 24) = v10;
  *(void *)(a3 + 32) = v11;
  *(double *)(a3 + 40) = v12;
  *(double *)(a3 + 48) = v13;
  *(void *)(a3 + 56) = v14;
  *(void *)(a3 + 64) = v7;
  *(unsigned char *)(a3 + 72) = v20;
}

uint64_t outlined retain of Text.Effect.TransformContext(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 280);
  uint64_t v3 = *(void *)(a1 + 288);
  uint64_t v4 = *(void *)(a1 + 296);
  uint64_t v11 = *(void *)(a1 + 304);
  unint64_t v12 = *(void *)(a1 + 272);
  uint64_t v9 = *(void *)(a1 + 320);
  uint64_t v10 = *(void *)(a1 + 312);
  uint64_t v8 = *(void *)(a1 + 328);
  long long v7 = *(_OWORD *)(a1 + 336);
  unint64_t v5 = *(void *)(a1 + 352);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of Text.Effect.TransformContext.DrawingMode(v12, v2, v3, v4, v11, v10, v9, v8, v7, *((uint64_t *)&v7 + 1), v5);
  return a1;
}

uint64_t outlined release of Text.Effect.TransformContext(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 280);
  uint64_t v3 = *(void *)(a1 + 288);
  uint64_t v4 = *(void *)(a1 + 296);
  uint64_t v11 = *(void *)(a1 + 304);
  unint64_t v12 = *(void *)(a1 + 272);
  uint64_t v9 = *(void *)(a1 + 320);
  uint64_t v10 = *(void *)(a1 + 312);
  uint64_t v8 = *(void *)(a1 + 328);
  long long v7 = *(_OWORD *)(a1 + 336);
  unint64_t v5 = *(void *)(a1 + 352);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of Text.Effect.TransformContext.DrawingMode(v12, v2, v3, v4, v11, v10, v9, v8, v7, *((uint64_t *)&v7 + 1), v5);
  return a1;
}

unint64_t lazy protocol witness table accessor for type Text.Effect.DrawingStateAttribute and conformance Text.Effect.DrawingStateAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.DrawingStateAttribute and conformance Text.Effect.DrawingStateAttribute;
  if (!lazy protocol witness table cache variable for type Text.Effect.DrawingStateAttribute and conformance Text.Effect.DrawingStateAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.DrawingStateAttribute and conformance Text.Effect.DrawingStateAttribute);
  }
  return result;
}

uint64_t _s7SwiftUI4TextVAAE6EffectO11DisplayInfoV13DrawOperationOWOi0_(uint64_t result)
{
  char v1 = *(unsigned char *)(result + 208);
  uint64_t v2 = *(void *)(result + 176) & 0x1FFFFFFFFLL;
  *(void *)(result + 160) &= 0xFFFFFFFF000000FFLL;
  *(void *)(result + 176) = v2;
  *(unsigned char *)(result + 208) = v1 & 1 | 0x40;
  return result;
}

uint64_t _s7SwiftUI4TextVAAE6EffectO11DisplayInfoV13DrawOperationOWOi_(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 176) & 0x1FFFFFFFFLL;
  char v2 = *(unsigned char *)(result + 208) & 1;
  *(void *)(result + 160) &= 0xFFFFFFFF000000FFLL;
  *(void *)(result + 176) = v1;
  *(unsigned char *)(result + 208) = v2;
  return result;
}

uint64_t outlined init with take of Double?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Double?(0, (unint64_t *)&lazy cache variable for type metadata for Double?, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for Text.Effect.AttributeTracker.ValueBox<Text.Effect.DrawingStateAttribute>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for Text.Effect.AttributeTracker.ValueBox();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Text.Effect.WidthMultiplierAttribute and conformance Text.Effect.WidthMultiplierAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.WidthMultiplierAttribute and conformance Text.Effect.WidthMultiplierAttribute;
  if (!lazy protocol witness table cache variable for type Text.Effect.WidthMultiplierAttribute and conformance Text.Effect.WidthMultiplierAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.WidthMultiplierAttribute and conformance Text.Effect.WidthMultiplierAttribute);
  }
  return result;
}

unint64_t destroy for Text.Effect.TransformContext.DrawingMode(unint64_t *a1)
{
  unint64_t result = *a1;
  if (result >= 0xFFFFFFFF)
  {
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    unint64_t result = a1[10];
    if (result >= 3)
    {
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t initializeWithCopy for Text.Effect.TransformContext.DrawingMode(uint64_t a1, uint64_t a2)
{
  if (*(void *)a2 < 0xFFFFFFFFuLL)
  {
    long long v9 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v9;
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    long long v10 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v10;
  }
  else
  {
    uint64_t v3 = *(void *)(a2 + 8);
    uint64_t v4 = *(void *)(a2 + 16);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    uint64_t v5 = *(void *)(a2 + 24);
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 24) = v5;
    long long v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v6;
    uint64_t v7 = *(void *)(a2 + 72);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = v7;
    unint64_t v8 = *(void *)(a2 + 80);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    if (v8 >= 3) {
      swift_bridgeObjectRetain();
    }
    *(void *)(a1 + 80) = v8;
  }
  return a1;
}

unint64_t *assignWithCopy for Text.Effect.TransformContext.DrawingMode(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = *a1;
  unint64_t v5 = *a2;
  if (v4 >= 0xFFFFFFFF)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *a1 = v5;
      swift_retain();
      swift_release();
      a1[1] = a2[1];
      a1[2] = a2[2];
      swift_retain();
      swift_release();
      a1[3] = a2[3];
      swift_retain();
      swift_release();
      a1[4] = a2[4];
      a1[5] = a2[5];
      a1[6] = a2[6];
      a1[7] = a2[7];
      a1[8] = a2[8];
      a1[9] = a2[9];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      long long v6 = a1 + 10;
      unint64_t v7 = a2[10];
      if (a1[10] >= 3)
      {
        if (v7 >= 3)
        {
          *long long v6 = v7;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
        }
        else
        {
          outlined destroy of [Double]((uint64_t)(a1 + 10));
          *long long v6 = a2[10];
        }
      }
      else
      {
        *long long v6 = v7;
        if (v7 >= 3) {
          swift_bridgeObjectRetain();
        }
      }
      return a1;
    }
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    if (a1[10] >= 3) {
      swift_bridgeObjectRelease();
    }
LABEL_12:
    long long v9 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v9;
    long long v10 = *((_OWORD *)a2 + 2);
    long long v11 = *((_OWORD *)a2 + 3);
    long long v12 = *((_OWORD *)a2 + 4);
    a1[10] = a2[10];
    *((_OWORD *)a1 + 3) = v11;
    *((_OWORD *)a1 + 4) = v12;
    *((_OWORD *)a1 + 2) = v10;
    return a1;
  }
  if (v5 < 0xFFFFFFFF) {
    goto LABEL_12;
  }
  *a1 = v5;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  unint64_t v8 = a2[10];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v8 >= 3) {
    swift_bridgeObjectRetain();
  }
  a1[10] = v8;
  return a1;
}

uint64_t outlined destroy of [Double](uint64_t a1)
{
  type metadata accessor for Double?(0, &lazy cache variable for type metadata for [Double], MEMORY[0x263F8D488]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for Double?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, void))
{
  if (!*a2)
  {
    unint64_t v4 = a3(0, MEMORY[0x263F8D538]);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t assignWithTake for Text.Effect.TransformContext.DrawingMode(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 < 0xFFFFFFFFuLL)
  {
LABEL_9:
    long long v8 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v8;
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    long long v9 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v9;
    return a1;
  }
  if (*(void *)a2 < 0xFFFFFFFFuLL)
  {
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    if (*(void *)(a1 + 80) >= 3uLL) {
      swift_bridgeObjectRelease();
    }
    goto LABEL_9;
  }
  *(void *)a1 = *(void *)a2;
  swift_release();
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v5 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v5;
  swift_bridgeObjectRelease();
  long long v6 = (unint64_t *)(a1 + 80);
  unint64_t v7 = *(void *)(a2 + 80);
  if (*(void *)(a1 + 80) >= 3uLL)
  {
    if (v7 >= 3)
    {
      *long long v6 = v7;
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of [Double](a1 + 80);
  }
  *long long v6 = v7;
  return a1;
}

uint64_t getEnumTagSinglePayload for Text.Effect.TransformContext.DrawingMode(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 88)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for Text.Effect.TransformContext.DrawingMode(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 80) = 0;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)unint64_t result = 0u;
    *(_DWORD *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 88) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }
  return result;
}

uint64_t destructiveInjectEnumTag for Text.Effect.TransformContext.DrawingMode(uint64_t result, int a2)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    uint64_t v2 = a2 ^ 0x80000000;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
  }
  else
  {
    if (!a2) {
      return result;
    }
    uint64_t v2 = (a2 - 1);
  }
  *(void *)unint64_t result = v2;
  return result;
}

void *type metadata accessor for Text.Effect.TransformContext.DrawingMode()
{
  return &unk_26FA7A120;
}

unint64_t destroy for Text.Effect.TransformContext(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  unint64_t result = *(void *)(a1 + 272);
  if (result)
  {
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    unint64_t result = *(void *)(a1 + 352);
    if (result >= 3)
    {
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t initializeWithCopy for Text.Effect.TransformContext(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  uint64_t v4 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v4;
  uint64_t v5 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v5;
  long long v6 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v6;
  long long v7 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v7;
  long long v8 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v8;
  long long v9 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v9;
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  uint64_t v10 = *(void *)(a2 + 264);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(void *)(a1 + 264) = v10;
  uint64_t v11 = *(void *)(a2 + 272);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v11)
  {
    uint64_t v12 = *(void *)(a2 + 280);
    uint64_t v13 = *(void *)(a2 + 288);
    *(void *)(a1 + 272) = v11;
    *(void *)(a1 + 280) = v12;
    uint64_t v14 = *(void *)(a2 + 296);
    *(void *)(a1 + 288) = v13;
    *(void *)(a1 + 296) = v14;
    long long v15 = *(_OWORD *)(a2 + 320);
    *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
    *(_OWORD *)(a1 + 320) = v15;
    uint64_t v16 = *(void *)(a2 + 344);
    *(void *)(a1 + 336) = *(void *)(a2 + 336);
    *(void *)(a1 + 344) = v16;
    unint64_t v17 = *(void *)(a2 + 352);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    *(void *)(a1 + 352) = v17;
    if (v17 >= 3) {
      swift_bridgeObjectRetain();
    }
  }
  else
  {
    long long v18 = *(_OWORD *)(a2 + 320);
    *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
    *(_OWORD *)(a1 + 320) = v18;
    *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
    *(void *)(a1 + 352) = *(void *)(a2 + 352);
    long long v19 = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 288) = v19;
  }
  *(unsigned char *)(a1 + 376) = *(unsigned char *)(a2 + 376);
  *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
  return a1;
}

uint64_t assignWithCopy for Text.Effect.TransformContext(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = v4;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_retain();
  swift_release();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_retain();
  swift_release();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_retain();
  swift_release();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_retain();
  swift_release();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  swift_retain();
  swift_release();
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = (_OWORD *)(a1 + 272);
  long long v6 = (_OWORD *)(a2 + 272);
  uint64_t v7 = *(void *)(a2 + 272);
  if (*(void *)(a1 + 272))
  {
    if (v7)
    {
      *(void *)(a1 + 272) = v7;
      swift_retain();
      swift_release();
      *(void *)(a1 + 280) = *(void *)(a2 + 280);
      *(void *)(a1 + 288) = *(void *)(a2 + 288);
      swift_retain();
      swift_release();
      *(void *)(a1 + 296) = *(void *)(a2 + 296);
      swift_retain();
      swift_release();
      *(void *)(a1 + 304) = *(void *)(a2 + 304);
      *(void *)(a1 + 312) = *(void *)(a2 + 312);
      *(void *)(a1 + 320) = *(void *)(a2 + 320);
      *(void *)(a1 + 328) = *(void *)(a2 + 328);
      *(void *)(a1 + 336) = *(void *)(a2 + 336);
      *(void *)(a1 + 344) = *(void *)(a2 + 344);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      long long v8 = (unint64_t *)(a1 + 352);
      unint64_t v9 = *(void *)(a2 + 352);
      if (*(void *)(a1 + 352) < 3uLL)
      {
        *long long v8 = v9;
        if (v9 < 3) {
          goto LABEL_16;
        }
        goto LABEL_13;
      }
      if (v9 >= 3)
      {
        *long long v8 = v9;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      else
      {
        outlined destroy of [Double](a1 + 352);
        *long long v8 = *(void *)(a2 + 352);
      }
    }
    else
    {
      outlined destroy of Text.Effect.PathInterpolator(a1 + 272);
      long long v11 = *(_OWORD *)(a2 + 288);
      *uint64_t v5 = *v6;
      *(_OWORD *)(a1 + 288) = v11;
      long long v13 = *(_OWORD *)(a2 + 320);
      long long v12 = *(_OWORD *)(a2 + 336);
      long long v14 = *(_OWORD *)(a2 + 304);
      *(void *)(a1 + 352) = *(void *)(a2 + 352);
      *(_OWORD *)(a1 + 320) = v13;
      *(_OWORD *)(a1 + 336) = v12;
      *(_OWORD *)(a1 + 304) = v14;
    }
  }
  else
  {
    if (v7)
    {
      *(void *)(a1 + 272) = v7;
      *(void *)(a1 + 280) = *(void *)(a2 + 280);
      *(void *)(a1 + 288) = *(void *)(a2 + 288);
      *(void *)(a1 + 296) = *(void *)(a2 + 296);
      *(void *)(a1 + 304) = *(void *)(a2 + 304);
      *(void *)(a1 + 312) = *(void *)(a2 + 312);
      *(void *)(a1 + 320) = *(void *)(a2 + 320);
      *(void *)(a1 + 328) = *(void *)(a2 + 328);
      *(void *)(a1 + 336) = *(void *)(a2 + 336);
      *(void *)(a1 + 344) = *(void *)(a2 + 344);
      unint64_t v10 = *(void *)(a2 + 352);
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      *(void *)(a1 + 352) = v10;
      if (v10 < 3) {
        goto LABEL_16;
      }
LABEL_13:
      swift_bridgeObjectRetain();
      goto LABEL_16;
    }
    long long v15 = *(_OWORD *)(a2 + 288);
    *uint64_t v5 = *v6;
    *(_OWORD *)(a1 + 288) = v15;
    long long v16 = *(_OWORD *)(a2 + 304);
    long long v17 = *(_OWORD *)(a2 + 320);
    long long v18 = *(_OWORD *)(a2 + 336);
    *(void *)(a1 + 352) = *(void *)(a2 + 352);
    *(_OWORD *)(a1 + 320) = v17;
    *(_OWORD *)(a1 + 336) = v18;
    *(_OWORD *)(a1 + 304) = v16;
  }
LABEL_16:
  long long v19 = *(_OWORD *)(a2 + 360);
  *(unsigned char *)(a1 + 376) = *(unsigned char *)(a2 + 376);
  *(_OWORD *)(a1 + 360) = v19;
  return a1;
}

uint64_t outlined destroy of Text.Effect.PathInterpolator(uint64_t a1)
{
  return a1;
}

void *__swift_memcpy377_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x179uLL);
}

uint64_t assignWithTake for Text.Effect.TransformContext(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_release();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_release();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_release();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_release();
  long long v4 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v4;
  long long v5 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v5;
  long long v6 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v6;
  long long v7 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v7;
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  swift_release();
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  swift_bridgeObjectRelease();
  if (!*(void *)(a1 + 272)) {
    goto LABEL_8;
  }
  uint64_t v8 = *(void *)(a2 + 272);
  if (!v8)
  {
    outlined destroy of Text.Effect.PathInterpolator(a1 + 272);
LABEL_8:
    long long v13 = *(_OWORD *)(a2 + 320);
    *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
    *(_OWORD *)(a1 + 320) = v13;
    *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
    *(void *)(a1 + 352) = *(void *)(a2 + 352);
    long long v14 = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 288) = v14;
    goto LABEL_9;
  }
  *(void *)(a1 + 272) = v8;
  swift_release();
  uint64_t v9 = *(void *)(a2 + 288);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  *(void *)(a1 + 288) = v9;
  swift_release();
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  swift_release();
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  *(void *)(a1 + 320) = *(void *)(a2 + 320);
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  uint64_t v10 = *(void *)(a2 + 344);
  *(void *)(a1 + 336) = *(void *)(a2 + 336);
  *(void *)(a1 + 344) = v10;
  swift_bridgeObjectRelease();
  long long v11 = (unint64_t *)(a1 + 352);
  unint64_t v12 = *(void *)(a2 + 352);
  if (*(void *)(a1 + 352) >= 3uLL)
  {
    if (v12 >= 3)
    {
      *long long v11 = v12;
      swift_bridgeObjectRelease();
      goto LABEL_9;
    }
    outlined destroy of [Double](a1 + 352);
  }
  *long long v11 = v12;
LABEL_9:
  *(unsigned char *)(a1 + 376) = *(unsigned char *)(a2 + 376);
  *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
  return a1;
}

uint64_t getEnumTagSinglePayload for Text.Effect.TransformContext(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 377)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 256);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Text.Effect.TransformContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 376) = 0;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 377) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 256) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 377) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.TransformContext()
{
  return &type metadata for Text.Effect.TransformContext;
}

uint64_t specialized == infix<A>(_:_:)(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0x676E69727473;
  unint64_t v3 = 0xE600000000000000;
  uint64_t v4 = a1;
  unint64_t v5 = 0x676E69727473;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE400000000000000;
      unint64_t v5 = 1635017060;
      break;
    case 2:
      unint64_t v3 = 0xE800000000000000;
      unint64_t v5 = 0x7265626D754E736ELL;
      break;
    case 3:
      unint64_t v3 = 0xE700000000000000;
      unint64_t v5 = 0x65756C6156736ELL;
      break;
    case 4:
      unint64_t v3 = 0xE400000000000000;
      unint64_t v5 = 1702125924;
      break;
    case 5:
      unint64_t v3 = 0xE300000000000000;
      unint64_t v5 = 7107189;
      break;
    case 6:
      unint64_t v3 = 0x800000024621A050;
      unint64_t v5 = 0xD000000000000010;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE600000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE400000000000000;
      if (v5 == 1635017060) {
        goto LABEL_19;
      }
      goto LABEL_22;
    case 2:
      unint64_t v6 = 0xE800000000000000;
      if (v5 != 0x7265626D754E736ELL) {
        goto LABEL_22;
      }
      goto LABEL_19;
    case 3:
      unint64_t v6 = 0xE700000000000000;
      if (v5 != 0x65756C6156736ELL) {
        goto LABEL_22;
      }
      goto LABEL_19;
    case 4:
      unint64_t v6 = 0xE400000000000000;
      if (v5 != 1702125924) {
        goto LABEL_22;
      }
      goto LABEL_19;
    case 5:
      unint64_t v6 = 0xE300000000000000;
      uint64_t v2 = 7107189;
      goto LABEL_18;
    case 6:
      unint64_t v6 = 0x800000024621A050;
      if (v5 != 0xD000000000000010) {
        goto LABEL_22;
      }
      goto LABEL_19;
    default:
LABEL_18:
      if (v5 != v2) {
        goto LABEL_22;
      }
LABEL_19:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_22:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  uint64_t v2 = 1701667182;
  unint64_t v3 = 0xE400000000000000;
  uint64_t v4 = a1;
  unint64_t v5 = 1701667182;
  switch(v4)
  {
    case 1:
      unint64_t v5 = 1701869940;
      break;
    case 2:
      unint64_t v5 = 0x656C626164616572;
      unint64_t v3 = 0xEC00000065707954;
      break;
    case 3:
      unint64_t v3 = 0xE500000000000000;
      unint64_t v5 = 0x7367616C66;
      break;
    case 4:
      unint64_t v3 = 0xE500000000000000;
      unint64_t v5 = 0x65756C6176;
      break;
    case 5:
      unint64_t v5 = 0x6972747461627573;
      unint64_t v3 = 0xED00007365747562;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE400000000000000;
  switch(a2)
  {
    case 1:
      if (v5 == 1701869940) {
        goto LABEL_16;
      }
      goto LABEL_19;
    case 2:
      unint64_t v6 = 0xEC00000065707954;
      if (v5 != 0x656C626164616572) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 3:
      unint64_t v6 = 0xE500000000000000;
      if (v5 != 0x7367616C66) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 4:
      unint64_t v6 = 0xE500000000000000;
      uint64_t v2 = 0x65756C6176;
      goto LABEL_15;
    case 5:
      unint64_t v6 = 0xED00007365747562;
      if (v5 != 0x6972747461627573) {
        goto LABEL_19;
      }
      goto LABEL_16;
    default:
LABEL_15:
      if (v5 != v2) {
        goto LABEL_19;
      }
LABEL_16:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_19:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t specialized == infix<A>(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2 = 0xEB000000006E6F69;
  unint64_t v3 = 0x74616C736E617274;
  int v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v5 = 0x7254656E69666661;
    }
    else {
      unint64_t v5 = 0xD000000000000013;
    }
    if (v4 == 1) {
      unint64_t v6 = 0xEF6D726F66736E61;
    }
    else {
      unint64_t v6 = 0x800000024621A0D0;
    }
    int v7 = a2;
    if (!a2) {
      goto LABEL_15;
    }
    goto LABEL_9;
  }
  unint64_t v5 = 0x74616C736E617274;
  unint64_t v6 = 0xEB000000006E6F69;
  int v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1) {
      unint64_t v3 = 0x7254656E69666661;
    }
    else {
      unint64_t v3 = 0xD000000000000013;
    }
    if (v7 == 1) {
      unint64_t v2 = 0xEF6D726F66736E61;
    }
    else {
      unint64_t v2 = 0x800000024621A0D0;
    }
  }
LABEL_15:
  if (v5 == v3 && v6 == v2) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t specialized == infix<A>(_:_:)(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x6E6572646C696863;
  }
  else {
    uint64_t v3 = 0x69747265706F7270;
  }
  if (v2) {
    unint64_t v4 = 0xEA00000000007365;
  }
  else {
    unint64_t v4 = 0xE800000000000000;
  }
  if (a2) {
    uint64_t v5 = 0x6E6572646C696863;
  }
  else {
    uint64_t v5 = 0x69747265706F7270;
  }
  if (a2) {
    unint64_t v6 = 0xE800000000000000;
  }
  else {
    unint64_t v6 = 0xEA00000000007365;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

SwiftUI::_ViewDebug::Property_optional __swiftcall _ViewDebug.Property.init(rawValue:)(Swift::UInt32 rawValue)
{
  if (rawValue >= 9) {
    char v2 = 9;
  }
  else {
    char v2 = rawValue;
  }
  *uint64_t v1 = v2;
  return (SwiftUI::_ViewDebug::Property_optional)rawValue;
}

uint64_t _ViewDebug.Property.rawValue.getter()
{
  return *v0;
}

SwiftUI::_ViewDebug::Property_optional protocol witness for RawRepresentable.init(rawValue:) in conformance _ViewDebug.Property(Swift::UInt32 *a1)
{
  return _ViewDebug.Property.init(rawValue:)(*a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance _ViewDebug.Property()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v0);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance _ViewDebug.Property()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance _ViewDebug.Property()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v0);
  return Hasher._finalize()();
}

uint64_t _ViewDebug.Properties.rawValue.getter()
{
  return *v0;
}

uint64_t _ViewDebug.Properties.init(rawValue:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

unsigned __int8 *_ViewDebug.Properties.init(_:)@<X0>(unsigned __int8 *result@<X0>, int *a2@<X8>)
{
  unsigned int v2 = *result;
  if (v2 >= 0x20) {
    int v3 = 0;
  }
  else {
    int v3 = 1 << v2;
  }
  *a2 = v3;
  return result;
}

void static _ViewDebug.Properties.type.getter(_DWORD *a1@<X8>)
{
  *a1 = 1;
}

void static _ViewDebug.Properties.value.getter(_DWORD *a1@<X8>)
{
  *a1 = 2;
}

void static _ViewDebug.Properties.transform.getter(_DWORD *a1@<X8>)
{
  *a1 = 4;
}

void static _ViewDebug.Properties.position.getter(_DWORD *a1@<X8>)
{
  *a1 = 8;
}

void static _ViewDebug.Properties.size.getter(_DWORD *a1@<X8>)
{
  *a1 = 16;
}

void static _ViewDebug.Properties.environment.getter(_DWORD *a1@<X8>)
{
  *a1 = 32;
}

void static _ViewDebug.Properties.phase.getter(_DWORD *a1@<X8>)
{
  *a1 = 64;
}

void static _ViewDebug.Properties.layoutComputer.getter(_DWORD *a1@<X8>)
{
  *a1 = 128;
}

void static _ViewDebug.Properties.displayList.getter(_DWORD *a1@<X8>)
{
  *a1 = 256;
}

void static _ViewDebug.Properties.all.getter(_DWORD *a1@<X8>)
{
  *a1 = -1;
}

uint64_t static _ViewDebug.properties.getter@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = swift_beginAccess();
  *a1 = static _ViewDebug.properties;
  return result;
}

uint64_t static _ViewDebug.properties.setter(int *a1)
{
  int v1 = *a1;
  uint64_t result = swift_beginAccess();
  static _ViewDebug.properties = v1;
  return result;
}

uint64_t (*static _ViewDebug.properties.modify())()
{
  return DisplayList.GraphicsRenderer.platformViewMode.modify;
}

uint64_t _ViewDebug.Data.data.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t _ViewDebug.Data.data.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *int v1 = a1;
  return result;
}

uint64_t (*_ViewDebug.Data.data.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _ViewDebug.Data.childData.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t _ViewDebug.Data.childData.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*_ViewDebug.Data.childData.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

SwiftUI::_ViewDebug::Data __swiftcall _ViewDebug.Data.init()()
{
  uint64_t v1 = MEMORY[0x263F8EE78];
  *uint64_t v0 = MEMORY[0x263F8EE80];
  v0[1] = v1;
  return result;
}

uint64_t static _ViewDebug.isInitialized.getter()
{
  return static _ViewDebug.isInitialized;
}

uint64_t static _ViewDebug.isInitialized.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  static _ViewDebug.isInitialized = a1;
  return result;
}

uint64_t (*static _ViewDebug.isInitialized.modify())()
{
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

uint64_t static _ViewDebug.initialize(inputs:)()
{
  swift_beginAccess();
  if ((static _ViewDebug.isInitialized & 1) == 0)
  {
    uint64_t v0 = getenv("SWIFTUI_VIEW_DEBUG");
    if (v0)
    {
      int v1 = atoi(v0);
      swift_beginAccess();
      static _ViewDebug.properties = v1;
    }
    static _ViewDebug.isInitialized = 1;
  }
  uint64_t result = swift_beginAccess();
  if (static _ViewDebug.properties) {
    return AGSubgraphSetShouldRecordTree();
  }
  return result;
}

uint64_t static _ViewDebug.makeDebugData(subgraph:)()
{
  uint64_t v0 = MEMORY[0x263F8EE78];
  uint64_t v3 = MEMORY[0x263F8EE78];
  uint64_t TreeRoot = AGSubgraphGetTreeRoot();
  if (TreeRoot)
  {
    static _ViewDebug.appendDebugData(from:to:)(TreeRoot, &v3);
    return v3;
  }
  return v0;
}

uint64_t static _ViewDebug.appendDebugData(from:to:)(uint64_t a1, void *a2)
{
  if (AGTreeElementGetFlags())
  {
    AGTreeElementMakeChildIterator();
    while (1)
    {
      uint64_t result = AGTreeElementGetNextChild();
      if (!result) {
        break;
      }
      static _ViewDebug.appendDebugData(from:to:)(result, a2);
    }
    return result;
  }
  uint64_t Value = AGTreeElementGetValue();
  if (Value == *MEMORY[0x263F288F8] || (uint64_t v4 = Value, (Type = AGTreeElementGetType()) == 0))
  {
    AGTreeElementMakeChildIterator();
    while (1)
    {
      uint64_t result = AGTreeElementGetNextChild();
      if (!result) {
        break;
      }
      static _ViewDebug.appendDebugData(from:to:)(result, a2);
    }
    return result;
  }
  uint64_t v6 = Type;
  *(void *)&v102[0] = MEMORY[0x263F8EE80];
  *((void *)&v102[0] + 1) = MEMORY[0x263F8EE78];
  MetatypeMetadata = (ValueMetadata *)swift_getMetatypeMetadata();
  *(void *)&long long v100 = v6;
  specialized Dictionary.subscript.setter((uint64_t)&v100, 0);
  specialized project #1 <A>(type:) in static _ViewDebug.appendDebugData(from:to:)(v6, (uint64_t)v102, v4, v6);
  uint64_t ValueIterator = AGTreeElementMakeValueIterator();
  uint64_t v99 = v7;
  Nextuint64_t Value = AGTreeElementGetNextValue();
  if (!NextValue)
  {
LABEL_103:
    swift_beginAccess();
    AGTreeElementMakeChildIterator();
    for (uint64_t i = AGTreeElementGetNextChild(); i; uint64_t i = AGTreeElementGetNextChild())
      static _ViewDebug.appendDebugData(from:to:)(i, (char *)v102 + 8);
    swift_endAccess();
    long long v95 = v102[0];
    long long v19 = (void *)*a2;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
LABEL_119:
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19[2] + 1, 1, v19);
      long long v19 = (void *)result;
    }
    unint64_t v94 = v19[2];
    unint64_t v93 = v19[3];
    if (v94 >= v93 >> 1)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v93 > 1), v94 + 1, 1, v19);
      long long v19 = (void *)result;
    }
    void v19[2] = v94 + 1;
    *(_OWORD *)&v19[2 * v94 + 4] = v95;
    *a2 = v19;
    return result;
  }
  uint64_t v9 = NextValue;
  while (1)
  {
    KeCGFloat y = (const char *)AGTreeValueGetKey();
    swift_beginAccess();
    __int16 v12 = static _ViewDebug.properties;
    if ((static _ViewDebug.properties & 0x20) == 0 || strcmp(Key, "environment")) {
      break;
    }
    AGTreeValueGetValue();
    MetatypeMetadata = &type metadata for EnvironmentValues;
    long long v16 = (void *)AGGraphGetValue();
    uint64_t v17 = v16[1];
    *(void *)&long long v100 = *v16;
    *((void *)&v100 + 1) = v17;
    swift_beginAccess();
    outlined init with take of Any(&v100, &v97);
    swift_retain();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    long long v19 = *(void **)&v102[0];
    uint64_t v96 = *(void **)&v102[0];
    *(void *)&v102[0] = 0x8000000000000000;
    unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(5u);
    uint64_t v22 = v19[2];
    BOOL v23 = (v20 & 1) == 0;
    uint64_t v24 = v22 + v23;
    if (__OFADD__(v22, v23))
    {
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
      goto LABEL_119;
    }
    char v25 = v20;
    if (v19[3] >= v24)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        double v28 = v96;
        if ((v20 & 1) == 0) {
          goto LABEL_48;
        }
      }
      else
      {
        long long v19 = &v96;
        specialized _NativeDictionary.copy()();
        double v28 = v96;
        if ((v25 & 1) == 0) {
          goto LABEL_48;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v24, isUniquelyReferenced_nonNull_native);
      long long v19 = v96;
      unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(5u);
      if ((v25 & 1) != (v27 & 1)) {
        goto LABEL_122;
      }
      unint64_t v21 = v26;
      double v28 = v96;
      if ((v25 & 1) == 0)
      {
LABEL_48:
        v28[(v21 >> 6) + 8] |= 1 << v21;
        *(unsigned char *)(v28[6] + v21) = 5;
        outlined init with take of Any(&v97, (_OWORD *)(v28[7] + 32 * v21));
        uint64_t v61 = v28[2];
        BOOL v62 = __OFADD__(v61, 1);
        uint64_t v63 = v61 + 1;
        if (v62) {
          goto LABEL_114;
        }
        goto LABEL_84;
      }
    }
LABEL_6:
    uint64_t v10 = (_OWORD *)(v28[7] + 32 * v21);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
    outlined init with take of Any(&v97, v10);
LABEL_7:
    *(void *)&v102[0] = v28;
    swift_bridgeObjectRelease();
    swift_endAccess();
LABEL_8:
    uint64_t v9 = AGTreeElementGetNextValue();
    if (!v9) {
      goto LABEL_103;
    }
  }
  if ((v12 & 8) != 0 && !strcmp(Key, "position"))
  {
    AGTreeValueGetValue();
    uint64_t v29 = (uint64_t *)AGGraphGetValue();
    uint64_t v30 = *v29;
    uint64_t v31 = v29[1];
    type metadata accessor for CGPoint(0);
    MetatypeMetadata = v32;
    *(void *)&long long v100 = v30;
    *((void *)&v100 + 1) = v31;
    swift_beginAccess();
    outlined init with take of Any(&v100, &v97);
    char v33 = swift_isUniquelyReferenced_nonNull_native();
    long long v19 = *(void **)&v102[0];
    uint64_t v96 = *(void **)&v102[0];
    *(void *)&v102[0] = 0x8000000000000000;
    unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(3u);
    uint64_t v35 = v19[2];
    BOOL v36 = (v34 & 1) == 0;
    uint64_t v37 = v35 + v36;
    if (__OFADD__(v35, v36)) {
      goto LABEL_111;
    }
    char v38 = v34;
    if (v19[3] >= v37)
    {
      if (v33)
      {
        double v28 = v96;
        if ((v34 & 1) == 0) {
          goto LABEL_58;
        }
      }
      else
      {
        long long v19 = &v96;
        specialized _NativeDictionary.copy()();
        double v28 = v96;
        if ((v38 & 1) == 0) {
          goto LABEL_58;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v37, v33);
      long long v19 = v96;
      unint64_t v39 = specialized __RawDictionaryStorage.find<A>(_:)(3u);
      if ((v38 & 1) != (v40 & 1)) {
        goto LABEL_122;
      }
      unint64_t v21 = v39;
      double v28 = v96;
      if ((v38 & 1) == 0)
      {
LABEL_58:
        v28[(v21 >> 6) + 8] |= 1 << v21;
        *(unsigned char *)(v28[6] + v21) = 3;
        outlined init with take of Any(&v97, (_OWORD *)(v28[7] + 32 * v21));
        uint64_t v76 = v28[2];
        BOOL v62 = __OFADD__(v76, 1);
        uint64_t v63 = v76 + 1;
        if (v62) {
          goto LABEL_116;
        }
        goto LABEL_84;
      }
    }
    goto LABEL_6;
  }
  if ((v12 & 0x10) != 0 && !strcmp(Key, "size"))
  {
    AGTreeValueGetValue();
    uint64_t v41 = (uint64_t *)AGGraphGetValue();
    uint64_t v42 = *v41;
    uint64_t v43 = v41[1];
    type metadata accessor for CGSize(0);
    MetatypeMetadata = v44;
    *(void *)&long long v100 = v42;
    *((void *)&v100 + 1) = v43;
    swift_beginAccess();
    outlined init with take of Any(&v100, &v97);
    char v45 = swift_isUniquelyReferenced_nonNull_native();
    long long v19 = *(void **)&v102[0];
    uint64_t v96 = *(void **)&v102[0];
    *(void *)&v102[0] = 0x8000000000000000;
    unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(4u);
    uint64_t v47 = v19[2];
    BOOL v48 = (v46 & 1) == 0;
    uint64_t v49 = v47 + v48;
    if (__OFADD__(v47, v48)) {
      goto LABEL_112;
    }
    char v50 = v46;
    if (v19[3] >= v49)
    {
      if (v45)
      {
        double v28 = v96;
        if ((v46 & 1) == 0) {
          goto LABEL_68;
        }
      }
      else
      {
        long long v19 = &v96;
        specialized _NativeDictionary.copy()();
        double v28 = v96;
        if ((v50 & 1) == 0) {
          goto LABEL_68;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v49, v45);
      long long v19 = v96;
      unint64_t v51 = specialized __RawDictionaryStorage.find<A>(_:)(4u);
      if ((v50 & 1) != (v52 & 1)) {
        goto LABEL_122;
      }
      unint64_t v21 = v51;
      double v28 = v96;
      if ((v50 & 1) == 0)
      {
LABEL_68:
        v28[(v21 >> 6) + 8] |= 1 << v21;
        *(unsigned char *)(v28[6] + v21) = 4;
        outlined init with take of Any(&v97, (_OWORD *)(v28[7] + 32 * v21));
        uint64_t v87 = v28[2];
        BOOL v62 = __OFADD__(v87, 1);
        uint64_t v63 = v87 + 1;
        if (v62) {
          goto LABEL_118;
        }
        goto LABEL_84;
      }
    }
    goto LABEL_6;
  }
  if ((v12 & 0x40) == 0 || strcmp(Key, "phase"))
  {
    if ((v12 & 4) != 0 && !strcmp(Key, "transform"))
    {
      AGTreeValueGetValue();
      MetatypeMetadata = &type metadata for ViewTransform;
      uint64_t v64 = swift_allocObject();
      *(void *)&long long v100 = v64;
      uint64_t v65 = AGGraphGetValue();
      long long v66 = *(_OWORD *)(v65 + 8);
      long long v67 = *(_OWORD *)(v65 + 24);
      *(void *)(v64 + 16) = *(void *)v65;
      *(_OWORD *)(v64 + 24) = v66;
      *(_OWORD *)(v64 + 40) = v67;
      swift_beginAccess();
      outlined init with take of Any(&v100, &v97);
      swift_retain();
      char v68 = swift_isUniquelyReferenced_nonNull_native();
      long long v19 = *(void **)&v102[0];
      uint64_t v96 = *(void **)&v102[0];
      *(void *)&v102[0] = 0x8000000000000000;
      unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(2u);
      uint64_t v70 = v19[2];
      BOOL v71 = (v69 & 1) == 0;
      uint64_t v72 = v70 + v71;
      if (__OFADD__(v70, v71)) {
        goto LABEL_115;
      }
      char v73 = v69;
      if (v19[3] >= v72)
      {
        if (v68)
        {
          double v28 = v96;
          if ((v69 & 1) == 0) {
            goto LABEL_78;
          }
        }
        else
        {
          specialized _NativeDictionary.copy()();
          double v28 = v96;
          if ((v73 & 1) == 0) {
            goto LABEL_78;
          }
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v72, v68);
        unint64_t v74 = specialized __RawDictionaryStorage.find<A>(_:)(2u);
        if ((v73 & 1) != (v75 & 1)) {
          goto LABEL_122;
        }
        unint64_t v21 = v74;
        double v28 = v96;
        if ((v73 & 1) == 0)
        {
LABEL_78:
          v28[(v21 >> 6) + 8] |= 1 << v21;
          *(unsigned char *)(v28[6] + v21) = 2;
          outlined init with take of Any(&v97, (_OWORD *)(v28[7] + 32 * v21));
          uint64_t v89 = v28[2];
          BOOL v62 = __OFADD__(v89, 1);
          uint64_t v63 = v89 + 1;
          if (v62) {
            goto LABEL_120;
          }
          goto LABEL_84;
        }
      }
    }
    else
    {
      if ((v12 & 0x80) == 0 || strcmp(Key, "layoutComputer"))
      {
        if ((v12 & 0x100) != 0 && !strcmp(Key, "displayList"))
        {
          if (one-time initialization token for shared != -1) {
            swift_once();
          }
          swift_beginAccess();
          long long v13 = static CoreGlue.shared;
          swift_beginAccess();
          long long v14 = *(void (**)(_OWORD *, uint64_t))((*MEMORY[0x263F8EED0] & *v13) + 0xC0);
          long long v15 = v13;
          v14(v102, v9);
          swift_endAccess();
        }
        goto LABEL_8;
      }
      AGTreeValueGetValue();
      MetatypeMetadata = &type metadata for LayoutComputer;
      unint64_t v77 = (void *)AGGraphGetValue();
      uint64_t v78 = v77[1];
      *(void *)&long long v100 = *v77;
      *((void *)&v100 + 1) = v78;
      swift_beginAccess();
      outlined init with take of Any(&v100, &v97);
      swift_retain();
      char v79 = swift_isUniquelyReferenced_nonNull_native();
      long long v19 = *(void **)&v102[0];
      uint64_t v96 = *(void **)&v102[0];
      *(void *)&v102[0] = 0x8000000000000000;
      unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(7u);
      uint64_t v81 = v19[2];
      BOOL v82 = (v80 & 1) == 0;
      uint64_t v83 = v81 + v82;
      if (__OFADD__(v81, v82)) {
        goto LABEL_117;
      }
      char v84 = v80;
      if (v19[3] >= v83)
      {
        if (v79)
        {
          double v28 = v96;
          if ((v80 & 1) == 0) {
            goto LABEL_83;
          }
        }
        else
        {
          specialized _NativeDictionary.copy()();
          double v28 = v96;
          if ((v84 & 1) == 0) {
            goto LABEL_83;
          }
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v83, v79);
        unint64_t v85 = specialized __RawDictionaryStorage.find<A>(_:)(7u);
        if ((v84 & 1) != (v86 & 1)) {
          goto LABEL_122;
        }
        unint64_t v21 = v85;
        double v28 = v96;
        if ((v84 & 1) == 0)
        {
LABEL_83:
          v28[(v21 >> 6) + 8] |= 1 << v21;
          *(unsigned char *)(v28[6] + v21) = 7;
          outlined init with take of Any(&v97, (_OWORD *)(v28[7] + 32 * v21));
          uint64_t v90 = v28[2];
          BOOL v62 = __OFADD__(v90, 1);
          uint64_t v63 = v90 + 1;
          if (v62) {
            goto LABEL_121;
          }
          goto LABEL_84;
        }
      }
    }
    goto LABEL_6;
  }
  AGTreeValueGetValue();
  MetatypeMetadata = &type metadata for _GraphInputs.Phase;
  LODWORD(v100) = *(_DWORD *)AGGraphGetValue();
  swift_beginAccess();
  outlined init with take of Any(&v100, &v97);
  char v53 = swift_isUniquelyReferenced_nonNull_native();
  long long v19 = *(void **)&v102[0];
  uint64_t v96 = *(void **)&v102[0];
  *(void *)&v102[0] = 0x8000000000000000;
  unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(6u);
  uint64_t v55 = v19[2];
  BOOL v56 = (v54 & 1) == 0;
  uint64_t v57 = v55 + v56;
  if (__OFADD__(v55, v56)) {
    goto LABEL_113;
  }
  char v58 = v54;
  if (v19[3] >= v57)
  {
    if (v53)
    {
      double v28 = v96;
      if ((v54 & 1) == 0) {
        goto LABEL_73;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      double v28 = v96;
      if ((v58 & 1) == 0) {
        goto LABEL_73;
      }
    }
    goto LABEL_6;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v57, v53);
  unint64_t v59 = specialized __RawDictionaryStorage.find<A>(_:)(6u);
  if ((v58 & 1) != (v60 & 1)) {
    goto LABEL_122;
  }
  unint64_t v21 = v59;
  double v28 = v96;
  if (v58) {
    goto LABEL_6;
  }
LABEL_73:
  v28[(v21 >> 6) + 8] |= 1 << v21;
  *(unsigned char *)(v28[6] + v21) = 6;
  outlined init with take of Any(&v97, (_OWORD *)(v28[7] + 32 * v21));
  uint64_t v88 = v28[2];
  BOOL v62 = __OFADD__(v88, 1);
  uint64_t v63 = v88 + 1;
  if (!v62)
  {
LABEL_84:
    v28[2] = v63;
    goto LABEL_7;
  }
  __break(1u);
LABEL_120:
  __break(1u);
LABEL_121:
  __break(1u);
LABEL_122:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized project #1 <A>(type:) in static _ViewDebug.appendDebugData(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v8[3] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v8);
  uint64_t Value = AGGraphGetValue();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(boxed_opaque_existential_1, Value, a4);
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v8, 1);
  return swift_endAccess();
}

uint64_t static _ViewDebug.serializedData(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for JSONEncoder.NonConformingFloatEncodingStrategy();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (void *)((char *)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  *uint64_t v5 = 6712937;
  v5[1] = 0xE300000000000000;
  v5[2] = 1718511917;
  v5[3] = 0xE400000000000000;
  v5[4] = 7233902;
  _OWORD v5[5] = 0xE300000000000000;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x263F061A8], v2);
  dispatch thunk of JSONEncoder.nonConformingFloatEncodingStrategy.setter();
  v8[13] = a1;
  type metadata accessor for [_ViewDebug.Data](0, &lazy cache variable for type metadata for [_ViewDebug.Data], (uint64_t)&type metadata for _ViewDebug.Data, MEMORY[0x263F8D488]);
  lazy protocol witness table accessor for type [_ViewDebug.Data] and conformance <A> [A](&lazy protocol witness table cache variable for type [_ViewDebug.Data] and conformance <A> [A], &lazy cache variable for type metadata for [_ViewDebug.Data], (uint64_t)&type metadata for _ViewDebug.Data, (void (*)(void))lazy protocol witness table accessor for type _ViewDebug.Data and conformance _ViewDebug.Data);
  uint64_t v6 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  swift_release();
  return v6;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance _ViewDebug.Data.CodingKeys(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance _ViewDebug.Data.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance _ViewDebug.Data.CodingKeys()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance _ViewDebug.Data.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance _ViewDebug.Data.CodingKeys@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of _ViewDebug.Data.CodingKeys.init(rawValue:), *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance _ViewDebug.Data.CodingKeys(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x69747265706F7270;
  if (*v1) {
    uint64_t v2 = 0x6E6572646C696863;
  }
  unint64_t v3 = 0xEA00000000007365;
  if (*v1) {
    unint64_t v3 = 0xE800000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance _ViewDebug.Data.CodingKeys()
{
  if (*v0) {
    return 0x6E6572646C696863;
  }
  else {
    return 0x69747265706F7270;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance _ViewDebug.Data.CodingKeys@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  object = string._object;
  v3._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of _ViewDebug.Data.CodingKeys.init(rawValue:), v3);
  uint64_t result = swift_bridgeObjectRelease();
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance _ViewDebug.Data.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type _ViewDebug.Data.CodingKeys and conformance _ViewDebug.Data.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance _ViewDebug.Data.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type _ViewDebug.Data.CodingKeys and conformance _ViewDebug.Data.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t _ViewDebug.Data.encode(to:)(void *a1)
{
  type metadata accessor for KeyedEncodingContainer<_ViewDebug.Data.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<_ViewDebug.Data.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type _ViewDebug.Data.CodingKeys and conformance _ViewDebug.Data.CodingKeys);
  uint64_t v4 = v3;
  uint64_t v15 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)v14 - v5;
  uint64_t v8 = *v1;
  uint64_t v7 = v1[1];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type _ViewDebug.Data.CodingKeys and conformance _ViewDebug.Data.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  uint64_t v9 = v14[1];
  uint64_t v10 = specialized Sequence.compactMap<A>(_:)(v8, v8, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  uint64_t v17 = v10;
  char v16 = 0;
  type metadata accessor for [_ViewDebug.Data](0, &lazy cache variable for type metadata for [_ViewDebug.Data.SerializedProperty], (uint64_t)&type metadata for _ViewDebug.Data.SerializedProperty, MEMORY[0x263F8D488]);
  uint64_t v11 = v4;
  lazy protocol witness table accessor for type [_ViewDebug.Data] and conformance <A> [A](&lazy protocol witness table cache variable for type [_ViewDebug.Data.SerializedProperty] and conformance <A> [A], &lazy cache variable for type metadata for [_ViewDebug.Data.SerializedProperty], (uint64_t)&type metadata for _ViewDebug.Data.SerializedProperty, (void (*)(void))lazy protocol witness table accessor for type _ViewDebug.Data.SerializedProperty and conformance _ViewDebug.Data.SerializedProperty);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v9)
  {
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v6, v4);
  }
  else
  {
    uint64_t v13 = v15;
    swift_bridgeObjectRelease();
    uint64_t v17 = v7;
    char v16 = 1;
    type metadata accessor for [_ViewDebug.Data](0, &lazy cache variable for type metadata for [_ViewDebug.Data], (uint64_t)&type metadata for _ViewDebug.Data, MEMORY[0x263F8D488]);
    lazy protocol witness table accessor for type [_ViewDebug.Data] and conformance <A> [A](&lazy protocol witness table cache variable for type [_ViewDebug.Data] and conformance <A> [A], &lazy cache variable for type metadata for [_ViewDebug.Data], (uint64_t)&type metadata for _ViewDebug.Data, (void (*)(void))lazy protocol witness table accessor for type _ViewDebug.Data and conformance _ViewDebug.Data);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v6, v11);
  }
}

uint64_t _ViewDebug.Data.SerializedProperty.encode(to:)(void *a1)
{
  type metadata accessor for KeyedEncodingContainer<_ViewDebug.Data.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<_ViewDebug.Data.SerializedProperty.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type _ViewDebug.Data.SerializedProperty.CodingKeys and conformance _ViewDebug.Data.SerializedProperty.CodingKeys);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v9 - v6;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type _ViewDebug.Data.SerializedProperty.CodingKeys and conformance _ViewDebug.Data.SerializedProperty.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v11 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    char v10 = 1;
    lazy protocol witness table accessor for type _ViewDebug.Data.SerializedAttribute and conformance _ViewDebug.Data.SerializedAttribute();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance _ViewDebug.Data.SerializedProperty.CodingKeys()
{
  if (*v0) {
    return 0x7475626972747461;
  }
  else {
    return 25705;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance _ViewDebug.Data.SerializedProperty.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized _ViewDebug.Data.SerializedProperty.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance _ViewDebug.Data.SerializedProperty.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type _ViewDebug.Data.SerializedProperty.CodingKeys and conformance _ViewDebug.Data.SerializedProperty.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance _ViewDebug.Data.SerializedProperty.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type _ViewDebug.Data.SerializedProperty.CodingKeys and conformance _ViewDebug.Data.SerializedProperty.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance _ViewDebug.Data.SerializedProperty(void *a1)
{
  return _ViewDebug.Data.SerializedProperty.encode(to:)(a1);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance _ViewDebug.Data.SerializedAttribute.Flags()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance _ViewDebug.Data.SerializedAttribute.CodingKeys(unsigned __int8 *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance _ViewDebug.Data.SerializedAttribute.CodingKeys()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance _ViewDebug.Data.SerializedAttribute.CodingKeys()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance _ViewDebug.Data.SerializedAttribute.CodingKeys()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance _ViewDebug.Data.SerializedAttribute.CodingKeys@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized _ViewDebug.Data.SerializedAttribute.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance _ViewDebug.Data.SerializedAttribute.CodingKeys(uint64_t a1@<X8>)
{
  uint64_t v2 = 1701667182;
  switch(*v1)
  {
    case 1:
      uint64_t v2 = 1701869940;
      goto LABEL_3;
    case 2:
      strcpy((char *)a1, "readableType");
      *(unsigned char *)(a1 + 13) = 0;
      *(_WORD *)(a1 + 14) = -5120;
      break;
    case 3:
      *(void *)a1 = 0x7367616C66;
      *(void *)(a1 + 8) = 0xE500000000000000;
      break;
    case 4:
      *(void *)a1 = 0x65756C6176;
      *(void *)(a1 + 8) = 0xE500000000000000;
      break;
    case 5:
      strcpy((char *)a1, "subattributes");
      *(_WORD *)(a1 + 14) = -4864;
      break;
    default:
LABEL_3:
      *(void *)a1 = v2;
      *(void *)(a1 + 8) = 0xE400000000000000;
      break;
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance _ViewDebug.Data.SerializedAttribute.CodingKeys()
{
  uint64_t result = 1701667182;
  switch(*v0)
  {
    case 1:
      uint64_t result = 1701869940;
      break;
    case 2:
      uint64_t result = 0x656C626164616572;
      break;
    case 3:
      uint64_t result = 0x7367616C66;
      break;
    case 4:
      uint64_t result = 0x65756C6176;
      break;
    case 5:
      uint64_t result = 0x6972747461627573;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance _ViewDebug.Data.SerializedAttribute.CodingKeys@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized _ViewDebug.Data.SerializedAttribute.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance _ViewDebug.Data.SerializedAttribute.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type _ViewDebug.Data.SerializedAttribute.CodingKeys and conformance _ViewDebug.Data.SerializedAttribute.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance _ViewDebug.Data.SerializedAttribute.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type _ViewDebug.Data.SerializedAttribute.CodingKeys and conformance _ViewDebug.Data.SerializedAttribute.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t _ViewDebug.Data.SerializedAttribute.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  type metadata accessor for KeyedEncodingContainer<_ViewDebug.Data.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<_ViewDebug.Data.SerializedAttribute.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type _ViewDebug.Data.SerializedAttribute.CodingKeys and conformance _ViewDebug.Data.SerializedAttribute.CodingKeys);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = &v11[-v8];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type _ViewDebug.Data.SerializedAttribute.CodingKeys and conformance _ViewDebug.Data.SerializedAttribute.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v16[0]) = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (v2) {
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
  }
  LOBYTE(v16[0]) = 1;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v16[0]) = 2;
  KeyedEncodingContainer.encode(_:forKey:)();
  v16[0] = *(void *)(v3 + 48);
  LOBYTE(v13) = 3;
  lazy protocol witness table accessor for type _ViewDebug.Data.SerializedAttribute.Flags and conformance _ViewDebug.Data.SerializedAttribute.Flags();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v16[0] = *(void *)(v3 + 88);
  LOBYTE(v13) = 5;
  type metadata accessor for [_ViewDebug.Data](0, &lazy cache variable for type metadata for [_ViewDebug.Data.SerializedAttribute], (uint64_t)&type metadata for _ViewDebug.Data.SerializedAttribute, MEMORY[0x263F8D488]);
  lazy protocol witness table accessor for type [_ViewDebug.Data] and conformance <A> [A](&lazy protocol witness table cache variable for type [_ViewDebug.Data.SerializedAttribute] and conformance <A> [A], &lazy cache variable for type metadata for [_ViewDebug.Data.SerializedAttribute], (uint64_t)&type metadata for _ViewDebug.Data.SerializedAttribute, (void (*)(void))lazy protocol witness table accessor for type _ViewDebug.Data.SerializedAttribute and conformance _ViewDebug.Data.SerializedAttribute);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  outlined init with copy of Any?(v3 + 56, (uint64_t)v11);
  if (v12)
  {
    type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for Encodable);
    if (swift_dynamicCast())
    {
      if (*((void *)&v14 + 1))
      {
        outlined init with take of ScrollStateRequest(&v13, (uint64_t)v16);
        __swift_project_boxed_opaque_existential_1(v16, v16[3]);
        specialized encode #1 <A>(value:) in _ViewDebug.Data.SerializedAttribute.encode(to:)();
        (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
      }
    }
    else
    {
      uint64_t v15 = 0;
      long long v13 = 0u;
      long long v14 = 0u;
    }
  }
  else
  {
    _sypSgWOhTm_14((uint64_t)v11, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8);
    long long v13 = 0u;
    long long v14 = 0u;
    uint64_t v15 = 0;
  }
  (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
  return outlined destroy of Encodable?((uint64_t)&v13, (uint64_t)&lazy cache variable for type metadata for Encodable?, (uint64_t)&lazy cache variable for type metadata for Encodable, MEMORY[0x263F8D0B0], (uint64_t (*)(void))type metadata accessor for AnyTrackedValue?);
}

uint64_t specialized encode #1 <A>(value:) in _ViewDebug.Data.SerializedAttribute.encode(to:)()
{
  return swift_endAccess();
}

uint64_t _ViewDebug.Data.SerializedAttribute.init(value:serializeValue:label:subattributes:)@<X0>(void *a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  *(void *)a6 = a3;
  *(void *)(a6 + 8) = a4;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v16[0] = swift_getDynamicType();
  type metadata accessor for Any.Type();
  *(void *)(a6 + 16) = String.init<A>(reflecting:)();
  *(void *)(a6 + 24) = v10;
  *(void *)(a6 + 32) = AGTypeID.description.getter();
  *(void *)(a6 + 40) = v11;
  uint64_t v12 = MEMORY[0x263F8EE58];
  type metadata accessor for [_ViewDebug.Data](0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0]);
  _viewProtocolDescriptor();
  uint64_t v13 = swift_conformsToProtocol();
  _viewModifierProtocolDescriptor();
  uint64_t v14 = swift_conformsToProtocol();
  if (!v13)
  {
    if (!v14)
    {
      *(void *)(a6 + 48) = 0;
      if (a2) {
        goto LABEL_9;
      }
      goto LABEL_7;
    }
    *(void *)(a6 + 48) = 2;
    if ((a2 & 1) == 0) {
      goto LABEL_7;
    }
LABEL_9:
    static _ViewDebug.Data.SerializedAttribute.serialize(value:)((uint64_t)a1, (uint64_t)v16);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    uint64_t result = outlined init with take of _ViewDebug.Data.SerializedAttribute?((uint64_t)v16, a6 + 56, (unint64_t *)&lazy cache variable for type metadata for Any?, v12 + 8);
    goto LABEL_10;
  }
  if (!v14)
  {
    *(void *)(a6 + 48) = 1;
    if ((a2 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_9;
  }
  *(void *)(a6 + 48) = 3;
  if (a2) {
    goto LABEL_9;
  }
LABEL_7:
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  *(_OWORD *)(a6 + 72) = 0u;
  *(_OWORD *)(a6 + 56) = 0u;
LABEL_10:
  *(void *)(a6 + 88) = a5;
  return result;
}

double static _ViewDebug.Data.SerializedAttribute.serialize(value:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for _ContiguousArrayStorage<(String, String)>(0, &lazy cache variable for type metadata for Mirror.DisplayStyle?, MEMORY[0x263F8E818], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v23 - v5;
  uint64_t v7 = type metadata accessor for Mirror();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Any(a1, (uint64_t)v30);
  outlined init with copy of Any(a1, (uint64_t)v26);
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for CustomViewDebugValueConvertible);
  if (swift_dynamicCast())
  {
    outlined init with take of ScrollStateRequest(&v23, (uint64_t)v27);
    uint64_t v11 = v28;
    uint64_t v12 = v29;
    __swift_project_boxed_opaque_existential_1(v27, v28);
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v12 + 8))(&v23, v11, v12);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
    outlined init with take of Any(&v23, v30);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
  }
  else
  {
    uint64_t v25 = 0;
    long long v23 = 0u;
    long long v24 = 0u;
    outlined destroy of Encodable?((uint64_t)&v23, (uint64_t)&lazy cache variable for type metadata for CustomViewDebugValueConvertible?, (uint64_t)&lazy cache variable for type metadata for CustomViewDebugValueConvertible, (uint64_t)&protocol descriptor for CustomViewDebugValueConvertible, (uint64_t (*)(void))type metadata accessor for AnyTrackedValue?);
  }
  outlined init with copy of Any((uint64_t)v30, (uint64_t)v26);
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for Encodable);
  if (swift_dynamicCast())
  {
    outlined init with take of ScrollStateRequest(&v23, (uint64_t)v27);
    uint64_t v13 = v28;
    uint64_t v14 = __swift_project_boxed_opaque_existential_1(v27, v28);
    *(void *)(a2 + 24) = v13;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)a2);
    (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v13 - 8) + 16))(boxed_opaque_existential_1, v14, v13);
LABEL_8:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
    return result;
  }
  uint64_t v25 = 0;
  long long v23 = 0u;
  long long v24 = 0u;
  outlined destroy of Encodable?((uint64_t)&v23, (uint64_t)&lazy cache variable for type metadata for Encodable?, (uint64_t)&lazy cache variable for type metadata for Encodable, MEMORY[0x263F8D0B0], (uint64_t (*)(void))type metadata accessor for AnyTrackedValue?);
  outlined init with copy of Any((uint64_t)v30, (uint64_t)v26);
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for CustomDebugStringConvertible);
  if (swift_dynamicCast())
  {
    outlined init with take of ScrollStateRequest(&v23, (uint64_t)v27);
    __swift_project_boxed_opaque_existential_1(v27, v28);
    uint64_t v16 = dispatch thunk of CustomDebugStringConvertible.debugDescription.getter();
    *(void *)(a2 + 24) = MEMORY[0x263F8D310];
    *(void *)a2 = v16;
    *(void *)(a2 + 8) = v17;
    goto LABEL_8;
  }
  uint64_t v25 = 0;
  long long v23 = 0u;
  long long v24 = 0u;
  outlined destroy of Encodable?((uint64_t)&v23, (uint64_t)&lazy cache variable for type metadata for CustomDebugStringConvertible?, (uint64_t)&lazy cache variable for type metadata for CustomDebugStringConvertible, MEMORY[0x263F8E2A8], (uint64_t (*)(void))type metadata accessor for AnyTrackedValue?);
  outlined init with copy of Any((uint64_t)v30, (uint64_t)v27);
  Mirror.init(reflecting:)();
  Mirror.displayStyle.getter();
  uint64_t v19 = type metadata accessor for Mirror.DisplayStyle();
  uint64_t v20 = *(void *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v6, 1, v19) == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
    outlined destroy of Encodable?((uint64_t)v6, (uint64_t)&lazy cache variable for type metadata for Mirror.DisplayStyle?, MEMORY[0x263F8E818], MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for _ContiguousArrayStorage<(String, String)>);
  }
  else
  {
    if ((*(unsigned int (**)(char *, uint64_t))(v20 + 88))(v6, v19) == *MEMORY[0x263F8E800])
    {
      (*(void (**)(char *, uint64_t))(v20 + 8))(v6, v19);
      outlined init with copy of Any((uint64_t)v30, (uint64_t)v27);
      uint64_t v21 = String.init<A>(describing:)();
      *(void *)(a2 + 24) = MEMORY[0x263F8D310];
      *(void *)a2 = v21;
      *(void *)(a2 + 8) = v22;
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
      return result;
    }
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v6, v19);
  }
  double result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return result;
}

double _ViewDebug.Data.SerializedAttribute.init(type:)@<D0>(uint64_t a1@<X8>)
{
  type metadata accessor for Any.Type();
  *(void *)(a1 + 16) = String.init<A>(reflecting:)();
  *(void *)(a1 + 24) = v2;
  *(void *)(a1 + 32) = AGTypeID.description.getter();
  *(void *)(a1 + 40) = v3;
  _viewProtocolDescriptor();
  uint64_t v4 = swift_conformsToProtocol();
  _viewModifierProtocolDescriptor();
  uint64_t v5 = swift_conformsToProtocol();
  BOOL v6 = v4 != 0;
  uint64_t v7 = 2;
  if (v4) {
    uint64_t v7 = 3;
  }
  if (v5) {
    BOOL v6 = v7;
  }
  *(void *)(a1 + 48) = v6;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 88) = 0;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance _ViewDebug.Data.SerializedAttribute(void *a1)
{
  return _ViewDebug.Data.SerializedAttribute.encode(to:)(a1);
}

double closure #1 in _ViewDebug.Data.serializedProperties()@<D0>(unsigned char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v6 = *a1;
  if (v6 == 1)
  {
    uint64_t v12 = 6;
  }
  else
  {
    if (!*a1)
    {
      uint64_t v7 = (uint64_t)(a1 + 8);
      LOBYTE(v20) = 0;
      outlined init with copy of Any((uint64_t)(a1 + 8), (uint64_t)&v20 + 8);
      type metadata accessor for Any.Type();
      int v8 = swift_dynamicCast();
      uint64_t v9 = v18;
      LOBYTE(v18) = *a1;
      outlined init with copy of Any((uint64_t)(a1 + 8), (uint64_t)v19);
      if (v8) {
        BOOL v10 = v9 == 0;
      }
      else {
        BOOL v10 = 1;
      }
      if (v10)
      {
        __swift_project_boxed_opaque_existential_1(v19, v19[3]);
        swift_getDynamicType();
      }
      outlined destroy of (key: _ViewDebug.Property, value: Any)((uint64_t)&v18, (uint64_t (*)(void))type metadata accessor for (key: _ViewDebug.Property, value: Any));
      _ViewDebug.Data.SerializedAttribute.init(type:)(a4 + 8);
      int v11 = *a1;
      LOBYTE(v20) = v11;
      outlined init with copy of Any(v7, (uint64_t)&v20 + 8);
      *(_DWORD *)a4 = v11;
      goto LABEL_14;
    }
    uint64_t v12 = 4;
  }
  uint64_t v18 = a2;
  v19[0] = a3;
  uint64_t v13 = (uint64_t)(a1 + 8);
  _ViewDebug.Data.serializedAttribute(for:label:reflectionDepth:)((uint64_t)(a1 + 8), 0, 0, v12, &v20);
  if (*((void *)&v21 + 1))
  {
    long long v14 = v23;
    *(_OWORD *)(a4 + 40) = v22;
    *(_OWORD *)(a4 + 56) = v14;
    long long v15 = v25;
    *(_OWORD *)(a4 + 72) = v24;
    *(_OWORD *)(a4 + 88) = v15;
    long long v16 = v21;
    *(_OWORD *)(a4 + 8) = v20;
    *(_OWORD *)(a4 + 24) = v16;
    LOBYTE(v20) = v6;
    outlined init with copy of Any(v13, (uint64_t)&v20 + 8);
    *(_DWORD *)a4 = v6;
LABEL_14:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v20 + 8);
    return result;
  }
  _sypSgWOhTm_14((uint64_t)&v20, &lazy cache variable for type metadata for _ViewDebug.Data.SerializedAttribute?, (uint64_t)&type metadata for _ViewDebug.Data.SerializedAttribute);
  *(void *)(a4 + 96) = 0;
  double result = 0.0;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  return result;
}

uint64_t _ViewDebug.Data.serializedAttribute(for:label:reflectionDepth:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  type metadata accessor for _ContiguousArrayStorage<(String, String)>(0, &lazy cache variable for type metadata for Mirror?, MEMORY[0x263F8E838], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v46 - v12;
  uint64_t v14 = type metadata accessor for Mirror();
  uint64_t v53 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  long long v16 = (char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v54 = *v5;
  _ViewDebug.Data.unwrapped(_:)(a1, (uint64_t)&v74);
  if (!*((void *)&v75 + 1))
  {
    uint64_t result = _sypSgWOhTm_14((uint64_t)&v74, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8);
    a5[4] = 0u;
    a5[5] = 0u;
    a5[2] = 0u;
    a5[3] = 0u;
    *a5 = 0u;
    a5[1] = 0u;
    return result;
  }
  outlined init with take of Any(&v74, v80);
  long long v78 = 0u;
  long long v79 = 0u;
  long long v76 = 0u;
  long long v77 = 0u;
  long long v74 = 0u;
  long long v75 = 0u;
  outlined init with copy of Any((uint64_t)v80, (uint64_t)&v55);
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for Encodable);
  if (swift_dynamicCast())
  {
    outlined destroy of Encodable?((uint64_t)&v67, (uint64_t)&lazy cache variable for type metadata for Encodable?, (uint64_t)&lazy cache variable for type metadata for Encodable, MEMORY[0x263F8D0B0], (uint64_t (*)(void))type metadata accessor for AnyTrackedValue?);
    outlined init with copy of Any((uint64_t)v80, (uint64_t)v73);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v73);
LABEL_10:
    outlined init with copy of Any((uint64_t)v80, (uint64_t)&v55);
    swift_bridgeObjectRetain();
    char v19 = 1;
    goto LABEL_11;
  }
  *(void *)&long long v69 = 0;
  long long v67 = 0u;
  long long v68 = 0u;
  outlined destroy of Encodable?((uint64_t)&v67, (uint64_t)&lazy cache variable for type metadata for Encodable?, (uint64_t)&lazy cache variable for type metadata for Encodable, MEMORY[0x263F8D0B0], (uint64_t (*)(void))type metadata accessor for AnyTrackedValue?);
  outlined init with copy of Any((uint64_t)v80, (uint64_t)v73);
  outlined init with take of Any(v73, &v55);
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for CustomViewDebugValueConvertible);
  if (swift_dynamicCast())
  {
    outlined destroy of Encodable?((uint64_t)&v67, (uint64_t)&lazy cache variable for type metadata for CustomViewDebugValueConvertible?, (uint64_t)&lazy cache variable for type metadata for CustomViewDebugValueConvertible, (uint64_t)&protocol descriptor for CustomViewDebugValueConvertible, (uint64_t (*)(void))type metadata accessor for AnyTrackedValue?);
    goto LABEL_10;
  }
  *(void *)&long long v69 = 0;
  long long v67 = 0u;
  long long v68 = 0u;
  outlined destroy of Encodable?((uint64_t)&v67, (uint64_t)&lazy cache variable for type metadata for CustomViewDebugValueConvertible?, (uint64_t)&lazy cache variable for type metadata for CustomViewDebugValueConvertible, (uint64_t)&protocol descriptor for CustomViewDebugValueConvertible, (uint64_t (*)(void))type metadata accessor for AnyTrackedValue?);
  if (!a4) {
    goto LABEL_10;
  }
  _ViewDebug.Data.effectiveMirror(for:)((uint64_t)v80, (uint64_t)v13);
  uint64_t v18 = v53;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v13, 1, v14) == 1)
  {
    outlined destroy of Encodable?((uint64_t)v13, (uint64_t)&lazy cache variable for type metadata for Mirror?, MEMORY[0x263F8E838], MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for _ContiguousArrayStorage<(String, String)>);
    outlined init with copy of Any((uint64_t)v80, (uint64_t)&v55);
    swift_bridgeObjectRetain();
    char v19 = 0;
LABEL_11:
    _ViewDebug.Data.SerializedAttribute.init(value:serializeValue:label:subattributes:)(&v55, v19, a2, a3, 0, (uint64_t)&v67);
LABEL_12:
    _sypSgWOhTm_14((uint64_t)&v74, &lazy cache variable for type metadata for _ViewDebug.Data.SerializedAttribute?, (uint64_t)&type metadata for _ViewDebug.Data.SerializedAttribute);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v80);
    outlined init with take of _ViewDebug.Data.SerializedAttribute?((uint64_t)&v67, (uint64_t)&v74, &lazy cache variable for type metadata for _ViewDebug.Data.SerializedAttribute?, (uint64_t)&type metadata for _ViewDebug.Data.SerializedAttribute);
    return outlined init with take of _ViewDebug.Data.SerializedAttribute?((uint64_t)&v74, (uint64_t)a5, &lazy cache variable for type metadata for _ViewDebug.Data.SerializedAttribute?, (uint64_t)&type metadata for _ViewDebug.Data.SerializedAttribute);
  }
  uint64_t v47 = a3;
  uint64_t v49 = a4;
  uint64_t v52 = a2;
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v16, v13, v14);
  uint64_t v20 = Mirror.children.getter();
  long long v21 = *(uint64_t **)(v20 + 24);
  uint64_t v51 = *(void *)(v20 + 40);
  uint64_t ObjectType = swift_getObjectType();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  uint64_t v48 = ObjectType;
  char v50 = v21;
  uint64_t v23 = dispatch thunk of _AnyIndexBox._typeID.getter();
  swift_getObjectType();
  uint64_t result = dispatch thunk of _AnyIndexBox._typeID.getter();
  if (v23 == result)
  {
    char v24 = dispatch thunk of _AnyIndexBox._isEqual(to:)();
    swift_release();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    uint64_t v25 = v49;
    uint64_t v26 = v47;
    if (v24)
    {
      outlined init with copy of Any((uint64_t)v80, (uint64_t)&v55);
      swift_bridgeObjectRetain();
      char v27 = 1;
      uint64_t v28 = v52;
      uint64_t v29 = v26;
      uint64_t v30 = 0;
LABEL_32:
      _ViewDebug.Data.SerializedAttribute.init(value:serializeValue:label:subattributes:)(&v55, v27, v28, v29, v30, (uint64_t)&v67);
      (*(void (**)(char *, uint64_t))(v53 + 8))(v16, v14);
      goto LABEL_12;
    }
    Mirror.children.getter();
    uint64_t v31 = dispatch thunk of _AnySequenceBox._makeIterator()();
    swift_release();
    swift_retain();
    uint64_t v51 = v31;
    dispatch thunk of _AnyIteratorBoxBase.next()();
    uint64_t v32 = v52;
    if (!v66)
    {
      char v34 = (void *)MEMORY[0x263F8EE78];
LABEL_31:
      swift_release_n();
      outlined init with copy of Any((uint64_t)v80, (uint64_t)&v55);
      swift_bridgeObjectRetain();
      char v27 = 0;
      uint64_t v28 = v32;
      uint64_t v29 = v26;
      uint64_t v30 = (uint64_t)v34;
      goto LABEL_32;
    }
    char v50 = &v65;
    BOOL v33 = __OFSUB__(v25, 1);
    uint64_t v48 = v25 - 1;
    char v34 = (void *)MEMORY[0x263F8EE78];
    int v35 = v33;
    LODWORD(v49) = v35;
    while (1)
    {
      uint64_t v37 = v63;
      uint64_t v36 = v64;
      v61[0] = v63;
      v61[1] = v64;
      uint64_t result = (uint64_t)outlined init with take of Any(v50, v62);
      long long v67 = v54;
      if (v49) {
        break;
      }
      swift_bridgeObjectRetain();
      _ViewDebug.Data.serializedAttribute(for:label:reflectionDepth:)(&v55, v62, v37, v36, v48);
      swift_bridgeObjectRelease();
      if (*((void *)&v56 + 1))
      {
        long long v69 = v57;
        long long v70 = v58;
        long long v71 = v59;
        long long v72 = v60;
        long long v67 = v55;
        long long v68 = v56;
        outlined init with copy of _ViewDebug.Data.SerializedAttribute(&v67, (uint64_t)&v55);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v32 = v52;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          char v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v34[2] + 1, 1, v34);
        }
        unint64_t v40 = v34[2];
        unint64_t v39 = v34[3];
        if (v40 >= v39 >> 1) {
          char v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v39 > 1), v40 + 1, 1, v34);
        }
        _OWORD v34[2] = v40 + 1;
        uint64_t v41 = &v34[12 * v40];
        long long v42 = v56;
        void v41[2] = v55;
        v41[3] = v42;
        long long v43 = v57;
        long long v44 = v58;
        long long v45 = v60;
        void v41[6] = v59;
        v41[7] = v45;
        v41[4] = v43;
        Swift::UInt v41[5] = v44;
        outlined destroy of _ViewDebug.Data.SerializedAttribute((uint64_t)&v67);
        outlined destroy of (key: _ViewDebug.Property, value: Any)((uint64_t)v61, (uint64_t (*)(void))type metadata accessor for (label: String?, value: Any));
      }
      else
      {
        outlined destroy of (key: _ViewDebug.Property, value: Any)((uint64_t)v61, (uint64_t (*)(void))type metadata accessor for (label: String?, value: Any));
        _sypSgWOhTm_14((uint64_t)&v55, &lazy cache variable for type metadata for _ViewDebug.Data.SerializedAttribute?, (uint64_t)&type metadata for _ViewDebug.Data.SerializedAttribute);
        uint64_t v32 = v52;
      }
      dispatch thunk of _AnyIteratorBoxBase.next()();
      if (!v66) {
        goto LABEL_31;
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t _ViewDebug.Data.unwrapped(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  outlined init with copy of Any(a1, a2);
  outlined init with copy of Any(a1, (uint64_t)v10);
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for ValueWrapper);
  uint64_t v4 = MEMORY[0x263F8EE58] + 8;
  if (swift_dynamicCast())
  {
    outlined init with take of ScrollStateRequest(v8, (uint64_t)v11);
    uint64_t v5 = v12;
    uint64_t v6 = v13;
    __swift_project_boxed_opaque_existential_1(v11, v12);
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v6 + 8))(v8, v5, v6);
    _sypSgWOhTm_14(a2, (unint64_t *)&lazy cache variable for type metadata for Any?, v4);
    outlined init with take of _ViewDebug.Data.SerializedAttribute?((uint64_t)v8, a2, (unint64_t *)&lazy cache variable for type metadata for Any?, v4);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  }
  else
  {
    uint64_t v9 = 0;
    memset(v8, 0, sizeof(v8));
    return outlined destroy of Encodable?((uint64_t)v8, (uint64_t)&lazy cache variable for type metadata for ValueWrapper?, (uint64_t)&lazy cache variable for type metadata for ValueWrapper, (uint64_t)&protocol descriptor for ValueWrapper, (uint64_t (*)(void))type metadata accessor for AnyTrackedValue?);
  }
}

uint64_t _ViewDebug.Data.effectiveMirror(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  outlined init with copy of Any(a1, (uint64_t)v12);
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for CustomViewDebugReflectable);
  if (swift_dynamicCast())
  {
    outlined init with take of ScrollStateRequest(&v9, (uint64_t)v13);
    uint64_t v4 = v14;
    uint64_t v5 = v15;
    __swift_project_boxed_opaque_existential_1(v13, v14);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }
  uint64_t v11 = 0;
  long long v9 = 0u;
  long long v10 = 0u;
  outlined destroy of Encodable?((uint64_t)&v9, (uint64_t)&lazy cache variable for type metadata for CustomViewDebugReflectable?, (uint64_t)&lazy cache variable for type metadata for CustomViewDebugReflectable, (uint64_t)&protocol descriptor for CustomViewDebugReflectable, (uint64_t (*)(void))type metadata accessor for AnyTrackedValue?);
  outlined init with copy of Any(a1, (uint64_t)v12);
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for CustomReflectable);
  if (swift_dynamicCast())
  {
    outlined init with take of ScrollStateRequest(&v9, (uint64_t)v13);
    __swift_project_boxed_opaque_existential_1(v13, v14);
    dispatch thunk of CustomReflectable.customMirror.getter();
    uint64_t v6 = type metadata accessor for Mirror();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(a2, 0, 1, v6);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }
  uint64_t v11 = 0;
  long long v9 = 0u;
  long long v10 = 0u;
  outlined destroy of Encodable?((uint64_t)&v9, (uint64_t)&lazy cache variable for type metadata for CustomReflectable?, (uint64_t)&lazy cache variable for type metadata for CustomReflectable, MEMORY[0x263F8DEB8], (uint64_t (*)(void))type metadata accessor for AnyTrackedValue?);
  outlined init with copy of Any(a1, (uint64_t)v13);
  Mirror.init(reflecting:)();
  uint64_t v8 = type metadata accessor for Mirror();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(a2, 0, 1, v8);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance _ViewDebug.Data(void *a1)
{
  return _ViewDebug.Data.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ViewTransform.Item.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ViewTransform.Item.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ViewTransform.Item.CodingKeys()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ViewTransform.Item.CodingKeys()
{
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ViewTransform.Item.CodingKeys@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized ViewTransform.Item.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance ViewTransform.Item.CodingKeys(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xEB000000006E6F69;
  unint64_t v4 = 0xEF6D726F66736E61;
  unint64_t v5 = 0x7254656E69666661;
  if (v2 != 1)
  {
    unint64_t v5 = 0xD000000000000013;
    unint64_t v4 = 0x800000024621A0D0;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x74616C736E617274;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ViewTransform.Item.CodingKeys()
{
  unint64_t v1 = 0x7254656E69666661;
  if (*v0 != 1) {
    unint64_t v1 = 0xD000000000000013;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x74616C736E617274;
  }
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance ViewTransform.Item.CodingKeys@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized ViewTransform.Item.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ViewTransform.Item.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ViewTransform.Item.CodingKeys and conformance ViewTransform.Item.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ViewTransform.Item.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ViewTransform.Item.CodingKeys and conformance ViewTransform.Item.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ViewTransform.Item.encode(to:)(void *a1)
{
  uint64_t v2 = v1;
  type metadata accessor for KeyedEncodingContainer<_ViewDebug.Data.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<ViewTransform.Item.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type ViewTransform.Item.CodingKeys and conformance ViewTransform.Item.CodingKeys);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v42 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ViewTransform.Item.CodingKeys and conformance ViewTransform.Item.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of ViewTransform.Item(v2, (uint64_t)&v44);
  switch(v51)
  {
    case 1:
      int v9 = LOBYTE(v47);
      *(_OWORD *)&v42.CGFloat m11 = v44;
      *(_OWORD *)&v42.CGFloat m13 = v45;
      *(_OWORD *)&v42.CGFloat m21 = v46;
      CATransform3DMakeAffineTransform(&v43, (CGAffineTransform *)&v42);
      CGFloat m11 = v43.m11;
      CGFloat m12 = v43.m12;
      CGFloat m13 = v43.m13;
      CGFloat m14 = v43.m14;
      CGFloat m21 = v43.m21;
      CGFloat m22 = v43.m22;
      CGFloat m23 = v43.m23;
      CGFloat m24 = v43.m24;
      CGFloat m31 = v43.m31;
      CGFloat m32 = v43.m32;
      CGFloat m33 = v43.m33;
      CGFloat m34 = v43.m34;
      CGFloat m41 = v43.m41;
      CGFloat m42 = v43.m42;
      CGFloat m43 = v43.m43;
      CGFloat m44 = v43.m44;
      if (v9 == 1)
      {
        CATransform3DInvert(&v42, &v43);
        CGFloat m11 = v42.m11;
        CGFloat m12 = v42.m12;
        CGFloat m13 = v42.m13;
        CGFloat m14 = v42.m14;
        CGFloat m21 = v42.m21;
        CGFloat m22 = v42.m22;
        CGFloat m23 = v42.m23;
        CGFloat m24 = v42.m24;
        CGFloat m31 = v42.m31;
        CGFloat m32 = v42.m32;
        CGFloat m33 = v42.m33;
        CGFloat m34 = v42.m34;
        CGFloat m41 = v42.m41;
        CGFloat m42 = v42.m42;
        CGFloat m43 = v42.m43;
        CGFloat m44 = v42.m44;
      }
      CGFloat v52 = m11;
      CGFloat v53 = m12;
      CGFloat v54 = m13;
      CGFloat v55 = m14;
      CGFloat v56 = m21;
      CGFloat v57 = m22;
      CGFloat v58 = m23;
      CGFloat v59 = m24;
      CGFloat v60 = m31;
      CGFloat v61 = m32;
      CGFloat v62 = m33;
      CGFloat v63 = m34;
      CGFloat v64 = m41;
      CGFloat v65 = m42;
      CGFloat v66 = m43;
      CGFloat v67 = m44;
      CATransform3D.elements.getter();
      v43.CGFloat m11 = v26;
      char v27 = 1;
      goto LABEL_14;
    case 2:
      CGFloat v28 = *(double *)&v44;
      CGFloat v29 = *((double *)&v45 + 1);
      CGFloat v30 = *(double *)&v45;
      CGFloat v31 = v47;
      CGFloat v32 = v49;
      if (v50 == 1)
      {
        *(_OWORD *)&v43.CGFloat m11 = v44;
        v43.CGFloat m13 = 0.0;
        *(_OWORD *)&v43.CGFloat m14 = v45;
        *(void *)&v43.CGFloat m22 = v46;
        v43.CGFloat m23 = 0.0;
        v43.CGFloat m24 = *((CGFloat *)&v46 + 1);
        v43.CGFloat m31 = 0.0;
        v43.CGFloat m32 = 0.0;
        *(_OWORD *)&v43.CGFloat m33 = xmmword_2461BCA80;
        v43.CGFloat m41 = v47;
        v43.CGFloat m42 = v48;
        v43.CGFloat m43 = 0.0;
        v43.CGFloat m44 = v49;
        CATransform3DInvert(&v42, &v43);
        CGFloat v28 = v42.m11;
        long long v33 = *(_OWORD *)&v42.m12;
        CGFloat v30 = v42.m14;
        CGFloat v29 = v42.m21;
        long long v34 = *(_OWORD *)&v42.m22;
        long long v35 = *(_OWORD *)&v42.m24;
        long long v36 = *(_OWORD *)&v42.m32;
        CGFloat v37 = v42.m34;
        CGFloat v31 = v42.m41;
        long long v38 = *(_OWORD *)&v42.m42;
        CGFloat v32 = v42.m44;
      }
      else
      {
        long long v33 = *((unint64_t *)&v44 + 1);
        long long v34 = (unint64_t)v46;
        long long v35 = *((unint64_t *)&v46 + 1);
        long long v38 = *(unint64_t *)&v48;
        long long v36 = xmmword_2461C55F0;
        CGFloat v37 = 0.0;
      }
      long long v69 = v33;
      CGFloat v68 = v28;
      CGFloat v70 = v30;
      CGFloat v71 = v29;
      long long v72 = v34;
      long long v73 = v35;
      long long v74 = v36;
      CGFloat v75 = v37;
      CGFloat v76 = v31;
      long long v77 = v38;
      CGFloat v78 = v32;
      CATransform3D.elements.getter();
      v43.CGFloat m11 = v40;
      char v27 = 2;
LABEL_14:
      LOBYTE(v42.m11) = v27;
      uint64_t v41 = MEMORY[0x263F8EF38];
      type metadata accessor for [_ViewDebug.Data](0, &lazy cache variable for type metadata for [CGFloat], MEMORY[0x263F8EF38], MEMORY[0x263F8D488]);
      lazy protocol witness table accessor for type [_ViewDebug.Data] and conformance <A> [A](&lazy protocol witness table cache variable for type [CGFloat] and conformance <A> [A], &lazy cache variable for type metadata for [CGFloat], v41, (void (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat);
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      swift_bridgeObjectRelease();
      return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    case 3:
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      return outlined destroy of ViewTransform.Item((uint64_t)&v44);
    case 4:
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      return outlined destroy of CoordinateSpace.Name((uint64_t)&v44);
    case 5:
      return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    default:
      *(_OWORD *)&v43.CGFloat m11 = v44;
      LOBYTE(v42.m11) = 0;
      type metadata accessor for CGSize(0);
      lazy protocol witness table accessor for type CGSize and conformance CGSize();
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

__n128 CATransform3D.elements.getter()
{
  type metadata accessor for [_ViewDebug.Data](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CGFloat>, MEMORY[0x263F8EF38], MEMORY[0x263F8E0F8]);
  uint64_t v1 = swift_allocObject();
  long long v2 = *v0;
  long long v3 = v0[1];
  *(_OWORD *)(v1 + 16) = xmmword_246203370;
  *(_OWORD *)(v1 + 32) = v2;
  long long v4 = v0[2];
  long long v5 = v0[3];
  *(_OWORD *)(v1 + 48) = v3;
  *(_OWORD *)(v1 + 64) = v4;
  long long v6 = v0[4];
  long long v7 = v0[5];
  *(_OWORD *)(v1 + 80) = v5;
  *(_OWORD *)(v1 + 96) = v6;
  __n128 result = (__n128)v0[6];
  long long v9 = v0[7];
  *(_OWORD *)(v1 + 112) = v7;
  *(__n128 *)(v1 + 128) = result;
  *(_OWORD *)(v1 + 144) = v9;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ViewTransform.Item(void *a1)
{
  return ViewTransform.Item.encode(to:)(a1);
}

uint64_t Optional.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 - 8);
  double v5 = MEMORY[0x270FA5388](a1);
  long long v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v4 + 16))(v7, v5);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, a1);
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  else
  {
    *(void *)(a2 + 24) = v8;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)a2);
    return (*(uint64_t (**)(uint64_t *, char *, uint64_t))(v9 + 32))(boxed_opaque_existential_1, v7, v8);
  }
  return result;
}

void static View._logChanges()(uint64_t a1)
{
}

unint64_t lazy protocol witness table accessor for type _ViewDebug.Data and conformance _ViewDebug.Data()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewDebug.Data and conformance _ViewDebug.Data;
  if (!lazy protocol witness table cache variable for type _ViewDebug.Data and conformance _ViewDebug.Data)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewDebug.Data and conformance _ViewDebug.Data);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewDebug.Data.CodingKeys and conformance _ViewDebug.Data.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewDebug.Data.CodingKeys and conformance _ViewDebug.Data.CodingKeys;
  if (!lazy protocol witness table cache variable for type _ViewDebug.Data.CodingKeys and conformance _ViewDebug.Data.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewDebug.Data.CodingKeys and conformance _ViewDebug.Data.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _ViewDebug.Data.CodingKeys and conformance _ViewDebug.Data.CodingKeys;
  if (!lazy protocol witness table cache variable for type _ViewDebug.Data.CodingKeys and conformance _ViewDebug.Data.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewDebug.Data.CodingKeys and conformance _ViewDebug.Data.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _ViewDebug.Data.CodingKeys and conformance _ViewDebug.Data.CodingKeys;
  if (!lazy protocol witness table cache variable for type _ViewDebug.Data.CodingKeys and conformance _ViewDebug.Data.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewDebug.Data.CodingKeys and conformance _ViewDebug.Data.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _ViewDebug.Data.CodingKeys and conformance _ViewDebug.Data.CodingKeys;
  if (!lazy protocol witness table cache variable for type _ViewDebug.Data.CodingKeys and conformance _ViewDebug.Data.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewDebug.Data.CodingKeys and conformance _ViewDebug.Data.CodingKeys);
  }
  return result;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v40 = a3;
  uint64_t v20 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v21 = (unint64_t)(v5 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v9 = 0;
  long long v10 = (void *)MEMORY[0x263F8EE78];
  if (v7) {
    goto LABEL_6;
  }
LABEL_7:
  if (__OFADD__(v9++, 1))
  {
    __break(1u);
    goto LABEL_35;
  }
  if (v9 >= v21) {
    goto LABEL_33;
  }
  unint64_t v14 = *(void *)(v20 + 8 * v9);
  if (v14) {
    goto LABEL_19;
  }
  int64_t v15 = v9 + 1;
  if (v9 + 1 >= v21) {
    goto LABEL_33;
  }
  unint64_t v14 = *(void *)(v20 + 8 * v15);
  if (v14)
  {
LABEL_18:
    int64_t v9 = v15;
LABEL_19:
    unint64_t v7 = (v14 - 1) & v14;
    for (unint64_t i = __clz(__rbit64(v14)) + (v9 << 6); ; unint64_t i = v11 | (v9 << 6))
    {
      char v16 = *(unsigned char *)(*(void *)(a1 + 48) + i);
      outlined init with copy of Any(*(void *)(a1 + 56) + 32 * i, (uint64_t)v38 + 8);
      LOBYTE(v38[0]) = v16;
      v36[0] = v38[0];
      v36[1] = v38[1];
      uint64_t v37 = v39;
      closure #1 in _ViewDebug.Data.serializedProperties()(v36, a2, v40, (uint64_t)v30);
      if (v3) {
        break;
      }
      outlined destroy of (key: _ViewDebug.Property, value: Any)((uint64_t)v36, (uint64_t (*)(void))type metadata accessor for (key: _ViewDebug.Property, value: Any));
      if ((void)v31)
      {
        long long v27 = v33;
        long long v28 = v34;
        uint64_t v29 = v35;
        long long v23 = v30[0];
        long long v24 = v30[1];
        long long v25 = v31;
        long long v26 = v32;
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
          long long v10 = (void *)result;
        }
        unint64_t v18 = v10[2];
        unint64_t v17 = v10[3];
        if (v18 >= v17 >> 1)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v18 + 1, 1, v10);
          long long v10 = (void *)result;
        }
        v10[2] = v18 + 1;
        char v19 = &v10[13 * v18];
        *((_OWORD *)v19 + 3) = v24;
        *((_OWORD *)v19 + 4) = v25;
        *((_OWORD *)v19 + 2) = v23;
        v19[16] = v29;
        *((_OWORD *)v19 + 6) = v27;
        *((_OWORD *)v19 + 7) = v28;
        *((_OWORD *)v19 + 5) = v26;
        if (!v7) {
          goto LABEL_7;
        }
      }
      else
      {
        uint64_t result = _sypSgWOhTm_14((uint64_t)v30, &lazy cache variable for type metadata for _ViewDebug.Data.SerializedProperty?, (uint64_t)&type metadata for _ViewDebug.Data.SerializedProperty);
        if (!v7) {
          goto LABEL_7;
        }
      }
LABEL_6:
      unint64_t v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
    }
    outlined destroy of (key: _ViewDebug.Property, value: Any)((uint64_t)v36, (uint64_t (*)(void))type metadata accessor for (key: _ViewDebug.Property, value: Any));
    swift_bridgeObjectRelease();
    goto LABEL_33;
  }
  int64_t v15 = v9 + 2;
  if (v9 + 2 >= v21)
  {
LABEL_33:
    swift_release();
    return (uint64_t)v10;
  }
  unint64_t v14 = *(void *)(v20 + 8 * v15);
  if (v14) {
    goto LABEL_18;
  }
  int64_t v15 = v9 + 3;
  if (v9 + 3 >= v21) {
    goto LABEL_33;
  }
  unint64_t v14 = *(void *)(v20 + 8 * v15);
  if (v14) {
    goto LABEL_18;
  }
  int64_t v15 = v9 + 4;
  if (v9 + 4 >= v21) {
    goto LABEL_33;
  }
  unint64_t v14 = *(void *)(v20 + 8 * v15);
  if (v14) {
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v9 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v9 >= v21) {
      goto LABEL_33;
    }
    unint64_t v14 = *(void *)(v20 + 8 * v9);
    ++v15;
    if (v14) {
      goto LABEL_19;
    }
  }
LABEL_35:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t *v4;
  __objc2_prot **v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t result;
  id v20;
  id v21;
  id v22;
  unint64_t v23;
  unint64_t v24;
  void *v25;
  char v26;
  uint64_t v27;
  id v28;
  void *v29;
  uint64_t aBlock;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  void *v35;
  uint64_t (*v36)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  _OWORD v38[3];
  uint64_t v39[2];

  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(swift_bridgeObjectRetain() + 56);
    uint64_t v29 = (void *)MEMORY[0x263F8EE78];
    uint64_t v5 = &_OBJC_LABEL_PROTOCOL____NSTextAnimatorStateSnapshot;
    while (1)
    {
      uint64_t v6 = *(v4 - 3);
      unint64_t v7 = *(v4 - 2);
      uint64_t v8 = *((unsigned __int8 *)v4 - 8);
      int64_t v9 = *v4;
      aBlock = a2;
      long long v33 = a3;
      long long v10 = unk_26FA881F0;
      if ((unk_26FA881F0 & ~qword_26FA881E8) == 0) {
        long long v10 = 0;
      }
      v39[0] = v10 | qword_26FA881E8;
      v38[0] = 0uLL;
      swift_bridgeObjectRetain();
      outlined copy of Text.Storage(v6, v7, v8);
      swift_retain();
      swift_retain();
      unint64_t v11 = Text.resolveAttributedString(in:includeDefaultAttributes:options:idiom:)(&aBlock, 1, v39, (uint64_t *)v38, v6, v7, v8, v9);
      if (v11)
      {
        uint64_t v12 = v11;
        long long v26 = v8;
        long long v27 = v7;
        LOBYTE(v39[0]) = 0;
        memset(v38, 0, 32);
        uint64_t v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F089B8]), sel_initWithAttributedString_, v11);

        unint64_t v14 = v13;
        long long v28 = [v14 (SEL)v5[128]];

        int64_t v15 = swift_allocObject();
        *(void *)(v15 + 16) = a2;
        *(void *)(v15 + 24) = a3;
        *(void *)(v15 + 32) = v39;
        *(void *)(v15 + 40) = v38;
        *(void *)(v15 + 48) = v14;
        *(unsigned char *)(v15 + 56) = 1;
        char v16 = swift_allocObject();
        *(void *)(v16 + 16) = partial apply for closure #1 in static AccessibilityCore.resolveAttributedTextAttributes(in:environment:includeResolvableAttributes:);
        *(void *)(v16 + 24) = v15;
        long long v36 = _sSDySo21NSAttributedStringKeyaypGSo8_NSRangeVSpy10ObjectiveC8ObjCBoolVGIggyy_AceIIeggyy_TRTA_0;
        uint64_t v37 = v16;
        aBlock = MEMORY[0x263EF8330];
        long long v33 = 1107296256;
        long long v34 = thunk for @escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any], @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
        uint64_t v35 = &block_descriptor_33;
        unint64_t v17 = _Block_copy(&aBlock);
        swift_retain();
        swift_retain();
        unint64_t v18 = v14;
        swift_retain();
        swift_release();
        objc_msgSend(v18, sel_enumerateAttributesInRange_options_usingBlock_, 0, v28, 0, v17);
        _Block_release(v17);
        LOBYTE(v17) = swift_isEscapingClosureAtFileLocation();
        uint64_t result = swift_release();
        if (v17)
        {
          __break(1u);
          return result;
        }
        uint64_t v20 = v18;
        int64_t v21 = [v20 (SEL)v5[128]];

        long long v22 = objc_msgSend(v20, sel_attributedSubstringFromRange_, 0, v21);
        swift_release();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        outlined consume of Text.Storage(v6, v27, v26);
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29[2] + 1, 1, v29);
        }
        long long v24 = v29[2];
        long long v23 = v29[3];
        if (v24 >= v23 >> 1) {
          uint64_t v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v23 > 1), v24 + 1, 1, v29);
        }
        v29[2] = v24 + 1;
        long long v25 = &v29[3 * v24];
        void v25[4] = v22;
        v25[5] = 0;
        *((_WORD *)v25 + 24) = 1;
        uint64_t v5 = &_OBJC_LABEL_PROTOCOL____NSTextAnimatorStateSnapshot;
      }
      else
      {
        swift_release();
        swift_release();
        outlined consume of Text.Storage(v6, v7, v8);
        swift_bridgeObjectRelease();
      }
      v4 += 4;
      if (!--v3)
      {
        swift_bridgeObjectRelease();
        return (uint64_t)v29;
      }
    }
  }
  return MEMORY[0x263F8EE78];
}

uint64_t lazy protocol witness table accessor for type [_ViewDebug.Data] and conformance <A> [A](unint64_t *a1, unint64_t *a2, uint64_t a3, void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for [_ViewDebug.Data](255, a2, a3, MEMORY[0x263F8D488]);
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewDebug.Data.SerializedProperty and conformance _ViewDebug.Data.SerializedProperty()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedProperty and conformance _ViewDebug.Data.SerializedProperty;
  if (!lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedProperty and conformance _ViewDebug.Data.SerializedProperty)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedProperty and conformance _ViewDebug.Data.SerializedProperty);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ViewTransform.Item.CodingKeys and conformance ViewTransform.Item.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ViewTransform.Item.CodingKeys and conformance ViewTransform.Item.CodingKeys;
  if (!lazy protocol witness table cache variable for type ViewTransform.Item.CodingKeys and conformance ViewTransform.Item.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewTransform.Item.CodingKeys and conformance ViewTransform.Item.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ViewTransform.Item.CodingKeys and conformance ViewTransform.Item.CodingKeys;
  if (!lazy protocol witness table cache variable for type ViewTransform.Item.CodingKeys and conformance ViewTransform.Item.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewTransform.Item.CodingKeys and conformance ViewTransform.Item.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ViewTransform.Item.CodingKeys and conformance ViewTransform.Item.CodingKeys;
  if (!lazy protocol witness table cache variable for type ViewTransform.Item.CodingKeys and conformance ViewTransform.Item.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewTransform.Item.CodingKeys and conformance ViewTransform.Item.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ViewTransform.Item.CodingKeys and conformance ViewTransform.Item.CodingKeys;
  if (!lazy protocol witness table cache variable for type ViewTransform.Item.CodingKeys and conformance ViewTransform.Item.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewTransform.Item.CodingKeys and conformance ViewTransform.Item.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CGSize and conformance CGSize()
{
  unint64_t result = lazy protocol witness table cache variable for type CGSize and conformance CGSize;
  if (!lazy protocol witness table cache variable for type CGSize and conformance CGSize)
  {
    type metadata accessor for CGSize(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGSize and conformance CGSize);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewDebug.Properties and conformance _ViewDebug.Properties()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewDebug.Properties and conformance _ViewDebug.Properties;
  if (!lazy protocol witness table cache variable for type _ViewDebug.Properties and conformance _ViewDebug.Properties)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewDebug.Properties and conformance _ViewDebug.Properties);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _ViewDebug.Properties and conformance _ViewDebug.Properties;
  if (!lazy protocol witness table cache variable for type _ViewDebug.Properties and conformance _ViewDebug.Properties)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewDebug.Properties and conformance _ViewDebug.Properties);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _ViewDebug.Properties and conformance _ViewDebug.Properties;
  if (!lazy protocol witness table cache variable for type _ViewDebug.Properties and conformance _ViewDebug.Properties)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewDebug.Properties and conformance _ViewDebug.Properties);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _ViewDebug.Properties and conformance _ViewDebug.Properties;
  if (!lazy protocol witness table cache variable for type _ViewDebug.Properties and conformance _ViewDebug.Properties)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewDebug.Properties and conformance _ViewDebug.Properties);
  }
  return result;
}

ValueMetadata *type metadata accessor for _ViewDebug()
{
  return &type metadata for _ViewDebug;
}

unsigned char *storeEnumTagSinglePayload for _ViewDebug.Property(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *unint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24601E108);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _ViewDebug.Property()
{
  return &type metadata for _ViewDebug.Property;
}

ValueMetadata *type metadata accessor for _ViewDebug.Data()
{
  return &type metadata for _ViewDebug.Data;
}

uint64_t dispatch thunk of CustomViewDebugReflectable.customViewDebugMirror.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of CustomViewDebugValueConvertible.viewDebugValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ValueWrapper.wrappedValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

unsigned char *storeEnumTagSinglePayload for ViewTransform.Item.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24601E258);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ViewTransform.Item.CodingKeys()
{
  return &type metadata for ViewTransform.Item.CodingKeys;
}

uint64_t destroy for _ViewDebug.Data.SerializedProperty(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 88)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 64);
  }

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for _ViewDebug.Data.SerializedProperty(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  unint64_t v7 = (_OWORD *)(a2 + 64);
  uint64_t v8 = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v8)
  {
    *(void *)(a1 + 88) = v8;
    (**(void (***)(uint64_t, _OWORD *, uint64_t))(v8 - 8))(a1 + 64, v7, v8);
  }
  else
  {
    long long v9 = v7[1];
    *(_OWORD *)(a1 + 64) = *v7;
    *(_OWORD *)(a1 + 80) = v9;
  }
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _ViewDebug.Data.SerializedProperty(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v4 = *(void *)(a2 + 88);
  if (!*(void *)(a1 + 88))
  {
    if (v4)
    {
      *(void *)(a1 + 88) = v4;
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 64, a2 + 64);
      goto LABEL_8;
    }
LABEL_7:
    long long v5 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v5;
    goto LABEL_8;
  }
  if (!v4)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 64);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)(a1 + 64), (uint64_t *)(a2 + 64));
LABEL_8:
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for _ViewDebug.Data.SerializedProperty(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  if (*(void *)(a1 + 88)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 64);
  }
  long long v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for _ViewDebug.Data.SerializedProperty(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 104)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _ViewDebug.Data.SerializedProperty(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 104) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 104) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _ViewDebug.Data.SerializedProperty()
{
  return &type metadata for _ViewDebug.Data.SerializedProperty;
}

ValueMetadata *type metadata accessor for _ViewDebug.Data.CodingKeys()
{
  return &type metadata for _ViewDebug.Data.CodingKeys;
}

unint64_t lazy protocol witness table accessor for type _ViewDebug.Data.SerializedProperty.CodingKeys and conformance _ViewDebug.Data.SerializedProperty.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedProperty.CodingKeys and conformance _ViewDebug.Data.SerializedProperty.CodingKeys;
  if (!lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedProperty.CodingKeys and conformance _ViewDebug.Data.SerializedProperty.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedProperty.CodingKeys and conformance _ViewDebug.Data.SerializedProperty.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedProperty.CodingKeys and conformance _ViewDebug.Data.SerializedProperty.CodingKeys;
  if (!lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedProperty.CodingKeys and conformance _ViewDebug.Data.SerializedProperty.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedProperty.CodingKeys and conformance _ViewDebug.Data.SerializedProperty.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedProperty.CodingKeys and conformance _ViewDebug.Data.SerializedProperty.CodingKeys;
  if (!lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedProperty.CodingKeys and conformance _ViewDebug.Data.SerializedProperty.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedProperty.CodingKeys and conformance _ViewDebug.Data.SerializedProperty.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedProperty.CodingKeys and conformance _ViewDebug.Data.SerializedProperty.CodingKeys;
  if (!lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedProperty.CodingKeys and conformance _ViewDebug.Data.SerializedProperty.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedProperty.CodingKeys and conformance _ViewDebug.Data.SerializedProperty.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewDebug.Data.SerializedAttribute and conformance _ViewDebug.Data.SerializedAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedAttribute and conformance _ViewDebug.Data.SerializedAttribute;
  if (!lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedAttribute and conformance _ViewDebug.Data.SerializedAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedAttribute and conformance _ViewDebug.Data.SerializedAttribute);
  }
  return result;
}

unint64_t specialized _ViewDebug.Data.SerializedAttribute.CodingKeys.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of _ViewDebug.Data.SerializedAttribute.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 6) {
    return 6;
  }
  else {
    return v3;
  }
}

unint64_t specialized ViewTransform.Item.CodingKeys.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ViewTransform.Item.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

void type metadata accessor for (key: _ViewDebug.Property, value: Any)()
{
  if (!lazy cache variable for type metadata for (key: _ViewDebug.Property, value: Any))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (key: _ViewDebug.Property, value: Any));
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<(String, String)>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t outlined destroy of (key: _ViewDebug.Property, value: Any)(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with copy of _ViewDebug.Data.SerializedAttribute(void *a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of _ViewDebug.Data.SerializedAttribute(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with take of _ViewDebug.Data.SerializedAttribute?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for [_ViewDebug.Data](0, a3, a4, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t outlined destroy of Encodable?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = a5(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t sub_24601EC20()
{
  swift_release();

  return swift_deallocObject();
}

unsigned char *storeEnumTagSinglePayload for _ViewDebug.Data.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24601ED24);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for _ViewDebug.Data.SerializedProperty.CodingKeys()
{
  return &unk_26FA40C90;
}

uint64_t destroy for _ViewDebug.Data.SerializedAttribute(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 80)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 56);
  }

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for _ViewDebug.Data.SerializedAttribute(uint64_t a1, void *a2)
{
  uint64_t v4 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = a2[3];
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = a2[5];
  *(void *)(a1 + 32) = a2[4];
  *(void *)(a1 + 40) = v6;
  *(void *)(a1 + 48) = a2[6];
  uint64_t v7 = a2 + 7;
  uint64_t v8 = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v8)
  {
    *(void *)(a1 + 80) = v8;
    (**(void (***)(uint64_t, _OWORD *, uint64_t))(v8 - 8))(a1 + 56, v7, v8);
  }
  else
  {
    long long v9 = v7[1];
    *(_OWORD *)(a1 + 56) = *v7;
    *(_OWORD *)(a1 + 72) = v9;
  }
  *(void *)(a1 + 88) = a2[11];
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _ViewDebug.Data.SerializedAttribute(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 80);
  if (!*(void *)(a1 + 80))
  {
    if (v4)
    {
      *(void *)(a1 + 80) = v4;
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 56, a2 + 56);
      goto LABEL_8;
    }
LABEL_7:
    long long v5 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v5;
    goto LABEL_8;
  }
  if (!v4)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 56);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)(a1 + 56), (uint64_t *)(a2 + 56));
LABEL_8:
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for _ViewDebug.Data.SerializedAttribute(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  if (*(void *)(a1 + 80)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 56);
  }
  long long v7 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = v7;
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for _ViewDebug.Data.SerializedAttribute()
{
  return &type metadata for _ViewDebug.Data.SerializedAttribute;
}

uint64_t specialized _ViewDebug.Data.SerializedProperty.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7475626972747461 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

void type metadata accessor for KeyedEncodingContainer<_ViewDebug.Data.CodingKeys>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for KeyedEncodingContainer();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _ViewDebug.Data.SerializedAttribute.CodingKeys and conformance _ViewDebug.Data.SerializedAttribute.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedAttribute.CodingKeys and conformance _ViewDebug.Data.SerializedAttribute.CodingKeys;
  if (!lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedAttribute.CodingKeys and conformance _ViewDebug.Data.SerializedAttribute.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedAttribute.CodingKeys and conformance _ViewDebug.Data.SerializedAttribute.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedAttribute.CodingKeys and conformance _ViewDebug.Data.SerializedAttribute.CodingKeys;
  if (!lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedAttribute.CodingKeys and conformance _ViewDebug.Data.SerializedAttribute.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedAttribute.CodingKeys and conformance _ViewDebug.Data.SerializedAttribute.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedAttribute.CodingKeys and conformance _ViewDebug.Data.SerializedAttribute.CodingKeys;
  if (!lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedAttribute.CodingKeys and conformance _ViewDebug.Data.SerializedAttribute.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedAttribute.CodingKeys and conformance _ViewDebug.Data.SerializedAttribute.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedAttribute.CodingKeys and conformance _ViewDebug.Data.SerializedAttribute.CodingKeys;
  if (!lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedAttribute.CodingKeys and conformance _ViewDebug.Data.SerializedAttribute.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedAttribute.CodingKeys and conformance _ViewDebug.Data.SerializedAttribute.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewDebug.Data.SerializedAttribute.Flags and conformance _ViewDebug.Data.SerializedAttribute.Flags()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedAttribute.Flags and conformance _ViewDebug.Data.SerializedAttribute.Flags;
  if (!lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedAttribute.Flags and conformance _ViewDebug.Data.SerializedAttribute.Flags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedAttribute.Flags and conformance _ViewDebug.Data.SerializedAttribute.Flags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedAttribute.Flags and conformance _ViewDebug.Data.SerializedAttribute.Flags;
  if (!lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedAttribute.Flags and conformance _ViewDebug.Data.SerializedAttribute.Flags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedAttribute.Flags and conformance _ViewDebug.Data.SerializedAttribute.Flags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedAttribute.Flags and conformance _ViewDebug.Data.SerializedAttribute.Flags;
  if (!lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedAttribute.Flags and conformance _ViewDebug.Data.SerializedAttribute.Flags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedAttribute.Flags and conformance _ViewDebug.Data.SerializedAttribute.Flags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedAttribute.Flags and conformance _ViewDebug.Data.SerializedAttribute.Flags;
  if (!lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedAttribute.Flags and conformance _ViewDebug.Data.SerializedAttribute.Flags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedAttribute.Flags and conformance _ViewDebug.Data.SerializedAttribute.Flags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedAttribute.Flags and conformance _ViewDebug.Data.SerializedAttribute.Flags;
  if (!lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedAttribute.Flags and conformance _ViewDebug.Data.SerializedAttribute.Flags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewDebug.Data.SerializedAttribute.Flags and conformance _ViewDebug.Data.SerializedAttribute.Flags);
  }
  return result;
}

void type metadata accessor for [_ViewDebug.Data](uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for _ViewDebug.Data.SerializedAttribute.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24601F468);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

void *type metadata accessor for _ViewDebug.Data.SerializedAttribute.CodingKeys()
{
  return &unk_26FA40E50;
}

void *type metadata accessor for _ViewDebug.Data.SerializedAttribute.Flags()
{
  return &unk_26FA40EE0;
}

uint64_t _ViewInputs.makeGestureContainer(responder:)(uint64_t *a1, uint64_t a2)
{
  return specialized _ViewInputs.makeGestureContainer(responder:)((uint64_t)a1, v2, *a1, a2);
}

uint64_t static GestureContainerFactoryInput.defaultValue.getter()
{
  return 0;
}

uint64_t specialized _ViewInputs.makeGestureContainer(responder:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *a2;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  uint64_t v7 = specialized closure #1 in PropertyList.subscript.getter(v6);
  uint64_t v9 = v8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  if (v7) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 8))(a1, a4, v7, v9);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t dispatch thunk of static GestureContainerFactory.makeGestureContainer(responder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

ValueMetadata *type metadata accessor for GestureContainerFactoryInput()
{
  return &type metadata for GestureContainerFactoryInput;
}

uint64_t static BezierTimingFunction.linear.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v8 = 0x3FF0000000000000;
  uint64_t v9 = 0x3FF0000000000000;
  unint64_t v6 = lazy protocol witness table accessor for type Double and conformance Double();
  return BezierTimingFunction.init<A>(p1:p2:)((uint64_t)&v11, (char *)&v10, (void (*)(char *, uint64_t))&v9, &v8, a1, MEMORY[0x263F8D538], a2, v6, a3);
}

double BezierAnimation.init(_:_:_:_:duration:)@<D0>(double *a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>, double a6@<D4>)
{
  double v6 = a2 * 3.0;
  double v7 = (a4 - a2) * 3.0 - a2 * 3.0;
  double v8 = a3 * 3.0;
  double v9 = (a5 - a3) * 3.0 - a3 * 3.0;
  *a1 = a6;
  a1[1] = 1.0 - v6 - v7;
  a1[2] = v7;
  a1[3] = v6;
  double result = 1.0 - v8 - v9;
  a1[4] = result;
  a1[5] = v9;
  a1[6] = v8;
  return result;
}

double static Animation.easeIn.getter()
{
  type metadata accessor for InternalAnimationBox<BezierAnimation>();
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_246203E80;
  *(_OWORD *)(v0 + 32) = xmmword_246203E90;
  double result = -2.0;
  *(_OWORD *)(v0 + 48) = xmmword_2461C0DC0;
  *(void *)(v0 + 64) = 0;
  return result;
}

double static Animation.easeOut.getter()
{
  type metadata accessor for InternalAnimationBox<BezierAnimation>();
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_246203EB0;
  *(_OWORD *)(v0 + 32) = xmmword_246203EC0;
  double result = -2.0;
  *(_OWORD *)(v0 + 48) = xmmword_2461C0DC0;
  *(void *)(v0 + 64) = 0;
  return result;
}

double static Animation.linear.getter()
{
  type metadata accessor for InternalAnimationBox<BezierAnimation>();
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_246203ED0;
  *(_OWORD *)(v0 + 32) = xmmword_2461E9BC0;
  double result = -2.0;
  *(_OWORD *)(v0 + 48) = xmmword_2461C0DC0;
  *(void *)(v0 + 64) = 0;
  return result;
}

double BezierAnimation.duration.getter()
{
  return *(double *)v0;
}

void BezierAnimation.duration.setter(double a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*BezierAnimation.duration.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

__n128 BezierAnimation.curve.getter@<Q0>(uint64_t a1@<X8>)
{
  long long v2 = *(_OWORD *)(v1 + 24);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 8);
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(v1 + 40);
  *(__n128 *)(a1 + 32) = result;
  return result;
}

__n128 BezierAnimation.curve.setter(uint64_t a1)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 8) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 24) = v2;
  __n128 result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v1 + 40) = result;
  return result;
}

uint64_t (*BezierAnimation.curve.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

__n128 BezierAnimation.init(curve:duration:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  *(double *)a2 = a3;
  long long v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 8) = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 24) = v3;
  __n128 result = *(__n128 *)(a1 + 32);
  *(__n128 *)(a2 + 40) = result;
  return result;
}

double BezierAnimation.function.getter@<D0>(uint64_t a1@<X8>)
{
  double v2 = *(double *)(v1 + 24);
  double v3 = *(double *)(v1 + 40);
  double v4 = *(double *)(v1 + 48);
  double result = v2 / 3.0 + (*(double *)(v1 + 16) + v2) / 3.0;
  *(void *)a1 = *(void *)v1;
  *(double *)(a1 + 8) = v2 / 3.0;
  *(double *)(a1 + 16) = v4 / 3.0;
  *(double *)(a1 + 24) = result;
  *(double *)(a1 + 32) = v4 / 3.0 + (v3 + v4) / 3.0;
  *(unsigned char *)(a1 + 40) = 4;
  return result;
}

void BezierAnimation.hash(into:)()
{
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v1 = *v0;
  }
  else {
    Swift::UInt64 v1 = 0;
  }
  Hasher._combine(_:)(v1);
  UnitCurve.CubicSolver.hash(into:)();
}

BOOL static BezierAnimation.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(double *)a1 == *(double *)a2)
  {
    float64x2_t v2 = *(float64x2_t *)(a1 + 24);
    v7[0] = *(float64x2_t *)(a1 + 8);
    v7[1] = v2;
    v7[2] = *(float64x2_t *)(a1 + 40);
    float64x2_t v3 = *(float64x2_t *)(a2 + 24);
    v6[0] = *(float64x2_t *)(a2 + 8);
    v6[1] = v3;
    _OWORD v6[2] = *(float64x2_t *)(a2 + 40);
    return specialized static UnitCurve.CubicSolver.== infix(_:_:)(v7, v6);
  }
  else
  {
    return 0;
  }
}

Swift::Int BezierAnimation.hashValue.getter()
{
  Swift::UInt64 v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = v1;
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  UnitCurve.CubicSolver.hash(into:)();
  return Hasher._finalize()();
}

double protocol witness for InternalCustomAnimation.function.getter in conformance BezierAnimation@<D0>(uint64_t a1@<X8>)
{
  double v2 = *(double *)(v1 + 24);
  double v3 = *(double *)(v1 + 40);
  double v4 = *(double *)(v1 + 48);
  double result = v2 / 3.0 + (*(double *)(v1 + 16) + v2) / 3.0;
  *(void *)a1 = *(void *)v1;
  *(double *)(a1 + 8) = v2 / 3.0;
  *(double *)(a1 + 16) = v4 / 3.0;
  *(double *)(a1 + 24) = result;
  *(double *)(a1 + 32) = v4 / 3.0 + (v3 + v4) / 3.0;
  *(unsigned char *)(a1 + 40) = 4;
  return result;
}

void protocol witness for Hashable.hash(into:) in conformance BezierAnimation()
{
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v1 = *v0;
  }
  else {
    Swift::UInt64 v1 = 0;
  }
  Hasher._combine(_:)(v1);
  UnitCurve.CubicSolver.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance BezierAnimation()
{
  Hasher.init(_seed:)();
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v1 = *v0;
  }
  else {
    Swift::UInt64 v1 = 0;
  }
  Hasher._combine(_:)(v1);
  UnitCurve.CubicSolver.hash(into:)();
  return Hasher._finalize()();
}

uint64_t BezierTimingFunction.p1x.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t BezierTimingFunction.p1x.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*BezierTimingFunction.p1x.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t BezierTimingFunction.p1y.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 36));
}

uint64_t BezierTimingFunction.p1y.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2 + *(int *)(a2 + 36), a1);
}

uint64_t (*BezierTimingFunction.p1y.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t BezierTimingFunction.p2x.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 40));
}

uint64_t BezierTimingFunction.p2x.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2 + *(int *)(a2 + 40), a1);
}

uint64_t (*BezierTimingFunction.p2x.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t BezierTimingFunction.p2y.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 44));
}

uint64_t BezierTimingFunction.p2y.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2 + *(int *)(a2 + 44), a1);
}

uint64_t (*BezierTimingFunction.p2y.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t BezierTimingFunction.init<A>(p1:p2:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, void (*a3)(char *, uint64_t)@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v58 = a8;
  uint64_t v63 = a7;
  uint64_t v64 = a5;
  CGFloat v55 = a4;
  CGFloat v56 = a2;
  uint64_t v50 = a1;
  char v51 = a3;
  uint64_t v54 = a9;
  uint64_t v53 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](a1);
  CGFloat v59 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  CGFloat v60 = (char *)&v47 - v12;
  MEMORY[0x270FA5388](v13);
  CGFloat v61 = (char *)&v47 - v14;
  MEMORY[0x270FA5388](v15);
  CGFloat v57 = (char *)&v47 - v16;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v62 = TupleTypeMetadata2;
  uint64_t v52 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  char v19 = (char *)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  long long v22 = (char *)&v47 - v21;
  v24.n128_f64[0] = MEMORY[0x270FA5388](v23);
  long long v26 = (char *)&v47 - v25;
  long long v28 = (char *)&v47 + *(int *)(v27 + 48) - v25;
  uint64_t v29 = *(void **)(a6 - 8);
  CGFloat v30 = (void (*)(char *, uint64_t, uint64_t, __n128))v29[4];
  v30((char *)&v47 - v25, v50, a6, v24);
  CGFloat v47 = v28;
  ((void (*)(char *, char *, uint64_t))v30)(v28, v56, a6);
  uint64_t v31 = *(int *)(TupleTypeMetadata2 + 48);
  CGFloat v48 = v22;
  long long v32 = &v22[v31];
  CGFloat v56 = &v22[v31];
  ((void (*)(char *, void (*)(char *, uint64_t), uint64_t))v30)(v22, v51, a6);
  ((void (*)(char *, void *, uint64_t))v30)(v32, v55, a6);
  long long v33 = &v19[*(int *)(TupleTypeMetadata2 + 48)];
  long long v34 = (void (*)(char *, char *, uint64_t))v29[2];
  CGFloat v49 = v26;
  v34(v19, v26, a6);
  v34(v33, v28, a6);
  dispatch thunk of BinaryFloatingPoint.init<A>(_:)();
  char v51 = (void (*)(char *, uint64_t))v29[1];
  CGFloat v55 = v29 + 1;
  v51(v33, a6);
  uint64_t v35 = &v19[*(int *)(v62 + 48)];
  v34(v19, v26, a6);
  v34(v35, v47, a6);
  dispatch thunk of BinaryFloatingPoint.init<A>(_:)();
  long long v36 = v51;
  v51(v19, a6);
  uint64_t v37 = &v19[*(int *)(v62 + 48)];
  long long v38 = v48;
  v34(v19, v48, a6);
  v34(v37, v56, a6);
  dispatch thunk of BinaryFloatingPoint.init<A>(_:)();
  v36(v37, a6);
  uint64_t v39 = v62;
  uint64_t v40 = &v19[*(int *)(v62 + 48)];
  v34(v19, v38, a6);
  v34(v40, v56, a6);
  uint64_t v41 = v64;
  dispatch thunk of BinaryFloatingPoint.init<A>(_:)();
  CATransform3D v42 = *(void (**)(char *, uint64_t))(v52 + 8);
  v42(v38, v39);
  v42(v49, v39);
  v36(v19, a6);
  uint64_t v43 = v54;
  long long v44 = *(void (**)(uint64_t, char *, uint64_t))(v53 + 32);
  v44(v54, v57, v41);
  long long v45 = (int *)type metadata accessor for BezierTimingFunction();
  v44(v43 + v45[9], v61, v41);
  v44(v43 + v45[10], v60, v41);
  return ((uint64_t (*)(uint64_t, char *, uint64_t))v44)(v43 + v45[11], v59, v41);
}

uint64_t BezierTimingFunction.p1.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  double v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v9(a1, v3, v6);
  uint64_t v7 = v3 + *(int *)(a3 + 36);

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v9)(a2, v7, v6);
}

uint64_t BezierTimingFunction.p1.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v22 = a3;
  uint64_t v5 = *(void *)(a3 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v7 = TupleTypeMetadata2 - 8;
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  double v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11.n128_f64[0] = MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v21 - v12;
  uint64_t v14 = (char *)&v21 + *(int *)(v7 + 56) - v12;
  uint64_t v15 = *(void *)(v5 - 8);
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v15 + 32);
  v16((char *)&v21 - v12, a1, v5, v11);
  ((void (*)(char *, uint64_t, uint64_t))v16)(v14, a2, v5);
  unint64_t v17 = &v9[*(int *)(v7 + 56)];
  ((void (*)(char *, char *, uint64_t))v16)(v9, v13, v5);
  ((void (*)(char *, char *, uint64_t))v16)(v17, v14, v5);
  uint64_t v18 = *(void (**)(uint64_t, char *, uint64_t))(v15 + 40);
  uint64_t v19 = v21;
  v18(v21, v9, v5);
  return ((uint64_t (*)(uint64_t, char *, uint64_t))v18)(v19 + *(int *)(v22 + 36), v17, v5);
}

void (*BezierTimingFunction.p1.modify(void *a1, uint64_t a2))(void **a1, char a2)
{
  uint64_t v5 = malloc(0x48uLL);
  *a1 = v5;
  *uint64_t v5 = a2;
  v5[1] = v2;
  uint64_t v6 = *(void *)(a2 + 16);
  v5[2] = v6;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v5[3] = TupleTypeMetadata2;
  uint64_t v8 = *(void *)(TupleTypeMetadata2 - 8);
  v5[4] = v8;
  size_t v9 = *(void *)(v8 + 64);
  _OWORD v5[5] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  _OWORD v5[6] = v10;
  uint64_t v11 = *(int *)(TupleTypeMetadata2 + 48);
  *((_DWORD *)v5 + 16) = v11;
  uint64_t v12 = &v10[v11];
  uint64_t v13 = *(void *)(v6 - 8);
  v5[7] = v13;
  uint64_t v14 = *(void (**)(void))(v13 + 16);
  v14();
  ((void (*)(char *, uint64_t, uint64_t))v14)(v12, v2 + *(int *)(a2 + 36), v6);
  return BezierTimingFunction.p1.modify;
}

void BezierTimingFunction.p1.modify(void **a1, char a2)
{
}

uint64_t BezierTimingFunction.p2.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  size_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v9(a1, v3 + *(int *)(a3 + 40), v6);
  uint64_t v7 = v3 + *(int *)(a3 + 44);

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v9)(a2, v7, v6);
}

uint64_t key path getter for BezierTimingFunction.p1 : <A>BezierTimingFunction<A>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void (*a3)(char *, char *, uint64_t)@<X3>, char *a4@<X8>)
{
  uint64_t v6 = *(void *)(a2 + a1 - 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v8 = TupleTypeMetadata2 - 8;
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v10 = (char *)&v23 - v9;
  uint64_t v11 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  unint64_t v17 = (char *)&v23 - v16;
  uint64_t v18 = type metadata accessor for BezierTimingFunction();
  a3(v17, v14, v18);
  uint64_t v19 = &v10[*(int *)(v8 + 56)];
  uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  v20(v10, v17, v6);
  v20(v19, v14, v6);
  uint64_t v21 = &a4[*(int *)(v8 + 56)];
  v20(a4, v10, v6);
  return ((uint64_t (*)(char *, char *, uint64_t))v20)(v21, v19, v6);
}

uint64_t key path setter for BezierTimingFunction.p1 : <A>BezierTimingFunction<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(char *, char *, uint64_t))
{
  uint64_t v7 = *(void *)(a4 + a3 - 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  double v9 = MEMORY[0x270FA5388](TupleTypeMetadata2 - 8);
  uint64_t v11 = (char *)&v19 - v10;
  uint64_t v13 = *(int *)(v12 + 56);
  uint64_t v14 = &v11[v13];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t, double))(*(void *)(v7 - 8) + 16);
  v16(v11, a1, v7, v9);
  ((void (*)(char *, uint64_t, uint64_t))v16)(v14, v15, v7);
  uint64_t v17 = type metadata accessor for BezierTimingFunction();
  return a5(v11, v14, v17);
}

uint64_t BezierTimingFunction.p2.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = a2;
  uint64_t v5 = *(void *)(a3 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v7 = TupleTypeMetadata2 - 8;
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  double v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11.n128_f64[0] = MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v21 - v12;
  uint64_t v14 = (char *)&v21 + *(int *)(v7 + 56) - v12;
  uint64_t v15 = *(void *)(v5 - 8);
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v15 + 32);
  v16((char *)&v21 - v12, a1, v5, v11);
  ((void (*)(char *, uint64_t, uint64_t))v16)(v14, v21, v5);
  uint64_t v17 = &v9[*(int *)(v7 + 56)];
  ((void (*)(char *, char *, uint64_t))v16)(v9, v13, v5);
  ((void (*)(char *, char *, uint64_t))v16)(v17, v14, v5);
  uint64_t v18 = v22;
  uint64_t v19 = *(void (**)(uint64_t, char *, uint64_t))(v15 + 40);
  v19(v22 + *(int *)(a3 + 40), v9, v5);
  return ((uint64_t (*)(uint64_t, char *, uint64_t))v19)(v18 + *(int *)(a3 + 44), v17, v5);
}

void (*BezierTimingFunction.p2.modify(void *a1, uint64_t a2))(void **a1, char a2)
{
  uint64_t v5 = malloc(0x48uLL);
  *a1 = v5;
  *uint64_t v5 = a2;
  v5[1] = v2;
  uint64_t v6 = *(void *)(a2 + 16);
  v5[2] = v6;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v5[3] = TupleTypeMetadata2;
  uint64_t v8 = *(void *)(TupleTypeMetadata2 - 8);
  v5[4] = v8;
  size_t v9 = *(void *)(v8 + 64);
  _OWORD v5[5] = malloc(v9);
  uint64_t v10 = (char *)malloc(v9);
  _OWORD v5[6] = v10;
  uint64_t v11 = *(int *)(TupleTypeMetadata2 + 48);
  *((_DWORD *)v5 + 16) = v11;
  uint64_t v12 = &v10[v11];
  uint64_t v13 = *(void *)(v6 - 8);
  v5[7] = v13;
  uint64_t v14 = *(void (**)(void))(v13 + 16);
  v14();
  ((void (*)(char *, uint64_t, uint64_t))v14)(v12, v2 + *(int *)(a2 + 44), v6);
  return BezierTimingFunction.p2.modify;
}

void BezierTimingFunction.p2.modify(void **a1, char a2)
{
}

void BezierTimingFunction.p1.modify(void **a1, char a2, void (*a3)(char *, char *, uint64_t))
{
  uint64_t v3 = (uint64_t *)*a1;
  if (a2)
  {
    double v4 = (char *)v3[6];
    uint64_t v6 = v3[4];
    uint64_t v5 = (char *)v3[5];
    uint64_t v8 = v3[2];
    uint64_t v7 = v3[3];
    uint64_t v12 = *v3;
    size_t v9 = &v4[*((int *)v3 + 16)];
    uint64_t v10 = &v5[*(int *)(v7 + 48)];
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(v3[7] + 16);
    v11(v5, v4, v8);
    v11(v10, v9, v8);
    a3(v5, v10, v12);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v7);
  }
  else
  {
    uint64_t v5 = (char *)v3[5];
    double v4 = (char *)v3[6];
    a3(v4, &v4[*((int *)v3 + 16)], *v3);
  }
  free(v4);
  free(v5);

  free(v3);
}

uint64_t static BezierTimingFunction.== infix(_:_:)()
{
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0
    && (type metadata accessor for BezierTimingFunction(), (dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
    && (dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
  {
    return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
  }
  else
  {
    return 0;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance BezierTimingFunction<A>()
{
  return static BezierTimingFunction.== infix(_:_:)();
}

uint64_t BezierAnimation.encode(to:)(uint64_t a1)
{
  double v4 = *v1;
  float64_t v3 = v1[1];
  float64_t v5 = v1[2];
  uint64_t v6 = *((void *)v1 + 3);
  uint64_t v7 = *((void *)v1 + 4);
  uint64_t v8 = *((void *)v1 + 5);
  uint64_t v9 = *((void *)v1 + 6);
  if (*v1 != 0.0)
  {
    ProtobufEncoder.encodeVarint(_:)(9uLL);
    uint64_t v10 = *(void *)(a1 + 8);
    int64_t isUniquelyReferenced_nonNull_native = v10 + 8;
    if (__OFADD__(v10, 8)) {
      goto LABEL_14;
    }
    if (*(void *)(a1 + 16) < isUniquelyReferenced_nonNull_native) {
      goto LABEL_15;
    }
    *(void *)(a1 + 8) = isUniquelyReferenced_nonNull_native;
    *(double *)(*(void *)a1 + v10) = v4;
  }
  while (1)
  {
    v18.f64[0] = v3;
    v18.f64[1] = v5;
    uint64_t v19 = v6;
    uint64_t v20 = v7;
    uint64_t v21 = v8;
    uint64_t v22 = v9;
    v17[0] = (float64x2_t)xmmword_2461C0DC0;
    v17[1] = (float64x2_t)xmmword_2461B9DE0;
    uint64_t v17[2] = (float64x2_t)xmmword_2461E9BC0;
    uint64_t result = specialized static UnitCurve.CubicSolver.== infix(_:_:)(&v18, v17);
    if (result) {
      break;
    }
    ProtobufEncoder.encodeVarint(_:)(0x12uLL);
    uint64_t v13 = *(void *)(a1 + 8);
    uint64_t v14 = *(void **)(a1 + 24);
    int64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      int64_t isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
      uint64_t v14 = (void *)isUniquelyReferenced_nonNull_native;
    }
    unint64_t v16 = v14[2];
    unint64_t v15 = v14[3];
    if (v16 >= v15 >> 1)
    {
      int64_t isUniquelyReferenced_nonNull_native = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v16 + 1, 1, v14);
      uint64_t v14 = (void *)isUniquelyReferenced_nonNull_native;
    }
    void v14[2] = v16 + 1;
    v14[v16 + 4] = v13;
    *(void *)(a1 + 24) = v14;
    if (!__OFADD__(v13, 1))
    {
      *(void *)(a1 + 8) = v13 + 1;
      UnitCurve.CubicSolver.encode(to:)((double *)a1);
      return ProtobufEncoder.endLengthDelimited()();
    }
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    *(double *)ProtobufEncoder.growBufferSlow(to:)(isUniquelyReferenced_nonNull_native) = v4;
  }
  return result;
}

unint64_t BezierAnimation.init(from:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  float64_t v3 = (void *)result;
  unint64_t v5 = *(void *)(result + 8);
  unint64_t v6 = *(void *)(result + 16);
  if (v5 >= v6)
  {
    long long v27 = xmmword_2461E9BC0;
    long long v26 = xmmword_2461B9DE0;
    double v7 = 0.0;
    long long v25 = xmmword_2461C0DC0;
LABEL_4:
    v3[3] = 0;
    *(double *)a2 = v7;
    *(_OWORD *)(a2 + 8) = v25;
    *(_OWORD *)(a2 + 24) = v26;
    *(_OWORD *)(a2 + 40) = v27;
    return result;
  }
  long long v27 = xmmword_2461E9BC0;
  long long v26 = xmmword_2461B9DE0;
  double v7 = 0.0;
  long long v25 = xmmword_2461C0DC0;
  while (1)
  {
    uint64_t result = v3[3];
    if (result)
    {
      unint64_t v9 = v3[4];
      if (v5 < v9) {
        goto LABEL_14;
      }
      if (v9 < v5) {
        goto LABEL_51;
      }
      v3[3] = 0;
    }
    uint64_t result = ProtobufDecoder.decodeVarint()();
    if (v2) {
      return result;
    }
    if (result <= 7) {
      goto LABEL_51;
    }
LABEL_14:
    if (result >> 3 != 2)
    {
      if (result >> 3 == 1)
      {
        unint64_t v10 = result & 7;
        if (v10 == 5)
        {
          uint64_t v20 = (float *)v3[1];
          if (v6 < (unint64_t)(v20 + 1)) {
            goto LABEL_51;
          }
          float v21 = *v20;
          v3[1] = v20 + 1;
          double v7 = v21;
        }
        else
        {
          if (v10 == 2)
          {
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return result;
            }
            if ((result & 0x8000000000000000) != 0) {
              goto LABEL_56;
            }
            uint64_t v11 = (double *)v3[1];
            if (v6 < (unint64_t)v11 + result) {
              goto LABEL_51;
            }
            v3[3] = 9;
            v3[4] = (char *)v11 + result;
          }
          else
          {
            if (v10 != 1) {
              goto LABEL_51;
            }
            uint64_t v11 = (double *)v3[1];
          }
          if (v6 < (unint64_t)(v11 + 1)) {
            goto LABEL_51;
          }
          double v7 = *v11;
          v3[1] = v11 + 1;
        }
      }
      else
      {
        switch(result & 7)
        {
          case 0uLL:
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (!v2) {
              goto LABEL_7;
            }
            return result;
          case 1uLL:
            unint64_t v8 = v3[1] + 8;
            if (v6 < v8) {
              goto LABEL_51;
            }
            goto LABEL_6;
          case 2uLL:
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return result;
            }
            if ((result & 0x8000000000000000) != 0) {
              goto LABEL_57;
            }
            unint64_t v8 = v3[1] + result;
            if (v6 < v8) {
              goto LABEL_51;
            }
LABEL_6:
            v3[1] = v8;
            break;
          case 5uLL:
            unint64_t v8 = v3[1] + 4;
            if (v6 < v8) {
              goto LABEL_51;
            }
            goto LABEL_6;
          default:
            goto LABEL_51;
        }
      }
      goto LABEL_7;
    }
    if ((result & 7) != 2) {
      goto LABEL_51;
    }
    uint64_t v12 = (void *)v3[5];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
    }
    unint64_t v14 = v12[2];
    unint64_t v13 = v12[3];
    if (v14 >= v13 >> 1) {
      uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v13 > 1), v14 + 1, 1, v12);
    }
    _DWORD v12[2] = v14 + 1;
    v12[v14 + 4] = v6;
    v3[5] = v12;
    uint64_t result = ProtobufDecoder.decodeVarint()();
    if (v2) {
      return result;
    }
    if ((result & 0x8000000000000000) != 0) {
      break;
    }
    unint64_t v15 = v3[1] + result;
    if (v6 < v15) {
      goto LABEL_51;
    }
    v3[2] = v15;
    UnitCurve.CubicSolver.init(from:)((unint64_t)v3, (double *)v28);
    unint64_t v16 = (void *)v3[5];
    if (!v16[2]) {
      goto LABEL_55;
    }
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result)
    {
      uint64_t v17 = v16[2];
      if (!v17) {
        goto LABEL_50;
      }
    }
    else
    {
      uint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v16);
      unint64_t v16 = (void *)result;
      uint64_t v17 = *(void *)(result + 16);
      if (!v17)
      {
LABEL_50:
        __break(1u);
LABEL_51:
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        return swift_willThrow();
      }
    }
    uint64_t v18 = v17 - 1;
    uint64_t v19 = v16[v18 + 4];
    _OWORD v16[2] = v18;
    v3[5] = v16;
    v3[2] = v19;
    long long v25 = v28[0];
    long long v26 = v28[1];
    long long v27 = v28[2];
LABEL_7:
    unint64_t v5 = v3[1];
    unint64_t v6 = v3[2];
    if (v5 >= v6) {
      goto LABEL_4;
    }
  }
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
  __break(1u);
  uint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)a2);
  uint64_t v24 = *(void *)(result + 16);
  if (!v24)
  {
    __break(1u);
    JUMPOUT(0x246021790);
  }
  uint64_t v22 = v24 - 1;
  uint64_t v23 = *(void *)(result + 8 * v22 + 32);
  *(void *)(result + 16) = v22;
  v3[5] = result;
  v3[2] = v23;
  return result;
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance BezierAnimation(uint64_t a1)
{
  return BezierAnimation.encode(to:)(a1);
}

unint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance BezierAnimation@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return BezierAnimation.init(from:)(a1, a2);
}

uint64_t type metadata accessor for BezierTimingFunction()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_2460217F0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, char *a3@<X8>)
{
  return key path getter for BezierTimingFunction.p1 : <A>BezierTimingFunction<A>(a1, a2, (void (*)(char *, char *, uint64_t))BezierTimingFunction.p1.getter, a3);
}

uint64_t sub_24602181C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BezierTimingFunction.p1 : <A>BezierTimingFunction<A>(a1, a2, a3, a4, (uint64_t (*)(char *, char *, uint64_t))BezierTimingFunction.p1.setter);
}

uint64_t sub_246021848()
{
  return 16;
}

__n128 sub_246021854(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_246021860@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, char *a3@<X8>)
{
  return key path getter for BezierTimingFunction.p1 : <A>BezierTimingFunction<A>(a1, a2, (void (*)(char *, char *, uint64_t))BezierTimingFunction.p2.getter, a3);
}

uint64_t sub_24602188C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for BezierTimingFunction.p1 : <A>BezierTimingFunction<A>(a1, a2, a3, a4, (uint64_t (*)(char *, char *, uint64_t))BezierTimingFunction.p2.setter);
}

uint64_t sub_2460218B8()
{
  return 16;
}

__n128 sub_2460218C4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

ValueMetadata *type metadata accessor for BezierAnimation()
{
  return &type metadata for BezierAnimation;
}

uint64_t type metadata completion function for BezierTimingFunction()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for BezierTimingFunction(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  double v4 = a1;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(_DWORD *)(v6 + 80);
  uint64_t v9 = ~v8;
  uint64_t v10 = v7 + v8;
  unint64_t v11 = ((v7 + v8 + ((v7 + v8 + ((v7 + v8) & ~v8)) & ~v8)) & ~v8) + v7;
  if (v8 > 7 || (*(_DWORD *)(v6 + 80) & 0x100000) != 0 || v11 > 0x18)
  {
    uint64_t v14 = *a2;
    *double v4 = *a2;
    double v4 = (uint64_t *)(v14 + ((v8 + 16) & v9));
    swift_retain();
  }
  else
  {
    unint64_t v15 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16);
    v15(a1, a2, v5);
    unint64_t v16 = ((unint64_t)a2 + v10) & v9;
    v15((uint64_t *)(((unint64_t)v4 + v10) & v9), (uint64_t *)v16, v5);
    unint64_t v17 = (v10 + v16) & v9;
    v15((uint64_t *)((v10 + (((unint64_t)v4 + v10) & v9)) & v9), (uint64_t *)v17, v5);
    v15((uint64_t *)((v10 + ((v10 + (((unint64_t)v4 + v10) & v9)) & v9)) & v9), (uint64_t *)((v10 + v17) & v9), v5);
  }
  return v4;
}

uint64_t destroy for BezierTimingFunction(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v10(a1, v3);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64) + v5;
  uint64_t v7 = (v6 + a1) & ~v5;
  v10(v7, v3);
  uint64_t v8 = (v6 + v7) & ~v5;
  v10(v8, v3);

  return ((uint64_t (*)(uint64_t, uint64_t))v10)((v6 + v8) & ~v5, v3);
}

uint64_t initializeWithCopy for BezierTimingFunction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v7(a1, a2, v5);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  uint64_t v10 = (v9 + a2) & ~v8;
  v7((v9 + a1) & ~v8, v10, v5);
  uint64_t v11 = (v9 + v10) & ~v8;
  v7((v9 + ((v9 + a1) & ~v8)) & ~v8, v11, v5);
  v7((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8, (v9 + v11) & ~v8, v5);
  return a1;
}

uint64_t assignWithCopy for BezierTimingFunction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24);
  v7(a1, a2, v5);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  uint64_t v10 = (v9 + a2) & ~v8;
  v7((v9 + a1) & ~v8, v10, v5);
  uint64_t v11 = (v9 + v10) & ~v8;
  v7((v9 + ((v9 + a1) & ~v8)) & ~v8, v11, v5);
  v7((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8, (v9 + v11) & ~v8, v5);
  return a1;
}

uint64_t initializeWithTake for BezierTimingFunction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
  v7(a1, a2, v5);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  uint64_t v10 = (v9 + a2) & ~v8;
  v7((v9 + a1) & ~v8, v10, v5);
  uint64_t v11 = (v9 + v10) & ~v8;
  v7((v9 + ((v9 + a1) & ~v8)) & ~v8, v11, v5);
  v7((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8, (v9 + v11) & ~v8, v5);
  return a1;
}

uint64_t assignWithTake for BezierTimingFunction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 40);
  v7(a1, a2, v5);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  uint64_t v10 = (v9 + a2) & ~v8;
  v7((v9 + a1) & ~v8, v10, v5);
  uint64_t v11 = (v9 + v10) & ~v8;
  v7((v9 + ((v9 + a1) & ~v8)) & ~v8, v11, v5);
  v7((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8, (v9 + v11) & ~v8, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for BezierTimingFunction(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  uint64_t v8 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  uint64_t v9 = ((v6 + v8 + ((v6 + v8 + ((v6 + v8) & ~v8)) & ~v8)) & ~v8) + v6;
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v12 = ((v7 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v12))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v12 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v12 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_19;
  }
LABEL_11:
  int v13 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v13 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v9 | v13) + 1;
}

void storeEnumTagSinglePayload for BezierTimingFunction(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  size_t v9 = ((*(void *)(v6 + 64) + v8 + ((*(void *)(v6 + 64) + v8 + ((*(void *)(v6 + 64) + v8) & ~v8)) & ~v8)) & ~v8)
     + *(void *)(v6 + 64);
  BOOL v10 = a3 >= v7;
  unsigned int v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      unsigned int v15 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v15))
      {
        int v12 = 4;
      }
      else if (v15 >= 0x100)
      {
        int v12 = 2;
      }
      else
      {
        int v12 = v15 > 1;
      }
    }
    else
    {
      int v12 = 1;
    }
  }
  else
  {
    int v12 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v13 = ~v7 + a2;
    if (v9 < 4)
    {
      int v14 = (v13 >> (8 * v9)) + 1;
      if (v9)
      {
        int v16 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if (v9 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if (v9 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v13;
      int v14 = 1;
    }
    switch(v12)
    {
      case 1:
        a1[v9] = v14;
        return;
      case 2:
        *(_WORD *)&a1[v9] = v14;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v9] = v14;
        return;
      default:
        return;
    }
  }
  switch(v12)
  {
    case 1:
      a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x246022328);
    case 4:
      *(_DWORD *)&a1[v9] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unint64_t v17 = *(void (**)(void))(v6 + 56);
        v17();
      }
      return;
  }
}

uint64_t View._backdropEffect<A>(_:)(void (*a1)(double), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = a5;
  uint64_t v8 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  BOOL v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for _BackdropEffect();
  uint64_t v12 = *(void *)(v11 - 8);
  double v13 = MEMORY[0x270FA5388](v11);
  unsigned int v15 = (char *)&v17 - v14;
  a1(v13);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v15, v10, a4);
  View.modifier<A>(_:)(v15, a3, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

uint64_t _BackdropEffect.init(backdrop:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t _BackdropEffect.backdrop.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t _BackdropEffect.backdrop.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*_BackdropEffect.backdrop.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t getEnumTagSinglePayload for _BackdropEffect(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for _BackdropEffect(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x246022A18);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        int v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t sub_246022A40()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type LeafResponderFilter<BackdropView> and conformance LeafResponderFilter<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type LeafResponderFilter<BackdropView> and conformance LeafResponderFilter<A>;
  if (!lazy protocol witness table cache variable for type LeafResponderFilter<BackdropView> and conformance LeafResponderFilter<A>)
  {
    type metadata accessor for LeafResponderFilter<ColorView>(255, &lazy cache variable for type metadata for LeafResponderFilter<BackdropView>, (uint64_t)&type metadata for BackdropView, (uint64_t)&protocol witness table for BackdropView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for LeafResponderFilter);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LeafResponderFilter<BackdropView> and conformance LeafResponderFilter<A>);
  }
  return result;
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance CGPoint(uint64_t a1, _OWORD *a2)
{
  long long v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t (*protocol witness for Animatable.animatableData.modify in conformance IgnoresAutomaticPaddingLayout())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t (*Animatable<>.animatableData.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance LinearGradient._Paint(uint64_t a1, _OWORD *a2)
{
  long long v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance RadialGradient._Paint(uint64_t a1, _OWORD *a2)
{
  long long v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance EllipticalGradient._Paint(uint64_t a1, _OWORD *a2)
{
  long long v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance AngularGradient._Paint(uint64_t a1, _OWORD *a2)
{
  long long v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance _OffsetEffect(uint64_t a1, _OWORD *a2)
{
  long long v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance _ColorMonochromeEffect._Resolved(uint64_t a1, _OWORD *a2)
{
  long long v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance ViewOrigin(uint64_t a1, _OWORD *a2)
{
  long long v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance ViewSize(uint64_t a1, _OWORD *a2)
{
  long long v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance _RotationEffect(uint64_t a1, _OWORD *a2)
{
  long long v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance ResolvedGradient(uint64_t a1, _OWORD *a2)
{
  long long v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance Color.Resolved(uint64_t a1, _OWORD *a2)
{
  long long v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance Color.ResolvedVibrant(uint64_t a1, _OWORD *a2)
{
  long long v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t (*protocol witness for Animatable.animatableData.modify in conformance PrivacyRedactionViewModifier.Transform<A>.PrivacyEffect(void *a1))()
{
  long long v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = Animatable<>.animatableData.modify();
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance _ContrastEffect(uint64_t a1, _OWORD *a2)
{
  long long v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance CGSize(uint64_t a1, _OWORD *a2)
{
  long long v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance _BlurEffect(uint64_t a1, _OWORD *a2)
{
  long long v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance _GrayscaleEffect(uint64_t a1, _OWORD *a2)
{
  long long v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance _Rotation3DEffect(uint64_t a1, _OWORD *a2)
{
  long long v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance OpacityRendererEffect(uint64_t a1, _OWORD *a2)
{
  long long v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance _ShadowEffect._Resolved(uint64_t a1, _OWORD *a2)
{
  long long v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance _BrightnessEffect(uint64_t a1, _OWORD *a2)
{
  long long v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance UnitRect(uint64_t a1, _OWORD *a2)
{
  long long v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance VariableBlurStyle(uint64_t a1, _OWORD *a2)
{
  long long v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance _ShapeStyle_Pack(uint64_t a1, _OWORD *a2)
{
  long long v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance _ShapeStyle_Pack.Style(uint64_t a1, _OWORD *a2)
{
  long long v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance _ShapeStyle_Pack.Fill(uint64_t a1, _OWORD *a2)
{
  long long v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance _ShapeStyle_Pack.Effect(uint64_t a1, _OWORD *a2)
{
  long long v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance _ShapeStyle_Pack.Effect.Kind(uint64_t a1, _OWORD *a2)
{
  long long v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance BlurStyle(uint64_t a1, _OWORD *a2)
{
  long long v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance Shader.ResolvedShader(uint64_t a1, _OWORD *a2)
{
  long long v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance ResolvedShadowStyle(uint64_t a1, _OWORD *a2)
{
  long long v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance StrokeStyle(uint64_t a1, _OWORD *a2)
{
  long long v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance UnitPoint(uint64_t a1, _OWORD *a2)
{
  long long v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance SummarySymbol(uint64_t a1, _OWORD *a2)
{
  long long v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance Rectangle._Inset(uint64_t a1, _OWORD *a2)
{
  long long v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance RoundedRectangle._Inset(uint64_t a1, _OWORD *a2)
{
  long long v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance UnevenRoundedRectangle._Inset(uint64_t a1, _OWORD *a2)
{
  long long v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance Capsule._Inset(uint64_t a1, _OWORD *a2)
{
  long long v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance Ellipse._Inset(uint64_t a1, _OWORD *a2)
{
  long long v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance Circle._Inset(uint64_t a1, _OWORD *a2)
{
  long long v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance ContainerRelativeShape._Inset(uint64_t a1, _OWORD *a2)
{
  long long v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t Animatable<>.animatableData.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(a2, v2, a1);
}

uint64_t key path setter for Animatable<>.animatableData : <A>A(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a4 + a3 - 24);
  double v5 = MEMORY[0x270FA5388](a1);
  unsigned int v7 = (char *)&v10 - v6;
  (*(void (**)(char *, double))(v8 + 16))((char *)&v10 - v6, v5);
  return Animatable<>.animatableData.setter((uint64_t)v7, v4);
}

uint64_t Animatable<>.animatableData.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *(void *)(a2 - 8);
  (*(void (**)(uint64_t))(v7 + 8))(v2);
  double v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);

  return v5(v2, a1, a2);
}

void (*Animatable<>.animatableData.modify(void *a1, uint64_t a2))(uint64_t a1, char a2)
{
  double v5 = malloc(0x30uLL);
  *a1 = v5;
  *double v5 = a2;
  v5[1] = v2;
  uint64_t v6 = *(void *)(a2 - 8);
  uint64_t v7 = v6;
  v5[2] = v6;
  v5[3] = v6;
  size_t v8 = *(void *)(v6 + 64);
  v5[4] = malloc(v8);
  _OWORD v5[5] = malloc(v8);
  (*(void (**)(void))(v7 + 16))();
  return Animatable<>.animatableData.modify;
}

void Animatable<>.animatableData.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 32);
  uint64_t v4 = *(void **)(*(void *)a1 + 40);
  if (a2)
  {
    uint64_t v5 = v2[2];
    uint64_t v6 = v2[3];
    uint64_t v8 = *v2;
    uint64_t v7 = v2[1];
    (*(void (**)(void, void *, void))(v6 + 16))(*(void *)(*(void *)a1 + 32), v4, *v2);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v7, v8);
    (*(void (**)(uint64_t, void *, uint64_t))(v5 + 32))(v7, v3, v8);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v8);
  }
  else
  {
    uint64_t v9 = v2[1];
    uint64_t v10 = *v2;
    uint64_t v11 = v2[2];
    (*(void (**)(uint64_t, void))(v11 + 8))(v9, *v2);
    (*(void (**)(uint64_t, void *, uint64_t))(v11 + 32))(v9, v4, v10);
  }
  free(v4);
  free(v3);

  free(v2);
}

double EmptyAnimatableData.magnitudeSquared.getter()
{
  return 0.0;
}

uint64_t static EmptyAnimatableData.== infix(_:_:)()
{
  return 1;
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance Double(uint64_t a1, _OWORD *a2)
{
  long long v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance CGFloat(uint64_t a1, _OWORD *a2)
{
  long long v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t View.unanimatable()(uint64_t a1)
{
  return View.modifier<A>(_:)(a1, a1, &unk_26FA92CA8);
}

void protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance UnanimatableModifier(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 36) |= 1u;
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance MeshGradient._Paint(uint64_t a1, _OWORD *a2)
{
  long long v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance _SaturationEffect(uint64_t a1, _OWORD *a2)
{
  long long v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance Angle(uint64_t a1, _OWORD *a2)
{
  long long v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance _ColorMultiplyEffect._Resolved(uint64_t a1, _OWORD *a2)
{
  long long v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance ColorView(uint64_t a1, _OWORD *a2)
{
  long long v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance CGRect(uint64_t a1, _OWORD *a2)
{
  long long v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance _ScaleEffect(uint64_t a1, _OWORD *a2)
{
  long long v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance RectangleCornerRadii(uint64_t a1, _OWORD *a2)
{
  long long v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance _HueRotationEffect(uint64_t a1, _OWORD *a2)
{
  long long v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t sub_246023AB8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return Animatable<>.animatableData.getter(*(void *)(a2 + a1 - 24), a3);
}

uint64_t sub_246023AE8()
{
  return 24;
}

__n128 sub_246023AF4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_246023B0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _ViewInputs.base.modify(*(void *)(a4 + a3 - 16), *(void *)(a4 + a3 - 8));
}

uint64_t sub_246023B38()
{
  return 16;
}

__n128 sub_246023B44(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t dispatch thunk of Animatable.animatableData.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of Animatable.animatableData.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of Animatable.animatableData.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of static Animatable._makeAnimatable(value:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

uint64_t sub_246023BA0()
{
  return swift_getWitnessTable();
}

void *type metadata accessor for UnanimatableModifier()
{
  return &unk_26FA92CA8;
}

void MeshGradient._Paint.animatableData.getter(float32x4_t *a1@<X8>)
{
  uint64_t v3 = *(void **)v1;
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(*(void *)v1 + 16);
  int8x16_t v78 = *(int8x16_t *)(v1 + 24);
  if ((*(unsigned char *)(v1 + 8) & 1) == 0)
  {
    if (v5 + 0x4000000000000000 >= 0)
    {
      int64_t v45 = 2 * v5;
      swift_bridgeObjectRetain();
      uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v45, 0, MEMORY[0x263F8EE78]);
      uint64_t v47 = v3[2];
      if (v47)
      {
        CGFloat v48 = v3 + 4;
        do
        {
          *(void *)&long long v46 = *v48;
          unint64_t v50 = *((void *)v7 + 2);
          unint64_t v49 = *((void *)v7 + 3);
          int64_t v51 = v49 >> 1;
          unint64_t v52 = v50 + 1;
          if (v49 >> 1 <= v50)
          {
            long long v113 = v46;
            uint64_t v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v49 > 1), v50 + 1, 1, v7);
            long long v46 = v113;
            uint64_t v7 = v54;
            unint64_t v49 = *((void *)v54 + 3);
            int64_t v51 = v49 >> 1;
          }
          *((void *)v7 + 2) = v52;
          *(_DWORD *)&v7[4 * v50 + 32] = v46;
          int64_t v53 = v50 + 2;
          if (v51 < v53)
          {
            long long v114 = v46;
            CGFloat v55 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v49 > 1), v53, 1, v7);
            long long v46 = v114;
            uint64_t v7 = v55;
          }
          *((void *)v7 + 2) = v53;
          *(_DWORD *)&v7[4 * v52 + 32] = DWORD1(v46);
          ++v48;
          --v47;
        }
        while (v47);
      }
      goto LABEL_35;
    }
LABEL_51:
    __break(1u);
    return;
  }
  int64_t v6 = 10 * v5;
  if ((unsigned __int128)(v5 * (__int128)10) >> 64 != (10 * v5) >> 63)
  {
    __break(1u);
    goto LABEL_51;
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0, MEMORY[0x263F8EE78]);
  uint64_t v13 = v3[2];
  if (v13)
  {
    unsigned int v14 = v3 + 8;
    do
    {
      *(void *)&long long v12 = *(v14 - 4);
      *(void *)&long long v11 = *(v14 - 3);
      *(void *)&long long v10 = *(v14 - 2);
      *(void *)&long long v9 = *(v14 - 1);
      *(void *)&long long v8 = *v14;
      unint64_t v16 = *((void *)v7 + 2);
      unint64_t v15 = *((void *)v7 + 3);
      int64_t v17 = v15 >> 1;
      unint64_t v18 = v16 + 1;
      if (v15 >> 1 <= v16)
      {
        long long v92 = v9;
        long long v103 = v8;
        long long v79 = v11;
        long long v84 = v10;
        long long v76 = v12;
        uint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v15 > 1), v16 + 1, 1, v7);
        long long v12 = v76;
        long long v11 = v79;
        long long v10 = v84;
        long long v9 = v92;
        long long v8 = v103;
        uint64_t v7 = v35;
        unint64_t v15 = *((void *)v35 + 3);
        int64_t v17 = v15 >> 1;
      }
      *((void *)v7 + 2) = v18;
      *(_DWORD *)&v7[4 * v16 + 32] = v12;
      unint64_t v19 = v16 + 2;
      if (v17 < (uint64_t)(v16 + 2))
      {
        long long v93 = v9;
        long long v104 = v8;
        long long v80 = v11;
        long long v85 = v10;
        long long v77 = v12;
        long long v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v15 > 1), v16 + 2, 1, v7);
        long long v12 = v77;
        long long v11 = v80;
        long long v10 = v85;
        long long v9 = v93;
        long long v8 = v104;
        uint64_t v7 = v36;
      }
      *((void *)v7 + 2) = v19;
      *(_DWORD *)&v7[4 * v18 + 32] = DWORD1(v12);
      unint64_t v20 = *((void *)v7 + 3);
      unint64_t v21 = v16 + 3;
      if ((uint64_t)(v16 + 3) > (uint64_t)(v20 >> 1))
      {
        long long v94 = v9;
        long long v105 = v8;
        long long v81 = v11;
        long long v86 = v10;
        uint64_t v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v20 > 1), v16 + 3, 1, v7);
        long long v11 = v81;
        long long v10 = v86;
        long long v9 = v94;
        long long v8 = v105;
        uint64_t v7 = v37;
      }
      *((void *)v7 + 2) = v21;
      *(_DWORD *)&v7[4 * v19 + 32] = v11;
      unint64_t v22 = *((void *)v7 + 3);
      unint64_t v23 = v16 + 4;
      if ((uint64_t)(v16 + 4) > (uint64_t)(v22 >> 1))
      {
        long long v95 = v9;
        long long v106 = v8;
        long long v82 = v11;
        long long v87 = v10;
        long long v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v22 > 1), v16 + 4, 1, v7);
        long long v11 = v82;
        long long v10 = v87;
        long long v9 = v95;
        long long v8 = v106;
        uint64_t v7 = v38;
      }
      *((void *)v7 + 2) = v23;
      *(_DWORD *)&v7[4 * v21 + 32] = DWORD1(v11);
      unint64_t v24 = *((void *)v7 + 3);
      unint64_t v25 = v16 + 5;
      if ((uint64_t)(v16 + 5) > (uint64_t)(v24 >> 1))
      {
        long long v96 = v9;
        long long v107 = v8;
        long long v88 = v10;
        uint64_t v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v24 > 1), v16 + 5, 1, v7);
        long long v10 = v88;
        long long v9 = v96;
        long long v8 = v107;
        uint64_t v7 = v39;
      }
      *((void *)v7 + 2) = v25;
      *(_DWORD *)&v7[4 * v23 + 32] = v10;
      unint64_t v26 = *((void *)v7 + 3);
      unint64_t v27 = v16 + 6;
      if ((uint64_t)(v16 + 6) > (uint64_t)(v26 >> 1))
      {
        long long v97 = v9;
        long long v108 = v8;
        long long v89 = v10;
        uint64_t v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v26 > 1), v16 + 6, 1, v7);
        long long v10 = v89;
        long long v9 = v97;
        long long v8 = v108;
        uint64_t v7 = v40;
      }
      *((void *)v7 + 2) = v27;
      *(_DWORD *)&v7[4 * v25 + 32] = DWORD1(v10);
      unint64_t v28 = *((void *)v7 + 3);
      unint64_t v29 = v16 + 7;
      if ((uint64_t)(v16 + 7) > (uint64_t)(v28 >> 1))
      {
        long long v98 = v9;
        long long v109 = v8;
        uint64_t v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v28 > 1), v16 + 7, 1, v7);
        long long v9 = v98;
        long long v8 = v109;
        uint64_t v7 = v41;
      }
      *((void *)v7 + 2) = v29;
      *(_DWORD *)&v7[4 * v27 + 32] = v9;
      unint64_t v30 = *((void *)v7 + 3);
      unint64_t v31 = v16 + 8;
      if ((uint64_t)(v16 + 8) > (uint64_t)(v30 >> 1))
      {
        long long v99 = v9;
        long long v110 = v8;
        CATransform3D v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v30 > 1), v16 + 8, 1, v7);
        long long v9 = v99;
        long long v8 = v110;
        uint64_t v7 = v42;
      }
      *((void *)v7 + 2) = v31;
      *(_DWORD *)&v7[4 * v29 + 32] = DWORD1(v9);
      unint64_t v32 = *((void *)v7 + 3);
      unint64_t v33 = v16 + 9;
      if ((uint64_t)(v16 + 9) > (uint64_t)(v32 >> 1))
      {
        long long v111 = v8;
        uint64_t v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v32 > 1), v16 + 9, 1, v7);
        long long v8 = v111;
        uint64_t v7 = v43;
      }
      *((void *)v7 + 2) = v33;
      *(_DWORD *)&v7[4 * v31 + 32] = v8;
      unint64_t v34 = *((void *)v7 + 3);
      if ((uint64_t)(v16 + 10) > (uint64_t)(v34 >> 1))
      {
        long long v112 = v8;
        long long v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v34 > 1), v16 + 10, 1, v7);
        long long v8 = v112;
        uint64_t v7 = v44;
      }
      *((void *)v7 + 2) = v16 + 10;
      *(_DWORD *)&v7[4 * v33 + 32] = DWORD1(v8);
      v14 += 5;
      --v13;
    }
    while (v13);
  }
LABEL_35:
  swift_bridgeObjectRelease();
  int64_t v56 = *(void *)(v4 + 16);
  uint64_t v57 = MEMORY[0x263F8EE78];
  if (v56)
  {
    uint64_t v118 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v56, 0);
    uint64_t v57 = v118;
    if (one-time initialization token for legacyInterpolation != -1) {
      swift_once();
    }
    swift_beginAccess();
    CGFloat v60 = (float *)(v4 + 44);
    v61.i64[0] = 0x4300000043000000;
    v61.i64[1] = 0x4300000043000000;
    do
    {
      v59.i64[0] = *(void *)(v60 - 3);
      *(float *)&long long v58 = *v60;
      int32x4_t v62 = v59;
      v62.i32[0] = *(__int32 *)(v60 - 1);
      if ((static Color.Resolved.legacyInterpolation & 1) == 0)
      {
        *(float32x2_t *)v61.f32 = vmul_f32(*(float32x2_t *)v59.i8, (float32x2_t)0x3F094D173ED30EB1);
        long long v115 = v58;
        v61.f32[0] = vaddv_f32(*(float32x2_t *)v61.f32) + (float)(*(v60 - 1) * 0.051446);
        int8x16_t v100 = (int8x16_t)v61;
        float32x2_t v63 = (float32x2_t)vrev64_s32((int32x2_t)vmul_f32(*(float32x2_t *)v59.i8, (float32x2_t)0x3E903D743E58FD3BLL));
        float32x2_t v64 = vmul_f32(*(float32x2_t *)v59.i8, (float32x2_t)0x3F2E42533DB4D7ECLL);
        float32x2_t v65 = vmul_n_f32((float32x2_t)0x3DDBF2F03F214649, *(float *)v62.i32);
        *(float *)v66.i32 = powf(fabsf(v61.f32[0]), 0.33333);
        v67.i64[0] = 0x8000000080000000;
        v67.i64[1] = 0x8000000080000000;
        int8x16_t v101 = vbslq_s8(v67, v66, v100);
        float32x2_t v68 = vadd_f32(vadd_f32(v63, v64), v65);
        *(float32x2_t *)v66.i8 = vabs_f32(v68);
        float v83 = *(float *)v66.i32;
        float v90 = powf(*(float *)&v66.i32[1], 0.33333);
        *(float *)v69.i32 = powf(v83, 0.33333);
        v61.i64[0] = 0x4300000043000000;
        v61.i64[1] = 0x4300000043000000;
        int32x4_t v59 = (int32x4_t)v101;
        *(float *)&v69.i32[1] = v90;
        long long v58 = v115;
        *(float *)v59.i32 = *(float *)&v115 * *(float *)v101.i32;
        *(float32x2_t *)v62.i8 = vmul_n_f32((float32x2_t)vbsl_s8((int8x8_t)0x8000000080000000, v69, (int8x8_t)v68), *(float *)&v115);
      }
      uint64_t v118 = v57;
      unint64_t v71 = *(void *)(v57 + 16);
      unint64_t v70 = *(void *)(v57 + 24);
      if (v71 >= v70 >> 1)
      {
        int32x4_t v102 = v59;
        long long v116 = v58;
        int32x4_t v91 = v62;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v70 > 1, v71 + 1, 1);
        int32x4_t v62 = v91;
        int32x4_t v59 = v102;
        long long v58 = v116;
        v61.i64[0] = 0x4300000043000000;
        v61.i64[1] = 0x4300000043000000;
        uint64_t v57 = v118;
      }
      float32x4_t v72 = (float32x4_t)vuzp1q_s32(v59, v62);
      v72.i32[1] = v62.i32[1];
      v72.i32[3] = v58;
      *(void *)(v57 + 16) = v71 + 1;
      *(float32x4_t *)(v57 + 16 * v71 + 32) = vmulq_f32(v72, v61);
      v60 += 4;
      --v56;
    }
    while (v56);
  }
  if (one-time initialization token for legacyInterpolation != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (static Color.Resolved.legacyInterpolation)
  {
    float32x4_t v74 = (float32x4_t)v78;
  }
  else
  {
    ResolvedGradient.ColorSpace.convertIn(_:)(v117.f32, v78, *(float *)&v78.i32[1], v78.u32[2], *(float *)&v78.i32[3], v73);
    float32x4_t v74 = v117;
  }
  v75.i64[0] = 0x4300000043000000;
  v75.i64[1] = 0x4300000043000000;
  a1->i64[0] = (uint64_t)v7;
  a1->i64[1] = v57;
  a1[1] = vmulq_f32(v74, v75);
}

uint64_t MeshGradient.resolvePaint(in:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = *v2;
  uint64_t v10 = v2[1];
  uint64_t v11 = *v2 * v10;
  if ((unsigned __int128)(*v2 * (__int128)v10) >> 64 != v11 >> 63)
  {
    __break(1u);
LABEL_18:
    uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew()(v7);
    goto LABEL_4;
  }
  long long v12 = v2;
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v23 = v2[2];
  char v22 = *((unsigned char *)v2 + 24);
  long long v2 = (uint64_t *)v2[6];
  int v24 = *((unsigned __int8 *)v12 + 56);
  int v3 = *((unsigned __int8 *)v12 + 57);
  uint64_t v4 = v12[4];
  char v13 = *((unsigned char *)v12 + 40);
  swift_bridgeObjectRetain();
  if (v13) {
    goto LABEL_5;
  }
  uint64_t v7 = (void *)specialized Array.init(repeating:count:)(v11, 0, 0, 0, 0);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_18;
  }
LABEL_4:
  uint64_t v14 = v7[2];
  unint64_t v25 = v7 + 4;
  uint64_t v26 = v14;
  closure #1 in MeshGradient.resolvePaint(in:)(&v25, v11, v4, v5, v6);
  swift_bridgeObjectRelease();
  uint64_t v4 = (uint64_t)v7;
LABEL_5:
  unint64_t v25 = (void *)v5;
  uint64_t v26 = v6;
  unint64_t v15 = *(uint64_t (**)(void **))(*v2 + 104);
  swift_bridgeObjectRetain();
  uint64_t result = v15(&v25);
  if (v3)
  {
    if (v3 == 1)
    {
      if (v24) {
        int v21 = 17;
      }
      else {
        int v21 = 1;
      }
    }
    else if (v24)
    {
      int v21 = 19;
    }
    else
    {
      int v21 = 3;
    }
  }
  else if (v24)
  {
    int v21 = 16;
  }
  else
  {
    int v21 = 0;
  }
  *(void *)a2 = v23;
  *(unsigned char *)(a2 + 8) = v22;
  *(void *)(a2 + 16) = v4;
  *(_DWORD *)(a2 + 24) = v17;
  *(_DWORD *)(a2 + 28) = v18;
  *(_DWORD *)(a2 + 32) = v19;
  *(_DWORD *)(a2 + 36) = v20;
  *(void *)(a2 + 40) = v9;
  *(void *)(a2 + 48) = v10;
  *(_DWORD *)(a2 + 56) = v21;
  return result;
}

uint64_t MeshGradient.withResolvedColors(in:_:)(uint64_t *a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  v14[1] = *MEMORY[0x263EF8340];
  uint64_t v4 = v2[4];
  if (v2[5])
  {
    uint64_t v5 = *(void *)(v4 + 16);
    swift_bridgeObjectRetain();
    a2(v4 + 32, v5);
    return swift_bridgeObjectRelease();
  }
  uint64_t v7 = v2[1];
  uint64_t v8 = *v2 * v7;
  if ((unsigned __int128)(*v2 * (__int128)v7) >> 64 != v8 >> 63)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (v8 < 0)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
  }
  if ((unint64_t)(v8 + 0x800000000000000) >> 60) {
    goto LABEL_16;
  }
  uint64_t v9 = *a1;
  uint64_t v10 = a1[1];
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t isStackAllocationSafe = swift_retain();
  if (16 * v8 > 1024)
  {
    uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if (!isStackAllocationSafe)
    {
      uint64_t v13 = swift_slowAlloc();
      closure #1 in MeshGradient.withResolvedColors(in:_:)(v13, v8, v8, v4, v9, v10, a2);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      JUMPOUT(0x24C527CC0);
    }
  }
  MEMORY[0x270FA5388](isStackAllocationSafe);
  closure #1 in MeshGradient.withResolvedColors(in:_:)((uint64_t)v14 - v12, v8, v8, v4, v9, v10, a2);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

double MeshGradient.BezierPoint.position.getter()
{
  return *(double *)v0;
}

void MeshGradient.BezierPoint.position.setter(double a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*MeshGradient.BezierPoint.position.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double MeshGradient.BezierPoint.leadingControlPoint.getter()
{
  return *(double *)(v0 + 8);
}

void MeshGradient.BezierPoint.leadingControlPoint.setter(double a1)
{
  *(double *)(v1 + 8) = a1;
}

uint64_t (*MeshGradient.BezierPoint.leadingControlPoint.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double MeshGradient.BezierPoint.topControlPoint.getter()
{
  return *(double *)(v0 + 16);
}

void MeshGradient.BezierPoint.topControlPoint.setter(double a1)
{
  *(double *)(v1 + 16) = a1;
}

uint64_t (*MeshGradient.BezierPoint.topControlPoint.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double MeshGradient.BezierPoint.trailingControlPoint.getter()
{
  return *(double *)(v0 + 24);
}

void MeshGradient.BezierPoint.trailingControlPoint.setter(double a1)
{
  *(double *)(v1 + 24) = a1;
}

uint64_t (*MeshGradient.BezierPoint.trailingControlPoint.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double MeshGradient.BezierPoint.bottomControlPoint.getter()
{
  return *(double *)(v0 + 32);
}

void MeshGradient.BezierPoint.bottomControlPoint.setter(double a1)
{
  *(double *)(v1 + 32) = a1;
}

uint64_t (*MeshGradient.BezierPoint.bottomControlPoint.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MeshGradient.BezierPoint(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  uint64_t v6 = *(void *)(a1 + 32);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  uint64_t v8 = *(void *)(a2 + 32);
  return specialized static MeshGradient.BezierPoint.== infix(_:_:)((float32x2_t *)v5, (float32x2_t *)v7) & 1;
}

uint64_t MeshGradient.width.getter()
{
  return *(void *)v0;
}

uint64_t MeshGradient.width.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*MeshGradient.width.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t MeshGradient.height.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t MeshGradient.height.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t (*MeshGradient.height.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t MeshGradient.locations.getter@<X0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 24);
  *(void *)a1 = *(void *)(v1 + 16);
  *(unsigned char *)(a1 + 8) = v2;
  return swift_bridgeObjectRetain();
}

uint64_t MeshGradient.locations.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char v3 = *((unsigned char *)a1 + 8);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 16) = v2;
  *(unsigned char *)(v1 + 24) = v3;
  return result;
}

uint64_t (*MeshGradient.locations.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t MeshGradient.colors.getter@<X0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 40);
  *(void *)a1 = *(void *)(v1 + 32);
  *(unsigned char *)(a1 + 8) = v2;
  return swift_bridgeObjectRetain();
}

uint64_t MeshGradient.colors.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char v3 = *((unsigned char *)a1 + 8);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 32) = v2;
  *(unsigned char *)(v1 + 40) = v3;
  return result;
}

uint64_t (*MeshGradient.colors.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t MeshGradient.background.getter()
{
  return swift_retain();
}

uint64_t MeshGradient.background.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *(void *)(v1 + 48) = a1;
  return result;
}

uint64_t (*MeshGradient.background.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t MeshGradient.smoothsColors.getter()
{
  return *(unsigned __int8 *)(v0 + 56);
}

uint64_t MeshGradient.smoothsColors.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 56) = result;
  return result;
}

uint64_t (*MeshGradient.smoothsColors.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void MeshGradient.colorSpace.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 57);
}

unsigned char *MeshGradient.colorSpace.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 57) = *result;
  return result;
}

uint64_t (*MeshGradient.colorSpace.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t MeshGradient.init(width:height:locations:colors:background:smoothsColors:colorSpace:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, char *a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v8 = *a3;
  char v9 = *((unsigned char *)a3 + 8);
  uint64_t v10 = *a4;
  char v11 = *((unsigned char *)a4 + 8);
  char v12 = *a7;
  *(void *)a8 = result;
  *(void *)(a8 + 8) = a2;
  *(void *)(a8 + 16) = v8;
  *(unsigned char *)(a8 + 24) = v9;
  *(void *)(a8 + 32) = v10;
  *(unsigned char *)(a8 + 40) = v11;
  *(void *)(a8 + 48) = a5;
  *(unsigned char *)(a8 + 56) = a6;
  *(unsigned char *)(a8 + 57) = v12;
  return result;
}

uint64_t MeshGradient._Paint.locations.getter@<X0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 8);
  *(void *)a1 = *(void *)v1;
  *(unsigned char *)(a1 + 8) = v2;
  return swift_bridgeObjectRetain();
}

uint64_t MeshGradient._Paint.locations.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char v3 = *((unsigned char *)a1 + 8);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)uint64_t v1 = v2;
  *(unsigned char *)(v1 + 8) = v3;
  return result;
}

uint64_t (*MeshGradient._Paint.locations.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t MeshGradient._Paint.colors.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MeshGradient._Paint.colors.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t (*MeshGradient._Paint.colors.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

float MeshGradient._Paint.background.getter()
{
  return *(float *)(v0 + 24);
}

void MeshGradient._Paint.background.setter(float a1, float a2, float a3, float a4)
{
  v4[6] = a1;
  v4[7] = a2;
  v4[8] = a3;
  v4[9] = a4;
}

uint64_t (*MeshGradient._Paint.background.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t MeshGradient._Paint.width.getter()
{
  return *(void *)(v0 + 40);
}

uint64_t MeshGradient._Paint.width.setter(uint64_t result)
{
  *(void *)(v1 + 40) = result;
  return result;
}

uint64_t (*MeshGradient._Paint.width.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t MeshGradient._Paint.height.getter()
{
  return *(void *)(v0 + 48);
}

uint64_t MeshGradient._Paint.height.setter(uint64_t result)
{
  *(void *)(v1 + 48) = result;
  return result;
}

uint64_t (*MeshGradient._Paint.height.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t MeshGradient._Paint.flags.getter()
{
  return *(unsigned int *)(v0 + 56);
}

uint64_t MeshGradient._Paint.flags.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 56) = result;
  return result;
}

uint64_t (*MeshGradient._Paint.flags.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t MeshGradient._Paint.init(locations:colors:background:width:height:flags:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>, float a7@<S0>, float a8@<S1>, float a9@<S2>, float a10@<S3>)
{
  char v10 = *(unsigned char *)(result + 8);
  *(void *)a6 = *(void *)result;
  *(unsigned char *)(a6 + 8) = v10;
  *(void *)(a6 + 16) = a2;
  *(float *)(a6 + 24) = a7;
  *(float *)(a6 + 28) = a8;
  *(float *)(a6 + 32) = a9;
  *(float *)(a6 + 36) = a10;
  *(void *)(a6 + 40) = a3;
  *(void *)(a6 + 48) = a4;
  *(_DWORD *)(a6 + 56) = a5;
  return result;
}

void *closure #1 in MeshGradient.resolvePaint(in:)(void *result, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5 = *(void *)(a3 + 16);
  if ((uint64_t)v5 >= a2) {
    int64_t v6 = a2;
  }
  else {
    int64_t v6 = *(void *)(a3 + 16);
  }
  if (v6 < 0)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (!v6) {
    return result;
  }
  if (!v5) {
    goto LABEL_12;
  }
  if (v6 - 1 >= v5)
  {
LABEL_13:
    __break(1u);
    return result;
  }
  char v9 = (uint64_t *)(a3 + 32);
  char v10 = (float *)(*result + 8);
  do
  {
    uint64_t v11 = *v9++;
    v20[0] = a4;
    v20[1] = a5;
    char v12 = *(float (**)(void *))(*(void *)v11 + 104);
    swift_retain();
    float v13 = v12(v20);
    int v15 = v14;
    int v17 = v16;
    int v19 = v18;
    uint64_t result = (void *)swift_release();
    *(v10 - 2) = v13;
    *((_DWORD *)v10 - 1) = v15;
    *(_DWORD *)char v10 = v17;
    *((_DWORD *)v10 + 1) = v19;
    v10 += 4;
    --v6;
  }
  while (v6);
  return result;
}

uint64_t specialized closure #1 in MeshGradient.withResolvedColors(in:_:)(uint64_t result, uint64_t a2, int64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v31 = result;
  unint64_t v8 = *(void *)(a4 + 16);
  if ((uint64_t)v8 >= a3) {
    int64_t v9 = a3;
  }
  else {
    int64_t v9 = *(void *)(a4 + 16);
  }
  if (v9 < 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  if (v9)
  {
    if (v8)
    {
      if (v9 - 1 < v8)
      {
        float v13 = (uint64_t *)(a4 + 32);
        int v14 = (float *)(v31 + 8);
        do
        {
          uint64_t v15 = *v13++;
          v30[0] = a5;
          v30[1] = a6;
          int v16 = *(float (**)(uint64_t *))(*(void *)v15 + 104);
          swift_retain();
          float v17 = v16(v30);
          int v19 = v18;
          int v21 = v20;
          int v23 = v22;
          swift_release();
          *(v14 - 2) = v17;
          *((_DWORD *)v14 - 1) = v19;
          *(_DWORD *)int v14 = v21;
          *((_DWORD *)v14 + 1) = v23;
          v14 += 4;
          --v9;
        }
        while (v9);
        goto LABEL_10;
      }
LABEL_25:
      __break(1u);
      return result;
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
LABEL_10:
  outlined init with take of MeshGradient.Locations((uint64_t *)(a8 + 16), (uint64_t)v30);
  outlined init with take of MeshGradient.Locations(v30, (uint64_t)v29);
  if (*(unsigned char *)(a8 + 57))
  {
    if (*(unsigned char *)(a8 + 57) == 1)
    {
      uint64_t v24 = a2;
      if (*(unsigned char *)(a8 + 56)) {
        int v25 = 17;
      }
      else {
        int v25 = 1;
      }
    }
    else
    {
      uint64_t v24 = a2;
      if (*(unsigned char *)(a8 + 56)) {
        int v25 = 19;
      }
      else {
        int v25 = 3;
      }
    }
  }
  else
  {
    if (*(unsigned char *)(a8 + 56)) {
      int v25 = 16;
    }
    else {
      int v25 = 0;
    }
    uint64_t v24 = a2;
  }
  uint64_t v26 = *(void *)a8;
  uint64_t v27 = *(void *)(a8 + 8);
  outlined retain of LinearGradient((uint64_t)v30);
  GraphicsContext.Storage.Shared.setMeshGradient(locations:colors:width:height:background:flags:)(v29, v31, v24, v26, v27, v25);
  outlined release of LinearGradient((uint64_t)v30);
  swift_release();
  return outlined release of LeafLayoutEngine<_ShapeView<Rectangle, MeshGradient>>(a8);
}

uint64_t closure #1 in MeshGradient.withResolvedColors(in:_:)(uint64_t result, uint64_t a2, int64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t))
{
  unint64_t v7 = *(void *)(a4 + 16);
  if ((uint64_t)v7 >= a3) {
    int64_t v8 = a3;
  }
  else {
    int64_t v8 = *(void *)(a4 + 16);
  }
  if (v8 < 0)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v9 = result;
  if (!v8) {
    return a7(v9, a2);
  }
  if (!v7) {
    goto LABEL_12;
  }
  if (v8 - 1 < v7)
  {
    float v13 = (uint64_t *)(a4 + 32);
    int v14 = (float *)(result + 8);
    do
    {
      uint64_t v15 = *v13++;
      v25[0] = a5;
      v25[1] = a6;
      int v16 = *(float (**)(void *))(*(void *)v15 + 104);
      swift_retain();
      float v17 = v16(v25);
      int v19 = v18;
      int v21 = v20;
      int v23 = v22;
      swift_release();
      *(v14 - 2) = v17;
      *((_DWORD *)v14 - 1) = v19;
      *(_DWORD *)int v14 = v21;
      *((_DWORD *)v14 + 1) = v23;
      v14 += 4;
      --v8;
    }
    while (v8);
    return a7(v9, a2);
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t MeshGradient._Paint.draw(path:style:in:bounds:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  outlined init with take of CGRect?(a4, (uint64_t)v45);
  uint64_t v8 = v45[0];
  uint64_t v9 = v45[1];
  uint64_t v10 = v45[2];
  uint64_t v11 = v45[3];
  uint64_t v28 = a2[1];
  uint64_t v29 = *a2;
  uint64_t v12 = a2[3];
  uint64_t v26 = a2[4];
  uint64_t v27 = a2[2];
  char v25 = *((unsigned char *)a2 + 40);
  uint64_t v13 = *v4;
  char v14 = *((unsigned char *)v4 + 8);
  uint64_t v15 = v4[2];
  long long v24 = *(_OWORD *)(v4 + 3);
  uint64_t v16 = v4[5];
  uint64_t v17 = v4[6];
  int v18 = *((_DWORD *)v4 + 14);
  outlined init with take of CGRect?(a4, (uint64_t)v46);
  if (v46[32] == 1)
  {
    Path.boundingRect.getter();
    uint64_t v8 = v19;
    uint64_t v9 = v20;
    uint64_t v10 = v21;
    uint64_t v11 = v22;
  }
  uint64_t v34 = v13;
  char v35 = v14;
  uint64_t v36 = v15;
  long long v37 = v24;
  uint64_t v38 = v16;
  uint64_t v39 = v17;
  int v40 = v18;
  uint64_t v41 = v8;
  uint64_t v42 = v9;
  uint64_t v43 = v10;
  uint64_t v44 = v11;
  _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi5_((uint64_t)&v34);
  outlined init with take of GraphicsContext.ResolvedShading((uint64_t)&v34, (uint64_t)v33);
  v31[0] = v29;
  v31[1] = v28;
  void v31[2] = v27;
  v31[3] = v12;
  v31[4] = v26;
  char v32 = v25;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  GraphicsContext.draw(_:with:style:)(a1, (uint64_t)v33, (uint64_t)v31, a3);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

BOOL MeshGradient._Paint.isClear.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  BOOL result = *(float *)(v0 + 36) == 0.0;
  uint64_t v3 = *(void *)(v1 + 16);
  if (v3)
  {
    uint64_t v4 = (float *)(v1 + 44);
    uint64_t v5 = 1;
    do
    {
      if (result)
      {
        BOOL result = *v4 == 0.0;
        if (v3 == v5) {
          return result;
        }
      }
      else
      {
        BOOL result = 0;
        if (v3 == v5) {
          return result;
        }
      }
      v4 += 4;
    }
    while (!__OFADD__(v5++, 1));
    __break(1u);
  }
  return result;
}

BOOL MeshGradient._Paint.isOpaque.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  BOOL result = *(float *)(v0 + 36) == 1.0;
  uint64_t v3 = *(void *)(v1 + 16);
  if (v3)
  {
    uint64_t v4 = (float *)(v1 + 44);
    uint64_t v5 = 1;
    do
    {
      if (result)
      {
        BOOL result = *v4 == 1.0;
        if (v3 == v5) {
          return result;
        }
      }
      else
      {
        BOOL result = 0;
        if (v3 == v5) {
          return result;
        }
      }
      v4 += 4;
    }
    while (!__OFADD__(v5++, 1));
    __break(1u);
  }
  return result;
}

uint64_t MeshGradient._Paint.isCALayerCompatible.getter()
{
  return 0;
}

double key path getter for MeshGradient._Paint.animatableData : MeshGradient._Paint@<D0>(float32x4_t *a1@<X8>)
{
  MeshGradient._Paint.animatableData.getter(v4);
  double result = *(double *)v4[0].i64;
  float32x4_t v3 = v4[1];
  *a1 = v4[0];
  a1[1] = v3;
  return result;
}

void key path setter for MeshGradient._Paint.animatableData : MeshGradient._Paint(float32x4_t *a1)
{
  uint64_t v1 = a1->i64[1];
  v2[0].i64[0] = a1->i64[0];
  v2[0].i64[1] = v1;
  v2[1] = a1[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  MeshGradient._Paint.animatableData.setter(v2);
}

void MeshGradient._Paint.animatableData.setter(float32x4_t *a1)
{
  unint64_t v2 = v1;
  uint64_t v3 = a1->i64[0];
  uint64_t v4 = a1->i64[1];
  float32x4_t v46 = a1[1];
  uint64_t v5 = *(void **)(v1 + 16);
  if (v5[2] >= *(void *)(v4 + 16)) {
    uint64_t v6 = *(void *)(v4 + 16);
  }
  else {
    uint64_t v6 = v5[2];
  }
  if (v6)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew()(v5);
    }
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    unint64_t v2 = 1071289118;
    while (v8 < v5[2])
    {
      float v12 = *(float *)(v4 + v7 * 8 + 40);
      float v11 = *(float *)(v4 + v7 * 8 + 44);
      float32x2_t v13 = *(float32x2_t *)(v4 + v7 * 8 + 32);
      if (one-time initialization token for legacyInterpolation != -1) {
        swift_once();
      }
      float32x2_t v47 = vmul_f32(v13, (float32x2_t)0x3C0000003C000000);
      float v14 = v12 * 0.0078125;
      float v15 = v11 * 0.0078125;
      swift_beginAccess();
      if (static Color.Resolved.legacyInterpolation)
      {
        float32x2_t v9 = v47;
      }
      else
      {
        if (v15 == 0.0)
        {
          float32x2_t v16 = v47;
        }
        else
        {
          float32x2_t v16 = vmul_n_f32(v47, 1.0 / v15);
          float v14 = v14 * (float)(1.0 / v15);
        }
        float v17 = v14 * (float)(v14 * v14);
        float32x2_t v18 = vmul_f32(v16, vmul_f32(v16, v16));
        float32x2_t v19 = vsub_f32(vmul_f32(v18, (float32x2_t)0x40270644408274ABLL), (float32x2_t)vrev64_s32((int32x2_t)vmul_f32(v18, (float32x2_t)0x4053B18C3FA25C2DLL)));
        float32x2_t v20 = vmul_n_f32((float32x2_t)0x3EAEC16A3E6C8362, v17);
        v9.i32[0] = vadd_f32(v19, v20).u32[0];
        v9.i32[1] = vsub_f32(v19, v20).i32[1];
        float32x2_t v21 = vmul_f32(v18, (float32x2_t)0x3F34133EBB897F53);
        float v14 = (float)(v17 * 1.7076) + vsub_f32(v21, (float32x2_t)vdup_lane_s32((int32x2_t)v21, 1)).f32[0];
      }
      ++v8;
      v5[v7 + 4] = v9;
      uint64_t v10 = (float *)&v5[v7];
      v10[10] = v14;
      v10[11] = v15;
      v7 += 2;
      if (v6 == v8)
      {
        swift_bridgeObjectRelease();
        unint64_t v2 = v1;
        *(void *)(v1 + 16) = v5;
        goto LABEL_19;
      }
    }
    __break(1u);
    goto LABEL_61;
  }
LABEL_19:
  uint64_t v22 = *(void **)v2;
  unint64_t v23 = *(void *)(v3 + 16);
  uint64_t v24 = *(void *)(*(void *)v2 + 16);
  if ((*(unsigned char *)(v2 + 8) & 1) == 0)
  {
    if (v24 + 0x4000000000000000 >= 0)
    {
      if (v23 == 2 * v24)
      {
        if (v24)
        {
          unint64_t v45 = v2;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          unint64_t v37 = 0;
          uint64_t v38 = 9;
          unint64_t v2 = 32;
          while (v38 - 9 < v23)
          {
            LODWORD(v36) = *(_DWORD *)(v3 + v2);
            long long v49 = v36;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew()(v22);
            }
            long long v36 = v49;
            if (v37 >= v22[2]) {
              goto LABEL_73;
            }
            *(_DWORD *)((char *)v22 + v2) = v49;
            unint64_t v23 = *(void *)(v3 + 16);
            if (v38 - 8 >= v23) {
              goto LABEL_74;
            }
            DWORD1(v36) = *(_DWORD *)(v3 + 4 * v38);
            ++v37;
            *(void *)((char *)v22 + v2) = v36;
            v38 += 2;
            v2 += 8;
            if (v24 == v37)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              unint64_t v2 = v45;
              goto LABEL_54;
            }
          }
          goto LABEL_72;
        }
LABEL_54:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(void *)unint64_t v2 = v22;
        *(unsigned char *)(v2 + 8) = 0;
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      goto LABEL_55;
    }
LABEL_77:
    __break(1u);
    return;
  }
  if ((unsigned __int128)(v24 * (__int128)10) >> 64 != (10 * v24) >> 63)
  {
    __break(1u);
    goto LABEL_77;
  }
  if (v23 == 10 * v24 && v24 != 0)
  {
    unint64_t v44 = v2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v2 = 0;
    uint64_t v27 = 0;
    unint64_t v28 = 0;
    while (v2 < v23)
    {
      LODWORD(v26) = *(_DWORD *)(v3 + 4 * v2 + 32);
      long long v48 = v26;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew()(v22);
      }
      long long v26 = v48;
      if (v28 >= v22[2]) {
        goto LABEL_62;
      }
      LODWORD(v22[v27 + 4]) = v48;
      unint64_t v23 = *(void *)(v3 + 16);
      if (v2 + 1 >= v23) {
        goto LABEL_63;
      }
      unint64_t v29 = v3 + 4 * v2;
      DWORD1(v26) = *(_DWORD *)(v29 + 36);
      v22[v27 + 4] = v26;
      if (v2 + 2 >= v23) {
        goto LABEL_64;
      }
      LODWORD(v30) = *(_DWORD *)(v29 + 40);
      LODWORD(v22[v27 + 5]) = v30;
      if (v2 + 3 >= v23) {
        goto LABEL_65;
      }
      unint64_t v31 = v3 + 4 * v2;
      HIDWORD(v30) = *(_DWORD *)(v31 + 44);
      v22[v27 + 5] = v30;
      if (v2 + 4 >= v23) {
        goto LABEL_66;
      }
      LODWORD(v32) = *(_DWORD *)(v31 + 48);
      LODWORD(v22[v27 + 6]) = v32;
      if (v2 + 5 >= v23) {
        goto LABEL_67;
      }
      unint64_t v33 = v3 + 4 * v2;
      HIDWORD(v32) = *(_DWORD *)(v33 + 52);
      v22[v27 + 6] = v32;
      if (v2 + 6 >= v23) {
        goto LABEL_68;
      }
      LODWORD(v34) = *(_DWORD *)(v33 + 56);
      LODWORD(v22[v27 + 7]) = v34;
      if (v2 + 7 >= v23) {
        goto LABEL_69;
      }
      unint64_t v35 = v3 + 4 * v2;
      HIDWORD(v34) = *(_DWORD *)(v35 + 60);
      v22[v27 + 7] = v34;
      if (v2 + 8 >= v23) {
        goto LABEL_70;
      }
      LODWORD(v26) = *(_DWORD *)(v35 + 64);
      LODWORD(v22[v27 + 8]) = v26;
      if (v2 + 9 >= v23) {
        goto LABEL_71;
      }
      ++v28;
      DWORD1(v26) = *(_DWORD *)(v3 + 4 * v2 + 68);
      v22[v27 + 8] = v26;
      v27 += 5;
      v2 += 10;
      if (v24 == v28)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v2 = v44;
        goto LABEL_53;
      }
    }
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
LABEL_74:
    __break(1u);
    goto LABEL_75;
  }
LABEL_53:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)unint64_t v2 = v22;
  *(unsigned char *)(v2 + 8) = 1;
LABEL_55:
  v39.i64[0] = 0x3C0000003C000000;
  v39.i64[1] = 0x3C0000003C000000;
  if (one-time initialization token for legacyInterpolation != -1)
  {
LABEL_75:
    swift_once();
    v39.i64[0] = 0x3C0000003C000000;
    v39.i64[1] = 0x3C0000003C000000;
  }
  float32x4_t v50 = vmulq_f32(v46, v39);
  swift_beginAccess();
  if (static Color.Resolved.legacyInterpolation)
  {
    float v40 = v50.f32[0];
    __int32 v42 = v50.i32[2];
    __int32 v41 = v50.i32[1];
    __int32 v43 = v50.i32[3];
  }
  else
  {
    char v52 = 2;
    float32x4_t v51 = v50;
    float v40 = ResolvedGradient.ColorSpace.convertOut(_:)(v51.f32);
  }
  *(float *)(v2 + 24) = v40;
  *(_DWORD *)(v2 + 28) = v41;
  *(_DWORD *)(v2 + 32) = v42;
  *(_DWORD *)(v2 + 36) = v43;
}

void (*MeshGradient._Paint.animatableData.modify(float32x4_t **a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = (float32x4_t *)malloc(0x28uLL);
  *a1 = v3;
  v3[2].i64[0] = v1;
  MeshGradient._Paint.animatableData.getter(v3);
  return MeshGradient._Paint.animatableData.modify;
}

void MeshGradient._Paint.animatableData.modify(uint64_t **a1, char a2)
{
  unint64_t v2 = *a1;
  uint64_t v3 = (*a1)[1];
  int v5 = *((_DWORD *)*a1 + 4);
  int v4 = *((_DWORD *)*a1 + 5);
  int v7 = *((_DWORD *)*a1 + 6);
  int v6 = *((_DWORD *)*a1 + 7);
  v8.i64[0] = **a1;
  v8.i64[1] = v3;
  int v9 = v5;
  int v10 = v4;
  int v11 = v7;
  int v12 = v6;
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    MeshGradient._Paint.animatableData.setter(&v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    MeshGradient._Paint.animatableData.setter(&v8);
  }

  free(v2);
}

void static MeshGradient._Paint.leafProtobufTag.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 9;
  *(unsigned char *)(a1 + 8) = 0;
}

uint64_t protocol witness for ResolvedPaint.draw(path:style:in:bounds:) in conformance MeshGradient._Paint(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  outlined init with take of CGRect?(a4, (uint64_t)v45);
  uint64_t v8 = v45[0];
  uint64_t v9 = v45[1];
  uint64_t v10 = v45[2];
  uint64_t v11 = v45[3];
  uint64_t v28 = a2[1];
  uint64_t v29 = *a2;
  uint64_t v12 = a2[3];
  uint64_t v26 = a2[4];
  uint64_t v27 = a2[2];
  char v25 = *((unsigned char *)a2 + 40);
  uint64_t v13 = *v4;
  char v14 = *((unsigned char *)v4 + 8);
  uint64_t v15 = v4[2];
  long long v24 = *(_OWORD *)(v4 + 3);
  uint64_t v16 = v4[5];
  uint64_t v17 = v4[6];
  int v18 = *((_DWORD *)v4 + 14);
  outlined init with take of CGRect?(a4, (uint64_t)v46);
  if (v46[32] == 1)
  {
    Path.boundingRect.getter();
    uint64_t v8 = v19;
    uint64_t v9 = v20;
    uint64_t v10 = v21;
    uint64_t v11 = v22;
  }
  uint64_t v34 = v13;
  char v35 = v14;
  uint64_t v36 = v15;
  long long v37 = v24;
  uint64_t v38 = v16;
  uint64_t v39 = v17;
  int v40 = v18;
  uint64_t v41 = v8;
  uint64_t v42 = v9;
  uint64_t v43 = v10;
  uint64_t v44 = v11;
  _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi5_((uint64_t)&v34);
  outlined init with take of GraphicsContext.ResolvedShading((uint64_t)&v34, (uint64_t)v33);
  v31[0] = v29;
  v31[1] = v28;
  void v31[2] = v27;
  v31[3] = v12;
  v31[4] = v26;
  char v32 = v25;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  GraphicsContext.draw(_:with:style:)(a1, (uint64_t)v33, (uint64_t)v31, a3);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void protocol witness for static ResolvedPaint.leafProtobufTag.getter in conformance MeshGradient._Paint(uint64_t a1@<X8>)
{
  *(void *)a1 = 9;
  *(unsigned char *)(a1 + 8) = 0;
}

void protocol witness for ResolvedPaint.encodePaint(to:) in conformance MeshGradient._Paint()
{
  long long v1 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)unint64_t v2 = *(_OWORD *)(v0 + 32);
  ProtobufEncoder.archiveOptions.getter(v3);
  if (v3[1] > 1)
  {
    specialized ProtobufEncoder.messageField<A>(_:_:)(9);
  }
  else
  {
    ProtobufEncoder.encodeVarint(_:)(0xAuLL);
    specialized ProtobufEncoder.encodeMessage<A>(_:)(*((float *)&v1 + 2), *((float *)&v1 + 3), v2[0], v2[1]);
  }
}

void MeshGradient._Paint.encodePaint(to:)()
{
  long long v1 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)unint64_t v2 = *(_OWORD *)(v0 + 32);
  ProtobufEncoder.archiveOptions.getter(v3);
  if (v3[1] >= 2)
  {
    specialized ProtobufEncoder.messageField<A>(_:_:)(9);
  }
  else
  {
    ProtobufEncoder.encodeVarint(_:)(0xAuLL);
    specialized ProtobufEncoder.encodeMessage<A>(_:)(*((float *)&v1 + 2), *((float *)&v1 + 3), v2[0], v2[1]);
  }
}

void (*protocol witness for Animatable.animatableData.modify in conformance MeshGradient._Paint(float32x4_t ***a1))(void *a1)
{
  unint64_t v2 = (float32x4_t **)malloc(0x28uLL);
  *a1 = v2;
  v2[4] = (float32x4_t *)MeshGradient._Paint.animatableData.modify(v2);
  return protocol witness for Animatable.animatableData.modify in conformance LinearGradient._Paint;
}

void MeshGradient._Paint.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *(void *)(v3 + 16);
  float v6 = *(float *)(v3 + 24);
  float v7 = *(float *)(v3 + 28);
  float v8 = *(float *)(v3 + 32);
  float v9 = *(float *)(v3 + 36);
  int64_t v11 = *(void *)(v3 + 40);
  int64_t v10 = *(void *)(v3 + 48);
  Swift::UInt v12 = *(unsigned int *)(v3 + 56);
  swift_bridgeObjectRetain();
  specialized ProtobufEncoder.messageField<A>(_:_:)(1);
  swift_bridgeObjectRelease();
  if (v2) {
    return;
  }
  int64_t v58 = v11;
  uint64_t v13 = *(void *)(v5 + 16);
  if (!v13)
  {
LABEL_75:
    if (v6 == 0.0 && v7 == 0.0 && v8 == 0.0 && v9 == 0.0)
    {
      int64_t v55 = v58;
    }
    else
    {
      ProtobufEncoder.encodeVarint(_:)(0x1AuLL);
      specialized ProtobufEncoder.encodeMessage<A>(_:)(v6, v7, v8, v9);
      int64_t v55 = v58;
    }
    if (v55 > 0)
    {
      ProtobufEncoder.encodeVarint(_:)(0x20uLL);
      ProtobufEncoder.encodeVarint(_:)(v55);
    }
    if (v10 >= 1)
    {
      ProtobufEncoder.encodeVarint(_:)(0x28uLL);
      ProtobufEncoder.encodeVarint(_:)(v10);
    }
    if (v12)
    {
      ProtobufEncoder.encodeVarint(_:)(0x30uLL);
      ProtobufEncoder.encodeVarint(_:)(v12);
    }
    return;
  }
  float v56 = v9;
  Swift::UInt v57 = v12;
  swift_bridgeObjectRetain();
  char v14 = (float *)(v5 + 44);
  while (1)
  {
    float v16 = *(v14 - 3);
    float v17 = *(v14 - 2);
    float v19 = *(v14 - 1);
    float v18 = *v14;
    int64_t v20 = a1[1];
    int64_t v21 = a1[2];
    if (v20 >= v21)
    {
      int64_t v45 = v20 + 1;
      if (__OFADD__(v20, 1)) {
        goto LABEL_93;
      }
      if (v21 < v45)
      {
        float32x4_t v46 = (unsigned char *)ProtobufEncoder.growBufferSlow(to:)(v45);
      }
      else
      {
        a1[1] = v45;
        float32x4_t v46 = (unsigned char *)(*a1 + v20);
      }
      *float32x4_t v46 = 18;
      int64_t v22 = a1[1];
    }
    else
    {
      *(unsigned char *)(*a1 + v20) = 18;
      int64_t v22 = v20 + 1;
      a1[1] = v20 + 1;
    }
    unint64_t v23 = (void *)a1[3];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23[2] + 1, 1, v23);
    }
    unint64_t v25 = v23[2];
    unint64_t v24 = v23[3];
    if (v25 >= v24 >> 1) {
      unint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v24 > 1), v25 + 1, 1, v23);
    }
    v23[2] = v25 + 1;
    v23[v25 + 4] = v22;
    a1[3] = v23;
    int64_t v26 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    a1[1] = v26;
    if (v16 == 0.0)
    {
      if (v17 == 0.0) {
        goto LABEL_16;
      }
    }
    else
    {
      int64_t v27 = a1[2];
      if (v26 >= v27)
      {
        int64_t v47 = v22 + 2;
        if (__OFADD__(v26, 1)) {
          goto LABEL_94;
        }
        if (v27 < v47)
        {
          long long v48 = (unsigned char *)ProtobufEncoder.growBufferSlow(to:)(v47);
        }
        else
        {
          a1[1] = v47;
          long long v48 = (unsigned char *)(*a1 + v26);
        }
        *long long v48 = 13;
        uint64_t v28 = a1[1];
        int64_t v29 = v28 + 4;
        if (__OFADD__(v28, 4)) {
          goto LABEL_89;
        }
      }
      else
      {
        *(unsigned char *)(*a1 + v26) = 13;
        uint64_t v28 = v22 + 2;
        a1[1] = v22 + 2;
        int64_t v29 = v22 + 6;
        if (__OFADD__(v22 + 2, 4)) {
          goto LABEL_89;
        }
      }
      if (a1[2] < v29)
      {
        uint64_t v30 = (float *)ProtobufEncoder.growBufferSlow(to:)(v29);
      }
      else
      {
        a1[1] = v29;
        uint64_t v30 = (float *)(*a1 + v28);
      }
      *uint64_t v30 = v16;
      if (v17 == 0.0)
      {
LABEL_16:
        if (v19 == 0.0) {
          goto LABEL_17;
        }
        goto LABEL_29;
      }
    }
    int64_t v31 = a1[1];
    int64_t v32 = a1[2];
    if (v31 >= v32)
    {
      int64_t v49 = v31 + 1;
      if (__OFADD__(v31, 1)) {
        goto LABEL_95;
      }
      if (v32 < v49)
      {
        float32x4_t v50 = (unsigned char *)ProtobufEncoder.growBufferSlow(to:)(v49);
      }
      else
      {
        a1[1] = v49;
        float32x4_t v50 = (unsigned char *)(*a1 + v31);
      }
      unsigned char *v50 = 21;
      int64_t v33 = a1[1];
      int64_t v34 = v33 + 4;
      if (__OFADD__(v33, 4)) {
        goto LABEL_90;
      }
    }
    else
    {
      *(unsigned char *)(*a1 + v31) = 21;
      int64_t v33 = v31 + 1;
      a1[1] = v33;
      int64_t v34 = v33 + 4;
      if (__OFADD__(v33, 4)) {
        goto LABEL_90;
      }
    }
    if (a1[2] < v34)
    {
      char v35 = (float *)ProtobufEncoder.growBufferSlow(to:)(v34);
    }
    else
    {
      a1[1] = v34;
      char v35 = (float *)(*a1 + v33);
    }
    *char v35 = v17;
    if (v19 == 0.0)
    {
LABEL_17:
      if (v18 == 1.0) {
        goto LABEL_6;
      }
LABEL_34:
      int64_t v41 = a1[1];
      int64_t v42 = a1[2];
      if (v41 >= v42)
      {
        int64_t v53 = v41 + 1;
        if (__OFADD__(v41, 1)) {
          goto LABEL_97;
        }
        if (v42 < v53)
        {
          uint64_t v54 = (unsigned char *)ProtobufEncoder.growBufferSlow(to:)(v53);
        }
        else
        {
          a1[1] = v53;
          uint64_t v54 = (unsigned char *)(*a1 + v41);
        }
        *uint64_t v54 = 37;
        int64_t v43 = a1[1];
        int64_t v44 = v43 + 4;
        if (__OFADD__(v43, 4)) {
          goto LABEL_92;
        }
      }
      else
      {
        *(unsigned char *)(*a1 + v41) = 37;
        int64_t v43 = v41 + 1;
        a1[1] = v43;
        int64_t v44 = v43 + 4;
        if (__OFADD__(v43, 4)) {
          goto LABEL_92;
        }
      }
      if (a1[2] >= v44)
      {
        a1[1] = v44;
        uint64_t v15 = (float *)(*a1 + v43);
      }
      else
      {
        uint64_t v15 = (float *)ProtobufEncoder.growBufferSlow(to:)(v44);
      }
      float *v15 = v18;
      goto LABEL_6;
    }
LABEL_29:
    int64_t v36 = a1[1];
    int64_t v37 = a1[2];
    if (v36 >= v37)
    {
      int64_t v51 = v36 + 1;
      if (__OFADD__(v36, 1)) {
        goto LABEL_96;
      }
      if (v37 < v51)
      {
        char v52 = (unsigned char *)ProtobufEncoder.growBufferSlow(to:)(v51);
      }
      else
      {
        a1[1] = v51;
        char v52 = (unsigned char *)(*a1 + v36);
      }
      *char v52 = 29;
      int64_t v38 = a1[1];
      int64_t v39 = v38 + 4;
      if (__OFADD__(v38, 4)) {
        goto LABEL_91;
      }
    }
    else
    {
      *(unsigned char *)(*a1 + v36) = 29;
      int64_t v38 = v36 + 1;
      a1[1] = v38;
      int64_t v39 = v38 + 4;
      if (__OFADD__(v38, 4)) {
        goto LABEL_91;
      }
    }
    if (a1[2] < v39)
    {
      int v40 = (float *)ProtobufEncoder.growBufferSlow(to:)(v39);
    }
    else
    {
      a1[1] = v39;
      int v40 = (float *)(*a1 + v38);
    }
    *int v40 = v19;
    if (v18 != 1.0) {
      goto LABEL_34;
    }
LABEL_6:
    ProtobufEncoder.endLengthDelimited()();
    v14 += 4;
    if (!--v13)
    {
      swift_bridgeObjectRelease();
      Swift::UInt v12 = v57;
      float v9 = v56;
      goto LABEL_75;
    }
  }
  __break(1u);
LABEL_89:
  __break(1u);
LABEL_90:
  __break(1u);
LABEL_91:
  __break(1u);
LABEL_92:
  __break(1u);
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
LABEL_96:
  __break(1u);
LABEL_97:
  __break(1u);
}

uint64_t MeshGradient._Paint.init(from:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (void *)result;
  char v80 = 0;
  unint64_t v5 = *(void *)(result + 8);
  unint64_t v6 = *(void *)(result + 16);
  if (v5 >= v6)
  {
    char v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    int v7 = 0;
    float v8 = (void *)MEMORY[0x263F8EE78];
    int v9 = 0;
    int v10 = 0;
    int v11 = 0;
    float v12 = 0.0;
    uint64_t v16 = MEMORY[0x263F8EE78];
    goto LABEL_4;
  }
  uint64_t v75 = 0;
  uint64_t v76 = 0;
  int v7 = 0;
  float v8 = (void *)MEMORY[0x263F8EE78];
  int v9 = 0;
  int v10 = 0;
  int v11 = 0;
  float v12 = 0.0;
  uint64_t v77 = MEMORY[0x263F8EE78];
  while (2)
  {
    double result = v3[3];
    if (!result) {
      goto LABEL_12;
    }
    unint64_t v18 = v3[4];
    if (v5 >= v18)
    {
      if (v18 < v5) {
        goto LABEL_98;
      }
      v3[3] = 0;
LABEL_12:
      double result = ProtobufDecoder.decodeVarint()();
      if (v2) {
        goto LABEL_99;
      }
      if ((unint64_t)result <= 7) {
        goto LABEL_98;
      }
    }
    switch((unint64_t)result >> 3)
    {
      case 1uLL:
        if ((result & 7) != 2) {
          goto LABEL_98;
        }
        float v19 = (void *)v3[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          float v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19[2] + 1, 1, v19);
        }
        unint64_t v21 = v19[2];
        unint64_t v20 = v19[3];
        if (v21 >= v20 >> 1) {
          float v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v20 > 1), v21 + 1, 1, v19);
        }
        void v19[2] = v21 + 1;
        v19[v21 + 4] = v6;
        v3[5] = v19;
        uint64_t v22 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          goto LABEL_99;
        }
        if (v22 < 0)
        {
          __break(1u);
LABEL_110:
          __break(1u);
LABEL_111:
          __break(1u);
LABEL_112:
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
          __break(1u);
          unint64_t v71 = specialized _ArrayBuffer._consumeAndCreateNew()((void *)a2);
          uint64_t v72 = v71[2];
          if (v72) {
            goto LABEL_107;
          }
          __break(1u);
          unint64_t v71 = (void *)v3[5];
          if (v71[2])
          {
            if (swift_isUniquelyReferenced_nonNull_native())
            {
              uint64_t v72 = v71[2];
              if (!v72) {
                goto LABEL_104;
              }
LABEL_107:
              uint64_t v73 = v72 - 1;
              uint64_t v74 = v71[v73 + 4];
              v71[2] = v73;
              v3[5] = v71;
              unsigned char v3[2] = v74;
LABEL_99:
              swift_bridgeObjectRelease();
              return swift_bridgeObjectRelease();
            }
          }
          else
          {
            __break(1u);
          }
          unint64_t v71 = specialized _ArrayBuffer._consumeAndCreateNew()(v71);
          uint64_t v72 = v71[2];
          if (v72) {
            goto LABEL_107;
          }
LABEL_104:
          __break(1u);
          unint64_t v71 = (void *)v3[5];
          if (v71[2])
          {
            if (swift_isUniquelyReferenced_nonNull_native())
            {
              uint64_t v72 = v71[2];
              if (v72) {
                goto LABEL_107;
              }
              goto LABEL_127;
            }
          }
          else
          {
            __break(1u);
          }
          unint64_t v71 = specialized _ArrayBuffer._consumeAndCreateNew()(v71);
          uint64_t v72 = v71[2];
          if (v72) {
            goto LABEL_107;
          }
LABEL_127:
          __break(1u);
          JUMPOUT(0x246026C10);
        }
        unint64_t v23 = v3[1] + v22;
        if (v6 < v23) {
          goto LABEL_98;
        }
        unsigned char v3[2] = v23;
        MeshGradient.Locations.init(from:)(v3, (uint64_t)&v78);
        unint64_t v24 = (void *)v3[5];
        if (!v24[2]) {
          goto LABEL_112;
        }
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v25 = v24[2];
          if (!v25) {
            goto LABEL_115;
          }
        }
        else
        {
          unint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew()(v24);
          uint64_t v25 = v24[2];
          if (!v25) {
            goto LABEL_115;
          }
        }
        uint64_t v26 = v25 - 1;
        uint64_t v27 = v24[v26 + 4];
        _OWORD v24[2] = v26;
        v3[5] = v24;
        unsigned char v3[2] = v27;
        uint64_t v28 = v78;
        char v29 = v79;
        double result = swift_bridgeObjectRelease();
        char v80 = v29;
        uint64_t v77 = v28;
LABEL_7:
        unint64_t v5 = v3[1];
        unint64_t v6 = v3[2];
        if (v5 < v6) {
          continue;
        }
        char v13 = v80;
        uint64_t v14 = v76;
        uint64_t v16 = v77;
        uint64_t v15 = v75;
LABEL_4:
        v3[3] = 0;
        *(void *)a2 = v16;
        *(unsigned char *)(a2 + 8) = v13;
        *(void *)(a2 + 16) = v8;
        *(float *)(a2 + 24) = v12;
        *(_DWORD *)(a2 + 28) = v11;
        *(_DWORD *)(a2 + 32) = v10;
        *(_DWORD *)(a2 + 36) = v9;
        *(void *)(a2 + 40) = v15;
        *(void *)(a2 + 48) = v14;
        *(_DWORD *)(a2 + 56) = v7;
        return result;
      case 2uLL:
        if ((result & 7) != 2) {
          goto LABEL_98;
        }
        uint64_t v30 = (void *)v3[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v30[2] + 1, 1, v30);
        }
        unint64_t v32 = v30[2];
        unint64_t v31 = v30[3];
        if (v32 >= v31 >> 1) {
          uint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v31 > 1), v32 + 1, 1, v30);
        }
        uint64_t v30[2] = v32 + 1;
        v30[v32 + 4] = v6;
        v3[5] = v30;
        uint64_t v33 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          goto LABEL_99;
        }
        if (v33 < 0) {
          goto LABEL_110;
        }
        unint64_t v34 = v3[1] + v33;
        if (v6 < v34) {
          goto LABEL_98;
        }
        unsigned char v3[2] = v34;
        float v35 = specialized Color.Resolved.init(from:)(v3);
        int64_t v39 = (void *)v3[5];
        if (!v39[2]) {
          goto LABEL_113;
        }
        float v40 = v35;
        int v41 = v36;
        int v42 = v37;
        int v43 = v38;
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v44 = v39[2];
          if (!v44) {
            goto LABEL_116;
          }
        }
        else
        {
          int64_t v39 = specialized _ArrayBuffer._consumeAndCreateNew()(v39);
          uint64_t v44 = v39[2];
          if (!v44) {
            goto LABEL_116;
          }
        }
        uint64_t v45 = v44 - 1;
        uint64_t v46 = v39[v45 + 4];
        v39[2] = v45;
        v3[5] = v39;
        unsigned char v3[2] = v46;
        double result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          double result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
          float v8 = (void *)result;
        }
        unint64_t v48 = v8[2];
        unint64_t v47 = v8[3];
        if (v48 >= v47 >> 1)
        {
          double result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v47 > 1), v48 + 1, 1, v8);
          float v8 = (void *)result;
        }
        long long v8[2] = v48 + 1;
        int64_t v49 = (float *)&v8[2 * v48];
        v49[8] = v40;
        *((_DWORD *)v49 + 9) = v41;
        *((_DWORD *)v49 + 10) = v42;
        *((_DWORD *)v49 + 11) = v43;
        goto LABEL_7;
      case 3uLL:
        if ((result & 7) != 2) {
          goto LABEL_98;
        }
        float32x4_t v50 = (void *)v3[5];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          float32x4_t v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v50[2] + 1, 1, v50);
        }
        unint64_t v52 = v50[2];
        unint64_t v51 = v50[3];
        if (v52 >= v51 >> 1) {
          float32x4_t v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v51 > 1), v52 + 1, 1, v50);
        }
        _OWORD v50[2] = v52 + 1;
        v50[v52 + 4] = v6;
        v3[5] = v50;
        uint64_t v53 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          goto LABEL_99;
        }
        if (v53 < 0) {
          goto LABEL_111;
        }
        unint64_t v54 = v3[1] + v53;
        if (v6 < v54) {
          goto LABEL_98;
        }
        unsigned char v3[2] = v54;
        float v55 = specialized Color.Resolved.init(from:)(v3);
        int32x4_t v59 = (void *)v3[5];
        if (!v59[2]) {
          goto LABEL_114;
        }
        float v12 = v55;
        int v11 = v56;
        int v10 = v57;
        int v9 = v58;
        double result = swift_isUniquelyReferenced_nonNull_native();
        if (result)
        {
          uint64_t v60 = v59[2];
          if (!v60) {
            goto LABEL_97;
          }
        }
        else
        {
          double result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v59);
          int32x4_t v59 = (void *)result;
          uint64_t v60 = *(void *)(result + 16);
          if (!v60)
          {
LABEL_97:
            __break(1u);
LABEL_98:
            lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
            swift_allocError();
            swift_willThrow();
            goto LABEL_99;
          }
        }
        uint64_t v61 = v60 - 1;
        uint64_t v62 = v59[v61 + 4];
        v59[2] = v61;
        v3[5] = v59;
        unsigned char v3[2] = v62;
        goto LABEL_7;
      case 4uLL:
        if ((result & 7) == 0) {
          goto LABEL_64;
        }
        if ((result & 7) != 2) {
          goto LABEL_98;
        }
        uint64_t v63 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          goto LABEL_99;
        }
        if (v63 < 0) {
          goto LABEL_117;
        }
        unint64_t v64 = v3[1] + v63;
        if (v6 < v64) {
          goto LABEL_98;
        }
        v3[3] = 32;
        v3[4] = v64;
LABEL_64:
        double result = ProtobufDecoder.decodeVarint()();
        uint64_t v65 = v75;
        if (v2) {
          goto LABEL_99;
        }
        if (result >= 0) {
          uint64_t v65 = result;
        }
        uint64_t v75 = v65;
        goto LABEL_7;
      case 5uLL:
        if ((result & 7) == 0) {
          goto LABEL_74;
        }
        if ((result & 7) != 2) {
          goto LABEL_98;
        }
        uint64_t v66 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          goto LABEL_99;
        }
        if (v66 < 0) {
          goto LABEL_118;
        }
        unint64_t v67 = v3[1] + v66;
        if (v6 < v67) {
          goto LABEL_98;
        }
        v3[3] = 40;
        v3[4] = v67;
LABEL_74:
        double result = ProtobufDecoder.decodeVarint()();
        uint64_t v68 = v76;
        if (v2) {
          goto LABEL_99;
        }
        if (result >= 0) {
          uint64_t v68 = result;
        }
        uint64_t v76 = v68;
        goto LABEL_7;
      case 6uLL:
        if ((result & 7) == 0) {
          goto LABEL_84;
        }
        if ((result & 7) != 2) {
          goto LABEL_98;
        }
        uint64_t v69 = ProtobufDecoder.decodeVarint()();
        if (v2) {
          goto LABEL_99;
        }
        if (v69 < 0) {
          goto LABEL_119;
        }
        unint64_t v70 = v3[1] + v69;
        if (v6 < v70) {
          goto LABEL_98;
        }
        v3[3] = 48;
        v3[4] = v70;
LABEL_84:
        double result = ProtobufDecoder.decodeVarint()();
        if (v2) {
          goto LABEL_99;
        }
        int v7 = result;
        goto LABEL_7;
      default:
        switch(result & 7)
        {
          case 0:
            double result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              goto LABEL_99;
            }
            goto LABEL_7;
          case 1:
            unint64_t v17 = v3[1] + 8;
            if (v6 >= v17) {
              goto LABEL_6;
            }
            goto LABEL_98;
          case 2:
            double result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              goto LABEL_99;
            }
            if (result < 0) {
              goto LABEL_120;
            }
            unint64_t v17 = v3[1] + result;
            if (v6 < v17) {
              goto LABEL_98;
            }
LABEL_6:
            v3[1] = v17;
            break;
          case 5:
            unint64_t v17 = v3[1] + 4;
            if (v6 < v17) {
              goto LABEL_98;
            }
            goto LABEL_6;
          default:
            goto LABEL_98;
        }
        goto LABEL_7;
    }
  }
}

void protocol witness for ProtobufEncodableMessage.encode(to:) in conformance MeshGradient._Paint(void *a1)
{
}

uint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance MeshGradient._Paint@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return MeshGradient._Paint.init(from:)(a1, a2);
}

uint64_t MeshGradient.Locations.encode(to:)(uint64_t result)
{
  uint64_t v2 = v1;
  uint64_t v3 = (void *)result;
  v46[5] = *MEMORY[0x263EF8340];
  uint64_t v44 = *(void *)v2;
  uint64_t v4 = *(void *)(*(void *)v2 + 16);
  if (v2[8])
  {
    if (v4)
    {
      for (unint64_t i = (uint64_t *)(swift_bridgeObjectRetain() + 64); ; i += 5)
      {
        uint64_t v6 = *(i - 4);
        uint64_t v7 = *(i - 3);
        uint64_t v8 = *(i - 2);
        uint64_t v9 = *(i - 1);
        uint64_t v10 = *i;
        int64_t v11 = v3[1];
        int64_t v12 = v3[2];
        if (v11 >= v12)
        {
          int64_t v17 = v11 + 1;
          if (__OFADD__(v11, 1)) {
            goto LABEL_65;
          }
          if (v12 < v17)
          {
            unint64_t v18 = (unsigned char *)ProtobufEncoder.growBufferSlow(to:)(v17);
          }
          else
          {
            v3[1] = v17;
            unint64_t v18 = (unsigned char *)(*v3 + v11);
          }
          *unint64_t v18 = 18;
          int64_t v13 = v3[1];
        }
        else
        {
          *(unsigned char *)(*v3 + v11) = 18;
          int64_t v13 = v11 + 1;
          v3[1] = v11 + 1;
        }
        uint64_t v14 = (void *)v3[3];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
        }
        unint64_t v16 = v14[2];
        unint64_t v15 = v14[3];
        if (v16 >= v15 >> 1) {
          uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v16 + 1, 1, v14);
        }
        void v14[2] = v16 + 1;
        v14[v16 + 4] = v13;
        v3[3] = v14;
        if (__OFADD__(v13, 1)) {
          break;
        }
        v3[1] = v13 + 1;
        v46[0] = v6;
        v46[1] = v7;
        void v46[2] = v8;
        v46[3] = v9;
        _OWORD v46[4] = v10;
        closure #1 in closure #2 in MeshGradient.Locations.encode(to:)((float *)v46, v3);
        ProtobufEncoder.endLengthDelimited()();
        if (!--v4) {
          return swift_bridgeObjectRelease();
        }
      }
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
    }
  }
  else if (v4)
  {
    swift_bridgeObjectRetain();
    for (uint64_t j = 0; j != v4; ++j)
    {
      uint64_t v45 = *(void *)(v44 + 8 * j + 32);
      int64_t v20 = v3[1];
      int64_t v21 = v3[2];
      if (v20 >= v21)
      {
        int64_t v36 = v20 + 1;
        if (__OFADD__(v20, 1)) {
          goto LABEL_66;
        }
        if (v21 < v36)
        {
          int v37 = (unsigned char *)ProtobufEncoder.growBufferSlow(to:)(v36);
        }
        else
        {
          v3[1] = v36;
          int v37 = (unsigned char *)(*v3 + v20);
        }
        unsigned char *v37 = 10;
        int64_t v22 = v3[1];
      }
      else
      {
        *(unsigned char *)(*v3 + v20) = 10;
        int64_t v22 = v20 + 1;
        v3[1] = v20 + 1;
      }
      unint64_t v23 = (void *)v3[3];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23[2] + 1, 1, v23);
      }
      unint64_t v25 = v23[2];
      unint64_t v24 = v23[3];
      uint64_t v26 = v45;
      if (v25 >= v24 >> 1)
      {
        int v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v24 > 1), v25 + 1, 1, v23);
        uint64_t v26 = v45;
        unint64_t v23 = v38;
      }
      v23[2] = v25 + 1;
      v23[v25 + 4] = v22;
      v3[3] = v23;
      int64_t v27 = v22 + 1;
      if (__OFADD__(v22, 1)) {
        goto LABEL_62;
      }
      v3[1] = v27;
      if (*(float *)&v26 != 0.0)
      {
        int64_t v28 = v3[2];
        if (v27 >= v28)
        {
          int64_t v39 = v22 + 2;
          if (__OFADD__(v27, 1)) {
            goto LABEL_67;
          }
          if (v28 < v39)
          {
            float v40 = (unsigned char *)ProtobufEncoder.growBufferSlow(to:)(v39);
            uint64_t v26 = v45;
          }
          else
          {
            v3[1] = v39;
            float v40 = (unsigned char *)(*v3 + v27);
          }
          *float v40 = 13;
          uint64_t v29 = v3[1];
          int64_t v30 = v29 + 4;
          if (__OFADD__(v29, 4)) {
            goto LABEL_63;
          }
        }
        else
        {
          *(unsigned char *)(*v3 + v27) = 13;
          uint64_t v29 = v22 + 2;
          v3[1] = v22 + 2;
          int64_t v30 = v22 + 6;
          if (__OFADD__(v22 + 2, 4)) {
            goto LABEL_63;
          }
        }
        if (v3[2] < v30)
        {
          int v43 = (_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v30);
          HIDWORD(v26) = HIDWORD(v45);
          _DWORD *v43 = v45;
        }
        else
        {
          v3[1] = v30;
          *(_DWORD *)(*v3 + v29) = v26;
        }
      }
      int v31 = HIDWORD(v26);
      if (*((float *)&v26 + 1) != 0.0)
      {
        int64_t v32 = v3[1];
        int64_t v33 = v3[2];
        if (v32 >= v33)
        {
          int64_t v41 = v32 + 1;
          if (__OFADD__(v32, 1)) {
            goto LABEL_68;
          }
          if (v33 < v41)
          {
            int v42 = (unsigned char *)ProtobufEncoder.growBufferSlow(to:)(v41);
          }
          else
          {
            v3[1] = v41;
            int v42 = (unsigned char *)(*v3 + v32);
          }
          unsigned char *v42 = 21;
          int64_t v34 = v3[1];
          int64_t v35 = v34 + 4;
          if (__OFADD__(v34, 4)) {
            goto LABEL_64;
          }
        }
        else
        {
          *(unsigned char *)(*v3 + v32) = 21;
          int64_t v34 = v32 + 1;
          v3[1] = v34;
          int64_t v35 = v34 + 4;
          if (__OFADD__(v34, 4)) {
            goto LABEL_64;
          }
        }
        if (v3[2] >= v35)
        {
          v3[1] = v35;
          *(_DWORD *)(*v3 + v34) = v31;
        }
        else
        {
          *(_DWORD *)ProtobufEncoder.growBufferSlow(to:)(v35) = v31;
        }
      }
      ProtobufEncoder.endLengthDelimited()();
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

float *closure #1 in closure #2 in MeshGradient.Locations.encode(to:)(float *result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = 13;
  while (1)
  {
    float v5 = *v3;
    if (*v3 != 0.0) {
      break;
    }
LABEL_4:
    ++v3;
    v4 += 8;
    if (v4 == 93) {
      return result;
    }
  }
  uint64_t v6 = a2[1];
  uint64_t v7 = a2[2];
  if (v6 < v7)
  {
    *(unsigned char *)(*a2 + v6) = v4;
    uint64_t v8 = v6 + 1;
    a2[1] = v8;
    double result = (float *)(v8 + 4);
    if (__OFADD__(v8, 4)) {
      goto LABEL_18;
    }
    goto LABEL_8;
  }
  double result = (float *)(v6 + 1);
  if (__OFADD__(v6, 1)) {
    goto LABEL_19;
  }
  if (v7 < (uint64_t)result)
  {
    uint64_t v9 = (unsigned char *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
  }
  else
  {
    a2[1] = result;
    uint64_t v9 = (unsigned char *)(*a2 + v6);
  }
  unsigned char *v9 = v4 & 0x7D;
  uint64_t v8 = a2[1];
  double result = (float *)(v8 + 4);
  if (!__OFADD__(v8, 4))
  {
LABEL_8:
    if (a2[2] >= (uint64_t)result)
    {
      a2[1] = result;
      double result = (float *)(*a2 + v8);
    }
    else
    {
      double result = (float *)ProtobufEncoder.growBufferSlow(to:)((int64_t)result);
    }
    *double result = v5;
    goto LABEL_4;
  }
LABEL_18:
  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

uint64_t MeshGradient.Locations.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v5 = a1[1];
  unint64_t v6 = a1[2];
  uint64_t v7 = (void *)MEMORY[0x263F8EE78];
  uint64_t v8 = (void *)MEMORY[0x263F8EE78];
  while (1)
  {
    if (v5 >= v6)
    {
      a1[3] = 0;
      uint64_t v43 = v7[2];
      uint64_t result = swift_bridgeObjectRelease();
      if (!v43) {
        uint64_t v7 = v8;
      }
      *(void *)a2 = v7;
      *(unsigned char *)(a2 + 8) = v43 != 0;
      return result;
    }
    unint64_t v10 = a1[3];
    if (v10)
    {
      unint64_t v11 = a1[4];
      if (v5 < v11) {
        goto LABEL_12;
      }
      if (v11 < v5) {
        goto LABEL_61;
      }
      a1[3] = 0;
    }
    unint64_t v10 = ProtobufDecoder.decodeVarint()();
    if (v2) {
      goto LABEL_62;
    }
    if (v10 < 8) {
      goto LABEL_61;
    }
LABEL_12:
    if (v10 >> 3 == 2) {
      break;
    }
    if (v10 >> 3 != 1)
    {
      switch(v10 & 7)
      {
        case 0uLL:
          ProtobufDecoder.decodeVarint()();
          if (v2) {
            goto LABEL_62;
          }
          goto LABEL_4;
        case 1uLL:
          unint64_t v9 = a1[1] + 8;
          if (v6 >= v9) {
            goto LABEL_3;
          }
          goto LABEL_61;
        case 2uLL:
          uint64_t v42 = ProtobufDecoder.decodeVarint()();
          if (v2) {
            goto LABEL_62;
          }
          if (v42 < 0) {
            goto LABEL_75;
          }
          unint64_t v9 = a1[1] + v42;
          if (v6 < v9) {
            goto LABEL_61;
          }
LABEL_3:
          a1[1] = v9;
          break;
        case 5uLL:
          unint64_t v9 = a1[1] + 4;
          if (v6 < v9) {
            goto LABEL_61;
          }
          goto LABEL_3;
        default:
          goto LABEL_61;
      }
      goto LABEL_4;
    }
    if ((v10 & 7) != 2) {
      goto LABEL_61;
    }
    int64_t v12 = (void *)a1[5];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      int64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
    }
    unint64_t v14 = v12[2];
    unint64_t v13 = v12[3];
    if (v14 >= v13 >> 1) {
      int64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v13 > 1), v14 + 1, 1, v12);
    }
    _DWORD v12[2] = v14 + 1;
    v12[v14 + 4] = v6;
    a1[5] = v12;
    uint64_t v15 = ProtobufDecoder.decodeVarint()();
    if (v2) {
      goto LABEL_62;
    }
    if (v15 < 0)
    {
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      __break(1u);
LABEL_72:
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
      __break(1u);
      uint64_t v45 = specialized _ArrayBuffer._consumeAndCreateNew()((void *)a2);
      uint64_t v46 = v45[2];
      if (v46) {
        goto LABEL_68;
      }
      __break(1u);
      uint64_t v45 = (void *)a1[5];
      if (v45[2])
      {
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v46 = v45[2];
          if (v46)
          {
LABEL_68:
            uint64_t v47 = v46 - 1;
            uint64_t v48 = v45[v47 + 4];
            v45[2] = v47;
            swift_bridgeObjectRelease();
            uint64_t result = swift_bridgeObjectRelease();
            a1[5] = v45;
            a1[2] = v48;
            return result;
          }
LABEL_79:
          __break(1u);
          JUMPOUT(0x24602773CLL);
        }
      }
      else
      {
        __break(1u);
      }
      uint64_t v45 = specialized _ArrayBuffer._consumeAndCreateNew()(v45);
      uint64_t v46 = v45[2];
      if (v46) {
        goto LABEL_68;
      }
      goto LABEL_79;
    }
    unint64_t v17 = a1[1] + v15;
    if (v6 < v17) {
      goto LABEL_61;
    }
    a1[2] = v17;
    closure #1 in MeshGradient.Locations.init(from:)((unint64_t)a1, v49, v16);
    unint64_t v18 = (void *)a1[5];
    if (!v18[2]) {
      goto LABEL_71;
    }
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      uint64_t v19 = v18[2];
      if (!v19) {
        goto LABEL_73;
      }
    }
    else
    {
      unint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew()(v18);
      uint64_t v19 = v18[2];
      if (!v19) {
        goto LABEL_73;
      }
    }
    uint64_t v20 = v19 - 1;
    uint64_t v21 = v18[v20 + 4];
    v18[2] = v20;
    a1[5] = v18;
    a1[2] = v21;
    uint64_t v22 = v49[0];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
    }
    unint64_t v24 = v8[2];
    unint64_t v23 = v8[3];
    if (v24 >= v23 >> 1) {
      uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v23 > 1), v24 + 1, 1, v8);
    }
    long long v8[2] = v24 + 1;
    v8[v24 + 4] = v22;
LABEL_4:
    unint64_t v5 = a1[1];
    unint64_t v6 = a1[2];
  }
  if ((v10 & 7) != 2) {
    goto LABEL_61;
  }
  unint64_t v25 = (void *)a1[5];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25[2] + 1, 1, v25);
  }
  unint64_t v27 = v25[2];
  unint64_t v26 = v25[3];
  if (v27 >= v26 >> 1) {
    unint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v26 > 1), v27 + 1, 1, v25);
  }
  void v25[2] = v27 + 1;
  v25[v27 + 4] = v6;
  a1[5] = v25;
  uint64_t v28 = ProtobufDecoder.decodeVarint()();
  if (v2) {
    goto LABEL_62;
  }
  if (v28 < 0) {
    goto LABEL_70;
  }
  unint64_t v29 = a1[1] + v28;
  if (v6 >= v29)
  {
    a1[2] = v29;
    closure #2 in MeshGradient.Locations.init(from:)((unint64_t)a1, v49);
    int64_t v30 = (void *)a1[5];
    if (!v30[2]) {
      goto LABEL_72;
    }
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      uint64_t v31 = v30[2];
      if (!v31) {
        goto LABEL_74;
      }
    }
    else
    {
      int64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew()(v30);
      uint64_t v31 = v30[2];
      if (!v31) {
        goto LABEL_74;
      }
    }
    uint64_t v32 = v31 - 1;
    uint64_t v33 = v30[v32 + 4];
    uint64_t v30[2] = v32;
    a1[5] = v30;
    a1[2] = v33;
    uint64_t v34 = v49[0];
    uint64_t v35 = v49[1];
    uint64_t v36 = v49[2];
    uint64_t v37 = v49[3];
    uint64_t v38 = v49[4];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
    }
    unint64_t v40 = v7[2];
    unint64_t v39 = v7[3];
    if (v40 >= v39 >> 1) {
      uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v39 > 1), v40 + 1, 1, v7);
    }
    _OWORD v7[2] = v40 + 1;
    int64_t v41 = &v7[5 * v40];
    v41[4] = v34;
    Swift::UInt v41[5] = v35;
    void v41[6] = v36;
    v41[7] = v37;
    v41[8] = v38;
    goto LABEL_4;
  }
LABEL_61:
  lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
  swift_allocError();
  swift_willThrow();
LABEL_62:
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

unint64_t closure #1 in MeshGradient.Locations.init(from:)@<X0>(unint64_t result@<X0>, void *a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v4 = (void *)result;
  unint64_t v6 = *(void *)(result + 8);
  unint64_t v7 = *(void *)(result + 16);
  v12.n128_u64[0] = 0;
  if (v6 >= v7)
  {
LABEL_41:
    _OWORD v4[3] = 0;
    *a2 = v12.n128_u64[0];
    return result;
  }
  a3.n128_u64[0] = 0;
  __n128 v12 = a3;
  while (1)
  {
    uint64_t result = v4[3];
    if (result)
    {
      unint64_t v8 = v4[4];
      if (v6 < v8) {
        goto LABEL_9;
      }
      if (v8 < v6) {
        break;
      }
      _OWORD v4[3] = 0;
    }
    uint64_t result = ProtobufDecoder.decodeVarint()();
    if (v3) {
      return result;
    }
    if (result <= 7) {
      break;
    }
LABEL_9:
    if (result >> 3 == 2)
    {
      if ((result & 7) == 2)
      {
        uint64_t result = ProtobufDecoder.decodeVarint()();
        if (v3) {
          return result;
        }
        if ((result & 0x8000000000000000) != 0) {
          goto LABEL_45;
        }
        unint64_t v10 = (unsigned __int32 *)v4[1];
        if (v7 < (unint64_t)v10 + result) {
          break;
        }
        _OWORD v4[3] = 21;
        v4[4] = (char *)v10 + result;
      }
      else
      {
        if ((result & 7) != 5) {
          break;
        }
        unint64_t v10 = (unsigned __int32 *)v4[1];
      }
      unint64_t v6 = (unint64_t)(v10 + 1);
      if (v7 < (unint64_t)(v10 + 1)) {
        break;
      }
      __n128 v11 = v12;
      v11.n128_u32[1] = *v10;
    }
    else
    {
      if (result >> 3 != 1)
      {
        switch(result & 7)
        {
          case 0uLL:
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v3) {
              return result;
            }
            unint64_t v6 = v4[1];
            goto LABEL_40;
          case 1uLL:
            unint64_t v6 = v4[1] + 8;
            goto LABEL_38;
          case 2uLL:
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v3) {
              return result;
            }
            if ((result & 0x8000000000000000) != 0) {
              goto LABEL_46;
            }
            unint64_t v6 = v4[1] + result;
LABEL_38:
            if (v7 >= v6) {
              goto LABEL_39;
            }
            goto LABEL_42;
          case 5uLL:
            unint64_t v6 = v4[1] + 4;
            goto LABEL_38;
          default:
            goto LABEL_42;
        }
      }
      if ((result & 7) == 2)
      {
        uint64_t result = ProtobufDecoder.decodeVarint()();
        if (v3) {
          return result;
        }
        if ((result & 0x8000000000000000) != 0)
        {
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
          JUMPOUT(0x246027998);
        }
        unint64_t v9 = (unsigned __int32 *)v4[1];
        if (v7 < (unint64_t)v9 + result) {
          break;
        }
        _OWORD v4[3] = 13;
        v4[4] = (char *)v9 + result;
      }
      else
      {
        if ((result & 7) != 5) {
          break;
        }
        unint64_t v9 = (unsigned __int32 *)v4[1];
      }
      unint64_t v6 = (unint64_t)(v9 + 1);
      if (v7 < (unint64_t)(v9 + 1)) {
        break;
      }
      __n128 v11 = v12;
      v11.n128_u32[0] = *v9;
    }
    __n128 v12 = v11;
LABEL_39:
    v4[1] = v6;
LABEL_40:
    unint64_t v7 = v4[2];
    if (v6 >= v7) {
      goto LABEL_41;
    }
  }
LABEL_42:
  lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
  swift_allocError();
  return swift_willThrow();
}

unint64_t closure #2 in MeshGradient.Locations.init(from:)@<X0>(unint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (void *)result;
  uint64_t v19 = 0;
  long long v17 = 0u;
  long long v18 = 0u;
  unint64_t v5 = *(void *)(result + 8);
  unint64_t v6 = *(void *)(result + 16);
  uint64_t v7 = 0;
  if (v5 < v6)
  {
    while (1)
    {
      unint64_t v12 = v3[3];
      if (!v12) {
        goto LABEL_12;
      }
      unint64_t v13 = v3[4];
      if (v5 >= v13) {
        break;
      }
LABEL_14:
      unint64_t v14 = v12 & 7;
      if (v12 - 8 > 0x4F)
      {
        switch(v12 & 7)
        {
          case 0uLL:
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return result;
            }
            unint64_t v5 = v3[1];
            break;
          case 1uLL:
            unint64_t v5 = v3[1] + 8;
            goto LABEL_5;
          case 2uLL:
            uint64_t result = ProtobufDecoder.decodeVarint()();
            if (v2) {
              return result;
            }
            if ((result & 0x8000000000000000) != 0) {
              goto LABEL_35;
            }
            unint64_t v5 = v3[1] + result;
LABEL_5:
            if (v6 < v5) {
              goto LABEL_31;
            }
            v3[1] = v5;
            break;
          case 5uLL:
            unint64_t v5 = v3[1] + 4;
            goto LABEL_5;
          default:
            goto LABEL_31;
        }
      }
      else
      {
        if (v14 == 2)
        {
          uint64_t result = ProtobufDecoder.decodeVarint()();
          if (v2) {
            return result;
          }
          if ((result & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_35:
            __break(1u);
            JUMPOUT(0x246027BCCLL);
          }
          uint64_t v15 = (int *)v3[1];
          if (v6 < (unint64_t)v15 + result)
          {
LABEL_31:
            lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
            swift_allocError();
            return swift_willThrow();
          }
          v3[3] = v12 & 0xFFFFFFFFFFFFFFF8 | 5;
          v3[4] = (char *)v15 + result;
        }
        else
        {
          if (v14 != 5) {
            goto LABEL_31;
          }
          uint64_t v15 = (int *)v3[1];
        }
        unint64_t v5 = (unint64_t)(v15 + 1);
        if (v6 < (unint64_t)(v15 + 1)) {
          goto LABEL_31;
        }
        int v16 = *v15;
        v3[1] = v5;
        *((_DWORD *)&v17 + (v12 >> 3) - 1) = v16;
      }
      unint64_t v6 = v3[2];
      if (v5 >= v6)
      {
        uint64_t v10 = *((void *)&v17 + 1);
        uint64_t v11 = v17;
        uint64_t v8 = *((void *)&v18 + 1);
        uint64_t v9 = v18;
        uint64_t v7 = v19;
        goto LABEL_3;
      }
    }
    if (v13 < v5) {
      goto LABEL_31;
    }
    v3[3] = 0;
LABEL_12:
    uint64_t result = ProtobufDecoder.decodeVarint()();
    if (v2) {
      return result;
    }
    unint64_t v12 = result;
    if (result <= 7) {
      goto LABEL_31;
    }
    goto LABEL_14;
  }
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
LABEL_3:
  v3[3] = 0;
  *a2 = v11;
  a2[1] = v10;
  a2[2] = v9;
  a2[3] = v8;
  a2[4] = v7;
  return result;
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance MeshGradient.Locations(uint64_t a1)
{
  return MeshGradient.Locations.encode(to:)(a1);
}

uint64_t protocol witness for ProtobufDecodableMessage.init(from:) in conformance MeshGradient.Locations@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return MeshGradient.Locations.init(from:)(a1, a2);
}

uint64_t specialized static MeshGradient.BezierPoint.== infix(_:_:)(float32x2_t *a1, float32x2_t *a2)
{
  int32x2_t v2 = vceq_f32(*a1, *a2);
  if ((v2.i32[0] & v2.i32[1] & 1) == 0) {
    return 0;
  }
  int32x2_t v3 = vceq_f32(a1[1], a2[1]);
  if ((v3.i32[0] & v3.i32[1] & 1) == 0) {
    return 0;
  }
  int32x2_t v4 = vceq_f32(a1[2], a2[2]);
  if ((v4.i32[0] & v4.i32[1] & 1) == 0) {
    return 0;
  }
  int32x2_t v5 = vceq_f32(a1[3], a2[3]);
  if ((v5.i32[0] & v5.i32[1] & 1) == 0) {
    return 0;
  }
  int32x2_t v6 = vceq_f32(a1[4], a2[4]);
  return v6.i32[0] & v6.i32[1] & 1;
}

uint64_t specialized static MeshGradient._Paint.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int32x2_t v4 = *(float32x2_t **)a1;
  int32x2_t v5 = *(float32x4_t **)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  int v8 = *(_DWORD *)(a1 + 56);
  uint64_t v9 = *(float32x2_t **)a2;
  uint64_t v10 = *(float32x4_t **)(a2 + 16);
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v11 = *(void *)(a2 + 48);
  int v13 = *(_DWORD *)(a2 + 56);
  if ((*(unsigned char *)(a1 + 8) & 1) == 0)
  {
    if (*(unsigned char *)(a2 + 8)) {
      return 0;
    }
    float32x4_t v16 = *(float32x4_t *)(a2 + 24);
    float32x4_t v17 = *(float32x4_t *)(a1 + 24);
    if ((specialized static Array<A>.== infix(_:_:)(v4, v9) & 1) == 0) {
      return 0;
    }
LABEL_7:
    specialized static Array<A>.== infix(_:_:)(v5, v10);
    return v14 & (v6 == v11) & (v8 == v13) & vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_f32(v17, v16)), 0xFuLL))) & (v7 == v12);
  }
  if (*(unsigned char *)(a2 + 8))
  {
    float32x4_t v16 = *(float32x4_t *)(a2 + 24);
    float32x4_t v17 = *(float32x4_t *)(a1 + 24);
    if (specialized static Array<A>.== infix(_:_:)((uint64_t)v4, (uint64_t)v9)) {
      goto LABEL_7;
    }
  }
  return 0;
}

uint64_t specialized static MeshGradient.Locations.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int32x2_t v4 = *(float32x2_t **)a1;
  int32x2_t v5 = *(float32x2_t **)a2;
  char v6 = *(unsigned char *)(a2 + 8);
  if (*(unsigned char *)(a1 + 8))
  {
    if (v6) {
      return specialized static Array<A>.== infix(_:_:)((uint64_t)v4, (uint64_t)v5);
    }
    return 0;
  }
  if (v6) {
    return 0;
  }
  return specialized static Array<A>.== infix(_:_:)(v4, v5);
}

BOOL specialized static MeshGradient.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  BOOL result = 0;
  if (*(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8))
  {
    int32x2_t v4 = *(float32x2_t **)(a1 + 16);
    int32x2_t v5 = *(float32x4_t **)(a1 + 32);
    char v6 = *(unsigned char *)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 48);
    int v8 = *(unsigned __int8 *)(a1 + 56);
    int v9 = *(unsigned __int8 *)(a1 + 57);
    uint64_t v10 = *(float32x4_t **)(a2 + 32);
    char v11 = *(unsigned char *)(a2 + 40);
    uint64_t v12 = *(void *)(a2 + 48);
    int v13 = *(unsigned __int8 *)(a2 + 56);
    int v14 = *(unsigned __int8 *)(a2 + 57);
    if (*(unsigned char *)(a1 + 24))
    {
      if ((*(unsigned char *)(a2 + 24) & 1) == 0
        || (specialized static Array<A>.== infix(_:_:)((uint64_t)v4, *(void *)(a2 + 16)) & 1) == 0)
      {
        return 0;
      }
    }
    else if ((*(unsigned char *)(a2 + 24) & 1) != 0 {
           || (specialized static Array<A>.== infix(_:_:)(v4, *(float32x2_t **)(a2 + 16)) & 1) == 0)
    }
    {
      return 0;
    }
    if (v6)
    {
      if ((v11 & 1) == 0) {
        return 0;
      }
      v15.n128_u64[0] = specialized static Array<A>.== infix(_:_:)(v5, v10);
      if ((v16 & 1) == 0) {
        return 0;
      }
    }
    else
    {
      if (v11) {
        return 0;
      }
      swift_bridgeObjectRetain();
      uint64_t v17 = swift_bridgeObjectRetain();
      char v18 = specialized static Array<A>.== infix(_:_:)(v17, (uint64_t)v10);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v18 & 1) == 0) {
        return 0;
      }
    }
    if (v7 == v12)
    {
      if (v8 != v13) {
        return 0;
      }
    }
    else
    {
      char v19 = (*(uint64_t (**)(uint64_t, __n128))(*(void *)v7 + 88))(v12, v15);
      BOOL result = 0;
      if (v19 & 1) == 0 || ((v8 ^ v13)) {
        return result;
      }
    }
    return v9 == v14;
  }
  return result;
}

void specialized static MeshGradient.Colors.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  if (*(unsigned char *)(a1 + 8))
  {
    if (*(unsigned char *)(a2 + 8))
    {
      int32x2_t v3 = *(float32x4_t **)a1;
      int32x2_t v4 = *(float32x4_t **)a2;
      specialized static Array<A>.== infix(_:_:)(v3, v4);
    }
  }
  else if ((*(unsigned char *)(a2 + 8) & 1) == 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = swift_bridgeObjectRetain();
    specialized static Array<A>.== infix(_:_:)(v5, v2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

uint64_t specialized MeshGradient.withResolvedColors(in:_:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, float a5, float a6, float a7, float a8)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v14 = a2[4];
  if (a2[5])
  {
    if (*(unsigned char *)(a4 + 57))
    {
      if (*(unsigned char *)(a4 + 57) == 1)
      {
        if (*(unsigned char *)(a4 + 56)) {
          int v15 = 17;
        }
        else {
          int v15 = 1;
        }
      }
      else if (*(unsigned char *)(a4 + 56))
      {
        int v15 = 19;
      }
      else
      {
        int v15 = 3;
      }
    }
    else if (*(unsigned char *)(a4 + 56))
    {
      int v15 = 16;
    }
    else
    {
      int v15 = 0;
    }
    outlined init with take of MeshGradient.Locations((uint64_t *)(a4 + 16), (uint64_t)v39);
    uint64_t v24 = *(void *)a4;
    uint64_t v25 = *(void *)(a4 + 8);
    outlined init with take of MeshGradient.Locations(v39, (uint64_t)&v40);
    uint64_t v26 = v24 * v25;
    if ((v41 & 1) == 0)
    {
      if ((unsigned __int128)(v24 * (__int128)v25) >> 64 == (v24 * v25) >> 63)
      {
        uint64_t v35 = *(void **)(a3 + 40);
        uint64_t v28 = v40 + 32;
        swift_retain();
        outlined retain of LeafLayoutEngine<_ShapeView<Rectangle, MeshGradient>>(a4);
        swift_bridgeObjectRetain();
        outlined retain of LinearGradient((uint64_t)v39);
        LODWORD(v37) = v15;
        uint64_t v33 = v35;
        uint64_t v34 = 1;
        goto LABEL_26;
      }
      goto LABEL_30;
    }
    if ((unsigned __int128)(v24 * (__int128)v25) >> 64 == (v24 * v25) >> 63)
    {
      unint64_t v27 = *(void **)(a3 + 40);
      uint64_t v28 = v40 + 32;
      swift_retain();
      outlined retain of LeafLayoutEngine<_ShapeView<Rectangle, MeshGradient>>(a4);
      swift_bridgeObjectRetain();
      outlined retain of LinearGradient((uint64_t)v39);
      LODWORD(v37) = v15;
      uint64_t v33 = v27;
      uint64_t v34 = 2;
LABEL_26:
      *(float *)&double v29 = a5;
      *(float *)&double v30 = a6;
      *(float *)&double v31 = a7;
      *(float *)&double v32 = a8;
      objc_msgSend(v33, sel_setMeshGradientType_positions_colors_count_width_background_colorSpace_flags_, v34, v28, v14 + 32, v26, v24, 2, v29, v30, v31, v32, v37);
      outlined release of LinearGradient((uint64_t)v39);
      swift_release();
      swift_bridgeObjectRelease();
      return outlined release of LeafLayoutEngine<_ShapeView<Rectangle, MeshGradient>>(a4);
    }
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v16 = a2[1];
  uint64_t v17 = *a2 * v16;
  if ((unsigned __int128)(*a2 * (__int128)v16) >> 64 != v17 >> 63)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v17 < 0)
  {
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
  }
  if ((unint64_t)(v17 + 0x800000000000000) >> 60) {
    goto LABEL_32;
  }
  uint64_t v18 = *a1;
  uint64_t v19 = a1[1];
  swift_retain();
  outlined retain of LeafLayoutEngine<_ShapeView<Rectangle, MeshGradient>>(a4);
  swift_retain();
  outlined retain of LeafLayoutEngine<_ShapeView<Rectangle, MeshGradient>>(a4);
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t isStackAllocationSafe = swift_retain();
  if (16 * v17 < 1025
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x270FA5388](isStackAllocationSafe);
    uint64_t v22 = (char *)&v39[-1] - v21;
    swift_retain();
    outlined retain of LeafLayoutEngine<_ShapeView<Rectangle, MeshGradient>>(a4);
    specialized closure #1 in MeshGradient.withResolvedColors(in:_:)((uint64_t)v22, v17, v17, v14, v18, v19, a3, a4);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v23 = swift_slowAlloc();
    swift_retain();
    outlined retain of LeafLayoutEngine<_ShapeView<Rectangle, MeshGradient>>(a4);
    specialized closure #1 in MeshGradient.withResolvedColors(in:_:)(v23, v17, v17, v14, v18, v19, a3, a4);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    MEMORY[0x24C527CC0](v23, -1, -1);
  }
  swift_release();
  outlined release of LeafLayoutEngine<_ShapeView<Rectangle, MeshGradient>>(a4);
  swift_release();
  return outlined release of LeafLayoutEngine<_ShapeView<Rectangle, MeshGradient>>(a4);
}

unint64_t instantiation function for generic protocol witness table for MeshGradient._Paint(uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type MeshGradient._Paint and conformance MeshGradient._Paint();
  unint64_t result = lazy protocol witness table accessor for type MeshGradient._Paint and conformance MeshGradient._Paint();
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t associated type witness table accessor for Animatable.AnimatableData : VectorArithmetic in MeshGradient._Paint()
{
  return lazy protocol witness table accessor for type AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>> and conformance AnimatablePair<A, B>(&lazy protocol witness table cache variable for type AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>> and conformance AnimatablePair<A, B>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>);
}

uint64_t lazy protocol witness table accessor for type AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>> and conformance AnimatablePair<A, B>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t destroy for MeshGradient()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for MeshGradient(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v3 = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = v3;
  char v4 = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for MeshGradient(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  char v4 = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  char v5 = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  return a1;
}

uint64_t assignWithTake for MeshGradient(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v4 = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  char v5 = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_release();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  return a1;
}

uint64_t getEnumTagSinglePayload for MeshGradient(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 58)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MeshGradient(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 56) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 58) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 48) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 58) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MeshGradient()
{
  return &type metadata for MeshGradient;
}

ValueMetadata *type metadata accessor for MeshGradient.Locations()
{
  return &type metadata for MeshGradient.Locations;
}

ValueMetadata *type metadata accessor for MeshGradient.Colors()
{
  return &type metadata for MeshGradient.Colors;
}

ValueMetadata *type metadata accessor for MeshGradient.BezierPoint()
{
  return &type metadata for MeshGradient.BezierPoint;
}

uint64_t initializeWithCopy for MeshGradient._Paint(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MeshGradient._Paint(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  return a1;
}

uint64_t assignWithTake for MeshGradient._Paint(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for MeshGradient._Paint(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 60)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MeshGradient._Paint(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 56) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 60) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 60) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MeshGradient._Paint()
{
  return &type metadata for MeshGradient._Paint;
}

uint64_t outlined init with take of MeshGradient.Locations(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *(unsigned char *)(a2 + 8) = *((unsigned char *)a1 + 8);
  *(void *)a2 = v2;
  return a2;
}

uint64_t CorePlatformImage.system.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_system);
  swift_beginAccess();
  return *v1;
}

uint64_t CorePlatformImage.system.setter(char a1)
{
  char v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_system);
  uint64_t result = swift_beginAccess();
  *char v3 = a1;
  return result;
}

uint64_t (*CorePlatformImage.system.modify())()
{
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

id CorePlatformImage.kitImage.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_kitImage);
  swift_beginAccess();
  uint64_t v2 = *v1;

  return v2;
}

void CorePlatformImage.kitImage.setter(void *a1)
{
  char v3 = (void **)(v1 + OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_kitImage);
  swift_beginAccess();
  char v4 = *v3;
  *char v3 = a1;
}

uint64_t (*CorePlatformImage.kitImage.modify())()
{
  return DisplayList.GraphicsRenderer.platformViewMode.modify;
}

uint64_t CorePlatformImage.isTemplate.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_isTemplate);
  swift_beginAccess();
  return *v1;
}

uint64_t CorePlatformImage.isTemplate.setter(char a1)
{
  char v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_isTemplate);
  uint64_t result = swift_beginAccess();
  *char v3 = a1;
  return result;
}

uint64_t (*CorePlatformImage.isTemplate.modify())()
{
  return CAHostingLayer.propertiesNeedingUpdate.modify;
}

id CorePlatformImage.__allocating_init(system:kitImage:)(unsigned __int8 a1, void *a2)
{
  char v5 = objc_allocWithZone(v2);
  v5[OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_system] = a1;
  *(void *)&v5[OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_kitImage] = a2;
  char v6 = v5;
  id v7 = a2;
  v6[OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_isTemplate] = _CorePlatformImageIsTemplate(a1, v7);

  v10.receiver = v6;
  v10.super_class = v2;
  id v8 = objc_msgSendSuper2(&v10, sel_init);

  return v8;
}

id CorePlatformImage.init(system:kitImage:)(unsigned __int8 a1, void *a2)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  v2[OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_system] = a1;
  *(void *)&v2[OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_kitImage] = a2;
  char v6 = v2;
  id v7 = a2;
  v6[OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_isTemplate] = _CorePlatformImageIsTemplate(a1, v7);

  v10.receiver = v6;
  v10.super_class = ObjectType;
  id v8 = objc_msgSendSuper2(&v10, sel_init);

  return v8;
}

id CorePlatformImage.__allocating_init(system:cgImage:scale:orientation:)(unsigned __int8 a1, void *a2, unsigned __int8 a3, double a4)
{
  uint64_t v7 = a1;
  KitImage = _CorePlatformImageMakeKitImage(a4, v7, (uint64_t)a2, a3);
  int v9 = objc_allocWithZone(v4);
  v9[OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_system] = a1;
  *(void *)&v9[OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_kitImage] = KitImage;
  objc_super v10 = v9;
  id v11 = KitImage;
  v10[OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_isTemplate] = _CorePlatformImageIsTemplate(v7, v11);

  v14.receiver = v10;
  v14.super_class = v4;
  id v12 = objc_msgSendSuper2(&v14, sel_init);

  return v12;
}

id CorePlatformImage.cgImage.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_system);
  swift_beginAccess();
  uint64_t v2 = *v1;
  char v3 = (void **)(v0 + OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_kitImage);
  swift_beginAccess();
  CGImage = (void *)_CorePlatformImageGetCGImage(v2, *v3);

  return CGImage;
}

double CorePlatformImage.size.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_system);
  swift_beginAccess();
  uint64_t v2 = *v1;
  char v3 = (void **)(v0 + OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_kitImage);
  swift_beginAccess();
  return _CorePlatformImageGetSize(v2, *v3);
}

uint64_t CorePlatformImage.scale.getter()
{
  return CorePlatformImage.scale.getter((uint64_t (*)(uint64_t, void))_CorePlatformImageGetScale);
}

uint64_t CorePlatformImage.imageOrientation.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_system);
  swift_beginAccess();
  uint64_t v2 = *v1;
  char v3 = (void **)(v0 + OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_kitImage);
  swift_beginAccess();
  return _CorePlatformImageGetImageOrientation(v2, *v3);
}

uint64_t CorePlatformImage.baselineOffsetFromBottom.getter()
{
  return CorePlatformImage.scale.getter((uint64_t (*)(uint64_t, void))_CorePlatformImageGetBaselineOffsetFromBottom);
}

uint64_t CorePlatformImage.scale.getter(uint64_t (*a1)(uint64_t, void))
{
  char v3 = (unsigned __int8 *)(v1 + OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_system);
  swift_beginAccess();
  uint64_t v4 = *v3;
  char v5 = (void *)(v1 + OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_kitImage);
  swift_beginAccess();
  return a1(v4, *v5);
}

double CorePlatformImage.alignmentRect.getter()
{
  return _CorePlatformImageGetAlignmentRect();
}

void key path getter for CorePlatformImage.alignmentRect : CorePlatformImage(uint64_t a1@<X8>)
{
  swift_beginAccess();
  swift_beginAccess();
  *(double *)a1 = _CorePlatformImageGetAlignmentRect();
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v4;
}

uint64_t key path setter for CorePlatformImage.alignmentRect : CorePlatformImage(double *a1, uint64_t *a2)
{
  double v2 = *a1;
  double v3 = a1[1];
  double v4 = a1[2];
  double v5 = a1[3];
  uint64_t v6 = *a2;
  uint64_t v7 = (unsigned __int8 *)(*a2 + OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_system);
  swift_beginAccess();
  uint64_t v8 = *v7;
  int v9 = (void *)(v6 + OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_kitImage);
  swift_beginAccess();
  return _CorePlatformImageSetAlignmentRect(v8, *v9, v2, v3, v4, v5);
}

uint64_t CorePlatformImage.alignmentRect.setter(double a1, double a2, double a3, double a4)
{
  int v9 = (unsigned __int8 *)(v4 + OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_system);
  swift_beginAccess();
  uint64_t v10 = *v9;
  id v11 = (void *)(v4 + OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_kitImage);
  swift_beginAccess();
  return _CorePlatformImageSetAlignmentRect(v10, *v11, a1, a2, a3, a4);
}

void (*CorePlatformImage.alignmentRect.modify(double **a1))(double **a1)
{
  double v3 = (double *)malloc(0x68uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_system;
  *((void *)v3 + 10) = v1;
  *((void *)v3 + 11) = v4;
  swift_beginAccess();
  *((void *)v3 + 12) = OBJC_IVAR____TtC7SwiftUI17CorePlatformImage_kitImage;
  swift_beginAccess();
  *double v3 = _CorePlatformImageGetAlignmentRect();
  *((void *)v3 + 1) = v5;
  *((void *)v3 + 2) = v6;
  *((void *)v3 + 3) = v7;
  return CorePlatformImage.alignmentRect.modify;
}

void CorePlatformImage.alignmentRect.modify(double **a1)
{
  uint64_t v1 = *a1;
  _CorePlatformImageSetAlignmentRect(*(unsigned __int8 *)(*((void *)*a1 + 10) + *((void *)*a1 + 11)), *(void *)(*((void *)*a1 + 10) + *((void *)*a1 + 12)), **a1, (*a1)[1], (*a1)[2], (*a1)[3]);

  free(v1);
}

id CorePlatformImage.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CorePlatformImage.init()()
{
}

id CorePlatformImage.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for CorePlatformImage()
{
  return self;
}

uint64_t method lookup function for CorePlatformImage(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CorePlatformImage);
}

uint64_t dispatch thunk of CorePlatformImage.__allocating_init(system:kitImage:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t Unmanaged.map<A>(_:)(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

{
  uint64_t v3;

  double v3 = a1(a3);
  swift_unknownObjectRelease();
  return v3;
}

uint64_t Unmanaged.map<A>(_:)(uint64_t (*a1)(void), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  closure #1 in Unmanaged.map<A>(_:)(a1, a4, a5, (uint64_t)&v6);
  return v6;
}

uint64_t closure #1 in Unmanaged.map<A>(_:)@<X0>(uint64_t (*a1)(void)@<X1>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  _OWORD v10[5] = a1();
  v10[2] = a2;
  v10[3] = a3;
  type metadata accessor for Optional();
  uint64_t v7 = type metadata accessor for Unmanaged();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))protocol witness for OptionSet.init(rawValue:) in conformance NSCalendarUnit, (uint64_t)v10, MEMORY[0x263F8E628], v7, v8, a4);
  return swift_unknownObjectRelease();
}

BOOL static Unmanaged.!= infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 != a2;
}

uint64_t destroy for Text.Effect.CompositionContext()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for Text.Effect.CompositionContext(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for Text.Effect.CompositionContext(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Text.Effect.CompositionContext(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for Text.Effect.CompositionContext()
{
  return &type metadata for Text.Effect.CompositionContext;
}

uint64_t Text.Effect.Composition.displacements(at:context:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *(void **)v5;
  uint64_t v7 = *(void *)(v5 + 8);
  char v8 = *(unsigned char *)(v5 + 16);
  int v9 = *(_DWORD *)(v5 + 40);
  uint64_t v10 = *(void *)(v5 + 64);
  uint64_t v15 = *a1;
  uint64_t v16 = v6;
  uint64_t v17 = v7;
  char v18 = v8;
  long long v19 = *(_OWORD *)(v5 + 24);
  int v20 = v9;
  uint64_t v21 = a2;
  uint64_t v22 = a3;
  uint64_t v23 = a4;
  uint64_t v24 = a5;
  uint64_t v25 = 0;
  uint64_t v26 = MEMORY[0x263F8EE80];
  uint64_t v27 = MEMORY[0x263F8EE80];
  uint64_t v11 = *(void *)(v10 + 16);
  if (v11)
  {
    outlined copy of Text.Layout.Line.Line(v6, v7, v8);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v12 = v10 + 64;
    do
    {
      Text.Effect.Composition.Operation.appendDisplacement(to:)((uint64_t)&v15);
      v12 += 88;
      --v11;
    }
    while (v11);
    swift_bridgeObjectRelease();
    uint64_t v13 = v26;
    uint64_t v6 = v16;
    uint64_t v7 = v17;
    char v8 = v18;
  }
  else
  {
    outlined copy of Text.Layout.Line.Line(v6, v7, v8);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    uint64_t v13 = MEMORY[0x263F8EE80];
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined consume of Text.Layout.Line.Line(v6, v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t Text.Effect.Composition.resolve(in:)(uint64_t result)
{
  uint64_t v2 = *((void *)v1 + 8);
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    uint64_t v4 = result;
    char v5 = *((unsigned char *)v1 + 16);
    long long v11 = *(long long *)((char *)v1 + 24);
    long long v12 = *v1;
    int v6 = *((_DWORD *)v1 + 10);
    swift_bridgeObjectRetain();
    uint64_t v7 = (long long *)(v2 + 64);
    do
    {
      uint64_t v8 = *((void *)v7 + 6);
      long long v9 = *(v7 - 1);
      long long v17 = *(v7 - 2);
      long long v18 = v9;
      long long v10 = v7[1];
      long long v19 = *v7;
      long long v20 = v10;
      long long v21 = v7[2];
      uint64_t v22 = v8;
      long long v13 = v12;
      char v14 = v5;
      long long v15 = v11;
      int v16 = v6;
      Text.Effect.Composition.Operation.resolve(line:in:)((uint64_t)&v13, v4);
      uint64_t v7 = (long long *)((char *)v7 + 88);
      --v3;
    }
    while (v3);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t Text.Effect.Composition.needsUpdate(at:context:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v80 = *(void *)(v6 + 16);
  if (!v80) {
    return 0;
  }
  uint64_t v7 = *a1;
  uint64_t v79 = v6 + 32;
  uint64_t v76 = a4 + 5;
  unint64_t v67 = a4 + 4;
  uint64_t v68 = a4 + 3;
  swift_bridgeObjectRetain_n();
  uint64_t v8 = 0;
  while (1)
  {
    long long v9 = (Swift::UInt64 *)(v79 + 88 * v8);
    Swift::UInt64 v11 = *v9;
    uint64_t v10 = v9[1];
    long long v12 = (void *)v9[2];
    uint64_t v13 = v9[3];
    Swift::UInt64 v14 = v9[4];
    uint64_t v15 = v9[5];
    uint64_t v16 = v9[6];
    unint64_t v17 = v9[7];
    Swift::UInt64 v18 = v9[8];
    Swift::UInt64 v19 = v9[9];
    Swift::UInt64 v20 = v9[10];
    char v83 = v14;
    uint64_t v84 = v16;
    if (v17 >> 62) {
      break;
    }
    uint64_t v77 = v8;
    v86[0] = v9[2];
    v86[1] = v13;
    char v87 = v14 & 1;
    uint64_t v88 = v15;
    uint64_t v89 = v16;
    int v90 = v17;
    Swift::UInt64 v91 = v18;
    Swift::UInt64 v92 = v19;
    Swift::UInt64 v93 = v20;
    uint64_t v85 = v7;
    uint64_t v27 = v11;
    uint64_t v28 = v12;
    long long v81 = v12;
    uint64_t v75 = v13;
    char v29 = v14;
    Swift::UInt64 v30 = v11;
    uint64_t v31 = v10;
    outlined copy of Text.Effect.Composition.Operation(v27, v10, v28, v13, v14, v15, v16, v17);
    outlined copy of Text.Effect.Composition.Operation(v30, v31, v81, v13, v29, v15, v16, v17);
    uint64_t v32 = v31;
    unint64_t v33 = v17;
    uint64_t v34 = v30;
    char v35 = Text.Effect.Composition.needsUpdate(at:context:)(&v85, a2, a3, a4, a5);
    swift_beginAccess();
    char v73 = v35;
    if (!specialized Set.contains(_:)(v30, a4[5]))
    {
      uint64_t v43 = v30;
      swift_beginAccess();
      uint64_t v44 = *v67;
      uint64_t v8 = v77;
      if (*(void *)(*v67 + 16))
      {
        uint64_t v45 = specialized __RawDictionaryStorage.find<A>(_:)(v34);
        if (v46)
        {
          uint64_t v47 = *(void **)(*(void *)(v44 + 56) + 8 * v45);
          uint64_t result = swift_endAccess();
          if (v35)
          {
            outlined consume of Text.Effect.Composition.Operation(v34, v32, v81, v75, v83, v15, v16, v33);
            outlined consume of Text.Effect.Composition.Operation(v34, v32, v81, v75, v83, v15, v16, v33);
LABEL_41:
            uint64_t v64 = 1;
LABEL_43:
            swift_bridgeObjectRelease_n();
            return v64;
          }
          uint64_t v74 = v47;
          uint64_t v48 = *(void *)(a2 + 16);
          if (v48)
          {
            uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v34);
            if (v49) {
              uint64_t v48 = *(void *)(*(void *)(a2 + 56) + 8 * result);
            }
            else {
              uint64_t v48 = 0;
            }
          }
          uint64_t v62 = v48 + v32;
          if (__OFADD__(v48, v32)) {
            goto LABEL_48;
          }
          v86[0] = v7;
          uint64_t v65 = *(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t, uint64_t, uint64_t *, uint64_t))((*MEMORY[0x263F8EED0] & *v74) + 0xD0);
          uint64_t v63 = v74;
          char v73 = v65(v34, v62, v86, a2, a3, a4, a5);

          unint64_t v50 = v33;
          outlined consume of Text.Effect.Composition.Operation(v43, v32, v81, v75, v83, v15, v16, v33);
          uint64_t v51 = v43;
          uint64_t v52 = v32;
          uint64_t v53 = v81;
          uint64_t v54 = v75;
          char v55 = v83;
          uint64_t v56 = v15;
        }
        else
        {
          swift_endAccess();
          uint64_t v58 = v34;
          uint64_t v66 = v34;
          unint64_t v50 = v33;
          outlined consume of Text.Effect.Composition.Operation(v58, v32, v81, v75, v83, v15, v16, v33);
          uint64_t v51 = v66;
          uint64_t v52 = v32;
          uint64_t v53 = v81;
          uint64_t v54 = v75;
          char v55 = v83;
          uint64_t v56 = v15;
        }
        uint64_t v57 = v16;
      }
      else
      {
        swift_endAccess();
        unint64_t v50 = v33;
        outlined consume of Text.Effect.Composition.Operation(v43, v32, v81, v75, v83, v15, v16, v33);
        uint64_t v51 = v43;
        uint64_t v52 = v32;
        uint64_t v53 = v81;
        uint64_t v54 = v75;
        char v55 = v83;
        uint64_t v56 = v15;
        uint64_t v57 = v16;
      }
      unint64_t v61 = v50;
      goto LABEL_40;
    }
    outlined consume of Text.Effect.Composition.Operation(v30, v32, v81, v75, v83, v15, v16, v33);
    outlined consume of Text.Effect.Composition.Operation(v30, v32, v81, v75, v83, v15, v16, v33);
    uint64_t v8 = v77;
    if (v35) {
      goto LABEL_41;
    }
LABEL_5:
    if (++v8 == v80)
    {
      uint64_t v64 = 0;
      goto LABEL_43;
    }
  }
  uint64_t v82 = v9[1];
  if (v17 >> 62 == 1)
  {
    outlined consume of Text.Effect.Composition.Operation(v11, v10, v12, v13, v14, v15, v16, v17);
    goto LABEL_4;
  }
  swift_beginAccess();
  uint64_t v21 = *v76;
  if (!*(void *)(*v76 + 16)) {
    goto LABEL_18;
  }
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v11);
  Swift::Int v22 = Hasher._finalize()();
  uint64_t v23 = -1 << *(unsigned char *)(v21 + 32);
  unint64_t v24 = v22 & ~v23;
  if (((*(void *)(v21 + 56 + ((v24 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v24) & 1) == 0) {
    goto LABEL_18;
  }
  uint64_t v25 = *(void *)(v21 + 48);
  if (*(void *)(v25 + 8 * v24) == v11)
  {
LABEL_4:
    outlined consume of Text.Effect.Composition.Operation(v11, v82, v12, v13, v83, v15, v84, v17);
    goto LABEL_5;
  }
  uint64_t v26 = ~v23;
  while (1)
  {
    unint64_t v24 = (v24 + 1) & v26;
    if (((*(void *)(v21 + 56 + ((v24 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v24) & 1) == 0) {
      break;
    }
    if (*(void *)(v25 + 8 * v24) == v11) {
      goto LABEL_4;
    }
  }
LABEL_18:
  swift_beginAccess();
  uint64_t v36 = *v68;
  if (!*(void *)(*v68 + 16) || (uint64_t v37 = specialized __RawDictionaryStorage.find<A>(_:)(v11), (v38 & 1) == 0))
  {
    swift_endAccess();
    goto LABEL_4;
  }
  unint64_t v39 = *(void **)(*(void *)(v36 + 56) + 8 * v37);
  uint64_t result = swift_endAccess();
  uint64_t v41 = *(void *)(a2 + 16);
  if (v41)
  {
    uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v11);
    if (v42) {
      uint64_t v41 = *(void *)(*(void *)(a2 + 56) + 8 * result);
    }
    else {
      uint64_t v41 = 0;
    }
  }
  uint64_t v59 = v41 + v82;
  if (!__OFADD__(v41, v82))
  {
    v86[0] = v7;
    uint64_t v78 = *(uint64_t (**)(Swift::UInt64, uint64_t, void *, uint64_t, uint64_t, uint64_t *, uint64_t))((*MEMORY[0x263F8EED0] & *v39) + 0xD0);
    uint64_t v60 = v39;
    char v73 = v78(v11, v59, v86, a2, a3, a4, a5);

    outlined consume of Text.Effect.Composition.Operation(v11, v82, v12, v13, v83, v15, v84, v17);
    uint64_t v51 = v11;
    uint64_t v52 = v82;
    uint64_t v53 = v12;
    uint64_t v54 = v13;
    char v55 = v83;
    uint64_t v56 = v15;
    uint64_t v57 = v84;
    unint64_t v61 = v17;
LABEL_40:
    outlined consume of Text.Effect.Composition.Operation(v51, v52, v53, v54, v55, v56, v57, v61);
    if (v73) {
      goto LABEL_41;
    }
    goto LABEL_5;
  }
  __break(1u);
LABEL_48:
  __break(1u);
  return result;
}

double Text.Effect.Composition.metrics(at:context:)(CGFloat *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v125 = a5;
  uint64_t v124 = a3;
  uint64_t v126 = a2;
  uint64_t v156 = *MEMORY[0x263EF8340];
  _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, MEMORY[0x263F8EDA0]);
  uint64_t v127 = v8;
  MEMORY[0x270FA5388](v8);
  long long v128 = (char *)v118 - v10;
  uint64_t v11 = *(void *)(v5 + 64);
  uint64_t v131 = *(void *)(v11 + 16);
  if (!v131) {
    return 0.0;
  }
  CGFloat v122 = *a1;
  uint64_t v130 = v11 + 32;
  uint64_t v13 = *(void **)v5;
  uint64_t v12 = *(void *)(v5 + 8);
  uint64_t v121 = (uint64_t *)(a4 + 40);
  uint64_t v123 = a4;
  uint64_t v120 = (uint64_t *)(a4 + 24);
  uint64_t v119 = (void (**)(char *, uint64_t))(v9 + 8);
  int v14 = *(unsigned __int8 *)(v5 + 16);
  v118[1] = v11;
  swift_bridgeObjectRetain_n();
  uint64_t v15 = 0;
  double v16 = 0.0;
  double v17 = 0.0;
  double v18 = 0.0;
  double v19 = 0.0;
  int v132 = v14;
  do
  {
    uint64_t v37 = (uint64_t *)(v130 + 88 * v15);
    uint64_t v38 = v37[1];
    uint64_t v143 = *v37;
    unint64_t v39 = (char *)v37[3];
    char v141 = (char *)v37[2];
    uint64_t v40 = v37[4];
    uint64_t v41 = v37[5];
    uint64_t v42 = v37[6];
    unint64_t v43 = v37[7];
    uint64_t v45 = v37[8];
    uint64_t v44 = v37[9];
    uint64_t v46 = v37[10];
    double v139 = v16;
    uint64_t v138 = v42;
    uint64_t v137 = v41;
    uint64_t v136 = v40;
    uint64_t v135 = v15;
    double v142 = v39;
    if (!(v43 >> 62))
    {
      Swift::UInt64 v20 = v141;
      *(void *)&buffer.CGFloat x = v141;
      *(void *)&buffer.CGFloat y = v39;
      char v149 = v40 & 1;
      uint64_t v150 = v41;
      uint64_t v151 = v42;
      int v152 = v43;
      uint64_t v153 = v45;
      uint64_t v154 = v44;
      uint64_t v155 = v46;
      originsBuffer.CGFloat x = v122;
      uint64_t v21 = v143;
      uint64_t v140 = v45;
      outlined copy of Text.Effect.Composition.Operation(v143, v38, v141, (uint64_t)v39, v40, v41, v42, v43);
      outlined copy of Text.Layout.Line.Line(v13, v12, v14);
      unint64_t v22 = v43;
      double v23 = Text.Effect.Composition.metrics(at:context:)(&originsBuffer, v126, v124, v123, v125);
      double v25 = v24;
      double v27 = v26;
      double v29 = v28;
      outlined consume of Text.Layout.Line.Line(v13, v12, v14);
      uint64_t v30 = v21;
      uint64_t v31 = v38;
      uint64_t v32 = v20;
      uint64_t v33 = (uint64_t)v142;
      char v34 = v136;
      uint64_t v35 = v137;
      uint64_t v36 = v138;
      goto LABEL_4;
    }
    if (v43 >> 62 != 1)
    {
      uint64_t v133 = v46;
      uint64_t v134 = v44;
      uint64_t v140 = v45;
      uint64_t v56 = v121;
      swift_beginAccess();
      uint64_t v57 = *v56;
      if (*(void *)(v57 + 16))
      {
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v143);
        Swift::Int v58 = Hasher._finalize()();
        unint64_t v39 = v142;
        uint64_t v59 = -1 << *(unsigned char *)(v57 + 32);
        unint64_t v60 = v58 & ~v59;
        if ((*(void *)(v57 + 56 + ((v60 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v60))
        {
          uint64_t v61 = *(void *)(v57 + 48);
          uint64_t v62 = v143;
          if (*(void *)(v61 + 8 * v60) != v143)
          {
            uint64_t v78 = ~v59;
            do
            {
              unint64_t v60 = (v60 + 1) & v78;
              if (((*(void *)(v57 + 56 + ((v60 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v60) & 1) == 0) {
                goto LABEL_41;
              }
            }
            while (*(void *)(v61 + 8 * v60) != v143);
            uint64_t v62 = v143;
          }
          uint64_t v79 = v141;
          char v80 = v136;
          uint64_t v81 = v137;
          uint64_t v82 = v138;
          outlined consume of Text.Effect.Composition.Operation(v62, v38, v141, (uint64_t)v142, v136, v137, v138, v43);
          uint64_t v49 = v62;
          uint64_t v50 = v38;
          uint64_t v51 = v79;
          uint64_t v52 = (uint64_t)v142;
          char v53 = v80;
          uint64_t v54 = v81;
          uint64_t v55 = v82;
          goto LABEL_40;
        }
      }
LABEL_41:
      unint64_t v129 = v43;
      uint64_t v84 = v120;
      swift_beginAccess();
      uint64_t v85 = *v84;
      if (*(void *)(*v84 + 16))
      {
        uint64_t v86 = v143;
        uint64_t v87 = specialized __RawDictionaryStorage.find<A>(_:)(v143);
        if (v88)
        {
          uint64_t v89 = *(void **)(*(void *)(v85 + 56) + 8 * v87);
          swift_endAccess();
          outlined copy of Text.Layout.Line.Line(v13, v12, v14);
          lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
          int v90 = v89;
          RangeSet.init()();
          if (v141 != v39)
          {
            int8x16_t v101 = v141;
            if ((uint64_t)v39 < (uint64_t)v141) {
              goto LABEL_78;
            }
            while ((uint64_t)v101 < (uint64_t)v39)
            {
              if (v14)
              {
                outlined copy of Text.Layout.Line.Line(v13, v12, 1);
                int32x4_t v102 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v13);
                if (!v102) {
                  goto LABEL_80;
                }
                long long v103 = v102;
                outlined consume of Text.Layout.Line.Line(v13, v12, 1);
              }
              else
              {
                outlined copy of Text.Layout.Line.Line(v13, v12, 0);
                outlined copy of Text.Layout.Line.Line(v13, v12, 0);

                swift_release();
                long long v103 = (const __CTLine *)v13;
              }
              long long v104 = (id)_CTLineGetRunAtIndex(v103, (CFIndex)v101);
              CFRange StringRange = CTRunGetStringRange((CTRunRef)v104);

              swift_release();
              CFIndex v106 = StringRange.location + StringRange.length;
              if (__OFADD__(StringRange.location, StringRange.length)) {
                goto LABEL_73;
              }
              unint64_t v39 = v142;
              if (v106 < StringRange.location) {
                goto LABEL_74;
              }
              *(void *)&originsBuffer.CGFloat x = StringRange.location;
              *(void *)&originsBuffer.CGFloat y = StringRange.location + StringRange.length;
              if (__OFSUB__(v106, StringRange.location)) {
                goto LABEL_75;
              }
              if (v106 != StringRange.location)
              {
                long long v107 = (void (*)(CGPoint *, void))RangeSet._ranges.modify();
                _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_1(0, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, MEMORY[0x263F8ED78]);
                RangeSet.Ranges._insert(contentsOf:)();
                v107(&buffer, 0);
              }
              ++v101;
              LOBYTE(v14) = v132;
              if (v39 == v101) {
                goto LABEL_44;
              }
            }
            goto LABEL_72;
          }
LABEL_44:
          uint64_t v91 = v126;
          uint64_t v92 = *(void *)(v126 + 16);
          if (v92)
          {
            uint64_t v93 = specialized __RawDictionaryStorage.find<A>(_:)(v143);
            if (v94) {
              uint64_t v92 = *(void *)(*(void *)(v91 + 56) + 8 * v93);
            }
            else {
              uint64_t v92 = 0;
            }
          }
          if (__OFADD__(v92, v38)) {
            goto LABEL_77;
          }
          buffer.CGFloat x = v122;
          uint64_t v108 = v143;
          long long v109 = v128;
          double v23 = (*(double (**)(uint64_t, uint64_t, char *, CGPoint *, uint64_t, uint64_t, uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & *v90) + 0xF0))(v143, v92 + v38, v128, &buffer, v91, v124, v123, v125);
          double v25 = v110;
          double v27 = v111;
          double v29 = v112;

          (*v119)(v109, v127);
          outlined consume of Text.Layout.Line.Line(v13, v12, v14);
          uint64_t v113 = v108;
          long long v114 = v141;
          uint64_t v115 = (uint64_t)v39;
          LOBYTE(v108) = v136;
          uint64_t v116 = v137;
          uint64_t v77 = v138;
          unint64_t v22 = v129;
          outlined consume of Text.Effect.Composition.Operation(v113, v38, v141, v115, v136, v137, v138, v129);
          uint64_t v30 = v143;
          uint64_t v31 = v38;
          uint64_t v32 = v114;
          uint64_t v33 = (uint64_t)v142;
          char v34 = v108;
          uint64_t v35 = v116;
LABEL_67:
          uint64_t v36 = v77;
LABEL_4:
          outlined consume of Text.Effect.Composition.Operation(v30, v31, v32, v33, v34, v35, v36, v22);
          goto LABEL_5;
        }
        swift_endAccess();
      }
      else
      {
        swift_endAccess();
        uint64_t v86 = v143;
      }
      long long v95 = v141;
      uint64_t v96 = (uint64_t)v39;
      char v97 = v136;
      uint64_t v98 = v137;
      uint64_t v99 = v138;
      unint64_t v100 = v129;
      outlined consume of Text.Effect.Composition.Operation(v86, v38, v141, v96, v136, v137, v138, v129);
      uint64_t v49 = v86;
      uint64_t v50 = v38;
      uint64_t v51 = v95;
      uint64_t v52 = (uint64_t)v142;
      char v53 = v97;
      uint64_t v54 = v98;
      uint64_t v55 = v99;
      unint64_t v83 = v100;
      goto LABEL_50;
    }
    uint64_t v47 = v143;
    if (v143 != v38)
    {
      if (v38 < v143) {
        goto LABEL_76;
      }
      uint64_t v63 = v143;
      uint64_t v64 = v46;
      uint64_t v134 = v44;
      uint64_t v140 = v45;
      unint64_t v129 = v43;
      outlined copy of Text.Layout.Line.Line(v13, v12, v14);
      double v29 = 0.0;
      CFIndex v65 = v47;
      double v27 = 0.0;
      double v25 = 0.0;
      double v23 = 0.0;
      while (v65 < v38)
      {
        if (v14)
        {
          outlined copy of Text.Layout.Line.Line(v13, v12, 1);
          unint64_t v71 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v13);
          if (!v71) {
            goto LABEL_79;
          }
          uint64_t v66 = v71;
          outlined consume of Text.Layout.Line.Line(v13, v12, 1);
        }
        else
        {
          outlined copy of Text.Layout.Line.Line(v13, v12, 0);
          outlined copy of Text.Layout.Line.Line(v13, v12, 0);

          swift_release();
          uint64_t v66 = (const __CTLine *)v13;
        }
        CFIndex v67 = v65 + 1;
        uint64_t v68 = (id)_CTLineGetRunAtIndex(v66, v65);
        buffer.CGFloat x = 0.0;
        buffer.CGFloat y = 0.0;
        CGFloat ascent = 0.0;
        CGFloat descent = 0.0;
        CGFloat leading = 0.0;
        originsBuffer.CGFloat y = 0.0;
        originsBuffer.CGFloat x = 0.0;
        v157.location = 0;
        v157.length = 1;
        CTRunGetPositions((CTRunRef)v68, v157, &buffer);
        v158.location = 0;
        v158.length = 1;
        CTRunGetBaseAdvancesAndOrigins((CTRunRef)v68, v158, 0, &originsBuffer);
        v159.location = 0;
        v159.length = 0;
        double TypographicBounds = CTRunGetTypographicBounds((CTRunRef)v68, v159, &ascent, &descent, &leading);

        swift_release();
        double v70 = fabs(descent);
        if (v23 <= ascent) {
          double v23 = ascent;
        }
        if (v25 <= v70) {
          double v25 = v70;
        }
        if (v27 <= leading) {
          double v27 = leading;
        }
        double v29 = v29 + TypographicBounds;
        CFIndex v65 = v67;
        if (v38 == v67)
        {
          outlined consume of Text.Layout.Line.Line(v13, v12, v14);
          uint64_t v133 = v64;
          uint64_t v72 = v63;
          char v73 = v141;
          uint64_t v74 = (uint64_t)v142;
          char v75 = v136;
          uint64_t v76 = v137;
          uint64_t v77 = v138;
          unint64_t v22 = v129;
          outlined consume of Text.Effect.Composition.Operation(v72, v38, v141, (uint64_t)v142, v136, v137, v138, v129);
          uint64_t v30 = v143;
          uint64_t v31 = v38;
          uint64_t v32 = v73;
          uint64_t v33 = v74;
          char v34 = v75;
          uint64_t v35 = v76;
          goto LABEL_67;
        }
      }
      __break(1u);
LABEL_72:
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
LABEL_76:
      __break(1u);
LABEL_77:
      __break(1u);
LABEL_78:
      __break(1u);
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
    }
    uint64_t v48 = v141;
    outlined consume of Text.Effect.Composition.Operation(v143, v143, v141, (uint64_t)v39, v40, v41, v42, v43);
    uint64_t v49 = v47;
    uint64_t v50 = v47;
    uint64_t v51 = v48;
    uint64_t v52 = (uint64_t)v39;
    char v53 = v136;
    uint64_t v54 = v137;
    uint64_t v55 = v138;
LABEL_40:
    unint64_t v83 = v43;
LABEL_50:
    outlined consume of Text.Effect.Composition.Operation(v49, v50, v51, v52, v53, v54, v55, v83);
    double v23 = 0.0;
    double v25 = 0.0;
    double v27 = 0.0;
    double v29 = 0.0;
LABEL_5:
    uint64_t v15 = v135 + 1;
    if (v19 <= v23) {
      double v19 = v23;
    }
    if (v18 <= v25) {
      double v18 = v25;
    }
    if (v17 <= v27) {
      double v17 = v27;
    }
    double v16 = v139 + v29;
  }
  while (v15 != v131);
  swift_bridgeObjectRelease_n();
  return v19;
}

uint64_t Text.Effect.Composition.widthDifference(at:context:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v105 = a5;
  uint64_t v104 = a3;
  uint64_t v106 = a2;
  _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, MEMORY[0x263F8EDA0]);
  uint64_t v109 = v8;
  MEMORY[0x270FA5388](v8);
  double v110 = (char *)v99 - v10;
  uint64_t result = *(void *)(v5 + 64);
  uint64_t v113 = *(void *)(result + 16);
  if (!v113) {
    return result;
  }
  uint64_t v12 = *a1;
  uint64_t v13 = result + 32;
  uint64_t v121 = *(void **)v5;
  uint64_t v120 = *(void *)(v5 + 8);
  int32x4_t v102 = (uint64_t *)(a4 + 40);
  uint64_t v103 = a4;
  int8x16_t v101 = (uint64_t *)(a4 + 24);
  unint64_t v100 = (void (**)(char *, uint64_t))(v9 + 8);
  int v122 = *(unsigned __int8 *)(v5 + 16);
  v99[1] = result;
  swift_bridgeObjectRetain_n();
  uint64_t v14 = 0;
  double v15 = 0.0;
  uint64_t v112 = v13;
  while (1)
  {
    uint64_t v21 = (uint64_t *)(v13 + 88 * v14);
    uint64_t v23 = *v21;
    uint64_t v22 = v21[1];
    double v24 = (char *)v21[2];
    double v25 = (char *)v21[3];
    uint64_t v26 = v21[4];
    uint64_t v27 = v21[5];
    uint64_t v28 = v21[6];
    unint64_t v29 = v21[7];
    uint64_t v30 = v21[8];
    uint64_t v31 = v21[9];
    uint64_t v32 = v21[10];
    uint64_t v123 = v28;
    uint64_t v124 = v24;
    if (!(v29 >> 62))
    {
      v126[0] = v124;
      v126[1] = v25;
      char v127 = v26 & 1;
      uint64_t v128 = v27;
      uint64_t v129 = v28;
      int v130 = v29;
      uint64_t v131 = v30;
      uint64_t v132 = v31;
      uint64_t v133 = v32;
      v125[0] = v12;
      uint64_t v119 = v22;
      uint64_t v116 = v30;
      uint64_t v115 = v31;
      outlined copy of Text.Effect.Composition.Operation(v23, v22, v124, (uint64_t)v25, v26, v27, v28, v29);
      double v16 = v121;
      uint64_t v17 = v120;
      uint64_t v111 = (uint64_t)v25;
      uint64_t v117 = v14;
      char v18 = v122;
      outlined copy of Text.Layout.Line.Line(v121, v120, v122);
      double v19 = Text.Effect.Composition.widthDifference(at:context:)(v125, v106, v104, v103, v105);
      uint64_t v20 = v17;
      uint64_t v13 = v112;
      outlined consume of Text.Layout.Line.Line(v16, v20, v18);
      uint64_t v14 = v117;
      outlined consume of Text.Effect.Composition.Operation(v23, v119, v124, v111, v26, v27, v123, v29);
      goto LABEL_4;
    }
    uint64_t v118 = v27;
    if (v29 >> 62 == 1)
    {
      uint64_t v33 = v124;
      uint64_t v34 = v27;
      uint64_t v35 = v22;
      outlined consume of Text.Effect.Composition.Operation(v23, v22, v124, (uint64_t)v25, v26, v34, v28, v29);
      uint64_t v13 = v112;
      outlined consume of Text.Effect.Composition.Operation(v23, v35, v33, (uint64_t)v25, v26, v118, v123, v29);
      double v19 = 0.0;
      goto LABEL_4;
    }
    uint64_t v115 = v31;
    uint64_t v116 = v30;
    uint64_t v119 = v22;
    uint64_t v117 = v14;
    uint64_t v36 = v102;
    Swift::UInt64 v114 = v23;
    swift_beginAccess();
    uint64_t v37 = *v36;
    uint64_t v38 = v25;
    if (*(void *)(v37 + 16))
    {
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v114);
      Swift::Int v39 = Hasher._finalize()();
      uint64_t v40 = -1 << *(unsigned char *)(v37 + 32);
      unint64_t v41 = v39 & ~v40;
      Swift::UInt64 v42 = v114;
      if ((*(void *)(v37 + 56 + ((v41 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v41))
      {
        uint64_t v43 = *(void *)(v37 + 48);
        if (*(void *)(v43 + 8 * v41) == v114)
        {
LABEL_15:
          uint64_t v45 = v119;
          uint64_t v46 = v124;
          outlined consume of Text.Effect.Composition.Operation(v114, v119, v124, (uint64_t)v25, v26, v27, v28, v29);
          uint64_t v47 = v42;
          uint64_t v48 = v45;
          uint64_t v49 = v46;
          uint64_t v50 = (uint64_t)v25;
          char v51 = v26;
          uint64_t v52 = v118;
          uint64_t v53 = v28;
          unint64_t v54 = v29;
LABEL_25:
          outlined consume of Text.Effect.Composition.Operation(v47, v48, v49, v50, v51, v52, v53, v54);
          double v19 = 0.0;
          uint64_t v13 = v112;
          uint64_t v14 = v117;
          goto LABEL_4;
        }
        uint64_t v44 = ~v40;
        while (1)
        {
          unint64_t v41 = (v41 + 1) & v44;
          if (((*(void *)(v37 + 56 + ((v41 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v41) & 1) == 0) {
            break;
          }
          if (*(void *)(v43 + 8 * v41) == v114) {
            goto LABEL_15;
          }
        }
      }
    }
    uint64_t v107 = v26;
    unint64_t v108 = v29;
    uint64_t v55 = v101;
    swift_beginAccess();
    uint64_t v56 = *v55;
    if (!*(void *)(*v55 + 16))
    {
      swift_endAccess();
      Swift::UInt64 v68 = v114;
      uint64_t v69 = v119;
      double v70 = v124;
      uint64_t v71 = (uint64_t)v25;
      uint64_t v111 = (uint64_t)v25;
      char v72 = v107;
      uint64_t v73 = v118;
      uint64_t v74 = v123;
      unint64_t v75 = v108;
      outlined consume of Text.Effect.Composition.Operation(v114, v119, v124, v71, v107, v118, v123, v108);
      uint64_t v47 = v68;
      uint64_t v48 = v69;
      uint64_t v49 = v70;
      uint64_t v50 = v111;
      char v51 = v72;
      uint64_t v52 = v73;
      uint64_t v53 = v74;
LABEL_24:
      unint64_t v54 = v75;
      goto LABEL_25;
    }
    uint64_t v57 = v114;
    uint64_t v58 = specialized __RawDictionaryStorage.find<A>(_:)(v114);
    if ((v59 & 1) == 0)
    {
      swift_endAccess();
      uint64_t v76 = v119;
      uint64_t v77 = v124;
      uint64_t v78 = (uint64_t)v25;
      uint64_t v111 = (uint64_t)v25;
      char v79 = v107;
      uint64_t v80 = v118;
      uint64_t v81 = v123;
      unint64_t v75 = v108;
      outlined consume of Text.Effect.Composition.Operation(v57, v119, v124, v78, v107, v118, v123, v108);
      uint64_t v47 = v57;
      uint64_t v48 = v76;
      uint64_t v49 = v77;
      uint64_t v50 = v111;
      char v51 = v79;
      uint64_t v52 = v80;
      uint64_t v53 = v81;
      goto LABEL_24;
    }
    unint64_t v60 = *(void **)(*(void *)(v56 + 56) + 8 * v58);
    swift_endAccess();
    uint64_t v61 = v121;
    uint64_t v62 = v120;
    outlined copy of Text.Layout.Line.Line(v121, v120, v122);
    lazy protocol witness table accessor for type Text.Layout.CharacterIndex and conformance Text.Layout.CharacterIndex();
    uint64_t v63 = v60;
    uint64_t result = RangeSet.init()();
    if (v124 != v25) {
      break;
    }
LABEL_19:
    uint64_t v64 = v106;
    uint64_t v65 = *(void *)(v106 + 16);
    if (v65)
    {
      uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v114);
      uint64_t v66 = v103;
      if (v67) {
        uint64_t v65 = *(void *)(*(void *)(v64 + 56) + 8 * result);
      }
      else {
        uint64_t v65 = 0;
      }
    }
    else
    {
      uint64_t v66 = v103;
    }
    uint64_t v88 = v119;
    uint64_t v89 = v114;
    if (__OFADD__(v65, v119)) {
      goto LABEL_49;
    }
    v126[0] = v12;
    uint64_t v90 = v123;
    uint64_t v91 = v110;
    double v19 = (*(double (**)(Swift::UInt64, uint64_t, char *, void *, uint64_t, uint64_t, uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & *v63) + 0xF8))(v114, v65 + v119, v110, v126, v64, v104, v66, v105);

    (*v100)(v91, v109);
    outlined consume of Text.Layout.Line.Line(v121, v120, v122);
    uint64_t v92 = v88;
    uint64_t v93 = v124;
    uint64_t v94 = (uint64_t)v25;
    uint64_t v95 = (uint64_t)v25;
    char v96 = v107;
    uint64_t v97 = v118;
    unint64_t v98 = v108;
    outlined consume of Text.Effect.Composition.Operation(v89, v92, v124, v94, v107, v118, v90, v108);
    outlined consume of Text.Effect.Composition.Operation(v89, v119, v93, v95, v96, v97, v90, v98);
    uint64_t v13 = v112;
    uint64_t v14 = v117;
LABEL_4:
    ++v14;
    double v15 = v15 + v19;
    if (v14 == v113) {
      return swift_bridgeObjectRelease_n();
    }
  }
  uint64_t v82 = v124;
  if ((uint64_t)v25 < (uint64_t)v124) {
    goto LABEL_50;
  }
  while ((uint64_t)v82 < (uint64_t)v25)
  {
    if (v122)
    {
      outlined copy of Text.Layout.Line.Line(v61, v62, 1);
      uint64_t result = (uint64_t)(id)_NSTextLineFragmentGetCTLine(v61);
      if (!result) {
        goto LABEL_51;
      }
      unint64_t v83 = (const __CTLine *)result;
      outlined consume of Text.Layout.Line.Line(v61, v62, 1);
    }
    else
    {
      outlined copy of Text.Layout.Line.Line(v61, v62, 0);
      outlined copy of Text.Layout.Line.Line(v61, v62, 0);

      swift_release();
      unint64_t v83 = (const __CTLine *)v61;
    }
    uint64_t v84 = (id)_CTLineGetRunAtIndex(v83, (CFIndex)v82);
    CFRange StringRange = CTRunGetStringRange((CTRunRef)v84);

    uint64_t result = swift_release();
    CFIndex v86 = StringRange.location + StringRange.length;
    if (__OFADD__(StringRange.location, StringRange.length)) {
      goto LABEL_46;
    }
    if (v86 < StringRange.location) {
      goto LABEL_47;
    }
    v125[0] = StringRange.location;
    v125[1] = StringRange.location + StringRange.length;
    if (__OFSUB__(v86, StringRange.location)) {
      goto LABEL_48;
    }
    if (v86 != StringRange.location)
    {
      uint64_t v87 = (uint64_t (*)(void *, void))RangeSet._ranges.modify();
      _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_1(0, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, MEMORY[0x263F8ED78]);
      RangeSet.Ranges._insert(contentsOf:)();
      uint64_t result = v87(v126, 0);
    }
    ++v82;
    double v25 = v38;
    uint64_t v61 = v121;
    uint64_t v62 = v120;
    if (v38 == v82) {
      goto LABEL_19;
    }
  }
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
  return result;
}

double Text.Effect.Composition.bounds(at:context:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 64);
  double x = *MEMORY[0x263F001A0];
  CGFloat y = *(double *)(MEMORY[0x263F001A0] + 8);
  CGFloat width = *(double *)(MEMORY[0x263F001A0] + 16);
  CGFloat height = *(double *)(MEMORY[0x263F001A0] + 24);
  uint64_t v8 = *(void *)(v3 + 16);
  if (v8)
  {
    uint64_t v34 = *a1;
    uint64_t v32 = *(void *)(v2 + 8);
    uint64_t v33 = *(void **)v2;
    char v31 = *(unsigned char *)(v2 + 16);
    long long v30 = *(_OWORD *)(v2 + 24);
    int v29 = *(_DWORD *)(v2 + 40);
    swift_bridgeObjectRetain();
    uint64_t v9 = (uint64_t *)(v3 + 56);
    do
    {
      uint64_t v10 = *(v9 - 2);
      uint64_t v11 = (void *)*(v9 - 1);
      uint64_t v12 = *v9;
      uint64_t v13 = v9[1];
      uint64_t v14 = v9[2];
      uint64_t v15 = v9[3];
      unint64_t v16 = v9[4];
      uint64_t v17 = v9[5];
      uint64_t v18 = v9[6];
      uint64_t v19 = v9[7];
      uint64_t v47 = *(v9 - 3);
      uint64_t v48 = v10;
      uint64_t v40 = v10;
      uint64_t v41 = v47;
      uint64_t v49 = v11;
      uint64_t v50 = v12;
      char v38 = v13;
      Swift::Int v39 = v11;
      uint64_t v51 = v13;
      uint64_t v52 = v14;
      uint64_t v36 = v15;
      uint64_t v37 = v14;
      uint64_t v53 = v15;
      unint64_t v54 = v16;
      unint64_t v35 = v16;
      uint64_t v55 = v17;
      uint64_t v56 = v18;
      uint64_t v57 = v19;
      uint64_t v46 = v34;
      v42[0] = v33;
      v42[1] = v32;
      char v43 = v31;
      long long v44 = v30;
      int v45 = v29;
      outlined copy of Text.Effect.Composition.Operation(v47, v10, v11, v12, v13, v14, v15, v16);
      outlined copy of Text.Layout.Line.Line(v33, v32, v31);
      CGFloat v20 = Text.Effect.Composition.Operation.bounds(at:line:context:)(&v46, v42, a2);
      CGFloat v22 = v21;
      CGFloat v24 = v23;
      CGFloat v26 = v25;
      outlined consume of Text.Layout.Line.Line(v33, v32, v31);
      v58.origin.double x = x;
      v58.origin.CGFloat y = y;
      v58.size.CGFloat width = width;
      v58.size.CGFloat height = height;
      v60.origin.double x = v20;
      v60.origin.CGFloat y = v22;
      v60.size.CGFloat width = v24;
      v60.size.CGFloat height = v26;
      CGRect v59 = CGRectUnion(v58, v60);
      double x = v59.origin.x;
      CGFloat y = v59.origin.y;
      CGFloat width = v59.size.width;
      CGFloat height = v59.size.height;
      outlined consume of Text.Effect.Composition.Operation(v41, v40, v39, v12, v38, v37, v36, v35);
      v9 += 11;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
  }
  return x;
}

uint64_t Text.Effect.Composition.append(_:)(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 64);
  uint64_t v3 = *(void *)(result + 16);
  if (v3)
  {
    uint64_t v4 = *(void **)(v1 + 64);
    uint64_t v5 = (uint64_t *)(swift_bridgeObjectRetain() + 56);
    while (1)
    {
      uint64_t v6 = *(v5 - 3);
      uint64_t v7 = *(v5 - 2);
      uint64_t v8 = (void *)*(v5 - 1);
      uint64_t v14 = *v5;
      unint64_t v16 = v5[1];
      uint64_t v15 = v5[2];
      uint64_t v17 = v5[3];
      unint64_t v18 = v5[4];
      uint64_t v19 = v5[7];
      unint64_t v20 = v4[2];
      uint64_t v53 = *v5;
      uint64_t v54 = v5[5];
      uint64_t v56 = v17;
      uint64_t v57 = v15;
      uint64_t v55 = v5[6];
      uint64_t v51 = v3;
      uint64_t v52 = v19;
      if (v20)
      {
        uint64_t v21 = *v5;
        uint64_t v22 = v5[4];
        outlined copy of Text.Effect.Composition.Operation(v6, v7, v8, v14, v16, v15, v17, v18);
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v4);
          uint64_t v4 = (void *)result;
        }
        if (v20 > v4[2])
        {
          __break(1u);
          return result;
        }
        uint64_t v47 = v7;
        uint64_t v49 = v6;
        v58[0] = v6;
        v58[1] = v7;
        uint64_t v46 = v8;
        void v58[2] = (uint64_t)v8;
        v58[3] = v21;
        v58[4] = v16;
        v58[5] = v57;
        v58[6] = v56;
        void v58[7] = v22;
        v58[8] = v54;
        v58[9] = v55;
        v58[10] = v19;
        Text.Effect.Composition.Operation.append(_:)(v58, &v59);
        uint64_t v23 = v59;
        unint64_t v24 = v63;
        unint64_t v25 = v66;
        uint64_t v26 = v67;
        uint64_t v27 = v68;
        uint64_t v28 = v69;
        if (v63 >> 1 == 0xFFFFFFFF && !HIDWORD(v66))
        {
          uint64_t v7 = v47;
          uint64_t v6 = v49;
          uint64_t v8 = v46;
          uint64_t v9 = v53;
        }
        else
        {
          char v50 = v16;
          long long v44 = v61;
          uint64_t v45 = v60;
          uint64_t v42 = v64;
          uint64_t v43 = v62;
          uint64_t v41 = v65;
          outlined copy of Text.Effect.Composition.Operation(v59, v60, v61, v62, v63, v64, v65, v66);
          unint64_t v16 = v4[2];
          unint64_t v29 = v4[3];
          unint64_t v30 = v16 + 1;
          if (v16 >= v29 >> 1)
          {
            Swift::Int v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v29 > 1), v16 + 1, 1, v4);
            unint64_t v30 = v16 + 1;
            uint64_t v4 = v39;
          }
          float32x4_t v4[2] = v30;
          char v31 = &v4[11 * v16];
          v31[4] = v23;
          void v31[5] = v45;
          v31[6] = v44;
          v31[7] = v43;
          char v31[8] = v24;
          v31[9] = v42;
          v31[10] = v41;
          v31[11] = v25;
          v31[12] = v26;
          v31[13] = v27;
          v31[14] = v28;
          outlined consume of Text.Effect.Composition.Operation?(v23, v45, v44, v43, v24, v42, v41, v25);
          uint64_t v7 = v47;
          uint64_t v6 = v49;
          uint64_t v8 = v46;
          uint64_t v9 = v53;
          LOBYTE(v16) = v50;
        }
        uint64_t v11 = v56;
        uint64_t v10 = v57;
        unint64_t v12 = v22;
        uint64_t v13 = v51;
      }
      else
      {
        uint64_t v32 = v5[2];
        uint64_t v33 = v5[3];
        unint64_t v48 = v5[4];
        outlined copy of Text.Effect.Composition.Operation(v6, v7, v8, v14, v16, v15, v17, v18);
        outlined copy of Text.Effect.Composition.Operation(v6, v7, v8, v53, v16, v32, v33, v48);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, v4);
        }
        uint64_t v11 = v56;
        uint64_t v10 = v57;
        unint64_t v12 = v48;
        uint64_t v34 = v55;
        unint64_t v36 = v4[2];
        unint64_t v35 = v4[3];
        if (v36 >= v35 >> 1)
        {
          char v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v35 > 1), v36 + 1, 1, v4);
          uint64_t v34 = v55;
          uint64_t v11 = v56;
          unint64_t v12 = v48;
          uint64_t v10 = v57;
          uint64_t v4 = v38;
        }
        float32x4_t v4[2] = v36 + 1;
        uint64_t v37 = &v4[11 * v36];
        v37[4] = v6;
        v37[5] = v7;
        v37[6] = v8;
        v37[7] = v53;
        uint64_t v9 = v53;
        uint64_t v13 = v51;
        v37[8] = v16;
        v37[9] = v10;
        v37[10] = v11;
        v37[11] = v12;
        v37[12] = v54;
        v37[13] = v34;
        v37[14] = v52;
      }
      v5 += 11;
      outlined consume of Text.Effect.Composition.Operation(v6, v7, v8, v9, v16, v10, v11, v12);
      uint64_t v3 = v13 - 1;
      if (!v3)
      {
        uint64_t result = swift_bridgeObjectRelease();
        *(void *)(v40 + 64) = v4;
        return result;
      }
    }
  }
  return result;
}

uint64_t Text.Effect.DrawingContent.draw(options:in:)(uint64_t result, unint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v5 = *(void *)v4;
  uint64_t v6 = *(void *)(v4 + 8);
  long long v7 = *(_OWORD *)(v4 + 32);
  v36[0] = *(_OWORD *)(v4 + 16);
  v36[1] = v7;
  _OWORD v36[2] = *(_OWORD *)(v4 + 48);
  uint64_t v8 = *(void *)(v6 + 16);
  if (v8)
  {
    unint64_t v11 = result;
    char v12 = a3 & 1;
    swift_bridgeObjectRetain();
    uint64_t v13 = v8 - 1;
    for (uint64_t i = 32; ; i += 144)
    {
      v35[0] = *(_OWORD *)(v6 + i);
      long long v15 = *(_OWORD *)(v6 + i + 16);
      long long v16 = *(_OWORD *)(v6 + i + 32);
      long long v17 = *(_OWORD *)(v6 + i + 64);
      v35[3] = *(_OWORD *)(v6 + i + 48);
      v35[4] = v17;
      v35[1] = v15;
      v35[2] = v16;
      long long v18 = *(_OWORD *)(v6 + i + 80);
      long long v19 = *(_OWORD *)(v6 + i + 96);
      long long v20 = *(_OWORD *)(v6 + i + 128);
      v35[7] = *(_OWORD *)(v6 + i + 112);
      v35[8] = v20;
      v35[5] = v18;
      v35[6] = v19;
      long long v21 = *(_OWORD *)(v6 + i + 112);
      long long v32 = *(_OWORD *)(v6 + i + 96);
      long long v33 = v21;
      long long v34 = *(_OWORD *)(v6 + i + 128);
      long long v22 = *(_OWORD *)(v6 + i + 48);
      long long v28 = *(_OWORD *)(v6 + i + 32);
      long long v29 = v22;
      long long v23 = *(_OWORD *)(v6 + i + 80);
      long long v30 = *(_OWORD *)(v6 + i + 64);
      long long v31 = v23;
      long long v24 = *(_OWORD *)(v6 + i + 16);
      long long v26 = *(_OWORD *)(v6 + i);
      long long v27 = v24;
      uint64_t v25 = v5;
      outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)v35, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined copy of Text.Effect.ResolvedDrawing.Operation.Kind);
      Text.Effect.ResolvedDrawing.Operation.draw(at:context:options:in:)(&v25, (uint64_t *)v36, v11, a2, v12, a4);
      outlined retain of Text.Effect.ResolvedDrawing.Operation((uint64_t)v35, (void (*)(void, void, void, void, void, void, void, void, void, void, char))outlined consume of Text.Effect.ResolvedDrawing.Operation.Kind);
      if (!v13) {
        break;
      }
      --v13;
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t Text.Effect.BaseContext.content<A>(for:key:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  swift_retain();
  swift_retain();

  return Text.Effect.DrawableContent.init(keyframes:key:)(a6, a2, a3, a8, a9);
}

unint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Text.Effect.Composition.Run(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 80);
  uint64_t v3 = *(void *)(a2 + 80);
  long long v4 = *(_OWORD *)(a1 + 16);
  v11[0] = *(_OWORD *)a1;
  v11[1] = v4;
  long long v5 = *(_OWORD *)(a1 + 48);
  v11[2] = *(_OWORD *)(a1 + 32);
  void v11[3] = v5;
  void v11[4] = *(_OWORD *)(a1 + 64);
  uint64_t v12 = v2;
  long long v6 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v6;
  long long v7 = *(_OWORD *)(a2 + 48);
  long long v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v7;
  v9[4] = *(_OWORD *)(a2 + 64);
  uint64_t v10 = v3;
  return (unint64_t)specialized static Text.Effect.Composition.Operation.== infix(_:_:)((uint64_t *)v11, (uint64_t *)v9) & 1;
}

uint64_t Text.Effect.Composition.appendIdentifiers(to:)(uint64_t a1)
{
  uint64_t result = *(void *)(v1 + 64);
  uint64_t v3 = *(void *)(result + 16);
  if (v3)
  {
    long long v4 = (uint64_t *)(swift_bridgeObjectRetain() + 56);
    do
    {
      Swift::UInt64 v13 = *(v4 - 3);
      uint64_t v14 = *(v4 - 2);
      long long v16 = (void *)*(v4 - 1);
      uint64_t v15 = *v4;
      uint64_t v18 = v4[1];
      uint64_t v17 = v4[2];
      uint64_t v20 = v4[3];
      unint64_t v19 = v4[4];
      uint64_t v21 = v4[5];
      uint64_t v22 = v4[6];
      uint64_t v23 = v4[7];
      uint64_t v34 = v14;
      if (v19 >> 62)
      {
        if (v19 >> 62 == 1)
        {
          uint64_t v24 = *(v4 - 3);
          long long v29 = (void *)*(v4 - 1);
          uint64_t v31 = *v4;
          outlined consume of Text.Effect.Composition.Operation(v13, v14, v16, v15, v18, v17, v20, v19);
          uint64_t v7 = v24;
          uint64_t v8 = v34;
          uint64_t v10 = v29;
          uint64_t v11 = v31;
          char v12 = v18;
          uint64_t v9 = v17;
        }
        else
        {
          uint64_t v27 = *(v4 - 3);
          uint64_t v33 = v4[2];
          uint64_t v5 = *v4;
          long long v6 = (void *)*(v4 - 1);
          specialized Set._Variant.insert(_:)(v35, v13);
          outlined consume of Text.Effect.Composition.Operation(v27, v34, v6, v5, v18, v33, v20, v19);
          uint64_t v7 = v27;
          uint64_t v9 = v33;
          uint64_t v8 = v34;
          uint64_t v10 = v6;
          uint64_t v11 = v5;
          char v12 = v18;
        }
        uint64_t v25 = v20;
      }
      else
      {
        Swift::UInt64 v26 = *(v4 - 3);
        Swift::UInt64 v30 = *(v4 - 1);
        Swift::UInt64 v32 = *v4;
        outlined copy of Text.Effect.Composition.Operation(v13, v14, v16, v15, v18, v17, v20, v19);
        specialized Set._Variant.insert(_:)(v35, v26);
        v35[0] = v30;
        v35[1] = v32;
        char v36 = v18 & 1;
        uint64_t v37 = v17;
        uint64_t v38 = v20;
        int v39 = v19;
        uint64_t v40 = v21;
        uint64_t v41 = v22;
        uint64_t v42 = v23;
        Text.Effect.Composition.appendIdentifiers(to:)(a1);
        uint64_t v7 = v26;
        uint64_t v9 = v17;
        uint64_t v8 = v34;
        uint64_t v10 = (void *)v30;
        uint64_t v11 = v32;
        char v12 = v18;
        uint64_t v25 = v20;
      }
      outlined consume of Text.Effect.Composition.Operation(v7, v8, v10, v11, v12, v9, v25, v19);
      v4 += 11;
      --v3;
    }
    while (v3);
    return swift_bridgeObjectRelease();
  }
  return result;
}

void Text.Effect.Composition.Operation.bounds(at:line:context:)(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *a1;
  uint64_t v6 = v3[1];
  Swift::UInt64 v36 = *v3;
  uint64_t v8 = (void *)v3[2];
  uint64_t v7 = v3[3];
  Swift::UInt64 v10 = v3[4];
  uint64_t v9 = v3[5];
  uint64_t v12 = v3[6];
  unint64_t v11 = v3[7];
  Swift::UInt64 v13 = v3[8];
  Swift::UInt64 v14 = v3[9];
  Swift::UInt64 v15 = v3[10];
  if (!(v11 >> 62))
  {
    Swift::UInt64 v43 = v3[2];
    Swift::UInt v44 = v7;
    LOBYTE(v45) = v10 & 1;
    uint64_t v46 = v9;
    uint64_t v47 = v12;
    LODWORD(v48) = v11;
    Swift::UInt64 v49 = v13;
    unint64_t v50 = v14;
    Swift::UInt64 v51 = v15;
    uint64_t v54 = v5;
    outlined copy of Text.Layout.Line.Line(v8, v7, v10 & 1);
    swift_bridgeObjectRetain();
    Text.Effect.Composition.bounds(at:context:)(&v54, (uint64_t)a3);
    outlined consume of Text.Effect.Composition.Operation(v36, v6, v8, v7, v10, v9, v12, v11);
    return;
  }
  Swift::UInt64 v34 = v3[6];
  Swift::UInt v35 = v3[1];
  Swift::UInt64 v32 = v3[5];
  Swift::UInt64 v33 = v3[4];
  long long v16 = *(void **)a2;
  uint64_t v17 = *(void *)(a2 + 8);
  char v18 = *(unsigned char *)(a2 + 16);
  uint64_t v19 = *(void *)(a2 + 24);
  uint64_t v20 = *(void *)(a2 + 32);
  Swift::UInt64 v30 = v3[10];
  Swift::UInt64 v31 = v3[8];
  int v28 = *(_DWORD *)(a2 + 40);
  char v29 = v18;
  uint64_t v21 = *(void **)a2;
  if (v11 >> 62 != 1)
  {
    if (v18)
    {
      outlined copy of Text.Layout.Line.Line(v21, v17, 1);
      uint64_t v24 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v16);
      if (!v24) {
        goto LABEL_18;
      }
      uint64_t v25 = v24;
      outlined consume of Text.Layout.Line.Line(v16, v17, 1);
    }
    else
    {
      outlined copy of Text.Layout.Line.Line(v21, v17, 0);
      outlined copy of Text.Layout.Line.Line(v16, v17, 0);

      swift_release();
      uint64_t v25 = (const __CTLine *)v16;
    }
    uint64_t v27 = (id)_CTLineGetRunAtIndex(v25, (CFIndex)v8);
    specialized Text.Layout.TypographicBounds.init(run:range:)((const __CTRun *)v27, (CFRange)0, (CGFloat *)&v54);
    swift_release();

    if (*(void *)(a3[5] + 16)) {
      specialized __RawDictionaryStorage.find<A>(_:)(v36, v35);
    }
    goto LABEL_16;
  }
  if ((v18 & 1) == 0)
  {
    outlined copy of Text.Layout.Line.Line(v21, v17, 0);
    outlined copy of Text.Layout.Line.Line(v16, v17, 0);

    swift_release();
    uint64_t v23 = (const __CTLine *)v16;
LABEL_11:
    Swift::UInt64 v26 = (id)_CTLineGetRunAtIndex(v23, v36);
    specialized Text.Layout.TypographicBounds.init(run:range:)((const __CTRun *)v26, (CFRange)0, (CGFloat *)&v54);
    swift_release();

    if (*(void *)(a3[4] + 16)) {
      specialized __RawDictionaryStorage.find<A>(_:)(0);
    }
LABEL_16:
    Swift::UInt64 v43 = v36;
    Swift::UInt v44 = v35;
    uint64_t v45 = v8;
    uint64_t v46 = v7;
    uint64_t v47 = v33;
    Swift::UInt64 v48 = v32;
    Swift::UInt64 v49 = v34;
    unint64_t v50 = v11;
    Swift::UInt64 v51 = v31;
    Swift::UInt64 v52 = v14;
    Swift::UInt64 v53 = v30;
    uint64_t v42 = v5;
    v37[0] = v16;
    v37[1] = v17;
    char v38 = v29;
    uint64_t v39 = v19;
    uint64_t v40 = v20;
    int v41 = v28;
    Text.Effect.Composition.Operation.metrics(at:line:context:)((CGFloat *)&v42, (uint64_t)v37, *a3, a3[1], a3[2], a3[3]);
    return;
  }
  outlined copy of Text.Layout.Line.Line(v21, v17, 1);
  uint64_t v22 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v16);
  if (v22)
  {
    uint64_t v23 = v22;
    outlined consume of Text.Layout.Line.Line(v16, v17, 1);
    goto LABEL_11;
  }
  __break(1u);
LABEL_18:
  __break(1u);
}

double closure #1 in Text.Effect.Composition.widthDifference(at:context:)@<D0>(double *a1@<X0>, uint64_t *a2@<X1>, long long *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, double *a8@<X8>, double a9@<D0>)
{
  double v10 = *a1;
  uint64_t v18 = a2[1];
  uint64_t v19 = *a2;
  uint64_t v25 = (void *)a2[2];
  uint64_t v26 = a2[3];
  uint64_t v27 = a2[4];
  uint64_t v28 = a2[5];
  unint64_t v16 = a2[7];
  uint64_t v17 = a2[6];
  double v31 = a9;
  long long v11 = *a3;
  long long v12 = a3[1];
  *(_OWORD *)&v30[12] = *(long long *)((char *)a3 + 28);
  long long v29 = v11;
  *(_OWORD *)Swift::UInt64 v30 = v12;
  outlined copy of Text.Effect.Composition.Operation(v19, v18, v25, v26, v27, v28, v17, v16);
  outlined retain of Text.Layout.Line((uint64_t)&v29);
  Text.Effect.Composition.Operation.widthDifference(at:line:context:)((uint64_t *)&v31, a3, a4, a5, a6, a7);
  double v14 = v13;
  outlined release of Text.Layout.Line((uint64_t)&v29);
  outlined consume of Text.Effect.Composition.Operation(v19, v18, v25, v26, v27, v28, v17, v16);
  double result = v10 + v14;
  *a8 = v10 + v14;
  return result;
}

void Text.Effect.Composition.Operation.widthDifference(at:line:context:)(uint64_t *a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v41 = a4;
  uint64_t v42 = a3;
  _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, MEMORY[0x263F8EDA0]);
  uint64_t v12 = v11;
  uint64_t v13 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  Swift::UInt64 v15 = (char *)&v37 - v14;
  uint64_t v16 = *a1;
  Swift::UInt64 v17 = *v6;
  uint64_t v18 = v6[1];
  uint64_t v19 = (void *)v6[2];
  CFIndex v20 = v6[3];
  unint64_t v21 = v6[7];
  if (v21 >> 62)
  {
    if (v21 >> 62 != 1)
    {
      Swift::UInt64 v39 = *v6;
      uint64_t v40 = v18;
      long long v22 = *a2;
      char v23 = *((unsigned char *)a2 + 16);
      long long v37 = *(long long *)((char *)a2 + 24);
      long long v38 = v22;
      int v24 = *((_DWORD *)a2 + 10);
      uint64_t v25 = Text.Effect.Keyframes.validTransform(_:)(v17, a5);
      if (v25)
      {
        uint64_t v26 = v25;
        long long v44 = v38;
        char v45 = v23;
        long long v46 = v37;
        int v47 = v24;
        Text.Layout.Line.characterRanges(runIndices:)((CFIndex)v19, v20);
        uint64_t v27 = v42;
        uint64_t v28 = *(void *)(v42 + 16);
        if (v28)
        {
          uint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)(v39);
          if (v30) {
            uint64_t v28 = *(void *)(*(void *)(v27 + 56) + 8 * v29);
          }
          else {
            uint64_t v28 = 0;
          }
        }
        if (__OFADD__(v28, v40))
        {
          __break(1u);
        }
        else
        {
          *(void *)&long long v44 = v16;
          (*(void (**)(Swift::UInt64, uint64_t, char *, long long *, uint64_t, uint64_t, uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & *v26) + 0xF8))(v39, v28 + v40, v15, &v44, v27, v41, a5, a6);

          (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
        }
      }
    }
  }
  else
  {
    *(void *)&long long v38 = a5;
    Swift::UInt64 v32 = v6[9];
    Swift::UInt64 v31 = v6[10];
    *(void *)&long long v37 = a6;
    Swift::UInt64 v33 = v6[8];
    uint64_t v34 = v6[5];
    Swift::UInt64 v39 = v6[6];
    uint64_t v40 = v18;
    Swift::UInt64 v35 = v6[4];
    *(void *)&long long v44 = v19;
    *((void *)&v44 + 1) = v20;
    char v45 = v35 & 1;
    *(void *)&long long v46 = v34;
    *((void *)&v46 + 1) = v39;
    int v47 = v21;
    Swift::UInt64 v48 = v33;
    Swift::UInt64 v49 = v32;
    Swift::UInt64 v50 = v31;
    uint64_t v43 = v16;
    uint64_t v36 = v17;
    outlined copy of Text.Layout.Line.Line(v19, v20, v35 & 1);
    swift_bridgeObjectRetain();
    Text.Effect.Composition.widthDifference(at:context:)(&v43, v42, v41, v38, v37);
    outlined consume of Text.Effect.Composition.Operation(v36, v40, v19, v20, v35, v34, v39, v21);
  }
}

double Text.Effect.Composition.Operation.lineBreakingMetrics(line:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v85 = a5;
  uint64_t v110 = *MEMORY[0x263EF8340];
  _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, MEMORY[0x263F8EDA0]);
  MEMORY[0x270FA5388](v10);
  Swift::UInt64 v15 = (char *)v73 - v14;
  uint64_t v17 = *v5;
  uint64_t v16 = v5[1];
  uint64_t v19 = (void *)v5[2];
  uint64_t v18 = v5[3];
  unint64_t v20 = v5[7];
  if (!(v20 >> 62))
  {
    uint64_t v35 = v5[10];
    uint64_t v36 = *(void *)(v35 + 16);
    if (v36)
    {
      uint64_t v37 = v5[4];
      uint64_t v38 = v5[5];
      uint64_t v39 = v5[6];
      uint64_t v40 = v5[8];
      v73[1] = v5[9];
      _OWORD v73[2] = v40;
      uint64_t v74 = v17;
      uint64_t v75 = v16;
      uint64_t v82 = v37;
      uint64_t v81 = v38;
      uint64_t v80 = v39;
      unint64_t v79 = v20;
      outlined copy of Text.Effect.Composition.Operation(v17, v16, v19, v18, v37, v38, v39, v20);
      swift_bridgeObjectRetain();
      v73[3] = v35;
      uint64_t v41 = (uint64_t *)(v35 + 56);
      double v42 = 0.0;
      double v43 = 0.0;
      double v44 = 0.0;
      double v25 = 0.0;
      uint64_t v76 = a4;
      uint64_t v83 = a3;
      uint64_t v84 = a2;
      uint64_t v78 = v18;
      uint64_t v77 = v19;
      char v45 = v19;
      CGFloat v46 = *(double *)&v18;
      do
      {
        *(void *)&long long v92 = v36;
        char v47 = v82 & 1;
        CGFloat v48 = *((double *)v41 - 2);
        Swift::UInt64 v49 = (void *)*(v41 - 1);
        uint64_t v50 = *v41;
        uint64_t v51 = v41[1];
        uint64_t v52 = v41[2];
        uint64_t v53 = v41[3];
        unint64_t v54 = v41[4];
        uint64_t v55 = v41[5];
        uint64_t v56 = v41[6];
        uint64_t v57 = v41[7];
        *(void *)&buffer.double x = *(v41 - 3);
        buffer.CGFloat y = v48;
        uint64_t v91 = *(void *)&buffer.x;
        uint64_t v90 = *(void *)&v48;
        int32x4_t v102 = v49;
        *(void *)&long long v103 = v50;
        uint64_t v89 = v49;
        uint64_t v88 = v50;
        *((void *)&v103 + 1) = v51;
        uint64_t v104 = v52;
        uint64_t v87 = v51;
        uint64_t v105 = v53;
        unint64_t v106 = v54;
        uint64_t v86 = v53;
        uint64_t v107 = v55;
        uint64_t v108 = v56;
        uint64_t v109 = v57;
        *(void *)&originsBuffer.double x = v45;
        originsBuffer.CGFloat y = v46;
        char v97 = v82 & 1;
        uint64_t v98 = v81;
        uint64_t v99 = v80;
        int v100 = v79;
        outlined copy of Text.Effect.Composition.Operation(*(uint64_t *)&buffer.x, *(uint64_t *)&v48, v49, v50, v51, v52, v53, v54);
        outlined copy of Text.Layout.Line.Line(v45, *(uint64_t *)&v46, v47);
        double v58 = Text.Effect.Composition.Operation.lineBreakingMetrics(line:context:)(&originsBuffer, v84, v83, v76, v85);
        double v60 = v59;
        double v62 = v61;
        double v64 = v63;
        outlined consume of Text.Layout.Line.Line(v45, *(uint64_t *)&v46, v47);
        uint64_t v65 = v92;
        outlined consume of Text.Effect.Composition.Operation(v91, v90, v89, v88, v87, v52, v86, v54);
        if (v25 <= v58) {
          double v25 = v58;
        }
        if (v44 <= v60) {
          double v44 = v60;
        }
        if (v43 <= v62) {
          double v43 = v62;
        }
        double v42 = v42 + v64;
        v41 += 11;
        uint64_t v36 = v65 - 1;
      }
      while (v36);
      swift_bridgeObjectRelease();
      outlined consume of Text.Effect.Composition.Operation(v74, v75, v77, v78, v82, v81, v80, v79);
      return v25;
    }
    return 0.0;
  }
  uint64_t v84 = a2;
  uint64_t v83 = a3;
  uint64_t v21 = a4;
  long long v22 = *(void **)a1;
  CGFloat v23 = *(double *)(a1 + 8);
  char v24 = *(unsigned char *)(a1 + 16);
  if (v20 >> 62 != 1)
  {
    uint64_t v89 = v13;
    uint64_t v90 = (uint64_t)v11;
    long long v92 = *(_OWORD *)(a1 + 24);
    LODWORD(v91) = *(_DWORD *)(a1 + 40);
    unint64_t v66 = Text.Effect.Keyframes.validTransform(_:)(v17, v21);
    if (v66)
    {
      uint64_t v67 = v66;
      *(void *)&buffer.double x = v22;
      buffer.CGFloat y = v23;
      LOBYTE(v102) = v24;
      long long v103 = v92;
      LODWORD(v104) = v91;
      Text.Layout.Line.characterRanges(runIndices:)((CFIndex)v19, v18);
      uint64_t v68 = v84;
      uint64_t v69 = *(void *)(v84 + 16);
      if (v69)
      {
        uint64_t v70 = specialized __RawDictionaryStorage.find<A>(_:)(v17);
        if (v71) {
          uint64_t v69 = *(void *)(*(void *)(v68 + 56) + 8 * v70);
        }
        else {
          uint64_t v69 = 0;
        }
      }
      if (__OFADD__(v69, v16)) {
        goto LABEL_38;
      }
      double v25 = (*(double (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & *v67) + 0xE8))(v17, v69 + v16, v15, v68, v83, v21, v85);

      (*((void (**)(char *, uint64_t))v89 + 1))(v15, v90);
      return v25;
    }
    return 0.0;
  }
  double v25 = 0.0;
  double v26 = 0.0;
  double v27 = 0.0;
  double v28 = 0.0;
  if (v17 != v16)
  {
    if (v16 >= v17) {
      goto LABEL_14;
    }
    __break(1u);
LABEL_6:
    outlined copy of Text.Layout.Line.Line(v11, v12, 0);
    outlined copy of Text.Layout.Line.Line(v22, *(uint64_t *)&v23, 0);

    swift_release();
    uint64_t v29 = (const __CTLine *)v22;
    while (1)
    {
      uint64_t v30 = v17 + 1;
      Swift::UInt64 v31 = (id)_CTLineGetRunAtIndex(v29, v17);
      buffer.double x = 0.0;
      buffer.CGFloat y = 0.0;
      CGFloat ascent = 0.0;
      CGFloat descent = 0.0;
      CGFloat leading = 0.0;
      originsBuffer.CGFloat y = 0.0;
      originsBuffer.double x = 0.0;
      v111.location = 0;
      v111.length = 1;
      CTRunGetPositions((CTRunRef)v31, v111, &buffer);
      v112.location = 0;
      v112.length = 1;
      CTRunGetBaseAdvancesAndOrigins((CTRunRef)v31, v112, 0, &originsBuffer);
      v113.location = 0;
      v113.length = 0;
      double TypographicBounds = CTRunGetTypographicBounds((CTRunRef)v31, v113, &ascent, &descent, &leading);

      swift_release();
      double v33 = fabs(descent);
      if (v25 <= ascent) {
        double v25 = ascent;
      }
      if (v26 <= v33) {
        double v26 = v33;
      }
      if (v27 <= leading) {
        double v27 = leading;
      }
      double v28 = v28 + TypographicBounds;
      ++v17;
      if (v16 == v30) {
        return v25;
      }
LABEL_14:
      if (v17 >= v16) {
        break;
      }
      uint64_t v11 = v22;
      uint64_t v12 = *(void *)&v23;
      if ((v24 & 1) == 0) {
        goto LABEL_6;
      }
      outlined copy of Text.Layout.Line.Line(v22, *(uint64_t *)&v23, 1);
      uint64_t v34 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v22);
      if (!v34) {
        goto LABEL_39;
      }
      uint64_t v29 = v34;
      outlined consume of Text.Layout.Line.Line(v22, *(uint64_t *)&v23, 1);
    }
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
  }
  return v25;
}

double Text.Effect.Composition.Operation.metrics(at:line:context:)(CGFloat *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v50 = a6;
  uint64_t v52 = a5;
  uint64_t v49 = a4;
  uint64_t v51 = a3;
  uint64_t v64 = *MEMORY[0x263EF8340];
  _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, MEMORY[0x263F8EDA0]);
  uint64_t v10 = v9;
  MEMORY[0x270FA5388](v9);
  Swift::UInt64 v15 = &v48[-v14 - 8];
  CGFloat v16 = *a1;
  int64_t v18 = *v6;
  uint64_t v17 = v6[1];
  unint64_t v20 = (void *)v6[2];
  CGFloat v19 = *((double *)v6 + 3);
  unint64_t v21 = v6[7];
  unint64_t v22 = v21 >> 62;
  if (v21 >> 62)
  {
    CGFloat v23 = *(void **)a2;
    CGFloat v24 = *(double *)(a2 + 8);
    char v25 = *(unsigned char *)(a2 + 16);
    if (v22 == 1)
    {
      double v26 = 0.0;
      double v27 = 0.0;
      double v28 = 0.0;
      double v29 = 0.0;
      if (v18 != v17)
      {
        if (v17 >= v18) {
          goto LABEL_14;
        }
        __break(1u);
LABEL_6:
        outlined copy of Text.Layout.Line.Line(v11, v12, 0);
        outlined copy of Text.Layout.Line.Line(v23, *(uint64_t *)&v24, 0);

        swift_release();
        uint64_t v30 = (const __CTLine *)v23;
        while (1)
        {
          int64_t v31 = v18 + 1;
          Swift::UInt64 v32 = (id)_CTLineGetRunAtIndex(v30, v18);
          buffer.double x = 0.0;
          buffer.CGFloat y = 0.0;
          CGFloat descent = 0.0;
          CGFloat ascent = 0.0;
          originsBuffer.CGFloat y = 0.0;
          CGFloat leading = 0.0;
          originsBuffer.double x = 0.0;
          v65.location = 0;
          v65.length = 1;
          CTRunGetPositions((CTRunRef)v32, v65, &buffer);
          v66.location = 0;
          v66.length = 1;
          CTRunGetBaseAdvancesAndOrigins((CTRunRef)v32, v66, 0, &originsBuffer);
          v67.location = 0;
          v67.length = 0;
          double TypographicBounds = CTRunGetTypographicBounds((CTRunRef)v32, v67, &ascent, &descent, &leading);

          swift_release();
          double v34 = fabs(descent);
          if (v26 <= ascent) {
            double v26 = ascent;
          }
          if (v27 <= v34) {
            double v27 = v34;
          }
          if (v28 <= leading) {
            double v28 = leading;
          }
          double v29 = v29 + TypographicBounds;
          int64_t v18 = v31;
          if (v17 == v31) {
            return v26;
          }
LABEL_14:
          if (v18 >= v17) {
            break;
          }
          uint64_t v11 = v23;
          uint64_t v12 = *(void *)&v24;
          if ((v25 & 1) == 0) {
            goto LABEL_6;
          }
          outlined copy of Text.Layout.Line.Line(v23, *(uint64_t *)&v24, 1);
          uint64_t v35 = (const __CTLine *)(id)_NSTextLineFragmentGetCTLine(v23);
          if (!v35) {
            goto LABEL_30;
          }
          uint64_t v30 = v35;
          outlined consume of Text.Layout.Line.Line(v23, *(uint64_t *)&v24, 1);
        }
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
      }
    }
    else
    {
      uint64_t v47 = v13;
      *(_OWORD *)&v48[8] = *(_OWORD *)(a2 + 24);
      *(_DWORD *)CGFloat v48 = *(_DWORD *)(a2 + 40);
      uint64_t v40 = Text.Effect.Keyframes.validTransform(_:)(v18, v52);
      if (v40)
      {
        uint64_t v41 = v40;
        *(void *)&buffer.double x = v23;
        buffer.CGFloat y = v24;
        char v58 = v25;
        long long v59 = *(_OWORD *)&v48[8];
        int v60 = *(_DWORD *)v48;
        Text.Layout.Line.characterRanges(runIndices:)((CFIndex)v20, *(CFIndex *)&v19);
        uint64_t v42 = v51;
        uint64_t v43 = *(void *)(v51 + 16);
        if (v43)
        {
          uint64_t v44 = specialized __RawDictionaryStorage.find<A>(_:)(v18);
          if (v45) {
            uint64_t v43 = *(void *)(*(void *)(v42 + 56) + 8 * v44);
          }
          else {
            uint64_t v43 = 0;
          }
        }
        if (__OFADD__(v43, v17)) {
          goto LABEL_29;
        }
        buffer.double x = v16;
        double v26 = (*(double (**)(int64_t, uint64_t, unsigned char *, CGPoint *, uint64_t, uint64_t, uint64_t, uint64_t))((*MEMORY[0x263F8EED0] & *v41) + 0xF0))(v18, v43 + v17, v15, &buffer, v42, v49, v52, v50);

        (*(void (**)(unsigned char *, uint64_t))(v47 + 8))(v15, v10);
      }
      else
      {
        return 0.0;
      }
    }
  }
  else
  {
    int64_t v37 = v6[9];
    int64_t v36 = v6[10];
    int64_t v38 = v6[8];
    *(void *)&v48[8] = v6[6];
    int64_t v39 = v6[4];
    *(void *)CGFloat v48 = v6[5];
    *(void *)&buffer.double x = v20;
    buffer.CGFloat y = v19;
    char v58 = v39 & 1;
    long long v59 = *(_OWORD *)v48;
    int v60 = v21;
    int64_t v61 = v38;
    int64_t v62 = v37;
    int64_t v63 = v36;
    originsBuffer.double x = v16;
    outlined copy of Text.Layout.Line.Line(v20, *(uint64_t *)&v19, v39 & 1);
    swift_bridgeObjectRetain();
    double v26 = Text.Effect.Composition.metrics(at:context:)(&originsBuffer.x, v51, v49, v52, v50);
    outlined consume of Text.Effect.Composition.Operation(v18, v17, v20, *(uint64_t *)&v19, v39, *(uint64_t *)v48, *(uint64_t *)&v48[8], v21);
  }
  return v26;
}

uint64_t Text.Effect.Composition.appendInteractionMetrics(to:at:context:)(void **a1, uint64_t *a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = *(void *)(v6 + 64);
  uint64_t v9 = *(void *)(result + 16);
  if (v9)
  {
    uint64_t v10 = *a2;
    uint64_t v30 = *(void *)(v6 + 8);
    int64_t v31 = *(void **)v6;
    char v29 = *(unsigned char *)(v6 + 16);
    long long v28 = *(_OWORD *)(v6 + 24);
    int v27 = *(_DWORD *)(v6 + 40);
    unint64_t v22 = a1;
    uint64_t v11 = (uint64_t *)(swift_bridgeObjectRetain() + 56);
    do
    {
      uint64_t v12 = *(v11 - 2);
      uint64_t v13 = (void *)*(v11 - 1);
      uint64_t v14 = *v11;
      uint64_t v15 = v11[1];
      uint64_t v16 = v11[2];
      uint64_t v17 = v11[3];
      unint64_t v18 = v11[4];
      uint64_t v19 = v11[5];
      uint64_t v20 = v11[6];
      uint64_t v21 = v11[7];
      uint64_t v44 = *(v11 - 3);
      uint64_t v45 = v12;
      uint64_t v37 = v12;
      uint64_t v38 = v44;
      CGFloat v46 = v13;
      uint64_t v47 = v14;
      uint64_t v35 = v14;
      int64_t v36 = v13;
      uint64_t v48 = v15;
      uint64_t v49 = v16;
      uint64_t v33 = v16;
      char v34 = v15;
      uint64_t v50 = v17;
      unint64_t v51 = v18;
      uint64_t v32 = v17;
      uint64_t v52 = v19;
      uint64_t v53 = v20;
      uint64_t v54 = v21;
      uint64_t v43 = v10;
      v39[0] = (uint64_t)v31;
      v39[1] = v30;
      char v40 = v29;
      long long v41 = v28;
      int v42 = v27;
      outlined copy of Text.Effect.Composition.Operation(v44, v12, v13, v14, v15, v16, v17, v18);
      outlined copy of Text.Layout.Line.Line(v31, v30, v29);
      Text.Effect.Composition.Operation.appendInteractionMetrics(to:at:line:context:)(v22, &v43, v39, a3, a4, a5, a6);
      outlined consume of Text.Layout.Line.Line(v31, v30, v29);
      outlined consume of Text.Effect.Composition.Operation(v38, v37, v36, v35, v34, v33, v32, v18);
      v11 += 11;
      --v9;
    }
    while (v9);
    return swift_bridgeObjectRelease();
  }
  return result;
}

void Text.Effect.Composition.Operation.appendInteractionMetrics(to:at:line:context:)(void **a1, uint64_t *a2, uint64_t *a3, uint64_t a4, char *a5, uint64_t a6, uint64_t a7)
{
  *(void *)&long long v85 = a7;
  uint64_t v87 = a6;
  uint64_t v83 = a5;
  uint64_t v86 = a4;
  _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, MEMORY[0x263F8EDA0]);
  uint64_t v84 = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v79 - v13;
  uint64_t v15 = *a2;
  uint64_t v16 = *v7;
  CFIndex v17 = v7[1];
  uint64_t v19 = (void *)v7[2];
  uint64_t v18 = v7[3];
  unint64_t v20 = v7[7];
  unint64_t v21 = v20 >> 62;
  if (!(v20 >> 62))
  {
    uint64_t v82 = a1;
    uint64_t v47 = v7[9];
    uint64_t v46 = v7[10];
    uint64_t v48 = v7[8];
    uint64_t v50 = v7[5];
    uint64_t v49 = v7[6];
    uint64_t v51 = v7[4];
    *(void *)&long long v88 = v19;
    *((void *)&v88 + 1) = v18;
    LOBYTE(v89) = v51 & 1;
    uint64_t v90 = v50;
    uint64_t v91 = v49;
    LODWORD(v92) = v20;
    uint64_t v93 = v48;
    uint64_t v94 = v47;
    uint64_t v95 = v46;
    uint64_t v98 = v15;
    uint64_t v84 = v16;
    Swift::UInt v81 = v17;
    outlined copy of Text.Layout.Line.Line(v19, v18, v51 & 1);
    swift_bridgeObjectRetain();
    Text.Effect.Composition.appendInteractionMetrics(to:at:context:)(v82, &v98, v86, v83, v87, v85);
    outlined consume of Text.Effect.Composition.Operation(v84, v81, v19, v18, v51, v50, v49, v20);
    return;
  }
  uint64_t v22 = *a3;
  uint64_t v23 = a3[1];
  char v24 = *((unsigned char *)a3 + 16);
  uint64_t v25 = a3[3];
  uint64_t v26 = a3[4];
  int v27 = *((_DWORD *)a3 + 10);
  if (v21 == 1)
  {
    *(void *)&long long v88 = v22;
    *((void *)&v88 + 1) = v23;
    LOBYTE(v89) = v24;
    uint64_t v90 = v25;
    uint64_t v91 = v26;
    LODWORD(v92) = v27;
    uint64_t v98 = v22;
    uint64_t v99 = v23;
    char v100 = v24;
    uint64_t v101 = v25;
    uint64_t v102 = v26;
    int v103 = v27;
    Text.Layout.Line.characterRanges(runIndices:)(v16, v17);
    long long v28 = Text.Layout.Line.clusters(for:)();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v84);
    uint64_t v29 = *((void *)v28 + 2);
    if (v29)
    {
      LODWORD(v86) = v27;
      char v30 = v24;
      uint64_t v87 = v23;
      uint64_t v31 = type metadata accessor for Text.Effect.InteractionMetrics();
      uint64_t v32 = *(int *)(v31 + 20);
      long long v85 = *(_OWORD *)((char *)a1 + *(int *)(v31 + 28));
      uint64_t v83 = (char *)a1 + v32;
      uint64_t v82 = a1;
      uint64_t v33 = *a1;
      Swift::UInt v81 = (Swift::UInt)v28;
      char v34 = (uint64_t *)(v28 + 48);
      while (1)
      {
        uint64_t v35 = *(v34 - 2);
        uint64_t v36 = *(v34 - 1);
        uint64_t v37 = *v34;
        uint64_t v98 = v22;
        uint64_t v99 = v87;
        char v100 = v30;
        uint64_t v101 = v25;
        uint64_t v102 = v26;
        int v103 = v86;
        swift_bridgeObjectRetain();
        Text.Layout.Cluster.typographicBounds(with:)((uint64_t)&v98, v37, (uint64_t)&v88);
        uint64_t v96 = v35;
        uint64_t v97 = v36;
        if (__OFSUB__(v36, v35)) {
          break;
        }
        if (v36 != v35)
        {
          uint64_t v38 = (void (*)(uint64_t *, void))RangeSet._ranges.modify();
          _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_1(0, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, MEMORY[0x263F8ED78]);
          RangeSet.Ranges._insert(contentsOf:)();
          v38(&v98, 0);
        }
        uint64_t v39 = v91;
        uint64_t v40 = v92;
        uint64_t v41 = v89;
        uint64_t v42 = v90;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v33[2] + 1, 1, v33);
        }
        unint64_t v44 = v33[2];
        unint64_t v43 = v33[3];
        if (v44 >= v43 >> 1) {
          uint64_t v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v43 > 1), v44 + 1, 1, v33);
        }
        v33[2] = v44 + 1;
        uint64_t v45 = &v33[12 * v44];
        v45[4] = v35;
        void v45[5] = v36;
        *((_OWORD *)v45 + 3) = v85;
        v45[8] = v42;
        v45[9] = v39;
        v45[10] = v40;
        v45[11] = v41;
        v45[12] = v42;
        v45[13] = v39;
        v45[14] = v40;
        v45[15] = v41;
        swift_bridgeObjectRelease();
        v34 += 3;
        if (!--v29) {
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      return;
    }
    goto LABEL_31;
  }
  Swift::UInt v81 = v7[1];
  uint64_t v82 = a1;
  Swift::UInt64 v52 = v16;
  uint64_t v53 = Text.Effect.Keyframes.validTransform(_:)(v16, v87);
  if (!v53)
  {
    *(void *)&long long v88 = v22;
    *((void *)&v88 + 1) = v23;
    LOBYTE(v89) = v24;
    uint64_t v90 = v25;
    uint64_t v91 = v26;
    LODWORD(v92) = v27;
    uint64_t v98 = v22;
    uint64_t v99 = v23;
    char v100 = v24;
    uint64_t v101 = v25;
    uint64_t v102 = v26;
    int v103 = v27;
    Text.Layout.Line.characterRanges(runIndices:)((CFIndex)v19, v18);
    uint64_t v57 = Text.Layout.Line.clusters(for:)();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v84);
    uint64_t v58 = *((void *)v57 + 2);
    if (v58)
    {
      LODWORD(v86) = v27;
      char v59 = v24;
      uint64_t v87 = v23;
      uint64_t v60 = type metadata accessor for Text.Effect.InteractionMetrics();
      uint64_t v61 = *(int *)(v60 + 20);
      long long v85 = *(_OWORD *)((char *)v82 + *(int *)(v60 + 28));
      uint64_t v83 = (char *)v82 + v61;
      uint64_t v33 = *v82;
      Swift::UInt v81 = (Swift::UInt)v57;
      int64_t v62 = (uint64_t *)(v57 + 48);
      while (1)
      {
        uint64_t v63 = *(v62 - 2);
        uint64_t v64 = *(v62 - 1);
        uint64_t v65 = *v62;
        uint64_t v98 = v22;
        uint64_t v99 = v87;
        char v100 = v59;
        uint64_t v101 = v25;
        uint64_t v102 = v26;
        int v103 = v86;
        swift_bridgeObjectRetain();
        Text.Layout.Cluster.typographicBounds(with:)((uint64_t)&v98, v65, (uint64_t)&v88);
        uint64_t v96 = v63;
        uint64_t v97 = v64;
        if (__OFSUB__(v64, v63)) {
          break;
        }
        if (v64 != v63)
        {
          CFRange v66 = (void (*)(uint64_t *, void))RangeSet._ranges.modify();
          _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_1(0, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, MEMORY[0x263F8ED78]);
          RangeSet.Ranges._insert(contentsOf:)();
          v66(&v98, 0);
        }
        uint64_t v67 = v91;
        uint64_t v68 = v92;
        uint64_t v69 = v89;
        uint64_t v70 = v90;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v33[2] + 1, 1, v33);
        }
        unint64_t v72 = v33[2];
        unint64_t v71 = v33[3];
        if (v72 >= v71 >> 1) {
          uint64_t v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v71 > 1), v72 + 1, 1, v33);
        }
        v33[2] = v72 + 1;
        uint64_t v73 = &v33[12 * v72];
        void v73[4] = v63;
        v73[5] = v64;
        *((_OWORD *)v73 + 3) = v85;
        uint64_t v73[8] = v70;
        v73[9] = v67;
        v73[10] = v68;
        v73[11] = v69;
        v73[12] = v70;
        v73[13] = v67;
        v73[14] = v68;
        v73[15] = v69;
        swift_bridgeObjectRelease();
        v62 += 3;
        if (!--v58)
        {
LABEL_30:
          swift_bridgeObjectRelease();
          *uint64_t v82 = v33;
          return;
        }
      }
      goto LABEL_40;
    }
LABEL_31:
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v80 = v53;
  uint64_t v54 = type metadata accessor for Text.Effect.InteractionMetrics();
  Swift::UInt v55 = v81;
  if ((specialized Set.contains(_:)(v52, v81, *(uint64_t *)((char *)v82 + *(int *)(v54 + 24))) & 1) == 0)
  {
    specialized Set._Variant.insert(_:)(&v88, v52, v55);
    uint64_t v74 = v86;
    uint64_t v75 = *(void *)(v86 + 16);
    if (v75)
    {
      Swift::UInt64 v76 = v52;
      uint64_t v77 = specialized __RawDictionaryStorage.find<A>(_:)(v52);
      if (v78) {
        uint64_t v75 = *(void *)(*(void *)(v74 + 56) + 8 * v77);
      }
      else {
        uint64_t v75 = 0;
      }
    }
    else
    {
      Swift::UInt64 v76 = v52;
    }
    if (!__OFADD__(v75, v81))
    {
      *(void *)&long long v88 = v15;
      (*(void (**)(Swift::UInt64, Swift::UInt, void **, long long *, uint64_t, char *, uint64_t, void))((*MEMORY[0x263F8EED0] & *v80) + 0x100))(v76, v75 + v81, v82, &v88, v74, v83, v87, v85);

      return;
    }
    goto LABEL_41;
  }
  id v56 = v80;
}

uint64_t Text.Effect.Composition.Operation.resolve(line:in:)(uint64_t a1, uint64_t a2)
{
  _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, MEMORY[0x263F8EDA0]);
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v137 - v9;
  Swift::UInt64 v11 = *v2;
  uint64_t v12 = v2[1];
  uint64_t v13 = (void *)v2[2];
  uint64_t v14 = v2[3];
  Swift::UInt64 v15 = v2[7] >> 62;
  if (v15)
  {
    CFIndex v146 = v2[3];
    uint64_t v16 = *(void **)a1;
    CGFloat v145 = *(double *)(a1 + 8);
    uint64_t v17 = *(unsigned __int8 *)(a1 + 16);
    CGFloat v19 = *(double *)(a1 + 24);
    CGFloat v18 = *(double *)(a1 + 32);
    uint64_t v20 = *(unsigned int *)(a1 + 40);
    if (v15 == 1)
    {
      uint64_t v21 = *(void *)a2;
      uint64_t v22 = *(void *)(*(void *)(v21 + 16) + 64);
      if (*(void *)(v22 + 16)
        && (unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v11), (v24 & 1) != 0)
        && (CGFloat v25 = *(double *)(*(void *)(v22 + 56) + 8 * v23), v25 != 0.0))
      {
        swift_retain();
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v91 = *(void *)(v21 + 24);
          uint64_t v92 = *(void *)(v21 + 32);
          uint64_t v93 = *(void *)(v21 + 40);
          uint64_t v94 = *(void *)(v21 + 48);
          uint64_t v96 = *(void *)(v21 + 56);
          uint64_t v95 = *(void *)(v21 + 64);
        }
        else
        {
          type metadata accessor for Text.Effect.DrawingContext.Storage();
          uint64_t v120 = swift_allocObject();
          *(_OWORD *)(v120 + 104) = 0u;
          *(_OWORD *)(v120 + 120) = 0u;
          *(_OWORD *)(v120 + 136) = 0u;
          __asm { FMOV            V0.2D, #1.0 }
          *(_OWORD *)(v120 + 152) = _Q0;
          *(void *)(v120 + 168) = 0x3FF0000000000000;
          *(unsigned char *)(v120 + 176) = 0;
          CFIndex v146 = *(void *)(v21 + 16);
          *(void *)(v120 + 16) = v146;
          uint64_t v92 = *(void *)(v21 + 32);
          uint64_t v147 = *(void **)(v21 + 24);
          uint64_t v93 = *(void *)(v21 + 40);
          uint64_t v94 = *(void *)(v21 + 48);
          uint64_t v96 = *(void *)(v21 + 56);
          uint64_t v95 = *(void *)(v21 + 64);
          *(void *)(v120 + 24) = v147;
          *(void *)(v120 + 32) = v92;
          *(void *)(v120 + 40) = v93;
          *(void *)(v120 + 48) = v94;
          *(void *)(v120 + 56) = v96;
          *(void *)(v120 + 64) = v95;
          *(void *)(v120 + 72) = *(void *)(v21 + 72);
          uint64_t v144 = v17;
          uint64_t v123 = *(void *)(v21 + 184);
          uint64_t v122 = *(void *)(v21 + 192);
          uint64_t v143 = v20;
          uint64_t v124 = v12;
          uint64_t v125 = *(void *)(v21 + 200);
          uint64_t v126 = *(void *)(v21 + 208);
          uint64_t v127 = *(void *)(v21 + 216);
          *(void *)(v120 + 184) = v123;
          *(void *)(v120 + 192) = v122;
          *(void *)(v120 + 200) = v125;
          *(void *)(v120 + 208) = v126;
          *(void *)(v120 + 216) = v127;
          swift_retain();
          swift_retain();
          uint64_t v128 = v125;
          uint64_t v12 = v124;
          uint64_t v20 = v143;
          outlined copy of Text.Effect.StopCollector?(v123, v122, v128, v126);
          outlined consume of Text.Effect.StopCollector?(0, 0, 0, 0);
          uint64_t v129 = *(void *)(v21 + 80);
          uint64_t v130 = *(void *)(v21 + 88);
          LOBYTE(v123) = *(unsigned char *)(v21 + 96);
          swift_release();
          *(void *)(v120 + 80) = v129;
          *(void *)(v120 + 88) = v130;
          uint64_t v17 = v144;
          *(unsigned char *)(v120 + 96) = v123;
          swift_release();
          uint64_t v91 = (uint64_t)v147;
          uint64_t v21 = v120;
        }
        uint64_t v149 = v91;
        *(void *)&long long v150 = v92;
        *((void *)&v150 + 1) = v93;
        *(void *)uint64_t v151 = v94;
        *(void *)&v151[8] = v96;
        *(void *)&v151[16] = v95;
        CGAffineTransformTranslate(&v153, (CGAffineTransform *)&v149, v25, 0.0);
        long long v131 = *(_OWORD *)&v153.c;
        long long v132 = *(_OWORD *)&v153.tx;
        *(_OWORD *)(v21 + 24) = *(_OWORD *)&v153.a;
        *(_OWORD *)(v21 + 40) = v131;
        *(_OWORD *)(v21 + 56) = v132;
      }
      else
      {
        swift_retain();
      }
      char v26 = *(unsigned char *)(v21 + 96);
      long long v27 = 0uLL;
      if ((v26 & 1) == 0) {
        long long v27 = *(_OWORD *)(v21 + 80);
      }
      uint64_t v149 = (uint64_t)v16;
      uint64_t v28 = *(void *)&v145;
      *(CGFloat *)&long long v150 = v145;
      *((void *)&v150 + 1) = v17;
      *(CGFloat *)uint64_t v151 = v19;
      *(CGFloat *)&v151[8] = v18;
      *(void *)&v151[16] = v20;
      *(void *)&v151[24] = v11;
      *(void *)&v151[32] = v12;
      *(_OWORD *)&v151[40] = v27;
      char v152 = v26;
      outlined copy of Text.Layout.Line.Line(v16, *(uint64_t *)&v145, v17);
      Text.Effect.DrawingContext.Storage.append(_:)((uint64_t)&v149);
      outlined consume of Text.Layout.Line.Line(v16, v28, v17);
      return swift_release();
    }
    uint64_t v143 = v20;
    uint64_t v144 = v17;
    uint64_t v57 = v12;
    uint64_t v147 = v13;
    uint64_t v58 = *(void *)a2;
    char v59 = Text.Effect.Keyframes.validTransform(_:)(v11, *(void *)(*(void *)(*(void *)a2 + 16) + 48));
    if (v59)
    {
      uint64_t v60 = v59;
      uint64_t v61 = *(void *)(a2 + 24);
      char v62 = *(unsigned char *)(a2 + 32);
      uint64_t v63 = *(void *)(a2 + 40);
      uint64_t v149 = v58;
      long long v150 = *(_OWORD *)(a2 + 8);
      *(void *)uint64_t v151 = v61;
      v151[8] = v62;
      *(void *)&v151[16] = v63;
      uint64_t v64 = *(void *)(*(void *)(v58 + 16) + 72);
      if (*(void *)(v64 + 16)
        && (unint64_t v65 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v57), (v66 & 1) != 0)
        && (CGFloat v3 = *(double *)(*(void *)(v64 + 56) + 8 * v65), v3 != 0.0))
      {
        swift_retain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          type metadata accessor for Text.Effect.DrawingContext.Storage();
          uint64_t v97 = swift_allocObject();
          *(_OWORD *)(v97 + 104) = 0u;
          *(_OWORD *)(v97 + 120) = 0u;
          *(_OWORD *)(v97 + 136) = 0u;
          __asm { FMOV            V0.2D, #1.0 }
          *(_OWORD *)(v97 + 152) = _Q0;
          *(void *)(v97 + 168) = 0x3FF0000000000000;
          *(unsigned char *)(v97 + 176) = 0;
          *((void *)&v142 + 1) = *(void *)(v58 + 16);
          *(void *)(v97 + 16) = *((void *)&v142 + 1);
          long long v99 = *(_OWORD *)(v58 + 40);
          long long v100 = *(_OWORD *)(v58 + 56);
          *(_OWORD *)(v97 + 24) = *(_OWORD *)(v58 + 24);
          *(_OWORD *)(v97 + 40) = v99;
          *(_OWORD *)(v97 + 56) = v100;
          *(void *)(v97 + 72) = *(void *)(v58 + 72);
          *(void *)&long long v142 = *(void *)(v58 + 184);
          uint64_t v141 = *(void *)(v58 + 192);
          uint64_t v101 = v141;
          uint64_t v140 = *(void *)(v58 + 200);
          uint64_t v102 = v140;
          uint64_t v139 = *(void *)(v58 + 208);
          uint64_t v103 = v139;
          Swift::UInt64 v138 = *(void *)(v58 + 216);
          Swift::UInt64 v104 = v138;
          *(void *)(v97 + 184) = v142;
          *(void *)(v97 + 192) = v101;
          *(void *)(v97 + 200) = v102;
          *(void *)(v97 + 208) = v103;
          *(void *)(v97 + 216) = v104;
          swift_retain();
          swift_retain();
          outlined copy of Text.Effect.StopCollector?(v142, v141, v140, v139);
          outlined consume of Text.Effect.StopCollector?(0, 0, 0, 0);
          *((void *)&v142 + 1) = *(void *)(v58 + 80);
          *(void *)&long long v142 = *(void *)(v58 + 88);
          LODWORD(v141) = *(unsigned __int8 *)(v58 + 96);
          swift_release();
          uint64_t v105 = v142;
          *(void *)(v97 + 80) = *((void *)&v142 + 1);
          *(void *)(v97 + 88) = v105;
          *(unsigned char *)(v97 + 96) = v141;
          uint64_t v149 = v97;
          swift_release();
          uint64_t v58 = v97;
        }
        long long v106 = *(_OWORD *)(v58 + 40);
        *(_OWORD *)&v153.a = *(_OWORD *)(v58 + 24);
        *(_OWORD *)&v153.c = v106;
        *(_OWORD *)&v153.tdouble x = *(_OWORD *)(v58 + 56);
        CGAffineTransformTranslate(&v148, &v153, v3, 0.0);
        long long v107 = *(_OWORD *)&v148.c;
        long long v108 = *(_OWORD *)&v148.tx;
        *(_OWORD *)(v58 + 24) = *(_OWORD *)&v148.a;
        *(_OWORD *)(v58 + 40) = v107;
        *(_OWORD *)(v58 + 56) = v108;
      }
      else
      {
        swift_retain();
      }
      *(void *)&v153.a = v16;
      v153.b = v145;
      LOBYTE(v153.c) = v144;
      v153.d = v19;
      v153.tdouble x = v18;
      LODWORD(v153.ty) = v143;
      Text.Layout.Line.characterRanges(runIndices:)((CFIndex)v147, v146);
      uint64_t v67 = *(void *)(*(void *)(*(void *)a2 + 16) + 32);
      uint64_t v68 = *(void *)(v67 + 16);
      if (v68)
      {
        uint64_t v69 = specialized __RawDictionaryStorage.find<A>(_:)(v11);
        if (v70) {
          uint64_t v68 = *(void *)(*(void *)(v67 + 56) + 8 * v69);
        }
        else {
          uint64_t v68 = 0;
        }
      }
      if (!__OFADD__(v68, v57))
      {
        (*(void (**)(Swift::UInt64, uint64_t, char *, uint64_t *))((*MEMORY[0x263F8EED0] & *v60) + 0xE0))(v11, v68 + v57, v10, &v149);

        (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
        return swift_release();
      }
      __break(1u);
    }
    else
    {
      uint64_t v72 = *(void *)(*(void *)(v58 + 16) + 64);
      CGFloat v3 = 0.0;
      if (*(void *)(v72 + 16))
      {
        unint64_t v73 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v147);
        uint64_t v57 = v144;
        if (v74) {
          CGFloat v3 = *(double *)(*(void *)(v72 + 56) + 8 * v73);
        }
      }
      else
      {
        uint64_t v57 = v144;
      }
      LODWORD(a2) = _SwiftUIIsAppleInternalBuild();
      if (!a2)
      {
        unint64_t v81 = 0;
        unint64_t v82 = 0;
        goto LABEL_33;
      }
    }
    LOBYTE(v149) = 0;
    float v133 = specialized Color.Resolved.init(colorSpace:red:green:blue:opacity:)(&v149, 1.0, 0.0, 0.0);
    unint64_t v81 = LODWORD(v133) | ((unint64_t)v134 << 32);
    unint64_t v82 = v135 | ((unint64_t)v136 << 32);
LABEL_33:
    char v83 = a2 ^ 1;
    swift_retain();
    if (v3 == 0.0)
    {
      uint64_t v84 = *(void *)&v145;
      if (*(unsigned char *)(v58 + 96))
      {
LABEL_36:
        uint64_t v149 = (uint64_t)v16;
        *(void *)&long long v150 = v84;
        *((void *)&v150 + 1) = v57;
        *(CGFloat *)uint64_t v151 = v19;
        *(CGFloat *)&v151[8] = v18;
        *(void *)&v151[16] = v143;
        *(void *)&v151[24] = v147;
        *(void *)&v151[32] = v146;
        *(void *)&v151[40] = v81;
        *(void *)&v151[48] = v82;
        char v152 = v83;
        outlined copy of Text.Layout.Line.Line(v16, v84, v57);
        Text.Effect.DrawingContext.Storage.append(_:)((uint64_t)&v149);
        outlined consume of Text.Layout.Line.Line(v16, v84, v57);
        return swift_release();
      }
    }
    else
    {
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        uint64_t v85 = *(void *)(v58 + 24);
        uint64_t v86 = *(void *)(v58 + 32);
        uint64_t v87 = *(void *)(v58 + 40);
        uint64_t v88 = *(void *)(v58 + 48);
        uint64_t v90 = *(void *)(v58 + 56);
        uint64_t v89 = *(void *)(v58 + 64);
      }
      else
      {
        type metadata accessor for Text.Effect.DrawingContext.Storage();
        uint64_t v109 = swift_allocObject();
        *(_OWORD *)(v109 + 104) = 0u;
        *(_OWORD *)(v109 + 120) = 0u;
        *(_OWORD *)(v109 + 136) = 0u;
        __asm { FMOV            V0.2D, #1.0 }
        *(_OWORD *)(v109 + 152) = _Q0;
        *(void *)(v109 + 168) = 0x3FF0000000000000;
        *(unsigned char *)(v109 + 176) = 0;
        *(void *)(v109 + 16) = *(void *)(v58 + 16);
        uint64_t v86 = *(void *)(v58 + 32);
        uint64_t v141 = *(void *)(v58 + 24);
        uint64_t v87 = *(void *)(v58 + 40);
        uint64_t v88 = *(void *)(v58 + 48);
        uint64_t v90 = *(void *)(v58 + 56);
        uint64_t v89 = *(void *)(v58 + 64);
        *(void *)(v109 + 24) = v141;
        *(void *)(v109 + 32) = v86;
        *(void *)(v109 + 40) = v87;
        *(void *)(v109 + 48) = v88;
        *(void *)(v109 + 56) = v90;
        *(void *)(v109 + 64) = v89;
        *(void *)(v109 + 72) = *(void *)(v58 + 72);
        *(void *)&long long v142 = v82;
        uint64_t v111 = *(void *)(v58 + 184);
        uint64_t v112 = *(void *)(v58 + 192);
        *((void *)&v142 + 1) = v81;
        uint64_t v113 = *(void *)(v58 + 200);
        uint64_t v114 = *(void *)(v58 + 208);
        uint64_t v115 = *(void *)(v58 + 216);
        *(void *)(v109 + 184) = v111;
        *(void *)(v109 + 192) = v112;
        *(void *)(v109 + 200) = v113;
        *(void *)(v109 + 208) = v114;
        *(void *)(v109 + 216) = v115;
        swift_retain();
        swift_retain();
        uint64_t v57 = v144;
        outlined copy of Text.Effect.StopCollector?(v111, v112, v113, v114);
        outlined consume of Text.Effect.StopCollector?(0, 0, 0, 0);
        uint64_t v116 = *(void *)(v58 + 80);
        uint64_t v117 = *(void *)(v58 + 88);
        LOBYTE(v112) = *(unsigned char *)(v58 + 96);
        swift_release();
        *(void *)(v109 + 80) = v116;
        *(void *)(v109 + 88) = v117;
        unint64_t v81 = *((void *)&v142 + 1);
        unint64_t v82 = v142;
        *(unsigned char *)(v109 + 96) = v112;
        swift_release();
        uint64_t v85 = v141;
        uint64_t v58 = v109;
      }
      uint64_t v84 = *(void *)&v145;
      uint64_t v149 = v85;
      *(void *)&long long v150 = v86;
      *((void *)&v150 + 1) = v87;
      *(void *)uint64_t v151 = v88;
      *(void *)&v151[8] = v90;
      *(void *)&v151[16] = v89;
      CGAffineTransformTranslate(&v153, (CGAffineTransform *)&v149, v3, 0.0);
      long long v118 = *(_OWORD *)&v153.c;
      long long v119 = *(_OWORD *)&v153.tx;
      *(_OWORD *)(v58 + 24) = *(_OWORD *)&v153.a;
      *(_OWORD *)(v58 + 40) = v118;
      *(_OWORD *)(v58 + 56) = v119;
      if (*(unsigned char *)(v58 + 96)) {
        goto LABEL_36;
      }
    }
    char v83 = 0;
    unint64_t v81 = *(void *)(v58 + 80);
    unint64_t v82 = *(void *)(v58 + 88);
    goto LABEL_36;
  }
  CGFloat v145 = *((double *)v2 + 7);
  uint64_t v144 = v12;
  uint64_t v147 = v13;
  uint64_t v29 = v11;
  Swift::UInt64 v30 = v2[4];
  uint64_t v31 = v2[5];
  uint64_t v32 = v2[6];
  uint64_t v33 = v2[8];
  uint64_t v34 = v2[9];
  Swift::UInt64 v35 = v2[10];
  uint64_t v143 = *(void *)a2;
  uint64_t v36 = Text.Effect.Keyframes.validFilter(_:)(v29, *(void *)(*(void *)(v143 + 16) + 48));
  if (!v36)
  {
    uint64_t v149 = (uint64_t)v147;
    *(void *)&long long v150 = v14;
    BYTE8(v150) = v30 & 1;
    *(void *)uint64_t v151 = v31;
    *(void *)&v151[8] = v32;
    *(_DWORD *)&v151[16] = LODWORD(v145);
    *(void *)&v151[24] = v33;
    *(void *)&v151[32] = v34;
    *(void *)&v151[40] = v35;
    return Text.Effect.Composition.resolve(in:)(a2);
  }
  uint64_t v37 = v36;
  Swift::UInt64 v138 = v35;
  uint64_t v139 = v34;
  uint64_t v140 = v33;
  uint64_t v141 = v29;
  CFIndex v146 = v14;
  *(void *)&long long v142 = v31;
  *((void *)&v142 + 1) = v32;
  int v38 = LODWORD(v145);
  outlined copy of Text.Effect.Composition.Operation(v29, v144, v147, v14, v30, v31, v32, *(unint64_t *)&v145);

  uint64_t v39 = *(void **)(v143 + 16);
  uint64_t v40 = v39[3];
  uint64_t v41 = v39[4];
  uint64_t v42 = v39[5];
  uint64_t v43 = v39[6];
  uint64_t v44 = v39[7];
  uint64_t v46 = v39[8];
  uint64_t v45 = v39[9];
  type metadata accessor for Text.Effect.DrawingContext.Storage.Shared();
  uint64_t v47 = (void *)swift_allocObject();
  _OWORD v47[3] = v40;
  v47[4] = v41;
  v47[5] = v42;
  v47[6] = v43;
  v47[7] = v44;
  v47[8] = v46;
  v47[9] = v45;
  v47[2] = MEMORY[0x263F8EE78];
  type metadata accessor for Text.Effect.DrawingContext.Storage();
  uint64_t v48 = swift_allocObject();
  *(void *)(v48 + 32) = 0;
  *(void *)(v48 + 40) = 0;
  *(void *)(v48 + 48) = 0x3FF0000000000000;
  *(void *)(v48 + 56) = 0;
  *(void *)(v48 + 64) = 0;
  *(void *)(v48 + 72) = 0x3FF0000000000000;
  *(void *)(v48 + 80) = 0;
  *(void *)(v48 + 88) = 0;
  *(unsigned char *)(v48 + 96) = 1;
  *(_OWORD *)(v48 + 104) = 0u;
  *(_OWORD *)(v48 + 120) = 0u;
  *(_OWORD *)(v48 + 136) = 0u;
  __asm { FMOV            V1.2D, #1.0 }
  *(_OWORD *)(v48 + 152) = _Q1;
  *(void *)(v48 + 168) = 0x3FF0000000000000;
  *(unsigned char *)(v48 + 176) = 0;
  *(_OWORD *)(v48 + 184) = 0u;
  *(_OWORD *)(v48 + 200) = 0u;
  *(void *)(v48 + 216) = 0;
  *(void *)(v48 + 16) = v47;
  *(void *)(v48 + 24) = 0x3FF0000000000000;
  uint64_t v54 = MEMORY[0x24C527E00](v44 + 16);
  if (v54)
  {
    Swift::UInt v55 = (void *)v54;
    CGFloat v56 = *(double *)(v54 + OBJC_IVAR____TtC7SwiftUI19TextEffectsRenderer_contentsScale);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    CGFloat v56 = 1.0;
  }
  *(void *)&v153.a = v48;
  memset(&v153.b, 0, 24);
  LOBYTE(v153.tx) = 1;
  v153.tCGFloat y = v56;
  uint64_t v149 = (uint64_t)v147;
  *(void *)&long long v150 = v146;
  Swift::UInt64 v137 = v30;
  BYTE8(v150) = v30 & 1;
  uint64_t v75 = v142;
  *(_OWORD *)uint64_t v151 = v142;
  uint64_t v76 = *((void *)&v142 + 1);
  *(_DWORD *)&v151[16] = v38;
  *(void *)&v151[24] = v140;
  *(void *)&v151[32] = v139;
  *(void *)&v151[40] = v138;
  Text.Effect.Composition.resolve(in:)(&v153);
  uint64_t v77 = *(void *)(*(void *)&v153.a + 16);
  swift_beginAccess();
  uint64_t v78 = *(void *)(v77 + 16);
  *(void *)(v77 + 16) = MEMORY[0x263F8EE78];
  uint64_t v79 = v141;
  uint64_t v149 = v141;
  uint64_t v80 = v144;
  *(void *)&long long v150 = v144;
  *((void *)&v150 + 1) = v78;
  memset(v151, 0, sizeof(v151));
  char v152 = 0x80;
  swift_bridgeObjectRetain();
  Text.Effect.DrawingContext.Storage.append(_:)((uint64_t)&v149);
  swift_bridgeObjectRelease_n();
  outlined consume of Text.Effect.Composition.Operation(v79, v80, v147, v146, v137, v75, v76, *(unint64_t *)&v145);
  return swift_release();
}

unint64_t Text.Effect.Composition.DisplacementCollector.recordTransform(_:)(Swift::UInt64 a1, Swift::UInt a2)
{
  if (!*(void *)(*(void *)(v2 + 104) + 16)
    || (unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2), (v6 & 1) == 0))
  {
    double v7 = *(double *)(v2 + 88);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *(void *)(v2 + 104);
    *(void *)(v2 + 104) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, isUniquelyReferenced_nonNull_native, v7);
    *(void *)(v2 + 104) = v9;
    return swift_bridgeObjectRelease();
  }
  return result;
}

void Text.Effect.Composition.Operation.appendDisplacement(to:)(uint64_t a1)
{
  _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, MEMORY[0x263F8EDA0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  double v7 = &v62[-v6 - 16];
  Swift::UInt64 v8 = v1[7] >> 62;
  if (!v8)
  {
    Swift::UInt64 v28 = v1[10];
    uint64_t v29 = *(void *)(v28 + 16);
    if (v29)
    {
      swift_bridgeObjectRetain();
      Swift::UInt64 v30 = v28 + 64;
      do
      {
        uint64_t v31 = *(void *)(v30 + 48);
        long long v32 = *(_OWORD *)(v30 - 16);
        long long v61 = *(_OWORD *)(v30 - 32);
        *(_OWORD *)char v62 = v32;
        long long v33 = *(_OWORD *)(v30 + 16);
        *(_OWORD *)&v62[16] = *(_OWORD *)v30;
        long long v63 = v33;
        long long v64 = *(_OWORD *)(v30 + 32);
        uint64_t v65 = v31;
        Text.Effect.Composition.Operation.appendDisplacement(to:)(a1);
        v30 += 88;
        --v29;
      }
      while (v29);
      swift_bridgeObjectRelease();
    }
    return;
  }
  int64_t v9 = *v1;
  int64_t v10 = v1[1];
  if (v8 != 1)
  {
    CFIndex v34 = v1[2];
    CFIndex v35 = v1[3];
    uint64_t v36 = Text.Effect.Keyframes.validTransform(_:)(*v1, *(void *)(a1 + 72));
    if (v36)
    {
      uint64_t v37 = v36;
      Text.Effect.Composition.DisplacementCollector.recordTransform(_:)(v9, v10);
      char v38 = *(unsigned char *)(a1 + 24);
      int v39 = *(_DWORD *)(a1 + 48);
      long long v61 = *(_OWORD *)(a1 + 8);
      v62[0] = v38;
      *(_OWORD *)&v62[8] = *(_OWORD *)(a1 + 32);
      *(_DWORD *)&v62[24] = v39;
      Text.Layout.Line.characterRanges(runIndices:)(v34, v35);
      uint64_t v40 = *(void *)(a1 + 56);
      uint64_t v41 = *(void *)(v40 + 16);
      if (v41)
      {
        uint64_t v42 = specialized __RawDictionaryStorage.find<A>(_:)(v9);
        if (v43) {
          uint64_t v41 = *(void *)(*(void *)(v40 + 56) + 8 * v42);
        }
        else {
          uint64_t v41 = 0;
        }
      }
      if (__OFADD__(v41, v10)) {
        goto LABEL_63;
      }
      *(void *)&long long v61 = *(void *)a1;
      double v60 = (*(double (**)(int64_t, uint64_t, unsigned char *, long long *, uint64_t, void, void, void))((*MEMORY[0x263F8EED0] & *v37) + 0xF8))(v9, v41 + v10, v7, &v61, v40, *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80));

      (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
      *(double *)(a1 + 88) = v60 + *(double *)(a1 + 88);
      return;
    }
    if (v34 == v35) {
      return;
    }
    if (v35 < v34) {
      goto LABEL_65;
    }
    while (1)
    {
      if (v34 >= v35) {
        goto LABEL_59;
      }
      if (*(void *)(*(void *)(a1 + 96) + 16))
      {
        specialized __RawDictionaryStorage.find<A>(_:)(v34);
        if (v44) {
          goto LABEL_38;
        }
      }
      uint64_t v45 = *(void *)(a1 + 88);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&long long v61 = *(void *)(a1 + 96);
      uint64_t v47 = v61;
      *(void *)(a1 + 96) = 0x8000000000000000;
      unint64_t v49 = specialized __RawDictionaryStorage.find<A>(_:)(v34);
      uint64_t v50 = *(void *)(v47 + 16);
      BOOL v51 = (v48 & 1) == 0;
      uint64_t v52 = v50 + v51;
      if (__OFADD__(v50, v51)) {
        goto LABEL_61;
      }
      char v53 = v48;
      if (*(void *)(v47 + 24) >= v52)
      {
        if (isUniquelyReferenced_nonNull_native)
        {
          CGFloat v56 = (void *)v61;
          if ((v48 & 1) == 0) {
            goto LABEL_49;
          }
        }
        else
        {
          specialized _NativeDictionary.copy()();
          CGFloat v56 = (void *)v61;
          if ((v53 & 1) == 0) {
            goto LABEL_49;
          }
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v52, isUniquelyReferenced_nonNull_native);
        unint64_t v54 = specialized __RawDictionaryStorage.find<A>(_:)(v34);
        if ((v53 & 1) != (v55 & 1)) {
          goto LABEL_66;
        }
        unint64_t v49 = v54;
        CGFloat v56 = (void *)v61;
        if ((v53 & 1) == 0)
        {
LABEL_49:
          v56[(v49 >> 6) + 8] |= 1 << v49;
          uint64_t v57 = 8 * v49;
          *(void *)(v56[6] + v57) = v34;
          *(void *)(v56[7] + v57) = v45;
          uint64_t v58 = v56[2];
          BOOL v26 = __OFADD__(v58, 1);
          uint64_t v59 = v58 + 1;
          if (v26) {
            goto LABEL_62;
          }
          _OWORD v56[2] = v59;
          goto LABEL_37;
        }
      }
      *(void *)(v56[7] + 8 * v49) = v45;
LABEL_37:
      *(void *)(a1 + 96) = v56;
      swift_bridgeObjectRelease();
LABEL_38:
      if (v35 == ++v34) {
        return;
      }
    }
  }
  if (v9 == v10) {
    return;
  }
  if (v10 < v9) {
    goto LABEL_64;
  }
  while (v9 < v10)
  {
    if (*(void *)(*(void *)(a1 + 96) + 16))
    {
      specialized __RawDictionaryStorage.find<A>(_:)(v9);
      if (v11) {
        goto LABEL_8;
      }
    }
    uint64_t v12 = *(void *)(a1 + 88);
    char v13 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v61 = *(void *)(a1 + 96);
    uint64_t v14 = v61;
    *(void *)(a1 + 96) = 0x8000000000000000;
    unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v9);
    uint64_t v17 = *(void *)(v14 + 16);
    BOOL v18 = (v15 & 1) == 0;
    uint64_t v19 = v17 + v18;
    if (__OFADD__(v17, v18)) {
      goto LABEL_58;
    }
    char v20 = v15;
    if (*(void *)(v14 + 24) >= v19)
    {
      if (v13)
      {
        unint64_t v23 = (void *)v61;
        if ((v15 & 1) == 0) {
          goto LABEL_19;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        unint64_t v23 = (void *)v61;
        if ((v20 & 1) == 0) {
          goto LABEL_19;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v19, v13);
      unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(v9);
      if ((v20 & 1) != (v22 & 1)) {
        goto LABEL_66;
      }
      unint64_t v16 = v21;
      unint64_t v23 = (void *)v61;
      if ((v20 & 1) == 0)
      {
LABEL_19:
        v23[(v16 >> 6) + 8] |= 1 << v16;
        uint64_t v24 = 8 * v16;
        *(void *)(v23[6] + v24) = v9;
        *(void *)(v23[7] + v24) = v12;
        uint64_t v25 = v23[2];
        BOOL v26 = __OFADD__(v25, 1);
        uint64_t v27 = v25 + 1;
        if (v26) {
          goto LABEL_60;
        }
        v23[2] = v27;
        goto LABEL_7;
      }
    }
    *(void *)(v23[7] + 8 * v16) = v12;
LABEL_7:
    *(void *)(a1 + 96) = v23;
    swift_bridgeObjectRelease();
LABEL_8:
    if (v10 == ++v9) {
      return;
    }
  }
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

uint64_t Text.Effect.Composition.updateNonadjacentFragmentIdentifiers(map:)(uint64_t result)
{
  uint64_t v2 = *(void **)(v1 + 64);
  uint64_t v3 = v2[2];
  if (v3)
  {
    uint64_t v4 = v1;
    uint64_t v5 = result;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_9:
    }
      uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
    unint64_t v6 = 0;
    double v7 = v2 + 4;
    do
    {
      if (v6 >= v2[2])
      {
        __break(1u);
        goto LABEL_9;
      }
      ++v6;
      unint64_t result = Text.Effect.Composition.Run.updateNonadjacentFragmentIdentifiers(map:)(v5);
      v7 += 11;
    }
    while (v3 != v6);
    *(void *)(v4 + 64) = v2;
  }
  return result;
}

uint64_t FragmentIdentifierOffsetMap.countMap.getter(uint64_t a1)
{
  uint64_t v30 = a1 + 64;
  uint64_t v2 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  unint64_t v4 = v3 & *(void *)(a1 + 64);
  int64_t v5 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v6 = 0;
  double v7 = (void *)MEMORY[0x263F8EE80];
  while (1)
  {
    if (v4)
    {
      unint64_t v8 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      unint64_t v9 = v8 | (v6 << 6);
    }
    else
    {
      int64_t v10 = v6 + 1;
      if (__OFADD__(v6, 1)) {
        goto LABEL_38;
      }
      if (v10 >= v5)
      {
LABEL_34:
        swift_release();
        return (uint64_t)v7;
      }
      unint64_t v11 = *(void *)(v30 + 8 * v10);
      ++v6;
      if (!v11)
      {
        int64_t v6 = v10 + 1;
        if (v10 + 1 >= v5) {
          goto LABEL_34;
        }
        unint64_t v11 = *(void *)(v30 + 8 * v6);
        if (!v11)
        {
          int64_t v6 = v10 + 2;
          if (v10 + 2 >= v5) {
            goto LABEL_34;
          }
          unint64_t v11 = *(void *)(v30 + 8 * v6);
          if (!v11)
          {
            int64_t v12 = v10 + 3;
            if (v12 >= v5) {
              goto LABEL_34;
            }
            unint64_t v11 = *(void *)(v30 + 8 * v12);
            if (!v11)
            {
              while (1)
              {
                int64_t v6 = v12 + 1;
                if (__OFADD__(v12, 1)) {
                  goto LABEL_39;
                }
                if (v6 >= v5) {
                  goto LABEL_34;
                }
                unint64_t v11 = *(void *)(v30 + 8 * v6);
                ++v12;
                if (v11) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v6 = v12;
          }
        }
      }
LABEL_21:
      unint64_t v4 = (v11 - 1) & v11;
      unint64_t v9 = __clz(__rbit64(v11)) + (v6 << 6);
    }
    uint64_t v13 = *(void *)(*(void *)(a1 + 56) + 24 * v9 + 16);
    uint64_t v14 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    uint64_t v15 = *(void *)(*(void *)(a1 + 48) + 8 * v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v15);
    uint64_t v19 = v7[2];
    BOOL v20 = (v17 & 1) == 0;
    uint64_t v21 = v19 + v20;
    if (__OFADD__(v19, v20)) {
      goto LABEL_36;
    }
    char v22 = v17;
    if (v7[3] >= v21)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        if (v17) {
          goto LABEL_4;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if (v22) {
          goto LABEL_4;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v21, isUniquelyReferenced_nonNull_native);
      uint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v15);
      if ((v22 & 1) != (v24 & 1)) {
        goto LABEL_40;
      }
      unint64_t v18 = v23;
      if (v22)
      {
LABEL_4:
        *(void *)(v7[7] + 8 * v18) = v14;
        goto LABEL_5;
      }
    }
    v7[(v18 >> 6) + 8] |= 1 << v18;
    uint64_t v25 = 8 * v18;
    *(void *)(v7[6] + v25) = v15;
    *(void *)(v7[7] + v25) = v14;
    uint64_t v26 = v7[2];
    BOOL v27 = __OFADD__(v26, 1);
    uint64_t v28 = v26 + 1;
    if (v27) {
      goto LABEL_37;
    }
    _OWORD v7[2] = v28;
LABEL_5:
    swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t Text.Effect.Composition.Run.updateNonadjacentFragmentIdentifiers(map:)(uint64_t result)
{
  uint64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  int64_t v6 = (void *)v1[2];
  uint64_t v5 = v1[3];
  unint64_t v7 = v1[7];
  if (v7 >> 62)
  {
    if (v7 >> 62 != 1)
    {
      uint64_t result = FragmentIdentifierOffsetMap.offset(for:runIndices:)(*v1, v1[2], v1[3]);
      if (!__OFADD__(v4, result))
      {
        *uint64_t v1 = v3;
        v1[1] = v4 + result;
        v1[2] = (uint64_t)v6;
        v1[3] = v5;
        v1[5] = 0;
        v1[6] = 0;
        v1[4] = 0;
        v1[7] = 0x8000000000000000;
        v1[9] = 0;
        v1[10] = 0;
        v1[8] = 0;
        return result;
      }
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v9 = v1[9];
    unint64_t v8 = (void *)v1[10];
    uint64_t v20 = v1[4];
    uint64_t v21 = v1[6];
    uint64_t v22 = v1[5];
    uint64_t v23 = v1[8];
    outlined copy of Text.Layout.Line.Line(v6, v5, v20 & 1);
    swift_bridgeObjectRetain();
    uint64_t v10 = Text.Effect.Composition.runIndices.getter();
    uint64_t result = FragmentIdentifierOffsetMap.offset(for:runIndices:)(v3, v10, v11);
    if (__OFADD__(v4, result))
    {
LABEL_16:
      __break(1u);
      return result;
    }
    uint64_t v16 = v4 + result;
    uint64_t v17 = v9;
    uint64_t v18 = v4;
    uint64_t v19 = v3;
    uint64_t v12 = v8[2];
    uint64_t v13 = v8;
    if (v12)
    {
      unint64_t v14 = 0;
      uint64_t v15 = 32;
      while (1)
      {
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v13);
          uint64_t v13 = (void *)result;
        }
        if (v14 >= v13[2]) {
          break;
        }
        ++v14;
        Text.Effect.Composition.Run.updateNonadjacentFragmentIdentifiers(map:)(v2);
        v15 += 88;
        if (v12 == v14) {
          goto LABEL_12;
        }
      }
      __break(1u);
LABEL_15:
      __break(1u);
      goto LABEL_16;
    }
LABEL_12:
    uint64_t result = outlined consume of Text.Effect.Composition.Operation(v19, v18, v6, v5, v20, v22, v21, v7);
    *uint64_t v1 = v19;
    v1[1] = v16;
    v1[2] = (uint64_t)v6;
    v1[3] = v5;
    v1[4] = v20 & 1;
    v1[5] = v22;
    v1[6] = v21;
    v1[7] = v7;
    v1[8] = v23;
    v1[9] = v17;
    v1[10] = (uint64_t)v13;
  }
  return result;
}

uint64_t Text.Effect.Composition.runIndices.getter()
{
  type metadata accessor for RangeSet<Int>.Ranges(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int>.Ranges, MEMORY[0x263F8ED78]);
  uint64_t v2 = v1;
  uint64_t v28 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v28 - v3;
  type metadata accessor for RangeSet<Int>.Ranges(0, &lazy cache variable for type metadata for RangeSet<Int>, MEMORY[0x263F8EDA0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v28 - v8;
  uint64_t v10 = *v0;
  uint64_t v11 = v0[1];
  char v12 = *((unsigned char *)v0 + 16);
  uint64_t v13 = v0[3];
  uint64_t v14 = v0[4];
  int v15 = *((_DWORD *)v0 + 10);
  uint64_t v16 = v0[6];
  uint64_t v17 = v0[7];
  uint64_t v18 = v0[8];
  RangeSet.init()();
  uint64_t v29 = v10;
  uint64_t v30 = v11;
  char v31 = v12;
  uint64_t v32 = v13;
  uint64_t v33 = v14;
  int v34 = v15;
  uint64_t v35 = v16;
  uint64_t v36 = v17;
  uint64_t v37 = v18;
  Text.Effect.Composition.appendRunIndices(to:)((uint64_t)v9);
  RangeSet.ranges.getter();
  uint64_t v19 = RangeSet.Ranges.count.getter();
  if (v19 == 1)
  {
    RangeSet.Ranges.subscript.getter();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v4, v2);
    return v29;
  }
  uint64_t v21 = v28;
  MEMORY[0x270FA5388](v19);
  *(&v28 - 2) = (uint64_t)v4;
  specialized static Log.internalError(_:file:line:)((uint64_t)"SwiftUICore/Logging.swift", 25, 2, 107, partial apply for implicit closure #1 in Text.Effect.Composition.runIndices.getter);
  uint64_t v22 = specialized RangeSet.lowerBound.getter();
  if (v23) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = v22;
  }
  uint64_t v24 = specialized RangeSet.upperBound.getter();
  char v26 = v25;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if (v26) {
    uint64_t v24 = 0;
  }
  if (v24 >= v20)
  {
    (*(void (**)(char *, uint64_t))(v21 + 8))(v4, v2);
    return v20;
  }
  __break(1u);
  return result;
}

uint64_t Text.Effect.Composition.appendRunIndices(to:)(uint64_t a1)
{
  uint64_t result = *(void *)(v1 + 64);
  uint64_t v3 = *(void *)(result + 16);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(swift_bridgeObjectRetain() + 56);
    do
    {
      uint64_t v6 = (void *)*(v4 - 1);
      uint64_t v5 = *v4;
      uint64_t v7 = v4[1];
      uint64_t v8 = v4[2];
      uint64_t v9 = v4[3];
      unint64_t v10 = v4[4];
      uint64_t v11 = v4[5];
      uint64_t v12 = v4[6];
      uint64_t v13 = v4[7];
      if (v10 >> 62)
      {
        uint64_t v14 = *(v4 - 3);
        uint64_t v15 = *(v4 - 2);
        if (v10 >> 62 == 1)
        {
          uint64_t v37 = *(v4 - 3);
          uint64_t v38 = v15;
          uint64_t v16 = v14;
          if (v14 != v15)
          {
            uint64_t v24 = v8;
            uint64_t v26 = v9;
            char v22 = v7;
            type metadata accessor for RangeSet<Int>.Ranges(0, &lazy cache variable for type metadata for RangeSet<Int>, MEMORY[0x263F8EDA0]);
            uint64_t v20 = (void (*)(void *, void))RangeSet._ranges.modify();
            type metadata accessor for RangeSet<Int>.Ranges(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int>.Ranges, MEMORY[0x263F8ED78]);
            RangeSet.Ranges._insert(contentsOf:)();
            v20(v29, 0);
            LOBYTE(v7) = v22;
            uint64_t v8 = v24;
            uint64_t v9 = v26;
            uint64_t v16 = v15;
          }
          uint64_t v17 = v14;
          uint64_t v18 = v6;
          uint64_t v19 = v5;
        }
        else
        {
          uint64_t v37 = *(v4 - 1);
          uint64_t v38 = v5;
          uint64_t v19 = (uint64_t)v6;
          if (v6 != (void *)v5)
          {
            uint64_t v25 = v8;
            uint64_t v27 = v9;
            char v23 = v7;
            type metadata accessor for RangeSet<Int>.Ranges(0, &lazy cache variable for type metadata for RangeSet<Int>, MEMORY[0x263F8EDA0]);
            uint64_t v21 = (void (*)(void *, void))RangeSet._ranges.modify();
            type metadata accessor for RangeSet<Int>.Ranges(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int>.Ranges, MEMORY[0x263F8ED78]);
            RangeSet.Ranges._insert(contentsOf:)();
            v21(v29, 0);
            LOBYTE(v7) = v23;
            uint64_t v8 = v25;
            uint64_t v9 = v27;
            uint64_t v19 = v5;
          }
          uint64_t v17 = v14;
          uint64_t v16 = v15;
          uint64_t v18 = v6;
        }
        outlined consume of Text.Effect.Composition.Operation(v17, v16, v18, v19, v7, v8, v9, v10);
      }
      else
      {
        v29[0] = *(v4 - 1);
        v29[1] = v5;
        char v30 = v7 & 1;
        uint64_t v31 = v8;
        uint64_t v32 = v9;
        int v33 = v10;
        uint64_t v34 = v11;
        uint64_t v35 = v12;
        uint64_t v36 = v13;
        Text.Effect.Composition.appendRunIndices(to:)(a1);
      }
      v4 += 11;
      --v3;
    }
    while (v3);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t implicit closure #1 in Text.Effect.Composition.runIndices.getter()
{
  _StringGuts.grow(_:)(23);
  v0._object = (void *)0x8000000246224410;
  v0._uint64_t countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v0);
  type metadata accessor for RangeSet<Int>.Ranges(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Int>.Ranges, MEMORY[0x263F8ED78]);
  lazy protocol witness table accessor for type RangeSet<Int>.Ranges and conformance RangeSet<A>.Ranges();
  v1._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  String.append(_:)(v2);
  return 0;
}

uint64_t FragmentIdentifierOffsetMap.offset(for:runIndices:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  if (!*(void *)(v8 + 16)) {
    goto LABEL_6;
  }
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v10 & 1) == 0) {
    goto LABEL_6;
  }
  uint64_t v11 = (uint64_t *)(*(void *)(v8 + 56) + 24 * result);
  uint64_t v12 = v11[2];
  if (v11[1] == a2)
  {
    a2 = *v11;
    if (*v11 > a3)
    {
      __break(1u);
LABEL_6:
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v16 = *v4;
      *uint64_t v4 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a2, a3, 0, a1, isUniquelyReferenced_nonNull_native);
      *uint64_t v4 = v16;
      swift_bridgeObjectRelease();
      return 0;
    }
LABEL_8:
    char v15 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v17 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a2, a3, v12, a1, v15);
    *uint64_t v4 = v17;
    swift_bridgeObjectRelease();
    return v12;
  }
  if (!__OFADD__(v12++, 1)) {
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

void *Text.Effect.Composition.Operation.append(_:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = (void *)a1[2];
  uint64_t v7 = a1[3];
  uint64_t v9 = a1[4];
  uint64_t v8 = a1[5];
  uint64_t v10 = a1[6];
  unint64_t v11 = a1[7];
  uint64_t v13 = a1[8];
  uint64_t v12 = a1[9];
  uint64_t v14 = a1[10];
  char v15 = (void *)v2[2];
  uint64_t v17 = *v2;
  uint64_t v16 = v2[1];
  uint64_t v18 = v2[3];
  uint64_t v19 = v2[4];
  uint64_t v21 = v2[5];
  uint64_t v20 = v2[6];
  unint64_t v22 = v2[7];
  uint64_t v24 = v2 + 8;
  uint64_t v23 = v2[8];
  uint64_t v26 = v2[9];
  uint64_t result = (void *)v2[10];
  v178[0] = *v2;
  v178[1] = v16;
  v178[2] = v15;
  v178[3] = v18;
  v178[4] = v19;
  v178[5] = v21;
  v178[6] = v20;
  v178[7] = v22;
  v178[8] = v23;
  v178[9] = v26;
  v178[10] = result;
  v178[11] = v4;
  v178[12] = v5;
  v178[13] = v6;
  v178[14] = v7;
  v178[15] = v9;
  v178[16] = v8;
  v178[17] = v10;
  v178[18] = v11;
  v178[19] = v13;
  v178[20] = v12;
  v178[21] = v14;
  uint64_t v159 = v10;
  if (v22 >> 62)
  {
    if (v22 >> 62 == 1)
    {
      if (v11 >> 62 == 1)
      {
        uint64_t v140 = v14;
        uint64_t v142 = v9;
        uint64_t v149 = v12;
        uint64_t v137 = v13;
        uint64_t v27 = v8;
        uint64_t v28 = (uint64_t)v6;
        unint64_t v134 = v11;
        uint64_t v145 = v7;
        uint64_t result = (void *)outlined release of (Text.Effect.Composition.Operation, Text.Effect.Composition.Operation)((uint64_t)v178);
        if (v16 != v4)
        {
          *a2 = v4;
          a2[1] = v5;
          a2[2] = v28;
          a2[3] = v145;
          a2[4] = v142;
          a2[5] = v27;
          a2[6] = v159;
          a2[7] = v134;
          a2[8] = v137;
          a2[9] = v149;
          a2[10] = v140;
          return result;
        }
        if (v5 < v17) {
          goto LABEL_50;
        }
        *Swift::String v2 = v17;
        v2[1] = v5;
        long long v29 = 0uLL;
        *((_OWORD *)v2 + 1) = 0u;
        *((_OWORD *)v2 + 2) = 0u;
        v2[6] = 0;
        v2[7] = 0x4000000000000000;
        v2[9] = 0;
        v2[10] = 0;
        *uint64_t v24 = 0;
LABEL_20:
        *(_OWORD *)a2 = v29;
        *((_OWORD *)a2 + 1) = v29;
        a2[4] = 0x1FFFFFFFELL;
        *(_OWORD *)(a2 + 5) = v29;
        *(_OWORD *)(a2 + 7) = v29;
        *(_OWORD *)(a2 + 9) = v29;
        return result;
      }
    }
    else if (v11 >> 62 == 2)
    {
      uint64_t v127 = v18;
      uint64_t v129 = (uint64_t)v15;
      uint64_t v139 = v13;
      uint64_t v155 = v8;
      uint64_t v144 = v9;
      uint64_t v147 = v7;
      unint64_t v38 = v11;
      uint64_t v151 = v12;
      int v39 = v6;
      uint64_t v40 = v14;
      uint64_t result = (void *)outlined release of (Text.Effect.Composition.Operation, Text.Effect.Composition.Operation)((uint64_t)v178);
      if (v17 != v4) {
        goto LABEL_44;
      }
      if (__OFSUB__(v5, v16)) {
        goto LABEL_52;
      }
      if (v5 != v16 || (void *)v127 != v39)
      {
LABEL_44:
        *a2 = v4;
        a2[1] = v5;
        a2[2] = (uint64_t)v39;
        a2[3] = v147;
        a2[4] = v144;
        a2[5] = v155;
        a2[6] = v159;
        a2[7] = v38;
        a2[8] = v139;
        a2[9] = v151;
        a2[10] = v40;
        return result;
      }
      if (v147 < v129) {
        goto LABEL_53;
      }
      *Swift::String v2 = v4;
      v2[1] = v5;
      float32x4_t v2[2] = v129;
      v2[3] = v147;
      v2[5] = 0;
      v2[6] = 0;
      v2[4] = 0;
      v2[7] = 0x8000000000000000;
      v2[9] = 0;
      v2[10] = 0;
      *uint64_t v24 = 0;
      long long v29 = 0uLL;
      goto LABEL_20;
    }
LABEL_42:
    uint64_t v156 = v8;
    uint64_t v97 = v14;
    uint64_t v98 = v6;
    uint64_t v99 = v7;
    uint64_t v100 = v12;
    unint64_t v101 = v11;
    uint64_t v102 = v13;
    outlined copy of Text.Effect.Composition.Operation(v4, v5, v6, v7, v9, v8, v10, v11);
    outlined release of (Text.Effect.Composition.Operation, Text.Effect.Composition.Operation)((uint64_t)v178);
    *a2 = v4;
    a2[1] = v5;
    a2[2] = (uint64_t)v98;
    a2[3] = v99;
    a2[4] = v9;
    a2[5] = v156;
    a2[6] = v159;
    a2[7] = v101;
    a2[8] = v102;
    a2[9] = v100;
    a2[10] = v97;
    return (void *)outlined copy of Text.Effect.Composition.Operation(v4, v5, v98, v99, v9, v156, v159, v101);
  }
  uint64_t v150 = v12;
  uint64_t v141 = v14;
  unsigned int v136 = result;
  if (v11 >> 62)
  {
    uint64_t v91 = v6;
    uint64_t v92 = v7;
    unint64_t v93 = v11;
    uint64_t v94 = v10;
    uint64_t v95 = v8;
    uint64_t v96 = v13;
    outlined copy of Text.Layout.Line.Line(v15, v18, v19 & 1);
    swift_bridgeObjectRetain();
    uint64_t v14 = v141;
    uint64_t v13 = v96;
    uint64_t v8 = v95;
    uint64_t v6 = v91;
    uint64_t v10 = v94;
    unint64_t v11 = v93;
    uint64_t v7 = v92;
    uint64_t v12 = v150;
    goto LABEL_42;
  }
  uint64_t v143 = v9;
  uint64_t v146 = v7;
  uint64_t v133 = v20;
  unint64_t v135 = v11;
  uint64_t v154 = v8;
  uint64_t v138 = v13;
  unint64_t v131 = v22;
  uint64_t v132 = v21;
  char v130 = v19;
  if (v17 != v4) {
    goto LABEL_43;
  }
  if (__OFSUB__(v5, v16)) {
    goto LABEL_51;
  }
  if (v5 != v16)
  {
LABEL_43:
    uint64_t v103 = v6;
    char v104 = v9;
    uint64_t v105 = v15;
    uint64_t v106 = v18;
    outlined copy of Text.Effect.Composition.Operation(v4, v5, v6, v7, v104, v8, v10, v11);
    outlined copy of Text.Effect.Composition.Operation(v17, v16, v105, v106, v130, v132, v133, v131);
    outlined release of (Text.Effect.Composition.Operation, Text.Effect.Composition.Operation)((uint64_t)v178);
    *a2 = v4;
    a2[1] = v5;
    a2[2] = (uint64_t)v103;
    a2[3] = v146;
    a2[4] = v143;
    a2[5] = v154;
    a2[6] = v159;
    a2[7] = v135;
    a2[8] = v138;
    a2[9] = v150;
    a2[10] = v141;
    outlined copy of Text.Layout.Line.Line(v103, v146, v143 & 1);
    return (void *)swift_bridgeObjectRetain();
  }
  uint64_t v123 = v19 & 1;
  uint64_t v124 = v26;
  uint64_t v125 = v23;
  uint64_t v126 = v18;
  uint64_t v128 = v15;
  if (!*(void *)(v14 + 16))
  {
    char v114 = v9;
    uint64_t v109 = v5;
    outlined copy of Text.Effect.Composition.Operation(v4, v5, v6, v7, v114, v8, v10, v11);
    uint64_t v113 = v136;
    uint64_t v107 = v124;
    uint64_t v108 = v126;
    unsigned int v112 = v131;
    uint64_t v111 = v132;
    uint64_t v110 = v133;
    outlined copy of Text.Effect.Composition.Operation(v4, v5, v128, v126, v130, v132, v133, v131);
    swift_bridgeObjectRetain();
LABEL_48:
    outlined release of (Text.Effect.Composition.Operation, Text.Effect.Composition.Operation)((uint64_t)v178);
    uint64_t result = (void *)swift_bridgeObjectRelease();
    *Swift::String v2 = v4;
    v2[1] = v109;
    float32x4_t v2[2] = (uint64_t)v128;
    v2[3] = v108;
    v2[4] = v123;
    v2[5] = v111;
    v2[6] = v110;
    v2[7] = v112;
    float v2[8] = v125;
    v2[9] = v107;
    v2[10] = (uint64_t)v113;
    *(_OWORD *)a2 = 0u;
    *((_OWORD *)a2 + 1) = 0u;
    a2[4] = 0x1FFFFFFFELL;
    *(_OWORD *)(a2 + 5) = 0u;
    *(_OWORD *)(a2 + 7) = 0u;
    *(_OWORD *)(a2 + 9) = 0u;
    return result;
  }
  uint64_t v120 = v2;
  uint64_t v30 = v14;
  uint64_t v162 = *(void *)(v14 + 16);
  uint64_t v31 = v6;
  uint64_t v32 = v7;
  unint64_t v33 = v11;
  outlined copy of Text.Effect.Composition.Operation(v4, v5, v6, v7, v9, v8, v10, v11);
  outlined copy of Text.Effect.Composition.Operation(v4, v5, v128, v126, v130, v132, v133, v131);
  uint64_t v121 = v31;
  uint64_t v34 = v31;
  uint64_t v35 = v162;
  outlined copy of Text.Effect.Composition.Operation(v4, v5, v34, v32, v9, v154, v159, v33);
  outlined copy of Text.Effect.Composition.Operation(v4, v5, v128, v126, v130, v132, v133, v131);
  swift_bridgeObjectRetain();
  uint64_t v36 = (uint64_t *)(v30 + 56);
  uint64_t v37 = v136;
  uint64_t v148 = v4;
  while (1)
  {
    uint64_t v163 = v35;
    uint64_t v52 = *(v36 - 3);
    uint64_t v53 = *(v36 - 2);
    char v55 = (void *)*(v36 - 1);
    uint64_t v54 = *v36;
    uint64_t v56 = v36[1];
    uint64_t v57 = v36[2];
    uint64_t v58 = v36[3];
    unint64_t v59 = v36[4];
    uint64_t v60 = v36[6];
    uint64_t v61 = v36[7];
    unint64_t v62 = v37[2];
    long long v63 = v37;
    uint64_t v157 = v53;
    uint64_t v158 = v52;
    uint64_t v166 = v57;
    uint64_t v167 = *v36;
    uint64_t v160 = v60;
    uint64_t v161 = v55;
    uint64_t v164 = v58;
    uint64_t v165 = v36[5];
    if (!v62)
    {
      uint64_t v72 = *v36;
      uint64_t v73 = v36[1];
      uint64_t v74 = *(v36 - 2);
      uint64_t v75 = *(v36 - 3);
      uint64_t v76 = v36[2];
      unint64_t v153 = v36[4];
      outlined copy of Text.Effect.Composition.Operation(v52, v53, v55, v54, v56, v57, v58, v59);
      uint64_t v77 = v72;
      uint64_t v78 = v73;
      outlined copy of Text.Effect.Composition.Operation(v75, v74, v55, v77, v73, v76, v164, v153);
      if (swift_isUniquelyReferenced_nonNull_native()) {
        uint64_t v79 = v63;
      }
      else {
        uint64_t v79 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, v63);
      }
      uint64_t v47 = v163;
      unint64_t v81 = v79[2];
      unint64_t v80 = v79[3];
      unint64_t v82 = v81 + 1;
      uint64_t v49 = v166;
      uint64_t v48 = v167;
      if (v81 >= v80 >> 1)
      {
        uint64_t v84 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v80 > 1), v81 + 1, 1, v79);
        unint64_t v82 = v81 + 1;
        uint64_t v46 = v164;
        uint64_t v49 = v166;
        uint64_t v48 = v167;
        uint64_t v50 = v78;
        uint64_t v79 = v84;
      }
      else
      {
        uint64_t v50 = v78;
        uint64_t v46 = v164;
      }
      char v83 = &v79[11 * v81];
      v83[4] = v75;
      uint64_t v45 = v83 + 4;
      uint64_t v67 = v74;
      uint64_t v68 = v55;
      uint64_t v37 = v79;
      v79[2] = v82;
      uint64_t v88 = v48;
      unint64_t v69 = v50;
      uint64_t v90 = v49;
      uint64_t v89 = v46;
      unint64_t v51 = v153;
      unint64_t v70 = v153;
      uint64_t v87 = v165;
      uint64_t v71 = v160;
      goto LABEL_24;
    }
    uint64_t v64 = *(v36 - 3);
    uint64_t v65 = *(v36 - 2);
    uint64_t v152 = v36[1];
    unint64_t v66 = v36[4];
    outlined copy of Text.Effect.Composition.Operation(v52, v53, v55, v54, v56, v57, v58, v59);
    uint64_t result = (swift_isUniquelyReferenced_nonNull_native() & 1) != 0
           ? v37
           : specialized _ArrayBuffer._consumeAndCreateNew()(v37);
    uint64_t v47 = v163;
    if (v62 > result[2]) {
      break;
    }
    v168[0] = v64;
    v168[1] = v65;
    uint64_t v37 = result;
    v168[2] = v55;
    v168[3] = v167;
    v168[4] = v152;
    v168[5] = v166;
    v168[6] = v164;
    v168[7] = v66;
    v168[8] = v165;
    v168[9] = v60;
    v168[10] = v61;
    Text.Effect.Composition.Operation.append(_:)(v169, v168);
    uint64_t v86 = v169[0];
    uint64_t v67 = v169[1];
    uint64_t v68 = (void *)v169[2];
    uint64_t v88 = v170;
    unint64_t v69 = v171;
    uint64_t v90 = v172;
    uint64_t v89 = v173;
    unint64_t v70 = v174;
    uint64_t v87 = v175;
    uint64_t v71 = v176;
    uint64_t v61 = v177;
    if (v171 >> 1 == 0xFFFFFFFF && !HIDWORD(v174))
    {
      uint64_t v49 = v166;
      uint64_t v48 = v167;
      LOBYTE(v50) = v152;
      uint64_t v46 = v164;
      unint64_t v51 = v66;
      goto LABEL_25;
    }
    uint64_t v41 = v37;
    unint64_t v43 = v37[2];
    unint64_t v42 = v37[3];
    if (v43 >= v42 >> 1)
    {
      uint64_t v118 = v173;
      uint64_t v119 = v170;
      uint64_t v115 = v172;
      uint64_t v116 = v169[0];
      uint64_t v117 = v175;
      uint64_t v85 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v42 > 1), v43 + 1, 1, v37);
      uint64_t v86 = v116;
      uint64_t v87 = v117;
      uint64_t v89 = v118;
      uint64_t v88 = v119;
      uint64_t v90 = v115;
      uint64_t v41 = v85;
    }
    void v41[2] = v43 + 1;
    uint64_t v37 = v41;
    char v44 = &v41[11 * v43];
    v44[4] = v86;
    uint64_t v45 = v44 + 4;
    uint64_t v47 = v163;
    uint64_t v46 = v164;
    uint64_t v49 = v166;
    uint64_t v48 = v167;
    LOBYTE(v50) = v152;
    unint64_t v51 = v66;
LABEL_24:
    v45[1] = v67;
    v45[2] = v68;
    v45[3] = v88;
    v45[4] = v69;
    void v45[5] = v90;
    v45[6] = v89;
    v45[7] = v70;
    v45[8] = v87;
    v45[9] = v71;
    v45[10] = v61;
LABEL_25:
    v36 += 11;
    outlined consume of Text.Effect.Composition.Operation(v158, v157, v161, v48, v50, v49, v46, v51);
    uint64_t v35 = v47 - 1;
    uint64_t v4 = v148;
    if (!v35)
    {
      uint64_t v107 = v124;
      uint64_t v108 = v126;
      uint64_t v109 = v5;
      uint64_t v111 = v132;
      uint64_t v110 = v133;
      unsigned int v112 = v131;
      uint64_t v113 = v37;
      outlined consume of Text.Effect.Composition.Operation(v148, v5, v128, v126, v130, v132, v133, v131);
      outlined consume of Text.Effect.Composition.Operation(v148, v5, v121, v146, v143, v154, v159, v135);
      Swift::String v2 = v120;
      goto LABEL_48;
    }
  }
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
  return result;
}

char *Text.Effect.Composition.appendCharacterRanges(line:to:)(char *result, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 64);
  uint64_t v27 = *(void *)(v3 + 16);
  if (v27)
  {
    uint64_t v5 = *(void **)result;
    uint64_t v4 = *((void *)result + 1);
    char v6 = result[16];
    long long v24 = *(_OWORD *)(result + 24);
    uint64_t v26 = v3 + 32;
    int v23 = *((_DWORD *)result + 10);
    uint64_t result = (char *)swift_bridgeObjectRetain();
    unint64_t v7 = 0;
    uint64_t v25 = v3;
    while (v7 < *(void *)(v3 + 16))
    {
      uint64_t v8 = (CFIndex *)(v26 + 88 * v7);
      CFIndex v9 = v8[3];
      CFIndex v11 = v8[4];
      CFIndex v10 = v8[5];
      CFIndex v13 = v8[6];
      unint64_t v12 = v8[7];
      CFIndex v14 = v8[8];
      CFIndex v15 = v8[9];
      uint64_t result = (char *)v8[10];
      if (v12 >> 62)
      {
        CFIndex v28 = v8[4];
        unint64_t v33 = (void *)v8[2];
        uint64_t v34 = v8[3];
        uint64_t v29 = v8[5];
        uint64_t v30 = v8[6];
        unint64_t v31 = v8[7];
        unint64_t v32 = v7;
        CFIndex v17 = *v8;
        uint64_t v16 = v8[1];
        uint64_t v35 = v16;
        uint64_t v36 = *v8;
        if (v12 >> 62 != 1)
        {
          CFIndex v17 = v8[2];
          uint64_t v16 = v8[3];
        }
        if (v17 != v16)
        {
          if (v16 < v17) {
            goto LABEL_31;
          }
          while (v17 < v16)
          {
            if (v6)
            {
              outlined copy of Text.Layout.Line.Line(v5, v4, 1);
              uint64_t result = (char *)(id)_NSTextLineFragmentGetCTLine(v5);
              if (!result) {
                goto LABEL_32;
              }
              uint64_t v18 = (const __CTLine *)result;
              outlined consume of Text.Layout.Line.Line(v5, v4, 1);
            }
            else
            {
              outlined copy of Text.Layout.Line.Line(v5, v4, 0);
              outlined copy of Text.Layout.Line.Line(v5, v4, 0);

              swift_release();
              uint64_t v18 = (const __CTLine *)v5;
            }
            uint64_t v19 = (id)_CTLineGetRunAtIndex(v18, v17);
            CFRange StringRange = CTRunGetStringRange((CTRunRef)v19);

            uint64_t result = (char *)swift_release();
            CFIndex v21 = StringRange.location + StringRange.length;
            if (__OFADD__(StringRange.location, StringRange.length)) {
              goto LABEL_27;
            }
            if (v21 < StringRange.location) {
              goto LABEL_28;
            }
            CFIndex location = StringRange.location;
            CFIndex v39 = StringRange.location + StringRange.length;
            if (__OFSUB__(v21, StringRange.location)) {
              goto LABEL_29;
            }
            if (v21 != StringRange.location)
            {
              _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>, MEMORY[0x263F8EDA0]);
              unint64_t v22 = (uint64_t (*)(void *, void))RangeSet._ranges.modify();
              _ss8RangeSetVy7SwiftUI4TextV6LayoutV14CharacterIndexVGMaTm_1(0, &lazy cache variable for type metadata for RangeSet<Text.Layout.CharacterIndex>.Ranges, MEMORY[0x263F8ED78]);
              RangeSet.Ranges._insert(contentsOf:)();
              uint64_t result = (char *)v22(v43, 0);
            }
            if (v16 == ++v17) {
              goto LABEL_3;
            }
          }
          __break(1u);
LABEL_27:
          __break(1u);
LABEL_28:
          __break(1u);
LABEL_29:
          __break(1u);
          break;
        }
LABEL_3:
        outlined consume of Text.Effect.Composition.Operation(v36, v35, v33, v34, v28, v29, v30, v31);
        uint64_t result = (char *)outlined consume of Text.Effect.Composition.Operation(v36, v35, v33, v34, v28, v29, v30, v31);
        uint64_t v3 = v25;
        unint64_t v7 = v32;
      }
      else
      {
        v43[0] = v8[2];
        v43[1] = v9;
        char v44 = v11 & 1;
        CFIndex v45 = v10;
        CFIndex v46 = v13;
        int v47 = v12;
        CFIndex v48 = v14;
        CFIndex v49 = v15;
        uint64_t v50 = result;
        CFIndex location = (CFIndex)v5;
        CFIndex v39 = v4;
        char v40 = v6;
        long long v41 = v24;
        int v42 = v23;
        uint64_t result = (char *)Text.Effect.Composition.appendCharacterRanges(line:to:)(&location, a2);
      }
      if (++v7 == v27) {
        return (char *)swift_bridgeObjectRelease();
      }
    }
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in Text.Effect.Composition.useSharedDrawing(context:)(Swift::UInt64 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v7 = *a1;
  unint64_t v8 = a1[7];
  if (v8 >> 62)
  {
    if (v8 >> 62 != 1)
    {
      uint64_t result = (uint64_t)Text.Effect.Keyframes.validTransform(_:)(*a1, a4);
      if (result)
      {
        CFIndex v10 = (void *)result;
        char v11 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *(void *)result) + 0x110))();

        return v11 & 1;
      }
      return result;
    }
    return 0;
  }
  Swift::UInt64 v12 = a1[10];
  if (!*(void *)(v12 + 16)) {
    return 0;
  }
  uint64_t v43 = *(void *)(v12 + 16);
  uint64_t v49 = v6;
  CFIndex v13 = (void *)a1[2];
  uint64_t v38 = a1[1];
  uint64_t v14 = a1[3];
  Swift::UInt64 v15 = a1[4];
  uint64_t v16 = a1[5];
  uint64_t v17 = a1[6];
  swift_bridgeObjectRetain();
  uint64_t v35 = v13;
  uint64_t v36 = v7;
  char v33 = v15;
  uint64_t v34 = v14;
  uint64_t v31 = v17;
  uint64_t v32 = v16;
  unint64_t v37 = v8;
  outlined copy of Text.Effect.Composition.Operation(v7, v38, v13, v14, v15, v16, v17, v8);
  for (uint64_t i = (uint64_t *)(v12 + 56); ; i += 11)
  {
    uint64_t v19 = i[6];
    uint64_t v20 = i[7];
    unint64_t v21 = i[4];
    uint64_t v22 = i[5];
    uint64_t v24 = i[2];
    uint64_t v23 = i[3];
    uint64_t v26 = *i;
    uint64_t v25 = i[1];
    uint64_t v28 = *(i - 2);
    uint64_t v27 = (void *)*(i - 1);
    uint64_t v29 = *(i - 3);
    v48[0] = v29;
    v48[1] = v28;
    _DWORD v48[2] = v27;
    float64x2_t v48[3] = v26;
    v48[4] = v25;
    v48[5] = v24;
    uint64_t v45 = v24;
    uint64_t v46 = v23;
    v48[6] = v23;
    v48[7] = v21;
    unint64_t v47 = v21;
    v48[8] = v22;
    v48[9] = v19;
    v48[10] = v20;
    outlined copy of Text.Effect.Composition.Operation(v29, v28, v27, v26, v25, v24, v23, v21);
    uint64_t v30 = v49;
    char v44 = closure #1 in Text.Effect.Composition.useSharedDrawing(context:)(v48, a2, a3, a4, a5);
    uint64_t v49 = v30;
    outlined consume of Text.Effect.Composition.Operation(v29, v28, v27, v26, v25, v45, v46, v47);
    if (v44) {
      break;
    }
    if (!--v43)
    {
      swift_bridgeObjectRelease();
      outlined consume of Text.Effect.Composition.Operation(v36, v38, v35, v34, v33, v32, v31, v37);
      return 0;
    }
  }
  swift_bridgeObjectRelease();
  outlined consume of Text.Effect.Composition.Operation(v36, v38, v35, v34, v33, v32, v31, v37);
  return 1;
}

uint64_t specialized static Text.Effect.Composition.== infix(_:_:)(double *a1, double *a2)
{
  if (a1[3] != a2[3] || a1[4] != a2[4]) {
    return 0;
  }
  double v4 = *a1;
  double v5 = a1[6];
  double v6 = a1[7];
  uint64_t v7 = *((void *)a1 + 8);
  double v8 = *a2;
  int v9 = *((unsigned __int8 *)a2 + 16);
  double v10 = a2[6];
  double v11 = a2[7];
  uint64_t v12 = *((void *)a2 + 8);
  if ((_BYTE)a1[2])
  {
    if (!v9) {
      return 0;
    }
  }
  else if (v9)
  {
    return 0;
  }
  if (*(void *)&v4 == *(void *)&v8 && v5 == v10 && v6 == v11) {
    return specialized static Array<A>.== infix(_:_:)(v7, v12);
  }
  return 0;
}

uint64_t *specialized static Text.Effect.Composition.Operation.== infix(_:_:)(uint64_t *result, uint64_t *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  double v5 = (void *)result[2];
  uint64_t v4 = result[3];
  uint64_t v6 = result[4];
  uint64_t v7 = result[5];
  uint64_t v8 = result[6];
  unint64_t v9 = result[7];
  uint64_t v10 = result[8];
  uint64_t v11 = result[9];
  uint64_t v12 = result[10];
  uint64_t v14 = *a2;
  uint64_t v13 = a2[1];
  Swift::UInt64 v15 = (void *)a2[2];
  uint64_t v16 = a2[3];
  uint64_t v18 = a2[4];
  uint64_t v17 = a2[5];
  uint64_t v19 = a2[6];
  unint64_t v20 = a2[7];
  uint64_t v21 = a2[8];
  uint64_t v22 = a2[9];
  uint64_t v23 = a2[10];
  v70[0] = *result;
  v70[1] = v2;
  v70[2] = v5;
  v70[3] = v4;
  v70[4] = v6;
  unint64_t v70[5] = v7;
  v70[6] = v8;
  v70[7] = v9;
  v70[8] = v10;
  v70[9] = v11;
  v70[10] = v12;
  v70[11] = v14;
  v70[12] = v13;
  v70[13] = v15;
  v70[14] = v16;
  v70[15] = v18;
  v70[16] = v17;
  v70[17] = v19;
  v70[18] = v20;
  v70[19] = v21;
  v70[20] = v22;
  v70[21] = v23;
  if (!(v9 >> 62))
  {
    if (!(v20 >> 62))
    {
      uint64_t v50 = v19;
      uint64_t v51 = v17;
      if (v3 == v14)
      {
        if (__OFSUB__(v13, v2))
        {
          __break(1u);
          goto LABEL_32;
        }
        if (v13 == v2)
        {
          *(void *)&v62[0] = v5;
          *(void *)&v62[1] = v4;
          char v63 = v6 & 1;
          uint64_t v64 = v7;
          uint64_t v65 = v8;
          int v66 = v9;
          uint64_t v67 = v10;
          uint64_t v68 = v11;
          uint64_t v69 = v12;
          *(void *)&v54[0] = v15;
          *(void *)&v54[1] = v16;
          char v55 = v18 & 1;
          uint64_t v56 = v17;
          uint64_t v57 = v19;
          int v58 = v20;
          uint64_t v59 = v21;
          uint64_t v60 = v22;
          uint64_t v61 = v23;
          uint64_t v52 = v15;
          uint64_t v43 = v16;
          uint64_t v44 = v4;
          char v48 = v6;
          uint64_t v49 = v2;
          uint64_t v27 = v5;
          unint64_t v47 = v5;
          uint64_t v45 = v7;
          uint64_t v46 = v8;
          outlined copy of Text.Effect.Composition.Operation(v3, v2, v15, v16, v18, v17, v19, v20);
          outlined copy of Text.Effect.Composition.Operation(v3, v49, v27, v44, v48, v45, v46, v9);
          outlined copy of Text.Effect.Composition.Operation(v3, v49, v47, v44, v48, v45, v46, v9);
          outlined copy of Text.Effect.Composition.Operation(v3, v49, v52, v43, v18, v51, v50, v20);
          char v26 = specialized static Text.Effect.Composition.== infix(_:_:)(v62, v54);
          outlined release of (Text.Effect.Composition.Operation, Text.Effect.Composition.Operation)((uint64_t)v70);
          outlined consume of Text.Effect.Composition.Operation(v3, v49, v52, v43, v18, v51, v50, v20);
          outlined consume of Text.Effect.Composition.Operation(v3, v49, v47, v44, v48, v45, v46, v9);
          return (uint64_t *)(v26 & 1);
        }
      }
      uint64_t v40 = v3;
      long long v41 = v15;
      uint64_t v42 = v16;
      outlined copy of Text.Effect.Composition.Operation(v40, v2, v5, v4, v6, v7, v8, v9);
      uint64_t v37 = v14;
      uint64_t v38 = v13;
      Swift::UInt64 v15 = v41;
      uint64_t v16 = v42;
      char v39 = v18;
      uint64_t v19 = v50;
      uint64_t v17 = v51;
      goto LABEL_27;
    }
    uint64_t v53 = v15;
    uint64_t v34 = v16;
    uint64_t v35 = v19;
    char v36 = v18;
    uint64_t v18 = v17;
    outlined copy of Text.Layout.Line.Line(v5, v4, v6 & 1);
    swift_bridgeObjectRetain();
    uint64_t v17 = v18;
    LOBYTE(v18) = v36;
    uint64_t v19 = v35;
    Swift::UInt64 v15 = v53;
    uint64_t v16 = v34;
LABEL_26:
    uint64_t v37 = v14;
    uint64_t v38 = v13;
    char v39 = v18;
LABEL_27:
    outlined copy of Text.Effect.Composition.Operation(v37, v38, v15, v16, v39, v17, v19, v20);
    outlined release of (Text.Effect.Composition.Operation, Text.Effect.Composition.Operation)((uint64_t)v70);
    goto LABEL_28;
  }
  if (v9 >> 62 == 1)
  {
    if (v20 >> 62 == 1)
    {
      uint64_t v24 = v2;
      outlined release of (Text.Effect.Composition.Operation, Text.Effect.Composition.Operation)((uint64_t)v70);
      char v26 = v3 == v14 && v24 == v13;
      return (uint64_t *)(v26 & 1);
    }
    goto LABEL_26;
  }
  if (v20 >> 62 != 2) {
    goto LABEL_26;
  }
  uint64_t v28 = v5;
  uint64_t v29 = v4;
  uint64_t v30 = v2;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t result = (uint64_t *)outlined release of (Text.Effect.Composition.Operation, Text.Effect.Composition.Operation)((uint64_t)v70);
  if (v3 != v14)
  {
LABEL_28:
    char v26 = 0;
    return (uint64_t *)(v26 & 1);
  }
  if (!__OFSUB__(v13, v30))
  {
    if (v13 == v30)
    {
      char v26 = v28 == v31 && v29 == v32;
      return (uint64_t *)(v26 & 1);
    }
    goto LABEL_28;
  }
LABEL_32:
  __break(1u);
  return result;
}

double specialized Text.Effect.BaseContext.fragment<A>(for:key:fragment:)@<D0>(Swift::UInt64 a1@<X1>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  swift_retain();
  swift_retain();
  Text.Effect.DrawableFragment.init(keyframes:key:fragment:)(a4, a1, a2, a3, (uint64_t)v12);
  long long v10 = v12[1];
  *(_OWORD *)a5 = v12[0];
  *(_OWORD *)(a5 + 16) = v10;
  double result = *(double *)&v13;
  *(_OWORD *)(a5 + 32) = v13;
  *(void *)(a5 + 48) = v14;
  return result;
}

uint64_t outlined consume of Text.Effect.Composition.Operation?(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  if (a5 >> 1 != 0xFFFFFFFF || HIDWORD(a8) != 0) {
    return outlined consume of Text.Effect.Composition.Operation(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

uint64_t partial apply for implicit closure #1 in Text.Effect.Composition.runIndices.getter()
{
  return implicit closure #1 in Text.Effect.Composition.runIndices.getter();
}

ValueMetadata *type metadata accessor for FragmentIdentifierOffsetMap.Entry()
{
  return &type metadata for FragmentIdentifierOffsetMap.Entry;
}

ValueMetadata *type metadata accessor for Text.Effect.Composition.Run()
{
  return &type metadata for Text.Effect.Composition.Run;
}

uint64_t destroy for Text.Effect.Composition.Run(uint64_t a1)
{
  return outlined consume of Text.Effect.Composition.Operation(*(void *)a1, *(void *)(a1 + 8), *(void **)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56));
}

uint64_t *initializeWithCopy for Text.Effect.Composition.Run(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  double v5 = (void *)a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a2[6];
  unint64_t v10 = a2[7];
  uint64_t v11 = a2[8];
  uint64_t v13 = a2[9];
  uint64_t v14 = a2[10];
  outlined copy of Text.Effect.Composition.Operation(*a2, v4, v5, v6, v7, v8, v9, v10);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = (uint64_t)v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  a1[9] = v13;
  a1[10] = v14;
  return a1;
}

uint64_t *assignWithCopy for Text.Effect.Composition.Run(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  double v5 = (void *)a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a2[6];
  unint64_t v10 = a2[7];
  uint64_t v11 = a2[8];
  uint64_t v21 = a2[9];
  uint64_t v22 = a2[10];
  outlined copy of Text.Effect.Composition.Operation(*a2, v4, v5, v6, v7, v8, v9, v10);
  uint64_t v12 = *a1;
  uint64_t v13 = a1[1];
  uint64_t v14 = (void *)a1[2];
  uint64_t v15 = a1[3];
  uint64_t v16 = a1[4];
  uint64_t v17 = a1[5];
  uint64_t v18 = a1[6];
  unint64_t v19 = a1[7];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = (uint64_t)v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  a1[9] = v21;
  a1[10] = v22;
  outlined consume of Text.Effect.Composition.Operation(v12, v13, v14, v15, v16, v17, v18, v19);
  return a1;
}

uint64_t assignWithTake for Text.Effect.Composition.Run(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 80);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  double v5 = *(void **)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  unint64_t v11 = *(void *)(a1 + 56);
  long long v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v12;
  long long v13 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v13;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = v3;
  outlined consume of Text.Effect.Composition.Operation(v4, v6, v5, v7, v8, v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for Text.Effect.Composition.Run(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 88)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *(void *)(a1 + 32) >> 1;
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

double storeEnumTagSinglePayload for Text.Effect.Composition.Run(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    double result = 0.0;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 88) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      double result = 0.0;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(void *)(a1 + 32) = 2 * -a2;
      *(_OWORD *)(a1 + 40) = 0u;
      *(_OWORD *)(a1 + 56) = 0u;
      *(_OWORD *)(a1 + 72) = 0u;
      return result;
    }
    *(unsigned char *)(a1 + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t getEnumTag for Text.Effect.Composition.Operation(uint64_t a1)
{
  return *(void *)(a1 + 56) >> 62;
}

uint64_t destructiveProjectEnumData for Text.Effect.Composition.Operation(uint64_t result)
{
  *(void *)(result + 56) &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t destructiveInjectEnumTag for Text.Effect.Composition.Operation(uint64_t result, int a2)
{
  *(void *)(result + 32) &= 1uLL;
  *(_DWORD *)(result + 60) = a2 << 30;
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.Composition.Operation()
{
  return &type metadata for Text.Effect.Composition.Operation;
}

ValueMetadata *type metadata accessor for Text.Effect.Composition.Displacements()
{
  return &type metadata for Text.Effect.Composition.Displacements;
}

uint64_t destroy for Text.Effect.BaseContext()
{
  swift_bridgeObjectRelease();
  swift_release();

  return swift_release();
}

void *initializeWithCopy for Text.Effect.BaseContext(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for Text.Effect.BaseContext(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for Text.Effect.BaseContext(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for Text.Effect.BaseContext()
{
  return &type metadata for Text.Effect.BaseContext;
}

uint64_t destroy for Text.Effect.Composition(uint64_t a1)
{
  outlined consume of Text.Layout.Line.Line(*(void **)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Text.Effect.Composition(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  outlined copy of Text.Layout.Line.Line(*(void **)a2, v5, v6);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Text.Effect.Composition(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  outlined copy of Text.Layout.Line.Line(*(void **)a2, v5, v6);
  uint64_t v7 = *(void **)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  char v9 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  outlined consume of Text.Layout.Line.Line(v7, v8, v9);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Text.Effect.Composition(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void **)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v4;
  outlined consume of Text.Layout.Line.Line(v5, v6, v7);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for Text.Effect.Composition()
{
  return &type metadata for Text.Effect.Composition;
}

void *type metadata accessor for FragmentIdentifierOffsetMap()
{
  return &unk_26FA6F690;
}

uint64_t closure #1 in Text.Effect.Composition.clipDrawingBounds(context:)(Swift::UInt64 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return closure #1 in Text.Effect.Composition.useSharedDrawing(context:)(a1, a2, a3, a4, a5) & 1;
}

uint64_t protocol witness for CustomAnimationModifier.velocity<A, B>(base:value:time:context:) in conformance SpeedAnimation@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  return CustomAnimationModifier.velocity<A, B>(base:value:time:context:)(a1, a2);
}

uint64_t CustomAnimationModifier.velocity<A, B>(base:value:time:context:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56))(a2, 1, 1, a1);
}

uint64_t Animation.modifier<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 144))(a1, a3, a4);
}

uint64_t protocol witness for CustomAnimationModifier.shouldMerge<A, B>(base:previous:previousBase:value:time:context:) in conformance LogicalCompletionModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return CustomAnimationModifier.shouldMerge<A, B>(base:previous:previousBase:value:time:context:)(a1, a9, a2, a3, a4, a5, a11, a6, a7, a12, a8, a10);
}

uint64_t CustomAnimationModifier.shouldMerge<A, B>(base:previous:previousBase:value:time:context:)(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v15 = *(void *)(a9 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v17 = (char *)&v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (dispatch thunk of static Equatable.== infix(_:_:)())
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a4, a9);
    Animation.init<A>(_:)((uint64_t)v17, a9, a12);
    char v18 = (*(uint64_t (**)(double))(a12 + 32))(a2);
    swift_release();
  }
  else
  {
    char v18 = 0;
  }
  return v18 & 1;
}

uint64_t CustomAnimationModifiedContent.base.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*CustomAnimationModifiedContent.base.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t CustomAnimationModifiedContent.modifier.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 52));
}

uint64_t CustomAnimationModifiedContent.modifier.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 24) - 8) + 40))(v2 + *(int *)(a2 + 52), a1);
}

uint64_t (*CustomAnimationModifiedContent.modifier.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t CustomAnimationModifiedContent.animate<A>(value:time:context:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, void, void, void))(a3[5] + 16))(v5, a1, a2, a4, a3[2], a5, a3[4], a3[3], a3[5]);
}

uint64_t CustomAnimationModifiedContent.velocity<A>(value:time:context:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *(void *)(a2 + 8);
  char v7 = *(unsigned char *)(a2 + 16);
  char v8 = *(unsigned char *)(a2 + 17);
  v10[0] = *(void *)a2;
  v10[1] = v6;
  char v11 = v7;
  char v12 = v8;
  return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t, void, uint64_t, void, void, void))(a3[5] + 24))(v5, a1, v10, a4, a3[2], a5, a3[4], a3[3], a3[5]);
}

uint64_t CustomAnimationModifiedContent.shouldMerge<A>(previous:value:time:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  uint64_t v8 = v7;
  uint64_t v28 = a5;
  uint64_t v29 = a6;
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v27 - v16;
  uint64_t v18 = *(void *)(a4 - 8);
  double v20 = MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v27 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(void *__return_ptr, double))(*(void *)a1 + 88))(v30, v20);
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for CustomAnimation);
  int v23 = swift_dynamicCast();
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56);
  if (v23)
  {
    v24(v17, 0, 1, a4);
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v22, v17, a4);
    char v25 = (*(uint64_t (**)(uint64_t, char *, char *, uint64_t, uint64_t, uint64_t, void, uint64_t, double, void, void, void))(*(void *)(a4 + 40) + 32))(v8, &v22[*(int *)(a4 + 52)], v22, a2, a3, v28, *(void *)(a4 + 16), v29, a7, *(void *)(a4 + 32), *(void *)(a4 + 24), *(void *)(a4 + 40));
    (*(void (**)(char *, uint64_t))(v18 + 8))(v22, a4);
  }
  else
  {
    v24(v17, 1, 1, a4);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    char v25 = 0;
  }
  return v25 & 1;
}

uint64_t CustomAnimationModifiedContent.function.getter(uint64_t *a1)
{
  static Animation.Function.custom<A>(_:)(v1, a1[2], a1[4], (uint64_t)&v12);
  uint64_t v3 = v12;
  uint64_t v4 = v13;
  uint64_t v5 = v14;
  uint64_t v6 = v15;
  uint64_t v7 = v16;
  char v8 = v17;
  v10[0] = v12;
  v10[1] = v13;
  void v10[2] = v14;
  v10[3] = v15;
  void v10[4] = v16;
  char v11 = v17;
  (*(void (**)(void *, uint64_t))(a1[5] + 40))(v10, a1[3]);

  return outlined consume of Animation.Function(v3, v4, v5, v6, v7, v8);
}

uint64_t CustomAnimationModifiedContent.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int CustomAnimationModifiedContent.hashValue.getter(uint64_t a1)
{
  return CustomAnimationModifiedContent.hashValue.getter(a1, (void (*)(unsigned char *, uint64_t))CustomAnimationModifiedContent.hash(into:));
}

uint64_t protocol witness for CustomAnimation.animate<A>(value:time:context:) in conformance CustomAnimationModifiedContent<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  return CustomAnimationModifiedContent.animate<A>(value:time:context:)(a1, a2, a5, a3, a4);
}

uint64_t protocol witness for CustomAnimation.velocity<A>(value:time:context:) in conformance CustomAnimationModifiedContent<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  return CustomAnimationModifiedContent.velocity<A>(value:time:context:)(a1, a2, a5, a3, a4);
}

uint64_t protocol witness for CustomAnimation.shouldMerge<A>(previous:value:time:context:) in conformance CustomAnimationModifiedContent<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  return CustomAnimationModifiedContent.shouldMerge<A>(previous:value:time:context:)(a1, a2, a3, a6, a4, a5, a7);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CustomAnimationModifiedContent<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance CustomAnimationModifiedContent<A, B>(a1, a2, a3, (void (*)(unsigned char *, uint64_t))CustomAnimationModifiedContent.hash(into:));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CustomAnimationModifiedContent<A, B>()
{
  return static CustomAnimationModifiedContent.== infix(_:_:)();
}

uint64_t CustomAnimationModifiedContent.encode(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(v11 + 16);
  double v14 = MEMORY[0x270FA5388](v13);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))((char *)v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v4, v12, v14);
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for EncodableAnimation);
  if (swift_dynamicCast())
  {
    outlined init with take of ScrollStateRequest(&v24, (uint64_t)v27);
  }
  else
  {
    uint64_t v26 = 0;
    long long v24 = 0u;
    long long v25 = 0u;
    uint64_t v28 = &type metadata for DefaultAnimation;
    uint64_t v29 = &protocol witness table for DefaultAnimation;
    outlined destroy of AnyTrackedValue?((uint64_t)&v24, (unint64_t *)&lazy cache variable for type metadata for EncodableAnimation?, &lazy cache variable for type metadata for EncodableAnimation);
  }
  char v17 = v28;
  uint64_t v18 = (uint64_t)v29;
  __swift_project_boxed_opaque_existential_1(v27, (uint64_t)v28);
  EncodableAnimation.encodeAnimation(to:)(a1, (uint64_t)v17, v18);
  if (!v3)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v4 + *(int *)(a2 + 52), v7);
    type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for ProtobufEncodableMessage);
    if (swift_dynamicCast())
    {
      outlined init with take of ScrollStateRequest(v22, (uint64_t)&v24);
      uint64_t v19 = *((void *)&v25 + 1);
      uint64_t v20 = v26;
      __swift_project_boxed_opaque_existential_1(&v24, *((uint64_t *)&v25 + 1));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 8))(a1, v19, v20);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v24);
    }
    else
    {
      uint64_t v23 = 0;
      memset(v22, 0, sizeof(v22));
      outlined destroy of AnyTrackedValue?((uint64_t)v22, &lazy cache variable for type metadata for ProtobufEncodableMessage?, &lazy cache variable for type metadata for ProtobufEncodableMessage);
    }
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance CustomAnimationModifiedContent<A, B>(uint64_t a1, uint64_t a2)
{
  return CustomAnimationModifiedContent.encode(to:)(a1, a2);
}

uint64_t InternalCustomAnimationModifiedContent._base.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for CustomAnimationModifiedContent();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t InternalCustomAnimationModifiedContent._base.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for CustomAnimationModifiedContent();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*InternalCustomAnimationModifiedContent._base.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t InternalCustomAnimationModifiedContent.modifier.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = type metadata accessor for CustomAnimationModifiedContent();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, v2 + *(int *)(v5 + 52), v4);
}

uint64_t InternalCustomAnimationModifiedContent.velocity<A>(value:time:context:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v11 = *a2;
  uint64_t v12 = a2[1];
  char v13 = *((unsigned char *)a2 + 16);
  char v14 = *((unsigned char *)a2 + 17);
  uint64_t v15 = *(void *)(a3 + 40);
  uint64_t v19 = *(void *)(*(void *)(a3 + 32) + 8);
  uint64_t v20 = v15;
  uint64_t v16 = (void *)type metadata accessor for CustomAnimationModifiedContent();
  v18[0] = v11;
  v18[1] = v12;
  LOBYTE(v19) = v13;
  BYTE1(v19) = v14;
  return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t, void, uint64_t, void, void, double, void))(v16[5] + 24))(v6, a1, v18, a4, v16[2], a5, v16[4], v16[3], a6, v16[5]);
}

uint64_t InternalCustomAnimationModifiedContent.shouldMerge<A>(previous:value:time:context:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, double a7)
{
  uint64_t v37 = a2;
  uint64_t v38 = a3;
  uint64_t v39 = a5;
  uint64_t v11 = a4[2];
  uint64_t v35 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](a1);
  char v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  char v17 = (char *)&v33 - v16;
  uint64_t v18 = *(a4 - 1);
  double v20 = MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v33 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(void *__return_ptr, double))(*(void *)a1 + 88))(v40, v20);
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for CustomAnimation);
  int v23 = swift_dynamicCast();
  long long v24 = *(void (**)(char *, uint64_t, uint64_t, void *))(v18 + 56);
  if (v23)
  {
    v24(v17, 0, 1, a4);
    uint64_t v25 = v18;
    (*(void (**)(char *, char *, void *))(v18 + 32))(v22, v17, a4);
    uint64_t v26 = a4[3];
    uint64_t v27 = *(void *)(a4[4] + 8);
    uint64_t v34 = a6;
    uint64_t v28 = a4[5];
    v40[0] = v11;
    v40[1] = v26;
    v40[2] = v27;
    v40[3] = v28;
    uint64_t v29 = type metadata accessor for CustomAnimationModifiedContent();
    uint64_t v30 = v35;
    uint64_t v33 = v36 + *(int *)(v29 + 52);
    (*(void (**)(char *))(v35 + 16))(v13);
    char v31 = (*(uint64_t (**)(char *, char *, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double, uint64_t, uint64_t, uint64_t))(v28 + 32))(v13, &v22[*(int *)(v29 + 52)], v22, v37, v38, v39, v11, v34, a7, v27, v26, v28);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v13, v11);
    (*(void (**)(char *, void *))(v25 + 8))(v22, a4);
  }
  else
  {
    v24(v17, 1, 1, a4);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    char v31 = 0;
  }
  return v31 & 1;
}

uint64_t InternalCustomAnimationModifiedContent.function.getter@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  v21[1] = a2;
  uint64_t v4 = a1[2];
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21[0] = *(void *)(v8 + 24);
  uint64_t v9 = *(void *)(v21[0] - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  InternalCustomAnimationModifiedContent.modifier.getter(v12, (uint64_t)v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2, v4);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(a1[4] + 16))(&v24, v4);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v13 = v24;
  uint64_t v14 = v25;
  uint64_t v15 = v26;
  uint64_t v16 = v27;
  uint64_t v17 = v28;
  LOBYTE(v5) = v29;
  v22[0] = v24;
  v22[1] = v25;
  long long v22[2] = v26;
  v22[3] = v27;
  v22[4] = v28;
  char v23 = v29;
  uint64_t v18 = *(void (**)(void *, void))(a1[5] + 40);
  uint64_t v19 = v21[0];
  v18(v22, v21[0]);
  outlined consume of Animation.Function(v13, v14, v15, v16, v17, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v19);
}

uint64_t InternalCustomAnimationModifiedContent.hash(into:)()
{
  return CustomAnimationModifiedContent.hash(into:)();
}

Swift::Int InternalCustomAnimationModifiedContent.hashValue.getter(uint64_t a1)
{
  return CustomAnimationModifiedContent.hashValue.getter(a1, (void (*)(unsigned char *, uint64_t))InternalCustomAnimationModifiedContent.hash(into:));
}

Swift::Int CustomAnimationModifiedContent.hashValue.getter(uint64_t a1, void (*a2)(unsigned char *, uint64_t))
{
  Hasher.init(_seed:)();
  a2(v5, a1);
  return Hasher._finalize()();
}

uint64_t protocol witness for CustomAnimation.velocity<A>(value:time:context:) in conformance InternalCustomAnimationModifiedContent<A, B>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  return InternalCustomAnimationModifiedContent.velocity<A>(value:time:context:)(a1, a2, a5, a3, a4, a6);
}

uint64_t protocol witness for CustomAnimation.shouldMerge<A>(previous:value:time:context:) in conformance InternalCustomAnimationModifiedContent<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, double a7)
{
  return InternalCustomAnimationModifiedContent.shouldMerge<A>(previous:value:time:context:)(a1, a2, a3, a6, a4, a5, a7);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance InternalCustomAnimationModifiedContent<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance CustomAnimationModifiedContent<A, B>(a1, a2, a3, (void (*)(unsigned char *, uint64_t))InternalCustomAnimationModifiedContent.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CustomAnimationModifiedContent<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *, uint64_t))
{
  Hasher.init(_seed:)();
  a4(v7, a2);
  return Hasher._finalize()();
}

uint64_t InternalCustomAnimationModifiedContent.encode(to:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CustomAnimationModifiedContent();
  return CustomAnimationModifiedContent.encode(to:)(a1, v2);
}

uint64_t instantiation function for generic protocol witness table for CustomAnimationModifiedContent<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for Equatable in CustomAnimationModifiedContent<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t protocol witness for ProtobufEncodableMessage.encode(to:) in conformance InternalCustomAnimationModifiedContent<A, B>(uint64_t a1)
{
  return InternalCustomAnimationModifiedContent.encode(to:)(a1);
}

uint64_t dispatch thunk of CustomAnimationModifier.animate<A, B>(base:value:time:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (*(uint64_t (**)(void))(a9 + 16))();
}

uint64_t dispatch thunk of CustomAnimationModifier.velocity<A, B>(base:value:time:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (*(uint64_t (**)(void))(a9 + 24))();
}

uint64_t dispatch thunk of CustomAnimationModifier.shouldMerge<A, B>(base:previous:previousBase:value:time:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return (*(uint64_t (**)(void))(a11 + 32))();
}

uint64_t dispatch thunk of CustomAnimationModifier.function(base:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t getEnumTagSinglePayload for CustomAnimationModifiedContent(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void storeEnumTagSinglePayload for CustomAnimationModifiedContent(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x246033BD4);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v10)
        {
          uint64_t v24 = *(void (**)(void))(v6 + 56);
          v24();
        }
        else
        {
          unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
          char v23 = *(void (**)(unint64_t))(v9 + 56);
          v23(v22);
        }
      }
      return;
  }
}

uint64_t static Optional<A>._viewListCount(inputs:)(long long *a1, uint64_t a2, uint64_t a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  uint64_t v4 = *((void *)a1 + 3);
  long long v6 = *a1;
  int v7 = v3;
  uint64_t v8 = v4;
  (*(uint64_t (**)(long long *))(a3 + 40))(&v6);
  return 0;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance <A> A?(long long *a1, uint64_t a2, uint64_t a3)
{
  return 0;
}

uint64_t static Optional<A>.canTransition.getter()
{
  return 1;
}

uint64_t Optional<A>.makeChildView(metadata:view:inputs:)(long long *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *((void *)a1 + 2);
  uint64_t v10 = *((void *)a1 + 3);
  long long v11 = *(_OWORD *)(a3 + 48);
  void v20[2] = *(_OWORD *)(a3 + 32);
  v20[3] = v11;
  v20[4] = *(_OWORD *)(a3 + 64);
  int v21 = *(_DWORD *)(a3 + 80);
  long long v12 = *(_OWORD *)(a3 + 16);
  v20[0] = *(_OWORD *)a3;
  v20[1] = v12;
  void v14[2] = *(void *)(a4 + 16);
  v14[3] = a5;
  long long v15 = *a1;
  uint64_t v16 = v9;
  uint64_t v17 = v10;
  int v18 = a2;
  int v19 = v20;
  return _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v8, (uint64_t)partial apply for closure #1 in Optional<A>.makeChildView(metadata:view:inputs:), (uint64_t)v14, a4, MEMORY[0x263F8E628], (uint64_t)&type metadata for _ViewOutputs, MEMORY[0x263F8E658], a8);
}

unint64_t *partial apply for closure #1 in Optional<A>.makeChildView(metadata:view:inputs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 48);
  uint64_t v6 = *(void *)(v2 + 56);
  int v7 = *(_DWORD *)(v2 + 64);
  uint64_t v8 = *(void *)(v2 + 72);
  long long v15 = *(_OWORD *)(v2 + 32);
  uint64_t v16 = v5;
  uint64_t v17 = v6;
  long long v9 = *(_OWORD *)(v8 + 48);
  void v13[2] = *(_OWORD *)(v8 + 32);
  void v13[3] = v9;
  void v13[4] = *(_OWORD *)(v8 + 64);
  int v14 = *(_DWORD *)(v8 + 80);
  long long v10 = *(_OWORD *)(v8 + 16);
  v13[0] = *(_OWORD *)v8;
  v13[1] = v10;
  uint64_t v11 = type metadata accessor for Optional();
  return ConditionalMetadata<>.makeView<A>(ptr:view:inputs:)(a1, v7, (uint64_t *)v13, v11, a2);
}

uint64_t protocol witness for DynamicView.makeChildView(metadata:view:inputs:) in conformance <A> A?(long long *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return Optional<A>.makeChildView(metadata:view:inputs:)(a1, a2, a3, a4, *(void *)(a5 - 8), a6, a7, a8);
}

uint64_t WeakBox.init(_:)()
{
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();

  return swift_unknownObjectRelease();
}

uint64_t Indirect.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)v2 + *(void *)(**(void **)v2 + 88);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v5);
}

uint64_t static Indirect<A>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  long long v9 = (char *)&v17 - v8;
  uint64_t v11 = *v10;
  uint64_t v18 = *v12;
  uint64_t v13 = type metadata accessor for Indirect();
  Indirect.value.getter(v13, (uint64_t)v9);
  uint64_t v18 = v11;
  Indirect.value.getter(v13, (uint64_t)v6);
  char v14 = dispatch thunk of static Equatable.== infix(_:_:)();
  long long v15 = *(void (**)(char *, uint64_t))(v4 + 8);
  v15(v6, a3);
  v15(v9, a3);
  return v14 & 1;
}

void (*Indirect.value.modify(void *a1, uint64_t a2))(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v6 = malloc(0x38uLL);
  *a1 = v6;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  long long v9 = malloc(*(void *)(v8 + 64));
  v6[6] = v9;
  type metadata accessor for MutableBox();
  if ((isKnownUniquelyReferenced<A>(_:)() & 1) == 0)
  {
    uint64_t v10 = *(void *)v3 + *(void *)(**(void **)v3 + 88);
    swift_beginAccess();
    (*(void (**)(void *, uint64_t, uint64_t))(v8 + 16))(v9, v10, v7);
    uint64_t v11 = MutableBox.__allocating_init(_:)(v9);
    swift_release();
    *(void *)uint64_t v3 = v11;
  }
  swift_beginAccess();
  return Indirect.value.modify;
}

void Indirect.value.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void **)(*(void *)a1 + 48);
  swift_endAccess();
  free(v2);

  free(v1);
}

uint64_t Box.value.getter@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v1 + 80) - 8) + 16))(a1, v1 + *(void *)(*(void *)v1 + 88));
}

uint64_t static Box<A>.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <A> Box<A>()
{
  return static Box<A>.== infix(_:_:)();
}

uint64_t (*MutableBox.value.modify())()
{
  return DisplayList.GraphicsRenderer.platformViewMode.modify;
}

uint64_t Box.init(_:)(uint64_t a1)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v1 + 80) - 8) + 32))(v1 + *(void *)(*(void *)v1 + 88), a1);
  return v1;
}

uint64_t type metadata accessor for Indirect()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t key path setter for MutableBox.wrappedValue : <A>MutableBox<A>(uint64_t a1)
{
  double v1 = MEMORY[0x270FA5388](a1);
  uint64_t v3 = (char *)&v6 - v2;
  (*(void (**)(char *, double))(v4 + 16))((char *)&v6 - v2, v1);
  return MutableBox.wrappedValue.setter(v3);
}

void (*MutableBox.wrappedValue.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 80);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  unsigned char v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  MutableBox.wrappedValue.getter();
  return MutableBox.wrappedValue.modify;
}

void MutableBox.wrappedValue.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 24);
  uint64_t v4 = *(void **)(*(void *)a1 + 32);
  if (a2)
  {
    uint64_t v5 = v2[1];
    uint64_t v6 = v2[2];
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*(void *)a1 + 24), v4, v5);
    MutableBox.wrappedValue.setter(v3);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    MutableBox.wrappedValue.setter(*(void *)(*(void *)a1 + 32));
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t MutableBox.projectedValue.getter()
{
  return swift_retain();
}

uint64_t Box.deinit()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 80) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 88));
  return v0;
}

uint64_t key path getter for WeakBox.base : <A>WeakBox<A>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for WeakBox();
  uint64_t v5 = *(void *)(v4 - 8);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
  uint64_t v6 = MEMORY[0x24C527E00](v8);
  uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v8, v4);
  *a2 = v6;
  return result;
}

void WeakBox.base.getter()
{
}

uint64_t WeakBox.base.setter()
{
  swift_unknownObjectWeakAssign();

  return swift_unknownObjectRelease();
}

uint64_t (*WeakBox.base.modify(void *a1))()
{
  a1[1] = v1;
  *a1 = MEMORY[0x24C527E00](v1);
  return WeakBox.base.modify;
}

uint64_t key path getter for HashableWeakBox.base : <A>HashableWeakBox<A>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for HashableWeakBox();
  uint64_t v5 = *(void *)(v4 - 8);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
  uint64_t v6 = MEMORY[0x24C527E00](v8);
  uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v8, v4);
  *a2 = v6;
  return result;
}

void HashableWeakBox.base.getter()
{
}

uint64_t HashableWeakBox.base.setter()
{
  swift_unknownObjectWeakAssign();

  return swift_unknownObjectRelease();
}

uint64_t (*HashableWeakBox.base.modify(void *a1))()
{
  a1[1] = v1;
  *a1 = MEMORY[0x24C527E00](v1);
  return WeakBox.base.modify;
}

uint64_t WeakBox.base.modify()
{
  swift_unknownObjectWeakAssign();

  return swift_unknownObjectRelease();
}

uint64_t HashableWeakBox.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  uint64_t result = swift_unknownObjectRelease();
  *(void *)(a2 + 8) = a1;
  return result;
}

void HashableWeakBox.hash(into:)()
{
  Hasher._combine(_:)(*(void *)(v0 + 8));
}

BOOL static HashableWeakBox.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 8) == *(void *)(a2 + 8);
}

Swift::Int HashableWeakBox.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(void *)(v0 + 8));
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance HashableWeakBox<A>()
{
  return Hasher._finalize()();
}

uint64_t Indirect.value.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for MutableBox();
  char v9 = isKnownUniquelyReferenced<A>(_:)();
  uint64_t v10 = *v3;
  if ((v9 & 1) == 0)
  {
    uint64_t v11 = v10 + *(void *)(*(void *)v10 + 88);
    swift_beginAccess();
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v6 + 16))(v8, v11, v5);
    uint64_t v12 = MutableBox.__allocating_init(_:)(v8);
    swift_release();
    *uint64_t v3 = v12;
    uint64_t v10 = v12;
  }
  uint64_t v13 = v10 + *(void *)(*(void *)v10 + 88);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24))(v13, a1, v5);
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
}

uint64_t Indirect.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  type metadata accessor for MutableBox();
  uint64_t result = MutableBox.__allocating_init(_:)(a1);
  *a2 = result;
  return result;
}

uint64_t Indirect.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return Indirect.value.getter(a1, a2);
}

uint64_t key path setter for Indirect.value : <A>Indirect<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(unsigned char *, uint64_t))
{
  uint64_t v7 = *(void *)(a4 + a3 - 8);
  uint64_t v8 = type metadata accessor for Indirect();
  char v9 = (uint64_t (*)(unsigned char *, void))a5(v12, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 24))(v10, a1, v7);
  return v9(v12, 0);
}

void (*Indirect.wrappedValue.modify(void *a1, uint64_t a2))(void *a1)
{
  uint64_t v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = Indirect.value.modify(v4, a2);
  return Dictionary.subscript.modifyspecialized ;
}

uint64_t Indirect.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for MutableBox();
  char v9 = isKnownUniquelyReferenced<A>(_:)();
  uint64_t v10 = *v3;
  if ((v9 & 1) == 0)
  {
    uint64_t v11 = v10 + *(void *)(*(void *)v10 + 88);
    swift_beginAccess();
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v6 + 16))(v8, v11, v5);
    uint64_t v12 = MutableBox.__allocating_init(_:)(v8);
    swift_release();
    *uint64_t v3 = v12;
    uint64_t v10 = v12;
  }
  uint64_t v13 = v10 + *(void *)(*(void *)v10 + 88);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24))(v13, a1, v5);
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <A> Indirect<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static Indirect<A>.== infix(_:_:)(a1, a2, *(void *)(a3 + 16));
}

uint64_t sub_246034FD4()
{
  return MutableBox.wrappedValue.getter();
}

uint64_t sub_246034FFC()
{
  return 8;
}

void *sub_246035008(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_246035018()
{
  return swift_unknownObjectWeakAssign();
}

uint64_t sub_246035028()
{
  return 8;
}

uint64_t sub_246035038()
{
  return swift_unknownObjectWeakAssign();
}

uint64_t sub_246035048()
{
  return 8;
}

uint64_t sub_246035054(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_11Tm(a1, a2, a3, (uint64_t (*)(uint64_t))Indirect.value.getter);
}

uint64_t sub_24603506C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Indirect.value : <A>Indirect<A>(a1, a2, a3, a4, (uint64_t (*)(unsigned char *, uint64_t))Indirect.value.modify);
}

uint64_t sub_246035098()
{
  return 8;
}

uint64_t sub_2460350A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_11Tm(a1, a2, a3, (uint64_t (*)(uint64_t))Indirect.wrappedValue.getter);
}

uint64_t keypath_get_11Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v5 = type metadata accessor for Indirect();
  return a4(v5);
}

uint64_t sub_246035118(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Indirect.value : <A>Indirect<A>(a1, a2, a3, a4, (uint64_t (*)(unsigned char *, uint64_t))Indirect.wrappedValue.modify);
}

uint64_t sub_246035144()
{
  return 8;
}

uint64_t type metadata accessor for Box()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for Box(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for Box);
}

uint64_t dispatch thunk of Box.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t method lookup function for MutableBox(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for MutableBox);
}

uint64_t dispatch thunk of MutableBox.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t getEnumTagSinglePayload for HashableWeakBox(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 != 1 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2);
  }
  if (*(void *)(a1 + 8)) {
    int v3 = -1;
  }
  else {
    int v3 = 0;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for HashableWeakBox(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(void *)uint64_t result = a2 - 2;
    *(void *)(result + 8) = 0;
    if (a3 >= 2) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 2) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = 0;
    }
  }
  return result;
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance _GraphInputs.ScrollPositionKey()
{
  return protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance _GraphInputs.ScrollPositionKey();
}

{
  _s7SwiftUI12AtomicBuffer33_82B2D47816BC992595021D60C278AFF0LLCyAA11TrackerData33_D64CE6C88E7413721C59A34C0C940F2CLLVGMaTm_2(0, &lazy cache variable for type metadata for ScrollPositionStorage?, (uint64_t)&type metadata for ScrollPositionStorage, MEMORY[0x263F8D8F0]);
  return AGCompareValues();
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance _GraphInputs.ImageRepresentationKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance _GraphInputs.ImageRepresentationKey(a1, a2, a3, a4, (void (*)(void))type metadata accessor for PlatformImageRepresentable.Type?);
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance _GraphInputs.NamedImageRepresentationKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance _GraphInputs.ImageRepresentationKey(a1, a2, a3, a4, (void (*)(void))type metadata accessor for PlatformNamedImageRepresentable.Type?);
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance _DisplayList_StableIdentityScope()
{
  return static WeakAttribute.== infix(_:_:)();
}

uint64_t static PropertyList.value<A>(as:from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 224))(a3, a3);
}

uint64_t specialized PropertyList.Element.forEach(filter:_:)(uint64_t *a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v7 = *a1;
  while (1)
  {
    while ((v7 & ~a2[7]) != 0)
    {
      a2 = (void *)a2[5];
      if (!a2) {
        return 1;
      }
    }
    uint64_t v8 = a2[3];
    if (v8)
    {
      uint64_t v12 = v7;
      if ((specialized PropertyList.Element.forEach(filter:_:)(&v12, v8, a3, a4) & 1) == 0) {
        return 0;
      }
    }
    if (*a3)
    {
      v9._uint64_t countAndFlagsBits = 8236;
      v9._object = (void *)0xE200000000000000;
      String.append(_:)(v9);
    }
    v10._uint64_t countAndFlagsBits = (*(uint64_t (**)(void))(*a2 + 200))();
    String.append(_:)(v10);
    uint64_t result = swift_bridgeObjectRelease();
    if (__OFADD__(*a3, 1)) {
      break;
    }
    ++*a3;
    a2 = (void *)a2[4];
    if (!a2) {
      return 1;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized PropertyList.Element.forEach(filter:_:)(uint64_t *a1, void *a2, uint64_t a3, uint64_t *a4, unsigned char *a5)
{
  v21[3] = *MEMORY[0x263EF8340];
  uint64_t v9 = *a1;
  while (1)
  {
    while ((v9 & ~a2[7]) != 0)
    {
      a2 = (void *)a2[5];
      if (!a2) {
        return 1;
      }
    }
    uint64_t v10 = a2[3];
    if (v10)
    {
      v21[0] = v9;
      if ((specialized PropertyList.Element.forEach(filter:_:)(v21, v10, a3, a4, a5) & 1) == 0) {
        return 0;
      }
    }
    uint64_t v11 = a2[2];
    swift_retain();
    uint64_t v12 = MEMORY[0x24C525770](v11);
    if (v12)
    {
      if (!a3 || v12 != a3) {
        goto LABEL_20;
      }
    }
    else if (a3)
    {
      goto LABEL_20;
    }
    uint64_t v13 = *a4;
    if (*(void *)(*a4 + 16))
    {
      uint64_t v14 = static Hasher._hash(seed:_:)();
      uint64_t v15 = -1 << *(unsigned char *)(v13 + 32);
      unint64_t v16 = v14 & ~v15;
      if ((*(void *)(v13 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v16))
      {
        uint64_t v17 = *(void *)(v13 + 48);
        if (*(void *)(v17 + 8 * v16) == v11) {
          goto LABEL_20;
        }
        uint64_t v18 = ~v15;
        while (1)
        {
          unint64_t v16 = (v16 + 1) & v18;
          if (((*(void *)(v13 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v16) & 1) == 0) {
            break;
          }
          if (*(void *)(v17 + 8 * v16) == v11) {
            goto LABEL_20;
          }
        }
      }
    }
    specialized Set._Variant.insert(_:)(v21, v11);
    _s7SwiftUI12AtomicBuffer33_82B2D47816BC992595021D60C278AFF0LLCyAA11TrackerData33_D64CE6C88E7413721C59A34C0C940F2CLLVGMaTm_2(0, &lazy cache variable for type metadata for Stack<BodyInputElement>, (uint64_t)&type metadata for BodyInputElement, (uint64_t (*)(void, uint64_t))type metadata accessor for Stack);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*a2 + 224))(v21, v19, v19);
    if (v21[0])
    {
      *a5 = 0;
      swift_beginAccess();
      if (static ReuseTrace.recorder) {
        AGGraphAddTraceEvent();
      }
      swift_retain();
      specialized static Log.graphReuse(_:)();
      swift_release_n();
      swift_release();
      return 0;
    }
    *a5 = 1;
LABEL_20:
    swift_release();
    a2 = (void *)a2[4];
    if (!a2) {
      return 1;
    }
  }
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance _GraphInputs.PrivacyReductionAccessibilityProviderKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance _GraphInputs.PrivacyReductionAccessibilityProviderKey(a1, a2, a3, a4, &lazy cache variable for type metadata for PrivacyReductionAccessibilityProvider.Type, &lazy cache variable for type metadata for PrivacyReductionAccessibilityProvider);
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance MatchedGeometryScope(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance MatchedGeometryScope(a1, a2, a3, a4, &lazy cache variable for type metadata for MatchedGeometryScope?, (void (*)(uint64_t))type metadata accessor for MatchedGeometryScope);
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance _GraphInputs.LayoutAccessibilityProviderKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance _GraphInputs.PrivacyReductionAccessibilityProviderKey(a1, a2, a3, a4, &lazy cache variable for type metadata for LayoutAccessibilityProvider.Type, &lazy cache variable for type metadata for LayoutAccessibilityProvider);
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance _GraphInputs.SpacerRepresentationKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance _GraphInputs.ImageRepresentationKey(a1, a2, a3, a4, (void (*)(void))type metadata accessor for PlatformSpacerRepresentable.Type?);
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance _GraphInputs.OpacityAccessibilityProviderKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance _GraphInputs.PrivacyReductionAccessibilityProviderKey(a1, a2, a3, a4, &lazy cache variable for type metadata for OpacityAccessibilityProvider.Type, &lazy cache variable for type metadata for OpacityAccessibilityProvider);
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance _GraphInputs.TextAlwaysOnProviderKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance _GraphInputs.ImageRepresentationKey(a1, a2, a3, a4, (void (*)(void))type metadata accessor for TextAlwaysOnProvider.Type?);
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance _GraphInputs.TextRepresentationKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance _GraphInputs.ImageRepresentationKey(a1, a2, a3, a4, (void (*)(void))type metadata accessor for PlatformTextRepresentable.Type?);
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance _GraphInputs.TextSelectionRepresentationKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance _GraphInputs.ImageRepresentationKey(a1, a2, a3, a4, (void (*)(void))type metadata accessor for PlatformTextSelectionRepresentation.Type?);
}

uint64_t PropertyList.init()()
{
  return 0;
}

BOOL PropertyList.isEmpty.getter(uint64_t a1)
{
  return a1 == 0;
}

uint64_t PropertyList.set(_:)(uint64_t result)
{
  uint64_t v2 = result;
  if (!*v1)
  {
    if (!result) {
      return result;
    }
    goto LABEL_6;
  }
  if (!result || *v1 != result)
  {
LABEL_6:
    swift_retain();
    uint64_t result = swift_release();
    *uint64_t v1 = v2;
  }
  return result;
}

uint64_t PropertyList.init(data:)(uint64_t result)
{
  if (result)
  {
    type metadata accessor for PropertyList.Element();
    return swift_dynamicCastClassUnconditional();
  }
  return result;
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance ImplicitRootType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance _GraphInputs.PrivacyReductionAccessibilityProviderKey(a1, a2, a3, a4, &lazy cache variable for type metadata for _VariadicView_AnyImplicitRoot.Type, &lazy cache variable for type metadata for _VariadicView_AnyImplicitRoot);
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance ReferenceDateInput()
{
  type metadata accessor for PropertyList.Element?(0, &lazy cache variable for type metadata for Date?, 255, MEMORY[0x263F07490]);

  return static WeakAttribute.== infix(_:_:)();
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance <> InvertedViewInputPredicate<A>()
{
  return static PropertyKey<>.valuesEqual(_:_:)() & 1;
}

uint64_t PropertyList.Tracker.initializeValues(from:)(uint64_t a1)
{
  if (a1) {
    uint64_t v2 = *(void *)(a1 + 64);
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  *(void *)(v3 + 24) = v2;
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));

  return swift_release();
}

uint64_t PropertyList.id.getter@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if (result) {
    *a2 = *(void *)(result + 64);
  }
  else {
    *a2 = 0;
  }
  return result;
}

uint64_t PropertyList.Tracker.invalidateAllValues(from:to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 16));
  uint64_t v6 = *(void *)(v5 + 24);
  if (a1)
  {
    if (v6 != *(void *)(a1 + 64)) {
      goto LABEL_12;
    }
    if (!a2)
    {
      if (v6)
      {
        move(_:to:)(v5 + 32, v5 + 48);
        move(_:to:)(v5 + 40, v5 + 48);
        *(void *)(v5 + 24) = 0;
      }
      goto LABEL_12;
    }
  }
  else
  {
    if (v6) {
      BOOL v7 = 1;
    }
    else {
      BOOL v7 = a2 == 0;
    }
    if (v7) {
      goto LABEL_12;
    }
  }
  if (v6 != *(void *)(a2 + 64))
  {
    move(_:to:)(v5 + 32, v5 + 48);
    move(_:to:)(v5 + 40, v5 + 48);
    *(void *)(v5 + 24) = *(void *)(a2 + 64);
  }
LABEL_12:
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 16));

  return swift_release();
}

uint64_t PropertyList.Tracker.formUnion(_:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 16));
  uint64_t v3 = *(void *)(v2 + 32);
  uint64_t v4 = *(void *)(v2 + 40);
  uint64_t v5 = *(void *)(v2 + 48);
  char v6 = *(unsigned char *)(v2 + 56);
  v9[0] = *(void *)(v2 + 24);
  v9[1] = v3;
  long long v9[2] = v4;
  v9[3] = v5;
  BOOL v7 = *(os_unfair_lock_s **)(v1 + 16);
  char v10 = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  os_unfair_lock_lock(v7 + 4);
  TrackerData.formUnion(_:)((uint64_t)v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(v7 + 4);
  swift_release();
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 16));

  return swift_release();
}

uint64_t PropertyList.Tracker.derivedValue<A>(_:for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v12 = (char *)&v25 - v11;
  uint64_t v13 = *(void *)(v4 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v13 + 16));
  uint64_t v14 = *(void *)(v13 + 24);
  if (!a1)
  {
    if (!v14) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v13 + 56) = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 24))(a1, a2, a3);
    goto LABEL_9;
  }
  if (v14 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v26 = a4;
  uint64_t v15 = *(void *)(v13 + 40);
  if (*(void *)(v15 + 16) && (unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(a2), (v17 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v15 + 56) + 40 * v16, (uint64_t)v27);
    outlined init with take of ScrollStateRequest(v27, (uint64_t)v28);
    uint64_t v18 = v29;
    uint64_t v19 = v30;
    __swift_project_boxed_opaque_existential_1(v28, v29);
    ((void (*)(uint64_t, uint64_t, _UNKNOWN **))v19[1])(AssociatedTypeWitness, v18, v19);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
  }
  else
  {
    unsigned int v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 24);
    uint64_t v25 = v13 + 40;
    uint64_t v21 = v26;
    v20(a1, a2, a3);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v21, AssociatedTypeWitness);
    uint64_t v29 = type metadata accessor for DerivedValue();
    uint64_t v30 = &protocol witness table for DerivedValue<A>;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v28);
    uint64_t v23 = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t *, char *, uint64_t))(*(void *)(v23 - 8) + 32))(boxed_opaque_existential_1, v12, v23);
    specialized Dictionary.subscript.setter((uint64_t)v28, a2);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v13 + 16));
  return swift_release();
}

uint64_t PropertyList.description.getter(void *a1)
{
  v5[0] = 91;
  v5[1] = 0xE100000000000000;
  uint64_t v4 = 0;
  if (a1)
  {
    uint64_t v3 = 0;
    specialized PropertyList.Element.forEach(filter:_:)(&v3, a1, &v4, (uint64_t)v5);
  }
  v1._uint64_t countAndFlagsBits = 93;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return v5[0];
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance StyleableViewContextInput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance MatchedGeometryScope(a1, a2, a3, a4, &lazy cache variable for type metadata for Any.Type?, (void (*)(uint64_t))type metadata accessor for Any.Type);
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance MatchedGeometryScope(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, void (*a6)(uint64_t))
{
  return AGCompareValues();
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance _GraphInputs.GestureAccessibilityProviderKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance _GraphInputs.PrivacyReductionAccessibilityProviderKey(a1, a2, a3, a4, &lazy cache variable for type metadata for GestureAccessibilityProvider.Type, &lazy cache variable for type metadata for GestureAccessibilityProvider);
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance TextRendererInput()
{
  type metadata accessor for TextRendererBoxBase();

  return static WeakAttribute.== infix(_:_:)();
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance ReusableInputs()
{
  return AGCompareValues();
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance _GraphInputs.ImageAccessibilityProviderKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance _GraphInputs.PrivacyReductionAccessibilityProviderKey(a1, a2, a3, a4, &lazy cache variable for type metadata for ImageAccessibilityProvider.Type, &lazy cache variable for type metadata for ImageAccessibilityProvider);
}

uint64_t PropertyList.elements.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *Swift::String v1 = a1;
  return result;
}

uint64_t (*PropertyList.elements.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void (*PropertyList.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(Swift::Int **a1, char a2)
{
  uint64_t v9 = malloc(0x40uLL);
  *a1 = v9;
  long long v9[2] = a4;
  v9[3] = v4;
  void *v9 = a2;
  v9[1] = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  void v9[4] = AssociatedTypeWitness;
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  _OWORD v9[5] = v11;
  size_t v12 = *(void *)(v11 + 64);
  v9[6] = malloc(v12);
  v9[7] = malloc(v12);
  PropertyList.subscript.getter(a2, *v4, a3, a4);
  return PropertyList.subscript.modify;
}

void PropertyList.subscript.modify(Swift::Int **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a1)[6];
  uint64_t v4 = (void *)(*a1)[7];
  Swift::Int v5 = (*a1)[4];
  Swift::Int v6 = (*a1)[5];
  uint64_t v7 = (*a1)[2];
  Swift::Int v9 = **a1;
  uint64_t v8 = (*a1)[1];
  if (a2)
  {
    (*(void (**)(Swift::Int, void *, Swift::Int))(v6 + 16))((*a1)[6], v4, v5);
    specialized PropertyList.subscript.setter((uint64_t)v3, v9, v8, v7);
    uint64_t v10 = *(void (**)(void *, Swift::Int))(v6 + 8);
    v10(v3, v5);
    v10(v4, v5);
  }
  else
  {
    specialized PropertyList.subscript.setter((*a1)[7], v9, v8, v7);
    (*(void (**)(void *, Swift::Int))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);

  free(v2);
}

SwiftUI::BloomFilter PropertyList.prependValue<A>(_:for:)(uint64_t a1)
{
  uint64_t v2 = v1;
  type metadata accessor for TypedElement();
  uint64_t v4 = *v2;
  swift_allocObject();
  result.value = specialized TypedElement.init(value:before:after:)(a1, 0, v4).value;
  *uint64_t v2 = result.value;
  return result;
}

uint64_t PropertyList.mayNotBeEqual(to:ignoredTypes:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3)
  {
    if (a1)
    {
      uint64_t v8 = a2;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      BOOL v5 = compareLists(_:_:ignoredTypes:)(a3, a1, (uint64_t)&v8);
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      char v6 = !v5;
    }
    else
    {
      char v6 = 1;
    }
  }
  else
  {
    char v6 = a1 != 0;
  }
  return v6 & 1;
}

BOOL PropertyList.isIdentical(to:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a2 == a1;
  if (!a1) {
    BOOL v2 = a2 == 0;
  }
  if (a2) {
    return v2;
  }
  else {
    return a1 == 0;
  }
}

uint64_t PropertyList.merging(_:)(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PropertyList()
{
  Swift::String v1 = *v0;
  v6[0] = 91;
  v6[1] = 0xE100000000000000;
  uint64_t v5 = 0;
  if (v1)
  {
    uint64_t v4 = 0;
    specialized PropertyList.Element.forEach(filter:_:)(&v4, v1, &v5, (uint64_t)v6);
  }
  v2._uint64_t countAndFlagsBits = 93;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  return v6[0];
}

__n128 property wrapper backing initializer of PropertyList.Tracker.data@<Q0>(uint64_t a1@<X0>, __n128 **a2@<X8>)
{
  unint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 24);
  unsigned __int8 v6 = *(unsigned char *)(a1 + 32);
  _s7SwiftUI12AtomicBuffer33_82B2D47816BC992595021D60C278AFF0LLCyAA11TrackerData33_D64CE6C88E7413721C59A34C0C940F2CLLVGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<TrackerData>, (uint64_t)&type metadata for TrackerData, (uint64_t (*)(void, uint64_t))type metadata accessor for AtomicBuffer);
  uint64_t v7 = (__n128 *)swift_allocObject();
  v7[1].n128_u32[0] = 0;
  v7[1].n128_u64[1] = v4;
  __n128 result = *(__n128 *)(a1 + 8);
  _OWORD v7[2] = result;
  v7[3].n128_u64[0] = v5;
  v7[3].n128_u8[8] = v6;
  *a2 = v7;
  return result;
}

uint64_t PropertyList.Tracker.init()()
{
  _s7SwiftUI12AtomicBuffer33_82B2D47816BC992595021D60C278AFF0LLCyAA11TrackerData33_D64CE6C88E7413721C59A34C0C940F2CLLVGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<TrackerData>, (uint64_t)&type metadata for TrackerData, (uint64_t (*)(void, uint64_t))type metadata accessor for AtomicBuffer);
  uint64_t v1 = swift_allocObject();
  *(_DWORD *)(v1 + 16) = 0;
  uint64_t v2 = MEMORY[0x263F8EE80];
  uint64_t v3 = MEMORY[0x263F8EE78];
  *(void *)(v1 + 24) = 0;
  *(void *)(v1 + 32) = v2;
  *(void *)(v1 + 40) = v2;
  *(void *)(v1 + 48) = v3;
  *(unsigned char *)(v1 + 56) = 0;
  *(void *)(v0 + 16) = v1;
  return v0;
}

uint64_t TrackerData.formUnion(_:)(uint64_t result)
{
  uint64_t v2 = *(void *)result;
  uint64_t v3 = *v1;
  if (*(void *)result) {
    BOOL v4 = v3 == v2;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t v5 = *(void *)(result + 8);
    uint64_t v6 = *(void *)(result + 16);
    uint64_t v7 = *(void *)(result + 24);
    char v8 = *(unsigned char *)(result + 32);
    if (v3)
    {
      *uint64_t v1 = v2;
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v12 = v1[1];
      v1[1] = 0x8000000000000000;
      specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v5, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, &v12);
      v1[1] = v12;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      char v10 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v12 = v1[2];
      v1[2] = 0x8000000000000000;
      specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v6, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, v10, &v12);
      v1[2] = v12;
      swift_bridgeObjectRelease();
      uint64_t v11 = swift_bridgeObjectRetain();
      __n128 result = specialized Array.append<A>(contentsOf:)(v11);
      *((unsigned char *)v1 + 32) = (*((unsigned char *)v1 + 32) | v8) & 1;
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *uint64_t v1 = v2;
      v1[1] = v5;
      v1[2] = v6;
      v1[3] = v7;
      *((unsigned char *)v1 + 32) = v8;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return swift_bridgeObjectRetain();
    }
  }
  return result;
}

uint64_t PropertyList.Tracker.deinit()
{
  swift_release();
  return v0;
}

uint64_t PropertyList.Element.__deallocating_deinit()
{
  PropertyList.Element.deinit();

  return swift_deallocClassInstance();
}

void PropertyList.Element.description.getter()
{
}

void PropertyList.Element.matches(_:ignoredTypes:)()
{
}

void PropertyList.Element.copy(before:after:)()
{
}

void PropertyList.Element.value<A>(as:)()
{
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PropertyList.Element()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 200))();
}

uint64_t TypedElement.description.getter()
{
  v0._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._uint64_t countAndFlagsBits = 2112800;
  v1._object = (void *)0xE300000000000000;
  String.append(_:)(v1);
  swift_getAssociatedTypeWitness();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  return 0;
}

uint64_t TypedElement.__ivar_destroyer()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 248);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);

  return v3(v1, AssociatedTypeWitness);
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance EmptyKey()
{
  return AGCompareValues();
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance ForEachEvictionInput()
{
  return static WeakAttribute.== infix(_:_:)();
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance _GraphInputs.TextAccessibilityProviderKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance _GraphInputs.PrivacyReductionAccessibilityProviderKey(a1, a2, a3, a4, &lazy cache variable for type metadata for TextAccessibilityProvider.Type, &lazy cache variable for type metadata for TextAccessibilityProvider);
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance _GraphInputs.PrivacyReductionAccessibilityProviderKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, unint64_t *a6)
{
  return AGCompareValues();
}

BOOL protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance InterfaceIdiomInput(void *a1, void *a2)
{
  if (*a1) {
    BOOL v2 = *a2 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2) {
    return (*a1 | *a2) == 0;
  }
  else {
    return (*(uint64_t (**)(void))(a1[1] + 8))() & 1;
  }
}

BOOL protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance _GraphInputs.SavedTransactionKey(uint64_t *a1, uint64_t *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance Image.Style()
{
  return AGCompareValues();
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = outlined init with copy of AnyTrackedValue((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
  *a2 = v3;
  return result;
}

uint64_t dispatch thunk of static PropertyKey.defaultValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of static PropertyKey.valuesEqual(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of static DerivedPropertyKey.value(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t method lookup function for PropertyList.Tracker(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for PropertyList.Tracker);
}

uint64_t dispatch thunk of PropertyList.Tracker.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t method lookup function for PropertyList.Element(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for PropertyList.Element);
}

uint64_t dispatch thunk of PropertyList.Element.description.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of static PropertyKeyLookup.lookup(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t initializeWithCopy for DerivedValue(uint64_t a1, uint64_t a2)
{
  return initializeWithCopy for DerivedValue(a1, a2);
}

{
  uint64_t AssociatedTypeWitness;

  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithCopy for DerivedValue(uint64_t a1, uint64_t a2)
{
  return assignWithCopy for DerivedValue(a1, a2);
}

{
  uint64_t AssociatedTypeWitness;

  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 24))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t initializeWithTake for DerivedValue(uint64_t a1, uint64_t a2)
{
  return initializeWithTake for DerivedValue(a1, a2);
}

{
  uint64_t AssociatedTypeWitness;

  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithTake for DerivedValue(uint64_t a1, uint64_t a2)
{
  return assignWithTake for DerivedValue(a1, a2);
}

{
  uint64_t AssociatedTypeWitness;

  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 40))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t getEnumTagSinglePayload for DerivedValue(unsigned __int16 *a1, unsigned int a2)
{
  return getEnumTagSinglePayload for DerivedValue(a1, a2);
}

{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  char v7;
  int v8;
  unsigned int v9;
  int v10;
  uint64_t (*v11)(unsigned __int16 *);
  uint64_t vars8;

  BOOL v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  if (a2 <= v5) {
    goto LABEL_19;
  }
  uint64_t v7 = 8 * v6;
  if (v6 <= 3)
  {
    Swift::Int v9 = ((a2 - v5 + ~(-1 << v7)) >> v7) + 1;
    if (HIWORD(v9))
    {
      char v8 = *(_DWORD *)((char *)a1 + v6);
      if (!v8) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v9 > 0xFF)
    {
      char v8 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v9 < 2)
    {
LABEL_19:
      if (v5)
      {
        uint64_t v11 = *(uint64_t (**)(unsigned __int16 *))(v4 + 48);
        return v11(a1);
      }
      return 0;
    }
  }
  char v8 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  char v10 = (v8 - 1) << v7;
  if (v6 > 3) {
    char v10 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v10) + 1;
}

void storeEnumTagSinglePayload for DerivedValue(unsigned char *a1, uint64_t a2, unsigned int a3)
{
}

{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;
  void (*v14)(unsigned char *, uint64_t);
  uint64_t vars8;

  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v7 = *(_DWORD *)(v6 + 84);
  char v8 = *(void *)(v6 + 64);
  if (a3 <= v7)
  {
    Swift::Int v9 = 0;
  }
  else if (v8 <= 3)
  {
    uint64_t v12 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
    if (HIWORD(v12))
    {
      Swift::Int v9 = 4;
    }
    else if (v12 >= 0x100)
    {
      Swift::Int v9 = 2;
    }
    else
    {
      Swift::Int v9 = v12 > 1;
    }
  }
  else
  {
    Swift::Int v9 = 1;
  }
  if (v7 < a2)
  {
    char v10 = ~v7 + a2;
    if (v8 < 4)
    {
      uint64_t v11 = (v10 >> (8 * v8)) + 1;
      if (v8)
      {
        uint64_t v13 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v13;
          a1[2] = BYTE2(v13);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v13;
        }
        else
        {
          *a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
      uint64_t v11 = 1;
    }
    switch(v9)
    {
      case 1:
        a1[v8] = v11;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v11;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v11;
        return;
      default:
        return;
    }
  }
  switch(v9)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x246037BD0);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v14 = *(void (**)(unsigned char *, uint64_t))(v6 + 56);
        v14(a1, a2);
      }
      return;
  }
}

uint64_t initializeWithCopy for TrackedValue(uint64_t a1, uint64_t a2)
{
  return initializeWithCopy for DerivedValue(a1, a2);
}

uint64_t assignWithCopy for TrackedValue(uint64_t a1, uint64_t a2)
{
  return assignWithCopy for DerivedValue(a1, a2);
}

uint64_t initializeWithTake for TrackedValue(uint64_t a1, uint64_t a2)
{
  return initializeWithTake for DerivedValue(a1, a2);
}

uint64_t assignWithTake for TrackedValue(uint64_t a1, uint64_t a2)
{
  return assignWithTake for DerivedValue(a1, a2);
}

uint64_t getEnumTagSinglePayload for TrackedValue(unsigned __int16 *a1, unsigned int a2)
{
  return getEnumTagSinglePayload for DerivedValue(a1, a2);
}

void storeEnumTagSinglePayload for TrackedValue(unsigned char *a1, uint64_t a2, unsigned int a3)
{
}

uint64_t initializeWithCopy for SecondaryLookupTrackedValue(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithCopy for SecondaryLookupTrackedValue(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 24))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t initializeWithTake for SecondaryLookupTrackedValue(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithTake for SecondaryLookupTrackedValue(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 40))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t getEnumTagSinglePayload for SecondaryLookupTrackedValue(unsigned __int16 *a1, unsigned int a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v7 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v9 = ((a2 - v5 + ~(-1 << v7)) >> v7) + 1;
    if (HIWORD(v9))
    {
      int v8 = *(_DWORD *)((char *)a1 + v6);
      if (!v8) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v9 > 0xFF)
    {
      int v8 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v9 < 2)
    {
LABEL_19:
      if (v5)
      {
        uint64_t v11 = *(uint64_t (**)(unsigned __int16 *))(v4 + 48);
        return v11(a1);
      }
      return 0;
    }
  }
  int v8 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v10 = (v8 - 1) << v7;
  if (v6 > 3) {
    int v10 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v10) + 1;
}

void storeEnumTagSinglePayload for SecondaryLookupTrackedValue(unsigned char *a1, uint64_t a2, unsigned int a3)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  if (a3 <= v7)
  {
    int v9 = 0;
  }
  else if (v8 <= 3)
  {
    unsigned int v12 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
    if (HIWORD(v12))
    {
      int v9 = 4;
    }
    else if (v12 >= 0x100)
    {
      int v9 = 2;
    }
    else
    {
      int v9 = v12 > 1;
    }
  }
  else
  {
    int v9 = 1;
  }
  if (v7 < a2)
  {
    unsigned int v10 = ~v7 + a2;
    if (v8 < 4)
    {
      int v11 = (v10 >> (8 * v8)) + 1;
      if (v8)
      {
        int v13 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v13;
          a1[2] = BYTE2(v13);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v13;
        }
        else
        {
          *a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
      int v11 = 1;
    }
    switch(v9)
    {
      case 1:
        a1[v8] = v11;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v11;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v11;
        return;
      default:
        return;
    }
  }
  switch(v9)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x2460383F0);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v14 = *(void (**)(unsigned char *, uint64_t))(v6 + 56);
        v14(a1, a2);
      }
      return;
  }
}

uint64_t initializeWithCopy for TrackerData(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TrackerData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for TrackerData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for TrackerData(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 33)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TrackerData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 33) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TrackerData()
{
  return &type metadata for TrackerData;
}

ValueMetadata *type metadata accessor for EmptyKey()
{
  return &type metadata for EmptyKey;
}

uint64_t _s7SwiftUI12PropertyListV7ElementC7forEach6filter_SbAA11BloomFilterV_ys9UnmanagedVyAEG_SbztXEtF03_s7a4UI12cd54V7forEach7keyType_yxm_y5ValueQz_SbztXEtAA0C3KeyRzlFys9k5VyAC7e3CG_U121XEfU_AA011TransactioncJ033_B2543BCA257433E04979186A1DC2B6BCLLVyAA09AnimationJ033_D98E9A1069CEEADA58829ED440E36F30LLVG_Tg5xSbRi_zRi0_zlyAA9AnimationVSgIsgnl_Tf1ncn_nTf4nng_n(uint64_t *a1, void *a2, void (*a3)(uint64_t *, BOOL *), uint64_t a4)
{
  uint64_t v7 = *a1;
  BOOL v14 = 0;
  while (1)
  {
    while ((v7 & ~a2[7]) != 0)
    {
      a2 = (void *)a2[5];
      if (!a2) {
        return 1;
      }
    }
    uint64_t v8 = a2[3];
    if (v8)
    {
      uint64_t v13 = v7;
      char v9 = _s7SwiftUI12PropertyListV7ElementC7forEach6filter_SbAA11BloomFilterV_ys9UnmanagedVyAEG_SbztXEtF03_s7a4UI12cd54V7forEach7keyType_yxm_y5ValueQz_SbztXEtAA0C3KeyRzlFys9k5VyAC7e3CG_U121XEfU_AA011TransactioncJ033_B2543BCA257433E04979186A1DC2B6BCLLVyAA09AnimationJ033_D98E9A1069CEEADA58829ED440E36F30LLVG_Tg5xSbRi_zRi0_zlyAA9AnimationVSgIsgnl_Tf1ncn_nTf4nng_n(&v13, v8, a3, a4);
      BOOL v14 = (v9 & 1) == 0;
      if ((v9 & 1) == 0) {
        break;
      }
    }
    uint64_t v10 = a2[2];
    type metadata accessor for TypedElement<EmptyKey>(0, (unint64_t *)&lazy cache variable for type metadata for TransactionPropertyKey<AnimationKey>, (uint64_t)&type metadata for AnimationKey, (uint64_t)&protocol witness table for AnimationKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    if (v10 == v11)
    {
      uint64_t v13 = a2[9];
      swift_retain();
      a3(&v13, &v14);
      swift_release();
      if (v14) {
        break;
      }
    }
    a2 = (void *)a2[4];
    if (!a2) {
      return 1;
    }
  }
  return 0;
}

uint64_t _SizedShape.shape.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t _SizedShape.shape.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*_SizedShape.shape.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double _SizedShape.size.getter(uint64_t a1)
{
  return *(double *)(v1 + *(int *)(a1 + 36));
}

uint64_t _SizedShape.size.setter(uint64_t result, double a2, double a3)
{
  uint64_t v4 = (double *)(v3 + *(int *)(result + 36));
  *uint64_t v4 = a2;
  v4[1] = a3;
  return result;
}

uint64_t (*_SizedShape.size.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t _SizedShape.init(shape:size:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
  uint64_t result = type metadata accessor for _SizedShape();
  char v9 = (double *)(a3 + *(int *)(result + 36));
  double *v9 = a4;
  v9[1] = a5;
  return result;
}

uint64_t type metadata accessor for _SizedShape()
{
  return __swift_instantiateGenericMetadata();
}

double _SizedShape.path(in:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>, __n128 a4@<Q1>)
{
  (*(void (**)(_OWORD *__return_ptr, void, __n128, __n128, double, double))(*(void *)(a1 + 24) + 24))(v8, *(void *)(a1 + 16), a3, a4, *(double *)(v4 + *(int *)(a1 + 36)), *(double *)(v4 + *(int *)(a1 + 36) + 8));
  double result = *(double *)v8;
  long long v7 = v8[1];
  *(_OWORD *)a2 = v8[0];
  *(_OWORD *)(a2 + 16) = v7;
  *(unsigned char *)(a2 + 32) = v9;
  return result;
}

uint64_t static _SizedShape.role.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t _SizedShape.layoutDirectionBehavior.getter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 40))(*(void *)(a1 + 16));
}

uint64_t _SizedShape.animatableData.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(*(void *)(a1 + 24) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  double v8 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v10 = (char *)&v14 - v9;
  (*(void (**)(uint64_t, uint64_t, double))(v6 + 24))(v5, v6, v8);
  long long v14 = *(_OWORD *)(v2 + *(int *)(a1 + 36));
  type metadata accessor for AnimatablePair<CGFloat, CGFloat>();
  uint64_t v12 = v11;
  swift_getAssociatedConformanceWitness();
  lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>();
  return AnimatablePair.init(_:_:)((uint64_t)v10, (uint64_t)&v14, AssociatedTypeWitness, v12, a2);
}

uint64_t _SizedShape.animatableData.setter(uint64_t a1, uint64_t a2)
{
  specialized _SizedShape.animatableData.setter(a1, a2);
  swift_getAssociatedTypeWitness();
  type metadata accessor for AnimatablePair<CGFloat, CGFloat>();
  swift_getAssociatedConformanceWitness();
  lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>();
  uint64_t v3 = type metadata accessor for AnimatablePair();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
}

void (*_SizedShape.animatableData.modify(void *a1, uint64_t a2))(uint64_t a1, char a2)
{
  uint64_t v5 = malloc(0x50uLL);
  *a1 = v5;
  v5[4] = a2;
  _OWORD v5[5] = v2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for AnimatablePair<CGFloat, CGFloat>();
  uint64_t v8 = v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  unint64_t v10 = lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>();
  *uint64_t v5 = AssociatedTypeWitness;
  v5[1] = v8;
  void v5[2] = AssociatedConformanceWitness;
  v5[3] = v10;
  uint64_t v11 = type metadata accessor for AnimatablePair();
  _OWORD v5[6] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v5[7] = v12;
  size_t v13 = *(void *)(v12 + 64);
  v5[8] = malloc(v13);
  long long v14 = malloc(v13);
  v5[9] = v14;
  _SizedShape.animatableData.getter(a2, (uint64_t)v14);
  return _SizedShape.animatableData.modify;
}

void _SizedShape.animatableData.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 64);
  uint64_t v4 = *(void **)(*(void *)a1 + 72);
  uint64_t v5 = *(void *)(*(void *)a1 + 48);
  uint64_t v6 = *(void *)(*(void *)a1 + 56);
  uint64_t v7 = *(void *)(*(void *)a1 + 32);
  if (a2)
  {
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*(void *)a1 + 64), v4, v5);
    specialized _SizedShape.animatableData.setter((uint64_t)v3, v7);
    uint64_t v8 = *(void (**)(void *, uint64_t))(v6 + 8);
    v8(v3, v5);
    v8(v4, v5);
  }
  else
  {
    specialized _SizedShape.animatableData.setter(*(void *)(*(void *)a1 + 72), v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);

  free(v2);
}

double protocol witness for Shape.path(in:) in conformance _SizedShape<A>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>, __n128 a4@<Q1>)
{
  _SizedShape.path(in:)(a1, (uint64_t)v7, a3, a4);
  double result = *(double *)v7;
  long long v6 = v7[1];
  *(_OWORD *)a2 = v7[0];
  *(_OWORD *)(a2 + 16) = v6;
  *(unsigned char *)(a2 + 32) = v8;
  return result;
}

uint64_t protocol witness for static Shape.role.getter in conformance _SizedShape<A>(uint64_t a1)
{
  return static _SizedShape.role.getter(*(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t protocol witness for Animatable.animatableData.setter in conformance _SizedShape<A>(uint64_t a1, uint64_t a2)
{
  specialized _SizedShape.animatableData.setter(a1, a2);
  swift_getAssociatedTypeWitness();
  type metadata accessor for AnimatablePair<CGFloat, CGFloat>();
  swift_getAssociatedConformanceWitness();
  lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>();
  uint64_t v3 = type metadata accessor for AnimatablePair();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
}

void (*protocol witness for Animatable.animatableData.modify in conformance _SizedShape<A>(void *a1, uint64_t a2))(uint64_t a1, char a2)
{
  uint64_t v5 = malloc(0x50uLL);
  *a1 = v5;
  v5[4] = v2;
  _OWORD v5[5] = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for AnimatablePair<CGFloat, CGFloat>();
  uint64_t v8 = v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  unint64_t v10 = lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>();
  *uint64_t v5 = AssociatedTypeWitness;
  v5[1] = v8;
  void v5[2] = AssociatedConformanceWitness;
  v5[3] = v10;
  uint64_t v11 = type metadata accessor for AnimatablePair();
  _OWORD v5[6] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v5[7] = v12;
  size_t v13 = *(void *)(v12 + 64);
  v5[8] = malloc(v13);
  long long v14 = malloc(v13);
  v5[9] = v14;
  _SizedShape.animatableData.getter(a2, (uint64_t)v14);
  return protocol witness for Animatable.animatableData.modify in conformance _SizedShape<A>;
}

void protocol witness for Animatable.animatableData.modify in conformance _SizedShape<A>(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 64);
  uint64_t v4 = *(void **)(*(void *)a1 + 72);
  uint64_t v5 = *(void *)(*(void *)a1 + 48);
  uint64_t v6 = *(void *)(*(void *)a1 + 56);
  uint64_t v7 = *(void *)(*(void *)a1 + 40);
  if (a2)
  {
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*(void *)a1 + 64), v4, v5);
    specialized _SizedShape.animatableData.setter((uint64_t)v3, v7);
    uint64_t v8 = *(void (**)(void *, uint64_t))(v6 + 8);
    v8(v3, v5);
    v8(v4, v5);
  }
  else
  {
    specialized _SizedShape.animatableData.setter(*(void *)(*(void *)a1 + 72), v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t Shape.size(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  uint64_t v9 = *(void *)(a1 - 8);
  double v10 = MEMORY[0x270FA5388](a1);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v12, v4, a1, v10);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a2, v12, a1);
  uint64_t result = type metadata accessor for _SizedShape();
  long long v14 = (double *)(a2 + *(int *)(result + 36));
  *long long v14 = a3;
  v14[1] = a4;
  return result;
}

uint64_t Shape.size(_:anchor:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  uint64_t v13 = *(void *)(a1 - 8);
  double v14 = MEMORY[0x270FA5388](a1);
  unint64_t v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))(v16, v6, a1, v14);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(a2, v16, a1);
  uint64_t result = type metadata accessor for AnchoredSizedShape();
  uint64_t v18 = (double *)(a2 + *(int *)(result + 36));
  *uint64_t v18 = a3;
  v18[1] = a4;
  uint64_t v19 = (double *)(a2 + *(int *)(result + 40));
  double *v19 = a5;
  v19[1] = a6;
  return result;
}

void AnchoredSizedShape.path(in:)(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>, __n128 a4@<Q1>, double a5@<D2>, double a6@<D3>)
{
  (*(void (**)(void *__return_ptr, void, __n128, __n128, double, double))(*(void *)(a1 + 24) + 24))(v23, *(void *)(a1 + 16), a3, a4, *(double *)(v6 + *(int *)(a1 + 36)), *(double *)(v6 + *(int *)(a1 + 36) + 8));
  uint64_t v11 = v23[0];
  uint64_t v12 = v23[1];
  uint64_t v13 = v23[2];
  uint64_t v14 = v23[3];
  char v15 = v24;
  Path.boundingRect.getter();
  unint64_t v16 = (double *)(v6 + *(int *)(a1 + 40));
  double v21 = *v16 * a5 - (v18 + v17 * *v16);
  double v22 = v16[1] * a6 - (v20 + v19 * v16[1]);
  if (v21 != 0.0 || v22 != 0.0)
  {
    CGAffineTransformMakeTranslation(&v27, v21, v22);
    Path.applying(_:)(&v27.a, (uint64_t)v25);
    uint64_t v11 = v25[0];
    uint64_t v12 = v25[1];
    uint64_t v13 = v25[2];
    uint64_t v14 = v25[3];
    char v15 = v26;
    outlined release of Path((uint64_t)v23);
  }
  *(void *)a2 = v11;
  *(void *)(a2 + 8) = v12;
  *(void *)(a2 + 16) = v13;
  *(void *)(a2 + 24) = v14;
  *(unsigned char *)(a2 + 32) = v15;
}

uint64_t AnchoredSizedShape.animatableData.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = a2;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(*(void *)(a1 + 24) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v8 = (char *)&v19 - v7;
  type metadata accessor for AnimatablePair<CGFloat, CGFloat>();
  uint64_t v10 = v9;
  uint64_t v19 = v9;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  unint64_t v12 = lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>();
  *(void *)&v21.f64[0] = AssociatedTypeWitness;
  *(void *)&v21.f64[1] = v10;
  uint64_t v22 = AssociatedConformanceWitness;
  unint64_t v23 = v12;
  uint64_t v13 = type metadata accessor for AnimatablePair();
  double v14 = MEMORY[0x270FA5388](v13);
  unint64_t v16 = (char *)&v19 - v15;
  (*(void (**)(uint64_t, uint64_t, double))(v5 + 24))(v4, v5, v14);
  float64x2_t v21 = *(float64x2_t *)(v2 + *(int *)(a1 + 36));
  uint64_t v17 = v19;
  AnimatablePair.init(_:_:)((uint64_t)v8, (uint64_t)&v21, AssociatedTypeWitness, v19, (uint64_t)v16);
  float64x2_t v21 = vmulq_f64(*(float64x2_t *)(v2 + *(int *)(a1 + 40)), (float64x2_t)vdupq_n_s64(0x4060000000000000uLL));
  swift_getWitnessTable();
  return AnimatablePair.init(_:_:)((uint64_t)v16, (uint64_t)&v21, v13, v17, v20);
}

double protocol witness for Shape.path(in:) in conformance AnchoredSizedShape<A>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>, __n128 a4@<Q1>, double a5@<D2>, double a6@<D3>)
{
  AnchoredSizedShape.path(in:)(a1, (uint64_t)v9, a3, a4, a5, a6);
  double result = *(double *)v9;
  long long v8 = v9[1];
  *(_OWORD *)a2 = v9[0];
  *(_OWORD *)(a2 + 16) = v8;
  *(unsigned char *)(a2 + 32) = v10;
  return result;
}

uint64_t protocol witness for Animatable.animatableData.setter in conformance AnchoredSizedShape<A>(uint64_t a1, uint64_t a2)
{
  specialized AnchoredSizedShape.animatableData.setter(a1, a2);
  swift_getAssociatedTypeWitness();
  type metadata accessor for AnimatablePair<CGFloat, CGFloat>();
  swift_getAssociatedConformanceWitness();
  lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>();
  type metadata accessor for AnimatablePair();
  swift_getWitnessTable();
  uint64_t v3 = type metadata accessor for AnimatablePair();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
}

void (*protocol witness for Animatable.animatableData.modify in conformance AnchoredSizedShape<A>(void *a1, uint64_t a2))(uint64_t a1, char a2)
{
  uint64_t v5 = malloc(0x70uLL);
  *a1 = v5;
  v5[8] = v2;
  v5[9] = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for AnimatablePair<CGFloat, CGFloat>();
  uint64_t v8 = v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  unint64_t v10 = lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>();
  *uint64_t v5 = AssociatedTypeWitness;
  v5[1] = v8;
  void v5[2] = AssociatedConformanceWitness;
  v5[3] = v10;
  uint64_t v11 = type metadata accessor for AnimatablePair();
  uint64_t WitnessTable = swift_getWitnessTable();
  v5[4] = v11;
  _OWORD v5[5] = v8;
  v5 += 4;
  void v5[2] = WitnessTable;
  v5[3] = v10;
  uint64_t v13 = type metadata accessor for AnimatablePair();
  _OWORD v5[6] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v5[7] = v14;
  size_t v15 = *(void *)(v14 + 64);
  v5[8] = malloc(v15);
  unint64_t v16 = malloc(v15);
  v5[9] = v16;
  AnchoredSizedShape.animatableData.getter(a2, (uint64_t)v16);
  return protocol witness for Animatable.animatableData.modify in conformance AnchoredSizedShape<A>;
}

void protocol witness for Animatable.animatableData.modify in conformance AnchoredSizedShape<A>(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 96);
  uint64_t v4 = *(void **)(*(void *)a1 + 104);
  uint64_t v5 = *(void *)(*(void *)a1 + 80);
  uint64_t v6 = *(void *)(*(void *)a1 + 88);
  uint64_t v7 = *(void *)(*(void *)a1 + 72);
  if (a2)
  {
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*(void *)a1 + 96), v4, v5);
    __n128 v8 = (__n128)specialized AnchoredSizedShape.animatableData.setter((uint64_t)v3, v7);
    uint64_t v9 = *(void (**)(void *, uint64_t, __n128))(v6 + 8);
    v9(v3, v5, v8);
    ((void (*)(void *, uint64_t))v9)(v4, v5);
  }
  else
  {
    float64x2_t v10 = specialized AnchoredSizedShape.animatableData.setter(*(void *)(*(void *)a1 + 104), v7);
    (*(void (**)(void *, uint64_t, float64x2_t))(v6 + 8))(v4, v5, v10);
  }
  free(v4);
  free(v3);

  free(v2);
}

float64x2_t specialized AnchoredSizedShape.animatableData.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 24) + 8);
  uint64_t v28 = *(void *)(a2 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  __n128 v8 = (char *)&v27 - v7;
  type metadata accessor for AnimatablePair<CGFloat, CGFloat>();
  uint64_t v10 = v9;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  unint64_t v12 = lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>();
  uint64_t v30 = AssociatedTypeWitness;
  uint64_t v31 = v10;
  uint64_t v32 = AssociatedConformanceWitness;
  unint64_t v33 = v12;
  uint64_t v13 = type metadata accessor for AnimatablePair();
  double v14 = MEMORY[0x270FA5388](v13);
  unint64_t v16 = (char *)&v27 - v15;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))((char *)&v27 - v15, a1, v13, v14);
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v16, AssociatedTypeWitness);
  double v18 = (uint64_t *)(a1 + *(int *)(v13 + 52));
  uint64_t v19 = *v18;
  uint64_t v20 = v18[1];
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v30 = v13;
  uint64_t v31 = v10;
  uint64_t v32 = WitnessTable;
  unint64_t v33 = v12;
  uint64_t v22 = type metadata accessor for AnimatablePair();
  unint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 32);
  float64x2_t v27 = *(float64x2_t *)(a1 + *(int *)(v22 + 52));
  uint64_t v24 = v29;
  v23(v8, v28, v4);
  uint64_t v25 = (void *)(v24 + *(int *)(a2 + 36));
  *uint64_t v25 = v19;
  v25[1] = v20;
  float64x2_t result = vmulq_f64(v27, (float64x2_t)vdupq_n_s64(0x3F80000000000000uLL));
  *(float64x2_t *)(v24 + *(int *)(a2 + 40)) = result;
  return result;
}

uint64_t specialized _SizedShape.animatableData.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(*(void *)(a2 + 24) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  double v8 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v10 = (char *)v21 - v9;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))((char *)v21 - v9, a1, AssociatedTypeWitness, v8);
  type metadata accessor for AnimatablePair<CGFloat, CGFloat>();
  uint64_t v13 = v12;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  unint64_t v15 = lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>();
  v21[0] = AssociatedTypeWitness;
  v21[1] = v13;
  void v21[2] = AssociatedConformanceWitness;
  v21[3] = v15;
  unint64_t v16 = (uint64_t *)(a1 + *(int *)(type metadata accessor for AnimatablePair() + 52));
  uint64_t v17 = *v16;
  uint64_t v18 = v16[1];
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 32))(v10, v5, v6);
  uint64_t v20 = (void *)(v2 + *(int *)(a2 + 36));
  *uint64_t v20 = v17;
  v20[1] = v18;
  return result;
}

uint64_t instantiation function for generic protocol witness table for _SizedShape<A>(uint64_t a1)
{
  return instantiation function for generic protocol witness table for RawRepresentableProxy<A>(a1);
}

uint64_t sub_246039E6C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for _SizedShape();
  return _SizedShape.animatableData.getter(v2, a1);
}

uint64_t sub_246039EA8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for _SizedShape();
  return specialized _SizedShape.animatableData.setter(a1, v2);
}

uint64_t sub_246039EE8()
{
  return 16;
}

__n128 sub_246039EF4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t type metadata completion function for _SizedShape()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t assignWithCopy for _SizedShape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  uint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  double v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v7 = *v8;
  v7[1] = v8[1];
  return a1;
}

uint64_t assignWithTake for _SizedShape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  uint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  double v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v7 = *v8;
  v7[1] = v8[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for _SizedShape(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (!a2) {
    return 0;
  }
  if (v5 < a2)
  {
    unint64_t v6 = ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v7 = a2 - v5;
    uint64_t v8 = v6 & 0xFFFFFFF8;
    if ((v6 & 0xFFFFFFF8) != 0) {
      unsigned int v9 = 2;
    }
    else {
      unsigned int v9 = v7 + 1;
    }
    if (v9 >= 0x10000) {
      unsigned int v10 = 4;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v9 < 0x100) {
      unsigned int v10 = 1;
    }
    if (v9 >= 2) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    switch(v11)
    {
      case 1:
        int v12 = *((unsigned __int8 *)a1 + v6);
        if (!v12) {
          break;
        }
        goto LABEL_18;
      case 2:
        int v12 = *(unsigned __int16 *)((char *)a1 + v6);
        if (v12) {
          goto LABEL_18;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x24603A1B4);
      case 4:
        int v12 = *(_DWORD *)((char *)a1 + v6);
        if (!v12) {
          break;
        }
LABEL_18:
        int v13 = v12 - 1;
        if (v8)
        {
          int v13 = 0;
          LODWORD(v8) = *a1;
        }
        return v5 + (v8 | v13) + 1;
      default:
        break;
    }
  }
  if (v5) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for _SizedShape(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = ((*(void *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v7 >= a3)
  {
    int v12 = 0;
    int v13 = a2 - v7;
    if (a2 <= v7)
    {
LABEL_14:
      switch(v12)
      {
        case 1:
          a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 2:
          *(_WORD *)&a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 3:
          goto LABEL_34;
        case 4:
          *(_DWORD *)&a1[v8] = 0;
          goto LABEL_26;
        default:
LABEL_26:
          if (a2)
          {
LABEL_27:
            unint64_t v16 = *(void (**)(void))(v6 + 56);
            v16();
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v9 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      int v11 = 4;
    }
    else {
      int v11 = 2;
    }
    if (v10 < 0x100) {
      int v11 = 1;
    }
    if (v10 >= 2) {
      int v12 = v11;
    }
    else {
      int v12 = 0;
    }
    int v13 = a2 - v7;
    if (a2 <= v7) {
      goto LABEL_14;
    }
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    int v14 = v13;
  }
  else {
    int v14 = 1;
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    unsigned int v15 = ~v7 + a2;
    bzero(a1, v8);
    *(_DWORD *)a1 = v15;
  }
  switch(v12)
  {
    case 1:
      a1[v8] = v14;
      break;
    case 2:
      *(_WORD *)&a1[v8] = v14;
      break;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x24603A374);
    case 4:
      *(_DWORD *)&a1[v8] = v14;
      break;
    default:
      return;
  }
}

uint64_t sub_24603A39C(void *a1)
{
  return get_witness_table_7SwiftUI5ShapeRzlAA06_SizedC0VyxGAaBHPyHCTm(a1, (void (*)(uint64_t, void, void))type metadata accessor for _SizedShape);
}

uint64_t sub_24603A3C8(void *a1)
{
  return get_witness_table_7SwiftUI5ShapeRzlAA06_SizedC0VyxGAaBHPyHCTm(a1, (void (*)(uint64_t, void, void))type metadata accessor for AnchoredSizedShape);
}

uint64_t get_witness_table_7SwiftUI5ShapeRzlAA06_SizedC0VyxGAaBHPyHCTm(void *a1, void (*a2)(uint64_t, void, void))
{
  a2(255, *a1, a1[1]);

  return swift_getWitnessTable();
}

uint64_t type metadata accessor for AnchoredSizedShape()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for AnchoredSizedShape()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AnchoredSizedShape(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unsigned int v10 = (_OWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    int v11 = (_OWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *unsigned int v10 = *v11;
    *(_OWORD *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8);
  }
  return v4;
}

uint64_t initializeWithCopy for AnchoredSizedShape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  int v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  size_t v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  *(_OWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithCopy for AnchoredSizedShape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  size_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  v7[1] = v8[1];
  uint64_t v9 = (void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v10 = (void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  void *v9 = *v10;
  v9[1] = v10[1];
  return a1;
}

uint64_t initializeWithTake for AnchoredSizedShape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  int v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  size_t v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  *(_OWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for AnchoredSizedShape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  size_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  v7[1] = v8[1];
  uint64_t v9 = (void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v10 = (void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  void *v9 = *v10;
  v9[1] = v10[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for AnchoredSizedShape(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (!a2) {
    return 0;
  }
  if (v5 < a2)
  {
    unint64_t v6 = ((((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
       + 16;
    unsigned int v7 = a2 - v5;
    uint64_t v8 = v6 & 0xFFFFFFF8;
    if ((v6 & 0xFFFFFFF8) != 0) {
      unsigned int v9 = 2;
    }
    else {
      unsigned int v9 = v7 + 1;
    }
    if (v9 >= 0x10000) {
      unsigned int v10 = 4;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v9 < 0x100) {
      unsigned int v10 = 1;
    }
    if (v9 >= 2) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    switch(v11)
    {
      case 1:
        int v12 = *((unsigned __int8 *)a1 + v6);
        if (!v12) {
          break;
        }
        goto LABEL_18;
      case 2:
        int v12 = *(unsigned __int16 *)((char *)a1 + v6);
        if (v12) {
          goto LABEL_18;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x24603A980);
      case 4:
        int v12 = *(_DWORD *)((char *)a1 + v6);
        if (!v12) {
          break;
        }
LABEL_18:
        int v13 = v12 - 1;
        if (v8)
        {
          int v13 = 0;
          LODWORD(v8) = *a1;
        }
        return v5 + (v8 | v13) + 1;
      default:
        break;
    }
  }
  if (v5) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for AnchoredSizedShape(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = ((((*(void *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v7 >= a3)
  {
    int v12 = 0;
    int v13 = a2 - v7;
    if (a2 <= v7)
    {
LABEL_14:
      switch(v12)
      {
        case 1:
          a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 2:
          *(_WORD *)&a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 3:
          goto LABEL_34;
        case 4:
          *(_DWORD *)&a1[v8] = 0;
          goto LABEL_26;
        default:
LABEL_26:
          if (a2)
          {
LABEL_27:
            unint64_t v16 = *(void (**)(void))(v6 + 56);
            v16();
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v9 = a3 - v7;
    if (((((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      int v11 = 4;
    }
    else {
      int v11 = 2;
    }
    if (v10 < 0x100) {
      int v11 = 1;
    }
    if (v10 >= 2) {
      int v12 = v11;
    }
    else {
      int v12 = 0;
    }
    int v13 = a2 - v7;
    if (a2 <= v7) {
      goto LABEL_14;
    }
  }
  if (((((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    int v14 = v13;
  }
  else {
    int v14 = 1;
  }
  if (((((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    unsigned int v15 = ~v7 + a2;
    bzero(a1, v8);
    *(_DWORD *)a1 = v15;
  }
  switch(v12)
  {
    case 1:
      a1[v8] = v14;
      break;
    case 2:
      *(_WORD *)&a1[v8] = v14;
      break;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x24603AB48);
    case 4:
      *(_DWORD *)&a1[v8] = v14;
      break;
    default:
      return;
  }
}

uint64_t instantiation function for generic protocol witness table for AnchoredSizedShape<A>(uint64_t a1)
{
  return instantiation function for generic protocol witness table for RawRepresentableProxy<A>(a1);
}

void TappableEvent.phase.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *TappableEvent.phase.setter(unsigned char *result)
{
  *unint64_t v1 = *result;
  return result;
}

uint64_t (*TappableEvent.phase.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double TappableEvent.timestamp.getter@<D0>(double *a1@<X8>)
{
  double result = *(double *)(v1 + 8);
  *a1 = result;
  return result;
}

double TappableEvent.timestamp.setter(double *a1)
{
  double result = *a1;
  *(double *)(v1 + 8) = *a1;
  return result;
}

uint64_t (*TappableEvent.timestamp.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t TappableEvent.binding.getter@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 16);
  return swift_retain();
}

uint64_t TappableEvent.binding.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = swift_release();
  *(void *)(v1 + 16) = v2;
  return result;
}

uint64_t (*TappableEvent.binding.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double TappableEvent.init<A>(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *(void *)(a3 + 8);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v7 + 8))(&v11, a2, v7);
  char v8 = v11;
  (*(void (**)(double *__return_ptr, uint64_t, uint64_t))(v7 + 16))(&v10, a2, v7);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  double result = v10;
  *(unsigned char *)a4 = v8;
  *(double *)(a4 + 8) = result;
  *(void *)(a4 + 16) = 0;
  return result;
}

uint64_t TappableEvent.init(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)(v4 + 8) + 8))(&v12, v5);
  char v6 = v12;
  uint64_t v8 = a1[3];
  uint64_t v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v8);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)(v7 + 8) + 16))(&v11, v8);
  uint64_t v9 = v11;
  *(unsigned char *)a2 = v6;
  *(void *)(a2 + 8) = v9;
  *(void *)(a2 + 16) = 0;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t TappableEvent.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  outlined init with copy of AnyTrackedValue(a1, (uint64_t)v15);
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for EventType);
  type metadata accessor for ScrollStateRequest(0, &lazy cache variable for type metadata for TappableEventType);
  if (swift_dynamicCast())
  {
    outlined init with take of ScrollStateRequest(v13, (uint64_t)v18);
    outlined init with copy of AnyTrackedValue((uint64_t)v18, (uint64_t)v15);
    uint64_t v5 = v16;
    uint64_t v4 = v17;
    __swift_project_boxed_opaque_existential_1(v15, v16);
    (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)(v4 + 8) + 8))(v13, v5);
    uint64_t v6 = LOBYTE(v13[0]);
    uint64_t v8 = v16;
    uint64_t v7 = v17;
    __swift_project_boxed_opaque_existential_1(v15, v16);
    (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)(v7 + 8) + 16))(v13, v8);
    *(void *)&long long v9 = *(void *)&v13[0];
    long long v12 = v9;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    __swift_destroy_boxed_opaque_existential_1(a1);
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
    long long v11 = v12;
  }
  else
  {
    uint64_t v14 = 0;
    memset(v13, 0, sizeof(v13));
    __swift_destroy_boxed_opaque_existential_1(a1);
    uint64_t result = outlined destroy of TappableEventType?((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for TappableEventType?);
    uint64_t v6 = 0;
    long long v11 = xmmword_24619B550;
  }
  *(void *)a2 = v6;
  *(_OWORD *)(a2 + 8) = v11;
  return result;
}

void type metadata accessor for TappableEventType?()
{
  if (!lazy cache variable for type metadata for TappableEventType?)
  {
    type metadata accessor for ScrollStateRequest(255, &lazy cache variable for type metadata for TappableEventType);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TappableEventType?);
    }
  }
}

void TappableSpatialEvent.phase.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *TappableSpatialEvent.phase.setter(unsigned char *result)
{
  *uint64_t v1 = *result;
  return result;
}

uint64_t (*TappableSpatialEvent.phase.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double TappableSpatialEvent.timestamp.getter@<D0>(double *a1@<X8>)
{
  double result = *(double *)(v1 + 8);
  *a1 = result;
  return result;
}

double TappableSpatialEvent.timestamp.setter(double *a1)
{
  double result = *a1;
  *(double *)(v1 + 8) = *a1;
  return result;
}

uint64_t (*TappableSpatialEvent.timestamp.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t TappableSpatialEvent.binding.getter@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 16);
  return swift_retain();
}

uint64_t TappableSpatialEvent.binding.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = swift_release();
  *(void *)(v1 + 16) = v2;
  return result;
}

uint64_t (*TappableSpatialEvent.binding.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double TappableSpatialEvent.globalLocation.getter()
{
  return *(double *)(v0 + 24);
}

void TappableSpatialEvent.globalLocation.setter(double a1, double a2)
{
  *(double *)(v2 + 24) = a1;
  *(double *)(v2 + 32) = a2;
}

uint64_t (*TappableSpatialEvent.globalLocation.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double TappableSpatialEvent.location.getter()
{
  return *(double *)(v0 + 40);
}

void TappableSpatialEvent.location.setter(double a1, double a2)
{
  *(double *)(v2 + 40) = a1;
  *(double *)(v2 + 48) = a2;
}

uint64_t (*TappableSpatialEvent.location.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

double TappableSpatialEvent.radius.getter()
{
  return *(double *)(v0 + 56);
}

void TappableSpatialEvent.radius.setter(double a1)
{
  *(double *)(v1 + 56) = a1;
}

uint64_t (*TappableSpatialEvent.radius.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t TappableSpatialEvent.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a3 + 8);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v8 + 8))(&v20, a2, v8);
  char v9 = v20;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v8 + 16))(&v19, a2, v8);
  uint64_t v10 = v19;
  double v11 = (*(double (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
  uint64_t v13 = v12;
  double v14 = (*(double (**)(uint64_t, uint64_t))(a3 + 40))(a2, a3);
  uint64_t v16 = v15;
  double v17 = (*(double (**)(uint64_t, uint64_t))(a3 + 64))(a2, a3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  *(unsigned char *)a4 = v9;
  *(void *)(a4 + 8) = v10;
  *(void *)(a4 + 16) = 0;
  *(double *)(a4 + 24) = v11;
  *(void *)(a4 + 32) = v13;
  *(double *)(a4 + 40) = v14;
  *(void *)(a4 + 48) = v16;
  *(double *)(a4 + 56) = v17;
  return result;
}

uint64_t TappableSpatialEvent.init(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)(v4 + 8) + 8))(&v25, v5);
  char v6 = v25;
  uint64_t v8 = a1[3];
  uint64_t v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v8);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)(v7 + 8) + 16))(&v24, v8);
  uint64_t v9 = v24;
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v10);
  double v12 = (*(double (**)(uint64_t, uint64_t))(v11 + 16))(v10, v11);
  uint64_t v14 = v13;
  uint64_t v15 = a1[3];
  uint64_t v16 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v15);
  double v17 = (*(double (**)(uint64_t, uint64_t))(v16 + 40))(v15, v16);
  uint64_t v19 = v18;
  uint64_t v20 = a1[3];
  uint64_t v21 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v20);
  double v22 = (*(double (**)(uint64_t, uint64_t))(v21 + 64))(v20, v21);
  *(unsigned char *)a2 = v6;
  *(void *)(a2 + 8) = v9;
  *(void *)(a2 + 16) = 0;
  *(double *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v14;
  *(double *)(a2 + 40) = v17;
  *(void *)(a2 + 48) = v19;
  *(double *)(a2 + 56) = v22;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t TappableSpatialEvent.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  outlined init with copy of AnyTrackedValue(a1, (uint64_t)v10);
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for EventType);
  type metadata accessor for SpatialEventType & TappableEventType();
  if (swift_dynamicCast())
  {
    outlined init with take of Decodable & Encodable((long long *)v11, v13);
    outlined init with copy of Decodable & Encodable((uint64_t)v13, (uint64_t)v10);
    TappableSpatialEvent.init(_:)(v10, (uint64_t)v11);
    __swift_destroy_boxed_opaque_existential_1(a1);
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    uint64_t v5 = v11[0];
    long long v6 = *(_OWORD *)&v11[8];
    long long v7 = *(_OWORD *)&v11[24];
    long long v8 = *(_OWORD *)&v11[40];
    uint64_t v9 = v12;
  }
  else
  {
    memset(v11, 0, 48);
    __swift_destroy_boxed_opaque_existential_1(a1);
    uint64_t result = outlined destroy of TappableEventType?((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for (SpatialEventType & TappableEventType)?);
    long long v7 = 0uLL;
    uint64_t v5 = 0;
    uint64_t v9 = 0;
    long long v6 = xmmword_24619B550;
    long long v8 = 0uLL;
  }
  *(void *)a2 = v5;
  *(_OWORD *)(a2 + 8) = v6;
  *(_OWORD *)(a2 + 24) = v7;
  *(_OWORD *)(a2 + 40) = v8;
  *(void *)(a2 + 56) = v9;
  return result;
}

void protocol witness for SpatialEventType.globalLocation.setter in conformance TappableSpatialEvent(double a1, double a2)
{
  *(double *)(v2 + 24) = a1;
  *(double *)(v2 + 32) = a2;
}

uint64_t (*protocol witness for SpatialEventType.globalLocation.modify in conformance TappableSpatialEvent())(void, void)
{
  return _ViewInputs.base.modify;
}

double protocol witness for SpatialEventType.location.getter in conformance TappableSpatialEvent()
{
  return *(double *)(v0 + 40);
}

void protocol witness for SpatialEventType.location.setter in conformance TappableSpatialEvent(double a1, double a2)
{
  *(double *)(v2 + 40) = a1;
  *(double *)(v2 + 48) = a2;
}

double protocol witness for SpatialEventType.radius.getter in conformance TappableSpatialEvent()
{
  return *(double *)(v0 + 56);
}

BOOL specialized static TappableEvent.== infix(_:_:)(double *a1, double *a2)
{
  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2 || a1[1] != a2[1]) {
    return 0;
  }
  uint64_t v3 = *((void *)a1 + 2);
  uint64_t v4 = *((void *)a2 + 2);
  if (!v3)
  {
    if (!v4) {
      return 1;
    }
    goto LABEL_13;
  }
  if (!v4)
  {
    swift_retain();
LABEL_13:
    swift_release();
    return 0;
  }
  return v3 == v4;
}

unint64_t type metadata accessor for SpatialEventType & TappableEventType()
{
  unint64_t result = lazy cache variable for type metadata for SpatialEventType & TappableEventType;
  if (!lazy cache variable for type metadata for SpatialEventType & TappableEventType)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SpatialEventType & TappableEventType);
  }
  return result;
}

uint64_t outlined destroy of TappableEventType?(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void type metadata accessor for (SpatialEventType & TappableEventType)?()
{
  if (!lazy cache variable for type metadata for (SpatialEventType & TappableEventType)?)
  {
    type metadata accessor for SpatialEventType & TappableEventType();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for (SpatialEventType & TappableEventType)?);
    }
  }
}

BOOL specialized static TappableSpatialEvent.== infix(_:_:)(double *a1, double *a2)
{
  BOOL result = 0;
  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2 || a1[1] != a2[1]) {
    return result;
  }
  uint64_t v4 = *((void *)a1 + 2);
  double v6 = a1[3];
  double v5 = a1[4];
  double v8 = a1[5];
  double v7 = a1[6];
  double v9 = a1[7];
  uint64_t v10 = *((void *)a2 + 2);
  double v12 = a2[3];
  double v11 = a2[4];
  double v14 = a2[5];
  double v13 = a2[6];
  if (!v4)
  {
    if (!v10)
    {
      if (v6 == v12 && v5 == v11 && v8 == v14 && v7 == v13) {
        return v9 == a2[7];
      }
      return 0;
    }
LABEL_20:
    swift_release();
    return 0;
  }
  if (!v10)
  {
    swift_retain();
    goto LABEL_20;
  }
  BOOL result = 0;
  if (v4 == v10)
  {
    BOOL v15 = v6 == v12 && v5 == v11;
    BOOL v16 = v15 && v8 == v14;
    if (v16 && v7 == v13) {
      return v9 == a2[7];
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TappableEvent()
{
  return &type metadata for TappableEvent;
}

uint64_t initializeWithCopy for TappableSpatialEvent(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for TappableSpatialEvent(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

uint64_t assignWithTake for TappableSpatialEvent(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for TappableSpatialEvent(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TappableSpatialEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)BOOL result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 64) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TappableSpatialEvent()
{
  return &type metadata for TappableSpatialEvent;
}

uint64_t dispatch thunk of TouchTypeProviding.touchType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

SwiftUI::ProtobufFormat::Field_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ProtobufDecoder.nextField()()
{
  uint64_t v3 = v0;
  unint64_t v4 = v1[1];
  if (v4 >= v1[2])
  {
    Swift::UInt v5 = 0;
    v1[3] = 0;
    goto LABEL_10;
  }
  Swift::UInt v5 = v1[3];
  if (v5)
  {
    unint64_t v6 = v1[4];
    if (v4 < v6) {
      goto LABEL_10;
    }
    if (v6 < v4)
    {
LABEL_8:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      Swift::UInt v5 = swift_willThrow();
      goto LABEL_11;
    }
    v1[3] = 0;
  }
  Swift::UInt v5 = ProtobufDecoder.decodeVarint()();
  if (!v2)
  {
    if (v5 < 8) {
      goto LABEL_8;
    }
LABEL_10:
    *(void *)uint64_t v3 = v5;
    *(unsigned char *)(v3 + 8) = v5 == 0;
  }
LABEL_11:
  result.value.rawuint64_t Value = v5;
  result.is_nil = v7;
  return result;
}

Swift::Double ProtobufDecoder.cgFloatField(_:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  return ProtobufDecoder.doubleField(_:)((SwiftUI::ProtobufFormat::Field)&v2);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ProtobufDecoder.skipField(_:)(SwiftUI::ProtobufFormat::Field a1)
{
  switch(*(void *)a1.rawValue & 7)
  {
    case 0:
      ProtobufDecoder.decodeVarint()();
      return;
    case 1:
      unint64_t v2 = *(void *)(v1 + 8) + 8;
      if (*(void *)(v1 + 16) < v2) {
        goto LABEL_7;
      }
      goto LABEL_4;
    case 2:
      ProtobufDecoder.decodeDataBuffer()();
      return;
    case 5:
      unint64_t v2 = *(void *)(v1 + 8) + 4;
      if (*(void *)(v1 + 16) < v2) {
        goto LABEL_7;
      }
LABEL_4:
      *(void *)(v1 + 8) = v2;
      break;
    default:
LABEL_7:
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      swift_willThrow();
      break;
  }
}

Swift::UInt ProtobufDecoder.enumField<A>(_:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *a1;
  Swift::UInt result = ProtobufDecoder.uintField(_:)((SwiftUI::ProtobufFormat::Field)&v7);
  if (!v6) {
    return (*(uint64_t (**)(Swift::UInt, uint64_t, uint64_t))(a3 + 16))(result, a2, a3);
  }
  return result;
}

uint64_t ProtobufDecoder.messageField<A>(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  if ((*a1 & 7) == 2) {
    return ProtobufDecoder.decodeMessage<A>()(a2, a3);
  }
  lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
  swift_allocError();
  return swift_willThrow();
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ProtobufDecoder.stringField(_:)(SwiftUI::ProtobufFormat::Field a1)
{
  uint64_t v4 = type metadata accessor for String.Encoding();
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void *)a1.rawValue;
  uint64_t v7 = ProtobufDecoder.dataField(_:)(&v17);
  if (!v1)
  {
    uint64_t v9 = v7;
    unint64_t v10 = v8;
    static String.Encoding.utf8.getter();
    uint64_t v11 = String.init(data:encoding:)();
    if (v12)
    {
      uint64_t v6 = (char *)v11;
      unint64_t v2 = v12;
    }
    else
    {
      lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
      swift_allocError();
      swift_willThrow();
    }
    outlined consume of Data._Representation(v9, v10);
  }
  uint64_t v13 = (uint64_t)v6;
  double v14 = v2;
  result._object = v14;
  result._uint64_t countAndFlagsBits = v13;
  return result;
}

void ProtobufDecoder.codableField<A>(_:)(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  long long v14 = *v4;
  uint64_t v15 = *a1;
  id v8 = (id)v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v9 = ProtobufDecoder.dataField(_:)(&v15);
  if (v5)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v11 = v9;
    unint64_t v12 = v10;
    ProtobufDecoder.value<A>(fromBinaryPlist:type:)(a2, a3, a4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    outlined consume of Data._Representation(v11, v12);
  }
}

Swift::UInt __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ProtobufDecoder.uintField(_:)(SwiftUI::ProtobufFormat::Field a1)
{
  uint64_t v3 = *(void *)a1.rawValue;
  if ((*(void *)a1.rawValue & 7) == 0) {
    return ProtobufDecoder.decodeVarint()();
  }
  if ((*(void *)a1.rawValue & 7) != 2)
  {
LABEL_6:
    lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
    swift_allocError();
    return swift_willThrow();
  }
  Swift::UInt result = ProtobufDecoder.decodeVarint()();
  if (!v2)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
      return result;
    }
    Swift::UInt v5 = v1[1] + result;
    if (v1[2] < v5) {
      goto LABEL_6;
    }
    v1[3] = v3 & 0xFFFFFFFFFFFFFFF8;
    v1[4] = v5;
    return ProtobufDecoder.decodeVarint()();
  }
  return result;
}

uint64_t ProtobufDecoder.messageField<A>(_:_:)(void *a1, void (*a2)(uint64_t))
{
  if ((*a1 & 7) == 2) {
    return ProtobufDecoder.decodeMessage<A>(_:)(a2);
  }
  lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
  swift_allocError();
  return swift_willThrow();
}

Swift::Int __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ProtobufDecoder.intField(_:)(SwiftUI::ProtobufFormat::Field a1)
{
  uint64_t v3 = *(void *)a1.rawValue;
  if ((*(void *)a1.rawValue & 7) == 0)
  {
LABEL_8:
    Swift::Int result = ProtobufDecoder.decodeVarint()();
    if (!v2) {
      return -(result & 1) ^ (result >> 1);
    }
    return result;
  }
  if ((*(void *)a1.rawValue & 7) != 2)
  {
LABEL_6:
    lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
    swift_allocError();
    return swift_willThrow();
  }
  Swift::Int result = ProtobufDecoder.decodeVarint()();
  if (!v2)
  {
    if (result < 0)
    {
      __break(1u);
      return result;
    }
    unint64_t v5 = v1[1] + result;
    if (v1[2] < v5) {
      goto LABEL_6;
    }
    v1[3] = v3 & 0xFFFFFFFFFFFFFFF8;
    v1[4] = v5;
    goto LABEL_8;
  }
  return result;
}

Swift::Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ProtobufDecoder.BOOLField(_:)(SwiftUI::ProtobufFormat::Field a1)
{
  uint64_t v3 = *(void *)a1.rawValue;
  if ((*(void *)a1.rawValue & 7) == 0) {
    goto LABEL_8;
  }
  if ((*(void *)a1.rawValue & 7) != 2)
  {
LABEL_6:
    lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
    swift_allocError();
    swift_willThrow();
    goto LABEL_10;
  }
  uint64_t v4 = ProtobufDecoder.decodeVarint()();
  if (!v2)
  {
    if (v4 < 0)
    {
      __break(1u);
      return v4;
    }
    unint64_t v6 = v1[1] + v4;
    if (v1[2] < v6) {
      goto LABEL_6;
    }
    v1[3] = v3 & 0xFFFFFFFFFFFFFFF8;
    v1[4] = v6;
LABEL_8:
    uint64_t v7 = ProtobufDecoder.decodeVarint()();
    if (!v2) {
      BOOL v5 = v7 != 0;
    }
  }
LABEL_10:
  LOBYTE(v4) = v5;
  return v4;
}

Swift::Double __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ProtobufDecoder.doubleField(_:)(SwiftUI::ProtobufFormat::Field a1)
{
  uint64_t v3 = *(void *)a1.rawValue;
  uint64_t v4 = *(void *)a1.rawValue & 7;
  switch(v4)
  {
    case 5:
      id v8 = (float *)v1[1];
      if (v1[2] >= (unint64_t)(v8 + 1))
      {
        float v9 = *v8;
        v1[1] = v8 + 1;
        return v9;
      }
      break;
    case 2:
      uint64_t v10 = ProtobufDecoder.decodeVarint()();
      if (v2) {
        return result;
      }
      if (v10 < 0)
      {
        __break(1u);
        return result;
      }
      BOOL v5 = (Swift::Double *)v1[1];
      unint64_t v6 = v1[2];
      if (v6 >= (unint64_t)v5 + v10)
      {
        v1[3] = v3 & 0xFFFFFFFFFFFFFFF8 | 1;
        v1[4] = (char *)v5 + v10;
LABEL_5:
        if (v6 >= (unint64_t)(v5 + 1))
        {
          Swift::Double result = *v5;
          v1[1] = v5 + 1;
          return result;
        }
      }
      break;
    case 1:
      BOOL v5 = (Swift::Double *)v1[1];
      unint64_t v6 = v1[2];
      goto LABEL_5;
  }
  lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
  swift_allocError();
  swift_willThrow();
  return result;
}

Swift::UInt8 __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ProtobufDecoder.uint8Field(_:)(SwiftUI::ProtobufFormat::Field a1)
{
  uint64_t v2 = *(void *)a1.rawValue;
  return ProtobufDecoder.uintField(_:)((SwiftUI::ProtobufFormat::Field)&v2);
}

Swift::Float __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ProtobufDecoder.floatField(_:)(SwiftUI::ProtobufFormat::Field a1)
{
  uint64_t v3 = *(void *)a1.rawValue;
  uint64_t v4 = *(void *)a1.rawValue & 7;
  if (v4 == 2)
  {
    uint64_t v8 = ProtobufDecoder.decodeVarint()();
    if (v2) {
      return result;
    }
    if (v8 < 0)
    {
      __break(1u);
      return result;
    }
    BOOL v5 = (Swift::Float *)v1[1];
    unint64_t v6 = v1[2];
    if (v6 >= (unint64_t)v5 + v8)
    {
      v1[3] = v3 & 0xFFFFFFFFFFFFFFF8 | 5;
      v1[4] = (char *)v5 + v8;
LABEL_4:
      if (v6 >= (unint64_t)(v5 + 1))
      {
        Swift::Float result = *v5;
        v1[1] = v5 + 1;
        return result;
      }
    }
  }
  else if (v4 == 5)
  {
    BOOL v5 = (Swift::Float *)v1[1];
    unint64_t v6 = v1[2];
    goto LABEL_4;
  }
  lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
  swift_allocError();
  swift_willThrow();
  return result;
}

Swift::UInt32 __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ProtobufDecoder.uint32Field(_:)(SwiftUI::ProtobufFormat::Field a1)
{
  uint64_t v2 = *(void *)a1.rawValue;
  return ProtobufDecoder.uintField(_:)((SwiftUI::ProtobufFormat::Field)&v2);
}

uint64_t ProtobufDecoder.dataBufferField(_:)(void *a1)
{
  if ((*a1 & 7) == 2) {
    return ProtobufDecoder.decodeDataBuffer()();
  }
  lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
  swift_allocError();
  return swift_willThrow();
}

uint64_t ProtobufDecoder.dataField(_:)(void *a1)
{
  if ((*a1 & 7) != 2)
  {
    lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
    swift_allocError();
    swift_willThrow();
    return v3;
  }
  uint64_t v4 = ProtobufDecoder.decodeDataBuffer()();
  if (v2) {
    return v3;
  }
  uint64_t v3 = 0;
  if (!v4) {
    return v3;
  }
  uint64_t v6 = v5 - v4;
  if (v5 == v4) {
    return v3;
  }
  uint64_t v7 = v4 - (void)objc_msgSend(objc_retainAutorelease(*v1), sel_bytes);
  uint64_t result = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v10 = v9;
  if (__OFADD__(v7, v6))
  {
    __break(1u);
  }
  else if (v7 + v6 >= v7)
  {
    uint64_t v11 = result;
    uint64_t v3 = Data._Representation.subscript.getter();
    outlined consume of Data._Representation(v11, v10);
    return v3;
  }
  __break(1u);
  return result;
}

uint64_t ProtobufDecoder.init(_:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, objc_class **a3@<X8>)
{
  uint64_t v6 = Data._bridgeToObjectiveC()().super.isa;
  uint64_t v7 = (objc_class *)[(objc_class *)v6 bytes];
  uint64_t v8 = v6;
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t result = outlined consume of Data._Representation(a1, a2);
      LODWORD(v10) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
        JUMPOUT(0x24603C5A0);
      }
      uint64_t v10 = (int)v10;
      break;
    case 2uLL:
      uint64_t v12 = *(void *)(a1 + 16);
      uint64_t v11 = *(void *)(a1 + 24);
      uint64_t result = outlined consume of Data._Representation(a1, a2);
      uint64_t v10 = v11 - v12;
      if (__OFSUB__(v11, v12))
      {
        __break(1u);
        goto LABEL_8;
      }
      break;
    case 3uLL:
LABEL_8:
      uint64_t result = outlined consume of Data._Representation(a1, a2);
      uint64_t v10 = 0;
      break;
    default:
      uint64_t result = outlined consume of Data._Representation(a1, a2);
      uint64_t v10 = BYTE6(a2);
      break;
  }
  *a3 = v8;
  a3[1] = v7;
  uint64_t v13 = (objc_class *)MEMORY[0x263F8EE78];
  a3[2] = (objc_class *)((char *)v7 + v10);
  a3[3] = 0;
  a3[4] = v7;
  a3[5] = v13;
  a3[6] = (objc_class *)MEMORY[0x263F8EE80];
  return result;
}

Swift::UInt64 __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ProtobufDecoder.uint64Field(_:)(SwiftUI::ProtobufFormat::Field a1)
{
  uint64_t v3 = *(void *)a1.rawValue;
  if ((*(void *)a1.rawValue & 7) == 0) {
    return ProtobufDecoder.decodeVarint()();
  }
  if ((*(void *)a1.rawValue & 7) != 2)
  {
LABEL_6:
    lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
    swift_allocError();
    return swift_willThrow();
  }
  Swift::UInt64 result = ProtobufDecoder.decodeVarint()();
  if (!v2)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
      return result;
    }
    Swift::UInt64 v5 = v1[1] + result;
    if (v1[2] < v5) {
      goto LABEL_6;
    }
    v1[3] = v3 & 0xFFFFFFFFFFFFFFF8;
    v1[4] = v5;
    return ProtobufDecoder.decodeVarint()();
  }
  return result;
}

Swift::UInt16 __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ProtobufDecoder.uint16Field(_:)(SwiftUI::ProtobufFormat::Field a1)
{
  uint64_t v2 = *(void *)a1.rawValue;
  return ProtobufDecoder.uintField(_:)((SwiftUI::ProtobufFormat::Field)&v2);
}

uint64_t static ProtobufDecoder.DecodingError.== infix(_:_:)()
{
  return 1;
}

void ProtobufDecoder.DecodingError.hash(into:)()
{
}

Swift::Int ProtobufDecoder.DecodingError.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t ProtobufDecoder.userInfo.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ProtobufDecoder.userInfo.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 48) = a1;
  return result;
}

uint64_t (*ProtobufDecoder.userInfo.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ProtobufDecoder.decodeVarint()()
{
  uint64_t v1 = *(unsigned char **)(v0 + 8);
  unint64_t v2 = *(void *)(v0 + 16);
  if (v2 < (unint64_t)(v1 + 1))
  {
LABEL_8:
    lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
    swift_allocError();
    return swift_willThrow();
  }
  else
  {
    unint64_t v3 = 0;
    uint64_t result = 0;
    while (1)
    {
      Swift::UInt64 v5 = v1 + 1;
      unint64_t v6 = (unint64_t)(*v1 & 0x7F) << v3;
      if (v3 > 0x3F) {
        unint64_t v6 = 0;
      }
      result |= v6;
      if ((*v1 & 0x80) == 0) {
        break;
      }
      v3 += 7;
      uint64_t v7 = v1 + 2;
      ++v1;
      if (v2 < (unint64_t)v7)
      {
        *(void *)(v0 + 8) = v5;
        goto LABEL_8;
      }
    }
    *(void *)(v0 + 8) = v1 + 1;
  }
  return result;
}

uint64_t ProtobufDecoder.decodeDataBuffer()()
{
  uint64_t result = ProtobufDecoder.decodeVarint()();
  if (!v1)
  {
    uint64_t v3 = result;
    if (result < 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t result = *(void *)(v0 + 8);
      if (*(void *)(v0 + 16) >= (unint64_t)(result + v3))
      {
        *(void *)(v0 + 8) = result + v3;
      }
      else
      {
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        return swift_willThrow();
      }
    }
  }
  return result;
}

Swift::UInt32 __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ProtobufDecoder.fixed32Field(_:)(SwiftUI::ProtobufFormat::Field a1)
{
  uint64_t v3 = *(void *)a1.rawValue;
  uint64_t v4 = *(void *)a1.rawValue & 7;
  if (v4 != 2)
  {
    if (v4 == 5)
    {
      Swift::UInt64 v5 = (_DWORD *)v1[1];
      unint64_t v6 = v1[2];
      goto LABEL_4;
    }
LABEL_9:
    lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
    swift_allocError();
    LODWORD(v7) = swift_willThrow();
    return v7;
  }
  uint64_t v7 = ProtobufDecoder.decodeVarint()();
  if (v2) {
    return v7;
  }
  if (v7 < 0)
  {
    __break(1u);
    return v7;
  }
  Swift::UInt64 v5 = (_DWORD *)v1[1];
  unint64_t v6 = v1[2];
  if (v6 < (unint64_t)v5 + v7) {
    goto LABEL_9;
  }
  v1[3] = v3 & 0xFFFFFFFFFFFFFFF8 | 5;
  v1[4] = (char *)v5 + v7;
LABEL_4:
  if (v6 < (unint64_t)(v5 + 1)) {
    goto LABEL_9;
  }
  LODWORD(v7) = *v5;
  v1[1] = v5 + 1;
  return v7;
}

Swift::UInt64 __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ProtobufDecoder.fixed64Field(_:)(SwiftUI::ProtobufFormat::Field a1)
{
  uint64_t v3 = *(void *)a1.rawValue;
  uint64_t v4 = *(void *)a1.rawValue & 7;
  if (v4 == 2)
  {
    Swift::UInt64 result = ProtobufDecoder.decodeVarint()();
    if (v2) {
      return result;
    }
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
      return result;
    }
    Swift::UInt64 v5 = (Swift::UInt64 *)v1[1];
    unint64_t v6 = v1[2];
    if (v6 >= (unint64_t)v5 + result)
    {
      v1[3] = v3 & 0xFFFFFFFFFFFFFFF8 | 1;
      v1[4] = (char *)v5 + result;
LABEL_4:
      if (v6 >= (unint64_t)(v5 + 1))
      {
        Swift::UInt64 result = *v5;
        v1[1] = v5 + 1;
        return result;
      }
    }
  }
  else if (v4 == 1)
  {
    Swift::UInt64 v5 = (Swift::UInt64 *)v1[1];
    unint64_t v6 = v1[2];
    goto LABEL_4;
  }
  lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
  swift_allocError();
  return swift_willThrow();
}

uint64_t ProtobufDecoder.decodeMessage<A>()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t result = ProtobufDecoder.beginMessage()();
  if (!v3)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(a2 + 8))(v2, a1, a2);
    uint64_t v8 = *(void **)(v2 + 40);
    if (v8[2])
    {
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if (result)
      {
        uint64_t v9 = v8[2];
        if (v9)
        {
LABEL_5:
          uint64_t v10 = v9 - 1;
          uint64_t v11 = v8[v10 + 4];
          _OWORD v8[2] = v10;
          *(void *)(v4 + 40) = v8;
          *(void *)(v4 + 16) = v11;
          return result;
        }
LABEL_9:
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v8);
    uint64_t v8 = (void *)result;
    uint64_t v9 = *(void *)(result + 16);
    if (v9) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
  return result;
}

uint64_t ProtobufDecoder.decodeMessage<A>(_:)(void (*a1)(uint64_t))
{
  uint64_t v3 = v1;
  uint64_t result = ProtobufDecoder.beginMessage()();
  if (!v2)
  {
    a1(v1);
    unint64_t v6 = *(void **)(v1 + 40);
    if (v6[2])
    {
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if (result)
      {
        uint64_t v7 = v6[2];
        if (v7)
        {
LABEL_5:
          uint64_t v8 = v7 - 1;
          uint64_t v9 = v6[v8 + 4];
          void v6[2] = v8;
          *(void *)(v3 + 40) = v6;
          *(void *)(v3 + 16) = v9;
          return result;
        }
LABEL_9:
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v6);
    unint64_t v6 = (void *)result;
    uint64_t v7 = *(void *)(result + 16);
    if (v7) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
  return result;
}

uint64_t specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + a1);
}

{
  return *(unsigned int *)(a2 + a1);
}

uint64_t ProtobufDecoder.beginMessage()()
{
  unint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[5];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  }
  unint64_t v5 = v3[2];
  unint64_t v4 = v3[3];
  if (v5 >= v4 >> 1) {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v4 > 1), v5 + 1, 1, v3);
  }
  unsigned char v3[2] = v5 + 1;
  v3[v5 + 4] = v2;
  v0[5] = v3;
  uint64_t result = ProtobufDecoder.decodeVarint()();
  if (!v1)
  {
    if (result < 0)
    {
      __break(1u);
    }
    else
    {
      unint64_t v7 = v0[1] + result;
      if (v2 >= v7)
      {
        v0[2] = v7;
      }
      else
      {
        lazy protocol witness table accessor for type ProtobufDecoder.DecodingError and conformance ProtobufDecoder.DecodingError();
        swift_allocError();
        return swift_willThrow();
      }
    }
  }
  return result;
}

uint64_t destroy for ProtobufDecoder(id *a1)
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ProtobufDecoder(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  id v5 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ProtobufDecoder(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ProtobufDecoder(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ProtobufDecoder()
{
  return &type metadata for ProtobufDecoder;
}

unsigned char *storeEnumTagSinglePayload for ProtobufDecoder.DecodingError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x24603CF98);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ProtobufDecoder.DecodingError()
{
  return &type metadata for ProtobufDecoder.DecodingError;
}

uint64_t EnvironmentValues.capitalizationContext.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a1);
    swift_release_n();
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, a1);
  }
  return swift_release_n();
}

uint64_t EnvironmentValues.capitalizationContext.setter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for EnvironmentValues.CapitalizationContext();
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of EnvironmentValues.CapitalizationContext(a1, (uint64_t)v4);
  specialized EnvironmentValues._set<A>(_:for:)((uint64_t)v4);
  outlined destroy of EnvironmentValues.CapitalizationContext((uint64_t)v4);
  return outlined destroy of EnvironmentValues.CapitalizationContext(a1);
}

uint64_t key path getter for EnvironmentValues.capitalizationContext : EnvironmentValues@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a2);
    swift_release_n();
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, a2);
  }
  return swift_release_n();
}

uint64_t key path setter for EnvironmentValues.capitalizationContext : EnvironmentValues(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for EnvironmentValues.CapitalizationContext();
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  unint64_t v7 = (char *)&v9 - v6;
  outlined init with copy of EnvironmentValues.CapitalizationContext(a1, (uint64_t)&v9 - v6);
  outlined init with copy of EnvironmentValues.CapitalizationContext((uint64_t)v7, (uint64_t)v4);
  specialized EnvironmentValues._set<A>(_:for:)((uint64_t)v4);
  outlined destroy of EnvironmentValues.CapitalizationContext((uint64_t)v4);
  return outlined destroy of EnvironmentValues.CapitalizationContext((uint64_t)v7);
}

void (*EnvironmentValues.capitalizationContext.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[1] = v1;
  size_t v4 = *(void *)(*(void *)(type metadata accessor for EnvironmentValues.CapitalizationContext() - 8) + 64);
  unsigned char v3[2] = malloc(v4);
  v3[3] = malloc(v4);
  uint64_t v5 = malloc(v4);
  v3[4] = v5;
  uint64_t v6 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v6, (uint64_t)v5);
    swift_release_n();
  }
  else
  {
    uint64_t v7 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v7, (uint64_t)v5);
  }
  swift_release_n();
  return EnvironmentValues.capitalizationContext.modify;
}

void EnvironmentValues.capitalizationContext.modify(uint64_t **a1, char a2)
{
  uint64_t v3 = *a1;
  outlined init with copy of EnvironmentValues.CapitalizationContext((*a1)[4], (*a1)[3]);
  size_t v4 = (void *)v3[3];
  uint64_t v5 = (void *)v3[4];
  uint64_t v6 = (void *)v3[2];
  if (a2)
  {
    outlined init with copy of EnvironmentValues.CapitalizationContext((uint64_t)v4, v3[2]);
    specialized EnvironmentValues._set<A>(_:for:)((uint64_t)v6);
    outlined destroy of EnvironmentValues.CapitalizationContext((uint64_t)v6);
  }
  else
  {
    specialized EnvironmentValues._set<A>(_:for:)((uint64_t)v4);
  }
  outlined destroy of EnvironmentValues.CapitalizationContext((uint64_t)v4);
  outlined destroy of EnvironmentValues.CapitalizationContext((uint64_t)v5);
  free(v5);
  free(v4);
  free(v6);

  free(v3);
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.Key@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for EnvironmentValues.CapitalizationContext();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static EnvironmentValues.Key.defaultValue);

  return outlined init with copy of EnvironmentValues.CapitalizationContext(v3, a1);
}

uint64_t Date.RelativeFormatStyle.capitalizationContext(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return Date.RelativeFormatStyle.capitalizationContext(_:)(a1, MEMORY[0x263F07320], MEMORY[0x263F07338], MEMORY[0x263F07328], a2);
}

uint64_t protocol witness for CapitalizationContextDependentFormatStyle.capitalizationContext(_:) in conformance Date.RelativeFormatStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return protocol witness for CapitalizationContextDependentFormatStyle.capitalizationContext(_:) in conformance Date.RelativeFormatStyle(a1, a2, MEMORY[0x263F07320], MEMORY[0x263F07328], a3);
}

uint64_t Date.AnchoredRelativeFormatStyle.capitalizationContext(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return Date.RelativeFormatStyle.capitalizationContext(_:)(a1, MEMORY[0x263F07430], MEMORY[0x263F07458], MEMORY[0x263F07438], a2);
}

uint64_t protocol witness for CapitalizationContextDependentFormatStyle.capitalizationContext(_:) in conformance Date.AnchoredRelativeFormatStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return protocol witness for CapitalizationContextDependentFormatStyle.capitalizationContext(_:) in conformance Date.RelativeFormatStyle(a1, a2, MEMORY[0x263F07430], MEMORY[0x263F07438], a3);
}

uint64_t Date.FormatStyle.capitalizationContext(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return Date.RelativeFormatStyle.capitalizationContext(_:)(a1, MEMORY[0x263F070A8], MEMORY[0x263F07258], MEMORY[0x263F070B0], a2);
}

uint64_t Date.RelativeFormatStyle.capitalizationContext(_:)@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(double)@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t (*a4)(char *)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v21 = a1;
  double v22 = a4;
  uint64_t v9 = type metadata accessor for FormatStyleCapitalizationContext();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v14 = MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v21 - v15;
  uint64_t v17 = a2(v14);
  MEMORY[0x24C520B20](v17);
  LOBYTE(a2) = MEMORY[0x24C520B10](v16, v12);
  uint64_t v18 = *(void (**)(char *, uint64_t))(v10 + 8);
  v18(v12, v9);
  v18(v16, v9);
  uint64_t v19 = a3(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(a5, v5, v19);
  if (a2)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v16, v21, v9);
    return v22(v16);
  }
  return result;
}

uint64_t protocol witness for CapitalizationContextDependentFormatStyle.capitalizationContext(_:) in conformance Date.FormatStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return protocol witness for CapitalizationContextDependentFormatStyle.capitalizationContext(_:) in conformance Date.RelativeFormatStyle(a1, a2, MEMORY[0x263F070A8], MEMORY[0x263F070B0], a3);
}

uint64_t protocol witness for CapitalizationContextDependentFormatStyle.capitalizationContext(_:) in conformance Date.RelativeFormatStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(double)@<X3>, uint64_t (*a4)(char *)@<X4>, uint64_t a5@<X8>)
{
  uint64_t v20 = a1;
  uint64_t v21 = a4;
  uint64_t v9 = type metadata accessor for FormatStyleCapitalizationContext();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v14 = MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v20 - v15;
  uint64_t v17 = a3(v14);
  MEMORY[0x24C520B20](v17);
  LOBYTE(a3) = MEMORY[0x24C520B10](v16, v12);
  uint64_t v18 = *(void (**)(char *, uint64_t))(v10 + 8);
  v18(v12, v9);
  v18(v16, v9);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a5, v5, a2);
  if (a3)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v16, v20, v9);
    return v21(v16);
  }
  return result;
}

uint64_t Date.FormatStyle.Attributed.capitalizationContext(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for FormatStyleCapitalizationContext();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v17 - v10;
  swift_getKeyPath();
  MEMORY[0x24C520D60]();
  uint64_t v12 = swift_release();
  MEMORY[0x24C520B20](v12);
  char v13 = MEMORY[0x24C520B10](v11, v8);
  double v14 = *(void (**)(char *, uint64_t))(v6 + 8);
  v14(v8, v5);
  v14(v11, v5);
  uint64_t v15 = type metadata accessor for Date.FormatStyle.Attributed();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(a2, v2, v15);
  if (v13)
  {
    swift_getKeyPath();
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v11, a1, v5);
    return Date.FormatStyle.Attributed.subscript.setter();
  }
  return result;
}

uint64_t sub_24603DAFC()
{
  return Date.FormatStyle.capitalizationContext.getter();
}

uint64_t key path setter for Date.FormatStyle.capitalizationContext : Date.FormatStyle(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for FormatStyleCapitalizationContext();
  double v3 = MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, double))(v5 + 16))((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3);
  return Date.FormatStyle.capitalizationContext.setter();
}

uint64_t instantiation function for generic protocol witness table for Date.RelativeFormatStyle(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type Date.RelativeFormatStyle and conformance Date.RelativeFormatStyle(&lazy protocol witness table cache variable for type Date.RelativeFormatStyle and conformance Date.RelativeFormatStyle, MEMORY[0x263F07338]);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type Date.RelativeFormatStyle and conformance Date.RelativeFormatStyle(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for EnvironmentValues.CapitalizationContext(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      swift_retain();
    }
    else
    {
      uint64_t v8 = type metadata accessor for FormatStyleCapitalizationContext();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithCopy for EnvironmentValues.CapitalizationContext(void *a1, void *a2)
{
  if (a1 != a2)
  {
    outlined destroy of EnvironmentValues.CapitalizationContext((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v4 = a2[1];
      *a1 = *a2;
      a1[1] = v4;
      swift_retain();
    }
    else
    {
      uint64_t v5 = type metadata accessor for FormatStyleCapitalizationContext();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *initializeWithTake for EnvironmentValues.CapitalizationContext(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = type metadata accessor for FormatStyleCapitalizationContext();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for EnvironmentValues.CapitalizationContext(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of EnvironmentValues.CapitalizationContext((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = type metadata accessor for FormatStyleCapitalizationContext();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t dispatch thunk of CapitalizationContextDependentFormatStyle.capitalizationContext(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

ValueMetadata *type metadata accessor for EnvironmentValues.Key()
{
  return &type metadata for EnvironmentValues.Key;
}

Swift::Int specialized MutableCollection<>.sort(by:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  uint64_t v16 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v16 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v16);
  }
  uint64_t v17 = *(void *)(v16 + 16);
  v23[0] = v16 + 32;
  v23[1] = v17;
  char v24 = a10 & 1;
  Swift::Int result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v23, a2, a3, a4, a5, a6, a7, a8, a9, a10 & 1, a11, a12 & 1);
  *a1 = v16;
  return result;
}

void *specialized MutableCollection<>.sort(by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  uint64_t v15 = *(void **)a1;
  uint64_t v16 = *(void *)(a1 + 8);
  uint64_t v25 = specialized _copyCollectionToContiguousArray<A>(_:)(*(void **)a1, v16);
  specialized MutableCollection<>.sort(by:)((uint64_t *)&v25, a2, a3, a4, a5, a6, a7, a8, a9, a10 & 1, a11, a12 & 1);
  Swift::Int result = v25;
  if (v24) {
    return (void *)swift_release();
  }
  if ((v16 & 0x8000000000000000) == 0)
  {
    if (!v16) {
      return (void *)swift_release();
    }
    uint64_t v18 = v25[2];
    if (!v18) {
      return (void *)swift_release();
    }
    unint64_t v19 = 0;
    while ((v18 & ~(v18 >> 63)) != v19)
    {
      if (v19 >= result[2]) {
        goto LABEL_14;
      }
      if (v19 == 0x111111111111112) {
        goto LABEL_15;
      }
      void *v15 = result[v19 + 4];
      if (v16 - 1 != v19)
      {
        ++v19;
        v15 += 15;
        if (v18 != v19) {
          continue;
        }
      }
      return (void *)swift_release();
    }
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized StackLayout.UnmanagedImplementation.sizeChildrenGenerallyWithConcreteMajorProposal(in:minorProposalForChild:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, double a9)
{
  int v9 = *(unsigned __int8 *)(a5 + 17);
  if (*(unsigned char *)(a5 + 17)) {
    char v10 = a4;
  }
  else {
    char v10 = a2;
  }
  if ((v10 & 1) == 0)
  {
    uint64_t v13 = a7;
    uint64_t v15 = a5;
    double v18 = *(double *)(a5 + 24);
    LOBYTE(v101) = a2 & 1;
    char v107 = a4 & 1;
    uint64_t result = StackLayout.UnmanagedImplementation.prioritize(_:proposedSize:)(a6, a7, a1, a2 & 1, a3, a4 & 1, a5, a6, a7);
    uint64_t v98 = a6;
    if (a6) {
      uint64_t v20 = a6;
    }
    else {
      uint64_t v20 = -8;
    }
    if ((v13 & 0x8000000000000000) == 0)
    {
      if (!v13) {
        return result;
      }
      uint64_t v21 = 0;
      char v91 = a8;
      double v22 = (void *)(v20 + 48);
      if (v9) {
        double v23 = *(double *)&a3;
      }
      else {
        double v23 = *(double *)&a1;
      }
      double v24 = v23 - v18;
      int v95 = *MEMORY[0x263F288F8];
      unint64_t v93 = v22;
      uint64_t v94 = v15;
      uint64_t v90 = v13;
      while (v21 < v13)
      {
        if ((unsigned __int128)(v21 * (__int128)120) >> 64 != (120 * v21) >> 63) {
          goto LABEL_150;
        }
        uint64_t v25 = v22[15 * v21];
        uint64_t v26 = v98;
        if (v21 < 0) {
          goto LABEL_151;
        }
        uint64_t v27 = v13;
        if (v21 + 1 != v13)
        {
          uint64_t v27 = v21 + 1;
          while (v27 < v13)
          {
            if ((unsigned __int128)(v27 * (__int128)120) >> 64 != (120 * v27) >> 63) {
              goto LABEL_135;
            }
            if (*(double *)(v98 + 120 * v22[15 * v27]) != *(double *)(v98 + 120 * v25)) {
              goto LABEL_25;
            }
            if (v13 == ++v27)
            {
              uint64_t v27 = v13;
              goto LABEL_25;
            }
          }
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
          break;
        }
LABEL_25:
        if (v27 < v21) {
          goto LABEL_148;
        }
        if (v27 > v13) {
          goto LABEL_152;
        }
        double v28 = 0.0;
        if (v25 == *v22)
        {
          if (v27 != v13)
          {
            uint64_t v29 = v27;
            while (v29 < v13)
            {
              if ((unsigned __int128)(v29 * (__int128)120) >> 64 != (120 * v29) >> 63) {
                goto LABEL_138;
              }
              if (v27 < 0) {
                goto LABEL_140;
              }
              uint64_t v30 = v98 + 120 * v22[15 * v29];
              if (*(unsigned char *)(v30 + 16)) {
                goto LABEL_154;
              }
              ++v29;
              double v28 = v28 + *(double *)(v30 + 8);
              if (v13 == v29) {
                goto LABEL_35;
              }
            }
            goto LABEL_136;
          }
LABEL_35:
          double v24 = v24 - v28;
        }
        else
        {
          if (v21 != v27)
          {
            uint64_t v31 = v21;
            while (v31 < v27)
            {
              if ((unsigned __int128)(v31 * (__int128)120) >> 64 != (120 * v31) >> 63) {
                goto LABEL_139;
              }
              if (v21 < 0) {
                goto LABEL_141;
              }
              uint64_t v32 = v98 + 120 * v22[15 * v31];
              if (*(unsigned char *)(v32 + 16)) {
                goto LABEL_155;
              }
              ++v31;
              double v28 = v28 + *(double *)(v32 + 8);
              if (v27 == v31) {
                goto LABEL_43;
              }
            }
            goto LABEL_137;
          }
LABEL_43:
          double v24 = v24 + v28;
        }
        uint64_t v33 = v15;
        if (v21 != v27)
        {
          if (v27 <= v21) {
            uint64_t v34 = v21;
          }
          else {
            uint64_t v34 = v27;
          }
          uint64_t v96 = v27;
          uint64_t v97 = v34;
          while (v97 != v21)
          {
            uint64_t v46 = 15 * v21;
            if ((unsigned __int128)(v21 * (__int128)120) >> 64 != (120 * v21) >> 63) {
              goto LABEL_130;
            }
            uint64_t v47 = v21 + 1;
            if ((v21 | v27 | (v21 + 1)) < 0) {
              goto LABEL_131;
            }
            uint64_t v48 = v27 - v47;
            if (__OFSUB__(v27, v47)) {
              goto LABEL_132;
            }
            BOOL v49 = __OFADD__(v48, 1);
            uint64_t v50 = v48 + 1;
            if (v49) {
              goto LABEL_133;
            }
            unint64_t v51 = v22[v46];
            double v52 = 0.0;
            if (v24 / (double)v50 > 0.0) {
              double v53 = v24 / (double)v50;
            }
            else {
              double v53 = 0.0;
            }
            uint64_t v54 = v26 + 120 * v51;
            double v56 = *(double *)(v54 + 56);
            double v57 = *(double *)(v54 + 64);
            char v55 = (double *)(v54 + 56);
            uint64_t v58 = v33;
            int v59 = *(unsigned __int8 *)(v33 + 17);
            double v60 = v55[4];
            double v61 = v55[5];
            v108.origin.double x = v56;
            v108.origin.CGFloat y = v57;
            v108.size.CGFloat width = v60;
            v108.size.CGFloat height = v61;
            if (!CGRectIsNull(v108))
            {
              if (v91) {
                double v62 = v61;
              }
              else {
                double v62 = v60;
              }
              if (v91) {
                double v63 = v57;
              }
              else {
                double v63 = v56;
              }
              double v64 = v63 + v62;
              if (v64 >= v63) {
                double v65 = v63;
              }
              else {
                double v65 = v64;
              }
              if (v63 > v64) {
                double v64 = v63;
              }
              if (v65 <= v64) {
                double v52 = v64;
              }
            }
            double v66 = v52 - a9;
            double v41 = 0.0;
            if (v52 - a9 <= 0.0) {
              double v66 = 0.0;
            }
            double v67 = a9 - v66;
            if (v59) {
              double v68 = v67;
            }
            else {
              double v68 = v53;
            }
            if (v59) {
              double v69 = v53;
            }
            else {
              double v69 = v67;
            }
            uint64_t v70 = *(void *)(v58 + 88);
            if (*(unsigned char *)(v58 + 96))
            {
              if ((v51 & 0x8000000000000000) != 0) {
                goto LABEL_142;
              }
              if (v51 >= *(void *)(v70 + 16)) {
                goto LABEL_144;
              }
              uint64_t v71 = v70 + 12 * v51;
            }
            else
            {
              if ((v51 & 0x8000000000000000) != 0) {
                goto LABEL_143;
              }
              if (v51 >= *(void *)(v70 + 16)) {
                goto LABEL_145;
              }
              uint64_t v71 = v70 + 8 * v51;
            }
            double v100 = v68;
            if (*(_DWORD *)(v71 + 32) == v95)
            {
              Inputuint64_t Value = (double *)&static LayoutComputer.defaultValue;
              if (one-time initialization token for defaultValue != -1)
              {
                swift_once();
                Inputuint64_t Value = (double *)&static LayoutComputer.defaultValue;
              }
            }
            else
            {
              Inputuint64_t Value = (double *)AGGraphGetInputValue();
            }
            double v74 = *InputValue;
            uint64_t v73 = *((void **)InputValue + 1);
            uint64_t v75 = one-time initialization token for lockAssertionsAreEnabled;
            swift_retain();
            if (v75 != -1) {
              swift_once();
            }
            if (lockAssertionsAreEnabled)
            {
              if (one-time initialization token for _lock != -1) {
                swift_once();
              }
              if (!_MovableLockIsOwner(static Update._lock)) {
                goto LABEL_157;
              }
            }
            double v101 = v100;
            LOBYTE(v102) = 0;
            double v103 = v69;
            LOBYTE(v104) = 0;
            double v76 = (*(double (**)(double *))(**(void **)&v74 + 120))(&v101);
            double v78 = v77;
            unint64_t v79 = *(void *)v58;
            if (lockAssertionsAreEnabled)
            {
              uint64_t v80 = one-time initialization token for _lock;
              swift_retain();
              if (v80 != -1) {
                swift_once();
              }
              if (!_MovableLockIsOwner(static Update._lock)) {
                goto LABEL_157;
              }
            }
            else
            {
              swift_retain();
            }
            double v101 = v76;
            double v102 = v78;
            double v103 = v100;
            double v104 = v69;
            *(double *)&uint64_t v81 = COERCE_DOUBLE((*(uint64_t (**)(unint64_t, double *))(**(void **)&v74 + 144))(v79, &v101));
            char v83 = v82;
            swift_release();
            unint64_t v99 = v51;
            if (v83)
            {
              uint64_t v92 = v73;
              if (one-time initialization token for _typeCache != -1) {
                swift_once();
              }
              uint64_t v84 = static AlignmentKey._typeCache;
              uint64_t v85 = (os_unfair_lock_s *)((char *)static AlignmentKey._typeCache + 16);
              swift_retain();
              os_unfair_lock_lock(v85);
              uint64_t v86 = v84[4];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              os_unfair_lock_unlock(v85);
              swift_release();
              if (v79 < 2) {
                goto LABEL_146;
              }
              if (v79 >> 1 > *(void *)(v86 + 16)) {
                goto LABEL_147;
              }
              uint64_t v87 = v86 + 16 * ((v79 >> 1) - 1);
              uint64_t v89 = *(void *)(v87 + 32);
              uint64_t v88 = *(void *)(v87 + 40);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v73 = v92;
              double v101 = v74;
              double v102 = *(double *)&v92;
              double v103 = v76;
              double v104 = v78;
              double v37 = v100;
              double v105 = v100;
              double v106 = v69;
              (*(void (**)(double *, uint64_t, uint64_t))(v88 + 8))(&v101, v89, v88);
              uint64_t v35 = v90;
            }
            else
            {
              uint64_t v35 = v13;
              double v36 = *(double *)&v81;
              double v37 = v100;
            }
            double v38 = INFINITY;
            if ((*(void *)&v36 & 0xFFFFFFFFFFFFFLL) == 0) {
              double v38 = v36;
            }
            if ((~*(void *)&v36 & 0x7FF0000000000000) == 0) {
              double v36 = v38;
            }
            double v39 = -v36;
            if (*(unsigned char *)(v94 + 17)) {
              double v40 = v39;
            }
            else {
              double v40 = 0.0;
            }
            if (!*(unsigned char *)(v94 + 17)) {
              double v41 = v39;
            }
            uint64_t result = swift_release();
            uint64_t v42 = v98 + 120 * v99;
            double *v55 = v40;
            v55[1] = v41;
            v55[2] = v74;
            uint64_t v55[3] = *(double *)&v73;
            v55[4] = v76;
            v55[5] = v78;
            *(double *)(v42 + 104) = v37;
            *(double *)(v42 + 112) = v69;
            uint64_t v33 = v94;
            if (*(unsigned char *)(v94 + 17)) {
              double v43 = v78;
            }
            else {
              double v43 = v76;
            }
            double v44 = v24 - v43;
            if ((*(void *)&v44 & 0xFFFFFFFFFFFFFLL) != 0) {
              double v45 = v24;
            }
            else {
              double v45 = v44;
            }
            if ((~*(void *)&v44 & 0x7FF0000000000000) != 0) {
              double v24 = v44;
            }
            else {
              double v24 = v45;
            }
            uint64_t v21 = v47;
            uint64_t v27 = v96;
            double v22 = v93;
            uint64_t v13 = v35;
            uint64_t v26 = v98;
            if (v96 == v47) {
              goto LABEL_14;
            }
          }
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
          goto LABEL_134;
        }
LABEL_14:
        uint64_t v21 = v27;
        uint64_t v15 = v33;
        if (v27 == v13) {
          return result;
        }
      }
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
    }
    __break(1u);
LABEL_154:
    __break(1u);
LABEL_155:
    __break(1u);
  }
  __break(1u);
LABEL_157:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *slowPath #1 (_:) in StackLayout.UnmanagedImplementation.prioritize(_:proposedSize:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  return specialized MutableCollection<>.sort(by:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10 & 1, a11, a12 & 1);
}

uint64_t specialized StackLayout.UnmanagedImplementation.placeChildren1(in:minorProposalForChild:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, double a9)
{
  uint64_t v9 = a7;
  char v12 = a8 & 1;
  if (*(unsigned char *)(a5 + 17)) {
    char v13 = a4;
  }
  else {
    char v13 = a2;
  }
  if (v13) {
    uint64_t result = specialized StackLayout.UnmanagedImplementation.sizeChildrenIdeally(in:minorProposalForChild:)(a5, a6, a7, v12, a9);
  }
  else {
    uint64_t result = specialized StackLayout.UnmanagedImplementation.sizeChildrenGenerallyWithConcreteMajorProposal(in:minorProposalForChild:)(a1, a2 & 1, a3, a4 & 1, a5, a6, a7, v12, a9);
  }
  double v15 = 0.0;
  double v16 = 0.0;
  double v17 = 0.0;
  if (!a6)
  {
LABEL_33:
    if (!v9) {
      goto LABEL_59;
    }
    if (v9 < 0)
    {
LABEL_66:
      __break(1u);
      return result;
    }
    uint64_t v30 = 0;
    int v31 = *(unsigned __int8 *)(a5 + 17);
    uint64_t v32 = (double *)(a6 + 96);
    double v15 = 0.0;
    while (1)
    {
      double v35 = v15 + *(v32 - 7);
      if ((~*(void *)&v35 & 0x7FF0000000000000) != 0 || (*(void *)&v35 & 0xFFFFFFFFFFFFFLL) == 0)
      {
        if ((v31 & 1) == 0)
        {
          *(v32 - 5) = v35;
LABEL_50:
          double v37 = v32 - 4;
          goto LABEL_51;
        }
        *(v32 - 4) = v35;
      }
      else if ((v31 & 1) == 0)
      {
        goto LABEL_50;
      }
      double v37 = (double *)(a6 + 120 * v30 + 56);
LABEL_51:
      double v38 = *v37 - v16;
      if ((~*(void *)&v38 & 0x7FF0000000000000) != 0 || (*(void *)&v38 & 0xFFFFFFFFFFFFFLL) == 0)
      {
        if (v31)
        {
          *(v32 - 5) = v38;
          double v34 = *v32;
        }
        else
        {
          *(v32 - 4) = v38;
          double v34 = *(v32 - 1);
        }
      }
      else
      {
        uint64_t v33 = v32 - 1;
        if (v31) {
          uint64_t v33 = v32;
        }
        double v34 = *v33;
      }
      double v15 = v35 + v34;
      v32 += 15;
      ++v30;
      if (!--v9) {
        goto LABEL_59;
      }
    }
  }
  if (v9)
  {
    double v18 = (CGFloat *)(a6 + 96);
    uint64_t v19 = 120 * v9;
    while (1)
    {
      double v20 = *(v18 - 5);
      double v21 = *(v18 - 4);
      double v22 = *(v18 - 1);
      double v23 = *v18;
      int v24 = *(unsigned __int8 *)(a5 + 17);
      v42.origin.double x = v20;
      v42.origin.CGFloat y = v21;
      v42.size.CGFloat width = v22;
      v42.size.CGFloat height = *v18;
      uint64_t result = CGRectIsNull(v42);
      double v25 = 0.0;
      double v26 = 0.0;
      if ((result & 1) == 0)
      {
        if (v24) {
          double v27 = v22;
        }
        else {
          double v27 = v23;
        }
        if (v24) {
          double v26 = v20;
        }
        else {
          double v26 = v21;
        }
        double v28 = v26 + v27;
        if (v28 >= v26) {
          double v29 = v26;
        }
        else {
          double v29 = v28;
        }
        if (v26 <= v28) {
          double v26 = v28;
        }
        if (v29 > v26) {
          double v25 = 0.0;
        }
        else {
          double v25 = v29;
        }
        if (v29 > v26) {
          double v26 = 0.0;
        }
      }
      if (v25 < v16) {
        double v16 = v25;
      }
      if (v17 <= v26) {
        double v17 = v26;
      }
      if (v16 > v17) {
        break;
      }
      v18 += 15;
      v19 -= 120;
      if (!v19) {
        goto LABEL_33;
      }
    }
    __break(1u);
    goto LABEL_66;
  }
LABEL_59:
  double v40 = v17 - v16;
  if (*(unsigned char *)(a5 + 17)) {
    double v41 = v17 - v16;
  }
  else {
    double v41 = v15;
  }
  if (*(unsigned char *)(a5 + 17)) {
    double v40 = v15;
  }
  *(double *)(a5 + 64) = v41;
  *(double *)(a5 + 72) = v40;
  return result;
}

uint64_t StackLayout.UnmanagedImplementation.resizeAnyChildrenWithTrailingOverflow(in:)(uint64_t result, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (*(unsigned char *)(a5 + 17)) {
    double v7 = *(double *)&result;
  }
  else {
    double v7 = *(double *)&a3;
  }
  if (*(unsigned char *)(a5 + 17)) {
    char v8 = a2;
  }
  else {
    char v8 = a4;
  }
  uint64_t v9 = 72;
  if (*(unsigned char *)(a5 + 17)) {
    uint64_t v9 = 64;
  }
  double v10 = *(double *)(a5 + v9);
  double v11 = v7;
  if (v8) {
    double v11 = INFINITY;
  }
  if (v10 > v11)
  {
    if (a6 && a7)
    {
      char v12 = (double *)(a6 + 96);
      uint64_t v13 = 120 * a7;
      while (1)
      {
        double v14 = v12 - 1;
        if (!*(unsigned char *)(a5 + 17)) {
          double v14 = v12;
        }
        if (*v14 == v10) {
          break;
        }
        v12 += 15;
        v13 -= 120;
        if (!v13) {
          return specialized StackLayout.UnmanagedImplementation.placeChildren1(in:minorProposalForChild:)(result, a2 & 1, a3, a4 & 1, a5, a6, a7, *(unsigned char *)(a5 + 17) ^ 1u, v11);
        }
      }
    }
    else
    {
      return specialized StackLayout.UnmanagedImplementation.placeChildren1(in:minorProposalForChild:)(result, a2 & 1, a3, a4 & 1, a5, a6, a7, *(unsigned char *)(a5 + 17) ^ 1u, v11);
    }
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance VerticalStackOrientationModifier(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *))
{
  int v4 = *((_DWORD *)a2 + 2);
  uint64_t v5 = a2[2];
  int v6 = *((_DWORD *)a2 + 8);
  uint64_t v7 = a2[5];
  uint64_t v8 = a2[6];
  int v9 = *((_DWORD *)a2 + 20);
  unsigned int v10 = *((_DWORD *)a2 + 9) & 0xFFFFFFF3 | 4;
  uint64_t v13 = *a2;
  int v14 = v4;
  uint64_t v15 = v5;
  uint64_t v16 = a2[3];
  int v17 = v6;
  unsigned int v18 = v10;
  uint64_t v19 = v7;
  uint64_t v20 = v8;
  long long v21 = *(_OWORD *)(a2 + 7);
  uint64_t v22 = a2[9];
  int v23 = v9;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v11 = swift_bridgeObjectRetain_n();
  a3(v11, &v13);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t View.verticalStackOrientation()(uint64_t a1)
{
  return View.modifier<A>(_:)(a1, a1, &type metadata for VerticalStackOrientationModifier);
}

uint64_t sub_24603EF94()
{
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for StackLayout()
{
  return &type metadata for StackLayout;
}

ValueMetadata *type metadata accessor for VerticalStackOrientationModifier()
{
  return &type metadata for VerticalStackOrientationModifier;
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  uint64_t v13 = v12;
  Swift::Int v15 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v15);
  if (result >= v15)
  {
    if ((v15 & 0x8000000000000000) == 0)
    {
      if (v15)
      {
        LOBYTE(v284) = a10 & 1;
        LOBYTE(v283[0]) = a12 & 1;
        return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v15, 1, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10 & 1, a11, a12 & 1);
      }
      return result;
    }
LABEL_454:
    __break(1u);
    goto LABEL_455;
  }
  v251 = a1;
  if (v15 >= 0) {
    uint64_t v17 = v15;
  }
  else {
    uint64_t v17 = v15 + 1;
  }
  if (v15 < -1) {
    goto LABEL_495;
  }
  Swift::Int v252 = result;
  if (v15 < 2)
  {
    v260 = (char *)(MEMORY[0x263F8EE78] + 32);
    uint64_t v250 = MEMORY[0x263F8EE78];
    if (v15 != 1)
    {
      unint64_t v156 = *(void *)(MEMORY[0x263F8EE78] + 16);
      uint64_t v22 = (char *)MEMORY[0x263F8EE78];
LABEL_410:
      if (v156 >= 2)
      {
        uint64_t v241 = *v251;
        while (1)
        {
          unint64_t v242 = v156 - 2;
          if (v156 < 2) {
            break;
          }
          if (!v241) {
            goto LABEL_493;
          }
          v243 = v22;
          uint64_t v244 = *(void *)&v22[16 * v242 + 32];
          uint64_t v245 = *(void *)&v22[16 * v156 + 24];
          v246 = (uint64_t *)(v241 + 8 * *(void *)&v22[16 * v156 + 16]);
          LOBYTE(v284) = a10 & 1;
          LOBYTE(v283[0]) = a12 & 1;
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v241 + 8 * v244), v246, v241 + 8 * v245, v260, a2, a3, a4, a5, a6, a7, a8, a9, a10 & 1, a11, a12 & 1);
          if (v13) {
            goto LABEL_421;
          }
          if (v245 < v244) {
            goto LABEL_447;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            v243 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v243);
          }
          if (v242 >= *((void *)v243 + 2)) {
            goto LABEL_448;
          }
          v247 = &v243[16 * v242 + 32];
          *(void *)v247 = v244;
          *((void *)v247 + 1) = v245;
          unint64_t v248 = *((void *)v243 + 2);
          if (v156 > v248) {
            goto LABEL_449;
          }
          memmove(&v243[16 * v156 + 16], &v243[16 * v156 + 32], 16 * (v248 - v156));
          uint64_t v22 = v243;
          *((void *)v243 + 2) = v248 - 1;
          unint64_t v156 = v248 - 1;
          if (v248 <= 2) {
            goto LABEL_421;
          }
        }
LABEL_446:
        __break(1u);
LABEL_447:
        __break(1u);
LABEL_448:
        __break(1u);
LABEL_449:
        __break(1u);
        goto LABEL_450;
      }
LABEL_421:
      swift_bridgeObjectRelease();
      *(void *)(v250 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v18 = v17 >> 1;
    uint64_t v19 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v19 + 16) = v18;
    uint64_t v250 = v19;
    v260 = (char *)(v19 + 32);
  }
  Swift::Int v20 = 0;
  uint64_t v21 = *a1;
  int v265 = *MEMORY[0x263F288F8];
  uint64_t v249 = *a1 - 8;
  uint64_t v22 = (char *)MEMORY[0x263F8EE78];
  Swift::Int v253 = v15;
  uint64_t v279 = *a1;
LABEL_13:
  Swift::Int v23 = v20++;
  v275 = v22;
  Swift::Int v259 = v23;
  if (v20 >= v15)
  {
    uint64_t v26 = v13;
    goto LABEL_20;
  }
  unint64_t v24 = *(void *)(v21 + 8 * v20);
  uint64_t v25 = 120 * v24;
  if ((unsigned __int128)((uint64_t)v24 * (__int128)120) >> 64 != (uint64_t)(120 * v24) >> 63) {
    goto LABEL_451;
  }
  uint64_t v26 = v13;
  unint64_t v27 = *(void *)(v21 + 8 * v23);
  if ((unsigned __int128)((uint64_t)v27 * (__int128)120) >> 64 != (uint64_t)(120 * v27) >> 63)
  {
LABEL_452:
    __break(1u);
LABEL_453:
    __break(1u);
    goto LABEL_454;
  }
  double v28 = *(double *)(a2 + 120 * v24);
  double v29 = *(double *)(a2 + 120 * v27);
  if (v29 >= v28)
  {
    if (v28 < v29) {
      goto LABEL_23;
    }
    uint64_t v82 = a4 + v25;
    uint64_t v256 = v26;
    if (*(unsigned char *)(a4 + v25 + 8))
    {
      Swift::Int v83 = v20;
      uint64_t v84 = *(unsigned __int8 *)(a6 + 17);
      if (*(unsigned char *)(a6 + 17)) {
        uint64_t v85 = a9;
      }
      else {
        uint64_t v85 = 0;
      }
      if (*(unsigned char *)(a6 + 17)) {
        uint64_t v86 = 0;
      }
      else {
        uint64_t v86 = a11;
      }
      uint64_t v87 = *(void *)(a6 + 88);
      if (*(unsigned char *)(a6 + 96))
      {
        if ((v24 & 0x8000000000000000) != 0) {
          goto LABEL_475;
        }
        if (v24 >= *(void *)(v87 + 16)) {
          goto LABEL_478;
        }
        uint64_t v88 = v87 + 12 * v24;
      }
      else
      {
        if ((v24 & 0x8000000000000000) != 0) {
          goto LABEL_476;
        }
        if (v24 >= *(void *)(v87 + 16)) {
          goto LABEL_479;
        }
        uint64_t v88 = v87 + 8 * v24;
      }
      if (*(_DWORD *)(v88 + 32) == v265)
      {
        Inputuint64_t Value = (uint64_t *)&static LayoutComputer.defaultValue;
        if (one-time initialization token for defaultValue != -1)
        {
          swift_once();
          Inputuint64_t Value = (uint64_t *)&static LayoutComputer.defaultValue;
        }
      }
      else
      {
        Inputuint64_t Value = (uint64_t *)AGGraphGetInputValue();
      }
      uint64_t v209 = *InputValue;
      uint64_t v210 = one-time initialization token for lockAssertionsAreEnabled;
      swift_retain();
      if (v210 != -1) {
        swift_once();
      }
      if (lockAssertionsAreEnabled)
      {
        if (one-time initialization token for _lock != -1) {
          swift_once();
        }
        if (!_MovableLockIsOwner(static Update._lock)) {
          goto LABEL_494;
        }
      }
      uint64_t v284 = v85;
      LOBYTE(v285) = v84 & a10;
      uint64_t v286 = v86;
      char v287 = (v84 ^ 1) & a12;
      double v89 = (*(double (**)(uint64_t *, uint64_t))(*(void *)v209 + 128))(&v284, v84);
      swift_release();
      *(double *)uint64_t v82 = v89;
      *(unsigned char *)(v82 + 8) = 0;
      uint64_t v26 = v256;
      uint64_t v21 = v279;
      Swift::Int v20 = v83;
      if ((*(unsigned char *)(v82 + 24) & 1) == 0) {
        goto LABEL_345;
      }
    }
    else
    {
      double v89 = *(double *)v82;
      if ((*(unsigned char *)(v82 + 24) & 1) == 0)
      {
LABEL_345:
        double v211 = *(double *)(v82 + 16);
        goto LABEL_354;
      }
    }
    Swift::Int v90 = v20;
    uint64_t v91 = *(unsigned __int8 *)(a6 + 17);
    if (*(unsigned char *)(a6 + 17)) {
      uint64_t v92 = a9;
    }
    else {
      uint64_t v92 = 0x7FF0000000000000;
    }
    if (*(unsigned char *)(a6 + 17)) {
      uint64_t v93 = 0x7FF0000000000000;
    }
    else {
      uint64_t v93 = a11;
    }
    uint64_t v94 = *(void *)(a6 + 88);
    if (*(unsigned char *)(a6 + 96))
    {
      if ((v24 & 0x8000000000000000) != 0) {
        goto LABEL_477;
      }
      if (v24 >= *(void *)(v94 + 16)) {
        goto LABEL_482;
      }
      uint64_t v95 = v94 + 12 * v24;
    }
    else
    {
      if ((v24 & 0x8000000000000000) != 0) {
        goto LABEL_480;
      }
      if (v24 >= *(void *)(v94 + 16)) {
        goto LABEL_481;
      }
      uint64_t v95 = v94 + 8 * v24;
    }
    if (*(_DWORD *)(v95 + 32) == v265)
    {
      v208 = (uint64_t *)&static LayoutComputer.defaultValue;
      if (one-time initialization token for defaultValue != -1)
      {
        swift_once();
        v208 = (uint64_t *)&static LayoutComputer.defaultValue;
      }
    }
    else
    {
      v208 = (uint64_t *)AGGraphGetInputValue();
    }
    uint64_t v212 = *v208;
    uint64_t v213 = one-time initialization token for lockAssertionsAreEnabled;
    swift_retain();
    if (v213 != -1) {
      swift_once();
    }
    if (lockAssertionsAreEnabled)
    {
      if (one-time initialization token for _lock != -1) {
        swift_once();
      }
      if (!_MovableLockIsOwner(static Update._lock)) {
        goto LABEL_494;
      }
    }
    uint64_t v284 = v92;
    LOBYTE(v285) = v91 & a10;
    uint64_t v286 = v93;
    char v287 = (v91 ^ 1) & a12;
    double v211 = (*(double (**)(uint64_t *, uint64_t))(*(void *)v212 + 128))(&v284, v91);
    swift_release();
    *(double *)(v82 + 16) = v211;
    *(unsigned char *)(v82 + 24) = 0;
    uint64_t v26 = v256;
    uint64_t v21 = v279;
    Swift::Int v20 = v90;
LABEL_354:
    uint64_t v214 = a4 + 120 * v27;
    if (*(unsigned char *)(v214 + 8))
    {
      Swift::Int v215 = v20;
      uint64_t v216 = *(unsigned __int8 *)(a6 + 17);
      if (*(unsigned char *)(a6 + 17)) {
        uint64_t v217 = a9;
      }
      else {
        uint64_t v217 = 0;
      }
      if (*(unsigned char *)(a6 + 17)) {
        uint64_t v218 = 0;
      }
      else {
        uint64_t v218 = a11;
      }
      uint64_t v219 = *(void *)(a6 + 88);
      if (*(unsigned char *)(a6 + 96))
      {
        if ((v27 & 0x8000000000000000) != 0) {
          goto LABEL_484;
        }
        if (v27 >= *(void *)(v219 + 16)) {
          goto LABEL_486;
        }
        uint64_t v220 = v219 + 12 * v27;
      }
      else
      {
        if ((v27 & 0x8000000000000000) != 0) {
          goto LABEL_483;
        }
        if (v27 >= *(void *)(v219 + 16)) {
          goto LABEL_485;
        }
        uint64_t v220 = v219 + 8 * v27;
      }
      if (*(_DWORD *)(v220 + 32) == v265)
      {
        v228 = (uint64_t *)&static LayoutComputer.defaultValue;
        if (one-time initialization token for defaultValue != -1)
        {
          swift_once();
          v228 = (uint64_t *)&static LayoutComputer.defaultValue;
        }
      }
      else
      {
        v228 = (uint64_t *)AGGraphGetInputValue();
      }
      uint64_t v232 = *v228;
      uint64_t v233 = one-time initialization token for lockAssertionsAreEnabled;
      swift_retain();
      if (v233 != -1) {
        swift_once();
      }
      if (lockAssertionsAreEnabled)
      {
        if (one-time initialization token for _lock != -1) {
          swift_once();
        }
        if (!_MovableLockIsOwner(static Update._lock)) {
          goto LABEL_494;
        }
      }
      uint64_t v284 = v217;
      LOBYTE(v285) = v216 & a10;
      uint64_t v286 = v218;
      char v287 = (v216 ^ 1) & a12;
      double v221 = (*(double (**)(uint64_t *, uint64_t))(*(void *)v232 + 128))(&v284, v216);
      swift_release();
      *(double *)uint64_t v214 = v221;
      *(unsigned char *)(v214 + 8) = 0;
      uint64_t v26 = v256;
      Swift::Int v15 = v253;
      uint64_t v21 = v279;
      Swift::Int v20 = v215;
      if ((*(unsigned char *)(v214 + 24) & 1) == 0) {
        goto LABEL_393;
      }
    }
    else
    {
      double v221 = *(double *)v214;
      Swift::Int v15 = v253;
      if ((*(unsigned char *)(v214 + 24) & 1) == 0)
      {
LABEL_393:
        double v231 = *(double *)(v214 + 16);
LABEL_394:
        double v234 = v211 - v89;
        double v235 = -v89;
        if (v211 - v89 != INFINITY) {
          double v235 = 0.0;
        }
        double v236 = v231 - v221;
        if (v236 == INFINITY) {
          double v237 = -v221;
        }
        else {
          double v237 = 0.0;
        }
        BOOL v238 = v235 < v237;
        if (v234 != v236) {
          BOOL v238 = v234 < v236;
        }
        if (v238) {
          goto LABEL_17;
        }
        BOOL v239 = v236 < v234;
        if (v234 == v236) {
          BOOL v239 = v237 < v235;
        }
        if (!v239)
        {
          BOOL v31 = (uint64_t)v24 < (uint64_t)v27;
          Swift::Int v23 = v259;
          Swift::Int v30 = v259 + 2;
          if (v259 + 2 >= v15) {
            goto LABEL_163;
          }
          goto LABEL_25;
        }
LABEL_23:
        Swift::Int v23 = v259;
        Swift::Int v30 = v259 + 2;
        if (v259 + 2 >= v15)
        {
          Swift::Int v20 = v259 + 2;
          goto LABEL_20;
        }
        BOOL v31 = 0;
        goto LABEL_25;
      }
    }
    char v222 = *(unsigned char *)(a6 + 17);
    if (v222) {
      uint64_t v223 = a9;
    }
    else {
      uint64_t v223 = 0x7FF0000000000000;
    }
    uint64_t v224 = a11;
    if (*(unsigned char *)(a6 + 17)) {
      uint64_t v224 = 0x7FF0000000000000;
    }
    uint64_t v225 = *(void *)(a6 + 88);
    if (*(unsigned char *)(a6 + 96))
    {
      if ((v27 & 0x8000000000000000) != 0) {
        goto LABEL_488;
      }
      if (v27 >= *(void *)(v225 + 16)) {
        goto LABEL_489;
      }
      uint64_t v226 = v26;
      uint64_t v227 = v225 + 12 * v27;
    }
    else
    {
      if ((v27 & 0x8000000000000000) != 0) {
        goto LABEL_487;
      }
      if (v27 >= *(void *)(v225 + 16)) {
        goto LABEL_490;
      }
      uint64_t v226 = v26;
      uint64_t v227 = v225 + 8 * v27;
    }
    v229 = (_DWORD *)(v227 + 32);
    int v230 = *(_DWORD *)(v227 + 36);
    LODWORD(v229) = *v229;
    v283[0] = *(_DWORD *)(a6 + 80);
    v283[1] = v229;
    v283[2] = v230;
    uint64_t v284 = v223;
    LOBYTE(v285) = v222 & a10;
    uint64_t v286 = v224;
    char v287 = (v222 ^ 1) & a12;
    LayoutProxy.lengthThatFits(_:in:)(&v284, v222);
    *(double *)(v214 + 16) = v231;
    *(unsigned char *)(v214 + 24) = 0;
    uint64_t v21 = v279;
    uint64_t v26 = v226;
    goto LABEL_394;
  }
LABEL_17:
  Swift::Int v23 = v259;
  Swift::Int v30 = v259 + 2;
  if (v259 + 2 >= v15) {
    goto LABEL_180;
  }
  BOOL v31 = 1;
LABEL_25:
  Swift::Int v32 = v30;
  BOOL v277 = v31;
  do
  {
    Swift::Int v30 = v32;
    unint64_t v33 = *(void *)(v21 + 8 * v32);
    uint64_t v34 = 120 * v33;
    if ((unsigned __int128)((uint64_t)v33 * (__int128)120) >> 64 != (uint64_t)(120 * v33) >> 63) {
      goto LABEL_433;
    }
    unint64_t v35 = *(void *)(v21 + 8 * v20);
    if ((unsigned __int128)((uint64_t)v35 * (__int128)120) >> 64 != (uint64_t)(120 * v35) >> 63)
    {
LABEL_434:
      __break(1u);
LABEL_435:
      __break(1u);
LABEL_436:
      __break(1u);
LABEL_437:
      __break(1u);
LABEL_438:
      __break(1u);
LABEL_439:
      __break(1u);
LABEL_440:
      __break(1u);
LABEL_441:
      __break(1u);
LABEL_442:
      __break(1u);
LABEL_443:
      __break(1u);
LABEL_444:
      __break(1u);
LABEL_445:
      __break(1u);
      goto LABEL_446;
    }
    double v36 = *(double *)(a2 + 120 * v33);
    double v37 = *(double *)(a2 + 120 * v35);
    if (v37 < v36)
    {
LABEL_26:
      if (!v31)
      {
        Swift::Int v20 = v30;
        goto LABEL_199;
      }
      goto LABEL_27;
    }
    if (v36 >= v37)
    {
      uint64_t v38 = a4 + v34;
      uint64_t v255 = v26;
      if (*(unsigned char *)(a4 + v34 + 8))
      {
        uint64_t v39 = *(unsigned __int8 *)(a6 + 17);
        if (*(unsigned char *)(a6 + 17)) {
          uint64_t v40 = a9;
        }
        else {
          uint64_t v40 = 0;
        }
        if (*(unsigned char *)(a6 + 17)) {
          uint64_t v41 = 0;
        }
        else {
          uint64_t v41 = a11;
        }
        uint64_t v42 = *(void *)(a6 + 88);
        if (*(unsigned char *)(a6 + 96))
        {
          if ((v33 & 0x8000000000000000) != 0) {
            goto LABEL_458;
          }
          if (v33 >= *(void *)(v42 + 16)) {
            goto LABEL_460;
          }
          uint64_t v43 = v42 + 12 * v33;
        }
        else
        {
          if ((v33 & 0x8000000000000000) != 0) {
            goto LABEL_459;
          }
          if (v33 >= *(void *)(v42 + 16)) {
            goto LABEL_463;
          }
          uint64_t v43 = v42 + 8 * v33;
        }
        if (*(_DWORD *)(v43 + 32) == v265)
        {
          uint64_t v50 = (uint64_t *)&static LayoutComputer.defaultValue;
          if (one-time initialization token for defaultValue != -1)
          {
            swift_once();
            uint64_t v50 = (uint64_t *)&static LayoutComputer.defaultValue;
          }
        }
        else
        {
          uint64_t v50 = (uint64_t *)AGGraphGetInputValue();
        }
        uint64_t v52 = *v50;
        uint64_t v53 = one-time initialization token for lockAssertionsAreEnabled;
        swift_retain();
        if (v53 != -1) {
          swift_once();
        }
        if (lockAssertionsAreEnabled)
        {
          if (one-time initialization token for _lock != -1) {
            swift_once();
          }
          if (!_MovableLockIsOwner(static Update._lock)) {
            goto LABEL_494;
          }
        }
        uint64_t v284 = v40;
        LOBYTE(v285) = v39 & a10;
        uint64_t v286 = v41;
        char v287 = (v39 ^ 1) & a12;
        double v44 = (*(double (**)(uint64_t *, uint64_t))(*(void *)v52 + 128))(&v284, v39);
        swift_release();
        *(double *)uint64_t v38 = v44;
        *(unsigned char *)(v38 + 8) = 0;
        uint64_t v26 = v255;
        uint64_t v21 = v279;
        BOOL v31 = v277;
        if ((*(unsigned char *)(v38 + 24) & 1) == 0) {
          goto LABEL_76;
        }
      }
      else
      {
        double v44 = *(double *)v38;
        if ((*(unsigned char *)(v38 + 24) & 1) == 0)
        {
LABEL_76:
          double v54 = *(double *)(v38 + 16);
          goto LABEL_85;
        }
      }
      uint64_t v45 = *(unsigned __int8 *)(a6 + 17);
      if (*(unsigned char *)(a6 + 17)) {
        uint64_t v46 = a9;
      }
      else {
        uint64_t v46 = 0x7FF0000000000000;
      }
      if (*(unsigned char *)(a6 + 17)) {
        uint64_t v47 = 0x7FF0000000000000;
      }
      else {
        uint64_t v47 = a11;
      }
      uint64_t v48 = *(void *)(a6 + 88);
      if (*(unsigned char *)(a6 + 96))
      {
        if ((v33 & 0x8000000000000000) != 0) {
          goto LABEL_461;
        }
        if (v33 >= *(void *)(v48 + 16)) {
          goto LABEL_465;
        }
        uint64_t v49 = v48 + 12 * v33;
      }
      else
      {
        if ((v33 & 0x8000000000000000) != 0) {
          goto LABEL_462;
        }
        if (v33 >= *(void *)(v48 + 16)) {
          goto LABEL_466;
        }
        uint64_t v49 = v48 + 8 * v33;
      }
      if (*(_DWORD *)(v49 + 32) == v265)
      {
        unint64_t v51 = (uint64_t *)&static LayoutComputer.defaultValue;
        if (one-time initialization token for defaultValue != -1)
        {
          swift_once();
          unint64_t v51 = (uint64_t *)&static LayoutComputer.defaultValue;
        }
      }
      else
      {
        unint64_t v51 = (uint64_t *)AGGraphGetInputValue();
      }
      uint64_t v55 = *v51;
      uint64_t v56 = one-time initialization token for lockAssertionsAreEnabled;
      swift_retain();
      if (v56 != -1) {
        swift_once();
      }
      if (lockAssertionsAreEnabled)
      {
        if (one-time initialization token for _lock != -1) {
          swift_once();
        }
        if (!_MovableLockIsOwner(static Update._lock)) {
          goto LABEL_494;
        }
      }
      uint64_t v284 = v46;
      LOBYTE(v285) = v45 & a10;
      uint64_t v286 = v47;
      char v287 = (v45 ^ 1) & a12;
      double v54 = (*(double (**)(uint64_t *, uint64_t))(*(void *)v55 + 128))(&v284, v45);
      swift_release();
      *(double *)(v38 + 16) = v54;
      *(unsigned char *)(v38 + 24) = 0;
      uint64_t v26 = v255;
      uint64_t v21 = v279;
      BOOL v31 = v277;
LABEL_85:
      uint64_t v57 = a4 + 120 * v35;
      if (*(unsigned char *)(v57 + 8))
      {
        uint64_t v58 = *(unsigned __int8 *)(a6 + 17);
        if (*(unsigned char *)(a6 + 17)) {
          uint64_t v59 = a9;
        }
        else {
          uint64_t v59 = 0;
        }
        if (*(unsigned char *)(a6 + 17)) {
          uint64_t v60 = 0;
        }
        else {
          uint64_t v60 = a11;
        }
        uint64_t v61 = *(void *)(a6 + 88);
        if (*(unsigned char *)(a6 + 96))
        {
          if ((v35 & 0x8000000000000000) != 0) {
            goto LABEL_464;
          }
          if (v35 >= *(void *)(v61 + 16)) {
            goto LABEL_470;
          }
          uint64_t v62 = v61 + 12 * v35;
        }
        else
        {
          if ((v35 & 0x8000000000000000) != 0) {
            goto LABEL_467;
          }
          if (v35 >= *(void *)(v61 + 16)) {
            goto LABEL_469;
          }
          uint64_t v62 = v61 + 8 * v35;
        }
        if (*(_DWORD *)(v62 + 32) == v265)
        {
          double v69 = (uint64_t *)&static LayoutComputer.defaultValue;
          if (one-time initialization token for defaultValue != -1)
          {
            swift_once();
            double v69 = (uint64_t *)&static LayoutComputer.defaultValue;
          }
        }
        else
        {
          double v69 = (uint64_t *)AGGraphGetInputValue();
        }
        uint64_t v71 = *v69;
        uint64_t v72 = one-time initialization token for lockAssertionsAreEnabled;
        swift_retain();
        if (v72 != -1) {
          swift_once();
        }
        if (lockAssertionsAreEnabled)
        {
          if (one-time initialization token for _lock != -1) {
            swift_once();
          }
          if (!_MovableLockIsOwner(static Update._lock)) {
            goto LABEL_494;
          }
        }
        uint64_t v284 = v59;
        LOBYTE(v285) = v58 & a10;
        uint64_t v286 = v60;
        char v287 = (v58 ^ 1) & a12;
        double v63 = (*(double (**)(uint64_t *, uint64_t))(*(void *)v71 + 128))(&v284, v58);
        swift_release();
        *(double *)uint64_t v57 = v63;
        *(unsigned char *)(v57 + 8) = 0;
        uint64_t v26 = v255;
        uint64_t v21 = v279;
        if ((*(unsigned char *)(v57 + 24) & 1) == 0) {
          goto LABEL_127;
        }
      }
      else
      {
        double v63 = *(double *)v57;
        if ((*(unsigned char *)(v57 + 24) & 1) == 0)
        {
LABEL_127:
          double v73 = *(double *)(v57 + 16);
          Swift::Int v15 = v253;
LABEL_136:
          double v76 = v54 - v44;
          if (v54 - v44 == INFINITY) {
            double v77 = -v44;
          }
          else {
            double v77 = 0.0;
          }
          double v78 = v73 - v63;
          if (v73 - v63 == INFINITY) {
            double v79 = -v63;
          }
          else {
            double v79 = 0.0;
          }
          BOOL v80 = v77 < v79;
          if (v76 != v78) {
            BOOL v80 = v76 < v78;
          }
          if (v80) {
            goto LABEL_26;
          }
          BOOL v81 = v78 < v76;
          if (v76 == v78) {
            BOOL v81 = v79 < v77;
          }
          if (!v81)
          {
            if (((v31 ^ ((uint64_t)v33 >= (uint64_t)v35)) & 1) == 0) {
              goto LABEL_162;
            }
            goto LABEL_27;
          }
          goto LABEL_32;
        }
      }
      uint64_t v64 = *(unsigned __int8 *)(a6 + 17);
      if (*(unsigned char *)(a6 + 17)) {
        uint64_t v65 = a9;
      }
      else {
        uint64_t v65 = 0x7FF0000000000000;
      }
      if (*(unsigned char *)(a6 + 17)) {
        uint64_t v66 = 0x7FF0000000000000;
      }
      else {
        uint64_t v66 = a11;
      }
      uint64_t v67 = *(void *)(a6 + 88);
      if (*(unsigned char *)(a6 + 96))
      {
        if ((v35 & 0x8000000000000000) != 0) {
          goto LABEL_468;
        }
        if (v35 >= *(void *)(v67 + 16)) {
          goto LABEL_473;
        }
        uint64_t v68 = v67 + 12 * v35;
      }
      else
      {
        if ((v35 & 0x8000000000000000) != 0) {
          goto LABEL_471;
        }
        if (v35 >= *(void *)(v67 + 16)) {
          goto LABEL_472;
        }
        uint64_t v68 = v67 + 8 * v35;
      }
      if (*(_DWORD *)(v68 + 32) == v265)
      {
        uint64_t v70 = (uint64_t *)&static LayoutComputer.defaultValue;
        if (one-time initialization token for defaultValue != -1)
        {
          swift_once();
          uint64_t v70 = (uint64_t *)&static LayoutComputer.defaultValue;
        }
      }
      else
      {
        uint64_t v70 = (uint64_t *)AGGraphGetInputValue();
      }
      uint64_t v74 = *v70;
      uint64_t v75 = one-time initialization token for lockAssertionsAreEnabled;
      swift_retain();
      if (v75 != -1) {
        swift_once();
      }
      if (lockAssertionsAreEnabled)
      {
        if (one-time initialization token for _lock != -1) {
          swift_once();
        }
        if (!_MovableLockIsOwner(static Update._lock)) {
          goto LABEL_494;
        }
      }
      uint64_t v284 = v65;
      LOBYTE(v285) = v64 & a10;
      uint64_t v286 = v66;
      char v287 = (v64 ^ 1) & a12;
      double v73 = (*(double (**)(uint64_t *, uint64_t))(*(void *)v74 + 128))(&v284, v64);
      swift_release();
      *(double *)(v57 + 16) = v73;
      *(unsigned char *)(v57 + 24) = 0;
      uint64_t v26 = v255;
      Swift::Int v15 = v253;
      uint64_t v21 = v279;
      goto LABEL_136;
    }
LABEL_32:
    if (v31)
    {
      Swift::Int v23 = v259;
      if (v30 < v259) {
        goto LABEL_455;
      }
LABEL_180:
      if (v23 >= v30)
      {
        Swift::Int v20 = v30;
        goto LABEL_188;
      }
      Swift::Int v96 = v30 - 1;
      do
      {
        if (v23 != v96)
        {
          if (!v21) {
            goto LABEL_492;
          }
          uint64_t v97 = *(void *)(v21 + 8 * v23);
          *(void *)(v21 + 8 * v23) = *(void *)(v21 + 8 * v96);
          *(void *)(v21 + 8 * v96) = v97;
        }
        BOOL v152 = ++v23 < v96--;
      }
      while (v152);
      Swift::Int v20 = v30;
LABEL_199:
      Swift::Int v23 = v259;
      if (v20 >= v15)
      {
LABEL_20:
        if (v20 >= v23) {
          goto LABEL_275;
        }
        goto LABEL_450;
      }
LABEL_189:
      if (__OFSUB__(v20, v23)) {
        goto LABEL_453;
      }
      if (v20 - v23 >= v252) {
        goto LABEL_274;
      }
      if (__OFADD__(v259, v252)) {
        goto LABEL_456;
      }
      if (v259 + v252 >= v15) {
        Swift::Int v98 = v15;
      }
      else {
        Swift::Int v98 = v259 + v252;
      }
      if (v98 < v259) {
        goto LABEL_457;
      }
      if (v20 == v98)
      {
        if (v20 >= v259) {
          goto LABEL_275;
        }
LABEL_450:
        __break(1u);
LABEL_451:
        __break(1u);
        goto LABEL_452;
      }
      Swift::Int v254 = v98;
      uint64_t v257 = v26;
      unint64_t v99 = (int64_t *)(v249 + 8 * v20);
      while (2)
      {
        unint64_t v100 = *(void *)(v21 + 8 * v20);
        Swift::Int v101 = v259;
        v258 = v99;
        Swift::Int v278 = v20;
        while (2)
        {
          uint64_t v102 = 120 * v100;
          if ((unsigned __int128)((uint64_t)v100 * (__int128)120) >> 64 != (uint64_t)(120 * v100) >> 63)
          {
            __break(1u);
LABEL_424:
            __break(1u);
LABEL_425:
            __break(1u);
LABEL_426:
            __break(1u);
LABEL_427:
            __break(1u);
LABEL_428:
            __break(1u);
LABEL_429:
            __break(1u);
LABEL_430:
            __break(1u);
LABEL_431:
            __break(1u);
LABEL_432:
            __break(1u);
LABEL_433:
            __break(1u);
            goto LABEL_434;
          }
          int64_t v103 = *v99;
          uint64_t v104 = 120 * *v99;
          if ((unsigned __int128)(*v99 * (__int128)120) >> 64 != v104 >> 63) {
            goto LABEL_424;
          }
          double v105 = *(double *)(a2 + 120 * v100);
          double v106 = *(double *)(a2 + v104);
          if (v106 < v105) {
            goto LABEL_270;
          }
          if (v105 < v106) {
            break;
          }
          uint64_t v107 = a4 + v102;
          if (*(unsigned char *)(a4 + v102 + 8))
          {
            uint64_t v108 = *(unsigned __int8 *)(a6 + 17);
            if (*(unsigned char *)(a6 + 17)) {
              uint64_t v109 = a9;
            }
            else {
              uint64_t v109 = 0;
            }
            if (*(unsigned char *)(a6 + 17)) {
              uint64_t v110 = 0;
            }
            else {
              uint64_t v110 = a11;
            }
            uint64_t v111 = *(void *)(a6 + 88);
            if (*(unsigned char *)(a6 + 96))
            {
              if ((v100 & 0x8000000000000000) != 0) {
                goto LABEL_429;
              }
              if (v100 >= *(void *)(v111 + 16)) {
                goto LABEL_431;
              }
              uint64_t v112 = v111 + 12 * v100;
            }
            else
            {
              if ((v100 & 0x8000000000000000) != 0) {
                goto LABEL_430;
              }
              if (v100 >= *(void *)(v111 + 16)) {
                goto LABEL_432;
              }
              uint64_t v112 = v111 + 8 * v100;
            }
            uint64_t v272 = v109;
            if (*(_DWORD *)(v112 + 32) == v265)
            {
              uint64_t v124 = (uint64_t *)&static LayoutComputer.defaultValue;
              if (one-time initialization token for defaultValue != -1)
              {
                swift_once();
                uint64_t v124 = (uint64_t *)&static LayoutComputer.defaultValue;
              }
            }
            else
            {
              uint64_t v124 = (uint64_t *)AGGraphGetInputValue();
            }
            uint64_t v125 = *v124;
            uint64_t v126 = one-time initialization token for lockAssertionsAreEnabled;
            swift_retain();
            if (v126 != -1) {
              swift_once();
            }
            if (lockAssertionsAreEnabled)
            {
              if (one-time initialization token for _lock != -1) {
                swift_once();
              }
              if (!_MovableLockIsOwner(static Update._lock)) {
                goto LABEL_494;
              }
            }
            uint64_t v284 = v272;
            LOBYTE(v285) = v108 & a10;
            uint64_t v286 = v110;
            char v287 = (v108 ^ 1) & a12;
            double v113 = (*(double (**)(uint64_t *, uint64_t))(*(void *)v125 + 128))(&v284, v108);
            swift_release();
            *(double *)uint64_t v107 = v113;
            *(unsigned char *)(v107 + 8) = 0;
            if ((*(unsigned char *)(v107 + 24) & 1) == 0)
            {
LABEL_239:
              double v123 = *(double *)(v107 + 16);
              goto LABEL_240;
            }
          }
          else
          {
            double v113 = *(double *)v107;
            if ((*(unsigned char *)(v107 + 24) & 1) == 0) {
              goto LABEL_239;
            }
          }
          char v114 = *(unsigned char *)(a6 + 17);
          uint64_t v115 = a9;
          if (!v114) {
            uint64_t v115 = 0x7FF0000000000000;
          }
          uint64_t v271 = v115;
          char v116 = v114 & a10;
          uint64_t v117 = a11;
          if (*(unsigned char *)(a6 + 17)) {
            uint64_t v117 = 0x7FF0000000000000;
          }
          uint64_t v268 = v117;
          char v266 = a12 & ~v114;
          uint64_t v118 = *(void *)(a6 + 88);
          char v119 = *(unsigned char *)(a6 + 96);
          char v120 = *(unsigned char *)(a6 + 97);
          LODWORD(v284) = *(_DWORD *)(a6 + 80);
          uint64_t v285 = v118;
          LOBYTE(v286) = v119;
          BYTE1(v286) = v120;
          LayoutSubviews.subscript.getter(v100, (uint64_t)v283);
          char v121 = *(unsigned char *)(a6 + 17);
          uint64_t v284 = v271;
          LOBYTE(v285) = v116;
          uint64_t v286 = v268;
          char v287 = v266 & 1;
          LayoutProxy.lengthThatFits(_:in:)(&v284, v121);
          double v123 = v122;
          *(double *)(v107 + 16) = v122;
          *(unsigned char *)(v107 + 24) = 0;
LABEL_240:
          uint64_t v127 = a4 + v104;
          if ((*(unsigned char *)(a4 + v104 + 8) & 1) == 0)
          {
            double v137 = *(double *)v127;
            if ((*(unsigned char *)(v127 + 24) & 1) == 0) {
              goto LABEL_247;
            }
LABEL_249:
            char v139 = *(unsigned char *)(a6 + 17);
            uint64_t v140 = a9;
            if (!v139) {
              uint64_t v140 = 0x7FF0000000000000;
            }
            uint64_t v274 = v140;
            char v270 = v139 & a10;
            if (*(unsigned char *)(a6 + 17)) {
              uint64_t v141 = 0x7FF0000000000000;
            }
            else {
              uint64_t v141 = a11;
            }
            char v267 = a12 & ~v139;
            uint64_t v142 = *(void *)(a6 + 88);
            char v143 = *(unsigned char *)(a6 + 96);
            char v144 = *(unsigned char *)(a6 + 97);
            LODWORD(v284) = *(_DWORD *)(a6 + 80);
            uint64_t v285 = v142;
            LOBYTE(v286) = v143;
            BYTE1(v286) = v144;
            LayoutSubviews.subscript.getter(v103, (uint64_t)v283);
            char v145 = *(unsigned char *)(a6 + 17);
            uint64_t v284 = v274;
            LOBYTE(v285) = v270;
            uint64_t v286 = v141;
            char v287 = v267 & 1;
            LayoutProxy.lengthThatFits(_:in:)(&v284, v145);
            *(double *)(v127 + 16) = v138;
            *(unsigned char *)(v127 + 24) = 0;
            uint64_t v21 = v279;
            goto LABEL_255;
          }
          char v128 = *(unsigned char *)(a6 + 17);
          uint64_t v129 = a9;
          if (!v128) {
            uint64_t v129 = 0;
          }
          uint64_t v273 = v129;
          char v130 = v128 & a10;
          if (*(unsigned char *)(a6 + 17)) {
            uint64_t v131 = 0;
          }
          else {
            uint64_t v131 = a11;
          }
          char v269 = a12 & ~v128;
          uint64_t v132 = *(void *)(a6 + 88);
          char v133 = *(unsigned char *)(a6 + 96);
          char v134 = *(unsigned char *)(a6 + 97);
          LODWORD(v284) = *(_DWORD *)(a6 + 80);
          uint64_t v285 = v132;
          LOBYTE(v286) = v133;
          BYTE1(v286) = v134;
          LayoutSubviews.subscript.getter(v103, (uint64_t)v283);
          char v135 = *(unsigned char *)(a6 + 17);
          uint64_t v284 = v273;
          LOBYTE(v285) = v130;
          uint64_t v286 = v131;
          char v287 = v269 & 1;
          LayoutProxy.lengthThatFits(_:in:)(&v284, v135);
          double v137 = v136;
          *(double *)uint64_t v127 = v136;
          *(unsigned char *)(v127 + 8) = 0;
          if (*(unsigned char *)(v127 + 24)) {
            goto LABEL_249;
          }
LABEL_247:
          double v138 = *(double *)(v127 + 16);
          uint64_t v21 = v279;
LABEL_255:
          double v146 = v123 - v113;
          double v147 = -v113;
          if (v123 - v113 != INFINITY) {
            double v147 = 0.0;
          }
          double v148 = v138 - v137;
          if (v148 == INFINITY) {
            double v149 = -v137;
          }
          else {
            double v149 = 0.0;
          }
          BOOL v150 = v147 < v149;
          if (v146 != v148) {
            BOOL v150 = v146 < v148;
          }
          Swift::Int v20 = v278;
          if (!v150)
          {
            BOOL v151 = v148 >= v146;
            if (v146 == v148) {
              BOOL v151 = v149 >= v147;
            }
            BOOL v152 = v151 && (uint64_t)v100 < v103;
            if (!v152) {
              break;
            }
          }
LABEL_270:
          if (!v21) {
            goto LABEL_474;
          }
          int64_t v153 = *v99;
          unint64_t v100 = v99[1];
          *unint64_t v99 = v100;
          v99[1] = v153;
          --v99;
          if (v20 != ++v101) {
            continue;
          }
          break;
        }
        ++v20;
        unint64_t v99 = v258 + 1;
        if (v20 != v254) {
          continue;
        }
        break;
      }
      Swift::Int v20 = v254;
      uint64_t v26 = v257;
LABEL_274:
      if (v20 < v259) {
        goto LABEL_450;
      }
LABEL_275:
      uint64_t v13 = v26;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        uint64_t v22 = v275;
      }
      else {
        uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v275 + 2) + 1, 1, v275);
      }
      unint64_t v155 = *((void *)v22 + 2);
      unint64_t v154 = *((void *)v22 + 3);
      unint64_t v156 = v155 + 1;
      uint64_t v21 = v279;
      if (v155 >= v154 >> 1)
      {
        v240 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v154 > 1), v155 + 1, 1, v22);
        uint64_t v21 = v279;
        uint64_t v22 = v240;
      }
      *((void *)v22 + 2) = v156;
      uint64_t v157 = v22 + 32;
      uint64_t v158 = &v22[16 * v155 + 32];
      *(void *)uint64_t v158 = v259;
      *((void *)v158 + 1) = v20;
      if (v155)
      {
        v276 = v22;
        while (1)
        {
          unint64_t v159 = v156 - 1;
          if (v156 >= 4)
          {
            uint64_t v164 = &v157[16 * v156];
            uint64_t v165 = *((void *)v164 - 8);
            uint64_t v166 = *((void *)v164 - 7);
            BOOL v170 = __OFSUB__(v166, v165);
            uint64_t v167 = v166 - v165;
            if (v170) {
              goto LABEL_435;
            }
            uint64_t v169 = *((void *)v164 - 6);
            uint64_t v168 = *((void *)v164 - 5);
            BOOL v170 = __OFSUB__(v168, v169);
            uint64_t v162 = v168 - v169;
            char v163 = v170;
            if (v170) {
              goto LABEL_436;
            }
            unint64_t v171 = v156 - 2;
            uint64_t v172 = &v157[16 * v156 - 32];
            uint64_t v174 = *(void *)v172;
            uint64_t v173 = *((void *)v172 + 1);
            BOOL v170 = __OFSUB__(v173, v174);
            uint64_t v175 = v173 - v174;
            if (v170) {
              goto LABEL_438;
            }
            BOOL v170 = __OFADD__(v162, v175);
            uint64_t v176 = v162 + v175;
            if (v170) {
              goto LABEL_441;
            }
            if (v176 >= v167)
            {
              char v194 = &v157[16 * v159];
              uint64_t v196 = *(void *)v194;
              uint64_t v195 = *((void *)v194 + 1);
              BOOL v170 = __OFSUB__(v195, v196);
              uint64_t v197 = v195 - v196;
              if (v170) {
                goto LABEL_445;
              }
              BOOL v187 = v162 < v197;
              goto LABEL_312;
            }
          }
          else
          {
            if (v156 != 3)
            {
              uint64_t v188 = *((void *)v22 + 4);
              uint64_t v189 = *((void *)v22 + 5);
              BOOL v170 = __OFSUB__(v189, v188);
              uint64_t v181 = v189 - v188;
              char v182 = v170;
              goto LABEL_306;
            }
            uint64_t v161 = *((void *)v22 + 4);
            uint64_t v160 = *((void *)v22 + 5);
            BOOL v170 = __OFSUB__(v160, v161);
            uint64_t v162 = v160 - v161;
            char v163 = v170;
          }
          if (v163) {
            goto LABEL_437;
          }
          unint64_t v171 = v156 - 2;
          uint64_t v177 = &v157[16 * v156 - 32];
          uint64_t v179 = *(void *)v177;
          uint64_t v178 = *((void *)v177 + 1);
          BOOL v180 = __OFSUB__(v178, v179);
          uint64_t v181 = v178 - v179;
          char v182 = v180;
          if (v180) {
            goto LABEL_440;
          }
          long long v183 = &v157[16 * v159];
          uint64_t v185 = *(void *)v183;
          uint64_t v184 = *((void *)v183 + 1);
          BOOL v170 = __OFSUB__(v184, v185);
          uint64_t v186 = v184 - v185;
          if (v170) {
            goto LABEL_443;
          }
          if (__OFADD__(v181, v186)) {
            goto LABEL_444;
          }
          if (v181 + v186 >= v162)
          {
            BOOL v187 = v162 < v186;
LABEL_312:
            if (v187) {
              unint64_t v159 = v171;
            }
            goto LABEL_314;
          }
LABEL_306:
          if (v182) {
            goto LABEL_439;
          }
          long long v190 = &v157[16 * v159];
          uint64_t v192 = *(void *)v190;
          uint64_t v191 = *((void *)v190 + 1);
          BOOL v170 = __OFSUB__(v191, v192);
          uint64_t v193 = v191 - v192;
          if (v170) {
            goto LABEL_442;
          }
          if (v193 < v181)
          {
            uint64_t v22 = v276;
            goto LABEL_323;
          }
LABEL_314:
          Swift::Int v198 = v20;
          unint64_t v199 = v159 - 1;
          if (v159 - 1 >= v156) {
            goto LABEL_425;
          }
          if (!v21) {
            goto LABEL_491;
          }
          v200 = &v157[16 * v199];
          uint64_t v201 = *(void *)v200;
          v202 = &v157[16 * v159];
          uint64_t v203 = *((void *)v202 + 1);
          v204 = (char *)(v21 + 8 * *(void *)v200);
          v205 = (uint64_t *)(v21 + 8 * *(void *)v202);
          LOBYTE(v284) = a10 & 1;
          LOBYTE(v283[0]) = a12 & 1;
          specialized _merge<A>(low:mid:high:buffer:by:)(v204, v205, v21 + 8 * v203, v260, a2, a3, a4, a5, a6, a7, a8, a9, a10 & 1, a11, a12 & 1);
          if (v13) {
            goto LABEL_421;
          }
          if (v203 < v201) {
            goto LABEL_426;
          }
          if (v159 > *((void *)v276 + 2)) {
            goto LABEL_427;
          }
          *(void *)v200 = v201;
          *(void *)&v157[16 * v199 + 8] = v203;
          unint64_t v206 = *((void *)v276 + 2);
          if (v159 >= v206) {
            goto LABEL_428;
          }
          unint64_t v156 = v206 - 1;
          memmove(&v157[16 * v159], v202 + 16, 16 * (v206 - 1 - v159));
          uint64_t v22 = v276;
          *((void *)v276 + 2) = v206 - 1;
          BOOL v152 = v206 > 2;
          uint64_t v21 = v279;
          Swift::Int v20 = v198;
          if (!v152) {
            goto LABEL_323;
          }
        }
      }
      unint64_t v156 = 1;
LABEL_323:
      Swift::Int v15 = v253;
      if (v20 >= v253) {
        goto LABEL_410;
      }
      goto LABEL_13;
    }
LABEL_27:
    Swift::Int v32 = v30 + 1;
    Swift::Int v20 = v30;
  }
  while (v30 + 1 < v15);
  ++v30;
LABEL_162:
  Swift::Int v23 = v259;
LABEL_163:
  Swift::Int v20 = v30;
  if (!v31)
  {
LABEL_188:
    if (v20 >= v15) {
      goto LABEL_20;
    }
    goto LABEL_189;
  }
  if (v30 >= v23) {
    goto LABEL_180;
  }
LABEL_455:
  __break(1u);
LABEL_456:
  __break(1u);
LABEL_457:
  __break(1u);
LABEL_458:
  __break(1u);
LABEL_459:
  __break(1u);
LABEL_460:
  __break(1u);
LABEL_461:
  __break(1u);
LABEL_462:
  __break(1u);
LABEL_463:
  __break(1u);
LABEL_464:
  __break(1u);
LABEL_465:
  __break(1u);
LABEL_466:
  __break(1u);
LABEL_467:
  __break(1u);
LABEL_468:
  __break(1u);
LABEL_469:
  __break(1u);
LABEL_470:
  __break(1u);
LABEL_471:
  __break(1u);
LABEL_472:
  __break(1u);
LABEL_473:
  __break(1u);
LABEL_474:
  __break(1u);
LABEL_475:
  __break(1u);
LABEL_476:
  __break(1u);
LABEL_477:
  __break(1u);
LABEL_478:
  __break(1u);
LABEL_479:
  __break(1u);
LABEL_480:
  __break(1u);
LABEL_481:
  __break(1u);
LABEL_482:
  __break(1u);
LABEL_483:
  __break(1u);
LABEL_484:
  __break(1u);
LABEL_485:
  __break(1u);
LABEL_486:
  __break(1u);
LABEL_487:
  __break(1u);
LABEL_488:
  __break(1u);
LABEL_489:
  __break(1u);
LABEL_490:
  __break(1u);
LABEL_491:
  __break(1u);
LABEL_492:
  __break(1u);
LABEL_493:
  __break(1u);
LABEL_494:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_495:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  uint64_t v70 = result;
  if (a3 == a2) {
    return result;
  }
  int v79 = *MEMORY[0x263F288F8];
  uint64_t v82 = *a4;
  Swift::Int v15 = (uint64_t *)(*a4 + 8 * a3 - 8);
LABEL_5:
  unint64_t v16 = *(void *)(v82 + 8 * a3);
  uint64_t v17 = v70;
  uint64_t v71 = v15;
  uint64_t v78 = a3;
  while (1)
  {
    uint64_t v18 = 120 * v16;
    if ((unsigned __int128)((uint64_t)v16 * (__int128)120) >> 64 != (uint64_t)(120 * v16) >> 63) {
      break;
    }
    unint64_t v19 = *v15;
    uint64_t v20 = 120 * *v15;
    if ((unsigned __int128)(*v15 * (__int128)120) >> 64 != v20 >> 63) {
      goto LABEL_133;
    }
    double v21 = *(double *)(a5 + 120 * v16);
    double v22 = *(double *)(a5 + v20);
    if (v22 < v21) {
      goto LABEL_129;
    }
    if (v21 < v22) {
      goto LABEL_4;
    }
    uint64_t v23 = a7 + v18;
    if (*(unsigned char *)(a7 + v18 + 8))
    {
      uint64_t v24 = *(unsigned __int8 *)(a9 + 17);
      if (*(unsigned char *)(a9 + 17)) {
        uint64_t v25 = a12;
      }
      else {
        uint64_t v25 = 0;
      }
      if (*(unsigned char *)(a9 + 17)) {
        uint64_t v26 = 0;
      }
      else {
        uint64_t v26 = a14;
      }
      uint64_t v27 = *(void *)(a9 + 88);
      if (*(unsigned char *)(a9 + 96))
      {
        if ((v16 & 0x8000000000000000) != 0) {
          goto LABEL_135;
        }
        if (v16 >= *(void *)(v27 + 16)) {
          goto LABEL_136;
        }
        uint64_t v28 = v27 + 12 * v16;
      }
      else
      {
        if ((v16 & 0x8000000000000000) != 0) {
          goto LABEL_134;
        }
        if (v16 >= *(void *)(v27 + 16)) {
          goto LABEL_138;
        }
        uint64_t v28 = v27 + 8 * v16;
      }
      uint64_t v72 = v25;
      uint64_t v75 = v26;
      if (*(_DWORD *)(v28 + 32) == v79)
      {
        Inputuint64_t Value = (uint64_t *)&static LayoutComputer.defaultValue;
        if (one-time initialization token for defaultValue != -1)
        {
          swift_once();
          Inputuint64_t Value = (uint64_t *)&static LayoutComputer.defaultValue;
        }
      }
      else
      {
        Inputuint64_t Value = (uint64_t *)AGGraphGetInputValue();
      }
      uint64_t v37 = *InputValue;
      uint64_t v38 = one-time initialization token for lockAssertionsAreEnabled;
      swift_retain();
      if (v38 != -1) {
        swift_once();
      }
      if (lockAssertionsAreEnabled)
      {
        if (one-time initialization token for _lock != -1) {
          swift_once();
        }
        if (!_MovableLockIsOwner(static Update._lock)) {
          goto LABEL_151;
        }
      }
      uint64_t v83 = v72;
      char v84 = v24 & a13;
      uint64_t v85 = v75;
      char v86 = (v24 ^ 1) & a15;
      double v29 = (*(double (**)(uint64_t *, uint64_t))(*(void *)v37 + 128))(&v83, v24);
      Swift::Int result = swift_release();
      *(double *)uint64_t v23 = v29;
      *(unsigned char *)(v23 + 8) = 0;
      if ((*(unsigned char *)(v23 + 24) & 1) == 0)
      {
LABEL_52:
        double v39 = *(double *)(v23 + 16);
        goto LABEL_61;
      }
    }
    else
    {
      double v29 = *(double *)v23;
      if ((*(unsigned char *)(v23 + 24) & 1) == 0) {
        goto LABEL_52;
      }
    }
    uint64_t v30 = *(unsigned __int8 *)(a9 + 17);
    if (*(unsigned char *)(a9 + 17)) {
      uint64_t v31 = a12;
    }
    else {
      uint64_t v31 = 0x7FF0000000000000;
    }
    if (*(unsigned char *)(a9 + 17)) {
      uint64_t v32 = 0x7FF0000000000000;
    }
    else {
      uint64_t v32 = a14;
    }
    uint64_t v33 = *(void *)(a9 + 88);
    uint64_t v74 = v31;
    if (*(unsigned char *)(a9 + 96))
    {
      if ((v16 & 0x8000000000000000) != 0) {
        goto LABEL_137;
      }
      if (v16 >= *(void *)(v33 + 16)) {
        goto LABEL_142;
      }
      uint64_t v34 = v33 + 12 * v16;
    }
    else
    {
      if ((v16 & 0x8000000000000000) != 0) {
        goto LABEL_139;
      }
      if (v16 >= *(void *)(v33 + 16)) {
        goto LABEL_143;
      }
      uint64_t v34 = v33 + 8 * v16;
    }
    uint64_t v73 = v32;
    if (*(_DWORD *)(v34 + 32) == v79)
    {
      double v36 = (uint64_t *)&static LayoutComputer.defaultValue;
      if (one-time initialization token for defaultValue != -1)
      {
        swift_once();
        double v36 = (uint64_t *)&static LayoutComputer.defaultValue;
      }
    }
    else
    {
      double v36 = (uint64_t *)AGGraphGetInputValue();
    }
    uint64_t v40 = *v36;
    uint64_t v41 = one-time initialization token for lockAssertionsAreEnabled;
    swift_retain();
    if (v41 != -1) {
      swift_once();
    }
    if (lockAssertionsAreEnabled)
    {
      if (one-time initialization token for _lock != -1) {
        swift_once();
      }
      if (!_MovableLockIsOwner(static Update._lock)) {
        goto LABEL_151;
      }
    }
    uint64_t v83 = v74;
    char v84 = v30 & a13;
    uint64_t v85 = v73;
    char v86 = (v30 ^ 1) & a15;
    double v39 = (*(double (**)(uint64_t *, uint64_t))(*(void *)v40 + 128))(&v83, v30);
    Swift::Int result = swift_release();
    *(double *)(v23 + 16) = v39;
    *(unsigned char *)(v23 + 24) = 0;
LABEL_61:
    uint64_t v42 = a7 + v20;
    if (*(unsigned char *)(v42 + 8))
    {
      uint64_t v43 = *(unsigned __int8 *)(a9 + 17);
      if (*(unsigned char *)(a9 + 17)) {
        uint64_t v44 = a12;
      }
      else {
        uint64_t v44 = 0;
      }
      if (*(unsigned char *)(a9 + 17)) {
        uint64_t v45 = 0;
      }
      else {
        uint64_t v45 = a14;
      }
      uint64_t v46 = *(void *)(a9 + 88);
      if (*(unsigned char *)(a9 + 96))
      {
        if ((v19 & 0x8000000000000000) != 0) {
          goto LABEL_140;
        }
        if (v19 >= *(void *)(v46 + 16)) {
          goto LABEL_144;
        }
        uint64_t v47 = v46 + 12 * v19;
      }
      else
      {
        if ((v19 & 0x8000000000000000) != 0) {
          goto LABEL_141;
        }
        if (v19 >= *(void *)(v46 + 16)) {
          goto LABEL_145;
        }
        uint64_t v47 = v46 + 8 * v19;
      }
      uint64_t v76 = v44;
      if (*(_DWORD *)(v47 + 32) == v79)
      {
        uint64_t v49 = (uint64_t *)&static LayoutComputer.defaultValue;
        if (one-time initialization token for defaultValue != -1)
        {
          swift_once();
          uint64_t v49 = (uint64_t *)&static LayoutComputer.defaultValue;
        }
      }
      else
      {
        uint64_t v49 = (uint64_t *)AGGraphGetInputValue();
      }
      uint64_t v50 = *v49;
      uint64_t v51 = one-time initialization token for lockAssertionsAreEnabled;
      swift_retain();
      if (v51 != -1) {
        swift_once();
      }
      if (lockAssertionsAreEnabled)
      {
        if (one-time initialization token for _lock != -1) {
          swift_once();
        }
        if (!_MovableLockIsOwner(static Update._lock)) {
          goto LABEL_151;
        }
      }
      uint64_t v83 = v76;
      char v84 = v43 & a13;
      uint64_t v85 = v45;
      char v86 = (v43 ^ 1) & a15;
      double v48 = (*(double (**)(uint64_t *, uint64_t))(*(void *)v50 + 128))(&v83, v43);
      Swift::Int result = swift_release();
      *(double *)uint64_t v42 = v48;
      *(unsigned char *)(v42 + 8) = 0;
    }
    else
    {
      double v48 = *(double *)v42;
    }
    a3 = v78;
    if (*(unsigned char *)(v42 + 24))
    {
      uint64_t v52 = *(unsigned __int8 *)(a9 + 17);
      if (*(unsigned char *)(a9 + 17)) {
        uint64_t v53 = a12;
      }
      else {
        uint64_t v53 = 0x7FF0000000000000;
      }
      if (*(unsigned char *)(a9 + 17)) {
        uint64_t v54 = 0x7FF0000000000000;
      }
      else {
        uint64_t v54 = a14;
      }
      uint64_t v55 = *(void *)(a9 + 88);
      if (*(unsigned char *)(a9 + 96))
      {
        if ((v19 & 0x8000000000000000) != 0) {
          goto LABEL_146;
        }
        if (v19 >= *(void *)(v55 + 16)) {
          goto LABEL_148;
        }
        uint64_t v56 = v55 + 12 * v19;
      }
      else
      {
        if ((v19 & 0x8000000000000000) != 0) {
          goto LABEL_147;
        }
        if (v19 >= *(void *)(v55 + 16)) {
          goto LABEL_149;
        }
        uint64_t v56 = v55 + 8 * v19;
      }
      uint64_t v77 = v53;
      if (*(_DWORD *)(v56 + 32) == v79)
      {
        uint64_t v58 = (uint64_t *)&static LayoutComputer.defaultValue;
        if (one-time initialization token for defaultValue != -1)
        {
          swift_once();
          uint64_t v58 = (uint64_t *)&static LayoutComputer.defaultValue;
        }
      }
      else
      {
        uint64_t v58 = (uint64_t *)AGGraphGetInputValue();
      }
      uint64_t v59 = *v58;
      uint64_t v60 = one-time initialization token for lockAssertionsAreEnabled;
      swift_retain();
      if (v60 != -1) {
        swift_once();
      }
      if (lockAssertionsAreEnabled)
      {
        if (one-time initialization token for _lock != -1) {
          swift_once();
        }
        if (!_MovableLockIsOwner(static Update._lock)) {
          goto LABEL_151;
        }
      }
      uint64_t v83 = v77;
      char v84 = v52 & a13;
      uint64_t v85 = v54;
      char v86 = (v52 ^ 1) & a15;
      double v57 = (*(double (**)(uint64_t *, uint64_t))(*(void *)v59 + 128))(&v83, v52);
      Swift::Int result = swift_release();
      *(double *)(v42 + 16) = v57;
      *(unsigned char *)(v42 + 24) = 0;
      a3 = v78;
    }
    else
    {
      double v57 = *(double *)(v42 + 16);
    }
    double v61 = v39 - v29;
    if (v39 - v29 == INFINITY) {
      double v62 = -v29;
    }
    else {
      double v62 = 0.0;
    }
    double v63 = v57 - v48;
    if (v57 - v48 == INFINITY) {
      double v64 = -v48;
    }
    else {
      double v64 = 0.0;
    }
    BOOL v65 = v62 < v64;
    if (v61 != v63) {
      BOOL v65 = v61 < v63;
    }
    if (!v65)
    {
      BOOL v66 = v63 >= v61;
      if (v61 == v63) {
        BOOL v66 = v64 >= v62;
      }
      if (!v66 || (uint64_t)v16 >= (uint64_t)v19)
      {
LABEL_4:
        ++a3;
        Swift::Int v15 = v71 + 1;
        if (a3 == a2) {
          return result;
        }
        goto LABEL_5;
      }
    }
LABEL_129:
    if (!v82) {
      goto LABEL_150;
    }
    uint64_t v68 = *v15;
    unint64_t v16 = v15[1];
    uint64_t *v15 = v16;
    v15[1] = v68;
    --v15;
    if (a3 == ++v17) {
      goto LABEL_4;
    }
  }
  __break(1u);
LABEL_133:
  __break(1u);
LABEL_134:
  __break(1u);
LABEL_135:
  __break(1u);
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  __break(1u);
LABEL_151:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *a1, uint64_t *__src, unint64_t a3, char *__dst, uint64_t a5, int a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  unint64_t v15 = a3;
  unint64_t v16 = __src;
  uint64_t v17 = (char *)__src - a1;
  uint64_t v18 = (char *)__src - a1 + 7;
  if ((char *)__src - a1 >= 0) {
    uint64_t v18 = (char *)__src - a1;
  }
  uint64_t v19 = v18 >> 3;
  uint64_t v20 = a3 - (void)__src;
  uint64_t v21 = a3 - (void)__src + 7;
  if ((uint64_t)(a3 - (void)__src) >= 0) {
    uint64_t v21 = a3 - (void)__src;
  }
  uint64_t v22 = v21 >> 3;
  uint64_t v158 = __dst;
  unint64_t v159 = (uint64_t *)a1;
  uint64_t v148 = a5;
  double v149 = __dst;
  __srca = a1;
  if (v19 < v21 >> 3)
  {
    if (v17 < -7) {
      goto LABEL_324;
    }
    if (__dst != a1 || &a1[8 * v19] <= __dst)
    {
      memmove(__dst, a1, 8 * v19);
      __dst = v149;
      a1 = __srca;
      a5 = v148;
    }
    uint64_t v23 = &__dst[8 * v19];
    uint64_t v157 = v23;
    if (v17 >= 8 && (unint64_t)v16 < v15)
    {
      int v145 = *MEMORY[0x263F288F8];
      char v144 = &__dst[8 * v19];
      unint64_t v138 = v15;
      while (1)
      {
        unint64_t v24 = *v16;
        uint64_t v25 = 120 * *v16;
        if ((unsigned __int128)(*v16 * (__int128)120) >> 64 != v25 >> 63) {
          goto LABEL_289;
        }
        unint64_t v26 = *(void *)__dst;
        uint64_t v27 = 120 * *(void *)__dst;
        if ((unsigned __int128)(*(uint64_t *)__dst * (__int128)120) >> 64 != v27 >> 63) {
          goto LABEL_290;
        }
        double v28 = *(double *)(a5 + v25);
        double v29 = *(double *)(a5 + v27);
        if (v29 < v28) {
          goto LABEL_16;
        }
        if (v28 < v29) {
          goto LABEL_21;
        }
        uint64_t v31 = a7 + v25;
        BOOL v150 = __dst;
        __srcb = a1;
        if (*(unsigned char *)(a7 + v25 + 8))
        {
          uint64_t v32 = *(unsigned __int8 *)(a9 + 17);
          if (*(unsigned char *)(a9 + 17)) {
            uint64_t v33 = a12;
          }
          else {
            uint64_t v33 = 0;
          }
          if (*(unsigned char *)(a9 + 17)) {
            uint64_t v34 = 0;
          }
          else {
            uint64_t v34 = a14;
          }
          uint64_t v35 = *(void *)(a9 + 88);
          if (*(unsigned char *)(a9 + 96))
          {
            if ((v24 & 0x8000000000000000) != 0) {
              goto LABEL_307;
            }
            if (v24 >= *(void *)(v35 + 16)) {
              goto LABEL_309;
            }
            uint64_t v36 = v35 + 12 * v24;
          }
          else
          {
            if ((v24 & 0x8000000000000000) != 0) {
              goto LABEL_308;
            }
            if (v24 >= *(void *)(v35 + 16)) {
              goto LABEL_311;
            }
            uint64_t v36 = v35 + 8 * v24;
          }
          uint64_t v142 = v33;
          if (*(_DWORD *)(v36 + 32) == v145)
          {
            Inputuint64_t Value = (uint64_t *)&static LayoutComputer.defaultValue;
            if (one-time initialization token for defaultValue != -1)
            {
              swift_once();
              Inputuint64_t Value = (uint64_t *)&static LayoutComputer.defaultValue;
            }
          }
          else
          {
            Inputuint64_t Value = (uint64_t *)AGGraphGetInputValue();
          }
          uint64_t v45 = *InputValue;
          uint64_t v46 = one-time initialization token for lockAssertionsAreEnabled;
          swift_retain();
          if (v46 != -1) {
            swift_once();
          }
          if (lockAssertionsAreEnabled)
          {
            if (one-time initialization token for _lock != -1) {
              swift_once();
            }
            if (!_MovableLockIsOwner(static Update._lock)) {
              goto LABEL_323;
            }
          }
          uint64_t v153 = v142;
          char v154 = v32 & a13;
          uint64_t v155 = v34;
          char v156 = (v32 ^ 1) & a15;
          double v37 = (*(double (**)(uint64_t *, uint64_t))(*(void *)v45 + 128))(&v153, v32);
          swift_release();
          *(double *)uint64_t v31 = v37;
          *(unsigned char *)(v31 + 8) = 0;
          a5 = v148;
          __dst = v150;
          a1 = __srcb;
          if ((*(unsigned char *)(v31 + 24) & 1) == 0)
          {
LABEL_69:
            double v47 = *(double *)(v31 + 16);
            goto LABEL_78;
          }
        }
        else
        {
          double v37 = *(double *)v31;
          if ((*(unsigned char *)(v31 + 24) & 1) == 0) {
            goto LABEL_69;
          }
        }
        uint64_t v38 = *(unsigned __int8 *)(a9 + 17);
        if (*(unsigned char *)(a9 + 17)) {
          uint64_t v39 = a12;
        }
        else {
          uint64_t v39 = 0x7FF0000000000000;
        }
        if (*(unsigned char *)(a9 + 17)) {
          uint64_t v40 = 0x7FF0000000000000;
        }
        else {
          uint64_t v40 = a14;
        }
        uint64_t v41 = *(void *)(a9 + 88);
        if (*(unsigned char *)(a9 + 96))
        {
          if ((v24 & 0x8000000000000000) != 0) {
            goto LABEL_310;
          }
          if (v24 >= *(void *)(v41 + 16)) {
            goto LABEL_315;
          }
          uint64_t v42 = v41 + 12 * v24;
        }
        else
        {
          if ((v24 & 0x8000000000000000) != 0) {
            goto LABEL_312;
          }
          if (v24 >= *(void *)(v41 + 16)) {
            goto LABEL_313;
          }
          uint64_t v42 = v41 + 8 * v24;
        }
        if (*(_DWORD *)(v42 + 32) == v145)
        {
          uint64_t v44 = (uint64_t *)&static LayoutComputer.defaultValue;
          if (one-time initialization token for defaultValue != -1)
          {
            swift_once();
            uint64_t v44 = (uint64_t *)&static LayoutComputer.defaultValue;
          }
        }
        else
        {
          uint64_t v44 = (uint64_t *)AGGraphGetInputValue();
        }
        uint64_t v48 = *v44;
        uint64_t v49 = one-time initialization token for lockAssertionsAreEnabled;
        swift_retain();
        if (v49 != -1) {
          swift_once();
        }
        if (lockAssertionsAreEnabled)
        {
          if (one-time initialization token for _lock != -1) {
            swift_once();
          }
          if (!_MovableLockIsOwner(static Update._lock)) {
            goto LABEL_323;
          }
        }
        uint64_t v153 = v39;
        char v154 = v38 & a13;
        uint64_t v155 = v40;
        char v156 = (v38 ^ 1) & a15;
        double v47 = (*(double (**)(uint64_t *, uint64_t))(*(void *)v48 + 128))(&v153, v38);
        swift_release();
        *(double *)(v31 + 16) = v47;
        *(unsigned char *)(v31 + 24) = 0;
        a5 = v148;
        __dst = v150;
        a1 = __srcb;
        unint64_t v15 = v138;
LABEL_78:
        uint64_t v50 = a7 + v27;
        if (*(unsigned char *)(v50 + 8))
        {
          uint64_t v51 = *(unsigned __int8 *)(a9 + 17);
          if (*(unsigned char *)(a9 + 17)) {
            uint64_t v52 = a12;
          }
          else {
            uint64_t v52 = 0;
          }
          if (*(unsigned char *)(a9 + 17)) {
            uint64_t v53 = 0;
          }
          else {
            uint64_t v53 = a14;
          }
          uint64_t v54 = *(void *)(a9 + 88);
          if (*(unsigned char *)(a9 + 96))
          {
            if ((v26 & 0x8000000000000000) != 0) {
              goto LABEL_316;
            }
            if (v26 >= *(void *)(v54 + 16)) {
              goto LABEL_319;
            }
            uint64_t v55 = v54 + 12 * v26;
          }
          else
          {
            if ((v26 & 0x8000000000000000) != 0) {
              goto LABEL_314;
            }
            if (v26 >= *(void *)(v54 + 16)) {
              goto LABEL_318;
            }
            uint64_t v55 = v54 + 8 * v26;
          }
          if (*(_DWORD *)(v55 + 32) == v145)
          {
            double v57 = (uint64_t *)&static LayoutComputer.defaultValue;
            if (one-time initialization token for defaultValue != -1)
            {
              swift_once();
              double v57 = (uint64_t *)&static LayoutComputer.defaultValue;
            }
          }
          else
          {
            double v57 = (uint64_t *)AGGraphGetInputValue();
          }
          uint64_t v58 = *v57;
          uint64_t v59 = one-time initialization token for lockAssertionsAreEnabled;
          swift_retain();
          if (v59 != -1) {
            swift_once();
          }
          if (lockAssertionsAreEnabled)
          {
            if (one-time initialization token for _lock != -1) {
              swift_once();
            }
            if (!_MovableLockIsOwner(static Update._lock)) {
              goto LABEL_323;
            }
          }
          uint64_t v153 = v52;
          char v154 = v51 & a13;
          uint64_t v155 = v53;
          char v156 = (v51 ^ 1) & a15;
          double v56 = (*(double (**)(uint64_t *, uint64_t))(*(void *)v58 + 128))(&v153, v51);
          swift_release();
          *(double *)uint64_t v50 = v56;
          *(unsigned char *)(v50 + 8) = 0;
          a5 = v148;
          __dst = v150;
          a1 = __srcb;
        }
        else
        {
          double v56 = *(double *)v50;
        }
        uint64_t v23 = v144;
        if (*(unsigned char *)(v50 + 24))
        {
          uint64_t v60 = *(unsigned __int8 *)(a9 + 17);
          if (*(unsigned char *)(a9 + 17)) {
            uint64_t v61 = a12;
          }
          else {
            uint64_t v61 = 0x7FF0000000000000;
          }
          if (*(unsigned char *)(a9 + 17)) {
            uint64_t v62 = 0x7FF0000000000000;
          }
          else {
            uint64_t v62 = a14;
          }
          uint64_t v63 = *(void *)(a9 + 88);
          if (*(unsigned char *)(a9 + 96))
          {
            if ((v26 & 0x8000000000000000) != 0) {
              goto LABEL_317;
            }
            if (v26 >= *(void *)(v63 + 16)) {
              goto LABEL_322;
            }
            uint64_t v64 = v63 + 12 * v26;
          }
          else
          {
            if ((v26 & 0x8000000000000000) != 0) {
              goto LABEL_320;
            }
            if (v26 >= *(void *)(v63 + 16)) {
              goto LABEL_321;
            }
            uint64_t v64 = v63 + 8 * v26;
          }
          if (*(_DWORD *)(v64 + 32) == v145)
          {
            BOOL v66 = (uint64_t *)&static LayoutComputer.defaultValue;
            if (one-time initialization token for defaultValue != -1)
            {
              swift_once();
              BOOL v66 = (uint64_t *)&static LayoutComputer.defaultValue;
            }
          }
          else
          {
            BOOL v66 = (uint64_t *)AGGraphGetInputValue();
          }
          uint64_t v67 = *v66;
          uint64_t v68 = one-time initialization token for lockAssertionsAreEnabled;
          swift_retain();
          if (v68 != -1) {
            swift_once();
          }
          if (lockAssertionsAreEnabled)
          {
            if (one-time initialization token for _lock != -1) {
              swift_once();
            }
            if (!_MovableLockIsOwner(static Update._lock)) {
              goto LABEL_323;
            }
          }
          uint64_t v153 = v61;
          char v154 = v60 & a13;
          uint64_t v155 = v62;
          char v156 = (v60 ^ 1) & a15;
          double v65 = (*(double (**)(uint64_t *, uint64_t))(*(void *)v67 + 128))(&v153, v60);
          swift_release();
          *(double *)(v50 + 16) = v65;
          *(unsigned char *)(v50 + 24) = 0;
          a5 = v148;
          __dst = v150;
          a1 = __srcb;
          uint64_t v23 = v144;
        }
        else
        {
          double v65 = *(double *)(v50 + 16);
        }
        double v69 = v47 - v37;
        if (v47 - v37 == INFINITY) {
          double v70 = -v37;
        }
        else {
          double v70 = 0.0;
        }
        double v71 = v65 - v56;
        if (v65 - v56 == INFINITY) {
          double v72 = -v56;
        }
        else {
          double v72 = 0.0;
        }
        BOOL v73 = v70 < v72;
        if (v69 != v71) {
          BOOL v73 = v69 < v71;
        }
        if (!v73)
        {
          BOOL v74 = v71 >= v69;
          if (v69 == v71) {
            BOOL v74 = v72 >= v70;
          }
          if (!v74 || (uint64_t)v24 >= (uint64_t)v26)
          {
LABEL_21:
            if (a1 != __dst) {
              *(void *)a1 = *(void *)__dst;
            }
            __dst += 8;
            uint64_t v158 = __dst;
            uint64_t v30 = v16;
            goto LABEL_24;
          }
        }
LABEL_16:
        uint64_t v30 = v16 + 1;
        if (a1 < (char *)v16 || a1 >= (char *)v30 || a1 != (char *)v16) {
          *(void *)a1 = *v16;
        }
LABEL_24:
        a1 += 8;
        if (__dst < v23)
        {
          unint64_t v16 = v30;
          if ((unint64_t)v30 < v15) {
            continue;
          }
        }
        unint64_t v159 = (uint64_t *)a1;
        break;
      }
    }
LABEL_286:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v159, (const void **)&v158, &v157);
    return 1;
  }
  if (v20 < -7) {
    goto LABEL_324;
  }
  if (__dst != (char *)__src || &__src[v22] <= (uint64_t *)__dst)
  {
    memmove(__dst, __src, 8 * v22);
    __dst = v149;
    a1 = __srca;
    a5 = v148;
  }
  uint64_t v76 = &__dst[8 * v22];
  uint64_t v157 = v76;
  unint64_t v159 = v16;
  if (v20 < 8 || a1 >= (char *)v16) {
    goto LABEL_286;
  }
  int v143 = *MEMORY[0x263F288F8];
  uint64_t v77 = (void *)(v15 - 8);
  while (1)
  {
    uint64_t v78 = v76 - 8;
    unint64_t v79 = *((void *)v76 - 1);
    uint64_t v80 = 120 * v79;
    if ((unsigned __int128)((uint64_t)v79 * (__int128)120) >> 64 != (uint64_t)(120 * v79) >> 63) {
      break;
    }
    uint64_t v82 = v16 - 1;
    unint64_t v81 = *(v16 - 1);
    if ((unsigned __int128)((uint64_t)v81 * (__int128)120) >> 64 != (uint64_t)(120 * v81) >> 63) {
      goto LABEL_288;
    }
    uint64_t v83 = v77 + 1;
    double v84 = *(double *)(a5 + 120 * v79);
    double v85 = *(double *)(a5 + 120 * v81);
    if (v85 < v84)
    {
LABEL_156:
      if (v83 != v16 || v77 >= v16) {
        *uint64_t v77 = *v82;
      }
      unint64_t v159 = v16 - 1;
      if (v76 <= __dst) {
        goto LABEL_286;
      }
      goto LABEL_167;
    }
    if (v84 >= v85)
    {
      double v146 = v76;
      uint64_t v86 = a7 + v80;
      uint64_t v139 = a7 + v80;
      if (*(unsigned char *)(a7 + v80 + 8))
      {
        uint64_t v87 = *(unsigned __int8 *)(a9 + 17);
        if (*(unsigned char *)(a9 + 17)) {
          uint64_t v88 = a12;
        }
        else {
          uint64_t v88 = 0;
        }
        if (*(unsigned char *)(a9 + 17)) {
          uint64_t v89 = 0;
        }
        else {
          uint64_t v89 = a14;
        }
        uint64_t v90 = *(void *)(a9 + 88);
        if (*(unsigned char *)(a9 + 96))
        {
          if ((v79 & 0x8000000000000000) != 0) {
            goto LABEL_291;
          }
          if (v79 >= *(void *)(v90 + 16)) {
            goto LABEL_293;
          }
          uint64_t v91 = v90 + 12 * v79;
        }
        else
        {
          if ((v79 & 0x8000000000000000) != 0) {
            goto LABEL_292;
          }
          if (v79 >= *(void *)(v90 + 16)) {
            goto LABEL_295;
          }
          uint64_t v91 = v90 + 8 * v79;
        }
        uint64_t v132 = v88;
        uint64_t v134 = v89;
        if (*(_DWORD *)(v91 + 32) == v143)
        {
          Swift::Int v98 = (uint64_t *)&static LayoutComputer.defaultValue;
          if (one-time initialization token for defaultValue != -1)
          {
            swift_once();
            Swift::Int v98 = (uint64_t *)&static LayoutComputer.defaultValue;
          }
        }
        else
        {
          Swift::Int v98 = (uint64_t *)AGGraphGetInputValue();
        }
        uint64_t v100 = *v98;
        uint64_t v101 = one-time initialization token for lockAssertionsAreEnabled;
        swift_retain();
        if (v101 != -1) {
          swift_once();
        }
        if (lockAssertionsAreEnabled)
        {
          if (one-time initialization token for _lock != -1) {
            swift_once();
          }
          if (!_MovableLockIsOwner(static Update._lock)) {
            goto LABEL_323;
          }
        }
        uint64_t v153 = v132;
        char v154 = v87 & a13;
        uint64_t v155 = v134;
        char v156 = (v87 ^ 1) & a15;
        double v92 = (*(double (**)(uint64_t *, uint64_t))(*(void *)v100 + 128))(&v153, v87);
        swift_release();
        uint64_t v86 = v139;
        *(double *)uint64_t v139 = v92;
        *(unsigned char *)(v139 + 8) = 0;
        a5 = v148;
        __dst = v149;
        a1 = __srca;
        uint64_t v76 = v146;
        if ((*(unsigned char *)(v139 + 24) & 1) == 0)
        {
LABEL_210:
          double v102 = *(double *)(v86 + 16);
          goto LABEL_219;
        }
      }
      else
      {
        double v92 = *(double *)v86;
        if ((*(unsigned char *)(v86 + 24) & 1) == 0) {
          goto LABEL_210;
        }
      }
      uint64_t v93 = *(unsigned __int8 *)(a9 + 17);
      uint64_t v94 = 0x7FF0000000000000;
      if (*(unsigned char *)(a9 + 17)) {
        uint64_t v95 = a12;
      }
      else {
        uint64_t v95 = 0x7FF0000000000000;
      }
      if (!*(unsigned char *)(a9 + 17)) {
        uint64_t v94 = a14;
      }
      uint64_t v96 = *(void *)(a9 + 88);
      if (*(unsigned char *)(a9 + 96))
      {
        if ((v79 & 0x8000000000000000) != 0) {
          goto LABEL_294;
        }
        if (v79 >= *(void *)(v96 + 16)) {
          goto LABEL_299;
        }
        uint64_t v97 = v96 + 12 * v79;
      }
      else
      {
        if ((v79 & 0x8000000000000000) != 0) {
          goto LABEL_296;
        }
        if (v79 >= *(void *)(v96 + 16)) {
          goto LABEL_300;
        }
        uint64_t v97 = v96 + 8 * v79;
      }
      uint64_t v133 = v95;
      uint64_t v135 = v94;
      if (*(_DWORD *)(v97 + 32) == v143)
      {
        unint64_t v99 = (uint64_t *)&static LayoutComputer.defaultValue;
        if (one-time initialization token for defaultValue != -1)
        {
          swift_once();
          unint64_t v99 = (uint64_t *)&static LayoutComputer.defaultValue;
        }
      }
      else
      {
        unint64_t v99 = (uint64_t *)AGGraphGetInputValue();
      }
      uint64_t v103 = *v99;
      uint64_t v104 = one-time initialization token for lockAssertionsAreEnabled;
      swift_retain();
      if (v104 != -1) {
        swift_once();
      }
      if (lockAssertionsAreEnabled)
      {
        if (one-time initialization token for _lock != -1) {
          swift_once();
        }
        if (!_MovableLockIsOwner(static Update._lock)) {
          goto LABEL_323;
        }
      }
      uint64_t v153 = v133;
      char v154 = v93 & a13;
      uint64_t v155 = v135;
      char v156 = (v93 ^ 1) & a15;
      double v102 = (*(double (**)(uint64_t *, uint64_t))(*(void *)v103 + 128))(&v153, v93);
      swift_release();
      *(double *)(v139 + 16) = v102;
      *(unsigned char *)(v139 + 24) = 0;
      a5 = v148;
      __dst = v149;
      a1 = __srca;
      uint64_t v76 = v146;
LABEL_219:
      uint64_t v105 = a7 + 120 * v81;
      if (*(unsigned char *)(v105 + 8))
      {
        uint64_t v106 = *(unsigned __int8 *)(a9 + 17);
        if (*(unsigned char *)(a9 + 17)) {
          uint64_t v107 = a12;
        }
        else {
          uint64_t v107 = 0;
        }
        if (*(unsigned char *)(a9 + 17)) {
          uint64_t v108 = 0;
        }
        else {
          uint64_t v108 = a14;
        }
        uint64_t v109 = *(void *)(a9 + 88);
        uint64_t v140 = v107;
        if (*(unsigned char *)(a9 + 96))
        {
          if ((v81 & 0x8000000000000000) != 0) {
            goto LABEL_297;
          }
          if (v81 >= *(void *)(v109 + 16)) {
            goto LABEL_301;
          }
          uint64_t v110 = v109 + 12 * v81;
        }
        else
        {
          if ((v81 & 0x8000000000000000) != 0) {
            goto LABEL_298;
          }
          if (v81 >= *(void *)(v109 + 16)) {
            goto LABEL_303;
          }
          uint64_t v110 = v109 + 8 * v81;
        }
        uint64_t v136 = v108;
        if (*(_DWORD *)(v110 + 32) == v143)
        {
          uint64_t v117 = (uint64_t *)&static LayoutComputer.defaultValue;
          if (one-time initialization token for defaultValue != -1)
          {
            swift_once();
            uint64_t v117 = (uint64_t *)&static LayoutComputer.defaultValue;
          }
        }
        else
        {
          uint64_t v117 = (uint64_t *)AGGraphGetInputValue();
        }
        uint64_t v119 = *v117;
        uint64_t v120 = one-time initialization token for lockAssertionsAreEnabled;
        swift_retain();
        if (v120 != -1) {
          swift_once();
        }
        if (lockAssertionsAreEnabled)
        {
          if (one-time initialization token for _lock != -1) {
            swift_once();
          }
          if (!_MovableLockIsOwner(static Update._lock)) {
            goto LABEL_323;
          }
        }
        uint64_t v153 = v140;
        char v154 = v106 & a13;
        uint64_t v155 = v136;
        char v156 = (v106 ^ 1) & a15;
        double v111 = (*(double (**)(uint64_t *, uint64_t))(*(void *)v119 + 128))(&v153, v106);
        swift_release();
        *(double *)uint64_t v105 = v111;
        *(unsigned char *)(v105 + 8) = 0;
        a5 = v148;
        __dst = v149;
        a1 = __srca;
        uint64_t v76 = v146;
        if ((*(unsigned char *)(v105 + 24) & 1) == 0)
        {
LABEL_260:
          double v121 = *(double *)(v105 + 16);
          goto LABEL_269;
        }
      }
      else
      {
        double v111 = *(double *)v105;
        if ((*(unsigned char *)(v105 + 24) & 1) == 0) {
          goto LABEL_260;
        }
      }
      uint64_t v112 = *(unsigned __int8 *)(a9 + 17);
      uint64_t v113 = 0x7FF0000000000000;
      if (*(unsigned char *)(a9 + 17)) {
        uint64_t v114 = a12;
      }
      else {
        uint64_t v114 = 0x7FF0000000000000;
      }
      if (!*(unsigned char *)(a9 + 17)) {
        uint64_t v113 = a14;
      }
      uint64_t v115 = *(void *)(a9 + 88);
      if (*(unsigned char *)(a9 + 96))
      {
        if ((v81 & 0x8000000000000000) != 0) {
          goto LABEL_302;
        }
        if (v81 >= *(void *)(v115 + 16)) {
          goto LABEL_305;
        }
        uint64_t v116 = v115 + 12 * v81;
      }
      else
      {
        if ((v81 & 0x8000000000000000) != 0) {
          goto LABEL_304;
        }
        if (v81 >= *(void *)(v115 + 16)) {
          goto LABEL_306;
        }
        uint64_t v116 = v115 + 8 * v81;
      }
      uint64_t v137 = v114;
      uint64_t v141 = v113;
      if (*(_DWORD *)(v116 + 32) == v143)
      {
        uint64_t v118 = (uint64_t *)&static LayoutComputer.defaultValue;
        if (one-time initialization token for defaultValue != -1)
        {
          swift_once();
          uint64_t v118 = (uint64_t *)&static LayoutComputer.defaultValue;
        }
      }
      else
      {
        uint64_t v118 = (uint64_t *)AGGraphGetInputValue();
      }
      uint64_t v122 = *v118;
      uint64_t v123 = one-time initialization token for lockAssertionsAreEnabled;
      swift_retain();
      if (v123 != -1) {
        swift_once();
      }
      if (lockAssertionsAreEnabled)
      {
        if (one-time initialization token for _lock != -1) {
          swift_once();
        }
        if (!_MovableLockIsOwner(static Update._lock)) {
          goto LABEL_323;
        }
      }
      uint64_t v153 = v137;
      char v154 = v112 & a13;
      uint64_t v155 = v141;
      char v156 = (v112 ^ 1) & a15;
      double v121 = (*(double (**)(uint64_t *, uint64_t))(*(void *)v122 + 128))(&v153, v112);
      swift_release();
      *(double *)(v105 + 16) = v121;
      *(unsigned char *)(v105 + 24) = 0;
      a5 = v148;
      __dst = v149;
      a1 = __srca;
      uint64_t v76 = v146;
LABEL_269:
      double v124 = v102 - v92;
      if (v102 - v92 == INFINITY) {
        double v125 = -v92;
      }
      else {
        double v125 = 0.0;
      }
      double v126 = v121 - v111;
      if (v121 - v111 == INFINITY) {
        double v127 = -v111;
      }
      else {
        double v127 = 0.0;
      }
      BOOL v128 = v125 < v127;
      if (v124 != v126) {
        BOOL v128 = v124 < v126;
      }
      uint64_t v83 = v77 + 1;
      if (v128) {
        goto LABEL_156;
      }
      BOOL v129 = v126 >= v124;
      if (v124 == v126) {
        BOOL v129 = v127 >= v125;
      }
      uint64_t v83 = v77 + 1;
      if (v129 && (uint64_t)v79 < (uint64_t)v81) {
        goto LABEL_156;
      }
    }
    uint64_t v157 = v78;
    if (v83 < (uint64_t *)v76 || v77 >= (void *)v76 || v83 != (uint64_t *)v76) {
      *uint64_t v77 = *(void *)v78;
    }
    uint64_t v82 = v16;
    uint64_t v76 = v78;
    if (v78 <= __dst) {
      goto LABEL_286;
    }
LABEL_167:
    --v77;
    unint64_t v16 = v82;
    if (v82 <= (uint64_t *)a1) {
      goto LABEL_286;
    }
  }
  __break(1u);
LABEL_288:
  __break(1u);
LABEL_289:
  __break(1u);
LABEL_290:
  __break(1u);
LABEL_291:
  __break(1u);
LABEL_292:
  __break(1u);
LABEL_293:
  __break(1u);
LABEL_294:
  __break(1u);
LABEL_295:
  __break(1u);
LABEL_296:
  __break(1u);
LABEL_297:
  __break(1u);
LABEL_298:
  __break(1u);
LABEL_299:
  __break(1u);
LABEL_300:
  __break(1u);
LABEL_301:
  __break(1u);
LABEL_302:
  __break(1u);
LABEL_303:
  __break(1u);
LABEL_304:
  __break(1u);
LABEL_305:
  __break(1u);
LABEL_306:
  __break(1u);
LABEL_307:
  __break(1u);
LABEL_308:
  __break(1u);
LABEL_309:
  __break(1u);
LABEL_310:
  __break(1u);
LABEL_311:
  __break(1u);
LABEL_312:
  __break(1u);
LABEL_313:
  __break(1u);
LABEL_314:
  __break(1u);
LABEL_315:
  __break(1u);
LABEL_316:
  __break(1u);
LABEL_317:
  __break(1u);
LABEL_318:
  __break(1u);
LABEL_319:
  __break(1u);
LABEL_320:
  __break(1u);
LABEL_321:
  __break(1u);
LABEL_322:
  __break(1u);
LABEL_323:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_324:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized StackLayout.UnmanagedImplementation.sizeChildrenIdeally(in:minorProposalForChild:)(uint64_t result, uint64_t a2, uint64_t a3, char a4, double a5)
{
  if (!a3) {
    return result;
  }
  if (a3 < 0) {
    goto LABEL_61;
  }
  uint64_t v7 = result;
  unint64_t v8 = 0;
  int v46 = *MEMORY[0x263F288F8];
  uint64_t v9 = a2 + 56;
  uint64_t v10 = 32;
  while (1)
  {
    char v20 = *(unsigned char *)(v7 + 17);
    double v21 = *(double *)v9;
    double v22 = *(double *)(v9 + 8);
    double v23 = *(double *)(v9 + 32);
    double v24 = *(double *)(v9 + 40);
    v53.origin.double x = *(CGFloat *)v9;
    v53.origin.CGFloat y = v22;
    v53.size.CGFloat width = v23;
    v53.size.CGFloat height = v24;
    BOOL IsNull = CGRectIsNull(v53);
    double v26 = 0.0;
    if (!IsNull)
    {
      if (a4) {
        double v27 = v24;
      }
      else {
        double v27 = v23;
      }
      if (a4) {
        double v28 = v22;
      }
      else {
        double v28 = v21;
      }
      double v29 = v28 + v27;
      if (v29 >= v28) {
        double v30 = v28;
      }
      else {
        double v30 = v29;
      }
      if (v28 <= v29) {
        double v28 = v29;
      }
      double v26 = 0.0;
      if (v30 <= v28) {
        double v26 = v28;
      }
    }
    unint64_t v31 = v8 + 1;
    double v32 = v26 - a5;
    if (v32 <= 0.0) {
      double v32 = 0.0;
    }
    double v33 = a5 - v32;
    double v34 = (v20 & 1) != 0 ? NAN : v33;
    double v35 = (v20 & 1) != 0 ? v33 : NAN;
    double v36 = (v20 & 1) != 0 ? v33 : 0.0;
    double v37 = (v20 & 1) != 0 ? 0.0 : v33;
    uint64_t v38 = *(void *)(v7 + 88);
    unint64_t v39 = *(void *)(v38 + 16);
    if ((*(unsigned char *)(v7 + 96) & 1) == 0) {
      break;
    }
    if (v8 >= v39) {
      goto LABEL_60;
    }
    uint64_t v40 = (_DWORD *)(v38 + v10);
LABEL_49:
    if (*v40 == v46)
    {
      Inputuint64_t Value = (double *)&static LayoutComputer.defaultValue;
      if (one-time initialization token for defaultValue != -1)
      {
        swift_once();
        Inputuint64_t Value = (double *)&static LayoutComputer.defaultValue;
      }
    }
    else
    {
      Inputuint64_t Value = (double *)AGGraphGetInputValue();
    }
    double v42 = *InputValue;
    uint64_t v43 = (void *)*((void *)InputValue + 1);
    uint64_t v44 = one-time initialization token for lockAssertionsAreEnabled;
    swift_retain();
    if (v44 != -1) {
      swift_once();
    }
    if (lockAssertionsAreEnabled)
    {
      if (one-time initialization token for _lock != -1) {
        swift_once();
      }
      if (!_MovableLockIsOwner(static Update._lock)) {
        goto LABEL_62;
      }
    }
    double v47 = v36;
    LOBYTE(v48) = v20 ^ 1;
    double v49 = v37;
    LOBYTE(v50) = v20;
    double v11 = (*(double (**)(double *))(**(void **)&v42 + 120))(&v47);
    uint64_t v13 = v12;
    unint64_t v14 = *(void *)v7;
    double v47 = v42;
    uint64_t v48 = v43;
    double v49 = v11;
    uint64_t v50 = v12;
    double v51 = v35;
    double v52 = v34;
    ViewDimensions.subscript.getter(v14);
    double v16 = INFINITY;
    if ((*(void *)&v15 & 0xFFFFFFFFFFFFFLL) == 0) {
      double v16 = v15;
    }
    if ((~*(void *)&v15 & 0x7FF0000000000000) == 0) {
      double v15 = v16;
    }
    double v17 = -v15;
    if (*(unsigned char *)(v7 + 17)) {
      double v18 = v17;
    }
    else {
      double v18 = 0.0;
    }
    if (*(unsigned char *)(v7 + 17)) {
      double v19 = 0.0;
    }
    else {
      double v19 = v17;
    }
    uint64_t result = swift_release();
    *(double *)uint64_t v9 = v18;
    *(double *)(v9 + 8) = v19;
    *(double *)(v9 + 16) = v42;
    *(void *)(v9 + 24) = v43;
    *(double *)(v9 + 32) = v11;
    *(void *)(v9 + 40) = v13;
    v10 += 12;
    *(double *)(v9 + 48) = v35;
    *(double *)(v9 + 56) = v34;
    v9 += 120;
    unint64_t v8 = v31;
    if (a3 == v31) {
      return result;
    }
  }
  if (v8 < v39)
  {
    uint64_t v40 = (_DWORD *)(v38 + 8 * v8 + 32);
    goto LABEL_49;
  }
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t assignWithCopy for StackLayout.Child(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_retain();
  swift_release();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  return a1;
}

uint64_t assignWithTake for StackLayout.Child(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_release();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  return a1;
}

uint64_t getEnumTagSinglePayload for StackLayout.Child(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 120)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 72);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for StackLayout.Child(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 120) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 72) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 120) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for StackLayout.Child()
{
  return &type metadata for StackLayout.Child;
}

uint64_t destroy for StackLayout.Header()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for StackLayout.Header(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  char v4 = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = v4;
  *(unsigned char *)(a1 + 97) = *(unsigned char *)(a2 + 97);
  *(unsigned char *)(a1 + 98) = *(unsigned char *)(a2 + 98);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for StackLayout.Header(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = v5;
  uint64_t v6 = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = v6;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  LOBYTE(v6) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 97) = *(unsigned char *)(a2 + 97);
  *(unsigned char *)(a1 + 98) = *(unsigned char *)(a2 + 98);
  return a1;
}

__n128 __swift_memcpy99_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(_DWORD *)(a1 + 95) = *(_DWORD *)((char *)a2 + 95);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for StackLayout.Header(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  LOBYTE(v4) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 97) = *(unsigned char *)(a2 + 97);
  *(unsigned char *)(a1 + 98) = *(unsigned char *)(a2 + 98);
  return a1;
}

uint64_t getEnumTagSinglePayload for StackLayout.Header(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 99)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 17);
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for StackLayout.Header(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 98) = 0;
    *(_WORD *)(result + 96) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 99) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 99) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 17) = a2 + 1;
    }
  }
  return result;
}

void *type metadata accessor for StackLayout.Header()
{
  return &unk_26FA43D08;
}

void *type metadata accessor for StackLayout.MajorAxisRangeCache()
{
  return &unk_26FA43BF8;
}

unsigned char *protocol witness for Collection.subscript.read in conformance Text.Effect.FlatPath.Elements(unsigned char *result, unint64_t *a2)
{
  unint64_t v3 = *a2;
  if ((*a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v3 < *(void *)(*(void *)v2 + 16))
  {
    *__n128 result = *(unsigned char *)(*(void *)v2 + v3 + 32);
    return _ViewInputs.base.modify;
  }
  __break(1u);
  return result;
}

uint64_t *protocol witness for Collection.subscript.getter in conformance Text.Effect.FlatPath.Elements@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *result;
  if (*result < 0 || (uint64_t v4 = result[1], result = *v2, (*v2)[2] < v4))
  {
    __break(1u);
  }
  else
  {
    int v5 = v2[1];
    *a2 = v3;
    a2[1] = v4;
    a2[2] = result;
    a2[3] = v5;
    return (uint64_t *)swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance Text.Effect.FlatPath.Elements@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3, *v4);
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v7 & 1;
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance Text.Effect.FlatPath.Elements()
{
  uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0, v0[1]);
  swift_bridgeObjectRelease();
  return v1;
}

void *protocol witness for Sequence._copyContents(initializing:) in conformance Text.Effect.FlatPath.Elements(void *a1, unsigned char *a2, uint64_t a3)
{
  return specialized Sequence._copyContents(initializing:)(a1, a2, a3, *v3, v3[1]);
}

uint64_t closure #1 in Text.Effect.FlatPath.init(_:)(long long *a1, uint64_t *a2, void **a3)
{
  outlined init with take of GraphicsContext.GradientGeometry(a1, (uint64_t)&v45);
  switch(v48)
  {
    case 1:
      long long v42 = v45;
      double v15 = *a3;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *a3 = v15;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        double v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15[2] + 1, 1, v15);
        *a3 = v15;
      }
      unint64_t v18 = v15[2];
      unint64_t v17 = v15[3];
      if (v18 >= v17 >> 1) {
        double v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v18 + 1, 1, v15);
      }
      v15[2] = v18 + 1;
      *(_OWORD *)&v15[2 * v18 + 4] = v42;
      *a3 = v15;
      uint64_t v9 = *a2;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      *a2 = v9;
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v9 + 16) + 1, 1, (char *)v9);
        uint64_t v9 = result;
        *a2 = result;
      }
      unint64_t v12 = *(void *)(v9 + 16);
      unint64_t v19 = *(void *)(v9 + 24);
      unint64_t v13 = v12 + 1;
      if (v12 >= v19 >> 1)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v19 > 1), v12 + 1, 1, (char *)v9);
        uint64_t v9 = result;
      }
      char v14 = 2;
      break;
    case 2:
      long long v39 = v46;
      long long v43 = v45;
      char v20 = *a3;
      char v21 = swift_isUniquelyReferenced_nonNull_native();
      *a3 = v20;
      if ((v21 & 1) == 0)
      {
        char v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20);
        *a3 = v20;
      }
      unint64_t v23 = v20[2];
      unint64_t v22 = v20[3];
      unint64_t v24 = v23 + 1;
      if (v23 >= v22 >> 1) {
        char v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v22 > 1), v23 + 1, 1, v20);
      }
      void v20[2] = v24;
      *(_OWORD *)&v20[2 * v23 + 4] = v39;
      *a3 = v20;
      unint64_t v25 = v20[3];
      int64_t v26 = v23 + 2;
      if (v26 > (uint64_t)(v25 >> 1)) {
        char v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v25 > 1), v26, 1, v20);
      }
      void v20[2] = v26;
      *(_OWORD *)&v20[2 * v24 + 4] = v43;
      *a3 = v20;
      uint64_t v9 = *a2;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      *a2 = v9;
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v9 + 16) + 1, 1, (char *)v9);
        uint64_t v9 = result;
        *a2 = result;
      }
      unint64_t v12 = *(void *)(v9 + 16);
      unint64_t v27 = *(void *)(v9 + 24);
      unint64_t v13 = v12 + 1;
      if (v12 >= v27 >> 1)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v27 > 1), v12 + 1, 1, (char *)v9);
        uint64_t v9 = result;
      }
      char v14 = 4;
      break;
    case 3:
      long long v38 = v46;
      long long v40 = v47;
      long long v44 = v45;
      double v28 = *a3;
      char v29 = swift_isUniquelyReferenced_nonNull_native();
      *a3 = v28;
      if ((v29 & 1) == 0)
      {
        double v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28[2] + 1, 1, v28);
        *a3 = v28;
      }
      unint64_t v31 = v28[2];
      unint64_t v30 = v28[3];
      unint64_t v32 = v31 + 1;
      if (v31 >= v30 >> 1) {
        double v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v30 > 1), v31 + 1, 1, v28);
      }
      v28[2] = v32;
      *(_OWORD *)&v28[2 * v31 + 4] = v38;
      *a3 = v28;
      unint64_t v33 = v28[3];
      unint64_t v34 = v31 + 2;
      if ((uint64_t)(v31 + 2) > (uint64_t)(v33 >> 1)) {
        double v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v33 > 1), v31 + 2, 1, v28);
      }
      v28[2] = v34;
      *(_OWORD *)&v28[2 * v32 + 4] = v40;
      *a3 = v28;
      unint64_t v35 = v28[3];
      if ((uint64_t)(v31 + 3) > (uint64_t)(v35 >> 1)) {
        double v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v35 > 1), v31 + 3, 1, v28);
      }
      v28[2] = v31 + 3;
      *(_OWORD *)&v28[2 * v34 + 4] = v44;
      *a3 = v28;
      uint64_t v9 = *a2;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      *a2 = v9;
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v9 + 16) + 1, 1, (char *)v9);
        uint64_t v9 = result;
        *a2 = result;
      }
      unint64_t v12 = *(void *)(v9 + 16);
      unint64_t v36 = *(void *)(v9 + 24);
      unint64_t v13 = v12 + 1;
      if (v12 >= v36 >> 1)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v36 > 1), v12 + 1, 1, (char *)v9);
        uint64_t v9 = result;
      }
      char v14 = 3;
      break;
    case 4:
      uint64_t v9 = *a2;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      *a2 = v9;
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v9 + 16) + 1, 1, (char *)v9);
        uint64_t v9 = result;
        *a2 = result;
      }
      unint64_t v12 = *(void *)(v9 + 16);
      unint64_t v37 = *(void *)(v9 + 24);
      unint64_t v13 = v12 + 1;
      if (v12 >= v37 >> 1)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v37 > 1), v12 + 1, 1, (char *)v9);
        uint64_t v9 = result;
      }
      char v14 = 0;
      break;
    default:
      long long v41 = v45;
      int v5 = *a3;
      char v6 = swift_isUniquelyReferenced_nonNull_native();
      *a3 = v5;
      if ((v6 & 1) == 0)
      {
        int v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
        *a3 = v5;
      }
      unint64_t v8 = v5[2];
      unint64_t v7 = v5[3];
      if (v8 >= v7 >> 1) {
        int v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v7 > 1), v8 + 1, 1, v5);
      }
      void v5[2] = v8 + 1;
      *(_OWORD *)&v5[2 * v8 + 4] = v41;
      *a3 = v5;
      uint64_t v9 = *a2;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      *a2 = v9;
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v9 + 16) + 1, 1, (char *)v9);
        uint64_t v9 = result;
        *a2 = result;
      }
      unint64_t v12 = *(void *)(v9 + 16);
      unint64_t v11 = *(void *)(v9 + 24);
      unint64_t v13 = v12 + 1;
      char v14 = 1;
      if (v12 >= v11 >> 1)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v11 > 1), v12 + 1, 1, (char *)v9);
        uint64_t v9 = result;
      }
      break;
  }
  *(void *)(v9 + 16) = v13;
  *(unsigned char *)(v9 + v12 + 32) = v14;
  *a2 = v9;
  return result;
}

uint64_t specialized Path.init(elements:points:)@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v66 = *MEMORY[0x263EF8340];
  if (*(void *)(a3 + 16) != a2) {
    goto LABEL_114;
  }
  uint64_t v5 = *(void *)(result + 16);
  if (!v5)
  {
    uint64_t v8 = 0;
    char v55 = 6;
    goto LABEL_101;
  }
  unint64_t v7 = 0;
  uint64_t v8 = 0;
  char v9 = 0;
  uint64_t v10 = (unsigned __int8 *)(result + 32);
  uint64_t v11 = a3 + 32;
  while (2)
  {
    int v12 = *v10++;
    switch(v12)
    {
      case 1:
        if (v7 >= a2) {
          goto LABEL_105;
        }
        long long v62 = *(_OWORD *)(v11 + 16 * v7);
        if (v9)
        {
          if (swift_isUniquelyReferenced_nonNull_native())
          {
            uint64_t v17 = 0;
            goto LABEL_79;
          }
          type metadata accessor for Path.PathBox();
          uint64_t v26 = swift_allocObject();
          *(_OWORD *)(v26 + 24) = 0u;
          *(_OWORD *)(v26 + 104) = 0u;
          *(_OWORD *)(v26 + 88) = 0u;
          *(_OWORD *)(v26 + 72) = 0u;
          *(_OWORD *)(v26 + 56) = 0u;
          *(_OWORD *)(v26 + 40) = 0u;
          int v37 = *(unsigned __int8 *)(v8 + 16);
          *(unsigned char *)(v26 + 16) = v37;
          if (v37)
          {
            if (v37 == 1)
            {
              swift_retain();
              *(void *)(v26 + 24) = RBPathRetain();
              *(void *)(v26 + 32) = v38;
              swift_release();
            }
            else
            {
              RBPathStorageInit();
            }
          }
          else
          {
            long long v47 = *(void **)(v8 + 24);
            if (!v47) {
              goto LABEL_111;
            }
            *(void *)(v26 + 24) = v47;
            id v48 = v47;
          }
          uint64_t v8 = 0;
        }
        else
        {
          type metadata accessor for Path.PathBox();
          uint64_t v24 = swift_allocObject();
          *(_OWORD *)(v24 + 104) = 0u;
          *(_OWORD *)(v24 + 88) = 0u;
          *(_OWORD *)(v24 + 72) = 0u;
          *(_OWORD *)(v24 + 56) = 0u;
          *(_OWORD *)(v24 + 40) = 0u;
          *(_OWORD *)(v24 + 24) = 0u;
          *(unsigned char *)(v24 + 16) = 2;
          RBPathStorageInit();
          int v25 = *(unsigned __int8 *)(v24 + 16);
          swift_retain();
          if (v25 == 2)
          {
            uint64_t v26 = v24;
          }
          else
          {
            uint64_t v26 = v24;
            Path.PathBox.prepareBuffer()();
          }
        }
        uint64_t v17 = v8;
        swift_release();
        uint64_t v8 = v26;
LABEL_79:
        swift_retain();
        outlined consume of Path.Storage(v17, 0, 0, 0, 6u);
        if (*(unsigned char *)(v8 + 16) != 2) {
          Path.PathBox.prepareBuffer()();
        }
        uint64_t v49 = v8 + 24;
        long long v63 = v62;
        uint64_t v50 = 0;
LABEL_82:
        MEMORY[0x24C526C30](v49, v50, &v63, 0);
        uint64_t result = swift_release();
        ++v7;
        goto LABEL_5;
      case 2:
        if (v7 >= a2)
        {
          __break(1u);
LABEL_103:
          __break(1u);
LABEL_104:
          __break(1u);
LABEL_105:
          __break(1u);
LABEL_106:
          __break(1u);
LABEL_107:
          __break(1u);
LABEL_108:
          __break(1u);
        }
        long long v60 = *(_OWORD *)(v11 + 16 * v7);
        if (v9)
        {
          if (swift_isUniquelyReferenced_nonNull_native())
          {
            uint64_t v15 = 0;
            goto LABEL_73;
          }
          type metadata accessor for Path.PathBox();
          uint64_t v23 = swift_allocObject();
          *(_OWORD *)(v23 + 24) = 0u;
          *(_OWORD *)(v23 + 104) = 0u;
          *(_OWORD *)(v23 + 88) = 0u;
          *(_OWORD *)(v23 + 72) = 0u;
          *(_OWORD *)(v23 + 56) = 0u;
          *(_OWORD *)(v23 + 40) = 0u;
          int v35 = *(unsigned __int8 *)(v8 + 16);
          *(unsigned char *)(v23 + 16) = v35;
          if (v35)
          {
            if (v35 == 1)
            {
              swift_retain();
              *(void *)(v23 + 24) = RBPathRetain();
              *(void *)(v23 + 32) = v36;
              swift_release();
            }
            else
            {
              RBPathStorageInit();
            }
          }
          else
          {
            long long v45 = *(void **)(v8 + 24);
            if (!v45) {
              goto LABEL_112;
            }
            *(void *)(v23 + 24) = v45;
            id v46 = v45;
          }
          uint64_t v8 = 0;
        }
        else
        {
          type metadata accessor for Path.PathBox();
          uint64_t v21 = swift_allocObject();
          *(_OWORD *)(v21 + 104) = 0u;
          *(_OWORD *)(v21 + 88) = 0u;
          *(_OWORD *)(v21 + 72) = 0u;
          *(_OWORD *)(v21 + 56) = 0u;
          *(_OWORD *)(v21 + 40) = 0u;
          *(_OWORD *)(v21 + 24) = 0u;
          *(unsigned char *)(v21 + 16) = 2;
          RBPathStorageInit();
          int v22 = *(unsigned __int8 *)(v21 + 16);
          swift_retain();
          if (v22 == 2)
          {
            uint64_t v23 = v21;
          }
          else
          {
            uint64_t v23 = v21;
            Path.PathBox.prepareBuffer()();
          }
        }
        uint64_t v15 = v8;
        swift_release();
        uint64_t v8 = v23;
LABEL_73:
        swift_retain();
        outlined consume of Path.Storage(v15, 0, 0, 0, 6u);
        if (*(unsigned char *)(v8 + 16) != 2) {
          Path.PathBox.prepareBuffer()();
        }
        uint64_t v49 = v8 + 24;
        long long v63 = v60;
        uint64_t v50 = 1;
        goto LABEL_82;
      case 3:
        if (v7 >= a2) {
          goto LABEL_104;
        }
        if (v7 + 1 >= a2) {
          goto LABEL_107;
        }
        if (v7 + 2 >= a2) {
          goto LABEL_108;
        }
        long long v58 = *(_OWORD *)(v11 + 16 * (v7 + 1));
        long long v61 = *(_OWORD *)(v11 + 16 * v7);
        long long v56 = *(_OWORD *)(v11 + 16 * (v7 + 2));
        if (v9)
        {
          if (swift_isUniquelyReferenced_nonNull_native())
          {
            uint64_t v16 = 0;
            goto LABEL_96;
          }
          type metadata accessor for Path.PathBox();
          uint64_t v32 = swift_allocObject();
          *(_OWORD *)(v32 + 24) = 0u;
          *(_OWORD *)(v32 + 104) = 0u;
          *(_OWORD *)(v32 + 88) = 0u;
          *(_OWORD *)(v32 + 72) = 0u;
          *(_OWORD *)(v32 + 56) = 0u;
          *(_OWORD *)(v32 + 40) = 0u;
          int v41 = *(unsigned __int8 *)(v8 + 16);
          *(unsigned char *)(v32 + 16) = v41;
          if (v41)
          {
            if (v41 == 1)
            {
              swift_retain();
              *(void *)(v32 + 24) = RBPathRetain();
              *(void *)(v32 + 32) = v42;
              swift_release();
            }
            else
            {
              RBPathStorageInit();
            }
          }
          else
          {
            CGRect v53 = *(void **)(v8 + 24);
            if (!v53) {
              goto LABEL_113;
            }
            *(void *)(v32 + 24) = v53;
            id v54 = v53;
          }
          uint64_t v8 = 0;
        }
        else
        {
          type metadata accessor for Path.PathBox();
          uint64_t v30 = swift_allocObject();
          *(_OWORD *)(v30 + 104) = 0u;
          *(_OWORD *)(v30 + 88) = 0u;
          *(_OWORD *)(v30 + 72) = 0u;
          *(_OWORD *)(v30 + 56) = 0u;
          *(_OWORD *)(v30 + 40) = 0u;
          *(_OWORD *)(v30 + 24) = 0u;
          *(unsigned char *)(v30 + 16) = 2;
          RBPathStorageInit();
          int v31 = *(unsigned __int8 *)(v30 + 16);
          swift_retain();
          if (v31 == 2)
          {
            uint64_t v32 = v30;
          }
          else
          {
            uint64_t v32 = v30;
            Path.PathBox.prepareBuffer()();
          }
        }
        uint64_t v16 = v8;
        swift_release();
        uint64_t v8 = v32;
LABEL_96:
        swift_retain();
        outlined consume of Path.Storage(v16, 0, 0, 0, 6u);
        if (*(unsigned char *)(v8 + 16) != 2) {
          Path.PathBox.prepareBuffer()();
        }
        long long v63 = v61;
        long long v64 = v58;
        long long v65 = v56;
        MEMORY[0x24C526C30](v8 + 24, 3, &v63, 0);
        uint64_t result = swift_release();
        v7 += 3;
        goto LABEL_5;
      case 4:
        if (v7 >= a2) {
          goto LABEL_103;
        }
        if (v7 + 1 >= a2) {
          goto LABEL_106;
        }
        long long v57 = *(_OWORD *)(v11 + 16 * (v7 + 1));
        long long v59 = *(_OWORD *)(v11 + 16 * v7);
        if ((v9 & 1) == 0)
        {
          type metadata accessor for Path.PathBox();
          uint64_t v27 = swift_allocObject();
          *(_OWORD *)(v27 + 104) = 0u;
          *(_OWORD *)(v27 + 88) = 0u;
          *(_OWORD *)(v27 + 72) = 0u;
          *(_OWORD *)(v27 + 56) = 0u;
          *(_OWORD *)(v27 + 40) = 0u;
          *(_OWORD *)(v27 + 24) = 0u;
          *(unsigned char *)(v27 + 16) = 2;
          RBPathStorageInit();
          int v28 = *(unsigned __int8 *)(v27 + 16);
          swift_retain();
          if (v28 == 2)
          {
            uint64_t v29 = v27;
          }
          else
          {
            uint64_t v29 = v27;
            Path.PathBox.prepareBuffer()();
          }
          goto LABEL_87;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          type metadata accessor for Path.PathBox();
          uint64_t v29 = swift_allocObject();
          *(_OWORD *)(v29 + 24) = 0u;
          *(_OWORD *)(v29 + 104) = 0u;
          *(_OWORD *)(v29 + 88) = 0u;
          *(_OWORD *)(v29 + 72) = 0u;
          *(_OWORD *)(v29 + 56) = 0u;
          *(_OWORD *)(v29 + 40) = 0u;
          int v39 = *(unsigned __int8 *)(v8 + 16);
          *(unsigned char *)(v29 + 16) = v39;
          if (v39)
          {
            if (v39 == 1)
            {
              swift_retain();
              *(void *)(v29 + 24) = RBPathRetain();
              *(void *)(v29 + 32) = v40;
              swift_release();
            }
            else
            {
              RBPathStorageInit();
            }
            goto LABEL_86;
          }
          double v51 = *(void **)(v8 + 24);
          if (v51)
          {
            *(void *)(v29 + 24) = v51;
            id v52 = v51;
LABEL_86:
            uint64_t v8 = 0;
LABEL_87:
            uint64_t v14 = v8;
            swift_release();
            uint64_t v8 = v29;
            goto LABEL_88;
          }
          __break(1u);
LABEL_110:
          __break(1u);
LABEL_111:
          __break(1u);
LABEL_112:
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          swift_bridgeObjectRelease();
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          JUMPOUT(0x246044398);
        }
        uint64_t v14 = 0;
LABEL_88:
        swift_retain();
        outlined consume of Path.Storage(v14, 0, 0, 0, 6u);
        if (*(unsigned char *)(v8 + 16) != 2) {
          Path.PathBox.prepareBuffer()();
        }
        long long v63 = v59;
        long long v64 = v57;
        MEMORY[0x24C526C30](v8 + 24, 2, &v63, 0);
        uint64_t result = swift_release();
        v7 += 2;
LABEL_5:
        char v9 = 1;
        if (--v5) {
          continue;
        }
        char v55 = 5;
LABEL_101:
        *(void *)a4 = v8;
        *(void *)(a4 + 8) = 0;
        *(void *)(a4 + 16) = 0;
        *(void *)(a4 + 24) = 0;
        *(unsigned char *)(a4 + 32) = v55;
        return result;
      default:
        if (v9)
        {
          if (swift_isUniquelyReferenced_nonNull_native())
          {
            uint64_t v13 = 0;
            goto LABEL_64;
          }
          type metadata accessor for Path.PathBox();
          uint64_t v20 = swift_allocObject();
          *(_OWORD *)(v20 + 24) = 0u;
          *(_OWORD *)(v20 + 104) = 0u;
          *(_OWORD *)(v20 + 88) = 0u;
          *(_OWORD *)(v20 + 72) = 0u;
          *(_OWORD *)(v20 + 56) = 0u;
          *(_OWORD *)(v20 + 40) = 0u;
          int v33 = *(unsigned __int8 *)(v8 + 16);
          *(unsigned char *)(v20 + 16) = v33;
          if (v33)
          {
            if (v33 == 1)
            {
              swift_retain();
              *(void *)(v20 + 24) = RBPathRetain();
              *(void *)(v20 + 32) = v34;
              swift_release();
            }
            else
            {
              RBPathStorageInit();
            }
          }
          else
          {
            long long v43 = *(void **)(v8 + 24);
            if (!v43) {
              goto LABEL_110;
            }
            *(void *)(v20 + 24) = v43;
            id v44 = v43;
          }
          uint64_t v8 = 0;
        }
        else
        {
          type metadata accessor for Path.PathBox();
          uint64_t v18 = swift_allocObject();
          *(_OWORD *)(v18 + 104) = 0u;
          *(_OWORD *)(v18 + 88) = 0u;
          *(_OWORD *)(v18 + 72) = 0u;
          *(_OWORD *)(v18 + 56) = 0u;
          *(_OWORD *)(v18 + 40) = 0u;
          *(_OWORD *)(v18 + 24) = 0u;
          *(unsigned char *)(v18 + 16) = 2;
          RBPathStorageInit();
          int v19 = *(unsigned __int8 *)(v18 + 16);
          swift_retain();
          if (v19 == 2)
          {
            uint64_t v20 = v18;
          }
          else
          {
            uint64_t v20 = v18;
            Path.PathBox.prepareBuffer()();
          }
        }
        uint64_t v13 = v8;
        swift_release();
        uint64_t v8 = v20;
LABEL_64:
        swift_retain();
        outlined consume of Path.Storage(v13, 0, 0, 0, 6u);
        if (*(unsigned char *)(v8 + 16) != 2) {
          Path.PathBox.prepareBuffer()();
        }
        MEMORY[0x24C526C30](v8 + 24, 4, 0, 0);
        uint64_t result = swift_release();
        goto LABEL_5;
    }
  }
}

ValueMetadata *type metadata accessor for Text.Effect.FlatPath()
{
  return &type metadata for Text.Effect.FlatPath;
}

unsigned char *storeEnumTagSinglePayload for Text.Effect.FlatPath.Element(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x246044488);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.FlatPath.Element()
{
  return &type metadata for Text.Effect.FlatPath.Element;
}

unint64_t lazy protocol witness table accessor for type Text.Effect.FlatPath.Element and conformance Text.Effect.FlatPath.Element()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.FlatPath.Element and conformance Text.Effect.FlatPath.Element;
  if (!lazy protocol witness table cache variable for type Text.Effect.FlatPath.Element and conformance Text.Effect.FlatPath.Element)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.FlatPath.Element and conformance Text.Effect.FlatPath.Element);
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.Effect.FlatPath.Elements()
{
  return &type metadata for Text.Effect.FlatPath.Elements;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in Text.Effect.FlatPath.Elements()
{
  return lazy protocol witness table accessor for type IndexingIterator<Text.Effect.FlatPath.Elements> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type IndexingIterator<Text.Effect.FlatPath.Elements> and conformance IndexingIterator<A>, &lazy cache variable for type metadata for IndexingIterator<Text.Effect.FlatPath.Elements>, MEMORY[0x263F8DE58]);
}

unint64_t lazy protocol witness table accessor for type Text.Effect.FlatPath.Elements and conformance Text.Effect.FlatPath.Elements()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.FlatPath.Elements and conformance Text.Effect.FlatPath.Elements;
  if (!lazy protocol witness table cache variable for type Text.Effect.FlatPath.Elements and conformance Text.Effect.FlatPath.Elements)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.FlatPath.Elements and conformance Text.Effect.FlatPath.Elements);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.FlatPath.Elements and conformance Text.Effect.FlatPath.Elements;
  if (!lazy protocol witness table cache variable for type Text.Effect.FlatPath.Elements and conformance Text.Effect.FlatPath.Elements)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.FlatPath.Elements and conformance Text.Effect.FlatPath.Elements);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.FlatPath.Elements and conformance Text.Effect.FlatPath.Elements;
  if (!lazy protocol witness table cache variable for type Text.Effect.FlatPath.Elements and conformance Text.Effect.FlatPath.Elements)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.FlatPath.Elements and conformance Text.Effect.FlatPath.Elements);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Text.Effect.FlatPath.Elements and conformance Text.Effect.FlatPath.Elements;
  if (!lazy protocol witness table cache variable for type Text.Effect.FlatPath.Elements and conformance Text.Effect.FlatPath.Elements)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.Effect.FlatPath.Elements and conformance Text.Effect.FlatPath.Elements);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in Text.Effect.FlatPath.Elements()
{
  return lazy protocol witness table accessor for type IndexingIterator<Text.Effect.FlatPath.Elements> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.FlatPath.Elements> and conformance Slice<A>, &lazy cache variable for type metadata for Slice<Text.Effect.FlatPath.Elements>, MEMORY[0x263F8E738]);
}

uint64_t lazy protocol witness table accessor for type IndexingIterator<Text.Effect.FlatPath.Elements> and conformance IndexingIterator<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for IndexingIterator<Text.Effect.FlatPath.Elements>(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for IndexingIterator<Text.Effect.FlatPath.Elements>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = lazy protocol witness table accessor for type Text.Effect.FlatPath.Elements and conformance Text.Effect.FlatPath.Elements();
    unint64_t v7 = a3(a1, &type metadata for Text.Effect.FlatPath.Elements, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in Text.Effect.FlatPath.Elements()
{
  return lazy protocol witness table accessor for type Slice<Text.Effect.FlatPath.Elements> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.FlatPath.Elements> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.FlatPath.Elements and conformance Text.Effect.FlatPath.Elements);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in Text.Effect.FlatPath.Elements()
{
  return lazy protocol witness table accessor for type Slice<Text.Effect.FlatPath.Elements> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<Text.Effect.FlatPath.Elements> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.FlatPath.Elements and conformance Text.Effect.FlatPath.Elements);
}

uint64_t lazy protocol witness table accessor for type Slice<Text.Effect.FlatPath.Elements> and conformance <> Slice<A>(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for IndexingIterator<Text.Effect.FlatPath.Elements>(255, &lazy cache variable for type metadata for Slice<Text.Effect.FlatPath.Elements>, MEMORY[0x263F8E738]);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetDeltaModifier@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, void *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetDeltaModifier(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance ResetDeltaModifier()
{
}

void ViewModifier<>.body(content:)()
{
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance IgnoresAutomaticPaddingLayout@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, void *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetDeltaModifier(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance IgnoresAutomaticPaddingLayout()
{
}

{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized static ModifiedContent<>._makeView(modifier:inputs:body:)@<X0>(uint64_t a1@<X1>, void (*a2)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t a3@<X8>)
{
  uint64_t v101 = *MEMORY[0x263EF8340];
  swift_retain();
  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  int v54 = ShouldRecordTree;
  int v55 = OffsetAttribute2;
  int v6 = *(_DWORD *)(a1 + 80);
  int v59 = *(_DWORD *)(a1 + 72);
  int v63 = *(_DWORD *)(a1 + 76);
  int v64 = *(_DWORD *)(a1 + 68);
  int v7 = *(_DWORD *)(a1 + 56);
  int v62 = *(_DWORD *)(a1 + 60);
  uint64_t v8 = *(void *)a1;
  int v9 = *(_DWORD *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  unsigned int v11 = *(_DWORD *)(a1 + 28);
  unsigned int v65 = *(_DWORD *)(a1 + 24);
  int v66 = *(_DWORD *)(a1 + 64);
  unsigned int v12 = *(_DWORD *)(a1 + 36);
  int v52 = *(_DWORD *)(a1 + 32);
  uint64_t v13 = *(void *)(a1 + 40);
  uint64_t v14 = *(void *)(a1 + 48);
  long long v15 = *(_OWORD *)(a1 + 16);
  v80[0] = *(_OWORD *)a1;
  v80[1] = v15;
  long long v16 = *(_OWORD *)(a1 + 32);
  long long v17 = *(_OWORD *)(a1 + 48);
  long long v18 = *(_OWORD *)(a1 + 64);
  int v84 = v6;
  long long v82 = v17;
  long long v83 = v18;
  long long v81 = v16;
  LODWORD(v81) = 0;
  outlined retain of _ViewInputs(a1);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v50 = AGMakeUniqueID();
  swift_beginAccess();
  int v57 = v7;
  int v58 = v9;
  unsigned int v53 = v11;
  unsigned int v60 = v12;
  int v61 = v6;
  if ((v12 & 0x20) == 0)
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    int v19 = v59;
    int v20 = v66;
    int v21 = v63;
    int v22 = v64;
    int v23 = v62;
    goto LABEL_28;
  }
  uint64_t v85 = v8;
  int v86 = v9;
  uint64_t v88 = v10;
  unsigned int v89 = v65;
  uint64_t v90 = v11;
  unsigned int v91 = v12;
  uint64_t v92 = v13;
  uint64_t v93 = v14;
  int v94 = v7;
  int v95 = v62;
  int v96 = v66;
  int v97 = v64;
  int v98 = v59;
  int v99 = v63;
  int v100 = v6;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  unsigned int v24 = _ViewInputs.geometryTransaction()();
  uint64_t KeyPath = swift_getKeyPath();
  int v26 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
  swift_release();
  if ((*(unsigned char *)(v10 + 81) & 1) == 0
    && v66 == *(_DWORD *)(v10 + 32)
    && v59 == *(_DWORD *)(v10 + 36)
    && v26 == *(_DWORD *)(v10 + 40)
    && v9 == *(_DWORD *)(v10 + 44)
    && v24 == *(_DWORD *)(v10 + 48)
    && v65 == *(_DWORD *)(v10 + 52))
  {
    int v29 = v59;
    int v27 = v7;
    int v28 = v66;
    if ((*(unsigned char *)(v10 + 64) & 1) == 0)
    {
      LODWORD(v49) = *(_DWORD *)(v10 + 60);
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  uint64_t v85 = v8;
  int v86 = v9;
  uint64_t v88 = v10;
  unsigned int v89 = v65;
  uint64_t v90 = v24;
  unsigned int v91 = v12;
  uint64_t v92 = v13;
  uint64_t v93 = v14;
  int v27 = v7;
  int v94 = v7;
  int v95 = v62;
  int v28 = v66;
  int v96 = v66;
  int v97 = v64;
  int v29 = v59;
  int v98 = v59;
  int v99 = v63;
  int v100 = v61;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v85, v26, (uint64_t)&v67);
  long long v30 = v68;
  uint64_t v31 = v69;
  unsigned __int8 v32 = v72;
  unint64_t v33 = v69 | ((unint64_t)v70 << 32);
  unint64_t v34 = v71 | ((unint64_t)HIDWORD(v71) << 32);
  *(_OWORD *)(v10 + 32) = v67;
  *(_OWORD *)(v10 + 48) = v30;
  *(void *)(v10 + 64) = v33;
  *(void *)(v10 + 72) = v34;
  *(_WORD *)(v10 + 80) = v32;
  if (v31 == 1)
  {
LABEL_15:
    LODWORD(v49) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v10 + 60) = v49;
    *(unsigned char *)(v10 + 64) = 0;
    goto LABEL_16;
  }
  uint64_t v49 = HIDWORD(*((void *)&v30 + 1));
LABEL_16:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v85 = v8;
  int v86 = v58;
  uint64_t v88 = v10;
  unsigned int v89 = v65;
  uint64_t v90 = v53;
  unsigned int v91 = v12;
  uint64_t v92 = v13;
  uint64_t v93 = v14;
  int v94 = v27;
  int v95 = v62;
  int v96 = v28;
  int v97 = v64;
  int v98 = v29;
  int v99 = v63;
  int v100 = v61;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unsigned int v35 = _ViewInputs.geometryTransaction()();
  uint64_t v36 = swift_getKeyPath();
  int v37 = specialized CachedEnvironment.attribute<A>(keyPath:)(v36);
  swift_release();
  int v38 = v29;
  if ((*(unsigned char *)(v10 + 81) & 1) == 0
    && v28 == *(_DWORD *)(v10 + 32)
    && v29 == *(_DWORD *)(v10 + 36)
    && v37 == *(_DWORD *)(v10 + 40)
    && v58 == *(_DWORD *)(v10 + 44)
    && v35 == *(_DWORD *)(v10 + 48)
    && v65 == *(_DWORD *)(v10 + 52))
  {
    int v21 = v63;
    int v22 = v64;
    int v23 = v62;
    if ((*(unsigned char *)(v10 + 72) & 1) == 0)
    {
      int v19 = *(_DWORD *)(v10 + 68);
      goto LABEL_27;
    }
  }
  else
  {
    uint64_t v85 = v8;
    int v86 = v58;
    uint64_t v88 = v10;
    unsigned int v89 = v65;
    uint64_t v90 = v35;
    unsigned int v91 = v12;
    uint64_t v92 = v13;
    uint64_t v93 = v14;
    int v23 = v62;
    int v21 = v63;
    int v94 = v57;
    int v95 = v62;
    int v22 = v64;
    int v96 = v28;
    int v97 = v64;
    int v98 = v38;
    int v99 = v63;
    int v100 = v61;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v85, v37, (uint64_t)&v67);
    int v19 = v70;
    uint64_t v39 = v71;
    unsigned __int8 v40 = v72;
    unint64_t v41 = v69 | ((unint64_t)v70 << 32);
    unint64_t v42 = v71 | ((unint64_t)HIDWORD(v71) << 32);
    long long v43 = v68;
    *(_OWORD *)(v10 + 32) = v67;
    *(_OWORD *)(v10 + 48) = v43;
    *(void *)(v10 + 64) = v41;
    *(void *)(v10 + 72) = v42;
    *(_WORD *)(v10 + 80) = v40;
    if (v39 != 1) {
      goto LABEL_27;
    }
  }
  int v19 = AGGraphCreateOffsetAttribute2();
  *(_DWORD *)(v10 + 68) = v19;
  *(unsigned char *)(v10 + 72) = 0;
LABEL_27:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  int v20 = v49;
LABEL_28:
  swift_endAccess();
  uint64_t v85 = v50;
  int v86 = v23;
  int v87 = v20;
  LODWORD(v88) = v19;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type _SafeAreaInsetsModifier.Transform and conformance _SafeAreaInsetsModifier.Transform();
  int v44 = Attribute.init<A>(body:value:flags:update:)();
  uint64_t v85 = v50;
  int v86 = v55;
  int v87 = v21;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type _SafeAreaInsetsModifier.Insets and conformance _SafeAreaInsetsModifier.Insets();
  int v45 = Attribute.init<A>(body:value:flags:update:)();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unsigned int v46 = AGGraphCreateOffsetAttribute2();
  int v47 = v54;
  if (v54) {
    AGSubgraphBeginTreeElement();
  }
  *(void *)&long long v67 = v8;
  DWORD2(v67) = v58;
  *(void *)&long long v68 = v10;
  *((void *)&v68 + 1) = __PAIR64__(v53, v65);
  unsigned int v70 = v60;
  uint64_t v71 = v13;
  uint64_t v72 = v14;
  int v73 = v57;
  int v74 = v44;
  int v75 = v66;
  int v76 = v22;
  int v77 = v59;
  int v78 = v45;
  int v79 = v61;
  uint64_t v85 = v8;
  int v86 = v58;
  uint64_t v88 = v10;
  unsigned int v89 = v65;
  uint64_t v90 = v53;
  unsigned int v91 = v60;
  uint64_t v92 = v13;
  uint64_t v93 = v14;
  int v94 = v57;
  int v95 = v44;
  int v96 = v66;
  int v97 = v22;
  int v98 = v59;
  int v99 = v45;
  int v100 = v61;
  swift_retain();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  specialized static UnaryLayout<>.makeViewImpl(modifier:inputs:body:)(v46, (uint64_t)&v85, a2, a3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  int v69 = 4;
  if (v54)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(a3, &v67);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    int v47 = v54;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  LODWORD(v81) = v52;
  if (v47)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(a3, v80);
    AGSubgraphEndTreeElement();
  }
  swift_release_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, void *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetDeltaModifier(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout()
{
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance AutomaticPaddingViewModifier@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, void *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetDeltaModifier(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance AutomaticPaddingViewModifier()
{
}

void protocol witness for ViewModifier.body(content:) in conformance ScrollPhaseStateConfigurationModifier()
{
}

void protocol witness for ViewModifier.body(content:) in conformance ResetScrollInputsModifier()
{
}

uint64_t specialized static ViewModifier<>._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, Swift::UInt *))
{
  uint64_t v4 = *(void *)a2;
  int v5 = *(_DWORD *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  outlined retain of _ViewInputs(a2);
  uint64_t v10 = swift_retain();
  uint64_t v11 = specialized find<A>(_:key:)(v10);
  if (!v11 || (Swift::UInt value = v4, *(unsigned char *)(v11 + 72) != 1))
  {
    type metadata accessor for TypedElement<VariantThatFitsFlag>(0, &lazy cache variable for type metadata for TypedElement<VariantThatFitsFlag>, (uint64_t)&type metadata for VariantThatFitsFlag, (uint64_t)&protocol witness table for VariantThatFitsFlag, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TypedElement);
    *(unsigned char *)(swift_allocObject() + 72) = 1;
    Swift::UInt value = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for VariantThatFitsFlag, 0, v4).value;
  }
  int v13 = *(_DWORD *)(a2 + 80);
  uint64_t v14 = *(void *)(a2 + 48);
  long long v18 = *(_OWORD *)(a2 + 56);
  uint64_t v15 = *(void *)(a2 + 72);
  swift_release();
  Swift::UInt v20 = value;
  int v21 = v5;
  uint64_t v22 = v6;
  uint64_t v23 = v7;
  uint64_t v24 = v8;
  uint64_t v25 = v9;
  uint64_t v26 = v14;
  long long v27 = v18;
  uint64_t v28 = v15;
  int v29 = v13;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v16 = swift_bridgeObjectRetain();
  a3(v16, &v20);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t specialized static ViewModifier<>._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v22 = *(void *)a2;
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v19[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)Swift::UInt v20 = v4;
  *(_OWORD *)&v20[16] = *(_OWORD *)(a2 + 64);
  int v21 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  long long v18 = *(_OWORD *)a2;
  *(_OWORD *)int v19 = v5;
  outlined retain of _ViewInputs(a2);
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  long long v6 = static StyleContextInput.defaultValue;
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v18, v6, *((uint64_t *)&v6 + 1));
  outlined release of ViewTransform((uint64_t)&v22);
  uint64_t v9 = v18;
  int v10 = DWORD2(v18);
  uint64_t v11 = *(void *)v19;
  long long v12 = *(_OWORD *)&v19[8];
  uint64_t v13 = *(void *)&v19[24];
  uint64_t v14 = *(void *)v20;
  long long v15 = *(_OWORD *)&v20[8];
  uint64_t v16 = *(void *)&v20[24];
  int v17 = v21;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v7 = swift_bridgeObjectRetain();
  a3(v7, &v9);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t specialized static ViewModifier<>._makeView(modifier:inputs:body:)(int a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  long long v4 = *(_OWORD *)(a2 + 32);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)int v21 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v21[16] = v5;
  int v22 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  long long v19 = *(_OWORD *)a2;
  *(_OWORD *)Swift::UInt v20 = v6;
  *(_OWORD *)&v20[16] = v4;
  LODWORD(v10) = a1;
  uint64_t v7 = (void (*)(uint64_t, uint64_t))off_26FA631D8;
  outlined retain of _ViewInputs(a2);
  v7((uint64_t)&v10, (uint64_t)&v19);
  uint64_t v10 = v19;
  int v11 = DWORD2(v19);
  uint64_t v12 = *(void *)v20;
  long long v13 = *(_OWORD *)&v20[8];
  uint64_t v14 = *(void *)&v20[24];
  uint64_t v15 = *(void *)v21;
  long long v16 = *(_OWORD *)&v21[8];
  uint64_t v17 = *(void *)&v21[24];
  int v18 = v22;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v8 = swift_bridgeObjectRetain();
  a3(v8, &v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, Swift::UInt *))
{
  uint64_t v4 = *(void *)a2;
  int v5 = *(_DWORD *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  outlined retain of _ViewListInputs(a2);
  uint64_t v10 = swift_retain();
  uint64_t v11 = specialized find<A>(_:key:)(v10);
  if (!v11 || (Swift::UInt value = v4, *(unsigned char *)(v11 + 72) != 1))
  {
    type metadata accessor for TypedElement<VariantThatFitsFlag>(0, &lazy cache variable for type metadata for TypedElement<VariantThatFitsFlag>, (uint64_t)&type metadata for VariantThatFitsFlag, (uint64_t)&protocol witness table for VariantThatFitsFlag, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TypedElement);
    *(unsigned char *)(swift_allocObject() + 72) = 1;
    Swift::UInt value = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for VariantThatFitsFlag, 0, v4).value;
  }
  uint64_t v13 = *(void *)(a2 + 72);
  char v14 = *(unsigned char *)(a2 + 80);
  int v15 = *(_DWORD *)(a2 + 64);
  uint64_t v18 = a2 + 48;
  uint64_t v17 = *(void *)(a2 + 48);
  uint64_t v16 = *(void *)(v18 + 8);
  swift_release();
  Swift::UInt v22 = value;
  int v23 = v5;
  uint64_t v24 = v6;
  uint64_t v25 = v7;
  uint64_t v26 = v8;
  uint64_t v27 = v9;
  uint64_t v28 = v17;
  uint64_t v29 = v16;
  int v30 = v15;
  uint64_t v31 = v13;
  char v32 = v14;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  uint64_t v19 = swift_bridgeObjectRetain();
  a3(v19, &v22);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v23 = *(void *)a2;
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v19[16] = *(_OWORD *)(a2 + 32);
  long long v20 = v4;
  long long v21 = *(_OWORD *)(a2 + 64);
  char v22 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  long long v18 = *(_OWORD *)a2;
  *(_OWORD *)uint64_t v19 = v5;
  outlined retain of _ViewListInputs(a2);
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  long long v6 = static StyleContextInput.defaultValue;
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v18, v6, *((uint64_t *)&v6 + 1));
  outlined release of ViewTransform((uint64_t)&v23);
  uint64_t v9 = v18;
  int v10 = DWORD2(v18);
  uint64_t v11 = *(void *)v19;
  long long v12 = *(_OWORD *)&v19[8];
  uint64_t v13 = *(void *)&v19[24];
  long long v14 = v20;
  int v15 = v21;
  uint64_t v16 = *((void *)&v21 + 1);
  char v17 = v22;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  uint64_t v7 = swift_bridgeObjectRetain();
  a3(v7, &v9);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

void protocol witness for ViewModifier.body(content:) in conformance ScrollPositionBindingModifier()
{
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ScrollValueModifier(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  int v4 = *a1;
  long long v5 = *(_OWORD *)(a2 + 48);
  _OWORD v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  uint64_t v8[4] = *(_OWORD *)(a2 + 64);
  int v9 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4, (void (*)(uint64_t *, long long *))specialized static ScrollValueModifier._makeInputs(modifier:inputs:));
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ScrollValueModifier(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  int v4 = *a1;
  long long v5 = *(_OWORD *)(a2 + 48);
  _OWORD v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  uint64_t v8[4] = *(_OWORD *)(a2 + 64);
  char v9 = *(unsigned char *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4, (void (*)(uint64_t *, long long *))specialized static ScrollValueModifier._makeInputs(modifier:inputs:));
}

void protocol witness for ViewModifier.body(content:) in conformance ScrollValueModifier()
{
}

void protocol witness for ViewModifier.body(content:) in conformance _OffsetEffect()
{
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ColorMonochromeEffect._Resolved@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, void *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetDeltaModifier(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance _ColorMonochromeEffect._Resolved()
{
}

void protocol witness for ViewModifier.body(content:) in conformance _ColorMonochromeEffect()
{
}

void protocol witness for ViewModifier.body(content:) in conformance _FixedSizeLayout()
{
}

void protocol witness for ViewModifier.body(content:) in conformance _RotationEffect()
{
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ForegroundColorModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, unint64_t *))
{
  unsigned int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  _OWORD v7[2] = *(_OWORD *)(a2 + 32);
  float64x2_t v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewInputsModifier._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t specialized static ViewInputsModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, Swift::UInt *))
{
  uint64_t v4 = *(void *)a2;
  int v5 = *(_DWORD *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  outlined retain of _ViewInputs(a2);
  uint64_t v10 = swift_retain();
  uint64_t v11 = specialized find<A>(_:key:)(v10);
  if (!v11 || (Swift::UInt value = v4, *(unsigned char *)(v11 + 72) != 1))
  {
    type metadata accessor for TypedElement<VariantThatFitsFlag>(0, &lazy cache variable for type metadata for TypedElement<PreferTextLayoutManagerInput>, (uint64_t)&type metadata for PreferTextLayoutManagerInput, (uint64_t)&protocol witness table for PreferTextLayoutManagerInput, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TypedElement);
    *(unsigned char *)(swift_allocObject() + 72) = 1;
    Swift::UInt value = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for PreferTextLayoutManagerInput, 0, v4).value;
  }
  int v13 = *(_DWORD *)(a2 + 80);
  uint64_t v14 = *(void *)(a2 + 48);
  long long v18 = *(_OWORD *)(a2 + 56);
  uint64_t v15 = *(void *)(a2 + 72);
  swift_release();
  Swift::UInt v20 = value;
  int v21 = v5;
  uint64_t v22 = v6;
  uint64_t v23 = v7;
  uint64_t v24 = v8;
  uint64_t v25 = v9;
  uint64_t v26 = v14;
  long long v27 = v18;
  uint64_t v28 = v15;
  int v29 = v13;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v16 = swift_bridgeObjectRetain();
  a3(v16, &v20);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::UInt value;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  long long v18;
  Swift::UInt v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  long long v27;
  uint64_t v28;
  int v29;

  type metadata accessor for Date?(0);
  uint64_t v4 = *(void *)a2;
  int v5 = *(_DWORD *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  outlined retain of _ViewInputs(a2);
  AGGraphCreateOffsetAttribute2();
  uint64_t v10 = AGCreateWeakAttribute();
  uint64_t v11 = swift_retain();
  if (!specialized find<A>(_:key:)(v11) || (Swift::UInt value = v4, (static WeakAttribute.== infix(_:_:)() & 1) == 0))
  {
    type metadata accessor for TypedElement<VariantThatFitsFlag>(0, &lazy cache variable for type metadata for TypedElement<ReferenceDateInput>, (uint64_t)&type metadata for ReferenceDateInput, (uint64_t)&protocol witness table for ReferenceDateInput, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TypedElement);
    *(void *)(swift_allocObject() + 72) = v10;
    Swift::UInt value = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for ReferenceDateInput, 0, v4).value;
  }
  int v13 = *(_DWORD *)(a2 + 80);
  uint64_t v14 = *(void *)(a2 + 48);
  long long v18 = *(_OWORD *)(a2 + 56);
  uint64_t v15 = *(void *)(a2 + 72);
  swift_release();
  Swift::UInt v20 = value;
  int v21 = v5;
  uint64_t v22 = v6;
  uint64_t v23 = v7;
  uint64_t v24 = v8;
  uint64_t v25 = v9;
  uint64_t v26 = v14;
  long long v27 = v18;
  uint64_t v28 = v15;
  int v29 = v13;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v16 = swift_bridgeObjectRetain();
  a3(v16, &v20);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t specialized static ViewInputsModifier._makeView(modifier:inputs:body:)(unsigned int a1, uint64_t a2, void (*a3)(uint64_t, unint64_t *))
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  unint64_t v5 = *(void *)a2;
  int v6 = *(_DWORD *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 16);
  int v19 = *(_DWORD *)(a2 + 36);
  uint64_t v8 = *(void *)(a2 + 40);
  int v9 = *(_DWORD *)(a2 + 32) | 0x20;
  uint64_t v10 = *(void *)(a2 + 24);
  swift_beginAccess();
  unint64_t v21 = __PAIR64__(*(_DWORD *)(v7 + 16), a1);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type _ForegroundColorModifier.ChildEnvironment and conformance _ForegroundColorModifier.ChildEnvironment();
  int v11 = Attribute.init<A>(body:value:flags:update:)();
  uint64_t v12 = MEMORY[0x263F8EE78];
  unint64_t v13 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  type metadata accessor for MutableBox<CachedEnvironment>();
  uint64_t v14 = swift_allocObject();
  *(_DWORD *)(v14 + 16) = v11;
  *(void *)(v14 + 24) = v12;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_OWORD *)(v14 + 64) = 0u;
  *(_WORD *)(v14 + 80) = 256;
  *(void *)(v14 + 88) = v13;
  swift_release();
  int v15 = *(_DWORD *)(a2 + 80);
  uint64_t v16 = *(void *)(a2 + 48);
  unint64_t v21 = v5;
  int v22 = v6;
  uint64_t v23 = v14;
  uint64_t v24 = v10;
  int v25 = v9;
  int v26 = v19;
  uint64_t v27 = v8;
  uint64_t v28 = v16;
  long long v29 = *(_OWORD *)(a2 + 56);
  uint64_t v30 = *(void *)(a2 + 72);
  int v31 = v15;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v17 = swift_bridgeObjectRetain();
  a3(v17, &v21);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ForegroundColorModifier@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, void *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetDeltaModifier(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance _ForegroundColorModifier()
{
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance VariantThatFitsModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, Swift::UInt *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  _OWORD v7[2] = *(_OWORD *)(a2 + 32);
  float64x2_t v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance VariantThatFitsModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, Swift::UInt *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  _OWORD v7[2] = *(_OWORD *)(a2 + 32);
  float64x2_t v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

void protocol witness for ViewModifier.body(content:) in conformance VariantThatFitsModifier()
{
}

void protocol witness for ViewModifier.body(content:) in conformance CustomModifier<A, B>()
{
}

void protocol witness for ViewModifier.body(content:) in conformance _PaddingLayout()
{
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance DefaultStyleContextWriter(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  _OWORD v7[2] = *(_OWORD *)(a2 + 32);
  float64x2_t v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance DefaultStyleContextWriter(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  _OWORD v7[2] = *(_OWORD *)(a2 + 32);
  float64x2_t v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

void protocol witness for ViewModifier.body(content:) in conformance DefaultStyleContextWriter()
{
}

void protocol witness for ViewModifier.body(content:) in conformance _BlendModeEffect()
{
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ExtendedBlendModeEffect@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, void *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetDeltaModifier(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance _ExtendedBlendModeEffect()
{
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance GraphicsBlendModeEffect@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, void *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetDeltaModifier(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance GraphicsBlendModeEffect()
{
}

void protocol witness for ViewModifier.body(content:) in conformance _ColorMatrixEffect()
{
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _PremultipliedColorMatrixEffect@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, void *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetDeltaModifier(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance _PremultipliedColorMatrixEffect()
{
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance PrivacyRedactionViewModifier.Transform<A>.PrivacyEffect(int *a1, uint64_t *a2, void (*a3)(void))
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance PrivacyRedactionViewModifier@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, void *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetDeltaModifier(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance PrivacyRedactionViewModifier()
{
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ContrastEffect@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, void *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetDeltaModifier(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance _ContrastEffect()
{
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance MatchedGeometryEffect2<A, B>(int *a1, uint64_t *a2, void (*a3)(void))
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OverlayStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(void))
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _OverlayShapeModifier<A, B>(int *a1, uint64_t *a2, void (*a3)(void))
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance MoveTransition.MoveLayout@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, void *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetDeltaModifier(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance MoveTransition.MoveLayout()
{
}

void protocol witness for ViewModifier.body(content:) in conformance _BlurEffect()
{
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ColorInvertEffect@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, void *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetDeltaModifier(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance _ColorInvertEffect()
{
}

void protocol witness for ViewModifier.body(content:) in conformance _ForegroundLayerViewModifier()
{
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ForegroundLayerColorMatrixEffect@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, void *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetDeltaModifier(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance _ForegroundLayerColorMatrixEffect()
{
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ForegroundLayerLevelViewModifier@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, void *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetDeltaModifier(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance _ForegroundLayerLevelViewModifier()
{
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ForegroundLayerLevelColorMatrixEffect@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, void *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetDeltaModifier(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance _ForegroundLayerLevelColorMatrixEffect()
{
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _GrayscaleEffect@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, void *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetDeltaModifier(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance _GrayscaleEffect()
{
}

void protocol witness for ViewModifier.body(content:) in conformance _Rotation3DEffect()
{
}

void protocol witness for ViewModifier.body(content:) in conformance _OpacityEffect()
{
}

void protocol witness for ViewModifier.body(content:) in conformance OpacityRendererEffect()
{
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ShadowEffect._Resolved@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, void *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetDeltaModifier(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance _ShadowEffect()
{
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _DrawingGroupEffect@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, void *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetDeltaModifier(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance _DrawingGroupEffect()
{
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _BrightnessEffect@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, void *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetDeltaModifier(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance _BrightnessEffect()
{
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance GraphicsFilter@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, void *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetDeltaModifier(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance GraphicsFilter()
{
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance GraphicsBlendMode@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, void *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetDeltaModifier(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance GraphicsBlendMode()
{
}

void protocol witness for ViewModifier.body(content:) in conformance _GeometryGroupEffect()
{
}

void protocol witness for ViewModifier.body(content:) in conformance _CompositingGroupEffect()
{
}

void protocol witness for ViewModifier.body(content:) in conformance VariableBlurEffect()
{
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance VariableBlurStyle@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, void *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetDeltaModifier(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance VariableBlurStyle()
{
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance MaterialView<A>(int *a1, uint64_t *a2, void (*a3)(void))
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance HitTestBindingModifier@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, void *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetDeltaModifier(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance HitTestBindingModifier()
{
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ShaderFilterEffect@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, void *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetDeltaModifier(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance _ShaderFilterEffect()
{
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance Shader.ResolvedShader@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, void *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetDeltaModifier(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance Shader.ResolvedShader()
{
}

void protocol witness for ViewModifier.body(content:) in conformance _AspectRatioLayout()
{
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ReferenceDateModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, Swift::UInt *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  _OWORD v7[2] = *(_OWORD *)(a2 + 32);
  float64x2_t v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewInputsModifier._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ReferenceDateModifier@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, void *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetDeltaModifier(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance ReferenceDateModifier()
{
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ViewListArchivedAnimation.Effect@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, void *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetDeltaModifier(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance ViewListArchivedAnimation.Effect()
{
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance PreferTextLayoutManagerInputModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, Swift::UInt *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  _OWORD v7[2] = *(_OWORD *)(a2 + 32);
  float64x2_t v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewInputsModifier._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance PreferTextLayoutManagerInputModifier@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, void *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetDeltaModifier(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance PreferTextLayoutManagerInputModifier()
{
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _FillMaskEffect<A>(int *a1, uint64_t *a2, void (*a3)(void))
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance LineLimitModifier(unsigned int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance LineLimitModifier(a1, a2, a3, a4, a5, a6, (void (*)(uint64_t, uint64_t *))specialized static EnvironmentModifier._makeInputs(modifier:inputs:));
}

void protocol witness for ViewModifier.body(content:) in conformance LineLimitModifier()
{
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _EnvironmentBackgroundStyleModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  return static ViewInputsModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, (uint64_t)&protocol witness table for _EnvironmentBackgroundStyleModifier<A>);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ForegroundStyleModifier2<A, B>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  return static ViewInputsModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, (uint64_t)&protocol witness table for _ForegroundStyleModifier2<A, B>);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ForegroundStyleModifier3<A, B, C>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  return static ViewInputsModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, (uint64_t)&protocol witness table for _ForegroundStyleModifier3<A, B, C>);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ForegroundStyleModifier3<A, B, C>(int *a1, uint64_t *a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  return static ViewInputsModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, (uint64_t)&protocol witness table for _ForegroundStyleModifier3<A, B, C>);
}

void protocol witness for ViewModifier.body(content:) in conformance ScrapeableAttachmentViewModifier()
{
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance TruePreferenceWritingModifier<A>(int *a1, uint64_t *a2, void (*a3)(void))
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _LuminanceToAlphaEffect@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, void *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetDeltaModifier(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance _LuminanceToAlphaEffect()
{
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _AlignmentLayout@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, void *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetDeltaModifier(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance _AlignmentLayout()
{
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance LuminanceCurveEffect@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, void *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetDeltaModifier(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance LuminanceCurveEffect()
{
}

void protocol witness for ViewModifier.body(content:) in conformance _AppearanceActionModifier()
{
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _EnabledScrollClipEffect<A>(int *a1, uint64_t *a2, void (*a3)(void))
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _AnchorWritingModifier2<A, B>(int *a1, uint64_t *a2, void (*a3)(void))
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance AutomaticStyleOverrideModifier<A, B>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static ViewModifier<>._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, a6, (uint64_t)&protocol witness table for AutomaticStyleOverrideModifier<A, B>);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance AutomaticStyleOverrideModifier<A, B>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static ViewModifier<>._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, a6, (uint64_t)&protocol witness table for AutomaticStyleOverrideModifier<A, B>);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance HighPriorityGestureModifier<A>(int *a1, uint64_t *a2, void (*a3)(void))
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3);
}

void protocol witness for ViewModifier.body(content:) in conformance _FrameLayout()
{
}

void protocol witness for ViewModifier.body(content:) in conformance _FlexFrameLayout()
{
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance TextSuffixModifier(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  int v4 = *a1;
  long long v5 = *(_OWORD *)(a2 + 48);
  _OWORD v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  uint64_t v8[4] = *(_OWORD *)(a2 + 64);
  int v9 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4, (void (*)(uint64_t *, long long *))specialized static TextSuffixModifier._makeInputs(modifier:inputs:));
}

void protocol witness for ViewModifier.body(content:) in conformance TextSuffixModifier()
{
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _TextRendererViewModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  return static ViewInputsModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, (uint64_t)&protocol witness table for _TextRendererViewModifier<A>);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _TextRendererViewModifier<A>(int *a1, uint64_t *a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  return static ViewInputsModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, (uint64_t)&protocol witness table for _TextRendererViewModifier<A>);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ArchivedAnimationModifier<A>.Effect(int *a1, uint64_t *a2, void (*a3)(void))
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ContainerShapeModifier<A>(int *a1, uint64_t *a2, void (*a3)(void))
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance SystemContainerShapeModifier<A>(int *a1, uint64_t *a2, void (*a3)(void))
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance LayoutPriorityLayout@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, void *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetDeltaModifier(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance LayoutPriorityLayout()
{
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance TransactionalPreferenceActionModifier<A>(int *a1, uint64_t *a2, void (*a3)(void))
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance UnanimatableModifier(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *))
{
  int v4 = *((_DWORD *)a2 + 2);
  uint64_t v5 = a2[2];
  int v6 = *((_DWORD *)a2 + 8);
  uint64_t v7 = a2[5];
  uint64_t v8 = a2[6];
  int v9 = *((_DWORD *)a2 + 20);
  int v10 = *((_DWORD *)a2 + 9) | 1;
  uint64_t v13 = *a2;
  int v14 = v4;
  uint64_t v15 = v5;
  uint64_t v16 = a2[3];
  int v17 = v6;
  int v18 = v10;
  uint64_t v19 = v7;
  uint64_t v20 = v8;
  long long v21 = *(_OWORD *)(a2 + 7);
  uint64_t v22 = a2[9];
  int v23 = v9;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v11 = swift_bridgeObjectRetain_n();
  a3(v11, &v13);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance UnanimatableModifier(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *))
{
  int v4 = *((_DWORD *)a2 + 2);
  uint64_t v5 = a2[2];
  int v6 = *((_DWORD *)a2 + 8);
  uint64_t v7 = a2[5];
  int v8 = *((_DWORD *)a2 + 16);
  uint64_t v9 = a2[9];
  char v10 = *((unsigned char *)a2 + 80);
  int v11 = *((_DWORD *)a2 + 9) | 1;
  uint64_t v14 = *a2;
  int v15 = v4;
  uint64_t v16 = v5;
  uint64_t v17 = a2[3];
  int v18 = v6;
  int v19 = v11;
  uint64_t v20 = v7;
  long long v21 = *((_OWORD *)a2 + 3);
  int v22 = v8;
  uint64_t v23 = v9;
  char v24 = v10;
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  swift_retain_n();
  uint64_t v12 = swift_bridgeObjectRetain_n();
  a3(v12, &v14);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

void protocol witness for ViewModifier.body(content:) in conformance UnanimatableModifier()
{
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance VerticalStackOrientationModifier@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, void *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetDeltaModifier(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance VerticalStackOrientationModifier()
{
}

void specialized ViewModifier.bodyError()()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v0._object = (void *)0x8000000246225030;
  v0._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v0);
  v1._uint64_t countAndFlagsBits = 46;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v0._object = (void *)0x8000000246225010;
  v0._uint64_t countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v0);
  v1._uint64_t countAndFlagsBits = 46;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v0._object = (void *)0x8000000246224D60;
  v0._uint64_t countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v0);
  v1._uint64_t countAndFlagsBits = 46;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v0._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._uint64_t countAndFlagsBits = 46;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t static UnaryViewModifier._viewListCount(inputs:body:)()
{
  return 1;
}

uint64_t static EmptyModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t *))
{
  int v3 = *((_DWORD *)a2 + 2);
  uint64_t v4 = a2[2];
  int v5 = *((_DWORD *)a2 + 20);
  uint64_t v8 = *a2;
  int v9 = v3;
  uint64_t v10 = v4;
  long long v6 = *(_OWORD *)(a2 + 5);
  long long v11 = *(_OWORD *)(a2 + 3);
  long long v12 = v6;
  long long v13 = *(_OWORD *)(a2 + 7);
  uint64_t v14 = a2[9];
  int v15 = v5;
  return a3(a1, &v8);
}

uint64_t static EmptyModifier._makeViewList(modifier:inputs:body:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t *))
{
  int v3 = *((_DWORD *)a2 + 2);
  uint64_t v4 = a2[2];
  uint64_t v5 = a2[5];
  int v6 = *((_DWORD *)a2 + 16);
  uint64_t v7 = a2[9];
  char v8 = *((unsigned char *)a2 + 80);
  uint64_t v10 = *a2;
  int v11 = v3;
  uint64_t v12 = v4;
  long long v13 = *(_OWORD *)(a2 + 3);
  uint64_t v14 = v5;
  long long v15 = *((_OWORD *)a2 + 3);
  int v16 = v6;
  uint64_t v17 = v7;
  char v18 = v8;
  return a3(a1, &v10);
}

uint64_t static EmptyModifier._viewListCount(inputs:body:)(long long *a1, uint64_t (*a2)(long long *))
{
  int v2 = *((_DWORD *)a1 + 4);
  uint64_t v3 = *((void *)a1 + 3);
  long long v5 = *a1;
  int v6 = v2;
  uint64_t v7 = v3;
  return a2(&v5);
}

void EmptyModifier.body(content:)()
{
}

void protocol witness for ViewModifier.body(content:) in conformance EmptyModifier()
{
}

uint64_t ModifiedContent.content.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t ModifiedContent.content.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*ModifiedContent.content.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

uint64_t ModifiedContent.modifier.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 36));
}

uint64_t ModifiedContent.modifier.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 24) - 8) + 40))(v2 + *(int *)(a2 + 36), a1);
}

uint64_t (*ModifiedContent.modifier.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

void ModifiedContent<>.body.getter()
{
}

void protocol witness for View.body.getter in conformance <> ModifiedContent<A, B>()
{
}

uint64_t static ModifiedContent<>._viewListCount(inputs:body:)(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7 = *((_DWORD *)a1 + 4);
  uint64_t v8 = *((void *)a1 + 3);
  long long v11 = *a1;
  int v12 = v7;
  uint64_t v13 = v8;
  void v10[2] = a4;
  v10[3] = a5;
  void v10[4] = a6;
  void v10[5] = a7;
  void v10[6] = a2;
  v10[7] = a3;
  return (*(uint64_t (**)(long long *, uint64_t (*)(long long *), void *, uint64_t, uint64_t))(a7 + 40))(&v11, partial apply for closure #1 in static ModifiedContent<>._viewListCount(inputs:body:), v10, a5, a7);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance <> ModifiedContent<A, B>(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static ModifiedContent<>._viewListCount(inputs:body:)(a1, a2, a3, *(void *)(a4 + 16), *(void *)(a4 + 24), *(void *)(a5 - 8), *(void *)(a5 - 16));
}

uint64_t ModifiedContent.customViewDebugMirror.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Mirror();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t protocol witness for CustomViewDebugReflectable.customViewDebugMirror.getter in conformance ModifiedContent<A, B>@<X0>(uint64_t a1@<X8>)
{
  return ModifiedContent.customViewDebugMirror.getter(a1);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance AppearanceAnimationView<A, B>.AnimationEffect(int *a1, uint64_t *a2, void (*a3)(void))
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _BackgroundShapeModifier<A, B>(int *a1, uint64_t *a2, void (*a3)(void))
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ContentTransitionModifier@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, void *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetDeltaModifier(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance _ContentTransitionModifier()
{
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ContentTransitionGroup@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, void *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetDeltaModifier(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance _ContentTransitionGroup()
{
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ContentTransitionEffect@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, void *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetDeltaModifier(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance ContentTransitionEffect()
{
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ApplyTransitionModifier<A>(int *a1, uint64_t *a2, void (*a3)(void))
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _SaturationEffect@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, void *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetDeltaModifier(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance _SaturationEffect()
{
}

void protocol witness for ViewModifier.body(content:) in conformance _SafeAreaIgnoringLayout()
{
}

void protocol witness for ViewModifier.body(content:) in conformance _SafeAreaRegionsIgnoringLayout()
{
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ColorMultiplyEffect._Resolved@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, void *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetDeltaModifier(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance _ColorMultiplyEffect()
{
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _AnchorTransformModifier2<A, B>(int *a1, uint64_t *a2, void (*a3)(void))
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _TransactionModifier(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  _OWORD v7[2] = *(_OWORD *)(a2 + 32);
  float64x2_t v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

void protocol witness for ViewModifier.body(content:) in conformance _TransactionModifier()
{
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance SpacingLayout@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, void *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetDeltaModifier(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance SpacingLayout()
{
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _SafeAreaInsetsModifier@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, void *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetDeltaModifier(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance _SafeAreaInsetsModifier()
{
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance SystemColorSchemeModifier(unsigned int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance LineLimitModifier(a1, a2, a3, a4, a5, a6, (void (*)(uint64_t, uint64_t *))specialized static EnvironmentModifier._makeInputs(modifier:inputs:));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance LineLimitModifier(unsigned int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, uint64_t *))
{
  uint64_t v9 = *a1;
  int v10 = *((_DWORD *)a2 + 2);
  uint64_t v11 = a2[2];
  uint64_t v12 = a2[5];
  uint64_t v13 = a2[6];
  int v14 = *((_DWORD *)a2 + 20);
  uint64_t v26 = *a2;
  int v27 = v10;
  uint64_t v28 = v11;
  long long v29 = *(_OWORD *)(a2 + 3);
  uint64_t v30 = v12;
  uint64_t v31 = v13;
  long long v32 = *(_OWORD *)(a2 + 7);
  uint64_t v33 = a2[9];
  int v34 = v14;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  a7(v9, &v26);
  uint64_t v17 = v26;
  int v18 = v27;
  uint64_t v19 = v28;
  long long v20 = v29;
  uint64_t v21 = v30;
  uint64_t v22 = v31;
  long long v23 = v32;
  uint64_t v24 = v33;
  int v25 = v34;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v15 = swift_bridgeObjectRetain();
  a3(v15, &v17);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance SystemColorSchemeModifier(unsigned int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance LineLimitModifier(a1, a2, a3, a4, a5, a6, (void (*)(uint64_t, uint64_t *))specialized static EnvironmentModifier._makeInputs(modifier:inputs:));
}

void protocol witness for ViewModifier.body(content:) in conformance SystemColorSchemeModifier()
{
}

void protocol witness for ViewModifier.body(content:) in conformance _ScaleEffect()
{
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _InsetViewModifier<A>(int *a1, uint64_t *a2, void (*a3)(void))
{
  return static MultiViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _HueRotationEffect@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, void *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetDeltaModifier(a1, a2, a3, specialized _ViewListOutputs.multiModifier<A>(_:inputs:), a4);
}

void protocol witness for ViewModifier.body(content:) in conformance _HueRotationEffect()
{
}

void specialized ViewModifier<>.body(content:)()
{
}

uint64_t sub_2460484A0()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_2460484D8()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_246048510()
{
  return swift_deallocObject();
}

uint64_t sub_246048520()
{
  return swift_deallocObject();
}

void specialized ViewModifier.bodyError()(uint64_t a1, void *a2)
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = a1;
  v4._object = a2;
  String.append(_:)(v4);
  v5._uint64_t countAndFlagsBits = 46;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized ModifiedContent<>.body.getter()
{
}

uint64_t partial apply for closure #1 in static ModifiedContent<>._viewListCount(inputs:body:)(long long *a1)
{
  uint64_t v2 = v1[4];
  uint64_t v3 = v1[6];
  uint64_t v4 = v1[7];
  int v5 = *((_DWORD *)a1 + 4);
  uint64_t v6 = *((void *)a1 + 3);
  long long v8 = *a1;
  int v9 = v5;
  uint64_t v10 = v6;
  return (*(uint64_t (**)(long long *, uint64_t, uint64_t))(v2 + 40))(&v8, v3, v4);
}

uint64_t dispatch thunk of static ViewModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 24))();
}

uint64_t dispatch thunk of static ViewModifier._makeViewList(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 32))();
}

uint64_t dispatch thunk of static ViewModifier._viewListCount(inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 40))();
}

uint64_t dispatch thunk of ViewModifier.body(content:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of static ViewInputsModifier.graphInputsSemantics.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of static ViewInputsModifier._makeViewInputs(modifier:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

void Image.Headroom.init(rawValue:)(double *a1@<X8>, double a2@<D0>)
{
  *a1 = a2;
}

BOOL static Image.DynamicRange.Storage.< infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

uint64_t Image.DynamicRange.Storage.rawValue.getter()
{
  return *v0;
}

uint64_t Image.DynamicRange.Storage.init(rawValue:)@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v2 = result;
  if (result >= 3u) {
    char v2 = 3;
  }
  *a2 = v2;
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Image.DynamicRange.Storage@<X0>(unsigned __int8 *a1@<X0>, char *a2@<X8>)
{
  return Image.DynamicRange.Storage.init(rawValue:)(*a1, a2);
}

void Image.DynamicRange.storage.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *Image.DynamicRange.storage.setter(unsigned char *result)
{
  *Swift::String v1 = *result;
  return result;
}

uint64_t (*Image.DynamicRange.storage.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

unsigned char *Image.DynamicRange.init(storage:)@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void static Image.DynamicRange.standard.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void static Image.DynamicRange.constrainedHigh.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void static Image.DynamicRange.high.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

double Image.DynamicRange.maxHeadroom.getter@<D0>(uint64_t *a1@<X8>)
{
  if (*v1)
  {
    if (*v1 == 1)
    {
      if (one-time initialization token for constrainedHigh != -1) {
        swift_once();
      }
      uint64_t v3 = &static Image.Headroom.constrainedHigh;
    }
    else
    {
      if (one-time initialization token for high != -1) {
        swift_once();
      }
      uint64_t v3 = &static Image.Headroom.high;
    }
  }
  else
  {
    if (one-time initialization token for standard != -1) {
      swift_once();
    }
    uint64_t v3 = &static Image.Headroom.standard;
  }
  double result = *(double *)v3;
  *a1 = *v3;
  return result;
}

void Image.DynamicRange.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

BOOL static Image.DynamicRange.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int Image.DynamicRange.hashValue.getter()
{
  Swift::UInt8 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

double Image.Headroom.rawValue.getter()
{
  return *(double *)v0;
}

BOOL static Image.Headroom.< infix(_:_:)(double *a1, double *a2)
{
  return *a1 < *a2;
}

double static Image.Headroom.standard.getter@<D0>(void *a1@<X8>)
{
  return static Calendar.Component.Magnitude.max.getter(&one-time initialization token for standard, (double *)&static Image.Headroom.standard, a1);
}

void one-time initialization function for constrainedHigh()
{
  static Image.Headroom.constrainedHigh = 0x4000000000000000;
}

double static Image.Headroom.constrainedHigh.getter@<D0>(void *a1@<X8>)
{
  return static Calendar.Component.Magnitude.max.getter(&one-time initialization token for constrainedHigh, (double *)&static Image.Headroom.constrainedHigh, a1);
}

void one-time initialization function for highHLG()
{
  static Image.Headroom.highHLG = 0x4014000000000000;
}

double static Image.Headroom.highHLG.getter@<D0>(void *a1@<X8>)
{
  return static Calendar.Component.Magnitude.max.getter(&one-time initialization token for highHLG, (double *)&static Image.Headroom.highHLG, a1);
}

void one-time initialization function for high()
{
  static Image.Headroom.high = 0x4020000000000000;
}

double static Image.Headroom.high.getter@<D0>(void *a1@<X8>)
{
  return static Calendar.Component.Magnitude.max.getter(&one-time initialization token for high, (double *)&static Image.Headroom.high, a1);
}

uint64_t Image.allowedDynamicRange(_:)(char *a1, uint64_t a2)
{
  char v3 = *a1;
  type metadata accessor for ImageProviderBox<Image.DynamicRangeProvider>();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a2;
  *(unsigned char *)(v4 + 24) = v3;
  swift_retain();
  return v4;
}

void type metadata accessor for ImageProviderBox<Image.DynamicRangeProvider>()
{
  if (!lazy cache variable for type metadata for ImageProviderBox<Image.DynamicRangeProvider>)
  {
    lazy protocol witness table accessor for type Image.DynamicRangeProvider and conformance Image.DynamicRangeProvider();
    unint64_t v0 = type metadata accessor for ImageProviderBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ImageProviderBox<Image.DynamicRangeProvider>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Image.DynamicRangeProvider and conformance Image.DynamicRangeProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type Image.DynamicRangeProvider and conformance Image.DynamicRangeProvider;
  if (!lazy protocol witness table cache variable for type Image.DynamicRangeProvider and conformance Image.DynamicRangeProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.DynamicRangeProvider and conformance Image.DynamicRangeProvider);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Image.DynamicRangeProvider and conformance Image.DynamicRangeProvider;
  if (!lazy protocol witness table cache variable for type Image.DynamicRangeProvider and conformance Image.DynamicRangeProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &lazy protocol witness table cache variable for type Image.DynamicRangeProvider and conformance Image.DynamicRangeProvider);
  }
  return result;
}

uint64_t protocol witness for ImageProvider.resolve(in:) in conformance Image.DynamicRangeProvider(uint64_t a1)
{
  char v2 = v1;
  uint64_t v4 = type metadata accessor for ImageResolutionContext();
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v1;
  int v8 = *((unsigned __int8 *)v2 + 8);
  outlined init with copy of ImageResolutionContext(a1, (uint64_t)v6);
  if (v8 != 3) {
    v6[*(int *)(v4 + 36)] = v8;
  }
  (*(void (**)(char *))(*(void *)v7 + 80))(v6);
  return outlined destroy of ImageResolutionContext((uint64_t)v6);
}

uint64_t protocol witness for ImageProvider.resolveNamedImage(in:) in conformance Image.DynamicRangeProvider(uint64_t a1)
{
  char v2 = v1;
  uint64_t v4 = type metadata accessor for ImageResolutionContext();
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v1;
  int v8 = *((unsigned __int8 *)v2 + 8);
  outlined init with copy of ImageResolutionContext(a1, (uint64_t)v6);
  if (v8 != 3) {
    v6[*(int *)(v4 + 36)] = v8;
  }
  (*(void (**)(char *))(*(void *)v7 + 88))(v6);
  return outlined destroy of ImageResolutionContext((uint64_t)v6);
}

uint64_t EnvironmentValues.allowedDynamicRange.getter@<X0>(char *a1@<X8>)
{
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a1);
    swift_release_n();
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, a1);
  }
  return swift_release_n();
}

uint64_t key path getter for EnvironmentValues.allowedDynamicRange : EnvironmentValues@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, &v6);
    swift_release_n();
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, &v6);
  }
  uint64_t result = swift_release_n();
  *a2 = v6;
  return result;
}

uint64_t EnvironmentValues.allowedDynamicRange.setter(unsigned __int8 *a1)
{
  uint64_t v2 = *v1;
  unsigned __int8 v3 = *a1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, v3);
  swift_release();
  if (v1[1])
  {
    uint64_t v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v2, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t (*EnvironmentValues.allowedDynamicRange.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v2 = (char *)(a1 + 24);
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, v2);
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.AllowedDynamicRangeKey>();
    BloomFilter.init(hashValue:)(v4);
    uint64_t v5 = swift_retain_n();
    uint64_t v6 = specialized find1<A>(_:key:filter:)(v5, v9);
    if (v6) {
      char v7 = *(unsigned char *)(v6 + 72);
    }
    else {
      char v7 = 3;
    }
    *uint64_t v2 = v7;
  }
  swift_release_n();
  return EnvironmentValues.allowedDynamicRange.modify;
}

uint64_t EnvironmentValues.allowedDynamicRange.modify(uint64_t a1)
{
  unsigned __int8 v2 = *(unsigned char *)(a1 + 24);
  uint64_t v3 = *(uint64_t **)(a1 + 16);
  uint64_t v4 = *v3;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v3, v2);
  swift_release();
  if (v3[1])
  {
    uint64_t v5 = **(void **)(a1 + 16);
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v5);
    swift_release();
    swift_release();
  }

  return swift_release();
}

void type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.AllowedDynamicRangeKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AllowedDynamicRangeKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AllowedDynamicRangeKey>);
    }
  }
}

uint64_t EnvironmentValues.maxAllowedDynamicRange.getter@<X0>(char *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 8);
  swift_retain();
  uint64_t v4 = swift_retain();
  specialized EnvironmentValues.subscript.getter(v4, v3, a1);
  swift_release();

  return swift_release();
}

uint64_t key path getter for EnvironmentValues.maxAllowedDynamicRange : EnvironmentValues@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  swift_retain();
  uint64_t v4 = swift_retain();
  specialized EnvironmentValues.subscript.getter(v4, v3, &v6);
  swift_release();
  uint64_t result = swift_release();
  *a2 = v6;
  return result;
}

uint64_t EnvironmentValues.maxAllowedDynamicRange.setter(unsigned __int8 *a1)
{
  return specialized EnvironmentValues.subscript.setter(*a1);
}

uint64_t (*EnvironmentValues.maxAllowedDynamicRange.modify(void *a1))(uint64_t a1)
{
  *a1 = v1;
  unsigned __int8 v2 = (char *)(a1 + 1);
  uint64_t v3 = *(void *)(v1 + 8);
  swift_retain();
  uint64_t v4 = swift_retain();
  specialized EnvironmentValues.subscript.getter(v4, v3, v2);
  swift_release();
  swift_release();
  return EnvironmentValues.maxAllowedDynamicRange.modify;
}

uint64_t EnvironmentValues.maxAllowedDynamicRange.modify(uint64_t a1)
{
  return specialized EnvironmentValues.subscript.setter(*(unsigned char *)(a1 + 8));
}

void static EnvironmentValues.MaxAllowedDynamicRangeKey.defaultValue.getter(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t Image.DynamicRange.protobufValue.getter()
{
  return *v0;
}

unint64_t Image.DynamicRange.init(protobufValue:)@<X0>(unint64_t result@<X0>, char *a2@<X8>)
{
  char v2 = 3;
  if (result < 3) {
    char v2 = result;
  }
  *a2 = v2;
  return result;
}

unint64_t lazy protocol witness table accessor for type Image.DynamicRange.Storage and conformance Image.DynamicRange.Storage()
{
  unint64_t result = lazy protocol witness table cache variable for type Image.DynamicRange.Storage and conformance Image.DynamicRange.Storage;
  if (!lazy protocol witness table cache variable for type Image.DynamicRange.Storage and conformance Image.DynamicRange.Storage)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.DynamicRange.Storage and conformance Image.DynamicRange.Storage);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Image.DynamicRange and conformance Image.DynamicRange()
{
  unint64_t result = lazy protocol witness table cache variable for type Image.DynamicRange and conformance Image.DynamicRange;
  if (!lazy protocol witness table cache variable for type Image.DynamicRange and conformance Image.DynamicRange)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.DynamicRange and conformance Image.DynamicRange);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Image.Headroom and conformance Image.Headroom()
{
  unint64_t result = lazy protocol witness table cache variable for type Image.Headroom and conformance Image.Headroom;
  if (!lazy protocol witness table cache variable for type Image.Headroom and conformance Image.Headroom)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.Headroom and conformance Image.Headroom);
  }
  return result;
}

unint64_t protocol witness for ProtobufEnum.init(protobufValue:) in conformance Image.DynamicRange@<X0>(unint64_t result@<X0>, char *a2@<X8>)
{
  char v2 = 3;
  if (result < 3) {
    char v2 = result;
  }
  *a2 = v2;
  return result;
}

uint64_t sub_246049400(unsigned __int8 *a1)
{
  unsigned __int8 v2 = *a1;
  return EnvironmentValues.allowedDynamicRange.setter(&v2);
}

uint64_t sub_24604943C(unsigned __int8 *a1)
{
  return specialized EnvironmentValues.subscript.setter(*a1);
}

ValueMetadata *type metadata accessor for Image.DynamicRange()
{
  return &type metadata for Image.DynamicRange;
}

unsigned char *storeEnumTagSinglePayload for Image.DynamicRange(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x246049544);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Image.DynamicRange.Storage()
{
  return &type metadata for Image.DynamicRange.Storage;
}

ValueMetadata *type metadata accessor for Image.Headroom()
{
  return &type metadata for Image.Headroom;
}

ValueMetadata *type metadata accessor for EnvironmentValues.MaxAllowedDynamicRangeKey()
{
  return &type metadata for EnvironmentValues.MaxAllowedDynamicRangeKey;
}

void *type metadata accessor for Image.DynamicRangeProvider()
{
  return &unk_26FA7D5B8;
}

ValueMetadata *type metadata accessor for EnvironmentValues.AllowedDynamicRangeKey()
{
  return &type metadata for EnvironmentValues.AllowedDynamicRangeKey;
}

unint64_t instantiation function for generic protocol witness table for Image.DynamicRangeProvider(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Image.DynamicRangeProvider and conformance Image.DynamicRangeProvider();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t specialized static Image.DynamicRangeProvider.== infix(_:_:)(unsigned __int8 *a1, uint64_t a2)
{
  int v2 = a1[8];
  int v3 = *(unsigned __int8 *)(a2 + 8);
  if (*(void *)a1 != *(void *)a2 && ((*(uint64_t (**)(void))(**(void **)a1 + 96))() & 1) == 0) {
    return 0;
  }
  if (v2 == 3)
  {
    if (v3 != 3) {
      return 0;
    }
  }
  else if (v3 == 3 || v2 != v3)
  {
    return 0;
  }
  return 1;
}

uint64_t SymbolVariants.Shape.path(in:cornerRadius:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>, CGFloat a5@<D2>, CGFloat a6@<D3>)
{
  if (!*v6)
  {
    if (!CGRectIsNull(*(CGRect *)&a3))
    {
      v24.origin.double x = a3;
      v24.origin.CGFloat y = a4;
      v24.size.CGFloat width = a5;
      v24.size.CGFloat height = a6;
      BOOL IsInfinite = CGRectIsInfinite(v24);
      uint64_t result = *(void *)&a3;
      char v18 = !IsInfinite;
      goto LABEL_19;
    }
    goto LABEL_16;
  }
  double v12 = 0.0;
  if (*(float *)&a1 >= 0.0) {
    double v12 = *(float *)&a1;
  }
  if (v12 > 0.5) {
    double v12 = 0.5;
  }
  if ((a1 & 0x100000000) != 0) {
    double v13 = 0.225;
  }
  else {
    double v13 = v12;
  }
  CGFloat v14 = a4;
  double Width = CGRectGetWidth(*(CGRect *)&a3);
  v21.origin.double x = a3;
  v21.origin.CGFloat y = a4;
  v21.size.CGFloat width = a5;
  v21.size.CGFloat height = a6;
  double Height = CGRectGetHeight(v21);
  if (Height < Width) {
    double Width = Height;
  }
  v22.origin.double x = a3;
  v22.origin.CGFloat y = a4;
  v22.size.CGFloat width = a5;
  v22.size.CGFloat height = a6;
  if (CGRectIsNull(v22))
  {
LABEL_16:
    uint64_t result = 0;
    char v18 = 6;
    a4 = 0.0;
    a5 = 0.0;
    a6 = 0.0;
    goto LABEL_19;
  }
  double v17 = v13 * Width;
  if (v17 == 0.0
    || (v23.origin.double x = a3, v23.origin.y = a4, v23.size.width = a5, v23.size.height = a6, CGRectIsInfinite(v23)))
  {
    char v18 = 0;
    uint64_t result = *(void *)&a3;
  }
  else
  {
    uint64_t result = swift_allocObject();
    *(CGFloat *)(result + 16) = a3;
    *(CGFloat *)(result + 24) = a4;
    *(CGFloat *)(result + 32) = a5;
    *(CGFloat *)(result + 40) = a6;
    char v18 = 2;
    a4 = 0.0;
    *(double *)(result + 48) = v17;
    *(double *)(result + 56) = v17;
    a5 = 0.0;
    a6 = 0.0;
    *(unsigned char *)(result + 64) = 1;
  }
LABEL_19:
  *(void *)a2 = result;
  *(CGFloat *)(a2 + 8) = a4;
  *(CGFloat *)(a2 + 16) = a5;
  *(CGFloat *)(a2 + 24) = a6;
  *(unsigned char *)(a2 + 32) = v18;
  return result;
}

uint64_t SymbolVariants.contains(_:)(unsigned __int8 *a1)
{
  int v2 = a1[1];
  int v3 = v1[1];
  BOOL v5 = v3 != 3 && v3 == v2;
  unsigned int v6 = v2 == 3 || v5;
  if ((*a1 & ~*v1) != 0) {
    return 0;
  }
  else {
    return v6;
  }
}

uint64_t EnvironmentValues.symbolVariants.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a1);
    swift_release_n();
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, a1);
  }
  return swift_release_n();
}

uint64_t EnvironmentValues.symbolsGrowToFitBackground.getter()
{
  uint64_t v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    char v2 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    swift_release_n();
    swift_release_n();
    return v2 & 1;
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    char v5 = specialized closure #1 in PropertyList.subscript.getter(v4);
    swift_release_n();
    return v5 & 1;
  }
}

uint64_t EnvironmentValues.symbolBackgroundCornerRadius.getter()
{
  uint64_t v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v2 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    swift_release_n();
  }
  else
  {
    uint64_t v3 = swift_retain_n();
    uint64_t v2 = specialized closure #1 in PropertyList.subscript.getter(v3, (uint64_t)&v5);
  }
  swift_release_n();
  return v2;
}

uint64_t SymbolVariants.Shape.suffix.getter()
{
  uint64_t v1 = 0x6572617571732ELL;
  if (*v0 != 1) {
    uint64_t v1 = 0x676E61746365722ELL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x656C637269632ELL;
  }
}

BOOL static SymbolVariants.Shape.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void SymbolVariants.Shape.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int SymbolVariants.Shape.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void one-time initialization function for square()
{
  static SymbolVariants.square = 256;
}

void *static SymbolVariants.square.getter@<X0>(unsigned char *a1@<X8>)
{
  return static SymbolVariants.circle.getter(&one-time initialization token for square, &static SymbolVariants.square, (char *)&static SymbolVariants.square + 1, a1);
}

void one-time initialization function for rectangle()
{
  static SymbolVariants.rectangle = 512;
}

void *static SymbolVariants.rectangle.getter@<X0>(unsigned char *a1@<X8>)
{
  return static SymbolVariants.circle.getter(&one-time initialization token for rectangle, &static SymbolVariants.rectangle, (char *)&static SymbolVariants.rectangle + 1, a1);
}

void SymbolVariants.circle.getter(_WORD *a1@<X8>)
{
  *a1 = *v1;
}

void SymbolVariants.square.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
  a1[1] = 1;
}

void SymbolVariants.rectangle.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
  a1[1] = 2;
}

void *static SymbolVariants.fill.getter@<X0>(unsigned char *a1@<X8>)
{
  return static SymbolVariants.circle.getter(&one-time initialization token for fill, &static SymbolVariants.fill, (char *)&static SymbolVariants.fill + 1, a1);
}

void *static SymbolVariants.background.getter@<X0>(unsigned char *a1@<X8>)
{
  return static SymbolVariants.circle.getter(&one-time initialization token for background, &static SymbolVariants.background, (char *)&static SymbolVariants.background + 1, a1);
}

void SymbolVariants.background.getter(unsigned char *a1@<X8>)
{
  char v2 = v1[1];
  *a1 = *v1 | 4;
  a1[1] = v2;
}

void one-time initialization function for slash()
{
  static SymbolVariants.slash = 770;
}

void *static SymbolVariants.slash.getter@<X0>(unsigned char *a1@<X8>)
{
  return static SymbolVariants.circle.getter(&one-time initialization token for slash, &static SymbolVariants.slash, (char *)&static SymbolVariants.slash + 1, a1);
}

void SymbolVariants.slash.getter(unsigned char *a1@<X8>)
{
  char v2 = v1[1];
  *a1 = *v1 | 2;
  a1[1] = v2;
}

unsigned char *SymbolVariants.formUnion(_:)(unsigned char *result)
{
  int v2 = result[1];
  *v1 |= *result;
  char v3 = v1[1];
  if (v2 != 3) {
    char v3 = v2;
  }
  v1[1] = v3;
  return result;
}

void SymbolVariants.hash(into:)()
{
  Swift::UInt v1 = v0[1];
  Hasher._combine(_:)(*v0);
  if (v1 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
}

uint64_t static SymbolVariants.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  int v2 = a1[1];
  int v3 = a2[1];
  if (v2 == 3)
  {
    if (v3 != 3) {
      return 0;
    }
  }
  else if (v3 == 3 || v2 != v3)
  {
    return 0;
  }
  return 1;
}

Swift::Int SymbolVariants.hashValue.getter()
{
  Swift::UInt v1 = v0[1];
  Swift::UInt8 v2 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v2);
  if (v1 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SymbolVariants()
{
  Swift::UInt v1 = v0[1];
  Swift::UInt8 v2 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v2);
  if (v1 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance SymbolVariants()
{
  Swift::UInt v1 = v0[1];
  Hasher._combine(_:)(*v0);
  if (v1 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
}