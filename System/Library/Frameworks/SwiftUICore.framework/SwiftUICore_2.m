void type metadata accessor for TrackedValue<EnvironmentPropertyKey<DefaultBaselineOffsetKey>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<DefaultBaselineOffsetKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultBaselineOffsetKey>, (uint64_t)&type metadata for DefaultBaselineOffsetKey, (uint64_t)&protocol witness table for DefaultBaselineOffsetKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultBaselineOffsetKey> and conformance EnvironmentPropertyKey<A>();
    v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<DefaultBaselineOffsetKey>>);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<StrikethroughStyleKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<StrikethroughStyleKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<StrikethroughStyleKey>, (uint64_t)&type metadata for StrikethroughStyleKey, (uint64_t)&protocol witness table for StrikethroughStyleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<StrikethroughStyleKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<StrikethroughStyleKey>>);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<DefaultTrackingKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<DefaultTrackingKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultTrackingKey>, (uint64_t)&type metadata for DefaultTrackingKey, (uint64_t)&protocol witness table for DefaultTrackingKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultTrackingKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<DefaultTrackingKey>>);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<DefaultKerningKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<DefaultKerningKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultKerningKey>, (uint64_t)&type metadata for DefaultKerningKey, (uint64_t)&protocol witness table for DefaultKerningKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultKerningKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<DefaultKerningKey>>);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<TextScaleKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<TextScaleKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextScaleKey>, (uint64_t)&type metadata for TextScaleKey, (uint64_t)&protocol witness table for TextScaleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<TextScaleKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<TextScaleKey>>);
    }
  }
}

uint64_t outlined copy of TypesettingLanguage.Resolved(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 <= 1u) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined consume of TypesettingLanguage.Resolved(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 <= 1u) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

void type metadata accessor for AnyDynamicFontModifier<LanguageAwareLineHeightRatioFontModifier>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for AnyDynamicFontModifier();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<TextScaleKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextScaleKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextScaleKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextScaleKey>, (uint64_t)&type metadata for TextScaleKey, (uint64_t)&protocol witness table for TextScaleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextScaleKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultBaselineOffsetKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultBaselineOffsetKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultBaselineOffsetKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultBaselineOffsetKey>, (uint64_t)&type metadata for DefaultBaselineOffsetKey, (uint64_t)&protocol witness table for DefaultBaselineOffsetKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultBaselineOffsetKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<StrikethroughStyleKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<StrikethroughStyleKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<StrikethroughStyleKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<StrikethroughStyleKey>, (uint64_t)&type metadata for StrikethroughStyleKey, (uint64_t)&protocol witness table for StrikethroughStyleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<StrikethroughStyleKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultTrackingKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultTrackingKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultTrackingKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultTrackingKey>, (uint64_t)&type metadata for DefaultTrackingKey, (uint64_t)&protocol witness table for DefaultTrackingKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultTrackingKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultKerningKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultKerningKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultKerningKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultKerningKey>, (uint64_t)&type metadata for DefaultKerningKey, (uint64_t)&protocol witness table for DefaultKerningKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultKerningKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t type metadata accessor for TimelineSchedule()
{
  unint64_t result = lazy cache variable for type metadata for TimelineSchedule;
  if (!lazy cache variable for type metadata for TimelineSchedule)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for TimelineSchedule);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LanguageAwareLineHeightRatioFontModifier and conformance LanguageAwareLineHeightRatioFontModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type LanguageAwareLineHeightRatioFontModifier and conformance LanguageAwareLineHeightRatioFontModifier;
  if (!lazy protocol witness table cache variable for type LanguageAwareLineHeightRatioFontModifier and conformance LanguageAwareLineHeightRatioFontModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LanguageAwareLineHeightRatioFontModifier and conformance LanguageAwareLineHeightRatioFontModifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LanguageAwareLineHeightRatioFontModifier and conformance LanguageAwareLineHeightRatioFontModifier;
  if (!lazy protocol witness table cache variable for type LanguageAwareLineHeightRatioFontModifier and conformance LanguageAwareLineHeightRatioFontModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LanguageAwareLineHeightRatioFontModifier and conformance LanguageAwareLineHeightRatioFontModifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LanguageAwareLineHeightRatioFontModifier and conformance LanguageAwareLineHeightRatioFontModifier;
  if (!lazy protocol witness table cache variable for type LanguageAwareLineHeightRatioFontModifier and conformance LanguageAwareLineHeightRatioFontModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LanguageAwareLineHeightRatioFontModifier and conformance LanguageAwareLineHeightRatioFontModifier);
  }
  return result;
}

uint64_t partial apply for implicit closure #1 in closure #1 in closure #1 in Rule<>.cachedValue(options:owner:)(uint64_t a1, uint64_t a2)
{
  return implicit closure #1 in closure #1 in closure #1 in Rule<>.cachedValue(options:owner:)(a1, a2, v2[5], v2[2], v2[3]);
}

uint64_t EnvironmentValues.backgroundMaterial.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a1);
    swift_release_n();
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    uint64_t v5 = specialized find<A>(_:key:)(v4);
    if (v5)
    {
      uint64_t v6 = *(void *)(v5 + 72);
      uint64_t v7 = *(void *)(v5 + 80);
      outlined copy of Material?(v6, v7);
    }
    else
    {
      uint64_t v6 = 0;
      uint64_t v7 = 255;
    }
    *a1 = v6;
    a1[1] = v7;
    swift_release();
  }
  return swift_release_n();
}

uint64_t protocol witness for static Comparable.< infix(_:_:) in conformance CountingIndex<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static CountingIndex.< infix(_:_:)(a1, a2, *(void *)(a3 + 16));
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance SizeFittingTextFilter()
{
  return 32;
}

uint64_t type metadata completion function for CodableOptional()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for DerivedValue()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

{
  return type metadata completion function for DerivedValue();
}

double static Font.Weight.bold.getter()
{
  return 0.4;
}

ValueMetadata *type metadata accessor for PropertyList()
{
  return &type metadata for PropertyList;
}

uint64_t instantiation function for generic protocol witness table for ChildEnvironment<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

ValueMetadata *type metadata accessor for TransitionTraitKey()
{
  return &type metadata for TransitionTraitKey;
}

double ViewTransform.containingScrollGeometry.getter@<D0>(uint64_t a1@<X8>)
{
  return ViewTransform.nearestScrollGeometry.getter((void (*)(void, uint64_t *, long long *))specialized ViewTransform.forEach(inverted:_:), a1);
}

double ViewTransform.nearestScrollGeometry.getter@<D0>(uint64_t a1@<X8>)
{
  return ViewTransform.nearestScrollGeometry.getter((void (*)(void, uint64_t *, long long *))specialized ViewTransform.forEach(inverted:_:), a1);
}

uint64_t type metadata completion function for AtomicBuffer()
{
  return swift_initClassMetadata2();
}

double @objc closure #8 in closure #1 in variable initialization expression of static Path.PathBox.bufferCallbacks(uint64_t a1)
{
  uint64_t v1 = a1 + 24;
  swift_retain();
  double v2 = MEMORY[0x24C526C90](v1);
  swift_release();
  return v2;
}

void ViewGraph.subscript.getter()
{
}

void ViewGraphFeatureBuffer.subscript.getter()
{
  int v1 = *((_DWORD *)v0 + 3);
  if (v1)
  {
    uint64_t v2 = *v0;
    if (*v0)
    {
      int v3 = 0;
      int v4 = v1 - 1;
      while ((_UnsafeHeterogeneousBuffer_Element.hasType<A>(_:)() & 1) == 0)
      {
        if (v4) {
          v3 += *(_DWORD *)(v2 + v3 + 8);
        }
        else {
          int v3 = 0;
        }
        if (!(v4-- | v3)) {
          return;
        }
      }
      _UnsafeHeterogeneousBuffer_Element.body<A>(as:)();
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t _UnsafeHeterogeneousBuffer_Element.hasType<A>(_:)()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 80))() & 1;
}

BOOL static ViewGraphFeatureBuffer._VTable.hasType<A>(_:)(uint64_t a1, uint64_t a2)
{
  return *(void *)(v2 + 168) == a2;
}

ValueMetadata *type metadata accessor for _GraphInputs()
{
  return &type metadata for _GraphInputs;
}

_DWORD *initializeWithCopy for ChildEnvironment(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  int v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *int v4 = *v5;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v8 | 7) + 4;
  v10 = (void *)(((unint64_t)v4 + v9) & ~(v8 | 7));
  v11 = (uint64_t *)(((unint64_t)v5 + v9) & ~(v8 | 7));
  uint64_t v12 = ~v8;
  uint64_t v13 = *(void *)(v7 + 64);
  uint64_t v14 = v8 + 8;
  if ((*(_DWORD *)(v7 + 84) & 0x80000000) == 0)
  {
    uint64_t v15 = *v11;
    if ((unint64_t)*v11 >= 0xFFFFFFFF) {
      LODWORD(v15) = -1;
    }
    if (v15 != -1) {
      goto LABEL_5;
    }
LABEL_7:
    void *v10 = *v11;
    v16 = *(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16);
    swift_retain();
    v16(((unint64_t)v10 + v14) & v12, ((unint64_t)v11 + v14) & v12, v6);
    return a1;
  }
  if (!(*(unsigned int (**)(unint64_t))(v7 + 48))(((unint64_t)v11 + v14) & v12)) {
    goto LABEL_7;
  }
LABEL_5:
  memcpy(v10, v11, (v14 & ~v8) + v13);
  return a1;
}

{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  int v11;
  size_t v12;
  size_t v13;
  uint64_t v14;
  void (*v15)(void *, void, uint64_t, uint64_t);
  size_t v16;

  *a1 = *a2;
  int v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *int v4 = *v5;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (void *)(((unint64_t)v4 + v8 + 4) & ~v8);
  v10 = (const void *)(((unint64_t)v5 + v8 + 4) & ~v8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6))
  {
    v11 = *(_DWORD *)(v7 + 84);
    uint64_t v12 = *(void *)(v7 + 64);
    if (v11) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = v12 + 1;
    }
    memcpy(v9, v10, v13);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(v9, v10, v6);
    uint64_t v15 = *(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56);
    uint64_t v14 = v7 + 56;
    v15(v9, 0, 1, v6);
    v11 = *(_DWORD *)(v14 + 28);
    uint64_t v12 = *(void *)(v14 + 8);
  }
  if (v11) {
    v16 = v12;
  }
  else {
    v16 = v12 + 1;
  }
  *(void *)(((unint64_t)v9 + v16 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v10 + v16 + 7) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  return a1;
}

double default argument 0 of ViewSizeCache.init(cache:)@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(unsigned char *)(a1 + 48) = 1;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(unsigned char *)(a1 + 104) = 1;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(unsigned char *)(a1 + 160) = 1;
  return result;
}

__n128 ViewSizeCache.init(cache:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(a2 + 128) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(a2 + 144) = v2;
  *(unsigned char *)(a2 + 160) = *(unsigned char *)(a1 + 160);
  long long v3 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 80) = v3;
  long long v4 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 112) = v4;
  long long v5 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v5;
  __n128 result = *(__n128 *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(__n128 *)(a2 + 48) = result;
  return result;
}

uint64_t LayoutComputer.explicitAlignment(_:at:)(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[1];
  uint64_t v6 = *v2;
  if (one-time initialization token for lockAssertionsAreEnabled != -1)
  {
    long long v10 = a2[1];
    long long v12 = *a2;
    swift_once();
    long long v5 = v10;
    long long v4 = v12;
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_7;
  }
  long long v9 = v5;
  long long v11 = v4;
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  BOOL IsOwner = _MovableLockIsOwner(static Update._lock);
  long long v5 = v9;
  long long v4 = v11;
  if (!IsOwner)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_7:
    v13[0] = v4;
    v13[1] = v5;
    return (*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)v6 + 144))(a1, v13);
  }
  return result;
}

void static Signpost.platformUpdate.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = "PlatformViewUpdate";
  *(void *)(a1 + 8) = 18;
  *(_WORD *)(a1 + 16) = 258;
  *(unsigned char *)(a1 + 18) = 3;
}

uint64_t static Edge.Set.trailing.getter()
{
  return 8;
}

uint64_t getEnumTagSinglePayload for SectionConfiguration(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 136)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t base witness table accessor for _AttributeBody in DynamicPreferenceCombiner<A>()
{
  return swift_getWitnessTable();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance UnwrapConditional<A, B, C>()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

uint64_t initializeWithCopy for DisplayList.ViewUpdater.Model.Clip(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  unsigned __int8 v8 = *(unsigned char *)(a2 + 32);
  outlined copy of Path.Storage(*(void *)a2, v5, v6, v7, v8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 32) = v8;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(_WORD *)(a1 + 89) = *(_WORD *)(a2 + 89);
  return a1;
}

void static ContentShapeKinds.focusEffect.getter(void *a1@<X8>)
{
  *a1 = 16;
}

void TransactionID.init(graph:)(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t Counter = AGGraphGetCounter();

  *a2 = Counter;
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, specialized ForEachState.evictItems(seed:));
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, specialized ForEachState.evictItems(seed:));
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void, void, void, unint64_t))specialized GeometryEffectDisplayList.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, &lazy cache variable for type metadata for Color?, (uint64_t)&type metadata for Color);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, &lazy cache variable for type metadata for AnyShapeStyle?, (uint64_t)&type metadata for AnyShapeStyle);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr))DepthTrait.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void, void, void))specialized GeometryEffectTransform.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void))type metadata accessor for _ShapeView<Rectangle, ForegroundStyle>, (uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), (uint64_t)partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:), (uint64_t (*)(uint64_t, unsigned char *, uint64_t, void *))specialized StatefulRule<>.update<A>(modify:create:));
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void, void, void, unint64_t))specialized GeometryEffectDisplayList.value.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void))type metadata accessor for _ShapeView<Ellipse, ForegroundStyle>, (uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), (uint64_t)partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:), (uint64_t (*)(uint64_t, unsigned char *, uint64_t, void *))specialized StatefulRule<>.update<A>(modify:create:));
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void))type metadata accessor for _ShapeView<Circle, ForegroundStyle>, (uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), (uint64_t)partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:), (uint64_t (*)(uint64_t, unsigned char *, uint64_t, void *))specialized StatefulRule<>.update<A>(modify:create:));
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void))type metadata accessor for _ShapeView<ContainerRelativeShape, ForegroundStyle>, (uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), (uint64_t)partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:), (uint64_t (*)(uint64_t, unsigned char *, uint64_t, void *))specialized StatefulRule<>.update<A>(modify:create:));
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void, void, void, unint64_t))specialized GeometryEffectDisplayList.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void, void, void))specialized GeometryEffectTransform.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void, void, void))specialized GeometryEffectTransform.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_OWORD *__return_ptr))specialized GestureDebug.Value.value.getter);
}

{
  uint64_t v2;
  uint64_t vars8;

  unint64_t v2 = MEMORY[0x263F8EF38];

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, &lazy cache variable for type metadata for GesturePhase<CGFloat>, v2);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_OWORD *__return_ptr))specialized GestureDebug.Value.value.getter);
}

{
  uint64_t v2;
  uint64_t vars8;

  unint64_t v2 = MEMORY[0x263F8D538];

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<Double>, v2);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr))SectionHeaderTrait.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_OWORD *__return_ptr))specialized GestureDebug.Value.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t)&type metadata for Rectangle._Inset, &lazy cache variable for type metadata for AnimatedShape<Rectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Rectangle._Inset and conformance Rectangle._Inset);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t)&type metadata for Ellipse._Inset, &lazy cache variable for type metadata for AnimatedShape<Ellipse._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Ellipse._Inset and conformance Ellipse._Inset);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t)&type metadata for Capsule._Inset, &lazy cache variable for type metadata for AnimatedShape<Capsule._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Capsule._Inset and conformance Capsule._Inset);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t)&type metadata for Circle._Inset, &lazy cache variable for type metadata for AnimatedShape<Circle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Circle._Inset and conformance Circle._Inset);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t)&type metadata for ContainerRelativeShape._Inset, &lazy cache variable for type metadata for AnimatedShape<ContainerRelativeShape._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type ContainerRelativeShape._Inset and conformance ContainerRelativeShape._Inset);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, specialized ForEachState.evictItems(seed:));
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(_OWORD *__return_ptr))specialized GestureDebug.Value.value.getter);
}

id PlatformDrawableOptions.caLayerContentsFormat.getter()
{
  int v1 = *(_DWORD *)(v0 + 12);
  unint64_t v2 = (id *)MEMORY[0x263F159B8];
  if ((v1 & 0x100) != 0) {
    unint64_t v2 = (id *)MEMORY[0x263F159C8];
  }
  if ((v1 & 0x40) != 0) {
    long long v3 = (id *)MEMORY[0x263F159B0];
  }
  else {
    long long v3 = v2;
  }
  return *v3;
}

uint64_t *AccessibilityNullableOptionSet<>.init(removing:)@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *result;
  *a2 = 0;
  a2[1] = v2;
  return result;
}

ValueMetadata *type metadata accessor for ContentTransition()
{
  return &type metadata for ContentTransition;
}

uint64_t static Color.white.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for white);
}

void _ProposedSize.init(_:)(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  *(double *)a1 = a2;
  *(unsigned char *)(a1 + 8) = 0;
  *(double *)(a1 + 16) = a3;
  *(unsigned char *)(a1 + 24) = 0;
}

uint64_t partial apply for closure #2 in ViewGraph.updateOutputsAsync(at:)()
{
  return closure #2 in ViewGraph.updateOutputsAsync(at:)(*(void *)(v0 + 16), *(uint64_t **)(v0 + 24));
}

uint64_t EnvironmentValues.systemColorScheme.setter(unsigned __int8 *a1)
{
  return EnvironmentValues.colorScheme.setter(a1, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));
}

uint64_t type metadata completion function for ModifiedViewList.ListModifier()
{
  return swift_initClassMetadata2();
}

uint64_t _ViewInputs.position.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 64) = result;
  *(_DWORD *)(v1 + 32) |= 8u;
  return result;
}

uint64_t _ViewInputs.size.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 72) = result;
  *(_DWORD *)(v1 + 32) |= 0x10u;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance _AnimationModifier<A>(uint64_t a1, uint64_t *a2)
{
  return static _AnimationModifier.== infix(_:_:)(a1, a2);
}

double static UnitPoint.top.getter()
{
  return 0.5;
}

uint64_t (*_GraphInputs.mergedInputs.modify())(void, void)
{
  return _ViewInputs.base.modify;
}

unint64_t lazy protocol witness table accessor for type UniqueID and conformance UniqueID()
{
  unint64_t result = lazy protocol witness table cache variable for type UniqueID and conformance UniqueID;
  if (!lazy protocol witness table cache variable for type UniqueID and conformance UniqueID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UniqueID and conformance UniqueID);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UniqueID and conformance UniqueID;
  if (!lazy protocol witness table cache variable for type UniqueID and conformance UniqueID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UniqueID and conformance UniqueID);
  }
  return result;
}

__n128 __swift_memcpy20_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in ArrayWith2Inline<A>()
{
  return swift_getWitnessTable();
}

uint64_t LayoutChildGeometries.value.getter()
{
  uint64_t v0 = *(void *)AGGraphGetValue();
  Value = (uint64_t *)AGGraphGetValue();
  uint64_t v2 = *Value;
  uint64_t v3 = Value[1];
  uint64_t v4 = Value[2];
  uint64_t v5 = Value[3];
  uint64_t v6 = (double *)AGGraphGetValue();
  double v7 = *v6;
  double v8 = v6[1];
  uint64_t v9 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v9 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_7;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (!_MovableLockIsOwner(static Update._lock))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_7:
    v12[0] = v2;
    v12[1] = v3;
    v12[2] = v4;
    v12[3] = v5;
    uint64_t v10 = (*(uint64_t (**)(void *, double, double))(*(void *)v0 + 136))(v12, v7, v8);
    swift_release();
    return v10;
  }
  return result;
}

uint64_t LayoutEngineBox.childGeometries(at:origin:)(_OWORD *a1)
{
  uint64_t v2 = *v1;
  long long v3 = a1[1];
  v5[0] = *a1;
  v5[1] = v3;
  return (*(uint64_t (**)(_OWORD *, void))(*(void *)(v2 + 168) + 56))(v5, *(void *)(v2 + 160));
}

uint64_t ViewLayoutEngine.childGeometries(at:origin:)(double *a1, uint64_t a2, double a3, double a4)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  double v8 = *a1;
  double v9 = a1[1];
  double v10 = a1[2];
  double v11 = a1[3];
  uint64_t v12 = *(void *)(*(void *)(v4 + *(int *)(a2 + 40) + 8) + 16);
  uint64_t v13 = (long long *)(v4 + *(int *)(a2 + 52));
  long long v14 = v13[1];
  long long v26 = *v13;
  long long v27 = v14;
  double v30 = v8;
  double v31 = v9;
  double v32 = v10;
  double v33 = v11;
  if (specialized static ViewSize.== infix(_:_:)((double *)&v26, &v30)
    && a3 == 0.0
    && a4 == 0.0
    && *(void *)(*(void *)(v4 + *(int *)(a2 + 56)) + 16) == v12)
  {
    return swift_bridgeObjectRetain();
  }
  BOOL v16 = (~*(void *)&v10 & 0x7FF0000000000000) == 0;
  BOOL v17 = (*(void *)&v10 & 0xFFFFFFFFFFFFFLL) != 0;
  BOOL v18 = v16 && v17;
  if (v16 && v17) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = *(void *)&v10;
  }
  BOOL v20 = (~*(void *)&v11 & 0x7FF0000000000000) == 0;
  BOOL v21 = (*(void *)&v11 & 0xFFFFFFFFFFFFFLL) != 0;
  BOOL v22 = v20 && v21;
  if (v20 && v21) {
    uint64_t v23 = 0;
  }
  else {
    uint64_t v23 = *(void *)&v11;
  }
  char v24 = *(unsigned char *)(v4 + *(int *)(a2 + 44));
  if (one-time initialization token for invalidValue != -1) {
    swift_once();
  }
  long long v26 = static ViewGeometry.invalidValue;
  long long v27 = *(_OWORD *)&qword_26B0F2B10;
  long long v28 = xmmword_26B0F2B20;
  long long v29 = unk_26B0F2B30;
  outlined retain of ViewGeometry((uint64_t)&v26);
  uint64_t v25 = specialized Array.init(repeating:count:)(&v26, v12);
  LOBYTE(v30) = 0;
  double v31 = *(double *)&v25;
  double v32 = 0.0;
  double v33 = a3;
  double v34 = a4;
  double v35 = v8;
  double v36 = v9;
  char v37 = v24;
  closure #1 in ViewLayoutEngine.childGeometries(at:origin:)((uint64_t)&v30, v4, v19, v18, v23, v22, v12, *(void *)(a2 + 16), a3, a4, v8, v9, v8, v9, v10, v11, *(void *)(a2 + 24));
  return *(void *)&v31;
}

uint64_t outlined retain of ViewGeometry(uint64_t a1)
{
  return a1;
}

uint64_t specialized Array.init(repeating:count:)(long long *a1, uint64_t a2)
{
  if (a2 < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    if (a2)
    {
      uint64_t v4 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      uint64_t v5 = v4;
      *(void *)(v4 + 16) = a2;
      long long v6 = a1[3];
      long long v8 = *a1;
      long long v7 = a1[1];
      *(_OWORD *)(v4 + 64) = a1[2];
      *(_OWORD *)(v4 + 80) = v6;
      *(_OWORD *)(v4 + 32) = v8;
      *(_OWORD *)(v4 + 48) = v7;
      if (a2 != 1)
      {
        long long v9 = *a1;
        long long v10 = a1[1];
        long long v11 = a1[3];
        *(_OWORD *)(v4 + 128) = a1[2];
        *(_OWORD *)(v4 + 144) = v11;
        *(_OWORD *)(v4 + 96) = v9;
        *(_OWORD *)(v4 + 112) = v10;
        uint64_t v12 = a2 - 2;
        if (v12)
        {
          uint64_t v13 = (_OWORD *)(v4 + 160);
          do
          {
            outlined retain of ViewGeometry((uint64_t)a1);
            long long v14 = a1[3];
            long long v16 = *a1;
            long long v15 = a1[1];
            _OWORD v13[2] = a1[2];
            v13[3] = v14;
            *uint64_t v13 = v16;
            v13[1] = v15;
            v13 += 4;
            --v12;
          }
          while (v12);
        }
        outlined retain of ViewGeometry((uint64_t)a1);
      }
    }
    else
    {
      outlined release of ViewGeometry((uint64_t)a1);
      return MEMORY[0x263F8EE78];
    }
    return v5;
  }
  return result;
}

uint64_t RendererEffectDisplayList.value.getter@<X0>(uint64_t a1@<X0>, unint64_t a2@<X8>)
{
  void (*v67)(uint64_t *__return_ptr, uint64_t, uint64_t);
  void (*v68)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int16 v72;
  id v73;
  unsigned int v74;
  unsigned int v75;
  unint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _OWORD v81[2];
  long long v82;
  long long v83;
  long long v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  __int16 v89;
  char v90;
  int v91;
  long long v92;
  long long v93;
  long long v94;
  unint64_t v95;
  uint64_t v96;
  unsigned __int16 v97;
  unsigned __int8 v98;
  int v99;
  uint64_t v100;

  v100 = *MEMORY[0x263EF8340];
  long long v10 = v2[1];
  v81[0] = *v2;
  v81[1] = v10;
  long long v12 = *v2;
  long long v11 = v2[1];
  v82 = v2[2];
  v92 = v12;
  v93 = v11;
  v94 = v2[2];
  RendererEffectDisplayList.content.getter((uint64_t)&v83);
  uint64_t v13 = v83;
  int v14 = WORD4(v83) | (BYTE10(v83) << 16);
  uint64_t v15 = MEMORY[0x263F8EE78];
  if ((void)v83) {
    uint64_t v16 = v83;
  }
  else {
    uint64_t v16 = MEMORY[0x263F8EE78];
  }
  if ((void)v83) {
    int v17 = WORD4(v83) | (BYTE10(v83) << 16);
  }
  else {
    int v17 = 0;
  }
  LODWORD(v79) = v17;
  if (!*(void *)(v16 + 16) && ((*(uint64_t (**)(void))(*(void *)(a1 + 24) + 48))() & 1) == 0)
  {
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)a2 = v15;
    *(_WORD *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 10) = 0;
    return result;
  }
  uint64_t v18 = ++static DisplayList.Version.lastValue;
  int CurrentAttribute = AGGraphGetCurrentAttribute();
  unint64_t v20 = *MEMORY[0x263F288F8];
  if (CurrentAttribute == v20)
  {
    __break(1u);
LABEL_70:
    swift_once();
LABEL_42:
    uint64_t v55 = static NSAttributedStringKey.updateSchedule;
    objc_msgSend(v73, sel_length);
    if (objc_msgSend(v73, sel_attribute_atIndex_effectiveRange_, v55, 0, 0))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      outlined destroy of Any?((uint64_t)&v83);
      char v56 = *(unsigned char *)(v69 + 256);
      outlined consume of DisplayList.Item.Value(v20, a2);
      swift_release();
      swift_release();
      outlined consume of DisplayList.Item.Value(v20, a2);
      if (v56) {
        __int16 v37 = 8;
      }
      else {
LABEL_46:
      }
        __int16 v37 = 0;
    }
    else
    {
      v83 = 0u;
      v84 = 0u;
      outlined destroy of Any?((uint64_t)&v83);
LABEL_68:
      outlined consume of DisplayList.Item.Value(v20, a2);
      swift_release();
      swift_release();
      outlined consume of DisplayList.Item.Value(v20, a2);
      __int16 v37 = 0;
    }
LABEL_64:
    LOBYTE(v43) = v75;
    goto LABEL_65;
  }
  v76 = a2;
  v78 = v18;
  v74 = v14 & 0xFFFF0000;
  uint64_t v66 = AGCreateWeakAttribute();
  uint64_t v65 = AGCreateWeakAttribute();
  uint64_t v21 = AGCreateWeakAttribute();
  uint64_t v22 = AGCreateWeakAttribute();
  uint64_t v64 = AGCreateWeakAttribute();
  uint64_t v23 = AGCreateWeakAttribute();
  uint64_t v24 = *(void *)(a1 + 16);
  uint64_t v25 = *(void *)(a1 + 24);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v25 + 40))(v24, v25) & 1) != 0 && (v79 & 0x200) != 0)
  {
    unsigned int v26 = 0;
    uint64_t v15 = 0;
    *(void *)&v83 = 0;
    DWORD2(v83) = 0;
    a1 = 19;
  }
  else
  {
    _threadGeometryProxyData();
    *(void *)&v92 = v66;
    *((void *)&v92 + 1) = v65;
    *(void *)&v93 = v21;
    *((void *)&v93 + 1) = v22;
    *(void *)&v94 = v64;
    *((void *)&v94 + 1) = v23;
    LODWORD(v95) = v78;
    _setThreadGeometryProxyData();
    closure #1 in RendererEffectDisplayList.value.getter((uint64_t)v81, v24, v25);
    _setThreadGeometryProxyData();
    uint64_t v15 = v83;
    unsigned int v26 = DWORD2(v83);
    a1 = BYTE12(v83);
  }
  Value = (double *)AGGraphGetValue();
  double v28 = *Value;
  double v29 = Value[1];
  double v30 = (double *)AGGraphGetValue();
  double v31 = v28 - *v30;
  double v32 = v29 - v30[1];
  if (v13) {
    unsigned int v33 = v74;
  }
  else {
    unsigned int v33 = 0;
  }
  double v34 = (long long *)AGGraphGetValue();
  *(double *)&v92 = v31;
  *((double *)&v92 + 1) = v32;
  v93 = *v34;
  *(void *)&v94 = v78;
  *((void *)&v94 + 1) = v15;
  v95 = v26 | (unint64_t)(a1 << 32) | 0x4000000000000000;
  v96 = v16;
  v98 = BYTE2(v33);
  v97 = v33 | v79;
  v99 = v81[0];
  LOBYTE(v83) = BYTE4(v82);
  outlined copy of DisplayList.Effect(v15, v26, a1);
  DisplayList.Item.canonicalize(options:)((char *)&v83);
  uint64_t v5 = *((void *)&v92 + 1);
  uint64_t v4 = v92;
  uint64_t v7 = *((void *)&v93 + 1);
  uint64_t v6 = v93;
  unint64_t v20 = *((void *)&v94 + 1);
  v79 = v94;
  a2 = v95;
  uint64_t v16 = v96;
  LODWORD(v13) = v97 | (v98 << 16);
  int v14 = v99;
  unint64_t v35 = v95 >> 62;
  if (v95 >> 62 != 3 || (v13 & 0xFFFFFF) != 0 || v95 != 0xC000000000000000 || v96 | *((void *)&v94 + 1))
  {
    v77 = v26;
    _s14AttributeGraph0A0Vy7SwiftUI11DisplayListVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
    uint64_t v3 = swift_allocObject();
    *(_OWORD *)(v3 + 16) = xmmword_2461B9DC0;
    *(void *)(v3 + 32) = v4;
    *(void *)(v3 + 40) = v5;
    *(void *)(v3 + 48) = v6;
    *(void *)(v3 + 56) = v7;
    *(void *)(v3 + 64) = v79;
    *(void *)(v3 + 72) = v20;
    *(void *)(v3 + 80) = a2;
    *(void *)(v3 + 88) = v16;
    *(unsigned char *)(v3 + 98) = BYTE2(v13);
    *(_WORD *)(v3 + 96) = v13;
    *(_DWORD *)(v3 + 100) = v14;
    switch((int)v35)
    {
      case 1:
        v75 = WORD1(v13);
        uint64_t v40 = outlined copy of DisplayList.Item.Value(v20, a2);
        switch(BYTE4(a2))
        {
          case 2:
            outlined copy of DisplayList.Item.Value(v20, a2);
            outlined copy of DisplayList.Item.Value(v20, a2);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v20, a2, 2);
            unsigned int v41 = (v20 >> 2) & 1;
            break;
          case 3:
            outlined init with copy of AnyTrackedValue(v20 + 16, (uint64_t)&v83);
            uint64_t v57 = v85;
            v71 = *((void *)&v84 + 1);
            __swift_project_boxed_opaque_existential_1(&v83, *((uint64_t *)&v84 + 1));
            v68 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v57 + 56);
            outlined copy of DisplayList.Item.Value(v20, a2);
            outlined copy of DisplayList.Item.Value(v20, a2);
            v68(&v80, v71, v57);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v83);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v20, a2, 3);
            LOWORD(v41) = v80;
            break;
          case 7:
            LOWORD(v41) = *(_WORD *)(v20 + 24);
            outlined copy of DisplayList.Item.Value(v20, a2);
            outlined copy of DisplayList.Item.Value(v20, a2);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v20, a2, 7);
            break;
          case 0xA:
            outlined copy of DisplayList.Item.Value(v20, a2);
            outlined copy of DisplayList.Item.Value(v20, a2);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v20, a2, 10);
            LOWORD(v41) = 4;
            break;
          case 0xC:
            outlined copy of DisplayList.Item.Value(v20, a2);
            outlined copy of DisplayList.Item.Value(v20, a2);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v20, a2, 12);
            LOWORD(v41) = 2;
            break;
          case 0xE:
            outlined copy of DisplayList.Item.Value(v20, a2);
            outlined copy of DisplayList.Item.Value(v20, a2);
            swift_bridgeObjectRelease();
            uint64_t v58 = v20;
            char v59 = a2;
            LOBYTE(v60) = 14;
            goto LABEL_56;
          case 0xF:
            outlined copy of DisplayList.Item.Value(v20, a2);
            outlined copy of DisplayList.Item.Value(v20, a2);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v20, a2, 15);
            LOWORD(v41) = 64;
            break;
          case 0x10:
            outlined copy of DisplayList.Item.Value(v20, a2);
            outlined copy of DisplayList.Item.Value(v20, a2);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v20, a2, 16);
            LOWORD(v41) = 32;
            break;
          case 0x11:
            (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v20 + 112))(&v83, v40);
            v72 = v83;
            int v61 = (unsigned __int16)word_26FA429C8;
            int v62 = (unsigned __int16)word_26FA429CA;
            outlined copy of DisplayList.Item.Value(v20, a2);
            outlined copy of DisplayList.Item.Value(v20, a2);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v20, a2, 17);
            if ((v62 & ~v61) != 0) {
              __int16 v63 = v62;
            }
            else {
              __int16 v63 = 0;
            }
            LOWORD(v41) = v72 | v61 | v63;
            break;
          default:
            outlined copy of DisplayList.Item.Value(v20, a2);
            outlined copy of DisplayList.Item.Value(v20, a2);
            swift_bridgeObjectRelease();
            uint64_t v58 = v20;
            char v59 = a2;
            unint64_t v60 = HIDWORD(a2);
LABEL_56:
            outlined consume of DisplayList.Effect(v58, v59, v60);
            LOWORD(v41) = 0;
            break;
        }
        __int16 v37 = v41 | v13;
        goto LABEL_64;
      case 2:
        uint64_t v42 = *(void *)(v20 + 16);
        if (!v42)
        {
          unsigned int v43 = WORD1(v13);
          __int16 v37 = 128;
          goto LABEL_38;
        }
        if (v42 == 1)
        {
          unsigned int v43 = WORD1(v13);
          uint64_t v44 = 0;
          __int16 v37 = 128;
LABEL_36:
          uint64_t v51 = v42 - v44;
          v52 = (__int16 *)(v20 + 40 * v44 + 64);
          do
          {
            __int16 v53 = *v52;
            v52 += 20;
            v37 |= v53;
            --v51;
          }
          while (v51);
          goto LABEL_38;
        }
        __int16 v45 = 0;
        uint64_t v44 = v42 & 0x7FFFFFFFFFFFFFFELL;
        v46 = (__int16 *)(v20 + 104);
        __int16 v47 = 128;
        uint64_t v48 = v42 & 0x7FFFFFFFFFFFFFFELL;
        do
        {
          __int16 v49 = *(v46 - 20);
          __int16 v50 = *v46;
          v46 += 40;
          v47 |= v49;
          v45 |= v50;
          v48 -= 2;
        }
        while (v48);
        unsigned int v43 = WORD1(v13);
        __int16 v37 = v45 | v47;
        if (v42 != v44) {
          goto LABEL_36;
        }
LABEL_38:
        outlined copy of DisplayList.Item.Value(v20, a2);
        outlined copy of DisplayList.Item.Value(v20, a2);
        break;
      case 3:
        unsigned int v43 = WORD1(v13);
        outlined copy of DisplayList.Item.Value(v20, a2);
        __int16 v37 = 0;
        break;
      default:
        v75 = WORD1(v13);
        switch(v20 >> 60)
        {
          case 6uLL:
            outlined init with copy of AnyTrackedValue((v20 & 0xFFFFFFFFFFFFFFFLL) + 16, (uint64_t)&v83);
            uint64_t v38 = v85;
            v70 = *((void *)&v84 + 1);
            __swift_project_boxed_opaque_existential_1(&v83, *((uint64_t *)&v84 + 1));
            v67 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v38 + 40);
            outlined copy of DisplayList.Item.Value(v20, a2);
            outlined copy of DisplayList.Item.Value(v20, a2);
            v67(&v80, v70, v38);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v83);
            __int16 v37 = v80;
            goto LABEL_64;
          case 8uLL:
            uint64_t v54 = *(void *)((v20 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
            if (!*(void *)(v54 + 216)) {
              goto LABEL_45;
            }
            v73 = *(id *)(v54 + 216);
            outlined copy of DisplayList.Item.Value(v20, a2);
            outlined copy of DisplayList.Item.Value(v20, a2);
            outlined copy of DisplayList.Item.Value(v20, a2);
            outlined copy of DisplayList.Item.Value(v20, a2);
            swift_retain();
            v69 = v54;
            swift_retain();
            if ((uint64_t)objc_msgSend(v73, sel_length) <= 0) {
              goto LABEL_68;
            }
            if (one-time initialization token for updateSchedule == -1) {
              goto LABEL_42;
            }
            goto LABEL_70;
          case 9uLL:
            __int16 v37 = *(_WORD *)((v20 & 0xFFFFFFFFFFFFFFFLL) + 0x18) | 0x200;
            outlined copy of DisplayList.Item.Value(v20, a2);
            outlined copy of DisplayList.Item.Value(v20, a2);
            goto LABEL_64;
          case 0xBuLL:
            goto LABEL_49;
          case 0xCuLL:
            outlined copy of DisplayList.Item.Value(v20, a2);
LABEL_49:
            outlined copy of DisplayList.Item.Value(v20, a2);
            outlined copy of DisplayList.Item.Value(v20, a2);
            __int16 v37 = 2;
            break;
          default:
LABEL_45:
            outlined copy of DisplayList.Item.Value(v20, a2);
            outlined copy of DisplayList.Item.Value(v20, a2);
            goto LABEL_46;
        }
        goto LABEL_64;
    }
LABEL_65:
    *(void *)&v83 = v4;
    *((void *)&v83 + 1) = v5;
    *(void *)&v84 = v6;
    *((void *)&v84 + 1) = v7;
    v85 = v79;
    v86 = v20;
    v87 = a2;
    v88 = v16;
    v90 = v43;
    v89 = v13;
    v91 = v14;
    DisplayList.Item.properties.getter(&v80);
    outlined consume of DisplayList.Item.Value(v20, a2);
    outlined consume of DisplayList.Effect(v15, v77, a1);
    char v36 = v80;
    goto LABEL_66;
  }
  outlined consume of DisplayList.Effect(v15, v26, a1);
  char v36 = 0;
  __int16 v37 = 0;
  uint64_t v3 = MEMORY[0x263F8EE78];
LABEL_66:
  *(void *)v76 = v3;
  *(_WORD *)(v76 + 8) = v37;
  *(unsigned char *)(v76 + 10) = v36;
  return outlined consume of DisplayList.Item.Value(v20, a2);
}

uint64_t specialized RendererEffectDisplayList.value.getter@<X0>(void *a1@<X0>, unint64_t a2@<X8>)
{
  void (*v48)(__int16 *__return_ptr, uint64_t, unint64_t);
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  __int16 v52;
  __int16 *v53;
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  __int16 v57;
  uint64_t v58;
  __int16 *v59;
  __int16 v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  unint64_t v64;
  uint64_t v65;
  char v66;
  unint64_t v67;
  int v68;
  int v69;
  __int16 v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unsigned __int16 v75;
  unint64_t v76;
  void (*v77)(__int16 *__return_ptr, uint64_t, unint64_t);
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  __int16 v81;
  unsigned __int8 v82;
  uint64_t v83;
  void *v84;
  unint64_t v85;
  __int16 v86;
  long long v87;
  long long v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  __int16 v93;
  char v94;
  int v95;
  unint64_t v96;
  unint64_t v97;
  long long v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unsigned __int16 v103;
  unsigned __int8 v104;
  int v105;
  uint64_t v106;

  v106 = *MEMORY[0x263EF8340];
  unsigned int v11 = *MEMORY[0x263F288F8];
  uint64_t v12 = MEMORY[0x263F8EE78];
  if (v2[8] == *MEMORY[0x263F288F8])
  {
    unint64_t v13 = 0;
    uint64_t v14 = 0;
    unint64_t v15 = MEMORY[0x263F8EE78];
    if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)a2 = v12;
    *(_WORD *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 10) = 0;
    return result;
  }
  uint64_t Value = AGGraphGetValue();
  unint64_t v15 = *(void *)Value;
  unint64_t v13 = *(unsigned __int16 *)(Value + 8);
  uint64_t v14 = *(unsigned __int8 *)(Value + 10);
  swift_bridgeObjectRetain();
  if (!*(void *)(v15 + 16)) {
    goto LABEL_10;
  }
LABEL_3:
  unint64_t v16 = ++static DisplayList.Version.lastValue;
  if (AGGraphGetCurrentAttribute() == v11)
  {
    __break(1u);
LABEL_57:
    swift_once();
LABEL_29:
    int v62 = static NSAttributedStringKey.updateSchedule;
    objc_msgSend(a1, sel_length);
    if (objc_msgSend(a1, sel_attribute_atIndex_effectiveRange_, v62, 0, 0))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      _sypSgWOhTm_9((uint64_t)&v87, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8);
      __int16 v63 = *(unsigned char *)(v78 + 256);
      outlined consume of DisplayList.Item.Value(v16, v13);
      swift_release();
      swift_release();
      outlined consume of DisplayList.Item.Value(v16, v13);
      if (v63)
      {
        __int16 v44 = 8;
        goto LABEL_51;
      }
    }
    else
    {
      v87 = 0u;
      v88 = 0u;
      _sypSgWOhTm_9((uint64_t)&v87, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8);
LABEL_54:
      outlined consume of DisplayList.Item.Value(v16, v13);
      swift_release();
      swift_release();
      outlined consume of DisplayList.Item.Value(v16, v13);
    }
    __int16 v44 = 0;
    goto LABEL_51;
  }
  v85 = a2;
  v82 = v14;
  unint64_t v17 = AGCreateWeakAttribute();
  unsigned int v18 = v17;
  v74 = HIDWORD(v17);
  unint64_t v19 = AGCreateWeakAttribute();
  unsigned int v20 = v19;
  v72 = HIDWORD(v19);
  unint64_t v21 = AGCreateWeakAttribute();
  unsigned int v22 = v21;
  v71 = HIDWORD(v21);
  unint64_t v23 = AGCreateWeakAttribute();
  unsigned int v24 = v23;
  v79 = v15;
  unint64_t v15 = HIDWORD(v23);
  unint64_t v25 = AGCreateWeakAttribute();
  v73 = v16;
  unsigned int v26 = v25;
  unint64_t v27 = HIDWORD(v25);
  unint64_t v28 = AGCreateWeakAttribute();
  unsigned int v29 = v28;
  v75 = v13;
  unint64_t v30 = HIDWORD(v28);
  _threadGeometryProxyData();
  v96 = __PAIR64__(v74, v18);
  v97 = __PAIR64__(v72, v20);
  *(void *)&v98 = __PAIR64__(v71, v22);
  *((void *)&v98 + 1) = __PAIR64__(v15, v24);
  v99 = __PAIR64__(v27, v26);
  v100 = __PAIR64__(v30, v29);
  LODWORD(v101) = v73;
  _setThreadGeometryProxyData();
  *(float *)&unsigned int v31 = *(double *)AGGraphGetValue();
  unint64_t v32 = v31;
  _setThreadGeometryProxyData();
  unsigned int v33 = (double *)AGGraphGetValue();
  double v34 = *v33;
  double v35 = v33[1];
  char v36 = (double *)AGGraphGetValue();
  *(double *)&unint64_t v37 = v34 - *v36;
  *(double *)&unint64_t v38 = v35 - v36[1];
  v39 = (long long *)AGGraphGetValue();
  int v40 = *v2;
  v96 = v37;
  v97 = v38;
  v98 = *v39;
  v99 = v73;
  v100 = v32;
  v101 = 0x4000000400000000;
  v102 = v79;
  v104 = v82;
  v103 = v75;
  v105 = v40;
  LOBYTE(v87) = *((unsigned char *)v2 + 36);
  DisplayList.Item.canonicalize(options:)((char *)&v87);
  unint64_t v5 = v96;
  unint64_t v6 = v97;
  uint64_t v8 = *((void *)&v98 + 1);
  uint64_t v7 = v98;
  unint64_t v4 = v99;
  unint64_t v16 = v100;
  unint64_t v13 = v101;
  a2 = v102;
  LODWORD(v15) = v103 | (v104 << 16);
  int v3 = v105;
  unint64_t v41 = v101 >> 62;
  if (v101 >> 62 != 3 || (v15 & 0xFFFFFF) != 0 || v101 != 0xC000000000000000 || v102 | v100)
  {
    _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
    uint64_t v46 = swift_allocObject();
    *(_OWORD *)(v46 + 16) = xmmword_2461B9DC0;
    *(void *)(v46 + 32) = v5;
    *(void *)(v46 + 40) = v6;
    *(void *)(v46 + 48) = v7;
    *(void *)(v46 + 56) = v8;
    *(void *)(v46 + 64) = v4;
    *(void *)(v46 + 72) = v16;
    *(void *)(v46 + 80) = v13;
    *(void *)(v46 + 88) = a2;
    unsigned int v11 = WORD1(v15);
    *(unsigned char *)(v46 + 98) = BYTE2(v15);
    *(_WORD *)(v46 + 96) = v15;
    *(_DWORD *)(v46 + 100) = v3;
    uint64_t v14 = v46;
    __int16 v44 = 0;
    switch((int)v41)
    {
      case 1:
        switch(BYTE4(v13))
        {
          case 2:
            outlined copy of DisplayList.Item.Value(v16, v13);
            outlined copy of DisplayList.Item.Value(v16, v13);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v16, v13, 2);
            __int16 v49 = (v16 >> 2) & 1;
            break;
          case 3:
            outlined init with copy of AnyTrackedValue(v16 + 16, (uint64_t)&v87);
            uint64_t v64 = v89;
            v80 = *((void *)&v88 + 1);
            __swift_project_boxed_opaque_existential_1(&v87, *((uint64_t *)&v88 + 1));
            v77 = *(void (**)(__int16 *__return_ptr, uint64_t, unint64_t))(v64 + 56);
            outlined copy of DisplayList.Item.Value(v16, v13);
            outlined copy of DisplayList.Item.Value(v16, v13);
            v77(&v86, v80, v64);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v87);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v16, v13, 3);
            LOWORD(v49) = v86;
            break;
          case 7:
            LOWORD(v49) = *(_WORD *)(v16 + 24);
            outlined copy of DisplayList.Item.Value(v16, v13);
            outlined copy of DisplayList.Item.Value(v16, v13);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v16, v13, 7);
            break;
          case 0xA:
            outlined copy of DisplayList.Item.Value(v16, v13);
            outlined copy of DisplayList.Item.Value(v16, v13);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v16, v13, 10);
            LOWORD(v49) = 4;
            break;
          case 0xC:
            outlined copy of DisplayList.Item.Value(v16, v13);
            outlined copy of DisplayList.Item.Value(v16, v13);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v16, v13, 12);
            LOWORD(v49) = 2;
            break;
          case 0xE:
            outlined copy of DisplayList.Item.Value(v16, v13);
            outlined copy of DisplayList.Item.Value(v16, v13);
            swift_bridgeObjectRelease();
            uint64_t v65 = v16;
            uint64_t v66 = v13;
            LOBYTE(v67) = 14;
            goto LABEL_43;
          case 0xF:
            outlined copy of DisplayList.Item.Value(v16, v13);
            outlined copy of DisplayList.Item.Value(v16, v13);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v16, v13, 15);
            LOWORD(v49) = 64;
            break;
          case 0x10:
            outlined copy of DisplayList.Item.Value(v16, v13);
            outlined copy of DisplayList.Item.Value(v16, v13);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v16, v13, 16);
            LOWORD(v49) = 32;
            break;
          case 0x11:
            (*(void (**)(long long *__return_ptr))(*(void *)v16 + 112))(&v87);
            v81 = v87;
            v68 = (unsigned __int16)word_26FA429C8;
            v69 = (unsigned __int16)word_26FA429CA;
            outlined copy of DisplayList.Item.Value(v16, v13);
            outlined copy of DisplayList.Item.Value(v16, v13);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v16, v13, 17);
            if ((v69 & ~v68) != 0) {
              v70 = v69;
            }
            else {
              v70 = 0;
            }
            LOWORD(v49) = v81 | v68 | v70;
            break;
          default:
            outlined copy of DisplayList.Item.Value(v16, v13);
            outlined copy of DisplayList.Item.Value(v16, v13);
            swift_bridgeObjectRelease();
            uint64_t v65 = v16;
            uint64_t v66 = v13;
            v67 = HIDWORD(v13);
LABEL_43:
            outlined consume of DisplayList.Effect(v65, v66, v67);
            LOWORD(v49) = 0;
            break;
        }
        __int16 v44 = v49 | v15;
        break;
      case 2:
        __int16 v50 = *(void *)(v16 + 16);
        if (!v50)
        {
          __int16 v44 = 128;
          goto LABEL_34;
        }
        if (v50 == 1)
        {
          uint64_t v51 = 0;
          __int16 v44 = 128;
LABEL_23:
          uint64_t v58 = v50 - v51;
          char v59 = (__int16 *)(v16 + 40 * v51 + 64);
          do
          {
            unint64_t v60 = *v59;
            v59 += 20;
            v44 |= v60;
            --v58;
          }
          while (v58);
          goto LABEL_34;
        }
        v52 = 0;
        uint64_t v51 = v50 & 0x7FFFFFFFFFFFFFFELL;
        __int16 v53 = (__int16 *)(v16 + 104);
        uint64_t v54 = 128;
        uint64_t v55 = v50 & 0x7FFFFFFFFFFFFFFELL;
        do
        {
          char v56 = *(v53 - 20);
          uint64_t v57 = *v53;
          v53 += 40;
          v54 |= v56;
          v52 |= v57;
          v55 -= 2;
        }
        while (v55);
        __int16 v44 = v52 | v54;
        if (v50 != v51) {
          goto LABEL_23;
        }
LABEL_34:
        outlined copy of DisplayList.Item.Value(v16, v13);
        break;
      case 3:
        break;
      default:
        switch(v16 >> 60)
        {
          case 6uLL:
            outlined init with copy of AnyTrackedValue((v16 & 0xFFFFFFFFFFFFFFFLL) + 16, (uint64_t)&v87);
            unint64_t v47 = v89;
            v83 = *((void *)&v88 + 1);
            v76 = v89;
            __swift_project_boxed_opaque_existential_1(&v87, *((uint64_t *)&v88 + 1));
            uint64_t v48 = *(void (**)(__int16 *__return_ptr, uint64_t, unint64_t))(v47 + 40);
            outlined copy of DisplayList.Item.Value(v16, v13);
            v48(&v86, v83, v76);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v87);
            __int16 v44 = v86;
            goto LABEL_51;
          case 8uLL:
            int v61 = *(void *)((v16 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
            if (!*(void *)(v61 + 216)) {
              goto LABEL_32;
            }
            v84 = *(void **)(v61 + 216);
            outlined copy of DisplayList.Item.Value(v16, v13);
            outlined copy of DisplayList.Item.Value(v16, v13);
            outlined copy of DisplayList.Item.Value(v16, v13);
            swift_retain();
            v78 = v61;
            a1 = v84;
            swift_retain();
            if ((uint64_t)objc_msgSend(v84, sel_length) <= 0) {
              goto LABEL_54;
            }
            if (one-time initialization token for updateSchedule == -1) {
              goto LABEL_29;
            }
            goto LABEL_57;
          case 9uLL:
            __int16 v44 = *(_WORD *)((v16 & 0xFFFFFFFFFFFFFFFLL) + 0x18) | 0x200;
            goto LABEL_34;
          case 0xBuLL:
            goto LABEL_36;
          case 0xCuLL:
            outlined copy of DisplayList.Item.Value(v16, v13);
LABEL_36:
            outlined copy of DisplayList.Item.Value(v16, v13);
            __int16 v44 = 2;
            goto LABEL_51;
          default:
LABEL_32:
            outlined copy of DisplayList.Item.Value(v16, v13);
            __int16 v44 = 0;
            goto LABEL_51;
        }
    }
LABEL_51:
    *(void *)&v87 = v5;
    *((void *)&v87 + 1) = v6;
    *(void *)&v88 = v7;
    *((void *)&v88 + 1) = v8;
    v89 = v4;
    v90 = v16;
    v91 = v13;
    v92 = a2;
    v94 = v11;
    v93 = v15;
    v95 = v3;
    DisplayList.Item.properties.getter(&v86);
    uint64_t result = outlined consume of DisplayList.Item.Value(v16, v13);
    char v43 = v86;
    goto LABEL_52;
  }
  uint64_t result = outlined consume of DisplayList.Item.Value(0, 0xC000000000000000);
  char v43 = 0;
  __int16 v44 = 0;
  uint64_t v14 = MEMORY[0x263F8EE78];
LABEL_52:
  *(void *)v85 = v14;
  *(_WORD *)(v85 + 8) = v44;
  *(unsigned char *)(v85 + 10) = v43;
  return result;
}

void *_setThreadGeometryProxyData()
{
  uint64_t result = (void *)_perThreadGeometryProxyData();
  *uint64_t result = v1;
  return result;
}

void type metadata accessor for Attribute<LayoutComputer>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_1(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

char *DisplayList.Item.canonicalize(options:)(char *result)
{
  void (*v148)(long long *__return_ptr, uint64_t, uint64_t);
  long long v149;
  long long v150;
  long long v151;
  long long v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unsigned int v159;
  unsigned __int8 v160;
  uint64_t v161;
  __int16 v162;
  char v163;
  long long v164;
  long long v165;
  long long v166;
  long long v167;
  long long v168;
  long long v169;
  long long v170;
  long long v171;
  long long v172;
  long long v173;
  char v174;
  _OWORD v175[5];
  _OWORD v176[2];
  char v177;
  unsigned char v178[48];
  uint64_t vars8;
  CGRect v180;

  char v2 = *result;
  if ((*result & 1) == 0)
  {
    uint64_t v3 = v1;
    unint64_t v4 = *(void *)(v1 + 48);
    if ((v4 >> 62) - 2 >= 2)
    {
      unint64_t v5 = *(void *)(v1 + 40);
      uint64_t v6 = *(void *)(v1 + 56);
      int v7 = *(unsigned __int16 *)(v1 + 64) | (*(unsigned __int8 *)(v1 + 66) << 16);
      if (!(v4 >> 62))
      {
        CGFloat v8 = *(double *)v1;
        CGFloat v9 = *(double *)(v1 + 8);
        CGFloat v10 = *(double *)(v1 + 16);
        CGFloat v11 = *(double *)(v1 + 24);
        outlined copy of DisplayList.Content.Value(*(void *)(v1 + 40));
        v180.origin.x = v8;
        v180.origin.y = v9;
        v180.size.width = v10;
        v180.size.height = v11;
        if (!CGRectIsEmpty(v180)) {
          goto LABEL_12;
        }
        uint64_t v12 = *(void *)(v1 + 32);
        int v13 = *(_DWORD *)(v1 + 68);
        *(CGFloat *)&v149 = v8;
        *((CGFloat *)&v149 + 1) = v9;
        *(CGFloat *)&v150 = v10;
        *((CGFloat *)&v150 + 1) = v11;
        *(void *)&v151 = v12;
        *((void *)&v151 + 1) = v5;
        *(void *)&v152 = v4;
        *((void *)&v152 + 1) = v6;
        BYTE2(v153) = BYTE2(v7);
        LOWORD(v153) = v7;
        HIDWORD(v153) = v13;
        DisplayList.Item.features.getter((__int16 *)&v169);
        if (v169)
        {
LABEL_12:
          switch(v5 >> 60)
          {
            case 1uLL:
              float32x4_t v146 = *(float32x4_t *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
              uint64_t result = (char *)outlined consume of DisplayList.Item.Value(v5, v4);
              if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqzq_f32(v146)))) & 1) == 0) {
                goto LABEL_76;
              }
              return result;
            case 4uLL:
              long long v17 = *(_OWORD *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
              v149 = *(_OWORD *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
              v150 = v17;
              LOBYTE(v151) = *(unsigned char *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
              outlined copy of DisplayList.Item.Value(v5, v4);
              outlined retain of Path.Storage((uint64_t)&v149, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
              char v18 = Path.isEmpty.getter();
              outlined consume of DisplayList.Item.Value(v5, v4);
              outlined retain of Path.Storage((uint64_t)&v149, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
              uint64_t result = (char *)outlined consume of DisplayList.Item.Value(v5, v4);
              if (v18) {
                goto LABEL_76;
              }
              return result;
            case 5uLL:
              long long v19 = *(_OWORD *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
              v149 = *(_OWORD *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
              v150 = v19;
              LOBYTE(v151) = *(unsigned char *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
              float v20 = *(float *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 0x44);
              outlined copy of DisplayList.Item.Value(v5, v4);
              outlined retain of Path.Storage((uint64_t)&v149, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
              char v21 = Path.isEmpty.getter();
              outlined consume of DisplayList.Item.Value(v5, v4);
              outlined retain of Path.Storage((uint64_t)&v149, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
              uint64_t result = (char *)outlined consume of DisplayList.Item.Value(v5, v4);
              if ((v21 & 1) != 0 || v20 == 0.0) {
                goto LABEL_76;
              }
              return result;
            case 8uLL:
              unsigned int v22 = *(void **)(*(void *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 0x10) + 216);
              if (!v22) {
                break;
              }
              id v23 = objc_msgSend(v22, sel_length);
              goto LABEL_28;
            case 9uLL:
              id v23 = *(id *)(*(void *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 0x10) + 16);
LABEL_28:
              uint64_t result = (char *)outlined consume of DisplayList.Item.Value(v5, v4);
              if (!v23) {
                goto LABEL_76;
              }
              return result;
            default:
              return (char *)outlined consume of DisplayList.Item.Value(v5, v4);
          }
        }
        outlined consume of DisplayList.Item.Value(v5, v4);
LABEL_76:
        uint64_t result = (char *)outlined consume of DisplayList.Item.Value(v5, v4);
        *(_OWORD *)(v3 + 40) = xmmword_2461B9DE0;
        *(void *)(v3 + 56) = 0;
        *(unsigned char *)(v3 + 66) = 0;
        *(_WORD *)(v3 + 64) = 0;
        return result;
      }
      unint64_t v14 = HIDWORD(v4);
      if (!*(void *)(v6 + 16))
      {
        switch(BYTE4(v4))
        {
          case 2:
            unsigned int v16 = (v5 >> 2) & 1;
            goto LABEL_73;
          case 3:
            outlined init with copy of AnyTrackedValue(v5 + 16, (uint64_t)&v149);
            uint64_t v88 = *((void *)&v150 + 1);
            uint64_t v87 = v151;
            __swift_project_boxed_opaque_existential_1(&v149, *((uint64_t *)&v150 + 1));
            v148 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v87 + 56);
            outlined copy of DisplayList.Item.Value(v5, v4);
            uint64_t v89 = v87;
            unint64_t v14 = HIDWORD(v4);
            v148(&v169, v88, v89);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v149);
            LOBYTE(v16) = v169;
            goto LABEL_74;
          case 7:
            LOWORD(v16) = *(_WORD *)(v5 + 24);
            goto LABEL_73;
          case 0x11:
            (*(void (**)(long long *__return_ptr))(*(void *)v5 + 112))(&v149);
            char v90 = word_26FA429CA;
            if (((unsigned __int16)word_26FA429CA & ~(unsigned __int16)word_26FA429C8) == 0) {
              char v90 = 0;
            }
            LOBYTE(v16) = v149 | word_26FA429C8 | v90;
LABEL_73:
            outlined copy of DisplayList.Item.Value(v5, v4);
LABEL_74:
            if ((v16 & 1) == 0) {
              goto LABEL_75;
            }
            goto LABEL_9;
          default:
            outlined copy of DisplayList.Item.Value(*(void *)(v1 + 40), *(void *)(v1 + 48));
LABEL_75:
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v5, v4, v14);
            break;
        }
        goto LABEL_76;
      }
      outlined copy of DisplayList.Effect(*(void *)(v1 + 40), *(void *)(v1 + 48), SBYTE4(v4));
      swift_bridgeObjectRetain();
LABEL_9:
      char v15 = v7;
      switch((char)v14)
      {
        case 4:
          if (*(float *)&v5 < 1.0) {
            goto LABEL_50;
          }
          swift_bridgeObjectRetain();
          outlined consume of DisplayList.Item.Value(v5, v4);
          *(_OWORD *)(v3 + 40) = xmmword_2461B9DD0;
          *(void *)(v3 + 56) = v6;
          *(unsigned char *)(v3 + 66) = BYTE2(v7);
          *(_WORD *)(v3 + 64) = v7;
          *(void *)&v149 = v6;
          WORD4(v149) = v7;
          BYTE10(v149) = BYTE2(v7);
          goto LABEL_48;
        case 6:
          if (*(_DWORD *)(v5 + 52) || *(void *)(v6 + 16) != 1) {
            goto LABEL_50;
          }
          char v147 = v7;
          uint64_t v25 = *(void *)(v5 + 16);
          uint64_t v24 = *(void *)(v5 + 24);
          uint64_t v26 = *(void *)(v5 + 32);
          uint64_t v27 = *(void *)(v5 + 40);
          unsigned __int8 v28 = *(unsigned char *)(v5 + 48);
          char v131 = *(unsigned char *)(v5 + 49);
          char v128 = *(unsigned char *)(v5 + 50);
          CGFloat v30 = *(double *)(v3 + 16);
          CGFloat v29 = *(double *)(v3 + 24);
          __int16 v31 = *(_WORD *)(v6 + 96);
          char v32 = *(unsigned char *)(v6 + 98);
          int v33 = *(_DWORD *)(v6 + 100);
          long long v34 = *(_OWORD *)(v6 + 48);
          v149 = *(_OWORD *)(v6 + 32);
          v150 = v34;
          long long v35 = *(_OWORD *)(v6 + 80);
          v151 = *(_OWORD *)(v6 + 64);
          v152 = v35;
          BYTE2(v153) = v32;
          LOWORD(v153) = v31;
          HIDWORD(v153) = v33;
          uint64_t v134 = v26;
          uint64_t v138 = v27;
          unsigned __int8 v142 = v28;
          outlined copy of Path.Storage(v25, v24, v26, v27, v28);
          uint64_t v36 = DisplayList.Item.paint(in:)(0.0, 0.0, v30, v29);
          if (!v36)
          {
            outlined consume of Path.Storage(v25, v24, v134, v138, v142);
            goto LABEL_88;
          }
          uint64_t v37 = v36;
          uint64_t v38 = swift_allocObject();
          *(void *)(v38 + 16) = v25;
          *(void *)(v38 + 24) = v24;
          *(void *)(v38 + 32) = v134;
          *(void *)(v38 + 40) = v138;
          *(unsigned char *)(v38 + 48) = v142;
          *(void *)(v38 + 56) = v37;
          *(unsigned char *)(v38 + 64) = v131;
          *(unsigned char *)(v38 + 65) = v128;
          outlined consume of DisplayList.Item.Value(v5, v4);
          uint64_t result = (char *)swift_bridgeObjectRelease();
          uint64_t v39 = *(void *)(v3 + 32);
          if (v39) {
            uint64_t v39 = (2 * (((33 * WORD1(v39)) ^ v39) & 0x7FFFLL)) | 1;
          }
          char v15 = v7;
          *(void *)(v3 + 40) = v38 | 0x4000000000000000;
          *(void *)(v3 + 48) = v39;
          *(void *)(v3 + 56) = 0;
          *(unsigned char *)(v3 + 66) = 0;
          *(_WORD *)(v3 + 64) = 0;
          goto LABEL_51;
        case 7:
          char v147 = v7;
          uint64_t v40 = *(void *)(v5 + 16);
          int v41 = *(_DWORD *)(v5 + 28);
          if (v41 || *(void *)(v6 + 16) != 1)
          {
            swift_bridgeObjectRetain();
          }
          else
          {
            __int16 v139 = *(_WORD *)(v5 + 24);
            char v135 = *(unsigned char *)(v5 + 26);
            CGFloat v43 = *(double *)(v3 + 16);
            CGFloat v42 = *(double *)(v3 + 24);
            __int16 v44 = *(_WORD *)(v6 + 96);
            char v45 = *(unsigned char *)(v6 + 98);
            int v46 = *(_DWORD *)(v6 + 100);
            long long v47 = *(_OWORD *)(v6 + 48);
            v169 = *(_OWORD *)(v6 + 32);
            v170 = v47;
            long long v48 = *(_OWORD *)(v6 + 80);
            v171 = *(_OWORD *)(v6 + 64);
            v172 = v48;
            BYTE2(v173) = v45;
            LOWORD(v173) = v44;
            DWORD1(v173) = v46;
            swift_bridgeObjectRetain();
            DisplayList.Item.backdropFilter(size:)((uint64_t)&v149, v43, v42);
            if (v160 != 255)
            {
              uint64_t v129 = *((void *)&v149 + 1);
              uint64_t v132 = v149;
              *(void *)v124 = *((void *)&v150 + 1);
              *(void *)v126 = v150;
              *(void *)v120 = *((void *)&v151 + 1);
              *(void *)v122 = v151;
              id v116 = (id)*((void *)&v152 + 1);
              *(void *)v118 = v152;
              uint64_t v112 = v154;
              *(void *)v114 = v153;
              uint64_t v49 = v157;
              uint64_t v109 = v156;
              *(void *)v111 = v155;
              char v143 = v14;
              unint64_t v14 = v159 | ((unint64_t)v160 << 32);
              *(void *)v107 = HIDWORD(v14);
              uint64_t v50 = v158;
              uint64_t v51 = swift_allocObject();
              *(void *)(v51 + 16) = v132;
              *(void *)(v51 + 24) = v129;
              *(void *)(v51 + 32) = *(void *)v126;
              *(void *)(v51 + 40) = *(void *)v124;
              *(void *)(v51 + 48) = *(void *)v122;
              *(void *)(v51 + 56) = *(void *)v120;
              *(void *)(v51 + 64) = *(void *)v118;
              *(void *)(v51 + 72) = v116;
              *(void *)(v51 + 80) = *(void *)v114;
              *(void *)(v51 + 88) = v112;
              *(void *)(v51 + 96) = *(void *)v111;
              *(void *)(v51 + 104) = v109;
              *(void *)(v51 + 112) = v49;
              *(void *)(v51 + 120) = v50;
              *(_DWORD *)(v51 + 128) = v14;
              LOBYTE(v14) = v143;
              *(unsigned char *)(v51 + 132) = v107[0];
              outlined consume of DisplayList.Item.Value(v5, v4);
              uint64_t result = (char *)swift_bridgeObjectRelease();
              *(void *)(v3 + 40) = v51;
              *(void *)(v3 + 48) = 0x4000000900000000;
              *(void *)(v3 + 56) = v40;
              *(unsigned char *)(v3 + 66) = v135;
              *(_WORD *)(v3 + 64) = v139;
              char v15 = v7;
              goto LABEL_51;
            }
          }
          if (*(void *)(v40 + 16) == 1)
          {
            __int16 v80 = *(_WORD *)(v40 + 96);
            char v81 = *(unsigned char *)(v40 + 98);
            int v82 = *(_DWORD *)(v40 + 100);
            long long v83 = *(_OWORD *)(v40 + 48);
            v149 = *(_OWORD *)(v40 + 32);
            v150 = v83;
            long long v84 = *(_OWORD *)(v40 + 80);
            v151 = *(_OWORD *)(v40 + 64);
            v152 = v84;
            BYTE2(v153) = v81;
            LOWORD(v153) = v80;
            HIDWORD(v153) = v82;
            DisplayList.Item.opaqueContentPath()((uint64_t)&v169);
            swift_bridgeObjectRelease();
            outlined init with take of (Path, FillStyle)?((uint64_t)&v169, (uint64_t)&v149);
            int v85 = (unsigned __int16)v151 | (BYTE2(v151) << 16);
            if ((v151 & 0xFF00) != 0x200)
            {
              *(_OWORD *)v141 = v149;
              char v145 = v14;
              uint64_t v137 = *((void *)&v150 + 1);
              unint64_t v14 = v150;
              uint64_t v86 = swift_allocObject();
              *(_OWORD *)(v86 + 16) = *(_OWORD *)v141;
              *(void *)(v86 + 32) = v14;
              LOBYTE(v14) = v145;
              *(void *)(v86 + 40) = v137;
              *(unsigned char *)(v86 + 48) = v85;
              *(unsigned char *)(v86 + 49) = BYTE1(v85) & 1;
              *(unsigned char *)(v86 + 50) = BYTE2(v85) & 1;
              *(_DWORD *)(v86 + 52) = v41;
              swift_bridgeObjectRetain();
              outlined retain of (Path, FillStyle)?((uint64_t)&v169, (void (*)(void, void, void, void, void))outlined copy of (Path, FillStyle)?);
              outlined consume of DisplayList.Item.Value(v5, v4);
              *(void *)(v3 + 40) = v86;
              *(void *)(v3 + 48) = 0x4000000600000000;
              *(void *)(v3 + 56) = v6;
              *(unsigned char *)(v3 + 66) = BYTE2(v7);
              *(_WORD *)(v3 + 64) = v7;
              LOBYTE(v161) = v2;
              DisplayList.Item.canonicalize(options:)(&v161);
              outlined retain of (Path, FillStyle)?((uint64_t)&v169, (void (*)(void, void, void, void, void))outlined consume of (Path, FillStyle)?);
            }
          }
          else
          {
            swift_bridgeObjectRelease();
          }
          goto LABEL_88;
        case 8:
          if (*(unsigned char *)(v5 + 88)) {
            goto LABEL_50;
          }
          long long v52 = *(_OWORD *)(v5 + 32);
          v149 = *(_OWORD *)(v5 + 16);
          v150 = v52;
          v151 = *(_OWORD *)(v5 + 48);
          v169 = 0x3FF0000000000000uLL;
          *(void *)&v170 = 0;
          *((void *)&v170 + 1) = 0x3FF0000000000000;
          v171 = 0uLL;
          if ((static CGAffineTransform.== infix(_:_:)() & 1) == 0) {
            goto LABEL_50;
          }
          swift_bridgeObjectRetain();
          outlined consume of DisplayList.Item.Value(v5, v4);
          *(_OWORD *)(v3 + 40) = xmmword_2461B9DD0;
          *(void *)(v3 + 56) = v6;
          *(unsigned char *)(v3 + 66) = BYTE2(v7);
          *(_WORD *)(v3 + 64) = v7;
          v161 = v6;
          v162 = v7;
          v163 = BYTE2(v7);
          __int16 v53 = &v161;
          goto LABEL_49;
        case 9:
          char v147 = v7;
          uint64_t v54 = *(void *)(v5 + 24);
          uint64_t v55 = *(void *)(v5 + 40);
          uint64_t v56 = *(void *)(v5 + 48);
          uint64_t v57 = *(void *)(v5 + 56);
          uint64_t v58 = *(void *)(v5 + 64);
          uint64_t v59 = *(void *)(v5 + 72);
          uint64_t v60 = *(void *)(v5 + 80);
          uint64_t v61 = *(void *)(v5 + 88);
          uint64_t v62 = *(void *)(v5 + 96);
          uint64_t v63 = *(void *)(v5 + 104);
          uint64_t v64 = *(void *)(v5 + 112);
          uint64_t v65 = *(void *)(v5 + 120);
          unsigned int v66 = *(_DWORD *)(v5 + 128);
          unsigned __int8 v67 = *(unsigned char *)(v5 + 132);
          v115 = *(void **)(v5 + 16);
          id v117 = *(id *)(v5 + 32);
          *(void *)&v149 = v115;
          *((void *)&v149 + 1) = v54;
          *(void *)v144 = v54;
          *(void *)&v150 = v117;
          *((void *)&v150 + 1) = v55;
          uint64_t v125 = v56;
          *(void *)v127 = v55;
          *(void *)&v151 = v56;
          *((void *)&v151 + 1) = v57;
          uint64_t v121 = v58;
          uint64_t v123 = v57;
          *(void *)&v152 = v58;
          *((void *)&v152 + 1) = v59;
          uint64_t v119 = v59;
          uint64_t v136 = v61;
          uint64_t v140 = v60;
          v153 = v60;
          v154 = v61;
          uint64_t v130 = v63;
          uint64_t v133 = v62;
          v155 = v62;
          v156 = v63;
          uint64_t v113 = v64;
          v157 = v64;
          v158 = v65;
          uint64_t v68 = v65;
          unsigned int v69 = v66;
          v159 = v66;
          unsigned __int8 v70 = v67;
          v160 = v67;
          uint64_t v110 = v65;
          unsigned int v108 = v66;
          if (GraphicsFilter.isIdentity.getter())
          {
            swift_bridgeObjectRetain();
            outlined copy of GraphicsFilter(v115, v144[0], v117, v127[0], v125, v123, v121, v119, v140, v136, v133, v130, v113, v68, v69, SBYTE2(v69));
            outlined consume of DisplayList.Item.Value(v5, v4);
            *(_OWORD *)(v3 + 40) = xmmword_2461B9DD0;
            *(void *)(v3 + 56) = v6;
            *(unsigned char *)(v3 + 66) = BYTE2(v7);
            *(_WORD *)(v3 + 64) = v7;
            *(void *)&v149 = v6;
            WORD4(v149) = v7;
            BYTE10(v149) = BYTE2(v7);
            DisplayList.Item.canonicalizeIdentityEffect(list:)((uint64_t)&v149);
            char v15 = v7;
            outlined consume of GraphicsFilter(v115, v144[0], v117, v127[0], v125, v123, v121, v119, v140, v136, v133, v130, v113, v110, v108, SBYTE2(v108));
LABEL_50:
            uint64_t result = (char *)swift_bridgeObjectRelease();
          }
          else
          {
            *(void *)&v149 = v115;
            *((void *)&v149 + 1) = *(void *)v144;
            *(void *)&v150 = v117;
            *((void *)&v150 + 1) = *(void *)v127;
            *(void *)&v151 = v125;
            *((void *)&v151 + 1) = v123;
            *(void *)&v152 = v121;
            *((void *)&v152 + 1) = v119;
            v153 = v140;
            v154 = v136;
            v155 = v133;
            v156 = v130;
            v157 = v113;
            v158 = v68;
            v159 = v69;
            v160 = v70;
            outlined copy of GraphicsFilter(v115, v144[0], v117, v127[0], v125, v123, v121, v119, v140, v136, v133, v130, v113, v68, v69, SBYTE2(v69));
            outlined copy of GraphicsFilter(v115, v144[0], v117, v127[0], v125, v123, v121, v119, v140, v136, v133, v130, v113, v68, v69, SBYTE2(v69));
            specialized _ColorMatrix.init(_:premultiplied:)((uint64_t)&v149, 0, (uint64_t)&v161);
            outlined init with take of _ColorMatrix?((uint64_t)&v161, (uint64_t)&v169);
            if (v174 == 1
              || (v175[2] = v171,
                  v175[3] = v172,
                  v175[4] = v173,
                  v175[0] = v169,
                  v175[1] = v170,
                  *(void *)(v6 + 16) != 1))
            {
              outlined consume of GraphicsFilter(v115, v144[0], v117, v127[0], v125, v123, v121, v119, v140, v136, v133, v130, v113, v110, v108, SBYTE2(v108));
            }
            else
            {
              CGFloat v91 = *(double *)(v3 + 16);
              CGFloat v92 = *(double *)(v3 + 24);
              __int16 v93 = *(_WORD *)(v6 + 96);
              char v94 = *(unsigned char *)(v6 + 98);
              int v95 = *(_DWORD *)(v6 + 100);
              long long v96 = *(_OWORD *)(v6 + 48);
              v164 = *(_OWORD *)(v6 + 32);
              v165 = v96;
              long long v97 = *(_OWORD *)(v6 + 80);
              v166 = *(_OWORD *)(v6 + 64);
              v167 = v97;
              BYTE2(v168) = v94;
              LOWORD(v168) = v93;
              DWORD1(v168) = v95;
              DisplayList.Item.colorMatrix(size:)((uint64_t)&v149, v91, v92);
              outlined consume of GraphicsFilter(v115, v144[0], v117, v127[0], v125, v123, v121, v119, v140, v136, v133, v130, v113, v110, v108, SBYTE2(v108));
              uint64_t v98 = v155;
              if (v155)
              {
                int v99 = (unsigned __int16)v156 | (BYTE2(v156) << 16);
                uint64_t v100 = swift_allocObject();
                specialized static _ColorMatrix.* infix(_:_:)(v175, &v149, (uint64_t)&v164, v101, v102, v103, v104);
                long long v105 = v165;
                *(_OWORD *)(v100 + 16) = v164;
                *(_OWORD *)(v100 + 32) = v105;
                long long v106 = v167;
                *(_OWORD *)(v100 + 48) = v166;
                *(_OWORD *)(v100 + 64) = v106;
                *(_OWORD *)(v100 + 80) = v168;
                *(void *)(v100 + 96) = 0;
                *(unsigned char *)(v100 + 132) = 4;
                outlined consume of DisplayList.Item.Value(v5, v4);
                uint64_t result = (char *)swift_bridgeObjectRelease();
                *(void *)(v3 + 40) = v100;
                *(void *)(v3 + 48) = 0x4000000900000000;
                *(void *)(v3 + 56) = v98;
                *(unsigned char *)(v3 + 66) = BYTE2(v99);
                *(_WORD *)(v3 + 64) = v99;
                char v15 = v7;
                goto LABEL_51;
              }
            }
LABEL_88:
            uint64_t result = (char *)swift_bridgeObjectRelease();
            char v15 = v147;
          }
LABEL_51:
          if (v15) {
            goto LABEL_57;
          }
          switch(v14)
          {
            case 7u:
              if (*(void *)(*(void *)(v5 + 16) + 16))
              {
                uint64_t v72 = v5;
                char v73 = v4;
                char v74 = 7;
                return (char *)outlined consume of DisplayList.Effect(v72, v73, v74);
              }
              uint64_t v71 = v3 + 64;
              outlined consume of DisplayList.Item.Value(*(void *)(v71 - 24), *(void *)(v71 - 16));
              uint64_t v77 = v5;
              char v78 = v4;
              char v79 = 7;
              break;
            case 6u:
              long long v75 = *(_OWORD *)(v5 + 32);
              v176[0] = *(_OWORD *)(v5 + 16);
              v176[1] = v75;
              v177 = *(unsigned char *)(v5 + 48);
              outlined init with take of Path.Storage((uint64_t)v176, (uint64_t)v178);
              outlined retain of Path.Storage((uint64_t)v178, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
              char v76 = Path.isEmpty.getter();
              outlined retain of Path.Storage((uint64_t)v176, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
              if ((v76 & 1) == 0)
              {
                uint64_t v72 = v5;
                char v73 = v4;
                char v74 = 6;
                return (char *)outlined consume of DisplayList.Effect(v72, v73, v74);
              }
              uint64_t v71 = v3 + 64;
              outlined consume of DisplayList.Item.Value(*(void *)(v71 - 24), *(void *)(v71 - 16));
              uint64_t v77 = v5;
              char v78 = v4;
              char v79 = 6;
              break;
            case 4u:
              if (*(float *)&v5 > 0.0) {
                return result;
              }
              uint64_t v71 = v3 + 64;
              uint64_t result = (char *)outlined consume of DisplayList.Item.Value(*(void *)(v71 - 24), *(void *)(v71 - 16));
              goto LABEL_86;
            default:
LABEL_57:
              uint64_t v72 = v5;
              char v73 = v4;
              char v74 = v14;
              return (char *)outlined consume of DisplayList.Effect(v72, v73, v74);
          }
          uint64_t result = (char *)outlined consume of DisplayList.Effect(v77, v78, v79);
LABEL_86:
          *(_OWORD *)(v71 - 24) = xmmword_2461B9DE0;
          *(void *)(v71 - 8) = 0;
          *(unsigned char *)(v71 + 2) = 0;
          *(_WORD *)uint64_t v71 = 0;
          return result;
        case 19:
          if (v5 || v4) {
            goto LABEL_50;
          }
          *(void *)&v149 = v6;
          WORD4(v149) = v7;
          BYTE10(v149) = BYTE2(v7);
LABEL_48:
          __int16 v53 = (uint64_t *)&v149;
LABEL_49:
          DisplayList.Item.canonicalizeIdentityEffect(list:)((uint64_t)v53);
          goto LABEL_50;
        default:
          goto LABEL_50;
      }
    }
  }
  return result;
}

uint64_t DisplayList.Item.properties.getter@<X0>(unsigned char *a1@<X8>)
{
  unint64_t v4 = *(void *)(v1 + 40);
  unint64_t v3 = *(void *)(v1 + 48);
  unsigned int v5 = *(unsigned __int16 *)(v1 + 64) | (*(unsigned __int8 *)(v1 + 66) << 16);
  switch(v3 >> 62)
  {
    case 1uLL:
      switch(BYTE4(v3))
      {
        case 2u:
          uint64_t result = outlined copy of DisplayList.Effect(*(void *)(v1 + 40), *(void *)(v1 + 48), 2);
          int v8 = v4;
          break;
        case 7u:
          int v8 = *(unsigned __int8 *)(v4 + 26);
          outlined copy of DisplayList.Item.Value(v4, v3);
          outlined consume of DisplayList.Effect(v4, v3, 7);
          uint64_t result = swift_bridgeObjectRelease();
          break;
        case 0x11u:
          (*(void (**)(uint64_t *__return_ptr))(*(void *)v4 + 120))(&v21);
          outlined copy of DisplayList.Item.Value(v4, v3);
          outlined consume of DisplayList.Effect(v4, v3, 17);
          uint64_t result = swift_bridgeObjectRelease();
          int v8 = v21;
          break;
        default:
          outlined copy of DisplayList.Effect(*(void *)(v1 + 40), *(void *)(v1 + 48), SBYTE4(v3));
          swift_bridgeObjectRetain();
          outlined consume of DisplayList.Effect(v4, v3, SBYTE4(v3));
          uint64_t result = swift_bridgeObjectRelease();
          int v8 = 0;
          break;
      }
      int v6 = v8 | HIWORD(v5);
      goto LABEL_23;
    case 2uLL:
      uint64_t v9 = *(void *)(v4 + 16);
      if (!v9)
      {
        char v11 = 0;
        goto LABEL_18;
      }
      if (v9 == 1)
      {
        uint64_t v10 = 0;
        char v11 = 0;
LABEL_16:
        uint64_t v18 = v9 - v10;
        long long v19 = (char *)(v4 + 40 * v10 + 66);
        do
        {
          char v20 = *v19;
          v19 += 40;
          v11 |= v20;
          --v18;
        }
        while (v18);
        goto LABEL_18;
      }
      char v12 = 0;
      char v13 = 0;
      uint64_t v10 = v9 & 0x7FFFFFFFFFFFFFFELL;
      unint64_t v14 = (char *)(v4 + 106);
      uint64_t v15 = v9 & 0x7FFFFFFFFFFFFFFELL;
      do
      {
        char v16 = *(v14 - 40);
        char v17 = *v14;
        v14 += 80;
        v12 |= v16;
        v13 |= v17;
        v15 -= 2;
      }
      while (v15);
      char v11 = v13 | v12;
      if (v9 != v10) {
        goto LABEL_16;
      }
LABEL_18:
      *a1 = v11;
      return result;
    case 3uLL:
      goto LABEL_4;
    default:
      if (v4 >> 60 == 9)
      {
        LOBYTE(v6) = *(unsigned char *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 0x1A);
LABEL_23:
        *a1 = v6;
      }
      else
      {
LABEL_4:
        *a1 = 0;
      }
      return result;
  }
}

uint64_t _threadGeometryProxyData()
{
  return *(void *)_perThreadGeometryProxyData();
}

uint64_t DisplayList.Item.canonicalizeIdentityEffect(list:)(uint64_t result)
{
  uint64_t v2 = *(void *)result;
  if (*(void *)(*(void *)result + 16) == 1)
  {
    long long v3 = *(_OWORD *)(v2 + 48);
    uint64_t v4 = *(void *)(v2 + 64);
    uint64_t v5 = *(void *)(v2 + 72);
    unint64_t v6 = *(void *)(v2 + 80);
    uint64_t v7 = *(void *)(v2 + 88);
    char v8 = *(unsigned char *)(v2 + 98);
    __int16 v9 = *(_WORD *)(v2 + 96);
    int v13 = *(_DWORD *)(v2 + 100);
    *(float64x2_t *)uint64_t v1 = vaddq_f64(*(float64x2_t *)(v2 + 32), *(float64x2_t *)v1);
    *(_OWORD *)(v1 + 16) = v3;
    uint64_t v10 = *(void *)(v1 + 32);
    uint64_t v12 = *(void *)(v1 + 40);
    if (v4 > v10) {
      uint64_t v10 = v4;
    }
    *(void *)(v1 + 32) = v10;
    unint64_t v11 = *(void *)(v1 + 48);
    outlined copy of DisplayList.Item.Value(v5, v6);
    uint64_t result = outlined consume of DisplayList.Item.Value(v12, v11);
    *(void *)(v1 + 40) = v5;
    *(void *)(v1 + 48) = v6;
    *(void *)(v1 + 56) = v7;
    *(unsigned char *)(v1 + 66) = v8;
    *(_WORD *)(v1 + 64) = v9;
    if (v13) {
      *(_DWORD *)(v1 + 68) = v13;
    }
  }
  return result;
}

void type metadata accessor for Attribute<DisplayList>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s14AttributeGraph0A0Vy7SwiftUI11DisplayListVGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s14AttributeGraph0A0Vy7SwiftUI11DisplayListVGMaTm_1(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s14AttributeGraph0A0Vy7SwiftUI11DisplayListVGMaTm_2(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t RendererEffectDisplayList.content.getter@<X0>(uint64_t a1@<X8>)
{
  if (*(_DWORD *)(v1 + 32) == *MEMORY[0x263F288F8])
  {
    uint64_t result = 0;
    *(unsigned char *)(a1 + 10) = 0;
    *(_WORD *)(a1 + 8) = 0;
  }
  else
  {
    uint64_t Value = AGGraphGetValue();
    char v5 = *(unsigned char *)(Value + 10);
    *(_WORD *)(a1 + 8) = *(_WORD *)(Value + 8);
    *(unsigned char *)(a1 + 10) = v5;
    uint64_t result = swift_bridgeObjectRetain();
  }
  *(void *)a1 = result;
  return result;
}

uint64_t closure #1 in RendererEffectDisplayList.value.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(type metadata accessor for RendererEffectDisplayList() + 16);
  uint64_t Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v7, Value, v8);
  uint64_t v10 = (double *)AGGraphGetValue();
  (*(void (**)(uint64_t, uint64_t, double, double))(a3 + 24))(a2, a3, *v10, v10[1]);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, a2);
}

uint64_t type metadata accessor for RendererEffectDisplayList()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t _ShapeStyle_InterpolatorGroup.properties.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_beginAccess();
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    uint64_t v6 = 0;
    char v7 = 0;
    uint64_t v8 = v4 + 32;
    while (1)
    {
      uint64_t v9 = v8 + 224 * v6;
      char v10 = *(unsigned char *)(v9 + 146);
      uint64_t v11 = *(void *)(v9 + 192);
      uint64_t v12 = *(void *)(v11 + 16);
      if (v12)
      {
        if (v12 == 1)
        {
          uint64_t v13 = 0;
        }
        else
        {
          LODWORD(result) = 0;
          uint64_t v13 = v12 & 0x7FFFFFFFFFFFFFFELL;
          unint64_t v14 = (unsigned __int8 *)(v11 + 154);
          uint64_t v15 = v12 & 0x7FFFFFFFFFFFFFFELL;
          do
          {
            char v16 = *(v14 - 112);
            int v17 = *v14;
            v14 += 224;
            v10 |= v16;
            uint64_t result = v17 | result;
            v15 -= 2;
          }
          while (v15);
          v10 |= result;
          if (v12 == v13) {
            goto LABEL_3;
          }
        }
        uint64_t v18 = v12 - v13;
        long long v19 = (char *)(v11 + 112 * v13 + 42);
        do
        {
          char v20 = *v19;
          v19 += 112;
          v10 |= v20;
          --v18;
        }
        while (v18);
      }
LABEL_3:
      ++v6;
      v7 |= v10;
      if (v6 == v5) {
        goto LABEL_14;
      }
    }
  }
  char v7 = 0;
LABEL_14:
  *a1 = v7;
  return result;
}

uint64_t destroy for Path(uint64_t a1)
{
  return outlined consume of Path.Storage(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
}

uint64_t Path.isEmpty.getter()
{
  uint64_t v1 = *(void **)v0;
  uint64_t IsEmpty = 1;
  switch(*(unsigned char *)(v0 + 32))
  {
    case 2:
      long long v3 = (void *)v1[2];
      uint64_t v4 = v1[3];
      uint64_t v5 = v1[4];
      uint64_t v6 = v1[5];
      return CGRectIsNull(*(CGRect *)&v3);
    case 3:
    case 4:
      goto LABEL_15;
    case 5:
      if (*((unsigned char *)v1 + 16))
      {
        if (*((unsigned char *)v1 + 16) != 1)
        {
          uint64_t v7 = one-time initialization token for bufferCallbacks;
          swift_retain();
          if (v7 != -1) {
            swift_once();
          }
LABEL_12:
          uint64_t IsEmpty = RBPathIsEmpty();
          _s7SwiftUI4PathVWOsTm_0(v0, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
          return IsEmpty;
        }
LABEL_7:
        swift_retain();
        goto LABEL_12;
      }
      if (v1[3]) {
        goto LABEL_7;
      }
      __break(1u);
LABEL_15:
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    case 6:
      return IsEmpty;
    default:
      long long v3 = *(void **)v0;
      uint64_t v4 = *(void *)(v0 + 8);
      uint64_t v5 = *(void *)(v0 + 16);
      uint64_t v6 = *(void *)(v0 + 24);
      return CGRectIsNull(*(CGRect *)&v3);
  }
}

double _ClipEffect.effectValue(size:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, unint64_t a3@<D0>)
{
  Shape.effectivePath(in:)(*(void *)(a1 + 16), *(void *)(a1 + 24), (uint64_t)v11, a3);
  uint64_t v6 = swift_allocObject();
  double result = *(double *)v11;
  long long v8 = v11[1];
  *(_OWORD *)(v6 + 16) = v11[0];
  *(_OWORD *)(v6 + 32) = v8;
  *(unsigned char *)(v6 + 48) = v12;
  uint64_t v9 = (char *)(v3 + *(int *)(a1 + 36));
  char v10 = *v9;
  LOBYTE(v9) = v9[1];
  *(unsigned char *)(v6 + 49) = v10;
  *(unsigned char *)(v6 + 50) = (_BYTE)v9;
  *(_DWORD *)(v6 + 52) = 0;
  *(void *)a2 = v6;
  *(_DWORD *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 12) = 6;
  return result;
}

uint64_t Shape.effectivePath(in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, unint64_t a4@<D2>)
{
  void (*v12)(char *__return_ptr, uint64_t, uint64_t);
  char v13;
  uint64_t v14;
  int v15;
  long long v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t result;
  char v23;
  long long v24;
  long long v25;
  long long v26;
  int v27;
  char v28;
  void v29[4];
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  unsigned char v36[48];

  (*(void (**)(void *__return_ptr))(a2 + 24))(v29);
  uint64_t v8 = v29[0];
  uint64_t v9 = v29[1];
  uint64_t v10 = v29[2];
  uint64_t v11 = v29[3];
  id v23 = v30;
  outlined init with take of Path.Storage((uint64_t)v29, (uint64_t)v36);
  char v12 = *(void (**)(char *__return_ptr, uint64_t, uint64_t))(a2 + 40);
  outlined retain of Path((uint64_t)v36, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
  v12(&v28, a1, a2);
  uint64_t v13 = v28;
  if (v28 == 2) {
    goto LABEL_11;
  }
  unint64_t v14 = _threadGeometryProxyData();
  if (!v14) {
    goto LABEL_11;
  }
  uint64_t v15 = *(_DWORD *)(v14 + 48);
  char v16 = *(_OWORD *)(v14 + 16);
  uint64_t v24 = *(_OWORD *)v14;
  uint64_t v25 = v16;
  uint64_t v26 = *(_OWORD *)(v14 + 32);
  uint64_t v27 = v15;
  GeometryProxy.environment.getter(&v31);
  int v17 = v31;
  if (v32)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v17, &v24);
    swift_release_n();
    swift_release_n();
    uint64_t v18 = v24;
  }
  else
  {
    long long v19 = swift_retain_n();
    char v20 = specialized find<A>(_:key:)(v19);
    uint64_t v18 = v20 ? *(unsigned __int8 *)(v20 + 72) : 0;
    swift_release_n();
  }
  if (((v13 & 1) == 0) == v18)
  {
LABEL_11:
    double result = outlined retain of Path((uint64_t)v29, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
    uint64_t v21 = v23;
  }
  else
  {
    uint64_t v24 = 0xBFF0000000000000;
    *(void *)&uint64_t v25 = 0;
    *((void *)&v25 + 1) = 0x3FF0000000000000;
    uint64_t v26 = a4;
    Path.applying(_:)((double *)&v24, (uint64_t)&v31);
    uint64_t v8 = v31;
    uint64_t v9 = v32;
    uint64_t v10 = v33;
    uint64_t v11 = v34;
    uint64_t v21 = v35;
    outlined retain of Path((uint64_t)v29, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
    double result = outlined retain of Path((uint64_t)v29, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
  }
  *(void *)a3 = v8;
  *(void *)(a3 + 8) = v9;
  *(void *)(a3 + 16) = v10;
  *(void *)(a3 + 24) = v11;
  *(unsigned char *)(a3 + 32) = v21;
  return result;
}

void protocol witness for static ScrollableCollection.accessibilityRole.getter in conformance DynamicLayoutScrollable(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t _s7SwiftUI4PathVWOrTm_0(uint64_t a1, void (*a2)(void, void, void, void, void))
{
  return a1;
}

double protocol witness for Shape.path(in:) in conformance RoundedRectangle@<D0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>)
{
  RoundedRectangle.path(in:)((uint64_t)v8, a2, a3, a4, a5);
  double result = *(double *)v8;
  long long v7 = v8[1];
  *(_OWORD *)a1 = v8[0];
  *(_OWORD *)(a1 + 16) = v7;
  *(unsigned char *)(a1 + 32) = v9;
  return result;
}

uint64_t RoundedRectangle.path(in:)@<X0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>)
{
  double v11 = *(double *)v5;
  double v12 = *(double *)(v5 + 8);
  char v13 = *(unsigned char *)(v5 + 16);
  if (CGRectIsNull(*(CGRect *)&a2))
  {
    uint64_t result = 0;
    char v15 = 6;
    a3 = 0.0;
    a4 = 0.0;
    a5 = 0.0;
  }
  else if (v11 == 0.0 && v12 == 0.0 {
         || (v16.origin.x = a2, v16.origin.y = a3, v16.size.width = a4, v16.size.height = a5, CGRectIsInfinite(v16)))
  }
  {
    char v15 = 0;
    uint64_t result = *(void *)&a2;
  }
  else
  {
    uint64_t result = swift_allocObject();
    *(CGFloat *)(result + 16) = a2;
    *(CGFloat *)(result + 24) = a3;
    *(CGFloat *)(result + 32) = a4;
    *(CGFloat *)(result + 40) = a5;
    char v15 = 2;
    a3 = 0.0;
    *(double *)(result + 48) = v11;
    *(double *)(result + 56) = v12;
    a4 = 0.0;
    a5 = 0.0;
    *(unsigned char *)(result + 64) = v13;
  }
  *(void *)a1 = result;
  *(CGFloat *)(a1 + 8) = a3;
  *(CGFloat *)(a1 + 16) = a4;
  *(CGFloat *)(a1 + 24) = a5;
  *(unsigned char *)(a1 + 32) = v15;
  return result;
}

void destroy for GraphicsFilter(uint64_t a1)
{
}

void outlined consume of GraphicsFilter(void *a1, int a2, id a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int16 a15, char a16)
{
  if (a16 == 15)
  {
  }
  else if (a16 == 1)
  {
    outlined consume of VariableBlurStyle.Mask(a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, HIBYTE(a15));
  }
}

uint64_t DisplayList.Item.paint(in:)(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  unint64_t v5 = *(void *)(v4 + 48);
  if (v5 >> 62) {
    return 0;
  }
  CGFloat v11 = *(double *)v4;
  CGFloat v10 = *(double *)(v4 + 8);
  CGFloat v13 = *(double *)(v4 + 16);
  CGFloat v12 = *(double *)(v4 + 24);
  unint64_t v14 = *(void *)(v4 + 40);
  if (v14 >> 60 == 4)
  {
    outlined init with take of Path.Storage((v14 & 0xFFFFFFFFFFFFFFFLL) + 16, (uint64_t)v24);
    uint64_t v15 = *(void *)((v14 & 0xFFFFFFFFFFFFFFFLL) + 0x38);
    outlined copy of DisplayList.Item.Value(v14, v5);
    outlined copy of DisplayList.Item.Value(v14, v5);
    outlined retain of Path.Storage((uint64_t)v24, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
    swift_retain();
    v27.origin.x = a1;
    v27.origin.y = a2;
    v27.size.width = a3;
    v27.size.height = a4;
    v29.origin.x = v11;
    v29.origin.y = v10;
    v29.size.width = v13;
    v29.size.height = v12;
    if (CGRectEqualToRect(v27, v29))
    {
      v28.origin.x = 0.0;
      v28.origin.y = 0.0;
      v28.size.width = a3;
      v28.size.height = a4;
      BOOL IsNull = CGRectIsNull(v28);
      if (IsNull) {
        uint64_t v17 = 0;
      }
      else {
        uint64_t v17 = *(void *)&a3;
      }
      if (IsNull) {
        uint64_t v18 = 0;
      }
      else {
        uint64_t v18 = *(void *)&a4;
      }
      v25[0] = 0;
      v25[1] = 0;
      v25[2] = v17;
      v25[3] = v18;
      if (IsNull) {
        unsigned __int8 v19 = 6;
      }
      else {
        unsigned __int8 v19 = 0;
      }
      unsigned __int8 v26 = v19;
      char v20 = specialized static Path.Storage.== infix(_:_:)((uint64_t)v24, (uint64_t)v25);
      outlined consume of DisplayList.Item.Value(v14, v5);
      outlined retain of Path.Storage((uint64_t)v24, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
      outlined consume of Path.Storage(0, 0, v17, v18, v19);
      if (v20)
      {
        outlined consume of DisplayList.Item.Value(v14, v5);
        return v15;
      }
      swift_release();
    }
    else
    {
      outlined consume of DisplayList.Item.Value(v14, v5);
      swift_release();
      outlined retain of Path.Storage((uint64_t)v24, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
    }
    outlined consume of DisplayList.Item.Value(v14, v5);
    return 0;
  }
  if (v14 >> 60 != 1) {
    return 0;
  }
  uint64_t v22 = *(void *)((v14 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
  uint64_t v23 = *(void *)((v14 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
  if (!CGRectEqualToRect(*(CGRect *)&a1, *(CGRect *)v4)) {
    return 0;
  }
  type metadata accessor for KeyedEncodingContainer<_DisplayList_Identity.CodingKeys>(0, (unint64_t *)&lazy cache variable for type metadata for _AnyResolvedPaint<Color.Resolved>, (uint64_t (*)(void))lazy protocol witness table accessor for type Color.Resolved and conformance Color.Resolved, (uint64_t)&type metadata for Color.Resolved, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _AnyResolvedPaint);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v23;
  *(void *)(v15 + 24) = v22;
  return v15;
}

double protocol witness for Shape.path(in:) in conformance Capsule@<D0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>)
{
  Capsule.path(in:)((uint64_t)v8, a2, a3, a4, a5);
  double result = *(double *)v8;
  long long v7 = v8[1];
  *(_OWORD *)a1 = v8[0];
  *(_OWORD *)(a1 + 16) = v7;
  *(unsigned char *)(a1 + 32) = v9;
  return result;
}

uint64_t Capsule.path(in:)@<X0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>)
{
  char v11 = *v5;
  double Width = CGRectGetWidth(*(CGRect *)&a2);
  v17.origin.x = a2;
  v17.origin.y = a3;
  v17.size.width = a4;
  v17.size.height = a5;
  double Height = CGRectGetHeight(v17);
  if (Height < Width) {
    double Width = Height;
  }
  v18.origin.x = a2;
  v18.origin.y = a3;
  v18.size.width = a4;
  v18.size.height = a5;
  if (CGRectIsNull(v18))
  {
    uint64_t result = 0;
    char v15 = 6;
    a3 = 0.0;
    a4 = 0.0;
    a5 = 0.0;
  }
  else
  {
    double v16 = Width * 0.5;
    if (v16 == 0.0
      || (v19.origin.x = a2, v19.origin.y = a3, v19.size.width = a4, v19.size.height = a5, CGRectIsInfinite(v19)))
    {
      char v15 = 0;
      uint64_t result = *(void *)&a2;
    }
    else
    {
      uint64_t result = swift_allocObject();
      *(CGFloat *)(result + 16) = a2;
      *(CGFloat *)(result + 24) = a3;
      *(CGFloat *)(result + 32) = a4;
      *(CGFloat *)(result + 40) = a5;
      char v15 = 2;
      a3 = 0.0;
      *(double *)(result + 48) = v16;
      *(double *)(result + 56) = v16;
      a4 = 0.0;
      a5 = 0.0;
      *(unsigned char *)(result + 64) = v11;
    }
  }
  *(void *)a1 = result;
  *(CGFloat *)(a1 + 8) = a3;
  *(CGFloat *)(a1 + 16) = a4;
  *(CGFloat *)(a1 + 24) = a5;
  *(unsigned char *)(a1 + 32) = v15;
  return result;
}

uint64_t _StrokedShape.layoutDirectionBehavior.getter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 40))(*(void *)(a1 + 16));
}

double protocol witness for Shape.path(in:) in conformance _StrokedShape<A>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _StrokedShape.path(in:)(a1, (uint64_t)v5);
  double result = *(double *)v5;
  long long v4 = v5[1];
  *(_OWORD *)a2 = v5[0];
  *(_OWORD *)(a2 + 16) = v4;
  *(unsigned char *)(a2 + 32) = v6;
  return result;
}

uint64_t Shape.layoutDirectionBehavior.getter@<X0>(char *a1@<X8>)
{
  if (one-time initialization token for v5 != -1) {
    swift_once();
  }
  unsigned int v2 = static Semantics.v5;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F4504) {
    uint64_t result = dyld_program_minos_at_least();
  }
  else {
    uint64_t result = dword_26B0F4500 >= v2;
  }
  if (result) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  *a1 = v4;
  return result;
}

{
  return Shape.layoutDirectionBehavior.getter(a1);
}

uint64_t outlined retain of (Path, FillStyle)?(uint64_t a1, void (*a2)(void, void, void, void, void))
{
  return a1;
}

uint64_t outlined init with take of (Path, FillStyle)?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for (Path, FillStyle)?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for (Path, FillStyle)?()
{
  if (!lazy cache variable for type metadata for (Path, FillStyle)?)
  {
    type metadata accessor for (Path, FillStyle)(255, &lazy cache variable for type metadata for (Path, FillStyle));
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for (Path, FillStyle)?);
    }
  }
}

void DisplayList.Item.opaqueContentPath()(uint64_t a1@<X8>)
{
  unint64_t v3 = *(void *)(v1 + 48);
  if (v3 >> 62) {
    goto LABEL_26;
  }
  double v5 = *(double *)v1;
  double v4 = *(double *)(v1 + 8);
  unint64_t v6 = *(void *)(v1 + 40);
  if (v6 >> 60 != 4)
  {
    if (v6 >> 60 == 1 && *(float *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 0x1C) == 1.0)
    {
      CGFloat v7 = *(double *)(v1 + 16);
      CGFloat v8 = *(double *)(v1 + 24);
      v31.origin.x = *(CGFloat *)v1;
      v31.origin.y = *(CGFloat *)(v1 + 8);
      v31.size.width = v7;
      v31.size.height = v8;
      BOOL IsNull = CGRectIsNull(v31);
      if (IsNull) {
        double v10 = 0.0;
      }
      else {
        double v10 = v5;
      }
      if (IsNull) {
        double v11 = 0.0;
      }
      else {
        double v11 = v4;
      }
      if (IsNull) {
        CGFloat v12 = 0.0;
      }
      else {
        CGFloat v12 = v7;
      }
      if (IsNull) {
        CGFloat v13 = 0.0;
      }
      else {
        CGFloat v13 = v8;
      }
      if (IsNull) {
        int v14 = 6;
      }
      else {
        int v14 = 0;
      }
      int v15 = v14 | 0x10000;
      goto LABEL_27;
    }
LABEL_26:
    double v10 = 0.0;
    double v11 = 0.0;
    CGFloat v12 = 0.0;
    CGFloat v13 = 0.0;
    int v15 = 512;
    goto LABEL_27;
  }
  long long v16 = *(_OWORD *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
  long long v17 = *(_OWORD *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
  int v22 = *(unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
  char v30 = *(unsigned char *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
  v29[0] = v16;
  v29[1] = v17;
  double v10 = *(double *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
  double v11 = *(double *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
  CGFloat v12 = *(double *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
  CGFloat v13 = *(double *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 0x28);
  int v23 = *(unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 0x40);
  int v24 = *(unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 0x41);
  uint64_t v25 = *(uint64_t (**)(uint64_t))(**(void **)((v6 & 0xFFFFFFFFFFFFFFFLL) + 0x38) + 104);
  outlined copy of DisplayList.Item.Value(v6, v3);
  outlined copy of DisplayList.Item.Value(v6, v3);
  outlined retain of Path.Storage((uint64_t)v29, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
  uint64_t v18 = swift_retain();
  if ((v25(v18) & 1) == 0)
  {
    outlined consume of DisplayList.Item.Value(v6, v3);
    swift_release();
    outlined retain of Path.Storage((uint64_t)v29, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
    outlined consume of DisplayList.Item.Value(v6, v3);
    goto LABEL_26;
  }
  if (v5 == 0.0 && v4 == 0.0)
  {
    outlined retain of Path.Storage((uint64_t)v29, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
    int v19 = v22;
  }
  else
  {
    CGAffineTransformMakeTranslation(&v28, v5, v4);
    Path.applying(_:)(&v28.a, (uint64_t)v26);
    double v10 = *(double *)v26;
    double v11 = *(double *)&v26[1];
    CGFloat v12 = *(double *)&v26[2];
    CGFloat v13 = *(double *)&v26[3];
    int v19 = v27;
  }
  outlined consume of DisplayList.Item.Value(v6, v3);
  swift_release();
  outlined retain of Path.Storage((uint64_t)v29, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
  outlined consume of DisplayList.Item.Value(v6, v3);
  if (v23) {
    int v20 = 256;
  }
  else {
    int v20 = 0;
  }
  if (v24) {
    int v21 = 0x10000;
  }
  else {
    int v21 = 0;
  }
  int v15 = v21 | v20 | v19;
LABEL_27:
  *(double *)a1 = v10;
  *(double *)(a1 + 8) = v11;
  *(CGFloat *)(a1 + 16) = v12;
  *(CGFloat *)(a1 + 24) = v13;
  *(unsigned char *)(a1 + 34) = BYTE2(v15);
  *(_WORD *)(a1 + 32) = v15;
}

uint64_t specialized static Path.Storage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  outlined init with take of Path.Storage(a1, (uint64_t)&v30);
  switch(v34)
  {
    case 1:
      CGFloat v4 = v30;
      CGFloat v5 = v31;
      CGFloat v6 = v32;
      CGFloat v7 = v33;
      outlined init with take of Path.Storage(a2, (uint64_t)&v27);
      if (v29 != 1) {
        goto LABEL_23;
      }
      goto LABEL_5;
    case 2:
      CGFloat v9 = *(double *)(*(void *)&v30 + 16);
      CGFloat v10 = *(double *)(*(void *)&v30 + 24);
      CGFloat v11 = *(double *)(*(void *)&v30 + 32);
      CGFloat v12 = *(double *)(*(void *)&v30 + 40);
      double v14 = *(double *)(*(void *)&v30 + 48);
      double v13 = *(double *)(*(void *)&v30 + 56);
      char v15 = *(unsigned char *)(*(void *)&v30 + 64);
      outlined init with take of Path.Storage(a2, (uint64_t)&v27);
      if (v29 != 2) {
        goto LABEL_23;
      }
      double v16 = *(double *)(v27.i64[0] + 48);
      double v17 = *(double *)(v27.i64[0] + 56);
      char v18 = *(unsigned char *)(v27.i64[0] + 64);
      v36.origin.x = v9;
      v36.origin.y = v10;
      v36.size.width = v11;
      v36.size.height = v12;
      BOOL v19 = CGRectEqualToRect(v36, *(CGRect *)(v27.i64[0] + 16));
      BOOL v20 = v14 == v16 && v19;
      if (v13 != v17) {
        BOOL v20 = 0;
      }
      char v8 = v20 & (v15 ^ v18 ^ 1);
      break;
    case 3:
      outlined init with take of Path.Storage(a2, (uint64_t)&v27);
      if (v29 == 3) {
        goto LABEL_24;
      }
      goto LABEL_23;
    case 4:
      outlined init with take of Path.Storage(a2, (uint64_t)&v27);
      if (v29 != 4) {
        goto LABEL_23;
      }
      goto LABEL_24;
    case 5:
      uint64_t v21 = *(void *)&v30;
      outlined init with take of Path.Storage(a2, (uint64_t)&v27);
      if (v29 != 5) {
        goto LABEL_23;
      }
      uint64_t v22 = v27.i64[0];
      _s7SwiftUI4PathVWOsTm_0(a1, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
      _s7SwiftUI4PathVWOsTm_0(a2, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
      char v8 = specialized static Path.PathBox.== infix(_:_:)(v21, v22);
      _s7SwiftUI4PathVWOsTm_0(a2, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
      _s7SwiftUI4PathVWOsTm_0(a1, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
      break;
    case 6:
      outlined init with take of Path.Storage(a2, (uint64_t)&v27);
      int8x16_t v23 = vorrq_s8(v27, v28);
      int8x8_t v24 = vorr_s8(*(int8x8_t *)v23.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL));
      if (v29 != 6 || *(void *)&v24 != 0) {
        goto LABEL_23;
      }
LABEL_24:
      char v8 = 1;
      break;
    default:
      CGFloat v4 = v30;
      CGFloat v5 = v31;
      CGFloat v6 = v32;
      CGFloat v7 = v33;
      outlined init with take of Path.Storage(a2, (uint64_t)&v27);
      if (v29)
      {
LABEL_23:
        char v8 = 0;
      }
      else
      {
LABEL_5:
        v37.origin = (CGPoint)v27;
        v37.size = (CGSize)v28;
        v35.origin.x = v4;
        v35.origin.y = v5;
        v35.size.width = v6;
        v35.size.height = v7;
        char v8 = CGRectEqualToRect(v35, v37);
      }
      break;
  }
  return v8 & 1;
}

uint64_t outlined copy of (Path, FillStyle)?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5)
{
  if ((a5 & 0xFF00) != 0x200) {
    return outlined copy of Path.Storage(a1, a2, a3, a4, a5);
  }
  return a1;
}

uint64_t outlined consume of (Path, FillStyle)?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5)
{
  if ((a5 & 0xFF00) != 0x200) {
    return outlined consume of Path.Storage(a1, a2, a3, a4, a5);
  }
  return a1;
}

uint64_t outlined release of ViewGeometry(uint64_t a1)
{
  return a1;
}

uint64_t protocol witness for Shape.path(in:) in conformance Path@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)v1;
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  unsigned __int8 v7 = *(unsigned char *)(v1 + 32);
  uint64_t result = outlined copy of Path.Storage(v3, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  return result;
}

double protocol witness for Shape.path(in:) in conformance OffsetShape<A>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  OffsetShape.path(in:)(a1, (uint64_t)v5);
  double result = *(double *)v5;
  long long v4 = v5[1];
  *(_OWORD *)a2 = v5[0];
  *(_OWORD *)(a2 + 16) = v4;
  *(unsigned char *)(a2 + 32) = v6;
  return result;
}

uint64_t OffsetShape.layoutDirectionBehavior.getter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 40))(*(void *)(a1 + 16));
}

double protocol witness for Shape.path(in:) in conformance AnyShape@<D0>(uint64_t a1@<X8>)
{
  (*(void (**)(_OWORD *__return_ptr))(**(void **)v1 + 80))(v5);
  double result = *(double *)v5;
  long long v4 = v5[1];
  *(_OWORD *)a1 = v5[0];
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = v6;
  return result;
}

uint64_t protocol witness for Shape.layoutDirectionBehavior.getter in conformance CombinedContentShape@<X0>(char *a1@<X8>)
{
  return specialized Shape.layoutDirectionBehavior.getter(a1);
}

uint64_t _TrimmedShape.layoutDirectionBehavior.getter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 40))(*(void *)(a1 + 16));
}

uint64_t closure #2 in static DynamicPropertyCache.fields(of:)(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v9 = AGTupleCount();
  if (v9 < 0)
  {
    __break(1u);
LABEL_26:
    a3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a3[2] + 1, 1, a3);
    *a4 = a3;
    goto LABEL_20;
  }
  uint64_t v10 = v9;
  uint64_t v25 = (void **)a4;
  uint64_t v26 = a2;
  if (v9)
  {
    uint64_t v11 = 0;
    long long v4 = (void *)MEMORY[0x263F8EE78];
    do
    {
      uint64_t v13 = AGTupleElementType();
      uint64_t v14 = swift_conformsToProtocol2();
      if (v14) {
        uint64_t v15 = v13;
      }
      else {
        uint64_t v15 = 0;
      }
      if (v14) {
        uint64_t v16 = v14;
      }
      else {
        uint64_t v16 = 0;
      }
      if (v15)
      {
        uint64_t v17 = AGTupleElementOffset();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          long long v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
        }
        unint64_t v19 = v4[2];
        unint64_t v18 = v4[3];
        if (v19 >= v18 >> 1) {
          long long v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v18 > 1), v19 + 1, 1, v4);
        }
        v4[2] = v19 + 1;
        CGFloat v12 = &v4[4 * v19];
        void v12[4] = v15;
        v12[5] = v16;
        v12[6] = v17;
        v12[7] = a1;
      }
      ++v11;
    }
    while (v10 != v11);
  }
  else
  {
    long long v4 = (void *)MEMORY[0x263F8EE78];
  }
  if (!v4[2])
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  a4 = v25;
  a3 = *v25;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v25 = a3;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_26;
  }
LABEL_20:
  unint64_t v22 = a3[2];
  unint64_t v21 = a3[3];
  if (v22 >= v21 >> 1)
  {
    a3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v21 > 1), v22 + 1, 1, a3);
    *a4 = a3;
  }
  a3[2] = v22 + 1;
  int8x16_t v23 = &a3[2 * v22];
  v23[4] = v26;
  v23[5] = v4;
  return 1;
}

uint64_t closure #1 in static DynamicPropertyCache.fields(of:)(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  uint64_t v8 = swift_conformsToProtocol2();
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  if (v8) {
    uint64_t v10 = a3;
  }
  else {
    uint64_t v10 = 0;
  }
  if (v10)
  {
    uint64_t v11 = *a4;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a4 = v11;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
      *a4 = v11;
    }
    unint64_t v14 = v11[2];
    unint64_t v13 = v11[3];
    if (v14 >= v13 >> 1) {
      uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v13 > 1), v14 + 1, 1, v11);
    }
    _OWORD v11[2] = v14 + 1;
    uint64_t v15 = &v11[4 * v14];
    v15[4] = v10;
    v15[5] = v9;
    v15[6] = a2;
    v15[7] = a1;
    *a4 = v11;
  }
  return 1;
}

uint64_t static Edge.Set.leading.getter()
{
  return 2;
}

uint64_t EnvironmentValues.valueWithSecondaryLookup<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v9 = *v4;
  if (v4[1])
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.valueWithSecondaryLookup<A>(_:secondaryLookupHandler:)(v9, a1, a2, a3, a4);
    swift_release();
  }
  else
  {
    swift_retain();
    PropertyList.valueWithSecondaryLookup<A>(_:)(a1, v9, a2, a3);
  }

  return swift_release();
}

uint64_t PropertyList.Tracker.valueWithSecondaryLookup<A>(_:secondaryLookupHandler:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v25 = a2;
  uint64_t v26 = a5;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  CGFloat v12 = (char *)&v23 - v11;
  uint64_t v13 = *(void *)(v5 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v13 + 16));
  uint64_t v14 = *(void *)(v13 + 24);
  if (!a1)
  {
    if (!v14) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v13 + 56) = 1;
    PropertyList.valueWithSecondaryLookup<A>(_:)(v25, a1, a3, a4);
    goto LABEL_9;
  }
  if (v14 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v24 = swift_checkMetadataState();
  uint64_t v15 = *(void *)(v13 + 32);
  if (*(void *)(v15 + 16) && (unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v24), (v17 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v15 + 56) + 40 * v16, (uint64_t)v27);
    outlined init with take of ScrollStateRequest(v27, (uint64_t)v28);
    uint64_t v18 = v29;
    unint64_t v19 = v30;
    __swift_project_boxed_opaque_existential_1(v28, v29);
    ((void (*)(uint64_t, uint64_t, _UNKNOWN **))v19[1])(AssociatedTypeWitness, v18, v19);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
  }
  else
  {
    uint64_t v20 = v26;
    PropertyList.valueWithSecondaryLookup<A>(_:)(v25, a1, a3, a4);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v20, AssociatedTypeWitness);
    uint64_t v29 = type metadata accessor for SecondaryLookupTrackedValue();
    double v30 = &protocol witness table for SecondaryLookupTrackedValue<A>;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v28);
    SecondaryLookupTrackedValue.init(_:)((uint64_t)v12, (uint64_t)boxed_opaque_existential_1);
    specialized Dictionary.subscript.setter((uint64_t)v28, v24);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v13 + 16));
  return swift_release();
}

uint64_t SecondaryLookupTrackedValue.hasMatchingValue(in:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v10 = (char *)&v12 - v9;
  PropertyList.valueWithSecondaryLookup<A>(_:)(v5, a1, v5, v4);
  swift_checkMetadataState();
  LOBYTE(a1) = (*(uint64_t (**)(uint64_t, char *))(AssociatedConformanceWitness + 24))(v2, v10);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
  return a1 & 1;
}

uint64_t PropertyList.valueWithSecondaryLookup<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = a2;
  v7[2] = a3;
  v7[3] = a4;
  v7[4] = a2;
  v7[5] = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return _ss20withExtendedLifetimeyq0_x_q0_yq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v8, (uint64_t)partial apply for closure #1 in PropertyList.valueWithSecondaryLookup<A>(_:), (uint64_t)v7, (uint64_t)&type metadata for PropertyList, MEMORY[0x263F8E628], AssociatedTypeWitness, MEMORY[0x263F8E658], v5);
}

uint64_t SecondaryLookupTrackedValue.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32);

  return v5(a2, a1, AssociatedTypeWitness);
}

uint64_t type metadata accessor for SecondaryLookupTrackedValue()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for AnyTrackedValue.unwrap<A>() in conformance SecondaryLookupTrackedValue<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return SecondaryLookupTrackedValue.unwrap<A>()(a1, a2);
}

uint64_t HStack.init(alignment:spacing:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  v6[0] = a1;
  v6[1] = a2;
  char v7 = a3 & 1;
  return _VariadicView.Tree.init(_:content:)((uint64_t)v6, (void (*)(uint64_t))partial apply for closure #1 in HStack.init(alignment:spacing:content:), (uint64_t)&type metadata for _HStackLayout, a4, a5);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance VariantThatFitsFlag(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t *))
{
  swift_retain();
  a5(a2, v5, 1, &v9);
  return swift_release();
}

uint64_t specialized closure #1 in PropertyList.subscript.setter(Swift::UInt *a1, Swift::Int a2, char a3, uint64_t a4)
{
  return specialized closure #1 in PropertyList.subscript.setter(a1, a2, a3, a4, (uint64_t (*)(Swift::UInt, Swift::Int))specialized find1<A>(_:key:filter:), &lazy cache variable for type metadata for TypedElement<TextSelectionForbidden>, (uint64_t)&type metadata for TextSelectionForbidden, (uint64_t)&protocol witness table for TextSelectionForbidden);
}

{
  return specialized closure #1 in PropertyList.subscript.setter(a1, a2, a3, a4, (uint64_t (*)(Swift::UInt, Swift::Int))specialized find1<A>(_:key:filter:), &lazy cache variable for type metadata for TypedElement<Semantics.DismissPopsInNavigationSplitViewRoots>, (uint64_t)&type metadata for Semantics.DismissPopsInNavigationSplitViewRoots, (uint64_t)&protocol witness table for Semantics.DismissPopsInNavigationSplitViewRoots);
}

{
  return specialized closure #1 in PropertyList.subscript.setter(a1, a2, a3, a4, (uint64_t (*)(Swift::UInt, Swift::Int))specialized find1<A>(_:key:filter:), &lazy cache variable for type metadata for TypedElement<EndedGestureWaitsForActiveFeature>, (uint64_t)&type metadata for EndedGestureWaitsForActiveFeature, (uint64_t)&protocol witness table for EndedGestureWaitsForActiveFeature);
}

{
  return specialized closure #1 in PropertyList.subscript.setter(a1, a2, a3, a4, (uint64_t (*)(Swift::UInt, Swift::Int))specialized find1<A>(_:key:filter:), &lazy cache variable for type metadata for TypedElement<ImprovedButtonGestureFeature>, (uint64_t)&type metadata for ImprovedButtonGestureFeature, (uint64_t)&protocol witness table for ImprovedButtonGestureFeature);
}

{
  return specialized closure #1 in PropertyList.subscript.setter(a1, a2, a3, a4, (uint64_t (*)(Swift::UInt, Swift::Int))specialized find1<A>(_:key:filter:), &lazy cache variable for type metadata for TypedElement<GestureRecognizerBasedEvents>, (uint64_t)&type metadata for GestureRecognizerBasedEvents, (uint64_t)&protocol witness table for GestureRecognizerBasedEvents);
}

{
  return specialized closure #1 in PropertyList.subscript.setter(a1, a2, a3, a4, (uint64_t (*)(Swift::UInt, Swift::Int))specialized find1<A>(_:key:filter:), &lazy cache variable for type metadata for TypedElement<WithinAccessibilityRotor>, (uint64_t)&type metadata for WithinAccessibilityRotor, (uint64_t)&protocol witness table for WithinAccessibilityRotor);
}

{
  return specialized closure #1 in PropertyList.subscript.setter(a1, a2, a3, a4, (uint64_t (*)(Swift::UInt, Swift::Int))specialized find1<A>(_:key:filter:), &lazy cache variable for type metadata for TypedElement<UnifiedHitTestingFeature>, (uint64_t)&type metadata for UnifiedHitTestingFeature, (uint64_t)&protocol witness table for UnifiedHitTestingFeature);
}

{
  return specialized closure #1 in PropertyList.subscript.setter(a1, a2, a3, a4, (uint64_t (*)(Swift::UInt, Swift::Int))specialized find1<A>(_:key:filter:), &lazy cache variable for type metadata for TypedElement<GestureContainerFeature>, (uint64_t)&type metadata for GestureContainerFeature, (uint64_t)&protocol witness table for GestureContainerFeature);
}

{
  return specialized closure #1 in PropertyList.subscript.setter(a1, a2, a3, a4, (uint64_t (*)(Swift::UInt, Swift::Int))specialized find1<A>(_:key:filter:), &lazy cache variable for type metadata for TypedElement<_SemanticFeature_v6_1>, (uint64_t)&type metadata for _SemanticFeature_v6_1, (uint64_t)&protocol witness table for _SemanticFeature_v6_1);
}

{
  return specialized closure #1 in PropertyList.subscript.setter(a1, a2, a3, a4, (uint64_t (*)(Swift::UInt, Swift::Int))specialized find1<A>(_:key:filter:), &lazy cache variable for type metadata for TypedElement<_SemanticFeature_v5_2>, (uint64_t)&type metadata for _SemanticFeature_v5_2, (uint64_t)&protocol witness table for _SemanticFeature_v5_2);
}

{
  return specialized closure #1 in PropertyList.subscript.setter(a1, a2, a3, a4, (uint64_t (*)(Swift::UInt, Swift::Int))specialized find1<A>(_:key:filter:), &lazy cache variable for type metadata for TypedElement<_SemanticFeature_v4_4>, (uint64_t)&type metadata for _SemanticFeature_v4_4, (uint64_t)&protocol witness table for _SemanticFeature_v4_4);
}

{
  return specialized closure #1 in PropertyList.subscript.setter(a1, a2, a3, a4, (uint64_t (*)(Swift::UInt, Swift::Int))specialized find1<A>(_:key:filter:), &lazy cache variable for type metadata for TypedElement<_SemanticFeature_v2_3>, (uint64_t)&type metadata for _SemanticFeature_v2_3, (uint64_t)&protocol witness table for _SemanticFeature_v2_3);
}

{
  return specialized closure #1 in PropertyList.subscript.setter(a1, a2, a3, a4, (uint64_t (*)(Swift::UInt, Swift::Int))specialized find1<A>(_:key:filter:), &lazy cache variable for type metadata for TypedElement<_SemanticFeature_v2_1>, (uint64_t)&type metadata for _SemanticFeature_v2_1, (uint64_t)&protocol witness table for _SemanticFeature_v2_1);
}

{
  return specialized closure #1 in PropertyList.subscript.setter(a1, a2, a3, a4, (uint64_t (*)(Swift::UInt, Swift::Int))specialized find1<A>(_:key:filter:), &lazy cache variable for type metadata for TypedElement<_SemanticFeature_v6>, (uint64_t)&type metadata for _SemanticFeature_v6, (uint64_t)&protocol witness table for _SemanticFeature_v6);
}

{
  return specialized closure #1 in PropertyList.subscript.setter(a1, a2, a3, a4, (uint64_t (*)(Swift::UInt, Swift::Int))specialized find1<A>(_:key:filter:), &lazy cache variable for type metadata for TypedElement<_SemanticFeature_v5>, (uint64_t)&type metadata for _SemanticFeature_v5, (uint64_t)&protocol witness table for _SemanticFeature_v5);
}

{
  return specialized closure #1 in PropertyList.subscript.setter(a1, a2, a3, a4, (uint64_t (*)(Swift::UInt, Swift::Int))specialized find1<A>(_:key:filter:), &lazy cache variable for type metadata for TypedElement<_SemanticFeature_v4>, (uint64_t)&type metadata for _SemanticFeature_v4, (uint64_t)&protocol witness table for _SemanticFeature_v4);
}

{
  return specialized closure #1 in PropertyList.subscript.setter(a1, a2, a3, a4, (uint64_t (*)(Swift::UInt, Swift::Int))specialized find1<A>(_:key:filter:), &lazy cache variable for type metadata for TypedElement<_SemanticFeature_v3>, (uint64_t)&type metadata for _SemanticFeature_v3, (uint64_t)&protocol witness table for _SemanticFeature_v3);
}

{
  return specialized closure #1 in PropertyList.subscript.setter(a1, a2, a3, a4, (uint64_t (*)(Swift::UInt, Swift::Int))specialized find1<A>(_:key:filter:), &lazy cache variable for type metadata for TypedElement<_SemanticFeature_v2>, (uint64_t)&type metadata for _SemanticFeature_v2, (uint64_t)&protocol witness table for _SemanticFeature_v2);
}

{
  return specialized closure #1 in PropertyList.subscript.setter(a1, a2, a3, a4, (uint64_t (*)(Swift::UInt, Swift::Int))specialized find1<A>(_:key:filter:), &lazy cache variable for type metadata for TypedElement<DisabledFeature>, (uint64_t)&type metadata for DisabledFeature, (uint64_t)&protocol witness table for DisabledFeature);
}

{
  return specialized closure #1 in PropertyList.subscript.setter(a1, a2, a3, a4, (uint64_t (*)(Swift::UInt, Swift::Int))specialized find1<A>(_:key:filter:), &lazy cache variable for type metadata for TypedElement<EnabledFeature>, (uint64_t)&type metadata for EnabledFeature, (uint64_t)&protocol witness table for EnabledFeature);
}

uint64_t StaticIf<>.init<A>(idiom:then:else:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a6 - 8) + 8))(a1, a6);
  type metadata accessor for InterfaceIdiomPredicate();

  return StaticIf<>.init(_:then:else:)(a2, a3, a4, a5, a7);
}

uint64_t StaticIf<>.init<A>(idiom:then:else:)(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a8 - 8) + 8))(a1, a8);
  type metadata accessor for InterfaceIdiomPredicate();
  a2();
  uint64_t v10 = type metadata accessor for StaticIf();
  return a4(v10, v11, v12, v13);
}

uint64_t type metadata accessor for InterfaceIdiomPredicate()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t TextChildQuery.value.getter@<X0>(uint64_t a1@<X8>)
{
  unsigned int v3 = *v1;
  unsigned int v2 = v1[1];
  unsigned int v4 = v1[2];
  unsigned int v5 = v1[3];
  unsigned int v6 = v1[4];
  unsigned int v7 = v1[5];
  unsigned int v8 = v1[6];
  unsigned int v9 = v1[7];
  unsigned int v28 = v1[8];
  type metadata accessor for ResolvedStyledText();
  unint64_t v27 = *(void *)AGGraphGetValue();
  uint64_t v10 = TextChildQuery.unresolvedText.getter();
  uint64_t v23 = v11;
  uint64_t v24 = v10;
  char v21 = v12;
  uint64_t v25 = v13;
  uint64_t v22 = TextChildQuery.renderer.getter();
  unint64_t v31 = __PAIR64__(v2, v3);
  unint64_t v32 = __PAIR64__(v5, v4);
  unint64_t v33 = __PAIR64__(v7, v6);
  unsigned int v34 = v8;
  unsigned int v35 = v9;
  LODWORD(v36) = v28;
  if (TextChildQuery.renderer.getter())
  {
    swift_retain();
    swift_release();
    unint64_t v31 = __PAIR64__(v2, v3);
    unint64_t v32 = __PAIR64__(v5, v4);
    unint64_t v33 = __PAIR64__(v7, v6);
    unsigned int v34 = v8;
    unsigned int v35 = v9;
    LODWORD(v36) = v28;
    TextChildQuery.environment.getter(v30);
    uint64_t v14 = v30[0];
    if (v30[1])
    {
      swift_retain_n();
      swift_retain_n();
      char v15 = specialized PropertyList.Tracker.value<A>(_:for:)(v14);
      swift_release_n();
    }
    else
    {
      uint64_t v18 = swift_retain_n();
      char v15 = specialized closure #1 in PropertyList.subscript.getter(v18, (uint64_t)v29);
    }
    swift_release_n();
    uint64_t v17 = a1;
    unint64_t v16 = v27;
  }
  else
  {
    unint64_t v16 = v27;
    swift_retain();
    char v15 = 0;
    uint64_t v17 = a1;
  }
  unint64_t v31 = v16;
  unint64_t v32 = v24;
  unint64_t v33 = v23;
  LOBYTE(v34) = v21 & 1;
  uint64_t v36 = v25;
  uint64_t v37 = v22;
  char v38 = v15 & 1;
  uint64_t v19 = type metadata accessor for AccessibilityStyledTextContentView();
  AccessibilityStyledTextContentView.body.getter(v19, v17);
  swift_release();
  outlined consume of Text.Storage(v24, v23, v21 & 1);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t TextChildQuery.renderer.getter()
{
  type metadata accessor for TextRendererBoxBase();
  uint64_t result = AGGraphGetWeakValue();
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t type metadata accessor for TextRendererBoxBase()
{
  return self;
}

uint64_t type metadata accessor for AccessibilityStyledTextContentView()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t TextChildQuery.unresolvedText.getter()
{
  uint64_t Value = AGGraphGetValue();
  uint64_t v1 = *(void *)Value;
  outlined copy of Text.Storage(*(void *)Value, *(void *)(Value + 8), *(unsigned char *)(Value + 16));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t closure #1 in HStack.init(alignment:spacing:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a3 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](a1);
  unsigned int v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (void (*)(void))MEMORY[0x270FA5388](v7);
  char v12 = (char *)&v15 - v11;
  v10();
  static ViewBuilder.buildExpression<A>(_:)(v9, a3, a4);
  uint64_t v13 = *(void (**)(char *, uint64_t))(v6 + 8);
  v13(v9, a3);
  static ViewBuilder.buildExpression<A>(_:)(v12, a3, a4);
  return ((uint64_t (*)(char *, uint64_t))v13)(v12, a3);
}

uint64_t ZStack.init(alignment:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  v5[0] = a1;
  v5[1] = a2;
  return _VariadicView.Tree.init(_:content:)((uint64_t)v5, (void (*)(uint64_t))partial apply for closure #1 in ZStack.init(alignment:content:), (uint64_t)&type metadata for _ZStackLayout, a3, a4);
}

uint64_t VStack.init(alignment:spacing:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  v6[0] = a1;
  v6[1] = a2;
  char v7 = a3 & 1;
  return _VariadicView.Tree.init(_:content:)((uint64_t)v6, (void (*)(uint64_t))partial apply for closure #1 in VStack.init(alignment:spacing:content:), (uint64_t)&type metadata for _VStackLayout, a4, a5);
}

uint64_t _VariadicView.Tree.init(_:content:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v10 = *(void *)(a4 - 8);
  v11.n128_f64[0] = MEMORY[0x270FA5388](a1);
  uint64_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(v15 + 16))(a5, a1, v14, v11);
  a2(v16);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a1, a3);
  uint64_t v17 = type metadata accessor for _VariadicView.Tree();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a5 + *(int *)(v17 + 44), v13, a4);
}

uint64_t partial apply for closure #1 in VStack.init(alignment:spacing:content:)()
{
  return closure #1 in VStack.init(alignment:spacing:content:)(v0[4], v0[5], v0[2], v0[3]);
}

uint64_t partial apply for closure #1 in ZStack.init(alignment:content:)()
{
  return closure #1 in ZStack.init(alignment:content:)(v0[4], v0[5], v0[2], v0[3]);
}

uint64_t closure #1 in ZStack.init(alignment:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a3 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](a1);
  unsigned int v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (void (*)(void))MEMORY[0x270FA5388](v7);
  uint64_t v12 = (char *)&v15 - v11;
  v10();
  static ViewBuilder.buildExpression<A>(_:)(v9, a3, a4);
  uint64_t v13 = *(void (**)(char *, uint64_t))(v6 + 8);
  v13(v9, a3);
  static ViewBuilder.buildExpression<A>(_:)(v12, a3, a4);
  return ((uint64_t (*)(char *, uint64_t))v13)(v12, a3);
}

uint64_t closure #1 in VStack.init(alignment:spacing:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a3 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](a1);
  unsigned int v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (void (*)(void))MEMORY[0x270FA5388](v7);
  uint64_t v12 = (char *)&v15 - v11;
  v10();
  static ViewBuilder.buildExpression<A>(_:)(v9, a3, a4);
  uint64_t v13 = *(void (**)(char *, uint64_t))(v6 + 8);
  v13(v9, a3);
  static ViewBuilder.buildExpression<A>(_:)(v12, a3, a4);
  return ((uint64_t (*)(char *, uint64_t))v13)(v12, a3);
}

uint64_t View.staticIf<A, B, C>(_:trueModifier:falseModifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  closure #1 in View.staticIf<A, B, C>(_:trueModifier:falseModifier:)(a2, a3, v13, a6, a7, a8, a9, a10, a11, a12);
  type metadata accessor for StaticIf();
  return closure #2 in View.staticIf<A, B, C>(_:trueModifier:falseModifier:)(a4, a5, v13, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t closure #2 in static StaticIf<>._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v17 = a2;
  uint64_t v18 = a3;
  uint64_t v19 = a4;
  uint64_t v20 = a5;
  uint64_t v11 = type metadata accessor for StaticIf();
  uint64_t v12 = a1 + *(int *)(v11 + 52);
  v16[2] = v11;
  v16[3] = a4;
  uint64_t v13 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v12, a8, (uint64_t)v16, a4, MEMORY[0x263F8E628], v13, MEMORY[0x263F8E658], v14);
  return v17;
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance <> StaticIf<A, B, C>@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return static StaticIf<>._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(void *)(a5 + 16), *(void *)(a5 + 24), *(void *)(a5 + 32), *(void *)(a5 + 40), a7, *(void *)(a6 - 8), *(void *)(a6 - 16));
}

double static StaticIf<>._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  void (*v24)(void *__return_ptr, int *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t);
  int v25;
  void (*v26)(void *__return_ptr, int *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t);
  double result;
  int v28;
  int ShouldRecordTree;
  unsigned int v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int v47;
  void v48[2];
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  uint64_t v87;

  uint64_t v87 = *MEMORY[0x263EF8340];
  int v15 = *a1;
  int v16 = *((_DWORD *)a2 + 2);
  unsigned int v17 = *((_DWORD *)a2 + 6);
  unsigned int v18 = *((_DWORD *)a2 + 7);
  int v19 = *((_DWORD *)a2 + 8);
  int v20 = *((_DWORD *)a2 + 9);
  uint64_t v21 = a2[5];
  unint64_t v33 = a2[6];
  unsigned int v34 = *((_DWORD *)a2 + 14);
  unsigned int v35 = *((_DWORD *)a2 + 15);
  uint64_t v36 = *((_DWORD *)a2 + 16);
  uint64_t v37 = *((_DWORD *)a2 + 17);
  char v38 = *((_DWORD *)a2 + 18);
  uint64_t v39 = *((_DWORD *)a2 + 19);
  uint64_t v40 = *((_DWORD *)a2 + 20);
  __int16 v44 = a2[2];
  char v45 = *a2;
  uint64_t v72 = *a2;
  char v74 = v44;
  LODWORD(v73) = v16;
  double v30 = v18;
  unint64_t v31 = v17;
  long long v75 = __PAIR64__(v18, v17);
  CGFloat v43 = v19;
  char v76 = v19;
  uint64_t v77 = v20;
  unint64_t v32 = v20;
  char v78 = v21;
  char v22 = (*(uint64_t (**)(uint64_t *, uint64_t, unint64_t))(a8 + 8))(&v72, a5, a8);
  uint64_t v50 = a5;
  uint64_t v51 = a6;
  long long v52 = a7;
  __int16 v53 = a8;
  uint64_t v54 = a10;
  uint64_t v55 = a11;
  if (v22)
  {
    LODWORD(v56) = v15;
    uint64_t v72 = a5;
    char v73 = a6;
    char v74 = a7;
    long long v75 = a8;
    type metadata accessor for StaticIf();
    type metadata accessor for _GraphValue();
    _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static StaticIf<>._makeView(view:inputs:), a6, &v49);
    int v23 = v49;
    ShouldRecordTree = AGSubgraphShouldRecordTree();
    if (ShouldRecordTree) {
      AGSubgraphBeginTreeElement();
    }
    uint64_t v72 = v45;
    char v74 = v44;
    LODWORD(v73) = v16;
    long long v75 = __PAIR64__(v30, v31);
    uint64_t v77 = v32;
    char v78 = v21;
    char v79 = v33;
    __int16 v80 = v34;
    char v81 = v35;
    int v82 = v36;
    long long v83 = v37;
    long long v84 = v38;
    int v85 = v39;
    uint64_t v86 = v40;
    long long v47 = v23;
    uint64_t v56 = v45;
    uint64_t v57 = v16;
    uint64_t v58 = v44;
    uint64_t v59 = v31;
    uint64_t v60 = v30;
    uint64_t v61 = 0;
    uint64_t v62 = v32;
    uint64_t v63 = v21;
    uint64_t v64 = v33;
    uint64_t v65 = v34;
    unsigned int v66 = v35;
    unsigned __int8 v67 = v36;
    uint64_t v68 = v37;
    unsigned int v69 = v38;
    unsigned __int8 v70 = v39;
    uint64_t v71 = v40;
    uint64_t v24 = *(void (**)(void *__return_ptr, int *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a10 + 24);
    swift_retain_n();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v24(v48, &v47, &v56, a3, a4, a6, a10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    char v76 = v43;
    if (ShouldRecordTree)
    {
      specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)((uint64_t)v48, (uint64_t)&v72);
      AGSubgraphEndTreeElement();
    }
  }
  else
  {
    LODWORD(v56) = v15;
    uint64_t v72 = a5;
    char v73 = a6;
    char v74 = a7;
    long long v75 = a8;
    type metadata accessor for StaticIf();
    type metadata accessor for _GraphValue();
    _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #2 in static StaticIf<>._makeView(view:inputs:), a7, &v49);
    uint64_t v25 = v49;
    unsigned int v28 = AGSubgraphShouldRecordTree();
    if (v28) {
      AGSubgraphBeginTreeElement();
    }
    uint64_t v72 = v45;
    char v74 = v44;
    LODWORD(v73) = v16;
    long long v75 = __PAIR64__(v30, v31);
    uint64_t v77 = v32;
    char v78 = v21;
    char v79 = v33;
    __int16 v80 = v34;
    char v81 = v35;
    int v82 = v36;
    long long v83 = v37;
    long long v84 = v38;
    int v85 = v39;
    uint64_t v86 = v40;
    long long v47 = v25;
    uint64_t v56 = v45;
    uint64_t v57 = v16;
    uint64_t v58 = v44;
    uint64_t v59 = v31;
    uint64_t v60 = v30;
    uint64_t v61 = 0;
    uint64_t v62 = v32;
    uint64_t v63 = v21;
    uint64_t v64 = v33;
    uint64_t v65 = v34;
    unsigned int v66 = v35;
    unsigned __int8 v67 = v36;
    uint64_t v68 = v37;
    unsigned int v69 = v38;
    unsigned __int8 v70 = v39;
    uint64_t v71 = v40;
    uint64_t v26 = *(void (**)(void *__return_ptr, int *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a11 + 24);
    swift_retain_n();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v26(v48, &v47, &v56, a3, a4, a7, a11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    char v76 = v43;
    if (v28)
    {
      specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)((uint64_t)v48, (uint64_t)&v72);
      AGSubgraphEndTreeElement();
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t result = *(double *)&v48[1];
  *(void *)a9 = v48[0];
  *(double *)(a9 + 8) = result;
  return result;
}

uint64_t static StaticIf<>._makeViewList(view:inputs:)(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v14 = *a1;
  uint64_t v15 = *a2;
  int v16 = *((_DWORD *)a2 + 2);
  uint64_t v17 = a2[2];
  unsigned int v18 = *((_DWORD *)a2 + 6);
  unsigned int v19 = *((_DWORD *)a2 + 7);
  int v20 = *((_DWORD *)a2 + 8);
  int v21 = *((_DWORD *)a2 + 9);
  uint64_t v28 = a2[6];
  uint64_t v29 = a2[5];
  uint64_t v34 = a2[7];
  int v35 = *((_DWORD *)a2 + 16);
  uint64_t v36 = a2[9];
  char v37 = *((unsigned char *)a2 + 80);
  uint64_t v38 = *a2;
  LODWORD(v39) = v16;
  uint64_t v40 = v17;
  unsigned int v32 = v19;
  unsigned int v33 = v18;
  unint64_t v41 = __PAIR64__(v19, v18);
  int v30 = v21;
  int v31 = v20;
  int v42 = v20;
  int v43 = v21;
  uint64_t v44 = v29;
  if ((*(uint64_t (**)(uint64_t *, uint64_t, unint64_t))(a6 + 8))(&v38, a3, a6))
  {
    int v50 = v14;
    uint64_t v38 = a3;
    uint64_t v39 = a4;
    uint64_t v40 = a5;
    unint64_t v41 = a6;
    type metadata accessor for StaticIf();
    type metadata accessor for _GraphValue();
    _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static StaticIf<>._makeView(view:inputs:), a4, v51);
    uint64_t v22 = v51[0];
    if (AGSubgraphShouldRecordTree()) {
      AGSubgraphBeginTreeElement();
    }
    int v50 = v22;
    uint64_t v38 = v15;
    LODWORD(v39) = v16;
    uint64_t v40 = v17;
    unint64_t v41 = __PAIR64__(v32, v33);
    int v42 = v31;
    int v43 = v30;
    uint64_t v44 = v29;
    uint64_t v45 = v28;
    uint64_t v46 = v34;
    int v47 = v35;
    uint64_t v48 = v36;
    char v49 = v37;
    (*(void (**)(int *, uint64_t *, uint64_t, uint64_t))(a7 + 32))(&v50, &v38, a4, a7);
    uint64_t v23 = v22;
    uint64_t v24 = a4;
    uint64_t v25 = a7;
  }
  else
  {
    int v50 = v14;
    uint64_t v38 = a3;
    uint64_t v39 = a4;
    uint64_t v40 = a5;
    unint64_t v41 = a6;
    type metadata accessor for StaticIf();
    type metadata accessor for _GraphValue();
    _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #2 in static StaticIf<>._makeView(view:inputs:), a5, v51);
    uint64_t v26 = v51[0];
    if (AGSubgraphShouldRecordTree()) {
      AGSubgraphBeginTreeElement();
    }
    int v50 = v26;
    uint64_t v38 = v15;
    LODWORD(v39) = v16;
    uint64_t v40 = v17;
    unint64_t v41 = __PAIR64__(v32, v33);
    int v42 = v31;
    int v43 = v30;
    uint64_t v44 = v29;
    uint64_t v45 = v28;
    uint64_t v46 = v34;
    int v47 = v35;
    uint64_t v48 = v36;
    char v49 = v37;
    (*(void (**)(int *, uint64_t *, uint64_t, uint64_t))(a8 + 32))(&v50, &v38, a5, a8);
    uint64_t v23 = v26;
    uint64_t v24 = a5;
    uint64_t v25 = a8;
  }
  return $defer #1 <A>() in static ViewModifier.makeDebuggableViewList(modifier:inputs:body:)(v23, v24, v25);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance <> StaticIf<A, B, C>(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static StaticIf<>._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, *(void *)(a5 + 16), *(void *)(a5 + 24), *(void *)(a5 + 32), *(void *)(a5 + 40), *(void *)(a6 - 8), *(void *)(a6 - 16));
}

uint64_t static StaticIf<>._makeViewList(modifier:inputs:body:)(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10)
{
  int v14 = *a1;
  uint64_t v15 = *a2;
  int v16 = *((_DWORD *)a2 + 2);
  uint64_t v17 = a2[2];
  unsigned int v19 = *((_DWORD *)a2 + 6);
  unsigned int v18 = *((_DWORD *)a2 + 7);
  int v20 = *((_DWORD *)a2 + 8);
  int v21 = *((_DWORD *)a2 + 9);
  uint64_t v28 = a2[6];
  uint64_t v29 = a2[5];
  uint64_t v34 = a2[7];
  int v35 = *((_DWORD *)a2 + 16);
  uint64_t v36 = a2[9];
  char v37 = *((unsigned char *)a2 + 80);
  uint64_t v40 = *a2;
  unsigned int v32 = v18;
  int v33 = v16;
  LODWORD(v41) = v16;
  uint64_t v42 = v17;
  unint64_t v43 = __PAIR64__(v18, v19);
  int v30 = v21;
  int v31 = v20;
  int v44 = v20;
  int v45 = v21;
  uint64_t v46 = v29;
  if ((*(uint64_t (**)(uint64_t *, uint64_t, unint64_t))(a8 + 8))(&v40, a5, a8))
  {
    int v52 = v14;
    uint64_t v40 = a5;
    uint64_t v41 = a6;
    uint64_t v42 = a7;
    unint64_t v43 = a8;
    type metadata accessor for StaticIf();
    type metadata accessor for _GraphValue();
    _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static StaticIf<>._makeView(view:inputs:), a6, v53);
    uint64_t v22 = v53[0];
    if (AGSubgraphShouldRecordTree()) {
      AGSubgraphBeginTreeElement();
    }
    int v52 = v22;
    uint64_t v40 = v15;
    LODWORD(v41) = v33;
    uint64_t v42 = v17;
    unint64_t v43 = __PAIR64__(v32, v19);
    int v44 = v31;
    int v45 = v30;
    uint64_t v46 = v29;
    uint64_t v47 = v28;
    uint64_t v48 = v34;
    int v49 = v35;
    uint64_t v50 = v36;
    char v51 = v37;
    (*(void (**)(int *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a9 + 32))(&v52, &v40, a3, a4, a6, a9);
    uint64_t v23 = v22;
    uint64_t v24 = a6;
    uint64_t v25 = a9;
  }
  else
  {
    int v52 = v14;
    uint64_t v40 = a5;
    uint64_t v41 = a6;
    uint64_t v42 = a7;
    unint64_t v43 = a8;
    type metadata accessor for StaticIf();
    type metadata accessor for _GraphValue();
    _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #2 in static StaticIf<>._makeView(view:inputs:), a7, v53);
    uint64_t v26 = v53[0];
    if (AGSubgraphShouldRecordTree()) {
      AGSubgraphBeginTreeElement();
    }
    int v52 = v26;
    uint64_t v40 = v15;
    LODWORD(v41) = v33;
    uint64_t v42 = v17;
    unint64_t v43 = __PAIR64__(v32, v19);
    int v44 = v31;
    int v45 = v30;
    uint64_t v46 = v29;
    uint64_t v47 = v28;
    uint64_t v48 = v34;
    int v49 = v35;
    uint64_t v50 = v36;
    char v51 = v37;
    (*(void (**)(int *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a10 + 32))(&v52, &v40, a3, a4, a7, a10);
    uint64_t v23 = v26;
    uint64_t v24 = a7;
    uint64_t v25 = a10;
  }
  return $defer #1 <A>() in static ViewModifier.makeDebuggableViewList(modifier:inputs:body:)(v23, v24, v25);
}

uint64_t type metadata accessor for StaticIf()
{
  return swift_getGenericMetadata();
}

uint64_t static StyleContextAcceptsPredicate.evaluate(inputs:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  if (!specialized find<A>(_:key:)(v1) && one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  return AnyStyleContextType.acceptsTop<A>(_:)() & 1;
}

uint64_t AnyStyleContextType.acceptsTop<A>(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 8) + 16))() & 1;
}

uint64_t protocol witness for static AnyStyleContextTypeBox.acceptsTop<A>(_:) in conformance StyleContextTypeBox<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static StyleContextTypeBox.acceptsTop<A>(_:)(a1, *(void *)(a3 + 16), a2, *(void *)(a3 + 24));
}

uint64_t static StyleContextTypeBox.acceptsTop<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static StyleContext.acceptsTop<A>(_:)(a1, a2, a3, a4) & 1;
}

uint64_t static StyleContext.acceptsTop<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t, uint64_t))(a4 + 8))(a1, 0, a3, a2, a4);
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance GroupContainer(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t *))
{
  int v3 = *((_DWORD *)a2 + 2);
  uint64_t v4 = a2[2];
  uint64_t v5 = a2[5];
  int v6 = *((_DWORD *)a2 + 16);
  uint64_t v7 = a2[9];
  char v8 = *((unsigned char *)a2 + 80);
  uint64_t v10 = *a2;
  int v11 = v3;
  uint64_t v12 = v4;
  long long v13 = *(_OWORD *)(a2 + 3);
  uint64_t v14 = v5;
  long long v15 = *((_OWORD *)a2 + 3);
  int v16 = v6;
  uint64_t v17 = v7;
  char v18 = v8;
  return a3(a1, &v10);
}

uint64_t protocol witness for static StyleContext.accepts<A>(_:at:) in conformance TupleStyleContext<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static TupleStyleContext.accepts<A>(_:at:)(a1, a2, *(void *)(a4 + 16), a3);
}

uint64_t static TupleStyleContext.accepts<A>(_:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  specialized static TupleDescriptor.tupleDescription(_:)(a3, v15);
  uint64_t v6 = v15[0];
  specialized static TupleDescriptor.tupleDescription(_:)(a4, v15);
  uint64_t v7 = v15[0];
  unint64_t v8 = *(void *)(v6 + 16);
  unint64_t v9 = *(void *)(v15[0] + 16);
  if (v8 >= v9)
  {
    v15[0] = a2;
    v15[1] = v7;
    unsigned __int8 v16 = 1;
    if (v8)
    {
      swift_bridgeObjectRetain();
      uint64_t v11 = v6 + 48;
      do
      {
        uint64_t v12 = *(void *)(v11 - 16);
        if (v12 >= a2 && v12 < v9)
        {
          type metadata accessor for TupleStyleContext.QueryAtIndexVisitor();
          TupleStyleContext.QueryAtIndexVisitor.visit<A>(_:)();
        }
        v11 += 24;
        --v8;
      }
      while (v8);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v10 = v16;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v10 = 1;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0;
  }
  return v10;
}

uint64_t specialized static TupleDescriptor.tupleDescription(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  if (one-time initialization token for typeCache != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v4 = static StyleContextDescriptor.typeCache;
  if (*((void *)static StyleContextDescriptor.typeCache + 2)
    && (unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v6 & 1) != 0))
  {
    *a2 = *(void *)(v4[7] + 8 * v5);
    return swift_bridgeObjectRetain();
  }
  else
  {
    specialized TupleTypeDescription.init(_:)(a1, (void (*)(void))_styleContextProtocolDescriptor, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), v11);
    uint64_t v8 = v11[0];
    swift_beginAccess();
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v10 = static StyleContextDescriptor.typeCache;
    static StyleContextDescriptor.typeCache = (_UNKNOWN *)0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v8, a1, isUniquelyReferenced_nonNull_native);
    static StyleContextDescriptor.typeCache = v10;
    swift_bridgeObjectRelease();
    uint64_t result = swift_endAccess();
    *a2 = v8;
  }
  return result;
}

{
  void *v4;
  unint64_t v5;
  char v6;
  uint64_t result;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  void *v10;
  uint64_t v11[3];

  if (one-time initialization token for typeCache != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v4 = static ViewDescriptor.typeCache;
  if (*((void *)static ViewDescriptor.typeCache + 2)
    && (unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v6 & 1) != 0))
  {
    *a2 = *(void *)(v4[7] + 8 * v5);
    return swift_bridgeObjectRetain();
  }
  else
  {
    specialized TupleTypeDescription.init(_:)(a1, (void (*)(void))_viewProtocolDescriptor, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), v11);
    uint64_t v8 = v11[0];
    swift_beginAccess();
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v10 = static ViewDescriptor.typeCache;
    static ViewDescriptor.typeCache = (_UNKNOWN *)0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v8, a1, isUniquelyReferenced_nonNull_native);
    static ViewDescriptor.typeCache = v10;
    swift_bridgeObjectRelease();
    uint64_t result = swift_endAccess();
    *a2 = v8;
  }
  return result;
}

uint64_t type metadata accessor for TupleStyleContext.QueryAtIndexVisitor()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t TupleStyleContext.QueryAtIndexVisitor.visit<A>(_:)()
{
  unint64_t v1 = *v0;
  if ((*v0 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_5:
    __break(1u);
  }
  unint64_t v2 = v0[1];
  if (v1 >= *(void *)(v2 + 16)) {
    goto LABEL_5;
  }
  uint64_t v3 = *(void *)(v2 + 24 * v1 + 40);
  uint64_t v4 = type metadata accessor for TupleStyleContext.ContextAcceptsVisitor();
  uint64_t result = TupleStyleContext.ContextAcceptsVisitor.visit<A>(_:)(v3, v4);
  *((unsigned char *)v0 + 16) = 0;
  ++*v0;
  return result;
}

uint64_t TupleStyleContext.ContextAcceptsVisitor.visit<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)(a2 + 32) + 8))(a1, 0);
  unsigned char *v2 = result & 1;
  return result;
}

uint64_t type metadata accessor for TupleStyleContext.ContextAcceptsVisitor()
{
  return __swift_instantiateGenericMetadata();
}

BOOL specialized static StyleContext.accepts<A>(_:at:)(uint64_t a1, uint64_t a2)
{
  return a2 == a1;
}

BOOL static StyleContext.accepts<A>(_:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized static StyleContext.accepts<A>(_:at:)(a1, a4);
}

uint64_t static ViewModifier._makeViewList(modifier:inputs:body:)(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5 = *(void *)a2;
  int v6 = *(_DWORD *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 40);
  int v9 = *(_DWORD *)(a2 + 64);
  uint64_t v10 = *(void *)(a2 + 72);
  char v11 = *(unsigned char *)(a2 + 80);
  int v22 = *a1;
  uint64_t v13 = v5;
  int v14 = v6;
  uint64_t v15 = v7;
  long long v16 = *(_OWORD *)(a2 + 24);
  uint64_t v17 = v8;
  long long v18 = *(_OWORD *)(a2 + 48);
  int v19 = v9;
  uint64_t v20 = v10;
  char v21 = v11;
  return static ViewModifier.makeViewList(modifier:inputs:body:)(&v22, &v13, a3, a4, a5);
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance StyleContextAcceptsPredicate<A>(uint64_t *a1)
{
  return static StyleContextAcceptsPredicate.evaluate(inputs:)(a1);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance <> StaticIf<A, B, C>(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return static StaticIf<>._makeViewList(view:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), *(void *)(a3 + 32), *(void *)(a3 + 40), *(void *)(a4 - 8), *(void *)(a4 - 16));
}

uint64_t closure #2 in View.staticIf<A, B, C>(_:trueModifier:falseModifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v12 = *(void *)(a7 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](a1);
  uint64_t v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v22 - v16;
  v19(v18);
  static ViewBuilder.buildExpression<A>(_:)(v15, a7, a11);
  uint64_t v20 = *(void (**)(char *, uint64_t))(v12 + 8);
  v20(v15, a7);
  static ViewBuilder.buildExpression<A>(_:)(v17, a7, a11);
  return ((uint64_t (*)(char *, uint64_t))v20)(v17, a7);
}

uint64_t closure #1 in View.staticIf<A, B, C>(_:trueModifier:falseModifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11 = *(void *)(a6 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  uint64_t v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v21 - v15;
  v18(v17);
  static ViewBuilder.buildExpression<A>(_:)(v14, a6, a10);
  int v19 = *(void (**)(char *, uint64_t))(v11 + 8);
  v19(v14, a6);
  static ViewBuilder.buildExpression<A>(_:)(v16, a6, a10);
  return ((uint64_t (*)(char *, uint64_t))v19)(v16, a6);
}

uint64_t AccessibilityStyledTextContentView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v24 = a2;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v23 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v12 = *v2;
  uint64_t v11 = v2[1];
  uint64_t v21 = v2[2];
  uint64_t v22 = v11;
  unsigned int v20 = *((unsigned __int8 *)v2 + 24);
  uint64_t v13 = v2[5];
  uint64_t v19 = v2[4];
  char v14 = *((unsigned char *)v2 + 48);
  v25[0] = v12;
  v25[1] = v13;
  char v26 = v14;
  uint64_t v15 = *(void (**)(void *, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 24);
  swift_retain();
  swift_retain();
  v15(v25, v22, v21, v20, v19, v12, v4, v3);
  swift_release();
  swift_release();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  static ViewBuilder.buildExpression<A>(_:)(v7, AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v17 = *(void (**)(char *, uint64_t))(v23 + 8);
  v17(v7, AssociatedTypeWitness);
  static ViewBuilder.buildExpression<A>(_:)(v10, AssociatedTypeWitness, AssociatedConformanceWitness);
  return ((uint64_t (*)(char *, uint64_t))v17)(v10, AssociatedTypeWitness);
}

uint64_t UnsafePointer.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a3, a1, a2);
}

uint64_t initializeBufferWithCopyOfBuffer for StyledTextContentView(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance VStack<A>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return static UnaryView._makeViewList(view:inputs:)(a1, a2, a3);
}

uint64_t partial apply for closure #2 in static _VariadicView.Tree<>._makeViewList(view:inputs:)(uint64_t a1, uint64_t a2)
{
  return closure #2 in static _VariadicView.Tree<>._makeViewList(view:inputs:)(a1, a2, *(_DWORD *)(v2 + 48), *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40));
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance UnifiedHitTestingFeature(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t *))
{
  uint64_t v6 = *a1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  LOBYTE(a4) = a4(v6, v4, &v8);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  return a4 & 1;
}

uint64_t static TraitTransformerModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t *))
{
  int v3 = *((_DWORD *)a2 + 2);
  uint64_t v4 = a2[2];
  int v5 = *((_DWORD *)a2 + 20);
  uint64_t v8 = *a2;
  int v9 = v3;
  uint64_t v10 = v4;
  long long v6 = *(_OWORD *)(a2 + 5);
  long long v11 = *(_OWORD *)(a2 + 3);
  long long v12 = v6;
  long long v13 = *(_OWORD *)(a2 + 7);
  uint64_t v14 = a2[9];
  int v15 = v5;
  return a3(a1, &v8);
}

uint64_t static InterfaceIdiomPredicate.evaluate(inputs:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v2 = specialized find<A>(_:key:)(v1);
  if (!v2)
  {
    swift_release();
    goto LABEL_5;
  }
  uint64_t v3 = *(void *)(v2 + 72);
  swift_release();
  if (!v3)
  {
LABEL_5:
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    type metadata accessor for InterfaceIdiomBox<PhoneInterfaceIdiom>();
    return AnyInterfaceIdiom.accepts<A>(_:)() & 1;
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return AnyInterfaceIdiom.accepts<A>(_:)() & 1;
}

void _GraphInputs.interfaceIdiom.getter(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v4 = specialized find<A>(_:key:)(v3);
  if (!v4)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release_n();
LABEL_5:
    type metadata accessor for InterfaceIdiomBox<PhoneInterfaceIdiom>();
    uint64_t v6 = v7;
    int v5 = &protocol witness table for InterfaceIdiomBox<A>;
    goto LABEL_6;
  }
  uint64_t v6 = *(void *)(v4 + 72);
  int v5 = *(_UNKNOWN ***)(v4 + 80);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  if (!v6) {
    goto LABEL_5;
  }
LABEL_6:
  *a1 = v6;
  a1[1] = v5;
}

uint64_t AnyInterfaceIdiom.accepts<A>(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 8) + 16))() & 1;
}

uint64_t protocol witness for static AnyInterfaceIdiomBox.accepts<A>(_:) in conformance InterfaceIdiomBox<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static InterfaceIdiomBox.accepts<A>(_:)(a1, *(void *)(a4 + 16), a2, *(void *)(a4 + 24), a3);
}

uint64_t static InterfaceIdiomBox.accepts<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a4 + 8))(a1, a3, a5) & 1;
}

BOOL static InterfaceIdiom.accepts<A>(_:)(uint64_t a1)
{
  return a1 == v1;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance InterfaceIdiomPredicate<A>(uint64_t *a1)
{
  return static InterfaceIdiomPredicate.evaluate(inputs:)(a1);
}

BOOL protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance InvertedViewInputPredicate<A>(uint64_t *a1, uint64_t a2)
{
  return static InvertedViewInputPredicate.evaluate(inputs:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
}

BOOL static InvertedViewInputPredicate.evaluate(inputs:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  int v3 = *((_DWORD *)a1 + 2);
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[5];
  uint64_t v7 = *a1;
  int v8 = v3;
  uint64_t v9 = v4;
  long long v10 = *(_OWORD *)(a1 + 3);
  uint64_t v11 = v5;
  return ((*(uint64_t (**)(uint64_t *))(a3 + 8))(&v7) & 1) == 0;
}

uint64_t static ViewModifier._makeView(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v6 = *(void *)a2;
  int v7 = *(_DWORD *)(a2 + 8);
  uint64_t v8 = *(void *)(a2 + 16);
  int v9 = *(_DWORD *)(a2 + 80);
  int v20 = *a1;
  uint64_t v12 = v6;
  int v13 = v7;
  uint64_t v14 = v8;
  long long v10 = *(_OWORD *)(a2 + 40);
  long long v15 = *(_OWORD *)(a2 + 24);
  long long v16 = v10;
  long long v17 = *(_OWORD *)(a2 + 56);
  uint64_t v18 = *(void *)(a2 + 72);
  int v19 = v9;
  return static ViewModifier.makeView(modifier:inputs:body:)(&v20, &v12, a3, a4, a5, a6);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _EnvironmentKeyTransformModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static ViewModifier<>._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, a6, (uint64_t)&protocol witness table for _EnvironmentKeyTransformModifier<A>);
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance _SemanticFeature_v3(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance UnifiedHitTestingFeature(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t specialized closure #1 in PropertyList.subscript.setter(Swift::UInt *a1, Swift::Int hashValue, char a3, uint64_t a4, uint64_t (*a5)(Swift::UInt, Swift::Int), unint64_t *a6, uint64_t a7, uint64_t a8)
{
  v15.value = *a1;
  BloomFilter.init(hashValue:)(hashValue);
  uint64_t result = a5(v15.value, hashValue);
  if (!result || *(unsigned char *)(result + 72) != (a3 & 1))
  {
    uint64_t v17 = *a1;
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, a6, a7, a8, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TypedElement);
    *(unsigned char *)(swift_allocObject() + 72) = a3 & 1;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(hashValue, 0, v17);
    return swift_release();
  }
  return result;
}

uint64_t specialized closure #1 in PropertyList.subscript.getter(uint64_t a1, Swift::Int hashValue)
{
  BloomFilter.init(hashValue:)(hashValue);
  uint64_t v4 = specialized find1<A>(_:key:filter:)(a1, hashValue, v7);
  if (v4) {
    return *(unsigned __int8 *)(v4 + 72);
  }
  if (one-time initialization token for introduced != -1) {
    swift_once();
  }
  unsigned int v6 = static _SemanticFeature_v3.introduced;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC) {
    return dyld_program_sdk_at_least();
  }
  else {
    return static Semantics.forced >= v6;
  }
}

{
  uint64_t v4;
  unsigned int v6;
  uint64_t v7;

  BloomFilter.init(hashValue:)(hashValue);
  uint64_t v4 = specialized find1<A>(_:key:filter:)(a1, hashValue, v7);
  if (v4) {
    return *(unsigned __int8 *)(v4 + 72);
  }
  if (one-time initialization token for introduced != -1) {
    swift_once();
  }
  unsigned int v6 = static _SemanticFeature_v4.introduced;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC) {
    return dyld_program_sdk_at_least();
  }
  else {
    return static Semantics.forced >= v6;
  }
}

{
  uint64_t v4;
  unsigned int v6;
  uint64_t v7;

  BloomFilter.init(hashValue:)(hashValue);
  uint64_t v4 = specialized find1<A>(_:key:filter:)(a1, hashValue, v7);
  if (v4) {
    return *(unsigned __int8 *)(v4 + 72);
  }
  if (one-time initialization token for introduced != -1) {
    swift_once();
  }
  unsigned int v6 = static _SemanticFeature_v5.introduced;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC) {
    return dyld_program_sdk_at_least();
  }
  else {
    return static Semantics.forced >= v6;
  }
}

{
  uint64_t v4;
  unsigned int v6;
  uint64_t v7;

  BloomFilter.init(hashValue:)(hashValue);
  uint64_t v4 = specialized find1<A>(_:key:filter:)(a1, hashValue, v7);
  if (v4) {
    return *(unsigned __int8 *)(v4 + 72);
  }
  if (one-time initialization token for introduced != -1) {
    swift_once();
  }
  unsigned int v6 = static _SemanticFeature_v6.introduced;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC) {
    return dyld_program_sdk_at_least();
  }
  else {
    return static Semantics.forced >= v6;
  }
}

{
  uint64_t v4;
  unsigned int v6;
  uint64_t v7;

  BloomFilter.init(hashValue:)(hashValue);
  uint64_t v4 = specialized find1<A>(_:key:filter:)(a1, hashValue, v7);
  if (v4) {
    return *(unsigned __int8 *)(v4 + 72);
  }
  if (one-time initialization token for introduced != -1) {
    swift_once();
  }
  unsigned int v6 = static Semantics.DismissPopsInNavigationSplitViewRoots.introduced;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F4504) {
    return dyld_program_minos_at_least();
  }
  else {
    return dword_26B0F4500 >= v6;
  }
}

{
  uint64_t v4;
  unsigned int v6;
  uint64_t v7;

  BloomFilter.init(hashValue:)(hashValue);
  uint64_t v4 = specialized find1<A>(_:key:filter:)(a1, hashValue, v7);
  if (v4) {
    return *(unsigned __int8 *)(v4 + 72);
  }
  if (one-time initialization token for introduced != -1) {
    swift_once();
  }
  unsigned int v6 = static _SemanticFeature_v4_4.introduced;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC) {
    return dyld_program_sdk_at_least();
  }
  else {
    return static Semantics.forced >= v6;
  }
}

{
  uint64_t v4;
  uint64_t v6;

  BloomFilter.init(hashValue:)(hashValue);
  uint64_t v4 = specialized find1<A>(_:key:filter:)(a1, hashValue, v6);
  if (v4) {
    return *(unsigned __int8 *)(v4 + 72);
  }
  else {
    return specialized static Feature.defaultValue.getter() & 1;
  }
}

{
  uint64_t v4;
  uint64_t v6;

  BloomFilter.init(hashValue:)(hashValue);
  uint64_t v4 = specialized find1<A>(_:key:filter:)(a1, hashValue, v6);
  if (v4) {
    return *(unsigned __int8 *)(v4 + 72);
  }
  else {
    return 1;
  }
}

{
  uint64_t v4;
  char v5;
  unsigned int v6;
  uint64_t v8;

  BloomFilter.init(hashValue:)(hashValue);
  uint64_t v4 = specialized find1<A>(_:key:filter:)(a1, hashValue, v8);
  if (!v4)
  {
    if (one-time initialization token for v6 != -1) {
      swift_once();
    }
    unsigned int v6 = static Semantics.v6;
    if (one-time initialization token for forced != -1) {
      swift_once();
    }
    swift_beginAccess();
    if (byte_26B0F44FC == 1)
    {
      if ((dyld_program_sdk_at_least() & 1) == 0)
      {
LABEL_9:
        uint64_t v5 = specialized static GestureContainerFeature.isEnabled.getter();
        return v5 & 1;
      }
    }
    else if (static Semantics.forced < v6)
    {
      goto LABEL_9;
    }
    uint64_t v5 = 1;
    return v5 & 1;
  }
  uint64_t v5 = *(unsigned char *)(v4 + 72);
  return v5 & 1;
}

{
  uint64_t v4;
  unsigned int v6;
  uint64_t v7;

  BloomFilter.init(hashValue:)(hashValue);
  uint64_t v4 = specialized find1<A>(_:key:filter:)(a1, hashValue, v7);
  if (v4) {
    return *(unsigned __int8 *)(v4 + 72);
  }
  if (one-time initialization token for introduced != -1) {
    swift_once();
  }
  unsigned int v6 = static _SemanticFeature_v6_1.introduced;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC) {
    return dyld_program_sdk_at_least();
  }
  else {
    return static Semantics.forced >= v6;
  }
}

{
  uint64_t v4;
  unsigned int v6;
  uint64_t v7;

  BloomFilter.init(hashValue:)(hashValue);
  uint64_t v4 = specialized find1<A>(_:key:filter:)(a1, hashValue, v7);
  if (v4) {
    return *(unsigned __int8 *)(v4 + 72);
  }
  if (one-time initialization token for introduced != -1) {
    swift_once();
  }
  unsigned int v6 = static _SemanticFeature_v5_2.introduced;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC) {
    return dyld_program_sdk_at_least();
  }
  else {
    return static Semantics.forced >= v6;
  }
}

{
  uint64_t v4;
  unsigned int v6;
  uint64_t v7;

  BloomFilter.init(hashValue:)(hashValue);
  uint64_t v4 = specialized find1<A>(_:key:filter:)(a1, hashValue, v7);
  if (v4) {
    return *(unsigned __int8 *)(v4 + 72);
  }
  if (one-time initialization token for introduced != -1) {
    swift_once();
  }
  unsigned int v6 = static _SemanticFeature_v2_3.introduced;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC) {
    return dyld_program_sdk_at_least();
  }
  else {
    return static Semantics.forced >= v6;
  }
}

{
  uint64_t v4;
  unsigned int v6;
  uint64_t v7;

  BloomFilter.init(hashValue:)(hashValue);
  uint64_t v4 = specialized find1<A>(_:key:filter:)(a1, hashValue, v7);
  if (v4) {
    return *(unsigned __int8 *)(v4 + 72);
  }
  if (one-time initialization token for introduced != -1) {
    swift_once();
  }
  unsigned int v6 = static _SemanticFeature_v2_1.introduced;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC) {
    return dyld_program_sdk_at_least();
  }
  else {
    return static Semantics.forced >= v6;
  }
}

{
  uint64_t v4;
  unsigned int v6;
  uint64_t v7;

  BloomFilter.init(hashValue:)(hashValue);
  uint64_t v4 = specialized find1<A>(_:key:filter:)(a1, hashValue, v7);
  if (v4) {
    return *(unsigned __int8 *)(v4 + 72);
  }
  if (one-time initialization token for introduced != -1) {
    swift_once();
  }
  unsigned int v6 = static _SemanticFeature_v2.introduced;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC) {
    return dyld_program_sdk_at_least();
  }
  else {
    return static Semantics.forced >= v6;
  }
}

{
  uint64_t v4;
  unsigned int v6;
  uint64_t v7;

  BloomFilter.init(hashValue:)(hashValue);
  uint64_t v4 = specialized find1<A>(_:key:filter:)(a1, hashValue, v7);
  if (v4) {
    return *(unsigned __int8 *)(v4 + 72);
  }
  if (one-time initialization token for introduced != -1) {
    swift_once();
  }
  unsigned int v6 = static EnabledFeature.introduced;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC) {
    return dyld_program_sdk_at_least();
  }
  else {
    return static Semantics.forced >= v6;
  }
}

uint64_t specialized find1<A>(_:key:filter:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  if (result)
  {
    uint64_t v7 = (void *)result;
    while (1)
    {
      while ((a3 & ~v7[7]) != 0)
      {
        uint64_t v7 = (void *)v7[5];
        if (!v7) {
          return 0;
        }
      }
      uint64_t v8 = v7[3];
      if (v8)
      {
        uint64_t result = a4(v8, a2, a3);
        if (result) {
          return result;
        }
      }
      if (v7[2] == a2) {
        break;
      }
      uint64_t v7 = (void *)v7[4];
      if (!v7) {
        return 0;
      }
    }
    return (uint64_t)v7;
  }
  return result;
}

uint64_t specialized find1<A>(_:key:filter:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized find1<A>(_:key:filter:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized find1<A>(_:key:filter:));
}

uint64_t partial apply for closure #1 in HStack.init(alignment:spacing:content:)()
{
  return closure #1 in HStack.init(alignment:spacing:content:)(v0[4], v0[5], v0[2], v0[3]);
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance _SemanticFeature_v4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance UnifiedHitTestingFeature(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance _SemanticFeature_v5(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance UnifiedHitTestingFeature(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t partial apply for closure #1 in GroupElementsOfContent.body.getter()
{
  return closure #1 in GroupElementsOfContent.body.getter(v0[6], v0[2], v0[3], v0[4]);
}

uint64_t closure #1 in GroupElementsOfContent.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a2 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](a1);
  int v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ViewBuilder.buildExpression<A>(_:)(v7, v10, v11);
  static ViewBuilder.buildExpression<A>(_:)(v9, a2, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, a2);
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance AndOperationViewInputPredicate<A, B>(uint64_t *a1, uint64_t *a2)
{
  return static AndOperationViewInputPredicate.evaluate(inputs:)(a1, a2[2], a2[3], a2[4], a2[5]);
}

uint64_t static AndOperationViewInputPredicate.evaluate(inputs:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *a1;
  int v7 = *((_DWORD *)a1 + 2);
  uint64_t v8 = a1[2];
  int v9 = *((_DWORD *)a1 + 6);
  int v10 = *((_DWORD *)a1 + 7);
  int v11 = *((_DWORD *)a1 + 8);
  int v12 = *((_DWORD *)a1 + 9);
  uint64_t v13 = a1[5];
  uint64_t v17 = *a1;
  int v18 = v7;
  uint64_t v19 = v8;
  int v20 = v9;
  int v21 = v10;
  int v22 = v11;
  int v23 = v12;
  uint64_t v24 = v13;
  if ((*(uint64_t (**)(uint64_t *))(a4 + 8))(&v17))
  {
    uint64_t v17 = v6;
    int v18 = v7;
    uint64_t v19 = v8;
    int v20 = v9;
    int v21 = v10;
    int v22 = v11;
    int v23 = v12;
    uint64_t v24 = v13;
    char v14 = (*(uint64_t (**)(uint64_t *, uint64_t))(a5 + 8))(&v17, a3);
  }
  else
  {
    char v14 = 0;
  }
  return v14 & 1;
}

uint64_t static ViewInputFlag.evaluate(inputs:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = a2;
  swift_getAssociatedTypeWitness();
  uint64_t v18 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v19 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  int v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  int v10 = (char *)&v18 - v9;
  uint64_t v11 = *a1;
  int v12 = *((_DWORD *)a1 + 2);
  uint64_t v13 = a1[2];
  uint64_t v14 = a1[5];
  uint64_t v15 = swift_checkMetadataState();
  uint64_t v21 = v11;
  int v22 = v12;
  uint64_t v23 = v13;
  long long v24 = *(_OWORD *)(a1 + 3);
  uint64_t v25 = v14;
  _GraphInputs.subscript.getter(v15, v15, v18);
  (*(void (**)(uint64_t, uint64_t))(a3 + 48))(v20, a3);
  swift_getAssociatedConformanceWitness();
  LOBYTE(v13) = dispatch thunk of static Equatable.== infix(_:_:)();
  long long v16 = *(void (**)(char *, uint64_t))(v19 + 8);
  v16(v7, AssociatedTypeWitness);
  v16(v10, AssociatedTypeWitness);
  return v13 & 1;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance BothFeatures<A, B>(uint64_t *a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return static ViewInputFlag.evaluate(inputs:)(a1, a2, WitnessTable);
}

uint64_t protocol witness for static ViewInputFlag.value.getter in conformance BothFeatures<A, B>@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_getWitnessTable();
  *a1 = 1;
  return result;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance _SemanticFeature_v6(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance UnifiedHitTestingFeature(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t protocol witness for static TextAccessibilityProvider.makeView(content:text:resolved:) in conformance EmptyTextAccessibilityProvider@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 8);
  char v3 = *(unsigned char *)(a1 + 16);
  *(void *)a2 = *(void *)a1;
  *(void *)(a2 + 8) = v2;
  *(unsigned char *)(a2 + 16) = v3;
  swift_retain();

  return swift_retain();
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance Semantics.DismissPopsInNavigationSplitViewRoots(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance UnifiedHitTestingFeature(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance _SemanticFeature_v4_4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance UnifiedHitTestingFeature(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance GestureContainerFeature(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance UnifiedHitTestingFeature(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t specialized static Feature.defaultValue.getter()
{
  swift_beginAccess();
  if (static CoreTesting.isRunning == 1)
  {
    swift_beginAccess();
    return static GestureContainerFeature.isEnabledOverride & 1;
  }
  else
  {
    uint64_t v1 = getenv("SWIFTUI_GESTURE_CONTAINER");
    if (v1)
    {
      return atoi(v1) != 0;
    }
    else
    {
      v4[3] = &type metadata for GestureContainerFeature;
      v4[4] = lazy protocol witness table accessor for type GestureContainerFeature and conformance GestureContainerFeature();
      char v2 = isFeatureEnabled(_:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
      if (v2)
      {
        if (one-time initialization token for v6 != -1) {
          swift_once();
        }
        unsigned int v3 = static Semantics.v6;
        if (one-time initialization token for forced != -1) {
          swift_once();
        }
        swift_beginAccess();
        if (byte_26B0F44FC) {
          return dyld_program_sdk_at_least();
        }
        else {
          return static Semantics.forced >= v3;
        }
      }
      else
      {
        return 0;
      }
    }
  }
}

uint64_t specialized static GestureContainerFeature.isEnabled.getter()
{
  swift_beginAccess();
  if (static CoreTesting.isRunning == 1)
  {
    swift_beginAccess();
    return static GestureContainerFeature.isEnabledOverride & 1;
  }
  else
  {
    uint64_t v1 = getenv("SWIFTUI_GESTURE_CONTAINER");
    if (v1)
    {
      return atoi(v1) != 0;
    }
    else
    {
      v4[3] = &type metadata for GestureContainerFeature;
      v4[4] = lazy protocol witness table accessor for type GestureContainerFeature and conformance GestureContainerFeature();
      char v2 = isFeatureEnabled(_:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
      if (v2)
      {
        if (one-time initialization token for v6 != -1) {
          swift_once();
        }
        unsigned int v3 = static Semantics.v6;
        if (one-time initialization token for forced != -1) {
          swift_once();
        }
        swift_beginAccess();
        if (byte_26B0F44FC) {
          return dyld_program_sdk_at_least();
        }
        else {
          return static Semantics.forced >= v3;
        }
      }
      else
      {
        return 0;
      }
    }
  }
}

uint64_t static ImprovedButtonGestureFeature.isEnabled.getter()
{
  swift_beginAccess();
  if (static CoreTesting.isRunning) {
    return 1;
  }
  uint64_t v1 = getenv("SWIFTUI_GESTURE_CONTAINER");
  if (v1) {
    return atoi(v1) != 0;
  }
  v4[3] = &type metadata for GestureContainerFeature;
  v4[4] = lazy protocol witness table accessor for type GestureContainerFeature and conformance GestureContainerFeature();
  char v2 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  if ((v2 & 1) == 0) {
    return 0;
  }
  if (one-time initialization token for v6 != -1) {
    swift_once();
  }
  unsigned int v3 = static Semantics.v6;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC) {
    return dyld_program_sdk_at_least();
  }
  else {
    return static Semantics.forced >= v3;
  }
}

unint64_t lazy protocol witness table accessor for type GestureContainerFeature and conformance GestureContainerFeature()
{
  unint64_t result = lazy protocol witness table cache variable for type GestureContainerFeature and conformance GestureContainerFeature;
  if (!lazy protocol witness table cache variable for type GestureContainerFeature and conformance GestureContainerFeature)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GestureContainerFeature and conformance GestureContainerFeature);
  }
  return result;
}

uint64_t AnyShape.init<A>(_:)(uint64_t a1)
{
  return _AnyShapeBox.__allocating_init(_:)(a1);
}

uint64_t _AnyShapeBox.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v2 + 136) - 8) + 32))(v2 + *(void *)(*(void *)v2 + 152), a1);
  return v2;
}

uint64_t type metadata accessor for _AnyShapeBox()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t one-time initialization function for _cache()
{
  type metadata accessor for AtomicBuffer<[CUIDesignLibraryCacheKey : CUIDesignLibraryCacheKey.Entry]>();
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  *(void *)(result + 24) = MEMORY[0x263F8EE80];
  static CUIDesignLibraryCacheKey._cache = (_UNKNOWN *)result;
  return result;
}

double protocol witness for UnaryLayout.placement(of:in:) in conformance SpacingLayout@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return protocol witness for UnaryLayout.placement(of:in:) in conformance IgnoresAutomaticPaddingLayout(a1, a2);
}

double protocol witness for UnaryLayout.placement(of:in:) in conformance IgnoresAutomaticPaddingLayout@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  double v3 = *(double *)(a1 + 16);
  char v4 = *(unsigned char *)(a1 + 48);
  long long v19 = *(_OWORD *)(a1 + 24);
  PlacementContext.proposedSize.getter((uint64_t)&v20);
  uint64_t v5 = v20;
  char v6 = v21;
  uint64_t v7 = v22;
  char v8 = v23;
  if (v4)
  {
    Inputuint64_t Value = (double *)AGGraphGetInputValue();
    double v10 = *InputValue;
    double v11 = InputValue[1];
  }
  else
  {
    double v10 = v3;
    double v11 = *(double *)&v19;
  }
  double result = v10 * 0.5;
  *(void *)a2 = v5;
  double v13 = v11 * 0.5;
  *(unsigned char *)(a2 + 8) = v6;
  *(void *)(a2 + 16) = v7;
  *(unsigned char *)(a2 + 24) = v8;
  __asm { FMOV            V2.2D, #0.5 }
  *(_OWORD *)(a2 + 32) = _Q2;
  *(double *)(a2 + 48) = result;
  *(double *)(a2 + 56) = v13;
  return result;
}

double _TrimmedShape.path(in:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(void *__return_ptr, void))(*(void *)(a1 + 24) + 24))(v7, *(void *)(a1 + 16));
  Path.trimmedPath(from:to:)((uint64_t)v8, *(double *)(v2 + *(int *)(a1 + 36)), *(double *)(v2 + *(int *)(a1 + 40)));
  outlined release of Path((uint64_t)v7);
  double result = *(double *)v8;
  long long v6 = v8[1];
  *(_OWORD *)a2 = v8[0];
  *(_OWORD *)(a2 + 16) = v6;
  *(unsigned char *)(a2 + 32) = v9;
  return result;
}

double protocol witness for Shape.path(in:) in conformance Circle@<D0>(uint64_t a1@<X8>, double a2@<D0>, CGFloat a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  specialized Circle.path(in:)((uint64_t)v8, a2, a3, a4, a5);
  double result = *(double *)v8;
  long long v7 = v8[1];
  *(_OWORD *)a1 = v8[0];
  *(_OWORD *)(a1 + 16) = v7;
  *(unsigned char *)(a1 + 32) = v9;
  return result;
}

BOOL specialized Circle.path(in:)@<W0>(uint64_t a1@<X8>, double a2@<D0>, CGFloat a3@<D1>, double Height@<D2>, double a5@<D3>)
{
  double v8 = a2;
  if (CGRectIsNull(*(CGRect *)&a2)
    || (v14.origin.x = v8, v14.origin.y = a3, v14.size.width = Height, v14.size.height = a5, CGRectIsInfinite(v14)))
  {
    v15.origin.x = v8;
    v15.origin.y = a3;
    v15.size.width = Height;
    v15.size.height = a5;
    BOOL result = CGRectIsNull(v15);
    if (result)
    {
      double v8 = 0.0;
      a3 = 0.0;
      double Height = 0.0;
      a5 = 0.0;
      char v11 = 6;
    }
    else
    {
      char v11 = 0;
    }
  }
  else
  {
    v16.origin.x = v8;
    v16.origin.y = a3;
    v16.size.width = Height;
    v16.size.height = a5;
    double Width = CGRectGetWidth(v16);
    v17.origin.x = v8;
    v17.origin.y = a3;
    v17.size.width = Height;
    v17.size.height = a5;
    double v13 = Width - CGRectGetHeight(v17);
    if (v13 <= 0.0)
    {
      if (v13 < 0.0)
      {
        a3 = a3 + v13 * -0.5;
        v19.origin.x = v8;
        v19.origin.y = a3;
        v19.size.width = Height;
        v19.size.height = a5;
        a5 = CGRectGetWidth(v19);
      }
    }
    else
    {
      double v8 = v13 * 0.5 + v8;
      v18.origin.x = v8;
      v18.origin.y = a3;
      v18.size.width = Height;
      v18.size.height = a5;
      double Height = CGRectGetHeight(v18);
    }
    v20.origin.x = v8;
    v20.origin.y = a3;
    v20.size.width = Height;
    v20.size.height = a5;
    BOOL result = CGRectIsNull(v20);
    if (result)
    {
      char v11 = 6;
      double v8 = 0.0;
      a3 = 0.0;
      double Height = 0.0;
      a5 = 0.0;
    }
    else
    {
      v21.origin.x = v8;
      v21.origin.y = a3;
      v21.size.width = Height;
      v21.size.height = a5;
      BOOL result = CGRectIsInfinite(v21);
      char v11 = !result;
    }
  }
  *(double *)a1 = v8;
  *(CGFloat *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = Height;
  *(double *)(a1 + 24) = a5;
  *(unsigned char *)(a1 + 32) = v11;
  return result;
}

void *OffsetShape.path(in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  BOOL result = (*(void *(**)(_OWORD *__return_ptr, void))(*(void *)(a1 + 24) + 24))(v13, *(void *)(a1 + 16));
  long long v6 = (CGFloat *)(v2 + *(int *)(a1 + 36));
  double v7 = v6[1];
  if (*v6 == 0.0 && v7 == 0.0)
  {
    long long v8 = v13[0];
    long long v9 = v13[1];
    char v10 = v14;
  }
  else
  {
    CGAffineTransformMakeTranslation(&v17, *v6, v7);
    Path.applying(_:)(&v17.a, (uint64_t)v15);
    long long v11 = v15[1];
    long long v12 = v15[0];
    char v10 = v16;
    BOOL result = (void *)outlined release of Path((uint64_t)v13);
    long long v9 = v11;
    long long v8 = v12;
  }
  *(_OWORD *)a2 = v8;
  *(_OWORD *)(a2 + 16) = v9;
  *(unsigned char *)(a2 + 32) = v10;
  return result;
}

uint64_t Path.applying(_:)@<X0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)v2;
  CGFloat y = *(double *)(v2 + 8);
  CGFloat width = *(double *)(v2 + 16);
  CGFloat height = *(double *)(v2 + 24);
  char v9 = *(unsigned char *)(v2 + 32);
  double v11 = *a1;
  double v10 = a1[1];
  double v13 = a1[2];
  double v12 = a1[3];
  CGFloat v15 = a1[4];
  CGFloat v14 = a1[5];
  v43.a = *a1;
  v43.b = v10;
  v43.c = v13;
  v43.d = v12;
  v43.tCGFloat x = v15;
  v43.tCGFloat y = v14;
  CGFloat v42 = v14;
  if (CGAffineTransformIsIdentity(&v43))
  {
    outlined init with take of Path.Storage(v2, (uint64_t)&v43);
    uint64_t result = _s7SwiftUI4PathVWOsTm_0((uint64_t)&v43, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
  }
  else
  {
    outlined init with take of Path.Storage(v2, (uint64_t)v44);
    uint64_t result = outlined init with take of Path.Storage((uint64_t)v44, (uint64_t)&v45);
    switch(v47)
    {
      case 0:
        v18.origin = (CGPoint)v45;
        v18.CGSize size = (CGSize)v46;
        if ((v10 != 0.0 || v13 != 0.0) && (v11 != 0.0 || v12 != 0.0)) {
          goto LABEL_25;
        }
        v43.a = v11;
        v43.b = v10;
        v43.c = v13;
        v43.d = v12;
        v43.tCGFloat x = v15;
        v43.tCGFloat y = v42;
        CGRect v49 = CGRectApplyAffineTransform(v18, &v43);
        CGFloat x = v49.origin.x;
        CGFloat y = v49.origin.y;
        CGFloat width = v49.size.width;
        CGFloat height = v49.size.height;
        uint64_t result = CGRectIsNull(v49);
        if (result) {
          goto LABEL_15;
        }
        char v9 = 0;
        uint64_t v5 = *(void *)&x;
        break;
      case 1:
        v20.origin = (CGPoint)v45;
        v20.CGSize size = (CGSize)v46;
        if ((v10 != 0.0 || v13 != 0.0) && (v11 != 0.0 || v12 != 0.0)) {
          goto LABEL_25;
        }
        v43.a = v11;
        v43.b = v10;
        v43.c = v13;
        v43.d = v12;
        v43.tCGFloat x = v15;
        v43.tCGFloat y = v42;
        CGRect v50 = CGRectApplyAffineTransform(v20, &v43);
        CGFloat v21 = v50.origin.x;
        CGFloat y = v50.origin.y;
        CGFloat width = v50.size.width;
        CGFloat height = v50.size.height;
        uint64_t result = CGRectIsNull(v50);
        if (result)
        {
LABEL_15:
          uint64_t v5 = 0;
          char v9 = 6;
          goto LABEL_26;
        }
        v52.origin.CGFloat x = v21;
        v52.origin.CGFloat y = y;
        v52.size.CGFloat width = width;
        v52.size.CGFloat height = height;
        uint64_t result = CGRectIsInfinite(v52);
        uint64_t v5 = *(void *)&v21;
        char v9 = result ^ 1;
        break;
      case 2:
        uint64_t v22 = *(void *)(v45.i64[0] + 16);
        uint64_t v23 = *(void *)(v45.i64[0] + 24);
        uint64_t v24 = *(void *)(v45.i64[0] + 32);
        uint64_t v25 = *(void *)(v45.i64[0] + 40);
        v17.i64[0] = *(void *)(v45.i64[0] + 48);
        CGSize size = (CGSize)v17;
        char v26 = *(unsigned char *)(v45.i64[0] + 64);
        if ((v10 != 0.0 || v13 != 0.0) && (v11 != 0.0 || v12 != 0.0)) {
          goto LABEL_25;
        }
        v17.i64[0] = *(void *)(v45.i64[0] + 56);
        int8x16_t v40 = v17;
        v43.a = v11;
        v43.b = v10;
        v43.c = v13;
        v43.d = v12;
        v43.tCGFloat x = v15;
        v43.tCGFloat y = v42;
        CGRect v51 = CGRectApplyAffineTransform(*(CGRect *)&v22, &v43);
        CGFloat v27 = v51.origin.x;
        CGFloat v39 = v51.size.height;
        CGFloat v28 = v51.size.width;
        CGFloat v29 = v51.origin.y;
        if ((~*(void *)&size.width & 0x7FF0000000000000) != 0)
        {
          uint64_t v30 = v40.i64[0];
          if ((~v40.i64[0] & 0x7FF0000000000000) != 0)
          {
            v43.a = v11;
            v43.b = v10;
            v43.c = v13;
            v43.d = v12;
            v43.tCGFloat x = v15;
            v43.tCGFloat y = v42;
            CGFloat v31 = size.width;
            CGSize v34 = CGSizeApplyAffineTransform(*(CGSize *)(&v30 - 1), &v43);
            *(CGFloat *)v33.i64 = v34.height;
            *(CGFloat *)v32.i64 = v34.width;
            v35.f64[0] = NAN;
            v35.f64[1] = NAN;
            int8x16_t v36 = (int8x16_t)vnegq_f64(v35);
            v40.i64[0] = vbslq_s8(v36, v33, v40).u64[0];
            *(void *)&size.CGFloat width = vbslq_s8(v36, v32, (int8x16_t)size).u64[0];
          }
        }
        uint64_t result = swift_allocObject();
        uint64_t v5 = result;
        *(CGFloat *)(result + 16) = v27;
        *(CGFloat *)(result + 24) = v29;
        *(CGFloat *)(result + 32) = v28;
        *(CGFloat *)(result + 40) = v39;
        char v9 = 2;
        CGFloat y = 0.0;
        *(CGFloat *)(result + 48) = size.width;
        *(void *)(result + 56) = v40.i64[0];
        CGFloat width = 0.0;
        CGFloat height = 0.0;
        *(unsigned char *)(result + 64) = v26;
        break;
      case 6:
        int8x16_t v37 = vorrq_s8(v45, v46);
        if (vorr_s8(*(int8x8_t *)v37.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v37, v37, 8uLL))) {
          goto LABEL_25;
        }
        break;
      default:
LABEL_25:
        type metadata accessor for Path.PathBox();
        uint64_t v5 = swift_allocObject();
        *(_OWORD *)(v5 + 104) = 0u;
        *(_OWORD *)(v5 + 88) = 0u;
        *(_OWORD *)(v5 + 72) = 0u;
        *(_OWORD *)(v5 + 56) = 0u;
        *(_OWORD *)(v5 + 40) = 0u;
        *(_OWORD *)(v5 + 24) = 0u;
        *(unsigned char *)(v5 + 16) = 2;
        RBPathStorageInit();
        long long v38 = *((_OWORD *)a1 + 1);
        *(_OWORD *)&v43.a = *(_OWORD *)a1;
        *(_OWORD *)&v43.c = v38;
        *(_OWORD *)&v43.tCGFloat x = *((_OWORD *)a1 + 2);
        MEMORY[0x24C526C30](v5 + 24, 17, 0, &v43);
        Path.append(to:)(v5 + 24);
        uint64_t result = MEMORY[0x24C526C30](v5 + 24, 16, 0, 0);
        char v9 = 5;
LABEL_26:
        CGFloat y = 0.0;
        CGFloat width = 0.0;
        CGFloat height = 0.0;
        break;
    }
  }
  *(void *)a2 = v5;
  *(CGFloat *)(a2 + 8) = y;
  *(CGFloat *)(a2 + 16) = width;
  *(CGFloat *)(a2 + 24) = height;
  *(unsigned char *)(a2 + 32) = v9;
  return result;
}

uint64_t _ScrollClipEffect.ChildTransform.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  char v9 = &v36[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t Value = AGGraphGetValue();
  uint64_t v11 = *(void *)Value;
  double v12 = *(double *)(Value + 8);
  double v13 = *(double *)(Value + 16);
  double v14 = *(double *)(Value + 24);
  double v15 = *(double *)(Value + 32);
  swift_retain();
  uint64_t v16 = AGGraphGetValue();
  double v17 = *(double *)v16;
  double v18 = *(double *)(v16 + 8);
  double v19 = v14 - (*(double *)v16 - v12);
  *(double *)(a4 + 24) = v19;
  *(void *)a4 = v11;
  double v20 = v15 - (v18 - v13);
  *(double *)(a4 + 32) = v20;
  *(double *)(a4 + 8) = v17;
  *(double *)(a4 + 16) = v18;
  uint64_t v21 = AGGraphGetValue();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v7 + 16))(v9, v21, a2);
  uint64_t v22 = (unint64_t *)AGGraphGetValue();
  Shape.effectivePath(in:)(a2, a3, (uint64_t)v36, *v22);
  (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v9, a2);
  Path.boundingRect.getter();
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  outlined release of Path((uint64_t)v36);
  type metadata accessor for Element<ViewTransform.ScrollGeometryItem>();
  uint64_t result = swift_allocObject();
  *(double *)(result + 32) = v19;
  *(double *)(result + 40) = v20;
  *(void *)(result + 48) = v24;
  *(void *)(result + 56) = v26;
  *(int64x2_t *)(result + 64) = vdupq_n_s64(0x7FF0000000000000uLL);
  *(_OWORD *)(result + 80) = 0u;
  *(_OWORD *)(result + 96) = 0u;
  *(void *)(result + 112) = v28;
  *(void *)(result + 120) = v30;
  *(void *)(result + 128) = v24;
  *(void *)(result + 136) = v26;
  *(void *)(result + 144) = v28;
  *(void *)(result + 152) = v30;
  uint64_t v32 = 1;
  *(unsigned char *)(result + 160) = 1;
  *(void *)(result + 16) = v11;
  if (v11 && (v33 = *(void *)(v11 + 24), v34 = __OFADD__(v33, 1), uint64_t v32 = v33 + 1, v34))
  {
    __break(1u);
  }
  else
  {
    *(void *)(result + 24) = v32;
    *(void *)a4 = result;
    *(void *)(a4 + 24) = 0;
    *(void *)(a4 + 32) = 0;
  }
  return result;
}

double _StrokedShape.path(in:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(void *__return_ptr, void))(*(void *)(a1 + 24) + 24))(v9, *(void *)(a1 + 16));
  uint64_t v5 = v2 + *(int *)(a1 + 36);
  long long v6 = *(_OWORD *)(v5 + 16);
  v12[0] = *(_OWORD *)v5;
  v12[1] = v6;
  uint64_t v13 = *(void *)(v5 + 32);
  Path.strokedPath(_:)((uint64_t)v12, (uint64_t)v10);
  outlined release of Path((uint64_t)v9);
  double result = *(double *)v10;
  long long v8 = v10[1];
  *(_OWORD *)a2 = v10[0];
  *(_OWORD *)(a2 + 16) = v8;
  *(unsigned char *)(a2 + 32) = v11;
  return result;
}

uint64_t outlined release of Path(uint64_t a1)
{
  return a1;
}

double protocol witness for Shape.path(in:) in conformance RoundedRectangle._Inset@<D0>(uint64_t a1@<X8>, double a2@<D0>)
{
  RoundedRectangle._Inset.path(in:)((uint64_t)v5, a2);
  double result = *(double *)v5;
  long long v4 = v5[1];
  *(_OWORD *)a1 = v5[0];
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = v6;
  return result;
}

uint64_t RoundedRectangle._Inset.path(in:)@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  double v7 = *(double *)v5;
  double v8 = *(double *)(v5 + 8);
  char v9 = *(unsigned char *)(v5 + 16);
  double v10 = *(double *)(v5 + 24);
  CGRect v19 = CGRectInset(*(CGRect *)&a2, v10, v10);
  CGFloat x = v19.origin.x;
  CGFloat y = v19.origin.y;
  CGFloat width = v19.size.width;
  CGFloat height = v19.size.height;
  if (v7 - v10 > 0.0) {
    double v15 = v7 - v10;
  }
  else {
    double v15 = 0.0;
  }
  if (v8 - v10 > 0.0) {
    double v16 = v8 - v10;
  }
  else {
    double v16 = 0.0;
  }
  if (CGRectIsNull(v19))
  {
    uint64_t result = 0;
    char v18 = 6;
    CGFloat y = 0.0;
    CGFloat width = 0.0;
    CGFloat height = 0.0;
  }
  else if (v15 == 0.0 && v16 == 0.0 {
         || (v20.origin.x = x, v20.origin.CGFloat y = y, v20.size.width = width, v20.size.height = height, CGRectIsInfinite(v20)))
  }
  {
    char v18 = 0;
    uint64_t result = *(void *)&x;
  }
  else
  {
    uint64_t result = swift_allocObject();
    *(CGFloat *)(result + 16) = x;
    *(CGFloat *)(result + 24) = y;
    *(CGFloat *)(result + 32) = width;
    *(CGFloat *)(result + 40) = height;
    char v18 = 2;
    CGFloat y = 0.0;
    *(double *)(result + 48) = v15;
    *(double *)(result + 56) = v16;
    CGFloat width = 0.0;
    CGFloat height = 0.0;
    *(unsigned char *)(result + 64) = v9;
  }
  *(void *)a1 = result;
  *(CGFloat *)(a1 + 8) = y;
  *(CGFloat *)(a1 + 16) = width;
  *(CGFloat *)(a1 + 24) = height;
  *(unsigned char *)(a1 + 32) = v18;
  return result;
}

void type metadata accessor for Element<ViewTransform.ScrollGeometryItem>()
{
  if (!lazy cache variable for type metadata for Element<ViewTransform.ScrollGeometryItem>)
  {
    lazy protocol witness table accessor for type ViewTransform.ScrollGeometryItem and conformance ViewTransform.ScrollGeometryItem();
    unint64_t v0 = type metadata accessor for Element();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Element<ViewTransform.ScrollGeometryItem>);
    }
  }
}

BOOL protocol witness for Shape.path(in:) in conformance Rectangle._Inset@<W0>(uint64_t a1@<X8>, double a2@<D0>)
{
  CGRect v13 = CGRectInset(*(CGRect *)&a2, *v5, *v5);
  CGFloat x = v13.origin.x;
  CGFloat y = v13.origin.y;
  CGFloat width = v13.size.width;
  CGFloat height = v13.size.height;
  BOOL result = CGRectIsNull(v13);
  if (result)
  {
    char v12 = 6;
    CGFloat x = 0.0;
    CGFloat y = 0.0;
    CGFloat width = 0.0;
    CGFloat height = 0.0;
  }
  else
  {
    char v12 = 0;
  }
  *(CGFloat *)a1 = x;
  *(CGFloat *)(a1 + 8) = y;
  *(CGFloat *)(a1 + 16) = width;
  *(CGFloat *)(a1 + 24) = height;
  *(unsigned char *)(a1 + 32) = v12;
  return result;
}

double protocol witness for Shape.path(in:) in conformance Capsule._Inset@<D0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>)
{
  Capsule._Inset.path(in:)((uint64_t)v9, a2, a3, a4, a5, *v5);
  double result = *(double *)v9;
  long long v8 = v9[1];
  *(_OWORD *)a1 = v9[0];
  *(_OWORD *)(a1 + 16) = v8;
  *(unsigned char *)(a1 + 32) = v10;
  return result;
}

uint64_t Capsule._Inset.path(in:)@<X0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>, CGFloat a6@<D4>)
{
  if (one-time initialization token for v5 != -1) {
    swift_once();
  }
  unsigned int v12 = static Semantics.v5;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC == 1)
  {
    if ((dyld_program_sdk_at_least() & 1) == 0)
    {
LABEL_7:
      char v13 = 0;
      goto LABEL_10;
    }
  }
  else if (static Semantics.forced < v12)
  {
    goto LABEL_7;
  }
  char v13 = LOBYTE(a6) & 1;
  *(void *)&a6 &= ~1uLL;
LABEL_10:
  v23.origin.CGFloat x = a2;
  v23.origin.CGFloat y = a3;
  v23.size.CGFloat width = a4;
  v23.size.CGFloat height = a5;
  CGRect v24 = CGRectInset(v23, a6, a6);
  CGFloat x = v24.origin.x;
  CGFloat y = v24.origin.y;
  CGFloat width = v24.size.width;
  CGFloat height = v24.size.height;
  double v18 = CGRectGetWidth(v24);
  v25.origin.CGFloat x = x;
  v25.origin.CGFloat y = y;
  v25.size.CGFloat width = width;
  v25.size.CGFloat height = height;
  double v19 = CGRectGetHeight(v25);
  if (v19 < v18) {
    double v18 = v19;
  }
  v26.origin.CGFloat x = x;
  v26.origin.CGFloat y = y;
  v26.size.CGFloat width = width;
  v26.size.CGFloat height = height;
  if (CGRectIsNull(v26))
  {
    uint64_t result = 0;
    char v21 = 6;
    CGFloat y = 0.0;
    CGFloat width = 0.0;
    CGFloat height = 0.0;
  }
  else
  {
    double v22 = v18 * 0.5;
    if (v22 == 0.0
      || (v27.origin.x = x, v27.origin.CGFloat y = y, v27.size.width = width, v27.size.height = height, CGRectIsInfinite(v27)))
    {
      char v21 = 0;
      uint64_t result = *(void *)&x;
    }
    else
    {
      uint64_t result = swift_allocObject();
      *(CGFloat *)(result + 16) = x;
      *(CGFloat *)(result + 24) = y;
      *(CGFloat *)(result + 32) = width;
      *(CGFloat *)(result + 40) = height;
      char v21 = 2;
      CGFloat y = 0.0;
      *(double *)(result + 48) = v22;
      *(double *)(result + 56) = v22;
      CGFloat width = 0.0;
      CGFloat height = 0.0;
      *(unsigned char *)(result + 64) = v13;
    }
  }
  *(void *)a1 = result;
  *(CGFloat *)(a1 + 8) = y;
  *(CGFloat *)(a1 + 16) = width;
  *(CGFloat *)(a1 + 24) = height;
  *(unsigned char *)(a1 + 32) = v21;
  return result;
}

void Path.trimmedPath(from:to:)(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  v18[2] = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)v3;
  uint64_t v6 = *(void *)(v3 + 8);
  uint64_t v7 = *(void *)(v3 + 16);
  uint64_t v8 = *(void *)(v3 + 24);
  unsigned __int8 v9 = *(unsigned char *)(v3 + 32);
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  switch(v9)
  {
    case 2u:
      if (!CGRectIsNull(*(CGRect *)(v5 + 16))) {
        goto LABEL_14;
      }
      goto LABEL_19;
    case 3u:
    case 4u:
      goto LABEL_22;
    case 5u:
      if (*(unsigned char *)(v5 + 16))
      {
        if (*(unsigned char *)(v5 + 16) != 1)
        {
          uint64_t v16 = one-time initialization token for bufferCallbacks;
          swift_retain();
          if (v16 != -1) {
            swift_once();
          }
LABEL_13:
          char IsEmpty = RBPathIsEmpty();
          _s7SwiftUI4PathVWOsTm_0(v3, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
          if ((IsEmpty & 1) == 0)
          {
LABEL_14:
            if (a2 <= 0.0 && a3 >= 1.0)
            {
              outlined copy of Path.Storage(v5, v6, v7, v8, v9);
              uint64_t v12 = v5;
              uint64_t v13 = v6;
              uint64_t v14 = v7;
              uint64_t v15 = v8;
LABEL_20:
              *(void *)a1 = v12;
              *(void *)(a1 + 8) = v13;
              *(void *)(a1 + 16) = v14;
              *(void *)(a1 + 24) = v15;
              *(unsigned char *)(a1 + 32) = v9;
              return;
            }
            if (a3 - a2 > 0.0)
            {
              Path.retainRBPath()();
              type metadata accessor for Path.PathBox();
              uint64_t v12 = swift_allocObject();
              *(_OWORD *)(v12 + 104) = 0u;
              *(_OWORD *)(v12 + 88) = 0u;
              *(_OWORD *)(v12 + 72) = 0u;
              *(_OWORD *)(v12 + 56) = 0u;
              *(_OWORD *)(v12 + 40) = 0u;
              *(_OWORD *)(v12 + 24) = 0u;
              *(unsigned char *)(v12 + 16) = 2;
              RBPathStorageInit();
              *(double *)double v18 = a2;
              *(double *)&v18[1] = a3;
              MEMORY[0x24C526C30](v12 + 24, 18, v18, 0);
              Path.append(to:)(v12 + 24);
              MEMORY[0x24C526C30](v12 + 24, 16, 0, 0);
              RBPathRelease();
              uint64_t v13 = 0;
              uint64_t v14 = 0;
              uint64_t v15 = 0;
              unsigned __int8 v9 = 5;
              goto LABEL_20;
            }
          }
LABEL_19:
          uint64_t v12 = 0;
          uint64_t v13 = 0;
          uint64_t v14 = 0;
          uint64_t v15 = 0;
          unsigned __int8 v9 = 6;
          goto LABEL_20;
        }
LABEL_8:
        swift_retain();
        goto LABEL_13;
      }
      if (*(void *)(v5 + 24)) {
        goto LABEL_8;
      }
      __break(1u);
LABEL_22:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return;
    case 6u:
      goto LABEL_20;
    default:
      if (CGRectIsNull(*(CGRect *)v3)) {
        goto LABEL_19;
      }
      goto LABEL_14;
  }
}

double protocol witness for Shape.path(in:) in conformance _TrimmedShape<A>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _TrimmedShape.path(in:)(a1, (uint64_t)v5);
  double result = *(double *)v5;
  long long v4 = v5[1];
  *(_OWORD *)a2 = v5[0];
  *(_OWORD *)(a2 + 16) = v4;
  *(unsigned char *)(a2 + 32) = v6;
  return result;
}

uint64_t _FlexFrameLayout.placement(of:in:)@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = *(void *)a1;
  int v6 = *(_DWORD *)(a1 + 8);
  long long v7 = a2[1];
  long long v17 = *a2;
  v18[0] = v7;
  v18[1] = a2[2];
  char v19 = *((unsigned char *)a2 + 48);
  if (one-time initialization token for introduced != -1) {
    swift_once();
  }
  unsigned int v8 = static _SemanticFeature_v5.introduced;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC != 1)
  {
    if (static Semantics.forced < v8) {
      goto LABEL_7;
    }
LABEL_10:
    uint64_t v10 = proposedDimension #1 (_:min:ideal:max:) in _FlexFrameLayout.childPlacementProposal(of:context:)(0, *(void *)v3, *(unsigned char *)(v3 + 8), *(void *)(v3 + 16), *(unsigned char *)(v3 + 24), *(void *)(v3 + 32), *(unsigned char *)(v3 + 40), (uint64_t)&v17);
    char v12 = v11 & 1;
    uint64_t v13 = proposedDimension #1 (_:min:ideal:max:) in _FlexFrameLayout.childPlacementProposal(of:context:)(1, *(void *)(v3 + 48), *(unsigned char *)(v3 + 56), *(void *)(v3 + 64), *(unsigned char *)(v3 + 72), *(void *)(v3 + 80), *(unsigned char *)(v3 + 88), (uint64_t)&v17);
    char v15 = v14 & 1;
    return specialized FrameLayoutCommon.commonPlacement(of:in:childProposal:)(v5, v6, (uint64_t)&v17, v10, v12, v13, v15, a3);
  }
  if (dyld_program_sdk_at_least()) {
    goto LABEL_10;
  }
LABEL_7:
  outlined init with take of PlacementContext.ParentSize((uint64_t)v18, (uint64_t)v20);
  outlined init with take of PlacementContext.ParentSize((uint64_t)v20, (uint64_t)v21);
  if (v22) {
    Inputuint64_t Value = (uint64_t *)AGGraphGetInputValue();
  }
  else {
    Inputuint64_t Value = (uint64_t *)v21;
  }
  char v12 = 0;
  char v15 = 0;
  uint64_t v10 = *InputValue;
  uint64_t v13 = InputValue[1];
  return specialized FrameLayoutCommon.commonPlacement(of:in:childProposal:)(v5, v6, (uint64_t)&v17, v10, v12, v13, v15, a3);
}

uint64_t specialized FrameLayoutCommon.commonPlacement(of:in:childProposal:)@<X0>(unint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X8>)
{
  uint64_t v10 = v8;
  int v13 = a1;
  unint64_t v15 = HIDWORD(a1);
  double v16 = *(double *)(a3 + 16);
  double v17 = *(double *)(a3 + 24);
  char v18 = *(unsigned char *)(a3 + 48);
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  char v19 = static LayoutComputer.defaultValue;
  uint64_t v46 = *(void *)algn_26B0F4178;
  if (v18)
  {
    Inputuint64_t Value = (double *)AGGraphGetInputValue();
    double v21 = *InputValue;
    double v17 = InputValue[1];
  }
  else
  {
    double v21 = v16;
  }
  int v55 = v13;
  int v56 = v15;
  int v57 = a2;
  uint64_t v51 = a4;
  char v52 = a5 & 1;
  uint64_t v53 = a6;
  char v47 = a7;
  char v54 = a7 & 1;
  swift_retain();
  LayoutProxy.dimensions(in:)((uint64_t)&v51, (uint64_t)&v58);
  char v22 = v58;
  uint64_t v45 = v59;
  double v23 = v60;
  double v24 = v61;
  double v25 = v62;
  double v26 = v63;
  unint64_t v28 = *(void *)(v10 + 96);
  unint64_t v27 = *(void *)(v10 + 104);
  if (one-time initialization token for _typeCache != -1) {
    swift_once();
  }
  uint64_t v29 = static AlignmentKey._typeCache;
  uint64_t v30 = (os_unfair_lock_s *)((char *)static AlignmentKey._typeCache + 16);
  swift_retain();
  os_unfair_lock_lock(v30);
  uint64_t v31 = v29[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v30);
  swift_release();
  if (v28 < 2)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (v28 >> 1 > *(void *)(v31 + 16))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  int v44 = v22;
  uint64_t v32 = v31 + 16 * ((v28 >> 1) - 1);
  uint64_t v34 = *(void *)(v32 + 32);
  uint64_t v33 = *(void *)(v32 + 40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  float64x2_t v35 = (os_unfair_lock_s *)static AlignmentKey._typeCache;
  swift_retain();
  os_unfair_lock_lock(v35 + 4);
  uint64_t v36 = *(void *)&v35[8]._os_unfair_lock_opaque;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v35 + 4);
  swift_release();
  if (v27 < 2)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v27 >> 1 > *(void *)(v36 + 16))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v37 = v36 + 16 * ((v27 >> 1) - 1);
  uint64_t v38 = *(void *)(v37 + 32);
  uint64_t v39 = *(void *)(v37 + 40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v58 = v19;
  uint64_t v59 = v46;
  double v60 = v21;
  double v61 = v17;
  double v62 = v21;
  double v63 = v17;
  double v9 = (*(double (**)(void **, uint64_t, uint64_t))(v33 + 8))(&v58, v34, v33);
  uint64_t v58 = v19;
  uint64_t v59 = v46;
  double v60 = v21;
  double v61 = v17;
  double v62 = v21;
  double v63 = v17;
  double v17 = (*(double (**)(void **, uint64_t, uint64_t))(v39 + 8))(&v58, v38, v39);
  uint64_t v58 = v44;
  uint64_t v59 = v45;
  double v60 = v23;
  double v61 = v24;
  double v62 = v25;
  double v63 = v26;
  ViewDimensions.subscript.getter(v28);
  double v21 = v40;
  uint64_t v58 = v44;
  uint64_t v59 = v45;
  double v60 = v23;
  double v61 = v24;
  double v62 = v25;
  double v63 = v26;
  ViewDimensions.subscript.getter(v27);
  double v23 = v41;
  if (one-time initialization token for topLeading != -1) {
LABEL_18:
  }
    swift_once();
  long long v42 = static UnitPoint.topLeading;
  swift_release();
  uint64_t result = swift_release();
  *(void *)a8 = a4;
  *(unsigned char *)(a8 + 8) = a5 & 1;
  *(void *)(a8 + 16) = a6;
  *(unsigned char *)(a8 + 24) = v47 & 1;
  *(_OWORD *)(a8 + 32) = v42;
  *(double *)(a8 + 48) = v9 - v21;
  *(double *)(a8 + 56) = v17 - v23;
  return result;
}

{
  uint64_t v8;
  double v9;
  int v13;
  unint64_t v15;
  double v16;
  double v17;
  char v18;
  void *v19;
  double *InputValue;
  double v21;
  uint64_t v22;
  void *v23;
  double v24;
  double v25;
  double v26;
  double v27;
  void *v28;
  os_unfair_lock_s *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  os_unfair_lock_s *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  double v40;
  long long v41;
  uint64_t result;
  char v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v50;
  char v51;
  uint64_t v52;
  char v53;
  int v54;
  int v55;
  int v56;
  void *v57;
  uint64_t v58;
  double v59;
  double v60;
  double v61;
  double v62;

  int v13 = a1;
  unint64_t v15 = HIDWORD(a1);
  char v47 = *(void *)(v8 + 32);
  uint64_t v46 = *(void *)(v8 + 40);
  double v16 = *(double *)(a3 + 16);
  double v17 = *(double *)(a3 + 24);
  char v18 = *(unsigned char *)(a3 + 48);
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  char v19 = static LayoutComputer.defaultValue;
  int v44 = *(void *)algn_26B0F4178;
  if (v18)
  {
    Inputuint64_t Value = (double *)AGGraphGetInputValue();
    double v21 = *InputValue;
    double v17 = InputValue[1];
  }
  else
  {
    double v21 = v16;
  }
  char v54 = v13;
  int v55 = v15;
  int v56 = a2;
  CGRect v50 = a4;
  uint64_t v51 = a5 & 1;
  uint64_t v45 = a6;
  char v52 = a6;
  uint64_t v53 = a7 & 1;
  swift_retain();
  LayoutProxy.dimensions(in:)((uint64_t)&v50, (uint64_t)&v57);
  double v23 = v57;
  char v22 = v58;
  double v24 = v59;
  double v25 = v60;
  double v26 = v61;
  unint64_t v27 = v62;
  if (one-time initialization token for _typeCache != -1) {
    swift_once();
  }
  unint64_t v28 = static AlignmentKey._typeCache;
  uint64_t v29 = (os_unfair_lock_s *)((char *)static AlignmentKey._typeCache + 16);
  swift_retain();
  os_unfair_lock_lock(v29);
  uint64_t v30 = v28[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v29);
  swift_release();
  if (v47 < 2)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (v47 >> 1 > *(void *)(v30 + 16))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  CGAffineTransform v43 = a7;
  uint64_t v31 = v30 + 16 * ((v47 >> 1) - 1);
  uint64_t v33 = *(void *)(v31 + 32);
  uint64_t v32 = *(void *)(v31 + 40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v34 = (os_unfair_lock_s *)static AlignmentKey._typeCache;
  swift_retain();
  os_unfair_lock_lock(v34 + 4);
  float64x2_t v35 = *(void *)&v34[8]._os_unfair_lock_opaque;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v34 + 4);
  swift_release();
  if (v46 < 2)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v46 >> 1 > *(void *)(v35 + 16))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v36 = v35 + 16 * ((v46 >> 1) - 1);
  uint64_t v37 = *(void *)(v36 + 32);
  uint64_t v38 = *(void *)(v36 + 40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  int v57 = v19;
  uint64_t v58 = v44;
  uint64_t v59 = v21;
  double v60 = v17;
  double v61 = v21;
  double v62 = v17;
  double v9 = (*(double (**)(void **, uint64_t, uint64_t))(v32 + 8))(&v57, v33, v32);
  int v57 = v19;
  uint64_t v58 = v44;
  uint64_t v59 = v21;
  double v60 = v17;
  double v61 = v21;
  double v62 = v17;
  double v17 = (*(double (**)(void **, uint64_t, uint64_t))(v38 + 8))(&v57, v37, v38);
  int v57 = v23;
  uint64_t v58 = v22;
  uint64_t v59 = v24;
  double v60 = v25;
  double v61 = v26;
  double v62 = v27;
  ViewDimensions.subscript.getter(v47);
  double v21 = v39;
  int v57 = v23;
  uint64_t v58 = v22;
  uint64_t v59 = v24;
  double v60 = v25;
  double v61 = v26;
  double v62 = v27;
  ViewDimensions.subscript.getter(v46);
  double v24 = v40;
  if (one-time initialization token for topLeading != -1) {
LABEL_18:
  }
    swift_once();
  double v41 = static UnitPoint.topLeading;
  swift_release();
  uint64_t result = swift_release();
  *(void *)a8 = a4;
  *(unsigned char *)(a8 + 8) = a5 & 1;
  *(void *)(a8 + 16) = v45;
  *(unsigned char *)(a8 + 24) = v43 & 1;
  *(_OWORD *)(a8 + 32) = v41;
  *(double *)(a8 + 48) = v9 - v21;
  *(double *)(a8 + 56) = v17 - v24;
  return result;
}

uint64_t DisplayList.ViewUpdater.Model.State.addClip(_:style:)(uint64_t a1, __int16 a2)
{
  unint64_t v5 = (double *)v2;
  LOBYTE(v6) = a2 & 1;
  char v7 = HIBYTE(a2) & 1;
  uint64_t v8 = *(void *)a1;
  double v9 = *(double *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t size = *(void *)(a1 + 24);
  unsigned __int8 v11 = *(unsigned char *)(a1 + 32);
  outlined init with take of Path.Storage(a1, (uint64_t)v76);
  double v13 = *(double *)(v2 + 32);
  double v12 = *(double *)(v2 + 40);
  double v15 = *(double *)(v2 + 48);
  double v14 = *(double *)(v2 + 56);
  char v60 = v7;
  if (v12 == 0.0 && v15 == 0.0 || v13 == 0.0 && v14 == 0.0)
  {
    outlined init with take of Path.Storage((uint64_t)v76, (uint64_t)&v77);
    switch(v79)
    {
      case 0:
        v80.origin = (CGPoint)v77;
        v80.uint64_t size = (CGSize)v78;
        v75.a = v13;
        v75.b = v12;
        v75.c = v15;
        v75.d = v14;
        *(_OWORD *)&v75.tCGFloat x = *(_OWORD *)(v2 + 64);
        CGRect v81 = CGRectApplyAffineTransform(v80, &v75);
        CGFloat x = v81.origin.x;
        CGFloat y = v81.origin.y;
        CGFloat width = v81.size.width;
        CGFloat height = v81.size.height;
        if (CGRectIsNull(v81)) {
          goto LABEL_9;
        }
        char v21 = 0;
        uint64_t v22 = *(void *)&x;
        CGFloat v23 = y;
        CGFloat v24 = width;
        CGFloat v25 = height;
        goto LABEL_17;
      case 1:
        v82.origin = (CGPoint)v77;
        v82.uint64_t size = (CGSize)v78;
        v75.a = v13;
        v75.b = v12;
        v75.c = v15;
        v75.d = v14;
        *(_OWORD *)&v75.tCGFloat x = *(_OWORD *)(v2 + 64);
        CGRect v83 = CGRectApplyAffineTransform(v82, &v75);
        CGFloat v26 = v83.origin.x;
        CGFloat v27 = v83.origin.y;
        CGFloat v28 = v83.size.width;
        CGFloat v29 = v83.size.height;
        if (CGRectIsNull(v83))
        {
LABEL_9:
          uint64_t v22 = 0;
          CGFloat v23 = 0.0;
          CGFloat v24 = 0.0;
          CGFloat v25 = 0.0;
          char v21 = 6;
        }
        else
        {
          v86.origin.CGFloat x = v26;
          v86.origin.CGFloat y = v27;
          v86.size.CGFloat width = v28;
          v86.size.CGFloat height = v29;
          BOOL IsInfinite = CGRectIsInfinite(v86);
          uint64_t v22 = *(void *)&v26;
          CGFloat v23 = v27;
          CGFloat v24 = v28;
          CGFloat v25 = v29;
          char v21 = !IsInfinite;
        }
        goto LABEL_17;
      case 2:
        CGRect v84 = *(CGRect *)(v77.i64[0] + 16);
        v16.i64[0] = *(void *)(v77.i64[0] + 48);
        CGSize sizea = (CGSize)v16;
        v16.i64[0] = *(void *)(v77.i64[0] + 56);
        int8x16_t v66 = v16;
        uint64_t v2 = *(unsigned __int8 *)(v77.i64[0] + 64);
        CGFloat v30 = v5[8];
        CGFloat v31 = v5[9];
        v75.a = v13;
        v75.b = v12;
        v75.c = v15;
        v75.d = v14;
        v75.tCGFloat x = v30;
        v75.tCGFloat y = v31;
        CGRect v85 = CGRectApplyAffineTransform(v84, &v75);
        CGFloat v62 = v85.size.height;
        CGFloat v64 = v85.size.width;
        CGFloat v32 = v85.origin.y;
        CGFloat v33 = v85.origin.x;
        if ((~*(void *)&sizea.width & 0x7FF0000000000000) != 0)
        {
          uint64_t v34 = v66.i64[0];
          if ((~v66.i64[0] & 0x7FF0000000000000) != 0)
          {
            v75.a = v13;
            v75.b = v12;
            v75.c = v15;
            v75.d = v14;
            v75.tCGFloat x = v30;
            v75.tCGFloat y = v31;
            CGFloat v35 = sizea.width;
            CGSize v38 = CGSizeApplyAffineTransform(*(CGSize *)(&v34 - 1), &v75);
            *(CGFloat *)v37.i64 = v38.height;
            *(CGFloat *)v36.i64 = v38.width;
            v39.f64[0] = NAN;
            v39.f64[1] = NAN;
            int8x16_t v40 = (int8x16_t)vnegq_f64(v39);
            v66.i64[0] = vbslq_s8(v40, v37, v66).u64[0];
            *(void *)&sizea.CGFloat width = vbslq_s8(v40, v36, (int8x16_t)sizea).u64[0];
          }
        }
        uint64_t v22 = swift_allocObject();
        CGFloat v23 = 0.0;
        CGFloat v24 = 0.0;
        CGFloat v25 = 0.0;
        *(CGFloat *)(v22 + 16) = v33;
        *(CGFloat *)(v22 + 24) = v32;
        *(CGFloat *)(v22 + 32) = v64;
        *(CGFloat *)(v22 + 40) = v62;
        *(CGFloat *)(v22 + 48) = sizea.width;
        *(void *)(v22 + 56) = v66.i64[0];
        char v21 = 2;
        *(unsigned char *)(v22 + 64) = v2;
LABEL_17:
        uint64_t v65 = *(void *)&v23;
        uint64_t v67 = v22;
        *(void *)&v75.a = v22;
        v75.b = v23;
        uint64_t v61 = *(void *)&v24;
        v75.c = v24;
        v75.d = v25;
        uint64_t size = *(void *)&v25;
        unsigned __int8 v63 = v21;
        LOBYTE(v75.tx) = v21;
        double v42 = v5[10];
        uint64_t v45 = *(void *)(*(void *)&v42 + 16);
        if (!v45)
        {
          double v3 = 0.0;
          double v4 = 0.0;
          double v9 = 0.0;
          double v42 = 0.0;
          uint64_t v58 = 0;
          uint64_t v59 = 0;
          LOBYTE(v43) = 1;
          goto LABEL_26;
        }
        char v57 = v6;
        unint64_t v6 = 0;
        uint64_t v43 = 64;
        break;
      case 6:
        int8x16_t v41 = vorrq_s8(v77, v78);
        if (vorr_s8(*(int8x8_t *)v41.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v41, v41, 8uLL))) {
          goto LABEL_15;
        }
        type metadata accessor for MutableBox<ResolvedShadowStyle>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.ViewUpdater.Model.Clip>, (uint64_t)&type metadata for DisplayList.ViewUpdater.Model.Clip, MEMORY[0x263F8E0F8]);
        uint64_t v2 = swift_allocObject();
        *(_OWORD *)(v2 + 16) = xmmword_2461B9DC0;
        *(void *)(v2 + 32) = v8;
        *(double *)(v2 + 40) = v9;
        *(void *)(v2 + 48) = v10;
        *(void *)(v2 + 56) = size;
        *(unsigned char *)(v2 + 64) = v11;
        *(_OWORD *)(v2 + 72) = 0u;
        *(_OWORD *)(v2 + 88) = 0u;
        *(_OWORD *)(v2 + 104) = 0u;
        *(unsigned char *)(v2 + 120) = 1;
        *(unsigned char *)(v2 + 121) = v6;
        *(unsigned char *)(v2 + 122) = v7;
        uint64_t result = swift_bridgeObjectRelease();
        goto LABEL_30;
      default:
        goto LABEL_15;
    }
    while (1)
    {
      if (v6 >= *(void *)(*(void *)&v42 + 16))
      {
        __break(1u);
        goto LABEL_37;
      }
      uint64_t v46 = (unsigned __int8 *)(*(void *)&v42 + v43);
      if (*(unsigned char *)(*(void *)&v42 + v43 + 56))
      {
        uint64_t v70 = *((void *)v46 - 4);
        uint64_t v71 = *((void *)v46 - 3);
        uint64_t v72 = *((void *)v46 - 2);
        uint64_t v73 = *((void *)v46 - 1);
        unsigned __int8 v74 = *v46;
        outlined copy of Path.Storage(v70, v71, v72, v73, *v46);
        double v9 = *(double *)&v70;
        double v4 = *(double *)&v72;
        double v3 = *(double *)&v73;
        uint64_t v2 = v74;
        if (Path.intersectRoundedRects(_:)((uint64_t)&v75))
        {
          outlined copy of Path.Storage(v70, v71, v72, v73, v74);
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(*(void **)&v42);
            double v42 = *(double *)&result;
          }
          if (v6 >= *(void *)(*(void *)&v42 + 16))
          {
            __break(1u);
          }
          else
          {
            uint64_t v51 = (unsigned __int8 *)(*(void *)&v42 + v43);
            uint64_t v52 = *(void *)(*(void *)&v42 + v43 - 32);
            uint64_t v53 = *(void *)(*(void *)&v42 + v43 - 24);
            uint64_t v54 = *(void *)(*(void *)&v42 + v43 - 16);
            uint64_t v55 = *(void *)(*(void *)&v42 + v43 - 8);
            *((void *)v51 - 4) = v70;
            *((void *)v51 - 3) = v71;
            *((void *)v51 - 2) = v72;
            *((void *)v51 - 1) = v73;
            unsigned __int8 v56 = *(unsigned char *)(*(void *)&v42 + v43);
            *uint64_t v51 = v74;
            outlined consume of Path.Storage(v52, v53, v54, v55, v56);
            outlined consume of Path.Storage(v67, v65, v61, size, v63);
            uint64_t result = outlined consume of Path.Storage(v70, v71, v72, v73, v74);
            v5[10] = v42;
          }
          return result;
        }
        outlined consume of Path.Storage(v70, v71, v72, v73, v74);
      }
      ++v6;
      v43 += 96;
      if (v45 == v6)
      {
        double v3 = 0.0;
        double v4 = 0.0;
        double v9 = 0.0;
        double v42 = 0.0;
        uint64_t v58 = 0;
        uint64_t v59 = 0;
        LOBYTE(v43) = 1;
        LOBYTE(v6) = v57;
        goto LABEL_26;
      }
    }
  }
LABEL_15:
  uint64_t v61 = v10;
  unsigned __int8 v63 = v11;
  uint64_t v65 = *(void *)&v9;
  uint64_t v67 = v8;
  uint64_t v58 = *(void *)(v2 + 72);
  uint64_t v59 = *(void *)(v2 + 64);
  double v3 = v13;
  double v4 = v12;
  double v9 = v15;
  double v42 = v14;
  outlined retain of Path.Storage((uint64_t)v76, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
  LOBYTE(v43) = 0;
LABEL_26:
  uint64_t v2 = *((void *)v5 + 10);
  outlined copy of Path.Storage(v67, v65, v61, size, v63);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_37:
  }
    uint64_t v2 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1, (void *)v2);
  unint64_t v48 = *(void *)(v2 + 16);
  unint64_t v47 = *(void *)(v2 + 24);
  if (v48 >= v47 >> 1) {
    uint64_t v2 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v47 > 1), v48 + 1, 1, (void *)v2);
  }
  *(void *)(v2 + 16) = v48 + 1;
  uint64_t v49 = v2 + 96 * v48;
  *(void *)(v49 + 32) = v67;
  *(void *)(v49 + 40) = v65;
  *(void *)(v49 + 48) = v61;
  *(void *)(v49 + 56) = size;
  *(unsigned char *)(v49 + 64) = v63;
  *(double *)(v49 + 72) = v3;
  *(double *)(v49 + 80) = v4;
  *(double *)(v49 + 88) = v9;
  *(double *)(v49 + 96) = v42;
  *(void *)(v49 + 104) = v59;
  *(void *)(v49 + 112) = v58;
  *(unsigned char *)(v49 + 120) = v43;
  *(unsigned char *)(v49 + 121) = v6;
  *(unsigned char *)(v49 + 122) = v60;
  uint64_t result = outlined consume of Path.Storage(v67, v65, v61, size, v63);
LABEL_30:
  *((void *)v5 + 10) = v2;
  return result;
}

uint64_t outlined init with take of Path.Storage(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t specialized _NativeDictionary._unsafeInsertNew(key:value:)(Swift::UInt a1, Swift::UInt8 a2, uint64_t a3, void *a4)
{
  Hasher.init(_seed:)();
  if (a1)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(a1);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(a2);
  Hasher._finalize()();
  unint64_t v8 = _HashTable.nextHole(atOrAfter:)();
  *(void *)((char *)a4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v8;
  uint64_t v9 = a4[6] + 16 * v8;
  *(void *)uint64_t v9 = a1;
  *(unsigned char *)(v9 + 8) = a2;
  uint64_t result = outlined init with take of Spacing.Value(a3, a4[7] + 40 * v8);
  ++a4[2];
  return result;
}

uint64_t outlined init with take of Spacing.Value(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t proposedDimension #1 (_:min:ideal:max:) in _FlexFrameLayout.childPlacementProposal(of:context:)(char a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, char a7, uint64_t a8)
{
  outlined init with take of PlacementContext.ParentSize(a8 + 16, (uint64_t)v24);
  outlined init with take of PlacementContext.ParentSize((uint64_t)v24, (uint64_t)v25);
  if (v26) {
    Inputuint64_t Value = (double *)AGGraphGetInputValue();
  }
  else {
    Inputuint64_t Value = (double *)v25;
  }
  double v15 = InputValue + 1;
  if ((a1 & 1) == 0) {
    double v15 = InputValue;
  }
  double v16 = *v15;
  if ((a5 & 1) == 0) {
    return *(void *)&v16;
  }
  PlacementContext.proposedSize.getter((uint64_t)v21);
  double v17 = &v22;
  if (a1) {
    double v17 = &v23;
  }
  if ((*(unsigned char *)v17 & 1) == 0) {
    return *(void *)&v16;
  }
  double v18 = *(double *)&a2;
  if (a3) {
    double v18 = -INFINITY;
  }
  double v19 = *(double *)&a6;
  if (a7) {
    double v19 = INFINITY;
  }
  if (v18 < v16 && v16 < v19) {
    return 0;
  }
  else {
    return *(void *)&v16;
  }
}

uint64_t PlacementContext.proposedSize.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v5 = *(void *)(v1 + 40);
  int v7 = *(unsigned __int8 *)(v1 + 48);
  if (one-time initialization token for v3 != -1) {
    swift_once();
  }
  unsigned int v8 = static Semantics.v3;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  uint64_t result = swift_beginAccess();
  if (byte_26B0F44FC == 1)
  {
    uint64_t result = dyld_program_sdk_at_least();
    if ((result & 1) == 0) {
      goto LABEL_7;
    }
  }
  else if (static Semantics.forced < v8)
  {
LABEL_7:
    if (v7)
    {
      uint64_t result = AGGraphGetInputValue();
      BOOL v10 = 0;
      BOOL v11 = 0;
      uint64_t v3 = *(void *)result;
      uint64_t v4 = *(void *)(result + 8);
    }
    else
    {
      BOOL v10 = 0;
      BOOL v11 = 0;
    }
    goto LABEL_19;
  }
  if (v7)
  {
    uint64_t result = AGGraphGetInputValue();
    uint64_t v6 = *(void *)(result + 16);
    uint64_t v5 = *(void *)(result + 24);
  }
  BOOL v10 = (~v6 & 0x7FF0000000000000) == 0 && (v6 & 0xFFFFFFFFFFFFFLL) != 0;
  if (v10) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = v6;
  }
  BOOL v11 = (~v5 & 0x7FF0000000000000) == 0 && (v5 & 0xFFFFFFFFFFFFFLL) != 0;
  if (v11) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = v5;
  }
LABEL_19:
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v10;
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 24) = v11;
  return result;
}

uint64_t outlined init with take of PlacementContext.ParentSize(uint64_t a1, uint64_t a2)
{
  return a2;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

void type metadata accessor for _DictionaryStorage<ColorCacheKey, NamedColorInfo>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for _DictionaryStorage();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t protocol witness for UnaryLayout.placement(of:in:) in conformance _FrameLayout@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long long v5 = v3[1];
  long long v19 = *v3;
  v20[0] = v5;
  v20[1] = v3[2];
  long long v6 = *(_OWORD *)(a2 + 16);
  v17[0] = *(_OWORD *)a2;
  v17[1] = v6;
  v17[2] = *(_OWORD *)(a2 + 32);
  unint64_t v7 = *(void *)a1;
  int v8 = *(_DWORD *)(a1 + 8);
  char v18 = *(unsigned char *)(a2 + 48);
  PlacementContext.proposedSize.getter((uint64_t)v14);
  uint64_t v9 = &v15;
  if (BYTE8(v19)) {
    BOOL v10 = (uint64_t *)v14;
  }
  else {
    BOOL v10 = (uint64_t *)&v19;
  }
  uint64_t v11 = *v10;
  if (!BYTE8(v20[0])) {
    uint64_t v9 = (uint64_t *)v20;
  }
  uint64_t v12 = *v9;
  v14[0] = BYTE8(v20[0]) & v16;
  return specialized FrameLayoutCommon.commonPlacement(of:in:childProposal:)(v7, v8, (uint64_t)v17, v11, BYTE8(v19) & v14[8], v12, BYTE8(v20[0]) & v16, a3);
}

double protocol witness for static AlignmentID.defaultValue(in:) in conformance HorizontalAlignment.Trailing(uint64_t a1)
{
  return *(double *)(a1 + 16);
}

double protocol witness for static AlignmentID.defaultValue(in:) in conformance VerticalAlignment.LastTextBaseline(uint64_t a1)
{
  return *(double *)(a1 + 24);
}

uint64_t Path.intersectRoundedRects(_:)(uint64_t a1)
{
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v5 = *(uint64_t *)(v1 + 16);
  uint64_t v4 = *(uint64_t *)(v1 + 24);
  int v6 = *(unsigned __int8 *)(v1 + 32);
  if (v6 == 2)
  {
    double v8 = *(double *)(v2 + 16);
    double v9 = *(double *)(v2 + 24);
    double v10 = *(double *)(v2 + 32);
    double v12 = *(double *)(v2 + 40);
    double v11 = *(double *)(v2 + 48);
    double v41 = *(double *)(v2 + 56);
    int v7 = *(unsigned __int8 *)(v2 + 64);
  }
  else if (v6 == 1)
  {
    double v10 = *(double *)(v1 + 16);
    double v12 = *(double *)(v1 + 24);
    if (*(double *)&v5 != *(double *)&v4) {
      return 0;
    }
    int v7 = 0;
    double v9 = *(double *)(v1 + 8);
    double v8 = *(double *)v1;
    double v11 = *(double *)&v5 * 0.5;
    double v41 = *(double *)&v5 * 0.5;
  }
  else
  {
    if (*(unsigned char *)(v1 + 32)) {
      return 0;
    }
    int v7 = 0;
    double v8 = *(double *)v1;
    double v9 = *(double *)(v1 + 8);
    double v10 = *(double *)(v1 + 16);
    double v11 = 0.0;
    double v41 = 0.0;
    double v12 = *(double *)(v1 + 24);
  }
  outlined init with take of Path.Storage(a1, (uint64_t)v51);
  outlined init with take of Path.Storage((uint64_t)v51, (uint64_t)&v52);
  if (v56 == 2)
  {
    double v39 = v10;
    double v40 = v8;
    char v18 = (double *)(v52 + 16);
    double v15 = *(double *)(v52 + 24);
    double v16 = *(double *)(v52 + 32);
    double v20 = *(double *)(v52 + 40);
    double v17 = *(double *)(v52 + 48);
    double v19 = *(double *)(v52 + 56);
    int v14 = *(unsigned __int8 *)(v52 + 64);
    double v13 = v41;
  }
  else if (v56 == 1)
  {
    double v16 = v54;
    double v20 = v55;
    double v13 = v41;
    if (v54 != v55) {
      return 0;
    }
    double v39 = v10;
    double v40 = v8;
    int v14 = 0;
    double v15 = v53;
    double v17 = v54 * 0.5;
    char v18 = (double *)&v52;
    double v19 = v54 * 0.5;
  }
  else
  {
    double v13 = v41;
    if (v56) {
      return 0;
    }
    double v39 = v10;
    double v40 = v8;
    int v14 = 0;
    double v15 = v53;
    double v16 = v54;
    double v17 = 0.0;
    char v18 = (double *)&v52;
    double v19 = 0.0;
    double v20 = v55;
  }
  double v21 = *v18;
  if (v11 == 0.0 && v13 == 0.0 && v17 == 0.0 && v19 == 0.0)
  {
    CGFloat v22 = v15;
    outlined consume of Path.Storage(v2, v3, v5, v4, v6);
    v57.size.CGFloat width = v39;
    v57.origin.CGFloat x = v40;
    v57.origin.CGFloat y = v9;
    v57.size.CGFloat height = v12;
    v59.origin.CGFloat x = v21;
    v59.origin.CGFloat y = v22;
    v59.size.CGFloat width = v16;
    v59.size.CGFloat height = v20;
    CGRect v58 = CGRectIntersection(v57, v59);
    CGFloat x = v58.origin.x;
    CGFloat y = v58.origin.y;
    CGFloat width = v58.size.width;
    CGFloat height = v58.size.height;
    if (CGRectIsNull(v58))
    {
      char v27 = 6;
      CGFloat x = 0.0;
      CGFloat y = 0.0;
      CGFloat width = 0.0;
      CGFloat height = 0.0;
    }
    else
    {
      char v27 = 0;
    }
    *(CGFloat *)uint64_t v1 = x;
    *(CGFloat *)(v1 + 8) = y;
    *(CGFloat *)(v1 + 16) = width;
    *(CGFloat *)(v1 + 24) = height;
    goto LABEL_54;
  }
  BOOL v28 = v11 == v17 && v13 == v19;
  if (v28 && ((v7 ^ v14) & 1) == 0)
  {
    if (vabdd_f64(v40, v21) < 0.001 && vabdd_f64(v39, v16) < 0.001)
    {
      double v29 = v15;
      outlined consume of Path.Storage(v2, v3, v5, v4, v6);
      if (v9 > v29) {
        double v30 = v9;
      }
      else {
        double v30 = v29;
      }
      double v31 = v9 + v12;
      if (v29 + v20 < v9 + v12) {
        double v31 = v29 + v20;
      }
      if (v30 < v31)
      {
        double v32 = v31 - v30;
        uint64_t v33 = swift_allocObject();
        *(double *)(v33 + 16) = v40;
        *(double *)(v33 + 24) = v30;
        *(double *)(v33 + 32) = v39;
        *(double *)(v33 + 40) = v32;
LABEL_47:
        *(double *)(v33 + 48) = v11;
        *(double *)(v33 + 56) = v41;
LABEL_52:
        *(unsigned char *)(v33 + 64) = v7;
        goto LABEL_53;
      }
      goto LABEL_56;
    }
    if (vabdd_f64(v9, v15) < 0.001 && vabdd_f64(v12, v20) < 0.001)
    {
      outlined consume of Path.Storage(v2, v3, v5, v4, v6);
      if (v40 > v21) {
        double v34 = v40;
      }
      else {
        double v34 = v21;
      }
      double v35 = v40 + v39;
      if (v16 + v21 < v40 + v39) {
        double v35 = v16 + v21;
      }
      if (v34 < v35)
      {
        double v36 = v35 - v34;
        uint64_t v33 = swift_allocObject();
        *(double *)(v33 + 16) = v34;
        *(double *)(v33 + 24) = v9;
        *(double *)(v33 + 32) = v36;
        *(double *)(v33 + 40) = v12;
        goto LABEL_47;
      }
LABEL_56:
      *(_OWORD *)uint64_t v1 = 0u;
      *(_OWORD *)(v1 + 16) = 0u;
      char v27 = 6;
      goto LABEL_54;
    }
  }
  double v44 = v40;
  double v45 = v9;
  double v46 = v39;
  double v47 = v12;
  double v48 = v11;
  double v49 = v13;
  char v50 = v7;
  v43.rect.origin.CGFloat x = v21;
  v43.rect.origin.CGFloat y = v15;
  v43.rect.size.CGFloat width = v16;
  v43.rect.size.CGFloat height = v20;
  v43.cornerSize.CGFloat width = v17;
  v43.cornerSize.CGFloat height = v19;
  v43.style = v14;
  CGFloat v42 = v13;
  double v38 = v15;
  if (FixedRoundedRect.contains(_:)(&v43))
  {
    outlined consume of Path.Storage(v2, v3, v5, v4, v6);
    uint64_t v33 = swift_allocObject();
    *(double *)(v33 + 16) = v21;
    *(double *)(v33 + 24) = v38;
    *(double *)(v33 + 32) = v16;
    *(double *)(v33 + 40) = v20;
    *(double *)(v33 + 48) = v17;
    *(double *)(v33 + 56) = v19;
    *(unsigned char *)(v33 + 64) = v14;
LABEL_53:
    *(void *)uint64_t v1 = v33;
    *(void *)(v1 + 16) = 0;
    *(void *)(v1 + 24) = 0;
    char v27 = 2;
    *(void *)(v1 + 8) = 0;
LABEL_54:
    *(unsigned char *)(v1 + 32) = v27;
    return 1;
  }
  double v44 = v21;
  double v45 = v38;
  double v46 = v16;
  double v47 = v20;
  double v48 = v17;
  double v49 = v19;
  char v50 = v14;
  v43.rect.origin.CGFloat x = v40;
  v43.rect.origin.CGFloat y = v9;
  v43.rect.size.CGFloat width = v39;
  v43.rect.size.CGFloat height = v12;
  v43.cornerSize.CGFloat width = v11;
  v43.cornerSize.CGFloat height = v42;
  v43.style = v7;
  if (FixedRoundedRect.contains(_:)(&v43))
  {
    outlined consume of Path.Storage(v2, v3, v5, v4, v6);
    uint64_t v33 = swift_allocObject();
    *(double *)(v33 + 16) = v40;
    *(double *)(v33 + 24) = v9;
    *(double *)(v33 + 32) = v39;
    *(double *)(v33 + 40) = v12;
    *(double *)(v33 + 48) = v11;
    *(CGFloat *)(v33 + 56) = v42;
    goto LABEL_52;
  }
  return 0;
}

Swift::Bool __swiftcall FixedRoundedRect.contains(_:)(SwiftUI::FixedRoundedRect *a1)
{
  CGFloat x = a1->rect.origin.x;
  CGFloat y = a1->rect.origin.y;
  CGFloat width = a1->rect.size.width;
  CGFloat height = a1->rect.size.height;
  double v19 = a1->cornerSize.height;
  double v20 = a1->cornerSize.width;
  CGFloat v6 = *v1;
  CGFloat v7 = v1[1];
  CGFloat v8 = v1[2];
  CGFloat v9 = v1[3];
  double v21 = v1[4];
  double v22 = v1[5];
  v23.origin.CGFloat x = *v1;
  v23.origin.CGFloat y = v7;
  v23.size.CGFloat width = v8;
  v23.size.CGFloat height = v9;
  CGRect v24 = CGRectInset(v23, -0.001, -0.001);
  v29.origin.CGFloat x = x;
  v29.origin.CGFloat y = y;
  v29.size.CGFloat width = width;
  v29.size.CGFloat height = height;
  BOOL v10 = CGRectContainsRect(v24, v29);
  if (v10)
  {
    CGFloat v18 = height;
    if (v21 > v20 || v22 > v19)
    {
      v25.origin.CGFloat x = v6;
      v25.origin.CGFloat y = v7;
      v25.size.CGFloat width = v8;
      v25.size.CGFloat height = v9;
      double v12 = fabs(CGRectGetWidth(v25)) * 0.5;
      v26.origin.CGFloat x = v6;
      v26.origin.CGFloat y = v7;
      v26.size.CGFloat width = v8;
      v26.size.CGFloat height = v9;
      double v13 = fabs(CGRectGetHeight(v26)) * 0.5;
      if (v13 >= v12) {
        double v13 = v12;
      }
      if (v13 >= v21) {
        double v14 = v21;
      }
      else {
        double v14 = v13;
      }
      if (v13 >= v22) {
        double v13 = v22;
      }
      CGFloat v15 = v14 * 0.292893219;
      CGFloat v16 = v13 * 0.292893219;
      v27.origin.CGFloat x = v6;
      v27.origin.CGFloat y = v7;
      v27.size.CGFloat width = v8;
      v27.size.CGFloat height = v9;
      CGRect v28 = CGRectInset(v27, v15, v16);
      v30.origin.CGFloat y = y;
      v30.origin.CGFloat x = x;
      v30.size.CGFloat height = v18;
      v30.size.CGFloat width = width;
      LOBYTE(v10) = CGRectContainsRect(v28, v30);
    }
    else
    {
      LOBYTE(v10) = 1;
    }
  }
  return v10;
}

unint64_t lazy protocol witness table accessor for type CUIDesignLibraryCacheKey and conformance CUIDesignLibraryCacheKey()
{
  unint64_t result = lazy protocol witness table cache variable for type CUIDesignLibraryCacheKey and conformance CUIDesignLibraryCacheKey;
  if (!lazy protocol witness table cache variable for type CUIDesignLibraryCacheKey and conformance CUIDesignLibraryCacheKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CUIDesignLibraryCacheKey and conformance CUIDesignLibraryCacheKey);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CUIDesignLibraryCacheKey and conformance CUIDesignLibraryCacheKey;
  if (!lazy protocol witness table cache variable for type CUIDesignLibraryCacheKey and conformance CUIDesignLibraryCacheKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CUIDesignLibraryCacheKey and conformance CUIDesignLibraryCacheKey);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Font.RatioKey and conformance Font.RatioKey()
{
  unint64_t result = lazy protocol witness table cache variable for type Font.RatioKey and conformance Font.RatioKey;
  if (!lazy protocol witness table cache variable for type Font.RatioKey and conformance Font.RatioKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.RatioKey and conformance Font.RatioKey);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Font.RatioKey and conformance Font.RatioKey;
  if (!lazy protocol witness table cache variable for type Font.RatioKey and conformance Font.RatioKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.RatioKey and conformance Font.RatioKey);
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Gradient(uint64_t *a1, uint64_t *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

uint64_t GraphHost.environment.getter@<X0>(void *a1@<X8>)
{
  swift_beginAccess();
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v4 = *Value;
  uint64_t v3 = Value[1];
  *a1 = v4;
  a1[1] = v3;
  swift_retain();
  return swift_retain();
}

uint64_t _ViewList_Backing.visitViews<A>(applying:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  uint64_t v10 = static Update._lock;
  _MovableLockLock(static Update._lock);
  specialized static Update.begin()();
  closure #1 in _ViewList_Backing.visitViews<A>(applying:from:)(v5, a2, a1, a3, a4, &v13);
  static Update.end()();
  uint64_t v11 = v13;
  _MovableLockUnlock(v10);
  return v11;
}

{
  uint64_t v5;

  uint64_t v5 = a2;
  return _ViewList_Backing.visitViews<A>(applying:from:)(a1, (uint64_t)&v5, a3, a4);
}

uint64_t closure #1 in _ViewList_Backing.visitViews<A>(applying:from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned char *a6@<X8>)
{
  outlined init with copy of AnyTrackedValue(a1, (uint64_t)v16);
  uint64_t v12 = v17;
  uint64_t v13 = v18;
  __swift_project_boxed_opaque_existential_1(v16, v17);
  _OWORD v15[2] = a4;
  v15[3] = a5;
  v15[4] = a1;
  v15[5] = a3;
  char v19 = 1;
  *a6 = ViewList.applySublists(from:list:to:)(a2, 0x100000000uLL, (uint64_t)partial apply for closure #1 in closure #1 in _ViewList_Backing.visitViews<A>(applying:from:), (uint64_t)v15, v12, v13) & 1;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
}

uint64_t CanvasSymbols.updateValue()()
{
  uint64_t v1 = (uint64_t)v0;
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v9 = 0;
  uint64_t v10 = MEMORY[0x263F8EE78];
  ++v0[28];
  unint64_t v2 = *v0;
  type metadata accessor for ViewList();
  uint64_t Value = AGGraphGetValue();
  outlined init with copy of AnyTrackedValue(Value, (uint64_t)v14);
  uint64_t v4 = v15;
  uint64_t v5 = v16;
  __swift_project_boxed_opaque_existential_1(v14, v15);
  uint64_t v12 = v1;
  uint64_t v13 = &v10;
  ViewList.applySublists(from:list:to:)((uint64_t)&v9, v2, (uint64_t)partial apply for closure #1 in CanvasSymbols.updateValue(), (uint64_t)v11, v4, v5);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  uint64_t v6 = swift_bridgeObjectRetain();
  uint64_t v7 = specialized _NativeDictionary.filter(_:)(v6, v1);
  swift_bridgeObjectRelease_n();
  *(void *)(v1 + 104) = v7;
  v14[0] = v10;
  _s14AttributeGraph0A0Vy7SwiftUI17EnvironmentValuesVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for [CanvasSymbols.Child], (uint64_t)&type metadata for CanvasSymbols.Child, MEMORY[0x263F8D488]);
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

uint64_t specialized _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v4 = isStackAllocationSafe;
  v12[1] = *MEMORY[0x263EF8340];
  char v5 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v6 = (unint64_t)((1 << v5) + 63) >> 6;
  size_t v7 = 8 * v6;
  if ((v5 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x270FA5388](isStackAllocationSafe);
    bzero((char *)v12 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    specialized closure #1 in _NativeDictionary.filter(_:)((void *)((char *)v12 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0)), v6, v4, a2);
    if (v2) {
      swift_willThrow();
    }
    else {
      return v8;
    }
  }
  else
  {
    uint64_t v9 = (void *)swift_slowAlloc();
    bzero(v9, v7);
    specialized closure #1 in _NativeDictionary.filter(_:)((unint64_t *)v9, v6, v4, a2);
    a2 = v10;
    MEMORY[0x24C527CC0](v9, -1, -1);
  }
  return a2;
}

{
  uint64_t v2;
  uint64_t v4;
  char v5;
  unint64_t v6;
  size_t v7;
  uint64_t v8;
  void *v9;
  void v11[2];

  uint64_t v4 = isStackAllocationSafe;
  v11[1] = *MEMORY[0x263EF8340];
  char v5 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v6 = (unint64_t)((1 << v5) + 63) >> 6;
  size_t v7 = 8 * v6;
  if ((v5 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x270FA5388](isStackAllocationSafe);
    bzero((char *)v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    uint64_t v8 = specialized closure #1 in _NativeDictionary.filter(_:)((uint64_t)v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v6, v4, a2);
    if (v2) {
      swift_willThrow();
    }
    else {
      return v8;
    }
  }
  else
  {
    uint64_t v9 = (void *)swift_slowAlloc();
    bzero(v9, v7);
    a2 = specialized closure #1 in _NativeDictionary.filter(_:)((uint64_t)v9, v6, v4, a2);
    MEMORY[0x24C527CC0](v9, -1, -1);
  }
  return a2;
}

{
  uint64_t v2;
  uint64_t v4;
  char v5;
  unint64_t v6;
  size_t v7;
  uint64_t v8;
  void *v9;
  void v11[2];

  uint64_t v4 = isStackAllocationSafe;
  v11[1] = *MEMORY[0x263EF8340];
  char v5 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v6 = (unint64_t)((1 << v5) + 63) >> 6;
  size_t v7 = 8 * v6;
  if ((v5 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x270FA5388](isStackAllocationSafe);
    bzero((char *)v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    uint64_t v8 = specialized closure #1 in _NativeDictionary.filter(_:)((uint64_t)v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v6, v4);
    if (v2) {
      swift_willThrow();
    }
    else {
      return v8;
    }
  }
  else
  {
    uint64_t v9 = (void *)swift_slowAlloc();
    bzero(v9, v7);
    a2 = specialized closure #1 in _NativeDictionary.filter(_:)((uint64_t)v9, v6, v4);
    MEMORY[0x24C527CC0](v9, -1, -1);
  }
  return a2;
}

void specialized closure #1 in _NativeDictionary.filter(_:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = 0;
  int64_t v5 = 0;
  uint64_t v21 = a3 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a3 + 64);
  int64_t v22 = (unint64_t)(v6 + 63) >> 6;
  while (2)
  {
    uint64_t v20 = v4;
    if (v8)
    {
LABEL_6:
      unint64_t v9 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v10 = v9 | (v5 << 6);
      goto LABEL_21;
    }
    while (1)
    {
      int64_t v11 = v5 + 1;
      if (__OFADD__(v5, 1))
      {
        __break(1u);
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
      if (v11 >= v22) {
        goto LABEL_24;
      }
      unint64_t v12 = *(void *)(v21 + 8 * v11);
      ++v5;
      if (!v12)
      {
        int64_t v5 = v11 + 1;
        if (v11 + 1 >= v22) {
          goto LABEL_24;
        }
        unint64_t v12 = *(void *)(v21 + 8 * v5);
        if (!v12)
        {
          int64_t v5 = v11 + 2;
          if (v11 + 2 >= v22) {
            goto LABEL_24;
          }
          unint64_t v12 = *(void *)(v21 + 8 * v5);
          if (!v12)
          {
            int64_t v13 = v11 + 3;
            if (v13 >= v22)
            {
LABEL_24:
              specialized _NativeDictionary.extractDictionary(using:count:)(a1, a2, v20, a3);
              return;
            }
            unint64_t v12 = *(void *)(v21 + 8 * v13);
            if (!v12)
            {
              while (1)
              {
                int64_t v5 = v13 + 1;
                if (__OFADD__(v13, 1)) {
                  goto LABEL_26;
                }
                if (v5 >= v22) {
                  goto LABEL_24;
                }
                unint64_t v12 = *(void *)(v21 + 8 * v5);
                ++v13;
                if (v12) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v5 = v13;
          }
        }
      }
LABEL_20:
      unint64_t v8 = (v12 - 1) & v12;
      unint64_t v10 = __clz(__rbit64(v12)) + (v5 << 6);
LABEL_21:
      uint64_t v14 = *(void *)(a3 + 56);
      if (*(_DWORD *)(v14 + 48 * v10 + 16) == *(_DWORD *)(a4 + 112)) {
        break;
      }
      uint64_t v15 = *(void **)(v14 + 48 * v10);
      MEMORY[0x270FA5388](a1);
      swift_retain();
      id v16 = v15;
      swift_retain_n();
      swift_bridgeObjectRetain_n();
      swift_retain_n();
      id v17 = v16;
      AGSubgraphApply();
      AGSubgraphInvalidate();
      swift_release();
      swift_release_n();
      swift_bridgeObjectRelease_n();
      swift_release_n();

      if (v8) {
        goto LABEL_6;
      }
    }
    *(unint64_t *)((char *)a1 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
    uint64_t v4 = v20 + 1;
    if (!__OFADD__(v20, 1)) {
      continue;
    }
    break;
  }
LABEL_27:
  __break(1u);
}

uint64_t specialized _NativeDictionary.extractDictionary(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a4;
  if (!a3) {
    return MEMORY[0x263F8EE80];
  }
  uint64_t v4 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return v43;
  }
  type metadata accessor for _DictionaryStorage<_ViewList_ID.Canonical, CanvasSymbols.Child>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<_ViewList_ID.Canonical, CanvasSymbols.Child>, (void (*)(void))lazy protocol witness table accessor for type _ViewList_ID.Canonical and conformance _ViewList_ID.Canonical);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = result;
  if (a2 < 1) {
    unint64_t v8 = 0;
  }
  else {
    unint64_t v8 = *a1;
  }
  uint64_t v45 = 0;
  uint64_t v9 = result + 64;
  uint64_t v39 = result;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v45 << 6);
    }
    else
    {
      uint64_t v12 = v45 + 1;
      if (__OFADD__(v45, 1)) {
        goto LABEL_43;
      }
      if (v12 >= a2) {
        return v7;
      }
      unint64_t v13 = a1[v12];
      ++v45;
      if (!v13)
      {
        uint64_t v45 = v12 + 1;
        if (v12 + 1 >= a2) {
          return v7;
        }
        unint64_t v13 = a1[v45];
        if (!v13)
        {
          uint64_t v45 = v12 + 2;
          if (v12 + 2 >= a2) {
            return v7;
          }
          unint64_t v13 = a1[v45];
          if (!v13)
          {
            uint64_t v14 = v12 + 3;
            if (v14 >= a2) {
              return v7;
            }
            unint64_t v13 = a1[v14];
            if (!v13)
            {
              while (1)
              {
                uint64_t v45 = v14 + 1;
                if (__OFADD__(v14, 1)) {
                  goto LABEL_44;
                }
                if (v45 >= a2) {
                  return v7;
                }
                unint64_t v13 = a1[v45];
                ++v14;
                if (v13) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v45 = v14;
          }
        }
      }
LABEL_24:
      unint64_t v8 = (v13 - 1) & v13;
      unint64_t v11 = __clz(__rbit64(v13)) + (v45 << 6);
    }
    uint64_t v15 = (void *)(*(void *)(v43 + 48) + 16 * v11);
    *(void *)&long long v6 = *v15;
    long long v46 = v6;
    uint64_t v16 = v15[1];
    uint64_t v17 = *(void *)(v43 + 56) + 48 * v11;
    uint64_t v18 = *(void **)v17;
    uint64_t v19 = *(void *)(v17 + 8);
    int v44 = *(_DWORD *)(v17 + 16);
    uint64_t v20 = *(void *)(v17 + 24);
    uint64_t v21 = *(void *)(v17 + 32);
    uint64_t v22 = *(void *)(v17 + 40);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v46);
    Hasher._combine(_:)(DWORD1(v46));
    if (v16)
    {
      Hasher._combine(_:)(1u);
      uint64_t v42 = v4;
      unint64_t v23 = v8;
      CGRect v24 = *(void (**)(char *))(*(void *)v16 + 112);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain_n();
      id v25 = v18;
      v24(v47);
      unint64_t v8 = v23;
      uint64_t v7 = v39;
      uint64_t v4 = v42;
      swift_release();
    }
    else
    {
      Hasher._combine(_:)(0);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      id v26 = v18;
    }
    uint64_t result = Hasher._finalize()();
    uint64_t v27 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v28 = result & ~v27;
    unint64_t v29 = v28 >> 6;
    if (((-1 << v28) & ~*(void *)(v9 + 8 * (v28 >> 6))) != 0)
    {
      unint64_t v30 = __clz(__rbit64((-1 << v28) & ~*(void *)(v9 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      uint64_t v31 = v20;
    }
    else
    {
      char v32 = 0;
      unint64_t v33 = (unint64_t)(63 - v27) >> 6;
      uint64_t v31 = v20;
      do
      {
        if (++v29 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v34 = v29 == v33;
        if (v29 == v33) {
          unint64_t v29 = 0;
        }
        v32 |= v34;
        uint64_t v35 = *(void *)(v9 + 8 * v29);
      }
      while (v35 == -1);
      unint64_t v30 = __clz(__rbit64(~v35)) + (v29 << 6);
    }
    *(void *)(v9 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v30;
    double v36 = (void *)(*(void *)(v7 + 48) + 16 * v30);
    *((void *)&v6 + 1) = *((void *)&v46 + 1);
    *double v36 = v46;
    v36[1] = v16;
    uint64_t v37 = *(void *)(v7 + 56) + 48 * v30;
    *(void *)uint64_t v37 = v18;
    *(void *)(v37 + 8) = v19;
    *(_DWORD *)(v37 + 16) = v44;
    *(void *)(v37 + 24) = v31;
    *(void *)(v37 + 32) = v21;
    *(void *)(v37 + 40) = v22;
    ++*(void *)(v7 + 16);
    if (__OFSUB__(v4--, 1)) {
      break;
    }
    if (!v4) {
      return v7;
    }
  }
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::UInt v18;
  Swift::UInt8 v19;
  unsigned char v21[40];

  if (!a3) {
    return MEMORY[0x263F8EE80];
  }
  uint64_t v4 = a4;
  int64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  type metadata accessor for _DictionaryStorage<_ViewList_ID.Canonical, CanvasSymbols.Child>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<Spacing.Key, Spacing.Value>, (void (*)(void))lazy protocol witness table accessor for type Spacing.Key and conformance Spacing.Key);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v9 = (void *)result;
  if (a2 < 1) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = *a1;
  }
  unint64_t v11 = 0;
  while (1)
  {
    if (v10)
    {
      uint64_t v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v13 = v12 | (v11 << 6);
    }
    else
    {
      uint64_t v14 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_30;
      }
      if (v14 >= a2) {
        return (uint64_t)v9;
      }
      uint64_t v15 = a1[v14];
      ++v11;
      if (!v15)
      {
        unint64_t v11 = v14 + 1;
        if (v14 + 1 >= a2) {
          return (uint64_t)v9;
        }
        uint64_t v15 = a1[v11];
        if (!v15)
        {
          unint64_t v11 = v14 + 2;
          if (v14 + 2 >= a2) {
            return (uint64_t)v9;
          }
          uint64_t v15 = a1[v11];
          if (!v15)
          {
            uint64_t v16 = v14 + 3;
            if (v16 >= a2) {
              return (uint64_t)v9;
            }
            uint64_t v15 = a1[v16];
            if (!v15)
            {
              while (1)
              {
                unint64_t v11 = v16 + 1;
                if (__OFADD__(v16, 1)) {
                  goto LABEL_31;
                }
                if (v11 >= a2) {
                  return (uint64_t)v9;
                }
                uint64_t v15 = a1[v11];
                ++v16;
                if (v15) {
                  goto LABEL_24;
                }
              }
            }
            unint64_t v11 = v16;
          }
        }
      }
LABEL_24:
      unint64_t v10 = (v15 - 1) & v15;
      unint64_t v13 = __clz(__rbit64(v15)) + (v11 << 6);
    }
    uint64_t v17 = *(void *)(v4 + 48) + 16 * v13;
    uint64_t v18 = *(void *)v17;
    uint64_t v19 = *(unsigned char *)(v17 + 8);
    outlined init with take of Spacing.Value(*(void *)(v4 + 56) + 40 * v13, (uint64_t)v21);
    uint64_t result = specialized _NativeDictionary._unsafeInsertNew(key:value:)(v18, v19, (uint64_t)v21, v9);
    if (__OFSUB__(v5--, 1)) {
      break;
    }
    if (!v5) {
      return (uint64_t)v9;
    }
  }
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  long long v30;
  long long v31;
  uint64_t v32;
  _OWORD v33[2];
  uint64_t v34;

  if (!a3) {
    return MEMORY[0x263F8EE80];
  }
  uint64_t v4 = a4;
  int64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  type metadata accessor for _DictionaryStorage<Subview.ID, ForEachState<Slice<SubviewsCollection>, Subview.ID, Subview>.Item>();
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  unint64_t v8 = result;
  unint64_t v28 = a2;
  if (a2 < 1) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = *a1;
  }
  unint64_t v10 = 0;
  unint64_t v11 = result + 64;
  while (1)
  {
    if (v9)
    {
      uint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
    }
    else
    {
      uint64_t v14 = v10 + 1;
      if (__OFADD__(v10, 1)) {
        goto LABEL_38;
      }
      if (v14 >= v28) {
        return v8;
      }
      uint64_t v15 = a1[v14];
      ++v10;
      if (!v15)
      {
        unint64_t v10 = v14 + 1;
        if (v14 + 1 >= v28) {
          return v8;
        }
        uint64_t v15 = a1[v10];
        if (!v15)
        {
          uint64_t v16 = v14 + 2;
          if (v16 >= v28) {
            return v8;
          }
          uint64_t v15 = a1[v16];
          if (!v15)
          {
            while (1)
            {
              unint64_t v10 = v16 + 1;
              if (__OFADD__(v16, 1)) {
                goto LABEL_39;
              }
              if (v10 >= v28) {
                return v8;
              }
              uint64_t v15 = a1[v10];
              ++v16;
              if (v15) {
                goto LABEL_22;
              }
            }
          }
          unint64_t v10 = v16;
        }
      }
LABEL_22:
      uint64_t v9 = (v15 - 1) & v15;
      unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
    }
    outlined init with copy of Subview.ID(*(void *)(v4 + 48) + 40 * v13, (uint64_t)v33);
    uint64_t v17 = *(void *)(*(void *)(v4 + 56) + 8 * v13);
    unint64_t v30 = v33[0];
    uint64_t v31 = v33[1];
    char v32 = v34;
    Hasher.init(_seed:)();
    swift_retain();
    AnyHashable.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v18 = -1 << *(unsigned char *)(v8 + 32);
    uint64_t v19 = result & ~v18;
    uint64_t v20 = v19 >> 6;
    if (((-1 << v19) & ~*(void *)(v11 + 8 * (v19 >> 6))) != 0)
    {
      uint64_t v21 = __clz(__rbit64((-1 << v19) & ~*(void *)(v11 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v18) >> 6;
      do
      {
        if (++v20 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_37;
        }
        CGRect v24 = v20 == v23;
        if (v20 == v23) {
          uint64_t v20 = 0;
        }
        v22 |= v24;
        id v25 = *(void *)(v11 + 8 * v20);
      }
      while (v25 == -1);
      uint64_t v21 = __clz(__rbit64(~v25)) + (v20 << 6);
    }
    *(void *)(v11 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    id v26 = *(void *)(v8 + 48) + 40 * v21;
    *(_OWORD *)id v26 = v30;
    *(_OWORD *)(v26 + 16) = v31;
    *(void *)(v26 + 32) = v32;
    *(void *)(*(void *)(v8 + 56) + 8 * v21) = v17;
    ++*(void *)(v8 + 16);
    if (__OFSUB__(v5--, 1)) {
      break;
    }
    if (!v5) {
      return v8;
    }
  }
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::Int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  long long v31;
  long long v32;
  uint64_t v33;
  _OWORD v34[2];
  uint64_t v35;

  if (!a3) {
    return MEMORY[0x263F8EE80];
  }
  uint64_t v4 = a4;
  int64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  type metadata accessor for _DictionaryStorage<Int, ForEachState<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>.Item>(0, &lazy cache variable for type metadata for _DictionaryStorage<AnyHashable, ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Item>, (void (*)(uint64_t))type metadata accessor for ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Item);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v9 = result;
  unint64_t v30 = a2;
  if (a2 < 1) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = *a1;
  }
  unint64_t v11 = 0;
  uint64_t v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      uint64_t v14 = v13 | (v11 << 6);
    }
    else
    {
      uint64_t v15 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_38;
      }
      if (v15 >= v30) {
        return v9;
      }
      uint64_t v16 = a1[v15];
      ++v11;
      if (!v16)
      {
        unint64_t v11 = v15 + 1;
        if (v15 + 1 >= v30) {
          return v9;
        }
        uint64_t v16 = a1[v11];
        if (!v16)
        {
          uint64_t v17 = v15 + 2;
          if (v17 >= v30) {
            return v9;
          }
          uint64_t v16 = a1[v17];
          if (!v16)
          {
            while (1)
            {
              unint64_t v11 = v17 + 1;
              if (__OFADD__(v17, 1)) {
                goto LABEL_39;
              }
              if (v11 >= v30) {
                return v9;
              }
              uint64_t v16 = a1[v11];
              ++v17;
              if (v16) {
                goto LABEL_22;
              }
            }
          }
          unint64_t v11 = v17;
        }
      }
LABEL_22:
      unint64_t v10 = (v16 - 1) & v16;
      uint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    outlined init with copy of AnyHashable(*(void *)(v4 + 48) + 40 * v14, (uint64_t)v34);
    uint64_t v18 = *(void *)(*(void *)(v4 + 56) + 8 * v14);
    uint64_t v31 = v34[0];
    char v32 = v34[1];
    unint64_t v33 = v35;
    uint64_t v19 = *(void *)(v9 + 40);
    swift_retain();
    uint64_t result = AnyHashable._rawHashValue(seed:)(v19);
    uint64_t v20 = -1 << *(unsigned char *)(v9 + 32);
    uint64_t v21 = result & ~v20;
    uint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v12 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v12 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      CGRect v24 = 0;
      id v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_37;
        }
        id v26 = v22 == v25;
        if (v22 == v25) {
          uint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v12 + 8 * v22);
      }
      while (v27 == -1);
      unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(void *)(v12 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    unint64_t v28 = *(void *)(v9 + 48) + 40 * v23;
    *(_OWORD *)unint64_t v28 = v31;
    *(_OWORD *)(v28 + 16) = v32;
    *(void *)(v28 + 32) = v33;
    *(void *)(*(void *)(v9 + 56) + 8 * v23) = v18;
    ++*(void *)(v9 + 16);
    if (__OFSUB__(v5--, 1)) {
      break;
    }
    if (!v5) {
      return v9;
    }
  }
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  Swift::Int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  unint64_t *v30;
  uint64_t v31;
  _OWORD v32[2];
  _OWORD v33[2];

  if (!a3) {
    return MEMORY[0x263F8EE80];
  }
  uint64_t v4 = a4;
  int64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  type metadata accessor for _DictionaryStorage<NSAttributedStringKey, Any>();
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v9 = result;
  unint64_t v30 = a1;
  uint64_t v31 = a2;
  if (a2 < 1) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = *a1;
  }
  unint64_t v11 = 0;
  uint64_t v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      uint64_t v14 = v13 | (v11 << 6);
    }
    else
    {
      uint64_t v15 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_40;
      }
      if (v15 >= v31) {
        return v9;
      }
      uint64_t v16 = v30[v15];
      ++v11;
      if (!v16)
      {
        unint64_t v11 = v15 + 1;
        if (v15 + 1 >= v31) {
          return v9;
        }
        uint64_t v16 = v30[v11];
        if (!v16)
        {
          unint64_t v11 = v15 + 2;
          if (v15 + 2 >= v31) {
            return v9;
          }
          uint64_t v16 = v30[v11];
          if (!v16)
          {
            uint64_t v17 = v15 + 3;
            if (v17 >= v31) {
              return v9;
            }
            uint64_t v16 = v30[v17];
            if (!v16)
            {
              while (1)
              {
                unint64_t v11 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  goto LABEL_41;
                }
                if (v11 >= v31) {
                  return v9;
                }
                uint64_t v16 = v30[v11];
                ++v17;
                if (v16) {
                  goto LABEL_24;
                }
              }
            }
            unint64_t v11 = v17;
          }
        }
      }
LABEL_24:
      unint64_t v10 = (v16 - 1) & v16;
      uint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    uint64_t v18 = *(void **)(*(void *)(v4 + 48) + 8 * v14);
    outlined init with copy of Any(*(void *)(v4 + 56) + 32 * v14, (uint64_t)v33);
    outlined init with take of Any(v33, v32);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    uint64_t v19 = v18;
    String.hash(into:)();
    uint64_t v20 = Hasher._finalize()();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v21 = -1 << *(unsigned char *)(v9 + 32);
    uint64_t v22 = v20 & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)(v12 + 8 * (v22 >> 6))) != 0)
    {
      CGRect v24 = __clz(__rbit64((-1 << v22) & ~*(void *)(v12 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      id v25 = 0;
      id v26 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        uint64_t v27 = v23 == v26;
        if (v23 == v26) {
          unint64_t v23 = 0;
        }
        v25 |= v27;
        unint64_t v28 = *(void *)(v12 + 8 * v23);
      }
      while (v28 == -1);
      CGRect v24 = __clz(__rbit64(~v28)) + (v23 << 6);
    }
    *(void *)(v12 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    *(void *)(*(void *)(v9 + 48) + 8 * v24) = v19;
    uint64_t result = (uint64_t)outlined init with take of Any(v32, (_OWORD *)(*(void *)(v9 + 56) + 32 * v24));
    ++*(void *)(v9 + 16);
    if (__OFSUB__(v5--, 1)) {
      break;
    }
    if (!v5) {
      return v9;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  Swift::UInt *v18;
  Swift::UInt v19;
  Swift::UInt v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  Swift::UInt *v29;
  uint64_t v31;
  long long v32[2];
  long long v33[3];

  if (!a3) {
    return MEMORY[0x263F8EE80];
  }
  uint64_t v4 = a4;
  int64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  type metadata accessor for _DictionaryStorage<EventID, EventType>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<EventID, EventType>, MEMORY[0x263F8DFB0]);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v9 = result;
  uint64_t v31 = a2;
  if (a2 < 1) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = *a1;
  }
  unint64_t v11 = 0;
  uint64_t v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      uint64_t v14 = v13 | (v11 << 6);
    }
    else
    {
      uint64_t v15 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_40;
      }
      if (v15 >= v31) {
        return v9;
      }
      uint64_t v16 = a1[v15];
      ++v11;
      if (!v16)
      {
        unint64_t v11 = v15 + 1;
        if (v15 + 1 >= v31) {
          return v9;
        }
        uint64_t v16 = a1[v11];
        if (!v16)
        {
          unint64_t v11 = v15 + 2;
          if (v15 + 2 >= v31) {
            return v9;
          }
          uint64_t v16 = a1[v11];
          if (!v16)
          {
            uint64_t v17 = v15 + 3;
            if (v17 >= v31) {
              return v9;
            }
            uint64_t v16 = a1[v17];
            if (!v16)
            {
              while (1)
              {
                unint64_t v11 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  goto LABEL_41;
                }
                if (v11 >= v31) {
                  return v9;
                }
                uint64_t v16 = a1[v11];
                ++v17;
                if (v16) {
                  goto LABEL_24;
                }
              }
            }
            unint64_t v11 = v17;
          }
        }
      }
LABEL_24:
      unint64_t v10 = (v16 - 1) & v16;
      uint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    uint64_t v18 = (Swift::UInt *)(*(void *)(v4 + 48) + 16 * v14);
    uint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    outlined init with copy of AnyTrackedValue(*(void *)(v4 + 56) + 40 * v14, (uint64_t)v33);
    outlined init with take of ScrollStateRequest(v33, (uint64_t)v32);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v20);
    Hasher._combine(_:)(v19);
    uint64_t result = Hasher._finalize()();
    uint64_t v21 = -1 << *(unsigned char *)(v9 + 32);
    uint64_t v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)(v12 + 8 * (v22 >> 6))) != 0)
    {
      CGRect v24 = __clz(__rbit64((-1 << v22) & ~*(void *)(v12 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      id v25 = 0;
      id v26 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        uint64_t v27 = v23 == v26;
        if (v23 == v26) {
          unint64_t v23 = 0;
        }
        v25 |= v27;
        unint64_t v28 = *(void *)(v12 + 8 * v23);
      }
      while (v28 == -1);
      CGRect v24 = __clz(__rbit64(~v28)) + (v23 << 6);
    }
    *(void *)(v12 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    unint64_t v29 = (Swift::UInt *)(*(void *)(v9 + 48) + 16 * v24);
    *unint64_t v29 = v20;
    v29[1] = v19;
    uint64_t result = outlined init with take of ScrollStateRequest(v32, *(void *)(v9 + 56) + 40 * v24);
    ++*(void *)(v9 + 16);
    if (__OFSUB__(v5--, 1)) {
      break;
    }
    if (!v5) {
      return v9;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::UInt32 v20;
  Swift::UInt32 v21;
  Swift::UInt32 v22;
  Swift::UInt32 v23;
  Swift::UInt8 v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  long long v40;
  long long v41;
  long long v42;
  uint64_t v43;
  _OWORD v44[3];
  uint64_t v45;

  if (!a3) {
    return MEMORY[0x263F8EE80];
  }
  uint64_t v4 = a4;
  int64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  type metadata accessor for _DictionaryStorage<_ViewList_ID.Canonical, CanvasSymbols.Child>(0, &lazy cache variable for type metadata for _DictionaryStorage<DisplayList.ViewUpdater.ViewCache.Key, DisplayList.ViewUpdater.ViewCache.AnimatorInfo>, (void (*)(void))lazy protocol witness table accessor for type DisplayList.ViewUpdater.ViewCache.Key and conformance DisplayList.ViewUpdater.ViewCache.Key);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  unint64_t v8 = result;
  double v36 = a2;
  if (a2 < 1) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = *a1;
  }
  unint64_t v10 = 0;
  unint64_t v11 = result + 64;
  double v38 = v4;
  while (1)
  {
    if (v9)
    {
      uint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      uint64_t v39 = v10;
      unint64_t v13 = v12 | (v10 << 6);
    }
    else
    {
      uint64_t v14 = v10 + 1;
      if (__OFADD__(v10, 1)) {
        goto LABEL_40;
      }
      if (v14 >= v36) {
        return v8;
      }
      uint64_t v15 = a1[v14];
      uint64_t v16 = v10 + 1;
      if (!v15)
      {
        uint64_t v16 = v10 + 2;
        if (v10 + 2 >= v36) {
          return v8;
        }
        uint64_t v15 = a1[v16];
        if (!v15)
        {
          uint64_t v16 = v10 + 3;
          if (v10 + 3 >= v36) {
            return v8;
          }
          uint64_t v15 = a1[v16];
          if (!v15)
          {
            uint64_t v17 = v10 + 4;
            if (v10 + 4 >= v36) {
              return v8;
            }
            uint64_t v15 = a1[v17];
            if (!v15)
            {
              while (1)
              {
                uint64_t v16 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  goto LABEL_41;
                }
                if (v16 >= v36) {
                  return v8;
                }
                uint64_t v15 = a1[v16];
                ++v17;
                if (v15) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v16 = v10 + 4;
          }
        }
      }
LABEL_24:
      uint64_t v9 = (v15 - 1) & v15;
      uint64_t v39 = v16;
      unint64_t v13 = __clz(__rbit64(v15)) + (v16 << 6);
    }
    uint64_t v18 = *(void *)(v4 + 56);
    uint64_t v19 = *(void *)(v4 + 48) + 20 * v13;
    uint64_t v20 = *(_DWORD *)v19;
    uint64_t v21 = *(_DWORD *)(v19 + 4);
    unint64_t v23 = *(_DWORD *)(v19 + 8);
    uint64_t v22 = *(_DWORD *)(v19 + 12);
    CGRect v24 = *(unsigned char *)(v19 + 16);
    outlined init with copy of DisplayList.ViewUpdater.ViewCache.AnimatorInfo(v18 + 56 * v13, (uint64_t)v44);
    double v40 = v44[0];
    double v41 = v44[1];
    uint64_t v42 = v44[2];
    uint64_t v43 = v45;
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v20);
    Hasher._combine(_:)(v21);
    Hasher._combine(_:)(v23);
    Hasher._combine(_:)(v22);
    Hasher._combine(_:)(v24);
    uint64_t result = Hasher._finalize()();
    id v25 = -1 << *(unsigned char *)(v8 + 32);
    id v26 = result & ~v25;
    uint64_t v27 = v26 >> 6;
    if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
    {
      unint64_t v28 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        uint64_t v31 = v27 == v30;
        if (v27 == v30) {
          uint64_t v27 = 0;
        }
        v29 |= v31;
        char v32 = *(void *)(v11 + 8 * v27);
      }
      while (v32 == -1);
      unint64_t v28 = __clz(__rbit64(~v32)) + (v27 << 6);
    }
    *(void *)(v11 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v28;
    unint64_t v33 = *(void *)(v8 + 48) + 20 * v28;
    *(_DWORD *)unint64_t v33 = v20;
    *(_DWORD *)(v33 + 4) = v21;
    *(_DWORD *)(v33 + 8) = v23;
    *(_DWORD *)(v33 + 12) = v22;
    *(unsigned char *)(v33 + 16) = v24;
    BOOL v34 = *(void *)(v8 + 56) + 56 * v28;
    *(_OWORD *)BOOL v34 = v40;
    *(_OWORD *)(v34 + 16) = v41;
    *(_OWORD *)(v34 + 32) = v42;
    *(void *)(v34 + 48) = v43;
    ++*(void *)(v8 + 16);
    if (__OFSUB__(v5--, 1)) {
      break;
    }
    uint64_t v4 = v38;
    unint64_t v10 = v39;
    if (!v5) {
      return v8;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v31;

  if (!a3) {
    return MEMORY[0x263F8EE80];
  }
  uint64_t v4 = a4;
  int64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  type metadata accessor for _DictionaryStorage<Int, ForEachState<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>.Item>(0, &lazy cache variable for type metadata for _DictionaryStorage<Int, ForEachState<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>.Item>, (void (*)(uint64_t))type metadata accessor for ForEachState<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>.Item);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v9 = result;
  uint64_t v31 = a1;
  if (a2 < 1) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = *a1;
  }
  unint64_t v11 = 0;
  uint64_t v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      uint64_t v14 = v13 | (v11 << 6);
    }
    else
    {
      uint64_t v15 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_38;
      }
      if (v15 >= a2) {
        return v9;
      }
      uint64_t v16 = v31[v15];
      ++v11;
      if (!v16)
      {
        unint64_t v11 = v15 + 1;
        if (v15 + 1 >= a2) {
          return v9;
        }
        uint64_t v16 = v31[v11];
        if (!v16)
        {
          uint64_t v17 = v15 + 2;
          if (v17 >= a2) {
            return v9;
          }
          uint64_t v16 = v31[v17];
          if (!v16)
          {
            while (1)
            {
              unint64_t v11 = v17 + 1;
              if (__OFADD__(v17, 1)) {
                goto LABEL_39;
              }
              if (v11 >= a2) {
                return v9;
              }
              uint64_t v16 = v31[v11];
              ++v17;
              if (v16) {
                goto LABEL_22;
              }
            }
          }
          unint64_t v11 = v17;
        }
      }
LABEL_22:
      unint64_t v10 = (v16 - 1) & v16;
      uint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    uint64_t v18 = 8 * v14;
    uint64_t v19 = *(void *)(*(void *)(v4 + 48) + v18);
    uint64_t v20 = *(void *)(*(void *)(v4 + 56) + v18);
    uint64_t result = static Hasher._hash(seed:_:)();
    uint64_t v21 = -1 << *(unsigned char *)(v9 + 32);
    uint64_t v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)(v12 + 8 * (v22 >> 6))) != 0)
    {
      CGRect v24 = __clz(__rbit64((-1 << v22) & ~*(void *)(v12 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      id v25 = 0;
      id v26 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_37;
        }
        uint64_t v27 = v23 == v26;
        if (v23 == v26) {
          unint64_t v23 = 0;
        }
        v25 |= v27;
        unint64_t v28 = *(void *)(v12 + 8 * v23);
      }
      while (v28 == -1);
      CGRect v24 = __clz(__rbit64(~v28)) + (v23 << 6);
    }
    *(void *)(v12 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    unint64_t v29 = 8 * v24;
    *(void *)(*(void *)(v9 + 48) + v29) = v19;
    *(void *)(*(void *)(v9 + 56) + v29) = v20;
    ++*(void *)(v9 + 16);
    if (__OFSUB__(v5--, 1)) {
      break;
    }
    uint64_t result = swift_retain();
    if (!v5) {
      return v9;
    }
  }
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
  return result;
}

unint64_t DynamicViewPhase.value.getter@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, int *a3@<X8>)
{
  int v7 = *(_DWORD *)AGGraphGetValue();
  unint64_t result = AGGraphGetValue();
  uint64_t v9 = *(void *)(result + 8);
  if (!*(void *)(v9 + 16)) {
    goto LABEL_12;
  }
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v10 & 1) == 0) {
    goto LABEL_12;
  }
  unint64_t v11 = *(void *)(*(void *)(v9 + 56) + 8 * result);
  uint64_t v12 = *(void *)AGGraphGetValue();
  if ((v12 & 0xC000000000000001) == 0)
  {
    if ((v11 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v11 < *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      uint64_t v13 = *(void *)(v12 + 8 * v11 + 32);
      swift_retain();
      goto LABEL_7;
    }
    __break(1u);
    goto LABEL_16;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v13 = MEMORY[0x24C523D60](v11, v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_7:
  int v3 = *(_DWORD *)(v13 + 80);
  swift_release();
  unint64_t result = AGGraphGetValue();
  a1 = *(void *)result;
  if ((*(void *)result & 0xC000000000000001) != 0)
  {
LABEL_16:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v14 = MEMORY[0x24C523D60](v11, a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  if ((v11 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v11 < *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v14 = *(void *)(a1 + 8 * v11 + 32);
    swift_retain();
LABEL_11:
    swift_beginAccess();
    int v15 = *(unsigned __int8 *)(v14 + 84);
    unint64_t result = swift_release();
    int v7 = (v7 + 2 * v3) | (v15 == 2);
LABEL_12:
    *a3 = v7;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t specialized DynamicContainerInfo.updateValue()()
{
  uint64_t v4 = v1;
  uint64_t v108 = *MEMORY[0x263EF8340];
  int v5 = *(_DWORD *)AGGraphGetValue() >> 1;
  uint64_t v102 = v1;
  if (v5 == *(_DWORD *)(v1 + 200))
  {
    uint64_t v6 = *(_DWORD *)(v1 + 68) & 1;
    *(_DWORD *)(v1 + 200) = v5;
    if (*(unsigned char *)(v1 + 204)) {
      goto LABEL_3;
    }
LABEL_26:
    LOBYTE(v3) = 0;
    goto LABEL_29;
  }
  *(_DWORD *)(v1 + 200) = v5;
  uint64_t v6 = 1;
  if (*(unsigned char *)(v1 + 204) != 1) {
    goto LABEL_26;
  }
LABEL_3:
  uint64_t v7 = *(void *)(v1 + 144);
  if ((unint64_t)v7 >> 62) {
    goto LABEL_235;
  }
  uint64_t isUniquelyReferenced_nonNull_native = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_5:
  if (!isUniquelyReferenced_nonNull_native)
  {
    char v100 = 0;
    goto LABEL_28;
  }
  unint64_t v0 = 0;
  unint64_t v3 = v7 & 0xC000000000000001;
  uint64_t v4 = v7 + 32;
  unint64_t v9 = isUniquelyReferenced_nonNull_native - 1;
  char v100 = 0;
LABEL_7:
  if ((uint64_t)v0 <= isUniquelyReferenced_nonNull_native) {
    unint64_t v10 = isUniquelyReferenced_nonNull_native;
  }
  else {
    unint64_t v10 = v0;
  }
  unint64_t v11 = v0;
  while (1)
  {
    if (v10 == v11) {
      goto LABEL_217;
    }
    if (v3)
    {
      uint64_t v12 = MEMORY[0x24C523D60](v11, v7);
      goto LABEL_16;
    }
    unint64_t v9 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v11 >= v9) {
      break;
    }
    uint64_t v12 = *(void *)(v4 + 8 * v11);
    swift_retain();
LABEL_16:
    swift_beginAccess();
    unint64_t v0 = *(unsigned __int8 *)(v12 + 84);
    swift_release();
    if (!v0)
    {
      if (v3)
      {
        uint64_t v13 = MEMORY[0x24C523D60](v11, v7);
      }
      else
      {
        if (v11 >= *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_251;
        }
        uint64_t v13 = *(void *)(v4 + 8 * v11);
        swift_retain();
      }
      unint64_t v0 = v11 + 1;
      swift_beginAccess();
      char v100 = 1;
      *(unsigned char *)(v13 + 84) = 1;
      swift_release();
      unint64_t v9 = isUniquelyReferenced_nonNull_native - 1;
      if (isUniquelyReferenced_nonNull_native - 1 == v11)
      {
LABEL_28:
        LOBYTE(v3) = v100;
        uint64_t v4 = v102;
        *(unsigned char *)(v102 + 204) = 0;
LABEL_29:
        LOWORD(v2) = specialized DynamicContainerInfo.updateItems(disableTransitions:)(v6);
        if ((v2 & 1) == 0)
        {
          unint64_t v15 = *(void *)(v4 + 144);
          if (!(v15 >> 62))
          {
            unint64_t v9 = v15 & 0xFFFFFFFFFFFFFF8;
            uint64_t isUniquelyReferenced_nonNull_native = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
            goto LABEL_32;
          }
          goto LABEL_237;
        }
        goto LABEL_47;
      }
      goto LABEL_7;
    }
    if (isUniquelyReferenced_nonNull_native == ++v11) {
      goto LABEL_28;
    }
  }
  while (2)
  {
    __break(1u);
LABEL_224:
    __break(1u);
    while (2)
    {
      __break(1u);
LABEL_226:
      __break(1u);
LABEL_227:
      __break(1u);
LABEL_228:
      if (isUniquelyReferenced_nonNull_native < 0) {
        uint64_t v7 = isUniquelyReferenced_nonNull_native;
      }
      else {
        uint64_t v7 = v9;
      }
      swift_bridgeObjectRetain();
      unint64_t v0 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v93 = *(void *)(v4 + 176);
      uint64_t v94 = v0;
      unint64_t v99 = *(void *)(v4 + 168);
      uint64_t v101 = v0 - v93;
      int64_t v2 = v0 - v93 - v99;
      if (v2 < (uint64_t)(v0 - v93))
      {
        swift_bridgeObjectRetain();
        uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v7 >= v2)
        {
LABEL_50:
          if (v2 < 0) {
            goto LABEL_239;
          }
          if (v6)
          {
            swift_bridgeObjectRetain();
            uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v20 = *(void *)((isUniquelyReferenced_nonNull_native & 0xFFFFFFFFFFFFFF8) + 0x10);
          }
          if (v20 < v101) {
            goto LABEL_240;
          }
          if (v101 < 0) {
            goto LABEL_241;
          }
          if ((isUniquelyReferenced_nonNull_native & 0xC000000000000001) != 0 && v99)
          {
            type metadata accessor for DynamicContainer.ItemInfo();
            Swift::Int v23 = v2;
            do
            {
              Swift::Int v24 = v23 + 1;
              _ArrayBuffer._typeCheckSlowPath(_:)(v23);
              Swift::Int v23 = v24;
            }
            while (v101 != v24);
          }
          uint64_t v96 = v2;
          if (v6)
          {
            swift_bridgeObjectRetain();
            unint64_t v0 = v101;
            Swift::Int v25 = _CocoaArrayWrapper.subscript.getter();
            uint64_t v26 = v27;
            uint64_t v4 = v28;
            unint64_t v3 = v29;
            swift_bridgeObjectRelease();
          }
          else
          {
            Swift::Int v25 = isUniquelyReferenced_nonNull_native & 0xFFFFFFFFFFFFFF8;
            uint64_t v26 = (isUniquelyReferenced_nonNull_native & 0xFFFFFFFFFFFFFF8) + 32;
            unint64_t v0 = v101;
            unint64_t v3 = (2 * v101) | 1;
            swift_bridgeObjectRetain();
            uint64_t v4 = v2;
          }
          unint64_t v9 = v3 >> 1;
          if (v4 == v3 >> 1) {
            goto LABEL_96;
          }
          uint64_t v6 = v4 + 1;
          if (__OFADD__(v4, 1)) {
            goto LABEL_250;
          }
          if (v6 == v9)
          {
LABEL_96:
            uint64_t v44 = v26;
            int64_t v2 = v96;
            uint64_t v7 = (uint64_t)v98;
            specialized Array.subscript.setter(v25, v44, v4, v3, v96, v0);
            uint64_t v4 = v102;
            goto LABEL_97;
          }
          while (v6 >= v4)
          {
            unint64_t v9 = v3 >> 1;
            if (v6 >= (uint64_t)(v3 >> 1)) {
              break;
            }
            uint64_t isUniquelyReferenced_nonNull_native = *(void *)(v26 + 8 * v6);
            swift_retain();
            uint64_t v95 = v6;
            while (1)
            {
              uint64_t v30 = v6 - 1;
              if (__OFSUB__(v6, 1)) {
                goto LABEL_205;
              }
              if (v30 < v4) {
                goto LABEL_206;
              }
              int64_t v31 = v3 >> 1;
              if (v30 >= (uint64_t)(v3 >> 1)) {
                goto LABEL_206;
              }
              uint64_t v32 = *(void *)(v26 + 8 * v30);
              if (*(_DWORD *)(isUniquelyReferenced_nonNull_native + 72) >= *(_DWORD *)(v32 + 72)) {
                break;
              }
              swift_retain_n();
              if ((v3 & 1) == 0 || (swift_isUniquelyReferenced_nonNull() & 1) == 0)
              {
                specialized _ArrayBufferProtocol.init(copying:)(v26, v4, v3);
                Swift::Int v34 = v33;
                uint64_t v26 = v35;
                uint64_t v4 = v36;
                unint64_t v3 = v37;
                swift_unknownObjectRelease();
                int64_t v31 = v3 >> 1;
                Swift::Int v25 = v34;
              }
              if (v6 < v4 || v6 >= v31) {
                goto LABEL_207;
              }
              *(void *)(v26 + 8 * v6) = v32;
              swift_release();
              swift_release();
              --v6;
              uint64_t v38 = v30;
              if (v30 == v4) {
                goto LABEL_85;
              }
            }
            uint64_t v30 = v6;
            uint64_t v38 = v4;
LABEL_85:
            uint64_t v6 = v95;
            if (v30 == v95)
            {
              swift_release();
              uint64_t v4 = v38;
              unint64_t v0 = v101;
            }
            else
            {
              swift_retain();
              unint64_t v0 = v101;
              if (v3 & 1) != 0 && (swift_isUniquelyReferenced_nonNull())
              {
                uint64_t v4 = v38;
              }
              else
              {
                specialized _ArrayBufferProtocol.init(copying:)(v26, v38, v3);
                Swift::Int v40 = v39;
                uint64_t v26 = v41;
                uint64_t v4 = v42;
                unint64_t v3 = v43;
                swift_unknownObjectRelease();
                Swift::Int v25 = v40;
              }
              if (v30 < v4) {
                goto LABEL_227;
              }
              unint64_t v9 = v3 >> 1;
              if (v30 >= (uint64_t)(v3 >> 1)) {
                goto LABEL_227;
              }
              *(void *)(v26 + 8 * v30) = isUniquelyReferenced_nonNull_native;
              swift_release();
              swift_release();
            }
            if (__OFADD__(v95, 1)) {
              goto LABEL_226;
            }
            uint64_t v6 = v95 + 1;
            if (v95 + 1 == v3 >> 1) {
              goto LABEL_96;
            }
          }
          continue;
        }
        goto LABEL_233;
      }
      break;
    }
    while (1)
    {
LABEL_97:
      if (*(void *)(*(void *)(v4 + 152) + 16))
      {
        uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)&long long v103 = *(void *)(v4 + 152);
        *(void *)(v4 + 152) = 0x8000000000000000;
        type metadata accessor for _NativeDictionary<UInt32, Int>();
        uint64_t v7 = (uint64_t)&v103;
        _NativeDictionary.removeAll(isUnique:)(isUniquelyReferenced_nonNull_native);
        *(void *)(v4 + 152) = v103;
        swift_bridgeObjectRelease();
      }
      *(unsigned char *)(v4 + 184) = 1;
      uint64_t v6 = v101;
      if ((v101 & 0x8000000000000000) == 0) {
        break;
      }
      while (2)
      {
        __break(1u);
LABEL_235:
        swift_bridgeObjectRetain();
        uint64_t isUniquelyReferenced_nonNull_native = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if ((isUniquelyReferenced_nonNull_native & 0x8000000000000000) == 0) {
          goto LABEL_5;
        }
        __break(1u);
LABEL_237:
        swift_bridgeObjectRetain();
        uint64_t isUniquelyReferenced_nonNull_native = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (isUniquelyReferenced_nonNull_native < 0)
        {
          __break(1u);
LABEL_239:
          __break(1u);
LABEL_240:
          __break(1u);
LABEL_241:
          __break(1u);
LABEL_242:
          __break(1u);
LABEL_243:
          swift_bridgeObjectRetain();
          uint64_t v91 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (!v91) {
            goto LABEL_55;
          }
          goto LABEL_175;
        }
LABEL_32:
        if (isUniquelyReferenced_nonNull_native)
        {
          uint64_t v16 = isUniquelyReferenced_nonNull_native;
          while (1)
          {
            if (isUniquelyReferenced_nonNull_native < v16)
            {
              __break(1u);
LABEL_204:
              __break(1u);
LABEL_205:
              __break(1u);
LABEL_206:
              __break(1u);
LABEL_207:
              __break(1u);
LABEL_208:
              __break(1u);
LABEL_209:
              __break(1u);
LABEL_210:
              __break(1u);
LABEL_211:
              __break(1u);
LABEL_212:
              __break(1u);
LABEL_213:
              __break(1u);
              goto LABEL_214;
            }
            int64_t v17 = v16 - 1;
            uint64_t v18 = *(void *)(v4 + 144);
            if ((v18 & 0xC000000000000001) != 0)
            {
              uint64_t v19 = MEMORY[0x24C523D60](v16 - 1);
            }
            else
            {
              unint64_t v9 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
              if (v17 >= (uint64_t)v9) {
                goto LABEL_204;
              }
              uint64_t v19 = *(void *)(v18 + 8 * v16 + 24);
              swift_retain();
            }
            swift_beginAccess();
            unint64_t v0 = *(unsigned __int8 *)(v19 + 84);
            swift_release();
            if (v0 == 2)
            {
              if ((specialized DynamicContainerInfo.tryRemovingItem(at:disableTransitions:)(v16 - 1, v6) & 1) == 0) {
                goto LABEL_35;
              }
              LOBYTE(v3) = 1;
              if (!--v16) {
                goto LABEL_47;
              }
            }
            else
            {
              if (v0 != 3) {
                break;
              }
LABEL_35:
              --v16;
              if (!v17) {
                break;
              }
            }
          }
        }
        if ((v3 & 1) == 0)
        {
          unint64_t v21 = *(void *)(v4 + 144);
          if (v21 >> 62) {
            goto LABEL_243;
          }
          if (!*(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
LABEL_55:
            uint64_t result = AGGraphGetOutputValue();
            if (result) {
              return result;
            }
          }
LABEL_175:
          int v80 = *(_DWORD *)(v4 + 188) + 1;
          *(_DWORD *)(v4 + 188) = v80;
          uint64_t v81 = *(void *)(v4 + 176);
          char v82 = *(unsigned char *)(v4 + 184);
          long long v83 = *(_OWORD *)(v4 + 160);
          long long v103 = *(_OWORD *)(v4 + 144);
          long long v104 = v83;
          uint64_t v105 = v81;
          char v106 = v82;
          int v107 = v80;
          return AGGraphSetOutputValue();
        }
LABEL_47:
        __int16 v92 = v2;
        uint64_t isUniquelyReferenced_nonNull_native = *(void *)(v4 + 144);
        uint64_t v98 = (void *)(v4 + 144);
        unint64_t v9 = isUniquelyReferenced_nonNull_native & 0xFFFFFFFFFFFFFF8;
        uint64_t v6 = (unint64_t)isUniquelyReferenced_nonNull_native >> 62;
        if ((unint64_t)isUniquelyReferenced_nonNull_native >> 62) {
          goto LABEL_228;
        }
        uint64_t v7 = *(void *)((isUniquelyReferenced_nonNull_native & 0xFFFFFFFFFFFFFF8) + 0x10);
        uint64_t v93 = *(void *)(v4 + 176);
        uint64_t v94 = v7;
        unint64_t v99 = *(void *)(v4 + 168);
        uint64_t v101 = v7 - v93;
        int64_t v2 = v7 - v93 - v99;
        if (v2 < v7 - v93)
        {
          if (v7 >= v2) {
            goto LABEL_50;
          }
LABEL_233:
          __break(1u);
          continue;
        }
        break;
      }
    }
    int64_t v97 = v2;
    if (v94 == v93)
    {
LABEL_101:
      if (*(void *)(*(void *)(v4 + 152) + 16) != v101) {
        goto LABEL_254;
      }
      unint64_t v3 = v97;
      if ((v92 & 0x100) == 0)
      {
        swift_bridgeObjectRelease();
        *(void *)(v4 + 160) = 0;
LABEL_174:
        unint64_t v9 = v94;
        if (v94 == v93) {
          goto LABEL_175;
        }
        unint64_t v84 = 0;
        unint64_t v3 = v6 & ~(v6 >> 63);
        while (v3 != v84)
        {
          uint64_t isUniquelyReferenced_nonNull_native = *(void *)(v4 + 144);
          uint64_t v85 = *(void *)(v4 + 160);
          uint64_t v6 = *(void *)(v4 + 168);
          uint64_t v86 = *(void *)(v4 + 176);
          if (v85)
          {
            if (v99)
            {
              if ((unint64_t)isUniquelyReferenced_nonNull_native >> 62)
              {
                swift_bridgeObjectRetain_n();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                uint64_t v87 = _CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
              }
              else
              {
                uint64_t v87 = *(void *)((isUniquelyReferenced_nonNull_native & 0xFFFFFFFFFFFFFF8) + 0x10);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }
              unint64_t v9 = v84 + v87 - v6 - v86;
              if ((v9 & 0x8000000000000000) != 0) {
                goto LABEL_221;
              }
              if (v9 >= *(void *)(v85 + 16)) {
                goto LABEL_222;
              }
              unint64_t v88 = *(unsigned int *)(v85 + 4 * v9 + 32);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            else
            {
              unint64_t v9 = *(void *)(v85 + 16);
              if (v84 >= v9) {
                goto LABEL_224;
              }
              unint64_t v9 = v85 + 4 * v84;
              unint64_t v88 = *(unsigned int *)(v9 + 32);
            }
          }
          else
          {
            unint64_t v88 = v84;
            unint64_t v9 = v99;
            if (v99)
            {
              if ((unint64_t)isUniquelyReferenced_nonNull_native >> 62)
              {
                swift_bridgeObjectRetain_n();
                swift_bridgeObjectRetain();
                uint64_t v89 = _CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease_n();
              }
              else
              {
                uint64_t v89 = *(void *)((isUniquelyReferenced_nonNull_native & 0xFFFFFFFFFFFFFF8) + 0x10);
              }
              unint64_t v9 = v84 - v6;
              if ((uint64_t)v84 < v6) {
                unint64_t v88 = v84 + v89 - v6 - v86;
              }
              else {
                unint64_t v88 = v84 - v6;
              }
            }
          }
          if ((isUniquelyReferenced_nonNull_native & 0xC000000000000001) != 0)
          {
            uint64_t isUniquelyReferenced_nonNull_native = MEMORY[0x24C523D60](v88, isUniquelyReferenced_nonNull_native);
            uint64_t v6 = v101;
          }
          else
          {
            uint64_t v6 = v101;
            if ((v88 & 0x8000000000000000) != 0) {
              goto LABEL_215;
            }
            unint64_t v9 = *(void *)((isUniquelyReferenced_nonNull_native & 0xFFFFFFFFFFFFFF8) + 0x10);
            if (v88 >= v9) {
              goto LABEL_216;
            }
            uint64_t isUniquelyReferenced_nonNull_native = *(void *)(isUniquelyReferenced_nonNull_native + 8 * v88 + 32);
            swift_retain();
          }
          id v90 = *(id *)(isUniquelyReferenced_nonNull_native + 16);
          swift_release();
          AGSubgraphSetIndex();

          if (v6 == ++v84) {
            goto LABEL_175;
          }
        }
LABEL_214:
        __break(1u);
LABEL_215:
        __break(1u);
LABEL_216:
        __break(1u);
LABEL_217:
        __break(1u);
LABEL_218:
        __break(1u);
LABEL_219:
        __break(1u);
LABEL_220:
        __break(1u);
LABEL_221:
        __break(1u);
LABEL_222:
        __break(1u);
        continue;
      }
      uint64_t v62 = v97;
      if (v99 && (uint64_t v62 = v97 + v101, __OFADD__(v97, v101)))
      {
        __break(1u);
      }
      else
      {
        int64_t v63 = v62 & ~(v62 >> 63);
        int64_t v2 = swift_allocObject();
        CGFloat v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v63, 0, MEMORY[0x263F8EE78]);
        *(void *)(v2 + 16) = v64;
        uint64_t v7 = v2 + 16;
        if (v97 < 0) {
          goto LABEL_242;
        }
        if (!v97)
        {
LABEL_143:
          if (v94 > 31)
          {
            uint64_t isUniquelyReferenced_nonNull_native = 0;
            specialized MutableCollection<>.sort(by:)((char **)v7, v4);
            if (!v99)
            {
LABEL_173:
              swift_beginAccess();
              uint64_t v79 = *(void *)(v2 + 16);
              uint64_t isUniquelyReferenced_nonNull_native = *(void *)(v4 + 160);
              swift_bridgeObjectRetain();
              swift_release();
              swift_bridgeObjectRelease();
              *(void *)(v4 + 160) = v79;
              goto LABEL_174;
            }
          }
          else
          {
            uint64_t isUniquelyReferenced_nonNull_native = 0;
            specialized BidirectionalCollection<>.insertionSort(by:)(v7, v4);
            if (!v99) {
              goto LABEL_173;
            }
          }
          if (one-time initialization token for v5 != -1) {
            swift_once();
          }
          unsigned int v69 = static Semantics.v5;
          if (one-time initialization token for forced != -1) {
            swift_once();
          }
          swift_beginAccess();
          if (byte_26B0F44FC)
          {
            if ((dyld_program_sdk_at_least() & 1) == 0)
            {
LABEL_153:
              if (!v3)
              {
LABEL_167:
                addRemoved #1 <A>() in DynamicContainerInfo.updateValue()(v3, v101, v2);
                goto LABEL_168;
              }
              uint64_t v6 = 0;
LABEL_158:
              swift_beginAccess();
              unint64_t v70 = 0;
              uint64_t v71 = v3 & ~((uint64_t)v3 >> 63);
              do
              {
                if (v71 == v70) {
                  goto LABEL_219;
                }
                unint64_t v9 = *(void *)v7;
                if (v70 >= *(void *)(*(void *)v7 + 16)) {
                  goto LABEL_220;
                }
                int v72 = *(_DWORD *)(v9 + 4 * v70 + 32);
                swift_beginAccess();
                uint64_t v73 = *(char **)v7;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  uint64_t v73 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v73 + 2) + 1, 1, v73);
                }
                unint64_t v75 = *((void *)v73 + 2);
                unint64_t v74 = *((void *)v73 + 3);
                if (v75 >= v74 >> 1) {
                  uint64_t v73 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v74 > 1), v75 + 1, 1, v73);
                }
                ++v70;
                *((void *)v73 + 2) = v75 + 1;
                *(_DWORD *)&v73[4 * v75 + 32] = v72;
                *(void *)uint64_t v7 = v73;
                swift_endAccess();
                unint64_t v3 = v97;
                uint64_t v4 = v102;
              }
              while (v97 != v70);
              if (v6) {
                goto LABEL_168;
              }
              goto LABEL_167;
            }
          }
          else if (static Semantics.forced < v69)
          {
            goto LABEL_153;
          }
          addRemoved #1 <A>() in DynamicContainerInfo.updateValue()(v3, v6, v2);
          if (!v3)
          {
LABEL_168:
            uint64_t v6 = v101;
            int64_t v76 = v3 + v101;
            if (__OFADD__(v3, v101))
            {
              __break(1u);
LABEL_248:
              __break(1u);
LABEL_249:
              __break(1u);
LABEL_250:
              __break(1u);
LABEL_251:
              __break(1u);
            }
            if (v76 < (uint64_t)v3) {
              goto LABEL_248;
            }
            swift_beginAccess();
            int8x16_t v77 = *(char **)v7;
            int64_t v78 = *(void *)(*(void *)v7 + 16);
            if (v78 < (uint64_t)v3 || v78 < v76) {
              goto LABEL_249;
            }
            *(void *)&long long v103 = *(void *)v7;
            *((void *)&v103 + 1) = v77 + 32;
            *(void *)&long long v104 = v3;
            *((void *)&v104 + 1) = (2 * v76) | 1;
            swift_bridgeObjectRetain();
            specialized BidirectionalCollection<>.insertionSort(by:)((unint64_t)&v103, v4);
            specialized Array.subscript.setter((char *)v103, *((uint64_t *)&v103 + 1), v104, *((unint64_t *)&v104 + 1), v3, v76);
            swift_endAccess();
            swift_unknownObjectRelease();
            goto LABEL_173;
          }
          uint64_t v6 = 1;
          goto LABEL_158;
        }
        uint64_t v14 = v64;
        unint64_t v0 = *((void *)v64 + 2);
        uint64_t v62 = *((void *)v64 + 3);
        uint64_t isUniquelyReferenced_nonNull_native = v0 + 1;
        if (v0 < (unint64_t)v62 >> 1)
        {
LABEL_135:
          *((void *)v14 + 2) = isUniquelyReferenced_nonNull_native;
          *(_DWORD *)&v14[4 * v0 + 32] = 0;
          *(void *)uint64_t v7 = v14;
          if (v97 != 1)
          {
            unint64_t v65 = *((void *)v14 + 2);
            int v66 = 1;
            uint64_t v67 = 2;
            while (1)
            {
              unint64_t v68 = *((void *)v14 + 3);
              if (v65 >= v68 >> 1) {
                uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v68 > 1), v65 + 1, 1, v14);
              }
              *((void *)v14 + 2) = v65 + 1;
              *(_DWORD *)&v14[4 * v65 + 32] = v66;
              if (v67 == v97) {
                break;
              }
              ++v67;
              ++v66;
              ++v65;
              if (v67 == 0x100000001) {
                goto LABEL_253;
              }
            }
            *(void *)uint64_t v7 = v14;
            uint64_t v6 = v101;
            unint64_t v3 = v97;
          }
          goto LABEL_143;
        }
      }
      uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)((unint64_t)v62 > 1), isUniquelyReferenced_nonNull_native, 1, v14);
      goto LABEL_135;
    }
    break;
  }
  int v45 = 0;
  unint64_t v3 = 0;
  int64_t v2 = 0x8000000000000000;
  while (1)
  {
    unint64_t v9 = (unint64_t)v98;
    if ((*v98 & 0xC000000000000001) != 0)
    {
      uint64_t v47 = MEMORY[0x24C523D60](v3);
    }
    else
    {
      if ((v3 & 0x8000000000000000) != 0) {
        goto LABEL_208;
      }
      unint64_t v9 = *(void *)((*v98 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v3 >= v9) {
        goto LABEL_210;
      }
      uint64_t v47 = swift_retain();
    }
    uint64_t isUniquelyReferenced_nonNull_native = *(unsigned int *)(v47 + 24);
    swift_release();
    uint64_t v48 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v49 = v4;
    uint64_t v4 = v48;
    *(void *)&long long v103 = *(void *)(v49 + 152);
    uint64_t v50 = v103;
    *(void *)(v49 + 152) = 0x8000000000000000;
    unint64_t v52 = specialized __RawDictionaryStorage.find<A>(_:)(isUniquelyReferenced_nonNull_native);
    unint64_t v9 = *(void *)(v50 + 16);
    BOOL v53 = (v51 & 1) == 0;
    uint64_t v54 = v9 + v53;
    if (__OFADD__(v9, v53)) {
      goto LABEL_209;
    }
    char v55 = v51;
    if (*(void *)(v50 + 24) < v54) {
      break;
    }
    if ((v4 & 1) == 0) {
      specialized _NativeDictionary.copy()();
    }
LABEL_117:
    uint64_t v4 = v102;
    unint64_t v9 = v103;
    if (v55)
    {
      *(void *)(*(void *)(v103 + 56) + 8 * v52) = v3;
    }
    else
    {
      *(void *)(v103 + 8 * (v52 >> 6) + 64) |= 1 << v52;
      *(_DWORD *)(*(void *)(v9 + 48) + 4 * v52) = isUniquelyReferenced_nonNull_native;
      *(void *)(*(void *)(v9 + 56) + 8 * v52) = v3;
      uint64_t v58 = *(void *)(v9 + 16);
      BOOL v59 = __OFADD__(v58, 1);
      uint64_t v60 = v58 + 1;
      if (v59) {
        goto LABEL_218;
      }
      *(void *)(v9 + 16) = v60;
    }
    *(void *)(v102 + 152) = v9;
    swift_bridgeObjectRelease();
    uint64_t v7 = *(void *)(v102 + 144);
    if ((v7 & 0xC000000000000001) != 0)
    {
      *(_DWORD *)(MEMORY[0x24C523D60](v3, *(void *)(v102 + 144)) + 76) = v45;
      swift_release();
      unint64_t v0 = *(unsigned int *)(MEMORY[0x24C523D60](v3, v7) + 28);
      swift_unknownObjectRelease();
      if ((*(unsigned char *)(v102 + 184) & 1) == 0) {
        goto LABEL_126;
      }
    }
    else
    {
      if ((v3 & 0x8000000000000000) != 0) {
        goto LABEL_211;
      }
      unint64_t v9 = v7 & 0xFFFFFFFFFFFFFF8;
      if (v3 >= *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_212;
      }
      unint64_t v61 = v7 + 8 * v3;
      *(_DWORD *)(*(void *)(v61 + 32) + 76) = v45;
      unint64_t v9 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v3 >= v9) {
        goto LABEL_213;
      }
      unint64_t v0 = *(unsigned int *)(*(void *)(v61 + 32) + 28);
      if ((*(unsigned char *)(v102 + 184) & 1) == 0)
      {
LABEL_126:
        BOOL v46 = 0;
        goto LABEL_106;
      }
    }
    BOOL v46 = v0 == 1;
LABEL_106:
    ++v3;
    *(unsigned char *)(v102 + 184) = v46;
    v45 += v0;
    if (v101 == v3) {
      goto LABEL_101;
    }
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v54, v4);
  unint64_t v56 = specialized __RawDictionaryStorage.find<A>(_:)(isUniquelyReferenced_nonNull_native);
  if ((v55 & 1) == (v57 & 1))
  {
    unint64_t v52 = v56;
    goto LABEL_117;
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_253:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_254:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t DynamicContainer.Info.viewIndex(id:)(unsigned int *a1)
{
  int64_t v2 = v1;
  uint64_t v3 = v1[1];
  if (!*(void *)(v3 + 16)) {
    return 0;
  }
  uint64_t v4 = *v2;
  unsigned int v5 = a1[1];
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(*a1);
  if ((v7 & 1) == 0) {
    return 0;
  }
  unint64_t result = *(void *)(*(void *)(v3 + 56) + 8 * v6);
  if ((v4 & 0xC000000000000001) != 0)
  {
    uint64_t v9 = MEMORY[0x24C523D60](result, v4);
LABEL_7:
    int v10 = *(_DWORD *)(v9 + 76);
    unint64_t result = swift_release();
    if (!__OFADD__(v10, v5)) {
      return (int)(v10 + v5);
    }
    goto LABEL_12;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (result < *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v9 = swift_retain();
    goto LABEL_7;
  }
LABEL_13:
  __break(1u);
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unsigned int a1)
{
  uint64_t v3 = MEMORY[0x24C5248C0](*(void *)(v1 + 40), a1, 4);

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3);
}

{
  uint64_t v1;
  uint64_t v3;

  uint64_t v3 = MEMORY[0x24C5248C0](*(void *)(v1 + 40), a1, 4);
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(int a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(_DWORD *)(v7 + 4 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(_DWORD *)(v7 + 4 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(unsigned char *)(v7 + result) != (a1 & 1))
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (((*(unsigned __int8 *)(v7 + result) ^ a1) & 1) == 0) {
          break;
        }
      }
    }
  }
  return result;
}

uint64_t specialized DynamicContainerInfo.updateItems(disableTransitions:)(char a1)
{
  uint64_t v2 = v1;
  *(_WORD *)unint64_t v43 = 0;
  DynamicLayoutViewAdaptor.updatedItems()((uint64_t)&v38);
  if (v39)
  {
    uint64_t v4 = outlined init with take of ScrollStateRequest(&v38, (uint64_t)v40);
    uint64_t v37 = 0;
    unint64_t v5 = *(void *)(v1 + 144);
    if (v5 >> 62) {
      goto LABEL_48;
    }
    uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_4:
    uint64_t v34 = (uint64_t)&v34;
    uint64_t v36 = v6;
    unint64_t v7 = *(unsigned int *)(v2 + 8);
    MEMORY[0x270FA5388](v4);
    v31[2] = &v37;
    v31[3] = &v36;
    v31[4] = v2;
    v31[5] = &v43[1];
    v31[6] = v40;
    char v32 = a1 & 1;
    Swift::Int v33 = v43;
    *(void *)&long long v38 = 0;
    uint64_t v8 = v41;
    uint64_t v9 = v42;
    int v10 = __swift_project_boxed_opaque_existential_1(v40, v41);
    MEMORY[0x270FA5388](v10);
    void v30[2] = partial apply for specialized closure #1 in DynamicContainerInfo.updateItems(disableTransitions:);
    v30[3] = v31;
    swift_retain();
    char v35 = 0;
    ViewList.applySublists(from:list:to:)((uint64_t)&v38, v7, (uint64_t)partial apply for closure #1 in DynamicLayoutViewAdaptor.foreachItem(items:_:), (uint64_t)v30, v8, v9);
    swift_release();
    uint64_t v11 = v36;
    uint64_t v34 = v37;
    if (v37 >= v36)
    {
LABEL_5:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
      int v12 = v43[0];
      goto LABEL_35;
    }
    while (1)
    {
      if (v34 >= v11)
      {
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        swift_bridgeObjectRetain();
        uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
        uint64_t v4 = swift_bridgeObjectRelease();
        goto LABEL_4;
      }
      unint64_t v13 = v11 - 1;
      uint64_t v14 = *(void *)(v2 + 144);
      if ((v14 & 0xC000000000000001) != 0)
      {
        uint64_t v15 = MEMORY[0x24C523D60](v11 - 1);
      }
      else
      {
        if (v11 < 1) {
          goto LABEL_40;
        }
        if (v13 >= *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_41;
        }
        uint64_t v15 = *(void *)(v14 + 8 * v11 + 24);
        swift_retain();
      }
      swift_beginAccess();
      int v16 = *(unsigned __int8 *)(v15 + 84);
      swift_release();
      if ((specialized DynamicContainerInfo.tryRemovingItem(at:disableTransitions:)(v11 - 1, a1 & 1) & 1) == 0)
      {
        uint64_t v17 = *(void *)(v2 + 144);
        if ((v17 & 0xC000000000000001) != 0)
        {
          double v26 = *(double *)(MEMORY[0x24C523D60](v11 - 1, *(void *)(v2 + 144)) + 64);
          v43[0] = v43[0] & 1 | (v26 != 0.0);
          double v27 = *(double *)(MEMORY[0x24C523D60](v34, v17) + 64);
          swift_release();
          if (v26 != v27)
          {
            *(double *)(MEMORY[0x24C523D60](v11 - 1, v17) + 64) = v26;
            swift_release();
            v43[1] = 1;
          }
          uint64_t v24 = MEMORY[0x24C523D60](v11 - 1, v17);
        }
        else
        {
          if (v11 < 1) {
            goto LABEL_42;
          }
          uint64_t v18 = v17 & 0xFFFFFFFFFFFFFF8;
          unint64_t v19 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (v13 >= v19) {
            goto LABEL_43;
          }
          uint64_t v20 = *(void *)(v2 + 144);
          uint64_t v21 = v17 + 8 * v11;
          double v22 = *(double *)(*(void *)(v21 + 24) + 64);
          unsigned __int8 v23 = v43[0];
          swift_retain();
          v43[0] = v23 & 1 | (v22 != 0.0);
          if (v34 < 0) {
            goto LABEL_44;
          }
          if (v34 >= v19) {
            goto LABEL_45;
          }
          if (v22 != *(double *)(*(void *)(v20 + 32 + 8 * v34) + 64))
          {
            if (v13 >= *(void *)(v18 + 16)) {
              goto LABEL_47;
            }
            *(double *)(*(void *)(v21 + 24) + 64) = v22;
            v43[1] = 1;
          }
          if (v13 >= *(void *)(v18 + 16)) {
            goto LABEL_46;
          }
          uint64_t v24 = *(void *)(v21 + 24);
          swift_retain();
        }
        swift_release();
        swift_beginAccess();
        int v25 = *(unsigned __int8 *)(v24 + 84);
        swift_release();
        if (v25 == 3)
        {
          if (v16 == 3) {
            goto LABEL_7;
          }
        }
        else if (v16 != 3 && v25 == v16)
        {
          goto LABEL_7;
        }
      }
      v43[1] = 1;
LABEL_7:
      uint64_t v11 = v13;
      if (v34 == v13) {
        goto LABEL_5;
      }
    }
  }
  outlined destroy of CVarArg?((uint64_t)&v38, &lazy cache variable for type metadata for ViewList?, (unint64_t *)&lazy cache variable for type metadata for ViewList, (uint64_t)&protocol descriptor for ViewList);
  int v12 = *(void *)(v1 + 160) != 0;
LABEL_35:
  if (v12) {
    int v28 = 256;
  }
  else {
    int v28 = 0;
  }
  return v28 | v43[1];
}

uint64_t DynamicLayoutViewAdaptor.updatedItems()@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  uint64_t Value = AGGraphGetValue();
  char v4 = v3;
  outlined init with copy of AnyTrackedValue(Value, (uint64_t)v6);
  if (v4) {
    return outlined init with take of ScrollStateRequest(v6, a1);
  }
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t ViewList.applySublists(from:list:to:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = 2;
  return ViewList.applySublists(from:style:list:to:)(a1, &v7, a2 | ((HIDWORD(a2) & 1) << 32), a3, a4, a5, a6) & 1;
}

uint64_t ViewList.applySublists(from:style:list:to:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = *a2;
  uint64_t v11 = MEMORY[0x263F8EE78];
  v12[0] = BYTE4(a3) & 1;
  uint64_t v16 = v7;
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t *, unint64_t, uint64_t *, uint64_t (*)(), unsigned char *, uint64_t))(a7 + 48);
  char v15 = BYTE4(a3) & 1;
  char v9 = v8(a1, &v16, a3 | ((unint64_t)(BYTE4(a3) & 1) << 32), &v11, partial apply for closure #1 in _ViewList_Node.applySublists(from:style:transform:to:), v12, a6);
  swift_bridgeObjectRelease();
  return v9 & 1;
}

void type metadata accessor for _DictionaryStorage<UInt32, Int>(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = type metadata accessor for _DictionaryStorage();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

uint64_t initializeWithCopy for DynamicContainer.Info(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t protocol witness for ViewList.applyNodes(from:style:list:transform:to:) in conformance _ViewList_Group(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t *, void *, uint64_t))
{
  uint64_t v9 = *v5;
  uint64_t v14 = *a2;
  v12[0] = v9;
  char v13 = 2;
  swift_bridgeObjectRetain();
  char v10 = a5(a1, &v14, v12, a4);
  outlined destroy of _ViewList_Node((uint64_t)v12);
  return v10 & 1;
}

uint64_t outlined destroy of CVarArg?(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for ViewList?(0, a2, a3, a4, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t _ss7CVarArg_pSgWOhTm_0(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for _KDebuggableCVarArg?(0, a2, a3, a4, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t _ss7CVarArg_pSgWOhTm_1(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_1(0, a2, a3, a4, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

void type metadata accessor for ViewList?(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v8 = type metadata accessor for ScrollStateRequest(255, a3);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

void _s7SwiftUI8ViewList_pSgMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for _NativeDictionary<UInt32, Int>()
{
  if (!lazy cache variable for type metadata for _NativeDictionary<UInt32, Int>)
  {
    unint64_t v0 = type metadata accessor for _NativeDictionary();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _NativeDictionary<UInt32, Int>);
    }
  }
}

uint64_t specialized DynamicContainerInfo.tryRemovingItem(at:disableTransitions:)(unint64_t a1, char a2)
{
  unint64_t v4 = a1;
  uint64_t v5 = *(void *)(v2 + 144);
  unint64_t v6 = v5 & 0xC000000000000001;
  if ((v5 & 0xC000000000000001) != 0)
  {
    uint64_t v7 = MEMORY[0x24C523D60](a1, *(void *)(v2 + 144));
    goto LABEL_5;
  }
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    uint64_t v21 = MEMORY[0x24C523D60](v4);
LABEL_41:
    *(void *)(v21 + 56) = v5;
    swift_retain();
    swift_release();
    swift_release();
    ++*(void *)(v5 + 32);
    swift_retain();
    specialized static Update.begin()();
    unint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = partial apply for closure #1 in DynamicContainerInfo.tryRemovingItem(at:disableTransitions:);
    *(void *)(v4 + 24) = v5;
    uint64_t v22 = one-time initialization token for actions;
    swift_retain();
    if (v22 == -1) {
      goto LABEL_42;
    }
    goto LABEL_60;
  }
  if (*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a1) {
    goto LABEL_54;
  }
  uint64_t v7 = *(void *)(v5 + 8 * a1 + 32);
  swift_retain();
LABEL_5:
  swift_beginAccess();
  uint64_t v8 = *(unsigned __int8 *)(v7 + 84);
  swift_release();
  uint64_t result = 0;
  switch(v8)
  {
    case 1:
      if (a2) {
        goto LABEL_20;
      }
      if (v6)
      {
        char v10 = *(unsigned char *)(MEMORY[0x24C523D60](v4, v5) + 48);
        swift_unknownObjectRelease();
        if ((v10 & 1) == 0) {
          goto LABEL_20;
        }
        int v11 = *(_DWORD *)(v2 + 196);
        if ((v11 + 1) > 1) {
          int v12 = v11 + 1;
        }
        else {
          int v12 = 1;
        }
        *(_DWORD *)(v2 + 196) = v12;
        uint64_t v13 = MEMORY[0x24C523D60](v4, v5);
        goto LABEL_29;
      }
      if ((v4 & 0x8000000000000000) != 0)
      {
        __break(1u);
        goto LABEL_62;
      }
      if (*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10) <= v4)
      {
LABEL_62:
        __break(1u);
        goto LABEL_63;
      }
      if ((*(unsigned char *)(*(void *)(v5 + 32 + 8 * v4) + 48) & 1) == 0) {
        goto LABEL_20;
      }
      int v17 = *(_DWORD *)(v2 + 196);
      if ((v17 + 1) > 1) {
        int v12 = v17 + 1;
      }
      else {
        int v12 = 1;
      }
      *(_DWORD *)(v2 + 196) = v12;
      if (*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10) <= v4) {
        goto LABEL_65;
      }
      uint64_t v13 = swift_retain();
LABEL_29:
      *(_DWORD *)(v13 + 72) = v12;
      swift_release();
      ++*(void *)(v2 + 168);
      if (v6)
      {
        uint64_t v18 = MEMORY[0x24C523D60](v4, v5);
        goto LABEL_34;
      }
      if ((v4 & 0x8000000000000000) != 0)
      {
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
        goto LABEL_66;
      }
      if (*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10) <= v4)
      {
LABEL_66:
        __break(1u);
        goto LABEL_67;
      }
      uint64_t v18 = *(void *)(v5 + 8 * v4 + 32);
      swift_retain();
LABEL_34:
      swift_beginAccess();
      *(unsigned char *)(v18 + 84) = 2;
      swift_release();
      if (!v6)
      {
        if ((v4 & 0x8000000000000000) == 0)
        {
          if (*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10) > v4)
          {
            uint64_t v27 = *(void *)(v5 + 8 * v4 + 32);
            swift_retain();
            if (!*(void *)(v27 + 56)) {
              goto LABEL_37;
            }
            goto LABEL_36;
          }
LABEL_67:
          __break(1u);
          goto LABEL_68;
        }
        goto LABEL_64;
      }
      if (*(void *)(MEMORY[0x24C523D60](v4, v5) + 56))
      {
LABEL_36:
        swift_retain();
        swift_release();
        swift_weakAssign();
      }
LABEL_37:
      swift_release();
      specialized static ViewGraph.current.getter();
      uint64_t v19 = AGCreateWeakAttribute();
      type metadata accessor for DynamicAnimationListener();
      uint64_t v5 = swift_allocObject();
      swift_weakInit();
      *(void *)(v5 + 32) = 0;
      swift_weakAssign();
      swift_retain();
      swift_release();
      *(void *)(v5 + 24) = v19;
      swift_release();
      uint64_t v20 = *(void *)(v2 + 144);
      if ((v20 & 0xC000000000000001) != 0) {
        goto LABEL_57;
      }
      if ((v4 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (*(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10) > v4)
      {
        uint64_t v21 = *(void *)(v20 + 8 * v4 + 32);
        swift_retain();
        goto LABEL_41;
      }
      __break(1u);
LABEL_60:
      swift_once();
LABEL_42:
      unsigned __int8 v23 = static Update.actions;
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unsigned __int8 v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23[2] + 1, 1, v23);
      }
      unint64_t v25 = v23[2];
      unint64_t v24 = v23[3];
      if (v25 >= v24 >> 1) {
        unsigned __int8 v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v24 > 1), v25 + 1, 1, v23);
      }
      v23[2] = v25 + 1;
      double v26 = &v23[2 * v25];
      void v26[4] = thunk for @escaping @callee_guaranteed () -> ()partial apply;
      v26[5] = v4;
      static Update.actions = v23;
      swift_bridgeObjectRelease();
      static Update.end()();
      swift_release_n();
      return 0;
    case 2:
      if (v6)
      {
        uint64_t v14 = MEMORY[0x24C523D60](v4, v5);
      }
      else
      {
        if ((v4 & 0x8000000000000000) != 0) {
          goto LABEL_55;
        }
        if (*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10) <= v4) {
          goto LABEL_56;
        }
        uint64_t v14 = *(void *)(v5 + 8 * v4 + 32);
        swift_retain();
      }
      uint64_t v15 = *(void *)(v14 + 56);
      swift_retain();
      swift_release();
      if (v15)
      {
        uint64_t v16 = *(void *)(v15 + 32);
        swift_release();
        if (v16) {
          return 0;
        }
LABEL_20:
        specialized DynamicContainerInfo.eraseItem(at:)(v4);
        return 1;
      }
      else
      {
LABEL_68:
        __break(1u);
LABEL_69:
        uint64_t result = _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      return result;
    case 3:
      return result;
    default:
      goto LABEL_69;
  }
}

Swift::Int specialized Array.subscript.setter(Swift::Int result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  Swift::Int v11 = result;
  uint64_t v12 = *v6;
  unint64_t v13 = (unint64_t)*v6 >> 62;
  if (!v13)
  {
    if (*(void *)((*v6 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a5) {
      goto LABEL_3;
    }
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v22 = a2;
  swift_bridgeObjectRetain();
  uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  a2 = v22;
  if (v23 < a5) {
    goto LABEL_29;
  }
LABEL_3:
  if (a5 < 0)
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  uint64_t v14 = a2;
  if (v13)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v15 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v15 < (uint64_t)a6) {
    goto LABEL_31;
  }
  if ((a6 & 0x8000000000000000) != 0)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  uint64_t v16 = v11;
  if ((v12 & 0xC000000000000001) == 0) {
    goto LABEL_15;
  }
  if (a6 < a5)
  {
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (a5 != a6)
  {
    if (a5 >= a6)
    {
LABEL_35:
      __break(1u);
      return result;
    }
    type metadata accessor for DynamicContainer.ItemInfo();
    uint64_t result = a5;
    do
    {
      Swift::Int v17 = result + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(result);
      uint64_t result = v17;
    }
    while (a6 != v17);
  }
LABEL_15:
  if (v13)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.subscript.getter();
    uint64_t v18 = v20;
    uint64_t v19 = v21;
    swift_bridgeObjectRelease();
    uint64_t result = swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v18 = (v12 & 0xFFFFFFFFFFFFFF8) + 32;
    uint64_t v19 = a5;
  }
  if (v18 + 8 * v19 != v14 + 8 * a3) {
    goto LABEL_19;
  }
  if ((uint64_t)(a4 >> 1) < a3) {
    goto LABEL_34;
  }
  if (a5 != a3 || a4 >> 1 != a6)
  {
LABEL_19:
    return specialized Array.replaceSubrange<A>(_:with:)(a5, a6, v16, v14, a3, a4);
  }

  return swift_unknownObjectRelease();
}

uint64_t type metadata accessor for DynamicAnimationListener()
{
  return self;
}

void specialized DynamicContainerInfo.eraseItem(at:)(unint64_t a1)
{
  unint64_t v4 = (void *)v1;
  uint64_t v7 = (unint64_t *)(v1 + 144);
  uint64_t v6 = *(void *)(v1 + 144);
  if ((v6 & 0xC000000000000001) != 0)
  {
    uint64_t v8 = MEMORY[0x24C523D60](a1);
  }
  else
  {
    if ((a1 & 0x8000000000000000) != 0)
    {
      __break(1u);
      goto LABEL_20;
    }
    if (*(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a1)
    {
      __break(1u);
      goto LABEL_31;
    }
    uint64_t v8 = *(void *)(v6 + 8 * a1 + 32);
    swift_retain();
  }
  swift_beginAccess();
  id v2 = (id)*(unsigned __int8 *)(v8 + 84);
  swift_release();
  switch((unint64_t)v2)
  {
    case 1uLL:
      break;
    case 2uLL:
      --v4[21];
      break;
    default:
      goto LABEL_40;
  }
  uint64_t v3 = v4[22];
  unint64_t v1 = v4[18];
  if ((v1 & 0xC000000000000001) == 0)
  {
    if ((a1 & 0x8000000000000000) == 0)
    {
      if (*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10) > a1)
      {
        id v2 = *(id *)(*(void *)(v1 + 8 * a1 + 32) + 16);
        if ((v3 & 0x8000000000000000) == 0) {
          goto LABEL_11;
        }
        goto LABEL_21;
      }
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
LABEL_20:
  id v2 = *(id *)(MEMORY[0x24C523D60](a1, v1) + 16);
  swift_unknownObjectRelease();
  unint64_t v1 = *v7;
  if ((v3 & 0x8000000000000000) == 0)
  {
LABEL_11:
    if ((v1 & 0xC000000000000001) == 0)
    {
      if ((a1 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10) > a1)
      {
        uint64_t v9 = *(void *)(v1 + 8 * a1 + 32);
        uint64_t v10 = swift_retain();
LABEL_15:
        double v11 = MEMORY[0x270FA5388](v10);
        v12(partial apply for closure #1 in DynamicLayoutViewAdaptor.removeItemLayout(uniqueId:itemLayout:), v11);
        if (*(void *)(v9 + 56)) {
          swift_weakAssign();
        }
        specialized Array.remove(at:)(a1);
        swift_release();
        uint64_t v13 = swift_release();
        MEMORY[0x270FA5388](v13);
        AGSubgraphApply();
        AGSubgraphInvalidate();
        goto LABEL_29;
      }
      __break(1u);
      goto LABEL_36;
    }
LABEL_33:
    uint64_t v10 = MEMORY[0x24C523D60](a1, v1);
    uint64_t v9 = v10;
    goto LABEL_15;
  }
LABEL_21:
  if ((v1 & 0xC000000000000001) != 0)
  {
LABEL_36:
    uint64_t v14 = MEMORY[0x24C523D60](a1, v1);
LABEL_25:
    specialized Array.remove(at:)(a1);
    swift_release();
    *(_DWORD *)(v14 + 72) = 0;
    ++*(_DWORD *)(v14 + 80);
    swift_beginAccess();
    *(unsigned char *)(v14 + 84) = 3;
    if (*(void *)(v14 + 56)) {
      swift_weakAssign();
    }
    *(void *)(v14 + 56) = 0;
    swift_release();
    uint64_t v15 = swift_retain();
    MEMORY[0x24C522D60](v15);
    if (*(void *)((*v7 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((*v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_28;
    }
    goto LABEL_38;
  }
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_38:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_28:
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_release();
    ++v4[22];
    AGSubgraphApply();
    AGSubgraphRemoveChild();
LABEL_29:

    return;
  }
  if (*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10) > a1)
  {
    uint64_t v14 = *(void *)(v1 + 8 * a1 + 32);
    swift_retain();
    goto LABEL_25;
  }
  __break(1u);
LABEL_40:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized Array.remove(at:)(unint64_t a1)
{
  uint64_t v3 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *unint64_t v1 = v3;
  if (!isUniquelyReferenced_nonNull_bridgeObject || v3 < 0 || (v3 & 0x4000000000000000) != 0)
  {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
    *unint64_t v1 = v3;
  }
  uint64_t v5 = v3 & 0xFFFFFFFFFFFFFF8;
  unint64_t v6 = *(void *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v7 = v6 - 1;
    uint64_t v8 = v6 - 1 - a1;
    if (v8 >= 0)
    {
      uint64_t v9 = v5 + 8 * a1;
      uint64_t v10 = *(void *)(v9 + 32);
      memmove((void *)(v9 + 32), (const void *)(v9 + 40), 8 * v8);
      *(void *)(v5 + 16) = v7;
      specialized Array._endMutation()();
      return v10;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  void **v1;
  void *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t result;

  uint64_t v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
  }
  unint64_t v4 = v3[2];
  if (v4 <= a1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = v4 - 1;
    unint64_t v6 = v4 - 1 - a1;
    if (v6 >= 0)
    {
      unint64_t v7 = &v3[2 * a1];
      uint64_t v8 = v7[4];
      memmove(v7 + 4, v7 + 6, 16 * v6);
      v3[2] = v5;
      *unint64_t v1 = v3;
      return v8;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  void **v1;
  void *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t result;

  uint64_t v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
  }
  unint64_t v4 = v3[2];
  if (v4 <= a1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = v4 - 1;
    unint64_t v6 = v4 - 1 - a1;
    if (v6 >= 0)
    {
      unint64_t v7 = &v3[2 * a1];
      uint64_t v8 = v7[4];
      memmove(v7 + 4, v7 + 6, 16 * v6);
      v3[2] = v5;
      *unint64_t v1 = v3;
      return v8;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  void **v1;
  void *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t result;

  uint64_t v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
  }
  unint64_t v4 = v3[2];
  if (v4 <= a1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = v4 - 1;
    unint64_t v6 = v4 - 1 - a1;
    if (v6 >= 0)
    {
      unint64_t v7 = &v3[3 * a1];
      uint64_t v8 = v7[4];
      memmove(v7 + 4, v7 + 7, 24 * v6);
      v3[2] = v5;
      *unint64_t v1 = v3;
      return v8;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized Array.remove(at:)(a1, (uint64_t (*)(uint64_t))specialized _ArrayBuffer._consumeAndCreateNew());
}

{
  return specialized Array.remove(at:)(a1, (uint64_t (*)(uint64_t))specialized _ArrayBuffer._consumeAndCreateNew());
}

{
  void **v1;
  void *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t result;

  uint64_t v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
  }
  unint64_t v4 = v3[2];
  if (v4 <= a1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = v4 - 1;
    unint64_t v6 = v4 - 1 - a1;
    if (v6 >= 0)
    {
      unint64_t v7 = &v3[4 * a1];
      uint64_t v8 = v7[4];
      memmove(v7 + 4, v7 + 8, 32 * v6);
      v3[2] = v5;
      *unint64_t v1 = v3;
      return v8;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized Array.remove(at:)(a1, (uint64_t (*)(uint64_t))specialized _ArrayBuffer._consumeAndCreateNew());
}

void specialized _ArrayBuffer._consumeAndCreateNew()(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }

  JUMPOUT(0x24C523D70);
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<UInt32>, MEMORY[0x263F8E8F8], MEMORY[0x263F8E0F8]);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 29;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 2);
      uint64_t v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (char *)MEMORY[0x263F8EE78];
      uint64_t v13 = (char *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 32]) {
          memmove(v13, a4 + 32, 4 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<MatchedGeometryScope.Frame.View>, (uint64_t)&type metadata for MatchedGeometryScope.Frame.View, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 28);
      uint64_t v12 = v10 + 32;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[28 * v8 + 32]) {
          memmove(v12, a4 + 32, 28 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (char *)MEMORY[0x263F8EE78];
      uint64_t v12 = (char *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Float>, MEMORY[0x263F8D5C8], MEMORY[0x263F8E0F8]);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 29;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 2);
      uint64_t v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (char *)MEMORY[0x263F8EE78];
      uint64_t v13 = (char *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 32]) {
          memmove(v13, a4 + 32, 4 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<StrongHash>, (uint64_t)&type metadata for StrongHash, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 20);
      uint64_t v12 = v10 + 32;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[20 * v8 + 32]) {
          memmove(v12, a4 + 32, 20 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (char *)MEMORY[0x263F8EE78];
      uint64_t v12 = (char *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ContentTransition.Effect>, (uint64_t)&type metadata for ContentTransition.Effect, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 36);
      uint64_t v12 = v10 + 32;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[36 * v8 + 32]) {
          memmove(v12, a4 + 32, 36 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (char *)MEMORY[0x263F8EE78];
      uint64_t v12 = (char *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_DisplayList_Identity>, (uint64_t)&type metadata for _DisplayList_Identity, MEMORY[0x263F8E0F8]);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 29;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 2);
      uint64_t v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (char *)MEMORY[0x263F8EE78];
      uint64_t v13 = (char *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 32]) {
          memmove(v13, a4 + 32, 4 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  int64_t v12;
  char *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<UInt16>, MEMORY[0x263F8E888], MEMORY[0x263F8E0F8]);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 31;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = v12 & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (char *)MEMORY[0x263F8EE78];
      uint64_t v13 = (char *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 32]) {
          memmove(v13, a4 + 32, 2 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<Range<Int>>();
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t specialized BidirectionalCollection<>.insertionSort(by:)(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)result;
  unint64_t v3 = *(void *)(*(void *)result + 16);
  if (v3 > 1)
  {
    char v5 = (void *)result;
    uint64_t v6 = 0;
    unint64_t v7 = 1;
    while (v7 < v3)
    {
      uint64_t v8 = 0;
      unint64_t v9 = *(unsigned int *)(v2 + 4 * v7 + 32);
      while (1)
      {
        if (v7 + v8 - 1 >= *(void *)(v2 + 16))
        {
          __break(1u);
LABEL_29:
          __break(1u);
LABEL_30:
          __break(1u);
LABEL_31:
          __break(1u);
          goto LABEL_32;
        }
        unint64_t v10 = *(unsigned int *)(v2 + v6 + 4 * v8 + 32);
        uint64_t v11 = *(void *)(a2 + 144);
        if ((v11 & 0xC000000000000001) != 0)
        {
          uint64_t v12 = MEMORY[0x24C523D60](v9);
        }
        else
        {
          if (*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10) <= v9) {
            goto LABEL_29;
          }
          uint64_t v12 = swift_retain();
        }
        double v13 = *(double *)(v12 + 64);
        uint64_t result = swift_release();
        uint64_t v14 = *(void *)(a2 + 144);
        if ((v14 & 0xC000000000000001) != 0)
        {
          uint64_t v15 = MEMORY[0x24C523D60](v10);
        }
        else
        {
          if (*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10) <= v10) {
            goto LABEL_30;
          }
          uint64_t v15 = swift_retain();
        }
        double v16 = *(double *)(v15 + 64);
        uint64_t result = swift_release();
        if (v13 >= v16) {
          break;
        }
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v2);
          uint64_t v2 = result;
        }
        if (v7 + v8 >= *(void *)(v2 + 16)) {
          goto LABEL_31;
        }
        *(_DWORD *)(v2 + v6 + 4 * v8 + 36) = v10;
        *char v5 = v2;
        --v8;
        if (!(v7 + v8))
        {
          unint64_t v17 = 0;
          goto LABEL_24;
        }
      }
      if (!v8) {
        goto LABEL_4;
      }
      unint64_t v17 = v7 + v8;
LABEL_24:
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v2);
        uint64_t v2 = result;
      }
      if (v17 >= *(void *)(v2 + 16)) {
        goto LABEL_33;
      }
      *(_DWORD *)(v2 + 4 * v17 + 32) = v9;
      *char v5 = v2;
LABEL_4:
      ++v7;
      unint64_t v3 = *(void *)(v2 + 16);
      v6 += 4;
      if (v7 == v3) {
        return result;
      }
    }
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for StateObject()
{
  return __swift_instantiateGenericMetadata();
}

void _ProposedSize.inset(by:)(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  double v6 = *(double *)v5;
  char v7 = *(unsigned char *)(v5 + 8);
  char v8 = *(unsigned char *)(v5 + 24);
  if ((v7 & 1) == 0)
  {
    double v9 = v6 - (a3 + a5);
    if (v9 < 0.0) {
      double v6 = 0.0;
    }
    else {
      double v6 = v9;
    }
  }
  double v10 = *(double *)(v5 + 16);
  if ((*(unsigned char *)(v5 + 24) & 1) == 0)
  {
    double v11 = v10 - (a2 + a4);
    double v10 = 0.0;
    if (v11 >= 0.0) {
      double v10 = v11;
    }
  }
  *(double *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  *(double *)(a1 + 16) = v10;
  *(unsigned char *)(a1 + 24) = v8;
}

uint64_t StoredLocation.__allocating_init(initialValue:host:signal:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = specialized StoredLocation.__allocating_init(initialValue:host:signal:)(a1, a2, a3);
  swift_release();
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v3 + 232) - 8) + 8))(a1);
  return v5;
}

uint64_t Binding.init<A>(_:keyPath:isolation:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = *(void *)(*a2 + *MEMORY[0x263F8E100] + 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v12 = (char *)v15 - v11;
  swift_unknownObjectRetain();
  swift_retain();
  swift_unknownObjectRetain();
  ObjectLocation.get()(a1, (uint64_t)a2, a3, v10, (uint64_t)v12);
  type metadata accessor for ObjectLocation();
  swift_getWitnessTable();
  type metadata accessor for LocationBox();
  v15[0] = a1;
  v15[1] = a2;
  _OWORD v15[2] = a3;
  v15[3] = a4;
  swift_unknownObjectRetain();
  swift_retain();
  swift_unknownObjectRetain();
  double v13 = (uint64_t *)LocationBox.__allocating_init(_:)((uint64_t)v15);
  swift_unknownObjectRelease_n();
  swift_release_n();
  swift_unknownObjectRelease_n();
  return Binding.init(value:location:)((uint64_t)v12, v13, a5);
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v8 = ~v7;
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v10 = -v7;
  uint64_t v47 = a1;
  uint64_t v48 = a1 + 64;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  else {
    uint64_t v11 = -1;
  }
  uint64_t v49 = v8;
  uint64_t v50 = 0;
  uint64_t v51 = v11 & v9;
  uint64_t v52 = a2;
  uint64_t v53 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  specialized LazyMapSequence.Iterator.next()((uint64_t)&v45);
  uint64_t v12 = v45;
  if (!v45) {
    goto LABEL_26;
  }
  outlined init with take of Any(v46, v44);
  double v13 = *(void **)a5;
  unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(v12);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  char v19 = v14;
  if (v13[3] >= v18)
  {
    if (a4)
    {
      if (v14) {
        goto LABEL_12;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if (v19) {
        goto LABEL_12;
      }
    }
LABEL_14:
    uint64_t v23 = *(void **)a5;
    *(void *)(*(void *)a5 + 8 * (v15 >> 6) + 64) |= 1 << v15;
    *(void *)(v23[6] + 8 * v15) = v12;
    outlined init with take of Any(v44, (_OWORD *)(v23[7] + 32 * v15));
    uint64_t v24 = v23[2];
    BOOL v25 = __OFADD__(v24, 1);
    uint64_t v26 = v24 + 1;
    if (v25)
    {
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    v23[2] = v26;
LABEL_16:
    specialized LazyMapSequence.Iterator.next()((uint64_t)&v45);
    for (i = v45; v45; i = v45)
    {
      outlined init with take of Any(v46, v44);
      uint64_t v30 = *(void **)a5;
      unint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)(i);
      uint64_t v33 = v30[2];
      BOOL v34 = (v32 & 1) == 0;
      BOOL v25 = __OFADD__(v33, v34);
      uint64_t v35 = v33 + v34;
      if (v25) {
        goto LABEL_27;
      }
      char v36 = v32;
      if (v30[3] < v35)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v35, 1);
        unint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)(i);
        if ((v36 & 1) != (v37 & 1)) {
          goto LABEL_29;
        }
      }
      if (v36)
      {
        uint64_t v28 = 32 * v31;
        outlined init with copy of Any(*(void *)(*(void *)a5 + 56) + 32 * v31, (uint64_t)v42);
        outlined init with copy of Any((uint64_t)v42, (uint64_t)v43);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);

        unint64_t v29 = (_OWORD *)(*(void *)(*(void *)a5 + 56) + v28);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
        outlined init with take of Any(v43, v29);
      }
      else
      {
        long long v38 = *(void **)a5;
        *(void *)(*(void *)a5 + 8 * (v31 >> 6) + 64) |= 1 << v31;
        *(void *)(v38[6] + 8 * v31) = i;
        outlined init with take of Any(v44, (_OWORD *)(v38[7] + 32 * v31));
        uint64_t v39 = v38[2];
        BOOL v25 = __OFADD__(v39, 1);
        uint64_t v40 = v39 + 1;
        if (v25) {
          goto LABEL_28;
        }
        v38[2] = v40;
      }
      specialized LazyMapSequence.Iterator.next()((uint64_t)&v45);
    }
LABEL_26:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of Set<EventID>.Iterator._Variant();
    return swift_release();
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, a4 & 1);
  uint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v12);
  if ((v19 & 1) == (v21 & 1))
  {
    unint64_t v15 = v20;
    if ((v19 & 1) == 0) {
      goto LABEL_14;
    }
LABEL_12:
    outlined init with copy of Any(*(void *)(*(void *)a5 + 56) + 32 * v15, (uint64_t)v42);
    outlined init with copy of Any((uint64_t)v42, (uint64_t)v43);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);

    uint64_t v22 = (_OWORD *)(*(void *)(*(void *)a5 + 56) + 32 * v15);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    outlined init with take of Any(v43, v22);
    goto LABEL_16;
  }
LABEL_29:
  type metadata accessor for NSAttributedStringKey(0);
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  _OWORD *v22;
  void *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  void *i;
  _OWORD *v28;
  void *v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  _OWORD v42[2];
  _OWORD v43[2];
  void *v44;
  _OWORD v45[2];
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v8 = ~v7;
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v10 = -v7;
  BOOL v46 = a1;
  uint64_t v47 = a1 + 64;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  else {
    uint64_t v11 = -1;
  }
  uint64_t v48 = v8;
  uint64_t v49 = 0;
  uint64_t v50 = v11 & v9;
  uint64_t v51 = a2;
  uint64_t v52 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  specialized LazyMapSequence.Iterator.next()((uint64_t)&v44);
  uint64_t v12 = v44;
  if (!v44) {
    goto LABEL_27;
  }
  outlined init with take of Any(v45, v43);
  double v13 = *(void **)a5;
  unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(v12);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  char v19 = v14;
  if (v13[3] >= v18)
  {
    if (a4)
    {
      if (v14) {
        goto LABEL_12;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if (v19) {
        goto LABEL_12;
      }
    }
LABEL_14:
    uint64_t v23 = *(void **)a5;
    *(void *)(*(void *)a5 + 8 * (v15 >> 6) + 64) |= 1 << v15;
    *(void *)(v23[6] + 8 * v15) = v12;
    outlined init with take of Any(v43, (_OWORD *)(v23[7] + 32 * v15));
    uint64_t v24 = v23[2];
    BOOL v25 = __OFADD__(v24, 1);
    uint64_t v26 = v24 + 1;
    if (v25)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    v23[2] = v26;
LABEL_16:
    specialized LazyMapSequence.Iterator.next()((uint64_t)&v44);
    for (i = v44; v44; i = v44)
    {
      outlined init with take of Any(v45, v43);
      unint64_t v29 = *(void **)a5;
      unint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)(i);
      char v32 = v29[2];
      uint64_t v33 = (v30 & 1) == 0;
      BOOL v34 = v32 + v33;
      if (__OFADD__(v32, v33)) {
        goto LABEL_28;
      }
      uint64_t v35 = v30;
      if (v29[3] < v34)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v34, 1);
        char v36 = specialized __RawDictionaryStorage.find<A>(_:)(i);
        if ((v35 & 1) != (v37 & 1)) {
          goto LABEL_30;
        }
        unint64_t v31 = v36;
      }
      if (v35)
      {
        outlined init with copy of Any((uint64_t)v43, (uint64_t)v42);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);

        uint64_t v28 = (_OWORD *)(*(void *)(*(void *)a5 + 56) + 32 * v31);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
        outlined init with take of Any(v42, v28);
      }
      else
      {
        long long v38 = *(void **)a5;
        *(void *)(*(void *)a5 + 8 * (v31 >> 6) + 64) |= 1 << v31;
        *(void *)(v38[6] + 8 * v31) = i;
        outlined init with take of Any(v43, (_OWORD *)(v38[7] + 32 * v31));
        uint64_t v39 = v38[2];
        BOOL v25 = __OFADD__(v39, 1);
        uint64_t v40 = v39 + 1;
        if (v25) {
          goto LABEL_29;
        }
        v38[2] = v40;
      }
      specialized LazyMapSequence.Iterator.next()((uint64_t)&v44);
    }
LABEL_27:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of Set<EventID>.Iterator._Variant();
    return swift_release();
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, a4 & 1);
  uint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v12);
  if ((v19 & 1) == (v21 & 1))
  {
    unint64_t v15 = v20;
    if ((v19 & 1) == 0) {
      goto LABEL_14;
    }
LABEL_12:
    outlined init with copy of Any((uint64_t)v43, (uint64_t)v42);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);

    uint64_t v22 = (_OWORD *)(*(void *)(*(void *)a5 + 56) + 32 * v15);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    outlined init with take of Any(v42, v22);
    goto LABEL_16;
  }
LABEL_30:
  type metadata accessor for NSAttributedStringKey(0);
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized LazyMapSequence.Iterator.next()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  int64_t v5 = v1[3];
  int64_t v7 = v5;
  unint64_t v8 = v1[4];
  if (v8)
  {
    uint64_t v9 = (v8 - 1) & v8;
    unint64_t v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    uint64_t v11 = *(void **)(*(void *)(v3 + 48) + 8 * v10);
    outlined init with copy of Any(*(void *)(v3 + 56) + 32 * v10, (uint64_t)v24 + 8);
    *(void *)&v24[0] = v11;
    id v12 = v11;
    goto LABEL_23;
  }
  int64_t v13 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  int64_t v14 = (unint64_t)(v6 + 64) >> 6;
  if (v13 < v14)
  {
    unint64_t v15 = *(void *)(v4 + 8 * v13);
    if (v15)
    {
LABEL_7:
      uint64_t v9 = (v15 - 1) & v15;
      unint64_t v10 = __clz(__rbit64(v15)) + (v13 << 6);
      int64_t v7 = v13;
      goto LABEL_3;
    }
    int64_t v16 = v5 + 2;
    int64_t v7 = v5 + 1;
    if (v5 + 2 < v14)
    {
      unint64_t v15 = *(void *)(v4 + 8 * v16);
      if (v15)
      {
LABEL_10:
        int64_t v13 = v16;
        goto LABEL_7;
      }
      int64_t v7 = v5 + 2;
      if (v5 + 3 < v14)
      {
        unint64_t v15 = *(void *)(v4 + 8 * (v5 + 3));
        if (v15)
        {
          int64_t v13 = v5 + 3;
          goto LABEL_7;
        }
        int64_t v16 = v5 + 4;
        int64_t v7 = v5 + 3;
        if (v5 + 4 < v14)
        {
          unint64_t v15 = *(void *)(v4 + 8 * v16);
          if (v15) {
            goto LABEL_10;
          }
          int64_t v13 = v5 + 5;
          int64_t v7 = v5 + 4;
          if (v5 + 5 < v14)
          {
            unint64_t v15 = *(void *)(v4 + 8 * v13);
            if (v15) {
              goto LABEL_7;
            }
            int64_t v7 = v14 - 1;
            int64_t v17 = v5 + 6;
            while (v14 != v17)
            {
              unint64_t v15 = *(void *)(v4 + 8 * v17++);
              if (v15)
              {
                int64_t v13 = v17 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  uint64_t v9 = 0;
  uint64_t v25 = 0;
  memset(v24, 0, sizeof(v24));
LABEL_23:
  *unint64_t v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  uint64_t v18 = (void (*)(_OWORD *))v1[5];
  uint64_t result = outlined init with take of (key: NSAttributedStringKey, value: Any)?((uint64_t)v24, (uint64_t)v22, (unint64_t *)&lazy cache variable for type metadata for (key: NSAttributedStringKey, value: Any)?, (uint64_t (*)(uint64_t))type metadata accessor for (key: NSAttributedStringKey, value: Any));
  if (*(void *)&v22[0])
  {
    v20[0] = v22[0];
    v20[1] = v22[1];
    uint64_t v21 = v23;
    v18(v20);
    return outlined destroy of (key: NSAttributedStringKey, value: Any)((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for (key: NSAttributedStringKey, value: Any));
  }
  else
  {
    *(void *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t (*v11)(int *);
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  int64_t v19;
  int v20;
  long long v21;
  uint64_t v22;

  uint64_t v3 = *v1;
  int64_t v5 = v1[3];
  uint64_t v4 = v1[4];
  uint64_t v6 = v5;
  if (v4)
  {
    int64_t v7 = (v4 - 1) & v4;
    unint64_t v8 = __clz(__rbit64(v4)) | (v5 << 6);
LABEL_3:
    uint64_t v9 = *(_DWORD *)(*(void *)(v3 + 48) + 4 * v8);
    unint64_t v10 = *(void *)(v3 + 56) + 24 * v8;
    uint64_t v11 = (uint64_t (*)(int *))v1[5];
    uint64_t v20 = v9;
    uint64_t v21 = *(_OWORD *)v10;
    id v12 = *(void *)(v10 + 16);
    v1[3] = v6;
    v1[4] = v7;
    uint64_t v22 = v12;
    uint64_t result = v11(&v20);
    *(unsigned char *)(a1 + 28) = 0;
    return result;
  }
  int64_t v14 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
  }
  else
  {
    unint64_t v15 = (unint64_t)(v1[2] + 64) >> 6;
    if (v14 < v15)
    {
      int64_t v16 = v1[1];
      int64_t v17 = *(void *)(v16 + 8 * v14);
      if (v17)
      {
LABEL_7:
        int64_t v7 = (v17 - 1) & v17;
        unint64_t v8 = __clz(__rbit64(v17)) + (v14 << 6);
        uint64_t v6 = v14;
        goto LABEL_3;
      }
      uint64_t v18 = v5 + 2;
      uint64_t v6 = v5 + 1;
      if (v5 + 2 < v15)
      {
        int64_t v17 = *(void *)(v16 + 8 * v18);
        if (v17)
        {
LABEL_10:
          int64_t v14 = v18;
          goto LABEL_7;
        }
        uint64_t v6 = v5 + 2;
        if (v5 + 3 < v15)
        {
          int64_t v17 = *(void *)(v16 + 8 * (v5 + 3));
          if (v17)
          {
            int64_t v14 = v5 + 3;
            goto LABEL_7;
          }
          uint64_t v18 = v5 + 4;
          uint64_t v6 = v5 + 3;
          if (v5 + 4 < v15)
          {
            int64_t v17 = *(void *)(v16 + 8 * v18);
            if (v17) {
              goto LABEL_10;
            }
            int64_t v14 = v5 + 5;
            uint64_t v6 = v5 + 4;
            if (v5 + 5 < v15)
            {
              int64_t v17 = *(void *)(v16 + 8 * v14);
              if (v17) {
                goto LABEL_7;
              }
              uint64_t v6 = v15 - 1;
              char v19 = v5 + 6;
              while (v15 != v19)
              {
                int64_t v17 = *(void *)(v16 + 8 * v19++);
                if (v17)
                {
                  int64_t v14 = v19 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    v1[3] = v6;
    v1[4] = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 24) = 0;
    *(unsigned char *)(a1 + 28) = 1;
  }
  return result;
}

uint64_t outlined init with take of (key: NSAttributedStringKey, value: Any)?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  type metadata accessor for _ContiguousArrayStorage<[Path?]>(0, a3, a4, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t _sSo21NSAttributedStringKeya3key_yp5valuetSgWObTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

id specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id v4 = *a1;
  outlined init with copy of Any((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
  *a2 = v4;

  return v4;
}

uint64_t outlined destroy of (key: NSAttributedStringKey, value: Any)(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void type metadata accessor for (key: NSAttributedStringKey, value: Any)()
{
  if (!lazy cache variable for type metadata for (key: NSAttributedStringKey, value: Any))
  {
    type metadata accessor for NSAttributedStringKey(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (key: NSAttributedStringKey, value: Any));
    }
  }
}

uint64_t ProjectedLocation.init(location:projection:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a5, a1);
  uint64_t v8 = type metadata accessor for ProjectedLocation();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(v8 + 52), a2, a4);
}

uint64_t Binding.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v8 = a1;
  uint64_t v5 = type metadata accessor for WritableKeyPath();
  uint64_t WitnessTable = swift_getWitnessTable();
  return Binding.projecting<A>(_:)((uint64_t)&v8, a2, v5, WitnessTable, a3);
}

uint64_t Binding.projecting<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v6 = v5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  double v13 = MEMORY[0x270FA5388](AssociatedTypeWitness - 8);
  unint64_t v15 = (char *)&v21 - v14;
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(a4 + 32))(v6 + *(int *)(a2 + 32), a3, a4, v13);
  int64_t v16 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(**(void **)(v6 + 8) + 136))(a1, a3, a4);
  uint64_t v17 = *v16;
  *(void *)a5 = *(void *)v6;
  *((void *)a5 + 1) = v16;
  uint64_t v18 = *(void *)(v17 + 88);
  uint64_t v19 = type metadata accessor for Binding();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(&a5[*(int *)(v19 + 32)], v15, v18);
  return swift_retain();
}

uint64_t Binding.Box.update(property:phase:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4 = v3;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v3;
  if (*v3)
  {
    swift_beginAccess();
    if (*(void *)(v10 + 16) == *(void *)(a1 + 8)) {
      goto LABEL_8;
    }
    uint64_t v22 = v3;
    int v21 = LocationBox.wasRead.getter();
  }
  else
  {
    uint64_t v22 = v3;
    int v21 = 0;
  }
  type metadata accessor for Binding.ScopedLocation();
  swift_getWitnessTable();
  type metadata accessor for LocationBox();
  uint64_t v11 = *(void *)(a1 + 8);
  id v12 = *(uint64_t (**)(uint64_t))(*(void *)v11 + 96);
  uint64_t v13 = swift_retain_n();
  char v14 = v12(v13);
  swift_release();
  uint64_t v23 = v11;
  char v24 = v14 & 1;
  uint64_t v15 = LocationBox.__allocating_init(_:)((uint64_t)&v23);
  swift_release();
  id v4 = v22;
  *uint64_t v22 = v15;
  if (v21) {
    LocationBox.wasRead.setter(1);
  }
  uint64_t v10 = v15;
LABEL_8:
  char v16 = LocationBox.update()((uint64_t)v9);
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = v10;
  uint64_t v17 = type metadata accessor for Binding();
  uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 24))(a1 + *(int *)(v17 + 32), v9, v6);
  if ((v16 & 1) == 0)
  {
    char v19 = 0;
    goto LABEL_12;
  }
  if (*v4)
  {
    char v19 = LocationBox.wasRead.getter();
LABEL_12:
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    return v19 & 1;
  }
  __break(1u);
  return result;
}

uint64_t StoredLocationBase.wasRead.getter()
{
  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t State.projectedValue.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v14 - v10;
  State.getValue(forReading:)(0, a1, (uint64_t)&v14 - v10);
  id v12 = *(uint64_t **)(v2 + *(int *)(a1 + 28));
  if (v12)
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v11, v5);
    Binding.init(value:location:)((uint64_t)v8, v12, a2);
  }
  else
  {
    static os_log_type_t.fault.getter();
    if (one-time initialization token for runtimeIssuesLog != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    static Binding.constant(_:)((uint64_t)v11, v5, a2);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
  }
  return swift_retain();
}

uint64_t State.getValue(forReading:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v7 = *(void *)(v3 + *(int *)(a2 + 28));
  if (!v7)
  {
LABEL_8:
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 16);
    return v10(a3, v4);
  }
  uint64_t v9 = one-time initialization token for sharedGraph;
  swift_retain();
  if (v9 != -1) {
    swift_once();
  }
  if (AGGraphGetCounter())
  {
    if (a1) {
      (*(void (**)(uint64_t))(*(void *)v7 + 104))(1);
    }
    swift_release();
    goto LABEL_8;
  }
  (*(void (**)(void))(*(void *)v7 + 120))();

  return swift_release();
}

uint64_t StoredLocationBase.wasRead.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 24) = result;
  return result;
}

uint64_t Binding.init(value:location:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *a2;
  *a3 = 0;
  a3[1] = a2;
  uint64_t v5 = *(void *)(v4 + 88);
  uint64_t v6 = (char *)a3 + *(int *)(type metadata accessor for Binding() + 32);
  uint64_t v7 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32);

  return v7(v6, a1, v5);
}

uint64_t type metadata accessor for Binding()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for LocationBox()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t LocationBox.wasRead.getter()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  LOBYTE(v1) = (*(uint64_t (**)(void))(*(void *)(v1 + 176) + 24))(*(void *)(v1 + 168));
  swift_endAccess();
  return v1 & 1;
}

uint64_t protocol witness for Location.wasRead.getter in conformance Binding<A>.ScopedLocation()
{
  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t protocol witness for Projection.get(base:) in conformance WritableKeyPath<A, B>()
{
  return WritableKeyPath.get(base:)();
}

uint64_t WritableKeyPath.get(base:)()
{
  return swift_getAtKeyPath();
}

uint64_t StoredLocationBase.get()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 168);
  uint64_t v4 = type metadata accessor for StoredLocationBase.Data();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v9 - v6;
  StoredLocationBase.data.getter((uint64_t)&v9 - v6);
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v3 - 8) + 16))(a1, v7, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t StoredLocationBase.data.getter@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  uint64_t v4 = type metadata accessor for StoredLocationBase.Data();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = (char *)v3 + ((*(unsigned __int8 *)(v5 + 80) + 20) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 16))(a1, v6, v4);
  $defer #1 <A>() in AtomicBox.wrappedValue.getter(v3 + 4);
  return swift_release();
}

uint64_t LocationBox.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  LocationBox.init(_:)(a1);
  return v2;
}

uint64_t *LocationBox.init(_:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 192);
  swift_retain();
  unint64_t v5 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v6 = *(void *)(v3 + 168);
  type metadata accessor for AtomicBuffer<LocationProjectionCache>();
  uint64_t v7 = swift_allocObject();
  *(_DWORD *)(v7 + 16) = 0;
  *(void *)(v7 + 24) = v5;
  *(uint64_t *)((char *)v1 + v4) = v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))((uint64_t)v1 + *(void *)(*v1 + 184), a1, v6);
  swift_release();
  return v1;
}

uint64_t specialized StoredLocation.__allocating_init(initialValue:host:signal:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized StoredLocation.init(initialValue:host:signal:)(a1, a2, a3);
}

uint64_t specialized StoredLocationBase.init(initialValue:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 168);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)&v15 - v5;
  uint64_t v7 = type metadata accessor for StoredLocationBase.Data();
  uint64_t v8 = v7 - 8;
  double v9 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v15 - v10;
  *(unsigned char *)(v1 + 24) = 0;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16))(v6, a1, v3, v9);
  swift_retain();
  uint64_t v12 = Array.init()();
  unint64_t v13 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v11, v6, v3);
  *(void *)&v11[*(int *)(v8 + 36)] = v12;
  *(void *)&v11[*(int *)(v8 + 40)] = v13;
  swift_beginAccess();
  property wrapper backing initializer of StoredLocationBase.data((uint64_t)v11, (uint64_t *)(v1 + 16));
  swift_endAccess();
  swift_release();
  return AnyLocation.init()();
}

uint64_t AnyLocation.init()()
{
  return v0;
}

uint64_t property wrapper backing initializer of StoredLocationBase.data@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for StoredLocationBase.Data();
  uint64_t v5 = *(void *)(v4 - 8);
  double v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v10 - v7;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))((char *)&v10 - v7, a1, v4, v6);
  AtomicBox.init(wrappedValue:)((uint64_t)v8, v4, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
}

uint64_t initializeWithCopy for StoredLocationBase.Data(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  uint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v7 = *v8;
  *(void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t AtomicBox.init(wrappedValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  type metadata accessor for AtomicBuffer();
  uint64_t v6 = static AtomicBuffer.allocate(value:)(a1);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  *a3 = v6;
  return result;
}

uint64_t destroy for StoredLocationBase.Data(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for AtomicBuffer()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static AtomicBuffer.allocate(value:)(uint64_t a1)
{
  uint64_t v3 = static ManagedBuffer.create(minimumCapacity:makingHeaderWith:)();
  closure #2 in static AtomicBuffer.allocate(value:)(v3+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v1 + class metadata base offset for AtomicBuffer) - 8) + 80)+ 20) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v1+ class metadata base offset for AtomicBuffer)- 8)+ 80)), a1, *(void *)(v1 + class metadata base offset for AtomicBuffer));
  return v3;
}

uint64_t closure #2 in static AtomicBuffer.allocate(value:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v5 = MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v8 + 16))(v7, v5);
  return _sSpsRi_zrlE10initialize2toyxn_tF((uint64_t)v7, a1, a3);
}

uint64_t specialized StoredLocation.init(initialValue:host:signal:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_weakInit();
  *(void *)(v3 + 40) = 0;
  swift_weakAssign();
  *(void *)(v3 + 40) = a3;

  return specialized StoredLocationBase.init(initialValue:)(a1);
}

void type metadata accessor for AtomicBuffer<LocationProjectionCache>()
{
  if (!lazy cache variable for type metadata for AtomicBuffer<LocationProjectionCache>)
  {
    unint64_t v0 = type metadata accessor for AtomicBuffer();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<LocationProjectionCache>);
    }
  }
}

uint64_t StoredLocationBase.projecting<A>(_:)(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  double v5 = *(os_unfair_lock_s **)(v2 + 16);
  type metadata accessor for StoredLocationBase.Data();
  swift_retain();
  os_unfair_lock_lock(v5 + 4);
  uint64_t v6 = type metadata accessor for StoredLocationBase();
  swift_getWitnessTable();
  uint64_t v7 = LocationProjectionCache.reference<A, B>(for:on:)(a1, (uint64_t)&v9, a2, v6);
  $defer #1 <A>() in AtomicBox.wrappedValue.modify(v5 + 4);
  swift_release();
  return v7;
}

uint64_t type metadata accessor for StoredLocationBase()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t LocationProjectionCache.reference<A, B>(for:on:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v42 = a2;
  uint64_t v40 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v41 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = v10;
  uint64_t v48 = v9;
  uint64_t v45 = v11;
  uint64_t v49 = v11;
  uint64_t v50 = v12;
  uint64_t v13 = type metadata accessor for ProjectedLocation();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v44 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v38 - v17;
  uint64_t v19 = *(void *)(a3 - 8);
  double v21 = MEMORY[0x270FA5388](v20);
  uint64_t v23 = (char *)&v38 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v24 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
  uint64_t v43 = a1;
  uint64_t v39 = v24;
  ((void (*)(char *, uint64_t, uint64_t, double))v24)(v23, a1, a3, v21);
  AnyHashable2.init<A>(_:)((uint64_t)v23, &v47);
  uint64_t v25 = v47;
  BOOL v46 = v4;
  uint64_t v26 = *v4;
  if (!*(void *)(v26 + 16))
  {
    uint64_t v47 = 0;
    LOBYTE(v48) = 1;
LABEL_10:
    outlined destroy of WeakBox<AnyLocationBase>?((uint64_t)&v47);
    goto LABEL_12;
  }
  uint64_t v27 = swift_retain();
  unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v27);
  if (v29)
  {
    outlined init with copy of WeakBox<AnyLocationBase>(*(void *)(v26 + 56) + 8 * v28, (uint64_t)&v47);
    LOBYTE(v48) = 0;
  }
  else
  {
    uint64_t v47 = 0;
    LOBYTE(v48) = 1;
  }
  swift_release();
  if (v48) {
    goto LABEL_10;
  }
  uint64_t Strong = swift_weakLoadStrong();
  outlined destroy of WeakBox<AnyLocationBase>?((uint64_t)&v47);
  if (!Strong)
  {
LABEL_12:
    uint64_t v33 = (uint64_t)v41;
    (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v41, v42, a4);
    v39(v23, v43, a3);
    ProjectedLocation.init(location:projection:)(v33, (uint64_t)v23, a4, a3, (uint64_t)v18);
    swift_getWitnessTable();
    type metadata accessor for LocationBox();
    uint64_t v34 = (uint64_t)v44;
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v44, v18, v13);
    uint64_t v35 = v14;
    uint64_t v32 = swift_allocObject();
    LocationBox.init(_:)(v34);
    swift_weakInit();
    uint64_t v36 = swift_weakAssign();
    outlined init with take of WeakBox<AnyLocationBase>(v36, (uint64_t)&v47);
    LOBYTE(v48) = 0;
    specialized Dictionary.subscript.setter((uint64_t)&v47, v25);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v18, v13);
    return v32;
  }
  uint64_t v38 = v14;
  swift_getAssociatedTypeWitness();
  type metadata accessor for AnyLocation();
  uint64_t v31 = swift_dynamicCastClass();
  if (!v31)
  {
    swift_release();
    uint64_t v14 = v38;
    goto LABEL_12;
  }
  uint64_t v32 = v31;
  swift_release();
  return v32;
}

uint64_t type metadata accessor for AnyLocation()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for ProjectedLocation()
{
  return swift_getGenericMetadata();
}

uint64_t outlined destroy of WeakBox<AnyLocationBase>?(uint64_t a1)
{
  type metadata accessor for WeakBox<AnyLocationBase>?(0, &lazy cache variable for type metadata for WeakBox<AnyLocationBase>?, 255, (uint64_t (*)(uint64_t))type metadata accessor for WeakBox<AnyLocationBase>, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for WeakBox<AnyLocationBase>?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v8 = a4(a3);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t type metadata accessor for Binding.ScopedLocation()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t outlined init with copy of WeakBox<AnyLocationBase>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for WeakBox<AnyLocationBase>(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of Text.Effect.InteractionMetrics(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t _s7SwiftUI4TextVAAE6EffectO18InteractionMetricsVWObTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void type metadata accessor for WeakBox<AnyLocationBase>(uint64_t a1)
{
}

uint64_t outlined init with take of WeakBox<AnyLocationBase>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for WeakBox<AnyLocationBase>(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t destroy for NamedCoordinateSpace(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 40) & 1) == 0) {
    return __swift_destroy_boxed_opaque_existential_1(a1);
  }
  return a1;
}

uint64_t initializeWithCopy for NamedCoordinateSpace(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 40))
  {
    long long v3 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v3;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v4;
    (**(void (***)(uint64_t))(v4 - 8))(a1);
    *(unsigned char *)(a1 + 40) = 0;
  }
  return a1;
}

uint64_t static Binding.ScopedLocation.== infix(_:_:)(uint64_t a1, int a2, uint64_t a3, int a4)
{
  return static AnyLocation.== infix(_:_:)(a1, a3) & ~(a2 ^ a4) & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnyLocation<A>(uint64_t *a1, uint64_t *a2)
{
  return static AnyLocation.== infix(_:_:)(*a1, *a2) & 1;
}

uint64_t static AnyLocation.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152))(a2) & 1;
}

uint64_t LocationBox.isEqual(to:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 168);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  unint64_t v9 = (char *)&v19 - v8;
  if (one-time initialization token for v5 != -1) {
    swift_once();
  }
  unsigned int v10 = static Semantics.v5;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC == 1)
  {
    if ((dyld_program_sdk_at_least() & 1) == 0)
    {
LABEL_7:
      char v11 = a1 == v1;
      return v11 & 1;
    }
  }
  else if (static Semantics.forced < v10)
  {
    goto LABEL_7;
  }
  uint64_t v12 = swift_dynamicCastClass();
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = v1 + *(void *)(*(void *)v1 + 184);
    swift_beginAccess();
    uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    v15(v9, v14, v3);
    uint64_t v16 = v13 + *(void *)(*(void *)v13 + 184);
    swift_beginAccess();
    v15(v6, v16, v3);
    char v11 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v17 = *(void (**)(char *, uint64_t))(v4 + 8);
    v17(v6, v3);
    v17(v9, v3);
  }
  else
  {
    char v11 = 0;
  }
  return v11 & 1;
}

uint64_t LocationBox.update()(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 168);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v11 - v6;
  uint64_t v8 = (uint64_t)v1 + *(void *)(v3 + 184);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  char v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 + 176) + 64))(a1, v4);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v9 & 1;
}

uint64_t initializeBufferWithCopyOfBuffer for Image.AntialiasedProvider(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  swift_retain();
  return a1;
}

uint64_t protocol witness for Location.update() in conformance Binding<A>.ScopedLocation(uint64_t a1)
{
  return Binding.ScopedLocation.update()(a1, *v1);
}

uint64_t Binding.ScopedLocation.update()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)a2 + 144))() & 1;
}

BOOL AnyLocation.isEqual(to:)(uint64_t a1)
{
  return v1 == a1;
}

uint64_t destroy for ObjectLocation()
{
  swift_unknownObjectRelease();
  swift_release();

  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for ObjectLocation(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_unknownObjectRetain();
  swift_retain();
  swift_unknownObjectRetain();
  return a1;
}

uint64_t StoredLocation.update()(uint64_t a1)
{
  if (AGWeakAttributeGetAttribute() == *MEMORY[0x263F288F8])
  {
    uint64_t v4 = 1;
    *(unsigned char *)(v1 + 24) = 1;
  }
  else
  {
    AGGraphGetValue();
    uint64_t v4 = v3 & 1;
  }
  StoredLocationBase.updateValue.getter(a1);
  return v4;
}

uint64_t destroy for FunctionalLocation()
{
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for FunctionalLocation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = v3;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t Location.update()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return 1;
}

{
  (*(void (**)(uint64_t, uint64_t))(a3 + 48))(a2, a3);
  return 1;
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@out ())(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t ObjectLocation.get()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  ObjectLocation.checkIsolation()(a1, a2, a3);
  uint64_t v11 = a1;
  swift_unknownObjectRetain();
  uint64_t v8 = (void (*)(unsigned char *, void))swift_readAtKeyPath();
  (*(void (**)(uint64_t))(*(void *)(a4 - 8) + 16))(a5);
  v8(v10, 0);
  return swift_unknownObjectRelease();
}

uint64_t ObjectLocation.checkIsolation()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for MainActor();
  uint64_t v9 = static MainActor.shared.getter();
  uint64_t result = swift_release();
  if (a3)
  {
    if (v9 == a3)
    {
      uint64_t result = pthread_main_np();
      if (!result)
      {
        uint64_t v22 = a2;
        type metadata accessor for ReferenceWritableKeyPath();
        swift_retain();
        uint64_t v11 = String.init<A>(describing:)();
        unint64_t v13 = v12;
        if (one-time initialization token for runtimeIssuesLog != -1) {
          swift_once();
        }
        id v14 = (id)static Log.runtimeIssuesLog;
        Logger.init(_:)();
        swift_bridgeObjectRetain();
        uint64_t v15 = Logger.logObject.getter();
        os_log_type_t v16 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v15, v16))
        {
          uint64_t v20 = v11;
          uint64_t v17 = (uint8_t *)swift_slowAlloc();
          uint64_t v18 = swift_slowAlloc();
          uint64_t v22 = v18;
          *(_DWORD *)uint64_t v17 = 136315138;
          swift_bridgeObjectRetain();
          uint64_t v21 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v13, &v22);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_245728000, v15, v16, "%s is isolated to the main actor. Accessing it via Binding from a different actor will cause undefined behaviors, and potential data races; This warning will become a runtime crash in a future version of SwiftUI.",
            v17,
            0xCu);
          swift_arrayDestroy();
          MEMORY[0x24C527CC0](v18, -1, -1);
          MEMORY[0x24C527CC0](v17, -1, -1);
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      }
    }
  }
  return result;
}

uint64_t closure #1 in ValueActionDispatcher.updateValue()@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, BOOL *a4@<X8>)
{
  uint64_t v18 = a1;
  uint64_t v19 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v11 = MEMORY[0x270FA5388](v10);
  unint64_t v13 = (char *)&v18 - v12;
  id v14 = *(void (**)(uint64_t, uint64_t, double))(a3 + 24);
  v14(a2, a3, v11);
  ((void (*)(uint64_t, uint64_t))v14)(a2, a3);
  swift_getAssociatedConformanceWitness();
  char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
  os_log_type_t v16 = *(void (**)(char *, uint64_t))(v7 + 8);
  v16(v9, AssociatedTypeWitness);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v16)(v13, AssociatedTypeWitness);
  *uint64_t v19 = (v15 & 1) == 0;
  return result;
}

uint64_t ProxyCodable.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t protocol witness for Location.get() in conformance ObjectLocation<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return ObjectLocation.get()(*v2, v2[1], v2[2], *(void *)(a1 + 24), a2);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Binding<A>.ScopedLocation(uint64_t a1, uint64_t a2)
{
  return static Binding.ScopedLocation.== infix(_:_:)(*(void *)a1, *(unsigned __int8 *)(a1 + 8), *(void *)a2, *(unsigned __int8 *)(a2 + 8));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ProjectedLocation<A, B>()
{
  return static ProjectedLocation.== infix(_:_:)();
}

uint64_t static ProjectedLocation.== infix(_:_:)()
{
  if (dispatch thunk of static Equatable.== infix(_:_:)())
  {
    type metadata accessor for ProjectedLocation();
    char v0 = dispatch thunk of static Equatable.== infix(_:_:)();
  }
  else
  {
    char v0 = 0;
  }
  return v0 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FunctionalLocation<A>(uint64_t *a1, uint64_t *a2)
{
  return static FunctionalLocation.== infix(_:_:)(*a1, a1[1], a1[2], a1[3], *a2, a2[1], a2[2], a2[3]) & 1;
}

uint64_t static FunctionalLocation.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  v13[0] = a1;
  v13[1] = a2;
  _OWORD v13[2] = a3;
  v13[3] = a4;
  v12[0] = a5;
  v12[1] = a6;
  void v12[2] = a7;
  v12[3] = a8;
  uint64_t v8 = type metadata accessor for FunctionalLocation.Functions();
  uint64_t v15 = v8;
  os_log_type_t v16 = v12;
  int v17 = 3;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v13, (uint64_t)closure #1 in compareValues<A>(_:_:options:)partial apply, (uint64_t)v14, v8, MEMORY[0x263F8E628], MEMORY[0x263F8D4F8], MEMORY[0x263F8E658], v9);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v11;
}

uint64_t type metadata accessor for FunctionalLocation.Functions()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t ProjectedLocation.update()(uint64_t a1, void *a2)
{
  uint64_t v3 = a2[4];
  uint64_t v4 = a2[2];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  double v7 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v9 = (char *)&v11 - v8;
  LOBYTE(v3) = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v3 + 64))((char *)&v11 - v8, v4, v3, v7);
  (*(void (**)(char *, void))(a2[5] + 32))(v9, a2[3]);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, AssociatedTypeWitness);
  return v3 & 1;
}

uint64_t protocol witness for Location.update() in conformance LocationBox<A>(uint64_t a1)
{
  return LocationBox.update()(a1) & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ObjectLocation<A, B>(uint64_t *a1, uint64_t *a2)
{
  return static ObjectLocation.== infix(_:_:)(*a1, a1[1], a1[2], a1[3], *a2, a2[1]) & 1;
}

uint64_t static ObjectLocation.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a1 != a5) {
    return 0;
  }
  type metadata accessor for AnyKeyPath();
  return MEMORY[0x24C523A30](a2, a6) & 1;
}

uint64_t outlined consume of Set<EventID>.Iterator._Variant()
{
  return swift_release();
}

uint64_t LocationBox.projecting<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  uint64_t v6 = *v2;
  uint64_t v10 = v2;
  double v7 = *(os_unfair_lock_s **)((char *)v2 + *(void *)(v5 + 192));
  swift_retain();
  os_unfair_lock_lock(v7 + 4);
  swift_getWitnessTable();
  uint64_t v8 = LocationProjectionCache.reference<A, B>(for:on:)(a1, (uint64_t)&v10, a2, v6);
  os_unfair_lock_unlock(v7 + 4);
  swift_release();
  return v8;
}

uint64_t protocol witness for Location.get() in conformance FunctionalLocation<A>()
{
  return thunk for @escaping @callee_guaranteed () -> (@out ())(*v0);
}

uint64_t type metadata accessor for ObjectLocation()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t ProjectedLocation.wasRead.getter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 24))(*(void *)(a1 + 16));
}

uint64_t protocol witness for Location.wasRead.getter in conformance LocationBox<A>()
{
  return LocationBox.wasRead.getter() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ZipLocation<A, B>()
{
  return static ZipLocation.== infix(_:_:)();
}

uint64_t static ZipLocation.== infix(_:_:)()
{
  return == infix<A, B>(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ConstantLocation<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return static ConstantLocation.== infix(_:_:)(a1, a2, *(void *)(a3 + 16), a4, a5, a6, a7, a8);
}

uint64_t static ConstantLocation.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _OWORD v9[2] = a3;
  v9[3] = a2;
  int v10 = 3;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)partial apply for closure #1 in compareValues<A>(_:_:options:), (uint64_t)v9, a3, MEMORY[0x263F8E628], MEMORY[0x263F8D4F8], MEMORY[0x263F8E658], a8);
  return v11;
}

__n128 __swift_memcpy80_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t ValueToScrollPosition.get(base:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  char v4 = *((unsigned char *)v2 + 16);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  _OWORD v11[2] = v5;
  uint64_t v11[3] = v6;
  long long v12 = *v2;
  char v13 = v4;
  type metadata accessor for Optional();
  uint64_t result = _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in ValueToScrollPosition.get(base:), (uint64_t)v11, MEMORY[0x263F8E628], (uint64_t)&type metadata for ScrollPosition, v7, (uint64_t)v14);
  if ((void)v15)
  {
    long long v9 = v14[3];
    *(_OWORD *)(a2 + 32) = v14[2];
    *(_OWORD *)(a2 + 48) = v9;
    *(_OWORD *)(a2 + 64) = v15;
    long long v10 = v14[1];
    *(_OWORD *)a2 = v14[0];
    *(_OWORD *)(a2 + 16) = v10;
  }
  else
  {
    memset(v16, 0, sizeof(v16));
    char v17 = 5;
    outlined init with take of ScrollPosition.Storage((long long *)v16, (_OWORD *)a2);
    *(void *)(a2 + 64) = v5;
    *(void *)(a2 + 72) = v6;
    return outlined destroy of (ScrollPosition.Storage, ScrollPosition.Storage)((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for ScrollPosition?);
  }
  return result;
}

uint64_t protocol witness for Projection.get(base:) in conformance BindingOperations.ToOptional<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return BindingOperations.ToOptional.get(base:)(a1, a2, a3);
}

uint64_t BindingOperations.ToOptional.get(base:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a3, a1, v4);
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56);

  return v5(a3, 0, 1, v4);
}

uint64_t protocol witness for Location.update() in conformance StoredLocationBase<A>()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 144))() & 1;
}

uint64_t protocol witness for Location.wasRead.getter in conformance ZipLocation<A, B>()
{
  return ZipLocation.wasRead.getter(*v0, v0[1]);
}

uint64_t protocol witness for Location.update() in conformance ZipLocation<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  uint64_t v4 = v2[1];
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = a1 + *(int *)(swift_getTupleTypeMetadata2() + 48);

  return ZipLocation.update()(a1, v8, v5, v4, v6, v7);
}

uint64_t ZipLocation.wasRead.getter(uint64_t a1, uint64_t a2)
{
  if ((*(uint64_t (**)(void))(*(void *)a1 + 96))()) {
    return 1;
  }
  else {
    return (*(uint64_t (**)(void))(*(void *)a2 + 96))() & 1;
  }
}

uint64_t ZipLocation.update()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v47 = a4;
  uint64_t v48 = a6;
  uint64_t v50 = a1;
  uint64_t v51 = a2;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v43 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v44 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v49 = (char *)&v42 - v10;
  MEMORY[0x270FA5388](v11);
  char v13 = (char *)&v42 - v12;
  MEMORY[0x270FA5388](v14);
  os_log_type_t v16 = (char *)&v42 - v15;
  uint64_t v17 = swift_getTupleTypeMetadata2();
  uint64_t v18 = v17 - 8;
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v42 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v22 = MEMORY[0x270FA5388](v21);
  char v24 = (char *)&v42 - v23;
  uint64_t v25 = *(int *)(v18 + 56);
  int v45 = (*(uint64_t (**)(char *, double))(*(void *)a3 + 144))((char *)&v42 - v23, v22);
  char v26 = v45 & 1;
  v24[v25] = v45 & 1;
  uint64_t v27 = TupleTypeMetadata2;
  uint64_t v28 = *(int *)(TupleTypeMetadata2 + 48);
  LODWORD(v47) = (*(uint64_t (**)(char *))(*(void *)v47 + 144))(v16);
  char v29 = v47 & 1;
  v16[v28] = v47 & 1;
  uint64_t v30 = *(int *)(v18 + 56);
  uint64_t v31 = *(void (**)(char *, char *))(*(void *)(a5 - 8) + 32);
  v31(v20, v24);
  v20[v30] = v26;
  uint64_t v32 = v48;
  ((void (*)(uint64_t, char *, uint64_t))v31)(v50, v20, a5);
  uint64_t v33 = *(int *)(v27 + 48);
  uint64_t v34 = *(void *)(v32 - 8);
  (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v13, v16, v32);
  v13[v33] = v29;
  uint64_t v35 = *(void (**)(uint64_t, char *, uint64_t))(v34 + 32);
  v35(v51, v13, v32);
  uint64_t v36 = *(int *)(v27 + 48);
  char v37 = v49;
  v35((uint64_t)v49, v16, v32);
  v37[v36] = v29;
  if (v45)
  {
    (*(void (**)(char *, uint64_t))(v43 + 8))(v37, v27);
    char v38 = 1;
  }
  else
  {
    uint64_t v39 = *(int *)(v27 + 48);
    uint64_t v40 = v44;
    v35((uint64_t)v44, v37, v32);
    v40[v39] = v29;
    (*(void (**)(char *, uint64_t))(v34 + 8))(v40, v32);
    char v38 = v47;
  }
  return v38 & 1;
}

uint64_t protocol witness for Location.wasRead.getter in conformance StoredLocationBase<A>()
{
  return StoredLocationBase.wasRead.getter() & 1;
}

double static UnitPoint.leading.getter()
{
  return 0.0;
}

ValueMetadata *type metadata accessor for Namespace()
{
  return &type metadata for Namespace;
}

BOOL AGTypeID.isValueType.getter()
{
  return AGTypeGetKind() - 2 < 4;
}

uint64_t Transaction.fromScrollView.getter(uint64_t a1)
{
  return Transaction.isContinuous.getter(a1, (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

ValueMetadata *type metadata accessor for _ZStackLayout()
{
  return &type metadata for _ZStackLayout;
}

uint64_t partial apply for closure #1 in HostPreferencesCombiner.CombineValues.visit<A>(key:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in HostPreferencesCombiner.CombineValues.visit<A>(key:)(*(unsigned int **)(v1 + 32), *(void *)(v1 + 40), a1);
}

ValueMetadata *type metadata accessor for Visibility()
{
  return &type metadata for Visibility;
}

uint64_t storeEnumTagSinglePayload for GraphicsContext.Filter(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0xFFFFFE8)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 268435432;
    if (a3 > 0xFFFFFE7) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if (a3 > 0xFFFFFE7) {
      *(unsigned char *)(result + 88) = 0;
    }
    if (a2)
    {
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_OWORD *)(result + 32) = 0u;
      *(_OWORD *)uint64_t result = 0u;
      *(void *)(result + 80) = 16 * ((-a2 >> 5) & 0x7FFFFF) - (a2 << 27);
    }
  }
  return result;
}

uint64_t protocol witness for RandomAccessCollection.distance(from:to:) in conformance _VariadicView_Children(uint64_t *a1, uint64_t *a2)
{
  return specialized RandomAccessCollection<>.distance(from:to:)(*a1, *a2);
}

_OWORD *protocol witness for Collection.subscript.read in conformance PreferenceKeys(_OWORD *result, unint64_t *a2)
{
  unint64_t v3 = *a2;
  if ((*a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v3 < *(void *)(*(void *)v2 + 16))
  {
    *uint64_t result = *(_OWORD *)(*(void *)v2 + 16 * v3 + 32);
    return _ViewInputs.base.modify;
  }
  __break(1u);
  return result;
}

uint64_t TupleView.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

void *initializeBufferWithCopyOfBuffer for HostPreferencesCombiner(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  return a1;
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NSAttributedStringKey()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

id GraphHost.graph.getter()
{
  swift_beginAccess();
  id result = *(id *)(v0 + 16);
  if (result)
  {
    return result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

double EdgeInsets.rounded(toMultipleOf:)(double a1, double a2, double a3, double a4, double a5)
{
  uint64_t v10 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v11 = *(void *)(v10 - 8);
  double v12 = MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t, double))(v11 + 104))(v14, *MEMORY[0x263F8E210], v10, v12);
  *(double *)&v17[2] = a3;
  double v18 = a2;
  *(double *)uint64_t v17 = a5;
  *(double *)&v17[1] = a4;
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v14, a1);
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v14, a1);
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v14, a1);
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v14, a1);
  double v15 = v18;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  return v15;
}

double ResolvedStyledText.StringDrawing.drawingMargins.getter()
{
  uint64_t v1 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(v0 + 344))
  {
    if (*(void *)(v0 + 216))
    {
      NSAttributedString.maxFontMetrics.getter((uint64_t)v18);
      long long v5 = v18[0];
      long long v6 = v18[1];
      double v8 = v19;
      double v7 = v20;
      double v9 = v21;
      double v10 = v22;
    }
    else
    {
      long long v5 = 0uLL;
      double v8 = 0.0;
      double v7 = 0.0;
      double v9 = 0.0;
      double v10 = 0.0;
      long long v6 = 0uLL;
    }
    *(_OWORD *)(v0 + 280) = v5;
    *(_OWORD *)(v0 + 296) = v6;
    *(double *)(v0 + 312) = v8;
    *(double *)(v0 + 320) = v7;
    *(double *)(v0 + 328) = v9;
    *(double *)(v0 + 336) = v10;
    *(unsigned char *)(v0 + 344) = 0;
  }
  else
  {
    double v9 = *(double *)(v0 + 328);
    double v10 = *(double *)(v0 + 336);
    double v8 = *(double *)(v0 + 312);
    double v7 = *(double *)(v0 + 320);
  }
  swift_beginAccess();
  double v11 = v8
      + ResolvedStyledText.lineHeightScalingAdjustment(lineHeightMultiple:maximumLineHeight:minimumLineHeight:)(*(double *)(v0 + 64), *(double *)(v0 + 72), *(double *)(v0 + 80))+ *(double *)(v0 + 224);
  double v12 = v7 + *(double *)(v0 + 232);
  double v13 = v9 + *(double *)(v0 + 240);
  double v14 = v10 + *(double *)(v0 + 248);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x263F8E218], v1);
  double v15 = *(double *)(v0 + 112);
  double v25 = v12;
  double v26 = v11;
  double v23 = v14;
  double v24 = v13;
  specialized FloatingPoint.round(_:toMultipleOf:)(v4, v15);
  specialized FloatingPoint.round(_:toMultipleOf:)(v4, v15);
  specialized FloatingPoint.round(_:toMultipleOf:)(v4, v15);
  specialized FloatingPoint.round(_:toMultipleOf:)(v4, v15);
  double v16 = v26;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v16;
}

void specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)()
{
}

{
  AppearanceEffect.updateValue()();
}

{
  AnimatableFrameAttribute.updateValue()();
}

{
  StyledTextResponderFilter.updateValue()();
}

{
  OpacityResponderFilter.updateValue()();
}

{
  ScrollPositionBindingModifier.MakeRequest.updateValue()();
}

{
  ResolvedOptionalTextFilter.updateValue()();
}

{
  specialized AnimatableAttribute.updateValue()();
}

{
  SizeFittingTextLayoutComputer.updateValue()();
}

{
  SizeFittingTextFilter.updateValue()();
}

{
  specialized AnimatableAttribute.updateValue()();
}

{
  _ShaderFilterEffect.ResolvedEffect.updateValue()();
}

{
  specialized AnyGestureInfo.updateValue()();
}

{
  ScrollStateRequestTransform.updateValue()();
}

{
  specialized DynamicBody.updateValue()();
}

{
  id v0[2];

  v0[1] = *(id *)MEMORY[0x263EF8340];
  Text.MakeRepresentableContext.value.getter(v0);
  AGGraphSetOutputValue();
}

Swift::Void __swiftcall AnimatableFrameAttributeVFD.updateValue()()
{
  uint64_t v1 = v0;
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  char v4 = v3;
  uint64_t v5 = *Value;
  uint64_t v6 = Value[1];
  double v7 = (uint64_t *)AGGraphGetValue();
  char v9 = v4 | v8;
  uint64_t v10 = *v7;
  uint64_t v11 = v7[1];
  uint64_t v12 = v7[2];
  uint64_t v13 = v7[3];
  double v15 = *(double *)AGGraphGetValue();
  uint64_t v24 = v12;
  uint64_t v25 = v13;
  if (v9) {
    char v16 = 1;
  }
  else {
    char v16 = v14 & 1;
  }
  char v26 = v16;
  *(void *)&long long v21 = v5;
  *((void *)&v21 + 1) = v6;
  *(void *)&long long v22 = v10;
  *((void *)&v22 + 1) = v11;
  CGRect.roundCoordinatesToNearestOrUp(toMultipleOf:)(v15);
  v23[0] = v21;
  v23[1] = v22;
  if ((*(unsigned char *)(v1 + 145) & 1) == 0)
  {
    uint64_t v17 = *(void *)(v1 + 72);
    specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)((uint64_t)v23, 0, *(unsigned int *)(v1 + 12), v1 + 16, v1);
    if (*(void *)(v1 + 72))
    {
      if (one-time initialization token for shared != -1) {
        swift_once();
      }
      swift_beginAccess();
      if (*(unsigned char *)(v1 + 96)) {
        double v18 = 0.0;
      }
      else {
        double v18 = *(double *)(v1 + 88);
      }
      double v19 = *(void (**)(double))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared) + 0x50);
      double v20 = static CoreGlue.shared;
      v19(v18);
    }
    else if (v17)
    {
      *(void *)(v1 + 136) = 0;
      *(_OWORD *)(v1 + 120) = 0u;
      *(_OWORD *)(v1 + 104) = 0u;
      *(unsigned char *)(v1 + 144) = 1;
      *(void *)(v1 + 88) = 0;
      *(unsigned char *)(v1 + 96) = 1;
    }
  }
  if ((v26 & 1) != 0 || !AGGraphGetOutputValue()) {
    AGGraphSetOutputValue();
  }
}

uint64_t CGRect.roundCoordinatesToNearestOrUp(toMultipleOf:)(double a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  double v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21.origin.CGFloat x = *v1;
  char v8 = v1 + 1;
  v21.origin.CGFloat y = v1[1];
  v21.size.CGFloat width = v1[2];
  char v9 = v1 + 2;
  uint64_t v17 = v1 + 2;
  v21.size.CGFloat height = v1[3];
  uint64_t v10 = v1 + 3;
  double v18 = v10;
  CGRect v22 = CGRectStandardize(v21);
  *char v8 = v22.origin.y;
  *char v9 = v22.size.width;
  CGFloat *v10 = v22.size.height;
  double v19 = v22.origin.y + v22.size.height;
  double v20 = v22.origin.x + v22.size.width;
  double *v2 = a1 * 0.5 + v22.origin.x;
  uint64_t v11 = *MEMORY[0x263F8E220];
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 104);
  v12(v7, v11, v4);
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v7, a1);
  uint64_t v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v7, v4);
  *char v8 = a1 * 0.5 + *v8;
  v12(v7, v11, v4);
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v7, a1);
  v13(v7, v4);
  double v20 = a1 * 0.5 + v20;
  v12(v7, v11, v4);
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v7, a1);
  v13(v7, v4);
  double v19 = a1 * 0.5 + v19;
  v12(v7, v11, v4);
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v7, a1);
  v13(v7, v4);
  double v14 = v20 - *v2;
  double v15 = v18;
  *uint64_t v17 = v14;
  *double v15 = v19 - *v8;
  v12(v7, *MEMORY[0x263F8E210], v4);
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v7, a1);
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v7, a1);
  return ((uint64_t (*)(char *, uint64_t))v13)(v7, v4);
}

uint64_t specialized FloatingPoint.round(_:toMultipleOf:)(uint64_t a1, double a2)
{
  uint64_t v5 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  char v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v18 - v10;
  if (a2 != 1.0)
  {
    double v14 = *v2 / a2;
    double *v2 = v14;
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v6 + 88))(v8, v5);
    if (result == *MEMORY[0x263F8E210])
    {
      double v15 = round(v14);
    }
    else if (result == *MEMORY[0x263F8E208])
    {
      double v15 = rint(v14);
    }
    else if (result == *MEMORY[0x263F8E218])
    {
      double v15 = ceil(v14);
    }
    else if (result == *MEMORY[0x263F8E220])
    {
      double v15 = floor(v14);
    }
    else if (result == *MEMORY[0x263F8E1F8])
    {
      double v15 = trunc(v14);
    }
    else if (result == *MEMORY[0x263F8E200])
    {
      double v15 = ceil(v14);
      double v17 = floor(v14);
      if (v14 < 0.0) {
        double v15 = v17;
      }
    }
    else
    {
      Double._roundSlowPath(_:)();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      double v15 = *v2;
    }
    double v13 = v15 * a2;
    goto LABEL_33;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v18 - v10, a1, v5);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v6 + 88))(v11, v5);
  if (result == *MEMORY[0x263F8E210])
  {
    double v13 = round(*v2);
  }
  else if (result == *MEMORY[0x263F8E208])
  {
    double v13 = rint(*v2);
  }
  else
  {
    if (result == *MEMORY[0x263F8E218])
    {
      double v16 = *v2;
    }
    else
    {
      if (result == *MEMORY[0x263F8E220])
      {
        double v13 = floor(*v2);
        goto LABEL_33;
      }
      if (result == *MEMORY[0x263F8E1F8])
      {
        double v13 = trunc(*v2);
        goto LABEL_33;
      }
      if (result != *MEMORY[0x263F8E200])
      {
        Double._roundSlowPath(_:)();
        return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v11, v5);
      }
      double v16 = *v2;
      if ((*(void *)v2 & 0x8000000000000000) != 0)
      {
        double v13 = floor(v16);
        goto LABEL_33;
      }
    }
    double v13 = ceil(v16);
  }
LABEL_33:
  double *v2 = v13;
  return result;
}

_DWORD *specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v16 = type metadata accessor for OSSignpostID();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  double v19 = (char *)&v71 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1) {
    swift_once();
  }
  double v20 = -*(double *)&static Time.infinity;
  if (*(void *)(a4 + 56))
  {
    uint64_t Value = (double *)AGGraphGetValue();
    if (v22) {
      double v20 = *Value;
    }
  }
  uint64_t result = (_DWORD *)AGGraphGetValue();
  if (*(_DWORD *)(a4 + 64) != *result >> 1)
  {
    uint64_t result = (_DWORD *)specialized AnimatableAttributeHelper.reset()();
    *(unsigned char *)(a1 + 48) = 1;
LABEL_11:
    double v9 = *(double *)a1;
    double v10 = *(double *)(a1 + 8);
    double v11 = *(double *)(a1 + 16);
    double v25 = *(double *)(a1 + 24);
    if (*(unsigned char *)(a4 + 48)) {
      goto LABEL_37;
    }
    double v5 = *(double *)(a4 + 32);
    double v6 = *(double *)(a4 + 40);
    double v8 = *(double *)(a4 + 16);
    double v7 = *(double *)(a4 + 24);
    if (v9 == v8 && v10 == v7 && v11 == v5 && v25 == v6) {
      goto LABEL_37;
    }
    double v77 = *(double *)(a1 + 24);
    uint64_t v75 = a5;
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    uint64_t v26 = swift_retain();
    uint64_t v27 = specialized find<A>(_:key:)(v26);
    if (v27)
    {
      uint64_t v28 = *(void *)(v27 + 72);
      swift_retain();
      swift_release();
      if (v28) {
        goto LABEL_25;
      }
    }
    else
    {
      swift_release();
    }
    uint64_t v29 = swift_retain();
    char v30 = specialized closure #1 in PropertyList.subscript.getter(v29);
    swift_release();
    if ((v30 & 1) == 0)
    {
      if (!a2) {
        goto LABEL_36;
      }
      swift_retain();
      uint64_t v28 = a2;
      goto LABEL_25;
    }
    if (one-time initialization token for velocityTracking != -1) {
      goto LABEL_68;
    }
    goto LABEL_22;
  }
  if (*(unsigned char *)(a1 + 48) == 1) {
    goto LABEL_11;
  }
  uint64_t v24 = *(void *)(a4 + 56);
  if (!v24) {
    return result;
  }
  while (1)
  {
    long long v40 = *(_OWORD *)(a1 + 16);
    float64x2_t v87 = *(float64x2_t *)a1;
    *(_OWORD *)unint64_t v88 = v40;
    swift_retain();
    LOBYTE(v84) = 0;
    if ((specialized AnimatorState.update(_:at:environment:)(&v87, v20) & 1) == 0)
    {
      if (one-time initialization token for shared != -1) {
        swift_once();
      }
      swift_beginAccess();
      double v51 = *(double *)(v24 + 72);
      v79[0] = *(double *)(v24 + 80);
      uint64_t v52 = *(unsigned int *)(v24 + 120);
      unsigned __int8 v53 = *(unsigned char *)(v24 + 124);
      uint64_t v54 = *(void (**)(double *, unint64_t, double))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared)
                                                                      + 0x58);
      char v55 = static CoreGlue.shared;
      LOBYTE(v82) = v53;
      v54(v79, v52 | ((unint64_t)v53 << 32), v51);

      float64_t v57 = v87.f64[1];
      float64_t v56 = v87.f64[0];
      double v59 = v88[1];
      double v58 = v88[0];
      v79[0] = v20;
      FrameVelocityFilter.addSample(_:time:)(v79, v87.f64[0], v87.f64[1], v88[0], v88[1]);
      uint64_t result = (_DWORD *)swift_release();
      goto LABEL_53;
    }
    uint64_t v76 = v17;
    swift_retain();
    uint64_t v17 = static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_50;
    }
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v41 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_50:
      swift_release();
      if (*(void *)(a4 + 56))
      {
LABEL_51:
        specialized AnimatorState.removeListeners()();
        swift_release();
      }
LABEL_52:
      uint64_t result = (_DWORD *)swift_release();
      *(void *)(a4 + 56) = 0;
      float64_t v57 = v87.f64[1];
      float64_t v56 = v87.f64[0];
      double v59 = v88[1];
      double v58 = v88[0];
LABEL_53:
      *(float64_t *)a1 = v56;
      *(float64_t *)(a1 + 8) = v57;
      *(double *)(a1 + 16) = v58;
      *(double *)(a1 + 24) = v59;
      *(unsigned char *)(a1 + 48) = 1;
      return result;
    }
    swift_retain();
    id v42 = v41;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    uint64_t v43 = swift_allocObject();
    *(_OWORD *)(v43 + 16) = xmmword_2461BE2B0;
    int CurrentAttribute = AGGraphGetCurrentAttribute();
    int v45 = *MEMORY[0x263F288F8];
    if (CurrentAttribute == *MEMORY[0x263F288F8])
    {
      __break(1u);
    }
    else
    {
      id v46 = (id)AGGraphGetAttributeGraph();
      uint64_t Counter = AGGraphGetCounter();

      uint64_t v48 = MEMORY[0x263F8DA20];
      *(void *)(v43 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v43 + 64) = v48;
      *(void *)(v43 + 32) = Counter;
      int v49 = AGGraphGetCurrentAttribute();
      if (v49 != v45)
      {
        uint64_t v50 = MEMORY[0x263F8E960];
        *(void *)(v43 + 96) = MEMORY[0x263F8E8F8];
        *(void *)(v43 + 104) = v50;
        *(_DWORD *)(v43 + 72) = v49;
        *(void *)(v43 + 136) = MEMORY[0x263F8D310];
        *(void *)(v43 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v43 + 112) = 0x6D61724677656956;
        *(void *)(v43 + 120) = 0xE900000000000065;
        char v83 = v17;
        uint64_t v81 = _signpostLog;
        char v82 = &dword_245728000;
        unint64_t v84 = "AnimationState";
        uint64_t v85 = 14;
        char v86 = 2;
        *(void *)&v79[0] = "Animation: (%p) [%d] %{public}@ ended";
        *(void *)&v79[1] = 37;
        char v80 = 2;
        uint64_t v78 = v43;
        specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
        swift_release();
        (*(void (**)(char *, uint64_t))(v76 + 8))(v19, v16);
        swift_bridgeObjectRelease();
        if (*(void *)(a4 + 56)) {
          goto LABEL_51;
        }
        goto LABEL_52;
      }
    }
    __break(1u);
LABEL_68:
    swift_once();
LABEL_22:
    uint64_t v28 = static Animation.velocityTracking;
    swift_retain();
LABEL_25:
    double v8 = v9 - v8;
    double v7 = v10 - v7;
    double v5 = v11 - v5;
    double v6 = v77 - v6;
    double v20 = *(double *)AGGraphGetValue();
    if (*(void *)(a4 + 56)) {
      break;
    }
    type metadata accessor for Slice<IndexSet>(0, (unint64_t *)&lazy cache variable for type metadata for AnimatorState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
    swift_allocObject();
    swift_retain();
    uint64_t v60 = swift_retain();
    uint64_t v61 = specialized AnimatorState.init(animation:interval:at:in:)(v60, v8, v7, v5, v6, v20);
    swift_retain();
    int v62 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_62;
    }
    int v73 = v62;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    int64_t v63 = (void *)_signpostLog;
    if (OS_os_log.signpostsEnabled.getter())
    {
      uint64_t v74 = v28;
      uint64_t v76 = v17;
      swift_retain();
      id v64 = v63;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      uint64_t v65 = swift_allocObject();
      *(_OWORD *)(v65 + 16) = xmmword_2461BE2B0;
      uint64_t result = (_DWORD *)AGGraphGetCurrentAttribute();
      int v72 = *MEMORY[0x263F288F8];
      if (result == v72) {
        goto LABEL_71;
      }
      id v66 = (id)AGGraphGetAttributeGraph();
      uint64_t v67 = AGGraphGetCounter();

      uint64_t v68 = MEMORY[0x263F8DA20];
      *(void *)(v65 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v65 + 64) = v68;
      *(void *)(v65 + 32) = v67;
      uint64_t result = (_DWORD *)AGGraphGetCurrentAttribute();
      if (result == v72) {
        goto LABEL_72;
      }
      uint64_t v69 = MEMORY[0x263F8E960];
      *(void *)(v65 + 96) = MEMORY[0x263F8E8F8];
      *(void *)(v65 + 104) = v69;
      *(_DWORD *)(v65 + 72) = result;
      *(void *)(v65 + 136) = MEMORY[0x263F8D310];
      *(void *)(v65 + 144) = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v65 + 112) = 0x6D61724677656956;
      *(void *)(v65 + 120) = 0xE900000000000065;
      LOBYTE(v78) = v73;
      *(void *)&v79[0] = &dword_245728000;
      uint64_t v81 = v65;
      char v82 = (int *)_signpostLog;
      *(void *)&v87.f64[0] = "AnimationState";
      *(void *)&v87.f64[1] = 14;
      LOBYTE(v88[0]) = 2;
      unint64_t v84 = "Animation: (%p) [%d] %{public}@ started";
      uint64_t v85 = 39;
      char v86 = 2;
      specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
      swift_release();
      uint64_t v70 = v76;
      (*(void (**)(char *, uint64_t))(v76 + 8))(v19, v16);
      uint64_t v17 = v70;
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_62:
      swift_release();
    }
    swift_release();
    *(void *)(a4 + 56) = v61;
    if (v61)
    {
LABEL_35:
      swift_retain();
      specialized AnimatorState.addListeners(transaction:)();
      swift_release();
      swift_release();
      goto LABEL_36;
    }
LABEL_64:
    __break(1u);
LABEL_36:
    uint64_t result = (_DWORD *)swift_release();
    double v25 = v77;
LABEL_37:
    *(double *)(a4 + 16) = v9;
    *(double *)(a4 + 24) = v10;
    *(double *)(a4 + 32) = v11;
    *(double *)(a4 + 40) = v25;
    *(unsigned char *)(a4 + 48) = 0;
    uint64_t v24 = *(void *)(a4 + 56);
    if (!v24) {
      return result;
    }
  }
  swift_retain();
  LOBYTE(v87.f64[0]) = 0;
  specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v28, v8, v7, v5, v6, v20);
  swift_retain();
  int v31 = static os_signpost_type_t.event.getter();
  static os_signpost_type_t.event.getter();
  if ((kdebug_is_enabled() & 1) == 0) {
    goto LABEL_33;
  }
  int v73 = v31;
  if (one-time initialization token for _signpostLog != -1) {
    swift_once();
  }
  uint64_t v32 = (void *)_signpostLog;
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
LABEL_33:
    swift_release_n();
    goto LABEL_34;
  }
  uint64_t v74 = v28;
  uint64_t v76 = v17;
  swift_retain();
  id v33 = v32;
  OSSignpostID.init(log:object:)();
  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  uint64_t v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_2461BE2B0;
  uint64_t result = (_DWORD *)AGGraphGetCurrentAttribute();
  int v72 = *MEMORY[0x263F288F8];
  if (result != v72)
  {
    id v35 = (id)AGGraphGetAttributeGraph();
    uint64_t v36 = AGGraphGetCounter();

    uint64_t v37 = MEMORY[0x263F8DA20];
    *(void *)(v34 + 56) = MEMORY[0x263F8D9D0];
    *(void *)(v34 + 64) = v37;
    *(void *)(v34 + 32) = v36;
    uint64_t result = (_DWORD *)AGGraphGetCurrentAttribute();
    if (result == v72) {
      goto LABEL_70;
    }
    uint64_t v38 = MEMORY[0x263F8E960];
    *(void *)(v34 + 96) = MEMORY[0x263F8E8F8];
    *(void *)(v34 + 104) = v38;
    *(_DWORD *)(v34 + 72) = result;
    *(void *)(v34 + 136) = MEMORY[0x263F8D310];
    *(void *)(v34 + 144) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v34 + 112) = 0x6D61724677656956;
    *(void *)(v34 + 120) = 0xE900000000000065;
    LOBYTE(v78) = v73;
    *(void *)&v79[0] = &dword_245728000;
    uint64_t v81 = v34;
    char v82 = (int *)_signpostLog;
    *(void *)&v87.f64[0] = "AnimationState";
    *(void *)&v87.f64[1] = 14;
    LOBYTE(v88[0]) = 2;
    unint64_t v84 = "Animation: (%p) [%d] %{public}@ updated";
    uint64_t v85 = 39;
    char v86 = 2;
    specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
    swift_release_n();
    uint64_t v39 = v76;
    (*(void (**)(char *, uint64_t))(v76 + 8))(v19, v16);
    uint64_t v17 = v39;
    swift_bridgeObjectRelease();
LABEL_34:
    if (*(void *)(a4 + 56)) {
      goto LABEL_35;
    }
    goto LABEL_64;
  }
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
  return result;
}

double ResolvedStyledText.lineHeightScalingAdjustment(lineHeightMultiple:maximumLineHeight:minimumLineHeight:)(double a1, double a2, double a3)
{
  BOOL v7 = a1 != 0.0 && a1 < 1.0;
  double v8 = 0.0;
  if (v7 || a2 != 0.0 || a3 != 0.0)
  {
    if (*(unsigned char *)(v3 + 344))
    {
      if (*(void *)(v3 + 216))
      {
        NSAttributedString.maxFontMetrics.getter((uint64_t)v20);
        uint64_t v9 = v20[0];
        double v11 = *(double *)&v20[1];
        double v10 = *(double *)&v20[2];
        long long v12 = v21;
        long long v13 = v22;
        uint64_t v14 = v23;
      }
      else
      {
        uint64_t v14 = 0;
        uint64_t v9 = 0;
        long long v12 = 0uLL;
        double v10 = 0.0;
        double v11 = 0.0;
        long long v13 = 0uLL;
      }
      *(void *)(v3 + 280) = v9;
      *(double *)(v3 + 288) = v11;
      *(double *)(v3 + 296) = v10;
      *(_OWORD *)(v3 + 304) = v12;
      *(_OWORD *)(v3 + 320) = v13;
      *(void *)(v3 + 336) = v14;
      *(unsigned char *)(v3 + 344) = 0;
    }
    else
    {
      double v11 = *(double *)(v3 + 288);
      double v10 = *(double *)(v3 + 296);
    }
    double v15 = v11 - v10;
    double v16 = 1.0;
    if (a1 != 0.0) {
      double v16 = a1;
    }
    double v17 = v16 * v15;
    if (a2 == 0.0) {
      double v18 = v17;
    }
    else {
      double v18 = a2;
    }
    if (v17 < a3) {
      double v17 = a3;
    }
    if (v18 < v17) {
      double v17 = v18;
    }
    if (v17 < v15) {
      return v15 - v17;
    }
  }
  return v8;
}

void FrameVelocityFilter.addSample(_:time:)(double *a1, double a2, double a3, double a4, double a5)
{
  double v8 = *a1;
  if ((*(unsigned char *)(v5 + 56) & 1) == 0)
  {
    double v9 = *(double *)(v5 + 16);
    if (v9 < v8)
    {
      double v20 = a4;
      double v21 = a5;
      double v10 = 1.0 / (v8 - v9);
      double v12 = v10 * (a3 - *(double *)(v5 + 32));
      double v13 = v10 * (a4 - *(double *)(v5 + 40));
      double v14 = v10 * (a5 - *(double *)(v5 + 48));
      v22.origin.double x = v10 * (a2 - *(double *)(v5 + 24));
      double x = v22.origin.x;
      v22.origin.CGFloat y = v12;
      v22.size.CGFloat width = v13;
      v22.size.CGFloat height = v14;
      double v15 = fabs(CGRectGetMinX(v22));
      v23.origin.double x = x;
      v23.origin.CGFloat y = v12;
      v23.size.CGFloat width = v13;
      v23.size.CGFloat height = v14;
      double v16 = fabs(CGRectGetMaxX(v23));
      if (v15 > v16) {
        double v16 = v15;
      }
      double v19 = v16;
      v24.origin.double x = x;
      v24.origin.CGFloat y = v12;
      v24.size.CGFloat width = v13;
      v24.size.CGFloat height = v14;
      double v17 = fabs(CGRectGetMinY(v24));
      v25.origin.double x = x;
      v25.origin.CGFloat y = v12;
      v25.size.CGFloat width = v13;
      v25.size.CGFloat height = v14;
      double v18 = fabs(CGRectGetMaxY(v25));
      if (v17 > v18) {
        double v18 = v17;
      }
      if (v19 > v18) {
        double v18 = v19;
      }
      if ((*(unsigned char *)(v5 + 8) & 1) == 0) {
        double v18 = *(double *)v5 + (v18 - *(double *)v5) * 0.35;
      }
      *(double *)uint64_t v5 = v18;
      *(unsigned char *)(v5 + 8) = 0;
      a4 = v20;
      a5 = v21;
    }
  }
  *(double *)(v5 + 16) = v8;
  *(double *)(v5 + 24) = a2;
  *(double *)(v5 + 32) = a3;
  *(double *)(v5 + 40) = a4;
  *(double *)(v5 + 48) = a5;
  *(unsigned char *)(v5 + 56) = 0;
}

uint64_t FluidSpringAnimation.animate<A>(value:time:context:)@<X0>(double *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v93 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  __int16 v92 = (char *)&v87 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  double v16 = (char *)&v87 - v15;
  MEMORY[0x270FA5388](v17);
  uint64_t v109 = (char *)&v87 - v18;
  MEMORY[0x270FA5388](v19);
  long long v103 = (char *)&v87 - v20;
  MEMORY[0x270FA5388](v21);
  uint64_t v105 = (char *)&v87 - v22;
  MEMORY[0x270FA5388](v23);
  uint64_t v110 = (char *)&v87 - v24;
  CGRect v25 = (int *)type metadata accessor for SpringState();
  uint64_t v26 = *((void *)v25 - 1);
  MEMORY[0x270FA5388](v25);
  uint64_t v28 = (char *)&v87 - v27;
  if (a3 == MEMORY[0x263F8D538])
  {
    uint64_t result = specialized FluidSpringAnimation.animate<A>(value:time:context:)(a2, *a1, a6, *v6, v6[1], v6[2]);
    *(void *)a5 = result;
    *(unsigned char *)(a5 + 8) = v40 & 1;
    return result;
  }
  uint64_t v94 = a2;
  long long v104 = a1;
  type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
  if (v29 == a3)
  {
    specialized FluidSpringAnimation.animate<A>(value:time:context:)(v94, &v111, *v104, v104[1], v104[2], v104[3], a6, *v6, v6[1], v6[2]);
    return outlined init with take of AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>?((uint64_t)&v111, a5);
  }
  double v31 = *v6;
  double v30 = v6[1];
  double v32 = v6[2];
  uint64_t v33 = v94;
  uint64_t v34 = *(void *)(v94 + 8);
  char v35 = *(unsigned char *)(v94 + 16);
  char v36 = *(unsigned char *)(v94 + 17);
  v111.i64[0] = *(void *)v94;
  v111.i64[1] = v34;
  char v112 = v35;
  char v113 = v36;
  uint64_t v90 = type metadata accessor for AnimationContext();
  AnimationContext.springState.getter();
  if (v32 <= 0.0 || (double v37 = *(double *)&v28[v25[14]], v37 == 0.0))
  {
    if (v31 > 0.0)
    {
LABEL_6:
      double v38 = 6.28318531 / v31 * (6.28318531 / v31);
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v41 = v25[13];
    double v42 = (a6 - *(double *)&v28[v41]) / v32;
    if (v42 <= 1.0) {
      double v43 = (a6 - *(double *)&v28[v41]) / v32;
    }
    else {
      double v43 = 1.0;
    }
    BOOL v44 = v42 < 0.0;
    double v45 = 0.0;
    if (!v44) {
      double v45 = v43;
    }
    double v31 = v31 + v37 * (1.0 - v45 * v45 * (3.0 - (v45 + v45)));
    if (v31 > 0.0) {
      goto LABEL_6;
    }
  }
  double v38 = INFINITY;
LABEL_16:
  if (v38 <= 45000.0) {
    double v46 = v38;
  }
  else {
    double v46 = 45000.0;
  }
  if (v31 <= a6 - *(double *)&v28[v25[12]]) {
    *(unsigned char *)(v33 + 17) = 1;
  }
  float64x2_t v87 = v16;
  uint64_t v91 = v25;
  uint64_t v47 = v25[11];
  double v48 = *(double *)&v28[v47];
  if (a6 - v48 > 1.0)
  {
    double v48 = a6 + -0.0166666667;
    *(double *)&v28[v47] = a6 + -0.0166666667;
  }
  uint64_t v88 = v26;
  uint64_t v89 = a5;
  uint64_t v108 = v28;
  uint64_t v102 = a4;
  int v49 = v105;
  uint64_t v50 = v110;
  if (v48 < a6)
  {
    uint64_t v51 = v91[9];
    int v107 = &v108[v91[10]];
    uint64_t v52 = *(void (**)(void, void, double))(v102 + 16);
    uint64_t v99 = v102 + 16;
    char v100 = v52;
    char v106 = &v108[v51];
    double v53 = v30 * (sqrt(v46) * -2.0);
    int64_t v97 = *(void (**)(char *, char *, uint64_t))(v93 + 16);
    uint64_t v96 = (void (**)(char *, char *, uint64_t))(v93 + 24);
    uint64_t v98 = v93 + 16;
    uint64_t v95 = (void (**)(char *, uint64_t))(v93 + 8);
    uint64_t v101 = v47;
    uint64_t v54 = v102;
    char v55 = v52;
    do
    {
      float64_t v56 = v97;
      v97(v50, v107, a3);
      v55(a3, v54, 0.00166666667);
      dispatch thunk of static AdditiveArithmetic.+= infix(_:_:)();
      v56(v49, v110, a3);
      v55(a3, v54, 0.00333333333);
      dispatch thunk of static AdditiveArithmetic.+= infix(_:_:)();
      float64_t v57 = v103;
      v56(v103, v110, a3);
      v55(a3, v54, v53);
      v56(v109, (char *)v104, a3);
      dispatch thunk of static AdditiveArithmetic.-= infix(_:_:)();
      v55(a3, v54, v46);
      double v58 = *v96;
      double v59 = v107;
      (*v96)(v107, v57, a3);
      dispatch thunk of static AdditiveArithmetic.+= infix(_:_:)();
      v58(v106, v59, a3);
      uint64_t v60 = v109;
      v55(a3, v54, 0.00166666667);
      uint64_t v50 = v110;
      dispatch thunk of static AdditiveArithmetic.+= infix(_:_:)();
      uint64_t v61 = *v95;
      (*v95)(v60, a3);
      int v62 = v57;
      int v49 = v105;
      v61(v62, a3);
      v61(v49, a3);
      v61(v50, a3);
      double v63 = *(double *)&v108[v101] + 0.00333333333;
      *(double *)&v108[v101] = v63;
    }
    while (v63 < a6);
  }
  uint64_t v64 = (uint64_t)v108;
  specialized AnimationContext.springState.setter((uint64_t)v108);
  uint64_t v65 = v91;
  uint64_t v66 = v102;
  uint64_t v67 = *(double (**)(uint64_t, uint64_t))(v102 + 24);
  double v68 = v67(a3, v102);
  double v69 = v67(a3, v66);
  if (v68 > v69) {
    double v69 = v68;
  }
  uint64_t v70 = v93;
  uint64_t v71 = *(void (**)(uint64_t, uint64_t, uint64_t))(v93 + 16);
  if (v69 > 0.0036)
  {
    uint64_t v72 = v89;
    v71(v89, v64, a3);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v70 + 56))(v72, 0, 1, a3);
    return (*(uint64_t (**)(uint64_t, int *))(v88 + 8))(v64, v65);
  }
  int v73 = v87;
  uint64_t v74 = v104;
  v71((uint64_t)v87, (uint64_t)v104, a3);
  (*(void (**)(uint64_t, uint64_t, double))(v66 + 16))(a3, v66, 0.01);
  uint64_t v75 = v92;
  uint64_t v76 = v74;
  double v77 = v73;
  v71((uint64_t)v92, (uint64_t)v76, a3);
  dispatch thunk of static AdditiveArithmetic.-= infix(_:_:)();
  double v78 = v67(a3, v66);
  if (v78 <= 0.0)
  {
    char v86 = *(void (**)(char *, uint64_t))(v70 + 8);
    v86(v75, a3);
    v86(v77, a3);
    uint64_t v82 = v89;
    uint64_t v83 = v88;
    unint64_t v84 = v91;
  }
  else
  {
    double v79 = v78;
    double v80 = v67(a3, v66);
    uint64_t v81 = *(void (**)(char *, uint64_t))(v70 + 8);
    v81(v75, a3);
    v81(v73, a3);
    uint64_t v82 = v89;
    uint64_t v83 = v88;
    unint64_t v84 = v91;
    if (v79 < v80)
    {
      uint64_t v85 = (uint64_t)v108;
      v71(v89, (uint64_t)v108, a3);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v70 + 56))(v82, 0, 1, a3);
      return (*(uint64_t (**)(uint64_t, int *))(v83 + 8))(v85, v84);
    }
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v70 + 56))(v82, 1, 1, a3);
  return (*(uint64_t (**)(char *, int *))(v83 + 8))(v108, v84);
}

uint64_t specialized AnimatorState.update(_:at:environment:)(float64x2_t *a1, double a2)
{
  void (*v20)(void *__return_ptr, _OWORD *, void *, uint64_t, uint64_t, double);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  float64x2_t v34;
  float64x2_t v35;
  _OWORD v36[2];
  void v37[4];
  char v38;
  void v39[2];
  char v40;
  char v41;

  uint64_t v3 = v2;
  double v6 = *(double *)(v2 + 72);
  if (*(double *)(v2 + 80) + v6 * -0.5 >= a2)
  {
LABEL_8:
    swift_beginAccess();
    uint64_t v34 = vaddq_f64(*(float64x2_t *)(v3 + 88), *a1);
    char v35 = vaddq_f64(*(float64x2_t *)(v3 + 104), a1[1]);
    swift_beginAccess();
    uint64_t result = 0;
    float64x2_t v11 = vsubq_f64(v35, *(float64x2_t *)(v3 + 48));
    *a1 = vsubq_f64(v34, *(float64x2_t *)(v3 + 32));
    a1[1] = v11;
  }
  else
  {
    switch(*(unsigned char *)(v2 + 125))
    {
      case 1:
        *(unsigned char *)(v2 + 125) = 2;
        if (one-time initialization token for shared != -1) {
          swift_once();
        }
        swift_beginAccess();
        double v8 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared) + 0x60);
        double v9 = static CoreGlue.shared;
        LOBYTE(v8) = v8();

        if (v8) {
          goto LABEL_19;
        }
        *(double *)(v3 + 80) = *(double *)(v3 + 80) - *(double *)(v3 + 64) + a2;
        *(double *)(v3 + 64) = a2;
        goto LABEL_8;
      case 2:
        if (v6 < 0.0166666667) {
          double v12 = 0.0333333333;
        }
        else {
          double v12 = v6 + v6;
        }
        if (v12 < a2 - *(double *)(v2 + 64))
        {
          if (one-time initialization token for shared != -1) {
            swift_once();
          }
          swift_beginAccess();
          uint64_t v13 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared) + 0x60);
          uint64_t v14 = static CoreGlue.shared;
          LOBYTE(v13) = v13();

          if ((v13 & 1) == 0) {
            *(double *)(v3 + 64) = a2 - v12;
          }
        }
        char v7 = 3;
        goto LABEL_18;
      case 3:
        goto LABEL_19;
      default:
        *(double *)(v2 + 64) = a2;
        char v7 = 1;
LABEL_18:
        *(unsigned char *)(v3 + 125) = v7;
LABEL_19:
        double v15 = a2 - *(double *)(v3 + 64);
        swift_beginAccess();
        uint64_t v16 = *(void *)(v3 + 24);
        char v17 = *(unsigned char *)(v3 + 144);
        swift_bridgeObjectRetain();
        v39[0] = v16;
        v39[1] = AGCreateWeakAttribute();
        char v40 = 0;
        uint64_t v41 = v17;
        swift_beginAccess();
        uint64_t v18 = *(void *)(v3 + 16);
        swift_beginAccess();
        long long v19 = *(_OWORD *)(v3 + 48);
        v36[0] = *(_OWORD *)(v3 + 32);
        v36[1] = v19;
        uint64_t v20 = *(void (**)(void *__return_ptr, _OWORD *, void *, uint64_t, uint64_t, double))(*(void *)v18 + 120);
        type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
        uint64_t v22 = v21;
        uint64_t v23 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
        swift_retain();
        v20(v37, v36, v39, v22, v23, v15);
        swift_release();
        if (v38)
        {
          swift_bridgeObjectRelease();
          uint64_t result = 1;
        }
        else
        {
          uint64_t v24 = *(double *)v37;
          CGRect v25 = *(double *)&v37[1];
          uint64_t v26 = *(double *)&v37[2];
          uint64_t v27 = *(double *)&v37[3];
          specialized AnimatorState.updateListeners(isLogicallyComplete:time:environment:)(v41, v15);
          *(void *)(v3 + 24) = v39[0];
          swift_bridgeObjectRelease();
          uint64_t v28 = v26 + a1[1].f64[0];
          uint64_t v29 = v27 + a1[1].f64[1];
          double v30 = *(double *)(v3 + 48);
          double v31 = *(double *)(v3 + 56);
          double v32 = v25 + a1->f64[1] - *(double *)(v3 + 40);
          a1->f64[0] = v24 + a1->f64[0] - *(double *)(v3 + 32);
          a1->f64[1] = v32;
          a1[1].f64[0] = v28 - v30;
          a1[1].f64[1] = v29 - v31;
          swift_beginAccess();
          *(double *)(v3 + 96) = v25;
          *(double *)(v3 + 104) = v26;
          *(double *)(v3 + 112) = v27;
          *(double *)(v3 + 80) = a2;
          *(double *)(v3 + 88) = v24;
          uint64_t v33 = *(double *)(v3 + 72);
          if (v33 > 0.0) {
            *(double *)(v3 + 80) = v33 * (round(a2 / v33) + 1.0);
          }
          uint64_t result = 0;
        }
        break;
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  double v6;
  char v7;
  uint64_t (*v8)(void);
  void *v9;
  uint64_t result;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  double v14;
  uint64_t (*v15)(void);
  void *v16;
  double v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  long long v21;
  long long v22;
  void (*v23)(void *__return_ptr, _OWORD *, void *, uint64_t, uint64_t, double);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  double v54;
  _OWORD v55[4];
  void v56[8];
  char v57;
  void v58[2];
  char v59;
  char v60;

  uint64_t v3 = v2;
  double v6 = *(double *)(v2 + 104);
  if (*(double *)(v2 + 112) + v6 * -0.5 >= a2)
  {
LABEL_8:
    swift_beginAccess();
    uint64_t v52 = vaddq_f64(*(float64x2_t *)(v3 + 120), *a1);
    double v53 = vaddq_f64(*(float64x2_t *)(v3 + 136), a1[1]);
    uint64_t v50 = vaddq_f64(*(float64x2_t *)(v3 + 152), a1[2]);
    uint64_t v51 = vaddq_f64(*(float64x2_t *)(v3 + 168), a1[3]);
    swift_beginAccess();
    uint64_t result = 0;
    float64x2_t v11 = *(float64x2_t *)(v3 + 64);
    double v12 = *(float64x2_t *)(v3 + 80);
    uint64_t v13 = vsubq_f64(v53, *(float64x2_t *)(v3 + 48));
    *a1 = vsubq_f64(v52, *(float64x2_t *)(v3 + 32));
    a1[1] = v13;
    a1[2] = vsubq_f64(v50, v11);
    a1[3] = vsubq_f64(v51, v12);
  }
  else
  {
    switch(*(unsigned char *)(v2 + 189))
    {
      case 1:
        *(unsigned char *)(v2 + 189) = 2;
        if (one-time initialization token for shared != -1) {
          swift_once();
        }
        swift_beginAccess();
        double v8 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared) + 0x60);
        double v9 = static CoreGlue.shared;
        LOBYTE(v8) = v8();

        if (v8) {
          goto LABEL_19;
        }
        *(double *)(v3 + 112) = *(double *)(v3 + 112) - *(double *)(v3 + 96) + a2;
        *(double *)(v3 + 96) = a2;
        goto LABEL_8;
      case 2:
        if (v6 < 0.0166666667) {
          uint64_t v14 = 0.0333333333;
        }
        else {
          uint64_t v14 = v6 + v6;
        }
        if (v14 < a2 - *(double *)(v2 + 96))
        {
          if (one-time initialization token for shared != -1) {
            swift_once();
          }
          swift_beginAccess();
          double v15 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared) + 0x60);
          uint64_t v16 = static CoreGlue.shared;
          LOBYTE(v15) = v15();

          if ((v15 & 1) == 0) {
            *(double *)(v3 + 96) = a2 - v14;
          }
        }
        char v7 = 3;
        goto LABEL_18;
      case 3:
        goto LABEL_19;
      default:
        *(double *)(v2 + 96) = a2;
        char v7 = 1;
LABEL_18:
        *(unsigned char *)(v3 + 189) = v7;
LABEL_19:
        char v17 = a2 - *(double *)(v3 + 96);
        swift_beginAccess();
        uint64_t v18 = *(void *)(v3 + 24);
        long long v19 = *(unsigned char *)(v3 + 208);
        swift_bridgeObjectRetain();
        v58[0] = v18;
        v58[1] = AGCreateWeakAttribute();
        double v59 = 0;
        uint64_t v60 = v19;
        swift_beginAccess();
        uint64_t v20 = *(void *)(v3 + 16);
        swift_beginAccess();
        uint64_t v21 = *(_OWORD *)(v3 + 48);
        v55[0] = *(_OWORD *)(v3 + 32);
        v55[1] = v21;
        uint64_t v22 = *(_OWORD *)(v3 + 80);
        v55[2] = *(_OWORD *)(v3 + 64);
        v55[3] = v22;
        uint64_t v23 = *(void (**)(void *__return_ptr, _OWORD *, void *, uint64_t, uint64_t, double))(*(void *)v20 + 120);
        type metadata accessor for AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>>();
        CGRect v25 = v24;
        uint64_t v26 = lazy protocol witness table accessor for type AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>> and conformance AnimatablePair<A, B>();
        swift_retain();
        v23(v56, v55, v58, v25, v26, v17);
        swift_release();
        if (v57)
        {
          swift_bridgeObjectRelease();
          uint64_t result = 1;
        }
        else
        {
          uint64_t v28 = *(double *)&v56[6];
          uint64_t v27 = *(double *)&v56[7];
          double v30 = *(double *)&v56[4];
          uint64_t v29 = *(double *)&v56[5];
          double v32 = *(double *)&v56[2];
          double v31 = *(double *)&v56[3];
          uint64_t v54 = a2;
          uint64_t v33 = v17;
          char v35 = *(double *)v56;
          uint64_t v34 = *(double *)&v56[1];
          specialized AnimatorState.updateListeners(isLogicallyComplete:time:environment:)(v60, v33);
          *(void *)(v3 + 24) = v58[0];
          swift_bridgeObjectRelease();
          char v36 = v32 + a1[1].f64[0];
          double v37 = v31 + a1[1].f64[1];
          double v38 = v30 + a1[2].f64[0];
          uint64_t v39 = v29 + a1[2].f64[1];
          char v40 = v28 + a1[3].f64[0];
          uint64_t v41 = v27 + a1[3].f64[1];
          double v42 = *(double *)(v3 + 48);
          double v43 = *(double *)(v3 + 56);
          BOOL v44 = *(double *)(v3 + 64);
          double v45 = *(double *)(v3 + 72);
          double v46 = *(double *)(v3 + 80);
          uint64_t v47 = *(double *)(v3 + 88);
          double v48 = v34 + a1->f64[1] - *(double *)(v3 + 40);
          a1->f64[0] = v35 + a1->f64[0] - *(double *)(v3 + 32);
          a1->f64[1] = v48;
          a1[1].f64[0] = v36 - v42;
          a1[1].f64[1] = v37 - v43;
          a1[2].f64[0] = v38 - v44;
          a1[2].f64[1] = v39 - v45;
          a1[3].f64[0] = v40 - v46;
          a1[3].f64[1] = v41 - v47;
          swift_beginAccess();
          *(double *)(v3 + 128) = v34;
          *(double *)(v3 + 136) = v32;
          *(double *)(v3 + 144) = v31;
          *(double *)(v3 + 152) = v30;
          *(double *)(v3 + 160) = v29;
          *(double *)(v3 + 168) = v28;
          *(double *)(v3 + 176) = v27;
          *(double *)(v3 + 112) = v54;
          *(double *)(v3 + 120) = v35;
          int v49 = *(double *)(v3 + 104);
          if (v49 > 0.0) {
            *(double *)(v3 + 112) = v49 * (round(v54 / v49) + 1.0);
          }
          uint64_t result = 0;
        }
        break;
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  double v6;
  char v7;
  uint64_t (*v8)(void);
  void *v9;
  double v10;
  uint64_t result;
  double v12;
  double v13;
  uint64_t (*v14)(void);
  void *v15;
  double v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(void *__return_ptr, long long *, void *, uint64_t, uint64_t, double);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  float64x2_t v32;
  long long v33;
  uint64_t v34;
  void v35[3];
  char v36;
  void v37[2];
  char v38;
  char v39;

  uint64_t v3 = v2;
  double v6 = *(double *)(v2 + 64);
  if (*(double *)(v2 + 72) + v6 * -0.5 >= a2)
  {
LABEL_8:
    swift_beginAccess();
    double v10 = *(double *)(v3 + 96) + a1[1].f64[0];
    double v32 = vaddq_f64(*(float64x2_t *)(v3 + 80), *a1);
    swift_beginAccess();
    uint64_t result = 0;
    double v12 = *(double *)(v3 + 48);
    *a1 = vsubq_f64(v32, *(float64x2_t *)(v3 + 32));
    a1[1].f64[0] = v10 - v12;
  }
  else
  {
    switch(*(unsigned char *)(v2 + 109))
    {
      case 1:
        *(unsigned char *)(v2 + 109) = 2;
        if (one-time initialization token for shared != -1) {
          swift_once();
        }
        swift_beginAccess();
        double v8 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared) + 0x60);
        double v9 = static CoreGlue.shared;
        LOBYTE(v8) = v8();

        if (v8) {
          goto LABEL_19;
        }
        *(double *)(v3 + 72) = *(double *)(v3 + 72) - *(double *)(v3 + 56) + a2;
        *(double *)(v3 + 56) = a2;
        goto LABEL_8;
      case 2:
        if (v6 < 0.0166666667) {
          uint64_t v13 = 0.0333333333;
        }
        else {
          uint64_t v13 = v6 + v6;
        }
        if (v13 < a2 - *(double *)(v2 + 56))
        {
          if (one-time initialization token for shared != -1) {
            swift_once();
          }
          swift_beginAccess();
          uint64_t v14 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared) + 0x60);
          double v15 = static CoreGlue.shared;
          LOBYTE(v14) = v14();

          if ((v14 & 1) == 0) {
            *(double *)(v3 + 56) = a2 - v13;
          }
        }
        char v7 = 3;
        goto LABEL_18;
      case 3:
        goto LABEL_19;
      default:
        *(double *)(v2 + 56) = a2;
        char v7 = 1;
LABEL_18:
        *(unsigned char *)(v3 + 109) = v7;
LABEL_19:
        uint64_t v16 = a2 - *(double *)(v3 + 56);
        swift_beginAccess();
        char v17 = *(void *)(v3 + 24);
        uint64_t v18 = *(unsigned char *)(v3 + 128);
        swift_bridgeObjectRetain();
        v37[0] = v17;
        v37[1] = AGCreateWeakAttribute();
        double v38 = 0;
        uint64_t v39 = v18;
        swift_beginAccess();
        long long v19 = *(void *)(v3 + 16);
        swift_beginAccess();
        uint64_t v20 = *(void *)(v3 + 48);
        uint64_t v33 = *(_OWORD *)(v3 + 32);
        uint64_t v34 = v20;
        uint64_t v21 = *(void (**)(void *__return_ptr, long long *, void *, uint64_t, uint64_t, double))(*(void *)v19 + 120);
        type metadata accessor for AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>();
        uint64_t v23 = v22;
        uint64_t v24 = lazy protocol witness table accessor for type AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
        swift_retain();
        v21(v35, &v33, v37, v23, v24, v16);
        swift_release();
        if (v36)
        {
          swift_bridgeObjectRelease();
          uint64_t result = 1;
        }
        else
        {
          CGRect v25 = *(double *)v35;
          uint64_t v26 = *(double *)&v35[1];
          uint64_t v27 = *(double *)&v35[2];
          specialized AnimatorState.updateListeners(isLogicallyComplete:time:environment:)(v39, v16);
          *(void *)(v3 + 24) = v37[0];
          swift_bridgeObjectRelease();
          uint64_t v28 = v27 + a1[1].f64[0];
          uint64_t v29 = *(double *)(v3 + 48);
          double v30 = v26 + a1->f64[1] - *(double *)(v3 + 40);
          a1->f64[0] = v25 + a1->f64[0] - *(double *)(v3 + 32);
          a1->f64[1] = v30;
          a1[1].f64[0] = v28 - v29;
          swift_beginAccess();
          *(double *)(v3 + 88) = v26;
          *(double *)(v3 + 96) = v27;
          *(double *)(v3 + 72) = a2;
          *(double *)(v3 + 80) = v25;
          double v31 = *(double *)(v3 + 64);
          if (v31 > 0.0) {
            *(double *)(v3 + 72) = v31 * (round(a2 / v31) + 1.0);
          }
          uint64_t result = 0;
        }
        break;
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  double v6;
  char v7;
  uint64_t (*v8)(void);
  void *v9;
  uint64_t result;
  float64x2_t v11;
  double v12;
  uint64_t (*v13)(void);
  void *v14;
  double v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  float64x2_t v33;
  float64x2_t v34;
  void v35[2];
  char v36;
  char v37;
  void v38[5];
  unsigned char v39[40];

  uint64_t v3 = v2;
  double v6 = *(double *)(v2 + 72);
  if (*(double *)(v2 + 80) + v6 * -0.5 >= a2)
  {
LABEL_8:
    swift_beginAccess();
    uint64_t v33 = vaddq_f64(*(float64x2_t *)(v3 + 88), *a1);
    uint64_t v34 = vaddq_f64(*(float64x2_t *)(v3 + 104), a1[1]);
    swift_beginAccess();
    uint64_t result = 0;
    float64x2_t v11 = vsubq_f64(v34, *(float64x2_t *)(v3 + 48));
    *a1 = vsubq_f64(v33, *(float64x2_t *)(v3 + 32));
    a1[1] = v11;
  }
  else
  {
    switch(*(unsigned char *)(v2 + 125))
    {
      case 1:
        *(unsigned char *)(v2 + 125) = 2;
        if (one-time initialization token for shared != -1) {
          swift_once();
        }
        swift_beginAccess();
        double v8 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared) + 0x60);
        double v9 = static CoreGlue.shared;
        LOBYTE(v8) = v8();

        if (v8) {
          goto LABEL_19;
        }
        *(double *)(v3 + 80) = *(double *)(v3 + 80) - *(double *)(v3 + 64) + a2;
        *(double *)(v3 + 64) = a2;
        goto LABEL_8;
      case 2:
        if (v6 < 0.0166666667) {
          double v12 = 0.0333333333;
        }
        else {
          double v12 = v6 + v6;
        }
        if (v12 < a2 - *(double *)(v2 + 64))
        {
          if (one-time initialization token for shared != -1) {
            swift_once();
          }
          swift_beginAccess();
          uint64_t v13 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared) + 0x60);
          uint64_t v14 = static CoreGlue.shared;
          LOBYTE(v13) = v13();

          if ((v13 & 1) == 0) {
            *(double *)(v3 + 64) = a2 - v12;
          }
        }
        char v7 = 3;
        goto LABEL_18;
      case 3:
        goto LABEL_19;
      default:
        *(double *)(v2 + 64) = a2;
        char v7 = 1;
LABEL_18:
        *(unsigned char *)(v3 + 125) = v7;
LABEL_19:
        double v15 = a2 - *(double *)(v3 + 64);
        swift_beginAccess();
        uint64_t v16 = *(void *)(v3 + 24);
        char v17 = *(unsigned char *)(v3 + 144);
        swift_bridgeObjectRetain();
        v35[0] = v16;
        v35[1] = AGCreateWeakAttribute();
        char v36 = 0;
        double v37 = v17;
        swift_beginAccess();
        uint64_t v18 = *(void *)(v3 + 16);
        swift_beginAccess();
        long long v19 = *(double *)(v3 + 32);
        uint64_t v20 = *(double *)(v3 + 40);
        uint64_t v21 = *(double *)(v3 + 48);
        uint64_t v22 = *(double *)(v3 + 56);
        swift_retain();
        specialized Animation.animate<A>(value:time:context:)((uint64_t)v35, v18, (uint64_t)v38, v19, v20, v21, v22, v15);
        uint64_t v23 = *(double *)v38;
        uint64_t v24 = *(double *)&v38[1];
        CGRect v25 = *(double *)&v38[2];
        uint64_t v26 = *(double *)&v38[3];
        swift_release();
        outlined init with take of AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>?((uint64_t)v38, (uint64_t)v39, (uint64_t (*)(void))type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>?);
        if (v39[32])
        {
          swift_bridgeObjectRelease();
          uint64_t result = 1;
        }
        else
        {
          specialized AnimatorState.updateListeners(isLogicallyComplete:time:environment:)(v37, v15);
          *(void *)(v3 + 24) = v35[0];
          swift_bridgeObjectRelease();
          uint64_t v27 = v25 + a1[1].f64[0];
          uint64_t v28 = v26 + a1[1].f64[1];
          uint64_t v29 = *(double *)(v3 + 48);
          double v30 = *(double *)(v3 + 56);
          double v31 = v24 + a1->f64[1] - *(double *)(v3 + 40);
          a1->f64[0] = v23 + a1->f64[0] - *(double *)(v3 + 32);
          a1->f64[1] = v31;
          a1[1].f64[0] = v27 - v29;
          a1[1].f64[1] = v28 - v30;
          swift_beginAccess();
          *(double *)(v3 + 96) = v24;
          *(double *)(v3 + 104) = v25;
          *(double *)(v3 + 112) = v26;
          *(double *)(v3 + 80) = a2;
          *(double *)(v3 + 88) = v23;
          double v32 = *(double *)(v3 + 72);
          if (v32 > 0.0) {
            *(double *)(v3 + 80) = v32 * (round(a2 / v32) + 1.0);
          }
          uint64_t result = 0;
        }
        break;
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  double v6;
  char v7;
  uint64_t (*v8)(void);
  void *v9;
  char v10;
  uint64_t v11;
  char v12;
  float64x2_t v13;
  double v15;
  uint64_t (*v16)(void);
  void *v17;
  double v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  long long v22;
  double v23;
  char v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  char v36;
  double v37;
  double v38;
  float64x2_t v39;
  float64x2_t v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  char v47;
  uint64_t v48;
  char v49;
  void v50[2];
  char v51;
  char v52;
  long long v53;
  _OWORD v54[2];

  uint64_t v3 = v2;
  double v6 = *(double *)(v2 + 88);
  if (*(double *)(v2 + 96) + v6 * -0.5 >= a2)
  {
LABEL_8:
    swift_beginAccess();
    double v10 = *(unsigned char *)(v3 + 144);
    double v42 = *(double *)(v3 + 136);
    LOBYTE(v43) = v10;
    uint64_t v39 = vaddq_f64(*(float64x2_t *)(v3 + 104), *a1);
    char v40 = vaddq_f64(*(float64x2_t *)(v3 + 120), a1[1]);
    ResolvedGradientVector.add(_:scaledBy:)((uint64_t)&v42, 1.0);
    swift_beginAccess();
    float64x2_t v11 = *(void *)(v3 + 64);
    double v12 = *(unsigned char *)(v3 + 72);
    uint64_t v13 = vsubq_f64(v40, *(float64x2_t *)(v3 + 48));
    *a1 = vsubq_f64(v39, *(float64x2_t *)(v3 + 32));
    a1[1] = v13;
    double v48 = v11;
    int v49 = v12;
    ResolvedGradientVector.add(_:scaledBy:)((uint64_t)&v48, -1.0);
  }
  else
  {
    switch(*(unsigned char *)(v2 + 153))
    {
      case 1:
        *(unsigned char *)(v2 + 153) = 2;
        if (one-time initialization token for shared != -1) {
          swift_once();
        }
        swift_beginAccess();
        double v8 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared) + 0x60);
        double v9 = static CoreGlue.shared;
        LOBYTE(v8) = v8();

        if (v8) {
          goto LABEL_20;
        }
        *(double *)(v3 + 96) = *(double *)(v3 + 96) - *(double *)(v3 + 80) + a2;
        *(double *)(v3 + 80) = a2;
        goto LABEL_8;
      case 2:
        if (v6 < 0.0166666667) {
          double v15 = 0.0333333333;
        }
        else {
          double v15 = v6 + v6;
        }
        if (v15 < a2 - *(double *)(v2 + 80))
        {
          if (one-time initialization token for shared != -1) {
            swift_once();
          }
          swift_beginAccess();
          uint64_t v16 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared) + 0x60);
          char v17 = static CoreGlue.shared;
          LOBYTE(v16) = v16();

          if ((v16 & 1) == 0) {
            *(double *)(v3 + 80) = a2 - v15;
          }
        }
        char v7 = 3;
        goto LABEL_19;
      case 3:
        goto LABEL_20;
      default:
        *(double *)(v2 + 80) = a2;
        char v7 = 1;
LABEL_19:
        *(unsigned char *)(v3 + 153) = v7;
LABEL_20:
        uint64_t v18 = a2 - *(double *)(v3 + 80);
        swift_beginAccess();
        long long v19 = *(void *)(v3 + 24);
        uint64_t v20 = *(unsigned char *)(v3 + 176);
        swift_bridgeObjectRetain();
        v50[0] = v19;
        v50[1] = AGCreateWeakAttribute();
        uint64_t v51 = 0;
        uint64_t v52 = v20;
        swift_beginAccess();
        uint64_t v21 = *(void *)(v3 + 16);
        swift_beginAccess();
        uint64_t v22 = *(_OWORD *)(v3 + 48);
        double v53 = *(_OWORD *)(v3 + 32);
        v54[0] = v22;
        *(_OWORD *)((char *)v54 + 9) = *(_OWORD *)(v3 + 57);
        swift_retain();
        outlined retain of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>((uint64_t)&v53);
        specialized Animation.animate<A>(value:time:context:)(&v53, (uint64_t)v50, v21, (uint64_t)&v42, v18);
        swift_release();
        outlined release of AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>((uint64_t)&v53);
        uint64_t v23 = v46;
        if (v46 == 0.0)
        {
          swift_bridgeObjectRelease();
          return 1;
        }
        uint64_t v24 = v47;
        CGRect v25 = v44;
        uint64_t v26 = v45;
        uint64_t v41 = v44;
        uint64_t v28 = v42;
        uint64_t v27 = v43;
        specialized AnimatorState.updateListeners(isLogicallyComplete:time:environment:)(v52, v18);
        *(void *)(v3 + 24) = v50[0];
        swift_bridgeObjectRelease();
        uint64_t v29 = v28 + a1->f64[0];
        double v30 = v27 + a1->f64[1];
        double v31 = v25 + a1[1].f64[0];
        double v32 = v26 + a1[1].f64[1];
        double v42 = v23;
        LOBYTE(v43) = v24;
        ResolvedGradientVector.add(_:scaledBy:)((uint64_t)&v42, 1.0);
        uint64_t v33 = *(double *)(v3 + 48);
        uint64_t v34 = *(double *)(v3 + 56);
        char v35 = *(double *)(v3 + 64);
        char v36 = *(unsigned char *)(v3 + 72);
        double v37 = v30 - *(double *)(v3 + 40);
        a1->f64[0] = v29 - *(double *)(v3 + 32);
        a1->f64[1] = v37;
        a1[1].f64[0] = v31 - v33;
        a1[1].f64[1] = v32 - v34;
        double v42 = v35;
        LOBYTE(v43) = v36;
        ResolvedGradientVector.add(_:scaledBy:)((uint64_t)&v42, -1.0);
        swift_beginAccess();
        *(double *)(v3 + 104) = v28;
        *(double *)(v3 + 112) = v27;
        *(double *)(v3 + 120) = v41;
        *(double *)(v3 + 128) = v26;
        *(double *)(v3 + 136) = v23;
        *(unsigned char *)(v3 + 144) = v24;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(double *)(v3 + 96) = a2;
        double v38 = *(double *)(v3 + 88);
        swift_bridgeObjectRelease();
        if (v38 > 0.0) {
          *(double *)(v3 + 96) = (round(a2 / v38) + 1.0) * *(double *)(v3 + 88);
        }
        break;
    }
  }
  return 0;
}

{
  uint64_t v2;
  uint64_t v3;
  double v6;
  char v7;
  uint64_t (*v8)(void);
  void *v9;
  double v10;
  uint64_t result;
  double v12;
  float64x2_t v13;
  double v14;
  uint64_t (*v15)(void);
  void *v16;
  double v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  long long v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  float64x2_t v35;
  float64x2_t v36;
  void v37[2];
  char v38;
  char v39;
  void v40[6];
  unsigned char v41[48];
  long long v42[2];
  uint64_t v43;

  uint64_t v3 = v2;
  double v6 = *(double *)(v2 + 80);
  if (*(double *)(v2 + 88) + v6 * -0.5 >= a2)
  {
LABEL_8:
    swift_beginAccess();
    double v10 = *(double *)(v3 + 128) + a1[2].f64[0];
    char v35 = vaddq_f64(*(float64x2_t *)(v3 + 96), *a1);
    char v36 = vaddq_f64(*(float64x2_t *)(v3 + 112), a1[1]);
    swift_beginAccess();
    uint64_t result = 0;
    double v12 = *(double *)(v3 + 64);
    uint64_t v13 = vsubq_f64(v36, *(float64x2_t *)(v3 + 48));
    *a1 = vsubq_f64(v35, *(float64x2_t *)(v3 + 32));
    a1[1] = v13;
    a1[2].f64[0] = v10 - v12;
  }
  else
  {
    switch(*(unsigned char *)(v2 + 141))
    {
      case 1:
        *(unsigned char *)(v2 + 141) = 2;
        if (one-time initialization token for shared != -1) {
          swift_once();
        }
        swift_beginAccess();
        double v8 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared) + 0x60);
        double v9 = static CoreGlue.shared;
        LOBYTE(v8) = v8();

        if (v8) {
          goto LABEL_19;
        }
        *(double *)(v3 + 88) = *(double *)(v3 + 88) - *(double *)(v3 + 72) + a2;
        *(double *)(v3 + 72) = a2;
        goto LABEL_8;
      case 2:
        if (v6 < 0.0166666667) {
          uint64_t v14 = 0.0333333333;
        }
        else {
          uint64_t v14 = v6 + v6;
        }
        if (v14 < a2 - *(double *)(v2 + 72))
        {
          if (one-time initialization token for shared != -1) {
            swift_once();
          }
          swift_beginAccess();
          double v15 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared) + 0x60);
          uint64_t v16 = static CoreGlue.shared;
          LOBYTE(v15) = v15();

          if ((v15 & 1) == 0) {
            *(double *)(v3 + 72) = a2 - v14;
          }
        }
        char v7 = 3;
        goto LABEL_18;
      case 3:
        goto LABEL_19;
      default:
        *(double *)(v2 + 72) = a2;
        char v7 = 1;
LABEL_18:
        *(unsigned char *)(v3 + 141) = v7;
LABEL_19:
        char v17 = a2 - *(double *)(v3 + 72);
        swift_beginAccess();
        uint64_t v18 = *(void *)(v3 + 24);
        long long v19 = *(unsigned char *)(v3 + 160);
        swift_bridgeObjectRetain();
        v37[0] = v18;
        v37[1] = AGCreateWeakAttribute();
        double v38 = 0;
        uint64_t v39 = v19;
        swift_beginAccess();
        uint64_t v20 = *(void *)(v3 + 16);
        swift_beginAccess();
        uint64_t v21 = *(_OWORD *)(v3 + 48);
        v42[0] = *(_OWORD *)(v3 + 32);
        v42[1] = v21;
        double v43 = *(void *)(v3 + 64);
        swift_retain();
        specialized Animation.animate<A>(value:time:context:)(v42, (uint64_t)v37, v20, (uint64_t)v40, v17);
        uint64_t v22 = *(double *)v40;
        uint64_t v23 = *(double *)&v40[1];
        uint64_t v24 = *(double *)&v40[2];
        CGRect v25 = *(double *)&v40[3];
        uint64_t v26 = *(double *)&v40[4];
        swift_release();
        outlined init with take of AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>?((uint64_t)v40, (uint64_t)v41, (uint64_t (*)(void))type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>?);
        if (v41[40])
        {
          swift_bridgeObjectRelease();
          uint64_t result = 1;
        }
        else
        {
          specialized AnimatorState.updateListeners(isLogicallyComplete:time:environment:)(v39, v17);
          *(void *)(v3 + 24) = v37[0];
          swift_bridgeObjectRelease();
          uint64_t v27 = v24 + a1[1].f64[0];
          uint64_t v28 = v25 + a1[1].f64[1];
          uint64_t v29 = v26 + a1[2].f64[0];
          double v30 = *(double *)(v3 + 48);
          double v31 = *(double *)(v3 + 56);
          double v32 = *(double *)(v3 + 64);
          uint64_t v33 = v23 + a1->f64[1] - *(double *)(v3 + 40);
          a1->f64[0] = v22 + a1->f64[0] - *(double *)(v3 + 32);
          a1->f64[1] = v33;
          a1[1].f64[0] = v27 - v30;
          a1[1].f64[1] = v28 - v31;
          a1[2].f64[0] = v29 - v32;
          swift_beginAccess();
          *(double *)(v3 + 104) = v23;
          *(double *)(v3 + 112) = v24;
          *(double *)(v3 + 120) = v25;
          *(double *)(v3 + 128) = v26;
          *(double *)(v3 + 88) = a2;
          *(double *)(v3 + 96) = v22;
          uint64_t v34 = *(double *)(v3 + 80);
          if (v34 > 0.0) {
            *(double *)(v3 + 88) = v34 * (round(a2 / v34) + 1.0);
          }
          uint64_t result = 0;
        }
        break;
    }
  }
  return result;
}

uint64_t AnimationBox.animate<A>(value:time:context:)@<X0>(double *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v13 = *v6;
  uint64_t v14 = *(void *)(*v6 + 160);
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](a1);
  char v17 = &v23[-v16 - 8];
  if (v18 == MEMORY[0x263F8D538])
  {
    uint64_t result = specialized AnimationBox.animate<A>(value:time:context:)(a2, *a1, a6);
    *(void *)a5 = result;
    *(unsigned char *)(a5 + 8) = v21 & 1;
  }
  else
  {
    type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
    if (v19 == a3)
    {
      specialized AnimationBox.animate<A>(value:time:context:)(a2, (uint64_t)v23, a6);
      return outlined init with take of AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>?((uint64_t)v23, a5);
    }
    else
    {
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v15 + 16))(v17, (uint64_t)v6 + *(void *)(v13 + 176), v14);
      (*(void (**)(double *, uint64_t, uint64_t, uint64_t, uint64_t, double))(*(void *)(v13 + 168) + 16))(a1, a2, a3, a4, v14, a6);
      return (*(uint64_t (**)(unsigned char *, uint64_t))(v15 + 8))(v17, v14);
    }
  }
  return result;
}

void type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>()
{
  if (!lazy cache variable for type metadata for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>)
  {
    type metadata accessor for AnimatablePair<CGFloat, CGFloat>();
    lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>();
    unint64_t v0 = type metadata accessor for AnimatablePair();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>);
    }
  }
}

uint64_t outlined init with take of AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>?()
{
  if (!lazy cache variable for type metadata for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>?)
  {
    type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>?);
    }
  }
}

double specialized AnimationBox.animate<A>(value:time:context:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D4>)
{
  void (*v17)(_OWORD *__return_ptr, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  double result;
  long long v23;
  void v24[4];
  _OWORD v25[2];
  char v26;

  uint64_t v7 = *v3;
  uint64_t v8 = *(void *)(*v3 + 160);
  uint64_t v9 = *(void *)(v8 - 8);
  double v10 = MEMORY[0x270FA5388](a1);
  double v12 = (char *)v24 - v11;
  *(double *)uint64_t v24 = v10;
  v24[1] = v13;
  _OWORD v24[2] = v14;
  v24[3] = v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)v24 - v11, (uint64_t)v3 + *(void *)(v7 + 176), v8);
  uint64_t v16 = *(void *)(v7 + 168);
  char v17 = *(void (**)(_OWORD *__return_ptr, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))(v16 + 16);
  type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
  uint64_t v19 = v18;
  uint64_t v20 = _s7SwiftUI14AnimatablePairVy12CoreGraphics7CGFloatVAFGACyxq_GAA16VectorArithmeticAAWlTm_0(&lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>);
  v17(v25, v24, a1, v19, v20, v8, v16, a3);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  char v21 = v26;
  uint64_t result = *(double *)v25;
  uint64_t v23 = v25[1];
  *(_OWORD *)a2 = v25[0];
  *(_OWORD *)(a2 + 16) = v23;
  *(unsigned char *)(a2 + 32) = v21;
  return result;
}

uint64_t lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s7SwiftUI14AnimatablePairVy12CoreGraphics7CGFloatVAFGACyxq_GAA16VectorArithmeticAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s7SwiftUI14AnimatablePairVy12CoreGraphics7CGFloatVAFGACyxq_GAA16VectorArithmeticAAWlTm_1(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s7SwiftUI14AnimatablePairVy12CoreGraphics7CGFloatVAFGACyxq_GAA16VectorArithmeticAAWlTm_2(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s7SwiftUI14AnimatablePairVy12CoreGraphics7CGFloatVAFGACyxq_GAA16VectorArithmeticAAWlTm_3(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>()
{
  return lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>(&lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>);
}

uint64_t specialized AnimatorState.updateListeners(isLogicallyComplete:time:environment:)(char a1, double a2)
{
  void (*v28)(uint64_t *__return_ptr, _OWORD *, void *, uint64_t, uint64_t, double);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t j;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  _OWORD v44[2];
  uint64_t v45[4];
  char v46;
  void v47[2];
  __int16 v48;

  uint64_t v3 = v2;
  type metadata accessor for Slice<IndexSet>(0, (unint64_t *)&lazy cache variable for type metadata for Slice<IndexSet>, MEMORY[0x263F07978], lazy protocol witness table accessor for type IndexSet and conformance IndexSet, MEMORY[0x263F8E738]);
  MEMORY[0x270FA5388](v6 - 8);
  double v42 = (uint64_t)&v40 - v7;
  uint64_t v8 = type metadata accessor for IndexSet();
  uint64_t v41 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  double v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(v9) = *(unsigned char *)(v3 + 144);
  double v43 = v10;
  if ((v9 & 1) != 0 || (a1 & 1) == 0) {
    goto LABEL_17;
  }
  *(unsigned char *)(v3 + 144) = a1 & 1;
  uint64_t v11 = (uint64_t *)(v3 + 136);
  swift_beginAccess();
  unint64_t v12 = *(void *)(v3 + 136);
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v18) {
      goto LABEL_17;
    }
LABEL_5:
    uint64_t v13 = *v11;
    if ((unint64_t)*v11 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v14 = result;
      if (result) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v14)
      {
LABEL_7:
        if (v14 < 1) {
          goto LABEL_46;
        }
        for (uint64_t i = 0; i != v14; ++i)
        {
          if ((v13 & 0xC000000000000001) != 0)
          {
            uint64_t v17 = MEMORY[0x24C523D60](i, v13);
          }
          else
          {
            uint64_t v17 = *(void *)(v13 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v17 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    uint64_t *v11 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRelease();
    double v10 = v43;
    goto LABEL_17;
  }
  if (*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_5;
  }
LABEL_17:
  uint64_t v19 = (uint64_t *)(v3 + 152);
  uint64_t result = swift_beginAccess();
  if (!*(void *)(*(void *)(v3 + 152) + 16)) {
    return result;
  }
  char v40 = v8;
  IndexSet.init()();
  uint64_t v20 = *(void *)(*v19 + 16);
  if (!v20)
  {
LABEL_39:
    swift_beginAccess();
    double v38 = v42;
    specialized Collection.subscript.getter(v42);
    uint64_t result = specialized MutableCollection.halfStablePartitionByOffset(isSuffixElementAtOffset:)(v19, v38);
    uint64_t v39 = *(void *)(*v19 + 16);
    if (v39 < result) {
      goto LABEL_45;
    }
    specialized Array.replaceSubrange<A>(_:with:)(result, v39);
    outlined destroy of Slice<IndexSet>(v38);
    swift_endAccess();
    return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v10, v40);
  }
  unint64_t v21 = 0;
  while (1)
  {
    swift_beginAccess();
    uint64_t v22 = (void *)*v19;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v19 = (uint64_t)v22;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v22);
      uint64_t v22 = (void *)result;
      *uint64_t v19 = result;
    }
    if (v21 >= v22[2]) {
      break;
    }
    uint64_t v23 = &v22[7 * v21];
    uint64_t v24 = v23[5];
    swift_bridgeObjectRetain();
    uint64_t v25 = AGCreateWeakAttribute();
    v47[0] = v24;
    v47[1] = v25;
    double v48 = 0;
    uint64_t v26 = v23[4];
    long long v27 = *((_OWORD *)v23 + 4);
    v44[0] = *((_OWORD *)v23 + 3);
    v44[1] = v27;
    uint64_t v28 = *(void (**)(uint64_t *__return_ptr, _OWORD *, void *, uint64_t, uint64_t, double))(*(void *)v26 + 120);
    type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
    double v30 = v29;
    double v31 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
    v28(v45, v44, v47, v30, v31, a2);
    if (v46 == 1)
    {
      swift_bridgeObjectRelease();
      double v32 = *v19;
      uint64_t result = swift_endAccess();
    }
    else
    {
      uint64_t v33 = HIBYTE(v48);
      swift_bridgeObjectRelease();
      double v32 = *v19;
      uint64_t result = swift_endAccess();
      if ((v33 & 1) == 0) {
        goto LABEL_21;
      }
    }
    if (v21 >= *(void *)(v32 + 16)) {
      goto LABEL_43;
    }
    uint64_t v34 = *(void *)(v32 + 56 * v21 + 80);
    if (v34 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      char v35 = result;
      if (result)
      {
LABEL_31:
        if (v35 < 1) {
          goto LABEL_44;
        }
        for (j = 0; j != v35; ++j)
        {
          if ((v34 & 0xC000000000000001) != 0)
          {
            double v37 = MEMORY[0x24C523D60](j, v34);
          }
          else
          {
            double v37 = *(void *)(v34 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v37 + 96))();
          swift_release();
        }
      }
    }
    else
    {
      char v35 = *(void *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v35) {
        goto LABEL_31;
      }
    }
    swift_bridgeObjectRelease();
    double v10 = v43;
    IndexSet.insert(_:)(v21);
LABEL_21:
    if (++v21 == v20) {
      goto LABEL_39;
    }
  }
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t i;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t j;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  void v41[2];
  __int16 v42;

  uint64_t v3 = v2;
  type metadata accessor for Slice<IndexSet>(0, (unint64_t *)&lazy cache variable for type metadata for Slice<IndexSet>, MEMORY[0x263F07978], lazy protocol witness table accessor for type IndexSet and conformance IndexSet, MEMORY[0x263F8E738]);
  MEMORY[0x270FA5388](v6 - 8);
  double v37 = (uint64_t)&v35 - v7;
  uint64_t v8 = type metadata accessor for IndexSet();
  char v35 = *(void *)(v8 - 8);
  char v36 = v8;
  MEMORY[0x270FA5388](v8);
  double v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned char *)(v2 + 96) & 1) != 0 || (a1 & 1) == 0) {
    goto LABEL_17;
  }
  *(unsigned char *)(v2 + 96) = a1 & 1;
  uint64_t v11 = (uint64_t *)(v2 + 88);
  swift_beginAccess();
  unint64_t v12 = *(void *)(v2 + 88);
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v18) {
      goto LABEL_17;
    }
LABEL_5:
    uint64_t v13 = *v11;
    if ((unint64_t)*v11 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v14 = result;
      if (result) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v14)
      {
LABEL_7:
        if (v14 < 1) {
          goto LABEL_46;
        }
        for (uint64_t i = 0; i != v14; ++i)
        {
          if ((v13 & 0xC000000000000001) != 0)
          {
            uint64_t v17 = MEMORY[0x24C523D60](i, v13);
          }
          else
          {
            uint64_t v17 = *(void *)(v13 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v17 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    uint64_t *v11 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  if (*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_5;
  }
LABEL_17:
  uint64_t v19 = (uint64_t *)(v3 + 104);
  uint64_t result = swift_beginAccess();
  if (!*(void *)(*(void *)(v3 + 104) + 16)) {
    return result;
  }
  IndexSet.init()();
  uint64_t v20 = *(void *)(*v19 + 16);
  if (!v20)
  {
LABEL_39:
    swift_beginAccess();
    uint64_t v33 = v37;
    specialized Collection.subscript.getter(v37);
    uint64_t result = specialized MutableCollection.halfStablePartitionByOffset(isSuffixElementAtOffset:)(v19, v33);
    uint64_t v34 = *(void *)(*v19 + 16);
    if (v34 < result) {
      goto LABEL_45;
    }
    specialized Array.replaceSubrange<A>(_:with:)(result, v34);
    outlined destroy of Slice<IndexSet>(v33);
    swift_endAccess();
    return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v10, v36);
  }
  unint64_t v21 = 0;
  while (1)
  {
    swift_beginAccess();
    uint64_t v22 = (void *)*v19;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v19 = (uint64_t)v22;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v22);
      uint64_t v22 = (void *)result;
      *uint64_t v19 = result;
    }
    if (v21 >= v22[2]) {
      break;
    }
    uint64_t v23 = &v22[4 * v21];
    uint64_t v24 = v23[5];
    swift_bridgeObjectRetain();
    uint64_t v25 = AGCreateWeakAttribute();
    v41[0] = v24;
    v41[1] = v25;
    double v42 = 0;
    uint64_t v26 = v23[4];
    double v38 = v23[6];
    (*(void (**)(uint64_t *__return_ptr, uint64_t *, void *, void, _UNKNOWN **, double))(*(void *)v26 + 120))(&v39, &v38, v41, MEMORY[0x263F8D538], &protocol witness table for Double, a2);
    if (v40 == 1)
    {
      swift_bridgeObjectRelease();
      long long v27 = *v19;
      uint64_t result = swift_endAccess();
    }
    else
    {
      uint64_t v28 = HIBYTE(v42);
      swift_bridgeObjectRelease();
      long long v27 = *v19;
      uint64_t result = swift_endAccess();
      if ((v28 & 1) == 0) {
        goto LABEL_21;
      }
    }
    if (v21 >= *(void *)(v27 + 16)) {
      goto LABEL_43;
    }
    uint64_t v29 = *(void *)(v27 + 32 * v21 + 56);
    if (v29 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      double v30 = result;
      if (result)
      {
LABEL_31:
        if (v30 < 1) {
          goto LABEL_44;
        }
        for (j = 0; j != v30; ++j)
        {
          if ((v29 & 0xC000000000000001) != 0)
          {
            double v32 = MEMORY[0x24C523D60](j, v29);
          }
          else
          {
            double v32 = *(void *)(v29 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v32 + 96))();
          swift_release();
        }
      }
    }
    else
    {
      double v30 = *(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v30) {
        goto LABEL_31;
      }
    }
    swift_bridgeObjectRelease();
    IndexSet.insert(_:)(v21);
LABEL_21:
    if (++v21 == v20) {
      goto LABEL_39;
    }
  }
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t i;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t *__return_ptr, long long *, void *, uint64_t, uint64_t, double);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t j;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  long long v43;
  uint64_t v44;
  char v45;
  void v46[2];
  __int16 v47;

  uint64_t v3 = v2;
  type metadata accessor for Slice<IndexSet>(0, (unint64_t *)&lazy cache variable for type metadata for Slice<IndexSet>, MEMORY[0x263F07978], lazy protocol witness table accessor for type IndexSet and conformance IndexSet, MEMORY[0x263F8E738]);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v41 = (uint64_t)&v39 - v7;
  uint64_t v8 = type metadata accessor for IndexSet();
  char v40 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  double v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(v9) = *(unsigned char *)(v3 + 112);
  double v42 = v10;
  if ((v9 & 1) != 0 || (a1 & 1) == 0) {
    goto LABEL_17;
  }
  *(unsigned char *)(v3 + 112) = a1 & 1;
  uint64_t v11 = (uint64_t *)(v3 + 104);
  swift_beginAccess();
  unint64_t v12 = *(void *)(v3 + 104);
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v18) {
      goto LABEL_17;
    }
LABEL_5:
    uint64_t v13 = *v11;
    if ((unint64_t)*v11 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v14 = result;
      if (result) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v14)
      {
LABEL_7:
        if (v14 < 1) {
          goto LABEL_46;
        }
        for (uint64_t i = 0; i != v14; ++i)
        {
          if ((v13 & 0xC000000000000001) != 0)
          {
            uint64_t v17 = MEMORY[0x24C523D60](i, v13);
          }
          else
          {
            uint64_t v17 = *(void *)(v13 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v17 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    uint64_t *v11 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRelease();
    double v10 = v42;
    goto LABEL_17;
  }
  if (*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_5;
  }
LABEL_17:
  uint64_t v19 = (uint64_t *)(v3 + 120);
  uint64_t result = swift_beginAccess();
  if (!*(void *)(*(void *)(v3 + 120) + 16)) {
    return result;
  }
  uint64_t v39 = v8;
  IndexSet.init()();
  uint64_t v20 = *(void *)(*v19 + 16);
  if (!v20)
  {
LABEL_39:
    swift_beginAccess();
    double v37 = v41;
    specialized Collection.subscript.getter(v41);
    uint64_t result = specialized MutableCollection.halfStablePartitionByOffset(isSuffixElementAtOffset:)(v19, v37);
    double v38 = *(void *)(*v19 + 16);
    if (v38 < result) {
      goto LABEL_45;
    }
    specialized Array.replaceSubrange<A>(_:with:)(result, v38);
    outlined destroy of Slice<IndexSet>(v37);
    swift_endAccess();
    return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v10, v39);
  }
  unint64_t v21 = 0;
  while (1)
  {
    swift_beginAccess();
    uint64_t v22 = (void *)*v19;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v19 = (uint64_t)v22;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v22);
      uint64_t v22 = (void *)result;
      *uint64_t v19 = result;
    }
    if (v21 >= v22[2]) {
      break;
    }
    uint64_t v23 = &v22[5 * v21];
    uint64_t v24 = v23[5];
    swift_bridgeObjectRetain();
    uint64_t v25 = AGCreateWeakAttribute();
    v46[0] = v24;
    v46[1] = v25;
    uint64_t v47 = 0;
    uint64_t v26 = v23[4];
    double v43 = *((_OWORD *)v23 + 3);
    long long v27 = *(void (**)(uint64_t *__return_ptr, long long *, void *, uint64_t, uint64_t, double))(*(void *)v26 + 120);
    type metadata accessor for AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>(0);
    uint64_t v29 = v28;
    double v30 = lazy protocol witness table accessor for type AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>> and conformance AnimatablePair<A, B>();
    v27(&v44, &v43, v46, v29, v30, a2);
    if (v45 == 1)
    {
      swift_bridgeObjectRelease();
      double v31 = *v19;
      uint64_t result = swift_endAccess();
    }
    else
    {
      double v32 = HIBYTE(v47);
      swift_bridgeObjectRelease();
      double v31 = *v19;
      uint64_t result = swift_endAccess();
      if ((v32 & 1) == 0) {
        goto LABEL_21;
      }
    }
    if (v21 >= *(void *)(v31 + 16)) {
      goto LABEL_43;
    }
    uint64_t v33 = *(void *)(v31 + 40 * v21 + 64);
    if (v33 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v34 = result;
      if (result)
      {
LABEL_31:
        if (v34 < 1) {
          goto LABEL_44;
        }
        for (j = 0; j != v34; ++j)
        {
          if ((v33 & 0xC000000000000001) != 0)
          {
            char v36 = MEMORY[0x24C523D60](j, v33);
          }
          else
          {
            char v36 = *(void *)(v33 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v36 + 96))();
          swift_release();
        }
      }
    }
    else
    {
      uint64_t v34 = *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v34) {
        goto LABEL_31;
      }
    }
    swift_bridgeObjectRelease();
    double v10 = v42;
    IndexSet.insert(_:)(v21);
LABEL_21:
    if (++v21 == v20) {
      goto LABEL_39;
    }
  }
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t i;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t *__return_ptr, uint64_t *, void *, void, unint64_t, double);
  unint64_t v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t j;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  void v43[2];
  __int16 v44;

  uint64_t v3 = v2;
  type metadata accessor for Slice<IndexSet>(0, (unint64_t *)&lazy cache variable for type metadata for Slice<IndexSet>, MEMORY[0x263F07978], lazy protocol witness table accessor for type IndexSet and conformance IndexSet, MEMORY[0x263F8E738]);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v39 = (uint64_t)&v37 - v7;
  uint64_t v8 = type metadata accessor for IndexSet();
  double v38 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  double v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned char *)(v3 + 96) & 1) != 0 || (a1 & 1) == 0) {
    goto LABEL_17;
  }
  *(unsigned char *)(v3 + 96) = a1 & 1;
  uint64_t v11 = (uint64_t *)(v3 + 88);
  swift_beginAccess();
  unint64_t v12 = *(void *)(v3 + 88);
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v18) {
      goto LABEL_17;
    }
LABEL_5:
    uint64_t v13 = *v11;
    if ((unint64_t)*v11 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v14 = result;
      if (result) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v14)
      {
LABEL_7:
        if (v14 < 1) {
          goto LABEL_46;
        }
        for (uint64_t i = 0; i != v14; ++i)
        {
          if ((v13 & 0xC000000000000001) != 0)
          {
            uint64_t v17 = MEMORY[0x24C523D60](i, v13);
          }
          else
          {
            uint64_t v17 = *(void *)(v13 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v17 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    uint64_t *v11 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  if (*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_5;
  }
LABEL_17:
  uint64_t v19 = (uint64_t *)(v3 + 104);
  uint64_t result = swift_beginAccess();
  if (!*(void *)(*(void *)(v3 + 104) + 16)) {
    return result;
  }
  double v37 = v8;
  IndexSet.init()();
  uint64_t v20 = *(void *)(*v19 + 16);
  if (!v20)
  {
LABEL_39:
    swift_beginAccess();
    char v35 = v39;
    specialized Collection.subscript.getter(v39);
    uint64_t result = specialized MutableCollection.halfStablePartitionByOffset(isSuffixElementAtOffset:)(v19, v35);
    char v36 = *(void *)(*v19 + 16);
    if (v36 < result) {
      goto LABEL_45;
    }
    specialized Array.replaceSubrange<A>(_:with:)(result, v36);
    outlined destroy of Slice<IndexSet>(v35);
    swift_endAccess();
    return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v10, v37);
  }
  unint64_t v21 = 0;
  while (1)
  {
    swift_beginAccess();
    uint64_t v22 = (void *)*v19;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v19 = (uint64_t)v22;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v22);
      uint64_t v22 = (void *)result;
      *uint64_t v19 = result;
    }
    if (v21 >= v22[2]) {
      break;
    }
    uint64_t v23 = &v22[4 * v21];
    uint64_t v24 = v23[5];
    swift_bridgeObjectRetain();
    uint64_t v25 = AGCreateWeakAttribute();
    v43[0] = v24;
    v43[1] = v25;
    BOOL v44 = 0;
    uint64_t v26 = v23[4];
    char v40 = v23[6];
    long long v27 = *(void (**)(uint64_t *__return_ptr, uint64_t *, void *, void, unint64_t, double))(*(void *)v26 + 120);
    uint64_t v28 = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    v27(&v41, &v40, v43, MEMORY[0x263F8EF38], v28, a2);
    if (v42 == 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v29 = *v19;
      uint64_t result = swift_endAccess();
    }
    else
    {
      double v30 = HIBYTE(v44);
      swift_bridgeObjectRelease();
      uint64_t v29 = *v19;
      uint64_t result = swift_endAccess();
      if ((v30 & 1) == 0) {
        goto LABEL_21;
      }
    }
    if (v21 >= *(void *)(v29 + 16)) {
      goto LABEL_43;
    }
    double v31 = *(void *)(v29 + 32 * v21 + 56);
    if (v31 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      double v32 = result;
      if (result)
      {
LABEL_31:
        if (v32 < 1) {
          goto LABEL_44;
        }
        for (j = 0; j != v32; ++j)
        {
          if ((v31 & 0xC000000000000001) != 0)
          {
            uint64_t v34 = MEMORY[0x24C523D60](j, v31);
          }
          else
          {
            uint64_t v34 = *(void *)(v31 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v34 + 96))();
          swift_release();
        }
      }
    }
    else
    {
      double v32 = *(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v32) {
        goto LABEL_31;
      }
    }
    swift_bridgeObjectRelease();
    IndexSet.insert(_:)(v21);
LABEL_21:
    if (++v21 == v20) {
      goto LABEL_39;
    }
  }
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t i;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  long long v27;
  long long v28;
  long long v29;
  void (*v30)(uint64_t *__return_ptr, _OWORD *, void *, uint64_t, uint64_t, double);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t j;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  _OWORD v46[4];
  uint64_t v47[8];
  char v48;
  void v49[2];
  __int16 v50;

  uint64_t v3 = v2;
  type metadata accessor for Slice<IndexSet>(0, (unint64_t *)&lazy cache variable for type metadata for Slice<IndexSet>, MEMORY[0x263F07978], lazy protocol witness table accessor for type IndexSet and conformance IndexSet, MEMORY[0x263F8E738]);
  MEMORY[0x270FA5388](v6 - 8);
  BOOL v44 = (uint64_t)&v42 - v7;
  uint64_t v8 = type metadata accessor for IndexSet();
  double v43 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  double v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(v9) = *(unsigned char *)(v3 + 208);
  double v45 = v10;
  if ((v9 & 1) != 0 || (a1 & 1) == 0) {
    goto LABEL_17;
  }
  *(unsigned char *)(v3 + 208) = a1 & 1;
  uint64_t v11 = (uint64_t *)(v3 + 200);
  swift_beginAccess();
  unint64_t v12 = *(void *)(v3 + 200);
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v18) {
      goto LABEL_17;
    }
LABEL_5:
    uint64_t v13 = *v11;
    if ((unint64_t)*v11 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v14 = result;
      if (result) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v14)
      {
LABEL_7:
        if (v14 < 1) {
          goto LABEL_46;
        }
        for (uint64_t i = 0; i != v14; ++i)
        {
          if ((v13 & 0xC000000000000001) != 0)
          {
            uint64_t v17 = MEMORY[0x24C523D60](i, v13);
          }
          else
          {
            uint64_t v17 = *(void *)(v13 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v17 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    uint64_t *v11 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRelease();
    double v10 = v45;
    goto LABEL_17;
  }
  if (*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_5;
  }
LABEL_17:
  uint64_t v19 = v3 + 216;
  uint64_t result = swift_beginAccess();
  if (!*(void *)(*(void *)(v3 + 216) + 16)) {
    return result;
  }
  double v42 = v8;
  IndexSet.init()();
  uint64_t v20 = *(void *)(*(void *)v19 + 16);
  if (!v20)
  {
LABEL_39:
    swift_beginAccess();
    char v40 = v44;
    specialized Collection.subscript.getter(v44);
    uint64_t result = specialized MutableCollection.halfStablePartitionByOffset(isSuffixElementAtOffset:)(v19, v40);
    uint64_t v41 = *(void *)(*(void *)v19 + 16);
    if (v41 < result) {
      goto LABEL_45;
    }
    specialized Array.replaceSubrange<A>(_:with:)(result, v41);
    outlined destroy of Slice<IndexSet>(v40);
    swift_endAccess();
    return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v10, v42);
  }
  unint64_t v21 = 0;
  while (1)
  {
    swift_beginAccess();
    uint64_t v22 = *(void **)v19;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *(void *)uint64_t v19 = v22;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v22);
      uint64_t v22 = (void *)result;
      *(void *)uint64_t v19 = result;
    }
    if (v21 >= v22[2]) {
      break;
    }
    uint64_t v23 = &v22[11 * v21];
    uint64_t v24 = v23[5];
    swift_bridgeObjectRetain();
    uint64_t v25 = AGCreateWeakAttribute();
    v49[0] = v24;
    v49[1] = v25;
    uint64_t v50 = 0;
    uint64_t v26 = v23[4];
    long long v27 = *((_OWORD *)v23 + 4);
    uint64_t v28 = *((_OWORD *)v23 + 5);
    uint64_t v29 = *((_OWORD *)v23 + 6);
    v46[0] = *((_OWORD *)v23 + 3);
    v46[1] = v27;
    _OWORD v46[2] = v28;
    v46[3] = v29;
    double v30 = *(void (**)(uint64_t *__return_ptr, _OWORD *, void *, uint64_t, uint64_t, double))(*(void *)v26 + 120);
    type metadata accessor for AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>>();
    double v32 = v31;
    uint64_t v33 = lazy protocol witness table accessor for type AnimatablePair<Double, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>>>> and conformance AnimatablePair<A, B>();
    v30(v47, v46, v49, v32, v33, a2);
    if (v48 == 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v34 = *(void *)v19;
      uint64_t result = swift_endAccess();
    }
    else
    {
      char v35 = HIBYTE(v50);
      swift_bridgeObjectRelease();
      uint64_t v34 = *(void *)v19;
      uint64_t result = swift_endAccess();
      if ((v35 & 1) == 0) {
        goto LABEL_21;
      }
    }
    if (v21 >= *(void *)(v34 + 16)) {
      goto LABEL_43;
    }
    char v36 = *(void *)(v34 + 88 * v21 + 112);
    if (v36 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      double v37 = result;
      if (result)
      {
LABEL_31:
        if (v37 < 1) {
          goto LABEL_44;
        }
        for (j = 0; j != v37; ++j)
        {
          if ((v36 & 0xC000000000000001) != 0)
          {
            uint64_t v39 = MEMORY[0x24C523D60](j, v36);
          }
          else
          {
            uint64_t v39 = *(void *)(v36 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v39 + 96))();
          swift_release();
        }
      }
    }
    else
    {
      double v37 = *(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v37) {
        goto LABEL_31;
      }
    }
    swift_bridgeObjectRelease();
    double v10 = v45;
    IndexSet.insert(_:)(v21);
LABEL_21:
    if (++v21 == v20) {
      goto LABEL_39;
    }
  }
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t i;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t *__return_ptr, long long *, void *, uint64_t, uint64_t, double);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t j;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  long long v44;
  uint64_t v45;
  uint64_t v46[3];
  char v47;
  void v48[2];
  __int16 v49;

  uint64_t v3 = v2;
  type metadata accessor for Slice<IndexSet>(0, (unint64_t *)&lazy cache variable for type metadata for Slice<IndexSet>, MEMORY[0x263F07978], lazy protocol witness table accessor for type IndexSet and conformance IndexSet, MEMORY[0x263F8E738]);
  MEMORY[0x270FA5388](v6 - 8);
  double v42 = (uint64_t)&v40 - v7;
  uint64_t v8 = type metadata accessor for IndexSet();
  uint64_t v41 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  double v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(v9) = *(unsigned char *)(v3 + 128);
  double v43 = v10;
  if ((v9 & 1) != 0 || (a1 & 1) == 0) {
    goto LABEL_17;
  }
  *(unsigned char *)(v3 + 128) = a1 & 1;
  uint64_t v11 = (uint64_t *)(v3 + 120);
  swift_beginAccess();
  unint64_t v12 = *(void *)(v3 + 120);
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v18) {
      goto LABEL_17;
    }
LABEL_5:
    uint64_t v13 = *v11;
    if ((unint64_t)*v11 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v14 = result;
      if (result) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v14)
      {
LABEL_7:
        if (v14 < 1) {
          goto LABEL_46;
        }
        for (uint64_t i = 0; i != v14; ++i)
        {
          if ((v13 & 0xC000000000000001) != 0)
          {
            uint64_t v17 = MEMORY[0x24C523D60](i, v13);
          }
          else
          {
            uint64_t v17 = *(void *)(v13 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v17 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    uint64_t *v11 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRelease();
    double v10 = v43;
    goto LABEL_17;
  }
  if (*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_5;
  }
LABEL_17:
  uint64_t v19 = (uint64_t *)(v3 + 136);
  uint64_t result = swift_beginAccess();
  if (!*(void *)(*(void *)(v3 + 136) + 16)) {
    return result;
  }
  char v40 = v8;
  IndexSet.init()();
  uint64_t v20 = *(void *)(*v19 + 16);
  if (!v20)
  {
LABEL_39:
    swift_beginAccess();
    double v38 = v42;
    specialized Collection.subscript.getter(v42);
    uint64_t result = specialized MutableCollection.halfStablePartitionByOffset(isSuffixElementAtOffset:)(v19, v38);
    uint64_t v39 = *(void *)(*v19 + 16);
    if (v39 < result) {
      goto LABEL_45;
    }
    specialized Array.replaceSubrange<A>(_:with:)(result, v39);
    outlined destroy of Slice<IndexSet>(v38);
    swift_endAccess();
    return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v10, v40);
  }
  unint64_t v21 = 0;
  while (1)
  {
    swift_beginAccess();
    uint64_t v22 = (void *)*v19;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v19 = (uint64_t)v22;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v22);
      uint64_t v22 = (void *)result;
      *uint64_t v19 = result;
    }
    if (v21 >= v22[2]) {
      break;
    }
    uint64_t v23 = &v22[6 * v21];
    uint64_t v24 = v23[5];
    swift_bridgeObjectRetain();
    uint64_t v25 = AGCreateWeakAttribute();
    v48[0] = v24;
    v48[1] = v25;
    int v49 = 0;
    uint64_t v26 = v23[4];
    long long v27 = v23[8];
    BOOL v44 = *((_OWORD *)v23 + 3);
    double v45 = v27;
    uint64_t v28 = *(void (**)(uint64_t *__return_ptr, long long *, void *, uint64_t, uint64_t, double))(*(void *)v26 + 120);
    type metadata accessor for AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>();
    double v30 = v29;
    double v31 = lazy protocol witness table accessor for type AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
    v28(v46, &v44, v48, v30, v31, a2);
    if (v47 == 1)
    {
      swift_bridgeObjectRelease();
      double v32 = *v19;
      uint64_t result = swift_endAccess();
    }
    else
    {
      uint64_t v33 = HIBYTE(v49);
      swift_bridgeObjectRelease();
      double v32 = *v19;
      uint64_t result = swift_endAccess();
      if ((v33 & 1) == 0) {
        goto LABEL_21;
      }
    }
    if (v21 >= *(void *)(v32 + 16)) {
      goto LABEL_43;
    }
    uint64_t v34 = *(void *)(v32 + 48 * v21 + 72);
    if (v34 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      char v35 = result;
      if (result)
      {
LABEL_31:
        if (v35 < 1) {
          goto LABEL_44;
        }
        for (j = 0; j != v35; ++j)
        {
          if ((v34 & 0xC000000000000001) != 0)
          {
            double v37 = MEMORY[0x24C523D60](j, v34);
          }
          else
          {
            double v37 = *(void *)(v34 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v37 + 96))();
          swift_release();
        }
      }
    }
    else
    {
      char v35 = *(void *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v35) {
        goto LABEL_31;
      }
    }
    swift_bridgeObjectRelease();
    double v10 = v43;
    IndexSet.insert(_:)(v21);
LABEL_21:
    if (++v21 == v20) {
      goto LABEL_39;
    }
  }
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t i;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(long long *__return_ptr, void *, void *, uint64_t, unint64_t, double);
  unint64_t v35;
  void (*v36)(long long *__return_ptr, void *, void *, uint64_t, uint64_t, double);
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t j;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void v51[5];
  void v52[4];
  long long v53;
  char v54;
  void v55[2];
  __int16 v56;

  uint64_t v3 = v2;
  type metadata accessor for Slice<IndexSet>(0, (unint64_t *)&lazy cache variable for type metadata for Slice<IndexSet>, MEMORY[0x263F07978], lazy protocol witness table accessor for type IndexSet and conformance IndexSet, MEMORY[0x263F8E738]);
  MEMORY[0x270FA5388](v6 - 8);
  int v49 = (uint64_t)&v47 - v7;
  double v48 = type metadata accessor for IndexSet();
  uint64_t v47 = *(void *)(v48 - 8);
  MEMORY[0x270FA5388](v48);
  uint64_t v9 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned char *)(v2 + 144) & 1) != 0 || (a1 & 1) == 0) {
    goto LABEL_17;
  }
  *(unsigned char *)(v2 + 144) = a1 & 1;
  double v10 = (uint64_t *)(v2 + 136);
  swift_beginAccess();
  uint64_t v11 = *(void *)(v2 + 136);
  if (v11 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v17) {
      goto LABEL_17;
    }
LABEL_5:
    unint64_t v12 = *v10;
    if ((unint64_t)*v10 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v13 = result;
      if (result) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v13 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v13)
      {
LABEL_7:
        if (v13 < 1) {
          goto LABEL_50;
        }
        for (uint64_t i = 0; i != v13; ++i)
        {
          if ((v12 & 0xC000000000000001) != 0)
          {
            uint64_t v16 = MEMORY[0x24C523D60](i, v12);
          }
          else
          {
            uint64_t v16 = *(void *)(v12 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v16 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    char *v10 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  if (*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_5;
  }
LABEL_17:
  uint64_t v18 = v3 + 152;
  uint64_t result = swift_beginAccess();
  if (!*(void *)(*(void *)(v3 + 152) + 16)) {
    return result;
  }
  IndexSet.init()();
  uint64_t v19 = *(void *)(*(void *)v18 + 16);
  if (!v19)
  {
LABEL_43:
    swift_beginAccess();
    double v45 = v49;
    specialized Collection.subscript.getter(v49);
    uint64_t result = specialized MutableCollection.halfStablePartitionByOffset(isSuffixElementAtOffset:)(v18, v45);
    double v46 = *(void *)(*(void *)v18 + 16);
    if (v46 < result) {
      goto LABEL_49;
    }
    specialized Array.replaceSubrange<A>(_:with:)(result, v46);
    outlined destroy of Slice<IndexSet>(v45);
    swift_endAccess();
    return (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v9, v48);
  }
  type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>(0, &lazy cache variable for type metadata for AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>>, type metadata accessor for AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>, (void (*)(void))lazy protocol witness table accessor for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>);
  unint64_t v21 = v20;
  uint64_t v22 = 0;
  uint64_t v23 = MEMORY[0x263F8D538];
  uint64_t v50 = v19;
  while (1)
  {
    swift_beginAccess();
    uint64_t v24 = *(void **)v18;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *(void *)uint64_t v18 = v24;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v24);
      uint64_t v24 = (void *)result;
      *(void *)uint64_t v18 = result;
    }
    if (v22 >= v24[2]) {
      break;
    }
    uint64_t v25 = &v24[7 * v22];
    uint64_t v26 = v25[5];
    swift_bridgeObjectRetain();
    long long v27 = AGCreateWeakAttribute();
    v55[0] = v26;
    v55[1] = v27;
    float64_t v56 = 0;
    uint64_t v28 = v25[4];
    uint64_t v29 = v25[6];
    double v30 = v25[7];
    double v31 = v25[8];
    double v32 = v25[9];
    v52[0] = v29;
    v52[1] = v30;
    v52[2] = v31;
    v52[3] = v32;
    if (v21 == v23)
    {
      v51[0] = v29;
      (*(void (**)(long long *__return_ptr, void *, void *, uint64_t, _UNKNOWN **, double))(*(void *)v28 + 120))(&v53, v51, v55, v23, &protocol witness table for Double, a2);
    }
    else
    {
      type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
      if (v21 == v33)
      {
        v51[0] = v29;
        v51[1] = v30;
        v51[2] = v31;
        _DWORD v51[3] = v32;
        char v36 = *(void (**)(long long *__return_ptr, void *, void *, uint64_t, uint64_t, double))(*(void *)v28 + 120);
        double v37 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
        v36(&v53, v51, v55, v21, v37, a2);
      }
      else
      {
        uint64_t v34 = *(void (**)(long long *__return_ptr, void *, void *, uint64_t, unint64_t, double))(*(void *)v28 + 120);
        char v35 = lazy protocol witness table accessor for type AnimatablePair<CGFloat, AnimatablePair<CGFloat, AnimatablePair<CGFloat, CGFloat>>> and conformance AnimatablePair<A, B>();
        v34(&v53, v52, v55, v21, v35, a2);
      }
    }
    double v38 = v54;
    uint64_t v39 = HIBYTE(v56);
    swift_bridgeObjectRelease();
    char v40 = *(void *)v18;
    uint64_t result = swift_endAccess();
    if ((v38 & 1) == 0 && (v39 & 1) == 0) {
      goto LABEL_21;
    }
    if (v22 >= *(void *)(v40 + 16)) {
      goto LABEL_47;
    }
    uint64_t v41 = *(void *)(v40 + 56 * v22 + 80);
    if (v41 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      double v42 = result;
      if (result)
      {
LABEL_35:
        if (v42 < 1) {
          goto LABEL_48;
        }
        for (j = 0; j != v42; ++j)
        {
          if ((v41 & 0xC000000000000001) != 0)
          {
            BOOL v44 = MEMORY[0x24C523D60](j, v41);
          }
          else
          {
            BOOL v44 = *(void *)(v41 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v44 + 96))();
          swift_release();
        }
      }
    }
    else
    {
      double v42 = *(void *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v42) {
        goto LABEL_35;
      }
    }
    swift_bridgeObjectRelease();
    IndexSet.insert(_:)(v22);
    uint64_t v19 = v50;
    uint64_t v23 = MEMORY[0x263F8D538];
LABEL_21:
    if (++v22 == v19) {
      goto LABEL_43;
    }
  }
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t i;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  void (*v36)(long long *__return_ptr, void *, void *, uint64_t, unint64_t, double);
  unint64_t v37;
  int v38;
  void (*v39)(long long *__return_ptr, void *, void *, uint64_t, uint64_t, double);
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t j;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void v52[5];
  void v53[5];
  char v54;
  long long v55;
  uint64_t v56;
  void v57[2];
  __int16 v58;

  uint64_t v3 = v2;
  type metadata accessor for Slice<IndexSet>(0, (unint64_t *)&lazy cache variable for type metadata for Slice<IndexSet>, MEMORY[0x263F07978], lazy protocol witness table accessor for type IndexSet and conformance IndexSet, MEMORY[0x263F8E738]);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v50 = (uint64_t)&v48 - v7;
  int v49 = type metadata accessor for IndexSet();
  double v48 = *(void *)(v49 - 8);
  MEMORY[0x270FA5388](v49);
  uint64_t v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned char *)(v2 + 176) & 1) != 0 || (a1 & 1) == 0) {
    goto LABEL_17;
  }
  *(unsigned char *)(v2 + 176) = a1 & 1;
  double v10 = (uint64_t *)(v2 + 168);
  swift_beginAccess();
  uint64_t v11 = *(void *)(v2 + 168);
  if (v11 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v17) {
      goto LABEL_17;
    }
LABEL_5:
    unint64_t v12 = *v10;
    if ((unint64_t)*v10 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v13 = result;
      if (result) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v13 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v13)
      {
LABEL_7:
        if (v13 < 1) {
          goto LABEL_52;
        }
        for (uint64_t i = 0; i != v13; ++i)
        {
          if ((v12 & 0xC000000000000001) != 0)
          {
            uint64_t v16 = MEMORY[0x24C523D60](i, v12);
          }
          else
          {
            uint64_t v16 = *(void *)(v12 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v16 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    char *v10 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  if (*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_5;
  }
LABEL_17:
  uint64_t v18 = v3 + 184;
  uint64_t result = swift_beginAccess();
  if (!*(void *)(*(void *)(v3 + 184) + 16)) {
    return result;
  }
  IndexSet.init()();
  uint64_t v19 = *(void *)(*(void *)v18 + 16);
  if (!v19)
  {
LABEL_45:
    swift_beginAccess();
    double v46 = v50;
    specialized Collection.subscript.getter(v50);
    uint64_t result = specialized MutableCollection.halfStablePartitionByOffset(isSuffixElementAtOffset:)(v18, v46);
    uint64_t v47 = *(void *)(*(void *)v18 + 16);
    if (v47 < result) {
      goto LABEL_51;
    }
    specialized Array.replaceSubrange<A>(_:with:)(result, v47);
    outlined destroy of Slice<IndexSet>(v46);
    swift_endAccess();
    return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v9, v49);
  }
  type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>(0, &lazy cache variable for type metadata for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector>, (void (*)(void))lazy protocol witness table accessor for type ResolvedGradientVector and conformance ResolvedGradientVector);
  unint64_t v21 = v20;
  uint64_t v22 = 0;
  uint64_t v23 = MEMORY[0x263F8D538];
  uint64_t v51 = v19;
  while (1)
  {
    swift_beginAccess();
    uint64_t v24 = *(void **)v18;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *(void *)uint64_t v18 = v24;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v24);
      uint64_t v24 = (void *)result;
      *(void *)uint64_t v18 = result;
    }
    if (v22 >= v24[2]) {
      break;
    }
    uint64_t v25 = &v24[9 * v22];
    uint64_t v26 = v25[5];
    swift_bridgeObjectRetain();
    long long v27 = AGCreateWeakAttribute();
    v57[0] = v26;
    v57[1] = v27;
    double v58 = 0;
    uint64_t v28 = v25[4];
    uint64_t v29 = v25[6];
    double v30 = v25[7];
    double v31 = v25[8];
    double v32 = v25[9];
    uint64_t v33 = v25[10];
    uint64_t v34 = *((unsigned char *)v25 + 88);
    v53[0] = v29;
    v53[1] = v30;
    v53[2] = v31;
    _DWORD v53[3] = v32;
    v53[4] = v33;
    uint64_t v54 = v34;
    if (v21 == v23)
    {
      v52[0] = v29;
      (*(void (**)(long long *__return_ptr, void *, void *, uint64_t, _UNKNOWN **, double))(*(void *)v28 + 120))(&v55, v52, v57, v23, &protocol witness table for Double, a2);
      if (v56) {
        goto LABEL_30;
      }
    }
    else
    {
      type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
      if (v21 == v35)
      {
        v52[0] = v29;
        v52[1] = v30;
        v52[2] = v31;
        v52[3] = v32;
        uint64_t v39 = *(void (**)(long long *__return_ptr, void *, void *, uint64_t, uint64_t, double))(*(void *)v28 + 120);
        char v40 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
        v39(&v55, v52, v57, v21, v40, a2);
        if (v56)
        {
LABEL_30:
          swift_bridgeObjectRelease();
          double v38 = HIBYTE(v58);
          goto LABEL_33;
        }
      }
      else
      {
        char v36 = *(void (**)(long long *__return_ptr, void *, void *, uint64_t, unint64_t, double))(*(void *)v28 + 120);
        double v37 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, ResolvedGradientVector> and conformance AnimatablePair<A, B>();
        v36(&v55, v53, v57, v21, v37, a2);
        if (v56) {
          goto LABEL_30;
        }
      }
    }
    double v38 = 1;
LABEL_33:
    swift_bridgeObjectRelease();
    uint64_t v41 = *(void *)v18;
    uint64_t result = swift_endAccess();
    if (!v38) {
      goto LABEL_21;
    }
    if (v22 >= *(void *)(v41 + 16)) {
      goto LABEL_49;
    }
    double v42 = *(void *)(v41 + 72 * v22 + 96);
    if (v42 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      double v43 = result;
      if (result)
      {
LABEL_37:
        if (v43 < 1) {
          goto LABEL_50;
        }
        for (j = 0; j != v43; ++j)
        {
          if ((v42 & 0xC000000000000001) != 0)
          {
            double v45 = MEMORY[0x24C523D60](j, v42);
          }
          else
          {
            double v45 = *(void *)(v42 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v45 + 96))();
          swift_release();
        }
      }
    }
    else
    {
      double v43 = *(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v43) {
        goto LABEL_37;
      }
    }
    swift_bridgeObjectRelease();
    IndexSet.insert(_:)(v22);
    uint64_t v19 = v51;
    uint64_t v23 = MEMORY[0x263F8D538];
LABEL_21:
    if (++v22 == v19) {
      goto LABEL_45;
    }
  }
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t i;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(void *__return_ptr, void *, void *, uint64_t, unint64_t, double);
  unint64_t v34;
  void (*v35)(void *__return_ptr, void *, void *, uint64_t, uint64_t, double);
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t j;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void v51[4];
  void v52[2];
  long long v53;
  void v54[3];
  void v55[2];
  __int16 v56;

  uint64_t v3 = v2;
  type metadata accessor for Slice<IndexSet>(0, (unint64_t *)&lazy cache variable for type metadata for Slice<IndexSet>, MEMORY[0x263F07978], lazy protocol witness table accessor for type IndexSet and conformance IndexSet, MEMORY[0x263F8E738]);
  MEMORY[0x270FA5388](v6 - 8);
  int v49 = (uint64_t)&v46 - v7;
  double v48 = type metadata accessor for IndexSet();
  uint64_t v47 = *(void *)(v48 - 8);
  MEMORY[0x270FA5388](v48);
  uint64_t v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned char *)(v2 + 128) & 1) != 0 || (a1 & 1) == 0) {
    goto LABEL_17;
  }
  *(unsigned char *)(v2 + 128) = a1 & 1;
  double v10 = (uint64_t *)(v2 + 120);
  swift_beginAccess();
  uint64_t v11 = *(void *)(v2 + 120);
  if (v11 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v17) {
      goto LABEL_17;
    }
LABEL_5:
    unint64_t v12 = *v10;
    if ((unint64_t)*v10 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v13 = result;
      if (result) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v13 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v13)
      {
LABEL_7:
        if (v13 < 1) {
          goto LABEL_50;
        }
        for (uint64_t i = 0; i != v13; ++i)
        {
          if ((v12 & 0xC000000000000001) != 0)
          {
            uint64_t v16 = MEMORY[0x24C523D60](i, v12);
          }
          else
          {
            uint64_t v16 = *(void *)(v12 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v16 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    char *v10 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  if (*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_5;
  }
LABEL_17:
  uint64_t v18 = v3 + 136;
  uint64_t result = swift_beginAccess();
  if (!*(void *)(*(void *)(v3 + 136) + 16)) {
    return result;
  }
  IndexSet.init()();
  uint64_t v19 = *(void *)(*(void *)v18 + 16);
  if (!v19)
  {
LABEL_43:
    swift_beginAccess();
    BOOL v44 = v49;
    specialized Collection.subscript.getter(v49);
    uint64_t result = specialized MutableCollection.halfStablePartitionByOffset(isSuffixElementAtOffset:)(v18, v44);
    double v45 = *(void *)(*(void *)v18 + 16);
    if (v45 < result) {
      goto LABEL_49;
    }
    specialized Array.replaceSubrange<A>(_:with:)(result, v45);
    outlined destroy of Slice<IndexSet>(v44);
    swift_endAccess();
    return (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v9, v48);
  }
  type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, ResolvedGradientVector>(0, &lazy cache variable for type metadata for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat>, (void (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat);
  unint64_t v21 = v20;
  uint64_t v22 = 0;
  uint64_t v23 = MEMORY[0x263F8D538];
  uint64_t v50 = v19;
  while (1)
  {
    swift_beginAccess();
    uint64_t v24 = *(void **)v18;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *(void *)uint64_t v18 = v24;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v24);
      uint64_t v24 = (void *)result;
      *(void *)uint64_t v18 = result;
    }
    if (v22 >= v24[2]) {
      break;
    }
    uint64_t v25 = &v24[6 * v22];
    uint64_t v26 = v25[5];
    swift_bridgeObjectRetain();
    long long v27 = AGCreateWeakAttribute();
    v55[0] = v26;
    v55[1] = v27;
    float64_t v56 = 0;
    uint64_t v28 = v25[4];
    uint64_t v29 = v25[6];
    double v30 = v25[7];
    double v31 = v25[8];
    v54[0] = v29;
    v54[1] = v30;
    v54[2] = v31;
    if (v21 == v23)
    {
      v51[0] = v29;
      (*(void (**)(void *__return_ptr, void *, void *, uint64_t, _UNKNOWN **, double))(*(void *)v28 + 120))(v52, v51, v55, v23, &protocol witness table for Double, a2);
    }
    else
    {
      type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
      if (v21 == v32)
      {
        v51[0] = v29;
        v51[1] = v30;
        v51[2] = v31;
        _DWORD v51[3] = v55[0];
        char v35 = *(void (**)(void *__return_ptr, void *, void *, uint64_t, uint64_t, double))(*(void *)v28 + 120);
        char v36 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
        v35(v52, v51, v55, v21, v36, a2);
      }
      else
      {
        uint64_t v33 = *(void (**)(void *__return_ptr, void *, void *, uint64_t, unint64_t, double))(*(void *)v28 + 120);
        uint64_t v34 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, CGFloat> and conformance AnimatablePair<A, B>();
        v33(v52, v54, v55, v21, v34, a2);
      }
    }
    double v37 = BYTE8(v53);
    double v38 = HIBYTE(v56);
    swift_bridgeObjectRelease();
    uint64_t v39 = *(void *)v18;
    uint64_t result = swift_endAccess();
    if ((v37 & 1) == 0 && (v38 & 1) == 0) {
      goto LABEL_21;
    }
    if (v22 >= *(void *)(v39 + 16)) {
      goto LABEL_47;
    }
    char v40 = *(void *)(v39 + 48 * v22 + 72);
    if (v40 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v41 = result;
      if (result)
      {
LABEL_35:
        if (v41 < 1) {
          goto LABEL_48;
        }
        for (j = 0; j != v41; ++j)
        {
          if ((v40 & 0xC000000000000001) != 0)
          {
            double v43 = MEMORY[0x24C523D60](j, v40);
          }
          else
          {
            double v43 = *(void *)(v40 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v43 + 96))();
          swift_release();
        }
      }
    }
    else
    {
      uint64_t v41 = *(void *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v41) {
        goto LABEL_35;
      }
    }
    swift_bridgeObjectRelease();
    IndexSet.insert(_:)(v22);
    uint64_t v19 = v50;
    uint64_t v23 = MEMORY[0x263F8D538];
LABEL_21:
    if (++v22 == v19) {
      goto LABEL_43;
    }
  }
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t i;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  long long v30;
  ValueMetadata *v31;
  void (*v32)(uint64_t *__return_ptr, void *, void *, ValueMetadata *, unint64_t, double);
  unint64_t v33;
  void *v34;
  char v35;
  char v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t j;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  long long v49;
  void v50[5];
  void v51[3];
  long long v52;
  char v53;
  uint64_t v54[5];
  char v55;
  void v56[2];
  __int16 v57;

  uint64_t v3 = v2;
  type metadata accessor for Slice<IndexSet>(0, (unint64_t *)&lazy cache variable for type metadata for Slice<IndexSet>, MEMORY[0x263F07978], lazy protocol witness table accessor for type IndexSet and conformance IndexSet, MEMORY[0x263F8E738]);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v47 = (uint64_t)&v45 - v7;
  double v46 = type metadata accessor for IndexSet();
  double v45 = *(void *)(v46 - 8);
  MEMORY[0x270FA5388](v46);
  uint64_t v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned char *)(v3 + 176) & 1) != 0 || (a1 & 1) == 0) {
    goto LABEL_17;
  }
  *(unsigned char *)(v3 + 176) = a1 & 1;
  double v10 = (uint64_t *)(v3 + 168);
  swift_beginAccess();
  uint64_t v11 = *(void *)(v3 + 168);
  if (v11 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v17) {
      goto LABEL_17;
    }
LABEL_5:
    unint64_t v12 = *v10;
    if ((unint64_t)*v10 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v13 = result;
      if (result) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v13 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v13)
      {
LABEL_7:
        if (v13 < 1) {
          goto LABEL_48;
        }
        for (uint64_t i = 0; i != v13; ++i)
        {
          if ((v12 & 0xC000000000000001) != 0)
          {
            uint64_t v16 = MEMORY[0x24C523D60](i, v12);
          }
          else
          {
            uint64_t v16 = *(void *)(v12 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v16 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    char *v10 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  if (*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_5;
  }
LABEL_17:
  uint64_t v18 = v3 + 184;
  uint64_t result = swift_beginAccess();
  if (!*(void *)(*(void *)(v3 + 184) + 16)) {
    return result;
  }
  double v48 = v9;
  IndexSet.init()();
  uint64_t v19 = *(void *)(*(void *)v18 + 16);
  if (!v19)
  {
LABEL_41:
    swift_beginAccess();
    double v42 = v47;
    double v43 = v48;
    specialized Collection.subscript.getter(v47);
    uint64_t result = specialized MutableCollection.halfStablePartitionByOffset(isSuffixElementAtOffset:)(v18, v42);
    BOOL v44 = *(void *)(*(void *)v18 + 16);
    if (v44 < result) {
      goto LABEL_47;
    }
    specialized Array.replaceSubrange<A>(_:with:)(result, v44);
    outlined destroy of Slice<IndexSet>(v42);
    swift_endAccess();
    return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v43, v46);
  }
  uint64_t v20 = 0;
  while (1)
  {
    swift_beginAccess();
    unint64_t v21 = *(void **)v18;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *(void *)uint64_t v18 = v21;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v21);
      unint64_t v21 = (void *)result;
      *(void *)uint64_t v18 = result;
    }
    if (v20 >= v21[2]) {
      break;
    }
    uint64_t v22 = &v21[9 * v20];
    uint64_t v23 = v22[5];
    swift_bridgeObjectRetain();
    uint64_t v24 = AGCreateWeakAttribute();
    v56[0] = v23;
    v56[1] = v24;
    float64_t v57 = 0;
    uint64_t v25 = v22[4];
    uint64_t v26 = v22[6];
    long long v27 = v22[7];
    uint64_t v28 = v22[8];
    uint64_t v29 = *((unsigned char *)v22 + 88);
    double v30 = *(_OWORD *)(v22 + 9);
    v51[0] = v26;
    v51[1] = v27;
    v51[2] = v28;
    int v49 = v30;
    uint64_t v52 = v30;
    double v53 = v29;
    type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
    if (v31 == &type metadata for _ShapeStyle_Pack.Effect.Kind.AnimatableData)
    {
      v50[0] = v26;
      v50[1] = v27;
      v50[2] = v28;
      v50[3] = v49;
      double v32 = *(void (**)(uint64_t *__return_ptr, void *, void *, ValueMetadata *, unint64_t, double))(*(void *)v25 + 120);
      uint64_t v33 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
      uint64_t v34 = v50;
    }
    else
    {
      double v32 = *(void (**)(uint64_t *__return_ptr, void *, void *, ValueMetadata *, unint64_t, double))(*(void *)v25 + 120);
      uint64_t v33 = lazy protocol witness table accessor for type _ShapeStyle_Pack.Effect.Kind.AnimatableData and conformance _ShapeStyle_Pack.Effect.Kind.AnimatableData();
      uint64_t v34 = v51;
    }
    v32(v54, v34, v56, &type metadata for _ShapeStyle_Pack.Effect.Kind.AnimatableData, v33, a2);
    char v35 = v55;
    char v36 = HIBYTE(v57);
    swift_bridgeObjectRelease();
    double v37 = *(void *)v18;
    uint64_t result = swift_endAccess();
    if ((v35 & 1) == 0 && (v36 & 1) == 0) {
      goto LABEL_21;
    }
    if (v20 >= *(void *)(v37 + 16)) {
      goto LABEL_45;
    }
    double v38 = *(void *)(v37 + 72 * v20 + 96);
    if (v38 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v39 = result;
      if (result)
      {
LABEL_33:
        if (v39 < 1) {
          goto LABEL_46;
        }
        for (j = 0; j != v39; ++j)
        {
          if ((v38 & 0xC000000000000001) != 0)
          {
            uint64_t v41 = MEMORY[0x24C523D60](j, v38);
          }
          else
          {
            uint64_t v41 = *(void *)(v38 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v41 + 96))();
          swift_release();
        }
      }
    }
    else
    {
      uint64_t v39 = *(void *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v39) {
        goto LABEL_33;
      }
    }
    swift_bridgeObjectRelease();
    IndexSet.insert(_:)(v20);
LABEL_21:
    if (++v20 == v19) {
      goto LABEL_41;
    }
  }
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t i;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  long long v32;
  uint64_t v33;
  void (*v34)(void *__return_ptr, void *, void *, uint64_t, unint64_t, double);
  unint64_t v35;
  void (*v36)(void *__return_ptr, void *, void *, uint64_t, uint64_t, double);
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t j;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  long long v51;
  void v52[5];
  void v53[3];
  long long v54;
  void v55[5];
  char v56;
  void v57[2];
  __int16 v58;

  uint64_t v3 = v2;
  type metadata accessor for Slice<IndexSet>(0, (unint64_t *)&lazy cache variable for type metadata for Slice<IndexSet>, MEMORY[0x263F07978], lazy protocol witness table accessor for type IndexSet and conformance IndexSet, MEMORY[0x263F8E738]);
  MEMORY[0x270FA5388](v6 - 8);
  int v49 = (uint64_t)&v47 - v7;
  double v48 = type metadata accessor for IndexSet();
  uint64_t v47 = *(void *)(v48 - 8);
  MEMORY[0x270FA5388](v48);
  uint64_t v9 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned char *)(v2 + 160) & 1) != 0 || (a1 & 1) == 0) {
    goto LABEL_17;
  }
  *(unsigned char *)(v2 + 160) = a1 & 1;
  double v10 = (uint64_t *)(v2 + 152);
  swift_beginAccess();
  uint64_t v11 = *(void *)(v2 + 152);
  if (v11 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v17) {
      goto LABEL_17;
    }
LABEL_5:
    unint64_t v12 = *v10;
    if ((unint64_t)*v10 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v13 = result;
      if (result) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v13 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v13)
      {
LABEL_7:
        if (v13 < 1) {
          goto LABEL_50;
        }
        for (uint64_t i = 0; i != v13; ++i)
        {
          if ((v12 & 0xC000000000000001) != 0)
          {
            uint64_t v16 = MEMORY[0x24C523D60](i, v12);
          }
          else
          {
            uint64_t v16 = *(void *)(v12 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v16 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    char *v10 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  if (*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_5;
  }
LABEL_17:
  uint64_t v18 = v3 + 168;
  uint64_t result = swift_beginAccess();
  if (!*(void *)(*(void *)(v3 + 168) + 16)) {
    return result;
  }
  IndexSet.init()();
  uint64_t v19 = *(void *)(*(void *)v18 + 16);
  if (!v19)
  {
LABEL_43:
    swift_beginAccess();
    double v45 = v49;
    specialized Collection.subscript.getter(v49);
    uint64_t result = specialized MutableCollection.halfStablePartitionByOffset(isSuffixElementAtOffset:)(v18, v45);
    double v46 = *(void *)(*(void *)v18 + 16);
    if (v46 < result) {
      goto LABEL_49;
    }
    specialized Array.replaceSubrange<A>(_:with:)(result, v46);
    outlined destroy of Slice<IndexSet>(v45);
    swift_endAccess();
    return (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v9, v48);
  }
  type metadata accessor for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>(0, &lazy cache variable for type metadata for AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat>, (void (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat);
  unint64_t v21 = v20;
  uint64_t v22 = 0;
  uint64_t v23 = MEMORY[0x263F8D538];
  uint64_t v50 = v19;
  while (1)
  {
    swift_beginAccess();
    uint64_t v24 = *(void **)v18;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *(void *)uint64_t v18 = v24;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v24);
      uint64_t v24 = (void *)result;
      *(void *)uint64_t v18 = result;
    }
    if (v22 >= v24[2]) {
      break;
    }
    uint64_t v25 = &v24[8 * v22];
    uint64_t v26 = v25[5];
    swift_bridgeObjectRetain();
    long long v27 = AGCreateWeakAttribute();
    v57[0] = v26;
    v57[1] = v27;
    double v58 = 0;
    uint64_t v28 = v25[4];
    uint64_t v29 = v25[6];
    double v30 = v25[7];
    double v31 = v25[8];
    double v32 = *(_OWORD *)(v25 + 9);
    v53[0] = v29;
    v53[1] = v30;
    v53[2] = v31;
    uint64_t v54 = v32;
    if (v21 == v23)
    {
      v52[0] = v29;
      (*(void (**)(void *__return_ptr, void *, void *, uint64_t, _UNKNOWN **, double))(*(void *)v28 + 120))(v55, v52, v57, v23, &protocol witness table for Double, a2);
    }
    else
    {
      uint64_t v51 = v32;
      type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
      if (v21 == v33)
      {
        v52[0] = v29;
        v52[1] = v30;
        v52[2] = v31;
        v52[3] = v51;
        char v36 = *(void (**)(void *__return_ptr, void *, void *, uint64_t, uint64_t, double))(*(void *)v28 + 120);
        double v37 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>();
        v36(v55, v52, v57, v21, v37, a2);
      }
      else
      {
        uint64_t v34 = *(void (**)(void *__return_ptr, void *, void *, uint64_t, unint64_t, double))(*(void *)v28 + 120);
        char v35 = lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, CGFloat> and conformance AnimatablePair<A, B>();
        v34(v55, v53, v57, v21, v35, a2);
      }
    }
    double v38 = v56;
    uint64_t v39 = HIBYTE(v58);
    swift_bridgeObjectRelease();
    char v40 = *(void *)v18;
    uint64_t result = swift_endAccess();
    if ((v38 & 1) == 0 && (v39 & 1) == 0) {
      goto LABEL_21;
    }
    if (v22 >= *(void *)(v40 + 16)) {
      goto LABEL_47;
    }
    uint64_t v41 = *(void *)(v40 + (v22 << 6) + 88);
    if (v41 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      double v42 = result;
      if (result)
      {
LABEL_35:
        if (v42 < 1) {
          goto LABEL_48;
        }
        for (j = 0; j != v42; ++j)
        {
          if ((v41 & 0xC000000000000001) != 0)
          {
            BOOL v44 = MEMORY[0x24C523D60](j, v41);
          }
          else
          {
            BOOL v44 = *(void *)(v41 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v44 + 96))();
          swift_release();
        }
      }
    }
    else
    {
      double v42 = *(void *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v42) {
        goto LABEL_35;
      }
    }
    swift_bridgeObjectRelease();
    IndexSet.insert(_:)(v22);
    uint64_t v19 = v50;
    uint64_t v23 = MEMORY[0x263F8D538];
LABEL_21:
    if (++v22 == v19) {
      goto LABEL_43;
    }
  }
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
  return result;
}

void type metadata accessor for Slice<IndexSet>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    uint64_t v10 = a4();
    unint64_t v11 = a5(a1, v9, v10);
    if (!v12) {
      atomic_store(v11, a2);
    }
  }
}

uint64_t type metadata accessor for SpringState()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t specialized FluidSpringAnimation.animate<A>(value:time:context:)@<X0>(uint64_t a1@<X0>, int64x2_t *a2@<X8>, float64_t a3@<D0>, float64_t a4@<D1>, float64_t a5@<D2>, float64_t a6@<D3>, double a7@<D4>, double a8@<D5>, double a9@<D6>, double a10@<D7>)
{
  uint64_t v16 = swift_bridgeObjectRetain();
  specialized AnimationState.subscript.getter(v16, &v67);
  swift_bridgeObjectRelease();
  if (a10 <= 0.0 || v76 == 0.0)
  {
    if (a8 > 0.0)
    {
LABEL_4:
      double v17 = 6.28318531 / a8 * (6.28318531 / a8);
      goto LABEL_12;
    }
  }
  else
  {
    double v18 = (a7 - v75) / a10;
    if (v18 <= 1.0) {
      double v19 = (a7 - v75) / a10;
    }
    else {
      double v19 = 1.0;
    }
    BOOL v20 = v18 < 0.0;
    double v21 = 0.0;
    if (!v20) {
      double v21 = v19;
    }
    a8 = v76 * (1.0 - v21 * v21 * (3.0 - (v21 + v21))) + a8;
    if (a8 > 0.0) {
      goto LABEL_4;
    }
  }
  double v17 = INFINITY;
LABEL_12:
  if (v17 > 45000.0) {
    double v17 = 45000.0;
  }
  double v22 = v74;
  if (a8 <= a7 - v74) {
    *(unsigned char *)(a1 + 17) = 1;
  }
  if (a7 - v73 <= 1.0) {
    double v23 = v73;
  }
  else {
    double v23 = a7 + -0.0166666667;
  }
  float64x2_t v24 = v67;
  float64x2_t v25 = v68;
  if (v23 >= a7)
  {
    double v38 = v69.f64[1];
    double v37 = v70.f64[1];
    double v62 = v69.f64[0];
    double v63 = v70.f64[0];
    double v40 = v71.f64[1];
    double v39 = v72.f64[1];
    double v64 = v71.f64[0];
    double v65 = v72.f64[0];
  }
  else
  {
    double v26 = sqrt(v17) * -2.0 * a9;
    float64x2_t v28 = v71;
    float64x2_t v27 = v72;
    v29.f64[0] = a5;
    v29.f64[1] = a6;
    v30.f64[0] = a3;
    v30.f64[1] = a4;
    float64x2_t v31 = (float64x2_t)vdupq_n_s64(0x3F5B4E81B4E81B4FuLL);
    float64x2_t v32 = v69;
    float64x2_t v33 = v70;
    float64x2_t v34 = (float64x2_t)vdupq_n_s64(0x3F6B4E81B4E81B4FuLL);
    do
    {
      float64x2_t v35 = vaddq_f64(vmulq_f64(v28, v31), v32);
      float64x2_t v36 = vaddq_f64(vmulq_f64(v27, v31), v33);
      float64x2_t v24 = vaddq_f64(v24, vmulq_f64(v35, v34));
      float64x2_t v25 = vaddq_f64(v25, vmulq_f64(v36, v34));
      float64x2_t v27 = vaddq_f64(vmulq_n_f64(v36, v26), vmulq_n_f64(vsubq_f64(v29, v25), v17));
      float64x2_t v28 = vaddq_f64(vmulq_n_f64(v35, v26), vmulq_n_f64(vsubq_f64(v30, v24), v17));
      float64x2_t v33 = vaddq_f64(v36, vmulq_f64(v27, v31));
      float64x2_t v32 = vaddq_f64(v35, vmulq_f64(v28, v31));
      double v23 = v23 + 0.00333333333;
    }
    while (v23 < a7);
    double v37 = v33.f64[1];
    double v38 = v32.f64[1];
    double v62 = v32.f64[0];
    double v63 = v33.f64[0];
    float64x2_t v69 = v32;
    float64x2_t v70 = v33;
    double v39 = v27.f64[1];
    double v40 = v28.f64[1];
    double v64 = v28.f64[0];
    double v65 = v27.f64[0];
    float64x2_t v71 = v28;
    float64x2_t v72 = v27;
    float64x2_t v67 = v24;
    float64x2_t v68 = v25;
  }
  int64x2_t v60 = (int64x2_t)v25;
  int64x2_t v61 = (int64x2_t)v24;
  double v41 = v75;
  double v42 = v76;
  type metadata accessor for SpringState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>();
  uint64_t v44 = v43;
  v66[3] = v43;
  uint64_t v45 = swift_allocObject();
  v66[0] = v45;
  *(int64x2_t *)(v45 + 16) = v61;
  *(int64x2_t *)(v45 + 32) = v60;
  *(double *)(v45 + 48) = v62;
  *(double *)(v45 + 56) = v38;
  *(double *)(v45 + 64) = v63;
  *(double *)(v45 + 72) = v37;
  *(double *)(v45 + 80) = v64;
  *(double *)(v45 + 88) = v40;
  *(double *)(v45 + 96) = v65;
  *(double *)(v45 + 104) = v39;
  *(double *)(v45 + 112) = v23;
  *(double *)(v45 + 120) = v22;
  *(double *)(v45 + 128) = v41;
  *(double *)(v45 + 136) = v42;
  uint64_t result = specialized Dictionary.subscript.setter((uint64_t)v66, v44);
  double v47 = v62 * v62 + v38 * v38 + v63 * v63 + v37 * v37;
  if (v47 <= v64 * v64 + v40 * v40 + v65 * v65 + v39 * v39) {
    double v47 = v64 * v64 + v40 * v40 + v65 * v65 + v39 * v39;
  }
  if (v47 <= 0.0036)
  {
    v51.f64[0] = a3;
    v52.f64[0] = a4;
    double v53 = a3 * 0.01 * (a3 * 0.01) + a4 * 0.01 * (a4 * 0.01) + a5 * 0.01 * (a5 * 0.01) + a6 * 0.01 * (a6 * 0.01);
    if (v53 <= 0.0
      || (v52.f64[1] = a6,
          int64x2_t v50 = v60,
          int64x2_t v49 = v61,
          float64x2_t v54 = vsubq_f64(v52, (float64x2_t)vzip2q_s64(v61, v60)),
          v51.f64[1] = a5,
          float64x2_t v55 = vsubq_f64(v51, (float64x2_t)vzip1q_s64(v61, v60)),
          v53 >= vaddvq_f64(vaddq_f64(vmulq_f64(v55, v55), vmulq_f64(v54, v54)))))
    {
      int64x2_t v49 = 0uLL;
      char v48 = 1;
      int64x2_t v50 = 0uLL;
    }
    else
    {
      char v48 = 0;
    }
  }
  else
  {
    char v48 = 0;
    int64x2_t v50 = v60;
    int64x2_t v49 = v61;
  }
  *a2 = v49;
  a2[1] = v50;
  a2[2].i8[0] = v48;
  return result;
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      uint64_t v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v16 = *v4;
  if (v14)
  {
LABEL_8:
    double v17 = (_OWORD *)(*(void *)(v16 + 56) + 32 * v10);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
    return outlined init with take of Any(a1, v17);
  }
LABEL_13:

  return (_OWORD *)specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *result;
  unint64_t v19;
  char v20;
  uint64_t vars8;

  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      uint64_t v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v16 = *v4;
  if (v14)
  {
LABEL_8:
    double v17 = (_OWORD *)(*(void *)(v16 + 56) + 32 * v10);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
    return outlined init with take of Any(a1, v17);
  }
LABEL_13:

  return (_OWORD *)specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
}

void *specialized _NativeDictionary.copy()(unint64_t *a1)
{
  uint64_t v2 = v1;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v2 = v5;
    return result;
  }
  uint64_t result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    uint64_t result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v14) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v7 + 8 * v20);
    ++v10;
    if (!v21)
    {
      int64_t v10 = v20 + 1;
      if (v20 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v7 + 8 * v10);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v21 - 1) & v21;
    unint64_t v16 = __clz(__rbit64(v21)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 8 * v16;
    uint64_t v18 = *(void *)(*(void *)(v3 + 48) + 8 * v16);
    uint64_t v19 = 32 * v16;
    outlined init with copy of Any(*(void *)(v3 + 56) + 32 * v16, (uint64_t)v23);
    *(void *)(*(void *)(v5 + 48) + v17) = v18;
    uint64_t result = outlined init with take of Any(v23, (_OWORD *)(*(void *)(v5 + 56) + v19));
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v14) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v7 + 8 * v22);
  if (v21)
  {
    int64_t v10 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v7 + 8 * v10);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *specialized _NativeDictionary.copy()()
{
  return specialized _NativeDictionary.copy()((unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, Any>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  long long v25;
  long long v26;
  long long v27;
  uint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<_ProposedSize, ViewGraphGeometryObservers<SizeThatFitsMeasurer>.Observer>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  char v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      int64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    float64x2_t v29 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v29 >= v13) {
      goto LABEL_26;
    }
    float64x2_t v30 = *(void *)(v6 + 8 * v29);
    ++v9;
    if (!v30)
    {
      char v9 = v29 + 1;
      if (v29 + 1 >= v13) {
        goto LABEL_26;
      }
      float64x2_t v30 = *(void *)(v6 + 8 * v9);
      if (!v30) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v30 - 1) & v30;
    unint64_t v15 = __clz(__rbit64(v30)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 32 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + 32 * v15;
    uint64_t v18 = *(void *)v17;
    uint64_t v19 = *(unsigned char *)(v17 + 8);
    int64_t v20 = *(void *)(v17 + 16);
    LOBYTE(v17) = *(unsigned char *)(v17 + 24);
    unint64_t v21 = 56 * v15;
    int64_t v22 = *(void *)(v2 + 56) + v21;
    double v23 = *(unsigned char *)(v22 + 32);
    float64x2_t v24 = *(void *)(v4 + 48) + v16;
    float64x2_t v25 = *(_OWORD *)(v22 + 40);
    double v26 = *(_OWORD *)v22;
    float64x2_t v27 = *(_OWORD *)(v22 + 16);
    *(void *)float64x2_t v24 = v18;
    *(unsigned char *)(v24 + 8) = v19;
    *(void *)(v24 + 16) = v20;
    *(unsigned char *)(v24 + 24) = v17;
    float64x2_t v28 = *(void *)(v4 + 56) + v21;
    *(_OWORD *)float64x2_t v28 = v26;
    *(_OWORD *)(v28 + 16) = v27;
    *(unsigned char *)(v28 + 32) = v23;
    *(_OWORD *)(v28 + 40) = v25;
    uint64_t result = (void *)swift_retain();
  }
  float64x2_t v31 = v29 + 2;
  if (v31 >= v13) {
    goto LABEL_26;
  }
  float64x2_t v30 = *(void *)(v6 + 8 * v31);
  if (v30)
  {
    char v9 = v31;
    goto LABEL_25;
  }
  while (1)
  {
    char v9 = v31 + 1;
    if (__OFADD__(v31, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    float64x2_t v30 = *(void *)(v6 + 8 * v9);
    ++v31;
    if (v30) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, TupleTypeDescription<ViewDescriptor>>, &lazy cache variable for type metadata for TupleTypeDescription<ViewDescriptor>, (uint64_t)&type metadata for ViewDescriptor, (uint64_t)&protocol witness table for ViewDescriptor);
}

{
  return specialized _NativeDictionary.copy()(&lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, AnyTrackedValue>, (unint64_t *)&lazy cache variable for type metadata for AnyTrackedValue, (uint64_t)&protocol descriptor for AnyTrackedValue, (uint64_t (*)(unsigned char *, uint64_t))outlined init with take of ScrollStateRequest);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  long long v18;
  long long v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  _OWORD v23[2];
  uint64_t v24;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<Text.Effect.AttributeTracker.Key, Text.Effect.AttributeTracker.AnyValue>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<Subview.ID, ForEachState<Slice<SubviewsCollection>, Subview.ID, Subview>.Item>, (void (*)(uint64_t))type metadata accessor for ForEachState<Slice<SubviewsCollection>, Subview.ID, Subview>.Item, (void (*)(void))lazy protocol witness table accessor for type Subview.ID and conformance Subview.ID);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  char v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      int64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      char v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    outlined init with copy of Subview.ID(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v23);
    unint64_t v16 = *(void *)(*(void *)(v2 + 56) + 8 * v15);
    uint64_t v17 = *(void *)(v4 + 48) + 40 * v15;
    uint64_t v18 = v23[0];
    uint64_t v19 = v23[1];
    *(void *)(v17 + 32) = v24;
    *(_OWORD *)uint64_t v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
    *(void *)(*(void *)(v4 + 56) + 8 * v15) = v16;
    uint64_t result = (void *)swift_retain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    char v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    char v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  long long v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  _OWORD v23[2];
  uint64_t v24;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<ColorCacheKey, NamedColorInfo>(0, &lazy cache variable for type metadata for _DictionaryStorage<Subview.ID, _ViewList_Edit>, (void (*)(void))lazy protocol witness table accessor for type Subview.ID and conformance Subview.ID);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  char v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      int64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      char v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t result = (void *)outlined init with copy of Subview.ID(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v23);
    unint64_t v16 = *(unsigned char *)(*(void *)(v2 + 56) + v15);
    uint64_t v17 = *(void *)(v4 + 48) + 40 * v15;
    uint64_t v18 = v24;
    uint64_t v19 = v23[1];
    *(_OWORD *)uint64_t v17 = v23[0];
    *(_OWORD *)(v17 + 16) = v19;
    *(void *)(v17 + 32) = v18;
    *(unsigned char *)(*(void *)(v4 + 56) + v15) = v16;
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    char v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    char v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<Text.Effect.AttributeTracker.Key, Text.Effect.AttributeTracker.AnyValue>(0, &lazy cache variable for type metadata for _DictionaryStorage<ConstantKey, AGAttribute>, type metadata accessor for AGAttribute, (void (*)(void))lazy protocol witness table accessor for type ConstantKey and conformance ConstantKey);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  char v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      int64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    double v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      char v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      double v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    float64x2_t v25 = __clz(__rbit64(v23));
    uint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = v25 + (v9 << 6);
LABEL_12:
    unint64_t v16 = 16 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + 16 * v15;
    uint64_t v18 = *(void *)v17;
    LOBYTE(v17) = *(unsigned char *)(v17 + 8);
    uint64_t v19 = 4 * v15;
    int64_t v20 = *(_DWORD *)(*(void *)(v2 + 56) + v19);
    unint64_t v21 = *(void *)(v4 + 48) + v16;
    *(void *)unint64_t v21 = v18;
    *(unsigned char *)(v21 + 8) = v17;
    *(_DWORD *)(*(void *)(v4 + 56) + v19) = v20;
  }
  float64x2_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  double v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    char v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    char v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    double v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  long long v18;
  long long v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  _OWORD v23[2];
  uint64_t v24;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<Int, LocalizedStringKey.FormatArgument>(0, &lazy cache variable for type metadata for _DictionaryStorage<AnyHashable, ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Item>, (void (*)(uint64_t))type metadata accessor for ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Item);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  char v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      int64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      char v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    outlined init with copy of AnyHashable(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v23);
    unint64_t v16 = *(void *)(*(void *)(v2 + 56) + 8 * v15);
    uint64_t v17 = *(void *)(v4 + 48) + 40 * v15;
    uint64_t v18 = v23[0];
    uint64_t v19 = v23[1];
    *(void *)(v17 + 32) = v24;
    *(_OWORD *)uint64_t v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
    *(void *)(*(void *)(v4 + 56) + 8 * v15) = v16;
    uint64_t result = (void *)swift_retain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    char v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    char v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  long long v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  _OWORD v23[2];
  uint64_t v24;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<AnyHashable, _ViewList_Edit>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  char v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      int64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      char v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t result = (void *)outlined init with copy of AnyHashable(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v23);
    unint64_t v16 = *(unsigned char *)(*(void *)(v2 + 56) + v15);
    uint64_t v17 = *(void *)(v4 + 48) + 40 * v15;
    uint64_t v18 = v24;
    uint64_t v19 = v23[1];
    *(_OWORD *)uint64_t v17 = v23[0];
    *(_OWORD *)(v17 + 16) = v19;
    *(void *)(v17 + 32) = v18;
    *(unsigned char *)(*(void *)(v4 + 56) + v15) = v16;
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    char v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    char v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  long long v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<ObjectIdentifier, ConditionalTypeDescriptor<ViewDescriptor>>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  char v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      int64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    double v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    float64x2_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      char v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      float64x2_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 24 * v15;
    uint64_t v19 = *(void *)(v2 + 56) + v18;
    int64_t v20 = *(void *)v19;
    unint64_t v21 = *(_OWORD *)(v19 + 8);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    int64_t v22 = *(void *)(v4 + 56) + v18;
    *(void *)int64_t v22 = v20;
    *(_OWORD *)(v22 + 8) = v21;
    uint64_t result = (void *)outlined copy of ConditionalTypeDescriptor<A>.Storage<A>(v20);
  }
  float64x2_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  float64x2_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    char v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    char v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    float64x2_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<String, AttributeInfoTrace.History>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  char v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      int64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    double v26 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v13) {
      goto LABEL_26;
    }
    float64x2_t v27 = *(void *)(v6 + 8 * v26);
    ++v9;
    if (!v27)
    {
      char v9 = v26 + 1;
      if (v26 + 1 >= v13) {
        goto LABEL_26;
      }
      float64x2_t v27 = *(void *)(v6 + 8 * v9);
      if (!v27) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v27 - 1) & v27;
    unint64_t v15 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    int64_t v20 = 12 * v15;
    unint64_t v21 = *(void *)(v2 + 56) + v20;
    int64_t v22 = *(_DWORD *)(v21 + 8);
    double v23 = (void *)(*(void *)(v4 + 48) + v16);
    float64x2_t v24 = *(void *)v21;
    *double v23 = v19;
    v23[1] = v18;
    float64x2_t v25 = *(void *)(v4 + 56) + v20;
    *(void *)float64x2_t v25 = v24;
    *(_DWORD *)(v25 + 8) = v22;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  float64x2_t v28 = v26 + 2;
  if (v28 >= v13) {
    goto LABEL_26;
  }
  float64x2_t v27 = *(void *)(v6 + 8 * v28);
  if (v27)
  {
    char v9 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    char v9 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    float64x2_t v27 = *(void *)(v6 + 8 * v9);
    ++v28;
    if (v27) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  uint64_t v1 = v0;
  _ss18_DictionaryStorageCySo13AGSubgraphRefaSayyADcGGMaTm_0(0, &lazy cache variable for type metadata for _DictionaryStorage<AGSubgraphRef, [(_:)]>, type metadata accessor for AGSubgraphRef, type metadata accessor for [(_:)], (void (*)(void))lazy protocol witness table accessor for type AGSubgraphRef and conformance AGSubgraphRef);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  char v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      int64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      char v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    uint64_t v19 = v17;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    char v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    char v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<String, UInt32>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  char v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      int64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    double v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      char v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      double v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    int64_t v20 = 4 * v15;
    LODWORD(v17) = *(_DWORD *)(*(void *)(v2 + 56) + v20);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = v19;
    v21[1] = v18;
    *(_DWORD *)(*(void *)(v4 + 56) + v20) = v17;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  float64x2_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  double v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    char v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    char v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    double v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<ScrollTargetRole.Role, [ScrollableCollection]>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  char v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      int64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13) {
      goto LABEL_26;
    }
    uint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      char v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = *(void *)(*(void *)(v2 + 56) + 8 * v15);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    *(void *)(*(void *)(v4 + 56) + 8 * v15) = v16;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  uint64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  uint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    char v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    char v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<UnsafeRawPointer, String>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  char v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      int64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    double v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    float64x2_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      char v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      float64x2_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 16 * v15;
    uint64_t v19 = (uint64_t *)(*(void *)(v2 + 56) + v18);
    unint64_t v21 = *v19;
    int64_t v20 = v19[1];
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    int64_t v22 = (void *)(*(void *)(v4 + 56) + v18);
    *int64_t v22 = v21;
    v22[1] = v20;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  float64x2_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  float64x2_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    char v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    char v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    float64x2_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, DynamicPropertyCache.Fields>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  char v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      int64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    float64x2_t v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13) {
      goto LABEL_26;
    }
    float64x2_t v25 = *(void *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      char v9 = v24 + 1;
      if (v24 + 1 >= v13) {
        goto LABEL_26;
      }
      float64x2_t v25 = *(void *)(v6 + 8 * v9);
      if (!v25) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v25 - 1) & v25;
    unint64_t v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 24 * v15;
    uint64_t v19 = *(void *)(v2 + 56) + v18;
    int64_t v20 = *(void *)v19;
    unint64_t v21 = *(void *)(v19 + 8);
    int64_t v22 = *(unsigned char *)(v19 + 16);
    LODWORD(v19) = *(_DWORD *)(v19 + 20);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    double v23 = *(void *)(v4 + 56) + v18;
    *(void *)double v23 = v20;
    *(void *)(v23 + 8) = v21;
    *(unsigned char *)(v23 + 16) = v22;
    *(_DWORD *)(v23 + 20) = v19;
    uint64_t result = (void *)outlined copy of DynamicPropertyCache.Fields.Layout();
  }
  double v26 = v24 + 2;
  if (v26 >= v13) {
    goto LABEL_26;
  }
  float64x2_t v25 = *(void *)(v6 + 8 * v26);
  if (v25)
  {
    char v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    char v9 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    float64x2_t v25 = *(void *)(v6 + 8 * v9);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<ColorCacheKey, NamedColorInfo>(0, &lazy cache variable for type metadata for _DictionaryStorage<_DisplayList_Identity, _DisplayList_StableIdentity>, (void (*)(void))lazy protocol witness table accessor for type _DisplayList_Identity and conformance _DisplayList_Identity);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  char v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      int64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    double v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    float64x2_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      char v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      float64x2_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    double v26 = __clz(__rbit64(v24));
    uint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = v26 + (v9 << 6);
LABEL_12:
    unint64_t v16 = 4 * v15;
    uint64_t v17 = *(_DWORD *)(*(void *)(v2 + 48) + 4 * v15);
    uint64_t v18 = 24 * v15;
    uint64_t v19 = *(void *)(v2 + 56) + v18;
    int64_t v20 = *(_OWORD *)v19;
    unint64_t v21 = *(void *)(v19 + 16);
    *(_DWORD *)(*(void *)(v4 + 48) + v16) = v17;
    int64_t v22 = *(void *)(v4 + 56) + v18;
    *(_OWORD *)int64_t v22 = v20;
    *(void *)(v22 + 16) = v21;
  }
  float64x2_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  float64x2_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    char v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    char v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    float64x2_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, TupleTypeDescription<StyleContextDescriptor>>, (unint64_t *)&lazy cache variable for type metadata for TupleTypeDescription<StyleContextDescriptor>, (uint64_t)&type metadata for StyleContextDescriptor, (uint64_t)&protocol witness table for StyleContextDescriptor);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  char v28[8];

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _DictionaryStorage<URL, NamedImage.Cache.WeakCatalog>();
  uint64_t v6 = *v0;
  uint64_t v7 = static _DictionaryStorage.copy(original:)();
  unint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_28:
    *uint64_t v1 = v8;
    return result;
  }
  float64x2_t v24 = v1;
  uint64_t result = (void *)(v7 + 64);
  int64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10) {
    uint64_t result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  }
  float64x2_t v25 = v6 + 64;
  uint64_t v12 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  unint64_t v13 = 1 << *(unsigned char *)(v6 + 32);
  int64_t v14 = -1;
  if (v13 < 64) {
    int64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & *(void *)(v6 + 64);
  double v26 = (unint64_t)(v13 + 63) >> 6;
  float64x2_t v27 = v3 + 16;
  while (1)
  {
    if (v15)
    {
      unint64_t v16 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      uint64_t v17 = v16 | (v12 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v26) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v25 + 8 * v20);
    ++v12;
    if (!v21)
    {
      uint64_t v12 = v20 + 1;
      if (v20 + 1 >= v26) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v25 + 8 * v12);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v15 = (v21 - 1) & v21;
    uint64_t v17 = __clz(__rbit64(v21)) + (v12 << 6);
LABEL_12:
    uint64_t v18 = *(void *)(v3 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v18, v2);
    uint64_t v19 = 8 * v17;
    outlined init with copy of NamedImage.Cache.WeakCatalog(*(void *)(v6 + 56) + v19, (uint64_t)v28);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(void *)(v8 + 48) + v18, v5, v2);
    uint64_t result = (void *)outlined init with take of NamedImage.Cache.WeakCatalog((uint64_t)v28, *(void *)(v8 + 56) + v19);
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v26)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v24;
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v25 + 8 * v22);
  if (v21)
  {
    uint64_t v12 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    uint64_t v12 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v12 >= v26) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v25 + 8 * v12);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<ColorCacheKey, NamedColorInfo>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<Font.RatioKey, CGFloat>, (void (*)(void))lazy protocol witness table accessor for type Font.RatioKey and conformance Font.RatioKey);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  char v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      int64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      char v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    double v23 = __clz(__rbit64(v21));
    uint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = v23 + (v9 << 6);
LABEL_12:
    unint64_t v16 = 2 * v15;
    uint64_t v17 = *(_WORD *)(*(void *)(v2 + 48) + 2 * v15);
    uint64_t v18 = 8 * v15;
    uint64_t v19 = *(void *)(*(void *)(v2 + 56) + v18);
    *(_WORD *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v18) = v19;
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    char v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    char v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _OWORD v26[2];

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_28:
    *uint64_t v1 = v4;
    return result;
  }
  float64x2_t v25 = v1;
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  char v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      int64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    double v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      char v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      double v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    int64_t v20 = 32 * v15;
    outlined init with copy of Any(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = v19;
    v21[1] = v18;
    outlined init with take of Any(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  float64x2_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  double v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    char v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    char v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    double v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  uint64_t v9;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unsigned char v27[88];

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for NamedImage.VectorKey(0);
  double v26 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _DictionaryStorage<NamedImage.VectorKey, NamedImage.VectorInfo>();
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_28:
    *uint64_t v1 = v7;
    return result;
  }
  float64x2_t v25 = v1;
  uint64_t result = (void *)(v6 + 64);
  char v9 = v5 + 64;
  int64_t v10 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v10) {
    uint64_t result = memmove(result, (const void *)(v5 + 64), 8 * v10);
  }
  uint64_t v12 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  unint64_t v13 = 1 << *(unsigned char *)(v5 + 32);
  int64_t v14 = -1;
  if (v13 < 64) {
    int64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & *(void *)(v5 + 64);
  unint64_t v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      uint64_t v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      uint64_t v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }
    unint64_t v21 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v16) {
      goto LABEL_26;
    }
    int64_t v22 = *(void *)(v9 + 8 * v21);
    ++v12;
    if (!v22)
    {
      uint64_t v12 = v21 + 1;
      if (v21 + 1 >= v16) {
        goto LABEL_26;
      }
      int64_t v22 = *(void *)(v9 + 8 * v12);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    unint64_t v15 = (v22 - 1) & v22;
    uint64_t v18 = __clz(__rbit64(v22)) + (v12 << 6);
LABEL_12:
    uint64_t v19 = *(void *)(v26 + 72) * v18;
    outlined init with copy of Text.Effect.InteractionMetrics(*(void *)(v5 + 48) + v19, (uint64_t)v4, type metadata accessor for NamedImage.VectorKey);
    int64_t v20 = 88 * v18;
    outlined init with copy of NamedImage.VectorInfo(*(void *)(v5 + 56) + v20, (uint64_t)v27);
    outlined init with take of Text.Effect.InteractionMetrics((uint64_t)v4, *(void *)(v7 + 48) + v19, type metadata accessor for NamedImage.VectorKey);
    uint64_t result = (void *)outlined init with take of NamedImage.VectorInfo((uint64_t)v27, *(void *)(v7 + 56) + v20);
  }
  double v23 = v21 + 2;
  if (v23 >= v16)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  int64_t v22 = *(void *)(v9 + 8 * v23);
  if (v22)
  {
    uint64_t v12 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    uint64_t v12 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v12 >= v16) {
      goto LABEL_26;
    }
    int64_t v22 = *(void *)(v9 + 8 * v12);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<ObjectIdentifier, [DisplayList.ViewUpdater.ViewCache.PendingAsyncValue]>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  char v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      int64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    uint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      char v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  uint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    char v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    char v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *result;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  const void *v38;
  int64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  int v46;
  long long v47;

  uint64_t v1 = type metadata accessor for NamedImage.BitmapKey(0);
  double v41 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1 - 8);
  double v40 = (char *)&v37 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _DictionaryStorage<NamedImage.BitmapKey, NamedImage.BitmapInfo>();
  double v37 = v0;
  uint64_t v3 = *v0;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v43 = v4;
  if (!v5)
  {
    uint64_t result = (void *)swift_release();
    float64x2_t v36 = v43;
    float64x2_t v35 = v37;
LABEL_28:
    *float64x2_t v35 = v36;
    return result;
  }
  uint64_t v6 = v4;
  uint64_t result = (void *)(v4 + 64);
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v6 + 32)) + 63) >> 6;
  double v38 = (const void *)(v3 + 64);
  if (v6 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
  {
    uint64_t result = memmove(result, v38, 8 * v8);
    uint64_t v6 = v43;
  }
  int64_t v10 = 0;
  *(void *)(v6 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  double v42 = v3;
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  double v39 = (unint64_t)(v11 + 63) >> 6;
  int64_t v14 = (uint64_t)v40;
  unint64_t v15 = v43;
  while (1)
  {
    if (v13)
    {
      uint64_t v44 = (v13 - 1) & v13;
      uint64_t v45 = v10;
      unint64_t v16 = __clz(__rbit64(v13)) | (v10 << 6);
      uint64_t v17 = v42;
      goto LABEL_12;
    }
    float64x2_t v31 = v10 + 1;
    uint64_t v17 = v42;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v31 >= v39) {
      goto LABEL_26;
    }
    float64x2_t v32 = *((void *)v38 + v31);
    float64x2_t v33 = v10 + 1;
    if (!v32)
    {
      float64x2_t v33 = v10 + 2;
      if (v10 + 2 >= v39) {
        goto LABEL_26;
      }
      float64x2_t v32 = *((void *)v38 + v33);
      if (!v32) {
        break;
      }
    }
LABEL_25:
    uint64_t v44 = (v32 - 1) & v32;
    uint64_t v45 = v33;
    unint64_t v16 = __clz(__rbit64(v32)) + (v33 << 6);
LABEL_12:
    uint64_t v18 = *(void *)(v41 + 72) * v16;
    outlined init with copy of Text.Effect.InteractionMetrics(*(void *)(v17 + 48) + v18, v14, type metadata accessor for NamedImage.BitmapKey);
    uint64_t v19 = 96 * v16;
    int64_t v20 = *(void *)(v17 + 56) + 96 * v16;
    unint64_t v21 = *(void **)v20;
    int64_t v22 = *(void *)(v20 + 16);
    double v23 = *(unsigned char *)(v20 + 24);
    float64x2_t v24 = *(void *)(v20 + 32);
    float64x2_t v25 = *(void *)(v20 + 40);
    double v26 = *(unsigned char *)(v20 + 48);
    double v47 = *(_OWORD *)(v20 + 56);
    float64x2_t v28 = *(void *)(v20 + 72);
    float64x2_t v27 = *(void *)(v20 + 80);
    double v46 = *(unsigned __int8 *)(v20 + 88);
    float64x2_t v29 = *(void *)(v15 + 48) + v18;
    LOBYTE(v18) = *(unsigned char *)(v20 + 8);
    outlined init with take of Text.Effect.InteractionMetrics(v14, v29, type metadata accessor for NamedImage.BitmapKey);
    float64x2_t v30 = *(void *)(v15 + 56) + v19;
    *(void *)float64x2_t v30 = v21;
    *(unsigned char *)(v30 + 8) = v18;
    *(void *)(v30 + 16) = v22;
    *(unsigned char *)(v30 + 24) = v23;
    *(void *)(v30 + 32) = v24;
    *(void *)(v30 + 40) = v25;
    *(unsigned char *)(v30 + 48) = v26;
    *(_OWORD *)(v30 + 56) = v47;
    *(void *)(v30 + 72) = v28;
    *(void *)(v30 + 80) = v27;
    *(unsigned char *)(v30 + 88) = v46;
    uint64_t result = outlined copy of GraphicsImage.Contents(v21, v18);
    unint64_t v13 = v44;
    int64_t v10 = v45;
  }
  float64x2_t v34 = v10 + 3;
  if (v10 + 3 >= v39)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    float64x2_t v35 = v37;
    float64x2_t v36 = v43;
    goto LABEL_28;
  }
  float64x2_t v32 = *((void *)v38 + v34);
  if (v32)
  {
    float64x2_t v33 = v10 + 3;
    goto LABEL_25;
  }
  while (1)
  {
    float64x2_t v33 = v34 + 1;
    if (__OFADD__(v34, 1)) {
      break;
    }
    if (v33 >= v39) {
      goto LABEL_26;
    }
    float64x2_t v32 = *((void *)v38 + v33);
    ++v34;
    if (v32) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<Int, LocalizedStringKey.FormatArgument>(0, &lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, AnyFontModifier>, (void (*)(uint64_t))type metadata accessor for AnyFontModifier);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  char v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      int64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    uint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      char v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    uint64_t result = (void *)swift_retain();
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  uint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    char v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    char v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<Int, LocalizedStringKey.FormatArgument>(0, &lazy cache variable for type metadata for _DictionaryStorage<String, AnyFontModifier>, (void (*)(uint64_t))type metadata accessor for AnyFontModifier);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  char v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      int64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    double v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      char v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      double v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    int64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_retain();
  }
  float64x2_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  double v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    char v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    char v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    double v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for LocalizedStringKey.FormatArgument(0);
  float64x2_t v27 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _DictionaryStorage<Int, LocalizedStringKey.FormatArgument>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<Int, LocalizedStringKey.FormatArgument>, (void (*)(uint64_t))type metadata accessor for LocalizedStringKey.FormatArgument);
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_28:
    *uint64_t v1 = v7;
    return result;
  }
  float64x2_t v25 = v1;
  uint64_t result = (void *)(v6 + 64);
  char v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    uint64_t result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  double v26 = v5 + 64;
  uint64_t v11 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v5 + 32);
  unint64_t v13 = -1;
  if (v12 < 64) {
    unint64_t v13 = ~(-1 << v12);
  }
  int64_t v14 = v13 & *(void *)(v5 + 64);
  unint64_t v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      uint64_t v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }
    unint64_t v21 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v15) {
      goto LABEL_26;
    }
    int64_t v22 = *(void *)(v26 + 8 * v21);
    ++v11;
    if (!v22)
    {
      uint64_t v11 = v21 + 1;
      if (v21 + 1 >= v15) {
        goto LABEL_26;
      }
      int64_t v22 = *(void *)(v26 + 8 * v11);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    int64_t v14 = (v22 - 1) & v22;
    uint64_t v17 = __clz(__rbit64(v22)) + (v11 << 6);
LABEL_12:
    uint64_t v18 = 8 * v17;
    uint64_t v19 = *(void *)(*(void *)(v5 + 48) + 8 * v17);
    int64_t v20 = *(void *)(v27 + 72) * v17;
    outlined init with copy of Text.Effect.InteractionMetrics(*(void *)(v5 + 56) + v20, (uint64_t)v4, type metadata accessor for LocalizedStringKey.FormatArgument);
    *(void *)(*(void *)(v7 + 48) + v18) = v19;
    uint64_t result = (void *)outlined init with take of Text.Effect.InteractionMetrics((uint64_t)v4, *(void *)(v7 + 56) + v20, type metadata accessor for LocalizedStringKey.FormatArgument);
  }
  double v23 = v21 + 2;
  if (v23 >= v15)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  int64_t v22 = *(void *)(v26 + 8 * v23);
  if (v22)
  {
    uint64_t v11 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    uint64_t v11 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v11 >= v15) {
      goto LABEL_26;
    }
    int64_t v22 = *(void *)(v26 + 8 * v11);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  long long v18;
  long long v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  _OWORD v23[2];
  uint64_t v24;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<AnyHashable, Int>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  char v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      int64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      char v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t result = (void *)outlined init with copy of AnyHashable(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v23);
    unint64_t v16 = *(void *)(*(void *)(v2 + 56) + 8 * v15);
    uint64_t v17 = *(void *)(v4 + 48) + 40 * v15;
    uint64_t v18 = v23[0];
    uint64_t v19 = v23[1];
    *(void *)(v17 + 32) = v24;
    *(_OWORD *)uint64_t v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
    *(void *)(*(void *)(v4 + 56) + 8 * v15) = v16;
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    char v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    char v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<String, CGFloat>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  char v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      int64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    double v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      char v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      double v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    int64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  float64x2_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  double v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    char v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    char v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    double v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *result;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  const void *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  long long v43;

  double v40 = type metadata accessor for UUID();
  uint64_t v1 = *(void *)(v40 - 8);
  MEMORY[0x270FA5388](v40);
  double v39 = (char *)&v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _DictionaryStorage<UUID, NamedImage.DecodedInfo>();
  float64x2_t v34 = v0;
  uint64_t v3 = *v0;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = *(void *)(v3 + 16);
  double v42 = v4;
  if (!v5)
  {
    uint64_t result = (void *)swift_release();
    float64x2_t v32 = v42;
    float64x2_t v31 = v34;
LABEL_28:
    *float64x2_t v31 = v32;
    return result;
  }
  uint64_t v6 = v4;
  uint64_t result = (void *)(v4 + 64);
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v6 + 32)) + 63) >> 6;
  float64x2_t v36 = (const void *)(v3 + 64);
  if (v6 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
  {
    uint64_t result = memmove(result, v36, 8 * v8);
    uint64_t v6 = v42;
  }
  int64_t v10 = 0;
  *(void *)(v6 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  double v41 = v3;
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  float64x2_t v35 = (unint64_t)(v11 + 63) >> 6;
  double v37 = v1 + 32;
  double v38 = v1 + 16;
  unint64_t v15 = v39;
  int64_t v14 = v40;
  unint64_t v16 = v42;
  while (1)
  {
    if (v13)
    {
      uint64_t v17 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      uint64_t v18 = v17 | (v10 << 6);
      uint64_t v19 = v41;
      goto LABEL_12;
    }
    float64x2_t v28 = v10 + 1;
    uint64_t v19 = v41;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v28 >= v35) {
      goto LABEL_26;
    }
    float64x2_t v29 = *((void *)v36 + v28);
    ++v10;
    if (!v29)
    {
      int64_t v10 = v28 + 1;
      if (v28 + 1 >= v35) {
        goto LABEL_26;
      }
      float64x2_t v29 = *((void *)v36 + v10);
      if (!v29) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v29 - 1) & v29;
    uint64_t v18 = __clz(__rbit64(v29)) + (v10 << 6);
LABEL_12:
    int64_t v20 = *(void *)(v1 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v15, *(void *)(v19 + 48) + v20, v14);
    unint64_t v21 = 48 * v18;
    int64_t v22 = *(void *)(v19 + 56) + 48 * v18;
    double v23 = *(void **)v22;
    uint64_t v43 = *(_OWORD *)(v22 + 16);
    float64x2_t v24 = *(void *)(v22 + 32);
    float64x2_t v25 = *(unsigned char *)(v22 + 40);
    double v26 = *(void *)(v16 + 48) + v20;
    LOBYTE(v20) = *(unsigned char *)(v22 + 8);
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(v26, v15, v14);
    float64x2_t v27 = *(void *)(v16 + 56) + v21;
    *(void *)float64x2_t v27 = v23;
    *(unsigned char *)(v27 + 8) = v20;
    *(_OWORD *)(v27 + 16) = v43;
    *(void *)(v27 + 32) = v24;
    *(unsigned char *)(v27 + 40) = v25;
    uint64_t result = outlined copy of GraphicsImage.Contents(v23, v20);
  }
  float64x2_t v30 = v28 + 2;
  if (v30 >= v35)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    float64x2_t v31 = v34;
    float64x2_t v32 = v42;
    goto LABEL_28;
  }
  float64x2_t v29 = *((void *)v36 + v30);
  if (v29)
  {
    int64_t v10 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v10 >= v35) {
      goto LABEL_26;
    }
    float64x2_t v29 = *((void *)v36 + v10);
    ++v30;
    if (v29) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&lazy cache variable for type metadata for _DictionaryStorage<Int, Any>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<Int, CGFloat>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  char v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      int64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    uint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      char v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v21 = __clz(__rbit64(v19));
    uint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = v21 + (v9 << 6);
LABEL_12:
    unint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  uint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    char v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    char v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  long long v23;
  long long v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  unint64_t v29;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<ColorCacheKey, NamedColorInfo>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<Spacing.Key, Spacing.Value>, (void (*)(void))lazy protocol witness table accessor for type Spacing.Key and conformance Spacing.Key);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  char v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      int64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    double v26 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v13) {
      goto LABEL_26;
    }
    float64x2_t v27 = *(void *)(v6 + 8 * v26);
    ++v9;
    if (!v27)
    {
      char v9 = v26 + 1;
      if (v26 + 1 >= v13) {
        goto LABEL_26;
      }
      float64x2_t v27 = *(void *)(v6 + 8 * v9);
      if (!v27) {
        break;
      }
    }
LABEL_25:
    float64x2_t v29 = __clz(__rbit64(v27));
    uint64_t v12 = (v27 - 1) & v27;
    unint64_t v15 = v29 + (v9 << 6);
LABEL_12:
    unint64_t v16 = 16 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + 16 * v15;
    uint64_t v18 = *(void *)v17;
    LOBYTE(v17) = *(unsigned char *)(v17 + 8);
    uint64_t v19 = 40 * v15;
    int64_t v20 = *(void *)(v2 + 56) + v19;
    unint64_t v21 = *(unsigned char *)(v20 + 32);
    int64_t v22 = *(void *)(v4 + 48) + v16;
    double v23 = *(_OWORD *)v20;
    float64x2_t v24 = *(_OWORD *)(v20 + 16);
    *(void *)int64_t v22 = v18;
    *(unsigned char *)(v22 + 8) = v17;
    float64x2_t v25 = *(void *)(v4 + 56) + v19;
    *(_OWORD *)float64x2_t v25 = v23;
    *(_OWORD *)(v25 + 16) = v24;
    *(unsigned char *)(v25 + 32) = v21;
  }
  float64x2_t v28 = v26 + 2;
  if (v28 >= v13) {
    goto LABEL_26;
  }
  float64x2_t v27 = *(void *)(v6 + 8 * v28);
  if (v27)
  {
    char v9 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    char v9 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    float64x2_t v27 = *(void *)(v6 + 8 * v9);
    ++v28;
    if (v27) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, UInt32>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  char v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      int64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      char v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    double v23 = __clz(__rbit64(v21));
    uint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = v23 + (v9 << 6);
LABEL_12:
    unint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 4 * v15;
    uint64_t v19 = *(_DWORD *)(*(void *)(v2 + 56) + v18);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(_DWORD *)(*(void *)(v4 + 56) + v18) = v19;
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    char v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    char v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()((unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, ScrollStateRequest>, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest, (uint64_t)&protocol descriptor for ScrollStateRequest, (uint64_t (*)(unsigned char *, uint64_t))outlined init with take of ScrollStateRequest);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<ContentStyle.MaterialStyle, [DisplayList.Effect]>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  char v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      int64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    float64x2_t v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    double v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      char v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      double v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 24 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + 24 * v15;
    uint64_t v18 = *(void *)v17;
    uint64_t v19 = *(_DWORD *)(v17 + 12);
    int64_t v20 = *(_WORD *)(v17 + 16);
    unint64_t v21 = 8 * v15;
    int64_t v22 = *(void *)(*(void *)(v2 + 56) + v21);
    double v23 = *(void *)(v4 + 48) + v16;
    float64x2_t v24 = *(unsigned char *)(v17 + 8);
    *(void *)double v23 = *(void *)v17;
    *(unsigned char *)(v23 + 8) = v24;
    *(_DWORD *)(v23 + 12) = v19;
    *(_WORD *)(v23 + 16) = v20;
    *(void *)(*(void *)(v4 + 56) + v21) = v22;
    outlined copy of Material.ID(v18, v24);
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  float64x2_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  double v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    char v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    char v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    double v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<Material.ResolvedMaterial, [AnyMaterialLayer]>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  char v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      int64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    float64x2_t v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13) {
      goto LABEL_26;
    }
    float64x2_t v25 = *(void *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      char v9 = v24 + 1;
      if (v24 + 1 >= v13) {
        goto LABEL_26;
      }
      float64x2_t v25 = *(void *)(v6 + 8 * v9);
      if (!v25) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v25 - 1) & v25;
    unint64_t v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 16 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + 16 * v15;
    uint64_t v18 = *(void *)v17;
    uint64_t v19 = *(_DWORD *)(v17 + 12);
    int64_t v20 = 8 * v15;
    unint64_t v21 = *(void *)(*(void *)(v2 + 56) + v20);
    int64_t v22 = *(void *)(v4 + 48) + v16;
    double v23 = *(unsigned char *)(v17 + 8);
    *(void *)int64_t v22 = *(void *)v17;
    *(unsigned char *)(v22 + 8) = v23;
    *(_DWORD *)(v22 + 12) = v19;
    *(void *)(*(void *)(v4 + 56) + v20) = v21;
    outlined copy of Material.ID(v18, v23);
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  double v26 = v24 + 2;
  if (v26 >= v13) {
    goto LABEL_26;
  }
  float64x2_t v25 = *(void *)(v6 + 8 * v26);
  if (v25)
  {
    char v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    char v9 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    float64x2_t v25 = *(void *)(v6 + 8 * v9);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.GlyphIndex, Int>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.GlyphIndex and conformance Text.Effect.GlyphIndex);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  long long v23;
  long long v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<Double, Text.Effect.BaseFragment>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  char v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      int64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    double v26 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v13) {
      goto LABEL_26;
    }
    float64x2_t v27 = *(void *)(v6 + 8 * v26);
    ++v9;
    if (!v27)
    {
      char v9 = v26 + 1;
      if (v26 + 1 >= v13) {
        goto LABEL_26;
      }
      float64x2_t v27 = *(void *)(v6 + 8 * v9);
      if (!v27) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v27 - 1) & v27;
    unint64_t v15 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 56 * v15;
    uint64_t v19 = *(void *)(v2 + 56) + v18;
    int64_t v20 = *(void *)v19;
    unint64_t v21 = *(void *)(v19 + 8);
    int64_t v22 = *(void *)(v19 + 48);
    double v23 = *(_OWORD *)(v19 + 32);
    float64x2_t v24 = *(_OWORD *)(v19 + 16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    float64x2_t v25 = *(void *)(v4 + 56) + v18;
    *(void *)float64x2_t v25 = v20;
    *(void *)(v25 + 8) = v21;
    *(_OWORD *)(v25 + 16) = v24;
    *(_OWORD *)(v25 + 32) = v23;
    *(void *)(v25 + 48) = v22;
    swift_retain();
    swift_retain();
    uint64_t result = (void *)swift_retain();
  }
  float64x2_t v28 = v26 + 2;
  if (v28 >= v13) {
    goto LABEL_26;
  }
  float64x2_t v27 = *(void *)(v6 + 8 * v28);
  if (v27)
  {
    char v9 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    char v9 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    float64x2_t v27 = *(void *)(v6 + 8 * v9);
    ++v28;
    if (v27) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  long long v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<Text.Effect.AttributeTracker.Key, Text.Effect.AttributeTracker.AnyValue>(0, &lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.AttributeTracker.Key, Text.Effect.AttributeTracker.AnyValue>, (void (*)(uint64_t))type metadata accessor for Text.Effect.AttributeTracker.AnyValue, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.AttributeTracker.Key and conformance Text.Effect.AttributeTracker.Key);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  char v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      int64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    float64x2_t v27 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v27 >= v13) {
      goto LABEL_26;
    }
    float64x2_t v28 = *(void *)(v6 + 8 * v27);
    ++v9;
    if (!v28)
    {
      char v9 = v27 + 1;
      if (v27 + 1 >= v13) {
        goto LABEL_26;
      }
      float64x2_t v28 = *(void *)(v6 + 8 * v9);
      if (!v28) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v28 - 1) & v28;
    unint64_t v15 = __clz(__rbit64(v28)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = v15 << 6;
    uint64_t v17 = 8 * v15;
    uint64_t v18 = v16 - v17;
    uint64_t v19 = *(void *)(v2 + 48) + v18;
    int64_t v20 = *(void *)(v19 + 24);
    unint64_t v21 = *(unsigned char *)(v19 + 32);
    int64_t v22 = *(void *)(v19 + 40);
    double v23 = *(unsigned char *)(v19 + 48);
    float64x2_t v24 = *(void *)(*(void *)(v2 + 56) + v17);
    float64x2_t v25 = *(void *)(v4 + 48) + v18;
    double v26 = *(_OWORD *)(v19 + 8);
    *(void *)float64x2_t v25 = *(void *)v19;
    *(_OWORD *)(v25 + 8) = v26;
    *(void *)(v25 + 24) = v20;
    *(unsigned char *)(v25 + 32) = v21;
    *(void *)(v25 + 40) = v22;
    *(unsigned char *)(v25 + 48) = v23;
    *(void *)(*(void *)(v4 + 56) + v17) = v24;
    uint64_t result = (void *)swift_retain();
  }
  float64x2_t v29 = v27 + 2;
  if (v29 >= v13) {
    goto LABEL_26;
  }
  float64x2_t v28 = *(void *)(v6 + 8 * v29);
  if (v28)
  {
    char v9 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    char v9 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    float64x2_t v28 = *(void *)(v6 + 8 * v9);
    ++v29;
    if (v28) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.FragmentIdentifier, Int>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.FragmentIdentifier and conformance Text.Effect.FragmentIdentifier);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  long long v21;
  long long v22[2];

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<DisplayList.GraphicsRenderer.Cache.AnimatorKey, _DisplayList_AnyEffectAnimator>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  char v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      int64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    uint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      char v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 16 * v15;
    unint64_t v21 = *(_OWORD *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v17 = 40 * v15;
    outlined init with copy of AnyTrackedValue(*(void *)(v2 + 56) + 40 * v15, (uint64_t)v22);
    *(_OWORD *)(*(void *)(v4 + 48) + v16) = v21;
    uint64_t result = (void *)outlined init with take of ScrollStateRequest(v22, *(void *)(v4 + 56) + v17);
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  uint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    char v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    char v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<Text.Effect.AttributeTracker.Key, Text.Effect.AttributeTracker.AnyValue>(0, &lazy cache variable for type metadata for _DictionaryStorage<DisplayList.GraphicsRenderer.Cache.CallbackKey, RBDisplayListContents>, (void (*)(uint64_t))type metadata accessor for RBDisplayListContents, (void (*)(void))lazy protocol witness table accessor for type DisplayList.GraphicsRenderer.Cache.CallbackKey and conformance DisplayList.GraphicsRenderer.Cache.CallbackKey);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  char v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      int64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    double v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    float64x2_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      char v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      float64x2_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 32 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + 32 * v15;
    uint64_t v18 = *(_WORD *)(v17 + 16);
    uint64_t v19 = *(void *)(v17 + 24);
    int64_t v20 = 8 * v15;
    unint64_t v21 = *(void *)(*(void *)(v2 + 56) + v20);
    int64_t v22 = *(void *)(v4 + 48) + v16;
    *(_OWORD *)int64_t v22 = *(_OWORD *)v17;
    *(_WORD *)(v22 + 16) = v18;
    *(void *)(v22 + 24) = v19;
    *(void *)(*(void *)(v4 + 56) + v20) = v21;
    uint64_t result = (void *)swift_unknownObjectRetain();
  }
  float64x2_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  float64x2_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    char v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    char v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    float64x2_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  long long v26[2];

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<EventID, EventType>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_28:
    *uint64_t v1 = v4;
    return result;
  }
  float64x2_t v25 = v1;
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  char v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      int64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    double v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      char v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      double v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    int64_t v20 = 40 * v15;
    outlined init with copy of AnyTrackedValue(*(void *)(v2 + 56) + 40 * v15, (uint64_t)v26);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = v18;
    v21[1] = v19;
    uint64_t result = (void *)outlined init with take of ScrollStateRequest(v26, *(void *)(v4 + 56) + v20);
  }
  float64x2_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  double v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    char v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    char v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    double v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, AnyAccessibilityPropertiesEntry>, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry, (uint64_t)&protocol descriptor for AnyAccessibilityPropertiesEntry, (uint64_t (*)(unsigned char *, uint64_t))outlined init with take of ScrollStateRequest);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<AGAttribute, AGAttribute>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  char v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      int64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    uint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      char v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v21 = __clz(__rbit64(v19));
    uint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = v21 + (v9 << 6);
LABEL_12:
    unint64_t v16 = 4 * v15;
    uint64_t v17 = *(_DWORD *)(*(void *)(v2 + 56) + v16);
    *(_DWORD *)(*(void *)(v4 + 48) + v16) = *(_DWORD *)(*(void *)(v2 + 48) + v16);
    *(_DWORD *)(*(void *)(v4 + 56) + v16) = v17;
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  uint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    char v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    char v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *result;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;

  uint64_t v1 = type metadata accessor for AccessibilityCustomAttributes.Value();
  float64x2_t v28 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _DictionaryStorage<Int, LocalizedStringKey.FormatArgument>(0, &lazy cache variable for type metadata for _DictionaryStorage<String, AccessibilityCustomAttributes.Value>, (void (*)(uint64_t))type metadata accessor for AccessibilityCustomAttributes.Value);
  float64x2_t v25 = v0;
  uint64_t v4 = *v0;
  uint64_t v5 = static _DictionaryStorage.copy(original:)();
  uint64_t v6 = v5;
  if (!*(void *)(v4 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *float64x2_t v25 = v6;
    return result;
  }
  uint64_t result = (void *)(v5 + 64);
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v6 + 32)) + 63) >> 6;
  if (v6 != v4 || (unint64_t)result >= v4 + 64 + 8 * v8) {
    uint64_t result = memmove(result, (const void *)(v4 + 64), 8 * v8);
  }
  double v26 = v4 + 64;
  int64_t v10 = 0;
  *(void *)(v6 + 16) = *(void *)(v4 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v4 + 64);
  float64x2_t v27 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      int64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v27) {
      goto LABEL_26;
    }
    double v23 = *(void *)(v26 + 8 * v22);
    ++v10;
    if (!v23)
    {
      int64_t v10 = v22 + 1;
      if (v22 + 1 >= v27) {
        goto LABEL_26;
      }
      double v23 = *(void *)(v26 + 8 * v10);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v10 << 6);
LABEL_12:
    unint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v15);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    int64_t v20 = *(void *)(v28 + 72) * v15;
    outlined init with copy of Text.Effect.InteractionMetrics(*(void *)(v4 + 56) + v20, (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for AccessibilityCustomAttributes.Value);
    unint64_t v21 = (void *)(*(void *)(v6 + 48) + v16);
    *unint64_t v21 = v18;
    v21[1] = v19;
    outlined init with take of Text.Effect.InteractionMetrics((uint64_t)v3, *(void *)(v6 + 56) + v20, (uint64_t (*)(void))type metadata accessor for AccessibilityCustomAttributes.Value);
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  float64x2_t v24 = v22 + 2;
  if (v24 >= v27) {
    goto LABEL_26;
  }
  double v23 = *(void *)(v26 + 8 * v24);
  if (v23)
  {
    int64_t v10 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v10 >= v27) {
      goto LABEL_26;
    }
    double v23 = *(void *)(v26 + 8 * v10);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, ForwardedEventDispatcher>, &lazy cache variable for type metadata for ForwardedEventDispatcher, (uint64_t)&protocol descriptor for ForwardedEventDispatcher, (uint64_t (*)(unsigned char *, uint64_t))outlined init with take of ScrollStateRequest);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<ColorCacheKey, NamedColorInfo>(0, &lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.RelativeIdentifierKey, CGFloat>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.RelativeIdentifierKey and conformance Text.Effect.RelativeIdentifierKey);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  char v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      int64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13) {
      goto LABEL_26;
    }
    int64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      char v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      int64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    int64_t v22 = __clz(__rbit64(v20));
    uint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = v22 + (v9 << 6);
LABEL_12:
    unint64_t v16 = 16 * v15;
    uint64_t v17 = 8 * v15;
    uint64_t v18 = *(void *)(*(void *)(v2 + 56) + v17);
    *(_OWORD *)(*(void *)(v4 + 48) + v16) = *(_OWORD *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v17) = v18;
  }
  unint64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  int64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    char v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    char v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *result;
  unint64_t v5;
  BOOL v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  long long v32;
  uint64_t v33;
  int64_t v34;
  unint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  type metadata accessor for _DictionaryStorage<ColorCacheKey, NamedColorInfo>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.Identifier, TextEffectsAnimationController.Timing>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.Identifier and conformance Text.Effect.Identifier);
  double v38 = v0;
  uint64_t v1 = *v0;
  uint64_t v2 = static _DictionaryStorage.copy(original:)();
  uint64_t v3 = v2;
  if (!*(void *)(v1 + 16))
  {
LABEL_26:
    double v37 = v3;
    uint64_t result = (void *)swift_release();
    *double v38 = v37;
    return result;
  }
  uint64_t result = (void *)(v2 + 64);
  uint64_t v5 = (unint64_t)((1 << *(unsigned char *)(v3 + 32)) + 63) >> 6;
  uint64_t v6 = v3 != v1 || (unint64_t)result >= v1 + 64 + 8 * v5;
  double v42 = v3;
  if (v6)
  {
    uint64_t result = memmove(result, (const void *)(v1 + 64), 8 * v5);
    uint64_t v3 = v42;
  }
  double v40 = v1 + 64;
  double v41 = v1;
  uint64_t v7 = 0;
  *(void *)(v3 + 16) = *(void *)(v1 + 16);
  unint64_t v8 = 1 << *(unsigned char *)(v1 + 32);
  char v9 = -1;
  if (v8 < 64) {
    char v9 = ~(-1 << v8);
  }
  int64_t v10 = v9 & *(void *)(v1 + 64);
  double v39 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      uint64_t v11 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      uint64_t v12 = v11 | (v7 << 6);
      unint64_t v13 = v41;
      uint64_t v3 = v42;
      goto LABEL_12;
    }
    float64x2_t v34 = v7 + 1;
    unint64_t v13 = v41;
    uint64_t v3 = v42;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v34 >= v39) {
      goto LABEL_26;
    }
    float64x2_t v35 = *(void *)(v40 + 8 * v34);
    ++v7;
    if (!v35)
    {
      uint64_t v7 = v34 + 1;
      if (v34 + 1 >= v39) {
        goto LABEL_26;
      }
      float64x2_t v35 = *(void *)(v40 + 8 * v7);
      if (!v35) {
        break;
      }
    }
LABEL_25:
    int64_t v10 = (v35 - 1) & v35;
    uint64_t v12 = __clz(__rbit64(v35)) + (v7 << 6);
LABEL_12:
    int64_t v14 = 8 * v12;
    unint64_t v15 = *(void *)(*(void *)(v13 + 48) + 8 * v12);
    unint64_t v16 = 120 * v12;
    uint64_t v17 = *(void *)(v13 + 56) + v16;
    uint64_t v18 = *(void *)(v17 + 16);
    uint64_t v19 = *(unsigned char *)(v17 + 24);
    int64_t v20 = *(unsigned char *)(v17 + 25);
    unint64_t v21 = *(void *)(v17 + 32);
    int64_t v22 = *(unsigned char *)(v17 + 40);
    double v23 = *(void *)(v17 + 48);
    float64x2_t v24 = *(void *)(v17 + 56);
    float64x2_t v25 = *(void *)(v17 + 64);
    double v26 = *(void *)(v17 + 72);
    float64x2_t v27 = *(unsigned char *)(v17 + 80);
    float64x2_t v28 = *(void *)(v17 + 88);
    float64x2_t v29 = *(void *)(v17 + 96);
    float64x2_t v30 = *(void *)(v17 + 104);
    float64x2_t v31 = *(unsigned char *)(v17 + 112);
    float64x2_t v32 = *(_OWORD *)v17;
    *(void *)(*(void *)(v3 + 48) + v14) = v15;
    float64x2_t v33 = *(void *)(v3 + 56) + v16;
    *(_OWORD *)float64x2_t v33 = v32;
    *(void *)(v33 + 16) = v18;
    *(unsigned char *)(v33 + 24) = v19;
    *(unsigned char *)(v33 + 25) = v20;
    *(void *)(v33 + 32) = v21;
    *(unsigned char *)(v33 + 40) = v22;
    *(void *)(v33 + 48) = v23;
    *(void *)(v33 + 56) = v24;
    *(void *)(v33 + 64) = v25;
    *(void *)(v33 + 72) = v26;
    *(unsigned char *)(v33 + 80) = v27;
    *(void *)(v33 + 88) = v28;
    *(void *)(v33 + 96) = v29;
    *(void *)(v33 + 104) = v30;
    *(unsigned char *)(v33 + 112) = v31;
    swift_retain();
    outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v24, v25, v26, v27);
    uint64_t result = (void *)outlined copy of TextEffectsAnimationController.Timing.PhaseConfiguration(v28, v29, v30, v31);
  }
  float64x2_t v36 = v34 + 2;
  if (v36 >= v39) {
    goto LABEL_26;
  }
  float64x2_t v35 = *(void *)(v40 + 8 * v36);
  if (v35)
  {
    uint64_t v7 = v36;
    goto LABEL_25;
  }
  while (1)
  {
    uint64_t v7 = v36 + 1;
    if (__OFADD__(v36, 1)) {
      break;
    }
    if (v7 >= v39) {
      goto LABEL_26;
    }
    float64x2_t v35 = *(void *)(v40 + 8 * v7);
    ++v36;
    if (v35) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.Identifier, Text.Effect.AnyAnimationInfo>, (void (*)(uint64_t))type metadata accessor for Text.Effect.AnyAnimationInfo);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Text.Effect.InteractionMetrics();
  float64x2_t v27 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _DictionaryStorage<Text.Effect.AttributeTracker.Key, Text.Effect.AttributeTracker.AnyValue>(0, &lazy cache variable for type metadata for _DictionaryStorage<TextRenderLayer.SegmentIdentifierKey, Text.Effect.InteractionMetrics>, (void (*)(uint64_t))type metadata accessor for Text.Effect.InteractionMetrics, (void (*)(void))lazy protocol witness table accessor for type TextRenderLayer.SegmentIdentifierKey and conformance TextRenderLayer.SegmentIdentifierKey);
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_28:
    *uint64_t v1 = v7;
    return result;
  }
  float64x2_t v25 = v1;
  uint64_t result = (void *)(v6 + 64);
  char v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    uint64_t result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  double v26 = v5 + 64;
  uint64_t v11 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v5 + 32);
  unint64_t v13 = -1;
  if (v12 < 64) {
    unint64_t v13 = ~(-1 << v12);
  }
  int64_t v14 = v13 & *(void *)(v5 + 64);
  unint64_t v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      uint64_t v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }
    unint64_t v21 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v15) {
      goto LABEL_26;
    }
    int64_t v22 = *(void *)(v26 + 8 * v21);
    ++v11;
    if (!v22)
    {
      uint64_t v11 = v21 + 1;
      if (v21 + 1 >= v15) {
        goto LABEL_26;
      }
      int64_t v22 = *(void *)(v26 + 8 * v11);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    int64_t v14 = (v22 - 1) & v22;
    uint64_t v17 = __clz(__rbit64(v22)) + (v11 << 6);
LABEL_12:
    uint64_t v18 = 8 * v17;
    uint64_t v19 = *(void *)(*(void *)(v5 + 48) + 8 * v17);
    int64_t v20 = *(void *)(v27 + 72) * v17;
    outlined init with copy of Text.Effect.InteractionMetrics(*(void *)(v5 + 56) + v20, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for Text.Effect.InteractionMetrics);
    *(void *)(*(void *)(v7 + 48) + v18) = v19;
    uint64_t result = (void *)outlined init with take of Text.Effect.InteractionMetrics((uint64_t)v4, *(void *)(v7 + 56) + v20, (uint64_t (*)(void))type metadata accessor for Text.Effect.InteractionMetrics);
  }
  double v23 = v21 + 2;
  if (v23 >= v15)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  int64_t v22 = *(void *)(v26 + 8 * v23);
  if (v22)
  {
    uint64_t v11 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    uint64_t v11 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v11 >= v15) {
      goto LABEL_26;
    }
    int64_t v22 = *(void *)(v26 + 8 * v11);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()((void (*)(void))type metadata accessor for _DictionaryStorage<Text.Effect.Identifier, [Text.Effect.KeyframeLayout.Fragment]>);
}

{
  return specialized _NativeDictionary.copy()(&lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.Identifier, Int>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.Identifier and conformance Text.Effect.Identifier);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<ColorCacheKey, NamedColorInfo>(0, &lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.Key, Text.Effect.KeyframeLayout>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.Key and conformance Text.Effect.Key);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  char v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      int64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    float64x2_t v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13) {
      goto LABEL_26;
    }
    float64x2_t v25 = *(void *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      char v9 = v24 + 1;
      if (v24 + 1 >= v13) {
        goto LABEL_26;
      }
      float64x2_t v25 = *(void *)(v6 + 8 * v9);
      if (!v25) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v25 - 1) & v25;
    unint64_t v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    int64_t v20 = *(void *)(v2 + 56) + v16;
    unint64_t v21 = *(void *)v20;
    LOBYTE(v20) = *(unsigned char *)(v20 + 8);
    int64_t v22 = (void *)(*(void *)(v4 + 48) + v16);
    *int64_t v22 = v19;
    v22[1] = v18;
    double v23 = *(void *)(v4 + 56) + v16;
    *(void *)double v23 = v21;
    *(unsigned char *)(v23 + 8) = v20;
    swift_retain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  double v26 = v24 + 2;
  if (v26 >= v13) {
    goto LABEL_26;
  }
  float64x2_t v25 = *(void *)(v6 + 8 * v26);
  if (v25)
  {
    char v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    char v9 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    float64x2_t v25 = *(void *)(v6 + 8 * v9);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  long long v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<ColorCacheKey, NamedColorInfo>(0, &lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.Identifier, FragmentIdentifierOffsetMap.Entry>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.Identifier and conformance Text.Effect.Identifier);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  char v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      int64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    double v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    float64x2_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      char v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      float64x2_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    double v26 = __clz(__rbit64(v24));
    uint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = v26 + (v9 << 6);
LABEL_12:
    unint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 24 * v15;
    uint64_t v19 = *(void *)(v2 + 56) + v18;
    int64_t v20 = *(void *)(v19 + 16);
    unint64_t v21 = *(_OWORD *)v19;
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    int64_t v22 = *(void *)(v4 + 56) + v18;
    *(_OWORD *)int64_t v22 = v21;
    *(void *)(v22 + 16) = v20;
  }
  float64x2_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  float64x2_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    char v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    char v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    float64x2_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.Identifier, Text.Effect.AnyLayoutState>, (void (*)(uint64_t))type metadata accessor for Text.Effect.AnyLayoutState);
}

{
  return specialized _NativeDictionary.copy()((void (*)(void))type metadata accessor for _DictionaryStorage<Text.Effect.Identifier, Set<Int>>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  long long v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<ColorCacheKey, NamedColorInfo>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.Identifier, Text.Effect.BasePhaseConfiguration>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.Identifier and conformance Text.Effect.Identifier);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  char v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      int64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      char v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 16 * v15;
    uint64_t v19 = *(_OWORD *)(*(void *)(v2 + 56) + v18);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(void *)(v4 + 56) + v18) = v19;
    swift_retain();
    uint64_t result = (void *)swift_retain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    char v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    char v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.ClusterIndex, Int>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.ClusterIndex and conformance Text.Effect.ClusterIndex);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  long long *v16;
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  _OWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<ColorCacheKey, NamedColorInfo>(0, &lazy cache variable for type metadata for _DictionaryStorage<_ForegroundLayerLevel, _ColorMatrix>, (void (*)(void))lazy protocol witness table accessor for type _ForegroundLayerLevel and conformance _ForegroundLayerLevel);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  char v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      int64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    double v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    float64x2_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      char v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      float64x2_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    double v26 = __clz(__rbit64(v24));
    uint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = v26 + (v9 << 6);
LABEL_12:
    unint64_t v16 = (long long *)(*(void *)(v2 + 56) + 80 * v15);
    uint64_t v17 = v16[2];
    uint64_t v18 = v16[3];
    uint64_t v19 = v16[4];
    unint64_t v21 = *v16;
    int64_t v20 = v16[1];
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    int64_t v22 = (_OWORD *)(*(void *)(v4 + 56) + 80 * v15);
    v22[3] = v18;
    v22[4] = v19;
    v22[1] = v20;
    _OWORD v22[2] = v17;
    *int64_t v22 = v21;
  }
  float64x2_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  float64x2_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    char v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    char v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    float64x2_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<ColorCacheKey, NamedColorInfo>(0, &lazy cache variable for type metadata for _DictionaryStorage<EventID, EventBinding>, (void (*)(void))lazy protocol witness table accessor for type EventID and conformance EventID);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  char v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      int64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    double v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    float64x2_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      char v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      float64x2_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    int64_t v20 = 8 * v15;
    unint64_t v21 = *(void *)(*(void *)(v2 + 56) + v20);
    int64_t v22 = (void *)(*(void *)(v4 + 48) + v16);
    *int64_t v22 = v19;
    v22[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v20) = v21;
    uint64_t result = (void *)swift_retain();
  }
  float64x2_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  float64x2_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    char v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    char v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    float64x2_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  long long v19;
  uint64_t v20;
  long long v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  _OWORD v26[2];
  uint64_t v27;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<AnyHashable, SymbolRenderer.CachedResolvedSymbol>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  char v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      int64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    double v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    float64x2_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      char v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      float64x2_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    outlined init with copy of AnyHashable(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v26);
    unint64_t v16 = *(void *)(v2 + 56) + 24 * v15;
    uint64_t v17 = *(void *)(v16 + 16);
    uint64_t v18 = *(void *)(v4 + 48) + 40 * v15;
    uint64_t v19 = *(_OWORD *)v16;
    int64_t v20 = v27;
    unint64_t v21 = v26[1];
    *(_OWORD *)uint64_t v18 = v26[0];
    *(_OWORD *)(v18 + 16) = v21;
    *(void *)(v18 + 32) = v20;
    int64_t v22 = *(void *)(v4 + 56) + 24 * v15;
    *(_OWORD *)int64_t v22 = v19;
    *(void *)(v22 + 16) = v17;
    uint64_t result = (void *)swift_unknownObjectRetain();
  }
  float64x2_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  float64x2_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    char v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    char v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    float64x2_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<UInt32, Int>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  char v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      int64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      char v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    double v23 = __clz(__rbit64(v21));
    uint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = v23 + (v9 << 6);
LABEL_12:
    unint64_t v16 = 4 * v15;
    uint64_t v17 = *(_DWORD *)(*(void *)(v2 + 48) + 4 * v15);
    uint64_t v18 = 8 * v15;
    uint64_t v19 = *(void *)(*(void *)(v2 + 56) + v18);
    *(_DWORD *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v18) = v19;
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    char v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    char v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  __int16 v23;
  int v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  long long v29;
  long long v30;
  long long v31;
  long long v32;
  long long v33;
  uint64_t v34;
  id v35;
  int64_t v36;
  unint64_t v37;
  int64_t v38;
  void *v39;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<ColorCacheKey, NamedColorInfo>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<DisplayList.ViewUpdater.ViewCache.Key, DisplayList.ViewUpdater.ViewInfo>, (void (*)(void))lazy protocol witness table accessor for type DisplayList.ViewUpdater.ViewCache.Key and conformance DisplayList.ViewUpdater.ViewCache.Key);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  char v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      int64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    float64x2_t v36 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v36 >= v13) {
      goto LABEL_26;
    }
    double v37 = *(void *)(v6 + 8 * v36);
    ++v9;
    if (!v37)
    {
      char v9 = v36 + 1;
      if (v36 + 1 >= v13) {
        goto LABEL_26;
      }
      double v37 = *(void *)(v6 + 8 * v9);
      if (!v37) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v37 - 1) & v37;
    unint64_t v15 = __clz(__rbit64(v37)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 20 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + 20 * v15;
    uint64_t v18 = *(unsigned char *)(v17 + 16);
    uint64_t v19 = 120 * v15;
    int64_t v20 = *(void *)(v2 + 56) + v19;
    unint64_t v21 = *(void *)(v20 + 16);
    int64_t v22 = *(_WORD *)(v20 + 56);
    double v23 = *(_WORD *)(v20 + 96);
    float64x2_t v24 = *(_DWORD *)(v20 + 100);
    float64x2_t v25 = *(unsigned char *)(v20 + 104);
    double v26 = *(unsigned char *)(v20 + 105);
    float64x2_t v27 = *(void *)(v20 + 112);
    float64x2_t v28 = *(void *)(v4 + 48) + v16;
    float64x2_t v30 = *(_OWORD *)(v20 + 64);
    float64x2_t v29 = *(_OWORD *)(v20 + 80);
    float64x2_t v31 = *(_OWORD *)(v20 + 24);
    float64x2_t v32 = *(_OWORD *)(v20 + 40);
    float64x2_t v33 = *(_OWORD *)v20;
    *(_OWORD *)float64x2_t v28 = *(_OWORD *)v17;
    *(unsigned char *)(v28 + 16) = v18;
    float64x2_t v34 = *(void *)(v4 + 56) + v19;
    *(_OWORD *)float64x2_t v34 = v33;
    double v39 = (void *)*((void *)&v33 + 1);
    *(void *)(v34 + 16) = v21;
    *(_OWORD *)(v34 + 24) = v31;
    *(_OWORD *)(v34 + 40) = v32;
    *(_WORD *)(v34 + 56) = v22;
    *(_OWORD *)(v34 + 64) = v30;
    *(_OWORD *)(v34 + 80) = v29;
    *(_WORD *)(v34 + 96) = v23;
    *(_DWORD *)(v34 + 100) = v24;
    *(unsigned char *)(v34 + 104) = v25;
    *(unsigned char *)(v34 + 105) = v26;
    *(void *)(v34 + 112) = v27;
    swift_unknownObjectRetain();
    float64x2_t v35 = v39;
    uint64_t result = (void *)swift_unknownObjectRetain();
  }
  double v38 = v36 + 2;
  if (v38 >= v13) {
    goto LABEL_26;
  }
  double v37 = *(void *)(v6 + 8 * v38);
  if (v37)
  {
    char v9 = v38;
    goto LABEL_25;
  }
  while (1)
  {
    char v9 = v38 + 1;
    if (__OFADD__(v38, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    double v37 = *(void *)(v6 + 8 * v9);
    ++v38;
    if (v37) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  long long v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<OpaquePointer, DisplayList.ViewUpdater.ViewCache.Key>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  char v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      int64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    double v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    float64x2_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      char v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      float64x2_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    double v26 = __clz(__rbit64(v24));
    uint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = v26 + (v9 << 6);
LABEL_12:
    unint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 20 * v15;
    uint64_t v19 = *(void *)(v2 + 56) + v18;
    int64_t v20 = *(unsigned char *)(v19 + 16);
    unint64_t v21 = *(_OWORD *)v19;
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    int64_t v22 = *(void *)(v4 + 56) + v18;
    *(_OWORD *)int64_t v22 = v21;
    *(unsigned char *)(v22 + 16) = v20;
  }
  float64x2_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  float64x2_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    char v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    char v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    float64x2_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;

  uint64_t v1 = v0;
  _ss18_DictionaryStorageCySo13AGSubgraphRefaSayyADcGGMaTm_0(0, &lazy cache variable for type metadata for _DictionaryStorage<_NSRange, [NSAttributedStringKey : Any]>, type metadata accessor for _NSRange, (void (*)(uint64_t))type metadata accessor for [NSAttributedStringKey : Any], (void (*)(void))lazy protocol witness table accessor for type _NSRange and conformance _NSRange);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  char v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      int64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13) {
      goto LABEL_26;
    }
    int64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      char v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      int64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 16 * v15;
    uint64_t v17 = 8 * v15;
    uint64_t v18 = *(void *)(*(void *)(v2 + 56) + v17);
    *(_OWORD *)(*(void *)(v4 + 48) + v16) = *(_OWORD *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v17) = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  unint64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  int64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    char v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    char v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  char v21[8];

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<Text.Effect.AttributeTracker.Key, Text.Effect.AttributeTracker.AnyValue>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<AnyHashable2, WeakBox<AnyLocationBase>>, type metadata accessor for WeakBox<AnyLocationBase>, (void (*)(void))lazy protocol witness table accessor for type AnyHashable2 and conformance AnyHashable2);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  char v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      int64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    uint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      char v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    outlined init with copy of Text.Effect.InteractionMetrics(*(void *)(v2 + 56) + 8 * v15, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for WeakBox<AnyLocationBase>);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    outlined init with take of Text.Effect.InteractionMetrics((uint64_t)v21, *(void *)(v4 + 56) + v16, (uint64_t (*)(void))type metadata accessor for WeakBox<AnyLocationBase>);
    uint64_t result = (void *)swift_retain();
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  uint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    char v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    char v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<Text.Effect.AttributeTracker.Key, Text.Effect.AttributeTracker.AnyValue>(0, &lazy cache variable for type metadata for _DictionaryStorage<AGSubgraphRef.Map.Key, [ScrapeableContent.Node]>, type metadata accessor for [ScrapeableContent.Node], (void (*)(void))lazy protocol witness table accessor for type AGSubgraphRef.Map.Key and conformance AGSubgraphRef.Map.Key);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  char v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      int64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      char v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    uint64_t v19 = v17;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    char v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    char v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  long long v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<ColorCacheKey, NamedColorInfo>(0, &lazy cache variable for type metadata for _DictionaryStorage<ScrollAnchorStorage.Role, UnitPoint>, (void (*)(void))lazy protocol witness table accessor for type ScrollAnchorStorage.Role and conformance ScrollAnchorStorage.Role);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  char v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      int64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13) {
      goto LABEL_26;
    }
    uint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      char v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }
LABEL_25:
    int64_t v20 = __clz(__rbit64(v18));
    uint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = v20 + (v9 << 6);
LABEL_12:
    unint64_t v16 = *(_OWORD *)(*(void *)(v2 + 56) + 16 * v15);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    *(_OWORD *)(*(void *)(v4 + 56) + 16 * v15) = v16;
  }
  uint64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  uint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    char v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    char v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  long long v23;
  long long v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  long long v28;
  _OWORD v29[3];
  uint64_t v30;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<ColorCacheKey, NamedColorInfo>(0, &lazy cache variable for type metadata for _DictionaryStorage<DisplayList.ViewUpdater.ViewCache.Key, DisplayList.ViewUpdater.ViewCache.AnimatorInfo>, (void (*)(void))lazy protocol witness table accessor for type DisplayList.ViewUpdater.ViewCache.Key and conformance DisplayList.ViewUpdater.ViewCache.Key);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  char v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      int64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    float64x2_t v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    double v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      char v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      double v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 20 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + 20 * v15;
    uint64_t v18 = *(unsigned char *)(v17 + 16);
    float64x2_t v28 = *(_OWORD *)v17;
    uint64_t v19 = 56 * v15;
    uint64_t result = (void *)outlined init with copy of DisplayList.ViewUpdater.ViewCache.AnimatorInfo(*(void *)(v2 + 56) + 56 * v15, (uint64_t)v29);
    int64_t v20 = *(void *)(v4 + 48) + v16;
    *(_OWORD *)int64_t v20 = v28;
    *(unsigned char *)(v20 + 16) = v18;
    unint64_t v21 = *(void *)(v4 + 56) + v19;
    int64_t v22 = v30;
    double v23 = v29[2];
    float64x2_t v24 = v29[1];
    *(_OWORD *)unint64_t v21 = v29[0];
    *(_OWORD *)(v21 + 16) = v24;
    *(_OWORD *)(v21 + 32) = v23;
    *(void *)(v21 + 48) = v22;
  }
  float64x2_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  double v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    char v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    char v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    double v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  long long v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, DisplayList.ViewUpdater.ViewCache.AsyncValues>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  char v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      int64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      char v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 16 * v15;
    uint64_t v19 = *(_OWORD *)(*(void *)(v2 + 56) + v18);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(void *)(v4 + 56) + v18) = v19;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    char v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    char v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  long long v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<Int, LocalizedStringKey.FormatArgument>(0, &lazy cache variable for type metadata for _DictionaryStorage<String, Decodable & AnyViewFactory.Type>, (void (*)(uint64_t))type metadata accessor for Decodable & AnyViewFactory.Type);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  char v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      int64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    double v26 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v13) {
      goto LABEL_26;
    }
    float64x2_t v27 = *(void *)(v6 + 8 * v26);
    ++v9;
    if (!v27)
    {
      char v9 = v26 + 1;
      if (v26 + 1 >= v13) {
        goto LABEL_26;
      }
      float64x2_t v27 = *(void *)(v6 + 8 * v9);
      if (!v27) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v27 - 1) & v27;
    unint64_t v15 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    int64_t v20 = 24 * v15;
    unint64_t v21 = *(void *)(v2 + 56) + v20;
    int64_t v22 = *(void *)(v21 + 16);
    double v23 = (void *)(*(void *)(v4 + 48) + v16);
    float64x2_t v24 = *(_OWORD *)v21;
    *double v23 = v19;
    v23[1] = v18;
    float64x2_t v25 = *(void *)(v4 + 56) + v20;
    *(_OWORD *)float64x2_t v25 = v24;
    *(void *)(v25 + 16) = v22;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  float64x2_t v28 = v26 + 2;
  if (v28 >= v13) {
    goto LABEL_26;
  }
  float64x2_t v27 = *(void *)(v6 + 8 * v28);
  if (v27)
  {
    char v9 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    char v9 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    float64x2_t v27 = *(void *)(v6 + 8 * v9);
    ++v28;
    if (v27) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, &lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, UInt>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  char v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      int64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    uint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      char v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v21 = __clz(__rbit64(v19));
    uint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = v21 + (v9 << 6);
LABEL_12:
    unint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  uint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    char v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    char v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<ColorCacheKey, NamedColorInfo>(0, &lazy cache variable for type metadata for _DictionaryStorage<CAHostingLayerEvent.MouseButton, Int>, (void (*)(void))lazy protocol witness table accessor for type CAHostingLayerEvent.MouseButton and conformance CAHostingLayerEvent.MouseButton);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  char v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      int64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    uint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      char v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v21 = __clz(__rbit64(v19));
    uint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = v21 + (v9 << 6);
LABEL_12:
    unint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  uint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    char v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    char v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<ColorCacheKey, NamedColorInfo>(0, &lazy cache variable for type metadata for _DictionaryStorage<EventID, EventBindingBridge.TrackedEventState>, (void (*)(void))lazy protocol witness table accessor for type EventID and conformance EventID);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  char v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      int64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    float64x2_t v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13) {
      goto LABEL_26;
    }
    float64x2_t v25 = *(void *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      char v9 = v24 + 1;
      if (v24 + 1 >= v13) {
        goto LABEL_26;
      }
      float64x2_t v25 = *(void *)(v6 + 8 * v9);
      if (!v25) {
        break;
      }
    }
LABEL_25:
    float64x2_t v27 = __clz(__rbit64(v25));
    uint64_t v12 = (v25 - 1) & v25;
    unint64_t v15 = v27 + (v9 << 6);
LABEL_12:
    unint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    int64_t v20 = *(void *)(v2 + 56) + v16;
    unint64_t v21 = *(void *)v20;
    LOBYTE(v20) = *(unsigned char *)(v20 + 8);
    int64_t v22 = (void *)(*(void *)(v4 + 48) + v16);
    *int64_t v22 = v19;
    v22[1] = v18;
    double v23 = *(void *)(v4 + 56) + v16;
    *(void *)double v23 = v21;
    *(unsigned char *)(v23 + 8) = v20;
  }
  double v26 = v24 + 2;
  if (v26 >= v13) {
    goto LABEL_26;
  }
  float64x2_t v25 = *(void *)(v6 + 8 * v26);
  if (v25)
  {
    char v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    char v9 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    float64x2_t v25 = *(void *)(v6 + 8 * v9);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _OWORD v20[2];

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<ColorCacheKey, NamedColorInfo>(0, &lazy cache variable for type metadata for _DictionaryStorage<_ViewDebug.Property, Any>, (void (*)(void))lazy protocol witness table accessor for type _ViewDebug.Property and conformance _ViewDebug.Property);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  char v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      int64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13) {
      goto LABEL_26;
    }
    uint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      char v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    outlined init with copy of Any(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v20);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = v16;
    uint64_t result = outlined init with take of Any(v20, (_OWORD *)(*(void *)(v4 + 56) + 32 * v15));
  }
  uint64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  uint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    char v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    char v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<ColorCacheKey, NamedColorInfo>(0, &lazy cache variable for type metadata for _DictionaryStorage<Text.Effect.FragmentIdentifier, Text.Effect.Drawable>, (void (*)(void))lazy protocol witness table accessor for type Text.Effect.FragmentIdentifier and conformance Text.Effect.FragmentIdentifier);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  char v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      int64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    uint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      char v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  uint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    char v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    char v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<ColorCacheKey, NamedColorInfo>(0, &lazy cache variable for type metadata for _DictionaryStorage<_ProposedSize, Transaction>, (void (*)(void))lazy protocol witness table accessor for type _ProposedSize and conformance _ProposedSize);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  char v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      int64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    float64x2_t v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13) {
      goto LABEL_26;
    }
    float64x2_t v25 = *(void *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      char v9 = v24 + 1;
      if (v24 + 1 >= v13) {
        goto LABEL_26;
      }
      float64x2_t v25 = *(void *)(v6 + 8 * v9);
      if (!v25) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v25 - 1) & v25;
    unint64_t v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 32 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + 32 * v15;
    uint64_t v18 = *(void *)v17;
    uint64_t v19 = *(unsigned char *)(v17 + 8);
    int64_t v20 = *(void *)(v17 + 16);
    LOBYTE(v17) = *(unsigned char *)(v17 + 24);
    unint64_t v21 = 8 * v15;
    int64_t v22 = *(void *)(*(void *)(v2 + 56) + v21);
    double v23 = *(void *)(v4 + 48) + v16;
    *(void *)double v23 = v18;
    *(unsigned char *)(v23 + 8) = v19;
    *(void *)(v23 + 16) = v20;
    *(unsigned char *)(v23 + 24) = v17;
    *(void *)(*(void *)(v4 + 56) + v21) = v22;
    uint64_t result = (void *)swift_retain();
  }
  double v26 = v24 + 2;
  if (v26 >= v13) {
    goto LABEL_26;
  }
  float64x2_t v25 = *(void *)(v6 + 8 * v26);
  if (v25)
  {
    char v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    char v9 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    float64x2_t v25 = *(void *)(v6 + 8 * v9);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<ColorCacheKey, NamedColorInfo>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<TintPlacement, AnyShapeStyle>, (void (*)(void))lazy protocol witness table accessor for type TintPlacement and conformance TintPlacement);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  char v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      int64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v16 >= v13) {
      goto LABEL_26;
    }
    uint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      char v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 56) + 8 * v15) = *(void *)(*(void *)(v2 + 56) + 8 * v15);
    uint64_t result = (void *)swift_retain();
  }
  uint64_t v18 = v16 + 2;
  if (v18 >= v13) {
    goto LABEL_26;
  }
  uint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    char v9 = v18;
    goto LABEL_25;
  }
  while (1)
  {
    char v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  int64_t v20;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<Int, LocalizedStringKey.FormatArgument>(0, &lazy cache variable for type metadata for _DictionaryStorage<Int, ForEachState<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>.Item>, (void (*)(uint64_t))type metadata accessor for ForEachState<Range<Int>, Int, ModifiedContent<ModifiedContent<SummarySymbol, _ValueTransactionModifier<Double>>, _OffsetEffect>>.Item);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_24:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  char v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      int64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    if (__OFADD__(v9++, 1)) {
      goto LABEL_26;
    }
    if (v9 >= v13) {
      goto LABEL_24;
    }
    uint64_t v19 = *(void *)(v6 + 8 * v9);
    if (!v19) {
      break;
    }
LABEL_23:
    uint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    uint64_t result = (void *)swift_retain();
  }
  int64_t v20 = v9 + 1;
  if (v9 + 1 >= v13) {
    goto LABEL_24;
  }
  uint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    ++v9;
    goto LABEL_23;
  }
  while (1)
  {
    char v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_24;
    }
    uint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_23;
    }
  }
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  unint64_t v18;
  int64_t v19;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<UInt32, Int>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<Int, _ViewList_Edit>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_24:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  char v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      int64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    if (__OFADD__(v9++, 1)) {
      goto LABEL_26;
    }
    if (v9 >= v13) {
      goto LABEL_24;
    }
    uint64_t v18 = *(void *)(v6 + 8 * v9);
    if (!v18) {
      break;
    }
LABEL_23:
    uint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = *(unsigned char *)(*(void *)(v2 + 56) + v15);
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    *(unsigned char *)(*(void *)(v4 + 56) + v15) = v16;
  }
  uint64_t v19 = v9 + 1;
  if (v9 + 1 >= v13) {
    goto LABEL_24;
  }
  uint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    ++v9;
    goto LABEL_23;
  }
  while (1)
  {
    char v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_24;
    }
    uint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_23;
    }
  }
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

double specialized AnimationState.subscript.getter@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  if (*(void *)(a1 + 16)
    && (type metadata accessor for Slice<IndexSet>(0, (unint64_t *)&lazy cache variable for type metadata for SpringState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>, lazy protocol witness table accessor for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for SpringState), unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(v4), (v6 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v5, (uint64_t)v8);
    outlined init with take of Any(v8, v9);
    outlined init with take of Any(v9, v8);
    swift_dynamicCast();
  }
  else
  {
    double result = 0.0;
    a2[6] = 0u;
    a2[7] = 0u;
    a2[4] = 0u;
    a2[5] = 0u;
    a2[2] = 0u;
    a2[3] = 0u;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

void type metadata accessor for SpringState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>()
{
  if (!lazy cache variable for type metadata for SpringState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>)
  {
    type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
    _s7SwiftUI14AnimatablePairVy12CoreGraphics7CGFloatVAFGACyxq_GAA16VectorArithmeticAAWlTm_0(&lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>);
    unint64_t v0 = type metadata accessor for SpringState();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SpringState<AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>>);
    }
  }
}

uint64_t specialized AnimationBox.animate<A>(value:time:context:)(uint64_t a1, double a2, double a3)
{
  uint64_t v6 = *v3;
  uint64_t v7 = *(void *)(*v3 + 160);
  uint64_t v8 = *(void *)(v7 - 8);
  double v9 = MEMORY[0x270FA5388](a1);
  uint64_t v11 = (char *)&v13 - v10;
  double v14 = v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v13 - v10, (uint64_t)v3 + *(void *)(v6 + 176), v7);
  (*(void (**)(uint64_t *__return_ptr, double *, uint64_t, void, _UNKNOWN **, uint64_t, double))(*(void *)(v6 + 168) + 16))(&v15, &v14, a1, MEMORY[0x263F8D538], &protocol witness table for Double, v7, a3);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  return v15;
}

uint64_t specialized FluidSpringAnimation.animate<A>(value:time:context:)(uint64_t a1, double a2, double a3, double a4, double a5, double a6)
{
  uint64_t v12 = swift_bridgeObjectRetain();
  specialized AnimationState.subscript.getter(v12, (uint64_t)&v37);
  swift_bridgeObjectRelease();
  if (a6 <= 0.0 || v43 == 0.0)
  {
    if (a4 > 0.0)
    {
LABEL_4:
      double v13 = 6.28318531 / a4 * (6.28318531 / a4);
      goto LABEL_12;
    }
  }
  else
  {
    double v14 = (a3 - v42) / a6;
    if (v14 <= 1.0) {
      double v15 = (a3 - v42) / a6;
    }
    else {
      double v15 = 1.0;
    }
    BOOL v16 = v14 < 0.0;
    double v17 = 0.0;
    if (!v16) {
      double v17 = v15;
    }
    a4 = v43 * (1.0 - v17 * v17 * (3.0 - (v17 + v17))) + a4;
    if (a4 > 0.0) {
      goto LABEL_4;
    }
  }
  double v13 = INFINITY;
LABEL_12:
  if (v13 > 45000.0) {
    double v13 = 45000.0;
  }
  double v18 = v41;
  if (a4 <= a3 - v41) {
    *(unsigned char *)(a1 + 17) = 1;
  }
  double v19 = v37;
  if (a3 - v40 <= 1.0) {
    double v20 = v40;
  }
  else {
    double v20 = a3 + -0.0166666667;
  }
  if (v20 >= a3)
  {
    double v23 = v38;
    double v22 = v39;
  }
  else
  {
    double v21 = sqrt(v13);
    double v23 = v38;
    double v22 = v39;
    double v24 = (v21 + v21) * a5;
    do
    {
      double v25 = v22 * 0.00166666667 + v23;
      double v19 = v19 + v25 * 0.00333333333;
      double v26 = v13 * (a2 - v19);
      double v22 = v26 - v24 * v25;
      double v23 = v25 + v22 * 0.00166666667;
      double v20 = v20 + 0.00333333333;
    }
    while (v20 < a3);
    double v38 = v25 + v22 * 0.00166666667;
    double v39 = v26 - v24 * v25;
    double v37 = v19;
  }
  double v27 = v42;
  double v28 = v43;
  type metadata accessor for SpringState<Double>();
  uint64_t v30 = v29;
  v36[3] = v29;
  uint64_t v31 = swift_allocObject();
  v36[0] = v31;
  *(double *)(v31 + 16) = v19;
  *(double *)(v31 + 24) = v23;
  *(double *)(v31 + 32) = v22;
  *(double *)(v31 + 40) = v20;
  *(double *)(v31 + 48) = v18;
  *(double *)(v31 + 56) = v27;
  *(double *)(v31 + 64) = v28;
  specialized Dictionary.subscript.setter((uint64_t)v36, v30);
  double v32 = v23 * v23;
  if (v23 * v23 <= v22 * v22) {
    double v32 = v22 * v22;
  }
  if (v32 > 0.0036) {
    return *(void *)&v19;
  }
  double v34 = a2 * 0.01 * (a2 * 0.01);
  if (v34 >= (a2 - v19) * (a2 - v19) || v34 <= 0.0) {
    return 0;
  }
  else {
    return *(void *)&v19;
  }
}

void type metadata accessor for SpringState<Double>()
{
  if (!lazy cache variable for type metadata for SpringState<Double>)
  {
    unint64_t v0 = type metadata accessor for SpringState();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SpringState<Double>);
    }
  }
}

void BezierAnimation.animate<A>(value:time:context:)(double *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>, Swift::Double a5@<D0>)
{
  if (a2 == MEMORY[0x263F8D538])
  {
    BOOL v16 = *(double *)v5 <= 0.0 || *(double *)v5 < a5;
    double v17 = 0.0;
    if (!v16)
    {
      double v19 = *((double *)v5 + 5);
      double v18 = *((double *)v5 + 6);
      uint64_t v20 = *((void *)v5 + 3);
      double v21 = *((double *)v5 + 4);
      double v22 = *a1;
      double v23 = a5 / *(double *)v5;
      if (v23 > 1.0) {
        double v23 = 1.0;
      }
      long long v32 = *(long long *)((char *)v5 + 8);
      *(void *)&long long v33 = v20;
      *((double *)&v33 + 1) = v21;
      if (v23 <= 0.0) {
        double v23 = 0.0;
      }
      *(double *)&long long v34 = v19;
      *((double *)&v34 + 1) = v18;
      double v24 = UnitCurve.CubicSolver.solveX(_:epsilon:)(v23, 0.000000953674316);
      double v17 = v22 * (round(v24 * (v18 + v24 * (v19 + v21 * v24)) * 1048576.0) * 0.000000953674316);
    }
    *(double *)a4 = v17;
    *(unsigned char *)(a4 + 8) = v16;
  }
  else
  {
    type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
    uint64_t v12 = *((void *)v5 + 6);
    if (v11 == a2)
    {
      long long v25 = *((_OWORD *)a1 + 1);
      long long v30 = *(_OWORD *)a1;
      long long v31 = v25;
      long long v26 = v5[1];
      long long v32 = *v5;
      long long v33 = v26;
      long long v34 = v5[2];
      uint64_t v35 = v12;
      Swift::Double_optional v37 = BezierAnimation.fraction(for:)(a5);
      MEMORY[0x270FA5388](*(void *)&v37.is_nil);
      _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lFSd_s5NeverO7SwiftUI14AnimatablePairVyAHy12CoreGraphics7CGFloatVAKGALGTg5(partial apply for specialized closure #1 in BezierAnimation.animate<A>(value:time:context:), v27, v28, (uint64_t)&v32);
      outlined init with take of AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>?((uint64_t)&v32, a4);
    }
    else
    {
      long long v13 = v5[1];
      long long v32 = *v5;
      long long v33 = v13;
      long long v34 = v5[2];
      uint64_t v35 = v12;
      Swift::Double_optional v36 = BezierAnimation.fraction(for:)(a5);
      *(void *)&long long v32 = *(void *)&v36.is_nil;
      BYTE8(v32) = v14 & 1;
      MEMORY[0x270FA5388](*(void *)&v36.is_nil);
      _OWORD v29[2] = a2;
      v29[3] = a3;
      v29[4] = a1;
      type metadata accessor for Double?();
      _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in BezierAnimation.animate<A>(value:time:context:), (uint64_t)v29, MEMORY[0x263F8E628], a2, v15, a4);
    }
  }
}

uint64_t protocol witness for CustomAnimation.animate<A>(value:time:context:) in conformance InternalCustomAnimationModifiedContent<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  return InternalCustomAnimationModifiedContent.animate<A>(value:time:context:)(a1, a2, a6, a5, a3, a4);
}

void type metadata accessor for Double?()
{
  if (!lazy cache variable for type metadata for Double?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Double?);
    }
  }
}

void *_sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lFSd_s5NeverO7SwiftUI14AnimatablePairVyAHy12CoreGraphics7CGFloatVAKGALGTg5@<X0>(void *result@<X0>, uint64_t a2@<X2>, char a3@<W3>, uint64_t a4@<X8>)
{
  long long v7 = 0uLL;
  if (a3)
  {
    long long v8 = 0uLL;
  }
  else
  {
    uint64_t v10 = a2;
    double result = ((void *(*)(_OWORD *__return_ptr, uint64_t *, __n128))result)(v9, &v10, (__n128)0);
    if (v4) {
      return result;
    }
    long long v7 = v9[0];
    long long v8 = v9[1];
  }
  *(_OWORD *)a4 = v7;
  *(_OWORD *)(a4 + 16) = v8;
  *(unsigned char *)(a4 + 32) = a3 & 1;
  return result;
}

float64x2_t partial apply for specialized closure #1 in BezierAnimation.animate<A>(value:time:context:)@<Q0>(double *a1@<X0>, float64x2_t *a2@<X8>)
{
  uint64_t v3 = *(float64x2_t **)(v2 + 16);
  float64x2_t result = vmulq_n_f64(v3[1], *a1);
  *a2 = vmulq_n_f64(*v3, *a1);
  a2[1] = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type IndexSet and conformance IndexSet()
{
  return lazy protocol witness table accessor for type IndexSet and conformance IndexSet(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, MEMORY[0x263F07978]);
}

uint64_t specialized AnimatorState.removeListeners()()
{
  uint64_t v1 = v0;
  uint64_t v2 = (uint64_t *)(v0 + 128);
  swift_beginAccess();
  unint64_t v3 = *(void *)(v0 + 128);
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v5 = MEMORY[0x263F8EE78];
  if (v4)
  {
    uint64_t v6 = *v2;
    if ((unint64_t)*v2 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v7 = result;
      if (result) {
        goto LABEL_6;
      }
    }
    else
    {
      uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v7)
      {
LABEL_6:
        if (v7 < 1)
        {
          __break(1u);
          goto LABEL_31;
        }
        for (uint64_t i = 0; i != v7; ++i)
        {
          if ((v6 & 0xC000000000000001) != 0)
          {
            uint64_t v10 = MEMORY[0x24C523D60](i, v6);
          }
          else
          {
            uint64_t v10 = *(void *)(v6 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v10 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    uint64_t *v2 = v5;
    swift_bridgeObjectRelease();
  }
  uint64_t v11 = (uint64_t *)(v1 + 136);
  uint64_t result = swift_beginAccess();
  unint64_t v12 = *(void *)(v1 + 136);
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v17) {
      return result;
    }
  }
  else if (!*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  uint64_t v13 = *v11;
  if ((unint64_t)*v11 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v14 = result;
    if (result)
    {
LABEL_19:
      if (v14 >= 1)
      {
        for (uint64_t j = 0; j != v14; ++j)
        {
          if ((v13 & 0xC000000000000001) != 0)
          {
            uint64_t v16 = MEMORY[0x24C523D60](j, v13);
          }
          else
          {
            uint64_t v16 = *(void *)(v13 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v16 + 96))();
          swift_release();
        }
        goto LABEL_28;
      }
LABEL_31:
      __break(1u);
      return result;
    }
  }
  else
  {
    uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v14) {
      goto LABEL_19;
    }
  }
LABEL_28:
  swift_bridgeObjectRelease();
  uint64_t *v11 = v5;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t i;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t j;
  uint64_t v16;
  uint64_t v17;

  uint64_t v1 = v0;
  uint64_t v2 = (uint64_t *)(v0 + 80);
  swift_beginAccess();
  unint64_t v3 = *(void *)(v0 + 80);
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v5 = MEMORY[0x263F8EE78];
  if (v4)
  {
    uint64_t v6 = *v2;
    if ((unint64_t)*v2 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v7 = result;
      if (result) {
        goto LABEL_6;
      }
    }
    else
    {
      uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v7)
      {
LABEL_6:
        if (v7 < 1)
        {
          __break(1u);
          goto LABEL_31;
        }
        for (uint64_t i = 0; i != v7; ++i)
        {
          if ((v6 & 0xC000000000000001) != 0)
          {
            uint64_t v10 = MEMORY[0x24C523D60](i, v6);
          }
          else
          {
            uint64_t v10 = *(void *)(v6 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v10 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    uint64_t *v2 = v5;
    swift_bridgeObjectRelease();
  }
  uint64_t v11 = (uint64_t *)(v1 + 88);
  uint64_t result = swift_beginAccess();
  unint64_t v12 = *(void *)(v1 + 88);
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v17) {
      return result;
    }
  }
  else if (!*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  uint64_t v13 = *v11;
  if ((unint64_t)*v11 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v14 = result;
    if (result)
    {
LABEL_19:
      if (v14 >= 1)
      {
        for (uint64_t j = 0; j != v14; ++j)
        {
          if ((v13 & 0xC000000000000001) != 0)
          {
            uint64_t v16 = MEMORY[0x24C523D60](j, v13);
          }
          else
          {
            uint64_t v16 = *(void *)(v13 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v16 + 96))();
          swift_release();
        }
        goto LABEL_28;
      }
LABEL_31:
      __break(1u);
      return result;
    }
  }
  else
  {
    uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v14) {
      goto LABEL_19;
    }
  }
LABEL_28:
  swift_bridgeObjectRelease();
  uint64_t *v11 = v5;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t i;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t j;
  uint64_t v16;
  uint64_t v17;

  uint64_t v1 = v0;
  uint64_t v2 = (uint64_t *)(v0 + 96);
  swift_beginAccess();
  unint64_t v3 = *(void *)(v0 + 96);
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v5 = MEMORY[0x263F8EE78];
  if (v4)
  {
    uint64_t v6 = *v2;
    if ((unint64_t)*v2 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v7 = result;
      if (result) {
        goto LABEL_6;
      }
    }
    else
    {
      uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v7)
      {
LABEL_6:
        if (v7 < 1)
        {
          __break(1u);
          goto LABEL_31;
        }
        for (uint64_t i = 0; i != v7; ++i)
        {
          if ((v6 & 0xC000000000000001) != 0)
          {
            uint64_t v10 = MEMORY[0x24C523D60](i, v6);
          }
          else
          {
            uint64_t v10 = *(void *)(v6 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v10 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    uint64_t *v2 = v5;
    swift_bridgeObjectRelease();
  }
  uint64_t v11 = (uint64_t *)(v1 + 104);
  uint64_t result = swift_beginAccess();
  unint64_t v12 = *(void *)(v1 + 104);
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v17) {
      return result;
    }
  }
  else if (!*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  uint64_t v13 = *v11;
  if ((unint64_t)*v11 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v14 = result;
    if (result)
    {
LABEL_19:
      if (v14 >= 1)
      {
        for (uint64_t j = 0; j != v14; ++j)
        {
          if ((v13 & 0xC000000000000001) != 0)
          {
            uint64_t v16 = MEMORY[0x24C523D60](j, v13);
          }
          else
          {
            uint64_t v16 = *(void *)(v13 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v16 + 96))();
          swift_release();
        }
        goto LABEL_28;
      }
LABEL_31:
      __break(1u);
      return result;
    }
  }
  else
  {
    uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v14) {
      goto LABEL_19;
    }
  }
LABEL_28:
  swift_bridgeObjectRelease();
  uint64_t *v11 = v5;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t i;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t j;
  uint64_t v16;
  uint64_t v17;

  uint64_t v1 = v0;
  uint64_t v2 = (uint64_t *)(v0 + 192);
  swift_beginAccess();
  unint64_t v3 = *(void *)(v0 + 192);
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v5 = MEMORY[0x263F8EE78];
  if (v4)
  {
    uint64_t v6 = *v2;
    if ((unint64_t)*v2 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v7 = result;
      if (result) {
        goto LABEL_6;
      }
    }
    else
    {
      uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v7)
      {
LABEL_6:
        if (v7 < 1)
        {
          __break(1u);
          goto LABEL_31;
        }
        for (uint64_t i = 0; i != v7; ++i)
        {
          if ((v6 & 0xC000000000000001) != 0)
          {
            uint64_t v10 = MEMORY[0x24C523D60](i, v6);
          }
          else
          {
            uint64_t v10 = *(void *)(v6 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v10 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    uint64_t *v2 = v5;
    swift_bridgeObjectRelease();
  }
  uint64_t v11 = (uint64_t *)(v1 + 200);
  uint64_t result = swift_beginAccess();
  unint64_t v12 = *(void *)(v1 + 200);
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v17) {
      return result;
    }
  }
  else if (!*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  uint64_t v13 = *v11;
  if ((unint64_t)*v11 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v14 = result;
    if (result)
    {
LABEL_19:
      if (v14 >= 1)
      {
        for (uint64_t j = 0; j != v14; ++j)
        {
          if ((v13 & 0xC000000000000001) != 0)
          {
            uint64_t v16 = MEMORY[0x24C523D60](j, v13);
          }
          else
          {
            uint64_t v16 = *(void *)(v13 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v16 + 96))();
          swift_release();
        }
        goto LABEL_28;
      }
LABEL_31:
      __break(1u);
      return result;
    }
  }
  else
  {
    uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v14) {
      goto LABEL_19;
    }
  }
LABEL_28:
  swift_bridgeObjectRelease();
  uint64_t *v11 = v5;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t i;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t j;
  uint64_t v16;
  uint64_t v17;

  uint64_t v1 = v0;
  uint64_t v2 = (uint64_t *)(v0 + 112);
  swift_beginAccess();
  unint64_t v3 = *(void *)(v0 + 112);
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v5 = MEMORY[0x263F8EE78];
  if (v4)
  {
    uint64_t v6 = *v2;
    if ((unint64_t)*v2 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v7 = result;
      if (result) {
        goto LABEL_6;
      }
    }
    else
    {
      uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v7)
      {
LABEL_6:
        if (v7 < 1)
        {
          __break(1u);
          goto LABEL_31;
        }
        for (uint64_t i = 0; i != v7; ++i)
        {
          if ((v6 & 0xC000000000000001) != 0)
          {
            uint64_t v10 = MEMORY[0x24C523D60](i, v6);
          }
          else
          {
            uint64_t v10 = *(void *)(v6 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v10 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    uint64_t *v2 = v5;
    swift_bridgeObjectRelease();
  }
  uint64_t v11 = (uint64_t *)(v1 + 120);
  uint64_t result = swift_beginAccess();
  unint64_t v12 = *(void *)(v1 + 120);
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v17) {
      return result;
    }
  }
  else if (!*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  uint64_t v13 = *v11;
  if ((unint64_t)*v11 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v14 = result;
    if (result)
    {
LABEL_19:
      if (v14 >= 1)
      {
        for (uint64_t j = 0; j != v14; ++j)
        {
          if ((v13 & 0xC000000000000001) != 0)
          {
            uint64_t v16 = MEMORY[0x24C523D60](j, v13);
          }
          else
          {
            uint64_t v16 = *(void *)(v13 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v16 + 96))();
          swift_release();
        }
        goto LABEL_28;
      }
LABEL_31:
      __break(1u);
      return result;
    }
  }
  else
  {
    uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v14) {
      goto LABEL_19;
    }
  }
LABEL_28:
  swift_bridgeObjectRelease();
  uint64_t *v11 = v5;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t i;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t j;
  uint64_t v16;
  uint64_t v17;

  uint64_t v1 = v0;
  uint64_t v2 = (uint64_t *)(v0 + 272);
  swift_beginAccess();
  unint64_t v3 = *(void *)(v0 + 272);
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v5 = MEMORY[0x263F8EE78];
  if (v4)
  {
    uint64_t v6 = *v2;
    if ((unint64_t)*v2 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v7 = result;
      if (result) {
        goto LABEL_6;
      }
    }
    else
    {
      uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v7)
      {
LABEL_6:
        if (v7 < 1)
        {
          __break(1u);
          goto LABEL_31;
        }
        for (uint64_t i = 0; i != v7; ++i)
        {
          if ((v6 & 0xC000000000000001) != 0)
          {
            uint64_t v10 = MEMORY[0x24C523D60](i, v6);
          }
          else
          {
            uint64_t v10 = *(void *)(v6 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v10 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    uint64_t *v2 = v5;
    swift_bridgeObjectRelease();
  }
  uint64_t v11 = (uint64_t *)(v1 + 280);
  uint64_t result = swift_beginAccess();
  unint64_t v12 = *(void *)(v1 + 280);
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v17) {
      return result;
    }
  }
  else if (!*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  uint64_t v13 = *v11;
  if ((unint64_t)*v11 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v14 = result;
    if (result)
    {
LABEL_19:
      if (v14 >= 1)
      {
        for (uint64_t j = 0; j != v14; ++j)
        {
          if ((v13 & 0xC000000000000001) != 0)
          {
            uint64_t v16 = MEMORY[0x24C523D60](j, v13);
          }
          else
          {
            uint64_t v16 = *(void *)(v13 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v16 + 96))();
          swift_release();
        }
        goto LABEL_28;
      }
LABEL_31:
      __break(1u);
      return result;
    }
  }
  else
  {
    uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v14) {
      goto LABEL_19;
    }
  }
LABEL_28:
  swift_bridgeObjectRelease();
  uint64_t *v11 = v5;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t i;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t j;
  uint64_t v16;
  uint64_t v17;

  uint64_t v1 = v0;
  uint64_t v2 = (uint64_t *)(v0 + 240);
  swift_beginAccess();
  unint64_t v3 = *(void *)(v0 + 240);
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v5 = MEMORY[0x263F8EE78];
  if (v4)
  {
    uint64_t v6 = *v2;
    if ((unint64_t)*v2 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v7 = result;
      if (result) {
        goto LABEL_6;
      }
    }
    else
    {
      uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v7)
      {
LABEL_6:
        if (v7 < 1)
        {
          __break(1u);
          goto LABEL_31;
        }
        for (uint64_t i = 0; i != v7; ++i)
        {
          if ((v6 & 0xC000000000000001) != 0)
          {
            uint64_t v10 = MEMORY[0x24C523D60](i, v6);
          }
          else
          {
            uint64_t v10 = *(void *)(v6 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v10 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    uint64_t *v2 = v5;
    swift_bridgeObjectRelease();
  }
  uint64_t v11 = (uint64_t *)(v1 + 248);
  uint64_t result = swift_beginAccess();
  unint64_t v12 = *(void *)(v1 + 248);
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v17) {
      return result;
    }
  }
  else if (!*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  uint64_t v13 = *v11;
  if ((unint64_t)*v11 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v14 = result;
    if (result)
    {
LABEL_19:
      if (v14 >= 1)
      {
        for (uint64_t j = 0; j != v14; ++j)
        {
          if ((v13 & 0xC000000000000001) != 0)
          {
            uint64_t v16 = MEMORY[0x24C523D60](j, v13);
          }
          else
          {
            uint64_t v16 = *(void *)(v13 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v16 + 96))();
          swift_release();
        }
        goto LABEL_28;
      }
LABEL_31:
      __break(1u);
      return result;
    }
  }
  else
  {
    uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v14) {
      goto LABEL_19;
    }
  }
LABEL_28:
  swift_bridgeObjectRelease();
  uint64_t *v11 = v5;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t i;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t j;
  uint64_t v16;
  uint64_t v17;

  uint64_t v1 = v0;
  uint64_t v2 = (uint64_t *)(v0 + 160);
  swift_beginAccess();
  unint64_t v3 = *(void *)(v0 + 160);
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v5 = MEMORY[0x263F8EE78];
  if (v4)
  {
    uint64_t v6 = *v2;
    if ((unint64_t)*v2 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v7 = result;
      if (result) {
        goto LABEL_6;
      }
    }
    else
    {
      uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v7)
      {
LABEL_6:
        if (v7 < 1)
        {
          __break(1u);
          goto LABEL_31;
        }
        for (uint64_t i = 0; i != v7; ++i)
        {
          if ((v6 & 0xC000000000000001) != 0)
          {
            uint64_t v10 = MEMORY[0x24C523D60](i, v6);
          }
          else
          {
            uint64_t v10 = *(void *)(v6 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v10 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    uint64_t *v2 = v5;
    swift_bridgeObjectRelease();
  }
  uint64_t v11 = (uint64_t *)(v1 + 168);
  uint64_t result = swift_beginAccess();
  unint64_t v12 = *(void *)(v1 + 168);
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v17) {
      return result;
    }
  }
  else if (!*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  uint64_t v13 = *v11;
  if ((unint64_t)*v11 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v14 = result;
    if (result)
    {
LABEL_19:
      if (v14 >= 1)
      {
        for (uint64_t j = 0; j != v14; ++j)
        {
          if ((v13 & 0xC000000000000001) != 0)
          {
            uint64_t v16 = MEMORY[0x24C523D60](j, v13);
          }
          else
          {
            uint64_t v16 = *(void *)(v13 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v16 + 96))();
          swift_release();
        }
        goto LABEL_28;
      }
LABEL_31:
      __break(1u);
      return result;
    }
  }
  else
  {
    uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v14) {
      goto LABEL_19;
    }
  }
LABEL_28:
  swift_bridgeObjectRelease();
  uint64_t *v11 = v5;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t i;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t j;
  uint64_t v16;
  uint64_t v17;

  uint64_t v1 = v0;
  uint64_t v2 = (uint64_t *)(v0 + 176);
  swift_beginAccess();
  unint64_t v3 = *(void *)(v0 + 176);
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v5 = MEMORY[0x263F8EE78];
  if (v4)
  {
    uint64_t v6 = *v2;
    if ((unint64_t)*v2 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v7 = result;
      if (result) {
        goto LABEL_6;
      }
    }
    else
    {
      uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v7)
      {
LABEL_6:
        if (v7 < 1)
        {
          __break(1u);
          goto LABEL_31;
        }
        for (uint64_t i = 0; i != v7; ++i)
        {
          if ((v6 & 0xC000000000000001) != 0)
          {
            uint64_t v10 = MEMORY[0x24C523D60](i, v6);
          }
          else
          {
            uint64_t v10 = *(void *)(v6 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v10 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    uint64_t *v2 = v5;
    swift_bridgeObjectRelease();
  }
  uint64_t v11 = (uint64_t *)(v1 + 184);
  uint64_t result = swift_beginAccess();
  unint64_t v12 = *(void *)(v1 + 184);
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v17) {
      return result;
    }
  }
  else if (!*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  uint64_t v13 = *v11;
  if ((unint64_t)*v11 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v14 = result;
    if (result)
    {
LABEL_19:
      if (v14 >= 1)
      {
        for (uint64_t j = 0; j != v14; ++j)
        {
          if ((v13 & 0xC000000000000001) != 0)
          {
            uint64_t v16 = MEMORY[0x24C523D60](j, v13);
          }
          else
          {
            uint64_t v16 = *(void *)(v13 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v16 + 96))();
          swift_release();
        }
        goto LABEL_28;
      }
LABEL_31:
      __break(1u);
      return result;
    }
  }
  else
  {
    uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v14) {
      goto LABEL_19;
    }
  }
LABEL_28:
  swift_bridgeObjectRelease();
  uint64_t *v11 = v5;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t i;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t j;
  uint64_t v16;
  uint64_t v17;

  uint64_t v1 = v0;
  uint64_t v2 = (uint64_t *)(v0 + 144);
  swift_beginAccess();
  unint64_t v3 = *(void *)(v0 + 144);
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v5 = MEMORY[0x263F8EE78];
  if (v4)
  {
    uint64_t v6 = *v2;
    if ((unint64_t)*v2 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v7 = result;
      if (result) {
        goto LABEL_6;
      }
    }
    else
    {
      uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v7)
      {
LABEL_6:
        if (v7 < 1)
        {
          __break(1u);
          goto LABEL_31;
        }
        for (uint64_t i = 0; i != v7; ++i)
        {
          if ((v6 & 0xC000000000000001) != 0)
          {
            uint64_t v10 = MEMORY[0x24C523D60](i, v6);
          }
          else
          {
            uint64_t v10 = *(void *)(v6 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v10 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    uint64_t *v2 = v5;
    swift_bridgeObjectRelease();
  }
  uint64_t v11 = (uint64_t *)(v1 + 152);
  uint64_t result = swift_beginAccess();
  unint64_t v12 = *(void *)(v1 + 152);
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v17) {
      return result;
    }
  }
  else if (!*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  uint64_t v13 = *v11;
  if ((unint64_t)*v11 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v14 = result;
    if (result)
    {
LABEL_19:
      if (v14 >= 1)
      {
        for (uint64_t j = 0; j != v14; ++j)
        {
          if ((v13 & 0xC000000000000001) != 0)
          {
            uint64_t v16 = MEMORY[0x24C523D60](j, v13);
          }
          else
          {
            uint64_t v16 = *(void *)(v13 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v16 + 96))();
          swift_release();
        }
        goto LABEL_28;
      }
LABEL_31:
      __break(1u);
      return result;
    }
  }
  else
  {
    uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v14) {
      goto LABEL_19;
    }
  }
LABEL_28:
  swift_bridgeObjectRelease();
  uint64_t *v11 = v5;
  return swift_bridgeObjectRelease();
}

uint64_t EnvironmentValues.dynamicTypeSize.getter@<X0>(char *a1@<X8>)
{
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a1);
    swift_release_n();
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, a1);
  }
  return swift_release_n();
}

uint64_t key path getter for EnvironmentValues.dynamicTypeSize : EnvironmentValues@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, &v6);
    swift_release_n();
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, &v6);
  }
  uint64_t result = swift_release_n();
  *a2 = v6;
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<DynamicTypeSizeKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<DynamicTypeSizeKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DynamicTypeSizeKey>, (uint64_t)&type metadata for DynamicTypeSizeKey, (uint64_t)&protocol witness table for DynamicTypeSizeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DynamicTypeSizeKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<DynamicTypeSizeKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<DynamicTypeSizeKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<DynamicTypeSizeKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<DynamicTypeSizeKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DynamicTypeSizeKey>, (uint64_t)&type metadata for DynamicTypeSizeKey, (uint64_t)&protocol witness table for DynamicTypeSizeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DynamicTypeSizeKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for Image.ResizingMode()
{
  return &type metadata for Image.ResizingMode;
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance ScrollGeometryPreferenceKey(uint64_t a1, void (*a2)(uint64_t *__return_ptr), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t))
{
  a2(&v8);
  return a6(v8);
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest);
}

{
  uint64_t v1;
  unint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  uint64_t isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    uint64_t v15 = v4 + v2;
  }
  else {
    uint64_t v15 = v4;
  }
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  double v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v10 = (unint64_t)&v3[4 * v9 + 4];
  if (a1 + 32 < v10 + 32 * v8 && v10 < a1 + 32 + 32 * v8) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  unint64_t v12 = v3[2];
  uint64_t v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    unint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  unint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  unint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  uint64_t isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    uint64_t v15 = v4 + v2;
  }
  else {
    uint64_t v15 = v4;
  }
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  double v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v10 = &v3[16 * v9 + 4];
  if (a1 + 32 < (unint64_t)&v10[16 * v8] && (unint64_t)v10 < a1 + 32 + (v8 << 7)) {
    goto LABEL_24;
  }
  memcpy(v10, (const void *)(a1 + 32), v8 << 7);
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  unint64_t v12 = v3[2];
  uint64_t v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    unint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  unint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  unint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  uint64_t isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    uint64_t v15 = v4 + v2;
  }
  else {
    uint64_t v15 = v4;
  }
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  double v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v10 = &v3[3 * v9 + 4];
  if (a1 + 32 < (unint64_t)&v10[3 * v8] && (unint64_t)v10 < a1 + 32 + 24 * v8) {
    goto LABEL_24;
  }
  memcpy(v10, (const void *)(a1 + 32), 24 * v8);
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  unint64_t v12 = v3[2];
  uint64_t v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    unint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  unint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  unint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  uint64_t isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    uint64_t v15 = v4 + v2;
  }
  else {
    uint64_t v15 = v4;
  }
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  double v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v10 = (unint64_t)&v3[2 * v9 + 4];
  if (a1 + 32 < v10 + 16 * v8 && v10 < a1 + 32 + 16 * v8) {
    goto LABEL_24;
  }
  type metadata accessor for (AGSubgraphRef, Int)();
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  unint64_t v12 = v3[2];
  uint64_t v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    unint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  unint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t *v1;
  unint64_t v2;
  unint64_t v3;
  int64_t v4;
  int64_t v5;
  int isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  int64_t v23;
  uint64_t result;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *(void *)(v3 + 24) >> 1)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    double v23 = v4 + v2;
  }
  else {
    double v23 = v4;
  }
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v23, 1, v3);
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  double v9 = *(void *)(v3 + 16);
  uint64_t v10 = (*(void *)(v3 + 24) >> 1) - v9;
  uint64_t v11 = *(void *)(type metadata accessor for ObservationTracking() - 8);
  unint64_t v12 = *(void *)(v11 + 72);
  if (v10 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v13 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = v3 + v13 + v12 * v9;
  uint64_t v15 = a1 + v13;
  uint64_t v16 = v12 * v8;
  uint64_t v17 = v14 + v16;
  double v18 = v15 + v16;
  if (v15 < v17 && v14 < v18) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v20 = *(void *)(v3 + 16);
  double v21 = __OFADD__(v20, v8);
  double v22 = v20 + v8;
  if (!v21)
  {
    *(void *)(v3 + 16) = v22;
LABEL_19:
    unint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  unint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    uint64_t v14 = v4 + v2;
  }
  else {
    uint64_t v14 = v4;
  }
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  double v9 = (unint64_t)&v3[9 * v8 + 4];
  if (a1 + 32 < v9 + 72 * v2 && v9 < a1 + 32 + 72 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    unint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  unint64_t v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  unint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  unint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  uint64_t isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    uint64_t v15 = v4 + v2;
  }
  else {
    uint64_t v15 = v4;
  }
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  double v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v10 = (unint64_t)&v3[4 * v9 + 4];
  if (a1 + 32 < v10 + 32 * v8 && v10 < a1 + 32 + 32 * v8) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  unint64_t v12 = v3[2];
  uint64_t v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    unint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  unint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  unint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  uint64_t isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    uint64_t v15 = v4 + v2;
  }
  else {
    uint64_t v15 = v4;
  }
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  double v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v10 = &v3[2 * v9 + 4];
  if (a1 + 32 < (unint64_t)&v10[2 * v8] && (unint64_t)v10 < a1 + 32 + 16 * v8) {
    goto LABEL_24;
  }
  memcpy(v10, (const void *)(a1 + 32), 16 * v8);
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  unint64_t v12 = v3[2];
  uint64_t v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    unint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  unint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    uint64_t v14 = v4 + v2;
  }
  else {
    uint64_t v14 = v4;
  }
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  double v9 = (unint64_t)&v3[8 * v8 + 4];
  if (a1 + 32 < v9 + (v2 << 6) && v9 < a1 + 32 + (v2 << 6)) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    unint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  unint64_t v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  unint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection);
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  void *isUniquelyReferenced_nonNull_native;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  void *v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  void *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  BOOL v31;
  void *v32;
  int64_t v33;
  unint64_t v34;
  int64_t v35;
  int64_t v36;
  void *v37;
  unint64_t v38;
  uint64_t v39;
  void *v40;
  unint64_t v41;
  int64_t v42;
  int64_t v43;
  int64_t v44;
  uint64_t v45;
  void *v46;
  int64_t v47;
  uint64_t v48;
  void v49[3];
  int64_t v50;
  unint64_t v51;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  char v6 = a1;
  uint64_t isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || (uint64_t v8 = v3[3] >> 1, v8 < v5))
  {
    if (v4 <= v5) {
      double v9 = v4 + v2;
    }
    else {
      double v9 = v4;
    }
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v9, 1, v3);
    uint64_t v8 = v3[3] >> 1;
  }
  uint64_t v10 = v3[2];
  uint64_t v11 = v8 - v10;
  unint64_t result = (uint64_t)specialized Sequence._copySequenceContents(initializing:)(v49, &v3[2 * v10 + 4], v8 - v10, v6);
  if (result < v2) {
    goto LABEL_15;
  }
  if (result)
  {
    uint64_t v16 = v3[2];
    uint64_t v17 = __OFADD__(v16, result);
    double v18 = v16 + result;
    if (v17)
    {
      __break(1u);
      goto LABEL_51;
    }
    v3[2] = v18;
  }
  if (result != v11) {
    goto LABEL_13;
  }
LABEL_16:
  char v6 = v3[2];
  unint64_t result = v49[0];
  uint64_t v13 = (void *)v49[1];
  uint64_t v14 = v49[2];
  uint64_t v15 = v50;
  if (!v51)
  {
LABEL_51:
    double v24 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      return result;
    }
    long long v26 = (unint64_t)(v14 + 64) >> 6;
    if (v24 >= v26) {
      goto LABEL_13;
    }
    uint64_t v27 = v13;
    double v41 = v13[v24];
    if (!v41)
    {
      double v42 = v15 + 2;
      if (v15 + 2 >= v26) {
        goto LABEL_13;
      }
      double v41 = v13[v42];
      if (v41)
      {
LABEL_59:
        double v24 = v42;
      }
      else
      {
        if (v15 + 3 >= v26) {
          goto LABEL_13;
        }
        double v41 = v13[v15 + 3];
        if (!v41) {
          goto LABEL_65;
        }
        double v24 = v15 + 3;
      }
    }
LABEL_54:
    double v19 = (v41 - 1) & v41;
    uint64_t v20 = __clz(__rbit64(v41)) + (v24 << 6);
    uint64_t v15 = v24;
    uint64_t v13 = v27;
    goto LABEL_18;
  }
  double v19 = (v51 - 1) & v51;
  uint64_t v20 = __clz(__rbit64(v51)) | (v50 << 6);
LABEL_18:
  double v21 = *(void *)(result + 48);
  double v22 = *(void *)(v21 + 16 * v20);
  if (!v22) {
    goto LABEL_13;
  }
  double v23 = *(void *)(v21 + 16 * v20 + 8);
  double v24 = (unint64_t)(v14 + 64) >> 6;
  while (1)
  {
    long long v25 = v3[3];
    long long v26 = v25 >> 1;
    if ((uint64_t)(v25 >> 1) < v6 + 1)
    {
      double v47 = v24;
      char v48 = result;
      uint64_t v45 = v14;
      double v46 = v13;
      uint64_t v44 = v15;
      Swift::Double_optional v37 = v3;
      double v38 = v19;
      double v39 = v23;
      double v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v25 > 1), v6 + 1, 1, v37);
      double v23 = v39;
      uint64_t v13 = v46;
      double v24 = v47;
      double v19 = v38;
      uint64_t v15 = v44;
      uint64_t v14 = v45;
      uint64_t v3 = v40;
      unint64_t result = v48;
      long long v26 = v3[3] >> 1;
    }
    uint64_t v27 = v3 + 4;
    if (v6 < v26) {
      break;
    }
LABEL_20:
    v3[2] = v6;
    if (!v22) {
      goto LABEL_13;
    }
  }
  while (1)
  {
    long long v32 = &v27[2 * v6];
    *long long v32 = v22;
    v32[1] = v23;
    ++v6;
    if (!v19) {
      break;
    }
    char v28 = __clz(__rbit64(v19));
    v19 &= v19 - 1;
    uint64_t v29 = v28 | (v15 << 6);
LABEL_26:
    long long v30 = (uint64_t *)(*(void *)(result + 48) + 16 * v29);
    double v22 = *v30;
    double v23 = v30[1];
    if (v22) {
      long long v31 = v6 < v26;
    }
    else {
      long long v31 = 0;
    }
    if (!v31) {
      goto LABEL_20;
    }
  }
  long long v33 = v15 + 1;
  if (!__OFADD__(v15, 1))
  {
    if (v33 >= v24) {
      goto LABEL_55;
    }
    long long v34 = v13[v33];
    if (v34) {
      goto LABEL_41;
    }
    uint64_t v35 = v15 + 2;
    if (v15 + 2 >= v24) {
      goto LABEL_55;
    }
    long long v34 = v13[v35];
    if (!v34)
    {
      if (v15 + 3 >= v24) {
        goto LABEL_55;
      }
      long long v34 = v13[v15 + 3];
      if (v34)
      {
        long long v33 = v15 + 3;
        goto LABEL_41;
      }
      uint64_t v35 = v15 + 4;
      if (v15 + 4 >= v24) {
        goto LABEL_55;
      }
      long long v34 = v13[v35];
      if (!v34)
      {
        long long v33 = v15 + 5;
        if (v15 + 5 >= v24) {
          goto LABEL_55;
        }
        long long v34 = v13[v33];
        if (!v34)
        {
          Swift::Double_optional v36 = v15 + 6;
          while (v24 != v36)
          {
            long long v34 = v13[v36++];
            if (v34)
            {
              long long v33 = v36 - 1;
              goto LABEL_41;
            }
          }
LABEL_55:
          v3[2] = v6;
          goto LABEL_13;
        }
        goto LABEL_41;
      }
    }
    long long v33 = v35;
LABEL_41:
    double v19 = (v34 - 1) & v34;
    uint64_t v29 = __clz(__rbit64(v34)) + (v33 << 6);
    uint64_t v15 = v33;
    goto LABEL_26;
  }
  __break(1u);
LABEL_65:
  double v42 = v24 + 3;
  if (v24 + 3 < v26)
  {
    double v41 = v27[v42];
    if (v41) {
      goto LABEL_59;
    }
    v24 += 4;
    if (v24 >= v26) {
      goto LABEL_13;
    }
    double v41 = v27[v24];
    if (!v41)
    {
      double v43 = v15 + 6;
      while (v26 != v43)
      {
        double v41 = v27[v43++];
        if (v41)
        {
          double v24 = v43 - 1;
          goto LABEL_54;
        }
      }
      goto LABEL_13;
    }
    goto LABEL_54;
  }
LABEL_13:
  unint64_t result = outlined consume of Set<EventID>.Iterator._Variant();
  *(void *)uint64_t v1 = v3;
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    uint64_t v14 = v4 + v2;
  }
  else {
    uint64_t v14 = v4;
  }
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  double v9 = (unint64_t)&v3[12 * v8 + 4];
  if (a1 + 32 < v9 + 96 * v2 && v9 < a1 + 32 + 96 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    unint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  unint64_t v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  unint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    uint64_t v14 = v4 + v2;
  }
  else {
    uint64_t v14 = v4;
  }
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  double v9 = (unint64_t)&v3[18 * v8 + 4];
  if (a1 + 32 < v9 + 144 * v2 && v9 < a1 + 32 + 144 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    unint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  unint64_t v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  unint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t result;
  uint64_t vars8;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v1 = v3;
  if (isUniquelyReferenced_nonNull_native)
  {
    uint64_t v8 = *(void *)(v3 + 24) >> 1;
    if (v8 >= v5)
    {
      if (*(void *)(a1 + 16)) {
        goto LABEL_5;
      }
      goto LABEL_17;
    }
  }
  if (v4 <= v5) {
    v4 += v2;
  }
  swift_bridgeObjectRetain();
  uint64_t v3 = MEMORY[0x24C523D70](isUniquelyReferenced_nonNull_native, v4, 1, v3);
  swift_bridgeObjectRelease();
  *uint64_t v1 = v3;
  uint64_t v8 = *(void *)(v3 + 24) >> 1;
  if (!*(void *)(a1 + 16))
  {
LABEL_17:
    if (!v2) {
      goto LABEL_18;
    }
    goto LABEL_22;
  }
LABEL_5:
  double v9 = *(void *)(v3 + 16);
  if (v8 - v9 < v2)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v10 = v3 + 8 * v9 + 32;
  if (a1 + 32 < v10 + 8 * v2 && v10 < a1 + 32 + 8 * v2) {
    goto LABEL_25;
  }
  swift_arrayInitWithCopy();
  if (v2)
  {
    unint64_t v12 = *(void *)(*v1 + 16);
    uint64_t v13 = __OFADD__(v12, v2);
    uint64_t v14 = v12 + v2;
    if (!v13)
    {
      *(void *)(*v1 + 16) = v14;
      goto LABEL_18;
    }
LABEL_24:
    __break(1u);
LABEL_25:
    unint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_18:
  swift_bridgeObjectRelease();

  return specialized Array._endMutation()();
}

{
  char **v1;
  uint64_t v2;
  char *v3;
  int64_t v4;
  int64_t v5;
  char *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  char *v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *((void *)*v1 + 2);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *((void *)v3 + 3) >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    uint64_t v14 = v4 + v2;
  }
  else {
    uint64_t v14 = v4;
  }
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = *((void *)v3 + 2);
  if ((*((void *)v3 + 3) >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  double v9 = &v3[36 * v8 + 32];
  if (a1 + 32 < (unint64_t)&v9[36 * v2] && (unint64_t)v9 < a1 + 32 + 36 * v2) {
    goto LABEL_24;
  }
  memcpy(v9, (const void *)(a1 + 32), 36 * v2);
  if (!v2)
  {
LABEL_19:
    unint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = *((void *)v3 + 2);
  unint64_t v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    *((void *)v3 + 2) = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  unint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    uint64_t v14 = v4 + v2;
  }
  else {
    uint64_t v14 = v4;
  }
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  double v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    unint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  unint64_t v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  unint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    uint64_t v14 = v4 + v2;
  }
  else {
    uint64_t v14 = v4;
  }
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  double v9 = (unint64_t)&v3[4 * v8 + 4];
  if (a1 + 32 < v9 + 32 * v2 && v9 < a1 + 32 + 32 * v2) {
    goto LABEL_24;
  }
  type metadata accessor for (name: String, value: String)();
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    unint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  unint64_t v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  unint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    uint64_t v14 = v4 + v2;
  }
  else {
    uint64_t v14 = v4;
  }
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  double v9 = (unint64_t)&v3[4 * v8 + 4];
  if (a1 + 32 < v9 + 32 * v2 && v9 < a1 + 32 + 32 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    unint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  unint64_t v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  unint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    uint64_t v14 = v4 + v2;
  }
  else {
    uint64_t v14 = v4;
  }
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  double v9 = (unint64_t)&v3[7 * v8 + 4];
  if (a1 + 32 < v9 + 56 * v2 && v9 < a1 + 32 + 56 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    unint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  unint64_t v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  unint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    uint64_t v14 = v4 + v2;
  }
  else {
    uint64_t v14 = v4;
  }
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  double v9 = (unint64_t)&v3[5 * v8 + 4];
  if (a1 + 32 < v9 + 40 * v2 && v9 < a1 + 32 + 40 * v2) {
    goto LABEL_24;
  }
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for AnyTrackedValue);
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    unint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  unint64_t v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  unint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized ShapeStyledDisplayList.updateValue()()
{
  uint64_t v126 = *MEMORY[0x263EF8340];
  int v10 = *((_DWORD *)v0 + 3);
  type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for AnimatedShape<RoundedRectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type RoundedRectangle and conformance RoundedRectangle, (uint64_t)&type metadata for RoundedRectangle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  uint64_t Value = AGGraphGetValue();
  double v12 = *(double *)Value;
  double v13 = *(double *)(Value + 8);
  uint64_t v14 = *(unsigned __int8 *)(Value + 16);
  uint64_t v15 = *(unsigned __int8 *)(Value + 17);
  uint64_t v16 = *(unsigned __int8 *)(Value + 18);
  if ((v17 & 1) != 0 || !*((_WORD *)v0 + 25))
  {
    unint64_t v19 = ++static DisplayList.Version.lastValue;
  }
  else
  {
    uint64_t v121 = *(uint64_t *)((char *)v0 + 28);
    int v122 = v10;
    int v18 = AGGraphAnyInputsChanged();
    unint64_t v19 = ++static DisplayList.Version.lastValue;
    if (!v18) {
      goto LABEL_9;
    }
  }
  int v20 = (2 * ((33 * (v19 >> 16)) ^ v19)) | 1;
  if (!v19) {
    LOWORD(v20) = 0;
  }
  *((_WORD *)v0 + 25) = v20;
LABEL_9:
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    char v62 = v14;
    int v70 = v16;
    int v71 = v15;
    int v21 = *((_DWORD *)v0 + 10);
    unint64_t v22 = AGCreateWeakAttribute();
    int v23 = v22;
    unint64_t v68 = HIDWORD(v22);
    unint64_t v24 = AGCreateWeakAttribute();
    int v25 = v24;
    unint64_t v67 = HIDWORD(v24);
    int v69 = v21;
    unint64_t v26 = AGCreateWeakAttribute();
    int v27 = v26;
    unint64_t v66 = HIDWORD(v26);
    unint64_t v28 = AGCreateWeakAttribute();
    int v29 = v28;
    unint64_t v65 = HIDWORD(v28);
    unint64_t v30 = AGCreateWeakAttribute();
    int v31 = v30;
    unint64_t v64 = HIDWORD(v30);
    unint64_t v32 = AGCreateWeakAttribute();
    int v33 = v32;
    unint64_t v63 = HIDWORD(v32);
    unint64_t v72 = v19;
    long long v34 = (double *)AGGraphGetValue();
    double v35 = *v34;
    double v36 = v34[1];
    Swift::Double_optional v37 = (double *)AGGraphGetValue();
    double v38 = v35 - *v37;
    double v39 = v36 - v37[1];
    uint64_t v40 = AGGraphGetValue();
    CGFloat v41 = *(double *)v40;
    CGFloat v42 = *(double *)(v40 + 8);
    _threadGeometryProxyData();
    int v77 = v23;
    int v78 = v68;
    int v79 = v25;
    int v80 = v67;
    int v81 = v27;
    int v82 = v66;
    int v83 = v29;
    int v84 = v65;
    int v85 = v31;
    int v86 = v64;
    int v87 = v33;
    int v88 = v63;
    int v89 = v19;
    _setThreadGeometryProxyData();
    v127.origin.CGFloat x = 0.0;
    v127.origin.CGFloat y = 0.0;
    v127.size.CGFloat width = v41;
    v127.size.CGFloat height = v42;
    if (CGRectIsNull(v127))
    {
      uint64_t v16 = 0;
      uint64_t v15 = 0;
      uint64_t v14 = 0;
      unsigned int v1 = 6;
    }
    else if (v12 == 0.0 && v13 == 0.0 {
           || (v128.origin.CGFloat x = 0.0,
    }
               v128.origin.CGFloat y = 0.0,
               v128.size.CGFloat width = v41,
               v128.size.CGFloat height = v42,
               CGRectIsInfinite(v128)))
    {
      uint64_t v16 = 0;
      unsigned int v1 = 0;
      uint64_t v15 = *(void *)&v41;
      uint64_t v14 = *(void *)&v42;
    }
    else
    {
      uint64_t v16 = swift_allocObject();
      uint64_t v15 = 0;
      uint64_t v14 = 0;
      *(void *)(v16 + 16) = 0;
      *(void *)(v16 + 24) = 0;
      *(CGFloat *)(v16 + 32) = v41;
      *(CGFloat *)(v16 + 40) = v42;
      *(double *)(v16 + 48) = v12;
      *(double *)(v16 + 56) = v13;
      unsigned int v1 = 2;
      *(unsigned char *)(v16 + 64) = v62;
    }
    uint64_t v3 = &v121;
    uint64_t v4 = &v90;
    _setThreadGeometryProxyData();
    uint64_t v43 = *v0;
    long long v116 = 0u;
    long long v117 = 0u;
    long long v118 = 0u;
    long long v119 = 0u;
    uint64_t v115 = v43;
    uint64_t v120 = 0x80000000;
    swift_retain();
    outlined copy of Path.Storage(v16, 0, v15, v14, v1);
    v129.origin.CGFloat x = 0.0;
    v129.origin.CGFloat y = 0.0;
    v129.size.CGFloat width = v41;
    v129.size.CGFloat height = v42;
    CGRect v130 = CGRectOffset(v129, v38, v39);
    CGFloat x = v130.origin.x;
    CGFloat y = v130.origin.y;
    CGFloat width = v130.size.width;
    CGFloat height = v130.size.height;
    LODWORD(v19) = *((_DWORD *)v0 + 2);
    __int16 v5 = *((_WORD *)v0 + 25);
    char v2 = *((unsigned char *)v0 + 48);
    if (one-time initialization token for normal == -1) {
      goto LABEL_18;
    }
  }
  swift_once();
LABEL_18:
  uint64_t v44 = 0x10000;
  if (!v70) {
    uint64_t v44 = 0;
  }
  uint64_t v45 = 256;
  if (!v71) {
    uint64_t v45 = 0;
  }
  uint64_t v46 = static GraphicsBlendMode.normal;
  char v47 = byte_26B0EB4A0;
  char v73 = byte_26B0EB4A0;
  long long v90 = (unint64_t)v16;
  *(void *)&long long v91 = v15;
  *((void *)&v91 + 1) = v14;
  *(void *)__int16 v92 = v44 | v45 | v1;
  *(_OWORD *)&v92[8] = 0u;
  *(long long *)((char *)v4 + 56) = 0u;
  *(long long *)((char *)v4 + 72) = 0u;
  *(long long *)((char *)v4 + 84) = 0u;
  __int16 v93 = v5;
  CGFloat v94 = x;
  CGFloat v95 = y;
  CGFloat v96 = width;
  CGFloat v97 = height;
  uint64_t v98 = 0;
  int v99 = 0;
  CGFloat v100 = x;
  CGFloat v101 = y;
  CGFloat v102 = width;
  CGFloat v103 = height;
  v4[12] = xmmword_2461B9DE0;
  unint64_t v104 = v72;
  uint64_t v105 = 0;
  char v107 = 0;
  __int16 v106 = 0;
  int v108 = v19;
  char v109 = v2;
  int v110 = v69;
  uint64_t v111 = v46;
  char v112 = v73;
  int v113 = 1065353216;
  char v114 = 0;
  LOBYTE(v121) = 0;
  uint64_t v48 = *((unsigned int *)v0 + 4);
  outlined copy of GraphicsBlendMode(v46, v47);
  _ShapeStyle_RenderedShape.renderItem(name:styles:layers:)((unsigned __int8 *)&v121, v48, (uint64_t)&v115);
  LOBYTE(v121) = v2;
  _ShapeStyle_RenderedLayers.commit(shape:options:)((unint64_t)&v90, (char *)&v121, (uint64_t)&v74);
  uint64_t v121 = v74;
  LOWORD(v122) = v75;
  BYTE2(v122) = v76;
  AGGraphSetOutputValue();
  outlined consume of Path.Storage(v16, 0, v15, v14, v1);
  swift_bridgeObjectRelease();
  long long v49 = v4[13];
  long long v123 = v4[12];
  long long v124 = v49;
  long long v125 = v4[14];
  *(_OWORD *)((char *)v3 + 233) = *(long long *)((char *)v4 + 233);
  long long v50 = v4[9];
  *((_OWORD *)v3 + 8) = v4[8];
  *((_OWORD *)v3 + 9) = v50;
  long long v51 = v4[11];
  *((_OWORD *)v3 + 10) = v4[10];
  *((_OWORD *)v3 + 11) = v51;
  long long v52 = v4[5];
  *((_OWORD *)v3 + 4) = v4[4];
  *((_OWORD *)v3 + 5) = v52;
  long long v53 = v4[7];
  *((_OWORD *)v3 + 6) = v4[6];
  *((_OWORD *)v3 + 7) = v53;
  long long v54 = v91;
  *(_OWORD *)uint64_t v3 = v90;
  *((_OWORD *)v3 + 1) = v54;
  long long v55 = *(_OWORD *)&v92[16];
  *((_OWORD *)v3 + 2) = *(_OWORD *)v92;
  *((_OWORD *)v3 + 3) = v55;
  outlined release of _ShapeStyle_RenderedShape((uint64_t)&v121);
  long long v56 = v116;
  long long v57 = v117;
  long long v58 = v118;
  long long v60 = v119;
  unsigned int v59 = v120;
  swift_release();
  return outlined consume of _ShapeStyle_RenderedLayers.Layers(v56, *((uint64_t *)&v56 + 1), v57, *((uint64_t *)&v57 + 1), v58, *((uint64_t *)&v58 + 1), v60, *((uint64_t *)&v60 + 1), v59);
}

{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  double v3;
  double v4;
  CGFloat v5;
  double v6;
  uint64_t v7;
  long long *v8;
  int v9;
  uint64_t Value;
  long long v11;
  long long v12;
  long long v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  int v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  unsigned long long v24;
  char v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  unint64_t v31;
  int v32;
  void *v33;
  int v34;
  unint64_t v35;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  unsigned int v39;
  unint64_t v40;
  uint64_t v41;
  double *v42;
  double v43;
  double v44;
  double *v45;
  double v46;
  double v47;
  double *v48;
  double v49;
  double v50;
  char v51;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  unint64_t v56;
  void *v57;
  double v58;
  CGFloat v59;
  CGFloat v60;
  double v61;
  CGFloat v62;
  CGFloat v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  CGFloat v69;
  CGFloat v70;
  CGFloat v71;
  CGFloat v72;
  int v73;
  __int16 v74;
  char v75;
  uint64_t v76;
  long long v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  unint64_t v81;
  void *v82;
  int v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  void *v87;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  float v101;
  uint64_t v102;
  int v103;
  unint64_t v104;
  double v105;
  double v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  char v111;
  void *v112;
  uint64_t v113;
  unsigned int v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  double *v119;
  double v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  int v127;
  long long v128;
  uint64_t v129;
  uint64_t v130;
  char v131;
  __int16 x_low;
  uint64_t v133;
  uint64_t v134;
  char v135;
  unint64_t v136;
  uint64_t v137;
  int v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unsigned int v143;
  int v144;
  CGPoint origin;
  CGSize size;
  BOOL IsNull;
  double v148;
  double v149;
  double v150;
  double v151;
  double v152;
  double v153;
  char v154;
  __int16 v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  long long v160;
  uint64_t v161;
  char v162;
  uint64_t v163;
  uint64_t v164;
  __int16 v165;
  uint64_t v166;
  uint64_t v167;
  long long v168;
  uint64_t v169;
  char v170;
  __int16 v171;
  uint64_t v172;
  uint64_t v173;
  char v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char v179;
  void *v180;
  uint64_t v181;
  unsigned int v182;
  char v183;
  uint64_t v184;
  unsigned int v185;
  uint64_t v186;
  int v187;
  uint64_t v188;
  void (*v189)(__int16 *__return_ptr, void, uint64_t);
  unsigned int v190;
  unsigned int v191;
  void *v192;
  uint64_t v193;
  unsigned int v194;
  uint64_t v195;
  int v196;
  unsigned __int16 *v197;
  int v198;
  uint64_t v199;
  int v200;
  int v201;
  uint64_t v202;
  unsigned __int16 *v203;
  int v204;
  uint64_t v205;
  uint64_t v206;
  char v207;
  uint64_t v208;
  void (*v209)(__int16 *__return_ptr, void, uint64_t);
  uint64_t v210;
  char v211;
  unint64_t v212;
  int v213;
  int v214;
  __int16 v215;
  CGFloat v217;
  CGFloat v218;
  CGFloat v219;
  CGFloat v220;
  uint64_t v221;
  uint64_t v222;
  char v223;
  long long *v224;
  void *v225;
  uint64_t v226;
  double v227;
  uint64_t v228;
  double v229;
  char v230;
  unint64_t v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  unsigned __int8 v235;
  uint64_t v236;
  char v237;
  int v238;
  uint64_t v239;
  unsigned int v240;
  uint64_t v241;
  int v242;
  uint64_t v243;
  int v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  int v250;
  uint64_t v251;
  int v252;
  uint64_t v253;
  int v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  CGFloat v266;
  __int16 v267;
  id v268;
  int v269;
  char v270;
  CGFloat v271;
  id v272;
  unint64_t v273;
  uint64_t v274;
  char v275;
  uint64_t v276;
  unint64_t v277;
  uint64_t v278;
  void *v279;
  void *v280;
  uint64_t v281;
  unint64_t v282;
  long long v283;
  unint64_t v284;
  uint64_t v285;
  void *v286;
  uint64_t v287;
  __int16 v288;
  CGRect v289;
  uint64_t v290;
  unint64_t v291;
  unint64_t v292;
  uint64_t v293;
  __int16 v294;
  char v295;
  int v296;
  unsigned __int8 v297[24];
  long long v298;
  long long v299;
  unsigned char v300[80];
  long long v301;
  long long v302;
  long long v303;
  long long v304;
  long long v305;
  long long v306;
  long long v307;
  unsigned char v308[25];
  long long v309;
  long long v310;
  long long v311;
  long long v312;
  long long v313;
  long long v314;
  unsigned char v315[48];
  unsigned char v316[48];
  long long v317;
  long long v318;
  unsigned char v319[25];
  void v320[9];
  uint64_t v321;
  _OWORD v322[2];
  unsigned char v323[32];
  long long v324;
  long long v325;
  long long v326;
  long long v327;
  long long v328;
  long long v329;
  unsigned __int8 v330[32];
  long long v331;
  long long v332;
  long long v333;
  unsigned long long v334;
  long long v335;
  long long v336;
  long long v337;
  long long v338;
  long long v339;
  long long v340;
  unsigned char v341[19];
  char v342;
  void v343[4];
  unsigned __int8 v344;
  _OWORD v345[10];
  unsigned char v346[19];
  uint64_t v347;
  __C::CGRect v348;
  CGRect v349;
  CGRect v350;
  CGRect v351;
  CGRect v352;
  CGRect v353;

  uint64_t v7 = v0;
  uint64_t v8 = &v331;
  v347 = *MEMORY[0x263EF8340];
  double v9 = *(_DWORD *)(v0 + 12);
  uint64_t Value = AGGraphGetValue();
  uint64_t v11 = *(_OWORD *)(Value + 48);
  double v13 = *(_OWORD *)Value;
  double v12 = *(_OWORD *)(Value + 16);
  v345[2] = *(_OWORD *)(Value + 32);
  v345[3] = v11;
  v345[0] = v13;
  v345[1] = v12;
  uint64_t v14 = *(_OWORD *)(Value + 112);
  uint64_t v16 = *(_OWORD *)(Value + 64);
  uint64_t v15 = *(_OWORD *)(Value + 80);
  v345[6] = *(_OWORD *)(Value + 96);
  v345[7] = v14;
  v345[4] = v16;
  v345[5] = v15;
  int v18 = *(_OWORD *)(Value + 144);
  char v17 = *(_OWORD *)(Value + 160);
  unint64_t v19 = *(_DWORD *)(Value + 175);
  v345[8] = *(_OWORD *)(Value + 128);
  *(_DWORD *)&v346[15] = v19;
  v345[9] = v18;
  *(_OWORD *)v346 = v17;
  int v20 = *(_OWORD *)(Value + 144);
  v339 = *(_OWORD *)(Value + 128);
  v340 = v20;
  *(_OWORD *)v341 = *(_OWORD *)(Value + 160);
  *(_DWORD *)&v341[15] = *(_DWORD *)(Value + 175);
  int v21 = *(_OWORD *)(Value + 80);
  v335 = *(_OWORD *)(Value + 64);
  v336 = v21;
  unint64_t v22 = *(_OWORD *)(Value + 112);
  v337 = *(_OWORD *)(Value + 96);
  v338 = v22;
  int v23 = *(_OWORD *)(Value + 16);
  v331 = *(_OWORD *)Value;
  v332 = v23;
  unint64_t v24 = *(_OWORD *)(Value + 48);
  v333 = *(_OWORD *)(Value + 32);
  v334 = v24;
  unint64_t v26 = v25 & 1;
  v342 = v25 & 1;
  int v27 = v0 + 52;
  unint64_t v28 = *(unsigned int *)(v0 + 28);
  outlined retain of Image.Resolved((uint64_t)v345);
  int v29 = (unint64_t)&v331;
  if (Image.Resolved.mustUpdate(data:position:)())
  {
    v342 = 1;
  }
  else if (!v26 && *(_WORD *)(v7 + 68))
  {
    *(void *)&v309 = __PAIR64__(*(_DWORD *)(v7 + 32), v28);
    DWORD2(v309) = v9;
    unint64_t v30 = AGGraphAnyInputsChanged();
    int v31 = ++static DisplayList.Version.lastValue;
    if (!v30) {
      goto LABEL_11;
    }
    if (!v31) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  int v31 = ++static DisplayList.Version.lastValue;
  if (!static DisplayList.Version.lastValue)
  {
LABEL_9:
    LOWORD(v32) = 0;
    goto LABEL_10;
  }
LABEL_7:
  unint64_t v32 = (2 * ((33 * (v31 >> 16)) ^ v31)) | 1;
LABEL_10:
  *(_WORD *)(v7 + 68) = v32;
LABEL_11:
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x263F288F8])
  {
    __break(1u);
LABEL_172:
    long long v57 = v33;
    swift_once();
    LOBYTE(v33) = (_BYTE)v57;
    goto LABEL_25;
  }
  v286 = (void *)v31;
  long long v34 = *(_DWORD *)(v7 + 40);
  v287 = v7;
  *(double *)&v284 = COERCE_DOUBLE(AGCreateWeakAttribute());
  v285 = HIDWORD(v284);
  *(void *)&v283 = AGCreateWeakAttribute();
  *((void *)&v283 + 1) = DWORD1(v283);
  LODWORD(v276) = v34;
  v277 = AGCreateWeakAttribute();
  v281 = HIDWORD(v277);
  double v35 = AGCreateWeakAttribute();
  double v36 = v35;
  Swift::Double_optional v37 = HIDWORD(v35);
  double v38 = AGCreateWeakAttribute();
  double v39 = v38;
  uint64_t v40 = HIDWORD(v38);
  v240 = v38;
  CGFloat v41 = AGCreateWeakAttribute();
  CGFloat v42 = (double *)AGGraphGetValue();
  uint64_t v43 = *v42;
  uint64_t v44 = v42[1];
  uint64_t v45 = (double *)AGGraphGetValue();
  uint64_t v46 = v43 - *v45;
  char v47 = v44 - v45[1];
  uint64_t v48 = (double *)AGGraphGetValue();
  long long v49 = *v48;
  long long v50 = v48[1];
  _threadGeometryProxyData();
  *(void *)&v309 = v284;
  *((void *)&v309 + 1) = v283;
  *(void *)&v310 = v277;
  *((void *)&v310 + 1) = __PAIR64__(v37, v36);
  *(void *)&v311 = __PAIR64__(v40, v39);
  *((void *)&v311 + 1) = v41;
  LODWORD(v312) = v31;
  _setThreadGeometryProxyData();
  v328 = v339;
  v329 = v340;
  *(_OWORD *)v330 = *(_OWORD *)v341;
  *(_DWORD *)&v330[15] = *(_DWORD *)&v341[15];
  v324 = v335;
  v325 = v336;
  v326 = v337;
  v327 = v338;
  v322[0] = v331;
  v322[1] = v332;
  *(_OWORD *)v323 = v333;
  *(_OWORD *)&v323[16] = v334;
  uint64_t v8 = (long long *)v331;
  long long v51 = BYTE8(v331);
  v225 = (void *)BYTE8(v331);
  v273 = *((void *)&v332 + 1);
  v274 = v332;
  v248 = BYTE8(v333);
  v246 = *(void *)&v323[12];
  v244 = BYTE12(v334);
  v264 = v335;
  v268 = (id)v333;
  v260 = v336;
  v262 = *((void *)&v335 + 1);
  v256 = v334 >> 32;
  v258 = *((void *)&v336 + 1);
  v254 = v337;
  v242 = BYTE1(v337);
  v252 = BYTE2(v337);
  v250 = BYTE3(v337);
  v348 = Image.Resolved.frame(in:)((CGSize)__PAIR128__(*(unint64_t *)&v50, *(unint64_t *)&v49));
  CGFloat x = v348.origin.x;
  CGFloat y = v348.origin.y;
  CGFloat width = v348.size.width;
  CGFloat height = v348.size.height;
  outlined copy of GraphicsImage.Contents?(v8, v51);
  _setThreadGeometryProxyData();
  long long v56 = *(void *)v287;
  memset(&v320[1], 0, 64);
  v320[0] = v56;
  v321 = 0x80000000;
  v231 = v56;
  swift_retain();
  _threadGeometryProxyData();
  *(void *)&v309 = v284;
  *((void *)&v309 + 1) = v283;
  *(void *)&v310 = v277;
  *((void *)&v310 + 1) = __PAIR64__(v37, v36);
  *(void *)&v311 = __PAIR64__(v40, v240);
  DWORD2(v311) = v41;
  _setThreadGeometryProxyData();
  long long v57 = &unk_26B0F1000;
  v224 = v8;
  if (BYTE9(v329) == 3 || !(void)v329)
  {
    _setThreadGeometryProxyData();
    uint64_t v7 = v287;
  }
  else
  {
    long long v58 = v49 / *(double *)(v329 + 32);
    unsigned int v59 = v46;
    long long v60 = *(double *)(v329 + 64) * v58;
    int64x2_t v61 = v50 / *(double *)(v329 + 40);
    char v62 = v47;
    unint64_t v63 = *(double *)(v329 + 72) * v61;
    LOBYTE(v298) = BYTE9(v329);
    LOBYTE(v289.origin.x) = v330[0];
    SymbolVariants.Shape.path(in:cornerRadius:)(HIDWORD(v329) | ((unint64_t)v330[0] << 32), (uint64_t)v343, 0.0, 0.0, v60, v63);
    unint64_t v64 = (void *)v343[0];
    unint64_t v65 = v343[1];
    unint64_t v66 = v343[2];
    unint64_t v67 = v343[3];
    unint64_t v68 = v344 | 0x10000;
    _setThreadGeometryProxyData();
    outlined copy of _ShapeStyle_RenderedShape.Shape(v64, v65, v66, v67, v68, 0, 0, 0, 0, 0, 0, 0, 0);
    v349.origin.CGFloat x = 0.0;
    v349.origin.CGFloat y = 0.0;
    v349.size.CGFloat width = v60;
    v349.size.CGFloat height = v63;
    *(double *)&v284 = v62;
    *(double *)&v285 = v59;
    v350 = CGRectOffset(v349, v59, v62);
    int v69 = v350.origin.x;
    int v70 = v350.origin.y;
    int v71 = v350.size.width;
    unint64_t v72 = v350.size.height;
    uint64_t v7 = v287;
    char v73 = *(_DWORD *)(v287 + 8);
    uint64_t v74 = *(_WORD *)(v287 + 68);
    __int16 v75 = *(unsigned char *)(v287 + 48);
    if (one-time initialization token for normal != -1) {
      swift_once();
    }
    LOBYTE(v289.origin.x) = byte_26B0EB4A0;
    *(void *)&v298 = v64;
    *((void *)&v298 + 1) = v65;
    *(void *)&v299 = v66;
    *((void *)&v299 + 1) = v67;
    *(void *)v300 = v68;
    memset(&v300[8], 0, 60);
    *(_WORD *)&v300[68] = v74;
    *(CGFloat *)&v300[72] = v69;
    *(CGFloat *)&v301 = v70;
    *((CGFloat *)&v301 + 1) = v71;
    v302 = *(unint64_t *)&v72;
    LODWORD(v303) = 0;
    *((CGFloat *)&v303 + 1) = v69;
    *(CGFloat *)&v304 = v70;
    *((CGFloat *)&v304 + 1) = v71;
    *(CGFloat *)&v305 = v72;
    v306 = xmmword_2461B9DE0;
    *((void *)&v305 + 1) = v286;
    *(void *)&v307 = 0;
    BYTE10(v307) = 0;
    WORD4(v307) = 0;
    HIDWORD(v307) = v73;
    v308[0] = v75;
    *(_DWORD *)&v308[4] = v276;
    *(void *)&v308[8] = static GraphicsBlendMode.normal;
    v308[16] = byte_26B0EB4A0;
    *(_DWORD *)&v308[20] = 1065353216;
    v308[24] = 0;
    v297[0] = 1;
    char v76 = *(unsigned int *)(v287 + 16);
    outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_26B0EB4A0);
    _ShapeStyle_RenderedShape.renderItem(name:styles:layers:)(v297, v76, (uint64_t)v320);
    outlined consume of _ShapeStyle_RenderedShape.Shape(v64, v65, v66, v67, v68, 0, 0, 0, 0, 0, 0, 0, 0);
    v317 = v306;
    v318 = v307;
    *(_OWORD *)v319 = *(_OWORD *)v308;
    *(_OWORD *)&v319[9] = *(_OWORD *)&v308[9];
    *(_OWORD *)&v315[32] = v302;
    *(_OWORD *)v316 = v303;
    *(_OWORD *)&v316[16] = v304;
    *(_OWORD *)&v316[32] = v305;
    v313 = *(_OWORD *)&v300[32];
    v314 = *(_OWORD *)&v300[48];
    *(_OWORD *)v315 = *(_OWORD *)&v300[64];
    *(_OWORD *)&v315[16] = v301;
    v309 = v298;
    v310 = v299;
    v311 = *(_OWORD *)v300;
    v312 = *(_OWORD *)&v300[16];
    outlined release of _ShapeStyle_RenderedShape((uint64_t)&v309);
    uint64_t v8 = v224;
    char v47 = *(double *)&v284;
    uint64_t v46 = *(double *)&v285;
    long long v57 = (void *)&unk_26B0F1000;
  }
  *((void *)&v77 + 1) = v256;
  *(void *)&int v77 = v246;
  int v29 = v77 >> 32;
  unint64_t v28 = v248 | (v246 << 32);
  if (v244) {
    int v78 = 0x100000000;
  }
  else {
    int v78 = 0;
  }
  int v31 = v78 & 0xFFFFFFFF00000000 | HIDWORD(v256);
  if (v242) {
    int v79 = 256;
  }
  else {
    int v79 = 0;
  }
  int v27 = v79 | v254 | (v252 << 16) | (v250 << 24) | 0x400000;
  char v2 = (unint64_t)v225;
  outlined copy of GraphicsImage.Contents?(v8, (char)v225);
  v351.origin.CGFloat x = x;
  v351.origin.CGFloat y = y;
  v351.size.CGFloat width = width;
  v351.size.CGFloat height = height;
  v352 = CGRectOffset(v351, v46, v47);
  uint64_t v3 = v352.origin.x;
  uint64_t v4 = v352.origin.y;
  __int16 v5 = v352.size.width;
  char v6 = v352.size.height;
  unsigned int v1 = *(unsigned int *)(v7 + 8);
  unint64_t v26 = (uint64_t)v8;
  LOWORD(v8) = *(_WORD *)(v7 + 68);
  int v33 = (void *)*(unsigned __int8 *)(v7 + 48);
  if (v57[250] != -1) {
    goto LABEL_172;
  }
LABEL_25:
  *(void *)&v309 = v26;
  *((void *)&v309 + 1) = v2;
  *(void *)&v310 = v274;
  *((void *)&v310 + 1) = v273;
  *(void *)&v311 = v268;
  *((void *)&v311 + 1) = v28;
  *(void *)&v312 = v29;
  *((void *)&v312 + 1) = v31;
  *(void *)&v313 = v264;
  *((void *)&v313 + 1) = v262;
  *(void *)&v314 = v260;
  *((void *)&v314 + 1) = v258;
  *(_DWORD *)v315 = v27;
  *(_WORD *)&v315[4] = (_WORD)v8;
  *(double *)&v315[8] = v3;
  *(double *)&v315[16] = v4;
  *(CGFloat *)&v315[24] = v5;
  *(double *)&v315[32] = v6;
  *(void *)&v315[40] = 0;
  *(_DWORD *)v316 = 0;
  *(double *)&v316[8] = v3;
  *(double *)&v316[16] = v4;
  *(CGFloat *)&v316[24] = v5;
  *(double *)&v316[32] = v6;
  v317 = xmmword_2461B9DE0;
  *(void *)&v316[40] = v286;
  *(void *)&v318 = 0;
  BYTE10(v318) = 0;
  WORD4(v318) = 0;
  HIDWORD(v318) = v1;
  v223 = (char)v33;
  v319[0] = (_BYTE)v33;
  *(_DWORD *)&v319[4] = v276;
  *(void *)&v319[8] = static GraphicsBlendMode.normal;
  v319[16] = byte_26B0EB4A0;
  *(_DWORD *)&v319[20] = 1065353216;
  v319[24] = 0;
  LOBYTE(v298) = 0;
  int v80 = *(unsigned int *)(v7 + 16);
  outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_26B0EB4A0);
  _ShapeStyle_RenderedShape.renderItem(name:styles:layers:)((unsigned __int8 *)&v298, v80, (uint64_t)v320);
  int v81 = v231;
  if (v231)
  {
    int v82 = (void *)(v231 + 24);
    int v83 = *(_DWORD *)(v231 + 60);
    int v84 = v83;
    swift_beginAccess();
    if (*(void *)(*(void *)(v231 + 24) + 16) > v83)
    {
      v219 = *(double *)(MEMORY[0x263F001A0] + 8);
      v220 = *MEMORY[0x263F001A0];
      v217 = *(double *)(MEMORY[0x263F001A0] + 24);
      v218 = *(double *)(MEMORY[0x263F001A0] + 16);
      int v85 = v83;
      do
      {
        ++*(_DWORD *)(v81 + 60);
        swift_beginAccess();
        int v87 = *(void **)(v81 + 24);
        swift_retain();
        uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v81 + 24) = v87;
        if (isUniquelyReferenced_nonNull_native)
        {
          if (v85 < 0) {
            goto LABEL_165;
          }
        }
        else
        {
          int v87 = specialized _ArrayBuffer._consumeAndCreateNew()(v87);
          *int v82 = v87;
          if (v85 < 0)
          {
LABEL_165:
            __break(1u);
LABEL_166:
            __break(1u);
LABEL_167:
            __break(1u);
LABEL_168:
            memset(&v289, 0, sizeof(v289));
            outlined destroy of CoordinateSpaceGesture<CGFloat>((uint64_t)&v289, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0]);
LABEL_169:
            outlined consume of DisplayList.Item.Value(v81, v1);
            swift_release();
            swift_release();
            outlined consume of DisplayList.Item.Value(v81, v1);
LABEL_170:
            LOWORD(v175) = 0;
LABEL_160:
            v187 = v281;
LABEL_161:
            LOBYTE(v185) = v273;
LABEL_162:
            v180 = (void *)v2;
            v289.origin.CGFloat x = v3;
            v289.origin.CGFloat y = v4;
            v289.size.CGFloat width = v5;
            v289.size.CGFloat height = v6;
            v290 = v274;
            v291 = v81;
            v292 = v1;
            v293 = v26;
            v295 = v185;
            v294 = (__int16)v87;
            v296 = v187;
            DisplayList.Item.properties.getter(&v288);
            outlined consume of DisplayList.Item.Value(v81, v1);
            outlined consume of _ShapeStyle_RenderedLayers.Layers((uint64_t)v82, v285, v284, v287, (uint64_t)v286, *((uint64_t *)&v283 + 1), (unint64_t)v57, v283, v276);
            v179 = v288;
            goto LABEL_163;
          }
        }
        if (v87[2] <= v84) {
          goto LABEL_166;
        }
        int v89 = 28 * v84;
        BYTE4(v87[28 * v84 + 31]) = 1;
        int v87 = (void *)*v82;
        swift_endAccess();
        if (v87[2] <= v84) {
          goto LABEL_167;
        }
        long long v90 = &v87[v89];
        DWORD2(v283) = HIDWORD(v87[v89 + 6]);
        long long v91 = v87[v89 + 7];
        __int16 v92 = (void *)v87[v89 + 9];
        v286 = (void *)v87[v89 + 10];
        v287 = v87[v89 + 8];
        v284 = v87[v89 + 12];
        v285 = v87[v89 + 11];
        __int16 v93 = v87[v89 + 13];
        CGFloat v94 = v87[v89 + 14];
        v281 = v93;
        *(void *)&v283 = v91;
        CGFloat v96 = v90[15];
        CGFloat v95 = v90[16];
        CGFloat v97 = v90[17];
        uint64_t v98 = v90[18];
        int v99 = v90[19];
        CGFloat v100 = v90[20];
        v255 = *((void *)&v309 + 1);
        v257 = v309;
        v251 = *((void *)&v310 + 1);
        v253 = v310;
        v263 = *((void *)&v311 + 1);
        v265 = v311;
        v247 = *((void *)&v312 + 1);
        v249 = v312;
        v243 = *((void *)&v313 + 1);
        v245 = v313;
        v239 = *((void *)&v314 + 1);
        v241 = v314;
        v238 = *(_DWORD *)v315;
        v313 = 0u;
        v314 = 0u;
        v311 = 0u;
        v312 = 0u;
        v309 = 0u;
        v310 = 0u;
        *(_DWORD *)v315 = 0x800000;
        swift_retain_n();
        v276 = (uint64_t)v92;
        v278 = v95;
        outlined copy of _ShapeStyle_Pack.Style?((void *)v283, v287, v92, v286, v285, v284, v281, v94, v96, v95, v97, v98, v99, v100);
        swift_release();
        *(void *)&v315[40] = v81;
        *(_DWORD *)v316 = DWORD2(v283);
        if (v100)
        {
          *(void *)&v298 = v283;
          *((void *)&v298 + 1) = v287;
          *(void *)&v299 = v92;
          *((void *)&v299 + 1) = v286;
          *(void *)v300 = v285;
          *(void *)&v300[8] = v284;
          *(void *)&v300[16] = v281;
          *(void *)&v300[24] = v94;
          *(void *)&v300[32] = v96;
          *(void *)&v300[40] = v95;
          v300[48] = v97;
          *(_DWORD *)&v300[52] = HIDWORD(v97);
          *(void *)&v300[56] = v98;
          v300[64] = v99;
          *(void *)&v300[72] = v100;
          _ShapeStyle_RenderedShape.render(style:)((uint64_t)&v298);
        }
        v236 = v98;
        v237 = v97;
        CGFloat v101 = *(float *)&v319[20];
        v234 = v100;
        v235 = v99;
        v259 = v96;
        v261 = v94;
        if (*(float *)&v319[20] == 0.0
          || (uint64_t v4 = *(double *)&v315[8],
              uint64_t v3 = *(double *)&v315[16],
              CGFloat v102 = *(void *)&v315[24],
              char v6 = *(double *)&v315[32],
              CGRectIsEmpty(*(CGRect *)&v315[8])))
        {
          outlined consume of DisplayList.Item.Value(v317, *((unint64_t *)&v317 + 1));
          v317 = xmmword_2461B9DE0;
          *(void *)&v318 = 0;
          BYTE10(v318) = 0;
          WORD4(v318) = 0;
          CGFloat v103 = *(_DWORD *)&v315[40];
          if (*(void *)&v315[40])
          {
            *(void *)&v317 = *(void *)&v315[40];
            *((void *)&v317 + 1) = *(unsigned int *)v316 | 0x4000001100000000;
            *(void *)&v318 = MEMORY[0x263F8EE78];
            LOBYTE(v298) = v319[0];
            DisplayList.Item.canonicalize(options:)((char *)&v298);
            *(void *)&v315[40] = 0;
            *(_DWORD *)v316 = 0;
            unint64_t v104 = *((void *)&v317 + 1);
            *((void *)&v283 + 1) = v317;
            v274 = v318;
            CGFloat v103 = WORD4(v318) | (BYTE10(v318) << 16);
          }
          else
          {
            v274 = 0;
            *((void *)&v283 + 1) = 0;
            unint64_t v104 = 0xC000000000000000;
          }
          v269 = v103;
          v273 = v104;
          uint64_t v105 = *(double *)&v316[16];
          __int16 v106 = *(double *)&v316[8];
          __int16 v5 = *(double *)&v316[32];
          char v107 = *(void *)&v316[24];
          v232 = *(void *)&v316[40];
          char v2 = HIDWORD(v318);
          int v108 = static GraphicsBlendMode.normal;
          char v109 = byte_26B0EB4A0;
          int v110 = *(void *)&v319[8];
          uint64_t v111 = v319[16];
          outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_26B0EB4A0);
          outlined consume of GraphicsBlendMode(v110, v111);
          *(void *)&v319[8] = v108;
          v319[16] = v109;
          *(_DWORD *)&v319[20] = 1065353216;
          v319[24] = 0;
          v317 = xmmword_2461B9DE0;
          *(void *)&v318 = 0;
          BYTE10(v318) = 0;
          WORD4(v318) = 0;
          uint64_t v4 = *(double *)&v315[8];
          uint64_t v3 = *(double *)&v315[16];
          CGFloat v102 = *(void *)&v315[24];
          char v6 = *(double *)&v315[32];
        }
        else
        {
          v275 = v319[0];
          LOBYTE(v298) = v319[0];
          DisplayList.Item.canonicalize(options:)((char *)&v298);
          long long v123 = *(void *)&v315[40];
          if (*(void *)&v315[40])
          {
            long long v124 = *(unsigned int *)v316;
            long long v125 = *((void *)&v317 + 1);
            uint64_t v126 = v318;
            CGRect v127 = WORD4(v318) | (BYTE10(v318) << 16);
            CGRect v128 = *(_OWORD *)&v316[24];
            CGRect v129 = v317;
            CGRect v130 = *(void *)&v316[40];
            if (*((void *)&v317 + 1) >> 62 != 3
              || (v127 & 0xFFFFFF) != 0
              || *((void *)&v317 + 1) != 0xC000000000000000
              || (unint64_t)v318 | (unint64_t)v317)
            {
              type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
              uint64_t v133 = swift_allocObject();
              *(_OWORD *)(v133 + 16) = xmmword_2461B9DC0;
              *(void *)(v133 + 32) = 0;
              *(void *)(v133 + 40) = 0;
              *(_OWORD *)(v133 + 48) = v128;
              *(void *)(v133 + 64) = v130;
              *(void *)(v133 + 72) = v129;
              *(void *)(v133 + 80) = v125;
              *(void *)(v133 + 88) = v126;
              *(unsigned char *)(v133 + 98) = BYTE2(v127);
              *(_WORD *)(v133 + 96) = v127;
              *(_DWORD *)(v133 + 100) = 0;
              v298 = 0uLL;
              v299 = v128;
              *(void *)v300 = v130;
              *(void *)&v300[8] = v129;
              *(void *)&v300[16] = v125;
              *(void *)&v300[24] = v126;
              v300[34] = BYTE2(v127);
              *(_WORD *)&v300[32] = v127;
              *(_DWORD *)&v300[36] = 0;
              swift_retain();
              outlined copy of DisplayList.Item.Value(v129, v125);
              DisplayList.Item.features.getter((__int16 *)&v289);
              uint64_t v134 = v130;
              x_low = LOWORD(v289.origin.x);
              v298 = 0uLL;
              v299 = v128;
              *(void *)v300 = v134;
              *(void *)&v300[8] = v129;
              *(void *)&v300[16] = v125;
              *(void *)&v300[24] = v126;
              v300[34] = BYTE2(v127);
              *(_WORD *)&v300[32] = v127;
              *(_DWORD *)&v300[36] = 0;
              DisplayList.Item.properties.getter(&v289);
              char v131 = LOBYTE(v289.origin.x);
            }
            else
            {
              swift_retain();
              char v131 = 0;
              x_low = 0;
              uint64_t v133 = MEMORY[0x263F8EE78];
            }
            *(void *)&v317 = v123;
            *((void *)&v317 + 1) = v124 | 0x4000001100000000;
            *(void *)&v318 = v133;
            BYTE10(v318) = v131;
            WORD4(v318) = x_low;
            LOBYTE(v298) = v275;
            DisplayList.Item.canonicalize(options:)((char *)&v298);
            outlined consume of DisplayList.Item.Value(v129, v125);
            swift_release();
            *(void *)&v315[40] = 0;
            *(_DWORD *)v316 = 0;
          }
          char v135 = v319[24];
          uint64_t v136 = *((void *)&v317 + 1);
          *((void *)&v283 + 1) = v317;
          uint64_t v137 = v318;
          uint64_t v138 = WORD4(v318) | (BYTE10(v318) << 16);
          if (v319[24])
          {
            __int16 v139 = *((void *)&v317 + 1) >> 62;
            if (*((void *)&v317 + 1) >> 62 != 3
              || (v138 & 0xFFFFFF) != 0
              || *((void *)&v317 + 1) != 0xC000000000000000
              || (unint64_t)v318 | (unint64_t)v317)
            {
              v233 = *(unsigned __int16 *)&v315[4];
              v270 = v319[24];
              v289.origin.CGFloat x = v220;
              v289.origin.CGFloat y = v219;
              v289.size.CGFloat width = v218;
              v289.size.CGFloat height = v217;
              uint64_t v140 = *(void *)&v316[40];
              v227 = *(double *)&v316[16];
              v229 = *(double *)&v316[8];
              v298 = *(_OWORD *)&v316[8];
              v221 = *(void *)&v316[32];
              v222 = *(void *)&v316[24];
              v299 = *(_OWORD *)&v316[24];
              *(void *)v300 = *(void *)&v316[40];
              v141 = *((void *)&v317 + 1);
              *(_OWORD *)&v300[8] = v317;
              unsigned __int8 v142 = v318;
              *(void *)&v300[24] = v318;
              char v143 = (WORD4(v318) | (BYTE10(v318) << 16)) >> 16;
              v300[34] = BYTE10(v318);
              v144 = WORD4(v318) | (BYTE10(v318) << 16);
              *(_WORD *)&v300[32] = WORD4(v318);
              *(_DWORD *)&v300[36] = HIDWORD(v318);
              DisplayList.Item.addExtent(to:)(&v289.origin.x);
              origin = v289.origin;
              uint64_t size = v289.size;
              BOOL IsNull = CGRectIsNull(v289);
              v148 = 0.0;
              if (IsNull) {
                v149 = 0.0;
              }
              else {
                v149 = origin.x;
              }
              if (IsNull) {
                v150 = 0.0;
              }
              else {
                v150 = origin.y;
              }
              if (IsNull) {
                v151 = 0.0;
              }
              else {
                v151 = size.width;
              }
              if (!IsNull) {
                v148 = size.height;
              }
              v353 = CGRectIntegral(*(CGRect *)(&v148 - 3));
              v152 = v353.origin.x;
              v153 = v353.origin.y;
              *(CGRect *)&v316[8] = v353;
              if (v139 < 3 || (v144 & 0xFFFFFF) != 0 || v141 != 0xC000000000000000 || v142 | *((void *)&v283 + 1))
              {
                type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
                v156 = swift_allocObject();
                *(_OWORD *)(v156 + 16) = xmmword_2461B9DC0;
                *(void *)(v156 + 32) = 0;
                *(void *)(v156 + 40) = 0;
                *(void *)(v156 + 48) = v222;
                *(void *)(v156 + 56) = v221;
                *(void *)(v156 + 64) = v140;
                *(void *)(v156 + 72) = *((void *)&v283 + 1);
                *(void *)(v156 + 80) = v141;
                *(void *)(v156 + 88) = v142;
                *(unsigned char *)(v156 + 98) = v143;
                *(_WORD *)(v156 + 96) = v144;
                *(_DWORD *)(v156 + 100) = 0;
                v298 = 0uLL;
                *(void *)&v299 = v222;
                *((void *)&v299 + 1) = v221;
                *(void *)v300 = v140;
                *(void *)&v300[8] = *((void *)&v283 + 1);
                *(void *)&v300[16] = v141;
                *(void *)&v300[24] = v142;
                v300[34] = v143;
                *(_WORD *)&v300[32] = v144;
                *(_DWORD *)&v300[36] = 0;
                outlined copy of DisplayList.Item.Value(*((uint64_t *)&v283 + 1), v141);
                DisplayList.Item.features.getter(&v288);
                v155 = v288;
                v298 = 0uLL;
                *(void *)&v299 = v222;
                *((void *)&v299 + 1) = v221;
                *(void *)v300 = v140;
                *(void *)&v300[8] = *((void *)&v283 + 1);
                *(void *)&v300[16] = v141;
                *(void *)&v300[24] = v142;
                v300[34] = v143;
                *(_WORD *)&v300[32] = v144;
                *(_DWORD *)&v300[36] = 0;
                DisplayList.Item.properties.getter(&v288);
                v154 = v288;
              }
              else
              {
                outlined copy of DisplayList.Item.Value(0, 0xC000000000000000);
                v154 = 0;
                v155 = 0;
                v156 = MEMORY[0x263F8EE78];
              }
              v157 = swift_allocObject();
              *(void *)(v157 + 16) = v156;
              *(_WORD *)(v157 + 24) = v155;
              *(unsigned char *)(v157 + 26) = v154;
              *(double *)(v157 + 32) = v152 - v229;
              *(double *)(v157 + 40) = v153 - v227;
              *(unsigned char *)(v157 + 48) = 0;
              *(_DWORD *)(v157 + 52) = 0;
              *(unsigned char *)(v157 + 56) = 1;
              *(_DWORD *)(v157 + 60) = 161;
              *(unsigned char *)(v157 + 64) = 3;
              outlined consume of DisplayList.Item.Value(*((uint64_t *)&v283 + 1), v141);
              uint64_t v137 = 0;
              *((void *)&v283 + 1) = v157 | 0x9000000000000000;
              *(void *)&v317 = v157 | 0x9000000000000000;
              uint64_t v136 = v233;
              *((void *)&v317 + 1) = v233;
              *(void *)&v318 = 0;
              BYTE10(v318) = 0;
              WORD4(v318) = 0;
              char v135 = v270;
            }
            else
            {
              uint64_t v136 = 0xC000000000000000;
            }
            uint64_t v138 = 0;
            v319[24] = v135 & 0xFE;
          }
          v158 = *(void *)&v319[8];
          v159 = v319[16];
          v230 = v319[16];
          if ((v319[16] & 1) != 0 || *(_DWORD *)&v319[8])
          {
            v160 = *(_OWORD *)&v316[24];
            v161 = *(void *)&v316[40];
            if (v136 >> 62 != 3
              || (v138 & 0xFFFFFF) != 0
              || v136 != 0xC000000000000000
              || v137 | *((void *)&v283 + 1))
            {
              type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
              v166 = swift_allocObject();
              *(_OWORD *)(v166 + 16) = xmmword_2461B9DC0;
              *(void *)(v166 + 32) = 0;
              *(void *)(v166 + 40) = 0;
              *(_OWORD *)(v166 + 48) = v160;
              v164 = *((void *)&v283 + 1);
              *(void *)(v166 + 64) = v161;
              *(void *)(v166 + 72) = *((void *)&v283 + 1);
              *(void *)(v166 + 80) = v136;
              *(void *)(v166 + 88) = v137;
              *(unsigned char *)(v166 + 98) = BYTE2(v138);
              *(_WORD *)(v166 + 96) = v138;
              *(_DWORD *)(v166 + 100) = 0;
              v298 = 0uLL;
              v299 = v160;
              *(void *)v300 = v161;
              *(void *)&v300[8] = *((void *)&v283 + 1);
              *(void *)&v300[16] = v136;
              *(void *)&v300[24] = v137;
              v300[34] = BYTE2(v138);
              *(_WORD *)&v300[32] = v138;
              *(_DWORD *)&v300[36] = 0;
              outlined copy of GraphicsBlendMode(v158, v159);
              outlined copy of DisplayList.Item.Value(*((uint64_t *)&v283 + 1), v136);
              DisplayList.Item.features.getter((__int16 *)&v289);
              v167 = v158;
              v165 = LOWORD(v289.origin.x);
              v298 = 0uLL;
              v299 = v160;
              *(void *)v300 = v161;
              v163 = v167;
              *(void *)&v300[8] = *((void *)&v283 + 1);
              *(void *)&v300[16] = v136;
              *(void *)&v300[24] = v137;
              v300[34] = BYTE2(v138);
              *(_WORD *)&v300[32] = v138;
              *(_DWORD *)&v300[36] = 0;
              DisplayList.Item.properties.getter(&v289);
              v162 = LOBYTE(v289.origin.x);
            }
            else
            {
              outlined copy of GraphicsBlendMode(*(uint64_t *)&v319[8], v319[16]);
              v162 = 0;
              v163 = v158;
              v164 = *((void *)&v283 + 1);
              v165 = 0;
              v166 = MEMORY[0x263F8EE78];
            }
            *(void *)&v317 = v163;
            *((void *)&v317 + 1) = v159 | 0x4000000500000000;
            *(void *)&v318 = v166;
            BYTE10(v318) = v162;
            WORD4(v318) = v165;
            LOBYTE(v298) = v275;
            DisplayList.Item.canonicalize(options:)((char *)&v298);
            outlined consume of DisplayList.Item.Value(v164, v136);
            uint64_t v136 = *((void *)&v317 + 1);
            *((void *)&v283 + 1) = v317;
            uint64_t v137 = v318;
            uint64_t v138 = WORD4(v318) | (BYTE10(v318) << 16);
            v158 = v163;
          }
          if (v101 == 1.0)
          {
            v274 = v137;
          }
          else
          {
            v168 = *(_OWORD *)&v316[24];
            v169 = *(void *)&v316[40];
            if (v136 >> 62 != 3
              || (v138 & 0xFFFFFF) != 0
              || v136 != 0xC000000000000000
              || (v170 = v137 | BYTE8(v283), v137 | *((void *)&v283 + 1)))
            {
              type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
              v172 = swift_allocObject();
              *(_OWORD *)(v172 + 16) = xmmword_2461B9DC0;
              *(void *)(v172 + 32) = 0;
              *(void *)(v172 + 40) = 0;
              *(_OWORD *)(v172 + 48) = v168;
              *(void *)(v172 + 64) = v169;
              *(void *)(v172 + 72) = *((void *)&v283 + 1);
              *(void *)(v172 + 80) = v136;
              *(void *)(v172 + 88) = v137;
              *(unsigned char *)(v172 + 98) = BYTE2(v138);
              *(_WORD *)(v172 + 96) = v138;
              *(_DWORD *)(v172 + 100) = 0;
              v298 = 0uLL;
              v299 = v168;
              *(void *)v300 = v169;
              *(void *)&v300[8] = *((void *)&v283 + 1);
              *(void *)&v300[16] = v136;
              *(void *)&v300[24] = v137;
              v300[34] = BYTE2(v138);
              *(_WORD *)&v300[32] = v138;
              *(_DWORD *)&v300[36] = 0;
              outlined copy of DisplayList.Item.Value(*((uint64_t *)&v283 + 1), v136);
              DisplayList.Item.features.getter((__int16 *)&v289);
              v171 = LOWORD(v289.origin.x);
              v298 = 0uLL;
              v299 = v168;
              *(void *)v300 = v169;
              *(void *)&v300[8] = *((void *)&v283 + 1);
              *(void *)&v300[16] = v136;
              *(void *)&v300[24] = v137;
              v300[34] = BYTE2(v138);
              *(_WORD *)&v300[32] = v138;
              *(_DWORD *)&v300[36] = 0;
              DisplayList.Item.properties.getter(&v289);
              v170 = LOBYTE(v289.origin.x);
            }
            else
            {
              v171 = 0;
              v172 = MEMORY[0x263F8EE78];
            }
            *(void *)&v317 = LODWORD(v101);
            *((void *)&v317 + 1) = 0x4000000400000000;
            *(void *)&v318 = v172;
            BYTE10(v318) = v170;
            WORD4(v318) = v171;
            LOBYTE(v298) = v275;
            DisplayList.Item.canonicalize(options:)((char *)&v298);
            outlined consume of DisplayList.Item.Value(*((uint64_t *)&v283 + 1), v136);
            uint64_t v136 = *((void *)&v317 + 1);
            *((void *)&v283 + 1) = v317;
            v274 = v318;
            uint64_t v138 = WORD4(v318) | (BYTE10(v318) << 16);
          }
          v269 = v138;
          v273 = v136;
          uint64_t v105 = *(double *)&v316[16];
          __int16 v106 = *(double *)&v316[8];
          __int16 v5 = *(double *)&v316[32];
          char v107 = *(void *)&v316[24];
          v232 = *(void *)&v316[40];
          char v2 = HIDWORD(v318);
          v173 = static GraphicsBlendMode.normal;
          v174 = byte_26B0EB4A0;
          outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_26B0EB4A0);
          outlined consume of GraphicsBlendMode(v158, v230);
          *(void *)&v319[8] = v173;
          v319[16] = v174;
          *(_DWORD *)&v319[20] = 1065353216;
          v319[24] = 0;
          v317 = xmmword_2461B9DE0;
          *(void *)&v318 = 0;
          BYTE10(v318) = 0;
          WORD4(v318) = 0;
        }
        *(double *)&v316[8] = v4;
        *(double *)&v316[16] = v3;
        *(void *)&v316[24] = v102;
        *(double *)&v316[32] = v6;
        char v112 = (void *)v320[1];
        long long v57 = (void *)v320[2];
        int v113 = v320[3];
        unsigned int v1 = v320[4];
        char v114 = v321;
        uint64_t v115 = v320[7];
        unint64_t v26 = v320[8];
        long long v116 = v278;
        if (v321 >> 30)
        {
          if (v321 >> 30 == 1)
          {
            v226 = v320[5];
            v228 = v320[6];
            outlined copy of _ShapeStyle_RenderedLayers.Layers(v320[1], v320[2], v320[3], v320[4], v320[5], v320[6], v320[7], v320[8], v321);
            outlined copy of DisplayList.Item.Value(*((uint64_t *)&v283 + 1), v273);
            char v2 = (unint64_t)v112;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              char v2 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v112[2] + 1, 1, v112);
            }
            long long v118 = *(void *)(v2 + 16);
            long long v117 = *(void *)(v2 + 24);
            if (v118 >= v117 >> 1) {
              char v2 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v117 > 1), v118 + 1, 1, (void *)v2);
            }
            *(void *)(v2 + 16) = v118 + 1;
            long long v119 = (double *)(v2 + 72 * v118);
            v119[4] = v106 - v4;
            v119[5] = v105 - v3;
            *((void *)v119 + 6) = v107;
            v119[7] = v5;
            *((void *)v119 + 8) = v232;
            v119[9] = *((double *)&v283 + 1);
            *((void *)v119 + 10) = v273;
            *((void *)v119 + 11) = v274;
            *((unsigned char *)v119 + 98) = BYTE2(v269);
            *((_WORD *)v119 + 48) = v269;
            *((_DWORD *)v119 + 25) = 0;
            outlined consume of DisplayList.Item.Value(*((uint64_t *)&v283 + 1), v273);
            outlined consume of _ShapeStyle_RenderedLayers.Layers((uint64_t)v112, (uint64_t)v57, v113, v1, v226, v228, v115, v26, v114);
            v320[1] = v2;
            memset(&v320[2], 0, 56);
            int v86 = 0x40000000;
            long long v116 = v278;
          }
          else
          {
            *(double *)&v320[1] = v106;
            *(double *)&v320[2] = v105;
            int v86 = v269 & 0xFFFFFF | (v2 << 32);
            v320[3] = v107;
            *(CGFloat *)&v320[4] = v5;
            v320[5] = v232;
            v320[6] = *((void *)&v283 + 1);
            v320[7] = v273;
            v320[8] = v274;
          }
        }
        else
        {
          char v6 = *(double *)&v320[1] - v4;
          uint64_t v120 = *(double *)&v320[2] - v3;
          uint64_t v4 = v106 - v4;
          uint64_t v3 = v105 - v3;
          uint64_t v121 = v320[6];
          char v2 = v320[5];
          type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
          int v122 = swift_allocObject();
          *(_OWORD *)(v122 + 16) = xmmword_2461BDD50;
          *(double *)(v122 + 32) = v6;
          *(double *)(v122 + 40) = v120;
          *(void *)(v122 + 48) = v113;
          *(void *)(v122 + 56) = v1;
          *(void *)(v122 + 64) = v2;
          *(void *)(v122 + 72) = v121;
          *(void *)(v122 + 80) = v115;
          *(void *)(v122 + 88) = v26;
          *(unsigned char *)(v122 + 98) = BYTE2(v114);
          *(_WORD *)(v122 + 96) = v114;
          *(_DWORD *)(v122 + 100) = 0;
          *(double *)(v122 + 104) = v4;
          *(double *)(v122 + 112) = v3;
          *(void *)(v122 + 120) = v107;
          *(CGFloat *)(v122 + 128) = v5;
          *(void *)(v122 + 136) = v232;
          *(void *)(v122 + 144) = *((void *)&v283 + 1);
          *(void *)(v122 + 152) = v273;
          *(void *)(v122 + 160) = v274;
          *(unsigned char *)(v122 + 170) = BYTE2(v269);
          *(_WORD *)(v122 + 168) = v269;
          *(_DWORD *)(v122 + 172) = 0;
          v320[1] = v122;
          memset(&v320[2], 0, 56);
          int v86 = 0x40000000;
        }
        v321 = v86;
        outlined consume of _ShapeStyle_RenderedShape.Shape((void *)v309, *((uint64_t *)&v309 + 1), v310, *((uint64_t *)&v310 + 1), v311, *((uint64_t *)&v311 + 1), v312, *((uint64_t *)&v312 + 1), v313, *((uint64_t *)&v313 + 1), v314, *((uint64_t *)&v314 + 1), *(unsigned int *)v315);
        int v81 = v231;
        swift_release_n();
        outlined consume of _ShapeStyle_Pack.Style?(v283, v287, v276, v286, v285, v284, v281, v261, v259, v116, v237, v236, v235, v234);
        *(void *)&v309 = v257;
        *((void *)&v309 + 1) = v255;
        *(void *)&v310 = v253;
        *((void *)&v310 + 1) = v251;
        *(void *)&v312 = v249;
        *((void *)&v312 + 1) = v247;
        *(void *)&v313 = v245;
        *((void *)&v313 + 1) = v243;
        *(void *)&v314 = v241;
        *((void *)&v314 + 1) = v239;
        *(_DWORD *)v315 = v238;
        int v85 = *(_DWORD *)(v231 + 60);
        int v84 = v85;
        *(void *)&v311 = v265;
        *((void *)&v311 + 1) = v263;
        int v82 = (void *)(v231 + 24);
        swift_beginAccess();
      }
      while (*(void *)(*(void *)(v231 + 24) + 16) > v85);
    }
    *(_DWORD *)(v81 + 60) = 0;
  }
  int v82 = (void *)v320[1];
  v284 = v320[3];
  v285 = v320[2];
  v286 = (void *)v320[5];
  v287 = v320[4];
  long long v57 = (void *)v320[7];
  *(void *)&v283 = v320[8];
  *((void *)&v283 + 1) = v320[6];
  v175 = v321;
  if (v321 >> 30)
  {
    if (v321 >> 30 == 1)
    {
      v176 = swift_bridgeObjectRetain();
      DisplayList.init(_:)(v176, (uint64_t)&v289);
      v298 = *(_OWORD *)&v315[8];
      v299 = *(_OWORD *)&v315[24];
      *(_OWORD *)&v300[8] = xmmword_2461B9DD0;
      *(void *)v300 = *(void *)&v316[40];
      *(CGFloat *)&v300[24] = v289.origin.x;
      v300[34] = BYTE2(v289.origin.y);
      *(_WORD *)&v300[32] = LOWORD(v289.origin.y);
      *(_DWORD *)&v300[36] = HIDWORD(v318);
      LOBYTE(v289.origin.x) = v223;
      DisplayList.Item.canonicalize(options:)((char *)&v289);
      uint64_t v4 = *((double *)&v298 + 1);
      uint64_t v3 = *(double *)&v298;
      char v6 = *((double *)&v299 + 1);
      __int16 v5 = *(double *)&v299;
      v177 = *(void *)v300;
      int v81 = *(void *)&v300[8];
      unsigned int v1 = *(void *)&v300[16];
      unint64_t v26 = *(void *)&v300[24];
      LODWORD(v87) = *(unsigned __int16 *)&v300[32] | (v300[34] << 16);
      LODWORD(v281) = *(_DWORD *)&v300[36];
      v178 = *(void *)&v300[16] >> 62;
      if (*(void *)&v300[16] >> 62 != 3
        || (v87 & 0xFFFFFF) != 0
        || *(void *)&v300[16] != 0xC000000000000000
        || *(void *)&v300[24] | *(void *)&v300[8])
      {
        LODWORD(v276) = v175;
        type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
        v184 = swift_allocObject();
        *(_OWORD *)(v184 + 16) = xmmword_2461B9DC0;
        *(double *)(v184 + 32) = v3;
        *(double *)(v184 + 40) = v4;
        *(CGFloat *)(v184 + 48) = v5;
        *(double *)(v184 + 56) = v6;
        *(void *)(v184 + 64) = v177;
        *(void *)(v184 + 72) = v81;
        *(void *)(v184 + 80) = v1;
        *(void *)(v184 + 88) = v26;
        v185 = v87 >> 16;
        *(unsigned char *)(v184 + 98) = BYTE2(v87);
        *(_WORD *)(v184 + 96) = (_WORD)v87;
        v186 = v178;
        v187 = v281;
        *(_DWORD *)(v184 + 100) = v281;
        char v2 = v184;
        LOWORD(v175) = 0;
        v274 = v177;
        switch(v186)
        {
          case 1:
            LODWORD(v273) = v87 >> 16;
            switch(BYTE4(v1))
            {
              case 2:
                outlined copy of DisplayList.Item.Value(v81, v1);
                outlined copy of DisplayList.Item.Value(v81, v1);
                swift_bridgeObjectRelease();
                outlined consume of DisplayList.Effect(v81, v1, 2);
                LODWORD(v192) = (v81 >> 2) & 1;
                break;
              case 3:
                outlined init with copy of AnyTrackedValue(v81 + 16, (uint64_t)&v289);
                v266 = v289.size.height;
                v208 = v290;
                __swift_project_boxed_opaque_existential_1(&v289, *(uint64_t *)&v289.size.height);
                v280 = v82;
                v209 = *(void (**)(__int16 *__return_ptr, void, uint64_t))(v208 + 56);
                outlined copy of DisplayList.Item.Value(v81, v1);
                outlined copy of DisplayList.Item.Value(v81, v1);
                v209(&v288, *(void *)&v266, v208);
                int v82 = v280;
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v289);
                swift_bridgeObjectRelease();
                outlined consume of DisplayList.Effect(v81, v1, 3);
                LOWORD(v192) = v288;
                break;
              case 7:
                LOWORD(v192) = *(_WORD *)(v81 + 24);
                outlined copy of DisplayList.Item.Value(v81, v1);
                outlined copy of DisplayList.Item.Value(v81, v1);
                swift_bridgeObjectRelease();
                outlined consume of DisplayList.Effect(v81, v1, 7);
                break;
              case 0xA:
                outlined copy of DisplayList.Item.Value(v81, v1);
                outlined copy of DisplayList.Item.Value(v81, v1);
                swift_bridgeObjectRelease();
                outlined consume of DisplayList.Effect(v81, v1, 10);
                LOWORD(v192) = 4;
                break;
              case 0xC:
                outlined copy of DisplayList.Item.Value(v81, v1);
                outlined copy of DisplayList.Item.Value(v81, v1);
                swift_bridgeObjectRelease();
                outlined consume of DisplayList.Effect(v81, v1, 12);
                LOWORD(v192) = 2;
                break;
              case 0xE:
                outlined copy of DisplayList.Item.Value(v81, v1);
                outlined copy of DisplayList.Item.Value(v81, v1);
                swift_bridgeObjectRelease();
                v210 = v81;
                v211 = v1;
                LOBYTE(v212) = 14;
                goto LABEL_152;
              case 0xF:
                outlined copy of DisplayList.Item.Value(v81, v1);
                outlined copy of DisplayList.Item.Value(v81, v1);
                swift_bridgeObjectRelease();
                outlined consume of DisplayList.Effect(v81, v1, 15);
                LOWORD(v192) = 64;
                break;
              case 0x10:
                outlined copy of DisplayList.Item.Value(v81, v1);
                outlined copy of DisplayList.Item.Value(v81, v1);
                swift_bridgeObjectRelease();
                outlined consume of DisplayList.Effect(v81, v1, 16);
                LOWORD(v192) = 32;
                break;
              case 0x11:
                (*(void (**)(CGRect *__return_ptr))(*(void *)v81 + 112))(&v289);
                v267 = LOWORD(v289.origin.x);
                v213 = (unsigned __int16)word_26FA429C8;
                v192 = v82;
                v214 = (unsigned __int16)word_26FA429CA;
                outlined copy of DisplayList.Item.Value(v81, v1);
                outlined copy of DisplayList.Item.Value(v81, v1);
                swift_bridgeObjectRelease();
                outlined consume of DisplayList.Effect(v81, v1, 17);
                if ((v214 & ~v213) != 0) {
                  v215 = v214;
                }
                else {
                  v215 = 0;
                }
                int v82 = v192;
                LOWORD(v192) = v267 | v213 | v215;
                break;
              default:
                outlined copy of DisplayList.Item.Value(v81, v1);
                outlined copy of DisplayList.Item.Value(v81, v1);
                swift_bridgeObjectRelease();
                v210 = v81;
                v211 = v1;
                v212 = HIDWORD(v1);
LABEL_152:
                outlined consume of DisplayList.Effect(v210, v211, v212);
                LOWORD(v192) = 0;
                break;
            }
            LOWORD(v175) = (unsigned __int16)v192 | (unsigned __int16)v87;
            goto LABEL_160;
          case 2:
            v193 = *(void *)(v81 + 16);
            if (!v193)
            {
              v194 = v87 >> 16;
              LOWORD(v175) = 128;
              goto LABEL_134;
            }
            v194 = v87 >> 16;
            if (v193 == 1)
            {
              v195 = 0;
              LODWORD(v175) = 128;
            }
            else
            {
              v196 = 0;
              v195 = v193 & 0x7FFFFFFFFFFFFFFELL;
              v197 = (unsigned __int16 *)(v81 + 104);
              v198 = 128;
              v199 = v193 & 0x7FFFFFFFFFFFFFFELL;
              do
              {
                v200 = *(v197 - 20);
                v201 = *v197;
                v197 += 40;
                v198 |= v200;
                v196 |= v201;
                v199 -= 2;
              }
              while (v199);
              LODWORD(v175) = v196 | v198;
              if (v193 == v195)
              {
LABEL_134:
                outlined copy of DisplayList.Item.Value(v81, v1);
                LOBYTE(v185) = v194;
                goto LABEL_162;
              }
            }
            v202 = v193 - v195;
            v203 = (unsigned __int16 *)(v81 + 40 * v195 + 64);
            do
            {
              v204 = *v203;
              v203 += 20;
              LODWORD(v175) = v204 | v175;
              --v202;
            }
            while (v202);
            goto LABEL_134;
          case 3:
            goto LABEL_162;
          default:
            LODWORD(v273) = v87 >> 16;
            switch(v81 >> 60)
            {
              case 6uLL:
                outlined init with copy of AnyTrackedValue((v81 & 0xFFFFFFFFFFFFFFFLL) + 16, (uint64_t)&v289);
                v271 = v289.size.height;
                v188 = v290;
                __swift_project_boxed_opaque_existential_1(&v289, *(uint64_t *)&v289.size.height);
                v279 = v82;
                v189 = *(void (**)(__int16 *__return_ptr, void, uint64_t))(v188 + 40);
                outlined copy of DisplayList.Item.Value(v81, v1);
                v189(&v288, *(void *)&v271, v188);
                v187 = v281;
                int v82 = v279;
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v289);
                LOWORD(v175) = v288;
                goto LABEL_161;
              case 8uLL:
                v205 = *(void *)((v81 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
                if (!*(void *)(v205 + 216)) {
                  goto LABEL_142;
                }
                v272 = *(id *)(v205 + 216);
                outlined copy of DisplayList.Item.Value(v81, v1);
                outlined copy of DisplayList.Item.Value(v81, v1);
                outlined copy of DisplayList.Item.Value(v81, v1);
                swift_retain();
                swift_retain();
                if ((uint64_t)objc_msgSend(v272, sel_length) <= 0) {
                  goto LABEL_169;
                }
                if (one-time initialization token for updateSchedule != -1) {
                  swift_once();
                }
                v206 = static NSAttributedStringKey.updateSchedule;
                objc_msgSend(v272, sel_length);
                if (!objc_msgSend(v272, sel_attribute_atIndex_effectiveRange_, v206, 0, 0)) {
                  goto LABEL_168;
                }
                _bridgeAnyObjectToAny(_:)();
                swift_unknownObjectRelease();
                outlined destroy of CoordinateSpaceGesture<CGFloat>((uint64_t)&v289, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0]);
                v207 = *(unsigned char *)(v205 + 256);
                outlined consume of DisplayList.Item.Value(v81, v1);
                swift_release();
                swift_release();
                outlined consume of DisplayList.Item.Value(v81, v1);
                if ((v207 & 1) == 0) {
                  goto LABEL_170;
                }
                LOWORD(v175) = 8;
                break;
              case 9uLL:
                LOWORD(v175) = *(_WORD *)((v81 & 0xFFFFFFFFFFFFFFFLL) + 0x18) | 0x200;
                outlined copy of DisplayList.Item.Value(v81, v1);
                goto LABEL_161;
              case 0xBuLL:
                goto LABEL_145;
              case 0xCuLL:
                outlined copy of DisplayList.Item.Value(v81, v1);
LABEL_145:
                outlined copy of DisplayList.Item.Value(v81, v1);
                LOWORD(v175) = 2;
                goto LABEL_161;
              default:
LABEL_142:
                outlined copy of DisplayList.Item.Value(v81, v1);
                LOWORD(v175) = 0;
                goto LABEL_160;
            }
            goto LABEL_160;
        }
      }
      outlined consume of DisplayList.Item.Value(0, 0xC000000000000000);
      outlined consume of _ShapeStyle_RenderedLayers.Layers((uint64_t)v82, v285, v284, v287, (uint64_t)v286, *((uint64_t *)&v283 + 1), (unint64_t)v57, v283, v175);
      v179 = 0;
      LOWORD(v175) = 0;
      v180 = (void *)MEMORY[0x263F8EE78];
LABEL_163:
      int v82 = 0;
      *(double *)&v284 = 0.0;
      *(double *)&v285 = 0.0;
      v286 = 0;
      v287 = 0;
      v283 = 0uLL;
      long long v57 = 0;
      v182 = 0x80000000;
      v183 = (char)v225;
      v181 = (uint64_t)v180;
    }
    else
    {
      v182 = v321;
      LOWORD(v175) = 0;
      v179 = 0;
      v181 = MEMORY[0x263F8EE78];
      v183 = (char)v225;
    }
  }
  else
  {
    if (v320[7] >> 62 == 3 && v320[7] == 0xC000000000000000 && v283 == 0 && (v321 & 0xFFFFFF) == 0)
    {
      outlined consume of _ShapeStyle_RenderedLayers.Layers(v320[1], v320[2], v320[3], v320[4], v320[5], 0, 0xC000000000000000, 0, v321);
      int v82 = 0;
      *(double *)&v284 = 0.0;
      *(double *)&v285 = 0.0;
      v286 = 0;
      v287 = 0;
      v283 = 0uLL;
      long long v57 = 0;
      LOWORD(v175) = 0;
      v179 = 0;
      v181 = MEMORY[0x263F8EE78];
    }
    else
    {
      type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
      v181 = swift_allocObject();
      *(_OWORD *)(v181 + 16) = xmmword_2461B9DC0;
      *(void *)(v181 + 32) = v82;
      *(double *)(v181 + 40) = *(double *)&v285;
      *(double *)(v181 + 48) = *(double *)&v284;
      *(void *)(v181 + 56) = v287;
      *(void *)(v181 + 64) = v286;
      *(void *)(v181 + 72) = *((void *)&v283 + 1);
      *(void *)(v181 + 80) = v57;
      *(void *)(v181 + 88) = v283;
      v190 = WORD1(v175);
      *(unsigned char *)(v181 + 98) = BYTE2(v175);
      *(_WORD *)(v181 + 96) = v175;
      v282 = HIDWORD(v175);
      *(_DWORD *)(v181 + 100) = HIDWORD(v175);
      *(void *)&v298 = v82;
      *((void *)&v298 + 1) = v285;
      *(void *)&v299 = v284;
      *((void *)&v299 + 1) = v287;
      *(void *)v300 = v286;
      *(void *)&v300[8] = *((void *)&v283 + 1);
      *(void *)&v300[16] = v57;
      *(void *)&v300[24] = v283;
      v300[34] = BYTE2(v175);
      *(_WORD *)&v300[32] = v175;
      *(_DWORD *)&v300[36] = HIDWORD(v175);
      outlined copy of DisplayList.Item.Value(*((uint64_t *)&v283 + 1), (unint64_t)v57);
      DisplayList.Item.features.getter((__int16 *)&v289);
      v191 = v175;
      LOWORD(v175) = LOWORD(v289.origin.x);
      *(void *)&v298 = v82;
      *((void *)&v298 + 1) = v285;
      *(void *)&v299 = v284;
      *((void *)&v299 + 1) = v287;
      *(void *)v300 = v286;
      *(void *)&v300[8] = *((void *)&v283 + 1);
      *(void *)&v300[16] = v57;
      *(void *)&v300[24] = v283;
      v300[34] = v190;
      *(_WORD *)&v300[32] = v191;
      *(_DWORD *)&v300[36] = v282;
      DisplayList.Item.properties.getter(&v289);
      outlined consume of _ShapeStyle_RenderedLayers.Layers((uint64_t)v82, v285, v284, v287, (uint64_t)v286, *((uint64_t *)&v283 + 1), (unint64_t)v57, v283, v191);
      int v82 = 0;
      *(double *)&v284 = 0.0;
      *(double *)&v285 = 0.0;
      v286 = 0;
      v287 = 0;
      v283 = 0uLL;
      long long v57 = 0;
      v179 = LOBYTE(v289.origin.x);
    }
    v182 = 0x80000000;
    v183 = (char)v225;
  }
  *(void *)&v298 = v181;
  WORD4(v298) = v175;
  BYTE10(v298) = v179;
  AGGraphSetOutputValue();
  outlined consume of GraphicsImage.Contents?(v224, v183);
  swift_bridgeObjectRelease();
  v306 = v317;
  v307 = v318;
  *(_OWORD *)v308 = *(_OWORD *)v319;
  *(_OWORD *)&v308[9] = *(_OWORD *)&v319[9];
  v302 = *(_OWORD *)&v315[32];
  v303 = *(_OWORD *)v316;
  v304 = *(_OWORD *)&v316[16];
  v305 = *(_OWORD *)&v316[32];
  *(_OWORD *)&v300[32] = v313;
  *(_OWORD *)&v300[48] = v314;
  *(_OWORD *)&v300[64] = *(_OWORD *)v315;
  v301 = *(_OWORD *)&v315[16];
  v298 = v309;
  v299 = v310;
  *(_OWORD *)v300 = v311;
  *(_OWORD *)&v300[16] = v312;
  outlined release of _ShapeStyle_RenderedShape((uint64_t)&v298);
  swift_release();
  outlined consume of _ShapeStyle_RenderedLayers.Layers((uint64_t)v82, v285, v284, v287, (uint64_t)v286, *((uint64_t *)&v283 + 1), (unint64_t)v57, v283, v182);
  return outlined release of Image.Resolved((uint64_t)v322);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  double x;
  double y;
  CGFloat width;
  double height;
  int v10;
  uint64_t Value;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  void *v16;
  int v17;
  unint64_t v18;
  int v19;
  int v20;
  int v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  int v27;
  unint64_t v28;
  int v29;
  unint64_t v30;
  int v31;
  unint64_t v32;
  int v33;
  double *v34;
  double v35;
  double v36;
  double *v37;
  double v38;
  double v39;
  double *v40;
  CGFloat v41;
  CGFloat v42;
  CGFloat v43;
  CGFloat v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  CGFloat v52;
  CGFloat v53;
  CGFloat v54;
  CGFloat v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  uint64_t v59;
  unint64_t *v60;
  int v61;
  uint64_t v62;
  int v63;
  double v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  float v81;
  uint64_t v82;
  uint64_t v83;
  double v84;
  double v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  double *v100;
  uint64_t v101;
  uint64_t v102;
  long long v103;
  int v104;
  long long v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  __int16 x_low;
  uint64_t v110;
  uint64_t v111;
  char v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int v120;
  int v121;
  unint64_t v122;
  CGPoint origin;
  CGSize size;
  BOOL IsNull;
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  double v131;
  char v132;
  __int16 v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char v137;
  long long v138;
  uint64_t v139;
  char v140;
  __int16 v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  char v146;
  uint64_t v147;
  __int16 v148;
  long long v149;
  uint64_t v150;
  char v151;
  __int16 v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  void *v166;
  unsigned int v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  unsigned int v171;
  uint64_t v172;
  int v173;
  uint64_t v174;
  CGFloat v175;
  void *v176;
  unsigned int v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unsigned int v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  unsigned __int16 *v187;
  int v188;
  uint64_t v189;
  int v190;
  int v191;
  uint64_t v192;
  unsigned __int16 *v193;
  int v194;
  uint64_t v195;
  uint64_t v196;
  void *v197;
  void (**v198)(uint64_t *__return_ptr, void, void *);
  uint64_t v199;
  char v200;
  unint64_t v201;
  int v202;
  __int16 v203;
  uint64_t v204;
  unint64_t v205;
  int v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unsigned int v211;
  CGFloat v212;
  CGFloat v213;
  CGFloat v214;
  CGFloat v215;
  uint64_t v216;
  char v217;
  uint64_t v218;
  unsigned int v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t v225;
  uint64_t v226;
  void *v227;
  uint64_t v228;
  void *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  char v233;
  uint64_t v234;
  double v235;
  uint64_t v236;
  unint64_t *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  double v242;
  uint64_t v243;
  unsigned __int8 v244;
  char v245;
  int v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  id v256;
  id v257;
  char v258;
  uint64_t v259;
  uint64_t v260;
  void (*v261)(uint64_t *__return_ptr, void, void *);
  __int16 v262;
  uint64_t v263;
  CGFloat v264;
  void *v265;
  uint64_t v266;
  void (*v267)(uint64_t *__return_ptr, void, void *);
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  unint64_t v272;
  unint64_t v273;
  char v274;
  uint64_t v275;
  long long v276;
  char v277;
  unint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  unint64_t v284;
  uint64_t v285;
  uint64_t v286;
  void *v287;
  char *v288;
  uint64_t v289;
  int v290;
  int v291;
  int v292;
  int v293;
  int v294;
  int v295;
  int v296;
  int v297;
  int v298;
  int v299;
  int v300;
  int v301;
  int v302;
  long long v303;
  long long v304;
  unsigned char v305[32];
  long long v306;
  long long v307;
  long long v308;
  long long v309;
  long long v310;
  long long v311;
  long long v312;
  long long v313;
  long long v314;
  long long v315;
  _OWORD v316[2];
  CGRect v317;
  void *v318;
  uint64_t v319;
  unint64_t v320;
  uint64_t v321;
  __int16 v322;
  char v323;
  int v324;
  long long v325;
  long long v326;
  long long v327;
  long long v328;
  long long v329;
  long long v330;
  unsigned char v331[48];
  unsigned char v332[80];
  unsigned char v333[25];
  void v334[9];
  unint64_t v335;
  void v336[12];
  unsigned int v337;
  double v338;
  double v339;
  double v340;
  double v341;
  uint64_t v342[2];
  char v343;
  char v344;
  uint64_t v345;
  CGRect v346;
  CGRect v347;
  CGRect v348;

  v345 = *MEMORY[0x263EF8340];
  int v10 = *(_DWORD *)(v0 + 12);
  uint64_t Value = AGGraphGetValue();
  double v13 = *(void *)Value;
  double v12 = *(void *)(Value + 8);
  uint64_t v14 = *(unsigned char *)(Value + 16);
  v342[0] = *(void *)Value;
  v342[1] = v12;
  v343 = v14;
  v344 = v15 & 1;
  uint64_t v16 = &unk_26B0F1000;
  if ((v15 & 1) != 0 || !*((_WORD *)v288 + 25))
  {
    swift_retain();
    swift_retain();
    int v18 = ++static DisplayList.Version.lastValue;
  }
  else
  {
    *(void *)&v325 = *(void *)(v288 + 28);
    DWORD2(v325) = v10;
    swift_retain();
    swift_retain();
    char v17 = AGGraphAnyInputsChanged();
    int v18 = ++static DisplayList.Version.lastValue;
    if (!v17) {
      goto LABEL_9;
    }
  }
  unint64_t v19 = (2 * ((33 * (v18 >> 16)) ^ v18)) | 1;
  if (!v18) {
    LOWORD(v19) = 0;
  }
  *((_WORD *)v288 + 25) = v19;
LABEL_9:
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    int v21 = *((_DWORD *)v288 + 10);
    unint64_t v22 = AGCreateWeakAttribute();
    int v23 = v22;
    v284 = HIDWORD(v22);
    unint64_t v24 = AGCreateWeakAttribute();
    int v25 = v24;
    v282 = HIDWORD(v24);
    LODWORD(v287) = v21;
    unint64_t v26 = AGCreateWeakAttribute();
    int v27 = v26;
    v281 = HIDWORD(v26);
    unint64_t v28 = AGCreateWeakAttribute();
    int v29 = v28;
    v279 = HIDWORD(v28);
    unint64_t v30 = AGCreateWeakAttribute();
    int v31 = v30;
    *((void *)&v276 + 1) = HIDWORD(v30);
    unint64_t v32 = AGCreateWeakAttribute();
    int v33 = v32;
    *(void *)&v276 = HIDWORD(v32);
    long long v34 = (double *)AGGraphGetValue();
    double v35 = *v34;
    double v36 = v34[1];
    Swift::Double_optional v37 = (double *)AGGraphGetValue();
    double v38 = *v37;
    double v39 = v37[1];
    type metadata accessor for CGSize(0);
    uint64_t v40 = (double *)AGGraphGetValue();
    CGFloat v41 = *v40;
    CGFloat v42 = v40[1];
    _threadGeometryProxyData();
    v290 = v23;
    v291 = v284;
    v292 = v25;
    v293 = v282;
    v294 = v27;
    v295 = v281;
    v296 = v29;
    v297 = v279;
    v298 = v31;
    v299 = DWORD2(v276);
    v300 = v33;
    v301 = v276;
    v283 = v18;
    v302 = v18;
    _setThreadGeometryProxyData();
    specialized closure #2 in ShapeStyledDisplayList.updateValue()(v342, (uint64_t)v336, v41, v42);
    uint64_t v43 = v36 - v39;
    uint64_t v44 = v35 - v38;
    _setThreadGeometryProxyData();
    v229 = (void *)v336[0];
    v240 = v336[1];
    uint64_t v16 = (void *)v336[2];
    uint64_t v45 = v336[3];
    v226 = v336[5];
    v227 = (void *)v336[4];
    uint64_t v46 = v336[6];
    v224 = v336[7];
    char v47 = v336[8];
    uint64_t v48 = v336[9];
    long long v49 = v336[10];
    long long v50 = v336[11];
    long long v51 = v337;
    long long v52 = v338;
    long long v53 = v339;
    long long v54 = v340;
    long long v55 = v341;
    unsigned int v1 = *(void *)v288;
    memset(&v334[1], 0, 64);
    v334[0] = v1;
    v335 = 0x80000000;
    swift_retain();
    v219 = v51;
    v211 = v51;
    v220 = v50;
    v221 = v49;
    v210 = v49;
    v222 = v48;
    v223 = v47;
    v208 = v47;
    v209 = v48;
    uint64_t v3 = (unint64_t)v229;
    uint64_t v4 = v240;
    v228 = (uint64_t)v16;
    double v13 = v45;
    long long v56 = v45;
    double v12 = v226;
    __int16 v5 = (unint64_t)v227;
    v225 = v46;
    long long v57 = v46;
    char v2 = v224;
    outlined copy of _ShapeStyle_RenderedShape.Shape(v229, v240, (uint64_t)v16, v56, v227, v226, v57, v224, v208, v209, v210, v50, v211);
    v346.origin.CGFloat x = v52;
    v346.origin.CGFloat y = v53;
    v346.size.CGFloat width = v54;
    v346.size.CGFloat height = v55;
    v347 = CGRectOffset(v346, v44, v43);
    CGFloat x = v347.origin.x;
    CGFloat y = v347.origin.y;
    CGFloat width = v347.size.width;
    CGFloat height = v347.size.height;
    int v20 = *((_DWORD *)v288 + 2);
    LOWORD(v16) = *((_WORD *)v288 + 25);
    long long v58 = v288[48];
    v217 = v58;
    if (one-time initialization token for normal == -1) {
      goto LABEL_11;
    }
  }
  v207 = v20;
  swift_once();
  int v20 = v207;
  long long v58 = v217;
LABEL_11:
  *(void *)&v325 = v3;
  *((void *)&v325 + 1) = v4;
  *(void *)&v326 = v228;
  *((void *)&v326 + 1) = v13;
  *(void *)&v327 = v5;
  *((void *)&v327 + 1) = v12;
  *(void *)&v328 = v225;
  *((void *)&v328 + 1) = v2;
  *(void *)&v329 = v223;
  *((void *)&v329 + 1) = v222;
  *(void *)&v330 = v221;
  *((void *)&v330 + 1) = v220;
  *(_DWORD *)v331 = v219;
  *(_WORD *)&v331[4] = (_WORD)v16;
  *(double *)&v331[8] = x;
  *(double *)&v331[16] = y;
  *(CGFloat *)&v331[24] = width;
  *(double *)&v331[32] = height;
  *(void *)&v331[40] = 0;
  *(_DWORD *)v332 = 0;
  *(double *)&v332[8] = x;
  *(double *)&v332[16] = y;
  *(CGFloat *)&v332[24] = width;
  *(double *)&v332[32] = height;
  *(_OWORD *)&v332[48] = xmmword_2461B9DE0;
  *(void *)&v332[40] = v283;
  *(void *)&v332[64] = 0;
  v332[74] = 0;
  *(_WORD *)&v332[72] = 0;
  *(_DWORD *)&v332[76] = v20;
  v333[0] = v58;
  *(_DWORD *)&v333[4] = v287;
  *(void *)&v333[8] = static GraphicsBlendMode.normal;
  v333[16] = byte_26B0EB4A0;
  *(_DWORD *)&v333[20] = 1065353216;
  v333[24] = 0;
  LOBYTE(v303) = 0;
  unsigned int v59 = *((unsigned int *)v288 + 4);
  outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_26B0EB4A0);
  _ShapeStyle_RenderedShape.renderItem(name:styles:layers:)((unsigned __int8 *)&v303, v59, (uint64_t)v334);
  v270 = v1;
  v218 = v13;
  if (v1)
  {
    long long v60 = (unint64_t *)(v1 + 24);
    int64x2_t v61 = *(_DWORD *)(v1 + 60);
    char v62 = v61;
    swift_beginAccess();
    if (*(void *)(*(void *)(v1 + 24) + 16) > v61)
    {
      v214 = *(double *)(MEMORY[0x263F001A0] + 8);
      v215 = *MEMORY[0x263F001A0];
      v212 = *(double *)(MEMORY[0x263F001A0] + 24);
      v213 = *(double *)(MEMORY[0x263F001A0] + 16);
      unint64_t v63 = v61;
      v237 = (unint64_t *)(v1 + 24);
      do
      {
        ++*(_DWORD *)(v1 + 60);
        swift_beginAccess();
        int v69 = *(void *)(v1 + 24);
        swift_retain();
        uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v1 + 24) = v69;
        if (isUniquelyReferenced_nonNull_native)
        {
          if (v63 < 0) {
            goto LABEL_145;
          }
        }
        else
        {
          int v69 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)v69);
          *long long v60 = v69;
          if (v63 < 0)
          {
LABEL_145:
            __break(1u);
LABEL_146:
            __break(1u);
LABEL_147:
            __break(1u);
LABEL_148:
            outlined consume of DisplayList.Item.Value(v263, v276);
            swift_release();
            swift_release();
            outlined consume of DisplayList.Item.Value(v263, v276);
LABEL_150:
            v173 = v273;
LABEL_151:
            LOWORD(v158) = 0;
LABEL_152:
            v169 = *((void *)&v276 + 1);
            v174 = v69;
            v170 = v276;
LABEL_153:
            LOBYTE(v171) = v268;
LABEL_154:
            v317.origin.CGFloat x = x;
            v317.origin.CGFloat y = y;
            v317.size.CGFloat width = width;
            v317.size.CGFloat height = height;
            v318 = (void *)v5;
            v319 = v174;
            v320 = v170;
            v321 = v169;
            v323 = v171;
            v322 = v2;
            v324 = v173;
            v204 = v174;
            v205 = v170;
            DisplayList.Item.properties.getter(&v289);
            outlined consume of DisplayList.Item.Value(v204, v205);
            outlined consume of _ShapeStyle_RenderedLayers.Layers(v281, (uint64_t)v60, (uint64_t)v288, (uint64_t)v287, v283, v279, v3, v282, v275);
            v161 = v289;
            v162 = v271;
            goto LABEL_155;
          }
        }
        if (*(void *)(v69 + 16) <= v62) {
          goto LABEL_146;
        }
        int v71 = 224 * v62;
        *(unsigned char *)(v69 + 224 * v62 + 252) = 1;
        int v69 = *v60;
        swift_endAccess();
        if (*(void *)(v69 + 16) <= v62) {
          goto LABEL_147;
        }
        unint64_t v72 = v69 + v71;
        LODWORD(v276) = *(_DWORD *)(v69 + v71 + 52);
        char v73 = *(void **)(v69 + v71 + 56);
        v281 = *(void *)(v69 + v71 + 64);
        v288 = *(char **)(v69 + v71 + 72);
        v287 = *(void **)(v69 + v71 + 80);
        uint64_t v74 = *(void *)(v69 + v71 + 96);
        v283 = *(void *)(v69 + v71 + 88);
        __int16 v75 = *(void *)(v69 + v71 + 104);
        v279 = *(void *)(v69 + v71 + 112);
        char v76 = *(void *)(v69 + v71 + 120);
        char v2 = *(void *)(v69 + v71 + 128);
        int v78 = *(void *)(v69 + v71 + 136);
        int v77 = *(void *)(v69 + v71 + 144);
        int v79 = *(void *)(v69 + v71 + 152);
        int v80 = *(void *)(v72 + 160);
        v255 = *((void *)&v325 + 1);
        v256 = (id)v325;
        v253 = *((void *)&v326 + 1);
        v254 = v326;
        v263 = *((void *)&v327 + 1);
        v268 = v327;
        v251 = *((void *)&v328 + 1);
        v252 = v328;
        v249 = *((void *)&v329 + 1);
        v250 = v329;
        v247 = *((void *)&v330 + 1);
        v248 = v330;
        v246 = *(_DWORD *)v331;
        v329 = 0u;
        v330 = 0u;
        v327 = 0u;
        v328 = 0u;
        v325 = 0u;
        v326 = 0u;
        *(_DWORD *)v331 = 0x800000;
        swift_retain_n();
        v282 = v77;
        *((void *)&v276 + 1) = v74;
        outlined copy of _ShapeStyle_Pack.Style?(v73, v281, v288, v287, v283, v74, v75, v279, v76, v2, v78, v77, v79, v80);
        swift_release();
        *(void *)&v331[40] = v270;
        *(_DWORD *)v332 = v276;
        if (v80)
        {
          *(void *)&v303 = v73;
          *((void *)&v303 + 1) = v281;
          *(void *)&v304 = v288;
          *((void *)&v304 + 1) = v287;
          *(void *)v305 = v283;
          *(void *)&v305[8] = v74;
          *(void *)&v305[16] = v75;
          *(void *)&v305[24] = v279;
          *(void *)&v306 = v76;
          *((void *)&v306 + 1) = v2;
          LOBYTE(v307) = v78;
          DWORD1(v307) = HIDWORD(v78);
          *((void *)&v307 + 1) = v77;
          LOBYTE(v308) = v79;
          *((void *)&v308 + 1) = v80;
          _ShapeStyle_RenderedShape.render(style:)((uint64_t)&v303);
        }
        int v81 = *(float *)&v333[20];
        v243 = v80;
        v244 = v79;
        v269 = (uint64_t)v73;
        v266 = v75;
        v259 = v76;
        v245 = v78;
        if (*(float *)&v333[20] == 0.0
          || (CGFloat y = *(double *)&v331[8],
              CGFloat x = *(double *)&v331[16],
              int v82 = *(void *)&v331[24],
              CGFloat height = *(double *)&v331[32],
              CGRectIsEmpty(*(CGRect *)&v331[8])))
        {
          outlined consume of DisplayList.Item.Value(*(uint64_t *)&v332[48], *(unint64_t *)&v332[56]);
          *(_OWORD *)&v332[48] = xmmword_2461B9DE0;
          *(void *)&v332[64] = 0;
          v332[74] = 0;
          *(_WORD *)&v332[72] = 0;
          if (*(void *)&v331[40])
          {
            *(void *)&v332[48] = *(void *)&v331[40];
            *(void *)&v332[56] = *(unsigned int *)v332 | 0x4000001100000000;
            *(void *)&v332[64] = MEMORY[0x263F8EE78];
            LOBYTE(v303) = v333[0];
            DisplayList.Item.canonicalize(options:)((char *)&v303);
            *(void *)&v331[40] = 0;
            *(_DWORD *)v332 = 0;
            *(void *)&v276 = *(void *)&v332[48];
            int v83 = *(void *)&v332[64];
            v273 = *(void *)&v332[56];
            v271 = *(unsigned __int16 *)&v332[72] | (v332[74] << 16);
          }
          else
          {
            v271 = 0;
            int v83 = 0;
            *(void *)&v276 = 0;
            v273 = 0xC000000000000000;
          }
          v275 = v83;
          int v84 = *(double *)&v332[16];
          int v85 = *(double *)&v332[8];
          CGFloat width = *(double *)&v332[32];
          int v86 = *(void *)&v332[24];
          v241 = *(void *)&v332[40];
          __int16 v5 = *(unsigned int *)&v332[76];
          int v87 = static GraphicsBlendMode.normal;
          int v88 = byte_26B0EB4A0;
          int v89 = *(void *)&v333[8];
          long long v90 = v333[16];
          outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_26B0EB4A0);
          outlined consume of GraphicsBlendMode(v89, v90);
          *(void *)&v333[8] = v87;
          v333[16] = v88;
          *(_DWORD *)&v333[20] = 1065353216;
          v333[24] = 0;
          *(_OWORD *)&v332[48] = xmmword_2461B9DE0;
          *(void *)&v332[64] = 0;
          v332[74] = 0;
          *(_WORD *)&v332[72] = 0;
          CGFloat y = *(double *)&v331[8];
          CGFloat x = *(double *)&v331[16];
          int v82 = *(void *)&v331[24];
          CGFloat height = *(double *)&v331[32];
          long long v91 = v282;
        }
        else
        {
          v277 = v333[0];
          LOBYTE(v303) = v333[0];
          DisplayList.Item.canonicalize(options:)((char *)&v303);
          CGFloat v101 = *(void *)&v331[40];
          v239 = v2;
          if (*(void *)&v331[40])
          {
            CGFloat v102 = *(unsigned int *)v332;
            CGFloat v103 = *(_OWORD *)&v332[56];
            unint64_t v104 = *(unsigned __int16 *)&v332[72] | (v332[74] << 16);
            uint64_t v105 = *(_OWORD *)&v332[24];
            __int16 v106 = *(void *)&v332[48];
            char v107 = *(void *)&v332[40];
            if (*(void *)&v332[56] >> 62 != 3
              || (v104 & 0xFFFFFF) != 0
              || *(void *)&v332[56] != 0xC000000000000000
              || *(void *)&v332[64] | *(void *)&v332[48])
            {
              type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
              int v110 = swift_allocObject();
              *(_OWORD *)(v110 + 16) = xmmword_2461B9DC0;
              *(void *)(v110 + 32) = 0;
              *(void *)(v110 + 40) = 0;
              *(_OWORD *)(v110 + 48) = v105;
              *(void *)(v110 + 64) = v107;
              *(void *)(v110 + 72) = v106;
              *(_OWORD *)(v110 + 80) = v103;
              *(unsigned char *)(v110 + 98) = BYTE2(v104);
              *(_WORD *)(v110 + 96) = v104;
              *(_DWORD *)(v110 + 100) = 0;
              v303 = 0uLL;
              v304 = v105;
              *(void *)v305 = v107;
              *(void *)&v305[8] = v106;
              *(_OWORD *)&v305[16] = v103;
              BYTE2(v306) = BYTE2(v104);
              LOWORD(v306) = v104;
              DWORD1(v306) = 0;
              swift_retain();
              outlined copy of DisplayList.Item.Value(v106, v103);
              DisplayList.Item.features.getter((__int16 *)&v317);
              uint64_t v111 = v107;
              x_low = LOWORD(v317.origin.x);
              v303 = 0uLL;
              v304 = v105;
              *(void *)v305 = v111;
              *(void *)&v305[8] = v106;
              *(_OWORD *)&v305[16] = v103;
              BYTE2(v306) = BYTE2(v104);
              LOWORD(v306) = v104;
              DWORD1(v306) = 0;
              DisplayList.Item.properties.getter(&v317);
              int v108 = LOBYTE(v317.origin.x);
            }
            else
            {
              swift_retain();
              int v108 = 0;
              x_low = 0;
              int v110 = MEMORY[0x263F8EE78];
            }
            *(void *)&v332[48] = v101;
            *(void *)&v332[56] = v102 | 0x4000001100000000;
            *(void *)&v332[64] = v110;
            v332[74] = v108;
            *(_WORD *)&v332[72] = x_low;
            LOBYTE(v303) = v277;
            DisplayList.Item.canonicalize(options:)((char *)&v303);
            outlined consume of DisplayList.Item.Value(v106, v103);
            swift_release();
            *(void *)&v331[40] = 0;
            *(_DWORD *)v332 = 0;
            char v2 = v239;
          }
          char v112 = v333[24];
          int v113 = *(void *)&v332[48];
          uint64_t v115 = *(void *)&v332[64];
          char v114 = *(void *)&v332[56];
          long long v116 = *(unsigned __int16 *)&v332[72] | (v332[74] << 16);
          if (v333[24])
          {
            long long v117 = *(void *)&v332[56] >> 62;
            if (*(void *)&v332[56] >> 62 != 3
              || (v116 & 0xFFFFFF) != 0
              || *(void *)&v332[56] != 0xC000000000000000
              || *(void *)&v332[64] | *(void *)&v332[48])
            {
              v272 = *(unsigned __int16 *)&v331[4];
              v274 = v333[24];
              v317.origin.CGFloat x = v215;
              v317.origin.CGFloat y = v214;
              v317.size.CGFloat width = v213;
              v317.size.CGFloat height = v212;
              long long v118 = *(void *)&v332[40];
              v242 = *(double *)&v332[8];
              v303 = *(_OWORD *)&v332[8];
              v231 = *(void *)&v332[24];
              v235 = *(double *)&v332[16];
              v304 = *(_OWORD *)&v332[24];
              v216 = *(void *)&v332[32];
              *(_OWORD *)v305 = *(_OWORD *)&v332[40];
              *(_OWORD *)&v305[16] = *(_OWORD *)&v332[56];
              long long v119 = *(void *)&v332[64];
              uint64_t v120 = WORD1(v116);
              BYTE2(v306) = v332[74];
              LOWORD(v306) = *(_WORD *)&v332[72];
              DWORD1(v306) = *(_DWORD *)&v332[76];
              uint64_t v121 = *(unsigned __int16 *)&v332[72] | (v332[74] << 16);
              int v122 = *(void *)&v332[56];
              DisplayList.Item.addExtent(to:)(&v317.origin.x);
              origin = v317.origin;
              uint64_t size = v317.size;
              BOOL IsNull = CGRectIsNull(v317);
              uint64_t v126 = 0.0;
              if (IsNull) {
                CGRect v127 = 0.0;
              }
              else {
                CGRect v127 = origin.x;
              }
              if (IsNull) {
                CGRect v128 = 0.0;
              }
              else {
                CGRect v128 = origin.y;
              }
              if (IsNull) {
                CGRect v129 = 0.0;
              }
              else {
                CGRect v129 = size.width;
              }
              if (!IsNull) {
                uint64_t v126 = size.height;
              }
              v348 = CGRectIntegral(*(CGRect *)(&v126 - 3));
              CGRect v130 = v348.origin.x;
              char v131 = v348.origin.y;
              *(CGRect *)&v332[8] = v348;
              if (v117 < 3 || (v121 & 0xFFFFFF) != 0 || v122 != 0xC000000000000000 || v119 | v113)
              {
                type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
                uint64_t v134 = swift_allocObject();
                *(_OWORD *)(v134 + 16) = xmmword_2461B9DC0;
                *(void *)(v134 + 32) = 0;
                *(void *)(v134 + 40) = 0;
                *(void *)(v134 + 48) = v231;
                *(void *)(v134 + 56) = v216;
                *(void *)(v134 + 64) = v118;
                *(void *)(v134 + 72) = v113;
                *(void *)(v134 + 80) = v122;
                *(void *)(v134 + 88) = v119;
                *(unsigned char *)(v134 + 98) = v120;
                *(_WORD *)(v134 + 96) = v121;
                *(_DWORD *)(v134 + 100) = 0;
                v303 = 0uLL;
                *(void *)&v304 = v231;
                *((void *)&v304 + 1) = v216;
                *(void *)v305 = v118;
                *(void *)&v305[8] = v113;
                *(void *)&v305[16] = v122;
                *(void *)&v305[24] = v119;
                BYTE2(v306) = v120;
                LOWORD(v306) = v121;
                DWORD1(v306) = 0;
                outlined copy of DisplayList.Item.Value(v113, v122);
                DisplayList.Item.features.getter((__int16 *)&v289);
                uint64_t v133 = v289;
                v303 = 0uLL;
                *(void *)&v304 = v231;
                *((void *)&v304 + 1) = v216;
                *(void *)v305 = v118;
                *(void *)&v305[8] = v113;
                *(void *)&v305[16] = v122;
                *(void *)&v305[24] = v119;
                BYTE2(v306) = v120;
                LOWORD(v306) = v121;
                DWORD1(v306) = 0;
                DisplayList.Item.properties.getter(&v289);
                uint64_t v132 = v289;
              }
              else
              {
                outlined copy of DisplayList.Item.Value(0, 0xC000000000000000);
                uint64_t v132 = 0;
                uint64_t v133 = 0;
                uint64_t v134 = MEMORY[0x263F8EE78];
              }
              char v135 = swift_allocObject();
              *(void *)(v135 + 16) = v134;
              *(_WORD *)(v135 + 24) = v133;
              *(unsigned char *)(v135 + 26) = v132;
              *(double *)(v135 + 32) = v130 - v242;
              *(double *)(v135 + 40) = v131 - v235;
              *(unsigned char *)(v135 + 48) = 0;
              *(_DWORD *)(v135 + 52) = 0;
              *(unsigned char *)(v135 + 56) = 1;
              *(_DWORD *)(v135 + 60) = 161;
              *(unsigned char *)(v135 + 64) = 3;
              outlined consume of DisplayList.Item.Value(v113, v122);
              uint64_t v115 = 0;
              int v113 = v135 | 0x9000000000000000;
              *(void *)&v332[48] = v135 | 0x9000000000000000;
              char v114 = v272;
              *(_OWORD *)&v332[56] = v272;
              v332[74] = 0;
              *(_WORD *)&v332[72] = 0;
              char v2 = v239;
              char v112 = v274;
            }
            else
            {
              char v114 = 0xC000000000000000;
            }
            long long v116 = 0;
            v333[24] = v112 & 0xFE;
          }
          uint64_t v136 = *(void *)&v333[8];
          uint64_t v137 = v333[16];
          long long v91 = v282;
          v236 = *(void *)&v333[8];
          if ((v333[16] & 1) != 0 || *(_DWORD *)&v333[8])
          {
            uint64_t v138 = *(_OWORD *)&v332[24];
            __int16 v139 = *(void *)&v332[40];
            v232 = v333[16];
            if (v114 >> 62 != 3 || (v116 & 0xFFFFFF) != 0 || v114 != 0xC000000000000000 || v115 | v113)
            {
              type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
              char v145 = swift_allocObject();
              float32x4_t v146 = v137;
              char v143 = v145;
              *(_OWORD *)(v145 + 16) = xmmword_2461B9DC0;
              *(void *)(v145 + 32) = 0;
              *(void *)(v145 + 40) = 0;
              *(_OWORD *)(v145 + 48) = v138;
              *(void *)(v145 + 64) = v139;
              *(void *)(v145 + 72) = v113;
              *(void *)(v145 + 80) = v114;
              *(void *)(v145 + 88) = v115;
              *(unsigned char *)(v145 + 98) = BYTE2(v116);
              *(_WORD *)(v145 + 96) = v116;
              *(_DWORD *)(v145 + 100) = 0;
              v303 = 0uLL;
              v304 = v138;
              *(void *)v305 = v139;
              *(void *)&v305[8] = v113;
              *(void *)&v305[16] = v114;
              *(void *)&v305[24] = v115;
              BYTE2(v306) = BYTE2(v116);
              LOWORD(v306) = v116;
              DWORD1(v306) = 0;
              unsigned __int8 v142 = v113;
              outlined copy of GraphicsBlendMode(v236, v146);
              outlined copy of DisplayList.Item.Value(v113, v114);
              char v147 = v115;
              v144 = v114;
              DisplayList.Item.features.getter((__int16 *)&v317);
              v148 = LOWORD(v317.origin.x);
              v303 = 0uLL;
              v304 = v138;
              *(void *)v305 = v139;
              *(void *)&v305[8] = v142;
              *(void *)&v305[16] = v114;
              *(void *)&v305[24] = v147;
              BYTE2(v306) = BYTE2(v116);
              uint64_t v136 = v236;
              LOWORD(v306) = v116;
              DWORD1(v306) = 0;
              DisplayList.Item.properties.getter(&v317);
              v141 = v148;
              uint64_t v140 = LOBYTE(v317.origin.x);
            }
            else
            {
              outlined copy of GraphicsBlendMode(*(uint64_t *)&v333[8], v333[16]);
              uint64_t v140 = 0;
              v141 = 0;
              unsigned __int8 v142 = v113;
              char v143 = MEMORY[0x263F8EE78];
              v144 = 0xC000000000000000;
            }
            *(void *)&v332[48] = v136;
            *(void *)&v332[56] = v232 | 0x4000000500000000;
            *(void *)&v332[64] = v143;
            v332[74] = v140;
            *(_WORD *)&v332[72] = v141;
            LOBYTE(v303) = v277;
            DisplayList.Item.canonicalize(options:)((char *)&v303);
            outlined consume of DisplayList.Item.Value(v142, v144);
            int v113 = *(void *)&v332[48];
            uint64_t v115 = *(void *)&v332[64];
            char v114 = *(void *)&v332[56];
            long long v116 = *(unsigned __int16 *)&v332[72] | (v332[74] << 16);
            long long v91 = v282;
            uint64_t v137 = v232;
          }
          if (v81 == 1.0)
          {
            v271 = v116;
            v273 = v114;
            *(void *)&v276 = v113;
          }
          else
          {
            v233 = v137;
            v149 = *(_OWORD *)&v332[24];
            v150 = *(void *)&v332[40];
            if (v114 >> 62 != 3
              || (v116 & 0xFFFFFF) != 0
              || v114 != 0xC000000000000000
              || (v151 = v115 | v113, v115 | v113))
            {
              type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
              v153 = swift_allocObject();
              *(_OWORD *)(v153 + 16) = xmmword_2461B9DC0;
              *(void *)(v153 + 32) = 0;
              *(void *)(v153 + 40) = 0;
              *(_OWORD *)(v153 + 48) = v149;
              *(void *)(v153 + 64) = v150;
              *(void *)(v153 + 72) = v113;
              *(void *)(v153 + 80) = v114;
              *(void *)(v153 + 88) = v115;
              *(unsigned char *)(v153 + 98) = BYTE2(v116);
              *(_WORD *)(v153 + 96) = v116;
              *(_DWORD *)(v153 + 100) = 0;
              v303 = 0uLL;
              v304 = v149;
              *(void *)v305 = v150;
              *(void *)&v305[8] = v113;
              *(void *)&v305[16] = v114;
              *(void *)&v305[24] = v115;
              BYTE2(v306) = BYTE2(v116);
              LOWORD(v306) = v116;
              DWORD1(v306) = 0;
              outlined copy of DisplayList.Item.Value(v113, v114);
              v155 = v115;
              v154 = v114;
              DisplayList.Item.features.getter((__int16 *)&v317);
              v152 = LOWORD(v317.origin.x);
              v303 = 0uLL;
              v304 = v149;
              *(void *)v305 = v150;
              *(void *)&v305[8] = v113;
              *(void *)&v305[16] = v114;
              *(void *)&v305[24] = v155;
              BYTE2(v306) = BYTE2(v116);
              LOWORD(v306) = v116;
              DWORD1(v306) = 0;
              DisplayList.Item.properties.getter(&v317);
              v151 = LOBYTE(v317.origin.x);
            }
            else
            {
              v152 = 0;
              v153 = MEMORY[0x263F8EE78];
              v154 = 0xC000000000000000;
            }
            *(void *)&v332[48] = LODWORD(v81);
            *(void *)&v332[56] = 0x4000000400000000;
            *(void *)&v332[64] = v153;
            v332[74] = v151;
            *(_WORD *)&v332[72] = v152;
            LOBYTE(v303) = v277;
            DisplayList.Item.canonicalize(options:)((char *)&v303);
            outlined consume of DisplayList.Item.Value(v113, v154);
            *(void *)&v276 = *(void *)&v332[48];
            uint64_t v115 = *(void *)&v332[64];
            v273 = *(void *)&v332[56];
            v271 = *(unsigned __int16 *)&v332[72] | (v332[74] << 16);
            long long v91 = v282;
            uint64_t v137 = v233;
          }
          v275 = v115;
          int v84 = *(double *)&v332[16];
          int v85 = *(double *)&v332[8];
          CGFloat width = *(double *)&v332[32];
          int v86 = *(void *)&v332[24];
          v241 = *(void *)&v332[40];
          __int16 v5 = *(unsigned int *)&v332[76];
          v156 = static GraphicsBlendMode.normal;
          v157 = byte_26B0EB4A0;
          outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_26B0EB4A0);
          outlined consume of GraphicsBlendMode(v236, v137);
          *(void *)&v333[8] = v156;
          v333[16] = v157;
          *(_DWORD *)&v333[20] = 1065353216;
          v333[24] = 0;
          *(_OWORD *)&v332[48] = xmmword_2461B9DE0;
          *(void *)&v332[64] = 0;
          v332[74] = 0;
          *(_WORD *)&v332[72] = 0;
        }
        *(double *)&v332[8] = y;
        *(double *)&v332[16] = x;
        *(void *)&v332[24] = v82;
        *(double *)&v332[32] = height;
        __int16 v92 = (void *)v334[1];
        __int16 v93 = v334[2];
        CGFloat v94 = v334[3];
        CGFloat v95 = v334[4];
        CGFloat v96 = v335;
        CGFloat v97 = v334[7];
        uint64_t v3 = v334[8];
        if (v335 >> 30)
        {
          if (v335 >> 30 == 1)
          {
            v238 = v2;
            v230 = v334[5];
            v234 = v334[6];
            outlined copy of _ShapeStyle_RenderedLayers.Layers(v334[1], v334[2], v334[3], v334[4], v334[5], v334[6], v334[7], v334[8], v335);
            outlined copy of DisplayList.Item.Value(v276, v273);
            __int16 v5 = (unint64_t)v92;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              __int16 v5 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v92[2] + 1, 1, v92);
            }
            int v99 = *(void *)(v5 + 16);
            uint64_t v98 = *(void *)(v5 + 24);
            if (v99 >= v98 >> 1) {
              __int16 v5 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v98 > 1), v99 + 1, 1, (void *)v5);
            }
            *(void *)(v5 + 16) = v99 + 1;
            CGFloat v100 = (double *)(v5 + 72 * v99);
            v100[4] = v85 - y;
            v100[5] = v84 - x;
            *((void *)v100 + 6) = v86;
            v100[7] = width;
            *((void *)v100 + 8) = v241;
            *((void *)v100 + 9) = v276;
            *((void *)v100 + 10) = v273;
            *((void *)v100 + 11) = v275;
            *((unsigned char *)v100 + 98) = BYTE2(v271);
            *((_WORD *)v100 + 48) = v271;
            *((_DWORD *)v100 + 25) = 0;
            outlined consume of DisplayList.Item.Value(v276, v273);
            outlined consume of _ShapeStyle_RenderedLayers.Layers((uint64_t)v92, v93, v94, v95, v230, v234, v97, v3, v96);
            v334[1] = v5;
            memset(&v334[2], 0, 56);
            unint64_t v68 = 0x40000000;
            char v2 = v238;
            long long v91 = v282;
          }
          else
          {
            *(double *)&v334[1] = v85;
            *(double *)&v334[2] = v84;
            unint64_t v68 = v271 & 0xFFFFFF | (v5 << 32);
            v334[3] = v86;
            *(CGFloat *)&v334[4] = width;
            v334[5] = v241;
            v334[6] = v276;
            v334[7] = v273;
            v334[8] = v275;
          }
        }
        else
        {
          CGFloat height = *(double *)&v334[1] - y;
          unint64_t v64 = *(double *)&v334[2] - x;
          CGFloat y = v85 - y;
          CGFloat x = v84 - x;
          unint64_t v65 = v334[6];
          unint64_t v66 = v334[5];
          type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
          unint64_t v67 = swift_allocObject();
          *(_OWORD *)(v67 + 16) = xmmword_2461BDD50;
          *(double *)(v67 + 32) = height;
          *(double *)(v67 + 40) = v64;
          *(void *)(v67 + 48) = v94;
          *(void *)(v67 + 56) = v95;
          *(void *)(v67 + 64) = v66;
          *(void *)(v67 + 72) = v65;
          *(void *)(v67 + 80) = v97;
          *(void *)(v67 + 88) = v3;
          *(unsigned char *)(v67 + 98) = BYTE2(v96);
          *(_WORD *)(v67 + 96) = v96;
          *(_DWORD *)(v67 + 100) = 0;
          *(double *)(v67 + 104) = y;
          *(double *)(v67 + 112) = x;
          *(void *)(v67 + 120) = v86;
          *(CGFloat *)(v67 + 128) = width;
          *(void *)(v67 + 136) = v241;
          *(void *)(v67 + 144) = v276;
          *(void *)(v67 + 152) = v273;
          *(void *)(v67 + 160) = v275;
          *(unsigned char *)(v67 + 170) = BYTE2(v271);
          *(_WORD *)(v67 + 168) = v271;
          *(_DWORD *)(v67 + 172) = 0;
          v334[1] = v67;
          memset(&v334[2], 0, 56);
          unint64_t v68 = 0x40000000;
        }
        v335 = v68;
        outlined consume of _ShapeStyle_RenderedShape.Shape((void *)v325, *((uint64_t *)&v325 + 1), v326, *((uint64_t *)&v326 + 1), v327, *((uint64_t *)&v327 + 1), v328, *((uint64_t *)&v328 + 1), v329, *((uint64_t *)&v329 + 1), v330, *((uint64_t *)&v330 + 1), *(unsigned int *)v331);
        unsigned int v1 = v270;
        swift_release_n();
        outlined consume of _ShapeStyle_Pack.Style?(v269, v281, (uint64_t)v288, v287, v283, *((uint64_t *)&v276 + 1), v266, v279, v259, v2, v245, v91, v244, v243);
        *(void *)&v325 = v256;
        *((void *)&v325 + 1) = v255;
        *(void *)&v326 = v254;
        *((void *)&v326 + 1) = v253;
        *(void *)&v328 = v252;
        *((void *)&v328 + 1) = v251;
        *(void *)&v329 = v250;
        *((void *)&v329 + 1) = v249;
        *(void *)&v330 = v248;
        *((void *)&v330 + 1) = v247;
        *(_DWORD *)v331 = v246;
        unint64_t v63 = *(_DWORD *)(v270 + 60);
        char v62 = v63;
        *(void *)&v327 = v268;
        *((void *)&v327 + 1) = v263;
        long long v60 = v237;
        swift_beginAccess();
        uint64_t v4 = v240;
      }
      while (*(void *)(*(void *)(v270 + 24) + 16) > v63);
    }
    *(_DWORD *)(v1 + 60) = 0;
  }
  long long v60 = (unint64_t *)v334[2];
  v288 = (char *)v334[3];
  v158 = v334[5];
  v159 = v334[6];
  uint64_t v3 = v334[7];
  v282 = v334[8];
  v287 = (void *)v334[4];
  if (!(v335 >> 30))
  {
    if (v334[7] >> 62 != 3 || v334[7] != 0xC000000000000000 || v334[8] | v334[6] || (v335 & 0xFFFFFF) != 0)
    {
      v278 = HIDWORD(v335);
      v177 = v335;
      v178 = v334[4];
      v179 = v334[1];
      type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
      v180 = v158;
      v158 = v159;
      v181 = swift_allocObject();
      *(_OWORD *)(v181 + 16) = xmmword_2461B9DC0;
      *(void *)(v181 + 32) = v179;
      *(void *)(v181 + 40) = v60;
      *(void *)(v181 + 48) = v288;
      *(void *)(v181 + 56) = v178;
      *(void *)(v181 + 64) = v180;
      *(void *)(v181 + 72) = v158;
      *(void *)(v181 + 80) = v3;
      *(void *)(v181 + 88) = v282;
      *(unsigned char *)(v181 + 98) = BYTE2(v177);
      *(_WORD *)(v181 + 96) = v177;
      *(_DWORD *)(v181 + 100) = v278;
      *(void *)&v303 = v179;
      *((void *)&v303 + 1) = v60;
      *(void *)&v304 = v288;
      *((void *)&v304 + 1) = v178;
      *(void *)v305 = v180;
      *(void *)&v305[8] = v158;
      *(void *)&v305[16] = v3;
      *(void *)&v305[24] = v282;
      BYTE2(v306) = BYTE2(v177);
      LOWORD(v306) = v177;
      DWORD1(v306) = v278;
      outlined copy of DisplayList.Item.Value(v158, v3);
      DisplayList.Item.features.getter((__int16 *)&v317);
      v182 = v158;
      v280 = v158;
      v286 = v180;
      LOWORD(v158) = LOWORD(v317.origin.x);
      *(void *)&v303 = v179;
      *((void *)&v303 + 1) = v60;
      *(void *)&v304 = v288;
      *((void *)&v304 + 1) = v287;
      *(void *)v305 = v180;
      *(void *)&v305[8] = v182;
      *(void *)&v305[16] = v3;
      *(void *)&v305[24] = v282;
      BYTE2(v306) = BYTE2(v177);
      uint64_t v4 = v240;
      LOWORD(v306) = v177;
      DWORD1(v306) = v278;
      DisplayList.Item.properties.getter(&v317);
      outlined consume of _ShapeStyle_RenderedLayers.Layers(v179, (uint64_t)v60, (uint64_t)v288, (uint64_t)v287, v286, v280, v3, v282, v177);
      v162 = v181;
      v163 = 0;
      long long v60 = 0;
      v288 = 0;
      v287 = 0;
      v285 = 0;
      v159 = 0;
      v164 = 0;
      v165 = 0;
      v161 = LOBYTE(v317.origin.x);
    }
    else
    {
      outlined consume of _ShapeStyle_RenderedLayers.Layers(v334[1], v334[2], v334[3], v334[4], v334[5], 0, 0xC000000000000000, 0, v335);
      v163 = 0;
      long long v60 = 0;
      v288 = 0;
      v287 = 0;
      v285 = 0;
      v159 = 0;
      v164 = 0;
      v165 = 0;
      LOWORD(v158) = 0;
      v161 = 0;
      v162 = MEMORY[0x263F8EE78];
    }
LABEL_156:
    v167 = 0x80000000;
    v166 = v229;
    goto LABEL_157;
  }
  if (v335 >> 30 == 1)
  {
    LODWORD(v275) = v335;
    v281 = swift_bridgeObjectRetain();
    DisplayList.init(_:)(v281, (uint64_t)&v317);
    v303 = *(_OWORD *)&v331[8];
    v304 = *(_OWORD *)&v331[24];
    *(void *)v305 = *(void *)&v332[40];
    *(_OWORD *)&v305[8] = xmmword_2461B9DD0;
    *(CGFloat *)&v305[24] = v317.origin.x;
    BYTE2(v306) = BYTE2(v317.origin.y);
    LOWORD(v306) = LOWORD(v317.origin.y);
    DWORD1(v306) = *(_DWORD *)&v332[76];
    LOBYTE(v317.origin.x) = v217;
    DisplayList.Item.canonicalize(options:)((char *)&v317);
    CGFloat y = *((double *)&v303 + 1);
    CGFloat x = *(double *)&v303;
    CGFloat height = *((double *)&v304 + 1);
    CGFloat width = *(double *)&v304;
    int v69 = *(void *)&v305[8];
    __int16 v5 = *(void *)v305;
    LODWORD(v2) = (unsigned __int16)v306 | (BYTE2(v306) << 16);
    LODWORD(v273) = DWORD1(v306);
    v160 = *(void *)&v305[16] >> 62;
    if (*(void *)&v305[16] >> 62 != 3
      || (v2 & 0xFFFFFF) != 0
      || *(void *)&v305[16] != 0xC000000000000000
      || *(void *)&v305[24] | *(void *)&v305[8])
    {
      v279 = v159;
      v283 = v158;
      v276 = *(_OWORD *)&v305[16];
      type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
      v168 = swift_allocObject();
      v169 = *((void *)&v276 + 1);
      v170 = v276;
      *(_OWORD *)(v168 + 16) = xmmword_2461B9DC0;
      *(double *)(v168 + 32) = x;
      *(double *)(v168 + 40) = y;
      *(CGFloat *)(v168 + 48) = width;
      *(double *)(v168 + 56) = height;
      *(void *)(v168 + 64) = v5;
      *(void *)(v168 + 72) = v69;
      *(_OWORD *)(v168 + 80) = v276;
      v171 = WORD1(v2);
      *(unsigned char *)(v168 + 98) = BYTE2(v2);
      *(_WORD *)(v168 + 96) = v2;
      v172 = v160;
      v173 = v273;
      *(_DWORD *)(v168 + 100) = v273;
      v174 = v69;
      LOWORD(v158) = 0;
      v271 = v168;
      switch(v172)
      {
        case 1:
          LODWORD(v268) = WORD1(v2);
          switch(BYTE4(v276))
          {
            case 2:
              outlined copy of DisplayList.Item.Value(v69, v276);
              outlined copy of DisplayList.Item.Value(v69, v276);
              swift_bridgeObjectRelease();
              outlined consume of DisplayList.Effect(v69, v276, 2);
              v174 = v69;
              v183 = (v69 >> 2) & 1;
              break;
            case 3:
              outlined init with copy of AnyTrackedValue(v69 + 16, (uint64_t)&v317);
              v264 = v317.size.height;
              v197 = v318;
              v198 = (void (**)(uint64_t *__return_ptr, void, void *))(v318 + 7);
              __swift_project_boxed_opaque_existential_1(&v317, *(uint64_t *)&v317.size.height);
              v261 = *v198;
              outlined copy of DisplayList.Item.Value(v69, v276);
              outlined copy of DisplayList.Item.Value(v69, v276);
              v261(&v289, *(void *)&v264, v197);
              uint64_t v4 = v240;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v317);
              swift_bridgeObjectRelease();
              outlined consume of DisplayList.Effect(v69, v276, 3);
              v174 = v69;
              LOWORD(v183) = v289;
              break;
            case 7:
              LOWORD(v183) = *(_WORD *)(v69 + 24);
              outlined copy of DisplayList.Item.Value(v69, v276);
              outlined copy of DisplayList.Item.Value(v69, v276);
              swift_bridgeObjectRelease();
              outlined consume of DisplayList.Effect(v69, v276, 7);
              v174 = v69;
              break;
            case 0xA:
              outlined copy of DisplayList.Item.Value(v69, v276);
              outlined copy of DisplayList.Item.Value(v69, v276);
              swift_bridgeObjectRelease();
              outlined consume of DisplayList.Effect(v69, v276, 10);
              v174 = v69;
              LOWORD(v183) = 4;
              break;
            case 0xC:
              outlined copy of DisplayList.Item.Value(v69, v276);
              outlined copy of DisplayList.Item.Value(v69, v276);
              swift_bridgeObjectRelease();
              outlined consume of DisplayList.Effect(v69, v276, 12);
              v174 = v69;
              LOWORD(v183) = 2;
              break;
            case 0xE:
              outlined copy of DisplayList.Item.Value(v69, v276);
              outlined copy of DisplayList.Item.Value(v69, v276);
              swift_bridgeObjectRelease();
              v199 = v69;
              v200 = v276;
              LOBYTE(v201) = 14;
              goto LABEL_143;
            case 0xF:
              outlined copy of DisplayList.Item.Value(v69, v276);
              outlined copy of DisplayList.Item.Value(v69, v276);
              swift_bridgeObjectRelease();
              outlined consume of DisplayList.Effect(v69, v276, 15);
              v174 = v69;
              LOWORD(v183) = 64;
              break;
            case 0x10:
              outlined copy of DisplayList.Item.Value(v69, v276);
              outlined copy of DisplayList.Item.Value(v69, v276);
              swift_bridgeObjectRelease();
              outlined consume of DisplayList.Effect(v69, v276, 16);
              v174 = v69;
              LOWORD(v183) = 32;
              break;
            case 0x11:
              (*(void (**)(CGRect *__return_ptr))(*(void *)v69 + 112))(&v317);
              v262 = LOWORD(v317.origin.x);
              v183 = (unsigned __int16)word_26FA429C8;
              v265 = (void *)v5;
              v202 = (unsigned __int16)word_26FA429CA;
              outlined copy of DisplayList.Item.Value(v69, v276);
              outlined copy of DisplayList.Item.Value(v69, v276);
              swift_bridgeObjectRelease();
              outlined consume of DisplayList.Effect(v69, v276, 17);
              v174 = v69;
              if ((v202 & ~v183) != 0) {
                v203 = v202;
              }
              else {
                v203 = 0;
              }
              __int16 v5 = (unint64_t)v265;
              uint64_t v4 = v240;
              LOWORD(v183) = v262 | v183 | v203;
              break;
            default:
              outlined copy of DisplayList.Item.Value(v69, v276);
              outlined copy of DisplayList.Item.Value(v69, v276);
              swift_bridgeObjectRelease();
              v199 = v69;
              v200 = v276;
              v201 = DWORD1(v276);
LABEL_143:
              outlined consume of DisplayList.Effect(v199, v200, v201);
              v174 = v69;
              LOWORD(v183) = 0;
              break;
          }
          LOWORD(v158) = v183 | v2;
          v169 = *((void *)&v276 + 1);
          v170 = v276;
          v173 = v273;
          goto LABEL_153;
        case 2:
          v184 = *(void *)(v69 + 16);
          if (!v184)
          {
            LOWORD(v158) = 128;
            goto LABEL_119;
          }
          if (v184 == 1)
          {
            v185 = 0;
            LODWORD(v158) = 128;
          }
          else
          {
            v186 = 0;
            v185 = v184 & 0x7FFFFFFFFFFFFFFELL;
            v187 = (unsigned __int16 *)(v69 + 104);
            v188 = 128;
            v189 = v184 & 0x7FFFFFFFFFFFFFFELL;
            do
            {
              v190 = *(v187 - 20);
              v191 = *v187;
              v187 += 40;
              v188 |= v190;
              v186 |= v191;
              v189 -= 2;
            }
            while (v189);
            LODWORD(v158) = v186 | v188;
            if (v184 == v185)
            {
LABEL_119:
              outlined copy of DisplayList.Item.Value(v69, v276);
              v170 = v276;
              v174 = v69;
              v169 = *((void *)&v276 + 1);
              goto LABEL_154;
            }
          }
          v192 = v184 - v185;
          v193 = (unsigned __int16 *)(v69 + 40 * v185 + 64);
          do
          {
            v194 = *v193;
            v193 += 20;
            LODWORD(v158) = v194 | v158;
            --v192;
          }
          while (v192);
          goto LABEL_119;
        case 3:
          goto LABEL_154;
        default:
          LODWORD(v268) = WORD1(v2);
          switch(v69 >> 60)
          {
            case 6uLL:
              outlined init with copy of AnyTrackedValue((v69 & 0xFFFFFFFFFFFFFFFLL) + 16, (uint64_t)&v317);
              v175 = v317.size.height;
              v176 = v318;
              __swift_project_boxed_opaque_existential_1(&v317, *(uint64_t *)&v317.size.height);
              v267 = (void (*)(uint64_t *__return_ptr, void, void *))v176[5];
              outlined copy of DisplayList.Item.Value(v69, v276);
              v267(&v289, *(void *)&v175, v176);
              v173 = v273;
              uint64_t v4 = v240;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v317);
              v170 = v276;
              v174 = v69;
              v169 = *((void *)&v276 + 1);
              LOWORD(v158) = v289;
              goto LABEL_153;
            case 8uLL:
              v195 = *(void *)((v69 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
              if (!*(void *)(v195 + 216)) {
                goto LABEL_128;
              }
              v257 = *(id *)(v195 + 216);
              v260 = *(void *)((v69 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
              outlined copy of DisplayList.Item.Value(v69, v276);
              outlined copy of DisplayList.Item.Value(v69, v276);
              v263 = v69;
              outlined copy of DisplayList.Item.Value(v69, v276);
              swift_retain();
              swift_retain();
              if ((uint64_t)objc_msgSend(v257, sel_length) <= 0) {
                goto LABEL_148;
              }
              if (one-time initialization token for updateSchedule != -1) {
                swift_once();
              }
              v196 = static NSAttributedStringKey.updateSchedule;
              objc_msgSend(v257, sel_length);
              if (!objc_msgSend(v257, sel_attribute_atIndex_effectiveRange_, v196, 0, 0))
              {
                memset(&v317, 0, sizeof(v317));
                outlined destroy of CoordinateSpaceGesture<CGFloat>((uint64_t)&v317, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0]);
                outlined consume of DisplayList.Item.Value(v69, v276);
                swift_release();
                swift_release();
                outlined consume of DisplayList.Item.Value(v69, v276);
                goto LABEL_150;
              }
              _bridgeAnyObjectToAny(_:)();
              swift_unknownObjectRelease();
              outlined destroy of CoordinateSpaceGesture<CGFloat>((uint64_t)&v317, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0]);
              v258 = *(unsigned char *)(v260 + 256);
              outlined consume of DisplayList.Item.Value(v69, v276);
              swift_release();
              swift_release();
              outlined consume of DisplayList.Item.Value(v69, v276);
              v173 = v273;
              if ((v258 & 1) == 0) {
                goto LABEL_151;
              }
              LOWORD(v158) = 8;
              break;
            case 9uLL:
              LOWORD(v158) = *(_WORD *)((v69 & 0xFFFFFFFFFFFFFFFLL) + 0x18) | 0x200;
              outlined copy of DisplayList.Item.Value(v69, v276);
              v170 = v276;
              v174 = v69;
              v169 = *((void *)&v276 + 1);
              goto LABEL_153;
            case 0xBuLL:
              goto LABEL_130;
            case 0xCuLL:
              outlined copy of DisplayList.Item.Value(v69, v276);
              v170 = v276;
              v174 = v69;
LABEL_130:
              outlined copy of DisplayList.Item.Value(v174, v170);
              v170 = v276;
              v174 = v69;
              v169 = *((void *)&v276 + 1);
              LOWORD(v158) = 2;
              goto LABEL_153;
            default:
LABEL_128:
              outlined copy of DisplayList.Item.Value(v69, v276);
              goto LABEL_151;
          }
          goto LABEL_152;
      }
    }
    outlined consume of DisplayList.Item.Value(0, 0xC000000000000000);
    outlined consume of _ShapeStyle_RenderedLayers.Layers(v281, (uint64_t)v60, (uint64_t)v288, (uint64_t)v287, v158, v159, v3, v282, v275);
    v161 = 0;
    LOWORD(v158) = 0;
    v162 = MEMORY[0x263F8EE78];
LABEL_155:
    v163 = 0;
    long long v60 = 0;
    v288 = 0;
    v287 = 0;
    v285 = 0;
    v159 = 0;
    v164 = 0;
    v165 = 0;
    goto LABEL_156;
  }
  v165 = v334[8];
  v164 = v334[7];
  v285 = v334[5];
  LOWORD(v158) = 0;
  v161 = 0;
  v162 = MEMORY[0x263F8EE78];
  v166 = v229;
  v163 = v334[1];
  v167 = v335;
LABEL_157:
  *(void *)&v303 = v162;
  WORD4(v303) = v158;
  BYTE10(v303) = v161;
  AGGraphSetOutputValue();
  outlined consume of _ShapeStyle_RenderedShape.Shape(v166, v4, v228, v218, v227, v226, v225, v224, v223, v222, v221, v220, v219);
  swift_bridgeObjectRelease();
  v314 = *(_OWORD *)&v332[48];
  v315 = *(_OWORD *)&v332[64];
  v316[0] = *(_OWORD *)v333;
  *(_OWORD *)((char *)v316 + 9) = *(_OWORD *)&v333[9];
  v310 = *(_OWORD *)&v331[32];
  v311 = *(_OWORD *)v332;
  v312 = *(_OWORD *)&v332[16];
  v313 = *(_OWORD *)&v332[32];
  v306 = v329;
  v307 = v330;
  v308 = *(_OWORD *)v331;
  v309 = *(_OWORD *)&v331[16];
  v303 = v325;
  v304 = v326;
  *(_OWORD *)v305 = v327;
  *(_OWORD *)&v305[16] = v328;
  outlined release of _ShapeStyle_RenderedShape((uint64_t)&v303);
  swift_release();
  outlined consume of _ShapeStyle_RenderedLayers.Layers(v163, (uint64_t)v60, (uint64_t)v288, (uint64_t)v287, v285, v159, v164, v165, v167);
  swift_release();
  return swift_release();
}

{
  uint64_t *v0;
  uint64_t v1;
  char v2;
  __int16 v3;
  uint64_t *v4;
  unint64_t v5;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  int v10;
  unsigned __int8 *Value;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int v15;
  unint64_t v16;
  int v17;
  int v18;
  unint64_t v19;
  int v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  int v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  int v28;
  unint64_t v29;
  int v30;
  double *v31;
  double v32;
  double v33;
  double *v34;
  double v35;
  double v36;
  uint64_t v37;
  CGFloat v38;
  CGFloat v39;
  BOOL IsNull;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  long long v45;
  long long v46;
  long long v47;
  long long v48;
  unsigned int v49;
  long long v50;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  int v58;
  int v59;
  int v60;
  uint64_t v61;
  __int16 v62;
  char v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  long long v77;
  long long v78;
  unsigned char v79[80];
  long long v80;
  long long v81;
  long long v82;
  long long v83;
  long long v84;
  long long v85;
  long long v86;
  unsigned char v87[25];
  uint64_t v88;
  long long v89;
  long long v90;
  long long v91;
  long long v92;
  uint64_t v93;
  _OWORD v94[16];
  uint64_t v95;
  CGRect v96;
  CGRect v97;
  CGRect v98;

  CGFloat v95 = *MEMORY[0x263EF8340];
  int v10 = *((_DWORD *)v0 + 3);
  type metadata accessor for _ShapeView<Rectangle, ForegroundStyle>();
  uint64_t Value = (unsigned __int8 *)AGGraphGetValue();
  double v12 = *Value;
  double v13 = Value[1];
  if ((v14 & 1) != 0 || !*((_WORD *)v0 + 25))
  {
    uint64_t v16 = ++static DisplayList.Version.lastValue;
  }
  else
  {
    *(void *)&v94[0] = *(uint64_t *)((char *)v0 + 28);
    DWORD2(v94[0]) = v10;
    uint64_t v15 = AGGraphAnyInputsChanged();
    uint64_t v16 = ++static DisplayList.Version.lastValue;
    if (!v15) {
      goto LABEL_9;
    }
  }
  char v17 = (2 * ((33 * (v16 >> 16)) ^ v16)) | 1;
  if (!v16) {
    LOWORD(v17) = 0;
  }
  *((_WORD *)v0 + 25) = v17;
LABEL_9:
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x263F288F8])
  {
    __break(1u);
LABEL_26:
    swift_once();
    goto LABEL_20;
  }
  unsigned int v59 = v13;
  long long v60 = v12;
  int v18 = *((_DWORD *)v0 + 10);
  unint64_t v19 = AGCreateWeakAttribute();
  int v20 = v19;
  long long v57 = HIDWORD(v19);
  int v21 = AGCreateWeakAttribute();
  unint64_t v22 = v21;
  long long v56 = HIDWORD(v21);
  long long v58 = v18;
  int v23 = AGCreateWeakAttribute();
  unint64_t v24 = v23;
  long long v55 = HIDWORD(v23);
  int v25 = AGCreateWeakAttribute();
  unint64_t v26 = v25;
  long long v54 = HIDWORD(v25);
  int v27 = AGCreateWeakAttribute();
  unint64_t v28 = v27;
  long long v53 = HIDWORD(v27);
  int v29 = AGCreateWeakAttribute();
  unint64_t v30 = v29;
  long long v52 = HIDWORD(v29);
  __int16 v5 = v16;
  int v31 = (double *)AGGraphGetValue();
  unint64_t v32 = *v31;
  int v33 = v31[1];
  long long v34 = (double *)AGGraphGetValue();
  double v35 = v32 - *v34;
  double v36 = v33 - v34[1];
  Swift::Double_optional v37 = AGGraphGetValue();
  double v38 = *(double *)v37;
  double v39 = *(double *)(v37 + 8);
  _threadGeometryProxyData();
  unint64_t v64 = v20;
  unint64_t v65 = v57;
  unint64_t v66 = v22;
  unint64_t v67 = v56;
  unint64_t v68 = v24;
  int v69 = v55;
  int v70 = v26;
  int v71 = v54;
  unint64_t v72 = v28;
  char v73 = v53;
  uint64_t v74 = v30;
  uint64_t v4 = &v88;
  __int16 v75 = v52;
  char v76 = v16;
  _setThreadGeometryProxyData();
  v96.origin.CGFloat x = 0.0;
  v96.origin.CGFloat y = 0.0;
  v96.size.CGFloat width = v38;
  v96.size.CGFloat height = v39;
  BOOL IsNull = CGRectIsNull(v96);
  if (IsNull) {
    double v12 = 0;
  }
  else {
    double v12 = *(void *)&v38;
  }
  if (IsNull) {
    double v13 = 0;
  }
  else {
    double v13 = *(void *)&v39;
  }
  if (IsNull) {
    unsigned int v1 = 6;
  }
  else {
    unsigned int v1 = 0;
  }
  _setThreadGeometryProxyData();
  CGFloat v41 = *v0;
  int v89 = 0u;
  long long v90 = 0u;
  long long v91 = 0u;
  __int16 v92 = 0u;
  int v88 = v41;
  __int16 v93 = 0x80000000;
  swift_retain();
  outlined copy of Path.Storage(0, 0, v12, v13, v1);
  v97.origin.CGFloat x = 0.0;
  v97.origin.CGFloat y = 0.0;
  v97.size.CGFloat width = v38;
  v97.size.CGFloat height = v39;
  uint64_t v98 = CGRectOffset(v97, v35, v36);
  CGFloat x = v98.origin.x;
  CGFloat y = v98.origin.y;
  CGFloat width = v98.size.width;
  CGFloat height = v98.size.height;
  LODWORD(v16) = *((_DWORD *)v0 + 2);
  uint64_t v3 = *((_WORD *)v0 + 25);
  char v2 = *((unsigned char *)v0 + 48);
  if (one-time initialization token for normal != -1) {
    goto LABEL_26;
  }
LABEL_20:
  CGFloat v42 = 0x10000;
  if (!v59) {
    CGFloat v42 = 0;
  }
  uint64_t v43 = 256;
  if (!v60) {
    uint64_t v43 = 0;
  }
  int v77 = 0uLL;
  *(void *)&int v78 = v12;
  *((void *)&v78 + 1) = v13;
  *(void *)int v79 = v42 | v43 | v1;
  memset(&v79[8], 0, 60);
  *(_WORD *)&v79[68] = v3;
  *(CGFloat *)&v79[72] = x;
  *(CGFloat *)&int v80 = y;
  *((CGFloat *)&v80 + 1) = width;
  int v81 = *(unint64_t *)&height;
  LODWORD(v82) = 0;
  *((CGFloat *)&v82 + 1) = x;
  *(CGFloat *)&int v83 = y;
  *((CGFloat *)&v83 + 1) = width;
  *(CGFloat *)&int v84 = height;
  int v85 = xmmword_2461B9DE0;
  *((void *)&v84 + 1) = v5;
  *(void *)&int v86 = 0;
  BYTE10(v86) = 0;
  WORD4(v86) = 0;
  HIDWORD(v86) = v16;
  v87[0] = v2;
  *(_DWORD *)&v87[4] = v58;
  *(void *)&v87[8] = static GraphicsBlendMode.normal;
  v87[16] = byte_26B0EB4A0;
  *(_DWORD *)&v87[20] = 1065353216;
  v87[24] = 0;
  LOBYTE(v94[0]) = 0;
  uint64_t v44 = *((unsigned int *)v0 + 4);
  outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_26B0EB4A0);
  _ShapeStyle_RenderedShape.renderItem(name:styles:layers:)((unsigned __int8 *)v94, v44, (uint64_t)&v88);
  LOBYTE(v94[0]) = v2;
  _ShapeStyle_RenderedLayers.commit(shape:options:)((unint64_t)&v77, (char *)v94, (uint64_t)&v61);
  *(void *)&v94[0] = v61;
  WORD4(v94[0]) = v62;
  BYTE10(v94[0]) = v63;
  AGGraphSetOutputValue();
  outlined consume of Path.Storage(0, 0, v12, v13, v1);
  swift_bridgeObjectRelease();
  uint64_t v45 = v86;
  *((_OWORD *)v4 + 17) = v85;
  *((_OWORD *)v4 + 18) = v45;
  *((_OWORD *)v4 + 19) = *(_OWORD *)v87;
  *(_OWORD *)((char *)&v94[14] + 9) = *(_OWORD *)&v87[9];
  v94[8] = v81;
  v94[9] = v82;
  v94[10] = v83;
  v94[11] = v84;
  v94[4] = *(_OWORD *)&v79[32];
  v94[5] = *(_OWORD *)&v79[48];
  v94[6] = *(_OWORD *)&v79[64];
  v94[7] = v80;
  v94[0] = v77;
  v94[1] = v78;
  v94[2] = *(_OWORD *)v79;
  v94[3] = *(_OWORD *)&v79[16];
  outlined release of _ShapeStyle_RenderedShape((uint64_t)v94);
  uint64_t v46 = v89;
  char v47 = v90;
  uint64_t v48 = v91;
  long long v50 = v92;
  long long v49 = v93;
  swift_release();
  return outlined consume of _ShapeStyle_RenderedLayers.Layers(v46, *((uint64_t *)&v46 + 1), v47, *((uint64_t *)&v47 + 1), v48, *((uint64_t *)&v48 + 1), v50, *((uint64_t *)&v50 + 1), v49);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  unint64_t v4;
  __int16 v5;
  uint64_t v6;
  int v7;
  uint64_t Value;
  double x;
  double y;
  double width;
  double height;
  uint64_t v13;
  unint64_t v14;
  char v15;
  int v16;
  unint64_t v17;
  int v18;
  int v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unsigned int v27;
  unint64_t v28;
  int v29;
  unint64_t v30;
  int v31;
  double *v32;
  double v33;
  double v34;
  double *v35;
  double v36;
  double v37;
  uint64_t v38;
  CGFloat v39;
  CGFloat v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v52;
  void *v53;
  void *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  float v62;
  uint64_t v63;
  unint64_t v64;
  double v65;
  double v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  unint64_t v78;
  uint64_t v79;
  void *v80;
  unint64_t v81;
  unint64_t v82;
  double *v83;
  double v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  long long v89;
  int v90;
  long long v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  __int16 x_low;
  uint64_t v96;
  uint64_t v97;
  char v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  CGPoint origin;
  CGSize size;
  BOOL IsNull;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  char v114;
  __int16 v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  long long v120;
  uint64_t v121;
  char v122;
  __int16 v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  long long v127;
  uint64_t v128;
  char v129;
  unint64_t v130;
  __int16 v131;
  uint64_t v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unsigned int v143;
  uint64_t v144;
  uint64_t v145;
  char v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unsigned int v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unsigned int v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  CGFloat v160;
  uint64_t v161;
  void (*v162)(__int16 *__return_ptr, void, uint64_t);
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unsigned int v166;
  unsigned int v167;
  unsigned int v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  unsigned __int16 *v172;
  int v173;
  uint64_t v174;
  int v175;
  int v176;
  uint64_t v177;
  unsigned __int16 *v178;
  int v179;
  uint64_t v180;
  void *v181;
  uint64_t v182;
  char v183;
  uint64_t v184;
  void (*v185)(__int16 *__return_ptr, void, uint64_t);
  uint64_t v186;
  char v187;
  unint64_t v188;
  __int16 v189;
  int v190;
  int v191;
  __int16 v192;
  __int16 v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  unint64_t v197;
  CGFloat v199;
  CGFloat v200;
  CGFloat v201;
  CGFloat v202;
  uint64_t v203;
  char v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  double v208;
  char v209;
  uint64_t *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  double v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  int v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  CGFloat v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  unint64_t v236;
  unint64_t v237;
  unint64_t v238;
  unsigned int v239;
  uint64_t v240;
  unint64_t v241;
  __int16 v242;
  unint64_t v243;
  char v244;
  uint64_t v245;
  unint64_t v246;
  char v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  int v251;
  unint64_t v252;
  uint64_t v253;
  uint64_t v254;
  void *v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  void *v259;
  uint64_t v260;
  uint64_t v261;
  __int16 v262;
  long long v263;
  long long v264;
  unsigned char v265[32];
  long long v266;
  long long v267;
  long long v268;
  long long v269;
  long long v270;
  long long v271;
  long long v272;
  long long v273;
  long long v274;
  long long v275;
  _OWORD v276[2];
  CGRect v277;
  uint64_t v278;
  uint64_t v279;
  unint64_t v280;
  void *v281;
  __int16 v282;
  char v283;
  int v284;
  long long v285;
  long long v286;
  unsigned char v287[112];
  unsigned char v288[80];
  unsigned char v289[25];
  void v290[9];
  unint64_t v291;
  void v292[4];
  unsigned __int8 v293;
  uint64_t v294;
  CGRect v295;
  CGRect v296;
  CGRect v297;

  v294 = *MEMORY[0x263EF8340];
  uint64_t v7 = *((_DWORD *)v0 + 3);
  type metadata accessor for _ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>();
  uint64_t Value = AGGraphGetValue();
  CGFloat x = *(double *)Value;
  CGFloat y = *(double *)(Value + 8);
  CGFloat width = *(double *)(Value + 16);
  CGFloat height = *(double *)(Value + 24);
  double v13 = *(unsigned __int8 *)(Value + 32);
  uint64_t v14 = *(unsigned __int8 *)(Value + 33);
  if ((v15 & 1) != 0 || !*((_WORD *)v0 + 25))
  {
    char v17 = ++static DisplayList.Version.lastValue;
  }
  else
  {
    *(void *)&v285 = *(uint64_t *)((char *)v0 + 28);
    DWORD2(v285) = v7;
    uint64_t v16 = AGGraphAnyInputsChanged();
    char v17 = ++static DisplayList.Version.lastValue;
    if (!v16) {
      goto LABEL_9;
    }
  }
  int v18 = (2 * ((33 * (v17 >> 16)) ^ v17)) | 1;
  if (!v17) {
    LOWORD(v18) = 0;
  }
  *((_WORD *)v0 + 25) = v18;
LABEL_9:
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x263F288F8])
  {
    __break(1u);
LABEL_167:
    swift_once();
    uint64_t v43 = v204;
    goto LABEL_15;
  }
  LODWORD(v259) = v14;
  unint64_t v19 = *((_DWORD *)v0 + 10);
  int v20 = AGCreateWeakAttribute();
  v255 = (void *)v17;
  int v21 = v20;
  v253 = HIDWORD(v20);
  unint64_t v22 = AGCreateWeakAttribute();
  LODWORD(v257) = v13;
  int v23 = v22;
  v252 = HIDWORD(v22);
  LODWORD(v260) = v19;
  unint64_t v24 = AGCreateWeakAttribute();
  int v25 = v24;
  v250 = HIDWORD(v24);
  unint64_t v26 = AGCreateWeakAttribute();
  int v27 = v26;
  v249 = HIDWORD(v26);
  unint64_t v28 = AGCreateWeakAttribute();
  int v29 = v28;
  v248 = HIDWORD(v28);
  unint64_t v30 = AGCreateWeakAttribute();
  int v31 = v30;
  v246 = HIDWORD(v30);
  unint64_t v32 = (double *)AGGraphGetValue();
  int v33 = *v32;
  long long v34 = v32[1];
  double v35 = (double *)AGGraphGetValue();
  double v36 = v33 - *v35;
  Swift::Double_optional v37 = v34 - v35[1];
  double v38 = AGGraphGetValue();
  double v39 = *(double *)v38;
  uint64_t v40 = *(double *)(v38 + 8);
  _threadGeometryProxyData();
  *(void *)&v285 = __PAIR64__(v253, v21);
  *((void *)&v285 + 1) = __PAIR64__(v252, v23);
  *(void *)&v286 = __PAIR64__(v250, v25);
  *((void *)&v286 + 1) = __PAIR64__(v249, v27);
  *(_DWORD *)v287 = v29;
  *(_DWORD *)&v287[4] = v248;
  *(_DWORD *)&v287[8] = v31;
  *(_DWORD *)&v287[12] = v246;
  uint64_t v14 = (unint64_t)v255;
  *(_DWORD *)&v287[16] = v255;
  _setThreadGeometryProxyData();
  specialized Shape.effectivePath(in:)((uint64_t)v292, 0.0, 0.0, *(unint64_t *)&v39, v40, x, y, width, height);
  char v17 = v292[0];
  double v13 = v292[1];
  unsigned int v1 = v292[2];
  char v2 = v292[3];
  CGFloat v41 = 256;
  if (!v257) {
    CGFloat v41 = 0;
  }
  CGFloat v42 = 0x10000;
  if (!v259) {
    CGFloat v42 = 0;
  }
  uint64_t v4 = v42 | v41 | v293;
  _setThreadGeometryProxyData();
  char v6 = *v0;
  memset(&v290[1], 0, 64);
  v290[0] = v6;
  v291 = 0x80000000;
  swift_retain();
  _s7SwiftUI4PathVWOrTm_0((uint64_t)v292, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
  v295.origin.CGFloat x = 0.0;
  v295.origin.CGFloat y = 0.0;
  v295.size.CGFloat width = v39;
  v295.size.CGFloat height = v40;
  v296 = CGRectOffset(v295, v36, v37);
  CGFloat x = v296.origin.x;
  CGFloat y = v296.origin.y;
  CGFloat width = v296.size.width;
  CGFloat height = v296.size.height;
  uint64_t v3 = *((_DWORD *)v0 + 2);
  __int16 v5 = *((_WORD *)v0 + 25);
  uint64_t v43 = *((unsigned char *)v0 + 48);
  v204 = v43;
  if (one-time initialization token for normal != -1) {
    goto LABEL_167;
  }
LABEL_15:
  *(void *)&v285 = v17;
  *((void *)&v285 + 1) = v13;
  *(void *)&v286 = v1;
  *((void *)&v286 + 1) = v2;
  *(void *)v287 = v4;
  memset(&v287[8], 0, 60);
  *(_WORD *)&v287[68] = v5;
  *(double *)&v287[72] = x;
  *(double *)&v287[80] = y;
  *(double *)&v287[88] = width;
  *(double *)&v287[96] = height;
  *(void *)&v287[104] = 0;
  *(_DWORD *)v288 = 0;
  *(double *)&v288[8] = x;
  *(double *)&v288[16] = y;
  *(double *)&v288[24] = width;
  *(double *)&v288[32] = height;
  *(_OWORD *)&v288[48] = xmmword_2461B9DE0;
  *(void *)&v288[40] = v14;
  *(void *)&v288[64] = 0;
  v288[74] = 0;
  *(_WORD *)&v288[72] = 0;
  *(_DWORD *)&v288[76] = v3;
  v289[0] = v43;
  *(_DWORD *)&v289[4] = v260;
  *(void *)&v289[8] = static GraphicsBlendMode.normal;
  v289[16] = byte_26B0EB4A0;
  *(_DWORD *)&v289[20] = 1065353216;
  v289[24] = 0;
  LOBYTE(v263) = 0;
  uint64_t v44 = *((unsigned int *)v0 + 4);
  outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_26B0EB4A0);
  _ShapeStyle_RenderedShape.renderItem(name:styles:layers:)((unsigned __int8 *)&v263, v44, (uint64_t)v290);
  v213 = v6;
  if (v6)
  {
    uint64_t v45 = (uint64_t *)(v6 + 24);
    uint64_t v46 = *(_DWORD *)(v6 + 60);
    char v47 = v46;
    swift_beginAccess();
    if (*(void *)(*(void *)(v6 + 24) + 16) > v46)
    {
      v201 = *(double *)(MEMORY[0x263F001A0] + 8);
      v202 = *MEMORY[0x263F001A0];
      v199 = *(double *)(MEMORY[0x263F001A0] + 24);
      v200 = *(double *)(MEMORY[0x263F001A0] + 16);
      LODWORD(v48) = v46;
      v210 = (uint64_t *)(v6 + 24);
      do
      {
        ++*(_DWORD *)(v6 + 60);
        swift_beginAccess();
        long long v50 = *(void **)(v6 + 24);
        swift_retain();
        uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v6 + 24) = v50;
        if (isUniquelyReferenced_nonNull_native)
        {
          if ((v48 & 0x80000000) != 0) {
            goto LABEL_152;
          }
        }
        else
        {
          long long v50 = specialized _ArrayBuffer._consumeAndCreateNew()(v50);
          *uint64_t v45 = (uint64_t)v50;
          if ((v48 & 0x80000000) != 0)
          {
LABEL_152:
            __break(1u);
LABEL_153:
            __break(1u);
LABEL_154:
            __break(1u);
LABEL_155:
            outlined consume of DisplayList.Item.Value(v1, (unint64_t)v45);
            swift_release();
            swift_release();
            v194 = v1;
            v195 = (unint64_t)v45;
LABEL_157:
            outlined consume of DisplayList.Item.Value(v194, v195);
LABEL_158:
            LOWORD(v143) = 0;
LABEL_159:
            unsigned __int8 v142 = v233;
            v141 = v235;
            uint64_t v137 = v260;
            uint64_t v136 = v248;
            v155 = v249;
            v159 = v4;
LABEL_160:
            v154 = v252;
            v158 = v250;
LABEL_161:
            LOBYTE(v156) = v239;
LABEL_162:
            v277.origin.CGFloat x = x;
            v277.origin.CGFloat y = y;
            v277.size.CGFloat width = width;
            v277.size.CGFloat height = height;
            v278 = v155;
            v279 = v159;
            v280 = v154;
            v281 = v255;
            v283 = v156;
            v282 = v48;
            v284 = v158;
            v196 = v159;
            v197 = v154;
            DisplayList.Item.properties.getter(&v262);
            outlined consume of DisplayList.Item.Value(v196, v197);
            outlined consume of _ShapeStyle_RenderedLayers.Layers((uint64_t)v259, v136, v137, v253, v257, v243, v141, v142, v246);
            float32x4_t v146 = v262;
            char v147 = v240;
            goto LABEL_163;
          }
        }
        if (v50[2] <= v47) {
          goto LABEL_153;
        }
        uint64_t v48 = 224 * v47;
        BYTE4(v50[28 * v47 + 31]) = 1;
        long long v52 = *v45;
        swift_endAccess();
        if (*(void *)(v52 + 16) <= v47) {
          goto LABEL_154;
        }
        long long v53 = (void *)(v52 + v48);
        v251 = *(_DWORD *)(v52 + v48 + 52);
        v257 = *(void *)(v52 + v48 + 64);
        v259 = *(void **)(v52 + v48 + 56);
        long long v54 = *(void **)(v52 + v48 + 72);
        long long v55 = *(void **)(v52 + v48 + 80);
        v253 = v53[11];
        v255 = v54;
        long long v56 = v53[13];
        v252 = v53[12];
        long long v57 = v53[15];
        v260 = v53[14];
        long long v58 = v53[16];
        unsigned int v1 = v53[17];
        long long v60 = v53[18];
        unsigned int v59 = v53[19];
        int64x2_t v61 = v53[20];
        v228 = *((void *)&v285 + 1);
        v229 = v285;
        v226 = *((void *)&v286 + 1);
        v227 = v286;
        v235 = *(void *)v287;
        v231 = *(void *)&v287[8];
        v224 = *(void *)&v287[24];
        v225 = *(void *)&v287[16];
        v222 = *(void *)&v287[40];
        v223 = *(void *)&v287[32];
        v220 = *(void *)&v287[56];
        v221 = *(void *)&v287[48];
        v219 = *(_DWORD *)&v287[64];
        memset(v287, 0, 64);
        v285 = 0u;
        v286 = 0u;
        *(_DWORD *)&v287[64] = 0x800000;
        swift_retain_n();
        v248 = v59;
        v249 = v60;
        outlined copy of _ShapeStyle_Pack.Style?(v259, v257, v255, v55, v253, v252, v56, v260, v57, v58, v1, v60, v59, v61);
        swift_release();
        *(void *)&v287[104] = v6;
        *(_DWORD *)v288 = v251;
        v217 = v61;
        if (v61)
        {
          *(void *)&v263 = v259;
          *((void *)&v263 + 1) = v257;
          *(void *)&v264 = v255;
          *((void *)&v264 + 1) = v55;
          *(void *)v265 = v253;
          *(void *)&v265[8] = v252;
          *(void *)&v265[16] = v56;
          *(void *)&v265[24] = v260;
          *(void *)&v266 = v57;
          *((void *)&v266 + 1) = v58;
          LOBYTE(v267) = v1;
          DWORD1(v267) = HIDWORD(v1);
          *((void *)&v267 + 1) = v60;
          LOBYTE(v268) = v59;
          *((void *)&v268 + 1) = v61;
          _ShapeStyle_RenderedShape.render(style:)((uint64_t)&v263);
        }
        v230 = v57;
        char v62 = *(float *)&v289[20];
        LOBYTE(v239) = (_BYTE)v55;
        v233 = v56;
        v218 = v58;
        if (*(float *)&v289[20] == 0.0
          || (CGFloat y = *(double *)&v287[72],
              CGFloat x = *(double *)&v287[80],
              unint64_t v63 = *(void *)&v287[88],
              CGFloat height = *(double *)&v287[96],
              CGRectIsEmpty(*(CGRect *)&v287[72])))
        {
          outlined consume of DisplayList.Item.Value(*(uint64_t *)&v288[48], *(unint64_t *)&v288[56]);
          *(_OWORD *)&v288[48] = xmmword_2461B9DE0;
          *(void *)&v288[64] = 0;
          v288[74] = 0;
          *(_WORD *)&v288[72] = 0;
          if (*(void *)&v287[104])
          {
            *(void *)&v288[48] = *(void *)&v287[104];
            *(void *)&v288[56] = *(unsigned int *)v288 | 0x4000001100000000;
            *(void *)&v288[64] = MEMORY[0x263F8EE78];
            LOBYTE(v263) = v289[0];
            DisplayList.Item.canonicalize(options:)((char *)&v263);
            *(void *)&v287[104] = 0;
            *(_DWORD *)v288 = 0;
            v250 = *(void *)&v288[48];
            unint64_t v64 = *(void *)&v288[64];
            v240 = *(unsigned __int16 *)&v288[72] | (v288[74] << 16);
            v243 = *(void *)&v288[56];
          }
          else
          {
            unint64_t v64 = 0;
            v250 = 0;
            v240 = 0;
            v243 = 0xC000000000000000;
          }
          v246 = v64;
          unint64_t v65 = *(double *)&v288[16];
          unint64_t v66 = *(double *)&v288[8];
          CGFloat width = *(double *)&v288[32];
          unint64_t v67 = *(void *)&v288[24];
          v214 = *(void *)&v288[40];
          unint64_t v68 = *(unsigned int *)&v288[76];
          int v69 = static GraphicsBlendMode.normal;
          int v70 = byte_26B0EB4A0;
          int v71 = *(void *)&v289[8];
          unint64_t v72 = v289[16];
          outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_26B0EB4A0);
          outlined consume of GraphicsBlendMode(v71, v72);
          *(void *)&v289[8] = v69;
          v289[16] = v70;
          *(_DWORD *)&v289[20] = 1065353216;
          v289[24] = 0;
          *(_OWORD *)&v288[48] = xmmword_2461B9DE0;
          *(void *)&v288[64] = 0;
          v288[74] = 0;
          *(_WORD *)&v288[72] = 0;
          CGFloat y = *(double *)&v287[72];
          CGFloat x = *(double *)&v287[80];
          unint64_t v63 = *(void *)&v287[88];
          CGFloat height = *(double *)&v287[96];
          char v73 = v260;
        }
        else
        {
          v247 = v289[0];
          LOBYTE(v263) = v289[0];
          DisplayList.Item.canonicalize(options:)((char *)&v263);
          int v87 = *(void *)&v287[104];
          v212 = v1;
          if (*(void *)&v287[104])
          {
            int v88 = *(unsigned int *)v288;
            int v89 = *(_OWORD *)&v288[56];
            long long v90 = *(unsigned __int16 *)&v288[72] | (v288[74] << 16);
            long long v91 = *(_OWORD *)&v288[24];
            __int16 v92 = *(void *)&v288[48];
            __int16 v93 = *(void *)&v288[40];
            if (*(void *)&v288[56] >> 62 != 3
              || (v90 & 0xFFFFFF) != 0
              || *(void *)&v288[56] != 0xC000000000000000
              || *(void *)&v288[64] | *(void *)&v288[48])
            {
              type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
              CGFloat v96 = swift_allocObject();
              *(_OWORD *)(v96 + 16) = xmmword_2461B9DC0;
              *(void *)(v96 + 32) = 0;
              *(void *)(v96 + 40) = 0;
              *(_OWORD *)(v96 + 48) = v91;
              *(void *)(v96 + 64) = v93;
              *(void *)(v96 + 72) = v92;
              *(_OWORD *)(v96 + 80) = v89;
              *(unsigned char *)(v96 + 98) = BYTE2(v90);
              *(_WORD *)(v96 + 96) = v90;
              *(_DWORD *)(v96 + 100) = 0;
              v263 = 0uLL;
              v264 = v91;
              *(void *)v265 = v93;
              *(void *)&v265[8] = v92;
              *(_OWORD *)&v265[16] = v89;
              BYTE2(v266) = BYTE2(v90);
              LOWORD(v266) = v90;
              DWORD1(v266) = 0;
              swift_retain();
              outlined copy of DisplayList.Item.Value(v92, v89);
              DisplayList.Item.features.getter((__int16 *)&v277);
              CGFloat v97 = v93;
              x_low = LOWORD(v277.origin.x);
              v263 = 0uLL;
              v264 = v91;
              *(void *)v265 = v97;
              *(void *)&v265[8] = v92;
              *(_OWORD *)&v265[16] = v89;
              BYTE2(v266) = BYTE2(v90);
              LOWORD(v266) = v90;
              DWORD1(v266) = 0;
              DisplayList.Item.properties.getter(&v277);
              CGFloat v94 = LOBYTE(v277.origin.x);
            }
            else
            {
              swift_retain();
              CGFloat v94 = 0;
              x_low = 0;
              CGFloat v96 = MEMORY[0x263F8EE78];
            }
            *(void *)&v288[48] = v87;
            *(void *)&v288[56] = v88 | 0x4000001100000000;
            *(void *)&v288[64] = v96;
            v288[74] = v94;
            *(_WORD *)&v288[72] = x_low;
            LOBYTE(v263) = v247;
            DisplayList.Item.canonicalize(options:)((char *)&v263);
            outlined consume of DisplayList.Item.Value(v92, v89);
            swift_release();
            *(void *)&v287[104] = 0;
            *(_DWORD *)v288 = 0;
            unsigned int v1 = v212;
          }
          uint64_t v98 = v289[24];
          int v99 = *(void *)&v288[48];
          CGFloat v101 = *(void *)&v288[64];
          CGFloat v100 = *(void *)&v288[56];
          CGFloat v102 = *(unsigned __int16 *)&v288[72] | (v288[74] << 16);
          if (v289[24])
          {
            if (*(void *)&v288[56] >> 62 != 3
              || (v102 & 0xFFFFFF) != 0
              || *(void *)&v288[56] != 0xC000000000000000
              || *(void *)&v288[64] | *(void *)&v288[48])
            {
              v241 = *(unsigned __int16 *)&v287[68];
              v244 = v289[24];
              v277.origin.CGFloat x = v202;
              v277.origin.CGFloat y = v201;
              v277.size.CGFloat width = v200;
              v277.size.CGFloat height = v199;
              CGFloat v103 = *(void *)&v288[40];
              v215 = *(double *)&v288[8];
              v263 = *(_OWORD *)&v288[8];
              v206 = *(void *)&v288[24];
              v208 = *(double *)&v288[16];
              v264 = *(_OWORD *)&v288[24];
              v203 = *(void *)&v288[32];
              *(_OWORD *)v265 = *(_OWORD *)&v288[40];
              *(_OWORD *)&v265[16] = *(_OWORD *)&v288[56];
              BYTE2(v266) = v288[74];
              LOWORD(v266) = *(_WORD *)&v288[72];
              DWORD1(v266) = *(_DWORD *)&v288[76];
              unint64_t v104 = *(unsigned __int16 *)&v288[72] | (v288[74] << 16);
              DisplayList.Item.addExtent(to:)(&v277.origin.x);
              origin = v277.origin;
              uint64_t size = v277.size;
              BOOL IsNull = CGRectIsNull(v277);
              int v108 = 0.0;
              if (IsNull) {
                char v109 = 0.0;
              }
              else {
                char v109 = origin.x;
              }
              if (IsNull) {
                int v110 = 0.0;
              }
              else {
                int v110 = origin.y;
              }
              if (IsNull) {
                uint64_t v111 = 0.0;
              }
              else {
                uint64_t v111 = size.width;
              }
              if (!IsNull) {
                int v108 = size.height;
              }
              v297 = CGRectIntegral(*(CGRect *)(&v108 - 3));
              char v112 = v297.origin.x;
              int v113 = v297.origin.y;
              *(CGRect *)&v288[8] = v297;
              if (v100 >> 62 != 3 || (v104 & 0xFFFFFF) != 0 || v100 != 0xC000000000000000 || v101 | v99)
              {
                type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
                long long v116 = swift_allocObject();
                *(_OWORD *)(v116 + 16) = xmmword_2461B9DC0;
                *(void *)(v116 + 32) = 0;
                *(void *)(v116 + 40) = 0;
                *(void *)(v116 + 48) = v206;
                *(void *)(v116 + 56) = v203;
                *(void *)(v116 + 64) = v103;
                *(void *)(v116 + 72) = v99;
                *(void *)(v116 + 80) = v100;
                *(void *)(v116 + 88) = v101;
                *(unsigned char *)(v116 + 98) = BYTE2(v102);
                *(_WORD *)(v116 + 96) = v104;
                *(_DWORD *)(v116 + 100) = 0;
                v263 = 0uLL;
                *(void *)&v264 = v206;
                *((void *)&v264 + 1) = v203;
                *(void *)v265 = v103;
                *(void *)&v265[8] = v99;
                *(void *)&v265[16] = v100;
                *(void *)&v265[24] = v101;
                BYTE2(v266) = BYTE2(v102);
                LOWORD(v266) = v104;
                DWORD1(v266) = 0;
                outlined copy of DisplayList.Item.Value(v99, v100);
                DisplayList.Item.features.getter(&v262);
                uint64_t v115 = v262;
                v263 = 0uLL;
                *(void *)&v264 = v206;
                *((void *)&v264 + 1) = v203;
                *(void *)v265 = v103;
                *(void *)&v265[8] = v99;
                *(void *)&v265[16] = v100;
                *(void *)&v265[24] = v101;
                BYTE2(v266) = BYTE2(v102);
                LOWORD(v266) = v104;
                DWORD1(v266) = 0;
                DisplayList.Item.properties.getter(&v262);
                char v114 = v262;
              }
              else
              {
                outlined copy of DisplayList.Item.Value(0, 0xC000000000000000);
                char v114 = 0;
                uint64_t v115 = 0;
                long long v116 = MEMORY[0x263F8EE78];
              }
              long long v117 = swift_allocObject();
              *(void *)(v117 + 16) = v116;
              *(_WORD *)(v117 + 24) = v115;
              *(unsigned char *)(v117 + 26) = v114;
              *(double *)(v117 + 32) = v112 - v215;
              *(double *)(v117 + 40) = v113 - v208;
              *(unsigned char *)(v117 + 48) = 0;
              *(_DWORD *)(v117 + 52) = 0;
              *(unsigned char *)(v117 + 56) = 1;
              *(_DWORD *)(v117 + 60) = 161;
              *(unsigned char *)(v117 + 64) = 3;
              outlined consume of DisplayList.Item.Value(v99, v100);
              CGFloat v101 = 0;
              int v99 = v117 | 0x9000000000000000;
              *(void *)&v288[48] = v117 | 0x9000000000000000;
              CGFloat v100 = v241;
              *(_OWORD *)&v288[56] = v241;
              v288[74] = 0;
              *(_WORD *)&v288[72] = 0;
              unsigned int v1 = v212;
              uint64_t v98 = v244;
            }
            else
            {
              CGFloat v100 = 0xC000000000000000;
            }
            CGFloat v102 = 0;
            v289[24] = v98 & 0xFE;
          }
          v250 = v99;
          long long v118 = *(void *)&v289[8];
          long long v119 = v289[16];
          v209 = v289[16];
          if ((v289[16] & 1) != 0 || *(_DWORD *)&v289[8])
          {
            uint64_t v120 = *(_OWORD *)&v288[24];
            uint64_t v121 = *(void *)&v288[40];
            if (v100 >> 62 != 3 || (v102 & 0xFFFFFF) != 0 || v100 != 0xC000000000000000 || v101 | v250)
            {
              type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
              long long v124 = swift_allocObject();
              *(_OWORD *)(v124 + 16) = xmmword_2461B9DC0;
              *(void *)(v124 + 32) = 0;
              *(void *)(v124 + 40) = 0;
              *(_OWORD *)(v124 + 48) = v120;
              *(void *)(v124 + 64) = v121;
              uint64_t v126 = v121;
              v245 = v121;
              long long v125 = v250;
              *(void *)(v124 + 72) = v250;
              *(void *)(v124 + 80) = v100;
              *(void *)(v124 + 88) = v101;
              *(unsigned char *)(v124 + 98) = BYTE2(v102);
              *(_WORD *)(v124 + 96) = v102;
              *(_DWORD *)(v124 + 100) = 0;
              v263 = 0uLL;
              v264 = v120;
              *(void *)v265 = v126;
              *(void *)&v265[8] = v250;
              *(void *)&v265[16] = v100;
              *(void *)&v265[24] = v101;
              BYTE2(v266) = BYTE2(v102);
              LOWORD(v266) = v102;
              DWORD1(v266) = 0;
              outlined copy of GraphicsBlendMode(v118, v119);
              outlined copy of DisplayList.Item.Value(v250, v100);
              DisplayList.Item.features.getter((__int16 *)&v277);
              v242 = LOWORD(v277.origin.x);
              v263 = 0uLL;
              v264 = v120;
              *(void *)v265 = v245;
              *(void *)&v265[8] = v250;
              *(void *)&v265[16] = v100;
              *(void *)&v265[24] = v101;
              BYTE2(v266) = BYTE2(v102);
              unsigned int v1 = v212;
              LOWORD(v266) = v102;
              DWORD1(v266) = 0;
              DisplayList.Item.properties.getter(&v277);
              long long v123 = v242;
              int v122 = LOBYTE(v277.origin.x);
            }
            else
            {
              outlined copy of GraphicsBlendMode(*(uint64_t *)&v289[8], v289[16]);
              int v122 = 0;
              long long v123 = 0;
              long long v124 = MEMORY[0x263F8EE78];
              long long v125 = v250;
            }
            *(void *)&v288[48] = v118;
            *(void *)&v288[56] = v119 | 0x4000000500000000;
            *(void *)&v288[64] = v124;
            v288[74] = v122;
            *(_WORD *)&v288[72] = v123;
            LOBYTE(v263) = v247;
            DisplayList.Item.canonicalize(options:)((char *)&v263);
            outlined consume of DisplayList.Item.Value(v125, v100);
            v250 = *(void *)&v288[48];
            CGFloat v101 = *(void *)&v288[64];
            CGFloat v100 = *(void *)&v288[56];
            CGFloat v102 = *(unsigned __int16 *)&v288[72] | (v288[74] << 16);
          }
          if (v62 == 1.0)
          {
            v240 = v102;
            v243 = v100;
            char v73 = v260;
          }
          else
          {
            v216 = v118;
            CGRect v127 = *(_OWORD *)&v288[24];
            CGRect v128 = *(void *)&v288[40];
            if (v100 >> 62 != 3
              || (v102 & 0xFFFFFF) != 0
              || v100 != 0xC000000000000000
              || (CGRect v129 = v101 | v250, v101 | v250))
            {
              type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
              uint64_t v132 = swift_allocObject();
              *(_OWORD *)(v132 + 16) = xmmword_2461B9DC0;
              *(void *)(v132 + 32) = 0;
              *(void *)(v132 + 40) = 0;
              *(_OWORD *)(v132 + 48) = v127;
              *(void *)(v132 + 64) = v128;
              *(void *)(v132 + 72) = v250;
              *(void *)(v132 + 80) = v100;
              *(void *)(v132 + 88) = v101;
              *(unsigned char *)(v132 + 98) = BYTE2(v102);
              *(_WORD *)(v132 + 96) = v102;
              *(_DWORD *)(v132 + 100) = 0;
              v263 = 0uLL;
              v264 = v127;
              *(void *)v265 = v128;
              *(void *)&v265[8] = v250;
              *(void *)&v265[16] = v100;
              *(void *)&v265[24] = v101;
              BYTE2(v266) = BYTE2(v102);
              LOWORD(v266) = v102;
              DWORD1(v266) = 0;
              outlined copy of DisplayList.Item.Value(v250, v100);
              DisplayList.Item.features.getter((__int16 *)&v277);
              CGRect v130 = v100;
              char v131 = LOWORD(v277.origin.x);
              v263 = 0uLL;
              v264 = v127;
              *(void *)v265 = v128;
              *(void *)&v265[8] = v250;
              *(void *)&v265[16] = v130;
              *(void *)&v265[24] = v101;
              BYTE2(v266) = BYTE2(v102);
              unsigned int v1 = v212;
              LOWORD(v266) = v102;
              DWORD1(v266) = 0;
              DisplayList.Item.properties.getter(&v277);
              CGRect v129 = LOBYTE(v277.origin.x);
              char v73 = v260;
            }
            else
            {
              CGRect v130 = 0xC000000000000000;
              char v131 = 0;
              uint64_t v132 = MEMORY[0x263F8EE78];
              char v73 = v260;
            }
            *(void *)&v288[48] = LODWORD(v62);
            *(void *)&v288[56] = 0x4000000400000000;
            *(void *)&v288[64] = v132;
            v288[74] = v129;
            *(_WORD *)&v288[72] = v131;
            LOBYTE(v263) = v247;
            DisplayList.Item.canonicalize(options:)((char *)&v263);
            outlined consume of DisplayList.Item.Value(v250, v130);
            v250 = *(void *)&v288[48];
            CGFloat v101 = *(void *)&v288[64];
            v240 = *(unsigned __int16 *)&v288[72] | (v288[74] << 16);
            v243 = *(void *)&v288[56];
            long long v118 = v216;
          }
          v246 = v101;
          unint64_t v65 = *(double *)&v288[16];
          unint64_t v66 = *(double *)&v288[8];
          CGFloat width = *(double *)&v288[32];
          unint64_t v67 = *(void *)&v288[24];
          v214 = *(void *)&v288[40];
          unint64_t v68 = *(unsigned int *)&v288[76];
          uint64_t v133 = static GraphicsBlendMode.normal;
          uint64_t v134 = byte_26B0EB4A0;
          outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_26B0EB4A0);
          outlined consume of GraphicsBlendMode(v118, v209);
          *(void *)&v289[8] = v133;
          v289[16] = v134;
          *(_DWORD *)&v289[20] = 1065353216;
          v289[24] = 0;
          *(_OWORD *)&v288[48] = xmmword_2461B9DE0;
          *(void *)&v288[64] = 0;
          v288[74] = 0;
          *(_WORD *)&v288[72] = 0;
        }
        *(double *)&v288[8] = y;
        *(double *)&v288[16] = x;
        *(void *)&v288[24] = v63;
        *(double *)&v288[32] = height;
        uint64_t v74 = (void *)v290[1];
        uint64_t v4 = v290[2];
        __int16 v75 = v290[3];
        char v76 = v290[4];
        int v77 = v291;
        int v78 = v290[7];
        int v79 = v290[8];
        if (v291 >> 30)
        {
          if (v291 >> 30 == 1)
          {
            v211 = v1;
            v205 = v290[5];
            v207 = v290[6];
            outlined copy of _ShapeStyle_RenderedLayers.Layers(v290[1], v290[2], v290[3], v290[4], v290[5], v290[6], v290[7], v290[8], v291);
            outlined copy of DisplayList.Item.Value(v250, v243);
            int v80 = v74;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              int v80 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v74[2] + 1, 1, v74);
            }
            int v82 = v80[2];
            int v81 = v80[3];
            if (v82 >= v81 >> 1) {
              int v80 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v81 > 1), v82 + 1, 1, v80);
            }
            v80[2] = v82 + 1;
            int v83 = (double *)&v80[9 * v82];
            v83[4] = v66 - y;
            v83[5] = v65 - x;
            *((void *)v83 + 6) = v67;
            v83[7] = width;
            *((void *)v83 + 8) = v214;
            *((void *)v83 + 9) = v250;
            *((void *)v83 + 10) = v243;
            *((void *)v83 + 11) = v246;
            *((unsigned char *)v83 + 98) = BYTE2(v240);
            *((_WORD *)v83 + 48) = v240;
            *((_DWORD *)v83 + 25) = 0;
            outlined consume of DisplayList.Item.Value(v250, v243);
            outlined consume of _ShapeStyle_RenderedLayers.Layers((uint64_t)v74, v4, v75, v76, v205, v207, v78, v79, v77);
            v290[1] = v80;
            memset(&v290[2], 0, 56);
            long long v49 = 0x40000000;
            unsigned int v1 = v211;
            char v6 = v213;
            char v73 = v260;
            goto LABEL_20;
          }
          *(double *)&v290[1] = v66;
          *(double *)&v290[2] = v65;
          long long v49 = v240 & 0xFFFFFF | (v68 << 32);
          v290[3] = v67;
          *(double *)&v290[4] = width;
          v290[5] = v214;
          v290[6] = v250;
          v290[7] = v243;
          v290[8] = v246;
        }
        else
        {
          CGFloat height = *(double *)&v290[1] - y;
          int v84 = *(double *)&v290[2] - x;
          CGFloat y = v66 - y;
          CGFloat x = v65 - x;
          int v85 = v290[6];
          uint64_t v4 = v290[5];
          type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
          int v86 = swift_allocObject();
          *(_OWORD *)(v86 + 16) = xmmword_2461BDD50;
          *(double *)(v86 + 32) = height;
          *(double *)(v86 + 40) = v84;
          *(void *)(v86 + 48) = v75;
          *(void *)(v86 + 56) = v76;
          *(void *)(v86 + 64) = v4;
          *(void *)(v86 + 72) = v85;
          *(void *)(v86 + 80) = v78;
          *(void *)(v86 + 88) = v79;
          *(unsigned char *)(v86 + 98) = BYTE2(v77);
          *(_WORD *)(v86 + 96) = v77;
          *(_DWORD *)(v86 + 100) = 0;
          *(double *)(v86 + 104) = y;
          *(double *)(v86 + 112) = x;
          *(void *)(v86 + 120) = v67;
          *(double *)(v86 + 128) = width;
          *(void *)(v86 + 136) = v214;
          *(void *)(v86 + 144) = v250;
          *(void *)(v86 + 152) = v243;
          *(void *)(v86 + 160) = v246;
          *(unsigned char *)(v86 + 170) = BYTE2(v240);
          *(_WORD *)(v86 + 168) = v240;
          *(_DWORD *)(v86 + 172) = 0;
          v290[1] = v86;
          memset(&v290[2], 0, 56);
          long long v49 = 0x40000000;
        }
        char v6 = v213;
LABEL_20:
        v291 = v49;
        outlined consume of _ShapeStyle_RenderedShape.Shape((void *)v285, *((uint64_t *)&v285 + 1), v286, *((uint64_t *)&v286 + 1), v287[0], *(uint64_t *)&v287[8], *(unint64_t *)&v287[16], *(uint64_t *)&v287[24], *(uint64_t *)&v287[32], *(uint64_t *)&v287[40], *(uint64_t *)&v287[48], *(uint64_t *)&v287[56], *(unsigned int *)&v287[64]);
        swift_release_n();
        outlined consume of _ShapeStyle_Pack.Style?((uint64_t)v259, v257, (uint64_t)v255, v239, v253, v252, v233, v73, v230, v218, v1, v249, v248, v217);
        *(void *)&v285 = v229;
        *((void *)&v285 + 1) = v228;
        *(void *)&v286 = v227;
        *((void *)&v286 + 1) = v226;
        *(void *)&v287[16] = v225;
        *(void *)&v287[24] = v224;
        *(void *)&v287[32] = v223;
        *(void *)&v287[40] = v222;
        *(void *)&v287[48] = v221;
        *(void *)&v287[56] = v220;
        *(_DWORD *)&v287[64] = v219;
        LODWORD(v48) = *(_DWORD *)(v6 + 60);
        char v47 = (int)v48;
        *(void *)v287 = v235;
        *(void *)&v287[8] = v231;
        uint64_t v45 = v210;
        swift_beginAccess();
      }
      while (*(void *)(*(void *)(v6 + 24) + 16) > (int)v48);
    }
    *(_DWORD *)(v6 + 60) = 0;
  }
  char v135 = v290[1];
  uint64_t v136 = v290[2];
  uint64_t v137 = v290[3];
  uint64_t v138 = v290[4];
  __int16 v139 = v290[5];
  uint64_t v140 = v290[6];
  v141 = v290[7];
  unsigned __int8 v142 = v290[8];
  char v143 = v291;
  if (!(v291 >> 30))
  {
    if (v290[7] >> 62 != 3 || v290[7] != 0xC000000000000000 || v290[8] | v290[6] || (v291 & 0xFFFFFF) != 0)
    {
      v256 = HIDWORD(v291);
      type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
      char v147 = swift_allocObject();
      *(_OWORD *)(v147 + 16) = xmmword_2461B9DC0;
      *(void *)(v147 + 32) = v135;
      *(void *)(v147 + 40) = v136;
      *(void *)(v147 + 48) = v137;
      *(void *)(v147 + 56) = v138;
      *(void *)(v147 + 64) = v139;
      *(void *)(v147 + 72) = v140;
      *(void *)(v147 + 80) = v141;
      *(void *)(v147 + 88) = v142;
      v254 = v138;
      v163 = v139;
      v164 = v140;
      v165 = v136;
      v258 = v163;
      v166 = HIWORD(v143);
      *(unsigned char *)(v147 + 98) = BYTE2(v143);
      *(_WORD *)(v147 + 96) = v143;
      *(_DWORD *)(v147 + 100) = v256;
      *(void *)&v263 = v135;
      *((void *)&v263 + 1) = v165;
      *(void *)&v264 = v137;
      *((void *)&v264 + 1) = v138;
      *(void *)v265 = v163;
      *(void *)&v265[8] = v164;
      *(void *)&v265[16] = v141;
      *(void *)&v265[24] = v142;
      BYTE2(v266) = BYTE2(v143);
      LOWORD(v266) = v143;
      DWORD1(v266) = v256;
      outlined copy of DisplayList.Item.Value(v164, v141);
      DisplayList.Item.features.getter((__int16 *)&v277);
      v167 = v143;
      LOWORD(v143) = LOWORD(v277.origin.x);
      *(void *)&v263 = v135;
      *((void *)&v263 + 1) = v165;
      *(void *)&v264 = v137;
      *((void *)&v264 + 1) = v254;
      *(void *)v265 = v258;
      *(void *)&v265[8] = v164;
      *(void *)&v265[16] = v141;
      *(void *)&v265[24] = v142;
      BYTE2(v266) = v166;
      LOWORD(v266) = v167;
      DWORD1(v266) = v256;
      DisplayList.Item.properties.getter(&v277);
      outlined consume of _ShapeStyle_RenderedLayers.Layers(v135, v165, v137, v254, v258, v164, v141, v142, v167);
      char v135 = 0;
      v148 = 0;
      v261 = 0;
      v149 = 0;
      v150 = 0;
      v151 = 0;
      v141 = 0;
      unsigned __int8 v142 = 0;
      float32x4_t v146 = LOBYTE(v277.origin.x);
    }
    else
    {
      outlined consume of _ShapeStyle_RenderedLayers.Layers(v290[1], v290[2], v290[3], v290[4], v290[5], 0, 0xC000000000000000, 0, v291);
      char v135 = 0;
      v148 = 0;
      v261 = 0;
      v149 = 0;
      v150 = 0;
      v151 = 0;
      v141 = 0;
      unsigned __int8 v142 = 0;
      LOWORD(v143) = 0;
      float32x4_t v146 = 0;
      char v147 = MEMORY[0x263F8EE78];
    }
LABEL_164:
    v152 = 0x80000000;
    goto LABEL_165;
  }
  if (v291 >> 30 == 1)
  {
    v257 = v290[5];
    v144 = swift_bridgeObjectRetain();
    v259 = (void *)v135;
    DisplayList.init(_:)(v144, (uint64_t)&v277);
    v263 = *(_OWORD *)&v287[72];
    v264 = *(_OWORD *)&v287[88];
    *(void *)v265 = *(void *)&v288[40];
    *(_OWORD *)&v265[8] = xmmword_2461B9DD0;
    *(CGFloat *)&v265[24] = v277.origin.x;
    BYTE2(v266) = BYTE2(v277.origin.y);
    LOWORD(v266) = LOWORD(v277.origin.y);
    DWORD1(v266) = *(_DWORD *)&v288[76];
    LOBYTE(v277.origin.x) = v204;
    DisplayList.Item.canonicalize(options:)((char *)&v277);
    CGFloat y = *((double *)&v263 + 1);
    CGFloat x = *(double *)&v263;
    CGFloat height = *((double *)&v264 + 1);
    CGFloat width = *(double *)&v264;
    uint64_t v4 = *(void *)&v265[8];
    v249 = *(void *)v265;
    v255 = *(void **)&v265[24];
    LODWORD(v48) = (unsigned __int16)v266 | (BYTE2(v266) << 16);
    LODWORD(v250) = DWORD1(v266);
    char v145 = *(void *)&v265[16] >> 62;
    if (*(void *)&v265[16] >> 62 != 3
      || (v48 & 0xFFFFFF) != 0
      || *(void *)&v265[16] != 0xC000000000000000
      || *(void *)&v265[24] | *(void *)&v265[8])
    {
      v253 = v138;
      v243 = v140;
      LODWORD(v246) = v143;
      v252 = *(void *)&v265[16];
      type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
      v153 = swift_allocObject();
      v154 = v252;
      *(_OWORD *)(v153 + 16) = xmmword_2461B9DC0;
      *(double *)(v153 + 32) = x;
      *(double *)(v153 + 40) = y;
      *(double *)(v153 + 48) = width;
      *(double *)(v153 + 56) = height;
      v155 = v249;
      *(void *)(v153 + 64) = v249;
      *(void *)(v153 + 72) = v4;
      *(void *)(v153 + 80) = v252;
      *(void *)(v153 + 88) = v255;
      v156 = WORD1(v48);
      *(unsigned char *)(v153 + 98) = BYTE2(v48);
      *(_WORD *)(v153 + 96) = v48;
      v157 = v145;
      v158 = v250;
      *(_DWORD *)(v153 + 100) = v250;
      v159 = v4;
      LOWORD(v143) = 0;
      v240 = v153;
      switch(v157)
      {
        case 1:
          v239 = WORD1(v48);
          switch(BYTE4(v252))
          {
            case 2:
              outlined copy of DisplayList.Item.Value(v4, v252);
              outlined copy of DisplayList.Item.Value(v4, v252);
              swift_bridgeObjectRelease();
              outlined consume of DisplayList.Effect(v4, v252, 2);
              v159 = v4;
              v168 = (v4 >> 2) & 1;
              break;
            case 3:
              outlined init with copy of AnyTrackedValue(v4 + 16, (uint64_t)&v277);
              v232 = v277.size.height;
              v184 = v278;
              __swift_project_boxed_opaque_existential_1(&v277, *(uint64_t *)&v277.size.height);
              v237 = v141;
              v185 = *(void (**)(__int16 *__return_ptr, void, uint64_t))(v184 + 56);
              outlined copy of DisplayList.Item.Value(v4, v252);
              outlined copy of DisplayList.Item.Value(v4, v252);
              v185(&v262, *(void *)&v232, v184);
              v155 = v249;
              v141 = v237;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v277);
              swift_bridgeObjectRelease();
              outlined consume of DisplayList.Effect(v4, v252, 3);
              v159 = v4;
              LOWORD(v168) = v262;
              break;
            case 7:
              LOWORD(v168) = *(_WORD *)(v4 + 24);
              outlined copy of DisplayList.Item.Value(v4, v252);
              outlined copy of DisplayList.Item.Value(v4, v252);
              swift_bridgeObjectRelease();
              outlined consume of DisplayList.Effect(v4, v252, 7);
              v159 = v4;
              break;
            case 0xA:
              outlined copy of DisplayList.Item.Value(v4, v252);
              outlined copy of DisplayList.Item.Value(v4, v252);
              swift_bridgeObjectRelease();
              outlined consume of DisplayList.Effect(v4, v252, 10);
              v159 = v4;
              LOWORD(v168) = 4;
              break;
            case 0xC:
              outlined copy of DisplayList.Item.Value(v4, v252);
              outlined copy of DisplayList.Item.Value(v4, v252);
              swift_bridgeObjectRelease();
              outlined consume of DisplayList.Effect(v4, v252, 12);
              v159 = v4;
              LOWORD(v168) = 2;
              break;
            case 0xE:
              outlined copy of DisplayList.Item.Value(v4, v252);
              outlined copy of DisplayList.Item.Value(v4, v252);
              swift_bridgeObjectRelease();
              v186 = v4;
              v187 = v252;
              LOBYTE(v188) = 14;
              goto LABEL_144;
            case 0xF:
              outlined copy of DisplayList.Item.Value(v4, v252);
              outlined copy of DisplayList.Item.Value(v4, v252);
              swift_bridgeObjectRelease();
              outlined consume of DisplayList.Effect(v4, v252, 15);
              v159 = v4;
              LOWORD(v168) = 64;
              break;
            case 0x10:
              outlined copy of DisplayList.Item.Value(v4, v252);
              outlined copy of DisplayList.Item.Value(v4, v252);
              swift_bridgeObjectRelease();
              outlined consume of DisplayList.Effect(v4, v252, 16);
              v159 = v4;
              LOWORD(v168) = 32;
              break;
            case 0x11:
              (*(void (**)(CGRect *__return_ptr))(*(void *)v4 + 112))(&v277);
              v234 = v142;
              v238 = v141;
              v189 = LOWORD(v277.origin.x);
              v190 = (unsigned __int16)word_26FA429C8;
              v191 = (unsigned __int16)word_26FA429CA;
              outlined copy of DisplayList.Item.Value(v4, v252);
              outlined copy of DisplayList.Item.Value(v4, v252);
              swift_bridgeObjectRelease();
              outlined consume of DisplayList.Effect(v4, v252, 17);
              v159 = v4;
              if ((v191 & ~v190) != 0) {
                v192 = v191;
              }
              else {
                v192 = 0;
              }
              v193 = v189 | v190;
              v155 = v249;
              unsigned __int8 v142 = v234;
              v141 = v238;
              LOWORD(v168) = v193 | v192;
              break;
            default:
              outlined copy of DisplayList.Item.Value(v4, v252);
              outlined copy of DisplayList.Item.Value(v4, v252);
              swift_bridgeObjectRelease();
              v186 = v4;
              v187 = v252;
              v188 = HIDWORD(v252);
LABEL_144:
              outlined consume of DisplayList.Effect(v186, v187, v188);
              v159 = v4;
              LOWORD(v168) = 0;
              break;
          }
          LOWORD(v143) = v168 | v48;
          goto LABEL_160;
        case 2:
          v239 = WORD1(v48);
          v169 = *(void *)(v4 + 16);
          if (!v169)
          {
            LOWORD(v143) = 128;
            goto LABEL_135;
          }
          if (v169 == 1)
          {
            v170 = 0;
            char v143 = 128;
          }
          else
          {
            v171 = 0;
            v170 = v169 & 0x7FFFFFFFFFFFFFFELL;
            v172 = (unsigned __int16 *)(v4 + 104);
            v173 = 128;
            v174 = v169 & 0x7FFFFFFFFFFFFFFELL;
            do
            {
              v175 = *(v172 - 20);
              v176 = *v172;
              v172 += 40;
              v173 |= v175;
              v171 |= v176;
              v174 -= 2;
            }
            while (v174);
            char v143 = v171 | v173;
            if (v169 == v170)
            {
LABEL_135:
              outlined copy of DisplayList.Item.Value(v4, v252);
              v154 = v252;
              v159 = v4;
              goto LABEL_161;
            }
          }
          v177 = v169 - v170;
          v178 = (unsigned __int16 *)(v4 + 40 * v170 + 64);
          do
          {
            v179 = *v178;
            v178 += 20;
            v143 |= v179;
            --v177;
          }
          while (v177);
          goto LABEL_135;
        case 3:
          goto LABEL_162;
        default:
          v239 = WORD1(v48);
          switch(v4 >> 60)
          {
            case 6uLL:
              outlined init with copy of AnyTrackedValue((v4 & 0xFFFFFFFFFFFFFFFLL) + 16, (uint64_t)&v277);
              v160 = v277.size.height;
              v161 = v278;
              __swift_project_boxed_opaque_existential_1(&v277, *(uint64_t *)&v277.size.height);
              v236 = v141;
              v162 = *(void (**)(__int16 *__return_ptr, void, uint64_t))(v161 + 40);
              outlined copy of DisplayList.Item.Value(v4, v252);
              v162(&v262, *(void *)&v160, v161);
              v158 = v250;
              v155 = v249;
              v141 = v236;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v277);
              v154 = v252;
              v159 = v4;
              LOWORD(v143) = v262;
              goto LABEL_161;
            case 8uLL:
              v248 = v136;
              v233 = v142;
              v235 = v141;
              v260 = v137;
              v180 = *(void *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
              v181 = *(void **)(v180 + 216);
              if (!v181) {
                goto LABEL_133;
              }
              unsigned int v1 = v4;
              uint64_t v45 = (uint64_t *)v252;
              outlined copy of DisplayList.Item.Value(v4, v252);
              outlined copy of DisplayList.Item.Value(v4, v252);
              outlined copy of DisplayList.Item.Value(v4, v252);
              swift_retain();
              swift_retain();
              if ((uint64_t)objc_msgSend(v181, sel_length) <= 0) {
                goto LABEL_155;
              }
              if (one-time initialization token for updateSchedule != -1) {
                swift_once();
              }
              v182 = static NSAttributedStringKey.updateSchedule;
              objc_msgSend(v181, sel_length);
              if (!objc_msgSend(v181, sel_attribute_atIndex_effectiveRange_, v182, 0, 0))
              {
                memset(&v277, 0, sizeof(v277));
                outlined destroy of CoordinateSpaceGesture<CGFloat>((uint64_t)&v277, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0]);
                outlined consume of DisplayList.Item.Value(v4, v252);
                swift_release();
                swift_release();
                v194 = v4;
                v195 = v252;
                goto LABEL_157;
              }
              _bridgeAnyObjectToAny(_:)();
              swift_unknownObjectRelease();
              outlined destroy of CoordinateSpaceGesture<CGFloat>((uint64_t)&v277, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0]);
              v183 = *(unsigned char *)(v180 + 256);
              outlined consume of DisplayList.Item.Value(v4, v252);
              swift_release();
              swift_release();
              outlined consume of DisplayList.Item.Value(v4, v252);
              if ((v183 & 1) == 0) {
                goto LABEL_158;
              }
              LOWORD(v143) = 8;
              break;
            case 9uLL:
              LOWORD(v143) = *(_WORD *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 0x18) | 0x200;
              goto LABEL_135;
            case 0xBuLL:
              goto LABEL_137;
            case 0xCuLL:
              outlined copy of DisplayList.Item.Value(v4, v252);
              v154 = v252;
              v159 = v4;
LABEL_137:
              outlined copy of DisplayList.Item.Value(v159, v154);
              v154 = v252;
              v159 = v4;
              LOWORD(v143) = 2;
              goto LABEL_161;
            default:
              v248 = v136;
              v233 = v142;
              v235 = v141;
              v260 = v137;
LABEL_133:
              outlined copy of DisplayList.Item.Value(v4, v252);
              goto LABEL_158;
          }
          goto LABEL_159;
      }
    }
    outlined consume of DisplayList.Item.Value(0, 0xC000000000000000);
    outlined consume of _ShapeStyle_RenderedLayers.Layers((uint64_t)v259, v136, v137, v138, v257, v140, v141, v142, v143);
    float32x4_t v146 = 0;
    LOWORD(v143) = 0;
    char v147 = MEMORY[0x263F8EE78];
LABEL_163:
    char v135 = 0;
    v148 = 0;
    v261 = 0;
    v149 = 0;
    v150 = 0;
    v151 = 0;
    v141 = 0;
    unsigned __int8 v142 = 0;
    goto LABEL_164;
  }
  v261 = v290[3];
  v149 = v290[4];
  v150 = v290[5];
  v148 = v290[2];
  v151 = v290[6];
  v152 = v291;
  LOWORD(v143) = 0;
  float32x4_t v146 = 0;
  char v147 = MEMORY[0x263F8EE78];
LABEL_165:
  *(void *)&v263 = v147;
  WORD4(v263) = v143;
  BYTE10(v263) = v146;
  AGGraphSetOutputValue();
  _s7SwiftUI4PathVWOrTm_0((uint64_t)v292, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
  swift_bridgeObjectRelease();
  v274 = *(_OWORD *)&v288[48];
  v275 = *(_OWORD *)&v288[64];
  v276[0] = *(_OWORD *)v289;
  *(_OWORD *)((char *)v276 + 9) = *(_OWORD *)&v289[9];
  v270 = *(_OWORD *)&v287[96];
  v271 = *(_OWORD *)v288;
  v272 = *(_OWORD *)&v288[16];
  v273 = *(_OWORD *)&v288[32];
  v266 = *(_OWORD *)&v287[32];
  v267 = *(_OWORD *)&v287[48];
  v268 = *(_OWORD *)&v287[64];
  v269 = *(_OWORD *)&v287[80];
  v263 = v285;
  v264 = v286;
  *(_OWORD *)v265 = *(_OWORD *)v287;
  *(_OWORD *)&v265[16] = *(_OWORD *)&v287[16];
  outlined release of _ShapeStyle_RenderedShape((uint64_t)&v263);
  swift_release();
  return outlined consume of _ShapeStyle_RenderedLayers.Layers(v135, v148, v261, v149, v150, v151, v141, v142, v152);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  double x;
  double y;
  CGFloat width;
  double height;
  int v10;
  uint64_t Value;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int v16;
  unint64_t v17;
  int v18;
  int v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  int v27;
  double *v28;
  double v29;
  double v30;
  double *v31;
  double v32;
  double v33;
  uint64_t v34;
  CGFloat v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  char isUniquelyReferenced_nonNull_native;
  char *v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unsigned __int8 v63;
  float v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  int v68;
  double v69;
  double v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  unsigned int v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  double v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  long long v87;
  int v88;
  long long v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  __int16 x_low;
  uint64_t v94;
  uint64_t v95;
  char v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unsigned int v100;
  unint64_t v101;
  uint64_t v102;
  unsigned int v103;
  int v104;
  unint64_t v105;
  CGPoint origin;
  CGSize size;
  BOOL IsNull;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  char v115;
  __int16 v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  long long v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  __int16 v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  long long v129;
  uint64_t v130;
  char v131;
  __int16 v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  char v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char v141;
  uint64_t v142;
  unsigned int v143;
  uint64_t v144;
  unint64_t v145;
  unsigned int v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  void (*v150)(__int16 *__return_ptr, void, unint64_t);
  unsigned int v151;
  unsigned int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  unsigned __int16 *v157;
  int v158;
  uint64_t v159;
  int v160;
  int v161;
  uint64_t v162;
  unsigned __int16 *v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  void (*v167)(__int16 *__return_ptr, void, uint64_t);
  uint64_t v168;
  char v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  __int16 v173;
  int v174;
  int v175;
  __int16 v176;
  __int16 v177;
  uint64_t v178;
  unint64_t v179;
  long long v180;
  long long v181;
  long long v182;
  CGFloat v184;
  CGFloat v185;
  CGFloat v186;
  CGFloat v187;
  char v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char v193;
  void *v194;
  uint64_t v195;
  uint64_t v196;
  double v197;
  uint64_t v198;
  unsigned __int8 v199;
  char v200;
  int v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  CGFloat v214;
  id v215;
  id v216;
  char v217;
  id v218;
  uint64_t v219;
  CGFloat v220;
  __int16 v221;
  uint64_t v222;
  unsigned int v223;
  double v224;
  uint64_t v225;
  void *v226;
  unint64_t v227;
  unint64_t v228;
  uint64_t v229;
  __int16 v230;
  unint64_t v231;
  __int16 v232;
  uint64_t v233;
  int v234;
  char v235;
  unint64_t v236;
  uint64_t v237;
  unint64_t v238;
  unint64_t v239;
  uint64_t v240;
  long long v241;
  void *v242;
  uint64_t v243;
  __int16 v244;
  long long v245;
  long long v246;
  unsigned char v247[32];
  long long v248;
  long long v249;
  long long v250;
  long long v251;
  CGRect v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  uint64_t v256;
  __int16 v257;
  char v258;
  int v259;
  long long v260;
  long long v261;
  unsigned char v262[112];
  unsigned char v263[80];
  unsigned char v264[25];
  void v265[9];
  uint64_t v266;
  void v267[4];
  unsigned __int8 v268;
  uint64_t v269;
  CGRect v270;
  CGRect v271;
  CGRect v272;

  v269 = *MEMORY[0x263EF8340];
  int v10 = *(_DWORD *)(v0 + 12);
  type metadata accessor for _ShapeView<CombinedContentShape, ForegroundStyle>();
  uint64_t Value = AGGraphGetValue();
  double v12 = *(void *)Value;
  double v13 = *(unsigned __int8 *)(Value + 8);
  uint64_t v14 = *(unsigned __int8 *)(Value + 9);
  if ((v15 & 1) != 0 || !*(_WORD *)(v0 + 50))
  {
    swift_bridgeObjectRetain();
    char v17 = ++static DisplayList.Version.lastValue;
  }
  else
  {
    *(void *)&v260 = *(void *)(v0 + 28);
    DWORD2(v260) = v10;
    swift_bridgeObjectRetain();
    uint64_t v16 = AGGraphAnyInputsChanged();
    char v17 = ++static DisplayList.Version.lastValue;
    if (!v16) {
      goto LABEL_9;
    }
  }
  int v18 = (2 * ((33 * (v17 >> 16)) ^ v17)) | 1;
  if (!v17) {
    LOWORD(v18) = 0;
  }
  *(_WORD *)(v0 + 50) = v18;
LABEL_9:
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x263F288F8])
  {
    __break(1u);
LABEL_165:
    swift_once();
    CGFloat v41 = v188;
    goto LABEL_15;
  }
  unint64_t v19 = *(_DWORD *)(v0 + 40);
  LODWORD(v242) = v14;
  v238 = AGCreateWeakAttribute();
  *(void *)&v241 = HIDWORD(v238);
  DWORD2(v241) = v13;
  v236 = AGCreateWeakAttribute();
  v240 = HIDWORD(v236);
  LODWORD(v243) = v19;
  int v20 = AGCreateWeakAttribute();
  int v21 = v20;
  v237 = HIDWORD(v20);
  unint64_t v22 = AGCreateWeakAttribute();
  int v23 = v22;
  v233 = HIDWORD(v22);
  unint64_t v24 = AGCreateWeakAttribute();
  int v25 = v24;
  v231 = HIDWORD(v24);
  unint64_t v26 = AGCreateWeakAttribute();
  int v27 = v26;
  v227 = HIDWORD(v26);
  unint64_t v28 = (double *)AGGraphGetValue();
  int v29 = *v28;
  unint64_t v30 = v28[1];
  int v31 = (double *)AGGraphGetValue();
  unint64_t v32 = v29 - *v31;
  int v33 = v30 - v31[1];
  long long v34 = AGGraphGetValue();
  double v35 = *(double *)v34;
  double v36 = *(double *)(v34 + 8);
  _threadGeometryProxyData();
  *(void *)&v260 = v238;
  *((void *)&v260 + 1) = v236;
  *(void *)&v261 = __PAIR64__(v237, v21);
  *((void *)&v261 + 1) = __PAIR64__(v233, v23);
  *(_DWORD *)v262 = v25;
  *(_DWORD *)&v262[4] = v231;
  *(_DWORD *)&v262[8] = v27;
  *(_DWORD *)&v262[12] = v227;
  __int16 v5 = v17;
  *(_DWORD *)&v262[16] = v17;
  _setThreadGeometryProxyData();
  Swift::Double_optional v37 = swift_bridgeObjectRetain();
  specialized Shape.effectivePath(in:)(v37, (uint64_t)v267, 0.0, 0.0, v35, v36);
  char v17 = v267[0];
  double v13 = v267[1];
  unsigned int v1 = v267[2];
  char v2 = v267[3];
  double v38 = v268;
  swift_bridgeObjectRelease();
  double v39 = 256;
  if (!DWORD2(v241)) {
    double v39 = 0;
  }
  uint64_t v40 = 0x10000;
  if (!v14) {
    uint64_t v40 = 0;
  }
  uint64_t v3 = v40 | v39 | v38;
  _setThreadGeometryProxyData();
  double v12 = *(void *)v0;
  memset(&v265[1], 0, 64);
  v265[0] = v12;
  v266 = 0x80000000;
  swift_retain();
  _s7SwiftUI4PathVWOrTm_0((uint64_t)v267, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
  v270.origin.CGFloat x = 0.0;
  v270.origin.CGFloat y = 0.0;
  v270.size.CGFloat width = v35;
  v270.size.CGFloat height = v36;
  v271 = CGRectOffset(v270, v32, v33);
  CGFloat x = v271.origin.x;
  CGFloat y = v271.origin.y;
  CGFloat width = v271.size.width;
  CGFloat height = v271.size.height;
  uint64_t v14 = *(unsigned int *)(v0 + 8);
  uint64_t v4 = *(unsigned __int16 *)(v0 + 50);
  CGFloat v41 = *(unsigned char *)(v0 + 48);
  v188 = v41;
  if (one-time initialization token for normal != -1) {
    goto LABEL_165;
  }
LABEL_15:
  *(void *)&v260 = v17;
  *((void *)&v260 + 1) = v13;
  *(void *)&v261 = v1;
  *((void *)&v261 + 1) = v2;
  *(void *)v262 = v3;
  memset(&v262[8], 0, 60);
  *(_WORD *)&v262[68] = v4;
  *(double *)&v262[72] = x;
  *(double *)&v262[80] = y;
  *(CGFloat *)&v262[88] = width;
  *(double *)&v262[96] = height;
  *(void *)&v262[104] = 0;
  *(_DWORD *)v263 = 0;
  *(double *)&v263[8] = x;
  *(double *)&v263[16] = y;
  *(CGFloat *)&v263[24] = width;
  *(double *)&v263[32] = height;
  *(_OWORD *)&v263[48] = xmmword_2461B9DE0;
  *(void *)&v263[40] = v5;
  *(void *)&v263[64] = 0;
  v263[74] = 0;
  *(_WORD *)&v263[72] = 0;
  *(_DWORD *)&v263[76] = v14;
  v264[0] = v41;
  *(_DWORD *)&v264[4] = v243;
  *(void *)&v264[8] = static GraphicsBlendMode.normal;
  v264[16] = byte_26B0EB4A0;
  *(_DWORD *)&v264[20] = 1065353216;
  v264[24] = 0;
  LOBYTE(v245) = 0;
  CGFloat v42 = *(unsigned int *)(v0 + 16);
  outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_26B0EB4A0);
  _ShapeStyle_RenderedShape.renderItem(name:styles:layers:)((unsigned __int8 *)&v245, v42, (uint64_t)v265);
  v195 = v12;
  if (v12)
  {
    uint64_t v43 = v12;
    uint64_t v44 = (void *)(v12 + 24);
    uint64_t v45 = *(unsigned int *)(v12 + 60);
    uint64_t v46 = (int)v45;
    swift_beginAccess();
    if (*(void *)(*(void *)(v12 + 24) + 16) > (int)v45)
    {
      v186 = *(double *)(MEMORY[0x263F001A0] + 8);
      v187 = *MEMORY[0x263F001A0];
      v184 = *(double *)(MEMORY[0x263F001A0] + 24);
      v185 = *(double *)(MEMORY[0x263F001A0] + 16);
      char v47 = v45;
      v194 = v44;
      do
      {
        ++*(_DWORD *)(v43 + 60);
        swift_beginAccess();
        long long v50 = *(void **)(v43 + 24);
        swift_retain();
        uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v43 + 24) = v50;
        if (isUniquelyReferenced_nonNull_native)
        {
          if ((v47 & 0x80000000) != 0) {
            goto LABEL_151;
          }
        }
        else
        {
          long long v50 = specialized _ArrayBuffer._consumeAndCreateNew()(v50);
          *uint64_t v44 = v50;
          if ((v47 & 0x80000000) != 0)
          {
LABEL_151:
            __break(1u);
LABEL_152:
            __break(1u);
LABEL_153:
            __break(1u);
LABEL_154:
            outlined consume of DisplayList.Item.Value(v227, v238);
            swift_release();
            swift_release();
            outlined consume of DisplayList.Item.Value(v227, v238);
LABEL_156:
            v148 = v237;
LABEL_157:
            LOWORD(v138) = 0;
LABEL_158:
            v149 = v3;
            char v145 = v238;
LABEL_159:
            LOBYTE(v146) = v231;
LABEL_160:
            v252.origin.CGFloat x = x;
            v252.origin.CGFloat y = y;
            v252.size.CGFloat width = width;
            v252.size.CGFloat height = height;
            v253 = v14;
            v254 = v149;
            v255 = v145;
            v256 = v4;
            v258 = v146;
            v257 = v43;
            v259 = v148;
            v178 = v149;
            v179 = v145;
            DisplayList.Item.properties.getter(&v244);
            outlined consume of DisplayList.Item.Value(v178, v179);
            outlined consume of _ShapeStyle_RenderedLayers.Layers(v240, v243, v241, *((uint64_t *)&v241 + 1), (uint64_t)v242, (uint64_t)v50, v5, v2, v236);
            v141 = v244;
            unsigned __int8 v142 = v233;
            goto LABEL_161;
          }
        }
        if (v50[2] <= v46) {
          goto LABEL_152;
        }
        char v47 = 224 * v46;
        BYTE4(v50[28 * v46 + 31]) = 1;
        long long v50 = (void *)*v44;
        swift_endAccess();
        if (v50[2] <= v46) {
          goto LABEL_153;
        }
        long long v52 = (char *)v50 + v47;
        v234 = *(_DWORD *)((char *)v50 + v47 + 52);
        long long v53 = *(void **)((char *)v50 + v47 + 56);
        long long v54 = *(void **)((char *)v50 + v47 + 72);
        v242 = *(void **)((char *)v50 + v47 + 80);
        v243 = *(void *)((char *)v50 + v47 + 64);
        long long v55 = *(void *)((char *)v50 + v47 + 88);
        *(void *)&v241 = *(void *)((char *)v50 + v47 + 104);
        *((void *)&v241 + 1) = *(void *)((char *)v50 + v47 + 96);
        long long v56 = *(void *)((char *)v50 + v47 + 120);
        v240 = *(void *)((char *)v50 + v47 + 112);
        long long v57 = *(void *)((char *)v50 + v47 + 128);
        long long v58 = *(void *)((char *)v50 + v47 + 136);
        long long v60 = *(void *)((char *)v50 + v47 + 144);
        unsigned int v59 = *(void *)((char *)v50 + v47 + 152);
        int64x2_t v61 = *((void *)v52 + 20);
        v210 = *((void *)&v260 + 1);
        v211 = v260;
        v208 = *((void *)&v261 + 1);
        v209 = v261;
        v213 = *(void *)&v262[8];
        v215 = *(id *)v262;
        v206 = *(void *)&v262[24];
        v207 = *(void *)&v262[16];
        v204 = *(void *)&v262[40];
        v205 = *(void *)&v262[32];
        v202 = *(void *)&v262[56];
        v203 = *(void *)&v262[48];
        v201 = *(_DWORD *)&v262[64];
        memset(v262, 0, 64);
        v260 = 0u;
        v261 = 0u;
        *(_DWORD *)&v262[64] = 0x800000;
        swift_retain_n();
        v237 = (uint64_t)v54;
        v238 = v57;
        outlined copy of _ShapeStyle_Pack.Style?(v53, v243, v54, v242, v55, *((uint64_t *)&v241 + 1), v241, v240, v56, v57, v58, v60, v59, v61);
        swift_release();
        *(void *)&v262[104] = v43;
        char v62 = v60;
        unint64_t v63 = v59;
        *(_DWORD *)v263 = v234;
        if (v61)
        {
          *(void *)&v245 = v53;
          *((void *)&v245 + 1) = v243;
          *(void *)&v246 = v54;
          *((void *)&v246 + 1) = v242;
          *(void *)v247 = v55;
          *(void *)&v247[8] = *((void *)&v241 + 1);
          *(void *)&v247[16] = v241;
          *(void *)&v247[24] = v240;
          *(void *)&v248 = v56;
          *((void *)&v248 + 1) = v57;
          LOBYTE(v249) = v58;
          DWORD1(v249) = HIDWORD(v58);
          *((void *)&v249 + 1) = v62;
          LOBYTE(v250) = v59;
          *((void *)&v250 + 1) = v61;
          _ShapeStyle_RenderedShape.render(style:)((uint64_t)&v245);
          unint64_t v63 = v59;
        }
        v236 = v62;
        unint64_t v64 = *(float *)&v264[20];
        v219 = v55;
        v222 = (uint64_t)v53;
        v212 = v56;
        v199 = v63;
        v200 = v58;
        v198 = v61;
        if (*(float *)&v264[20] == 0.0
          || (CGFloat y = *(double *)&v262[72],
              CGFloat x = *(double *)&v262[80],
              unint64_t v65 = *(void *)&v262[88],
              CGFloat height = *(double *)&v262[96],
              CGRectIsEmpty(*(CGRect *)&v262[72])))
        {
          outlined consume of DisplayList.Item.Value(*(uint64_t *)&v263[48], *(unint64_t *)&v263[56]);
          *(_OWORD *)&v263[48] = xmmword_2461B9DE0;
          *(void *)&v263[64] = 0;
          v263[74] = 0;
          *(_WORD *)&v263[72] = 0;
          if (*(void *)&v262[104])
          {
            *(void *)&v263[48] = *(void *)&v262[104];
            *(void *)&v263[56] = *(unsigned int *)v263 | 0x4000001100000000;
            *(void *)&v263[64] = MEMORY[0x263F8EE78];
            LOBYTE(v245) = v264[0];
            DisplayList.Item.canonicalize(options:)((char *)&v245);
            *(void *)&v262[104] = 0;
            *(_DWORD *)v263 = 0;
            unint64_t v66 = *(void *)&v263[48];
            unint64_t v67 = *(void *)&v263[64];
            v227 = *(void *)&v263[56];
            unint64_t v68 = *(unsigned __int16 *)&v263[72] | (v263[74] << 16);
          }
          else
          {
            unint64_t v68 = 0;
            unint64_t v67 = 0;
            unint64_t v66 = 0;
            v227 = 0xC000000000000000;
          }
          v223 = v68;
          v231 = v67;
          v233 = v66;
          int v69 = *(double *)&v263[16];
          int v70 = *(double *)&v263[8];
          CGFloat width = *(double *)&v263[32];
          int v71 = *(void *)&v263[24];
          v196 = *(void *)&v263[40];
          __int16 v5 = *(unsigned int *)&v263[76];
          unint64_t v72 = static GraphicsBlendMode.normal;
          char v73 = byte_26B0EB4A0;
          uint64_t v74 = *(void *)&v264[8];
          __int16 v75 = v264[16];
          outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_26B0EB4A0);
          outlined consume of GraphicsBlendMode(v74, v75);
          *(void *)&v264[8] = v72;
          v264[16] = v73;
          *(_DWORD *)&v264[20] = 1065353216;
          v264[24] = 0;
          *(_OWORD *)&v263[48] = xmmword_2461B9DE0;
          *(void *)&v263[64] = 0;
          v263[74] = 0;
          *(_WORD *)&v263[72] = 0;
          CGFloat y = *(double *)&v262[72];
          CGFloat x = *(double *)&v262[80];
          unint64_t v65 = *(void *)&v262[88];
          CGFloat height = *(double *)&v262[96];
        }
        else
        {
          v235 = v264[0];
          LOBYTE(v245) = v264[0];
          DisplayList.Item.canonicalize(options:)((char *)&v245);
          int v85 = *(void *)&v262[104];
          if (*(void *)&v262[104])
          {
            int v86 = *(unsigned int *)v263;
            int v87 = *(_OWORD *)&v263[56];
            int v88 = *(unsigned __int16 *)&v263[72] | (v263[74] << 16);
            int v89 = *(_OWORD *)&v263[24];
            long long v90 = *(void *)&v263[48];
            long long v91 = *(void *)&v263[40];
            if (*(void *)&v263[56] >> 62 != 3
              || (v88 & 0xFFFFFF) != 0
              || *(void *)&v263[56] != 0xC000000000000000
              || *(void *)&v263[64] | *(void *)&v263[48])
            {
              type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
              CGFloat v94 = swift_allocObject();
              *(_OWORD *)(v94 + 16) = xmmword_2461B9DC0;
              *(void *)(v94 + 32) = 0;
              *(void *)(v94 + 40) = 0;
              *(_OWORD *)(v94 + 48) = v89;
              *(void *)(v94 + 64) = v91;
              *(void *)(v94 + 72) = v90;
              *(_OWORD *)(v94 + 80) = v87;
              *(unsigned char *)(v94 + 98) = BYTE2(v88);
              *(_WORD *)(v94 + 96) = v88;
              *(_DWORD *)(v94 + 100) = 0;
              v245 = 0uLL;
              v246 = v89;
              *(void *)v247 = v91;
              *(void *)&v247[8] = v90;
              *(_OWORD *)&v247[16] = v87;
              BYTE2(v248) = BYTE2(v88);
              LOWORD(v248) = v88;
              DWORD1(v248) = 0;
              swift_retain();
              outlined copy of DisplayList.Item.Value(v90, v87);
              DisplayList.Item.features.getter((__int16 *)&v252);
              CGFloat v95 = v91;
              x_low = LOWORD(v252.origin.x);
              v245 = 0uLL;
              v246 = v89;
              *(void *)v247 = v95;
              *(void *)&v247[8] = v90;
              *(_OWORD *)&v247[16] = v87;
              BYTE2(v248) = BYTE2(v88);
              LOWORD(v248) = v88;
              DWORD1(v248) = 0;
              DisplayList.Item.properties.getter(&v252);
              __int16 v92 = LOBYTE(v252.origin.x);
            }
            else
            {
              swift_retain();
              __int16 v92 = 0;
              x_low = 0;
              CGFloat v94 = MEMORY[0x263F8EE78];
            }
            *(void *)&v263[48] = v85;
            *(void *)&v263[56] = v86 | 0x4000001100000000;
            *(void *)&v263[64] = v94;
            v263[74] = v92;
            *(_WORD *)&v263[72] = x_low;
            LOBYTE(v245) = v235;
            DisplayList.Item.canonicalize(options:)((char *)&v245);
            outlined consume of DisplayList.Item.Value(v90, v87);
            swift_release();
            *(void *)&v262[104] = 0;
            *(_DWORD *)v263 = 0;
            char v62 = v236;
          }
          CGFloat v96 = v264[24];
          CGFloat v97 = *(void *)&v263[48];
          int v99 = *(void *)&v263[64];
          uint64_t v98 = *(void *)&v263[56];
          CGFloat v100 = *(unsigned __int16 *)&v263[72] | (v263[74] << 16);
          if (v264[24])
          {
            CGFloat v101 = *(void *)&v263[56] >> 62;
            if (*(void *)&v263[56] >> 62 != 3
              || (v100 & 0xFFFFFF) != 0
              || *(void *)&v263[56] != 0xC000000000000000
              || *(void *)&v263[64] | *(void *)&v263[48])
            {
              v228 = *(unsigned __int16 *)&v262[68];
              v252.origin.CGFloat x = v187;
              v252.origin.CGFloat y = v186;
              v252.size.CGFloat width = v185;
              v252.size.CGFloat height = v184;
              CGFloat v102 = *(void *)&v263[40];
              v224 = *(double *)&v263[8];
              v245 = *(_OWORD *)&v263[8];
              v197 = *(double *)&v263[16];
              v190 = *(void *)&v263[32];
              v192 = *(void *)&v263[24];
              v246 = *(_OWORD *)&v263[24];
              *(_OWORD *)v247 = *(_OWORD *)&v263[40];
              *(_OWORD *)&v247[16] = *(_OWORD *)&v263[56];
              CGFloat v103 = HIWORD(v100);
              BYTE2(v248) = v263[74];
              LOWORD(v248) = *(_WORD *)&v263[72];
              DWORD1(v248) = *(_DWORD *)&v263[76];
              unint64_t v104 = *(unsigned __int16 *)&v263[72] | (v263[74] << 16);
              uint64_t v105 = *(void *)&v263[56];
              DisplayList.Item.addExtent(to:)(&v252.origin.x);
              origin = v252.origin;
              uint64_t size = v252.size;
              BOOL IsNull = CGRectIsNull(v252);
              char v109 = 0.0;
              if (IsNull) {
                int v110 = 0.0;
              }
              else {
                int v110 = origin.x;
              }
              if (IsNull) {
                uint64_t v111 = 0.0;
              }
              else {
                uint64_t v111 = origin.y;
              }
              if (IsNull) {
                char v112 = 0.0;
              }
              else {
                char v112 = size.width;
              }
              if (!IsNull) {
                char v109 = size.height;
              }
              v272 = CGRectIntegral(*(CGRect *)(&v109 - 3));
              int v113 = v272.origin.x;
              char v114 = v272.origin.y;
              *(CGRect *)&v263[8] = v272;
              if (v101 < 3 || (v104 & 0xFFFFFF) != 0 || v105 != 0xC000000000000000 || v99 | v97)
              {
                type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
                long long v117 = swift_allocObject();
                *(_OWORD *)(v117 + 16) = xmmword_2461B9DC0;
                *(void *)(v117 + 32) = 0;
                *(void *)(v117 + 40) = 0;
                *(void *)(v117 + 48) = v192;
                *(void *)(v117 + 56) = v190;
                *(void *)(v117 + 64) = v102;
                *(void *)(v117 + 72) = v97;
                *(void *)(v117 + 80) = v105;
                *(void *)(v117 + 88) = v99;
                *(unsigned char *)(v117 + 98) = v103;
                *(_WORD *)(v117 + 96) = v104;
                *(_DWORD *)(v117 + 100) = 0;
                v245 = 0uLL;
                *(void *)&v246 = v192;
                *((void *)&v246 + 1) = v190;
                *(void *)v247 = v102;
                *(void *)&v247[8] = v97;
                *(void *)&v247[16] = v105;
                *(void *)&v247[24] = v99;
                BYTE2(v248) = v103;
                LOWORD(v248) = v104;
                DWORD1(v248) = 0;
                outlined copy of DisplayList.Item.Value(v97, v105);
                DisplayList.Item.features.getter(&v244);
                long long v116 = v244;
                v245 = 0uLL;
                *(void *)&v246 = v192;
                *((void *)&v246 + 1) = v190;
                *(void *)v247 = v102;
                *(void *)&v247[8] = v97;
                *(void *)&v247[16] = v105;
                *(void *)&v247[24] = v99;
                BYTE2(v248) = v103;
                LOWORD(v248) = v104;
                DWORD1(v248) = 0;
                DisplayList.Item.properties.getter(&v244);
                uint64_t v115 = v244;
              }
              else
              {
                outlined copy of DisplayList.Item.Value(0, 0xC000000000000000);
                uint64_t v115 = 0;
                long long v116 = 0;
                long long v117 = MEMORY[0x263F8EE78];
              }
              long long v118 = swift_allocObject();
              *(void *)(v118 + 16) = v117;
              *(_WORD *)(v118 + 24) = v116;
              *(unsigned char *)(v118 + 26) = v115;
              *(double *)(v118 + 32) = v113 - v224;
              *(double *)(v118 + 40) = v114 - v197;
              *(unsigned char *)(v118 + 48) = 0;
              *(_DWORD *)(v118 + 52) = 0;
              *(unsigned char *)(v118 + 56) = 1;
              *(_DWORD *)(v118 + 60) = 161;
              *(unsigned char *)(v118 + 64) = 3;
              outlined consume of DisplayList.Item.Value(v97, v105);
              int v99 = 0;
              CGFloat v97 = v118 | 0x9000000000000000;
              *(void *)&v263[48] = v118 | 0x9000000000000000;
              uint64_t v98 = v228;
              *(_OWORD *)&v263[56] = v228;
              v263[74] = 0;
              *(_WORD *)&v263[72] = 0;
              char v62 = v236;
            }
            else
            {
              uint64_t v98 = 0xC000000000000000;
            }
            CGFloat v100 = 0;
            v264[24] = v96 & 0xFE;
          }
          long long v119 = *(void *)&v264[8];
          uint64_t v120 = v264[16];
          if ((v264[16] & 1) != 0 || *(_DWORD *)&v264[8])
          {
            uint64_t v121 = *(_OWORD *)&v263[24];
            int v122 = *(void *)&v263[40];
            if (v98 >> 62 != 3 || (v100 & 0xFFFFFF) != 0 || v98 != 0xC000000000000000 || v99 | v97)
            {
              type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
              uint64_t v126 = swift_allocObject();
              *(_OWORD *)(v126 + 16) = xmmword_2461B9DC0;
              *(void *)(v126 + 32) = 0;
              *(void *)(v126 + 40) = 0;
              *(_OWORD *)(v126 + 48) = v121;
              *(void *)(v126 + 64) = v122;
              *(void *)(v126 + 72) = v97;
              *(void *)(v126 + 80) = v98;
              *(void *)(v126 + 88) = v99;
              *(unsigned char *)(v126 + 98) = BYTE2(v100);
              *(_WORD *)(v126 + 96) = v100;
              *(_DWORD *)(v126 + 100) = 0;
              v245 = 0uLL;
              v246 = v121;
              *(void *)v247 = v122;
              *(void *)&v247[8] = v97;
              *(void *)&v247[16] = v98;
              *(void *)&v247[24] = v99;
              BYTE2(v248) = BYTE2(v100);
              LOWORD(v248) = v100;
              DWORD1(v248) = 0;
              outlined copy of GraphicsBlendMode(v119, v120);
              outlined copy of DisplayList.Item.Value(v97, v98);
              CGRect v127 = v98;
              DisplayList.Item.features.getter((__int16 *)&v252);
              CGRect v128 = v119;
              long long v125 = LOWORD(v252.origin.x);
              v245 = 0uLL;
              v246 = v121;
              *(void *)v247 = v122;
              *(void *)&v247[8] = v97;
              *(void *)&v247[16] = v98;
              *(void *)&v247[24] = v99;
              BYTE2(v248) = BYTE2(v100);
              long long v124 = v128;
              LOWORD(v248) = v100;
              DWORD1(v248) = 0;
              DisplayList.Item.properties.getter(&v252);
              long long v123 = LOBYTE(v252.origin.x);
            }
            else
            {
              outlined copy of GraphicsBlendMode(*(uint64_t *)&v264[8], v264[16]);
              long long v123 = 0;
              long long v124 = v119;
              long long v125 = 0;
              uint64_t v126 = MEMORY[0x263F8EE78];
              CGRect v127 = 0xC000000000000000;
            }
            *(void *)&v263[48] = v124;
            *(void *)&v263[56] = v120 | 0x4000000500000000;
            *(void *)&v263[64] = v126;
            v263[74] = v123;
            *(_WORD *)&v263[72] = v125;
            LOBYTE(v245) = v235;
            DisplayList.Item.canonicalize(options:)((char *)&v245);
            outlined consume of DisplayList.Item.Value(v97, v127);
            CGFloat v97 = *(void *)&v263[48];
            int v99 = *(void *)&v263[64];
            uint64_t v98 = *(void *)&v263[56];
            CGFloat v100 = *(unsigned __int16 *)&v263[72] | (v263[74] << 16);
            long long v119 = v124;
          }
          v193 = v120;
          if (v64 == 1.0)
          {
            v227 = v98;
          }
          else
          {
            CGRect v129 = *(_OWORD *)&v263[24];
            CGRect v130 = *(void *)&v263[40];
            if (v98 >> 62 != 3
              || (v100 & 0xFFFFFF) != 0
              || v98 != 0xC000000000000000
              || (char v131 = v99 | v97, v99 | v97))
            {
              type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
              uint64_t v133 = swift_allocObject();
              *(_OWORD *)(v133 + 16) = xmmword_2461B9DC0;
              *(void *)(v133 + 32) = 0;
              *(void *)(v133 + 40) = 0;
              *(_OWORD *)(v133 + 48) = v129;
              *(void *)(v133 + 64) = v130;
              *(void *)(v133 + 72) = v97;
              *(void *)(v133 + 80) = v98;
              *(void *)(v133 + 88) = v99;
              *(unsigned char *)(v133 + 98) = BYTE2(v100);
              *(_WORD *)(v133 + 96) = v100;
              *(_DWORD *)(v133 + 100) = 0;
              v245 = 0uLL;
              v246 = v129;
              *(void *)v247 = v130;
              *(void *)&v247[8] = v97;
              *(void *)&v247[16] = v98;
              *(void *)&v247[24] = v99;
              BYTE2(v248) = BYTE2(v100);
              LOWORD(v248) = v100;
              DWORD1(v248) = 0;
              outlined copy of DisplayList.Item.Value(v97, v98);
              uint64_t v134 = v98;
              DisplayList.Item.features.getter((__int16 *)&v252);
              v232 = LOWORD(v252.origin.x);
              v245 = 0uLL;
              v246 = v129;
              *(void *)v247 = v130;
              *(void *)&v247[8] = v97;
              *(void *)&v247[16] = v98;
              *(void *)&v247[24] = v99;
              BYTE2(v248) = BYTE2(v100);
              LOWORD(v248) = v100;
              DWORD1(v248) = 0;
              DisplayList.Item.properties.getter(&v252);
              uint64_t v132 = v232;
              char v131 = LOBYTE(v252.origin.x);
            }
            else
            {
              uint64_t v132 = 0;
              uint64_t v133 = MEMORY[0x263F8EE78];
              uint64_t v134 = 0xC000000000000000;
            }
            *(void *)&v263[48] = LODWORD(v64);
            *(void *)&v263[56] = 0x4000000400000000;
            *(void *)&v263[64] = v133;
            v263[74] = v131;
            *(_WORD *)&v263[72] = v132;
            LOBYTE(v245) = v235;
            DisplayList.Item.canonicalize(options:)((char *)&v245);
            outlined consume of DisplayList.Item.Value(v97, v134);
            CGFloat v97 = *(void *)&v263[48];
            int v99 = *(void *)&v263[64];
            v227 = *(void *)&v263[56];
            CGFloat v100 = *(unsigned __int16 *)&v263[72] | (v263[74] << 16);
          }
          v223 = v100;
          v231 = v99;
          v233 = v97;
          int v69 = *(double *)&v263[16];
          int v70 = *(double *)&v263[8];
          CGFloat width = *(double *)&v263[32];
          int v71 = *(void *)&v263[24];
          v196 = *(void *)&v263[40];
          __int16 v5 = *(unsigned int *)&v263[76];
          char v135 = static GraphicsBlendMode.normal;
          uint64_t v136 = byte_26B0EB4A0;
          outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_26B0EB4A0);
          outlined consume of GraphicsBlendMode(v119, v193);
          *(void *)&v264[8] = v135;
          v264[16] = v136;
          *(_DWORD *)&v264[20] = 1065353216;
          v264[24] = 0;
          *(_OWORD *)&v263[48] = xmmword_2461B9DE0;
          *(void *)&v263[64] = 0;
          v263[74] = 0;
          *(_WORD *)&v263[72] = 0;
        }
        *(double *)&v263[8] = y;
        *(double *)&v263[16] = x;
        *(void *)&v263[24] = v65;
        *(double *)&v263[32] = height;
        uint64_t v3 = v265[1];
        uint64_t v4 = v265[2];
        uint64_t v14 = v265[3];
        char v76 = v265[4];
        int v77 = v266;
        int v78 = v265[7];
        char v2 = v265[8];
        int v79 = v238;
        if (v266 >> 30)
        {
          if (v266 >> 30 == 1)
          {
            v189 = v265[5];
            v191 = v265[6];
            outlined copy of _ShapeStyle_RenderedLayers.Layers(v265[1], v265[2], v265[3], v265[4], v265[5], v265[6], v265[7], v265[8], v266);
            outlined copy of DisplayList.Item.Value(v233, v227);
            __int16 v5 = v3;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              __int16 v5 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v3 + 16) + 1, 1, (void *)v3);
            }
            int v81 = *(void *)(v5 + 16);
            int v80 = *(void *)(v5 + 24);
            if (v81 >= v80 >> 1) {
              __int16 v5 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v80 > 1), v81 + 1, 1, (void *)v5);
            }
            *(void *)(v5 + 16) = v81 + 1;
            int v82 = v5 + 72 * v81;
            *(double *)(v82 + 32) = v70 - y;
            *(double *)(v82 + 40) = v69 - x;
            *(void *)(v82 + 48) = v71;
            *(CGFloat *)(v82 + 56) = width;
            *(void *)(v82 + 64) = v196;
            *(void *)(v82 + 72) = v233;
            *(void *)(v82 + 80) = v227;
            *(void *)(v82 + 88) = v231;
            *(unsigned char *)(v82 + 98) = BYTE2(v223);
            *(_WORD *)(v82 + 96) = v223;
            *(_DWORD *)(v82 + 100) = 0;
            outlined consume of DisplayList.Item.Value(v233, v227);
            outlined consume of _ShapeStyle_RenderedLayers.Layers(v3, v4, v14, v76, v189, v191, v78, v2, v77);
            v265[1] = v5;
            memset(&v265[2], 0, 56);
            uint64_t v48 = 0x40000000;
            int v79 = v238;
            long long v49 = v236;
            goto LABEL_20;
          }
          *(double *)&v265[1] = v70;
          *(double *)&v265[2] = v69;
          uint64_t v48 = v223 & 0xFFFFFF | (v5 << 32);
          v265[3] = v71;
          *(CGFloat *)&v265[4] = width;
          v265[5] = v196;
          v265[6] = v233;
          v265[7] = v227;
          v265[8] = v231;
        }
        else
        {
          CGFloat height = *(double *)&v265[1] - y;
          int v83 = *(double *)&v265[2] - x;
          CGFloat y = v70 - y;
          CGFloat x = v69 - x;
          uint64_t v3 = v265[6];
          uint64_t v4 = v265[5];
          type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
          int v84 = swift_allocObject();
          *(_OWORD *)(v84 + 16) = xmmword_2461BDD50;
          *(double *)(v84 + 32) = height;
          *(double *)(v84 + 40) = v83;
          *(void *)(v84 + 48) = v14;
          *(void *)(v84 + 56) = v76;
          *(void *)(v84 + 64) = v4;
          *(void *)(v84 + 72) = v3;
          *(void *)(v84 + 80) = v78;
          *(void *)(v84 + 88) = v2;
          *(unsigned char *)(v84 + 98) = BYTE2(v77);
          *(_WORD *)(v84 + 96) = v77;
          *(_DWORD *)(v84 + 100) = 0;
          *(double *)(v84 + 104) = y;
          *(double *)(v84 + 112) = x;
          *(void *)(v84 + 120) = v71;
          *(CGFloat *)(v84 + 128) = width;
          *(void *)(v84 + 136) = v196;
          *(void *)(v84 + 144) = v233;
          *(void *)(v84 + 152) = v227;
          *(void *)(v84 + 160) = v231;
          *(unsigned char *)(v84 + 170) = BYTE2(v223);
          *(_WORD *)(v84 + 168) = v223;
          *(_DWORD *)(v84 + 172) = 0;
          v265[1] = v84;
          memset(&v265[2], 0, 56);
          uint64_t v48 = 0x40000000;
        }
        long long v49 = v62;
LABEL_20:
        v266 = v48;
        outlined consume of _ShapeStyle_RenderedShape.Shape((void *)v260, *((uint64_t *)&v260 + 1), v261, *((uint64_t *)&v261 + 1), v262[0], *(uint64_t *)&v262[8], *(unint64_t *)&v262[16], *(uint64_t *)&v262[24], *(uint64_t *)&v262[32], *(uint64_t *)&v262[40], *(uint64_t *)&v262[48], *(uint64_t *)&v262[56], *(unsigned int *)&v262[64]);
        uint64_t v43 = v195;
        swift_release_n();
        outlined consume of _ShapeStyle_Pack.Style?(v222, v243, v237, v242, v219, *((uint64_t *)&v241 + 1), v241, v240, v212, v79, v200, v49, v199, v198);
        *(void *)&v260 = v211;
        *((void *)&v260 + 1) = v210;
        *(void *)&v261 = v209;
        *((void *)&v261 + 1) = v208;
        *(void *)&v262[16] = v207;
        *(void *)&v262[24] = v206;
        *(void *)&v262[32] = v205;
        *(void *)&v262[40] = v204;
        *(void *)&v262[48] = v203;
        *(void *)&v262[56] = v202;
        *(_DWORD *)&v262[64] = v201;
        char v47 = *(unsigned int *)(v195 + 60);
        uint64_t v46 = (int)v47;
        *(void *)v262 = v215;
        *(void *)&v262[8] = v213;
        uint64_t v44 = v194;
        swift_beginAccess();
      }
      while (*(void *)(*(void *)(v195 + 24) + 16) > (int)v47);
    }
    *(_DWORD *)(v43 + 60) = 0;
  }
  char v47 = (uint64_t)&v245;
  uint64_t v137 = v265[1];
  v241 = *(_OWORD *)&v265[3];
  v242 = (void *)v265[5];
  v243 = v265[2];
  long long v50 = (void *)v265[6];
  __int16 v5 = v265[7];
  char v2 = v265[8];
  uint64_t v138 = v266;
  if (!(v266 >> 30))
  {
    if (v265[7] >> 62 != 3 || v265[7] != 0xC000000000000000 || v265[8] | v265[6] || (v266 & 0xFFFFFF) != 0)
    {
      type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
      unsigned __int8 v142 = swift_allocObject();
      *(_OWORD *)(v142 + 16) = xmmword_2461B9DC0;
      *(void *)(v142 + 32) = v137;
      *(void *)(v142 + 40) = v243;
      *(_OWORD *)(v142 + 48) = v241;
      *(void *)(v142 + 64) = v242;
      *(void *)(v142 + 72) = v50;
      *(void *)(v142 + 80) = v5;
      *(void *)(v142 + 88) = v2;
      v151 = WORD1(v138);
      *(unsigned char *)(v142 + 98) = BYTE2(v138);
      *(_WORD *)(v142 + 96) = v138;
      v239 = HIDWORD(v138);
      *(_DWORD *)(v142 + 100) = HIDWORD(v138);
      *(void *)&v245 = v137;
      *((void *)&v245 + 1) = v243;
      v246 = v241;
      *(void *)v247 = v242;
      *(void *)&v247[8] = v50;
      *(void *)&v247[16] = v5;
      *(void *)&v247[24] = v2;
      BYTE2(v248) = BYTE2(v138);
      LOWORD(v248) = v138;
      DWORD1(v248) = HIDWORD(v138);
      outlined copy of DisplayList.Item.Value((uint64_t)v50, v5);
      DisplayList.Item.features.getter((__int16 *)&v252);
      v152 = v138;
      LOWORD(v138) = LOWORD(v252.origin.x);
      *(void *)&v245 = v137;
      *((void *)&v245 + 1) = v243;
      v246 = v241;
      *(void *)v247 = v242;
      *(void *)&v247[8] = v50;
      *(void *)&v247[16] = v5;
      *(void *)&v247[24] = v2;
      BYTE2(v248) = v151;
      LOWORD(v248) = v152;
      DWORD1(v248) = v239;
      char v47 = (uint64_t)&v245;
      DisplayList.Item.properties.getter(&v252);
      outlined consume of _ShapeStyle_RenderedLayers.Layers(v137, v243, v241, *((uint64_t *)&v241 + 1), (uint64_t)v242, (uint64_t)v50, v5, v2, v152);
      uint64_t v137 = 0;
      v242 = 0;
      v243 = 0;
      v241 = 0uLL;
      long long v50 = 0;
      __int16 v5 = 0;
      char v2 = 0;
      v141 = LOBYTE(v252.origin.x);
    }
    else
    {
      outlined consume of _ShapeStyle_RenderedLayers.Layers(v265[1], v265[2], v265[3], v265[4], v265[5], 0, 0xC000000000000000, 0, v266);
      uint64_t v137 = 0;
      v242 = 0;
      v243 = 0;
      v241 = 0uLL;
      long long v50 = 0;
      __int16 v5 = 0;
      char v2 = 0;
      LOWORD(v138) = 0;
      v141 = 0;
      unsigned __int8 v142 = MEMORY[0x263F8EE78];
    }
LABEL_162:
    char v143 = 0x80000000;
    goto LABEL_163;
  }
  if (v266 >> 30 == 1)
  {
    __int16 v139 = swift_bridgeObjectRetain();
    v240 = v137;
    DisplayList.init(_:)(v139, (uint64_t)&v252);
    v245 = *(_OWORD *)&v262[72];
    v246 = *(_OWORD *)&v262[88];
    *(void *)v247 = *(void *)&v263[40];
    *(_OWORD *)&v247[8] = xmmword_2461B9DD0;
    *(CGFloat *)&v247[24] = v252.origin.x;
    BYTE2(v248) = BYTE2(v252.origin.y);
    LOWORD(v248) = LOWORD(v252.origin.y);
    DWORD1(v248) = *(_DWORD *)&v263[76];
    LOBYTE(v252.origin.x) = v188;
    DisplayList.Item.canonicalize(options:)((char *)&v252);
    CGFloat y = *((double *)&v245 + 1);
    CGFloat x = *(double *)&v245;
    CGFloat height = *((double *)&v246 + 1);
    CGFloat width = *(double *)&v246;
    uint64_t v3 = *(void *)&v247[8];
    uint64_t v14 = *(void *)v247;
    uint64_t v4 = *(void *)&v247[24];
    LODWORD(v43) = (unsigned __int16)v248 | (BYTE2(v248) << 16);
    LODWORD(v237) = DWORD1(v248);
    uint64_t v140 = *(void *)&v247[16] >> 62;
    if (*(void *)&v247[16] >> 62 != 3
      || (v43 & 0xFFFFFF) != 0
      || *(void *)&v247[16] != 0xC000000000000000
      || *(void *)&v247[24] | *(void *)&v247[8])
    {
      LODWORD(v236) = v138;
      v238 = *(void *)&v247[16];
      type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
      v144 = swift_allocObject();
      char v145 = v238;
      *(_OWORD *)(v144 + 16) = xmmword_2461B9DC0;
      *(double *)(v144 + 32) = x;
      *(double *)(v144 + 40) = y;
      *(CGFloat *)(v144 + 48) = width;
      *(double *)(v144 + 56) = height;
      *(void *)(v144 + 64) = v14;
      *(void *)(v144 + 72) = v3;
      *(void *)(v144 + 80) = v238;
      *(void *)(v144 + 88) = v4;
      float32x4_t v146 = WORD1(v43);
      *(unsigned char *)(v144 + 98) = BYTE2(v43);
      *(_WORD *)(v144 + 96) = v43;
      char v147 = v140;
      v148 = v237;
      *(_DWORD *)(v144 + 100) = v237;
      v149 = v3;
      LOWORD(v138) = 0;
      v233 = v144;
      switch(v147)
      {
        case 1:
          LODWORD(v231) = WORD1(v43);
          v230 = v43;
          switch(BYTE4(v238))
          {
            case 2:
              outlined copy of DisplayList.Item.Value(v3, v238);
              outlined copy of DisplayList.Item.Value(v3, v238);
              swift_bridgeObjectRelease();
              outlined consume of DisplayList.Effect(v3, v238, 2);
              v149 = v3;
              LODWORD(v153) = (v3 >> 2) & 1;
              break;
            case 3:
              outlined init with copy of AnyTrackedValue(v3 + 16, (uint64_t)&v252);
              v214 = v252.size.height;
              v153 = v253;
              __swift_project_boxed_opaque_existential_1(&v252, *(uint64_t *)&v252.size.height);
              v218 = (id)v2;
              v167 = *(void (**)(__int16 *__return_ptr, void, uint64_t))(v153 + 56);
              outlined copy of DisplayList.Item.Value(v3, v238);
              outlined copy of DisplayList.Item.Value(v3, v238);
              v167(&v244, *(void *)&v214, v153);
              char v2 = (uint64_t)v218;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v252);
              swift_bridgeObjectRelease();
              outlined consume of DisplayList.Effect(v3, v238, 3);
              v149 = v3;
              LOWORD(v153) = v244;
              break;
            case 7:
              LOWORD(v153) = *(_WORD *)(v3 + 24);
              outlined copy of DisplayList.Item.Value(v3, v238);
              outlined copy of DisplayList.Item.Value(v3, v238);
              swift_bridgeObjectRelease();
              outlined consume of DisplayList.Effect(v3, v238, 7);
              v149 = v3;
              break;
            case 0xA:
              outlined copy of DisplayList.Item.Value(v3, v238);
              outlined copy of DisplayList.Item.Value(v3, v238);
              swift_bridgeObjectRelease();
              outlined consume of DisplayList.Effect(v3, v238, 10);
              v149 = v3;
              LOWORD(v153) = 4;
              break;
            case 0xC:
              outlined copy of DisplayList.Item.Value(v3, v238);
              outlined copy of DisplayList.Item.Value(v3, v238);
              swift_bridgeObjectRelease();
              outlined consume of DisplayList.Effect(v3, v238, 12);
              v149 = v3;
              LOWORD(v153) = 2;
              break;
            case 0xE:
              outlined copy of DisplayList.Item.Value(v3, v238);
              outlined copy of DisplayList.Item.Value(v3, v238);
              swift_bridgeObjectRelease();
              v168 = v3;
              v169 = v238;
              LOBYTE(v170) = 14;
              goto LABEL_143;
            case 0xF:
              outlined copy of DisplayList.Item.Value(v3, v238);
              outlined copy of DisplayList.Item.Value(v3, v238);
              swift_bridgeObjectRelease();
              outlined consume of DisplayList.Effect(v3, v238, 15);
              v149 = v3;
              LOWORD(v153) = 64;
              break;
            case 0x10:
              outlined copy of DisplayList.Item.Value(v3, v238);
              outlined copy of DisplayList.Item.Value(v3, v238);
              swift_bridgeObjectRelease();
              outlined consume of DisplayList.Effect(v3, v238, 16);
              v149 = v3;
              LOWORD(v153) = 32;
              break;
            case 0x11:
              (*(void (**)(CGRect *__return_ptr))(*(void *)v3 + 112))(&v252);
              v221 = LOWORD(v252.origin.x);
              v226 = v50;
              v171 = v5;
              v172 = v2;
              v153 = v14;
              v173 = v43;
              uint64_t v43 = v4;
              v174 = (unsigned __int16)word_26FA429C8;
              v175 = (unsigned __int16)word_26FA429CA;
              outlined copy of DisplayList.Item.Value(v3, v238);
              outlined copy of DisplayList.Item.Value(v3, v238);
              swift_bridgeObjectRelease();
              outlined consume of DisplayList.Effect(v3, v238, 17);
              v149 = v3;
              if ((v175 & ~v174) != 0) {
                v176 = v175;
              }
              else {
                v176 = 0;
              }
              v177 = v221 | v174;
              uint64_t v4 = v43;
              LOWORD(v43) = v173;
              uint64_t v14 = v153;
              char v2 = v172;
              __int16 v5 = v171;
              long long v50 = v226;
              LOWORD(v153) = v177 | v176;
              break;
            default:
              outlined copy of DisplayList.Item.Value(v3, v238);
              outlined copy of DisplayList.Item.Value(v3, v238);
              swift_bridgeObjectRelease();
              v168 = v3;
              v169 = v238;
              v170 = HIDWORD(v238);
LABEL_143:
              outlined consume of DisplayList.Effect(v168, v169, v170);
              v149 = v3;
              LOWORD(v153) = 0;
              break;
          }
          LOWORD(v138) = v153 | v230;
          char v145 = v238;
          v148 = v237;
          goto LABEL_159;
        case 2:
          LODWORD(v231) = WORD1(v43);
          v154 = *(void *)(v3 + 16);
          if (!v154)
          {
            LOWORD(v138) = 128;
            goto LABEL_134;
          }
          if (v154 == 1)
          {
            v155 = 0;
            LODWORD(v138) = 128;
          }
          else
          {
            v156 = 0;
            v155 = v154 & 0x7FFFFFFFFFFFFFFELL;
            v157 = (unsigned __int16 *)(v3 + 104);
            v158 = 128;
            v159 = v154 & 0x7FFFFFFFFFFFFFFELL;
            do
            {
              v160 = *(v157 - 20);
              v161 = *v157;
              v157 += 40;
              v158 |= v160;
              v156 |= v161;
              v159 -= 2;
            }
            while (v159);
            LODWORD(v138) = v156 | v158;
            if (v154 == v155)
            {
LABEL_134:
              outlined copy of DisplayList.Item.Value(v3, v238);
              char v145 = v238;
              v149 = v3;
              goto LABEL_159;
            }
          }
          v162 = v154 - v155;
          v163 = (unsigned __int16 *)(v3 + 40 * v155 + 64);
          do
          {
            v164 = *v163;
            v163 += 20;
            LODWORD(v138) = v164 | v138;
            --v162;
          }
          while (v162);
          goto LABEL_134;
        case 3:
          goto LABEL_160;
        default:
          LODWORD(v231) = WORD1(v43);
          switch(v3 >> 60)
          {
            case 6uLL:
              outlined init with copy of AnyTrackedValue((v3 & 0xFFFFFFFFFFFFFFFLL) + 16, (uint64_t)&v252);
              v220 = v252.size.height;
              uint64_t v138 = v253;
              __swift_project_boxed_opaque_existential_1(&v252, *(uint64_t *)&v252.size.height);
              v229 = v14;
              v150 = *(void (**)(__int16 *__return_ptr, void, unint64_t))(v138 + 40);
              outlined copy of DisplayList.Item.Value(v3, v238);
              v150(&v244, *(void *)&v220, v138);
              v148 = v237;
              uint64_t v14 = v229;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v252);
              char v145 = v238;
              v149 = v3;
              LOWORD(v138) = v244;
              goto LABEL_159;
            case 8uLL:
              v165 = *(void *)((v3 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
              if (!*(void *)(v165 + 216)) {
                goto LABEL_132;
              }
              v216 = *(id *)(v165 + 216);
              v225 = *(void *)((v3 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
              outlined copy of DisplayList.Item.Value(v3, v238);
              outlined copy of DisplayList.Item.Value(v3, v238);
              v227 = v3;
              outlined copy of DisplayList.Item.Value(v3, v238);
              swift_retain();
              swift_retain();
              if ((uint64_t)objc_msgSend(v216, sel_length) <= 0) {
                goto LABEL_154;
              }
              if (one-time initialization token for updateSchedule != -1) {
                swift_once();
              }
              v166 = static NSAttributedStringKey.updateSchedule;
              objc_msgSend(v216, sel_length);
              if (!objc_msgSend(v216, sel_attribute_atIndex_effectiveRange_, v166, 0, 0))
              {
                memset(&v252, 0, sizeof(v252));
                outlined destroy of CoordinateSpaceGesture<CGFloat>((uint64_t)&v252, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0]);
                outlined consume of DisplayList.Item.Value(v3, v238);
                swift_release();
                swift_release();
                outlined consume of DisplayList.Item.Value(v3, v238);
                goto LABEL_156;
              }
              _bridgeAnyObjectToAny(_:)();
              swift_unknownObjectRelease();
              outlined destroy of CoordinateSpaceGesture<CGFloat>((uint64_t)&v252, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0]);
              v217 = *(unsigned char *)(v225 + 256);
              outlined consume of DisplayList.Item.Value(v3, v238);
              swift_release();
              swift_release();
              outlined consume of DisplayList.Item.Value(v3, v238);
              v148 = v237;
              if ((v217 & 1) == 0) {
                goto LABEL_157;
              }
              LOWORD(v138) = 8;
              break;
            case 9uLL:
              LOWORD(v138) = *(_WORD *)((v3 & 0xFFFFFFFFFFFFFFFLL) + 0x18) | 0x200;
              goto LABEL_134;
            case 0xBuLL:
              goto LABEL_136;
            case 0xCuLL:
              outlined copy of DisplayList.Item.Value(v3, v238);
              char v145 = v238;
              v149 = v3;
LABEL_136:
              outlined copy of DisplayList.Item.Value(v149, v145);
              char v145 = v238;
              v149 = v3;
              LOWORD(v138) = 2;
              goto LABEL_159;
            default:
LABEL_132:
              outlined copy of DisplayList.Item.Value(v3, v238);
              goto LABEL_157;
          }
          goto LABEL_158;
      }
    }
    outlined consume of DisplayList.Item.Value(0, 0xC000000000000000);
    outlined consume of _ShapeStyle_RenderedLayers.Layers(v240, v243, v241, *((uint64_t *)&v241 + 1), (uint64_t)v242, (uint64_t)v50, v5, v2, v138);
    v141 = 0;
    LOWORD(v138) = 0;
    unsigned __int8 v142 = MEMORY[0x263F8EE78];
LABEL_161:
    uint64_t v137 = 0;
    v242 = 0;
    v243 = 0;
    v241 = 0uLL;
    long long v50 = 0;
    __int16 v5 = 0;
    char v2 = 0;
    goto LABEL_162;
  }
  char v143 = v266;
  LOWORD(v138) = 0;
  v141 = 0;
  unsigned __int8 v142 = MEMORY[0x263F8EE78];
LABEL_163:
  *(void *)&v245 = v142;
  WORD4(v245) = v138;
  BYTE10(v245) = v141;
  AGGraphSetOutputValue();
  _s7SwiftUI4PathVWOrTm_0((uint64_t)v267, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
  swift_bridgeObjectRelease();
  v180 = *(_OWORD *)&v263[64];
  *(_OWORD *)(v47 + 192) = *(_OWORD *)&v263[48];
  *(_OWORD *)(v47 + 208) = v180;
  *(_OWORD *)(v47 + 224) = *(_OWORD *)v264;
  *(_OWORD *)(v47 + 233) = *(_OWORD *)&v264[9];
  v181 = *(_OWORD *)v263;
  *(_OWORD *)(v47 + 128) = *(_OWORD *)&v262[96];
  *(_OWORD *)(v47 + 144) = v181;
  v182 = *(_OWORD *)&v263[32];
  *(_OWORD *)(v47 + 160) = *(_OWORD *)&v263[16];
  *(_OWORD *)(v47 + 176) = v182;
  v248 = *(_OWORD *)&v262[32];
  v249 = *(_OWORD *)&v262[48];
  v250 = *(_OWORD *)&v262[64];
  v251 = *(_OWORD *)&v262[80];
  v245 = v260;
  v246 = v261;
  *(_OWORD *)v247 = *(_OWORD *)v262;
  *(_OWORD *)&v247[16] = *(_OWORD *)&v262[16];
  outlined release of _ShapeStyle_RenderedShape((uint64_t)&v245);
  swift_release();
  outlined consume of _ShapeStyle_RenderedLayers.Layers(v137, v243, v241, *((uint64_t *)&v241 + 1), (uint64_t)v242, (uint64_t)v50, v5, v2, v143);
  return swift_bridgeObjectRelease();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t *v5;
  long long *v6;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  int v10;
  uint64_t Value;
  CGFloat v12;
  int v13;
  uint64_t v14;
  char v15;
  int v16;
  unint64_t v17;
  int v18;
  unsigned int v19;
  int v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  int v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  int v28;
  unint64_t v29;
  int v30;
  unint64_t v31;
  int v32;
  double *v33;
  double v34;
  double v35;
  double *v36;
  double v37;
  double v38;
  uint64_t v39;
  CGFloat v40;
  CGFloat v41;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  unsigned __int8 v53;
  long long v54;
  long long v55;
  long long v56;
  long long v57;
  long long v58;
  long long v59;
  long long v60;
  long long v61;
  long long v62;
  long long v63;
  unsigned int v64;
  long long v65;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unsigned int v73;
  int v74;
  int v75;
  int v76;
  unint64_t v77;
  char v78;
  uint64_t v79;
  __int16 v80;
  char v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  long long v95;
  long long v96;
  unsigned char v97[32];
  __int16 v98;
  CGFloat v99;
  CGFloat v100;
  CGFloat v101;
  CGFloat v102;
  uint64_t v103;
  int v104;
  CGFloat v105;
  CGFloat v106;
  CGFloat v107;
  CGFloat v108;
  unint64_t v109;
  uint64_t v110;
  __int16 v111;
  char v112;
  int v113;
  char v114;
  int v115;
  uint64_t v116;
  char v117;
  int v118;
  char v119;
  uint64_t v120;
  long long v121;
  long long v122;
  long long v123;
  long long v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  long long v128;
  long long v129;
  long long v130;
  uint64_t v131;
  CGRect v132;
  CGRect v133;
  CGRect v134;
  CGRect v135;

  char v131 = *MEMORY[0x263EF8340];
  int v10 = *((_DWORD *)v0 + 3);
  type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for AnimatedShape<Rectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Rectangle._Inset and conformance Rectangle._Inset, (uint64_t)&type metadata for Rectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  uint64_t Value = AGGraphGetValue();
  double v12 = *(double *)Value;
  double v13 = *(unsigned __int8 *)(Value + 8);
  uint64_t v14 = *(unsigned __int8 *)(Value + 9);
  if ((v15 & 1) != 0 || !*((_WORD *)v0 + 25))
  {
    char v17 = ++static DisplayList.Version.lastValue;
  }
  else
  {
    uint64_t v126 = *(uint64_t *)((char *)v0 + 28);
    CGRect v127 = v10;
    uint64_t v16 = AGGraphAnyInputsChanged();
    char v17 = ++static DisplayList.Version.lastValue;
    if (!v16) {
      goto LABEL_9;
    }
  }
  int v18 = (2 * ((33 * (v17 >> 16)) ^ v17)) | 1;
  if (!v17) {
    LOWORD(v18) = 0;
  }
  *((_WORD *)v0 + 25) = v18;
LABEL_9:
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x263F288F8])
  {
    __break(1u);
LABEL_20:
    char v73 = v19;
    swift_once();
    unint64_t v19 = v73;
    goto LABEL_14;
  }
  __int16 v75 = v14;
  char v76 = v13;
  int v20 = *((_DWORD *)v0 + 10);
  int v21 = AGCreateWeakAttribute();
  unint64_t v22 = v21;
  unint64_t v72 = HIDWORD(v21);
  int v23 = AGCreateWeakAttribute();
  unint64_t v24 = v23;
  int v71 = HIDWORD(v23);
  uint64_t v74 = v20;
  int v25 = AGCreateWeakAttribute();
  unint64_t v26 = v25;
  int v70 = HIDWORD(v25);
  int v27 = AGCreateWeakAttribute();
  unint64_t v28 = v27;
  int v69 = HIDWORD(v27);
  int v29 = AGCreateWeakAttribute();
  unint64_t v30 = v29;
  unint64_t v68 = HIDWORD(v29);
  int v31 = AGCreateWeakAttribute();
  unint64_t v32 = v31;
  unint64_t v67 = HIDWORD(v31);
  int v77 = v17;
  int v33 = (double *)AGGraphGetValue();
  long long v34 = *v33;
  double v35 = v33[1];
  double v36 = (double *)AGGraphGetValue();
  Swift::Double_optional v37 = v34 - *v36;
  double v38 = v35 - v36[1];
  double v39 = AGGraphGetValue();
  uint64_t v40 = *(double *)v39;
  CGFloat v41 = *(double *)(v39 + 8);
  _threadGeometryProxyData();
  int v82 = v22;
  int v83 = v72;
  int v84 = v24;
  int v85 = v71;
  int v86 = v26;
  int v87 = v70;
  int v88 = v28;
  int v89 = v69;
  long long v90 = v30;
  long long v91 = v68;
  __int16 v92 = v32;
  __int16 v93 = v67;
  CGFloat v94 = v17;
  _setThreadGeometryProxyData();
  v132.origin.CGFloat x = 0.0;
  v132.origin.CGFloat y = 0.0;
  v132.size.CGFloat width = v40;
  v132.size.CGFloat height = v41;
  uint64_t v133 = CGRectInset(v132, v12, v12);
  CGFloat x = v133.origin.x;
  CGFloat y = v133.origin.y;
  CGFloat width = v133.size.width;
  CGFloat height = v133.size.height;
  if (CGRectIsNull(v133))
  {
    char v2 = 0;
    uint64_t v3 = 0;
    uint64_t v14 = 0;
    char v17 = 0;
    uint64_t v46 = 6;
  }
  else
  {
    uint64_t v46 = 0;
    char v2 = *(void *)&x;
    uint64_t v3 = *(void *)&y;
    uint64_t v14 = *(void *)&width;
    char v17 = *(void *)&height;
  }
  __int16 v5 = &v126;
  char v6 = &v95;
  _setThreadGeometryProxyData();
  char v47 = *v0;
  uint64_t v121 = 0u;
  int v122 = 0u;
  long long v123 = 0u;
  long long v124 = 0u;
  uint64_t v120 = v47;
  long long v125 = 0x80000000;
  swift_retain();
  outlined copy of Path.Storage(v2, v3, v14, v17, v46);
  v134.origin.CGFloat x = 0.0;
  v134.origin.CGFloat y = 0.0;
  v134.size.CGFloat width = v40;
  v134.size.CGFloat height = v41;
  char v135 = CGRectOffset(v134, v37, v38);
  double v12 = v135.origin.x;
  uint64_t v7 = v135.origin.y;
  uint64_t v8 = v135.size.width;
  double v9 = v135.size.height;
  unint64_t v19 = v46;
  unsigned int v1 = v17;
  LODWORD(v17) = *((_DWORD *)v0 + 2);
  LOWORD(v13) = *((_WORD *)v0 + 25);
  uint64_t v4 = *((unsigned char *)v0 + 48);
  if (one-time initialization token for normal != -1) {
    goto LABEL_20;
  }
LABEL_14:
  uint64_t v48 = 0x10000;
  if (!v75) {
    uint64_t v48 = 0;
  }
  long long v49 = 256;
  if (!v76) {
    long long v49 = 0;
  }
  long long v50 = static GraphicsBlendMode.normal;
  long long v51 = byte_26B0EB4A0;
  int v78 = byte_26B0EB4A0;
  *(void *)&CGFloat v95 = v2;
  *((void *)&v95 + 1) = v3;
  *(void *)&CGFloat v96 = v14;
  *((void *)&v96 + 1) = v1;
  *(void *)CGFloat v97 = v48 | v49 | v19;
  *(_OWORD *)&v97[8] = 0u;
  *(long long *)((char *)v6 + 56) = 0u;
  *(long long *)((char *)v6 + 72) = 0u;
  *(long long *)((char *)v6 + 84) = 0u;
  uint64_t v98 = v13;
  int v99 = v12;
  CGFloat v100 = v7;
  CGFloat v101 = v8;
  CGFloat v102 = v9;
  CGFloat v103 = 0;
  unint64_t v104 = 0;
  uint64_t v105 = v12;
  __int16 v106 = v7;
  char v107 = v8;
  int v108 = v9;
  v6[12] = xmmword_2461B9DE0;
  char v109 = v77;
  int v110 = 0;
  char v112 = 0;
  uint64_t v111 = 0;
  int v113 = v17;
  char v114 = v4;
  uint64_t v115 = v74;
  long long v116 = v50;
  long long v117 = v78;
  long long v118 = 1065353216;
  long long v119 = 0;
  LOBYTE(v126) = 0;
  long long v52 = *((unsigned int *)v0 + 4);
  long long v53 = v19;
  outlined copy of GraphicsBlendMode(v50, v51);
  _ShapeStyle_RenderedShape.renderItem(name:styles:layers:)((unsigned __int8 *)&v126, v52, (uint64_t)&v120);
  LOBYTE(v126) = v4;
  _ShapeStyle_RenderedLayers.commit(shape:options:)((unint64_t)&v95, (char *)&v126, (uint64_t)&v79);
  uint64_t v126 = v79;
  LOWORD(v127) = v80;
  BYTE2(v127) = v81;
  AGGraphSetOutputValue();
  outlined consume of Path.Storage(v2, v3, v14, v1, v53);
  swift_bridgeObjectRelease();
  long long v54 = v6[13];
  CGRect v128 = v6[12];
  CGRect v129 = v54;
  CGRect v130 = v6[14];
  *(_OWORD *)((char *)v5 + 233) = *(long long *)((char *)v6 + 233);
  long long v55 = v6[9];
  *((_OWORD *)v5 + 8) = v6[8];
  *((_OWORD *)v5 + 9) = v55;
  long long v56 = v6[11];
  *((_OWORD *)v5 + 10) = v6[10];
  *((_OWORD *)v5 + 11) = v56;
  long long v57 = v6[5];
  *((_OWORD *)v5 + 4) = v6[4];
  *((_OWORD *)v5 + 5) = v57;
  long long v58 = v6[7];
  *((_OWORD *)v5 + 6) = v6[6];
  *((_OWORD *)v5 + 7) = v58;
  unsigned int v59 = v96;
  *(_OWORD *)__int16 v5 = v95;
  *((_OWORD *)v5 + 1) = v59;
  long long v60 = *(_OWORD *)&v97[16];
  *((_OWORD *)v5 + 2) = *(_OWORD *)v97;
  *((_OWORD *)v5 + 3) = v60;
  outlined release of _ShapeStyle_RenderedShape((uint64_t)&v126);
  int64x2_t v61 = v121;
  char v62 = v122;
  unint64_t v63 = v123;
  unint64_t v65 = v124;
  unint64_t v64 = v125;
  swift_release();
  return outlined consume of _ShapeStyle_RenderedLayers.Layers(v61, *((uint64_t *)&v61 + 1), v62, *((uint64_t *)&v62 + 1), v63, *((uint64_t *)&v63 + 1), v65, *((uint64_t *)&v65 + 1), v64);
}

{
  uint64_t *v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  __int16 v4;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  int v9;
  uint64_t Value;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int v15;
  unint64_t v16;
  int v17;
  int v18;
  unint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unsigned int v24;
  unint64_t v25;
  unsigned int v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  unsigned int v30;
  double *v31;
  double v32;
  double v33;
  double *v34;
  CGFloat v35;
  CGFloat v36;
  uint64_t v37;
  CGFloat v38;
  CGFloat v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  long long v45;
  long long v46;
  long long v47;
  unsigned int v48;
  long long v49;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  int v58;
  int v59;
  unint64_t v60;
  uint64_t v61;
  __int16 v62;
  char v63;
  long long v64;
  long long v65;
  unsigned char v66[80];
  long long v67;
  long long v68;
  long long v69;
  long long v70;
  long long v71;
  long long v72;
  long long v73;
  unsigned char v74[25];
  uint64_t v75;
  long long v76;
  long long v77;
  long long v78;
  long long v79;
  uint64_t v80;
  long long v81;
  long long v82;
  long long v83;
  long long v84;
  long long v85;
  long long v86;
  long long v87;
  long long v88;
  long long v89;
  long long v90;
  long long v91;
  long long v92;
  long long v93;
  long long v94;
  _OWORD v95[2];
  void v96[4];
  unsigned __int8 v97;
  uint64_t v98;
  CGRect v99;
  CGRect v100;

  uint64_t v98 = *MEMORY[0x263EF8340];
  double v9 = *((_DWORD *)v0 + 3);
  type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for AnimatedShape<AnyShape>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyShape and conformance AnyShape, (uint64_t)&type metadata for AnyShape, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  uint64_t Value = AGGraphGetValue();
  uint64_t v11 = *(void *)Value;
  double v12 = *(unsigned __int8 *)(Value + 8);
  double v13 = *(unsigned __int8 *)(Value + 9);
  if ((v14 & 1) != 0 || !*((_WORD *)v0 + 25))
  {
    swift_retain();
    uint64_t v16 = ++static DisplayList.Version.lastValue;
  }
  else
  {
    *(void *)&int v81 = *(uint64_t *)((char *)v0 + 28);
    DWORD2(v81) = v9;
    swift_retain();
    uint64_t v15 = AGGraphAnyInputsChanged();
    uint64_t v16 = ++static DisplayList.Version.lastValue;
    if (!v15) {
      goto LABEL_9;
    }
  }
  char v17 = (2 * ((33 * (v16 >> 16)) ^ v16)) | 1;
  if (!v16) {
    LOWORD(v17) = 0;
  }
  *((_WORD *)v0 + 25) = v17;
LABEL_9:
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    long long v58 = v13;
    unsigned int v59 = v12;
    int v18 = *((_DWORD *)v0 + 10);
    long long v60 = v16;
    unint64_t v19 = AGCreateWeakAttribute();
    int v20 = v19;
    long long v56 = HIDWORD(v19);
    int v21 = AGCreateWeakAttribute();
    unint64_t v22 = v21;
    long long v55 = HIDWORD(v21);
    long long v57 = v18;
    int v23 = AGCreateWeakAttribute();
    unint64_t v24 = v23;
    long long v54 = HIDWORD(v23);
    int v25 = AGCreateWeakAttribute();
    unint64_t v26 = v25;
    long long v53 = HIDWORD(v25);
    int v27 = AGCreateWeakAttribute();
    unint64_t v28 = v27;
    long long v52 = HIDWORD(v27);
    int v29 = AGCreateWeakAttribute();
    unint64_t v30 = v29;
    long long v51 = HIDWORD(v29);
    int v31 = (double *)AGGraphGetValue();
    unint64_t v32 = *v31;
    int v33 = v31[1];
    long long v34 = (double *)AGGraphGetValue();
    double v35 = v32 - *v34;
    double v36 = v33 - v34[1];
    Swift::Double_optional v37 = AGGraphGetValue();
    double v38 = *(double *)v37;
    double v39 = *(double *)(v37 + 8);
    _threadGeometryProxyData();
    *(void *)&int v81 = __PAIR64__(v56, v20);
    *((void *)&v81 + 1) = __PAIR64__(v55, v22);
    *(void *)&int v82 = __PAIR64__(v54, v24);
    *((void *)&v82 + 1) = __PAIR64__(v53, v26);
    *(void *)&int v83 = __PAIR64__(v52, v28);
    *((void *)&v83 + 1) = __PAIR64__(v51, v30);
    LODWORD(v84) = v16;
    _setThreadGeometryProxyData();
    uint64_t v40 = swift_retain();
    specialized Shape.effectivePath(in:)(v40, (uint64_t)v96, *(unint64_t *)&v38);
    uint64_t v16 = v96[0];
    double v12 = v96[1];
    double v13 = v96[2];
    unsigned int v1 = v96[3];
    uint64_t v3 = v97;
    swift_release();
    _setThreadGeometryProxyData();
    CGFloat v41 = *v0;
    char v76 = 0u;
    int v77 = 0u;
    int v78 = 0u;
    int v79 = 0u;
    __int16 v75 = v41;
    int v80 = 0x80000000;
    swift_retain();
    _s7SwiftUI4PathVWOrTm_0((uint64_t)v96, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
    v99.origin.CGFloat x = 0.0;
    v99.origin.CGFloat y = 0.0;
    v99.size.CGFloat width = v38;
    v99.size.CGFloat height = v39;
    CGFloat v100 = CGRectOffset(v99, v35, v36);
    CGFloat x = v100.origin.x;
    CGFloat y = v100.origin.y;
    CGFloat width = v100.size.width;
    CGFloat height = v100.size.height;
    LODWORD(v11) = *((_DWORD *)v0 + 2);
    uint64_t v4 = *((_WORD *)v0 + 25);
    char v2 = *((unsigned char *)v0 + 48);
    if (one-time initialization token for normal == -1) {
      goto LABEL_11;
    }
  }
  swift_once();
LABEL_11:
  CGFloat v42 = 0x10000;
  if (!v58) {
    CGFloat v42 = 0;
  }
  uint64_t v43 = 256;
  if (!v59) {
    uint64_t v43 = 0;
  }
  *(void *)&unint64_t v64 = v16;
  *((void *)&v64 + 1) = v12;
  *(void *)&unint64_t v65 = v13;
  *((void *)&v65 + 1) = v1;
  *(void *)unint64_t v66 = v42 | v43 | v3;
  memset(&v66[8], 0, 60);
  *(_WORD *)&v66[68] = v4;
  *(CGFloat *)&v66[72] = x;
  *(CGFloat *)&unint64_t v67 = y;
  *((CGFloat *)&v67 + 1) = width;
  unint64_t v68 = *(unint64_t *)&height;
  LODWORD(v69) = 0;
  *((CGFloat *)&v69 + 1) = x;
  *(CGFloat *)&int v70 = y;
  *((CGFloat *)&v70 + 1) = width;
  *(CGFloat *)&int v71 = height;
  unint64_t v72 = xmmword_2461B9DE0;
  *((void *)&v71 + 1) = v60;
  *(void *)&char v73 = 0;
  BYTE10(v73) = 0;
  WORD4(v73) = 0;
  HIDWORD(v73) = v11;
  v74[0] = v2;
  *(_DWORD *)&v74[4] = v57;
  *(void *)&v74[8] = static GraphicsBlendMode.normal;
  v74[16] = byte_26B0EB4A0;
  *(_DWORD *)&v74[20] = 1065353216;
  v74[24] = 0;
  LOBYTE(v81) = 0;
  uint64_t v44 = *((unsigned int *)v0 + 4);
  outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_26B0EB4A0);
  _ShapeStyle_RenderedShape.renderItem(name:styles:layers:)((unsigned __int8 *)&v81, v44, (uint64_t)&v75);
  LOBYTE(v81) = v2;
  _ShapeStyle_RenderedLayers.commit(shape:options:)((unint64_t)&v64, (char *)&v81, (uint64_t)&v61);
  *(void *)&int v81 = v61;
  WORD4(v81) = v62;
  BYTE10(v81) = v63;
  AGGraphSetOutputValue();
  _s7SwiftUI4PathVWOrTm_0((uint64_t)v96, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
  swift_bridgeObjectRelease();
  __int16 v93 = v72;
  CGFloat v94 = v73;
  v95[0] = *(_OWORD *)v74;
  *(_OWORD *)((char *)v95 + 9) = *(_OWORD *)&v74[9];
  int v89 = v68;
  long long v90 = v69;
  long long v91 = v70;
  __int16 v92 = v71;
  int v85 = *(_OWORD *)&v66[32];
  int v86 = *(_OWORD *)&v66[48];
  int v87 = *(_OWORD *)&v66[64];
  int v88 = v67;
  int v81 = v64;
  int v82 = v65;
  int v83 = *(_OWORD *)v66;
  int v84 = *(_OWORD *)&v66[16];
  outlined release of _ShapeStyle_RenderedShape((uint64_t)&v81);
  uint64_t v45 = v76;
  uint64_t v46 = v77;
  char v47 = v78;
  long long v49 = v79;
  uint64_t v48 = v80;
  swift_release();
  outlined consume of _ShapeStyle_RenderedLayers.Layers(v45, *((uint64_t *)&v45 + 1), v46, *((uint64_t *)&v46 + 1), v47, *((uint64_t *)&v47 + 1), v49, *((uint64_t *)&v49 + 1), v48);
  return swift_release();
}

{
  uint64_t *v0;
  unsigned int v1;
  char v2;
  uint64_t *v3;
  long long *v4;
  __int16 v5;
  uint64_t *v6;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  int v11;
  unsigned __int8 *Value;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int v16;
  unint64_t v17;
  int v18;
  int v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  int v27;
  unint64_t v28;
  int v29;
  unint64_t v30;
  int v31;
  double *v32;
  double v33;
  double v34;
  double *v35;
  double v36;
  double v37;
  uint64_t v38;
  CGFloat v39;
  CGFloat v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  long long v47;
  long long v48;
  long long v49;
  long long v50;
  long long v51;
  long long v52;
  long long v53;
  long long v54;
  long long v55;
  long long v56;
  unsigned int v57;
  long long v58;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  int v66;
  int v67;
  int v68;
  unint64_t v69;
  char v70;
  uint64_t v71;
  __int16 v72;
  char v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  long long v87;
  long long v88;
  unsigned char v89[32];
  __int16 v90;
  CGFloat v91;
  CGFloat v92;
  CGFloat v93;
  CGFloat v94;
  uint64_t v95;
  int v96;
  CGFloat v97;
  CGFloat v98;
  CGFloat v99;
  CGFloat v100;
  unint64_t v101;
  uint64_t v102;
  __int16 v103;
  char v104;
  int v105;
  char v106;
  int v107;
  uint64_t v108;
  char v109;
  int v110;
  char v111;
  uint64_t v112;
  long long v113;
  long long v114;
  long long v115;
  long long v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  CGRect v121;
  CGRect v122;
  CGRect v123;
  CGRect v124;

  uint64_t v120 = *MEMORY[0x263EF8340];
  uint64_t v11 = *((_DWORD *)v0 + 3);
  type metadata accessor for _ShapeView<Ellipse, ForegroundStyle>();
  uint64_t Value = (unsigned __int8 *)AGGraphGetValue();
  double v13 = *Value;
  uint64_t v14 = Value[1];
  if ((v15 & 1) != 0 || !*((_WORD *)v0 + 25))
  {
    char v17 = ++static DisplayList.Version.lastValue;
  }
  else
  {
    long long v118 = *(uint64_t *)((char *)v0 + 28);
    long long v119 = v11;
    uint64_t v16 = AGGraphAnyInputsChanged();
    char v17 = ++static DisplayList.Version.lastValue;
    if (!v16) {
      goto LABEL_9;
    }
  }
  int v18 = (2 * ((33 * (v17 >> 16)) ^ v17)) | 1;
  if (!v17) {
    LOWORD(v18) = 0;
  }
  *((_WORD *)v0 + 25) = v18;
LABEL_9:
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x263F288F8])
  {
    __break(1u);
LABEL_20:
    swift_once();
    goto LABEL_14;
  }
  unint64_t v67 = v14;
  unint64_t v68 = v13;
  unint64_t v19 = *((_DWORD *)v0 + 10);
  int v20 = AGCreateWeakAttribute();
  int v21 = v20;
  unint64_t v65 = HIDWORD(v20);
  unint64_t v22 = AGCreateWeakAttribute();
  int v23 = v22;
  unint64_t v64 = HIDWORD(v22);
  unint64_t v66 = v19;
  unint64_t v24 = AGCreateWeakAttribute();
  int v25 = v24;
  unint64_t v63 = HIDWORD(v24);
  unint64_t v26 = AGCreateWeakAttribute();
  int v27 = v26;
  char v62 = HIDWORD(v26);
  unint64_t v28 = AGCreateWeakAttribute();
  int v29 = v28;
  int64x2_t v61 = HIDWORD(v28);
  unint64_t v30 = AGCreateWeakAttribute();
  int v31 = v30;
  long long v60 = HIDWORD(v30);
  int v69 = v17;
  unint64_t v32 = (double *)AGGraphGetValue();
  int v33 = *v32;
  long long v34 = v32[1];
  double v35 = (double *)AGGraphGetValue();
  double v36 = v33 - *v35;
  Swift::Double_optional v37 = v34 - v35[1];
  double v38 = AGGraphGetValue();
  double v39 = *(double *)v38;
  uint64_t v40 = *(double *)(v38 + 8);
  _threadGeometryProxyData();
  uint64_t v74 = v21;
  __int16 v75 = v65;
  char v76 = v23;
  int v77 = v64;
  int v78 = v25;
  int v79 = v63;
  int v80 = v27;
  int v81 = v62;
  int v82 = v29;
  int v83 = v61;
  int v84 = v31;
  int v85 = v60;
  int v86 = v17;
  _setThreadGeometryProxyData();
  v121.origin.CGFloat x = 0.0;
  v121.origin.CGFloat y = 0.0;
  v121.size.CGFloat width = v39;
  v121.size.CGFloat height = v40;
  if (CGRectIsNull(v121))
  {
    double v13 = 0;
    uint64_t v14 = 0;
    unsigned int v1 = 6;
  }
  else
  {
    v122.origin.CGFloat x = 0.0;
    v122.origin.CGFloat y = 0.0;
    v122.size.CGFloat width = v39;
    v122.size.CGFloat height = v40;
    double v13 = *(void *)&v39;
    uint64_t v14 = *(void *)&v40;
    unsigned int v1 = !CGRectIsInfinite(v122);
  }
  uint64_t v3 = &v118;
  uint64_t v4 = &v87;
  _setThreadGeometryProxyData();
  CGFloat v41 = *v0;
  char v6 = &v112;
  int v113 = 0u;
  char v114 = 0u;
  uint64_t v115 = 0u;
  long long v116 = 0u;
  char v112 = v41;
  long long v117 = 0x80000000;
  swift_retain();
  outlined copy of Path.Storage(0, 0, v13, v14, v1);
  v123.origin.CGFloat x = 0.0;
  v123.origin.CGFloat y = 0.0;
  v123.size.CGFloat width = v39;
  v123.size.CGFloat height = v40;
  long long v124 = CGRectOffset(v123, v36, v37);
  CGFloat x = v124.origin.x;
  CGFloat y = v124.origin.y;
  CGFloat width = v124.size.width;
  CGFloat height = v124.size.height;
  LODWORD(v17) = *((_DWORD *)v0 + 2);
  __int16 v5 = *((_WORD *)v0 + 25);
  char v2 = *((unsigned char *)v0 + 48);
  if (one-time initialization token for normal != -1) {
    goto LABEL_20;
  }
LABEL_14:
  CGFloat v42 = 0x10000;
  if (!v67) {
    CGFloat v42 = 0;
  }
  uint64_t v43 = 256;
  if (!v68) {
    uint64_t v43 = 0;
  }
  uint64_t v44 = static GraphicsBlendMode.normal;
  uint64_t v45 = byte_26B0EB4A0;
  int v70 = byte_26B0EB4A0;
  int v87 = 0uLL;
  *(void *)&int v88 = v13;
  *((void *)&v88 + 1) = v14;
  *(void *)int v89 = v42 | v43 | v1;
  *(_OWORD *)&v89[8] = 0u;
  *(long long *)((char *)v4 + 56) = 0u;
  *(long long *)((char *)v4 + 72) = 0u;
  *(long long *)((char *)v4 + 84) = 0u;
  long long v90 = v5;
  long long v91 = x;
  __int16 v92 = y;
  __int16 v93 = width;
  CGFloat v94 = height;
  CGFloat v95 = 0;
  CGFloat v96 = 0;
  CGFloat v97 = x;
  uint64_t v98 = y;
  int v99 = width;
  CGFloat v100 = height;
  v4[12] = xmmword_2461B9DE0;
  CGFloat v101 = v69;
  CGFloat v102 = 0;
  unint64_t v104 = 0;
  CGFloat v103 = 0;
  uint64_t v105 = v17;
  __int16 v106 = v2;
  char v107 = v66;
  int v108 = v44;
  char v109 = v70;
  int v110 = 1065353216;
  uint64_t v111 = 0;
  LOBYTE(v118) = 0;
  uint64_t v46 = *((unsigned int *)v0 + 4);
  outlined copy of GraphicsBlendMode(v44, v45);
  _ShapeStyle_RenderedShape.renderItem(name:styles:layers:)((unsigned __int8 *)&v118, v46, (uint64_t)&v112);
  LOBYTE(v118) = v2;
  _ShapeStyle_RenderedLayers.commit(shape:options:)((unint64_t)&v87, (char *)&v118, (uint64_t)&v71);
  long long v118 = v71;
  LOWORD(v119) = v72;
  BYTE2(v119) = v73;
  AGGraphSetOutputValue();
  outlined consume of Path.Storage(0, 0, v13, v14, v1);
  swift_bridgeObjectRelease();
  char v47 = v4[13];
  *((_OWORD *)v6 + 17) = v4[12];
  *((_OWORD *)v6 + 18) = v47;
  *((_OWORD *)v6 + 19) = v4[14];
  *(_OWORD *)((char *)v3 + 233) = *(long long *)((char *)v4 + 233);
  uint64_t v48 = v4[9];
  *((_OWORD *)v3 + 8) = v4[8];
  *((_OWORD *)v3 + 9) = v48;
  long long v49 = v4[11];
  *((_OWORD *)v3 + 10) = v4[10];
  *((_OWORD *)v3 + 11) = v49;
  long long v50 = v4[5];
  *((_OWORD *)v3 + 4) = v4[4];
  *((_OWORD *)v3 + 5) = v50;
  long long v51 = v4[7];
  *((_OWORD *)v3 + 6) = v4[6];
  *((_OWORD *)v3 + 7) = v51;
  long long v52 = v88;
  *(_OWORD *)uint64_t v3 = v87;
  *((_OWORD *)v3 + 1) = v52;
  long long v53 = *(_OWORD *)&v89[16];
  *((_OWORD *)v3 + 2) = *(_OWORD *)v89;
  *((_OWORD *)v3 + 3) = v53;
  outlined release of _ShapeStyle_RenderedShape((uint64_t)&v118);
  long long v54 = v113;
  long long v55 = v114;
  long long v56 = v115;
  long long v58 = v116;
  long long v57 = v117;
  swift_release();
  return outlined consume of _ShapeStyle_RenderedLayers.Layers(v54, *((uint64_t *)&v54 + 1), v55, *((uint64_t *)&v55 + 1), v56, *((uint64_t *)&v56 + 1), v58, *((uint64_t *)&v58 + 1), v57);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t *v5;
  long long *v6;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  int v10;
  uint64_t Value;
  CGFloat v12;
  int v13;
  uint64_t v14;
  char v15;
  int v16;
  unint64_t v17;
  int v18;
  unsigned int v19;
  int v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  int v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  int v28;
  unint64_t v29;
  int v30;
  unint64_t v31;
  int v32;
  double *v33;
  double v34;
  double v35;
  double *v36;
  double v37;
  double v38;
  uint64_t v39;
  CGFloat v40;
  CGFloat v41;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  unsigned __int8 v53;
  long long v54;
  long long v55;
  long long v56;
  long long v57;
  long long v58;
  long long v59;
  long long v60;
  long long v61;
  long long v62;
  long long v63;
  unsigned int v64;
  long long v65;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unsigned int v73;
  int v74;
  int v75;
  int v76;
  unint64_t v77;
  char v78;
  uint64_t v79;
  __int16 v80;
  char v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  long long v95;
  long long v96;
  unsigned char v97[32];
  __int16 v98;
  CGFloat v99;
  CGFloat v100;
  CGFloat v101;
  CGFloat v102;
  uint64_t v103;
  int v104;
  CGFloat v105;
  CGFloat v106;
  CGFloat v107;
  CGFloat v108;
  unint64_t v109;
  uint64_t v110;
  __int16 v111;
  char v112;
  int v113;
  char v114;
  int v115;
  uint64_t v116;
  char v117;
  int v118;
  char v119;
  uint64_t v120;
  long long v121;
  long long v122;
  long long v123;
  long long v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  long long v128;
  long long v129;
  long long v130;
  uint64_t v131;
  CGRect v132;
  CGRect v133;
  CGRect v134;
  CGRect v135;
  CGRect v136;

  char v131 = *MEMORY[0x263EF8340];
  int v10 = *((_DWORD *)v0 + 3);
  type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for AnimatedShape<Ellipse._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Ellipse._Inset and conformance Ellipse._Inset, (uint64_t)&type metadata for Ellipse._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  uint64_t Value = AGGraphGetValue();
  double v12 = *(double *)Value;
  double v13 = *(unsigned __int8 *)(Value + 8);
  uint64_t v14 = *(unsigned __int8 *)(Value + 9);
  if ((v15 & 1) != 0 || !*((_WORD *)v0 + 25))
  {
    char v17 = ++static DisplayList.Version.lastValue;
  }
  else
  {
    uint64_t v126 = *(uint64_t *)((char *)v0 + 28);
    CGRect v127 = v10;
    uint64_t v16 = AGGraphAnyInputsChanged();
    char v17 = ++static DisplayList.Version.lastValue;
    if (!v16) {
      goto LABEL_9;
    }
  }
  int v18 = (2 * ((33 * (v17 >> 16)) ^ v17)) | 1;
  if (!v17) {
    LOWORD(v18) = 0;
  }
  *((_WORD *)v0 + 25) = v18;
LABEL_9:
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x263F288F8])
  {
    __break(1u);
LABEL_20:
    char v73 = v19;
    swift_once();
    unint64_t v19 = v73;
    goto LABEL_14;
  }
  __int16 v75 = v14;
  char v76 = v13;
  int v20 = *((_DWORD *)v0 + 10);
  int v21 = AGCreateWeakAttribute();
  unint64_t v22 = v21;
  unint64_t v72 = HIDWORD(v21);
  int v23 = AGCreateWeakAttribute();
  unint64_t v24 = v23;
  int v71 = HIDWORD(v23);
  uint64_t v74 = v20;
  int v25 = AGCreateWeakAttribute();
  unint64_t v26 = v25;
  int v70 = HIDWORD(v25);
  int v27 = AGCreateWeakAttribute();
  unint64_t v28 = v27;
  int v69 = HIDWORD(v27);
  int v29 = AGCreateWeakAttribute();
  unint64_t v30 = v29;
  unint64_t v68 = HIDWORD(v29);
  int v31 = AGCreateWeakAttribute();
  unint64_t v32 = v31;
  unint64_t v67 = HIDWORD(v31);
  int v77 = v17;
  int v33 = (double *)AGGraphGetValue();
  long long v34 = *v33;
  double v35 = v33[1];
  double v36 = (double *)AGGraphGetValue();
  Swift::Double_optional v37 = v34 - *v36;
  double v38 = v35 - v36[1];
  double v39 = AGGraphGetValue();
  uint64_t v40 = *(double *)v39;
  CGFloat v41 = *(double *)(v39 + 8);
  _threadGeometryProxyData();
  int v82 = v22;
  int v83 = v72;
  int v84 = v24;
  int v85 = v71;
  int v86 = v26;
  int v87 = v70;
  int v88 = v28;
  int v89 = v69;
  long long v90 = v30;
  long long v91 = v68;
  __int16 v92 = v32;
  __int16 v93 = v67;
  CGFloat v94 = v17;
  _setThreadGeometryProxyData();
  v132.origin.CGFloat x = 0.0;
  v132.origin.CGFloat y = 0.0;
  v132.size.CGFloat width = v40;
  v132.size.CGFloat height = v41;
  uint64_t v133 = CGRectInset(v132, v12, v12);
  CGFloat x = v133.origin.x;
  CGFloat y = v133.origin.y;
  CGFloat width = v133.size.width;
  CGFloat height = v133.size.height;
  if (CGRectIsNull(v133))
  {
    unsigned int v1 = 0;
    char v2 = 0;
    uint64_t v3 = 0;
    uint64_t v14 = 0;
    uint64_t v46 = 6;
  }
  else
  {
    v134.origin.CGFloat x = x;
    v134.origin.CGFloat y = y;
    v134.size.CGFloat width = width;
    v134.size.CGFloat height = height;
    unsigned int v1 = *(void *)&x;
    char v2 = *(void *)&y;
    uint64_t v3 = *(void *)&width;
    uint64_t v14 = *(void *)&height;
    uint64_t v46 = !CGRectIsInfinite(v134);
  }
  __int16 v5 = &v126;
  char v6 = &v95;
  _setThreadGeometryProxyData();
  char v47 = *v0;
  uint64_t v121 = 0u;
  int v122 = 0u;
  long long v123 = 0u;
  long long v124 = 0u;
  uint64_t v120 = v47;
  long long v125 = 0x80000000;
  swift_retain();
  outlined copy of Path.Storage(v1, v2, v3, v14, v46);
  v135.origin.CGFloat x = 0.0;
  v135.origin.CGFloat y = 0.0;
  v135.size.CGFloat width = v40;
  v135.size.CGFloat height = v41;
  uint64_t v136 = CGRectOffset(v135, v37, v38);
  double v12 = v136.origin.x;
  uint64_t v7 = v136.origin.y;
  uint64_t v8 = v136.size.width;
  double v9 = v136.size.height;
  unint64_t v19 = v46;
  LODWORD(v17) = *((_DWORD *)v0 + 2);
  LOWORD(v13) = *((_WORD *)v0 + 25);
  uint64_t v4 = *((unsigned char *)v0 + 48);
  if (one-time initialization token for normal != -1) {
    goto LABEL_20;
  }
LABEL_14:
  uint64_t v48 = 0x10000;
  if (!v75) {
    uint64_t v48 = 0;
  }
  long long v49 = 256;
  if (!v76) {
    long long v49 = 0;
  }
  long long v50 = static GraphicsBlendMode.normal;
  long long v51 = byte_26B0EB4A0;
  int v78 = byte_26B0EB4A0;
  *(void *)&CGFloat v95 = v1;
  *((void *)&v95 + 1) = v2;
  *(void *)&CGFloat v96 = v3;
  *((void *)&v96 + 1) = v14;
  *(void *)CGFloat v97 = v48 | v49 | v19;
  *(_OWORD *)&v97[8] = 0u;
  *(long long *)((char *)v6 + 56) = 0u;
  *(long long *)((char *)v6 + 72) = 0u;
  *(long long *)((char *)v6 + 84) = 0u;
  uint64_t v98 = v13;
  int v99 = v12;
  CGFloat v100 = v7;
  CGFloat v101 = v8;
  CGFloat v102 = v9;
  CGFloat v103 = 0;
  unint64_t v104 = 0;
  uint64_t v105 = v12;
  __int16 v106 = v7;
  char v107 = v8;
  int v108 = v9;
  v6[12] = xmmword_2461B9DE0;
  char v109 = v77;
  int v110 = 0;
  char v112 = 0;
  uint64_t v111 = 0;
  int v113 = v17;
  char v114 = v4;
  uint64_t v115 = v74;
  long long v116 = v50;
  long long v117 = v78;
  long long v118 = 1065353216;
  long long v119 = 0;
  LOBYTE(v126) = 0;
  long long v52 = *((unsigned int *)v0 + 4);
  long long v53 = v19;
  outlined copy of GraphicsBlendMode(v50, v51);
  _ShapeStyle_RenderedShape.renderItem(name:styles:layers:)((unsigned __int8 *)&v126, v52, (uint64_t)&v120);
  LOBYTE(v126) = v4;
  _ShapeStyle_RenderedLayers.commit(shape:options:)((unint64_t)&v95, (char *)&v126, (uint64_t)&v79);
  uint64_t v126 = v79;
  LOWORD(v127) = v80;
  BYTE2(v127) = v81;
  AGGraphSetOutputValue();
  outlined consume of Path.Storage(v1, v2, v3, v14, v53);
  swift_bridgeObjectRelease();
  long long v54 = v6[13];
  CGRect v128 = v6[12];
  CGRect v129 = v54;
  CGRect v130 = v6[14];
  *(_OWORD *)((char *)v5 + 233) = *(long long *)((char *)v6 + 233);
  long long v55 = v6[9];
  *((_OWORD *)v5 + 8) = v6[8];
  *((_OWORD *)v5 + 9) = v55;
  long long v56 = v6[11];
  *((_OWORD *)v5 + 10) = v6[10];
  *((_OWORD *)v5 + 11) = v56;
  long long v57 = v6[5];
  *((_OWORD *)v5 + 4) = v6[4];
  *((_OWORD *)v5 + 5) = v57;
  long long v58 = v6[7];
  *((_OWORD *)v5 + 6) = v6[6];
  *((_OWORD *)v5 + 7) = v58;
  unsigned int v59 = v96;
  *(_OWORD *)__int16 v5 = v95;
  *((_OWORD *)v5 + 1) = v59;
  long long v60 = *(_OWORD *)&v97[16];
  *((_OWORD *)v5 + 2) = *(_OWORD *)v97;
  *((_OWORD *)v5 + 3) = v60;
  outlined release of _ShapeStyle_RenderedShape((uint64_t)&v126);
  int64x2_t v61 = v121;
  char v62 = v122;
  unint64_t v63 = v123;
  unint64_t v65 = v124;
  unint64_t v64 = v125;
  swift_release();
  return outlined consume of _ShapeStyle_RenderedLayers.Layers(v61, *((uint64_t *)&v61 + 1), v62, *((uint64_t *)&v62 + 1), v63, *((uint64_t *)&v63 + 1), v65, *((uint64_t *)&v65 + 1), v64);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int16 v4;
  uint64_t *v5;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  int v10;
  unsigned __int8 *Value;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char v15;
  int v16;
  unint64_t v17;
  int v18;
  int v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unsigned int v27;
  unint64_t v28;
  unsigned int v29;
  double *v30;
  double v31;
  double v32;
  double *v33;
  CGFloat v34;
  CGFloat v35;
  uint64_t v36;
  CGFloat v37;
  CGFloat v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  long long v43;
  long long v44;
  long long v45;
  long long v46;
  long long v47;
  long long v48;
  unsigned int v49;
  long long v50;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  unint64_t v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  __int16 v64;
  char v65;
  long long v66;
  long long v67;
  unsigned char v68[80];
  long long v69;
  long long v70;
  long long v71;
  long long v72;
  long long v73;
  long long v74;
  long long v75;
  unsigned char v76[25];
  uint64_t v77;
  long long v78;
  long long v79;
  long long v80;
  long long v81;
  uint64_t v82;
  long long v83;
  long long v84;
  long long v85;
  long long v86;
  long long v87;
  long long v88;
  long long v89;
  long long v90;
  long long v91;
  long long v92;
  long long v93;
  long long v94;
  long long v95;
  void v96[4];
  unsigned __int8 v97;
  uint64_t v98;
  CGRect v99;
  CGRect v100;

  uint64_t v98 = *MEMORY[0x263EF8340];
  int v10 = *((_DWORD *)v0 + 3);
  type metadata accessor for _ShapeView<Capsule, ForegroundStyle>();
  uint64_t Value = (unsigned __int8 *)AGGraphGetValue();
  double v12 = *Value;
  double v13 = Value[1];
  uint64_t v14 = Value[2];
  if ((v15 & 1) != 0 || !*((_WORD *)v0 + 25))
  {
    char v17 = ++static DisplayList.Version.lastValue;
  }
  else
  {
    *(void *)&int v83 = *(uint64_t *)((char *)v0 + 28);
    DWORD2(v83) = v10;
    uint64_t v16 = AGGraphAnyInputsChanged();
    char v17 = ++static DisplayList.Version.lastValue;
    if (!v16) {
      goto LABEL_9;
    }
  }
  int v18 = (2 * ((33 * (v17 >> 16)) ^ v17)) | 1;
  if (!v17) {
    LOWORD(v18) = 0;
  }
  *((_WORD *)v0 + 25) = v18;
LABEL_9:
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    int64x2_t v61 = v14;
    char v62 = v13;
    unint64_t v19 = *((_DWORD *)v0 + 10);
    long long v56 = AGCreateWeakAttribute();
    int v20 = AGCreateWeakAttribute();
    long long v58 = v12;
    int v21 = v20;
    long long v57 = HIDWORD(v20);
    long long v60 = v19;
    unint64_t v22 = AGCreateWeakAttribute();
    int v23 = v22;
    long long v55 = HIDWORD(v22);
    unint64_t v24 = AGCreateWeakAttribute();
    int v25 = v24;
    long long v54 = HIDWORD(v24);
    unint64_t v26 = AGCreateWeakAttribute();
    int v27 = v26;
    long long v53 = HIDWORD(v26);
    unint64_t v28 = AGCreateWeakAttribute();
    int v29 = v28;
    long long v52 = HIDWORD(v28);
    unint64_t v30 = (double *)AGGraphGetValue();
    int v31 = *v30;
    unint64_t v32 = v30[1];
    int v33 = (double *)AGGraphGetValue();
    long long v34 = v31 - *v33;
    double v35 = v32 - v33[1];
    double v36 = AGGraphGetValue();
    Swift::Double_optional v37 = *(double *)v36;
    double v38 = *(double *)(v36 + 8);
    _threadGeometryProxyData();
    *(void *)&int v83 = v56;
    *((void *)&v83 + 1) = __PAIR64__(v57, v21);
    *(void *)&int v84 = __PAIR64__(v55, v23);
    *((void *)&v84 + 1) = __PAIR64__(v54, v25);
    *(void *)&int v85 = __PAIR64__(v53, v27);
    *((void *)&v85 + 1) = __PAIR64__(v52, v29);
    __int16 v5 = &v77;
    unsigned int v59 = v17;
    LODWORD(v86) = v17;
    _setThreadGeometryProxyData();
    specialized Shape.effectivePath(in:)(v58, (uint64_t)v96, 0.0, 0.0, v37, v38);
    uint64_t v14 = v96[0];
    double v12 = v96[1];
    unsigned int v1 = v96[2];
    char v2 = v96[3];
    uint64_t v3 = v97;
    _setThreadGeometryProxyData();
    double v39 = *v0;
    int v78 = 0u;
    int v79 = 0u;
    int v80 = 0u;
    int v81 = 0u;
    int v77 = v39;
    int v82 = 0x80000000;
    swift_retain();
    _s7SwiftUI4PathVWOrTm_0((uint64_t)v96, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
    v99.origin.CGFloat x = 0.0;
    v99.origin.CGFloat y = 0.0;
    v99.size.CGFloat width = v37;
    v99.size.CGFloat height = v38;
    CGFloat v100 = CGRectOffset(v99, v34, v35);
    CGFloat x = v100.origin.x;
    CGFloat y = v100.origin.y;
    CGFloat width = v100.size.width;
    CGFloat height = v100.size.height;
    LODWORD(v17) = *((_DWORD *)v0 + 2);
    uint64_t v4 = *((_WORD *)v0 + 25);
    LOBYTE(v13) = *((unsigned char *)v0 + 48);
    if (one-time initialization token for normal == -1) {
      goto LABEL_11;
    }
  }
  swift_once();
LABEL_11:
  uint64_t v40 = 0x10000;
  if (!v61) {
    uint64_t v40 = 0;
  }
  CGFloat v41 = 256;
  if (!v62) {
    CGFloat v41 = 0;
  }
  *(void *)&unint64_t v66 = v14;
  *((void *)&v66 + 1) = v12;
  *(void *)&unint64_t v67 = v1;
  *((void *)&v67 + 1) = v2;
  *(void *)unint64_t v68 = v40 | v41 | v3;
  memset(&v68[8], 0, 60);
  *(_WORD *)&v68[68] = v4;
  *(CGFloat *)&v68[72] = x;
  *(CGFloat *)&int v69 = y;
  *((CGFloat *)&v69 + 1) = width;
  int v70 = *(unint64_t *)&height;
  LODWORD(v71) = 0;
  *((CGFloat *)&v71 + 1) = x;
  *(CGFloat *)&unint64_t v72 = y;
  *((CGFloat *)&v72 + 1) = width;
  *(CGFloat *)&char v73 = height;
  uint64_t v74 = xmmword_2461B9DE0;
  *((void *)&v73 + 1) = v59;
  *(void *)&__int16 v75 = 0;
  BYTE10(v75) = 0;
  WORD4(v75) = 0;
  HIDWORD(v75) = v17;
  v76[0] = v13;
  *(_DWORD *)&v76[4] = v60;
  *(void *)&v76[8] = static GraphicsBlendMode.normal;
  v76[16] = byte_26B0EB4A0;
  *(_DWORD *)&v76[20] = 1065353216;
  v76[24] = 0;
  LOBYTE(v83) = 0;
  CGFloat v42 = *((unsigned int *)v0 + 4);
  outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_26B0EB4A0);
  _ShapeStyle_RenderedShape.renderItem(name:styles:layers:)((unsigned __int8 *)&v83, v42, (uint64_t)&v77);
  LOBYTE(v83) = v13;
  _ShapeStyle_RenderedLayers.commit(shape:options:)((unint64_t)&v66, (char *)&v83, (uint64_t)&v63);
  *(void *)&int v83 = v63;
  WORD4(v83) = v64;
  BYTE10(v83) = v65;
  AGGraphSetOutputValue();
  _s7SwiftUI4PathVWOrTm_0((uint64_t)v96, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
  swift_bridgeObjectRelease();
  uint64_t v43 = v75;
  uint64_t v44 = *(_OWORD *)v76;
  uint64_t v45 = v73;
  *((_OWORD *)v5 + 17) = v74;
  *((_OWORD *)v5 + 18) = v43;
  *((_OWORD *)v5 + 19) = v44;
  CGFloat v95 = *(_OWORD *)&v76[9];
  long long v91 = v70;
  __int16 v92 = v71;
  __int16 v93 = v72;
  CGFloat v94 = v45;
  int v87 = *(_OWORD *)&v68[32];
  int v88 = *(_OWORD *)&v68[48];
  int v89 = *(_OWORD *)&v68[64];
  long long v90 = v69;
  int v83 = v66;
  int v84 = v67;
  int v85 = *(_OWORD *)v68;
  int v86 = *(_OWORD *)&v68[16];
  outlined release of _ShapeStyle_RenderedShape((uint64_t)&v83);
  uint64_t v46 = v78;
  char v47 = v79;
  uint64_t v48 = v80;
  long long v50 = v81;
  long long v49 = v82;
  swift_release();
  return outlined consume of _ShapeStyle_RenderedLayers.Layers(v46, *((uint64_t *)&v46 + 1), v47, *((uint64_t *)&v47 + 1), v48, *((uint64_t *)&v48 + 1), v50, *((uint64_t *)&v50 + 1), v49);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int16 v5;
  uint64_t *v6;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  int v11;
  unsigned __int8 *Value;
  int v13;
  uint64_t v14;
  char v15;
  int v16;
  unint64_t v17;
  int v18;
  int v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unsigned int v27;
  unint64_t v28;
  unsigned int v29;
  double *v30;
  double v31;
  double v32;
  double *v33;
  CGFloat v34;
  CGFloat v35;
  uint64_t v36;
  double v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  long long v43;
  long long v44;
  long long v45;
  long long v46;
  long long v47;
  long long v48;
  unsigned int v49;
  long long v50;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  int v59;
  int v60;
  int v61;
  uint64_t v62;
  __int16 v63;
  char v64;
  long long v65;
  long long v66;
  unsigned char v67[80];
  long long v68;
  long long v69;
  long long v70;
  long long v71;
  long long v72;
  long long v73;
  long long v74;
  unsigned char v75[25];
  uint64_t v76;
  long long v77;
  long long v78;
  long long v79;
  long long v80;
  uint64_t v81;
  long long v82;
  long long v83;
  long long v84;
  long long v85;
  long long v86;
  long long v87;
  long long v88;
  long long v89;
  long long v90;
  long long v91;
  long long v92;
  long long v93;
  long long v94;
  void v95[4];
  unsigned __int8 v96;
  uint64_t v97;
  CGRect v98;
  CGRect v99;

  CGFloat v97 = *MEMORY[0x263EF8340];
  uint64_t v11 = *((_DWORD *)v0 + 3);
  type metadata accessor for _ShapeView<Circle, ForegroundStyle>();
  uint64_t Value = (unsigned __int8 *)AGGraphGetValue();
  double v13 = *Value;
  uint64_t v14 = Value[1];
  if ((v15 & 1) != 0 || !*((_WORD *)v0 + 25))
  {
    char v17 = ++static DisplayList.Version.lastValue;
  }
  else
  {
    *(void *)&int v82 = *(uint64_t *)((char *)v0 + 28);
    DWORD2(v82) = v11;
    uint64_t v16 = AGGraphAnyInputsChanged();
    char v17 = ++static DisplayList.Version.lastValue;
    if (!v16) {
      goto LABEL_9;
    }
  }
  int v18 = (2 * ((33 * (v17 >> 16)) ^ v17)) | 1;
  if (!v17) {
    LOWORD(v18) = 0;
  }
  *((_WORD *)v0 + 25) = v18;
LABEL_9:
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    long long v60 = v14;
    int64x2_t v61 = v13;
    unint64_t v19 = *((_DWORD *)v0 + 10);
    long long v56 = AGCreateWeakAttribute();
    int v20 = AGCreateWeakAttribute();
    int v21 = v20;
    long long v57 = HIDWORD(v20);
    unsigned int v59 = v19;
    unint64_t v22 = AGCreateWeakAttribute();
    int v23 = v22;
    long long v55 = HIDWORD(v22);
    unint64_t v24 = AGCreateWeakAttribute();
    int v25 = v24;
    long long v54 = HIDWORD(v24);
    unint64_t v26 = AGCreateWeakAttribute();
    int v27 = v26;
    long long v53 = HIDWORD(v26);
    unint64_t v28 = AGCreateWeakAttribute();
    int v29 = v28;
    long long v52 = HIDWORD(v28);
    char v6 = &v76;
    unint64_t v30 = (double *)AGGraphGetValue();
    int v31 = *v30;
    unint64_t v32 = v30[1];
    int v33 = (double *)AGGraphGetValue();
    long long v34 = v31 - *v33;
    double v35 = v32 - v33[1];
    double v36 = AGGraphGetValue();
    Swift::Double_optional v37 = *(double *)v36;
    double v38 = *(double *)(v36 + 8);
    _threadGeometryProxyData();
    *(void *)&int v82 = v56;
    *((void *)&v82 + 1) = __PAIR64__(v57, v21);
    *(void *)&int v83 = __PAIR64__(v55, v23);
    *((void *)&v83 + 1) = __PAIR64__(v54, v25);
    *(void *)&int v84 = __PAIR64__(v53, v27);
    *((void *)&v84 + 1) = __PAIR64__(v52, v29);
    long long v58 = v17;
    LODWORD(v85) = v17;
    _setThreadGeometryProxyData();
    specialized Circle.path(in:)((uint64_t)v95, 0.0, 0.0, v37, v38);
    uint64_t v14 = v95[0];
    unsigned int v1 = v95[1];
    char v2 = v95[2];
    uint64_t v3 = v95[3];
    uint64_t v4 = v96;
    _setThreadGeometryProxyData();
    double v39 = *v0;
    int v77 = 0u;
    int v78 = 0u;
    int v79 = 0u;
    int v80 = 0u;
    char v76 = v39;
    int v81 = 0x80000000;
    swift_retain();
    _s7SwiftUI4PathVWOrTm_0((uint64_t)v95, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
    v98.origin.CGFloat x = 0.0;
    v98.origin.CGFloat y = 0.0;
    v98.size.CGFloat width = v37;
    v98.size.CGFloat height = v38;
    int v99 = CGRectOffset(v98, v34, v35);
    CGFloat x = v99.origin.x;
    CGFloat y = v99.origin.y;
    CGFloat width = v99.size.width;
    CGFloat height = v99.size.height;
    LODWORD(v17) = *((_DWORD *)v0 + 2);
    __int16 v5 = *((_WORD *)v0 + 25);
    LOBYTE(v13) = *((unsigned char *)v0 + 48);
    if (one-time initialization token for normal == -1) {
      goto LABEL_11;
    }
  }
  swift_once();
LABEL_11:
  uint64_t v40 = 0x10000;
  if (!v60) {
    uint64_t v40 = 0;
  }
  CGFloat v41 = 256;
  if (!v61) {
    CGFloat v41 = 0;
  }
  *(void *)&unint64_t v65 = v14;
  *((void *)&v65 + 1) = v1;
  *(void *)&unint64_t v66 = v2;
  *((void *)&v66 + 1) = v3;
  *(void *)unint64_t v67 = v40 | v41 | v4;
  memset(&v67[8], 0, 60);
  *(_WORD *)&v67[68] = v5;
  *(CGFloat *)&v67[72] = x;
  *(CGFloat *)&unint64_t v68 = y;
  *((CGFloat *)&v68 + 1) = width;
  int v69 = *(unint64_t *)&height;
  LODWORD(v70) = 0;
  *((CGFloat *)&v70 + 1) = x;
  *(CGFloat *)&int v71 = y;
  *((CGFloat *)&v71 + 1) = width;
  *(CGFloat *)&unint64_t v72 = height;
  char v73 = xmmword_2461B9DE0;
  *((void *)&v72 + 1) = v58;
  *(void *)&uint64_t v74 = 0;
  BYTE10(v74) = 0;
  WORD4(v74) = 0;
  HIDWORD(v74) = v17;
  v75[0] = v13;
  *(_DWORD *)&v75[4] = v59;
  *(void *)&v75[8] = static GraphicsBlendMode.normal;
  v75[16] = byte_26B0EB4A0;
  *(_DWORD *)&v75[20] = 1065353216;
  v75[24] = 0;
  LOBYTE(v82) = 0;
  CGFloat v42 = *((unsigned int *)v0 + 4);
  outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_26B0EB4A0);
  _ShapeStyle_RenderedShape.renderItem(name:styles:layers:)((unsigned __int8 *)&v82, v42, (uint64_t)&v76);
  LOBYTE(v82) = v13;
  _ShapeStyle_RenderedLayers.commit(shape:options:)((unint64_t)&v65, (char *)&v82, (uint64_t)&v62);
  *(void *)&int v82 = v62;
  WORD4(v82) = v63;
  BYTE10(v82) = v64;
  AGGraphSetOutputValue();
  _s7SwiftUI4PathVWOrTm_0((uint64_t)v95, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
  swift_bridgeObjectRelease();
  uint64_t v43 = v74;
  uint64_t v44 = *(_OWORD *)v75;
  uint64_t v45 = v72;
  *((_OWORD *)v6 + 17) = v73;
  *((_OWORD *)v6 + 18) = v43;
  *((_OWORD *)v6 + 19) = v44;
  CGFloat v94 = *(_OWORD *)&v75[9];
  long long v90 = v69;
  long long v91 = v70;
  __int16 v92 = v71;
  __int16 v93 = v45;
  int v86 = *(_OWORD *)&v67[32];
  int v87 = *(_OWORD *)&v67[48];
  int v88 = *(_OWORD *)&v67[64];
  int v89 = v68;
  int v82 = v65;
  int v83 = v66;
  int v84 = *(_OWORD *)v67;
  int v85 = *(_OWORD *)&v67[16];
  outlined release of _ShapeStyle_RenderedShape((uint64_t)&v82);
  uint64_t v46 = v77;
  char v47 = v78;
  uint64_t v48 = v79;
  long long v50 = v80;
  long long v49 = v81;
  swift_release();
  return outlined consume of _ShapeStyle_RenderedLayers.Layers(v46, *((uint64_t *)&v46 + 1), v47, *((uint64_t *)&v47 + 1), v48, *((uint64_t *)&v48 + 1), v50, *((uint64_t *)&v50 + 1), v49);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t *v6;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  int v10;
  uint64_t Value;
  CGFloat x;
  int v13;
  uint64_t v14;
  char v15;
  int v16;
  unint64_t v17;
  int v18;
  int v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unsigned int v27;
  unint64_t v28;
  unsigned int v29;
  double *v30;
  double v31;
  double v32;
  double *v33;
  CGFloat v34;
  CGFloat v35;
  uint64_t v36;
  CGFloat v37;
  CGFloat v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  long long v43;
  long long v44;
  long long v45;
  long long v46;
  long long v47;
  long long v48;
  unsigned int v49;
  long long v50;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  int v59;
  int v60;
  int v61;
  uint64_t v62;
  __int16 v63;
  char v64;
  long long v65;
  long long v66;
  unsigned char v67[80];
  long long v68;
  long long v69;
  long long v70;
  long long v71;
  long long v72;
  long long v73;
  long long v74;
  unsigned char v75[25];
  uint64_t v76;
  long long v77;
  long long v78;
  long long v79;
  long long v80;
  uint64_t v81;
  long long v82;
  long long v83;
  long long v84;
  long long v85;
  long long v86;
  long long v87;
  long long v88;
  long long v89;
  long long v90;
  long long v91;
  long long v92;
  long long v93;
  long long v94;
  void v95[4];
  unsigned __int8 v96;
  uint64_t v97;
  CGRect v98;
  CGRect v99;
  CGRect v100;
  CGRect v101;

  CGFloat v97 = *MEMORY[0x263EF8340];
  int v10 = *((_DWORD *)v0 + 3);
  type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for AnimatedShape<Circle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Circle._Inset and conformance Circle._Inset, (uint64_t)&type metadata for Circle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  uint64_t Value = AGGraphGetValue();
  CGFloat x = *(double *)Value;
  double v13 = *(unsigned __int8 *)(Value + 8);
  uint64_t v14 = *(unsigned __int8 *)(Value + 9);
  if ((v15 & 1) != 0 || !*((_WORD *)v0 + 25))
  {
    char v17 = ++static DisplayList.Version.lastValue;
  }
  else
  {
    *(void *)&int v82 = *(uint64_t *)((char *)v0 + 28);
    DWORD2(v82) = v10;
    uint64_t v16 = AGGraphAnyInputsChanged();
    char v17 = ++static DisplayList.Version.lastValue;
    if (!v16) {
      goto LABEL_9;
    }
  }
  int v18 = (2 * ((33 * (v17 >> 16)) ^ v17)) | 1;
  if (!v17) {
    LOWORD(v18) = 0;
  }
  *((_WORD *)v0 + 25) = v18;
LABEL_9:
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    long long v60 = v14;
    int64x2_t v61 = v13;
    unint64_t v19 = *((_DWORD *)v0 + 10);
    long long v56 = AGCreateWeakAttribute();
    int v20 = AGCreateWeakAttribute();
    int v21 = v20;
    long long v57 = HIDWORD(v20);
    unsigned int v59 = v19;
    unint64_t v22 = AGCreateWeakAttribute();
    int v23 = v22;
    long long v55 = HIDWORD(v22);
    unint64_t v24 = AGCreateWeakAttribute();
    int v25 = v24;
    long long v54 = HIDWORD(v24);
    unint64_t v26 = AGCreateWeakAttribute();
    int v27 = v26;
    long long v53 = HIDWORD(v26);
    unint64_t v28 = AGCreateWeakAttribute();
    int v29 = v28;
    long long v52 = HIDWORD(v28);
    char v6 = &v76;
    unint64_t v30 = (double *)AGGraphGetValue();
    int v31 = *v30;
    unint64_t v32 = v30[1];
    int v33 = (double *)AGGraphGetValue();
    long long v34 = v31 - *v33;
    double v35 = v32 - v33[1];
    double v36 = AGGraphGetValue();
    Swift::Double_optional v37 = *(double *)v36;
    double v38 = *(double *)(v36 + 8);
    _threadGeometryProxyData();
    *(void *)&int v82 = v56;
    *((void *)&v82 + 1) = __PAIR64__(v57, v21);
    *(void *)&int v83 = __PAIR64__(v55, v23);
    *((void *)&v83 + 1) = __PAIR64__(v54, v25);
    *(void *)&int v84 = __PAIR64__(v53, v27);
    *((void *)&v84 + 1) = __PAIR64__(v52, v29);
    long long v58 = v17;
    LODWORD(v85) = v17;
    _setThreadGeometryProxyData();
    v98.origin.CGFloat x = 0.0;
    v98.origin.CGFloat y = 0.0;
    v98.size.CGFloat width = v37;
    v98.size.CGFloat height = v38;
    int v99 = CGRectInset(v98, x, x);
    specialized Circle.path(in:)((uint64_t)v95, v99.origin.x, v99.origin.y, v99.size.width, v99.size.height);
    char v17 = v95[0];
    uint64_t v14 = v95[1];
    unsigned int v1 = v95[2];
    char v2 = v95[3];
    uint64_t v4 = v96;
    _setThreadGeometryProxyData();
    double v39 = *v0;
    int v77 = 0u;
    int v78 = 0u;
    int v79 = 0u;
    int v80 = 0u;
    char v76 = v39;
    int v81 = 0x80000000;
    swift_retain();
    _s7SwiftUI4PathVWOrTm_0((uint64_t)v95, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
    v100.origin.CGFloat x = 0.0;
    v100.origin.CGFloat y = 0.0;
    v100.size.CGFloat width = v37;
    v100.size.CGFloat height = v38;
    CGFloat v101 = CGRectOffset(v100, v34, v35);
    CGFloat x = v101.origin.x;
    CGFloat y = v101.origin.y;
    CGFloat width = v101.size.width;
    CGFloat height = v101.size.height;
    uint64_t v3 = *((_DWORD *)v0 + 2);
    __int16 v5 = *((_WORD *)v0 + 25);
    LOBYTE(v13) = *((unsigned char *)v0 + 48);
    if (one-time initialization token for normal == -1) {
      goto LABEL_11;
    }
  }
  swift_once();
LABEL_11:
  uint64_t v40 = 0x10000;
  if (!v60) {
    uint64_t v40 = 0;
  }
  CGFloat v41 = 256;
  if (!v61) {
    CGFloat v41 = 0;
  }
  *(void *)&unint64_t v65 = v17;
  *((void *)&v65 + 1) = v14;
  *(void *)&unint64_t v66 = v1;
  *((void *)&v66 + 1) = v2;
  *(void *)unint64_t v67 = v40 | v41 | v4;
  memset(&v67[8], 0, 60);
  *(_WORD *)&v67[68] = v5;
  *(CGFloat *)&v67[72] = x;
  *(CGFloat *)&unint64_t v68 = y;
  *((CGFloat *)&v68 + 1) = width;
  int v69 = *(unint64_t *)&height;
  LODWORD(v70) = 0;
  *((CGFloat *)&v70 + 1) = x;
  *(CGFloat *)&int v71 = y;
  *((CGFloat *)&v71 + 1) = width;
  *(CGFloat *)&unint64_t v72 = height;
  char v73 = xmmword_2461B9DE0;
  *((void *)&v72 + 1) = v58;
  *(void *)&uint64_t v74 = 0;
  BYTE10(v74) = 0;
  WORD4(v74) = 0;
  HIDWORD(v74) = v3;
  v75[0] = v13;
  *(_DWORD *)&v75[4] = v59;
  *(void *)&v75[8] = static GraphicsBlendMode.normal;
  v75[16] = byte_26B0EB4A0;
  *(_DWORD *)&v75[20] = 1065353216;
  v75[24] = 0;
  LOBYTE(v82) = 0;
  CGFloat v42 = *((unsigned int *)v0 + 4);
  outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_26B0EB4A0);
  _ShapeStyle_RenderedShape.renderItem(name:styles:layers:)((unsigned __int8 *)&v82, v42, (uint64_t)&v76);
  LOBYTE(v82) = v13;
  _ShapeStyle_RenderedLayers.commit(shape:options:)((unint64_t)&v65, (char *)&v82, (uint64_t)&v62);
  *(void *)&int v82 = v62;
  WORD4(v82) = v63;
  BYTE10(v82) = v64;
  AGGraphSetOutputValue();
  _s7SwiftUI4PathVWOrTm_0((uint64_t)v95, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
  swift_bridgeObjectRelease();
  uint64_t v43 = v74;
  uint64_t v44 = *(_OWORD *)v75;
  uint64_t v45 = v72;
  *((_OWORD *)v6 + 17) = v73;
  *((_OWORD *)v6 + 18) = v43;
  *((_OWORD *)v6 + 19) = v44;
  CGFloat v94 = *(_OWORD *)&v75[9];
  long long v90 = v69;
  long long v91 = v70;
  __int16 v92 = v71;
  __int16 v93 = v45;
  int v86 = *(_OWORD *)&v67[32];
  int v87 = *(_OWORD *)&v67[48];
  int v88 = *(_OWORD *)&v67[64];
  int v89 = v68;
  int v82 = v65;
  int v83 = v66;
  int v84 = *(_OWORD *)v67;
  int v85 = *(_OWORD *)&v67[16];
  outlined release of _ShapeStyle_RenderedShape((uint64_t)&v82);
  uint64_t v46 = v77;
  char v47 = v78;
  uint64_t v48 = v79;
  long long v50 = v80;
  long long v49 = v81;
  swift_release();
  return outlined consume of _ShapeStyle_RenderedLayers.Layers(v46, *((uint64_t *)&v46 + 1), v47, *((uint64_t *)&v47 + 1), v48, *((uint64_t *)&v48 + 1), v50, *((uint64_t *)&v50 + 1), v49);
}

{
  uint64_t *v0;
  uint64_t v1;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  uint64_t *v6;
  int v7;
  uint64_t Value;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  int v14;
  int v15;
  char v16;
  int v17;
  unint64_t v18;
  int v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  double *v31;
  double v32;
  double v33;
  double *v34;
  CGFloat v35;
  CGFloat v36;
  uint64_t v37;
  CGFloat v38;
  CGFloat v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  long long v45;
  long long v46;
  long long v47;
  unsigned int v48;
  long long v49;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  int v60;
  int v61;
  unsigned __int8 v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int16 v70;
  char v71;
  __int16 v72;
  char v73;
  __int16 v74;
  char v75;
  long long v76;
  long long v77;
  unsigned char v78[80];
  long long v79;
  long long v80;
  long long v81;
  long long v82;
  long long v83;
  long long v84;
  long long v85;
  unsigned char v86[25];
  uint64_t v87;
  long long v88;
  long long v89;
  long long v90;
  long long v91;
  uint64_t v92;
  long long v93;
  long long v94;
  long long v95;
  long long v96;
  long long v97;
  long long v98;
  long long v99;
  long long v100;
  long long v101;
  long long v102;
  long long v103;
  long long v104;
  long long v105;
  long long v106;
  _OWORD v107[2];
  void v108[4];
  unsigned __int8 v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned __int8 v114;
  uint64_t v115;
  CGRect v116;
  CGRect v117;

  char v6 = v0;
  uint64_t v115 = *MEMORY[0x263EF8340];
  uint64_t v7 = *((_DWORD *)v0 + 3);
  type metadata accessor for _ShapeView<Path, ForegroundStyle>();
  uint64_t Value = AGGraphGetValue();
  int v10 = *(void *)Value;
  double v9 = *(void *)(Value + 8);
  uint64_t v11 = *(void *)(Value + 16);
  double v12 = *(void *)(Value + 24);
  double v13 = *(unsigned char *)(Value + 32);
  uint64_t v14 = *(unsigned __int8 *)(Value + 33);
  uint64_t v15 = *(unsigned __int8 *)(Value + 34);
  if ((v16 & 1) != 0 || !*((_WORD *)v6 + 25))
  {
    outlined copy of Path.Storage(*(void *)Value, v9, v11, v12, v13);
    int v18 = ++static DisplayList.Version.lastValue;
  }
  else
  {
    *(void *)&__int16 v93 = *(uint64_t *)((char *)v6 + 28);
    DWORD2(v93) = v7;
    outlined copy of Path.Storage(v10, v9, v11, v12, v13);
    char v17 = AGGraphAnyInputsChanged();
    int v18 = ++static DisplayList.Version.lastValue;
    if (!v17) {
      goto LABEL_9;
    }
  }
  unint64_t v19 = (2 * ((33 * (v18 >> 16)) ^ v18)) | 1;
  if (!v18) {
    LOWORD(v19) = 0;
  }
  *((_WORD *)v6 + 25) = v19;
LABEL_9:
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    long long v60 = v15;
    int64x2_t v61 = v14;
    unint64_t v64 = v18;
    int v20 = *((_DWORD *)v6 + 10);
    unint64_t v66 = v11;
    unint64_t v67 = v12;
    int v21 = AGCreateWeakAttribute();
    unint64_t v65 = v9;
    long long v56 = v21;
    unint64_t v63 = HIDWORD(v21);
    unint64_t v22 = AGCreateWeakAttribute();
    unint64_t v68 = v10;
    int v23 = v22;
    long long v58 = HIDWORD(v22);
    unsigned int v59 = v20;
    unint64_t v24 = AGCreateWeakAttribute();
    int v25 = v24;
    long long v54 = HIDWORD(v24);
    unint64_t v26 = AGCreateWeakAttribute();
    int v27 = v26;
    long long v53 = HIDWORD(v26);
    unint64_t v28 = AGCreateWeakAttribute();
    LODWORD(v10) = v28;
    long long v52 = HIDWORD(v28);
    int v29 = AGCreateWeakAttribute();
    unint64_t v30 = v29;
    long long v51 = HIDWORD(v29);
    int v31 = (double *)AGGraphGetValue();
    unint64_t v32 = *v31;
    int v33 = v31[1];
    long long v34 = (double *)AGGraphGetValue();
    double v35 = v32 - *v34;
    double v36 = v33 - v34[1];
    Swift::Double_optional v37 = AGGraphGetValue();
    double v38 = *(double *)v37;
    double v39 = *(double *)(v37 + 8);
    _threadGeometryProxyData();
    *(void *)&__int16 v93 = __PAIR64__(v63, v56);
    *((void *)&v93 + 1) = __PAIR64__(v58, v23);
    *(void *)&CGFloat v94 = __PAIR64__(v54, v25);
    *((void *)&v94 + 1) = __PAIR64__(v53, v27);
    *(void *)&CGFloat v95 = __PAIR64__(v52, v10);
    *((void *)&v95 + 1) = __PAIR64__(v51, v30);
    LODWORD(v96) = v64;
    _setThreadGeometryProxyData();
    uint64_t v40 = v9;
    int v110 = v68;
    uint64_t v111 = v9;
    char v112 = v66;
    int v113 = v12;
    char v114 = v13;
    outlined copy of Path.Storage(v68, v9, v66, v12, v13);
    specialized Shape.effectivePath(in:)((uint64_t)v108, *(unint64_t *)&v38);
    double v9 = v108[1];
    uint64_t v11 = v108[2];
    long long v55 = v108[3];
    long long v57 = v108[0];
    unsigned int v1 = v109;
    char v62 = v13;
    outlined consume of Path.Storage(v68, v40, v66, v12, v13);
    _setThreadGeometryProxyData();
    CGFloat v41 = *v6;
    int v88 = 0u;
    int v89 = 0u;
    long long v90 = 0u;
    long long v91 = 0u;
    int v87 = v41;
    __int16 v92 = 0x80000000;
    swift_retain();
    _s7SwiftUI4PathVWOrTm_0((uint64_t)v108, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
    v116.origin.CGFloat x = 0.0;
    v116.origin.CGFloat y = 0.0;
    v116.size.CGFloat width = v38;
    v116.size.CGFloat height = v39;
    long long v117 = CGRectOffset(v116, v35, v36);
    CGFloat x = v117.origin.x;
    CGFloat y = v117.origin.y;
    CGFloat width = v117.size.width;
    CGFloat height = v117.size.height;
    uint64_t v14 = *((_DWORD *)v6 + 2);
    LOWORD(v15) = *((_WORD *)v6 + 25);
    LOBYTE(v10) = *((unsigned char *)v6 + 48);
    if (one-time initialization token for normal == -1) {
      goto LABEL_11;
    }
  }
  swift_once();
LABEL_11:
  CGFloat v42 = 0x10000;
  if (!v60) {
    CGFloat v42 = 0;
  }
  uint64_t v43 = 256;
  if (!v61) {
    uint64_t v43 = 0;
  }
  *(void *)&char v76 = v57;
  *((void *)&v76 + 1) = v9;
  *(void *)&int v77 = v11;
  *((void *)&v77 + 1) = v55;
  *(void *)int v78 = v42 | v43 | v1;
  memset(&v78[8], 0, 60);
  *(_WORD *)&v78[68] = v15;
  *(CGFloat *)&v78[72] = x;
  *(CGFloat *)&int v79 = y;
  *((CGFloat *)&v79 + 1) = width;
  int v80 = *(unint64_t *)&height;
  LODWORD(v81) = 0;
  *((CGFloat *)&v81 + 1) = x;
  *(CGFloat *)&int v82 = y;
  *((CGFloat *)&v82 + 1) = width;
  *(CGFloat *)&int v83 = height;
  *((void *)&v83 + 1) = v64;
  int v84 = xmmword_2461B9DE0;
  *(void *)&int v85 = 0;
  BYTE10(v85) = 0;
  WORD4(v85) = 0;
  HIDWORD(v85) = v14;
  v86[0] = v10;
  *(_WORD *)&v86[1] = v74;
  v86[3] = v75;
  *(_DWORD *)&v86[4] = v59;
  *(void *)&v86[8] = static GraphicsBlendMode.normal;
  v86[16] = byte_26B0EB4A0;
  *(_WORD *)&v86[17] = v72;
  v86[19] = v73;
  *(_DWORD *)&v86[20] = 1065353216;
  v86[24] = 0;
  LOBYTE(v93) = 0;
  uint64_t v44 = *((unsigned int *)v6 + 4);
  outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_26B0EB4A0);
  _ShapeStyle_RenderedShape.renderItem(name:styles:layers:)((unsigned __int8 *)&v93, v44, (uint64_t)&v87);
  LOBYTE(v93) = v10;
  _ShapeStyle_RenderedLayers.commit(shape:options:)((unint64_t)&v76, (char *)&v93, (uint64_t)&v69);
  *(void *)&__int16 v93 = v69;
  WORD4(v93) = v70;
  BYTE10(v93) = v71;
  AGGraphSetOutputValue();
  _s7SwiftUI4PathVWOrTm_0((uint64_t)v108, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
  swift_bridgeObjectRelease();
  uint64_t v105 = v84;
  __int16 v106 = v85;
  v107[0] = *(_OWORD *)v86;
  *(_OWORD *)((char *)v107 + 9) = *(_OWORD *)&v86[9];
  CGFloat v101 = v80;
  CGFloat v102 = v81;
  CGFloat v103 = v82;
  unint64_t v104 = v83;
  CGFloat v97 = *(_OWORD *)&v78[32];
  uint64_t v98 = *(_OWORD *)&v78[48];
  int v99 = *(_OWORD *)&v78[64];
  CGFloat v100 = v79;
  __int16 v93 = v76;
  CGFloat v94 = v77;
  CGFloat v95 = *(_OWORD *)v78;
  CGFloat v96 = *(_OWORD *)&v78[16];
  outlined release of _ShapeStyle_RenderedShape((uint64_t)&v93);
  uint64_t v45 = v88;
  uint64_t v46 = v89;
  char v47 = v90;
  long long v49 = v91;
  uint64_t v48 = v92;
  swift_release();
  outlined consume of _ShapeStyle_RenderedLayers.Layers(v45, *((uint64_t *)&v45 + 1), v46, *((uint64_t *)&v46 + 1), v47, *((uint64_t *)&v47 + 1), v49, *((uint64_t *)&v49 + 1), v48);
  return outlined consume of Path.Storage(v68, v65, v66, v67, v62);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  __int16 v5;
  uint64_t *v6;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  uint64_t *v11;
  int v12;
  uint64_t Value;
  long long v14;
  int v15;
  uint64_t v16;
  char v17;
  int v18;
  unint64_t v19;
  int v20;
  unint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unsigned int v24;
  unint64_t v25;
  unsigned int v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  unsigned int v30;
  unint64_t v31;
  unsigned int v32;
  double *v33;
  double v34;
  double v35;
  double *v36;
  CGFloat v37;
  CGFloat v38;
  uint64_t v39;
  double v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  long long v46;
  long long v47;
  long long v48;
  long long v49;
  unsigned int v50;
  long long v51;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  int v59;
  int v60;
  int v61;
  unint64_t v62;
  uint64_t v63;
  __int16 v64;
  char v65;
  long long v66;
  long long v67;
  char v68;
  long long v69;
  long long v70;
  unsigned char v71[80];
  long long v72;
  long long v73;
  long long v74;
  long long v75;
  long long v76;
  long long v77;
  long long v78;
  unsigned char v79[25];
  uint64_t v80;
  long long v81;
  long long v82;
  long long v83;
  long long v84;
  uint64_t v85;
  long long v86;
  long long v87;
  long long v88;
  long long v89;
  long long v90;
  long long v91;
  long long v92;
  long long v93;
  long long v94;
  long long v95;
  long long v96;
  long long v97;
  long long v98;
  void v99[4];
  unsigned __int8 v100;
  uint64_t v101;
  CGRect v102;
  CGRect v103;

  uint64_t v11 = v0;
  CGFloat v101 = *MEMORY[0x263EF8340];
  double v12 = *((_DWORD *)v0 + 3);
  type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for AnimatedShape<UnevenRoundedRectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type UnevenRoundedRectangle and conformance UnevenRoundedRectangle, (uint64_t)&type metadata for UnevenRoundedRectangle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  uint64_t Value = AGGraphGetValue();
  uint64_t v14 = *(_OWORD *)(Value + 16);
  unint64_t v66 = *(_OWORD *)Value;
  unint64_t v67 = v14;
  unint64_t v68 = *(unsigned char *)(Value + 32);
  uint64_t v15 = *(unsigned __int8 *)(Value + 33);
  uint64_t v16 = *(unsigned __int8 *)(Value + 34);
  if ((v17 & 1) != 0 || !*((_WORD *)v11 + 25))
  {
    unint64_t v19 = ++static DisplayList.Version.lastValue;
  }
  else
  {
    *(void *)&int v86 = *(uint64_t *)((char *)v11 + 28);
    DWORD2(v86) = v12;
    int v18 = AGGraphAnyInputsChanged();
    unint64_t v19 = ++static DisplayList.Version.lastValue;
    if (!v18) {
      goto LABEL_9;
    }
  }
  int v20 = (2 * ((33 * (v19 >> 16)) ^ v19)) | 1;
  if (!v19) {
    LOWORD(v20) = 0;
  }
  *((_WORD *)v11 + 25) = v20;
LABEL_9:
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    long long v60 = v16;
    int64x2_t v61 = v15;
    uint64_t v15 = *((_DWORD *)v11 + 10);
    int v21 = AGCreateWeakAttribute();
    char v62 = v19;
    unint64_t v22 = v21;
    long long v58 = HIDWORD(v21);
    int v23 = AGCreateWeakAttribute();
    unint64_t v24 = v23;
    long long v57 = HIDWORD(v23);
    unsigned int v59 = v15;
    int v25 = AGCreateWeakAttribute();
    unint64_t v26 = v25;
    long long v56 = HIDWORD(v25);
    int v27 = AGCreateWeakAttribute();
    unint64_t v28 = v27;
    long long v55 = HIDWORD(v27);
    int v29 = AGCreateWeakAttribute();
    unint64_t v30 = v29;
    long long v54 = HIDWORD(v29);
    int v31 = AGCreateWeakAttribute();
    unint64_t v32 = v31;
    long long v53 = HIDWORD(v31);
    char v6 = &v80;
    int v33 = (double *)AGGraphGetValue();
    long long v34 = *v33;
    double v35 = v33[1];
    double v36 = (double *)AGGraphGetValue();
    Swift::Double_optional v37 = v34 - *v36;
    double v38 = v35 - v36[1];
    double v39 = AGGraphGetValue();
    uint64_t v40 = *(double *)v39;
    CGFloat v41 = *(double *)(v39 + 8);
    _threadGeometryProxyData();
    *(void *)&int v86 = __PAIR64__(v58, v22);
    *((void *)&v86 + 1) = __PAIR64__(v57, v24);
    *(void *)&int v87 = __PAIR64__(v56, v26);
    *((void *)&v87 + 1) = __PAIR64__(v55, v28);
    *(void *)&int v88 = __PAIR64__(v54, v30);
    *((void *)&v88 + 1) = __PAIR64__(v53, v32);
    LODWORD(v89) = v62;
    _setThreadGeometryProxyData();
    specialized Shape.effectivePath(in:)((uint64_t)v99, 0.0, 0.0, v40, v41);
    unint64_t v19 = v99[0];
    uint64_t v16 = v99[1];
    unsigned int v1 = v99[2];
    char v2 = v99[3];
    uint64_t v3 = v100;
    _setThreadGeometryProxyData();
    CGFloat v42 = *v11;
    int v81 = 0u;
    int v82 = 0u;
    int v83 = 0u;
    int v84 = 0u;
    int v80 = v42;
    int v85 = 0x80000000;
    swift_retain();
    _s7SwiftUI4PathVWOrTm_0((uint64_t)v99, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
    v102.origin.CGFloat x = 0.0;
    v102.origin.CGFloat y = 0.0;
    v102.size.CGFloat width = v40;
    v102.size.CGFloat height = v41;
    CGFloat v103 = CGRectOffset(v102, v37, v38);
    CGFloat x = v103.origin.x;
    CGFloat y = v103.origin.y;
    CGFloat width = v103.size.width;
    CGFloat height = v103.size.height;
    uint64_t v4 = *((_DWORD *)v11 + 2);
    __int16 v5 = *((_WORD *)v11 + 25);
    LOBYTE(v15) = *((unsigned char *)v11 + 48);
    if (one-time initialization token for normal == -1) {
      goto LABEL_11;
    }
  }
  swift_once();
LABEL_11:
  uint64_t v43 = 0x10000;
  if (!v60) {
    uint64_t v43 = 0;
  }
  uint64_t v44 = 256;
  if (!v61) {
    uint64_t v44 = 0;
  }
  *(void *)&int v69 = v19;
  *((void *)&v69 + 1) = v16;
  *(void *)&int v70 = v1;
  *((void *)&v70 + 1) = v2;
  *(void *)int v71 = v43 | v44 | v3;
  memset(&v71[8], 0, 60);
  *(_WORD *)&v71[68] = v5;
  *(CGFloat *)&v71[72] = x;
  *(CGFloat *)&unint64_t v72 = y;
  *((CGFloat *)&v72 + 1) = width;
  char v73 = *(unint64_t *)&height;
  LODWORD(v74) = 0;
  *((CGFloat *)&v74 + 1) = x;
  *(CGFloat *)&__int16 v75 = y;
  *((CGFloat *)&v75 + 1) = width;
  *(CGFloat *)&char v76 = height;
  int v77 = xmmword_2461B9DE0;
  *((void *)&v76 + 1) = v62;
  *(void *)&int v78 = 0;
  BYTE10(v78) = 0;
  WORD4(v78) = 0;
  HIDWORD(v78) = v4;
  v79[0] = v15;
  *(_DWORD *)&v79[4] = v59;
  *(void *)&v79[8] = static GraphicsBlendMode.normal;
  v79[16] = byte_26B0EB4A0;
  *(_DWORD *)&v79[20] = 1065353216;
  v79[24] = 0;
  LOBYTE(v86) = 0;
  uint64_t v45 = *((unsigned int *)v11 + 4);
  outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_26B0EB4A0);
  _ShapeStyle_RenderedShape.renderItem(name:styles:layers:)((unsigned __int8 *)&v86, v45, (uint64_t)&v80);
  LOBYTE(v86) = v15;
  _ShapeStyle_RenderedLayers.commit(shape:options:)((unint64_t)&v69, (char *)&v86, (uint64_t)&v63);
  *(void *)&int v86 = v63;
  WORD4(v86) = v64;
  BYTE10(v86) = v65;
  AGGraphSetOutputValue();
  _s7SwiftUI4PathVWOrTm_0((uint64_t)v99, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
  swift_bridgeObjectRelease();
  uint64_t v46 = v78;
  *((_OWORD *)v6 + 17) = v77;
  *((_OWORD *)v6 + 18) = v46;
  *((_OWORD *)v6 + 19) = *(_OWORD *)v79;
  uint64_t v98 = *(_OWORD *)&v79[9];
  CGFloat v94 = v73;
  CGFloat v95 = v74;
  CGFloat v96 = v75;
  CGFloat v97 = v76;
  long long v90 = *(_OWORD *)&v71[32];
  long long v91 = *(_OWORD *)&v71[48];
  __int16 v92 = *(_OWORD *)&v71[64];
  __int16 v93 = v72;
  int v86 = v69;
  int v87 = v70;
  int v88 = *(_OWORD *)v71;
  int v89 = *(_OWORD *)&v71[16];
  outlined release of _ShapeStyle_RenderedShape((uint64_t)&v86);
  char v47 = v81;
  uint64_t v48 = v82;
  long long v49 = v83;
  long long v51 = v84;
  long long v50 = v85;
  swift_release();
  return outlined consume of _ShapeStyle_RenderedLayers.Layers(v47, *((uint64_t *)&v47 + 1), v48, *((uint64_t *)&v48 + 1), v49, *((uint64_t *)&v49 + 1), v51, *((uint64_t *)&v51 + 1), v50);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  __int16 v5;
  uint64_t *v6;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  uint64_t *v11;
  int v12;
  uint64_t Value;
  long long v14;
  int v15;
  uint64_t v16;
  char v17;
  int v18;
  unint64_t v19;
  int v20;
  unint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unsigned int v24;
  unint64_t v25;
  unsigned int v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  unsigned int v30;
  unint64_t v31;
  unsigned int v32;
  double *v33;
  double v34;
  double v35;
  double *v36;
  CGFloat v37;
  CGFloat v38;
  uint64_t v39;
  CGFloat v40;
  CGFloat v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  long long v46;
  long long v47;
  long long v48;
  long long v49;
  unsigned int v50;
  long long v51;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  int v59;
  int v60;
  int v61;
  unint64_t v62;
  uint64_t v63;
  __int16 v64;
  char v65;
  long long v66;
  long long v67;
  long long v68;
  long long v69;
  long long v70;
  unsigned char v71[80];
  long long v72;
  long long v73;
  long long v74;
  long long v75;
  long long v76;
  long long v77;
  long long v78;
  unsigned char v79[25];
  uint64_t v80;
  long long v81;
  long long v82;
  long long v83;
  long long v84;
  uint64_t v85;
  long long v86;
  long long v87;
  long long v88;
  long long v89;
  long long v90;
  long long v91;
  long long v92;
  long long v93;
  long long v94;
  long long v95;
  long long v96;
  long long v97;
  long long v98;
  void v99[4];
  unsigned __int8 v100;
  uint64_t v101;
  CGRect v102;
  CGRect v103;

  uint64_t v11 = v0;
  CGFloat v101 = *MEMORY[0x263EF8340];
  double v12 = *((_DWORD *)v0 + 3);
  type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for AnimatedShape<UnevenRoundedRectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type UnevenRoundedRectangle._Inset and conformance UnevenRoundedRectangle._Inset, (uint64_t)&type metadata for UnevenRoundedRectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  uint64_t Value = AGGraphGetValue();
  uint64_t v14 = *(_OWORD *)(Value + 16);
  unint64_t v66 = *(_OWORD *)Value;
  unint64_t v67 = v14;
  unint64_t v68 = *(_OWORD *)(Value + 32);
  uint64_t v15 = *(unsigned __int8 *)(Value + 48);
  uint64_t v16 = *(unsigned __int8 *)(Value + 49);
  if ((v17 & 1) != 0 || !*((_WORD *)v11 + 25))
  {
    unint64_t v19 = ++static DisplayList.Version.lastValue;
  }
  else
  {
    *(void *)&int v86 = *(uint64_t *)((char *)v11 + 28);
    DWORD2(v86) = v12;
    int v18 = AGGraphAnyInputsChanged();
    unint64_t v19 = ++static DisplayList.Version.lastValue;
    if (!v18) {
      goto LABEL_9;
    }
  }
  int v20 = (2 * ((33 * (v19 >> 16)) ^ v19)) | 1;
  if (!v19) {
    LOWORD(v20) = 0;
  }
  *((_WORD *)v11 + 25) = v20;
LABEL_9:
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    long long v60 = v16;
    int64x2_t v61 = v15;
    uint64_t v15 = *((_DWORD *)v11 + 10);
    int v21 = AGCreateWeakAttribute();
    char v62 = v19;
    unint64_t v22 = v21;
    long long v58 = HIDWORD(v21);
    int v23 = AGCreateWeakAttribute();
    unint64_t v24 = v23;
    long long v57 = HIDWORD(v23);
    unsigned int v59 = v15;
    int v25 = AGCreateWeakAttribute();
    unint64_t v26 = v25;
    long long v56 = HIDWORD(v25);
    int v27 = AGCreateWeakAttribute();
    unint64_t v28 = v27;
    long long v55 = HIDWORD(v27);
    int v29 = AGCreateWeakAttribute();
    unint64_t v30 = v29;
    long long v54 = HIDWORD(v29);
    int v31 = AGCreateWeakAttribute();
    unint64_t v32 = v31;
    long long v53 = HIDWORD(v31);
    char v6 = &v80;
    int v33 = (double *)AGGraphGetValue();
    long long v34 = *v33;
    double v35 = v33[1];
    double v36 = (double *)AGGraphGetValue();
    Swift::Double_optional v37 = v34 - *v36;
    double v38 = v35 - v36[1];
    double v39 = AGGraphGetValue();
    uint64_t v40 = *(double *)v39;
    CGFloat v41 = *(double *)(v39 + 8);
    _threadGeometryProxyData();
    *(void *)&int v86 = __PAIR64__(v58, v22);
    *((void *)&v86 + 1) = __PAIR64__(v57, v24);
    *(void *)&int v87 = __PAIR64__(v56, v26);
    *((void *)&v87 + 1) = __PAIR64__(v55, v28);
    *(void *)&int v88 = __PAIR64__(v54, v30);
    *((void *)&v88 + 1) = __PAIR64__(v53, v32);
    LODWORD(v89) = v62;
    _setThreadGeometryProxyData();
    specialized Shape.effectivePath(in:)((uint64_t)v99, 0.0, *(unint64_t *)&v40);
    unint64_t v19 = v99[0];
    uint64_t v16 = v99[1];
    unsigned int v1 = v99[2];
    char v2 = v99[3];
    uint64_t v3 = v100;
    _setThreadGeometryProxyData();
    CGFloat v42 = *v11;
    int v81 = 0u;
    int v82 = 0u;
    int v83 = 0u;
    int v84 = 0u;
    int v80 = v42;
    int v85 = 0x80000000;
    swift_retain();
    _s7SwiftUI4PathVWOrTm_0((uint64_t)v99, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
    v102.origin.CGFloat x = 0.0;
    v102.origin.CGFloat y = 0.0;
    v102.size.CGFloat width = v40;
    v102.size.CGFloat height = v41;
    CGFloat v103 = CGRectOffset(v102, v37, v38);
    CGFloat x = v103.origin.x;
    CGFloat y = v103.origin.y;
    CGFloat width = v103.size.width;
    CGFloat height = v103.size.height;
    uint64_t v4 = *((_DWORD *)v11 + 2);
    __int16 v5 = *((_WORD *)v11 + 25);
    LOBYTE(v15) = *((unsigned char *)v11 + 48);
    if (one-time initialization token for normal == -1) {
      goto LABEL_11;
    }
  }
  swift_once();
LABEL_11:
  uint64_t v43 = 0x10000;
  if (!v60) {
    uint64_t v43 = 0;
  }
  uint64_t v44 = 256;
  if (!v61) {
    uint64_t v44 = 0;
  }
  *(void *)&int v69 = v19;
  *((void *)&v69 + 1) = v16;
  *(void *)&int v70 = v1;
  *((void *)&v70 + 1) = v2;
  *(void *)int v71 = v43 | v44 | v3;
  memset(&v71[8], 0, 60);
  *(_WORD *)&v71[68] = v5;
  *(CGFloat *)&v71[72] = x;
  *(CGFloat *)&unint64_t v72 = y;
  *((CGFloat *)&v72 + 1) = width;
  char v73 = *(unint64_t *)&height;
  LODWORD(v74) = 0;
  *((CGFloat *)&v74 + 1) = x;
  *(CGFloat *)&__int16 v75 = y;
  *((CGFloat *)&v75 + 1) = width;
  *(CGFloat *)&char v76 = height;
  int v77 = xmmword_2461B9DE0;
  *((void *)&v76 + 1) = v62;
  *(void *)&int v78 = 0;
  BYTE10(v78) = 0;
  WORD4(v78) = 0;
  HIDWORD(v78) = v4;
  v79[0] = v15;
  *(_DWORD *)&v79[4] = v59;
  *(void *)&v79[8] = static GraphicsBlendMode.normal;
  v79[16] = byte_26B0EB4A0;
  *(_DWORD *)&v79[20] = 1065353216;
  v79[24] = 0;
  LOBYTE(v86) = 0;
  uint64_t v45 = *((unsigned int *)v11 + 4);
  outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_26B0EB4A0);
  _ShapeStyle_RenderedShape.renderItem(name:styles:layers:)((unsigned __int8 *)&v86, v45, (uint64_t)&v80);
  LOBYTE(v86) = v15;
  _ShapeStyle_RenderedLayers.commit(shape:options:)((unint64_t)&v69, (char *)&v86, (uint64_t)&v63);
  *(void *)&int v86 = v63;
  WORD4(v86) = v64;
  BYTE10(v86) = v65;
  AGGraphSetOutputValue();
  _s7SwiftUI4PathVWOrTm_0((uint64_t)v99, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
  swift_bridgeObjectRelease();
  uint64_t v46 = v78;
  *((_OWORD *)v6 + 17) = v77;
  *((_OWORD *)v6 + 18) = v46;
  *((_OWORD *)v6 + 19) = *(_OWORD *)v79;
  uint64_t v98 = *(_OWORD *)&v79[9];
  CGFloat v94 = v73;
  CGFloat v95 = v74;
  CGFloat v96 = v75;
  CGFloat v97 = v76;
  long long v90 = *(_OWORD *)&v71[32];
  long long v91 = *(_OWORD *)&v71[48];
  __int16 v92 = *(_OWORD *)&v71[64];
  __int16 v93 = v72;
  int v86 = v69;
  int v87 = v70;
  int v88 = *(_OWORD *)v71;
  int v89 = *(_OWORD *)&v71[16];
  outlined release of _ShapeStyle_RenderedShape((uint64_t)&v86);
  char v47 = v81;
  uint64_t v48 = v82;
  long long v49 = v83;
  long long v51 = v84;
  long long v50 = v85;
  swift_release();
  return outlined consume of _ShapeStyle_RenderedLayers.Layers(v47, *((uint64_t *)&v47 + 1), v48, *((uint64_t *)&v48 + 1), v49, *((uint64_t *)&v49 + 1), v51, *((uint64_t *)&v51 + 1), v50);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int16 v5;
  uint64_t *v6;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  int v11;
  unsigned __int8 *Value;
  int v13;
  uint64_t v14;
  char v15;
  int v16;
  unint64_t v17;
  int v18;
  int v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unsigned int v27;
  unint64_t v28;
  unsigned int v29;
  double *v30;
  double v31;
  double v32;
  double *v33;
  CGFloat v34;
  CGFloat v35;
  uint64_t v36;
  CGFloat v37;
  CGFloat v38;
  __n128 v39;
  __n128 v40;
  __n128 v41;
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  long long v47;
  long long v48;
  long long v49;
  long long v50;
  long long v51;
  long long v52;
  unsigned int v53;
  long long v54;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  int v63;
  int v64;
  int v65;
  uint64_t v66;
  __int16 v67;
  char v68;
  long long v69;
  long long v70;
  unsigned char v71[80];
  long long v72;
  long long v73;
  long long v74;
  long long v75;
  long long v76;
  long long v77;
  long long v78;
  unsigned char v79[25];
  uint64_t v80;
  long long v81;
  long long v82;
  long long v83;
  long long v84;
  uint64_t v85;
  long long v86;
  long long v87;
  long long v88;
  long long v89;
  long long v90;
  long long v91;
  long long v92;
  long long v93;
  long long v94;
  long long v95;
  long long v96;
  long long v97;
  long long v98;
  void v99[4];
  unsigned __int8 v100;
  uint64_t v101;
  CGRect v102;
  CGRect v103;

  CGFloat v101 = *MEMORY[0x263EF8340];
  uint64_t v11 = *((_DWORD *)v0 + 3);
  type metadata accessor for _ShapeView<ContainerRelativeShape, ForegroundStyle>();
  uint64_t Value = (unsigned __int8 *)AGGraphGetValue();
  double v13 = *Value;
  uint64_t v14 = Value[1];
  if ((v15 & 1) != 0 || !*((_WORD *)v0 + 25))
  {
    char v17 = ++static DisplayList.Version.lastValue;
  }
  else
  {
    *(void *)&int v86 = *(uint64_t *)((char *)v0 + 28);
    DWORD2(v86) = v11;
    uint64_t v16 = AGGraphAnyInputsChanged();
    char v17 = ++static DisplayList.Version.lastValue;
    if (!v16) {
      goto LABEL_9;
    }
  }
  int v18 = (2 * ((33 * (v17 >> 16)) ^ v17)) | 1;
  if (!v17) {
    LOWORD(v18) = 0;
  }
  *((_WORD *)v0 + 25) = v18;
LABEL_9:
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    unint64_t v64 = v14;
    unint64_t v65 = v13;
    unint64_t v19 = *((_DWORD *)v0 + 10);
    long long v60 = AGCreateWeakAttribute();
    int v20 = AGCreateWeakAttribute();
    int v21 = v20;
    int64x2_t v61 = HIDWORD(v20);
    unint64_t v63 = v19;
    unint64_t v22 = AGCreateWeakAttribute();
    int v23 = v22;
    unsigned int v59 = HIDWORD(v22);
    unint64_t v24 = AGCreateWeakAttribute();
    int v25 = v24;
    long long v58 = HIDWORD(v24);
    unint64_t v26 = AGCreateWeakAttribute();
    int v27 = v26;
    long long v57 = HIDWORD(v26);
    unint64_t v28 = AGCreateWeakAttribute();
    int v29 = v28;
    long long v56 = HIDWORD(v28);
    char v6 = &v80;
    unint64_t v30 = (double *)AGGraphGetValue();
    int v31 = *v30;
    unint64_t v32 = v30[1];
    int v33 = (double *)AGGraphGetValue();
    long long v34 = v31 - *v33;
    double v35 = v32 - v33[1];
    double v36 = AGGraphGetValue();
    Swift::Double_optional v37 = *(double *)v36;
    double v38 = *(double *)(v36 + 8);
    _threadGeometryProxyData();
    *(void *)&int v86 = v60;
    *((void *)&v86 + 1) = __PAIR64__(v61, v21);
    *(void *)&int v87 = __PAIR64__(v59, v23);
    *((void *)&v87 + 1) = __PAIR64__(v58, v25);
    *(void *)&int v88 = __PAIR64__(v57, v27);
    *((void *)&v88 + 1) = __PAIR64__(v56, v29);
    char v62 = v17;
    LODWORD(v89) = v17;
    _setThreadGeometryProxyData();
    v39.n128_u64[0] = 0;
    v40.n128_u64[0] = 0;
    v41.n128_f64[0] = v37;
    v42.n128_f64[0] = v38;
    specialized Shape.effectivePath(in:)((uint64_t)v99, v39, v40, v41, v42);
    uint64_t v14 = v99[0];
    unsigned int v1 = v99[1];
    char v2 = v99[2];
    uint64_t v3 = v99[3];
    uint64_t v4 = v100;
    _setThreadGeometryProxyData();
    uint64_t v43 = *v0;
    int v81 = 0u;
    int v82 = 0u;
    int v83 = 0u;
    int v84 = 0u;
    int v80 = v43;
    int v85 = 0x80000000;
    swift_retain();
    _s7SwiftUI4PathVWOrTm_0((uint64_t)v99, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
    v102.origin.CGFloat x = 0.0;
    v102.origin.CGFloat y = 0.0;
    v102.size.CGFloat width = v37;
    v102.size.CGFloat height = v38;
    CGFloat v103 = CGRectOffset(v102, v34, v35);
    CGFloat x = v103.origin.x;
    CGFloat y = v103.origin.y;
    CGFloat width = v103.size.width;
    CGFloat height = v103.size.height;
    LODWORD(v17) = *((_DWORD *)v0 + 2);
    __int16 v5 = *((_WORD *)v0 + 25);
    LOBYTE(v13) = *((unsigned char *)v0 + 48);
    if (one-time initialization token for normal == -1) {
      goto LABEL_11;
    }
  }
  swift_once();
LABEL_11:
  uint64_t v44 = 0x10000;
  if (!v64) {
    uint64_t v44 = 0;
  }
  uint64_t v45 = 256;
  if (!v65) {
    uint64_t v45 = 0;
  }
  *(void *)&int v69 = v14;
  *((void *)&v69 + 1) = v1;
  *(void *)&int v70 = v2;
  *((void *)&v70 + 1) = v3;
  *(void *)int v71 = v44 | v45 | v4;
  memset(&v71[8], 0, 60);
  *(_WORD *)&v71[68] = v5;
  *(CGFloat *)&v71[72] = x;
  *(CGFloat *)&unint64_t v72 = y;
  *((CGFloat *)&v72 + 1) = width;
  char v73 = *(unint64_t *)&height;
  LODWORD(v74) = 0;
  *((CGFloat *)&v74 + 1) = x;
  *(CGFloat *)&__int16 v75 = y;
  *((CGFloat *)&v75 + 1) = width;
  *(CGFloat *)&char v76 = height;
  int v77 = xmmword_2461B9DE0;
  *((void *)&v76 + 1) = v62;
  *(void *)&int v78 = 0;
  BYTE10(v78) = 0;
  WORD4(v78) = 0;
  HIDWORD(v78) = v17;
  v79[0] = v13;
  *(_DWORD *)&v79[4] = v63;
  *(void *)&v79[8] = static GraphicsBlendMode.normal;
  v79[16] = byte_26B0EB4A0;
  *(_DWORD *)&v79[20] = 1065353216;
  v79[24] = 0;
  LOBYTE(v86) = 0;
  uint64_t v46 = *((unsigned int *)v0 + 4);
  outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_26B0EB4A0);
  _ShapeStyle_RenderedShape.renderItem(name:styles:layers:)((unsigned __int8 *)&v86, v46, (uint64_t)&v80);
  LOBYTE(v86) = v13;
  _ShapeStyle_RenderedLayers.commit(shape:options:)((unint64_t)&v69, (char *)&v86, (uint64_t)&v66);
  *(void *)&int v86 = v66;
  WORD4(v86) = v67;
  BYTE10(v86) = v68;
  AGGraphSetOutputValue();
  _s7SwiftUI4PathVWOrTm_0((uint64_t)v99, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
  swift_bridgeObjectRelease();
  char v47 = v78;
  uint64_t v48 = *(_OWORD *)v79;
  long long v49 = v76;
  *((_OWORD *)v6 + 17) = v77;
  *((_OWORD *)v6 + 18) = v47;
  *((_OWORD *)v6 + 19) = v48;
  uint64_t v98 = *(_OWORD *)&v79[9];
  CGFloat v94 = v73;
  CGFloat v95 = v74;
  CGFloat v96 = v75;
  CGFloat v97 = v49;
  long long v90 = *(_OWORD *)&v71[32];
  long long v91 = *(_OWORD *)&v71[48];
  __int16 v92 = *(_OWORD *)&v71[64];
  __int16 v93 = v72;
  int v86 = v69;
  int v87 = v70;
  int v88 = *(_OWORD *)v71;
  int v89 = *(_OWORD *)&v71[16];
  outlined release of _ShapeStyle_RenderedShape((uint64_t)&v86);
  long long v50 = v81;
  long long v51 = v82;
  long long v52 = v83;
  long long v54 = v84;
  long long v53 = v85;
  swift_release();
  return outlined consume of _ShapeStyle_RenderedLayers.Layers(v50, *((uint64_t *)&v50 + 1), v51, *((uint64_t *)&v51 + 1), v52, *((uint64_t *)&v52 + 1), v54, *((uint64_t *)&v54 + 1), v53);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  __int16 v4;
  uint64_t *v5;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  uint64_t *v10;
  int v11;
  uint64_t Value;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  char v19;
  int v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  unsigned int v24;
  unint64_t v25;
  unsigned int v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  unsigned int v30;
  unint64_t v31;
  unsigned int v32;
  unint64_t v33;
  unsigned int v34;
  double *v35;
  double v36;
  double v37;
  double *v38;
  CGFloat v39;
  CGFloat v40;
  uint64_t v41;
  CGFloat v42;
  CGFloat v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  long long v48;
  long long v49;
  long long v50;
  long long v51;
  long long v52;
  long long v53;
  unsigned int v54;
  long long v55;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char v63;
  int v64;
  int v65;
  int v66;
  unint64_t v67;
  uint64_t v68;
  __int16 v69;
  char v70;
  long long v71;
  long long v72;
  unsigned char v73[80];
  long long v74;
  long long v75;
  long long v76;
  long long v77;
  long long v78;
  long long v79;
  long long v80;
  unsigned char v81[25];
  uint64_t v82;
  long long v83;
  long long v84;
  long long v85;
  long long v86;
  uint64_t v87;
  long long v88;
  long long v89;
  long long v90;
  long long v91;
  long long v92;
  long long v93;
  long long v94;
  long long v95;
  long long v96;
  long long v97;
  long long v98;
  long long v99;
  long long v100;
  void v101[4];
  unsigned __int8 v102;
  uint64_t v103;
  CGRect v104;
  CGRect v105;

  int v10 = v0;
  CGFloat v103 = *MEMORY[0x263EF8340];
  uint64_t v11 = *((_DWORD *)v0 + 3);
  type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for AnimatedShape<RoundedRectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type RoundedRectangle._Inset and conformance RoundedRectangle._Inset, (uint64_t)&type metadata for RoundedRectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatedShape);
  uint64_t Value = AGGraphGetValue();
  double v13 = *(void *)Value;
  uint64_t v14 = *(void *)(Value + 8);
  uint64_t v15 = *(unsigned __int8 *)(Value + 16);
  uint64_t v16 = *(void *)(Value + 24);
  char v17 = *(unsigned __int8 *)(Value + 32);
  int v18 = *(unsigned __int8 *)(Value + 33);
  if ((v19 & 1) != 0 || !*((_WORD *)v10 + 25))
  {
    int v21 = ++static DisplayList.Version.lastValue;
  }
  else
  {
    *(void *)&int v88 = *(uint64_t *)((char *)v10 + 28);
    DWORD2(v88) = v11;
    int v20 = AGGraphAnyInputsChanged();
    int v21 = ++static DisplayList.Version.lastValue;
    if (!v20) {
      goto LABEL_9;
    }
  }
  unint64_t v22 = (2 * ((33 * (v21 >> 16)) ^ v21)) | 1;
  if (!v21) {
    LOWORD(v22) = 0;
  }
  *((_WORD *)v10 + 25) = v22;
LABEL_9:
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    unint64_t v65 = v18;
    unint64_t v66 = v17;
    char v17 = *((_DWORD *)v10 + 10);
    int v23 = AGCreateWeakAttribute();
    unint64_t v67 = v21;
    unint64_t v24 = v23;
    char v62 = HIDWORD(v23);
    int v25 = AGCreateWeakAttribute();
    unint64_t v26 = v25;
    int64x2_t v61 = HIDWORD(v25);
    unint64_t v64 = v17;
    int v27 = AGCreateWeakAttribute();
    unint64_t v63 = v15;
    unint64_t v28 = v27;
    long long v60 = HIDWORD(v27);
    int v29 = AGCreateWeakAttribute();
    unint64_t v30 = v29;
    unsigned int v59 = HIDWORD(v29);
    int v31 = AGCreateWeakAttribute();
    unint64_t v32 = v31;
    long long v58 = HIDWORD(v31);
    int v33 = AGCreateWeakAttribute();
    long long v34 = v33;
    long long v57 = HIDWORD(v33);
    __int16 v5 = &v82;
    double v35 = (double *)AGGraphGetValue();
    double v36 = *v35;
    Swift::Double_optional v37 = v35[1];
    double v38 = (double *)AGGraphGetValue();
    double v39 = v36 - *v38;
    uint64_t v40 = v37 - v38[1];
    CGFloat v41 = AGGraphGetValue();
    CGFloat v42 = *(double *)v41;
    uint64_t v43 = *(double *)(v41 + 8);
    _threadGeometryProxyData();
    *(void *)&int v88 = __PAIR64__(v62, v24);
    *((void *)&v88 + 1) = __PAIR64__(v61, v26);
    *(void *)&int v89 = __PAIR64__(v60, v28);
    *((void *)&v89 + 1) = __PAIR64__(v59, v30);
    *(void *)&long long v90 = __PAIR64__(v58, v32);
    *((void *)&v90 + 1) = __PAIR64__(v57, v34);
    LODWORD(v91) = v67;
    _setThreadGeometryProxyData();
    *(void *)&int v71 = v13;
    *((void *)&v71 + 1) = v14;
    LOBYTE(v72) = v63;
    *((void *)&v72 + 1) = v16;
    RoundedRectangle._Inset.path(in:)((uint64_t)v101, 0.0);
    int v21 = v101[0];
    int v18 = v101[1];
    uint64_t v15 = v101[2];
    unsigned int v1 = v101[3];
    char v2 = v102;
    _setThreadGeometryProxyData();
    uint64_t v44 = *v10;
    int v83 = 0u;
    int v84 = 0u;
    int v85 = 0u;
    int v86 = 0u;
    int v82 = v44;
    int v87 = 0x80000000;
    swift_retain();
    _s7SwiftUI4PathVWOrTm_0((uint64_t)v101, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
    v104.origin.CGFloat x = 0.0;
    v104.origin.CGFloat y = 0.0;
    v104.size.CGFloat width = v42;
    v104.size.CGFloat height = v43;
    uint64_t v105 = CGRectOffset(v104, v39, v40);
    CGFloat x = v105.origin.x;
    CGFloat y = v105.origin.y;
    CGFloat width = v105.size.width;
    CGFloat height = v105.size.height;
    uint64_t v3 = *((_DWORD *)v10 + 2);
    uint64_t v4 = *((_WORD *)v10 + 25);
    LOBYTE(v17) = *((unsigned char *)v10 + 48);
    if (one-time initialization token for normal == -1) {
      goto LABEL_11;
    }
  }
  swift_once();
LABEL_11:
  uint64_t v45 = 0x10000;
  if (!v65) {
    uint64_t v45 = 0;
  }
  uint64_t v46 = 256;
  if (!v66) {
    uint64_t v46 = 0;
  }
  *(void *)&int v71 = v21;
  *((void *)&v71 + 1) = v18;
  *(void *)&unint64_t v72 = v15;
  *((void *)&v72 + 1) = v1;
  *(void *)char v73 = v45 | v46 | v2;
  memset(&v73[8], 0, 60);
  *(_WORD *)&v73[68] = v4;
  *(CGFloat *)&v73[72] = x;
  *(CGFloat *)&uint64_t v74 = y;
  *((CGFloat *)&v74 + 1) = width;
  __int16 v75 = *(unint64_t *)&height;
  LODWORD(v76) = 0;
  *((CGFloat *)&v76 + 1) = x;
  *(CGFloat *)&int v77 = y;
  *((CGFloat *)&v77 + 1) = width;
  *(CGFloat *)&int v78 = height;
  int v79 = xmmword_2461B9DE0;
  *((void *)&v78 + 1) = v67;
  *(void *)&int v80 = 0;
  BYTE10(v80) = 0;
  WORD4(v80) = 0;
  HIDWORD(v80) = v3;
  v81[0] = v17;
  *(_DWORD *)&v81[4] = v64;
  *(void *)&v81[8] = static GraphicsBlendMode.normal;
  v81[16] = byte_26B0EB4A0;
  *(_DWORD *)&v81[20] = 1065353216;
  v81[24] = 0;
  LOBYTE(v88) = 0;
  char v47 = *((unsigned int *)v10 + 4);
  outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_26B0EB4A0);
  _ShapeStyle_RenderedShape.renderItem(name:styles:layers:)((unsigned __int8 *)&v88, v47, (uint64_t)&v82);
  LOBYTE(v88) = v17;
  _ShapeStyle_RenderedLayers.commit(shape:options:)((unint64_t)&v71, (char *)&v88, (uint64_t)&v68);
  *(void *)&int v88 = v68;
  WORD4(v88) = v69;
  BYTE10(v88) = v70;
  AGGraphSetOutputValue();
  _s7SwiftUI4PathVWOrTm_0((uint64_t)v101, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
  swift_bridgeObjectRelease();
  uint64_t v48 = v80;
  long long v49 = *(_OWORD *)v81;
  long long v50 = v78;
  *((_OWORD *)v5 + 17) = v79;
  *((_OWORD *)v5 + 18) = v48;
  *((_OWORD *)v5 + 19) = v49;
  CGFloat v100 = *(_OWORD *)&v81[9];
  CGFloat v96 = v75;
  CGFloat v97 = v76;
  uint64_t v98 = v77;
  int v99 = v50;
  __int16 v92 = *(_OWORD *)&v73[32];
  __int16 v93 = *(_OWORD *)&v73[48];
  CGFloat v94 = *(_OWORD *)&v73[64];
  CGFloat v95 = v74;
  int v88 = v71;
  int v89 = v72;
  long long v90 = *(_OWORD *)v73;
  long long v91 = *(_OWORD *)&v73[16];
  outlined release of _ShapeStyle_RenderedShape((uint64_t)&v88);
  long long v51 = v83;
  long long v52 = v84;
  long long v53 = v85;
  long long v55 = v86;
  long long v54 = v87;
  swift_release();
  return outlined consume of _ShapeStyle_RenderedLayers.Layers(v51, *((uint64_t *)&v51 + 1), v52, *((uint64_t *)&v52 + 1), v53, *((uint64_t *)&v53 + 1), v55, *((uint64_t *)&v55 + 1), v54);
}

{
  uint64_t *v0;
  uint64_t *v1;
  unint64_t v2;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  int v7;
  uint64_t Value;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  int v14;
  unint64_t v15;
  int v16;
  int v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  int v27;
  unint64_t v28;
  int v29;
  double *v30;
  double v31;
  double v32;
  double *v33;
  double v34;
  double v35;
  uint64_t v36;
  CGFloat v37;
  CGFloat v38;
  BOOL IsNull;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  long long v44;
  long long v45;
  long long v46;
  long long v47;
  unsigned int v48;
  long long v49;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  unint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  __int16 v62;
  char v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  long long v77;
  long long v78;
  unsigned char v79[80];
  long long v80;
  long long v81;
  long long v82;
  long long v83;
  long long v84;
  long long v85;
  long long v86;
  unsigned char v87[25];
  uint64_t v88;
  long long v89;
  long long v90;
  long long v91;
  long long v92;
  uint64_t v93;
  _OWORD v94[16];
  uint64_t v95;
  CGRect v96;
  CGRect v97;
  CGRect v98;

  CGFloat v95 = *MEMORY[0x263EF8340];
  uint64_t v7 = *((_DWORD *)v0 + 3);
  type metadata accessor for _ShapeView<Rectangle, MeshGradient>();
  uint64_t Value = AGGraphGetValue();
  double v9 = *(void *)(Value + 16);
  int v10 = *(void *)(Value + 32);
  uint64_t v11 = *(unsigned __int8 *)(Value + 58);
  double v12 = *(unsigned __int8 *)(Value + 59);
  if ((v13 & 1) != 0 || !*((_WORD *)v0 + 25))
  {
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v15 = ++static DisplayList.Version.lastValue;
  }
  else
  {
    *(void *)&v94[0] = *(uint64_t *)((char *)v0 + 28);
    DWORD2(v94[0]) = v7;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v14 = AGGraphAnyInputsChanged();
    uint64_t v15 = ++static DisplayList.Version.lastValue;
    if (!v14) {
      goto LABEL_9;
    }
  }
  uint64_t v16 = (2 * ((33 * (v15 >> 16)) ^ v15)) | 1;
  if (!v15) {
    LOWORD(v16) = 0;
  }
  *((_WORD *)v0 + 25) = v16;
LABEL_9:
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x263F288F8])
  {
    __break(1u);
LABEL_26:
    swift_once();
    goto LABEL_20;
  }
  unsigned int v59 = v12;
  long long v60 = v11;
  char v17 = *((_DWORD *)v0 + 10);
  long long v58 = v15;
  int v18 = AGCreateWeakAttribute();
  unint64_t v19 = v18;
  long long v56 = HIDWORD(v18);
  int v20 = AGCreateWeakAttribute();
  int v21 = v20;
  long long v55 = HIDWORD(v20);
  long long v57 = v17;
  unint64_t v22 = AGCreateWeakAttribute();
  int v23 = v22;
  long long v54 = HIDWORD(v22);
  unint64_t v24 = AGCreateWeakAttribute();
  int v25 = v24;
  long long v53 = HIDWORD(v24);
  unint64_t v26 = AGCreateWeakAttribute();
  int v27 = v26;
  long long v52 = HIDWORD(v26);
  unint64_t v28 = AGCreateWeakAttribute();
  int v29 = v28;
  long long v51 = HIDWORD(v28);
  unint64_t v30 = (double *)AGGraphGetValue();
  int v31 = *v30;
  unint64_t v32 = v30[1];
  int v33 = (double *)AGGraphGetValue();
  long long v34 = v31 - *v33;
  double v35 = v32 - v33[1];
  char v2 = v58;
  double v36 = AGGraphGetValue();
  Swift::Double_optional v37 = *(double *)v36;
  double v38 = *(double *)(v36 + 8);
  _threadGeometryProxyData();
  unint64_t v64 = v19;
  unint64_t v65 = v56;
  unint64_t v66 = v21;
  unint64_t v67 = v55;
  unint64_t v68 = v23;
  int v69 = v54;
  int v70 = v25;
  unsigned int v1 = &v88;
  int v71 = v53;
  unint64_t v72 = v27;
  char v73 = v52;
  uint64_t v74 = v29;
  __int16 v75 = v51;
  char v76 = v58;
  _setThreadGeometryProxyData();
  v96.origin.CGFloat x = 0.0;
  v96.origin.CGFloat y = 0.0;
  v96.size.CGFloat width = v37;
  v96.size.CGFloat height = v38;
  BOOL IsNull = CGRectIsNull(v96);
  if (IsNull) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = *(void *)&v37;
  }
  if (IsNull) {
    double v12 = 0;
  }
  else {
    double v12 = *(void *)&v38;
  }
  if (IsNull) {
    uint64_t v15 = 6;
  }
  else {
    uint64_t v15 = 0;
  }
  _setThreadGeometryProxyData();
  uint64_t v40 = *v0;
  int v89 = 0u;
  long long v90 = 0u;
  long long v91 = 0u;
  __int16 v92 = 0u;
  int v88 = v40;
  __int16 v93 = 0x80000000;
  swift_retain();
  outlined copy of Path.Storage(0, 0, v11, v12, v15);
  v97.origin.CGFloat x = 0.0;
  v97.origin.CGFloat y = 0.0;
  v97.size.CGFloat width = v37;
  v97.size.CGFloat height = v38;
  uint64_t v98 = CGRectOffset(v97, v34, v35);
  CGFloat x = v98.origin.x;
  CGFloat y = v98.origin.y;
  CGFloat width = v98.size.width;
  CGFloat height = v98.size.height;
  uint64_t v7 = *((_DWORD *)v0 + 2);
  LOWORD(v9) = *((_WORD *)v0 + 25);
  LOBYTE(v10) = *((unsigned char *)v0 + 48);
  if (one-time initialization token for normal != -1) {
    goto LABEL_26;
  }
LABEL_20:
  CGFloat v41 = 0x10000;
  if (!v59) {
    CGFloat v41 = 0;
  }
  CGFloat v42 = 256;
  if (!v60) {
    CGFloat v42 = 0;
  }
  int v77 = 0uLL;
  *(void *)&int v78 = v11;
  *((void *)&v78 + 1) = v12;
  *(void *)int v79 = v41 | v42 | v15;
  memset(&v79[8], 0, 60);
  *(_WORD *)&v79[68] = v9;
  *(CGFloat *)&v79[72] = x;
  *(CGFloat *)&int v80 = y;
  *((CGFloat *)&v80 + 1) = width;
  int v81 = *(unint64_t *)&height;
  LODWORD(v82) = 0;
  *((CGFloat *)&v82 + 1) = x;
  *(CGFloat *)&int v83 = y;
  *((CGFloat *)&v83 + 1) = width;
  *(CGFloat *)&int v84 = height;
  int v85 = xmmword_2461B9DE0;
  *((void *)&v84 + 1) = v2;
  *(void *)&int v86 = 0;
  BYTE10(v86) = 0;
  WORD4(v86) = 0;
  HIDWORD(v86) = v7;
  v87[0] = v10;
  *(_DWORD *)&v87[4] = v57;
  *(void *)&v87[8] = static GraphicsBlendMode.normal;
  v87[16] = byte_26B0EB4A0;
  *(_DWORD *)&v87[20] = 1065353216;
  v87[24] = 0;
  LOBYTE(v94[0]) = 0;
  uint64_t v43 = *((unsigned int *)v0 + 4);
  outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_26B0EB4A0);
  _ShapeStyle_RenderedShape.renderItem(name:styles:layers:)((unsigned __int8 *)v94, v43, (uint64_t)&v88);
  LOBYTE(v94[0]) = v10;
  _ShapeStyle_RenderedLayers.commit(shape:options:)((unint64_t)&v77, (char *)v94, (uint64_t)&v61);
  *(void *)&v94[0] = v61;
  WORD4(v94[0]) = v62;
  BYTE10(v94[0]) = v63;
  AGGraphSetOutputValue();
  outlined consume of Path.Storage(0, 0, v11, v12, v15);
  swift_bridgeObjectRelease();
  uint64_t v44 = v86;
  *((_OWORD *)v1 + 17) = v85;
  *((_OWORD *)v1 + 18) = v44;
  *((_OWORD *)v1 + 19) = *(_OWORD *)v87;
  *(_OWORD *)((char *)&v94[14] + 9) = *(_OWORD *)&v87[9];
  v94[8] = v81;
  v94[9] = v82;
  v94[10] = v83;
  v94[11] = v84;
  v94[4] = *(_OWORD *)&v79[32];
  v94[5] = *(_OWORD *)&v79[48];
  v94[6] = *(_OWORD *)&v79[64];
  v94[7] = v80;
  v94[0] = v77;
  v94[1] = v78;
  v94[2] = *(_OWORD *)v79;
  v94[3] = *(_OWORD *)&v79[16];
  outlined release of _ShapeStyle_RenderedShape((uint64_t)v94);
  uint64_t v45 = v89;
  uint64_t v46 = v90;
  char v47 = v91;
  long long v49 = v92;
  uint64_t v48 = v93;
  swift_release();
  outlined consume of _ShapeStyle_RenderedLayers.Layers(v45, *((uint64_t *)&v45 + 1), v46, *((uint64_t *)&v46 + 1), v47, *((uint64_t *)&v47 + 1), v49, *((uint64_t *)&v49 + 1), v48);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(uint64_t a1, uint64_t a2, void (*a3)(void *__return_ptr, void, void, void, unint64_t))
{
  v4[2] = *MEMORY[0x263EF8340];
  a3(v4, *(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned int *)(a1 + 24) | ((unint64_t)*(unsigned __int8 *)(a1 + 28) << 32));
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

uint64_t specialized GeometryEffectDisplayList.value.getter@<X0>(int a1@<W0>, unint64_t a2@<X3>, uint64_t a3@<X8>)
{
  void (*v68)(__int16 *__return_ptr, uint64_t, uint64_t);
  void (*v69)(__int16 *__return_ptr, uint64_t, uint64_t);
  uint64_t v70;
  __int16 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  int v76;
  unint64_t v77;
  char v78;
  uint64_t v79;
  long long v80;
  long long v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  __int16 v86;
  char v87;
  int v88;
  __int16 v89;
  float64x2_t v90;
  long long v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unsigned __int16 v96;
  unsigned __int8 v97;
  int v98;
  float64x2_t v99[2];

  uint64_t v6 = MEMORY[0x263F8EE78];
  if (*MEMORY[0x263F288F8] != a2)
  {
    uint64_t Value = AGGraphGetValue();
    uint64_t v9 = *(void *)Value;
    unsigned __int16 v7 = *(_WORD *)(Value + 8);
    unsigned __int8 v8 = *(unsigned char *)(Value + 10);
    swift_bridgeObjectRetain();
    if (*(void *)(v9 + 16)) {
      goto LABEL_3;
    }
LABEL_9:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)a3 = v6;
    *(_WORD *)(a3 + 8) = 0;
    *(unsigned char *)(a3 + 10) = 0;
    return result;
  }
  unsigned __int16 v7 = 0;
  unsigned __int8 v8 = 0;
  uint64_t v9 = MEMORY[0x263F8EE78];
  if (!*(void *)(MEMORY[0x263F8EE78] + 16)) {
    goto LABEL_9;
  }
LABEL_3:
  int v79 = a3;
  int v77 = HIDWORD(a2);
  int v10 = (float64x2_t *)AGGraphGetValue();
  v99[0] = vsubq_f64(*v10, *(float64x2_t *)AGGraphGetValue());
  uint64_t v11 = (double *)AGGraphGetValue();
  CGFloat v12 = *v11;
  CGFloat v13 = v11[1];
  double v14 = v11[2];
  double v15 = v11[3];
  type metadata accessor for CGSize(0);
  uint64_t v16 = (double *)AGGraphGetValue();
  double v17 = *v16;
  double v18 = v16[1];
  unint64_t v19 = (char *)AGGraphGetValue();
  specialized static DefaultGeometryEffectProvider.resolve(effect:origin:size:layoutDirection:)(v99[0].f64, *v19, (uint64_t)&v90, v12, v13, v14, v15, v17, v18);
  uint64_t v20 = *(void *)&v90.f64[0];
  char v21 = LOBYTE(v90.f64[1]);
  char v22 = BYTE4(v90.f64[1]);
  unint64_t v23 = LODWORD(v90.f64[1]) | ((unint64_t)BYTE4(v90.f64[1]) << 32) | 0x4000000000000000;
  float64x2_t v24 = v99[0];
  int v25 = (long long *)AGGraphGetValue();
  long long v90 = v24;
  long long v26 = *v25;
  ++static DisplayList.Version.lastValue;
  long long v91 = v26;
  __int16 v92 = static DisplayList.Version.lastValue;
  __int16 v93 = v20;
  CGFloat v94 = v23;
  CGFloat v95 = v9;
  CGFloat v97 = v8;
  CGFloat v96 = v7;
  uint64_t v98 = a1;
  LOBYTE(v80) = v77;
  int v78 = v21;
  outlined copy of DisplayList.Effect(v20, v21, v22);
  DisplayList.Item.canonicalize(options:)((char *)&v80);
  float64_t v28 = v90.f64[1];
  float64_t v27 = v90.f64[0];
  long long v29 = v91;
  uint64_t v30 = v92;
  unint64_t v31 = v93;
  unint64_t v33 = v94;
  uint64_t v32 = v95;
  unsigned int v34 = v96 | (v97 << 16);
  int v35 = v98;
  unint64_t v36 = v94 >> 62;
  if (v94 >> 62 != 3 || (v34 & 0xFFFFFF) != 0 || v94 != 0xC000000000000000 || v95 | v93)
  {
    _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
    uint64_t v42 = swift_allocObject();
    *(_OWORD *)(v42 + 16) = xmmword_2461B9DC0;
    *(float64_t *)(v42 + 32) = v27;
    *(float64_t *)(v42 + 40) = v28;
    *(_OWORD *)(v42 + 48) = v29;
    *(void *)(v42 + 64) = v30;
    *(void *)(v42 + 72) = v31;
    *(void *)(v42 + 80) = v33;
    *(void *)(v42 + 88) = v32;
    *(unsigned char *)(v42 + 98) = BYTE2(v34);
    *(_WORD *)(v42 + 96) = v34;
    *(_DWORD *)(v42 + 100) = v35;
    uint64_t v40 = v42;
    char v76 = v35;
    switch((int)v36)
    {
      case 1:
        __int16 v75 = HIWORD(v34);
        switch(BYTE4(v33))
        {
          case 2:
            outlined copy of DisplayList.Item.Value(v31, v33);
            outlined copy of DisplayList.Item.Value(v31, v33);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v31, v33, 2);
            LODWORD(v44) = (v31 >> 2) & 1;
            break;
          case 3:
            outlined init with copy of AnyTrackedValue(v31 + 16, (uint64_t)&v80);
            uint64_t v44 = v82;
            int v70 = *((void *)&v81 + 1);
            __swift_project_boxed_opaque_existential_1(&v80, *((uint64_t *)&v81 + 1));
            unint64_t v68 = *(void (**)(__int16 *__return_ptr, uint64_t, uint64_t))(v44 + 56);
            outlined copy of DisplayList.Item.Value(v31, v33);
            outlined copy of DisplayList.Item.Value(v31, v33);
            v68(&v89, v70, v44);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v80);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v31, v33, 3);
            LOWORD(v44) = v89;
            break;
          case 7:
            LOWORD(v44) = *(_WORD *)(v31 + 24);
            outlined copy of DisplayList.Item.Value(v31, v33);
            outlined copy of DisplayList.Item.Value(v31, v33);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v31, v33, 7);
            break;
          case 0xA:
            outlined copy of DisplayList.Item.Value(v31, v33);
            outlined copy of DisplayList.Item.Value(v31, v33);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v31, v33, 10);
            LOWORD(v44) = 4;
            break;
          case 0xC:
            outlined copy of DisplayList.Item.Value(v31, v33);
            outlined copy of DisplayList.Item.Value(v31, v33);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v31, v33, 12);
            LOWORD(v44) = 2;
            break;
          case 0xE:
            outlined copy of DisplayList.Item.Value(v31, v33);
            outlined copy of DisplayList.Item.Value(v31, v33);
            swift_bridgeObjectRelease();
            uint64_t v61 = v31;
            char v62 = v33;
            LOBYTE(v63) = 14;
            goto LABEL_43;
          case 0xF:
            outlined copy of DisplayList.Item.Value(v31, v33);
            outlined copy of DisplayList.Item.Value(v31, v33);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v31, v33, 15);
            LOWORD(v44) = 64;
            break;
          case 0x10:
            outlined copy of DisplayList.Item.Value(v31, v33);
            outlined copy of DisplayList.Item.Value(v31, v33);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v31, v33, 16);
            LOWORD(v44) = 32;
            break;
          case 0x11:
            char v73 = v30;
            (*(void (**)(long long *__return_ptr))(*(void *)v31 + 112))(&v80);
            int v71 = v80;
            int v64 = (unsigned __int16)word_26FA429C8;
            int v65 = (unsigned __int16)word_26FA429CA;
            outlined copy of DisplayList.Item.Value(v31, v33);
            outlined copy of DisplayList.Item.Value(v31, v33);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v31, v33, 17);
            if ((v65 & ~v64) != 0) {
              __int16 v66 = v65;
            }
            else {
              __int16 v66 = 0;
            }
            __int16 v67 = v71 | v64;
            uint64_t v30 = v73;
            LOWORD(v44) = v67 | v66;
            break;
          default:
            outlined copy of DisplayList.Item.Value(v31, v33);
            outlined copy of DisplayList.Item.Value(v31, v33);
            swift_bridgeObjectRelease();
            uint64_t v61 = v31;
            char v62 = v33;
            unint64_t v63 = HIDWORD(v33);
LABEL_43:
            outlined consume of DisplayList.Effect(v61, v62, v63);
            LOWORD(v44) = 0;
            break;
        }
        __int16 v39 = v44 | v34;
        goto LABEL_51;
      case 2:
        uint64_t v45 = *(void *)(v31 + 16);
        if (!v45)
        {
          unsigned int v46 = HIWORD(v34);
          __int16 v39 = 128;
          goto LABEL_25;
        }
        unsigned int v46 = HIWORD(v34);
        if (v45 == 1)
        {
          uint64_t v47 = 0;
          __int16 v39 = 128;
LABEL_23:
          uint64_t v54 = v45 - v47;
          long long v55 = (__int16 *)(v31 + 40 * v47 + 64);
          do
          {
            __int16 v56 = *v55;
            v55 += 20;
            v39 |= v56;
            --v54;
          }
          while (v54);
          goto LABEL_25;
        }
        __int16 v48 = 0;
        uint64_t v47 = v45 & 0x7FFFFFFFFFFFFFFELL;
        long long v49 = (__int16 *)(v31 + 104);
        __int16 v50 = 128;
        uint64_t v51 = v45 & 0x7FFFFFFFFFFFFFFELL;
        do
        {
          __int16 v52 = *(v49 - 20);
          __int16 v53 = *v49;
          v49 += 40;
          v50 |= v52;
          v48 |= v53;
          v51 -= 2;
        }
        while (v51);
        __int16 v39 = v48 | v50;
        if (v45 != v47) {
          goto LABEL_23;
        }
LABEL_25:
        outlined copy of DisplayList.Item.Value(v31, v33);
        goto LABEL_52;
      case 3:
        unsigned int v46 = HIWORD(v34);
        outlined copy of DisplayList.Item.Value(v31, v33);
        __int16 v39 = 0;
        goto LABEL_52;
      default:
        __int16 v75 = HIWORD(v34);
        switch(v31 >> 60)
        {
          case 6uLL:
            outlined init with copy of AnyTrackedValue((v31 & 0xFFFFFFFFFFFFFFFLL) + 16, (uint64_t)&v80);
            uint64_t v43 = v82;
            uint64_t v74 = *((void *)&v81 + 1);
            __swift_project_boxed_opaque_existential_1(&v80, *((uint64_t *)&v81 + 1));
            int v69 = *(void (**)(__int16 *__return_ptr, uint64_t, uint64_t))(v43 + 40);
            outlined copy of DisplayList.Item.Value(v31, v33);
            v69(&v89, v74, v43);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v80);
            __int16 v39 = v89;
            goto LABEL_51;
          case 8uLL:
            uint64_t v57 = *(void *)((v31 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
            long long v58 = *(void **)(v57 + 216);
            if (!v58) {
              goto LABEL_33;
            }
            unint64_t v72 = v30;
            outlined copy of DisplayList.Item.Value(v31, v33);
            outlined copy of DisplayList.Item.Value(v31, v33);
            outlined copy of DisplayList.Item.Value(v31, v33);
            swift_retain();
            swift_retain();
            if ((uint64_t)objc_msgSend(v58, sel_length) <= 0)
            {
              outlined consume of DisplayList.Item.Value(v31, v33);
              swift_release();
            }
            else
            {
              if (one-time initialization token for updateSchedule != -1) {
                swift_once();
              }
              uint64_t v59 = static NSAttributedStringKey.updateSchedule;
              objc_msgSend(v58, sel_length);
              if (objc_msgSend(v58, sel_attribute_atIndex_effectiveRange_, v59, 0, 0))
              {
                _bridgeAnyObjectToAny(_:)();
                swift_unknownObjectRelease();
                _sypSgWOhTm_9((uint64_t)&v80, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8);
                char v60 = *(unsigned char *)(v57 + 256);
                outlined consume of DisplayList.Item.Value(v31, v33);
                swift_release();
                swift_release();
                outlined consume of DisplayList.Item.Value(v31, v33);
                uint64_t v30 = v72;
                if (v60)
                {
                  __int16 v39 = 8;
                  goto LABEL_51;
                }
LABEL_57:
                __int16 v39 = 0;
LABEL_51:
                LOBYTE(v46) = v75;
LABEL_52:
                *(float64_t *)&int v80 = v27;
                *((float64_t *)&v80 + 1) = v28;
                int v81 = v29;
                int v82 = v30;
                int v83 = v31;
                int v84 = v33;
                int v85 = v32;
                int v87 = v46;
                int v86 = v34;
                int v88 = v76;
                DisplayList.Item.properties.getter(&v89);
                outlined consume of DisplayList.Effect(v20, v78, v22);
                uint64_t result = outlined consume of DisplayList.Item.Value(v31, v33);
                char v38 = v89;
                goto LABEL_53;
              }
              int v80 = 0u;
              int v81 = 0u;
              _sypSgWOhTm_9((uint64_t)&v80, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8);
              outlined consume of DisplayList.Item.Value(v31, v33);
              swift_release();
            }
            swift_release();
            outlined consume of DisplayList.Item.Value(v31, v33);
            uint64_t v30 = v72;
            goto LABEL_57;
          case 9uLL:
            __int16 v39 = *(_WORD *)((v31 & 0xFFFFFFFFFFFFFFFLL) + 0x18) | 0x200;
            outlined copy of DisplayList.Item.Value(v31, v33);
            goto LABEL_51;
          case 0xBuLL:
            goto LABEL_36;
          case 0xCuLL:
            outlined copy of DisplayList.Item.Value(v31, v33);
LABEL_36:
            outlined copy of DisplayList.Item.Value(v31, v33);
            __int16 v39 = 2;
            goto LABEL_51;
          default:
LABEL_33:
            outlined copy of DisplayList.Item.Value(v31, v33);
            __int16 v39 = 0;
            goto LABEL_51;
        }
    }
  }
  outlined consume of DisplayList.Effect(v20, v78, v22);
  uint64_t result = outlined consume of DisplayList.Item.Value(0, 0xC000000000000000);
  char v38 = 0;
  __int16 v39 = 0;
  uint64_t v40 = MEMORY[0x263F8EE78];
LABEL_53:
  *(void *)int v79 = v40;
  *(_WORD *)(v79 + 8) = v39;
  *(unsigned char *)(v79 + 10) = v38;
  return result;
}

{
  uint64_t v6;
  unsigned __int16 v7;
  unsigned __int8 v8;
  uint64_t v9;
  double *v10;
  double v11;
  double v12;
  double *v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  double v22;
  double *v23;
  double v24;
  double v25;
  int v26;
  double v27;
  double v28;
  double v29;
  double v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  long long v35;
  double v36;
  double v37;
  long long v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  unint64_t v42;
  unsigned int v43;
  int v44;
  unint64_t v45;
  uint64_t result;
  char v47;
  __int16 v48;
  uint64_t v49;
  uint64_t Value;
  uint64_t v51;
  unsigned int v52;
  void *v53;
  void (*v54)(__int16 *__return_ptr, uint64_t, void *);
  void *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  __int16 v59;
  __int16 *v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  __int16 v64;
  uint64_t v65;
  __int16 *v66;
  __int16 v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  char v72;
  unint64_t v73;
  int v74;
  __int16 v75;
  __int16 v76;
  void (*v77)(__int16 *__return_ptr, uint64_t, void *);
  uint64_t v78;
  uint64_t v79;
  long long v80;
  __int16 v81;
  unint64_t v82;
  unsigned __int16 v83;
  void *v84;
  id v85;
  uint64_t v86;
  long long v87;
  long long v88;
  void *v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  __int16 v93;
  char v94;
  int v95;
  __int16 v96;
  double v97;
  double v98;
  long long v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unsigned __int16 v104;
  unsigned __int8 v105;
  int v106;

  uint64_t v6 = MEMORY[0x263F8EE78];
  if (*MEMORY[0x263F288F8] == a2)
  {
    unsigned __int16 v7 = 0;
    unsigned __int8 v8 = 0;
    uint64_t v9 = MEMORY[0x263F8EE78];
    if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
      goto LABEL_3;
    }
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)a3 = v6;
    *(_WORD *)(a3 + 8) = 0;
    *(unsigned char *)(a3 + 10) = 0;
    return result;
  }
  uint64_t Value = AGGraphGetValue();
  uint64_t v9 = *(void *)Value;
  unsigned __int16 v7 = *(_WORD *)(Value + 8);
  unsigned __int8 v8 = *(unsigned char *)(Value + 10);
  swift_bridgeObjectRetain();
  if (!*(void *)(v9 + 16)) {
    goto LABEL_14;
  }
LABEL_3:
  int v86 = a3;
  int v83 = v7;
  int v82 = HIDWORD(a2);
  int v10 = (double *)AGGraphGetValue();
  uint64_t v11 = *v10;
  CGFloat v12 = v10[1];
  CGFloat v13 = (double *)AGGraphGetValue();
  double v14 = v11 - *v13;
  double v15 = v12 - v13[1];
  uint64_t v16 = AGGraphGetValue();
  int v80 = *(_OWORD *)v16;
  double v17 = *(void *)(v16 + 16);
  double v18 = *(void *)(v16 + 24);
  unint64_t v19 = *(double *)(v16 + 32);
  uint64_t v20 = *(double *)(v16 + 40);
  char v21 = *(void *)(v16 + 48);
  char v22 = *(double *)(v16 + 56);
  type metadata accessor for CGSize(0);
  unint64_t v23 = (double *)AGGraphGetValue();
  float64x2_t v24 = *v23;
  int v25 = v23[1];
  long long v26 = *(unsigned __int8 *)AGGraphGetValue();
  float64_t v27 = v19 * v24;
  float64_t v28 = v20 * v25;
  if (v24 > v25) {
    long long v29 = v24;
  }
  else {
    long long v29 = v25;
  }
  uint64_t v30 = v29 / v22;
  unint64_t v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = v80;
  uint64_t v32 = v26 == 0;
  unint64_t v33 = v31;
  unsigned int v34 = 0x7FF8000000000000;
  if (!v32) {
    unsigned int v34 = *(void *)&v24;
  }
  *(void *)(v31 + 32) = v17;
  *(void *)(v31 + 40) = v18;
  *(double *)(v31 + 48) = v27;
  *(double *)(v31 + 56) = v28;
  *(void *)(v31 + 64) = v21;
  *(double *)(v31 + 72) = v30;
  *(void *)(v31 + 80) = v34;
  *(unsigned char *)(v31 + 88) = 3;
  CGFloat v97 = v14;
  uint64_t v98 = v15;
  int v35 = *(_OWORD *)AGGraphGetValue();
  ++static DisplayList.Version.lastValue;
  int v99 = v35;
  CGFloat v100 = static DisplayList.Version.lastValue;
  CGFloat v101 = v33;
  CGFloat v102 = 0x4000000800000000;
  CGFloat v103 = v9;
  uint64_t v105 = v8;
  unint64_t v104 = v83;
  __int16 v106 = a1;
  LOBYTE(v87) = v82;
  swift_retain();
  DisplayList.Item.canonicalize(options:)((char *)&v87);
  unint64_t v36 = v97;
  Swift::Double_optional v37 = v98;
  char v38 = v99;
  uint64_t v40 = (void *)v100;
  __int16 v39 = v101;
  uint64_t v42 = v102;
  CGFloat v41 = v103;
  uint64_t v43 = v104 | (v105 << 16);
  uint64_t v44 = v106;
  uint64_t v45 = v102 >> 62;
  if (v102 >> 62 != 3 || (v43 & 0xFFFFFF) != 0 || v102 != 0xC000000000000000 || v103 | v101)
  {
    _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
    uint64_t v51 = swift_allocObject();
    *(_OWORD *)(v51 + 16) = xmmword_2461B9DC0;
    *(double *)(v51 + 32) = v36;
    *(double *)(v51 + 40) = v37;
    *(_OWORD *)(v51 + 48) = v38;
    *(void *)(v51 + 64) = v40;
    *(void *)(v51 + 72) = v39;
    *(void *)(v51 + 80) = v42;
    *(void *)(v51 + 88) = v41;
    __int16 v52 = HIWORD(v43);
    *(unsigned char *)(v51 + 98) = BYTE2(v43);
    *(_WORD *)(v51 + 96) = v43;
    *(_DWORD *)(v51 + 100) = v44;
    long long v49 = v51;
    switch((int)v45)
    {
      case 1:
        switch(BYTE4(v42))
        {
          case 2:
            outlined copy of DisplayList.Item.Value(v39, v42);
            outlined copy of DisplayList.Item.Value(v39, v42);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v39, v42, 2);
            LODWORD(v56) = (v39 >> 2) & 1;
            break;
          case 3:
            outlined init with copy of AnyTrackedValue(v39 + 16, (uint64_t)&v87);
            __int16 v56 = v89;
            int v79 = *((void *)&v88 + 1);
            __swift_project_boxed_opaque_existential_1(&v87, *((uint64_t *)&v88 + 1));
            int v77 = (void (*)(__int16 *__return_ptr, uint64_t, void *))v56[7];
            outlined copy of DisplayList.Item.Value(v39, v42);
            outlined copy of DisplayList.Item.Value(v39, v42);
            v77(&v96, v79, v56);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v87);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v39, v42, 3);
            LOWORD(v56) = v96;
            break;
          case 7:
            LOWORD(v56) = *(_WORD *)(v39 + 24);
            outlined copy of DisplayList.Item.Value(v39, v42);
            outlined copy of DisplayList.Item.Value(v39, v42);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v39, v42, 7);
            break;
          case 0xA:
            outlined copy of DisplayList.Item.Value(v39, v42);
            outlined copy of DisplayList.Item.Value(v39, v42);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v39, v42, 10);
            LOWORD(v56) = 4;
            break;
          case 0xC:
            outlined copy of DisplayList.Item.Value(v39, v42);
            outlined copy of DisplayList.Item.Value(v39, v42);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v39, v42, 12);
            LOWORD(v56) = 2;
            break;
          case 0xE:
            outlined copy of DisplayList.Item.Value(v39, v42);
            outlined copy of DisplayList.Item.Value(v39, v42);
            swift_bridgeObjectRelease();
            int v71 = v39;
            unint64_t v72 = v42;
            LOBYTE(v73) = 14;
            goto LABEL_48;
          case 0xF:
            outlined copy of DisplayList.Item.Value(v39, v42);
            outlined copy of DisplayList.Item.Value(v39, v42);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v39, v42, 15);
            LOWORD(v56) = 64;
            break;
          case 0x10:
            outlined copy of DisplayList.Item.Value(v39, v42);
            outlined copy of DisplayList.Item.Value(v39, v42);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v39, v42, 16);
            LOWORD(v56) = 32;
            break;
          case 0x11:
            (*(void (**)(long long *__return_ptr))(*(void *)v39 + 112))(&v87);
            int v81 = v87;
            __int16 v52 = (unsigned __int16)word_26FA429C8;
            uint64_t v74 = (unsigned __int16)word_26FA429CA;
            outlined copy of DisplayList.Item.Value(v39, v42);
            outlined copy of DisplayList.Item.Value(v39, v42);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v39, v42, 17);
            if ((v74 & ~v52) != 0) {
              __int16 v75 = v74;
            }
            else {
              __int16 v75 = 0;
            }
            char v76 = v81 | v52;
            LOBYTE(v52) = BYTE2(v43);
            LOWORD(v56) = v76 | v75;
            break;
          default:
            outlined copy of DisplayList.Item.Value(v39, v42);
            outlined copy of DisplayList.Item.Value(v39, v42);
            swift_bridgeObjectRelease();
            int v71 = v39;
            unint64_t v72 = v42;
            char v73 = HIDWORD(v42);
LABEL_48:
            outlined consume of DisplayList.Effect(v71, v72, v73);
            LOWORD(v56) = 0;
            break;
        }
        __int16 v48 = (unsigned __int16)v56 | v43;
        goto LABEL_56;
      case 2:
        uint64_t v57 = *(void *)(v39 + 16);
        if (v57)
        {
          if (v57 == 1)
          {
            long long v58 = 0;
            __int16 v48 = 128;
          }
          else
          {
            uint64_t v59 = 0;
            long long v58 = v57 & 0x7FFFFFFFFFFFFFFELL;
            char v60 = (__int16 *)(v39 + 104);
            uint64_t v61 = 128;
            char v62 = v57 & 0x7FFFFFFFFFFFFFFELL;
            do
            {
              unint64_t v63 = *(v60 - 20);
              int v64 = *v60;
              v60 += 40;
              v61 |= v63;
              v59 |= v64;
              v62 -= 2;
            }
            while (v62);
            __int16 v48 = v59 | v61;
            if (v57 == v58) {
              goto LABEL_39;
            }
          }
          int v65 = v57 - v58;
          __int16 v66 = (__int16 *)(v39 + 40 * v58 + 64);
          do
          {
            __int16 v67 = *v66;
            v66 += 20;
            v48 |= v67;
            --v65;
          }
          while (v65);
        }
        else
        {
          __int16 v48 = 128;
        }
LABEL_39:
        outlined copy of DisplayList.Item.Value(v39, v42);
LABEL_56:
        *(double *)&int v87 = v36;
        *((double *)&v87 + 1) = v37;
        int v88 = v38;
        int v89 = v40;
        long long v90 = v39;
        long long v91 = v42;
        __int16 v92 = v41;
        CGFloat v94 = v52;
        __int16 v93 = v43;
        CGFloat v95 = v44;
        DisplayList.Item.properties.getter(&v96);
        swift_release();
        uint64_t result = outlined consume of DisplayList.Item.Value(v39, v42);
        uint64_t v47 = v96;
        goto LABEL_57;
      case 3:
LABEL_37:
        outlined copy of DisplayList.Item.Value(v39, v42);
        __int16 v48 = 0;
        goto LABEL_56;
      default:
        switch(v39 >> 60)
        {
          case 6uLL:
            outlined init with copy of AnyTrackedValue((v39 & 0xFFFFFFFFFFFFFFFLL) + 16, (uint64_t)&v87);
            int v78 = *((void *)&v88 + 1);
            int v84 = v40;
            __int16 v53 = v89;
            __swift_project_boxed_opaque_existential_1(&v87, *((uint64_t *)&v88 + 1));
            uint64_t v54 = (void (*)(__int16 *__return_ptr, uint64_t, void *))v53[5];
            outlined copy of DisplayList.Item.Value(v39, v42);
            long long v55 = v53;
            uint64_t v40 = v84;
            v54(&v96, v78, v55);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v87);
            __int16 v48 = v96;
            goto LABEL_56;
          case 8uLL:
            unint64_t v68 = *(void *)((v39 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
            if (!*(void *)(v68 + 216)) {
              goto LABEL_37;
            }
            int v85 = *(id *)(v68 + 216);
            outlined copy of DisplayList.Item.Value(v39, v42);
            outlined copy of DisplayList.Item.Value(v39, v42);
            outlined copy of DisplayList.Item.Value(v39, v42);
            swift_retain();
            swift_retain();
            if ((uint64_t)objc_msgSend(v85, sel_length) <= 0) {
              goto LABEL_59;
            }
            if (one-time initialization token for updateSchedule != -1) {
              swift_once();
            }
            int v69 = static NSAttributedStringKey.updateSchedule;
            objc_msgSend(v85, sel_length);
            if (objc_msgSend(v85, sel_attribute_atIndex_effectiveRange_, v69, 0, 0))
            {
              _bridgeAnyObjectToAny(_:)();
              swift_unknownObjectRelease();
              _sypSgWOhTm_9((uint64_t)&v87, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8);
              int v70 = *(unsigned char *)(v68 + 256);
              outlined consume of DisplayList.Item.Value(v39, v42);
              swift_release();
              swift_release();
              outlined consume of DisplayList.Item.Value(v39, v42);
              LOBYTE(v52) = BYTE2(v43);
              if (v70)
              {
                __int16 v48 = 8;
                goto LABEL_56;
              }
            }
            else
            {
              int v87 = 0u;
              int v88 = 0u;
              _sypSgWOhTm_9((uint64_t)&v87, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8);
LABEL_59:
              outlined consume of DisplayList.Item.Value(v39, v42);
              swift_release();
              swift_release();
              outlined consume of DisplayList.Item.Value(v39, v42);
              LOBYTE(v52) = BYTE2(v43);
            }
            __int16 v48 = 0;
            break;
          case 9uLL:
            __int16 v48 = *(_WORD *)((v39 & 0xFFFFFFFFFFFFFFFLL) + 0x18) | 0x200;
            goto LABEL_39;
          case 0xBuLL:
            goto LABEL_41;
          case 0xCuLL:
            outlined copy of DisplayList.Item.Value(v39, v42);
LABEL_41:
            outlined copy of DisplayList.Item.Value(v39, v42);
            __int16 v48 = 2;
            goto LABEL_56;
          default:
            goto LABEL_37;
        }
        goto LABEL_56;
    }
  }
  swift_release();
  uint64_t result = outlined consume of DisplayList.Item.Value(0, 0xC000000000000000);
  uint64_t v47 = 0;
  __int16 v48 = 0;
  long long v49 = MEMORY[0x263F8EE78];
LABEL_57:
  *(void *)int v86 = v49;
  *(_WORD *)(v86 + 8) = v48;
  *(unsigned char *)(v86 + 10) = v47;
  return result;
}

uint64_t specialized static DefaultGeometryEffectProvider.resolve(effect:origin:size:layoutDirection:)@<X0>(double *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>, CGFloat a4@<D0>, CGFloat a5@<D1>, double a6@<D2>, double a7@<D3>, double a8@<D4>, double a9@<D5>)
{
  CGFloat v15 = a4;
  if (a4 == 0.0)
  {
    if (one-time initialization token for leastNonzeroScaleFactor != -1) {
      swift_once();
    }
    CGFloat v15 = *(double *)&static CGFloat.leastNonzeroScaleFactor;
  }
  double v18 = a6 * a8;
  double v19 = a7 * a9;
  if (a5 == 0.0)
  {
    if (one-time initialization token for leastNonzeroScaleFactor != -1) {
      swift_once();
    }
    a5 = *(double *)&static CGFloat.leastNonzeroScaleFactor;
  }
  CGAffineTransformMakeTranslation(&t1, -v18, -v19);
  long long v49 = *(_OWORD *)&t1.c;
  long long v51 = *(_OWORD *)&t1.a;
  tCGFloat x = t1.tx;
  tCGFloat y = t1.ty;
  CGAffineTransformMakeScale(&t1, v15, a5);
  long long v22 = *(_OWORD *)&t1.a;
  long long v23 = *(_OWORD *)&t1.c;
  long long v24 = *(_OWORD *)&t1.tx;
  *(_OWORD *)&t1.double a = v51;
  *(_OWORD *)&t1.double c = v49;
  t1.tCGFloat x = tx;
  t1.tCGFloat y = ty;
  *(_OWORD *)&t2.double a = v22;
  *(_OWORD *)&t2.double c = v23;
  *(_OWORD *)&t2.tCGFloat x = v24;
  CGAffineTransformConcat(&v55, &t1, &t2);
  long long v50 = *(_OWORD *)&v55.c;
  long long v52 = *(_OWORD *)&v55.a;
  CGFloat v25 = v55.tx;
  CGFloat v26 = v55.ty;
  CGAffineTransformMakeTranslation(&t1, v18, v19);
  long long v27 = *(_OWORD *)&t1.a;
  long long v28 = *(_OWORD *)&t1.c;
  long long v29 = *(_OWORD *)&t1.tx;
  *(_OWORD *)&t1.double a = v52;
  *(_OWORD *)&t1.double c = v50;
  t1.tCGFloat x = v25;
  t1.tCGFloat y = v26;
  *(_OWORD *)&t2.double a = v27;
  *(_OWORD *)&t2.double c = v28;
  *(_OWORD *)&t2.tCGFloat x = v29;
  CGAffineTransformConcat(&v55, &t1, &t2);
  double a = v55.a;
  double b = v55.b;
  double c = v55.c;
  double d = v55.d;
  double v35 = v55.tx;
  double v34 = v55.ty;
  t1.double a = v55.a;
  t1.double b = v55.b;
  t1.double c = 0.0;
  t1.double d = v55.c;
  t1.tCGFloat x = v55.d;
  t1.tCGFloat y = 0.0;
  CGFloat v63 = v55.tx;
  CGFloat v64 = v55.ty;
  uint64_t v65 = 0x3FF0000000000000;
  if (a2)
  {
    t2.double a = -1.0;
    memset(&t2.b, 0, 24);
    *(_OWORD *)&t2.tCGFloat x = xmmword_2461BCA80;
    double v60 = a8;
    long long v61 = xmmword_2461C55F0;
    ProjectionTransform.concatenating(_:)(&t1.a, v54);
    ProjectionTransform.concatenating(_:)(&t2.a, &v55.a);
    double a = v55.a;
    double b = v55.b;
    double v37 = v55.c;
    double c = v55.d;
    double d = v55.tx;
    double v38 = v55.ty;
    double v35 = v56;
    double v34 = v57;
    double v36 = v58;
    if (v55.c != 0.0) {
      goto LABEL_20;
    }
  }
  else
  {
    double v36 = 1.0;
    double v37 = 0.0;
    double v38 = 0.0;
  }
  if (v38 != 0.0 || v36 != 1.0)
  {
LABEL_20:
    if (v37 * (c * v34 - d * v35) + a * (d * v36 - v38 * v34) - b * (c * v36 - v38 * v35) != 0.0)
    {
      double v43 = v35;
      double v53 = v34;
      double v44 = d;
      double v45 = a;
      double v46 = b;
      double v47 = v36;
      uint64_t result = swift_allocObject();
      *(double *)(result + 16) = v45;
      *(double *)(result + 24) = v46;
      *(double *)(result + 32) = v37;
      *(double *)(result + 40) = c;
      *(double *)(result + 48) = v44;
      *(double *)(result + 56) = v38;
      *(double *)(result + 64) = v43;
      *(double *)(result + 72) = v53;
      *(double *)(result + 80) = v47;
      char v41 = 8;
      *(unsigned char *)(result + 88) = 1;
      goto LABEL_24;
    }
    goto LABEL_21;
  }
  if (a * d - b * c == 0.0)
  {
LABEL_21:
    _StringGuts.grow(_:)(28);
    v42._object = (void *)0x800000024621DC20;
    v42._countAndFlagsBits = 0xD00000000000001ALL;
    String.append(_:)(v42);
    _print_unlocked<A, B>(_:_:)();
    specialized static Log.externalWarning(_:)(0, 0xE000000000000000);
    swift_bridgeObjectRelease();
    uint64_t result = 0;
    char v41 = 19;
    goto LABEL_24;
  }
  if (a == 1.0 && b == 0.0 && c == 0.0 && d == 1.0)
  {
    uint64_t result = 0;
    double v40 = v34 + a1[1];
    *a1 = v35 + *a1;
    a1[1] = v40;
    char v41 = 19;
  }
  else
  {
    double v48 = v34;
    uint64_t result = swift_allocObject();
    *(double *)(result + 16) = a;
    *(double *)(result + 24) = b;
    *(double *)(result + 32) = c;
    *(double *)(result + 40) = d;
    *(double *)(result + 48) = v35;
    *(double *)(result + 56) = v48;
    *(void *)(result + 72) = 0;
    *(void *)(result + 80) = 0;
    *(void *)(result + 64) = 0;
    char v41 = 8;
    *(unsigned char *)(result + 88) = 0;
  }
LABEL_24:
  *(void *)a3 = result;
  *(_DWORD *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 12) = v41;
  return result;
}

uint64_t specialized GeometryEffectDisplayList.value.getter@<X0>(int a1@<W0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  void (*v69)(__int16 *__return_ptr, uint64_t, void *);
  void (*v70)(__int16 *__return_ptr, uint64_t, void *);
  uint64_t v71;
  uint64_t v72;
  __int16 v73;
  void *v74;
  id v75;
  uint64_t v76;
  long long v77;
  long long v78;
  void *v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  __int16 v83;
  char v84;
  int v85;
  __int16 v86;
  double v87;
  double v88;
  long long v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unsigned __int16 v94;
  unsigned __int8 v95;
  int v96;

  char v3 = BYTE4(a2);
  uint64_t v6 = MEMORY[0x263F8EE78];
  if (*MEMORY[0x263F288F8] == a2)
  {
    unsigned __int16 v7 = 0;
    unsigned __int8 v8 = 0;
    uint64_t v9 = MEMORY[0x263F8EE78];
    if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
      goto LABEL_3;
    }
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)a3 = v6;
    *(_WORD *)(a3 + 8) = 0;
    *(unsigned char *)(a3 + 10) = 0;
    return result;
  }
  uint64_t Value = AGGraphGetValue();
  uint64_t v9 = *(void *)Value;
  unsigned __int16 v7 = *(_WORD *)(Value + 8);
  unsigned __int8 v8 = *(unsigned char *)(Value + 10);
  swift_bridgeObjectRetain();
  if (!*(void *)(v9 + 16)) {
    goto LABEL_14;
  }
LABEL_3:
  char v76 = a3;
  int v10 = (double *)AGGraphGetValue();
  double v11 = *v10;
  double v12 = v10[1];
  CGFloat v13 = (double *)AGGraphGetValue();
  double v14 = v11 - *v13;
  double v15 = v12 - v13[1];
  uint64_t v16 = (double *)AGGraphGetValue();
  double v17 = *v16;
  double v18 = v16[1];
  double v19 = v16[2];
  type metadata accessor for CGSize(0);
  uint64_t v20 = (double *)AGGraphGetValue();
  double v21 = *v20;
  double v22 = v20[1];
  long long v23 = (unsigned char *)AGGraphGetValue();
  double v24 = v18 * v21;
  double v25 = v19 * v22;
  if (*v23) {
    double v26 = v21 - v24;
  }
  else {
    double v26 = v24;
  }
  if (*v23) {
    double v17 = (v17 * -128.0 + 0.0) * 0.0078125;
  }
  uint64_t v27 = swift_allocObject();
  *(double *)(v27 + 16) = v17;
  *(double *)(v27 + 24) = v26;
  *(double *)(v27 + 32) = v25;
  *(_OWORD *)(v27 + 40) = 0u;
  *(_OWORD *)(v27 + 56) = 0u;
  *(_OWORD *)(v27 + 72) = 0u;
  *(unsigned char *)(v27 + 88) = 2;
  int v87 = v14;
  int v88 = v15;
  long long v28 = *(_OWORD *)AGGraphGetValue();
  ++static DisplayList.Version.lastValue;
  int v89 = v28;
  long long v90 = static DisplayList.Version.lastValue;
  long long v91 = v27;
  __int16 v92 = 0x4000000800000000;
  __int16 v93 = v9;
  CGFloat v95 = v8;
  CGFloat v94 = v7;
  CGFloat v96 = a1;
  LOBYTE(v77) = v3;
  swift_retain();
  DisplayList.Item.canonicalize(options:)((char *)&v77);
  double v29 = v87;
  double v30 = v88;
  long long v31 = v89;
  unint64_t v33 = (void *)v90;
  unint64_t v32 = v91;
  unint64_t v35 = v92;
  uint64_t v34 = v93;
  unsigned int v36 = v94 | (v95 << 16);
  int v37 = v96;
  unint64_t v38 = v92 >> 62;
  if (v92 >> 62 != 3 || (v36 & 0xFFFFFF) != 0 || v92 != 0xC000000000000000 || v93 | v91)
  {
    _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
    uint64_t v44 = swift_allocObject();
    *(_OWORD *)(v44 + 16) = xmmword_2461B9DC0;
    *(double *)(v44 + 32) = v29;
    *(double *)(v44 + 40) = v30;
    *(_OWORD *)(v44 + 48) = v31;
    *(void *)(v44 + 64) = v33;
    *(void *)(v44 + 72) = v32;
    *(void *)(v44 + 80) = v35;
    *(void *)(v44 + 88) = v34;
    unsigned int v45 = HIWORD(v36);
    *(unsigned char *)(v44 + 98) = BYTE2(v36);
    *(_WORD *)(v44 + 96) = v36;
    *(_DWORD *)(v44 + 100) = v37;
    uint64_t v42 = v44;
    switch((int)v38)
    {
      case 1:
        switch(BYTE4(v35))
        {
          case 2:
            outlined copy of DisplayList.Item.Value(v32, v35);
            outlined copy of DisplayList.Item.Value(v32, v35);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v32, v35, 2);
            LODWORD(v48) = (v32 >> 2) & 1;
            break;
          case 3:
            outlined init with copy of AnyTrackedValue(v32 + 16, (uint64_t)&v77);
            double v48 = v79;
            unint64_t v72 = *((void *)&v78 + 1);
            __swift_project_boxed_opaque_existential_1(&v77, *((uint64_t *)&v78 + 1));
            int v70 = (void (*)(__int16 *__return_ptr, uint64_t, void *))v48[7];
            outlined copy of DisplayList.Item.Value(v32, v35);
            outlined copy of DisplayList.Item.Value(v32, v35);
            v70(&v86, v72, v48);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v77);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v32, v35, 3);
            LOWORD(v48) = v86;
            break;
          case 7:
            LOWORD(v48) = *(_WORD *)(v32 + 24);
            outlined copy of DisplayList.Item.Value(v32, v35);
            outlined copy of DisplayList.Item.Value(v32, v35);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v32, v35, 7);
            break;
          case 0xA:
            outlined copy of DisplayList.Item.Value(v32, v35);
            outlined copy of DisplayList.Item.Value(v32, v35);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v32, v35, 10);
            LOWORD(v48) = 4;
            break;
          case 0xC:
            outlined copy of DisplayList.Item.Value(v32, v35);
            outlined copy of DisplayList.Item.Value(v32, v35);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v32, v35, 12);
            LOWORD(v48) = 2;
            break;
          case 0xE:
            outlined copy of DisplayList.Item.Value(v32, v35);
            outlined copy of DisplayList.Item.Value(v32, v35);
            swift_bridgeObjectRelease();
            uint64_t v63 = v32;
            char v64 = v35;
            LOBYTE(v65) = 14;
            goto LABEL_48;
          case 0xF:
            outlined copy of DisplayList.Item.Value(v32, v35);
            outlined copy of DisplayList.Item.Value(v32, v35);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v32, v35, 15);
            LOWORD(v48) = 64;
            break;
          case 0x10:
            outlined copy of DisplayList.Item.Value(v32, v35);
            outlined copy of DisplayList.Item.Value(v32, v35);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v32, v35, 16);
            LOWORD(v48) = 32;
            break;
          case 0x11:
            (*(void (**)(long long *__return_ptr))(*(void *)v32 + 112))(&v77);
            char v73 = v77;
            unsigned int v45 = (unsigned __int16)word_26FA429C8;
            int v66 = (unsigned __int16)word_26FA429CA;
            outlined copy of DisplayList.Item.Value(v32, v35);
            outlined copy of DisplayList.Item.Value(v32, v35);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(v32, v35, 17);
            if ((v66 & ~v45) != 0) {
              __int16 v67 = v66;
            }
            else {
              __int16 v67 = 0;
            }
            __int16 v68 = v73 | v45;
            LOBYTE(v45) = BYTE2(v36);
            LOWORD(v48) = v68 | v67;
            break;
          default:
            outlined copy of DisplayList.Item.Value(v32, v35);
            outlined copy of DisplayList.Item.Value(v32, v35);
            swift_bridgeObjectRelease();
            uint64_t v63 = v32;
            char v64 = v35;
            unint64_t v65 = HIDWORD(v35);
LABEL_48:
            outlined consume of DisplayList.Effect(v63, v64, v65);
            LOWORD(v48) = 0;
            break;
        }
        __int16 v41 = (unsigned __int16)v48 | v36;
        goto LABEL_56;
      case 2:
        uint64_t v49 = *(void *)(v32 + 16);
        if (v49)
        {
          if (v49 == 1)
          {
            uint64_t v50 = 0;
            __int16 v41 = 128;
          }
          else
          {
            __int16 v51 = 0;
            uint64_t v50 = v49 & 0x7FFFFFFFFFFFFFFELL;
            long long v52 = (__int16 *)(v32 + 104);
            __int16 v53 = 128;
            uint64_t v54 = v49 & 0x7FFFFFFFFFFFFFFELL;
            do
            {
              __int16 v55 = *(v52 - 20);
              __int16 v56 = *v52;
              v52 += 40;
              v53 |= v55;
              v51 |= v56;
              v54 -= 2;
            }
            while (v54);
            __int16 v41 = v51 | v53;
            if (v49 == v50) {
              goto LABEL_39;
            }
          }
          uint64_t v57 = v49 - v50;
          double v58 = (__int16 *)(v32 + 40 * v50 + 64);
          do
          {
            __int16 v59 = *v58;
            v58 += 20;
            v41 |= v59;
            --v57;
          }
          while (v57);
        }
        else
        {
          __int16 v41 = 128;
        }
LABEL_39:
        outlined copy of DisplayList.Item.Value(v32, v35);
LABEL_56:
        *(double *)&int v77 = v29;
        *((double *)&v77 + 1) = v30;
        int v78 = v31;
        int v79 = v33;
        int v80 = v32;
        int v81 = v35;
        int v82 = v34;
        int v84 = v45;
        int v83 = v36;
        int v85 = v37;
        DisplayList.Item.properties.getter(&v86);
        swift_release();
        uint64_t result = outlined consume of DisplayList.Item.Value(v32, v35);
        char v40 = v86;
        goto LABEL_57;
      case 3:
LABEL_37:
        outlined copy of DisplayList.Item.Value(v32, v35);
        __int16 v41 = 0;
        goto LABEL_56;
      default:
        switch(v32 >> 60)
        {
          case 6uLL:
            outlined init with copy of AnyTrackedValue((v32 & 0xFFFFFFFFFFFFFFFLL) + 16, (uint64_t)&v77);
            int v71 = *((void *)&v78 + 1);
            uint64_t v74 = v33;
            double v46 = v79;
            __swift_project_boxed_opaque_existential_1(&v77, *((uint64_t *)&v78 + 1));
            int v69 = (void (*)(__int16 *__return_ptr, uint64_t, void *))v46[5];
            outlined copy of DisplayList.Item.Value(v32, v35);
            double v47 = v46;
            unint64_t v33 = v74;
            v69(&v86, v71, v47);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v77);
            __int16 v41 = v86;
            goto LABEL_56;
          case 8uLL:
            uint64_t v60 = *(void *)((v32 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
            if (!*(void *)(v60 + 216)) {
              goto LABEL_37;
            }
            __int16 v75 = *(id *)(v60 + 216);
            outlined copy of DisplayList.Item.Value(v32, v35);
            outlined copy of DisplayList.Item.Value(v32, v35);
            outlined copy of DisplayList.Item.Value(v32, v35);
            swift_retain();
            swift_retain();
            if ((uint64_t)objc_msgSend(v75, sel_length) <= 0) {
              goto LABEL_59;
            }
            if (one-time initialization token for updateSchedule != -1) {
              swift_once();
            }
            uint64_t v61 = static NSAttributedStringKey.updateSchedule;
            objc_msgSend(v75, sel_length);
            if (objc_msgSend(v75, sel_attribute_atIndex_effectiveRange_, v61, 0, 0))
            {
              _bridgeAnyObjectToAny(_:)();
              swift_unknownObjectRelease();
              _sypSgWOhTm_9((uint64_t)&v77, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8);
              char v62 = *(unsigned char *)(v60 + 256);
              outlined consume of DisplayList.Item.Value(v32, v35);
              swift_release();
              swift_release();
              outlined consume of DisplayList.Item.Value(v32, v35);
              LOBYTE(v45) = BYTE2(v36);
              if (v62)
              {
                __int16 v41 = 8;
                goto LABEL_56;
              }
            }
            else
            {
              int v77 = 0u;
              int v78 = 0u;
              _sypSgWOhTm_9((uint64_t)&v77, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8);
LABEL_59:
              outlined consume of DisplayList.Item.Value(v32, v35);
              swift_release();
              swift_release();
              outlined consume of DisplayList.Item.Value(v32, v35);
              LOBYTE(v45) = BYTE2(v36);
            }
            __int16 v41 = 0;
            break;
          case 9uLL:
            __int16 v41 = *(_WORD *)((v32 & 0xFFFFFFFFFFFFFFFLL) + 0x18) | 0x200;
            goto LABEL_39;
          case 0xBuLL:
            goto LABEL_41;
          case 0xCuLL:
            outlined copy of DisplayList.Item.Value(v32, v35);
LABEL_41:
            outlined copy of DisplayList.Item.Value(v32, v35);
            __int16 v41 = 2;
            goto LABEL_56;
          default:
            goto LABEL_37;
        }
        goto LABEL_56;
    }
  }
  swift_release();
  uint64_t result = outlined consume of DisplayList.Item.Value(0, 0xC000000000000000);
  char v40 = 0;
  __int16 v41 = 0;
  uint64_t v42 = MEMORY[0x263F8EE78];
LABEL_57:
  *(void *)char v76 = v42;
  *(_WORD *)(v76 + 8) = v41;
  *(unsigned char *)(v76 + 10) = v40;
  return result;
}

uint64_t specialized LeafDisplayList.updateValue()()
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  uint64_t Value = (_OWORD *)AGGraphGetValue();
  char v3 = v2;
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = *Value;
  uint64_t v5 = v4 | 0x1000000000000000;
  unint64_t v6 = ++static DisplayList.Version.lastValue;
  if (v3)
  {
    if (v6) {
      int v7 = (2 * ((33 * (v6 >> 16)) ^ v6)) | 1;
    }
    else {
      LOWORD(v7) = 0;
    }
    *((_WORD *)v0 + 11) = v7;
  }
  else
  {
    LOWORD(v7) = *((_WORD *)v0 + 11);
  }
  unsigned __int8 v8 = (double *)AGGraphGetValue();
  double v9 = *v8;
  double v10 = v8[1];
  double v11 = (double *)AGGraphGetValue();
  double v12 = v9 - *v11;
  double v13 = v10 - v11[1];
  type metadata accessor for CGSize(0);
  double v14 = (long long *)AGGraphGetValue();
  int v15 = *v0;
  double v53 = v12;
  double v54 = v13;
  long long v55 = *v14;
  unint64_t v56 = v6;
  unint64_t v57 = v5;
  unint64_t v58 = (unsigned __int16)v7;
  uint64_t v59 = 0;
  unsigned __int8 v61 = 0;
  unsigned __int16 v60 = 0;
  int v62 = v15;
  LOBYTE(v43) = *((unsigned char *)v0 + 20);
  swift_retain();
  DisplayList.Item.canonicalize(options:)((char *)&v43);
  double v16 = v53;
  double v17 = v54;
  long long v18 = v55;
  unint64_t v19 = v56;
  unint64_t v20 = v57;
  unint64_t v21 = v58;
  uint64_t v22 = v59;
  int v23 = v60 | (v61 << 16);
  int v24 = v62;
  unint64_t v25 = v58 >> 62;
  if (v58 >> 62 == 3 && (v23 & 0xFFFFFF) == 0 && v58 == 0xC000000000000000)
  {
    LOBYTE(v26) = v59 | v57;
    if (!(v59 | v57))
    {
      __int16 v27 = 0;
      uint64_t v28 = MEMORY[0x263F8EE78];
      goto LABEL_33;
    }
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
  uint64_t v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_2461B9DC0;
  *(double *)(v28 + 32) = v16;
  *(double *)(v28 + 40) = v17;
  *(_OWORD *)(v28 + 48) = v18;
  *(void *)(v28 + 64) = v19;
  *(void *)(v28 + 72) = v20;
  *(void *)(v28 + 80) = v21;
  *(void *)(v28 + 88) = v22;
  *(unsigned char *)(v28 + 98) = BYTE2(v23);
  *(_WORD *)(v28 + 96) = v23;
  *(_DWORD *)(v28 + 100) = v24;
  uint64_t v43 = *(void *)&v16;
  double v44 = v17;
  long long v45 = v18;
  unint64_t v46 = v19;
  unint64_t v47 = v20;
  unint64_t v48 = v21;
  uint64_t v49 = v22;
  char v51 = BYTE2(v23);
  __int16 v50 = v23;
  int v52 = v24;
  outlined copy of DisplayList.Item.Value(v20, v21);
  DisplayList.Item.features.getter(&v42);
  __int16 v27 = v42;
  LOBYTE(v26) = 0;
  switch((int)v25)
  {
    case 1:
      switch(BYTE4(v21))
      {
        case 2u:
          outlined copy of DisplayList.Effect(v20, v21, 2);
          int v29 = v20;
          break;
        case 7u:
          int v29 = *(unsigned __int8 *)(v20 + 26);
          outlined copy of DisplayList.Item.Value(v20, v21);
          outlined consume of DisplayList.Effect(v20, v21, 7);
          swift_bridgeObjectRelease();
          break;
        case 0x11u:
          (*(void (**)(uint64_t *__return_ptr))(*(void *)v20 + 120))(&v43);
          outlined copy of DisplayList.Item.Value(v20, v21);
          outlined consume of DisplayList.Effect(v20, v21, 17);
          swift_bridgeObjectRelease();
          int v29 = v43;
          break;
        default:
          outlined copy of DisplayList.Effect(v20, v21, SBYTE4(v21));
          swift_bridgeObjectRetain();
          outlined consume of DisplayList.Effect(v20, v21, SBYTE4(v21));
          swift_bridgeObjectRelease();
          int v29 = 0;
          break;
      }
      unsigned int v26 = v29 | ((v23 & 0xFF0000u) >> 16);
      goto LABEL_33;
    case 2:
      uint64_t v30 = *(void *)(v20 + 16);
      if (!v30) {
        goto LABEL_22;
      }
      if (v30 == 1)
      {
        uint64_t v31 = 0;
        LOBYTE(v26) = 0;
LABEL_26:
        uint64_t v38 = v30 - v31;
        __int16 v39 = (char *)(v20 + 40 * v31 + 66);
        do
        {
          char v40 = *v39;
          v39 += 40;
          LOBYTE(v26) = v40 | v26;
          --v38;
        }
        while (v38);
        goto LABEL_33;
      }
      char v32 = 0;
      char v33 = 0;
      uint64_t v31 = v30 & 0x7FFFFFFFFFFFFFFELL;
      uint64_t v34 = (char *)(v20 + 106);
      uint64_t v35 = v30 & 0x7FFFFFFFFFFFFFFELL;
      do
      {
        char v36 = *(v34 - 40);
        char v37 = *v34;
        v34 += 80;
        v32 |= v36;
        v33 |= v37;
        v35 -= 2;
      }
      while (v35);
      LOBYTE(v26) = v33 | v32;
      if (v30 != v31) {
        goto LABEL_26;
      }
LABEL_33:
      uint64_t v43 = v28;
      LOWORD(v44) = v27;
      BYTE2(v44) = v26;
      AGGraphSetOutputValue();
      swift_bridgeObjectRelease();
      swift_release();
      return outlined consume of DisplayList.Item.Value(v20, v21);
    case 3:
      goto LABEL_33;
    default:
      if (v20 >> 60 == 9) {
        LOBYTE(v26) = *(unsigned char *)((v20 & 0xFFFFFFFFFFFFFFFLL) + 0x1A);
      }
      else {
LABEL_22:
      }
        LOBYTE(v26) = 0;
      goto LABEL_33;
  }
}

{
  int *v0;
  char v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  double *Value;
  double v8;
  double v9;
  double *v10;
  double v11;
  double v12;
  long long *v13;
  int v14;
  double v15;
  double v16;
  long long v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  unint64_t v24;
  unsigned int v25;
  __int16 v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  char *v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  char *v38;
  char v39;
  __int16 v41;
  uint64_t v42;
  double v43;
  long long v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  __int16 v49;
  char v50;
  int v51;
  double v52;
  double v53;
  long long v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unsigned __int16 v59;
  unsigned __int8 v60;
  int v61;
  uint64_t v62;

  int v62 = *MEMORY[0x263EF8340];
  AGGraphGetValue();
  char v2 = v1;
  char v3 = swift_allocObject();
  *(_DWORD *)(v3 + 16) = 1065353216;
  *(void *)(v3 + 28) = 0;
  uint64_t v4 = MEMORY[0x263F8EE78];
  *(void *)(v3 + 20) = 0;
  *(void *)(v3 + 40) = v4;
  uint64_t v5 = ++static DisplayList.Version.lastValue;
  if (v2)
  {
    if (v5) {
      unint64_t v6 = (2 * ((33 * (v5 >> 16)) ^ v5)) | 1;
    }
    else {
      LOWORD(v6) = 0;
    }
    *((_WORD *)v0 + 11) = v6;
  }
  else
  {
    LOWORD(v6) = *((_WORD *)v0 + 11);
  }
  uint64_t Value = (double *)AGGraphGetValue();
  unsigned __int8 v8 = *Value;
  double v9 = Value[1];
  double v10 = (double *)AGGraphGetValue();
  double v11 = v8 - *v10;
  double v12 = v9 - v10[1];
  type metadata accessor for CGSize(0);
  double v13 = (long long *)AGGraphGetValue();
  double v14 = *v0;
  int v52 = v11;
  double v53 = v12;
  double v54 = *v13;
  long long v55 = v5;
  unint64_t v56 = v3;
  unint64_t v57 = (unsigned __int16)v6;
  unint64_t v58 = 0;
  unsigned __int16 v60 = 0;
  uint64_t v59 = 0;
  unsigned __int8 v61 = v14;
  LOBYTE(v42) = *((unsigned char *)v0 + 20);
  swift_retain();
  DisplayList.Item.canonicalize(options:)((char *)&v42);
  int v15 = v52;
  double v16 = v53;
  double v17 = v54;
  long long v18 = v55;
  unint64_t v19 = v56;
  unint64_t v20 = v57;
  unint64_t v21 = v58;
  uint64_t v22 = v59 | (v60 << 16);
  int v23 = v61;
  int v24 = v57 >> 62;
  if (v57 >> 62 == 3 && (v22 & 0xFFFFFF) == 0 && v57 == 0xC000000000000000)
  {
    LOBYTE(v25) = v58 | v56;
    if (!(v58 | v56))
    {
      unsigned int v26 = 0;
      __int16 v27 = MEMORY[0x263F8EE78];
      goto LABEL_33;
    }
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
  __int16 v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_2461B9DC0;
  *(double *)(v27 + 32) = v15;
  *(double *)(v27 + 40) = v16;
  *(_OWORD *)(v27 + 48) = v17;
  *(void *)(v27 + 64) = v18;
  *(void *)(v27 + 72) = v19;
  *(void *)(v27 + 80) = v20;
  *(void *)(v27 + 88) = v21;
  *(unsigned char *)(v27 + 98) = BYTE2(v22);
  *(_WORD *)(v27 + 96) = v22;
  *(_DWORD *)(v27 + 100) = v23;
  __int16 v42 = *(void *)&v15;
  uint64_t v43 = v16;
  double v44 = v17;
  long long v45 = v18;
  unint64_t v46 = v19;
  unint64_t v47 = v20;
  unint64_t v48 = v21;
  __int16 v50 = BYTE2(v22);
  uint64_t v49 = v22;
  char v51 = v23;
  outlined copy of DisplayList.Item.Value(v19, v20);
  DisplayList.Item.features.getter(&v41);
  unsigned int v26 = v41;
  LOBYTE(v25) = 0;
  switch((int)v24)
  {
    case 1:
      switch(BYTE4(v20))
      {
        case 2u:
          outlined copy of DisplayList.Effect(v19, v20, 2);
          uint64_t v28 = v19;
          break;
        case 7u:
          uint64_t v28 = *(unsigned __int8 *)(v19 + 26);
          outlined copy of DisplayList.Item.Value(v19, v20);
          outlined consume of DisplayList.Effect(v19, v20, 7);
          swift_bridgeObjectRelease();
          break;
        case 0x11u:
          (*(void (**)(uint64_t *__return_ptr))(*(void *)v19 + 120))(&v42);
          outlined copy of DisplayList.Item.Value(v19, v20);
          outlined consume of DisplayList.Effect(v19, v20, 17);
          swift_bridgeObjectRelease();
          uint64_t v28 = v42;
          break;
        default:
          outlined copy of DisplayList.Effect(v19, v20, SBYTE4(v20));
          swift_bridgeObjectRetain();
          outlined consume of DisplayList.Effect(v19, v20, SBYTE4(v20));
          swift_bridgeObjectRelease();
          uint64_t v28 = 0;
          break;
      }
      unint64_t v25 = v28 | ((v22 & 0xFF0000u) >> 16);
      goto LABEL_33;
    case 2:
      int v29 = *(void *)(v19 + 16);
      if (!v29) {
        goto LABEL_22;
      }
      if (v29 == 1)
      {
        uint64_t v30 = 0;
        LOBYTE(v25) = 0;
LABEL_26:
        char v37 = v29 - v30;
        uint64_t v38 = (char *)(v19 + 40 * v30 + 66);
        do
        {
          __int16 v39 = *v38;
          v38 += 40;
          LOBYTE(v25) = v39 | v25;
          --v37;
        }
        while (v37);
        goto LABEL_33;
      }
      uint64_t v31 = 0;
      char v32 = 0;
      uint64_t v30 = v29 & 0x7FFFFFFFFFFFFFFELL;
      char v33 = (char *)(v19 + 106);
      uint64_t v34 = v29 & 0x7FFFFFFFFFFFFFFELL;
      do
      {
        uint64_t v35 = *(v33 - 40);
        char v36 = *v33;
        v33 += 80;
        v31 |= v35;
        v32 |= v36;
        v34 -= 2;
      }
      while (v34);
      LOBYTE(v25) = v32 | v31;
      if (v29 != v30) {
        goto LABEL_26;
      }
LABEL_33:
      __int16 v42 = v27;
      LOWORD(v43) = v26;
      BYTE2(v43) = v25;
      AGGraphSetOutputValue();
      swift_bridgeObjectRelease();
      swift_release();
      return outlined consume of DisplayList.Item.Value(v19, v20);
    case 3:
      goto LABEL_33;
    default:
      if (v19 >> 60 == 9) {
        LOBYTE(v25) = *(unsigned char *)((v19 & 0xFFFFFFFFFFFFFFFLL) + 0x1A);
      }
      else {
LABEL_22:
      }
        LOBYTE(v25) = 0;
      goto LABEL_33;
  }
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(long long *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t))
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  long long v4 = a1[1];
  long long v7 = *a1;
  long long v8 = v4;
  long long v9 = a1[2];
  a4(&v6, a3);
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

uint64_t PairPreferenceCombiner.value.getter@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v6 = a1;
  unint64_t v8 = HIDWORD(a1);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t Value = AGGraphGetValue();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(a4, Value, AssociatedTypeWitness);
  void v12[2] = a2;
  v12[3] = a3;
  int v13 = v6;
  int v14 = v8;
  return (*(uint64_t (**)(uint64_t, uint64_t (*)@<X0>(uint64_t@<X8>), void *, uint64_t, uint64_t))(a3 + 24))(a4, partial apply for closure #1 in PairPreferenceCombiner.value.getter, v12, a2, a3);
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance DisplayList.Key(uint64_t a1, void (*a2)(uint64_t *__return_ptr))
{
  a2(&v6);
  uint64_t v3 = v6;
  __int16 v4 = v7;
  char v5 = v8;
  DisplayList.append(contentsOf:)(&v3);

  return swift_bridgeObjectRelease();
}

uint64_t initializeBufferWithCopyOfBuffer for DisplayList(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(unsigned char *)(a1 + 10) = *(unsigned char *)(a2 + 10);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t DisplayList.append(contentsOf:)(uint64_t *a1)
{
  uint64_t result = *a1;
  uint64_t v42 = *(void *)(result + 16);
  if (!v42) {
    return result;
  }
  uint64_t v3 = v1;
  uint64_t v41 = result + 32;
  swift_bridgeObjectRetain();
  uint64_t v4 = 0;
  char v40 = v1;
  do
  {
    uint64_t v6 = v41 + 72 * v4;
    unint64_t v8 = *(void *)(v6 + 40);
    unint64_t v7 = *(void *)(v6 + 48);
    int v9 = *(unsigned __int16 *)(v6 + 64) | (*(unsigned __int8 *)(v6 + 66) << 16);
    if (v7 >> 62 != 3 || (v9 & 0xFFFFFF) != 0 || v7 != 0xC000000000000000 || (*(void *)(v6 + 56) | v8) != 0)
    {
      uint64_t v13 = *(void *)v6;
      uint64_t v14 = *(void *)(v6 + 8);
      uint64_t v15 = *(void *)(v6 + 16);
      uint64_t v16 = *(void *)(v6 + 24);
      uint64_t v17 = *(void *)(v6 + 32);
      int v18 = *(_DWORD *)(v6 + 68);
      unint64_t v19 = *v3;
      uint64_t v20 = *(void *)(v6 + 56);
      outlined copy of DisplayList.Item.Value(*(void *)(v6 + 40), *(void *)(v6 + 48));
      uint64_t v43 = v20;
      outlined copy of DisplayList.Item.Value(v8, v7);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19[2] + 1, 1, v19);
      }
      unint64_t v22 = v19[2];
      unint64_t v21 = v19[3];
      uint64_t v23 = v43;
      if (v22 >= v21 >> 1)
      {
        __int16 v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v21 > 1), v22 + 1, 1, v19);
        uint64_t v23 = v43;
        unint64_t v19 = v39;
      }
      v19[2] = v22 + 1;
      int v24 = &v19[9 * v22];
      v24[4] = v13;
      v24[5] = v14;
      v24[6] = v15;
      v24[7] = v16;
      v24[8] = v17;
      v24[9] = v8;
      v24[10] = v7;
      v24[11] = v23;
      *((unsigned char *)v24 + 98) = BYTE2(v9);
      *((_WORD *)v24 + 48) = v9;
      *((_DWORD *)v24 + 25) = v18;
      uint64_t v3 = v40;
      *char v40 = v19;
      v44[0] = v13;
      v44[1] = v14;
      _OWORD v44[2] = v15;
      v44[3] = v16;
      v44[4] = v17;
      v44[5] = v8;
      v44[6] = v7;
      v44[7] = v23;
      char v46 = BYTE2(v9);
      __int16 v45 = v9;
      int v47 = v18;
      DisplayList.Item.features.getter(v48);
      *((_WORD *)v40 + 4) |= v48[0];
      switch(v7 >> 62)
      {
        case 1uLL:
          switch(BYTE4(v7))
          {
            case 2u:
              swift_bridgeObjectRelease();
              int v27 = v8;
              break;
            case 7u:
              int v27 = *(unsigned __int8 *)(v8 + 26);
              outlined copy of DisplayList.Item.Value(v8, v7);
              outlined consume of DisplayList.Effect(v8, v7, 7);
              swift_bridgeObjectRelease();
              outlined consume of DisplayList.Item.Value(v8, v7);
              break;
            case 0x11u:
              (*(void (**)(void *__return_ptr))(*(void *)v8 + 120))(v44);
              outlined copy of DisplayList.Item.Value(v8, v7);
              outlined consume of DisplayList.Effect(v8, v7, 17);
              swift_bridgeObjectRelease();
              outlined consume of DisplayList.Item.Value(v8, v7);
              int v27 = LOBYTE(v44[0]);
              break;
            default:
              outlined copy of DisplayList.Effect(v8, v7, SBYTE4(v7));
              swift_bridgeObjectRetain();
              outlined consume of DisplayList.Effect(v8, v7, SBYTE4(v7));
              swift_bridgeObjectRelease();
              outlined consume of DisplayList.Item.Value(v8, v7);
              int v27 = 0;
              break;
          }
          unsigned int v5 = v27 | ((v9 & 0xFF0000u) >> 16);
          goto LABEL_4;
        case 2uLL:
          uint64_t v28 = *(void *)(v8 + 16);
          if (!v28) {
            goto LABEL_3;
          }
          if (v28 == 1)
          {
            uint64_t v29 = 0;
            LOBYTE(v5) = 0;
          }
          else
          {
            char v30 = 0;
            char v31 = 0;
            uint64_t v29 = v28 & 0x7FFFFFFFFFFFFFFELL;
            char v32 = (char *)(v8 + 106);
            uint64_t v33 = v28 & 0x7FFFFFFFFFFFFFFELL;
            do
            {
              char v34 = *(v32 - 40);
              char v35 = *v32;
              v32 += 80;
              v30 |= v34;
              v31 |= v35;
              v33 -= 2;
            }
            while (v33);
            LOBYTE(v5) = v31 | v30;
            if (v28 == v29) {
              goto LABEL_35;
            }
          }
          uint64_t v36 = v28 - v29;
          char v37 = (char *)(v8 + 40 * v29 + 66);
          do
          {
            char v38 = *v37;
            v37 += 40;
            LOBYTE(v5) = v38 | v5;
            --v36;
          }
          while (v36);
LABEL_35:
          uint64_t v25 = v8;
          unint64_t v26 = v7;
          goto LABEL_36;
        case 3uLL:
          goto LABEL_3;
        default:
          if (v8 >> 60 == 9)
          {
            LOBYTE(v5) = *(unsigned char *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 0x1A);
            uint64_t v25 = v8;
            unint64_t v26 = v7;
LABEL_36:
            outlined consume of DisplayList.Item.Value(v25, v26);
          }
          else
          {
LABEL_3:
            outlined consume of DisplayList.Item.Value(v8, v7);
            LOBYTE(v5) = 0;
          }
LABEL_4:
          *((unsigned char *)v40 + 10) |= v5;
          break;
      }
    }
    ++v4;
  }
  while (v4 != v42);

  return swift_bridgeObjectRelease();
}

void DisplayList.Item.features.getter(__int16 *a1@<X8>)
{
  void (*v35)(uint64_t *__return_ptr, uint64_t, uint64_t);
  long long v36;
  long long v37;
  uint64_t v38;
  uint64_t v39;

  unint64_t v3 = *(void *)(v1 + 40);
  unint64_t v4 = *(void *)(v1 + 48);
  switch(v4 >> 62)
  {
    case 1uLL:
      __int16 v8 = *(_WORD *)(v1 + 64);
      switch(BYTE4(v4))
      {
        case 2:
          outlined copy of DisplayList.Item.Value(*(void *)(v1 + 40), *(void *)(v1 + 48));
          swift_bridgeObjectRelease();
          outlined consume of DisplayList.Effect(v3, v4, 2);
          LODWORD(v1) = (v3 >> 2) & 1;
          break;
        case 3:
          outlined init with copy of AnyTrackedValue(v3 + 16, (uint64_t)&v36);
          uint64_t v26 = *((void *)&v37 + 1);
          uint64_t v27 = v38;
          __swift_project_boxed_opaque_existential_1(&v36, *((uint64_t *)&v37 + 1));
          char v35 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v27 + 56);
          outlined copy of DisplayList.Item.Value(v3, v4);
          v35(&v39, v26, v27);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v36);
          swift_bridgeObjectRelease();
          outlined consume of DisplayList.Effect(v3, v4, 3);
          LOWORD(v1) = v39;
          break;
        case 7:
          LOWORD(v1) = *(_WORD *)(v3 + 24);
          outlined copy of DisplayList.Item.Value(v3, v4);
          swift_bridgeObjectRelease();
          outlined consume of DisplayList.Effect(v3, v4, 7);
          break;
        case 0xA:
          outlined copy of DisplayList.Item.Value(*(void *)(v1 + 40), *(void *)(v1 + 48));
          swift_bridgeObjectRelease();
          outlined consume of DisplayList.Effect(v3, v4, 10);
          LOWORD(v1) = 4;
          break;
        case 0xC:
          outlined copy of DisplayList.Item.Value(*(void *)(v1 + 40), *(void *)(v1 + 48));
          swift_bridgeObjectRelease();
          outlined consume of DisplayList.Effect(v3, v4, 12);
          LOWORD(v1) = 2;
          break;
        case 0xE:
          outlined copy of DisplayList.Item.Value(*(void *)(v1 + 40), *(void *)(v1 + 48));
          swift_bridgeObjectRelease();
          uint64_t v28 = v3;
          char v29 = v4;
          LOBYTE(v30) = 14;
          goto LABEL_32;
        case 0xF:
          outlined copy of DisplayList.Item.Value(*(void *)(v1 + 40), *(void *)(v1 + 48));
          swift_bridgeObjectRelease();
          outlined consume of DisplayList.Effect(v3, v4, 15);
          LOWORD(v1) = 64;
          break;
        case 0x10:
          outlined copy of DisplayList.Item.Value(*(void *)(v1 + 40), *(void *)(v1 + 48));
          swift_bridgeObjectRelease();
          outlined consume of DisplayList.Effect(v3, v4, 16);
          LOWORD(v1) = 32;
          break;
        case 0x11:
          (*(void (**)(long long *__return_ptr))(*(void *)v3 + 112))(&v36);
          __int16 v31 = v36;
          int v32 = (unsigned __int16)word_26FA429C8;
          int v33 = (unsigned __int16)word_26FA429CA;
          outlined copy of DisplayList.Item.Value(v3, v4);
          swift_bridgeObjectRelease();
          outlined consume of DisplayList.Effect(v3, v4, 17);
          if ((v33 & ~v32) != 0) {
            __int16 v34 = v33;
          }
          else {
            __int16 v34 = 0;
          }
          LOWORD(v1) = v31 | v32 | v34;
          break;
        default:
          outlined copy of DisplayList.Item.Value(*(void *)(v1 + 40), *(void *)(v1 + 48));
          swift_bridgeObjectRelease();
          uint64_t v28 = v3;
          char v29 = v4;
          unint64_t v30 = HIDWORD(v4);
LABEL_32:
          outlined consume of DisplayList.Effect(v28, v29, v30);
          LOWORD(v1) = 0;
          break;
      }
      __int16 v25 = v1 | v8;
      goto LABEL_40;
    case 2uLL:
      uint64_t v9 = *(void *)(v3 + 16);
      if (!v9)
      {
        __int16 v11 = 128;
        goto LABEL_15;
      }
      if (v9 == 1)
      {
        uint64_t v10 = 0;
        __int16 v11 = 128;
LABEL_13:
        uint64_t v18 = v9 - v10;
        unint64_t v19 = (__int16 *)(v3 + 40 * v10 + 64);
        do
        {
          __int16 v20 = *v19;
          v19 += 20;
          v11 |= v20;
          --v18;
        }
        while (v18);
        goto LABEL_15;
      }
      __int16 v12 = 0;
      uint64_t v10 = v9 & 0x7FFFFFFFFFFFFFFELL;
      uint64_t v13 = (__int16 *)(v3 + 104);
      __int16 v14 = 128;
      uint64_t v15 = v9 & 0x7FFFFFFFFFFFFFFELL;
      do
      {
        __int16 v16 = *(v13 - 20);
        __int16 v17 = *v13;
        v13 += 40;
        v14 |= v16;
        v12 |= v17;
        v15 -= 2;
      }
      while (v15);
      __int16 v11 = v12 | v14;
      if (v9 != v10) {
        goto LABEL_13;
      }
LABEL_15:
      *a1 = v11;
      return;
    case 3uLL:
LABEL_22:
      *a1 = 0;
      return;
    default:
      switch(v3 >> 60)
      {
        case 6uLL:
          outlined init with copy of AnyTrackedValue((v3 & 0xFFFFFFFFFFFFFFFLL) + 16, (uint64_t)&v36);
          uint64_t v5 = *((void *)&v37 + 1);
          uint64_t v6 = v38;
          __swift_project_boxed_opaque_existential_1(&v36, *((uint64_t *)&v37 + 1));
          unint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 40);
          outlined copy of DisplayList.Content.Value(v3);
          v7(v5, v6);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v36);
          outlined consume of DisplayList.Item.Value(v3, v4);
          return;
        case 8uLL:
          uint64_t v21 = *(void *)((v3 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
          unint64_t v22 = *(void **)(v21 + 216);
          if (!v22) {
            goto LABEL_22;
          }
          outlined copy of DisplayList.Item.Value(v3, v4);
          outlined copy of DisplayList.Item.Value(v3, v4);
          swift_retain();
          swift_retain();
          if ((uint64_t)objc_msgSend(v22, sel_length) < 1) {
            goto LABEL_43;
          }
          if (one-time initialization token for updateSchedule != -1) {
            swift_once();
          }
          uint64_t v23 = static NSAttributedStringKey.updateSchedule;
          objc_msgSend(v22, sel_length);
          if (!objc_msgSend(v22, sel_attribute_atIndex_effectiveRange_, v23, 0, 0))
          {
            uint64_t v36 = 0u;
            char v37 = 0u;
            outlined destroy of Any?((uint64_t)&v36, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>);
LABEL_43:
            outlined consume of DisplayList.Item.Value(v3, v4);
            swift_release();
            swift_release();
            outlined consume of DisplayList.Item.Value(v3, v4);
            *a1 = 0;
            return;
          }
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
          outlined destroy of Any?((uint64_t)&v36, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>);
          char v24 = *(unsigned char *)(v21 + 256);
          outlined consume of DisplayList.Item.Value(v3, v4);
          swift_release();
          swift_release();
          outlined consume of DisplayList.Item.Value(v3, v4);
          if ((v24 & 1) == 0) {
            goto LABEL_22;
          }
          __int16 v25 = 8;
          break;
        case 9uLL:
          __int16 v25 = *(_WORD *)((v3 & 0xFFFFFFFFFFFFFFFLL) + 0x18) | 0x200;
          break;
        case 0xBuLL:
          goto LABEL_25;
        case 0xCuLL:
          outlined copy of DisplayList.Content.Value(*(void *)(v1 + 40));
LABEL_25:
          __int16 v25 = 2;
          break;
        default:
          goto LABEL_22;
      }
LABEL_40:
      *a1 = v25;
      return;
  }
}

uint64_t partial apply for closure #1 in PairPreferenceCombiner.value.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in PairPreferenceCombiner.value.getter(a1);
}

uint64_t closure #1 in PairPreferenceCombiner.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t Value = AGGraphGetValue();
  unint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16);

  return v4(a1, Value, AssociatedTypeWitness);
}

uint64_t partial apply for closure #1 in DynamicPreferenceCombiner.value.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in DynamicPreferenceCombiner.value.getter(a1);
}

uint64_t closure #1 in DynamicPreferenceCombiner.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t Value = AGGraphGetValue();
  unint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16);

  return v4(a1, Value, AssociatedTypeWitness);
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance HostPreferencesKey(uint64_t a1, void (*a2)(uint64_t *__return_ptr))
{
  a2(&v4);
  uint64_t v3 = v4;
  PreferenceValues.combine(with:)((SwiftUI::PreferenceValues)&v3);

  return swift_bridgeObjectRelease();
}

uint64_t _ShapeStyle_InterpolatorGroup.features.getter@<X0>(_WORD *a1@<X8>)
{
  uint64_t result = swift_beginAccess();
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    uint64_t v6 = 0;
    __int16 v7 = 0;
    uint64_t v8 = v4 + 32;
    while (1)
    {
      uint64_t v9 = v8 + 224 * v6;
      __int16 v10 = *(_WORD *)(v9 + 144);
      uint64_t v11 = *(void *)(v9 + 192);
      uint64_t v12 = *(void *)(v11 + 16);
      if (v12)
      {
        if (v12 == 1)
        {
          uint64_t v13 = 0;
        }
        else
        {
          LODWORD(result) = 0;
          uint64_t v13 = v12 & 0x7FFFFFFFFFFFFFFELL;
          __int16 v14 = (unsigned __int16 *)(v11 + 152);
          uint64_t v15 = v12 & 0x7FFFFFFFFFFFFFFELL;
          do
          {
            __int16 v16 = *(v14 - 56);
            int v17 = *v14;
            v14 += 112;
            v10 |= v16;
            uint64_t result = v17 | result;
            v15 -= 2;
          }
          while (v15);
          v10 |= result;
          if (v12 == v13) {
            goto LABEL_3;
          }
        }
        uint64_t v18 = v12 - v13;
        unint64_t v19 = (__int16 *)(v11 + 112 * v13 + 40);
        do
        {
          __int16 v20 = *v19;
          v19 += 56;
          v10 |= v20;
          --v18;
        }
        while (v18);
      }
LABEL_3:
      ++v6;
      v7 |= v10;
      if (v6 == v5) {
        goto LABEL_14;
      }
    }
  }
  __int16 v7 = 0;
LABEL_14:
  *a1 = v7;
  return result;
}

void PlatformViewFactory.features.getter(_WORD *a1@<X8>)
{
  *a1 = 1;
}

{
  PlatformViewFactory.features.getter(a1);
}

uint64_t partial apply for closure #1 in PreferenceCombiner.value.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in PreferenceCombiner.value.getter(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t closure #1 in PreferenceCombiner.value.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  Weakuint64_t Value = AGGraphGetWeakValue();
  if (!WeakValue) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16);

  return v8(a3, WeakValue, AssociatedTypeWitness);
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance ViewRespondersKey(uint64_t a1, void (*a2)(unint64_t *__return_ptr))
{
  a2(&v3);
  return specialized Array.append<A>(contentsOf:)(v3);
}

uint64_t type metadata accessor for ViewResponder()
{
  return self;
}

uint64_t base witness table accessor for _AttributeBody in PairPreferenceCombiner<A>()
{
  return swift_getWitnessTable();
}

void static ContentShapeKinds.hoverEffect.getter(void *a1@<X8>)
{
  *a1 = 8;
}

BOOL specialized static OptionalEdgeInsets.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v2 = *(unsigned char *)(a2 + 8);
  if (*(unsigned char *)(a1 + 8))
  {
    if (!*(unsigned char *)(a2 + 8)) {
      return 0;
    }
  }
  else
  {
    if (*(double *)a1 != *(double *)a2) {
      char v2 = 1;
    }
    if (v2) {
      return 0;
    }
  }
  if (*(unsigned char *)(a1 + 24))
  {
    if (!*(unsigned char *)(a2 + 24)) {
      return 0;
    }
  }
  else
  {
    if (*(double *)(a1 + 16) == *(double *)(a2 + 16)) {
      char v3 = *(unsigned char *)(a2 + 24);
    }
    else {
      char v3 = 1;
    }
    if (v3) {
      return 0;
    }
  }
  if (*(unsigned char *)(a1 + 40))
  {
    if (!*(unsigned char *)(a2 + 40)) {
      return 0;
    }
  }
  else
  {
    if (*(double *)(a1 + 32) == *(double *)(a2 + 32)) {
      char v4 = *(unsigned char *)(a2 + 40);
    }
    else {
      char v4 = 1;
    }
    if (v4) {
      return 0;
    }
  }
  if ((*(unsigned char *)(a1 + 56) & 1) == 0)
  {
    if (*(double *)(a1 + 48) == *(double *)(a2 + 48)) {
      char v6 = *(unsigned char *)(a2 + 56);
    }
    else {
      char v6 = 1;
    }
    return (v6 & 1) == 0;
  }
  return (*(unsigned char *)(a2 + 56) & 1) != 0;
}

void static ContentShapeKinds.accessibility.getter(void *a1@<X8>)
{
  *a1 = 64;
}

uint64_t type metadata accessor for ViewGraphFeatureBuffer.VTable()
{
  return self;
}

ValueMetadata *type metadata accessor for OptionalEdgeInsets()
{
  return &type metadata for OptionalEdgeInsets;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AccessibilityNullableOptionSet<A>()
{
  return static AccessibilityNullableOptionSet.== infix(_:_:)() & 1;
}

uint64_t static AccessibilityNullableOptionSet.== infix(_:_:)()
{
  if (dispatch thunk of static Equatable.== infix(_:_:)())
  {
    type metadata accessor for AccessibilityNullableOptionSet();
    char v0 = dispatch thunk of static Equatable.== infix(_:_:)();
  }
  else
  {
    char v0 = 0;
  }
  return v0 & 1;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AGAttribute(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t type metadata accessor for AccessibilityNullableOptionSet()
{
  return swift_getGenericMetadata();
}

uint64_t Anchor.Source.init<A>(_:)(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  return result;
}

uint64_t type metadata accessor for OptionalAnchorBox()
{
  return __swift_instantiateGenericMetadata();
}

void protocol witness for static _AttributeBody._destroySelf(_:) in conformance AnimatableAttribute<A>()
{
}

Swift::Void __swiftcall AnimatableAttribute.destroy()()
{
  uint64_t v2 = v1 + *(int *)(v0 + 40);
  if (*(void *)(v2 + *(int *)(type metadata accessor for AnimatableAttributeHelper() + 48))) {
    AnimatorState.removeListeners()();
  }
}

uint64_t static RendererEffect._makeView(modifier:inputs:body:)@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  uint64_t v7 = *(void *)a2;
  int v8 = *(_DWORD *)(a2 + 8);
  uint64_t v9 = *(void *)(a2 + 16);
  int v10 = *(_DWORD *)(a2 + 80);
  unsigned int v21 = *a1;
  uint64_t v13 = v7;
  int v14 = v8;
  uint64_t v15 = v9;
  long long v11 = *(_OWORD *)(a2 + 40);
  long long v16 = *(_OWORD *)(a2 + 24);
  long long v17 = v11;
  long long v18 = *(_OWORD *)(a2 + 56);
  uint64_t v19 = *(void *)(a2 + 72);
  int v20 = v10;
  return static RendererEffect.makeRendererEffect(effect:inputs:body:)(&v21, &v13, a3, a4, a5, a6, a7);
}

uint64_t static RendererEffect.makeRendererEffect(effect:inputs:body:)@<X0>(unsigned int *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  unsigned int v7 = *a1;
  uint64_t v8 = *a2;
  int v9 = *((_DWORD *)a2 + 2);
  uint64_t v10 = a2[2];
  int v12 = *((_DWORD *)a2 + 6);
  int v11 = *((_DWORD *)a2 + 7);
  int v13 = *((_DWORD *)a2 + 8);
  int v14 = *((_DWORD *)a2 + 9);
  uint64_t v16 = a2[5];
  uint64_t v15 = a2[6];
  int v18 = *((_DWORD *)a2 + 14);
  int v17 = *((_DWORD *)a2 + 15);
  int v19 = *((_DWORD *)a2 + 16);
  int v20 = *((_DWORD *)a2 + 17);
  int v22 = *((_DWORD *)a2 + 18);
  int v21 = *((_DWORD *)a2 + 19);
  int v23 = *((_DWORD *)a2 + 20);
  if ((v14 & 0x20) == 0)
  {
    uint64_t v24 = *(void *)(v15 + 16);
    if (!v24)
    {
LABEL_6:
      *(void *)&long long v42 = *a2;
      DWORD2(v42) = v9;
      uint64_t v43 = v10;
      int v44 = v12;
      int v45 = v11;
      int v46 = v13;
      int v47 = v14;
      uint64_t v48 = v16;
      uint64_t v49 = v15;
      int v50 = v18;
      int v51 = v17;
      int v52 = v19;
      int v53 = v20;
      int v54 = v22;
      int v55 = v21;
      int v56 = v23;
      return a3();
    }
    __int16 v25 = (ValueMetadata **)(v15 + 32);
    while (*v25 != &type metadata for DisplayList.Key)
    {
      v25 += 2;
      if (!--v24) {
        goto LABEL_6;
      }
    }
  }
  unsigned int v41 = v7;
  *(void *)&long long v42 = v8;
  DWORD2(v42) = v9;
  uint64_t v43 = v10;
  int v44 = v12;
  int v45 = v11;
  int v46 = v13;
  int v47 = v14;
  uint64_t v48 = v16;
  int v35 = v19;
  int v32 = v21;
  int v33 = v23;
  int v29 = v18;
  int v30 = v20;
  int v31 = v22;
  int v28 = v17;
  uint64_t v27 = v15;
  (*(void (**)(unsigned int *, long long *, uint64_t))(*(void *)(a6 + 8) + 48))(&v41, &v42, a5);
  unsigned int v40 = v41;
  *(void *)&long long v42 = v8;
  DWORD2(v42) = v9;
  uint64_t v43 = v10;
  int v44 = v12;
  int v45 = v11;
  int v46 = v13;
  int v47 = v14;
  uint64_t v48 = v16;
  uint64_t v49 = v27;
  int v50 = v29;
  int v51 = v28;
  int v52 = v35;
  int v53 = v30;
  int v54 = v31;
  int v55 = v32;
  int v56 = v33;
  return static _RendererEffect._makeRendererEffect(effect:inputs:body:)(&v40, &v42, (uint64_t)a3, a4, a5, *(void *)(a6 + 16), a7);
}

uint64_t AnimatableAttribute.init(source:phase:time:transaction:environment:)@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, _DWORD *a6@<X8>)
{
  *a6 = a1;
  a6[1] = a5;
  uint64_t v10 = type metadata accessor for AnimatableAttribute();
  return AnimatableAttributeHelper.init(phase:time:transaction:)(a2, a3, a4, (_DWORD *)((char *)a6 + *(int *)(v10 + 40)));
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance CombinedVisualEffect<A, B>(int *a1, uint64_t a2, uint64_t a3)
{
  return static Animatable._makeAnimatable(value:inputs:)(a1, a2, a3);
}

uint64_t static Animatable._makeAnimatable(value:inputs:)(int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AnimatableAttribute();
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = &v20[-v7];
  int v9 = *(_DWORD *)(a2 + 36);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = AssociatedTypeWitness - 8;
  if (*(void *)(v12 + 64)) {
    BOOL v13 = (v9 & 1) == 0;
  }
  else {
    BOOL v13 = 0;
  }
  if (v13)
  {
    int v15 = *(_DWORD *)(a2 + 24);
    int v14 = *(_DWORD *)(a2 + 28);
    uint64_t v16 = *(void *)(a2 + 16);
    int v17 = *(_DWORD *)(a2 + 8);
    int v18 = *a1;
    swift_beginAccess();
    AnimatableAttribute.init(source:phase:time:transaction:environment:)(v18, v15, v17, v14, *(_DWORD *)(v16 + 16), v8);
    uint64_t WitnessTable = swift_getWitnessTable();
    _GraphValue.init<A>(_:)((uint64_t)v8, a3, v6, WitnessTable, &v21);
    *a1 = v21;
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

uint64_t type metadata accessor for AnimatableAttribute()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t AnimatableAttributeHelper.init(phase:time:transaction:)@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, _DWORD *a4@<X8>)
{
  uint64_t v8 = (int *)type metadata accessor for AnimatableAttributeHelper();
  int v9 = (char *)a4 + v8[11];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v9, 1, 1, AssociatedTypeWitness);
  *(void *)((char *)a4 + v8[12]) = 0;
  *(_DWORD *)((char *)a4 + v8[13]) = 0;
  *a4 = a1;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

void storeEnumTagSinglePayload for AnimatablePair(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 >= a2)
  {
    switch(v17)
    {
      case 1:
        a1[v14] = 0;
        if (a2) {
          goto LABEL_24;
        }
        break;
      case 2:
        *(_WORD *)&a1[v14] = 0;
        if (a2) {
          goto LABEL_24;
        }
        break;
      case 3:
LABEL_41:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v14] = 0;
        goto LABEL_23;
      default:
LABEL_23:
        if (a2)
        {
LABEL_24:
          if (v7 >= v10)
          {
            uint64_t v24 = *(void (**)(void))(v6 + 56);
            v24();
          }
          else
          {
            unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
            int v23 = *(void (**)(unint64_t))(v9 + 56);
            v23(v22);
          }
        }
        break;
    }
  }
  else
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        break;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        break;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        break;
      default:
        return;
    }
  }
}

Swift::Void __swiftcall AnimatableAttribute.updateValue()()
{
  uint64_t v2 = v0;
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  ((void (*)())MEMORY[0x270FA5388])();
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v8 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  unsigned int v10 = (char *)&v21 - v9;
  uint64_t v23 = v11;
  uint64_t v12 = *(int *)(v11 + 48);
  uint64_t Value = AGGraphGetValue();
  char v15 = v14;
  uint64_t v22 = v4;
  unsigned int v16 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v16(v10, Value, v3);
  v10[v12] = v15 & 1;
  unsigned int v17 = *(_DWORD *)(v1 + 4);
  uint64_t v18 = type metadata accessor for AnimatableAttributeHelper();
  long long v25 = *(_OWORD *)(v18 + 16);
  AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)((uint64_t)v10, 0, v17, (void (*)(double *, const char **))_ViewInputs.base.modify, (uint64_t)v24, v18);
  if ((v10[v12] & 1) != 0 || !AGGraphGetOutputValue())
  {
    uint64_t v19 = ((uint64_t (*)(char *, char *, uint64_t))v16)(v6, v10, v3);
    MEMORY[0x270FA5388](v19);
    *(&v21 - 2) = v2;
    *(&v21 - 1) = swift_getWitnessTable();
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v6, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)(&v21 - 4), v3, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v20);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v6, v3);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v23);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v23);
  }
}

uint64_t type metadata accessor for AnimatableAttributeHelper()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(uint64_t a1, uint64_t a2, unsigned int a3, void (*a4)(double *, const char **), uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v127 = a5;
  unsigned int v131 = a3;
  uint64_t v122 = a2;
  uint64_t v137 = a1;
  uint64_t v124 = type metadata accessor for OSSignpostID();
  uint64_t v123 = *(void *)(v124 - 8);
  MEMORY[0x270FA5388](v124);
  uint64_t v126 = (char *)&v116 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(a6 + 16);
  uint64_t v11 = *(void *)(a6 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v134 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v134);
  char v15 = (char *)&v116 - v14;
  uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v17);
  char v135 = (double *)((char *)&v116 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v19);
  CGRect v130 = (char *)&v116 - v20;
  MEMORY[0x270FA5388](v21);
  long long v125 = (double *)((char *)&v116 - v22);
  MEMORY[0x270FA5388](v23);
  long long v25 = (char *)&v116 - v24;
  MEMORY[0x270FA5388](v26);
  int v29 = (char *)&v116 - v27;
  if (one-time initialization token for infinity != -1)
  {
    uint64_t v121 = v25;
    uint64_t v109 = AssociatedTypeWitness;
    uint64_t v110 = v7;
    uint64_t v111 = v12;
    uint64_t v112 = a6;
    uint64_t v113 = v11;
    char v114 = (char *)&v116 - v27;
    uint64_t v115 = v28;
    swift_once();
    uint64_t v28 = v115;
    int v29 = v114;
    uint64_t v11 = v113;
    a6 = v112;
    uint64_t v12 = v111;
    uint64_t v7 = v110;
    uint64_t AssociatedTypeWitness = v109;
    long long v25 = v121;
  }
  uint64_t v133 = v28;
  double v30 = -*(double *)&static Time.infinity;
  uint64_t v138 = *(int *)(a6 + 48);
  uint64_t v31 = *(void *)(v7 + v138);
  CGRect v128 = a4;
  if (v31)
  {
    uint64_t Value = (double *)AGGraphGetValue();
    if (v33) {
      double v30 = *Value;
    }
  }
  Swift::Bool v34 = AnimatableAttributeHelper.checkReset()();
  uint64_t v35 = v137;
  if (v34) {
    *(unsigned char *)(v35 + *(int *)(swift_getTupleTypeMetadata2() + 48)) = 1;
  }
  uint64_t result = swift_getTupleTypeMetadata2();
  uint64_t v129 = *(int *)(result + 48);
  int v37 = *(unsigned __int8 *)(v35 + v129);
  uint64_t v136 = v11;
  if (v37 != 1) {
    goto LABEL_51;
  }
  uint64_t v121 = v25;
  (*(void (**)(uint64_t, uint64_t))(v11 + 24))(v12, v11);
  uint64_t v38 = v7;
  uint64_t v39 = a6;
  uint64_t v40 = v38;
  uint64_t v41 = v38 + *(int *)(a6 + 44);
  long long v42 = v29;
  uint64_t v43 = v133;
  int v44 = *(void (**)(char *))(v133 + 16);
  uint64_t v120 = v41;
  uint64_t v45 = v134;
  v44(v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, AssociatedTypeWitness) == 1)
  {
    int v46 = v42;
    (*(void (**)(char *, uint64_t))(v43 + 8))(v15, v45);
    a6 = v39;
  }
  else
  {
    int v47 = v121;
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v121, v15, AssociatedTypeWitness);
    uint64_t v119 = v12;
    swift_getAssociatedConformanceWitness();
    if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
    {
      long long v116 = v42;
      uint64_t v132 = v16;
      AGGraphClearUpdate();
      uint64_t v48 = *(void *)AGGraphGetValue();
      swift_retain();
      AGGraphSetUpdate();
      uint64_t v49 = swift_retain();
      uint64_t v50 = specialized find<A>(_:key:)(v49);
      a6 = v39;
      uint64_t v118 = v48;
      if (v50)
      {
        uint64_t v51 = *(void *)(v50 + 72);
        swift_retain();
        swift_release();
        uint64_t v12 = v119;
        uint64_t v7 = v40;
        uint64_t Counter = v125;
        uint64_t v117 = v51;
        if (v51) {
          goto LABEL_23;
        }
      }
      else
      {
        swift_release();
        uint64_t v12 = v119;
        uint64_t v7 = v40;
        uint64_t Counter = v125;
      }
      uint64_t v53 = swift_retain();
      char v54 = specialized closure #1 in PropertyList.subscript.getter(v53);
      swift_release();
      if ((v54 & 1) == 0)
      {
        if (!v122)
        {
          int v46 = v116;
          uint64_t v16 = v132;
          (*(void (**)(char *, uint64_t))(v132 + 8))(v121, AssociatedTypeWitness);
          swift_release();
          goto LABEL_49;
        }
        uint64_t v117 = swift_retain();
        goto LABEL_23;
      }
      if (one-time initialization token for velocityTracking != -1) {
        goto LABEL_70;
      }
      goto LABEL_20;
    }
    int v46 = v42;
    (*(void (**)(char *, uint64_t))(v16 + 8))(v47, AssociatedTypeWitness);
    uint64_t v43 = v133;
    uint64_t v45 = v134;
    a6 = v39;
    uint64_t v12 = v119;
  }
  uint64_t v7 = v40;
  while (1)
  {
    uint64_t v87 = v120;
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v120, v45);
    (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v87, v46, AssociatedTypeWitness);
    uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(v87, 0, 1, AssociatedTypeWitness);
    uint64_t v11 = v136;
    uint64_t v35 = v137;
LABEL_51:
    uint64_t Counter = v135;
    if (!*(void *)(v7 + v138)) {
      return result;
    }
    uint64_t v132 = v16;
    int v88 = *(void (**)(void))(v11 + 24);
    swift_retain();
    uint64_t v89 = v12;
    uint64_t v12 = v35;
    uint64_t v90 = v89;
    v88();
    char v143 = *(const char **)&v30;
    LOBYTE(v140) = 0;
    if ((AnimatorState.update(_:at:environment:)((uint64_t)Counter, (double *)&v143, v131) & 1) == 0)
    {
      AnimatorState.nextUpdate()();
      char v143 = *(const char **)&v30;
      v128(Counter, &v143);
      uint64_t v92 = v35;
      goto LABEL_66;
    }
    swift_retain();
    int v91 = static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0)
    {
      swift_release();
      uint64_t v92 = v35;
      goto LABEL_63;
    }
    uint64_t v92 = v35;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    __int16 v93 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
      swift_release();
LABEL_63:
      if (*(void *)(v7 + *(int *)(a6 + 48))) {
        AnimatorState.removeListeners()();
      }
      uint64_t v106 = v138;
      swift_release();
      *(void *)(v7 + v106) = 0;
LABEL_66:
      uint64_t v107 = v132;
      int v108 = v130;
      (*(void (**)(char *, double *, uint64_t))(v132 + 16))(v130, Counter, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v136 + 32))(v108, v90);
      swift_release();
      uint64_t result = (*(uint64_t (**)(double *, uint64_t))(v107 + 8))(Counter, AssociatedTypeWitness);
      *(unsigned char *)(v92 + v129) = 1;
      return result;
    }
    LODWORD(v134) = v91;
    swift_retain();
    id v94 = v93;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    uint64_t v95 = swift_allocObject();
    *(_OWORD *)(v95 + 16) = xmmword_2461BE2B0;
    int CurrentAttribute = AGGraphGetCurrentAttribute();
    int v97 = *MEMORY[0x263F288F8];
    if (CurrentAttribute == *MEMORY[0x263F288F8])
    {
      __break(1u);
    }
    else
    {
      id v98 = (id)AGGraphGetAttributeGraph();
      uint64_t Counter = (double *)AGGraphGetCounter();

      uint64_t v99 = MEMORY[0x263F8DA20];
      *(void *)(v95 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v95 + 64) = v99;
      *(void *)(v95 + 32) = Counter;
      int v100 = AGGraphGetCurrentAttribute();
      if (v100 != v97)
      {
        uint64_t v101 = MEMORY[0x263F8E960];
        *(void *)(v95 + 96) = MEMORY[0x263F8E8F8];
        *(void *)(v95 + 104) = v101;
        *(_DWORD *)(v95 + 72) = v100;
        uint64_t v102 = _typeName(_:qualified:)();
        uint64_t v104 = v103;
        *(void *)(v95 + 136) = MEMORY[0x263F8D310];
        *(void *)(v95 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v95 + 112) = v102;
        *(void *)(v95 + 120) = v104;
        char v148 = v134;
        uint64_t v146 = _signpostLog;
        char v147 = &dword_245728000;
        char v143 = "AnimationState";
        uint64_t v144 = 14;
        char v145 = 2;
        uint64_t v140 = "Animation: (%p) [%d] %{public}@ ended";
        uint64_t v141 = 37;
        char v142 = 2;
        uint64_t v139 = v95;
        uint64_t v105 = v126;
        specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
        swift_release();
        (*(void (**)(char *, uint64_t))(v123 + 8))(v105, v124);
        swift_bridgeObjectRelease();
        uint64_t v92 = v12;
        uint64_t Counter = v135;
        goto LABEL_63;
      }
    }
    __break(1u);
LABEL_70:
    swift_once();
LABEL_20:
    uint64_t v117 = static Animation.velocityTracking;
    swift_retain();
LABEL_23:
    int v55 = *(void (**)(double *, char *, uint64_t))(v132 + 16);
    v55(Counter, v116, AssociatedTypeWitness);
    dispatch thunk of static AdditiveArithmetic.-= infix(_:_:)();
    int v56 = (double *)AGGraphGetValue();
    double v30 = *v56;
    if (*(void *)(v7 + v138)) {
      break;
    }
    type metadata accessor for AnimatorState();
    uint64_t v70 = (uint64_t)v130;
    v55((double *)v130, (char *)Counter, AssociatedTypeWitness);
    char v143 = *(const char **)&v30;
    uint64_t v71 = swift_allocObject();
    swift_retain();
    uint64_t v72 = swift_retain();
    AnimatorState.init(animation:interval:at:in:)(v72, v70, (uint64_t *)&v143);
    swift_retain();
    char v73 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if (kdebug_is_enabled())
    {
      unint64_t v58 = v121;
      if (one-time initialization token for _signpostLog != -1) {
        swift_once();
      }
      uint64_t v74 = (void *)_signpostLog;
      if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
      {
        swift_release();
        goto LABEL_46;
      }
      swift_retain();
      id v75 = v74;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      uint64_t v76 = swift_allocObject();
      *(_OWORD *)(v76 + 16) = xmmword_2461BE2B0;
      uint64_t result = AGGraphGetCurrentAttribute();
      int v77 = *MEMORY[0x263F288F8];
      if (result == *MEMORY[0x263F288F8]) {
        goto LABEL_73;
      }
      id v78 = (id)AGGraphGetAttributeGraph();
      long long v125 = (double *)AGGraphGetCounter();

      uint64_t v79 = MEMORY[0x263F8DA20];
      *(void *)(v76 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v76 + 64) = v79;
      *(void *)(v76 + 32) = v125;
      uint64_t result = AGGraphGetCurrentAttribute();
      if (result == v77) {
        goto LABEL_74;
      }
      uint64_t v80 = MEMORY[0x263F8E960];
      *(void *)(v76 + 96) = MEMORY[0x263F8E8F8];
      *(void *)(v76 + 104) = v80;
      *(_DWORD *)(v76 + 72) = result;
      uint64_t v81 = _typeName(_:qualified:)();
      uint64_t v83 = v82;
      *(void *)(v76 + 136) = MEMORY[0x263F8D310];
      *(void *)(v76 + 144) = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v76 + 112) = v81;
      *(void *)(v76 + 120) = v83;
      char v148 = v73;
      uint64_t v146 = _signpostLog;
      char v147 = &dword_245728000;
      char v143 = "AnimationState";
      uint64_t v144 = 14;
      char v145 = 2;
      uint64_t v140 = "Animation: (%p) [%d] %{public}@ started";
      uint64_t v141 = 39;
      char v142 = 2;
      uint64_t v139 = v76;
      int v84 = v126;
      specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
      swift_release();
      (*(void (**)(char *, uint64_t))(v123 + 8))(v84, v124);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_release();
    }
    unint64_t v58 = v121;
LABEL_46:
    uint64_t v85 = v138;
    uint64_t result = swift_release();
    *(void *)(v7 + v85) = v71;
LABEL_47:
    int v46 = v116;
    if (!v71) {
      goto LABEL_75;
    }
    swift_retain();
    AnimatorState.addListeners(transaction:)();
    swift_release();
    swift_release();
    swift_release();
    int v86 = *(void (**)(double *, uint64_t))(v132 + 8);
    v86(Counter, AssociatedTypeWitness);
    v86((double *)v58, AssociatedTypeWitness);
    uint64_t v16 = v132;
LABEL_49:
    uint64_t v43 = v133;
    uint64_t v45 = v134;
  }
  char v143 = *(const char **)v56;
  swift_retain();
  LOBYTE(v140) = 0;
  AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v117, Counter, (uint64_t)&v143, v118);
  swift_retain();
  char v57 = static os_signpost_type_t.event.getter();
  static os_signpost_type_t.event.getter();
  if ((kdebug_is_enabled() & 1) == 0)
  {
    uint64_t result = swift_release_n();
    goto LABEL_39;
  }
  unint64_t v58 = v121;
  if (one-time initialization token for _signpostLog != -1) {
    swift_once();
  }
  uint64_t v59 = (void *)_signpostLog;
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
    uint64_t result = swift_release_n();
    goto LABEL_43;
  }
  swift_retain();
  id v60 = v59;
  OSSignpostID.init(log:object:)();
  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  uint64_t v61 = swift_allocObject();
  *(_OWORD *)(v61 + 16) = xmmword_2461BE2B0;
  uint64_t result = AGGraphGetCurrentAttribute();
  int v62 = *MEMORY[0x263F288F8];
  if (result != *MEMORY[0x263F288F8])
  {
    id v63 = (id)AGGraphGetAttributeGraph();
    long long v125 = (double *)AGGraphGetCounter();

    uint64_t v64 = MEMORY[0x263F8DA20];
    *(void *)(v61 + 56) = MEMORY[0x263F8D9D0];
    *(void *)(v61 + 64) = v64;
    *(void *)(v61 + 32) = v125;
    uint64_t result = AGGraphGetCurrentAttribute();
    if (result == v62) {
      goto LABEL_72;
    }
    uint64_t v65 = MEMORY[0x263F8E960];
    *(void *)(v61 + 96) = MEMORY[0x263F8E8F8];
    *(void *)(v61 + 104) = v65;
    *(_DWORD *)(v61 + 72) = result;
    uint64_t v66 = _typeName(_:qualified:)();
    uint64_t v68 = v67;
    *(void *)(v61 + 136) = MEMORY[0x263F8D310];
    *(void *)(v61 + 144) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v61 + 112) = v66;
    *(void *)(v61 + 120) = v68;
    char v148 = v57;
    uint64_t v146 = _signpostLog;
    char v147 = &dword_245728000;
    char v143 = "AnimationState";
    uint64_t v144 = 14;
    char v145 = 2;
    uint64_t v140 = "Animation: (%p) [%d] %{public}@ updated";
    uint64_t v141 = 39;
    char v142 = 2;
    uint64_t v139 = v61;
    int v69 = v126;
    specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
    swift_release_n();
    (*(void (**)(char *, uint64_t))(v123 + 8))(v69, v124);
    uint64_t result = swift_bridgeObjectRelease();
LABEL_39:
    unint64_t v58 = v121;
LABEL_43:
    uint64_t v71 = *(void *)(v7 + v138);
    goto LABEL_47;
  }
  __break(1u);
LABEL_72:
  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
LABEL_75:
  __break(1u);
  return result;
}

Swift::Bool __swiftcall AnimatableAttributeHelper.checkReset()()
{
  uint64_t v2 = v0;
  int v3 = *(_DWORD *)AGGraphGetValue() >> 1;
  int v4 = *(_DWORD *)(v1 + *(int *)(v2 + 52));
  if (v3 != v4) {
    AnimatableAttributeHelper.reset()();
  }
  return v3 != v4;
}

uint64_t LeafLayoutComputer.updateValue()(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for LeafLayoutEngine();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v13 - v8;
  uint64_t Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, Value, v2);
  LeafLayoutEngine.init(_:)((uint64_t)v5, v2, (uint64_t)v9);
  uint64_t WitnessTable = swift_getWitnessTable();
  StatefulRule<>.update<A>(to:)((uint64_t)v9, a1, v6, WitnessTable, (uint64_t)&protocol witness table for LeafLayoutEngine<A>);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t closure #2 in ShapeStyledDisplayList.updateValue()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, double *a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  uint64_t v11 = *(void *)(a2 - 8);
  double v12 = MEMORY[0x270FA5388](a1);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v11 + 16))(v14, v12);
  double v15 = (*(double (**)(double *, uint64_t, uint64_t, double, double))(a3 + 40))(a4, a2, a3, a5, a6);
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, a2);
  a4[13] = v15;
  *((void *)a4 + 14) = v17;
  *((void *)a4 + 15) = v19;
  *((void *)a4 + 16) = v21;
  return result;
}

uint64_t LayoutProxy.lengthThatFits(_:in:)(uint64_t *a1, char a2)
{
  uint64_t v4 = *a1;
  char v5 = *((unsigned char *)a1 + 8);
  uint64_t v6 = a1[2];
  char v7 = *((unsigned char *)a1 + 24);
  if (*(_DWORD *)(v2 + 4) == *MEMORY[0x263F288F8])
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    Inputuint64_t Value = (uint64_t *)&static LayoutComputer.defaultValue;
  }
  else
  {
    Inputuint64_t Value = (uint64_t *)AGGraphGetInputValue();
  }
  uint64_t v9 = *InputValue;
  uint64_t v10 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v10 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_12;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (!_MovableLockIsOwner(static Update._lock))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_12:
    uint64_t v12 = v4;
    char v13 = v5;
    uint64_t v14 = v6;
    char v15 = v7;
    (*(void (**)(uint64_t *, void))(*(void *)v9 + 128))(&v12, a2 & 1);
    return swift_release();
  }
  return result;
}

unint64_t **specialized BidirectionalCollection<>.insertionSort(by:)(unint64_t **result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  uint64_t v12 = (uint64_t)result[1];
  if (!v12) {
    return result;
  }
  if (v12 < 1) {
    goto LABEL_157;
  }
  if (v12 == 1) {
    return result;
  }
  uint64_t v14 = *result;
  int v86 = *MEMORY[0x263F288F8];
  uint64_t v15 = 1;
  char v73 = result[1];
  uint64_t v74 = *result;
  do
  {
    if (v15 == 0x111111111111112)
    {
LABEL_154:
      __break(1u);
LABEL_155:
      __break(1u);
LABEL_156:
      __break(1u);
LABEL_157:
      __break(1u);
LABEL_158:
      uint64_t result = (unint64_t **)_assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    unint64_t v16 = v74[15 * v15];
    uint64_t v17 = 120 * v16;
    unint64_t v85 = v16;
    if ((unsigned __int128)((uint64_t)v16 * (__int128)120) >> 64 != (uint64_t)(120 * v16) >> 63) {
      goto LABEL_155;
    }
    uint64_t v18 = 0;
    uint64_t v19 = a4 + v17;
    id v75 = v14;
    uint64_t v76 = a4 + v17;
    uint64_t v20 = v14;
    uint64_t v88 = 120 * v16;
    uint64_t v89 = v15;
    while (1)
    {
      unint64_t v22 = *v20;
      v20 -= 15;
      unint64_t v21 = v22;
      uint64_t v23 = 120 * v22;
      if ((unsigned __int128)((uint64_t)v22 * (__int128)120) >> 64 != (uint64_t)(120 * v22) >> 63)
      {
        __break(1u);
LABEL_138:
        __break(1u);
LABEL_139:
        __break(1u);
LABEL_140:
        __break(1u);
LABEL_141:
        __break(1u);
LABEL_142:
        __break(1u);
LABEL_143:
        __break(1u);
LABEL_144:
        __break(1u);
LABEL_145:
        __break(1u);
LABEL_146:
        __break(1u);
LABEL_147:
        __break(1u);
LABEL_148:
        __break(1u);
LABEL_149:
        __break(1u);
LABEL_150:
        __break(1u);
LABEL_151:
        __break(1u);
LABEL_152:
        __break(1u);
LABEL_153:
        __break(1u);
        goto LABEL_154;
      }
      double v24 = *(double *)(a2 + v17);
      double v25 = *(double *)(a2 + v23);
      if (v25 < v24) {
        goto LABEL_8;
      }
      if (v24 < v25) {
        break;
      }
      if (*(unsigned char *)(v19 + 8))
      {
        uint64_t v26 = *(unsigned __int8 *)(a6 + 17);
        if (*(unsigned char *)(a6 + 17)) {
          uint64_t v27 = a9;
        }
        else {
          uint64_t v27 = 0;
        }
        if (*(unsigned char *)(a6 + 17)) {
          uint64_t v28 = 0;
        }
        else {
          uint64_t v28 = a11;
        }
        uint64_t v29 = *(void *)(a6 + 88);
        uint64_t v77 = v27;
        uint64_t v80 = v28;
        if (*(unsigned char *)(a6 + 96))
        {
          if ((v85 & 0x8000000000000000) != 0) {
            goto LABEL_138;
          }
          if (v85 >= *(void *)(v29 + 16)) {
            goto LABEL_140;
          }
          uint64_t v30 = v29 + 12 * v85;
        }
        else
        {
          if ((v85 & 0x8000000000000000) != 0) {
            goto LABEL_139;
          }
          if (v85 >= *(void *)(v29 + 16)) {
            goto LABEL_142;
          }
          uint64_t v30 = v29 + 8 * v85;
        }
        if (*(_DWORD *)(v30 + 32) == v86)
        {
          Inputuint64_t Value = (uint64_t *)&static LayoutComputer.defaultValue;
          if (one-time initialization token for defaultValue != -1)
          {
            swift_once();
            Inputuint64_t Value = (uint64_t *)&static LayoutComputer.defaultValue;
          }
        }
        else
        {
          Inputuint64_t Value = (uint64_t *)AGGraphGetInputValue();
        }
        uint64_t v39 = *InputValue;
        uint64_t v40 = one-time initialization token for lockAssertionsAreEnabled;
        swift_retain();
        if (v40 != -1) {
          swift_once();
        }
        if (lockAssertionsAreEnabled)
        {
          if (one-time initialization token for _lock != -1) {
            swift_once();
          }
          if (!_MovableLockIsOwner(static Update._lock)) {
            goto LABEL_158;
          }
        }
        uint64_t v90 = v77;
        char v91 = v26 & a10;
        uint64_t v92 = v80;
        char v93 = (v26 ^ 1) & a12;
        double v31 = (*(double (**)(uint64_t *, uint64_t))(*(void *)v39 + 128))(&v90, v26);
        uint64_t result = (unint64_t **)swift_release();
        *(double *)uint64_t v19 = v31;
        *(unsigned char *)(v19 + 8) = 0;
        uint64_t v17 = v88;
        uint64_t v15 = v89;
        if ((*(unsigned char *)(v19 + 24) & 1) == 0)
        {
LABEL_54:
          double v41 = *(double *)(v19 + 16);
          goto LABEL_63;
        }
      }
      else
      {
        double v31 = *(double *)v19;
        if ((*(unsigned char *)(v19 + 24) & 1) == 0) {
          goto LABEL_54;
        }
      }
      uint64_t v32 = *(unsigned __int8 *)(a6 + 17);
      uint64_t v33 = *(unsigned char *)(a6 + 17) ? a9 : 0x7FF0000000000000;
      uint64_t v34 = *(unsigned char *)(a6 + 17) ? 0x7FF0000000000000 : a11;
      uint64_t v35 = *(void *)(a6 + 88);
      if (*(unsigned char *)(a6 + 96))
      {
        if ((v85 & 0x8000000000000000) != 0) {
          goto LABEL_141;
        }
        if (v85 >= *(void *)(v35 + 16)) {
          goto LABEL_147;
        }
        uint64_t v36 = v35 + 12 * v85;
      }
      else
      {
        if ((v85 & 0x8000000000000000) != 0) {
          goto LABEL_143;
        }
        if (v85 >= *(void *)(v35 + 16)) {
          goto LABEL_144;
        }
        uint64_t v36 = v35 + 8 * v85;
      }
      uint64_t v81 = v33;
      if (*(_DWORD *)(v36 + 32) == v86)
      {
        uint64_t v38 = (uint64_t *)&static LayoutComputer.defaultValue;
        if (one-time initialization token for defaultValue != -1)
        {
          swift_once();
          uint64_t v38 = (uint64_t *)&static LayoutComputer.defaultValue;
        }
      }
      else
      {
        uint64_t v38 = (uint64_t *)AGGraphGetInputValue();
      }
      uint64_t v42 = *v38;
      uint64_t v43 = one-time initialization token for lockAssertionsAreEnabled;
      swift_retain();
      if (v43 != -1) {
        swift_once();
      }
      if (lockAssertionsAreEnabled)
      {
        if (one-time initialization token for _lock != -1) {
          swift_once();
        }
        if (!_MovableLockIsOwner(static Update._lock)) {
          goto LABEL_158;
        }
      }
      uint64_t v90 = v81;
      char v91 = v32 & a10;
      uint64_t v92 = v34;
      char v93 = (v32 ^ 1) & a12;
      double v41 = (*(double (**)(uint64_t *, uint64_t))(*(void *)v42 + 128))(&v90, v32);
      uint64_t result = (unint64_t **)swift_release();
      uint64_t v19 = v76;
      *(double *)(v76 + 16) = v41;
      *(unsigned char *)(v76 + 24) = 0;
      uint64_t v17 = v88;
      uint64_t v15 = v89;
LABEL_63:
      uint64_t v44 = a4 + v23;
      if (*(unsigned char *)(v44 + 8))
      {
        uint64_t v45 = *(unsigned __int8 *)(a6 + 17);
        if (*(unsigned char *)(a6 + 17)) {
          uint64_t v46 = a9;
        }
        else {
          uint64_t v46 = 0;
        }
        if (*(unsigned char *)(a6 + 17)) {
          uint64_t v47 = 0;
        }
        else {
          uint64_t v47 = a11;
        }
        uint64_t v48 = *(void *)(a6 + 88);
        if (*(unsigned char *)(a6 + 96))
        {
          if ((v21 & 0x8000000000000000) != 0) {
            goto LABEL_145;
          }
          if (v21 >= *(void *)(v48 + 16)) {
            goto LABEL_148;
          }
          uint64_t v49 = v48 + 12 * v21;
        }
        else
        {
          if ((v21 & 0x8000000000000000) != 0) {
            goto LABEL_146;
          }
          if (v21 >= *(void *)(v48 + 16)) {
            goto LABEL_150;
          }
          uint64_t v49 = v48 + 8 * v21;
        }
        uint64_t v78 = v46;
        uint64_t v82 = v47;
        if (*(_DWORD *)(v49 + 32) == v86)
        {
          int v56 = (uint64_t *)&static LayoutComputer.defaultValue;
          if (one-time initialization token for defaultValue != -1)
          {
            swift_once();
            int v56 = (uint64_t *)&static LayoutComputer.defaultValue;
          }
        }
        else
        {
          int v56 = (uint64_t *)AGGraphGetInputValue();
        }
        uint64_t v58 = *v56;
        uint64_t v59 = one-time initialization token for lockAssertionsAreEnabled;
        swift_retain();
        if (v59 != -1) {
          swift_once();
        }
        if (lockAssertionsAreEnabled)
        {
          if (one-time initialization token for _lock != -1) {
            swift_once();
          }
          if (!_MovableLockIsOwner(static Update._lock)) {
            goto LABEL_158;
          }
        }
        uint64_t v90 = v78;
        char v91 = v45 & a10;
        uint64_t v92 = v82;
        char v93 = (v45 ^ 1) & a12;
        double v50 = (*(double (**)(uint64_t *, uint64_t))(*(void *)v58 + 128))(&v90, v45);
        uint64_t result = (unint64_t **)swift_release();
        *(double *)uint64_t v44 = v50;
        *(unsigned char *)(v44 + 8) = 0;
        uint64_t v17 = v88;
        uint64_t v15 = v89;
        if ((*(unsigned char *)(v44 + 24) & 1) == 0)
        {
LABEL_105:
          double v60 = *(double *)(v44 + 16);
          goto LABEL_114;
        }
      }
      else
      {
        double v50 = *(double *)v44;
        if ((*(unsigned char *)(v44 + 24) & 1) == 0) {
          goto LABEL_105;
        }
      }
      uint64_t v51 = *(unsigned __int8 *)(a6 + 17);
      uint64_t v52 = *(unsigned char *)(a6 + 17) ? a9 : 0x7FF0000000000000;
      uint64_t v53 = *(unsigned char *)(a6 + 17) ? 0x7FF0000000000000 : a11;
      uint64_t v54 = *(void *)(a6 + 88);
      if (*(unsigned char *)(a6 + 96))
      {
        if ((v21 & 0x8000000000000000) != 0) {
          goto LABEL_149;
        }
        if (v21 >= *(void *)(v54 + 16)) {
          goto LABEL_153;
        }
        uint64_t v55 = v54 + 12 * v21;
      }
      else
      {
        if ((v21 & 0x8000000000000000) != 0) {
          goto LABEL_151;
        }
        if (v21 >= *(void *)(v54 + 16)) {
          goto LABEL_152;
        }
        uint64_t v55 = v54 + 8 * v21;
      }
      uint64_t v79 = v52;
      uint64_t v83 = v53;
      if (*(_DWORD *)(v55 + 32) == v86)
      {
        char v57 = (uint64_t *)&static LayoutComputer.defaultValue;
        if (one-time initialization token for defaultValue != -1)
        {
          swift_once();
          char v57 = (uint64_t *)&static LayoutComputer.defaultValue;
        }
      }
      else
      {
        char v57 = (uint64_t *)AGGraphGetInputValue();
      }
      uint64_t v61 = *v57;
      uint64_t v62 = one-time initialization token for lockAssertionsAreEnabled;
      swift_retain();
      if (v62 != -1) {
        swift_once();
      }
      if (lockAssertionsAreEnabled)
      {
        if (one-time initialization token for _lock != -1) {
          swift_once();
        }
        if (!_MovableLockIsOwner(static Update._lock)) {
          goto LABEL_158;
        }
      }
      uint64_t v90 = v79;
      char v91 = v51 & a10;
      uint64_t v92 = v83;
      char v93 = (v51 ^ 1) & a12;
      double v60 = (*(double (**)(uint64_t *, uint64_t))(*(void *)v61 + 128))(&v90, v51);
      uint64_t result = (unint64_t **)swift_release();
      *(double *)(v44 + 16) = v60;
      *(unsigned char *)(v44 + 24) = 0;
      uint64_t v17 = v88;
      uint64_t v15 = v89;
LABEL_114:
      double v63 = v41 - v31;
      if (v41 - v31 == INFINITY) {
        double v64 = -v31;
      }
      else {
        double v64 = 0.0;
      }
      double v65 = v60 - v50;
      if (v60 - v50 == INFINITY) {
        double v66 = -v50;
      }
      else {
        double v66 = 0.0;
      }
      BOOL v67 = v64 < v66;
      if (v63 != v65) {
        BOOL v67 = v63 < v65;
      }
      if (!v67)
      {
        BOOL v68 = v65 >= v63;
        if (v63 == v65) {
          BOOL v68 = v66 >= v64;
        }
        if (!v68 || (uint64_t)v85 >= (uint64_t)v21) {
          break;
        }
      }
LABEL_8:
      v14[15] = v21;
      ++v18;
      uint64_t v14 = v20;
      if (v15 == v18)
      {
        uint64_t v70 = 0;
        uint64_t v71 = v73;
        uint64_t v72 = v75;
        goto LABEL_133;
      }
    }
    uint64_t v71 = v73;
    uint64_t v72 = v75;
    if (!v18) {
      goto LABEL_134;
    }
    uint64_t v70 = v15 - v18;
LABEL_133:
    v74[15 * v70] = v85;
LABEL_134:
    if ((unint64_t *)v15 == v71) {
      goto LABEL_156;
    }
    ++v15;
    uint64_t v14 = v72 + 15;
  }
  while ((unint64_t *)v15 != v71);
  return result;
}

uint64_t LayoutEngineBox.lengthThatFits(_:in:)(uint64_t *a1, char a2)
{
  uint64_t v3 = *v2;
  char v4 = *((unsigned char *)a1 + 8);
  uint64_t v5 = a1[2];
  char v6 = *((unsigned char *)a1 + 24);
  uint64_t v8 = *a1;
  char v9 = v4;
  uint64_t v10 = v5;
  char v11 = v6;
  return (*(uint64_t (**)(uint64_t *, void, void))(*(void *)(v3 + 168) + 48))(&v8, a2 & 1, *(void *)(v3 + 160));
}

double LayoutEngine.lengthThatFits(_:in:)(uint64_t *a1, char a2, uint64_t a3, uint64_t a4)
{
  char v5 = *((unsigned char *)a1 + 8);
  uint64_t v6 = a1[2];
  char v7 = *((unsigned char *)a1 + 24);
  uint64_t v10 = *a1;
  char v11 = v5;
  uint64_t v12 = v6;
  char v13 = v7;
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(a4 + 40))(&v10, a3, a4);
  if (a2) {
    return v9;
  }
  return result;
}

{
  return LayoutEngine.lengthThatFits(_:in:)(a1, a2 & 1, a3, a4);
}

uint64_t SpacerLayoutComputer.Engine.sizeThatFits(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  double v5 = MEMORY[0x270FA5388](a1);
  char v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(void, double))(*(void *)(v8 + 24) + 24))(*(void *)(a2 + 16), v5);
  char v10 = v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, v2, a2);
  if ((v10 & 1) != 0 && one-time initialization token for defaultSpacingValue != -1) {
    swift_once();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, a2);
}

uint64_t protocol witness for PrimitiveSpacer.minLength.getter in conformance _TextBaselineRelativeSpacer()
{
  return *(void *)v0;
}

double LeafLayoutEngine.sizeThatFits(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(v7 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  double v11 = MEMORY[0x270FA5388](v10);
  char v13 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v15 = *(double *)v14;
  uint64_t v16 = *(unsigned __int8 *)(v14 + 8);
  double v17 = *(double *)(v14 + 16);
  __int16 v18 = *(unsigned __int8 *)(v14 + 24);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v19 + 16))(v6, v3, a2, v11);
  uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  uint64_t v68 = v8;
  v20(v13, v6, v8);
  uint64_t v21 = v3 + *(int *)(a2 + 36);
  double v22 = v15;
  double v23 = *(double *)v21;
  uint64_t v24 = *(void *)(v21 + 8);
  double v26 = *(double *)(v21 + 16);
  uint64_t v25 = *(void *)(v21 + 24);
  uint64_t v28 = *(void *)(v21 + 32);
  uint64_t v27 = *(void *)(v21 + 40);
  int v29 = *(unsigned __int8 *)(v21 + 48);
  double v30 = *(double *)(v21 + 56);
  uint64_t v31 = *(void *)(v21 + 64);
  double v32 = *(double *)(v21 + 72);
  uint64_t v34 = *(void *)(v21 + 88);
  uint64_t v33 = *(void *)(v21 + 96);
  int v35 = *(unsigned __int8 *)(v21 + 104);
  double v36 = *(double *)(v21 + 144);
  if ((v29 & 1) == 0)
  {
    if (v16)
    {
      if ((v24 & 1) == 0)
      {
        if (*(unsigned char *)(v21 + 64)) {
          char v37 = *(unsigned char *)(v21 + 104);
        }
        else {
          char v37 = 1;
        }
        if (v37) {
          goto LABEL_18;
        }
        goto LABEL_35;
      }
    }
    else if ((v24 & 1) != 0 || v15 != v23)
    {
      goto LABEL_17;
    }
    if (v18)
    {
      if ((v25 & 1) == 0) {
        goto LABEL_17;
      }
LABEL_16:
      double v36 = *(double *)(v21 + 32);
LABEL_43:
      swift_beginAccess();
      uint64_t v52 = (double *)static LayoutTrace.recorder;
      if (static LayoutTrace.recorder)
      {
        swift_beginAccess();
        v52[4] = v15;
        *((void *)v52 + 5) = v16;
        v52[6] = v17;
        *((_WORD *)v52 + 28) = v18 | 0x100;
      }
      uint64_t v44 = v68;
      goto LABEL_46;
    }
    if ((v25 & 1) == 0 && v17 == v26) {
      goto LABEL_16;
    }
  }
LABEL_17:
  if (v35) {
    goto LABEL_18;
  }
  if (v16)
  {
    if ((*(unsigned char *)(v21 + 64) & 1) == 0) {
      goto LABEL_18;
    }
  }
  else if ((*(unsigned char *)(v21 + 64) & 1) != 0 || v15 != v30)
  {
    goto LABEL_18;
  }
LABEL_35:
  if (v18)
  {
    if (*(unsigned char *)(v21 + 80))
    {
LABEL_40:
      double v36 = *(double *)(v21 + 88);
      goto LABEL_43;
    }
  }
  else if ((*(unsigned char *)(v21 + 80) & 1) == 0 && v17 == v32)
  {
    goto LABEL_40;
  }
LABEL_18:
  if ((*(unsigned char *)(v21 + 160) & 1) == 0)
  {
    if (v16)
    {
      if ((*(unsigned char *)(v21 + 120) & 1) == 0) {
        goto LABEL_19;
      }
    }
    else if ((*(unsigned char *)(v21 + 120) & 1) != 0 || *(double *)(v21 + 112) != v15)
    {
      goto LABEL_19;
    }
    if (v18)
    {
      if (*(unsigned char *)(v21 + 136)) {
        goto LABEL_43;
      }
    }
    else if ((*(unsigned char *)(v21 + 136) & 1) == 0 && *(double *)(v21 + 128) == v17)
    {
      goto LABEL_43;
    }
  }
LABEL_19:
  uint64_t v55 = *(void *)(v21 + 80);
  int v56 = v35;
  double v57 = v32;
  uint64_t v58 = v31;
  uint64_t v59 = v34;
  double v38 = v30;
  uint64_t v60 = v33;
  int v62 = v29;
  uint64_t v63 = v25;
  double v64 = v26;
  uint64_t v65 = v24;
  double v61 = v23;
  uint64_t v66 = v27;
  uint64_t v67 = v9;
  uint64_t v39 = v28;
  double v40 = v17;
  double v41 = v22;
  swift_beginAccess();
  uint64_t v42 = (double *)static LayoutTrace.recorder;
  if (static LayoutTrace.recorder)
  {
    swift_beginAccess();
    v42[4] = v41;
    *((void *)v42 + 5) = v16;
    v42[6] = v40;
    *((_WORD *)v42 + 28) = v18;
  }
  uint64_t v43 = *(void *)(a2 + 24);
  double v69 = v41;
  char v70 = v16;
  double v71 = v40;
  char v72 = v18;
  uint64_t v44 = v68;
  double v36 = (*(double (**)(double *, uint64_t))(v43 + 16))(&v69, v68);
  uint64_t v45 = v58;
  *(double *)(v21 + 112) = v38;
  *(void *)(v21 + 120) = v45;
  uint64_t v46 = v55;
  *(double *)(v21 + 128) = v57;
  *(void *)(v21 + 136) = v46;
  uint64_t v47 = v60;
  *(void *)(v21 + 144) = v59;
  *(void *)(v21 + 152) = v47;
  *(unsigned char *)(v21 + 160) = v56;
  uint64_t v48 = v65;
  *(double *)(v21 + 56) = v61;
  *(void *)(v21 + 64) = v48;
  uint64_t v49 = v63;
  *(double *)(v21 + 72) = v64;
  *(void *)(v21 + 80) = v49;
  uint64_t v50 = v66;
  *(void *)(v21 + 88) = v39;
  *(void *)(v21 + 96) = v50;
  *(unsigned char *)(v21 + 104) = v62;
  *(double *)uint64_t v21 = v41;
  *(unsigned char *)(v21 + 8) = v16;
  *(double *)(v21 + 16) = v40;
  *(unsigned char *)(v21 + 24) = v18;
  *(double *)(v21 + 32) = v36;
  *(void *)(v21 + 40) = v51;
  *(unsigned char *)(v21 + 48) = 0;
  uint64_t v9 = v67;
LABEL_46:
  (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v44);
  return v36;
}

uint64_t initializeWithCopy for LeafLayoutEngine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  long long v10 = *(_OWORD *)(v8 + 16);
  long long v9 = *(_OWORD *)(v8 + 32);
  *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
  *(_OWORD *)(v7 + 16) = v10;
  *(_OWORD *)(v7 + 32) = v9;
  long long v11 = *(_OWORD *)(v8 + 96);
  long long v13 = *(_OWORD *)(v8 + 48);
  long long v12 = *(_OWORD *)(v8 + 64);
  *(_OWORD *)(v7 + 80) = *(_OWORD *)(v8 + 80);
  *(_OWORD *)(v7 + 96) = v11;
  *(_OWORD *)(v7 + 48) = v13;
  *(_OWORD *)(v7 + 64) = v12;
  long long v15 = *(_OWORD *)(v8 + 128);
  long long v14 = *(_OWORD *)(v8 + 144);
  long long v16 = *(_OWORD *)(v8 + 112);
  *(unsigned char *)(v7 + 160) = *(unsigned char *)(v8 + 160);
  *(_OWORD *)(v7 + 128) = v15;
  *(_OWORD *)(v7 + 144) = v14;
  *(_OWORD *)(v7 + 112) = v16;
  return a1;
}

uint64_t initializeWithCopy for _OverlayShapeModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 48);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v9 = v8 + 16;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 16))(v12, v13);
  *(_WORD *)(*(void *)(v9 + 48) + v12) = *(_WORD *)(*(void *)(v9 + 48) + v13);
  return a1;
}

uint64_t initializeWithCopy for LinearGradient(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for _StrokedShape(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for _ClipEffect(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  *(_WORD *)(*(void *)(v5 + 48) + a1) = *(_WORD *)(*(void *)(v5 + 48) + a2);
  return a1;
}

uint64_t initializeWithCopy for _StrokedShape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v7 = *(void *)v8;
  *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 + 8);
  *(_DWORD *)(v7 + 12) = *(_DWORD *)(v8 + 12);
  *(void *)(v7 + 16) = *(void *)(v8 + 16);
  *(void *)(v7 + 24) = *(void *)(v8 + 24);
  *(void *)(v7 + 32) = *(void *)(v8 + 32);
  swift_bridgeObjectRetain();
  return a1;
}

double protocol witness for LayoutEngine.lengthThatFits(_:in:) in conformance StyledTextLayoutEngine(uint64_t a1, char a2)
{
  char v4 = *(unsigned char *)(a1 + 8);
  if ((a2 & 1) != 0 || (*(unsigned char *)(a1 + 8) & 1) != 0 || (double result = 0.0, (*(void *)a1 & 0x7FFFFFFFFFFFFFFFLL) != 0))
  {
    char v6 = *(unsigned char *)(a1 + 24);
    uint64_t v7 = *(void *)(a1 + 16);
    uint64_t v8 = *v2;
    uint64_t v9 = v2[1];
    uint64_t v11 = *(void *)a1;
    char v12 = v4;
    uint64_t v13 = v7;
    char v14 = v6;
    double result = StyledTextLayoutEngine.sizeThatFits(_:)(&v11, v8, v9);
    if (a2) {
      return v10;
    }
  }
  return result;
}

uint64_t StatefulRule<>.update<A>(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = a2;
  uint64_t v9 = a3;
  uint64_t v10 = a4;
  uint64_t v11 = a5;
  uint64_t v12 = a1;
  long long v6[2] = a2;
  v6[3] = a3;
  v6[4] = a4;
  v6[5] = a5;
  v6[6] = a1;
  return StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for closure #1 in StatefulRule<>.update<A>(to:), (uint64_t)v7, (void (*)(void))partial apply for closure #2 in StatefulRule<>.update<A>(to:), (uint64_t)v6, a2, a3, a4, a5);
}

uint64_t destroy for ForegroundMaterialStyle(uint64_t a1)
{
  return outlined consume of Material.ID(*(void *)a1, *(unsigned char *)(a1 + 8));
}

double protocol witness for Shape.sizeThatFits(_:) in conformance RoundedRectangle(uint64_t a1, char a2)
{
  double result = *(double *)&a1;
  if (a2) {
    return 10.0;
  }
  return result;
}

double protocol witness for ShapeStyledLeafView.shape(in:) in conformance _BackgroundStyleModifier<A>(uint64_t a1, CGFloat a2, CGFloat a3)
{
  return 0.0;
}

double _BackgroundStyleModifier.shape(in:)(uint64_t a1, CGFloat a2, CGFloat a3)
{
  specialized ImplicitContainerShape.path(in:)((uint64_t)v7, 0.0, 0.0, a2, a3);
  uint64_t v4 = v8 | 0x10000;
  long long v5 = v7[1];
  *(_OWORD *)a1 = v7[0];
  *(_OWORD *)(a1 + 16) = v5;
  *(void *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  return 0.0;
}

void *specialized ImplicitContainerShape.path(in:)@<X0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>)
{
  uint64_t v10 = (unsigned int *)_threadGeometryProxyData();
  if (v10)
  {
    unsigned int v11 = v10[1];
    unsigned int v12 = v10[2];
    unsigned int v13 = v10[3];
    unsigned int v14 = v10[4];
    unsigned int v15 = v10[5];
    unsigned int v16 = v10[7];
    unsigned int v17 = v10[8];
    unsigned int v18 = v10[9];
    unsigned int v19 = v10[10];
    unsigned int v20 = v10[11];
    unsigned int v21 = v10[12];
    unsigned int v54 = v10[6];
    unsigned int v55 = *v10;
    LODWORD(v57) = *v10;
    HIDWORD(v57) = v11;
    uint64_t v58 = (_UNKNOWN **)__PAIR64__(v13, v12);
    unint64_t v59 = __PAIR64__(v15, v14);
    unint64_t v60 = __PAIR64__(v16, v54);
    unsigned int v52 = v17;
    unsigned int v53 = v16;
    unint64_t v61 = __PAIR64__(v18, v17);
    unsigned int v50 = v19;
    unsigned int v51 = v18;
    unint64_t v62 = __PAIR64__(v20, v19);
    unsigned int v48 = v21;
    unsigned int v49 = v20;
    LODWORD(v63) = v21;
    GeometryProxy.environment.getter(&v65);
    uint64_t v22 = *(void *)&v65;
    if (v66 == 0.0)
    {
      uint64_t v40 = swift_retain_n();
      uint64_t v41 = specialized find<A>(_:key:)(v40);
      if (v41)
      {
        double v23 = *(ValueMetadata **)(v41 + 72);
        uint64_t v24 = *(_UNKNOWN ***)(v41 + 80);
        unint64_t v47 = *(void *)(v41 + 96);
        unint64_t v46 = *(void *)(v41 + 104);
        unint64_t v45 = *(void *)(v41 + 112);
        uint64_t v44 = *(void *)(v41 + 120);
        char v42 = *(unsigned char *)(v41 + 128);
        double v57 = v23;
        uint64_t v58 = v24;
        char v43 = v42 ^ 1;
        unint64_t v59 = *(void *)(v41 + 88);
      }
      else
      {
        unint64_t v47 = 0;
        double v23 = &type metadata for DefaultContainerShapeType;
        uint64_t v24 = &protocol witness table for DefaultContainerShapeType;
        double v57 = &type metadata for DefaultContainerShapeType;
        uint64_t v58 = &protocol witness table for DefaultContainerShapeType;
        unint64_t v60 = 0;
        unint64_t v61 = 0;
        unint64_t v59 = 0;
        LODWORD(v62) = 0;
        unint64_t v45 = 0;
        unint64_t v46 = 0;
        char v43 = 1;
        uint64_t v44 = 0;
      }
      swift_release_n();
      if (v43)
      {
        unint64_t v28 = v59;
        unsigned int v31 = v54;
        unsigned int v30 = v55;
        unsigned int v33 = v52;
        unsigned int v32 = v53;
        unsigned int v35 = v50;
        unsigned int v34 = v51;
        unsigned int v37 = v48;
        unsigned int v36 = v49;
        unint64_t v29 = v47;
        unint64_t v26 = v45;
        unint64_t v25 = v46;
        uint64_t v27 = v44;
        goto LABEL_13;
      }
    }
    else
    {
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.value<A>(_:for:)(v22, (uint64_t)&v57);
      swift_release_n();
      swift_release_n();
      if ((v64 & 1) == 0)
      {
        double v23 = v57;
        uint64_t v24 = v58;
        unint64_t v25 = v61;
        unint64_t v26 = v62;
        uint64_t v27 = v63;
        unint64_t v28 = v59;
        unint64_t v29 = v60;
        unsigned int v31 = v54;
        unsigned int v30 = v55;
        unsigned int v33 = v52;
        unsigned int v32 = v53;
        unsigned int v35 = v50;
        unsigned int v34 = v51;
        unsigned int v37 = v48;
        unsigned int v36 = v49;
LABEL_13:
        double v57 = (ValueMetadata *)__PAIR64__(v11, v30);
        uint64_t v58 = (_UNKNOWN **)__PAIR64__(v13, v12);
        unint64_t v59 = __PAIR64__(v15, v14);
        unint64_t v60 = __PAIR64__(v32, v31);
        unint64_t v61 = __PAIR64__(v34, v33);
        unint64_t v62 = __PAIR64__(v36, v35);
        LODWORD(v63) = v37;
        v56[0] = v29;
        v56[1] = v25;
        v56[2] = v26;
        v56[3] = v27;
        double result = ((void *(*)(double *__return_ptr, ValueMetadata **, unint64_t, void *, ValueMetadata *, _UNKNOWN **, CGFloat, CGFloat, CGFloat, CGFloat))v24[1])(&v65, &v57, v28, v56, v23, v24, a2, a3, a4, a5);
        a2 = v65;
        a3 = v66;
        a4 = v67;
        a5 = v68;
        char v39 = v69;
        goto LABEL_17;
      }
    }
    v71.origin.CGFloat x = a2;
    v71.origin.CGFloat y = a3;
    v71.size.CGFloat width = a4;
    v71.size.CGFloat height = a5;
    double result = (void *)CGRectIsNull(v71);
    if (result)
    {
      char v39 = 6;
      a2 = 0.0;
      a3 = 0.0;
      a4 = 0.0;
      a5 = 0.0;
    }
    else
    {
      char v39 = 0;
    }
  }
  else
  {
    v70.origin.CGFloat x = a2;
    v70.origin.CGFloat y = a3;
    v70.size.CGFloat width = a4;
    v70.size.CGFloat height = a5;
    double result = (void *)CGRectIsNull(v70);
    if (result)
    {
      a2 = 0.0;
      a3 = 0.0;
      a4 = 0.0;
      a5 = 0.0;
      char v39 = 6;
    }
    else
    {
      char v39 = 0;
    }
  }
LABEL_17:
  *(CGFloat *)a1 = a2;
  *(CGFloat *)(a1 + 8) = a3;
  *(CGFloat *)(a1 + 16) = a4;
  *(CGFloat *)(a1 + 24) = a5;
  *(unsigned char *)(a1 + 32) = v39;
  return result;
}

BOOL protocol witness for Shape.path(in:) in conformance Rectangle@<W0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  BOOL result = CGRectIsNull(*(CGRect *)&a2);
  double v11 = 0.0;
  if (result) {
    double v12 = 0.0;
  }
  else {
    double v12 = a2;
  }
  if (result) {
    double v13 = 0.0;
  }
  else {
    double v13 = a3;
  }
  if (result) {
    double v14 = 0.0;
  }
  else {
    double v14 = a4;
  }
  if (!result) {
    double v11 = a5;
  }
  *(double *)a1 = v12;
  *(double *)(a1 + 8) = v13;
  if (result) {
    char v15 = 6;
  }
  else {
    char v15 = 0;
  }
  *(double *)(a1 + 16) = v14;
  *(double *)(a1 + 24) = v11;
  *(unsigned char *)(a1 + 32) = v15;
  return result;
}

uint64_t GeometryProxy.environment.getter@<X0>(void *a1@<X8>)
{
  specialized static Update.begin()();
  if (AGWeakAttributeGetAttribute() == *MEMORY[0x263F288F8])
  {
    *a1 = 0;
    a1[1] = 0;
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v2 = *(void (**)(void *))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue2.shared) + 0x68);
    uint64_t v3 = static CoreGlue2.shared;
    v2(a1);
  }
  else
  {
    AGWeakAttributeGetAttribute();
    Inputuint64_t Value = (uint64_t *)AGGraphGetInputValue();
    uint64_t v6 = *InputValue;
    uint64_t v5 = InputValue[1];
    *a1 = v6;
    a1[1] = v5;
    swift_retain();
    swift_retain();
  }
  return static Update.end()();
}

uint64_t _ShapeView.sizeThatFits(in:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a2 + 32) + 48))(*(void *)a1, *(unsigned __int8 *)(a1 + 8), *(void *)(a1 + 16));
}

uint64_t LeafLayoutEngine.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a3 + *(int *)(type metadata accessor for LeafLayoutEngine() + 36);
  *(_OWORD *)uint64_t v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(unsigned char *)(v6 + 48) = 1;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(unsigned char *)(v6 + 104) = 1;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 128) = 0u;
  *(_OWORD *)(v6 + 144) = 0u;
  *(unsigned char *)(v6 + 160) = 1;
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32);

  return v7(a3, a1, a2);
}

uint64_t type metadata accessor for LeafLayoutEngine()
{
  return __swift_instantiateGenericMetadata();
}

double protocol witness for ShapeStyledLeafView.shape(in:) in conformance _ShapeView<A, B>(uint64_t a1, uint64_t a2, double a3)
{
  return 0.0;
}

double _ShapeView.shape(in:)(uint64_t a1, uint64_t a2, double a3)
{
  Shape.effectivePath(in:)(*(void *)(a2 + 16), *(void *)(a2 + 32), (uint64_t)v15, *(unint64_t *)&a3);
  uint64_t v6 = (unsigned __int8 *)(v3 + *(int *)(a2 + 56));
  int v7 = *v6;
  int v8 = v6[1];
  BOOL v9 = v7 == 0;
  uint64_t v10 = 256;
  if (v9) {
    uint64_t v10 = 0;
  }
  uint64_t v11 = v10 | v16;
  BOOL v9 = v8 == 0;
  uint64_t v12 = 0x10000;
  if (v9) {
    uint64_t v12 = 0;
  }
  long long v13 = v15[1];
  *(_OWORD *)a1 = v15[0];
  *(_OWORD *)(a1 + 16) = v13;
  *(void *)(a1 + 32) = v11 | v12;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  return 0.0;
}

__n128 protocol witness for Animatable.animatableData.getter in conformance CGPoint@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *v1;
  *a1 = *v1;
  return result;
}

uint64_t AnimatedShape.sizeThatFits(in:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a2 + 24) + 48))(*(void *)a1, *(unsigned __int8 *)(a1 + 8), *(void *)(a1 + 16));
}

uint64_t _ClipEffect.animatableData.getter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 24) + 8) + 24))(*(void *)(a1 + 16));
}

double protocol witness for ShapeStyledLeafView.shape(in:) in conformance AnimatedShape<A>(uint64_t a1, uint64_t a2, double a3)
{
  return 0.0;
}

double AnimatedShape.shape(in:)(uint64_t a1, uint64_t a2, double a3)
{
  Shape.effectivePath(in:)(*(void *)(a2 + 16), *(void *)(a2 + 24), (uint64_t)v15, *(unint64_t *)&a3);
  uint64_t v6 = (unsigned __int8 *)(v3 + *(int *)(a2 + 36));
  int v7 = *v6;
  int v8 = v6[1];
  BOOL v9 = v7 == 0;
  uint64_t v10 = 256;
  if (v9) {
    uint64_t v10 = 0;
  }
  uint64_t v11 = v10 | v16;
  BOOL v9 = v8 == 0;
  uint64_t v12 = 0x10000;
  if (v9) {
    uint64_t v12 = 0;
  }
  long long v13 = v15[1];
  *(_OWORD *)a1 = v15[0];
  *(_OWORD *)(a1 + 16) = v13;
  *(void *)(a1 + 32) = v11 | v12;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  return 0.0;
}

uint64_t protocol witness for Shape.sizeThatFits(_:) in conformance _StrokedShape<A>(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5)
{
  return _StrokedShape.sizeThatFits(_:)(a1, a2 & 1, a3, a4 & 1, a5);
}

uint64_t _StrokedShape.sizeThatFits(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(*(void *)(a5 + 24) + 48))();
}

double Shape.sizeThatFits(_:)(uint64_t a1, char a2)
{
  double result = *(double *)&a1;
  if (a2) {
    return 10.0;
  }
  return result;
}

uint64_t initializeWithCopy for Path(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned __int8 v7 = *(unsigned char *)(a2 + 32);
  outlined copy of Path.Storage(*(void *)a2, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  return a1;
}

uint64_t AnimatorState.update(_:at:environment:)(uint64_t a1, double *a2, unint64_t a3)
{
  uint64_t v4 = v3;
  int v8 = (void *)*v3;
  uint64_t v9 = *(void *)(*v3 + 80);
  uint64_t v10 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v10);
  uint64_t v66 = (uint64_t)&v56 - v11;
  uint64_t v12 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v13);
  MEMORY[0x270FA5388](v14);
  unsigned int v19 = (char *)&v56 - v18;
  double v20 = *a2;
  uint64_t v21 = v8[17];
  uint64_t v22 = v8[16];
  double v23 = *(double *)((char *)v3 + v22);
  if (*(double *)((char *)v3 + v21) + v23 * -0.5 >= *a2)
  {
    uint64_t v27 = v8[18];
LABEL_5:
    unint64_t v28 = (char *)v4 + v27;
    swift_beginAccess();
    unint64_t v29 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
    v29(v19, v28, v9);
    dispatch thunk of static AdditiveArithmetic.+= infix(_:_:)();
    unsigned int v30 = *(void (**)(char *, uint64_t))(v12 + 8);
    v30(v19, v9);
    unsigned int v31 = (char *)v4 + *(void *)(*v4 + 112);
    swift_beginAccess();
    v29(v19, v31, v9);
    dispatch thunk of static AdditiveArithmetic.-= infix(_:_:)();
    v30(v19, v9);
  }
  else
  {
    uint64_t v60 = v17;
    uint64_t v61 = v15;
    uint64_t v62 = v22;
    uint64_t v63 = v16;
    uint64_t v64 = v21;
    uint64_t v24 = v8[20];
    uint64_t v25 = *((unsigned __int8 *)v3 + v24);
    uint64_t v65 = a1;
    switch(v25)
    {
      case 1:
        *((unsigned char *)v3 + v24) = 2;
        if (one-time initialization token for shared != -1) {
          swift_once();
        }
        swift_beginAccess();
        unsigned int v33 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared) + 0x60);
        unsigned int v34 = static CoreGlue.shared;
        LOBYTE(v33) = v33();

        if (v33) {
          goto LABEL_21;
        }
        uint64_t v35 = *(void *)(*v4 + 120);
        *(double *)((char *)v4 + v64) = v20 + *(double *)((char *)v4 + v64) - *(double *)((char *)v4 + v35);
        *(double *)((char *)v4 + v35) = v20;
        uint64_t v27 = *(void *)(*v4 + 144);
        goto LABEL_5;
      case 2:
        if (v23 < 0.0166666667) {
          double v36 = 0.0333333333;
        }
        else {
          double v36 = v23 + v23;
        }
        if (v36 < v20 - *(double *)((char *)v3 + v8[15]))
        {
          unint64_t v59 = (void (*)(char *, uint64_t))v8[15];
          if (one-time initialization token for shared != -1) {
            swift_once();
          }
          swift_beginAccess();
          unsigned int v37 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared) + 0x60);
          double v38 = static CoreGlue.shared;
          LOBYTE(v37) = v37();

          if ((v37 & 1) == 0) {
            *(double *)((char *)v59 + (void)v4) = v20 - v36;
          }
        }
        char v26 = 3;
        goto LABEL_20;
      case 3:
        goto LABEL_21;
      default:
        *(double *)((char *)v3 + v8[15]) = v20;
        char v26 = 1;
LABEL_20:
        *((unsigned char *)v4 + v24) = v26;
LABEL_21:
        double v39 = v20 - *(double *)((char *)v4 + *(void *)(*v4 + 120));
        swift_beginAccess();
        v69[0] = v4[3];
        char v40 = *((unsigned char *)v4 + *(void *)(*v4 + 184));
        uint64_t v41 = v8[11];
        swift_bridgeObjectRetain();
        uint64_t v58 = HIDWORD(a3) & 1;
        uint64_t v42 = a3;
        AnimationContext.init(state:environment:isLogicallyComplete:)(v69, v40, (uint64_t)v67);
        swift_beginAccess();
        uint64_t v43 = v4[2];
        uint64_t v44 = (char *)v4 + *(void *)(*v4 + 112);
        swift_beginAccess();
        double v57 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
        v57(v19, v44, v9);
        swift_retain();
        uint64_t v45 = v66;
        v46.n128_f64[0] = v39;
        Animation.animate<A>(value:time:context:)((uint64_t)v19, (uint64_t)v67, v43, v9, v41, v66, v46);
        swift_release();
        unint64_t v59 = *(void (**)(char *, uint64_t))(v12 + 8);
        v59(v19, v9);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v45, 1, v9) == 1)
        {
          swift_bridgeObjectRelease();
          (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v45, v61);
          return 1;
        }
        unint64_t v47 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32);
        uint64_t v61 = v12;
        uint64_t v48 = v63;
        v47(v63, v45, v9);
        AnimatorState.updateListeners(isLogicallyComplete:time:environment:)(v68, v42 | (v58 << 32), v39);
        void v4[3] = v67[0];
        swift_bridgeObjectRelease();
        dispatch thunk of static AdditiveArithmetic.+= infix(_:_:)();
        v57(v19, v44, v9);
        dispatch thunk of static AdditiveArithmetic.-= infix(_:_:)();
        unsigned int v49 = v19;
        unsigned int v50 = (void (*)(uint64_t, uint64_t))v59;
        v59(v49, v9);
        unsigned int v51 = (char *)v4 + *(void *)(*v4 + 144);
        swift_beginAccess();
        (*(void (**)(char *, uint64_t, uint64_t))(v61 + 24))(v51, v48, v9);
        swift_endAccess();
        uint64_t v52 = v64;
        *(double *)((char *)v4 + v64) = v20;
        uint64_t v53 = v62;
        double v54 = *(double *)((char *)v4 + v62);
        if (v54 <= 0.0)
        {
          v50(v48, v9);
        }
        else
        {
          double v55 = round(v20 / v54);
          v50(v48, v9);
          *(double *)((char *)v4 + v52) = (v55 + 1.0) * *(double *)((char *)v4 + v53);
        }
        break;
    }
  }
  return 0;
}

Swift::Void __swiftcall AnimatorState.nextUpdate()()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v1 = *v0;
  uint64_t v8 = *(uint64_t *)((char *)v0 + *(void *)(*v0 + 136));
  double v2 = *(double *)((char *)v0 + *(void *)(v1 + 128));
  uint64_t v3 = (unsigned int *)((char *)v0 + *(void *)(v1 + 152));
  uint64_t v4 = *v3;
  unsigned __int8 v5 = *((unsigned char *)v3 + 4);
  uint64_t v6 = *(void (**)(uint64_t *, unint64_t, double))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared)
                                                                  + 0x58);
  unsigned __int8 v7 = static CoreGlue.shared;
  v6(&v8, v4 | ((unint64_t)v5 << 32), v2);
}

void *Animation.animate<A>(value:time:context:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, __n128 a7@<Q0>)
{
  void *(*v18)(_OWORD *__return_ptr, _OWORD *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v19;
  char v20;
  long long v21;
  _OWORD v22[2];
  _OWORD v23[2];
  char v24;

  double v9 = a7.n128_f64[0];
  if (a4 == MEMORY[0x263F8D538])
  {
    *(void *)&v22[0] = *(void *)a1;
    double result = (*(void *(**)(_OWORD *__return_ptr, _OWORD *, uint64_t, void, _UNKNOWN **, __n128))(*(void *)a3 + 120))(v23, v22, a2, MEMORY[0x263F8D538], &protocol witness table for Double, a7);
    char v16 = BYTE8(v23[0]);
    *(void *)a6 = *(void *)&v23[0];
    *(unsigned char *)(a6 + 8) = v16;
  }
  else
  {
    type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>();
    if (v14 == a4)
    {
      long long v17 = *(_OWORD *)(a1 + 16);
      v22[0] = *(_OWORD *)a1;
      v22[1] = v17;
      uint64_t v18 = *(void *(**)(_OWORD *__return_ptr, _OWORD *, uint64_t, uint64_t, uint64_t, double))(*(void *)a3 + 120);
      unsigned int v19 = _s7SwiftUI14AnimatablePairVy12CoreGraphics7CGFloatVAFGACyxq_GAA16VectorArithmeticAAWlTm_0(&lazy protocol witness table cache variable for type AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<AnimatablePair<CGFloat, CGFloat>, AnimatablePair<CGFloat, CGFloat>>);
      double result = v18(v23, v22, a2, a4, v19, v9);
      double v20 = v24;
      uint64_t v21 = v23[1];
      *(_OWORD *)a6 = v23[0];
      *(_OWORD *)(a6 + 16) = v21;
      *(unsigned char *)(a6 + 32) = v20;
    }
    else
    {
      return (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, double))(*(void *)a3 + 120))(a1, a2, a4, a5, v9);
    }
  }
  return result;
}

uint64_t AnimationContext.init(state:environment:isLogicallyComplete:)@<X0>(uint64_t *a1@<X0>, char a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t result = AGCreateWeakAttribute();
  *(void *)a3 = v5;
  *(void *)(a3 + 8) = result;
  *(unsigned char *)(a3 + 16) = 0;
  *(unsigned char *)(a3 + 17) = a2;
  return result;
}

double protocol witness for Shape.sizeThatFits(_:) in conformance Circle(uint64_t a1, char a2, uint64_t a3, char a4)
{
  double result = *(double *)&a3;
  double v5 = 10.0;
  if ((a4 & 1) == 0) {
    double v5 = *(double *)&a3;
  }
  if (*(double *)&a3 >= *(double *)&a1) {
    double result = *(double *)&a1;
  }
  if (a4) {
    double result = *(double *)&a1;
  }
  if (a2) {
    return v5;
  }
  return result;
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance _OpacityEffect(uint64_t a1, _OWORD *a2)
{
  long long v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t AnimatorState.addListeners(transaction:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = swift_retain();
  uint64_t v3 = specialized find<A>(_:key:)(v2);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 72);
    swift_retain();
    swift_release();
    if (!v4) {
      goto LABEL_7;
    }
    double v5 = (void *)(v0 + *(void *)(*(void *)v0 + 168));
    swift_beginAccess();
    uint64_t v6 = swift_retain();
    MEMORY[0x24C522D60](v6);
    if (*(void *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    uint64_t v7 = swift_endAccess();
    (*(void (**)(uint64_t))(*(void *)v4 + 88))(v7);
  }
  swift_release();
LABEL_7:
  uint64_t v8 = swift_retain();
  uint64_t v9 = specialized find<A>(_:key:)(v8);
  if (v9)
  {
    uint64_t v10 = *(void *)(v9 + 72);
    swift_retain();
    uint64_t result = swift_release();
    if (!v10) {
      return result;
    }
    uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 88))(result);
    if (*(unsigned char *)(v1 + *(void *)(*(void *)v1 + 184)))
    {
      (*(void (**)(uint64_t))(*(void *)v10 + 96))(v12);
    }
    else
    {
      uint64_t v13 = (void *)(v1 + *(void *)(*(void *)v1 + 176));
      swift_beginAccess();
      uint64_t v14 = swift_retain();
      MEMORY[0x24C522D60](v14);
      if (*(void *)((*v13 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v13 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_endAccess();
    }
  }
  return swift_release();
}

uint64_t protocol witness for Shape.sizeThatFits(_:) in conformance AnyShape(uint64_t a1, char a2)
{
  return (*(uint64_t (**)(uint64_t, void))(**(void **)v2 + 88))(a1, a2 & 1);
}

double _AnyShapeBox.sizeThatFits(_:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  uint64_t v8 = *v4;
  uint64_t v9 = *(void *)(*v4 + 136);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v12 = &v17[-v11];
  uint64_t v13 = (uint64_t)v4 + *(void *)(v8 + 152);
  swift_beginAccess();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v10 + 16))(v12, v13, v9);
  uint64_t v14 = *(double (**)(uint64_t))(*(void *)(v8 + 144) + 48);
  v17[16] = a2 & 1;
  v17[8] = a4 & 1;
  double v15 = v14(a1);
  (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v12, v9);
  return v15;
}

uint64_t one-time initialization function for zero()
{
  type metadata accessor for _ContiguousArrayStorage<(Spacing.Key, Spacing.Value)>();
  initedouble d = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2461C6AA0;
  *(void *)(inited + 32) = 0;
  *(unsigned char *)(inited + 40) = 1;
  *(void *)(inited + 88) = 0;
  *(_OWORD *)(inited + 48) = 0u;
  *(_OWORD *)(inited + 64) = 0u;
  *(unsigned char *)(inited + 80) = 0;
  *(unsigned char *)(inited + 96) = 3;
  *(void *)(inited + 144) = 0;
  *(unsigned char *)(inited + 152) = 0;
  *(void *)(inited + 200) = 0;
  *(_OWORD *)(inited + 104) = 0u;
  *(_OWORD *)(inited + 120) = 0u;
  *(unsigned char *)(inited + 136) = 0;
  *(_OWORD *)(inited + 160) = 0u;
  *(_OWORD *)(inited + 176) = 0u;
  *(unsigned char *)(inited + 192) = 0;
  *(unsigned char *)(inited + 208) = 2;
  *(unsigned char *)(inited + 248) = 0;
  *(_OWORD *)(inited + 232) = 0u;
  *(_OWORD *)(inited + 216) = 0u;
  unint64_t v1 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  uint64_t result = swift_setDeallocating();
  static Spacing.zero = v1;
  return result;
}

{
  uint64_t vars8;

  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  static ViewDimensions.zero = (uint64_t)static LayoutComputer.defaultValue;
  *(void *)algn_268EEAD78 = *(void *)algn_26B0F4178;
  xmmword_268EEAD80 = 0u;
  unk_268EEAD90 = 0u;

  return swift_retain();
}

{
  uint64_t vars8;

  if (one-time initialization token for zero != -1) {
    swift_once();
  }
  static ViewGeometry.zero = 0uLL;
  qword_268EEAD40 = static ViewDimensions.zero;
  unk_268EEAD48 = *(void *)algn_268EEAD78;
  xmmword_268EEAD50 = xmmword_268EEAD80;
  unk_268EEAD60 = unk_268EEAD90;

  return swift_retain();
}

{
  uint64_t vars8;

  if (one-time initialization token for zero != -1) {
    swift_once();
  }
  static ViewSpacing.zero = static Spacing.zero;
  byte_268EFC898 = 2;

  return swift_bridgeObjectRetain();
}

uint64_t ColorBox.__deallocating_deinit()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 160) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 176));

  return swift_deallocClassInstance();
}

SwiftUI::Spacing protocol witness for LayoutEngine.spacing() in conformance UnaryPositionAwareLayoutEngine<A>()
{
  return LayoutEngine.spacing()();
}

SwiftUI::Spacing __swiftcall LeafViewLayout.spacing()()
{
  return LeafViewLayout.spacing()();
}

SwiftUI::Spacing __swiftcall Spacing.init()()
{
  unint64_t v1 = v0;
  type metadata accessor for _ContiguousArrayStorage<(Spacing.Key, Spacing.Value)>();
  initedouble d = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2461C6AA0;
  if (one-time initialization token for edgeBelowText != -1) {
    swift_once();
  }
  *(void *)(inited + 32) = static Spacing.Category.edgeBelowText;
  *(unsigned char *)(inited + 40) = 0;
  long long v3 = 0uLL;
  *(_OWORD *)(inited + 48) = 0u;
  *(_OWORD *)(inited + 64) = 0u;
  *(unsigned char *)(inited + 80) = 0;
  if (one-time initialization token for edgeAboveText != -1)
  {
    swift_once();
    long long v3 = 0uLL;
  }
  *(void *)(inited + 88) = static Spacing.Category.edgeAboveText;
  *(unsigned char *)(inited + 96) = 2;
  *(_OWORD *)(inited + 104) = v3;
  *(_OWORD *)(inited + 120) = v3;
  *(unsigned char *)(inited + 136) = 0;
  if (one-time initialization token for edgeRightText != -1) {
    swift_once();
  }
  *(void *)(inited + 144) = static Spacing.Category.edgeRightText;
  *(unsigned char *)(inited + 152) = 1;
  long long v4 = 0uLL;
  *(_OWORD *)(inited + 160) = 0u;
  *(_OWORD *)(inited + 176) = 0u;
  *(unsigned char *)(inited + 192) = 0;
  if (one-time initialization token for edgeLeftText != -1)
  {
    swift_once();
    long long v4 = 0uLL;
  }
  *(void *)(inited + 200) = static Spacing.Category.edgeLeftText;
  *(unsigned char *)(inited + 208) = 3;
  *(_OWORD *)(inited + 216) = v4;
  *(_OWORD *)(inited + 232) = v4;
  *(unsigned char *)(inited + 248) = 0;
  unint64_t v5 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  result.minima._rawuint64_t Value = (void *)swift_setDeallocating();
  *unint64_t v1 = v5;
  return result;
}

Swift::UInt Spacing.distanceToSuccessorView(along:layoutDirection:preferring:)(char a1, unsigned char *a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = *v3;
  if (*a2) {
    char v6 = 1;
  }
  else {
    char v6 = 3;
  }
  if (*a2) {
    char v7 = 3;
  }
  else {
    char v7 = 1;
  }
  if (a1) {
    unsigned __int8 v8 = 2;
  }
  else {
    unsigned __int8 v8 = v6;
  }
  if (a1) {
    unsigned __int8 v9 = 0;
  }
  else {
    unsigned __int8 v9 = v7;
  }
  if (*(void *)(v5 + 16) >= *(void *)(v4 + 16))
  {
    uint64_t v14 = *a3;
    unsigned __int8 v13 = v9;
    unsigned __int8 v12 = v8;
    uint64_t v11 = v5;
  }
  else
  {
    uint64_t v14 = *v3;
    unsigned __int8 v13 = v8;
    unsigned __int8 v12 = v9;
    uint64_t v11 = v4;
  }
  return Spacing._distance(from:to:ofViewPreferring:)(&v13, &v12, &v11);
}

Swift::UInt Spacing._distance(from:to:ofViewPreferring:)(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t *a3)
{
  uint64_t v75 = type metadata accessor for FloatingPointRoundingRule();
  MEMORY[0x270FA5388](v75);
  uint64_t v74 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v9 = *a1;
  int v81 = *a2;
  uint64_t v10 = *a3;
  uint64_t v11 = *(void **)v3;
  unsigned __int8 v13 = (void *)(*(void *)v3 + 64);
  uint64_t v12 = *v13;
  char v14 = *(unsigned char *)(*(void *)v3 + 32);
  uint64_t v77 = 1;
  uint64_t v15 = 1 << v14;
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & v12;
  unint64_t v18 = (unint64_t)(v15 + 63) >> 6;
  unsigned int v73 = *MEMORY[0x263F8E218];
  char v72 = (void (**)(char *, void, uint64_t))(v7 + 104);
  CGRect v71 = (uint64_t (**)(char *, uint64_t))(v7 + 8);
  *(double *)&Swift::UInt result = COERCE_DOUBLE(swift_bridgeObjectRetain());
  double v20 = v13;
  int64_t v21 = v18;
  double v76 = 0.0;
  int64_t v22 = 0;
  while (v17)
  {
    unint64_t v23 = __clz(__rbit64(v17));
    v17 &= v17 - 1;
    unint64_t v24 = v23 | (v22 << 6);
LABEL_20:
    uint64_t v28 = v11[6] + 16 * v24;
    Swift::UInt result = *(Swift::UInt *)v28;
    int v29 = *(unsigned __int8 *)(v28 + 8);
    BOOL v30 = *(double *)&result != 0.0 && v29 == v9;
    if (v30)
    {
      if (*(void *)(v10 + 16))
      {
        uint64_t v31 = v11[7] + 40 * v24;
        double v32 = *(double *)v31;
        double v33 = *(double *)(v31 + 8);
        double v78 = *(double *)(v31 + 16);
        double v79 = *(double *)(v31 + 24);
        double v80 = v32;
        int v34 = *(unsigned __int8 *)(v31 + 32);
        int64_t v35 = v21;
        double v36 = v20;
        *(double *)&Swift::UInt result = COERCE_DOUBLE(specialized __RawDictionaryStorage.find<A>(_:)(result, v81));
        double v20 = v36;
        int64_t v21 = v35;
        if (v37)
        {
          uint64_t v38 = *(void *)(v10 + 56) + 40 * result;
          double v40 = *(double *)v38;
          double v39 = *(double *)(v38 + 8);
          double v42 = *(double *)(v38 + 16);
          double v41 = *(double *)(v38 + 24);
          int v43 = *(unsigned __int8 *)(v38 + 32);
          if (v34 == 1)
          {
            if (!v43)
            {
LABEL_47:
              double v44 = v40;
              goto LABEL_60;
            }
            if (v43 == 2)
            {
              double v69 = v39;
              double v68 = v40;
              if (one-time initialization token for introduced != -1)
              {
                double v54 = v41;
                swift_once();
                double v41 = v54;
              }
              double v70 = v41;
              uint64_t v67 = static _SemanticFeature_v5.introduced;
              if (one-time initialization token for forced != -1) {
                swift_once();
              }
              *(double *)&Swift::UInt result = COERCE_DOUBLE(swift_beginAccess());
              if (byte_26B0F44FC != 1)
              {
                double v44 = 0.0;
                int64_t v21 = v35;
                double v20 = v36;
                double v46 = v80;
                if (static Semantics.forced < v67) {
                  goto LABEL_60;
                }
LABEL_56:
                double v47 = v42;
                double v86 = v46;
                double v87 = v33;
                double v88 = v78;
                double v89 = v79;
                double v49 = v69;
                double v82 = v68;
                double v83 = v69;
                double v84 = v42;
                double v85 = v70;
                if ((Spacing.TextMetrics.isAlmostEqual(to:)(&v82) & 1) == 0) {
                  double v47 = v68 + v49 + v42 - v49 + v33 - v33 - v68;
                }
                double v48 = v79;
LABEL_59:
                unsigned int v50 = v74;
                uint64_t v51 = v75;
                (*v72)(v74, v73, v75);
                double v86 = v47;
                specialized FloatingPoint.round(_:toMultipleOf:)(v50, v48);
                double v44 = v86;
                *(double *)&Swift::UInt result = COERCE_DOUBLE((*v71)(v50, v51));
                int64_t v21 = v35;
                double v20 = v36;
                goto LABEL_60;
              }
              *(double *)&Swift::UInt result = COERCE_DOUBLE(dyld_program_sdk_at_least());
              double v44 = 0.0;
              int64_t v21 = v35;
              double v20 = v36;
              double v46 = v80;
              if (result) {
                goto LABEL_56;
              }
LABEL_60:
              double v52 = v76;
              if (v77) {
                double v52 = -INFINITY;
              }
              if (v52 <= v44) {
                double v52 = v44;
              }
              double v76 = v52;
              uint64_t v77 = 0;
            }
          }
          else
          {
            if (v34 != 2)
            {
              if (v43) {
                double v44 = v80;
              }
              else {
                double v44 = v80 + v40;
              }
              goto LABEL_60;
            }
            if (!v43) {
              goto LABEL_47;
            }
            if (v43 == 1)
            {
              double v69 = v39;
              double v68 = v40;
              if (one-time initialization token for introduced != -1)
              {
                double v53 = v41;
                swift_once();
                double v41 = v53;
              }
              double v70 = v41;
              uint64_t v67 = static _SemanticFeature_v5.introduced;
              if (one-time initialization token for forced != -1) {
                swift_once();
              }
              *(double *)&Swift::UInt result = COERCE_DOUBLE(swift_beginAccess());
              if (byte_26B0F44FC != 1)
              {
                double v44 = 0.0;
                int64_t v21 = v35;
                double v20 = v36;
                double v45 = v80;
                if (static Semantics.forced < v67) {
                  goto LABEL_60;
                }
LABEL_52:
                double v47 = v78;
                double v86 = v68;
                double v87 = v69;
                double v88 = v42;
                double v89 = v70;
                double v82 = v45;
                double v83 = v33;
                double v84 = v78;
                double v85 = v79;
                if ((Spacing.TextMetrics.isAlmostEqual(to:)(&v82) & 1) == 0) {
                  double v47 = v45 + v33 + v47 - v33 + v69 - v69 - v45;
                }
                double v48 = v70;
                goto LABEL_59;
              }
              *(double *)&Swift::UInt result = COERCE_DOUBLE(dyld_program_sdk_at_least());
              double v44 = 0.0;
              int64_t v21 = v35;
              double v20 = v36;
              double v45 = v80;
              if (result) {
                goto LABEL_52;
              }
              goto LABEL_60;
            }
          }
        }
      }
    }
  }
  int64_t v25 = v22 + 1;
  if (__OFADD__(v22, 1))
  {
    __break(1u);
LABEL_91:
    __break(1u);
    return result;
  }
  if (v25 >= v21) {
    goto LABEL_65;
  }
  unint64_t v26 = v20[v25];
  ++v22;
  if (v26) {
    goto LABEL_19;
  }
  int64_t v22 = v25 + 1;
  if (v25 + 1 >= v21) {
    goto LABEL_65;
  }
  unint64_t v26 = v20[v22];
  if (v26) {
    goto LABEL_19;
  }
  int64_t v22 = v25 + 2;
  if (v25 + 2 >= v21) {
    goto LABEL_65;
  }
  unint64_t v26 = v20[v22];
  if (v26)
  {
LABEL_19:
    unint64_t v17 = (v26 - 1) & v26;
    unint64_t v24 = __clz(__rbit64(v26)) + (v22 << 6);
    goto LABEL_20;
  }
  int64_t v27 = v25 + 3;
  if (v27 < v21)
  {
    unint64_t v26 = v20[v27];
    if (!v26)
    {
      while (1)
      {
        int64_t v22 = v27 + 1;
        if (__OFADD__(v27, 1)) {
          goto LABEL_91;
        }
        if (v22 >= v21) {
          goto LABEL_65;
        }
        unint64_t v26 = v20[v22];
        ++v27;
        if (v26) {
          goto LABEL_19;
        }
      }
    }
    int64_t v22 = v27;
    goto LABEL_19;
  }
LABEL_65:
  swift_release();
  if ((v77 & 1) == 0)
  {
    *(double *)&Swift::UInt result = v76;
    return result;
  }
  double v55 = 0.0;
  if (!v11[2] || (unint64_t v56 = specialized __RawDictionaryStorage.find<A>(_:)(0, v9), (v57 & 1) == 0))
  {
    BOOL v60 = 1;
    if (!*(void *)(v10 + 16)) {
      goto LABEL_82;
    }
    goto LABEL_75;
  }
  uint64_t v58 = v11[7] + 40 * v56;
  double v59 = *(double *)v58;
  LODWORD(v58) = *(unsigned __int8 *)(v58 + 32);
  BOOL v60 = v58 != 0;
  if (v58) {
    double v55 = 0.0;
  }
  else {
    double v55 = v59;
  }
  if (*(void *)(v10 + 16))
  {
LABEL_75:
    unint64_t v61 = specialized __RawDictionaryStorage.find<A>(_:)(0, v81);
    if ((v62 & 1) == 0) {
      goto LABEL_82;
    }
    uint64_t v63 = *(void *)(v10 + 56) + 40 * v61;
    Swift::UInt v64 = *(Swift::UInt *)v63;
    LODWORD(v63) = *(unsigned __int8 *)(v63 + 32);
    BOOL v30 = v63 == 0;
    BOOL v65 = v63 != 0;
    if (v30) {
      Swift::UInt result = v64;
    }
    else {
      *(double *)&Swift::UInt result = 0.0;
    }
    if (!v60) {
      goto LABEL_80;
    }
LABEL_83:
    if (v65) {
      return result;
    }
    double v55 = -INFINITY;
    goto LABEL_85;
  }
LABEL_82:
  *(double *)&Swift::UInt result = 0.0;
  BOOL v65 = 1;
  if (v60) {
    goto LABEL_83;
  }
LABEL_80:
  if (!v65)
  {
LABEL_85:
    double v66 = *(double *)&result;
    goto LABEL_86;
  }
  double v66 = -INFINITY;
LABEL_86:
  if (v55 > v66) {
    double v66 = v55;
  }
  *(double *)&Swift::UInt result = v66;
  return result;
}

uint64_t _ZStackLayout.spacing(subviews:cache:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 8);
  char v3 = *(unsigned char *)(a1 + 17);
  char v138 = *(unsigned char *)(a1 + 16);
  LODWORD(v139[0]) = *(_DWORD *)a1;
  v139[1] = v2;
  char v140 = v138;
  char v121 = v3;
  char v141 = v3;
  unint64_t v142 = 0;
  char v143 = closure #1 in _ZStackLayout.placeSubviews(in:proposal:subviews:cache:);
  uint64_t v144 = 0;
  swift_bridgeObjectRetain_n();
  *(double *)&unint64_t v4 = COERCE_DOUBLE(specialized LazyMapSequence.Iterator.next()());
  uint64_t v137 = v2;
  if (v5)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    double v6 = 0.0;
  }
  else
  {
    double v6 = *(double *)&v4;
    unint64_t v7 = v142;
    unint64_t v8 = *(void *)(v2 + 16);
    if (v142 != v8)
    {
      uint64_t v113 = v2 + 32;
      int v114 = *MEMORY[0x263F288F8];
      uint64_t v115 = (_DWORD *)(v113 + 12 * v142);
      while (1)
      {
        if (v138)
        {
          if ((v7 & 0x8000000000000000) != 0) {
            goto LABEL_188;
          }
          uint64_t v117 = v115;
          if (v7 >= v8) {
            goto LABEL_190;
          }
        }
        else
        {
          if ((v7 & 0x8000000000000000) != 0) {
            goto LABEL_189;
          }
          if (v7 >= v8) {
            goto LABEL_191;
          }
          uint64_t v117 = (_DWORD *)(v113 + 8 * v7);
        }
        if (v7 >= v8) {
          break;
        }
        if (*v117 == v114)
        {
          Inputuint64_t Value = &static LayoutComputer.defaultValue;
          if (one-time initialization token for defaultValue != -1)
          {
            swift_once();
            Inputuint64_t Value = &static LayoutComputer.defaultValue;
          }
        }
        else
        {
          Inputuint64_t Value = (long long *)AGGraphGetInputValue();
        }
        uint64_t v119 = *(void *)InputValue;
        uint64_t v120 = one-time initialization token for lockAssertionsAreEnabled;
        swift_retain();
        if (v120 != -1) {
          swift_once();
        }
        if (lockAssertionsAreEnabled)
        {
          if (one-time initialization token for _lock != -1) {
            swift_once();
          }
          if (!_MovableLockIsOwner(static Update._lock)) {
            goto LABEL_198;
          }
        }
        ++v7;
        double v116 = (*(double (**)(void))(*(void *)v119 + 88))();
        swift_release();
        if (v6 < v116) {
          double v6 = v116;
        }
        unint64_t v8 = *(void *)(v137 + 16);
        v115 += 3;
        if (v7 == v8) {
          goto LABEL_3;
        }
      }
LABEL_183:
      __break(1u);
LABEL_184:
      __break(1u);
LABEL_185:
      __break(1u);
LABEL_186:
      __break(1u);
LABEL_187:
      __break(1u);
LABEL_188:
      __break(1u);
LABEL_189:
      __break(1u);
LABEL_190:
      __break(1u);
LABEL_191:
      __break(1u);
LABEL_192:
      __break(1u);
LABEL_193:
      __break(1u);
LABEL_194:
      __break(1u);
LABEL_195:
      __break(1u);
      goto LABEL_196;
    }
LABEL_3:
    uint64_t v2 = v137;
    swift_bridgeObjectRelease_n();
  }
  *(double *)(swift_allocObject() + 16) = v6;
  unint64_t v9 = *(void *)(v2 + 16);
  swift_bridgeObjectRetain_n();
  swift_retain();
  if (v9)
  {
    unint64_t v10 = 0;
    uint64_t v11 = v2 + 32;
    int v12 = *MEMORY[0x263F288F8];
    unsigned __int8 v13 = (_DWORD *)(v2 + 32);
    while (1)
    {
      if (v138)
      {
        if (v10 >= v9) {
          goto LABEL_185;
        }
        char v14 = (_DWORD *)(v11 + 12 * v10);
      }
      else
      {
        char v14 = v13;
        if (v10 >= v9) {
          goto LABEL_184;
        }
      }
      if (*v14 == v12)
      {
        uint64_t v15 = &static LayoutComputer.defaultValue;
        if (one-time initialization token for defaultValue != -1)
        {
          swift_once();
          uint64_t v15 = &static LayoutComputer.defaultValue;
        }
      }
      else
      {
        uint64_t v15 = (long long *)AGGraphGetInputValue();
      }
      uint64_t v16 = *(void *)v15;
      uint64_t v17 = one-time initialization token for lockAssertionsAreEnabled;
      swift_retain();
      if (v17 != -1) {
        swift_once();
      }
      if (lockAssertionsAreEnabled)
      {
        if (one-time initialization token for _lock != -1) {
          swift_once();
        }
        if (!_MovableLockIsOwner(static Update._lock)) {
          goto LABEL_198;
        }
      }
      double v18 = (*(double (**)(void))(*(void *)v16 + 88))();
      swift_release();
      if (v18 == v6) {
        break;
      }
      unint64_t v9 = *(void *)(v137 + 16);
      if (v10 >= v9)
      {
        __break(1u);
LABEL_182:
        __break(1u);
        goto LABEL_183;
      }
      ++v10;
      v13 += 2;
      if (v10 == v9) {
        goto LABEL_26;
      }
    }
    unint64_t v9 = v10;
  }
LABEL_26:
  uint64_t v19 = v137;
  uint64_t v20 = *(void *)(v137 + 16);
  swift_release();
  swift_bridgeObjectRelease();
  if (v9 == v20)
  {
    if (one-time initialization token for zero == -1)
    {
LABEL_28:
      uint64_t v21 = static ViewSpacing.zero;
      char v22 = byte_268EFC898;
      swift_bridgeObjectRetain();
      swift_release();
LABEL_158:
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)a2 = v21;
      *(unsigned char *)(a2 + 8) = v22;
      return result;
    }
LABEL_196:
    swift_once();
    goto LABEL_28;
  }
  unint64_t v134 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  unint64_t v23 = *(void *)(v137 + 16);
  swift_bridgeObjectRetain();
  swift_retain();
  if (!v23)
  {
LABEL_157:
    swift_release_n();
    swift_bridgeObjectRelease();
    char v22 = v121;
    uint64_t v21 = v134;
    goto LABEL_158;
  }
  uint64_t v24 = 0;
  uint64_t v25 = v137 + 32;
  int v26 = *MEMORY[0x263F288F8];
LABEL_31:
  uint64_t v27 = v24;
  uint64_t v28 = (int *)(v25 + 8 * v24++);
  while (1)
  {
    unint64_t v31 = v24 - 1;
    if (v138)
    {
      if (v31 >= v23) {
        goto LABEL_186;
      }
      double v32 = (int *)(v137 + 32 + 12 * v27);
    }
    else
    {
      double v32 = v28;
      if (v31 >= v23) {
        goto LABEL_187;
      }
    }
    if (v31 >= v23) {
      goto LABEL_182;
    }
    int v33 = *v32;
    if (*v32 == v26)
    {
      int v34 = &static LayoutComputer.defaultValue;
      if (one-time initialization token for defaultValue != -1)
      {
        swift_once();
        int v34 = &static LayoutComputer.defaultValue;
      }
    }
    else
    {
      int v34 = (long long *)AGGraphGetInputValue();
    }
    uint64_t v35 = *(void *)v34;
    uint64_t v36 = one-time initialization token for lockAssertionsAreEnabled;
    swift_retain();
    if (v36 != -1) {
      swift_once();
    }
    if (lockAssertionsAreEnabled)
    {
      if (one-time initialization token for _lock != -1) {
        swift_once();
      }
      if (!_MovableLockIsOwner(static Update._lock)) {
        goto LABEL_198;
      }
    }
    double v37 = (*(double (**)(void))(*(void *)v35 + 88))();
    swift_release();
    if (v37 == v6) {
      break;
    }
LABEL_35:
    unint64_t v23 = *(void *)(v19 + 16);
    v28 += 2;
    ++v27;
    BOOL v100 = v24++ == v23;
    if (v100) {
      goto LABEL_157;
    }
  }
  if (one-time initialization token for all != -1) {
    swift_once();
  }
  int v38 = static AbsoluteEdge.Set.all;
  if (v33 == v26)
  {
    double v39 = &static LayoutComputer.defaultValue;
    if (one-time initialization token for defaultValue != -1)
    {
      swift_once();
      double v39 = &static LayoutComputer.defaultValue;
    }
  }
  else
  {
    double v39 = (long long *)AGGraphGetInputValue();
  }
  uint64_t v40 = *(void *)v39;
  if (lockAssertionsAreEnabled)
  {
    uint64_t v41 = one-time initialization token for _lock;
    swift_retain();
    if (v41 != -1) {
      swift_once();
    }
    uint64_t IsOwner = _MovableLockIsOwner(static Update._lock);
    if ((IsOwner & 1) == 0) {
      goto LABEL_198;
    }
  }
  else
  {
    uint64_t IsOwner = swift_retain();
  }
  (*(void (**)(void *__return_ptr, uint64_t))(*(void *)v40 + 112))(v139, IsOwner);
  swift_release();
  uint64_t v30 = v139[0];
  if (!v38)
  {
    swift_bridgeObjectRelease();
    goto LABEL_35;
  }
  int v136 = v26;
  uint64_t v42 = v139[0] + 64;
  uint64_t v43 = 1 << *(unsigned char *)(v139[0] + 32);
  if (v43 < 64) {
    uint64_t v44 = ~(-1 << v43);
  }
  else {
    uint64_t v44 = -1;
  }
  unint64_t v45 = v44 & *(void *)(v139[0] + 64);
  int64_t v46 = (unint64_t)(v43 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v47 = 0;
  uint64_t v48 = MEMORY[0x263F8EE78];
  while (1)
  {
    if (v45)
    {
      unint64_t v49 = __clz(__rbit64(v45));
      v45 &= v45 - 1;
      unint64_t v50 = v49 | (v47 << 6);
      goto LABEL_87;
    }
    int64_t v51 = v47 + 1;
    if (__OFADD__(v47, 1)) {
      goto LABEL_192;
    }
    int v26 = v136;
    if (v51 >= v46)
    {
LABEL_99:
      swift_release();
      uint64_t v64 = specialized _arrayForceCast<A, B>(_:)(v48);
      swift_release();
      BOOL v65 = (void *)v134;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v139[0] = v134;
      uint64_t v67 = *(void *)(v64 + 16);
      swift_bridgeObjectRetain();
      uint64_t v125 = v67;
      if (!v67)
      {
LABEL_156:
        unint64_t v134 = (unint64_t)v65;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        uint64_t v19 = v137;
        unint64_t v23 = *(void *)(v137 + 16);
        uint64_t v25 = v137 + 32;
        if (v23 == v24) {
          goto LABEL_157;
        }
        goto LABEL_31;
      }
      unint64_t v68 = 0;
      double v69 = (unsigned __int8 *)(v64 + 80);
      uint64_t v123 = v64;
      while (1)
      {
        if (v68 >= *(void *)(v64 + 16)) {
          goto LABEL_193;
        }
        Swift::UInt v77 = *((void *)v69 - 6);
        if (v77 == 1) {
          goto LABEL_156;
        }
        Swift::UInt8 v78 = *(v69 - 40);
        unint64_t v128 = v68;
        double v130 = *((double *)v69 - 4);
        double v132 = *((double *)v69 - 3);
        double v133 = *((double *)v69 - 2);
        double v135 = *((double *)v69 - 1);
        int v79 = *v69;
        unint64_t v81 = specialized __RawDictionaryStorage.find<A>(_:)(v77, v78);
        uint64_t v82 = v65[2];
        BOOL v83 = (v80 & 1) == 0;
        uint64_t v84 = v82 + v83;
        if (__OFADD__(v82, v83)) {
          goto LABEL_194;
        }
        char v85 = v80;
        if (v65[3] >= v84)
        {
          if (isUniquelyReferenced_nonNull_native)
          {
            BOOL v65 = (void *)v139[0];
            if (v80) {
              goto LABEL_117;
            }
          }
          else
          {
            specialized _NativeDictionary.copy()();
            BOOL v65 = (void *)v139[0];
            if (v85) {
              goto LABEL_117;
            }
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v84, isUniquelyReferenced_nonNull_native & 1);
          unint64_t v86 = specialized __RawDictionaryStorage.find<A>(_:)(v77, v78);
          if ((v85 & 1) != (v87 & 1)) {
            goto LABEL_199;
          }
          unint64_t v81 = v86;
          BOOL v65 = (void *)v139[0];
          if (v85)
          {
LABEL_117:
            uint64_t v88 = v65[7] + 40 * v81;
            double v89 = *(double *)v88;
            double v90 = *(double *)(v88 + 8);
            double v92 = *(double *)(v88 + 16);
            double v91 = *(double *)(v88 + 24);
            unint64_t v76 = *(unsigned __int8 *)(v88 + 32);
            if (v79)
            {
              uint64_t v64 = v123;
              if (v79 == 1)
              {
                int v26 = v136;
                unint64_t v93 = v128;
                double v72 = v130;
                double v74 = v133;
                double v75 = v135;
                double v73 = v132;
                if (v76 == 1)
                {
                  double v94 = v130;
                  double v95 = v132;
                  double v96 = v133;
                  double v97 = *(double *)v88;
                  double v98 = *(double *)(v88 + 8);
                  double v99 = *(double *)(v88 + 16);
                  BOOL v100 = v130 == v89 && v132 == v90;
                  if (!v100 || v133 != v92 || v135 != v91) {
                    goto LABEL_145;
                  }
                  LOBYTE(v76) = 1;
LABEL_106:
                  *(double *)uint64_t v88 = v72;
                  *(double *)(v88 + 8) = v73;
                  *(double *)(v88 + 16) = v74;
                  *(double *)(v88 + 24) = v75;
                  *(unsigned char *)(v88 + 32) = v76;
                  goto LABEL_107;
                }
                unint64_t v70 = 1;
LABEL_102:
                BOOL v71 = v70 < v76;
LABEL_103:
                if (v71)
                {
                  double v72 = *(double *)v88;
                  double v73 = *(double *)(v88 + 8);
                  double v74 = *(double *)(v88 + 16);
                  double v75 = *(double *)(v88 + 24);
                }
                else
                {
                  LOBYTE(v76) = v79;
                }
                goto LABEL_106;
              }
              int v26 = v136;
              unint64_t v93 = v128;
              double v72 = v130;
              double v74 = v133;
              double v75 = v135;
              double v73 = v132;
              if (v76 != 2)
              {
                unint64_t v70 = 2;
                goto LABEL_102;
              }
              double v94 = v130;
              double v95 = v132;
              double v96 = v133;
              double v97 = *(double *)v88;
              double v98 = *(double *)(v88 + 8);
              double v99 = *(double *)(v88 + 16);
              if (v130 == v89 && v132 == v90 && v133 == v92 && v135 == v91)
              {
                LOBYTE(v76) = 2;
                goto LABEL_106;
              }
LABEL_145:
              BOOL v106 = v94 + v95 + v96 < v97 + v98 + v99;
            }
            else
            {
              uint64_t v64 = v123;
              if (*(unsigned char *)(v88 + 32))
              {
                unint64_t v70 = 0;
                int v26 = v136;
                unint64_t v93 = v128;
                double v72 = v130;
                double v74 = v133;
                double v75 = v135;
                double v73 = v132;
                goto LABEL_102;
              }
              unint64_t v93 = v128;
              double v72 = v130;
              BOOL v106 = v130 < v89;
              int v26 = v136;
              double v74 = v133;
              double v75 = v135;
              double v73 = v132;
              if (v130 == v89)
              {
                LOBYTE(v76) = 0;
                goto LABEL_106;
              }
            }
            BOOL v71 = v106;
            goto LABEL_103;
          }
        }
        v65[(v81 >> 6) + 8] |= 1 << v81;
        uint64_t v107 = v65[6] + 16 * v81;
        *(void *)uint64_t v107 = v77;
        *(unsigned char *)(v107 + 8) = v78;
        uint64_t v108 = v65[7] + 40 * v81;
        *(double *)uint64_t v108 = v130;
        *(double *)(v108 + 8) = v132;
        *(double *)(v108 + 16) = v133;
        *(double *)(v108 + 24) = v135;
        *(unsigned char *)(v108 + 32) = v79;
        uint64_t v109 = v65[2];
        BOOL v110 = __OFADD__(v109, 1);
        uint64_t v111 = v109 + 1;
        if (v110) {
          goto LABEL_195;
        }
        v65[2] = v111;
        int v26 = v136;
        uint64_t v64 = v123;
        unint64_t v93 = v128;
LABEL_107:
        unint64_t v68 = v93 + 1;
        v69 += 56;
        char isUniquelyReferenced_nonNull_native = 1;
        if (v125 == v68) {
          goto LABEL_156;
        }
      }
    }
    unint64_t v52 = *(void *)(v42 + 8 * v51);
    ++v47;
    if (v52) {
      goto LABEL_86;
    }
    int64_t v47 = v51 + 1;
    if (v51 + 1 >= v46) {
      goto LABEL_99;
    }
    unint64_t v52 = *(void *)(v42 + 8 * v47);
    if (v52) {
      goto LABEL_86;
    }
    int64_t v47 = v51 + 2;
    if (v51 + 2 >= v46) {
      goto LABEL_99;
    }
    unint64_t v52 = *(void *)(v42 + 8 * v47);
    if (v52) {
      goto LABEL_86;
    }
    int64_t v47 = v51 + 3;
    if (v51 + 3 >= v46) {
      goto LABEL_99;
    }
    unint64_t v52 = *(void *)(v42 + 8 * v47);
    if (v52) {
      goto LABEL_86;
    }
    int64_t v47 = v51 + 4;
    if (v51 + 4 >= v46) {
      goto LABEL_99;
    }
    unint64_t v52 = *(void *)(v42 + 8 * v47);
    if (v52) {
      goto LABEL_86;
    }
    int64_t v53 = v51 + 5;
    if (v53 >= v46) {
      goto LABEL_99;
    }
    unint64_t v52 = *(void *)(v42 + 8 * v53);
    if (!v52) {
      break;
    }
    int64_t v47 = v53;
LABEL_86:
    unint64_t v45 = (v52 - 1) & v52;
    unint64_t v50 = __clz(__rbit64(v52)) + (v47 << 6);
LABEL_87:
    uint64_t v54 = *(void *)(v30 + 48) + 16 * v50;
    unsigned int v55 = *(unsigned __int8 *)(v54 + 8);
    if (v55 - 9 < 0xEF) {
      goto LABEL_92;
    }
    if ((v55 & 0x80) != 0)
    {
      if (v55 <= 0xF8) {
        goto LABEL_92;
      }
      int v56 = 0;
    }
    else
    {
      if (v55 >= 8) {
        goto LABEL_92;
      }
      int v56 = 1 << v55;
    }
    if ((v56 & ~v38) != 0) {
      continue;
    }
LABEL_92:
    uint64_t v57 = *(void *)v54;
    uint64_t v58 = *(void *)(v30 + 56) + 40 * v50;
    uint64_t v59 = *(void *)v58;
    uint64_t v127 = *(void *)(v58 + 16);
    uint64_t v129 = *(void *)(v58 + 8);
    uint64_t v124 = *(void *)(v58 + 24);
    char v122 = *(unsigned char *)(v58 + 32);
    char v60 = swift_isUniquelyReferenced_nonNull_native();
    v139[0] = v48;
    uint64_t v131 = v59;
    if ((v60 & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v48 + 16) + 1, 1);
      uint64_t v48 = v139[0];
    }
    unint64_t v62 = *(void *)(v48 + 16);
    unint64_t v61 = *(void *)(v48 + 24);
    if (v62 >= v61 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v61 > 1, v62 + 1, 1);
      uint64_t v48 = v139[0];
    }
    *(void *)(v48 + 16) = v62 + 1;
    uint64_t v63 = v48 + 56 * v62;
    *(void *)(v63 + 32) = v57;
    *(unsigned char *)(v63 + 40) = v55;
    *(void *)(v63 + 48) = v131;
    *(void *)(v63 + 56) = v129;
    *(void *)(v63 + 64) = v127;
    *(void *)(v63 + 72) = v124;
    *(unsigned char *)(v63 + 80) = v122;
    uint64_t v42 = v30 + 64;
  }
  while (1)
  {
    int64_t v47 = v53 + 1;
    if (__OFADD__(v53, 1)) {
      break;
    }
    if (v47 >= v46) {
      goto LABEL_99;
    }
    unint64_t v52 = *(void *)(v42 + 8 * v47);
    ++v53;
    if (v52) {
      goto LABEL_86;
    }
  }
  __break(1u);
LABEL_198:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_199:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t _FlexFrameLayout.spacing(in:child:)@<X0>(uint64_t a1@<X0>, int *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v36 = *MEMORY[0x263EF8340];
  Swift::UInt32 v6 = *(_DWORD *)(a1 + 8);
  int v7 = *a2;
  uint64_t v18 = *(void *)(a2 + 1);
  if (one-time initialization token for introduced != -1) {
    swift_once();
  }
  unsigned int v8 = static _SemanticFeature_v3.introduced;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC == 1)
  {
    if ((dyld_program_sdk_at_least() & 1) == 0)
    {
LABEL_10:
      if (v18 == *MEMORY[0x263F288F8])
      {
        if (one-time initialization token for defaultValue != -1) {
          swift_once();
        }
        Inputuint64_t Value = (uint64_t *)&static LayoutComputer.defaultValue;
      }
      else
      {
        Inputuint64_t Value = (uint64_t *)AGGraphGetInputValue();
      }
      uint64_t v10 = *InputValue;
      uint64_t v11 = one-time initialization token for lockAssertionsAreEnabled;
      swift_retain();
      if (v11 != -1) {
        swift_once();
      }
      if (!lockAssertionsAreEnabled) {
        goto LABEL_21;
      }
      if (one-time initialization token for _lock != -1) {
        swift_once();
      }
      if (_MovableLockIsOwner(static Update._lock))
      {
LABEL_21:
        (*(void (**)(void))(*(void *)v10 + 112))();
        return swift_release();
      }
      goto LABEL_40;
    }
  }
  else if (static Semantics.forced < v8)
  {
    goto LABEL_10;
  }
  int v19 = v7;
  uint64_t v20 = v18;
  if (LayoutProxy.requiresSpacingProjection.getter()) {
    goto LABEL_10;
  }
  if (v18 == *MEMORY[0x263F288F8])
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    unsigned __int8 v13 = (uint64_t *)&static LayoutComputer.defaultValue;
  }
  else
  {
    unsigned __int8 v13 = (uint64_t *)AGGraphGetInputValue();
  }
  uint64_t v14 = *v13;
  uint64_t v15 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v15 != -1) {
    swift_once();
  }
  if (lockAssertionsAreEnabled)
  {
    if (one-time initialization token for _lock != -1) {
      swift_once();
    }
    if (!_MovableLockIsOwner(static Update._lock))
    {
LABEL_40:
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v14 + 112))(&v21);
  swift_release();
  outlined init with take of CGFloat?(v4 + 48, (uint64_t)v29);
  outlined init with take of CGFloat?((uint64_t)v29, (uint64_t)v30);
  if (v30[8] == 1)
  {
    outlined init with take of CGFloat?(v4 + 64, (uint64_t)v28);
    outlined init with take of CGFloat?((uint64_t)v28, (uint64_t)v31);
    if (v31[8] == 1)
    {
      outlined init with take of CGFloat?(v4 + 80, (uint64_t)v27);
      outlined init with take of CGFloat?((uint64_t)v27, (uint64_t)v32);
    }
  }
  outlined init with take of CGFloat?(v4, (uint64_t)v26);
  outlined init with take of CGFloat?((uint64_t)v26, (uint64_t)v33);
  if (v33[8] == 1)
  {
    outlined init with take of CGFloat?(v4 + 16, (uint64_t)v25);
    outlined init with take of CGFloat?((uint64_t)v25, (uint64_t)v34);
    if (v34[8] == 1)
    {
      outlined init with take of CGFloat?(v4 + 32, (uint64_t)v24);
      outlined init with take of CGFloat?((uint64_t)v24, (uint64_t)v35);
    }
  }
  uint64_t KeyPath = swift_getKeyPath();
  Swift::UInt32 v22 = v6;
  uint64_t v23 = KeyPath;
  type metadata accessor for CGFloat?(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentFetch<LayoutDirection>, (uint64_t)&type metadata for LayoutDirection, (uint64_t (*)(void, uint64_t))type metadata accessor for EnvironmentFetch);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v6);
  type metadata accessor for KeyPath<EnvironmentValues, LayoutDirection>();
  swift_retain();
  dispatch thunk of Hashable.hash(into:)();
  Hasher._finalize()();
  _s7SwiftUI16EnvironmentFetch33_BA60BF7120E939C5C25B2A488163D4ACLLVyAA15LayoutDirectionOGADyxG14AttributeGraph4RuleAAWlTm_1(&lazy protocol witness table cache variable for type EnvironmentFetch<LayoutDirection> and conformance EnvironmentFetch<A>);
  LOBYTE(v19) = 0;
  _s7SwiftUI16EnvironmentFetch33_BA60BF7120E939C5C25B2A488163D4ACLLVyAA15LayoutDirectionOGADyxG14AttributeGraph4RuleAAWlTm_1(&lazy protocol witness table cache variable for type EnvironmentFetch<LayoutDirection> and conformance EnvironmentFetch<A>);
  char v17 = *(unsigned char *)static Rule<>._cachedValue(options:owner:hashValue:bodyPtr:update:)();
  swift_release_n();
  LOBYTE(v19) = v17;
  AbsoluteEdge.Set.init(_:layoutDirection:)((unsigned __int8 *)&v19, &v22);
  uint64_t result = (uint64_t)Spacing.reset(_:)(&v22);
  *a3 = v21;
  return result;
}

double _FrameLayout.sizeThatFits(in:context:child:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  char v5 = *(unsigned char *)(a1 + 24);
  uint64_t v6 = *a3;
  int v7 = *((_DWORD *)a3 + 2);
  double v8 = *(double *)v3;
  int v9 = *(unsigned __int8 *)(v3 + 8);
  if (v9)
  {
    uint64_t v10 = *(void *)a1;
    char v11 = *(unsigned char *)(a1 + 8);
  }
  else
  {
    outlined init with take of CGFloat?(v3 + 16, (uint64_t)v22);
    outlined init with take of CGFloat?((uint64_t)v22, (uint64_t)&v23);
    if ((v24 & 1) == 0) {
      return v8;
    }
    char v11 = 0;
    uint64_t v10 = *(void *)&v8;
  }
  uint64_t v20 = v6;
  int v21 = v7;
  char v12 = *(unsigned char *)(v3 + 24);
  if (v12) {
    uint64_t v13 = v4;
  }
  else {
    uint64_t v13 = *(void *)(v3 + 16);
  }
  uint64_t v16 = v10;
  char v17 = v11;
  uint64_t v18 = v13;
  char v19 = v12 & v5;
  LayoutProxy.size(in:)(&v16);
  if (v9) {
    return v14;
  }
  return v8;
}

uint64_t outlined init with take of CGFloat?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for CGFloat?(0, (unint64_t *)&lazy cache variable for type metadata for CGFloat?, MEMORY[0x263F8EF38], MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for CGFloat?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type EnvironmentFetch<LayoutDirection> and conformance EnvironmentFetch<A>(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    _s7SwiftUI10EdgeInsetsVSgMaTm_0(255, a2, a3, (uint64_t (*)(void, uint64_t))type metadata accessor for EnvironmentFetch);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s7SwiftUI16EnvironmentFetch33_BA60BF7120E939C5C25B2A488163D4ACLLVyAA15LayoutDirectionOGADyxG14AttributeGraph4RuleAAWlTm_0(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for EnvironmentFetch<LayoutDirection>();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s7SwiftUI16EnvironmentFetch33_BA60BF7120E939C5C25B2A488163D4ACLLVyAA15LayoutDirectionOGADyxG14AttributeGraph4RuleAAWlTm_1(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CGFloat?(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentFetch<LayoutDirection>, (uint64_t)&type metadata for LayoutDirection, (uint64_t (*)(void, uint64_t))type metadata accessor for EnvironmentFetch);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s7SwiftUI16EnvironmentFetch33_BA60BF7120E939C5C25B2A488163D4ACLLVyAA15LayoutDirectionOGADyxG14AttributeGraph4RuleAAWlTm_2(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for _ContiguousArrayStorage<SafeAreaInsets.Element>(255, a2, a3, (uint64_t (*)(void, uint64_t))type metadata accessor for EnvironmentFetch);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *Spacing.reset(_:)(unsigned char *result)
{
  uint64_t v2 = (unint64_t *)*result;
  if (!*result) {
    return result;
  }
  uint64_t v3 = swift_bridgeObjectRetain();
  uint64_t v4 = specialized _NativeDictionary.filter(_:)(v3, v2);
  swift_bridgeObjectRelease();
  *unint64_t v1 = v4;
  uint64_t result = (unsigned char *)swift_bridgeObjectRelease();
  if (v2)
  {
    if (one-time initialization token for edgeBelowText != -1) {
      swift_once();
    }
    Swift::UInt v5 = static Spacing.Category.edgeBelowText;
    memset(v20, 0, sizeof(v20));
    char v21 = 0;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v18[0] = *v1;
    *unint64_t v1 = (unint64_t *)0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v20, v5, 0, isUniquelyReferenced_nonNull_native);
    *unint64_t v1 = *(unint64_t **)&v18[0];
    uint64_t result = (unsigned char *)swift_bridgeObjectRelease();
    if ((v2 & 4) == 0)
    {
LABEL_4:
      if ((v2 & 2) == 0) {
        goto LABEL_5;
      }
      goto LABEL_13;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_4;
  }
  if (one-time initialization token for edgeAboveText != -1) {
    swift_once();
  }
  Swift::UInt v7 = static Spacing.Category.edgeAboveText;
  memset(v18, 0, sizeof(v18));
  char v19 = 0;
  char v8 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v16[0] = *v1;
  *unint64_t v1 = (unint64_t *)0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v18, v7, 2, v8);
  *unint64_t v1 = *(unint64_t **)&v16[0];
  uint64_t result = (unsigned char *)swift_bridgeObjectRelease();
  if ((v2 & 2) == 0)
  {
LABEL_5:
    if ((v2 & 8) == 0) {
      return result;
    }
    goto LABEL_16;
  }
LABEL_13:
  if (one-time initialization token for edgeRightText != -1) {
    swift_once();
  }
  Swift::UInt v9 = static Spacing.Category.edgeRightText;
  memset(v16, 0, sizeof(v16));
  char v17 = 0;
  char v10 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v14[0] = *v1;
  *unint64_t v1 = (unint64_t *)0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v16, v9, 1, v10);
  *unint64_t v1 = *(unint64_t **)&v14[0];
  uint64_t result = (unsigned char *)swift_bridgeObjectRelease();
  if ((v2 & 8) != 0)
  {
LABEL_16:
    if (one-time initialization token for edgeLeftText != -1) {
      swift_once();
    }
    Swift::UInt v11 = static Spacing.Category.edgeLeftText;
    memset(v14, 0, sizeof(v14));
    char v15 = 0;
    char v12 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v13 = *v1;
    *unint64_t v1 = (unint64_t *)0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v14, v11, 3, v12);
    *unint64_t v1 = v13;
    return (unsigned char *)swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, Swift::UInt a2, char a3, char a4)
{
  Swift::UInt v5 = (void **)v4;
  char v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      uint64_t v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = v18[7] + 40 * v12;
    return outlined init with take of Spacing.Value(a1, v19);
  }
LABEL_13:

  return specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, char a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v6 = a5[6] + 16 * a1;
  *(void *)uint64_t v6 = a2;
  *(unsigned char *)(v6 + 8) = a3;
  uint64_t result = outlined init with take of Spacing.Value(a4, a5[7] + 40 * a1);
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

unint64_t *specialized _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe, unint64_t *a2)
{
  uint64_t v4 = isStackAllocationSafe;
  v11[1] = *MEMORY[0x263EF8340];
  char v5 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v6 = (unint64_t)((1 << v5) + 63) >> 6;
  size_t v7 = 8 * v6;
  if ((v5 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x270FA5388](isStackAllocationSafe);
    bzero((char *)v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    uint64_t v8 = specialized closure #1 in _NativeDictionary.filter(_:)((void *)((char *)v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0)), v6, v4, a2);
    if (v2) {
      swift_willThrow();
    }
    else {
      return v8;
    }
  }
  else
  {
    BOOL v9 = (void *)swift_slowAlloc();
    bzero(v9, v7);
    a2 = specialized closure #1 in _NativeDictionary.filter(_:)((unint64_t *)v9, v6, v4, a2);
    MEMORY[0x24C527CC0](v9, -1, -1);
  }
  return a2;
}

{
  uint64_t v2;
  uint64_t v4;
  char v5;
  unint64_t v6;
  size_t v7;
  unint64_t *v8;
  void *v9;
  void v11[2];

  uint64_t v4 = isStackAllocationSafe;
  v11[1] = *MEMORY[0x263EF8340];
  char v5 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v6 = (unint64_t)((1 << v5) + 63) >> 6;
  size_t v7 = 8 * v6;
  if ((v5 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x270FA5388](isStackAllocationSafe);
    bzero((char *)v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    uint64_t v8 = specialized closure #1 in _NativeDictionary.filter(_:)((void *)((char *)v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0)), v6, v4, a2);
    if (v2) {
      swift_willThrow();
    }
    else {
      return v8;
    }
  }
  else
  {
    BOOL v9 = (void *)swift_slowAlloc();
    bzero(v9, v7);
    a2 = specialized closure #1 in _NativeDictionary.filter(_:)((unint64_t *)v9, v6, v4, a2);
    MEMORY[0x24C527CC0](v9, -1, -1);
  }
  return a2;
}

unint64_t *specialized closure #1 in _NativeDictionary.filter(_:)(unint64_t *result, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t v5 = 0;
  int64_t v6 = 0;
  uint64_t v7 = a3 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(a3 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      unint64_t v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v13 = v12 | (v6 << 6);
      goto LABEL_20;
    }
    int64_t v14 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v14 >= v11) {
      return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v5, a3);
    }
    unint64_t v15 = *(void *)(v7 + 8 * v14);
    ++v6;
    if (!v15)
    {
      int64_t v6 = v14 + 1;
      if (v14 + 1 >= v11) {
        return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v5, a3);
      }
      unint64_t v15 = *(void *)(v7 + 8 * v6);
      if (!v15)
      {
        int64_t v6 = v14 + 2;
        if (v14 + 2 >= v11) {
          return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v5, a3);
        }
        unint64_t v15 = *(void *)(v7 + 8 * v6);
        if (!v15) {
          break;
        }
      }
    }
LABEL_19:
    unint64_t v10 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v6 << 6);
LABEL_20:
    unsigned int v17 = *(unsigned __int8 *)(*(void *)(a3 + 48) + 16 * v13 + 8);
    if (v17 - 9 >= 0xEF && (v17 & 0x80) == 0 && v17 <= 7 && ((1 << v17) & ~a4) != 0)
    {
      *(unint64_t *)((char *)result + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      if (__OFADD__(v5++, 1)) {
        goto LABEL_31;
      }
    }
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v11) {
    return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v5, a3);
  }
  unint64_t v15 = *(void *)(v7 + 8 * v16);
  if (v15)
  {
    int64_t v6 = v16;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v6 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v6 >= v11) {
      return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v5, a3);
    }
    unint64_t v15 = *(void *)(v7 + 8 * v6);
    ++v16;
    if (v15) {
      goto LABEL_19;
    }
  }
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

unint64_t StackLayout.UnmanagedImplementation.spacing()@<X0>(double a1@<X0>, void *a2@<X8>)
{
  double v2 = a1;
  if (!*(void *)(*(void *)(*(void *)&a1 + 88) + 16))
  {
    if (one-time initialization token for zero != -1) {
      goto LABEL_123;
    }
    goto LABEL_4;
  }
  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v4 = (void *)result;
LABEL_5:
  uint64_t v82 = *(void *)(*(void *)(*(void *)&v2 + 88) + 16);
  if (v82)
  {
    unint64_t v5 = 0;
    int v81 = *MEMORY[0x263F288F8];
    double v80 = v2;
    while (1)
    {
      LOBYTE(v95) = *(unsigned char *)(*(void *)&v2 + 97);
      AbsoluteEdge.Set.init(_:layoutDirection:)((unsigned __int8 *)&v95, &v96);
      int v6 = v96;
      uint64_t v7 = *(void *)(*(void *)&v2 + 88);
      unint64_t v8 = *(void *)(v7 + 16);
      if (*(unsigned char *)(*(void *)&v2 + 96))
      {
        if (v5 >= v8) {
          goto LABEL_120;
        }
        uint64_t v9 = v7 + 12 * v5;
      }
      else
      {
        if (v5 >= v8) {
          goto LABEL_121;
        }
        uint64_t v9 = v7 + 8 * v5;
      }
      uint64_t v84 = v4;
      if (*(_DWORD *)(v9 + 32) == v81)
      {
        Inputuint64_t Value = (uint64_t *)&static LayoutComputer.defaultValue;
        if (one-time initialization token for defaultValue != -1)
        {
          swift_once();
          Inputuint64_t Value = (uint64_t *)&static LayoutComputer.defaultValue;
        }
      }
      else
      {
        Inputuint64_t Value = (uint64_t *)AGGraphGetInputValue();
      }
      uint64_t v11 = *InputValue;
      uint64_t v12 = one-time initialization token for lockAssertionsAreEnabled;
      swift_retain();
      if (v12 != -1) {
        swift_once();
      }
      if (lockAssertionsAreEnabled)
      {
        if (one-time initialization token for _lock != -1) {
          swift_once();
        }
        if (!_MovableLockIsOwner(static Update._lock)) {
          break;
        }
      }
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v11 + 112))(&v95);
      swift_release();
      if (v6)
      {
        unint64_t v83 = v5;
        *(void *)&double v2 = v95 + 64;
        uint64_t v13 = 1 << *(unsigned char *)(v95 + 32);
        if (v13 < 64) {
          uint64_t v14 = ~(-1 << v13);
        }
        else {
          uint64_t v14 = -1;
        }
        unint64_t v15 = v14 & *(void *)(v95 + 64);
        int64_t v16 = (unint64_t)(v13 + 63) >> 6;
        uint64_t v17 = swift_bridgeObjectRetain();
        int64_t v18 = 0;
        uint64_t v19 = MEMORY[0x263F8EE78];
        uint64_t v85 = v17;
        while (1)
        {
          if (v15)
          {
            unint64_t v20 = __clz(__rbit64(v15));
            v15 &= v15 - 1;
            unint64_t v21 = v20 | (v18 << 6);
            goto LABEL_49;
          }
          int64_t v22 = v18 + 1;
          if (__OFADD__(v18, 1))
          {
            __break(1u);
LABEL_117:
            __break(1u);
LABEL_118:
            __break(1u);
LABEL_119:
            __break(1u);
LABEL_120:
            __break(1u);
LABEL_121:
            __break(1u);
            goto LABEL_122;
          }
          if (v22 >= v16) {
            goto LABEL_59;
          }
          unint64_t v23 = *(void *)(*(void *)&v2 + 8 * v22);
          ++v18;
          if (!v23)
          {
            int64_t v18 = v22 + 1;
            if (v22 + 1 >= v16) {
              goto LABEL_59;
            }
            unint64_t v23 = *(void *)(*(void *)&v2 + 8 * v18);
            if (!v23)
            {
              int64_t v18 = v22 + 2;
              if (v22 + 2 >= v16) {
                goto LABEL_59;
              }
              unint64_t v23 = *(void *)(*(void *)&v2 + 8 * v18);
              if (!v23)
              {
                int64_t v18 = v22 + 3;
                if (v22 + 3 >= v16) {
                  goto LABEL_59;
                }
                unint64_t v23 = *(void *)(*(void *)&v2 + 8 * v18);
                if (!v23)
                {
                  int64_t v18 = v22 + 4;
                  if (v22 + 4 >= v16) {
                    goto LABEL_59;
                  }
                  unint64_t v23 = *(void *)(*(void *)&v2 + 8 * v18);
                  if (!v23) {
                    break;
                  }
                }
              }
            }
          }
LABEL_48:
          unint64_t v15 = (v23 - 1) & v23;
          unint64_t v21 = __clz(__rbit64(v23)) + (v18 << 6);
LABEL_49:
          uint64_t v25 = *(void *)(v17 + 48) + 16 * v21;
          unsigned int v26 = *(unsigned __int8 *)(v25 + 8);
          if (v26 - 9 < 0xEF || (v26 & 0x80) != 0 || v26 > 7 || ((1 << v26) & ~v6) == 0)
          {
            uint64_t v27 = *(void *)v25;
            uint64_t v28 = *(void *)(v17 + 56) + 40 * v21;
            uint64_t v29 = *(void *)v28;
            uint64_t v30 = *(void *)(v28 + 8);
            uint64_t v88 = *(void *)(v28 + 24);
            uint64_t v90 = *(void *)(v28 + 16);
            char v86 = *(unsigned char *)(v28 + 32);
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v95 = v19;
            uint64_t v92 = v30;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v19 + 16) + 1, 1);
              uint64_t v19 = v95;
            }
            unint64_t v33 = *(void *)(v19 + 16);
            unint64_t v32 = *(void *)(v19 + 24);
            if (v33 >= v32 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1);
              uint64_t v19 = v95;
            }
            *(void *)(v19 + 16) = v33 + 1;
            uint64_t v34 = v19 + 56 * v33;
            *(void *)(v34 + 32) = v27;
            *(unsigned char *)(v34 + 40) = v26;
            *(void *)(v34 + 48) = v29;
            *(void *)(v34 + 56) = v92;
            *(void *)(v34 + 64) = v90;
            *(void *)(v34 + 72) = v88;
            *(unsigned char *)(v34 + 80) = v86;
            uint64_t v17 = v85;
          }
        }
        int64_t v24 = v22 + 5;
        if (v24 < v16)
        {
          unint64_t v23 = *(void *)(*(void *)&v2 + 8 * v24);
          if (!v23)
          {
            while (1)
            {
              int64_t v18 = v24 + 1;
              if (__OFADD__(v24, 1)) {
                break;
              }
              if (v18 >= v16) {
                goto LABEL_59;
              }
              unint64_t v23 = *(void *)(*(void *)&v2 + 8 * v18);
              ++v24;
              if (v23) {
                goto LABEL_48;
              }
            }
LABEL_122:
            __break(1u);
LABEL_123:
            swift_once();
LABEL_4:
            uint64_t v4 = (void *)static Spacing.zero;
            unint64_t result = swift_bridgeObjectRetain();
            goto LABEL_5;
          }
          int64_t v18 = v24;
          goto LABEL_48;
        }
LABEL_59:
        swift_release();
        uint64_t v35 = specialized _arrayForceCast<A, B>(_:)(v19);
        swift_release();
        uint64_t v4 = v84;
        char v36 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v95 = (uint64_t)v84;
        double v2 = *(double *)(v35 + 16);
        swift_bridgeObjectRetain();
        double v87 = v2;
        if (v2 != 0.0)
        {
          unint64_t v37 = 0;
          int v38 = (unsigned __int8 *)(v35 + 80);
          do
          {
            if (v37 >= *(void *)(v35 + 16)) {
              goto LABEL_117;
            }
            Swift::UInt v46 = *((void *)v38 - 6);
            if (v46 == 1) {
              break;
            }
            Swift::UInt8 v47 = *(v38 - 40);
            double v2 = *((double *)v38 - 4);
            unint64_t v89 = v37;
            double v91 = *((double *)v38 - 3);
            double v93 = *((double *)v38 - 2);
            double v94 = *((double *)v38 - 1);
            int v48 = *v38;
            unint64_t v50 = specialized __RawDictionaryStorage.find<A>(_:)(v46, v47);
            uint64_t v51 = v4[2];
            BOOL v52 = (v49 & 1) == 0;
            uint64_t v53 = v51 + v52;
            if (__OFADD__(v51, v52)) {
              goto LABEL_118;
            }
            char v54 = v49;
            if (v4[3] >= v53)
            {
              if (v36)
              {
                uint64_t v4 = (void *)v95;
                if (v49) {
                  goto LABEL_77;
                }
              }
              else
              {
                specialized _NativeDictionary.copy()();
                uint64_t v4 = (void *)v95;
                if (v54) {
                  goto LABEL_77;
                }
              }
            }
            else
            {
              specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v53, v36 & 1);
              unint64_t v55 = specialized __RawDictionaryStorage.find<A>(_:)(v46, v47);
              if ((v54 & 1) != (v56 & 1))
              {
                KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                __break(1u);
                goto LABEL_125;
              }
              unint64_t v50 = v55;
              uint64_t v4 = (void *)v95;
              if (v54)
              {
LABEL_77:
                uint64_t v57 = v4[7] + 40 * v50;
                double v58 = *(double *)v57;
                double v59 = *(double *)(v57 + 8);
                double v61 = *(double *)(v57 + 16);
                double v60 = *(double *)(v57 + 24);
                unint64_t v45 = *(unsigned __int8 *)(v57 + 32);
                if (v48)
                {
                  if (v48 == 1)
                  {
                    if (v45 == 1)
                    {
                      double v62 = v2;
                      double v42 = v91;
                      double v41 = v93;
                      double v63 = v91;
                      double v64 = v93;
                      double v40 = v94;
                      double v65 = *(double *)v57;
                      double v66 = *(double *)(v57 + 8);
                      double v67 = *(double *)(v57 + 16);
                      BOOL v70 = v2 == v58 && v91 == v59 && v93 == v61 && v94 == v60;
                      unint64_t v43 = v89;
                      if (!v70) {
                        goto LABEL_105;
                      }
                      LOBYTE(v45) = 1;
LABEL_66:
                      *(double *)uint64_t v57 = v2;
                      *(double *)(v57 + 8) = v42;
                      *(double *)(v57 + 16) = v41;
                      *(double *)(v57 + 24) = v40;
                      *(unsigned char *)(v57 + 32) = v45;
                      goto LABEL_67;
                    }
                    unint64_t v39 = 1;
LABEL_62:
                    double v41 = v93;
                    double v40 = v94;
                    unint64_t v43 = v89;
                    double v42 = v91;
                    BOOL v44 = v39 < v45;
                  }
                  else
                  {
                    if (v45 != 2)
                    {
                      unint64_t v39 = 2;
                      goto LABEL_62;
                    }
                    double v62 = v2;
                    double v42 = v91;
                    double v41 = v93;
                    double v63 = v91;
                    double v64 = v93;
                    double v40 = v94;
                    double v65 = *(double *)v57;
                    double v66 = *(double *)(v57 + 8);
                    double v67 = *(double *)(v57 + 16);
                    BOOL v73 = v2 == v58 && v91 == v59 && v93 == v61 && v94 == v60;
                    unint64_t v43 = v89;
                    if (v73)
                    {
                      LOBYTE(v45) = 2;
                      goto LABEL_66;
                    }
LABEL_105:
                    BOOL v44 = v62 + v63 + v64 < v65 + v66 + v67;
                  }
                }
                else
                {
                  if (*(unsigned char *)(v57 + 32))
                  {
                    unint64_t v39 = 0;
                    goto LABEL_62;
                  }
                  if (v2 == v58)
                  {
                    LOBYTE(v45) = 0;
                    double v41 = v93;
                    double v40 = v94;
                    unint64_t v43 = v89;
                    double v42 = v91;
                    goto LABEL_66;
                  }
                  BOOL v44 = v2 < v58;
                  double v41 = v93;
                  double v40 = v94;
                  unint64_t v43 = v89;
                  double v42 = v91;
                }
                if (v44)
                {
                  double v2 = *(double *)v57;
                  double v42 = *(double *)(v57 + 8);
                  double v41 = *(double *)(v57 + 16);
                  double v40 = *(double *)(v57 + 24);
                }
                else
                {
                  LOBYTE(v45) = v48;
                }
                goto LABEL_66;
              }
            }
            v4[(v50 >> 6) + 8] |= 1 << v50;
            uint64_t v74 = v4[6] + 16 * v50;
            *(void *)uint64_t v74 = v46;
            *(unsigned char *)(v74 + 8) = v47;
            uint64_t v75 = v4[7] + 40 * v50;
            *(double *)uint64_t v75 = v2;
            *(double *)(v75 + 8) = v91;
            *(double *)(v75 + 16) = v93;
            *(double *)(v75 + 24) = v94;
            *(unsigned char *)(v75 + 32) = v48;
            uint64_t v76 = v4[2];
            BOOL v77 = __OFADD__(v76, 1);
            uint64_t v78 = v76 + 1;
            if (v77) {
              goto LABEL_119;
            }
            v4[2] = v78;
            unint64_t v43 = v89;
LABEL_67:
            unint64_t v37 = v43 + 1;
            v38 += 56;
            char v36 = 1;
          }
          while (*(void *)&v87 != v37);
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t result = swift_bridgeObjectRelease_n();
        double v2 = v80;
        unint64_t v5 = v83;
      }
      else
      {
        unint64_t result = swift_bridgeObjectRelease();
        uint64_t v4 = v84;
      }
      if (++v5 == v82) {
        goto LABEL_115;
      }
    }
LABEL_125:
    unint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_115:
    *a2 = v4;
  }
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4, void (*a5)(void))
{
  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    a5(0);
    uint64_t v11 = (char *)swift_allocObject();
    size_t v12 = _swift_stdlib_malloc_size(v11);
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 56);
  }
  else
  {
    uint64_t v11 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  size_t v15 = 56 * v9;
  if (a1)
  {
    if (v11 != a4 || v13 >= &v14[v15]) {
      memmove(v13, v14, v15);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    memcpy(v13, v14, v15);
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<(key: Spacing.Key, value: Spacing.Value)>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(key: Spacing.Key, value: Spacing.Value)>)
  {
    type metadata accessor for (proposal: _ProposedSize, value: TextSizeVariant)(255, &lazy cache variable for type metadata for (key: Spacing.Key, value: Spacing.Value));
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(key: Spacing.Key, value: Spacing.Value)>);
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<(Spacing.Key, Spacing.Value)>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(Spacing.Key, Spacing.Value)>)
  {
    type metadata accessor for (Path, FillStyle)(255, (unint64_t *)&lazy cache variable for type metadata for (Spacing.Key, Spacing.Value));
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(Spacing.Key, Spacing.Value)>);
    }
  }
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(Swift::UInt a1, Swift::UInt8 a2)
{
  Hasher.init(_seed:)();
  if (a1)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(a1);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(a2);
  Swift::Int v4 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

{
  Swift::Int v4;
  uint64_t vars8;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(a2);
  Swift::Int v4 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, unsigned __int8 a2, uint64_t a3)
{
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t result = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = ~v5;
    do
    {
      uint64_t v8 = *(void *)(v3 + 48) + 16 * result;
      uint64_t v9 = *(void *)v8;
      int v10 = *(unsigned __int8 *)(v8 + 8);
      if (v9)
      {
        if (a1)
        {
          if (v9 == a1 && v10 == a2) {
            return result;
          }
        }
      }
      else if (!a1 && v10 == a2)
      {
        return result;
      }
      unint64_t result = (result + 1) & v7;
    }
    while (((*(void *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t result = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = ~v5;
    do
    {
      uint64_t v8 = *(void *)(v3 + 48) + 16 * result;
      uint64_t v9 = *(void *)v8;
      int v10 = *(unsigned __int8 *)(v8 + 8);
      if (v9 == a1 && v10 == a2) {
        break;
      }
      unint64_t result = (result + 1) & v7;
    }
    while (((*(void *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

void type metadata accessor for _DictionaryStorage<GestureDependency, Int>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for _DictionaryStorage();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t specialized _arrayForceCast<A, B>(_:)(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v16 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    type metadata accessor for (proposal: _ProposedSize, value: TextSizeVariant)(0, &lazy cache variable for type metadata for (key: Spacing.Key, value: Spacing.Value));
    type metadata accessor for (Path, FillStyle)(0, (unint64_t *)&lazy cache variable for type metadata for (Spacing.Key, Spacing.Value));
    uint64_t v4 = a1 + 40;
    do
    {
      swift_dynamicCast();
      uint64_t v2 = v16;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v16 + 16) + 1, 1);
        uint64_t v2 = v16;
      }
      unint64_t v6 = *(void *)(v2 + 16);
      unint64_t v5 = *(void *)(v2 + 24);
      if (v6 >= v5 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v6 + 1, 1);
        uint64_t v2 = v16;
      }
      *(void *)(v2 + 16) = v6 + 1;
      uint64_t v7 = v2 + 56 * v6;
      *(void *)(v7 + 32) = v9;
      v4 += 56;
      *(unsigned char *)(v7 + 40) = v10;
      *(void *)(v7 + 48) = v11;
      *(void *)(v7 + 56) = v12;
      *(void *)(v7 + 64) = v13;
      *(void *)(v7 + 72) = v14;
      *(unsigned char *)(v7 + 80) = v15;
      --v1;
    }
    while (v1);
  }
  return v2;
}

void type metadata accessor for (Path, FillStyle)(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v4) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

uint64_t LayoutProxy.requiresSpacingProjection.getter()
{
  if (*(_DWORD *)(v0 + 4) == *MEMORY[0x263F288F8])
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    Inputuint64_t Value = (uint64_t *)&static LayoutComputer.defaultValue;
  }
  else
  {
    Inputuint64_t Value = (uint64_t *)AGGraphGetInputValue();
  }
  uint64_t v2 = *InputValue;
  uint64_t v3 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v3 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_12;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (!_MovableLockIsOwner(static Update._lock))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_12:
    char v4 = (*(uint64_t (**)(void))(*(void *)v2 + 104))();
    swift_release();
    return v4 & 1;
  }
  return result;
}

uint64_t LayoutEngineBox.requiresSpacingProjection()(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 160);
  uint64_t v4 = *(void *)(v3 - 8);
  double v5 = MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v9 - v6;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16))((char *)&v9 - v6, (uint64_t)v1 + *(void *)(v2 + 176), v3, v5);
  LOBYTE(v2) = (*(uint64_t (**)(uint64_t))(*(void *)(v2 + 168) + 24))(v3);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  return v2 & 1;
}

void type metadata accessor for KeyPath<EnvironmentValues, LayoutDirection>()
{
  if (!lazy cache variable for type metadata for KeyPath<EnvironmentValues, LayoutDirection>)
  {
    unint64_t v0 = type metadata accessor for KeyPath();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for KeyPath<EnvironmentValues, LayoutDirection>);
    }
  }
}

void type metadata accessor for _DictionaryStorage<_ViewList_ID.Canonical, CanvasSymbols.Child>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for _DictionaryStorage();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Spacing.Key and conformance Spacing.Key()
{
  unint64_t result = lazy protocol witness table cache variable for type Spacing.Key and conformance Spacing.Key;
  if (!lazy protocol witness table cache variable for type Spacing.Key and conformance Spacing.Key)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Spacing.Key and conformance Spacing.Key);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Spacing.Key and conformance Spacing.Key;
  if (!lazy protocol witness table cache variable for type Spacing.Key and conformance Spacing.Key)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Spacing.Key and conformance Spacing.Key);
  }
  return result;
}

uint64_t Spacing.TextMetrics.isAlmostEqual(to:)(double *a1)
{
  double v2 = a1[1];
  double v3 = a1[2];
  double v4 = v1[1];
  double v5 = v1[2];
  if ((specialized FloatingPoint.isAlmostEqual(to:tolerance:)(*a1, 0.0000000149011612, *v1) & 1) == 0
    || (specialized FloatingPoint.isAlmostEqual(to:tolerance:)(v2, 0.0000000149011612, v4) & 1) == 0)
  {
    return 0;
  }

  return specialized FloatingPoint.isAlmostEqual(to:tolerance:)(v3, 0.0000000149011612, v5);
}

uint64_t specialized FloatingPoint.isAlmostEqual(to:tolerance:)(double a1, double a2, double a3)
{
  if ((~*(void *)&a3 & 0x7FF0000000000000) == 0 || (~*(void *)&a1 & 0x7FF0000000000000) == 0) {
    return specialized FloatingPoint.rescaledAlmostEqual(to:tolerance:)(a1, a2, a3);
  }
  double v5 = fabs(a3);
  double v6 = fabs(a1);
  if (v5 <= v6) {
    double v5 = v6;
  }
  if (v5 <= 2.22507386e-308) {
    double v5 = 2.22507386e-308;
  }
  return vabdd_f64(a3, a1) < v5 * a2;
}

uint64_t closure #1 in reduce #1 <A>(key:) in PreferenceValues.Entry.reduce(_:)(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(_DWORD *)(a2 + 16);
  uint64_t v5 = *(unsigned int *)(a1 + 16);
  if (v5 != -1 && v4 != 0)
  {
    if (v5) {
      BOOL v7 = v4 == -1;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      unsigned int v4 = merge32(_:_:)(v5, v4);
    }
    *(_DWORD *)(a1 + 16) = v4;
  }
  outlined init with copy of Any(a2 + 24, (uint64_t)&v9);
  swift_getAssociatedTypeWitness();
  return swift_dynamicCast();
}

uint64_t View.transformEnvironment<A>(_:transform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v7[0] = a1;
  v7[1] = a2;
  _OWORD v7[2] = a3;
  uint64_t v5 = type metadata accessor for _EnvironmentKeyTransformModifier();
  return View.modifier<A>(_:)(v7, a4, v5);
}

uint64_t ChildEnvironment.modifier.getter()
{
  type metadata accessor for _EnvironmentKeyTransformModifier();
  uint64_t v0 = *(void *)AGGraphGetValue();
  swift_retain();
  swift_retain();
  return v0;
}

uint64_t type metadata accessor for _EnvironmentKeyTransformModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Attribute.syncMainIfReferences<A>(do:)@<X0>(void (*a1)(void)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v28 = a1;
  uint64_t v29 = a2;
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v26 - v13;
  uint64_t v15 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v16);
  int64_t v18 = (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Value = AGGraphGetValue();
  char v21 = v20;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, Value, a3);
  if ((v21 & 2) != 0)
  {
    uint64_t v27 = a5;
    uint64_t v23 = *(void *)(a4 - 8);
    uint64_t v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56))(v14, 1, 1, a4);
    MEMORY[0x270FA5388](v24);
    *(&v26 - 6) = a3;
    *(&v26 - 5) = a4;
    uint64_t v25 = v28;
    *(&v26 - 4) = (uint64_t)v14;
    *(&v26 - 3) = (uint64_t)v25;
    *(&v26 - 2) = v29;
    *(&v26 - 1) = (uint64_t)v18;
    specialized static Update.syncMain(_:)(partial apply for closure #1 in Attribute.syncMainIfReferences<A>(do:), (uint64_t)(&v26 - 8));
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v11, v14, v8);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48))(v11, 1, a4);
    if (result == 1)
    {
      __break(1u);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v15 + 8))(v18, a3);
      (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(v27, v11, a4);
      return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    }
  }
  else
  {
    v28(v18);
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, a3);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ModifiedContent(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

uint64_t getEnumTagSinglePayload for _ConditionalContent(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
  if (v3 <= *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64)) {
    unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_22;
  }
  unint64_t v4 = v3 + 1;
  char v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    unsigned int v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      int v6 = *(_DWORD *)((char *)a1 + v4);
      if (!v6) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      int v6 = *(unsigned __int16 *)((char *)a1 + v4);
      if (!*(unsigned __int16 *)((char *)a1 + v4)) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_22:
      unsigned int v10 = *((unsigned __int8 *)a1 + v3);
      if (v10 >= 2) {
        return (v10 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v6 = *((unsigned __int8 *)a1 + v4);
  if (!*((unsigned char *)a1 + v4)) {
    goto LABEL_22;
  }
LABEL_14:
  int v9 = (v6 - 1) << v5;
  if (v4 > 3) {
    int v9 = 0;
  }
  if (v4)
  {
    if (v4 > 3) {
      LODWORD(v4) = 4;
    }
    switch((int)v4)
    {
      case 2:
        LODWORD(v4) = *a1;
        break;
      case 3:
        LODWORD(v4) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v4) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v4) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v4 | v9) + 255;
}

uint64_t getEnumTagSinglePayload for ConditionalMetadata(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t getEnumTagSinglePayload for TupleView(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

uint64_t specialized static Update.syncMain(_:)(uint64_t (*a1)(void), uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (objc_msgSend(self, sel_isMainThread)) {
    return a1();
  }
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  v8[0] = partial apply for thunk for @escaping @callee_guaranteed () -> ();
  v8[1] = v5;
  id v9 = (id)AGSubgraphGetCurrent();
  int CurrentAttribute = AGGraphGetCurrentAttribute();
  uint64_t v6 = one-time initialization token for _lock;
  swift_retain();
  if (v6 != -1) {
    swift_once();
  }
  _MovableLockSyncMain(static Update._lock, (uint64_t)v8, (void (*)(uint64_t))@objc closure #1 in closure #1 in closure #1 in static Update.syncMain(_:));
  swift_release();

  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

uint64_t partial apply for closure #1 in Attribute.syncMainIfReferences<A>(do:)()
{
  return closure #1 in Attribute.syncMainIfReferences<A>(do:)(*(void *)(v0 + 32), *(void (**)(uint64_t, double))(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t closure #1 in Attribute.syncMainIfReferences<A>(do:)(uint64_t a1, void (*a2)(uint64_t, double), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = *(void *)(v10 - 8);
  double v12 = MEMORY[0x270FA5388](v10);
  char v14 = (char *)&v16 - v13;
  a2(a4, v12);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(a6 - 8) + 56))(v14, 0, 1, a6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 40))(a1, v14, v10);
}

uint64_t getEnumTagSinglePayload for VStack(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  uint64_t v8 = ((v6 + 17) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v9 = 8 * v8;
  if (v8 <= 3)
  {
    unsigned int v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v8);
      if (!v10) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      int v10 = *(unsigned __int16 *)((char *)a1 + v8);
      if (!*(unsigned __int16 *)((char *)a1 + v8)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 17) & ~v6);
      }
      return 0;
    }
  }
  int v10 = *((unsigned __int8 *)a1 + v8);
  if (!*((unsigned char *)a1 + v8)) {
    goto LABEL_19;
  }
LABEL_11:
  int v12 = (v10 - 1) << v9;
  if (v8 > 3) {
    int v12 = 0;
  }
  if (v8)
  {
    if (v8 > 3) {
      LODWORD(v8) = 4;
    }
    switch((int)v8)
    {
      case 2:
        LODWORD(v8) = *a1;
        break;
      case 3:
        LODWORD(v8) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v8) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v8) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v8 | v12) + 1;
}

uint64_t partial apply for closure #1 in ChildEnvironment.updateValue()(uint64_t a1)
{
  return closure #1 in ChildEnvironment.updateValue()(a1, *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t closure #1 in ChildEnvironment.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  uint64_t v5 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  double v42 = (char *)&v39 - v10;
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v39 - v12;
  type metadata accessor for ObservationTracking._AccessList?();
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  int v19 = (char *)&v39 - v18;
  char v20 = *(void (**)(uint64_t))(a1 + 8);
  uint64_t CurrentAttribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    a1 = CurrentAttribute;
    double v40 = v13;
    if (one-time initialization token for lastestAccessLists == -1) {
      goto LABEL_3;
    }
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  double v41 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x263F8EE78];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v19, 1, 1, v5);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  unint64_t v43 = v19;
  uint64_t v23 = *(void *)(StatusReg + 848);
  *(void *)(StatusReg + 848) = v43;
  v20(a3);
  *(void *)(StatusReg + 848) = v23;
  uint64_t v24 = (uint64_t)v43;
  outlined init with copy of ObservationTracking._AccessList?((uint64_t)v43, (uint64_t)v16);
  p_cache = (void **)(&OBJC_METACLASS____TtC7SwiftUI9ViewGraph + 16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v16, 1, v5) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?((uint64_t)v16);
  }
  else
  {
    uint64_t v26 = v40;
    unint64_t v39 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
    v39(v40, v16, v5);
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v42, v26, v5);
    swift_beginAccess();
    uint64_t v27 = (char *)static ObservationRegistrar.lastestAccessLists;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v27;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v27 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v27 + 2) + 1, 1, (unint64_t)v27);
      static ObservationRegistrar.lastestAccessLists = v27;
    }
    unint64_t v30 = *((void *)v27 + 2);
    unint64_t v29 = *((void *)v27 + 3);
    if (v30 >= v29 >> 1)
    {
      uint64_t v27 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1, (unint64_t)v27);
      static ObservationRegistrar.lastestAccessLists = v27;
    }
    *((void *)v27 + 2) = v30 + 1;
    v39(&v27[((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v30], v42, v5);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v26, v5);
    p_cache = &OBJC_METACLASS____TtC7SwiftUI9ViewGraph.cache;
    uint64_t v24 = (uint64_t)v43;
  }
  outlined destroy of ObservationTracking._AccessList?(v24);
  unint64_t v31 = p_cache[338];
  uint64_t v32 = v31[2];
  if (v32)
  {
    uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
    uint64_t v33 = v6 + 16;
    uint64_t v34 = v35;
    char v36 = (char *)v31 + ((*(unsigned __int8 *)(v33 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 64));
    uint64_t v37 = *(void *)(v33 + 56);
    swift_bridgeObjectRetain();
    do
    {
      v34(v8, v36, v5);
      specialized installObservationSlow<A>(accessList:attribute:)((uint64_t)v8, a1);
      (*(void (**)(char *, uint64_t))(v33 - 8))(v8, v5);
      v36 += v37;
      --v32;
    }
    while (v32);
    swift_bridgeObjectRelease();
    p_cache = &OBJC_METACLASS____TtC7SwiftUI9ViewGraph.cache;
  }
  p_cache[338] = v41;
  return swift_bridgeObjectRelease();
}

uint64_t partial apply for closure #2 in HostPreferencesTransform.updateValue()(uint64_t *a1)
{
  return closure #2 in HostPreferencesTransform.updateValue()(a1, v1[4], v1[5], v1[2], v1[3]);
}

uint64_t closure #2 in HostPreferencesTransform.updateValue()(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = a1[1];
  uint64_t v10 = *a1;
  uint64_t v11 = v7;
  int v13 = merge32(_:_:)(*(unsigned int *)(a3 + 20), *(_DWORD *)(a3 + 16));
  v14[0] = swift_getAssociatedTypeWitness();
  FunctionTypeMetadatdouble a = swift_getFunctionTypeMetadata();
  PreferenceValues.Value.init(value:seed:)((uint64_t)&v10, &v13, FunctionTypeMetadata, (uint64_t)v14);
  uint64_t v10 = v14[0];
  uint64_t v11 = v14[1];
  int v12 = v15;
  swift_retain();
  PreferenceValues.modifyValue<A>(for:transform:)(a4, (uint64_t)&v10, a4, a5);
  return swift_release();
}

uint64_t merge32(_:_:)(uint64_t a1, unsigned int a2)
{
  unint64_t v2 = (a2 | (unint64_t)(a1 << 32)) + ~((unint64_t)a2 << 32);
  unint64_t v3 = (v2 ^ (v2 >> 22)) + ~((v2 ^ (v2 >> 22)) << 13);
  unint64_t v4 = (9 * (v3 ^ (v3 >> 8))) ^ ((9 * (v3 ^ (v3 >> 8))) >> 15);
  return ((v4 + ~(v4 << 27)) >> 31) ^ (v4 + ~(v4 << 27));
}

uint64_t PreferenceValues.Value.init(value:seed:)@<X0>(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v5 = *a2;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a4, a1);
  uint64_t result = type metadata accessor for PreferenceValues.Value();
  *(_DWORD *)(a4 + *(int *)(result + 28)) = v5;
  return result;
}

void storeEnumTagSinglePayload for TupleView(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 >= a2)
  {
    switch(v11)
    {
      case 1:
        a1[v8] = 0;
        if (a2) {
          goto LABEL_21;
        }
        break;
      case 2:
        *(_WORD *)&a1[v8] = 0;
        if (a2) {
          goto LABEL_21;
        }
        break;
      case 3:
LABEL_34:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v8] = 0;
        goto LABEL_20;
      default:
LABEL_20:
        if (a2)
        {
LABEL_21:
          uint64_t v16 = *(void (**)(void))(v6 + 56);
          v16();
        }
        break;
    }
  }
  else
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        break;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        break;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        break;
      default:
        return;
    }
  }
}

uint64_t getEnumTagSinglePayload for ZStack(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  uint64_t v8 = ((v6 + 16) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v9 = 8 * v8;
  if (v8 <= 3)
  {
    unsigned int v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v8);
      if (!v10) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      int v10 = *(unsigned __int16 *)((char *)a1 + v8);
      if (!*(unsigned __int16 *)((char *)a1 + v8)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 16) & ~v6);
      }
      return 0;
    }
  }
  int v10 = *((unsigned __int8 *)a1 + v8);
  if (!*((unsigned char *)a1 + v8)) {
    goto LABEL_19;
  }
LABEL_11:
  int v12 = (v10 - 1) << v9;
  if (v8 > 3) {
    int v12 = 0;
  }
  if (v8)
  {
    if (v8 > 3) {
      LODWORD(v8) = 4;
    }
    switch((int)v8)
    {
      case 2:
        LODWORD(v8) = *a1;
        break;
      case 3:
        LODWORD(v8) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v8) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v8) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v8 | v12) + 1;
}

uint64_t initializeWithCopy for _OverlayPreferenceModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_retain();
  return a1;
}

uint64_t getEnumTagSinglePayload for AnyStyleContextType(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t getEnumTagSinglePayload for _VariadicView.Tree(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

uint64_t storeEnumTagSinglePayload for SymbolVariants(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65283 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65283 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 16) + 1;
    *(_WORD *)uint64_t result = a2 - 253;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)(result + 1) = a2 + 3;
        break;
    }
  }
  return result;
}

unsigned char *partial apply for closure #1 in View.disabled(_:)(unsigned char *result)
{
  *result &= ~*(unsigned char *)(v1 + 16) & 1;
  return result;
}

uint64_t partial apply for closure #1 in PreferenceTransform.value.getter(uint64_t *a1)
{
  return closure #1 in PreferenceTransform.value.getter(a1, *(void *)(v1 + 32), *(void (**)(uint64_t, char *, uint64_t))(v1 + 40), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t closure #1 in PreferenceTransform.value.getter(uint64_t *a1, uint64_t a2, void (*a3)(uint64_t, char *, uint64_t), uint64_t a4, uint64_t a5)
{
  char v56 = a3;
  uint64_t v57 = *MEMORY[0x263EF8340];
  uint64_t v8 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  int v48 = (char *)&v48 - v13;
  MEMORY[0x270FA5388](v14);
  char v49 = (char *)&v48 - v15;
  type metadata accessor for ObservationTracking._AccessList?();
  MEMORY[0x270FA5388](v16 - 8);
  int v18 = (char *)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  char v21 = (char *)&v48 - v20;
  uint64_t v22 = *a1;
  uint64_t v23 = a1[1];
  uint64_t v24 = (void *)swift_allocObject();
  uint64_t v52 = a4;
  uint64_t v53 = a5;
  _OWORD v24[2] = a4;
  v24[3] = a5;
  v24[4] = v22;
  v24[5] = v23;
  unsigned int CurrentAttribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    uint64_t v51 = v11;
    unsigned int v50 = CurrentAttribute;
    uint64_t v26 = one-time initialization token for lastestAccessLists;
    swift_retain();
    if (v26 == -1) {
      goto LABEL_3;
    }
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  char v54 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x263F8EE78];
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v21, 1, 1, v8);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v28 = v9;
  uint64_t v29 = *(void *)(StatusReg + 848);
  *(void *)(StatusReg + 848) = v21;
  unint64_t v55 = v24;
  ((void (*)(void (*)(uint64_t, char *, uint64_t)))v24[4])(v56);
  *(void *)(StatusReg + 848) = v29;
  uint64_t v30 = v28;
  outlined init with copy of ObservationTracking._AccessList?((uint64_t)v21, (uint64_t)v18);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v18, 1, v8) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?((uint64_t)v18);
  }
  else
  {
    unint64_t v31 = *(void (**)(char *, char *, uint64_t))(v28 + 32);
    uint64_t v32 = v49;
    uint64_t v33 = v31;
    v31(v49, v18, v8);
    uint64_t v34 = v48;
    (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v48, v32, v8);
    swift_beginAccess();
    uint64_t v35 = (char *)static ObservationRegistrar.lastestAccessLists;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v35;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v35 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v35 + 2) + 1, 1, (unint64_t)v35);
      static ObservationRegistrar.lastestAccessLists = v35;
    }
    unint64_t v38 = *((void *)v35 + 2);
    unint64_t v37 = *((void *)v35 + 3);
    if (v38 >= v37 >> 1)
    {
      uint64_t v35 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v37 > 1, v38 + 1, 1, (unint64_t)v35);
      static ObservationRegistrar.lastestAccessLists = v35;
    }
    *((void *)v35 + 2) = v38 + 1;
    v33(&v35[((*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80))+ *(void *)(v30 + 72) * v38], v34, v8);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v32, v8);
  }
  outlined destroy of ObservationTracking._AccessList?((uint64_t)v21);
  uint64_t v39 = *((void *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v39)
  {
    double v41 = *(void (**)(uint64_t, char *, uint64_t))(v30 + 16);
    uint64_t v40 = v30 + 16;
    char v56 = v41;
    double v42 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v40 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 64));
    uint64_t v43 = *(void *)(v40 + 56);
    char v49 = (char *)static ObservationRegistrar.lastestAccessLists;
    swift_bridgeObjectRetain();
    uint64_t v44 = v50;
    uint64_t v45 = (uint64_t)v51;
    do
    {
      v56(v45, v42, v8);
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      installObservationSlow<A>(accessList:attribute:)(v45, v44, AssociatedTypeWitness);
      (*(void (**)(uint64_t, uint64_t))(v40 - 8))(v45, v8);
      v42 += v43;
      --v39;
    }
    while (v39);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = v54;
  swift_bridgeObjectRelease();
  return swift_release();
}

void storeEnumTagSinglePayload for VStack(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  size_t v9 = ((v8 + 17) & ~v8) + *(void *)(v6 + 64);
  BOOL v10 = a3 >= v7;
  unsigned int v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      unsigned int v15 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v15))
      {
        int v12 = 4;
      }
      else if (v15 >= 0x100)
      {
        int v12 = 2;
      }
      else
      {
        int v12 = v15 > 1;
      }
    }
    else
    {
      int v12 = 1;
    }
  }
  else
  {
    int v12 = 0;
  }
  if (v7 >= a2)
  {
    switch(v12)
    {
      case 1:
        a1[v9] = 0;
        if (a2) {
          goto LABEL_21;
        }
        break;
      case 2:
        *(_WORD *)&a1[v9] = 0;
        if (a2) {
          goto LABEL_21;
        }
        break;
      case 3:
LABEL_34:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v9] = 0;
        goto LABEL_20;
      default:
LABEL_20:
        if (a2)
        {
LABEL_21:
          unint64_t v17 = (unint64_t)&a1[v8 + 17] & ~v8;
          int v18 = *(void (**)(unint64_t))(v6 + 56);
          v18(v17);
        }
        break;
    }
  }
  else
  {
    unsigned int v13 = ~v7 + a2;
    if (v9 < 4)
    {
      int v14 = (v13 >> (8 * v9)) + 1;
      if (v9)
      {
        int v16 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if (v9 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if (v9 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v13;
      int v14 = 1;
    }
    switch(v12)
    {
      case 1:
        a1[v9] = v14;
        break;
      case 2:
        *(_WORD *)&a1[v9] = v14;
        break;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v9] = v14;
        break;
      default:
        return;
    }
  }
}

uint64_t partial apply for closure #1 in closure #1 in GeometryReader.Child.updateValue()(uint64_t (**a1)(_OWORD *))
{
  uint64_t v2 = *(void *)(v1 + 32);
  int v3 = *a1;
  long long v4 = *(_OWORD *)(v2 + 16);
  v6[0] = *(_OWORD *)v2;
  v6[1] = v4;
  long long v6[2] = *(_OWORD *)(v2 + 32);
  int v7 = *(_DWORD *)(v2 + 48);
  return v3(v6);
}

uint64_t partial apply for closure #1 in View.dynamicTypeSize<A>(_:)(unsigned char *a1)
{
  uint64_t result = DynamicTypeSize.clamped<A>(to:)(&v3);
  *a1 = v3;
  return result;
}

uint64_t DynamicTypeSize.clamped<A>(to:)@<X0>(unsigned char *a1@<X8>)
{
  unsigned int v3 = *v1;
  lazy protocol witness table accessor for type DynamicTypeSizeCollection and conformance DynamicTypeSizeCollection();
  dispatch thunk of RangeExpression.relative<A>(to:)();
  unsigned int v4 = v10;
  uint64_t result = dispatch thunk of RangeExpression.contains(_:)();
  if ((result & 1) == 0)
  {
    uint64_t result = specialized Collection<>.firstIndex(of:)(v10, (uint64_t)&outlined read-only object #0 of static DynamicTypeSize.allCases.getter);
    if ((v6 & 1) == 0)
    {
      if (__OFSUB__(result, 1))
      {
        __break(1u);
      }
      else
      {
        unint64_t v7 = (result - 1) & ~((result - 1) >> 63);
        if (v7 < qword_26FA4FA08)
        {
          unsigned int v4 = *((unsigned __int8 *)&outlined read-only object #0 of static DynamicTypeSize.allCases.getter + v7 + 32);
          goto LABEL_6;
        }
      }
      __break(1u);
    }
    __break(1u);
    return result;
  }
LABEL_6:
  if (v3 <= v9) {
    unsigned int v8 = v9;
  }
  else {
    unsigned int v8 = v3;
  }
  if (v4 < v8) {
    LOBYTE(v8) = v4;
  }
  *a1 = v8;
  return result;
}

unint64_t lazy protocol witness table accessor for type DynamicTypeSizeCollection and conformance DynamicTypeSizeCollection()
{
  unint64_t result = lazy protocol witness table cache variable for type DynamicTypeSizeCollection and conformance DynamicTypeSizeCollection;
  if (!lazy protocol witness table cache variable for type DynamicTypeSizeCollection and conformance DynamicTypeSizeCollection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DynamicTypeSizeCollection and conformance DynamicTypeSizeCollection);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DynamicTypeSizeCollection and conformance DynamicTypeSizeCollection;
  if (!lazy protocol witness table cache variable for type DynamicTypeSizeCollection and conformance DynamicTypeSizeCollection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DynamicTypeSizeCollection and conformance DynamicTypeSizeCollection);
  }
  return result;
}

uint64_t partial apply for closure #1 in AnchorWriter.value.getter@<X0>(long long *a1@<X0>, char *a2@<X8>)
{
  return closure #1 in AnchorWriter.value.getter(a1, v2[5], v2[6], v2[2], v2[3], v2[4], a2);
}

uint64_t closure #1 in AnchorWriter.value.getter@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X8>)
{
  uint64_t v57 = a4;
  *(void *)&long long v56 = a2;
  unint64_t v55 = a7;
  uint64_t v70 = *MEMORY[0x263EF8340];
  uint64_t v11 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  int v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v53 = (char *)&v50 - v16;
  MEMORY[0x270FA5388](v17);
  char v54 = (char *)&v50 - v18;
  type metadata accessor for ObservationTracking._AccessList?();
  unsigned int v50 = v19;
  MEMORY[0x270FA5388](v19);
  char v21 = (char *)&v50 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  double v58 = (char *)&v50 - v23;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v52 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  double v59 = (char *)&v50 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v26);
  uint64_t v51 = (char *)&v50 - v27;
  uint64_t v28 = *((void *)a1 + 2);
  int v68 = DWORD1(v56);
  uint64_t v69 = a3;
  long long v56 = *a1;
  uint64_t v29 = v57;
  uint64_t v30 = Anchor.Source.prepare(geometry:)((uint64_t *)&v68, v56);
  uint64_t v61 = v29;
  uint64_t v62 = a5;
  uint64_t v63 = a6;
  long long v64 = v56;
  uint64_t v65 = v28;
  uint64_t v66 = v30;
  uint64_t CurrentAttribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    a6 = CurrentAttribute;
    if (one-time initialization token for lastestAccessLists == -1) {
      goto LABEL_3;
    }
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  *(void *)&long long v56 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x263F8EE78];
  uint64_t v32 = (uint64_t)v58;
  uint64_t v33 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v58, 1, 1, v11);
  MEMORY[0x270FA5388](v33);
  *(&v50 - 4) = (void (*)(char *, char *, uint64_t))AssociatedTypeWitness;
  *(&v50 - 3) = (void (*)(char *, char *, uint64_t))partial apply for closure #1 in closure #1 in AnchorWriter.value.getter;
  *(&v50 - 2) = (void (*)(char *, char *, uint64_t))&v60;
  unint64_t v34 = type metadata accessor for Error();
  _ss24withUnsafeMutablePointer2to_q0_xz_q0_SpyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v32, (uint64_t)partial apply for closure #1 in _withObservation<A>(do:), (uint64_t)(&v50 - 6), (uint64_t)v50, v34, AssociatedTypeWitness, MEMORY[0x263F8E4E0], (uint64_t)v67);
  uint64_t v57 = v30;
  outlined init with copy of ObservationTracking._AccessList?(v32, (uint64_t)v21);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v21, 1, v11) == 1)
  {
    outlined destroy of ObservationTracking._AccessList?((uint64_t)v21);
    uint64_t v35 = v55;
  }
  else
  {
    char v36 = v54;
    unsigned int v50 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    v50(v54, v21, v11);
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v53, v36, v11);
    swift_beginAccess();
    unint64_t v37 = (char *)static ObservationRegistrar.lastestAccessLists;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v37;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v37 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v37 + 2) + 1, 1, (unint64_t)v37);
      static ObservationRegistrar.lastestAccessLists = v37;
    }
    uint64_t v35 = v55;
    unint64_t v40 = *((void *)v37 + 2);
    unint64_t v39 = *((void *)v37 + 3);
    if (v40 >= v39 >> 1)
    {
      unint64_t v37 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1, v40 + 1, 1, (unint64_t)v37);
      static ObservationRegistrar.lastestAccessLists = v37;
    }
    *((void *)v37 + 2) = v40 + 1;
    v50(&v37[((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))+ *(void *)(v12 + 72) * v40], v53, v11);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v54, v11);
    uint64_t v32 = (uint64_t)v58;
  }
  double v41 = *(void (**)(char *, char *, uint64_t))(v52 + 32);
  double v42 = v51;
  v41(v51, v59, AssociatedTypeWitness);
  outlined destroy of ObservationTracking._AccessList?(v32);
  v41(v35, v42, AssociatedTypeWitness);
  uint64_t v43 = *((void *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v43)
  {
    Swift::UInt v46 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
    uint64_t v45 = v12 + 16;
    uint64_t v44 = v46;
    Swift::UInt8 v47 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v45 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 64));
    uint64_t v48 = *(void *)(v45 + 56);
    double v59 = (char *)static ObservationRegistrar.lastestAccessLists;
    swift_bridgeObjectRetain();
    do
    {
      v44(v14, v47, v11);
      installObservationSlow<A>(accessList:attribute:)((uint64_t)v14, a6, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v45 - 8))(v14, v11);
      v47 += v48;
      --v43;
    }
    while (v43);
    swift_bridgeObjectRelease();
  }
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)v56;
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t DynamicTypeSizeCollection.index(after:)@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = specialized Collection<>.firstIndex(of:)(*a1, (uint64_t)&outlined read-only object #0 of static DynamicTypeSize.allCases.getter);
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = result + 1;
    if (__OFADD__(result, 1))
    {
      __break(1u);
    }
    else
    {
      if (v5 >= qword_26FA4FA08) {
        uint64_t v5 = qword_26FA4FA08 - 1;
      }
      if ((v5 & 0x8000000000000000) == 0)
      {
        *a2 = *((unsigned char *)&outlined read-only object #0 of static DynamicTypeSize.allCases.getter + v5 + 32);
        return result;
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized Collection<>.firstIndex(of:)(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  uint64_t result = 0;
  while (*(unsigned __int8 *)(a2 + 32 + result) != a1)
  {
    if (v2 == ++result) {
      return 0;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for _ValueTransactionModifier(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 >= a2)
  {
LABEL_26:
    if (v5 < 0x7FFFFFFF)
    {
      unint64_t v16 = *(void *)((result + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v16 >= 0xFFFFFFFF) {
        LODWORD(v16) = -1;
      }
      return (v16 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *(unsigned __int8 *)(result + v8);
        if (!v14) {
          goto LABEL_26;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)(result + v8);
        if (!v14) {
          goto LABEL_26;
        }
        goto LABEL_22;
      case 3:
        __break(1u);
        return result;
      case 4:
        int v14 = *(_DWORD *)(result + v8);
        if (!v14) {
          goto LABEL_26;
        }
LABEL_22:
        int v15 = v14 - 1;
        if (v10)
        {
          int v15 = 0;
          LODWORD(v10) = *(_DWORD *)result;
        }
        uint64_t result = v7 + (v10 | v15) + 1;
        break;
      default:
        goto LABEL_26;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for Cluster #1 in static Text.Effect.stopMarkers(_:)(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 25) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Text.Effect.Timing.Chunk(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t destroy for ScrollPositionBindingModifier(uint64_t a1)
{
  swift_release();
  uint64_t result = swift_release();
  if (!*(unsigned char *)(a1 + 73))
  {
    return __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in SecondaryChild.value.getter@<X0>(void (**a1)(char *)@<X0>, unint64_t a2@<X8>)
{
  return closure #1 in closure #1 in SecondaryChild.value.getter(a1, *(void *)(v2 + 48), *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), a2);
}

uint64_t closure #1 in closure #1 in SecondaryChild.value.getter@<X0>(void (**a1)(char *)@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, unint64_t a7@<X8>)
{
  v21[1] = a4;
  v21[2] = a6;
  v21[0] = a2;
  v21[3] = a7;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  int v14 = (char *)v21 - v13;
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)v21 - v17;
  uint64_t v19 = *a1;
  SecondaryChild.preferenceValue.getter(v21[0], (uint64_t)v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(a5 + 16))(a3, a5);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v14, AssociatedTypeWitness);
  }
  v19(v18);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, AssociatedTypeWitness);
}

uint64_t SecondaryChild.preferenceValue.getter@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = HIDWORD(a1);
  int v4 = *MEMORY[0x263F288F8];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = AssociatedTypeWitness;
  if (v4 == v3)
  {
    uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
    uint64_t v8 = 1;
  }
  else
  {
    uint64_t Value = AGGraphGetValue();
    uint64_t v12 = *(void *)(v6 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(a2, Value, v6);
    uint64_t v7 = v12;
    uint64_t v8 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56);

  return v10(a2, v8, 1, v6);
}

void storeEnumTagSinglePayload for ZStack(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  size_t v9 = ((v8 + 16) & ~v8) + *(void *)(v6 + 64);
  BOOL v10 = a3 >= v7;
  unsigned int v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      unsigned int v15 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v15))
      {
        int v12 = 4;
      }
      else if (v15 >= 0x100)
      {
        int v12 = 2;
      }
      else
      {
        int v12 = v15 > 1;
      }
    }
    else
    {
      int v12 = 1;
    }
  }
  else
  {
    int v12 = 0;
  }
  if (v7 >= a2)
  {
    switch(v12)
    {
      case 1:
        a1[v9] = 0;
        if (a2) {
          goto LABEL_21;
        }
        break;
      case 2:
        *(_WORD *)&a1[v9] = 0;
        if (a2) {
          goto LABEL_21;
        }
        break;
      case 3:
LABEL_34:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v9] = 0;
        goto LABEL_20;
      default:
LABEL_20:
        if (a2)
        {
LABEL_21:
          unint64_t v17 = (unint64_t)&a1[v8 + 16] & ~v8;
          uint64_t v18 = *(void (**)(unint64_t))(v6 + 56);
          v18(v17);
        }
        break;
    }
  }
  else
  {
    unsigned int v13 = ~v7 + a2;
    if (v9 < 4)
    {
      int v14 = (v13 >> (8 * v9)) + 1;
      if (v9)
      {
        int v16 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if (v9 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if (v9 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v13;
      int v14 = 1;
    }
    switch(v12)
    {
      case 1:
        a1[v9] = v14;
        break;
      case 2:
        *(_WORD *)&a1[v9] = v14;
        break;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v9] = v14;
        break;
      default:
        return;
    }
  }
}

uint64_t partial apply for closure #1 in View.fontWeight(_:)(uint64_t *a1)
{
  return closure #1 in View.fontWeight(_:)(a1, *(void *)(v1 + 16), *(unsigned char *)(v1 + 24));
}

uint64_t closure #1 in View.fontWeight(_:)(uint64_t *a1, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0)
  {
    type metadata accessor for AnyDynamicFontModifier<Font.DesignModifier>(0, &lazy cache variable for type metadata for AnyDynamicFontModifier<Font.WeightModifier>, (void (*)(void))lazy protocol witness table accessor for type Font.WeightModifier and conformance Font.WeightModifier);
    *(void *)(swift_allocObject() + 16) = a2;
    MEMORY[0x24C522D60]();
    if (*(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_23;
    }
    goto LABEL_3;
  }
  uint64_t v6 = *a1;
  if ((unint64_t)*a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    if (v7) {
      goto LABEL_6;
    }
LABEL_14:
    swift_bridgeObjectRelease();
    if ((unint64_t)*a1 >> 62) {
      goto LABEL_28;
    }
    uint64_t v8 = *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    while (1)
    {
LABEL_19:
      if ((unint64_t)*a1 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v11 >= v8) {
          return specialized Array.replaceSubrange<A>(_:with:)(v8, v11);
        }
      }
      else
      {
        uint64_t v11 = *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v11 >= v8) {
          return specialized Array.replaceSubrange<A>(_:with:)(v8, v11);
        }
      }
      __break(1u);
LABEL_28:
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v7) {
    goto LABEL_14;
  }
LABEL_6:
  uint64_t v8 = 0;
  while (1)
  {
    if ((v6 & 0xC000000000000001) != 0) {
      MEMORY[0x24C523D60](v8, v6);
    }
    else {
      swift_retain();
    }
    type metadata accessor for AnyDynamicFontModifier<Font.DesignModifier>(0, &lazy cache variable for type metadata for AnyDynamicFontModifier<Font.WeightModifier>, (void (*)(void))lazy protocol witness table accessor for type Font.WeightModifier and conformance Font.WeightModifier);
    if (swift_dynamicCastClass()) {
      break;
    }
    type metadata accessor for EnvironmentPropertyKey<ImageScaleKey>(0, &lazy cache variable for type metadata for AnyStaticFontModifier<Font.BoldModifier>, (uint64_t)&type metadata for Font.BoldModifier, (uint64_t)&protocol witness table for Font.BoldModifier, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AnyStaticFontModifier);
    if (swift_dynamicCastClass()) {
      break;
    }
    swift_release();
    uint64_t v9 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
LABEL_23:
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_3:
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      return specialized Array._endMutation()();
    }
    ++v8;
    if (v9 == v7) {
      goto LABEL_14;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t result = swift_release();
  uint64_t v10 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
LABEL_30:
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v10 == v12) {
      goto LABEL_19;
    }
    goto LABEL_31;
  }
  if ((unint64_t)*a1 >> 62) {
    goto LABEL_30;
  }
  if (v10 == *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_19;
  }
LABEL_31:
  uint64_t v13 = v8 + 5;
  while (1)
  {
    unint64_t v14 = v13 - 4;
    if ((*a1 & 0xC000000000000001) != 0)
    {
      MEMORY[0x24C523D60](v13 - 4);
      goto LABEL_36;
    }
    if ((v14 & 0x8000000000000000) != 0) {
      break;
    }
    if (v14 >= *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_69;
    }
    swift_retain();
LABEL_36:
    if (swift_dynamicCastClass())
    {
      uint64_t result = swift_release();
      goto LABEL_59;
    }
    type metadata accessor for EnvironmentPropertyKey<ImageScaleKey>(0, &lazy cache variable for type metadata for AnyStaticFontModifier<Font.BoldModifier>, (uint64_t)&type metadata for Font.BoldModifier, (uint64_t)&protocol witness table for Font.BoldModifier, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AnyStaticFontModifier);
    uint64_t v15 = swift_dynamicCastClass();
    uint64_t result = swift_release();
    if (!v15)
    {
      if (v14 == v8) {
        goto LABEL_58;
      }
      uint64_t v16 = *a1;
      if ((*a1 & 0xC000000000000001) != 0)
      {
        uint64_t result = MEMORY[0x24C523D60](v8, *a1);
        uint64_t v17 = result;
        uint64_t v16 = *a1;
        if ((*a1 & 0xC000000000000001) == 0) {
          goto LABEL_44;
        }
      }
      else
      {
        if (v8 < 0) {
          goto LABEL_72;
        }
        if ((unint64_t)v8 >= *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_73;
        }
        uint64_t v17 = *(void *)(v16 + 8 * v8 + 32);
        uint64_t result = swift_retain();
        if ((v16 & 0xC000000000000001) == 0)
        {
LABEL_44:
          if ((v14 & 0x8000000000000000) != 0) {
            goto LABEL_74;
          }
          if (v14 >= *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_75;
          }
          uint64_t v18 = *(void *)(v16 + 8 * v13);
          swift_retain();
LABEL_47:
          int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
          *a1 = v16;
          if (!isUniquelyReferenced_nonNull_bridgeObject || v16 < 0 || (v16 & 0x4000000000000000) != 0)
          {
            uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew()(v16);
            *a1 = v16;
          }
          *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 8 * v8 + 0x20) = v18;
          swift_release();
          specialized Array._endMutation()();
          uint64_t v20 = *a1;
          uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject();
          *a1 = v20;
          if (!result || v20 < 0 || (v20 & 0x4000000000000000) != 0)
          {
            uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew()(v20);
            uint64_t v20 = result;
            *a1 = result;
          }
          if ((v14 & 0x8000000000000000) != 0) {
            goto LABEL_76;
          }
          if (v14 >= *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_77;
          }
          *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 8 * v13) = v17;
          swift_release();
          uint64_t result = specialized Array._endMutation()();
LABEL_58:
          if (__OFADD__(v8++, 1)) {
            goto LABEL_71;
          }
          goto LABEL_59;
        }
      }
      uint64_t v18 = MEMORY[0x24C523D60](v13 - 4, v16);
      uint64_t v16 = *a1;
      goto LABEL_47;
    }
LABEL_59:
    uint64_t v22 = v13 - 3;
    if (__OFADD__(v14, 1)) {
      goto LABEL_70;
    }
    if ((unint64_t)*a1 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v23 = *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    ++v13;
    if (v22 == v23) {
      goto LABEL_19;
    }
  }
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
LABEL_75:
  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
  return result;
}

void type metadata accessor for AnyDynamicFontModifier<Font.DesignModifier>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for AnyDynamicFontModifier();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unsigned char *partial apply for closure #1 in View.symbolVariant(_:)(unsigned char *result)
{
  int v2 = *(unsigned __int8 *)(v1 + 17);
  *result |= *(unsigned char *)(v1 + 16);
  char v3 = result[1];
  if (v2 != 3) {
    char v3 = v2;
  }
  result[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for ScrollPositionBindingModifier(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 113)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

unsigned char *storeEnumTagSinglePayload for ParagraphTypesetting(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in ApplyTransitionModifier.Child.value.getter(uint64_t a1, double a2)
{
  return closure #1 in closure #1 in ApplyTransitionModifier.Child.value.getter(a2, a1, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t closure #1 in closure #1 in ApplyTransitionModifier.Child.value.getter(double a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t storeEnumTagSinglePayload for AnyStyleContextType(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t closure #1 in View.monospacedDigit()(void *a1)
{
  if (*(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  return specialized Array._endMutation()();
}

uint64_t specialized static AnyFontModifier.static<A>(_:)()
{
  if (one-time initialization token for staticModifiers != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v0 = static AnyFontModifier.staticModifiers;
  if (*((void *)static AnyFontModifier.staticModifiers + 2)
    && (unint64_t v1 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for Font.MonospacedDigitModifier),
        (v2 & 1) != 0))
  {
    uint64_t v3 = *(void *)(v0[7] + 8 * v1);
    swift_endAccess();
    swift_retain();
  }
  else
  {
    swift_endAccess();
    _s7SwiftUI17InterfaceIdiomBox33_39057DDA72E946BD17E1F42CCA55F7F6LLVyAA05PhonecD0VGMaTm_0(0, &lazy cache variable for type metadata for AnyStaticFontModifier<Font.MonospacedDigitModifier>, (uint64_t)&type metadata for Font.MonospacedDigitModifier, (uint64_t)&protocol witness table for Font.MonospacedDigitModifier, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AnyStaticFontModifier);
    uint64_t v3 = swift_allocObject();
    swift_beginAccess();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unsigned int v6 = static AnyFontModifier.staticModifiers;
    static AnyFontModifier.staticModifiers = (_UNKNOWN *)0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v3, (uint64_t)&type metadata for Font.MonospacedDigitModifier, isUniquelyReferenced_nonNull_native);
    static AnyFontModifier.staticModifiers = v6;
    swift_bridgeObjectRelease();
    swift_endAccess();
  }
  return v3;
}

{
  void *v0;
  unint64_t v1;
  char v2;
  uint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  void *v6;

  if (one-time initialization token for staticModifiers != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v0 = static AnyFontModifier.staticModifiers;
  if (*((void *)static AnyFontModifier.staticModifiers + 2)
    && (unint64_t v1 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for Font.BoldModifier), (v2 & 1) != 0))
  {
    uint64_t v3 = *(void *)(v0[7] + 8 * v1);
    swift_endAccess();
    swift_retain();
  }
  else
  {
    swift_endAccess();
    _s7SwiftUI17InterfaceIdiomBox33_39057DDA72E946BD17E1F42CCA55F7F6LLVyAA05PhonecD0VGMaTm_0(0, &lazy cache variable for type metadata for AnyStaticFontModifier<Font.BoldModifier>, (uint64_t)&type metadata for Font.BoldModifier, (uint64_t)&protocol witness table for Font.BoldModifier, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AnyStaticFontModifier);
    uint64_t v3 = swift_allocObject();
    swift_beginAccess();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unsigned int v6 = static AnyFontModifier.staticModifiers;
    static AnyFontModifier.staticModifiers = (_UNKNOWN *)0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v3, (uint64_t)&type metadata for Font.BoldModifier, isUniquelyReferenced_nonNull_native);
    static AnyFontModifier.staticModifiers = v6;
    swift_bridgeObjectRelease();
    swift_endAccess();
  }
  return v3;
}

{
  void *v0;
  unint64_t v1;
  char v2;
  uint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  void *v6;

  if (one-time initialization token for staticModifiers != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v0 = static AnyFontModifier.staticModifiers;
  if (*((void *)static AnyFontModifier.staticModifiers + 2)
    && (unint64_t v1 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for Font.ItalicModifier),
        (v2 & 1) != 0))
  {
    uint64_t v3 = *(void *)(v0[7] + 8 * v1);
    swift_endAccess();
    swift_retain();
  }
  else
  {
    swift_endAccess();
    _s7SwiftUI17InterfaceIdiomBox33_39057DDA72E946BD17E1F42CCA55F7F6LLVyAA05PhonecD0VGMaTm_0(0, &lazy cache variable for type metadata for AnyStaticFontModifier<Font.ItalicModifier>, (uint64_t)&type metadata for Font.ItalicModifier, (uint64_t)&protocol witness table for Font.ItalicModifier, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AnyStaticFontModifier);
    uint64_t v3 = swift_allocObject();
    swift_beginAccess();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unsigned int v6 = static AnyFontModifier.staticModifiers;
    static AnyFontModifier.staticModifiers = (_UNKNOWN *)0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v3, (uint64_t)&type metadata for Font.ItalicModifier, isUniquelyReferenced_nonNull_native);
    static AnyFontModifier.staticModifiers = v6;
    swift_bridgeObjectRelease();
    swift_endAccess();
  }
  return v3;
}

{
  void *v0;
  unint64_t v1;
  char v2;
  uint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  void *v6;

  if (one-time initialization token for staticModifiers != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v0 = static AnyFontModifier.staticModifiers;
  if (*((void *)static AnyFontModifier.staticModifiers + 2)
    && (unint64_t v1 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for Font.MonospacedModifier),
        (v2 & 1) != 0))
  {
    uint64_t v3 = *(void *)(v0[7] + 8 * v1);
    swift_endAccess();
    swift_retain();
  }
  else
  {
    swift_endAccess();
    _s7SwiftUI17InterfaceIdiomBox33_39057DDA72E946BD17E1F42CCA55F7F6LLVyAA05PhonecD0VGMaTm_0(0, &lazy cache variable for type metadata for AnyStaticFontModifier<Font.MonospacedModifier>, (uint64_t)&type metadata for Font.MonospacedModifier, (uint64_t)&protocol witness table for Font.MonospacedModifier, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AnyStaticFontModifier);
    uint64_t v3 = swift_allocObject();
    swift_beginAccess();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unsigned int v6 = static AnyFontModifier.staticModifiers;
    static AnyFontModifier.staticModifiers = (_UNKNOWN *)0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v3, (uint64_t)&type metadata for Font.MonospacedModifier, isUniquelyReferenced_nonNull_native);
    static AnyFontModifier.staticModifiers = v6;
    swift_bridgeObjectRelease();
    swift_endAccess();
  }
  return v3;
}

uint64_t partial apply for closure #1 in closure #1 in DelayedPreferenceChild.value.getter(uint64_t (**a1)(uint64_t *))
{
  unint64_t v1 = *a1;
  uint64_t v3 = AGCreateWeakAttribute();
  return v1(&v3);
}

void storeEnumTagSinglePayload for _VariadicView.Tree(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 >= a2)
  {
    switch(v17)
    {
      case 1:
        a1[v14] = 0;
        if (a2) {
          goto LABEL_24;
        }
        break;
      case 2:
        *(_WORD *)&a1[v14] = 0;
        if (a2) {
          goto LABEL_24;
        }
        break;
      case 3:
LABEL_41:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v14] = 0;
        goto LABEL_23;
      default:
LABEL_23:
        if (a2)
        {
LABEL_24:
          if (v7 >= v10)
          {
            uint64_t v24 = *(void (**)(void))(v6 + 56);
            v24();
          }
          else
          {
            unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
            uint64_t v23 = *(void (**)(unint64_t))(v9 + 56);
            v23(v22);
          }
        }
        break;
    }
  }
  else
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        break;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        break;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        break;
      default:
        return;
    }
  }
}

unsigned char *partial apply for closure #1 in View.textScale(_:isEnabled:)(unsigned char *result)
{
  if (*(unsigned char *)(v1 + 16) == 1) {
    *uint64_t result = *(unsigned char *)(v1 + 17);
  }
  return result;
}

uint64_t partial apply for closure #1 in View.fontDesign(_:)(uint64_t *a1)
{
  return closure #1 in View.fontDesign(_:)(a1, *(unsigned char *)(v1 + 16));
}

uint64_t closure #1 in View.fontDesign(_:)(uint64_t *a1, char a2)
{
  if (a2 != 4)
  {
    type metadata accessor for AnyDynamicFontModifier<Font.DesignModifier>(0, &lazy cache variable for type metadata for AnyDynamicFontModifier<Font.DesignModifier>, (void (*)(void))lazy protocol witness table accessor for type Font.DesignModifier and conformance Font.DesignModifier);
    *(unsigned char *)(swift_allocObject() + 16) = a2;
    MEMORY[0x24C522D60]();
    if (*(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_65;
    }
    goto LABEL_17;
  }
  unint64_t v3 = *a1;
  if ((unint64_t)*a1 >> 62)
  {
LABEL_61:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4) {
      goto LABEL_4;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    if ((unint64_t)*a1 >> 62) {
      goto LABEL_72;
    }
    uint64_t v5 = *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_13;
  }
  uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v4) {
    goto LABEL_11;
  }
LABEL_4:
  uint64_t v5 = 0;
  while (1)
  {
    if ((v3 & 0xC000000000000001) != 0) {
      MEMORY[0x24C523D60](v5, v3);
    }
    else {
      swift_retain();
    }
    type metadata accessor for AnyDynamicFontModifier<Font.DesignModifier>(0, &lazy cache variable for type metadata for AnyDynamicFontModifier<Font.DesignModifier>, (void (*)(void))lazy protocol witness table accessor for type Font.DesignModifier and conformance Font.DesignModifier);
    if (swift_dynamicCastClass()) {
      break;
    }
    swift_release();
    uint64_t v6 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
LABEL_57:
      __break(1u);
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
      goto LABEL_61;
    }
    ++v5;
    if (v6 == v4) {
      goto LABEL_11;
    }
  }
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v10 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
LABEL_74:
    swift_bridgeObjectRetain();
    uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 == v22) {
      goto LABEL_13;
    }
    goto LABEL_21;
  }
  if ((unint64_t)*a1 >> 62) {
    goto LABEL_74;
  }
  if (v10 == *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_13;
  }
LABEL_21:
  uint64_t v11 = v5 + 5;
  while (1)
  {
    unint64_t v3 = v11 - 4;
    if ((*a1 & 0xC000000000000001) != 0)
    {
      MEMORY[0x24C523D60](v11 - 4);
    }
    else
    {
      if ((v3 & 0x8000000000000000) != 0) {
        goto LABEL_57;
      }
      if (v3 >= *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_58;
      }
      swift_retain();
    }
    uint64_t v12 = swift_dynamicCastClass();
    swift_release();
    if (v12) {
      goto LABEL_47;
    }
    if (v3 != v5) {
      break;
    }
LABEL_46:
    if (__OFADD__(v5++, 1)) {
      goto LABEL_60;
    }
LABEL_47:
    uint64_t v20 = v11 - 3;
    if (__OFADD__(v3, 1)) {
      goto LABEL_59;
    }
    if ((unint64_t)*a1 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v21 = *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    ++v11;
    if (v20 == v21) {
      goto LABEL_13;
    }
  }
  uint64_t v13 = *a1;
  if ((*a1 & 0xC000000000000001) != 0)
  {
    uint64_t v14 = MEMORY[0x24C523D60](v5, *a1);
    uint64_t v13 = *a1;
    if ((*a1 & 0xC000000000000001) == 0)
    {
LABEL_32:
      if ((v3 & 0x8000000000000000) != 0) {
        goto LABEL_68;
      }
      if (v3 >= *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_69;
      }
      uint64_t v15 = *(void *)(v13 + 8 * v11);
      swift_retain();
      goto LABEL_35;
    }
LABEL_55:
    uint64_t v15 = MEMORY[0x24C523D60](v11 - 4, v13);
    uint64_t v13 = *a1;
LABEL_35:
    int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
    *a1 = v13;
    if (!isUniquelyReferenced_nonNull_bridgeObject || v13 < 0 || (v13 & 0x4000000000000000) != 0)
    {
      uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew()(v13);
      *a1 = v13;
    }
    *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 8 * v5 + 0x20) = v15;
    swift_release();
    specialized Array._endMutation()();
    uint64_t v17 = *a1;
    int v18 = swift_isUniquelyReferenced_nonNull_bridgeObject();
    *a1 = v17;
    if (!v18 || v17 < 0 || (v17 & 0x4000000000000000) != 0)
    {
      uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew()(v17);
      *a1 = v17;
    }
    if ((v3 & 0x8000000000000000) != 0) {
      goto LABEL_70;
    }
    if (v3 >= *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_71;
    }
    *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 8 * v11) = v14;
    swift_release();
    specialized Array._endMutation()();
    goto LABEL_46;
  }
  if ((v5 & 0x8000000000000000) == 0)
  {
    if ((unint64_t)v5 >= *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_67;
    }
    uint64_t v14 = *(void *)(v13 + 8 * v5 + 32);
    swift_retain();
    if ((v13 & 0xC000000000000001) == 0) {
      goto LABEL_32;
    }
    goto LABEL_55;
  }
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  swift_bridgeObjectRetain();
  uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_13:
  if ((unint64_t)*a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v7 < v5) {
      goto LABEL_64;
    }
    return specialized Array.replaceSubrange<A>(_:with:)(v5, v7);
  }
  else
  {
    uint64_t v7 = *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v7 >= v5) {
      return specialized Array.replaceSubrange<A>(_:with:)(v5, v7);
    }
LABEL_64:
    __break(1u);
LABEL_65:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_17:
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    return specialized Array._endMutation()();
  }
}

uint64_t partial apply for closure #1 in closure #3 in CanvasDisplayList.updateValue()(uint64_t a1)
{
  uint64_t v3 = *((void *)v1 + 4);
  double v4 = v1[5];
  double v5 = v1[6];
  uint64_t v6 = type metadata accessor for Canvas();
  return (*(uint64_t (**)(uint64_t, double, double))(a1 + *(int *)(v6 + 36)))(v3, v4, v5);
}

void storeEnumTagSinglePayload for _ValueTransactionModifier(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 <= v8)
  {
    switch(v14)
    {
      case 1:
        a1[v10] = 0;
        if (a2) {
          goto LABEL_33;
        }
        break;
      case 2:
        *(_WORD *)&a1[v10] = 0;
        if (a2) {
          goto LABEL_33;
        }
        break;
      case 3:
LABEL_44:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v10] = 0;
        goto LABEL_32;
      default:
LABEL_32:
        if (a2)
        {
LABEL_33:
          if (v7 < 0x7FFFFFFF)
          {
            int v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
            if ((a2 & 0x80000000) != 0)
            {
              uint64_t v19 = a2 ^ 0x80000000;
              v18[1] = 0;
            }
            else
            {
              uint64_t v19 = a2 - 1;
            }
            *int v18 = v19;
          }
          else
          {
            uint64_t v17 = *(void (**)(void))(v6 + 56);
            v17();
          }
        }
        break;
    }
  }
  else
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        break;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        break;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        break;
      default:
        return;
    }
  }
}

uint64_t storeEnumTagSinglePayload for Text.Effect.Timing.Chunk(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t partial apply for closure #1 in View.typesettingLanguageAwareLineHeightRatio(_:isEnabled:)(uint64_t result)
{
  if (*(unsigned char *)(v1 + 16) == 1)
  {
    uint64_t v2 = result;
    char v3 = *(unsigned char *)(v1 + 32);
    uint64_t v4 = *(void *)(v1 + 24);
    uint64_t result = type metadata accessor for TypesettingConfiguration();
    uint64_t v5 = v2 + *(int *)(result + 20);
    *(void *)uint64_t v5 = v4;
    *(unsigned char *)(v5 + 8) = v3;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ScrollPositionBindingModifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 112) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 113) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 113) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t partial apply for closure #1 in ScrollStateRequestTransform.updateRequest<A>(id:position:targetDistance:)(void **a1)
{
  return closure #1 in ScrollStateRequestTransform.updateRequest<A>(id:position:targetDistance:)(a1, v1 + 16);
}

void *partial apply for closure #1 in View.redacted(reason:)(void *result)
{
  uint64_t v2 = *(void *)(v1 + 16);
  if ((v2 & ~*result) != 0) {
    *result |= v2;
  }
  return result;
}

__n128 protocol witness for Transition.body(content:phase:) in conformance ScaleTransition@<Q0>(char a1@<W1>, __n128 *a2@<X8>)
{
  double v3 = *(double *)v2;
  if (a1 == 1) {
    double v3 = 1.0;
  }
  a2->n128_f64[0] = v3;
  a2->n128_f64[1] = v3;
  __n128 result = *(__n128 *)(v2 + 8);
  a2[1] = result;
  return result;
}

unint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  unsigned int v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    int v16 = *v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      unint64_t result = swift_release();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
  unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v20 & 1))
  {
LABEL_15:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = v19;
  int v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:

  return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
}

{
  void *v3;
  void **v4;
  void *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  unint64_t result;
  unint64_t v19;
  char v20;
  uint64_t vars8;

  uint64_t v4 = (void **)v3;
  unsigned int v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    int v16 = *v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      unint64_t result = swift_release();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
  unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v20 & 1))
  {
LABEL_15:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = v19;
  int v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:

  return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
}

{
  void *v3;
  void **v4;
  void *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  unint64_t result;
  uint64_t v19;
  char v20;
  uint64_t vars8;

  uint64_t v4 = (void **)v3;
  unsigned int v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2, MEMORY[0x263F8E7D0], (uint64_t (*)(uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2, MEMORY[0x263F8E7D0], (uint64_t (*)(uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      int v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  int v16 = *v4;
  if (v14)
  {
LABEL_8:
    uint64_t v17 = v16[7] + 120 * v10;
    return outlined assign with take of TextEffectsAnimationController.Timing(a1, v17);
  }
LABEL_13:

  return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
}

{
  void *v3;
  void **v4;
  void *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  unint64_t result;
  uint64_t v19;
  char v20;
  uint64_t vars8;

  uint64_t v4 = (void **)v3;
  unsigned int v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2, MEMORY[0x263F8E7C8], (uint64_t (*)(uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    int v16 = *v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      unint64_t result = swift_bridgeObjectRelease();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
  unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2, MEMORY[0x263F8E7C8], (uint64_t (*)(uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
  if ((v14 & 1) != (v20 & 1))
  {
LABEL_15:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = v19;
  int v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:

  return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
}

unint64_t lazy protocol witness table accessor for type Font.DesignModifier and conformance Font.DesignModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type Font.DesignModifier and conformance Font.DesignModifier;
  if (!lazy protocol witness table cache variable for type Font.DesignModifier and conformance Font.DesignModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.DesignModifier and conformance Font.DesignModifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Font.DesignModifier and conformance Font.DesignModifier;
  if (!lazy protocol witness table cache variable for type Font.DesignModifier and conformance Font.DesignModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.DesignModifier and conformance Font.DesignModifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Font.DesignModifier and conformance Font.DesignModifier;
  if (!lazy protocol witness table cache variable for type Font.DesignModifier and conformance Font.DesignModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.DesignModifier and conformance Font.DesignModifier);
  }
  return result;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance GeometryReader<A>@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static GeometryReader._makeView(view:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), a4);
}

void static AccessibilityTraits.isKeyboardKey.getter(void *a1@<X8>)
{
  *a1 = 128;
}

uint64_t _PreferenceValue.attribute.getter()
{
  return *(void *)v0;
}

uint64_t type metadata completion function for Box()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AttributeScopes.SwiftUIAttributes.FontAttribute()
{
  return &type metadata for AttributeScopes.SwiftUIAttributes.FontAttribute;
}

ValueMetadata *type metadata accessor for Axis.Set()
{
  return &type metadata for Axis.Set;
}

uint64_t Color._apply(to:)(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24) != 2) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 112))(a2, a1);
  }
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 32);
  char v6 = *(unsigned char *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 56);
  if (*(uint64_t *)a1 < 1)
  {
    outlined copy of _ShapeStyle_Shape.Result(*(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v10 = a2;
  }
  else
  {
    v12[0] = *(void *)(a1 + 48);
    v12[1] = v7;
    unsigned int v8 = *(float (**)(uint64_t, void *))(*(void *)a2 + 152);
    outlined copy of _ShapeStyle_Shape.Result(v5, v6);
    swift_retain();
    swift_retain_n();
    swift_retain_n();
    float v9 = v8(v4, v12);
    swift_release();
    swift_release();
    type metadata accessor for ColorBox<Color.OpacityColor>();
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 16) = a2;
    *(double *)(v10 + 24) = v9;
  }
  swift_retain();
  outlined consume of _ShapeStyle_Shape.Result(v5, v6);
  swift_release();
  swift_release();
  swift_release();
  uint64_t result = outlined consume of _ShapeStyle_Shape.Result(v5, v6);
  *(void *)(a1 + 32) = v10;
  *(unsigned char *)(a1 + 40) = 3;
  return result;
}

uint64_t AnyColorBox.apply(to:)(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 24) == 2)
  {
    uint64_t v3 = *(void *)a1;
    uint64_t v4 = *(void *)(a1 + 32);
    char v5 = *(unsigned char *)(a1 + 40);
    if (*(uint64_t *)a1 < 1)
    {
      swift_retain();
    }
    else
    {
      uint64_t v6 = *(void *)(a1 + 56);
      v13[0] = *(void *)(a1 + 48);
      v13[1] = v6;
      uint64_t v7 = *(float (**)(uint64_t, void *))(*(void *)v1 + 152);
      swift_retain();
      outlined copy of _ShapeStyle_Shape.Result(v4, v5);
      swift_retain();
      swift_retain_n();
      swift_retain_n();
      float v8 = v7(v3, v13);
      swift_release();
      swift_release();
      type metadata accessor for ColorBox<Color.OpacityColor>();
      uint64_t v9 = swift_allocObject();
      *(void *)(v9 + 16) = v1;
      *(double *)(v9 + 24) = v8;
      outlined consume of _ShapeStyle_Shape.Result(v4, v5);
      swift_release();
      swift_release();
      swift_release();
      uint64_t v1 = v9;
    }
    uint64_t result = outlined consume of _ShapeStyle_Shape.Result(v4, v5);
    *(void *)(a1 + 32) = v1;
    *(unsigned char *)(a1 + 40) = 3;
  }
  else
  {
    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)v1 + 112);
    uint64_t v11 = swift_retain();
    v10(v11, a1);
    return swift_release();
  }
  return result;
}

uint64_t ColorBox.apply(color:to:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)(*(void *)v2 + 168) + 24))(a1, a2, *(void *)(*(void *)v2 + 160));
}

uint64_t SystemColorType.apply(color:to:)(uint64_t a1, uint64_t a2)
{
  int v5 = *v2;
  if (one-time initialization token for v3 != -1) {
    swift_once();
  }
  unsigned int v6 = static Semantics.v3;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC == 1)
  {
    if ((dyld_program_sdk_at_least() & 1) == 0) {
      return specialized ColorProvider._apply(color:to:)(a1, a2, v5);
    }
  }
  else if (static Semantics.forced < v6)
  {
    return specialized ColorProvider._apply(color:to:)(a1, a2, v5);
  }
  if ((v5 - 13) < 5)
  {
    LOBYTE(v20) = v5 - 13;
    uint64_t v21 = a1;
    return LegacyContentStyle._apply(to:)(a2);
  }
  uint64_t v8 = *(void *)(a2 + 48);
  if (*(void *)(a2 + 56))
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v8, &v20);
    swift_release_n();
    swift_release_n();
    uint64_t v9 = v21;
    if ((_BYTE)v21 == 0xFF) {
      return specialized ColorProvider._apply(color:to:)(a1, a2, v5);
    }
    uint64_t v10 = v20;
    swift_retain_n();
    swift_retain_n();
    uint64_t v11 = specialized PropertyList.Tracker.value<A>(_:for:)(v8);
    uint64_t v13 = v12;
    swift_release_n();
  }
  else
  {
    uint64_t v14 = swift_retain_n();
    uint64_t v15 = specialized find<A>(_:key:)(v14);
    if (v15)
    {
      uint64_t v10 = *(void *)(v15 + 72);
      uint64_t v9 = *(void *)(v15 + 80);
      outlined copy of Material?(v10, v9);
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v9 = 255;
    }
    swift_release_n();
    if ((_BYTE)v9 == 0xFF) {
      return specialized ColorProvider._apply(color:to:)(a1, a2, v5);
    }
    uint64_t v16 = swift_retain_n();
    uint64_t v11 = specialized closure #1 in PropertyList.subscript.getter(v16, (uint64_t)v19);
    uint64_t v13 = v17;
    swift_release();
  }
  swift_release_n();
  if (v11)
  {
    char v18 = v5;
    uint64_t v20 = v10;
    LOBYTE(v21) = v9;
    HIDWORD(v21) = HIDWORD(v9);
    (*(void (**)(char *, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t))(v13 + 8))(&v18, a1, &v20, a2, v11, v13);
    return outlined consume of Material?(v10, v9);
  }
  outlined consume of Material?(v10, v9);
  return specialized ColorProvider._apply(color:to:)(a1, a2, v5);
}

uint64_t _ForegroundStyleModifier.ForegroundStyleEnvironment.value.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for _ForegroundStyleModifier();
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v14 - v7;
  MaterialView.ChildEnvironment.environment.getter(a3);
  _DefaultForegroundStyleModifier.DefaultForegroundStyleEnvironment.modifier.getter((uint64_t (*)(void))type metadata accessor for _ForegroundStyleModifier, (uint64_t)v8);
  uint64_t v9 = *a3;
  uint64_t v10 = a3[1];
  v16[0] = *a3;
  v16[1] = v10;
  default argument 0 of ShapeStyle.copyStyle(name:in:foregroundStyle:)(&v15);
  swift_retain();
  swift_retain();
  uint64_t v11 = ShapeStyle.copyStyle(name:in:foregroundStyle:)((uint64_t)&v15, (uint64_t)v16, 0, a1, a2);
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(*(void *)(a1 - 8) + 8))(v8, a1);
  swift_retain_n();
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a3, v11);
  swift_release();
  swift_release();
  if (a3[1])
  {
    uint64_t v12 = *a3;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v9, v12);
    swift_release();
    swift_release();
  }
  swift_release();
  return swift_release();
}

uint64_t ShapeStyle.copyStyle(name:in:foregroundStyle:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *v11;
  uint64_t v14 = *v13;
  uint64_t v15 = v13[1];
  v24[1] = 0;
  _OWORD v24[2] = 0;
  v24[0] = v12;
  char v25 = 3;
  uint64_t v26 = 0;
  char v27 = 5;
  uint64_t v28 = v14;
  uint64_t v29 = v15;
  uint64_t v30 = v16;
  long long v31 = 0u;
  long long v32 = 0u;
  char v33 = 1;
  __int16 v34 = 0;
  char v18 = *(void (**)(void *, uint64_t, uint64_t))(v17 + 32);
  swift_retain();
  swift_retain();
  swift_retain();
  v18(v24, a4, a5);
  uint64_t v19 = v26;
  char v20 = v27;
  if (v27 == 2)
  {
    uint64_t v21 = swift_retain();
    outlined consume of _ShapeStyle_Shape.Result(v21, 2);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v5, a4);
    uint64_t v22 = AnyShapeStyle.init<A>(_:)((uint64_t)v10, a4);
    outlined consume of _ShapeStyle_Shape.Result(v19, v20);
    swift_release();
    swift_release();
    swift_release();
    return v22;
  }
  return v19;
}

uint64_t AnyShapeStyle.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)v16 - v8;
  double v11 = MEMORY[0x270FA5388](v10);
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16);
  v12((char *)v16 - v13, a1, a2, v11);
  if ((swift_dynamicCast() & 1) != 0
    || (((void (*)(char *, uint64_t, uint64_t))v12)(v9, a1, a2), (swift_dynamicCast() & 1) != 0)
    || (((void (*)(char *, uint64_t, uint64_t))v12)(v6, a1, a2), (swift_dynamicCast() & 1) != 0))
  {
    uint64_t v14 = v16[1];
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, a2);
  }
  else
  {
    type metadata accessor for ShapeStyleBox();
    return AnchorBox.__allocating_init(_:)(a1);
  }
  return v14;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<ForegroundStyleKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<ForegroundStyleKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<ForegroundStyleKey>, (uint64_t)&type metadata for ForegroundStyleKey, (uint64_t)&protocol witness table for ForegroundStyleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ForegroundStyleKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<ForegroundStyleKey>>);
    }
  }
}

uint64_t UpdateEnvironment.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(a3 + 16))(a1, a4, a2, a3);
}

uint64_t MaterialView.ChildEnvironment.environment.getter@<X0>(void *a1@<X8>)
{
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v4 = *Value;
  uint64_t v3 = Value[1];
  *a1 = v4;
  a1[1] = v3;
  swift_retain();

  return swift_retain();
}

void default argument 0 of ShapeStyle.copyStyle(name:in:foregroundStyle:)(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t HierarchicalShapeStyle._apply(to:)(uint64_t a1, unsigned int a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 24);
  if (v4 == 5 && (*(void *)a1 == 1 ? (BOOL v5 = *(_OWORD *)(a1 + 8) == 0) : (BOOL v5 = 0), v5))
  {
    if (one-time initialization token for sharedPrimary != -1) {
      swift_once();
    }
    uint64_t v12 = static HierarchicalShapeStyle.sharedPrimary;
    uint64_t v13 = *(void *)(a1 + 32);
    char v14 = *(unsigned char *)(a1 + 40);
    swift_retain();
    uint64_t result = outlined consume of _ShapeStyle_Shape.Result(v13, v14);
    *(void *)(a1 + 32) = v12;
    *(unsigned char *)(a1 + 40) = 2;
  }
  else
  {
    if ((*(unsigned char *)(a1 + 106) & 1) == 0)
    {
      *(unsigned char *)(a1 + 106) |= 1u;
      uint64_t v6 = *(void *)(a1 + 32);
      char v7 = *(unsigned char *)(a1 + 40);
      uint64_t v8 = *(void *)(a1 + 48);
      uint64_t v9 = *(void *)(a1 + 56);
      if (*(void *)(a1 + 64))
      {
        uint64_t v10 = *(void *)(a1 + 64);
      }
      else
      {
        int v24 = *(unsigned __int8 *)(a1 + 105);
        uint64_t v25 = *(void *)(a1 + 48);
        uint64_t v26 = v9;
        outlined copy of _ShapeStyle_Shape.Result(v6, v7);
        swift_retain_n();
        swift_retain_n();
        uint64_t v15 = EnvironmentValues.foregroundStyle.getter();
        if (v15)
        {
          uint64_t v10 = v15;
          swift_release();
          swift_release();
          outlined consume of _ShapeStyle_Shape.Result(v6, v7);
          swift_release();
          swift_release();
        }
        else
        {
          uint64_t v25 = v8;
          uint64_t v26 = v9;
          uint64_t v10 = EnvironmentValues.defaultForegroundStyle.getter();
          swift_release();
          swift_release();
          outlined consume of _ShapeStyle_Shape.Result(v6, v7);
          swift_release();
          swift_release();
          if (!v10)
          {
            if (v24 == 2)
            {
              uint64_t result = SeparatorShapeStyle._apply(to:)(a1);
              goto LABEL_29;
            }
            swift_retain();
            if (v9)
            {
              swift_retain_n();
              uint64_t v18 = swift_retain();
              specialized PropertyList.Tracker.value<A>(_:for:)(v18, &v25);
              swift_release_n();
              swift_release_n();
              uint64_t v19 = v25;
              uint64_t v20 = v26;
            }
            else
            {
              swift_retain_n();
              swift_retain();
              uint64_t v21 = specialized find<A>(_:key:)(v8);
              if (v21)
              {
                uint64_t v19 = *(void *)(v21 + 72);
                uint64_t v20 = *(void *)(v21 + 80);
                outlined copy of Material?(v19, v20);
              }
              else
              {
                uint64_t v19 = 0;
                uint64_t v20 = 255;
              }
              swift_release();
              swift_release_n();
            }
            if ((_BYTE)v20 == 0xFF)
            {
              uint64_t result = specialized HierarchicalShapeStyle.apply<A>(_:to:)(a1, a2);
              goto LABEL_29;
            }
            uint64_t v25 = v19;
            LOBYTE(v26) = v20;
            HIDWORD(v26) = HIDWORD(v20);
            if (a2)
            {
              uint64_t v22 = a2;
              if (v4 == 3)
              {
                type metadata accessor for ShapeStyleBox<OffsetShapeStyle<ForegroundMaterialStyle>>(0, &lazy cache variable for type metadata for ShapeStyleBox<OffsetShapeStyle<ForegroundMaterialStyle>>, &lazy cache variable for type metadata for OffsetShapeStyle<ForegroundMaterialStyle>, (uint64_t)&type metadata for ForegroundMaterialStyle, (uint64_t)&protocol witness table for ForegroundMaterialStyle);
                uint64_t v23 = swift_allocObject();
                *(void *)(v23 + 16) = v19;
                *(unsigned char *)(v23 + 24) = v20;
                *(_DWORD *)(v23 + 28) = HIDWORD(v20);
                *(void *)(v23 + 32) = v22;
                uint64_t result = outlined consume of _ShapeStyle_Shape.Result(v6, v7);
                *(void *)(a1 + 32) = v23;
                goto LABEL_26;
              }
              outlined copy of Material.ID(v19, v20);
              specialized OffsetShapeStyle._apply(to:)(a1, v19, v20 & 0xFFFFFFFF000000FFLL, a2);
              outlined consume of Material?(v19, v20);
            }
            else
            {
              if (v4 == 3)
              {
                type metadata accessor for OffsetShapeStyle<ForegroundMaterialStyle>(0, &lazy cache variable for type metadata for ShapeStyleBox<ForegroundMaterialStyle>, (uint64_t)&type metadata for ForegroundMaterialStyle, (uint64_t)&protocol witness table for ForegroundMaterialStyle, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ShapeStyleBox);
                uint64_t v16 = swift_allocObject();
                *(void *)(v16 + 16) = v19;
                *(unsigned char *)(v16 + 24) = v20;
                *(_DWORD *)(v16 + 28) = HIDWORD(v20);
                uint64_t result = outlined consume of _ShapeStyle_Shape.Result(v6, v7);
                goto LABEL_25;
              }
              ForegroundMaterialStyle._apply(to:)(a1);
            }
            uint64_t result = outlined consume of Material?(v19, v20);
            goto LABEL_29;
          }
        }
      }
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v16 = specialized ShapeStyle.primaryStyle(in:)(v8, v9, v10);
      swift_release();
      swift_release();
      if (v16)
      {
        if (a2)
        {
LABEL_20:
          if (v4 == 3)
          {
            type metadata accessor for ShapeStyleBox<OffsetShapeStyle<ForegroundMaterialStyle>>(0, &lazy cache variable for type metadata for ShapeStyleBox<OffsetShapeStyle<AnyShapeStyle>>, (unint64_t *)&lazy cache variable for type metadata for OffsetShapeStyle<AnyShapeStyle>, (uint64_t)&type metadata for AnyShapeStyle, (uint64_t)&protocol witness table for AnyShapeStyle);
            uint64_t v17 = swift_allocObject();
            *(void *)(v17 + 16) = v16;
            *(void *)(v17 + 24) = a2;
            swift_retain();
            outlined consume of _ShapeStyle_Shape.Result(v6, v7);
            swift_release();
            uint64_t result = swift_release();
            *(void *)(a1 + 32) = v17;
LABEL_26:
            *(unsigned char *)(a1 + 40) = 2;
            goto LABEL_29;
          }
          swift_retain();
          specialized OffsetShapeStyle._apply(to:)((uint64_t *)a1, v16, (void *)a2);
          swift_release();
          uint64_t result = swift_release_n();
LABEL_29:
          if (*(unsigned char *)(a1 + 106)) {
            *(unsigned char *)(a1 + 106) &= ~1u;
          }
          return result;
        }
      }
      else
      {
        swift_retain();
        uint64_t v16 = v10;
        if (a2) {
          goto LABEL_20;
        }
      }
      if (v4 != 3)
      {
        (*(void (**)(uint64_t))(*(void *)v16 + 80))(a1);
        swift_release();
        uint64_t result = swift_release();
        goto LABEL_29;
      }
      swift_retain();
      outlined consume of _ShapeStyle_Shape.Result(v6, v7);
      swift_release();
      uint64_t result = swift_release();
LABEL_25:
      *(void *)(a1 + 32) = v16;
      goto LABEL_26;
    }
    if (one-time initialization token for sharedPrimary != -1) {
      swift_once();
    }
    return (*(uint64_t (**)(uint64_t))(*(void *)static LegacyContentStyle.sharedPrimary + 80))(a1);
  }
  return result;
}

uint64_t EnvironmentValues.foregroundStyle.getter(uint64_t (*a1)(uint64_t), uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = *v2;
  if (v2[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v5 = a1(v3);
    swift_release_n();
  }
  else
  {
    uint64_t v7 = swift_retain_n();
    uint64_t v8 = a2(v7);
    if (v8)
    {
      uint64_t v5 = *(void *)(v8 + 72);
      swift_retain();
    }
    else
    {
      uint64_t v5 = 0;
    }
    swift_release();
  }
  swift_release_n();
  return v5;
}

uint64_t specialized PropertyList.Tracker.value<A>(_:for:)(uint64_t a1)
{
  void (*v11)(long long *__return_ptr);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  long long v20[2];
  void v21[3];
  uint64_t v22;
  _UNKNOWN **v23;

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (a1)
  {
    if (v4 == *(void *)(a1 + 64))
    {
LABEL_3:
      type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ForegroundStyleKey>, (uint64_t)&type metadata for ForegroundStyleKey, (uint64_t)&protocol witness table for ForegroundStyleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      uint64_t v6 = v5;
      uint64_t v7 = *(void *)(v3 + 32);
      if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
      {
        outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v20);
        outlined init with take of ScrollStateRequest(v20, (uint64_t)v21);
        uint64_t v10 = v23;
        __swift_project_boxed_opaque_existential_1(v21, v22);
        double v11 = (void (*)(long long *__return_ptr))v10[1];
        type metadata accessor for [LayoutDirection](0, &lazy cache variable for type metadata for AnyShapeStyle?, (uint64_t)&type metadata for AnyShapeStyle, MEMORY[0x263F8D8F0]);
        v11(v20);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
      }
      else
      {
        uint64_t v15 = swift_retain();
        uint64_t v16 = specialized find<A>(_:key:)(v15);
        if (v16)
        {
          uint64_t v17 = *(void *)(v16 + 72);
          swift_retain();
        }
        else
        {
          uint64_t v17 = 0;
        }
        swift_release();
        *(void *)&v20[0] = v17;
        type metadata accessor for TrackedValue<EnvironmentPropertyKey<ForegroundStyleKey>>();
        uint64_t v22 = v18;
        uint64_t v23 = &protocol witness table for TrackedValue<A>;
        v21[0] = v17;
        swift_retain();
        specialized Dictionary.subscript.setter((uint64_t)v21, v6);
      }
      goto LABEL_15;
    }
  }
  else if (!v4)
  {
    goto LABEL_3;
  }
  *(unsigned char *)(v3 + 56) = 1;
  uint64_t v12 = swift_retain();
  uint64_t v13 = specialized find<A>(_:key:)(v12);
  if (v13)
  {
    char v14 = *(void *)(v13 + 72);
    swift_retain();
  }
  else
  {
    char v14 = 0;
  }
  swift_release();
  *(void *)&v20[0] = v14;
LABEL_15:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(void *)&v20[0];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  uint64_t v13;
  _UNKNOWN **v14;
  ValueMetadata *v15;
  uint64_t v16;
  uint64_t v17;
  _UNKNOWN **v18;
  ValueMetadata *v19;
  uint64_t v20;
  uint64_t v21;
  long long v23[2];
  void v24[3];
  uint64_t v25;
  _UNKNOWN **v26;

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (a1)
  {
    if (v4 == *(void *)(a1 + 64))
    {
LABEL_3:
      type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SystemColorDefinitionKey>, (uint64_t)&type metadata for SystemColorDefinitionKey, (uint64_t)&protocol witness table for SystemColorDefinitionKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      uint64_t v6 = v5;
      uint64_t v7 = *(void *)(v3 + 32);
      if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
      {
        outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v23);
        outlined init with take of ScrollStateRequest(v23, (uint64_t)v24);
        uint64_t v10 = v25;
        double v11 = v26;
        __swift_project_boxed_opaque_existential_1(v24, v25);
        ((void (*)(long long *__return_ptr, ValueMetadata *, uint64_t, _UNKNOWN **))v11[1])(v23, &type metadata for SystemColorDefinitionType, v10, v11);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
      }
      else
      {
        uint64_t v16 = swift_retain();
        uint64_t v17 = specialized find<A>(_:key:)(v16);
        if (v17)
        {
          uint64_t v19 = *(ValueMetadata **)(v17 + 72);
          uint64_t v18 = *(_UNKNOWN ***)(v17 + 80);
        }
        else
        {
          uint64_t v18 = &protocol witness table for CoreUIDefaultSystemColorDefinition;
          uint64_t v19 = &type metadata for CoreUIDefaultSystemColorDefinition;
        }
        swift_release();
        *(void *)&v23[0] = v19;
        *((void *)&v23[0] + 1) = v18;
        type metadata accessor for TrackedValue<EnvironmentPropertyKey<SystemColorDefinitionKey>>();
        uint64_t v25 = v20;
        uint64_t v26 = &protocol witness table for TrackedValue<A>;
        v24[0] = v19;
        v24[1] = v18;
        specialized Dictionary.subscript.setter((uint64_t)v24, v6);
      }
      goto LABEL_15;
    }
  }
  else if (!v4)
  {
    goto LABEL_3;
  }
  *(unsigned char *)(v3 + 56) = 1;
  uint64_t v12 = swift_retain();
  uint64_t v13 = specialized find<A>(_:key:)(v12);
  if (v13)
  {
    uint64_t v15 = *(ValueMetadata **)(v13 + 72);
    char v14 = *(_UNKNOWN ***)(v13 + 80);
  }
  else
  {
    char v14 = &protocol witness table for CoreUIDefaultSystemColorDefinition;
    uint64_t v15 = &type metadata for CoreUIDefaultSystemColorDefinition;
  }
  swift_release();
  *(void *)&v23[0] = v15;
  *((void *)&v23[0] + 1) = v14;
LABEL_15:
  uint64_t v21 = *(void *)&v23[0];
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return v21;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  _UNKNOWN **v10;
  void (*v11)(long long *__return_ptr);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  long long v20[2];
  void v21[3];
  uint64_t v22;
  _UNKNOWN **v23;

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (a1)
  {
    if (v4 == *(void *)(a1 + 64))
    {
LABEL_3:
      type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultForegroundStyleKey>, (uint64_t)&type metadata for DefaultForegroundStyleKey, (uint64_t)&protocol witness table for DefaultForegroundStyleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      uint64_t v6 = v5;
      uint64_t v7 = *(void *)(v3 + 32);
      if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
      {
        outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v20);
        outlined init with take of ScrollStateRequest(v20, (uint64_t)v21);
        uint64_t v10 = v23;
        __swift_project_boxed_opaque_existential_1(v21, v22);
        double v11 = (void (*)(long long *__return_ptr))v10[1];
        type metadata accessor for [LayoutDirection](0, &lazy cache variable for type metadata for AnyShapeStyle?, (uint64_t)&type metadata for AnyShapeStyle, MEMORY[0x263F8D8F0]);
        v11(v20);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
      }
      else
      {
        uint64_t v15 = swift_retain();
        uint64_t v16 = specialized find<A>(_:key:)(v15);
        if (v16)
        {
          uint64_t v17 = *(void *)(v16 + 72);
          swift_retain();
        }
        else
        {
          uint64_t v17 = 0;
        }
        swift_release();
        *(void *)&v20[0] = v17;
        type metadata accessor for TrackedValue<EnvironmentPropertyKey<DefaultForegroundStyleKey>>();
        uint64_t v22 = v18;
        uint64_t v23 = &protocol witness table for TrackedValue<A>;
        v21[0] = v17;
        swift_retain();
        specialized Dictionary.subscript.setter((uint64_t)v21, v6);
      }
      goto LABEL_15;
    }
  }
  else if (!v4)
  {
    goto LABEL_3;
  }
  *(unsigned char *)(v3 + 56) = 1;
  uint64_t v12 = swift_retain();
  uint64_t v13 = specialized find<A>(_:key:)(v12);
  if (v13)
  {
    char v14 = *(void *)(v13 + 72);
    swift_retain();
  }
  else
  {
    char v14 = 0;
  }
  swift_release();
  *(void *)&v20[0] = v14;
LABEL_15:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(void *)&v20[0];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  long long v18[2];
  void v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    uint64_t v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_release();
    LOBYTE(v18[0]) = v13 & 1;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SensitiveContentKey>, (uint64_t)&type metadata for SensitiveContentKey, (uint64_t)&protocol witness table for SensitiveContentKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    uint64_t v10 = v20;
    double v11 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    ((void (*)(long long *__return_ptr, void, uint64_t, _UNKNOWN **))v11[1])(v18, MEMORY[0x263F8D4F8], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    char v14 = swift_retain();
    uint64_t v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_release();
    LOBYTE(v18[0]) = v15 & 1;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<SensitiveContentKey>>();
    uint64_t v20 = v16;
    uint64_t v21 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v19[0]) = v15 & 1;
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LOBYTE(v18[0]);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  long long v18[2];
  void v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    uint64_t v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_release();
    LOBYTE(v18[0]) = v13 & 1;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilityEnabledKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilityEnabledKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilityEnabledKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    uint64_t v10 = v20;
    double v11 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    ((void (*)(long long *__return_ptr, void, uint64_t, _UNKNOWN **))v11[1])(v18, MEMORY[0x263F8D4F8], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    char v14 = swift_retain();
    uint64_t v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_release();
    LOBYTE(v18[0]) = v15 & 1;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.AccessibilityEnabledKey>>();
    uint64_t v20 = v16;
    uint64_t v21 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v19[0]) = v15 & 1;
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LOBYTE(v18[0]);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  long long v18[2];
  void v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    uint64_t v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_release();
    LOBYTE(v18[0]) = v13 & 1;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DisableLinkColorKey>, (uint64_t)&type metadata for EnvironmentValues.DisableLinkColorKey, (uint64_t)&protocol witness table for EnvironmentValues.DisableLinkColorKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    uint64_t v10 = v20;
    double v11 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    ((void (*)(long long *__return_ptr, void, uint64_t, _UNKNOWN **))v11[1])(v18, MEMORY[0x263F8D4F8], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    char v14 = swift_retain();
    uint64_t v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_release();
    LOBYTE(v18[0]) = v15 & 1;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.DisableLinkColorKey>>();
    uint64_t v20 = v16;
    uint64_t v21 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v19[0]) = v15 & 1;
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LOBYTE(v18[0]);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  _UNKNOWN **v10;
  void (*v11)(long long *__return_ptr);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned char v18[8];
  long long v19[2];
  void v20[3];
  uint64_t v21;
  _UNKNOWN **v22;
  unsigned char v23[16];

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    uint64_t v13 = specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v23);
    swift_release();
    *(void *)&v19[0] = v13;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundStyleKey>, (uint64_t)&type metadata for BackgroundStyleKey, (uint64_t)&protocol witness table for BackgroundStyleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    uint64_t v10 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    double v11 = (void (*)(long long *__return_ptr))v10[1];
    type metadata accessor for [LayoutDirection](0, &lazy cache variable for type metadata for AnyShapeStyle?, (uint64_t)&type metadata for AnyShapeStyle, MEMORY[0x263F8D8F0]);
    v11(v19);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    char v14 = swift_retain();
    uint64_t v15 = specialized closure #1 in PropertyList.subscript.getter(v14, (uint64_t)v18);
    swift_release();
    *(void *)&v19[0] = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<BackgroundStyleKey>>();
    uint64_t v21 = v16;
    uint64_t v22 = &protocol witness table for TrackedValue<A>;
    v20[0] = v15;
    swift_retain();
    specialized Dictionary.subscript.setter((uint64_t)v20, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(void *)&v19[0];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  long long v18[2];
  void v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    uint64_t v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_release();
    LOBYTE(v18[0]) = v13 & 1;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AllowsTighteningKey>, (uint64_t)&type metadata for AllowsTighteningKey, (uint64_t)&protocol witness table for AllowsTighteningKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    uint64_t v10 = v20;
    double v11 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    ((void (*)(long long *__return_ptr, void, uint64_t, _UNKNOWN **))v11[1])(v18, MEMORY[0x263F8D4F8], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    char v14 = swift_retain();
    uint64_t v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_release();
    LOBYTE(v18[0]) = v15 & 1;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<AllowsTighteningKey>>();
    uint64_t v20 = v16;
    uint64_t v21 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v19[0]) = v15 & 1;
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LOBYTE(v18[0]);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  unsigned char v18[8];
  long long v19[2];
  void v20[3];
  uint64_t v21;
  _UNKNOWN **v22;
  unsigned char v23[16];

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    uint64_t v13 = specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v23);
    swift_release();
    LOBYTE(v19[0]) = v13 & 1;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AvoidsOrphansKey>, (uint64_t)&type metadata for AvoidsOrphansKey, (uint64_t)&protocol witness table for AvoidsOrphansKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    uint64_t v10 = v21;
    double v11 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    ((void (*)(long long *__return_ptr, void, uint64_t, _UNKNOWN **))v11[1])(v19, MEMORY[0x263F8D4F8], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    char v14 = swift_retain();
    uint64_t v15 = specialized closure #1 in PropertyList.subscript.getter(v14, (uint64_t)v18);
    swift_release();
    v15 &= 1u;
    LOBYTE(v19[0]) = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<AvoidsOrphansKey>>();
    uint64_t v21 = v16;
    uint64_t v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v15;
    specialized Dictionary.subscript.setter((uint64_t)v20, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LOBYTE(v19[0]);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  _UNKNOWN **v10;
  void (*v11)(long long *__return_ptr);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned char v22[8];
  long long v23[2];
  void v24[3];
  uint64_t v25;
  _UNKNOWN **v26;
  unsigned char v27[16];

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    uint64_t v13 = specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v27);
    uint64_t v15 = v14;
    swift_release();
    *(void *)&v23[0] = v13;
    *((void *)&v23[0] + 1) = v15;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.BridgedEnvironmentResolverKey>, (uint64_t)&type metadata for EnvironmentValues.BridgedEnvironmentResolverKey, (uint64_t)&protocol witness table for EnvironmentValues.BridgedEnvironmentResolverKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v23);
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v24);
    uint64_t v10 = v26;
    __swift_project_boxed_opaque_existential_1(v24, v25);
    double v11 = (void (*)(long long *__return_ptr))v10[1];
    type metadata accessor for BridgedEnvironmentResolver.Type?();
    v11(v23);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  }
  else
  {
    uint64_t v16 = swift_retain();
    uint64_t v17 = specialized closure #1 in PropertyList.subscript.getter(v16, (uint64_t)v22);
    uint64_t v19 = v18;
    swift_release();
    *(void *)&v23[0] = v17;
    *((void *)&v23[0] + 1) = v19;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.BridgedEnvironmentResolverKey>>();
    uint64_t v25 = v20;
    uint64_t v26 = &protocol witness table for TrackedValue<A>;
    v24[0] = v17;
    v24[1] = v19;
    specialized Dictionary.subscript.setter((uint64_t)v24, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(void *)&v23[0];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  _UNKNOWN **v10;
  void (*v11)(long long *__return_ptr);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned char v18[8];
  long long v19[2];
  void v20[3];
  uint64_t v21;
  _UNKNOWN **v22;
  unsigned char v23[16];

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    uint64_t v13 = specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v23);
    swift_release();
    *(void *)&v19[0] = v13;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TintKey>, (uint64_t)&type metadata for TintKey, (uint64_t)&protocol witness table for TintKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    uint64_t v10 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    double v11 = (void (*)(long long *__return_ptr))v10[1];
    type metadata accessor for [LayoutDirection](0, &lazy cache variable for type metadata for AnyShapeStyle?, (uint64_t)&type metadata for AnyShapeStyle, MEMORY[0x263F8D8F0]);
    v11(v19);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    char v14 = swift_retain();
    uint64_t v15 = specialized closure #1 in PropertyList.subscript.getter(v14, (uint64_t)v18);
    swift_release();
    *(void *)&v19[0] = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<TintKey>>();
    uint64_t v21 = v16;
    uint64_t v22 = &protocol witness table for TrackedValue<A>;
    v20[0] = v15;
    swift_retain();
    specialized Dictionary.subscript.setter((uint64_t)v20, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(void *)&v19[0];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  unsigned char v18[8];
  long long v19[2];
  void v20[3];
  uint64_t v21;
  _UNKNOWN **v22;
  unsigned char v23[16];

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    uint64_t v13 = specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v23);
    swift_release();
    LOBYTE(v19[0]) = v13 & 1;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnabledKey>, (uint64_t)&type metadata for EnabledKey, (uint64_t)&protocol witness table for EnabledKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    uint64_t v10 = v21;
    double v11 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    ((void (*)(long long *__return_ptr, void, uint64_t, _UNKNOWN **))v11[1])(v19, MEMORY[0x263F8D4F8], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    char v14 = swift_retain();
    uint64_t v15 = specialized closure #1 in PropertyList.subscript.getter(v14, (uint64_t)v18);
    swift_release();
    v15 &= 1u;
    LOBYTE(v19[0]) = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnabledKey>>();
    uint64_t v21 = v16;
    uint64_t v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v15;
    specialized Dictionary.subscript.setter((uint64_t)v20, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LOBYTE(v19[0]);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  _UNKNOWN **v10;
  void (*v11)(long long *__return_ptr);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned char v18[8];
  long long v19[2];
  void v20[3];
  uint64_t v21;
  _UNKNOWN **v22;
  unsigned char v23[16];

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    uint64_t v13 = specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v23);
    swift_release();
    *(void *)&v19[0] = v13;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccentColorKey>, (uint64_t)&type metadata for AccentColorKey, (uint64_t)&protocol witness table for AccentColorKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    uint64_t v10 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    double v11 = (void (*)(long long *__return_ptr))v10[1];
    type metadata accessor for [LayoutDirection](0, &lazy cache variable for type metadata for Color?, (uint64_t)&type metadata for Color, MEMORY[0x263F8D8F0]);
    v11(v19);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    char v14 = swift_retain();
    uint64_t v15 = specialized closure #1 in PropertyList.subscript.getter(v14, (uint64_t)v18);
    swift_release();
    *(void *)&v19[0] = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<AccentColorKey>>();
    uint64_t v21 = v16;
    uint64_t v22 = &protocol witness table for TrackedValue<A>;
    v20[0] = v15;
    swift_retain();
    specialized Dictionary.subscript.setter((uint64_t)v20, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(void *)&v19[0];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  unsigned char v18[8];
  long long v19[2];
  void v20[3];
  uint64_t v21;
  _UNKNOWN **v22;
  unsigned char v23[16];

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    uint64_t v13 = specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v23);
    swift_release();
    LOBYTE(v19[0]) = v13 & 1;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AppearsActiveKey>, (uint64_t)&type metadata for AppearsActiveKey, (uint64_t)&protocol witness table for AppearsActiveKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    uint64_t v10 = v21;
    double v11 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    ((void (*)(long long *__return_ptr, void, uint64_t, _UNKNOWN **))v11[1])(v19, MEMORY[0x263F8D4F8], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    char v14 = swift_retain();
    uint64_t v15 = specialized closure #1 in PropertyList.subscript.getter(v14, (uint64_t)v18);
    swift_release();
    v15 &= 1u;
    LOBYTE(v19[0]) = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<AppearsActiveKey>>();
    uint64_t v21 = v16;
    uint64_t v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v15;
    specialized Dictionary.subscript.setter((uint64_t)v20, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LOBYTE(v19[0]);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  _UNKNOWN **v10;
  void (*v11)(long long *__return_ptr);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  long long v18[2];
  void v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    uint64_t v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_bridgeObjectRetain();
    swift_release();
    *(void *)&v18[0] = v13;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SymbolEffectsKey>, (uint64_t)&type metadata for EnvironmentValues.SymbolEffectsKey, (uint64_t)&protocol witness table for EnvironmentValues.SymbolEffectsKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    uint64_t v10 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    double v11 = (void (*)(long long *__return_ptr))v10[1];
    type metadata accessor for [LayoutDirection](0, &lazy cache variable for type metadata for [_SymbolEffect.Identified], (uint64_t)&type metadata for _SymbolEffect.Identified, MEMORY[0x263F8D488]);
    v11(v18);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    char v14 = swift_retain();
    uint64_t v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_bridgeObjectRetain();
    swift_release();
    *(void *)&v18[0] = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.SymbolEffectsKey>>();
    uint64_t v20 = v16;
    uint64_t v21 = &protocol witness table for TrackedValue<A>;
    v19[0] = v15;
    swift_bridgeObjectRetain();
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(void *)&v18[0];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  _UNKNOWN **v10;
  void (*v11)(long long *__return_ptr);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  long long v18[2];
  void v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    uint64_t v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_bridgeObjectRetain();
    swift_release();
    *(void *)&v18[0] = v13;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<FontModifiersKey>, (uint64_t)&type metadata for FontModifiersKey, (uint64_t)&protocol witness table for FontModifiersKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    uint64_t v10 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    double v11 = (void (*)(long long *__return_ptr))v10[1];
    type metadata accessor for Date?(0, &lazy cache variable for type metadata for [AnyFontModifier], (uint64_t (*)(uint64_t))type metadata accessor for AnyFontModifier, MEMORY[0x263F8D488]);
    v11(v18);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    char v14 = swift_retain();
    uint64_t v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_bridgeObjectRetain();
    swift_release();
    *(void *)&v18[0] = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<FontModifiersKey>>();
    uint64_t v20 = v16;
    uint64_t v21 = &protocol witness table for TrackedValue<A>;
    v19[0] = v15;
    swift_bridgeObjectRetain();
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(void *)&v18[0];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned char v18[8];
  long long v19[2];
  void v20[3];
  uint64_t v21;
  _UNKNOWN **v22;
  unsigned char v23[16];

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    uint64_t v13 = specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v23);
    swift_release();
    *(void *)&v19[0] = v13;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.CUIAsssetIdiomKey>, (uint64_t)&type metadata for EnvironmentValues.CUIAsssetIdiomKey, (uint64_t)&protocol witness table for EnvironmentValues.CUIAsssetIdiomKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    uint64_t v10 = v21;
    double v11 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    ((void (*)(long long *__return_ptr, void, uint64_t, _UNKNOWN **))v11[1])(v19, MEMORY[0x263F8D6C8], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    char v14 = swift_retain();
    uint64_t v15 = specialized closure #1 in PropertyList.subscript.getter(v14, (uint64_t)v18);
    swift_release();
    *(void *)&v19[0] = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.CUIAsssetIdiomKey>>();
    uint64_t v21 = v16;
    uint64_t v22 = &protocol witness table for TrackedValue<A>;
    v20[0] = v15;
    specialized Dictionary.subscript.setter((uint64_t)v20, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(void *)&v19[0];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  long long v18[2];
  void v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    uint64_t v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_release();
    LOBYTE(v18[0]) = v13 & 1;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityReduceTransparencyKey>, (uint64_t)&type metadata for AccessibilityReduceTransparencyKey, (uint64_t)&protocol witness table for AccessibilityReduceTransparencyKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    uint64_t v10 = v20;
    double v11 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    ((void (*)(long long *__return_ptr, void, uint64_t, _UNKNOWN **))v11[1])(v18, MEMORY[0x263F8D4F8], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    char v14 = swift_retain();
    uint64_t v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_release();
    LOBYTE(v18[0]) = v15 & 1;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<AccessibilityReduceTransparencyKey>>();
    uint64_t v20 = v16;
    uint64_t v21 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v19[0]) = v15 & 1;
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LOBYTE(v18[0]);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  _UNKNOWN **v10;
  void (*v11)(long long *__return_ptr);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned char v22[8];
  long long v23[2];
  void v24[3];
  uint64_t v25;
  _UNKNOWN **v26;
  unsigned char v27[16];

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    uint64_t v13 = specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v27);
    uint64_t v15 = v14;
    swift_release();
    *(void *)&v23[0] = v13;
    *((void *)&v23[0] + 1) = v15;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ResolvedTextProviderKey>, (uint64_t)&type metadata for EnvironmentValues.ResolvedTextProviderKey, (uint64_t)&protocol witness table for EnvironmentValues.ResolvedTextProviderKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v23);
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v24);
    uint64_t v10 = v26;
    __swift_project_boxed_opaque_existential_1(v24, v25);
    double v11 = (void (*)(long long *__return_ptr))v10[1];
    type metadata accessor for ResolvedTextProvider.Type?();
    v11(v23);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  }
  else
  {
    uint64_t v16 = swift_retain();
    uint64_t v17 = specialized closure #1 in PropertyList.subscript.getter(v16, (uint64_t)v22);
    uint64_t v19 = v18;
    swift_release();
    *(void *)&v23[0] = v17;
    *((void *)&v23[0] + 1) = v19;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.ResolvedTextProviderKey>>();
    uint64_t v25 = v20;
    uint64_t v26 = &protocol witness table for TrackedValue<A>;
    v24[0] = v17;
    v24[1] = v19;
    specialized Dictionary.subscript.setter((uint64_t)v24, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(void *)&v23[0];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  long long v18[2];
  void v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    uint64_t v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_release();
    LOBYTE(v18[0]) = v13 & 1;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<IsVisionEnabledKey>, (uint64_t)&type metadata for IsVisionEnabledKey, (uint64_t)&protocol witness table for IsVisionEnabledKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    uint64_t v10 = v20;
    double v11 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    ((void (*)(long long *__return_ptr, void, uint64_t, _UNKNOWN **))v11[1])(v18, MEMORY[0x263F8D4F8], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    char v14 = swift_retain();
    uint64_t v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_release();
    LOBYTE(v18[0]) = v15 & 1;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<IsVisionEnabledKey>>();
    uint64_t v20 = v16;
    uint64_t v21 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v19[0]) = v15 & 1;
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LOBYTE(v18[0]);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  long long v22[2];
  void v23[3];
  uint64_t v24;
  _UNKNOWN **v25;

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    uint64_t v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    uint64_t v15 = v14;
    swift_release();
    *(void *)&v22[0] = v13;
    *((void *)&v22[0] + 1) = v15;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<FontDefinitionKey>, (uint64_t)&type metadata for FontDefinitionKey, (uint64_t)&protocol witness table for FontDefinitionKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v22);
    outlined init with take of ScrollStateRequest(v22, (uint64_t)v23);
    uint64_t v10 = v24;
    double v11 = v25;
    __swift_project_boxed_opaque_existential_1(v23, v24);
    ((void (*)(long long *__return_ptr, ValueMetadata *, uint64_t, _UNKNOWN **))v11[1])(v22, &type metadata for FontDefinitionType, v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  }
  else
  {
    uint64_t v16 = swift_retain();
    uint64_t v17 = specialized closure #1 in PropertyList.subscript.getter(v16);
    uint64_t v19 = v18;
    swift_release();
    *(void *)&v22[0] = v17;
    *((void *)&v22[0] + 1) = v19;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<FontDefinitionKey>>();
    int v24 = v20;
    uint64_t v25 = &protocol witness table for TrackedValue<A>;
    v23[0] = v17;
    v23[1] = v19;
    specialized Dictionary.subscript.setter((uint64_t)v23, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(void *)&v22[0];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  _UNKNOWN **v10;
  void (*v11)(long long *__return_ptr);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned char v18[8];
  long long v19[2];
  void v20[3];
  uint64_t v21;
  _UNKNOWN **v22;
  unsigned char v23[16];

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    uint64_t v13 = specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v23);
    swift_release();
    *(void *)&v19[0] = v13;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<FontKey>, (uint64_t)&type metadata for FontKey, (uint64_t)&protocol witness table for FontKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    uint64_t v10 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    double v11 = (void (*)(long long *__return_ptr))v10[1];
    type metadata accessor for [LayoutDirection](0, &lazy cache variable for type metadata for Font?, (uint64_t)&type metadata for Font, MEMORY[0x263F8D8F0]);
    v11(v19);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    char v14 = swift_retain();
    uint64_t v15 = specialized closure #1 in PropertyList.subscript.getter(v14, (uint64_t)v18);
    swift_release();
    *(void *)&v19[0] = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<FontKey>>();
    uint64_t v21 = v16;
    uint64_t v22 = &protocol witness table for TrackedValue<A>;
    v20[0] = v15;
    swift_retain();
    specialized Dictionary.subscript.setter((uint64_t)v20, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(void *)&v19[0];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  _UNKNOWN **v10;
  void (*v11)(long long *__return_ptr);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned char v18[8];
  long long v19[2];
  void v20[3];
  uint64_t v21;
  _UNKNOWN **v22;
  unsigned char v23[16];

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    uint64_t v13 = specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v23);
    swift_release();
    *(void *)&v19[0] = v13;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultFontKey>, (uint64_t)&type metadata for DefaultFontKey, (uint64_t)&protocol witness table for DefaultFontKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    uint64_t v10 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    double v11 = (void (*)(long long *__return_ptr))v10[1];
    type metadata accessor for [LayoutDirection](0, &lazy cache variable for type metadata for Font?, (uint64_t)&type metadata for Font, MEMORY[0x263F8D8F0]);
    v11(v19);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    char v14 = swift_retain();
    uint64_t v15 = specialized closure #1 in PropertyList.subscript.getter(v14, (uint64_t)v18);
    swift_release();
    *(void *)&v19[0] = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<DefaultFontKey>>();
    uint64_t v21 = v16;
    uint64_t v22 = &protocol witness table for TrackedValue<A>;
    v20[0] = v15;
    swift_retain();
    specialized Dictionary.subscript.setter((uint64_t)v20, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(void *)&v19[0];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  _UNKNOWN **v10;
  void (*v11)(long long *__return_ptr);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned char v18[8];
  long long v19[2];
  void v20[3];
  uint64_t v21;
  _UNKNOWN **v22;
  unsigned char v23[16];

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    uint64_t v13 = specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v23);
    swift_release();
    *(void *)&v19[0] = v13;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolFontKey>, (uint64_t)&type metadata for SymbolFontKey, (uint64_t)&protocol witness table for SymbolFontKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    uint64_t v10 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    double v11 = (void (*)(long long *__return_ptr))v10[1];
    type metadata accessor for [LayoutDirection](0, &lazy cache variable for type metadata for Font?, (uint64_t)&type metadata for Font, MEMORY[0x263F8D8F0]);
    v11(v19);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    char v14 = swift_retain();
    uint64_t v15 = specialized closure #1 in PropertyList.subscript.getter(v14, (uint64_t)v18);
    swift_release();
    *(void *)&v19[0] = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<SymbolFontKey>>();
    uint64_t v21 = v16;
    uint64_t v22 = &protocol witness table for TrackedValue<A>;
    v20[0] = v15;
    swift_retain();
    specialized Dictionary.subscript.setter((uint64_t)v20, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(void *)&v19[0];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  _UNKNOWN **v10;
  void (*v11)(long long *__return_ptr);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned char v18[8];
  long long v19[2];
  void v20[3];
  uint64_t v21;
  _UNKNOWN **v22;
  unsigned char v23[16];

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    uint64_t v13 = specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v23);
    swift_release();
    *(void *)&v19[0] = v13;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultSymbolFontKey>, (uint64_t)&type metadata for DefaultSymbolFontKey, (uint64_t)&protocol witness table for DefaultSymbolFontKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    uint64_t v10 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    double v11 = (void (*)(long long *__return_ptr))v10[1];
    type metadata accessor for [LayoutDirection](0, &lazy cache variable for type metadata for Font?, (uint64_t)&type metadata for Font, MEMORY[0x263F8D8F0]);
    v11(v19);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    char v14 = swift_retain();
    uint64_t v15 = specialized closure #1 in PropertyList.subscript.getter(v14, (uint64_t)v18);
    swift_release();
    *(void *)&v19[0] = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<DefaultSymbolFontKey>>();
    uint64_t v21 = v16;
    uint64_t v22 = &protocol witness table for TrackedValue<A>;
    v20[0] = v15;
    swift_retain();
    specialized Dictionary.subscript.setter((uint64_t)v20, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(void *)&v19[0];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  _UNKNOWN **v10;
  void (*v11)(long long *__return_ptr);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  long long v22[2];
  uint64_t v23;
  char v24;
  uint64_t v25;
  _UNKNOWN **v26;

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (a1)
  {
    if (v4 == *(void *)(a1 + 64))
    {
LABEL_3:
      type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.LineLimitKey>, (uint64_t)&type metadata for EnvironmentValues.LineLimitKey, (uint64_t)&protocol witness table for EnvironmentValues.LineLimitKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      uint64_t v6 = v5;
      uint64_t v7 = *(void *)(v3 + 32);
      if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
      {
        outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v22);
        outlined init with take of ScrollStateRequest(v22, (uint64_t)&v23);
        uint64_t v10 = v26;
        __swift_project_boxed_opaque_existential_1(&v23, v25);
        double v11 = (void (*)(long long *__return_ptr))v10[1];
        type metadata accessor for [LayoutDirection](0, (unint64_t *)&lazy cache variable for type metadata for Int?, MEMORY[0x263F8D6C8], MEMORY[0x263F8D8F0]);
        v11(v22);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v23);
      }
      else
      {
        uint64_t v16 = swift_retain();
        uint64_t v17 = specialized find<A>(_:key:)(v16);
        if (v17)
        {
          uint64_t v18 = *(void *)(v17 + 72);
          uint64_t v19 = *(unsigned char *)(v17 + 80);
        }
        else
        {
          uint64_t v18 = 0;
          uint64_t v19 = 1;
        }
        swift_release();
        *(void *)&v22[0] = v18;
        BYTE8(v22[0]) = v19;
        type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.LineLimitKey>>();
        uint64_t v25 = v20;
        uint64_t v26 = &protocol witness table for TrackedValue<A>;
        uint64_t v23 = v18;
        int v24 = v19;
        specialized Dictionary.subscript.setter((uint64_t)&v23, v6);
      }
      goto LABEL_15;
    }
  }
  else if (!v4)
  {
    goto LABEL_3;
  }
  *(unsigned char *)(v3 + 56) = 1;
  uint64_t v12 = swift_retain();
  uint64_t v13 = specialized find<A>(_:key:)(v12);
  if (v13)
  {
    char v14 = *(void *)(v13 + 72);
    uint64_t v15 = *(unsigned char *)(v13 + 80);
  }
  else
  {
    char v14 = 0;
    uint64_t v15 = 1;
  }
  swift_release();
  *(void *)&v22[0] = v14;
  BYTE8(v22[0]) = v15;
LABEL_15:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(void *)&v22[0];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  _UNKNOWN **v10;
  void (*v11)(long long *__return_ptr);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  long long v22[2];
  uint64_t v23;
  char v24;
  uint64_t v25;
  _UNKNOWN **v26;

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (a1)
  {
    if (v4 == *(void *)(a1 + 64))
    {
LABEL_3:
      type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.LowerLineLimitKey>, (uint64_t)&type metadata for EnvironmentValues.LowerLineLimitKey, (uint64_t)&protocol witness table for EnvironmentValues.LowerLineLimitKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
      uint64_t v6 = v5;
      uint64_t v7 = *(void *)(v3 + 32);
      if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
      {
        outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v22);
        outlined init with take of ScrollStateRequest(v22, (uint64_t)&v23);
        uint64_t v10 = v26;
        __swift_project_boxed_opaque_existential_1(&v23, v25);
        double v11 = (void (*)(long long *__return_ptr))v10[1];
        type metadata accessor for [LayoutDirection](0, (unint64_t *)&lazy cache variable for type metadata for Int?, MEMORY[0x263F8D6C8], MEMORY[0x263F8D8F0]);
        v11(v22);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v23);
      }
      else
      {
        uint64_t v16 = swift_retain();
        uint64_t v17 = specialized find<A>(_:key:)(v16);
        if (v17)
        {
          uint64_t v18 = *(void *)(v17 + 72);
          uint64_t v19 = *(unsigned char *)(v17 + 80);
        }
        else
        {
          uint64_t v18 = 0;
          uint64_t v19 = 1;
        }
        swift_release();
        *(void *)&v22[0] = v18;
        BYTE8(v22[0]) = v19;
        type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.LowerLineLimitKey>>();
        uint64_t v25 = v20;
        uint64_t v26 = &protocol witness table for TrackedValue<A>;
        uint64_t v23 = v18;
        int v24 = v19;
        specialized Dictionary.subscript.setter((uint64_t)&v23, v6);
      }
      goto LABEL_15;
    }
  }
  else if (!v4)
  {
    goto LABEL_3;
  }
  *(unsigned char *)(v3 + 56) = 1;
  uint64_t v12 = swift_retain();
  uint64_t v13 = specialized find<A>(_:key:)(v12);
  if (v13)
  {
    char v14 = *(void *)(v13 + 72);
    uint64_t v15 = *(unsigned char *)(v13 + 80);
  }
  else
  {
    char v14 = 0;
    uint64_t v15 = 1;
  }
  swift_release();
  *(void *)&v22[0] = v14;
  BYTE8(v22[0]) = v15;
LABEL_15:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(void *)&v22[0];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  _UNKNOWN **v10;
  void (*v11)(long long *__return_ptr);
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  unsigned char v22[8];
  long long v23[2];
  uint64_t v24;
  char v25;
  uint64_t v26;
  _UNKNOWN **v27;
  unsigned char v28[16];

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    uint64_t v13 = specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v28);
    uint64_t v15 = v14;
    swift_release();
    *(void *)&v23[0] = v13;
    BYTE8(v23[0]) = v15 & 1;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultPixelLengthKey>, (uint64_t)&type metadata for DefaultPixelLengthKey, (uint64_t)&protocol witness table for DefaultPixelLengthKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v23);
    outlined init with take of ScrollStateRequest(v23, (uint64_t)&v24);
    uint64_t v10 = v27;
    __swift_project_boxed_opaque_existential_1(&v24, v26);
    double v11 = (void (*)(long long *__return_ptr))v10[1];
    type metadata accessor for [LayoutDirection](0, (unint64_t *)&lazy cache variable for type metadata for CGFloat?, MEMORY[0x263F8EF38], MEMORY[0x263F8D8F0]);
    v11(v23);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v24);
  }
  else
  {
    uint64_t v16 = swift_retain();
    uint64_t v17 = specialized closure #1 in PropertyList.subscript.getter(v16, (uint64_t)v22);
    uint64_t v19 = v18;
    swift_release();
    *(void *)&v23[0] = v17;
    v19 &= 1u;
    BYTE8(v23[0]) = v19;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<DefaultPixelLengthKey>>();
    uint64_t v26 = v20;
    char v27 = &protocol witness table for TrackedValue<A>;
    int v24 = v17;
    uint64_t v25 = v19;
    specialized Dictionary.subscript.setter((uint64_t)&v24, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(void *)&v23[0];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  long long v18[2];
  void v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    uint64_t v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_release();
    LOBYTE(v18[0]) = v13 & 1;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<HyphenationDisabledKey>, (uint64_t)&type metadata for HyphenationDisabledKey, (uint64_t)&protocol witness table for HyphenationDisabledKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    uint64_t v10 = v20;
    double v11 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    ((void (*)(long long *__return_ptr, void, uint64_t, _UNKNOWN **))v11[1])(v18, MEMORY[0x263F8D4F8], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    char v14 = swift_retain();
    uint64_t v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_release();
    LOBYTE(v18[0]) = v15 & 1;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<HyphenationDisabledKey>>();
    uint64_t v20 = v16;
    uint64_t v21 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v19[0]) = v15 & 1;
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LOBYTE(v18[0]);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  _UNKNOWN **v10;
  void (*v11)(long long *__return_ptr);
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  long long v18[2];
  void v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    uint64_t v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_release();
    LOBYTE(v18[0]) = v13;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextAlignmentKey>, (uint64_t)&type metadata for TextAlignmentKey, (uint64_t)&protocol witness table for TextAlignmentKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    uint64_t v10 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    double v11 = (void (*)(long long *__return_ptr))v10[1];
    type metadata accessor for [LayoutDirection](0, (unint64_t *)&lazy cache variable for type metadata for TextAlignment?, (uint64_t)&type metadata for TextAlignment, MEMORY[0x263F8D8F0]);
    v11(v18);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    char v14 = swift_retain();
    uint64_t v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_release();
    LOBYTE(v18[0]) = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<TextAlignmentKey>>();
    uint64_t v20 = v16;
    uint64_t v21 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v19[0]) = v15;
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LOBYTE(v18[0]);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  _UNKNOWN **v10;
  void (*v11)(long long *__return_ptr);
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  unsigned char v18[8];
  long long v19[2];
  void v20[3];
  uint64_t v21;
  _UNKNOWN **v22;
  unsigned char v23[16];

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    uint64_t v13 = specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v23);
    swift_release();
    LOBYTE(v19[0]) = v13;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AllowsVibrantBlendingKey>, (uint64_t)&type metadata for AllowsVibrantBlendingKey, (uint64_t)&protocol witness table for AllowsVibrantBlendingKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    uint64_t v10 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    double v11 = (void (*)(long long *__return_ptr))v10[1];
    type metadata accessor for [LayoutDirection](0, &lazy cache variable for type metadata for Bool?, MEMORY[0x263F8D4F8], MEMORY[0x263F8D8F0]);
    v11(v19);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    char v14 = swift_retain();
    uint64_t v15 = specialized closure #1 in PropertyList.subscript.getter(v14, (uint64_t)v18);
    swift_release();
    LOBYTE(v19[0]) = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<AllowsVibrantBlendingKey>>();
    uint64_t v21 = v16;
    uint64_t v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v15;
    specialized Dictionary.subscript.setter((uint64_t)v20, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LOBYTE(v19[0]);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  long long v18[2];
  void v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    uint64_t v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_release();
    LOBYTE(v18[0]) = v13 & 1;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<UnredactSymbolImage>, (uint64_t)&type metadata for UnredactSymbolImage, (uint64_t)&protocol witness table for UnredactSymbolImage, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    uint64_t v10 = v20;
    double v11 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    ((void (*)(long long *__return_ptr, void, uint64_t, _UNKNOWN **))v11[1])(v18, MEMORY[0x263F8D4F8], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    char v14 = swift_retain();
    uint64_t v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_release();
    LOBYTE(v18[0]) = v15 & 1;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<UnredactSymbolImage>>();
    uint64_t v20 = v16;
    uint64_t v21 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v19[0]) = v15 & 1;
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LOBYTE(v18[0]);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  _UNKNOWN **v10;
  void (*v11)(long long *__return_ptr);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned char v22[8];
  long long v23[2];
  void v24[3];
  uint64_t v25;
  _UNKNOWN **v26;
  unsigned char v27[16];

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    uint64_t v13 = specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v27);
    uint64_t v15 = v14;
    swift_release();
    *(void *)&v23[0] = v13;
    *((void *)&v23[0] + 1) = v15;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.CoreUINamedColorProviderKey>, (uint64_t)&type metadata for EnvironmentValues.CoreUINamedColorProviderKey, (uint64_t)&protocol witness table for EnvironmentValues.CoreUINamedColorProviderKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v23);
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v24);
    uint64_t v10 = v26;
    __swift_project_boxed_opaque_existential_1(v24, v25);
    double v11 = (void (*)(long long *__return_ptr))v10[1];
    type metadata accessor for CoreUINamedColorProvider.Type?();
    v11(v23);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  }
  else
  {
    uint64_t v16 = swift_retain();
    uint64_t v17 = specialized closure #1 in PropertyList.subscript.getter(v16, (uint64_t)v22);
    uint64_t v19 = v18;
    swift_release();
    *(void *)&v23[0] = v17;
    *((void *)&v23[0] + 1) = v19;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.CoreUINamedColorProviderKey>>();
    uint64_t v25 = v20;
    uint64_t v26 = &protocol witness table for TrackedValue<A>;
    v24[0] = v17;
    v24[1] = v19;
    specialized Dictionary.subscript.setter((uint64_t)v24, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(void *)&v23[0];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  _UNKNOWN **v10;
  void (*v11)(long long *__return_ptr);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  long long v18[2];
  void v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    uint64_t v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_bridgeObjectRetain();
    swift_release();
    *(void *)&v18[0] = v13;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.CUIAssetMatchTypesKey>, (uint64_t)&type metadata for EnvironmentValues.CUIAssetMatchTypesKey, (uint64_t)&protocol witness table for EnvironmentValues.CUIAssetMatchTypesKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    uint64_t v10 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    double v11 = (void (*)(long long *__return_ptr))v10[1];
    type metadata accessor for [LayoutDirection](0, &lazy cache variable for type metadata for [CatalogAssetMatchType], (uint64_t)&type metadata for CatalogAssetMatchType, MEMORY[0x263F8D488]);
    v11(v18);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    char v14 = swift_retain();
    uint64_t v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_bridgeObjectRetain();
    swift_release();
    *(void *)&v18[0] = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.CUIAssetMatchTypesKey>>();
    uint64_t v20 = v16;
    uint64_t v21 = &protocol witness table for TrackedValue<A>;
    v19[0] = v15;
    swift_bridgeObjectRetain();
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(void *)&v18[0];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  _UNKNOWN **v10;
  void (*v11)(long long *__return_ptr);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned char v22[8];
  long long v23[2];
  void v24[3];
  uint64_t v25;
  _UNKNOWN **v26;
  unsigned char v27[16];

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    uint64_t v13 = specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v27);
    uint64_t v15 = v14;
    swift_release();
    *(void *)&v23[0] = v13;
    *((void *)&v23[0] + 1) = v15;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DefaultAccentColorProviderKey>, (uint64_t)&type metadata for EnvironmentValues.DefaultAccentColorProviderKey, (uint64_t)&protocol witness table for EnvironmentValues.DefaultAccentColorProviderKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v23);
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v24);
    uint64_t v10 = v26;
    __swift_project_boxed_opaque_existential_1(v24, v25);
    double v11 = (void (*)(long long *__return_ptr))v10[1];
    type metadata accessor for DefaultAccentColorProvider.Type?();
    v11(v23);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  }
  else
  {
    uint64_t v16 = swift_retain();
    uint64_t v17 = specialized closure #1 in PropertyList.subscript.getter(v16, (uint64_t)v22);
    uint64_t v19 = v18;
    swift_release();
    *(void *)&v23[0] = v17;
    *((void *)&v23[0] + 1) = v19;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.DefaultAccentColorProviderKey>>();
    uint64_t v25 = v20;
    uint64_t v26 = &protocol witness table for TrackedValue<A>;
    v24[0] = v17;
    v24[1] = v19;
    specialized Dictionary.subscript.setter((uint64_t)v24, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(void *)&v23[0];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  long long v18[2];
  void v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    uint64_t v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_release();
    LOBYTE(v18[0]) = v13 & 1;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolsGrowToFitBackgroundKey>, (uint64_t)&type metadata for SymbolsGrowToFitBackgroundKey, (uint64_t)&protocol witness table for SymbolsGrowToFitBackgroundKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    uint64_t v10 = v20;
    double v11 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    ((void (*)(long long *__return_ptr, void, uint64_t, _UNKNOWN **))v11[1])(v18, MEMORY[0x263F8D4F8], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    char v14 = swift_retain();
    uint64_t v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_release();
    LOBYTE(v18[0]) = v15 & 1;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<SymbolsGrowToFitBackgroundKey>>();
    uint64_t v20 = v16;
    uint64_t v21 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v19[0]) = v15 & 1;
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LOBYTE(v18[0]);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  _UNKNOWN **v10;
  void (*v11)(long long *__return_ptr);
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  unsigned char v22[8];
  long long v23[2];
  uint64_t v24;
  char v25;
  uint64_t v26;
  _UNKNOWN **v27;
  unsigned char v28[16];

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    uint64_t v13 = specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v28);
    uint64_t v15 = v14;
    swift_release();
    *(void *)&v23[0] = v13;
    BYTE8(v23[0]) = v15 & 1;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolBackgroundCornerRadiusKey>, (uint64_t)&type metadata for SymbolBackgroundCornerRadiusKey, (uint64_t)&protocol witness table for SymbolBackgroundCornerRadiusKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v23);
    outlined init with take of ScrollStateRequest(v23, (uint64_t)&v24);
    uint64_t v10 = v27;
    __swift_project_boxed_opaque_existential_1(&v24, v26);
    double v11 = (void (*)(long long *__return_ptr))v10[1];
    type metadata accessor for [LayoutDirection](0, (unint64_t *)&lazy cache variable for type metadata for CGFloat?, MEMORY[0x263F8EF38], MEMORY[0x263F8D8F0]);
    v11(v23);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v24);
  }
  else
  {
    uint64_t v16 = swift_retain();
    uint64_t v17 = specialized closure #1 in PropertyList.subscript.getter(v16, (uint64_t)v22);
    uint64_t v19 = v18;
    swift_release();
    *(void *)&v23[0] = v17;
    v19 &= 1u;
    BYTE8(v23[0]) = v19;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<SymbolBackgroundCornerRadiusKey>>();
    uint64_t v26 = v20;
    char v27 = &protocol witness table for TrackedValue<A>;
    int v24 = v17;
    uint64_t v25 = v19;
    specialized Dictionary.subscript.setter((uint64_t)&v24, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(void *)&v23[0];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned char v18[8];
  long long v19[2];
  void v20[3];
  uint64_t v21;
  _UNKNOWN **v22;
  unsigned char v23[16];

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    uint64_t v13 = specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v23);
    swift_release();
    *(void *)&v19[0] = v13;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.CUIAssetSubtypeKey>, (uint64_t)&type metadata for EnvironmentValues.CUIAssetSubtypeKey, (uint64_t)&protocol witness table for EnvironmentValues.CUIAssetSubtypeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    uint64_t v10 = v21;
    double v11 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    ((void (*)(long long *__return_ptr, void, uint64_t, _UNKNOWN **))v11[1])(v19, MEMORY[0x263F8D6C8], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    char v14 = swift_retain();
    uint64_t v15 = specialized closure #1 in PropertyList.subscript.getter(v14, (uint64_t)v18);
    swift_release();
    *(void *)&v19[0] = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.CUIAssetSubtypeKey>>();
    uint64_t v21 = v16;
    uint64_t v22 = &protocol witness table for TrackedValue<A>;
    v20[0] = v15;
    specialized Dictionary.subscript.setter((uint64_t)v20, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(void *)&v19[0];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  _UNKNOWN **v10;
  void (*v11)(long long *__return_ptr);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned char v22[8];
  long long v23[2];
  void v24[3];
  uint64_t v25;
  _UNKNOWN **v26;
  unsigned char v27[16];

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    uint64_t v13 = specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v27);
    uint64_t v15 = v14;
    swift_release();
    *(void *)&v23[0] = v13;
    *((void *)&v23[0] + 1) = v15;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<VibrantColorStyleKey>, (uint64_t)&type metadata for VibrantColorStyleKey, (uint64_t)&protocol witness table for VibrantColorStyleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v23);
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v24);
    uint64_t v10 = v26;
    __swift_project_boxed_opaque_existential_1(v24, v25);
    double v11 = (void (*)(long long *__return_ptr))v10[1];
    type metadata accessor for VibrantColorStyle.Type?();
    v11(v23);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  }
  else
  {
    uint64_t v16 = swift_retain();
    uint64_t v17 = specialized closure #1 in PropertyList.subscript.getter(v16, (uint64_t)v22);
    uint64_t v19 = v18;
    swift_release();
    *(void *)&v23[0] = v17;
    *((void *)&v23[0] + 1) = v19;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<VibrantColorStyleKey>>();
    uint64_t v25 = v20;
    uint64_t v26 = &protocol witness table for TrackedValue<A>;
    v24[0] = v17;
    v24[1] = v19;
    specialized Dictionary.subscript.setter((uint64_t)v24, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(void *)&v23[0];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  _UNKNOWN **v10;
  void (*v11)(long long *__return_ptr);
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  unsigned char v18[8];
  long long v19[2];
  void v20[3];
  uint64_t v21;
  _UNKNOWN **v22;
  unsigned char v23[16];

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    uint64_t v13 = specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v23);
    swift_release();
    LOBYTE(v19[0]) = v13;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    uint64_t v10 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    double v11 = (void (*)(long long *__return_ptr))v10[1];
    type metadata accessor for [LayoutDirection](0, &lazy cache variable for type metadata for Bool?, MEMORY[0x263F8D4F8], MEMORY[0x263F8D8F0]);
    v11(v19);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    char v14 = swift_retain();
    uint64_t v15 = specialized closure #1 in PropertyList.subscript.getter(v14, (uint64_t)v18);
    swift_release();
    LOBYTE(v19[0]) = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAlwaysIncludesPunctuationKey>>();
    uint64_t v21 = v16;
    uint64_t v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v15;
    specialized Dictionary.subscript.setter((uint64_t)v20, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LOBYTE(v19[0]);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  _UNKNOWN **v10;
  void (*v11)(long long *__return_ptr);
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  unsigned char v18[8];
  long long v19[2];
  void v20[3];
  uint64_t v21;
  _UNKNOWN **v22;
  unsigned char v23[16];

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    uint64_t v13 = specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v23);
    swift_release();
    LOBYTE(v19[0]) = v13;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    uint64_t v10 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    double v11 = (void (*)(long long *__return_ptr))v10[1];
    type metadata accessor for [LayoutDirection](0, &lazy cache variable for type metadata for Bool?, MEMORY[0x263F8D4F8], MEMORY[0x263F8D8F0]);
    v11(v19);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    char v14 = swift_retain();
    uint64_t v15 = specialized closure #1 in PropertyList.subscript.getter(v14, (uint64_t)v18);
    swift_release();
    LOBYTE(v19[0]) = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechSpellsOutCharactersKey>>();
    uint64_t v21 = v16;
    uint64_t v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v15;
    specialized Dictionary.subscript.setter((uint64_t)v20, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LOBYTE(v19[0]);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  _UNKNOWN **v10;
  void (*v11)(long long *__return_ptr);
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  unsigned char v22[8];
  long long v23[2];
  uint64_t v24;
  char v25;
  uint64_t v26;
  _UNKNOWN **v27;
  unsigned char v28[16];

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    uint64_t v13 = specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v28);
    uint64_t v15 = v14;
    swift_release();
    *(void *)&v23[0] = v13;
    BYTE8(v23[0]) = v15 & 1;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAdjustedPitchKey>, (uint64_t)&type metadata for EnvironmentValues.AccessibilitySpeechAdjustedPitchKey, (uint64_t)&protocol witness table for EnvironmentValues.AccessibilitySpeechAdjustedPitchKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v23);
    outlined init with take of ScrollStateRequest(v23, (uint64_t)&v24);
    uint64_t v10 = v27;
    __swift_project_boxed_opaque_existential_1(&v24, v26);
    double v11 = (void (*)(long long *__return_ptr))v10[1];
    type metadata accessor for [LayoutDirection](0, (unint64_t *)&lazy cache variable for type metadata for Double?, MEMORY[0x263F8D538], MEMORY[0x263F8D8F0]);
    v11(v23);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v24);
  }
  else
  {
    uint64_t v16 = swift_retain();
    uint64_t v17 = specialized closure #1 in PropertyList.subscript.getter(v16, (uint64_t)v22);
    uint64_t v19 = v18;
    swift_release();
    *(void *)&v23[0] = v17;
    v19 &= 1u;
    BYTE8(v23[0]) = v19;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.AccessibilitySpeechAdjustedPitchKey>>();
    uint64_t v26 = v20;
    char v27 = &protocol witness table for TrackedValue<A>;
    int v24 = v17;
    uint64_t v25 = v19;
    specialized Dictionary.subscript.setter((uint64_t)&v24, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(void *)&v23[0];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  long long v18[2];
  void v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    uint64_t v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_release();
    LOBYTE(v18[0]) = v13 & 1;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ReducedLuminanceKey>, (uint64_t)&type metadata for ReducedLuminanceKey, (uint64_t)&protocol witness table for ReducedLuminanceKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    uint64_t v10 = v20;
    double v11 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    ((void (*)(long long *__return_ptr, void, uint64_t, _UNKNOWN **))v11[1])(v18, MEMORY[0x263F8D4F8], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    char v14 = swift_retain();
    uint64_t v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_release();
    LOBYTE(v18[0]) = v15 & 1;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<ReducedLuminanceKey>>();
    uint64_t v20 = v16;
    uint64_t v21 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v19[0]) = v15 & 1;
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LOBYTE(v18[0]);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  unsigned char v18[8];
  long long v19[2];
  void v20[3];
  uint64_t v21;
  _UNKNOWN **v22;
  unsigned char v23[16];

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    uint64_t v13 = specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v23);
    swift_release();
    LOBYTE(v19[0]) = v13;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.NearestScrollableAxesEnvironmentKey>, (uint64_t)&type metadata for EnvironmentValues.NearestScrollableAxesEnvironmentKey, (uint64_t)&protocol witness table for EnvironmentValues.NearestScrollableAxesEnvironmentKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    uint64_t v10 = v21;
    double v11 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    ((void (*)(long long *__return_ptr, ValueMetadata *, uint64_t, _UNKNOWN **))v11[1])(v19, &type metadata for Axis.Set, v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    char v14 = swift_retain();
    uint64_t v15 = specialized closure #1 in PropertyList.subscript.getter(v14, (uint64_t)v18);
    swift_release();
    LOBYTE(v19[0]) = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.NearestScrollableAxesEnvironmentKey>>();
    uint64_t v21 = v16;
    uint64_t v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v15;
    specialized Dictionary.subscript.setter((uint64_t)v20, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LOBYTE(v19[0]);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  unsigned char v18[8];
  long long v19[2];
  void v20[3];
  uint64_t v21;
  _UNKNOWN **v22;
  unsigned char v23[16];

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    uint64_t v13 = specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v23);
    swift_release();
    LOBYTE(v19[0]) = v13;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AllScrollableAxesEnvironmentKey>, (uint64_t)&type metadata for EnvironmentValues.AllScrollableAxesEnvironmentKey, (uint64_t)&protocol witness table for EnvironmentValues.AllScrollableAxesEnvironmentKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    uint64_t v10 = v21;
    double v11 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    ((void (*)(long long *__return_ptr, ValueMetadata *, uint64_t, _UNKNOWN **))v11[1])(v19, &type metadata for Axis.Set, v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    char v14 = swift_retain();
    uint64_t v15 = specialized closure #1 in PropertyList.subscript.getter(v14, (uint64_t)v18);
    swift_release();
    LOBYTE(v19[0]) = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.AllScrollableAxesEnvironmentKey>>();
    uint64_t v21 = v16;
    uint64_t v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v15;
    specialized Dictionary.subscript.setter((uint64_t)v20, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LOBYTE(v19[0]);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  _UNKNOWN **v10;
  void (*v11)(long long *__return_ptr);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned char v22[8];
  long long v23[2];
  void v24[3];
  uint64_t v25;
  _UNKNOWN **v26;
  unsigned char v27[16];

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    uint64_t v13 = specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v27);
    uint64_t v15 = v14;
    swift_release();
    *(void *)&v23[0] = v13;
    *((void *)&v23[0] + 1) = v15;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SystemAccentValueProviderKey>, (uint64_t)&type metadata for EnvironmentValues.SystemAccentValueProviderKey, (uint64_t)&protocol witness table for EnvironmentValues.SystemAccentValueProviderKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v23);
    outlined init with take of ScrollStateRequest(v23, (uint64_t)v24);
    uint64_t v10 = v26;
    __swift_project_boxed_opaque_existential_1(v24, v25);
    double v11 = (void (*)(long long *__return_ptr))v10[1];
    type metadata accessor for SystemAccentValueProvider.Type?();
    v11(v23);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  }
  else
  {
    uint64_t v16 = swift_retain();
    uint64_t v17 = specialized closure #1 in PropertyList.subscript.getter(v16, (uint64_t)v22);
    uint64_t v19 = v18;
    swift_release();
    *(void *)&v23[0] = v17;
    *((void *)&v23[0] + 1) = v19;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.SystemAccentValueProviderKey>>();
    uint64_t v25 = v20;
    uint64_t v26 = &protocol witness table for TrackedValue<A>;
    v24[0] = v17;
    v24[1] = v19;
    specialized Dictionary.subscript.setter((uint64_t)v24, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(void *)&v23[0];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  long long v18[2];
  void v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    uint64_t v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_release();
    LOBYTE(v18[0]) = v13 & 1;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<HasSystemOpenURLActionKey>, (uint64_t)&type metadata for HasSystemOpenURLActionKey, (uint64_t)&protocol witness table for HasSystemOpenURLActionKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    uint64_t v10 = v20;
    double v11 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    ((void (*)(long long *__return_ptr, void, uint64_t, _UNKNOWN **))v11[1])(v18, MEMORY[0x263F8D4F8], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    char v14 = swift_retain();
    uint64_t v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_release();
    LOBYTE(v18[0]) = v15 & 1;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<HasSystemOpenURLActionKey>>();
    uint64_t v20 = v16;
    uint64_t v21 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v19[0]) = v15 & 1;
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LOBYTE(v18[0]);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  unsigned char v18[8];
  long long v19[2];
  void v20[3];
  uint64_t v21;
  _UNKNOWN **v22;
  unsigned char v23[16];

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    uint64_t v13 = specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v23);
    swift_release();
    LOBYTE(v19[0]) = v13 & 1;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TextRendererAddsDrawingGroupKey>, (uint64_t)&type metadata for EnvironmentValues.TextRendererAddsDrawingGroupKey, (uint64_t)&protocol witness table for EnvironmentValues.TextRendererAddsDrawingGroupKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    uint64_t v10 = v21;
    double v11 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    ((void (*)(long long *__return_ptr, void, uint64_t, _UNKNOWN **))v11[1])(v19, MEMORY[0x263F8D4F8], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    char v14 = swift_retain();
    uint64_t v15 = specialized closure #1 in PropertyList.subscript.getter(v14, (uint64_t)v18);
    swift_release();
    v15 &= 1u;
    LOBYTE(v19[0]) = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.TextRendererAddsDrawingGroupKey>>();
    uint64_t v21 = v16;
    uint64_t v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v15;
    specialized Dictionary.subscript.setter((uint64_t)v20, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LOBYTE(v19[0]);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  long long v18[2];
  void v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    uint64_t v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_release();
    LOBYTE(v18[0]) = v13 & 1;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityPrefersCrossFadeTransitionsKey>, (uint64_t)&type metadata for AccessibilityPrefersCrossFadeTransitionsKey, (uint64_t)&protocol witness table for AccessibilityPrefersCrossFadeTransitionsKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    uint64_t v10 = v20;
    double v11 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    ((void (*)(long long *__return_ptr, void, uint64_t, _UNKNOWN **))v11[1])(v18, MEMORY[0x263F8D4F8], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    char v14 = swift_retain();
    uint64_t v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_release();
    LOBYTE(v18[0]) = v15 & 1;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<AccessibilityPrefersCrossFadeTransitionsKey>>();
    uint64_t v20 = v16;
    uint64_t v21 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v19[0]) = v15 & 1;
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LOBYTE(v18[0]);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  long long v18[2];
  void v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    uint64_t v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_release();
    LODWORD(v18[0]) = v13;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DefaultSeparatorShapeStyleKey>, (uint64_t)&type metadata for EnvironmentValues.DefaultSeparatorShapeStyleKey, (uint64_t)&protocol witness table for EnvironmentValues.DefaultSeparatorShapeStyleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    uint64_t v10 = v20;
    double v11 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    ((void (*)(long long *__return_ptr, ValueMetadata *, uint64_t, _UNKNOWN **))v11[1])(v18, &type metadata for HierarchicalShapeStyle, v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    char v14 = swift_retain();
    uint64_t v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_release();
    LODWORD(v18[0]) = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.DefaultSeparatorShapeStyleKey>>();
    uint64_t v20 = v16;
    uint64_t v21 = &protocol witness table for TrackedValue<A>;
    LODWORD(v19[0]) = v15;
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LODWORD(v18[0]);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  unsigned char v18[8];
  long long v19[2];
  void v20[3];
  uint64_t v21;
  _UNKNOWN **v22;
  unsigned char v23[16];

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    uint64_t v13 = specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v23);
    swift_release();
    LOBYTE(v19[0]) = v13 & 1;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsFocused>, (uint64_t)&type metadata for WindowEnvironmentKeys.AppearsFocused, (uint64_t)&protocol witness table for WindowEnvironmentKeys.AppearsFocused, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    uint64_t v10 = v21;
    double v11 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    ((void (*)(long long *__return_ptr, void, uint64_t, _UNKNOWN **))v11[1])(v19, MEMORY[0x263F8D4F8], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    char v14 = swift_retain();
    uint64_t v15 = specialized closure #1 in PropertyList.subscript.getter(v14, (uint64_t)v18);
    swift_release();
    v15 &= 1u;
    LOBYTE(v19[0]) = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsFocused>>();
    uint64_t v21 = v16;
    uint64_t v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v15;
    specialized Dictionary.subscript.setter((uint64_t)v20, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LOBYTE(v19[0]);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  long long v18[2];
  void v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    uint64_t v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_release();
    LOBYTE(v18[0]) = v13 & 1;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsMain>, (uint64_t)&type metadata for WindowEnvironmentKeys.AppearsMain, (uint64_t)&protocol witness table for WindowEnvironmentKeys.AppearsMain, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    uint64_t v10 = v20;
    double v11 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    ((void (*)(long long *__return_ptr, void, uint64_t, _UNKNOWN **))v11[1])(v18, MEMORY[0x263F8D4F8], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    char v14 = swift_retain();
    uint64_t v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_release();
    LOBYTE(v18[0]) = v15 & 1;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsMain>>();
    uint64_t v20 = v16;
    uint64_t v21 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v19[0]) = v15 & 1;
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LOBYTE(v18[0]);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  unsigned char v18[8];
  long long v19[2];
  void v20[3];
  uint64_t v21;
  _UNKNOWN **v22;
  unsigned char v23[16];

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    uint64_t v13 = specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v23);
    swift_release();
    LOBYTE(v19[0]) = v13 & 1;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsActive>, (uint64_t)&type metadata for WindowEnvironmentKeys.AppearsActive, (uint64_t)&protocol witness table for WindowEnvironmentKeys.AppearsActive, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    uint64_t v10 = v21;
    double v11 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    ((void (*)(long long *__return_ptr, void, uint64_t, _UNKNOWN **))v11[1])(v19, MEMORY[0x263F8D4F8], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    char v14 = swift_retain();
    uint64_t v15 = specialized closure #1 in PropertyList.subscript.getter(v14, (uint64_t)v18);
    swift_release();
    v15 &= 1u;
    LOBYTE(v19[0]) = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<WindowEnvironmentKeys.AppearsActive>>();
    uint64_t v21 = v16;
    uint64_t v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v15;
    specialized Dictionary.subscript.setter((uint64_t)v20, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LOBYTE(v19[0]);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  unsigned char v18[8];
  long long v19[2];
  void v20[3];
  uint64_t v21;
  _UNKNOWN **v22;
  unsigned char v23[16];

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    uint64_t v13 = specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v23);
    swift_release();
    LOBYTE(v19[0]) = v13 & 1;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.IsFocused>, (uint64_t)&type metadata for WindowEnvironmentKeys.IsFocused, (uint64_t)&protocol witness table for WindowEnvironmentKeys.IsFocused, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    uint64_t v10 = v21;
    double v11 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    ((void (*)(long long *__return_ptr, void, uint64_t, _UNKNOWN **))v11[1])(v19, MEMORY[0x263F8D4F8], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    char v14 = swift_retain();
    uint64_t v15 = specialized closure #1 in PropertyList.subscript.getter(v14, (uint64_t)v18);
    swift_release();
    v15 &= 1u;
    LOBYTE(v19[0]) = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<WindowEnvironmentKeys.IsFocused>>();
    uint64_t v21 = v16;
    uint64_t v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v15;
    specialized Dictionary.subscript.setter((uint64_t)v20, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LOBYTE(v19[0]);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  unsigned char v18[8];
  long long v19[2];
  void v20[3];
  uint64_t v21;
  _UNKNOWN **v22;
  unsigned char v23[16];

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    uint64_t v13 = specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v23);
    swift_release();
    LOBYTE(v19[0]) = v13 & 1;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<WindowEnvironmentKeys.IsMain>, (uint64_t)&type metadata for WindowEnvironmentKeys.IsMain, (uint64_t)&protocol witness table for WindowEnvironmentKeys.IsMain, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v19);
    outlined init with take of ScrollStateRequest(v19, (uint64_t)v20);
    uint64_t v10 = v21;
    double v11 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    ((void (*)(long long *__return_ptr, void, uint64_t, _UNKNOWN **))v11[1])(v19, MEMORY[0x263F8D4F8], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    char v14 = swift_retain();
    uint64_t v15 = specialized closure #1 in PropertyList.subscript.getter(v14, (uint64_t)v18);
    swift_release();
    v15 &= 1u;
    LOBYTE(v19[0]) = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<WindowEnvironmentKeys.IsMain>>();
    uint64_t v21 = v16;
    uint64_t v22 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v20[0]) = v15;
    specialized Dictionary.subscript.setter((uint64_t)v20, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LOBYTE(v19[0]);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  long long v18[2];
  void v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    uint64_t v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_release();
    LOBYTE(v18[0]) = v13 & 1;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<InTouchBarKey>, (uint64_t)&type metadata for InTouchBarKey, (uint64_t)&protocol witness table for InTouchBarKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    uint64_t v10 = v20;
    double v11 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    ((void (*)(long long *__return_ptr, void, uint64_t, _UNKNOWN **))v11[1])(v18, MEMORY[0x263F8D4F8], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    char v14 = swift_retain();
    uint64_t v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_release();
    LOBYTE(v18[0]) = v15 & 1;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<InTouchBarKey>>();
    uint64_t v20 = v16;
    uint64_t v21 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v19[0]) = v15 & 1;
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LOBYTE(v18[0]);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  _UNKNOWN **v10;
  void (*v11)(long long *__return_ptr);
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  unsigned char v22[8];
  long long v23[2];
  uint64_t v24;
  char v25;
  uint64_t v26;
  _UNKNOWN **v27;
  unsigned char v28[16];

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    uint64_t v13 = specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v28);
    uint64_t v15 = v14;
    swift_release();
    *(void *)&v23[0] = v13;
    BYTE8(v23[0]) = v15 & 1;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DividerThicknessKey>, (uint64_t)&type metadata for DividerThicknessKey, (uint64_t)&protocol witness table for DividerThicknessKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v23);
    outlined init with take of ScrollStateRequest(v23, (uint64_t)&v24);
    uint64_t v10 = v27;
    __swift_project_boxed_opaque_existential_1(&v24, v26);
    double v11 = (void (*)(long long *__return_ptr))v10[1];
    type metadata accessor for [LayoutDirection](0, (unint64_t *)&lazy cache variable for type metadata for CGFloat?, MEMORY[0x263F8EF38], MEMORY[0x263F8D8F0]);
    v11(v23);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v24);
  }
  else
  {
    uint64_t v16 = swift_retain();
    uint64_t v17 = specialized closure #1 in PropertyList.subscript.getter(v16, (uint64_t)v22);
    uint64_t v19 = v18;
    swift_release();
    *(void *)&v23[0] = v17;
    v19 &= 1u;
    BYTE8(v23[0]) = v19;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<DividerThicknessKey>>();
    uint64_t v26 = v20;
    char v27 = &protocol witness table for TrackedValue<A>;
    int v24 = v17;
    uint64_t v25 = v19;
    specialized Dictionary.subscript.setter((uint64_t)&v24, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(void *)&v23[0];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  _UNKNOWN **v10;
  void (*v11)(long long *__return_ptr);
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  unsigned char v22[8];
  long long v23[2];
  uint64_t v24;
  char v25;
  uint64_t v26;
  _UNKNOWN **v27;
  unsigned char v28[16];

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    uint64_t v13 = specialized closure #1 in PropertyList.subscript.getter(v12, (uint64_t)v28);
    uint64_t v15 = v14;
    swift_release();
    *(void *)&v23[0] = v13;
    BYTE8(v23[0]) = v15 & 1;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DisplayCornerRadiusKey>, (uint64_t)&type metadata for DisplayCornerRadiusKey, (uint64_t)&protocol witness table for DisplayCornerRadiusKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v23);
    outlined init with take of ScrollStateRequest(v23, (uint64_t)&v24);
    uint64_t v10 = v27;
    __swift_project_boxed_opaque_existential_1(&v24, v26);
    double v11 = (void (*)(long long *__return_ptr))v10[1];
    type metadata accessor for [LayoutDirection](0, (unint64_t *)&lazy cache variable for type metadata for CGFloat?, MEMORY[0x263F8EF38], MEMORY[0x263F8D8F0]);
    v11(v23);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v24);
  }
  else
  {
    uint64_t v16 = swift_retain();
    uint64_t v17 = specialized closure #1 in PropertyList.subscript.getter(v16, (uint64_t)v22);
    uint64_t v19 = v18;
    swift_release();
    *(void *)&v23[0] = v17;
    v19 &= 1u;
    BYTE8(v23[0]) = v19;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<DisplayCornerRadiusKey>>();
    uint64_t v26 = v20;
    char v27 = &protocol witness table for TrackedValue<A>;
    int v24 = v17;
    uint64_t v25 = v19;
    specialized Dictionary.subscript.setter((uint64_t)&v24, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(void *)&v23[0];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  long long v18[2];
  void v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    uint64_t v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_release();
    LOBYTE(v18[0]) = v13 & 1;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityDifferentiateWithoutColorKey>, (uint64_t)&type metadata for AccessibilityDifferentiateWithoutColorKey, (uint64_t)&protocol witness table for AccessibilityDifferentiateWithoutColorKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    uint64_t v10 = v20;
    double v11 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    ((void (*)(long long *__return_ptr, void, uint64_t, _UNKNOWN **))v11[1])(v18, MEMORY[0x263F8D4F8], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    char v14 = swift_retain();
    uint64_t v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_release();
    LOBYTE(v18[0]) = v15 & 1;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<AccessibilityDifferentiateWithoutColorKey>>();
    uint64_t v20 = v16;
    uint64_t v21 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v19[0]) = v15 & 1;
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LOBYTE(v18[0]);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  long long v18[2];
  void v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    uint64_t v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_release();
    LOBYTE(v18[0]) = v13 & 1;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityReduceMotionKey>, (uint64_t)&type metadata for AccessibilityReduceMotionKey, (uint64_t)&protocol witness table for AccessibilityReduceMotionKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    uint64_t v10 = v20;
    double v11 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    ((void (*)(long long *__return_ptr, void, uint64_t, _UNKNOWN **))v11[1])(v18, MEMORY[0x263F8D4F8], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    char v14 = swift_retain();
    uint64_t v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_release();
    LOBYTE(v18[0]) = v15 & 1;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<AccessibilityReduceMotionKey>>();
    uint64_t v20 = v16;
    uint64_t v21 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v19[0]) = v15 & 1;
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LOBYTE(v18[0]);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  long long v18[2];
  void v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    uint64_t v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_release();
    LOBYTE(v18[0]) = v13 & 1;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityInvertColorsKey>, (uint64_t)&type metadata for AccessibilityInvertColorsKey, (uint64_t)&protocol witness table for AccessibilityInvertColorsKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    uint64_t v10 = v20;
    double v11 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    ((void (*)(long long *__return_ptr, void, uint64_t, _UNKNOWN **))v11[1])(v18, MEMORY[0x263F8D4F8], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    char v14 = swift_retain();
    uint64_t v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_release();
    LOBYTE(v18[0]) = v15 & 1;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<AccessibilityInvertColorsKey>>();
    uint64_t v20 = v16;
    uint64_t v21 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v19[0]) = v15 & 1;
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LOBYTE(v18[0]);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  long long v18[2];
  void v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    uint64_t v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_release();
    LOBYTE(v18[0]) = v13 & 1;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityButtonShapesKey>, (uint64_t)&type metadata for AccessibilityButtonShapesKey, (uint64_t)&protocol witness table for AccessibilityButtonShapesKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    uint64_t v10 = v20;
    double v11 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    ((void (*)(long long *__return_ptr, void, uint64_t, _UNKNOWN **))v11[1])(v18, MEMORY[0x263F8D4F8], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    char v14 = swift_retain();
    uint64_t v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_release();
    LOBYTE(v18[0]) = v15 & 1;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<AccessibilityButtonShapesKey>>();
    uint64_t v20 = v16;
    uint64_t v21 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v19[0]) = v15 & 1;
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LOBYTE(v18[0]);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  long long v18[2];
  void v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    uint64_t v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_release();
    LOBYTE(v18[0]) = v13 & 1;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityDimFlashingLightsKey>, (uint64_t)&type metadata for AccessibilityDimFlashingLightsKey, (uint64_t)&protocol witness table for AccessibilityDimFlashingLightsKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    uint64_t v10 = v20;
    double v11 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    ((void (*)(long long *__return_ptr, void, uint64_t, _UNKNOWN **))v11[1])(v18, MEMORY[0x263F8D4F8], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    char v14 = swift_retain();
    uint64_t v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_release();
    LOBYTE(v18[0]) = v15 & 1;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<AccessibilityDimFlashingLightsKey>>();
    uint64_t v20 = v16;
    uint64_t v21 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v19[0]) = v15 & 1;
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LOBYTE(v18[0]);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  long long v18[2];
  void v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    uint64_t v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_release();
    LOBYTE(v18[0]) = v13 & 1;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityPlayAnimatedImagesKey>, (uint64_t)&type metadata for AccessibilityPlayAnimatedImagesKey, (uint64_t)&protocol witness table for AccessibilityPlayAnimatedImagesKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    uint64_t v10 = v20;
    double v11 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    ((void (*)(long long *__return_ptr, void, uint64_t, _UNKNOWN **))v11[1])(v18, MEMORY[0x263F8D4F8], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    char v14 = swift_retain();
    uint64_t v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_release();
    LOBYTE(v18[0]) = v15 & 1;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<AccessibilityPlayAnimatedImagesKey>>();
    uint64_t v20 = v16;
    uint64_t v21 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v19[0]) = v15 & 1;
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LOBYTE(v18[0]);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  long long v18[2];
  void v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    uint64_t v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_release();
    LOBYTE(v18[0]) = v13 & 1;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityOnOffLabelsKey>, (uint64_t)&type metadata for AccessibilityOnOffLabelsKey, (uint64_t)&protocol witness table for AccessibilityOnOffLabelsKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    uint64_t v10 = v20;
    double v11 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    ((void (*)(long long *__return_ptr, void, uint64_t, _UNKNOWN **))v11[1])(v18, MEMORY[0x263F8D4F8], v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    char v14 = swift_retain();
    uint64_t v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_release();
    LOBYTE(v18[0]) = v15 & 1;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<AccessibilityOnOffLabelsKey>>();
    uint64_t v20 = v16;
    uint64_t v21 = &protocol witness table for TrackedValue<A>;
    LOBYTE(v19[0]) = v15 & 1;
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return LOBYTE(v18[0]);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  _UNKNOWN **v10;
  void (*v11)(long long *__return_ptr);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  long long v18[2];
  void v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  uint64_t v3 = *(void *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 24);
  if (!a1)
  {
    if (!v4) {
      goto LABEL_3;
    }
LABEL_7:
    *(unsigned char *)(v3 + 56) = 1;
    uint64_t v12 = swift_retain();
    uint64_t v13 = specialized closure #1 in PropertyList.subscript.getter(v12);
    swift_bridgeObjectRetain();
    swift_release();
    *(void *)&v18[0] = v13;
    goto LABEL_9;
  }
  if (v4 != *(void *)(a1 + 64)) {
    goto LABEL_7;
  }
LABEL_3:
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<PlacementTintKey>, (uint64_t)&type metadata for PlacementTintKey, (uint64_t)&protocol witness table for PlacementTintKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v3 + 32);
  if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v9 & 1) != 0))
  {
    outlined init with copy of AnyTrackedValue(*(void *)(v7 + 56) + 40 * v8, (uint64_t)v18);
    outlined init with take of ScrollStateRequest(v18, (uint64_t)v19);
    uint64_t v10 = v21;
    __swift_project_boxed_opaque_existential_1(v19, v20);
    double v11 = (void (*)(long long *__return_ptr))v10[1];
    type metadata accessor for [TintPlacement : AnyShapeStyle]();
    v11(v18);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    char v14 = swift_retain();
    uint64_t v15 = specialized closure #1 in PropertyList.subscript.getter(v14);
    swift_bridgeObjectRetain();
    swift_release();
    *(void *)&v18[0] = v15;
    type metadata accessor for TrackedValue<EnvironmentPropertyKey<PlacementTintKey>>();
    uint64_t v20 = v16;
    uint64_t v21 = &protocol witness table for TrackedValue<A>;
    v19[0] = v15;
    swift_bridgeObjectRetain();
    specialized Dictionary.subscript.setter((uint64_t)v19, v6);
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 16));
  swift_release();
  return *(void *)&v18[0];
}

void type metadata accessor for [LayoutDirection](uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t ColorProvider._apply(color:to:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v7 = result;
  switch(*(unsigned char *)(a2 + 24))
  {
    case 1:
      if (v5 != *(void *)(a2 + 16))
      {
        uint64_t v14 = *(void *)(a2 + 56);
        *(void *)&v41[0] = *(void *)(a2 + 48);
        uint64_t v13 = *(void *)&v41[0];
        *((void *)&v41[0] + 1) = v14;
        unsigned int v35 = COERCE_UNSIGNED_INT64((*(double (**)(_OWORD *, uint64_t, uint64_t))(a4 + 16))(v41, a3, a4));
        __int32 v37 = v15;
        unsigned int v34 = v16;
        float v18 = v17;
        uint64_t v19 = *(void *)(a2 + 32);
        int v20 = *(unsigned __int8 *)(a2 + 40);
        *(void *)&v41[0] = v13;
        *((void *)&v41[0] + 1) = v14;
        char v33 = *(float (**)(uint64_t, _OWORD *))(*(void *)v7 + 152);
        outlined copy of _ShapeStyle_Shape.Result(v19, v20);
        swift_retain();
        swift_retain_n();
        swift_retain_n();
        float v21 = v33(v5, v41);
        swift_release();
        swift_release();
        outlined consume of _ShapeStyle_Shape.Result(v19, v20);
        swift_release();
        swift_release();
        swift_release();
        v22.i64[0] = v35;
        v22.i64[1] = v34;
        v23.i32[0] = v37;
        *(float *)&v23.i32[1] = v18 * v21;
        v41[0] = vorrq_s8((int8x16_t)vshll_n_s32(v23, 0x20uLL), v22);
        memset(&v41[1], 0, 64);
        char v42 = 0;
        int v43 = 1065353216;
        uint64_t v44 = 0;
        char v45 = -1;
        uint64_t v24 = MEMORY[0x263F8EE78];
        uint64_t v46 = MEMORY[0x263F8EE78];
        unsigned __int8 v40 = v4;
        if (v20 == 1)
        {
          uint64_t v24 = v19;
          uint64_t v25 = 0;
        }
        else
        {
          uint64_t v25 = v19;
        }
        if (v20 == 1) {
          char v26 = 5;
        }
        else {
          char v26 = v20;
        }
        uint64_t v39 = v24;
        _ShapeStyle_Pack.subscript.setter((uint64_t *)v41, &v40, v5);
        uint64_t result = outlined consume of _ShapeStyle_Shape.Result(v25, v26);
        *(void *)(a2 + 32) = v39;
        char v27 = 1;
        goto LABEL_18;
      }
      break;
    case 2:
      uint64_t v28 = *(void *)(a2 + 32);
      char v29 = *(unsigned char *)(a2 + 40);
      uint64_t v30 = *(void *)(a2 + 56);
      if (v4 < 1)
      {
        outlined copy of _ShapeStyle_Shape.Result(*(void *)(a2 + 32), *(unsigned char *)(a2 + 40));
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v32 = v7;
      }
      else
      {
        *(void *)&v41[0] = *(void *)(a2 + 48);
        *((void *)&v41[0] + 1) = v30;
        unint64_t v38 = *(float (**)(uint64_t, _OWORD *))(*(void *)result + 152);
        outlined copy of _ShapeStyle_Shape.Result(v28, v29);
        swift_retain();
        swift_retain_n();
        swift_retain_n();
        float v31 = v38(v4, v41);
        swift_release();
        swift_release();
        type metadata accessor for ColorBox<Color.OpacityColor>();
        uint64_t v32 = swift_allocObject();
        *(void *)(v32 + 16) = v7;
        *(double *)(v32 + 24) = v31;
      }
      swift_retain();
      outlined consume of _ShapeStyle_Shape.Result(v28, v29);
      swift_release();
      swift_release();
      swift_release();
      uint64_t result = outlined consume of _ShapeStyle_Shape.Result(v28, v29);
      *(void *)(a2 + 32) = v32;
      char v27 = 3;
LABEL_18:
      *(unsigned char *)(a2 + 40) = v27;
      break;
    case 3:
    case 4:
    case 5:
      return result;
    default:
      uint64_t v8 = *(void *)(a2 + 32);
      char v9 = *(unsigned char *)(a2 + 40);
      uint64_t v10 = *(void *)(a2 + 56);
      if (v4 < 1)
      {
        outlined copy of _ShapeStyle_Shape.Result(*(void *)(a2 + 32), *(unsigned char *)(a2 + 40));
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v12 = v7;
      }
      else
      {
        *(void *)&v41[0] = *(void *)(a2 + 48);
        *((void *)&v41[0] + 1) = v10;
        char v36 = *(float (**)(uint64_t, _OWORD *))(*(void *)result + 152);
        outlined copy of _ShapeStyle_Shape.Result(v8, v9);
        swift_retain();
        swift_retain_n();
        swift_retain_n();
        float v11 = v36(v4, v41);
        swift_release();
        swift_release();
        type metadata accessor for ColorBox<Color.OpacityColor>();
        uint64_t v12 = swift_allocObject();
        *(void *)(v12 + 16) = v7;
        *(double *)(v12 + 24) = v11;
      }
      swift_retain();
      outlined consume of _ShapeStyle_Shape.Result(v8, v9);
      swift_release();
      swift_release();
      swift_release();
      uint64_t result = outlined consume of _ShapeStyle_Shape.Result(v8, v9);
      *(void *)(a2 + 32) = v12;
      *(unsigned char *)(a2 + 40) = 0;
      break;
  }
  return result;
}

uint64_t outlined consume of _ShapeStyle_Shape.Result(uint64_t a1, char a2)
{
  switch(a2)
  {
    case 0:
    case 2:
    case 3:
      uint64_t result = swift_release();
      break;
    case 1:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t outlined copy of _ShapeStyle_Shape.Result(uint64_t a1, char a2)
{
  switch(a2)
  {
    case 0:
    case 2:
    case 3:
      uint64_t result = swift_retain();
      break;
    case 1:
      uint64_t result = swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t _ShapeStyle_Pack.subscript.setter(uint64_t *a1, unsigned __int8 *a2, unsigned __int8 a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v7 = a1[2];
  uint64_t v6 = a1[3];
  uint64_t v8 = a1[4];
  uint64_t v9 = a1[5];
  uint64_t v11 = a1[6];
  uint64_t v10 = a1[7];
  uint64_t v13 = a1[8];
  uint64_t v12 = a1[9];
  char v14 = *((unsigned char *)a1 + 80);
  int v15 = *((_DWORD *)a1 + 21);
  uint64_t v16 = a1[11];
  char v17 = *((unsigned char *)a1 + 96);
  uint64_t v18 = a1[13];
  unsigned int v19 = *a2;
  int v20 = *(void **)v3;
  unint64_t v21 = *(void *)(*(void *)v3 + 16);
  if (v21)
  {
    unint64_t v22 = 0;
    int32x2_t v23 = (char *)v20 + 33;
    uint64_t v24 = 18;
    while (1)
    {
      unsigned int v25 = v23[v24 * 8 - 145];
      unsigned int v26 = v23[v24 * 8 - 144];
      if (v19 == v25 && v26 == a3) {
        break;
      }
      BOOL v28 = v26 > a3 && v19 == v25;
      if (v19 < v25 || v28)
      {
        if (v21 >= v22) {
          goto LABEL_19;
        }
        __break(1u);
        goto LABEL_21;
      }
      ++v22;
      v24 += 15;
      if (v21 == v22)
      {
        unint64_t v22 = *(void *)(*(void *)v3 + 16);
        goto LABEL_19;
      }
    }
    uint64_t v44 = a1[6];
    uint64_t v45 = a1[7];
    uint64_t v46 = a1[8];
    uint64_t v47 = a1[9];
    char v48 = *((unsigned char *)a1 + 80);
    uint64_t v49 = a1[11];
    char v50 = *((unsigned char *)a1 + 96);
    uint64_t v51 = a1[13];
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result) {
      goto LABEL_16;
    }
LABEL_21:
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v20);
    int v20 = (void *)result;
LABEL_16:
    if (v22 >= v20[2])
    {
      __break(1u);
    }
    else
    {
      uint64_t v30 = &v20[v24];
      uint64_t v31 = v20[v24 - 13];
      uint64_t v32 = v20[v24 - 12];
      uint64_t v33 = v20[v24 - 11];
      uint64_t v34 = v20[v24 - 10];
      uint64_t v35 = v20[v24 - 9];
      uint64_t v36 = v20[v24 - 8];
      uint64_t v37 = v20[v24 - 7];
      uint64_t v38 = v20[v24 - 6];
      uint64_t v39 = v20[v24 - 5];
      uint64_t v40 = v20[v24 - 4];
      char v41 = v20[v24 - 3];
      uint64_t v42 = v20[v24 - 2];
      *(v30 - 13) = v4;
      *(v30 - 12) = v5;
      *(v30 - 11) = v7;
      *(v30 - 10) = v6;
      *(v30 - 9) = v8;
      *(v30 - 8) = v9;
      *(v30 - 7) = v44;
      *(v30 - 6) = v45;
      *(v30 - 5) = v46;
      *(v30 - 4) = v47;
      *((unsigned char *)v30 - 24) = v48;
      *((_DWORD *)v30 - 5) = v15;
      *(v30 - 2) = v49;
      unsigned __int8 v43 = v20[v24 - 1];
      *((unsigned char *)v30 - 8) = v50;
      *uint64_t v30 = v51;
      outlined consume of _ShapeStyle_Pack.Fill(v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41);
      outlined consume of GraphicsBlendMode?(v42, v43);
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)uint64_t v3 = v20;
    }
  }
  else
  {
    unint64_t v22 = 0;
LABEL_19:
    int v58 = v55;
    __int16 v59 = v56;
    __int16 v71 = v53;
    char v72 = v54;
    *(_DWORD *)uint64_t v76 = *(_DWORD *)v52;
    *(_DWORD *)&v76[3] = *(_DWORD *)&v52[3];
    v57[0] = v19;
    v57[1] = a3;
    uint64_t v60 = v4;
    uint64_t v61 = v5;
    uint64_t v62 = v7;
    uint64_t v63 = v6;
    uint64_t v64 = v8;
    uint64_t v65 = v9;
    uint64_t v66 = v11;
    uint64_t v67 = v10;
    uint64_t v68 = v13;
    uint64_t v69 = v12;
    char v70 = v14;
    int v73 = v15;
    uint64_t v74 = v16;
    char v75 = v17;
    uint64_t v77 = v18;
    return (uint64_t)specialized Array.replaceSubrange<A>(_:with:)(v22, v22, (uint64_t)v57);
  }
  return result;
}

char *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v5 = *(void **)v3;
  int64_t v6 = *(void *)(*(void *)v3 + 16);
  if (v6 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v10 > v5[3] >> 1)
  {
    if (v6 <= v10) {
      int64_t v13 = v6 + v9;
    }
    else {
      int64_t v13 = v6;
    }
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v13, 1, v5);
  }
  uint64_t v14 = (uint64_t)&v5[15 * a1 + 4];
  type metadata accessor for (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)();
  uint64_t result = (char *)swift_arrayDestroy();
  if (!v9) {
    goto LABEL_20;
  }
  uint64_t v16 = v5[2];
  BOOL v17 = __OFSUB__(v16, a2);
  uint64_t v18 = v16 - a2;
  if (v17) {
    goto LABEL_26;
  }
  if ((v18 & 0x8000000000000000) == 0)
  {
    uint64_t result = (char *)(v14 + 120);
    unsigned int v19 = (char *)&v5[15 * a2 + 4];
    if ((char *)(v14 + 120) != v19 || result >= &v19[120 * v18]) {
      uint64_t result = (char *)memmove(result, v19, 120 * v18);
    }
    uint64_t v20 = v5[2];
    BOOL v17 = __OFADD__(v20, v9);
    uint64_t v21 = v20 + v9;
    if (!v17)
    {
      _OWORD v5[2] = v21;
LABEL_20:
      long long v22 = *(_OWORD *)(a3 + 80);
      *(_OWORD *)(v14 + 64) = *(_OWORD *)(a3 + 64);
      *(_OWORD *)(v14 + 80) = v22;
      *(_OWORD *)(v14 + 96) = *(_OWORD *)(a3 + 96);
      *(void *)(v14 + 112) = *(void *)(a3 + 112);
      long long v23 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)uint64_t v14 = *(_OWORD *)a3;
      *(_OWORD *)(v14 + 16) = v23;
      long long v24 = *(_OWORD *)(a3 + 48);
      *(_OWORD *)(v14 + 32) = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(v14 + 48) = v24;
      *(void *)uint64_t v3 = v5;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v3;
  void *v5;
  int64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  void *isUniquelyReferenced_nonNull_native;
  int64_t v13;
  uint64_t v14;
  char *result;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v5 = *(void **)v3;
  int64_t v6 = *(void *)(*(void *)v3 + 16);
  if (v6 < a2)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v9 = *(void *)(a3 + 16);
  int64_t v10 = v9 - v8;
  if (__OFSUB__(v9, v8))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v11 = v6 + v10;
  if (__OFADD__(v6, v10))
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v11 > v5[3] >> 1)
  {
    if (v6 <= v11) {
      int64_t v13 = v6 + v10;
    }
    else {
      int64_t v13 = v6;
    }
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v13, 1, v5);
  }
  uint64_t v14 = (uint64_t)&v5[4 * a1 + 4];
  uint64_t result = (char *)swift_arrayDestroy();
  if (!v10) {
    goto LABEL_20;
  }
  uint64_t v16 = v5[2];
  BOOL v17 = __OFSUB__(v16, a2);
  uint64_t v18 = v16 - a2;
  if (v17) {
    goto LABEL_28;
  }
  if (v18 < 0)
  {
LABEL_30:
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t result = (char *)(v14 + 32 * v9);
  unsigned int v19 = (char *)&v5[4 * a2 + 4];
  if (result != v19 || result >= &v19[32 * v18]) {
    uint64_t result = (char *)memmove(result, v19, 32 * v18);
  }
  uint64_t v20 = v5[2];
  BOOL v17 = __OFADD__(v20, v10);
  uint64_t v21 = v20 + v10;
  if (v17)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  _OWORD v5[2] = v21;
LABEL_20:
  if (v9) {
    uint64_t result = (char *)swift_arrayInitWithCopy();
  }
  *(void *)uint64_t v3 = v5;
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<(key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)>)
  {
    type metadata accessor for (proposal: _ProposedSize, value: TextSizeVariant)(255, (unint64_t *)&lazy cache variable for type metadata for (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style));
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)>);
    }
  }
}

void type metadata accessor for (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)()
{
  if (!lazy cache variable for type metadata for (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style));
    }
  }
}

void type metadata accessor for (proposal: _ProposedSize, value: TextSizeVariant)(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v4) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

uint64_t EnvironmentValues.defaultForegroundStyle.getter()
{
  return EnvironmentValues.foregroundStyle.getter(specialized PropertyList.Tracker.value<A>(_:for:), specialized find<A>(_:key:));
}

uint64_t ColorBox.opacity(at:environment:)(uint64_t a1, long long *a2)
{
  uint64_t v3 = *v2;
  long long v5 = *a2;
  return (*(uint64_t (**)(uint64_t, long long *, void))(*(void *)(v3 + 168) + 56))(a1, &v5, *(void *)(v3 + 160));
}

uint64_t protocol witness for ColorProvider.opacity(at:environment:) in conformance Color.DisplayP3(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  EnvironmentValues.systemColorDefinition.getter();
  v7[0] = v3;
  v7[1] = v4;
  return (*(uint64_t (**)(uint64_t, void *))(v5 + 16))(a1, v7);
}

ValueMetadata *EnvironmentValues.systemColorDefinition.getter()
{
  uint64_t v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v2 = (ValueMetadata *)specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    swift_release_n();
  }
  else
  {
    uint64_t v3 = swift_retain_n();
    uint64_t v4 = specialized find<A>(_:key:)(v3);
    if (v4) {
      uint64_t v2 = *(ValueMetadata **)(v4 + 72);
    }
    else {
      uint64_t v2 = &type metadata for CoreUIDefaultSystemColorDefinition;
    }
  }
  swift_release_n();
  return v2;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<SystemColorDefinitionKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<SystemColorDefinitionKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<SystemColorDefinitionKey>, (uint64_t)&type metadata for SystemColorDefinitionKey, (uint64_t)&protocol witness table for SystemColorDefinitionKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<SystemColorDefinitionKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<SystemColorDefinitionKey>>);
    }
  }
}

float protocol witness for static SystemColorDefinition.opacity(at:environment:) in conformance CoreUIDefaultSystemColorDefinition(uint64_t a1)
{
  float result = 0.18;
  if (a1 == 2) {
    float result = 0.25;
  }
  if (a1 == 1) {
    float result = 0.5;
  }
  if (a1 <= 0) {
    return 1.0;
  }
  return result;
}

uint64_t specialized ForegroundStyle._apply(to:)(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 106) & 2) != 0)
  {
    if (one-time initialization token for sharedPrimary != -1) {
      swift_once();
    }
    return (*(uint64_t (**)(uint64_t))(*(void *)static LegacyContentStyle.sharedPrimary + 80))(a1);
  }
  else
  {
    *(unsigned char *)(a1 + 106) |= 2u;
    uint64_t v2 = _ShapeStyle_Shape.effectiveForegroundStyle.getter();
    (*(void (**)(uint64_t))(*(void *)v2 + 80))(a1);
    uint64_t result = swift_release();
    if ((*(unsigned char *)(a1 + 106) & 2) != 0) {
      *(unsigned char *)(a1 + 106) &= ~2u;
    }
  }
  return result;
}

uint64_t _ShapeStyle_Shape.effectiveForegroundStyle.getter()
{
  if (*(void *)(v0 + 64))
  {
    uint64_t v1 = *(void *)(v0 + 64);
  }
  else
  {
    swift_retain();
    swift_retain();
    uint64_t v1 = EnvironmentValues.foregroundStyle.getter();
    if (!v1)
    {
      uint64_t v1 = EnvironmentValues.defaultForegroundStyle.getter();
      if (!v1)
      {
        if (one-time initialization token for sharedPrimary != -1) {
          swift_once();
        }
        uint64_t v1 = static HierarchicalShapeStyle.sharedPrimary;
        swift_retain();
      }
    }
    swift_release();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t EnvironmentValues.foregroundStyle.getter()
{
  return EnvironmentValues.foregroundStyle.getter(specialized PropertyList.Tracker.value<A>(_:for:), specialized find<A>(_:key:));
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<ForegroundStyleKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<ForegroundStyleKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<ForegroundStyleKey>, (uint64_t)&type metadata for ForegroundStyleKey, (uint64_t)&protocol witness table for ForegroundStyleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ForegroundStyleKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<ForegroundStyleKey>>);
    }
  }
}

uint64_t outlined copy of Material?(uint64_t a1, unsigned __int8 a2)
{
  if (a2 != 0xFF) {
    return outlined copy of Material.ID(a1, a2);
  }
  return a1;
}

uint64_t _DefaultForegroundStyleModifier.DefaultForegroundStyleEnvironment.modifier.getter@<X0>(uint64_t (*a1)(void)@<X3>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1(0);
  uint64_t Value = AGGraphGetValue();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v5(a2, Value, v3);
}

uint64_t type metadata accessor for _ForegroundStyleModifier()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<BackgroundMaterialKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<BackgroundMaterialKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundMaterialKey>, (uint64_t)&type metadata for BackgroundMaterialKey, (uint64_t)&protocol witness table for BackgroundMaterialKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<BackgroundMaterialKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<BackgroundMaterialKey>>);
    }
  }
}

uint64_t protocol witness for ShapeStyle._apply(to:) in conformance HierarchicalShapeStyle(uint64_t a1)
{
  return HierarchicalShapeStyle._apply(to:)(a1, *v1);
}

uint64_t ShapeStyleBox.apply(to:)(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(*(void *)v1 + 112) + 32))(a1, *(void *)(*(void *)v1 + 104));
}

uint64_t specialized HierarchicalShapeStyle.apply<A>(_:to:)(uint64_t a1, unsigned int a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 24);
  if (a2)
  {
    uint64_t v4 = a2;
    if (v3 == 3)
    {
      type metadata accessor for ShapeStyleBox<OffsetShapeStyle<ForegroundMaterialStyle>>(0, &lazy cache variable for type metadata for ShapeStyleBox<OffsetShapeStyle<SystemColorsStyle>>, &lazy cache variable for type metadata for OffsetShapeStyle<SystemColorsStyle>, (uint64_t)&type metadata for SystemColorsStyle, (uint64_t)&protocol witness table for SystemColorsStyle);
      uint64_t v5 = swift_allocObject();
      *(void *)(v5 + 16) = v4;
      uint64_t result = outlined consume of _ShapeStyle_Shape.Result(*(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
      *(void *)(a1 + 32) = v5;
LABEL_6:
      *(unsigned char *)(a1 + 40) = 2;
      return result;
    }
    return specialized OffsetShapeStyle._apply(to:)(a1, (void *)a2);
  }
  else
  {
    if (v3 == 3)
    {
      type metadata accessor for OffsetShapeStyle<ForegroundMaterialStyle>(0, &lazy cache variable for type metadata for ShapeStyleBox<SystemColorsStyle>, (uint64_t)&type metadata for SystemColorsStyle, (uint64_t)&protocol witness table for SystemColorsStyle, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ShapeStyleBox);
      uint64_t v7 = swift_allocObject();
      uint64_t result = outlined consume of _ShapeStyle_Shape.Result(*(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
      *(void *)(a1 + 32) = v7;
      goto LABEL_6;
    }
    return SystemColorsStyle._apply(to:)(a1);
  }
}

uint64_t LegacyContentStyle._apply(to:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  if (*(unsigned char *)(a1 + 24) == 5 && (*(void *)a1 == 1 ? (BOOL v4 = *(_OWORD *)(a1 + 8) == 0) : (BOOL v4 = 0), v4))
  {
    if (one-time initialization token for sharedPrimary != -1) {
      swift_once();
    }
    int64_t v10 = static LegacyContentStyle.sharedPrimary;
    uint64_t v11 = *(void *)(a1 + 32);
    char v12 = *(unsigned char *)(a1 + 40);
    swift_retain();
    uint64_t result = outlined consume of _ShapeStyle_Shape.Result(v11, v12);
    *(void *)(a1 + 32) = v10;
    *(unsigned char *)(a1 + 40) = 2;
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 48);
    if (*(void *)(a1 + 56))
    {
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.value<A>(_:for:)(v5, &v14);
      swift_release_n();
      swift_release_n();
      uint64_t v6 = v14;
      uint64_t v7 = v15;
    }
    else
    {
      uint64_t v8 = swift_retain_n();
      uint64_t v9 = specialized find<A>(_:key:)(v8);
      if (v9)
      {
        uint64_t v6 = *(void *)(v9 + 72);
        uint64_t v7 = *(void *)(v9 + 80);
        outlined copy of Material?(v6, v7);
      }
      else
      {
        uint64_t v6 = 0;
        uint64_t v7 = 255;
      }
      swift_release_n();
    }
    if ((_BYTE)v7 == 0xFF)
    {
      if (v3)
      {
        return specialized OffsetShapeStyle._apply(to:)(a1, (void *)v3);
      }
      else
      {
        return SystemColorsStyle._apply(to:)(a1);
      }
    }
    else
    {
      uint64_t v14 = v6;
      LOBYTE(v15) = v7;
      HIDWORD(v15) = HIDWORD(v7);
      if (v3)
      {
        outlined copy of Material.ID(v6, v7);
        specialized OffsetShapeStyle._apply(to:)(a1, v6, v7 & 0xFFFFFFFF000000FFLL, v3);
        outlined consume of Material?(v6, v7);
      }
      else
      {
        ForegroundMaterialStyle._apply(to:)(a1);
      }
      return outlined consume of Material?(v6, v7);
    }
  }
  return result;
}

uint64_t SystemColorsStyle._apply(to:)(uint64_t result)
{
  uint64_t v2 = *(void *)result;
  uint64_t v1 = *(void *)(result + 8);
  uint64_t v3 = result;
  switch(*(unsigned char *)(result + 24))
  {
    case 1:
      if (v1 > 4 || *(void *)(result + 8) <= 4u)
      {
        v20[0] = *(_OWORD *)(result + 48);
        ContentStyle.ID.resolve(in:)((uint64_t *)v20);
        v10.i32[1] = v9;
        v13.i64[0] = v11;
        v13.i64[1] = v12;
        v20[0] = vorrq_s8((int8x16_t)vshll_n_s32(v10, 0x20uLL), v13);
        memset(&v20[1], 0, 64);
        char v21 = 0;
        int v22 = 1065353216;
        uint64_t v23 = 0;
        char v24 = -1;
        uint64_t v14 = MEMORY[0x263F8EE78];
        uint64_t v25 = MEMORY[0x263F8EE78];
        unsigned __int8 v19 = v2;
        int v15 = *(unsigned __int8 *)(v3 + 40);
        if (v15 == 1)
        {
          uint64_t v14 = *(void *)(v3 + 32);
          uint64_t v16 = 0;
        }
        else
        {
          uint64_t v16 = *(void *)(v3 + 32);
        }
        if (v15 == 1) {
          char v17 = 5;
        }
        else {
          char v17 = *(unsigned char *)(v3 + 40);
        }
        uint64_t v18 = v14;
        _ShapeStyle_Pack.subscript.setter((uint64_t *)v20, &v19, v1);
        uint64_t result = outlined consume of _ShapeStyle_Shape.Result(v16, v17);
        *(void *)(v3 + 32) = v18;
        char v8 = 1;
        goto LABEL_29;
      }
      __break(1u);
      break;
    case 2:
      if (v2 <= 4)
      {
        switch(*(void *)result)
        {
          case 0u:
            if (one-time initialization token for primary != -1) {
              swift_once();
            }
            uint64_t v6 = (uint64_t *)&static Color.primary;
            goto LABEL_10;
          case 1u:
            if (one-time initialization token for secondary != -1) {
              swift_once();
            }
            uint64_t v6 = &static Color.secondary;
            goto LABEL_10;
          case 2u:
            if (one-time initialization token for tertiary != -1) {
              swift_once();
            }
            uint64_t v6 = &static Color.tertiary;
            goto LABEL_10;
          case 3u:
            if (one-time initialization token for quaternary != -1) {
              swift_once();
            }
            uint64_t v6 = &static Color.quaternary;
            goto LABEL_10;
          case 4u:
            break;
          default:
            goto LABEL_49;
        }
      }
      if (one-time initialization token for quinary != -1) {
        swift_once();
      }
      uint64_t v6 = &static Color.quinary;
LABEL_10:
      uint64_t v7 = *v6;
      swift_retain();
      uint64_t result = outlined consume of _ShapeStyle_Shape.Result(*(void *)(v3 + 32), *(unsigned char *)(v3 + 40));
      *(void *)(v3 + 32) = v7;
      char v8 = 3;
LABEL_29:
      *(unsigned char *)(v3 + 40) = v8;
      break;
    case 3:
    case 4:
    case 5:
      return result;
    default:
      if (v2 <= 4)
      {
        switch(*(void *)result)
        {
          case 0u:
            if (one-time initialization token for primary != -1) {
              swift_once();
            }
            BOOL v4 = (uint64_t *)&static Color.primary;
            break;
          case 1u:
            if (one-time initialization token for secondary != -1) {
              swift_once();
            }
            BOOL v4 = &static Color.secondary;
            break;
          case 2u:
            if (one-time initialization token for tertiary != -1) {
              swift_once();
            }
            BOOL v4 = &static Color.tertiary;
            break;
          case 3u:
            if (one-time initialization token for quaternary != -1) {
              swift_once();
            }
            BOOL v4 = &static Color.quaternary;
            break;
          case 4u:
            goto LABEL_3;
          default:
            __break(1u);
LABEL_49:
            __break(1u);
            goto LABEL_50;
        }
      }
      else
      {
LABEL_3:
        if (one-time initialization token for quinary != -1) {
LABEL_50:
        }
          swift_once();
        BOOL v4 = &static Color.quinary;
      }
      uint64_t v5 = *v4;
      swift_retain();
      uint64_t result = outlined consume of _ShapeStyle_Shape.Result(*(void *)(v3 + 32), *(unsigned char *)(v3 + 40));
      *(void *)(v3 + 32) = v5;
      *(unsigned char *)(v3 + 40) = 0;
      break;
  }
  return result;
}

uint64_t protocol witness for ShapeStyle._apply(to:) in conformance Color(uint64_t a1)
{
  return Color._apply(to:)(a1, *v1);
}

uint64_t protocol witness for ColorProvider.apply(color:to:) in conformance ResolvedColorProvider(uint64_t a1, uint64_t a2)
{
  return specialized ColorProvider._apply(color:to:)(a1, a2, *v2, v2[1], v2[2], v2[3]);
}

uint64_t specialized ColorProvider._apply(color:to:)(uint64_t result, uint64_t a2, float a3, float a4, float a5, float a6)
{
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v9 = result;
  switch(*(unsigned char *)(a2 + 24))
  {
    case 1:
      if (v7 != *(void *)(a2 + 16))
      {
        uint64_t v17 = *(void *)(a2 + 32);
        uint64_t v18 = *(void *)(a2 + 56);
        int v19 = *(unsigned __int8 *)(a2 + 40);
        *(void *)&v39[0] = *(void *)(a2 + 48);
        *((void *)&v39[0] + 1) = v18;
        uint64_t v33 = *(float (**)(uint64_t, _OWORD *))(*(void *)result + 152);
        outlined copy of _ShapeStyle_Shape.Result(v17, v19);
        swift_retain();
        swift_retain_n();
        swift_retain_n();
        float v20 = v33(v7, v39);
        swift_release();
        swift_release();
        outlined consume of _ShapeStyle_Shape.Result(v17, v19);
        swift_release();
        swift_release();
        swift_release();
        v21.i64[0] = LODWORD(a3);
        v21.i64[1] = LODWORD(a5);
        *(float *)v22.i32 = a4;
        *(float *)&v22.i32[1] = v20 * a6;
        v39[0] = vorrq_s8((int8x16_t)vshll_n_s32(v22, 0x20uLL), v21);
        memset(&v39[1], 0, 64);
        char v40 = 0;
        int v41 = 1065353216;
        uint64_t v42 = 0;
        char v43 = -1;
        uint64_t v23 = MEMORY[0x263F8EE78];
        uint64_t v44 = MEMORY[0x263F8EE78];
        unsigned __int8 v38 = v6;
        if (v19 == 1)
        {
          uint64_t v23 = v17;
          uint64_t v24 = 0;
        }
        else
        {
          uint64_t v24 = v17;
        }
        if (v19 == 1) {
          char v25 = 5;
        }
        else {
          char v25 = v19;
        }
        uint64_t v37 = v23;
        _ShapeStyle_Pack.subscript.setter((uint64_t *)v39, &v38, v7);
        uint64_t result = outlined consume of _ShapeStyle_Shape.Result(v24, v25);
        *(void *)(a2 + 32) = v37;
        char v26 = 1;
        goto LABEL_18;
      }
      break;
    case 2:
      uint64_t v27 = *(void *)(a2 + 32);
      char v28 = *(unsigned char *)(a2 + 40);
      uint64_t v29 = *(void *)(a2 + 56);
      if (v6 < 1)
      {
        outlined copy of _ShapeStyle_Shape.Result(*(void *)(a2 + 32), *(unsigned char *)(a2 + 40));
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v32 = v9;
      }
      else
      {
        *(void *)&v39[0] = *(void *)(a2 + 48);
        *((void *)&v39[0] + 1) = v29;
        uint64_t v30 = *(float (**)(uint64_t, _OWORD *))(*(void *)result + 152);
        outlined copy of _ShapeStyle_Shape.Result(v27, v28);
        swift_retain();
        swift_retain_n();
        swift_retain_n();
        float v31 = v30(v6, v39);
        swift_release();
        swift_release();
        _s7SwiftUI8ColorBox33_3A792CB70CFCF892676D7ADF8BCA260FLLCyAA0C0V07OpacityC033_F28C5F7FF836E967BAC87540A3CB4F65LLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<Color.OpacityColor>, (void (*)(void))lazy protocol witness table accessor for type Color.OpacityColor and conformance Color.OpacityColor);
        uint64_t v32 = swift_allocObject();
        *(void *)(v32 + 16) = v9;
        *(double *)(v32 + 24) = v31;
      }
      swift_retain();
      outlined consume of _ShapeStyle_Shape.Result(v27, v28);
      swift_release();
      swift_release();
      swift_release();
      uint64_t result = outlined consume of _ShapeStyle_Shape.Result(v27, v28);
      *(void *)(a2 + 32) = v32;
      char v26 = 3;
LABEL_18:
      *(unsigned char *)(a2 + 40) = v26;
      break;
    case 3:
    case 4:
    case 5:
      return result;
    default:
      uint64_t v10 = *(void *)(a2 + 32);
      char v11 = *(unsigned char *)(a2 + 40);
      uint64_t v12 = *(void *)(a2 + 56);
      if (v6 < 1)
      {
        outlined copy of _ShapeStyle_Shape.Result(*(void *)(a2 + 32), *(unsigned char *)(a2 + 40));
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v15 = v9;
      }
      else
      {
        *(void *)&v39[0] = *(void *)(a2 + 48);
        *((void *)&v39[0] + 1) = v12;
        int8x16_t v13 = *(float (**)(uint64_t, _OWORD *))(*(void *)result + 152);
        outlined copy of _ShapeStyle_Shape.Result(v10, v11);
        swift_retain();
        swift_retain_n();
        swift_retain_n();
        float v14 = v13(v6, v39);
        swift_release();
        swift_release();
        _s7SwiftUI8ColorBox33_3A792CB70CFCF892676D7ADF8BCA260FLLCyAA0C0V07OpacityC033_F28C5F7FF836E967BAC87540A3CB4F65LLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<Color.OpacityColor>, (void (*)(void))lazy protocol witness table accessor for type Color.OpacityColor and conformance Color.OpacityColor);
        uint64_t v15 = swift_allocObject();
        *(void *)(v15 + 16) = v9;
        *(double *)(v15 + 24) = v14;
      }
      swift_retain();
      outlined consume of _ShapeStyle_Shape.Result(v10, v11);
      swift_release();
      swift_release();
      swift_release();
      uint64_t result = outlined consume of _ShapeStyle_Shape.Result(v10, v11);
      *(void *)(a2 + 32) = v15;
      *(unsigned char *)(a2 + 40) = 0;
      break;
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<DefaultForegroundStyleKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<DefaultForegroundStyleKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultForegroundStyleKey>, (uint64_t)&type metadata for DefaultForegroundStyleKey, (uint64_t)&protocol witness table for DefaultForegroundStyleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultForegroundStyleKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<DefaultForegroundStyleKey>>);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<DefaultForegroundStyleKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<DefaultForegroundStyleKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultForegroundStyleKey>, (uint64_t)&type metadata for DefaultForegroundStyleKey, (uint64_t)&protocol witness table for DefaultForegroundStyleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultForegroundStyleKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<DefaultForegroundStyleKey>>);
    }
  }
}

void type metadata accessor for ShapeStyleBox<OffsetShapeStyle<ForegroundMaterialStyle>>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  if (!*a2)
  {
    type metadata accessor for OffsetShapeStyle<ForegroundMaterialStyle>(255, a3, a4, a5, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for OffsetShapeStyle);
    unint64_t v6 = type metadata accessor for ShapeStyleBox();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t specialized OffsetShapeStyle._apply(to:)(uint64_t result, void *a2)
{
  uint64_t v5 = *(void *)result;
  unint64_t v6 = (void *)(result + 8);
  uint64_t v7 = *(void *)(result + 8);
  uint64_t v8 = *(void *)(result + 16);
  uint64_t v9 = (uint64_t)a2;
  uint64_t v10 = result;
  switch(*(unsigned char *)(result + 24))
  {
    case 1:
      int v19 = (char *)a2 + v7;
      if (__OFADD__(v7, a2)) {
        goto LABEL_105;
      }
      float v20 = (char *)a2 + v8;
      if (__OFADD__(v8, a2)) {
        goto LABEL_106;
      }
      if ((uint64_t)v20 < (uint64_t)v19) {
        goto LABEL_107;
      }
      unsigned int v2 = *(void *)result;
      int v21 = *(unsigned __int8 *)(result + 40);
      BOOL v22 = v21 == 1;
      if (v21 == 1) {
        uint64_t v23 = 0;
      }
      else {
        uint64_t v23 = *(void *)(result + 32);
      }
      if (v21 == 1) {
        LOBYTE(v21) = 5;
      }
      LOBYTE(v61) = v21;
      uint64_t v24 = (void *)MEMORY[0x263F8EE78];
      if (v22) {
        uint64_t v3 = *(void *)(result + 32);
      }
      else {
        uint64_t v3 = MEMORY[0x263F8EE78];
      }
      uint64_t v4 = *(void *)(v3 + 16);
      uint64_t v62 = result;
      unsigned int v81 = *(void *)result;
      if (!v4) {
        goto LABEL_41;
      }
      __int16 v59 = (char *)a2 + v7;
      uint64_t v60 = *(void *)result;
      uint64_t v57 = v23;
      int v58 = v20;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        goto LABEL_109;
      }
      goto LABEL_30;
    case 2:
      uint64_t v14 = (uint64_t)a2 + v5;
      if (__OFADD__(a2, v5)) {
        goto LABEL_104;
      }
      *(void *)uint64_t result = v14;
      *unint64_t v6 = 0;
      *(void *)(result + 16) = 0;
      *(unsigned char *)(result + 24) = 2;
      if (v14 <= 4)
      {
        switch((_BYTE)a2 + (_BYTE)v5)
        {
          case 0:
            if (one-time initialization token for primary != -1) {
              swift_once();
            }
            uint64_t v15 = (uint64_t *)&static Color.primary;
            goto LABEL_14;
          case 1:
            if (one-time initialization token for secondary != -1) {
              swift_once();
            }
            uint64_t v15 = &static Color.secondary;
            goto LABEL_14;
          case 2:
            if (one-time initialization token for tertiary != -1) {
              swift_once();
            }
            uint64_t v15 = &static Color.tertiary;
            goto LABEL_14;
          case 3:
            if (one-time initialization token for quaternary != -1) {
              swift_once();
            }
            uint64_t v15 = &static Color.quaternary;
            goto LABEL_14;
          case 4:
            break;
          default:
            __break(1u);
            goto LABEL_111;
        }
      }
      if (one-time initialization token for quinary != -1) {
        swift_once();
      }
      uint64_t v15 = &static Color.quinary;
LABEL_14:
      uint64_t v16 = *v15;
      swift_retain();
      uint64_t result = outlined consume of _ShapeStyle_Shape.Result(*(void *)(v10 + 32), *(unsigned char *)(v10 + 40));
      *(void *)(v10 + 32) = v16;
      char v17 = 3;
      goto LABEL_78;
    case 3:
      uint64_t result = SystemColorsStyle._apply(to:)(result);
      if (*(unsigned char *)(v10 + 40) != 2) {
        return result;
      }
      uint64_t v18 = *(void *)(v10 + 32);
      type metadata accessor for ShapeStyleBox<OffsetShapeStyle<ForegroundMaterialStyle>>(0, &lazy cache variable for type metadata for ShapeStyleBox<OffsetShapeStyle<AnyShapeStyle>>, (unint64_t *)&lazy cache variable for type metadata for OffsetShapeStyle<AnyShapeStyle>, (uint64_t)&type metadata for AnyShapeStyle, (uint64_t)&protocol witness table for AnyShapeStyle);
      uint64_t result = swift_allocObject();
      *(void *)(result + 16) = v18;
      *(void *)(result + 24) = v9;
      *(void *)(v10 + 32) = result;
      goto LABEL_68;
    case 4:
      if (__OFADD__(a2, v5)) {
        goto LABEL_103;
      }
      *(void *)uint64_t result = (char *)a2 + v5;
      *unint64_t v6 = 0;
      *(void *)(result + 16) = 0;
      *(unsigned char *)(result + 24) = 4;
      return result;
    case 5:
      if (v8 | v7 | v5)
      {
        type metadata accessor for OffsetShapeStyle<ForegroundMaterialStyle>(0, &lazy cache variable for type metadata for ShapeStyleBox<SystemColorsStyle>, (uint64_t)&type metadata for SystemColorsStyle, (uint64_t)&protocol witness table for SystemColorsStyle, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ShapeStyleBox);
        uint64_t v56 = swift_allocObject();
        uint64_t result = outlined consume of _ShapeStyle_Shape.Result(*(void *)(v10 + 32), *(unsigned char *)(v10 + 40));
        *(void *)(v10 + 32) = v56;
LABEL_68:
        char v17 = 2;
      }
      else
      {
        uint64_t result = outlined consume of _ShapeStyle_Shape.Result(*(void *)(result + 32), *(unsigned char *)(result + 40));
        *(void *)(v10 + 32) = 0;
        char v17 = 4;
      }
      goto LABEL_78;
    default:
      uint64_t v11 = (uint64_t)a2 + v5;
      if (!__OFADD__(a2, v5))
      {
        *(void *)uint64_t result = v11;
        *unint64_t v6 = 0;
        *(void *)(result + 16) = 0;
        *(unsigned char *)(result + 24) = 0;
        if (v11 <= 4)
        {
          switch((_BYTE)a2 + (_BYTE)v5)
          {
            case 0:
              if (one-time initialization token for primary != -1) {
                swift_once();
              }
              uint64_t v12 = (uint64_t *)&static Color.primary;
              break;
            case 1:
              if (one-time initialization token for secondary != -1) {
                swift_once();
              }
              uint64_t v12 = &static Color.secondary;
              break;
            case 2:
              if (one-time initialization token for tertiary != -1) {
                swift_once();
              }
              uint64_t v12 = &static Color.tertiary;
              break;
            case 3:
              if (one-time initialization token for quaternary != -1) {
                swift_once();
              }
              uint64_t v12 = &static Color.quaternary;
              break;
            case 4:
              goto LABEL_4;
            default:
LABEL_111:
              __break(1u);
              goto LABEL_112;
          }
        }
        else
        {
LABEL_4:
          if (one-time initialization token for quinary != -1) {
LABEL_112:
          }
            swift_once();
          uint64_t v12 = &static Color.quinary;
        }
        uint64_t v13 = *v12;
        swift_retain();
        uint64_t result = outlined consume of _ShapeStyle_Shape.Result(*(void *)(v10 + 32), *(unsigned char *)(v10 + 40));
        *(void *)(v10 + 32) = v13;
        *(unsigned char *)(v10 + 40) = 0;
        return result;
      }
      break;
  }
LABEL_102:
  __break(1u);
LABEL_103:
  __break(1u);
LABEL_104:
  __break(1u);
LABEL_105:
  __break(1u);
LABEL_106:
  __break(1u);
LABEL_107:
  __break(1u);
  do
  {
    __break(1u);
LABEL_109:
    uint64_t v3 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)v3);
LABEL_30:
    uint64_t v25 = 0;
    uint64_t v26 = v3 + 32;
    do
    {
      while (1)
      {
        unint64_t v27 = *(void *)(v3 + 16);
        if (v25 >= v27)
        {
          __break(1u);
LABEL_99:
          __break(1u);
LABEL_100:
          __break(1u);
LABEL_101:
          __break(1u);
          goto LABEL_102;
        }
        char v28 = (unsigned __int8 *)(v26 + 120 * v25);
        unsigned int v29 = *v28;
        if (v29 >= v2) {
          break;
        }
LABEL_32:
        if (++v25 >= v4) {
          goto LABEL_40;
        }
      }
      if (v29 > v2) {
        break;
      }
      uint64_t v30 = v28[1];
      BOOL v31 = __OFADD__(v30, v9);
      unint64_t v32 = v30 + v9;
      if (v31) {
        goto LABEL_100;
      }
      if ((v32 & 0x8000000000000000) == 0)
      {
        v28[1] = v32;
        goto LABEL_32;
      }
      unint64_t v33 = v27 - 1;
      uint64_t v34 = v27 - 1 - v25;
      if (v34 < 0)
      {
LABEL_113:
        uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
        __break(1u);
        return result;
      }
      uint64_t v35 = v26 + 120 * v25;
      uint64_t v79 = *(void *)(v35 + 96);
      char v67 = *(unsigned char *)(v35 + 88);
      uint64_t v63 = *(void *)(v35 + 72);
      uint64_t v65 = *(void *)(v35 + 80);
      uint64_t v75 = *(void *)(v35 + 56);
      uint64_t v77 = *(void *)(v35 + 64);
      uint64_t v36 = *(void *)(v35 + 32);
      uint64_t v71 = *(void *)(v35 + 40);
      uint64_t v73 = *(void *)(v35 + 48);
      uint64_t v38 = *(void *)(v35 + 16);
      uint64_t v37 = *(void *)(v35 + 24);
      uint64_t v39 = *(void *)(v35 + 8);
      unsigned __int8 v69 = *(unsigned char *)(v35 + 104);
      memmove(v28, v28 + 120, 120 * v34);
      *(void *)(v3 + 16) = v33;
      outlined consume of _ShapeStyle_Pack.Fill(v39, v38, v37, v36, v71, v73, v75, v77, v63, v65, v67);
      outlined consume of GraphicsBlendMode?(v79, v69);
      swift_bridgeObjectRelease();
      --v4;
      unsigned int v2 = v81;
    }
    while (v25 < v4);
LABEL_40:
    uint64_t v10 = v62;
    int v19 = v59;
    LOBYTE(v5) = v60;
    uint64_t v24 = (void *)MEMORY[0x263F8EE78];
    uint64_t v23 = v57;
    float v20 = v58;
LABEL_41:
    outlined consume of _ShapeStyle_Shape.Result(v23, v61);
    *(void *)(v10 + 32) = v3;
    *(unsigned char *)(v10 + 40) = 1;
    *(void *)uint64_t v10 = v5;
    *(void *)(v10 + 8) = v19;
    *(void *)(v10 + 16) = v20;
    *(unsigned char *)(v10 + 24) = 1;
    SystemColorsStyle._apply(to:)(v10);
    uint64_t v4 = -v9;
  }
  while (__OFSUB__(0, v9));
  int v40 = *(unsigned __int8 *)(v10 + 40);
  if (v40 == 1) {
    uint64_t v41 = 0;
  }
  else {
    uint64_t v41 = *(void *)(v10 + 32);
  }
  if (v40 == 1) {
    uint64_t v3 = 5;
  }
  else {
    uint64_t v3 = *(unsigned __int8 *)(v10 + 40);
  }
  if (v40 == 1) {
    uint64_t v9 = *(void *)(v10 + 32);
  }
  else {
    uint64_t v9 = (uint64_t)v24;
  }
  uint64_t v42 = *(void *)(v9 + 16);
  if (v42)
  {
    uint64_t v61 = v41;
    LOBYTE(v60) = v3;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v9 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)v9);
    }
    unint64_t v43 = 0;
    uint64_t v44 = (void *)(v9 + 32);
    while (1)
    {
      while (1)
      {
        unint64_t v45 = *(void *)(v9 + 16);
        if (v43 >= v45) {
          goto LABEL_99;
        }
        uint64_t v46 = (unsigned __int8 *)&v44[15 * v43];
        unsigned int v47 = *v46;
        if (v47 >= v2) {
          break;
        }
LABEL_56:
        if ((uint64_t)++v43 >= v42) {
          goto LABEL_64;
        }
      }
      if (v47 > v2) {
        goto LABEL_64;
      }
      uint64_t v48 = v46[1];
      BOOL v31 = __OFADD__(v48, v4);
      uint64_t v49 = v48 + v4;
      if (v31) {
        goto LABEL_101;
      }
      if ((v49 & 0x8000000000000000) == 0)
      {
        v46[1] = v49;
        goto LABEL_56;
      }
      uint64_t v3 = v45 - 1;
      uint64_t v50 = v45 - 1 - v43;
      if (v50 < 0) {
        goto LABEL_113;
      }
      uint64_t v51 = &v44[15 * v43];
      uint64_t v80 = v51[12];
      char v68 = *((unsigned char *)v51 + 88);
      uint64_t v64 = v51[9];
      uint64_t v66 = v51[10];
      uint64_t v76 = v51[7];
      uint64_t v78 = v51[8];
      uint64_t v52 = v51[4];
      uint64_t v72 = v51[5];
      uint64_t v74 = v51[6];
      uint64_t v54 = v51[2];
      uint64_t v53 = v51[3];
      uint64_t v55 = v51[1];
      unsigned __int8 v70 = *((unsigned char *)v51 + 104);
      memmove(v46, v46 + 120, 120 * v50);
      *(void *)(v9 + 16) = v3;
      outlined consume of _ShapeStyle_Pack.Fill(v55, v54, v53, v52, v72, v74, v76, v78, v64, v66, v68);
      outlined consume of GraphicsBlendMode?(v80, v70);
      swift_bridgeObjectRelease();
      --v42;
      uint64_t v10 = v62;
      unsigned int v2 = v81;
      if ((uint64_t)v43 >= v42)
      {
LABEL_64:
        uint64_t v41 = v61;
        LOBYTE(v3) = v60;
        break;
      }
    }
  }
  uint64_t result = outlined consume of _ShapeStyle_Shape.Result(v41, v3);
  *(void *)(v10 + 32) = v9;
  char v17 = 1;
LABEL_78:
  *(unsigned char *)(v10 + 40) = v17;
  return result;
}

uint64_t specialized ShapeStyle.primaryStyle(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v7[1] = 0;
  void v7[2] = 0;
  v7[0] = 1;
  char v8 = 5;
  uint64_t v9 = 0;
  unsigned __int8 v10 = 5;
  uint64_t v11 = a1;
  uint64_t v12 = a2;
  long long v13 = 0u;
  long long v14 = 0u;
  uint64_t v15 = 0;
  char v16 = 1;
  __int16 v17 = 0;
  uint64_t v3 = *(void (**)(void *))(*(void *)a3 + 80);
  swift_retain();
  swift_retain();
  v3(v7);
  uint64_t v4 = v9;
  int v5 = v10;
  outlined copy of _ShapeStyle_Shape.Result(v9, v10);
  outlined consume of _ShapeStyle_Shape.Result(v4, v5);
  swift_release();
  swift_release();
  swift_release();
  if (v5 != 2)
  {
    outlined consume of _ShapeStyle_Shape.Result(v4, v5);
    return 0;
  }
  return v4;
}

uint64_t specialized ColorProvider._apply(color:to:)(uint64_t result, uint64_t a2, double (*a3)(_OWORD *))
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v6 = result;
  switch(*(unsigned char *)(a2 + 24))
  {
    case 1:
      if (v4 != *(void *)(a2 + 16))
      {
        uint64_t v14 = *(void *)(a2 + 56);
        *(void *)&v40[0] = *(void *)(a2 + 48);
        uint64_t v13 = *(void *)&v40[0];
        *((void *)&v40[0] + 1) = v14;
        unsigned int v36 = COERCE_UNSIGNED_INT64(a3(v40));
        __int32 v37 = v15;
        unsigned int v35 = v16;
        float v18 = v17;
        uint64_t v19 = *(void *)(a2 + 32);
        int v20 = *(unsigned __int8 *)(a2 + 40);
        *(void *)&v40[0] = v13;
        *((void *)&v40[0] + 1) = v14;
        uint64_t v34 = *(float (**)(uint64_t, _OWORD *))(*(void *)v6 + 152);
        outlined copy of _ShapeStyle_Shape.Result(v19, v20);
        swift_retain();
        swift_retain_n();
        swift_retain_n();
        float v21 = v34(v4, v40);
        swift_release();
        swift_release();
        outlined consume of _ShapeStyle_Shape.Result(v19, v20);
        swift_release();
        swift_release();
        swift_release();
        v22.i64[0] = v36;
        v22.i64[1] = v35;
        v23.i32[0] = v37;
        *(float *)&v23.i32[1] = v18 * v21;
        v40[0] = vorrq_s8((int8x16_t)vshll_n_s32(v23, 0x20uLL), v22);
        memset(&v40[1], 0, 64);
        char v41 = 0;
        int v42 = 1065353216;
        uint64_t v43 = 0;
        char v44 = -1;
        uint64_t v24 = MEMORY[0x263F8EE78];
        uint64_t v45 = MEMORY[0x263F8EE78];
        unsigned __int8 v39 = v3;
        if (v20 == 1)
        {
          uint64_t v24 = v19;
          uint64_t v25 = 0;
        }
        else
        {
          uint64_t v25 = v19;
        }
        if (v20 == 1) {
          char v26 = 5;
        }
        else {
          char v26 = v20;
        }
        uint64_t v38 = v24;
        _ShapeStyle_Pack.subscript.setter((uint64_t *)v40, &v39, v4);
        uint64_t result = outlined consume of _ShapeStyle_Shape.Result(v25, v26);
        *(void *)(a2 + 32) = v38;
        char v27 = 1;
        goto LABEL_18;
      }
      break;
    case 2:
      uint64_t v28 = *(void *)(a2 + 32);
      char v29 = *(unsigned char *)(a2 + 40);
      uint64_t v30 = *(void *)(a2 + 56);
      if (v3 < 1)
      {
        outlined copy of _ShapeStyle_Shape.Result(*(void *)(a2 + 32), *(unsigned char *)(a2 + 40));
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v33 = v6;
      }
      else
      {
        *(void *)&v40[0] = *(void *)(a2 + 48);
        *((void *)&v40[0] + 1) = v30;
        BOOL v31 = *(float (**)(uint64_t, _OWORD *))(*(void *)result + 152);
        outlined copy of _ShapeStyle_Shape.Result(v28, v29);
        swift_retain();
        swift_retain_n();
        swift_retain_n();
        float v32 = v31(v3, v40);
        swift_release();
        swift_release();
        _s7SwiftUI8ColorBox33_3A792CB70CFCF892676D7ADF8BCA260FLLCyAA0C0V07OpacityC033_F28C5F7FF836E967BAC87540A3CB4F65LLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<Color.OpacityColor>, (void (*)(void))lazy protocol witness table accessor for type Color.OpacityColor and conformance Color.OpacityColor);
        uint64_t v33 = swift_allocObject();
        *(void *)(v33 + 16) = v6;
        *(double *)(v33 + 24) = v32;
      }
      swift_retain();
      outlined consume of _ShapeStyle_Shape.Result(v28, v29);
      swift_release();
      swift_release();
      swift_release();
      uint64_t result = outlined consume of _ShapeStyle_Shape.Result(v28, v29);
      *(void *)(a2 + 32) = v33;
      char v27 = 3;
LABEL_18:
      *(unsigned char *)(a2 + 40) = v27;
      break;
    case 3:
    case 4:
    case 5:
      return result;
    default:
      uint64_t v7 = *(void *)(a2 + 32);
      char v8 = *(unsigned char *)(a2 + 40);
      uint64_t v9 = *(void *)(a2 + 56);
      if (v3 < 1)
      {
        outlined copy of _ShapeStyle_Shape.Result(*(void *)(a2 + 32), *(unsigned char *)(a2 + 40));
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v12 = v6;
      }
      else
      {
        *(void *)&v40[0] = *(void *)(a2 + 48);
        *((void *)&v40[0] + 1) = v9;
        unsigned __int8 v10 = *(float (**)(uint64_t, _OWORD *))(*(void *)result + 152);
        outlined copy of _ShapeStyle_Shape.Result(v7, v8);
        swift_retain();
        swift_retain_n();
        swift_retain_n();
        float v11 = v10(v3, v40);
        swift_release();
        swift_release();
        _s7SwiftUI8ColorBox33_3A792CB70CFCF892676D7ADF8BCA260FLLCyAA0C0V07OpacityC033_F28C5F7FF836E967BAC87540A3CB4F65LLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<Color.OpacityColor>, (void (*)(void))lazy protocol witness table accessor for type Color.OpacityColor and conformance Color.OpacityColor);
        uint64_t v12 = swift_allocObject();
        *(void *)(v12 + 16) = v6;
        *(double *)(v12 + 24) = v11;
      }
      swift_retain();
      outlined consume of _ShapeStyle_Shape.Result(v7, v8);
      swift_release();
      swift_release();
      swift_release();
      uint64_t result = outlined consume of _ShapeStyle_Shape.Result(v7, v8);
      *(void *)(a2 + 32) = v12;
      *(unsigned char *)(a2 + 40) = 0;
      break;
  }
  return result;
}

uint64_t specialized ColorProvider._apply(color:to:)(uint64_t a1, uint64_t a2)
{
  return specialized ColorProvider._apply(color:to:)(a1, a2, (double (*)(_OWORD *))Color.AccentColorProvider.resolve(in:));
}

{
  return specialized ColorProvider._apply(color:to:)(a1, a2, (double (*)(_OWORD *))Color.ForegroundColorProvider.resolve(in:));
}

uint64_t protocol witness for ColorProvider.apply(color:to:) in conformance Color.OpacityColor(uint64_t a1, uint64_t a2)
{
  return specialized ColorProvider._apply(color:to:)(a1, a2, *(void *)v2, *(double *)(v2 + 8));
}

uint64_t specialized ColorProvider._apply(color:to:)(uint64_t result, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v7 = result;
  switch(*(unsigned char *)(a2 + 24))
  {
    case 1:
      if (v5 != *(void *)(a2 + 16))
      {
        uint64_t v16 = *(void *)(a2 + 56);
        *(void *)&v44[0] = *(void *)(a2 + 48);
        uint64_t v15 = *(void *)&v44[0];
        *((void *)&v44[0] + 1) = v16;
        float v17 = *(double (**)(_OWORD *))(*(void *)a3 + 104);
        swift_retain();
        swift_retain();
        unsigned int v40 = COERCE_UNSIGNED_INT64(v17(v44));
        __int32 v41 = v18;
        unsigned int v39 = v19;
        float v21 = v20;
        swift_release();
        swift_release();
        float v22 = a4;
        float v23 = v21 * v22;
        uint64_t v24 = *(void *)(a2 + 32);
        int v25 = *(unsigned __int8 *)(a2 + 40);
        *(void *)&v44[0] = v15;
        *((void *)&v44[0] + 1) = v16;
        uint64_t v38 = *(float (**)(uint64_t, _OWORD *))(*(void *)v7 + 152);
        swift_retain();
        swift_retain();
        outlined copy of _ShapeStyle_Shape.Result(v24, v25);
        swift_retain();
        swift_retain();
        swift_retain();
        LODWORD(a4) = v38(v5, v44);
        swift_release();
        swift_release();
        outlined consume of _ShapeStyle_Shape.Result(v24, v25);
        swift_release();
        swift_release();
        swift_release();
        v26.i64[0] = v40;
        v26.i64[1] = v39;
        v27.i32[0] = v41;
        *(float *)&v27.i32[1] = v23 * *(float *)&a4;
        v44[0] = vorrq_s8((int8x16_t)vshll_n_s32(v27, 0x20uLL), v26);
        memset(&v44[1], 0, 64);
        char v45 = 0;
        int v46 = 1065353216;
        uint64_t v47 = 0;
        char v48 = -1;
        uint64_t v28 = MEMORY[0x263F8EE78];
        uint64_t v49 = MEMORY[0x263F8EE78];
        unsigned __int8 v43 = v4;
        if (v25 == 1)
        {
          uint64_t v28 = v24;
          uint64_t v29 = 0;
        }
        else
        {
          uint64_t v29 = v24;
        }
        if (v25 == 1) {
          char v30 = 5;
        }
        else {
          char v30 = v25;
        }
        uint64_t v42 = v28;
        _ShapeStyle_Pack.subscript.setter((uint64_t *)v44, &v43, v5);
        uint64_t result = outlined consume of _ShapeStyle_Shape.Result(v29, v30);
        *(void *)(a2 + 32) = v42;
        char v31 = 1;
        goto LABEL_18;
      }
      break;
    case 2:
      uint64_t v32 = *(void *)(a2 + 32);
      char v33 = *(unsigned char *)(a2 + 40);
      uint64_t v34 = *(void *)(a2 + 56);
      if (v4 < 1)
      {
        outlined copy of _ShapeStyle_Shape.Result(v32, v33);
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v37 = v7;
      }
      else
      {
        *(void *)&v44[0] = *(void *)(a2 + 48);
        *((void *)&v44[0] + 1) = v34;
        unsigned int v35 = *(float (**)(uint64_t, _OWORD *))(*(void *)result + 152);
        outlined copy of _ShapeStyle_Shape.Result(v32, v33);
        swift_retain();
        swift_retain_n();
        swift_retain_n();
        float v36 = v35(v4, v44);
        swift_release();
        swift_release();
        _s7SwiftUI8ColorBox33_3A792CB70CFCF892676D7ADF8BCA260FLLCyAA0C0V07OpacityC033_F28C5F7FF836E967BAC87540A3CB4F65LLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<Color.OpacityColor>, (void (*)(void))lazy protocol witness table accessor for type Color.OpacityColor and conformance Color.OpacityColor);
        uint64_t v37 = swift_allocObject();
        *(void *)(v37 + 16) = v7;
        *(double *)(v37 + 24) = v36;
      }
      swift_retain();
      outlined consume of _ShapeStyle_Shape.Result(v32, v33);
      swift_release();
      swift_release();
      swift_release();
      uint64_t result = outlined consume of _ShapeStyle_Shape.Result(v32, v33);
      *(void *)(a2 + 32) = v37;
      char v31 = 3;
LABEL_18:
      *(unsigned char *)(a2 + 40) = v31;
      break;
    case 3:
    case 4:
    case 5:
      return result;
    default:
      uint64_t v8 = *(void *)(a2 + 32);
      char v9 = *(unsigned char *)(a2 + 40);
      uint64_t v10 = *(void *)(a2 + 56);
      if (v4 < 1)
      {
        outlined copy of _ShapeStyle_Shape.Result(v8, v9);
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v13 = v7;
      }
      else
      {
        *(void *)&v44[0] = *(void *)(a2 + 48);
        *((void *)&v44[0] + 1) = v10;
        float v11 = *(float (**)(uint64_t, _OWORD *))(*(void *)result + 152);
        outlined copy of _ShapeStyle_Shape.Result(v8, v9);
        swift_retain();
        swift_retain_n();
        swift_retain_n();
        float v12 = v11(v4, v44);
        swift_release();
        swift_release();
        _s7SwiftUI8ColorBox33_3A792CB70CFCF892676D7ADF8BCA260FLLCyAA0C0V07OpacityC033_F28C5F7FF836E967BAC87540A3CB4F65LLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<Color.OpacityColor>, (void (*)(void))lazy protocol witness table accessor for type Color.OpacityColor and conformance Color.OpacityColor);
        uint64_t v13 = swift_allocObject();
        *(void *)(v13 + 16) = v7;
        *(double *)(v13 + 24) = v12;
      }
      swift_retain();
      outlined consume of _ShapeStyle_Shape.Result(v8, v9);
      swift_release();
      swift_release();
      swift_release();
      uint64_t result = outlined consume of _ShapeStyle_Shape.Result(v8, v9);
      *(void *)(a2 + 32) = v13;
      *(unsigned char *)(a2 + 40) = 0;
      break;
  }
  return result;
}

uint64_t specialized ColorProvider._apply(color:to:)(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v6 = result;
  switch(*(unsigned char *)(a2 + 24))
  {
    case 1:
      if (v4 != *(void *)(a2 + 16))
      {
        uint64_t v14 = *(void *)(a2 + 48);
        uint64_t v15 = *(void *)(a2 + 56);
        swift_retain();
        swift_retain();
        EnvironmentValues.systemColorDefinition.getter();
        LOBYTE(v40) = a3;
        *(void *)&v42[0] = v14;
        *((void *)&v42[0] + 1) = v15;
        unsigned int v38 = COERCE_UNSIGNED_INT64((*(double (**)(uint64_t *, _OWORD *))(v16 + 8))(&v40, v42));
        __int32 v39 = v17;
        unsigned int v37 = v18;
        float v20 = v19;
        swift_release();
        swift_release();
        uint64_t v21 = *(void *)(a2 + 32);
        int v22 = *(unsigned __int8 *)(a2 + 40);
        *(void *)&v42[0] = v14;
        *((void *)&v42[0] + 1) = v15;
        float v36 = *(float (**)(uint64_t, _OWORD *))(*(void *)v6 + 152);
        swift_retain();
        swift_retain();
        outlined copy of _ShapeStyle_Shape.Result(v21, v22);
        swift_retain();
        swift_retain();
        swift_retain();
        float v23 = v36(v4, v42);
        swift_release();
        swift_release();
        outlined consume of _ShapeStyle_Shape.Result(v21, v22);
        swift_release();
        swift_release();
        swift_release();
        v24.i64[0] = v38;
        v24.i64[1] = v37;
        v25.i32[0] = v39;
        *(float *)&v25.i32[1] = v20 * v23;
        v42[0] = vorrq_s8((int8x16_t)vshll_n_s32(v25, 0x20uLL), v24);
        memset(&v42[1], 0, 64);
        char v43 = 0;
        int v44 = 1065353216;
        uint64_t v45 = 0;
        char v46 = -1;
        uint64_t v26 = MEMORY[0x263F8EE78];
        uint64_t v47 = MEMORY[0x263F8EE78];
        unsigned __int8 v41 = v3;
        if (v22 == 1)
        {
          uint64_t v26 = v21;
          uint64_t v27 = 0;
        }
        else
        {
          uint64_t v27 = v21;
        }
        if (v22 == 1) {
          char v28 = 5;
        }
        else {
          char v28 = v22;
        }
        uint64_t v40 = v26;
        _ShapeStyle_Pack.subscript.setter((uint64_t *)v42, &v41, v4);
        uint64_t result = outlined consume of _ShapeStyle_Shape.Result(v27, v28);
        *(void *)(a2 + 32) = v40;
        char v29 = 1;
        goto LABEL_18;
      }
      break;
    case 2:
      uint64_t v30 = *(void *)(a2 + 32);
      char v31 = *(unsigned char *)(a2 + 40);
      uint64_t v32 = *(void *)(a2 + 56);
      if (v3 < 1)
      {
        outlined copy of _ShapeStyle_Shape.Result(v30, v31);
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v35 = v6;
      }
      else
      {
        *(void *)&v42[0] = *(void *)(a2 + 48);
        *((void *)&v42[0] + 1) = v32;
        char v33 = *(float (**)(uint64_t, _OWORD *))(*(void *)result + 152);
        outlined copy of _ShapeStyle_Shape.Result(v30, v31);
        swift_retain();
        swift_retain_n();
        swift_retain_n();
        float v34 = v33(v3, v42);
        swift_release();
        swift_release();
        _s7SwiftUI8ColorBox33_3A792CB70CFCF892676D7ADF8BCA260FLLCyAA0C0V07OpacityC033_F28C5F7FF836E967BAC87540A3CB4F65LLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<Color.OpacityColor>, (void (*)(void))lazy protocol witness table accessor for type Color.OpacityColor and conformance Color.OpacityColor);
        uint64_t v35 = swift_allocObject();
        *(void *)(v35 + 16) = v6;
        *(double *)(v35 + 24) = v34;
      }
      swift_retain();
      outlined consume of _ShapeStyle_Shape.Result(v30, v31);
      swift_release();
      swift_release();
      swift_release();
      uint64_t result = outlined consume of _ShapeStyle_Shape.Result(v30, v31);
      *(void *)(a2 + 32) = v35;
      char v29 = 3;
LABEL_18:
      *(unsigned char *)(a2 + 40) = v29;
      break;
    case 3:
    case 4:
    case 5:
      return result;
    default:
      uint64_t v7 = *(void *)(a2 + 32);
      char v8 = *(unsigned char *)(a2 + 40);
      uint64_t v9 = *(void *)(a2 + 56);
      if (v3 < 1)
      {
        outlined copy of _ShapeStyle_Shape.Result(v7, v8);
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v12 = v6;
      }
      else
      {
        *(void *)&v42[0] = *(void *)(a2 + 48);
        *((void *)&v42[0] + 1) = v9;
        uint64_t v10 = *(float (**)(uint64_t, _OWORD *))(*(void *)result + 152);
        outlined copy of _ShapeStyle_Shape.Result(v7, v8);
        swift_retain();
        swift_retain_n();
        swift_retain_n();
        float v11 = v10(v3, v42);
        swift_release();
        swift_release();
        _s7SwiftUI8ColorBox33_3A792CB70CFCF892676D7ADF8BCA260FLLCyAA0C0V07OpacityC033_F28C5F7FF836E967BAC87540A3CB4F65LLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<Color.OpacityColor>, (void (*)(void))lazy protocol witness table accessor for type Color.OpacityColor and conformance Color.OpacityColor);
        uint64_t v12 = swift_allocObject();
        *(void *)(v12 + 16) = v6;
        *(double *)(v12 + 24) = v11;
      }
      swift_retain();
      outlined consume of _ShapeStyle_Shape.Result(v7, v8);
      swift_release();
      swift_release();
      swift_release();
      uint64_t result = outlined consume of _ShapeStyle_Shape.Result(v7, v8);
      *(void *)(a2 + 32) = v12;
      *(unsigned char *)(a2 + 40) = 0;
      break;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  float (*v10)(uint64_t, _OWORD *);
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  __int32 v16;
  unsigned int v17;
  float v18;
  float v19;
  uint64_t v20;
  int v21;
  float v22;
  int8x16_t v23;
  int32x2_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  float (*v32)(uint64_t, _OWORD *);
  float v33;
  uint64_t v34;
  float (*v35)(uint64_t, _OWORD *);
  unsigned int v36;
  unsigned int v37;
  __int32 v38;
  uint64_t v39;
  unsigned __int8 v40;
  _OWORD v41[5];
  char v42;
  int v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  char v47;

  uint64_t v47 = a3;
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v6 = result;
  switch(*(unsigned char *)(a2 + 24))
  {
    case 1:
      if (v4 != *(void *)(a2 + 16))
      {
        uint64_t v14 = *(void *)(a2 + 56);
        *(void *)&v41[0] = *(void *)(a2 + 48);
        uint64_t v13 = *(void *)&v41[0];
        *((void *)&v41[0] + 1) = v14;
        ContentStyle.ID.resolve(in:)((uint64_t *)v41);
        unsigned int v37 = v15;
        unsigned int v38 = v16;
        float v36 = v17;
        float v19 = v18;
        float v20 = *(void *)(a2 + 32);
        uint64_t v21 = *(unsigned __int8 *)(a2 + 40);
        *(void *)&v41[0] = v13;
        *((void *)&v41[0] + 1) = v14;
        uint64_t v35 = *(float (**)(uint64_t, _OWORD *))(*(void *)v6 + 152);
        outlined copy of _ShapeStyle_Shape.Result(v20, v21);
        swift_retain();
        swift_retain_n();
        swift_retain_n();
        int v22 = v35(v4, v41);
        swift_release();
        swift_release();
        outlined consume of _ShapeStyle_Shape.Result(v20, v21);
        swift_release();
        swift_release();
        swift_release();
        v23.i64[0] = v37;
        v23.i64[1] = v36;
        v24.i32[0] = v38;
        *(float *)&v24.i32[1] = v19 * v22;
        v41[0] = vorrq_s8((int8x16_t)vshll_n_s32(v24, 0x20uLL), v23);
        memset(&v41[1], 0, 64);
        uint64_t v42 = 0;
        char v43 = 1065353216;
        int v44 = 0;
        uint64_t v45 = -1;
        int32x2_t v25 = MEMORY[0x263F8EE78];
        char v46 = MEMORY[0x263F8EE78];
        uint64_t v40 = v3;
        if (v21 == 1)
        {
          int32x2_t v25 = v20;
          uint64_t v26 = 0;
        }
        else
        {
          uint64_t v26 = v20;
        }
        if (v21 == 1) {
          uint64_t v27 = 5;
        }
        else {
          uint64_t v27 = v21;
        }
        __int32 v39 = v25;
        _ShapeStyle_Pack.subscript.setter((uint64_t *)v41, &v40, v4);
        uint64_t result = outlined consume of _ShapeStyle_Shape.Result(v26, v27);
        *(void *)(a2 + 32) = v39;
        char v28 = 1;
        goto LABEL_18;
      }
      break;
    case 2:
      char v29 = *(void *)(a2 + 32);
      uint64_t v30 = *(unsigned char *)(a2 + 40);
      char v31 = *(void *)(a2 + 56);
      if (v3 <= 0)
      {
        outlined copy of _ShapeStyle_Shape.Result(v29, v30);
        swift_retain();
        swift_retain();
        swift_retain();
        float v34 = v6;
      }
      else
      {
        *(void *)&v41[0] = *(void *)(a2 + 48);
        *((void *)&v41[0] + 1) = v31;
        uint64_t v32 = *(float (**)(uint64_t, _OWORD *))(*(void *)result + 152);
        outlined copy of _ShapeStyle_Shape.Result(v29, v30);
        swift_retain();
        swift_retain_n();
        swift_retain_n();
        char v33 = v32(v3, v41);
        swift_release();
        swift_release();
        _s7SwiftUI8ColorBox33_3A792CB70CFCF892676D7ADF8BCA260FLLCyAA0C0V07OpacityC033_F28C5F7FF836E967BAC87540A3CB4F65LLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<Color.OpacityColor>, (void (*)(void))lazy protocol witness table accessor for type Color.OpacityColor and conformance Color.OpacityColor);
        float v34 = swift_allocObject();
        *(void *)(v34 + 16) = v6;
        *(double *)(v34 + 24) = v33;
      }
      swift_retain();
      outlined consume of _ShapeStyle_Shape.Result(v29, v30);
      swift_release();
      swift_release();
      swift_release();
      uint64_t result = outlined consume of _ShapeStyle_Shape.Result(v29, v30);
      *(void *)(a2 + 32) = v34;
      char v28 = 3;
LABEL_18:
      *(unsigned char *)(a2 + 40) = v28;
      break;
    case 3:
    case 4:
    case 5:
      return result;
    default:
      uint64_t v7 = *(void *)(a2 + 32);
      char v8 = *(unsigned char *)(a2 + 40);
      uint64_t v9 = *(void *)(a2 + 56);
      if (v3 <= 0)
      {
        outlined copy of _ShapeStyle_Shape.Result(v7, v8);
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v12 = v6;
      }
      else
      {
        *(void *)&v41[0] = *(void *)(a2 + 48);
        *((void *)&v41[0] + 1) = v9;
        uint64_t v10 = *(float (**)(uint64_t, _OWORD *))(*(void *)result + 152);
        outlined copy of _ShapeStyle_Shape.Result(v7, v8);
        swift_retain();
        swift_retain_n();
        swift_retain_n();
        float v11 = v10(v3, v41);
        swift_release();
        swift_release();
        _s7SwiftUI8ColorBox33_3A792CB70CFCF892676D7ADF8BCA260FLLCyAA0C0V07OpacityC033_F28C5F7FF836E967BAC87540A3CB4F65LLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<Color.OpacityColor>, (void (*)(void))lazy protocol witness table accessor for type Color.OpacityColor and conformance Color.OpacityColor);
        uint64_t v12 = swift_allocObject();
        *(void *)(v12 + 16) = v6;
        *(double *)(v12 + 24) = v11;
      }
      swift_retain();
      outlined consume of _ShapeStyle_Shape.Result(v7, v8);
      swift_release();
      swift_release();
      swift_release();
      uint64_t result = outlined consume of _ShapeStyle_Shape.Result(v7, v8);
      *(void *)(a2 + 32) = v12;
      *(unsigned char *)(a2 + 40) = 0;
      break;
  }
  return result;
}

uint64_t ShapeStylePair._apply(to:)(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)result;
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v4 = *(void *)(result + 16);
  uint64_t v6 = result;
  switch(*(unsigned char *)(result + 24))
  {
    case 1:
      if (v3 == v4) {
        return result;
      }
      if (v4 <= 1) {
        goto LABEL_37;
      }
      *(void *)uint64_t result = *(void *)result;
      *(_OWORD *)(result + 8) = xmmword_24619B550;
      *(unsigned char *)(result + 24) = 1;
      (*(void (**)(uint64_t, void))(a2[5] + 32))(result, a2[3]);
      if (v3 <= 1) {
        uint64_t v8 = 1;
      }
      else {
        uint64_t v8 = v3;
      }
      int v9 = *(unsigned __int8 *)(v6 + 40);
      BOOL v10 = v9 == 1;
      if (v9 == 1) {
        uint64_t v11 = 0;
      }
      else {
        uint64_t v11 = *(void *)(v6 + 32);
      }
      uint64_t v32 = v11;
      if (v9 == 1) {
        LOBYTE(v9) = 5;
      }
      char v31 = v9;
      if (v10) {
        uint64_t v12 = *(void **)(v6 + 32);
      }
      else {
        uint64_t v12 = (void *)MEMORY[0x263F8EE78];
      }
      uint64_t v13 = v12[2];
      if (!v13) {
        goto LABEL_36;
      }
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_20;
      }
      break;
    case 2:
      *(void *)uint64_t result = 0;
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = 0;
      char v7 = 2;
      goto LABEL_32;
    case 3:
      return result;
    case 4:
      *(void *)uint64_t result = 0;
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = 0;
      char v7 = 4;
LABEL_32:
      *(unsigned char *)(result + 24) = v7;
      if (v2 > 0) {
        return (*(uint64_t (**)(uint64_t, void))(a2[5] + 32))(result, a2[3]);
      }
      goto LABEL_43;
    case 5:
      if (!(v4 | v3 | v2))
      {
        uint64_t result = outlined consume of _ShapeStyle_Shape.Result(*(void *)(result + 32), *(unsigned char *)(result + 40));
        *(void *)(v6 + 32) = 1;
        *(unsigned char *)(v6 + 40) = 4;
      }
      return result;
    default:
      if (v2)
      {
        *(void *)uint64_t result = 0;
        *(void *)(result + 8) = 0;
        *(unsigned char *)(result + 24) = 0;
        *(void *)(result + 16) = 0;
        return (*(uint64_t (**)(uint64_t, void))(a2[5] + 32))(result, a2[3]);
      }
      else
      {
LABEL_43:
        char v29 = *(uint64_t (**)(uint64_t, uint64_t))(a2[4] + 32);
        uint64_t v30 = a2[2];
        return v29(v6, v30);
      }
  }
LABEL_48:
  uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew()(v12);
LABEL_20:
  unint64_t v14 = 0;
  unsigned int v15 = v2;
  uint64_t v16 = v12 + 4;
  uint64_t v34 = v8;
  char v33 = v12 + 4;
  do
  {
    unint64_t v17 = v12[2];
    if (v14 >= v17)
    {
      __break(1u);
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
    unsigned int v18 = (unsigned __int8 *)&v16[15 * v14];
    unsigned int v19 = *v18;
    if (v19 < v15) {
      goto LABEL_22;
    }
    if (v19 > v15) {
      break;
    }
    uint64_t v20 = v18[1];
    BOOL v21 = __OFADD__(v20, v8);
    uint64_t v22 = v20 + v8;
    if (v21) {
      goto LABEL_47;
    }
    if ((v22 & 0x8000000000000000) == 0)
    {
      v18[1] = v22;
LABEL_22:
      ++v14;
      continue;
    }
    float v23 = v12;
    unint64_t v24 = v17 - 1;
    uint64_t v25 = v17 - 1 - v14;
    if (v25 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    uint64_t v26 = &v16[15 * v14];
    uint64_t v46 = v26[12];
    char v40 = *((unsigned char *)v26 + 88);
    uint64_t v38 = v26[9];
    uint64_t v39 = v26[10];
    uint64_t v44 = v26[7];
    uint64_t v45 = v26[8];
    uint64_t v42 = v26[5];
    uint64_t v43 = v26[6];
    uint64_t v36 = v26[3];
    uint64_t v37 = v26[4];
    uint64_t v35 = v26[2];
    uint64_t v27 = v26[1];
    unsigned __int8 v41 = *((unsigned char *)v26 + 104);
    memmove(v18, v18 + 120, 120 * v25);
    _OWORD v23[2] = v24;
    uint64_t v12 = v23;
    outlined consume of _ShapeStyle_Pack.Fill(v27, v35, v36, v37, v42, v43, v44, v45, v38, v39, v40);
    outlined consume of GraphicsBlendMode?(v46, v41);
    swift_bridgeObjectRelease();
    uint64_t v16 = v33;
    --v13;
    uint64_t v8 = v34;
    unsigned int v15 = v2;
  }
  while ((uint64_t)v14 < v13);
LABEL_36:
  uint64_t result = outlined consume of _ShapeStyle_Shape.Result(v32, v31);
  *(void *)(v6 + 32) = v12;
  *(unsigned char *)(v6 + 40) = 1;
LABEL_37:
  if (v3 < 1 && v4 >= 1)
  {
    *(void *)uint64_t v6 = v2;
    *(_OWORD *)(v6 + 8) = xmmword_24619B550;
    *(unsigned char *)(v6 + 24) = 1;
    goto LABEL_43;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<ForegroundStyleKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<ForegroundStyleKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<ForegroundStyleKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<ForegroundStyleKey>, (uint64_t)&type metadata for ForegroundStyleKey, (uint64_t)&protocol witness table for ForegroundStyleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ForegroundStyleKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultForegroundStyleKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultForegroundStyleKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultForegroundStyleKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultForegroundStyleKey>, (uint64_t)&type metadata for DefaultForegroundStyleKey, (uint64_t)&protocol witness table for DefaultForegroundStyleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultForegroundStyleKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<SystemColorDefinitionKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<SystemColorDefinitionKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<SystemColorDefinitionKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<SystemColorDefinitionKey>, (uint64_t)&type metadata for SystemColorDefinitionKey, (uint64_t)&protocol witness table for SystemColorDefinitionKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<SystemColorDefinitionKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for ColorBox<Color.OpacityColor>()
{
  if (!lazy cache variable for type metadata for ColorBox<Color.OpacityColor>)
  {
    lazy protocol witness table accessor for type Color.OpacityColor and conformance Color.OpacityColor();
    unint64_t v0 = type metadata accessor for ColorBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<Color.OpacityColor>);
    }
  }
}

uint64_t protocol witness for ShapeStyle._apply(to:) in conformance Color.Resolved(uint64_t a1)
{
  return Color.Resolved._apply(to:)(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t Color.Resolved._apply(to:)(uint64_t result, float a2, float a3, float a4, float a5)
{
  uint64_t v5 = *(void *)result;
  uint64_t v6 = *(void *)(result + 8);
  uint64_t v8 = result;
  switch(*(unsigned char *)(result + 24))
  {
    case 1:
      if (v6 != *(void *)(result + 16))
      {
        uint64_t v24 = *(void *)(result + 32);
        uint64_t v25 = *(void *)(result + 48);
        uint64_t v26 = *(void *)(result + 56);
        int v27 = *(unsigned __int8 *)(result + 40);
        outlined copy of _ShapeStyle_Shape.Result(v24, v27);
        swift_retain();
        swift_retain();
        swift_retain();
        EnvironmentValues.systemColorDefinition.getter();
        *(void *)&v46[0] = v25;
        *((void *)&v46[0] + 1) = v26;
        float v29 = (*(float (**)(uint64_t, _OWORD *))(v28 + 16))(v6, v46);
        outlined consume of _ShapeStyle_Shape.Result(v24, v27);
        swift_release();
        swift_release();
        swift_release();
        v30.i64[0] = LODWORD(a2);
        v30.i64[1] = LODWORD(a4);
        *(float *)v31.i32 = a3;
        *(float *)&v31.i32[1] = v29 * a5;
        v46[0] = vorrq_s8((int8x16_t)vshll_n_s32(v31, 0x20uLL), v30);
        memset(&v46[1], 0, 64);
        char v47 = 0;
        int v48 = 1065353216;
        uint64_t v49 = 0;
        char v50 = -1;
        uint64_t v32 = MEMORY[0x263F8EE78];
        uint64_t v51 = MEMORY[0x263F8EE78];
        unsigned __int8 v45 = v5;
        if (v27 == 1)
        {
          uint64_t v32 = v24;
          uint64_t v33 = 0;
        }
        else
        {
          uint64_t v33 = v24;
        }
        if (v27 == 1) {
          char v34 = 5;
        }
        else {
          char v34 = v27;
        }
        uint64_t v44 = v32;
        _ShapeStyle_Pack.subscript.setter((uint64_t *)v46, &v45, v6);
        unint64_t result = outlined consume of _ShapeStyle_Shape.Result(v33, v34);
        *(void *)(v8 + 32) = v44;
        char v23 = 1;
        goto LABEL_16;
      }
      break;
    case 2:
      uint64_t v16 = *(void *)(result + 32);
      char v17 = *(unsigned char *)(result + 40);
      if (v5 >= 1)
      {
        uint64_t v18 = *(void *)(result + 56);
        uint64_t v19 = *(void *)(result + 48);
        outlined copy of _ShapeStyle_Shape.Result(v16, v17);
        swift_retain();
        swift_retain();
        swift_retain();
        EnvironmentValues.systemColorDefinition.getter();
        *(void *)&v46[0] = v19;
        *((void *)&v46[0] + 1) = v18;
        float v21 = (*(float (**)(uint64_t, _OWORD *))(v20 + 16))(v5, v46);
        outlined consume of _ShapeStyle_Shape.Result(v16, v17);
        swift_release();
        swift_release();
        swift_release();
        a5 = v21 * a5;
      }
      type metadata accessor for ColorBox<ResolvedColorProvider>();
      uint64_t v22 = (float *)swift_allocObject();
      v22[4] = a2;
      v22[5] = a3;
      v22[6] = a4;
      v22[7] = a5;
      unint64_t result = outlined consume of _ShapeStyle_Shape.Result(v16, v17);
      *(void *)(v8 + 32) = v22;
      char v23 = 3;
LABEL_16:
      *(unsigned char *)(v8 + 40) = v23;
      break;
    case 3:
    case 4:
    case 5:
      return result;
    default:
      uint64_t v9 = *(void *)(result + 32);
      char v10 = *(unsigned char *)(result + 40);
      if (v5 >= 1)
      {
        uint64_t v11 = *(void *)(result + 56);
        uint64_t v12 = *(void *)(result + 48);
        outlined copy of _ShapeStyle_Shape.Result(v9, v10);
        swift_retain();
        swift_retain();
        swift_retain();
        EnvironmentValues.systemColorDefinition.getter();
        *(void *)&v46[0] = v12;
        *((void *)&v46[0] + 1) = v11;
        float v14 = (*(float (**)(uint64_t, _OWORD *))(v13 + 16))(v5, v46);
        outlined consume of _ShapeStyle_Shape.Result(v9, v10);
        swift_release();
        swift_release();
        swift_release();
        a5 = v14 * a5;
      }
      type metadata accessor for ColorBox<ResolvedColorProvider>();
      unsigned int v15 = (float *)swift_allocObject();
      void v15[4] = a2;
      v15[5] = a3;
      v15[6] = a4;
      void v15[7] = a5;
      unint64_t result = outlined consume of _ShapeStyle_Shape.Result(v9, v10);
      *(void *)(v8 + 32) = v15;
      *(unsigned char *)(v8 + 40) = 0;
      break;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for IgnoresAutomaticPaddingLayout(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

ValueMetadata *type metadata accessor for _AspectRatioLayout()
{
  return &type metadata for _AspectRatioLayout;
}

void *static Spacing.Category.textToText.getter@<X0>(void *result@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  if (*result != -1) {
    unint64_t result = (void *)swift_once();
  }
  *a3 = *a2;
  return result;
}

uint64_t type metadata completion function for PreferenceValues.Value()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.Sizing()
{
  return &type metadata for Text.Sizing;
}

ValueMetadata *type metadata accessor for Edge.Set()
{
  return &type metadata for Edge.Set;
}

void type metadata accessor for (key: ObjectIdentifier, value: AnyAccessibilityPropertiesEntry)()
{
  if (!lazy cache variable for type metadata for (key: ObjectIdentifier, value: AnyAccessibilityPropertiesEntry))
  {
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (key: ObjectIdentifier, value: AnyAccessibilityPropertiesEntry));
    }
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AccessibilityLabelStorage(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 8);
  int v3 = *(unsigned __int8 *)(a2 + 8);
  return specialized static Array<A>.== infix(_:_:)(*(void *)a1, *(void *)a2) & (v2 == v3);
}

uint64_t outlined destroy of AnyAccessibilityPropertiesEntry?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v5 = a4(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t static MutableBox<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(v2 + 80);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](a1);
  BOOL v7 = &v18[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v8);
  char v10 = &v18[-v9];
  uint64_t v12 = v11 + *(void *)(*(void *)v11 + 88);
  swift_beginAccess();
  uint64_t v13 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16);
  v13(v10, v12, v4);
  uint64_t v14 = a2 + *(void *)(*(void *)a2 + 88);
  swift_beginAccess();
  v13(v7, v14, v4);
  char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v16 = *(void (**)(unsigned char *, uint64_t))(v5 + 8);
  v16(v7, v4);
  v16(v10, v4);
  return v15 & 1;
}

void *initializeBufferWithCopyOfBuffer for AccessibilityAttachment(void *a1, void *a2)
{
  int v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  id v4 = v3;
  return a1;
}

uint64_t specialized static AccessibilityAttachment.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (!v3 || ((uint64_t v4 = a2[1]) != 0 ? (v5 = v3 == v4) : (v5 = 0), v5))
  {
    uint64_t v8 = *a2;
    uint64_t v9 = v2;
    char v6 = specialized static AccessibilityProperties.== infix(_:_:)(&v9, &v8);
  }
  else
  {
    char v6 = 0;
  }
  return v6 & 1;
}

uint64_t specialized static AccessibilityProperties.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  if (*(void *)(*a1 + 16) != *(void *)(*a2 + 16)) {
    return 0;
  }
  uint64_t v21 = v2 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(v2 + 64);
  int64_t v22 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  if (!v6) {
    goto LABEL_7;
  }
LABEL_5:
  unint64_t v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  unint64_t v10 = v9 | (v8 << 6);
  while (2)
  {
    uint64_t v11 = *(void *)(v2 + 56);
    *(void *)&long long v25 = *(void *)(*(void *)(v2 + 48) + 8 * v10);
    outlined init with copy of AnyTrackedValue(v11 + 40 * v10, (uint64_t)&v25 + 8);
    while (1)
    {
      outlined init with take of (key: ObjectIdentifier, value: AnyAccessibilityPropertiesEntry)?((uint64_t)&v25, (uint64_t)&v28, (uint64_t)&lazy cache variable for type metadata for (key: ObjectIdentifier, value: AnyAccessibilityPropertiesEntry)?, (uint64_t)type metadata accessor for (key: ObjectIdentifier, value: AnyAccessibilityPropertiesEntry), (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AnyAccessibilityPropertiesEntry?);
      if (!v30)
      {
        swift_release();
        return 1;
      }
      uint64_t v15 = v28;
      outlined init with take of ScrollStateRequest(&v29, (uint64_t)&v25);
      if (!*(void *)(v3 + 16)) {
        goto LABEL_32;
      }
      unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v15);
      if ((v17 & 1) == 0
        || (outlined init with copy of AnyTrackedValue(*(void *)(v3 + 56) + 40 * v16, (uint64_t)v23),
            outlined init with take of ScrollStateRequest(v23, (uint64_t)v24),
            uint64_t v18 = *((void *)&v26 + 1),
            uint64_t v19 = v27,
            __swift_project_boxed_opaque_existential_1(&v25, *((uint64_t *)&v26 + 1)),
            char v20 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v19 + 16))(v24, v18, v19),
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v24),
            (v20 & 1) == 0))
      {
LABEL_32:
        swift_release();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v25);
        return 0;
      }
      uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v25);
      if (v6) {
        goto LABEL_5;
      }
LABEL_7:
      int64_t v12 = v8 + 1;
      if (__OFADD__(v8, 1))
      {
        __break(1u);
        goto LABEL_35;
      }
      if (v12 < v22)
      {
        unint64_t v13 = *(void *)(v21 + 8 * v12);
        if (v13) {
          goto LABEL_10;
        }
        int64_t v14 = v8 + 2;
        ++v8;
        if (v12 + 1 < v22)
        {
          unint64_t v13 = *(void *)(v21 + 8 * v14);
          if (v13) {
            goto LABEL_13;
          }
          int64_t v8 = v12 + 1;
          if (v12 + 2 < v22)
          {
            unint64_t v13 = *(void *)(v21 + 8 * (v12 + 2));
            if (v13)
            {
              v12 += 2;
              goto LABEL_10;
            }
            int64_t v14 = v12 + 3;
            int64_t v8 = v12 + 2;
            if (v12 + 3 < v22) {
              break;
            }
          }
        }
      }
LABEL_24:
      unint64_t v6 = 0;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v25 = 0u;
    }
    unint64_t v13 = *(void *)(v21 + 8 * v14);
    if (v13)
    {
LABEL_13:
      int64_t v12 = v14;
LABEL_10:
      unint64_t v6 = (v13 - 1) & v13;
      unint64_t v10 = __clz(__rbit64(v13)) + (v12 << 6);
      int64_t v8 = v12;
      continue;
    }
    break;
  }
  while (1)
  {
    int64_t v12 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v12 >= v22)
    {
      int64_t v8 = v22 - 1;
      goto LABEL_24;
    }
    unint64_t v13 = *(void *)(v21 + 8 * v12);
    ++v14;
    if (v13) {
      goto LABEL_10;
    }
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t outlined init with take of (key: ObjectIdentifier, value: AnyAccessibilityPropertiesEntry)?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  uint64_t v7 = a5(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(a2, a1, v7);
  return a2;
}

void type metadata accessor for AnyAccessibilityPropertiesEntry?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t AccessibilityPropertiesEntry.isEqual(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  int64_t v8 = &v23[-v7 - 8];
  uint64_t v9 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](v10);
  int64_t v12 = &v23[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  outlined init with copy of AnyTrackedValue(a1, (uint64_t)v23);
  type metadata accessor for AnyAccessibilityPropertiesEntry();
  int v13 = swift_dynamicCast();
  int64_t v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
  if (v13)
  {
    v14(v8, 0, 1, a2);
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v12, v8, a2);
    char v20 = static AccessibilityPropertiesEntry.== infix(_:_:)(v2, (uint64_t)v12, *(void *)(a2 + 16), v15, v16, v17, v18, v19);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, a2);
  }
  else
  {
    v14(v8, 1, 1, a2);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    char v20 = 0;
  }
  return v20 & 1;
}

uint64_t AccessibilityProperties.init<A>(_:_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v9 = (char *)v12 - v8;
  type metadata accessor for AnyAccessibilityPropertiesEntry();
  uint64_t v13 = Dictionary.init(minimumCapacity:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, AssociatedTypeWitness);
  v12[3] = type metadata accessor for AccessibilityPropertiesEntry();
  void v12[4] = (uint64_t)&protocol witness table for AccessibilityPropertiesEntry<A>;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v12);
  (*(void (**)(uint64_t *, char *, uint64_t))(v7 + 32))(boxed_opaque_existential_1, v9, AssociatedTypeWitness);
  specialized Dictionary.subscript.setter((uint64_t)v12, a2);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a1, AssociatedTypeWitness);
  *a3 = v13;
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t result;
  void (*v22)(char *, char *, uint64_t);
  uint64_t *boxed_opaque_existential_1;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26[5];
  uint64_t v27;

  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v24 - v9;
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v12);
  int64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v24 - v17;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, v7, v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, AssociatedTypeWitness) == 1)
  {
    uint64_t v19 = *(void (**)(char *, uint64_t))(v8 + 8);
    v19(v10, v7);
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    char v20 = Dictionary.init(minimumCapacity:)();
    uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v19)(a1, v7);
  }
  else
  {
    uint64_t v24 = a2;
    long long v25 = a3;
    int64_t v22 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    v22(v18, v10, AssociatedTypeWitness);
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    long long v27 = Dictionary.init(minimumCapacity:)();
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v18, AssociatedTypeWitness);
    v26[3] = type metadata accessor for AccessibilityPropertiesEntry();
    void v26[4] = (uint64_t)&protocol witness table for AccessibilityPropertiesEntry<A>;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v26);
    v22((char *)boxed_opaque_existential_1, v14, AssociatedTypeWitness);
    a3 = v25;
    specialized Dictionary.subscript.setter((uint64_t)v26, v24);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v18, AssociatedTypeWitness);
    char v20 = v27;
  }
  *a3 = v20;
  return result;
}

uint64_t AccessibilityProperties.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  double v9 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v11 = (char *)&v16[-1] - v10;
  if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double))(a4 + 24))(a1, a3, a4, v9))
  {
    double v12 = specialized Dictionary.removeValue(forKey:)(a3, (uint64_t)v16);
    (*(void (**)(uint64_t, uint64_t, double))(v8 + 8))(a1, AssociatedTypeWitness, v12);
    return outlined destroy of AnyAccessibilityPropertiesEntry?((uint64_t)v16, (uint64_t)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (uint64_t)type metadata accessor for AnyAccessibilityPropertiesEntry, (uint64_t (*)(void))type metadata accessor for AnyAccessibilityPropertiesEntry?);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a1, AssociatedTypeWitness);
    void v16[3] = type metadata accessor for AccessibilityPropertiesEntry();
    v16[4] = (uint64_t)&protocol witness table for AccessibilityPropertiesEntry<A>;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v16);
    (*(void (**)(uint64_t *, char *, uint64_t))(v8 + 32))(boxed_opaque_existential_1, v11, AssociatedTypeWitness);
    specialized Dictionary.subscript.setter((uint64_t)v16, a3);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(a1, AssociatedTypeWitness);
  }
}

uint64_t type metadata accessor for AccessibilityPropertiesEntry()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static AccessibilityAttachment.properties(_:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  type metadata accessor for AnyAccessibilityPropertiesEntry();
  swift_bridgeObjectRetain();
  Dictionary.init(minimumCapacity:)();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  a2[1] = 0;
  return result;
}

uint64_t AccessibilityAttachment.init(properties:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  type metadata accessor for AnyAccessibilityPropertiesEntry();
  Dictionary.init(minimumCapacity:)();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  a2[1] = 0;
  return result;
}

unint64_t type metadata accessor for AnyAccessibilityPropertiesEntry()
{
  unint64_t result = lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry;
  if (!lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  }
  return result;
}

BOOL protocol witness for static AccessibilityPropertiesKey.isDefault(_:) in conformance AccessibilityProperties.TraitsKey(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  return v1 == (void)static AccessibilityProperties.TraitsKey.defaultValue
      && v2 == *((void *)&static AccessibilityProperties.TraitsKey.defaultValue + 1);
}

uint64_t destroy for AccessibilityValueStorage(uint64_t a1)
{
  if (*(void *)(a1 + 24)) {
    __swift_destroy_boxed_opaque_existential_1(a1);
  }

  return swift_bridgeObjectRelease();
}

void storeEnumTagSinglePayload for AccessibilityPropertiesEntry(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 >= a2)
  {
    switch(v11)
    {
      case 1:
        a1[v8] = 0;
        if (a2) {
          goto LABEL_21;
        }
        break;
      case 2:
        *(_WORD *)&a1[v8] = 0;
        if (a2) {
          goto LABEL_21;
        }
        break;
      case 3:
LABEL_34:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v8] = 0;
        goto LABEL_20;
      default:
LABEL_20:
        if (a2)
        {
LABEL_21:
          uint64_t v16 = *(void (**)(void))(v6 + 56);
          v16();
        }
        break;
    }
  }
  else
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        break;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        break;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        break;
      default:
        return;
    }
  }
}

uint64_t static AccessibilityPropertiesEntry.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _OWORD v9[2] = a3;
  _OWORD v9[3] = a2;
  int v10 = 3;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)partial apply for closure #1 in compareValues<A>(_:_:options:), (uint64_t)v9, a3, MEMORY[0x263F8E628], MEMORY[0x263F8D4F8], MEMORY[0x263F8E658], a8);
  return v11;
}

BOOL protocol witness for static AccessibilityPropertiesKey.isDefault(_:) in conformance AccessibilityProperties.IdentifierKey(uint64_t a1)
{
  return *(void *)(a1 + 8) == 0;
}

BOOL protocol witness for static AccessibilityPropertiesKey.isDefault(_:) in conformance AccessibilityProperties.VisibilityKey(int *a1)
{
  int v1 = *a1;
  int v2 = a1[1];
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  return v1 == static AccessibilityProperties.VisibilityKey.defaultValue
      && v2 == HIDWORD(static AccessibilityProperties.VisibilityKey.defaultValue);
}

BOOL protocol witness for static AccessibilityPropertiesKey.isDefault(_:) in conformance AccessibilityProperties.InputLabelsKey(void *a1)
{
  return *a1 == 0;
}

uint64_t protocol witness for static AccessibilityPropertiesKey.isDefault(_:) in conformance AccessibilityProperties.HintsKey(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static AccessibilityPropertiesKey.isDefault(_:) in conformance AccessibilityProperties.CustomContentListKey(a1, a2, a3, &one-time initialization token for defaultValue, &static AccessibilityProperties.HintsKey.defaultValue, specialized static Array<A>.== infix(_:_:));
}

uint64_t protocol witness for static AccessibilityPropertiesKey.isDefault(_:) in conformance AccessibilityProperties.CustomContentListKey(uint64_t *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t *a5, uint64_t (*a6)(uint64_t, uint64_t))
{
  uint64_t v8 = *a1;
  if (*a4 != -1) {
    swift_once();
  }
  uint64_t v9 = *a5;
  swift_bridgeObjectRetain();
  char v10 = a6(v8, v9);
  swift_bridgeObjectRelease();
  return v10 & 1;
}

double specialized Dictionary.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if (v6)
  {
    unint64_t v7 = v5;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v2;
    uint64_t v11 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v9 = v11;
    }
    outlined init with take of ScrollStateRequest((long long *)(*(void *)(v9 + 56) + 40 * v7), a2);
    specialized _NativeDictionary._delete(at:)(v7, v9);
    *uint64_t v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    *(void *)(a2 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t getEnumTag for EitherGradient(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t LanguageAwareLineHeightRatioTextModifier.isEqual(to:)()
{
  uint64_t result = swift_dynamicCastClass();
  if (result)
  {
    double v2 = *(double *)(result + 16);
    double v3 = *(double *)(v0 + 16);
    char v4 = *(unsigned char *)(v0 + 24);
    if (*(unsigned char *)(result + 24) == 1)
    {
      if (v2 == 0.0)
      {
        if (v3 != 0.0) {
          char v4 = 0;
        }
        if (v4) {
          return 1;
        }
      }
      else if (*(void *)&v2 == 1)
      {
        if (*(void *)&v3 != 1) {
          char v4 = 0;
        }
        if (v4) {
          return 1;
        }
      }
      else
      {
        if (*(void *)&v3 <= 1uLL) {
          char v4 = 0;
        }
        if (v4) {
          return 1;
        }
      }
    }
    else
    {
      if (v2 != v3) {
        char v4 = 1;
      }
      if ((v4 & 1) == 0) {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

uint64_t AccessibilityImageLabel.SystemSymbolTextStorage.isEqual(to:)()
{
  type metadata accessor for AccessibilityImageLabel.SystemSymbolTextStorage();
  uint64_t v1 = swift_dynamicCastClass();
  if (v1
    && (uint64_t v3 = *(void *)(v1 + 16),
        uint64_t v2 = *(void *)(v1 + 24),
        uint64_t v5 = *(void *)(v0 + 16),
        uint64_t v4 = *(void *)(v0 + 24),
        swift_bridgeObjectRetain(),
        v2))
  {
    if (v3 == v5 && v2 == v4) {
      char v7 = 1;
    }
    else {
      char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    char v7 = 0;
  }
  return v7 & 1;
}

uint64_t AccessibilityImageLabel.text.getter()
{
  uint64_t v2 = *(void *)v0;
  uint64_t v1 = *(void *)(v0 + 8);
  if ((*(void *)(v0 + 16) & 0x8000000000000000) != 0)
  {
    type metadata accessor for AccessibilityImageLabel.SystemSymbolTextStorage();
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v2;
    *(void *)(v3 + 24) = v1;
    uint64_t v2 = v3;
  }
  else
  {
    outlined copy of Text.Storage(*(void *)v0, *(void *)(v0 + 8), *(unsigned char *)(v0 + 16) & 1);
  }
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t type metadata accessor for AccessibilityImageLabel.SystemSymbolTextStorage()
{
  return self;
}

uint64_t Box.__deallocating_deinit()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 80) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 88));

  return swift_deallocClassInstance();
}

uint64_t destroy for CachedEnvironment()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void destroy for AccessibilityAttachment(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void **)(a1 + 8);
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _PreferenceWritingModifier<A>@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t a4@<X4>, double *a5@<X8>)
{
  return static _PreferenceWritingModifier._makeView(modifier:inputs:body:)(a1, a2, a3, *(ValueMetadata **)(a4 + 16), *(void *)(a4 + 24), a5);
}

uint64_t Environment.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  return Environment.init<A>(_:)(a1, a2);
}

{
  uint64_t KeyPath;
  uint64_t v4;

  EnvironmentObjectKey.init()(a2);
  uint64_t KeyPath = swift_getKeyPath();
  Environment.init(_:)(KeyPath, &v4);
  return v4;
}

{
  return Environment.init<A>(_:)(a1, a2);
}

uint64_t OptionalEdgeInsets.leading.getter()
{
  return *(void *)(v0 + 16);
}

void static OptionalEdgeInsets.none.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 1;
  *(void *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 56) = 1;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ChildEnvironment<A>()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

{
  uint64_t vars8;

  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

uint64_t key path getter for EnvironmentValues.defaultFont : EnvironmentValues@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for EnvironmentValues.symbolFont : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

ValueMetadata *type metadata accessor for _ShadowEffect()
{
  return &type metadata for _ShadowEffect;
}

ValueMetadata *type metadata accessor for UnitPoint()
{
  return &type metadata for UnitPoint;
}

uint64_t AtomicBuffer.__deallocating_deinit()
{
  AtomicBuffer.deinit();

  return swift_deallocClassInstance();
}

void AtomicBuffer.deinit()
{
  UnsafeMutablePointer.deinitialize(count:)();

  JUMPOUT(0x24C523DD0);
}

ValueMetadata *type metadata accessor for DisplayList()
{
  return &type metadata for DisplayList;
}

void static ContentShapeKinds.interaction.getter(void *a1@<X8>)
{
  *a1 = 1;
}

double static UnitPoint.trailing.getter()
{
  return 1.0;
}

uint64_t AccessibilityNullableOptionSet.merge(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](a1);
  long long v26 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  long long v25 = (char *)&v24 - v8;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v24 - v10;
  double v13 = MEMORY[0x270FA5388](v12);
  int v15 = (char *)&v24 - v14;
  uint64_t v27 = v5;
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16);
  v16(v11, a1, v4, v13);
  dispatch thunk of SetAlgebra.subtracting(_:)();
  uint64_t v17 = a1 + *(int *)(a2 + 92);
  ((void (*)(char *, uint64_t, uint64_t))v16)(v11, v17, v4);
  uint64_t v18 = v25;
  dispatch thunk of SetAlgebra.subtracting(_:)();
  ((void (*)(char *, uint64_t, uint64_t))v16)(v11, v17, v4);
  dispatch thunk of SetAlgebra.formUnion(_:)();
  dispatch thunk of SetAlgebra.subtract(_:)();
  ((void (*)(char *, char *, uint64_t))v16)(v11, v15, v4);
  uint64_t v19 = v26;
  dispatch thunk of SetAlgebra.formUnion(_:)();
  char v20 = dispatch thunk of SetAlgebra.isEmpty.getter();
  ((void (*)(char *, char *, uint64_t))v16)(v19, v18, v4);
  if (v20) {
    char v21 = 1;
  }
  else {
    char v21 = dispatch thunk of SetAlgebra.isEmpty.getter();
  }
  int64_t v22 = *(void (**)(char *, uint64_t))(v27 + 8);
  v22(v19, v4);
  v22(v18, v4);
  v22(v15, v4);
  return v21 & 1;
}

void *protocol witness for SetAlgebra.formUnion(_:) in conformance BitVector64(void *result)
{
  *v1 |= *result;
  return result;
}

void *protocol witness for SetAlgebra.subtracting(_:) in conformance BitVector64@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL protocol witness for SetAlgebra.isEmpty.getter in conformance NSCalendarUnit()
{
  return *v0 == 0;
}

void *protocol witness for SetAlgebra.subtract(_:) in conformance BitVector64(void *result)
{
  *v1 &= ~*result;
  return result;
}

_DWORD *protocol witness for SetAlgebra.formUnion(_:) in conformance AccessibilityVisibility(_DWORD *result)
{
  *v1 |= *result;
  return result;
}

_DWORD *protocol witness for SetAlgebra.subtracting(_:) in conformance AccessibilityVisibility@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL protocol witness for SetAlgebra.isEmpty.getter in conformance RBBlurFlags()
{
  return *v0 == 0;
}

_DWORD *protocol witness for SetAlgebra.subtract(_:) in conformance AccessibilityVisibility(_DWORD *result)
{
  *v1 &= ~*result;
  return result;
}

uint64_t View.onAppear(perform:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = a1;
  v4[1] = a2;
  v4[2] = 0;
  _OWORD v4[3] = 0;
  return View.modifier<A>(_:)(v4, a3, &type metadata for _AppearanceActionModifier);
}

uint64_t ObservedObject.projectedValue.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t type metadata accessor for CountingIndexCollection()
{
  return __swift_instantiateGenericMetadata();
}

BOOL static LayoutComputer.== infix(_:_:)(void *a1, void *a2)
{
  return a1[1] == a2[1] && *a1 == *a2;
}

uint64_t View.styleContext<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for StyleContextWriter();

  return View.modifier<A>(_:)(v3, a2, v3);
}

uint64_t type metadata accessor for StyleContextWriter()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t OptionalEdgeInsets.trailing.getter()
{
  return *(void *)(v0 + 48);
}

uint64_t type metadata instantiation function for AccessibilityNullableOptionSet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 80);
}

uint64_t static Axis.Set.vertical.getter()
{
  return 2;
}

uint64_t _ViewList_Section.content.getter(uint64_t result)
{
  uint64_t v2 = *(void *)(v1 + 8);
  if (*(void *)(v2 + 16) < 2uLL)
  {
    __break(1u);
  }
  else
  {
    uint64_t v3 = result;
    outlined init with copy of (list: ViewList, attribute: Attribute<ViewList>)(v2 + 80, (uint64_t)v5);
    uint64_t v4 = v6;
    outlined init with take of ScrollStateRequest(v5, v3);
    return v4;
  }
  return result;
}

uint64_t GraphicsContext.opacity.setter(double a1)
{
  float v2 = a1;
  uint64_t result = *v1;
  if (*(float *)(*v1 + 48) != v2)
  {
    uint64_t v4 = v1;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t v5 = RBDrawingStateInit();
      type metadata accessor for GraphicsContext.Storage();
      swift_allocObject();
      uint64_t v6 = swift_retain();
      *uint64_t v4 = GraphicsContext.Storage.init(_:state:ownsState:resetBlending:)(v6, v5, 1, 0);
      uint64_t result = swift_release();
    }
    *(float *)(*v4 + 48) = v2;
  }
  return result;
}

uint64_t static Color.black.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for black);
}

uint64_t LinearGradient.init(gradient:startPoint:endPoint:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  *(void *)a2 = result;
  *(double *)(a2 + 8) = a3;
  *(double *)(a2 + 16) = a4;
  *(double *)(a2 + 24) = a5;
  *(double *)(a2 + 32) = a6;
  return result;
}

uint64_t initializeWithCopy for AppearanceEffect(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  uint64_t v5 = (_OWORD *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 8);
  if (v6)
  {
    if (v6 == 1)
    {
      long long v7 = *(_OWORD *)(a2 + 24);
      *uint64_t v4 = *v5;
      *(_OWORD *)(a1 + 24) = v7;
      goto LABEL_9;
    }
    uint64_t v8 = *(void *)(a2 + 16);
    *(void *)(a1 + 8) = v6;
    *(void *)(a1 + 16) = v8;
    swift_retain();
  }
  else
  {
    *uint64_t v4 = *v5;
  }
  uint64_t v9 = *(void *)(a2 + 24);
  if (v9)
  {
    uint64_t v10 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = v9;
    *(void *)(a1 + 32) = v10;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  }
LABEL_9:
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 44) = *(void *)(a2 + 44);
  return a1;
}

uint64_t specialized static Animatable._makeAnimatable(value:inputs:)(uint64_t result, uint64_t a2)
{
  if ((*(unsigned char *)(a2 + 36) & 1) == 0)
  {
    float v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for AnimatableAttribute<_OpacityEffect>(0, &lazy cache variable for type metadata for AnimatableAttribute<_OpacityEffect>, (uint64_t)&type metadata for _OpacityEffect, (uint64_t)&protocol witness table for _OpacityEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<_OpacityEffect> and conformance AnimatableAttribute<A>();
    _DWORD *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(unsigned char *)(a2 + 36) & 1) == 0)
  {
    float v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ColorBox<Color.OpacityColor>(0, &lazy cache variable for type metadata for AnimatableAttribute<EdgeInsets>, (uint64_t (*)(void))lazy protocol witness table accessor for type EdgeInsets and conformance EdgeInsets, (uint64_t)&type metadata for EdgeInsets, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<EdgeInsets> and conformance AnimatableAttribute<A>();
    _DWORD *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(unsigned char *)(a2 + 36) & 1) == 0)
  {
    float v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ColorBox<Color.OpacityColor>(0, &lazy cache variable for type metadata for AnimatableAttribute<ViewFrame>, (uint64_t (*)(void))lazy protocol witness table accessor for type ViewFrame and conformance ViewFrame, (uint64_t)&type metadata for ViewFrame, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<ViewFrame> and conformance AnimatableAttribute<A>();
    _DWORD *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(unsigned char *)(a2 + 36) & 1) == 0)
  {
    float v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ColorBox<Color.OpacityColor>(0, &lazy cache variable for type metadata for AnimatableAttribute<RoundedRectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type RoundedRectangle and conformance RoundedRectangle, (uint64_t)&type metadata for RoundedRectangle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<RoundedRectangle> and conformance AnimatableAttribute<A>();
    _DWORD *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(unsigned char *)(a2 + 36) & 1) == 0)
  {
    float v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ColorBox<Color.OpacityColor>(0, &lazy cache variable for type metadata for AnimatableAttribute<UnevenRoundedRectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type UnevenRoundedRectangle and conformance UnevenRoundedRectangle, (uint64_t)&type metadata for UnevenRoundedRectangle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<UnevenRoundedRectangle> and conformance AnimatableAttribute<A>();
    _DWORD *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(unsigned char *)(a2 + 36) & 1) == 0)
  {
    float v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for AnimatableAttribute<_OpacityEffect>(0, (unint64_t *)&lazy cache variable for type metadata for AnimatableAttribute<SummarySymbol>, (uint64_t)&type metadata for SummarySymbol, (uint64_t)&protocol witness table for SummarySymbol, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<SummarySymbol> and conformance AnimatableAttribute<A>();
    _DWORD *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(unsigned char *)(a2 + 36) & 1) == 0)
  {
    float v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for AnimatableAttribute<_OpacityEffect>(0, &lazy cache variable for type metadata for AnimatableAttribute<OpacityRendererEffect>, (uint64_t)&type metadata for OpacityRendererEffect, (uint64_t)&protocol witness table for OpacityRendererEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<OpacityRendererEffect> and conformance AnimatableAttribute<A>();
    _DWORD *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(unsigned char *)(a2 + 36) & 1) == 0)
  {
    float v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ColorBox<Color.OpacityColor>(0, &lazy cache variable for type metadata for AnimatableAttribute<Shader.ResolvedShader>, (uint64_t (*)(void))lazy protocol witness table accessor for type Shader.ResolvedShader and conformance Shader.ResolvedShader, (uint64_t)&type metadata for Shader.ResolvedShader, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<Shader.ResolvedShader> and conformance AnimatableAttribute<A>();
    _DWORD *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(unsigned char *)(a2 + 36) & 1) == 0)
  {
    float v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ColorBox<Color.OpacityColor>(0, &lazy cache variable for type metadata for AnimatableAttribute<VariableBlurStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type VariableBlurStyle and conformance VariableBlurStyle, (uint64_t)&type metadata for VariableBlurStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<VariableBlurStyle> and conformance AnimatableAttribute<A>();
    _DWORD *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(unsigned char *)(a2 + 36) & 1) == 0)
  {
    float v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ColorBox<Color.OpacityColor>(0, &lazy cache variable for type metadata for AnimatableAttribute<CGFloat>, (uint64_t (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat, MEMORY[0x263F8EF38], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<CGFloat> and conformance AnimatableAttribute<A>();
    _DWORD *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(unsigned char *)(a2 + 36) & 1) == 0)
  {
    float v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ColorBox<Color.OpacityColor>(0, &lazy cache variable for type metadata for AnimatableAttribute<ViewOrigin>, (uint64_t (*)(void))lazy protocol witness table accessor for type ViewOrigin and conformance ViewOrigin, (uint64_t)&type metadata for ViewOrigin, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<ViewOrigin> and conformance AnimatableAttribute<A>();
    _DWORD *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(unsigned char *)(a2 + 36) & 1) == 0)
  {
    float v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ColorBox<Color.OpacityColor>(0, &lazy cache variable for type metadata for AnimatableAttribute<StrokeStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type StrokeStyle and conformance StrokeStyle, (uint64_t)&type metadata for StrokeStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<StrokeStyle> and conformance AnimatableAttribute<A>();
    _DWORD *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(unsigned char *)(a2 + 36) & 1) == 0)
  {
    float v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ColorBox<Color.OpacityColor>(0, &lazy cache variable for type metadata for AnimatableAttribute<_BlurEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type _BlurEffect and conformance _BlurEffect, (uint64_t)&type metadata for _BlurEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<_BlurEffect> and conformance AnimatableAttribute<A>();
    _DWORD *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(unsigned char *)(a2 + 36) & 1) == 0)
  {
    float v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ColorBox<Color.OpacityColor>(0, &lazy cache variable for type metadata for AnimatableAttribute<MeshGradient._Paint>, (uint64_t (*)(void))lazy protocol witness table accessor for type MeshGradient._Paint and conformance MeshGradient._Paint, (uint64_t)&type metadata for MeshGradient._Paint, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<MeshGradient._Paint> and conformance AnimatableAttribute<A>();
    _DWORD *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(unsigned char *)(a2 + 36) & 1) == 0)
  {
    float v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ColorBox<Color.OpacityColor>(0, &lazy cache variable for type metadata for AnimatableAttribute<_ScaleEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ScaleEffect and conformance _ScaleEffect, (uint64_t)&type metadata for _ScaleEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<_ScaleEffect> and conformance AnimatableAttribute<A>();
    _DWORD *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(unsigned char *)(a2 + 36) & 1) == 0)
  {
    float v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ColorBox<Color.OpacityColor>(0, &lazy cache variable for type metadata for AnimatableAttribute<_OffsetEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type _OffsetEffect and conformance _OffsetEffect, (uint64_t)&type metadata for _OffsetEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<_OffsetEffect> and conformance AnimatableAttribute<A>();
    _DWORD *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(unsigned char *)(a2 + 36) & 1) == 0)
  {
    float v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ColorBox<Color.OpacityColor>(0, &lazy cache variable for type metadata for AnimatableAttribute<_ShadowEffect._Resolved>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShadowEffect._Resolved and conformance _ShadowEffect._Resolved, (uint64_t)&type metadata for _ShadowEffect._Resolved, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<_ShadowEffect._Resolved> and conformance AnimatableAttribute<A>();
    _DWORD *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(unsigned char *)(a2 + 36) & 1) == 0)
  {
    float v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ColorBox<Color.OpacityColor>(0, &lazy cache variable for type metadata for AnimatableAttribute<LinearGradient._Paint>, (uint64_t (*)(void))lazy protocol witness table accessor for type LinearGradient._Paint and conformance LinearGradient._Paint, (uint64_t)&type metadata for LinearGradient._Paint, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<LinearGradient._Paint> and conformance AnimatableAttribute<A>();
    _DWORD *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(unsigned char *)(a2 + 36) & 1) == 0)
  {
    float v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ColorBox<Color.OpacityColor>(0, &lazy cache variable for type metadata for AnimatableAttribute<RadialGradient._Paint>, (uint64_t (*)(void))lazy protocol witness table accessor for type RadialGradient._Paint and conformance RadialGradient._Paint, (uint64_t)&type metadata for RadialGradient._Paint, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<RadialGradient._Paint> and conformance AnimatableAttribute<A>();
    _DWORD *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(unsigned char *)(a2 + 36) & 1) == 0)
  {
    float v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ColorBox<Color.OpacityColor>(0, &lazy cache variable for type metadata for AnimatableAttribute<AngularGradient._Paint>, (uint64_t (*)(void))lazy protocol witness table accessor for type AngularGradient._Paint and conformance AngularGradient._Paint, (uint64_t)&type metadata for AngularGradient._Paint, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<AngularGradient._Paint> and conformance AnimatableAttribute<A>();
    _DWORD *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(unsigned char *)(a2 + 36) & 1) == 0)
  {
    float v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for AnimatableAttribute<_OpacityEffect>(0, &lazy cache variable for type metadata for AnimatableAttribute<_ContrastEffect>, (uint64_t)&type metadata for _ContrastEffect, (uint64_t)&protocol witness table for _ContrastEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<_ContrastEffect> and conformance AnimatableAttribute<A>();
    _DWORD *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(unsigned char *)(a2 + 36) & 1) == 0)
  {
    float v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ColorBox<Color.OpacityColor>(0, &lazy cache variable for type metadata for AnimatableAttribute<_RotationEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type _RotationEffect and conformance _RotationEffect, (uint64_t)&type metadata for _RotationEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<_RotationEffect> and conformance AnimatableAttribute<A>();
    _DWORD *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(unsigned char *)(a2 + 36) & 1) == 0)
  {
    float v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ColorBox<Color.OpacityColor>(0, &lazy cache variable for type metadata for AnimatableAttribute<ResolvedGradient>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedGradient and conformance ResolvedGradient, (uint64_t)&type metadata for ResolvedGradient, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<ResolvedGradient> and conformance AnimatableAttribute<A>();
    _DWORD *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(unsigned char *)(a2 + 36) & 1) == 0)
  {
    float v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ColorBox<Color.OpacityColor>(0, &lazy cache variable for type metadata for AnimatableAttribute<RoundedRectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type RoundedRectangle._Inset and conformance RoundedRectangle._Inset, (uint64_t)&type metadata for RoundedRectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<RoundedRectangle._Inset> and conformance AnimatableAttribute<A>();
    _DWORD *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(unsigned char *)(a2 + 36) & 1) == 0)
  {
    float v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for AnimatableAttribute<_OpacityEffect>(0, &lazy cache variable for type metadata for AnimatableAttribute<_GrayscaleEffect>, (uint64_t)&type metadata for _GrayscaleEffect, (uint64_t)&protocol witness table for _GrayscaleEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<_GrayscaleEffect> and conformance AnimatableAttribute<A>();
    _DWORD *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(unsigned char *)(a2 + 36) & 1) == 0)
  {
    float v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ColorBox<Color.OpacityColor>(0, &lazy cache variable for type metadata for AnimatableAttribute<_ShapeStyle_Pack.Style>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.Style and conformance _ShapeStyle_Pack.Style, (uint64_t)&type metadata for _ShapeStyle_Pack.Style, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<_ShapeStyle_Pack.Style> and conformance AnimatableAttribute<A>();
    _DWORD *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(unsigned char *)(a2 + 36) & 1) == 0)
  {
    float v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ColorBox<Color.OpacityColor>(0, &lazy cache variable for type metadata for AnimatableAttribute<_ShapeStyle_Pack.Fill>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.Fill and conformance _ShapeStyle_Pack.Fill, (uint64_t)&type metadata for _ShapeStyle_Pack.Fill, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<_ShapeStyle_Pack.Fill> and conformance AnimatableAttribute<A>();
    _DWORD *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(unsigned char *)(a2 + 36) & 1) == 0)
  {
    float v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ColorBox<Color.OpacityColor>(0, &lazy cache variable for type metadata for AnimatableAttribute<_ShapeStyle_Pack.Effect.Kind>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.Effect.Kind and conformance _ShapeStyle_Pack.Effect.Kind, (uint64_t)&type metadata for _ShapeStyle_Pack.Effect.Kind, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<_ShapeStyle_Pack.Effect.Kind> and conformance AnimatableAttribute<A>();
    _DWORD *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(unsigned char *)(a2 + 36) & 1) == 0)
  {
    float v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ColorBox<Color.OpacityColor>(0, &lazy cache variable for type metadata for AnimatableAttribute<_ShapeStyle_Pack.Effect>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.Effect and conformance _ShapeStyle_Pack.Effect, (uint64_t)&type metadata for _ShapeStyle_Pack.Effect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<_ShapeStyle_Pack.Effect> and conformance AnimatableAttribute<A>();
    _DWORD *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(unsigned char *)(a2 + 36) & 1) == 0)
  {
    float v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ColorBox<Color.OpacityColor>(0, &lazy cache variable for type metadata for AnimatableAttribute<_ShapeStyle_Pack>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack and conformance _ShapeStyle_Pack, (uint64_t)&type metadata for _ShapeStyle_Pack, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<_ShapeStyle_Pack> and conformance AnimatableAttribute<A>();
    _DWORD *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(unsigned char *)(a2 + 36) & 1) == 0)
  {
    float v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for AnimatableAttribute<_OpacityEffect>(0, &lazy cache variable for type metadata for AnimatableAttribute<_BrightnessEffect>, (uint64_t)&type metadata for _BrightnessEffect, (uint64_t)&protocol witness table for _BrightnessEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<_BrightnessEffect> and conformance AnimatableAttribute<A>();
    _DWORD *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(unsigned char *)(a2 + 36) & 1) == 0)
  {
    float v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ColorBox<Color.OpacityColor>(0, &lazy cache variable for type metadata for AnimatableAttribute<_Rotation3DEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type _Rotation3DEffect and conformance _Rotation3DEffect, (uint64_t)&type metadata for _Rotation3DEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<_Rotation3DEffect> and conformance AnimatableAttribute<A>();
    _DWORD *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(unsigned char *)(a2 + 36) & 1) == 0)
  {
    float v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for AnimatableAttribute<_OpacityEffect>(0, &lazy cache variable for type metadata for AnimatableAttribute<_SaturationEffect>, (uint64_t)&type metadata for _SaturationEffect, (uint64_t)&protocol witness table for _SaturationEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<_SaturationEffect> and conformance AnimatableAttribute<A>();
    _DWORD *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(unsigned char *)(a2 + 36) & 1) == 0)
  {
    float v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ColorBox<Color.OpacityColor>(0, &lazy cache variable for type metadata for AnimatableAttribute<EllipticalGradient._Paint>, (uint64_t (*)(void))lazy protocol witness table accessor for type EllipticalGradient._Paint and conformance EllipticalGradient._Paint, (uint64_t)&type metadata for EllipticalGradient._Paint, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<EllipticalGradient._Paint> and conformance AnimatableAttribute<A>();
    _DWORD *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(unsigned char *)(a2 + 36) & 1) == 0)
  {
    float v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for AnimatableAttribute<_OpacityEffect>(0, &lazy cache variable for type metadata for AnimatableAttribute<_HueRotationEffect>, (uint64_t)&type metadata for _HueRotationEffect, (uint64_t)&protocol witness table for _HueRotationEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<_HueRotationEffect> and conformance AnimatableAttribute<A>();
    _DWORD *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(unsigned char *)(a2 + 36) & 1) == 0)
  {
    float v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ColorBox<Color.OpacityColor>(0, &lazy cache variable for type metadata for AnimatableAttribute<ResolvedShadowStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedShadowStyle and conformance ResolvedShadowStyle, (uint64_t)&type metadata for ResolvedShadowStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<ResolvedShadowStyle> and conformance AnimatableAttribute<A>();
    _DWORD *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(unsigned char *)(a2 + 36) & 1) == 0)
  {
    float v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ColorBox<Color.OpacityColor>(0, &lazy cache variable for type metadata for AnimatableAttribute<RectangleCornerRadii>, (uint64_t (*)(void))lazy protocol witness table accessor for type RectangleCornerRadii and conformance RectangleCornerRadii, (uint64_t)&type metadata for RectangleCornerRadii, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<RectangleCornerRadii> and conformance AnimatableAttribute<A>();
    _DWORD *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(unsigned char *)(a2 + 36) & 1) == 0)
  {
    float v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ColorBox<Color.OpacityColor>(0, &lazy cache variable for type metadata for AnimatableAttribute<_ColorMultiplyEffect._Resolved>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ColorMultiplyEffect._Resolved and conformance _ColorMultiplyEffect._Resolved, (uint64_t)&type metadata for _ColorMultiplyEffect._Resolved, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<_ColorMultiplyEffect._Resolved> and conformance AnimatableAttribute<A>();
    _DWORD *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(unsigned char *)(a2 + 36) & 1) == 0)
  {
    float v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ColorBox<Color.OpacityColor>(0, &lazy cache variable for type metadata for AnimatableAttribute<ContainerRelativeShape._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type ContainerRelativeShape._Inset and conformance ContainerRelativeShape._Inset, (uint64_t)&type metadata for ContainerRelativeShape._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<ContainerRelativeShape._Inset> and conformance AnimatableAttribute<A>();
    _DWORD *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(unsigned char *)(a2 + 36) & 1) == 0)
  {
    float v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ColorBox<Color.OpacityColor>(0, &lazy cache variable for type metadata for AnimatableAttribute<UnevenRoundedRectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type UnevenRoundedRectangle._Inset and conformance UnevenRoundedRectangle._Inset, (uint64_t)&type metadata for UnevenRoundedRectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<UnevenRoundedRectangle._Inset> and conformance AnimatableAttribute<A>();
    _DWORD *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(unsigned char *)(a2 + 36) & 1) == 0)
  {
    float v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ColorBox<Color.OpacityColor>(0, &lazy cache variable for type metadata for AnimatableAttribute<_ColorMonochromeEffect._Resolved>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ColorMonochromeEffect._Resolved and conformance _ColorMonochromeEffect._Resolved, (uint64_t)&type metadata for _ColorMonochromeEffect._Resolved, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<_ColorMonochromeEffect._Resolved> and conformance AnimatableAttribute<A>();
    _DWORD *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(unsigned char *)(a2 + 36) & 1) == 0)
  {
    float v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for AnimatableAttribute<_OpacityEffect>(0, &lazy cache variable for type metadata for AnimatableAttribute<Angle>, (uint64_t)&type metadata for Angle, (uint64_t)&protocol witness table for Angle, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<Angle> and conformance AnimatableAttribute<A>();
    _DWORD *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(unsigned char *)(a2 + 36) & 1) == 0)
  {
    float v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ColorBox<Color.OpacityColor>(0, &lazy cache variable for type metadata for AnimatableAttribute<Color.ResolvedVibrant>, (uint64_t (*)(void))lazy protocol witness table accessor for type Color.ResolvedVibrant and conformance Color.ResolvedVibrant, (uint64_t)&type metadata for Color.ResolvedVibrant, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<Color.ResolvedVibrant> and conformance AnimatableAttribute<A>();
    _DWORD *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(unsigned char *)(a2 + 36) & 1) == 0)
  {
    float v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ColorBox<Color.OpacityColor>(0, &lazy cache variable for type metadata for AnimatableAttribute<Color.Resolved>, (uint64_t (*)(void))lazy protocol witness table accessor for type Color.Resolved and conformance Color.Resolved, (uint64_t)&type metadata for Color.Resolved, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<Color.Resolved> and conformance AnimatableAttribute<A>();
    _DWORD *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(unsigned char *)(a2 + 36) & 1) == 0)
  {
    float v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ColorBox<Color.OpacityColor>(0, &lazy cache variable for type metadata for AnimatableAttribute<Circle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Circle._Inset and conformance Circle._Inset, (uint64_t)&type metadata for Circle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<Circle._Inset> and conformance AnimatableAttribute<A>();
    _DWORD *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(unsigned char *)(a2 + 36) & 1) == 0)
  {
    float v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ColorBox<Color.OpacityColor>(0, &lazy cache variable for type metadata for AnimatableAttribute<Capsule._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Capsule._Inset and conformance Capsule._Inset, (uint64_t)&type metadata for Capsule._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<Capsule._Inset> and conformance AnimatableAttribute<A>();
    _DWORD *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(unsigned char *)(a2 + 36) & 1) == 0)
  {
    float v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ColorBox<Color.OpacityColor>(0, &lazy cache variable for type metadata for AnimatableAttribute<Ellipse._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Ellipse._Inset and conformance Ellipse._Inset, (uint64_t)&type metadata for Ellipse._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<Ellipse._Inset> and conformance AnimatableAttribute<A>();
    _DWORD *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(unsigned char *)(a2 + 36) & 1) == 0)
  {
    float v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ColorBox<Color.OpacityColor>(0, &lazy cache variable for type metadata for AnimatableAttribute<UnitRect>, (uint64_t (*)(void))lazy protocol witness table accessor for type UnitRect and conformance UnitRect, (uint64_t)&type metadata for UnitRect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<UnitRect> and conformance AnimatableAttribute<A>();
    _DWORD *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(unsigned char *)(a2 + 36) & 1) == 0)
  {
    float v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ColorBox<Color.OpacityColor>(0, &lazy cache variable for type metadata for AnimatableAttribute<ViewSize>, (uint64_t (*)(void))lazy protocol witness table accessor for type ViewSize and conformance ViewSize, (uint64_t)&type metadata for ViewSize, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<ViewSize> and conformance AnimatableAttribute<A>();
    _DWORD *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(unsigned char *)(a2 + 36) & 1) == 0)
  {
    float v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ColorBox<Color.OpacityColor>(0, &lazy cache variable for type metadata for AnimatableAttribute<BlurStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BlurStyle and conformance BlurStyle, (uint64_t)&type metadata for BlurStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<BlurStyle> and conformance AnimatableAttribute<A>();
    _DWORD *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(unsigned char *)(a2 + 36) & 1) == 0)
  {
    float v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ColorBox<Color.OpacityColor>(0, &lazy cache variable for type metadata for AnimatableAttribute<ColorView>, (uint64_t (*)(void))lazy protocol witness table accessor for type ColorView and conformance ColorView, (uint64_t)&type metadata for ColorView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<ColorView> and conformance AnimatableAttribute<A>();
    _DWORD *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(unsigned char *)(a2 + 36) & 1) == 0)
  {
    float v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ColorBox<Color.OpacityColor>(0, &lazy cache variable for type metadata for AnimatableAttribute<Rectangle._Inset>, (uint64_t (*)(void))lazy protocol witness table accessor for type Rectangle._Inset and conformance Rectangle._Inset, (uint64_t)&type metadata for Rectangle._Inset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<Rectangle._Inset> and conformance AnimatableAttribute<A>();
    _DWORD *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(unsigned char *)(a2 + 36) & 1) == 0)
  {
    float v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ColorBox<Color.OpacityColor>(0, &lazy cache variable for type metadata for AnimatableAttribute<UnitPoint>, (uint64_t (*)(void))lazy protocol witness table accessor for type UnitPoint and conformance UnitPoint, (uint64_t)&type metadata for UnitPoint, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<UnitPoint> and conformance AnimatableAttribute<A>();
    _DWORD *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(unsigned char *)(a2 + 36) & 1) == 0)
  {
    float v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for AnimatableAttribute<_OpacityEffect>(0, &lazy cache variable for type metadata for AnimatableAttribute<Double>, MEMORY[0x263F8D538], (uint64_t)&protocol witness table for Double, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<Double> and conformance AnimatableAttribute<A>();
    _DWORD *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(unsigned char *)(a2 + 36) & 1) == 0)
  {
    float v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for CGRect(0);
    type metadata accessor for AnimatableAttribute<CGRect>();
    lazy protocol witness table accessor for type AnimatableAttribute<CGPoint> and conformance AnimatableAttribute<A>(&lazy protocol witness table cache variable for type AnimatableAttribute<CGRect> and conformance AnimatableAttribute<A>, (void (*)(uint64_t))type metadata accessor for AnimatableAttribute<CGRect>);
    _DWORD *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(unsigned char *)(a2 + 36) & 1) == 0)
  {
    float v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for CGSize(0);
    type metadata accessor for AnimatableAttribute<CGSize>();
    lazy protocol witness table accessor for type AnimatableAttribute<CGPoint> and conformance AnimatableAttribute<A>(&lazy protocol witness table cache variable for type AnimatableAttribute<CGSize> and conformance AnimatableAttribute<A>, (void (*)(uint64_t))type metadata accessor for AnimatableAttribute<CGSize>);
    _DWORD *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;

  if ((*(unsigned char *)(a2 + 36) & 1) == 0)
  {
    float v2 = (_DWORD *)result;
    swift_beginAccess();
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for CGPoint(0);
    type metadata accessor for AnimatableAttribute<CGPoint>();
    lazy protocol witness table accessor for type AnimatableAttribute<CGPoint> and conformance AnimatableAttribute<A>(&lazy protocol witness table cache variable for type AnimatableAttribute<CGPoint> and conformance AnimatableAttribute<A>, (void (*)(uint64_t))type metadata accessor for AnimatableAttribute<CGPoint>);
    _DWORD *v2 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    return AGGraphSetFlags();
  }
  return result;
}

uint64_t static _OpacityEffect._makeView(modifier:inputs:body:)@<X0>(unsigned int *a1@<X0>, long long *a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, unint64_t *)@<X2>, double *a4@<X8>)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  unsigned int v6 = *a1;
  long long v7 = a2[2];
  long long v8 = a2[4];
  long long v25 = a2[3];
  long long v26 = v8;
  int v27 = *((_DWORD *)a2 + 20);
  long long v9 = a2[1];
  v24[0] = *a2;
  v24[1] = v9;
  _OWORD v24[2] = v7;
  long long v29 = v9;
  long long v30 = v7;
  long long v28 = v24[0];
  char v10 = BYTE4(v7);
  if ((BYTE4(v7) & 0x20) == 0)
  {
    uint64_t v11 = *(void *)(v25 + 16);
    if (!v11)
    {
LABEL_6:
      long long v13 = a2[3];
      long long v20 = a2[2];
      long long v21 = v13;
      long long v22 = a2[4];
      int v23 = *((_DWORD *)a2 + 20);
      long long v14 = a2[1];
      long long v18 = *a2;
      long long v19 = v14;
      uint64_t v15 = swift_retain();
      closure #1 in static _OpacityEffect._makeView(modifier:inputs:body:)(v15, (uint64_t)&v18, a3, v6, a4);
      return swift_release();
    }
    uint64_t v12 = (ValueMetadata **)(v25 + 32);
    while (*v12 != &type metadata for DisplayList.Key)
    {
      v12 += 2;
      if (!--v11) {
        goto LABEL_6;
      }
    }
  }
  swift_retain();
  if (v10)
  {
    swift_retain_n();
    unsigned int v17 = v6;
  }
  else
  {
    swift_beginAccess();
    *(void *)&long long v18 = __PAIR64__(*(_DWORD *)(v29 + 16), v6);
    *((void *)&v18 + 1) = __PAIR64__(DWORD2(v28), DWORD2(v29));
    LODWORD(v19) = HIDWORD(v29);
    *((void *)&v19 + 1) = 0;
    LOBYTE(v20) = 1;
    *((void *)&v20 + 1) = 0;
    LODWORD(v21) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    swift_retain_n();
    outlined retain of _GraphInputs((uint64_t)&v28);
    type metadata accessor for AnimatableAttribute<_OpacityEffect>(0, &lazy cache variable for type metadata for AnimatableAttribute<_OpacityEffect>, (uint64_t)&type metadata for _OpacityEffect, (uint64_t)&protocol witness table for _OpacityEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<_OpacityEffect> and conformance AnimatableAttribute<A>();
    unsigned int v17 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    AGGraphSetFlags();
    outlined release of _GraphInputs((uint64_t)&v28);
  }
  swift_retain();
  specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(v17, (uint64_t)v24, a3, v6, a4);
  return swift_release_n();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance OpacityRendererEffect@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, long long *)@<X2>, void *a4@<X8>)
{
  uint64_t v4 = *a1;
  long long v5 = *(_OWORD *)(a2 + 48);
  void v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  int v9 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static RendererEffect.makeRendererEffect(effect:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t specialized static RendererEffect.makeRendererEffect(effect:inputs:body:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, long long *)@<X2>, void *a4@<X8>)
{
  unsigned int v6 = a1;
  uint64_t v25 = *MEMORY[0x263EF8340];
  long long v8 = *(_OWORD *)(a2 + 16);
  long long v22 = *(_OWORD *)a2;
  long long v9 = *(_OWORD *)(a2 + 32);
  long long v23 = v8;
  long long v24 = v9;
  if ((BYTE4(v9) & 0x20) == 0)
  {
    uint64_t v10 = *(void *)(a2 + 48);
    uint64_t v11 = *(void *)(v10 + 16);
    if (!v11)
    {
LABEL_6:
      long long v13 = *(_OWORD *)(a2 + 48);
      long long v18 = *(_OWORD *)(a2 + 32);
      long long v19 = v13;
      long long v20 = *(_OWORD *)(a2 + 64);
      int v21 = *(_DWORD *)(a2 + 80);
      long long v14 = *(_OWORD *)(a2 + 16);
      long long v16 = *(_OWORD *)a2;
      long long v17 = v14;
      return ((uint64_t (*)(uint64_t, long long *))a3)(a1, &v16);
    }
    uint64_t v12 = (ValueMetadata **)(v10 + 32);
    while (*v12 != &type metadata for DisplayList.Key)
    {
      v12 += 2;
      if (!--v11) {
        goto LABEL_6;
      }
    }
  }
  if ((BYTE4(v9) & 1) == 0)
  {
    swift_beginAccess();
    *(void *)&long long v16 = __PAIR64__(*(_DWORD *)(v23 + 16), v6);
    *((void *)&v16 + 1) = __PAIR64__(DWORD2(v22), DWORD2(v23));
    LODWORD(v17) = HIDWORD(v23);
    *((void *)&v17 + 1) = 0;
    LOBYTE(v18) = 1;
    *((void *)&v18 + 1) = 0;
    LODWORD(v19) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    outlined retain of _GraphInputs((uint64_t)&v22);
    type metadata accessor for AnimatableAttribute<_OpacityEffect>(0, &lazy cache variable for type metadata for AnimatableAttribute<OpacityRendererEffect>, (uint64_t)&type metadata for OpacityRendererEffect, (uint64_t)&protocol witness table for OpacityRendererEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<OpacityRendererEffect> and conformance AnimatableAttribute<A>();
    unsigned int v6 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    AGGraphSetFlags();
    outlined release of _GraphInputs((uint64_t)&v22);
  }
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(v6, a2, a3, a4);
}

{
  unsigned int v6;
  unsigned int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  ValueMetadata **v15;
  long long v16;
  long long v17;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  int v24;
  uint64_t v25;

  unsigned int v6 = a1;
  uint64_t v25 = *MEMORY[0x263EF8340];
  long long v8 = *(_DWORD *)(a2 + 8);
  long long v9 = *(void *)(a2 + 16);
  uint64_t v11 = *(_DWORD *)(a2 + 24);
  uint64_t v10 = *(_DWORD *)(a2 + 28);
  uint64_t v12 = *(_DWORD *)(a2 + 36);
  if ((v12 & 0x20) == 0)
  {
    long long v13 = *(void *)(a2 + 48);
    long long v14 = *(void *)(v13 + 16);
    if (!v14)
    {
LABEL_6:
      long long v16 = *(_OWORD *)(a2 + 48);
      int v21 = *(_OWORD *)(a2 + 32);
      long long v22 = v16;
      long long v23 = *(_OWORD *)(a2 + 64);
      long long v24 = *(_DWORD *)(a2 + 80);
      long long v17 = *(_OWORD *)(a2 + 16);
      long long v19 = *(_OWORD *)a2;
      long long v20 = v17;
      return ((uint64_t (*)(uint64_t, long long *))a3)(a1, &v19);
    }
    uint64_t v15 = (ValueMetadata **)(v13 + 32);
    while (*v15 != &type metadata for DisplayList.Key)
    {
      v15 += 2;
      if (!--v14) {
        goto LABEL_6;
      }
    }
  }
  if ((v12 & 1) == 0)
  {
    swift_beginAccess();
    *(void *)&long long v19 = __PAIR64__(*(_DWORD *)(v9 + 16), v6);
    *((void *)&v19 + 1) = __PAIR64__(v8, v11);
    LODWORD(v20) = v10;
    *((void *)&v20 + 1) = 0;
    LOBYTE(v21) = 1;
    *((void *)&v21 + 1) = 0;
    LODWORD(v22) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ColorBox<Color.OpacityColor>(0, &lazy cache variable for type metadata for AnimatableAttribute<_BlurEffect>, (uint64_t (*)(void))lazy protocol witness table accessor for type _BlurEffect and conformance _BlurEffect, (uint64_t)&type metadata for _BlurEffect, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<_BlurEffect> and conformance AnimatableAttribute<A>();
    unsigned int v6 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    AGGraphSetFlags();
  }
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(v6, a2, a3, a4);
}

{
  unsigned int v6;
  unsigned int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  ValueMetadata **v15;
  long long v16;
  long long v17;
  long long v19;
  unsigned char v20[48];
  long long v21;
  int v22;
  uint64_t v23;

  unsigned int v6 = a1;
  long long v23 = *MEMORY[0x263EF8340];
  long long v8 = *(_DWORD *)(a2 + 8);
  long long v9 = *(void *)(a2 + 16);
  uint64_t v11 = *(_DWORD *)(a2 + 24);
  uint64_t v10 = *(_DWORD *)(a2 + 28);
  uint64_t v12 = *(_DWORD *)(a2 + 36);
  if ((v12 & 0x20) == 0)
  {
    long long v13 = *(void *)(a2 + 48);
    long long v14 = *(void *)(v13 + 16);
    if (!v14)
    {
LABEL_6:
      long long v16 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v20[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v20[32] = v16;
      int v21 = *(_OWORD *)(a2 + 64);
      long long v22 = *(_DWORD *)(a2 + 80);
      long long v17 = *(_OWORD *)(a2 + 16);
      long long v19 = *(_OWORD *)a2;
      *(_OWORD *)long long v20 = v17;
      return ((uint64_t (*)(uint64_t, long long *))a3)(a1, &v19);
    }
    uint64_t v15 = (ValueMetadata **)(v13 + 32);
    while (*v15 != &type metadata for DisplayList.Key)
    {
      v15 += 2;
      if (!--v14) {
        goto LABEL_6;
      }
    }
  }
  if ((v12 & 1) == 0)
  {
    swift_beginAccess();
    *(void *)&long long v19 = __PAIR64__(*(_DWORD *)(v9 + 16), v6);
    *((void *)&v19 + 1) = __PAIR64__(v8, v11);
    *(_DWORD *)long long v20 = v10;
    memset(&v20[8], 0, 40);
    LOBYTE(v21) = 1;
    *((void *)&v21 + 1) = 0;
    long long v22 = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ColorBox<Color.OpacityColor>(0, &lazy cache variable for type metadata for AnimatableAttribute<_ShadowEffect._Resolved>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShadowEffect._Resolved and conformance _ShadowEffect._Resolved, (uint64_t)&type metadata for _ShadowEffect._Resolved, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<_ShadowEffect._Resolved> and conformance AnimatableAttribute<A>();
    unsigned int v6 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    AGGraphSetFlags();
  }
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(v6, a2, a3, a4);
}

{
  unsigned int v6;
  long long v8;
  long long v9;
  uint64_t v10;
  uint64_t v11;
  ValueMetadata **v12;
  long long v13;
  long long v14;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  int v21;
  long long v22;
  long long v23;
  long long v24;
  uint64_t v25;

  unsigned int v6 = a1;
  uint64_t v25 = *MEMORY[0x263EF8340];
  long long v8 = *(_OWORD *)(a2 + 16);
  long long v22 = *(_OWORD *)a2;
  long long v9 = *(_OWORD *)(a2 + 32);
  long long v23 = v8;
  long long v24 = v9;
  if ((BYTE4(v9) & 0x20) == 0)
  {
    uint64_t v10 = *(void *)(a2 + 48);
    uint64_t v11 = *(void *)(v10 + 16);
    if (!v11)
    {
LABEL_6:
      long long v13 = *(_OWORD *)(a2 + 48);
      long long v18 = *(_OWORD *)(a2 + 32);
      long long v19 = v13;
      long long v20 = *(_OWORD *)(a2 + 64);
      int v21 = *(_DWORD *)(a2 + 80);
      long long v14 = *(_OWORD *)(a2 + 16);
      long long v16 = *(_OWORD *)a2;
      long long v17 = v14;
      return ((uint64_t (*)(uint64_t, long long *))a3)(a1, &v16);
    }
    uint64_t v12 = (ValueMetadata **)(v10 + 32);
    while (*v12 != &type metadata for DisplayList.Key)
    {
      v12 += 2;
      if (!--v11) {
        goto LABEL_6;
      }
    }
  }
  if ((BYTE4(v9) & 1) == 0)
  {
    swift_beginAccess();
    *(void *)&long long v16 = __PAIR64__(*(_DWORD *)(v23 + 16), v6);
    *((void *)&v16 + 1) = __PAIR64__(DWORD2(v22), DWORD2(v23));
    LODWORD(v17) = HIDWORD(v23);
    *((void *)&v17 + 1) = 0;
    LOBYTE(v18) = 1;
    *((void *)&v18 + 1) = 0;
    LODWORD(v19) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    outlined retain of _GraphInputs((uint64_t)&v22);
    type metadata accessor for ColorBox<Color.OpacityColor>(0, &lazy cache variable for type metadata for AnimatableAttribute<VariableBlurStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type VariableBlurStyle and conformance VariableBlurStyle, (uint64_t)&type metadata for VariableBlurStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<VariableBlurStyle> and conformance AnimatableAttribute<A>();
    unsigned int v6 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    AGGraphSetFlags();
    outlined release of _GraphInputs((uint64_t)&v22);
  }
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(v6, a2, a3, a4);
}

{
  unsigned int v6;
  long long v8;
  long long v9;
  uint64_t v10;
  uint64_t v11;
  ValueMetadata **v12;
  long long v13;
  long long v14;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  int v21;
  long long v22;
  long long v23;
  long long v24;
  uint64_t v25;

  unsigned int v6 = a1;
  uint64_t v25 = *MEMORY[0x263EF8340];
  long long v8 = *(_OWORD *)(a2 + 16);
  long long v22 = *(_OWORD *)a2;
  long long v9 = *(_OWORD *)(a2 + 32);
  long long v23 = v8;
  long long v24 = v9;
  if ((BYTE4(v9) & 0x20) == 0)
  {
    uint64_t v10 = *(void *)(a2 + 48);
    uint64_t v11 = *(void *)(v10 + 16);
    if (!v11)
    {
LABEL_6:
      long long v13 = *(_OWORD *)(a2 + 48);
      long long v18 = *(_OWORD *)(a2 + 32);
      long long v19 = v13;
      long long v20 = *(_OWORD *)(a2 + 64);
      int v21 = *(_DWORD *)(a2 + 80);
      long long v14 = *(_OWORD *)(a2 + 16);
      long long v16 = *(_OWORD *)a2;
      long long v17 = v14;
      return ((uint64_t (*)(uint64_t, long long *))a3)(a1, &v16);
    }
    uint64_t v12 = (ValueMetadata **)(v10 + 32);
    while (*v12 != &type metadata for DisplayList.Key)
    {
      v12 += 2;
      if (!--v11) {
        goto LABEL_6;
      }
    }
  }
  if ((BYTE4(v9) & 1) == 0)
  {
    swift_beginAccess();
    *(void *)&long long v16 = __PAIR64__(*(_DWORD *)(v23 + 16), v6);
    *((void *)&v16 + 1) = __PAIR64__(DWORD2(v22), DWORD2(v23));
    LODWORD(v17) = HIDWORD(v23);
    *((void *)&v17 + 1) = 0;
    *(void *)&long long v18 = 0;
    DWORD2(v18) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    outlined retain of _GraphInputs((uint64_t)&v22);
    type metadata accessor for ColorBox<Color.OpacityColor>(0, &lazy cache variable for type metadata for AnimatableAttribute<Shader.ResolvedShader>, (uint64_t (*)(void))lazy protocol witness table accessor for type Shader.ResolvedShader and conformance Shader.ResolvedShader, (uint64_t)&type metadata for Shader.ResolvedShader, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<Shader.ResolvedShader> and conformance AnimatableAttribute<A>();
    unsigned int v6 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    AGGraphSetFlags();
    outlined release of _GraphInputs((uint64_t)&v22);
  }
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(v6, a2, a3, a4);
}

{
  unsigned int v6;
  unsigned int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  ValueMetadata **v15;
  long long v16;
  long long v17;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  int v24;
  uint64_t v25;

  unsigned int v6 = a1;
  uint64_t v25 = *MEMORY[0x263EF8340];
  long long v8 = *(_DWORD *)(a2 + 8);
  long long v9 = *(void *)(a2 + 16);
  uint64_t v11 = *(_DWORD *)(a2 + 24);
  uint64_t v10 = *(_DWORD *)(a2 + 28);
  uint64_t v12 = *(_DWORD *)(a2 + 36);
  if ((v12 & 0x20) == 0)
  {
    long long v13 = *(void *)(a2 + 48);
    long long v14 = *(void *)(v13 + 16);
    if (!v14)
    {
LABEL_6:
      long long v16 = *(_OWORD *)(a2 + 48);
      int v21 = *(_OWORD *)(a2 + 32);
      long long v22 = v16;
      long long v23 = *(_OWORD *)(a2 + 64);
      long long v24 = *(_DWORD *)(a2 + 80);
      long long v17 = *(_OWORD *)(a2 + 16);
      long long v19 = *(_OWORD *)a2;
      long long v20 = v17;
      return ((uint64_t (*)(uint64_t, long long *))a3)(a1, &v19);
    }
    uint64_t v15 = (ValueMetadata **)(v13 + 32);
    while (*v15 != &type metadata for DisplayList.Key)
    {
      v15 += 2;
      if (!--v14) {
        goto LABEL_6;
      }
    }
  }
  if ((v12 & 1) == 0)
  {
    swift_beginAccess();
    *(void *)&long long v19 = __PAIR64__(*(_DWORD *)(v9 + 16), v6);
    *((void *)&v19 + 1) = __PAIR64__(v8, v11);
    LODWORD(v20) = v10;
    *((void *)&v20 + 1) = 0;
    *(void *)&int v21 = 0;
    DWORD2(v21) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ColorBox<Color.OpacityColor>(0, &lazy cache variable for type metadata for AnimatableAttribute<Shader.ResolvedShader>, (uint64_t (*)(void))lazy protocol witness table accessor for type Shader.ResolvedShader and conformance Shader.ResolvedShader, (uint64_t)&type metadata for Shader.ResolvedShader, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<Shader.ResolvedShader> and conformance AnimatableAttribute<A>();
    unsigned int v6 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    AGGraphSetFlags();
  }
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(v6, a2, a3, a4);
}

{
  unsigned int v6;
  unsigned int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  ValueMetadata **v15;
  long long v16;
  long long v17;
  long long v19;
  unsigned char v20[32];
  long long v21;
  long long v22;
  int v23;
  uint64_t v24;

  unsigned int v6 = a1;
  long long v24 = *MEMORY[0x263EF8340];
  long long v8 = *(_DWORD *)(a2 + 8);
  long long v9 = *(void *)(a2 + 16);
  uint64_t v11 = *(_DWORD *)(a2 + 24);
  uint64_t v10 = *(_DWORD *)(a2 + 28);
  uint64_t v12 = *(_DWORD *)(a2 + 36);
  if ((v12 & 0x20) == 0)
  {
    long long v13 = *(void *)(a2 + 48);
    long long v14 = *(void *)(v13 + 16);
    if (!v14)
    {
LABEL_6:
      long long v16 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v20[16] = *(_OWORD *)(a2 + 32);
      int v21 = v16;
      long long v22 = *(_OWORD *)(a2 + 64);
      long long v23 = *(_DWORD *)(a2 + 80);
      long long v17 = *(_OWORD *)(a2 + 16);
      long long v19 = *(_OWORD *)a2;
      *(_OWORD *)long long v20 = v17;
      return ((uint64_t (*)(uint64_t, long long *))a3)(a1, &v19);
    }
    uint64_t v15 = (ValueMetadata **)(v13 + 32);
    while (*v15 != &type metadata for DisplayList.Key)
    {
      v15 += 2;
      if (!--v14) {
        goto LABEL_6;
      }
    }
  }
  if ((v12 & 1) == 0)
  {
    swift_beginAccess();
    *(void *)&long long v19 = __PAIR64__(*(_DWORD *)(v9 + 16), v6);
    *((void *)&v19 + 1) = __PAIR64__(v8, v11);
    *(_DWORD *)long long v20 = v10;
    memset(&v20[4], 0, 24);
    unsigned char v20[28] = 1;
    *(void *)&int v21 = 0;
    DWORD2(v21) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ColorBox<Color.OpacityColor>(0, &lazy cache variable for type metadata for AnimatableAttribute<_ColorMonochromeEffect._Resolved>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ColorMonochromeEffect._Resolved and conformance _ColorMonochromeEffect._Resolved, (uint64_t)&type metadata for _ColorMonochromeEffect._Resolved, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<_ColorMonochromeEffect._Resolved> and conformance AnimatableAttribute<A>();
    unsigned int v6 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    AGGraphSetFlags();
  }
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(v6, a2, a3, a4);
}

{
  unsigned int v6;
  unsigned int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  ValueMetadata **v15;
  long long v16;
  long long v17;
  long long v19;
  unsigned char v20[32];
  long long v21;
  long long v22;
  int v23;
  uint64_t v24;

  unsigned int v6 = a1;
  long long v24 = *MEMORY[0x263EF8340];
  long long v8 = *(_DWORD *)(a2 + 8);
  long long v9 = *(void *)(a2 + 16);
  uint64_t v11 = *(_DWORD *)(a2 + 24);
  uint64_t v10 = *(_DWORD *)(a2 + 28);
  uint64_t v12 = *(_DWORD *)(a2 + 36);
  if ((v12 & 0x20) == 0)
  {
    long long v13 = *(void *)(a2 + 48);
    long long v14 = *(void *)(v13 + 16);
    if (!v14)
    {
LABEL_6:
      long long v16 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v20[16] = *(_OWORD *)(a2 + 32);
      int v21 = v16;
      long long v22 = *(_OWORD *)(a2 + 64);
      long long v23 = *(_DWORD *)(a2 + 80);
      long long v17 = *(_OWORD *)(a2 + 16);
      long long v19 = *(_OWORD *)a2;
      *(_OWORD *)long long v20 = v17;
      return ((uint64_t (*)(uint64_t, long long *))a3)(a1, &v19);
    }
    uint64_t v15 = (ValueMetadata **)(v13 + 32);
    while (*v15 != &type metadata for DisplayList.Key)
    {
      v15 += 2;
      if (!--v14) {
        goto LABEL_6;
      }
    }
  }
  if ((v12 & 1) == 0)
  {
    swift_beginAccess();
    *(void *)&long long v19 = __PAIR64__(*(_DWORD *)(v9 + 16), v6);
    *((void *)&v19 + 1) = __PAIR64__(v8, v11);
    *(_DWORD *)long long v20 = v10;
    *(_OWORD *)&v20[4] = 0uLL;
    v20[20] = 1;
    *(void *)&v20[24] = 0;
    LODWORD(v21) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ColorBox<Color.OpacityColor>(0, &lazy cache variable for type metadata for AnimatableAttribute<_ColorMultiplyEffect._Resolved>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ColorMultiplyEffect._Resolved and conformance _ColorMultiplyEffect._Resolved, (uint64_t)&type metadata for _ColorMultiplyEffect._Resolved, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<_ColorMultiplyEffect._Resolved> and conformance AnimatableAttribute<A>();
    unsigned int v6 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    AGGraphSetFlags();
  }
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(v6, a2, a3, a4);
}

{
  unsigned int v6;
  unsigned int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  ValueMetadata **v15;
  long long v16;
  long long v17;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  int v24;
  uint64_t v25;

  unsigned int v6 = a1;
  uint64_t v25 = *MEMORY[0x263EF8340];
  long long v8 = *(_DWORD *)(a2 + 8);
  long long v9 = *(void *)(a2 + 16);
  uint64_t v11 = *(_DWORD *)(a2 + 24);
  uint64_t v10 = *(_DWORD *)(a2 + 28);
  uint64_t v12 = *(_DWORD *)(a2 + 36);
  if ((v12 & 0x20) == 0)
  {
    long long v13 = *(void *)(a2 + 48);
    long long v14 = *(void *)(v13 + 16);
    if (!v14)
    {
LABEL_6:
      long long v16 = *(_OWORD *)(a2 + 48);
      int v21 = *(_OWORD *)(a2 + 32);
      long long v22 = v16;
      long long v23 = *(_OWORD *)(a2 + 64);
      long long v24 = *(_DWORD *)(a2 + 80);
      long long v17 = *(_OWORD *)(a2 + 16);
      long long v19 = *(_OWORD *)a2;
      long long v20 = v17;
      return ((uint64_t (*)(uint64_t, long long *))a3)(a1, &v19);
    }
    uint64_t v15 = (ValueMetadata **)(v13 + 32);
    while (*v15 != &type metadata for DisplayList.Key)
    {
      v15 += 2;
      if (!--v14) {
        goto LABEL_6;
      }
    }
  }
  if ((v12 & 1) == 0)
  {
    swift_beginAccess();
    *(void *)&long long v19 = __PAIR64__(*(_DWORD *)(v9 + 16), v6);
    *((void *)&v19 + 1) = __PAIR64__(v8, v11);
    LODWORD(v20) = v10;
    *((void *)&v20 + 1) = 0;
    LOBYTE(v21) = 1;
    *((void *)&v21 + 1) = 0;
    LODWORD(v22) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for AnimatableAttribute<_OpacityEffect>(0, &lazy cache variable for type metadata for AnimatableAttribute<_HueRotationEffect>, (uint64_t)&type metadata for _HueRotationEffect, (uint64_t)&protocol witness table for _HueRotationEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<_HueRotationEffect> and conformance AnimatableAttribute<A>();
    unsigned int v6 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    AGGraphSetFlags();
  }
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(v6, a2, a3, a4);
}

{
  unsigned int v6;
  unsigned int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  ValueMetadata **v15;
  long long v16;
  long long v17;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  int v24;
  uint64_t v25;

  unsigned int v6 = a1;
  uint64_t v25 = *MEMORY[0x263EF8340];
  long long v8 = *(_DWORD *)(a2 + 8);
  long long v9 = *(void *)(a2 + 16);
  uint64_t v11 = *(_DWORD *)(a2 + 24);
  uint64_t v10 = *(_DWORD *)(a2 + 28);
  uint64_t v12 = *(_DWORD *)(a2 + 36);
  if ((v12 & 0x20) == 0)
  {
    long long v13 = *(void *)(a2 + 48);
    long long v14 = *(void *)(v13 + 16);
    if (!v14)
    {
LABEL_6:
      long long v16 = *(_OWORD *)(a2 + 48);
      int v21 = *(_OWORD *)(a2 + 32);
      long long v22 = v16;
      long long v23 = *(_OWORD *)(a2 + 64);
      long long v24 = *(_DWORD *)(a2 + 80);
      long long v17 = *(_OWORD *)(a2 + 16);
      long long v19 = *(_OWORD *)a2;
      long long v20 = v17;
      return ((uint64_t (*)(uint64_t, long long *))a3)(a1, &v19);
    }
    uint64_t v15 = (ValueMetadata **)(v13 + 32);
    while (*v15 != &type metadata for DisplayList.Key)
    {
      v15 += 2;
      if (!--v14) {
        goto LABEL_6;
      }
    }
  }
  if ((v12 & 1) == 0)
  {
    swift_beginAccess();
    *(void *)&long long v19 = __PAIR64__(*(_DWORD *)(v9 + 16), v6);
    *((void *)&v19 + 1) = __PAIR64__(v8, v11);
    LODWORD(v20) = v10;
    *((void *)&v20 + 1) = 0;
    LOBYTE(v21) = 1;
    *((void *)&v21 + 1) = 0;
    LODWORD(v22) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for AnimatableAttribute<_OpacityEffect>(0, &lazy cache variable for type metadata for AnimatableAttribute<_SaturationEffect>, (uint64_t)&type metadata for _SaturationEffect, (uint64_t)&protocol witness table for _SaturationEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<_SaturationEffect> and conformance AnimatableAttribute<A>();
    unsigned int v6 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    AGGraphSetFlags();
  }
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(v6, a2, a3, a4);
}

{
  unsigned int v6;
  unsigned int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  ValueMetadata **v15;
  long long v16;
  long long v17;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  int v24;
  uint64_t v25;

  unsigned int v6 = a1;
  uint64_t v25 = *MEMORY[0x263EF8340];
  long long v8 = *(_DWORD *)(a2 + 8);
  long long v9 = *(void *)(a2 + 16);
  uint64_t v11 = *(_DWORD *)(a2 + 24);
  uint64_t v10 = *(_DWORD *)(a2 + 28);
  uint64_t v12 = *(_DWORD *)(a2 + 36);
  if ((v12 & 0x20) == 0)
  {
    long long v13 = *(void *)(a2 + 48);
    long long v14 = *(void *)(v13 + 16);
    if (!v14)
    {
LABEL_6:
      long long v16 = *(_OWORD *)(a2 + 48);
      int v21 = *(_OWORD *)(a2 + 32);
      long long v22 = v16;
      long long v23 = *(_OWORD *)(a2 + 64);
      long long v24 = *(_DWORD *)(a2 + 80);
      long long v17 = *(_OWORD *)(a2 + 16);
      long long v19 = *(_OWORD *)a2;
      long long v20 = v17;
      return ((uint64_t (*)(uint64_t, long long *))a3)(a1, &v19);
    }
    uint64_t v15 = (ValueMetadata **)(v13 + 32);
    while (*v15 != &type metadata for DisplayList.Key)
    {
      v15 += 2;
      if (!--v14) {
        goto LABEL_6;
      }
    }
  }
  if ((v12 & 1) == 0)
  {
    swift_beginAccess();
    *(void *)&long long v19 = __PAIR64__(*(_DWORD *)(v9 + 16), v6);
    *((void *)&v19 + 1) = __PAIR64__(v8, v11);
    LODWORD(v20) = v10;
    *((void *)&v20 + 1) = 0;
    LOBYTE(v21) = 1;
    *((void *)&v21 + 1) = 0;
    LODWORD(v22) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for AnimatableAttribute<_OpacityEffect>(0, &lazy cache variable for type metadata for AnimatableAttribute<_BrightnessEffect>, (uint64_t)&type metadata for _BrightnessEffect, (uint64_t)&protocol witness table for _BrightnessEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<_BrightnessEffect> and conformance AnimatableAttribute<A>();
    unsigned int v6 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    AGGraphSetFlags();
  }
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(v6, a2, a3, a4);
}

{
  unsigned int v6;
  unsigned int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  ValueMetadata **v15;
  long long v16;
  long long v17;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  int v24;
  uint64_t v25;

  unsigned int v6 = a1;
  uint64_t v25 = *MEMORY[0x263EF8340];
  long long v8 = *(_DWORD *)(a2 + 8);
  long long v9 = *(void *)(a2 + 16);
  uint64_t v11 = *(_DWORD *)(a2 + 24);
  uint64_t v10 = *(_DWORD *)(a2 + 28);
  uint64_t v12 = *(_DWORD *)(a2 + 36);
  if ((v12 & 0x20) == 0)
  {
    long long v13 = *(void *)(a2 + 48);
    long long v14 = *(void *)(v13 + 16);
    if (!v14)
    {
LABEL_6:
      long long v16 = *(_OWORD *)(a2 + 48);
      int v21 = *(_OWORD *)(a2 + 32);
      long long v22 = v16;
      long long v23 = *(_OWORD *)(a2 + 64);
      long long v24 = *(_DWORD *)(a2 + 80);
      long long v17 = *(_OWORD *)(a2 + 16);
      long long v19 = *(_OWORD *)a2;
      long long v20 = v17;
      return ((uint64_t (*)(uint64_t, long long *))a3)(a1, &v19);
    }
    uint64_t v15 = (ValueMetadata **)(v13 + 32);
    while (*v15 != &type metadata for DisplayList.Key)
    {
      v15 += 2;
      if (!--v14) {
        goto LABEL_6;
      }
    }
  }
  if ((v12 & 1) == 0)
  {
    swift_beginAccess();
    *(void *)&long long v19 = __PAIR64__(*(_DWORD *)(v9 + 16), v6);
    *((void *)&v19 + 1) = __PAIR64__(v8, v11);
    LODWORD(v20) = v10;
    *((void *)&v20 + 1) = 0;
    LOBYTE(v21) = 1;
    *((void *)&v21 + 1) = 0;
    LODWORD(v22) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ColorBox<Color.OpacityColor>(0, &lazy cache variable for type metadata for AnimatableAttribute<VariableBlurStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type VariableBlurStyle and conformance VariableBlurStyle, (uint64_t)&type metadata for VariableBlurStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<VariableBlurStyle> and conformance AnimatableAttribute<A>();
    unsigned int v6 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    AGGraphSetFlags();
  }
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(v6, a2, a3, a4);
}

{
  unsigned int v6;
  unsigned int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  ValueMetadata **v15;
  long long v16;
  long long v17;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  int v24;
  uint64_t v25;

  unsigned int v6 = a1;
  uint64_t v25 = *MEMORY[0x263EF8340];
  long long v8 = *(_DWORD *)(a2 + 8);
  long long v9 = *(void *)(a2 + 16);
  uint64_t v11 = *(_DWORD *)(a2 + 24);
  uint64_t v10 = *(_DWORD *)(a2 + 28);
  uint64_t v12 = *(_DWORD *)(a2 + 36);
  if ((v12 & 0x20) == 0)
  {
    long long v13 = *(void *)(a2 + 48);
    long long v14 = *(void *)(v13 + 16);
    if (!v14)
    {
LABEL_6:
      long long v16 = *(_OWORD *)(a2 + 48);
      int v21 = *(_OWORD *)(a2 + 32);
      long long v22 = v16;
      long long v23 = *(_OWORD *)(a2 + 64);
      long long v24 = *(_DWORD *)(a2 + 80);
      long long v17 = *(_OWORD *)(a2 + 16);
      long long v19 = *(_OWORD *)a2;
      long long v20 = v17;
      return ((uint64_t (*)(uint64_t, long long *))a3)(a1, &v19);
    }
    uint64_t v15 = (ValueMetadata **)(v13 + 32);
    while (*v15 != &type metadata for DisplayList.Key)
    {
      v15 += 2;
      if (!--v14) {
        goto LABEL_6;
      }
    }
  }
  if ((v12 & 1) == 0)
  {
    swift_beginAccess();
    *(void *)&long long v19 = __PAIR64__(*(_DWORD *)(v9 + 16), v6);
    *((void *)&v19 + 1) = __PAIR64__(v8, v11);
    LODWORD(v20) = v10;
    *((void *)&v20 + 1) = 0;
    LOBYTE(v21) = 1;
    *((void *)&v21 + 1) = 0;
    LODWORD(v22) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for AnimatableAttribute<_OpacityEffect>(0, &lazy cache variable for type metadata for AnimatableAttribute<_GrayscaleEffect>, (uint64_t)&type metadata for _GrayscaleEffect, (uint64_t)&protocol witness table for _GrayscaleEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<_GrayscaleEffect> and conformance AnimatableAttribute<A>();
    unsigned int v6 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    AGGraphSetFlags();
  }
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(v6, a2, a3, a4);
}

{
  unsigned int v6;
  unsigned int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  ValueMetadata **v15;
  long long v16;
  long long v17;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  int v24;
  uint64_t v25;

  unsigned int v6 = a1;
  uint64_t v25 = *MEMORY[0x263EF8340];
  long long v8 = *(_DWORD *)(a2 + 8);
  long long v9 = *(void *)(a2 + 16);
  uint64_t v11 = *(_DWORD *)(a2 + 24);
  uint64_t v10 = *(_DWORD *)(a2 + 28);
  uint64_t v12 = *(_DWORD *)(a2 + 36);
  if ((v12 & 0x20) == 0)
  {
    long long v13 = *(void *)(a2 + 48);
    long long v14 = *(void *)(v13 + 16);
    if (!v14)
    {
LABEL_6:
      long long v16 = *(_OWORD *)(a2 + 48);
      int v21 = *(_OWORD *)(a2 + 32);
      long long v22 = v16;
      long long v23 = *(_OWORD *)(a2 + 64);
      long long v24 = *(_DWORD *)(a2 + 80);
      long long v17 = *(_OWORD *)(a2 + 16);
      long long v19 = *(_OWORD *)a2;
      long long v20 = v17;
      return ((uint64_t (*)(uint64_t, long long *))a3)(a1, &v19);
    }
    uint64_t v15 = (ValueMetadata **)(v13 + 32);
    while (*v15 != &type metadata for DisplayList.Key)
    {
      v15 += 2;
      if (!--v14) {
        goto LABEL_6;
      }
    }
  }
  if ((v12 & 1) == 0)
  {
    swift_beginAccess();
    *(void *)&long long v19 = __PAIR64__(*(_DWORD *)(v9 + 16), v6);
    *((void *)&v19 + 1) = __PAIR64__(v8, v11);
    LODWORD(v20) = v10;
    *((void *)&v20 + 1) = 0;
    LOBYTE(v21) = 1;
    *((void *)&v21 + 1) = 0;
    LODWORD(v22) = 0;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for AnimatableAttribute<_OpacityEffect>(0, &lazy cache variable for type metadata for AnimatableAttribute<_ContrastEffect>, (uint64_t)&type metadata for _ContrastEffect, (uint64_t)&protocol witness table for _ContrastEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<_ContrastEffect> and conformance AnimatableAttribute<A>();
    unsigned int v6 = Attribute.init<A>(body:value:flags:update:)();
    AGGraphGetFlags();
    AGGraphSetFlags();
  }
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(v6, a2, a3, a4);
}

void type metadata accessor for AnimatableAttribute<_OpacityEffect>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)@<X0>(unsigned int a1@<W0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, long long *)@<X2>, void *a4@<X8>)
{
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(a1, a2, a3, (void (*)(uint64_t))protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase, &lazy cache variable for type metadata for RendererEffectDisplayList<OpacityRendererEffect>, a4, &lazy protocol witness table cache variable for type RendererEffectDisplayList<OpacityRendererEffect> and conformance RendererEffectDisplayList<A>);
}

{
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(a1, a2, a3, (void (*)(uint64_t))protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase, (unint64_t *)&lazy cache variable for type metadata for RendererEffectDisplayList<_BlendModeEffect>, a4, &lazy protocol witness table cache variable for type RendererEffectDisplayList<_BlendModeEffect> and conformance RendererEffectDisplayList<A>);
}

{
  void *v5;
  long long v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float32x2_t v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  long long v25;
  long long v26;
  unsigned int v27;
  uint64_t KeyPath;
  int v29;
  uint64_t v30;
  long long v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  unint64_t v34;
  unint64_t v35;
  const float *v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  ValueMetadata **v44;
  uint64_t v45;
  unsigned int *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  long long v53;
  long long v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  long long v58;
  unsigned __int8 v59;
  unsigned __int8 v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  long long v70;
  long long v71;
  unsigned int v72;
  uint64_t v73;
  int v74;
  unsigned __int8 v75;
  unsigned __int8 v76;
  int v77;
  unint64_t v78;
  unint64_t v79;
  long long v80;
  unint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  unsigned int v87;
  int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  uint64_t result;
  void (*v94)(long long *, void);
  int v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  unsigned int v99;
  uint64_t v100;
  void *v102;
  uint64_t v104;
  int v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int v120;
  Swift::UInt32 v122;
  __int16 v123;
  unsigned int OffsetAttribute2;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  long long v128;
  long long v129;
  unsigned __int8 v130;
  unsigned int v131;
  unsigned __int8 v132;
  unsigned int v133;
  unsigned __int8 v134;
  long long v135;
  long long v136;
  long long v137;
  long long v138;
  unsigned char v139[20];
  long long v140;
  long long v141;
  long long v142;
  uint64_t v143;

  long long v5 = a4;
  char v143 = *MEMORY[0x263EF8340];
  unint64_t v6 = *(_OWORD *)(a2 + 32);
  char v141 = *(_OWORD *)(a2 + 16);
  unint64_t v142 = v6;
  char v140 = *(_OWORD *)a2;
  uint64_t v7 = *(_DWORD *)(a2 + 72);
  long long v8 = *(void *)a2;
  uint64_t v111 = *(_DWORD *)(a2 + 8);
  long long v9 = *(void *)(a2 + 16);
  uint64_t v10 = *(void *)(a2 + 24);
  uint64_t v117 = *(_DWORD *)(a2 + 36);
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v12 = *(void *)(a2 + 48);
  int v114 = *(_DWORD *)(a2 + 56);
  long long v13 = *(void *)(a2 + 76);
  uint64_t v123 = WORD2(v6);
  if ((BYTE4(v6) & 0x20) == 0)
  {
    long long v14 = *(float32x2_t *)(a2 + 64);
    uint64_t v15 = *(_DWORD *)(a2 + 60);
    long long v16 = v142;
    outlined retain of _ViewInputs(a2);
    long long v17 = v7;
    goto LABEL_16;
  }
  double v99 = *(_DWORD *)(a2 + 72);
  uint64_t v109 = *(void *)(a2 + 40);
  BOOL v110 = *(void *)(a2 + 16);
  BOOL v100 = *(void *)a2;
  double v98 = *(_DWORD *)(a2 + 32);
  long long v18 = v141;
  swift_beginAccess();
  long long v19 = *(_DWORD *)(a2 + 8);
  uint64_t v104 = *(void *)(a2 + 16);
  BOOL v106 = *(void *)a2;
  long long v20 = *(_DWORD *)(a2 + 24);
  int v21 = *(void *)(a2 + 32);
  long long v22 = *(void *)(a2 + 40);
  long long v23 = *(void *)(a2 + 48);
  long long v24 = *(void *)(a2 + 56);
  unsigned __int8 v96 = *(void *)(a2 + 72);
  double v97 = *(void *)(a2 + 64);
  uint64_t v95 = *(_DWORD *)(a2 + 80);
  uint64_t v25 = *(_OWORD *)(a2 + 48);
  uint64_t v137 = *(_OWORD *)(a2 + 32);
  char v138 = v25;
  *(_OWORD *)uint64_t v139 = *(_OWORD *)(a2 + 64);
  *(_DWORD *)&v139[16] = *(_DWORD *)(a2 + 80);
  long long v26 = *(_OWORD *)(a2 + 16);
  double v135 = *(_OWORD *)a2;
  int v136 = v26;
  outlined retain of _ViewInputs(a2);
  outlined retain of _ViewInputs(a2);
  int v27 = _ViewInputs.geometryTransaction()();
  uint64_t KeyPath = swift_getKeyPath();
  long long v29 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
  swift_release();
  if ((*(unsigned char *)(v141 + 81) & 1) != 0
    || v97 != *(_DWORD *)(v141 + 32)
    || v96 != *(_DWORD *)(v141 + 36)
    || v29 != *(_DWORD *)(v141 + 40)
    || v19 != *(_DWORD *)(v141 + 44)
    || v27 != *(_DWORD *)(v141 + 48)
    || v20 != *(_DWORD *)(v141 + 52))
  {
    *(void *)&double v135 = v106;
    DWORD2(v135) = v19;
    *(void *)&int v136 = v104;
    *((void *)&v136 + 1) = __PAIR64__(v27, v20);
    *(void *)&uint64_t v137 = v21;
    *((void *)&v137 + 1) = v22;
    *(void *)&char v138 = v23;
    *((void *)&v138 + 1) = v24;
    *(void *)uint64_t v139 = v97;
    *(void *)&v139[8] = v96;
    *(_DWORD *)&v139[16] = v95;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v135, v29, (uint64_t)&v128);
    uint64_t v31 = v129;
    uint64_t v32 = v130;
    uint64_t v33 = v134;
    char v34 = v130 | ((unint64_t)v131 << 32);
    uint64_t v35 = v132 | ((unint64_t)v133 << 32);
    *(_OWORD *)(v18 + 32) = v128;
    *(_OWORD *)(v18 + 48) = v31;
    *(void *)(v18 + 64) = v34;
    *(void *)(v18 + 72) = v35;
    *(_WORD *)(v18 + 80) = v33;
    if ((v32 & 1) == 0)
    {
      long long v30 = HIDWORD(*((void *)&v31 + 1));
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (*(unsigned char *)(v141 + 64))
  {
LABEL_13:
    LODWORD(v30) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v18 + 60) = v30;
    *(unsigned char *)(v18 + 64) = 0;
    goto LABEL_15;
  }
  LODWORD(v30) = *(_DWORD *)(v141 + 60);
LABEL_15:
  long long v8 = v100;
  long long v5 = a4;
  uint64_t v11 = v109;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_endAccess();
  *(void *)&double v135 = __PAIR64__(*(_DWORD *)(a2 + 60), v30);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type ResetPositionTransform and conformance ResetPositionTransform();
  uint64_t v15 = Attribute.init<A>(body:value:flags:update:)();
  uint64_t v36 = (const float *)(specialized static ViewGraph.current.getter() + 248);
  long long v14 = vld1_dup_f32(v36);
  swift_release();
  uint64_t v37 = *(_DWORD *)(a2 + 64);
  uint64_t v38 = swift_getKeyPath();
  swift_beginAccess();
  outlined retain of _GraphInputs((uint64_t)&v140);
  uint64_t v39 = specialized CachedEnvironment.attribute<A>(keyPath:)(v38);
  swift_endAccess();
  outlined release of _GraphInputs((uint64_t)&v140);
  swift_release();
  *(void *)&double v135 = __PAIR64__(v99, v37);
  uint64_t v7 = v99;
  DWORD2(v135) = v39;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type RoundedSize and conformance RoundedSize();
  long long v17 = Attribute.init<A>(body:value:flags:update:)();
  long long v16 = v98 | 0x1C;
  long long v9 = v110;
LABEL_16:
  *(void *)&double v135 = v8;
  DWORD2(v135) = v111;
  *(void *)&int v136 = v9;
  *((void *)&v136 + 1) = v10;
  *(void *)&uint64_t v137 = __PAIR64__(v117, v16);
  *((void *)&v137 + 1) = v11;
  *(void *)&char v138 = v12;
  *((void *)&v138 + 1) = __PAIR64__(v15, v114);
  *(float32x2_t *)uint64_t v139 = v14;
  *(_DWORD *)&v139[8] = v17;
  *(void *)&v139[12] = v13;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  char v40 = swift_bridgeObjectRetain();
  a3(&v126, v40, &v135);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  unsigned __int8 v41 = *(void *)(a2 + 48);
  uint64_t v42 = *(void *)(v41 + 16);
  uint64_t v43 = v123;
  if (!v42)
  {
LABEL_59:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
    *long long v5 = v126;
    v5[1] = v127;
    return result;
  }
  uint64_t v44 = (ValueMetadata **)(v41 + 32);
  while (*v44 != &type metadata for DisplayList.Key)
  {
    v44 += 2;
    if (!--v42) {
      goto LABEL_59;
    }
  }
  char v122 = ++lastIdentity;
  if ((v123 & 0x100) == 0)
  {
LABEL_22:
    unsigned __int8 v45 = v141;
    uint64_t v46 = (unsigned int *)(v141 + 16);
    swift_beginAccess();
    if ((v43 & 0x20) == 0)
    {
      OffsetAttribute2 = *(_DWORD *)(a2 + 64);
LABEL_49:
      swift_endAccess();
      uint64_t v120 = *v46;
      *(void *)&double v135 = v126;
      DWORD2(v135) = v127;
      unsigned int v81 = PreferencesOutputs.subscript.getter((uint64_t)&type metadata for DisplayList.Key);
      if ((v81 & 0x100000000) != 0) {
        uint64_t v82 = *MEMORY[0x263F288F8];
      }
      else {
        uint64_t v82 = v81;
      }
      unint64_t v83 = v140;
      *(void *)&unint64_t v128 = v140;
      outlined retain of _ViewInputs(a2);
      outlined retain of _GraphInputs((uint64_t)&v140);
      outlined retain of ViewTransform((uint64_t)&v128);
      uint64_t v84 = specialized find<A>(_:key:)(v83);
      if (v84) {
        uint64_t v85 = *(unsigned char *)(v84 + 72);
      }
      else {
        uint64_t v85 = 0;
      }
      outlined release of ViewTransform((uint64_t)&v128);
      outlined release of _GraphInputs((uint64_t)&v140);
      outlined release of _ViewInputs(a2);
      outlined retain of _ViewInputs(a2);
      outlined retain of _GraphInputs((uint64_t)&v140);
      outlined retain of ViewTransform((uint64_t)&v128);
      char v86 = specialized find<A>(_:key:)(v83);
      double v87 = v7;
      if (v86) {
        uint64_t v88 = *(_DWORD *)(v86 + 72);
      }
      else {
        uint64_t v88 = 0;
      }
      unint64_t v89 = *(_DWORD *)(a2 + 60);
      uint64_t v90 = *(_DWORD *)(a2 + 68);
      double v91 = *(_DWORD *)(a2 + 76);
      outlined release of ViewTransform((uint64_t)&v128);
      outlined release of _GraphInputs((uint64_t)&v140);
      outlined release of _ViewInputs(a2);
      *(void *)&double v135 = __PAIR64__(a1, v122);
      *((void *)&v135 + 1) = __PAIR64__(v87, OffsetAttribute2);
      *(void *)&int v136 = __PAIR64__(v90, v89);
      *((void *)&v136 + 1) = __PAIR64__(v91, v120);
      LODWORD(v137) = v82;
      BYTE4(v137) = v85;
      DWORD2(v137) = 0;
      HIDWORD(v137) = v88;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for RendererEffectDisplayList<GraphicsBlendModeEffect>(0, &lazy cache variable for type metadata for RendererEffectDisplayList<_GeometryGroupEffect>);
      lazy protocol witness table accessor for type RendererEffectDisplayList<GraphicsBlendModeEffect> and conformance RendererEffectDisplayList<A>(&lazy protocol witness table cache variable for type RendererEffectDisplayList<_GeometryGroupEffect> and conformance RendererEffectDisplayList<A>, &lazy cache variable for type metadata for RendererEffectDisplayList<_GeometryGroupEffect>);
      uint64_t v92 = Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v135) = 0;
      PreferencesOutputs.subscript.setter(v92, &type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key);
      goto LABEL_59;
    }
    uint64_t v102 = v5;
    char v47 = *(void *)a2;
    int v48 = *(_DWORD *)(a2 + 8);
    uint64_t v49 = *(void *)(a2 + 16);
    char v50 = *(_DWORD *)(a2 + 24);
    uint64_t v51 = *(void *)(a2 + 32);
    uint64_t v115 = *(void *)(a2 + 48);
    uint64_t v118 = *(void *)(a2 + 40);
    uint64_t v52 = *(void *)(a2 + 56);
    uint64_t v125 = *(void *)(a2 + 64);
    uint64_t v112 = *(void *)(a2 + 72);
    uint64_t v107 = *(_DWORD *)(a2 + 80);
    uint64_t v53 = *(_OWORD *)(a2 + 48);
    uint64_t v137 = *(_OWORD *)(a2 + 32);
    char v138 = v53;
    *(_OWORD *)uint64_t v139 = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v139[16] = *(_DWORD *)(a2 + 80);
    uint64_t v54 = *(_OWORD *)(a2 + 16);
    double v135 = *(_OWORD *)a2;
    int v136 = v54;
    outlined retain of _ViewInputs(a2);
    uint64_t v55 = _ViewInputs.geometryTransaction()();
    uint64_t v56 = swift_getKeyPath();
    uint64_t v57 = specialized CachedEnvironment.attribute<A>(keyPath:)(v56);
    swift_release();
    if ((*(unsigned char *)(v45 + 81) & 1) == 0
      && v125 == *(_DWORD *)(v45 + 32)
      && v112 == *(_DWORD *)(v45 + 36)
      && v57 == *(_DWORD *)(v45 + 40)
      && v48 == *(_DWORD *)(v45 + 44)
      && v55 == *(_DWORD *)(v45 + 48)
      && v50 == *(_DWORD *)(v45 + 52))
    {
      if (*(unsigned char *)(v45 + 64)) {
        goto LABEL_34;
      }
      LODWORD(v63) = *(_DWORD *)(v45 + 60);
    }
    else
    {
      *(void *)&double v135 = v47;
      DWORD2(v135) = v48;
      *(void *)&int v136 = v49;
      *((void *)&v136 + 1) = __PAIR64__(v55, v50);
      *(void *)&uint64_t v137 = v51;
      *((void *)&v137 + 1) = v118;
      *(void *)&char v138 = v115;
      *((void *)&v138 + 1) = v52;
      *(void *)uint64_t v139 = v125;
      *(void *)&v139[8] = v112;
      *(_DWORD *)&v139[16] = v107;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v135, v57, (uint64_t)&v128);
      int v58 = v129;
      __int16 v59 = v130;
      uint64_t v60 = v134;
      uint64_t v61 = v130 | ((unint64_t)v131 << 32);
      uint64_t v62 = v132 | ((unint64_t)v133 << 32);
      *(_OWORD *)(v45 + 32) = v128;
      *(_OWORD *)(v45 + 48) = v58;
      *(void *)(v45 + 64) = v61;
      *(void *)(v45 + 72) = v62;
      *(_WORD *)(v45 + 80) = v60;
      if (v59)
      {
LABEL_34:
        OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v45 + 60) = OffsetAttribute2;
        *(unsigned char *)(v45 + 64) = 0;
LABEL_37:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        uint64_t v64 = *(_DWORD *)(a2 + 8);
        double v116 = *(void *)(a2 + 16);
        uint64_t v119 = *(void *)a2;
        uint64_t v65 = *(_DWORD *)(a2 + 24);
        uint64_t v66 = *(void *)(a2 + 32);
        char v67 = *(void *)(a2 + 40);
        char v68 = *(void *)(a2 + 48);
        unsigned __int8 v69 = *(void *)(a2 + 56);
        uint64_t v113 = *(void *)(a2 + 64);
        uint64_t v108 = *(void *)(a2 + 72);
        uint64_t v105 = *(_DWORD *)(a2 + 80);
        unsigned __int8 v70 = *(_OWORD *)(a2 + 48);
        uint64_t v137 = *(_OWORD *)(a2 + 32);
        char v138 = v70;
        *(_OWORD *)uint64_t v139 = *(_OWORD *)(a2 + 64);
        *(_DWORD *)&v139[16] = *(_DWORD *)(a2 + 80);
        uint64_t v71 = *(_OWORD *)(a2 + 16);
        double v135 = *(_OWORD *)a2;
        int v136 = v71;
        outlined retain of _ViewInputs(a2);
        uint64_t v72 = _ViewInputs.geometryTransaction()();
        uint64_t v73 = swift_getKeyPath();
        uint64_t v74 = specialized CachedEnvironment.attribute<A>(keyPath:)(v73);
        swift_release();
        if ((*(unsigned char *)(v45 + 81) & 1) == 0
          && v113 == *(_DWORD *)(v45 + 32)
          && v108 == *(_DWORD *)(v45 + 36)
          && v74 == *(_DWORD *)(v45 + 40)
          && v64 == *(_DWORD *)(v45 + 44)
          && v72 == *(_DWORD *)(v45 + 48)
          && v65 == *(_DWORD *)(v45 + 52))
        {
          long long v5 = v102;
          if ((*(unsigned char *)(v45 + 72) & 1) == 0)
          {
            uint64_t v77 = *(_DWORD *)(v45 + 68);
            goto LABEL_48;
          }
        }
        else
        {
          *(void *)&double v135 = v119;
          DWORD2(v135) = v64;
          *(void *)&int v136 = v116;
          *((void *)&v136 + 1) = __PAIR64__(v72, v65);
          *(void *)&uint64_t v137 = v66;
          *((void *)&v137 + 1) = v67;
          *(void *)&char v138 = v68;
          *((void *)&v138 + 1) = v69;
          *(void *)uint64_t v139 = v113;
          *(void *)&v139[8] = v108;
          *(_DWORD *)&v139[16] = v105;
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v135, v74, (uint64_t)&v128);
          uint64_t v75 = v132;
          uint64_t v76 = v134;
          uint64_t v77 = v131;
          uint64_t v78 = v130 | ((unint64_t)v131 << 32);
          uint64_t v79 = v132 | ((unint64_t)v133 << 32);
          uint64_t v80 = v129;
          *(_OWORD *)(v45 + 32) = v128;
          *(_OWORD *)(v45 + 48) = v80;
          *(void *)(v45 + 64) = v78;
          *(void *)(v45 + 72) = v79;
          *(_WORD *)(v45 + 80) = v76;
          long long v5 = v102;
          if ((v75 & 1) == 0) {
            goto LABEL_48;
          }
        }
        uint64_t v77 = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v45 + 68) = v77;
        *(unsigned char *)(v45 + 72) = 0;
LABEL_48:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        uint64_t v7 = v77;
        goto LABEL_49;
      }
      uint64_t v63 = HIDWORD(*((void *)&v58 + 1));
    }
    OffsetAttribute2 = v63;
    goto LABEL_37;
  }
  outlined retain of _ViewInputs(a2);
  specialized _ViewInputs.subscript.getter();
  outlined release of _ViewInputs(a2);
  uint64_t result = AGWeakAttributeGetAttribute();
  if (result != *MEMORY[0x263F288F8])
  {
    LODWORD(v128) = v122;
    double v94 = (void (*)(long long *, void))Attribute<A>.subscript.modify();
    _DisplayList_StableIdentityScope.pushIdentity(_:)((Swift::UInt32 *)&v128);
    v94(&v135, 0);
    uint64_t v43 = v123;
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

{
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(a1, a2, a3, (void (*)(uint64_t))protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase, &lazy cache variable for type metadata for RendererEffectDisplayList<_CompositingGroupEffect>, a4, &lazy protocol witness table cache variable for type RendererEffectDisplayList<_CompositingGroupEffect> and conformance RendererEffectDisplayList<A>);
}

{
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(a1, a2, a3, (void (*)(uint64_t))protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase, &lazy cache variable for type metadata for RendererEffectDisplayList<_ForegroundLayerViewModifier>, a4, &lazy protocol witness table cache variable for type RendererEffectDisplayList<_ForegroundLayerViewModifier> and conformance RendererEffectDisplayList<A>);
}

{
  void (*v4)(uint64_t *__return_ptr, uint64_t, long long *);
  void *v6;
  long long v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  long long v23;
  long long v24;
  int v25;
  uint64_t KeyPath;
  int v27;
  long long v28;
  unsigned __int8 v29;
  unsigned __int8 v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  ValueMetadata **v36;
  int *v37;
  uint64_t v38;
  int *v39;
  unsigned int v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  long long v47;
  long long v48;
  int v49;
  uint64_t v50;
  int v51;
  long long v52;
  unsigned __int8 v53;
  unsigned __int8 v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  long long v64;
  long long v65;
  int v66;
  uint64_t v67;
  int v68;
  unsigned __int8 v69;
  unsigned __int8 v70;
  unint64_t v71;
  unint64_t v72;
  long long v73;
  int v74;
  unint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  int v81;
  int v82;
  int v83;
  unsigned int v84;
  uint64_t result;
  void (*v86)(long long *, void);
  int v87;
  uint64_t v88;
  uint64_t v89;
  __int16 v91;
  int v92;
  int v93;
  void *v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  long long v112;
  unsigned int OffsetAttribute2;
  uint64_t v114;
  int v115;
  Swift::UInt32 v116;
  uint64_t v117;
  uint64_t v118;
  long long v119;
  long long v120;
  unsigned __int8 v121;
  unsigned int v122;
  unsigned __int8 v123;
  unsigned int v124;
  unsigned __int8 v125;
  long long v126;
  unsigned char v127[32];
  long long v128;
  long long v129;
  int v130;
  long long v131;
  long long v132;
  long long v133;
  uint64_t v134;

  uint64_t v4 = a3;
  unint64_t v6 = a4;
  unint64_t v134 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(_OWORD *)(a2 + 32);
  double v132 = *(_OWORD *)(a2 + 16);
  double v133 = v7;
  uint64_t v131 = *(_OWORD *)a2;
  long long v8 = *(void *)a2;
  uint64_t v109 = *(_DWORD *)(a2 + 8);
  long long v9 = *(void *)(a2 + 16);
  uint64_t v112 = *(_OWORD *)(a2 + 24);
  uint64_t v10 = *(void *)(a2 + 40);
  uint64_t v11 = *(void *)(a2 + 48);
  uint64_t v12 = *(void *)(a2 + 56);
  LODWORD(v13) = *(_DWORD *)(a2 + 68);
  BOOL v106 = *(_DWORD *)(a2 + 64);
  long long v14 = *(void *)(a2 + 72);
  uint64_t v115 = *(_DWORD *)(a2 + 80);
  uint64_t v15 = WORD2(v7);
  double v93 = v13;
  if ((BYTE4(v7) & 0x20) == 0)
  {
    outlined retain of _ViewInputs(a2);
    goto LABEL_16;
  }
  double v91 = WORD2(v7);
  uint64_t v103 = *(void *)(a2 + 48);
  uint64_t v104 = *(void *)(a2 + 16);
  uint64_t v105 = *(void *)(a2 + 40);
  long long v16 = v132;
  swift_beginAccess();
  BOOL v100 = *(void *)a2;
  long long v17 = *(_DWORD *)(a2 + 8);
  double v97 = *(void *)(a2 + 16);
  long long v18 = *(_DWORD *)(a2 + 24);
  long long v19 = *(void *)(a2 + 32);
  long long v20 = *(void *)(a2 + 40);
  int v21 = *(void *)(a2 + 48);
  long long v22 = *(void *)(a2 + 56);
  uint64_t v88 = *(void *)(a2 + 72);
  unint64_t v89 = *(void *)(a2 + 64);
  double v87 = *(_DWORD *)(a2 + 80);
  long long v23 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v127[16] = *(_OWORD *)(a2 + 32);
  unint64_t v128 = v23;
  uint64_t v129 = *(_OWORD *)(a2 + 64);
  double v130 = *(_DWORD *)(a2 + 80);
  long long v24 = *(_OWORD *)(a2 + 16);
  uint64_t v126 = *(_OWORD *)a2;
  *(_OWORD *)uint64_t v127 = v24;
  outlined retain of _ViewInputs(a2);
  outlined retain of _ViewInputs(a2);
  uint64_t v25 = _ViewInputs.geometryTransaction()();
  uint64_t KeyPath = swift_getKeyPath();
  int v27 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
  swift_release();
  if ((*(unsigned char *)(v132 + 81) & 1) != 0
    || v89 != *(_DWORD *)(v132 + 32)
    || v88 != *(_DWORD *)(v132 + 36)
    || v27 != *(_DWORD *)(v132 + 40)
    || v17 != *(_DWORD *)(v132 + 44)
    || v25 != *(_DWORD *)(v132 + 48)
    || v18 != *(_DWORD *)(v132 + 52))
  {
    *(void *)&uint64_t v126 = v100;
    DWORD2(v126) = v17;
    *(void *)uint64_t v127 = v97;
    *(_DWORD *)&v127[8] = v18;
    *(_DWORD *)&v127[12] = v25;
    *(void *)&v127[16] = v19;
    *(void *)&v127[24] = v20;
    *(void *)&unint64_t v128 = v21;
    *((void *)&v128 + 1) = v22;
    *(void *)&uint64_t v129 = v89;
    *((void *)&v129 + 1) = v88;
    double v130 = v87;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v126, v27, (uint64_t)&v119);
    long long v28 = v120;
    long long v29 = v121;
    long long v30 = v125;
    uint64_t v31 = v121 | ((unint64_t)v122 << 32);
    uint64_t v32 = v123 | ((unint64_t)v124 << 32);
    *(_OWORD *)(v16 + 32) = v119;
    *(_OWORD *)(v16 + 48) = v28;
    *(void *)(v16 + 64) = v31;
    *(void *)(v16 + 72) = v32;
    *(_WORD *)(v16 + 80) = v30;
    if ((v29 & 1) == 0)
    {
      long long v13 = HIDWORD(*((void *)&v28 + 1));
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (*(unsigned char *)(v132 + 64))
  {
LABEL_13:
    LODWORD(v13) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v16 + 60) = v13;
    *(unsigned char *)(v16 + 64) = 0;
    goto LABEL_15;
  }
  LODWORD(v13) = *(_DWORD *)(v132 + 60);
LABEL_15:
  unint64_t v6 = a4;
  uint64_t v10 = v105;
  uint64_t v15 = v91;
  uint64_t v4 = a3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_endAccess();
  uint64_t v11 = v103;
  long long v9 = v104;
LABEL_16:
  *(void *)&uint64_t v126 = v8;
  DWORD2(v126) = v109;
  *(void *)uint64_t v127 = v9;
  *(_OWORD *)&v127[8] = v112;
  *(void *)&v127[24] = v10;
  *(void *)&unint64_t v128 = v11;
  *((void *)&v128 + 1) = v12;
  *(void *)&uint64_t v129 = __PAIR64__(v13, v106);
  *((void *)&v129 + 1) = v14;
  double v130 = v115;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v33 = swift_bridgeObjectRetain();
  v4(&v117, v33, &v126);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  char v34 = *(void *)(a2 + 48);
  uint64_t v35 = *(void *)(v34 + 16);
  if (!v35)
  {
LABEL_59:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
    *unint64_t v6 = v117;
    v6[1] = v118;
    return result;
  }
  uint64_t v36 = (ValueMetadata **)(v34 + 32);
  while (*v36 != &type metadata for DisplayList.Key)
  {
    v36 += 2;
    if (!--v35) {
      goto LABEL_59;
    }
  }
  double v116 = ++lastIdentity;
  uint64_t v37 = (int *)MEMORY[0x263F288F8];
  if ((v15 & 0x100) == 0)
  {
LABEL_22:
    uint64_t v38 = v132;
    uint64_t v39 = (int *)(v132 + 16);
    swift_beginAccess();
    if ((v15 & 0x20) == 0)
    {
      OffsetAttribute2 = *(_DWORD *)(a2 + 64);
      char v40 = *(_DWORD *)(a2 + 72);
LABEL_49:
      swift_endAccess();
      uint64_t v74 = *v39;
      *(void *)&uint64_t v126 = v117;
      DWORD2(v126) = v118;
      uint64_t v75 = PreferencesOutputs.subscript.getter((uint64_t)&type metadata for DisplayList.Key);
      if ((v75 & 0x100000000) != 0) {
        uint64_t v76 = *v37;
      }
      else {
        uint64_t v76 = v75;
      }
      uint64_t v77 = v131;
      *(void *)&uint64_t v119 = v131;
      outlined retain of _ViewInputs(a2);
      outlined retain of ViewTransform((uint64_t)&v119);
      outlined retain of _GraphInputs((uint64_t)&v131);
      uint64_t v78 = specialized find<A>(_:key:)(v77);
      if (v78) {
        uint64_t v79 = *(unsigned char *)(v78 + 72);
      }
      else {
        uint64_t v79 = 0;
      }
      outlined release of ViewTransform((uint64_t)&v119);
      outlined release of _GraphInputs((uint64_t)&v131);
      outlined release of _ViewInputs(a2);
      outlined retain of _ViewInputs(a2);
      outlined retain of ViewTransform((uint64_t)&v119);
      outlined retain of _GraphInputs((uint64_t)&v131);
      uint64_t v80 = specialized find<A>(_:key:)(v77);
      if (v80) {
        unsigned int v81 = *(_DWORD *)(v80 + 72);
      }
      else {
        unsigned int v81 = 0;
      }
      uint64_t v82 = *(_DWORD *)(a2 + 60);
      unint64_t v83 = *(_DWORD *)(a2 + 76);
      outlined release of ViewTransform((uint64_t)&v119);
      outlined release of _GraphInputs((uint64_t)&v131);
      outlined release of _ViewInputs(a2);
      *(void *)&uint64_t v126 = __PAIR64__(a1, v116);
      *((void *)&v126 + 1) = __PAIR64__(v40, OffsetAttribute2);
      *(_DWORD *)uint64_t v127 = v82;
      *(_DWORD *)&v127[4] = v93;
      *(_DWORD *)&v127[8] = v74;
      *(_DWORD *)&v127[12] = v83;
      *(_DWORD *)&v127[16] = v76;
      v127[20] = v79;
      *(_DWORD *)&v127[24] = 0;
      *(_DWORD *)&v127[28] = v81;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for RendererEffectDisplayList<GraphicsBlendModeEffect>(0, &lazy cache variable for type metadata for RendererEffectDisplayList<_BlurEffect>);
      lazy protocol witness table accessor for type RendererEffectDisplayList<GraphicsBlendModeEffect> and conformance RendererEffectDisplayList<A>(&lazy protocol witness table cache variable for type RendererEffectDisplayList<_BlurEffect> and conformance RendererEffectDisplayList<A>, &lazy cache variable for type metadata for RendererEffectDisplayList<_BlurEffect>);
      uint64_t v84 = Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v126) = 0;
      PreferencesOutputs.subscript.setter(v84, &type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key);
      goto LABEL_59;
    }
    unsigned __int8 v96 = v6;
    unsigned __int8 v41 = *(void *)a2;
    uint64_t v42 = *(_DWORD *)(a2 + 8);
    uint64_t v43 = *(_DWORD *)(a2 + 24);
    uint64_t v44 = *(void *)(a2 + 32);
    unsigned __int8 v45 = *(void *)(a2 + 48);
    uint64_t v107 = *(void *)(a2 + 40);
    BOOL v110 = *(void *)(a2 + 16);
    uint64_t v46 = *(void *)(a2 + 56);
    int v114 = *(void *)(a2 + 64);
    uint64_t v101 = *(void *)(a2 + 72);
    double v98 = *(_DWORD *)(a2 + 80);
    char v47 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v127[16] = *(_OWORD *)(a2 + 32);
    unint64_t v128 = v47;
    uint64_t v129 = *(_OWORD *)(a2 + 64);
    double v130 = *(_DWORD *)(a2 + 80);
    int v48 = *(_OWORD *)(a2 + 16);
    uint64_t v126 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v127 = v48;
    outlined retain of _ViewInputs(a2);
    uint64_t v49 = _ViewInputs.geometryTransaction()();
    char v50 = swift_getKeyPath();
    uint64_t v51 = specialized CachedEnvironment.attribute<A>(keyPath:)(v50);
    swift_release();
    if ((*(unsigned char *)(v38 + 81) & 1) == 0
      && v114 == *(_DWORD *)(v38 + 32)
      && v101 == *(_DWORD *)(v38 + 36)
      && v51 == *(_DWORD *)(v38 + 40)
      && v42 == *(_DWORD *)(v38 + 44)
      && v49 == *(_DWORD *)(v38 + 48)
      && v43 == *(_DWORD *)(v38 + 52))
    {
      if (*(unsigned char *)(v38 + 64)) {
        goto LABEL_34;
      }
      LODWORD(v57) = *(_DWORD *)(v38 + 60);
    }
    else
    {
      *(void *)&uint64_t v126 = v41;
      DWORD2(v126) = v42;
      *(void *)uint64_t v127 = v110;
      *(_DWORD *)&v127[8] = v43;
      *(_DWORD *)&v127[12] = v49;
      *(void *)&v127[16] = v44;
      *(void *)&v127[24] = v107;
      *(void *)&unint64_t v128 = v45;
      *((void *)&v128 + 1) = v46;
      *(void *)&uint64_t v129 = v114;
      *((void *)&v129 + 1) = v101;
      double v130 = v98;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v126, v51, (uint64_t)&v119);
      uint64_t v52 = v120;
      uint64_t v53 = v121;
      uint64_t v54 = v125;
      uint64_t v55 = v121 | ((unint64_t)v122 << 32);
      uint64_t v56 = v123 | ((unint64_t)v124 << 32);
      *(_OWORD *)(v38 + 32) = v119;
      *(_OWORD *)(v38 + 48) = v52;
      *(void *)(v38 + 64) = v55;
      *(void *)(v38 + 72) = v56;
      *(_WORD *)(v38 + 80) = v54;
      if (v53)
      {
LABEL_34:
        OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v38 + 60) = OffsetAttribute2;
        *(unsigned char *)(v38 + 64) = 0;
LABEL_37:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        int v58 = *(void *)a2;
        __int16 v59 = *(_DWORD *)(a2 + 8);
        uint64_t v60 = *(_DWORD *)(a2 + 24);
        uint64_t v61 = *(void *)(a2 + 32);
        uint64_t v62 = *(void *)(a2 + 48);
        uint64_t v108 = *(void *)(a2 + 40);
        uint64_t v111 = *(void *)(a2 + 16);
        uint64_t v63 = *(void *)(a2 + 56);
        double v99 = *(void *)(a2 + 72);
        uint64_t v102 = *(void *)(a2 + 64);
        uint64_t v92 = *(_DWORD *)(a2 + 80);
        uint64_t v64 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)&v127[16] = *(_OWORD *)(a2 + 32);
        unint64_t v128 = v64;
        uint64_t v129 = *(_OWORD *)(a2 + 64);
        double v130 = *(_DWORD *)(a2 + 80);
        uint64_t v65 = *(_OWORD *)(a2 + 16);
        uint64_t v126 = *(_OWORD *)a2;
        *(_OWORD *)uint64_t v127 = v65;
        outlined retain of _ViewInputs(a2);
        uint64_t v66 = _ViewInputs.geometryTransaction()();
        char v67 = swift_getKeyPath();
        char v68 = specialized CachedEnvironment.attribute<A>(keyPath:)(v67);
        swift_release();
        if ((*(unsigned char *)(v38 + 81) & 1) == 0
          && v102 == *(_DWORD *)(v38 + 32)
          && v99 == *(_DWORD *)(v38 + 36)
          && v68 == *(_DWORD *)(v38 + 40)
          && v59 == *(_DWORD *)(v38 + 44)
          && v66 == *(_DWORD *)(v38 + 48)
          && v60 == *(_DWORD *)(v38 + 52))
        {
          uint64_t v37 = (int *)MEMORY[0x263F288F8];
          if ((*(unsigned char *)(v38 + 72) & 1) == 0)
          {
            char v40 = *(_DWORD *)(v38 + 68);
            goto LABEL_48;
          }
        }
        else
        {
          *(void *)&uint64_t v126 = v58;
          DWORD2(v126) = v59;
          *(void *)uint64_t v127 = v111;
          *(_DWORD *)&v127[8] = v60;
          *(_DWORD *)&v127[12] = v66;
          *(void *)&v127[16] = v61;
          *(void *)&v127[24] = v108;
          *(void *)&unint64_t v128 = v62;
          *((void *)&v128 + 1) = v63;
          *(void *)&uint64_t v129 = v102;
          *((void *)&v129 + 1) = v99;
          double v130 = v92;
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v126, v68, (uint64_t)&v119);
          char v40 = v122;
          unsigned __int8 v69 = v123;
          unsigned __int8 v70 = v125;
          uint64_t v71 = v121 | ((unint64_t)v122 << 32);
          uint64_t v72 = v123 | ((unint64_t)v124 << 32);
          uint64_t v73 = v120;
          *(_OWORD *)(v38 + 32) = v119;
          *(_OWORD *)(v38 + 48) = v73;
          *(void *)(v38 + 64) = v71;
          *(void *)(v38 + 72) = v72;
          *(_WORD *)(v38 + 80) = v70;
          uint64_t v37 = (int *)MEMORY[0x263F288F8];
          if ((v69 & 1) == 0) {
            goto LABEL_48;
          }
        }
        char v40 = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v38 + 68) = v40;
        *(unsigned char *)(v38 + 72) = 0;
LABEL_48:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        unint64_t v6 = v96;
        goto LABEL_49;
      }
      uint64_t v57 = HIDWORD(*((void *)&v52 + 1));
    }
    OffsetAttribute2 = v57;
    goto LABEL_37;
  }
  outlined retain of _ViewInputs(a2);
  specialized _ViewInputs.subscript.getter();
  outlined release of _ViewInputs(a2);
  uint64_t result = AGWeakAttributeGetAttribute();
  if (result != *v37)
  {
    LODWORD(v119) = v116;
    char v86 = (void (*)(long long *, void))Attribute<A>.subscript.modify();
    _DisplayList_StableIdentityScope.pushIdentity(_:)((Swift::UInt32 *)&v119);
    v86(&v126, 0);
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

{
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(a1, a2, a3, (void (*)(uint64_t))protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase, &lazy cache variable for type metadata for RendererEffectDisplayList<_ColorMatrixEffect>, a4, &lazy protocol witness table cache variable for type RendererEffectDisplayList<_ColorMatrixEffect> and conformance RendererEffectDisplayList<A>);
}

{
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(a1, a2, a3, (void (*)(uint64_t))protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase, &lazy cache variable for type metadata for RendererEffectDisplayList<_ShadowEffect._Resolved>, a4, &lazy protocol witness table cache variable for type RendererEffectDisplayList<_ShadowEffect._Resolved> and conformance RendererEffectDisplayList<A>);
}

{
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(a1, a2, a3, (void (*)(uint64_t))protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase, &lazy cache variable for type metadata for RendererEffectDisplayList<VariableBlurStyle>, a4, &lazy protocol witness table cache variable for type RendererEffectDisplayList<VariableBlurStyle> and conformance RendererEffectDisplayList<A>);
}

{
  void *v5;
  int v6;
  long long v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float32x2_t v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  long long v25;
  long long v26;
  unsigned int v27;
  uint64_t KeyPath;
  int v29;
  uint64_t v30;
  long long v31;
  uint64_t v32;
  unsigned __int8 v33;
  unint64_t v34;
  unint64_t v35;
  const float *v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  ValueMetadata **v44;
  uint64_t v45;
  unsigned int *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  long long v53;
  long long v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  long long v58;
  uint64_t v59;
  unsigned __int8 v60;
  unint64_t v61;
  unint64_t v62;
  int v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  long long v69;
  long long v70;
  unsigned int v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  unsigned __int8 v75;
  int OffsetAttribute2;
  unint64_t v77;
  unint64_t v78;
  long long v79;
  unint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  unsigned int v86;
  int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t result;
  void (*v93)(long long *, void);
  int v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  unsigned int v98;
  uint64_t v99;
  void *v101;
  uint64_t v103;
  int v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  unsigned int v119;
  Swift::UInt32 v121;
  __int16 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  long long v127;
  long long v128;
  unsigned __int8 v129;
  unsigned int v130;
  unsigned __int8 v131;
  unsigned int v132;
  unsigned __int8 v133;
  long long v134;
  long long v135;
  long long v136;
  long long v137;
  unsigned char v138[20];
  long long v139;
  long long v140;
  long long v141;
  uint64_t v142;

  long long v5 = a4;
  unint64_t v142 = *MEMORY[0x263EF8340];
  unint64_t v6 = *(_DWORD *)(a2 + 72);
  uint64_t v7 = *(_OWORD *)(a2 + 32);
  char v140 = *(_OWORD *)(a2 + 16);
  char v141 = v7;
  uint64_t v139 = *(_OWORD *)a2;
  long long v8 = *(void *)a2;
  BOOL v110 = *(_DWORD *)(a2 + 8);
  long long v9 = *(void *)(a2 + 16);
  uint64_t v10 = *(void *)(a2 + 24);
  double v116 = *(_DWORD *)(a2 + 36);
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v12 = *(void *)(a2 + 48);
  uint64_t v113 = *(_DWORD *)(a2 + 56);
  long long v13 = *(void *)(a2 + 76);
  char v122 = WORD2(v7);
  if ((BYTE4(v7) & 0x20) == 0)
  {
    long long v14 = *(float32x2_t *)(a2 + 64);
    uint64_t v15 = *(_DWORD *)(a2 + 60);
    long long v16 = v141;
    outlined retain of _ViewInputs(a2);
    long long v17 = v6;
    goto LABEL_16;
  }
  double v98 = v6;
  uint64_t v108 = *(void *)(a2 + 40);
  uint64_t v109 = *(void *)(a2 + 16);
  double v99 = *(void *)a2;
  double v97 = *(_DWORD *)(a2 + 32);
  long long v18 = v140;
  swift_beginAccess();
  long long v19 = *(_DWORD *)(a2 + 8);
  uint64_t v103 = *(void *)(a2 + 16);
  uint64_t v105 = *(void *)a2;
  long long v20 = *(_DWORD *)(a2 + 24);
  int v21 = *(void *)(a2 + 32);
  long long v22 = *(void *)(a2 + 40);
  long long v23 = *(void *)(a2 + 48);
  long long v24 = *(void *)(a2 + 56);
  uint64_t v95 = *(void *)(a2 + 72);
  unsigned __int8 v96 = *(void *)(a2 + 64);
  double v94 = *(_DWORD *)(a2 + 80);
  uint64_t v25 = *(_OWORD *)(a2 + 48);
  int v136 = *(_OWORD *)(a2 + 32);
  uint64_t v137 = v25;
  *(_OWORD *)char v138 = *(_OWORD *)(a2 + 64);
  *(_DWORD *)&v138[16] = *(_DWORD *)(a2 + 80);
  long long v26 = *(_OWORD *)(a2 + 16);
  unint64_t v134 = *(_OWORD *)a2;
  double v135 = v26;
  outlined retain of _ViewInputs(a2);
  outlined retain of _ViewInputs(a2);
  int v27 = _ViewInputs.geometryTransaction()();
  uint64_t KeyPath = swift_getKeyPath();
  long long v29 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
  swift_release();
  if ((*(unsigned char *)(v140 + 81) & 1) != 0
    || v96 != *(_DWORD *)(v140 + 32)
    || v95 != *(_DWORD *)(v140 + 36)
    || v29 != *(_DWORD *)(v140 + 40)
    || v19 != *(_DWORD *)(v140 + 44)
    || v27 != *(_DWORD *)(v140 + 48)
    || v20 != *(_DWORD *)(v140 + 52))
  {
    *(void *)&unint64_t v134 = v105;
    DWORD2(v134) = v19;
    *(void *)&double v135 = v103;
    *((void *)&v135 + 1) = __PAIR64__(v27, v20);
    *(void *)&int v136 = v21;
    *((void *)&v136 + 1) = v22;
    *(void *)&uint64_t v137 = v23;
    *((void *)&v137 + 1) = v24;
    *(void *)char v138 = v96;
    *(void *)&v138[8] = v95;
    *(_DWORD *)&v138[16] = v94;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v134, v29, (uint64_t)&v127);
    uint64_t v31 = v128;
    uint64_t v32 = v129;
    uint64_t v33 = v133;
    char v34 = v129 | ((unint64_t)v130 << 32);
    uint64_t v35 = v131 | ((unint64_t)v132 << 32);
    *(_OWORD *)(v18 + 32) = v127;
    *(_OWORD *)(v18 + 48) = v31;
    *(void *)(v18 + 64) = v34;
    *(void *)(v18 + 72) = v35;
    *(_WORD *)(v18 + 80) = v33;
    if (v32 != 1)
    {
      long long v30 = HIDWORD(*((void *)&v31 + 1));
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (*(unsigned char *)(v140 + 64))
  {
LABEL_13:
    LODWORD(v30) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v18 + 60) = v30;
    *(unsigned char *)(v18 + 64) = 0;
    goto LABEL_15;
  }
  LODWORD(v30) = *(_DWORD *)(v140 + 60);
LABEL_15:
  long long v8 = v99;
  long long v5 = a4;
  uint64_t v11 = v108;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_endAccess();
  *(void *)&unint64_t v134 = __PAIR64__(*(_DWORD *)(a2 + 60), v30);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type ResetPositionTransform and conformance ResetPositionTransform();
  uint64_t v15 = Attribute.init<A>(body:value:flags:update:)();
  uint64_t v36 = (const float *)(specialized static ViewGraph.current.getter() + 248);
  long long v14 = vld1_dup_f32(v36);
  swift_release();
  uint64_t v37 = *(_DWORD *)(a2 + 64);
  uint64_t v38 = swift_getKeyPath();
  swift_beginAccess();
  outlined retain of _GraphInputs((uint64_t)&v139);
  uint64_t v39 = specialized CachedEnvironment.attribute<A>(keyPath:)(v38);
  swift_endAccess();
  outlined release of _GraphInputs((uint64_t)&v139);
  swift_release();
  *(void *)&unint64_t v134 = __PAIR64__(v98, v37);
  unint64_t v6 = v98;
  DWORD2(v134) = v39;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type RoundedSize and conformance RoundedSize();
  long long v17 = Attribute.init<A>(body:value:flags:update:)();
  long long v16 = v97 | 0x1C;
  long long v9 = v109;
LABEL_16:
  *(void *)&unint64_t v134 = v8;
  DWORD2(v134) = v110;
  *(void *)&double v135 = v9;
  *((void *)&v135 + 1) = v10;
  *(void *)&int v136 = __PAIR64__(v116, v16);
  *((void *)&v136 + 1) = v11;
  *(void *)&uint64_t v137 = v12;
  *((void *)&v137 + 1) = __PAIR64__(v15, v113);
  *(float32x2_t *)char v138 = v14;
  *(_DWORD *)&v138[8] = v17;
  *(void *)&v138[12] = v13;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  char v40 = swift_bridgeObjectRetain();
  a3(&v125, v40, &v134);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  unsigned __int8 v41 = *(void *)(a2 + 48);
  uint64_t v42 = *(void *)(v41 + 16);
  uint64_t v43 = v122;
  if (!v42)
  {
LABEL_57:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
    *long long v5 = v125;
    v5[1] = v126;
    return result;
  }
  uint64_t v44 = (ValueMetadata **)(v41 + 32);
  while (*v44 != &type metadata for DisplayList.Key)
  {
    v44 += 2;
    if (!--v42) {
      goto LABEL_57;
    }
  }
  char v121 = ++lastIdentity;
  if ((v122 & 0x100) == 0)
  {
LABEL_22:
    unsigned __int8 v45 = v140;
    uint64_t v46 = (unsigned int *)(v140 + 16);
    swift_beginAccess();
    if ((v43 & 0x20) == 0)
    {
      LODWORD(v123) = *(_DWORD *)(a2 + 64);
LABEL_47:
      swift_endAccess();
      uint64_t v119 = *v46;
      *(void *)&unint64_t v134 = v125;
      DWORD2(v134) = v126;
      uint64_t v80 = PreferencesOutputs.subscript.getter((uint64_t)&type metadata for DisplayList.Key);
      if ((v80 & 0x100000000) != 0) {
        unsigned int v81 = *MEMORY[0x263F288F8];
      }
      else {
        unsigned int v81 = v80;
      }
      uint64_t v82 = v139;
      *(void *)&uint64_t v127 = v139;
      outlined retain of _ViewInputs(a2);
      outlined retain of _GraphInputs((uint64_t)&v139);
      outlined retain of ViewTransform((uint64_t)&v127);
      unint64_t v83 = specialized find<A>(_:key:)(v82);
      if (v83) {
        uint64_t v84 = *(unsigned char *)(v83 + 72);
      }
      else {
        uint64_t v84 = 0;
      }
      outlined release of ViewTransform((uint64_t)&v127);
      outlined release of _GraphInputs((uint64_t)&v139);
      outlined retain of _ViewInputs(a2);
      outlined retain of _GraphInputs((uint64_t)&v139);
      outlined retain of ViewTransform((uint64_t)&v127);
      uint64_t v85 = specialized find<A>(_:key:)(v82);
      char v86 = v6;
      if (v85) {
        double v87 = *(_DWORD *)(v85 + 72);
      }
      else {
        double v87 = 0;
      }
      uint64_t v88 = *(_DWORD *)(a2 + 60);
      unint64_t v89 = *(_DWORD *)(a2 + 68);
      uint64_t v90 = *(_DWORD *)(a2 + 76);
      outlined release of ViewTransform((uint64_t)&v127);
      outlined release of _GraphInputs((uint64_t)&v139);
      outlined release of _ViewInputs(a2);
      outlined release of _ViewInputs(a2);
      *(void *)&unint64_t v134 = __PAIR64__(a1, v121);
      *((void *)&v134 + 1) = __PAIR64__(v86, v123);
      *(void *)&double v135 = __PAIR64__(v89, v88);
      *((void *)&v135 + 1) = __PAIR64__(v90, v119);
      LODWORD(v136) = v81;
      BYTE4(v136) = v84;
      DWORD2(v136) = 0;
      HIDWORD(v136) = v87;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for RendererEffectDisplayList<GraphicsBlendModeEffect>(0, &lazy cache variable for type metadata for RendererEffectDisplayList<_GeometryGroupEffect>);
      lazy protocol witness table accessor for type RendererEffectDisplayList<GraphicsBlendModeEffect> and conformance RendererEffectDisplayList<A>(&lazy protocol witness table cache variable for type RendererEffectDisplayList<_GeometryGroupEffect> and conformance RendererEffectDisplayList<A>, &lazy cache variable for type metadata for RendererEffectDisplayList<_GeometryGroupEffect>);
      double v91 = Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v134) = 0;
      PreferencesOutputs.subscript.setter(v91, &type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key);
      goto LABEL_57;
    }
    uint64_t v101 = v5;
    char v47 = *(void *)a2;
    int v48 = *(_DWORD *)(a2 + 8);
    uint64_t v49 = *(void *)(a2 + 16);
    char v50 = *(_DWORD *)(a2 + 24);
    uint64_t v51 = *(void *)(a2 + 32);
    int v114 = *(void *)(a2 + 48);
    uint64_t v117 = *(void *)(a2 + 40);
    uint64_t v52 = *(void *)(a2 + 56);
    uint64_t v124 = *(void *)(a2 + 64);
    uint64_t v111 = *(void *)(a2 + 72);
    BOOL v106 = *(_DWORD *)(a2 + 80);
    uint64_t v53 = *(_OWORD *)(a2 + 48);
    int v136 = *(_OWORD *)(a2 + 32);
    uint64_t v137 = v53;
    *(_OWORD *)char v138 = *(_OWORD *)(a2 + 64);
    *(_DWORD *)&v138[16] = *(_DWORD *)(a2 + 80);
    uint64_t v54 = *(_OWORD *)(a2 + 16);
    unint64_t v134 = *(_OWORD *)a2;
    double v135 = v54;
    outlined retain of _ViewInputs(a2);
    uint64_t v55 = _ViewInputs.geometryTransaction()();
    uint64_t v56 = swift_getKeyPath();
    uint64_t v57 = specialized CachedEnvironment.attribute<A>(keyPath:)(v56);
    swift_release();
    if ((*(unsigned char *)(v45 + 81) & 1) == 0
      && v124 == *(_DWORD *)(v45 + 32)
      && v111 == *(_DWORD *)(v45 + 36)
      && v57 == *(_DWORD *)(v45 + 40)
      && v48 == *(_DWORD *)(v45 + 44)
      && v55 == *(_DWORD *)(v45 + 48)
      && v50 == *(_DWORD *)(v45 + 52))
    {
      if ((*(unsigned char *)(v45 + 64) & 1) == 0)
      {
        LODWORD(v123) = *(_DWORD *)(v45 + 60);
        goto LABEL_35;
      }
    }
    else
    {
      *(void *)&unint64_t v134 = v47;
      DWORD2(v134) = v48;
      *(void *)&double v135 = v49;
      *((void *)&v135 + 1) = __PAIR64__(v55, v50);
      *(void *)&int v136 = v51;
      *((void *)&v136 + 1) = v117;
      *(void *)&uint64_t v137 = v114;
      *((void *)&v137 + 1) = v52;
      *(void *)char v138 = v124;
      *(void *)&v138[8] = v111;
      *(_DWORD *)&v138[16] = v106;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v134, v57, (uint64_t)&v127);
      int v58 = v128;
      __int16 v59 = v129;
      uint64_t v60 = v133;
      uint64_t v61 = v129 | ((unint64_t)v130 << 32);
      uint64_t v62 = v131 | ((unint64_t)v132 << 32);
      *(_OWORD *)(v45 + 32) = v127;
      *(_OWORD *)(v45 + 48) = v58;
      *(void *)(v45 + 64) = v61;
      *(void *)(v45 + 72) = v62;
      *(_WORD *)(v45 + 80) = v60;
      if (v59 != 1)
      {
        uint64_t v123 = HIDWORD(*((void *)&v58 + 1));
LABEL_35:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        uint64_t v63 = *(_DWORD *)(a2 + 8);
        uint64_t v115 = *(void *)(a2 + 16);
        uint64_t v118 = *(void *)a2;
        uint64_t v64 = *(_DWORD *)(a2 + 24);
        uint64_t v65 = *(void *)(a2 + 32);
        uint64_t v66 = *(void *)(a2 + 40);
        char v67 = *(void *)(a2 + 48);
        char v68 = *(void *)(a2 + 56);
        uint64_t v112 = *(void *)(a2 + 64);
        uint64_t v107 = *(void *)(a2 + 72);
        uint64_t v104 = *(_DWORD *)(a2 + 80);
        unsigned __int8 v69 = *(_OWORD *)(a2 + 48);
        int v136 = *(_OWORD *)(a2 + 32);
        uint64_t v137 = v69;
        *(_OWORD *)char v138 = *(_OWORD *)(a2 + 64);
        *(_DWORD *)&v138[16] = *(_DWORD *)(a2 + 80);
        unsigned __int8 v70 = *(_OWORD *)(a2 + 16);
        unint64_t v134 = *(_OWORD *)a2;
        double v135 = v70;
        outlined retain of _ViewInputs(a2);
        uint64_t v71 = _ViewInputs.geometryTransaction()();
        uint64_t v72 = swift_getKeyPath();
        uint64_t v73 = specialized CachedEnvironment.attribute<A>(keyPath:)(v72);
        swift_release();
        if ((*(unsigned char *)(v45 + 81) & 1) == 0
          && v112 == *(_DWORD *)(v45 + 32)
          && v107 == *(_DWORD *)(v45 + 36)
          && v73 == *(_DWORD *)(v45 + 40)
          && v63 == *(_DWORD *)(v45 + 44)
          && v71 == *(_DWORD *)(v45 + 48)
          && v64 == *(_DWORD *)(v45 + 52))
        {
          long long v5 = v101;
          if ((*(unsigned char *)(v45 + 72) & 1) == 0)
          {
            OffsetAttribute2 = *(_DWORD *)(v45 + 68);
            goto LABEL_46;
          }
        }
        else
        {
          *(void *)&unint64_t v134 = v118;
          DWORD2(v134) = v63;
          *(void *)&double v135 = v115;
          *((void *)&v135 + 1) = __PAIR64__(v71, v64);
          *(void *)&int v136 = v65;
          *((void *)&v136 + 1) = v66;
          *(void *)&uint64_t v137 = v67;
          *((void *)&v137 + 1) = v68;
          *(void *)char v138 = v112;
          *(void *)&v138[8] = v107;
          *(_DWORD *)&v138[16] = v104;
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v134, v73, (uint64_t)&v127);
          uint64_t v74 = v131;
          uint64_t v75 = v133;
          OffsetAttribute2 = v130;
          uint64_t v77 = v129 | ((unint64_t)v130 << 32);
          uint64_t v78 = v131 | ((unint64_t)v132 << 32);
          uint64_t v79 = v128;
          *(_OWORD *)(v45 + 32) = v127;
          *(_OWORD *)(v45 + 48) = v79;
          *(void *)(v45 + 64) = v77;
          *(void *)(v45 + 72) = v78;
          *(_WORD *)(v45 + 80) = v75;
          long long v5 = v101;
          if (v74 != 1) {
            goto LABEL_46;
          }
        }
        OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v45 + 68) = OffsetAttribute2;
        *(unsigned char *)(v45 + 72) = 0;
LABEL_46:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        unint64_t v6 = OffsetAttribute2;
        goto LABEL_47;
      }
    }
    LODWORD(v123) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v45 + 60) = v123;
    *(unsigned char *)(v45 + 64) = 0;
    goto LABEL_35;
  }
  outlined retain of _ViewInputs(a2);
  specialized _ViewInputs.subscript.getter();
  outlined release of _ViewInputs(a2);
  uint64_t result = AGWeakAttributeGetAttribute();
  if (result != *MEMORY[0x263F288F8])
  {
    LODWORD(v127) = v121;
    double v93 = (void (*)(long long *, void))Attribute<A>.subscript.modify();
    _DisplayList_StableIdentityScope.pushIdentity(_:)((Swift::UInt32 *)&v127);
    v93(&v134, 0);
    uint64_t v43 = v122;
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

{
  void (*v4)(uint64_t *__return_ptr, uint64_t, long long *);
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  long long v14;
  __int16 v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  long long v23;
  long long v24;
  int v25;
  uint64_t KeyPath;
  int v27;
  long long v28;
  uint64_t v29;
  unsigned __int8 v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  ValueMetadata **v36;
  int *v37;
  uint64_t v38;
  int *v39;
  unsigned int OffsetAttribute2;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  long long v47;
  long long v48;
  int v49;
  uint64_t v50;
  int v51;
  long long v52;
  uint64_t v53;
  unsigned __int8 v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  long long v63;
  long long v64;
  int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  unsigned __int8 v69;
  unint64_t v70;
  unint64_t v71;
  long long v72;
  int v73;
  unint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  int v80;
  int v81;
  int v82;
  unsigned int v83;
  uint64_t result;
  void (*v85)(long long *, void);
  int v86;
  uint64_t v87;
  uint64_t v88;
  __int16 v90;
  int v91;
  int v92;
  void *v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  long long v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  Swift::UInt32 v115;
  uint64_t v116;
  uint64_t v117;
  long long v118;
  long long v119;
  unsigned __int8 v120;
  unsigned int v121;
  unsigned __int8 v122;
  unsigned int v123;
  unsigned __int8 v124;
  long long v125;
  unsigned char v126[32];
  long long v127;
  long long v128;
  int v129;
  long long v130;
  long long v131;
  long long v132;
  uint64_t v133;

  uint64_t v4 = a3;
  unint64_t v6 = a4;
  double v133 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(void *)a2;
  uint64_t v108 = *(_DWORD *)(a2 + 8);
  long long v8 = *(void *)(a2 + 16);
  uint64_t v111 = *(_OWORD *)(a2 + 24);
  long long v9 = *(void *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 48);
  uint64_t v11 = *(void *)(a2 + 56);
  LODWORD(v12) = *(_DWORD *)(a2 + 68);
  uint64_t v105 = *(_DWORD *)(a2 + 64);
  long long v13 = *(void *)(a2 + 72);
  int v114 = *(_DWORD *)(a2 + 80);
  long long v14 = *(_OWORD *)(a2 + 32);
  uint64_t v131 = *(_OWORD *)(a2 + 16);
  double v132 = v14;
  double v130 = *(_OWORD *)a2;
  uint64_t v15 = WORD2(v14);
  uint64_t v92 = v12;
  if ((BYTE4(v14) & 0x20) == 0)
  {
    outlined retain of _ViewInputs(a2);
    goto LABEL_16;
  }
  uint64_t v90 = WORD2(v14);
  uint64_t v102 = v10;
  uint64_t v103 = v8;
  uint64_t v104 = v9;
  long long v16 = v131;
  swift_beginAccess();
  double v99 = *(void *)a2;
  long long v17 = *(_DWORD *)(a2 + 8);
  unsigned __int8 v96 = *(void *)(a2 + 16);
  long long v18 = *(_DWORD *)(a2 + 24);
  long long v19 = *(void *)(a2 + 32);
  long long v20 = *(void *)(a2 + 40);
  int v21 = *(void *)(a2 + 48);
  long long v22 = *(void *)(a2 + 56);
  double v87 = *(void *)(a2 + 72);
  uint64_t v88 = *(void *)(a2 + 64);
  char v86 = *(_DWORD *)(a2 + 80);
  long long v23 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v126[16] = *(_OWORD *)(a2 + 32);
  uint64_t v127 = v23;
  unint64_t v128 = *(_OWORD *)(a2 + 64);
  uint64_t v129 = *(_DWORD *)(a2 + 80);
  long long v24 = *(_OWORD *)(a2 + 16);
  uint64_t v125 = *(_OWORD *)a2;
  *(_OWORD *)uint64_t v126 = v24;
  outlined retain of _ViewInputs(a2);
  outlined retain of _ViewInputs(a2);
  uint64_t v25 = _ViewInputs.geometryTransaction()();
  uint64_t KeyPath = swift_getKeyPath();
  int v27 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
  swift_release();
  if ((*(unsigned char *)(v131 + 81) & 1) != 0
    || v88 != *(_DWORD *)(v131 + 32)
    || v87 != *(_DWORD *)(v131 + 36)
    || v27 != *(_DWORD *)(v131 + 40)
    || v17 != *(_DWORD *)(v131 + 44)
    || v25 != *(_DWORD *)(v131 + 48)
    || v18 != *(_DWORD *)(v131 + 52))
  {
    *(void *)&uint64_t v125 = v99;
    DWORD2(v125) = v17;
    *(void *)uint64_t v126 = v96;
    *(_DWORD *)&v126[8] = v18;
    *(_DWORD *)&v126[12] = v25;
    *(void *)&v126[16] = v19;
    *(void *)&v126[24] = v20;
    *(void *)&uint64_t v127 = v21;
    *((void *)&v127 + 1) = v22;
    *(void *)&unint64_t v128 = v88;
    *((void *)&v128 + 1) = v87;
    uint64_t v129 = v86;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v125, v27, (uint64_t)&v118);
    long long v28 = v119;
    long long v29 = v120;
    long long v30 = v124;
    uint64_t v31 = v120 | ((unint64_t)v121 << 32);
    uint64_t v32 = v122 | ((unint64_t)v123 << 32);
    *(_OWORD *)(v16 + 32) = v118;
    *(_OWORD *)(v16 + 48) = v28;
    *(void *)(v16 + 64) = v31;
    *(void *)(v16 + 72) = v32;
    *(_WORD *)(v16 + 80) = v30;
    if (v29 != 1)
    {
      uint64_t v12 = HIDWORD(*((void *)&v28 + 1));
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (*(unsigned char *)(v131 + 64))
  {
LABEL_13:
    LODWORD(v12) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v16 + 60) = v12;
    *(unsigned char *)(v16 + 64) = 0;
    goto LABEL_15;
  }
  LODWORD(v12) = *(_DWORD *)(v131 + 60);
LABEL_15:
  unint64_t v6 = a4;
  long long v9 = v104;
  uint64_t v15 = v90;
  uint64_t v4 = a3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_endAccess();
  uint64_t v10 = v102;
  long long v8 = v103;
LABEL_16:
  *(void *)&uint64_t v125 = v7;
  DWORD2(v125) = v108;
  *(void *)uint64_t v126 = v8;
  *(_OWORD *)&v126[8] = v111;
  *(void *)&v126[24] = v9;
  *(void *)&uint64_t v127 = v10;
  *((void *)&v127 + 1) = v11;
  *(void *)&unint64_t v128 = __PAIR64__(v12, v105);
  *((void *)&v128 + 1) = v13;
  uint64_t v129 = v114;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v33 = swift_bridgeObjectRetain();
  v4(&v116, v33, &v125);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  char v34 = *(void *)(a2 + 48);
  uint64_t v35 = *(void *)(v34 + 16);
  if (!v35)
  {
LABEL_57:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
    *unint64_t v6 = v116;
    v6[1] = v117;
    return result;
  }
  uint64_t v36 = (ValueMetadata **)(v34 + 32);
  while (*v36 != &type metadata for DisplayList.Key)
  {
    v36 += 2;
    if (!--v35) {
      goto LABEL_57;
    }
  }
  uint64_t v115 = ++lastIdentity;
  uint64_t v37 = (int *)MEMORY[0x263F288F8];
  if ((v15 & 0x100) == 0)
  {
LABEL_22:
    uint64_t v38 = v131;
    uint64_t v39 = (int *)(v131 + 16);
    swift_beginAccess();
    if ((v15 & 0x20) == 0)
    {
      LODWORD(v112) = *(_DWORD *)(a2 + 64);
      OffsetAttribute2 = *(_DWORD *)(a2 + 72);
LABEL_47:
      swift_endAccess();
      uint64_t v73 = *v39;
      *(void *)&uint64_t v125 = v116;
      DWORD2(v125) = v117;
      uint64_t v74 = PreferencesOutputs.subscript.getter((uint64_t)&type metadata for DisplayList.Key);
      if ((v74 & 0x100000000) != 0) {
        uint64_t v75 = *v37;
      }
      else {
        uint64_t v75 = v74;
      }
      uint64_t v76 = v130;
      *(void *)&uint64_t v118 = v130;
      outlined retain of _ViewInputs(a2);
      outlined retain of _GraphInputs((uint64_t)&v130);
      outlined retain of ViewTransform((uint64_t)&v118);
      uint64_t v77 = specialized find<A>(_:key:)(v76);
      if (v77) {
        uint64_t v78 = *(unsigned char *)(v77 + 72);
      }
      else {
        uint64_t v78 = 0;
      }
      outlined release of ViewTransform((uint64_t)&v118);
      outlined release of _GraphInputs((uint64_t)&v130);
      outlined retain of _ViewInputs(a2);
      outlined retain of _GraphInputs((uint64_t)&v130);
      outlined retain of ViewTransform((uint64_t)&v118);
      uint64_t v79 = specialized find<A>(_:key:)(v76);
      if (v79) {
        uint64_t v80 = *(_DWORD *)(v79 + 72);
      }
      else {
        uint64_t v80 = 0;
      }
      unsigned int v81 = *(_DWORD *)(a2 + 60);
      uint64_t v82 = *(_DWORD *)(a2 + 76);
      outlined release of ViewTransform((uint64_t)&v118);
      outlined release of _GraphInputs((uint64_t)&v130);
      outlined release of _ViewInputs(a2);
      outlined release of _ViewInputs(a2);
      *(void *)&uint64_t v125 = __PAIR64__(a1, v115);
      *((void *)&v125 + 1) = __PAIR64__(OffsetAttribute2, v112);
      *(_DWORD *)uint64_t v126 = v81;
      *(_DWORD *)&v126[4] = v92;
      *(_DWORD *)&v126[8] = v73;
      *(_DWORD *)&v126[12] = v82;
      *(_DWORD *)&v126[16] = v75;
      v126[20] = v78;
      *(_DWORD *)&v126[24] = 0;
      *(_DWORD *)&v126[28] = v80;
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for RendererEffectDisplayList<GraphicsBlendModeEffect>(0, &lazy cache variable for type metadata for RendererEffectDisplayList<GraphicsBlendModeEffect>);
      lazy protocol witness table accessor for type RendererEffectDisplayList<GraphicsBlendModeEffect> and conformance RendererEffectDisplayList<A>(&lazy protocol witness table cache variable for type RendererEffectDisplayList<GraphicsBlendModeEffect> and conformance RendererEffectDisplayList<A>, &lazy cache variable for type metadata for RendererEffectDisplayList<GraphicsBlendModeEffect>);
      unint64_t v83 = Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v125) = 0;
      PreferencesOutputs.subscript.setter(v83, &type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key);
      goto LABEL_57;
    }
    uint64_t v95 = v6;
    unsigned __int8 v41 = *(void *)a2;
    uint64_t v42 = *(_DWORD *)(a2 + 8);
    uint64_t v43 = *(_DWORD *)(a2 + 24);
    uint64_t v44 = *(void *)(a2 + 32);
    unsigned __int8 v45 = *(void *)(a2 + 48);
    BOOL v106 = *(void *)(a2 + 40);
    uint64_t v109 = *(void *)(a2 + 16);
    uint64_t v46 = *(void *)(a2 + 56);
    uint64_t v113 = *(void *)(a2 + 64);
    BOOL v100 = *(void *)(a2 + 72);
    double v97 = *(_DWORD *)(a2 + 80);
    char v47 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v126[16] = *(_OWORD *)(a2 + 32);
    uint64_t v127 = v47;
    unint64_t v128 = *(_OWORD *)(a2 + 64);
    uint64_t v129 = *(_DWORD *)(a2 + 80);
    int v48 = *(_OWORD *)(a2 + 16);
    uint64_t v125 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v126 = v48;
    outlined retain of _ViewInputs(a2);
    uint64_t v49 = _ViewInputs.geometryTransaction()();
    char v50 = swift_getKeyPath();
    uint64_t v51 = specialized CachedEnvironment.attribute<A>(keyPath:)(v50);
    swift_release();
    if ((*(unsigned char *)(v38 + 81) & 1) == 0
      && v113 == *(_DWORD *)(v38 + 32)
      && v100 == *(_DWORD *)(v38 + 36)
      && v51 == *(_DWORD *)(v38 + 40)
      && v42 == *(_DWORD *)(v38 + 44)
      && v49 == *(_DWORD *)(v38 + 48)
      && v43 == *(_DWORD *)(v38 + 52))
    {
      if ((*(unsigned char *)(v38 + 64) & 1) == 0)
      {
        LODWORD(v112) = *(_DWORD *)(v38 + 60);
        goto LABEL_35;
      }
    }
    else
    {
      *(void *)&uint64_t v125 = v41;
      DWORD2(v125) = v42;
      *(void *)uint64_t v126 = v109;
      *(_DWORD *)&v126[8] = v43;
      *(_DWORD *)&v126[12] = v49;
      *(void *)&v126[16] = v44;
      *(void *)&v126[24] = v106;
      *(void *)&uint64_t v127 = v45;
      *((void *)&v127 + 1) = v46;
      *(void *)&unint64_t v128 = v113;
      *((void *)&v128 + 1) = v100;
      uint64_t v129 = v97;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v125, v51, (uint64_t)&v118);
      uint64_t v52 = v119;
      uint64_t v53 = v120;
      uint64_t v54 = v124;
      uint64_t v55 = v120 | ((unint64_t)v121 << 32);
      uint64_t v56 = v122 | ((unint64_t)v123 << 32);
      *(_OWORD *)(v38 + 32) = v118;
      *(_OWORD *)(v38 + 48) = v52;
      *(void *)(v38 + 64) = v55;
      *(void *)(v38 + 72) = v56;
      *(_WORD *)(v38 + 80) = v54;
      if (v53 != 1)
      {
        uint64_t v112 = HIDWORD(*((void *)&v52 + 1));
LABEL_35:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        uint64_t v57 = *(void *)a2;
        int v58 = *(_DWORD *)(a2 + 8);
        __int16 v59 = *(_DWORD *)(a2 + 24);
        uint64_t v60 = *(void *)(a2 + 32);
        uint64_t v61 = *(void *)(a2 + 48);
        uint64_t v107 = *(void *)(a2 + 40);
        BOOL v110 = *(void *)(a2 + 16);
        uint64_t v62 = *(void *)(a2 + 56);
        double v98 = *(void *)(a2 + 72);
        uint64_t v101 = *(void *)(a2 + 64);
        double v91 = *(_DWORD *)(a2 + 80);
        uint64_t v63 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)&v126[16] = *(_OWORD *)(a2 + 32);
        uint64_t v127 = v63;
        unint64_t v128 = *(_OWORD *)(a2 + 64);
        uint64_t v129 = *(_DWORD *)(a2 + 80);
        uint64_t v64 = *(_OWORD *)(a2 + 16);
        uint64_t v125 = *(_OWORD *)a2;
        *(_OWORD *)uint64_t v126 = v64;
        outlined retain of _ViewInputs(a2);
        uint64_t v65 = _ViewInputs.geometryTransaction()();
        uint64_t v66 = swift_getKeyPath();
        char v67 = specialized CachedEnvironment.attribute<A>(keyPath:)(v66);
        swift_release();
        if ((*(unsigned char *)(v38 + 81) & 1) == 0
          && v101 == *(_DWORD *)(v38 + 32)
          && v98 == *(_DWORD *)(v38 + 36)
          && v67 == *(_DWORD *)(v38 + 40)
          && v58 == *(_DWORD *)(v38 + 44)
          && v65 == *(_DWORD *)(v38 + 48)
          && v59 == *(_DWORD *)(v38 + 52))
        {
          uint64_t v37 = (int *)MEMORY[0x263F288F8];
          if ((*(unsigned char *)(v38 + 72) & 1) == 0)
          {
            OffsetAttribute2 = *(_DWORD *)(v38 + 68);
            goto LABEL_46;
          }
        }
        else
        {
          *(void *)&uint64_t v125 = v57;
          DWORD2(v125) = v58;
          *(void *)uint64_t v126 = v110;
          *(_DWORD *)&v126[8] = v59;
          *(_DWORD *)&v126[12] = v65;
          *(void *)&v126[16] = v60;
          *(void *)&v126[24] = v107;
          *(void *)&uint64_t v127 = v61;
          *((void *)&v127 + 1) = v62;
          *(void *)&unint64_t v128 = v101;
          *((void *)&v128 + 1) = v98;
          uint64_t v129 = v91;
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v125, v67, (uint64_t)&v118);
          OffsetAttribute2 = v121;
          char v68 = v122;
          unsigned __int8 v69 = v124;
          unsigned __int8 v70 = v120 | ((unint64_t)v121 << 32);
          uint64_t v71 = v122 | ((unint64_t)v123 << 32);
          uint64_t v72 = v119;
          *(_OWORD *)(v38 + 32) = v118;
          *(_OWORD *)(v38 + 48) = v72;
          *(void *)(v38 + 64) = v70;
          *(void *)(v38 + 72) = v71;
          *(_WORD *)(v38 + 80) = v69;
          uint64_t v37 = (int *)MEMORY[0x263F288F8];
          if (v68 != 1) {
            goto LABEL_46;
          }
        }
        OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
        *(_DWORD *)(v38 + 68) = OffsetAttribute2;
        *(unsigned char *)(v38 + 72) = 0;
LABEL_46:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        unint64_t v6 = v95;
        goto LABEL_47;
      }
    }
    LODWORD(v112) = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v38 + 60) = v112;
    *(unsigned char *)(v38 + 64) = 0;
    goto LABEL_35;
  }
  outlined retain of _ViewInputs(a2);
  specialized _ViewInputs.subscript.getter();
  outlined release of _ViewInputs(a2);
  uint64_t result = AGWeakAttributeGetAttribute();
  if (result != *v37)
  {
    LODWORD(v118) = v115;
    uint64_t v85 = (void (*)(long long *, void))Attribute<A>.subscript.modify();
    _DisplayList_StableIdentityScope.pushIdentity(_:)((Swift::UInt32 *)&v118);
    v85(&v125, 0);
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

{
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(a1, a2, a3, (void (*)(uint64_t))protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase, &lazy cache variable for type metadata for RendererEffectDisplayList<Shader.ResolvedShader>, a4, &lazy protocol witness table cache variable for type RendererEffectDisplayList<Shader.ResolvedShader> and conformance RendererEffectDisplayList<A>);
}

{
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(a1, a2, a3, (void (*)(uint64_t))protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase, &lazy cache variable for type metadata for RendererEffectDisplayList<Shader.ResolvedShader>, a4, &lazy protocol witness table cache variable for type RendererEffectDisplayList<Shader.ResolvedShader> and conformance RendererEffectDisplayList<A>);
}

{
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(a1, a2, a3, (void (*)(uint64_t))protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase, &lazy cache variable for type metadata for RendererEffectDisplayList<_ForegroundLayerLevelViewModifier>, a4, &lazy protocol witness table cache variable for type RendererEffectDisplayList<_ForegroundLayerLevelViewModifier> and conformance RendererEffectDisplayList<A>);
}

{
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(a1, a2, a3, (void (*)(uint64_t))protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase, &lazy cache variable for type metadata for RendererEffectDisplayList<_PremultipliedColorMatrixEffect>, a4, &lazy protocol witness table cache variable for type RendererEffectDisplayList<_PremultipliedColorMatrixEffect> and conformance RendererEffectDisplayList<A>);
}

{
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(a1, a2, a3, (void (*)(uint64_t))protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase, &lazy cache variable for type metadata for RendererEffectDisplayList<_ExtendedBlendModeEffect>, a4, &lazy protocol witness table cache variable for type RendererEffectDisplayList<_ExtendedBlendModeEffect> and conformance RendererEffectDisplayList<A>);
}

{
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(a1, a2, a3, (void (*)(uint64_t))protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase, &lazy cache variable for type metadata for RendererEffectDisplayList<_LuminanceToAlphaEffect>, a4, &lazy protocol witness table cache variable for type RendererEffectDisplayList<_LuminanceToAlphaEffect> and conformance RendererEffectDisplayList<A>);
}

{
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(a1, a2, a3, (void (*)(uint64_t))protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase, &lazy cache variable for type metadata for RendererEffectDisplayList<_ColorMonochromeEffect._Resolved>, a4, &lazy protocol witness table cache variable for type RendererEffectDisplayList<_ColorMonochromeEffect._Resolved> and conformance RendererEffectDisplayList<A>);
}

{
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(a1, a2, a3, (void (*)(uint64_t))protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase, &lazy cache variable for type metadata for RendererEffectDisplayList<_ColorMultiplyEffect._Resolved>, a4, &lazy protocol witness table cache variable for type RendererEffectDisplayList<_ColorMultiplyEffect._Resolved> and conformance RendererEffectDisplayList<A>);
}

{
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(a1, a2, a3, (void (*)(uint64_t))protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase, &lazy cache variable for type metadata for RendererEffectDisplayList<LuminanceCurveEffect>, a4, &lazy protocol witness table cache variable for type RendererEffectDisplayList<LuminanceCurveEffect> and conformance RendererEffectDisplayList<A>);
}

{
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(a1, a2, a3, (void (*)(uint64_t))protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase, &lazy cache variable for type metadata for RendererEffectDisplayList<_HueRotationEffect>, a4, &lazy protocol witness table cache variable for type RendererEffectDisplayList<_HueRotationEffect> and conformance RendererEffectDisplayList<A>);
}

{
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(a1, a2, a3, (void (*)(uint64_t))protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase, &lazy cache variable for type metadata for RendererEffectDisplayList<_ColorInvertEffect>, a4, &lazy protocol witness table cache variable for type RendererEffectDisplayList<_ColorInvertEffect> and conformance RendererEffectDisplayList<A>);
}

{
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(a1, a2, a3, (void (*)(uint64_t))protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase, &lazy cache variable for type metadata for RendererEffectDisplayList<_SaturationEffect>, a4, &lazy protocol witness table cache variable for type RendererEffectDisplayList<_SaturationEffect> and conformance RendererEffectDisplayList<A>);
}

{
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(a1, a2, a3, (void (*)(uint64_t))protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase, &lazy cache variable for type metadata for RendererEffectDisplayList<_BrightnessEffect>, a4, &lazy protocol witness table cache variable for type RendererEffectDisplayList<_BrightnessEffect> and conformance RendererEffectDisplayList<A>);
}

{
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(a1, a2, a3, (void (*)(uint64_t))protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase, &lazy cache variable for type metadata for RendererEffectDisplayList<VariableBlurStyle>, a4, &lazy protocol witness table cache variable for type RendererEffectDisplayList<VariableBlurStyle> and conformance RendererEffectDisplayList<A>);
}

{
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(a1, a2, a3, (void (*)(uint64_t))protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase, &lazy cache variable for type metadata for RendererEffectDisplayList<GraphicsBlendMode>, a4, &lazy protocol witness table cache variable for type RendererEffectDisplayList<GraphicsBlendMode> and conformance RendererEffectDisplayList<A>);
}

{
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(a1, a2, a3, (void (*)(uint64_t))protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase, &lazy cache variable for type metadata for RendererEffectDisplayList<_GrayscaleEffect>, a4, &lazy protocol witness table cache variable for type RendererEffectDisplayList<_GrayscaleEffect> and conformance RendererEffectDisplayList<A>);
}

{
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(a1, a2, a3, (void (*)(uint64_t))protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase, &lazy cache variable for type metadata for RendererEffectDisplayList<_ContrastEffect>, a4, &lazy protocol witness table cache variable for type RendererEffectDisplayList<_ContrastEffect> and conformance RendererEffectDisplayList<A>);
}

{
  return specialized static _RendererEffect._makeRendererEffect(effect:inputs:body:)(a1, a2, a3, (void (*)(uint64_t))protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase, &lazy cache variable for type metadata for RendererEffectDisplayList<GraphicsFilter>, a4, &lazy protocol witness table cache variable for type RendererEffectDisplayList<GraphicsFilter> and conformance RendererEffectDisplayList<A>);
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<OpacityRendererEffect> and conformance AnimatableAttribute<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatableAttribute<OpacityRendererEffect> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<OpacityRendererEffect> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for AnimatableAttribute<_OpacityEffect>(255, &lazy cache variable for type metadata for AnimatableAttribute<OpacityRendererEffect>, (uint64_t)&type metadata for OpacityRendererEffect, (uint64_t)&protocol witness table for OpacityRendererEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<OpacityRendererEffect> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<_OpacityEffect> and conformance AnimatableAttribute<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatableAttribute<_OpacityEffect> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<_OpacityEffect> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for AnimatableAttribute<_OpacityEffect>(255, &lazy cache variable for type metadata for AnimatableAttribute<_OpacityEffect>, (uint64_t)&type metadata for _OpacityEffect, (uint64_t)&protocol witness table for _OpacityEffect, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<_OpacityEffect> and conformance AnimatableAttribute<A>);
  }
  return result;
}

uint64_t dispatch thunk of AnyLocation.get()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

double ScrollAnchorStorage.sizeChanges.getter()
{
  return ScrollAnchorStorage.initialOffset.getter(1);
}

uint64_t _UnaryViewAdaptor.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t static BoxVTable.deinitialize(elt:)()
{
  uint64_t v1 = *(void *)(v0 + 136);
  _UnsafeHeterogeneousBuffer_Element.body<A>(as:)();
  (*(void (**)(uint64_t))(*(void *)(v0 + 144) + 24))(v1);

  return UnsafeMutablePointer.deinitialize(count:)();
}

void StatePropertyBox.destroy()()
{
  if (*(void *)(v0 + 8)) {
    StoredLocationBase.invalidate()();
  }
}

Swift::Void __swiftcall StoredLocationBase.invalidate()()
{
  swift_beginAccess();
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = type metadata accessor for StoredLocationBase.Data();
  uint64_t v3 = (char *)v1
     + ((*(unsigned __int8 *)(*(void *)(v2 - 8) + 80) + 20) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v2 - 8) + 80));
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  uint64_t v4 = *(int *)(v2 + 32);
  swift_bridgeObjectRelease();
  *(void *)&v3[v4] = MEMORY[0x263F8EE80];
  $defer #1 <A>() in AtomicBox.wrappedValue.modify(v1 + 4);
  swift_release();
}

BOOL specialized static _ViewList_ReleaseElements.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24) != *(void *)(a2 + 24)) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a2 + 16);
  BOOL result = (v3 | v4) == 0;
  if (v3) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    swift_retain();
    swift_retain();
    char v6 = specialized static _ViewList_ReleaseElements.== infix(_:_:)(v3, v4);
    swift_release();
    swift_release();
    return v6 & 1;
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI20DynamicPropertyCacheV12TaggedFieldsVG_Si3tag_AF01_fG6BufferV5linksts5NeverOTg5(void (*a1)(long long *__return_ptr, void *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  int64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = MEMORY[0x263F8EE78];
  if (v5)
  {
    uint64_t v21 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
    uint64_t v6 = v21;
    for (uint64_t i = (uint64_t *)(a3 + 40); ; i += 2)
    {
      uint64_t v10 = *i;
      v18[0] = *(i - 1);
      v18[1] = v10;
      swift_bridgeObjectRetain();
      a1(&v19, v18);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      swift_bridgeObjectRelease();
      long long v11 = v19;
      uint64_t v12 = v20;
      uint64_t v21 = v6;
      unint64_t v14 = *(void *)(v6 + 16);
      unint64_t v13 = *(void *)(v6 + 24);
      if (v14 >= v13 >> 1)
      {
        long long v17 = v19;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
        long long v11 = v17;
        uint64_t v6 = v21;
      }
      *(void *)(v6 + 16) = v14 + 1;
      uint64_t v15 = v6 + 24 * v14;
      *(_OWORD *)(v15 + 32) = v11;
      *(void *)(v15 + 48) = v12;
      if (!--v5) {
        return v6;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
  }
  return v6;
}

double partial apply for closure #1 in _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)(a1, *(_DWORD *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 16), a2);
}

double closure #1 in _DynamicPropertyBuffer.addFields<A>(_:container:inputs:baseOffset:)@<D0>(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = *a1;
  uint64_t v9 = a1[1];
  uint64_t v11 = *(void *)(v9 + 16);
  if (v11)
  {
    uint64_t v16 = *a1;
    swift_bridgeObjectRetain_n();
    int v12 = 0;
    uint64_t v13 = v9 + 40;
    do
    {
      v12 |= (*(uint64_t (**)(void))(*(void *)v13 + 16))();
      v13 += 32;
      --v11;
    }
    while (v11);
    swift_bridgeObjectRelease();
    uint64_t v10 = v16;
  }
  else
  {
    swift_bridgeObjectRetain();
    int v12 = 0;
  }
  v17[0] = v9;
  v17[1] = 0;
  char v18 = 0;
  int v19 = v12;
  int v21 = a2;
  _DynamicPropertyBuffer.init<A>(fields:container:inputs:)(v20, v17, &v21, a3, a4);
  uint64_t v14 = v20[0];
  double result = *(double *)&v20[1];
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v14;
  *(double *)(a5 + 16) = result;
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<(tag: Int, links: _DynamicPropertyBuffer)>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(tag: Int, links: _DynamicPropertyBuffer)>)
  {
    type metadata accessor for (proposal: _ProposedSize, value: TextSizeVariant)(255, (unint64_t *)&lazy cache variable for type metadata for (tag: Int, links: _DynamicPropertyBuffer));
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(tag: Int, links: _DynamicPropertyBuffer)>);
    }
  }
}

uint64_t static DynamicProperty._propertyBehaviors.getter()
{
  return 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance _ViewList_ID(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 == *(_DWORD *)a2 && *(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4)) {
    return specialized static Array<A>.== infix(_:_:)(*(void *)(a1 + 8), *(void *)(a2 + 8));
  }
  else {
    return 0;
  }
}

ValueMetadata *type metadata accessor for _SafeAreaRegionsIgnoringLayout()
{
  return &type metadata for _SafeAreaRegionsIgnoringLayout;
}

void static Text.Scale.secondary.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t LocalizedTextStorage.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

void Text.Measurements.init()(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t type metadata completion function for _AnyShapeBox()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t Collection.index(atOffset:)()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v1 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v3 = (char *)&v5 - v2;
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.index(_:offsetBy:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, AssociatedTypeWitness);
}

ValueMetadata *type metadata accessor for ScrollGeometry()
{
  return &type metadata for ScrollGeometry;
}

uint64_t type metadata accessor for DerivedEnvironmentPropertyKey()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _FixedSizeLayout(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance IgnoresAutomaticPaddingLayout(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static UnaryLayout<>.makeViewImpl(modifier:inputs:body:));
}

uint64_t Namespace.wrappedValue.getter(uint64_t result)
{
  if (!result)
  {
    static os_log_type_t.fault.getter();
    if (one-time initialization token for runtimeIssuesLog != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    return AGMakeUniqueID();
  }
  return result;
}

uint64_t type metadata accessor for EnvironmentObject()
{
  return __swift_instantiateGenericMetadata();
}

ValueMetadata *type metadata accessor for LocalizedStringKey.StringInterpolation()
{
  return &type metadata for LocalizedStringKey.StringInterpolation;
}

uint64_t partial apply for closure #1 in GeometryReader.Child.updateValue()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1[3];
  uint64_t v4 = v1[5];
  uint64_t v8 = v1[2];
  uint64_t v9 = v3;
  uint64_t v10 = v4;
  uint64_t v5 = type metadata accessor for GeometryReader();
  return Attribute.syncMainIfReferences<A>(do:)((void (*)(void))partial apply for closure #1 in closure #1 in GeometryReader.Child.updateValue(), (uint64_t)&v7, v5, v8, a1);
}

uint64_t type metadata accessor for GeometryReader()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t storeEnumTagSinglePayload for AccessibilityValueStorage(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

BOOL protocol witness for AccessibilityCombinable.merge(with:) in conformance [A](Swift::OpaquePointer *a1)
{
  return Array.merge(with:)((Swift::OpaquePointer)a1->_rawValue);
}

uint64_t FontBox.__deallocating_deinit()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 120) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 136));

  return swift_deallocClassInstance();
}

uint64_t ViewTraitCollection.isAuxiliaryContent.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  char v2 = specialized ViewTraitCollection.value<A>(for:defaultValue:)(0, v1);
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t base witness table accessor for _AttributeBody in MatchedSharedFrame<A>()
{
  return swift_getWitnessTable();
}

uint64_t View.onDisappear(perform:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = 0;
  v4[1] = 0;
  v4[2] = a1;
  _OWORD v4[3] = a2;
  return View.modifier<A>(_:)(v4, a3, &type metadata for _AppearanceActionModifier);
}

uint64_t _ViewInputs.viewPhase.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 24) = result;
  int v2 = *(_DWORD *)(v1 + 32);
  if ((v2 & 0x40) == 0) {
    *(_DWORD *)(v1 + 32) = v2 | 0x40;
  }
  return result;
}

ValueMetadata *type metadata accessor for _ScaleEffect()
{
  return &type metadata for _ScaleEffect;
}

ValueMetadata *type metadata accessor for SymbolRenderingMode()
{
  return &type metadata for SymbolRenderingMode;
}

uint64_t Canvas.preservesMetadata.setter(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(v2 + *(int *)(a2 + 44)) = result;
  return result;
}

uint64_t EnvironmentValues.defaultRenderingMode.getter(void (*a1)(uint64_t), void (*a2)(uint64_t, uint64_t *))
{
  uint64_t v3 = *v2;
  if (v2[1])
  {
    swift_retain_n();
    swift_retain_n();
    a1(v3);
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_retain_n();
    a2(v6, &v8);
  }
  return swift_release_n();
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<DisplayGamutKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<DisplayGamutKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DisplayGamutKey>, (uint64_t)&type metadata for DisplayGamutKey, (uint64_t)&protocol witness table for DisplayGamutKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DisplayGamutKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<DisplayGamutKey>>);
    }
  }
}

uint64_t assignWithCopy for Canvas(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  uint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = v8[1];
  *uint64_t v7 = *v8;
  v7[1] = v9;
  swift_retain();
  swift_release();
  unint64_t v10 = ((unint64_t)v7 + 19) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = ((unint64_t)v8 + 19) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v10 = *(unsigned char *)v11;
  int v12 = *(_DWORD *)(v11 + 4);
  *(unsigned char *)(v10 + 8) = *(unsigned char *)(v11 + 8);
  *(_DWORD *)(v10 + 4) = v12;
  *(_DWORD *)(v10 + 12) = *(_DWORD *)(v11 + 12);
  *(unsigned char *)(v10 + 16) = *(unsigned char *)(v11 + 16);
  *(unsigned char *)(v10 + 17) = *(unsigned char *)(v11 + 17);
  return a1;
}

uint64_t *ImageRenderer.init(content:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = specialized ImageRenderer.init(content:)(a1);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 8))(a1);
  return v4;
}

uint64_t *specialized ImageRenderer.init(content:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  type metadata accessor for PassthroughSubject<(), Never>();
  swift_allocObject();
  v1[2] = PassthroughSubject.init()();
  *((_DWORD *)v1 + 8) = 0;
  *((unsigned char *)v1 + 36) = 0;
  v1[5] = 0x3FF0000000000000;
  ObservationRegistrar.init()();
  uint64_t v5 = *(void *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 88);
  type metadata accessor for ImageRendererHost();
  swift_allocObject();
  uint64_t v7 = specialized ImageRendererHost.init(content:)(a1);
  v2[3] = v7;
  uint64_t v8 = swift_allocObject();
  swift_weakInit();
  uint64_t v9 = (void *)swift_allocObject();
  _OWORD v9[2] = v5;
  _OWORD v9[3] = v6;
  void v9[4] = v8;
  *(void *)(v7 + 40) = partial apply for closure #1 in ImageRenderer.init(content:);
  *(void *)(v7 + 48) = v9;
  swift_retain();
  swift_release();
  *(unsigned char *)(v7 + 88) = 1;
  swift_release();
  return v2;
}

uint64_t ImageRenderer.render(rasterizationScale:renderer:)(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  _OWORD v9[2] = partial apply for thunk for @callee_guaranteed (@unowned CGSize, @guaranteed @callee_guaranteed (@guaranteed CGContextRef) -> ()) -> ();
  _OWORD v9[3] = v7;
  uint64_t v10 = v3;
  double v11 = a3;
  ImageRendererHost.render(ifNewerThan:renderer:)(0, 1, (void (*)(uint64_t, uint64_t (*)(unint64_t *), double))partial apply for closure #1 in closure #1 in ImageRenderer.render(rasterizationScale:renderer:), (uint64_t)v9);
  LOBYTE(a2) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (a2) {
    __break(1u);
  }
  return result;
}

uint64_t ImageRendererHost.render(ifNewerThan:renderer:)(uint64_t a1, char a2, void (*a3)(uint64_t, uint64_t (*)(unint64_t *a1), double), uint64_t a4)
{
  if (objc_msgSend(self, sel_isMainThread))
  {
    ImageRendererHost.renderUntilStable()();
    if (one-time initialization token for _lock != -1) {
      swift_once();
    }
    uint64_t v9 = static Update._lock;
    _MovableLockLock(static Update._lock);
    specialized static Update.begin()();
    closure #1 in ImageRendererHost.render(ifNewerThan:renderer:)(v4, a1, a2 & 1, a3, a4);
    static Update.end()();
    uint64_t result = _MovableLockUnlock(v9);
    *(unsigned char *)(v4 + 88) = 1;
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in ImageRendererHost.render(ifNewerThan:renderer:)(uint64_t a1, uint64_t a2, char a3, void (*a4)(uint64_t, uint64_t (*)(unint64_t *a1), double), uint64_t a5)
{
  uint64_t v28 = a5;
  uint64_t v35 = a4;
  uint64_t v8 = type metadata accessor for ImageRendererHost();
  type metadata accessor for (DisplayList, DisplayList.Version)();
  ViewRendererHost.updateViewGraph<A>(body:)((void (*)(void))closure #1 in closure #1 in ImageRendererHost.render(ifNewerThan:renderer:), 0, v8, v9, (uint64_t)&protocol witness table for ImageRendererHost<A>);
  uint64_t v10 = v32;
  __int16 v11 = v33;
  char v12 = BYTE2(v33);
  uint64_t v13 = v34;
  if ((a3 & 1) == 0 && v34 <= a2) {
    return swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  Swift::Bool value = printTree.value;
  if (printTree.value == 2)
  {
    uint64_t v16 = getenv("SWIFTUI_PRINT_TREE");
    if (!v16)
    {
      printTree.Swift::Bool value = 0;
      swift_endAccess();
      goto LABEL_11;
    }
    int v17 = atoi(v16);
    printTree.Swift::Bool value = v17 != 0;
    swift_endAccess();
    if (!v17) {
      goto LABEL_11;
    }
    goto LABEL_9;
  }
  swift_endAccess();
  if (value)
  {
LABEL_9:
    type metadata accessor for _ContiguousArrayStorage<Any>();
    uint64_t v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_2461B9DC0;
    uint64_t v32 = 0;
    unint64_t v33 = 0xE000000000000000;
    _StringGuts.grow(_:)(22);
    v19._object = (void *)0x8000000246225760;
    v19._countAndFlagsBits = 0xD000000000000010;
    String.append(_:)(v19);
    _print_unlocked<A, B>(_:_:)();
    v20._countAndFlagsBits = 2618;
    v20._object = (void *)0xE200000000000000;
    String.append(_:)(v20);
    uint64_t v29 = v10;
    __int16 v30 = v11;
    char v31 = v12;
    v21._countAndFlagsBits = DisplayList.description.getter();
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    *(void *)(v18 + 56) = MEMORY[0x263F8D310];
    *(void *)(v18 + 32) = 0;
    *(void *)(v18 + 40) = 0xE000000000000000;
    print(_:separator:terminator:)();
    swift_bridgeObjectRelease();
  }
LABEL_11:
  uint64_t v22 = AGGraphGetValue();
  double v23 = MEMORY[0x270FA5388](v22);
  uint64_t v24 = a1;
  uint64_t v25 = v10;
  __int16 v26 = v11;
  char v27 = v12;
  v35(v13, partial apply for closure #3 in closure #1 in ImageRendererHost.render(ifNewerThan:renderer:), v23);
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for ImageRendererHost()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t ImageRendererHost.renderUntilStable()()
{
  uint64_t v1 = 32;
  while (1)
  {
    *(_WORD *)(v0 + 89) = 1;
    AGGraphClearUpdate();
    uint64_t v4 = 0;
    char v5 = 1;
    uint64_t v2 = &v4;
    ViewRendererHost.render(interval:updateDisplayList:targetTimestamp:)(0.0, 1, *(SwiftUI::Time_optional *)(&v2 - 1));
    uint64_t result = AGGraphSetUpdate();
    if (*(unsigned char *)(v0 + 90) != 1) {
      break;
    }
    *(unsigned char *)(v0 + 89) = 0;
    if (!--v1) {
      return result;
    }
  }
  *(unsigned char *)(v0 + 89) = 0;
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in ImageRenderer.render(rasterizationScale:renderer:)(double a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = (uint64_t (*)(uint64_t (*)(CGContext *), void *))v5[2];
  uint64_t v7 = v5[5];
  _OWORD v9[2] = v5[4];
  *(double *)&_OWORD v9[3] = a1;
  *(double *)&void v9[4] = a2;
  void v9[5] = a4;
  v9[6] = a5;
  v9[7] = v7;
  return v6(partial apply for closure #1 in closure #1 in closure #1 in ImageRenderer.render(rasterizationScale:renderer:), v9);
}

uint64_t partial apply for thunk for @callee_guaranteed (@unowned CGSize, @guaranteed @callee_guaranteed (@guaranteed CGContextRef) -> ()) -> ()()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t specialized ImageRendererHost.init(content:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v4 = *v1;
  *((unsigned char *)v1 + 16) = 0;
  *((_DWORD *)v1 + 5) = 0;
  *((unsigned char *)v1 + 24) = 1;
  *((_DWORD *)v1 + 7) = 1;
  *((unsigned char *)v1 + 32) = 3;
  uint64_t v5 = v4;
  v1[5] = (uint64_t)_ViewInputs.base.modify;
  v1[6] = 0;
  *((_WORD *)v1 + 32) = 0;
  *((unsigned char *)v1 + 66) = 0;
  v1[9] = 0;
  v1[10] = 0;
  *(_DWORD *)((char *)v1 + 87) = 0;
  v36[0] = 3;
  type metadata accessor for DisplayList.GraphicsRenderer();
  swift_allocObject();
  v1[12] = DisplayList.GraphicsRenderer.init(platformViewMode:)(v36);
  v1[19] = 0;
  *(_OWORD *)(v1 + 13) = 0u;
  *(_OWORD *)(v1 + 15) = 0u;
  *(_OWORD *)((char *)v1 + 129) = 0u;
  uint64_t v6 = (char *)v2 + *(void *)(*v2 + 248);
  *(void *)uint64_t v6 = 0;
  void v6[8] = 1;
  *((void *)v6 + 2) = 0;
  v6[24] = 1;
  if (objc_msgSend(self, sel_isMainThread))
  {
    uint64_t v7 = *(void *)(v5 + 80);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))((uint64_t)v1 + *(void *)(*v1 + 232), a1, v7);
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v8 = *(void (**)(uint64_t *))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue2.shared) + 0x68);
    uint64_t v9 = static CoreGlue2.shared;
    v8(&v37);

    EnvironmentValues.configureForRoot()();
    unint64_t v10 = _CUIDefaultDisplayGamut();
    if (v10 > 1) {
      goto LABEL_18;
    }
    char v11 = v10 != 0;
    uint64_t v12 = v37;
    swift_retain_n();
    specialized closure #1 in PropertyList.subscript.setter(&v37, v11);
    swift_release();
    uint64_t v13 = v38;
    if (v38)
    {
      uint64_t v14 = v37;
      swift_retain();
      swift_retain();
      specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v12, v14);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      uint64_t v14 = v37;
    }
    uint64_t v15 = (void *)((char *)v2 + *(void *)(*v2 + 240));
    *uint64_t v15 = v14;
    v15[1] = v13;
    swift_retain();
    swift_retain();
    specialized static Update.begin()();
    char v16 = byte_26FA88299;
    if ((byte_26FA88299 & ~byte_26FA88298) == 0) {
      char v16 = 0;
    }
    char v17 = v16 | byte_26FA88298;
    type metadata accessor for ViewGraph();
    v35[0] = v17;
    uint64_t v18 = ViewGraph.__allocating_init<A>(rootViewType:requestedOutputs:)(v7, v35, v7, *(void *)(v5 + 88));
    v2[7] = v18;
    swift_beginAccess();
    type metadata accessor for ViewGraphFeatureBuffer._VTable<ImageRendererHostViewGraph>();
    uint64_t v20 = v19;
    Swift::String v21 = (void *)UnsafeHeterogeneousBuffer.allocate(bytes:)(16);
    *Swift::String v21 = v20;
    v21[1] = 16;
    uint64_t v22 = *(void *)(v18 + 216);
    if (!v22) {
LABEL_19:
    }
      __break(1u);
    uint64_t v23 = (uint64_t)v21 - v22;
    if (v23 < (uint64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
    }
    else if (v23 <= 0x7FFFFFFF)
    {
      int v24 = *(_DWORD *)(v18 + 228);
      BOOL v25 = __OFADD__(v24, 1);
      int v26 = v24 + 1;
      if (!v25)
      {
        *(_DWORD *)(v18 + 228) = v26;
        swift_endAccess();
        swift_retain();
        ViewGraph.setRootView<A>(_:)(a1, v7);
        swift_release();
        char v27 = (void *)v2[7];
        swift_beginAccess();
        uint64_t v28 = (void *)v27[2];
        uint64_t v29 = (void *)v27[3];
        __int16 v30 = (void *)v27[4];
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain_n();
        swift_retain();
        id v31 = v28;
        id v32 = v29;
        id v33 = v30;
        AGGraphSetValue();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();

        swift_release_n();
        ViewRendererHost.initializeViewGraph()();
        ImageRendererHost.updateSizeThatFitsObserver()();
        static Update.end()();
        swift_release();
        swift_release();
        return (uint64_t)v2;
      }
      goto LABEL_17;
    }
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t EnvironmentValues.displayGamut.setter(unsigned __int8 *a1, void (*a2)(uint64_t *, uint64_t, uint64_t *), void (*a3)(uint64_t, uint64_t))
{
  uint64_t v6 = *a1;
  uint64_t v7 = *v3;
  swift_retain_n();
  a2(v3, v6, &v10);
  swift_release();
  if (v3[1])
  {
    uint64_t v8 = *v3;
    swift_retain();
    swift_retain();
    a3(v7, v8);
    swift_release();
    swift_release();
  }
  return swift_release();
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<DisplayGamutKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<DisplayGamutKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DisplayGamutKey>, (uint64_t)&type metadata for DisplayGamutKey, (uint64_t)&protocol witness table for DisplayGamutKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DisplayGamutKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<DisplayGamutKey>>);
    }
  }
}

Swift::Void __swiftcall ViewRendererHost.initializeViewGraph()()
{
  uint64_t v3 = v1;
  uint64_t v4 = v0;
  uint64_t v5 = type metadata accessor for OSSignpostID();
  uint64_t v34 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v9 = MEMORY[0x270FA5388](v8);
  uint64_t v35 = (char *)&v32 - v10;
  *(void *)&long long v36 = v4;
  char v11 = *(uint64_t (**)(uint64_t, uint64_t, double))(v3 + 16);
  uint64_t v12 = v11(v4, v3, v9);
  uint64_t v13 = *(void *)(v3 + 8);
  swift_beginAccess();
  *(void *)(v12 + 208) = v13;
  swift_unknownObjectWeakAssign();
  swift_release();
  int v14 = static os_signpost_type_t.event.getter();
  static os_signpost_type_t.event.getter();
  if (kdebug_is_enabled())
  {
    int v33 = v14;
    uint64_t v15 = one-time initialization token for _signpostLog;
    swift_unknownObjectRetain();
    if (v15 != -1) {
      swift_once();
    }
    id v16 = (id)_signpostLog;
    char v17 = v35;
    OSSignpostID.init(log:object:)();
    _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_5(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, MEMORY[0x263F8E0F8]);
    initedouble d = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2461BDD50;
    uint64_t v19 = ((uint64_t (*)(void, uint64_t))v11)(v36, v3);
    swift_beginAccess();
    if (!*(void *)(v19 + 16))
    {
      __break(1u);
      return;
    }
    uint64_t Counter = AGGraphGetCounter();
    swift_release();
    uint64_t v21 = MEMORY[0x263F8D9D0];
    *(void *)(inited + 72) = v2;
    uint64_t v22 = inited + 72;
    uint64_t v23 = MEMORY[0x263F8DA20];
    *(void *)(inited + 56) = v21;
    *(void *)(inited + 64) = v23;
    *(void *)(inited + 32) = Counter;
    *(void *)(inited + 96) = v21;
    *(void *)(inited + 104) = v23;
    int v24 = (void (**)(char *, uint64_t, uint64_t))(v34 + 16);
    (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v7, v17, v5);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    uint64_t v25 = swift_initStackObject();
    long long v36 = xmmword_2461BE2B0;
    *(_OWORD *)(v25 + 16) = xmmword_2461BE2B0;
    if (*(void *)(inited + 16))
    {
      uint64_t v26 = v25;
      outlined init with copy of AnyTrackedValue(inited + 32, v25 + 32);
      if (*(void *)(inited + 16) >= 2uLL)
      {
        uint64_t v32 = inited;
        initedouble d = v33 | 0x14110024u;
        outlined init with copy of AnyTrackedValue(v22, v26 + 72);
        *(_OWORD *)(v26 + 128) = 0u;
        *(void *)(v26 + 144) = 0;
        *(_OWORD *)(v26 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(inited, v26, inited, (uint64_t)v7);
        outlined init with copy of CVarArg?(v26 + 112, (uint64_t)v37);
        swift_bridgeObjectRelease();
        if (!v38)
        {
LABEL_14:
          outlined destroy of CVarArg?((uint64_t)v37);
          swift_bridgeObjectRelease();
          id v31 = *(void (**)(char *, uint64_t))(v34 + 8);
          v31(v35, v5);
          v31(v7, v5);
          return;
        }
        ++v24;
        outlined destroy of CVarArg?((uint64_t)v37);
        if (one-time initialization token for continuation == -1)
        {
LABEL_9:
          uint64_t v27 = __swift_project_value_buffer(v5, (uint64_t)static OSSignpostID.continuation);
          uint64_t v28 = *v24;
          while (1)
          {
            v28(v7, v27, v5);
            uint64_t v29 = swift_initStackObject();
            *(_OWORD *)(v29 + 16) = v36;
            *(_OWORD *)(v29 + 32) = 0u;
            *(_OWORD *)(v29 + 48) = 0u;
            *(_OWORD *)(v29 + 64) = 0u;
            *(_OWORD *)(v29 + 80) = 0u;
            *(_OWORD *)(v29 + 96) = 0u;
            *(_OWORD *)(v29 + 128) = 0u;
            *(void *)(v29 + 144) = 0;
            *(_OWORD *)(v29 + 112) = 0u;
            uint64_t v30 = v29 + 112;
            specialized withKDebugValues(_:_:closure:)(inited, v29, inited, (uint64_t)v7);
            outlined init with copy of CVarArg?(v30, (uint64_t)v37);
            swift_bridgeObjectRelease();
            if (!v38) {
              break;
            }
            outlined destroy of CVarArg?((uint64_t)v37);
            if (one-time initialization token for continuation != -1) {
              swift_once();
            }
            uint64_t v27 = __swift_project_value_buffer(v5, (uint64_t)static OSSignpostID.continuation);
          }
          goto LABEL_14;
        }
LABEL_18:
        swift_once();
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_18;
  }
}

Swift::Void __swiftcall ImageRendererHost.updateRootView()()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 80);
  uint64_t v3 = *(void *)(v2 - 8);
  ((void (*)())MEMORY[0x270FA5388])();
  uint64_t v5 = (char *)&v7 - v4;
  uint64_t v6 = (uint64_t)v0 + *(void *)(v1 + 232);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  ViewGraph.setRootView<A>(_:)((uint64_t)v5, v2);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t ViewGraph.setRootView<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a2 - 8);
  double v5 = MEMORY[0x270FA5388](a1);
  uint64_t v7 = &v12[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  int v8 = *(_DWORD *)(v2 + 236);
  (*(void (**)(char *, double))(v4 + 16))(v7, v5);
  uint64_t v13 = a2;
  int v14 = v8;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v7, (uint64_t)_s14AttributeGraph0A0V8setValueySbxFSbSPyxGXEfU_TA_0, (uint64_t)v12, a2, MEMORY[0x263F8E628], MEMORY[0x263F8D4F8], MEMORY[0x263F8E658], v9);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, a2);
}

uint64_t ImageRenderer.content.setter(uint64_t a1)
{
  uint64_t v3 = *v1;
  specialized ImageRenderer.content.setter(a1);
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 8);

  return v4(a1);
}

uint64_t specialized ImageRenderer.content.setter(uint64_t a1)
{
  return specialized ImageRendererHost.content.setter(a1);
}

uint64_t specialized ImageRendererHost.content.setter(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (char *)v1 + *(void *)(*v1 + 232);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 24))(v4, a1);
  swift_endAccess();
  uint64_t v5 = *v1;
  v7[0] = 1;
  return ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)(v7, 1, v5, (uint64_t)&protocol witness table for ImageRendererHost<A>);
}

uint64_t ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)(unsigned __int16 *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  unsigned __int16 v9 = *a1;
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  uint64_t v10 = static Update._lock;
  _MovableLockLock(static Update._lock);
  closure #1 in ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)(v5, v9, a2 & 1, a3, a4);

  return _MovableLockUnlock(v10);
}

void *closure #1 in ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)(uint64_t a1, unsigned __int16 a2, char a3, uint64_t a4, uint64_t a5)
{
  int v8 = a2;
  uint64_t result = (*(void *(**)(void *__return_ptr, uint64_t, uint64_t))(a5 + 56))(v11, a4, a5);
  if ((v8 & ~LOWORD(v11[0])) != 0)
  {
    LOWORD(v11[0]) |= v8;
    (*(void (**)(void *, uint64_t, uint64_t))(a5 + 64))(v11, a4, a5);
    uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 16))(a4, a5);
    swift_beginAccess();
    *(unsigned char *)(v10 + 168) &= a3 & 1;
    swift_beginAccess();
    if (*(void *)(v10 + 16)) {
      AGGraphSetNeedsUpdate();
    }
    swift_release();
    return (void *)(*(uint64_t (**)(uint64_t, double))(*(void *)(a5 + 8) + 32))(a4, 0.0);
  }
  return result;
}

uint64_t protocol witness for ViewRendererHost.viewGraph.getter in conformance ImageRendererHost<A>()
{
  specialized ImageRendererHost.viewGraph.getter();

  return swift_retain();
}

uint64_t specialized ImageRendererHost.viewGraph.getter()
{
  return *(void *)(v0 + 56);
}

uint64_t ImageRendererHost.propertiesNeedingUpdate.getter@<X0>(_WORD *a1@<X8>)
{
  uint64_t result = swift_beginAccess();
  *a1 = *(_WORD *)(v1 + 64);
  return result;
}

uint64_t ImageRendererHost.propertiesNeedingUpdate.setter(__int16 *a1)
{
  __int16 v2 = *a1;
  uint64_t result = swift_beginAccess();
  *(_WORD *)(v1 + 64) = v2;
  return result;
}

void specialized ImageRendererHost.requestUpdate(after:)()
{
  if (*(unsigned char *)(v0 + 89))
  {
    *(unsigned char *)(v0 + 90) = 1;
  }
  else
  {
    swift_beginAccess();
    *(unsigned char *)(v0 + 144) = 1;
    if (*(unsigned char *)(v0 + 88) == 1)
    {
      *(unsigned char *)(v0 + 88) = 0;
      uint64_t v1 = *(void (**)(uint64_t))(v0 + 40);
      uint64_t v2 = swift_retain();
      v1(v2);
      swift_release();
    }
  }
}

uint64_t partial apply for closure #1 in ImageRenderer.init(content:)()
{
  return closure #1 in ImageRenderer.init(content:)(v0[4], v0[2], v0[3]);
}

uint64_t closure #1 in ImageRenderer.init(content:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    swift_retain();
    swift_release();
    type metadata accessor for PassthroughSubject<(), Never>();
    lazy protocol witness table accessor for type PassthroughSubject<(), Never> and conformance PassthroughSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type PassthroughSubject<(), Never> and conformance PassthroughSubject<A, B>, (void (*)(uint64_t))type metadata accessor for PassthroughSubject<(), Never>);
    Subject<>.send()();
    swift_release();
  }
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v7 = result;
    swift_beginAccess();
    int v8 = *(unsigned __int8 *)(v7 + 36);
    uint64_t result = swift_release();
    if (v8 == 1)
    {
      unsigned __int16 v9 = (void *)swift_allocObject();
      _OWORD v9[2] = a2;
      _OWORD v9[3] = a3;
      void v9[4] = a1;
      swift_retain();
      specialized static Update.begin()();
      uint64_t v10 = swift_allocObject();
      *(void *)(v10 + 16) = partial apply for closure #1 in closure #1 in ImageRenderer.init(content:);
      *(void *)(v10 + 24) = v9;
      uint64_t v11 = one-time initialization token for actions;
      swift_retain();
      if (v11 != -1) {
        swift_once();
      }
      uint64_t v12 = static Update.actions;
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
      }
      unint64_t v14 = v12[2];
      unint64_t v13 = v12[3];
      if (v14 >= v13 >> 1) {
        uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v13 > 1), v14 + 1, 1, v12);
      }
      void v12[2] = v14 + 1;
      uint64_t v15 = &v12[2 * v14];
      void v15[4] = partial apply for thunk for @escaping @callee_guaranteed () -> ();
      v15[5] = v10;
      static Update.actions = v12;
      swift_bridgeObjectRelease();
      static Update.end()();
      return swift_release();
    }
  }
  return result;
}

void type metadata accessor for PassthroughSubject<(), Never>()
{
  if (!lazy cache variable for type metadata for PassthroughSubject<(), Never>)
  {
    unint64_t v0 = type metadata accessor for PassthroughSubject();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PassthroughSubject<(), Never>);
    }
  }
}

uint64_t assignWithCopy for AddGestureModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  uint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  int v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(((unint64_t)v7 + 19) & 0xFFFFFFFFFFFFFFF8) = *(_DWORD *)(((unint64_t)v8 + 19) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void *assignWithCopy for ZStack(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t assignWithCopy for VStack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v5 + 24))((*(unsigned __int8 *)(v5 + 80) + 17 + a1) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), (*(unsigned __int8 *)(v5 + 80) + 17 + a2) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  return a1;
}

uint64_t assignWithCopy for CodableAttributedString.Range.EncodingWrapper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t assignWithCopy for CombinedKeyframes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(*(void *)(a3 + 32) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 24))((*(void *)(v6 + 40) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(void *)(v6 + 40) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t assignWithCopy for SimultaneousGesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 24))((*(void *)(v6 + 40) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(void *)(v6 + 40) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

void *assignWithCopy for _EnvironmentKeyWritingModifier(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

unsigned __int8 *assignWithCopy for _ConditionalContent(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(a3 + 24);
    uint64_t v7 = *(void *)(v5 - 8);
    uint64_t v8 = *(void *)(v6 - 8);
    if (*(void *)(v8 + 64) <= *(void *)(v7 + 64)) {
      uint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    }
    else {
      uint64_t v9 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    unsigned int v10 = a1[v9];
    unsigned int v11 = v10 - 2;
    if (v10 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v12 = v9;
      }
      else {
        uint64_t v12 = 4;
      }
      switch(v12)
      {
        case 1:
          int v13 = *a1;
          goto LABEL_14;
        case 2:
          int v13 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v13 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v13 = *(_DWORD *)a1;
LABEL_14:
          int v14 = (v13 | (v11 << (8 * v9))) + 2;
          unsigned int v10 = v13 + 2;
          if (v9 < 4) {
            unsigned int v10 = v14;
          }
          break;
        default:
          break;
      }
    }
    if (v10 == 1) {
      uint64_t v15 = *(void *)(v6 - 8);
    }
    else {
      uint64_t v15 = *(void *)(*(void *)(a3 + 16) - 8);
    }
    if (v10 == 1) {
      uint64_t v16 = *(void *)(a3 + 24);
    }
    else {
      uint64_t v16 = *(void *)(a3 + 16);
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v15 + 8))(a1, v16);
    unsigned int v17 = a2[v9];
    unsigned int v18 = v17 - 2;
    if (v17 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v19 = v9;
      }
      else {
        uint64_t v19 = 4;
      }
      switch(v19)
      {
        case 1:
          int v20 = *a2;
          goto LABEL_31;
        case 2:
          int v20 = *(unsigned __int16 *)a2;
          goto LABEL_31;
        case 3:
          int v20 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_31;
        case 4:
          int v20 = *(_DWORD *)a2;
LABEL_31:
          int v21 = (v20 | (v18 << (8 * v9))) + 2;
          unsigned int v17 = v20 + 2;
          if (v9 < 4) {
            unsigned int v17 = v21;
          }
          break;
        default:
          break;
      }
    }
    BOOL v22 = v17 == 1;
    if (v17 == 1) {
      uint64_t v23 = v8;
    }
    else {
      uint64_t v23 = v7;
    }
    if (v17 == 1) {
      uint64_t v24 = v6;
    }
    else {
      uint64_t v24 = v5;
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v23 + 16))(a1, a2, v24);
    a1[v9] = v22;
  }
  return a1;
}

void *assignWithCopy for _AppearanceActionModifier(void *a1, void *a2)
{
  uint64_t v4 = *a2;
  if (*a1)
  {
    if (v4)
    {
      uint64_t v5 = a2[1];
      *a1 = v4;
      a1[1] = v5;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    uint64_t v6 = a2[1];
    *a1 = v4;
    a1[1] = v6;
    swift_retain();
    goto LABEL_8;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_8:
  uint64_t v7 = a2[2];
  if (!a1[2])
  {
    if (v7)
    {
      uint64_t v9 = a2[3];
      a1[2] = v7;
      a1[3] = v9;
      swift_retain();
      return a1;
    }
LABEL_14:
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
    return a1;
  }
  if (!v7)
  {
    swift_release();
    goto LABEL_14;
  }
  uint64_t v8 = a2[3];
  a1[2] = v7;
  a1[3] = v8;
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithCopy for TraitTransformerModifier(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithCopy for _EndedGesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  uint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = v8[1];
  *uint64_t v7 = *v8;
  v7[1] = v9;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithCopy for _OverlayModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  uint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v7 = *v8;
  v7[1] = v8[1];
  return a1;
}

void *assignWithCopy for _EnvironmentKeyTransformModifier(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithCopy for _IntelligenceSupport.AnimatingText(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  outlined copy of Text.Storage(*(void *)a2, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  char v9 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  outlined consume of Text.Storage(v7, v8, v9);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t destroy for _PreferenceWritingModifier(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);

  return v3(a1, AssociatedTypeWitness);
}

uint64_t destroy for StrokeShapeView(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a2[2] - 8) + 8;
  (*(void (**)(void))v4)();
  uint64_t v5 = *(void *)(v4 + 56) + 7;
  swift_bridgeObjectRelease();
  unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)(a2[3] - 8);
  uint64_t v8 = v7 + 8;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = v6 + v9 + 40;
  (*(void (**)(uint64_t))(v7 + 8))((v10 + a1) & ~v9);
  uint64_t v11 = *(void *)(a2[4] - 8);
  uint64_t v12 = *(uint64_t (**)(uint64_t))(v11 + 8);
  uint64_t v13 = *(_DWORD *)(v11 + 80) & 0xF8 | 7;
  uint64_t v14 = (a1 + *(void *)(v8 + 56) + v13 + (v10 & ~v9) + 2) & ~v13;

  return v12(v14);
}

uint64_t initializeWithCopy for StrokeShapeView(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 48) + 7;
  unint64_t v8 = (v7 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = (v7 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v8 = *(void *)v9;
  *(_DWORD *)(v8 + 8) = *(_DWORD *)(v9 + 8);
  *(_DWORD *)(v8 + 12) = *(_DWORD *)(v9 + 12);
  *(void *)(v8 + 16) = *(void *)(v9 + 16);
  *(void *)(v8 + 24) = *(void *)(v9 + 24);
  *(void *)(v8 + 32) = *(void *)(v9 + 32);
  uint64_t v10 = a3[3];
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 16);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v13 + 40;
  swift_bridgeObjectRetain();
  v12((v14 + a1) & ~v13, (v14 + a2) & ~v13, v10);
  uint64_t v15 = *(void *)(v11 + 64);
  *(_WORD *)(v15 + ((v14 + a1) & ~v13)) = *(_WORD *)(v15 + ((v14 + a2) & ~v13));
  uint64_t v16 = *(void *)(a3[4] - 8);
  uint64_t v17 = v16 + 16;
  uint64_t v18 = *(_DWORD *)(v16 + 80) & 0xF8 | 7;
  uint64_t v19 = v15 + v18 + (v14 & ~v13) + 2;
  uint64_t v20 = (v19 + a1) & ~v18;
  uint64_t v21 = (v19 + a2) & ~v18;
  (*(void (**)(uint64_t, uint64_t))(v16 + 16))(v20, v21);
  *(_OWORD *)((*(void *)(v17 + 48) + 7 + v20) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(void *)(v17 + 48)
                                                                                       + 7
                                                                                       + v21) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithCopy for ModifierGesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 24))((*(void *)(v6 + 40) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(void *)(v6 + 40) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t assignWithCopy for StyledTextContentView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t assignWithCopy for _OverlayStyleModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  *(unsigned char *)(*(void *)(v5 + 40) + a1) = *(unsigned char *)(*(void *)(v5 + 40) + a2);
  return a1;
}

uint64_t assignWithCopy for ForEach(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  uint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = v8[1];
  *uint64_t v7 = *v8;
  v7[1] = v9;
  swift_retain();
  swift_release();
  uint64_t v10 = (void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = (void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  void *v10 = *v11;
  swift_retain();
  swift_release();
  uint64_t v12 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v12 = *v13;
  swift_retain();
  swift_release();
  *(void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithCopy for _TraitWritingModifier(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 24))(a1, a2, AssociatedTypeWitness);
  return a1;
}

void *assignWithCopy for ClosestFitCache(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t lazy protocol witness table accessor for type PassthroughSubject<(), Never> and conformance PassthroughSubject<A, B>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t View.onTapGesture(count:perform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a2;
  *(void *)(v10 + 24) = a3;
  v15[0] = a1;
  v15[1] = partial apply for closure #1 in Transaction.addAnimationListener(allFinished:);
  _OWORD v15[2] = v10;
  type metadata accessor for SingleTapGesture<TappableEvent>(0, (unint64_t *)&lazy cache variable for type metadata for _EndedGesture<TapGesture>, (uint64_t)&type metadata for TapGesture, (uint64_t)&protocol witness table for TapGesture, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _EndedGesture);
  uint64_t v12 = v11;
  unint64_t v13 = lazy protocol witness table accessor for type _EndedGesture<TapGesture> and conformance _EndedGesture<A>();
  swift_retain();
  View.gesture<A>(_:including:)((uint64_t)v15, 3, a4, v12, a5, v13);
  return swift_release();
}

uint64_t View.gesture<A>(_:including:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(char *, void, void, uint64_t, uint64_t, uint64_t))
{
  uint64_t v26 = a8;
  uint64_t v27 = a5;
  uint64_t v25 = a3;
  uint64_t v12 = *(void *)(a4 - 8);
  double v13 = MEMORY[0x270FA5388](a1);
  uint64_t v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = v18(0, v16, v17, v13);
  uint64_t v20 = *(void *)(v19 - 8);
  double v21 = MEMORY[0x270FA5388](v19);
  uint64_t v23 = (char *)&v25 - v22;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))(v15, a1, a4, v21);
  v26(v15, 0, 0, a2, a4, a6);
  View.modifier<A>(_:)(v23, v25, v19);
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v23, v19);
}

uint64_t destroy for AddGestureModifier(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();

  return swift_bridgeObjectRelease();
}

uint64_t destroy for ModifierGesture(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 24) - 8) + 8;
  (*(void (**)(void))v4)();
  uint64_t v5 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v6 = *(uint64_t (**)(unint64_t))(v5 + 8);
  unint64_t v7 = (*(void *)(v4 + 56) + a1 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);

  return v6(v7);
}

uint64_t type metadata accessor for AddGestureModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t AddGestureModifier.init(_:name:gestureMask:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t (*a7)(void, uint64_t, uint64_t)@<X6>, uint64_t a8@<X8>)
{
  uint64_t v14 = a7(0, a5, a6);
  uint64_t v15 = (void *)(a8 + *(int *)(v14 + 36));
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(a8, a1, a5);
  *uint64_t v15 = a2;
  v15[1] = a3;
  *(_DWORD *)(a8 + *(int *)(v14 + 40)) = a4;
  return result;
}

uint64_t get_witness_table_7SwiftUI4ViewRzAA7GestureRd__r__lAA15ModifiedContentVyxAA03AddD8ModifierVyqd__GGAaBHPxAaBHD1__AhA0cH0HPyHCHCTm(uint64_t a1, void (*a2)(uint64_t, void, void))
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for SimultaneousGestureModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t View.gesture<A>(_:including:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return View.gesture<A>(_:including:)(a1, a2, a3, a4, a5, a6, (uint64_t)type metadata accessor for AddGestureModifier, (void (*)(char *, void, void, uint64_t, uint64_t, uint64_t))AddGestureModifier.init(_:name:gestureMask:));
}

uint64_t AddGestureModifier.init(_:name:gestureMask:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return AddGestureModifier.init(_:name:gestureMask:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AddGestureModifier, a7);
}

void type metadata accessor for SingleTapGesture<TappableEvent>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t type metadata accessor for _EndedGesture()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type _EndedGesture<TapGesture> and conformance _EndedGesture<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _EndedGesture<TapGesture> and conformance _EndedGesture<A>;
  if (!lazy protocol witness table cache variable for type _EndedGesture<TapGesture> and conformance _EndedGesture<A>)
  {
    type metadata accessor for SingleTapGesture<TappableEvent>(255, (unint64_t *)&lazy cache variable for type metadata for _EndedGesture<TapGesture>, (uint64_t)&type metadata for TapGesture, (uint64_t)&protocol witness table for TapGesture, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _EndedGesture);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EndedGesture<TapGesture> and conformance _EndedGesture<A>);
  }
  return result;
}

uint64_t assignWithCopy for Image.Resolved(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 8);
  if (*(unsigned __int8 *)(a1 + 8) == 255)
  {
    if (v4 == 255)
    {
      id v10 = *(id *)a2;
      *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
      *(void *)a1 = v10;
    }
    else
    {
      id v8 = *(id *)a2;
      outlined copy of GraphicsImage.Contents(*(id *)a2, *(unsigned char *)(a2 + 8));
      *(void *)a1 = v8;
      *(unsigned char *)(a1 + 8) = v4;
    }
  }
  else if (v4 == 255)
  {
    outlined destroy of GraphicsImage.Contents(a1);
    char v9 = *(unsigned char *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(unsigned char *)(a1 + 8) = v9;
  }
  else
  {
    id v5 = *(id *)a2;
    outlined copy of GraphicsImage.Contents(*(id *)a2, *(unsigned char *)(a2 + 8));
    unint64_t v6 = *(void **)a1;
    *(void *)a1 = v5;
    char v7 = *(unsigned char *)(a1 + 8);
    *(unsigned char *)(a1 + 8) = v4;
    outlined consume of GraphicsImage.Contents(v6, v7);
  }
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  long long v11 = *(_OWORD *)(a2 + 44);
  *(unsigned char *)(a1 + 60) = *(unsigned char *)(a2 + 60);
  *(_OWORD *)(a1 + 44) = v11;
  long long v12 = *(_OWORD *)(a2 + 64);
  long long v13 = *(_OWORD *)(a2 + 80);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(_OWORD *)(a1 + 64) = v12;
  *(_OWORD *)(a1 + 80) = v13;
  *(unsigned char *)(a1 + 97) = *(unsigned char *)(a2 + 97);
  *(unsigned char *)(a1 + 98) = *(unsigned char *)(a2 + 98);
  *(unsigned char *)(a1 + 99) = *(unsigned char *)(a2 + 99);
  uint64_t v14 = (_OWORD *)(a1 + 104);
  uint64_t v15 = (_OWORD *)(a2 + 104);
  uint64_t v16 = *(void *)(a2 + 120);
  unint64_t v17 = v16 & 0xFFFFFFFFFFFFFFFELL;
  if (*(void *)(a1 + 120) >> 1 == 0xFFFFFFFFLL)
  {
    if (v17 == 0x1FFFFFFFELL)
    {
      long long v18 = *(_OWORD *)(a2 + 120);
      *uint64_t v14 = *v15;
      *(_OWORD *)(a1 + 120) = v18;
    }
    else
    {
      uint64_t v20 = *(void *)(a2 + 104);
      uint64_t v21 = *(void *)(a2 + 112);
      uint64_t v22 = *(void *)(a2 + 128);
      outlined copy of AccessibilityImageLabel(v20, v21, *(void *)(a2 + 120));
      *(void *)(a1 + 104) = v20;
      *(void *)(a1 + 112) = v21;
      *(void *)(a1 + 120) = v16;
      *(void *)(a1 + 128) = v22;
    }
  }
  else if (v17 == 0x1FFFFFFFELL)
  {
    outlined destroy of AccessibilityImageLabel(a1 + 104);
    long long v19 = *(_OWORD *)(a2 + 120);
    *uint64_t v14 = *v15;
    *(_OWORD *)(a1 + 120) = v19;
  }
  else
  {
    uint64_t v23 = *(void *)(a2 + 104);
    uint64_t v24 = *(void *)(a2 + 112);
    uint64_t v25 = *(void *)(a2 + 128);
    outlined copy of AccessibilityImageLabel(v23, v24, *(void *)(a2 + 120));
    uint64_t v26 = *(void *)(a1 + 104);
    uint64_t v27 = *(void *)(a1 + 112);
    uint64_t v28 = *(void *)(a1 + 120);
    *(void *)(a1 + 104) = v23;
    *(void *)(a1 + 112) = v24;
    *(void *)(a1 + 120) = v16;
    *(void *)(a1 + 128) = v25;
    outlined consume of AccessibilityImageLabel(v26, v27, v28);
  }
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(unsigned char *)(a1 + 153) = *(unsigned char *)(a2 + 153);
  int v29 = *(_DWORD *)(a2 + 156);
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(_DWORD *)(a1 + 156) = v29;
  uint64_t v30 = *(void **)(a1 + 168);
  id v31 = *(void **)(a2 + 168);
  *(void *)(a1 + 168) = v31;
  id v32 = v31;

  *(_WORD *)(a1 + 176) = *(_WORD *)(a2 + 176);
  *(unsigned char *)(a1 + 178) = *(unsigned char *)(a2 + 178);
  return a1;
}

uint64_t SimultaneousGestureModifier.init(_:name:gestureMask:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return AddGestureModifier.init(_:name:gestureMask:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SimultaneousGestureModifier, a7);
}

uint64_t assignWithCopy for _PreferenceWritingModifier(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 24))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t *assignWithCopy for _VariadicView_Children(uint64_t *a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_1(a1, a2);
  int v4 = (void *)a2[5];
  id v5 = (void *)a1[5];
  a1[5] = (uint64_t)v4;
  id v6 = v4;

  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithCopy for Text.ResolvedProperties.Transition(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(unsigned __int8 *)(a2 + 12);
  uint64_t v6 = *(unsigned int *)(a2 + 8);
  char v7 = *(unsigned char *)(a2 + 13);
  outlined copy of ContentTransition.Storage(*(void *)a2, v6 | (v5 << 32), v7);
  uint64_t v8 = *(void *)a1;
  unint64_t v9 = *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 12) << 32);
  *(void *)a1 = v4;
  *(_DWORD *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 12) = v5;
  char v10 = *(unsigned char *)(a1 + 13);
  *(unsigned char *)(a1 + 13) = v7;
  outlined consume of ContentTransition.Storage(v8, v9, v10);
  *(unsigned char *)(a1 + 14) = *(unsigned char *)(a2 + 14);
  return a1;
}

uint64_t assignWithCopy for _OverlayShapeModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 40);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v9 = v8 + 24;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v12, v13);
  uint64_t v14 = *(void *)(v9 + 40);
  uint64_t v15 = (unsigned char *)(v14 + v12);
  uint64_t v16 = (unsigned char *)(v14 + v13);
  *uint64_t v15 = *v16;
  v15[1] = v16[1];
  return a1;
}

void *assignWithCopy for _OverlayPreferenceModifier(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

uint64_t assignWithCopy for CustomModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

void *assignWithCopy for LinearGradient(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  return a1;
}

uint64_t type metadata accessor for DisplayList.GraphicsRenderer()
{
  return self;
}

uint64_t DisplayList.GraphicsRenderer.init(platformViewMode:)(char *a1)
{
  char v2 = *a1;
  uint64_t v3 = MEMORY[0x263F8EE80];
  *(void *)(v1 + 48) = 0;
  *(void *)(v1 + 16) = v3;
  *(void *)(v1 + 24) = v3;
  *(void *)(v1 + 32) = v3;
  *(void *)(v1 + 40) = v3;
  *(void *)(v1 + 72) = 0;
  *(void *)(v1 + 56) = 0;
  *(unsigned char *)(v1 + 64) = 0;
  if (one-time initialization token for infinity != -1) {
    swift_once();
  }
  *(void *)(v1 + 80) = static Time.infinity;
  *(void *)(v1 + 88) = 0;
  *(unsigned char *)(v1 + 96) = 0;
  *(void *)(v1 + 104) = MEMORY[0x263F8EE78];
  *(unsigned char *)(v1 + 112) = v2;
  BOOL v4 = __CFADD__(lastIdentity, 1);
  Swift::UInt32 v5 = ++lastIdentity;
  if (v4)
  {
    char v7 = 0;
    int v6 = *(_DWORD *)(v1 + 52) + 1;
  }
  else
  {
    int v6 = 0;
    *(_DWORD *)(v1 + 48) = v5;
    char v7 = 1;
  }
  *(_DWORD *)(v1 + 52) = v6;
  *(unsigned char *)(v1 + 64) = v7;
  return v1;
}

uint64_t assignWithCopy for _VariadicView_Children.Element(uint64_t a1, uint64_t a2)
{
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  BOOL v4 = *(void **)(a1 + 80);
  Swift::UInt32 v5 = *(void **)(a2 + 80);
  *(void *)(a1 + 80) = v5;
  id v6 = v5;

  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithCopy for CodableOptional(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  char v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v5);
  int v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
      return a1;
    }
    uint64_t v13 = *(void (**)(void *, uint64_t))(v6 + 8);
    uint64_t v12 = v6 + 8;
    v13(a1, v5);
    int v10 = *(_DWORD *)(v12 + 76);
    size_t v11 = *(void *)(v12 + 56);
  }
  if (v10) {
    size_t v14 = v11;
  }
  else {
    size_t v14 = v11 + 1;
  }
  memcpy(a1, a2, v14);
  return a1;
}

void *assignWithCopy for _BindingActionModifier(void *a1, void *a2, uint64_t a3)
{
  unint64_t v6 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_retain();
  swift_release();
  char v7 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 &= 0xFFFFFFFFFFFFFFF8;
  *char v7 = *(void *)v6;
  swift_retain();
  swift_release();
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v9 = v8 + 24;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  (*(void (**)(unint64_t, unint64_t))(v8 + 24))(((unint64_t)v7 + v10 + 8) & ~v10, (v10 + 8 + v6) & ~v10);
  uint64_t v11 = ((v10 + 16) & ~v10) + *(void *)(v9 + 40) + 7;
  uint64_t v12 = (void *)(((unint64_t)a1 + v11) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = (void *)(((unint64_t)a2 + v11) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v14 = v13[1];
  *uint64_t v12 = *v13;
  v12[1] = v14;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithCopy for StrokeShapeView(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 40) + 7;
  unint64_t v8 = (v7 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = (v7 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v8 = *(void *)v9;
  *(_DWORD *)(v8 + 8) = *(_DWORD *)(v9 + 8);
  *(_DWORD *)(v8 + 12) = *(_DWORD *)(v9 + 12);
  *(void *)(v8 + 16) = *(void *)(v9 + 16);
  *(void *)(v8 + 24) = *(void *)(v9 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v8 + 32) = *(void *)(v9 + 32);
  uint64_t v10 = *(void *)(a3[3] - 8);
  uint64_t v11 = v10 + 24;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  unint64_t v13 = (v7 & 0xFFFFFFFFFFFFFFF8) + v12 + 40;
  unint64_t v14 = (v13 + a2) & ~v12;
  (*(void (**)(unint64_t, unint64_t))(v10 + 24))((v13 + a1) & ~v12, v14);
  uint64_t v15 = *(void *)(v11 + 40);
  uint64_t v16 = (unsigned char *)(v15 + ((v13 + a1) & ~v12));
  *uint64_t v16 = *(unsigned char *)(v15 + v14);
  v16[1] = *(unsigned char *)(v15 + v14 + 1);
  uint64_t v17 = *(void *)(a3[4] - 8);
  uint64_t v18 = v17 + 24;
  uint64_t v19 = *(_DWORD *)(v17 + 80) & 0xF8 | 7;
  uint64_t v20 = v15 + v19 + (v13 & ~v12) + 2;
  uint64_t v21 = (v20 + a1) & ~v19;
  uint64_t v22 = (v20 + a2) & ~v19;
  (*(void (**)(uint64_t, uint64_t))(v17 + 24))(v21, v22);
  uint64_t v23 = *(void *)(v18 + 40) + 7;
  uint64_t v24 = (void *)((v23 + v21) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v25 = (void *)((v23 + v22) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v24 = *v25;
  v24[1] = v25[1];
  return a1;
}

uint64_t _CUIDefaultDisplayGamut()
{
  if (_CUIDefaultDisplayGamut_once != -1) {
    dispatch_once(&_CUIDefaultDisplayGamut_once, &__block_literal_global_1);
  }
  return _CUIDefaultDisplayGamut_defaultGamut;
}

void type metadata accessor for ViewGraphFeatureBuffer._VTable<ImageRendererHostViewGraph>()
{
  if (!lazy cache variable for type metadata for ViewGraphFeatureBuffer._VTable<ImageRendererHostViewGraph>)
  {
    unint64_t v0 = type metadata accessor for ViewGraphFeatureBuffer._VTable();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewGraphFeatureBuffer._VTable<ImageRendererHostViewGraph>);
    }
  }
}

uint64_t ViewGraph.append<A>(feature:)(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  ViewGraphFeatureBuffer.append<A>(_:)(a1, a2, &v5);
  return swift_endAccess();
}

void ViewGraphFeatureBuffer.append<A>(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for ViewGraphFeatureBuffer._VTable();

  UnsafeHeterogeneousBuffer.append<A>(_:vtable:)(a1, v6, a2, a3);
}

uint64_t type metadata accessor for ViewGraphFeatureBuffer._VTable()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t assignWithCopy for _ViewList_View(uint64_t a1, uint64_t a2)
{
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  BOOL v4 = *(void **)(a1 + 80);
  int v5 = *(void **)(a2 + 80);
  *(void *)(a1 + 80) = v5;
  id v6 = v5;

  return a1;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<DisplayGamutKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<DisplayGamutKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<DisplayGamutKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DisplayGamutKey>, (uint64_t)&type metadata for DisplayGamutKey, (uint64_t)&protocol witness table for DisplayGamutKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DisplayGamutKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t assignWithCopy for ScrollPositionBindingModifier(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  if (a1 != a2)
  {
    outlined destroy of ScrollPosition.Storage(a1 + 16);
    if (*(unsigned char *)(a2 + 73))
    {
      long long v4 = *(_OWORD *)(a2 + 16);
      long long v5 = *(_OWORD *)(a2 + 32);
      long long v6 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 58) = *(_OWORD *)(a2 + 58);
      *(_OWORD *)(a1 + 32) = v5;
      *(_OWORD *)(a1 + 48) = v6;
      *(_OWORD *)(a1 + 16) = v4;
    }
    else
    {
      uint64_t v7 = *(void *)(a2 + 40);
      *(void *)(a1 + 40) = v7;
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 16, a2 + 16);
      unsigned __int8 v8 = *(unsigned char *)(a2 + 72);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_WORD *)(a1 + 72) = v8;
    }
  }
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  long long v9 = *(_OWORD *)(a2 + 96);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = v9;
  return a1;
}

uint64_t assignWithCopy for KeyframeAnimator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  uint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unsigned __int8 v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = v8[1];
  *uint64_t v7 = *v8;
  v7[1] = v9;
  swift_retain();
  swift_release();
  uint64_t v10 = (uint64_t *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v11 = ((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v12 = *(void *)v11;
  v11 += 15;
  outlined copy of _SymbolEffect.Trigger(v12);
  uint64_t v13 = *v10;
  uint64_t *v10 = v12;
  outlined consume of _SymbolEffect.Trigger(v13);
  unint64_t v14 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v15 = *(void *)((v11 & 0xFFFFFFFFFFFFFFF8) + 8);
  *unint64_t v14 = *(void *)(v11 & 0xFFFFFFFFFFFFFFF8);
  v14[1] = v15;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithCopy for Text.Sizing(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithCopy for Binding(void *a1, void *a2, uint64_t a3)
{
  unint64_t v5 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v6 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v6 = *(void *)(v5 & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 24))(((unint64_t)v6 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(unsigned __int8 *)(v7 + 80) + 8 + (v5 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t assignWithCopy for Material(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unsigned __int8 v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Material.ID(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  *(void *)a1 = v4;
  unsigned __int8 v7 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of Material.ID(v6, v7);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  return a1;
}

uint64_t assignWithCopy for StrokeBorderShapeView(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void *)(a3[2] - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v7 = *(void *)(v5 + 40);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = v9 + 24;
  uint64_t v34 = a3[3];
  uint64_t v11 = *(void *)(v34 - 8);
  uint64_t v12 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v36 = a3[4];
  uint64_t v13 = *(void *)(v36 - 8);
  unsigned __int8 v14 = *(_DWORD *)(v13 + 80);
  uint64_t v15 = v14 & 0xF8 | 7;
  uint64_t v16 = (v14 | *(_DWORD *)(v9 + 80)) & 0xF8 | v12 | 7;
  uint64_t v17 = v7 + v16;
  uint64_t v18 = (v7 + v16 + a1) & ~v16;
  uint64_t v19 = (v17 + a2) & ~v16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 24))(v18, v19, AssociatedTypeWitness);
  uint64_t v20 = *(void *)(v10 + 40) + 7;
  unint64_t v21 = (v20 + v18) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = (v20 + v19) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v21 = *(void *)v22;
  *(_DWORD *)(v21 + 8) = *(_DWORD *)(v22 + 8);
  *(_DWORD *)(v21 + 12) = *(_DWORD *)(v22 + 12);
  *(void *)(v21 + 16) = *(void *)(v22 + 16);
  *(void *)(v21 + 24) = *(void *)(v22 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v21 + 32) = *(void *)(v22 + 32);
  unint64_t v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + v12 + 40;
  unint64_t v24 = (v23 + v19) & ~v12;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 24))((v23 + v18) & ~v12, v24, v34);
  uint64_t v25 = *(void *)(v11 + 64);
  uint64_t v26 = (unsigned char *)(v25 + ((v23 + v18) & ~v12));
  *uint64_t v26 = *(unsigned char *)(v25 + v24);
  v26[1] = *(unsigned char *)(v25 + v24 + 1);
  uint64_t v27 = (v23 & ~v12) + v25 + v15 + 2;
  uint64_t v28 = (v27 + v18) & ~v15;
  uint64_t v29 = (v27 + v19) & ~v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 24))(v28, v29, v36);
  uint64_t v30 = *(void *)(v13 + 64) + 7;
  id v31 = (void *)((v30 + v28) & 0xFFFFFFFFFFFFFFF8);
  id v32 = (void *)((v30 + v29) & 0xFFFFFFFFFFFFFFF8);
  *id v31 = *v32;
  v31[1] = v32[1];
  return a1;
}

uint64_t assignWithCopy for VariableBlurEffect(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

void *assignWithCopy for SubviewsCollectionSlice(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  __swift_assign_boxed_opaque_existential_1(a1 + 2, a2 + 2);
  uint64_t v4 = (void *)a2[7];
  uint64_t v5 = (void *)a1[7];
  a1[7] = v4;
  id v6 = v4;

  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithCopy for _MatchedGeometryEffect(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  uint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unsigned __int8 v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v7 = *v8;
  unint64_t v9 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)unint64_t v9 = *(_DWORD *)v10;
  *(void *)(v9 + 8) = *(void *)(v10 + 8);
  *(void *)(v9 + 16) = *(void *)(v10 + 16);
  *(unsigned char *)(v9 + 24) = *(unsigned char *)(v10 + 24);
  return a1;
}

void *assignWithCopy for _ShadowEffect(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4, void (*a5)(void))
{
  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v8 = a2;
    goto LABEL_8;
  }
  unint64_t v7 = a4[3];
  uint64_t v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v8 + 0x4000000000000000 >= 0)
  {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v8 = a2;
    }
LABEL_8:
    uint64_t v9 = a4[2];
    if (v8 <= v9) {
      uint64_t v10 = a4[2];
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10)
    {
      a5(0);
      uint64_t v11 = (void *)swift_allocObject();
      size_t v12 = _swift_stdlib_malloc_size(v11);
      void v11[2] = v9;
      void v11[3] = 2 * ((uint64_t)(v12 - 32) / 88);
      uint64_t v13 = v11 + 4;
      if (v6)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[11 * v9 + 4]) {
          memmove(v13, a4 + 4, 88 * v9);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v11 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, (char *)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  size_t v12;
  void *v13;

  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v8 = a2;
    goto LABEL_8;
  }
  unint64_t v7 = a4[3];
  uint64_t v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v8 + 0x4000000000000000 >= 0)
  {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v8 = a2;
    }
LABEL_8:
    uint64_t v9 = a4[2];
    if (v8 <= v9) {
      uint64_t v10 = a4[2];
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10)
    {
      a5(0);
      uint64_t v11 = (void *)swift_allocObject();
      size_t v12 = _swift_stdlib_malloc_size(v11);
      void v11[2] = v9;
      void v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
      uint64_t v13 = v11 + 4;
      if (v6)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[3 * v9 + 4]) {
          memmove(v13, a4 + 4, 24 * v9);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v11 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, (char *)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  int64_t v12;
  uint64_t v13;
  void *v14;

  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v8 = a2;
    goto LABEL_8;
  }
  unint64_t v7 = a4[3];
  uint64_t v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v8 + 0x4000000000000000 >= 0)
  {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v8 = a2;
    }
LABEL_8:
    uint64_t v9 = a4[2];
    if (v8 <= v9) {
      uint64_t v10 = a4[2];
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10)
    {
      a5(0);
      uint64_t v11 = (void *)swift_allocObject();
      size_t v12 = _swift_stdlib_malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 17;
      }
      void v11[2] = v9;
      void v11[3] = 2 * (v13 >> 4);
      unsigned __int8 v14 = v11 + 4;
      if (v6) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v11 = (void *)MEMORY[0x263F8EE78];
      unsigned __int8 v14 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v9 + 4]) {
          memmove(v14, a4 + 4, 16 * v9);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<(CGSize, NSAttributedString.Metrics)>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(CGSize, NSAttributedString.Metrics)>)
  {
    type metadata accessor for (CGSize, NSAttributedString.Metrics)(255, &lazy cache variable for type metadata for (CGSize, NSAttributedString.Metrics), type metadata accessor for CGSize);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(CGSize, NSAttributedString.Metrics)>);
    }
  }
}

void type metadata accessor for (CGSize, NSAttributedString.Metrics)(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v5) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

void static SymbolVariants.none.getter(_WORD *a1@<X8>)
{
  *a1 = 768;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _BlendModeEffect(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ColorMonochromeEffect._Resolved(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static RendererEffect.makeRendererEffect(effect:inputs:body:));
}

uint64_t _ProposedSize.subscript.setter(uint64_t result, char a2, char a3)
{
  if (a3)
  {
    v3[2] = result;
    uint64_t v4 = v3 + 3;
  }
  else
  {
    *uint64_t v3 = result;
    uint64_t v4 = v3 + 1;
  }
  *uint64_t v4 = a2 & 1;
  return result;
}

uint64_t destroy for AsyncTransaction()
{
  swift_release();

  return swift_bridgeObjectRelease();
}

ValueMetadata *type metadata accessor for LegibilityWeight()
{
  return &type metadata for LegibilityWeight;
}

uint64_t type metadata completion function for UnaryElements()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for LineLimitModifier()
{
  return &type metadata for LineLimitModifier;
}

ValueMetadata *type metadata accessor for GraphicsContext.ResolvedSymbol()
{
  return &type metadata for GraphicsContext.ResolvedSymbol;
}

ValueMetadata *type metadata accessor for ZIndexTraitKey()
{
  return &type metadata for ZIndexTraitKey;
}

ValueMetadata *type metadata accessor for GraphicsContext.ResolvedText()
{
  return &type metadata for GraphicsContext.ResolvedText;
}

uint64_t dispatch thunk of AnyLocation.set(_:transaction:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

ValueMetadata *type metadata accessor for _FixedSizeLayout()
{
  return &type metadata for _FixedSizeLayout;
}

void _ViewOutputs.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = MEMORY[0x263F8EE78];
  int v1 = *MEMORY[0x263F288F8];
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v1;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance StyleContextWriter<A>(uint64_t a1, uint64_t *a2)
{
  return specialized static StyleContextWriter._makeInputs(modifier:inputs:)(a2);
}

double ScrollAnchorStorage.alignment.getter()
{
  return ScrollAnchorStorage.initialOffset.getter(2);
}

__n128 __swift_memcpy124_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[6];
  *(_OWORD *)(a1 + 108) = *(long long *)((char *)a2 + 108);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t storeEnumTagSinglePayload for _ViewList_View(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

_OWORD *static CatalogAssetMatchType.defaultValue(idiom:)(uint64_t a1)
{
  if (a1 != 8) {
    return &outlined read-only object #0 of static CatalogAssetMatchType.defaultValue(idiom:);
  }
  _ss23_ContiguousArrayStorageCy7SwiftUI11DisplayListV4ItemVGMaTm_0(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CatalogAssetMatchType>, (uint64_t)&type metadata for CatalogAssetMatchType, MEMORY[0x263F8E0F8]);
  __n128 result = (_OWORD *)swift_allocObject();
  result[1] = xmmword_2461BDD50;
  *((void *)result + 4) = 8;
  *((unsigned char *)result + 40) = 0;
  *((void *)result + 6) = 1;
  *((unsigned char *)result + 56) = 1;
  return result;
}

uint64_t closure #1 in DisplayList.ViewUpdater.render(rootView:from:time:version:maxVersion:environment:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, void *a5@<X4>, uint64_t *a6@<X8>, uint64_t a7@<D0>)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  if (one-time initialization token for normal != -1) {
    swift_once();
  }
  uint64_t v12 = static GraphicsBlendMode.normal;
  char v13 = byte_26B0EB4A0;
  *(void *)&long long v45 = a1;
  DWORD2(v45) = 1065353216;
  *(void *)&long long v46 = static GraphicsBlendMode.normal;
  BYTE8(v46) = byte_26B0EB4A0;
  long long v47 = 0x3FF0000000000000uLL;
  *(void *)&long long v48 = 0;
  *((void *)&v48 + 1) = 0x3FF0000000000000;
  long long v49 = 0uLL;
  *(void *)&long long v50 = MEMORY[0x263F8EE78];
  *((void *)&v50 + 1) = MEMORY[0x263F8EE78];
  HIDWORD(v51) = 0;
  *(void *)&long long v51 = 0;
  *(_DWORD *)((char *)&v51 + 7) = 0;
  memset(&v52[8], 0, 56);
  *(void *)uint64_t v52 = MEMORY[0x263F8EE78];
  swift_beginAccess();
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(unsigned char *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = a3;
  *(_WORD *)(a2 + 136) = a4;
  *(unsigned char *)(a2 + 138) = BYTE2(a4);
  outlined copy of GraphicsBlendMode(v12, v13);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  DisplayList.ViewUpdater.ViewCache.clearAsyncValues()();
  swift_endAccess();
  id v14 = (id)CoreViewLayer(*(_DWORD *)(a2 + 32) & 3, a5);
  id v15 = objc_msgSend(v14, sel_needsLayoutOnGeometryChange);
  objc_msgSend(v14, sel_setNeedsLayoutOnGeometryChange_, 0);
  unint64_t v16 = *(void *)(a2 + 32);
  uint64_t v17 = one-time initialization token for infinity;
  swift_unknownObjectRetain();
  if (v17 != -1) {
    swift_once();
  }
  uint64_t v28 = a5;
  long long v29 = v16;
  uint64_t v30 = static Time.infinity;
  uint64_t v31 = 0;
  *(void *)&v32[0] = a3;
  WORD4(v32[0]) = a4;
  BYTE10(v32[0]) = BYTE2(a4);
  DisplayList.ViewUpdater.update(container:from:parentState:)((unint64_t)&v28, (uint64_t *)v32, &v45);
  *(void *)&v32[0] = v28;
  *(long long *)((char *)v32 + 8) = v29;
  *((void *)&v32[1] + 1) = v30;
  *(void *)&long long v33 = v31;
  swift_beginAccess();
  swift_unknownObjectRetain();
  DisplayList.ViewUpdater.Container.removeRemaining(viewCache:)(a2 + 32);
  swift_endAccess();
  swift_unknownObjectRelease();
  v42[0] = a7;
  swift_beginAccess();
  DisplayList.ViewUpdater.ViewCache.reclaim(time:)(v18);
  *(void *)(a2 + 128) = MEMORY[0x263F8EE78];
  *(_WORD *)(a2 + 136) = 0;
  *(unsigned char *)(a2 + 138) = 0;
  swift_endAccess();
  swift_bridgeObjectRelease();
  if ((*(unsigned char *)(a2 + 184) & 1) == 0) {
    uint64_t v30 = a7;
  }
  if (!MEMORY[0x24C527E00](a2 + 16))
  {
    *(void *)&long long v33 = 0;
    memset(v32, 0, sizeof(v32));
    goto LABEL_11;
  }
  uint64_t v19 = *(void *)(a2 + 24);
  uint64_t ObjectType = swift_getObjectType();
  unint64_t v21 = type metadata accessor for ViewGraphRenderObserver();
  (*(void (**)(long long *__return_ptr, unint64_t, unint64_t, uint64_t))(*(void *)(v19 + 8)
                                                                                              + 16))(v32, v21, v21, ObjectType);
  swift_unknownObjectRelease();
  if (!*((void *)&v32[1] + 1))
  {
LABEL_11:
    _s7SwiftUI11DisplayListV10ArchiveIDsVSgWOhTm_1((uint64_t)v32, &lazy cache variable for type metadata for ViewGraphRenderObserver?, (void (*)(uint64_t))type metadata accessor for ViewGraphRenderObserver);
    goto LABEL_12;
  }
  outlined init with take of ScrollStateRequest(v32, (uint64_t)v42);
  uint64_t v22 = v43;
  uint64_t v23 = v44;
  __swift_project_boxed_opaque_existential_1(v42, v43);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v23);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
LABEL_12:
  uint64_t v24 = v30;
  swift_unknownObjectRelease();
  *(void *)(a2 + 144) = v24;
  *a6 = v24;
  objc_msgSend(v14, sel_setNeedsLayoutOnGeometryChange_, v15);

  long long v39 = *(_OWORD *)&v52[16];
  long long v40 = *(_OWORD *)&v52[32];
  long long v41 = *(_OWORD *)&v52[48];
  long long v35 = v49;
  long long v36 = v50;
  long long v37 = v51;
  long long v38 = *(_OWORD *)v52;
  v32[0] = v45;
  v32[1] = v46;
  long long v33 = v47;
  long long v34 = v48;
  return outlined release of DisplayList.ViewUpdater.Model.State((uint64_t)v32);
}

unint64_t specialized DisplayList.ViewUpdater.ViewCache.updateAsync(oldItem:oldState:newItem:newState:tag:updateView:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void (*a8)(_OWORD *__return_ptr, uint64_t, long long *, _OWORD *, uint64_t, _OWORD *, uint64_t, char *, uint64_t)@<X7>, void *a9@<X8>)
{
  long long v10 = *(_OWORD *)(result + 48);
  long long v53 = *(_OWORD *)(result + 32);
  long long v54 = v10;
  uint64_t v55 = *(void *)(result + 64);
  long long v11 = *(_OWORD *)(result + 16);
  v52[0] = *(_OWORD *)result;
  v52[1] = v11;
  long long v12 = *(_OWORD *)(a3 + 48);
  long long v57 = *(_OWORD *)(a3 + 32);
  long long v58 = v12;
  uint64_t v59 = *(void *)(a3 + 64);
  long long v13 = *(_OWORD *)(a3 + 16);
  v56[0] = *(_OWORD *)a3;
  v56[1] = v13;
  if (HIDWORD(v55) == HIDWORD(v59)
    && (uint64_t v15 = *(void *)(a6 + 8), *(void *)(v15 + 16))
    && (uint64_t v20 = a5 & 1,
        unint64_t v21 = *(unsigned int *)(a6 + 72) | ((unint64_t)*(unsigned int *)(a6 + 76) << 32),
        unint64_t v22 = *(unsigned int *)(a6 + 80) | ((unint64_t)*(unsigned int *)(a6 + 84) << 32),
        __n128 result = specialized __RawDictionaryStorage.find<A>(_:)(v21, v22, a5 & 1),
        (v23 & 1) != 0))
  {
    unint64_t v41 = v21;
    uint64_t v24 = *(void *)(v15 + 56) + 120 * result;
    uint64_t v25 = *(void **)(v24 + 8);
    uint64_t v26 = *(void *)(v24 + 16);
    __int16 v27 = *(_WORD *)(v24 + 56);
    __int16 v28 = *(_WORD *)(v24 + 96);
    int v29 = *(_DWORD *)(v24 + 100);
    char v30 = *(unsigned char *)(v24 + 104);
    char v31 = *(unsigned char *)(v24 + 105);
    uint64_t v32 = *(void *)(v24 + 112);
    *(void *)&long long v44 = *(void *)v24;
    *((void *)&v44 + 1) = v25;
    *(void *)long long v45 = v26;
    long long v33 = *(_OWORD *)(v24 + 40);
    *(_OWORD *)&v45[8] = *(_OWORD *)(v24 + 24);
    *(_OWORD *)&v45[24] = v33;
    *(_WORD *)&v45[40] = v27;
    long long v34 = *(_OWORD *)(v24 + 80);
    long long v46 = *(_OWORD *)(v24 + 64);
    long long v47 = v34;
    LOWORD(v48) = v28;
    DWORD1(v48) = v29;
    BYTE8(v48) = v30;
    BYTE9(v48) = v31;
    uint64_t v49 = v32;
    char v43 = 0;
    swift_unknownObjectRetain();
    id v35 = v25;
    swift_unknownObjectRetain();
    a8(v50, a6, &v44, v52, a2, v56, a4, &v43, a7);
    if (LOBYTE(v50[0]) == 1)
    {
      if (v43)
      {
        v50[4] = v46;
        v50[5] = v47;
        v50[6] = v48;
        uint64_t v51 = v49;
        v50[0] = v44;
        v50[1] = *(_OWORD *)v45;
        v50[2] = *(_OWORD *)&v45[16];
        v50[3] = *(_OWORD *)&v45[32];
        outlined retain of DisplayList.ViewUpdater.ViewInfo((uint64_t)v50);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v42 = *(void *)(a6 + 8);
        *(void *)(a6 + 8) = 0x8000000000000000;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v50, v41, v22, v20, isUniquelyReferenced_nonNull_native);
        *(void *)(a6 + 8) = v42;
        swift_bridgeObjectRelease();
      }
      uint64_t v37 = v49;
      unint64_t v38 = v20 | ((unint64_t)((void)v57 != (void)v53) << 8);
      uint64_t v39 = 0x10000;
      if (BYTE9(v48)) {
        uint64_t v39 = 0;
      }
      long long v40 = (void *)*((void *)&v44 + 1);
      *a9 = v46;
      a9[1] = v41;
      a9[2] = v22;
      a9[3] = v38 | v39;
      a9[4] = v37;
    }
    else
    {
      *a9 = 0;
      a9[1] = 0;
      a9[2] = 0;
      *(_OWORD *)(a9 + 3) = xmmword_2461BAA80;
      long long v40 = (void *)*((void *)&v44 + 1);
    }
    swift_unknownObjectRelease();

    return swift_unknownObjectRelease();
  }
  else
  {
    *a9 = 0;
    a9[1] = 0;
    a9[2] = 0;
    *(_OWORD *)(a9 + 3) = xmmword_2461BAA80;
  }
  return result;
}

uint64_t implicit closure #2 in implicit closure #1 in DisplayList.ViewUpdater.updateItemView(container:from:localState:)@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  v19[0] = a3;
  uint64_t v6 = a1[1];
  uint64_t v7 = a1[2];
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  uint64_t v10 = a1[5];
  uint64_t v11 = a1[6];
  uint64_t v12 = a1[7];
  __int16 v13 = *((_WORD *)a1 + 32);
  char v14 = *((unsigned char *)a1 + 66);
  int v15 = *((_DWORD *)a1 + 17);
  uint64_t v20 = *a1;
  uint64_t v5 = v20;
  uint64_t v21 = v6;
  uint64_t v22 = v7;
  uint64_t v23 = v8;
  uint64_t v24 = v9;
  uint64_t v25 = v10;
  uint64_t v26 = v11;
  uint64_t v27 = v12;
  char v29 = v14;
  __int16 v28 = v13;
  int v30 = v15;
  DisplayList.ViewUpdater.Platform._makeItemView(item:state:)((uint64_t)&v20, a2, a4);
  v19[3] = a3;
  uint64_t v20 = v5;
  uint64_t v21 = v6;
  uint64_t v22 = v7;
  uint64_t v23 = v8;
  uint64_t v24 = v9;
  uint64_t v25 = v10;
  uint64_t v26 = v11;
  uint64_t v27 = v12;
  char v29 = v14;
  __int16 v28 = v13;
  int v30 = v15;
  return DisplayList.ViewUpdater.Platform.updateItemView(_:index:item:state:)(a4, (uint64_t)v19, (uint64_t)&v20, a2);
}

void DisplayList.ViewUpdater.Platform._makeItemView(item:state:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6 = *(void *)(a1 + 40);
  unint64_t v5 = *(void *)(a1 + 48);
  uint64_t v7 = *v3;
  if (!(v5 >> 62))
  {
    switch(v6 >> 60)
    {
      case 1uLL:
        __int16 v50 = 1;
        v122.i8[0] = 1;
        uint64_t v51 = (void *)(*(uint64_t (**)(int16x8_t *))((v7 & 0xFFFFFFFFFFFFFFFCLL) + 88))(&v122);
        uint64_t v52 = (void *)CoreViewLayer(v7 & 3, v51);
        goto LABEL_29;
      case 2uLL:
        __int16 v50 = 6;
        v122.i8[0] = 6;
        uint64_t v51 = (void *)(*(uint64_t (**)(int16x8_t *))((v7 & 0xFFFFFFFFFFFFFFFCLL) + 88))(&v122);
        uint64_t v52 = (void *)CoreViewLayer(v7 & 3, v51);
        goto LABEL_29;
      case 3uLL:
        uint64_t v76 = type metadata accessor for ImageLayer();
        v122.i8[0] = 2;
        uint64_t v77 = *(uint64_t (**)(uint64_t, int16x8_t *))((v7 & 0xFFFFFFFFFFFFFFFCLL) + 96);
        outlined copy of DisplayList.Content.Value(v6);
        uint64_t v10 = (void *)v77(v76, &v122);
        id v11 = (id)CoreViewLayer(v7 & 3, v10);
        int64x2_t v116 = vdupq_n_s64(0x7FF0000000000000uLL);
        int64x2_t v117 = v116;
        __int16 v12 = 2;
        goto LABEL_24;
      case 4uLL:
        int64x2_t v57 = *(int64x2_t *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
        int64x2_t v131 = *(int64x2_t *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
        int64x2_t v132 = v57;
        LOBYTE(v133) = *(unsigned char *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
        uint64_t v58 = *(void *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 0x38);
        long long v59 = *(_OWORD *)(a2 + 144);
        long long v128 = *(_OWORD *)(a2 + 128);
        long long v129 = v59;
        long long v130 = *(_OWORD *)(a2 + 160);
        long long v60 = *(_OWORD *)(a2 + 80);
        long long v124 = *(_OWORD *)(a2 + 64);
        long long v125 = v60;
        long long v61 = *(_OWORD *)(a2 + 112);
        long long v126 = *(_OWORD *)(a2 + 96);
        long long v127 = v61;
        long long v62 = *(_OWORD *)(a2 + 16);
        int16x8_t v122 = *(int16x8_t *)a2;
        *(_OWORD *)uint64_t v123 = v62;
        long long v63 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)&v123[16] = *(_OWORD *)(a2 + 32);
        *(_OWORD *)&v123[32] = v63;
        BOOL v64 = DisplayList.ViewUpdater.Model.State.hasDODEffects.getter();
        outlined copy of DisplayList.Item.Value(v6, v5);
        _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)&v131, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
        outlined copy of DisplayList.Item.Value(v6, v5);
        _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)&v131, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
        swift_retain();
        ShapeType.init(_:)((uint64_t)&v131, (uint64_t)&v116);
        int16x8_t v122 = (int16x8_t)v116;
        *(int64x2_t *)uint64_t v123 = v117;
        *(_OWORD *)&v123[16] = v118;
        *(_OWORD *)&v123[32] = v119;
        long long v124 = v120;
        LOBYTE(v125) = v121;
        BYTE1(v125) = !v64;
        *((void *)&v125 + 1) = 0;
        (*(void (**)(int16x8_t *, ValueMetadata *, _UNKNOWN **))(*(void *)v58 + 136))(&v122, &type metadata for Visitor #1 in static ShapeLayerHelper.layerType(_:_:mayClip:), &protocol witness table for Visitor #1 in static ShapeLayerHelper.layerType(_:_:mayClip:));
        uint64_t v65 = *((void *)&v125 + 1);
        if (*((void *)&v125 + 1))
        {
          outlined consume of ShapeType(v122.i64[0], v122.i64[1], *(uint64_t *)v123, *(uint64_t *)&v123[8], v123[16], *(uint64_t *)&v123[24], *(uint64_t *)&v123[32], *(uint64_t *)&v123[40], v124, *((uint64_t *)&v124 + 1), v125);
          v122.i8[0] = 3;
          uint64_t v66 = (void *)(*(uint64_t (**)(uint64_t, int16x8_t *))((v7 & 0xFFFFFFFFFFFFFFFCLL) + 96))(v65, &v122);
          id v67 = (id)CoreViewLayer(v7 & 3, v66);
          int64x2_t v116 = vdupq_n_s64(0x7FF0000000000000uLL);
          int64x2_t v117 = v116;
          LOWORD(v118) = 3;
          uint64_t v68 = swift_unknownObjectRetain();
          DisplayList.ViewUpdater.ViewInfo.init(view:layer:container:state:)(v68, (uint64_t)v67, (uint64_t)v66, (uint64_t)&v116, &v122);
          outlined consume of DisplayList.Item.Value(v6, v5);
          swift_release();
          _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)&v131, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
          uint64_t v69 = v6;
          unint64_t v70 = v5;
LABEL_25:
          outlined consume of DisplayList.Item.Value(v69, v70);
LABEL_42:
          int16x8_t v47 = v122;
          uint64_t v115 = *(void *)v123;
          long long v48 = *(_OWORD *)&v123[24];
LABEL_43:
          long long v49 = *(_OWORD *)&v123[8];
          char v21 = v123[40];
          char v22 = v123[41];
          uint64_t v23 = *((void *)&v124 + 1);
          uint64_t v24 = v124;
          uint64_t v26 = *((void *)&v125 + 1);
          uint64_t v25 = v125;
          __int16 v27 = v126;
          int v28 = DWORD1(v126);
          char v29 = BYTE8(v126);
          char v30 = BYTE9(v126);
LABEL_44:
          uint64_t v31 = v127;
          goto LABEL_45;
        }
        __break(1u);
        break;
      case 5uLL:
        __int16 v50 = 4;
        v122.i8[0] = 4;
        uint64_t v51 = (void *)(*(uint64_t (**)(int16x8_t *))((v7 & 0xFFFFFFFFFFFFFFFCLL) + 88))(&v122);
        uint64_t v52 = (void *)CoreViewLayer(v7 & 3, v51);
        goto LABEL_29;
      case 6uLL:
        outlined init with copy of AnyTrackedValue((v6 & 0xFFFFFFFFFFFFFFFLL) + 16, (uint64_t)&v116);
        uint64_t v88 = v117.i64[1];
        uint64_t v89 = v118;
        __swift_project_boxed_opaque_existential_1(&v116, v117.i64[1]);
        uint64_t v90 = *(uint64_t (**)(uint64_t, uint64_t))(v89 + 16);
        outlined copy of DisplayList.Content.Value(v6);
        outlined copy of DisplayList.Content.Value(v6);
        double v91 = (void *)v90(v88, v89);
        if (!v91)
        {
          v122.i64[0] = v7;
          double v91 = DisplayList.ViewUpdater.Platform.missingPlatformView()();
        }
        uint64_t v92 = v91;
        v122.i8[0] = 13;
        (*(void (**)(void *, int16x8_t *))((v7 & 0xFFFFFFFFFFFFFFFCLL) + 104))(v91, &v122);
        id v93 = (id)CoreViewLayer(v7 & 3, v92);
        int64x2_t v131 = vdupq_n_s64(0x7FF0000000000000uLL);
        int64x2_t v132 = v131;
        __int16 v133 = 13;
        uint64_t v94 = swift_unknownObjectRetain();
        DisplayList.ViewUpdater.ViewInfo.init(view:layer:container:state:)(v94, (uint64_t)v93, (uint64_t)v92, (uint64_t)&v131, &v122);
        outlined consume of DisplayList.Item.Value(v6, v5);
        uint64_t v115 = *(void *)v123;
        long long v113 = *(_OWORD *)&v123[24];
        int16x8_t v111 = v122;
        long long v112 = *(_OWORD *)&v123[8];
        char v108 = v123[40];
        char v109 = v123[41];
        uint64_t v23 = *((void *)&v124 + 1);
        uint64_t v24 = v124;
        uint64_t v26 = *((void *)&v125 + 1);
        uint64_t v25 = v125;
        __int16 v27 = v126;
        int v28 = DWORD1(v126);
        goto LABEL_34;
      case 7uLL:
        outlined init with copy of AnyTrackedValue((v6 & 0xFFFFFFFFFFFFFFFLL) + 16, (uint64_t)&v116);
        uint64_t v79 = v117.i64[1];
        uint64_t v80 = v118;
        __swift_project_boxed_opaque_existential_1(&v116, v117.i64[1]);
        unsigned int v81 = *(uint64_t (**)(uint64_t, uint64_t))(v80 + 16);
        outlined copy of DisplayList.Content.Value(v6);
        outlined copy of DisplayList.Content.Value(v6);
        uint64_t v82 = v81(v79, v80);
        v122.i8[0] = 15;
        unint64_t v83 = (void *)(*(uint64_t (**)(uint64_t, int16x8_t *))((v7 & 0xFFFFFFFFFFFFFFFCLL) + 96))(v82, &v122);
        id v84 = (id)CoreViewLayer(v7 & 3, v83);
        int64x2_t v131 = vdupq_n_s64(0x7FF0000000000000uLL);
        int64x2_t v132 = v131;
        __int16 v133 = 15;
        uint64_t v85 = swift_unknownObjectRetain();
        DisplayList.ViewUpdater.ViewInfo.init(view:layer:container:state:)(v85, (uint64_t)v84, (uint64_t)v83, (uint64_t)&v131, &v122);
        outlined consume of DisplayList.Item.Value(v6, v5);
        uint64_t v115 = *(void *)v123;
        long long v113 = *(_OWORD *)&v123[24];
        int16x8_t v111 = v122;
        long long v112 = *(_OWORD *)&v123[8];
        char v108 = v123[40];
        char v109 = v123[41];
        uint64_t v23 = *((void *)&v124 + 1);
        uint64_t v24 = v124;
        uint64_t v26 = *((void *)&v125 + 1);
        uint64_t v25 = v125;
        __int16 v27 = v126;
        int v28 = DWORD1(v126);
LABEL_34:
        char v29 = BYTE8(v126);
        char v30 = BYTE9(v126);
        uint64_t v31 = v127;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v116);
        uint64_t v95 = v6;
        char v21 = v108;
        outlined consume of DisplayList.Item.Value(v95, v5);
        char v22 = v109;
        goto LABEL_35;
      case 8uLL:
        if (*(unsigned char *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 0x20)) {
          __int32 v96 = 161;
        }
        else {
          __int32 v96 = 160;
        }
        v122.i8[0] = 0;
        v122.i32[1] = 0;
        v122.i8[8] = 1;
        v122.i32[3] = v96;
        v123[0] = 3;
        int v114 = *(uint64_t (**)(int16x8_t *))((v7 & 0xFFFFFFFFFFFFFFFCLL) + 112);
        outlined copy of DisplayList.Item.Value(v6, v5);
        outlined copy of DisplayList.Item.Value(v6, v5);
        swift_retain();
        swift_retain();
        double v97 = (void *)v114(&v122);
        swift_unknownObjectRetain();
        id v98 = (id)CoreViewLayer(v7 & 3, v97);
        int64x2_t v116 = vdupq_n_s64(0x7FF0000000000000uLL);
        int64x2_t v117 = v116;
        LOWORD(v118) = 7;
        uint64_t v99 = swift_unknownObjectRetain();
        DisplayList.ViewUpdater.ViewInfo.init(view:layer:container:state:)(v99, (uint64_t)v98, (uint64_t)v97, (uint64_t)&v116, &v122);
        outlined consume of DisplayList.Item.Value(v6, v5);
        swift_unknownObjectRelease();
        swift_release();
        swift_release();
        outlined consume of DisplayList.Item.Value(v6, v5);
        int16x8_t v47 = v122;
        uint64_t v115 = *(void *)v123;
        long long v48 = *(_OWORD *)&v123[24];
        goto LABEL_43;
      case 9uLL:
        uint64_t v71 = (__int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 48);
        uint64_t v72 = (__int32 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 52);
        uint64_t v73 = (__int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 56);
        uint64_t v74 = (__int32 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 60);
        uint64_t v75 = (char *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 64);
        goto LABEL_41;
      case 0xAuLL:
        uint64_t v71 = (__int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 40);
        uint64_t v72 = (__int32 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 44);
        uint64_t v73 = (__int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 48);
        uint64_t v74 = (__int32 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 52);
        uint64_t v75 = (char *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 56);
LABEL_41:
        char v100 = *v75;
        __int32 v101 = *v74;
        __int8 v102 = *v73;
        __int32 v103 = *v72;
        v122.i8[0] = *v71;
        v122.i32[1] = v103;
        v122.i8[8] = v102;
        v122.i32[3] = v101;
        v123[0] = v100;
        uint64_t v104 = *(uint64_t (**)(int16x8_t *))((v7 & 0xFFFFFFFFFFFFFFFCLL) + 112);
        outlined copy of DisplayList.Content.Value(v6);
        uint64_t v105 = (void *)v104(&v122);
        swift_unknownObjectRetain();
        id v106 = (id)CoreViewLayer(v7 & 3, v105);
        int64x2_t v116 = vdupq_n_s64(0x7FF0000000000000uLL);
        int64x2_t v117 = v116;
        LOWORD(v118) = 7;
        uint64_t v107 = swift_unknownObjectRetain();
        DisplayList.ViewUpdater.ViewInfo.init(view:layer:container:state:)(v107, (uint64_t)v106, (uint64_t)v105, (uint64_t)&v116, &v122);
        outlined consume of DisplayList.Item.Value(v6, v5);
        swift_unknownObjectRelease();
        goto LABEL_42;
      case 0xBuLL:
        swift_retain();
        goto LABEL_49;
      case 0xCuLL:
        goto LABEL_49;
      default:
        unint64_t v8 = type metadata accessor for CABackdropLayer();
        v122.i8[0] = 5;
        uint64_t v9 = *(uint64_t (**)(unint64_t, int16x8_t *))((v7 & 0xFFFFFFFFFFFFFFFCLL) + 96);
        outlined copy of DisplayList.Content.Value(v6);
        uint64_t v10 = (void *)v9(v8, &v122);
        id v11 = (id)CoreViewLayer(v7 & 3, v10);
        int64x2_t v116 = vdupq_n_s64(0x7FF0000000000000uLL);
        int64x2_t v117 = v116;
        __int16 v12 = 5;
LABEL_24:
        LOWORD(v118) = v12;
        uint64_t v78 = swift_unknownObjectRetain();
        DisplayList.ViewUpdater.ViewInfo.init(view:layer:container:state:)(v78, (uint64_t)v11, (uint64_t)v10, (uint64_t)&v116, &v122);
        uint64_t v69 = v6;
        unint64_t v70 = v5;
        goto LABEL_25;
    }
    while (1)
    {
LABEL_49:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  if (v5 >> 62 != 1) {
    goto LABEL_49;
  }
  outlined copy of DisplayList.Effect(*(void *)(a1 + 40), v5, SBYTE4(v5));
  switch(BYTE4(v5))
  {
    case 3:
      outlined init with copy of AnyTrackedValue(v6 + 16, (uint64_t)&v116);
      uint64_t v13 = v117.i64[1];
      uint64_t v14 = v118;
      __swift_project_boxed_opaque_existential_1(&v116, v117.i64[1]);
      int v15 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v14 + 16))(v13, v14);
      uint64_t v110 = v6;
      if (!v15)
      {
        v122.i64[0] = v7;
        int v15 = DisplayList.ViewUpdater.Platform.missingPlatformView()();
      }
      unint64_t v16 = v15;
      v122.i8[0] = 14;
      (*(void (**)(void *, int16x8_t *))((v7 & 0xFFFFFFFFFFFFFFFCLL) + 104))(v15, &v122);
      uint64_t v17 = v117.i64[1];
      uint64_t v18 = v118;
      __swift_project_boxed_opaque_existential_1(&v116, v117.i64[1]);
      uint64_t v19 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v18 + 40))(v16, v17, v18);
      id v20 = (id)CoreViewLayer(v7 & 3, v16);
      int64x2_t v131 = vdupq_n_s64(0x7FF0000000000000uLL);
      int64x2_t v132 = v131;
      __int16 v133 = 14;
      DisplayList.ViewUpdater.ViewInfo.init(view:layer:container:state:)((uint64_t)v16, (uint64_t)v20, v19, (uint64_t)&v131, &v122);
      uint64_t v115 = *(void *)v123;
      long long v113 = *(_OWORD *)&v123[24];
      int16x8_t v111 = v122;
      long long v112 = *(_OWORD *)&v123[8];
      char v21 = v123[40];
      char v22 = v123[41];
      uint64_t v23 = *((void *)&v124 + 1);
      uint64_t v24 = v124;
      uint64_t v26 = *((void *)&v125 + 1);
      uint64_t v25 = v125;
      __int16 v27 = v126;
      int v28 = DWORD1(v126);
      char v29 = BYTE8(v126);
      char v30 = BYTE9(v126);
      uint64_t v31 = v127;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v116);
      outlined consume of DisplayList.Effect(v110, v5, 3);
      goto LABEL_35;
    case 7:
      v122.i8[0] = 12;
      unint64_t v38 = (void *)(*(uint64_t (**)(int16x8_t *))((v7 & 0xFFFFFFFFFFFFFFFCLL) + 88))(&v122);
      id v39 = (id)CoreViewLayer(v7 & 3, v38);
      int64x2_t v116 = vdupq_n_s64(0x7FF0000000000000uLL);
      int64x2_t v117 = v116;
      LOWORD(v118) = 12;
      uint64_t v40 = swift_unknownObjectRetain();
      DisplayList.ViewUpdater.ViewInfo.init(view:layer:container:state:)(v40, (uint64_t)v39, (uint64_t)v38, (uint64_t)&v116, &v122);
      uint64_t v35 = v6;
      char v36 = v5;
      char v37 = 7;
      goto LABEL_11;
    case 8:
      switch(*(unsigned char *)(v6 + 88))
      {
        case 1:
          goto LABEL_14;
        case 3:
          uint64_t v41 = *(void *)(v6 + 80);
          long long v42 = *(_OWORD *)(v6 + 32);
          int16x8_t v122 = *(int16x8_t *)(v6 + 16);
          *(_OWORD *)uint64_t v123 = v42;
          long long v43 = *(_OWORD *)(v6 + 64);
          *(_OWORD *)&v123[16] = *(_OWORD *)(v6 + 48);
          *(_OWORD *)&v123[32] = v43;
          *(void *)&long long v124 = v41;
          _Rotation3DEffect.Data.transform.getter((CGFloat *)v116.i64);
LABEL_14:
          v122.i8[0] = 10;
          long long v44 = (void *)(*(uint64_t (**)(int16x8_t *))((v7 & 0xFFFFFFFFFFFFFFFCLL) + 88))(&v122);
          id v45 = (id)CoreViewLayer(v7 & 3, v44);
          int64x2_t v131 = vdupq_n_s64(0x7FF0000000000000uLL);
          int64x2_t v132 = v131;
          __int16 v133 = 10;
          uint64_t v46 = swift_unknownObjectRetain();
          DisplayList.ViewUpdater.ViewInfo.init(view:layer:container:state:)(v46, (uint64_t)v45, (uint64_t)v44, (uint64_t)&v131, &v122);
          outlined consume of DisplayList.Effect(v6, v5, 8);
          int16x8_t v47 = v122;
          uint64_t v115 = *(void *)v123;
          long long v48 = *(_OWORD *)&v123[24];
          long long v49 = *(_OWORD *)&v123[8];
          char v21 = v123[40];
          uint64_t v23 = *((void *)&v124 + 1);
          uint64_t v24 = v124;
          uint64_t v26 = *((void *)&v125 + 1);
          uint64_t v25 = v125;
          __int16 v27 = v126;
          int v28 = DWORD1(v126);
          char v29 = BYTE8(v126);
          char v30 = BYTE9(v126);
          char v22 = v123[41] | 4;
          goto LABEL_44;
        default:
          goto LABEL_49;
      }
    case 0xE:
      v122.i8[0] = 16;
      uint64_t v32 = (void *)(*(uint64_t (**)(int16x8_t *))((v7 & 0xFFFFFFFFFFFFFFFCLL) + 88))(&v122);
      id v33 = (id)CoreViewLayer(v7 & 3, v32);
      int64x2_t v116 = vdupq_n_s64(0x7FF0000000000000uLL);
      int64x2_t v117 = v116;
      LOWORD(v118) = 16;
      uint64_t v34 = swift_unknownObjectRetain();
      DisplayList.ViewUpdater.ViewInfo.init(view:layer:container:state:)(v34, (uint64_t)v33, (uint64_t)v32, (uint64_t)&v116, &v122);
      uint64_t v35 = v6;
      char v36 = v5;
      char v37 = 14;
LABEL_11:
      outlined consume of DisplayList.Effect(v35, v36, v37);
      goto LABEL_30;
    case 0x13:
      if (!(v6 ^ 1 | v5))
      {
        __int16 v50 = 9;
        v122.i8[0] = 9;
        uint64_t v51 = (void *)(*(uint64_t (**)(int16x8_t *))((v7 & 0xFFFFFFFFFFFFFFFCLL) + 88))(&v122);
        uint64_t v52 = (void *)CoreViewLayer(v7 & 3, v51);
LABEL_29:
        id v86 = v52;
        int64x2_t v116 = vdupq_n_s64(0x7FF0000000000000uLL);
        int64x2_t v117 = v116;
        LOWORD(v118) = v50;
        uint64_t v87 = swift_unknownObjectRetain();
        DisplayList.ViewUpdater.ViewInfo.init(view:layer:container:state:)(v87, (uint64_t)v86, (uint64_t)v51, (uint64_t)&v116, &v122);
LABEL_30:
        int16x8_t v47 = v122;
        uint64_t v115 = *(void *)v123;
        long long v48 = *(_OWORD *)&v123[24];
        goto LABEL_43;
      }
      if (v6 ^ 2 | v5) {
        goto LABEL_49;
      }
      v122.i8[0] = 8;
      long long v53 = (void *)(*(uint64_t (**)(int16x8_t *))((v7 & 0xFFFFFFFFFFFFFFFCLL) + 88))(&v122);
      id v54 = (id)CoreViewLayer(v7 & 3, v53);
      int64x2_t v116 = vdupq_n_s64(0x7FF0000000000000uLL);
      int64x2_t v117 = v116;
      LOWORD(v118) = 8;
      uint64_t v55 = swift_unknownObjectRetain();
      DisplayList.ViewUpdater.ViewInfo.init(view:layer:container:state:)(v55, (uint64_t)v54, (uint64_t)v53, (uint64_t)&v116, &v122);
      uint64_t v115 = *(void *)v123;
      long long v113 = *(_OWORD *)&v123[24];
      int16x8_t v111 = v122;
      long long v112 = *(_OWORD *)&v123[8];
      char v21 = v123[40];
      LOBYTE(v54) = v123[41];
      uint64_t v23 = *((void *)&v124 + 1);
      uint64_t v24 = v124;
      uint64_t v26 = *((void *)&v125 + 1);
      uint64_t v25 = v125;
      __int16 v27 = v126;
      int v28 = DWORD1(v126);
      char v29 = BYTE8(v126);
      char v30 = BYTE9(v126);
      uint64_t v31 = v127;
      id v56 = (id)v122.i64[1];
      objc_msgSend(v56, sel_setAllowsGroupOpacity_, 1);
      objc_msgSend(v56, sel_setAllowsGroupBlending_, 1);

      char v22 = (char)v54;
LABEL_35:
      long long v49 = v112;
      long long v48 = v113;
      int16x8_t v47 = v111;
LABEL_45:
      *(int16x8_t *)a3 = v47;
      *(void *)(a3 + 16) = v115;
      *(_OWORD *)(a3 + 24) = v49;
      *(_OWORD *)(a3 + 40) = v48;
      *(unsigned char *)(a3 + 56) = v21;
      *(unsigned char *)(a3 + 57) = v22;
      *(void *)(a3 + 64) = v24;
      *(void *)(a3 + 72) = v23;
      *(void *)(a3 + 80) = v25;
      *(void *)(a3 + 88) = v26;
      *(_WORD *)(a3 + 96) = v27;
      *(_DWORD *)(a3 + 100) = v28;
      *(unsigned char *)(a3 + 104) = v29;
      *(unsigned char *)(a3 + 105) = v30;
      *(void *)(a3 + 112) = v31;
      return;
    default:
      goto LABEL_49;
  }
}

uint64_t DisplayList.ViewUpdater.updateItemView(container:from:localState:)(uint64_t a1, long long *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *((void *)a2 + 4);
  uint64_t v8 = *((void *)a2 + 5);
  unint64_t v10 = *((void *)a2 + 6);
  uint64_t v9 = *((void *)a2 + 7);
  int v11 = *((unsigned __int8 *)a2 + 66);
  int v12 = *((unsigned __int16 *)a2 + 32);
  int v13 = *((_DWORD *)a2 + 17);
  long long v14 = a2[1];
  long long v115 = *a2;
  long long v116 = v14;
  uint64_t v117 = v7;
  uint64_t v118 = v8;
  uint64_t v81 = v9;
  uint64_t v82 = v8;
  unint64_t v119 = v10;
  uint64_t v120 = v9;
  int v92 = v11;
  char v122 = v11;
  __int16 v121 = v12;
  int v123 = v13;
  int v15 = (void *)(v3 + 32);
  uint64_t v16 = *(void *)(a1 + 16);
  swift_beginAccess();
  uint64_t v17 = *(void *)(v3 + 32);
  *(void *)(swift_allocObject() + 16) = v17;
  *(void *)(swift_allocObject() + 16) = v17;
  swift_beginAccess();
  uint64_t v84 = a3;
  DisplayList.ViewUpdater.ViewCache.update(item:state:tag:in:makeView:updateView:)((uint64_t *)&v115, a3, 0, v16, (void (*)(long long *__return_ptr, id *, long long *, uint64_t))partial apply for implicit closure #2 in implicit closure #1 in DisplayList.ViewUpdater.updateItemView(container:from:localState:), (void (*)(id *, long long *, long long *, uint64_t))partial apply for implicit closure #4 in implicit closure #3 in DisplayList.ViewUpdater.updateItemView(container:from:localState:), (uint64_t)v124);
  swift_endAccess();
  swift_release();
  unint64_t v18 = v10;
  swift_release();
  uint64_t v94 = v4;
  *(unsigned char *)(v4 + 184) &= v126 & 1;
  uint64_t v19 = v124[0];
  double v20 = v127;
  uint64_t v21 = *(void *)(a1 + 32);
  CoreViewAddSubview(*(_DWORD *)(a1 + 8) & 3, *(void **)a1, v124[0], v21);
  *(void *)(a1 + 32) = v21 + 1;
  double v22 = *(double *)(a1 + 24);
  if (v20 < v22) {
    double v22 = v20;
  }
  *(double *)(a1 + 24) = v22;
  if (v18 >> 62 != 1) {
    goto LABEL_52;
  }
  if (v125 & 1) == 0 && (*(unsigned char *)(v4 + 185))
  {
    *(void *)&long long v115 = v81;
    WORD4(v115) = v12;
    BYTE10(v115) = (v12 | (v92 << 16)) >> 16;
    outlined copy of DisplayList.Item.Value(v82, v18);
    DisplayList.Index.skip(list:)((uint64_t *)&v115);
    swift_bridgeObjectRelease();
    if (BYTE4(v18) == 7)
    {
      __int16 v23 = *(_WORD *)(v82 + 24);
      char v24 = *(unsigned char *)(v82 + 26);
      *(void *)&long long v115 = *(void *)(v82 + 16);
      WORD4(v115) = v23;
      BYTE10(v115) = v24;
      swift_bridgeObjectRetain();
      DisplayList.Index.skip(list:)((uint64_t *)&v115);
      outlined consume of DisplayList.Effect(v82, v18, 7);
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined consume of DisplayList.Effect(v82, v18, SBYTE4(v18));
    }
LABEL_52:
    swift_unknownObjectRelease();
    return swift_unknownObjectRelease();
  }
  outlined copy of DisplayList.Item.Value(v82, v18);
  DisplayList.ViewUpdater.Model.State.reset()();
  uint64_t v25 = *v15;
  __int16 v27 = v124[1];
  uint64_t v26 = v124[2];
  uint64_t v28 = one-time initialization token for infinity;
  swift_unknownObjectRetain();
  if (v28 != -1) {
    swift_once();
  }
  unint64_t v80 = HIDWORD(v18);
  double v29 = *(double *)&static Time.infinity;
  uint64_t v110 = v27;
  uint64_t v111 = v25;
  long long v112 = v26;
  double v113 = *(double *)&static Time.infinity;
  uint64_t v114 = 0;
  char v30 = v26;
  uint64_t v31 = *(void *)(v81 + 16);
  unint64_t v83 = v15;
  uint64_t v77 = v30;
  if (v31)
  {
    uint64_t v76 = v19;
    unint64_t v78 = v18;
    uint64_t v32 = (_DWORD *)(swift_bridgeObjectRetain() + 100);
    do
    {
      uint64_t v33 = *(void *)(v32 - 9);
      uint64_t v34 = *(void *)(v32 - 7);
      unint64_t v35 = *(void *)(v32 - 5);
      uint64_t v36 = *(void *)(v32 - 3);
      char v37 = *((unsigned char *)v32 - 2);
      __int16 v38 = *((_WORD *)v32 - 2);
      int v39 = *v32;
      long long v115 = *(_OWORD *)(v32 - 17);
      long long v116 = *(_OWORD *)(v32 - 13);
      uint64_t v117 = v33;
      uint64_t v118 = v34;
      unint64_t v119 = v35;
      uint64_t v120 = v36;
      char v122 = v37;
      __int16 v121 = v38;
      int v123 = v39;
      swift_beginAccess();
      if (v39)
      {
        uint64_t v40 = v94;
        int v85 = *(_DWORD *)(v94 + 108);
        int v87 = *(_DWORD *)(v94 + 104);
        uint64_t v41 = *(void *)(v94 + 112);
        char v89 = *(unsigned char *)(v94 + 120);
        char v42 = 1;
        *(_DWORD *)(v94 + 104) = v39;
        *(_DWORD *)(v94 + 108) = 0;
      }
      else
      {
        char v42 = 0;
        uint64_t v40 = v94;
        int v85 = *(_DWORD *)(v94 + 108) + 1;
        int v87 = *(_DWORD *)(v94 + 104);
        *(_DWORD *)(v94 + 108) = v85;
        uint64_t v41 = *(void *)(v94 + 112);
        char v89 = *(unsigned char *)(v94 + 120);
      }
      *(unsigned char *)(v40 + 120) = v42;
      outlined copy of DisplayList.Item.Value(v34, v35);
      outlined copy of DisplayList.Item.Value(v34, v35);
      DisplayList.ViewUpdater.ViewCache.prepare(item:parentState:)((uint64_t)&v115, v84, (uint64_t *)&v96);
      swift_endAccess();
      double v43 = v96;
      if (v96 >= v113) {
        double v43 = v113;
      }
      double v113 = v43;
      uint64_t v44 = v118;
      unint64_t v45 = v119;
      long long v101 = v115;
      long long v102 = v116;
      uint64_t v103 = v117;
      uint64_t v104 = v118;
      unint64_t v105 = v119;
      uint64_t v106 = v120;
      char v108 = v122;
      __int16 v107 = v121;
      int v109 = v123;
      outlined copy of DisplayList.Item.Value(v118, v119);
      DisplayList.ViewUpdater.updateInheritedView(container:from:parentState:)(&v110, &v101, v84);
      outlined consume of DisplayList.Item.Value(v44, v45);
      char v46 = *(unsigned char *)(v94 + 120);
      if ((v46 & 0xC) != 0)
      {
        uint64_t v47 = *(void *)(v94 + 104);
        if ((*(unsigned char *)(v94 + 120) & 4) != 0) {
          *(void *)(v94 + 104) = *(void *)(v94 + 112);
        }
        if ((v46 & 8) != 0) {
          *(void *)(v94 + 112) = v47;
        }
      }
      if (v46)
      {
        *(_DWORD *)(v94 + 104) = v87;
        *(_DWORD *)(v94 + 108) = v85;
      }
      if ((v46 & 2) != 0) {
        *(void *)(v94 + 112) = v41;
      }
      v32 += 18;
      *(unsigned char *)(v94 + 120) = v89;
      outlined consume of DisplayList.Item.Value(v34, v35);
      outlined consume of DisplayList.Item.Value(v44, v45);
      --v31;
      int v15 = v83;
    }
    while (v31);
    swift_bridgeObjectRelease();
    __int16 v27 = v110;
    uint64_t v25 = v111;
    char v30 = v112;
    double v29 = v113;
    uint64_t v48 = v114;
    unint64_t v18 = v78;
    uint64_t v19 = v76;
  }
  else
  {
    uint64_t v48 = 0;
  }
  swift_bridgeObjectRelease();
  *(void *)&long long v115 = v27;
  *((void *)&v115 + 1) = v25;
  *(void *)&long long v116 = v30;
  *((double *)&v116 + 1) = v29;
  uint64_t v117 = v48;
  swift_beginAccess();
  swift_unknownObjectRetain();
  DisplayList.ViewUpdater.Container.removeRemaining(viewCache:)((uint64_t)v15);
  swift_endAccess();
  swift_unknownObjectRelease();
  if (BYTE4(v18) == 7)
  {
    uint64_t v49 = v82;
    uint64_t v50 = *(void *)(v82 + 16);
    int v51 = *(_DWORD *)v15;
    swift_bridgeObjectRetain();
    id v52 = (id)CoreViewMaskView(v51 & 3, v19);
    if (*(double *)&v52 == 0.0)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      double v53 = *(double *)&v52;
      uint64_t v54 = *v15;
      double v55 = *(double *)&static Time.infinity;
      double v96 = *(double *)&v52;
      uint64_t v97 = v54;
      id v56 = v77;
      id v98 = v77;
      double v99 = *(double *)&static Time.infinity;
      uint64_t v100 = 0;
      uint64_t v57 = *(void *)(v50 + 16);
      if (v57)
      {
        char v79 = v18;
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        uint64_t v58 = (_DWORD *)(v50 + 100);
        do
        {
          uint64_t v59 = *(void *)(v58 - 9);
          uint64_t v60 = *(void *)(v58 - 7);
          unint64_t v61 = *(void *)(v58 - 5);
          uint64_t v62 = *(void *)(v58 - 3);
          char v63 = *((unsigned char *)v58 - 2);
          __int16 v64 = *((_WORD *)v58 - 2);
          int v65 = *v58;
          long long v115 = *(_OWORD *)(v58 - 17);
          long long v116 = *(_OWORD *)(v58 - 13);
          uint64_t v117 = v59;
          uint64_t v118 = v60;
          unint64_t v119 = v61;
          uint64_t v120 = v62;
          char v122 = v63;
          __int16 v121 = v64;
          int v123 = v65;
          swift_beginAccess();
          uint64_t v93 = v57;
          if (v65)
          {
            uint64_t v66 = v94;
            int v86 = *(_DWORD *)(v94 + 108);
            int v88 = *(_DWORD *)(v94 + 104);
            uint64_t v67 = *(void *)(v94 + 112);
            char v90 = *(unsigned char *)(v94 + 120);
            char v68 = 1;
            *(_DWORD *)(v94 + 104) = v65;
            *(_DWORD *)(v94 + 108) = 0;
          }
          else
          {
            char v68 = 0;
            uint64_t v66 = v94;
            int v86 = *(_DWORD *)(v94 + 108) + 1;
            int v88 = *(_DWORD *)(v94 + 104);
            *(_DWORD *)(v94 + 108) = v86;
            uint64_t v67 = *(void *)(v94 + 112);
            char v90 = *(unsigned char *)(v94 + 120);
          }
          *(unsigned char *)(v66 + 120) = v68;
          outlined copy of DisplayList.Item.Value(v60, v61);
          uint64_t v91 = v60;
          outlined copy of DisplayList.Item.Value(v60, v61);
          DisplayList.ViewUpdater.ViewCache.prepare(item:parentState:)((uint64_t)&v115, v84, (uint64_t *)&v95);
          swift_endAccess();
          double v69 = v95;
          if (v95 >= v99) {
            double v69 = v99;
          }
          double v99 = v69;
          uint64_t v70 = v118;
          unint64_t v71 = v119;
          long long v101 = v115;
          long long v102 = v116;
          uint64_t v103 = v117;
          uint64_t v104 = v118;
          unint64_t v105 = v119;
          uint64_t v106 = v120;
          char v108 = v122;
          __int16 v107 = v121;
          int v109 = v123;
          outlined copy of DisplayList.Item.Value(v118, v119);
          DisplayList.ViewUpdater.updateInheritedView(container:from:parentState:)(&v96, &v101, v84);
          outlined consume of DisplayList.Item.Value(v70, v71);
          char v72 = *(unsigned char *)(v94 + 120);
          if ((v72 & 0xC) != 0)
          {
            uint64_t v73 = *(void *)(v94 + 104);
            if ((*(unsigned char *)(v94 + 120) & 4) != 0) {
              *(void *)(v94 + 104) = *(void *)(v94 + 112);
            }
            if ((v72 & 8) != 0) {
              *(void *)(v94 + 112) = v73;
            }
          }
          if (v72)
          {
            *(_DWORD *)(v94 + 104) = v88;
            *(_DWORD *)(v94 + 108) = v86;
          }
          if ((v72 & 2) != 0) {
            *(void *)(v94 + 112) = v67;
          }
          v58 += 18;
          *(unsigned char *)(v94 + 120) = v90;
          outlined consume of DisplayList.Item.Value(v91, v61);
          outlined consume of DisplayList.Item.Value(v70, v71);
          --v57;
          int v15 = v83;
        }
        while (v93 != 1);
        swift_bridgeObjectRelease();
        double v74 = v96;
        uint64_t v54 = v97;
        id v56 = v98;
        double v55 = v99;
        uint64_t v57 = v100;
        LOBYTE(v18) = v79;
        uint64_t v49 = v82;
      }
      else
      {
        swift_unknownObjectRetain();
        double v74 = v53;
      }
      swift_bridgeObjectRelease();
      *(double *)&long long v115 = v74;
      *((void *)&v115 + 1) = v54;
      *(void *)&long long v116 = v56;
      *((double *)&v116 + 1) = v55;
      uint64_t v117 = v57;
      swift_beginAccess();
      swift_unknownObjectRetain();
      DisplayList.ViewUpdater.Container.removeRemaining(viewCache:)((uint64_t)v15);
      swift_endAccess();
      swift_unknownObjectRelease_n();
      swift_unknownObjectRelease();
      if (v55 < v29) {
        double v29 = v55;
      }
    }
  }
  else
  {
    uint64_t v49 = v82;
  }
  *(double *)&long long v101 = v29;
  swift_beginAccess();
  DisplayList.ViewUpdater.ViewCache.setNextUpdate(_:in:)((unint64_t)&v101, (uint64_t)v124);
  swift_endAccess();
  outlined consume of DisplayList.Effect(v49, v18, v80);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

void DisplayList.ViewUpdater.ViewCache.update(item:state:tag:in:makeView:updateView:)(uint64_t *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, void (*a5)(long long *__return_ptr, id *, long long *, uint64_t)@<X4>, void (*a6)(id *, long long *, long long *, uint64_t)@<X6>, uint64_t a7@<X8>)
{
  uint64_t v8 = v7;
  char v11 = a3 & 1;
  uint64_t v13 = *a1;
  uint64_t v12 = a1[1];
  uint64_t v15 = a1[2];
  uint64_t v14 = a1[3];
  unint64_t v16 = a1[4];
  long long v143 = *(_OWORD *)(a1 + 5);
  uint64_t v144 = a1[7];
  int v145 = *((unsigned __int16 *)a1 + 32) | (*((unsigned __int8 *)a1 + 66) << 16);
  uint64_t v151 = *((unsigned int *)a1 + 17);
  uint64_t v18 = v7[18];
  uint64_t v17 = v7[19];
  uint64_t v19 = v7[20];
  uint64_t v20 = v7[21];
  uint64_t v21 = *((void *)v7 + 1);
  char v153 = v11;
  int v150 = v20;
  uint64_t v155 = v18;
  uint64_t v156 = v17;
  if (!*(void *)(v21 + 16)
    || (unint64_t v22 = v19 | (v20 << 32),
        unint64_t v140 = v18 | (v17 << 32),
        unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v140, v22, v11),
        LODWORD(v18) = v155,
        LODWORD(v17) = v156,
        (v24 & 1) == 0))
  {
    char v53 = *((unsigned char *)v8 + 88);
    v159[0] = (id)__PAIR64__(v17, v18);
    v159[1] = (id)__PAIR64__(v20, v19);
    LOBYTE(v160) = v53;
    *(void *)&long long v172 = v13;
    *((void *)&v172 + 1) = v12;
    uint64_t v173 = v15;
    *(void *)&long long v174 = v14;
    *((void *)&v174 + 1) = v16;
    long long v175 = v143;
    uint64_t v176 = v144;
    BYTE2(v177) = BYTE2(v145);
    LOWORD(v177) = v145;
    HIDWORD(v177) = v151;
    a5(&v167, v159, &v172, a2);
    uint64_t v54 = v19;
    if (v16) {
      int v55 = (2 * ((33 * (v16 >> 16)) ^ v16)) | 1;
    }
    else {
      LOWORD(v55) = 0;
    }
    int v56 = v8[23];
    long long v57 = v167;
    char v58 = v170[25];
    long long v174 = *(_OWORD *)&v168[8];
    uint64_t v59 = v171;
    long long v172 = v167;
    uint64_t v173 = *(void *)v168;
    long long v175 = *(_OWORD *)&v168[24];
    LOWORD(v176) = *(_WORD *)&v168[40];
    uint64_t v177 = v169;
    uint64_t v178 = a4;
    __int16 v179 = v55;
    long long v180 = *(_OWORD *)&v170[2];
    int v181 = v56;
    char v182 = v170[24];
    char v183 = v170[25];
    double v184 = *(double *)&v171;
    swift_unknownObjectRetain();
    id v60 = *((id *)&v57 + 1);
    swift_unknownObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v159[0] = *((id *)v8 + 1);
    *((void *)v8 + 1) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)&v172, v155 | (v156 << 32), v54 | (v20 << 32), v153, isUniquelyReferenced_nonNull_native);
    *((id *)v8 + 1) = v159[0];
    swift_bridgeObjectRelease();
    uint64_t v62 = *((void *)v8 + 2);
    if (*(void *)(v62 + 16))
    {
      unint64_t v63 = specialized __RawDictionaryStorage.find<A>(_:)(v57);
      if (v64)
      {
        unint64_t v65 = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)(*(void *)(v62 + 56) + 20 * v63), *(void *)(*(void *)(v62 + 56) + 20 * v63 + 8), *(unsigned char *)(*(void *)(v62 + 56) + 20 * v63 + 16));
        if (v66)
        {
          unint64_t v149 = v65;
          char v67 = swift_isUniquelyReferenced_nonNull_native();
          char v68 = (void *)*((void *)v8 + 1);
          v159[0] = v68;
          *((void *)v8 + 1) = 0x8000000000000000;
          if ((v67 & 1) == 0)
          {
            specialized _NativeDictionary.copy()();
            char v68 = v159[0];
          }
          uint64_t v146 = *(void **)(v68[7] + 120 * v149 + 8);
          specialized _NativeDictionary._delete(at:)(v149, (uint64_t)v68);
          *((void *)v8 + 1) = v68;
          swift_unknownObjectRelease();

          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
        }
      }
    }
    char v69 = swift_isUniquelyReferenced_nonNull_native();
    v159[0] = *((id *)v8 + 2);
    *((void *)v8 + 2) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v155 | (v156 << 32), v54 | (v20 << 32), v153, v57, v69);
    *((id *)v8 + 2) = v159[0];
    swift_bridgeObjectRelease();
    uint64_t v70 = (void *)*((void *)&v167 + 1);
    if (!v8[20] && v151) {
      objc_msgSend(*((id *)&v167 + 1), sel_setSwiftUI_displayListID_, v151);
    }
    uint64_t v71 = v167;
    uint64_t v72 = *(void *)v168;
    char v73 = v58 ^ 1;
    uint64_t v74 = v169;

    *(void *)a7 = v71;
    *(void *)(a7 + 8) = v72;
    *(void *)(a7 + 16) = v74;
    *(_DWORD *)(a7 + 24) = v155;
    *(_DWORD *)(a7 + 28) = v156;
    *(_DWORD *)(a7 + 32) = v54;
    *(_DWORD *)(a7 + 36) = v150;
    *(unsigned char *)(a7 + 40) = v153;
    *(unsigned char *)(a7 + 41) = 1;
    goto LABEL_45;
  }
  int v138 = v19;
  uint64_t v25 = *(void *)(v21 + 56) + 120 * v23;
  id v27 = *(id *)v25;
  uint64_t v26 = *(void **)(v25 + 8);
  uint64_t v28 = *(void *)(v25 + 16);
  uint64_t v29 = *(void *)(v25 + 24);
  uint64_t v30 = *(void *)(v25 + 32);
  uint64_t v32 = *(void *)(v25 + 40);
  uint64_t v31 = *(void *)(v25 + 48);
  char v33 = *(unsigned char *)(v25 + 56);
  char v34 = *(unsigned char *)(v25 + 57);
  uint64_t v36 = *(void *)(v25 + 64);
  uint64_t v35 = *(void *)(v25 + 72);
  int v37 = *(unsigned __int16 *)(v25 + 80);
  __int16 v38 = *(_WORD *)(v25 + 82);
  __int16 v39 = *(_WORD *)(v25 + 84);
  __int16 v40 = *(_WORD *)(v25 + 86);
  __int16 v41 = *(_WORD *)(v25 + 88);
  __int16 v42 = *(_WORD *)(v25 + 90);
  __int16 v43 = *(_WORD *)(v25 + 92);
  __int16 v44 = *(_WORD *)(v25 + 94);
  __int16 v45 = *(_WORD *)(v25 + 96);
  int v46 = *(_DWORD *)(v25 + 100);
  int v47 = *(unsigned __int8 *)(v25 + 104);
  char v48 = *(unsigned char *)(v25 + 105);
  double v49 = *(double *)(v25 + 112);
  v159[0] = *(id *)v25;
  v159[1] = v26;
  *(void *)&long long v160 = v28;
  *((void *)&v160 + 1) = v29;
  *(void *)&long long v161 = v30;
  *((void *)&v161 + 1) = v32;
  *(void *)&long long v162 = v31;
  BYTE8(v162) = v33;
  BYTE9(v162) = v34;
  *(void *)&long long v163 = v36;
  *((void *)&v163 + 1) = v35;
  uint64_t v139 = v35;
  LOWORD(v164) = v37;
  WORD1(v164) = v38;
  WORD2(v164) = v39;
  WORD3(v164) = v40;
  WORD4(v164) = v41;
  WORD5(v164) = v42;
  WORD6(v164) = v43;
  HIWORD(v164) = v44;
  LOWORD(v165) = v45;
  BYTE8(v165) = v47;
  BYTE9(v165) = v48;
  double v135 = v49;
  uint64_t v166 = *(void *)&v49;
  char v137 = v33;
  if (v46 != v8[23])
  {
    __int16 v124 = v45;
    __int16 v125 = v44;
    __int16 v126 = v43;
    __int16 v127 = v42;
    __int16 v128 = v41;
    __int16 v129 = v40;
    __int16 v130 = v39;
    __int16 v131 = v38;
    uint64_t v132 = v36;
    char v133 = v34;
    char v134 = v48;
    int v136 = v37;
    int v123 = v8[23];
    DWORD1(v165) = v123;
    if (v47)
    {
      BYTE8(v165) = 0;
      swift_unknownObjectRetain_n();
      id v50 = v26;
      swift_unknownObjectRetain_n();
      id v51 = v50;
      unint64_t v52 = v140;
      specialized Set._Variant.remove(_:)(v140, v22, v153, (uint64_t)&v172);
    }
    else
    {
      swift_unknownObjectRetain_n();
      id v75 = v26;
      swift_unknownObjectRetain_n();
      id v76 = v75;
      unint64_t v52 = v140;
    }
    id v141 = v27;
    *(void *)&long long v172 = v27;
    *((void *)&v172 + 1) = v26;
    uint64_t v173 = v28;
    *(void *)&long long v174 = v29;
    *((void *)&v174 + 1) = v30;
    *(void *)&long long v175 = v32;
    *((void *)&v175 + 1) = v31;
    LOBYTE(v176) = v137;
    BYTE1(v176) = v133;
    uint64_t v177 = v132;
    uint64_t v178 = v139;
    __int16 v179 = v136;
    LOWORD(v180) = v131;
    WORD1(v180) = v130;
    WORD2(v180) = v129;
    WORD3(v180) = v128;
    WORD4(v180) = v127;
    WORD5(v180) = v126;
    WORD6(v180) = v125;
    HIWORD(v180) = v124;
    int v181 = v123;
    char v182 = 0;
    char v183 = v134;
    double v184 = v135;
    char v77 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v167 = *((void *)v8 + 1);
    *((void *)v8 + 1) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)&v172, v52, v22, v153, v77);
    *((void *)v8 + 1) = v167;
    swift_bridgeObjectRelease();
    unint64_t v78 = v52;
    if (v16)
    {
      BOOL v79 = 1;
      uint64_t v81 = a2;
      uint64_t v80 = a4;
      if (v136 != ((unsigned __int16)(2 * ((33 * WORD1(v16)) ^ v16)) | 1)) {
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v81 = a2;
      uint64_t v80 = a4;
      if (v136)
      {
        BOOL v79 = 1;
LABEL_26:
        if (one-time initialization token for infinity != -1) {
          swift_once();
        }
        uint64_t v166 = static Time.infinity;
        unint64_t v82 = v78;
        if (v139 != v80)
        {
          *((void *)&v163 + 1) = v80;
          DisplayList.ViewUpdater.ViewInfo.Seeds.invalidate()();
          id v141 = v159[0];
        }
        char v83 = *((unsigned char *)v8 + 88);
        long long v157 = *(_OWORD *)(v8 + 18);
        char v158 = v83;
        *(void *)&long long v167 = v13;
        *((void *)&v167 + 1) = v12;
        *(void *)v168 = v15;
        *(void *)&v168[8] = v14;
        *(void *)&v168[16] = v16;
        *(_OWORD *)&v168[24] = v143;
        *(void *)&v168[40] = v144;
        BYTE2(v169) = BYTE2(v145);
        LOWORD(v169) = v145;
        DWORD1(v169) = v151;
        a6(v159, &v157, &v167, v81);
        char v84 = BYTE9(v165);
        if ((BYTE9(v165) & 1) == 0)
        {
          if (v16) {
            int v85 = (2 * ((33 * (v16 >> 16)) ^ v16)) | 1;
          }
          else {
            LOWORD(v85) = 0;
          }
          LOWORD(v164) = v85;
        }
        id v86 = v159[0];
        if (v159[0] != v141)
        {
          unint64_t v87 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt)v141);
          if (v88)
          {
            unint64_t v89 = v87;
            char v90 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v91 = *((void *)v8 + 2);
            *(void *)&long long v167 = v91;
            *((void *)v8 + 2) = 0x8000000000000000;
            if ((v90 & 1) == 0)
            {
              specialized _NativeDictionary.copy()();
              uint64_t v91 = v167;
            }
            specialized _NativeDictionary._delete(at:)(v89, v91);
            *((void *)v8 + 2) = v91;
            swift_bridgeObjectRelease();
          }
          int v92 = *v8;
          swift_unknownObjectRetain();
          CoreViewRemoveFromSuperview(v92 & 3, v141);
          char v93 = swift_isUniquelyReferenced_nonNull_native();
          *(void *)&long long v167 = *((void *)v8 + 2);
          *((void *)v8 + 2) = 0x8000000000000000;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v82, v22, v153, (Swift::UInt)v86, v93);
          *((void *)v8 + 2) = v167;
          swift_bridgeObjectRelease();
          if (!v8[20])
          {
            if (v151) {
              objc_msgSend(v159[1], sel_setSwiftUI_displayListID_, v151);
            }
          }
          swift_unknownObjectRelease();
          BOOL v79 = 1;
        }
        long long v169 = v163;
        *(_OWORD *)v170 = v164;
        *(_OWORD *)&v170[16] = v165;
        long long v167 = *(_OWORD *)v159;
        *(_OWORD *)v168 = v160;
        *(_OWORD *)&v168[16] = v161;
        uint64_t v171 = v166;
        *(_OWORD *)&v168[32] = v162;
        outlined retain of DisplayList.ViewUpdater.ViewInfo((uint64_t)&v167);
        char v94 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)&long long v157 = *((void *)v8 + 1);
        *((void *)v8 + 1) = 0x8000000000000000;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)&v167, v82, v22, v153, v94);
        *((void *)v8 + 1) = v157;
        swift_bridgeObjectRelease();
        uint64_t v95 = v163;
        char v73 = v84 ^ 1;
        uint64_t v59 = v166;
        uint64_t v96 = v160;

        *(void *)a7 = v86;
        *(void *)(a7 + 8) = v96;
        *(void *)(a7 + 16) = v95;
        *(_DWORD *)(a7 + 24) = v155;
        *(_DWORD *)(a7 + 28) = v156;
        *(_DWORD *)(a7 + 32) = v138;
        *(_DWORD *)(a7 + 36) = v150;
        *(unsigned char *)(a7 + 40) = v153;
        *(unsigned char *)(a7 + 41) = v79;
LABEL_45:
        *(unsigned char *)(a7 + 42) = v73;
        *(void *)(a7 + 48) = v59;
        return;
      }
    }
    BOOL v79 = *(double *)(*(void *)v81 + 8) >= v135;
    goto LABEL_26;
  }
  __int16 v97 = *((_WORD *)v8 + 52);
  char v98 = *((unsigned char *)v8 + 106);
  *(void *)&long long v172 = *((void *)v8 + 12);
  WORD4(v172) = v97;
  BYTE10(v172) = v98;
  swift_unknownObjectRetain_n();
  id v99 = v26;
  swift_unknownObjectRetain_n();
  id v100 = v99;
  uint64_t v101 = DisplayList.minimalDescription.getter();
  v152 = v102;
  uint64_t v154 = v101;
  static os_log_type_t.error.getter();
  if (one-time initialization token for internalErrorsLog != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v103 = (void *)static Log.internalErrorsLog;
  _s7SwiftUI11DisplayListV10ArchiveIDsVSgMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (uint64_t (*)(uint64_t))type metadata accessor for CVarArg, MEMORY[0x263F8E0F8]);
  uint64_t v104 = swift_allocObject();
  *(_OWORD *)(v104 + 16) = xmmword_2461BE290;
  uint64_t v105 = MEMORY[0x263F8E8F8];
  uint64_t v106 = MEMORY[0x263F8E960];
  *(void *)(v104 + 56) = MEMORY[0x263F8E8F8];
  *(void *)(v104 + 64) = v106;
  *(_DWORD *)(v104 + 32) = v155;
  *(void *)(v104 + 96) = v105;
  *(void *)(v104 + 104) = v106;
  *(_DWORD *)(v104 + 72) = v156;
  *(void *)(v104 + 136) = v105;
  *(void *)(v104 + 144) = v106;
  *(_DWORD *)(v104 + 112) = v138;
  *(void *)(v104 + 176) = v105;
  *(void *)(v104 + 184) = v106;
  *(_DWORD *)(v104 + 152) = v20;
  id v107 = v103;
  _print_unlocked<A, B>(_:_:)();
  uint64_t v108 = MEMORY[0x263F8D310];
  *(void *)(v104 + 216) = MEMORY[0x263F8D310];
  unint64_t v109 = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v104 + 192) = 0;
  *(void *)(v104 + 200) = 0xE000000000000000;
  *(void *)(v104 + 256) = v108;
  *(void *)(v104 + 264) = v109;
  *(void *)(v104 + 224) = v109;
  *(void *)(v104 + 232) = v154;
  *(void *)(v104 + 240) = v152;
  swift_bridgeObjectRetain();
  os_log(_:dso:log:_:_:)();

  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(37);
  v110._countAndFlagsBits = 0x6465746165706572;
  v110._object = (void *)0xEF203A7765697620;
  String.append(_:)(v110);
  v111._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v111);
  swift_bridgeObjectRelease();
  v112._countAndFlagsBits = 35;
  v112._object = (void *)0xE100000000000000;
  String.append(_:)(v112);
  swift_bridgeObjectRelease();
  v113._countAndFlagsBits = 8236;
  v113._object = (void *)0xE200000000000000;
  String.append(_:)(v113);
  v114._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v114);
  swift_bridgeObjectRelease();
  v115._countAndFlagsBits = 8236;
  v115._object = (void *)0xE200000000000000;
  String.append(_:)(v115);
  v116._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v116);
  swift_bridgeObjectRelease();
  v117._countAndFlagsBits = 35;
  v117._object = (void *)0xE100000000000000;
  String.append(_:)(v117);
  swift_bridgeObjectRelease();
  v118._countAndFlagsBits = 8236;
  v118._object = (void *)0xE200000000000000;
  String.append(_:)(v118);
  v119._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v119);
  swift_bridgeObjectRelease();
  v120._countAndFlagsBits = 8236;
  v120._object = (void *)0xE200000000000000;
  String.append(_:)(v120);
  _print_unlocked<A, B>(_:_:)();
  v121._countAndFlagsBits = 8236;
  v121._object = (void *)0xE200000000000000;
  String.append(_:)(v121);
  v122._countAndFlagsBits = v154;
  v122._object = v152;
  String.append(_:)(v122);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

unint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, unint64_t a2, unint64_t a3, char a4, char a5)
{
  unint64_t v6 = (void **)v5;
  char v11 = a4 & 1;
  uint64_t v12 = (void *)*v5;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, a4 & 1);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 < v17 || (a5 & 1) == 0)
  {
    if (v19 >= v17 && (a5 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a5 & 1);
    unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, v11);
    if ((v18 & 1) == (v24 & 1))
    {
      unint64_t v14 = v23;
      uint64_t v20 = *v6;
      if (v18) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v20 = *v6;
  if (v18)
  {
LABEL_8:
    uint64_t v21 = v20[7] + 120 * v14;
    return outlined assign with take of DisplayList.ViewUpdater.ViewInfo(a1, v21);
  }
LABEL_13:

  return specialized _NativeDictionary._insert(at:key:value:)(v14, a2, a3, v11, a1, v20);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unint64_t a1, unint64_t a2, char a3)
{
  unint64_t v5 = HIDWORD(a1);
  unint64_t v6 = HIDWORD(a2);
  int v7 = a3 & 1;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Swift::Int v8 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v7, v8);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t result = a4 & ~v6;
  if ((*(void *)(v4 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v8 = ~v6;
    do
    {
      uint64_t v9 = *(void *)(v4 + 48) + 20 * result;
      int v10 = *(_DWORD *)v9;
      int v11 = *(_DWORD *)(v9 + 4);
      int v12 = *(_DWORD *)(v9 + 8);
      int v13 = *(_DWORD *)(v9 + 12);
      int v14 = *(unsigned __int8 *)(v9 + 16);
      BOOL v18 = v10 != a1 || v11 != HIDWORD(a1) || v12 != a2 || v13 != HIDWORD(a2);
      if (((v18 | a3 ^ v14) & 1) == 0) {
        break;
      }
      unint64_t result = (result + 1) & v8;
    }
    while (((*(void *)(v4 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

uint64_t outlined assign with take of DisplayList.ViewUpdater.ViewInfo(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t assignWithTake for DisplayList.ViewUpdater.ViewInfo(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectRelease();
  uint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_WORD *)(a1 + 96) = *(_WORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(unsigned char *)(a1 + 105) = *(unsigned char *)(a2 + 105);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  return a1;
}

uint64_t _UIKitAddSubview(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = (void *)[a2 layer];
  int v7 = (void *)[v6 sublayers];
  uint64_t v8 = v7;
  if (v7) {
    uint64_t v9 = [v7 count];
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = [a1 layer];
  if (v9 <= a3 || (uint64_t result = [v8 objectAtIndexedSubscript:a3], result != v10))
  {
    if ((void *)CALayerGetSuperlayer() == v6)
    {
      if (a3 + 1 < v9 && objc_msgSend(v8, "objectAtIndexedSubscript:") == v10)
      {
        uint64_t v10 = [v8 objectAtIndexedSubscript:a3];
        if (!v10) {
          _UIKitAddSubview_cold_1();
        }
      }
      else
      {
        uint64_t v9 = a3;
      }
      [v6 insertSublayer:v10 atIndex:v9];
      return [a2 _invalidateSubviewCache];
    }
    else
    {
      return objc_msgSend(a2, "swiftui_insertRenderedSubview:atIndex:", a1, a3);
    }
  }
  return result;
}

uint64_t CoreViewAddSubview(uint64_t result, void *a2, void *a3, uint64_t a4)
{
  if (result)
  {
    if (result == 2)
    {
      return objc_msgSend(a2, "insertSublayer:atIndex:");
    }
    else if (result == 1)
    {
      abort();
    }
  }
  else
  {
    return _UIKitAddSubview(a3, a2, a4);
  }
  return result;
}

uint64_t outlined retain of DisplayList.ViewUpdater.ViewInfo(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 8);
  swift_unknownObjectRetain();
  id v3 = v2;
  swift_unknownObjectRetain();
  return a1;
}

uint64_t partial apply for implicit closure #4 in implicit closure #3 in DisplayList.ViewUpdater.updateItemView(container:from:localState:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return implicit closure #4 in implicit closure #3 in DisplayList.ViewUpdater.updateItemView(container:from:localState:)(a1, a2, a3, a4, *(void *)(v4 + 16));
}

uint64_t CoreViewLayer(int a1, void *a2)
{
  if (a1 == 2) {
    return (uint64_t)a2;
  }
  else {
    return [a2 layer];
  }
}

uint64_t DisplayList.ViewUpdater.ViewInfo.init(view:layer:container:state:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int16x8_t *a5@<X8>)
{
  uint64_t v9 = *(void *)a4;
  uint64_t v10 = *(void *)(a4 + 8);
  uint64_t v11 = *(void *)(a4 + 16);
  uint64_t v12 = *(void *)(a4 + 24);
  int v13 = *(unsigned __int8 *)(a4 + 32);
  __int8 v14 = *(unsigned char *)(a4 + 33);
  uint64_t result = AGMakeUniqueID();
  uint64_t v16 = result;
  if (one-time initialization token for infinity != -1) {
    uint64_t result = swift_once();
  }
  uint64_t v17 = static Time.infinity;
  a5->i64[0] = a1;
  a5->i64[1] = a2;
  a5[1].i64[0] = a3;
  a5[1].i64[1] = v9;
  a5[2].i64[0] = v10;
  a5[2].i64[1] = v11;
  a5[3].i64[0] = v12;
  a5[3].i8[8] = v13;
  a5[3].i8[9] = v14;
  a5[4].i64[0] = v16;
  a5[4].i64[1] = -1;
  a5[5] = vdupq_n_s16(2 * ((v13 - 13) < 2));
  a5[6].i16[0] = 0;
  a5[6].i32[1] = 0;
  a5[6].i16[4] = 0;
  a5[7].i64[0] = v17;
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3, Swift::UInt a4, char a5)
{
  uint64_t v6 = (void **)v5;
  uint64_t v12 = (void *)*v5;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a4);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 < result || (a5 & 1) == 0)
  {
    if (v19 >= result && (a5 & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
      goto LABEL_9;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a5 & 1);
    uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a4);
    if ((v18 & 1) == (v20 & 1))
    {
      unint64_t v14 = result;
      goto LABEL_9;
    }
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_9:
  char v21 = a3 & 1;
  unint64_t v22 = *v6;
  if (v18)
  {
    uint64_t v23 = v22[7] + 20 * v14;
    *(void *)uint64_t v23 = a1;
    *(void *)(v23 + 8) = a2;
    *(unsigned char *)(v23 + 16) = v21;
  }
  else
  {
    return specialized _NativeDictionary._insert(at:key:value:)(v14, a4, a1, a2, v21, v22);
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(Swift::UInt a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  Swift::Int v2;
  uint64_t vars8;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v2 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  Swift::Int v2;
  uint64_t vars8;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v2 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, char a4, uint64_t a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1 << result;
  uint64_t v6 = a6[6] + 20 * result;
  *(void *)uint64_t v6 = a2;
  *(void *)(v6 + 8) = a3;
  *(unsigned char *)(v6 + 16) = a4 & 1;
  uint64_t v7 = a6[7] + 120 * result;
  long long v8 = *(_OWORD *)(a5 + 16);
  *(_OWORD *)uint64_t v7 = *(_OWORD *)a5;
  *(_OWORD *)(v7 + 16) = v8;
  long long v9 = *(_OWORD *)(a5 + 48);
  *(_OWORD *)(v7 + 32) = *(_OWORD *)(a5 + 32);
  *(_OWORD *)(v7 + 48) = v9;
  *(void *)(v7 + 112) = *(void *)(a5 + 112);
  long long v10 = *(_OWORD *)(a5 + 96);
  long long v11 = *(_OWORD *)(a5 + 64);
  *(_OWORD *)(v7 + 80) = *(_OWORD *)(a5 + 80);
  *(_OWORD *)(v7 + 96) = v10;
  *(_OWORD *)(v7 + 64) = v11;
  uint64_t v12 = a6[2];
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a6[2] = v14;
  }
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  long long v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  a6[(result >> 6) + 8] |= 1 << result;
  uint64_t v6 = a6[6] + 20 * result;
  *(void *)uint64_t v6 = a2;
  *(void *)(v6 + 8) = a3;
  *(unsigned char *)(v6 + 16) = a4 & 1;
  uint64_t v7 = a6[7] + 56 * result;
  long long v8 = *(_OWORD *)(a5 + 16);
  *(_OWORD *)uint64_t v7 = *(_OWORD *)a5;
  *(_OWORD *)(v7 + 16) = v8;
  *(_OWORD *)(v7 + 32) = *(_OWORD *)(a5 + 32);
  *(void *)(v7 + 48) = *(void *)(a5 + 48);
  long long v9 = a6[2];
  long long v10 = __OFADD__(v9, 1);
  long long v11 = v9 + 1;
  if (v10) {
    __break(1u);
  }
  else {
    a6[2] = v11;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1 << result;
  *(void *)(a6[6] + 8 * result) = a2;
  uint64_t v6 = a6[7] + 20 * result;
  *(void *)uint64_t v6 = a3;
  *(void *)(v6 + 8) = a4;
  *(unsigned char *)(v6 + 16) = a5 & 1;
  uint64_t v7 = a6[2];
  BOOL v8 = __OFADD__(v7, 1);
  uint64_t v9 = v7 + 1;
  if (v8) {
    __break(1u);
  }
  else {
    a6[2] = v9;
  }
  return result;
}

{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a6[(result >> 6) + 8] |= 1 << result;
  uint64_t v6 = (void *)(a6[6] + 16 * result);
  *uint64_t v6 = a2;
  v6[1] = a3;
  uint64_t v7 = a6[7] + 16 * result;
  *(void *)uint64_t v7 = a4;
  *(unsigned char *)(v7 + 8) = a5;
  BOOL v8 = a6[2];
  uint64_t v9 = __OFADD__(v8, 1);
  long long v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a6[2] = v10;
  }
  return result;
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in DisplayList.ViewUpdater.updateItemView(container:from:localState:)@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return implicit closure #2 in implicit closure #1 in DisplayList.ViewUpdater.updateItemView(container:from:localState:)(a1, a2, *(void *)(v3 + 16), a3);
}

void DisplayList.ViewUpdater.Container.removeRemaining(viewCache:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 32);
  int v31 = *(_DWORD *)(v1 + 8) & 3;
  id v32 = (id)CoreViewSubviews(v31, *(void **)v1);
  uint64_t v4 = (char *)objc_msgSend(v32, sel_count);
  if (v3 >= (uint64_t)v4)
  {
LABEL_12:
  }
  else
  {
    long long v5 = v4;
    while (v3 < (uint64_t)v5)
    {
      id v6 = objc_msgSend(v32, sel_objectAtIndexedSubscript_, --v5);
      uint64_t v7 = v6;
      uint64_t v8 = *(void *)(a1 + 16);
      if (*(void *)(v8 + 16))
      {
        unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt)v6);
        if (v10)
        {
          uint64_t v11 = *(void *)(a1 + 8);
          if (!*(void *)(v11 + 16)) {
            goto LABEL_16;
          }
          uint64_t v12 = *(void *)(v8 + 56) + 20 * v9;
          char v13 = *(unsigned char *)(v12 + 16);
          unint64_t v14 = *(void *)v12;
          unint64_t v15 = *(void *)(v12 + 8);
          unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)v12, v15, v13);
          if ((v17 & 1) == 0) {
            goto LABEL_17;
          }
          uint64_t v18 = *(void *)(v11 + 56);
          if ((*(unsigned char *)(v18 + 120 * v16 + 104) & 1) == 0)
          {
            uint64_t v19 = v18 + 120 * v16;
            uint64_t v20 = *(void *)(v19 + 112);
            char v21 = *(unsigned char *)(v19 + 105);
            int v22 = *(_DWORD *)(v19 + 100);
            __int16 v23 = *(_WORD *)(v19 + 96);
            __int16 v24 = *(_WORD *)(v19 + 56);
            uint64_t v25 = *(void **)(v19 + 8);
            uint64_t v26 = *(void *)(v19 + 16);
            v34[0] = *(void *)v19;
            v34[1] = v25;
            v34[2] = v26;
            long long v35 = *(_OWORD *)(v19 + 24);
            long long v36 = *(_OWORD *)(v19 + 40);
            __int16 v37 = v24;
            long long v27 = *(_OWORD *)(v19 + 80);
            long long v38 = *(_OWORD *)(v19 + 64);
            long long v39 = v27;
            __int16 v40 = v23;
            int v41 = v22;
            char v42 = 1;
            char v43 = v21;
            uint64_t v44 = v20;
            swift_unknownObjectRetain_n();
            id v28 = v25;
            swift_unknownObjectRetain_n();
            id v30 = v28;
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v33[0] = *(void *)(a1 + 8);
            *(void *)(a1 + 8) = 0x8000000000000000;
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v34, v14, v15, v13, isUniquelyReferenced_nonNull_native);
            *(void *)(a1 + 8) = v33[0];
            swift_bridgeObjectRelease();
            specialized Set._Variant.insert(_:)((uint64_t)v33, v14, v15, v13);
            swift_unknownObjectRelease();

            swift_unknownObjectRelease();
          }
          CoreViewRemoveFromSuperview(v31, v7);
        }
      }
      swift_unknownObjectRelease();
      if ((char *)v3 == v5) {
        goto LABEL_12;
      }
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
  }
}

uint64_t CoreViewSubviews(int a1, void *a2)
{
  if (a1 == 2)
  {
    uint64_t v3 = (void *)MEMORY[0x263EFF8C0];
    uint64_t v4 = [a2 sublayers];
    return [v3 arrayWithArray:v4];
  }
  else
  {
    return [a2 subviews];
  }
}

Swift::Void __swiftcall DisplayList.ViewUpdater.Model.State.reset()()
{
  *(_DWORD *)(v0 + 8) = 1065353216;
  if (one-time initialization token for normal != -1) {
    swift_once();
  }
  uint64_t v1 = static GraphicsBlendMode.normal;
  char v2 = byte_26B0EB4A0;
  uint64_t v3 = *(void *)(v0 + 16);
  char v4 = *(unsigned char *)(v0 + 24);
  outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_26B0EB4A0);
  outlined consume of GraphicsBlendMode(v3, v4);
  *(void *)(v0 + 16) = v1;
  *(unsigned char *)(v0 + 24) = v2;
  *(void *)(v0 + 32) = 0x3FF0000000000000;
  *(void *)(v0 + 40) = 0;
  *(void *)(v0 + 48) = 0;
  *(void *)(v0 + 56) = 0x3FF0000000000000;
  *(void *)(v0 + 64) = 0;
  *(void *)(v0 + 72) = 0;
  swift_bridgeObjectRelease();
  uint64_t v5 = MEMORY[0x263F8EE78];
  *(void *)(v0 + 80) = MEMORY[0x263F8EE78];
  swift_bridgeObjectRelease();
  *(void *)(v0 + 88) = v5;
  swift_release();
  *(void *)(v0 + 96) = 0;
  *(unsigned char *)(v0 + 104) = 0;
  swift_bridgeObjectRelease();
  *(void *)(v0 + 112) = v5;
  *(_OWORD *)(v0 + 120) = 0u;
  *(_OWORD *)(v0 + 136) = 0u;
  *(_OWORD *)(v0 + 152) = 0u;
  *(void *)(v0 + 168) = 0;
}

unint64_t DisplayList.ViewUpdater.ViewCache.setNextUpdate(_:in:)(unint64_t result, uint64_t a2)
{
  double v4 = *(double *)result;
  if (*(double *)result >= *(double *)(a2 + 48)) {
    return result;
  }
  uint64_t v5 = v2;
  *(double *)(a2 + 48) = v4;
  char v6 = *(unsigned char *)(a2 + 40);
  unint64_t v7 = *(void *)(a2 + 24);
  unint64_t v8 = *(void *)(a2 + 32);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  char v10 = *(void **)(v2 + 8);
  *(void *)(v5 + 8) = 0x8000000000000000;
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v7, v8, v6);
  uint64_t v12 = v10[2];
  BOOL v13 = (v11 & 1) == 0;
  BOOL v14 = __OFADD__(v12, v13);
  uint64_t v15 = v12 + v13;
  if (v14)
  {
    __break(1u);
    goto LABEL_14;
  }
  char v3 = v11;
  if (v10[3] < v15)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, isUniquelyReferenced_nonNull_native);
    uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v7, v8, v6);
    if ((v3 & 1) == (v16 & 1)) {
      goto LABEL_7;
    }
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_14:
    unint64_t v20 = result;
    specialized _NativeDictionary.copy()();
    uint64_t result = v20;
    if (v3) {
      goto LABEL_8;
    }
LABEL_15:
    __break(1u);
    return result;
  }
LABEL_7:
  if ((v3 & 1) == 0) {
    goto LABEL_15;
  }
LABEL_8:
  uint64_t v17 = v10[7];
  if (*(void *)(v17 + 120 * result))
  {
    uint64_t v18 = v17 + 120 * result;
    char v19 = *(unsigned char *)(v18 + 105);
    *(unsigned char *)(v18 + 104) = *(unsigned char *)(v18 + 104);
    *(unsigned char *)(v18 + 105) = v19;
    *(double *)(v18 + 112) = v4;
  }
  else
  {
    uint64_t result = specialized _NativeDictionary._delete(at:)(result, (uint64_t)v10);
  }
  *(void *)(v5 + 8) = v10;
  return result;
}

{
  uint64_t v2;
  char v3;
  double v4;
  uint64_t v5;
  char v6;
  unint64_t v7;
  unint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  void *v10;
  char v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;

  double v4 = *(double *)result;
  if (*(double *)result >= *(double *)(a2 + 32)) {
    return result;
  }
  uint64_t v5 = v2;
  *(double *)(a2 + 32) = v4;
  char v6 = *(unsigned char *)(a2 + 24);
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = *(void *)(a2 + 16);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  char v10 = *(void **)(v2 + 8);
  *(void *)(v5 + 8) = 0x8000000000000000;
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v7, v8, v6);
  uint64_t v12 = v10[2];
  BOOL v13 = (v11 & 1) == 0;
  BOOL v14 = __OFADD__(v12, v13);
  uint64_t v15 = v12 + v13;
  if (v14)
  {
    __break(1u);
    goto LABEL_14;
  }
  char v3 = v11;
  if (v10[3] < v15)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, isUniquelyReferenced_nonNull_native);
    uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v7, v8, v6);
    if ((v3 & 1) == (v16 & 1)) {
      goto LABEL_7;
    }
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_14:
    unint64_t v20 = result;
    specialized _NativeDictionary.copy()();
    uint64_t result = v20;
    if (v3) {
      goto LABEL_8;
    }
LABEL_15:
    __break(1u);
    return result;
  }
LABEL_7:
  if ((v3 & 1) == 0) {
    goto LABEL_15;
  }
LABEL_8:
  uint64_t v17 = v10[7];
  if (*(void *)(v17 + 120 * result))
  {
    uint64_t v18 = v17 + 120 * result;
    char v19 = *(unsigned char *)(v18 + 105);
    *(unsigned char *)(v18 + 104) = *(unsigned char *)(v18 + 104);
    *(unsigned char *)(v18 + 105) = v19;
    *(double *)(v18 + 112) = v4;
  }
  else
  {
    uint64_t result = specialized _NativeDictionary._delete(at:)(result, (uint64_t)v10);
  }
  *(void *)(v5 + 8) = v10;
  return result;
}

Swift::Void __swiftcall DisplayList.ViewUpdater.ViewCache.clearAsyncValues()()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = 1 << *(unsigned char *)(v1 + 32);
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  else {
    uint64_t v3 = -1;
  }
  unint64_t v4 = v3 & *(void *)(v1 + 64);
  int64_t v45 = (unint64_t)(v2 + 63) >> 6;
  uint64_t v46 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  int64_t v5 = 0;
  while (2)
  {
    if (!v4)
    {
      int64_t v7 = v5 + 1;
      if (__OFADD__(v5, 1)) {
        goto LABEL_69;
      }
      if (v7 >= v45) {
        goto LABEL_64;
      }
      unint64_t v8 = *(void *)(v44 + 8 * v7);
      int64_t v9 = v5 + 1;
      if (!v8)
      {
        int64_t v9 = v5 + 2;
        if (v5 + 2 >= v45) {
          goto LABEL_64;
        }
        unint64_t v8 = *(void *)(v44 + 8 * v9);
        if (!v8)
        {
          int64_t v9 = v5 + 3;
          if (v5 + 3 >= v45) {
            goto LABEL_64;
          }
          unint64_t v8 = *(void *)(v44 + 8 * v9);
          if (!v8)
          {
            uint64_t v10 = v5 + 4;
            if (v5 + 4 < v45)
            {
              unint64_t v8 = *(void *)(v44 + 8 * v10);
              if (v8)
              {
                int64_t v9 = v5 + 4;
                goto LABEL_21;
              }
              while (1)
              {
                int64_t v9 = v10 + 1;
                if (__OFADD__(v10, 1)) {
                  goto LABEL_70;
                }
                if (v9 >= v45) {
                  break;
                }
                unint64_t v8 = *(void *)(v44 + 8 * v9);
                ++v10;
                if (v8) {
                  goto LABEL_21;
                }
              }
            }
LABEL_64:
            swift_release();
            swift_bridgeObjectRelease();
            *(void *)(v43 + 40) = MEMORY[0x263F8EE80];

            *(void *)(v43 + 56) = 0;
            return;
          }
        }
      }
LABEL_21:
      uint64_t v47 = (v8 - 1) & v8;
      int64_t v48 = v9;
      unint64_t v6 = __clz(__rbit64(v8)) + (v9 << 6);
      goto LABEL_22;
    }
    uint64_t v47 = (v4 - 1) & v4;
    int64_t v48 = v5;
    unint64_t v6 = __clz(__rbit64(v4)) | (v5 << 6);
LABEL_22:
    char v11 = *(void **)(*(void *)(v46 + 48) + 8 * v6);
    uint64_t v12 = (void *)(*(void *)(v46 + 56) + 16 * v6);
    uint64_t v14 = *v12;
    uint64_t v13 = v12[1];
    uint64_t v15 = (void *)(*v12 + 56);
    uint64_t v16 = 1 << *(unsigned char *)(*v12 + 32);
    if (v16 < 64) {
      uint64_t v17 = ~(-1 << v16);
    }
    else {
      uint64_t v17 = -1;
    }
    unint64_t v18 = v17 & *v15;
    int64_t v19 = (unint64_t)(v16 + 63) >> 6;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    int64_t v20 = 0;
    while (1)
    {
      if (v18)
      {
        unint64_t v21 = __clz(__rbit64(v18));
        v18 &= v18 - 1;
        unint64_t v22 = v21 | (v20 << 6);
        goto LABEL_27;
      }
      int64_t v27 = v20 + 1;
      if (__OFADD__(v20, 1))
      {
        __break(1u);
LABEL_66:
        __break(1u);
        goto LABEL_67;
      }
      if (v27 >= v19) {
        goto LABEL_43;
      }
      unint64_t v28 = v15[v27];
      ++v20;
      if (!v28)
      {
        int64_t v20 = v27 + 1;
        if (v27 + 1 >= v19) {
          goto LABEL_43;
        }
        unint64_t v28 = v15[v20];
        if (!v28)
        {
          int64_t v20 = v27 + 2;
          if (v27 + 2 >= v19) {
            goto LABEL_43;
          }
          unint64_t v28 = v15[v20];
          if (!v28) {
            break;
          }
        }
      }
LABEL_42:
      unint64_t v18 = (v28 - 1) & v28;
      unint64_t v22 = __clz(__rbit64(v28)) + (v20 << 6);
LABEL_27:
      __int16 v23 = (uint64_t *)(*(void *)(v14 + 48) + 16 * v22);
      uint64_t v24 = *v23;
      uint64_t v25 = v23[1];
      swift_bridgeObjectRetain();
      uint64_t v26 = (void *)MEMORY[0x24C522820](v24, v25);
      objc_msgSend(v11, sel_removeAnimationForKey_, v26);
      swift_bridgeObjectRelease();
    }
    int64_t v29 = v27 + 3;
    if (v29 < v19)
    {
      unint64_t v28 = v15[v29];
      if (!v28)
      {
        while (1)
        {
          int64_t v20 = v29 + 1;
          if (__OFADD__(v29, 1)) {
            break;
          }
          if (v20 >= v19) {
            goto LABEL_43;
          }
          unint64_t v28 = v15[v20];
          ++v29;
          if (v28) {
            goto LABEL_42;
          }
        }
LABEL_67:
        __break(1u);
        goto LABEL_68;
      }
      int64_t v20 = v29;
      goto LABEL_42;
    }
LABEL_43:
    swift_release();
    uint64_t v30 = v13 + 64;
    uint64_t v31 = *(void *)(v13 + 64);
    uint64_t v32 = 1 << *(unsigned char *)(v13 + 32);
    swift_bridgeObjectRelease();
    int64_t v33 = 0;
    if (v32 < 64) {
      uint64_t v34 = ~(-1 << v32);
    }
    else {
      uint64_t v34 = -1;
    }
    unint64_t v35 = v34 & v31;
    int64_t v36 = (unint64_t)(v32 + 63) >> 6;
    while (2)
    {
      if (v35)
      {
        unint64_t v37 = __clz(__rbit64(v35));
        v35 &= v35 - 1;
        unint64_t v38 = v37 | (v33 << 6);
LABEL_48:
        id v39 = *(id *)(*(void *)(v13 + 56) + 8 * v38);
        objc_msgSend(v11, sel_removePresentationModifier_, v39);

        continue;
      }
      break;
    }
    int64_t v40 = v33 + 1;
    if (__OFADD__(v33, 1)) {
      goto LABEL_66;
    }
    if (v40 >= v36)
    {
LABEL_5:
      swift_release();
      unint64_t v4 = v47;
      int64_t v5 = v48;
      continue;
    }
    break;
  }
  unint64_t v41 = *(void *)(v30 + 8 * v40);
  ++v33;
  if (v41) {
    goto LABEL_63;
  }
  int64_t v33 = v40 + 1;
  if (v40 + 1 >= v36) {
    goto LABEL_5;
  }
  unint64_t v41 = *(void *)(v30 + 8 * v33);
  if (v41) {
    goto LABEL_63;
  }
  int64_t v33 = v40 + 2;
  if (v40 + 2 >= v36) {
    goto LABEL_5;
  }
  unint64_t v41 = *(void *)(v30 + 8 * v33);
  if (v41)
  {
LABEL_63:
    unint64_t v35 = (v41 - 1) & v41;
    unint64_t v38 = __clz(__rbit64(v41)) + (v33 << 6);
    goto LABEL_48;
  }
  int64_t v42 = v40 + 3;
  if (v42 >= v36) {
    goto LABEL_5;
  }
  unint64_t v41 = *(void *)(v30 + 8 * v42);
  if (v41)
  {
    int64_t v33 = v42;
    goto LABEL_63;
  }
  while (1)
  {
    int64_t v33 = v42 + 1;
    if (__OFADD__(v42, 1)) {
      break;
    }
    if (v33 >= v36) {
      goto LABEL_5;
    }
    unint64_t v41 = *(void *)(v30 + 8 * v33);
    ++v42;
    if (v41) {
      goto LABEL_63;
    }
  }
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
}

unint64_t type metadata accessor for ViewGraphRenderObserver()
{
  unint64_t result = lazy cache variable for type metadata for ViewGraphRenderObserver;
  if (!lazy cache variable for type metadata for ViewGraphRenderObserver)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for ViewGraphRenderObserver);
  }
  return result;
}

Swift::Void __swiftcall DisplayList.ViewUpdater.ViewCache.reclaim(time:)(SwiftUI::Time time)
{
  uint64_t v3 = v2;
  uint64_t v4 = v2[3];
  uint64_t v5 = *(void *)(v4 + 56);
  uint64_t v414 = v4;
  uint64_t v415 = v4 + 56;
  double v6 = *v1;
  uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & v5;
  int64_t v416 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v10 = v3 + 1;
  swift_bridgeObjectRetain();
  unint64_t v11 = v9;
  int64_t v12 = 0;
  uint64_t v13 = &_OBJC_LABEL_PROTOCOL____NSTextAnimatorStateSnapshot;
  v531 = v3 + 1;
  while (1)
  {
    while (1)
    {
      if (v11)
      {
        unint64_t v14 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v15 = v14 | (v12 << 6);
      }
      else
      {
        if (__OFADD__(v12++, 1)) {
          goto LABEL_280;
        }
        if (v12 >= v416) {
          goto LABEL_270;
        }
        unint64_t v17 = *(void *)(v415 + 8 * v12);
        if (!v17)
        {
          int64_t v18 = v12 + 1;
          if (v12 + 1 >= v416) {
            goto LABEL_270;
          }
          unint64_t v17 = *(void *)(v415 + 8 * v18);
          if (!v17)
          {
            int64_t v18 = v12 + 2;
            if (v12 + 2 >= v416) {
              goto LABEL_270;
            }
            unint64_t v17 = *(void *)(v415 + 8 * v18);
            if (!v17)
            {
              int64_t v18 = v12 + 3;
              if (v12 + 3 >= v416) {
                goto LABEL_270;
              }
              unint64_t v17 = *(void *)(v415 + 8 * v18);
              if (!v17)
              {
                while (1)
                {
                  int64_t v12 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_287;
                  }
                  if (v12 >= v416) {
                    break;
                  }
                  unint64_t v17 = *(void *)(v415 + 8 * v12);
                  ++v18;
                  if (v17) {
                    goto LABEL_18;
                  }
                }
LABEL_270:
                swift_release();
                swift_bridgeObjectRelease();
                v3[3] = MEMORY[0x263F8EE88];
                if (*(void *)(v3[4] + 16))
                {
                  uint64_t v403 = swift_bridgeObjectRetain();
                  uint64_t v404 = specialized _NativeDictionary.filter(_:)(v403, v6);
                  swift_bridgeObjectRelease_n();
                  v3[4] = v404;
                }
                ++*((_DWORD *)v3 + 23);
                return;
              }
            }
          }
          int64_t v12 = v18;
        }
LABEL_18:
        unint64_t v11 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      uint64_t v19 = *v10;
      if (*(void *)(*v10 + 16))
      {
        unint64_t v420 = v11;
        int64_t v421 = v12;
        uint64_t v20 = *(void *)(v414 + 48) + 20 * v15;
        char v21 = *(unsigned char *)(v20 + 16);
        unint64_t v22 = *(void *)v20;
        unint64_t v23 = *(void *)(v20 + 8);
        unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)v20, v23, v21);
        unint64_t v11 = v420;
        int64_t v12 = v421;
        if (v25)
        {
          uint64_t v26 = *(void *)(v19 + 56) + 120 * v24;
          if (*(unsigned char *)(v26 + 104) == 1) {
            break;
          }
        }
      }
    }
    unint64_t v28 = *(void **)v26;
    int64_t v27 = *(void **)(v26 + 8);
    int64_t v29 = *(void **)(v26 + 16);
    unsigned int v413 = *(unsigned __int8 *)(v26 + 56);
    unint64_t v30 = specialized __RawDictionaryStorage.find<A>(_:)(v22, v23, v21);
    char v32 = v31;
    swift_unknownObjectRetain();
    id v412 = v27;
    swift_unknownObjectRetain();
    if (v32)
    {
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v34 = *v10;
      uint64_t v545 = *v10;
      uint64_t *v10 = 0x8000000000000000;
      if (!isUniquelyReferenced_nonNull_native)
      {
        specialized _NativeDictionary.copy()();
        uint64_t v34 = v545;
      }
      unint64_t v35 = *(void **)(*(void *)(v34 + 56) + 120 * v30 + 8);
      specialized _NativeDictionary._delete(at:)(v30, v34);
      uint64_t *v10 = v34;
      swift_unknownObjectRelease();

      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
    }
    unint64_t v36 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt)v28);
    if (v37)
    {
      unint64_t v38 = v36;
      int v39 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v40 = v3[2];
      uint64_t v545 = v40;
      v3[2] = 0x8000000000000000;
      if (!v39)
      {
        specialized _NativeDictionary.copy()();
        uint64_t v40 = v545;
      }
      specialized _NativeDictionary._delete(at:)(v38, v40);
      v3[2] = v40;
      swift_bridgeObjectRelease();
    }
    if (v413 > 0x10 || ((1 << v413) & 0x15F01) == 0) {
      goto LABEL_5;
    }
    int v42 = *(_DWORD *)v3 & 3;
    id v427 = (id)CoreViewSubviews(v42, v29);
    unint64_t v43 = (unint64_t)objc_msgSend(v427, sel_count);
    if ((v43 & 0x8000000000000000) != 0) {
      goto LABEL_286;
    }
    v530 = v28;
    if (v43) {
      break;
    }
LABEL_158:

    if (v413 == 12)
    {
      id v222 = (id)CoreViewMaskView(v42, v28);
      if (v222)
      {
        id v428 = (id)CoreViewSubviews(v42, v222);
        unint64_t v223 = (unint64_t)objc_msgSend(v428, sel_count);
        if ((v223 & 0x8000000000000000) != 0) {
          goto LABEL_290;
        }
        if (v223)
        {
          uint64_t v224 = 0;
          unint64_t v426 = v223;
          do
          {
            uint64_t v435 = v224;
            id v432 = objc_msgSend(v428, (SEL)v13[146], v405, v406, v407, v408, v409, v410, v411);
            unint64_t v225 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt)v432);
            if (v226)
            {
              unint64_t v227 = v225;
              int v228 = swift_isUniquelyReferenced_nonNull_native();
              uint64_t v229 = v3[2];
              uint64_t v545 = v229;
              v3[2] = 0x8000000000000000;
              if (!v228)
              {
                specialized _NativeDictionary.copy()();
                uint64_t v229 = v545;
              }
              uint64_t v230 = *(void *)(v229 + 56) + 20 * v227;
              char v231 = *(unsigned char *)(v230 + 16);
              unint64_t v232 = *(void *)v230;
              unint64_t v233 = *(void *)(v230 + 8);
              specialized _NativeDictionary._delete(at:)(v227, v229);
              v3[2] = v229;
              swift_bridgeObjectRelease();
              unint64_t v234 = specialized __RawDictionaryStorage.find<A>(_:)(v232, v233, v231);
              if (v235)
              {
                unint64_t v236 = v234;
                int v237 = swift_isUniquelyReferenced_nonNull_native();
                uint64_t v238 = *v10;
                uint64_t v545 = *v10;
                uint64_t *v10 = 0x8000000000000000;
                if (!v237)
                {
                  specialized _NativeDictionary.copy()();
                  uint64_t v238 = v545;
                }
                uint64_t v239 = *(void *)(v238 + 56) + 120 * v236;
                v240 = *(void **)(v239 + 16);
                v422 = *(void **)(v239 + 8);
                v424 = *(void **)v239;
                unsigned int v241 = *(unsigned __int8 *)(v239 + 56);
                specialized _NativeDictionary._delete(at:)(v236, v238);
                uint64_t *v10 = v238;
                swift_bridgeObjectRelease();
                if (v241 <= 0x10 && ((1 << v241) & 0x15F01) != 0)
                {
                  unsigned int v419 = v241;
                  int v243 = *(_DWORD *)v3 & 3;
                  id v461 = (id)CoreViewSubviews(v243, v240);
                  unint64_t v244 = (unint64_t)objc_msgSend(v461, sel_count);
                  if ((v244 & 0x8000000000000000) != 0) {
                    goto LABEL_284;
                  }
                  if (v244)
                  {
                    v245 = 0;
                    int v450 = v243;
                    v455 = (char *)v244;
                    do
                    {
                      v482 = v245;
                      id v477 = objc_msgSend(v461, (SEL)v13[146], v245);
                      unint64_t v247 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt)v477);
                      if (v248)
                      {
                        unint64_t v249 = v247;
                        int v250 = swift_isUniquelyReferenced_nonNull_native();
                        uint64_t v251 = v3[2];
                        uint64_t v545 = v251;
                        v3[2] = 0x8000000000000000;
                        if (!v250)
                        {
                          specialized _NativeDictionary.copy()();
                          uint64_t v251 = v545;
                        }
                        uint64_t v252 = *(void *)(v251 + 56) + 20 * v249;
                        char v253 = *(unsigned char *)(v252 + 16);
                        unint64_t v254 = *(void *)v252;
                        unint64_t v255 = *(void *)(v252 + 8);
                        specialized _NativeDictionary._delete(at:)(v249, v251);
                        v3[2] = v251;
                        swift_bridgeObjectRelease();
                        unint64_t v256 = specialized __RawDictionaryStorage.find<A>(_:)(v254, v255, v253);
                        if (v257)
                        {
                          unint64_t v258 = v256;
                          int v259 = swift_isUniquelyReferenced_nonNull_native();
                          uint64_t v260 = *v10;
                          uint64_t v545 = *v10;
                          uint64_t *v10 = 0x8000000000000000;
                          int v243 = v450;
                          if (!v259)
                          {
                            specialized _NativeDictionary.copy()();
                            uint64_t v260 = v545;
                          }
                          uint64_t v261 = *(void *)(v260 + 56) + 120 * v258;
                          v262 = *(void **)(v261 + 16);
                          v443 = *(void **)(v261 + 8);
                          v446 = *(void **)v261;
                          unsigned int v263 = *(unsigned __int8 *)(v261 + 56);
                          specialized _NativeDictionary._delete(at:)(v258, v260);
                          uint64_t *v10 = v260;
                          swift_bridgeObjectRelease();
                          unsigned int v437 = v263;
                          if (v263 > 0x10 || ((1 << v263) & 0x15F01) == 0) {
                            goto LABEL_222;
                          }
                          int v265 = *(_DWORD *)v3 & 3;
                          id v266 = (id)CoreViewSubviews(v265, v262);
                          unint64_t v267 = (unint64_t)objc_msgSend(v266, sel_count);
                          if ((v267 & 0x8000000000000000) != 0) {
                            goto LABEL_276;
                          }
                          unint64_t v268 = v267;
                          int v430 = v265;
                          if (v267)
                          {
                            uint64_t v269 = 0;
                            unint64_t v465 = v267;
                            id v471 = v266;
                            do
                            {
                              id v279 = objc_msgSend(v266, sel_objectAtIndexedSubscript_, v269);
                              unint64_t v280 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt)v279);
                              if (v281)
                              {
                                unint64_t v282 = v280;
                                int v283 = swift_isUniquelyReferenced_nonNull_native();
                                uint64_t v284 = v3[2];
                                uint64_t v545 = v284;
                                v3[2] = 0x8000000000000000;
                                if (!v283)
                                {
                                  specialized _NativeDictionary.copy()();
                                  uint64_t v284 = v545;
                                }
                                uint64_t v285 = *(void *)(v284 + 56) + 20 * v282;
                                char v286 = *(unsigned char *)(v285 + 16);
                                unint64_t v287 = *(void *)v285;
                                unint64_t v288 = *(void *)(v285 + 8);
                                specialized _NativeDictionary._delete(at:)(v282, v284);
                                v3[2] = v284;
                                swift_bridgeObjectRelease();
                                unint64_t v289 = specialized __RawDictionaryStorage.find<A>(_:)(v287, v288, v286);
                                if (v290)
                                {
                                  unint64_t v291 = v289;
                                  char v292 = swift_isUniquelyReferenced_nonNull_native();
                                  uint64_t v293 = *v531;
                                  uint64_t v545 = *v531;
                                  uint64_t *v531 = 0x8000000000000000;
                                  if ((v292 & 1) == 0)
                                  {
                                    specialized _NativeDictionary.copy()();
                                    uint64_t v293 = v545;
                                  }
                                  uint64_t v270 = *(void *)(v293 + 56) + 120 * v291;
                                  uint64_t v271 = *(void *)v270;
                                  v272 = *(void **)(v270 + 8);
                                  uint64_t v273 = *(void *)(v270 + 16);
                                  long long v500 = *(_OWORD *)(v270 + 24);
                                  uint64_t v274 = *(void *)(v270 + 40);
                                  uint64_t v275 = *(void *)(v270 + 48);
                                  __int16 v493 = *(_WORD *)(v270 + 56);
                                  v277 = *(void **)(v270 + 64);
                                  uint64_t v276 = *(void *)(v270 + 72);
                                  __int16 v526 = *(_WORD *)(v270 + 96);
                                  int v519 = *(_DWORD *)(v270 + 100);
                                  char v513 = *(unsigned char *)(v270 + 104);
                                  char v507 = *(unsigned char *)(v270 + 105);
                                  uint64_t v278 = *(void *)(v270 + 112);
                                  long long v486 = *(_OWORD *)(v270 + 80);
                                  specialized _NativeDictionary._delete(at:)(v291, v293);
                                  v3[1] = v293;
                                  swift_bridgeObjectRelease();
                                  v532[0] = *v3;
                                  uint64_t v545 = v271;
                                  v546 = v272;
                                  uint64_t v547 = v273;
                                  long long v548 = v500;
                                  uint64_t v549 = v274;
                                  uint64_t v550 = v275;
                                  LOWORD(v551) = v493;
                                  v552 = v277;
                                  uint64_t v553 = v276;
                                  long long v554 = v486;
                                  LOWORD(v555) = v526;
                                  HIDWORD(v555) = v519;
                                  LOBYTE(v556) = v513;
                                  BYTE1(v556) = v507;
                                  uint64_t v557 = v278;
                                  specialized DisplayList.ViewUpdater.Platform.forEachChild(of:do:)((uint64_t)&v545, v532, v3);
                                  swift_unknownObjectRelease();

                                  swift_unknownObjectRelease();
                                  unint64_t v268 = v465;
                                  id v266 = v471;
                                }
                              }
                              ++v269;
                              CoreViewRemoveFromSuperview(*(_DWORD *)v3 & 3, v279);
                              swift_unknownObjectRelease();
                            }
                            while (v268 != v269);
                          }

                          if (v437 != 12) {
                            goto LABEL_221;
                          }
                          id v294 = (id)CoreViewMaskView(v430, v446);
                          uint64_t v10 = v3 + 1;
                          uint64_t v13 = &_OBJC_LABEL_PROTOCOL____NSTextAnimatorStateSnapshot;
                          int v243 = v450;
                          v246 = v482;
                          if (v294)
                          {
                            id v295 = (id)CoreViewSubviews(v430, v294);
                            unint64_t v296 = (unint64_t)objc_msgSend(v295, sel_count);
                            if ((v296 & 0x8000000000000000) != 0) {
                              goto LABEL_281;
                            }
                            unint64_t v297 = v296;
                            if (v296)
                            {
                              uint64_t v298 = 0;
                              id v466 = v295;
                              unint64_t v527 = v296;
                              do
                              {
                                id v308 = objc_msgSend(v295, sel_objectAtIndexedSubscript_, v298);
                                unint64_t v309 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt)v308);
                                if (v310)
                                {
                                  unint64_t v311 = v309;
                                  char v312 = swift_isUniquelyReferenced_nonNull_native();
                                  uint64_t v313 = v3[2];
                                  uint64_t v545 = v313;
                                  v3[2] = 0x8000000000000000;
                                  if ((v312 & 1) == 0)
                                  {
                                    specialized _NativeDictionary.copy()();
                                    uint64_t v313 = v545;
                                  }
                                  uint64_t v314 = *(void *)(v313 + 56) + 20 * v311;
                                  char v315 = *(unsigned char *)(v314 + 16);
                                  unint64_t v316 = *(void *)v314;
                                  unint64_t v317 = *(void *)(v314 + 8);
                                  specialized _NativeDictionary._delete(at:)(v311, v313);
                                  v3[2] = v313;
                                  swift_bridgeObjectRelease();
                                  unint64_t v318 = specialized __RawDictionaryStorage.find<A>(_:)(v316, v317, v315);
                                  unint64_t v297 = v527;
                                  if (v319)
                                  {
                                    unint64_t v320 = v318;
                                    char v321 = swift_isUniquelyReferenced_nonNull_native();
                                    uint64_t v322 = *v531;
                                    uint64_t v545 = *v531;
                                    uint64_t *v531 = 0x8000000000000000;
                                    if ((v321 & 1) == 0)
                                    {
                                      specialized _NativeDictionary.copy()();
                                      uint64_t v322 = v545;
                                    }
                                    uint64_t v299 = *(void *)(v322 + 56) + 120 * v320;
                                    uint64_t v300 = *(void *)v299;
                                    v301 = *(void **)(v299 + 8);
                                    uint64_t v302 = *(void *)(v299 + 16);
                                    long long v494 = *(_OWORD *)(v299 + 24);
                                    uint64_t v303 = *(void *)(v299 + 40);
                                    uint64_t v304 = *(void *)(v299 + 48);
                                    __int16 v305 = *(_WORD *)(v299 + 56);
                                    v306 = *(void **)(v299 + 64);
                                    uint64_t v487 = *(void *)(v299 + 72);
                                    __int16 v520 = *(_WORD *)(v299 + 96);
                                    int v514 = *(_DWORD *)(v299 + 100);
                                    char v508 = *(unsigned char *)(v299 + 104);
                                    char v501 = *(unsigned char *)(v299 + 105);
                                    uint64_t v307 = *(void *)(v299 + 112);
                                    *(_OWORD *)v472 = *(_OWORD *)(v299 + 80);
                                    specialized _NativeDictionary._delete(at:)(v320, v322);
                                    v3[1] = v322;
                                    swift_bridgeObjectRelease();
                                    v532[0] = *v3;
                                    uint64_t v545 = v300;
                                    v546 = v301;
                                    uint64_t v547 = v302;
                                    long long v548 = v494;
                                    uint64_t v549 = v303;
                                    uint64_t v550 = v304;
                                    LOWORD(v551) = v305;
                                    v552 = v306;
                                    uint64_t v553 = v487;
                                    long long v554 = *(_OWORD *)v472;
                                    LOWORD(v555) = v520;
                                    HIDWORD(v555) = v514;
                                    LOBYTE(v556) = v508;
                                    BYTE1(v556) = v501;
                                    uint64_t v557 = v307;
                                    specialized DisplayList.ViewUpdater.Platform.forEachChild(of:do:)((uint64_t)&v545, v532, v3);
                                    swift_unknownObjectRelease();

                                    swift_unknownObjectRelease();
                                    unint64_t v297 = v527;
                                    id v295 = v466;
                                  }
                                }
                                ++v298;
                                CoreViewRemoveFromSuperview(*(_DWORD *)v3 & 3, v308);
                                swift_unknownObjectRelease();
                              }
                              while (v297 != v298);
                            }
                            swift_unknownObjectRelease();

LABEL_221:
                            uint64_t v10 = v3 + 1;
                            uint64_t v13 = &_OBJC_LABEL_PROTOCOL____NSTextAnimatorStateSnapshot;
                            int v243 = v450;
LABEL_222:
                            v246 = v482;
                          }
                          swift_unknownObjectRelease();

                          swift_unknownObjectRelease();
                          goto LABEL_185;
                        }
                        int v243 = v450;
                      }
                      v246 = v482;
LABEL_185:
                      v245 = v246 + 1;
                      CoreViewRemoveFromSuperview(*(_DWORD *)v3 & 3, v477);
                      swift_unknownObjectRelease();
                    }
                    while (v245 != v455);
                  }

                  if (v419 == 12)
                  {
                    id v323 = (id)CoreViewMaskView(v243, v424);
                    if (v323)
                    {
                      id v462 = (id)CoreViewSubviews(v243, v323);
                      unint64_t v324 = (unint64_t)objc_msgSend(v462, sel_count);
                      if ((v324 & 0x8000000000000000) != 0) {
                        goto LABEL_289;
                      }
                      v325 = (char *)v324;
                      if (v324)
                      {
                        v326 = 0;
                        v456 = (char *)v324;
                        do
                        {
                          id v478 = objc_msgSend(v462, (SEL)v13[146], v326);
                          unint64_t v327 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt)v478);
                          if (v328)
                          {
                            unint64_t v329 = v327;
                            v473 = v326;
                            int v330 = swift_isUniquelyReferenced_nonNull_native();
                            uint64_t v331 = v3[2];
                            uint64_t v545 = v331;
                            v3[2] = 0x8000000000000000;
                            if (!v330)
                            {
                              specialized _NativeDictionary.copy()();
                              uint64_t v331 = v545;
                            }
                            uint64_t v332 = *(void *)(v331 + 56) + 20 * v329;
                            char v333 = *(unsigned char *)(v332 + 16);
                            unint64_t v334 = *(void *)v332;
                            unint64_t v335 = *(void *)(v332 + 8);
                            specialized _NativeDictionary._delete(at:)(v329, v331);
                            v3[2] = v331;
                            swift_bridgeObjectRelease();
                            unint64_t v336 = specialized __RawDictionaryStorage.find<A>(_:)(v334, v335, v333);
                            if (v337)
                            {
                              unint64_t v338 = v336;
                              int v339 = swift_isUniquelyReferenced_nonNull_native();
                              uint64_t v340 = *v10;
                              uint64_t v545 = *v10;
                              uint64_t *v10 = 0x8000000000000000;
                              v325 = v456;
                              v326 = v473;
                              if (!v339)
                              {
                                specialized _NativeDictionary.copy()();
                                uint64_t v340 = v545;
                              }
                              uint64_t v341 = *(void *)(v340 + 56) + 120 * v338;
                              v342 = *(void **)(v341 + 16);
                              v447 = *(void **)(v341 + 8);
                              v451 = *(void **)v341;
                              unsigned int v343 = *(unsigned __int8 *)(v341 + 56);
                              specialized _NativeDictionary._delete(at:)(v338, v340);
                              uint64_t *v10 = v340;
                              swift_bridgeObjectRelease();
                              unsigned int v440 = v343;
                              if (v343 <= 0x10 && ((1 << v343) & 0x15F01) != 0)
                              {
                                int v345 = *(_DWORD *)v3 & 3;
                                id v346 = (id)CoreViewSubviews(v345, v342);
                                unint64_t v347 = (unint64_t)objc_msgSend(v346, sel_count);
                                if ((v347 & 0x8000000000000000) != 0) {
                                  goto LABEL_282;
                                }
                                unint64_t v348 = v347;
                                int v438 = v345;
                                if (v347)
                                {
                                  uint64_t v349 = 0;
                                  id v467 = v346;
                                  unint64_t v528 = v347;
                                  do
                                  {
                                    id v359 = objc_msgSend(v346, (SEL)v13[146], v349);
                                    unint64_t v360 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt)v359);
                                    if (v361)
                                    {
                                      unint64_t v362 = v360;
                                      char v363 = swift_isUniquelyReferenced_nonNull_native();
                                      uint64_t v364 = v3[2];
                                      uint64_t v545 = v364;
                                      v3[2] = 0x8000000000000000;
                                      if ((v363 & 1) == 0)
                                      {
                                        specialized _NativeDictionary.copy()();
                                        uint64_t v364 = v545;
                                      }
                                      uint64_t v365 = *(void *)(v364 + 56) + 20 * v362;
                                      char v366 = *(unsigned char *)(v365 + 16);
                                      unint64_t v367 = *(void *)v365;
                                      unint64_t v368 = *(void *)(v365 + 8);
                                      specialized _NativeDictionary._delete(at:)(v362, v364);
                                      v3[2] = v364;
                                      swift_bridgeObjectRelease();
                                      unint64_t v369 = specialized __RawDictionaryStorage.find<A>(_:)(v367, v368, v366);
                                      unint64_t v348 = v528;
                                      if (v370)
                                      {
                                        unint64_t v371 = v369;
                                        char v372 = swift_isUniquelyReferenced_nonNull_native();
                                        uint64_t v373 = *v531;
                                        uint64_t v545 = *v531;
                                        uint64_t *v531 = 0x8000000000000000;
                                        if ((v372 & 1) == 0)
                                        {
                                          specialized _NativeDictionary.copy()();
                                          uint64_t v373 = v545;
                                        }
                                        uint64_t v350 = *(void *)(v373 + 56) + 120 * v371;
                                        uint64_t v351 = *(void *)v350;
                                        v352 = *(void **)(v350 + 8);
                                        uint64_t v353 = *(void *)(v350 + 16);
                                        long long v495 = *(_OWORD *)(v350 + 24);
                                        uint64_t v354 = *(void *)(v350 + 40);
                                        uint64_t v355 = *(void *)(v350 + 48);
                                        __int16 v356 = *(_WORD *)(v350 + 56);
                                        v357 = *(void **)(v350 + 64);
                                        uint64_t v488 = *(void *)(v350 + 72);
                                        __int16 v521 = *(_WORD *)(v350 + 96);
                                        int v515 = *(_DWORD *)(v350 + 100);
                                        char v509 = *(unsigned char *)(v350 + 104);
                                        char v502 = *(unsigned char *)(v350 + 105);
                                        uint64_t v358 = *(void *)(v350 + 112);
                                        long long v483 = *(_OWORD *)(v350 + 80);
                                        specialized _NativeDictionary._delete(at:)(v371, v373);
                                        v3[1] = v373;
                                        swift_bridgeObjectRelease();
                                        v532[0] = *v3;
                                        uint64_t v545 = v351;
                                        v546 = v352;
                                        uint64_t v547 = v353;
                                        long long v548 = v495;
                                        uint64_t v549 = v354;
                                        uint64_t v550 = v355;
                                        LOWORD(v551) = v356;
                                        v552 = v357;
                                        uint64_t v553 = v488;
                                        long long v554 = v483;
                                        LOWORD(v555) = v521;
                                        HIDWORD(v555) = v515;
                                        LOBYTE(v556) = v509;
                                        BYTE1(v556) = v502;
                                        uint64_t v557 = v358;
                                        specialized DisplayList.ViewUpdater.Platform.forEachChild(of:do:)((uint64_t)&v545, v532, v3);
                                        swift_unknownObjectRelease();

                                        swift_unknownObjectRelease();
                                        uint64_t v13 = &_OBJC_LABEL_PROTOCOL____NSTextAnimatorStateSnapshot;
                                        unint64_t v348 = v528;
                                        id v346 = v467;
                                      }
                                    }
                                    ++v349;
                                    CoreViewRemoveFromSuperview(*(_DWORD *)v3 & 3, v359);
                                    swift_unknownObjectRelease();
                                  }
                                  while (v348 != v349);
                                }

                                if (v440 != 12)
                                {
                                  uint64_t v10 = v3 + 1;
                                  goto LABEL_267;
                                }
                                id v374 = (id)CoreViewMaskView(v438, v451);
                                uint64_t v10 = v3 + 1;
                                v325 = v456;
                                v326 = v473;
                                if (v374)
                                {
                                  id v375 = (id)CoreViewSubviews(v438, v374);
                                  unint64_t v376 = (unint64_t)objc_msgSend(v375, sel_count);
                                  if ((v376 & 0x8000000000000000) != 0) {
                                    goto LABEL_288;
                                  }
                                  unint64_t v377 = v376;
                                  if (v376)
                                  {
                                    uint64_t v378 = 0;
                                    id v468 = v375;
                                    unint64_t v529 = v376;
                                    do
                                    {
                                      id v388 = objc_msgSend(v375, sel_objectAtIndexedSubscript_, v378);
                                      unint64_t v389 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt)v388);
                                      if (v390)
                                      {
                                        unint64_t v391 = v389;
                                        char v392 = swift_isUniquelyReferenced_nonNull_native();
                                        uint64_t v393 = v3[2];
                                        uint64_t v545 = v393;
                                        v3[2] = 0x8000000000000000;
                                        if ((v392 & 1) == 0)
                                        {
                                          specialized _NativeDictionary.copy()();
                                          uint64_t v393 = v545;
                                        }
                                        uint64_t v394 = *(void *)(v393 + 56) + 20 * v391;
                                        char v395 = *(unsigned char *)(v394 + 16);
                                        unint64_t v396 = *(void *)v394;
                                        unint64_t v397 = *(void *)(v394 + 8);
                                        specialized _NativeDictionary._delete(at:)(v391, v393);
                                        v3[2] = v393;
                                        swift_bridgeObjectRelease();
                                        unint64_t v398 = specialized __RawDictionaryStorage.find<A>(_:)(v396, v397, v395);
                                        uint64_t v10 = v3 + 1;
                                        unint64_t v377 = v529;
                                        if (v399)
                                        {
                                          unint64_t v400 = v398;
                                          char v401 = swift_isUniquelyReferenced_nonNull_native();
                                          uint64_t v402 = *v531;
                                          uint64_t v545 = *v531;
                                          uint64_t *v531 = 0x8000000000000000;
                                          if ((v401 & 1) == 0)
                                          {
                                            specialized _NativeDictionary.copy()();
                                            uint64_t v402 = v545;
                                          }
                                          uint64_t v379 = *(void *)(v402 + 56) + 120 * v400;
                                          uint64_t v380 = *(void *)v379;
                                          v381 = *(void **)(v379 + 8);
                                          uint64_t v382 = *(void *)(v379 + 16);
                                          long long v496 = *(_OWORD *)(v379 + 24);
                                          uint64_t v383 = *(void *)(v379 + 40);
                                          uint64_t v384 = *(void *)(v379 + 48);
                                          __int16 v385 = *(_WORD *)(v379 + 56);
                                          v386 = *(void **)(v379 + 64);
                                          uint64_t v489 = *(void *)(v379 + 72);
                                          __int16 v522 = *(_WORD *)(v379 + 96);
                                          int v516 = *(_DWORD *)(v379 + 100);
                                          char v510 = *(unsigned char *)(v379 + 104);
                                          char v503 = *(unsigned char *)(v379 + 105);
                                          uint64_t v387 = *(void *)(v379 + 112);
                                          long long v484 = *(_OWORD *)(v379 + 80);
                                          specialized _NativeDictionary._delete(at:)(v400, v402);
                                          v3[1] = v402;
                                          swift_bridgeObjectRelease();
                                          v532[0] = *v3;
                                          uint64_t v545 = v380;
                                          v546 = v381;
                                          uint64_t v547 = v382;
                                          long long v548 = v496;
                                          uint64_t v549 = v383;
                                          uint64_t v550 = v384;
                                          LOWORD(v551) = v385;
                                          v552 = v386;
                                          uint64_t v553 = v489;
                                          long long v554 = v484;
                                          LOWORD(v555) = v522;
                                          HIDWORD(v555) = v516;
                                          LOBYTE(v556) = v510;
                                          BYTE1(v556) = v503;
                                          uint64_t v557 = v387;
                                          specialized DisplayList.ViewUpdater.Platform.forEachChild(of:do:)((uint64_t)&v545, v532, v3);
                                          swift_unknownObjectRelease();

                                          swift_unknownObjectRelease();
                                          uint64_t v10 = v3 + 1;
                                          id v375 = v468;
                                          unint64_t v377 = v529;
                                        }
                                      }
                                      ++v378;
                                      CoreViewRemoveFromSuperview(*(_DWORD *)v3 & 3, v388);
                                      swift_unknownObjectRelease();
                                    }
                                    while (v377 != v378);
                                  }
                                  swift_unknownObjectRelease();

                                  uint64_t v13 = &_OBJC_LABEL_PROTOCOL____NSTextAnimatorStateSnapshot;
LABEL_267:
                                  v325 = v456;
                                  v326 = v473;
                                }
                              }
                              swift_unknownObjectRelease();

                              swift_unknownObjectRelease();
                              goto LABEL_230;
                            }
                            v325 = v456;
                            v326 = v473;
                          }
LABEL_230:
                          ++v326;
                          CoreViewRemoveFromSuperview(*(_DWORD *)v3 & 3, v478);
                          swift_unknownObjectRelease();
                        }
                        while (v326 != v325);
                      }
                      swift_unknownObjectRelease();
                    }
                  }
                }
                swift_unknownObjectRelease();

                swift_unknownObjectRelease();
              }
            }
            CoreViewRemoveFromSuperview(*(_DWORD *)v3 & 3, v432);
            swift_unknownObjectRelease();
            uint64_t v224 = v435 + 1;
          }
          while (v435 + 1 != v426);
        }
        swift_unknownObjectRelease();
      }
    }
LABEL_5:
    swift_unknownObjectRelease();

    swift_unknownObjectRelease();
    unint64_t v11 = v420;
    int64_t v12 = v421;
  }
  uint64_t v44 = 0;
  int v485 = v42;
  unint64_t v425 = v43;
  while (1)
  {
    uint64_t v431 = v44;
    id v429 = objc_msgSend(v427, (SEL)v13[146], v405, v406, v407, v408, v409, v410, v411);
    unint64_t v45 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt)v429);
    if ((v46 & 1) == 0) {
      goto LABEL_38;
    }
    unint64_t v47 = v45;
    int v48 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v49 = v3[2];
    uint64_t v545 = v49;
    v3[2] = 0x8000000000000000;
    if (!v48)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v49 = v545;
    }
    uint64_t v50 = *(void *)(v49 + 56) + 20 * v47;
    char v51 = *(unsigned char *)(v50 + 16);
    unint64_t v52 = *(void *)v50;
    unint64_t v53 = *(void *)(v50 + 8);
    specialized _NativeDictionary._delete(at:)(v47, v49);
    v3[2] = v49;
    swift_bridgeObjectRelease();
    unint64_t v54 = specialized __RawDictionaryStorage.find<A>(_:)(v52, v53, v51);
    if (v55) {
      break;
    }
    int v42 = v485;
LABEL_38:
    CoreViewRemoveFromSuperview(*(_DWORD *)v3 & 3, v429);
    swift_unknownObjectRelease();
    uint64_t v44 = v431 + 1;
    if (v431 + 1 == v425) {
      goto LABEL_158;
    }
  }
  unint64_t v56 = v54;
  int v57 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v58 = *v10;
  uint64_t v545 = *v10;
  uint64_t *v10 = 0x8000000000000000;
  int v42 = v485;
  if (!v57)
  {
    specialized _NativeDictionary.copy()();
    uint64_t v58 = v545;
  }
  uint64_t v59 = *(void *)(v58 + 56) + 120 * v56;
  v423 = *(void **)v59;
  id v60 = *(void **)(v59 + 16);
  v418 = *(void **)(v59 + 8);
  unsigned int v61 = *(unsigned __int8 *)(v59 + 56);
  specialized _NativeDictionary._delete(at:)(v56, v58);
  uint64_t *v10 = v58;
  swift_bridgeObjectRelease();
  if (v61 > 0x10 || ((1 << v61) & 0x15F01) == 0)
  {
LABEL_156:
    swift_unknownObjectRelease();

    swift_unknownObjectRelease();
    goto LABEL_38;
  }
  unsigned int v417 = v61;
  int v63 = *(_DWORD *)v3 & 3;
  id v469 = (id)CoreViewSubviews(v63, v60);
  unint64_t v64 = (unint64_t)objc_msgSend(v469, sel_count);
  if ((v64 & 0x8000000000000000) != 0) {
    goto LABEL_279;
  }
  if (!v64)
  {
LABEL_110:

    if (v417 == 12)
    {
      id v142 = (id)CoreViewMaskView(v63, v423);
      if (v142)
      {
        id v454 = (id)CoreViewSubviews(v63, v142);
        unint64_t v143 = (unint64_t)objc_msgSend(v454, sel_count);
        if ((v143 & 0x8000000000000000) != 0) {
          goto LABEL_285;
        }
        unint64_t v144 = v143;
        if (v143)
        {
          uint64_t v145 = 0;
          unint64_t v449 = v143;
          do
          {
            id v470 = objc_msgSend(v454, (SEL)v13[146], v145, v405, v406, v407, v408, v409, v410, v411);
            unint64_t v146 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt)v470);
            if (v147)
            {
              unint64_t v148 = v146;
              uint64_t v464 = v145;
              int v149 = swift_isUniquelyReferenced_nonNull_native();
              uint64_t v150 = v3[2];
              uint64_t v545 = v150;
              v3[2] = 0x8000000000000000;
              if (!v149)
              {
                specialized _NativeDictionary.copy()();
                uint64_t v150 = v545;
              }
              uint64_t v151 = *(void *)(v150 + 56) + 20 * v148;
              char v152 = *(unsigned char *)(v151 + 16);
              unint64_t v153 = *(void *)v151;
              unint64_t v154 = *(void *)(v151 + 8);
              specialized _NativeDictionary._delete(at:)(v148, v150);
              v3[2] = v150;
              swift_bridgeObjectRelease();
              unint64_t v155 = specialized __RawDictionaryStorage.find<A>(_:)(v153, v154, v152);
              if (v156)
              {
                unint64_t v157 = v155;
                int v158 = swift_isUniquelyReferenced_nonNull_native();
                uint64_t v159 = *v10;
                uint64_t v545 = *v10;
                uint64_t *v10 = 0x8000000000000000;
                int v42 = v485;
                unint64_t v144 = v449;
                uint64_t v145 = v464;
                if (!v158)
                {
                  specialized _NativeDictionary.copy()();
                  uint64_t v159 = v545;
                }
                uint64_t v160 = *(void *)(v159 + 56) + 120 * v157;
                long long v161 = *(void **)(v160 + 16);
                v442 = *(void **)(v160 + 8);
                v445 = *(void **)v160;
                unsigned int v162 = *(unsigned __int8 *)(v160 + 56);
                specialized _NativeDictionary._delete(at:)(v157, v159);
                uint64_t *v10 = v159;
                swift_bridgeObjectRelease();
                unsigned int v436 = v162;
                if (v162 > 0x10 || ((1 << v162) & 0x15F01) == 0)
                {
                  unint64_t v28 = v530;
                }
                else
                {
                  int v164 = *(_DWORD *)v3 & 3;
                  id v165 = (id)CoreViewSubviews(v164, v161);
                  unint64_t v166 = (unint64_t)objc_msgSend(v165, sel_count);
                  if ((v166 & 0x8000000000000000) != 0) {
                    goto LABEL_277;
                  }
                  unint64_t v167 = v166;
                  int v434 = v164;
                  if (v166)
                  {
                    uint64_t v168 = 0;
                    id v459 = v165;
                    unint64_t v524 = v166;
                    do
                    {
                      id v178 = objc_msgSend(v165, (SEL)v13[146], v168);
                      unint64_t v179 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt)v178);
                      if (v180)
                      {
                        unint64_t v181 = v179;
                        int v182 = swift_isUniquelyReferenced_nonNull_native();
                        uint64_t v183 = v3[2];
                        uint64_t v545 = v183;
                        v3[2] = 0x8000000000000000;
                        if (!v182)
                        {
                          specialized _NativeDictionary.copy()();
                          uint64_t v183 = v545;
                        }
                        uint64_t v184 = *(void *)(v183 + 56) + 20 * v181;
                        char v185 = *(unsigned char *)(v184 + 16);
                        unint64_t v186 = *(void *)v184;
                        unint64_t v187 = *(void *)(v184 + 8);
                        specialized _NativeDictionary._delete(at:)(v181, v183);
                        v3[2] = v183;
                        swift_bridgeObjectRelease();
                        unint64_t v188 = specialized __RawDictionaryStorage.find<A>(_:)(v186, v187, v185);
                        uint64_t v13 = &_OBJC_LABEL_PROTOCOL____NSTextAnimatorStateSnapshot;
                        unint64_t v167 = v524;
                        if (v189)
                        {
                          unint64_t v190 = v188;
                          char v191 = swift_isUniquelyReferenced_nonNull_native();
                          uint64_t v192 = *v10;
                          uint64_t v545 = *v10;
                          uint64_t *v10 = 0x8000000000000000;
                          if ((v191 & 1) == 0)
                          {
                            specialized _NativeDictionary.copy()();
                            uint64_t v192 = v545;
                          }
                          uint64_t v169 = *(void *)(v192 + 56) + 120 * v190;
                          uint64_t v170 = *(void *)v169;
                          uint64_t v171 = *(void **)(v169 + 8);
                          uint64_t v172 = *(void *)(v169 + 16);
                          long long v491 = *(_OWORD *)(v169 + 24);
                          uint64_t v173 = *(void *)(v169 + 40);
                          uint64_t v174 = *(void *)(v169 + 48);
                          __int16 v175 = *(_WORD *)(v169 + 56);
                          uint64_t v176 = *(void **)(v169 + 64);
                          uint64_t v480 = *(void *)(v169 + 72);
                          __int16 v517 = *(_WORD *)(v169 + 96);
                          int v511 = *(_DWORD *)(v169 + 100);
                          char v505 = *(unsigned char *)(v169 + 104);
                          char v498 = *(unsigned char *)(v169 + 105);
                          uint64_t v177 = *(void *)(v169 + 112);
                          long long v475 = *(_OWORD *)(v169 + 80);
                          specialized _NativeDictionary._delete(at:)(v190, v192);
                          v3[1] = v192;
                          swift_bridgeObjectRelease();
                          v532[0] = *v3;
                          uint64_t v545 = v170;
                          v546 = v171;
                          uint64_t v547 = v172;
                          long long v548 = v491;
                          uint64_t v549 = v173;
                          uint64_t v550 = v174;
                          LOWORD(v551) = v175;
                          v552 = v176;
                          uint64_t v553 = v480;
                          long long v554 = v475;
                          LOWORD(v555) = v517;
                          HIDWORD(v555) = v511;
                          LOBYTE(v556) = v505;
                          BYTE1(v556) = v498;
                          uint64_t v557 = v177;
                          specialized DisplayList.ViewUpdater.Platform.forEachChild(of:do:)((uint64_t)&v545, v532, v3);
                          swift_unknownObjectRelease();

                          swift_unknownObjectRelease();
                          uint64_t v10 = v3 + 1;
                          uint64_t v13 = &_OBJC_LABEL_PROTOCOL____NSTextAnimatorStateSnapshot;
                          id v165 = v459;
                          unint64_t v167 = v524;
                        }
                      }
                      ++v168;
                      CoreViewRemoveFromSuperview(*(_DWORD *)v3 & 3, v178);
                      swift_unknownObjectRelease();
                    }
                    while (v167 != v168);
                  }

                  if (v436 != 12) {
                    goto LABEL_152;
                  }
                  id v193 = (id)CoreViewMaskView(v434, v445);
                  unint64_t v28 = v530;
                  int v42 = v485;
                  unint64_t v144 = v449;
                  uint64_t v145 = v464;
                  if (v193)
                  {
                    id v194 = (id)CoreViewSubviews(v434, v193);
                    unint64_t v195 = (unint64_t)objc_msgSend(v194, sel_count);
                    if ((v195 & 0x8000000000000000) != 0) {
                      goto LABEL_283;
                    }
                    v196 = (char *)v195;
                    if (v195)
                    {
                      v197 = 0;
                      id v476 = v194;
                      v460 = (char *)v195;
                      do
                      {
                        id v207 = objc_msgSend(v194, (SEL)v13[146], v197);
                        unint64_t v208 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt)v207);
                        if (v209)
                        {
                          unint64_t v210 = v208;
                          int v211 = swift_isUniquelyReferenced_nonNull_native();
                          uint64_t v212 = v3[2];
                          uint64_t v545 = v212;
                          v3[2] = 0x8000000000000000;
                          if (!v211)
                          {
                            specialized _NativeDictionary.copy()();
                            uint64_t v212 = v545;
                          }
                          uint64_t v213 = *(void *)(v212 + 56) + 20 * v210;
                          char v214 = *(unsigned char *)(v213 + 16);
                          unint64_t v216 = *(void *)v213;
                          unint64_t v215 = *(void *)(v213 + 8);
                          specialized _NativeDictionary._delete(at:)(v210, v212);
                          v3[2] = v212;
                          swift_bridgeObjectRelease();
                          unint64_t v217 = specialized __RawDictionaryStorage.find<A>(_:)(v216, v215, v214);
                          uint64_t v10 = v3 + 1;
                          uint64_t v13 = &_OBJC_LABEL_PROTOCOL____NSTextAnimatorStateSnapshot;
                          if (v218)
                          {
                            unint64_t v219 = v217;
                            char v220 = swift_isUniquelyReferenced_nonNull_native();
                            uint64_t v221 = *v531;
                            uint64_t v545 = *v531;
                            uint64_t *v531 = 0x8000000000000000;
                            if ((v220 & 1) == 0)
                            {
                              specialized _NativeDictionary.copy()();
                              uint64_t v221 = v545;
                            }
                            uint64_t v198 = *(void *)(v221 + 56) + 120 * v219;
                            uint64_t v199 = *(void *)v198;
                            v200 = *(void **)(v198 + 8);
                            uint64_t v201 = *(void *)(v198 + 16);
                            long long v499 = *(_OWORD *)(v198 + 24);
                            uint64_t v202 = *(void *)(v198 + 40);
                            uint64_t v203 = *(void *)(v198 + 48);
                            __int16 v204 = *(_WORD *)(v198 + 56);
                            v205 = *(void **)(v198 + 64);
                            uint64_t v492 = *(void *)(v198 + 72);
                            __int16 v525 = *(_WORD *)(v198 + 96);
                            int v518 = *(_DWORD *)(v198 + 100);
                            char v512 = *(unsigned char *)(v198 + 104);
                            char v506 = *(unsigned char *)(v198 + 105);
                            uint64_t v206 = *(void *)(v198 + 112);
                            long long v481 = *(_OWORD *)(v198 + 80);
                            specialized _NativeDictionary._delete(at:)(v219, v221);
                            v3[1] = v221;
                            swift_bridgeObjectRelease();
                            v532[0] = *v3;
                            uint64_t v545 = v199;
                            v546 = v200;
                            uint64_t v547 = v201;
                            long long v548 = v499;
                            uint64_t v549 = v202;
                            uint64_t v550 = v203;
                            LOWORD(v551) = v204;
                            v552 = v205;
                            uint64_t v553 = v492;
                            long long v554 = v481;
                            LOWORD(v555) = v525;
                            HIDWORD(v555) = v518;
                            LOBYTE(v556) = v512;
                            BYTE1(v556) = v506;
                            uint64_t v557 = v206;
                            specialized DisplayList.ViewUpdater.Platform.forEachChild(of:do:)((uint64_t)&v545, v532, v3);
                            swift_unknownObjectRelease();

                            swift_unknownObjectRelease();
                            uint64_t v10 = v3 + 1;
                            uint64_t v13 = &_OBJC_LABEL_PROTOCOL____NSTextAnimatorStateSnapshot;
                            id v194 = v476;
                            v196 = v460;
                          }
                        }
                        ++v197;
                        CoreViewRemoveFromSuperview(*(_DWORD *)v3 & 3, v207);
                        swift_unknownObjectRelease();
                      }
                      while (v196 != v197);
                    }
                    swift_unknownObjectRelease();

LABEL_152:
                    unint64_t v28 = v530;
                    int v42 = v485;
                    unint64_t v144 = v449;
                    uint64_t v145 = v464;
                  }
                }
                swift_unknownObjectRelease();

                swift_unknownObjectRelease();
                goto LABEL_116;
              }
              int v42 = v485;
              unint64_t v144 = v449;
              uint64_t v145 = v464;
            }
LABEL_116:
            ++v145;
            CoreViewRemoveFromSuperview(*(_DWORD *)v3 & 3, v470);
            swift_unknownObjectRelease();
          }
          while (v145 != v144);
        }
        swift_unknownObjectRelease();
      }
    }
    goto LABEL_156;
  }
  uint64_t v65 = 0;
  int v474 = v63;
  unint64_t v463 = v64;
  while (1)
  {
    uint64_t v497 = v65;
    id v490 = objc_msgSend(v469, (SEL)v13[146], v405, v406, v407, v408, v409, v410, v411);
    unint64_t v66 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt)v490);
    if ((v67 & 1) == 0) {
      goto LABEL_53;
    }
    unint64_t v68 = v66;
    int v69 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v70 = v3[2];
    uint64_t v545 = v70;
    v3[2] = 0x8000000000000000;
    if (!v69)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v70 = v545;
    }
    uint64_t v71 = *(void *)(v70 + 56) + 20 * v68;
    char v72 = *(unsigned char *)(v71 + 16);
    unint64_t v73 = *(void *)v71;
    unint64_t v74 = *(void *)(v71 + 8);
    specialized _NativeDictionary._delete(at:)(v68, v70);
    v3[2] = v70;
    swift_bridgeObjectRelease();
    unint64_t v75 = specialized __RawDictionaryStorage.find<A>(_:)(v73, v74, v72);
    if (v76) {
      break;
    }
    int v42 = v485;
    int v63 = v474;
LABEL_53:
    CoreViewRemoveFromSuperview(*(_DWORD *)v3 & 3, v490);
    swift_unknownObjectRelease();
    uint64_t v65 = v497 + 1;
    if (v497 + 1 == v463) {
      goto LABEL_110;
    }
  }
  unint64_t v77 = v75;
  int v78 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v79 = *v10;
  uint64_t v545 = *v10;
  uint64_t *v10 = 0x8000000000000000;
  int v42 = v485;
  int v63 = v474;
  if (!v78)
  {
    specialized _NativeDictionary.copy()();
    uint64_t v79 = v545;
  }
  uint64_t v80 = *(void *)(v79 + 56) + 120 * v77;
  uint64_t v81 = *(void **)(v80 + 16);
  v439 = *(void **)(v80 + 8);
  v441 = *(void **)v80;
  unsigned int v82 = *(unsigned __int8 *)(v80 + 56);
  specialized _NativeDictionary._delete(at:)(v77, v79);
  uint64_t *v10 = v79;
  swift_bridgeObjectRelease();
  unsigned int v457 = v82;
  if (v82 > 0x10 || ((1 << v82) & 0x15F01) == 0)
  {
LABEL_109:
    swift_unknownObjectRelease();

    swift_unknownObjectRelease();
    goto LABEL_53;
  }
  int v84 = *(_DWORD *)v3 & 3;
  id v85 = (id)CoreViewSubviews(v84, v81);
  unint64_t v86 = (unint64_t)objc_msgSend(v85, sel_count);
  if ((v86 & 0x8000000000000000) != 0) {
    goto LABEL_275;
  }
  unint64_t v87 = v86;
  int v452 = v84;
  if (!v86)
  {
LABEL_95:

    if (v457 == 12)
    {
      id v121 = (id)CoreViewMaskView(v452, v441);
      int v42 = v485;
      int v63 = v474;
      if (v121)
      {
        id v122 = (id)CoreViewSubviews(v452, v121);
        unint64_t v123 = (unint64_t)objc_msgSend(v122, sel_count);
        if ((v123 & 0x8000000000000000) != 0) {
          goto LABEL_278;
        }
        unint64_t v124 = v123;
        if (v123)
        {
          uint64_t v125 = 0;
          id v433 = v122;
          unint64_t v444 = v123;
          do
          {
            id v126 = objc_msgSend(v122, (SEL)v13[146], v125, v405, v406, v407, v408, v409, v410, v411);
            unint64_t v127 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt)v126);
            if (v128)
            {
              unint64_t v129 = v127;
              int v130 = swift_isUniquelyReferenced_nonNull_native();
              uint64_t v131 = v3[2];
              uint64_t v545 = v131;
              v3[2] = 0x8000000000000000;
              if (!v130)
              {
                specialized _NativeDictionary.copy()();
                uint64_t v131 = v545;
              }
              uint64_t v132 = *(void *)(v131 + 56) + 20 * v129;
              char v133 = *(unsigned char *)(v132 + 16);
              unint64_t v134 = *(void *)v132;
              unint64_t v135 = *(void *)(v132 + 8);
              specialized _NativeDictionary._delete(at:)(v129, v131);
              v3[2] = v131;
              swift_bridgeObjectRelease();
              specialized Dictionary._Variant.removeValue(forKey:)(v134, v135, v133, (uint64_t)&v545);
              uint64_t v136 = v545;
              if (v545)
              {
                uint64_t v138 = v556;
                uint64_t v137 = v557;
                uint64_t v139 = *((void *)&v554 + 1);
                uint64_t v140 = v555;
                uint64_t v141 = v554;
                uint64_t v448 = v553;
                id v453 = v552;
                id v458 = v546;
                uint64_t v544 = *v3;
                v532[0] = v545;
                v532[1] = v546;
                v532[2] = v547;
                long long v533 = v548;
                uint64_t v534 = v549;
                uint64_t v535 = v550;
                __int16 v536 = v551;
                v537 = v552;
                uint64_t v538 = v553;
                long long v539 = v554;
                __int16 v540 = v555;
                int v541 = HIDWORD(v555);
                __int16 v542 = v556 & 0x101;
                uint64_t v543 = v557;
                specialized DisplayList.ViewUpdater.Platform.forEachChild(of:do:)((uint64_t)v532, &v544, v3);
                uint64_t v410 = v138;
                uint64_t v411 = v137;
                uint64_t v408 = v139;
                uint64_t v409 = v140;
                id v122 = v433;
                uint64_t v407 = v141;
                uint64_t v10 = v3 + 1;
                uint64_t v406 = v448;
                id v405 = v453;
                outlined consume of DisplayList.ViewUpdater.ViewInfo?(v136, v458);
              }
              int v42 = v485;
              int v63 = v474;
              unint64_t v124 = v444;
            }
            ++v125;
            CoreViewRemoveFromSuperview(*(_DWORD *)v3 & 3, v126);
            swift_unknownObjectRelease();
            uint64_t v13 = &_OBJC_LABEL_PROTOCOL____NSTextAnimatorStateSnapshot;
          }
          while (v124 != v125);
        }
        swift_unknownObjectRelease();

        unint64_t v28 = v530;
      }
    }
    else
    {
      int v42 = v485;
      int v63 = v474;
    }
    goto LABEL_109;
  }
  uint64_t v88 = 0;
  id v479 = v85;
  unint64_t v523 = v86;
  while (1)
  {
    id v89 = objc_msgSend(v85, (SEL)v13[146], v88);
    unint64_t v90 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt)v89);
    if ((v91 & 1) == 0) {
      goto LABEL_68;
    }
    unint64_t v92 = v90;
    int v93 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v94 = v3[2];
    uint64_t v545 = v94;
    v3[2] = 0x8000000000000000;
    if (!v93)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v94 = v545;
    }
    uint64_t v95 = *(void *)(v94 + 56) + 20 * v92;
    char v96 = *(unsigned char *)(v95 + 16);
    unint64_t v97 = *(void *)v95;
    unint64_t v98 = *(void *)(v95 + 8);
    specialized _NativeDictionary._delete(at:)(v92, v94);
    v3[2] = v94;
    swift_bridgeObjectRelease();
    unint64_t v99 = specialized __RawDictionaryStorage.find<A>(_:)(v97, v98, v96);
    if (v100) {
      break;
    }
    uint64_t v10 = v3 + 1;
    uint64_t v13 = &_OBJC_LABEL_PROTOCOL____NSTextAnimatorStateSnapshot;
    unint64_t v87 = v523;
LABEL_68:
    ++v88;
    CoreViewRemoveFromSuperview(*(_DWORD *)v3 & 3, v89);
    swift_unknownObjectRelease();
    if (v88 == v87) {
      goto LABEL_95;
    }
  }
  unint64_t v101 = v99;
  uint64_t v10 = v3 + 1;
  int v102 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v103 = *v531;
  uint64_t v545 = *v531;
  uint64_t *v531 = 0x8000000000000000;
  if (!v102)
  {
    specialized _NativeDictionary.copy()();
    uint64_t v103 = v545;
  }
  uint64_t v104 = *(void *)(v103 + 56) + 120 * v101;
  uint64_t v105 = *(void **)v104;
  v504 = *(void **)(v104 + 8);
  uint64_t v106 = *(void **)(v104 + 16);
  unsigned int v107 = *(unsigned __int8 *)(v104 + 56);
  specialized _NativeDictionary._delete(at:)(v101, v103);
  uint64_t *v531 = v103;
  swift_bridgeObjectRelease();
  BOOL v108 = v107 > 0x10 || ((1 << v107) & 0x15F01) == 0;
  uint64_t v13 = &_OBJC_LABEL_PROTOCOL____NSTextAnimatorStateSnapshot;
  if (v108)
  {
    id v85 = v479;
    unint64_t v87 = v523;
    unint64_t v28 = v530;
    goto LABEL_92;
  }
  int v109 = *(_DWORD *)v3 & 3;
  id v110 = (id)CoreViewSubviews(v109, v106);
  unint64_t v111 = (unint64_t)objc_msgSend(v110, sel_count);
  if ((v111 & 0x8000000000000000) == 0)
  {
    unint64_t v112 = v111;
    if (v111)
    {
      uint64_t v113 = 0;
      do
      {
        uint64_t v114 = v113 + 1;
        closure #1 in closure #1 in closure #1 in DisplayList.ViewUpdater.ViewCache.removeRecursively(_:)(objc_msgSend(v110, sel_objectAtIndexedSubscript_), v3);
        swift_unknownObjectRelease();
        uint64_t v113 = v114;
      }
      while (v112 != v114);
    }

    if (v107 != 12)
    {
      unint64_t v28 = v530;
      uint64_t v10 = v3 + 1;
      uint64_t v13 = &_OBJC_LABEL_PROTOCOL____NSTextAnimatorStateSnapshot;
      goto LABEL_91;
    }
    id v115 = (id)CoreViewMaskView(v109, v105);
    uint64_t v13 = &_OBJC_LABEL_PROTOCOL____NSTextAnimatorStateSnapshot;
    unint64_t v28 = v530;
    id v85 = v479;
    if (v115)
    {
      id v116 = (id)CoreViewSubviews(v109, v115);
      unint64_t v117 = (unint64_t)objc_msgSend(v116, sel_count);
      if ((v117 & 0x8000000000000000) != 0) {
        goto LABEL_274;
      }
      unint64_t v118 = v117;
      if (v117)
      {
        uint64_t v119 = 0;
        do
        {
          uint64_t v120 = v119 + 1;
          closure #1 in closure #1 in closure #1 in DisplayList.ViewUpdater.ViewCache.removeRecursively(_:)(objc_msgSend(v116, sel_objectAtIndexedSubscript_), v3);
          swift_unknownObjectRelease();
          uint64_t v119 = v120;
        }
        while (v118 != v120);
      }
      swift_unknownObjectRelease();

      uint64_t v10 = v3 + 1;
LABEL_91:
      id v85 = v479;
      unint64_t v87 = v523;
    }
    else
    {
      uint64_t v10 = v3 + 1;
      unint64_t v87 = v523;
    }
LABEL_92:
    swift_unknownObjectRelease();

    swift_unknownObjectRelease();
    goto LABEL_68;
  }
  __break(1u);
LABEL_274:
  __break(1u);
LABEL_275:
  __break(1u);
LABEL_276:
  __break(1u);
LABEL_277:
  __break(1u);
LABEL_278:
  __break(1u);
LABEL_279:
  __break(1u);
LABEL_280:
  __break(1u);
LABEL_281:
  __break(1u);
LABEL_282:
  __break(1u);
LABEL_283:
  __break(1u);
LABEL_284:
  __break(1u);
LABEL_285:
  __break(1u);
LABEL_286:
  __break(1u);
LABEL_287:
  __break(1u);
LABEL_288:
  __break(1u);
LABEL_289:
  __break(1u);
LABEL_290:
  __break(1u);
}

uint64_t partial apply for implicit closure #5 in implicit closure #4 in DisplayList.ViewUpdater.updateInheritedView(container:from:parentState:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return implicit closure #5 in implicit closure #4 in DisplayList.ViewUpdater.updateInheritedView(container:from:parentState:)(a1, a2, a3, a4, *(void *)(v4 + 16));
}

uint64_t implicit closure #5 in implicit closure #4 in DisplayList.ViewUpdater.updateInheritedView(container:from:parentState:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double v5 = *(double *)(a3 + 16);
  double v6 = *(double *)(a3 + 24);
  __int16 v7 = *(_WORD *)(a3 + 64);
  char v8 = *(unsigned char *)(a3 + 66);
  int v9 = *(_DWORD *)(a3 + 68);
  uint64_t v20 = a5;
  long long v12 = *(_OWORD *)a3;
  double v13 = v5;
  double v14 = v6;
  long long v10 = *(_OWORD *)(a3 + 48);
  long long v15 = *(_OWORD *)(a3 + 32);
  long long v16 = v10;
  char v18 = v8;
  __int16 v17 = v7;
  int v19 = v9;
  return DisplayList.ViewUpdater.Platform.updateState(_:item:size:state:)(a1, &v12, a4, v5, v6);
}

uint64_t partial apply for implicit closure #3 in implicit closure #2 in DisplayList.ViewUpdater.updateInheritedView(container:from:parentState:)@<X0>(double *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return implicit closure #3 in implicit closure #2 in DisplayList.ViewUpdater.updateInheritedView(container:from:parentState:)(a1, a2, *(void *)(v3 + 16), a3);
}

unint64_t specialized _NativeDictionary._delete(at:)(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Swift::UInt v10 = *(void *)(*(void *)(a2 + 48) + 8 * v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v10);
        unint64_t result = Hasher._finalize()();
        unint64_t v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(a2 + 48);
          double v13 = (void *)(v12 + 8 * v3);
          double v14 = (void *)(v12 + 8 * v6);
          if (v3 != v6 || v13 >= v14 + 1) {
            *double v13 = *v14;
          }
          uint64_t v15 = *(void *)(a2 + 56);
          unint64_t v16 = v15 + 20 * v3;
          __int16 v17 = (long long *)(v15 + 20 * v6);
          if (20 * v3 < (uint64_t)(20 * v6) || v16 >= (unint64_t)v17 + 20 || (v18 = v3 == v6, int64_t v3 = v6, !v18))
          {
            long long v9 = *v17;
            *(_DWORD *)(v16 + 16) = *((_DWORD *)v17 + 4);
            *(_OWORD *)unint64_t v16 = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    int v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v20 = *v19;
    uint64_t v21 = (-1 << v3) - 1;
  }
  else
  {
    int v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v21 = *v19;
    uint64_t v20 = (-1 << result) - 1;
  }
  *int v19 = v21 & v20;
  uint64_t v22 = *(void *)(a2 + 16);
  BOOL v23 = __OFSUB__(v22, 1);
  uint64_t v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  Swift::UInt32 v10;
  Swift::UInt32 v11;
  int64_t v12;
  Swift::UInt32 v13;
  Swift::UInt32 v14;
  Swift::UInt8 v15;
  Swift::UInt32 v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  long long *v20;
  long long v21;
  uint64_t v22;
  const void *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  uint64_t v2 = a2;
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      unint64_t v30 = v2;
      char v31 = v4;
      do
      {
        char v32 = 20 * v6;
        long long v9 = *(void *)(v2 + 48) + 20 * v6;
        Swift::UInt v10 = *(_DWORD *)v9;
        unint64_t v11 = *(_DWORD *)(v9 + 4);
        uint64_t v12 = v3;
        double v13 = *(_DWORD *)(v9 + 8);
        double v14 = *(_DWORD *)(v9 + 12);
        uint64_t v15 = *(unsigned char *)(v9 + 16);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v10);
        Hasher._combine(_:)(v11);
        unint64_t v16 = v13;
        int64_t v3 = v12;
        Hasher._combine(_:)(v16);
        Hasher._combine(_:)(v14);
        Hasher._combine(_:)(v15);
        unint64_t result = Hasher._finalize()();
        __int16 v17 = result & v7;
        if (v12 >= (uint64_t)v8)
        {
          if (v17 < v8)
          {
            uint64_t v2 = v30;
            uint64_t v4 = v31;
          }
          else
          {
            uint64_t v2 = v30;
            uint64_t v4 = v31;
            if (v3 >= (uint64_t)v17) {
              goto LABEL_12;
            }
          }
        }
        else
        {
          uint64_t v2 = v30;
          uint64_t v4 = v31;
          if (v17 >= v8 || v3 >= (uint64_t)v17)
          {
LABEL_12:
            BOOL v18 = *(void *)(v2 + 48);
            int v19 = v18 + 20 * v3;
            uint64_t v20 = (long long *)(v18 + v32);
            if (20 * v3 < v32 || v19 >= (unint64_t)v20 + 20 || v3 != v6)
            {
              uint64_t v21 = *v20;
              *(_DWORD *)(v19 + 16) = *((_DWORD *)v20 + 4);
              *(_OWORD *)int v19 = v21;
            }
            uint64_t v22 = *(void *)(v2 + 56);
            unint64_t result = v22 + 120 * v3;
            BOOL v23 = (const void *)(v22 + 120 * v6);
            if (v3 != v6 || (int64_t v3 = v6, result >= (unint64_t)v23 + 120))
            {
              unint64_t result = (unint64_t)memmove((void *)result, v23, 0x78uLL);
              int64_t v3 = v6;
            }
          }
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v24 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    char v25 = *v24;
    uint64_t v26 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v24 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v26 = *v24;
    char v25 = (-1 << result) - 1;
  }
  *uint64_t v24 = v26 & v25;
  int64_t v27 = *(void *)(v2 + 16);
  unint64_t v28 = __OFSUB__(v27, 1);
  int64_t v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v2 + 16) = v29;
    ++*(_DWORD *)(v2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  long long v9;
  long long v10;
  uint64_t v11;
  void *v12;
  unint64_t v13;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  long long *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        unint64_t v11 = *(void *)(a2 + 48);
        uint64_t v12 = (void *)(v11 + 8 * v6);
        unint64_t result = static Hasher._hash(seed:_:)();
        double v13 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 >= v8 && v3 >= (uint64_t)v13)
          {
LABEL_16:
            unint64_t v16 = (void *)(v11 + 8 * v3);
            if (v3 != v6 || v16 >= v12 + 1) {
              *unint64_t v16 = *v12;
            }
            __int16 v17 = *(void *)(a2 + 56);
            BOOL v18 = v17 + 40 * v3;
            int v19 = (long long *)(v17 + 40 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v18 >= (unint64_t)v19 + 40))
            {
              long long v9 = *v19;
              Swift::UInt v10 = v19[1];
              *(void *)(v18 + 32) = *((void *)v19 + 4);
              *(_OWORD *)BOOL v18 = v9;
              *(_OWORD *)(v18 + 16) = v10;
              int64_t v3 = v6;
            }
          }
        }
        else if (v13 >= v8 || v3 >= (uint64_t)v13)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1 << result) - 1;
  }
  *uint64_t v20 = v22 & v21;
  BOOL v23 = *(void *)(a2 + 16);
  uint64_t v24 = __OFSUB__(v23, 1);
  char v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  long long v9;
  void *v10;
  id v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Swift::UInt v10 = *(void **)(*(void *)(a2 + 48) + 8 * v6);
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        Hasher.init(_seed:)();
        unint64_t v11 = v10;
        String.hash(into:)();
        uint64_t v12 = Hasher._finalize()();

        unint64_t result = swift_bridgeObjectRelease();
        double v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8) {
            goto LABEL_5;
          }
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          double v14 = *(void *)(a2 + 48);
          uint64_t v15 = (void *)(v14 + 8 * v3);
          unint64_t v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || v15 >= v16 + 1) {
            *uint64_t v15 = *v16;
          }
          __int16 v17 = *(void *)(a2 + 56);
          BOOL v18 = (_OWORD *)(v17 + 32 * v3);
          int v19 = (_OWORD *)(v17 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v18 >= v19 + 2))
          {
            long long v9 = v19[1];
            *BOOL v18 = *v19;
            v18[1] = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1 << result) - 1;
  }
  *uint64_t v20 = v22 & v21;
  BOOL v23 = *(void *)(a2 + 16);
  uint64_t v24 = __OFSUB__(v23, 1);
  char v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  long long v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  void *v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Swift::UInt v10 = *(void *)(a2 + 48);
        unint64_t v11 = (void *)(v10 + 8 * v6);
        unint64_t result = static Hasher._hash(seed:_:)();
        uint64_t v12 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 >= v8 && v3 >= (uint64_t)v12)
          {
LABEL_16:
            uint64_t v15 = (void *)(v10 + 8 * v3);
            if (v3 != v6 || v15 >= v11 + 1) {
              *uint64_t v15 = *v11;
            }
            unint64_t v16 = *(void *)(a2 + 56);
            __int16 v17 = (_OWORD *)(v16 + 32 * v3);
            BOOL v18 = (_OWORD *)(v16 + 32 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v17 >= v18 + 2))
            {
              long long v9 = v18[1];
              *__int16 v17 = *v18;
              v17[1] = v9;
              int64_t v3 = v6;
            }
          }
        }
        else if (v12 >= v8 || v3 >= (uint64_t)v12)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    int v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v20 = *v19;
    uint64_t v21 = (-1 << v3) - 1;
  }
  else
  {
    int v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v21 = *v19;
    uint64_t v20 = (-1 << result) - 1;
  }
  *int v19 = v21 & v20;
  uint64_t v22 = *(void *)(a2 + 16);
  BOOL v23 = __OFSUB__(v22, 1);
  uint64_t v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  long long *v13;
  long long v14;
  long long v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  unsigned char v25[40];

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        outlined init with copy of Subview.ID(*(void *)(a2 + 48) + 40 * v6, (uint64_t)v25);
        Hasher.init(_seed:)();
        AnyHashable.hash(into:)();
        long long v9 = Hasher._finalize()();
        unint64_t result = outlined destroy of Subview.ID((uint64_t)v25);
        Swift::UInt v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          unint64_t v11 = *(void *)(a2 + 48);
          uint64_t v12 = v11 + 40 * v3;
          double v13 = (long long *)(v11 + 40 * v6);
          if (v3 != v6 || v12 >= (unint64_t)v13 + 40)
          {
            double v14 = *v13;
            uint64_t v15 = v13[1];
            *(void *)(v12 + 32) = *((void *)v13 + 4);
            *(_OWORD *)uint64_t v12 = v14;
            *(_OWORD *)(v12 + 16) = v15;
          }
          unint64_t v16 = *(void *)(a2 + 56);
          __int16 v17 = (void *)(v16 + 8 * v3);
          BOOL v18 = (void *)(v16 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v17 >= v18 + 1))
          {
            *__int16 v17 = *v18;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    int v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v20 = *v19;
    uint64_t v21 = (-1 << v3) - 1;
  }
  else
  {
    int v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v21 = *v19;
    uint64_t v20 = (-1 << result) - 1;
  }
  *int v19 = v21 & v20;
  uint64_t v22 = *(void *)(a2 + 16);
  BOOL v23 = __OFSUB__(v22, 1);
  uint64_t v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  Swift::Int v10;
  uint64_t v13;
  unint64_t v14;
  long long *v15;
  long long v16;
  long long v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  unsigned char v27[40];

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        outlined init with copy of AnyHashable(*(void *)(a2 + 48) + 40 * v6, (uint64_t)v27);
        long long v9 = AnyHashable._rawHashValue(seed:)(*(void *)(a2 + 40));
        unint64_t result = outlined destroy of AnyHashable((uint64_t)v27);
        Swift::UInt v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 >= v8 && v3 >= v10)
          {
LABEL_16:
            double v13 = *(void *)(a2 + 48);
            double v14 = v13 + 40 * v3;
            uint64_t v15 = (long long *)(v13 + 40 * v6);
            if (v3 != v6 || v14 >= (unint64_t)v15 + 40)
            {
              unint64_t v16 = *v15;
              __int16 v17 = v15[1];
              *(void *)(v14 + 32) = *((void *)v15 + 4);
              *(_OWORD *)double v14 = v16;
              *(_OWORD *)(v14 + 16) = v17;
            }
            BOOL v18 = *(void *)(a2 + 56);
            int v19 = (void *)(v18 + 8 * v3);
            uint64_t v20 = (void *)(v18 + 8 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v19 >= v20 + 1))
            {
              *int v19 = *v20;
              int64_t v3 = v6;
            }
          }
        }
        else if (v10 >= v8 || v3 >= v10)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v22 = *v21;
    BOOL v23 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    BOOL v23 = *v21;
    uint64_t v22 = (-1 << result) - 1;
  }
  *uint64_t v21 = v23 & v22;
  uint64_t v24 = *(void *)(a2 + 16);
  char v25 = __OFSUB__(v24, 1);
  uint64_t v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  long long v9;
  Swift::UInt32 v10;
  unint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  unint64_t v16;
  long long *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Swift::UInt v10 = *(_DWORD *)(*(void *)(a2 + 48) + 4 * v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v10);
        unint64_t result = Hasher._finalize()();
        unint64_t v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(a2 + 48);
          double v13 = (_DWORD *)(v12 + 4 * v3);
          double v14 = (_DWORD *)(v12 + 4 * v6);
          if (v3 != v6 || v13 >= v14 + 1) {
            *double v13 = *v14;
          }
          uint64_t v15 = *(void *)(a2 + 56);
          unint64_t v16 = v15 + 24 * v3;
          __int16 v17 = (long long *)(v15 + 24 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v16 >= (unint64_t)v17 + 24))
          {
            long long v9 = *v17;
            *(void *)(v16 + 16) = *((void *)v17 + 2);
            *(_OWORD *)unint64_t v16 = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    BOOL v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    int v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    BOOL v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    int v19 = (-1 << result) - 1;
  }
  *BOOL v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  uint64_t v22 = __OFSUB__(v21, 1);
  BOOL v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  long long v9;
  Swift::Int v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::UInt v10 = Hasher._finalize()();
        unint64_t result = swift_bridgeObjectRelease();
        unint64_t v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(a2 + 48);
          double v13 = (_OWORD *)(v12 + 16 * v3);
          double v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1) {
            *double v13 = *v14;
          }
          uint64_t v15 = *(void *)(a2 + 56);
          unint64_t v16 = (_OWORD *)(v15 + 32 * v3);
          __int16 v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 2))
          {
            long long v9 = v17[1];
            *unint64_t v16 = *v17;
            v16[1] = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    BOOL v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    int v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    BOOL v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    int v19 = (-1 << result) - 1;
  }
  *BOOL v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  uint64_t v22 = __OFSUB__(v21, 1);
  BOOL v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::UInt8 v9;
  unint64_t v10;
  uint64_t v11;
  unsigned char *v12;
  unsigned char *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        long long v9 = *(unsigned char *)(*(void *)(a2 + 48) + v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v9);
        unint64_t result = Hasher._finalize()();
        Swift::UInt v10 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          unint64_t v11 = *(void *)(a2 + 48);
          uint64_t v12 = (unsigned char *)(v11 + v3);
          double v13 = (unsigned char *)(v11 + v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *uint64_t v12 = *v13;
          }
          double v14 = *(void *)(a2 + 56);
          uint64_t v15 = (void *)(v14 + 8 * v3);
          unint64_t v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *uint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    __int16 v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    BOOL v18 = *v17;
    int v19 = (-1 << v3) - 1;
  }
  else
  {
    __int16 v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    int v19 = *v17;
    BOOL v18 = (-1 << result) - 1;
  }
  *__int16 v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  uint64_t v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::UInt v11;
  Swift::UInt v12;
  Swift::UInt v13;
  Swift::UInt v14;
  int v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  long long *v20;
  long long v21;
  long long v22;
  long long v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  Swift::UInt v36;
  uint64_t v37;

  uint64_t v2 = a2;
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      int64_t v33 = v4;
      uint64_t v34 = (result + 1) & v7;
      unint64_t v35 = v7;
      do
      {
        unint64_t v8 = v3;
        long long v9 = v2;
        char v37 = 56 * v6;
        Swift::UInt v10 = *(void *)(v2 + 48) + 56 * v6;
        unint64_t v11 = *(void *)v10;
        uint64_t v12 = *(void *)(v10 + 8);
        double v14 = *(void *)(v10 + 16);
        double v13 = *(void *)(v10 + 24);
        uint64_t v15 = *(unsigned __int8 *)(v10 + 32);
        unint64_t v36 = *(void *)(v10 + 40);
        unint64_t v16 = *(unsigned __int8 *)(v10 + 48);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v11);
        Hasher._combine(_:)(v12);
        Hasher._combine(_:)(v14);
        if (v15 == 1)
        {
          Hasher._combine(_:)(0);
        }
        else
        {
          Hasher._combine(_:)(1u);
          Hasher._combine(_:)(v13);
        }
        uint64_t v2 = v9;
        int64_t v3 = v8;
        if (v16)
        {
          Hasher._combine(_:)(0);
        }
        else
        {
          Hasher._combine(_:)(1u);
          Hasher._combine(_:)(v36);
        }
        unint64_t result = Hasher._finalize()();
        __int16 v17 = result & v35;
        if (v8 >= (uint64_t)v34)
        {
          if (v17 >= v34 && v8 >= (uint64_t)v17)
          {
LABEL_18:
            BOOL v18 = *(void *)(v9 + 48);
            int v19 = v18 + 56 * v8;
            uint64_t v20 = (long long *)(v18 + v37);
            if (56 * v8 < v37 || v19 >= (unint64_t)v20 + 56 || v8 != v6)
            {
              uint64_t v21 = *v20;
              uint64_t v22 = v20[1];
              BOOL v23 = v20[2];
              *(void *)(v19 + 48) = *((void *)v20 + 6);
              *(_OWORD *)(v19 + 16) = v22;
              *(_OWORD *)(v19 + 32) = v23;
              *(_OWORD *)int v19 = v21;
            }
            uint64_t v24 = *(void *)(v9 + 56);
            char v25 = (void *)(v24 + 8 * v8);
            uint64_t v26 = (void *)(v24 + 8 * v6);
            uint64_t v4 = v33;
            if (v8 != v6 || (int64_t v3 = v6, v25 >= v26 + 1))
            {
              *char v25 = *v26;
              int64_t v3 = v6;
            }
            goto LABEL_5;
          }
        }
        else if (v17 >= v34 || v8 >= (uint64_t)v17)
        {
          goto LABEL_18;
        }
        uint64_t v4 = v33;
LABEL_5:
        unint64_t v6 = (v6 + 1) & v35;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    int64_t v27 = (uint64_t *)(v4 + 8 * (v3 >> 6));
    unint64_t v28 = *v27;
    int64_t v29 = (-1 << v3) - 1;
  }
  else
  {
    int64_t v27 = (uint64_t *)(v4 + 8 * (result >> 6));
    int64_t v29 = *v27;
    unint64_t v28 = (-1 << result) - 1;
  }
  *int64_t v27 = v29 & v28;
  unint64_t v30 = *(void *)(v2 + 16);
  char v31 = __OFSUB__(v30, 1);
  char v32 = v30 - 1;
  if (v31)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v2 + 16) = v32;
    ++*(_DWORD *)(v2 + 36);
  }
  return result;
}

{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  long long v9;
  long long v10;
  uint64_t v11;
  Swift::UInt32 *v12;
  uint64_t v13;
  Swift::UInt32 v14;
  Swift::UInt32 v15;
  int64_t v16;
  Swift::UInt32 v17;
  Swift::UInt32 v18;
  unint64_t v19;
  Swift::UInt32 v20;
  Swift::UInt32 v21;
  unint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  _OWORD *v25;
  uint64_t v26;
  unint64_t v27;
  long long *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;

  uint64_t v2 = a2;
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      unint64_t v35 = v4;
      do
      {
        unint64_t v11 = v2;
        uint64_t v12 = (Swift::UInt32 *)(*(void *)(v2 + 48) + 16 * v6);
        double v13 = v7;
        double v14 = *v12;
        uint64_t v15 = v12[1];
        unint64_t v16 = v3;
        __int16 v17 = v12[2];
        BOOL v18 = v12[3];
        int v19 = v8;
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v14);
        uint64_t v20 = v15;
        uint64_t v7 = v13;
        Hasher._combine(_:)(v20);
        uint64_t v21 = v17;
        int64_t v3 = v16;
        Hasher._combine(_:)(v21);
        Hasher._combine(_:)(v18);
        unint64_t result = Hasher._finalize()();
        unint64_t v8 = v19;
        uint64_t v22 = result & v13;
        if (v16 >= (uint64_t)v19)
        {
          if (v22 < v19)
          {
            uint64_t v4 = v35;
            uint64_t v2 = v11;
          }
          else
          {
            uint64_t v4 = v35;
            uint64_t v2 = v11;
            if (v3 >= (uint64_t)v22) {
              goto LABEL_12;
            }
          }
        }
        else
        {
          uint64_t v4 = v35;
          uint64_t v2 = v11;
          if (v22 >= v8 || v3 >= (uint64_t)v22)
          {
LABEL_12:
            BOOL v23 = *(void *)(v2 + 48);
            uint64_t v24 = (_OWORD *)(v23 + 16 * v3);
            char v25 = (_OWORD *)(v23 + 16 * v6);
            if (v3 != v6 || v24 >= v25 + 1) {
              *uint64_t v24 = *v25;
            }
            uint64_t v26 = *(void *)(v2 + 56);
            int64_t v27 = v26 + 40 * v3;
            unint64_t v28 = (long long *)(v26 + 40 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v27 >= (unint64_t)v28 + 40))
            {
              long long v9 = *v28;
              Swift::UInt v10 = v28[1];
              *(void *)(v27 + 32) = *((void *)v28 + 4);
              *(_OWORD *)int64_t v27 = v9;
              *(_OWORD *)(v27 + 16) = v10;
              int64_t v3 = v6;
            }
          }
        }
        unint64_t v6 = (v6 + 1) & v13;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    int64_t v29 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    unint64_t v30 = *v29;
    char v31 = (-1 << v3) - 1;
  }
  else
  {
    int64_t v29 = (uint64_t *)(v4 + 8 * (result >> 6));
    char v31 = *v29;
    unint64_t v30 = (-1 << result) - 1;
  }
  *int64_t v29 = v31 & v30;
  char v32 = *(void *)(v2 + 16);
  int64_t v33 = __OFSUB__(v32, 1);
  uint64_t v34 = v32 - 1;
  if (v33)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v2 + 16) = v34;
    ++*(_DWORD *)(v2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  long long v9;
  long long v10;
  Swift::UInt *v11;
  Swift::UInt v12;
  Swift::UInt v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  unint64_t v19;
  long long *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        unint64_t v11 = (Swift::UInt *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v12 = *v11;
        double v13 = v11[1];
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v12);
        Hasher._combine(_:)(v13);
        unint64_t result = Hasher._finalize()();
        double v14 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v14 < v8) {
            goto LABEL_5;
          }
        }
        else if (v14 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v14)
        {
LABEL_11:
          uint64_t v15 = *(void *)(a2 + 48);
          unint64_t v16 = (_OWORD *)(v15 + 16 * v3);
          __int16 v17 = (_OWORD *)(v15 + 16 * v6);
          if (v3 != v6 || v16 >= v17 + 1) {
            *unint64_t v16 = *v17;
          }
          BOOL v18 = *(void *)(a2 + 56);
          int v19 = v18 + 40 * v3;
          uint64_t v20 = (long long *)(v18 + 40 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v19 >= (unint64_t)v20 + 40))
          {
            long long v9 = *v20;
            Swift::UInt v10 = v20[1];
            *(void *)(v19 + 32) = *((void *)v20 + 4);
            *(_OWORD *)int v19 = v9;
            *(_OWORD *)(v19 + 16) = v10;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v22 = *v21;
    BOOL v23 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    BOOL v23 = *v21;
    uint64_t v22 = (-1 << result) - 1;
  }
  *uint64_t v21 = v23 & v22;
  uint64_t v24 = *(void *)(a2 + 16);
  char v25 = __OFSUB__(v24, 1);
  uint64_t v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  int64_t v17;
  unint64_t v18;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      while (1)
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        long long v9 = Hasher._finalize()();
        unint64_t result = swift_bridgeObjectRelease();
        Swift::UInt v10 = v9 & v7;
        if (v3 >= (uint64_t)v8) {
          break;
        }
        if (v10 < v8) {
          goto LABEL_11;
        }
LABEL_12:
        unint64_t v11 = *(void *)(a2 + 48);
        uint64_t v12 = (_OWORD *)(v11 + 16 * v3);
        double v13 = (_OWORD *)(v11 + 16 * v6);
        if (v3 != v6 || v12 >= v13 + 1) {
          *uint64_t v12 = *v13;
        }
        double v14 = *(void *)(a2 + 56);
        uint64_t v15 = *(void *)(*(void *)(type metadata accessor for AccessibilityCustomAttributes.Value() - 8) + 72);
        unint64_t v16 = v15 * v3;
        unint64_t result = v14 + v15 * v3;
        __int16 v17 = v15 * v6;
        BOOL v18 = v14 + v15 * v6 + v15;
        if (v16 < v17 || result >= v18)
        {
          unint64_t result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          int64_t v3 = v6;
          if (v16 == v17) {
            goto LABEL_6;
          }
          unint64_t result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          goto LABEL_21;
        }
      }
      if (v10 < v8) {
        goto LABEL_6;
      }
LABEL_11:
      if (v3 < (uint64_t)v10) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
LABEL_21:
    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1 << result) - 1;
  }
  *uint64_t v20 = v22 & v21;
  BOOL v23 = *(void *)(a2 + 16);
  uint64_t v24 = __OFSUB__(v23, 1);
  char v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::UInt64 v14;
  int v15;
  Swift::UInt64 v16;
  int v17;
  Swift::UInt64 v18;
  Swift::UInt64 v19;
  unint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  _OWORD *v23;
  long long v24;
  uint64_t v25;
  unint64_t v26;
  long long *v27;
  long long v28;
  long long v29;
  long long v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;

  uint64_t v2 = a2;
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      char v37 = v4;
      do
      {
        long long v9 = v8;
        Swift::UInt v10 = v7;
        unint64_t v11 = 32 * v6;
        uint64_t v12 = v2;
        double v13 = *(void *)(v2 + 48) + 32 * v6;
        double v14 = *(void *)v13;
        uint64_t v15 = *(unsigned __int8 *)(v13 + 8);
        unint64_t v16 = *(void *)(v13 + 16);
        __int16 v17 = *(unsigned __int8 *)(v13 + 24);
        Hasher.init(_seed:)();
        if (v15 == 1)
        {
          Hasher._combine(_:)(0);
          if (v17) {
            goto LABEL_16;
          }
        }
        else
        {
          Hasher._combine(_:)(1u);
          if ((v14 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
            int v19 = v14;
          }
          else {
            int v19 = 0;
          }
          Hasher._combine(_:)(v19);
          if (v17)
          {
LABEL_16:
            Hasher._combine(_:)(0);
            goto LABEL_17;
          }
        }
        Hasher._combine(_:)(1u);
        if ((v16 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
          BOOL v18 = v16;
        }
        else {
          BOOL v18 = 0;
        }
        Hasher._combine(_:)(v18);
LABEL_17:
        uint64_t v2 = v12;
        unint64_t result = Hasher._finalize()();
        uint64_t v7 = v10;
        uint64_t v20 = result & v10;
        unint64_t v8 = v9;
        if (v3 >= (uint64_t)v9)
        {
          if (v20 >= v9 && v3 >= (uint64_t)v20)
          {
LABEL_23:
            uint64_t v21 = *(void *)(v12 + 48);
            uint64_t v22 = (_OWORD *)(v21 + 32 * v3);
            BOOL v23 = (_OWORD *)(v21 + v11);
            if (32 * v3 != v11 || v22 >= v23 + 2)
            {
              uint64_t v24 = v23[1];
              *uint64_t v22 = *v23;
              v22[1] = v24;
            }
            char v25 = *(void *)(v12 + 56);
            uint64_t v26 = v25 + 56 * v3;
            int64_t v27 = (long long *)(v25 + 56 * v6);
            uint64_t v4 = v37;
            if (v3 != v6 || (int64_t v3 = v6, v26 >= (unint64_t)v27 + 56))
            {
              unint64_t v28 = *v27;
              int64_t v29 = v27[1];
              unint64_t v30 = v27[2];
              *(void *)(v26 + 48) = *((void *)v27 + 6);
              *(_OWORD *)(v26 + 16) = v29;
              *(_OWORD *)(v26 + 32) = v30;
              *(_OWORD *)uint64_t v26 = v28;
              int64_t v3 = v6;
            }
            goto LABEL_5;
          }
        }
        else if (v20 >= v9 || v3 >= (uint64_t)v20)
        {
          goto LABEL_23;
        }
        uint64_t v4 = v37;
LABEL_5:
        unint64_t v6 = (v6 + 1) & v10;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    char v31 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    char v32 = *v31;
    int64_t v33 = (-1 << v3) - 1;
  }
  else
  {
    char v31 = (uint64_t *)(v4 + 8 * (result >> 6));
    int64_t v33 = *v31;
    char v32 = (-1 << result) - 1;
  }
  *char v31 = v33 & v32;
  uint64_t v34 = *(void *)(v2 + 16);
  unint64_t v35 = __OFSUB__(v34, 1);
  unint64_t v36 = v34 - 1;
  if (v35)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v2 + 16) = v36;
    ++*(_DWORD *)(v2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::UInt64 v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  const void *v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        long long v9 = *(void *)(*(void *)(a2 + 48) + 8 * v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v9);
        unint64_t result = Hasher._finalize()();
        Swift::UInt v10 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          unint64_t v11 = *(void *)(a2 + 48);
          uint64_t v12 = (void *)(v11 + 8 * v3);
          double v13 = (void *)(v11 + 8 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *uint64_t v12 = *v13;
          }
          double v14 = *(void *)(a2 + 56);
          unint64_t result = v14 + 120 * v3;
          uint64_t v15 = (const void *)(v14 + 120 * v6);
          if (120 * v3 < (uint64_t)(120 * v6)
            || result >= (unint64_t)v15 + 120
            || (v16 = v3 == v6, int64_t v3 = v6, !v16))
          {
            unint64_t result = (unint64_t)memmove((void *)result, v15, 0x78uLL);
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    __int16 v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    BOOL v18 = *v17;
    int v19 = (-1 << v3) - 1;
  }
  else
  {
    __int16 v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    int v19 = *v17;
    BOOL v18 = (-1 << result) - 1;
  }
  *__int16 v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  uint64_t v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::UInt v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  int64_t v17;
  unint64_t v18;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      while (1)
      {
        long long v9 = *(void *)(*(void *)(a2 + 48) + 8 * v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v9);
        unint64_t result = Hasher._finalize()();
        Swift::UInt v10 = result & v7;
        if (v3 >= (uint64_t)v8) {
          break;
        }
        if (v10 < v8) {
          goto LABEL_11;
        }
LABEL_12:
        unint64_t v11 = *(void *)(a2 + 48);
        uint64_t v12 = (void *)(v11 + 8 * v3);
        double v13 = (void *)(v11 + 8 * v6);
        if (v3 != v6 || v12 >= v13 + 1) {
          *uint64_t v12 = *v13;
        }
        double v14 = *(void *)(a2 + 56);
        uint64_t v15 = *(void *)(*(void *)(type metadata accessor for Text.Effect.InteractionMetrics() - 8) + 72);
        unint64_t v16 = v15 * v3;
        unint64_t result = v14 + v15 * v3;
        __int16 v17 = v15 * v6;
        BOOL v18 = v14 + v15 * v6 + v15;
        if (v16 < v17 || result >= v18)
        {
          unint64_t result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          int64_t v3 = v6;
          if (v16 == v17) {
            goto LABEL_6;
          }
          unint64_t result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          goto LABEL_21;
        }
      }
      if (v10 < v8) {
        goto LABEL_6;
      }
LABEL_11:
      if (v3 < (uint64_t)v10) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
LABEL_21:
    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1 << result) - 1;
  }
  *uint64_t v20 = v22 & v21;
  BOOL v23 = *(void *)(a2 + 16);
  uint64_t v24 = __OFSUB__(v23, 1);
  char v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::UInt64 v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        long long v9 = *(void *)(*(void *)(a2 + 48) + 8 * v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v9);
        unint64_t result = Hasher._finalize()();
        Swift::UInt v10 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          unint64_t v11 = *(void *)(a2 + 48);
          uint64_t v12 = (void *)(v11 + 8 * v3);
          double v13 = (void *)(v11 + 8 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *uint64_t v12 = *v13;
          }
          double v14 = *(void *)(a2 + 56);
          uint64_t v15 = (void *)(v14 + 8 * v3);
          unint64_t v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *uint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    __int16 v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    BOOL v18 = *v17;
    int v19 = (-1 << v3) - 1;
  }
  else
  {
    __int16 v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    int v19 = *v17;
    BOOL v18 = (-1 << result) - 1;
  }
  *__int16 v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  uint64_t v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::UInt64 v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        long long v9 = *(void *)(*(void *)(a2 + 48) + 8 * v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v9);
        unint64_t result = Hasher._finalize()();
        Swift::UInt v10 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          unint64_t v11 = *(void *)(a2 + 48);
          uint64_t v12 = (void *)(v11 + 8 * v3);
          double v13 = (void *)(v11 + 8 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *uint64_t v12 = *v13;
          }
          double v14 = *(void *)(a2 + 56);
          uint64_t v15 = (_OWORD *)(v14 + 16 * v3);
          unint64_t v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *uint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    __int16 v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    BOOL v18 = *v17;
    int v19 = (-1 << v3) - 1;
  }
  else
  {
    __int16 v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    int v19 = *v17;
    BOOL v18 = (-1 << result) - 1;
  }
  *__int16 v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  uint64_t v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::UInt *v9;
  Swift::UInt v10;
  Swift::UInt v11;
  unint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        long long v9 = (Swift::UInt *)(*(void *)(a2 + 48) + 16 * v6);
        Swift::UInt v10 = *v9;
        unint64_t v11 = v9[1];
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v10);
        Hasher._combine(_:)(v11);
        unint64_t result = Hasher._finalize()();
        uint64_t v12 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 < v8) {
            goto LABEL_5;
          }
        }
        else if (v12 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v12)
        {
LABEL_11:
          double v13 = *(void *)(a2 + 48);
          double v14 = (_OWORD *)(v13 + 16 * v3);
          uint64_t v15 = (_OWORD *)(v13 + 16 * v6);
          if (v3 != v6 || v14 >= v15 + 1) {
            *double v14 = *v15;
          }
          unint64_t v16 = *(void *)(a2 + 56);
          __int16 v17 = (void *)(v16 + 8 * v3);
          BOOL v18 = (void *)(v16 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v17 >= v18 + 1))
          {
            *__int16 v17 = *v18;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    int v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v20 = *v19;
    uint64_t v21 = (-1 << v3) - 1;
  }
  else
  {
    int v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v21 = *v19;
    uint64_t v20 = (-1 << result) - 1;
  }
  *int v19 = v21 & v20;
  uint64_t v22 = *(void *)(a2 + 16);
  BOOL v23 = __OFSUB__(v22, 1);
  uint64_t v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void (*v10)(unsigned char *);
  Swift::Int v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  unsigned char v23[72];

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      while (1)
      {
        long long v9 = *(void *)(*(void *)(a2 + 48) + 8 * v6);
        Hasher.init(_seed:)();
        Swift::UInt v10 = *(void (**)(unsigned char *))(*(void *)v9 + 112);
        swift_retain();
        v10(v23);
        unint64_t v11 = Hasher._finalize()();
        unint64_t result = swift_release();
        uint64_t v12 = v11 & v7;
        if (v3 >= (uint64_t)v8) {
          break;
        }
        if (v12 < v8) {
          goto LABEL_11;
        }
LABEL_12:
        double v13 = *(void *)(a2 + 48);
        double v14 = (void *)(v13 + 8 * v3);
        uint64_t v15 = (void *)(v13 + 8 * v6);
        if (v3 != v6 || v14 >= v15 + 1) {
          *double v14 = *v15;
        }
        if (v3 < (uint64_t)v6 || *(void *)(a2 + 56) + 8 * v3 >= *(void *)(a2 + 56) + 8 * v6 + 8)
        {
          type metadata accessor for WeakBox<AnyLocationBase>(0);
          unint64_t result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          unint64_t v16 = v3 == v6;
          int64_t v3 = v6;
          if (v16) {
            goto LABEL_6;
          }
          type metadata accessor for WeakBox<AnyLocationBase>(0);
          unint64_t result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          goto LABEL_19;
        }
      }
      if (v12 < v8) {
        goto LABEL_6;
      }
LABEL_11:
      if (v3 < (uint64_t)v12) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
LABEL_19:
    __int16 v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    BOOL v18 = *v17;
    int v19 = (-1 << v3) - 1;
  }
  else
  {
    __int16 v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    int v19 = *v17;
    BOOL v18 = (-1 << result) - 1;
  }
  *__int16 v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  uint64_t v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::UInt v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        long long v9 = *(void *)(*(void *)(a2 + 48) + 8 * v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v9);
        unint64_t result = Hasher._finalize()();
        Swift::UInt v10 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          unint64_t v11 = *(void *)(a2 + 48);
          uint64_t v12 = (void *)(v11 + 8 * v3);
          double v13 = (void *)(v11 + 8 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *uint64_t v12 = *v13;
          }
          double v14 = *(void *)(a2 + 56);
          uint64_t v15 = (void *)(v14 + 8 * v3);
          unint64_t v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *uint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    __int16 v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    BOOL v18 = *v17;
    int v19 = (-1 << v3) - 1;
  }
  else
  {
    __int16 v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    int v19 = *v17;
    BOOL v18 = (-1 << result) - 1;
  }
  *__int16 v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  uint64_t v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::UInt *v9;
  Swift::UInt v10;
  Swift::UInt v11;
  unint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        long long v9 = (Swift::UInt *)(*(void *)(a2 + 48) + 16 * v6);
        Swift::UInt v10 = *v9;
        unint64_t v11 = v9[1];
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v10);
        Hasher._combine(_:)(v11);
        unint64_t result = Hasher._finalize()();
        uint64_t v12 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 < v8) {
            goto LABEL_5;
          }
        }
        else if (v12 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v12)
        {
LABEL_11:
          double v13 = *(void *)(a2 + 48);
          double v14 = (_OWORD *)(v13 + 16 * v3);
          uint64_t v15 = (_OWORD *)(v13 + 16 * v6);
          if (v3 != v6 || v14 >= v15 + 1) {
            *double v14 = *v15;
          }
          unint64_t v16 = *(void *)(a2 + 56);
          __int16 v17 = (_OWORD *)(v16 + 16 * v3);
          BOOL v18 = (_OWORD *)(v16 + 16 * v6);
          if (16 * v3 != 16 * v6 || (int64_t v3 = v6, v17 >= v18 + 1))
          {
            *__int16 v17 = *v18;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    int v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v20 = *v19;
    uint64_t v21 = (-1 << v3) - 1;
  }
  else
  {
    int v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v21 = *v19;
    uint64_t v20 = (-1 << result) - 1;
  }
  *int v19 = v21 & v20;
  uint64_t v22 = *(void *)(a2 + 16);
  BOOL v23 = __OFSUB__(v22, 1);
  uint64_t v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  long long v9;
  Swift::UInt32 v10;
  unint64_t v11;
  uint64_t v12;
  unsigned char *v13;
  unsigned char *v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Swift::UInt v10 = *(unsigned __int8 *)(*(void *)(a2 + 48) + v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v10);
        unint64_t result = Hasher._finalize()();
        unint64_t v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(a2 + 48);
          double v13 = (unsigned char *)(v12 + v3);
          double v14 = (unsigned char *)(v12 + v6);
          if (v3 != v6 || v13 >= v14 + 1) {
            *double v13 = *v14;
          }
          uint64_t v15 = *(void *)(a2 + 56);
          unint64_t v16 = (_OWORD *)(v15 + 32 * v3);
          __int16 v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 2))
          {
            long long v9 = v17[1];
            *unint64_t v16 = *v17;
            v16[1] = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    BOOL v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    int v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    BOOL v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    int v19 = (-1 << result) - 1;
  }
  *BOOL v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  uint64_t v22 = __OFSUB__(v21, 1);
  BOOL v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::UInt64 v14;
  int v15;
  Swift::UInt64 v16;
  int v17;
  Swift::UInt64 v18;
  Swift::UInt64 v19;
  unint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  _OWORD *v23;
  long long v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;

  uint64_t v2 = a2;
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      uint64_t v34 = v4;
      do
      {
        long long v9 = v8;
        Swift::UInt v10 = v7;
        unint64_t v11 = 32 * v6;
        uint64_t v12 = v2;
        double v13 = *(void *)(v2 + 48) + 32 * v6;
        double v14 = *(void *)v13;
        uint64_t v15 = *(unsigned __int8 *)(v13 + 8);
        unint64_t v16 = *(void *)(v13 + 16);
        __int16 v17 = *(unsigned __int8 *)(v13 + 24);
        Hasher.init(_seed:)();
        if (v15 == 1)
        {
          Hasher._combine(_:)(0);
          if (v17) {
            goto LABEL_16;
          }
        }
        else
        {
          Hasher._combine(_:)(1u);
          if ((v14 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
            int v19 = v14;
          }
          else {
            int v19 = 0;
          }
          Hasher._combine(_:)(v19);
          if (v17)
          {
LABEL_16:
            Hasher._combine(_:)(0);
            goto LABEL_17;
          }
        }
        Hasher._combine(_:)(1u);
        if ((v16 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
          BOOL v18 = v16;
        }
        else {
          BOOL v18 = 0;
        }
        Hasher._combine(_:)(v18);
LABEL_17:
        unint64_t result = Hasher._finalize()();
        uint64_t v7 = v10;
        uint64_t v20 = result & v10;
        unint64_t v8 = v9;
        uint64_t v2 = v12;
        if (v3 >= (uint64_t)v9)
        {
          if (v20 >= v9 && v3 >= (uint64_t)v20)
          {
LABEL_23:
            uint64_t v21 = *(void *)(v12 + 48);
            uint64_t v22 = (_OWORD *)(v21 + 32 * v3);
            BOOL v23 = (_OWORD *)(v21 + v11);
            if (32 * v3 != v11 || v22 >= v23 + 2)
            {
              uint64_t v24 = v23[1];
              *uint64_t v22 = *v23;
              v22[1] = v24;
            }
            char v25 = *(void *)(v12 + 56);
            uint64_t v26 = (void *)(v25 + 8 * v3);
            int64_t v27 = (void *)(v25 + 8 * v6);
            uint64_t v4 = v34;
            if (v3 != v6 || (int64_t v3 = v6, v26 >= v27 + 1))
            {
              *uint64_t v26 = *v27;
              int64_t v3 = v6;
            }
            goto LABEL_5;
          }
        }
        else if (v20 >= v9 || v3 >= (uint64_t)v20)
        {
          goto LABEL_23;
        }
        uint64_t v4 = v34;
LABEL_5:
        unint64_t v6 = (v6 + 1) & v10;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v28 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    int64_t v29 = *v28;
    unint64_t v30 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v28 = (uint64_t *)(v4 + 8 * (result >> 6));
    unint64_t v30 = *v28;
    int64_t v29 = (-1 << result) - 1;
  }
  *unint64_t v28 = v30 & v29;
  char v31 = *(void *)(v2 + 16);
  char v32 = __OFSUB__(v31, 1);
  int64_t v33 = v31 - 1;
  if (v32)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v2 + 16) = v33;
    ++*(_DWORD *)(v2 + 36);
  }
  return result;
}

{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::UInt64 v14;
  int v15;
  Swift::UInt64 v16;
  int v17;
  Swift::UInt64 v18;
  Swift::UInt64 v19;
  unint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  _OWORD *v23;
  long long v24;
  uint64_t v25;
  _OWORD *v26;
  _OWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;

  uint64_t v2 = a2;
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      uint64_t v34 = v4;
      do
      {
        long long v9 = v8;
        Swift::UInt v10 = v7;
        unint64_t v11 = 32 * v6;
        uint64_t v12 = v2;
        double v13 = *(void *)(v2 + 48) + 32 * v6;
        double v14 = *(void *)v13;
        uint64_t v15 = *(unsigned __int8 *)(v13 + 8);
        unint64_t v16 = *(void *)(v13 + 16);
        __int16 v17 = *(unsigned __int8 *)(v13 + 24);
        Hasher.init(_seed:)();
        if (v15 == 1)
        {
          Hasher._combine(_:)(0);
          if (v17) {
            goto LABEL_16;
          }
        }
        else
        {
          Hasher._combine(_:)(1u);
          if ((v14 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
            int v19 = v14;
          }
          else {
            int v19 = 0;
          }
          Hasher._combine(_:)(v19);
          if (v17)
          {
LABEL_16:
            Hasher._combine(_:)(0);
            goto LABEL_17;
          }
        }
        Hasher._combine(_:)(1u);
        if ((v16 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
          BOOL v18 = v16;
        }
        else {
          BOOL v18 = 0;
        }
        Hasher._combine(_:)(v18);
LABEL_17:
        unint64_t result = Hasher._finalize()();
        uint64_t v7 = v10;
        uint64_t v20 = result & v10;
        unint64_t v8 = v9;
        uint64_t v2 = v12;
        if (v3 >= (uint64_t)v9)
        {
          if (v20 >= v9 && v3 >= (uint64_t)v20)
          {
LABEL_23:
            uint64_t v21 = *(void *)(v12 + 48);
            uint64_t v22 = (_OWORD *)(v21 + 32 * v3);
            BOOL v23 = (_OWORD *)(v21 + v11);
            if (32 * v3 != v11 || v22 >= v23 + 2)
            {
              uint64_t v24 = v23[1];
              *uint64_t v22 = *v23;
              v22[1] = v24;
            }
            char v25 = *(void *)(v12 + 56);
            uint64_t v26 = (_OWORD *)(v25 + 16 * v3);
            int64_t v27 = (_OWORD *)(v25 + 16 * v6);
            uint64_t v4 = v34;
            if (v3 != v6 || (int64_t v3 = v6, v26 >= v27 + 1))
            {
              *uint64_t v26 = *v27;
              int64_t v3 = v6;
            }
            goto LABEL_5;
          }
        }
        else if (v20 >= v9 || v3 >= (uint64_t)v20)
        {
          goto LABEL_23;
        }
        uint64_t v4 = v34;
LABEL_5:
        unint64_t v6 = (v6 + 1) & v10;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v28 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    int64_t v29 = *v28;
    unint64_t v30 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v28 = (uint64_t *)(v4 + 8 * (result >> 6));
    unint64_t v30 = *v28;
    int64_t v29 = (-1 << result) - 1;
  }
  *unint64_t v28 = v30 & v29;
  char v31 = *(void *)(v2 + 16);
  char v32 = __OFSUB__(v31, 1);
  int64_t v33 = v31 - 1;
  if (v32)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v2 + 16) = v33;
    ++*(_DWORD *)(v2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        long long v9 = *(void *)(a2 + 48);
        Swift::UInt v10 = (void *)(v9 + 8 * v6);
        unint64_t result = static Hasher._hash(seed:_:)();
        unint64_t v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            double v14 = (void *)(v9 + 8 * v3);
            if (v3 != v6 || v14 >= v10 + 1) {
              *double v14 = *v10;
            }
            uint64_t v15 = *(void *)(a2 + 56);
            unint64_t v16 = (void *)(v15 + 8 * v3);
            __int16 v17 = (void *)(v15 + 8 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 1))
            {
              *unint64_t v16 = *v17;
              int64_t v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    BOOL v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    int v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    BOOL v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    int v19 = (-1 << result) - 1;
  }
  *BOOL v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  uint64_t v22 = __OFSUB__(v21, 1);
  BOOL v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}