uint64_t outlined destroy of Text.Resolved(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t specialized Collection.first.getter(unint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    _StringGuts.validateScalarIndex(_:)(0xFuLL, a1, a2);
    if ((a2 & 0x1000000000000000) != 0)
    {
      unsigned int v5 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((a2 & 0x2000000000000000) == 0 && (a1 & 0x1000000000000000) == 0) {
        _StringObject.sharedUTF8.getter();
      }
      unsigned int v5 = _decodeScalar(_:startingAt:)();
    }
  }
  else
  {
    unsigned int v5 = 0;
  }
  return v5 | ((unint64_t)(v2 == 0) << 32);
}

unint64_t _StringGuts.validateScalarIndex(_:)(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 1) == 0 || (result & 0xC) == 4 << v5) {
    goto LABEL_9;
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 <= result >> 16)
  {
    __break(1u);
LABEL_9:
    result = _StringGuts.validateSubscalarIndex(_:)(result, a2, a3);
    if ((result & 1) == 0) {
      return result & 0xC | _StringGuts.scalarAlignSlow(_:)(result, a2, a3) & 0xFFFFFFFFFFFFFFF3 | 1;
    }
  }
  return result;
}

unsigned char *assignWithCopy for TypesettingLanguage(unsigned char *a1, unsigned char *a2)
{
  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)(0, (unint64_t *)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags), MEMORY[0x263F07648]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  v7 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 2, v4);
  int v9 = v7(a2, 2, v5);
  if (!v8)
  {
    if (!v9)
    {
      uint64_t v13 = type metadata accessor for Locale.Language();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v13 - 8) + 24))(a1, a2, v13);
      a1[*(int *)(v5 + 48)] = a2[*(int *)(v5 + 48)];
      return a1;
    }
    outlined destroy of (Locale.Language, TypesettingLanguage.Flags)((uint64_t)a1, (uint64_t)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags), MEMORY[0x263F07648], (uint64_t)&type metadata for TypesettingLanguage.Flags, (uint64_t (*)(void))type metadata accessor for (Locale.Language, TypesettingLanguage.Flags));
    goto LABEL_6;
  }
  if (v9)
  {
LABEL_6:
    uint64_t v11 = type metadata accessor for TypesettingLanguage.Storage(0);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    return a1;
  }
  uint64_t v10 = type metadata accessor for Locale.Language();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
  a1[*(int *)(v5 + 48)] = a2[*(int *)(v5 + 48)];
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  return a1;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.BridgedEnvironmentResolverKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.BridgedEnvironmentResolverKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.BridgedEnvironmentResolverKey>, (uint64_t)&type metadata for EnvironmentValues.BridgedEnvironmentResolverKey, (uint64_t)&protocol witness table for EnvironmentValues.BridgedEnvironmentResolverKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.BridgedEnvironmentResolverKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.BridgedEnvironmentResolverKey>>);
    }
  }
}

uint64_t ConcatenatedTextStorage.allowsTypesettingLanguage()()
{
  uint64_t v1 = v0;
  if (*(unsigned char *)(v0 + 32) == 1)
  {
    uint64_t v2 = *(void *)(v0 + 16);
    uint64_t v3 = *(void *)(v1 + 24);
    uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 112);
    uint64_t v5 = swift_retain();
    LOBYTE(v4) = v4(v5);
    outlined consume of Text.Storage(v2, v3, 1);
    if ((v4 & 1) == 0) {
      return 0;
    }
  }
  if (*(unsigned char *)(v1 + 64) != 1) {
    return 1;
  }
  uint64_t v6 = *(void *)(v1 + 48);
  uint64_t v7 = *(void *)(v1 + 56);
  int v8 = *(uint64_t (**)(uint64_t))(*(void *)v6 + 112);
  uint64_t v9 = swift_retain();
  LOBYTE(v8) = v8(v9);
  outlined consume of Text.Storage(v6, v7, 1);
  return v8 & 1;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.BridgedEnvironmentResolverKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.BridgedEnvironmentResolverKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.BridgedEnvironmentResolverKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.BridgedEnvironmentResolverKey>, (uint64_t)&type metadata for EnvironmentValues.BridgedEnvironmentResolverKey, (uint64_t)&protocol witness table for EnvironmentValues.BridgedEnvironmentResolverKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.BridgedEnvironmentResolverKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

id outlined copy of Text.Layout.Line.Line(void *a1, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0)
  {
    id v5 = a1;
    swift_retain();
    a1 = v5;
    uint64_t v3 = vars8;
  }
  return a1;
}

void Text.Layout.Line.typographicBounds.getter(float64x2_t *a1@<X8>)
{
  ascent[1] = *(CGFloat *)MEMORY[0x263EF8340];
  uint64_t v3 = *(void **)v1;
  float64x2_t v15 = *(float64x2_t *)(v1 + 24);
  if (*(unsigned char *)(v1 + 16))
  {
    uint64_t v4 = *(void *)(v1 + 8);
    id v5 = v3;
    objc_msgSend(v5, sel_typographicBounds);
    double TypographicBounds = v6;
    double v9 = v8;
    objc_msgSend(v5, sel_glyphOrigin);
    double v11 = v10;
    outlined consume of Text.Layout.Line.Line(v3, v4, 1);
    double v12 = v9 - v11;
    CGFloat v13 = 0.0;
  }
  else
  {
    v14 = v3;
    CGFloat descent = 0.0;
    ascent[0] = 0.0;
    CGFloat leading = 0.0;
    double TypographicBounds = CTLineGetTypographicBounds(v14, ascent, &descent, &leading);

    double v12 = descent;
    double v11 = ascent[0];
    CGFloat v13 = leading;
  }
  *a1 = vaddq_f64(v15, (float64x2_t)0);
  a1[1].f64[0] = TypographicBounds;
  a1[1].f64[1] = v11;
  a1[2].f64[0] = v12;
  a1[2].f64[1] = v13;
}

uint64_t type metadata accessor for StateObject.Storage()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t ViewRendererHost.explicitAlignment(of:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6)
{
  void (*v9)(uint64_t *__return_ptr, uint64_t, void *, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  void v12[6];
  uint64_t v13;

  v12[2] = a1;
  *(double *)&v12[3] = a5;
  *(double *)&v12[4] = a6;
  uint64_t v8 = *(void *)(a3 + 8);
  double v9 = *(void (**)(uint64_t *__return_ptr, uint64_t, void *, uint64_t, uint64_t, uint64_t))(v8 + 24);
  _s7SwiftUI12GesturePhaseOyytGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for CGFloat?, MEMORY[0x263F8EF38], MEMORY[0x263F8D8F0]);
  v9(&v13, a4, v12, v10, a2, v8);
  return v13;
}

void type metadata accessor for GesturePhase<()>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI12GesturePhaseOyytGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI12GesturePhaseOyytGMaTm_1(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI12GesturePhaseOyytGMaTm_2(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t EnvironmentValues.allScrollableAxes.getter()
{
  return EnvironmentValues.nearestScrollableAxes.getter(specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t Binding.init(get:set:)@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  return Binding.init(get:set:)(a1, a2, a3, a4, a5, a6);
}

{
  uint64_t v11;
  char *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v24;
  void *v25;
  void v26[4];

  v25 = a6;
  MEMORY[0x270FA5388](a1);
  double v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  CGFloat v13 = (void *)swift_allocObject();
  v13[2] = a5;
  v13[3] = a3;
  v13[4] = a4;
  v14 = _ViewInputs.base.modify(a1, a2);
  v16 = v15;
  v18 = v17;
  v20 = v19;
  swift_retain();
  v21 = swift_retain();
  a1(v21);
  type metadata accessor for FunctionalLocation();
  swift_getWitnessTable();
  type metadata accessor for LocationBox();
  v26[0] = v14;
  v26[1] = v16;
  v26[2] = v18;
  v26[3] = v20;
  swift_retain();
  swift_retain();
  v22 = (uint64_t *)LocationBox.__allocating_init(_:)((uint64_t)v26);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return Binding.init(value:location:)((uint64_t)v12, v22, v25);
}

{
  return Binding.init(get:set:)(a1, a2, a3, a4, a5, a6);
}

uint64_t storeEnumTagSinglePayload for GraphicsContext.Filter.ResolvedShadow(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 48) = 0;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 52) = v3;
  return result;
}

uint64_t instantiation function for generic protocol witness table for AnimatablePair<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t outlined retain of _ShapeStyle_RenderedShape(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 192);
  unint64_t v3 = *(void *)(a1 + 200);
  uint64_t v4 = *(void *)(a1 + 232);
  char v5 = *(unsigned char *)(a1 + 240);
  outlined copy of _ShapeStyle_RenderedShape.Shape(*(void **)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(_DWORD *)(a1 + 96));
  swift_retain();
  outlined copy of DisplayList.Item.Value(v2, v3);
  outlined copy of GraphicsBlendMode(v4, v5);
  return a1;
}

void *ShapeStyledDisplayList.updateValue()(uint64_t a1)
{
  uint64_t v127 = 0;
  uint64_t v170 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(void *)(a1 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v9 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  double v11 = (char *)&v96 - v10;
  CGFloat v13 = (unint64_t *)*(int *)(v12 + 48);
  uint64_t Value = AGGraphGetValue();
  char v16 = v15;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v11, Value, v7);
  uint64_t v17 = v16 & 1;
  *((unsigned char *)v13 + (void)v11) = v17;
  uint64_t v18 = v1 + *(int *)(a1 + 80);
  uint64_t v128 = v1;
  uint64_t v19 = *(unsigned int *)(v1 + 28);
  v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 24) + 32);
  *(void *)&long long v103 = *(void *)(a1 + 24);
  *((void *)&v103 + 1) = v7;
  uint64_t v21 = v20(v18, v19, v7);
  if (v21)
  {
    *((unsigned char *)v13 + (void)v11) = 1;
  }
  else if (!v17 && *(_WORD *)(v128 + *(int *)(a1 + 84)))
  {
    CGFloat v13 = &v96;
    char v133 = 0;
    *(void *)&long long v149 = *(void *)(v128 + 28);
    DWORD2(v149) = *(_DWORD *)(v128 + 12);
    MEMORY[0x270FA5388](v21);
    v95[2] = *((void *)&v103 + 1);
    v95[3] = v103;
    v95[4] = &v133;
    type metadata accessor for Attribute<DisplayList>(255, &lazy cache variable for type metadata for Attribute<ViewOrigin>, (uint64_t)&type metadata for ViewOrigin, MEMORY[0x263F28898]);
    uint64_t v17 = v22;
    type metadata accessor for Attribute();
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    uint64_t v7 = v127;
    _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v149, (uint64_t)partial apply for closure #1 in ShapeStyledDisplayList.updateValue(), (uint64_t)v95, TupleTypeMetadata3, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v24);
    uint64_t v127 = v7;
    unint64_t v25 = ++static DisplayList.Version.lastValue;
    if (v133 != 1) {
      goto LABEL_11;
    }
    goto LABEL_8;
  }
  char v133 = 1;
  unint64_t v25 = ++static DisplayList.Version.lastValue;
LABEL_8:
  int v26 = (2 * ((33 * (v25 >> 16)) ^ v25)) | 1;
  if (!v25) {
    LOWORD(v26) = 0;
  }
  *(_WORD *)(v128 + *(int *)(a1 + 84)) = v26;
LABEL_11:
  uint64_t v104 = a1;
  int CurrentAttribute = AGGraphGetCurrentAttribute();
  uint64_t v30 = *MEMORY[0x263F288F8];
  if (CurrentAttribute == v30)
  {
    __break(1u);
LABEL_25:
    LODWORD(v112) = v28;
    LODWORD(v111) = v29;
    swift_once();
    int v29 = v111;
    int v28 = v112;
    uint64_t v82 = v128;
LABEL_23:
    v132[0] = byte_26B0EB4A0;
    *(void *)&long long v134 = v11;
    *((void *)&v134 + 1) = v25;
    *(void *)&long long v135 = v30;
    *((void *)&v135 + 1) = TupleTypeMetadata2;
    *(void *)&long long v136 = v17;
    *((void *)&v136 + 1) = v7;
    *(void *)&long long v137 = v127;
    *((void *)&v137 + 1) = v126;
    uint64_t v84 = v115;
    uint64_t v83 = v116;
    *(void *)&long long v138 = v125;
    *((void *)&v138 + 1) = v116;
    *(void *)&long long v139 = v115;
    uint64_t v85 = v114;
    *((void *)&v139 + 1) = v114;
    unsigned int v86 = v113;
    LODWORD(v140) = v113;
    WORD2(v140) = v9;
    *((CGFloat *)&v140 + 1) = v2;
    *(CGFloat *)&long long v141 = v3;
    *((CGFloat *)&v141 + 1) = v4;
    long long v142 = *(unint64_t *)&v5;
    LODWORD(v143) = 0;
    *((CGFloat *)&v143 + 1) = v2;
    *(CGFloat *)&long long v144 = v3;
    *((CGFloat *)&v144 + 1) = v4;
    *(CGFloat *)&long long v145 = v5;
    *((void *)&v145 + 1) = v124;
    long long v146 = xmmword_2461B9DE0;
    *(void *)&long long v147 = 0;
    BYTE10(v147) = 0;
    WORD4(v147) = 0;
    HIDWORD(v147) = v28;
    LOBYTE(v148[0]) = (_BYTE)v13;
    DWORD1(v148[0]) = v29;
    *((void *)&v148[0] + 1) = static GraphicsBlendMode.normal;
    LOBYTE(v148[1]) = byte_26B0EB4A0;
    DWORD1(v148[1]) = 1065353216;
    BYTE8(v148[1]) = 0;
    LOBYTE(v149) = 0;
    uint64_t v87 = *(unsigned int *)(v82 + 16);
    outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_26B0EB4A0);
    _ShapeStyle_RenderedShape.renderItem(name:styles:layers:)((unsigned __int8 *)&v149, v87, (uint64_t)&v164);
    LOBYTE(v149) = (_BYTE)v13;
    _ShapeStyle_RenderedLayers.commit(shape:options:)((unint64_t)&v134, (char *)&v149, (uint64_t)&v129);
    *(void *)&long long v149 = v129;
    WORD4(v149) = v130;
    BYTE10(v149) = v131;
    AGGraphSetOutputValue();
    outlined consume of _ShapeStyle_RenderedShape.Shape(v122, v121, v120, v119, v118, v117, v127, v126, v125, v83, v84, v85, v86);
    swift_bridgeObjectRelease();
    long long v161 = v146;
    long long v162 = v147;
    v163[0] = v148[0];
    *(_OWORD *)((char *)v163 + 9) = *(_OWORD *)((char *)v148 + 9);
    long long v157 = v142;
    long long v158 = v143;
    long long v159 = v144;
    long long v160 = v145;
    long long v153 = v138;
    long long v154 = v139;
    long long v155 = v140;
    long long v156 = v141;
    long long v149 = v134;
    long long v150 = v135;
    long long v151 = v136;
    long long v152 = v137;
    outlined release of _ShapeStyle_RenderedShape((uint64_t)&v149);
    long long v88 = v165;
    long long v89 = v166;
    long long v90 = v167;
    long long v92 = v168;
    unsigned int v91 = v169;
    swift_release();
    outlined consume of _ShapeStyle_RenderedLayers.Layers(v88, *((uint64_t *)&v88 + 1), v89, *((uint64_t *)&v89 + 1), v90, *((uint64_t *)&v90 + 1), v92, *((uint64_t *)&v92 + 1), v91);
    return (void *)(*(uint64_t (**)(char *, uint64_t))(v101 + 8))(v123, v102);
  }
  v123 = v11;
  unint64_t v124 = v25;
  uint64_t v101 = v9;
  uint64_t v102 = TupleTypeMetadata2;
  v31 = (uint64_t *)v128;
  unint64_t v32 = AGCreateWeakAttribute();
  unint64_t v111 = HIDWORD(v32);
  unint64_t v112 = v32;
  unint64_t v33 = AGCreateWeakAttribute();
  unint64_t v109 = HIDWORD(v33);
  unint64_t v110 = v33;
  unint64_t v34 = AGCreateWeakAttribute();
  unint64_t v107 = HIDWORD(v34);
  unint64_t v108 = v34;
  unint64_t v35 = AGCreateWeakAttribute();
  unint64_t v106 = HIDWORD(v35);
  unint64_t v36 = AGCreateWeakAttribute();
  unint64_t v105 = HIDWORD(v36);
  unint64_t v37 = AGCreateWeakAttribute();
  unsigned int v38 = v37;
  unint64_t v39 = HIDWORD(v37);
  v40 = (double *)AGGraphGetValue();
  double v41 = *v40;
  double v42 = v40[1];
  v43 = (double *)AGGraphGetValue();
  double v44 = *v43;
  double v45 = v43[1];
  uint64_t v47 = *((void *)&v103 + 1);
  uint64_t v46 = v103;
  if (((*(uint64_t (**)(void, void))(v103 + 24))(*((void *)&v103 + 1), v103) & 1) == 0) {
    type metadata accessor for CGSize(0);
  }
  v48 = (double *)AGGraphGetValue();
  double v50 = *v48;
  double v49 = v48[1];
  _threadGeometryProxyData();
  *(void *)&long long v134 = __PAIR64__(v111, v112);
  *((void *)&v134 + 1) = __PAIR64__(v109, v110);
  *(void *)&long long v135 = __PAIR64__(v107, v108);
  unint64_t v97 = v36;
  unint64_t v98 = v35;
  *((void *)&v135 + 1) = __PAIR64__(v106, v35);
  *(void *)&long long v136 = __PAIR64__(v105, v36);
  *((void *)&v136 + 1) = __PAIR64__(v39, v38);
  unint64_t v96 = v39;
  LODWORD(v137) = v124;
  _setThreadGeometryProxyData();
  unint64_t v51 = v127;
  closure #2 in ShapeStyledDisplayList.updateValue()((uint64_t)v123, v47, v46, (double *)&v149, v50, v49);
  if (!v51)
  {
    uint64_t v52 = v46;
    double v53 = v41 - v44;
    double v54 = v42 - v45;
    _setThreadGeometryProxyData();
    unint64_t v121 = *((void *)&v149 + 1);
    v122 = (char *)v149;
    uint64_t v119 = *((void *)&v150 + 1);
    uint64_t v120 = v150;
    uint64_t v117 = *((void *)&v151 + 1);
    uint64_t v118 = v151;
    uint64_t v126 = *((void *)&v152 + 1);
    uint64_t v127 = v152;
    uint64_t v125 = v153;
    uint64_t v115 = v154;
    uint64_t v116 = *((void *)&v153 + 1);
    uint64_t v114 = *((void *)&v154 + 1);
    unsigned int v113 = v155;
    CGFloat v55 = *((double *)&v156 + 1);
    CGFloat v99 = *(double *)&v156;
    CGFloat v100 = *((double *)&v155 + 1);
    CGFloat v56 = *(double *)&v157;
    uint64_t v164 = *v31;
    long long v165 = 0u;
    long long v166 = 0u;
    long long v167 = 0u;
    long long v168 = 0u;
    uint64_t v169 = 0x80000000;
    v57 = *(uint64_t (**)(uint64_t, uint64_t))(v46 + 48);
    swift_retain();
    if (v57(v47, v52))
    {
      _threadGeometryProxyData();
      *(void *)&long long v134 = __PAIR64__(v111, v112);
      *((void *)&v134 + 1) = __PAIR64__(v109, v110);
      *(void *)&long long v135 = __PAIR64__(v107, v108);
      *((void *)&v135 + 1) = __PAIR64__(v106, v98);
      *(void *)&long long v136 = __PAIR64__(v105, v97);
      *((void *)&v136 + 1) = __PAIR64__(v96, v38);
      LODWORD(v137) = v124;
      _setThreadGeometryProxyData();
      closure #3 in ShapeStyledDisplayList.updateValue()((uint64_t)v123, v47, v52, (double *)&v149, v50, v49);
      _setThreadGeometryProxyData();
      long long v58 = v149;
      long long v59 = v150;
      long long v60 = v151;
      unint64_t v61 = v152;
      unsigned int v62 = v155;
      CGFloat v63 = *((double *)&v155 + 1);
      long long v65 = v156;
      CGFloat v64 = *(double *)&v157;
      if ((v155 & 0xE00000) != 0x800000
        || *((void *)&v149 + 1) | (unint64_t)v149 | (unint64_t)v150 | *((void *)&v150 + 1) | (unint64_t)v151 | *((void *)&v151 + 1) | (unint64_t)v152 | *((void *)&v152 + 1) | (unint64_t)v153 | *((void *)&v153 + 1) | (unint64_t)v154 | *((void *)&v154 + 1)
        || v155 != 0x800000)
      {
        unint64_t v110 = *((void *)&v153 + 1);
        unint64_t v111 = v153;
        unint64_t v108 = *((void *)&v154 + 1);
        unint64_t v109 = v154;
        unint64_t v112 = *((void *)&v152 + 1);
        outlined copy of _ShapeStyle_RenderedShape.Shape((void *)v149, *((uint64_t *)&v149 + 1), v150, *((uint64_t *)&v150 + 1), v151, *((uint64_t *)&v151 + 1), v152, *((uint64_t *)&v152 + 1), v153, *((uint64_t *)&v153 + 1), v154, *((uint64_t *)&v154 + 1), v155);
        v171.origin.CGFloat x = v63;
        *(_OWORD *)&v171.origin.CGFloat y = v65;
        v171.size.CGFloat height = v64;
        CGRect v172 = CGRectOffset(v171, v53, v54);
        CGFloat x = v172.origin.x;
        CGFloat y = v172.origin.y;
        CGFloat width = v172.size.width;
        CGFloat height = v172.size.height;
        uint64_t v70 = v128;
        int v71 = *(_DWORD *)(v128 + 8);
        uint64_t v72 = *((void *)&v59 + 1);
        unint64_t v73 = v59;
        __int16 v74 = *(_WORD *)(v128 + *(int *)(v104 + 84));
        int v75 = *(_DWORD *)(v128 + 40);
        if (one-time initialization token for normal != -1)
        {
          unint64_t v107 = *((void *)&v59 + 1);
          LODWORD(v106) = v62;
          unint64_t v105 = v59;
          int v94 = v71;
          DWORD2(v103) = v75;
          swift_once();
          int v75 = DWORD2(v103);
          int v71 = v94;
          unint64_t v73 = v105;
          unsigned int v62 = v106;
          uint64_t v72 = v107;
          uint64_t v70 = v128;
        }
        LOBYTE(v129) = byte_26B0EB4A0;
        long long v134 = v58;
        *(void *)&long long v135 = v73;
        *((void *)&v135 + 1) = v72;
        long long v136 = v60;
        unint64_t v106 = *((void *)&v60 + 1);
        unint64_t v107 = v60;
        *(void *)&long long v137 = v61;
        *((void *)&v137 + 1) = v112;
        long long v103 = v58;
        uint64_t v76 = v110;
        *(void *)&long long v138 = v111;
        *((void *)&v138 + 1) = v110;
        uint64_t v77 = v109;
        *(void *)&long long v139 = v109;
        unint64_t v105 = v61;
        uint64_t v78 = v108;
        *((void *)&v139 + 1) = v108;
        LODWORD(v140) = v62;
        WORD2(v140) = v74;
        *((CGFloat *)&v140 + 1) = x;
        *(CGFloat *)&long long v141 = y;
        *((CGFloat *)&v141 + 1) = width;
        long long v142 = *(unint64_t *)&height;
        LODWORD(v143) = 0;
        *((CGFloat *)&v143 + 1) = x;
        *(CGFloat *)&long long v144 = y;
        *((CGFloat *)&v144 + 1) = width;
        *(CGFloat *)&long long v145 = height;
        *((void *)&v145 + 1) = v124;
        long long v146 = xmmword_2461B9DE0;
        *(void *)&long long v147 = 0;
        BYTE10(v147) = 0;
        WORD4(v147) = 0;
        HIDWORD(v147) = v71;
        LOBYTE(v148[0]) = v60;
        DWORD1(v148[0]) = v75;
        *((void *)&v148[0] + 1) = static GraphicsBlendMode.normal;
        LOBYTE(v148[1]) = byte_26B0EB4A0;
        DWORD1(v148[1]) = 1065353216;
        BYTE8(v148[1]) = 0;
        v132[0] = 1;
        uint64_t v79 = *(unsigned int *)(v70 + 16);
        uint64_t v80 = v72;
        uint64_t v81 = v73;
        outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_26B0EB4A0);
        _ShapeStyle_RenderedShape.renderItem(name:styles:layers:)((unsigned __int8 *)v132, v79, (uint64_t)&v164);
        outlined consume of _ShapeStyle_RenderedShape.Shape((void *)v103, *((uint64_t *)&v103 + 1), v81, v80, v107, v106, v105, v112, v111, v76, v77, v78, v62);
        long long v161 = v146;
        long long v162 = v147;
        v163[0] = v148[0];
        *(_OWORD *)((char *)v163 + 9) = *(_OWORD *)((char *)v148 + 9);
        long long v157 = v142;
        long long v158 = v143;
        long long v159 = v144;
        long long v160 = v145;
        long long v153 = v138;
        long long v154 = v139;
        long long v155 = v140;
        long long v156 = v141;
        long long v149 = v134;
        long long v150 = v135;
        long long v151 = v136;
        long long v152 = v137;
        outlined release of _ShapeStyle_RenderedShape((uint64_t)&v149);
      }
    }
    double v11 = v122;
    unint64_t v25 = v121;
    uint64_t v30 = v120;
    TupleTypeMetadata2 = v119;
    uint64_t v17 = v118;
    uint64_t v7 = v117;
    outlined copy of _ShapeStyle_RenderedShape.Shape(v122, v121, v120, v119, v118, v117, v127, v126, v125, v116, v115, v114, v113);
    v173.origin.CGFloat y = v99;
    v173.origin.CGFloat x = v100;
    v173.size.CGFloat width = v55;
    v173.size.CGFloat height = v56;
    CGRect v174 = CGRectOffset(v173, v53, v54);
    CGFloat v2 = v174.origin.x;
    CGFloat v3 = v174.origin.y;
    CGFloat v4 = v174.size.width;
    CGFloat v5 = v174.size.height;
    uint64_t v82 = v128;
    int v28 = *(_DWORD *)(v128 + 8);
    LOWORD(v9) = *(_WORD *)(v128 + *(int *)(v104 + 84));
    LOBYTE(v13) = *(unsigned char *)(v128 + 48);
    int v29 = *(_DWORD *)(v128 + 40);
    if (one-time initialization token for normal == -1) {
      goto LABEL_23;
    }
    goto LABEL_25;
  }
  uint64_t result = _setThreadGeometryProxyData();
  __break(1u);
  return result;
}

uint64_t outlined release of _ShapeStyle_RenderedShape(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 192);
  unint64_t v3 = *(void *)(a1 + 200);
  uint64_t v4 = *(void *)(a1 + 232);
  char v5 = *(unsigned char *)(a1 + 240);
  outlined consume of _ShapeStyle_RenderedShape.Shape(*(void **)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(_DWORD *)(a1 + 96));
  swift_release();
  outlined consume of DisplayList.Item.Value(v2, v3);
  outlined consume of GraphicsBlendMode(v4, v5);
  return a1;
}

void outlined consume of _ShapeStyle_RenderedShape.Shape(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int a13)
{
  if (((a13 >> 21) & 7) <= 3)
  {
    switch(((unint64_t)a13 >> 21) & 7)
    {
      case 1uLL:
        swift_release();
        swift_release();
        break;
      case 2uLL:
        outlined consume of GraphicsImage.Contents?(a1, a2);
        break;
      case 3uLL:
        outlined consume of DisplayList.Item.Value(a6, a7);
        break;
      default:
        outlined consume of Path.Storage((uint64_t)a1, a2, a3, a4, a5);
        break;
    }
  }
}

void _ShapeStyle_RenderedShape.renderItem(name:styles:layers:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  unint64_t v6 = *a1;
  uint64_t v8 = *(void *)v4;
  uint64_t v7 = *(void *)(v4 + 8);
  uint64_t v10 = *(void *)(v4 + 16);
  uint64_t v9 = *(void *)(v4 + 24);
  uint64_t v11 = *(void *)(v4 + 32);
  uint64_t v12 = *(void *)(v4 + 40);
  unint64_t v13 = *(void *)(v4 + 48);
  uint64_t v14 = *(void *)(v4 + 56);
  uint64_t v15 = *(void *)(v4 + 64);
  uint64_t v16 = *(void *)(v4 + 72);
  uint64_t v17 = *(void *)(v4 + 80);
  uint64_t v18 = *(void *)(v4 + 88);
  unsigned int v19 = *(_DWORD *)(v4 + 96);
  int v20 = (v19 >> 21) & 7;
  if (v20 == 1)
  {
    unsigned __int8 v55 = *a1;
    uint64_t v72 = *(void *)(v4 + 88);
    uint64_t v75 = *(void *)(v4 + 72);
    uint64_t v78 = *(void *)(v4 + 64);
    uint64_t v81 = *(void *)(v4 + 80);
    uint64_t v65 = *(void *)(v4 + 24);
    unsigned __int8 v68 = *(void *)(v4 + 32);
    unint64_t v70 = *(void *)(v4 + 48);
    swift_retain();
    swift_retain();
    if (ResolvedStyledText.needsStyledRendering.getter())
    {
      v95[0] = v8;
      v95[1] = v7;
      char v96 = v10 & 1;
      AGGraphGetValue();
      unsigned __int8 v94 = v55;
      _ShapeStyle_Pack.subscript.getter(&v94, 0, (uint64_t)&v97);
      unsigned __int8 v50 = BYTE8(v97);
      uint64_t v51 = v97;
      unsigned __int8 v48 = BYTE8(v98);
      uint64_t v49 = v98;
      uint64_t v46 = *((void *)&v99 + 1);
      uint64_t v47 = v99;
      uint64_t v44 = *((void *)&v100 + 1);
      uint64_t v45 = v100;
      long long v21 = v101;
      uint64_t v62 = v12;
      char v22 = v102;
      uint64_t v43 = *((void *)&v102 + 1);
      unsigned __int8 v23 = v103;
      long long v84 = v97;
      long long v85 = v98;
      long long v86 = v99;
      long long v87 = v100;
      long long v88 = v101;
      char v89 = v102;
      int v90 = DWORD1(v102);
      uint64_t v91 = *((void *)&v102 + 1);
      char v92 = v103;
      uint64_t v93 = *((void *)&v103 + 1);
      unsigned __int8 v94 = v55;
      _ShapeStyle_RenderedShape.renderKeyedText(_:style:name:layers:)(v95, (uint64_t *)&v84, &v94, a3);
      outlined consume of _ShapeStyle_Pack.Fill(v51, v50, v49, v48, v47, v46, v45, v44, v21, *((uint64_t *)&v21 + 1), v22);
      outlined consume of GraphicsBlendMode?(v43, v23);
      swift_bridgeObjectRelease();
      outlined consume of _ShapeStyle_RenderedShape.Shape((void *)v8, v7, v10, v65, v68, v62, v70, v14, v78, v75, v81, v72, v19);
    }
    else
    {
      *(void *)&long long v97 = v8;
      *((void *)&v97 + 1) = v7;
      LOBYTE(v98) = v10 & 1;
      _ShapeStyle_RenderedShape.renderUnstyledText(_:layers:)((uint64_t *)&v97);
      outlined consume of _ShapeStyle_RenderedShape.Shape((void *)v8, v7, v10, v65, v68, v12, v70, v14, v78, v75, v81, v72, v19);
    }
  }
  else
  {
    if (v20 == 2)
    {
      if ((v14 & 0x100000000) != 0)
      {
        long long v84 = 0uLL;
        LOBYTE(v85) = 3;
        long long v102 = 0u;
        long long v103 = 0u;
        uint64_t v59 = v14;
        *((void *)&v31 + 1) = v14;
        *(void *)&long long v31 = v13;
        uint64_t v53 = v31 >> 32;
        long long v100 = 0u;
        long long v101 = 0u;
        uint64_t v64 = v12;
        uint64_t v67 = v9;
        *((void *)&v31 + 1) = v13;
        *(void *)&long long v31 = v12;
        long long v98 = 0u;
        long long v99 = 0u;
        long long v97 = 0u;
        unsigned __int8 v69 = v11;
        unint64_t v71 = v13;
        uint64_t v32 = v11;
        uint64_t v33 = v9;
        uint64_t v77 = v16;
        uint64_t v80 = v15;
        uint64_t v34 = v16;
        uint64_t v83 = v17;
        uint64_t v74 = v18;
        outlined copy of GraphicsImage.Contents?((id)v8, v7);
        outlined copy of GraphicsImage.Contents?((id)v8, v7);
        _ShapeStyle_RenderedLayers.beginLayer(id:style:shape:)((uint64_t)&v84, &v97, v4);
        uint64_t v35 = swift_allocObject();
        *(void *)(v35 + 16) = v8;
        *(unsigned char *)(v35 + 24) = v7;
        *(void *)(v35 + 32) = v10;
        *(void *)(v35 + 40) = v33;
        *(void *)(v35 + 48) = v32;
        *(unsigned char *)(v35 + 56) = v64;
        *(void *)(v35 + 60) = v31 >> 32;
        *(void *)(v35 + 68) = v53;
        *(unsigned char *)(v35 + 76) = 1;
        *(void *)(v35 + 80) = v80;
        *(void *)(v35 + 88) = v34;
        *(void *)(v35 + 96) = v83;
        *(void *)(v35 + 104) = v74;
        *(unsigned char *)(v35 + 112) = v19;
        *(unsigned char *)(v35 + 113) = BYTE1(v19) & 1;
        *(unsigned char *)(v35 + 114) = BYTE2(v19) & 0x1F;
        *(unsigned char *)(v35 + 115) = HIBYTE(v19);
        uint64_t v61 = v35 | 0x3000000000000000;
        uint64_t v57 = *(unsigned __int16 *)(v4 + 100);
        uint64_t v36 = *(void *)(v4 + 192);
        unint64_t v54 = *(void *)(v4 + 200);
        outlined copy of GraphicsImage.Contents?((id)v8, v7);
        outlined consume of DisplayList.Item.Value(v36, v54);
        *(void *)(v4 + 192) = v61;
        *(void *)(v4 + 200) = v57;
        *(void *)(v4 + 208) = 0;
        *(unsigned char *)(v4 + 218) = 0;
        *(_WORD *)(v4 + 216) = 0;
        _ShapeStyle_RenderedLayers.endLayer(shape:)(v4);
        outlined consume of _ShapeStyle_RenderedShape.Shape((void *)v8, v7, v10, v67, v69, v64, v71, v59, v80, v77, v83, v74, v19);
        outlined consume of _ShapeStyle_RenderedShape.Shape((void *)v8, v7, v10, v67, v69, v64, v71, v59, v80, v77, v83, v74, v19);
        return;
      }
      if (*(void *)(v4 + 8) == 2)
      {
        char v37 = *(unsigned char *)(v8 + 24);
        uint64_t v38 = *(void *)(v8 + 32);
        int v39 = *(_DWORD *)(v8 + 40);
        char v40 = *(unsigned char *)(v8 + 44);
        char v41 = *(unsigned char *)(v8 + 45);
        uint64_t v42 = *(void *)(v8 + 48);
        *(void *)&long long v97 = *(void *)(v8 + 16);
        BYTE8(v97) = v37;
        *(void *)&long long v98 = v38;
        DWORD2(v98) = v39;
        BYTE12(v98) = v40;
        BYTE13(v98) = v41;
        *(void *)&long long v99 = v42;
        LOBYTE(v95[0]) = v6;
        *(void *)&long long v84 = *(void *)AGGraphGetValue();
        specialized _ShapeStyle_RenderedShape.renderVectorGlyph(_:size:orientation:name:styles:layers:)((uint64_t)&v97, v12, (unsigned __int8 *)v95, (uint64_t *)&v84, a3);
        return;
      }
      if (*(void *)(v4 + 8) == 255) {
        outlined copy of GraphicsImage.Contents?(*(id *)v4, 255);
      }
    }
    else if (v20 == 4 && !(v7 | v8 | v10 | v9 | v11 | v12 | v13 | v14 | v15 | v16 | v17 | v18) && v19 == 0x800000)
    {
      return;
    }
    AGGraphGetValue();
    LOBYTE(v95[0]) = v6;
    _ShapeStyle_Pack.subscript.getter((unsigned __int8 *)v95, 0, (uint64_t)&v97);
    long long v24 = v97;
    uint64_t v25 = *((void *)&v98 + 1);
    uint64_t v26 = *((void *)&v100 + 1);
    uint64_t v56 = v101;
    uint64_t v58 = v100;
    uint64_t v52 = *((void *)&v101 + 1);
    unsigned __int8 v76 = BYTE8(v97);
    char v79 = v102;
    int v27 = DWORD1(v102);
    uint64_t v60 = *((void *)&v102 + 1);
    uint64_t v28 = *((void *)&v103 + 1);
    unsigned __int8 v82 = v103;
    long long v84 = v6;
    LOBYTE(v85) = 0;
    long long v29 = v98;
    uint64_t v73 = v98;
    uint64_t v66 = *((void *)&v100 + 1);
    long long v30 = v99;
    uint64_t v63 = *((void *)&v99 + 1);
    *(void *)&long long v102 = v102 | ((unint64_t)DWORD1(v102) << 32);
    *(void *)&long long v103 = v103;
    _ShapeStyle_RenderedLayers.beginLayer(id:style:shape:)((uint64_t)&v84, &v97, v4);
    long long v97 = v24;
    *(void *)&long long v98 = v29;
    *((void *)&v98 + 1) = v25;
    long long v99 = v30;
    *(void *)&long long v100 = v58;
    *((void *)&v100 + 1) = v26;
    *(void *)&long long v101 = v56;
    *((void *)&v101 + 1) = v52;
    LOBYTE(v102) = v79;
    DWORD1(v102) = v27;
    *((void *)&v102 + 1) = v60;
    LOBYTE(v103) = v82;
    *((void *)&v103 + 1) = v28;
    _ShapeStyle_RenderedShape.render(style:)((uint64_t)&v97);
    _ShapeStyle_RenderedLayers.endLayer(shape:)(v4);
    outlined consume of _ShapeStyle_Pack.Fill(v24, v76, v73, BYTE8(v29), v30, v63, v58, v66, v56, v52, v79);
    outlined consume of GraphicsBlendMode?(v60, v82);
    swift_bridgeObjectRelease();
  }
}

uint64_t _ShapeStyle_RenderedLayers.endLayer(shape:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t result = _ShapeStyle_RenderedShape.commitItem()((uint64_t)&v45);
  unint64_t v6 = (_OWORD *)(v2 + 16);
  uint64_t v5 = *(uint64_t *)(v2 + 16);
  uint64_t v7 = *(uint64_t *)(v2 + 8);
  uint64_t v8 = *(void *)(v2 + 48);
  unint64_t v10 = *(void *)(v2 + 56);
  uint64_t v9 = *(void *)(v2 + 64);
  uint64_t v11 = *(void *)(v2 + 72);
  if (v11 >> 30)
  {
    if (v11 >> 30 == 1)
    {
      double v12 = *(double *)(a1 + 104);
      double v13 = *(double *)(a1 + 112);
      long long v14 = v45;
      long long v15 = v46;
      uint64_t v16 = *((void *)&v47 + 1);
      uint64_t v38 = v47;
      uint64_t v39 = *(void *)(v2 + 16);
      int v37 = v49 | (v50 << 16);
      long long v17 = v48;
      uint64_t v40 = *(void *)(v2 + 24);
      uint64_t v41 = *(void *)(v2 + 32);
      uint64_t v42 = *(void *)(v2 + 40);
      uint64_t v43 = *(void *)(v2 + 48);
      uint64_t v44 = *(void *)(v2 + 64);
      outlined copy of _ShapeStyle_RenderedLayers.Layers(v7, v5, v40, v41, v42, v8, v10, v9, v11);
      outlined copy of DisplayList.Item.Value(v16, v17);
      uint64_t v18 = (void *)v7;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v7 + 16) + 1, 1, (void *)v7);
      }
      unint64_t v20 = v18[2];
      unint64_t v19 = v18[3];
      if (v20 >= v19 >> 1) {
        uint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v19 > 1), v20 + 1, 1, v18);
      }
      v18[2] = v20 + 1;
      long long v21 = (double *)&v18[9 * v20];
      v21[4] = *(double *)&v14 - v12;
      v21[5] = *((double *)&v14 + 1) - v13;
      *((_OWORD *)v21 + 3) = v15;
      *((void *)v21 + 8) = v38;
      *((void *)v21 + 9) = v16;
      *((_OWORD *)v21 + 5) = v17;
      *((unsigned char *)v21 + 98) = BYTE2(v37);
      *((_WORD *)v21 + 48) = v37;
      *((_DWORD *)v21 + 25) = 0;
      outlined consume of DisplayList.Item.Value(v16, v17);
      uint64_t result = outlined consume of _ShapeStyle_RenderedLayers.Layers(v7, v39, v40, v41, v42, v43, v10, v44, v11);
      *(void *)(v2 + 8) = v18;
      *unint64_t v6 = 0u;
      *(_OWORD *)(v2 + 32) = 0u;
      *(_OWORD *)(v2 + 48) = 0u;
      *(void *)(v2 + 64) = 0;
      unint64_t v22 = 0x40000000;
    }
    else
    {
      unint64_t v22 = v49 | ((unint64_t)v50 << 16) | ((unint64_t)v51 << 32);
      long long v35 = v46;
      *(_OWORD *)(v2 + 8) = v45;
      *(_OWORD *)(v2 + 24) = v35;
      long long v36 = v48;
      *(_OWORD *)(v2 + 40) = v47;
      *(_OWORD *)(v2 + 56) = v36;
    }
  }
  else
  {
    double v23 = *(double *)(a1 + 104);
    double v24 = *(double *)(a1 + 112);
    double v25 = *(double *)&v7 - v23;
    double v26 = *(double *)&v5 - v24;
    double v27 = *(double *)&v45 - v23;
    double v28 = *((double *)&v45 + 1) - v24;
    uint64_t v29 = *(void *)(v2 + 24);
    uint64_t v30 = *(void *)(v2 + 32);
    uint64_t v31 = *(void *)(v2 + 40);
    _ss23_ContiguousArrayStorageCy7SwiftUI11DisplayListV4ItemVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
    uint64_t result = swift_allocObject();
    *(_OWORD *)(result + 16) = xmmword_2461BDD50;
    *(double *)(result + 32) = v25;
    *(double *)(result + 40) = v26;
    *(void *)(result + 48) = v29;
    *(void *)(result + 56) = v30;
    *(void *)(result + 64) = v31;
    *(void *)(result + 72) = v8;
    *(void *)(result + 80) = v10;
    *(void *)(result + 88) = v9;
    *(unsigned char *)(result + 98) = BYTE2(v11);
    *(_WORD *)(result + 96) = v11;
    *(_DWORD *)(result + 100) = 0;
    unsigned __int16 v32 = v49;
    unsigned __int8 v33 = v50;
    *(double *)(result + 104) = v27;
    *(double *)(result + 112) = v28;
    long long v34 = v47;
    *(_OWORD *)(result + 120) = v46;
    *(_OWORD *)(result + 136) = v34;
    *(_OWORD *)(result + 152) = v48;
    *(unsigned char *)(result + 170) = v33;
    *(_WORD *)(result + 168) = v32;
    *(_DWORD *)(result + 172) = 0;
    *(void *)(v2 + 8) = result;
    *unint64_t v6 = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    unint64_t v22 = 0x40000000;
    *(void *)(v2 + 64) = 0;
  }
  *(void *)(v2 + 72) = v22;
  return result;
}

uint64_t _ShapeStyle_RenderedShape.commitItem()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  float v4 = *(float *)(v1 + 244);
  if (v4 == 0.0) {
    goto LABEL_3;
  }
  CGFloat v5 = *(double *)(v1 + 104);
  CGFloat v6 = *(double *)(v1 + 112);
  CGFloat v7 = *(double *)(v1 + 120);
  CGFloat v8 = *(double *)(v1 + 128);
  v40.origin.CGFloat x = v5;
  v40.origin.CGFloat y = v6;
  v40.size.CGFloat width = v7;
  v40.size.CGFloat height = v8;
  if (CGRectIsEmpty(v40))
  {
LABEL_3:
    uint64_t v9 = (_WORD *)(v1 + 216);
    outlined consume of DisplayList.Item.Value(*(void *)(v2 + 192), *(void *)(v2 + 200));
    *(_OWORD *)(v2 + 192) = xmmword_2461B9DE0;
    *(void *)(v2 + 208) = 0;
    *(unsigned char *)(v2 + 218) = 0;
    *uint64_t v9 = 0;
    uint64_t v10 = *(void *)(v2 + 136);
    if (v10)
    {
      int v11 = *(_DWORD *)(v2 + 144);
      uint64_t v37 = *((void *)v9 - 10);
      int v38 = v11;
      char v39 = 17;
      _ShapeStyle_RenderedShape.addEffect(_:)((uint64_t)&v37);
      swift_release();
      *(void *)(v2 + 136) = 0;
      *(_DWORD *)(v2 + 144) = 0;
      uint64_t v12 = *(void *)(v2 + 192);
      unint64_t v13 = *(void *)(v2 + 200);
      uint64_t v10 = *(void *)(v2 + 208);
      int v14 = *(unsigned __int16 *)(v2 + 216) | (*(unsigned __int8 *)(v2 + 218) << 16);
    }
    else
    {
      int v14 = 0;
      uint64_t v12 = 0;
      unint64_t v13 = 0xC000000000000000;
    }
    uint64_t v15 = *(void *)(v2 + 184);
    int v16 = *(_DWORD *)(v2 + 220);
    long long v17 = *(_OWORD *)(v2 + 168);
    *(_OWORD *)a1 = *(_OWORD *)(v2 + 152);
    *(_OWORD *)(a1 + 16) = v17;
    *(void *)(a1 + 32) = v15;
    *(void *)(a1 + 40) = v12;
    *(void *)(a1 + 48) = v13;
    *(void *)(a1 + 56) = v10;
    *(_WORD *)(a1 + 64) = v14;
    *(unsigned char *)(a1 + 66) = BYTE2(v14);
    *(_DWORD *)(a1 + 68) = v16;
    outlined copy of DisplayList.Item.Value(v12, v13);
    if (one-time initialization token for normal != -1) {
      swift_once();
    }
    uint64_t v18 = static GraphicsBlendMode.normal;
    char v19 = byte_26B0EB4A0;
    uint64_t v20 = *(void *)(v2 + 232);
    char v21 = *(unsigned char *)(v2 + 240);
    *(void *)(v2 + 232) = static GraphicsBlendMode.normal;
    *(unsigned char *)(v2 + 240) = v19;
    outlined copy of GraphicsBlendMode(v18, v19);
    outlined consume of GraphicsBlendMode(v20, v21);
    uint64_t result = outlined consume of DisplayList.Item.Value(v12, v13);
    *(_DWORD *)(v2 + 244) = 1065353216;
    *(unsigned char *)(v2 + 248) = 0;
    *(_OWORD *)(v2 + 192) = xmmword_2461B9DE0;
    *(void *)(v2 + 208) = 0;
    *(unsigned char *)(v2 + 218) = 0;
    *(_WORD *)(v2 + 216) = 0;
    *(_OWORD *)(v2 + 152) = *(_OWORD *)(v2 + 104);
    *(_OWORD *)(v2 + 168) = *(_OWORD *)(v2 + 120);
  }
  else
  {
    LOBYTE(v37) = *(unsigned char *)(v1 + 224);
    DisplayList.Item.canonicalize(options:)((char *)&v37);
    if (*(void *)(v1 + 136))
    {
      int v23 = *(_DWORD *)(v1 + 144);
      uint64_t v37 = *(void *)(v1 + 136);
      int v38 = v23;
      char v39 = 17;
      _ShapeStyle_RenderedShape.addEffect(_:)((uint64_t)&v37);
      swift_release();
      *(void *)(v1 + 136) = 0;
      *(_DWORD *)(v1 + 144) = 0;
    }
    char v24 = *(unsigned char *)(v1 + 248);
    if (v24)
    {
      LOWORD(v37) = *(_WORD *)(v1 + 100);
      DisplayList.Item.addDrawingGroup(contentSeed:)((unsigned __int16 *)&v37);
      *(unsigned char *)(v1 + 248) = v24 & 0xFE;
    }
    uint64_t v25 = *(void *)(v1 + 232);
    int v26 = *(unsigned __int8 *)(v1 + 240);
    if ((v26 & 1) != 0 || *(void *)(v1 + 232))
    {
      uint64_t v37 = *(void *)(v1 + 232);
      int v38 = v26;
      char v39 = 5;
      _ShapeStyle_RenderedShape.addEffect(_:)((uint64_t)&v37);
    }
    if (v4 != 1.0)
    {
      uint64_t v37 = LODWORD(v4);
      int v38 = 0;
      char v39 = 4;
      _ShapeStyle_RenderedShape.addEffect(_:)((uint64_t)&v37);
    }
    uint64_t v27 = *(void *)(v1 + 184);
    uint64_t v28 = *(void *)(v1 + 192);
    unint64_t v29 = *(void *)(v2 + 200);
    uint64_t v30 = *(void *)(v2 + 208);
    char v31 = *(unsigned char *)(v2 + 218);
    __int16 v32 = *(_WORD *)(v2 + 216);
    int v33 = *(_DWORD *)(v2 + 220);
    long long v34 = *(_OWORD *)(v2 + 168);
    *(_OWORD *)a1 = *(_OWORD *)(v2 + 152);
    *(_OWORD *)(a1 + 16) = v34;
    *(void *)(a1 + 32) = v27;
    *(void *)(a1 + 40) = v28;
    *(void *)(a1 + 48) = v29;
    *(void *)(a1 + 56) = v30;
    *(unsigned char *)(a1 + 66) = v31;
    *(_WORD *)(a1 + 64) = v32;
    *(_DWORD *)(a1 + 68) = v33;
    outlined copy of DisplayList.Item.Value(v28, v29);
    if (one-time initialization token for normal != -1) {
      swift_once();
    }
    uint64_t v35 = static GraphicsBlendMode.normal;
    char v36 = byte_26B0EB4A0;
    *(void *)(v2 + 232) = static GraphicsBlendMode.normal;
    *(unsigned char *)(v2 + 240) = v36;
    outlined copy of GraphicsBlendMode(v35, v36);
    outlined consume of GraphicsBlendMode(v25, v26);
    uint64_t result = outlined consume of DisplayList.Item.Value(v28, v29);
    *(_DWORD *)(v2 + 244) = 1065353216;
    *(unsigned char *)(v2 + 248) = 0;
    *(_OWORD *)(v2 + 192) = xmmword_2461B9DE0;
    *(void *)(v2 + 208) = 0;
    *(unsigned char *)(v2 + 218) = 0;
    *(_WORD *)(v2 + 216) = 0;
    *(CGFloat *)(v2 + 152) = v5;
    *(CGFloat *)(v2 + 160) = v6;
    *(CGFloat *)(v2 + 168) = v7;
    *(CGFloat *)(v2 + 176) = v8;
  }
  return result;
}

void *outlined copy of _ShapeStyle_RenderedShape.Shape(void *result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int a13)
{
  if (((a13 >> 21) & 7) <= 3)
  {
    switch(((unint64_t)a13 >> 21) & 7)
    {
      case 1uLL:
        swift_retain();
        uint64_t result = (void *)swift_retain();
        break;
      case 2uLL:
        uint64_t result = outlined copy of GraphicsImage.Contents?(result, a2);
        break;
      case 3uLL:
        uint64_t result = (void *)outlined copy of DisplayList.Item.Value(a6, a7);
        break;
      default:
        uint64_t result = (void *)outlined copy of Path.Storage((uint64_t)result, a2, a3, a4, a5);
        break;
    }
  }
  return result;
}

uint64_t _ShapeStyle_RenderedShape.addEffect(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)a1;
  int v4 = *(_DWORD *)(a1 + 8);
  uint64_t v20 = *(void *)a1;
  uint64_t v21 = *(unsigned __int8 *)(a1 + 12);
  uint64_t v5 = *(void *)(v2 + 192);
  unint64_t v6 = *(void *)(v2 + 200);
  uint64_t v7 = *(void *)(v2 + 208);
  int v8 = *(unsigned __int16 *)(v2 + 216) | (*(unsigned __int8 *)(v2 + 218) << 16);
  BOOL v11 = v6 >> 62 == 3 && (v8 & 0xFFFFFF) == 0 && v6 == 0xC000000000000000 && (v7 | v5) == 0;
  uint64_t v19 = *(unsigned int *)(a1 + 8);
  if (v11)
  {
    outlined copy of DisplayList.Item.Value(0, 0xC000000000000000);
    outlined copy of DisplayList.Effect(v3, v4, v21);
    char v17 = 0;
    __int16 v16 = 0;
    uint64_t v15 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v12 = *(void *)(v2 + 168);
    uint64_t v13 = *(void *)(v2 + 176);
    uint64_t v14 = *(void *)(v2 + 184);
    _ss23_ContiguousArrayStorageCy7SwiftUI11DisplayListV4ItemVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
    uint64_t v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_2461B9DC0;
    *(void *)(v15 + 32) = 0;
    *(void *)(v15 + 40) = 0;
    *(void *)(v15 + 48) = v12;
    *(void *)(v15 + 56) = v13;
    *(void *)(v15 + 64) = v14;
    *(void *)(v15 + 72) = v5;
    *(void *)(v15 + 80) = v6;
    *(void *)(v15 + 88) = v7;
    *(unsigned char *)(v15 + 98) = BYTE2(v8);
    *(_WORD *)(v15 + 96) = v8;
    *(_DWORD *)(v15 + 100) = 0;
    outlined copy of DisplayList.Item.Value(v5, v6);
    outlined copy of DisplayList.Effect(v3, v4, v21);
    DisplayList.Item.features.getter(&v26);
    __int16 v16 = v26;
    v22[0] = 0;
    v22[1] = 0;
    v22[2] = v12;
    v22[3] = v13;
    v22[4] = v14;
    v22[5] = v5;
    v22[6] = v6;
    v22[7] = v7;
    char v24 = BYTE2(v8);
    __int16 v23 = v8;
    int v25 = 0;
    DisplayList.Item.properties.getter(&v26);
    char v17 = v26;
  }
  *(void *)(v2 + 192) = v20;
  *(void *)(v2 + 200) = v19 | (v21 << 32) | 0x4000000000000000;
  *(void *)(v2 + 208) = v15;
  *(unsigned char *)(v2 + 218) = v17;
  *(_WORD *)(v2 + 216) = v16;
  LOBYTE(v22[0]) = *(unsigned char *)(v2 + 224);
  DisplayList.Item.canonicalize(options:)((char *)v22);

  return outlined consume of DisplayList.Item.Value(v5, v6);
}

uint64_t _ShapeStyle_InterpolatorGroup.addLayer(id:style:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v85 = *(void *)a1;
  uint64_t v88 = *(void *)(a1 + 8);
  char v77 = *(unsigned char *)(a1 + 16);
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v78 = *(void **)a2;
  char v79 = *(void **)(a2 + 16);
  uint64_t v73 = *(_OWORD **)(a2 + 24);
  uint64_t v74 = *(void *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 48);
  uint64_t v75 = *(void *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 56);
  uint64_t v7 = *(void *)(a2 + 64);
  uint64_t v9 = *(void *)(a2 + 72);
  uint64_t v10 = *(void *)(a2 + 88);
  uint64_t v83 = *(void *)(a2 + 96);
  uint64_t v11 = *(void *)(a2 + 104);
  uint64_t v12 = *(int *)(v3 + 60);
  uint64_t v80 = *(void *)(a2 + 80);
  uint64_t v81 = (uint64_t *)(v3 + 24);
  swift_beginAccess();
  uint64_t v13 = *(void *)(v3 + 24);
  uint64_t v14 = *(void *)(v13 + 16);
  ++*(_DWORD *)(v3 + 60);
  uint64_t v71 = v3;
  uint64_t v72 = a3;
  uint64_t v76 = v10;
  uint64_t v69 = v7;
  uint64_t v70 = v9;
  uint64_t v68 = v8;
  if (v14 <= v12)
  {
    int v66 = *(_DWORD *)(v3 + 56);
    *(_DWORD *)(v3 + 56) = v66 + 1;
    uint64_t v65 = v10;
    uint64_t v64 = v7;
    uint64_t v67 = v5;
    a3 = v73;
    uint64_t v7 = v74;
    uint64_t v15 = v75;
    outlined copy of _ShapeStyle_Pack.Style?(v78, v5, v79, v73, v74, v75, v6, v8, v64, v9, v80, v65, v83, v11);
    LOBYTE(v5) = v77;
    outlined copy of _ShapeStyle_LayerID(v85, v88, v77);
    uint64_t v12 = v6;
    uint64_t v16 = v11;
    if (one-time initialization token for infinity == -1)
    {
LABEL_11:
      uint64_t v37 = static Time.infinity;
      swift_beginAccess();
      int v38 = (void *)*v81;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *uint64_t v81 = (uint64_t)v38;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        int v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v38[2] + 1, 1, v38);
        *uint64_t v81 = (uint64_t)v38;
      }
      unint64_t v41 = v38[2];
      unint64_t v40 = v38[3];
      uint64_t v43 = v85;
      uint64_t v42 = v88;
      if (v41 >= v40 >> 1)
      {
        uint64_t v63 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v40 > 1), v41 + 1, 1, v38);
        uint64_t v43 = v85;
        uint64_t v42 = v88;
        int v38 = v63;
        *uint64_t v81 = (uint64_t)v63;
      }
      char v95 = 1;
      v38[2] = v41 + 1;
      uint64_t v44 = &v38[28 * v41];
      v44[4] = v43;
      v44[5] = v42;
      *((unsigned char *)v44 + 48) = v5;
      char v45 = v97;
      *(_WORD *)((char *)v44 + 49) = v96;
      *((unsigned char *)v44 + 51) = v45;
      *((_DWORD *)v44 + 13) = v66;
      v44[7] = v78;
      v44[8] = v67;
      v44[9] = v79;
      v44[10] = a3;
      v44[11] = v7;
      v44[12] = v15;
      v44[13] = v12;
      v44[14] = v8;
      v44[15] = v69;
      v44[16] = v70;
      v44[17] = v80;
      v44[18] = v76;
      v44[19] = v83;
      v44[20] = v16;
      uint64_t v46 = MEMORY[0x263F8EE78];
      v44[21] = MEMORY[0x263F8EE78];
      *((_WORD *)v44 + 88) = 0;
      *((unsigned char *)v44 + 178) = 0;
      char v47 = BYTE4(v91[0]);
      *(_DWORD *)((char *)v44 + 179) = v91[0];
      *((unsigned char *)v44 + 183) = v47;
      v44[23] = 0;
      v44[24] = 0;
      v44[25] = 0;
      v44[26] = v37;
      *((_DWORD *)v44 + 54) = 0;
      *((unsigned char *)v44 + 220) = v95;
      __int16 v48 = v93;
      *((unsigned char *)v44 + 223) = v94;
      *(_WORD *)((char *)v44 + 221) = v48;
      v44[29] = 0;
      v44[30] = 0;
      v44[28] = v46;
      *(void *)((char *)v44 + 245) = 0;
      swift_endAccess();
      *(void *)&long long v98 = v71;
      DWORD2(v98) = v66;
      _s7SwiftUI29_ShapeStyle_InterpolatorGroupC14AddLayerResult33_3890C65F12EA82A4BC5FBD33046B67FALLOWOi_((uint64_t)&v98);
      outlined init with take of _ShapeStyle_InterpolatorGroup.AddLayerResult(&v98, v72);
      return swift_retain();
    }
LABEL_22:
    swift_once();
    goto LABEL_11;
  }
  uint64_t v15 = v88;
  uint64_t v16 = v83;
  int v66 = v6;
  uint64_t v67 = v11;
  if ((v12 & 0x80000000) != 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (*(void *)(v13 + 16) <= v12)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v17 = 28 * v12;
  uint64_t v18 = v13 + 224 * v12;
  LODWORD(v19) = *(_DWORD *)(v18 + 52);
  char v20 = *(unsigned char *)(v18 + 48);
  long long v98 = *(_OWORD *)(v18 + 32);
  LOBYTE(v99) = v20;
  v91[0] = v85;
  v91[1] = v88;
  char v92 = v77;
  swift_retain();
  if (specialized static _ShapeStyle_LayerID.== infix(_:_:)((uint64_t)&v98, (uint64_t)v91))
  {
    uint64_t v89 = v12;
    int v86 = (int)v19;
    swift_beginAccess();
    uint64_t v19 = (void *)*v81;
    uint64_t v12 = v9;
    uint64_t v21 = (void *)v68;
    outlined copy of _ShapeStyle_Pack.Style?(v78, v5, v79, v73, v74, v75, v6, v68, v69, v9, v80, v76, v83, v11);
    char v22 = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v81 = (uint64_t)v19;
    if ((v22 & 1) == 0)
    {
      uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew()(v19);
      *uint64_t v81 = (uint64_t)v19;
    }
    if (v19[2] <= v89)
    {
      __break(1u);
    }
    else
    {
      __int16 v23 = &v19[v17];
      uint64_t v24 = v19[v17 + 7];
      uint64_t v25 = v19[v17 + 8];
      uint64_t v26 = v19[v17 + 9];
      uint64_t v27 = v19[v17 + 10];
      uint64_t v28 = v19[v17 + 11];
      uint64_t v29 = v19[v17 + 12];
      uint64_t v30 = v19[v17 + 13];
      uint64_t v31 = v19[v17 + 14];
      long long v32 = *(_OWORD *)&v19[v17 + 15];
      long long v33 = *(_OWORD *)&v19[v17 + 17];
      uint64_t v34 = v19[v17 + 19];
      uint64_t v35 = v19[v17 + 20];
      v23[7] = v78;
      v23[8] = v5;
      v23[9] = v79;
      v23[10] = v73;
      v23[11] = v74;
      v23[12] = v75;
      v23[13] = v6;
      v23[14] = v68;
      v23[15] = v69;
      v23[16] = v9;
      v23[17] = v80;
      v23[18] = v76;
      v23[19] = v83;
      v23[20] = v11;
      outlined consume of _ShapeStyle_Pack.Style?(v24, v25, v26, v27, v28, v29, v30, v31, v32, *((uint64_t *)&v32 + 1), v33, *((uint64_t *)&v33 + 1), v34, v35);
      if (*(void *)(*v81 + 16) > v89)
      {
        *(unsigned char *)(*v81 + v17 * 8 + 252) = 0;
        swift_endAccess();
        *(void *)&long long v98 = v71;
        DWORD2(v98) = v86;
        _s7SwiftUI29_ShapeStyle_InterpolatorGroupC14AddLayerResult33_3890C65F12EA82A4BC5FBD33046B67FALLOWOi_((uint64_t)&v98);
        return (uint64_t)outlined init with take of _ShapeStyle_InterpolatorGroup.AddLayerResult(&v98, v72);
      }
    }
    __break(1u);
    goto LABEL_25;
  }
  swift_beginAccess();
  uint64_t v21 = (void *)*v81;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v81 = (uint64_t)v21;
  if ((result & 1) == 0)
  {
LABEL_25:
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v21);
    uint64_t v21 = (void *)result;
    *uint64_t v81 = result;
  }
  if (v21[2] <= v12)
  {
    __break(1u);
  }
  else
  {
    BYTE4(v21[v17 + 31]) = 1;
    uint64_t v49 = *v81;
    uint64_t result = swift_endAccess();
    if (*(void *)(v49 + 16) > v12)
    {
      unsigned __int8 v50 = (void *)(v49 + v17 * 8);
      unsigned int v51 = *(void **)(v49 + v17 * 8 + 56);
      long long v87 = *(void **)(v49 + v17 * 8 + 72);
      uint64_t v90 = *(void *)(v49 + v17 * 8 + 64);
      uint64_t v52 = *(void *)(v49 + v17 * 8 + 96);
      uint64_t v82 = *(void *)(v49 + v17 * 8 + 88);
      long long v84 = *(void **)(v49 + v17 * 8 + 80);
      uint64_t v53 = *(void *)(v49 + v17 * 8 + 104);
      uint64_t v54 = v50[14];
      uint64_t v56 = v50[15];
      uint64_t v55 = v50[16];
      int v57 = (int)v19;
      uint64_t v58 = v50[17];
      uint64_t v59 = v50[18];
      uint64_t v60 = v50[19];
      uint64_t v61 = v50[20];
      *(void *)&long long v98 = v51;
      *((void *)&v98 + 1) = v90;
      uint64_t v62 = v51;
      long long v99 = v87;
      long long v100 = v84;
      uint64_t v101 = v82;
      uint64_t v102 = v52;
      uint64_t v103 = v53;
      uint64_t v104 = v54;
      uint64_t v105 = v56;
      uint64_t v106 = v55;
      uint64_t v107 = v58;
      uint64_t v108 = v59;
      uint64_t v109 = v60;
      uint64_t v110 = v61;
      uint64_t v111 = v71;
      int v112 = v57;
      _s7SwiftUI29_ShapeStyle_InterpolatorGroupC14AddLayerResult33_3890C65F12EA82A4BC5FBD33046B67FALLOWOi0_((uint64_t)&v98);
      outlined init with take of _ShapeStyle_InterpolatorGroup.AddLayerResult(&v98, v72);
      return (uint64_t)outlined copy of _ShapeStyle_Pack.Style?(v62, v90, v87, v84, v82, v52, v53, v54, v56, v55, v58, v59, v60, v61);
    }
  }
  __break(1u);
  return result;
}

uint64_t _ShapeStyle_RenderedLayers.beginLayer(id:style:shape:)(uint64_t result, long long *a2, uint64_t a3)
{
  if (*v3)
  {
    long long v26 = *(_OWORD *)result;
    char v25 = *(unsigned char *)(result + 16);
    long long v23 = a2[1];
    long long v24 = *a2;
    long long v21 = a2[3];
    long long v22 = a2[2];
    long long v19 = a2[5];
    long long v20 = a2[4];
    long long v18 = a2[6];
    swift_retain();
    while (1)
    {
      char v55 = v25;
      long long v47 = v24;
      long long v48 = v23;
      long long v49 = v22;
      long long v50 = v21;
      long long v51 = v20;
      long long v52 = v19;
      long long v53 = v18;
      long long v54 = v26;
      _ShapeStyle_InterpolatorGroup.addLayer(id:style:)((uint64_t)&v54, (uint64_t)&v47, v56);
      outlined init with take of _ShapeStyle_InterpolatorGroup.AddLayerResult(v56, v57);
      outlined init with take of _ShapeStyle_InterpolatorGroup.AddLayerResult(v57, v58);
      int v5 = _s7SwiftUI29_ShapeStyle_InterpolatorGroupC14AddLayerResult33_3890C65F12EA82A4BC5FBD33046B67FALLOWOg((uint64_t)v58);
      uint64_t v6 = _s7SwiftUI29_ShapeStyle_InterpolatorGroupC14AddLayerResult33_3890C65F12EA82A4BC5FBD33046B67FALLOWOj0_((uint64_t)v58);
      if (v5 != 1) {
        break;
      }
      uint64_t v45 = *(void *)(v6 + 8);
      uint64_t v46 = *(void *)v6;
      uint64_t v43 = *(void *)(v6 + 24);
      uint64_t v44 = *(void *)(v6 + 16);
      uint64_t v7 = *(void *)(v6 + 40);
      uint64_t v41 = *(void *)(v6 + 48);
      uint64_t v42 = *(void *)(v6 + 32);
      uint64_t v8 = *(void *)(v6 + 64);
      uint64_t v9 = *(void *)(v6 + 72);
      uint64_t v10 = *(void *)(v6 + 80);
      uint64_t v11 = *(void *)(v6 + 88);
      uint64_t v12 = *(void *)(v6 + 96);
      uint64_t v14 = *(void *)(v6 + 104);
      uint64_t v13 = *(void *)(v6 + 112);
      int v15 = *(_DWORD *)(v6 + 120);
      char v39 = *(void **)a3;
      uint64_t v40 = *(void *)(v6 + 56);
      uint64_t v37 = *(void *)(a3 + 16);
      uint64_t v38 = *(void *)(a3 + 8);
      uint64_t v35 = *(void *)(a3 + 32);
      uint64_t v36 = *(void *)(a3 + 24);
      uint64_t v33 = *(void *)(a3 + 48);
      uint64_t v34 = *(void *)(a3 + 40);
      uint64_t v31 = *(void *)(a3 + 64);
      uint64_t v32 = *(void *)(a3 + 56);
      uint64_t v29 = *(void *)(a3 + 80);
      uint64_t v30 = *(void *)(a3 + 72);
      uint64_t v28 = *(void *)(a3 + 88);
      int v27 = *(_DWORD *)(a3 + 96);
      *(_OWORD *)(a3 + 64) = 0u;
      *(_OWORD *)(a3 + 80) = 0u;
      *(_OWORD *)(a3 + 32) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_DWORD *)(a3 + 96) = 0x800000;
      *(_DWORD *)(a3 + 144) = v15;
      *(void *)(a3 + 136) = v13;
      swift_retain_n();
      swift_release();
      if (v14)
      {
        *(void *)&long long v47 = v46;
        *((void *)&v47 + 1) = v45;
        *(void *)&long long v48 = v44;
        *((void *)&v48 + 1) = v43;
        *(void *)&long long v49 = v42;
        *((void *)&v49 + 1) = v7;
        *(void *)&long long v50 = v41;
        *((void *)&v50 + 1) = v40;
        *(void *)&long long v51 = v8;
        *((void *)&v51 + 1) = v9;
        LOBYTE(v52) = v10;
        DWORD1(v52) = HIDWORD(v10);
        *((void *)&v52 + 1) = v11;
        LOBYTE(v53) = v12;
        *((void *)&v53 + 1) = v14;
        _ShapeStyle_RenderedShape.render(style:)((uint64_t)&v47);
      }
      _ShapeStyle_RenderedLayers.endLayer(shape:)(a3);
      outlined consume of _ShapeStyle_RenderedShape.Shape(*(void **)a3, *(void *)(a3 + 8), *(void *)(a3 + 16), *(void *)(a3 + 24), *(void *)(a3 + 32), *(void *)(a3 + 40), *(void *)(a3 + 48), *(void *)(a3 + 56), *(void *)(a3 + 64), *(void *)(a3 + 72), *(void *)(a3 + 80), *(void *)(a3 + 88), *(_DWORD *)(a3 + 96));
      swift_release_n();
      outlined consume of _ShapeStyle_Pack.Style?(v46, v45, v44, v43, v42, v7, v41, v40, v8, v9, v10, v11, v12, v14);
      *(void *)a3 = v39;
      *(void *)(a3 + 8) = v38;
      *(void *)(a3 + 16) = v37;
      *(void *)(a3 + 24) = v36;
      *(void *)(a3 + 32) = v35;
      *(void *)(a3 + 40) = v34;
      *(void *)(a3 + 48) = v33;
      *(void *)(a3 + 56) = v32;
      *(void *)(a3 + 64) = v31;
      *(void *)(a3 + 72) = v30;
      *(void *)(a3 + 80) = v29;
      *(void *)(a3 + 88) = v28;
      *(_DWORD *)(a3 + 96) = v27;
    }
    uint64_t v16 = *(void *)v6;
    int v17 = *(_DWORD *)(v6 + 8);
    swift_release();
    uint64_t result = swift_release();
    *(void *)(a3 + 136) = v16;
    *(_DWORD *)(a3 + 144) = v17;
  }
  return result;
}

_OWORD *outlined init with take of _ShapeStyle_InterpolatorGroup.AddLayerResult(long long *a1, _OWORD *a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  long long v4 = a1[3];
  a2[2] = a1[2];
  a2[3] = v4;
  *a2 = v2;
  a2[1] = v3;
  long long v5 = a1[4];
  long long v6 = a1[5];
  long long v7 = a1[6];
  *(_OWORD *)((char *)a2 + 108) = *(long long *)((char *)a1 + 108);
  a2[5] = v6;
  a2[6] = v7;
  a2[4] = v5;
  return a2;
}

void *outlined copy of _ShapeStyle_Pack.Style?(void *result, unsigned __int8 a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, unsigned __int8 a13, uint64_t a14)
{
  if (a14)
  {
    outlined copy of _ShapeStyle_Pack.Fill(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
    outlined copy of GraphicsBlendMode?(a12, a13);
    return (void *)swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t _s7SwiftUI29_ShapeStyle_InterpolatorGroupC14AddLayerResult33_3890C65F12EA82A4BC5FBD33046B67FALLOWOj0_(uint64_t result)
{
  *(void *)(result + 112) &= ~0x8000000000000000;
  return result;
}

uint64_t _s7SwiftUI29_ShapeStyle_InterpolatorGroupC14AddLayerResult33_3890C65F12EA82A4BC5FBD33046B67FALLOWOg(uint64_t a1)
{
  return *(void *)(a1 + 112) >> 63;
}

uint64_t _s7SwiftUI29_ShapeStyle_InterpolatorGroupC14AddLayerResult33_3890C65F12EA82A4BC5FBD33046B67FALLOWOi_(uint64_t result)
{
  *(void *)(result + 112) &= 0xFFFFFFFFFFFFFF8uLL;
  return result;
}

unint64_t Text.Style.TextStyleColor.resolve(in:with:properties:includeDefaultAttributes:)(uint64_t *a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v7 = *a2;
  uint64_t v8 = *v4;
  unint64_t v9 = (unint64_t)*v4 >> 62;
  if (!v9) {
    goto LABEL_17;
  }
  if (v9 != 1)
  {
    if ((a4 & 1) == 0) {
      return 0;
    }
    if ((v7 & 2) != 0) {
      return 0xBF800000BF800000;
    }
    if (v8 == 0x8000000000000000)
    {
      uint64_t v44 = *a1;
      uint64_t v45 = v6;
      swift_retain();
      swift_retain();
      uint64_t v10 = EnvironmentValues.foregroundStyle.getter();
      if (!v10)
      {
LABEL_9:
        swift_release();
        swift_release();
LABEL_14:
        if (one-time initialization token for primary != -1) {
          swift_once();
        }
        uint64_t v8 = (uint64_t)static Color.primary;
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v44 = *a1;
      uint64_t v45 = v6;
      swift_retain();
      swift_retain();
      uint64_t v10 = EnvironmentValues.defaultForegroundStyle.getter();
      if (!v10) {
        goto LABEL_9;
      }
    }
    uint64_t v8 = specialized ShapeStyle.fallbackColor(in:level:)(v5, v6, 0, v10);
    swift_release();
    swift_release();
    swift_release();
    if (v8) {
      goto LABEL_18;
    }
    goto LABEL_14;
  }
  if ((v7 & 0x20) != 0) {
    return 0xBF800000BF800000;
  }
  v8 &= 0x3FFFFFFFFFFFFFFFuLL;
LABEL_17:
  swift_retain();
LABEL_18:
  if ((v7 & 0x20) != 0)
  {
    v59[0] = 0;
    v59[1] = 0;
    v59[2] = 1;
    char v60 = 1;
    uint64_t v61 = 0;
    char v62 = 5;
    uint64_t v63 = v5;
    uint64_t v64 = v6;
    long long v65 = 0u;
    long long v66 = 0u;
    uint64_t v67 = 0;
    char v68 = 1;
    __int16 v69 = 1;
    uint64_t v16 = *(void (**)(void *))(*(void *)v8 + 80);
    swift_retain();
    swift_retain();
    v16(v59);
    char v36 = v62;
    uint64_t v35 = v61;
    if (v62 == 1) {
      swift_bridgeObjectRetain();
    }
    unsigned __int8 v43 = 0;
    _ShapeStyle_Pack.subscript.getter(&v43, 0, (uint64_t)&v44);
    swift_bridgeObjectRelease();
    unsigned __int8 v33 = v45;
    uint64_t v34 = v44;
    uint64_t v17 = v46;
    unsigned __int8 v18 = v47;
    uint64_t v19 = v48;
    uint64_t v31 = v50;
    uint64_t v32 = v49;
    uint64_t v30 = v51;
    uint64_t v20 = v52;
    uint64_t v21 = v53;
    char v22 = v54;
    uint64_t v23 = v56;
    unsigned __int8 v24 = v57;
    v37[0] = v44;
    v37[1] = v45;
    v37[2] = v46;
    v37[3] = v47;
    v37[4] = v48;
    v37[5] = v49;
    v37[6] = v50;
    v37[7] = v51;
    v37[8] = v52;
    v37[9] = v53;
    char v38 = v54;
    int v39 = v55;
    uint64_t v40 = v56;
    unsigned __int8 v41 = v57;
    uint64_t v42 = v58;
    Text.ResolvedProperties.addCustomStyle(_:)((uint64_t)v37);
    unsigned int v26 = v25;
    unsigned int v28 = v27;
    swift_release();
    outlined consume of _ShapeStyle_Pack.Fill(v34, v33, v17, v18, v19, v32, v31, v30, v20, v21, v22);
    outlined consume of GraphicsBlendMode?(v23, v24);
    swift_bridgeObjectRelease();
    unint64_t v11 = v26 | ((unint64_t)v28 << 32);
    outlined consume of _ShapeStyle_Shape.Result(v35, v36);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_retain();
    uint64_t v12 = specialized ShapeStyle.fallbackColor(in:level:)(v5, v6, 0, v8);
    swift_release();
    if (!v12)
    {
      if (one-time initialization token for foreground != -1) {
        swift_once();
      }
      uint64_t v12 = static Color.foreground;
      swift_retain();
    }
    uint64_t v44 = v5;
    uint64_t v45 = v6;
    float v13 = (*(float (**)(uint64_t *))(*(void *)v12 + 104))(&v44);
    unsigned int v15 = v14;
    swift_release();
    swift_release();
    return LODWORD(v13) | ((unint64_t)v15 << 32);
  }
  return v11;
}

uint64_t _ShapeStyle_Pack.subscript.getter@<X0>(unsigned __int8 *a1@<X0>, unsigned __int8 a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(*(void *)v3 + 16);
  if (v5)
  {
    uint64_t v6 = 0;
    unsigned int v7 = *a1;
    uint64_t v8 = (unsigned __int8 *)(*(void *)v3 + 33);
    while (1)
    {
      unsigned int v9 = *(v8 - 1);
      unsigned int v10 = *v8;
      if (v7 == v9 && v10 == a2)
      {
        long long v13 = *(_OWORD *)(v8 + 63);
        uint64_t v14 = *(void *)(v8 + 111);
        long long v15 = *(_OWORD *)(v8 + 95);
        *(_OWORD *)&v45[80] = *(_OWORD *)(v8 + 79);
        long long v46 = v15;
        long long v16 = *(_OWORD *)(v8 + 31);
        long long v17 = *(_OWORD *)(v8 + 47);
        long long v18 = *(_OWORD *)(v8 + 15);
        *(_OWORD *)uint64_t v45 = *(_OWORD *)(v8 - 1);
        *(_OWORD *)&v45[16] = v18;
        *(_OWORD *)&v45[32] = v16;
        *(_OWORD *)&v45[48] = v17;
        uint64_t v47 = v14;
        *(_OWORD *)&v45[64] = v13;
LABEL_18:
        char v26 = v45[88];
        int v27 = *(_DWORD *)&v45[92];
        uint64_t v28 = v46;
        char v29 = BYTE8(v46);
        long long v30 = *(_OWORD *)&v45[24];
        *(_OWORD *)a3 = *(_OWORD *)&v45[8];
        *(_OWORD *)(a3 + 16) = v30;
        long long v31 = *(_OWORD *)&v45[56];
        *(_OWORD *)(a3 + 32) = *(_OWORD *)&v45[40];
        *(_OWORD *)(a3 + 48) = v31;
        *(_OWORD *)(a3 + 64) = *(_OWORD *)&v45[72];
        *(unsigned char *)(a3 + 80) = v26;
        *(_DWORD *)(a3 + 84) = v27;
        *(void *)(a3 + 88) = v28;
        *(unsigned char *)(a3 + 96) = v29;
        *(void *)(a3 + 104) = v14;
        return outlined retain of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)v45);
      }
      BOOL v12 = v10 > a2 && v7 == v9;
      if (v7 < v9 || v12) {
        break;
      }
      ++v6;
      v8 += 120;
      if (v5 == v6) {
        goto LABEL_19;
      }
    }
    if (v6)
    {
      int v20 = *(v8 - 121);
      uint64_t v19 = v8 - 121;
      if (v20 == v7)
      {
        uint64_t v14 = *((void *)v19 + 14);
        long long v21 = *((_OWORD *)v19 + 6);
        long long v22 = *((_OWORD *)v19 + 4);
        *(_OWORD *)&v45[80] = *((_OWORD *)v19 + 5);
        long long v46 = v21;
        long long v23 = *((_OWORD *)v19 + 2);
        long long v24 = *((_OWORD *)v19 + 3);
        long long v25 = *((_OWORD *)v19 + 1);
        *(_OWORD *)uint64_t v45 = *(_OWORD *)v19;
        *(_OWORD *)&v45[16] = v25;
        *(_OWORD *)&v45[32] = v23;
        *(_OWORD *)&v45[48] = v24;
        uint64_t v47 = v14;
        *(_OWORD *)&v45[64] = v22;
        goto LABEL_18;
      }
    }
  }
LABEL_19:
  if (one-time initialization token for clear != -1) {
    swift_once();
  }
  long long v33 = static _ShapeStyle_Pack.Style.clear;
  long long v34 = xmmword_268EEF140;
  uint64_t v35 = qword_268EEF150;
  uint64_t v36 = unk_268EEF158;
  long long v37 = xmmword_268EEF160;
  uint64_t v38 = qword_268EEF170;
  uint64_t v39 = unk_268EEF178;
  char v40 = byte_268EEF180;
  int v41 = dword_268EEF184;
  uint64_t v42 = qword_268EEF188;
  uint64_t v43 = qword_268EEF198;
  *(_OWORD *)a3 = static _ShapeStyle_Pack.Style.clear;
  *(_OWORD *)(a3 + 16) = v34;
  *(void *)(a3 + 32) = v35;
  *(void *)(a3 + 40) = v36;
  *(_OWORD *)(a3 + 48) = v37;
  *(void *)(a3 + 64) = v38;
  *(void *)(a3 + 72) = v39;
  *(unsigned char *)(a3 + 80) = v40;
  *(_DWORD *)(a3 + 84) = v41;
  *(void *)(a3 + 88) = v42;
  unsigned __int8 v44 = byte_268EEF190;
  *(unsigned char *)(a3 + 96) = byte_268EEF190;
  *(void *)(a3 + 104) = v43;
  outlined copy of _ShapeStyle_Pack.Fill((id)v33, BYTE8(v33), (void *)v34, *((void **)&v34 + 1), v35, v36, v37, *((uint64_t *)&v37 + 1), v38, v39, v40);
  outlined copy of GraphicsBlendMode?(v42, v44);

  return swift_bridgeObjectRetain();
}

uint64_t _ShapeStyle_RenderedLayers.commit(shape:options:)@<X0>(unint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  void (*v99)(void *__return_ptr, uint64_t, void *);
  void (*v100)(void *__return_ptr, uint64_t, void *);
  uint64_t v101;
  uint64_t v102;
  __int16 v103;
  id v104;
  void *v105;
  unsigned char v106[40];
  long long v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  int v112;
  uint64_t v113;
  unsigned __int8 v114;
  _OWORD *v115;
  long long v116;
  long long v117;
  void *v118;
  unint64_t v119;
  unint64_t v120;
  void **v121;
  __int16 v122;
  char v123;
  int v124;
  void v125[4];

  uint64_t v13 = a3;
  char v14 = *a2;
  unint64_t v15 = *v3;
  if (!*v3) {
    goto LABEL_14;
  }
  char v72 = *a2;
  long long v16 = (void **)(v15 + 24);
  int v17 = *(_DWORD *)(v15 + 60);
  uint64_t v18 = v17;
  swift_beginAccess();
  if (*(void *)(*(void *)(v15 + 24) + 16) <= v17) {
    goto LABEL_13;
  }
  unint64_t v74 = v15;
  uint64_t v75 = (void **)(v15 + 24);
  while (1)
  {
    ++*(_DWORD *)(v15 + 60);
    swift_beginAccess();
    uint64_t v19 = *(void **)(v15 + 24);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v15 + 24) = v19;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      break;
    }
    if (v17 < 0) {
      goto LABEL_12;
    }
LABEL_7:
    if (v19[2] <= v18)
    {
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      uint64_t v116 = 0u;
      uint64_t v117 = 0u;
      outlined destroy of Any?((uint64_t)&v116);
LABEL_72:
      outlined consume of DisplayList.Item.Value(a1, v15);
      swift_release();
      swift_release();
      outlined consume of DisplayList.Item.Value(a1, v15);
      __int16 v39 = 0;
LABEL_65:
      LOBYTE(v48) = (_BYTE)v105;
LABEL_66:
      *(void *)&uint64_t v116 = v8;
      *((void *)&v116 + 1) = v9;
      *(void *)&uint64_t v117 = v10;
      *((void *)&v117 + 1) = v11;
      uint64_t v118 = v6;
      uint64_t v119 = a1;
      uint64_t v120 = v15;
      unint64_t v121 = v16;
      v123 = v48;
      v122 = v4;
      unint64_t v124 = (int)v19;
      DisplayList.Item.properties.getter(v125);
      outlined consume of DisplayList.Item.Value(a1, v15);
      char v38 = v125[0];
LABEL_67:
      *(void *)a3 = v5;
      *(_WORD *)(a3 + 8) = v39;
      *(unsigned char *)(a3 + 10) = v38;
      outlined consume of DisplayList.Item.Value(a1, v15);
      char v40 = v76;
      uint64_t result = outlined consume of _ShapeStyle_RenderedLayers.Layers(v76[1], v76[2], v76[3], v76[4], v76[5], v76[6], v76[7], v76[8], v76[9]);
      goto LABEL_68;
    }
    uint64_t v21 = 28 * v18;
    BYTE4(v19[28 * v18 + 31]) = 1;
    uint64_t v19 = *v16;
    swift_endAccess();
    if (v19[2] <= v18) {
      goto LABEL_70;
    }
    long long v22 = &v19[v21];
    int v23 = HIDWORD(v19[v21 + 6]);
    long long v24 = (void *)v19[v21 + 7];
    uint64_t v80 = (void *)v22[9];
    uint64_t v81 = v22[8];
    uint64_t v105 = (void *)v22[10];
    uint64_t v25 = v22[13];
    uint64_t v78 = v22[12];
    uint64_t v79 = v22[11];
    uint64_t v77 = v22[14];
    unint64_t v26 = v15;
    uint64_t v27 = v22[15];
    uint64_t v28 = v22[16];
    uint64_t v4 = v22[17];
    uint64_t v29 = v22[18];
    uint64_t v95 = v29;
    uint64_t v30 = v22[19];
    unsigned int v7 = (_OWORD *)v22[20];
    uint64_t v93 = *(void *)(a1 + 8);
    char v94 = *(void **)a1;
    uint64_t v91 = *(void *)(a1 + 24);
    uint64_t v92 = *(void *)(a1 + 16);
    uint64_t v89 = *(void *)(a1 + 40);
    uint64_t v90 = *(void *)(a1 + 32);
    uint64_t v87 = *(void *)(a1 + 56);
    uint64_t v88 = *(void *)(a1 + 48);
    uint64_t v85 = *(void *)(a1 + 72);
    uint64_t v86 = *(void *)(a1 + 64);
    uint64_t v83 = *(void *)(a1 + 88);
    uint64_t v84 = *(void *)(a1 + 80);
    int v82 = *(_DWORD *)(a1 + 96);
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_DWORD *)(a1 + 96) = 0x800000;
    *(_DWORD *)(a1 + 144) = v23;
    *(void *)(a1 + 136) = v26;
    swift_retain_n();
    unsigned __int8 v71 = v30;
    unsigned __int8 v96 = v30;
    uint64_t v97 = v4;
    char v69 = v4;
    uint64_t v70 = v29;
    uint64_t v98 = v27;
    uint64_t v6 = v80;
    LOWORD(v4) = v81;
    uint64_t v5 = v79;
    outlined copy of _ShapeStyle_Pack.Style?(v24, v81, v80, v105, v79, v78, v25, v77, v27, v28, v69, v70, v71, (uint64_t)v7);
    swift_release();
    if (v7)
    {
      *(void *)uint64_t v106 = v24;
      *(void *)&v106[8] = v81;
      *(void *)&v106[16] = v80;
      *(void *)&v106[24] = v105;
      *(void *)&v106[32] = v79;
      *(void *)&uint64_t v107 = v78;
      *((void *)&v107 + 1) = v25;
      uint64_t v108 = v77;
      uint64_t v109 = v27;
      uint64_t v110 = v28;
      uint64_t v111 = v97;
      int v112 = HIDWORD(v97);
      unsigned int v113 = v95;
      uint64_t v114 = v96;
      uint64_t v115 = v7;
      _ShapeStyle_RenderedShape.render(style:)((uint64_t)v106);
    }
    _ShapeStyle_RenderedLayers.endLayer(shape:)(a1);
    outlined consume of _ShapeStyle_RenderedShape.Shape(*(void **)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(_DWORD *)(a1 + 96));
    unint64_t v15 = v74;
    swift_release_n();
    outlined consume of _ShapeStyle_Pack.Style?((uint64_t)v24, v81, (uint64_t)v80, v105, v79, v78, v25, v77, v98, v28, v97, v95, v96, (uint64_t)v7);
    *(void *)a1 = v94;
    *(void *)(a1 + 8) = v93;
    *(void *)(a1 + 16) = v92;
    *(void *)(a1 + 24) = v91;
    *(void *)(a1 + 32) = v90;
    *(void *)(a1 + 40) = v89;
    *(void *)(a1 + 48) = v88;
    *(void *)(a1 + 56) = v87;
    *(void *)(a1 + 64) = v86;
    *(void *)(a1 + 72) = v85;
    *(void *)(a1 + 80) = v84;
    *(void *)(a1 + 88) = v83;
    *(_DWORD *)(a1 + 96) = v82;
    int v17 = *(_DWORD *)(v74 + 60);
    uint64_t v18 = v17;
    long long v16 = v75;
    swift_beginAccess();
    if (*(void *)(*(void *)(v74 + 24) + 16) <= v17) {
      goto LABEL_13;
    }
  }
  uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew()(v19);
  *long long v16 = v19;
  if ((v17 & 0x80000000) == 0) {
    goto LABEL_7;
  }
LABEL_12:
  __break(1u);
LABEL_13:
  *(_DWORD *)(v15 + 60) = 0;
  uint64_t v13 = a3;
  char v14 = v72;
LABEL_14:
  unsigned int v7 = v76 + 1;
  uint64_t result = v76[1];
  uint64_t v32 = v76[9];
  if (v32 >> 30)
  {
    if (v32 >> 30 != 1)
    {
      *(void *)uint64_t v13 = MEMORY[0x263F8EE78];
      *(_WORD *)(v13 + 8) = 0;
      *(unsigned char *)(v13 + 10) = 0;
      return result;
    }
    uint64_t v33 = swift_bridgeObjectRetain();
    DisplayList.init(_:)(v33, (uint64_t)&v116);
    int v34 = *(_DWORD *)(a1 + 220);
    uint64_t v35 = *(void *)(a1 + 184);
    long long v36 = *(_OWORD *)(a1 + 120);
    *(_OWORD *)uint64_t v106 = *(_OWORD *)(a1 + 104);
    *(_OWORD *)&v106[16] = v36;
    *(void *)&v106[32] = v35;
    uint64_t v107 = xmmword_2461B9DD0;
    uint64_t v108 = v116;
    BYTE2(v109) = BYTE10(v116);
    LOWORD(v109) = WORD4(v116);
    HIDWORD(v109) = v34;
    LOBYTE(v116) = v14;
    DisplayList.Item.canonicalize(options:)((char *)&v116);
    uint64_t v9 = *(void *)&v106[8];
    uint64_t v8 = *(void *)v106;
    uint64_t v11 = *(void *)&v106[24];
    uint64_t v10 = *(void *)&v106[16];
    uint64_t v6 = *(void **)&v106[32];
    unint64_t v15 = *((void *)&v107 + 1);
    a1 = v107;
    long long v16 = (void **)v108;
    LODWORD(v4) = (unsigned __int16)v109 | (BYTE2(v109) << 16);
    LODWORD(v19) = HIDWORD(v109);
    uint64_t v37 = *((void *)&v107 + 1) >> 62;
    if (*((void *)&v107 + 1) >> 62 == 3 && (v4 & 0xFFFFFF) == 0 && *((void *)&v107 + 1) == 0xC000000000000000)
    {
      char v38 = v108 | v107;
      if (!(v108 | (unint64_t)v107))
      {
        __int16 v39 = 0;
        uint64_t v5 = MEMORY[0x263F8EE78];
        goto LABEL_67;
      }
    }
    _ss23_ContiguousArrayStorageCy7SwiftUI11DisplayListV4ItemVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
    uint64_t v43 = swift_allocObject();
    *(_OWORD *)(v43 + 16) = xmmword_2461B9DC0;
    *(void *)(v43 + 32) = v8;
    *(void *)(v43 + 40) = v9;
    *(void *)(v43 + 48) = v10;
    *(void *)(v43 + 56) = v11;
    *(void *)(v43 + 64) = v6;
    *(void *)(v43 + 72) = a1;
    *(void *)(v43 + 80) = v15;
    *(void *)(v43 + 88) = v16;
    *(unsigned char *)(v43 + 98) = BYTE2(v4);
    *(_WORD *)(v43 + 96) = v4;
    *(_DWORD *)(v43 + 100) = v19;
    uint64_t v5 = v43;
    switch((int)v37)
    {
      case 1:
        LODWORD(v105) = WORD1(v4);
        uint64_t v45 = outlined copy of DisplayList.Item.Value(a1, v15);
        switch(BYTE4(v15))
        {
          case 2:
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v15, 2);
            unsigned int v46 = (a1 >> 2) & 1;
            break;
          case 3:
            outlined init with copy of AnyTrackedValue(a1 + 16, (uint64_t)&v116);
            char v62 = v118;
            uint64_t v102 = *((void *)&v117 + 1);
            __swift_project_boxed_opaque_existential_1(&v116, *((uint64_t *)&v117 + 1));
            long long v100 = (void (*)(void *__return_ptr, uint64_t, void *))v62[7];
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            v100(v125, v102, v62);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v116);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v15, 3);
            LOWORD(v46) = v125[0];
            break;
          case 7:
            LOWORD(v46) = *(_WORD *)(a1 + 24);
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v15, 7);
            break;
          case 0xA:
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v15, 10);
            LOWORD(v46) = 4;
            break;
          case 0xC:
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v15, 12);
            LOWORD(v46) = 2;
            break;
          case 0xE:
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            swift_bridgeObjectRelease();
            uint64_t v63 = a1;
            char v64 = v15;
            LOBYTE(v65) = 14;
            goto LABEL_57;
          case 0xF:
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v15, 15);
            LOWORD(v46) = 64;
            break;
          case 0x10:
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v15, 16);
            LOWORD(v46) = 32;
            break;
          case 0x11:
            (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)a1 + 112))(&v116, v45);
            uint64_t v103 = v116;
            int v66 = (unsigned __int16)word_26FA429C8;
            int v67 = (unsigned __int16)word_26FA429CA;
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            swift_bridgeObjectRelease();
            outlined consume of DisplayList.Effect(a1, v15, 17);
            if ((v67 & ~v66) != 0) {
              __int16 v68 = v67;
            }
            else {
              __int16 v68 = 0;
            }
            LOWORD(v46) = v103 | v66 | v68;
            break;
          default:
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            swift_bridgeObjectRelease();
            uint64_t v63 = a1;
            char v64 = v15;
            unint64_t v65 = HIDWORD(v15);
LABEL_57:
            outlined consume of DisplayList.Effect(v63, v64, v65);
            LOWORD(v46) = 0;
            break;
        }
        __int16 v39 = v46 | v4;
        goto LABEL_65;
      case 2:
        uint64_t v47 = *(void *)(a1 + 16);
        if (!v47)
        {
          unsigned int v48 = WORD1(v4);
          __int16 v39 = 128;
          goto LABEL_38;
        }
        unsigned int v48 = WORD1(v4);
        if (v47 == 1)
        {
          uint64_t v49 = 0;
          __int16 v39 = 128;
        }
        else
        {
          __int16 v50 = 0;
          uint64_t v49 = v47 & 0x7FFFFFFFFFFFFFFELL;
          uint64_t v51 = (__int16 *)(a1 + 104);
          __int16 v52 = 128;
          uint64_t v53 = v47 & 0x7FFFFFFFFFFFFFFELL;
          do
          {
            __int16 v54 = *(v51 - 20);
            __int16 v55 = *v51;
            v51 += 40;
            v52 |= v54;
            v50 |= v55;
            v53 -= 2;
          }
          while (v53);
          __int16 v39 = v50 | v52;
          if (v47 == v49)
          {
LABEL_38:
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            goto LABEL_66;
          }
        }
        uint64_t v56 = v47 - v49;
        unsigned __int8 v57 = (__int16 *)(a1 + 40 * v49 + 64);
        do
        {
          __int16 v58 = *v57;
          v57 += 20;
          v39 |= v58;
          --v56;
        }
        while (v56);
        goto LABEL_38;
      case 3:
        unsigned int v48 = WORD1(v4);
        outlined copy of DisplayList.Item.Value(a1, v15);
        __int16 v39 = 0;
        goto LABEL_66;
      default:
        LODWORD(v105) = WORD1(v4);
        switch(a1 >> 60)
        {
          case 6uLL:
            outlined init with copy of AnyTrackedValue((a1 & 0xFFFFFFFFFFFFFFFLL) + 16, (uint64_t)&v116);
            unsigned __int8 v44 = v118;
            uint64_t v101 = *((void *)&v117 + 1);
            __swift_project_boxed_opaque_existential_1(&v116, *((uint64_t *)&v117 + 1));
            long long v99 = (void (*)(void *__return_ptr, uint64_t, void *))v44[5];
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            v99(v125, v101, v44);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v116);
            __int16 v39 = v125[0];
            break;
          case 8uLL:
            uint64_t v59 = *(void *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
            if (!*(void *)(v59 + 216)) {
              goto LABEL_46;
            }
            uint64_t v104 = *(id *)(v59 + 216);
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            swift_retain();
            swift_retain();
            if ((uint64_t)objc_msgSend(v104, sel_length) <= 0) {
              goto LABEL_72;
            }
            if (one-time initialization token for updateSchedule != -1) {
              swift_once();
            }
            uint64_t v60 = static NSAttributedStringKey.updateSchedule;
            objc_msgSend(v104, sel_length);
            if (!objc_msgSend(v104, sel_attribute_atIndex_effectiveRange_, v60, 0, 0)) {
              goto LABEL_71;
            }
            _bridgeAnyObjectToAny(_:)();
            swift_unknownObjectRelease();
            outlined destroy of Any?((uint64_t)&v116);
            char v61 = *(unsigned char *)(v59 + 256);
            outlined consume of DisplayList.Item.Value(a1, v15);
            swift_release();
            swift_release();
            outlined consume of DisplayList.Item.Value(a1, v15);
            if ((v61 & 1) == 0) {
              goto LABEL_47;
            }
            __int16 v39 = 8;
            break;
          case 9uLL:
            __int16 v39 = *(_WORD *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 0x18) | 0x200;
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            break;
          case 0xBuLL:
            goto LABEL_50;
          case 0xCuLL:
            outlined copy of DisplayList.Item.Value(a1, v15);
LABEL_50:
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
            __int16 v39 = 2;
            break;
          default:
LABEL_46:
            outlined copy of DisplayList.Item.Value(a1, v15);
            outlined copy of DisplayList.Item.Value(a1, v15);
LABEL_47:
            __int16 v39 = 0;
            break;
        }
        goto LABEL_65;
    }
  }
  char v40 = v76;
  uint64_t v41 = v76[8];
  *(void *)uint64_t v106 = v76[1];
  long long v42 = *((_OWORD *)v76 + 2);
  *(_OWORD *)&v106[8] = *((_OWORD *)v76 + 1);
  *(_OWORD *)&v106[24] = v42;
  uint64_t v107 = *((_OWORD *)v76 + 3);
  uint64_t v108 = v41;
  BYTE2(v109) = BYTE2(v32);
  LOWORD(v109) = v32;
  HIDWORD(v109) = HIDWORD(v32);
  uint64_t result = DisplayList.init(_:)((uint64_t *)v106, v13);
LABEL_68:
  v7[2] = 0u;
  v7[3] = 0u;
  *unsigned int v7 = 0u;
  v7[1] = 0u;
  v40[9] = 0x80000000;
  return result;
}

uint64_t DisplayList.init(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[5];
  unint64_t v4 = a1[6];
  uint64_t v5 = a1[7];
  int v6 = *((unsigned __int16 *)a1 + 32) | (*((unsigned __int8 *)a1 + 66) << 16);
  if (v4 >> 62 == 3 && (v6 & 0xFFFFFF) == 0 && v4 == 0xC000000000000000 && (v5 | v3) == 0)
  {
    uint64_t result = outlined consume of DisplayList.Item.Value(0, 0xC000000000000000);
    char v19 = 0;
    __int16 v17 = 0;
    uint64_t v16 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v10 = *a1;
    uint64_t v11 = a1[1];
    uint64_t v12 = a1[2];
    uint64_t v13 = a1[3];
    uint64_t v14 = a1[4];
    int v15 = *((_DWORD *)a1 + 17);
    type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.Item>, (uint64_t)&type metadata for DisplayList.Item, MEMORY[0x263F8E0F8]);
    uint64_t v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_2461B9DC0;
    *(void *)(v16 + 32) = v10;
    *(void *)(v16 + 40) = v11;
    *(void *)(v16 + 48) = v12;
    *(void *)(v16 + 56) = v13;
    *(void *)(v16 + 64) = v14;
    *(void *)(v16 + 72) = v3;
    *(void *)(v16 + 80) = v4;
    *(void *)(v16 + 88) = v5;
    *(unsigned char *)(v16 + 98) = BYTE2(v6);
    *(_WORD *)(v16 + 96) = v6;
    *(_DWORD *)(v16 + 100) = v15;
    outlined copy of DisplayList.Item.Value(v3, v4);
    DisplayList.Item.features.getter(&v20);
    __int16 v17 = v20;
    DisplayList.Item.properties.getter(&v20);
    uint64_t result = outlined consume of DisplayList.Item.Value(v3, v4);
    char v19 = v20;
  }
  *(void *)a2 = v16;
  *(_WORD *)(a2 + 8) = v17;
  *(unsigned char *)(a2 + 10) = v19;
  return result;
}

uint64_t protocol witness for ShapeStyledLeafView.mustUpdate(data:position:) in conformance _BackgroundStyleModifier<A>()
{
  return protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
}

BOOL ResolvedStyledText.needsStyledRendering.getter()
{
  __int16 v1 = *(_WORD *)(v0 + 260);
  if (v1) {
    return 1;
  }
  if (v1 & 2) != 0 && (*(unsigned char *)(v0 + 256))
  {
    if (*(void *)(v0 + 216)) {
      return !NSAttributedString.isDynamic.getter();
    }
    return 1;
  }
  return 0;
}

uint64_t outlined copy of _ShapeStyle_LayerID(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 2) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t _s7SwiftUI29_ShapeStyle_InterpolatorGroupC14AddLayerResult33_3890C65F12EA82A4BC5FBD33046B67FALLOWOi0_(uint64_t result)
{
  *(void *)(result + 112) = *(void *)(result + 112) & 0xFFFFFFFFFFFFFF8 | 0x8000000000000000;
  return result;
}

uint64_t Transaction.scrollContentOffsetAdjustmentBehavior.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v2 = swift_retain();
  specialized closure #1 in PropertyList.subscript.getter(v2, a1);
  return swift_release();
}

uint64_t type metadata accessor for DerivedValue()
{
  return __swift_instantiateGenericMetadata();
}

ValueMetadata *type metadata accessor for HoverEffectContext.State()
{
  return &type metadata for HoverEffectContext.State;
}

ValueMetadata *type metadata accessor for _SemanticFeature_v5()
{
  return &type metadata for _SemanticFeature_v5;
}

uint64_t static Alignment.bottomLeading.getter()
{
  return static Alignment.center.getter(&one-time initialization token for bottomLeading, (uint64_t)&static Alignment.bottomLeading);
}

uint64_t one-time initialization function for orange()
{
  _s7SwiftUI8ColorBox33_3A792CB70CFCF892676D7ADF8BCA260FLLCyAA0C0V07OpacityC033_F28C5F7FF836E967BAC87540A3CB4F65LLVGMaTm_0(0, &lazy cache variable for type metadata for ColorBox<SystemColorType>, (void (*)(void))lazy protocol witness table accessor for type SystemColorType and conformance SystemColorType);
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 16) = 1;
  static Color.orange = result;
  return result;
}

uint64_t type metadata completion function for InternalCustomAnimationModifiedContent()
{
  uint64_t result = type metadata accessor for CustomAnimationModifiedContent();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

double *static Animation.spring(response:dampingFraction:blendDuration:)(double a1, double a2, double a3)
{
  type metadata accessor for InternalAnimationBox<FluidSpringAnimation>(0, (unint64_t *)&lazy cache variable for type metadata for InternalAnimationBox<FluidSpringAnimation>, (uint64_t (*)(void))lazy protocol witness table accessor for type FluidSpringAnimation and conformance FluidSpringAnimation, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t))type metadata accessor for InternalAnimationBox);
  uint64_t result = (double *)swift_allocObject();
  result[2] = a1;
  result[3] = a2;
  result[4] = a3;
  return result;
}

void type metadata accessor for InternalAnimationBox<FluidSpringAnimation>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t (*a4)(uint64_t, ValueMetadata *, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3();
    unint64_t v8 = a4(a1, &type metadata for FluidSpringAnimation, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type FluidSpringAnimation and conformance FluidSpringAnimation()
{
  unint64_t result = lazy protocol witness table cache variable for type FluidSpringAnimation and conformance FluidSpringAnimation;
  if (!lazy protocol witness table cache variable for type FluidSpringAnimation and conformance FluidSpringAnimation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FluidSpringAnimation and conformance FluidSpringAnimation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FluidSpringAnimation and conformance FluidSpringAnimation;
  if (!lazy protocol witness table cache variable for type FluidSpringAnimation and conformance FluidSpringAnimation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FluidSpringAnimation and conformance FluidSpringAnimation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FluidSpringAnimation and conformance FluidSpringAnimation;
  if (!lazy protocol witness table cache variable for type FluidSpringAnimation and conformance FluidSpringAnimation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FluidSpringAnimation and conformance FluidSpringAnimation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FluidSpringAnimation and conformance FluidSpringAnimation;
  if (!lazy protocol witness table cache variable for type FluidSpringAnimation and conformance FluidSpringAnimation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FluidSpringAnimation and conformance FluidSpringAnimation);
  }
  return result;
}

__n128 one-time initialization function for white()
{
  _s7SwiftUI8ColorBox33_3A792CB70CFCF892676D7ADF8BCA260FLLCyAA0C0V07OpacityC033_F28C5F7FF836E967BAC87540A3CB4F65LLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<ResolvedColorProvider>, (void (*)(void))lazy protocol witness table accessor for type ResolvedColorProvider and conformance ResolvedColorProvider);
  uint64_t v0 = (__n128 *)swift_allocObject();
  __asm { FMOV            V0.4S, #1.0 }
  v0[1] = result;
  static Color.white = (uint64_t)v0;
  return result;
}

uint64_t one-time initialization function for secondary()
{
  _s7SwiftUI8ColorBox33_3A792CB70CFCF892676D7ADF8BCA260FLLCyAA0C0V07OpacityC033_F28C5F7FF836E967BAC87540A3CB4F65LLVGMaTm_0(0, &lazy cache variable for type metadata for ColorBox<SystemColorType>, (void (*)(void))lazy protocol witness table accessor for type SystemColorType and conformance SystemColorType);
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 16) = 14;
  static Color.secondarCGFloat y = result;
  return result;
}

double one-time initialization function for black()
{
  _s7SwiftUI8ColorBox33_3A792CB70CFCF892676D7ADF8BCA260FLLCyAA0C0V07OpacityC033_F28C5F7FF836E967BAC87540A3CB4F65LLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<ResolvedColorProvider>, (void (*)(void))lazy protocol witness table accessor for type ResolvedColorProvider and conformance ResolvedColorProvider);
  uint64_t v0 = swift_allocObject();
  double result = 0.0;
  *(_OWORD *)(v0 + 16) = xmmword_2461C6A90;
  static Color.black = (_UNKNOWN *)v0;
  return result;
}

uint64_t one-time initialization function for foreground()
{
  type metadata accessor for ColorBox<Color.ForegroundColorProvider>();
  uint64_t result = swift_allocObject();
  static Color.foreground = result;
  return result;
}

void type metadata accessor for ColorBox<Color.ForegroundColorProvider>()
{
  if (!lazy cache variable for type metadata for ColorBox<Color.ForegroundColorProvider>)
  {
    lazy protocol witness table accessor for type Color.ForegroundColorProvider and conformance Color.ForegroundColorProvider();
    unint64_t v0 = type metadata accessor for ColorBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<Color.ForegroundColorProvider>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Color.ForegroundColorProvider and conformance Color.ForegroundColorProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type Color.ForegroundColorProvider and conformance Color.ForegroundColorProvider;
  if (!lazy protocol witness table cache variable for type Color.ForegroundColorProvider and conformance Color.ForegroundColorProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.ForegroundColorProvider and conformance Color.ForegroundColorProvider);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Color.ForegroundColorProvider and conformance Color.ForegroundColorProvider;
  if (!lazy protocol witness table cache variable for type Color.ForegroundColorProvider and conformance Color.ForegroundColorProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.ForegroundColorProvider and conformance Color.ForegroundColorProvider);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Color.ForegroundColorProvider and conformance Color.ForegroundColorProvider;
  if (!lazy protocol witness table cache variable for type Color.ForegroundColorProvider and conformance Color.ForegroundColorProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.ForegroundColorProvider and conformance Color.ForegroundColorProvider);
  }
  return result;
}

uint64_t one-time initialization function for primary()
{
  _s7SwiftUI8ColorBox33_3A792CB70CFCF892676D7ADF8BCA260FLLCyAA0C0V07OpacityC033_F28C5F7FF836E967BAC87540A3CB4F65LLVGMaTm_0(0, &lazy cache variable for type metadata for ColorBox<SystemColorType>, (void (*)(void))lazy protocol witness table accessor for type SystemColorType and conformance SystemColorType);
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 16) = 13;
  static Color.primarCGFloat y = (_UNKNOWN *)result;
  return result;
}

uint64_t one-time initialization function for clear()
{
  _s7SwiftUI8ColorBox33_3A792CB70CFCF892676D7ADF8BCA260FLLCyAA0C0V07OpacityC033_F28C5F7FF836E967BAC87540A3CB4F65LLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<ResolvedColorProvider>, (void (*)(void))lazy protocol witness table accessor for type ResolvedColorProvider and conformance ResolvedColorProvider);
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  static Color.clear = result;
  return result;
}

float *Color.init(_:)(float a1, float a2, float a3, float a4)
{
  type metadata accessor for ColorBox<ResolvedColorProvider>();
  uint64_t result = (float *)swift_allocObject();
  result[4] = a1;
  result[5] = a2;
  result[6] = a3;
  result[7] = a4;
  return result;
}

void type metadata accessor for ColorBox<ResolvedColorProvider>()
{
  if (!lazy cache variable for type metadata for ColorBox<ResolvedColorProvider>)
  {
    lazy protocol witness table accessor for type ResolvedColorProvider and conformance ResolvedColorProvider();
    unint64_t v0 = type metadata accessor for ColorBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<ResolvedColorProvider>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ResolvedColorProvider and conformance ResolvedColorProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type ResolvedColorProvider and conformance ResolvedColorProvider;
  if (!lazy protocol witness table cache variable for type ResolvedColorProvider and conformance ResolvedColorProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedColorProvider and conformance ResolvedColorProvider);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvedColorProvider and conformance ResolvedColorProvider;
  if (!lazy protocol witness table cache variable for type ResolvedColorProvider and conformance ResolvedColorProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedColorProvider and conformance ResolvedColorProvider);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvedColorProvider and conformance ResolvedColorProvider;
  if (!lazy protocol witness table cache variable for type ResolvedColorProvider and conformance ResolvedColorProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedColorProvider and conformance ResolvedColorProvider);
  }
  return result;
}

uint64_t specialized UnaryLayoutComputer.updateValue()()
{
  uint64_t result = AGGraphGetCurrentAttribute();
  if (result == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    uint64_t Value = AGGraphGetValue();
    MEMORY[0x270FA5388](Value);
    MEMORY[0x270FA5388](v2);
    return specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), v3, (void (*)(void *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
  }
  return result;
}

{
  uint64_t result;
  uint64_t Value;
  uint64_t v2;
  uint64_t v3;

  uint64_t result = AGGraphGetCurrentAttribute();
  if (result == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    uint64_t Value = AGGraphGetValue();
    MEMORY[0x270FA5388](Value);
    MEMORY[0x270FA5388](v2);
    return specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), v3, (void (*)(void *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
  }
  return result;
}

{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;

  uint64_t result = AGGraphGetCurrentAttribute();
  if (result == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    AGGraphGetValue();
    MEMORY[0x270FA5388](1);
    MEMORY[0x270FA5388](v1);
    return specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), v2, (void (*)(void *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
  }
  return result;
}

{
  uint64_t result;
  uint64_t Value;
  uint64_t v2;
  uint64_t v3;

  uint64_t result = AGGraphGetCurrentAttribute();
  if (result == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    uint64_t Value = AGGraphGetValue();
    MEMORY[0x270FA5388](Value);
    MEMORY[0x270FA5388](v2);
    return specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), v3, (void (*)(void *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
  }
  return result;
}

{
  uint64_t result;
  uint64_t Value;
  uint64_t v2;
  uint64_t v3;

  uint64_t result = AGGraphGetCurrentAttribute();
  if (result == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    uint64_t Value = AGGraphGetValue();
    MEMORY[0x270FA5388](Value);
    MEMORY[0x270FA5388](v2);
    return specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), v3, (void (*)(void *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
  }
  return result;
}

{
  uint64_t result;
  uint64_t Value;
  uint64_t v2;
  uint64_t v3;

  uint64_t result = AGGraphGetCurrentAttribute();
  if (result == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    uint64_t Value = AGGraphGetValue();
    MEMORY[0x270FA5388](Value);
    MEMORY[0x270FA5388](v2);
    return specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), v3, (void (*)(void *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
  }
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t *Value;
  uint64_t v7;
  uint64_t v8;
  void v9[4];
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t *v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  long long v31;
  long long v32;
  long long v33;
  char v34;
  long long v35;
  long long v36;
  long long v37;
  char v38;
  long long v39;
  long long v40;
  long long v41;
  char v42;
  long long v43;
  long long v44;
  long long v45;
  long long v46;
  long long v47;
  long long v48;
  char v49;
  long long v50;
  long long v51;
  long long v52;
  long long v53;
  long long v54;
  long long v55;
  char v56;
  long long v57;
  long long v58;
  long long v59;
  long long v60;
  long long v61;
  long long v62;
  char v63;

  uint64_t result = AGGraphGetCurrentAttribute();
  uint64_t v2 = *MEMORY[0x263F288F8];
  if (result == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    uint64_t v3 = result;
    unint64_t v4 = *(_DWORD *)(v0 + 8);
    uint64_t v12 = *(_DWORD *)(v0 + 4);
    uint64_t v5 = v12;
    uint64_t v13 = v4;
    uint64_t Value = (uint64_t *)AGGraphGetValue();
    uint64_t v14 = &v10;
    uint64_t v7 = *Value;
    __int16 v20 = 1;
    char v19 = 1;
    uint64_t v18 = 1;
    __int16 v17 = 1;
    uint64_t v16 = 1;
    int v15 = 1;
    int v23 = 1;
    long long v22 = 1;
    uint64_t v21 = 1;
    long long v24 = v7;
    uint64_t v25 = v3;
    unint64_t v26 = v3;
    uint64_t v27 = v5;
    uint64_t v28 = v3;
    uint64_t v29 = v4;
    uint64_t v30 = v2;
    long long v31 = 0u;
    uint64_t v32 = 0u;
    uint64_t v33 = 0u;
    int v34 = 1;
    uint64_t v35 = 0u;
    long long v36 = 0u;
    uint64_t v37 = 0u;
    char v38 = 1;
    __int16 v39 = 0u;
    char v40 = 0u;
    uint64_t v41 = 0u;
    long long v42 = 1;
    uint64_t v47 = 0u;
    unsigned int v48 = 0u;
    unsigned int v46 = 0u;
    uint64_t v45 = 0u;
    unsigned __int8 v44 = 0u;
    uint64_t v43 = 0u;
    uint64_t v49 = 1;
    __int16 v54 = 0u;
    __int16 v55 = 0u;
    __int16 v52 = 0u;
    uint64_t v53 = 0u;
    __int16 v50 = 0u;
    uint64_t v51 = 0u;
    uint64_t v56 = 1;
    char v61 = 0u;
    char v62 = 0u;
    uint64_t v59 = 0u;
    uint64_t v60 = 0u;
    unsigned __int8 v57 = 0u;
    __int16 v58 = 0u;
    uint64_t v63 = 1;
    MEMORY[0x270FA5388](Value);
    uint64_t v11 = v2;
    v9[2] = &v24;
    MEMORY[0x270FA5388](v8);
    swift_bridgeObjectRetain();
    specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), (uint64_t)v9, (void (*)(void *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
    long long v24 = v7;
    uint64_t v25 = v3;
    unint64_t v26 = v3;
    uint64_t v27 = v12;
    uint64_t v28 = v3;
    uint64_t v29 = v13;
    uint64_t v30 = v11;
    long long v31 = 0u;
    uint64_t v32 = 0u;
    uint64_t v33 = 0u;
    int v34 = 1;
    uint64_t v35 = 0u;
    long long v36 = 0u;
    uint64_t v37 = 0u;
    char v38 = 1;
    __int16 v39 = 0u;
    char v40 = 0u;
    uint64_t v41 = 0u;
    long long v42 = 1;
    uint64_t v47 = 0u;
    unsigned int v48 = 0u;
    uint64_t v43 = 0u;
    unsigned __int8 v44 = 0u;
    uint64_t v45 = 0u;
    unsigned int v46 = 0u;
    uint64_t v49 = v17;
    __int16 v50 = 0u;
    uint64_t v51 = 0u;
    __int16 v52 = 0u;
    uint64_t v53 = 0u;
    __int16 v54 = 0u;
    __int16 v55 = 0u;
    uint64_t v56 = v16;
    unsigned __int8 v57 = 0u;
    __int16 v58 = 0u;
    uint64_t v59 = 0u;
    uint64_t v60 = 0u;
    char v61 = 0u;
    char v62 = 0u;
    uint64_t v63 = v15;
    return outlined release of LinearGradient((uint64_t)&v24);
  }
  return result;
}

{
  uint64_t result;
  uint64_t Value;
  uint64_t v2;
  uint64_t v3;

  uint64_t result = AGGraphGetCurrentAttribute();
  if (result == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    uint64_t Value = AGGraphGetValue();
    MEMORY[0x270FA5388](Value);
    MEMORY[0x270FA5388](v2);
    return specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), v3, (void (*)(void *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
  }
  return result;
}

{
  uint64_t result;
  uint64_t Value;
  uint64_t v2;
  uint64_t v3;

  uint64_t result = AGGraphGetCurrentAttribute();
  if (result == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    uint64_t Value = AGGraphGetValue();
    MEMORY[0x270FA5388](Value);
    MEMORY[0x270FA5388](v2);
    return specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), v3, (void (*)(void *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
  }
  return result;
}

{
  uint64_t result;
  uint64_t Value;
  uint64_t v2;
  uint64_t v3;

  uint64_t result = AGGraphGetCurrentAttribute();
  if (result == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    uint64_t Value = AGGraphGetValue();
    MEMORY[0x270FA5388](Value);
    MEMORY[0x270FA5388](v2);
    return specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), v3, (void (*)(void *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
  }
  return result;
}

{
  uint64_t result;
  uint64_t Value;
  uint64_t v2;
  uint64_t v3;

  uint64_t result = AGGraphGetCurrentAttribute();
  if (result == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    uint64_t Value = AGGraphGetValue();
    MEMORY[0x270FA5388](Value);
    MEMORY[0x270FA5388](v2);
    return specialized StatefulRule<>.update<A>(modify:create:)((uint64_t)partial apply for specialized closure #1 in StatefulRule<>.update<A>(to:), v3, (void (*)(void *__return_ptr))partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:));
  }
  return result;
}

uint64_t specialized StatefulRule<>.update<A>(modify:create:)(uint64_t a1, uint64_t a2, void (*a3)(void *__return_ptr))
{
  v15[69] = *MEMORY[0x263EF8340];
  Outputuint64_t Value = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v15);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for TracingLayoutEngineBox<UnaryLayoutEngine<_PaddingLayout>>();
      uint64_t v10 = swift_allocObject();
      int CurrentAttribute = AGGraphGetCurrentAttribute();
      BOOL v12 = CurrentAttribute == *MEMORY[0x263F288F8];
      if (CurrentAttribute == *MEMORY[0x263F288F8]) {
        int v13 = 0;
      }
      else {
        int v13 = CurrentAttribute;
      }
      *(_DWORD *)(v10 + 564) = v13;
      *(unsigned char *)(v10 + 568) = v12;
    }
    else
    {
      type metadata accessor for LayoutEngineBox<UnaryLayoutEngine<_PaddingLayout>>();
      uint64_t v10 = swift_allocObject();
    }
    memcpy((void *)(v10 + 16), v15, 0x221uLL);
    goto LABEL_16;
  }
  uint64_t v5 = *OutputValue;
  uint64_t v6 = OutputValue[1];
  MEMORY[0x270FA5388](OutputValue);
  uint64_t v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_8;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for UnaryLayoutEngine<_PaddingLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _PaddingLayout and conformance _PaddingLayout, (uint64_t)&type metadata for _PaddingLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    double v9 = MEMORY[0x270FA5388](v8);
    (*(void (**)(double))(*(void *)v5 + 80))(v9);
    v15[0] = v5;
    v15[1] = v6 + 1;
LABEL_16:
    AGGraphSetOutputValue();
    return swift_release();
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  uint64_t result;
  void v15[70];

  v15[69] = *MEMORY[0x263EF8340];
  Outputuint64_t Value = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v15);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for TracingLayoutEngineBox<UnaryLayoutEngine<_FrameLayout>>();
      uint64_t v10 = swift_allocObject();
      int CurrentAttribute = AGGraphGetCurrentAttribute();
      BOOL v12 = CurrentAttribute == *MEMORY[0x263F288F8];
      if (CurrentAttribute == *MEMORY[0x263F288F8]) {
        int v13 = 0;
      }
      else {
        int v13 = CurrentAttribute;
      }
      *(_DWORD *)(v10 + 564) = v13;
      *(unsigned char *)(v10 + 568) = v12;
    }
    else
    {
      type metadata accessor for LayoutEngineBox<UnaryLayoutEngine<_FrameLayout>>();
      uint64_t v10 = swift_allocObject();
    }
    memcpy((void *)(v10 + 16), v15, 0x221uLL);
    goto LABEL_16;
  }
  uint64_t v5 = *OutputValue;
  uint64_t v6 = OutputValue[1];
  MEMORY[0x270FA5388](OutputValue);
  uint64_t v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_8;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for UnaryLayoutEngine<_FrameLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _FrameLayout and conformance _FrameLayout, (uint64_t)&type metadata for _FrameLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    double v9 = MEMORY[0x270FA5388](v8);
    (*(void (**)(double))(*(void *)v5 + 80))(v9);
    v15[0] = v5;
    v15[1] = v6 + 1;
LABEL_16:
    AGGraphSetOutputValue();
    return swift_release();
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  uint64_t result;
  void v15[78];

  v15[77] = *MEMORY[0x263EF8340];
  Outputuint64_t Value = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v15);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for TracingLayoutEngineBox<UnaryLayoutEngine<_FlexFrameLayout>>();
      uint64_t v10 = swift_allocObject();
      int CurrentAttribute = AGGraphGetCurrentAttribute();
      BOOL v12 = CurrentAttribute == *MEMORY[0x263F288F8];
      if (CurrentAttribute == *MEMORY[0x263F288F8]) {
        int v13 = 0;
      }
      else {
        int v13 = CurrentAttribute;
      }
      *(_DWORD *)(v10 + 628) = v13;
      *(unsigned char *)(v10 + 632) = v12;
    }
    else
    {
      type metadata accessor for LayoutEngineBox<UnaryLayoutEngine<_FlexFrameLayout>>();
      uint64_t v10 = swift_allocObject();
    }
    memcpy((void *)(v10 + 16), v15, 0x261uLL);
    goto LABEL_16;
  }
  uint64_t v5 = *OutputValue;
  uint64_t v6 = OutputValue[1];
  MEMORY[0x270FA5388](OutputValue);
  uint64_t v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_8;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for UnaryLayoutEngine<_FlexFrameLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _FlexFrameLayout and conformance _FlexFrameLayout, (uint64_t)&type metadata for _FlexFrameLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    double v9 = MEMORY[0x270FA5388](v8);
    (*(void (**)(double))(*(void *)v5 + 80))(v9);
    v15[0] = v5;
    v15[1] = v6 + 1;
LABEL_16:
    AGGraphSetOutputValue();
    return swift_release();
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  uint64_t result;
  void v15[65];

  v15[64] = *MEMORY[0x263EF8340];
  Outputuint64_t Value = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v15);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for TracingLayoutEngineBox<UnaryLayoutEngine<_FixedSizeLayout>>();
      uint64_t v10 = swift_allocObject();
      int CurrentAttribute = AGGraphGetCurrentAttribute();
      BOOL v12 = CurrentAttribute == *MEMORY[0x263F288F8];
      if (CurrentAttribute == *MEMORY[0x263F288F8]) {
        int v13 = 0;
      }
      else {
        int v13 = CurrentAttribute;
      }
      *(_DWORD *)(v10 + 524) = v13;
      *(unsigned char *)(v10 + 528) = v12;
    }
    else
    {
      type metadata accessor for LayoutEngineBox<UnaryLayoutEngine<_FixedSizeLayout>>();
      uint64_t v10 = swift_allocObject();
    }
    memcpy((void *)(v10 + 16), v15, 0x1F9uLL);
    goto LABEL_16;
  }
  uint64_t v5 = *OutputValue;
  uint64_t v6 = OutputValue[1];
  MEMORY[0x270FA5388](OutputValue);
  uint64_t v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_8;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for UnaryLayoutEngine<_FixedSizeLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _FixedSizeLayout and conformance _FixedSizeLayout, (uint64_t)&type metadata for _FixedSizeLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    double v9 = MEMORY[0x270FA5388](v8);
    (*(void (**)(double))(*(void *)v5 + 80))(v9);
    v15[0] = v5;
    v15[1] = v6 + 1;
LABEL_16:
    AGGraphSetOutputValue();
    return swift_release();
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  uint64_t result;
  void v15[65];

  v15[64] = *MEMORY[0x263EF8340];
  Outputuint64_t Value = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v15);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for TracingLayoutEngineBox<UnaryLayoutEngine<LayoutPriorityLayout>>();
      uint64_t v10 = swift_allocObject();
      int CurrentAttribute = AGGraphGetCurrentAttribute();
      BOOL v12 = CurrentAttribute == *MEMORY[0x263F288F8];
      if (CurrentAttribute == *MEMORY[0x263F288F8]) {
        int v13 = 0;
      }
      else {
        int v13 = CurrentAttribute;
      }
      *(_DWORD *)(v10 + 524) = v13;
      *(unsigned char *)(v10 + 528) = v12;
    }
    else
    {
      type metadata accessor for LayoutEngineBox<UnaryLayoutEngine<LayoutPriorityLayout>>();
      uint64_t v10 = swift_allocObject();
    }
    memcpy((void *)(v10 + 16), v15, 0x1F9uLL);
    goto LABEL_16;
  }
  uint64_t v5 = *OutputValue;
  uint64_t v6 = OutputValue[1];
  MEMORY[0x270FA5388](OutputValue);
  uint64_t v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_8;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for UnaryLayoutEngine<LayoutPriorityLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LayoutPriorityLayout and conformance LayoutPriorityLayout, (uint64_t)&type metadata for LayoutPriorityLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    double v9 = MEMORY[0x270FA5388](v8);
    (*(void (**)(double))(*(void *)v5 + 80))(v9);
    v15[0] = v5;
    v15[1] = v6 + 1;
LABEL_16:
    AGGraphSetOutputValue();
    return swift_release();
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  uint64_t result;
  void v15[66];

  v15[65] = *MEMORY[0x263EF8340];
  Outputuint64_t Value = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v15);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for TracingLayoutEngineBox<UnaryLayoutEngine<_AspectRatioLayout>>();
      uint64_t v10 = swift_allocObject();
      int CurrentAttribute = AGGraphGetCurrentAttribute();
      BOOL v12 = CurrentAttribute == *MEMORY[0x263F288F8];
      if (CurrentAttribute == *MEMORY[0x263F288F8]) {
        int v13 = 0;
      }
      else {
        int v13 = CurrentAttribute;
      }
      *(_DWORD *)(v10 + 532) = v13;
      *(unsigned char *)(v10 + 536) = v12;
    }
    else
    {
      type metadata accessor for LayoutEngineBox<UnaryLayoutEngine<_AspectRatioLayout>>();
      uint64_t v10 = swift_allocObject();
    }
    memcpy((void *)(v10 + 16), v15, 0x201uLL);
    goto LABEL_16;
  }
  uint64_t v5 = *OutputValue;
  uint64_t v6 = OutputValue[1];
  MEMORY[0x270FA5388](OutputValue);
  uint64_t v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_8;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for UnaryLayoutEngine<_AspectRatioLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _AspectRatioLayout and conformance _AspectRatioLayout, (uint64_t)&type metadata for _AspectRatioLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    double v9 = MEMORY[0x270FA5388](v8);
    (*(void (**)(double))(*(void *)v5 + 80))(v9);
    v15[0] = v5;
    v15[1] = v6 + 1;
LABEL_16:
    AGGraphSetOutputValue();
    return swift_release();
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  uint64_t result;
  void v15[65];

  v15[64] = *MEMORY[0x263EF8340];
  Outputuint64_t Value = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v15);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for TracingLayoutEngineBox<UnaryLayoutEngine<SpacingLayout>>();
      uint64_t v10 = swift_allocObject();
      int CurrentAttribute = AGGraphGetCurrentAttribute();
      BOOL v12 = CurrentAttribute == *MEMORY[0x263F288F8];
      if (CurrentAttribute == *MEMORY[0x263F288F8]) {
        int v13 = 0;
      }
      else {
        int v13 = CurrentAttribute;
      }
      *(_DWORD *)(v10 + 524) = v13;
      *(unsigned char *)(v10 + 528) = v12;
    }
    else
    {
      type metadata accessor for LayoutEngineBox<UnaryLayoutEngine<SpacingLayout>>();
      uint64_t v10 = swift_allocObject();
    }
    memcpy((void *)(v10 + 16), v15, 0x1F9uLL);
    goto LABEL_16;
  }
  uint64_t v5 = *OutputValue;
  uint64_t v6 = OutputValue[1];
  MEMORY[0x270FA5388](OutputValue);
  uint64_t v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_8;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for UnaryLayoutEngine<SpacingLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type SpacingLayout and conformance SpacingLayout, (uint64_t)&type metadata for SpacingLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    double v9 = MEMORY[0x270FA5388](v8);
    (*(void (**)(double))(*(void *)v5 + 80))(v9);
    v15[0] = v5;
    v15[1] = v6 + 1;
LABEL_16:
    AGGraphSetOutputValue();
    return swift_release();
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  uint64_t result;
  void v15[45];

  v15[44] = *MEMORY[0x263EF8340];
  Outputuint64_t Value = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v15);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for TracingLayoutEngineBox<LeafLayoutEngine<Image.Resolved>>();
      uint64_t v10 = swift_allocObject();
      int CurrentAttribute = AGGraphGetCurrentAttribute();
      BOOL v12 = CurrentAttribute == *MEMORY[0x263F288F8];
      if (CurrentAttribute == *MEMORY[0x263F288F8]) {
        int v13 = 0;
      }
      else {
        int v13 = CurrentAttribute;
      }
      *(_DWORD *)(v10 + 364) = v13;
      *(unsigned char *)(v10 + 368) = v12;
    }
    else
    {
      type metadata accessor for LayoutEngineBox<LeafLayoutEngine<Image.Resolved>>();
      uint64_t v10 = swift_allocObject();
    }
    memcpy((void *)(v10 + 16), v15, 0x159uLL);
    goto LABEL_16;
  }
  uint64_t v5 = *OutputValue;
  uint64_t v6 = OutputValue[1];
  MEMORY[0x270FA5388](OutputValue);
  uint64_t v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_8;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for LeafLayoutEngine<Image.Resolved>, (uint64_t)&type metadata for Image.Resolved, (uint64_t)&protocol witness table for Image.Resolved, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for LeafLayoutEngine);
    double v9 = MEMORY[0x270FA5388](v8);
    (*(void (**)(double))(*(void *)v5 + 80))(v9);
    v15[0] = v5;
    v15[1] = v6 + 1;
LABEL_16:
    AGGraphSetOutputValue();
    return swift_release();
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  uint64_t result;
  void v15[65];

  v15[64] = *MEMORY[0x263EF8340];
  Outputuint64_t Value = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v15);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for TracingLayoutEngineBox<UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>>();
      uint64_t v10 = swift_allocObject();
      int CurrentAttribute = AGGraphGetCurrentAttribute();
      BOOL v12 = CurrentAttribute == *MEMORY[0x263F288F8];
      if (CurrentAttribute == *MEMORY[0x263F288F8]) {
        int v13 = 0;
      }
      else {
        int v13 = CurrentAttribute;
      }
      *(_DWORD *)(v10 + 524) = v13;
      *(unsigned char *)(v10 + 528) = v12;
    }
    else
    {
      type metadata accessor for LayoutEngineBox<UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>>();
      uint64_t v10 = swift_allocObject();
    }
    memcpy((void *)(v10 + 16), v15, 0x1F9uLL);
    goto LABEL_16;
  }
  uint64_t v5 = *OutputValue;
  uint64_t v6 = OutputValue[1];
  MEMORY[0x270FA5388](OutputValue);
  uint64_t v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_8;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type IgnoresAutomaticPaddingLayout and conformance IgnoresAutomaticPaddingLayout, (uint64_t)&type metadata for IgnoresAutomaticPaddingLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    double v9 = MEMORY[0x270FA5388](v8);
    (*(void (**)(double))(*(void *)v5 + 80))(v9);
    v15[0] = v5;
    v15[1] = v6 + 1;
LABEL_16:
    AGGraphSetOutputValue();
    return swift_release();
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  uint64_t result;
  void v15[70];

  v15[69] = *MEMORY[0x263EF8340];
  Outputuint64_t Value = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v15);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for TracingLayoutEngineBox<UnaryLayoutEngine<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout>>();
      uint64_t v10 = swift_allocObject();
      int CurrentAttribute = AGGraphGetCurrentAttribute();
      BOOL v12 = CurrentAttribute == *MEMORY[0x263F288F8];
      if (CurrentAttribute == *MEMORY[0x263F288F8]) {
        int v13 = 0;
      }
      else {
        int v13 = CurrentAttribute;
      }
      *(_DWORD *)(v10 + 564) = v13;
      *(unsigned char *)(v10 + 568) = v12;
    }
    else
    {
      type metadata accessor for LayoutEngineBox<UnaryLayoutEngine<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout>>();
      uint64_t v10 = swift_allocObject();
    }
    memcpy((void *)(v10 + 16), v15, 0x221uLL);
    goto LABEL_16;
  }
  uint64_t v5 = *OutputValue;
  uint64_t v6 = OutputValue[1];
  MEMORY[0x270FA5388](OutputValue);
  uint64_t v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_8;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for UnaryLayoutEngine<AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout and conformance AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, (uint64_t)&type metadata for AutomaticPaddingViewModifier.PaddingLayout.WrappedLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    double v9 = MEMORY[0x270FA5388](v8);
    (*(void (**)(double))(*(void *)v5 + 80))(v9);
    v15[0] = v5;
    v15[1] = v6 + 1;
LABEL_16:
    AGGraphSetOutputValue();
    return swift_release();
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  uint64_t result;
  void v15[65];

  v15[64] = *MEMORY[0x263EF8340];
  Outputuint64_t Value = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v15);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for TracingLayoutEngineBox<UnaryLayoutEngine<MoveTransition.MoveLayout>>();
      uint64_t v10 = swift_allocObject();
      int CurrentAttribute = AGGraphGetCurrentAttribute();
      BOOL v12 = CurrentAttribute == *MEMORY[0x263F288F8];
      if (CurrentAttribute == *MEMORY[0x263F288F8]) {
        int v13 = 0;
      }
      else {
        int v13 = CurrentAttribute;
      }
      *(_DWORD *)(v10 + 524) = v13;
      *(unsigned char *)(v10 + 528) = v12;
    }
    else
    {
      type metadata accessor for LayoutEngineBox<UnaryLayoutEngine<MoveTransition.MoveLayout>>();
      uint64_t v10 = swift_allocObject();
    }
    memcpy((void *)(v10 + 16), v15, 0x1F9uLL);
    goto LABEL_16;
  }
  uint64_t v5 = *OutputValue;
  uint64_t v6 = OutputValue[1];
  MEMORY[0x270FA5388](OutputValue);
  uint64_t v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_8;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for UnaryLayoutEngine<MoveTransition.MoveLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type MoveTransition.MoveLayout and conformance MoveTransition.MoveLayout, (uint64_t)&type metadata for MoveTransition.MoveLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    double v9 = MEMORY[0x270FA5388](v8);
    (*(void (**)(double))(*(void *)v5 + 80))(v9);
    v15[0] = v5;
    v15[1] = v6 + 1;
LABEL_16:
    AGGraphSetOutputValue();
    return swift_release();
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  uint64_t result;
  void v15[65];

  v15[64] = *MEMORY[0x263EF8340];
  Outputuint64_t Value = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v15);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for TracingLayoutEngineBox<UnaryLayoutEngine<_AlignmentLayout>>();
      uint64_t v10 = swift_allocObject();
      int CurrentAttribute = AGGraphGetCurrentAttribute();
      BOOL v12 = CurrentAttribute == *MEMORY[0x263F288F8];
      if (CurrentAttribute == *MEMORY[0x263F288F8]) {
        int v13 = 0;
      }
      else {
        int v13 = CurrentAttribute;
      }
      *(_DWORD *)(v10 + 524) = v13;
      *(unsigned char *)(v10 + 528) = v12;
    }
    else
    {
      type metadata accessor for LayoutEngineBox<UnaryLayoutEngine<_AlignmentLayout>>();
      uint64_t v10 = swift_allocObject();
    }
    memcpy((void *)(v10 + 16), v15, 0x1F9uLL);
    goto LABEL_16;
  }
  uint64_t v5 = *OutputValue;
  uint64_t v6 = OutputValue[1];
  MEMORY[0x270FA5388](OutputValue);
  uint64_t v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_8;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for UnaryLayoutEngine<_AlignmentLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _AlignmentLayout and conformance _AlignmentLayout, (uint64_t)&type metadata for _AlignmentLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    double v9 = MEMORY[0x270FA5388](v8);
    (*(void (**)(double))(*(void *)v5 + 80))(v9);
    v15[0] = v5;
    v15[1] = v6 + 1;
LABEL_16:
    AGGraphSetOutputValue();
    return swift_release();
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:)@<X0>(void *a1@<X8>)
{
  return memcpy(a1, *(const void **)(v1 + 16), 0x221uLL);
}

{
  uint64_t v1;

  return memcpy(a1, *(const void **)(v1 + 16), 0x261uLL);
}

{
  uint64_t v1;

  return memcpy(a1, *(const void **)(v1 + 16), 0x1F9uLL);
}

{
  uint64_t v1;

  return memcpy(a1, *(const void **)(v1 + 16), 0x201uLL);
}

void type metadata accessor for LayoutEngineBox<UnaryLayoutEngine<_PaddingLayout>>()
{
  if (!lazy cache variable for type metadata for LayoutEngineBox<UnaryLayoutEngine<_PaddingLayout>>)
  {
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for UnaryLayoutEngine<_PaddingLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _PaddingLayout and conformance _PaddingLayout, (uint64_t)&type metadata for _PaddingLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    unint64_t v0 = type metadata accessor for LayoutEngineBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LayoutEngineBox<UnaryLayoutEngine<_PaddingLayout>>);
    }
  }
}

void type metadata accessor for LayoutEngineBox<SpacerLayoutComputer<Spacer>.Engine>()
{
  if (!lazy cache variable for type metadata for LayoutEngineBox<SpacerLayoutComputer<Spacer>.Engine>)
  {
    type metadata accessor for LeafLayoutComputer<Image.Resolved>(255, &lazy cache variable for type metadata for SpacerLayoutComputer<Spacer>.Engine, (uint64_t)&type metadata for Spacer, (uint64_t)&protocol witness table for Spacer, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SpacerLayoutComputer.Engine);
    unint64_t v0 = type metadata accessor for LayoutEngineBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LayoutEngineBox<SpacerLayoutComputer<Spacer>.Engine>);
    }
  }
}

void partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:)(uint64_t a1@<X8>)
{
  uint64_t v2 = *(uint64_t **)(v1 + 16);
  uint64_t v3 = *v2;
  char v4 = *((unsigned char *)v2 + 8);
  LOBYTE(v2) = *((unsigned char *)v2 + 9);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 9) = (_BYTE)v2;
}

void type metadata accessor for LayoutEngineBox<UnaryLayoutEngine<_FrameLayout>>()
{
  if (!lazy cache variable for type metadata for LayoutEngineBox<UnaryLayoutEngine<_FrameLayout>>)
  {
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for UnaryLayoutEngine<_FrameLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _FrameLayout and conformance _FrameLayout, (uint64_t)&type metadata for _FrameLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    unint64_t v0 = type metadata accessor for LayoutEngineBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LayoutEngineBox<UnaryLayoutEngine<_FrameLayout>>);
    }
  }
}

void type metadata accessor for LayoutEngineBox<UnaryLayoutEngine<_FlexFrameLayout>>()
{
  if (!lazy cache variable for type metadata for LayoutEngineBox<UnaryLayoutEngine<_FlexFrameLayout>>)
  {
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for UnaryLayoutEngine<_FlexFrameLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _FlexFrameLayout and conformance _FlexFrameLayout, (uint64_t)&type metadata for _FlexFrameLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    unint64_t v0 = type metadata accessor for LayoutEngineBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LayoutEngineBox<UnaryLayoutEngine<_FlexFrameLayout>>);
    }
  }
}

uint64_t one-time initialization function for opacity()
{
  type metadata accessor for ColorBox<Color.OpacityColor>(0, &lazy cache variable for type metadata for TransitionBox<OpacityTransition>, (uint64_t (*)(void))lazy protocol witness table accessor for type OpacityTransition and conformance OpacityTransition, (uint64_t)&type metadata for OpacityTransition, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TransitionBox);
  uint64_t result = swift_allocObject();
  static AnyTransition.opacitCGFloat y = result;
  return result;
}

void type metadata accessor for LayoutEngineBox<LayoutComputer.DefaultEngine>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, ValueMetadata *, _UNKNOWN **))
{
  if (!*a2)
  {
    unint64_t v4 = a3(0, &type metadata for LayoutComputer.DefaultEngine, &protocol witness table for LayoutComputer.DefaultEngine);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t one-time initialization function for default()
{
  type metadata accessor for InternalAnimationBox<BezierAnimation>(0, &lazy cache variable for type metadata for InternalAnimationBox<DefaultAnimation>, (void (*)(void))lazy protocol witness table accessor for type DefaultAnimation and conformance DefaultAnimation);
  uint64_t result = swift_allocObject();
  static Animation.default = result;
  return result;
}

{
  unsigned int v0;
  uint64_t result;
  char v2;

  if (one-time initialization token for v4 != -1) {
    swift_once();
  }
  unint64_t v0 = static Semantics.v4;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC) {
    uint64_t result = dyld_program_sdk_at_least();
  }
  else {
    uint64_t result = static Semantics.forced >= v0;
  }
  if (result) {
    uint64_t v2 = 2;
  }
  else {
    uint64_t v2 = 0;
  }
  static ResolvedGradient.ColorSpace.default = v2;
  return result;
}

double static Animation.easeIn(duration:)(double a1)
{
  type metadata accessor for InternalAnimationBox<BezierAnimation>();
  uint64_t v2 = swift_allocObject();
  *(double *)(v2 + 16) = a1;
  *(_OWORD *)(v2 + 24) = xmmword_246203E70;
  *(_OWORD *)(v2 + 40) = xmmword_246203E60;
  double result = 3.0;
  *(_OWORD *)(v2 + 56) = xmmword_2461E9BC0;
  return result;
}

double static Animation.easeInOut.getter()
{
  type metadata accessor for InternalAnimationBox<BezierAnimation>();
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_2461C0DA0;
  *(_OWORD *)(v0 + 32) = xmmword_2461C0DB0;
  double result = -2.0;
  *(_OWORD *)(v0 + 48) = xmmword_2461C0DC0;
  *(void *)(v0 + 64) = 0;
  return result;
}

double *static Animation.timingCurve(_:_:_:_:duration:)(double a1, double a2, double a3, double a4, double a5)
{
  double v6 = a1 * 3.0;
  double v7 = (a3 - a1) * 3.0 - a1 * 3.0;
  double v8 = 1.0 - a1 * 3.0 - v7;
  double v9 = a2 * 3.0;
  double v10 = (a4 - a2) * 3.0;
  double v11 = v10 - v9;
  double v12 = 1.0 - v9 - (v10 - v9);
  type metadata accessor for InternalAnimationBox<BezierAnimation>();
  double result = (double *)swift_allocObject();
  result[2] = a5;
  result[3] = v8;
  result[4] = v7;
  result[5] = v6;
  result[6] = v12;
  result[7] = v11;
  result[8] = v9;
  return result;
}

double static Animation.easeOut(duration:)(double a1)
{
  type metadata accessor for InternalAnimationBox<BezierAnimation>();
  uint64_t v2 = swift_allocObject();
  *(double *)(v2 + 16) = a1;
  *(_OWORD *)(v2 + 24) = xmmword_246203EA0;
  *(_OWORD *)(v2 + 40) = xmmword_2461B9DE0;
  double result = 3.0;
  *(_OWORD *)(v2 + 56) = xmmword_2461E9BC0;
  return result;
}

double static Animation.linear(duration:)(double a1)
{
  type metadata accessor for InternalAnimationBox<BezierAnimation>();
  uint64_t v2 = swift_allocObject();
  *(double *)(v2 + 16) = a1;
  *(_OWORD *)(v2 + 24) = xmmword_2461C0DC0;
  *(_OWORD *)(v2 + 40) = xmmword_2461B9DE0;
  double result = 3.0;
  *(_OWORD *)(v2 + 56) = xmmword_2461E9BC0;
  return result;
}

double static Animation.easeInOut(duration:)(double a1)
{
  type metadata accessor for InternalAnimationBox<BezierAnimation>();
  uint64_t v2 = swift_allocObject();
  *(double *)(v2 + 16) = a1;
  *(_OWORD *)(v2 + 24) = xmmword_246203E50;
  *(_OWORD *)(v2 + 40) = xmmword_246203E60;
  double result = 3.0;
  *(_OWORD *)(v2 + 56) = xmmword_2461E9BC0;
  return result;
}

double static Animation.coreAnimationDefault(duration:)(double a1)
{
  type metadata accessor for InternalAnimationBox<BezierAnimation>();
  uint64_t v2 = swift_allocObject();
  *(double *)(v2 + 16) = a1;
  *(_OWORD *)(v2 + 24) = xmmword_246203EE0;
  *(_OWORD *)(v2 + 40) = xmmword_246203EF0;
  double result = 2.4;
  *(_OWORD *)(v2 + 56) = xmmword_246203F00;
  return result;
}

void type metadata accessor for InternalAnimationBox<BezierAnimation>()
{
  if (!lazy cache variable for type metadata for InternalAnimationBox<BezierAnimation>)
  {
    lazy protocol witness table accessor for type BezierAnimation and conformance BezierAnimation();
    unint64_t v0 = type metadata accessor for InternalAnimationBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for InternalAnimationBox<BezierAnimation>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type BezierAnimation and conformance BezierAnimation()
{
  unint64_t result = lazy protocol witness table cache variable for type BezierAnimation and conformance BezierAnimation;
  if (!lazy protocol witness table cache variable for type BezierAnimation and conformance BezierAnimation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BezierAnimation and conformance BezierAnimation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BezierAnimation and conformance BezierAnimation;
  if (!lazy protocol witness table cache variable for type BezierAnimation and conformance BezierAnimation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BezierAnimation and conformance BezierAnimation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BezierAnimation and conformance BezierAnimation;
  if (!lazy protocol witness table cache variable for type BezierAnimation and conformance BezierAnimation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BezierAnimation and conformance BezierAnimation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BezierAnimation and conformance BezierAnimation;
  if (!lazy protocol witness table cache variable for type BezierAnimation and conformance BezierAnimation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BezierAnimation and conformance BezierAnimation);
  }
  return result;
}

void type metadata accessor for InternalAnimationBox<BezierAnimation>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for InternalAnimationBox();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t static CustomAnimationModifiedContent.== infix(_:_:)()
{
  if (dispatch thunk of static Equatable.== infix(_:_:)())
  {
    type metadata accessor for CustomAnimationModifiedContent();
    char v0 = dispatch thunk of static Equatable.== infix(_:_:)();
  }
  else
  {
    char v0 = 0;
  }
  return v0 & 1;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance BezierAnimation(uint64_t a1, uint64_t a2)
{
  if (*(double *)a1 == *(double *)a2)
  {
    float64x2_t v2 = *(float64x2_t *)(a1 + 24);
    v7[0] = *(float64x2_t *)(a1 + 8);
    v7[1] = v2;
    v7[2] = *(float64x2_t *)(a1 + 40);
    float64x2_t v3 = *(float64x2_t *)(a2 + 24);
    v6[0] = *(float64x2_t *)(a2 + 8);
    v6[1] = v3;
    v6[2] = *(float64x2_t *)(a2 + 40);
    return specialized static UnitCurve.CubicSolver.== infix(_:_:)(v7, v6);
  }
  else
  {
    return 0;
  }
}

BOOL specialized static UnitCurve.CubicSolver.== infix(_:_:)(float64x2_t *a1, float64x2_t *a2)
{
  BOOL result = 0;
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*a1, *a2), (int32x4_t)vceqq_f64(a1[1], a2[1]))), 0xFuLL))) & 1) != 0&& a1[2].f64[0] == a2[2].f64[0])
  {
    return a1[2].f64[1] == a2[2].f64[1];
  }
  return result;
}

uint64_t Animation.delay(_:)(uint64_t a1, double a2)
{
  double v5 = a2;
  float64x2_t v2 = *(uint64_t (**)(double *, ValueMetadata *, unint64_t))(*(void *)a1 + 144);
  unint64_t v3 = lazy protocol witness table accessor for type DelayAnimation and conformance DelayAnimation();
  return v2(&v5, &type metadata for DelayAnimation, v3);
}

uint64_t InternalAnimationBox.modifier<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v23 = a3;
  uint64_t v24 = a1;
  double v5 = *(void **)v3;
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  double v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = v5[27];
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v11);
  int v13 = (char *)&v21 - v12;
  uint64_t v22 = v5[28];
  uint64_t v25 = v9;
  uint64_t v26 = v14;
  uint64_t v27 = v22;
  uint64_t v28 = v15;
  uint64_t v16 = type metadata accessor for InternalCustomAnimationModifiedContent();
  double v17 = MEMORY[0x270FA5388](v16);
  char v19 = (char *)&v21 - v18;
  (*(void (**)(char *, char *, uint64_t, double))(v10 + 16))(v13, &v3[v5[22]], v9, v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v24, a2);
  InternalCustomAnimationModifiedContent.init(base:modifier:)((uint64_t)v13, (uint64_t)v8, v9, a2, (uint64_t)v19);
  swift_getWitnessTable();
  type metadata accessor for InternalAnimationBox();
  return ColorBox.__allocating_init(_:)((uint64_t)v19);
}

uint64_t type metadata accessor for InternalAnimationBox()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for InternalCustomAnimationModifiedContent()
{
  return swift_getGenericMetadata();
}

uint64_t InternalCustomAnimationModifiedContent.init(base:modifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return CustomAnimationModifiedContent.init(base:modifier:)(a1, a2, a3, a4, a5);
}

uint64_t CustomAnimationModifiedContent.init(base:modifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a5, a1);
  uint64_t v8 = type metadata accessor for CustomAnimationModifiedContent();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(v8 + 52), a2, a4);
}

uint64_t InternalCustomAnimationModifiedContent.animate<A>(value:time:context:)(uint64_t a1, uint64_t a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = (void *)type metadata accessor for CustomAnimationModifiedContent();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, void, void, double, void))(v12[5] + 16))(v6, a1, a2, a5, v12[2], a6, v12[4], v12[3], a3, v12[5]);
}

uint64_t type metadata accessor for CustomAnimationModifiedContent()
{
  return swift_getGenericMetadata();
}

uint64_t protocol witness for CustomAnimationModifier.animate<A, B>(base:value:time:context:) in conformance DelayAnimation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, __n128 a8)
{
  return DelayAnimation.animate<A, B>(base:value:time:context:)(a8, *v8, a1, a2, a3, a4, a5, a6, a7);
}

uint64_t DelayAnimation.animate<A, B>(base:value:time:context:)(__n128 a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  a1.n128_f64[0] = a1.n128_f64[0] - a2;
  if (a1.n128_f64[0] <= 0.0) {
    a1.n128_f64[0] = 0.0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))(a9 + 16))(a4, a5, a6, a8, a7, a9, a1);
}

unint64_t lazy protocol witness table accessor for type DelayAnimation and conformance DelayAnimation()
{
  unint64_t result = lazy protocol witness table cache variable for type DelayAnimation and conformance DelayAnimation;
  if (!lazy protocol witness table cache variable for type DelayAnimation and conformance DelayAnimation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DelayAnimation and conformance DelayAnimation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DelayAnimation and conformance DelayAnimation;
  if (!lazy protocol witness table cache variable for type DelayAnimation and conformance DelayAnimation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DelayAnimation and conformance DelayAnimation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DelayAnimation and conformance DelayAnimation;
  if (!lazy protocol witness table cache variable for type DelayAnimation and conformance DelayAnimation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DelayAnimation and conformance DelayAnimation);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DefaultAnimation and conformance DefaultAnimation()
{
  unint64_t result = lazy protocol witness table cache variable for type DefaultAnimation and conformance DefaultAnimation;
  if (!lazy protocol witness table cache variable for type DefaultAnimation and conformance DefaultAnimation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultAnimation and conformance DefaultAnimation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DefaultAnimation and conformance DefaultAnimation;
  if (!lazy protocol witness table cache variable for type DefaultAnimation and conformance DefaultAnimation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultAnimation and conformance DefaultAnimation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DefaultAnimation and conformance DefaultAnimation;
  if (!lazy protocol witness table cache variable for type DefaultAnimation and conformance DefaultAnimation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultAnimation and conformance DefaultAnimation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DefaultAnimation and conformance DefaultAnimation;
  if (!lazy protocol witness table cache variable for type DefaultAnimation and conformance DefaultAnimation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultAnimation and conformance DefaultAnimation);
  }
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Spring(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

_DWORD *specialized static Animatable._makeAnimatable(value:inputs:)(_DWORD *result, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if ((*(unsigned char *)(a2 + 36) & 1) == 0)
  {
    float64x2_t v2 = result;
    int v3 = *(_DWORD *)(a2 + 8);
    uint64_t v4 = *(void *)(a2 + 16);
    int v5 = *(_DWORD *)(a2 + 24);
    int v6 = *(_DWORD *)(a2 + 28);
    int v7 = *result;
    swift_beginAccess();
    int v8 = *(_DWORD *)(v4 + 16);
    v11[0] = v7;
    v11[1] = v8;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    v11[2] = v5;
    v11[3] = v3;
    int v15 = 0;
    v11[4] = v6;
    outlined init with copy of AnimatableAttribute<AnyShape>((uint64_t)v11, (uint64_t)v10, &lazy cache variable for type metadata for AnimatableAttribute<AnyShape>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyShape and conformance AnyShape, (uint64_t)&type metadata for AnyShape);
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ColorBox<Color.OpacityColor>(0, &lazy cache variable for type metadata for AnimatableAttribute<AnyShape>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyShape and conformance AnyShape, (uint64_t)&type metadata for AnyShape, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<AnyShape> and conformance AnimatableAttribute<A>();
    int v9 = Attribute.init<A>(body:value:flags:update:)();
    outlined destroy of AnimatableAttribute<AnyShape>((uint64_t)v10, &lazy cache variable for type metadata for AnimatableAttribute<AnyShape>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyShape and conformance AnyShape, (uint64_t)&type metadata for AnyShape);
    outlined destroy of AnimatableAttribute<AnyShape>((uint64_t)v11, &lazy cache variable for type metadata for AnimatableAttribute<AnyShape>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyShape and conformance AnyShape, (uint64_t)&type metadata for AnyShape);
    *float64x2_t v2 = v9;
    AGGraphGetFlags();
    return (_DWORD *)AGGraphSetFlags();
  }
  return result;
}

{
  _DWORD *v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  unsigned char v10[80];
  _DWORD v11[6];
  long long v12;
  long long v13;
  long long v14;
  int v15;
  uint64_t v16;

  uint64_t v16 = *MEMORY[0x263EF8340];
  if ((*(unsigned char *)(a2 + 36) & 1) == 0)
  {
    float64x2_t v2 = result;
    int v3 = *(_DWORD *)(a2 + 8);
    uint64_t v4 = *(void *)(a2 + 16);
    int v5 = *(_DWORD *)(a2 + 24);
    int v6 = *(_DWORD *)(a2 + 28);
    int v7 = *result;
    swift_beginAccess();
    int v8 = *(_DWORD *)(v4 + 16);
    v11[0] = v7;
    v11[1] = v8;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    v11[2] = v5;
    v11[3] = v3;
    int v15 = 0;
    v11[4] = v6;
    outlined init with copy of AnimatableAttribute<AnyShape>((uint64_t)v11, (uint64_t)v10, &lazy cache variable for type metadata for AnimatableAttribute<AnyLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyLayout and conformance AnyLayout, (uint64_t)&type metadata for AnyLayout);
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ColorBox<Color.OpacityColor>(0, &lazy cache variable for type metadata for AnimatableAttribute<AnyLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyLayout and conformance AnyLayout, (uint64_t)&type metadata for AnyLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    lazy protocol witness table accessor for type AnimatableAttribute<AnyLayout> and conformance AnimatableAttribute<A>();
    int v9 = Attribute.init<A>(body:value:flags:update:)();
    outlined destroy of AnimatableAttribute<AnyShape>((uint64_t)v10, &lazy cache variable for type metadata for AnimatableAttribute<AnyLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyLayout and conformance AnyLayout, (uint64_t)&type metadata for AnyLayout);
    outlined destroy of AnimatableAttribute<AnyShape>((uint64_t)v11, &lazy cache variable for type metadata for AnimatableAttribute<AnyLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyLayout and conformance AnyLayout, (uint64_t)&type metadata for AnyLayout);
    *float64x2_t v2 = v9;
    AGGraphGetFlags();
    return (_DWORD *)AGGraphSetFlags();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<AnyShape> and conformance AnimatableAttribute<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatableAttribute<AnyShape> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<AnyShape> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for ColorBox<Color.OpacityColor>(255, &lazy cache variable for type metadata for AnimatableAttribute<AnyShape>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyShape and conformance AnyShape, (uint64_t)&type metadata for AnyShape, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<AnyShape> and conformance AnimatableAttribute<A>);
  }
  return result;
}

uint64_t Attribute<A>.animated(inputs:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *a1;
  int v8 = *((_DWORD *)a1 + 2);
  uint64_t v9 = a1[2];
  uint64_t v10 = a1[5];
  _GraphValue.init(_:)(a2, &v17);
  uint64_t v12 = v7;
  int v13 = v8;
  uint64_t v14 = v9;
  long long v15 = *(_OWORD *)(a1 + 3);
  uint64_t v16 = v10;
  (*(void (**)(unsigned int *, uint64_t *, uint64_t, uint64_t))(a4 + 48))(&v17, &v12, a3, a4);
  return v17;
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance EdgeInsets(uint64_t a1, _OWORD *a2)
{
  long long v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<EdgeInsets> and conformance AnimatableAttribute<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatableAttribute<EdgeInsets> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<EdgeInsets> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for ColorBox<Color.OpacityColor>(255, &lazy cache variable for type metadata for AnimatableAttribute<EdgeInsets>, (uint64_t (*)(void))lazy protocol witness table accessor for type EdgeInsets and conformance EdgeInsets, (uint64_t)&type metadata for EdgeInsets, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<EdgeInsets> and conformance AnimatableAttribute<A>);
  }
  return result;
}

uint64_t outlined destroy of AnimatableAttribute<AnyShape>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  type metadata accessor for ColorBox<Color.OpacityColor>(0, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t destroy for AnimatableAttribute(uint64_t a1)
{
  unint64_t v1 = (a1 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80)
      + ((((v1 + (*(unsigned __int8 *)(v3 + 80) | 7) + 4) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80) & 0xFFFFFFFFFFFFFFF8)
        + 11) & 0xFFFFFFFFFFFFFFF8)
      + 4) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, AssociatedTypeWitness)) {
    (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v4, AssociatedTypeWitness);
  }

  return swift_release();
}

uint64_t getEnumTagSinglePayload for LinearGradient(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t Color.opacity(_:)(uint64_t a1, double a2)
{
  _s7SwiftUI8ColorBox33_3A792CB70CFCF892676D7ADF8BCA260FLLCyAA0C0V07OpacityC033_F28C5F7FF836E967BAC87540A3CB4F65LLVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<Color.OpacityColor>, (void (*)(void))lazy protocol witness table accessor for type Color.OpacityColor and conformance Color.OpacityColor);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(double *)(v4 + 24) = a2;
  swift_retain();
  return v4;
}

void type metadata accessor for ColorBox<Color.OpacityColor>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

void _s7SwiftUI8ColorBox33_3A792CB70CFCF892676D7ADF8BCA260FLLCyAA0C0V07OpacityC033_F28C5F7FF836E967BAC87540A3CB4F65LLVGMaTm_0(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for ColorBox();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void _s7SwiftUI8ColorBox33_3A792CB70CFCF892676D7ADF8BCA260FLLCyAA0C0V07OpacityC033_F28C5F7FF836E967BAC87540A3CB4F65LLVGMaTm_1(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for ColorBox();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t StatefulRule<>.updateIfNotEqual<A>(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Outputuint64_t Value = AGGraphGetOutputValue();
  if (OutputValue)
  {
    uint64_t v9 = *(uint64_t **)OutputValue;
    uint64_t v10 = *(void *)(OutputValue + 8);
    type metadata accessor for LayoutEngineBox();
    uint64_t v11 = swift_dynamicCastClassUnconditional();
    uint64_t v12 = v11 + *(void *)(*(void *)v11 + 176);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v12, a3);
    swift_retain();
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, a3);
    if ((v13 & 1) == 0)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(v12, a1, a3);
      uint64_t v16 = v9;
      uint64_t v17 = v10 + 1;
      AGGraphSetOutputValue();
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, a3);
    LayoutComputer.init<A>(_:)((uint64_t)v7, a3, &v16);
    v15[1] = v16;
    v15[2] = v17;
    AGGraphSetOutputValue();
  }
  return swift_release();
}

uint64_t Color.init<A>(provider:)(uint64_t a1)
{
  return ColorBox.__allocating_init(_:)(a1);
}

uint64_t LayoutComputer.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  int v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  if (static LayoutTrace.recorder)
  {
    type metadata accessor for TracingLayoutEngineBox();
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, a2);
    swift_allocObject();
    uint64_t v9 = TracingLayoutEngineBox.init(_:)(v8);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
  }
  else
  {
    type metadata accessor for LayoutEngineBox();
    uint64_t result = ColorBox.__allocating_init(_:)(a1);
    uint64_t v9 = (uint64_t *)result;
  }
  *a3 = v9;
  a3[1] = 0;
  return result;
}

uint64_t ColorBox.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v2 + 160) - 8) + 32))(v2 + *(void *)(*(void *)v2 + 176), a1);
  return v2;
}

uint64_t type metadata accessor for LayoutEngineBox()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for ColorBox()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t outlined init with copy of AnimatableAttribute<AnyShape>(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(void), uint64_t a5)
{
  type metadata accessor for ColorBox<Color.OpacityColor>(0, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<AnyLayout> and conformance AnimatableAttribute<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatableAttribute<AnyLayout> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<AnyLayout> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for ColorBox<Color.OpacityColor>(255, &lazy cache variable for type metadata for AnimatableAttribute<AnyLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyLayout and conformance AnyLayout, (uint64_t)&type metadata for AnyLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<AnyLayout> and conformance AnimatableAttribute<A>);
  }
  return result;
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance ViewFrame(uint64_t a1, _OWORD *a2)
{
  long long v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

unint64_t lazy protocol witness table accessor for type AnimatableAttribute<ViewFrame> and conformance AnimatableAttribute<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimatableAttribute<ViewFrame> and conformance AnimatableAttribute<A>;
  if (!lazy protocol witness table cache variable for type AnimatableAttribute<ViewFrame> and conformance AnimatableAttribute<A>)
  {
    type metadata accessor for ColorBox<Color.OpacityColor>(255, &lazy cache variable for type metadata for AnimatableAttribute<ViewFrame>, (uint64_t (*)(void))lazy protocol witness table accessor for type ViewFrame and conformance ViewFrame, (uint64_t)&type metadata for ViewFrame, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatableAttribute);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimatableAttribute<ViewFrame> and conformance AnimatableAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type OpacityTransition and conformance OpacityTransition()
{
  unint64_t result = lazy protocol witness table cache variable for type OpacityTransition and conformance OpacityTransition;
  if (!lazy protocol witness table cache variable for type OpacityTransition and conformance OpacityTransition)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpacityTransition and conformance OpacityTransition);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for RoundedRectangle(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type RoundedRectangle and conformance RoundedRectangle();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table accessor for type RoundedRectangle and conformance RoundedRectangle();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type RoundedRectangle and conformance RoundedRectangle()
{
  unint64_t result = lazy protocol witness table cache variable for type RoundedRectangle and conformance RoundedRectangle;
  if (!lazy protocol witness table cache variable for type RoundedRectangle and conformance RoundedRectangle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RoundedRectangle and conformance RoundedRectangle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RoundedRectangle and conformance RoundedRectangle;
  if (!lazy protocol witness table cache variable for type RoundedRectangle and conformance RoundedRectangle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RoundedRectangle and conformance RoundedRectangle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SystemColorType and conformance SystemColorType()
{
  unint64_t result = lazy protocol witness table cache variable for type SystemColorType and conformance SystemColorType;
  if (!lazy protocol witness table cache variable for type SystemColorType and conformance SystemColorType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemColorType and conformance SystemColorType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SystemColorType and conformance SystemColorType;
  if (!lazy protocol witness table cache variable for type SystemColorType and conformance SystemColorType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemColorType and conformance SystemColorType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SystemColorType and conformance SystemColorType;
  if (!lazy protocol witness table cache variable for type SystemColorType and conformance SystemColorType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemColorType and conformance SystemColorType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Color.OpacityColor and conformance Color.OpacityColor()
{
  unint64_t result = lazy protocol witness table cache variable for type Color.OpacityColor and conformance Color.OpacityColor;
  if (!lazy protocol witness table cache variable for type Color.OpacityColor and conformance Color.OpacityColor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.OpacityColor and conformance Color.OpacityColor);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Color.OpacityColor and conformance Color.OpacityColor;
  if (!lazy protocol witness table cache variable for type Color.OpacityColor and conformance Color.OpacityColor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.OpacityColor and conformance Color.OpacityColor);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Color.OpacityColor and conformance Color.OpacityColor;
  if (!lazy protocol witness table cache variable for type Color.OpacityColor and conformance Color.OpacityColor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.OpacityColor and conformance Color.OpacityColor);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ViewFrame and conformance ViewFrame()
{
  unint64_t result = lazy protocol witness table cache variable for type ViewFrame and conformance ViewFrame;
  if (!lazy protocol witness table cache variable for type ViewFrame and conformance ViewFrame)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewFrame and conformance ViewFrame);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EdgeInsets and conformance EdgeInsets()
{
  unint64_t result = lazy protocol witness table cache variable for type EdgeInsets and conformance EdgeInsets;
  if (!lazy protocol witness table cache variable for type EdgeInsets and conformance EdgeInsets)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EdgeInsets and conformance EdgeInsets);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for AnyLayout(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AnyLayout and conformance AnyLayout();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AnyLayout and conformance AnyLayout()
{
  unint64_t result = lazy protocol witness table cache variable for type AnyLayout and conformance AnyLayout;
  if (!lazy protocol witness table cache variable for type AnyLayout and conformance AnyLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyLayout and conformance AnyLayout);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for UnevenRoundedRectangle(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type UnevenRoundedRectangle and conformance UnevenRoundedRectangle();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table accessor for type UnevenRoundedRectangle and conformance UnevenRoundedRectangle();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type UnevenRoundedRectangle and conformance UnevenRoundedRectangle()
{
  unint64_t result = lazy protocol witness table cache variable for type UnevenRoundedRectangle and conformance UnevenRoundedRectangle;
  if (!lazy protocol witness table cache variable for type UnevenRoundedRectangle and conformance UnevenRoundedRectangle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnevenRoundedRectangle and conformance UnevenRoundedRectangle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UnevenRoundedRectangle and conformance UnevenRoundedRectangle;
  if (!lazy protocol witness table cache variable for type UnevenRoundedRectangle and conformance UnevenRoundedRectangle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnevenRoundedRectangle and conformance UnevenRoundedRectangle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type VariableBlurStyle and conformance VariableBlurStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type VariableBlurStyle and conformance VariableBlurStyle;
  if (!lazy protocol witness table cache variable for type VariableBlurStyle and conformance VariableBlurStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VariableBlurStyle and conformance VariableBlurStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ShadowEffect._Resolved and conformance _ShadowEffect._Resolved()
{
  unint64_t result = lazy protocol witness table cache variable for type _ShadowEffect._Resolved and conformance _ShadowEffect._Resolved;
  if (!lazy protocol witness table cache variable for type _ShadowEffect._Resolved and conformance _ShadowEffect._Resolved)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShadowEffect._Resolved and conformance _ShadowEffect._Resolved);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _BlurEffect and conformance _BlurEffect()
{
  unint64_t result = lazy protocol witness table cache variable for type _BlurEffect and conformance _BlurEffect;
  if (!lazy protocol witness table cache variable for type _BlurEffect and conformance _BlurEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _BlurEffect and conformance _BlurEffect);
  }
  return result;
}

uint64_t EnvironmentValues.accentColor.getter()
{
  uint64_t v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v2 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    swift_release_n();
    swift_release_n();
    return v2;
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    uint64_t v5 = specialized closure #1 in PropertyList.subscript.getter(v4, (uint64_t)&v6);
    swift_release_n();
    return v5;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AGSubgraphRef()
{
  swift_getWitnessTable();

  return static _CFObject.== infix(_:_:)();
}

uint64_t DisplayList.ViewRenderer.init(platform:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *(void *)(v1 + 48) = 0;
  *(void *)(v1 + 24) = 0;
  *(void *)(v1 + 32) = 0;
  swift_unknownObjectWeakInit();
  *(unsigned char *)(v1 + 56) = 0;
  *(void *)(v1 + 64) = 0;
  *(void *)(v1 + 72) = 0;
  *(unsigned char *)(v1 + 80) = 1;
  *(void *)(v1 + 16) = v2;
  return v1;
}

uint64_t IndirectAttributeMap.__allocating_init(subgraph:)(uint64_t a1)
{
  uint64_t result = swift_allocObject();
  uint64_t v3 = MEMORY[0x263F8EE80];
  *(void *)(result + 16) = a1;
  *(void *)(result + 24) = v3;
  return result;
}

void *type metadata accessor for GeometryReaderLayout()
{
  return &unk_26FA61408;
}

void static SymbolRenderingMode.palette.getter(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t View.offset(x:y:)(uint64_t a1, double a2, double a3)
{
  *(double *)uint64_t v4 = a2;
  *(double *)&v4[1] = a3;
  return View.modifier<A>(_:)(v4, a1, &type metadata for _OffsetEffect);
}

uint64_t View.simultaneousGesture<A>(_:including:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return View.gesture<A>(_:including:)(a1, a2, a3, a4, a5, a6, (uint64_t)type metadata accessor for SimultaneousGestureModifier, (void (*)(char *, void, void, uint64_t, uint64_t, uint64_t))SimultaneousGestureModifier.init(_:name:gestureMask:));
}

uint64_t VerticalEdge.rawValue.getter(char a1)
{
  return a1 & 1;
}

uint64_t _ViewInputs.opacityAccessibilityProvider.setter(uint64_t a1, uint64_t a2)
{
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, a1, a2);
  return swift_release();
}

void protocol witness for Hashable.hash(into:) in conformance Font.PlatformFontProvider()
{
  uint64_t v1 = *v0;
  type metadata accessor for CTFontRef(0);
  lazy protocol witness table accessor for type CTFontRef and conformance CTFontRef();
  id v2 = v1;
  _CFObject.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Font.PlatformFontProvider()
{
  return static _CFObject.== infix(_:_:)() & 1;
}

unint64_t lazy protocol witness table accessor for type CTFontRef and conformance CTFontRef()
{
  unint64_t result = lazy protocol witness table cache variable for type CTFontRef and conformance CTFontRef;
  if (!lazy protocol witness table cache variable for type CTFontRef and conformance CTFontRef)
  {
    type metadata accessor for CTFontRef(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CTFontRef and conformance CTFontRef);
  }
  return result;
}

uint64_t View.compositingGroup()(uint64_t a1)
{
  return View.modifier<A>(_:)(a1, a1, &type metadata for _CompositingGroupEffect);
}

void *ViewTransform.append(movingContentsOf:)(uint64_t *a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  uint64_t v6 = *a1;
  type metadata accessor for BufferedElement();
  unint64_t result = (void *)swift_allocObject();
  result[4] = v4;
  result[5] = v5;
  result[6] = v6;
  result[7] = a1[1];
  result[2] = v3;
  if (v3)
  {
    uint64_t v8 = *(void *)(v3 + 24);
    BOOL v9 = __OFADD__(v8, 1);
    uint64_t v10 = v8 + 1;
    if (!v9) {
      goto LABEL_6;
    }
    __break(1u);
  }
  uint64_t v10 = 1;
LABEL_6:
  result[3] = v10;
  *uint64_t v1 = (uint64_t)result;
  v1[3] = 0;
  v1[4] = 0;
  *a1 = 0;
  a1[1] = 0;
  return result;
}

uint64_t type metadata accessor for BufferedElement()
{
  return self;
}

ValueMetadata *type metadata accessor for _SafeAreaIgnoringLayout()
{
  return &type metadata for _SafeAreaIgnoringLayout;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<AccessibilityDimFlashingLightsKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<AccessibilityDimFlashingLightsKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityDimFlashingLightsKey>, (uint64_t)&type metadata for AccessibilityDimFlashingLightsKey, (uint64_t)&protocol witness table for AccessibilityDimFlashingLightsKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityDimFlashingLightsKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<AccessibilityDimFlashingLightsKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityDimFlashingLightsKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityDimFlashingLightsKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityDimFlashingLightsKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityDimFlashingLightsKey>, (uint64_t)&type metadata for AccessibilityDimFlashingLightsKey, (uint64_t)&protocol witness table for AccessibilityDimFlashingLightsKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityDimFlashingLightsKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<AccessibilityPlayAnimatedImagesKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<AccessibilityPlayAnimatedImagesKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityPlayAnimatedImagesKey>, (uint64_t)&type metadata for AccessibilityPlayAnimatedImagesKey, (uint64_t)&protocol witness table for AccessibilityPlayAnimatedImagesKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityPlayAnimatedImagesKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<AccessibilityPlayAnimatedImagesKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityPlayAnimatedImagesKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityPlayAnimatedImagesKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityPlayAnimatedImagesKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityPlayAnimatedImagesKey>, (uint64_t)&type metadata for AccessibilityPlayAnimatedImagesKey, (uint64_t)&protocol witness table for AccessibilityPlayAnimatedImagesKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityPlayAnimatedImagesKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<AccessibilityOnOffLabelsKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<AccessibilityOnOffLabelsKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityOnOffLabelsKey>, (uint64_t)&type metadata for AccessibilityOnOffLabelsKey, (uint64_t)&protocol witness table for AccessibilityOnOffLabelsKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityOnOffLabelsKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<AccessibilityOnOffLabelsKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityOnOffLabelsKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityOnOffLabelsKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityOnOffLabelsKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityOnOffLabelsKey>, (uint64_t)&type metadata for AccessibilityOnOffLabelsKey, (uint64_t)&protocol witness table for AccessibilityOnOffLabelsKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityOnOffLabelsKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

SwiftUI::PreferenceValues __swiftcall GraphHost.preferenceValues()()
{
  uint64_t v1 = v0;
  GraphHost.instantiateIfNeeded()();
  swift_beginAccess();
  if (AGGraphGetWeakValue()) {
    result.entries._rawuint64_t Value = (void *)swift_bridgeObjectRetain();
  }
  else {
    result.entries._rawuint64_t Value = (void *)MEMORY[0x263F8EE78];
  }
  v1->entries._rawuint64_t Value = result.entries._rawValue;
  return result;
}

uint64_t storeEnumTagSinglePayload for CGAffineTransform(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)SwiftUI::PreferenceValues result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 48) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for Group(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ValueToScrollPosition<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance ScrollPositionToValue<A>(a1, a2, a3, (void (*)(unsigned char *))ValueToScrollPosition.hash(into:));
}

void static TypesettingLanguageAwareLineHeightRatio.disable.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 1;
  *(unsigned char *)(a1 + 8) = 1;
}

uint64_t ScrollGeometryTransformProvider.init(position:transform:)@<X0>(uint64_t result@<X0>, int a2@<W1>, _DWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t View.staticIf<A, B, C>(context:trueModifier:falseModifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v18 = type metadata accessor for StyleContextAcceptsPredicate();

  return View.staticIf<A, B, C>(_:trueModifier:falseModifier:)(v18, a2, a3, a4, a5, a6, v18, a8, a9, a10, (uint64_t)&protocol witness table for StyleContextAcceptsPredicate<A>, a12, a13);
}

uint64_t ViewModifier.requiring<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v7 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  unsigned int v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v11 == 1)
  {
    swift_checkMetadataState();
  }
  else
  {
    MEMORY[0x270FA5388](v8);
    long long v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v12)
    {
      unint64_t v16 = 0;
      if (v12 < 4) {
        goto LABEL_9;
      }
      if ((unint64_t)&v15[-v13] < 0x20) {
        goto LABEL_9;
      }
      unint64_t v16 = v12 & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t v17 = (long long *)(v13 + 16);
      uint64_t v18 = v15 + 16;
      unint64_t v19 = v12 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v20 = *v17;
        *(v18 - 1) = *(v17 - 1);
        *uint64_t v18 = v20;
        v17 += 2;
        v18 += 2;
        v19 -= 4;
      }
      while (v19);
      if (v16 != v12)
      {
LABEL_9:
        unint64_t v21 = v12 - v16;
        uint64_t v22 = 8 * v16;
        uint64_t v23 = &v15[8 * v16];
        uint64_t v24 = (uint64_t *)(v13 + v22);
        do
        {
          uint64_t v25 = *v24++;
          *(void *)uint64_t v23 = v25;
          v23 += 8;
          --v21;
        }
        while (v21);
      }
    }
    swift_getTupleTypeMetadata();
  }
  type metadata accessor for StyleContextAcceptsPredicate();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v4, a2);
  return StaticIf<>.init<>(_:then:)((uint64_t)v10, a2, a3);
}

uint64_t type metadata accessor for StyleContextAcceptsPredicate()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t StaticIf<>.init<>(_:then:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t static Font.caption.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for caption);
}

_OWORD *assignWithTake for ScrollPosition(_OWORD *a1, _OWORD *a2)
{
  if (a1 != a2)
  {
    outlined destroy of ScrollPosition.Storage((uint64_t)a1);
    long long v4 = a2[1];
    *a1 = *a2;
    a1[1] = v4;
    a1[2] = a2[2];
    *(_OWORD *)((char *)a1 + 42) = *(_OWORD *)((char *)a2 + 42);
  }
  a1[4] = a2[4];
  return a1;
}

uint64_t protocol witness for Location.set(_:transaction:) in conformance LocationBox<A>(uint64_t a1, uint64_t a2)
{
  return LocationBox.set(_:transaction:)(a1, a2);
}

uint64_t Binding.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  specialized Binding.wrappedValue.setter(a1);
  long long v4 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8);

  return v4(a1);
}

uint64_t specialized Binding.wrappedValue.setter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void))(**(void **)(v1 + 8) + 128))(a1, *(void *)v1);
}

uint64_t LocationBox.set(_:transaction:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  uint64_t v6 = *(void *)(*v2 + 168);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)&v12 - v8;
  uint64_t v10 = (uint64_t)v2 + *(void *)(v5 + 184);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v10, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 + 176) + 56))(a1, a2, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t protocol witness for Location.set(_:transaction:) in conformance Binding<A>.ScopedLocation(uint64_t a1, uint64_t a2)
{
  return Binding.ScopedLocation.set(_:transaction:)(a1, a2, *v2);
}

uint64_t Binding.ScopedLocation.set(_:transaction:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)a3 + 128))();
}

uint64_t ProjectedLocation.set(_:transaction:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = a3[4];
  uint64_t v7 = a3[2];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  double v10 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v12 = (char *)&v14 - v11;
  (*(void (**)(uint64_t, uint64_t, double))(v6 + 48))(v7, v6, v10);
  (*(void (**)(char *, uint64_t, void))(a3[5] + 40))(v12, a1, a3[3]);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v12, a2, v7, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, AssociatedTypeWitness);
}

uint64_t static Log.scroll.getter@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  if (static ScrollLogging.cachedValue != 2)
  {
    if (static ScrollLogging.cachedValue) {
      goto LABEL_6;
    }
LABEL_10:
    uint64_t v13 = type metadata accessor for Logger();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a1, 1, 1, v13);
  }
  id v2 = self;
  id v3 = objc_msgSend(v2, sel_standardUserDefaults);
  long long v4 = (void *)MEMORY[0x24C522820](0xD00000000000001FLL, 0x800000024621A750);
  id v5 = objc_msgSend(v3, sel_objectForKey_, v4);

  if (!v5)
  {
    memset(v14, 0, sizeof(v14));
    outlined destroy of UpdateScrollStateRequest?((uint64_t)v14, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0]);
    static ScrollLogging.cacheduint64_t Value = 0;
    goto LABEL_10;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined destroy of UpdateScrollStateRequest?((uint64_t)v14, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0]);
  id v6 = objc_msgSend(v2, sel_standardUserDefaults);
  uint64_t v7 = (void *)MEMORY[0x24C522820](0xD00000000000001FLL, 0x800000024621A750);
  unsigned __int8 v8 = objc_msgSend(v6, sel_BOOLForKey_, v7);

  static ScrollLogging.cacheduint64_t Value = v8;
  if ((v8 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_6:
  if (one-time initialization token for scrollLog != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = __swift_project_value_buffer(v9, (uint64_t)static Log.scrollLog);
  uint64_t v11 = *(void *)(v9 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(a1, v10, v9);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(a1, 0, 1, v9);
}

uint64_t ScrollPositionBindingModifier.AdjustedAnchor.value.getter()
{
  if (one-time initialization token for v6 != -1) {
    swift_once();
  }
  unsigned int v0 = static Semantics.v6;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC == 1)
  {
    if (dyld_program_sdk_at_least()) {
      goto LABEL_13;
    }
  }
  else if (static Semantics.forced >= v0)
  {
LABEL_13:
    _s7SwiftUI7BindingVyAA14ScrollPositionVGMaTm_0(0, &lazy cache variable for type metadata for UnitPoint?, (uint64_t)&type metadata for UnitPoint, MEMORY[0x263F8D8F0]);
    uint64_t Value = (long long *)AGGraphGetValue();
    return *(void *)Value;
  }
  _s7SwiftUI7BindingVyAA14ScrollPositionVGMaTm_0(0, &lazy cache variable for type metadata for UnitPoint?, (uint64_t)&type metadata for UnitPoint, MEMORY[0x263F8D8F0]);
  if (*(unsigned char *)(AGGraphGetValue() + 16) != 1) {
    goto LABEL_13;
  }
  if (one-time initialization token for topLeading != -1) {
    swift_once();
  }
  uint64_t Value = &static UnitPoint.topLeading;
  return *(void *)Value;
}

BOOL closure #2 in static ToggleState.stateFor<A, B>(item:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  id v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Binding();
  Binding.wrappedValue.getter(v7);
  char v8 = dispatch thunk of static Equatable.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, a3);
  return (v8 & 1) == 0;
}

uint64_t partial apply for closure #2 in static ToggleState.stateFor<A, B>(item:in:)(uint64_t a1)
{
  return partial apply for closure #1 in static ToggleState.stateFor<A, B>(item:in:)(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))closure #2 in static ToggleState.stateFor<A, B>(item:in:)) & 1;
}

uint64_t partial apply for closure #1 in static ToggleState.stateFor<A, B>(item:in:)(uint64_t a1)
{
  return partial apply for closure #1 in static ToggleState.stateFor<A, B>(item:in:)(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))closure #1 in static ToggleState.stateFor<A, B>(item:in:)) & 1;
}

uint64_t partial apply for closure #1 in static ToggleState.stateFor<A, B>(item:in:)(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void))
{
  return a2(a1, v2[6], v2[2], v2[3], v2[4], v2[5]) & 1;
}

uint64_t closure #1 in static ToggleState.stateFor<A, B>(item:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  id v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Binding();
  Binding.wrappedValue.getter(v7);
  char v8 = dispatch thunk of static Equatable.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, a3);
  return v8 & 1;
}

uint64_t ScrollGeometryStateProvider.value.getter()
{
  type metadata accessor for Binding<ScrollPosition>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ScrollGeometryState>, (uint64_t)&type metadata for ScrollGeometryState, MEMORY[0x263F8E0F8]);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_2461B9DC0;
  uint64_t Value = AGGraphGetValue();
  long long v12 = *(_OWORD *)Value;
  long long v10 = *(_OWORD *)(Value + 32);
  long long v11 = *(_OWORD *)(Value + 16);
  long long v8 = *(_OWORD *)(Value + 64);
  long long v9 = *(_OWORD *)(Value + 48);
  long long v7 = *(_OWORD *)(Value + 80);
  uint64_t v2 = *(void *)(Value + 96);
  uint64_t v3 = *(void *)(Value + 104);
  char v4 = *(unsigned char *)AGGraphGetValue();
  uint64_t v5 = AGCreateWeakAttribute();
  *(_OWORD *)(v0 + 32) = v12;
  *(_OWORD *)(v0 + 48) = v11;
  *(_OWORD *)(v0 + 64) = v10;
  *(_OWORD *)(v0 + 80) = v9;
  *(_OWORD *)(v0 + 96) = v8;
  *(_OWORD *)(v0 + 112) = v7;
  *(void *)(v0 + 128) = v2;
  *(void *)(v0 + 136) = v3;
  *(unsigned char *)(v0 + 144) = v4;
  *(void *)(v0 + 148) = v5;
  return v0;
}

uint64_t _GraphInputs.scrollPositionBinding(kind:)(char *a1)
{
  char v2 = *a1;
  uint64_t v3 = *v1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v2)
  {
    uint64_t v4 = specialized find<A>(_:key:)(v3);
    if (v4) {
      goto LABEL_3;
    }
LABEL_10:
    swift_bridgeObjectRelease();
    swift_release();
    swift_release_n();
    return *MEMORY[0x263F288F8];
  }
  uint64_t v4 = specialized find<A>(_:key:)(v3);
  if (!v4) {
    goto LABEL_10;
  }
LABEL_3:
  unsigned int v5 = *(unsigned __int8 *)(v4 + 76);
  unint64_t v6 = *(unsigned int *)(v4 + 72) | ((unint64_t)*(unsigned __int8 *)(v4 + 76) << 32);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  if (v5 <= 0xFEuLL && (v6 & 0x100000000) == 0) {
    return v6;
  }
  return *MEMORY[0x263F288F8];
}

Swift::Bool __swiftcall _GraphInputs.hasValueScrollPosition(kind:)(SwiftUI::ScrollStateInputKind kind)
{
  char v2 = *(unsigned char *)kind;
  uint64_t v3 = *v1;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v2)
  {
    uint64_t v4 = specialized find<A>(_:key:)(v3);
    if (!v4)
    {
LABEL_3:
      swift_bridgeObjectRelease();
      swift_release();
      swift_release_n();
      return 0;
    }
  }
  else
  {
    uint64_t v4 = specialized find<A>(_:key:)(v3);
    if (!v4) {
      goto LABEL_3;
    }
  }
  unint64_t v6 = *(unsigned __int8 *)(v4 + 76);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  return v6 < 0xFF;
}

Swift::Void __swiftcall ScrollStateRequestTransform.updateValue()()
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(v0 + 112) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    outlined destroy of ScrollStateRequest?(v0 + 72, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest?, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest, (uint64_t)&protocol descriptor for ScrollStateRequest);
    *(_OWORD *)(v0 + 72) = 0u;
    *(_OWORD *)(v0 + 88) = 0u;
    *(void *)(v0 + 104) = 0;
    *(_DWORD *)(v0 + 112) = *(_DWORD *)AGGraphGetValue() >> 1;
  }
  uint64_t v1 = *(void *)(v0 + 24);
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v2 = specialized find<A>(_:key:)(v1);
  if (!v2)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release_n();
    goto LABEL_8;
  }
  unint64_t v3 = *(unsigned __int8 *)(v2 + 76);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  if (v3 > 0xFE)
  {
LABEL_8:
    *(void *)&long long v31 = _ViewInputs.base.modify;
    *((void *)&v31 + 1) = 0;
    type metadata accessor for (_:)();
    AGGraphSetOutputValue();
    return;
  }
  uint64_t Value = (float64x2_t *)AGGraphGetValue();
  uint64_t v5 = AGGraphGetValue();
  unint64_t v6 = *(uint64_t (**)(void, void))v5;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v33 = 0u;
  memset(v32, 0, sizeof(v32));
  long long v31 = 0u;
  char v36 = 1;
  uint64_t v26 = v6;
  float64x2_t v7 = vsubq_f64(*(float64x2_t *)(v5 + 24), vsubq_f64(*Value, *(float64x2_t *)(v5 + 8)));
  float64x2_t v27 = *Value;
  float64x2_t v28 = v7;
  swift_retain();
  specialized ViewTransform.forEach(inverted:_:)(0, (uint64_t)&v26, (uint64_t)&v31);
  if (v36) {
    goto LABEL_32;
  }
  long long v8 = v33;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v9 = specialized find<A>(_:key:)(v1);
  if (v9)
  {
    long long v10 = (int *)(v9 + 72);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    long long v10 = &static _GraphInputs.ContentScrollPositionAnchorKey.defaultValue;
  }
  int v11 = *v10;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  int v12 = *MEMORY[0x263F288F8];
  if (v11 == *MEMORY[0x263F288F8]
    || (type metadata accessor for Binding<ScrollPosition>(0, &lazy cache variable for type metadata for UnitPoint?, (uint64_t)&type metadata for UnitPoint, MEMORY[0x263F8D8F0]), uint64_t v13 = (long long *)AGGraphGetValue(), (v13[1] & 1) != 0))
  {
    if (one-time initialization token for topLeading != -1) {
      swift_once();
    }
    uint64_t v13 = &static UnitPoint.topLeading;
  }
  double v15 = *(double *)v13;
  double v14 = *((double *)v13 + 1);
  if (*(unsigned char *)AGGraphGetValue()) {
    double v15 = 1.0 - v15;
  }
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v16 = specialized find<A>(_:key:)(v1);
  if (!v16)
  {
    swift_release();
LABEL_31:
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    goto LABEL_32;
  }
  unsigned int v17 = *(unsigned __int8 *)(v16 + 76);
  uint64_t v18 = *(unsigned int *)(v16 + 72);
  swift_release();
  if (v17 > 0xFEuLL) {
    goto LABEL_31;
  }
  unint64_t v19 = v18 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v17 << 32);
  if ((v19 & 0x100000000) != 0) {
    goto LABEL_31;
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (v12 != v19)
  {
    type metadata accessor for Binding<ScrollPosition>(0, &lazy cache variable for type metadata for Binding<ScrollPosition>, (uint64_t)&type metadata for ScrollPosition, (uint64_t (*)(void, uint64_t))type metadata accessor for Binding);
    uint64_t v20 = AGGraphGetValue();
    outlined init with copy of Binding<ScrollPosition>(v20, (uint64_t)&v31);
    if (one-time initialization token for _lock != -1) {
      swift_once();
    }
    if (_MovableLockIsOwner(static Update._lock) && static Update.dispatchDepth < static Update.depth)
    {
      (*(void (**)(uint64_t))(**((void **)&v31 + 1) + 104))(1);
      outlined init with copy of ScrollPosition((uint64_t)v32, (uint64_t)&v26);
    }
    else
    {
      (*(void (**)(uint64_t (**__return_ptr)(void, void)))(**((void **)&v31 + 1) + 120))(&v26);
    }
    uint64_t v21 = v29;
    uint64_t v22 = v30;
    outlined destroy of ScrollPosition((uint64_t)&v26);
    type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection);
    uint64_t v23 = AGGraphGetValue();
    outlined init with copy of AnyTrackedValue(v23, (uint64_t)v25);
    BOOL v24 = ScrollStateRequestTransform.findClosestSubview<A>(idType:position:anchor:collection:containerSize:)(v21, (uint64_t)&v31, v25, v21, v22, v15, v14, *(double *)&v8, *((double *)&v8 + 1));
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
    if (!v24)
    {
      uint64_t v26 = _ViewInputs.base.modify;
      v27.f64[0] = 0.0;
      type metadata accessor for (_:)();
      AGGraphSetOutputValue();
    }
    outlined destroy of UpdateScrollStateRequest?((uint64_t)&v31, &lazy cache variable for type metadata for Binding<ScrollPosition>, (uint64_t)&type metadata for ScrollPosition, (uint64_t (*)(void, uint64_t))type metadata accessor for Binding);
    goto LABEL_33;
  }
LABEL_32:
  long long v31 = (unint64_t)_ViewInputs.base.modify;
  type metadata accessor for (_:)();
  AGGraphSetOutputValue();
LABEL_33:
  swift_release();
}

uint64_t outlined init with copy of Binding<ScrollPosition>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Binding<ScrollPosition>(0, &lazy cache variable for type metadata for Binding<ScrollPosition>, (uint64_t)&type metadata for ScrollPosition, (uint64_t (*)(void, uint64_t))type metadata accessor for Binding);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for Binding<ScrollPosition>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI7BindingVyAA14ScrollPositionVGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t outlined destroy of UpdateScrollStateRequest?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  type metadata accessor for Binding<ScrollPosition>(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

BOOL ScrollStateRequestTransform.findClosestSubview<A>(idType:position:anchor:collection:containerSize:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, double a6, double a7, double a8, double a9)
{
  uint64_t v33 = a2;
  uint64_t v16 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v32 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for Optional();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)&v32 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v23 = MEMORY[0x270FA5388](v22);
  uint64_t v25 = (char *)&v32 - v24;
  double v44 = INFINITY;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v16 + 56))((char *)&v32 - v24, 1, 1, a4, v23);
  uint64_t v27 = a3[3];
  uint64_t v26 = a3[4];
  __swift_project_boxed_opaque_existential_1(a3, v27);
  uint64_t v36 = a4;
  uint64_t v37 = a5;
  uint64_t v34 = a5;
  double v38 = a6;
  double v39 = a7;
  double v40 = a8;
  double v41 = a9;
  long long v42 = &v44;
  uint64_t v43 = v25;
  (*(void (**)(uint64_t (*)(double *, uint64_t, __n128, __n128, __n128, __n128), char *, uint64_t, uint64_t))(v26 + 24))(partial apply for closure #1 in ScrollStateRequestTransform.findClosestSubview<A>(idType:position:anchor:collection:containerSize:), v35, v27, v26);
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v21, v25, v18);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v21, 1, a4) == 1)
  {
    float64x2_t v28 = *(void (**)(char *, uint64_t))(v19 + 8);
    v28(v21, v18);
    BOOL v29 = 0;
  }
  else
  {
    uint64_t v30 = (uint64_t)v32;
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v32, v21, a4);
    BOOL v29 = ScrollStateRequestTransform.updateRequest<A>(id:position:targetDistance:)(v30, v33, a4, v34, v44);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v30, a4);
    float64x2_t v28 = *(void (**)(char *, uint64_t))(v19 + 8);
  }
  v28(v25, v18);
  return v29;
}

BOOL ScrollStateRequestTransform.updateRequest<A>(id:position:targetDistance:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  v35[10] = *MEMORY[0x263EF8340];
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (_MovableLockIsOwner(static Update._lock) && static Update.dispatchDepth < static Update.depth)
  {
    (*(void (**)(uint64_t))(**(void **)(a2 + 8) + 104))(1);
    outlined init with copy of ScrollPosition(a2 + 16, (uint64_t)v32);
  }
  else
  {
    (*(void (**)(void *__return_ptr))(**(void **)(a2 + 8) + 120))(v32);
  }
  BOOL v11 = ScrollPosition.matches<A>(id:)();
  outlined destroy of ScrollPosition((uint64_t)v32);
  if (v11)
  {
    if (_MovableLockIsOwner(static Update._lock) && static Update.dispatchDepth < static Update.depth)
    {
      (*(void (**)(uint64_t))(**(void **)(a2 + 8) + 104))(1);
      outlined init with copy of ScrollPosition(a2 + 16, (uint64_t)v35);
    }
    else
    {
      (*(void (**)(void *__return_ptr))(**(void **)(a2 + 8) + 120))(v35);
    }
    ScrollPosition.scrollTo<A>(id:anchor:)(a1, 0, 0, 1, a3, a4);
    outlined init with copy of Binding<ScrollPosition>(a2, (uint64_t)v32);
    outlined init with copy of ScrollPosition((uint64_t)v35, (uint64_t)v33);
    v33[80] = 1;
    double v34 = a5;
    if (ScrollStateRequestTransform.shouldUpdate(to:)((uint64_t)v32))
    {
      outlined init with copy of UpdateScrollStateRequest((uint64_t)v32, (uint64_t)&v20);
      int v12 = (_OWORD *)swift_allocObject();
      long long v13 = v29;
      v12[9] = v28;
      v12[10] = v13;
      long long v14 = v31;
      v12[11] = v30;
      v12[12] = v14;
      long long v15 = v25;
      v12[5] = v24;
      v12[6] = v15;
      long long v16 = v27;
      v12[7] = v26;
      v12[8] = v16;
      long long v17 = v21;
      v12[1] = v20;
      v12[2] = v17;
      long long v18 = v23;
      v12[3] = v22;
      v12[4] = v18;
      type metadata accessor for (_:)();
      AGGraphSetOutputValue();
      swift_release();
    }
    *((void *)&v21 + 1) = &type metadata for UpdateScrollStateRequest;
    *(void *)&long long v22 = &protocol witness table for UpdateScrollStateRequest;
    *(void *)&long long v20 = swift_allocObject();
    outlined init with copy of UpdateScrollStateRequest((uint64_t)v32, v20 + 16);
    outlined assign with take of ScrollStateRequest?((uint64_t)&v20, v5 + 72);
    outlined destroy of UpdateScrollStateRequest((uint64_t)v32);
    outlined destroy of ScrollPosition((uint64_t)v35);
  }
  return v11;
}

uint64_t Binding.readValue()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (!_MovableLockIsOwner(static Update._lock) || static Update.dispatchDepth >= static Update.depth) {
    return (*(uint64_t (**)(void))(**(void **)(v2 + 8) + 120))();
  }
  (*(void (**)(uint64_t))(**(void **)(v2 + 8) + 104))(1);
  uint64_t v5 = v2 + *(int *)(a1 + 32);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16);

  return v6(a2, v5);
}

BOOL _MovableLockIsOwner(uint64_t a1)
{
  uint64_t v1 = *(_opaque_pthread_t **)(a1 + 216);
  return pthread_self() == v1;
}

uint64_t protocol witness for Location.wasRead.setter in conformance LocationBox<A>(uint64_t a1)
{
  return LocationBox.wasRead.setter(a1);
}

uint64_t LocationBox.wasRead.setter(uint64_t a1)
{
  uint64_t v3 = *v1;
  swift_beginAccess();
  (*(void (**)(uint64_t, void))(*(void *)(v3 + 176) + 32))(a1, *(void *)(v3 + 168));
  return swift_endAccess();
}

uint64_t ProjectedLocation.wasRead.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(a2 + 32) + 32))(a1, *(void *)(a2 + 16));
}

uint64_t protocol witness for Location.wasRead.setter in conformance Binding<A>.ScopedLocation(uint64_t result)
{
  *(unsigned char *)(v1 + 8) = result;
  return result;
}

uint64_t protocol witness for Location.wasRead.setter in conformance FunctionalLocation<A>(uint64_t a1, uint64_t a2)
{
  return _ViewInputs.base.modify(a2, a2);
}

uint64_t ZipLocation.wasRead.setter(uint64_t a1)
{
  uint64_t v3 = v1[1];
  (*(void (**)(void))(*(void *)*v1 + 104))();
  return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 104))(a1);
}

uint64_t outlined init with copy of ScrollPosition(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for ScrollPosition(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 57))
  {
    long long v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v4;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 42) = *(_OWORD *)(a2 + 42);
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v5;
    (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1, a2);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_WORD *)(a1 + 56) = *(unsigned __int8 *)(a2 + 56);
  }
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  return a1;
}

uint64_t outlined destroy of ScrollPosition(uint64_t a1)
{
  return a1;
}

uint64_t destroy for ScrollPosition(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 57)) {
    return __swift_destroy_boxed_opaque_existential_1(a1);
  }
  return a1;
}

uint64_t protocol witness for Location.get() in conformance LocationBox<A>(uint64_t a1)
{
  return LocationBox.get()(a1);
}

uint64_t LocationBox.get()(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 168);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)&v9 - v5;
  uint64_t v7 = (uint64_t)v1 + *(void *)(v2 + 184);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v7, v3);
  (*(void (**)(uint64_t))(*(void *)(v2 + 176) + 48))(v3);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t ProjectedLocation.get()(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = a1[2];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  double v6 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  long long v8 = (char *)&v10 - v7;
  (*(void (**)(uint64_t, uint64_t, double))(v2 + 48))(v3, v2, v6);
  (*(void (**)(char *, void))(a1[5] + 32))(v8, a1[3]);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, AssociatedTypeWitness);
}

uint64_t protocol witness for Location.wasRead.setter in conformance StoredLocationBase<A>(uint64_t a1)
{
  return StoredLocationBase.wasRead.setter(a1);
}

BOOL ScrollStateRequestTransform.shouldUpdate(to:)(uint64_t a1)
{
  type metadata accessor for (_:)();
  Outputuint64_t Value = AGGraphGetOutputValue();
  BOOL v4 = OutputValue == 0;
  outlined init with copy of ScrollStateRequest?(v1 + 72, (uint64_t)&v28);
  if (*((void *)&v29 + 1))
  {
    type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest);
    if (swift_dynamicCast())
    {
      if (*((void *)&v16 + 1))
      {
        long long v36 = v24;
        long long v37 = v25;
        long long v38 = v26;
        long long v39 = v27;
        long long v32 = v20;
        long long v33 = v21;
        long long v34 = v22;
        long long v35 = v23;
        long long v28 = v16;
        long long v29 = v17;
        long long v30 = v18;
        long long v31 = v19;
        outlined init with copy of UpdateScrollStateRequest((uint64_t)&v28, (uint64_t)&v16);
        outlined init with copy of UpdateScrollStateRequest(a1, (uint64_t)v14);
        if (OutputValue
          && (specialized static ScrollPosition.Storage.== infix(_:_:)((uint64_t)&v22, (uint64_t)v15) & 1) != 0)
        {
          BOOL v5 = project #1 <A, B>(lhs:rhs:) in static ScrollPosition.== infix(_:_:)(v26, v15[8]);
          outlined destroy of UpdateScrollStateRequest((uint64_t)v14);
          outlined destroy of UpdateScrollStateRequest((uint64_t)&v16);
          outlined init with copy of UpdateScrollStateRequest((uint64_t)&v28, (uint64_t)v13);
          outlined init with copy of UpdateScrollStateRequest(a1, (uint64_t)v12);
          if (v5)
          {
            int v6 = v13[176];
            outlined destroy of UpdateScrollStateRequest((uint64_t)v13);
            int v7 = v12[176];
            outlined destroy of UpdateScrollStateRequest((uint64_t)v12);
            outlined init with copy of UpdateScrollStateRequest((uint64_t)&v28, (uint64_t)v10);
            outlined init with copy of UpdateScrollStateRequest(a1, (uint64_t)v9);
            if (v6 == v7)
            {
              BOOL v4 = vabdd_f64(v11, v9[23]) >= 0.1;
LABEL_16:
              outlined destroy of UpdateScrollStateRequest((uint64_t)v9);
              outlined destroy of UpdateScrollStateRequest((uint64_t)v10);
              outlined destroy of UpdateScrollStateRequest((uint64_t)&v28);
              return v4;
            }
LABEL_15:
            BOOL v4 = 1;
            goto LABEL_16;
          }
        }
        else
        {
          outlined destroy of UpdateScrollStateRequest((uint64_t)v14);
          outlined destroy of UpdateScrollStateRequest((uint64_t)&v16);
          outlined init with copy of UpdateScrollStateRequest((uint64_t)&v28, (uint64_t)v13);
          outlined init with copy of UpdateScrollStateRequest(a1, (uint64_t)v12);
        }
        outlined destroy of UpdateScrollStateRequest((uint64_t)v12);
        outlined destroy of UpdateScrollStateRequest((uint64_t)v13);
        outlined init with copy of UpdateScrollStateRequest((uint64_t)&v28, (uint64_t)v10);
        outlined init with copy of UpdateScrollStateRequest(a1, (uint64_t)v9);
        goto LABEL_15;
      }
    }
    else
    {
      long long v27 = 0u;
      long long v26 = 0u;
      long long v25 = 0u;
      long long v24 = 0u;
      long long v23 = 0u;
      long long v22 = 0u;
      long long v21 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      long long v16 = 0u;
    }
  }
  else
  {
    outlined destroy of ScrollStateRequest?((uint64_t)&v28, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest?, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest, (uint64_t)&protocol descriptor for ScrollStateRequest);
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
  }
  outlined destroy of UpdateScrollStateRequest?((uint64_t)&v16, &lazy cache variable for type metadata for UpdateScrollStateRequest?, (uint64_t)&type metadata for UpdateScrollStateRequest, MEMORY[0x263F8D8F0]);
  return v4;
}

uint64_t outlined destroy of UpdateScrollStateRequest(uint64_t a1)
{
  return a1;
}

uint64_t destroy for UpdateScrollStateRequest(uint64_t a1)
{
  swift_release();
  uint64_t result = swift_release();
  if (*(unsigned char *)(a1 + 73))
  {
    if (*(unsigned char *)(a1 + 153)) {
      return result;
    }
  }
  else
  {
    uint64_t result = __swift_destroy_boxed_opaque_existential_1(a1 + 16);
    if (*(unsigned char *)(a1 + 153)) {
      return result;
    }
  }

  return __swift_destroy_boxed_opaque_existential_1(a1 + 96);
}

uint64_t outlined init with copy of UpdateScrollStateRequest(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for UpdateScrollStateRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  BOOL v5 = (_OWORD *)(a1 + 16);
  int v6 = (_OWORD *)(a2 + 16);
  int v7 = *(unsigned __int8 *)(a2 + 73);
  swift_retain();
  swift_retain();
  if (v7)
  {
    long long v8 = v6[1];
    *BOOL v5 = *v6;
    *(_OWORD *)(a1 + 32) = v8;
    *(_OWORD *)(a1 + 48) = v6[2];
    *(_OWORD *)(a1 + 58) = *(_OWORD *)((char *)v6 + 42);
  }
  else
  {
    long long v9 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 40) = v9;
    (**(void (***)(uint64_t, _OWORD *))(v9 - 8))(a1 + 16, v6);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_WORD *)(a1 + 72) = *(unsigned __int8 *)(a2 + 72);
  }
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  uint64_t v10 = (_OWORD *)(a1 + 96);
  double v11 = (_OWORD *)(a2 + 96);
  if (*(unsigned char *)(a2 + 153))
  {
    long long v12 = *(_OWORD *)(a2 + 112);
    *uint64_t v10 = *v11;
    *(_OWORD *)(a1 + 112) = v12;
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 138) = *(_OWORD *)(a2 + 138);
  }
  else
  {
    long long v13 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 120) = v13;
    (**(void (***)(_OWORD *, _OWORD *))(v13 - 8))(v10, v11);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_WORD *)(a1 + 152) = *(unsigned __int8 *)(a2 + 152);
  }
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  return a1;
}

uint64_t outlined init with copy of ScrollStateRequest?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ScrollStateRequest?(0, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest?, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest, (uint64_t)&protocol descriptor for ScrollStateRequest, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for ScrollStateRequest?(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v8 = type metadata accessor for ScrollStateRequest(255, a3);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

BOOL project #1 <A, B>(lhs:rhs:) in static ScrollPosition.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t outlined assign with take of ScrollStateRequest?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ScrollStateRequest?(0, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest?, (unint64_t *)&lazy cache variable for type metadata for ScrollStateRequest, (uint64_t)&protocol descriptor for ScrollStateRequest, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t ScrollPosition.scrollTo<A>(id:anchor:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  v14[3] = a5;
  v14[4] = a6;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v14);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16))(boxed_opaque_existential_1, a1, a5);
  v14[5] = a2;
  v14[6] = a3;
  char v15 = a4 & 1;
  char v16 = 0;
  return outlined assign with take of ScrollPosition.Storage((uint64_t)v14, v6);
}

BOOL ScrollPosition.matches<A>(id:)()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t DynamicType = swift_getDynamicType();
  return v1 == MEMORY[0x263F8DB68] || DynamicType == v1;
}

uint64_t outlined assign with take of ScrollPosition.Storage(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t assignWithTake for ScrollPosition.Storage(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 57);
    if (v4 >= 5) {
      unsigned int v4 = *(_DWORD *)a1 + 5;
    }
    if (!v4) {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 57);
    if (v5 >= 5) {
      unsigned int v5 = *(_DWORD *)a2 + 5;
    }
    switch(v5)
    {
      case 0u:
        long long v6 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v6;
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
        *(unsigned char *)(a1 + 57) = 0;
        return a1;
      case 1u:
        *(unsigned char *)a1 = *(unsigned char *)a2;
        char v8 = 1;
        goto LABEL_15;
      case 2u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        char v8 = 2;
        goto LABEL_15;
      case 3u:
        *(void *)a1 = *(void *)a2;
        char v8 = 3;
        goto LABEL_15;
      case 4u:
        *(void *)a1 = *(void *)a2;
        char v8 = 4;
LABEL_15:
        *(unsigned char *)(a1 + 57) = v8;
        break;
      default:
        long long v7 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v7;
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 42) = *(_OWORD *)(a2 + 42);
        break;
    }
  }
  return a1;
}

uint64_t protocol witness for Location.get() in conformance Binding<A>.ScopedLocation()
{
  return Binding.ScopedLocation.get()(*v0);
}

uint64_t Binding.ScopedLocation.get()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 120))();
}

uint64_t specialized closure #1 in PropertyList.subscript.setter(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), unint64_t *a5, uint64_t a6, uint64_t a7)
{
  int v10 = a2;
  unint64_t v12 = HIDWORD(a2);
  if (!a4(*a1)
    || (type metadata accessor for [LayoutDirection](0, &lazy cache variable for type metadata for ScrollPositionStorage?, (uint64_t)&type metadata for ScrollPositionStorage, MEMORY[0x263F8D8F0]), uint64_t result = AGCompareValues(), !result))
  {
    uint64_t v14 = *a1;
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, a5, a6, a7, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TypedElement);
    uint64_t v15 = swift_allocObject();
    *(unsigned char *)(v15 + 76) = v12;
    *(_DWORD *)(v15 + 72) = v10;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(a6, 0, v14);
    return swift_release();
  }
  return result;
}

uint64_t protocol witness for Location.get() in conformance StoredLocationBase<A>@<X0>(uint64_t a1@<X8>)
{
  return StoredLocationBase.get()(a1);
}

uint64_t BufferedElement.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t Element.__deallocating_deinit()
{
  Element.deinit();

  return swift_deallocClassInstance();
}

uint64_t Element.deinit()
{
  uint64_t v1 = *v0;
  uint64_t v2 = AnyElement.deinit();
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 128) - 8) + 8))(v2 + *(void *)(*(void *)v2 + 152));
  return v2;
}

uint64_t AnyElement.deinit()
{
  uint64_t v1 = swift_retain();
  while (v1)
  {
    uint64_t v2 = *(void *)(v1 + 16);
    *(void *)(v1 + 16) = 0;
    swift_release();
    char isUniquelyReferenced_native = swift_isUniquelyReferenced_native();
    uint64_t v1 = v2;
    if ((isUniquelyReferenced_native & 1) == 0)
    {
      swift_release();
      break;
    }
  }
  uint64_t v4 = *(void *)(v0 + 16);
  *(void *)(v0 + 16) = 0;
  if (v4)
  {
    do
    {
      if (!swift_isUniquelyReferenced_native()) {
        break;
      }
      uint64_t v5 = *(void *)(v4 + 16);
      swift_retain();
      swift_release();
      uint64_t v4 = v5;
    }
    while (v5);
  }
  swift_release();
  return v0;
}

uint64_t specialized static ScrollPosition.Storage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  outlined init with copy of ScrollPosition.Storage(a1, (uint64_t)&v27);
  outlined init with copy of ScrollPosition.Storage(a2, (uint64_t)&v34);
  switch(v33)
  {
    case 1:
      outlined init with copy of ScrollPosition.Storage((uint64_t)&v27, (uint64_t)v21);
      if (v36 != 1) {
        goto LABEL_30;
      }
      BOOL v3 = LOBYTE(v21[0]) == v34;
      goto LABEL_14;
    case 2:
      outlined init with copy of ScrollPosition.Storage((uint64_t)&v27, (uint64_t)v21);
      if (v36 != 2) {
        goto LABEL_30;
      }
      BOOL v4 = v21[1] == *((double *)&v34 + 1) && v21[0] == *(double *)&v34;
      goto LABEL_17;
    case 3:
      outlined init with copy of ScrollPosition.Storage((uint64_t)&v27, (uint64_t)v21);
      if (v36 != 3) {
        goto LABEL_30;
      }
      goto LABEL_13;
    case 4:
      outlined init with copy of ScrollPosition.Storage((uint64_t)&v27, (uint64_t)v21);
      if (v36 != 4) {
        goto LABEL_30;
      }
LABEL_13:
      BOOL v3 = v21[0] == *(double *)&v34;
LABEL_14:
      BOOL v4 = v3;
LABEL_17:
      outlined destroy of ScrollPosition.Storage((uint64_t)&v27);
      return v4;
    case 5:
      int8x16_t v5 = vorrq_s8(v28, v29);
      uint64_t v6 = *(void *)&vorr_s8(*(int8x8_t *)v5.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL)) | v30 | v31 | v27;
      if (v32) {
        BOOL v7 = 0;
      }
      else {
        BOOL v7 = v6 == 0;
      }
      if (v7)
      {
        if (v36 != 5 || v35[40]) {
          goto LABEL_30;
        }
        int8x16_t v11 = vorrq_s8(*(int8x16_t *)&v35[8], *(int8x16_t *)&v35[24]);
        uint64_t v10 = *(void *)&vorr_s8(*(int8x8_t *)v11.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL)) | *(void *)v35;
        uint64_t v8 = *((void *)&v34 + 1) | v34;
      }
      else
      {
        if (v36 != 5 || v35[40] || (void)v34 != 1) {
          goto LABEL_30;
        }
        uint64_t v8 = *((void *)&v34 + 1);
        int8x16_t v9 = vorrq_s8(*(int8x16_t *)&v35[8], *(int8x16_t *)&v35[24]);
        uint64_t v10 = *(void *)&vorr_s8(*(int8x8_t *)v9.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)) | *(void *)v35;
      }
      if (!(v10 | v8)) {
        goto LABEL_41;
      }
      goto LABEL_30;
    default:
      outlined init with copy of ScrollPosition.Storage((uint64_t)&v27, (uint64_t)v21);
      if (v36)
      {
        outlined destroy of ScrollPosition.ViewID((uint64_t)v21);
LABEL_30:
        outlined destroy of (ScrollPosition.Storage, ScrollPosition.Storage)((uint64_t)&v27, (uint64_t (*)(void))type metadata accessor for (ScrollPosition.Storage, ScrollPosition.Storage));
        return 0;
      }
      *(_OWORD *)&v20[9] = *(_OWORD *)&v35[25];
      long long v19 = *(_OWORD *)v35;
      *(_OWORD *)long long v20 = *(_OWORD *)&v35[16];
      long long v18 = v34;
      if (v26)
      {
        if (v35[40]) {
          goto LABEL_40;
        }
LABEL_37:
        outlined destroy of ScrollPosition.ViewID((uint64_t)&v18);
        outlined destroy of ScrollPosition.ViewID((uint64_t)v21);
LABEL_42:
        outlined destroy of ScrollPosition.Storage((uint64_t)&v27);
        return 0;
      }
      if ((v35[40] & 1) != 0 || v24 != *(double *)&v20[8] || v25 != *(double *)&v20[16]) {
        goto LABEL_37;
      }
LABEL_40:
      uint64_t v13 = v22;
      uint64_t v14 = v23;
      uint64_t v15 = __swift_project_boxed_opaque_existential_1(v21, v22);
      uint64_t v16 = *((void *)&v19 + 1);
      long long v17 = __swift_project_boxed_opaque_existential_1(&v18, *((uint64_t *)&v19 + 1));
      LOBYTE(v13) = project #1 <A, B>(lhs:rhs:) in static ScrollPosition.ViewID.== infix(_:_:)((uint64_t)v15, (uint64_t)v17, v13, v16, v14);
      outlined destroy of ScrollPosition.ViewID((uint64_t)&v18);
      outlined destroy of ScrollPosition.ViewID((uint64_t)v21);
      if ((v13 & 1) == 0) {
        goto LABEL_42;
      }
LABEL_41:
      outlined destroy of ScrollPosition.Storage((uint64_t)&v27);
      return 1;
  }
}

uint64_t outlined init with copy of ScrollPosition.Storage(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for ScrollPosition.Storage(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(unsigned __int8 *)(a2 + 57);
  if (v4 >= 5) {
    unsigned int v4 = *(_DWORD *)a2 + 5;
  }
  switch(v4)
  {
    case 0u:
      long long v5 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v5;
      (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1, a2);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_WORD *)(a1 + 56) = *(unsigned __int8 *)(a2 + 56);
      return a1;
    case 1u:
      *(unsigned char *)a1 = *(unsigned char *)a2;
      char v7 = 1;
      goto LABEL_10;
    case 2u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      char v7 = 2;
      goto LABEL_10;
    case 3u:
      *(void *)a1 = *(void *)a2;
      char v7 = 3;
      goto LABEL_10;
    case 4u:
      *(void *)a1 = *(void *)a2;
      char v7 = 4;
LABEL_10:
      *(unsigned char *)(a1 + 57) = v7;
      break;
    default:
      long long v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 42) = *(_OWORD *)(a2 + 42);
      break;
  }
  return a1;
}

uint64_t outlined destroy of ScrollPosition.ViewID(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of ScrollPosition.Storage(uint64_t a1)
{
  return a1;
}

uint64_t destroy for ScrollPosition.Storage(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 57);
  if (v1 >= 5) {
    unsigned int v1 = *(_DWORD *)a1 + 5;
  }
  if (!v1) {
    return __swift_destroy_boxed_opaque_existential_1(a1);
  }
  return a1;
}

uint64_t project #1 <A, B>(lhs:rhs:) in static ScrollPosition.ViewID.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v25[1] = a5;
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  int8x16_t v11 = (char *)v25 - v10;
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(a3 - 8);
  double v17 = MEMORY[0x270FA5388](v16);
  long long v19 = (char *)v25 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v20 + 16))(v14, a2, a4, v17);
  int v21 = swift_dynamicCast();
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
  if (v21)
  {
    v22(v11, 0, 1, a3);
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v19, v11, a3);
    char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v19, a3);
  }
  else
  {
    v22(v11, 1, 1, a3);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    char v23 = 0;
  }
  return v23 & 1;
}

uint64_t static Color.primary.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for primary);
}

uint64_t _ViewInputs.textAccessibilityProvider.setter(uint64_t a1, uint64_t a2)
{
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, a1, a2);
  return swift_release();
}

uint64_t specialized ForEachList.Init.updateValue()(uint64_t a1, void (*a2)(void, uint64_t, uint64_t (*)()), void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  a2(0, a1, type metadata accessor for ForEachState.Info);
  AGGraphGetValue();
  uint64_t v8 = swift_retain();
  a3(v8);
  swift_release();
  LODWORD(a3) = *(_DWORD *)(v4 + 4) + 1;
  *(_DWORD *)(v4 + 4) = a3;
  uint64_t v9 = *(void *)AGGraphGetValue();
  uint64_t v13 = ((uint64_t (*)(void, uint64_t, uint64_t (*)()))a2)(0, a4, type metadata accessor for ForEachList);
  uint64_t v14 = &protocol witness table for ForEachList<A, B, C>;
  uint64_t v11 = v9;
  int v12 = (int)a3;
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  swift_retain();
  AGGraphSetOutputValue();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v11);
}

void type metadata accessor for ForEachState<Slice<SubviewsCollection>, Subview.ID, Subview>.Info(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *))
{
  if (!*a2)
  {
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for Slice<SubviewsCollection>, (uint64_t (*)(void))lazy protocol witness table accessor for type SubviewsCollection and conformance SubviewsCollection, (uint64_t)&type metadata for SubviewsCollection, MEMORY[0x263F8E738]);
    v9[0] = v6;
    v9[1] = &type metadata for Subview.ID;
    v9[2] = &type metadata for Subview;
    v9[3] = lazy protocol witness table accessor for type Slice<SubviewsCollection> and conformance <> Slice<A>();
    v9[4] = lazy protocol witness table accessor for type Subview.ID and conformance Subview.ID();
    v9[5] = &protocol witness table for Subview;
    unint64_t v7 = a3(a1, v9);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

void type metadata accessor for ForEachState<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>.Info(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *))
{
  if (!*a2)
  {
    unint64_t v6 = lazy protocol witness table accessor for type _VariadicView_Children and conformance _VariadicView_Children();
    v9[0] = &type metadata for _VariadicView_Children;
    v9[1] = MEMORY[0x263F8DB68];
    v9[2] = &type metadata for _VariadicView_Children.Element;
    v9[3] = v6;
    v9[4] = MEMORY[0x263F8DB70];
    v9[5] = &protocol witness table for _VariadicView_Children.Element;
    unint64_t v7 = a3(a1, v9);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t specialized ForEachState.invalidateViewCounts()()
{
  uint64_t v1 = v0;
  uint64_t v2 = (void *)(v0 + 240);
  swift_beginAccess();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v4 = *(void *)(v1 + 240);
  if (isUniquelyReferenced_nonNull_native)
  {
    specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v4 + 16));
  }
  else
  {
    *uint64_t v2 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(void *)(v4 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  uint64_t result = swift_endAccess();
  *(void *)(v1 + 248) = 2;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t result;

  uint64_t v1 = v0;
  uint64_t v2 = (void *)(v0 + 256);
  swift_beginAccess();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v4 = *(void *)(v1 + 256);
  if (isUniquelyReferenced_nonNull_native)
  {
    specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v4 + 16));
  }
  else
  {
    *uint64_t v2 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(void *)(v4 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  uint64_t result = swift_endAccess();
  *(void *)(v1 + 264) = 2;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t result;

  uint64_t v1 = v0;
  uint64_t v2 = (void *)(v0 + 200);
  swift_beginAccess();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v4 = *(void *)(v1 + 200);
  if (isUniquelyReferenced_nonNull_native)
  {
    specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v4 + 16));
  }
  else
  {
    *uint64_t v2 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(void *)(v4 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  uint64_t result = swift_endAccess();
  *(void *)(v1 + 208) = 2;
  return result;
}

uint64_t outlined destroy of ForEach<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with copy of ForEach<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void type metadata accessor for ForEach<Slice<SubviewsCollection>, Subview.ID, Subview>()
{
  if (!lazy cache variable for type metadata for ForEach<Slice<SubviewsCollection>, Subview.ID, Subview>)
  {
    _s7SwiftUI17UnaryLayoutEngine33_1C3B77B617AD058A6802F719E38F5D79LLVyAA023IgnoresAutomaticPaddingD033_47C1BD8C61550BB60F4F3D12F752D53DLLVGMaTm_0(255, &lazy cache variable for type metadata for Slice<SubviewsCollection>, (uint64_t (*)(void))lazy protocol witness table accessor for type SubviewsCollection and conformance SubviewsCollection, (uint64_t)&type metadata for SubviewsCollection, MEMORY[0x263F8E738]);
    lazy protocol witness table accessor for type Slice<SubviewsCollection> and conformance <> Slice<A>();
    lazy protocol witness table accessor for type Subview.ID and conformance Subview.ID();
    unint64_t v0 = type metadata accessor for ForEach();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ForEach<Slice<SubviewsCollection>, Subview.ID, Subview>);
    }
  }
}

void type metadata accessor for ForEach<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>()
{
  if (!lazy cache variable for type metadata for ForEach<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>)
  {
    lazy protocol witness table accessor for type _VariadicView_Children and conformance _VariadicView_Children();
    unint64_t v0 = type metadata accessor for ForEach();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ForEach<_VariadicView_Children, AnyHashable, _VariadicView_Children.Element>);
    }
  }
}

uint64_t ForEachState.Info.Init.view.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for ForEach();
  uint64_t Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, Value, v2);
}

uint64_t ForEachState.Info.Init.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v13[0] = a8;
  v13[1] = a3;
  v13[2] = a4;
  v13[3] = a5;
  v13[4] = a6;
  v13[5] = a7;
  uint64_t v8 = type metadata accessor for ForEach();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v13 - v10;
  ForEachState.Info.Init.view.getter((uint64_t)v13 - v10);
  ForEachState.update(view:)((uint64_t)v11);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return swift_retain();
}

uint64_t destroy for ForEach(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
  swift_release();
  swift_release();

  return swift_release();
}

void ForEachState.update(view:)(uint64_t a1)
{
  uint64_t v191 = a1;
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void **)v1;
  unint64_t v4 = *(void *)(*(void *)v1 + 88);
  uint64_t v183 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](a1);
  v176 = (char *)&v165 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  v186 = (char *)&v165 - v7;
  MEMORY[0x270FA5388](v8);
  uint64_t v182 = (uint64_t)&v165 - v9;
  unint64_t v10 = v2[13];
  uint64_t v11 = v2[10];
  int64_t v181 = *(void *)(*(void *)(v10 + 8) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v174 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v13 = (void (*)(char *, uint64_t))((char *)&v165 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v14);
  v188 = (char *)&v165 - v15;
  uint64_t v16 = v2[12];
  uint64_t v205 = v11;
  unint64_t v206 = v4;
  uint64_t v207 = v16;
  unint64_t v208 = v10;
  long long v197 = *((_OWORD *)v3 + 7);
  unint64_t v17 = v4;
  long long v209 = v197;
  uint64_t v18 = type metadata accessor for ForEachState.Item();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v193 = (char **)type metadata accessor for Optional();
  uint64_t v170 = (void (**)(uint64_t, char *, uint64_t))*(v193 - 1);
  MEMORY[0x270FA5388](v193);
  v195 = (uint64_t *)((char *)&v165 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v21);
  v192 = (uint64_t *)((char *)&v165 - v22);
  uint64_t v173 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v23);
  uint64_t v169 = (char *)&v165 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v25);
  CGRect v172 = (char *)&v165 - v26;
  MEMORY[0x270FA5388](v27);
  CGRect v171 = (char *)&v165 - v28;
  uint64_t v190 = v11;
  uint64_t v205 = v11;
  unint64_t v206 = v4;
  uint64_t v179 = v16;
  uint64_t v207 = v16;
  unint64_t v208 = v10;
  unint64_t v180 = v10;
  uint64_t v29 = v197;
  *(void *)&long long v209 = v197;
  uint64_t v30 = type metadata accessor for ForEach();
  uint64_t v31 = type metadata accessor for Optional();
  uint64_t v32 = *(void *)(v31 - 8);
  MEMORY[0x270FA5388](v31);
  v175 = (char *)&v165 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v34);
  char v36 = (char *)&v165 - v35;
  if (!AGSubgraphIsValid()) {
    return;
  }
  v178 = v13;
  uint64_t v184 = v18;
  *(void *)&long long v197 = v17;
  uint64_t v37 = AGMakeUniqueID();
  uint64_t v194 = *(void *)(*(void *)v1 + 224);
  *(void *)&v1[v194] = v37;
  uint64_t v38 = *(void *)(*(void *)v1 + 232);
  LODWORD(v189) = *(_DWORD *)&v1[v38];
  uint64_t v187 = v38;
  *(_DWORD *)&v1[v38] = v189 + 1;
  ForEachState.invalidateViewCounts()();
  uint64_t v39 = *(void *)(*(void *)v1 + 160);
  v196 = v1;
  double v40 = &v1[v39];
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v36, v40, v31);
  uint64_t v167 = *(void *)(v30 - 8);
  uint64_t v41 = v167 + 48;
  long long v42 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v167 + 48);
  unsigned int v43 = v42(v36, 1, v30);
  uint64_t v168 = v32;
  (*(void (**)(char *, uint64_t))(v32 + 8))(v36, v31);
  BOOL v44 = v43 == 1;
  uint64_t v45 = v40;
  uint64_t v46 = v190;
  uint64_t v177 = v30;
  if (!v44)
  {
    uint64_t v47 = v41;
    long long v166 = v42;
    if (v42(v40, 1, v30) == 1) {
      goto LABEL_100;
    }
    uint64_t v48 = *(void *)&v40[*(int *)(v30 + 64)];
    uint64_t v205 = v46;
    unint64_t v206 = v197;
    uint64_t v207 = v179;
    unint64_t v208 = v180;
    *(void *)&long long v209 = v29;
    type metadata accessor for ForEach.IDGenerator();
    if (!v48)
    {
      v186 = (char *)v31;
      if (v166(v40, 1, v30) == 1) {
        goto LABEL_101;
      }
      uint64_t v84 = v173;
      uint64_t v85 = v171;
      uint64_t v86 = v45;
      v188 = *(char **)(v173 + 16);
      ((void (*)(char *, char *, uint64_t))v188)(v171, v45, v46);
      uint64_t v87 = dispatch thunk of Collection.count.getter();
      uint64_t v88 = *(void (**)(char *, uint64_t))(v84 + 8);
      uint64_t v179 = v84 + 8;
      v178 = v88;
      v88(v85, v46);
      BOOL v44 = v87 == dispatch thunk of Collection.count.getter();
      uint64_t v89 = v168;
      if (!v44)
      {
        uint64_t v90 = v46;
        uint64_t v205 = 0;
        unint64_t v206 = 0xE000000000000000;
        _StringGuts.grow(_:)(204);
        uint64_t v91 = v177;
        v92._countAndFlagsBits = _typeName(_:qualified:)();
        String.append(_:)(v92);
        swift_bridgeObjectRelease();
        v93._countAndFlagsBits = 0x2820746E756F6320;
        v93._object = (void *)0xE800000000000000;
        String.append(_:)(v93);
        uint64_t v204 = dispatch thunk of Collection.count.getter();
        v94._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v94);
        swift_bridgeObjectRelease();
        v95._object = (void *)0x8000000246220B80;
        v95._countAndFlagsBits = 0xD000000000000018;
        String.append(_:)(v95);
        if (v166(v45, 1, v91) == 1) {
          goto LABEL_104;
        }
        unsigned __int8 v96 = v171;
        ((void (*)(char *, char *, uint64_t))v188)(v171, v45, v90);
        uint64_t v97 = dispatch thunk of Collection.count.getter();
        v178(v96, v90);
        uint64_t v204 = v97;
        v98._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v98);
        swift_bridgeObjectRelease();
        v99._countAndFlagsBits = 0xD0000000000000A6;
        v99._object = (void *)0x8000000246220BA0;
        String.append(_:)(v99);
        specialized static Log.externalWarning(_:)(v205, v206);
        swift_bridgeObjectRelease();
        uint64_t v46 = v90;
      }
      uint64_t v100 = v177;
      unsigned int v101 = v166(v86, 1, v177);
      uint64_t AssociatedTypeWitness = v47;
      if (v101 == 1) {
        goto LABEL_102;
      }
      uint64_t v102 = v172;
      uint64_t v103 = (void (*)(char *, char *, uint64_t))v188;
      ((void (*)(char *, char *, uint64_t))v188)(v172, v86, v46);
      uint64_t v104 = v167;
      uint64_t v105 = v175;
      (*(void (**)(char *, uint64_t, uint64_t))(v167 + 16))(v175, v191, v100);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v104 + 56))(v105, 0, 1, v100);
      swift_beginAccess();
      (*(void (**)(char *, char *, char *))(v89 + 40))(v86, v105, v186);
      uint64_t v106 = v169;
      v103(v169, v102, v46);
      if (v166(v86, 1, v100) != 1)
      {
        (*(void (**)(char *, char *, uint64_t))(v173 + 40))(v86, v106, v46);
        swift_endAccess();
        uint64_t v107 = (unint64_t *)&v196[*(void *)(*(void *)v196 + 192)];
        swift_beginAccess();
        unint64_t v108 = *v107;
        if ((*v107 & 0xC000000000000001) != 0)
        {
          uint64_t v109 = __CocoaDictionary.makeIterator()();
          unint64_t v180 = 0;
          uint64_t v110 = 0;
          unint64_t v111 = 0;
          unint64_t v112 = v109 | 0x8000000000000000;
        }
        else
        {
          uint64_t v113 = -1 << *(unsigned char *)(v108 + 32);
          uint64_t v110 = ~v113;
          uint64_t v114 = *(void *)(v108 + 64);
          unint64_t v180 = v108 + 64;
          uint64_t v115 = -v113;
          if (v115 < 64) {
            uint64_t v116 = ~(-1 << v115);
          }
          else {
            uint64_t v116 = -1;
          }
          unint64_t v111 = v116 & v114;
          unint64_t v112 = v108;
        }
        uint64_t v191 = TupleTypeMetadata2 - 8;
        uint64_t v177 = v110;
        uint64_t v182 = v183 + 16;
        uint64_t v117 = (void (**)(void))(v170 + 4);
        v186 = (char *)(v183 + 8);
        int64_t v181 = (unint64_t)(v110 + 64) >> 6;
        v176 = (char *)(v181 - 1);
        swift_bridgeObjectRetain();
        int64_t v118 = 0;
        uint64_t v119 = v196;
        uint64_t AssociatedTypeWitness = TupleTypeMetadata2;
        v188 = (char *)v112;
        while ((v112 & 0x8000000000000000) != 0)
        {
          if (__CocoaDictionary.Iterator.next()())
          {
            uint64_t v126 = v195;
            _forceBridgeFromObjectiveC<A>(_:_:)();
            swift_unknownObjectRelease();
            _forceBridgeFromObjectiveC<A>(_:_:)();
            swift_unknownObjectRelease();
            uint64_t v124 = *(void *)(TupleTypeMetadata2 - 8);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v124 + 56))(v126, 0, 1, TupleTypeMetadata2);
          }
          else
          {
            uint64_t v124 = *(void *)(TupleTypeMetadata2 - 8);
            (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v124 + 56))(v195, 1, 1, TupleTypeMetadata2);
          }
          uint64_t v125 = (char *)v118;
          uint64_t v120 = v111;
LABEL_64:
          uint64_t v129 = v192;
          (*v117)();
          if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v124 + 48))(v129, 1, TupleTypeMetadata2) == 1)
          {
            outlined consume of Set<EventID>.Iterator._Variant();
            v178(v172, v190);
            return;
          }
          uint64_t v130 = *(uint64_t *)((char *)v129 + *(int *)(TupleTypeMetadata2 + 48));
          *(void *)(v130 + *(void *)(*(void *)v130 + 208)) = *(void *)&v119[v194];
          uint64_t v131 = *(void *)(*(void *)v130 + 216);
          unint64_t v112 = (unint64_t)v188;
          if (*(_DWORD *)(v130 + v131) == v189) {
            *(_DWORD *)(v130 + v131) = *(_DWORD *)&v119[v187];
          }
          swift_release();
          (*(void (**)(uint64_t *, void))v186)(v129, v197);
          int64_t v118 = (int64_t)v125;
          unint64_t v111 = v120;
        }
        if (v111)
        {
          uint64_t v120 = (v111 - 1) & v111;
          unint64_t v121 = __clz(__rbit64(v111)) | (v118 << 6);
          int64_t v122 = v118;
LABEL_42:
          v123 = v195;
          (*(void (**)(void *, unint64_t, void))(v183 + 16))(v195, *(void *)(v112 + 48) + *(void *)(v183 + 72) * v121, v197);
          TupleTypeMetadata2 = AssociatedTypeWitness;
          *(void *)((char *)v123 + *(int *)(AssociatedTypeWitness + 48)) = *(void *)(*(void *)(v112 + 56)
                                                                                       + 8 * v121);
          uint64_t v124 = *(void *)(TupleTypeMetadata2 - 8);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v124 + 56))(v123, 0, 1, TupleTypeMetadata2);
          swift_retain();
          uint64_t v125 = (char *)v122;
LABEL_63:
          uint64_t v119 = v196;
          goto LABEL_64;
        }
        int64_t v122 = v118 + 1;
        if (__OFADD__(v118, 1))
        {
          __break(1u);
          goto LABEL_98;
        }
        uint64_t v125 = (char *)v118;
        if (v122 < v181)
        {
          unint64_t v127 = *(void *)(v180 + 8 * v122);
          if (v127)
          {
LABEL_48:
            uint64_t v120 = (v127 - 1) & v127;
            unint64_t v121 = __clz(__rbit64(v127)) + (v122 << 6);
            goto LABEL_42;
          }
          uint64_t v125 = (char *)(v118 + 1);
          if (v118 + 2 < v181)
          {
            unint64_t v127 = *(void *)(v180 + 8 * (v118 + 2));
            if (v127)
            {
              int64_t v122 = v118 + 2;
              goto LABEL_48;
            }
            int64_t v128 = v118 + 3;
            uint64_t v125 = (char *)(v118 + 2);
            if (v118 + 3 < v181)
            {
              unint64_t v127 = *(void *)(v180 + 8 * v128);
              if (!v127)
              {
                while (1)
                {
                  int64_t v122 = v128 + 1;
                  if (__OFADD__(v128, 1)) {
                    break;
                  }
                  if (v122 >= v181)
                  {
                    uint64_t v125 = v176;
                    goto LABEL_62;
                  }
                  unint64_t v127 = *(void *)(v180 + 8 * v122);
                  ++v128;
                  if (v127) {
                    goto LABEL_48;
                  }
                }
LABEL_98:
                __break(1u);
LABEL_99:
                __break(1u);
LABEL_100:
                __break(1u);
LABEL_101:
                __break(1u);
LABEL_102:
                __break(1u);
                goto LABEL_103;
              }
              int64_t v122 = v118 + 3;
              goto LABEL_48;
            }
          }
        }
LABEL_62:
        uint64_t v124 = *(void *)(TupleTypeMetadata2 - 8);
        (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v124 + 56))(v195, 1, 1, TupleTypeMetadata2);
        uint64_t v120 = 0;
        goto LABEL_63;
      }
LABEL_103:
      __break(1u);
LABEL_104:
      __break(1u);
      return;
    }
  }
  uint64_t v49 = v167;
  __int16 v50 = v175;
  (*(void (**)(char *, uint64_t, uint64_t))(v167 + 16))(v175, v191, v30);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v49 + 56))(v50, 0, 1, v30);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v168 + 40))(v45, v50, v31);
  swift_endAccess();
  uint64_t v51 = v196;
  __int16 v52 = (char **)&v196[*(void *)(*(void *)v196 + 200)];
  swift_beginAccess();
  uint64_t v53 = v197;
  uint64_t v173 = type metadata accessor for Dictionary();
  v193 = v52;
  Dictionary.removeAll(keepingCapacity:)(0);
  swift_endAccess();
  if (v51[124]) {
    goto LABEL_99;
  }
  id v54 = (id)AGGraphGetAttributeGraph();
  uint64_t Counter = AGGraphGetCounter();

  *(void *)&v51[*(void *)(*(void *)v51 + 208)] = Counter;
  uint64_t v56 = *(void *)(*(void *)v51 + 216);
  uint64_t v57 = v184;
  __int16 v58 = v178;
  if ((*(void *)&v51[v56] & 0x8000000000000000) != 0)
  {
    *(void *)&v51[v56] = 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v189 = *(void *)(*(void *)v51 + 216);
    dispatch thunk of Collection.startIndex.getter();
    dispatch thunk of Collection.endIndex.getter();
    uint64_t v59 = &v51[*(void *)(*(void *)v51 + 192)];
    swift_beginAccess();
    v195 = v59;
    uint64_t v60 = swift_bridgeObjectRetain();
    uint64_t v61 = MEMORY[0x24C5222E0](v60, v53, v57, v29);
    swift_bridgeObjectRelease();
    char v62 = (uint64_t *)&v51[*(void *)(*(void *)v51 + 264)];
    swift_beginAccess();
    v192 = v62;
    swift_bridgeObjectRetain();
    uint64_t v63 = v58;
    uint64_t v64 = Set.count.getter();
    swift_bridgeObjectRelease();
    unint64_t v65 = *v193;
    swift_bridgeObjectRetain();
    uint64_t v203 = Set.init()();
    *(void *)&v51[v189] = 0;
    BOOL v66 = v61 == 0;
    if (v61 | v64)
    {
      CGRect v172 = v65;
      int v67 = v63;
      v175 = *(char **)(swift_getAssociatedConformanceWitness() + 8);
      if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
      {
        uint64_t v68 = 0;
        uint64_t v170 = (void (**)(uint64_t, char *, uint64_t))(v174 + 24);
        CGRect v171 = (char *)(v183 + 16);
        char v69 = (void (**)(uint64_t, uint64_t))(v183 + 8);
        while (1)
        {
          uint64_t v199 = *(void *)(v191 + *(int *)(v177 + 64));
          uint64_t v70 = v197;
          uint64_t v205 = v46;
          unint64_t v206 = v197;
          uint64_t v207 = v179;
          unint64_t v208 = v180;
          *(void *)&long long v209 = v29;
          uint64_t v71 = type metadata accessor for ForEach.IDGenerator();
          uint64_t v72 = v182;
          ForEach.IDGenerator.makeID(data:index:offset:)(v68, v71, v182);
          uint64_t v73 = v195;
          swift_beginAccess();
          MEMORY[0x24C522390](&v199, v72, *v73, v70, v184, v29);
          uint64_t v74 = v199;
          if (v199)
          {
            swift_endAccess();
            uint64_t v75 = v196;
            *(void *)&v196[v189] = v68;
            uint64_t v76 = v74 + *(void *)(*(void *)v74 + 192);
            swift_beginAccess();
            (*v170)(v76, v188, AssociatedTypeWitness);
            swift_endAccess();
            *(void *)(v74 + *(void *)(*(void *)v74 + 208)) = *(void *)&v75[v194];
            *(void *)(v74 + *(void *)(*(void *)v74 + 200)) = v68;
            *(_DWORD *)(v74 + *(void *)(*(void *)v74 + 216)) = *(_DWORD *)&v75[v187];
            --v61;
            LOBYTE(v75) = *(unsigned char *)(v74 + *(void *)(*(void *)v74 + 240));
            swift_release();
            uint64_t v77 = v64;
            if (v75)
            {
              char v78 = 0;
            }
            else
            {
              swift_bridgeObjectRelease();
              CGRect v172 = *v193;
              swift_bridgeObjectRetain();
              char v78 = 1;
            }
          }
          else
          {
            uint64_t v77 = v64;
            swift_endAccess();
            char v78 = 0;
          }
          swift_bridgeObjectRetain();
          uint64_t v79 = v72;
          uint64_t v80 = v197;
          char v81 = Set.contains(_:)();
          swift_bridgeObjectRelease();
          if (v81)
          {
            (*(void (**)(char *, uint64_t, uint64_t))v171)(v176, v79, v80);
            type metadata accessor for Set();
            int v82 = v186;
            Set.insert(_:)();
            (*v69)((uint64_t)v82, v80);
            --v77;
          }
          else if (v78)
          {
            uint64_t v80 = v197;
            uint64_t v79 = v182;
          }
          else
          {
            uint64_t v79 = v182;
            uint64_t v80 = v197;
            (*(void (**)(char *, uint64_t, void))v171)(v186, v182, v197);
            LOBYTE(v199) = 0;
            swift_beginAccess();
            Dictionary.subscript.setter();
            swift_endAccess();
          }
          dispatch thunk of Collection.formIndex(after:)();
          (*v69)(v79, v80);
          BOOL v66 = v61 == 0;
          if (!(v61 | v77)) {
            break;
          }
          uint64_t v64 = v77;
          ++v68;
          char v83 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v46 = v190;
          if (v83) {
            goto LABEL_69;
          }
        }
        uint64_t v61 = 0;
        BOOL v66 = 1;
LABEL_69:
        uint64_t v51 = v196;
        int v67 = v178;
      }
      unint64_t v65 = v172;
    }
    else
    {
      uint64_t v61 = 0;
      BOOL v66 = 1;
      int v67 = v63;
    }
    uint64_t v132 = *(void *)(*(void *)v51 + 240);
    uint64_t v133 = v174;
    if ((v51[v132] & 1) == 0) {
      *v193 = v65;
    }
    swift_bridgeObjectRelease();
    if (v66)
    {
      long long v134 = *(void (**)(void, uint64_t))(v133 + 8);
      uint64_t v135 = AssociatedTypeWitness;
      v134(v67, AssociatedTypeWitness);
      v134(v188, v135);
    }
    else
    {
      uint64_t v182 = v132;
      uint64_t v136 = v184;
      uint64_t v202 = Array.init()();
      uint64_t v137 = swift_bridgeObjectRetain();
      uint64_t v138 = v197;
      uint64_t v139 = MEMORY[0x24C522240](v137, v197, v136, v29);
      uint64_t v141 = v140;
      char v143 = v142;
      swift_bridgeObjectRelease();
      uint64_t v199 = v139;
      uint64_t v200 = v141;
      char v201 = v143 & 1;
      uint64_t v144 = swift_bridgeObjectRetain();
      uint64_t v194 = MEMORY[0x24C522340](v144, v138, v136, v29);
      uint64_t v191 = v145;
      char v147 = v146;
      swift_bridgeObjectRelease();
      outlined copy of [A : B].Index._Variant<A, B>(v139, v141, v143 & 1);
      LODWORD(v190) = v147 & 1;
      char v148 = static Dictionary.Index.== infix(_:_:)();
      outlined consume of [String : AccessibilityCustomAttributes.Value].Index._Variant(v139, v141, v143 & 1);
      if ((v148 & 1) == 0)
      {
        long long v149 = (void (**)(char *, uint64_t))(v183 + 8);
        v183 += 16;
        do
        {
          char v150 = v143 & 1;
          outlined copy of [A : B].Index._Variant<A, B>(v139, v141, v143 & 1);
          swift_bridgeObjectRetain();
          long long v151 = v186;
          Dictionary.subscript.getter();
          swift_bridgeObjectRelease();
          outlined consume of [String : AccessibilityCustomAttributes.Value].Index._Variant(v139, v141, v150);
          (*v149)(v151, v138);
          uint64_t v152 = v205;
          if ((*(unsigned char *)(v205 + *(void *)(*(void *)v205 + 240)) & 1) == 0
            && *(_DWORD *)(v205 + *(void *)(*(void *)v205 + 216)) != *(_DWORD *)&v196[v187])
          {
            type metadata accessor for Array();
            swift_retain();
            Array.append(_:)();
            --v61;
            (*(void (**)(char *, uint64_t, uint64_t))v183)(v186, v152 + *(void *)(*(void *)v152 + 160), v138);
            char v198 = 1;
            swift_beginAccess();
            Dictionary.subscript.setter();
            swift_endAccess();
          }
          uint64_t v153 = *v195;
          swift_bridgeObjectRetain();
          MEMORY[0x24C522350](&v199, v153, v138, v136, v29);
          swift_release();
          swift_bridgeObjectRelease();
          if (!v61) {
            break;
          }
          uint64_t v139 = v199;
          uint64_t v141 = v200;
          char v143 = v201;
          outlined copy of [A : B].Index._Variant<A, B>(v199, v200, v201);
          char v154 = static Dictionary.Index.== infix(_:_:)();
          outlined consume of [String : AccessibilityCustomAttributes.Value].Index._Variant(v139, v141, v143);
        }
        while ((v154 & 1) == 0);
      }
      uint64_t v155 = v202;
      uint64_t v156 = MEMORY[0x24C522EA0](v202, v136);
      uint64_t v51 = v196;
      uint64_t v157 = v174;
      if (v156)
      {
        uint64_t v158 = 4;
        do
        {
          uint64_t v159 = v158 - 4;
          Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
          Array._checkSubscript(_:wasNativeTypeChecked:)();
          if (IsNativeType)
          {
            long long v161 = *(_DWORD **)(v155 + 8 * v158);
            swift_retain();
            uint64_t v162 = v158 - 3;
            if (__OFADD__(v159, 1)) {
              goto LABEL_90;
            }
          }
          else
          {
            long long v161 = (_DWORD *)_ArrayBuffer._getElementSlowPath(_:)();
            uint64_t v162 = v158 - 3;
            if (__OFADD__(v159, 1))
            {
LABEL_90:
              __break(1u);
              break;
            }
          }
          ForEachState.eraseItem(_:)(v161);
          swift_release();
          ++v158;
        }
        while (v162 != MEMORY[0x24C522EA0](v155, v136));
      }
      outlined consume of [String : AccessibilityCustomAttributes.Value].Index._Variant(v194, v191, v190);
      swift_bridgeObjectRelease();
      outlined consume of [String : AccessibilityCustomAttributes.Value].Index._Variant(v199, v200, v201);
      v163 = *(void (**)(void, uint64_t))(v157 + 8);
      uint64_t v164 = AssociatedTypeWitness;
      v163(v178, AssociatedTypeWitness);
      v163(v188, v164);
      uint64_t v132 = v182;
    }
    if ((v51[v132] & 1) == 0) {
      *(void *)&v51[v189] = 0x7FFFFFFFFFFFFFFFLL;
    }
    uint64_t *v192 = v203;
    swift_bridgeObjectRelease();
  }
  v51[*(void *)(*(void *)v51 + 240)] = 0;
}

void storeEnumTagSinglePayload for ForEach(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((((((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 < 0x7FFFFFFF)
            {
              long long v19 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0)
              {
                uint64_t v20 = a2 ^ 0x80000000;
                v19[1] = 0;
              }
              else
              {
                uint64_t v20 = a2 - 1;
              }
              *long long v19 = v20;
            }
            else
            {
              uint64_t v18 = *(void (**)(void))(v6 + 56);
              v18();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((((((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    int v17 = ~v8 + a2;
    bzero(a1, ((((((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)+ 8);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_43:
      __break(1u);
      break;
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

uint64_t initializeWithCopy for Canvas(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  unsigned int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = v8[1];
  *unsigned int v7 = *v8;
  v7[1] = v9;
  unint64_t v10 = ((unint64_t)v7 + 19) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = ((unint64_t)v8 + 19) & 0xFFFFFFFFFFFFFFF8;
  char v12 = *(unsigned char *)(v11 + 16);
  *(_OWORD *)unint64_t v10 = *(_OWORD *)v11;
  *(unsigned char *)(v10 + 16) = v12;
  *(unsigned char *)(v10 + 17) = *(unsigned char *)(v11 + 17);
  swift_retain();
  return a1;
}

uint64_t initializeWithCopy for ForEach(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  unsigned int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = v8[1];
  *unsigned int v7 = *v8;
  v7[1] = v9;
  unint64_t v10 = (void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v11 = (void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v10 = *v11;
  char v12 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  int v13 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  *char v12 = *v13;
  *(void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t ForEachList.Init.updateValue()(void *a1)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  int v2 = *(_DWORD *)(v1 + 4);
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[7];
  specialized ForEachList.Init.info.getter();
  swift_retain();
  ForEachState.invalidateViewCounts()();
  swift_release();
  *(_DWORD *)(v1 + 4) = v2 + 1;
  uint64_t v6 = specialized ForEachList.Init.info.getter();
  int v10 = HIDWORD(v3);
  uint64_t v11 = v4;
  uint64_t v14 = v5;
  uint64_t v12 = type metadata accessor for ForEachList();
  int v13 = &protocol witness table for ForEachList<A, B, C>;
  uint64_t v8 = v6;
  int v9 = v2 + 1;
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  swift_retain();
  AGGraphSetOutputValue();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v8);
}

uint64_t specialized ForEachList.Init.info.getter()
{
  return *(void *)AGGraphGetValue();
}

uint64_t ForEachChild.updateValue()(char *a1)
{
  uint64_t v83 = *MEMORY[0x263EF8340];
  uint64_t v3 = type metadata accessor for ObservationTracking._AccessList();
  uint64_t v70 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v68 = (char *)&v61 - v7;
  MEMORY[0x270FA5388](v8);
  char v69 = (char *)&v61 - v9;
  type metadata accessor for _ContiguousArrayStorage<ObservationTracking._AccessList>(0, (unint64_t *)&lazy cache variable for type metadata for ObservationTracking._AccessList?, MEMORY[0x263F8D8F0]);
  uint64_t v65 = v10;
  MEMORY[0x270FA5388](v10);
  BOOL v66 = (uint64_t *)((char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v12);
  uint64_t v71 = (char *)&v61 - v13;
  uint64_t v14 = *((void *)a1 + 4);
  uint64_t v74 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v72 = (char *)&v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  int v67 = (char *)&v61 - v18;
  MEMORY[0x270FA5388](v19);
  uint64_t v73 = (char *)&v61 - v20;
  uint64_t v21 = *((void *)a1 - 1);
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char *)&v61 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = specialized ForEachChild.info.getter();
  (*(void (**)(char *, uint64_t, char *))(v21 + 16))(v24, v1, a1);
  uint64_t v26 = &v24[*((int *)a1 + 17)];
  uint64_t v27 = (uint64_t *)(v25 + *(void *)(*(void *)v25 + 192));
  swift_beginAccess();
  uint64_t v28 = *v27;
  uint64_t v29 = *((void *)a1 + 2);
  uint64_t v30 = *((void *)a1 + 3);
  uint64_t v31 = *((void *)a1 + 5);
  swift_retain();
  uint64_t v76 = v29;
  uint64_t v77 = v30;
  uint64_t v78 = v14;
  uint64_t v79 = v31;
  long long v75 = *((_OWORD *)a1 + 3);
  long long v80 = v75;
  uint64_t v32 = type metadata accessor for ForEachState.Item();
  MEMORY[0x24C522390](&v81, v26, v28, v30, v32, v75);
  (*(void (**)(char *, uint64_t))(*(void *)(v30 - 8) + 8))(v26, v30);
  uint64_t v33 = v81;
  if (!v81)
  {
    swift_endAccess();
    return swift_release();
  }
  uint64_t v34 = swift_endAccess();
  uint64_t v35 = v25;
  if (*(_DWORD *)(v33 + *(void *)(*(void *)v33 + 216)) != *(_DWORD *)(v25 + *(void *)(*(void *)v25 + 232)))
  {
    swift_release();
    return swift_release();
  }
  MEMORY[0x270FA5388](v34);
  *(&v61 - 2) = v25;
  *(&v61 - 1) = v33;
  uint64_t CurrentAttribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x263F288F8])
  {
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v28 = CurrentAttribute;
  uint64_t v63 = &v61;
  *(void *)&long long v75 = v33;
  if (one-time initialization token for lastestAccessLists != -1) {
LABEL_21:
  }
    swift_once();
  swift_beginAccess();
  char v62 = static ObservationRegistrar.lastestAccessLists;
  static ObservationRegistrar.lastestAccessLists = (_UNKNOWN *)MEMORY[0x263F8EE78];
  uint64_t v38 = v70;
  uint64_t v37 = (uint64_t)v71;
  uint64_t v39 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v70 + 56))(v71, 1, 1, v3);
  uint64_t v61 = (uint64_t)&v61;
  MEMORY[0x270FA5388](v39);
  *(&v61 - 4) = v14;
  *(&v61 - 3) = (uint64_t)partial apply for closure #1 in ForEachChild.updateValue();
  *(&v61 - 2) = (uint64_t)(&v61 - 4);
  uint64_t v40 = type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for Error);
  _ss24withUnsafeMutablePointer2to_q0_xz_q0_SpyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v37, (uint64_t)closure #1 in _withObservation<A>(do:)partial apply, (uint64_t)(&v61 - 6), v65, v40, v14, MEMORY[0x263F8E4E0], (uint64_t)v82);
  uint64_t v65 = 0;
  uint64_t v41 = (void (*)(void, void, void))v66;
  outlined init with copy of ObservationTracking._AccessList?(v37, (uint64_t)v66);
  int v42 = (*(uint64_t (**)(void, uint64_t, uint64_t))(v38 + 48))(v41, 1, v3);
  uint64_t v64 = v35;
  if (v42 == 1)
  {
    outlined destroy of ObservationTracking._AccessList?((uint64_t)v41);
  }
  else
  {
    BOOL v44 = v41;
    uint64_t v45 = v69;
    BOOL v66 = *(void **)(v38 + 32);
    ((void (*)(char *, void, uint64_t))v66)(v69, v44, v3);
    (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v68, v45, v3);
    swift_beginAccess();
    uint64_t v46 = (char *)static ObservationRegistrar.lastestAccessLists;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static ObservationRegistrar.lastestAccessLists = v46;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v46 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v46 + 2) + 1, 1, (unint64_t)v46);
      static ObservationRegistrar.lastestAccessLists = v46;
    }
    unint64_t v49 = *((void *)v46 + 2);
    unint64_t v48 = *((void *)v46 + 3);
    if (v49 >= v48 >> 1)
    {
      uint64_t v46 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v48 > 1, v49 + 1, 1, (unint64_t)v46);
      static ObservationRegistrar.lastestAccessLists = v46;
    }
    *((void *)v46 + 2) = v49 + 1;
    ((void (*)(char *, char *, uint64_t))v66)(&v46[((*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80))+ *(void *)(v38 + 72) * v49], v68, v3);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v38 + 8))(v69, v3);
    uint64_t v37 = (uint64_t)v71;
  }
  __int16 v50 = *(void (**)(char *, char *, uint64_t))(v74 + 32);
  uint64_t v51 = v67;
  v50(v67, v72, v14);
  outlined destroy of ObservationTracking._AccessList?(v37);
  v50(v73, v51, v14);
  uint64_t v52 = *((void *)static ObservationRegistrar.lastestAccessLists + 2);
  if (v52)
  {
    uint64_t v71 = (char *)static ObservationRegistrar.lastestAccessLists;
    uint64_t v72 = a1;
    __int16 v55 = *(void (**)(char *, char *, uint64_t))(v38 + 16);
    uint64_t v54 = v38 + 16;
    uint64_t v53 = v55;
    uint64_t v56 = (char *)static ObservationRegistrar.lastestAccessLists
        + ((*(unsigned __int8 *)(v54 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v54 + 64));
    uint64_t v57 = *(void *)(v54 + 56);
    swift_bridgeObjectRetain();
    do
    {
      v53(v5, v56, v3);
      installObservationSlow<A>(accessList:attribute:)((uint64_t)v5, v28, v14);
      (*(void (**)(char *, uint64_t))(v54 - 8))(v5, v3);
      v56 += v57;
      --v52;
    }
    while (v52);
    swift_bridgeObjectRelease();
    a1 = v72;
  }
  static ObservationRegistrar.lastestAccessLists = v62;
  uint64_t v58 = swift_bridgeObjectRelease();
  MEMORY[0x270FA5388](v58);
  *(&v61 - 2) = (uint64_t)a1;
  *(&v61 - 1) = swift_getWitnessTable();
  uint64_t v59 = (uint64_t)v73;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v73, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)(&v61 - 4), v14, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v60);
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v74 + 8))(v59, v14);
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4, unint64_t *a5, uint64_t (*a6)(uint64_t), uint64_t (*a7)(void), uint64_t (*a8)(void))
{
  if (a3)
  {
    unint64_t v12 = *(void *)(a4 + 24);
    uint64_t v13 = v12 >> 1;
    if ((uint64_t)(v12 >> 1) < a2)
    {
      if (v13 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v12 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v13 = a2;
      }
    }
  }
  else
  {
    uint64_t v13 = a2;
  }
  uint64_t v14 = *(void *)(a4 + 16);
  if (v13 <= v14) {
    uint64_t v15 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v15 = v13;
  }
  if (!v15)
  {
    uint64_t v19 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  type metadata accessor for DisplayList.ArchiveIDs?(0, a5, a6, MEMORY[0x263F8E0F8]);
  uint64_t v16 = *(void *)(a7(0) - 8);
  uint64_t v17 = *(void *)(v16 + 72);
  unint64_t v18 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  uint64_t v19 = (void *)swift_allocObject();
  size_t v20 = _swift_stdlib_malloc_size(v19);
  if (!v17 || (v20 - v18 == 0x8000000000000000 ? (BOOL v21 = v17 == -1) : (BOOL v21 = 0), v21))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v19[2] = v14;
  v19[3] = 2 * ((uint64_t)(v20 - v18) / v17);
LABEL_19:
  uint64_t v22 = *(void *)(a7(0) - 8);
  unint64_t v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  unint64_t v24 = (unint64_t)v19 + v23;
  if (a1)
  {
    if ((unint64_t)v19 < a4 || v24 >= a4 + v23 + *(void *)(v22 + 72) * v14)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v19 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v14, v24, a4, a8);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v19;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a5(0) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<ObservationTracking._AccessList>, MEMORY[0x263F8F200], MEMORY[0x263F8F200], MEMORY[0x263F8F200]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<Transaction.PendingListeners.WeakListener>, type metadata accessor for Transaction.PendingListeners.WeakListener, type metadata accessor for Transaction.PendingListeners.WeakListener, type metadata accessor for Transaction.PendingListeners.WeakListener);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<LocalizedStringKey.FormatArgument>, type metadata accessor for LocalizedStringKey.FormatArgument, type metadata accessor for LocalizedStringKey.FormatArgument, type metadata accessor for LocalizedStringKey.FormatArgument);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<ObservationTracking>, MEMORY[0x263F8F208], MEMORY[0x263F8F208], MEMORY[0x263F8F208]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<Duration.UnitsFormatStyle.Unit>, MEMORY[0x263F07EC8], MEMORY[0x263F07EC8], MEMORY[0x263F07EC8]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<Text.Effect.RenderSegmentation.Segment>, type metadata accessor for Text.Effect.RenderSegmentation.Segment, type metadata accessor for Text.Effect.RenderSegmentation.Segment, type metadata accessor for Text.Effect.RenderSegmentation.Segment);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<UUID>, MEMORY[0x263F07508], MEMORY[0x263F07508], MEMORY[0x263F07508]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry>, (uint64_t (*)(uint64_t))type metadata accessor for SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry, (uint64_t (*)(void))type metadata accessor for SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry, (uint64_t (*)(void))type metadata accessor for SizeFittingTextCache<ResolvedTextHelper, StickyTextSizeFittingLogic>.CacheEntry);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityNodeAttachment>, type metadata accessor for AccessibilityNodeAttachment, type metadata accessor for AccessibilityNodeAttachment, type metadata accessor for AccessibilityNodeAttachment);
}

uint64_t specialized ForEachChild.info.getter()
{
  return *(void *)AGGraphGetValue();
}

uint64_t type metadata accessor for ForEachState.Info()
{
  return swift_getGenericMetadata();
}

uint64_t ForEachState.invalidateViewCounts()()
{
  uint64_t v1 = v0;
  int v2 = (uint64_t *)(v0 + *(void *)(*(void *)v0 + 176));
  swift_beginAccess();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v4 = *v2;
  if (isUniquelyReferenced_nonNull_native)
  {
    specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v4 + 16));
  }
  else
  {
    *int v2 = (uint64_t)specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(void *)(v4 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  uint64_t result = swift_endAccess();
  *(void *)(v1 + *(void *)(*(void *)v1 + 184)) = 2;
  return result;
}

void *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  if (a2 <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = a2;
  }
  if (!v4) {
    return (void *)MEMORY[0x263F8EE78];
  }
  type metadata accessor for _ContiguousArrayStorage<Int>(0, a3, a4, MEMORY[0x263F8E0F8]);
  uint64_t v6 = (void *)swift_allocObject();
  int64_t v7 = _swift_stdlib_malloc_size(v6);
  uint64_t v8 = v7 - 32;
  if (v7 < 32) {
    uint64_t v8 = v7 - 25;
  }
  v6[2] = a1;
  float64x2_t v6[3] = 2 * (v8 >> 3);
  return v6;
}

{
  uint64_t v4;
  void *v6;
  size_t v7;

  if (a2 <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = a2;
  }
  if (!v4) {
    return (void *)MEMORY[0x263F8EE78];
  }
  type metadata accessor for _ContiguousArrayStorage<Int>(0, a3, a4, MEMORY[0x263F8E0F8]);
  uint64_t v6 = (void *)swift_allocObject();
  int64_t v7 = _swift_stdlib_malloc_size(v6);
  v6[2] = a1;
  float64x2_t v6[3] = 2 * ((uint64_t)(v7 - 32) / 48);
  return v6;
}

void type metadata accessor for _ContiguousArrayStorage<Text.Effect.Drawable.Fragment>(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = type metadata accessor for _ContiguousArrayStorage();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<Int>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

_DWORD *initializeWithCopy for ForEachChild(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

__n128 __swift_memcpy96_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t type metadata accessor for ForEachList()
{
  return swift_getGenericMetadata();
}

uint64_t outlined init with copy of _VariadicView_Children(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for _VariadicView_Children(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  long long v5 = *(void **)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = v6;
  id v7 = v5;
  swift_bridgeObjectRetain();
  return a1;
}

void type metadata accessor for ForEachState<Slice<SubviewsCollection>, Subview.ID, Subview>.Item(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *))
{
  if (!*a2)
  {
    _s7SwiftUI17UnaryLayoutEngine33_1C3B77B617AD058A6802F719E38F5D79LLVyAA023IgnoresAutomaticPaddingD033_47C1BD8C61550BB60F4F3D12F752D53DLLVGMaTm_0(255, &lazy cache variable for type metadata for Slice<SubviewsCollection>, (uint64_t (*)(void))lazy protocol witness table accessor for type SubviewsCollection and conformance SubviewsCollection, (uint64_t)&type metadata for SubviewsCollection, MEMORY[0x263F8E738]);
    v9[0] = v6;
    v9[1] = &type metadata for Subview.ID;
    v9[2] = &type metadata for Subview;
    v9[3] = lazy protocol witness table accessor for type Slice<SubviewsCollection> and conformance <> Slice<A>();
    v9[4] = lazy protocol witness table accessor for type Subview.ID and conformance Subview.ID();
    v9[5] = &protocol witness table for Subview;
    unint64_t v7 = a3(a1, v9);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t specialized ForEach<>.init(_:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  outlined init with copy of _VariadicView_Children(a1, (uint64_t)v20);
  lazy protocol witness table accessor for type _VariadicView_Children and conformance _VariadicView_Children();
  lazy protocol witness table accessor for type _VariadicView_Children.Element and conformance _VariadicView_Children.Element();
  uint64_t KeyPath = swift_getKeyPath();
  *(void *)&long long v19 = 0;
  outlined init with copy of _VariadicView_Children((uint64_t)v20, (uint64_t)v16);
  *(void *)&long long v18 = a3;
  *((void *)&v18 + 1) = KeyPath;
  *((void *)&v17 + 1) = a2;
  uint64_t v9 = one-time initialization token for v6;
  swift_retain();
  if (v9 != -1) {
    swift_once();
  }
  unsigned int v10 = static Semantics.v6;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC != 1)
  {
    if (static Semantics.forced < v10) {
      goto LABEL_7;
    }
LABEL_9:
    uint64_t v11 = 0;
    goto LABEL_10;
  }
  if (dyld_program_sdk_at_least()) {
    goto LABEL_9;
  }
LABEL_7:
  uint64_t v11 = AGMakeUniqueID();
LABEL_10:
  swift_release();
  outlined destroy of _VariadicView_Children((uint64_t)v20);
  *((void *)&v19 + 1) = v11;
  long long v12 = v17;
  a4[2] = v16[2];
  a4[3] = v12;
  long long v13 = v16[1];
  *a4 = v16[0];
  a4[1] = v13;
  long long v14 = v19;
  a4[4] = v18;
  a4[5] = v14;
  return outlined destroy of _VariadicView_Children(a1);
}

{
  uint64_t KeyPath;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  long long v12;
  long long v13;
  long long v14;
  _OWORD v16[4];
  long long v17;
  long long v18;
  long long v19;
  unsigned char v20[72];

  outlined init with copy of Slice<SubviewsCollection>(a1, (uint64_t)v20);
  type metadata accessor for Slice<SubviewsCollection>(0, &lazy cache variable for type metadata for Slice<SubviewsCollection>, (uint64_t (*)(void))lazy protocol witness table accessor for type SubviewsCollection and conformance SubviewsCollection, (uint64_t)&type metadata for SubviewsCollection, MEMORY[0x263F8E738]);
  lazy protocol witness table accessor for type Slice<SubviewsCollection> and conformance <> Slice<A>();
  lazy protocol witness table accessor for type Subview and conformance Subview();
  uint64_t KeyPath = swift_getKeyPath();
  *(void *)&long long v19 = 0;
  outlined init with copy of Slice<SubviewsCollection>((uint64_t)v20, (uint64_t)v16);
  *(void *)&long long v18 = a3;
  *((void *)&v18 + 1) = KeyPath;
  *((void *)&v17 + 1) = a2;
  uint64_t v9 = one-time initialization token for v6;
  swift_retain();
  if (v9 != -1) {
    swift_once();
  }
  unsigned int v10 = static Semantics.v6;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC != 1)
  {
    if (static Semantics.forced < v10) {
      goto LABEL_7;
    }
LABEL_9:
    uint64_t v11 = 0;
    goto LABEL_10;
  }
  if (dyld_program_sdk_at_least()) {
    goto LABEL_9;
  }
LABEL_7:
  uint64_t v11 = AGMakeUniqueID();
LABEL_10:
  swift_release();
  outlined destroy of Slice<SubviewsCollection>((uint64_t)v20);
  *((void *)&v19 + 1) = v11;
  long long v12 = v18;
  a4[4] = v17;
  a4[5] = v12;
  long long v13 = v16[1];
  *a4 = v16[0];
  a4[1] = v13;
  long long v14 = v16[3];
  a4[2] = v16[2];
  a4[3] = v14;
  a4[6] = v19;
  return outlined destroy of Slice<SubviewsCollection>(a1);
}

unint64_t lazy protocol witness table accessor for type _VariadicView_Children.Element and conformance _VariadicView_Children.Element()
{
  unint64_t result = lazy protocol witness table cache variable for type _VariadicView_Children.Element and conformance _VariadicView_Children.Element;
  if (!lazy protocol witness table cache variable for type _VariadicView_Children.Element and conformance _VariadicView_Children.Element)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _VariadicView_Children.Element and conformance _VariadicView_Children.Element);
  }
  return result;
}

double ScrollAnchorStorage.adjustedAnchor(role:layoutDirection:)(char *a1, unsigned __int8 *a2)
{
  char v3 = *a1;
  int v4 = *a2;
  char v5 = *((unsigned char *)v2 + 24);
  uint64_t v8 = *v2;
  long long v9 = *(_OWORD *)(v2 + 1);
  char v10 = v5;
  char v7 = v3;
  double result = ScrollAnchorStorage.anchor(role:)(&v7);
  if (v4) {
    return 1.0 - result;
  }
  return result;
}

double ScrollAnchorStorage.anchor(role:)(unsigned char *a1)
{
  double v2 = *v1;
  double v3 = v1[1];
  char v4 = *((unsigned char *)v1 + 24);
  if (*a1)
  {
    if (*a1 == 1)
    {
      if (!*(void *)(*(void *)&v2 + 16)) {
        goto LABEL_11;
      }
      uint64_t v5 = 1;
    }
    else
    {
      if (!*(void *)(*(void *)&v2 + 16)) {
        goto LABEL_11;
      }
      uint64_t v5 = 2;
    }
  }
  else
  {
    if (!*(void *)(*(void *)&v2 + 16)) {
      goto LABEL_11;
    }
    uint64_t v5 = 0;
  }
  uint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(v5);
  if (v7) {
    return *(double *)(*(void *)(*(void *)&v2 + 56) + 16 * v6);
  }
LABEL_11:
  if ((v4 & 1) == 0) {
    return v3;
  }
  uint64_t v9 = one-time initialization token for topLeading;
  swift_bridgeObjectRetain();
  if (v9 != -1) {
    swift_once();
  }
  double v8 = *(double *)&static UnitPoint.topLeading;
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t type metadata completion function for GroupElementsOfContent()
{
  uint64_t result = type metadata accessor for GroupElementsOfContent.Storage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t static _VariadicView_ViewRoot.makeView(root:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, int *, uint64_t *)@<X2>, unint64_t a4@<X4>, void *a5@<X8>)
{
  void (*v23)(void *__return_ptr, int *, uint64_t *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  char v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  int v38;
  int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  void v48[2];
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  int v61;
  int v62;
  unsigned int v63;
  unsigned int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  unsigned int v76;
  int v77;
  int v78;
  unsigned int v79;
  unsigned int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  int v92;
  int v93;
  unint64_t v94;
  int v95;
  uint64_t v96;

  unsigned __int8 v96 = *MEMORY[0x263EF8340];
  uint64_t v38 = *a1;
  int v6 = *(_DWORD *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 16);
  int v8 = *(_DWORD *)(a2 + 24);
  int v9 = *(_DWORD *)(a2 + 28);
  int v10 = *(_DWORD *)(a2 + 32);
  int v11 = *(_DWORD *)(a2 + 36);
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = *(void *)(a2 + 48);
  uint64_t v45 = *(_DWORD *)(a2 + 60);
  uint64_t v46 = *(_DWORD *)(a2 + 56);
  unsigned int v43 = *(_DWORD *)(a2 + 68);
  BOOL v44 = *(_DWORD *)(a2 + 64);
  uint64_t v41 = *(_DWORD *)(a2 + 76);
  int v42 = *(_DWORD *)(a2 + 72);
  uint64_t v40 = *(_DWORD *)(a2 + 80);
  int v82 = *(void *)a2;
  uint64_t v5 = v82;
  LODWORD(v83) = v6;
  uint64_t v84 = v7;
  uint64_t v85 = v8;
  uint64_t v86 = v9;
  int v14 = v8;
  uint64_t v30 = v8;
  uint64_t v87 = v10;
  uint64_t v88 = v11;
  uint64_t v89 = v12;
  uint64_t v90 = v13;
  uint64_t v91 = __PAIR64__(v45, v46);
  Swift::String v92 = v44;
  Swift::String v93 = v43;
  Swift::String v94 = __PAIR64__(v41, v42);
  Swift::String v95 = v40;
  a3(&v66, a1, &v82);
  int v15 = *MEMORY[0x263F288F8];
  int v82 = v5;
  LODWORD(v83) = v6;
  uint64_t v84 = v7;
  uint64_t v85 = v14;
  uint64_t v86 = v9;
  uint64_t v87 = v10;
  uint64_t v88 = v11;
  uint64_t v90 = 0;
  uint64_t v91 = 0;
  uint64_t v89 = v12;
  Swift::String v92 = v15;
  Swift::String v94 = MEMORY[0x263F8EE88];
  LOBYTE(v95) = 0;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v31 = _ViewListOutputs.makeAttribute(inputs:)(&v82);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined destroy of _ViewListOutputs((uint64_t)&v66);
  static DynamicPropertyCache.fields(of:)(a4, (uint64_t)&v82);
  uint64_t v17 = v82;
  uint64_t v16 = v83;
  char v18 = v84;
  int v19 = HIDWORD(v84);
  int v82 = v5;
  uint64_t v33 = v10;
  LODWORD(v83) = v6;
  uint64_t v84 = v7;
  uint64_t v85 = v30;
  uint64_t v86 = v9;
  uint64_t v87 = v10;
  uint64_t v88 = v11;
  uint64_t v89 = v12;
  uint64_t v90 = v13;
  uint64_t v91 = __PAIR64__(v45, v46);
  Swift::String v92 = v44;
  Swift::String v93 = v43;
  Swift::String v94 = __PAIR64__(v41, v42);
  Swift::String v95 = v40;
  unint64_t v49 = v38;
  uint64_t v34 = v17;
  uint64_t v35 = v16;
  BOOL v66 = v17;
  int v67 = v16;
  char v36 = v18;
  LOBYTE(v68) = v18;
  uint64_t v29 = v19;
  HIDWORD(v68) = v19;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static _VariadicView_ViewRoot.makeBody(root:list:inputs:fields:)(v48, (uint64_t)&v50, &v49, v31, (uint64_t)&v82, &v66);
  uint64_t v39 = v48[0];
  uint64_t v27 = v50;
  uint64_t v28 = v51;
  uint64_t v32 = v52;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  BOOL v66 = v5;
  LODWORD(v67) = v6;
  uint64_t v68 = v7;
  char v69 = v30;
  uint64_t v70 = v9;
  uint64_t v73 = v12;
  uint64_t v74 = v13;
  long long v75 = v46;
  uint64_t v76 = v45;
  uint64_t v77 = v44;
  uint64_t v78 = v43;
  uint64_t v79 = v42;
  long long v80 = v41;
  uint64_t v81 = v40;
  uint64_t v72 = v11;
  uint64_t v71 = 0;
  unint64_t v49 = v39;
  __int16 v50 = v5;
  LODWORD(v51) = v6;
  uint64_t v52 = v7;
  uint64_t v53 = v30;
  uint64_t v54 = v9;
  __int16 v55 = 0;
  uint64_t v56 = v11;
  uint64_t v57 = v12;
  uint64_t v58 = v13;
  uint64_t v59 = v46;
  uint64_t v60 = v45;
  uint64_t v61 = v44;
  char v62 = v43;
  uint64_t v63 = v42;
  uint64_t v64 = v41;
  uint64_t v65 = v40;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  unint64_t v23 = *(void (**)(void *__return_ptr, int *, uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness
                                                                                        + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v23(v48, &v49, &v50, AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v71 = v33;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)((uint64_t)v48, (uint64_t)&v66);
    AGSubgraphEndTreeElement();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  unint64_t v24 = v48[0];
  uint64_t v25 = v48[1];
  if ((v32 & 1) == 0)
  {
    __int16 v50 = v27;
    uint64_t v51 = v28;
    LODWORD(v48[0]) = v38;
    BOOL v66 = v34;
    int v67 = v35;
    LOBYTE(v68) = v36;
    HIDWORD(v68) = v29;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)((unint64_t)v48, &v66, a4);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *a5 = v24;
  a5[1] = v25;
  return result;
}

uint64_t static _VariadicView_ViewRoot._makeViewList(root:inputs:body:)(int *a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, int *, uint64_t *), uint64_t a4, unint64_t a5)
{
  uint64_t v77 = *MEMORY[0x263EF8340];
  int v48 = *a1;
  int v6 = *(_DWORD *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 16);
  unsigned int v9 = *(_DWORD *)(a2 + 24);
  unsigned int v8 = *(_DWORD *)(a2 + 28);
  unsigned int v10 = *(_DWORD *)(a2 + 32);
  unsigned int v11 = *(_DWORD *)(a2 + 36);
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v44 = *(void *)(a2 + 56);
  uint64_t v46 = *(void *)(a2 + 48);
  int v42 = *(_DWORD *)(a2 + 64);
  uint64_t v37 = *(void *)(a2 + 72);
  char v13 = *(unsigned char *)(a2 + 80);
  char v39 = v13;
  uint64_t v66 = *(void *)a2;
  uint64_t v5 = v66;
  LODWORD(v67) = v6;
  uint64_t v68 = v7;
  unint64_t v69 = __PAIR64__(v8, v9);
  unint64_t v70 = __PAIR64__(v11, v10);
  uint64_t v71 = v12;
  uint64_t v72 = v46;
  uint64_t v73 = v44;
  int v74 = v42;
  uint64_t v75 = v37;
  char v76 = v13;
  a3(&v52, a1, &v66);
  int v14 = *MEMORY[0x263F288F8];
  uint64_t v66 = v5;
  LODWORD(v67) = v6;
  uint64_t v68 = v7;
  unint64_t v69 = __PAIR64__(v8, v9);
  unint64_t v70 = __PAIR64__(v11, v10);
  uint64_t v72 = 0;
  uint64_t v73 = 0;
  uint64_t v71 = v12;
  int v74 = v14;
  uint64_t v75 = MEMORY[0x263F8EE88];
  char v76 = 0;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  int v15 = _ViewListOutputs.makeAttribute(inputs:)(&v66);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined destroy of _ViewListOutputs((uint64_t)&v52);
  static DynamicPropertyCache.fields(of:)(a5, (uint64_t)&v66);
  uint64_t v17 = v66;
  uint64_t v16 = v67;
  char v18 = v68;
  int v19 = HIDWORD(v68);
  uint64_t v66 = v5;
  LODWORD(v67) = v6;
  uint64_t v68 = v7;
  unint64_t v69 = __PAIR64__(v8, v9);
  unint64_t v70 = __PAIR64__(v11, v10);
  uint64_t v71 = v12;
  uint64_t v72 = v46;
  uint64_t v73 = v44;
  int v74 = v42;
  uint64_t v75 = v37;
  char v76 = v39;
  int v50 = v48;
  uint64_t v43 = v17;
  uint64_t v45 = v16;
  uint64_t v52 = v17;
  uint64_t v53 = v16;
  char v47 = v18;
  LOBYTE(v54) = v18;
  int v35 = v19;
  HIDWORD(v54) = v19;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static _VariadicView_ViewRoot.makeBody(root:list:inputs:fields:)(&v51, (uint64_t)&v63, &v50, v15, (uint64_t)&v66, &v52);
  uint64_t v20 = v51;
  uint64_t v33 = v63;
  uint64_t v34 = v64;
  char v41 = v65;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v22 = v66;
  int v40 = v67;
  uint64_t v23 = v68;
  unint64_t v24 = v69;
  unint64_t v25 = v70;
  uint64_t v26 = v71;
  uint64_t v38 = v72;
  uint64_t v27 = v73;
  int v36 = v74;
  uint64_t v28 = v75;
  char v29 = v76;
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  LODWORD(v63) = v20;
  uint64_t v52 = v22;
  LODWORD(v53) = v40;
  uint64_t v54 = v23;
  unint64_t v55 = v24;
  unint64_t v56 = v25;
  uint64_t v57 = v26;
  uint64_t v58 = v38;
  uint64_t v59 = v27;
  int v60 = v36;
  uint64_t v61 = v28;
  char v62 = v29;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t *, uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(&v63, &v52, AssociatedTypeWitness, AssociatedConformanceWitness);
  $defer #1 <A>() in static ViewModifier.makeDebuggableViewList(modifier:inputs:body:)(v20, AssociatedTypeWitness, AssociatedConformanceWitness);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if ((v41 & 1) == 0)
  {
    uint64_t v63 = v33;
    uint64_t v64 = v34;
    unsigned int v51 = v48;
    uint64_t v52 = v43;
    uint64_t v53 = v45;
    LOBYTE(v54) = v47;
    HIDWORD(v54) = v35;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)((unint64_t)&v51, &v52, a5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

void static _VariadicView_ViewRoot.makeBody(root:list:inputs:fields:)(_DWORD *a1, uint64_t a2, int *a3, int a4, uint64_t a5, uint64_t *a6)
{
  int v8 = *a3;
  uint64_t v9 = *a6;
  uint64_t v10 = a6[1];
  char v11 = *((unsigned char *)a6 + 16);
  int v12 = *((_DWORD *)a6 + 5);
  if (AGTypeGetKind() - 2 < 4)
  {
    id v13 = (id)AGSubgraphGetCurrent();
    if (v13)
    {
      int v14 = v13;
      v25[0] = v8;
      v25[1] = a4;
      id v26 = v13;
      v22[0] = v9;
      v22[1] = v10;
      char v23 = v11;
      int v24 = v12;
      uint64_t v15 = type metadata accessor for ViewRootBodyAccessor();
      uint64_t WitnessTable = swift_getWitnessTable();
      BodyAccessor.makeBody(container:inputs:fields:)(a1, a2, (uint64_t)v25, a5, (uint64_t)v22, v15, WitnessTable);

      return;
    }
    __break(1u);
  }
  _StringGuts.grow(_:)(75);
  v17._object = (void *)0x800000024621FCA0;
  v17._countAndFlagsBits = 0xD00000000000003DLL;
  String.append(_:)(v17);
  v18._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19._countAndFlagsBits = 0x6C63206120736920;
  v19._object = (void *)0xEC0000002E737361;
  String.append(_:)(v19);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t ViewRootBodyAccessor.updateBody(of:changed:)(uint64_t a1, char a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v50 = a1;
  uint64_t v61 = *MEMORY[0x263EF8340];
  uint64_t v10 = type metadata accessor for OSSignpostID();
  uint64_t v49 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  int v12 = (char *)v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v53 = (char *)v43 - v14;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v52 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  unsigned int v51 = (char *)v43 - v16;
  type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  uint64_t Value = AGGraphGetValue();
  char v19 = v18;
  outlined init with copy of AnyTrackedValue(Value, (uint64_t)v60);
  if ((a2 & 1) == 0 && (v19 & 1) == 0) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v60);
  }
  uint64_t v48 = AssociatedTypeWitness;
  outlined init with copy of AnyTrackedValue((uint64_t)v60, (uint64_t)v57);
  uint64_t v58 = a4;
  uint64_t v59 = MEMORY[0x263F8EE78];
  id v21 = a4;
  int v22 = static os_signpost_type_t.begin.getter();
  static os_signpost_type_t.event.getter();
  if (kdebug_is_enabled())
  {
    int v46 = v22;
    static OSSignpostID.exclusive.getter();
    _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, MEMORY[0x263F8E0F8]);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2461BDD50;
    uint64_t v24 = AGTypeID.description.getter();
    uint64_t v26 = v25;
    uint64_t v27 = a5;
    *(void *)(inited + 56) = MEMORY[0x263F8D310];
    unint64_t v28 = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(inited + 32) = v24;
    char v29 = (void (**)(char *, uint64_t, uint64_t))(inited + 32);
    *(void *)(inited + 64) = v28;
    *(void *)(inited + 40) = v26;
    uint64_t v47 = v27;
    *(void *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    uint64_t v45 = inited + 72;
    *(void *)(inited + 96) = MEMORY[0x263F8D310];
    *(void *)(inited + 104) = v28;
    *(void *)(inited + 80) = v30;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v31 = v49 + 16;
    (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v12, v53, v10);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    uint64_t v32 = swift_initStackObject();
    long long v54 = xmmword_2461BE2B0;
    *(_OWORD *)(v32 + 16) = xmmword_2461BE2B0;
    if (*(void *)(inited + 16))
    {
      uint64_t v33 = v32;
      outlined init with copy of AnyTrackedValue(inited + 32, v32 + 32);
      if (*(void *)(inited + 16) >= 2uLL)
      {
        v43[1] = inited;
        uint64_t v44 = a6;
        uint64_t inited = v46 | 0x14110014u;
        outlined init with copy of AnyTrackedValue(v45, v33 + 72);
        *(_OWORD *)(v33 + 128) = 0u;
        *(void *)(v33 + 144) = 0;
        *(_OWORD *)(v33 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(inited, v33, inited, (uint64_t)v12);
        outlined init with copy of CVarArg?(v33 + 112, (uint64_t)v55);
        swift_bridgeObjectRelease();
        if (!v56)
        {
LABEL_16:
          outlined destroy of CVarArg?((uint64_t)v55);
          swift_bridgeObjectRelease();
          uint64_t v38 = *(void (**)(char *, uint64_t))(v49 + 8);
          v38(v53, v10);
          v38(v12, v10);
          a6 = v44;
          a5 = v47;
          goto LABEL_17;
        }
        char v29 = (void (**)(char *, uint64_t, uint64_t))(v31 + 8);
        outlined destroy of CVarArg?((uint64_t)v55);
        if (one-time initialization token for continuation == -1)
        {
LABEL_11:
          uint64_t v34 = __swift_project_value_buffer(v10, (uint64_t)static OSSignpostID.continuation);
          int v35 = *v29;
          while (1)
          {
            v35(v12, v34, v10);
            uint64_t v36 = swift_initStackObject();
            *(_OWORD *)(v36 + 16) = v54;
            *(_OWORD *)(v36 + 32) = 0u;
            *(_OWORD *)(v36 + 48) = 0u;
            *(_OWORD *)(v36 + 64) = 0u;
            *(_OWORD *)(v36 + 80) = 0u;
            *(_OWORD *)(v36 + 96) = 0u;
            *(_OWORD *)(v36 + 128) = 0u;
            *(void *)(v36 + 144) = 0;
            *(_OWORD *)(v36 + 112) = 0u;
            uint64_t v37 = v36 + 112;
            specialized withKDebugValues(_:_:closure:)(inited, v36, inited, (uint64_t)v12);
            outlined init with copy of CVarArg?(v37, (uint64_t)v55);
            swift_bridgeObjectRelease();
            if (!v56) {
              break;
            }
            outlined destroy of CVarArg?((uint64_t)v55);
            if (one-time initialization token for continuation != -1) {
              swift_once();
            }
            uint64_t v34 = __swift_project_value_buffer(v10, (uint64_t)static OSSignpostID.continuation);
          }
          goto LABEL_16;
        }
LABEL_20:
        swift_once();
        goto LABEL_11;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_20;
  }
LABEL_17:
  AGGraphClearUpdate();
  uint64_t v39 = (uint64_t)v51;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(a6 + 56))(v57, a5, a6);
  AGGraphSetUpdate();
  uint64_t v40 = $defer #1 <A>() in traceRuleBody<A>(_:body:)();
  MEMORY[0x270FA5388](v40);
  v43[-2] = type metadata accessor for ViewRootBodyAccessor();
  v43[-1] = swift_getWitnessTable();
  uint64_t v41 = v48;
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v39, (uint64_t)partial apply for closure #2 in BodyAccessor.setBody(_:), (uint64_t)&v43[-4], v48, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v42);
  (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v39, v41);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v60);
  return outlined destroy of _VariadicView_Children((uint64_t)v57);
}

uint64_t type metadata accessor for ViewRootBodyAccessor()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for _VariadicView_ViewRoot.body(children:) in conformance SubviewsRoot<A>(uint64_t a1, uint64_t a2)
{
  return SubviewsRoot.body(children:)(a1, *(void (**)(unsigned char *))v2, *(void *)(v2 + 8), *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t SubviewsRoot.body(children:)(uint64_t a1, void (*a2)(unsigned char *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = &v18[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = &v18[-v12 - 8];
  outlined init with copy of _VariadicView_Children(v14, (uint64_t)v18);
  a2(v18);
  outlined destroy of SubviewsCollection((uint64_t)v18);
  static ViewBuilder.buildExpression<A>(_:)(v10, a4, a5);
  uint64_t v15 = *(void (**)(unsigned char *, uint64_t))(v8 + 8);
  v15(v10, a4);
  static ViewBuilder.buildExpression<A>(_:)(v13, a4, a5);
  return ((uint64_t (*)(unsigned char *, uint64_t))v15)(v13, a4);
}

uint64_t outlined destroy of SubviewsCollection(uint64_t a1)
{
  return a1;
}

uint64_t Group.init<A, B>(elementsOf:transform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(void))
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8))(a1, a4);
}

uint64_t Group<A>.init(content:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t type metadata accessor for GroupElementsOfContent()
{
  return swift_getGenericMetadata();
}

uint64_t partial apply for closure #1 in Group.init<A, B>(elementsOf:transform:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in Group.init<A, B>(elementsOf:transform:)(v1[6], v1[7], v1[8], v1[2], v1[3], v1[4], v1[5], a1);
}

uint64_t closure #1 in Group.init<A, B>(elementsOf:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v30 = a7;
  uint64_t v31 = a1;
  uint64_t v32 = a2;
  uint64_t v33 = a8;
  uint64_t v12 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = v15;
  uint64_t v35 = v16;
  uint64_t v36 = v17;
  uint64_t v37 = v18;
  uint64_t v19 = type metadata accessor for GroupElementsOfContent();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  int v22 = (char *)&v30 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v24 = MEMORY[0x270FA5388](v23);
  uint64_t v26 = (char *)&v30 - v25;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))(v14, v31, a4, v24);
  swift_retain();
  GroupElementsOfContent.init(subviews:content:)((uint64_t)v14, v32, a3, a4, a5, a6, v30, (uint64_t)v22);
  uint64_t WitnessTable = swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v22, v19, WitnessTable);
  unint64_t v28 = *(void (**)(char *, uint64_t))(v20 + 8);
  v28(v22, v19);
  static ViewBuilder.buildExpression<A>(_:)(v26, v19, WitnessTable);
  return ((uint64_t (*)(char *, uint64_t))v28)(v26, v19);
}

uint64_t initializeWithCopy for GroupElementsOfContent(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x38uLL) {
    uint64_t v5 = 56;
  }
  else {
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  unsigned int v6 = a2[v5];
  unsigned int v7 = v6 - 2;
  if (v6 >= 2)
  {
    if (v5 <= 3) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = 4;
    }
    switch(v8)
    {
      case 1:
        int v9 = *a2;
        goto LABEL_13;
      case 2:
        int v9 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v9 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v9 = *(_DWORD *)a2;
LABEL_13:
        int v10 = (v9 | (v7 << (8 * v5))) + 2;
        unsigned int v6 = v9 + 2;
        if (v5 < 4) {
          unsigned int v6 = v10;
        }
        break;
      default:
        break;
    }
  }
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)(*(void *)(a3 + 16) - 8) + 16))(a1, a2);
    char v11 = 1;
  }
  else
  {
    long long v12 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v12;
    (**(void (***)(uint64_t, unsigned __int8 *))(v12 - 8))(a1, a2);
    uint64_t v13 = (void *)*((void *)a2 + 5);
    uint64_t v14 = *((void *)a2 + 6);
    *(void *)(a1 + 40) = v13;
    *(void *)(a1 + 48) = v14;
    id v15 = v13;
    swift_bridgeObjectRetain();
    char v11 = 0;
  }
  *(unsigned char *)(a1 + v5) = v11;
  uint64_t v16 = (uint64_t *)((unint64_t)&a2[v5 + 8] & 0xFFFFFFFFFFFFFFF8);
  uint64_t v18 = *v16;
  uint64_t v17 = v16[1];
  uint64_t v19 = (void *)((v5 + 8 + a1) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v19 = v18;
  v19[1] = v17;
  swift_retain();
  return a1;
}

uint64_t destroy for GroupElementsOfContent(id *a1, uint64_t a2)
{
  if (*(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64) <= 0x38uLL) {
    uint64_t v3 = 56;
  }
  else {
    uint64_t v3 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  }
  unsigned int v4 = *((unsigned __int8 *)a1 + v3);
  unsigned int v5 = v4 - 2;
  if (v4 >= 2)
  {
    if (v3 <= 3) {
      uint64_t v6 = v3;
    }
    else {
      uint64_t v6 = 4;
    }
    switch(v6)
    {
      case 1:
        int v7 = *(unsigned __int8 *)a1;
        goto LABEL_13;
      case 2:
        int v7 = *(unsigned __int16 *)a1;
        goto LABEL_13;
      case 3:
        int v7 = *(unsigned __int16 *)a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        goto LABEL_13;
      case 4:
        int v7 = *(_DWORD *)a1;
LABEL_13:
        int v8 = (v7 | (v5 << (8 * v3))) + 2;
        unsigned int v4 = v7 + 2;
        if (v3 < 4) {
          unsigned int v4 = v8;
        }
        break;
      default:
        break;
    }
  }
  if (v4 == 1)
  {
    (*(void (**)(id *))(*(void *)(*(void *)(a2 + 16) - 8) + 8))(a1);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);

    swift_bridgeObjectRelease();
  }

  return swift_release();
}

uint64_t GroupElementsOfContent.init(subviews:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v16 = *(void *)(a4 - 8);
  double v17 = MEMORY[0x270FA5388](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))((char *)&v25 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v19, v17);
  if (swift_dynamicCast())
  {
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(a1, a4);
    uint64_t v20 = v28;
    uint64_t v32 = v28;
    long long v22 = v26;
    long long v21 = v27;
    long long v30 = v26;
    long long v31 = v27;
    long long v29 = v25;
    *(_OWORD *)a8 = v25;
    *(_OWORD *)(a8 + 16) = v22;
    *(_OWORD *)(a8 + 32) = v21;
    *(void *)(a8 + 48) = v20;
    *(void *)&long long v25 = a4;
    *((void *)&v25 + 1) = a5;
    *(void *)&long long v26 = a6;
    *((void *)&v26 + 1) = a7;
  }
  else
  {
    uint64_t v28 = 0;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v25 = 0u;
    outlined destroy of SubviewsCollection?((uint64_t)&v25);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 32))(a8, a1, a4);
    *(void *)&long long v29 = a4;
    *((void *)&v29 + 1) = a5;
    *(void *)&long long v30 = a6;
    *((void *)&v30 + 1) = a7;
  }
  type metadata accessor for GroupElementsOfContent.Storage();
  swift_storeEnumTagMultiPayload();
  *(void *)&long long v29 = a4;
  *((void *)&v29 + 1) = a5;
  *(void *)&long long v30 = a6;
  *((void *)&v30 + 1) = a7;
  uint64_t result = type metadata accessor for GroupElementsOfContent();
  double v24 = (void *)(a8 + *(int *)(result + 52));
  *double v24 = a2;
  v24[1] = a3;
  return result;
}

uint64_t GroupElementsOfContent.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v57 = a2;
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = type metadata accessor for SubviewsRoot();
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v55 = v6;
  uint64_t v8 = type metadata accessor for _VariadicView.Tree();
  uint64_t v48 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v46 = (uint64_t)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v47 = (char *)&v45 - v11;
  uint64_t v51 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v50 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v45 - v18;
  uint64_t v20 = *(void *)(a1 + 32);
  uint64_t v49 = v7;
  *(void *)&long long v61 = v7;
  *((void *)&v61 + 1) = v4;
  uint64_t v54 = v20;
  *(void *)&long long v62 = v20;
  *((void *)&v62 + 1) = v5;
  uint64_t v56 = v5;
  uint64_t v21 = type metadata accessor for GroupElementsOfContent.Storage();
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  double v24 = (char *)&v45 - v23;
  uint64_t v53 = type metadata accessor for _ConditionalContent();
  uint64_t v52 = *(void *)(v53 - 8);
  double v25 = MEMORY[0x270FA5388](v53);
  uint64_t v58 = (uint64_t)&v45 - v26;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v22 + 16))(v24, v2, v21, v25);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    long long v27 = v50;
    uint64_t v28 = v49;
    (*(void (**)(void))(v51 + 32))();
    long long v29 = (void *)(v2 + *(int *)(a1 + 52));
    uint64_t v30 = v29[1];
    *(void *)&long long v61 = *v29;
    *((void *)&v61 + 1) = v30;
    MEMORY[0x270FA5388](v30);
    *(&v45 - 6) = v28;
    *(&v45 - 5) = v4;
    uint64_t v31 = v54;
    uint64_t v32 = v56;
    *(&v45 - 4) = v54;
    *(&v45 - 3) = v32;
    *(&v45 - 2) = (uint64_t)v27;
    swift_retain();
    uint64_t v33 = v46;
    _VariadicView.Tree.init(_:content:)((uint64_t)&v61, (void (*)(uint64_t))partial apply for closure #1 in GroupElementsOfContent.body.getter, v55, v28, v46);
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v70 = v31;
    uint64_t v34 = swift_getWitnessTable();
    uint64_t v35 = v47;
    static ViewBuilder.buildExpression<A>(_:)(v33, v8, v34);
    uint64_t v36 = *(void (**)(uint64_t, uint64_t))(v48 + 8);
    v36(v33, v8);
    static ViewBuilder.buildExpression<A>(_:)(v35, v8, v34);
    v36((uint64_t)v35, v8);
    static ViewBuilder.buildEither<A, B>(second:)(v33, v8, v58);
    v36(v33, v8);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v50, v49);
  }
  else
  {
    long long v37 = *((_OWORD *)v24 + 1);
    long long v61 = *(_OWORD *)v24;
    long long v62 = v37;
    long long v63 = *((_OWORD *)v24 + 2);
    uint64_t v64 = *((void *)v24 + 6);
    (*(void (**)(long long *))(v2 + *(int *)(a1 + 52)))(&v61);
    outlined destroy of SubviewsCollection((uint64_t)&v61);
    uint64_t v32 = v56;
    static ViewBuilder.buildExpression<A>(_:)(v16, v4, v56);
    uint64_t v38 = *(void (**)(char *, uint64_t))(v45 + 8);
    v38(v16, v4);
    static ViewBuilder.buildExpression<A>(_:)(v19, v4, v32);
    v38(v19, v4);
    uint64_t v39 = swift_getWitnessTable();
    uint64_t v31 = v54;
    uint64_t v59 = v39;
    uint64_t v60 = v54;
    swift_getWitnessTable();
    static ViewBuilder.buildEither<A, B>(first:)((uint64_t)v16, v4, v58);
    v38(v16, v4);
  }
  uint64_t v67 = swift_getWitnessTable();
  uint64_t v68 = v31;
  uint64_t v40 = swift_getWitnessTable();
  uint64_t v65 = v32;
  uint64_t v66 = v40;
  uint64_t v41 = v53;
  uint64_t v42 = swift_getWitnessTable();
  uint64_t v43 = v58;
  static ViewBuilder.buildExpression<A>(_:)(v58, v41, v42);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v52 + 8))(v43, v41);
}

uint64_t type metadata accessor for GroupElementsOfContent.Storage()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for SubviewsRoot()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t initializeWithCopy for GroupElementsOfContent.Storage(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x38uLL) {
    uint64_t v5 = 56;
  }
  else {
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  unsigned int v6 = a2[v5];
  unsigned int v7 = v6 - 2;
  if (v6 >= 2)
  {
    if (v5 <= 3) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = 4;
    }
    switch(v8)
    {
      case 1:
        int v9 = *a2;
        goto LABEL_13;
      case 2:
        int v9 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v9 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v9 = *(_DWORD *)a2;
LABEL_13:
        int v10 = (v9 | (v7 << (8 * v5))) + 2;
        unsigned int v6 = v9 + 2;
        if (v5 < 4) {
          unsigned int v6 = v10;
        }
        break;
      default:
        break;
    }
  }
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)(*(void *)(a3 + 16) - 8) + 16))(a1, a2);
    char v11 = 1;
  }
  else
  {
    long long v12 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v12;
    (**(void (***)(uint64_t, unsigned __int8 *))(v12 - 8))(a1, a2);
    uint64_t v13 = (void *)*((void *)a2 + 5);
    uint64_t v14 = *((void *)a2 + 6);
    *(void *)(a1 + 40) = v13;
    *(void *)(a1 + 48) = v14;
    id v15 = v13;
    swift_bridgeObjectRetain();
    char v11 = 0;
  }
  *(unsigned char *)(a1 + v5) = v11;
  return a1;
}

uint64_t outlined destroy of SubviewsCollection?(uint64_t a1)
{
  type metadata accessor for SubviewsCollection?();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for SubviewsCollection?()
{
  if (!lazy cache variable for type metadata for SubviewsCollection?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SubviewsCollection?);
    }
  }
}

uint64_t static ViewBuilder.buildEither<A, B>(second:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for _ConditionalContent.Storage();
  double v7 = MEMORY[0x270FA5388](v6);
  int v9 = (char *)&v11 - v8;
  (*(void (**)(char *, uint64_t, uint64_t, double))(*(void *)(a2 - 8) + 16))((char *)&v11 - v8, a1, a2, v7);
  swift_storeEnumTagMultiPayload();
  return _ConditionalContent<>.init(storage:)((uint64_t)v9, a3);
}

uint64_t closure #1 in static _ConditionalContent.makeConditionalMetadata<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t *a5@<X8>)
{
  uint64_t v20 = a3;
  uint64_t v21 = a4;
  uint64_t v22 = a2;
  static ConditionalTypeDescriptor.descriptor(type:constructor:)(a2, (void (*)(uint64_t *__return_ptr, void *))partial apply for closure #1 in static ConditionalTypeDescriptor.descriptor(type:), a3, a4, &v17);
  uint64_t v9 = v17;
  uint64_t v10 = v18;
  uint64_t v11 = v19;
  uint64_t v20 = a3;
  uint64_t v21 = a4;
  uint64_t v22 = a1;
  static ConditionalTypeDescriptor.descriptor(type:constructor:)(a1, (void (*)(uint64_t *__return_ptr, void *))partial apply for closure #1 in static ConditionalTypeDescriptor.descriptor(type:), a3, a4, &v17);
  uint64_t v12 = v17;
  uint64_t v13 = v18;
  uint64_t v14 = v19;
  uint64_t v15 = swift_allocObject();
  uint64_t result = type metadata accessor for _ConditionalContent.Storage();
  *(void *)(v15 + 16) = result;
  *(void *)(v15 + 24) = v9;
  *(void *)(v15 + 32) = v10;
  *(void *)(v15 + 40) = v11;
  *(void *)(v15 + 48) = v12;
  *(void *)(v15 + 56) = v13;
  *(void *)(v15 + 64) = v14;
  if (__OFADD__(v11, v14))
  {
    __break(1u);
  }
  else
  {
    *a5 = v15 | 0x8000000000000000;
    a5[1] = 0;
    a5[2] = v11 + v14;
  }
  return result;
}

uint64_t type metadata completion function for _ConditionalContent()
{
  uint64_t result = type metadata accessor for _ConditionalContent.Storage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t _ConditionalContent<>.init(storage:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for _ConditionalContent.Storage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32);

  return v5(a2, a1, v4);
}

uint64_t type metadata accessor for _ConditionalContent.Storage()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t implicit closure #4 in implicit closure #3 in DisplayList.ViewUpdater.updateItemView(container:from:localState:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int16 v5 = *(_WORD *)(a3 + 64);
  char v6 = *(unsigned char *)(a3 + 66);
  int v7 = *(_DWORD *)(a3 + 68);
  uint64_t v16 = a5;
  long long v8 = *(_OWORD *)(a3 + 16);
  v11[0] = *(_OWORD *)a3;
  v11[1] = v8;
  long long v9 = *(_OWORD *)(a3 + 48);
  v11[2] = *(_OWORD *)(a3 + 32);
  v11[3] = v9;
  char v13 = v6;
  __int16 v12 = v5;
  int v14 = v7;
  return DisplayList.ViewUpdater.Platform.updateItemView(_:index:item:state:)(a1, (uint64_t)v15, (uint64_t)v11, a4);
}

uint64_t DisplayList.ViewUpdater.Platform.updateItemView(_:index:item:state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v439 = *MEMORY[0x263EF8340];
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v375 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  CGFloat v12 = *(double *)a3;
  CGFloat v13 = *(double *)(a3 + 8);
  double v15 = *(double *)(a3 + 16);
  double v14 = *(double *)(a3 + 24);
  CGFloat v16 = *(double *)(a3 + 32);
  CGFloat v17 = *(double *)(a3 + 40);
  unint64_t v18 = *(void *)(a3 + 48);
  uint64_t v398 = *(void *)(a3 + 56);
  int v397 = *(unsigned __int16 *)(a3 + 64) | (*(unsigned __int8 *)(a3 + 66) << 16);
  int v394 = *(_DWORD *)(a3 + 68);
  unint64_t v19 = v18 >> 62;
  CGFloat v20 = *v4;
  CGFloat v395 = *v4;
  CGFloat v396 = v16;
  if (v18 >> 62)
  {
    if (v19 != 1) {
      goto LABEL_176;
    }
    unint64_t v39 = HIDWORD(v18);
    int v40 = v397;
    outlined copy of DisplayList.Item.Value(*(uint64_t *)&v17, v18);
    swift_bridgeObjectRelease();
    CGFloat v41 = v396;
    if (v396 == 0.0)
    {
      if (!*(_WORD *)(a1 + 82)) {
        goto LABEL_17;
      }
      LOWORD(v42) = 0;
    }
    else
    {
      int v42 = (2 * ((33 * (*(void *)&v396 >> 16)) ^ LODWORD(v396))) | 1;
      if (*(unsigned __int16 *)(a1 + 82) == ((unsigned __int16)(2 * ((33 * WORD1(v396)) ^ LOWORD(v396))) | 1))
      {
LABEL_17:
        if (BYTE4(v18) != 8)
        {
          unint64_t v44 = HIDWORD(v18);
          goto LABEL_24;
        }
        LOBYTE(v44) = 8;
        switch(*(unsigned char *)(*(void *)&v17 + 88))
        {
          case 1:
            goto LABEL_20;
          case 3:
            uint64_t v45 = *(void *)(*(void *)&v17 + 80);
            long long v46 = *(_OWORD *)(*(void *)&v17 + 32);
            *(_OWORD *)v419 = *(_OWORD *)(*(void *)&v17 + 16);
            *(_OWORD *)&v419[16] = v46;
            long long v47 = *(_OWORD *)(*(void *)&v17 + 64);
            *(_OWORD *)&v419[32] = *(_OWORD *)(*(void *)&v17 + 48);
            *(_OWORD *)&v419[48] = v47;
            *(void *)&long long v420 = v45;
            _Rotation3DEffect.Data.transform.getter((CGFloat *)&v433);
LABEL_20:
            uint64_t v48 = *(void *)(a4 + 136);
            if (v48)
            {
              int v40 = v397;
              CGFloat v41 = v396;
              if (*(unsigned __int16 *)(a1 + 88) == ((unsigned __int16)(2 * ((33 * WORD1(v48)) ^ v48)) | 1))
              {
LABEL_22:
                LOBYTE(v44) = 8;
LABEL_24:
                outlined consume of DisplayList.Effect(*(uint64_t *)&v17, v18, v44);
                CGFloat v20 = v395;
                CGFloat v16 = v396;
                goto LABEL_25;
              }
            }
            else
            {
              int v40 = v397;
              CGFloat v41 = v396;
              if (!*(_WORD *)(a1 + 88)) {
                goto LABEL_22;
              }
            }
            if (v41 == 0.0)
            {
              *(_WORD *)(a1 + 82) = 0;
            }
            else
            {
              *(void *)&v393[0] = HIDWORD(v18);
              *(_WORD *)(a1 + 82) = (2 * ((33 * WORD1(v41)) ^ LOWORD(v41))) | 1;
LABEL_83:
              LOBYTE(v39) = LOBYTE(v393[0]);
            }
            long long v163 = *(_OWORD *)(*(void *)&v17 + 16);
            long long v164 = *(_OWORD *)(*(void *)&v17 + 32);
            long long v165 = *(_OWORD *)(*(void *)&v17 + 48);
            long long v166 = *(_OWORD *)(*(void *)&v17 + 64);
            uint64_t v167 = *(void *)(*(void *)&v17 + 80);
            switch(*(unsigned char *)(*(void *)&v17 + 88))
            {
              case 1:
                uint64_t v168 = *(void *)(*(void *)&v17 + 80);
                goto LABEL_87;
              case 3:
                *(_OWORD *)v419 = *(_OWORD *)(*(void *)&v17 + 16);
                *(_OWORD *)&v419[16] = v164;
                *(_OWORD *)&v419[32] = v165;
                *(_OWORD *)&v419[48] = v166;
                *(void *)&long long v420 = v167;
                _Rotation3DEffect.Data.transform.getter(&t2.a);
                long long v163 = *(_OWORD *)&t2.a;
                long long v164 = *(_OWORD *)&t2.c;
                long long v165 = *(_OWORD *)&t2.tx;
                long long v166 = v437;
                uint64_t v168 = v438;
LABEL_87:
                long long v408 = v163;
                long long v409 = v164;
                long long v410 = v165;
                long long v411 = v166;
                *(void *)&long long v412 = v168;
                if (*(unsigned char *)(a1 + 56) != 10)
                {
                  v427.double a = v395;
                  *(CGFloat *)v400 = v12;
                  *(CGFloat *)&v400[8] = v13;
                  *(double *)&v400[16] = v15;
                  *(double *)&v400[24] = v14;
                  *(CGFloat *)&v400[32] = v396;
                  *(CGFloat *)&v400[40] = v17;
                  *(void *)&v400[48] = v18;
                  *(void *)&v400[56] = v398;
                  BYTE2(v401) = BYTE2(v40);
                  LOWORD(v401) = v40;
                  DWORD1(v401) = v394;
                  DisplayList.ViewUpdater.Platform._makeItemView(item:state:)((uint64_t)v400, a4, (uint64_t)v419);
                  uint64_t v169 = *(void *)&v419[16];
                  __int16 v170 = *(_WORD *)&v419[56];
                  __int16 v171 = v422;
                  int v172 = DWORD1(v422);
                  char v173 = BYTE8(v422);
                  char v174 = BYTE9(v422);
                  uint64_t v175 = v423;
                  v176 = *(void **)(a1 + 8);
                  *(_OWORD *)a1 = *(_OWORD *)v419;
                  *(void *)(a1 + 16) = v169;
                  *(_OWORD *)(a1 + 24) = *(_OWORD *)&v419[24];
                  *(_OWORD *)(a1 + 40) = *(_OWORD *)&v419[40];
                  *(_WORD *)(a1 + 56) = v170;
                  long long v177 = v421;
                  *(_OWORD *)(a1 + 64) = v420;
                  *(_OWORD *)(a1 + 80) = v177;
                  *(_WORD *)(a1 + 96) = v171;
                  *(_DWORD *)(a1 + 100) = v172;
                  *(unsigned char *)(a1 + 104) = v173;
                  *(unsigned char *)(a1 + 105) = v174;
                  *(void *)(a1 + 112) = v175;
                  swift_unknownObjectRelease();

                  swift_unknownObjectRelease();
                }
                long long v178 = *(_OWORD *)(a4 + 48);
                *(_OWORD *)v419 = *(_OWORD *)(a4 + 32);
                *(_OWORD *)&v419[24] = v178;
                *(void *)&v419[16] = 0;
                *(void *)&v419[40] = 0;
                *(_OWORD *)&v419[48] = *(_OWORD *)(a4 + 64);
                *(void *)&long long v420 = 0x3FF0000000000000;
                double v179 = ProjectionTransform.concatenating(_:)((double *)v419, (double *)v400);
                (*(void (**)(unsigned char *, void, double))((*(void *)&v395 & 0xFFFFFFFFFFFFFFFCLL) + 128))(v400, *(void *)a1, v179);
                goto LABEL_90;
              default:
                goto LABEL_91;
            }
          default:
            goto LABEL_24;
        }
      }
    }
    *(_WORD *)(a1 + 82) = v42;
    *(void *)&v393[0] = HIDWORD(v18);
    switch(BYTE4(v18))
    {
      case 3:
        *(void *)&long long v389 = a1 + 80;
        outlined init with copy of AnyTrackedValue(*(void *)&v17 + 16, (uint64_t)v400);
        int v43 = *(unsigned __int8 *)(a1 + 56);
        double v390 = v17;
        if (v43 == 14)
        {
          LODWORD(v391) = 14;
        }
        else
        {
          t2.double a = v395;
          *(CGFloat *)&long long v408 = v12;
          *((CGFloat *)&v408 + 1) = v13;
          *(double *)&long long v409 = v15;
          *((double *)&v409 + 1) = v14;
          *(CGFloat *)&long long v410 = v396;
          *((CGFloat *)&v410 + 1) = v17;
          *(void *)&long long v411 = v18;
          *((void *)&v411 + 1) = v398;
          BYTE2(v412) = BYTE2(v40);
          LOWORD(v412) = v40;
          DWORD1(v412) = v394;
          DisplayList.ViewUpdater.Platform._makeItemView(item:state:)((uint64_t)&v408, a4, (uint64_t)v419);
          uint64_t v95 = *(void *)&v419[16];
          int v96 = v419[56];
          char v97 = v419[57];
          __int16 v98 = v422;
          int v99 = DWORD1(v422);
          char v100 = BYTE8(v422);
          char v101 = BYTE9(v422);
          uint64_t v102 = v423;
          uint64_t v103 = *(void **)(a1 + 8);
          *(_OWORD *)a1 = *(_OWORD *)v419;
          *(void *)(a1 + 16) = v95;
          *(_OWORD *)(a1 + 24) = *(_OWORD *)&v419[24];
          *(_OWORD *)(a1 + 40) = *(_OWORD *)&v419[40];
          LODWORD(v391) = v96;
          *(unsigned char *)(a1 + 56) = v96;
          *(unsigned char *)(a1 + 57) = v97;
          long long v104 = v421;
          *(_OWORD *)(a1 + 64) = v420;
          *(_OWORD *)(a1 + 80) = v104;
          *(_WORD *)(a1 + 96) = v98;
          *(_DWORD *)(a1 + 100) = v99;
          *(unsigned char *)(a1 + 104) = v100;
          *(unsigned char *)(a1 + 105) = v101;
          *(void *)(a1 + 112) = v102;
          swift_unknownObjectRelease();

          swift_unknownObjectRelease();
        }
        uint64_t v105 = *(void *)a1;
        uint64_t v106 = *(void *)&v400[24];
        uint64_t v107 = *(void *)&v400[32];
        __swift_project_boxed_opaque_existential_1(v400, *(uint64_t *)&v400[24]);
        unint64_t v108 = *(void (**)(uint64_t, uint64_t, uint64_t))(v107 + 32);
        swift_unknownObjectRetain();
        v108(a1, v106, v107);
        uint64_t v109 = *(void **)a1;
        if (v105 != *(void *)a1)
        {
          char v110 = LOBYTE(v395);
          v419[0] = 13;
          (*(void (**)(void *, unsigned char *))((*(void *)&v395 & 0xFFFFFFFFFFFFFFFCLL) + 104))(v109, v419);
          id v111 = (id)CoreViewLayer(v110 & 3, v109);

          *(void *)(a1 + 8) = v111;
          uint64_t v112 = v389;
          *(void *)long long v389 = 0;
          *(void *)(v112 + 8) = 0;
          *(_WORD *)(v112 + 16) = 0;
          int64x2_t v113 = vdupq_n_s64(0x7FF0000000000000uLL);
          *(int64x2_t *)(a1 + 24) = v113;
          *(int64x2_t *)(a1 + 40) = v113;
          *(unsigned char *)(a1 + 56) = v391;
          *(unsigned char *)(a1 + 57) = 0;
          if (one-time initialization token for infinity != -1) {
            swift_once();
          }
          *(void *)(a1 + 112) = static Time.infinity;
        }
        uint64_t v114 = *(void *)&v400[24];
        unint64_t v39 = *(void *)&v400[32];
        __swift_project_boxed_opaque_existential_1(v400, *(uint64_t *)&v400[24]);
        uint64_t v115 = (*(uint64_t (**)(void *, uint64_t, unint64_t))(v39 + 40))(v109, v114, v39);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        *(void *)(a1 + 16) = v115;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v400);
        CGFloat v17 = v390;
        int v40 = v397;
        CGFloat v41 = v396;
        LOBYTE(v39) = LOBYTE(v393[0]);
        goto LABEL_91;
      case 7:
        LOBYTE(v39) = LOBYTE(v393[0]);
        if (*(unsigned char *)(a1 + 56) == 12) {
          goto LABEL_91;
        }
        goto LABEL_58;
      case 8:
        goto LABEL_83;
      case 0xE:
        LOBYTE(v39) = LOBYTE(v393[0]);
        if (*(unsigned char *)(a1 + 56) == 16) {
          goto LABEL_91;
        }
        *(CGFloat *)v400 = v395;
        *(CGFloat *)&long long v408 = v12;
        *((CGFloat *)&v408 + 1) = v13;
        *(double *)&long long v409 = v15;
        *((double *)&v409 + 1) = v14;
        *(CGFloat *)&long long v410 = v41;
        *((CGFloat *)&v410 + 1) = v17;
        *(void *)&long long v411 = v18;
        *((void *)&v411 + 1) = v398;
        BYTE2(v412) = BYTE2(v40);
        LOWORD(v412) = v40;
        DWORD1(v412) = v394;
        DisplayList.ViewUpdater.Platform._makeItemView(item:state:)((uint64_t)&v408, a4, (uint64_t)v419);
        uint64_t v85 = *(void *)&v419[16];
        __int16 v86 = *(_WORD *)&v419[56];
        __int16 v87 = v422;
        int v88 = DWORD1(v422);
        char v89 = BYTE8(v422);
        char v90 = BYTE9(v422);
        uint64_t v91 = v423;
        double v92 = v17;
        Swift::String v93 = *(void **)(a1 + 8);
        *(_OWORD *)a1 = *(_OWORD *)v419;
        *(void *)(a1 + 16) = v85;
        *(_OWORD *)(a1 + 24) = *(_OWORD *)&v419[24];
        *(_OWORD *)(a1 + 40) = *(_OWORD *)&v419[40];
        *(_WORD *)(a1 + 56) = v86;
        long long v94 = v421;
        *(_OWORD *)(a1 + 64) = v420;
        *(_OWORD *)(a1 + 80) = v94;
        *(_WORD *)(a1 + 96) = v87;
        *(_DWORD *)(a1 + 100) = v88;
        *(unsigned char *)(a1 + 104) = v89;
        *(unsigned char *)(a1 + 105) = v90;
        *(void *)(a1 + 112) = v91;
        swift_unknownObjectRelease();

        CGFloat v17 = v92;
        goto LABEL_59;
      case 0x13:
        if (*(void *)&v17 ^ 1 | v18)
        {
          if (*(void *)&v17 ^ 2 | v18) {
            goto LABEL_176;
          }
          LOBYTE(v39) = LOBYTE(v393[0]);
          if (*(unsigned char *)(a1 + 56) == 8)
          {
LABEL_91:
            v399.double a = v395;
            v427.double a = v12;
            v427.b = v13;
            v427.c = v15;
            v427.d = v14;
            v427.tCGFloat x = v41;
            v427.tCGFloat y = v17;
            unint64_t v428 = v18;
            uint64_t v429 = v398;
            char v431 = BYTE2(v40);
            __int16 v430 = v40;
            int v432 = v394;
            DisplayList.ViewUpdater.Platform.updateState(_:item:size:state:)(a1, (long long *)&v427, a4, v15, v14);
            return outlined consume of DisplayList.Effect(*(uint64_t *)&v17, v18, v39);
          }
        }
        else
        {
          LOBYTE(v39) = LOBYTE(v393[0]);
          if (*(unsigned char *)(a1 + 56) == 9) {
            goto LABEL_91;
          }
        }
LABEL_58:
        *(CGFloat *)v400 = v395;
        *(CGFloat *)&long long v408 = v12;
        *((CGFloat *)&v408 + 1) = v13;
        *(double *)&long long v409 = v15;
        *((double *)&v409 + 1) = v14;
        *(CGFloat *)&long long v410 = v41;
        *((CGFloat *)&v410 + 1) = v17;
        *(void *)&long long v411 = v18;
        *((void *)&v411 + 1) = v398;
        BYTE2(v412) = BYTE2(v40);
        LOWORD(v412) = v40;
        DWORD1(v412) = v394;
        DisplayList.ViewUpdater.Platform._makeItemView(item:state:)((uint64_t)&v408, a4, (uint64_t)v419);
        uint64_t v116 = *(void *)&v419[16];
        __int16 v117 = *(_WORD *)&v419[56];
        __int16 v118 = v422;
        int v119 = DWORD1(v422);
        char v120 = BYTE8(v422);
        char v121 = BYTE9(v422);
        uint64_t v122 = v423;
        v123 = *(void **)(a1 + 8);
        *(_OWORD *)a1 = *(_OWORD *)v419;
        *(void *)(a1 + 16) = v116;
        *(_OWORD *)(a1 + 24) = *(_OWORD *)&v419[24];
        *(_OWORD *)(a1 + 40) = *(_OWORD *)&v419[40];
        *(_WORD *)(a1 + 56) = v117;
        long long v124 = v421;
        *(_OWORD *)(a1 + 64) = v420;
        *(_OWORD *)(a1 + 80) = v124;
        *(_WORD *)(a1 + 96) = v118;
        *(_DWORD *)(a1 + 100) = v119;
        *(unsigned char *)(a1 + 104) = v120;
        *(unsigned char *)(a1 + 105) = v121;
        *(void *)(a1 + 112) = v122;
        swift_unknownObjectRelease();

LABEL_59:
        swift_unknownObjectRelease();
LABEL_90:
        CGFloat v41 = v396;
        goto LABEL_91;
      default:
        goto LABEL_176;
    }
  }
  if (*(unsigned __int16 *)(a1 + 82) != (unsigned __int16)v18)
  {
    long long v21 = *(_OWORD *)(a4 + 112);
    long long v22 = *(_OWORD *)(a4 + 144);
    long long v424 = *(_OWORD *)(a4 + 128);
    long long v425 = v22;
    long long v23 = *(_OWORD *)(a4 + 144);
    long long v426 = *(_OWORD *)(a4 + 160);
    long long v24 = *(_OWORD *)(a4 + 48);
    long long v25 = *(_OWORD *)(a4 + 80);
    long long v420 = *(_OWORD *)(a4 + 64);
    long long v421 = v25;
    long long v26 = *(_OWORD *)(a4 + 80);
    long long v27 = *(_OWORD *)(a4 + 112);
    long long v422 = *(_OWORD *)(a4 + 96);
    long long v423 = v27;
    long long v28 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)v419 = *(_OWORD *)a4;
    *(_OWORD *)&v419[16] = v28;
    long long v29 = *(_OWORD *)(a4 + 48);
    long long v31 = *(_OWORD *)a4;
    long long v30 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)&v419[32] = *(_OWORD *)(a4 + 32);
    *(_OWORD *)&v419[48] = v29;
    long long v416 = v424;
    long long v417 = v23;
    long long v418 = *(_OWORD *)(a4 + 160);
    long long v412 = v420;
    long long v413 = v26;
    long long v414 = v422;
    long long v415 = v21;
    long long v408 = v31;
    long long v409 = v30;
    long long v410 = *(_OWORD *)&v419[32];
    long long v411 = v24;
    v399.double a = v15;
    v399.b = v14;
    *(unsigned char *)(a1 + 105) = 0;
    char v32 = *(unsigned char *)(a1 + 57);
    if ((v32 & 0x20) != 0)
    {
      v32 &= ~0x20u;
      *(unsigned char *)(a1 + 57) = v32;
    }
    switch(*(void *)&v17 >> 60)
    {
      case 1:
        CGFloat v137 = v12;
        CGFloat v138 = v13;
        float v139 = *(float *)((*(void *)&v17 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
        float v140 = *(float *)((*(void *)&v17 & 0xFFFFFFFFFFFFFFFLL) + 0x14);
        float v142 = *(float *)((*(void *)&v17 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
        float v141 = *(float *)((*(void *)&v17 & 0xFFFFFFFFFFFFFFFLL) + 0x1C);
        if (*(unsigned char *)(a1 + 56) == 1)
        {
          uint64_t v129 = v398;
          int v130 = v397;
          outlined copy of DisplayList.Item.Value(*(uint64_t *)&v17, v18);
          outlined copy of DisplayList.Item.Value(*(uint64_t *)&v17, v18);
          outlined retain of DisplayList.ViewUpdater.Model.State((uint64_t)v419);
        }
        else
        {
          *(CGFloat *)&long long v433 = v20;
          t2.double a = v137;
          t2.b = v138;
          t2.c = v15;
          t2.d = v14;
          t2.tCGFloat x = v16;
          t2.tCGFloat y = v17;
          uint64_t v265 = v398;
          *(void *)&long long v437 = v18;
          *((void *)&v437 + 1) = v398;
          int v130 = v397;
          BYTE2(v438) = BYTE2(v397);
          LOWORD(v438) = v397;
          HIDWORD(v438) = v394;
          outlined copy of DisplayList.Item.Value(*(uint64_t *)&v17, v18);
          outlined copy of DisplayList.Item.Value(*(uint64_t *)&v17, v18);
          outlined retain of DisplayList.ViewUpdater.Model.State((uint64_t)v419);
          uint64_t v266 = a4;
          uint64_t v129 = v265;
          DisplayList.ViewUpdater.Platform._makeItemView(item:state:)((uint64_t)&t2, v266, (uint64_t)v400);
          uint64_t v267 = *(void *)&v400[16];
          __int16 v268 = *(_WORD *)&v400[56];
          __int16 v269 = v403;
          int v270 = DWORD1(v403);
          char v271 = BYTE8(v403);
          char v272 = BYTE9(v403);
          uint64_t v273 = v404;
          v274 = *(void **)(a1 + 8);
          *(_OWORD *)a1 = *(_OWORD *)v400;
          *(void *)(a1 + 16) = v267;
          *(_OWORD *)(a1 + 24) = *(_OWORD *)&v400[24];
          *(_OWORD *)(a1 + 40) = *(_OWORD *)&v400[40];
          *(_WORD *)(a1 + 56) = v268;
          long long v275 = v402;
          *(_OWORD *)(a1 + 64) = v401;
          *(_OWORD *)(a1 + 80) = v275;
          *(_WORD *)(a1 + 96) = v269;
          *(_DWORD *)(a1 + 100) = v270;
          *(unsigned char *)(a1 + 104) = v271;
          *(unsigned char *)(a1 + 105) = v272;
          *(void *)(a1 + 112) = v273;
          swift_unknownObjectRelease();

          swift_unknownObjectRelease();
        }
        v276 = *(void **)(a1 + 8);
        if (one-time initialization token for cache != -1) {
          swift_once();
        }
        v277 = (void *)specialized ObjectCache.subscript.getter(v139, v140, v142, v141);
        objc_msgSend(v276, sel_setBackgroundColor_, v277);

        outlined consume of DisplayList.Item.Value(*(uint64_t *)&v17, v18);
        CGFloat v278 = v396;
        CGFloat v13 = v138;
        CGFloat v12 = v137;
        break;
      case 2:
        if (*(unsigned char *)(a1 + 56) == 6)
        {
          uint64_t v129 = v398;
          int v130 = v397;
          outlined copy of DisplayList.Item.Value(*(uint64_t *)&v17, v18);
          outlined retain of DisplayList.ViewUpdater.Model.State((uint64_t)v419);
        }
        else
        {
          *(CGFloat *)&long long v433 = v20;
          t2.double a = v12;
          t2.b = v13;
          t2.c = v15;
          t2.d = v14;
          t2.tCGFloat x = v16;
          t2.tCGFloat y = v17;
          uint64_t v254 = v398;
          *(void *)&long long v437 = v18;
          *((void *)&v437 + 1) = v398;
          int v130 = v397;
          BYTE2(v438) = BYTE2(v397);
          LOWORD(v438) = v397;
          HIDWORD(v438) = v394;
          outlined copy of DisplayList.Item.Value(*(uint64_t *)&v17, v18);
          outlined retain of DisplayList.ViewUpdater.Model.State((uint64_t)v419);
          uint64_t v255 = a4;
          uint64_t v129 = v254;
          DisplayList.ViewUpdater.Platform._makeItemView(item:state:)((uint64_t)&t2, v255, (uint64_t)v400);
          uint64_t v256 = *(void *)&v400[16];
          __int16 v257 = *(_WORD *)&v400[56];
          __int16 v258 = v403;
          int v259 = DWORD1(v403);
          char v260 = BYTE8(v403);
          char v261 = BYTE9(v403);
          uint64_t v262 = v404;
          v263 = *(void **)(a1 + 8);
          *(_OWORD *)a1 = *(_OWORD *)v400;
          *(void *)(a1 + 16) = v256;
          *(_OWORD *)(a1 + 24) = *(_OWORD *)&v400[24];
          *(_OWORD *)(a1 + 40) = *(_OWORD *)&v400[40];
          *(_WORD *)(a1 + 56) = v257;
          long long v264 = v402;
          *(_OWORD *)(a1 + 64) = v401;
          *(_OWORD *)(a1 + 80) = v264;
          *(_WORD *)(a1 + 96) = v258;
          *(_DWORD *)(a1 + 100) = v259;
          *(unsigned char *)(a1 + 104) = v260;
          *(unsigned char *)(a1 + 105) = v261;
          *(void *)(a1 + 112) = v262;
          swift_unknownObjectRelease();

          swift_unknownObjectRelease();
        }
        goto LABEL_158;
      case 3:
        CGFloat v143 = v12;
        uint64_t v144 = *(void **)((*(void *)&v17 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
        int v145 = *(unsigned __int8 *)((*(void *)&v17 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
        uint64_t v146 = *(void *)((*(void *)&v17 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
        uint64_t v147 = *(void *)((*(void *)&v17 & 0xFFFFFFFFFFFFFFFLL) + 0x28);
        uint64_t v148 = *(void *)((*(void *)&v17 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
        int v381 = *(unsigned __int8 *)((*(void *)&v17 & 0xFFFFFFFFFFFFFFFLL) + 0x38);
        uint64_t v380 = *(void *)((*(void *)&v17 & 0xFFFFFFFFFFFFFFFLL) + 0x3C);
        v393[0] = *(CGFloat *)((*(void *)&v17 & 0xFFFFFFFFFFFFFFFLL) + 0x44);
        LODWORD(v391) = *(unsigned __int8 *)((*(void *)&v17 & 0xFFFFFFFFFFFFFFFLL) + 0x4C);
        *(void *)&long long v389 = *(void *)((*(void *)&v17 & 0xFFFFFFFFFFFFFFFLL) + 0x50);
        uint64_t v388 = *(void *)((*(void *)&v17 & 0xFFFFFFFFFFFFFFFLL) + 0x58);
        uint64_t v387 = *(void *)((*(void *)&v17 & 0xFFFFFFFFFFFFFFFLL) + 0x60);
        uint64_t v386 = *(void *)((*(void *)&v17 & 0xFFFFFFFFFFFFFFFLL) + 0x68);
        int v385 = *(unsigned __int8 *)((*(void *)&v17 & 0xFFFFFFFFFFFFFFFLL) + 0x70);
        int v384 = *(unsigned __int8 *)((*(void *)&v17 & 0xFFFFFFFFFFFFFFFLL) + 0x71);
        int v149 = *(unsigned __int8 *)((*(void *)&v17 & 0xFFFFFFFFFFFFFFFLL) + 0x72);
        int v382 = *(unsigned __int8 *)((*(void *)&v17 & 0xFFFFFFFFFFFFFFFLL) + 0x73);
        LODWORD(v383) = v149;
        if (*(unsigned char *)(a1 + 56) == 2)
        {
          outlined copy of DisplayList.Item.Value(*(uint64_t *)&v17, v18);
          outlined copy of DisplayList.Item.Value(*(uint64_t *)&v17, v18);
          outlined retain of DisplayList.ViewUpdater.Model.State((uint64_t)v419);
          outlined copy of GraphicsImage.Contents?(v144, v145);
        }
        else
        {
          *(CGFloat *)&long long v433 = v20;
          t2.double a = v143;
          t2.b = v13;
          t2.c = v15;
          t2.d = v14;
          t2.tCGFloat x = v16;
          t2.tCGFloat y = v17;
          *(void *)&long long v437 = v18;
          *((void *)&v437 + 1) = v398;
          BYTE2(v438) = BYTE2(v397);
          LOWORD(v438) = v397;
          HIDWORD(v438) = v394;
          outlined copy of DisplayList.Item.Value(*(uint64_t *)&v17, v18);
          outlined copy of DisplayList.Item.Value(*(uint64_t *)&v17, v18);
          outlined retain of DisplayList.ViewUpdater.Model.State((uint64_t)v419);
          outlined copy of GraphicsImage.Contents?(v144, v145);
          DisplayList.ViewUpdater.Platform._makeItemView(item:state:)((uint64_t)&t2, a4, (uint64_t)v400);
          uint64_t v279 = *(void *)&v400[16];
          char v280 = v400[56];
          char v32 = v400[57];
          __int16 v281 = v403;
          int v282 = DWORD1(v403);
          char v283 = BYTE8(v403);
          char v284 = BYTE9(v403);
          uint64_t v285 = v404;
          v286 = *(void **)(a1 + 8);
          *(_OWORD *)a1 = *(_OWORD *)v400;
          *(void *)(a1 + 16) = v279;
          *(_OWORD *)(a1 + 24) = *(_OWORD *)&v400[24];
          *(_OWORD *)(a1 + 40) = *(_OWORD *)&v400[40];
          *(unsigned char *)(a1 + 56) = v280;
          *(unsigned char *)(a1 + 57) = v32;
          long long v287 = v402;
          *(_OWORD *)(a1 + 64) = v401;
          *(_OWORD *)(a1 + 80) = v287;
          *(_WORD *)(a1 + 96) = v281;
          *(_DWORD *)(a1 + 100) = v282;
          *(unsigned char *)(a1 + 104) = v283;
          *(unsigned char *)(a1 + 105) = v284;
          *(void *)(a1 + 112) = v285;
          swift_unknownObjectRelease();

          swift_unknownObjectRelease();
        }
        v288 = *(void **)(a1 + 8);
        type metadata accessor for ImageLayer();
        uint64_t v379 = swift_dynamicCastClassUnconditional();
        *(void *)v400 = v144;
        v400[8] = v145;
        *(void *)&v400[16] = v146;
        *(void *)&v400[24] = v147;
        *(void *)&v400[32] = v148;
        char v289 = v381;
        v400[40] = v381;
        int v290 = v145;
        uint64_t v291 = v380;
        *(void *)&v400[44] = v380;
        *(CGFloat *)&v400[52] = v393[0];
        v400[60] = v391;
        *(void *)&long long v401 = v389;
        *((void *)&v401 + 1) = v388;
        *(void *)&long long v402 = v387;
        *((void *)&v402 + 1) = v386;
        LOBYTE(v403) = v385;
        BYTE1(v403) = v384;
        BYTE2(v403) = v383;
        BYTE3(v403) = v382;
        id v377 = v288;
        ImageLayer.update(image:size:)((uint64_t)v400, v15, v14);
        v378 = v144;
        *(void *)v400 = v144;
        LODWORD(v379) = v290;
        v400[8] = v290;
        *(void *)&v400[16] = v146;
        *(void *)&v400[24] = v147;
        *(void *)&v400[32] = v148;
        v400[40] = v289;
        *(void *)&v400[44] = v291;
        *(CGFloat *)&v400[52] = v393[0];
        v400[60] = v391;
        *(void *)&long long v401 = v389;
        *((void *)&v401 + 1) = v388;
        *(void *)&long long v402 = v387;
        *((void *)&v402 + 1) = v386;
        LOBYTE(v403) = v385;
        BYTE1(v403) = v384;
        BYTE2(v403) = v383;
        BYTE3(v403) = v382;
        v292 = (CGAffineTransform *)GraphicsImage.bitmapOrientation.getter();
        int v293 = 1;
        CGFloat v12 = v143;
        switch((char)v292)
        {
          case 1:
          case 2:
          case 3:
            goto LABEL_126;
          case 4:
          case 5:
          case 6:
          case 7:
            int v293 = 0;
LABEL_126:
            *(_OWORD *)v393 = *(_OWORD *)&v419[32];
            long long v391 = *(_OWORD *)&v419[48];
            long long v294 = v420;
            specialized CGAffineTransform.init(orientation:in:)(v292, &v433, v15, v14);
            *(_OWORD *)v400 = v433;
            *(_OWORD *)&v400[16] = v434;
            *(_OWORD *)&v400[32] = v435;
            *(_OWORD *)&t2.double a = *(_OWORD *)v393;
            *(_OWORD *)&t2.c = v391;
            *(_OWORD *)&t2.tCGFloat x = v294;
            CGAffineTransformConcat(&v427, (CGAffineTransform *)v400, &t2);
            *(_OWORD *)v393 = *(_OWORD *)&v427.a;
            long long v391 = *(_OWORD *)&v427.c;
            tCGFloat x = v427.tx;
            tCGFloat y = v427.ty;
            outlined consume of GraphicsImage.Contents?(v378, v379);

            uint64_t v129 = v398;
            int v130 = v397;
            outlined consume of DisplayList.Item.Value(*(uint64_t *)&v17, v18);
            long long v410 = *(_OWORD *)v393;
            long long v411 = v391;
            CGFloat v297 = v14;
            CGFloat v298 = v15;
            *(CGFloat *)&long long v412 = tx;
            *((CGFloat *)&v412 + 1) = ty;
            if (!v293) {
              goto LABEL_172;
            }
            goto LABEL_171;
          default:
            outlined consume of GraphicsImage.Contents?(v378, v379);

            uint64_t v129 = v398;
            int v130 = v397;
            outlined consume of DisplayList.Item.Value(*(uint64_t *)&v17, v18);
LABEL_171:
            CGFloat v297 = v15;
            CGFloat v298 = v14;
LABEL_172:
            v399.double a = v297;
            v399.b = v298;
            CGFloat v278 = v396;
            if ((v32 & 0x20) == 0) {
              *(unsigned char *)(a1 + 57) = v32 | 0x20;
            }
            break;
        }
        break;
      case 4:
        long long v125 = *(_OWORD *)((*(void *)&v17 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
        long long v433 = *(_OWORD *)((*(void *)&v17 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
        long long v434 = v125;
        LOBYTE(v435) = *(unsigned char *)((*(void *)&v17 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
        uint64_t v126 = *(void *)((*(void *)&v17 & 0xFFFFFFFFFFFFFFFLL) + 0x38);
        int v127 = *(unsigned __int8 *)((*(void *)&v17 & 0xFFFFFFFFFFFFFFFLL) + 0x40);
        int v128 = *(unsigned __int8 *)((*(void *)&v17 & 0xFFFFFFFFFFFFFFFLL) + 0x41);
        if (*(unsigned char *)(a1 + 56) == 3)
        {
          uint64_t v129 = v398;
          int v130 = v397;
          CGFloat v131 = v20;
          outlined copy of DisplayList.Item.Value(*(uint64_t *)&v17, v18);
          outlined copy of DisplayList.Item.Value(*(uint64_t *)&v17, v18);
          outlined retain of DisplayList.ViewUpdater.Model.State((uint64_t)v419);
          _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)&v433, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
          swift_retain();
        }
        else
        {
          v427.double a = v20;
          t2.double a = v12;
          t2.b = v13;
          t2.c = v15;
          t2.d = v14;
          t2.tCGFloat x = v16;
          t2.tCGFloat y = v17;
          LODWORD(v391) = v128;
          uint64_t v206 = v398;
          *(void *)&long long v437 = v18;
          *((void *)&v437 + 1) = v398;
          int v130 = v397;
          BYTE2(v438) = BYTE2(v397);
          LOWORD(v438) = v397;
          HIDWORD(v438) = v394;
          CGFloat v131 = v20;
          outlined copy of DisplayList.Item.Value(*(uint64_t *)&v17, v18);
          outlined copy of DisplayList.Item.Value(*(uint64_t *)&v17, v18);
          outlined retain of DisplayList.ViewUpdater.Model.State((uint64_t)v419);
          _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)&v433, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
          swift_retain();
          LODWORD(v393[0]) = v127;
          DisplayList.ViewUpdater.Platform._makeItemView(item:state:)((uint64_t)&t2, a4, (uint64_t)v400);
          uint64_t v207 = *(void *)&v400[16];
          __int16 v208 = *(_WORD *)&v400[56];
          __int16 v209 = v403;
          int v210 = DWORD1(v403);
          char v211 = BYTE8(v403);
          char v212 = BYTE9(v403);
          uint64_t v213 = v404;
          v214 = *(void **)(a1 + 8);
          *(_OWORD *)a1 = *(_OWORD *)v400;
          *(void *)(a1 + 16) = v207;
          *(_OWORD *)(a1 + 24) = *(_OWORD *)&v400[24];
          *(_OWORD *)(a1 + 40) = *(_OWORD *)&v400[40];
          *(_WORD *)(a1 + 56) = v208;
          long long v215 = v402;
          *(_OWORD *)(a1 + 64) = v401;
          *(_OWORD *)(a1 + 80) = v215;
          *(_WORD *)(a1 + 96) = v209;
          *(_DWORD *)(a1 + 100) = v210;
          *(unsigned char *)(a1 + 104) = v211;
          *(unsigned char *)(a1 + 105) = v212;
          *(void *)(a1 + 112) = v213;
          swift_unknownObjectRelease();

          uint64_t v129 = v206;
          int v128 = v391;
          LOWORD(v127) = LOWORD(v393[0]);
          swift_unknownObjectRelease();
        }
        *(CGFloat *)v400 = v131;
        if (v128) {
          __int16 v216 = 256;
        }
        else {
          __int16 v216 = 0;
        }
        DisplayList.ViewUpdater.Platform.updateShapeView(_:state:size:path:paint:style:contentsChanged:)(a1, (uint64_t)&v408, &v399.a, (uint64_t)&v433, v126, v216 | v127, 1);
        swift_release();
        goto LABEL_132;
      case 5:
        long long v151 = *(_OWORD *)((*(void *)&v17 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
        long long v433 = *(_OWORD *)((*(void *)&v17 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
        long long v434 = v151;
        LOBYTE(v435) = *(unsigned char *)((*(void *)&v17 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
        *(_OWORD *)v393 = *(_OWORD *)((*(void *)&v17 & 0xFFFFFFFFFFFFFFFLL) + 0x38);
        long long v391 = *(_OWORD *)((*(void *)&v17 & 0xFFFFFFFFFFFFFFFLL) + 0x48);
        uint64_t v152 = *(void *)((*(void *)&v17 & 0xFFFFFFFFFFFFFFFLL) + 0x58);
        int v153 = *(_DWORD *)((*(void *)&v17 & 0xFFFFFFFFFFFFFFFLL) + 0x60);
        char v154 = *(unsigned char *)((*(void *)&v17 & 0xFFFFFFFFFFFFFFFLL) + 0x64);
        if (*(unsigned char *)(a1 + 56) == 4)
        {
          uint64_t v129 = v398;
          int v130 = v397;
          CGFloat v155 = v20;
          outlined copy of DisplayList.Item.Value(*(uint64_t *)&v17, v18);
          outlined copy of DisplayList.Item.Value(*(uint64_t *)&v17, v18);
          outlined retain of DisplayList.ViewUpdater.Model.State((uint64_t)v419);
          _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)&v433, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
        }
        else
        {
          v427.double a = v20;
          t2.double a = v12;
          t2.b = v13;
          t2.c = v15;
          t2.d = v14;
          t2.tCGFloat x = v16;
          t2.tCGFloat y = v17;
          uint64_t v311 = v398;
          *(void *)&long long v437 = v18;
          *((void *)&v437 + 1) = v398;
          int v130 = v397;
          BYTE2(v438) = BYTE2(v397);
          LOWORD(v438) = v397;
          HIDWORD(v438) = v394;
          CGFloat v155 = v20;
          outlined copy of DisplayList.Item.Value(*(uint64_t *)&v17, v18);
          outlined copy of DisplayList.Item.Value(*(uint64_t *)&v17, v18);
          outlined retain of DisplayList.ViewUpdater.Model.State((uint64_t)v419);
          _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)&v433, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
          uint64_t v312 = a4;
          uint64_t v129 = v311;
          DisplayList.ViewUpdater.Platform._makeItemView(item:state:)((uint64_t)&t2, v312, (uint64_t)v400);
          uint64_t v313 = *(void *)&v400[16];
          __int16 v314 = *(_WORD *)&v400[56];
          __int16 v315 = v403;
          int v316 = DWORD1(v403);
          char v317 = BYTE8(v403);
          char v318 = BYTE9(v403);
          uint64_t v319 = v404;
          v320 = *(void **)(a1 + 8);
          *(_OWORD *)a1 = *(_OWORD *)v400;
          *(void *)(a1 + 16) = v313;
          *(_OWORD *)(a1 + 24) = *(_OWORD *)&v400[24];
          *(_OWORD *)(a1 + 40) = *(_OWORD *)&v400[40];
          *(_WORD *)(a1 + 56) = v314;
          long long v321 = v402;
          *(_OWORD *)(a1 + 64) = v401;
          *(_OWORD *)(a1 + 80) = v321;
          *(_WORD *)(a1 + 96) = v315;
          *(_DWORD *)(a1 + 100) = v316;
          *(unsigned char *)(a1 + 104) = v317;
          *(unsigned char *)(a1 + 105) = v318;
          *(void *)(a1 + 112) = v319;
          swift_unknownObjectRelease();

          swift_unknownObjectRelease();
        }
        t2.double a = v155;
        *(_OWORD *)v400 = *(_OWORD *)v393;
        *(_OWORD *)&v400[16] = v391;
        *(void *)&v400[32] = v152;
        *(_DWORD *)&v400[40] = v153;
        v400[44] = v154;
        DisplayList.ViewUpdater.Platform.updateShadowView(_:path:shadow:size:)(a1, (uint64_t)&v433, (int *)v400, v15, v14);
LABEL_132:
        _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)&v433, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
        uint64_t v322 = *(void *)&v17;
        unint64_t v323 = v18;
        goto LABEL_157;
      case 6:
        *(void *)&v393[0] = a1 + 80;
        outlined init with copy of AnyTrackedValue((*(void *)&v17 & 0xFFFFFFFFFFFFFFFLL) + 16, (uint64_t)&v433);
        if (*(unsigned char *)(a1 + 56) == 13)
        {
          outlined copy of DisplayList.Item.Value(*(uint64_t *)&v17, v18);
          outlined copy of DisplayList.Item.Value(*(uint64_t *)&v17, v18);
          outlined retain of DisplayList.ViewUpdater.Model.State((uint64_t)v419);
          LODWORD(v391) = 13;
        }
        else
        {
          v427.double a = v395;
          t2.double a = v12;
          t2.b = v13;
          t2.c = v15;
          t2.d = v14;
          t2.tCGFloat x = v396;
          t2.tCGFloat y = v17;
          *(void *)&long long v437 = v18;
          *((void *)&v437 + 1) = v398;
          BYTE2(v438) = BYTE2(v397);
          LOWORD(v438) = v397;
          HIDWORD(v438) = v394;
          outlined copy of DisplayList.Item.Value(*(uint64_t *)&v17, v18);
          outlined copy of DisplayList.Item.Value(*(uint64_t *)&v17, v18);
          outlined retain of DisplayList.ViewUpdater.Model.State((uint64_t)v419);
          DisplayList.ViewUpdater.Platform._makeItemView(item:state:)((uint64_t)&t2, a4, (uint64_t)v400);
          uint64_t v324 = *(void *)&v400[16];
          int v325 = v400[56];
          char v326 = v400[57];
          __int16 v327 = v403;
          int v328 = DWORD1(v403);
          char v329 = BYTE8(v403);
          char v330 = BYTE9(v403);
          uint64_t v331 = v404;
          v332 = *(void **)(a1 + 8);
          *(_OWORD *)a1 = *(_OWORD *)v400;
          *(void *)(a1 + 16) = v324;
          *(_OWORD *)(a1 + 24) = *(_OWORD *)&v400[24];
          *(_OWORD *)(a1 + 40) = *(_OWORD *)&v400[40];
          LODWORD(v391) = v325;
          *(unsigned char *)(a1 + 56) = v325;
          *(unsigned char *)(a1 + 57) = v326;
          long long v333 = v402;
          *(_OWORD *)(a1 + 64) = v401;
          *(_OWORD *)(a1 + 80) = v333;
          *(_WORD *)(a1 + 96) = v327;
          *(_DWORD *)(a1 + 100) = v328;
          *(unsigned char *)(a1 + 104) = v329;
          *(unsigned char *)(a1 + 105) = v330;
          *(void *)(a1 + 112) = v331;
          swift_unknownObjectRelease();

          swift_unknownObjectRelease();
        }
        uint64_t v334 = *(void *)a1;
        uint64_t v335 = *((void *)&v434 + 1);
        uint64_t v336 = v435;
        __swift_project_boxed_opaque_existential_1(&v433, *((uint64_t *)&v434 + 1));
        v337 = *(void (**)(uint64_t, uint64_t, uint64_t))(v336 + 24);
        swift_unknownObjectRetain();
        v337(a1, v335, v336);
        v338 = *(void **)a1;
        if (v334 == *(void *)a1)
        {
          swift_unknownObjectRelease();
        }
        else
        {
          char v339 = LOBYTE(v395);
          v400[0] = 13;
          (*(void (**)(void *, unsigned char *))((*(void *)&v395 & 0xFFFFFFFFFFFFFFFCLL) + 104))(v338, v400);
          id v340 = (id)CoreViewLayer(v339 & 3, v338);

          *(void *)(a1 + 8) = v340;
          CGFloat v341 = v393[0];
          **(void **)&v393[0] = 0;
          *(void *)(*(void *)&v341 + 8) = 0;
          *(_WORD *)(*(void *)&v341 + 16) = 0;
          int64x2_t v342 = vdupq_n_s64(0x7FF0000000000000uLL);
          *(int64x2_t *)(a1 + 24) = v342;
          *(int64x2_t *)(a1 + 40) = v342;
          *(unsigned char *)(a1 + 56) = v391;
          *(unsigned char *)(a1 + 57) = 0;
          if (one-time initialization token for infinity != -1) {
            swift_once();
          }
          uint64_t v343 = static Time.infinity;
          swift_unknownObjectRelease();
          *(void *)(a1 + 112) = v343;
        }
        int v130 = v397;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v433);
        uint64_t v322 = *(void *)&v17;
        unint64_t v323 = v18;
        uint64_t v129 = v398;
LABEL_157:
        outlined consume of DisplayList.Item.Value(v322, v323);
        goto LABEL_158;
      case 7:
        outlined init with copy of AnyTrackedValue((*(void *)&v17 & 0xFFFFFFFFFFFFFFFLL) + 16, (uint64_t)&v433);
        if (*(unsigned char *)(a1 + 56) == 15)
        {
          uint64_t v150 = v398;
          int v130 = v397;
          outlined copy of DisplayList.Item.Value(*(uint64_t *)&v17, v18);
          outlined copy of DisplayList.Item.Value(*(uint64_t *)&v17, v18);
          outlined retain of DisplayList.ViewUpdater.Model.State((uint64_t)v419);
        }
        else
        {
          v427.double a = v395;
          t2.double a = v12;
          t2.b = v13;
          t2.c = v15;
          t2.d = v14;
          t2.tCGFloat x = v396;
          t2.tCGFloat y = v17;
          uint64_t v150 = v398;
          *(void *)&long long v437 = v18;
          *((void *)&v437 + 1) = v398;
          int v130 = v397;
          BYTE2(v438) = BYTE2(v397);
          LOWORD(v438) = v397;
          HIDWORD(v438) = v394;
          outlined copy of DisplayList.Item.Value(*(uint64_t *)&v17, v18);
          outlined copy of DisplayList.Item.Value(*(uint64_t *)&v17, v18);
          outlined retain of DisplayList.ViewUpdater.Model.State((uint64_t)v419);
          DisplayList.ViewUpdater.Platform._makeItemView(item:state:)((uint64_t)&t2, a4, (uint64_t)v400);
          uint64_t v299 = *(void *)&v400[16];
          __int16 v300 = *(_WORD *)&v400[56];
          __int16 v301 = v403;
          int v302 = DWORD1(v403);
          char v303 = BYTE8(v403);
          char v304 = BYTE9(v403);
          uint64_t v305 = v404;
          v306 = *(void **)(a1 + 8);
          *(_OWORD *)a1 = *(_OWORD *)v400;
          *(void *)(a1 + 16) = v299;
          *(_OWORD *)(a1 + 24) = *(_OWORD *)&v400[24];
          *(_OWORD *)(a1 + 40) = *(_OWORD *)&v400[40];
          *(_WORD *)(a1 + 56) = v300;
          long long v307 = v402;
          *(_OWORD *)(a1 + 64) = v401;
          *(_OWORD *)(a1 + 80) = v307;
          *(_WORD *)(a1 + 96) = v301;
          *(_DWORD *)(a1 + 100) = v302;
          *(unsigned char *)(a1 + 104) = v303;
          *(unsigned char *)(a1 + 105) = v304;
          *(void *)(a1 + 112) = v305;
          swift_unknownObjectRelease();

          swift_unknownObjectRelease();
        }
        v308 = *(void **)(a1 + 8);
        objc_msgSend(v308, sel_setContentsScale_, *(double *)(*(void *)a4 + 24));
        uint64_t v309 = *((void *)&v434 + 1);
        uint64_t v310 = v435;
        __swift_project_boxed_opaque_existential_1(&v433, *((uint64_t *)&v434 + 1));
        (*(void (**)(void *, uint64_t, uint64_t))(v310 + 24))(v308, v309, v310);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v433);
        outlined consume of DisplayList.Item.Value(*(uint64_t *)&v17, v18);
        uint64_t v129 = v150;
        goto LABEL_158;
      case 8:
        v393[0] = *(CGFloat *)((*(void *)&v17 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
        *(void *)&long long v391 = *(void *)((*(void *)&v17 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
        LODWORD(v389) = *(unsigned __int8 *)((*(void *)&v17 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
        uint64_t v156 = *(void *)((*(void *)&v17 & 0xFFFFFFFFFFFFFFFLL) + 0x28);
        uint64_t v157 = *(void *)((*(void *)&v17 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
        if (*(unsigned char *)(a1 + 56) == 7)
        {
          CGFloat v158 = v20;
          outlined copy of DisplayList.Item.Value(*(uint64_t *)&v17, v18);
          outlined copy of DisplayList.Item.Value(*(uint64_t *)&v17, v18);
          outlined retain of DisplayList.ViewUpdater.Model.State((uint64_t)v419);
          swift_retain();
          swift_retain();
        }
        else
        {
          *(CGFloat *)&long long v433 = v20;
          t2.double a = v12;
          t2.b = v13;
          t2.c = v15;
          t2.d = v14;
          t2.tCGFloat x = v16;
          t2.tCGFloat y = v17;
          *(void *)&long long v437 = v18;
          *((void *)&v437 + 1) = v398;
          BYTE2(v438) = BYTE2(v397);
          LOWORD(v438) = v397;
          HIDWORD(v438) = v394;
          outlined copy of DisplayList.Item.Value(*(uint64_t *)&v17, v18);
          outlined copy of DisplayList.Item.Value(*(uint64_t *)&v17, v18);
          outlined retain of DisplayList.ViewUpdater.Model.State((uint64_t)v419);
          swift_retain();
          swift_retain();
          DisplayList.ViewUpdater.Platform._makeItemView(item:state:)((uint64_t)&t2, a4, (uint64_t)v400);
          uint64_t v344 = *(void *)&v400[16];
          __int16 v345 = *(_WORD *)&v400[56];
          __int16 v346 = v403;
          int v347 = DWORD1(v403);
          char v348 = BYTE8(v403);
          char v349 = BYTE9(v403);
          uint64_t v350 = v404;
          v351 = *(void **)(a1 + 8);
          *(_OWORD *)a1 = *(_OWORD *)v400;
          *(void *)(a1 + 16) = v344;
          *(_OWORD *)(a1 + 24) = *(_OWORD *)&v400[24];
          *(_OWORD *)(a1 + 40) = *(_OWORD *)&v400[40];
          *(_WORD *)(a1 + 56) = v345;
          long long v352 = v402;
          *(_OWORD *)(a1 + 64) = v401;
          *(_OWORD *)(a1 + 80) = v352;
          *(_WORD *)(a1 + 96) = v346;
          *(_DWORD *)(a1 + 100) = v347;
          *(unsigned char *)(a1 + 104) = v348;
          *(unsigned char *)(a1 + 105) = v349;
          *(void *)(a1 + 112) = v350;
          swift_unknownObjectRelease();

          CGFloat v158 = v395;
          swift_unknownObjectRelease();
        }
        *(CGFloat *)&long long v433 = v158;
        char v353 = v389;
        if (v389) {
          int v354 = 161;
        }
        else {
          int v354 = 160;
        }
        LOBYTE(t2.a) = 0;
        HIDWORD(t2.a) = 0;
        LOBYTE(t2.b) = 1;
        HIDWORD(t2.b) = v354;
        LOBYTE(t2.c) = 3;
        double v355 = *(double *)(*(void *)v419 + 24);
        uint64_t v356 = swift_allocObject();
        *(CGFloat *)(v356 + 16) = v393[0];
        *(void *)(v356 + 24) = v391;
        *(unsigned char *)(v356 + 32) = v353;
        *(void *)(v356 + 40) = v156;
        *(void *)(v356 + 48) = v157;
        *(void *)v400 = partial apply for closure #1 in DisplayList.ViewUpdater.Platform.updateItemView(_:index:item:state:);
        *(void *)&v400[8] = v356;
        memset(&v400[16], 0, 24);
        v400[40] = 1;
        BOOL v357 = v15 != *(double *)(a1 + 40);
        if (v14 != *(double *)(a1 + 48)) {
          BOOL v357 = 1;
        }
        LODWORD(v389) = v357;
        swift_retain();
        swift_retain();
        DisplayList.ViewUpdater.Platform.updateDrawingView(_:options:contentsScale:content:sizeChanged:)(a1, (char *)&t2, (uint64_t)v400, v389, v355);
        swift_release();
        CGFloat v358 = *(double *)(v408 + 8);
        static Date.now.getter();
        double v359 = *(double *)(a1 + 112);
        t2.double a = v358;
        ResolvedStyledText.nextUpdate(after:equivalentDate:reduceFrequency:)(&t2.a, (uint64_t)v11, 0, (double *)v400);
        swift_release();
        swift_release();
        if (*(double *)v400 >= v359) {
          double v360 = v359;
        }
        else {
          double v360 = *(double *)v400;
        }
        (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
        uint64_t v129 = v398;
        int v130 = v397;
        outlined consume of DisplayList.Item.Value(*(uint64_t *)&v17, v18);
        *(double *)(a1 + 112) = v360;
        goto LABEL_158;
      case 9:
        v393[0] = *(CGFloat *)((*(void *)&v17 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
        uint64_t v132 = *(unsigned __int16 *)((*(void *)&v17 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
        *(void *)&long long v391 = *(unsigned __int8 *)((*(void *)&v17 & 0xFFFFFFFFFFFFFFFLL) + 0x1A);
        long long v389 = *(_OWORD *)((*(void *)&v17 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
        LODWORD(v133) = *(unsigned __int8 *)((*(void *)&v17 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
        LODWORD(v388) = *(_DWORD *)((*(void *)&v17 & 0xFFFFFFFFFFFFFFFLL) + 0x34);
        LODWORD(v387) = *(unsigned __int8 *)((*(void *)&v17 & 0xFFFFFFFFFFFFFFFLL) + 0x38);
        int v134 = *(_DWORD *)((*(void *)&v17 & 0xFFFFFFFFFFFFFFFLL) + 0x3C);
        int v385 = *(unsigned __int8 *)((*(void *)&v17 & 0xFFFFFFFFFFFFFFFLL) + 0x40);
        LODWORD(v386) = v134;
        if (*(unsigned char *)(a1 + 56) == 7)
        {
          uint64_t v135 = v398;
          int v130 = v397;
          CGFloat v136 = v20;
          outlined copy of DisplayList.Item.Value(*(uint64_t *)&v17, v18);
          outlined copy of DisplayList.Item.Value(*(uint64_t *)&v17, v18);
          outlined retain of DisplayList.ViewUpdater.Model.State((uint64_t)v419);
        }
        else
        {
          *(CGFloat *)&long long v433 = v20;
          t2.double a = v12;
          t2.b = v13;
          t2.c = v15;
          t2.d = v14;
          t2.tCGFloat x = v16;
          t2.tCGFloat y = v17;
          uint64_t v135 = v398;
          *(void *)&long long v437 = v18;
          *((void *)&v437 + 1) = v398;
          int v130 = v397;
          BYTE2(v438) = BYTE2(v397);
          LOWORD(v438) = v397;
          HIDWORD(v438) = v394;
          CGFloat v136 = v20;
          outlined copy of DisplayList.Item.Value(*(uint64_t *)&v17, v18);
          outlined copy of DisplayList.Item.Value(*(uint64_t *)&v17, v18);
          outlined retain of DisplayList.ViewUpdater.Model.State((uint64_t)v419);
          int v384 = v133;
          DisplayList.ViewUpdater.Platform._makeItemView(item:state:)((uint64_t)&t2, a4, (uint64_t)v400);
          uint64_t v217 = *(void *)&v400[16];
          __int16 v218 = *(_WORD *)&v400[56];
          __int16 v219 = v403;
          int v220 = DWORD1(v403);
          char v221 = BYTE8(v403);
          char v222 = BYTE9(v403);
          uint64_t v223 = v404;
          uint64_t v383 = *(void *)a1;
          uint64_t v133 = v132;
          v224 = *(void **)(a1 + 8);
          *(_OWORD *)a1 = *(_OWORD *)v400;
          *(void *)(a1 + 16) = v217;
          *(_OWORD *)(a1 + 24) = *(_OWORD *)&v400[24];
          *(_OWORD *)(a1 + 40) = *(_OWORD *)&v400[40];
          *(_WORD *)(a1 + 56) = v218;
          long long v225 = v402;
          *(_OWORD *)(a1 + 64) = v401;
          *(_OWORD *)(a1 + 80) = v225;
          *(_WORD *)(a1 + 96) = v219;
          *(_DWORD *)(a1 + 100) = v220;
          *(unsigned char *)(a1 + 104) = v221;
          *(unsigned char *)(a1 + 105) = v222;
          *(void *)(a1 + 112) = v223;
          swift_unknownObjectRelease();

          uint64_t v132 = v133;
          LOBYTE(v133) = v384;
          swift_unknownObjectRelease();
        }
        uint64_t v226 = *(void *)a4;
        uint64_t v227 = *(void *)(*(void *)a4 + 8);
        *(CGFloat *)&long long v433 = v136;
        LOBYTE(t2.a) = v133;
        HIDWORD(t2.a) = v388;
        LOBYTE(t2.b) = v387;
        HIDWORD(t2.b) = v386;
        LOBYTE(t2.c) = v385;
        double v228 = *(double *)(v226 + 24);
        char v229 = v391;
        CGFloat v230 = v393[0];
        *(CGFloat *)v400 = v393[0];
        *(void *)&v400[8] = v132 | ((void)v391 << 16);
        *(_OWORD *)&v400[16] = v389;
        *(void *)&v400[32] = v227;
        v400[40] = 2;
        unsigned int v231 = v14 != *(double *)(a1 + 48) || v15 != *(double *)(a1 + 40);
        DisplayList.ViewUpdater.Platform.updateDrawingView(_:options:contentsScale:content:sizeChanged:)(a1, (char *)&t2, (uint64_t)v400, v231, v228);
        double v232 = *(double *)(a1 + 112);
        *(CGFloat *)v400 = v230;
        *(_WORD *)&v400[8] = v132;
        v400[10] = v229;
        *(void *)&long long v433 = v227;
        DisplayList.nextUpdate(after:)(v233);
        outlined consume of DisplayList.Item.Value(*(uint64_t *)&v17, v18);
        double a = t2.a;
        if (t2.a >= v232) {
          double a = v232;
        }
        *(double *)(a1 + 112) = a;
        uint64_t v129 = v135;
        goto LABEL_158;
      case 0xALL:
        uint64_t v159 = *(void *)((*(void *)&v17 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
        *(_OWORD *)v393 = *(_OWORD *)((*(void *)&v17 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
        int v160 = *(unsigned __int8 *)((*(void *)&v17 & 0xFFFFFFFFFFFFFFFLL) + 0x28);
        int v161 = *(_DWORD *)((*(void *)&v17 & 0xFFFFFFFFFFFFFFFLL) + 0x2C);
        LODWORD(v391) = *(unsigned __int8 *)((*(void *)&v17 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
        LODWORD(v389) = *(_DWORD *)((*(void *)&v17 & 0xFFFFFFFFFFFFFFFLL) + 0x34);
        LODWORD(v388) = *(unsigned __int8 *)((*(void *)&v17 & 0xFFFFFFFFFFFFFFFLL) + 0x38);
        if (*(unsigned char *)(a1 + 56) == 7)
        {
          uint64_t v162 = v398;
          int v130 = v397;
          outlined copy of DisplayList.Item.Value(*(uint64_t *)&v17, v18);
          outlined copy of DisplayList.Item.Value(*(uint64_t *)&v17, v18);
          outlined retain of DisplayList.ViewUpdater.Model.State((uint64_t)v419);
          swift_unknownObjectRetain();
        }
        else
        {
          *(CGFloat *)&long long v433 = v20;
          t2.double a = v12;
          t2.b = v13;
          t2.c = v15;
          t2.d = v14;
          t2.tCGFloat x = v16;
          t2.tCGFloat y = v17;
          uint64_t v162 = v398;
          *(void *)&long long v437 = v18;
          *((void *)&v437 + 1) = v398;
          int v130 = v397;
          BYTE2(v438) = BYTE2(v397);
          LOWORD(v438) = v397;
          HIDWORD(v438) = v394;
          outlined copy of DisplayList.Item.Value(*(uint64_t *)&v17, v18);
          outlined copy of DisplayList.Item.Value(*(uint64_t *)&v17, v18);
          outlined retain of DisplayList.ViewUpdater.Model.State((uint64_t)v419);
          swift_unknownObjectRetain();
          LODWORD(v387) = v160;
          DisplayList.ViewUpdater.Platform._makeItemView(item:state:)((uint64_t)&t2, a4, (uint64_t)v400);
          uint64_t v361 = *(void *)&v400[16];
          __int16 v362 = *(_WORD *)&v400[56];
          __int16 v363 = v403;
          int v364 = DWORD1(v403);
          char v365 = BYTE8(v403);
          char v366 = BYTE9(v403);
          uint64_t v367 = v404;
          uint64_t v386 = *(void *)a1;
          int v160 = v161;
          v368 = *(void **)(a1 + 8);
          *(_OWORD *)a1 = *(_OWORD *)v400;
          *(void *)(a1 + 16) = v361;
          *(_OWORD *)(a1 + 24) = *(_OWORD *)&v400[24];
          *(_OWORD *)(a1 + 40) = *(_OWORD *)&v400[40];
          *(_WORD *)(a1 + 56) = v362;
          long long v369 = v402;
          *(_OWORD *)(a1 + 64) = v401;
          *(_OWORD *)(a1 + 80) = v369;
          *(_WORD *)(a1 + 96) = v363;
          *(_DWORD *)(a1 + 100) = v364;
          *(unsigned char *)(a1 + 104) = v365;
          *(unsigned char *)(a1 + 105) = v366;
          *(void *)(a1 + 112) = v367;
          swift_unknownObjectRelease();

          int v161 = v160;
          LOBYTE(v160) = v387;
          swift_unknownObjectRelease();
        }
        *(CGFloat *)&long long v433 = v395;
        LOBYTE(t2.a) = v160;
        HIDWORD(t2.a) = v161;
        LOBYTE(t2.b) = v391;
        HIDWORD(t2.b) = v389;
        LOBYTE(t2.c) = v388;
        double v370 = *(double *)(*(void *)a4 + 24);
        *(void *)v400 = v159;
        *(_OWORD *)&v400[8] = *(_OWORD *)v393;
        *(void *)&v400[24] = 0;
        *(void *)&v400[32] = 0;
        v400[40] = 3;
        unsigned int v371 = v14 != *(double *)(a1 + 48) || v15 != *(double *)(a1 + 40);
        DisplayList.ViewUpdater.Platform.updateDrawingView(_:options:contentsScale:content:sizeChanged:)(a1, (char *)&t2, (uint64_t)v400, v371, v370);
        swift_unknownObjectRelease();
        outlined consume of DisplayList.Item.Value(*(uint64_t *)&v17, v18);
        uint64_t v129 = v162;
LABEL_158:
        CGFloat v278 = v396;
        break;
      case 0xBLL:
      case 0xCLL:
        goto LABEL_176;
      default:
        CGFloat v33 = v12;
        float v34 = *(float *)(*(void *)&v17 + 16);
        float v35 = *(float *)(*(void *)&v17 + 20);
        float v36 = *(float *)(*(void *)&v17 + 24);
        LODWORD(v393[0]) = *(_DWORD *)(*(void *)&v17 + 28);
        float v37 = *(float *)(*(void *)&v17 + 32);
        int v38 = *(unsigned __int8 *)(a1 + 56);
        double v392 = v13;
        if (v38 == 5)
        {
          outlined copy of DisplayList.Item.Value(*(uint64_t *)&v17, v18);
          outlined copy of DisplayList.Item.Value(*(uint64_t *)&v17, v18);
          outlined retain of DisplayList.ViewUpdater.Model.State((uint64_t)v419);
        }
        else
        {
          *(CGFloat *)&long long v433 = v20;
          t2.double a = v33;
          t2.b = v13;
          t2.c = v15;
          t2.d = v14;
          t2.tCGFloat x = v16;
          t2.tCGFloat y = v17;
          *(void *)&long long v437 = v18;
          *((void *)&v437 + 1) = v398;
          BYTE2(v438) = BYTE2(v397);
          LOWORD(v438) = v397;
          HIDWORD(v438) = v394;
          outlined copy of DisplayList.Item.Value(*(uint64_t *)&v17, v18);
          outlined copy of DisplayList.Item.Value(*(uint64_t *)&v17, v18);
          outlined retain of DisplayList.ViewUpdater.Model.State((uint64_t)v419);
          DisplayList.ViewUpdater.Platform._makeItemView(item:state:)((uint64_t)&t2, a4, (uint64_t)v400);
          uint64_t v235 = *(void *)&v400[16];
          __int16 v236 = *(_WORD *)&v400[56];
          __int16 v237 = v403;
          int v238 = DWORD1(v403);
          char v239 = BYTE8(v403);
          char v240 = BYTE9(v403);
          uint64_t v241 = v404;
          v242 = *(void **)(a1 + 8);
          *(_OWORD *)a1 = *(_OWORD *)v400;
          *(void *)(a1 + 16) = v235;
          *(_OWORD *)(a1 + 24) = *(_OWORD *)&v400[24];
          *(_OWORD *)(a1 + 40) = *(_OWORD *)&v400[40];
          *(_WORD *)(a1 + 56) = v236;
          long long v243 = v402;
          *(_OWORD *)(a1 + 64) = v401;
          *(_OWORD *)(a1 + 80) = v243;
          *(_WORD *)(a1 + 96) = v237;
          *(_DWORD *)(a1 + 100) = v238;
          *(unsigned char *)(a1 + 104) = v239;
          *(unsigned char *)(a1 + 105) = v240;
          *(void *)(a1 + 112) = v241;
          swift_unknownObjectRelease();

          swift_unknownObjectRelease();
        }
        v244 = *(void **)(a1 + 8);
        self;
        v245 = (void *)swift_dynamicCastObjCClassUnconditional();
        if (v34 == 0.0) {
          double v246 = 1.0;
        }
        else {
          double v246 = v34;
        }
        id v247 = v244;
        objc_msgSend(v245, sel_setScale_, v246);
        objc_msgSend(v245, sel_setAllowsInPlaceFiltering_, v34 == 0.0);
        uint64_t v248 = one-time initialization token for cache;
        id v249 = v247;
        if (v248 != -1) {
          swift_once();
        }
        v250 = (void *)specialized ObjectCache.subscript.getter(v35, v36, *(float *)v393, v37);
        objc_msgSend(v245, sel_setBackgroundColor_, v250);

        int v251 = *(_DWORD *)(a4 + 108);
        if (v251)
        {
          strcpy(v400, "SwiftUI-");
          v400[9] = 0;
          *(_WORD *)&v400[10] = 0;
          *(_DWORD *)&v400[12] = -402653184;
          LODWORD(t2.a) = v251;
          v252._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v252);
          swift_bridgeObjectRelease();
          v253 = (void *)MEMORY[0x24C522820](*(void *)v400, *(void *)&v400[8]);
          swift_bridgeObjectRelease();
          objc_msgSend(v245, sel_setGroupName_, v253);
        }
        else
        {
          objc_msgSend(v245, sel_setGroupName_, 0);
        }
        uint64_t v129 = v398;
        int v130 = v397;
        outlined consume of DisplayList.Item.Value(*(uint64_t *)&v17, v18);
        CGFloat v278 = v396;
        CGFloat v13 = v392;
        CGFloat v12 = v33;
        break;
    }
    if ((*(unsigned char *)(a1 + 57) & 0x20) != 0)
    {
      CGFloat v372 = *((double *)&v416 + 1);
      if (*(uint64_t *)&v278 > *((uint64_t *)&v416 + 1)) {
        CGFloat v372 = v278;
      }
      *((CGFloat *)&v416 + 1) = v372;
    }
    CGFloat v373 = v395;
    if ((*(unsigned char *)(a1 + 105) & 1) == 0)
    {
      double v374 = *(double *)(a1 + 112);
      if (one-time initialization token for infinity != -1)
      {
        swift_once();
        CGFloat v373 = v395;
        CGFloat v278 = v396;
      }
      if (v374 == *(double *)&static Time.infinity) {
        *(_WORD *)(a1 + 82) = v18;
      }
    }
    v427.double a = v373;
    t2.double a = v12;
    t2.b = v13;
    t2.c = v15;
    t2.d = v14;
    t2.tCGFloat x = v278;
    t2.tCGFloat y = v17;
    *(void *)&long long v437 = v18;
    *((void *)&v437 + 1) = v129;
    BYTE2(v438) = BYTE2(v130);
    LOWORD(v438) = v130;
    HIDWORD(v438) = v394;
    DisplayList.ViewUpdater.Platform.updateState(_:item:size:state:)(a1, (long long *)&t2, (uint64_t)&v408, v399.a, v399.b);
    outlined consume of DisplayList.Item.Value(*(uint64_t *)&v17, v18);
LABEL_169:
    long long v405 = v416;
    long long v406 = v417;
    long long v407 = v418;
    long long v401 = v412;
    long long v402 = v413;
    long long v403 = v414;
    long long v404 = v415;
    *(_OWORD *)v400 = v408;
    *(_OWORD *)&v400[16] = v409;
    *(_OWORD *)&v400[32] = v410;
    *(_OWORD *)&v400[48] = v411;
    return outlined release of DisplayList.ViewUpdater.Model.State((uint64_t)v400);
  }
LABEL_25:
  if ((*(unsigned char *)(a1 + 57) & 0x20) != 0)
  {
    double v392 = v13;
    v393[0] = v12;
    long long v54 = *(_OWORD *)(a4 + 112);
    long long v55 = *(_OWORD *)(a4 + 144);
    long long v424 = *(_OWORD *)(a4 + 128);
    long long v425 = v55;
    long long v56 = *(_OWORD *)(a4 + 144);
    long long v426 = *(_OWORD *)(a4 + 160);
    long long v57 = *(_OWORD *)(a4 + 48);
    long long v58 = *(_OWORD *)(a4 + 80);
    long long v420 = *(_OWORD *)(a4 + 64);
    long long v421 = v58;
    long long v59 = *(_OWORD *)(a4 + 80);
    long long v60 = *(_OWORD *)(a4 + 112);
    long long v422 = *(_OWORD *)(a4 + 96);
    long long v423 = v60;
    long long v61 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)v419 = *(_OWORD *)a4;
    *(_OWORD *)&v419[16] = v61;
    long long v62 = *(_OWORD *)(a4 + 48);
    long long v64 = *(_OWORD *)a4;
    long long v63 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)&v419[32] = *(_OWORD *)(a4 + 32);
    *(_OWORD *)&v419[48] = v62;
    long long v416 = v424;
    long long v417 = v56;
    long long v418 = *(_OWORD *)(a4 + 160);
    long long v412 = v420;
    long long v413 = v59;
    long long v414 = v422;
    long long v415 = v54;
    long long v408 = v64;
    long long v409 = v63;
    long long v410 = *(_OWORD *)&v419[32];
    long long v411 = v57;
    int v65 = v397;
    if (!v19)
    {
      double v66 = v15;
      long long v67 = *(_OWORD *)&v419[32];
      long long v68 = *(_OWORD *)&v419[48];
      long long v69 = v420;
      switch(*(void *)&v17 >> 60)
      {
        case 3:
          char v181 = *(unsigned char *)((*(void *)&v17 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
          uint64_t v182 = *(void *)((*(void *)&v17 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
          char v183 = *(unsigned char *)((*(void *)&v17 & 0xFFFFFFFFFFFFFFFLL) + 0x38);
          char v184 = *(unsigned char *)((*(void *)&v17 & 0xFFFFFFFFFFFFFFFLL) + 0x4C);
          char v185 = *(unsigned char *)((*(void *)&v17 & 0xFFFFFFFFFFFFFFFLL) + 0x70);
          char v186 = *(unsigned char *)((*(void *)&v17 & 0xFFFFFFFFFFFFFFFLL) + 0x71);
          __int16 v187 = *(_WORD *)((*(void *)&v17 & 0xFFFFFFFFFFFFFFFLL) + 0x72);
          *(void *)v400 = *(void *)((*(void *)&v17 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
          unint64_t v180 = *(void **)v400;
          v400[8] = v181;
          *(_OWORD *)&v400[16] = *(_OWORD *)((*(void *)&v17 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
          *(void *)&v400[32] = v182;
          v400[40] = v183;
          *(_OWORD *)&v400[44] = *(_OWORD *)((*(void *)&v17 & 0xFFFFFFFFFFFFFFFLL) + 0x3C);
          v400[60] = v184;
          long long v188 = *(_OWORD *)((*(void *)&v17 & 0xFFFFFFFFFFFFFFFLL) + 0x60);
          long long v401 = *(_OWORD *)((*(void *)&v17 & 0xFFFFFFFFFFFFFFFLL) + 0x50);
          long long v402 = v188;
          LOBYTE(v403) = v185;
          BYTE1(v403) = v186;
          WORD1(v403) = v187;
          outlined copy of DisplayList.Item.Value(*(uint64_t *)&v17, v18);
          outlined retain of DisplayList.ViewUpdater.Model.State((uint64_t)v419);
          outlined copy of GraphicsImage.Contents?(v180, v181);
          uint64_t v189 = (CGAffineTransform *)GraphicsImage.bitmapOrientation.getter();
          int v190 = 1;
          switch((char)v189)
          {
            case 1:
            case 2:
            case 3:
              break;
            case 4:
            case 5:
            case 6:
            case 7:
              int v190 = 0;
              break;
            default:
              outlined consume of GraphicsImage.Contents?(v180, v181);
              uint64_t v80 = v398;
              outlined consume of DisplayList.Item.Value(*(uint64_t *)&v17, v18);
              goto LABEL_38;
          }
          *(void *)&long long v391 = *((void *)&v69 + 1);
          double v81 = v15;
          specialized CGAffineTransform.init(orientation:in:)(v189, (long long *)&v427, v15, v14);
          *(CGAffineTransform *)v400 = v427;
          *(_OWORD *)&t2.double a = v67;
          *(_OWORD *)&t2.c = v68;
          CGFloat v82 = v15;
          *(void *)&t2.tCGFloat x = v69;
          *(void *)&t2.tCGFloat y = v391;
          CGAffineTransformConcat(&v399, (CGAffineTransform *)v400, &t2);
          long long v391 = *(_OWORD *)&v399.a;
          long long v389 = *(_OWORD *)&v399.c;
          CGFloat v191 = v399.tx;
          CGFloat v192 = v399.ty;
          outlined consume of GraphicsImage.Contents?(v180, v181);
          uint64_t v80 = v398;
          outlined consume of DisplayList.Item.Value(*(uint64_t *)&v17, v18);
          long long v410 = v391;
          long long v411 = v389;
          double v66 = v14;
          *(CGFloat *)&long long v412 = v191;
          *((CGFloat *)&v412 + 1) = v192;
          CGFloat v83 = v392;
          if (v190)
          {
            double v81 = v14;
            double v66 = v15;
          }
          goto LABEL_40;
        case 4:
          uint64_t v193 = *(void *)&v17 & 0xFFFFFFFFFFFFFFFLL;
          *(double *)&uint64_t v194 = v17;
          uint64_t v195 = *(void *)v419;
          long long v196 = *(_OWORD *)(v193 + 16);
          long long v197 = *(_OWORD *)(v193 + 32);
          LOBYTE(v427.tx) = *(unsigned char *)(v193 + 48);
          *(_OWORD *)&v427.double a = v196;
          *(_OWORD *)&v427.c = v197;
          uint64_t ObjectType = swift_getObjectType();
          *(void *)&long long v391 = *((void *)&v69 + 1);
          double v199 = *(double *)(v195 + 24);
          CGFloat v17 = *(double *)&v194;
          uint64_t v80 = v398;
          outlined copy of DisplayList.Item.Value(v194, v18);
          outlined retain of DisplayList.ViewUpdater.Model.State((uint64_t)v419);
          _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)&v427, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
          swift_retain();
          double v376 = v15;
          double v200 = specialized static ShapeLayerHelper.makeLayerBounds(size:path:layerType:contentsScale:)(v15, v14, v199, (uint64_t)&v427, ObjectType);
          double v66 = v201;
          double v81 = v202;
          *(_OWORD *)v400 = v67;
          *(_OWORD *)&v400[16] = v68;
          CGFloat v82 = v376;
          *(void *)&v400[32] = v69;
          *(void *)&v400[40] = v391;
          CGAffineTransformTranslate(&t2, (CGAffineTransform *)v400, v200, v203);
          long long v391 = *(_OWORD *)&t2.a;
          long long v389 = *(_OWORD *)&t2.c;
          CGFloat v204 = t2.tx;
          CGFloat v205 = t2.ty;
          swift_release();
          _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)&v427, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
          outlined consume of DisplayList.Item.Value(v194, v18);
          long long v410 = v391;
          long long v411 = v389;
          *(CGFloat *)&long long v412 = v204;
          *((CGFloat *)&v412 + 1) = v205;
          goto LABEL_39;
        case 0xCLL:
          goto LABEL_35;
        default:
          swift_retain();
LABEL_35:
          *(void *)&long long v391 = v18;
          *(_WORD *)(a1 + 82) = 0;
          outlined retain of DisplayList.ViewUpdater.Model.State((uint64_t)v419);
          static os_log_type_t.fault.getter();
          if (one-time initialization token for internalErrorsLog != -1) {
            swift_once();
          }
          swift_beginAccess();
          uint64_t v70 = (void *)static Log.internalErrorsLog;
          type metadata accessor for _ContiguousArrayStorage<CVarArg>();
          uint64_t v71 = swift_allocObject();
          *(_OWORD *)(v71 + 16) = xmmword_2461BDD50;
          *(CGFloat *)v400 = v17;
          uint64_t v72 = DisplayList.Content.Value.caseName.getter();
          uint64_t v74 = v73;
          uint64_t v75 = MEMORY[0x263F8D310];
          *(void *)(v71 + 56) = MEMORY[0x263F8D310];
          unint64_t v76 = lazy protocol witness table accessor for type String and conformance String();
          *(void *)(v71 + 64) = v76;
          *(void *)(v71 + 32) = v72;
          *(void *)(v71 + 40) = v74;
          *(void *)v400 = 0;
          *(void *)&v400[8] = 0xE000000000000000;
          LOBYTE(t2.a) = *(unsigned char *)(a1 + 56);
          id v77 = v70;
          _print_unlocked<A, B>(_:_:)();
          uint64_t v78 = *(void *)v400;
          uint64_t v79 = *(void *)&v400[8];
          *(void *)(v71 + 96) = v75;
          *(void *)(v71 + 104) = v76;
          *(void *)(v71 + 72) = v78;
          *(void *)(v71 + 80) = v79;
          os_log(_:dso:log:_:_:)();
          unint64_t v18 = v391;
          uint64_t v80 = v398;
          int v65 = v397;
          outlined consume of DisplayList.Item.Value(*(uint64_t *)&v17, v391);

          swift_bridgeObjectRelease();
LABEL_38:
          double v81 = v14;
          CGFloat v82 = v15;
LABEL_39:
          CGFloat v83 = v392;
LABEL_40:
          CGFloat v84 = *((double *)&v424 + 1);
          if (*(uint64_t *)&v396 > *((uint64_t *)&v424 + 1)) {
            CGFloat v84 = v396;
          }
          *((CGFloat *)&v416 + 1) = v84;
          v399.double a = v395;
          t2.double a = v393[0];
          t2.b = v83;
          t2.c = v82;
          t2.d = v14;
          t2.tCGFloat x = v396;
          t2.tCGFloat y = v17;
          *(void *)&long long v437 = v18;
          *((void *)&v437 + 1) = v80;
          BYTE2(v438) = BYTE2(v65);
          LOWORD(v438) = v65;
          HIDWORD(v438) = v394;
          DisplayList.ViewUpdater.Platform.updateState(_:item:size:state:)(a1, (long long *)&t2, (uint64_t)&v408, v66, v81);
          break;
      }
      goto LABEL_169;
    }
  }
  else
  {
    int v49 = v397;
    if (*(unsigned char *)(a1 + 56) != 7 || v15 == *(double *)(a1 + 40) && v14 == *(double *)(a1 + 48)) {
      goto LABEL_31;
    }
    swift_unknownObjectRetain();
    uint64_t v50 = swift_getObjectType();
    uint64_t v51 = swift_conformsToProtocol2();
    if (v51)
    {
      memset(v419, 0, 40);
      v419[40] = -1;
      char v52 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v51 + 40))(v419, 1, v50, v51);
      swift_unknownObjectRelease();
      *(unsigned char *)(a1 + 105) = (v52 & 1) == 0;
      CGFloat v20 = v395;
      CGFloat v16 = v396;
LABEL_31:
      *(CGFloat *)&long long v408 = v20;
      *(CGFloat *)v419 = v12;
      *(CGFloat *)&v419[8] = v13;
      *(double *)&v419[16] = v15;
      *(double *)&v419[24] = v14;
      *(CGFloat *)&v419[32] = v16;
      *(CGFloat *)&v419[40] = v17;
      *(void *)&v419[48] = v18;
      *(void *)&v419[56] = v398;
      BYTE2(v420) = BYTE2(v49);
      LOWORD(v420) = v49;
      DWORD1(v420) = v394;
      return DisplayList.ViewUpdater.Platform.updateState(_:item:size:state:)(a1, (long long *)v419, a4, v15, v14);
    }
    __break(1u);
  }
LABEL_176:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t DisplayList.ViewUpdater.Platform.updateState(_:item:size:state:)(uint64_t a1, long long *a2, uint64_t a3, double a4, double a5)
{
  uint64_t v6 = a3;
  uint64_t v9 = a1;
  long long v10 = a2[3];
  long long v103 = a2[2];
  long long v104 = v10;
  uint64_t v105 = *((void *)a2 + 8);
  long long v11 = a2[1];
  long long v101 = *a2;
  long long v102 = v11;
  uint64_t v12 = *v5;
  uint64_t v13 = *(void *)(a3 + 120);
  if (v13)
  {
    if (*(unsigned __int16 *)(a1 + 84) == ((unsigned __int16)(2 * ((33 * WORD1(v13)) ^ v13)) | 1)) {
      goto LABEL_8;
    }
  }
  else if (!*(_WORD *)(a1 + 84))
  {
    goto LABEL_8;
  }
  CoreViewSetOpacity(*v5 & 3, *(void **)a1, *(float *)(a3 + 8));
  unint64_t v14 = *(void *)(v6 + 120);
  if (v14) {
    LODWORD(v14) = (2 * ((33 * (v14 >> 16)) ^ v14)) | 1;
  }
  *(_WORD *)(v9 + 84) = v14;
LABEL_8:
  uint64_t v15 = *(void *)(v6 + 128);
  if (v15)
  {
    if (*(unsigned __int16 *)(v9 + 86) == ((unsigned __int16)(2 * ((33 * WORD1(v15)) ^ v15)) | 1)) {
      goto LABEL_24;
    }
  }
  else if (!*(_WORD *)(v9 + 86))
  {
    goto LABEL_24;
  }
  uint64_t v16 = *(void *)(v6 + 16);
  if (*(unsigned char *)(v6 + 24))
  {
    *((void *)&v88 + 1) = swift_getObjectType();
    *(void *)&long long v87 = v16;
    swift_unknownObjectRetain();
  }
  else
  {
    if (_RBBlendModeGetCompositingFilter(*(void *)(v6 + 16)))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v99 = 0u;
      long long v100 = 0u;
    }
    outlined init with take of Any?((uint64_t)&v99, (uint64_t)&v87);
  }
  CGFloat v17 = *(void **)v9;
  outlined init with copy of Any?((uint64_t)&v87, (uint64_t)&v99);
  uint64_t v18 = *((void *)&v100 + 1);
  if (*((void *)&v100 + 1))
  {
    unint64_t v19 = __swift_project_boxed_opaque_existential_1(&v99, *((uint64_t *)&v100 + 1));
    uint64_t v20 = *(void *)(v18 - 8);
    double v21 = MEMORY[0x270FA5388](v19);
    long long v23 = (char *)v73 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v20 + 16))(v23, v21);
    swift_unknownObjectRetain();
    uint64_t v24 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v18);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v99);
  }
  else
  {
    swift_unknownObjectRetain();
    uint64_t v24 = 0;
  }
  CoreViewSetCompositingFilter(v12 & 3, v17, v24);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  outlined destroy of Any?((uint64_t)&v87);
  unint64_t v25 = *(void *)(v6 + 128);
  if (v25) {
    LODWORD(v25) = (2 * ((33 * (v25 >> 16)) ^ v25)) | 1;
  }
  *(_WORD *)(v9 + 86) = v25;
LABEL_24:
  uint64_t v26 = *(void *)(v6 + 152);
  if (v26)
  {
    if (*(unsigned __int16 *)(v9 + 92) == ((unsigned __int16)(2 * ((33 * WORD1(v26)) ^ v26)) | 1)) {
      goto LABEL_45;
    }
  }
  else if (!*(_WORD *)(v9 + 92))
  {
    goto LABEL_45;
  }
  uint64_t v27 = *(void *)(v6 + 88);
  *(void *)&long long v99 = v27;
  int v28 = *(unsigned __int8 *)(v9 + 56);
  swift_bridgeObjectRetain();
  if (v28 == 7)
  {
    uint64_t v29 = specialized Array<A>.popColorMultiply(drawable:)((uint64_t *)&v99, (uint64_t *)v9);
    long long v31 = *(void **)(v9 + 8);
    if (v32)
    {
      id v38 = v31;
      float v37 = 0;
    }
    else
    {
      uint64_t v33 = v29;
      uint64_t v34 = v30;
      uint64_t v35 = one-time initialization token for cache;
      id v36 = v31;
      if (v35 != -1) {
        swift_once();
      }
      float v37 = (void *)specialized ObjectCache.subscript.getter(*(float *)&v33, *((float *)&v33 + 1), *(float *)&v34, *((float *)&v34 + 1));
    }
    objc_msgSend(v31, sel_setContentsMultiplyColor_, v37);

    uint64_t v27 = v99;
  }
  unint64_t v39 = *(void **)v9;
  swift_unknownObjectRetain();
  CFMutableArrayRef v77 = _CAFilterArrayCreate();
  uint64_t v40 = *(void *)(v27 + 16);
  if (v40)
  {
    v73[0] = v39;
    uint64_t v74 = v12;
    uint64_t v75 = v9;
    uint64_t v76 = v6;
    swift_bridgeObjectRetain();
    v73[1] = v27;
    uint64_t v41 = v27 + 120 * v40 - 24;
    do
    {
      uint64_t v43 = *(void *)(v41 - 56);
      unint64_t v44 = *(void **)(v41 - 48);
      uint64_t v45 = *(void *)(v41 - 40);
      uint64_t v46 = *(void *)(v41 - 32);
      uint64_t v47 = *(void *)(v41 - 24);
      uint64_t v48 = *(void *)(v41 - 16);
      uint64_t v49 = *(void *)(v41 - 8);
      uint64_t v50 = *(void *)v41;
      uint64_t v51 = *(void *)(v41 + 8);
      uint64_t v52 = *(void *)(v41 + 16);
      uint64_t v53 = *(void *)(v41 + 24);
      uint64_t v54 = *(void *)(v41 + 32);
      uint64_t v55 = *(void *)(v41 + 40);
      int v56 = *(_DWORD *)(v41 + 48);
      char v57 = *(unsigned char *)(v41 + 52);
      *(void *)&long long v87 = *(void *)(v41 - 64);
      *((void *)&v87 + 1) = v43;
      *(void *)&long long v88 = v44;
      *((void *)&v88 + 1) = v45;
      *(void *)&long long v89 = v46;
      *((void *)&v89 + 1) = v47;
      *(void *)&long long v90 = v48;
      *((void *)&v90 + 1) = v49;
      uint64_t v91 = v50;
      uint64_t v92 = v51;
      uint64_t v93 = v52;
      uint64_t v94 = v53;
      uint64_t v95 = v54;
      uint64_t v96 = v55;
      int v97 = v56;
      char v98 = v57;
      uint64_t v78 = v50;
      __int16 v86 = (void *)v87;
      uint64_t v85 = v43;
      id v84 = v44;
      uint64_t v83 = v45;
      uint64_t v82 = v46;
      uint64_t v81 = v47;
      uint64_t v80 = v48;
      uint64_t v79 = v49;
      outlined copy of GraphicsFilter((id)v87, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, SBYTE2(v56));
      id v58 = GraphicsFilter.makeCAFilter()();
      if (v58)
      {
        int v42 = v58;
        _CAFilterArrayAppend(v77, v58);
        outlined consume of GraphicsFilter(v86, v85, v84, v83, v82, v81, v80, v79, v78, v51, v52, v53, v54, v55, v56, SBYTE2(v56));
      }
      else
      {
        outlined consume of GraphicsFilter(v86, v85, v84, v83, v82, v81, v80, v79, v78, v51, v52, v53, v54, v55, v56, SBYTE2(v56));
      }
      v41 -= 120;
      --v40;
    }
    while (v40);
    swift_bridgeObjectRelease();
    uint64_t v6 = v76;
    uint64_t v9 = v75;
    uint64_t v12 = v74;
    unint64_t v39 = (void *)v73[0];
  }
  CFMutableArrayRef v59 = v77;
  CoreViewSetFilters(v12 & 3, v39, (uint64_t)v77);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  unint64_t v60 = *(void *)(v6 + 152);
  if (v60) {
    LODWORD(v60) = (2 * ((33 * (v60 >> 16)) ^ v60)) | 1;
  }
  *(_WORD *)(v9 + 92) = v60;
LABEL_45:
  uint64_t v61 = *(void *)(v6 + 144);
  if (v61)
  {
    if (*(unsigned __int16 *)(v9 + 90) != ((unsigned __int16)(2 * ((33 * WORD1(v61)) ^ v61)) | 1)) {
      goto LABEL_53;
    }
  }
  else if (*(_WORD *)(v9 + 90))
  {
    goto LABEL_53;
  }
  uint64_t v62 = *(void *)(v6 + 136);
  if (v62)
  {
    if (*(unsigned __int16 *)(v9 + 88) == ((unsigned __int16)(2 * ((33 * WORD1(v62)) ^ v62)) | 1))
    {
LABEL_51:
      LOBYTE(v63) = 0;
      goto LABEL_56;
    }
  }
  else if (!*(_WORD *)(v9 + 88))
  {
    goto LABEL_51;
  }
LABEL_53:
  int v64 = *(unsigned __int8 *)(v9 + 57);
  *(void *)&long long v87 = v12;
  DisplayList.ViewUpdater.Platform.updateClipShapes(_:state:)(v9, (_OWORD *)v6);
  unint64_t v65 = *(void *)(v6 + 144);
  if (v65) {
    LODWORD(v65) = (2 * ((33 * (v65 >> 16)) ^ v65)) | 1;
  }
  unsigned int v66 = v64 | *(unsigned __int8 *)(v9 + 57);
  *(_WORD *)(v9 + 90) = v65;
  int v63 = (v66 >> 3) & 1;
LABEL_56:
  *(void *)&long long v99 = v12;
  if ((DisplayList.ViewUpdater.Platform.updateGeometry(_:item:size:state:clipRectChanged:)(v9, a4, a5, (uint64_t)&v87, (uint64_t *)v6, v63) & 1) == 0)
  {
    uint64_t v67 = *(void *)(v6 + 160);
    if (v67)
    {
      if (*(unsigned __int16 *)(v9 + 94) != ((unsigned __int16)(2 * ((33 * WORD1(v67)) ^ v67)) | 1)) {
        goto LABEL_65;
      }
    }
    else if (*(_WORD *)(v9 + 94))
    {
      goto LABEL_65;
    }
    if ((void)v103)
    {
      if (*(unsigned __int16 *)(v9 + 80) == ((unsigned __int16)(2 * ((33 * WORD1(v103)) ^ v103)) | 1)) {
        goto LABEL_68;
      }
    }
    else if (!*(_WORD *)(v9 + 80))
    {
      goto LABEL_68;
    }
  }
LABEL_65:
  *(void *)&long long v99 = v12;
  long long v89 = v103;
  long long v90 = v104;
  uint64_t v91 = v105;
  long long v88 = v102;
  long long v87 = v101;
  DisplayList.ViewUpdater.Platform.updateShadow(_:state:item:)(v9, (void *)v6, (double *)&v87);
  unint64_t v68 = *(void *)(v6 + 160);
  if (v68) {
    LODWORD(v68) = (2 * ((33 * (v68 >> 16)) ^ v68)) | 1;
  }
  *(_WORD *)(v9 + 94) = v68;
LABEL_68:
  uint64_t v69 = *(void *)(v6 + 168);
  if (v69)
  {
    if (*(unsigned __int16 *)(v9 + 96) == ((unsigned __int16)(2 * ((33 * WORD1(v69)) ^ v69)) | 1)) {
      goto LABEL_75;
    }
  }
  else if (!*(_WORD *)(v9 + 96))
  {
    goto LABEL_75;
  }
  *(void *)&long long v87 = v12;
  DisplayList.ViewUpdater.Platform.updateProperties(_:state:)((void *)v9, v6);
  unint64_t v70 = *(void *)(v6 + 168);
  if (v70) {
    LODWORD(v70) = (2 * ((33 * (v70 >> 16)) ^ v70)) | 1;
  }
  *(_WORD *)(v9 + 96) = v70;
LABEL_75:
  unsigned int v71 = *(unsigned __int8 *)(v9 + 56);
  if (v71 > 0xF || ((1 << v71) & 0xE084) == 0) {
    objc_msgSend(*(id *)(v9 + 8), sel_setContentsScale_, *(double *)(*(void *)v6 + 24));
  }
  return closure #1 in DisplayList.ViewUpdater.Platform.updateState(_:item:size:state:)();
}

uint64_t DisplayList.ViewUpdater.Platform.updateGeometry(_:item:size:state:clipRectChanged:)(uint64_t a1, double a2, double a3, uint64_t a4, uint64_t *a5, char a6)
{
  double height = a3;
  double width = a2;
  uint64_t v12 = *v6;
  double v14 = *(double *)(a1 + 40);
  double v13 = *(double *)(a1 + 48);
  int v15 = v13 != a3 || v14 != a2;
  int v16 = *(unsigned __int16 *)(a1 + 88);
  uint64_t v17 = a5[17];
  if (v17) {
    unsigned __int16 v18 = (2 * ((33 * WORD1(v17)) ^ v17)) | 1;
  }
  else {
    unsigned __int16 v18 = 0;
  }
  *(_WORD *)(a1 + 88) = v18;
  if (v16 == v18) {
    char v19 = v15;
  }
  else {
    char v19 = 1;
  }
  if ((v19 & 1) == 0 && (a6 & 1) == 0) {
    return 0;
  }
  double v21 = *((double *)a5 + 8);
  double v20 = *((double *)a5 + 9);
  char v22 = *(unsigned char *)(a1 + 57);
  if ((v22 & 8) == 0) {
    goto LABEL_14;
  }
  double v23 = *(double *)a5;
  int v24 = *((_DWORD *)a5 + 2);
  uint64_t v25 = a5[2];
  uint64_t v26 = a5[12];
  char v27 = *((unsigned char *)a5 + 104);
  char v28 = *((unsigned char *)a5 + 105);
  char v29 = *((unsigned char *)a5 + 106);
  int v30 = *((_DWORD *)a5 + 27);
  uint64_t v31 = a5[14];
  char v74 = *((unsigned char *)a5 + 24);
  *(double *)&long long v56 = v23;
  DWORD2(v56) = v24;
  *(void *)&long long v57 = v25;
  BYTE8(v57) = v74;
  long long v32 = *((_OWORD *)a5 + 3);
  long long v58 = *((_OWORD *)a5 + 2);
  long long v59 = v32;
  double v60 = v21;
  double v61 = v20;
  long long v62 = *((_OWORD *)a5 + 5);
  uint64_t v63 = v26;
  char v64 = v27;
  char v65 = v28;
  char v66 = v29;
  int v67 = v30;
  uint64_t v68 = v31;
  long long v69 = *(_OWORD *)(a5 + 15);
  uint64_t v70 = v17;
  long long v33 = *((_OWORD *)a5 + 10);
  long long v71 = *((_OWORD *)a5 + 9);
  long long v72 = v33;
  DisplayList.ViewUpdater.Model.State.clipRect()(&v73);
  if (v73.value.style == SwiftUI_RoundedCornerStyle_unknownDefault)
  {
LABEL_14:
    if ((v22 & 1) == 0)
    {
      if (v16 != v18)
      {
        if (v21 == *(double *)(a1 + 24) && v20 == *(double *)(a1 + 32))
        {
          double x = 0.0;
          if (v15)
          {
            if (v14 != width || v13 != height)
            {
              int v15 = 0;
              int v35 = 0;
              *(double *)(a1 + 40) = width;
              *(double *)(a1 + 48) = height;
              int v36 = 1;
              double y = 0.0;
              if ((v22 & 4) != 0) {
                goto LABEL_167;
              }
              goto LABEL_157;
            }
            int v15 = 0;
          }
          int v36 = 0;
          int v35 = 0;
          goto LABEL_154;
        }
        *(double *)(a1 + 24) = v21;
        *(double *)(a1 + 32) = v20;
        if ((v15 & 1) == 0)
        {
          int v15 = 0;
          double x = 0.0;
          if ((v22 & 4) != 0)
          {
            int v36 = 0;
            double y = 0.0;
            goto LABEL_168;
          }
          int v35 = 1;
          int v36 = 0;
          double y = 0.0;
LABEL_157:
          double v42 = *((double *)a5 + 5);
          BOOL v43 = 1;
          if (*((double *)a5 + 4) == 1.0 && v42 == 0.0 && *((double *)a5 + 6) == 0.0)
          {
            double v44 = *((double *)a5 + 7);
            BOOL v43 = v44 != 1.0;
            if ((v22 & 2) == 0 && v44 == 1.0) {
              goto LABEL_173;
            }
          }
          uint64_t v45 = *(void **)a1;
          *(void *)&long long v56 = a5[4];
          *((double *)&v56 + 1) = v42;
          long long v57 = *((_OWORD *)a5 + 3);
          long long v58 = 0uLL;
          CoreViewSetTransform(v12 & 3, v45, &v56);
          if (v43)
          {
            if ((v22 & 2) != 0) {
              goto LABEL_173;
            }
            char v46 = v22 | 2;
          }
          else
          {
            if ((v22 & 2) == 0) {
              goto LABEL_173;
            }
            char v46 = v22 & 0xFD;
          }
          *(unsigned char *)(a1 + 57) = v46;
LABEL_173:
          double v49 = 0.0;
          if ((*(void *)&v21 & 0xFFFFFFFFFFFFFLL) != 0) {
            double v50 = 0.0;
          }
          else {
            double v50 = v21;
          }
          if ((~*(void *)&v21 & 0x7FF0000000000000) != 0) {
            double v50 = v21;
          }
          if ((*(void *)&v20 & 0xFFFFFFFFFFFFFLL) != 0) {
            double v51 = 0.0;
          }
          else {
            double v51 = v20;
          }
          if ((~*(void *)&v20 & 0x7FF0000000000000) != 0) {
            double v51 = v20;
          }
          if ((*(void *)&x & 0xFFFFFFFFFFFFFLL) != 0) {
            double v52 = 0.0;
          }
          else {
            double v52 = x;
          }
          if ((~*(void *)&x & 0x7FF0000000000000) != 0) {
            double v52 = x;
          }
          if ((*(void *)&y & 0xFFFFFFFFFFFFFLL) != 0) {
            double v53 = 0.0;
          }
          else {
            double v53 = y;
          }
          if ((~*(void *)&y & 0x7FF0000000000000) != 0) {
            double v53 = y;
          }
          if ((*(void *)&width & 0xFFFFFFFFFFFFFLL) != 0) {
            double v54 = 0.0;
          }
          else {
            double v54 = width;
          }
          if ((~*(void *)&width & 0x7FF0000000000000) != 0) {
            double v54 = width;
          }
          if ((*(void *)&height & 0xFFFFFFFFFFFFFLL) == 0) {
            double v49 = height;
          }
          if ((~*(void *)&height & 0x7FF0000000000000) != 0) {
            double v49 = height;
          }
          uint64_t v47 = *(void **)a1;
          CoreViewSetGeometry((void *)(v12 & 3), *(void **)a1, *(unsigned __int8 *)(a1 + 56) - 13 < 3, v35, v15, v36, v50, v51, v52, v53, v54, v49);
          if (v15) {
            goto LABEL_205;
          }
          goto LABEL_203;
        }
        if (v14 != width || v13 != height)
        {
          int v15 = 0;
          *(double *)(a1 + 40) = width;
          *(double *)(a1 + 48) = height;
          double x = 0.0;
          int v36 = 1;
          double y = 0.0;
          int v35 = 1;
          if ((v22 & 4) != 0) {
            goto LABEL_167;
          }
          goto LABEL_157;
        }
        int v15 = 0;
        int v36 = 0;
        double x = 0.0;
        int v35 = 1;
LABEL_154:
        double y = 0.0;
        goto LABEL_155;
      }
      if ((v15 & 1) == 0)
      {
        int v15 = 0;
        int v36 = 0;
        int v35 = 0;
        double x = 0.0;
        goto LABEL_154;
      }
      int v15 = 0;
      int v35 = 0;
      *(double *)(a1 + 40) = width;
      *(double *)(a1 + 48) = height;
      double x = 0.0;
      int v36 = 1;
      double y = 0.0;
      if ((v22 & 4) == 0) {
        goto LABEL_173;
      }
LABEL_167:
      CoreViewSetSize(v12 & 3, *(void **)a1);
      goto LABEL_168;
    }
    double x = 0.0;
    if (v16 == v18)
    {
      if (v15)
      {
        int v35 = 0;
        *(double *)(a1 + 40) = width;
        *(double *)(a1 + 48) = height;
        int v36 = 1;
      }
      else
      {
        int v36 = 0;
        int v35 = 0;
      }
      double y = 0.0;
      goto LABEL_48;
    }
    double y = 0.0;
LABEL_52:
    if (v21 != *(double *)(a1 + 24) || v20 != *(double *)(a1 + 32))
    {
      *(double *)(a1 + 24) = v21;
      *(double *)(a1 + 32) = v20;
      if (v15)
      {
        if (width == v14)
        {
          if (height == v13)
          {
            BOOL v40 = x == 0.0;
            if (y != 0.0) {
              BOOL v40 = 0;
            }
            if ((v22 & 1) == 0)
            {
              if (v40)
              {
                if ((v22 & 4) == 0)
                {
                  int v15 = 0;
                  int v36 = 0;
                  int v35 = 1;
                  goto LABEL_156;
                }
                goto LABEL_102;
              }
              int v36 = 0;
              goto LABEL_148;
            }
            int v36 = 0;
            goto LABEL_132;
          }
          *(double *)(a1 + 40) = width;
          *(double *)(a1 + 48) = height;
          BOOL v40 = x == 0.0;
          if (y != 0.0) {
            BOOL v40 = 0;
          }
          if (v22)
          {
            int v36 = 1;
LABEL_132:
            int v35 = 1;
LABEL_133:
            int v15 = 1;
            if (!v40) {
              goto LABEL_155;
            }
            goto LABEL_48;
          }
          if (v40)
          {
            if ((v22 & 4) == 0)
            {
              int v15 = 0;
              int v36 = 1;
              int v35 = 1;
              goto LABEL_156;
            }
LABEL_135:
            LOBYTE(v15) = 0;
            goto LABEL_209;
          }
          int v36 = 1;
LABEL_148:
          int v35 = 1;
          goto LABEL_149;
        }
        *(double *)(a1 + 40) = width;
        *(double *)(a1 + 48) = height;
        int v36 = 1;
        if ((v22 & 1) == 0)
        {
          if (x != 0.0 || y != 0.0) {
            goto LABEL_148;
          }
          int v15 = 0;
          if ((v22 & 4) != 0) {
            goto LABEL_167;
          }
LABEL_130:
          int v35 = 1;
          goto LABEL_156;
        }
        if (x == 0.0)
        {
          BOOL v41 = y == 0.0;
          int v35 = 1;
          goto LABEL_139;
        }
        goto LABEL_127;
      }
      int v36 = 0;
      if (v22)
      {
        if (x == 0.0)
        {
          if (y == 0.0)
          {
            int v35 = 1;
            goto LABEL_48;
          }
          int v15 = 1;
          if ((v22 & 4) != 0) {
            goto LABEL_167;
          }
          goto LABEL_130;
        }
LABEL_127:
        int v15 = 1;
        int v35 = 1;
        goto LABEL_155;
      }
      int v35 = 1;
      if (x != 0.0 || y != 0.0)
      {
LABEL_149:
        char v38 = v22 | 1;
        *(unsigned char *)(a1 + 57) = v22 | 1;
        if ((v22 & 4) == 0) {
          goto LABEL_150;
        }
        goto LABEL_166;
      }
      if ((v22 & 4) == 0)
      {
        int v15 = 0;
        int v36 = 0;
        goto LABEL_156;
      }
LABEL_102:
      LOBYTE(v15) = 0;
      int v36 = 0;
      goto LABEL_168;
    }
    if ((v15 & 1) == 0)
    {
      int v36 = 0;
      if ((v22 & 1) == 0)
      {
        if (x != 0.0 || y != 0.0) {
          goto LABEL_103;
        }
        goto LABEL_80;
      }
      goto LABEL_82;
    }
    if (width == v14)
    {
      if (height == v13)
      {
        int v36 = 0;
        if ((v22 & 1) == 0)
        {
          if (x != 0.0 || y != 0.0)
          {
LABEL_103:
            int v35 = 0;
            goto LABEL_149;
          }
LABEL_80:
          if ((v22 & 4) == 0)
          {
            int v15 = 0;
            int v36 = 0;
            int v35 = 0;
            goto LABEL_156;
          }
          goto LABEL_102;
        }
LABEL_82:
        int v15 = 1;
        if (x != 0.0)
        {
          int v35 = 0;
          goto LABEL_155;
        }
        int v35 = 0;
        if (y != 0.0) {
          goto LABEL_155;
        }
LABEL_48:
        char v38 = v22 & 0xFE;
        *(unsigned char *)(a1 + 57) = v22 & 0xFE;
        if ((v22 & 4) == 0)
        {
LABEL_150:
          int v15 = 1;
          char v22 = v38;
          if (v16 == v18) {
            goto LABEL_173;
          }
          goto LABEL_157;
        }
LABEL_166:
        LOBYTE(v15) = 1;
        goto LABEL_167;
      }
      *(double *)(a1 + 40) = width;
      *(double *)(a1 + 48) = height;
      BOOL v40 = x == 0.0;
      if (y != 0.0) {
        BOOL v40 = 0;
      }
      if ((v22 & 1) == 0)
      {
        if (v40)
        {
LABEL_115:
          if ((v22 & 4) == 0)
          {
            int v15 = 0;
            int v35 = 0;
            int v36 = 1;
            goto LABEL_156;
          }
          goto LABEL_135;
        }
LABEL_123:
        int v35 = 0;
        int v36 = 1;
        goto LABEL_149;
      }
    }
    else
    {
      *(double *)(a1 + 40) = width;
      *(double *)(a1 + 48) = height;
      BOOL v40 = x == 0.0;
      if (y != 0.0) {
        BOOL v40 = 0;
      }
      if ((v22 & 1) == 0)
      {
        if (v40) {
          goto LABEL_115;
        }
        goto LABEL_123;
      }
    }
    int v35 = 0;
    int v36 = 1;
    goto LABEL_133;
  }
  double width = v73.value.rect.size.width;
  double height = v73.value.rect.size.height;
  double x = v73.value.rect.origin.x;
  double y = v73.value.rect.origin.y;
  double v21 = v21 + v73.value.rect.origin.x;
  double v20 = v20 + v73.value.rect.origin.y;
  if (v16 != v18)
  {
    LOBYTE(v15) = v15 | a6;
    goto LABEL_52;
  }
  if (!v15)
  {
    if ((a6 & 1) == 0) {
      goto LABEL_100;
    }
LABEL_51:
    LOBYTE(v15) = 1;
    goto LABEL_52;
  }
  if (a6) {
    goto LABEL_51;
  }
  if (v73.value.rect.size.width == v14 && v73.value.rect.size.height == v13)
  {
    if (v22)
    {
      int v36 = 0;
      if (v73.value.rect.origin.x != 0.0)
      {
        int v35 = 0;
        int v15 = 1;
        goto LABEL_155;
      }
      if (v73.value.rect.origin.y != 0.0)
      {
        int v15 = 1;
        int v35 = 0;
        goto LABEL_155;
      }
      int v35 = 0;
      goto LABEL_48;
    }
    if (v73.value.rect.origin.x != 0.0 || v73.value.rect.origin.y != 0.0)
    {
      int v36 = 0;
      int v35 = 0;
      goto LABEL_149;
    }
LABEL_100:
    int v15 = 0;
    int v36 = 0;
    int v35 = 0;
    if ((v22 & 4) == 0) {
      goto LABEL_173;
    }
    goto LABEL_168;
  }
  *(CGFloat *)(a1 + 40) = v73.value.rect.size.width;
  *(double *)(a1 + 48) = height;
  if ((v22 & 1) == 0)
  {
    if (x == 0.0 && y == 0.0)
    {
      int v15 = 0;
      int v35 = 0;
      int v36 = 1;
      if ((v22 & 4) != 0) {
        goto LABEL_167;
      }
      goto LABEL_173;
    }
    goto LABEL_123;
  }
  if (x == 0.0)
  {
    int v35 = 0;
    int v36 = 1;
    BOOL v41 = y == 0.0;
LABEL_139:
    int v15 = 1;
    if (!v41) {
      goto LABEL_155;
    }
    goto LABEL_48;
  }
  int v35 = 0;
  int v15 = 1;
  int v36 = 1;
LABEL_155:
  if ((v22 & 4) == 0)
  {
LABEL_156:
    if (v16 == v18) {
      goto LABEL_173;
    }
    goto LABEL_157;
  }
  if (v15) {
    goto LABEL_166;
  }
  LOBYTE(v15) = 0;
  if (v36)
  {
LABEL_209:
    int v36 = 1;
    goto LABEL_167;
  }
  int v36 = 0;
LABEL_168:
  uint64_t v47 = *(void **)a1;
  id v48 = (id)CoreViewLayer(v12 & 3, *(void **)a1);
  objc_msgSend(v48, sel_setRasterizationScale_, *(double *)(*a5 + 24));

  if (v15) {
    goto LABEL_205;
  }
LABEL_203:
  if (!v36) {
    return 0;
  }
LABEL_205:
  if (*(unsigned char *)(a1 + 56) == 12) {
    CoreViewSetMaskGeometry((void *)(v12 & 3), v47, x, y, width, height);
  }
  return 1;
}

uint64_t closure #1 in DisplayList.ViewUpdater.Platform.updateState(_:item:size:state:)()
{
  swift_getKeyPath();
  swift_unknownObjectRetain();
  dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  char v1 = v0;
  uint64_t result = swift_release();
  if (v1)
  {
    __break(1u);
    goto LABEL_6;
  }
  swift_getKeyPath();
  dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  char v4 = v3;
  uint64_t result = swift_release();
  if (v4)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  swift_unknownObjectRelease();
  swift_getKeyPath();
  dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  char v6 = v5;
  uint64_t result = swift_release();
  if (v6) {
LABEL_7:
  }
    __break(1u);
  return result;
}

void *CoreViewSetGeometry(void *result, void *a2, int a3, int a4, int a5, int a6, double a7, double a8, double a9, double a10, double a11, double a12)
{
  char v15 = a5;
  double v21 = a2;
  if (result == 2)
  {
    if (a4) {
      uint64_t result = objc_msgSend(a2, "setPosition:", a7, a8);
    }
    if ((v15 & 1) != 0 || a6) {
      goto LABEL_19;
    }
  }
  else
  {
    if (result) {
      return result;
    }
    if (a3)
    {
      if (a5) {
        CoreViewSetGeometry_cold_1();
      }
      if (a4) {
        uint64_t result = objc_msgSend(a2, "setCenter:", a7, a8);
      }
      if (a6)
      {
        [v21 bounds];
        a9 = v22;
        a10 = v23;
LABEL_19:
        return objc_msgSend(v21, "setBounds:", a9, a10, a11, a12);
      }
    }
    else
    {
      uint64_t result = (void *)[a2 layer];
      double v21 = result;
      if (a4) {
        uint64_t result = objc_msgSend(result, "setPosition:", a7, a8);
      }
      if (v15 & 1) != 0 || (a6) {
        goto LABEL_19;
      }
    }
  }
  return result;
}

void DisplayList.ViewUpdater.Platform.updateShadow(_:state:item:)(uint64_t a1, void *a2, double *a3)
{
  uint64_t v6 = *v3;
  uint64_t v7 = a2[12];
  if (v7)
  {
    if (*(unsigned char *)(a1 + 56))
    {
      unint64_t v8 = *((void *)a3 + 6);
      if (!(v8 >> 62))
      {
        unint64_t v9 = *((void *)a3 + 5);
        if (v9 >> 60 == 4)
        {
          double v28 = a3[2];
          double v29 = a3[3];
          long long v30 = *(_OWORD *)((v9 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
          long long v60 = *(_OWORD *)((v9 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
          long long v61 = v30;
          char v62 = *(unsigned char *)((v9 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
          uint64_t v31 = *(void *)((v9 & 0xFFFFFFFFFFFFFFFLL) + 0x38);
          long long v32 = *(void **)(a1 + 8);
          uint64_t ObjectType = swift_getObjectType();
          double v34 = *(double *)(*a2 + 24);
          outlined copy of DisplayList.Item.Value(v9, v8);
          outlined copy of DisplayList.Item.Value(v9, v8);
          swift_retain();
          _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)&v60, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
          swift_retain();
          double v35 = specialized static ShapeLayerHelper.makeLayerBounds(size:path:layerType:contentsScale:)(v28, v29, v34, (uint64_t)&v60, ObjectType);
          uint64_t v37 = v36;
          swift_beginAccess();
          uint64_t v38 = *(void *)(v7 + 48);
          int v39 = *(_DWORD *)(v7 + 56);
          char v40 = *(unsigned char *)(v7 + 60);
          *(void *)&long long v48 = v6;
          *((void *)&v48 + 1) = v32;
          long long v42 = *(_OWORD *)(v7 + 16);
          long long v41 = *(_OWORD *)(v7 + 32);
          long long v49 = v60;
          long long v50 = v61;
          LOBYTE(v51) = v62;
          *((double *)&v51 + 1) = v35;
          *(void *)double v52 = v37;
          *(_OWORD *)&v52[8] = v42;
          *(_OWORD *)&v52[24] = v41;
          *(void *)&v52[40] = v38;
          *(_DWORD *)&v52[48] = v39;
          v52[52] = v40;
          v52[53] = 0;
          BOOL v43 = *(void (**)(long long *, ValueMetadata *, _UNKNOWN **))(*(void *)v31 + 136);
          _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)&v60, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
          id v44 = v32;
          v43(&v48, &type metadata for ShapeLayerShadowHelper, &protocol witness table for ShapeLayerShadowHelper);
          swift_release();
          _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)&v60, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
          outlined consume of DisplayList.Item.Value(v9, v8);
          swift_release();
          long long v57 = *(_OWORD *)v52;
          long long v58 = *(_OWORD *)&v52[16];
          v59[0] = *(_OWORD *)&v52[32];
          *(void *)((char *)v59 + 14) = *(void *)&v52[46];
          long long v53 = v48;
          long long v54 = v49;
          long long v55 = v50;
          long long v56 = v51;
          outlined release of ShapeLayerShadowHelper((uint64_t)&v53);
          goto LABEL_19;
        }
        if (v9 >> 60 == 1)
        {
          float v10 = *(float *)((v9 & 0xFFFFFFFFFFFFFFFLL) + 0x1C);
          long long v11 = *(void **)(a1 + 8);
          swift_beginAccess();
          uint64_t v12 = *(unsigned int *)(v7 + 24);
          float v13 = *(float *)(v7 + 28);
          long long v45 = *(_OWORD *)(v7 + 32);
          uint64_t v14 = *(void *)(v7 + 48);
          uint64_t v46 = *(void *)(v7 + 16);
          int v47 = *(_DWORD *)(v7 + 56);
          unsigned __int8 v15 = *(unsigned char *)(v7 + 60);
          outlined copy of DisplayList.Item.Value(v9, v8);
          swift_retain();
          objc_msgSend(v11, sel_setShadowPathIsBounds_, 1);
          objc_msgSend(v11, sel_setShadowPath_, 0);
          *(void *)&long long v60 = v6;
          *(void *)&long long v53 = v46;
          *((void *)&v53 + 1) = v12 | ((unint64_t)COERCE_UNSIGNED_INT(v10 * v13) << 32);
          long long v54 = v45;
          *(void *)&long long v55 = v14;
          WORD6(v55) = v15;
          DWORD2(v55) = v47;
          DisplayList.ViewUpdater.Platform.setShadow(_:layer:)((uint64_t)&v53, v11);
          swift_release();
LABEL_19:
          outlined consume of DisplayList.Item.Value(v9, v8);
          return;
        }
      }
    }
    swift_beginAccess();
    float v16 = *(float *)(v7 + 16);
    float v17 = *(float *)(v7 + 20);
    float v18 = *(float *)(v7 + 24);
    float v19 = *(float *)(v7 + 28);
    double v20 = *(double *)(v7 + 32);
    double v21 = *(double *)(v7 + 40);
    double v22 = *(double *)(v7 + 48);
    double v23 = *(void **)a1;
    uint64_t v24 = one-time initialization token for cache;
    swift_retain();
    if (v24 != -1) {
      swift_once();
    }
    uint64_t v25 = (void *)specialized ObjectCache.subscript.getter(v16, v17, v18, v19);
    CoreViewSetShadow(v6 & 3, v23, (uint64_t)v25, v20, v21, v22);
    swift_release();
  }
  else
  {
    uint64_t v26 = a2[20];
    if (v26)
    {
      if (*(unsigned __int16 *)(a1 + 94) == ((unsigned __int16)(2 * ((33 * WORD1(v26)) ^ v26)) | 1)) {
        return;
      }
    }
    else if (!*(_WORD *)(a1 + 94))
    {
      return;
    }
    if (*(unsigned __int8 *)(a1 + 56) - 13 >= 3)
    {
      char v27 = *(void **)a1;
      CoreViewSetShadow(v6 & 3, v27, 0, 0.0, 0.0, 0.0);
    }
  }
}

uint64_t CoreViewSetCompositingFilter(uint64_t result, void *a2, uint64_t a3)
{
  if (result != 2)
  {
    if (result) {
      return result;
    }
    a2 = (void *)[a2 layer];
  }

  return [a2 setCompositingFilter:a3];
}

uint64_t CoreViewSetOpacity(uint64_t result, void *a2, double a3)
{
  if (result == 2)
  {
    *(float *)&a3 = a3;
    return [a2 setOpacity:a3];
  }
  else if (!result)
  {
    return objc_msgSend(a2, "setAlpha:");
  }
  return result;
}

uint64_t CoreViewSetFilters(uint64_t result, void *a2, uint64_t a3)
{
  if (result != 2)
  {
    if (result) {
      return result;
    }
    a2 = (void *)[a2 layer];
  }

  return [a2 setFilters:a3];
}

CFMutableArrayRef _CAFilterArrayCreate()
{
  return CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
}

void DisplayList.ViewUpdater.Platform.updateProperties(_:state:)(void *a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  uint64_t v6 = (void *)*a1;
  (*(void (**)(void, void))((*v2 & 0xFFFFFFFFFFFFFFFCLL) + 144))((*(unsigned __int8 *)(a2 + 104) >> 1) & 1, *a1);
  uint64_t v7 = (void *)a1[1];
  if (*(char *)(a2 + 104) < 0) {
    uint64_t v8 = 18;
  }
  else {
    uint64_t v8 = 0;
  }
  swift_unknownObjectRetain();
  id v9 = v7;
  swift_unknownObjectRetain();
  id v10 = (id)CoreViewLayer(v5 & 3, v6);
  objc_msgSend(v10, sel_setDisableUpdateMask_, v8);
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
}

uint64_t specialized Array<A>.popColorMultiply(drawable:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 16);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = v2 + 120 * v3;
  if (*(unsigned char *)(v4 + 28) != 5) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 - 88);
  uint64_t v7 = *a2;
  swift_unknownObjectRetain();
  swift_getObjectType();
  uint64_t v8 = swift_conformsToProtocol2();
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  if (v8) {
    uint64_t v10 = v7;
  }
  else {
    uint64_t v10 = 0;
  }
  if (!v10)
  {
    swift_unknownObjectRelease();
    return 0;
  }
  swift_getObjectType();
  char v11 = (*(uint64_t (**)(void))(v9 + 32))();
  uint64_t result = swift_unknownObjectRelease();
  if ((v11 & 1) == 0) {
    return 0;
  }
  if (*(void *)(v2 + 16))
  {
    specialized Array._customRemoveLast()((uint64_t)&v28);
    if (v43 == 255)
    {
      specialized Array.remove(at:)(*(void *)(*a1 + 16) - 1, (uint64_t)&v28);
      float v13 = v28;
      int v14 = v29;
      unsigned __int8 v15 = v30;
      char v16 = v31;
      uint64_t v17 = v32;
      uint64_t v18 = v33;
      uint64_t v19 = v34;
      uint64_t v20 = v35;
      uint64_t v21 = v36;
      uint64_t v22 = v37;
      uint64_t v23 = v38;
      uint64_t v24 = v39;
      uint64_t v25 = v40;
      uint64_t v26 = v41;
      int v27 = v42;
    }
    else
    {
      int v27 = v42;
      uint64_t v25 = v40;
      uint64_t v26 = v41;
      uint64_t v23 = v38;
      uint64_t v24 = v39;
      uint64_t v21 = v36;
      uint64_t v22 = v37;
      uint64_t v19 = v34;
      uint64_t v20 = v35;
      uint64_t v17 = v32;
      uint64_t v18 = v33;
      unsigned __int8 v15 = v30;
      char v16 = v31;
      float v13 = v28;
      int v14 = v29;
    }
    outlined consume of GraphicsFilter(v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, SBYTE2(v27));
    return v6;
  }
  __break(1u);
  return result;
}

uint64_t getEnumTagSinglePayload for SubviewsCollectionSlice(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _ValueTransactionModifier.init(value:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return _ValueTransactionModifier.init(value:transform:)(a1, a2, a3, a4, a5, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _ValueTransactionModifier, a6);
}

uint64_t type metadata accessor for DefaultLayoutViewResponder()
{
  return self;
}

uint64_t EnvironmentValues.defaultPixelLength.setter(uint64_t a1, char a2, void (*a3)(uint64_t *, uint64_t, uint64_t, uint64_t *), void (*a4)(uint64_t, uint64_t))
{
  uint64_t v8 = a2 & 1;
  uint64_t v9 = *v4;
  swift_retain_n();
  a3(v4, a1, v8, &v12);
  swift_release();
  if (v4[1])
  {
    uint64_t v10 = *v4;
    swift_retain();
    swift_retain();
    a4(v9, v10);
    swift_release();
    swift_release();
  }
  return swift_release();
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<DisplayCornerRadiusKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<DisplayCornerRadiusKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DisplayCornerRadiusKey>, (uint64_t)&type metadata for DisplayCornerRadiusKey, (uint64_t)&protocol witness table for DisplayCornerRadiusKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DisplayCornerRadiusKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<DisplayCornerRadiusKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<DisplayCornerRadiusKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<DisplayCornerRadiusKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<DisplayCornerRadiusKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DisplayCornerRadiusKey>, (uint64_t)&type metadata for DisplayCornerRadiusKey, (uint64_t)&protocol witness table for DisplayCornerRadiusKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DisplayCornerRadiusKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t outlined destroy of NamedImage.Key(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t NamedImage.VectorKey.init(name:location:in:textStyle:idiom:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v50 = a6;
  uint64_t v52 = a5;
  type metadata accessor for Text.Style?(0, (unint64_t *)&lazy cache variable for type metadata for Text.Style?, type metadata accessor for Text.Style, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v12 - 8);
  int v14 = (char *)&v48 - v13;
  uint64_t v51 = type metadata accessor for Text.Style(0);
  uint64_t v15 = *(void *)(v51 - 8);
  MEMORY[0x270FA5388](v51);
  uint64_t v48 = (uint64_t)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for Locale();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = *a3;
  uint64_t v21 = *a4;
  uint64_t v22 = a4[1];
  uint64_t v55 = v21;
  uint64_t v56 = v22;
  swift_retain();
  swift_retain();
  CatalogKey.init(_:)(&v55, (char *)&v53);
  char v23 = BYTE1(v53);
  *(unsigned char *)a7 = v53;
  *(unsigned char *)(a7 + 1) = v23;
  *(void *)(a7 + 8) = a1;
  *(void *)(a7 + 16) = a2;
  swift_retain();
  swift_retain_n();
  if (v22)
  {
    uint64_t v24 = swift_retain();
    double v25 = specialized PropertyList.Tracker.value<A>(_:for:)(v24);
    swift_release_n();
    swift_release_n();
    *(double *)(a7 + 24) = v25;
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v21, &v55);
    swift_release_n();
    swift_release_n();
    *(unsigned char *)(a7 + 32) = v55;
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v21, (uint64_t)v20);
  }
  else
  {
    uint64_t v26 = swift_retain_n();
    double v27 = specialized closure #1 in PropertyList.subscript.getter(v26);
    swift_release_n();
    swift_release_n();
    *(double *)(a7 + 24) = v27;
    swift_retain_n();
    swift_retain();
    uint64_t v28 = specialized find<A>(_:key:)(v21);
    if (v28) {
      char v29 = *(unsigned char *)(v28 + 72);
    }
    else {
      char v29 = 0;
    }
    swift_release();
    swift_release_n();
    *(unsigned char *)(a7 + 32) = v29;
    swift_retain_n();
    swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v21, (uint64_t)v20);
    swift_release_n();
  }
  swift_release_n();
  swift_release_n();
  long long v30 = (int *)type metadata accessor for NamedImage.VectorKey(0);
  (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(a7 + v30[8], v20, v17);
  uint64_t v31 = v52;
  outlined init with copy of Text.Style?(v52, (uint64_t)v14, (unint64_t *)&lazy cache variable for type metadata for Text.Style?, type metadata accessor for Text.Style);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, v51) != 1)
  {
    uint64_t v33 = v48;
    outlined init with take of NamedImage.BitmapKey((uint64_t)v14, v48, type metadata accessor for Text.Style);
    uint64_t v53 = v21;
    uint64_t v54 = v22;
    Text.Style.fontTraits(in:)(&v53, (uint64_t)&v55);
    outlined destroy of NamedImage.BitmapKey(v33, type metadata accessor for Text.Style);
    uint64_t v35 = v55;
    uint64_t v34 = v56;
    uint64_t v37 = v49;
    uint64_t v36 = v50;
    if (!v22) {
      goto LABEL_15;
    }
LABEL_11:
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v21, (char *)&v53);
    swift_release_n();
    swift_release_n();
    LOBYTE(v38) = v53;
    if (v53 == 2) {
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  outlined destroy of Text.Style?((uint64_t)v14, (unint64_t *)&lazy cache variable for type metadata for Text.Style?, type metadata accessor for Text.Style);
  if (v22)
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v32 = specialized PropertyList.Tracker.derivedValue<A>(_:for:)(v21);
    swift_release_n();
    swift_release_n();
  }
  else
  {
    uint64_t v55 = v21;
    uint64_t v56 = 0;
    swift_retain();
    uint64_t v32 = specialized static EnvironmentValues.EffectiveSymbolFontKey.value(in:)((unint64_t *)&v55);
    swift_release();
    swift_release();
  }
  uint64_t v37 = v49;
  uint64_t v36 = v50;
  uint64_t v53 = v21;
  uint64_t v54 = v22;
  Font.resolveTraits(in:)(&v53, v32, (uint64_t)&v55);
  swift_release();
  uint64_t v35 = v55;
  uint64_t v34 = v56;
  if (v22) {
    goto LABEL_11;
  }
LABEL_15:
  type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<LegibilityWeightKey>);
  BloomFilter.init(hashValue:)(v39);
  uint64_t v40 = v55;
  int v38 = 2;
  swift_retain_n();
  swift_retain();
  uint64_t v41 = specialized find1<A>(_:key:filter:)(v21, v40);
  if (v41) {
    int v38 = *(unsigned __int8 *)(v41 + 72);
  }
  swift_release();
  swift_release_n();
  if (v38 != 2)
  {
LABEL_18:
    if (v38)
    {
      CTFontGetAccessibilityBoldWeightOfWeight();
      uint64_t v34 = v42;
    }
  }
LABEL_20:
  *(void *)(a7 + v30[9]) = v34;
  if (v22)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v21, (char *)&v55);
    swift_release_n();
    swift_release_n();
    char v43 = v55;
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ImageScaleKey>);
    BloomFilter.init(hashValue:)(v44);
    uint64_t v45 = v55;
    swift_retain_n();
    swift_retain();
    uint64_t v46 = specialized find1<A>(_:key:filter:)(v21, v45);
    if (v46) {
      char v43 = *(unsigned char *)(v46 + 72);
    }
    else {
      char v43 = 1;
    }
    swift_release();
    swift_release_n();
  }
  outlined destroy of Text.Style?(v31, (unint64_t *)&lazy cache variable for type metadata for Text.Style?, type metadata accessor for Text.Style);
  swift_release();
  uint64_t result = swift_release();
  *(unsigned char *)(a7 + v30[10]) = v43;
  *(void *)(a7 + v30[11]) = v35;
  *(void *)(a7 + v30[12]) = v37;
  *(void *)(a7 + v30[13]) = v36;
  return result;
}

uint64_t outlined init with copy of Text.Style?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  type metadata accessor for Text.Style?(0, a3, a4, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t outlined destroy of Text.Style?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  type metadata accessor for Text.Style?(0, a2, a3, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t Image.NamedImageProvider.vectorInfo(name:in:from:at:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X3>, void **a5@<X4>, uint64_t a6@<X8>)
{
  type metadata accessor for Text.Style?(0, (unint64_t *)&lazy cache variable for type metadata for Text.Style?, type metadata accessor for Text.Style, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v12 - 8);
  int v14 = &v27[-v13 - 8];
  uint64_t v15 = type metadata accessor for NamedImage.VectorKey(0);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v17 = &v27[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v18 = *a5;
  uint64_t v28 = (uint64_t)*a5;
  v19._countAndFlagsBits = a1;
  v19._object = a2;
  uint64_t result = Image.Location.mayContainSymbol(_:)(v19);
  if (result)
  {
    uint64_t v21 = a3[1];
    uint64_t v28 = *a3;
    uint64_t v29 = v21;
    long long v30 = v18;
    uint64_t v22 = type metadata accessor for ImageResolutionContext();
    outlined init with copy of Text.Style?((uint64_t)a3 + *(int *)(v22 + 24), (uint64_t)v14, (unint64_t *)&lazy cache variable for type metadata for Text.Style?, type metadata accessor for Text.Style);
    swift_retain_n();
    if (v21)
    {
      swift_retain_n();
      swift_bridgeObjectRetain();
      outlined copy of Image.Location(v18);
      swift_retain();
      uint64_t v23 = swift_retain();
      uint64_t v24 = specialized PropertyList.Tracker.value<A>(_:for:)(v23);
    }
    else
    {
      swift_bridgeObjectRetain();
      outlined copy of Image.Location(v18);
      uint64_t v25 = swift_retain();
      uint64_t v24 = specialized closure #1 in PropertyList.subscript.getter(v25, (uint64_t)v27);
    }
    swift_release_n();
    swift_release_n();
    NamedImage.VectorKey.init(name:location:in:textStyle:idiom:)(a1, (uint64_t)a2, (uint64_t *)&v30, &v28, (uint64_t)v14, v24, (uint64_t)v17);
    if (one-time initialization token for sharedCache != -1) {
      swift_once();
    }
    uint64_t v28 = static NamedImage.sharedCache;
    uint64_t v29 = unk_26B0EE920;
    swift_retain();
    swift_retain();
    NamedImage.Cache.subscript.getter((uint64_t)v17, a4, a6);
    swift_release();
    swift_release();
    return outlined destroy of NamedImage.BitmapKey((uint64_t)v17, type metadata accessor for NamedImage.VectorKey);
  }
  else
  {
    *(void *)(a6 + 80) = 0;
    *(_OWORD *)(a6 + 48) = 0u;
    *(_OWORD *)(a6 + 64) = 0u;
    *(_OWORD *)(a6 + 16) = 0u;
    *(_OWORD *)(a6 + 32) = 0u;
    *(_OWORD *)a6 = 0u;
  }
  return result;
}

uint64_t Image.ImageViewChild.updateValue()(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v112 = *MEMORY[0x263EF8340];
  uint64_t v4 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v78 = a1;
  uint64_t v81 = v4;
  uint64_t v82 = v3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v83 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v6 = (char *)&v67 - v5;
  _s7SwiftUI4TextV5StyleVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Text.Style?, (void (*)(uint64_t))type metadata accessor for Text.Style);
  MEMORY[0x270FA5388](v7 - 8);
  *(void *)&long long v80 = (char *)&v67 - v8;
  uint64_t v9 = (int *)type metadata accessor for ImageResolutionContext();
  MEMORY[0x270FA5388](v9);
  char v11 = (uint64_t *)((char *)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v12);
  uint64_t v86 = (uint64_t)&v67 - v13;
  LODWORD(v79) = *(_DWORD *)(v1 + 8);
  uint64_t v14 = *(void *)(v1 + 32);
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  char v17 = v16;
  uint64_t v18 = *Value;
  Swift::String v19 = (uint64_t *)AGGraphGetValue();
  uint64_t v22 = *v19;
  uint64_t v21 = v19[1];
  uint64_t v87 = v22;
  uint64_t v88 = v18;
  uint64_t v84 = v21;
  if (v17)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    goto LABEL_10;
  }
  char v23 = v20;
  swift_retain();
  if (v23)
  {
    uint64_t v22 = v87;
    swift_retain_n();
    swift_retain();
    char v24 = PropertyList.Tracker.hasDifferentUsedValues(_:)(v22);
    swift_release();
    if (v24) {
      goto LABEL_10;
    }
  }
  else
  {
    swift_retain();
    uint64_t v22 = v87;
    swift_retain();
  }
  if (!AGGraphGetOutputValue())
  {
LABEL_10:
    CFMutableArrayRef v77 = v6;
    PropertyList.Tracker.reset()();
    if (v22) {
      uint64_t v26 = *(void *)(v22 + 64);
    }
    else {
      uint64_t v26 = 0;
    }
    uint64_t v27 = *(void *)(v14 + 16);
    swift_retain_n();
    swift_retain_n();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v27 + 16));
    *(void *)(v27 + 24) = v26;
    os_unfair_lock_unlock((os_unfair_lock_t)(v27 + 16));
    swift_release();
    swift_release();
    swift_release();
    uint64_t v28 = type metadata accessor for Text.Style(0);
    uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56);
    uint64_t v30 = v80;
    v29(v80, 1, 1, v28);
    v11[2] = 0;
    uint64_t v31 = (uint64_t)v11 + v9[6];
    v29(v31, 1, 1, v28);
    uint64_t v32 = v9[7];
    *(_DWORD *)((char *)v11 + v32) = *MEMORY[0x263F288F8];
    *((unsigned char *)v11 + v9[8]) = 8;
    *((unsigned char *)v11 + v9[9]) = 3;
    *((unsigned char *)v11 + v9[10]) = 1;
    *char v11 = v87;
    v11[1] = v14;
    outlined assign with take of Text.Style?(v30, v31);
    *(_DWORD *)((char *)v11 + v32) = v79;
    uint64_t v33 = (uint64_t)v11;
    uint64_t v34 = v86;
    outlined init with take of ImageResolutionContext(v33, v86);
    LOBYTE(v32) = *(unsigned char *)(v2 + 24);
    *(unsigned char *)(v34 + v9[10]) |= v32;
    uint64_t v35 = *(void **)(v2 + 40);
    uint64_t v36 = *(void **)(v34 + 16);
    id v37 = v35;

    *(void *)(v34 + 16) = v35;
    (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v88 + 80))(&v105, v34);
    long long v104 = *(_OWORD *)v34;
    int v38 = GraphicsImage.updateSymbolEffects(_:environment:transaction:animationsDisabled:)(v2 + 48, (uint64_t *)&v104, *(unsigned int *)(v2 + 8), (v32 & 8) != 0);
    char v39 = v111[18];
    char v40 = BYTE8(v105);
    uint64_t v41 = *(void *)&v107[0];
    char v42 = BYTE8(v107[0]);
    long long v79 = *(_OWORD *)((char *)v107 + 12);
    long long v80 = v106;
    uint64_t v76 = v38;
    int v75 = BYTE12(v107[1]);
    long long v73 = v109;
    long long v74 = v108;
    int v71 = BYTE1(v110[0]);
    int v72 = LOBYTE(v110[0]);
    int v69 = BYTE3(v110[0]);
    int v70 = BYTE2(v110[0]);
    uint64_t v68 = v105;
    if (BYTE8(v105) == 255)
    {
      __int16 v52 = 0;
    }
    else
    {
      if (BYTE8(v105) == 2)
      {
        char v43 = *(void **)(v105 + 32);
        Swift::Int v44 = *(void **)(v105 + 48);
        id v45 = *(id *)(v105 + 16);
        outlined copy of Image.Location(v43);
        id v46 = v44;
        id v67 = v37;
        id v47 = v46;
        id v48 = v45;
        outlined copy of Image.Location(v43);
        id v49 = v47;
        __int16 v50 = (unsigned __int16)objc_msgSend(v48, sel_styleMask);
        *(void *)&v89[0] = v43;
        outlined copy of Image.Location(v43);
        _ShapeStyle_ResolverMode.init(rbSymbolStyleMask:location:)(v50, (void **)v89, (uint64_t)&v93);

        outlined consume of Image.Location(v43);
        outlined consume of Image.Location(v43);

        uint64_t v51 = v93;
        __int16 v52 = WORD4(v93);
        char v53 = BYTE10(v93);
        uint64_t v54 = *(void **)&v111[8];

        *(void *)&v111[8] = v51;
        *(_WORD *)&v111[16] = v52;
        uint64_t v55 = AssociatedTypeWitness;
        uint64_t v56 = v78;
        if ((v39 & 2) != 0)
        {
LABEL_16:
          char v57 = v53 | 2;
LABEL_21:
          long long v60 = v79;
          long long v59 = v80;
          long long v62 = v73;
          long long v61 = v74;
          v111[18] = v57;
          *(void *)(v2 + 40) = v76;
          *(void *)&v89[0] = v68;
          BYTE8(v89[0]) = v40;
          v89[1] = v59;
          *(void *)&v90[0] = v41;
          BYTE8(v90[0]) = v42;
          *(_OWORD *)((char *)v90 + 12) = v60;
          BYTE12(v90[1]) = v75;
          v90[2] = v61;
          v90[3] = v62;
          LOBYTE(v91[0]) = v72;
          BYTE1(v91[0]) = v71;
          BYTE2(v91[0]) = v70;
          BYTE3(v91[0]) = v69;
          *(_OWORD *)((char *)v91 + 8) = *(_OWORD *)((char *)v110 + 8);
          *(_OWORD *)((char *)&v91[1] + 8) = *(_OWORD *)((char *)&v110[1] + 8);
          *(_OWORD *)((char *)&v91[2] + 8) = *(_OWORD *)((char *)&v110[2] + 8);
          WORD4(v91[3]) = WORD4(v110[3]);
          HIDWORD(v91[3]) = HIDWORD(v110[3]);
          v92[0] = v111[0];
          *(void *)&v92[8] = v51;
          *(_WORD *)&v92[16] = v52;
          v92[18] = v57;
          long long v101 = v91[2];
          long long v102 = v91[3];
          v103[0] = *(_OWORD *)v92;
          *(_DWORD *)((char *)v103 + 15) = *(_DWORD *)&v92[15];
          long long v97 = v61;
          long long v98 = v62;
          long long v99 = v91[0];
          long long v100 = v91[1];
          long long v93 = v89[0];
          long long v94 = v59;
          long long v95 = v90[0];
          long long v96 = v90[1];
          uint64_t v63 = *(void (**)(uint64_t, long long *))(v82 + 24);
          outlined retain of Image.Resolved((uint64_t)v89);
          uint64_t v64 = (uint64_t)v77;
          v63(v88, &v93);
          uint64_t v65 = outlined release of Image.Resolved((uint64_t)v89);
          MEMORY[0x270FA5388](v65);
          *(&v67 - 2) = v56;
          *(&v67 - 1) = (id)swift_getWitnessTable();
          _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v64, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)(&v67 - 4), v55, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v66);
          swift_release();
          swift_release();
          swift_release();
          (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v64, v55);
          long long v101 = v110[2];
          long long v102 = v110[3];
          v103[0] = *(_OWORD *)v111;
          *(_DWORD *)((char *)v103 + 15) = *(_DWORD *)&v111[15];
          long long v97 = v108;
          long long v98 = v109;
          long long v99 = v110[0];
          long long v100 = v110[1];
          long long v93 = v105;
          long long v94 = v106;
          long long v95 = v107[0];
          long long v96 = v107[1];
          outlined release of Image.Resolved((uint64_t)&v93);
          return _s7SwiftUI22ImageResolutionContextVWOhTm_0(v86, (uint64_t (*)(void))type metadata accessor for ImageResolutionContext);
        }
LABEL_20:
        char v57 = v53 & 0xFD;
        goto LABEL_21;
      }
      __int16 v52 = BYTE12(v107[1]) ^ 1;
    }
    uint64_t v55 = AssociatedTypeWitness;
    uint64_t v56 = v78;
    long long v58 = *(void **)&v111[8];

    char v53 = 0;
    uint64_t v51 = 0;
    *(void *)&v111[8] = 0;
    *(_WORD *)&v111[16] = v52;
    if ((v39 & 2) != 0) {
      goto LABEL_16;
    }
    goto LABEL_20;
  }
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t type metadata accessor for ImageResolutionContext()
{
  uint64_t result = type metadata singleton initialization cache for ImageResolutionContext;
  if (!type metadata singleton initialization cache for ImageResolutionContext) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata accessor for Text.Style?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _s7SwiftUI4TextV5StyleVSgMaTm_0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t storeEnumTagSinglePayload for Text.Style(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_245FB1454);
}

uint64_t ImageProviderBox.resolve(in:)(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(*(void *)v1 + 120) + 16))(a1, *(void *)(*(void *)v1 + 112));
}

uint64_t outlined init with take of ImageResolutionContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ImageResolutionContext();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of Text.Style?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for CGRect?(0, (unint64_t *)&lazy cache variable for type metadata for Text.Style?, (void (*)(uint64_t))type metadata accessor for Text.Style);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

double GraphicsContext.resolve(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 64);
  char v5 = *(unsigned char *)(a1 + 72);
  long long v6 = *(_OWORD *)(a1 + 16);
  v11[0] = *(_OWORD *)a1;
  v11[1] = v6;
  long long v7 = *(_OWORD *)(a1 + 48);
  v11[2] = *(_OWORD *)(a1 + 32);
  v11[3] = v7;
  uint64_t v12 = v4;
  char v13 = v5;
  GraphicsContext.Shading.resolve(in:levels:)(a2, 256, v14);
  outlined init with take of GraphicsContext.ResolvedShading?((uint64_t)v14, (uint64_t)v11, &lazy cache variable for type metadata for GraphicsContext.ResolvedShading?);
  uint64_t v8 = swift_allocObject();
  outlined init with take of GraphicsContext.ResolvedShading?((uint64_t)v11, (uint64_t)v14, &lazy cache variable for type metadata for GraphicsContext.ResolvedShading?);
  if (_s7SwiftUI15GraphicsContextV15ResolvedShadingOSgWOg((uint64_t)v14) == 1)
  {
    v10[0] = 0;
    v10[1] = 0;
    _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi0_((uint64_t)v10);
  }
  else
  {
    outlined init with take of GraphicsContext.ResolvedShading?((uint64_t)v11, (uint64_t)v10, &lazy cache variable for type metadata for GraphicsContext.ResolvedShading?);
  }
  outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v10, v8 + 16);
  *(void *)a3 = v8;
  double result = 0.0;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(unsigned char *)(a3 + 72) = 9;
  return result;
}

uint64_t outlined init with take of GraphicsContext.ResolvedShading?(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  type metadata accessor for Any?(0, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void *GraphicsContext.Shading.resolve(in:levels:)@<X0>(uint64_t a1@<X0>, int64_t a2@<X1>, void *a3@<X8>)
{
  char v239 = a3;
  _sSo6CGRectVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Text.Style?, type metadata accessor for Text.Style, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v218 - v7;
  uint64_t v9 = type metadata accessor for ImageResolutionContext();
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (uint64_t)&v218 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (uint64_t)&v218 - v13;
  char v16 = *v3;
  uint64_t v15 = v3[1];
  uint64_t v18 = (uint64_t)v3[2];
  uint64_t v17 = (uint64_t)v3[3];
  uint64_t v20 = (uint64_t)v3[4];
  uint64_t v19 = (uint64_t)v3[5];
  uint64_t v22 = (uint64_t)v3[6];
  uint64_t v21 = (uint64_t)v3[7];
  unint64_t v23 = (unint64_t)v3[8];
  switch(*((unsigned char *)v3 + 72))
  {
    case 1:
      char v24 = v3[1];
      uint64_t v25 = (uint64_t)v3[2];
      uint64_t v26 = (uint64_t)v3[3];
      double v232 = v3[4];
      uint64_t v235 = v19;
      uint64_t v28 = *(void *)(a1 + 32);
      uint64_t v27 = *(void *)(a1 + 40);
      uint64_t v246 = v27;
      *(void *)&long long v247 = v28;
      uint64_t v29 = v21;
      if (v28 == 1)
      {
        uint64_t v30 = v16;
        unint64_t v31 = v23;
        uint64_t v32 = *(void *)(a1 + 16);
        uint64_t v33 = *(void *)(v32 + 48);
        uint64_t v34 = *(void *)(v32 + 56);
        swift_retain();
        swift_retain();
        unint64_t v23 = v31;
        char v16 = v30;
      }
      else
      {
        uint64_t v34 = v27;
        uint64_t v33 = v28;
      }
      uint64_t v245 = v33;
      *(void *)&v270[0] = v33;
      *(void *)&long long v248 = v34;
      *((void *)&v270[0] + 1) = v34;
      uint64_t v121 = *(void *)(*v16 + 104);
      long long v243 = (void *)(*v16 + 104);
      uint64_t v244 = v121;
      uint64_t v122 = v16;
      uint64_t v123 = (uint64_t)v232;
      long long v124 = v16;
      uint64_t v125 = v235;
      uint64_t v126 = v23;
      outlined copy of GraphicsContext.Shading.Storage(v122, (char)v24, v25, v26, (uint64_t)v232, v235, v22, v29, v23, 1);
      outlined copy of EnvironmentValues?(v247);
      float v127 = ((float (*)(_OWORD *))v244)(v270);
      unsigned int v129 = v128;
      unsigned int v131 = v130;
      unsigned int v133 = v132;
      outlined consume of GraphicsContext.Shading.Storage(v124, (char)v24, v25, v26, v123, v125, v22, v29, v126, 1);
      swift_release();
      swift_release();
      *(void *)&long long v261 = __PAIR64__(v129, LODWORD(v127));
      *((void *)&v261 + 1) = __PAIR64__(v133, v131);
      _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi0_((uint64_t)&v261);
      goto LABEL_50;
    case 2:
      *(void *)&long long v261 = *v3;
      *((void *)&v261 + 1) = v15;
      _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi1_((uint64_t)&v261);
      goto LABEL_50;
    case 3:
      v234 = v3[6];
      uint64_t v235 = v19;
      uint64_t v36 = *(void *)(a1 + 32);
      uint64_t v35 = *(void *)(a1 + 40);
      unint64_t v233 = v23;
      *(void *)&long long v248 = v35;
      if (v36 == 1)
      {
        uint64_t v37 = *(void *)(a1 + 16);
        uint64_t v38 = *(void *)(v37 + 48);
        uint64_t v39 = v20;
        uint64_t v40 = v17;
        uint64_t v41 = v18;
        char v42 = v15;
        uint64_t v43 = *(void *)(v37 + 56);
        uint64_t v44 = v21;
        swift_retain();
        swift_retain();
        uint64_t v21 = v44;
        unint64_t v23 = v233;
        uint64_t v15 = v42;
        uint64_t v18 = v41;
        uint64_t v17 = v40;
        uint64_t v20 = v39;
      }
      else
      {
        uint64_t v43 = v35;
        uint64_t v38 = v36;
      }
      *(void *)&long long v247 = v38;
      *(void *)&v270[0] = v16;
      *((void *)&v270[0] + 1) = v15;
      *(void *)&v270[1] = v18;
      *((void *)&v270[1] + 1) = v17;
      LODWORD(v270[2]) = v20;
      *(void *)&long long v261 = v38;
      *((void *)&v261 + 1) = v43;
      uint64_t v134 = v20;
      unsigned int v231 = (uint64_t *)v17;
      uint64_t v135 = v18;
      char v136 = (char)v15;
      uint64_t v137 = (uint64_t)v234;
      uint64_t v138 = v235;
      uint64_t v139 = v21;
      outlined copy of GraphicsContext.Shading.Storage(v16, (char)v15, v18, v17, v20, v235, (uint64_t)v234, v21, v23, 3);
      outlined copy of EnvironmentValues?(v36);
      id v140 = Shader.makeRBShader(in:)((uint64_t *)&v261);
      swift_release();
      swift_release();
      uint64_t v141 = v233;
      outlined consume of GraphicsContext.Shading.Storage(v16, v136, v135, (uint64_t)v231, v134, v138, v137, v139, v233, 3);
      *(void *)uint64_t v262 = 0;
      long long v261 = (unint64_t)v140;
      *(_DWORD *)&v262[8] = v134;
      *(void *)&v262[16] = v138;
      *(void *)&v262[24] = v137;
      *(void *)&v262[32] = v139;
      *(void *)&v262[40] = v141;
      _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi2_((uint64_t)&v261);
      goto LABEL_50;
    case 4:
      if (a2 < 0) {
        goto LABEL_109;
      }
      double v232 = v3[4];
      unint64_t v233 = v23;
      uint64_t v226 = v15;
      uint64_t v227 = v18;
      unsigned int v231 = (uint64_t *)v17;
      v234 = (uint64_t *)v22;
      uint64_t v235 = v19;
      uint64_t v45 = *(void *)(a1 + 32);
      uint64_t v46 = v45;
      uint64_t v47 = *(void *)(a1 + 40);
      if (v45 == 1)
      {
        uint64_t v48 = *(void *)(a1 + 16);
        uint64_t v46 = *(void *)(v48 + 48);
        uint64_t v47 = *(void *)(v48 + 56);
        uint64_t v49 = v21;
        swift_retain();
        swift_retain();
        uint64_t v21 = v49;
      }
      v250[0] = 0;
      v250[1] = 0;
      v250[2] = a2;
      char v251 = 1;
      uint64_t v252 = 0;
      unsigned __int8 v253 = 5;
      uint64_t v254 = v46;
      uint64_t v255 = v47;
      long long v256 = 0u;
      long long v257 = 0u;
      uint64_t v258 = 0;
      char v259 = 1;
      __int16 v260 = 0;
      __int16 v50 = *(void (**)(void *))(*v16 + 80);
      uint64_t v51 = v21;
      outlined copy of GraphicsContext.Shading.Storage(v16, (char)v226, v227, (uint64_t)v231, (uint64_t)v232, v235, (uint64_t)v234, v21, v233, 4);
      outlined copy of EnvironmentValues?(v45);
      v50(v250);
      uint64_t v9 = v252;
      uint64_t v11 = v253;
      uint64_t v3 = (uint64_t **)MEMORY[0x263F8EE78];
      uint64_t v52 = MEMORY[0x263F8EE78];
      if (v253 == 1)
      {
        swift_bridgeObjectRetain();
        uint64_t v52 = v9;
      }
      *(void *)&long long v261 = v52;
      LOBYTE(v285) = 0;
      _ShapeStyle_Pack.Slice.init(pack:name:)((uint64_t *)&v261, (unsigned __int8 *)&v285, (uint64_t)v270);
      unint64_t v53 = *((void *)&v270[1] + 1);
      uint64_t v14 = *(void *)&v270[1];
      a2 = *((void *)&v270[1] + 1) >> 1;
      a1 = (*((void *)&v270[1] + 1) >> 1) - *(void *)&v270[1];
      if (__OFSUB__(*((void *)&v270[1] + 1) >> 1, *(void *)&v270[1])) {
        goto LABEL_110;
      }
      uint64_t v219 = v9;
      int v220 = v11;
      uint64_t v11 = LOBYTE(v270[2]);
      uint64_t v9 = LOBYTE(v270[2]) + a1;
      if (__OFADD__(LOBYTE(v270[2]), a1)) {
        goto LABEL_111;
      }
      char v222 = v16;
      uint64_t v228 = v51;
      if (v9 < LOBYTE(v270[2])) {
        goto LABEL_112;
      }
      char v16 = (uint64_t *)*((void *)&v270[0] + 1);
      if (a1 == 1)
      {
        uint64_t v165 = -(uint64_t)LOBYTE(v270[2]);
        if (*(uint64_t *)&v270[1] <= v165 && a2 > v165)
        {
          uint64_t v166 = *((void *)&v270[0] + 1) + 120 * (int)v165;
          uint64_t v167 = *(void *)(v166 + 112);
          long long v168 = *(_OWORD *)(v166 + 96);
          long long v169 = *(_OWORD *)(v166 + 64);
          *(_OWORD *)&v277[80] = *(_OWORD *)(v166 + 80);
          long long v278 = v168;
          long long v170 = *(_OWORD *)v166;
          long long v171 = *(_OWORD *)(v166 + 16);
          long long v172 = *(_OWORD *)(v166 + 48);
          *(_OWORD *)&v277[32] = *(_OWORD *)(v166 + 32);
          *(_OWORD *)&v277[48] = v172;
          *(_OWORD *)v277 = v170;
          *(_OWORD *)&v277[16] = v171;
          uint64_t v279 = v167;
          *(_OWORD *)&v277[64] = v169;
          v270[0] = *(_OWORD *)&v277[8];
          v270[1] = *(_OWORD *)&v277[24];
          v270[2] = *(_OWORD *)&v277[40];
          v270[3] = *(_OWORD *)&v277[56];
          v270[4] = *(_OWORD *)&v277[72];
          LOBYTE(v271) = v277[88];
          DWORD1(v271) = *(_DWORD *)&v277[92];
          *((void *)&v271 + 1) = v278;
          LOBYTE(v272) = BYTE8(v278);
          *((void *)&v272 + 1) = v167;
          outlined retain of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)v277);
          GraphicsContext.ResolvedShading.init(_:)((uint64_t)v270, (uint64_t)&v285);
          swift_unknownObjectRelease();
          outlined consume of GraphicsContext.Shading.Storage(v222, (char)v226, v227, (uint64_t)v231, (uint64_t)v232, v235, (uint64_t)v234, v228, v233, 4);
          outlined init with take of GraphicsContext.ResolvedShading((uint64_t)&v285, (uint64_t)&v261);
          goto LABEL_59;
        }
LABEL_115:
        __break(1u);
LABEL_116:
        __break(1u);
        goto LABEL_117;
      }
      if (!a1)
      {
        swift_unknownObjectRelease();
        outlined consume of GraphicsContext.Shading.Storage(v222, (char)v226, v227, (uint64_t)v231, (uint64_t)v232, v235, (uint64_t)v234, v228, v233, 4);
        long long v261 = 0uLL;
        _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi0_((uint64_t)&v261);
LABEL_59:
        outlined init with take of GraphicsContext.ResolvedShading((uint64_t)&v261, (uint64_t)v270);
        _ViewInputs.base.modify(v270, v173);
        char v174 = v270;
LABEL_95:
        outlined init with take of GraphicsContext.ResolvedShading?((uint64_t)v174, (uint64_t)v239, &lazy cache variable for type metadata for GraphicsContext.ResolvedShading?);
        outlined consume of _ShapeStyle_Shape.Result(v219, v220);
        swift_release();
        swift_release();
        return (void *)swift_release();
      }
      uint64_t v218 = *(void *)&v270[0];
      id v249 = v3;
      uint64_t v3 = (uint64_t **)&v249;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1 & ~(a1 >> 63), 0);
      if (a1 < 0) {
        goto LABEL_116;
      }
      if (v9 == v11)
      {
LABEL_117:
        __break(1u);
LABEL_118:
        swift_once();
LABEL_99:
        *(void *)&v270[0] = static ForegroundStyle.shared;
        *(_OWORD *)((char *)v270 + 8) = 0u;
        *(_OWORD *)((char *)&v270[1] + 8) = 0u;
        *(_OWORD *)((char *)&v270[2] + 8) = 0u;
        *(_OWORD *)((char *)&v270[3] + 8) = 0u;
        BYTE8(v270[4]) = 4;
        swift_retain();
        GraphicsContext.Shading.resolve(in:levels:)(v239, a1, a2);
        return (void *)swift_release();
      }
      uint64_t v11 = (uint64_t)v277;
      if (v14 <= 0 && v53 >= 2)
      {
        uint64_t v175 = v249;
        if ((unint64_t)a2 <= 1) {
          uint64_t v14 = 1;
        }
        else {
          uint64_t v14 = v53 >> 1;
        }
        do
        {
          long long v177 = *((_OWORD *)v16 + 2);
          long long v176 = *((_OWORD *)v16 + 3);
          long long v178 = *((_OWORD *)v16 + 1);
          *(_OWORD *)v277 = *(_OWORD *)v16;
          *(_OWORD *)&v277[16] = v178;
          *(_OWORD *)&v277[32] = v177;
          *(_OWORD *)&v277[48] = v176;
          long long v179 = *((_OWORD *)v16 + 4);
          long long v180 = *((_OWORD *)v16 + 5);
          long long v181 = *((_OWORD *)v16 + 6);
          uint64_t v244 = v16[14];
          uint64_t v279 = v244;
          *(_OWORD *)&v277[80] = v180;
          long long v278 = v181;
          *(_OWORD *)&v277[64] = v179;
          uint64_t v182 = *(void **)&v277[8];
          unsigned __int8 v183 = v277[16];
          *(void *)&long long v248 = *(void *)&v277[32];
          uint64_t v242 = *(void *)&v277[40];
          long long v243 = *(void **)&v277[24];
          uint64_t v3 = (uint64_t **)v179;
          uint64_t v246 = v180;
          *(void *)&long long v247 = *((void *)&v179 + 1);
          float v184 = *((float *)&v180 + 3);
          uint64_t v240 = v181;
          uint64_t v241 = *(void *)&v277[56];
          uint64_t v9 = BYTE8(v181);
          uint64_t v237 = *(void *)&v277[16];
          unint64_t v238 = *(void *)&v277[8];
          uint64_t v245 = *(void *)&v277[48];
          int v236 = BYTE8(v180);
          if (BYTE8(v180))
          {
            outlined retain of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)v277);
          }
          else
          {
            uint64_t v223 = a1;
            uint64_t v224 = v14;
            long long v225 = v175;
            unsigned int v230 = BYTE8(v181);
            if (BYTE8(v181) == 255)
            {
              outlined retain of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)v277);
              uint64_t v194 = v242;
              uint64_t v193 = v243;
              uint64_t v195 = v245;
              uint64_t v196 = v241;
              outlined copy of _ShapeStyle_Pack.Fill(v182, v183, v243, (void *)v248, v242, v245, v241, (uint64_t)v3, v247, v246, 0);
              uint64_t v189 = v240;
              outlined copy of GraphicsBlendMode?(v240, 0xFFu);
              swift_bridgeObjectRetain();
              uint64_t v197 = v196;
              char v198 = v3;
              outlined copy of _ShapeStyle_Pack.Fill(v182, v183, v193, (void *)v248, v194, v195, v197, (uint64_t)v3, v247, v246, 0);
              outlined copy of GraphicsBlendMode?(v189, 0xFFu);
              uint64_t v199 = one-time initialization token for normal;
              swift_bridgeObjectRetain();
              if (v199 != -1) {
                swift_once();
              }
              uint64_t v200 = static GraphicsBlendMode.normal;
              int v229 = byte_26B0EB4A0;
              outlined copy of GraphicsBlendMode(static GraphicsBlendMode.normal, byte_26B0EB4A0);
              uint64_t v192 = v200;
              uint64_t v9 = v230;
              uint64_t v3 = v198;
            }
            else
            {
              int v229 = BYTE8(v181) & 1;
              outlined retain of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)v277);
              uint64_t v186 = v242;
              char v185 = v243;
              uint64_t v187 = (uint64_t)v3;
              uint64_t v188 = v241;
              outlined copy of _ShapeStyle_Pack.Fill(v182, v183, v243, (void *)v248, v242, v245, v241, v187, v247, v246, 0);
              uint64_t v189 = v240;
              outlined copy of GraphicsBlendMode?(v240, v230);
              swift_bridgeObjectRetain();
              uint64_t v190 = v186;
              uint64_t v9 = v230;
              uint64_t v191 = v188;
              uint64_t v3 = (uint64_t **)v187;
              outlined copy of _ShapeStyle_Pack.Fill(v182, v183, v185, (void *)v248, v190, v245, v191, v187, v247, v246, 0);
              outlined copy of GraphicsBlendMode?(v189, v9);
              swift_bridgeObjectRetain();
              uint64_t v192 = v189;
            }
            outlined copy of GraphicsBlendMode?(v189, v9);
            outlined release of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)v277);
            if (one-time initialization token for normal != -1) {
              swift_once();
            }
            uint64_t v201 = static GraphicsBlendMode.normal;
            char v202 = byte_26B0EB4A0;
            uint64_t v14 = v224;
            uint64_t v175 = v225;
            a1 = v223;
            if (v229)
            {
              if (!byte_26B0EB4A0)
              {
                swift_unknownObjectRetain();
LABEL_85:
                outlined copy of GraphicsBlendMode(v201, v202);
                uint64_t v207 = v192;
                uint64_t v221 = v192;
                char v208 = v229;
                outlined consume of GraphicsBlendMode(v207, v229);
                outlined consume of GraphicsBlendMode(v201, v202);
                outlined consume of GraphicsBlendMode(v221, v208);
LABEL_86:
                outlined release of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)v277);
                uint64_t v11 = (uint64_t)v277;
                goto LABEL_87;
              }
              swift_unknownObjectRetain();
              outlined consume of GraphicsBlendMode(v192, 1);
              outlined consume of GraphicsBlendMode(v201, 1);
              if (v192 != v201) {
                goto LABEL_86;
              }
            }
            else
            {
              if (byte_26B0EB4A0) {
                goto LABEL_85;
              }
              outlined consume of GraphicsBlendMode(v192, 0);
              outlined consume of GraphicsBlendMode(v201, 0);
              if (v192 != v201) {
                goto LABEL_86;
              }
            }
            uint64_t v203 = *(void *)(v244 + 16);
            outlined release of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)v277);
            uint64_t v11 = (uint64_t)v277;
            if (!v203)
            {
              int v204 = v237;
              unsigned int v205 = v238;
              uint64_t v3 = (uint64_t **)HIDWORD(v238);
              float v206 = *((float *)&v237 + 1);
              outlined release of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)v277);
              *(void *)&long long v261 = __PAIR64__(v3, v205);
              DWORD2(v261) = v204;
              *((float *)&v261 + 3) = v184 * v206;
              _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi0_((uint64_t)&v261);
              goto LABEL_88;
            }
          }
LABEL_87:
          *(void *)&long long v261 = v238;
          *((void *)&v261 + 1) = v237;
          *(void *)uint64_t v262 = v243;
          *(void *)&v262[8] = v248;
          *(void *)&v262[16] = v242;
          *(void *)&v262[24] = v245;
          *(void *)&v262[32] = v241;
          *(void *)&v262[40] = v3;
          *(void *)&long long v263 = v247;
          *((void *)&v263 + 1) = v246;
          LOBYTE(v264) = v236;
          *((float *)&v264 + 1) = v184;
          *((void *)&v264 + 1) = v240;
          LOBYTE(v265) = v9;
          *((void *)&v265 + 1) = v244;
          _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi3_((uint64_t)&v261);
LABEL_88:
          outlined init with take of GraphicsContext.ResolvedShading((uint64_t)&v261, (uint64_t)v270);
          id v249 = v175;
          unint64_t v210 = (unint64_t)v175[2];
          unint64_t v209 = (unint64_t)v175[3];
          if (v210 >= v209 >> 1)
          {
            uint64_t v3 = (uint64_t **)&v249;
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v209 > 1, v210 + 1, 1);
            uint64_t v175 = v249;
          }
          v175[2] = (uint64_t *)(v210 + 1);
          outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v270, (uint64_t)&v175[20 * v210 + 4]);
          if (!a1) {
            goto LABEL_108;
          }
          if (!--a1)
          {
            outlined consume of GraphicsContext.Shading.Storage(v222, (char)v226, v227, (uint64_t)v231, (uint64_t)v232, v235, (uint64_t)v234, v228, v233, 4);
            swift_unknownObjectRelease();
            uint64_t v285 = v175;
            _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi7_((uint64_t)&v285);
            outlined init with take of GraphicsContext.ResolvedShading((uint64_t)&v285, (uint64_t)&v261);
            _ViewInputs.base.modify(&v261, v211);
            char v174 = &v261;
            goto LABEL_95;
          }
          v16 += 15;
          --v14;
        }
        while (v14);
      }
      __break(1u);
LABEL_108:
      __break(1u);
LABEL_109:
      __break(1u);
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      swift_once();
LABEL_23:
      char v63 = static ResolvedGradient.ColorSpace.default;
      swift_release();
      swift_release();
      LOBYTE(v64) = v233;
      uint64_t v65 = v16;
      char v66 = v14;
      uint64_t v67 = v227;
      uint64_t v68 = (uint64_t)v232;
      uint64_t v69 = (uint64_t)v234;
      outlined consume of GraphicsContext.Shading.Storage(v65, v66, v227, v9, (uint64_t)v232, v11, (uint64_t)v234, a1, v233, 5);
LABEL_47:
      *(void *)&long long v261 = v3;
      BYTE8(v261) = v63;
      *(void *)uint64_t v262 = v67;
      *(void *)&v262[8] = v9;
      *(void *)&v262[16] = v68;
      *(void *)&v262[24] = v11;
      *(void *)&v262[32] = v69;
      *(void *)&v262[40] = a1;
      LOBYTE(v263) = v64;
      DWORD1(v263) = v248;
      _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi4_((uint64_t)&v261);
LABEL_50:
      outlined init with take of GraphicsContext.ResolvedShading((uint64_t)&v261, (uint64_t)v270);
      _ViewInputs.base.modify(v270, v154);
LABEL_51:
      long long v102 = (uint64_t ***)v270;
      return (void *)outlined init with take of GraphicsContext.ResolvedShading?((uint64_t)v102, (uint64_t)v239, &lazy cache variable for type metadata for GraphicsContext.ResolvedShading?);
    case 5:
      uint64_t v54 = (uint64_t)v3[2];
      unsigned int v231 = v3[3];
      double v232 = (uint64_t *)v20;
      v234 = (uint64_t *)v22;
      uint64_t v235 = v19;
      *(void *)&long long v248 = HIDWORD(v23);
      uint64_t v55 = *(void *)(a1 + 32);
      uint64_t v56 = v55;
      uint64_t v57 = *(void *)(a1 + 40);
      if (v55 == 1)
      {
        unint64_t v58 = v23;
        uint64_t v59 = *(void *)(a1 + 16);
        uint64_t v56 = *(void *)(v59 + 48);
        uint64_t v57 = *(void *)(v59 + 56);
        long long v60 = v15;
        uint64_t v61 = v21;
        swift_retain();
        swift_retain();
        uint64_t v21 = v61;
        unint64_t v23 = v58;
        uint64_t v15 = v60;
      }
      LOBYTE(v14) = (_BYTE)v15;
      unint64_t v233 = v23;
      if (v15)
      {
        *(void *)&v270[0] = v56;
        *((void *)&v270[0] + 1) = v57;
        uint64_t v142 = *(void *)(*v16 + 104);
        uint64_t v246 = *v16 + 104;
        *(void *)&long long v247 = v142;
        uint64_t v228 = v21;
        uint64_t v226 = v15;
        uint64_t v67 = v54;
        uint64_t v143 = v54;
        uint64_t v9 = (uint64_t)v231;
        uint64_t v144 = (uint64_t)v232;
        uint64_t v11 = v235;
        outlined copy of GraphicsContext.Shading.Storage(v16, (char)v15, v143, (uint64_t)v231, (uint64_t)v232, v235, (uint64_t)v234, v21, v23, 5);
        outlined copy of EnvironmentValues?(v55);
        ((void (*)(uint64_t ***__return_ptr, _OWORD *))v247)(&v285, v270);
        a1 = v228;
        uint64_t v64 = v233;
        swift_release();
        uint64_t v68 = v144;
        swift_release();
        int v145 = v16;
        uint64_t v69 = (uint64_t)v234;
        outlined consume of GraphicsContext.Shading.Storage(v145, (char)v226, v67, v9, v144, v11, (uint64_t)v234, a1, v64, 5);
        uint64_t v3 = v285;
        char v63 = v286;
        goto LABEL_47;
      }
      uint64_t v227 = v54;
      uint64_t v62 = v54;
      uint64_t v9 = (uint64_t)v231;
      uint64_t v11 = v235;
      a1 = v21;
      outlined copy of GraphicsContext.Shading.Storage(v16, (char)v15, v62, (uint64_t)v231, (uint64_t)v232, v235, (uint64_t)v234, v21, v23, 5);
      swift_retain();
      swift_retain();
      outlined copy of EnvironmentValues?(v55);
      uint64_t v3 = (uint64_t **)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI8GradientV4StopVG_AF08ResolvedF0VAIVs5NeverOTg503_s7d3UI8f16V7resolve2inAA08h31C0VAA17EnvironmentValuesV_tFAG4G10VAcJVXEfU_AF0pQ0VTf1cn_nTf4ng_n((uint64_t)v16, v56, v57);
      swift_release();
      swift_release();
      if (one-time initialization token for default != -1) {
        goto LABEL_113;
      }
      goto LABEL_23;
    case 6:
      unint64_t v233 = (unint64_t)v3[8];
      v234 = (uint64_t *)v22;
      *(void *)v277 = v16;
      char v70 = (char)v15;
      *(void *)&v277[8] = v15;
      uint64_t v71 = v18;
      *(void *)&v277[16] = v18;
      uint64_t v72 = v17;
      v277[24] = v17 & 1;
      uint64_t v73 = v20;
      *(void *)&v277[32] = v20;
      uint64_t v235 = v19;
      v277[40] = v19 & 1;
      *(void *)&v277[48] = v22;
      *(_WORD *)&v277[56] = v21 & 0xFF01;
      uint64_t v75 = *(void *)(a1 + 32);
      uint64_t v74 = *(void *)(a1 + 40);
      *(void *)&long long v248 = v74;
      uint64_t v76 = v16;
      if (v75 == 1)
      {
        uint64_t v77 = *(void *)(a1 + 16);
        uint64_t v78 = *(void *)(v77 + 48);
        uint64_t v79 = *(void *)(v77 + 56);
        uint64_t v80 = v21;
        swift_retain();
        swift_retain();
        uint64_t v21 = v80;
      }
      else
      {
        uint64_t v79 = v74;
        uint64_t v78 = v75;
      }
      uint64_t v246 = v79;
      *(void *)&long long v247 = v78;
      *(void *)&v270[0] = v78;
      *((void *)&v270[0] + 1) = v79;
      uint64_t v146 = v233;
      uint64_t v147 = (uint64_t)v234;
      uint64_t v148 = v235;
      uint64_t v228 = v21;
      outlined copy of GraphicsContext.Shading.Storage(v76, v70, v71, v72, v73, v235, (uint64_t)v234, v21, v233, 6);
      outlined copy of EnvironmentValues?(v75);
      MeshGradient.resolvePaint(in:)((uint64_t *)v270, (uint64_t)&v285);
      swift_release();
      swift_release();
      outlined consume of GraphicsContext.Shading.Storage(v76, v70, v71, v72, v73, v148, v147, v228, v146, 6);
      *(_OWORD *)&v262[8] = v288;
      *(void *)&long long v261 = v285;
      BYTE8(v261) = v286;
      *(void *)uint64_t v262 = v287;
      *(_OWORD *)&v262[24] = v289;
      *(_DWORD *)&v262[40] = v290;
      long long v263 = 0uLL;
      __asm { FMOV            V0.2D, #1.0 }
      long long v264 = _Q0;
      _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi5_((uint64_t)&v261);
      goto LABEL_50;
    case 7:
      char v222 = *v3;
      double v232 = (uint64_t *)v20;
      unint64_t v233 = v23;
      uint64_t v226 = v15;
      uint64_t v227 = v18;
      unsigned int v231 = (uint64_t *)v17;
      v234 = (uint64_t *)v22;
      uint64_t v235 = v19;
      uint64_t v228 = v21;
      uint64_t v81 = *(void *)(a1 + 40);
      uint64_t v82 = *(void *)(a1 + 32);
      *(void *)&long long v247 = v81;
      *(void *)&long long v248 = v82;
      if (v82 == 1)
      {
        uint64_t v83 = *(void *)(a1 + 16);
        uint64_t v82 = *(void *)(v83 + 48);
        uint64_t v81 = *(void *)(v83 + 56);
        swift_retain();
        swift_retain();
      }
      uint64_t v245 = v81;
      uint64_t v246 = v82;
      uint64_t v84 = type metadata accessor for Text.Style(0);
      uint64_t v85 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v84 - 8) + 56);
      v85(v8, 1, 1, v84);
      int v86 = *MEMORY[0x263F288F8];
      *(void *)(v11 + 16) = 0;
      uint64_t v87 = v11 + *(int *)(v9 + 24);
      v85((char *)v87, 1, 1, v84);
      uint64_t v88 = *(int *)(v9 + 28);
      *(_DWORD *)(v11 + v88) = v86;
      *(unsigned char *)(v11 + *(int *)(v9 + 32)) = 8;
      *(unsigned char *)(v11 + *(int *)(v9 + 36)) = 3;
      *(unsigned char *)(v11 + *(int *)(v9 + 40)) = 1;
      uint64_t v89 = v245;
      *(void *)uint64_t v11 = v246;
      *(void *)(v11 + 8) = v89;
      outlined copy of GraphicsContext.Shading.Storage(v222, (char)v226, v227, (uint64_t)v231, (uint64_t)v232, v235, (uint64_t)v234, v228, v233, 7);
      outlined copy of EnvironmentValues?(v248);
      outlined assign with take of Text.Style?((uint64_t)v8, v87);
      *(_DWORD *)(v11 + v88) = v86;
      outlined init with take of ImageResolutionContext(v11, v14);
      uint64_t v90 = *(int *)(v9 + 40);
      if (*(unsigned char *)(v14 + v90)) {
        *(unsigned char *)(v14 + v90) &= ~1u;
      }
      uint64_t v91 = v222;
      (*(void (**)(long long *__return_ptr, uint64_t))(*v222 + 80))(&v261, v14);
      outlined consume of GraphicsContext.Shading.Storage(v91, (char)v226, v227, (uint64_t)v231, (uint64_t)v232, v235, (uint64_t)v234, v228, v233, 7);
      outlined destroy of ImageResolutionContext(v14, (uint64_t (*)(void))type metadata accessor for ImageResolutionContext);
      long long v274 = v267;
      long long v275 = v268;
      v276[0] = *(_OWORD *)v269;
      *(_DWORD *)((char *)v276 + 15) = *(_DWORD *)&v269[15];
      v270[4] = v263;
      long long v271 = v264;
      long long v272 = v265;
      long long v273 = v266;
      v270[0] = v261;
      v270[1] = *(_OWORD *)v262;
      v270[2] = *(_OWORD *)&v262[16];
      v270[3] = *(_OWORD *)&v262[32];
      uint64_t v92 = v261;
      uint64_t v93 = *(void *)&v262[16];
      char v94 = v262[24];
      uint64_t v95 = *(void *)((char *)&v270[2] + 12);
      uint64_t v96 = *(_OWORD *)&v262[32] >> 32;
      char v97 = v262[44];
      long long v247 = v263;
      long long v248 = *(_OWORD *)v262;
      long long v98 = v264;
      char v99 = v265;
      LODWORD(v246) = BYTE1(v265);
      LODWORD(v245) = WORD1(v265);
      char v100 = BYTE8(v261);
      outlined copy of GraphicsImage.Contents?((id)v261, SBYTE8(v261));
      outlined release of Image.Resolved((uint64_t)v270);
      LOBYTE(v250[0]) = v97;
      *(void *)v277 = v92;
      v277[8] = v100;
      *(_OWORD *)&v277[16] = v248;
      *(void *)&v277[32] = v93;
      v277[40] = v94;
      *(void *)&v277[44] = v95;
      *(void *)&v277[52] = v96;
      v277[60] = v97;
      *(_OWORD *)&v277[64] = v247;
      *(_OWORD *)&v277[80] = v98;
      LOBYTE(v278) = v99;
      BYTE1(v278) = v246;
      WORD1(v278) = v245;
      *((void *)&v278 + 1) = v226;
      uint64_t v279 = v227;
      uint64_t v280 = (uint64_t)v231;
      uint64_t v281 = (uint64_t)v232;
      uint64_t v282 = v235;
      uint64_t v283 = (uint64_t)v234;
      uint64_t v284 = v228;
      _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi6_((uint64_t)v277);
      outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v277, (uint64_t)&v285);
      _ViewInputs.base.modify(&v285, v101);
      long long v102 = &v285;
      return (void *)outlined init with take of GraphicsContext.ResolvedShading?((uint64_t)v102, (uint64_t)v239, &lazy cache variable for type metadata for GraphicsContext.ResolvedShading?);
    case 8:
      int64_t v103 = v16[2];
      if (v103 >= a2) {
        uint64_t v104 = a2;
      }
      else {
        uint64_t v104 = v16[2];
      }
      if (v104 > 1)
      {
        *(void *)&long long v248 = v16 + 4;
        unint64_t v105 = (2 * v104) | 1;
        uint64_t v106 = v23;
        uint64_t v107 = v22;
        v234 = (uint64_t *)v22;
        uint64_t v235 = v19;
        uint64_t v108 = v20;
        uint64_t v109 = v17;
        uint64_t v110 = v18;
        char v111 = (char)v15;
        uint64_t v112 = v21;
        outlined copy of GraphicsContext.Shading.Storage(v16, (char)v15, v18, v17, v20, v19, v107, v21, v23, 8);
        swift_retain();
        uint64_t v113 = specialized Sequence.compactMap<A>(_:)((uint64_t)v16, v248, 0, v105, a1);
        swift_release();
        outlined consume of GraphicsContext.Shading.Storage(v16, v111, v110, v109, v108, v235, (uint64_t)v234, v112, v106, 8);
        uint64_t v114 = *(void *)(v113 + 16);
        if (v114 == 1)
        {
          outlined init with take of GraphicsContext.ResolvedShading(v113 + 32, (uint64_t)&v261);
          outlined retain of GraphicsContext.ResolvedShading(&v261, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of GraphicsContext.ResolvedShading);
          swift_bridgeObjectRelease();
        }
        else
        {
          if (!v114)
          {
            swift_bridgeObjectRelease();
            _s7SwiftUI15GraphicsContextV15ResolvedShadingOSgWOi0_((uint64_t)v270);
            goto LABEL_51;
          }
          *(void *)&long long v261 = v113;
          _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi7_((uint64_t)&v261);
        }
        goto LABEL_50;
      }
      if (v103)
      {
        CGFloat v155 = (void *)v16[4];
        uint64_t v156 = v16[5];
        uint64_t v157 = v16[6];
        uint64_t v158 = v16[7];
        uint64_t v159 = (*v3)[8];
        uint64_t v160 = (*v3)[9];
        uint64_t v161 = (*v3)[10];
        uint64_t v162 = (*v3)[11];
        uint64_t v163 = (*v3)[12];
        char v164 = *((unsigned char *)*v3 + 104);
        *(void *)&long long v248 = v155;
        *(void *)&v270[0] = v155;
        uint64_t v246 = v161;
        *(void *)&long long v247 = v156;
        *((void *)&v270[0] + 1) = v156;
        *(void *)&v270[1] = v157;
        *((void *)&v270[1] + 1) = v158;
        *(void *)&v270[2] = v159;
        *((void *)&v270[2] + 1) = v160;
        *(void *)&v270[3] = v161;
        uint64_t v245 = v162;
        *((void *)&v270[3] + 1) = v162;
        *(void *)&v270[4] = v163;
        BYTE8(v270[4]) = v164;
        outlined copy of GraphicsContext.Shading.Storage(v155, v156, v157, v158, v159, v160, v161, v162, v163, v164);
        GraphicsContext.Shading.resolve(in:levels:)(v239, a1, a2);
        return outlined consume of GraphicsContext.Shading.Storage((void *)v248, v247, v157, v158, v159, v160, v246, v245, v163, v164);
      }
      __break(1u);
      goto LABEL_115;
    case 9:
      outlined init with take of GraphicsContext.ResolvedShading((uint64_t)(v16 + 2), (uint64_t)&v261);
      outlined init with take of GraphicsContext.ResolvedShading((uint64_t)&v261, (uint64_t)v270);
      _ViewInputs.base.modify(v270, v115);
      outlined init with take of GraphicsContext.ResolvedShading?((uint64_t)v270, (uint64_t)v239, &lazy cache variable for type metadata for GraphicsContext.ResolvedShading?);
      return outlined retain of GraphicsContext.ResolvedShading(&v261, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of GraphicsContext.ResolvedShading);
    case 0xA:
      if (a2 == 1) {
        goto LABEL_101;
      }
      uint64_t v117 = *(void *)(a1 + 32);
      if (v117 == 1)
      {
        uint64_t v118 = *(void *)(a1 + 16);
        uint64_t v119 = *(void *)(v118 + 48);
        uint64_t v120 = *(void *)(v118 + 56);
        swift_retain();
        swift_retain();
      }
      else
      {
        uint64_t v120 = *(void *)(a1 + 40);
        uint64_t v119 = *(void *)(a1 + 32);
      }
      outlined copy of EnvironmentValues?(v117);
      swift_retain();
      swift_retain();
      char v212 = specialized ShapeStyle.isMultiLevel(in:)(v119, v120);
      swift_release_n();
      swift_release_n();
      if ((v212 & 1) == 0)
      {
LABEL_101:
        uint64_t v213 = *(void *)(a1 + 16);
        uint64_t v214 = *(void *)(a1 + 32);
        if (v214 == 1)
        {
          uint64_t v215 = *(void *)(v213 + 48);
          uint64_t v216 = *(void *)(v213 + 56);
          swift_retain();
          swift_retain();
        }
        else
        {
          uint64_t v216 = *(void *)(a1 + 40);
          uint64_t v215 = *(void *)(a1 + 32);
        }
        *(void *)&long long v261 = v215;
        *((void *)&v261 + 1) = v216;
        outlined copy of EnvironmentValues?(v214);
        GraphicsContext.Storage.Shared.resolvedForeground(in:)((uint64_t *)&v261, (uint64_t)v270);
        swift_release();
        swift_release();
        outlined init with take of GraphicsContext.ResolvedShading((uint64_t)v270, (uint64_t)&v285);
        outlined init with take of GraphicsContext.ResolvedShading((uint64_t)&v285, (uint64_t)&v261);
        _ViewInputs.base.modify(&v261, v217);
        long long v102 = (uint64_t ***)&v261;
        return (void *)outlined init with take of GraphicsContext.ResolvedShading?((uint64_t)v102, (uint64_t)v239, &lazy cache variable for type metadata for GraphicsContext.ResolvedShading?);
      }
      if (one-time initialization token for shared != -1) {
        goto LABEL_118;
      }
      goto LABEL_99;
    default:
      *(void *)&long long v261 = *v3;
      *((void *)&v261 + 1) = v15;
      _s7SwiftUI15GraphicsContextV15ResolvedShadingOWOi_((uint64_t)&v261);
      goto LABEL_50;
  }
}

void *destroy for GraphicsContext.Shading(uint64_t a1)
{
  return outlined consume of GraphicsContext.Shading.Storage(*(void **)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(unsigned char *)(a1 + 72));
}

void *outlined consume of GraphicsContext.Shading.Storage(void *result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  switch(a10)
  {
    case 1:
    case 4:
    case 7:
    case 9:
      return (void *)swift_release();
    case 3:

      swift_bridgeObjectRelease();
      goto LABEL_10;
    case 5:
      char v10 = a2 & 1;
      return (void *)outlined consume of EitherGradient((uint64_t)result, v10);
    case 6:
      swift_release();
      swift_bridgeObjectRelease();
      goto LABEL_10;
    case 8:
LABEL_10:
      double result = (void *)swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

void type metadata accessor for CGRect?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void _sSo6CGRectVSgMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t outlined copy of EnvironmentValues?(uint64_t result)
{
  if (result != 1)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

void *outlined copy of GraphicsContext.Shading.Storage(void *result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  switch(a10)
  {
    case 1:
    case 4:
    case 7:
    case 9:
      return (void *)swift_retain();
    case 3:
      id v10 = result;
      swift_bridgeObjectRetain();
      goto LABEL_10;
    case 5:
      char v11 = a2 & 1;
      return (void *)outlined copy of EitherGradient((uint64_t)result, v11);
    case 6:
      swift_bridgeObjectRetain();
      swift_retain();
      goto LABEL_10;
    case 8:
LABEL_10:
      double result = (void *)swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t _s7SwiftUI15GraphicsContextV15ResolvedShadingOSgWOg(uint64_t a1)
{
  unsigned int v1 = (*(void *)(a1 + 96) >> 11) & 0x1F80 | ((unsigned __int16)*(void *)(a1 + 96) >> 9) | (*(void *)(a1 + 96) >> 19) & 0xFFFFE000;
  if (v1 > 0x80000000) {
    return -v1;
  }
  else {
    return 0;
  }
}

void Image.Resolved.init(image:decorative:label:basePlatformItemImage:backgroundShape:backgroundCornerRadius:)(uint64_t *a1@<X0>, char a2@<W1>, long long *a3@<X2>, uint64_t a4@<X3>, unsigned __int8 *a5@<X4>, double a6@<X5>, char a7@<W6>, uint64_t a8@<X8>)
{
  uint64_t v9 = *a1;
  int v10 = *((unsigned __int8 *)a1 + 8);
  long long v11 = *((_OWORD *)a1 + 1);
  uint64_t v12 = a1[4];
  char v13 = *((unsigned char *)a1 + 40);
  long long v14 = *(_OWORD *)((char *)a1 + 44);
  __int16 v15 = *((unsigned __int8 *)a1 + 60);
  long long v16 = *((_OWORD *)a1 + 4);
  long long v17 = *((_OWORD *)a1 + 5);
  char v18 = *((unsigned char *)a1 + 96);
  char v19 = *((unsigned char *)a1 + 97);
  char v20 = *((unsigned char *)a1 + 98);
  char v21 = *((unsigned char *)a1 + 99);
  long long v22 = *a3;
  long long v23 = a3[1];
  int v24 = *a5;
  if (v10 == 255)
  {
    char v34 = 0;
    __int16 v33 = 0;
    uint64_t v32 = 0;
  }
  else if (v10 == 2)
  {
    uint64_t v25 = *(void **)(v9 + 32);
    uint64_t v26 = *(void **)(v9 + 48);
    uint64_t v51 = a4;
    double v50 = a6;
    char v48 = a7;
    char v49 = a2;
    long long v47 = *((_OWORD *)a1 + 1);
    char v46 = *((unsigned char *)a1 + 40);
    long long v44 = *((_OWORD *)a1 + 4);
    long long v45 = *(_OWORD *)((char *)a1 + 44);
    long long v42 = *a3;
    long long v43 = *((_OWORD *)a1 + 5);
    long long v41 = a3[1];
    char v39 = *((unsigned char *)a1 + 98);
    char v40 = *((unsigned char *)a1 + 97);
    char v38 = *((unsigned char *)a1 + 99);
    id v27 = *(id *)(v9 + 16);
    outlined copy of Image.Location(v25);
    id v28 = v26;
    id v29 = v27;
    outlined copy of Image.Location(v25);
    id v30 = v28;
    __int16 v31 = (unsigned __int16)objc_msgSend(v29, sel_styleMask);
    uint64_t v52 = v25;
    outlined copy of Image.Location(v25);
    _ShapeStyle_ResolverMode.init(rbSymbolStyleMask:location:)(v31, &v52, (uint64_t)&v53);

    outlined consume of Image.Location(v25);
    outlined consume of Image.Location(v25);

    char v21 = v38;
    char v20 = v39;
    char v19 = v40;
    long long v23 = v41;
    long long v22 = v42;
    long long v17 = v43;
    long long v16 = v44;
    long long v14 = v45;
    char v13 = v46;
    long long v11 = v47;
    a7 = v48;
    a2 = v49;
    a6 = v50;
    a4 = v51;
    uint64_t v32 = v53;
    __int16 v33 = v54;
    char v34 = v55 & 0xFD;
  }
  else
  {
    char v34 = 0;
    uint64_t v32 = 0;
    __int16 v33 = v15 ^ 1;
  }
  LOBYTE(v53) = v15;
  LOBYTE(v52) = a7 & 1;
  char v35 = v34 | (2 * (v24 != 3));
  *(void *)a8 = v9;
  float v36 = a6;
  float v37 = v36;
  *(unsigned char *)(a8 + 8) = v10;
  if (a7) {
    float v37 = 0.0;
  }
  *(_OWORD *)(a8 + 16) = v11;
  *(void *)(a8 + 32) = v12;
  *(unsigned char *)(a8 + 40) = v13;
  *(_OWORD *)(a8 + 44) = v14;
  *(unsigned char *)(a8 + 60) = v15;
  *(_OWORD *)(a8 + 64) = v16;
  *(_OWORD *)(a8 + 80) = v17;
  *(unsigned char *)(a8 + 96) = v18;
  *(unsigned char *)(a8 + 97) = v19;
  *(unsigned char *)(a8 + 98) = v20;
  *(unsigned char *)(a8 + 99) = v21;
  *(_OWORD *)(a8 + 104) = v22;
  *(_OWORD *)(a8 + 120) = v23;
  *(void *)(a8 + 136) = a4;
  *(void *)(a8 + 144) = 0;
  *(unsigned char *)(a8 + 152) = a2 & 1;
  *(unsigned char *)(a8 + 153) = v24;
  *(float *)(a8 + 156) = v37;
  *(unsigned char *)(a8 + 160) = (_BYTE)v52;
  *(void *)(a8 + 168) = v32;
  *(_WORD *)(a8 + 176) = v33;
  *(unsigned char *)(a8 + 178) = v35;
}

id outlined copy of Image.Location(id result)
{
  if ((unint64_t)result >= 2) {
    return result;
  }
  return result;
}

void *_ShapeStyle_ResolverMode.init(rbSymbolStyleMask:location:)@<X0>(__int16 a1@<W0>, void **a2@<X1>, uint64_t a3@<X8>)
{
  double result = *a2;
  if ((a1 & 0x200) != 0)
  {
    char v6 = 4;
    if ((unint64_t)result > 1) {
      goto LABEL_5;
    }
  }
  else
  {
    char v6 = 0;
  }
  outlined consume of Image.Location(result);
  double result = 0;
LABEL_5:
  if ((a1 & 0x100) != 0)
  {
    uint64_t v8 = 4;
LABEL_16:
    __int16 v7 = v8 + 1;
    v6 |= v8 != 0;
    goto LABEL_17;
  }
  if ((a1 & 0x80) != 0)
  {
    uint64_t v8 = 3;
    goto LABEL_16;
  }
  if ((a1 & 0x40) != 0)
  {
    uint64_t v8 = 2;
    goto LABEL_16;
  }
  if ((a1 & 0x20) != 0)
  {
    uint64_t v8 = 1;
    goto LABEL_16;
  }
  if (a1)
  {
    uint64_t v8 = 0;
    goto LABEL_16;
  }
  __int16 v7 = 0;
LABEL_17:
  *(void *)a3 = result;
  *(_WORD *)(a3 + 8) = v7;
  *(unsigned char *)(a3 + 10) = v6;
  return result;
}

void outlined consume of Image.Location(id a1)
{
  if ((unint64_t)a1 >= 2) {
}
  }

void *GraphicsImage.updateSymbolEffects(_:environment:transaction:animationsDisabled:)(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v5 = 0;
  if (v4[8] == 2)
  {
    char v6 = v4;
    uint64_t v10 = *a2;
    long long v11 = *(void **)v4;
    uint64_t v5 = *(void **)(*(void *)v4 + 16);
    uint64_t v12 = *(void **)(*(void *)v4 + 32);
    char v24 = *(unsigned char *)(*(void *)v4 + 44);
    char v25 = *(unsigned char *)(*(void *)v4 + 24);
    char v27 = *(unsigned char *)(*(void *)v4 + 45);
    char v13 = *(void **)(*(void *)v4 + 48);
    uint64_t v26 = v13;
    if (a2[1])
    {
      id v14 = v5;
      outlined copy of Image.Location(v12);
      swift_retain_n();
      swift_retain_n();
      id v15 = v13;
      uint64_t v16 = specialized PropertyList.Tracker.value<A>(_:for:)(v10);
      swift_release_n();
    }
    else
    {
      swift_retain_n();
      id v17 = v5;
      outlined copy of Image.Location(v12);
      id v18 = v13;
      uint64_t v19 = swift_retain_n();
      uint64_t v16 = specialized closure #1 in PropertyList.subscript.getter(v19);
      swift_bridgeObjectRetain();
    }
    swift_release_n();
    RBSymbolAnimator.updateSymbolEffects(_:effects:transaction:animationsDisabled:)(a1, v16, a3, a4 & 1);
    swift_bridgeObjectRelease();
    unsigned int v20 = objc_msgSend(v5, sel_version);
    char v21 = v24 & ~*(unsigned char *)(a1 + 41);
    uint64_t v22 = swift_allocObject();
    *(void *)(v22 + 16) = v5;
    *(unsigned char *)(v22 + 24) = v25;
    *(void *)(v22 + 32) = v12;
    *(_DWORD *)(v22 + 40) = v20;
    *(unsigned char *)(v22 + 44) = v21;
    *(unsigned char *)(v22 + 45) = v27;
    *(void *)(v22 + 48) = v26;
    outlined consume of GraphicsImage.Contents?(v11, 2);
    *(void *)char v6 = v22;
    v6[8] = 2;
  }
  return v5;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<LocaleKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<LocaleKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<LocaleKey>, (uint64_t)&type metadata for LocaleKey, (uint64_t)&protocol witness table for LocaleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<LocaleKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<LocaleKey>>);
    }
  }
}

uint64_t CatalogKey.init(_:)@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, &v14);
    swift_release_n();
    swift_release_n();
    char v4 = v14;
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, &v14);
    swift_release_n();
    uint64_t result = swift_release_n();
    char v6 = v14;
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ColorSchemeKey>);
    BloomFilter.init(hashValue:)(v7);
    uint64_t v8 = swift_retain_n();
    uint64_t v9 = specialized find1<A>(_:key:filter:)(v8, v13);
    if (v9) {
      char v4 = *(unsigned char *)(v9 + 72);
    }
    else {
      char v4 = 0;
    }
    swift_release_n();
    type metadata accessor for EnvironmentPropertyKey<ColorSchemeKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ColorSchemeContrastKey>);
    BloomFilter.init(hashValue:)(v10);
    uint64_t v11 = swift_retain_n();
    uint64_t v12 = specialized find1<A>(_:key:filter:)(v11, v13);
    if (v12) {
      char v6 = *(unsigned char *)(v12 + 72);
    }
    else {
      char v6 = 0;
    }
    uint64_t result = swift_release_n();
  }
  *a2 = v4;
  a2[1] = v6;
  return result;
}

void type metadata accessor for DerivedValue<DerivedEnvironmentPropertyKey<EnvironmentValues.EffectiveSymbolFontKey>>()
{
  if (!lazy cache variable for type metadata for DerivedValue<DerivedEnvironmentPropertyKey<EnvironmentValues.EffectiveSymbolFontKey>>)
  {
    type metadata accessor for DerivedEnvironmentPropertyKey<CUIDesignLibraryCacheKey.Props>(255, &lazy cache variable for type metadata for DerivedEnvironmentPropertyKey<EnvironmentValues.EffectiveSymbolFontKey>, (void (*)(void))lazy protocol witness table accessor for type EnvironmentValues.EffectiveSymbolFontKey and conformance EnvironmentValues.EffectiveSymbolFontKey);
    lazy protocol witness table accessor for type DerivedEnvironmentPropertyKey<CUIDesignLibraryCacheKey.Props> and conformance DerivedEnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type DerivedEnvironmentPropertyKey<EnvironmentValues.EffectiveSymbolFontKey> and conformance DerivedEnvironmentPropertyKey<A>, &lazy cache variable for type metadata for DerivedEnvironmentPropertyKey<EnvironmentValues.EffectiveSymbolFontKey>, (void (*)(void))lazy protocol witness table accessor for type EnvironmentValues.EffectiveSymbolFontKey and conformance EnvironmentValues.EffectiveSymbolFontKey);
    unint64_t v0 = type metadata accessor for DerivedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DerivedValue<DerivedEnvironmentPropertyKey<EnvironmentValues.EffectiveSymbolFontKey>>);
    }
  }
}

uint64_t RBSymbolAnimator.updateSymbolEffects(_:effects:transaction:animationsDisabled:)(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5 = v4;
  uint64_t v6 = result;
  uint64_t v7 = *(void *)result;
  if (!*(void *)(*(void *)result + 16)
    && !*(_DWORD *)(result + 8)
    && (*(unsigned char *)(result + 41) & 1) == 0
    && !*(void *)(a2 + 16))
  {
    return result;
  }
  AGGraphClearUpdate();
  AGGraphGetValue();
  uint64_t v8 = swift_retain_n();
  int v164 = specialized closure #1 in PropertyList.subscript.getter(v8);
  swift_release();
  uint64_t v9 = swift_retain();
  uint64_t v10 = specialized find<A>(_:key:)(v9);
  if (v10)
  {
    uint64_t v170 = *(void *)(v10 + 72);
    swift_retain();
  }
  else
  {
    uint64_t v170 = 0;
  }
  swift_release();
  uint64_t v11 = swift_retain();
  uint64_t v12 = specialized find<A>(_:key:)(v11);
  if (v12)
  {
    uint64_t v169 = *(void *)(v12 + 72);
    swift_retain();
  }
  else
  {
    uint64_t v169 = 0;
  }
  swift_release_n();
  uint64_t result = AGGraphSetUpdate();
  int v13 = *(_DWORD *)(v6 + 16);
  float v14 = *(float *)(v6 + 20);
  char v15 = *(unsigned char *)(v6 + 24);
  char v16 = *(unsigned char *)(v6 + 32);
  int v168 = *(_DWORD *)(v6 + 36);
  char v17 = *(unsigned char *)(v6 + 40);
  int v18 = *(_DWORD *)(v6 + 44);
  float v19 = *(float *)(v6 + 48);
  char v20 = *(unsigned char *)(v6 + 52);
  int v166 = *(_DWORD *)(v6 + 28);
  int v167 = *(_DWORD *)(v6 + 56);
  char v21 = *(unsigned char *)(v6 + 60);
  unsigned __int8 v208 = *(unsigned char *)(v6 + 12);
  char v207 = v15;
  char v206 = v16;
  char v205 = v17;
  unsigned __int8 v204 = 0;
  char v203 = v20;
  char v202 = v21;
  char v201 = 0;
  unint64_t v22 = *(void *)(v7 + 16);
  if (v22 < 0x41)
  {
    uint64_t v23 = MEMORY[0x263F8EE78];
  }
  else
  {
    if (__OFADD__(v22, 63)) {
      goto LABEL_175;
    }
    uint64_t v23 = specialized Array.init(repeating:count:)(0, (v22 + 63) >> 6);
  }
  BOOL v200 = v22 > 0x40;
  uint64_t result = a2;
  char v24 = &selRef_start;
  uint64_t v186 = *(void *)(a2 + 16);
  if (!v186)
  {
    uint64_t v182 = 0;
    unsigned int v172 = 0;
    uint64_t v193 = (void *)MEMORY[0x263F8EE78];
    uint64_t v125 = v22;
    if (!v22) {
      goto LABEL_152;
    }
    goto LABEL_140;
  }
  int v165 = v13;
  uint64_t v173 = (void *)v23;
  id v171 = v4;
  uint64_t v185 = v6;
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v182 = 0;
  unsigned int v172 = 0;
  uint64_t v25 = 0;
  uint64_t v193 = (void *)MEMORY[0x263F8EE78];
  float v26 = 0.0;
  unint64_t v162 = v22;
  unint64_t v178 = v22;
  while (2)
  {
    uint64_t v27 = a2 + 32 + (v25 << 6);
    uint64_t v28 = *(void *)v27;
    uint64_t v29 = *(void *)(v27 + 8);
    uint64_t v31 = *(void *)(v27 + 16);
    uint64_t v30 = *(void *)(v27 + 24);
    uint64_t v32 = *(void *)(v27 + 32);
    unsigned int v33 = *(unsigned __int16 *)(v27 + 40);
    int v35 = *(_DWORD *)(v27 + 44);
    float v34 = *(float *)(v27 + 48);
    int v189 = *(unsigned __int8 *)(v27 + 52);
    int v36 = *(_DWORD *)(v27 + 56);
    char v37 = *(unsigned char *)(v27 + 60);
    unsigned int v38 = v33 >> 12;
    if (v33 >> 12 >= 6)
    {
      unint64_t v39 = 0xF000000000000006;
      if (v38 != 8)
      {
        if (v38 == 7)
        {
          char v205 = BYTE4(v31) & 1;
          unsigned __int8 v204 = BYTE5(v31) & 1;
          char v203 = v189;
          char v202 = v37;
          int v167 = v36;
          int v168 = v31;
          int v18 = v35;
          float v19 = v34;
        }
        else
        {
          unsigned __int8 v208 = BYTE4(v31) & 1;
          char v207 = v189;
          unsigned int v172 = v31;
          int v165 = v35;
          float v14 = v34;
          int v166 = v36;
          char v206 = v37;
        }
        goto LABEL_19;
      }
    }
    else
    {
      outlined copy of _SymbolEffect.Storage(v31, v30, v32, v33);
      uint64_t result = outlined copy of _SymbolEffect.Storage(v31, v30, v32, v33);
      unint64_t v39 = v31;
    }
    unint64_t v40 = *(void *)(*(void *)v185 + 16);
    uint64_t v190 = v32;
    uint64_t v191 = v39;
    if (!v40)
    {
      int v44 = 1;
      if (a4) {
        goto LABEL_55;
      }
      goto LABEL_35;
    }
    char v187 = v37;
    unint64_t v41 = 0;
    long long v42 = (float *)(*(void *)v185 + 80);
    do
    {
      if (*((void *)v42 - 6) == v28 && *((void *)v42 - 5) == v29)
      {
        if (v41 >= v40) {
          goto LABEL_173;
        }
        int v177 = v36;
        uint64_t v51 = *((void *)v42 - 4);
        uint64_t v52 = *((void *)v42 - 3);
        uint64_t v53 = *((void *)v42 - 2);
        unsigned int v54 = *((unsigned __int16 *)v42 - 4);
        int v179 = *((_DWORD *)v42 - 1);
        float v55 = *v42;
        *(void *)&long long v183 = v51;
        *((void *)&v183 + 1) = v52;
        if (v200)
        {
          outlined copy of _SymbolEffect.Storage(v51, v52, v53, v54);
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v173);
            uint64_t v173 = (void *)result;
          }
          if (v41 >> 6 >= v173[2]) {
            goto LABEL_174;
          }
          v173[(v41 >> 6) + 4] |= 1 << (v41 & 0x3F);
        }
        else
        {
          uint64_t v56 = 1 << v41;
          if (v41 >= 0x40) {
            uint64_t v56 = 0;
          }
          v182 |= v56;
          outlined copy of _SymbolEffect.Storage(v51, v52, v53, v54);
        }
        --v178;
        char v37 = v187;
        unsigned int v180 = v33;
        uint64_t v174 = v30;
        unsigned int v175 = v54 >> 12;
        if ((~v191 & 0xF000000000000006) == 0)
        {
          *(void *)&long long v197 = v31;
          *((void *)&v197 + 1) = v30;
          uint64_t v198 = v190;
          LOWORD(v199) = v33;
          long long v194 = v183;
          uint64_t v195 = v53;
          __int16 v196 = v54;
          char v57 = specialized static _SymbolEffect.Storage.== infix(_:_:)((uint64_t)&v197, (uint64_t)&v194);
          int v60 = v179;
          if ((v57 & 1) == 0) {
            goto LABEL_52;
          }
LABEL_115:
          if (v60)
          {
            uint64_t v119 = *((void *)&v183 + 1);
            if (v55 != v26)
            {
              *(float *)&double v59 = v26;
              objc_msgSend(v171, sel_setPriority_ofAnimationWithID_, v59);
              float v55 = v26;
            }
            float v26 = v26 + 1.0;
          }
          else
          {
            uint64_t v119 = *((void *)&v183 + 1);
          }
          uint64_t v120 = v183;
          switch(v58)
          {
            case 1:
              uint64_t v121 = v191;
              outlined copy of _SymbolEffect.Trigger?(v191);
              outlined consume of _SymbolEffect.Storage(v183, v119, v53, v54);
              uint64_t v53 = 0;
              v119 &= 0x1FFFFFFFFuLL;
              LOWORD(v54) = 4096;
              goto LABEL_127;
            case 2:
              uint64_t v121 = v191;
              outlined copy of _SymbolEffect.Trigger?(v191);
              outlined consume of _SymbolEffect.Storage(v183, v119, v53, v54);
              uint64_t v53 = 0;
              v119 &= 0x1FFFFFFFFuLL;
              LOWORD(v54) = 0x2000;
              goto LABEL_127;
            case 3:
              uint64_t v121 = v191;
              outlined copy of _SymbolEffect.Trigger?(v191);
              outlined consume of _SymbolEffect.Storage(v183, v119, v53, v54);
              v53 &= 0xFFFFFFFF00000001;
              LOWORD(v54) = v54 & 0x101 | 0x3000;
              goto LABEL_127;
            case 4:
              uint64_t v121 = v191;
              outlined copy of _SymbolEffect.Trigger?(v191);
              outlined consume of _SymbolEffect.Storage(v183, v119, v53, v54);
              uint64_t v53 = 0;
              v119 &= 0x1FFFFFFFFuLL;
              LOWORD(v54) = 0x4000;
              goto LABEL_127;
            case 5:
              uint64_t v121 = v191;
              outlined copy of _SymbolEffect.Trigger?(v191);
              outlined consume of _SymbolEffect.Storage(v183, v119, v53, v54);
              uint64_t v53 = 0;
              uint64_t v119 = v119;
              LOWORD(v54) = 20480;
LABEL_127:
              uint64_t v120 = v121;
              break;
            case 6:
            case 7:
            case 8:
              break;
            default:
              outlined copy of _SymbolEffect.Trigger?(v191);
              outlined consume of _SymbolEffect.Storage(v183, v119, v53, v54);
              uint64_t v53 = 0;
              LOWORD(v54) = 0;
              uint64_t v120 = v191;
              v119 &= 1u;
              break;
          }
          outlined copy of _SymbolEffect.Storage(v120, v119, v53, v54);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v193 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v193[2] + 1, 1, v193);
          }
          unint64_t v123 = v193[2];
          unint64_t v122 = v193[3];
          if (v123 >= v122 >> 1) {
            uint64_t v193 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v122 > 1), v123 + 1, 1, v193);
          }
          v193[2] = v123 + 1;
          long long v124 = &v193[7 * v123];
          v124[4] = v28;
          v124[5] = v29;
          v124[6] = v120;
          v124[7] = v119;
          v124[8] = v53;
          *((_WORD *)v124 + 36) = v54;
          *((_DWORD *)v124 + 19) = v179;
          *((float *)v124 + 20) = v55;
          outlined consume of _SymbolEffect.Trigger?(v191);
          outlined consume of _SymbolEffect.Storage(v31, v174, v190, v180);
          uint64_t result = outlined consume of _SymbolEffect.Storage(v120, v119, v53, v54);
          goto LABEL_19;
        }
        switch(v54 >> 12)
        {
          case 1u:
            uint64_t v66 = v183;
            outlined copy of _SymbolEffect.Trigger?(v183);
            outlined copy of _SymbolEffect.Trigger?(v183);
            if (v38 == 1) {
              goto LABEL_97;
            }
            goto LABEL_100;
          case 2u:
            uint64_t v66 = v183;
            outlined copy of _SymbolEffect.Trigger?(v183);
            outlined copy of _SymbolEffect.Trigger?(v183);
            if (v38 != 2) {
              goto LABEL_100;
            }
            goto LABEL_97;
          case 3u:
            uint64_t v66 = v183;
            outlined copy of _SymbolEffect.Trigger?(v183);
            outlined copy of _SymbolEffect.Trigger?(v183);
            if (v38 != 3) {
              goto LABEL_100;
            }
            goto LABEL_97;
          case 4u:
            uint64_t v66 = v183;
            outlined copy of _SymbolEffect.Trigger?(v183);
            outlined copy of _SymbolEffect.Trigger?(v183);
            if (v38 != 4) {
              goto LABEL_100;
            }
            goto LABEL_97;
          case 5u:
            uint64_t v66 = v183;
            outlined copy of _SymbolEffect.Trigger?(v183);
            outlined copy of _SymbolEffect.Trigger?(v183);
            if (v38 != 5) {
              goto LABEL_100;
            }
            goto LABEL_97;
          case 6u:
            uint64_t v66 = v183;
            goto LABEL_100;
          case 7u:
            uint64_t v66 = v183;
            goto LABEL_100;
          case 8u:
            uint64_t v66 = v183;
            if (v38 == 8 && !(v30 | v31 | v190) && v180 == 0x8000) {
              goto LABEL_97;
            }
            goto LABEL_100;
          default:
            uint64_t v66 = v183;
            outlined copy of _SymbolEffect.Trigger?(v183);
            outlined copy of _SymbolEffect.Trigger?(v183);
            if (!v38)
            {
LABEL_97:
              outlined copy of _SymbolEffect.Storage(v31, v30, v190, v180);
              outlined copy of _SymbolEffect.Trigger?(v191);
              outlined consume of _SymbolEffect.Storage(v66, *((uint64_t *)&v183 + 1), v53, v54);
              outlined consume of _SymbolEffect.Storage(v31, v30, v190, v180);
              outlined consume of _SymbolEffect.Storage(v66, *((uint64_t *)&v183 + 1), v53, v54);
              if (v175 >= 6)
              {
                if (v175 == 6) {
                  goto LABEL_103;
                }
                uint64_t v116 = v191;
              }
              else
              {
                if ((~v66 & 0xF000000000000006) == 0)
                {
                  outlined consume of _SymbolEffect.Storage(v66, *((uint64_t *)&v183 + 1), v53, v54);
LABEL_103:
                  outlined consume of _SymbolEffect.Trigger?(v191);
                  int v60 = v179;
                  goto LABEL_115;
                }
                if (v66 < 0)
                {
                  uint64_t v117 = v191;
                  if (v191 < 0)
                  {
                    outlined consume of _SymbolEffect.Trigger(v66);
                    outlined consume of _SymbolEffect.Trigger(v191);
                    outlined consume of _SymbolEffect.Storage(v66, *((uint64_t *)&v183 + 1), v53, v54);
                    outlined consume of _SymbolEffect.Trigger?(v191);
                    char v37 = v187;
                    int v60 = v179;
                    if (v66) {
                      goto LABEL_115;
                    }
                    int v58 = v191;
                    if ((v191 & 1) == 0) {
                      goto LABEL_115;
                    }
                    goto LABEL_52;
                  }
                  swift_retain();
                  uint64_t v118 = *((void *)&v183 + 1);
                }
                else
                {
                  uint64_t v117 = v191;
                  if ((v191 & 0x8000000000000000) == 0)
                  {
                    if (v66 != v191)
                    {
                      uint64_t v161 = *(uint64_t (**)(uint64_t))(*(void *)v66 + 80);
                      outlined copy of _SymbolEffect.Storage(v66, *((uint64_t *)&v183 + 1), v53, v54);
                      outlined copy of _SymbolEffect.Storage(v66, *((uint64_t *)&v183 + 1), v53, v54);
                      outlined copy of _SymbolEffect.Trigger?(v191);
                      outlined copy of _SymbolEffect.Storage(v66, *((uint64_t *)&v183 + 1), v53, v54);
                      outlined copy of _SymbolEffect.Trigger?(v191);
                      LODWORD(v161) = v161(v191);
                      outlined consume of _SymbolEffect.Trigger(v66);
                      outlined consume of _SymbolEffect.Trigger(v191);
                      outlined consume of _SymbolEffect.Trigger?(v191);
                      outlined consume of _SymbolEffect.Storage(v66, *((uint64_t *)&v183 + 1), v53, v54);
                      outlined consume of _SymbolEffect.Storage(v66, *((uint64_t *)&v183 + 1), v53, v54);
                      outlined consume of _SymbolEffect.Trigger?(v191);
                      char v37 = v187;
                      int v60 = v179;
                      int v58 = (int)v161;
                      if (v161) {
                        goto LABEL_115;
                      }
LABEL_52:
                      if (v60) {
                        objc_msgSend(v171, sel_cancelAnimationWithID_);
                      }
                      outlined consume of _SymbolEffect.Storage(v183, *((uint64_t *)&v183 + 1), v53, v54);
                      int v44 = 0;
                      uint64_t v32 = v190;
                      unint64_t v39 = v191;
                      int v36 = v177;
                      LOWORD(v33) = v180;
                      if ((a4 & 1) == 0) {
                        goto LABEL_35;
                      }
                      goto LABEL_55;
                    }
                    outlined copy of _SymbolEffect.Storage(v66, *((uint64_t *)&v183 + 1), v53, v54);
                    outlined consume of _SymbolEffect.Trigger(v66);
                    outlined consume of _SymbolEffect.Trigger(v191);
LABEL_114:
                    int v60 = v179;
                    goto LABEL_115;
                  }
                  uint64_t v118 = *((void *)&v183 + 1);
                  outlined copy of _SymbolEffect.Storage(v66, *((uint64_t *)&v183 + 1), v53, v54);
                  outlined copy of _SymbolEffect.Trigger(v66);
                }
                outlined consume of _SymbolEffect.Trigger(v66);
                outlined consume of _SymbolEffect.Trigger(v117);
                outlined consume of _SymbolEffect.Storage(v66, v118, v53, v54);
                uint64_t v116 = v117;
              }
              outlined consume of _SymbolEffect.Trigger?(v116);
              goto LABEL_114;
            }
LABEL_100:
            outlined copy of _SymbolEffect.Storage(v31, v30, v190, v180);
            outlined copy of _SymbolEffect.Trigger?(v191);
            outlined consume of _SymbolEffect.Storage(v66, *((uint64_t *)&v183 + 1), v53, v54);
            outlined consume of _SymbolEffect.Storage(v31, v30, v190, v180);
            outlined consume of _SymbolEffect.Storage(v66, *((uint64_t *)&v183 + 1), v53, v54);
            outlined consume of _SymbolEffect.Trigger?(v191);
            goto LABEL_114;
        }
      }
      ++v41;
      v42 += 14;
    }
    while (v40 != v41);
    int v44 = 1;
    char v37 = v187;
    if (a4) {
      goto LABEL_55;
    }
LABEL_35:
    if (v39 & 0xF000000000000006) != 0xF000000000000006 && (v44 || (v164))
    {
LABEL_55:
      outlined copy of _SymbolEffect.Storage(v31, v30, v32, v33);
      unsigned int v61 = 0;
      int v62 = 2143289344;
    }
    else
    {
      switch(v38)
      {
        case 1u:
          unint64_t v184 = v39 & 0xF000000000000006;
          char v188 = v37;
          int v176 = v36;
          uint64_t v67 = (void *)*MEMORY[0x263F63980];
          uint64_t v199 = MEMORY[0x263F8D4F8];
          LOBYTE(v197) = BYTE4(v30) & 1;
          outlined init with take of Any(&v197, &v194);
          outlined copy of _SymbolEffect.Storage(v31, v30, v32, v33);
          outlined copy of _SymbolEffect.Storage(v31, v30, v32, v33);
          id v68 = v67;
          uint64_t v69 = v32;
          uint64_t v48 = MEMORY[0x263F8EE80];
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v194, v68, isUniquelyReferenced_nonNull_native);

          swift_bridgeObjectRelease();
          uint64_t v71 = (void *)*MEMORY[0x263F63978];
          uint64_t v199 = MEMORY[0x263F8E8F8];
          LODWORD(v197) = v30;
          outlined init with take of Any(&v197, &v194);
          id v72 = v71;
          char v73 = swift_isUniquelyReferenced_nonNull_native();
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v194, v72, v73);

          swift_bridgeObjectRelease();
          outlined consume of _SymbolEffect.Storage(v31, v30, v69, v33);
          uint64_t v50 = 12;
          goto LABEL_71;
        case 2u:
          unint64_t v184 = v39 & 0xF000000000000006;
          char v188 = v37;
          int v176 = v36;
          uint64_t v74 = (void *)*MEMORY[0x263F63970];
          uint64_t v199 = MEMORY[0x263F8E8F8];
          LODWORD(v197) = v30;
          outlined init with take of Any(&v197, &v194);
          outlined copy of _SymbolEffect.Storage(v31, v30, v32, v33);
          outlined copy of _SymbolEffect.Storage(v31, v30, v32, v33);
          id v75 = v74;
          uint64_t v76 = v32;
          uint64_t v48 = MEMORY[0x263F8EE80];
          char v77 = swift_isUniquelyReferenced_nonNull_native();
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v194, v75, v77);

          swift_bridgeObjectRelease();
          uint64_t v78 = (void *)*MEMORY[0x263F63980];
          uint64_t v199 = MEMORY[0x263F8D4F8];
          LOBYTE(v197) = BYTE4(v30) & 1;
          outlined init with take of Any(&v197, &v194);
          id v79 = v78;
          char v80 = swift_isUniquelyReferenced_nonNull_native();
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v194, v79, v80);

          swift_bridgeObjectRelease();
          outlined consume of _SymbolEffect.Storage(v31, v30, v76, v33);
          uint64_t v50 = 3;
          goto LABEL_71;
        case 3u:
          unint64_t v184 = v39 & 0xF000000000000006;
          char v188 = v37;
          int v176 = v36;
          uint64_t v81 = (void *)*MEMORY[0x263F639E0];
          uint64_t v199 = MEMORY[0x263F8E8F8];
          LODWORD(v197) = HIDWORD(v32);
          outlined init with take of Any(&v197, &v194);
          outlined copy of _SymbolEffect.Storage(v31, v30, v32, v33);
          outlined copy of _SymbolEffect.Storage(v31, v30, v32, v33);
          id v82 = v81;
          uint64_t v83 = MEMORY[0x263F8EE80];
          char v84 = swift_isUniquelyReferenced_nonNull_native();
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v194, v82, v84);

          swift_bridgeObjectRelease();
          if ((v32 & 1) == 0)
          {
            uint64_t v85 = (void *)*MEMORY[0x263F639D8];
            uint64_t v199 = MEMORY[0x263F8D538];
            *(void *)&long long v197 = v30;
            outlined init with take of Any(&v197, &v194);
            id v86 = v85;
            char v87 = swift_isUniquelyReferenced_nonNull_native();
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v194, v86, v87);

            swift_bridgeObjectRelease();
          }
          uint64_t v88 = MEMORY[0x263F8D5C8];
          uint64_t v89 = (void *)*MEMORY[0x263F63980];
          uint64_t v199 = MEMORY[0x263F8D4F8];
          LOBYTE(v197) = v33 & 1;
          outlined init with take of Any(&v197, &v194);
          id v90 = v89;
          char v91 = swift_isUniquelyReferenced_nonNull_native();
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v194, v90, v91);
          uint64_t v48 = v83;

          swift_bridgeObjectRelease();
          outlined consume of _SymbolEffect.Storage(v31, v30, v190, v33);
          uint64_t v50 = 10;
          goto LABEL_72;
        case 4u:
          unint64_t v184 = v39 & 0xF000000000000006;
          char v188 = v37;
          int v176 = v36;
          uint64_t v92 = (void *)*MEMORY[0x263F639B8];
          uint64_t v199 = MEMORY[0x263F8E8F8];
          LODWORD(v197) = v30;
          outlined init with take of Any(&v197, &v194);
          outlined copy of _SymbolEffect.Storage(v31, v30, v32, v33);
          outlined copy of _SymbolEffect.Storage(v31, v30, v32, v33);
          id v93 = v92;
          uint64_t v94 = v32;
          uint64_t v48 = MEMORY[0x263F8EE80];
          char v95 = swift_isUniquelyReferenced_nonNull_native();
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v194, v93, v95);

          swift_bridgeObjectRelease();
          uint64_t v96 = (void *)*MEMORY[0x263F63980];
          uint64_t v199 = MEMORY[0x263F8D4F8];
          LOBYTE(v197) = BYTE4(v30) & 1;
          outlined init with take of Any(&v197, &v194);
          id v97 = v96;
          char v98 = swift_isUniquelyReferenced_nonNull_native();
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v194, v97, v98);

          swift_bridgeObjectRelease();
          outlined consume of _SymbolEffect.Storage(v31, v30, v94, v33);
          uint64_t v50 = 11;
          goto LABEL_71;
        case 5u:
          unint64_t v184 = v39 & 0xF000000000000006;
          char v188 = v37;
          int v176 = v36;
          char v99 = (void *)*MEMORY[0x263F639D0];
          uint64_t v199 = MEMORY[0x263F8E8F8];
          LODWORD(v197) = v30;
          outlined init with take of Any(&v197, &v194);
          outlined copy of _SymbolEffect.Storage(v31, v30, v32, v33);
          outlined copy of _SymbolEffect.Storage(v31, v30, v32, v33);
          id v100 = v99;
          uint64_t v101 = v32;
          uint64_t v48 = MEMORY[0x263F8EE80];
          char v102 = swift_isUniquelyReferenced_nonNull_native();
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v194, v100, v102);

          swift_bridgeObjectRelease();
          outlined consume of _SymbolEffect.Storage(v31, v30, v101, v33);
          uint64_t v50 = 1;
          goto LABEL_71;
        case 6u:
        case 7u:
        case 8u:
          goto LABEL_55;
        default:
          unint64_t v184 = v39 & 0xF000000000000006;
          char v188 = v37;
          int v176 = v36;
          long long v45 = (void *)*MEMORY[0x263F63980];
          uint64_t v199 = MEMORY[0x263F8D4F8];
          LOBYTE(v197) = v30 & 1;
          outlined init with take of Any(&v197, &v194);
          outlined copy of _SymbolEffect.Storage(v31, v30, v32, v33);
          outlined copy of _SymbolEffect.Storage(v31, v30, v32, v33);
          id v46 = v45;
          uint64_t v47 = v32;
          uint64_t v48 = MEMORY[0x263F8EE80];
          char v49 = swift_isUniquelyReferenced_nonNull_native();
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v194, v46, v49);

          swift_bridgeObjectRelease();
          outlined consume of _SymbolEffect.Storage(v31, v30, v47, v33);
          uint64_t v50 = 2;
LABEL_71:
          uint64_t v88 = MEMORY[0x263F8D5C8];
LABEL_72:
          int64_t v103 = (void *)*MEMORY[0x263F639C0];
          uint64_t v199 = v88;
          LODWORD(v197) = v35;
          outlined init with take of Any(&v197, &v194);
          id v104 = v103;
          char v105 = swift_isUniquelyReferenced_nonNull_native();
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v194, v104, v105);

          swift_bridgeObjectRelease();
          uint64_t v106 = (void *)*MEMORY[0x263F639A0];
          uint64_t v199 = v88;
          float v107 = INFINITY;
          if (v184 != 0xF000000000000006) {
            float v107 = 1.0;
          }
          if (!v189) {
            float v107 = v34;
          }
          *(float *)&long long v197 = v107;
          outlined init with take of Any(&v197, &v194);
          id v108 = v106;
          char v109 = swift_isUniquelyReferenced_nonNull_native();
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v194, v108, v109);

          swift_bridgeObjectRelease();
          if ((v188 & 1) == 0)
          {
            uint64_t v110 = (void *)*MEMORY[0x263F639A8];
            uint64_t v199 = v88;
            LODWORD(v197) = v176;
            outlined init with take of Any(&v197, &v194);
            id v111 = v110;
            char v112 = swift_isUniquelyReferenced_nonNull_native();
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v194, v111, v112);

            swift_bridgeObjectRelease();
          }
          uint64_t v113 = (void *)*MEMORY[0x263F63998];
          uint64_t v199 = v88;
          *(float *)&long long v197 = v26;
          outlined init with take of Any(&v197, &v194);
          id v114 = v113;
          char v115 = swift_isUniquelyReferenced_nonNull_native();
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v194, v114, v115);

          swift_bridgeObjectRelease();
          unsigned int v61 = RBSymbolAnimator.addAnimation(_:options:animationListener:logicalListener:)(v50, v48, v170, v169);
          if (v61)
          {
            int v62 = LODWORD(v26);
            float v26 = v26 + 1.0;
          }
          else
          {
            int v62 = 2143289344;
          }
          uint64_t v32 = v190;
          break;
      }
    }
    outlined copy of _SymbolEffect.Storage(v31, v30, v32, v33);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v193 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v193[2] + 1, 1, v193);
    }
    unint64_t v64 = v193[2];
    unint64_t v63 = v193[3];
    if (v64 >= v63 >> 1) {
      uint64_t v193 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v63 > 1), v64 + 1, 1, v193);
    }
    v193[2] = v64 + 1;
    uint64_t v65 = &v193[7 * v64];
    v65[4] = v28;
    v65[5] = v29;
    v65[6] = v31;
    v65[7] = v30;
    v65[8] = v190;
    *((_WORD *)v65 + 36) = v33;
    *((_DWORD *)v65 + 19) = v61;
    *((_DWORD *)v65 + 20) = v62;
    outlined consume of _SymbolEffect.Trigger?(v191);
    outlined consume of _SymbolEffect.Storage(v31, v30, v190, v33);
    uint64_t result = outlined consume of _SymbolEffect.Storage(v31, v30, v190, v33);
LABEL_19:
    if (++v25 != v186) {
      continue;
    }
    break;
  }
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v6 = v185;
  uint64_t v5 = v171;
  uint64_t v23 = (uint64_t)v173;
  int v13 = v165;
  unint64_t v22 = v162;
  char v24 = &selRef_start;
  uint64_t v125 = v178;
  if (!v162)
  {
LABEL_152:
    int v131 = *(_DWORD *)(v6 + 8);
    if (v172 == v131 && (unsigned __int8 v132 = v204, v204 == *(unsigned __int8 *)(v6 + 41)))
    {
      swift_release();
      swift_release();
      unsigned __int8 v158 = v208;
      char v159 = v207;
      char v160 = v206;
      char v154 = v205;
      char v155 = v203;
      char v156 = v202;
      char v157 = v201;
      swift_bridgeObjectRelease();
      *(void *)uint64_t v6 = v193;
      *(_DWORD *)(v6 + 8) = v172;
      *(unsigned char *)(v6 + 12) = v158;
      *(_DWORD *)(v6 + 16) = v13;
      *(float *)(v6 + 20) = v14;
      *(unsigned char *)(v6 + 24) = v159;
      *(_DWORD *)(v6 + 28) = v166;
      *(unsigned char *)(v6 + 32) = v160;
    }
    else
    {
      if ((v164 | a4))
      {
        unsigned __int8 v192 = v208;
      }
      else
      {
        unsigned __int8 v192 = v208;
        if ((*(unsigned char *)(v6 + 61) & 1) == 0)
        {
          if (v172 != v131 || ((v208 ^ *(unsigned __int8 *)(v6 + 12)) & 1) != 0)
          {
            unsigned int v133 = (void *)*MEMORY[0x263F63980];
            uint64_t v199 = MEMORY[0x263F8D4F8];
            LOBYTE(v197) = v208;
            outlined init with take of Any(&v197, &v194);
            id v134 = v133;
            uint64_t v135 = MEMORY[0x263F8EE80];
            char v136 = swift_isUniquelyReferenced_nonNull_native();
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v194, v134, v136);

            swift_bridgeObjectRelease();
            uint64_t v137 = (void *)*MEMORY[0x263F639C0];
            uint64_t v199 = MEMORY[0x263F8D5C8];
            LODWORD(v197) = v13;
            outlined init with take of Any(&v197, &v194);
            id v138 = v137;
            char v139 = swift_isUniquelyReferenced_nonNull_native();
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v194, v138, v139);

            swift_bridgeObjectRelease();
            if (v172 || *(_DWORD *)(v6 + 8)) {
              RBSymbolAnimator.addAnimation(_:options:animationListener:logicalListener:)(4, v135, v170, v169);
            }
            else {
              swift_bridgeObjectRelease();
            }
          }
          int v140 = v204;
          if (v204 != *(unsigned __int8 *)(v6 + 41))
          {
            uint64_t v141 = (void *)*MEMORY[0x263F63980];
            uint64_t v199 = MEMORY[0x263F8D4F8];
            LOBYTE(v197) = v205;
            outlined init with take of Any(&v197, &v194);
            id v142 = v141;
            uint64_t v143 = MEMORY[0x263F8EE80];
            char v144 = swift_isUniquelyReferenced_nonNull_native();
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v194, v142, v144);

            swift_bridgeObjectRelease();
            int v145 = (void *)*MEMORY[0x263F63968];
            uint64_t v199 = MEMORY[0x263F8E8F8];
            LODWORD(v197) = v168;
            outlined init with take of Any(&v197, &v194);
            id v146 = v145;
            char v147 = swift_isUniquelyReferenced_nonNull_native();
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v194, v146, v147);

            swift_bridgeObjectRelease();
            uint64_t v148 = (void *)*MEMORY[0x263F639C0];
            uint64_t v199 = MEMORY[0x263F8D5C8];
            LODWORD(v197) = v18;
            outlined init with take of Any(&v197, &v194);
            id v149 = v148;
            char v150 = swift_isUniquelyReferenced_nonNull_native();
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v194, v149, v150);

            swift_bridgeObjectRelease();
            if (v140) {
              uint64_t v151 = 9;
            }
            else {
              uint64_t v151 = 5;
            }
            RBSymbolAnimator.addAnimation(_:options:animationListener:logicalListener:)(v151, v143, v170, v169);
          }
        }
      }
      objc_msgSend(v5, sel_setScaleLevel_, v172);
      unsigned __int8 v132 = v204;
      objc_msgSend(v5, sel_setHidden_, v204);
      swift_release();
      swift_release();
      char v152 = v207;
      char v153 = v206;
      char v154 = v205;
      char v155 = v203;
      char v156 = v202;
      char v157 = v201;
      swift_bridgeObjectRelease();
      *(void *)uint64_t v6 = v193;
      *(_DWORD *)(v6 + 8) = v172;
      *(unsigned char *)(v6 + 12) = v192;
      *(_DWORD *)(v6 + 16) = v13;
      *(float *)(v6 + 20) = v14;
      *(unsigned char *)(v6 + 24) = v152;
      *(_DWORD *)(v6 + 28) = v166;
      *(unsigned char *)(v6 + 32) = v153;
    }
    *(_DWORD *)(v6 + 36) = v168;
    *(unsigned char *)(v6 + 40) = v154;
    *(unsigned char *)(v6 + 41) = v132;
    *(_DWORD *)(v6 + 44) = v18;
    *(float *)(v6 + 48) = v19;
    *(unsigned char *)(v6 + 52) = v155;
    *(_DWORD *)(v6 + 56) = v167;
    *(unsigned char *)(v6 + 60) = v156;
    *(unsigned char *)(v6 + 61) = v157;
    return swift_bridgeObjectRelease();
  }
LABEL_140:
  if (v125 < 1) {
    goto LABEL_152;
  }
  unint64_t v126 = v22;
  unint64_t v127 = 0;
  BOOL v128 = v200;
  uint64_t v129 = 76;
  while (2)
  {
    if (!v128)
    {
      uint64_t v130 = 1 << v127;
      if (v127 >= 0x40) {
        uint64_t v130 = 0;
      }
      if ((v130 & v182) == 0)
      {
LABEL_149:
        if (v127 >= *(void *)(*(void *)v6 + 16)) {
          goto LABEL_172;
        }
        if (*(_DWORD *)(*(void *)v6 + v129)) {
          uint64_t result = (uint64_t)[v5 v24[47]];
        }
      }
LABEL_145:
      ++v127;
      v129 += 56;
      if (v126 == v127) {
        goto LABEL_152;
      }
      continue;
    }
    break;
  }
  if (v127 >> 6 < *(void *)(v23 + 16))
  {
    if ((*(void *)(v23 + 32 + 8 * (v127 >> 6)) & (1 << v127)) == 0) {
      goto LABEL_149;
    }
    goto LABEL_145;
  }
  __break(1u);
LABEL_172:
  __break(1u);
LABEL_173:
  __break(1u);
LABEL_174:
  __break(1u);
LABEL_175:
  __break(1u);
  return result;
}

void protocol witness for ImageProvider.resolve(in:) in conformance Image.CGImageProvider(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
}

__n128 protocol witness for ImageProvider.resolve(in:) in conformance Image.ResizableProvider@<Q0>(uint64_t a1@<X8>)
{
  long long v7 = *(_OWORD *)(v1 + 8);
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = *(void *)(v1 + 32);
  char v5 = *(unsigned char *)(v1 + 40);
  (*(void (**)(void))(**(void **)v1 + 80))();
  *(_OWORD *)(a1 + 64) = v7;
  *(void *)(a1 + 80) = v3;
  *(void *)(a1 + 88) = v4;
  *(unsigned char *)(a1 + 96) = v5;
  Image.Resolved.image.didset();
  return result;
}

uint64_t outlined init with take of NamedImage.BitmapKey(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void type metadata accessor for (ColorScheme?, ColorSchemeContrast)()
{
  if (!lazy cache variable for type metadata for (ColorScheme?, ColorSchemeContrast))
  {
    type metadata accessor for AtomicBuffer<NamedImage.Cache.ImageCacheData>(255, &lazy cache variable for type metadata for ColorScheme?, (uint64_t)&type metadata for ColorScheme, MEMORY[0x263F8D8F0]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ColorScheme?, ColorSchemeContrast));
    }
  }
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(void *a1, uint64_t a2, void (*a3)(void *__return_ptr, void))
{
  void v4[2] = *MEMORY[0x263EF8340];
  a3(v4, *a1);
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

{
  void v4[2];

  v4[1] = *MEMORY[0x263EF8340];
  a3(v4, *a1);
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

uint64_t specialized UpdateEnvironment.value.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v4 = *Value;
  uint64_t v3 = Value[1];
  *a1 = *Value;
  a1[1] = v3;
  uint64_t v5 = AGGraphGetValue();
  uint64_t v6 = *(void *)(v5 + 16);
  char v7 = *(unsigned char *)(v5 + 24);
  swift_retain_n();
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(a1, v6, v7);
  swift_release();
  if (v3)
  {
    uint64_t v8 = *a1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v4, v8);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    uint64_t v8 = *a1;
  }
  uint64_t v9 = AGGraphGetValue();
  uint64_t v10 = *(void *)v9;
  char v11 = *(unsigned char *)(v9 + 8);
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(a1, v10, v11);
  swift_release();
  if (v3)
  {
    uint64_t v12 = *a1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v8, v12);
    swift_release();
    swift_release();
  }
  return swift_release();
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<EnvironmentValues.LowerLineLimitKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.LowerLineLimitKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.LowerLineLimitKey>, (uint64_t)&type metadata for EnvironmentValues.LowerLineLimitKey, (uint64_t)&protocol witness table for EnvironmentValues.LowerLineLimitKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.LowerLineLimitKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnvironmentValues.LowerLineLimitKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.LowerLineLimitKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.LowerLineLimitKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.LowerLineLimitKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.LowerLineLimitKey>, (uint64_t)&type metadata for EnvironmentValues.LowerLineLimitKey, (uint64_t)&protocol witness table for EnvironmentValues.LowerLineLimitKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.LowerLineLimitKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t static Alignment.bottom.getter()
{
  return static Alignment.center.getter(&one-time initialization token for bottom, (uint64_t)&static Alignment.bottom);
}

double static UnitPoint.bottom.getter()
{
  return 0.5;
}

uint64_t associated type witness table accessor for Animatable.AnimatableData : VectorArithmetic in CombinedVisualEffect<A, B>()
{
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for AnyShapeStyle.Storage()
{
  return &type metadata for AnyShapeStyle.Storage;
}

uint64_t instantiation function for generic protocol witness table for ShapeStyledDisplayList<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for AnyViewStorageBase()
{
  return self;
}

uint64_t View.layoutPriority(_:)(uint64_t a1, double a2)
{
  double v3 = a2;
  return View._trait<A>(_:_:)((uint64_t)&type metadata for LayoutPriorityTraitKey, (uint64_t)&v3, a1);
}

uint64_t base witness table accessor for _AttributeBody in ValueTransactionSeed<A>()
{
  return swift_getWitnessTable();
}

BOOL specialized static TextLayoutProperties.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  char v3 = *(unsigned char *)(a1 + 24);
  int v4 = *(unsigned __int8 *)(a1 + 25);
  int v5 = *(unsigned __int8 *)(a1 + 26);
  int v6 = *(unsigned __int8 *)(a1 + 27);
  int v7 = *(unsigned __int8 *)(a1 + 28);
  float64x2_t v9 = *(float64x2_t *)(a1 + 32);
  float64x2_t v8 = *(float64x2_t *)(a1 + 48);
  float64x2_t v10 = *(float64x2_t *)(a1 + 64);
  int v11 = *(unsigned __int8 *)(a1 + 80);
  int v12 = *(unsigned __int8 *)(a1 + 81);
  float64x2_t v13 = *(float64x2_t *)(a1 + 88);
  int v14 = *(unsigned __int8 *)(a1 + 104);
  unint64_t v15 = *(void *)(a1 + 112);
  uint64_t v16 = *(void *)(a1 + 120);
  double v18 = *(double *)(a1 + 128);
  double v17 = *(double *)(a1 + 136);
  int v19 = *(unsigned __int8 *)(a1 + 144);
  int v20 = *(unsigned __int8 *)(a2 + 25);
  int v21 = *(unsigned __int8 *)(a2 + 26);
  int v22 = *(unsigned __int8 *)(a2 + 27);
  int v23 = *(unsigned __int8 *)(a2 + 28);
  float64x2_t v25 = *(float64x2_t *)(a2 + 32);
  float64x2_t v24 = *(float64x2_t *)(a2 + 48);
  float64x2_t v26 = *(float64x2_t *)(a2 + 64);
  int v27 = *(unsigned __int8 *)(a2 + 80);
  float64x2_t v28 = *(float64x2_t *)(a2 + 88);
  int v29 = *(unsigned __int8 *)(a2 + 104);
  uint64_t v30 = *(void *)(a2 + 112);
  uint64_t v31 = *(void *)(a2 + 120);
  double v33 = *(double *)(a2 + 128);
  double v32 = *(double *)(a2 + 136);
  int v34 = *(unsigned __int8 *)(a2 + 144);
  if (*(unsigned char *)(a1 + 8))
  {
    if (!*(unsigned char *)(a2 + 8)) {
      return 0;
    }
  }
  else
  {
    if (*(void *)a1 == *(void *)a2) {
      char v35 = *(unsigned char *)(a2 + 8);
    }
    else {
      char v35 = 1;
    }
    if (v35) {
      return 0;
    }
  }
  BOOL result = 0;
  if (v3)
  {
    if ((vminv_u8((uint8x8_t)vcltz_s8(vshl_n_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(v9, v25), (int32x4_t)vceqq_f64(v8, v24)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(v10, v26), (int32x4_t)vceqq_f64(v13, v28)))), 7uLL))) & (v5 == v21) & (v7 == v23 && v14 == v29) & ~(v6 ^ v22 | v11 ^ v27) & *(unsigned char *)(a2 + 24)) != 1|| v4 != v20)
    {
      return result;
    }
LABEL_22:
    if ((v12 ^ *(unsigned __int8 *)(a2 + 81))) {
      return result;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v43 = specialized static Array<A>.== infix(_:_:)(v15, v30);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v43 & 1) == 0) {
      return 0;
    }
    if (v16 == 2)
    {
      if (v31 == 2) {
        return v19 == v34;
      }
    }
    else if (v31 != 2)
    {
      BOOL result = 0;
      if (((v31 ^ v16) & 1) != 0 || v18 != v33 || v17 != v32) {
        return result;
      }
      return v19 == v34;
    }
    return 0;
  }
  if ((*(unsigned char *)(a2 + 24) & 1) == 0)
  {
    int v38 = v6 ^ v22;
    int v39 = v11 ^ v27;
    unsigned __int8 v40 = vminv_u8((uint8x8_t)vcltz_s8(vshl_n_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(v9, v25), (int32x4_t)vceqq_f64(v8, v24)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(v10, v26), (int32x4_t)vceqq_f64(v13, v28)))), 7uLL))) & (v4 == v20);
    BOOL v41 = v2 == *(void *)(a2 + 16) && v14 == v29;
    BOOL v42 = v41;
    if ((v40 & (v5 == v21 && v7 == v23 && v42) & ~(v38 | v39)) != 0) {
      goto LABEL_22;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _TransactionModifier()
{
  return &type metadata for _TransactionModifier;
}

ValueMetadata *type metadata accessor for BackgroundStyle()
{
  return &type metadata for BackgroundStyle;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance RendererEffectDisplayList<A>()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

uint64_t initializeWithCopy for SubscriptionLifetime.Connection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CombineIdentifier();
  uint64_t v7 = *(void *)(v6 - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, v6);
  unint64_t v8 = (*(void *)(v7 + 48) + 7 + a2) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = swift_weakCopyInit();
  uint64_t v10 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v11 = v10 + 16;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (v12 + 8 + v9) & ~v12;
  uint64_t v14 = (v12 + 8 + v8) & ~v12;
  (*(void (**)(uint64_t, uint64_t))(v10 + 16))(v13, v14);
  *(void *)((*(void *)(v11 + 48) + 7 + v13) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v11 + 48)
                                                                                       + 7
                                                                                       + v14) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithCopy for Image.ImageViewChild(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  char v3 = *(void **)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v3;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 60) = *(unsigned char *)(a2 + 60);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  *(_OWORD *)(a1 + 92) = *(_OWORD *)(a2 + 92);
  *(_WORD *)(a1 + 108) = *(_WORD *)(a2 + 108);
  swift_retain();
  id v4 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t static Font.subheadline.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for subheadline);
}

uint64_t FullEnvironmentBox.update(property:phase:)(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16)) {
    return 0;
  }
  char v3 = v1;
  uint64_t v6 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  AGGraphGetValue();
  if (!v1[1])
  {
    outlined copy of Environment<EnvironmentValues>.Content(v6, v5, 0);
    outlined copy of Environment<EnvironmentValues>.Content(v6, v5, 0);
    swift_retain();
    swift_retain();
    swift_release();
    goto LABEL_8;
  }
  char v8 = v7;
  uint64_t v20 = v1[1];
  type metadata accessor for KeyPath<EnvironmentValues, EnvironmentValues>();
  outlined copy of Environment<EnvironmentValues>.Content(v6, v5, 0);
  outlined copy of Environment<EnvironmentValues>.Content(v6, v5, 0);
  outlined copy of Environment<EnvironmentValues>.Content(v6, v5, 0);
  swift_retain();
  swift_retain();
  char v9 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  uint64_t result = outlined consume of Environment<EnvironmentValues>.Content(v6, v5, 0);
  if ((v9 & 1) == 0)
  {
LABEL_8:
    swift_retain();
    swift_release();
    v3[1] = v6;
    goto LABEL_9;
  }
  if ((v8 & 1) == 0)
  {
    uint64_t v2 = 0;
    goto LABEL_16;
  }
LABEL_9:
  swift_retain();
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  swift_release();
  uint64_t v11 = v3[2];
  if (v11 == 1
    || (v12 = swift_retain(), char v13 = PropertyList.Tracker.hasDifferentUsedValues(_:)(v12),
                              swift_release(),
                              (v13 & 1) != 0))
  {
    uint64_t v19 = v5;
    uint64_t v14 = v3[4];
    PropertyList.Tracker.reset()();
    if (v20) {
      uint64_t v15 = *(void *)(v20 + 64);
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v16 = *(void *)(v14 + 16);
    swift_retain_n();
    swift_retain_n();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v16 + 16));
    *(void *)(v16 + 24) = v15;
    os_unfair_lock_unlock((os_unfair_lock_t)(v16 + 16));
    swift_release();
    swift_release_n();
    swift_release();
    swift_release();
    uint64_t result = outlined consume of EnvironmentValues?(v11);
    v3[2] = v20;
    v3[3] = v14;
    uint64_t v2 = 1;
    uint64_t v5 = v19;
  }
  else
  {
    swift_release();
    uint64_t result = swift_release();
    uint64_t v2 = 0;
  }
LABEL_16:
  uint64_t v17 = v3[2];
  if (v17 != 1)
  {
    uint64_t v18 = v3[3];
    outlined copy of EnvironmentValues?(v3[2]);
    outlined consume of Environment<EnvironmentValues>.Content(v6, v5, 0);
    outlined consume of Environment<EnvironmentValues>.Content(v6, v5, 0);
    swift_release();
    swift_release();
    *(void *)a1 = v17;
    *(void *)(a1 + 8) = v18;
    *(unsigned char *)(a1 + 16) = 1;
    return v2;
  }
  __break(1u);
  return result;
}

uint64_t GraphicsContext.Storage.__deallocating_deinit()
{
  if (*(unsigned char *)(v0 + 64) == 1) {
    RBDrawingStateDestroy();
  }
  swift_release();
  outlined consume of EnvironmentValues?(*(void *)(v0 + 32));

  return swift_deallocClassInstance();
}

uint64_t outlined consume of EnvironmentValues?(uint64_t result)
{
  if (result != 1)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t outlined copy of Environment<EnvironmentValues>.Content(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    swift_retain();
  }

  return swift_retain();
}

uint64_t outlined consume of Environment<EnvironmentValues>.Content(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = swift_release();
  if (a3)
  {
    return swift_release();
  }
  return result;
}

void type metadata accessor for KeyPath<EnvironmentValues, EnvironmentValues>()
{
  if (!lazy cache variable for type metadata for KeyPath<EnvironmentValues, EnvironmentValues>)
  {
    unint64_t v0 = type metadata accessor for KeyPath();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for KeyPath<EnvironmentValues, EnvironmentValues>);
    }
  }
}

uint64_t specialized ShapeStyleResolver.updateValue()()
{
  uint64_t v1 = v0;
  uint64_t v97 = *MEMORY[0x263EF8340];
  int v2 = *v0;
  int v3 = *MEMORY[0x263F288F8];
  if (v2 == *MEMORY[0x263F288F8]) {
    goto LABEL_5;
  }
  uint64_t v4 = *(void *)AGGraphGetValue();
  if (v4 == 1)
  {
    swift_retain();
LABEL_5:
    int v6 = 0;
    uint64_t v69 = 0;
    goto LABEL_6;
  }
  int v6 = v5 & 1;
  uint64_t v69 = v4;
  swift_retain();
LABEL_6:
  if (v1[1] == v3)
  {
    int v7 = 0;
    id v68 = 0;
    char v8 = 0;
    unsigned __int16 v9 = 1;
  }
  else
  {
    uint64_t Value = AGGraphGetValue();
    char v12 = v11;
    id v13 = *(id *)Value;
    unsigned __int16 v14 = *(_WORD *)(Value + 8);
    char v15 = *(unsigned char *)(Value + 10);
    id v16 = *(id *)Value;
    if (v13 == (id)1) {
      int v7 = 0;
    }
    else {
      int v7 = v12 & 1;
    }
    if (v13 == (id)1) {
      id v17 = 0;
    }
    else {
      id v17 = v13;
    }
    id v68 = v17;
    if (v13 == (id)1) {
      unsigned __int16 v9 = 1;
    }
    else {
      unsigned __int16 v9 = v14;
    }
    if (v13 == (id)1) {
      char v8 = 0;
    }
    else {
      char v8 = v15;
    }
  }
  uint64_t v19 = *(void *)AGGraphGetValue();
  uint64_t v71 = MEMORY[0x263F8EE78];
  if ((v6 | v7) == 1)
  {
    int v20 = 1;
    BOOL v72 = 1;
    swift_retain();
    swift_retain();
    goto LABEL_44;
  }
  char v21 = v18;
  Outputuint64_t Value = AGGraphGetOutputValue();
  BOOL v72 = OutputValue == 0;
  if (!OutputValue)
  {
    swift_retain();
    swift_retain();
    int v20 = 1;
    goto LABEL_44;
  }
  if ((v21 & 1) == 0)
  {
    uint64_t v23 = (uint64_t)(v1 + 4);
    uint64_t v24 = *((void *)v1 + 5);
    swift_retain();
    swift_retain();
    if (v24) {
      goto LABEL_59;
    }
LABEL_48:
    if (v1[12] == *(_DWORD *)AGGraphGetValue() >> 1)
    {
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();

      return swift_release();
    }
    ((void (*)(void))specialized AnimatableAttributeHelper.reset())();
    BOOL v72 = 1;
    goto LABEL_51;
  }
  unsigned __int16 v67 = v9;
  uint64_t v25 = *(void *)(*((void *)v1 + 7) + 16);
  swift_retain();
  swift_retain_n();
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v25 + 16));
  uint64_t v26 = *(void *)(v25 + 32);
  uint64_t v66 = *(void *)(v25 + 24);
  uint64_t v27 = *(void *)(v25 + 40);
  uint64_t v28 = *(void *)(v25 + 48);
  char v29 = *(unsigned char *)(v25 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v25 + 16));
  swift_release();
  if (v29) {
    goto LABEL_41;
  }
  if (v19)
  {
    uint64_t v30 = v27;
    uint64_t v31 = v28;
    uint64_t v32 = v26;
    if (*(void *)(v19 + 64) == v66)
    {
LABEL_39:
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_40:
      int v20 = 0;
      BOOL v72 = 0;
      goto LABEL_43;
    }
  }
  else
  {
    uint64_t v30 = v27;
    uint64_t v31 = v28;
    uint64_t v32 = v26;
    if (!v66) {
      goto LABEL_39;
    }
  }
  if (compare(_:against:)(v32, v19) & 1) != 0 && (compare(_:against:)(v30, v19))
  {
    uint64_t v33 = *(void *)(v31 + 16);
    if (!v33) {
      goto LABEL_39;
    }
    uint64_t v34 = v31 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of AnyTrackedValue(v34, (uint64_t)&v73);
      id v35 = v75;
      uint64_t v36 = v76;
      __swift_project_boxed_opaque_existential_1(&v73, (uint64_t)v75);
      if (((*(uint64_t (**)(uint64_t, id, uint64_t))(v36 + 16))(v19, v35, v36) & 1) == 0) {
        break;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v73);
      v34 += 40;
      if (!--v33)
      {
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        goto LABEL_40;
      }
    }
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v73);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_41:
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  int v20 = 1;
  BOOL v72 = 1;
LABEL_43:
  unsigned __int16 v9 = v67;
LABEL_44:
  uint64_t v23 = (uint64_t)(v1 + 4);
  if (*((void *)v1 + 5))
  {
    if (!v20) {
      goto LABEL_59;
    }
    goto LABEL_51;
  }
  if ((v20 & 1) == 0) {
    goto LABEL_48;
  }
LABEL_51:
  uint64_t v38 = *(void *)(*((void *)v1 + 7) + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v38 + 16));
  *(void *)(v38 + 24) = 0;
  if (*(void *)(*(void *)(v38 + 32) + 16))
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v73 = *(void *)(v38 + 32);
    *(void *)(v38 + 32) = 0x8000000000000000;
    type metadata accessor for _NativeDictionary<ObjectIdentifier, AnyTrackedValue>();
    _NativeDictionary.removeAll(isUnique:)(isUniquelyReferenced_nonNull_native);
    *(void *)(v38 + 32) = v73;
    swift_bridgeObjectRelease();
  }
  if (*(void *)(*(void *)(v38 + 40) + 16))
  {
    char v40 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v73 = *(void *)(v38 + 40);
    *(void *)(v38 + 40) = 0x8000000000000000;
    type metadata accessor for _NativeDictionary<ObjectIdentifier, AnyTrackedValue>();
    _NativeDictionary.removeAll(isUnique:)(v40);
    *(void *)(v38 + 40) = v73;
    swift_bridgeObjectRelease();
  }
  int v41 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v42 = *(void *)(v38 + 48);
  if (v41)
  {
    specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v42 + 16));
  }
  else
  {
    *(void *)(v38 + 48) = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(void *)(v42 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  *(unsigned char *)(v38 + 56) = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(v38 + 16));
  swift_release();
LABEL_59:
  uint64_t v43 = v9;
  if (v8) {
    uint64_t v44 = v9;
  }
  else {
    uint64_t v44 = v9 != 0;
  }
  uint64_t v45 = *((void *)v1 + 7);
  if (v19) {
    uint64_t v46 = *(void *)(v19 + 64);
  }
  else {
    uint64_t v46 = 0;
  }
  uint64_t v47 = *(void *)(v45 + 16);
  swift_retain_n();
  swift_retain_n();
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v47 + 16));
  *(void *)(v47 + 24) = v46;
  os_unfair_lock_unlock((os_unfair_lock_t)(v47 + 16));
  swift_release();
  swift_release();
  uint64_t v48 = swift_release();
  char v49 = *((unsigned char *)v1 + 12);
  char v96 = 0;
  long long v85 = 0uLL;
  uint64_t v86 = v44;
  char v87 = 1;
  uint64_t v88 = 0;
  char v89 = 5;
  *(void *)&long long v90 = v19;
  *((void *)&v90 + 1) = v45;
  long long v91 = 0u;
  long long v92 = 0u;
  uint64_t v93 = 0;
  char v94 = 1;
  char v95 = v49;
  if (v44)
  {
    if (v69)
    {
      uint64_t v50 = *(void (**)(long long *))(*(void *)v69 + 80);
      swift_retain();
      v50(&v85);
      swift_release();
      if (v8) {
        goto LABEL_79;
      }
    }
    else
    {
      specialized ForegroundStyle._apply(to:)((uint64_t)&v85);
      if (v8) {
        goto LABEL_79;
      }
    }
    unsigned __int8 v70 = 0;
    long long v73 = v90;
    uint64_t v51 = MEMORY[0x263F8EE78];
    if (v89 == 1)
    {
      uint64_t v51 = v88;
      uint64_t v52 = 0;
    }
    else
    {
      uint64_t v52 = v88;
    }
    if (v89 == 1) {
      char v53 = 5;
    }
    else {
      char v53 = v89;
    }
    *(void *)&long long v84 = v51;
    _ShapeStyle_Pack.createOpacities(count:name:environment:)(v43, (char *)&v70, (uint64_t *)&v73);
    outlined consume of _ShapeStyle_Shape.Result(v52, v53);
    uint64_t v88 = v84;
    char v89 = 1;
  }
  else if (v72)
  {
    specialized AnimatableAttributeHelper.reset()(v48);
  }
LABEL_79:
  if ((v8 & 2) != 0)
  {
    long long v85 = xmmword_24619B520;
    uint64_t v86 = 1;
    char v87 = 1;
    char v95 = 0;
    BackgroundStyle._apply(to:)((uint64_t)&v85);
  }
  if ((v8 & 4) != 0)
  {
    long long v84 = v90;
    uint64_t v56 = v68;
    id v57 = v68;
    swift_retain();
    swift_retain();
    ResolvedMulticolorStyle.init(in:bundle:)((uint64_t *)&v84, (uint64_t)v68, (uint64_t)&v73);
    uint64_t v58 = 256;
    if (!BYTE1(v74)) {
      uint64_t v58 = 0;
    }
    uint64_t v59 = v58 | v74;
    uint64_t v60 = 0x10000;
    if (!BYTE2(v74)) {
      uint64_t v60 = 0;
    }
    uint64_t v74 = v59 | v60;
    long long v76 = 0u;
    long long v77 = 0u;
    long long v78 = 0u;
    char v79 = 6;
    int v80 = 1065353216;
    uint64_t v81 = 0;
    char v82 = -1;
    uint64_t v61 = MEMORY[0x263F8EE78];
    uint64_t v83 = MEMORY[0x263F8EE78];
    if (v89 == 1) {
      uint64_t v61 = v88;
    }
    unsigned __int8 v70 = 2;
    if (v89 == 1) {
      uint64_t v62 = 0;
    }
    else {
      uint64_t v62 = v88;
    }
    if (v89 == 1) {
      char v63 = 5;
    }
    else {
      char v63 = v89;
    }
    *(void *)&long long v84 = v61;
    id v64 = v75;
    _ShapeStyle_Pack.subscript.setter((uint64_t *)&v73, &v70, 0);
    outlined consume of _ShapeStyle_Shape.Result(v62, v63);

    uint64_t v55 = v84;
    uint64_t v88 = v84;
    char v89 = 1;
  }
  else
  {
    char v54 = v89;
    uint64_t v55 = v88;
    if (v89 != 1)
    {
      uint64_t v65 = MEMORY[0x263F8EE78];
      uint64_t v56 = v68;
      goto LABEL_99;
    }
    uint64_t v56 = v68;
  }
  swift_bridgeObjectRetain();
  char v54 = 1;
  uint64_t v65 = v55;
LABEL_99:
  swift_bridgeObjectRelease();
  uint64_t v71 = v65;
  if ((*((unsigned char *)v1 + 13) & 1) == 0) {
    specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)((uint64_t)&v71, 0, v1[2], v23);
  }
  if (v72)
  {
    *(void *)&long long v73 = v71;
    swift_bridgeObjectRetain();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();

  swift_release();
  outlined consume of _ShapeStyle_Shape.Result(v55, v54);
  swift_release();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  int v1;
  char v2;
  int v3;
  uint64_t v4;
  uint64_t *Value;
  char v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  id v12;
  __int16 v13;
  char v14;
  id v15;
  __int16 v16;
  id v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t OutputValue;
  char v26;
  char v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  int v56;
  int v57;
  unsigned __int16 v58;
  char v59;
  uint64_t v60;
  void *v61;
  char v62;
  unsigned __int8 v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  long long v71;
  uint64_t v72;
  id v73;
  long long v74;
  long long v75;
  long long v76;
  char v77;
  int v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  long long v82;
  long long v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  char v87;
  long long v88;
  long long v89;
  long long v90;
  uint64_t v91;
  char v92;
  char v93;
  char v94;
  uint64_t v95;
  uint64_t vars8;

  char v95 = *MEMORY[0x263EF8340];
  uint64_t v1 = *MEMORY[0x263F288F8];
  if (*(_DWORD *)v0 == *MEMORY[0x263F288F8])
  {
    char v54 = 0;
    int v2 = 0;
    if (*(_DWORD *)(v0 + 4) == *(_DWORD *)v0)
    {
      int v3 = 0;
      uint64_t v62 = 0;
      uint64_t v58 = 1;
      uint64_t v51 = 0;
      uint64_t v52 = 0;
      char v53 = 0;
      uint64_t v4 = 0;
      uint64_t v61 = 0;
      goto LABEL_20;
    }
    char v8 = 0;
    uint64_t v52 = 0;
    char v53 = 0;
    uint64_t v51 = 0;
  }
  else
  {
    uint64_t Value = (uint64_t *)AGGraphGetValue();
    uint64_t v4 = *Value;
    uint64_t v52 = Value[2];
    char v53 = Value[1];
    uint64_t v51 = Value[3];
    char v54 = Value[4];
    int v2 = v6 & 1;
    int v7 = *(_DWORD *)(v0 + 4);
    swift_bridgeObjectRetain();
    if (v7 == v1)
    {
      int v3 = 0;
      uint64_t v61 = 0;
      uint64_t v62 = 0;
      uint64_t v58 = 1;
      goto LABEL_20;
    }
    char v8 = v4;
  }
  unsigned __int16 v9 = AGGraphGetValue();
  char v11 = v10;
  char v12 = *(id *)v9;
  id v13 = *(_WORD *)(v9 + 8);
  unsigned __int16 v14 = *(unsigned char *)(v9 + 10);
  char v15 = *(id *)v9;
  id v16 = 1;
  if (v12 == (id)1) {
    int v3 = 0;
  }
  else {
    int v3 = v11 & 1;
  }
  if (v12 == (id)1) {
    id v17 = 0;
  }
  else {
    id v17 = v12;
  }
  uint64_t v61 = v17;
  if (v12 != (id)1) {
    id v16 = v13;
  }
  uint64_t v58 = v16;
  if (v12 == (id)1) {
    char v18 = 0;
  }
  else {
    char v18 = v14;
  }
  uint64_t v62 = v18;
  uint64_t v4 = v8;
LABEL_20:
  uint64_t v60 = v0;
  uint64_t v19 = v0 + 16;
  uint64_t v59 = *(unsigned char *)(v0 + 12);
  int v20 = *(void *)(v0 + 40);
  id v57 = *(_DWORD *)(v0 + 48);
  char v21 = *(void *)(v0 + 56);
  uint64_t v55 = *(_DWORD *)(v0 + 8);
  uint64_t v23 = *(void *)AGGraphGetValue();
  if ((v2 & 1) != 0 || v3)
  {
    uint64_t v27 = 1;
    uint64_t v65 = 1;
    swift_retain();
    swift_retain();
    goto LABEL_28;
  }
  uint64_t v24 = v22;
  Outputuint64_t Value = AGGraphGetOutputValue();
  uint64_t v65 = OutputValue == 0;
  if (!OutputValue)
  {
    swift_retain();
    swift_retain();
    uint64_t v27 = 1;
LABEL_28:
    uint64_t v26 = v62;
    if (!v20) {
      goto LABEL_32;
    }
    goto LABEL_29;
  }
  uint64_t v26 = v62;
  if (v24)
  {
    swift_retain();
    uint64_t v28 = swift_retain_n();
    uint64_t v27 = PropertyList.Tracker.hasDifferentUsedValues(_:)(v28);
    swift_release();
    uint64_t v65 = v27 & 1;
    if (!v20)
    {
LABEL_32:
      if ((v27 & 1) == 0) {
        goto LABEL_33;
      }
      goto LABEL_38;
    }
LABEL_29:
    if ((v27 & 1) == 0) {
      goto LABEL_30;
    }
LABEL_38:
    PropertyList.Tracker.reset()();
    uint64_t v56 = 1;
LABEL_39:
    uint64_t v31 = v4;
    if (v26) {
      uint64_t v32 = v58;
    }
    else {
      uint64_t v32 = v58 != 0;
    }
    if (v23) {
      uint64_t v33 = *(void *)(v23 + 64);
    }
    else {
      uint64_t v33 = 0;
    }
    uint64_t v34 = *(void *)(v21 + 16);
    swift_retain_n();
    swift_retain_n();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v34 + 16));
    *(void *)(v34 + 24) = v33;
    os_unfair_lock_unlock((os_unfair_lock_t)(v34 + 16));
    swift_release();
    swift_release();
    id v35 = swift_release();
    char v94 = 0;
    uint64_t v83 = 0uLL;
    long long v84 = v32;
    long long v85 = 1;
    uint64_t v86 = 0;
    char v87 = 5;
    *(void *)&uint64_t v88 = v23;
    *((void *)&v88 + 1) = v21;
    char v89 = 0u;
    long long v90 = 0u;
    long long v91 = 0;
    long long v92 = 1;
    uint64_t v93 = v59;
    if (v32)
    {
      if (v31)
      {
        uint64_t v66 = v31;
        unsigned __int16 v67 = v53;
        id v68 = v52;
        uint64_t v69 = v51;
        unsigned __int8 v70 = v54;
        swift_bridgeObjectRetain();
        specialized Paint._apply(to:)((uint64_t)&v83);
        swift_bridgeObjectRelease();
      }
      else
      {
        specialized ForegroundStyle._apply(to:)((uint64_t)&v83);
      }
      uint64_t v36 = v62;
      if ((v62 & 1) == 0)
      {
        char v63 = 0;
        uint64_t v71 = v88;
        char v37 = MEMORY[0x263F8EE78];
        if (v87 == 1)
        {
          char v37 = v86;
          uint64_t v38 = 0;
        }
        else
        {
          uint64_t v38 = v86;
        }
        if (v87 == 1) {
          int v39 = 5;
        }
        else {
          int v39 = v87;
        }
        *(void *)&char v82 = v37;
        _ShapeStyle_Pack.createOpacities(count:name:environment:)(v58, (char *)&v63, (uint64_t *)&v71);
        outlined consume of _ShapeStyle_Shape.Result(v38, v39);
        uint64_t v86 = v82;
        char v87 = 1;
      }
    }
    else
    {
      uint64_t v36 = v62;
      if (v56) {
        specialized AnimatableAttributeHelper.reset()(v35);
      }
    }
    if ((v36 & 2) != 0)
    {
      uint64_t v83 = xmmword_24619B520;
      long long v84 = 1;
      long long v85 = 1;
      uint64_t v93 = 0;
      BackgroundStyle._apply(to:)((uint64_t)&v83);
    }
    if ((v36 & 4) != 0)
    {
      char v82 = v88;
      uint64_t v43 = v61;
      swift_retain();
      swift_retain();
      ResolvedMulticolorStyle.init(in:bundle:)((uint64_t *)&v82, (uint64_t)v61, (uint64_t)&v71);
      uint64_t v44 = 256;
      if (!BYTE1(v72)) {
        uint64_t v44 = 0;
      }
      uint64_t v45 = v44 | v72;
      uint64_t v46 = 0x10000;
      if (!BYTE2(v72)) {
        uint64_t v46 = 0;
      }
      BOOL v72 = v45 | v46;
      uint64_t v74 = 0u;
      id v75 = 0u;
      long long v76 = 0u;
      long long v77 = 6;
      long long v78 = 1065353216;
      char v79 = 0;
      int v80 = -1;
      char v63 = 2;
      if (v87 == 1) {
        uint64_t v47 = 5;
      }
      else {
        uint64_t v47 = v87;
      }
      if (v87 == 1) {
        uint64_t v48 = v86;
      }
      else {
        uint64_t v48 = MEMORY[0x263F8EE78];
      }
      if (v87 == 1) {
        char v49 = 0;
      }
      else {
        char v49 = v86;
      }
      uint64_t v81 = MEMORY[0x263F8EE78];
      *(void *)&char v82 = v48;
      uint64_t v50 = v73;
      _ShapeStyle_Pack.subscript.setter((uint64_t *)&v71, &v63, 0);
      outlined consume of _ShapeStyle_Shape.Result(v49, v47);

      int v41 = v82;
    }
    else
    {
      char v40 = v87;
      int v41 = v86;
      if (v87 != 1)
      {
        uint64_t v42 = MEMORY[0x263F8EE78];
        goto LABEL_79;
      }
    }
    swift_bridgeObjectRetain();
    char v40 = 1;
    uint64_t v42 = v41;
LABEL_79:
    id v64 = v42;
    if (*(unsigned char *)(v60 + 13))
    {
      if (!v56)
      {
LABEL_81:
        swift_release();
        swift_bridgeObjectRelease();

        swift_release();
LABEL_84:
        outlined consume of _ShapeStyle_Shape.Result(v41, v40);
        swift_release();
        swift_release();
        swift_release();
        return swift_bridgeObjectRelease();
      }
    }
    else
    {
      specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)((uint64_t)&v64, 0, v55, v19);
      if ((v65 & 1) == 0) {
        goto LABEL_81;
      }
    }
    *(void *)&uint64_t v71 = v64;
    swift_bridgeObjectRetain();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    goto LABEL_84;
  }
  swift_retain();
  swift_retain();
  if (v20)
  {
LABEL_30:
    uint64_t v56 = 0;
    goto LABEL_39;
  }
LABEL_33:
  char v29 = (_DWORD *)AGGraphGetValue();
  if (v57 != *v29 >> 1)
  {
    specialized AnimatableAttributeHelper.reset()(v29);
    uint64_t v65 = 1;
    goto LABEL_38;
  }
  swift_bridgeObjectRelease();

  swift_release();

  return swift_release();
}

{
  uint64_t v0;
  int v1;
  uint64_t v2;
  char v3;
  __int16 v4;
  int v5;
  uint64_t Value;
  uint64_t v7;
  char v8;
  int v9;
  uint64_t v10;
  char v11;
  char v12;
  id v13;
  __int16 v14;
  char v15;
  id v16;
  __int16 v17;
  id v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t OutputValue;
  char v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  id v53;
  unsigned int v54;
  int v55;
  int v56;
  unsigned __int16 v57;
  char v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  unsigned __int8 v68;
  uint64_t v69;
  char v70;
  long long v71;
  uint64_t v72;
  id v73;
  long long v74;
  long long v75;
  long long v76;
  char v77;
  int v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  long long v82;
  long long v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  char v87;
  long long v88;
  long long v89;
  long long v90;
  uint64_t v91;
  char v92;
  char v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  BOOL v98;
  uint64_t v99;
  BOOL v100;
  uint64_t v101;
  __int16 v102;
  uint64_t v103;
  uint64_t vars8;

  int64_t v103 = *MEMORY[0x263EF8340];
  uint64_t v1 = *MEMORY[0x263F288F8];
  if (*(_DWORD *)v0 == *MEMORY[0x263F288F8])
  {
    int v2 = 0;
    if (*(_DWORD *)(v0 + 4) == *(_DWORD *)v0)
    {
      int v3 = 0;
      uint64_t v4 = 0;
      char v5 = 0;
      unsigned __int16 v67 = 0;
      id v57 = 1;
      uint64_t v66 = 0;
      id v64 = 0;
      uint64_t v65 = 0;
      uint64_t v62 = 0;
      char v63 = 0;
      uint64_t v60 = 0;
      uint64_t v61 = 0;
      goto LABEL_19;
    }
    uint64_t v4 = 0;
    int v3 = 0;
    uint64_t v61 = 0;
    uint64_t v62 = 0;
    char v63 = 0;
    id v64 = 0;
    uint64_t v65 = 0;
    uint64_t v66 = 0;
  }
  else
  {
    uint64_t Value = AGGraphGetValue();
    uint64_t v61 = *(void *)Value;
    uint64_t v62 = *(void *)(Value + 8);
    char v63 = *(void *)(Value + 16);
    id v64 = *(unsigned __int8 *)(Value + 24);
    int v7 = *(void *)(Value + 32);
    uint64_t v66 = *(unsigned __int8 *)(Value + 40);
    int v2 = *(void *)(Value + 48);
    int v3 = v8 & 1;
    uint64_t v4 = *(unsigned __int8 *)(Value + 56) | (*(unsigned __int8 *)(Value + 57) << 8);
    unsigned __int16 v9 = *(_DWORD *)(v0 + 4);
    swift_bridgeObjectRetain();
    uint64_t v65 = v7;
    swift_bridgeObjectRetain();
    swift_retain();
    if (v9 == v1)
    {
      char v5 = 0;
      uint64_t v60 = 0;
      unsigned __int16 v67 = 0;
      id v57 = 1;
      goto LABEL_19;
    }
  }
  uint64_t v10 = AGGraphGetValue();
  char v12 = v11;
  id v13 = *(id *)v10;
  unsigned __int16 v14 = *(_WORD *)(v10 + 8);
  char v15 = *(unsigned char *)(v10 + 10);
  id v16 = *(id *)v10;
  id v17 = 1;
  if (v13 == (id)1) {
    char v5 = 0;
  }
  else {
    char v5 = v12 & 1;
  }
  if (v13 == (id)1) {
    char v18 = 0;
  }
  else {
    char v18 = v13;
  }
  uint64_t v60 = v18;
  if (v13 != (id)1) {
    id v17 = v14;
  }
  id v57 = v17;
  if (v13 == (id)1) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = v15;
  }
  unsigned __int16 v67 = v19;
LABEL_19:
  uint64_t v59 = v0;
  int v20 = v0 + 16;
  uint64_t v58 = *(unsigned char *)(v0 + 12);
  char v21 = *(void *)(v0 + 40);
  uint64_t v55 = *(_DWORD *)(v0 + 48);
  int v22 = *(void *)(v0 + 56);
  char v54 = *(_DWORD *)(v0 + 8);
  uint64_t v24 = *(void *)AGGraphGetValue();
  if ((v3 & 1) != 0 || v5)
  {
    uint64_t v27 = 1;
    unsigned __int8 v70 = 1;
    swift_retain();
    swift_retain();
    if (!v21) {
      goto LABEL_29;
    }
    goto LABEL_26;
  }
  uint64_t v25 = v23;
  Outputuint64_t Value = AGGraphGetOutputValue();
  unsigned __int8 v70 = OutputValue == 0;
  if (!OutputValue)
  {
    swift_retain();
    swift_retain();
    uint64_t v27 = 1;
    if (!v21) {
      goto LABEL_29;
    }
    goto LABEL_26;
  }
  if (v25)
  {
    swift_retain();
    uint64_t v31 = swift_retain_n();
    uint64_t v27 = PropertyList.Tracker.hasDifferentUsedValues(_:)(v31);
    swift_release();
    unsigned __int8 v70 = v27 & 1;
    if (!v21)
    {
LABEL_29:
      if ((v27 & 1) == 0) {
        goto LABEL_30;
      }
      goto LABEL_37;
    }
LABEL_26:
    if ((v27 & 1) == 0) {
      goto LABEL_27;
    }
LABEL_37:
    uint64_t v28 = v2;
    PropertyList.Tracker.reset()();
    uint64_t v56 = 1;
LABEL_38:
    uint64_t v32 = v4;
    if (v67) {
      uint64_t v33 = v57;
    }
    else {
      uint64_t v33 = v57 != 0;
    }
    if (v24) {
      uint64_t v34 = *(void *)(v24 + 64);
    }
    else {
      uint64_t v34 = 0;
    }
    id v35 = *(void *)(v22 + 16);
    swift_retain_n();
    swift_retain_n();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v35 + 16));
    *(void *)(v35 + 24) = v34;
    os_unfair_lock_unlock((os_unfair_lock_t)(v35 + 16));
    swift_release();
    swift_release();
    uint64_t v36 = swift_release();
    char v94 = 0;
    uint64_t v83 = 0uLL;
    long long v84 = v33;
    long long v85 = 1;
    uint64_t v86 = 0;
    char v87 = 5;
    *(void *)&uint64_t v88 = v24;
    *((void *)&v88 + 1) = v22;
    char v89 = 0u;
    long long v90 = 0u;
    long long v91 = 0;
    long long v92 = 1;
    uint64_t v93 = v58;
    if (v33)
    {
      char v37 = v28;
      if (v28)
      {
        char v95 = v61;
        char v96 = v62;
        uint64_t v97 = v63;
        char v98 = v64 != 0;
        char v99 = v65;
        id v100 = v66 != 0;
        uint64_t v101 = v28;
        char v102 = v32 & 0xFF01;
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        specialized Paint._apply(to:)((uint64_t)&v83);
        outlined consume of MeshGradient?(v61, v62, v63, v64, v65, v66, v28);
      }
      else
      {
        specialized ForegroundStyle._apply(to:)((uint64_t)&v83);
      }
      uint64_t v38 = v60;
      int v39 = v67;
      if ((v67 & 1) == 0)
      {
        id v68 = 0;
        uint64_t v71 = v88;
        char v40 = MEMORY[0x263F8EE78];
        if (v87 == 1)
        {
          char v40 = v86;
          int v41 = 0;
        }
        else
        {
          int v41 = v86;
        }
        if (v87 == 1) {
          uint64_t v42 = 5;
        }
        else {
          uint64_t v42 = v87;
        }
        *(void *)&char v82 = v40;
        _ShapeStyle_Pack.createOpacities(count:name:environment:)(v57, (char *)&v68, (uint64_t *)&v71);
        outlined consume of _ShapeStyle_Shape.Result(v41, v42);
        uint64_t v86 = v82;
        char v87 = 1;
      }
    }
    else
    {
      char v37 = v28;
      uint64_t v38 = v60;
      int v39 = v67;
      if (v56) {
        specialized AnimatableAttributeHelper.reset()(v36);
      }
    }
    if ((v39 & 2) != 0)
    {
      uint64_t v83 = xmmword_24619B520;
      long long v84 = 1;
      long long v85 = 1;
      uint64_t v93 = 0;
      BackgroundStyle._apply(to:)((uint64_t)&v83);
    }
    if ((v39 & 4) != 0)
    {
      char v82 = v88;
      uint64_t v46 = v38;
      swift_retain();
      swift_retain();
      ResolvedMulticolorStyle.init(in:bundle:)((uint64_t *)&v82, (uint64_t)v38, (uint64_t)&v71);
      uint64_t v47 = 256;
      if (!BYTE1(v72)) {
        uint64_t v47 = 0;
      }
      uint64_t v48 = v47 | v72;
      char v49 = 0x10000;
      if (!BYTE2(v72)) {
        char v49 = 0;
      }
      BOOL v72 = v48 | v49;
      uint64_t v74 = 0u;
      id v75 = 0u;
      long long v76 = 0u;
      long long v77 = 6;
      long long v78 = 1065353216;
      char v79 = 0;
      uint64_t v50 = MEMORY[0x263F8EE78];
      int v80 = -1;
      uint64_t v81 = MEMORY[0x263F8EE78];
      if (v87 == 1) {
        uint64_t v50 = v86;
      }
      id v68 = 2;
      if (v87 == 1) {
        uint64_t v51 = 0;
      }
      else {
        uint64_t v51 = v86;
      }
      if (v87 == 1) {
        uint64_t v52 = 5;
      }
      else {
        uint64_t v52 = v87;
      }
      *(void *)&char v82 = v50;
      char v53 = v73;
      _ShapeStyle_Pack.subscript.setter((uint64_t *)&v71, &v68, 0);
      outlined consume of _ShapeStyle_Shape.Result(v51, v52);

      uint64_t v44 = v82;
    }
    else
    {
      uint64_t v43 = v87;
      uint64_t v44 = v86;
      if (v87 != 1)
      {
        uint64_t v45 = MEMORY[0x263F8EE78];
        goto LABEL_77;
      }
    }
    swift_bridgeObjectRetain();
    uint64_t v43 = 1;
    uint64_t v45 = v44;
LABEL_77:
    uint64_t v69 = v45;
    if (*(unsigned char *)(v59 + 13))
    {
      if (!v56)
      {
LABEL_79:
        outlined consume of MeshGradient?(v61, v62, v63, v64, v65, v66, v37);
        swift_release();

        swift_release();
LABEL_82:
        outlined consume of _ShapeStyle_Shape.Result(v44, v43);
        swift_release();
        swift_release();
        swift_release();
        return swift_bridgeObjectRelease();
      }
    }
    else
    {
      specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)((uint64_t)&v69, 0, v54, v20);
      if ((v70 & 1) == 0) {
        goto LABEL_79;
      }
    }
    *(void *)&uint64_t v71 = v69;
    swift_bridgeObjectRetain();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();

    outlined consume of MeshGradient?(v61, v62, v63, v64, v65, v66, v37);
    goto LABEL_82;
  }
  swift_retain();
  swift_retain();
  if (v21)
  {
LABEL_27:
    uint64_t v28 = v2;
    uint64_t v56 = 0;
    goto LABEL_38;
  }
LABEL_30:
  char v29 = (_DWORD *)AGGraphGetValue();
  if (v55 != *v29 >> 1)
  {
    specialized AnimatableAttributeHelper.reset()(v29);
    unsigned __int8 v70 = 1;
    goto LABEL_37;
  }
  outlined consume of MeshGradient?(v61, v62, v63, v64, v65, v66, v2);

  swift_release();

  return swift_release();
}

Swift::Void __swiftcall PropertyList.Tracker.reset()()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 16));
  *(void *)(v1 + 24) = 0;
  if (*(void *)(*(void *)(v1 + 32) + 16))
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v6 = *(void *)(v1 + 32);
    *(void *)(v1 + 32) = 0x8000000000000000;
    type metadata accessor for _NativeDictionary<ObjectIdentifier, AnyTrackedValue>();
    _NativeDictionary.removeAll(isUnique:)(isUniquelyReferenced_nonNull_native);
    *(void *)(v1 + 32) = v6;
    swift_bridgeObjectRelease();
  }
  if (*(void *)(*(void *)(v1 + 40) + 16))
  {
    char v3 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v7 = *(void *)(v1 + 40);
    *(void *)(v1 + 40) = 0x8000000000000000;
    type metadata accessor for _NativeDictionary<ObjectIdentifier, AnyTrackedValue>();
    _NativeDictionary.removeAll(isUnique:)(v3);
    *(void *)(v1 + 40) = v7;
    swift_bridgeObjectRelease();
  }
  int v4 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v5 = *(void *)(v1 + 48);
  if (v4)
  {
    specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v5 + 16));
  }
  else
  {
    *(void *)(v1 + 48) = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(void *)(v5 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  *(unsigned char *)(v1 + 56) = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 16));

  swift_release();
}

unsigned int *specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(uint64_t a1, int64_t a2, unsigned int a3, uint64_t a4)
{
  unsigned int v260 = a3;
  uint64_t v297 = *MEMORY[0x263EF8340];
  uint64_t v8 = type metadata accessor for OSSignpostID();
  uint64_t v257 = *(void *)(v8 - 8);
  uint64_t v258 = v8;
  MEMORY[0x270FA5388](v8);
  char v259 = (char *)&v253 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity == -1) {
    goto LABEL_2;
  }
LABEL_172:
  swift_once();
LABEL_2:
  double v10 = -*(double *)&static Time.infinity;
  if (*(void *)(a4 + 24))
  {
    uint64_t Value = (double *)AGGraphGetValue();
    if (v12) {
      double v10 = *Value;
    }
  }
  uint64_t result = (unsigned int *)AGGraphGetValue();
  unsigned int v14 = *result;
  int v15 = *(_DWORD *)(a4 + 32);
  uint64_t v261 = a1;
  uint64_t v262 = a4;
  if (v15 == v14 >> 1)
  {
    if (*(unsigned char *)(a1 + 8) != 1)
    {
      uint64_t v256 = 0;
      int64_t v16 = *(void *)(a4 + 24);
      if (v16) {
        goto LABEL_103;
      }
      return result;
    }
  }
  else
  {
    specialized AnimatableAttributeHelper.reset()();
    *(unsigned char *)(a1 + 8) = 1;
  }
  int64_t v255 = a2;
  id v17 = *(int8x16_t **)a1;
  int64_t v18 = *(void *)(*(void *)a1 + 16);
  uint64_t Counter = MEMORY[0x263F8EE78];
  if (v18)
  {
    v286[0] = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    long long v266 = (char *)v18;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18, 0);
    uint64_t v19 = 0;
    uint64_t i64 = (uint64_t)v17[2].i64;
    v274.i64[0] = v286[0];
    long long v263 = v17;
    long long v264 = &v288;
    while (1)
    {
      uint64_t v20 = v19;
      uint64_t v21 = i64 + 120 * v19;
      uint64_t v273 = v20 + 1;
      long long v23 = *(_OWORD *)(v21 + 32);
      long long v22 = *(_OWORD *)(v21 + 48);
      long long v24 = *(_OWORD *)(v21 + 16);
      *(_OWORD *)v292 = *(_OWORD *)v21;
      *(_OWORD *)&v292[16] = v24;
      *(_OWORD *)&v292[32] = v23;
      *(_OWORD *)&v292[48] = v22;
      long long v25 = *(_OWORD *)(v21 + 64);
      long long v26 = *(_OWORD *)(v21 + 80);
      long long v27 = *(_OWORD *)(v21 + 96);
      uint64_t v28 = *(void *)(v21 + 112);
      uint64_t v296 = v28;
      long long v294 = v26;
      long long v295 = v27;
      long long v293 = v25;
      char v29 = (void *)*((void *)&v24 + 1);
      long long v30 = *(_OWORD *)&v292[32];
      long long v31 = *(_OWORD *)&v292[48];
      uint64_t v32 = *((void *)&v25 + 1);
      uint64_t v33 = v26;
      int v34 = HIDWORD(v26);
      switch(BYTE8(v26))
      {
        case 1:
          char v40 = *(void **)&v292[8];
          memset(v290, 0, sizeof(v290));
          int8x16_t v288 = 0u;
          int8x16_t v289 = 0u;
          int8x16_t v287 = 0u;
          unsigned __int8 v291 = 9;
          v285[0] = (uint64_t)&v287;
          int v41 = (uint64_t *)(**(void **)&v292[8] + 136);
          v276.i64[0] = *v41;
          v277.i64[0] = v28;
          v275.i64[0] = (uint64_t)v41;
          uint64_t v42 = v293;
          v272.i64[0] = v293;
          int8x16_t v278 = *(int8x16_t *)&v292[8];
          outlined retain of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)v292);
          v278.i64[0] = v278.i64[1];
          outlined copy of _ShapeStyle_Pack.Fill(v40, v278.u8[8], v29, (void *)v30, *((uint64_t *)&v30 + 1), v31, *((uint64_t *)&v31 + 1), v42, v32, v33, 1);
          ((void (*)(uint64_t *, ValueMetadata *, _UNKNOWN **))v276.i64[0])(v285, &type metadata for _ShapeStyle_Pack.Fill.AnimatableData.PaintInitVisitor, &protocol witness table for _ShapeStyle_Pack.Fill.AnimatableData.PaintInitVisitor);
          uint64_t v28 = v277.i64[0];
          outlined consume of _ShapeStyle_Pack.Fill((uint64_t)v40, v278.u8[0], (uint64_t)v29, v30, *((uint64_t *)&v30 + 1), v31, *((uint64_t *)&v31 + 1), v272.i64[0], v32, v33, 1);
          goto LABEL_27;
        case 2:
          int8x16_t v278 = *(int8x16_t *)&v292[8];
          outlined retain of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)v292);
          if (one-time initialization token for legacyInterpolation != -1) {
            swift_once();
          }
          float v36 = *(float *)&v278.i32[1];
          float v37 = *(float *)v278.i32;
          float v38 = *(float *)&v278.i32[3];
          float v39 = *(float *)&v278.i32[2];
          goto LABEL_21;
        case 3:
        case 6:
          memset(v290, 0, sizeof(v290));
          int8x16_t v288 = 0u;
          int8x16_t v289 = 0u;
          int8x16_t v287 = 0u;
          char v35 = 9;
          goto LABEL_26;
        case 4:
          float32x2_t v53 = vmul_f32((float32x2_t)vmovn_s64(*(int64x2_t *)&v292[8]), (float32x2_t)0x4300000043000000);
          v54.i64[0] = v53.u32[0];
          v54.i64[1] = v53.u32[1];
          int8x16_t v287 = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vmul_f32((float32x2_t)vshrn_n_s64(*(int64x2_t *)&v292[8], 0x20uLL), (float32x2_t)0x4300000043000000), 0x20uLL), v54);
          uint64_t v55 = v264;
          *long long v264 = 0u;
          v55[1] = 0u;
          v55[2] = 0u;
          v55[3] = 0u;
          char v35 = 1;
          goto LABEL_26;
        case 5:
          int8x16_t v287 = *(int8x16_t *)&v292[8];
          int8x16_t v288 = *(int8x16_t *)&v292[24];
          int8x16_t v289 = *(int8x16_t *)&v292[40];
          *(void *)&v290[0] = *(void *)&v292[56];
          *(_OWORD *)((char *)v290 + 8) = v293;
          *((void *)&v290[1] + 1) = v294;
          char v35 = 8;
LABEL_26:
          unsigned __int8 v291 = v35;
          outlined retain of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)v292);
LABEL_27:
          uint64_t v45 = MEMORY[0x263F8EE78];
          break;
        default:
          int8x16_t v278 = *(int8x16_t *)&v292[8];
          outlined retain of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)v292);
          if (one-time initialization token for legacyInterpolation != -1) {
            swift_once();
          }
          float v36 = *(float *)&v278.i32[1];
          float v37 = *(float *)v278.i32;
          float v38 = *(float *)&v278.i32[3];
          float v39 = *(float *)&v278.i32[2];
LABEL_21:
          swift_beginAccess();
          uint64_t v45 = MEMORY[0x263F8EE78];
          if ((static Color.Resolved.legacyInterpolation & 1) == 0)
          {
            *(float *)v44.i32 = (float)(v39 * 0.051446) + (float)((float)(v37 * 0.41222) + (float)(v36 * 0.53633));
            *(float *)v43.i32 = (float)(v39 * 0.1074) + (float)((float)(v37 * 0.2119) + (float)(v36 * 0.6807));
            int8x16_t v276 = v44;
            int8x16_t v277 = v43;
            *(float *)v43.i32 = (float)(v39 * 0.62998) + (float)((float)(v37 * 0.088302) + (float)(v36 * 0.28172));
            int8x16_t v278 = v43;
            *(float *)v46.i32 = powf(fabsf(*(float *)v44.i32), 0.33333);
            v47.i64[0] = 0x8000000080000000;
            v47.i64[1] = 0x8000000080000000;
            int8x16_t v276 = vbslq_s8(v47, v46, v276);
            *(float *)v48.i32 = powf(fabsf(*(float *)v277.i32), 0.33333);
            v49.i64[0] = 0x8000000080000000;
            v49.i64[1] = 0x8000000080000000;
            int8x16_t v277 = vbslq_s8(v49, v48, v277);
            *(float *)v50.i32 = powf(fabsf(*(float *)v278.i32), 0.33333);
            v51.i64[0] = 0x8000000080000000;
            v51.i64[1] = 0x8000000080000000;
            float v37 = *(float *)v276.i32 * v38;
            float v36 = *(float *)v277.i32 * v38;
            float v39 = *(float *)vbslq_s8(v51, v50, v278).i32 * v38;
          }
          v287.i64[0] = COERCE_UNSIGNED_INT(v37 * 128.0) | ((unint64_t)COERCE_UNSIGNED_INT(v36 * 128.0) << 32);
          v287.i64[1] = COERCE_UNSIGNED_INT(v39 * 128.0) | ((unint64_t)COERCE_UNSIGNED_INT(v38 * 128.0) << 32);
          uint64_t v52 = v264;
          *long long v264 = 0u;
          v52[1] = 0u;
          v52[2] = 0u;
          v52[3] = 0u;
          v52[4].i8[0] = 0;
          break;
      }
      int8x16_t v271 = v288;
      int8x16_t v272 = v287;
      int8x16_t v269 = (int8x16_t)v290[0];
      int8x16_t v270 = v289;
      long long v268 = v290[1];
      unsigned __int8 v56 = v291;
      int64_t v57 = *(void *)(v28 + 16);
      if (v57)
      {
        LODWORD(v267) = v291;
        v287.i64[0] = v45;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v57, 0);
        uint64_t v45 = v287.i64[0];
        uint64_t v58 = (unsigned __int8 *)(v28 + 96);
        do
        {
          char v59 = *(v58 - 19);
          int v60 = *((_DWORD *)v58 - 4);
          if (v59)
          {
            unint64_t v61 = 0;
            unint64_t v62 = 0;
            uint64_t v63 = 0;
            int8x16_t v64 = 0uLL;
          }
          else
          {
            int8x16_t v278 = *((int8x16_t *)v58 - 3);
            uint64_t v65 = *((void *)v58 - 4);
            uint64_t v66 = *((void *)v58 - 1);
            unsigned __int8 v67 = *v58;
            float v69 = *((float *)v58 - 16);
            float v68 = *((float *)v58 - 15);
            float v70 = *((float *)v58 - 14);
            float v71 = *((float *)v58 - 13);
            outlined copy of GraphicsBlendMode?(v66, *v58);
            if (one-time initialization token for legacyInterpolation != -1) {
              swift_once();
            }
            swift_beginAccess();
            if (static Color.Resolved.legacyInterpolation)
            {
              outlined consume of GraphicsBlendMode?(v66, v67);
            }
            else
            {
              *(float *)v73.i32 = (float)(v70 * 0.051446) + (float)((float)(v69 * 0.41222) + (float)(v68 * 0.53633));
              *(float *)v72.i32 = (float)(v70 * 0.1074) + (float)((float)(v69 * 0.2119) + (float)(v68 * 0.6807));
              int8x16_t v275 = v73;
              int8x16_t v276 = v72;
              *(float *)v72.i32 = (float)(v70 * 0.62998) + (float)((float)(v69 * 0.088302) + (float)(v68 * 0.28172));
              int8x16_t v277 = v72;
              *(float *)v74.i32 = powf(fabsf(*(float *)v73.i32), 0.33333);
              v75.i64[0] = 0x8000000080000000;
              v75.i64[1] = 0x8000000080000000;
              int8x16_t v275 = vbslq_s8(v75, v74, v275);
              *(float *)v76.i32 = powf(fabsf(*(float *)v276.i32), 0.33333);
              v77.i64[0] = 0x8000000080000000;
              v77.i64[1] = 0x8000000080000000;
              int8x16_t v276 = vbslq_s8(v77, v76, v276);
              *(float *)v78.i32 = powf(fabsf(*(float *)v277.i32), 0.33333);
              v79.i64[0] = 0x8000000080000000;
              v79.i64[1] = 0x8000000080000000;
              int8x16_t v277 = vbslq_s8(v79, v78, v277);
              outlined consume of GraphicsBlendMode?(v66, v67);
              float v69 = *(float *)v275.i32 * v71;
              float v68 = *(float *)v276.i32 * v71;
              float v70 = *(float *)v277.i32 * v71;
            }
            unint64_t v61 = COERCE_UNSIGNED_INT(v69 * 128.0) | ((unint64_t)COERCE_UNSIGNED_INT(v68 * 128.0) << 32);
            unint64_t v62 = COERCE_UNSIGNED_INT(v70 * 128.0) | ((unint64_t)COERCE_UNSIGNED_INT(v71 * 128.0) << 32);
            uint64_t v63 = v65;
            int8x16_t v64 = v278;
          }
          v287.i64[0] = v45;
          unint64_t v81 = *(void *)(v45 + 16);
          unint64_t v80 = *(void *)(v45 + 24);
          if (v81 >= v80 >> 1)
          {
            uint64_t v83 = v63;
            int8x16_t v278 = v64;
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v80 > 1, v81 + 1, 1);
            int8x16_t v64 = v278;
            uint64_t v63 = v83;
            uint64_t v45 = v287.i64[0];
          }
          *(void *)(v45 + 16) = v81 + 1;
          unint64_t v82 = v45 + 56 * v81;
          *(_DWORD *)(v82 + 32) = v60;
          v58 += 72;
          *(void *)(v82 + 40) = v61;
          *(void *)(v82 + 48) = v62;
          *(int8x16_t *)(v82 + 56) = v64;
          *(void *)(v82 + 72) = v63;
          *(unsigned char *)(v82 + 80) = v59;
          --v57;
        }
        while (v57);
        outlined release of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)v292);
        unsigned __int8 v56 = v267;
      }
      else
      {
        outlined release of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)v292);
      }
      uint64_t Counter = v274.i64[0];
      v286[0] = v274.i64[0];
      unint64_t v85 = *(void *)(v274.i64[0] + 16);
      unint64_t v84 = *(void *)(v274.i64[0] + 24);
      if (v85 >= v84 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v84 > 1, v85 + 1, 1);
        uint64_t Counter = v286[0];
      }
      __int16 v86 = *(_WORD *)v292;
      *(void *)(Counter + 16) = v85 + 1;
      uint64_t v87 = Counter + 112 * v85;
      *(_WORD *)(v87 + 32) = v86;
      *(int8x16_t *)(v87 + 40) = v272;
      *(int8x16_t *)(v87 + 56) = v271;
      *(int8x16_t *)(v87 + 72) = v270;
      *(int8x16_t *)(v87 + 88) = v269;
      *(_OWORD *)(v87 + 104) = v268;
      *(unsigned char *)(v87 + 120) = v56;
      *(_DWORD *)(v87 + 128) = v34;
      *(void *)(v87 + 136) = v45;
      uint64_t v19 = v273;
      if ((char *)v273 == v266) {
        break;
      }
      v274.i64[0] = Counter;
    }
    swift_bridgeObjectRelease();
    a1 = v261;
    a4 = v262;
  }
  v286[0] = Counter;
  uint64_t v88 = *(int8x16_t **)(a4 + 16);
  if (!v88) {
    goto LABEL_51;
  }
  v285[0] = *(void *)(a4 + 16);
  swift_bridgeObjectRetain();
  if (specialized static _ShapeStyle_Pack.AnimatableData.== infix(_:_:)(v286, v285))
  {
    swift_bridgeObjectRelease();
LABEL_51:
    uint64_t v256 = 0;
    goto LABEL_102;
  }
  AGGraphClearUpdate();
  uint64_t v89 = *(void *)AGGraphGetValue();
  swift_retain();
  AGGraphSetUpdate();
  uint64_t v90 = swift_retain();
  uint64_t v91 = specialized find<A>(_:key:)(v90);
  uint64_t v253 = v89;
  if (v91)
  {
    uint64_t v92 = *(void *)(v91 + 72);
    swift_retain();
    swift_release();
    uint64_t v254 = v92;
    if (v92)
    {
      uint64_t v256 = 0;
      goto LABEL_61;
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v93 = swift_retain();
  char v94 = specialized closure #1 in PropertyList.subscript.getter(v93);
  uint64_t v256 = 0;
  swift_release();
  if (v94)
  {
    if (one-time initialization token for velocityTracking != -1) {
      goto LABEL_176;
    }
    goto LABEL_58;
  }
  if (v255)
  {
    uint64_t v254 = swift_retain();
    goto LABEL_61;
  }
LABEL_168:
  swift_release();
  while (1)
  {
    swift_bridgeObjectRelease();
LABEL_102:
    uint64_t result = (unsigned int *)swift_bridgeObjectRelease();
    *(void *)(a4 + 16) = v286[0];
    int64_t v16 = *(void *)(a4 + 24);
    if (!v16) {
      return result;
    }
LABEL_103:
    uint64_t v147 = *(void *)a1;
    int64_t v148 = *(void *)(*(void *)a1 + 16);
    if (v148)
    {
      uint64_t v283 = (int *)MEMORY[0x263F8EE78];
      int64_t v255 = v16;
      int64_t v149 = v148;
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t i64 = v149;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v149, 0);
      uint64_t v150 = 0;
      uint64_t v254 = v147;
      uint64_t v273 = (uint64_t)v283;
      long long v263 = &v288;
      long long v264 = (int8x16_t *)(v147 + 32);
      while (1)
      {
        uint64_t v151 = v150;
        char v152 = &v264->i8[120 * v150];
        v272.i64[0] = v151 + 1;
        long long v154 = *((_OWORD *)v152 + 2);
        long long v153 = *((_OWORD *)v152 + 3);
        long long v155 = *((_OWORD *)v152 + 1);
        *(_OWORD *)v292 = *(_OWORD *)v152;
        *(_OWORD *)&v292[16] = v155;
        *(_OWORD *)&v292[32] = v154;
        *(_OWORD *)&v292[48] = v153;
        long long v156 = *((_OWORD *)v152 + 4);
        long long v157 = *((_OWORD *)v152 + 5);
        long long v158 = *((_OWORD *)v152 + 6);
        uint64_t v159 = *((void *)v152 + 14);
        uint64_t v296 = v159;
        long long v294 = v157;
        long long v295 = v158;
        long long v293 = v156;
        char v160 = (void *)*((void *)&v155 + 1);
        long long v161 = *(_OWORD *)&v292[32];
        long long v162 = *(_OWORD *)&v292[48];
        uint64_t v163 = *((void *)&v156 + 1);
        uint64_t v164 = v157;
        int v165 = HIDWORD(v157);
        switch(BYTE8(v157))
        {
          case 1:
            id v171 = *(void **)&v292[8];
            memset(v290, 0, sizeof(v290));
            int8x16_t v288 = 0u;
            int8x16_t v289 = 0u;
            int8x16_t v287 = 0u;
            unsigned __int8 v291 = 9;
            uint64_t v281 = &v287;
            unsigned int v172 = (uint64_t *)(**(void **)&v292[8] + 136);
            v276.i64[0] = *v172;
            v277.i64[0] = v159;
            v275.i64[0] = (uint64_t)v172;
            uint64_t v173 = v293;
            v274.i64[0] = v293;
            int8x16_t v278 = *(int8x16_t *)&v292[8];
            outlined retain of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)v292);
            v278.i64[0] = v278.i64[1];
            outlined copy of _ShapeStyle_Pack.Fill(v171, v278.u8[8], v160, (void *)v161, *((uint64_t *)&v161 + 1), v162, *((uint64_t *)&v162 + 1), v173, v163, v164, 1);
            ((void (*)(int8x16_t **, ValueMetadata *, _UNKNOWN **))v276.i64[0])(&v281, &type metadata for _ShapeStyle_Pack.Fill.AnimatableData.PaintInitVisitor, &protocol witness table for _ShapeStyle_Pack.Fill.AnimatableData.PaintInitVisitor);
            uint64_t v159 = v277.i64[0];
            outlined consume of _ShapeStyle_Pack.Fill((uint64_t)v171, v278.u8[0], (uint64_t)v160, v161, *((uint64_t *)&v161 + 1), v162, *((uint64_t *)&v162 + 1), v274.i64[0], v163, v164, 1);
            break;
          case 2:
            int8x16_t v278 = *(int8x16_t *)&v292[8];
            outlined retain of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)v292);
            if (one-time initialization token for legacyInterpolation != -1) {
              swift_once();
            }
            float v167 = *(float *)&v278.i32[1];
            float v168 = *(float *)v278.i32;
            float v169 = *(float *)&v278.i32[3];
            float v170 = *(float *)&v278.i32[2];
            goto LABEL_114;
          case 3:
          case 6:
            memset(v290, 0, sizeof(v290));
            int8x16_t v288 = 0u;
            int8x16_t v289 = 0u;
            int8x16_t v287 = 0u;
            char v166 = 9;
            goto LABEL_119;
          case 4:
            float32x2_t v183 = vmul_f32((float32x2_t)vmovn_s64(*(int64x2_t *)&v292[8]), (float32x2_t)0x4300000043000000);
            v184.i64[0] = v183.u32[0];
            v184.i64[1] = v183.u32[1];
            int8x16_t v287 = vorrq_s8((int8x16_t)vshll_n_s32((int32x2_t)vmul_f32((float32x2_t)vshrn_n_s64(*(int64x2_t *)&v292[8], 0x20uLL), (float32x2_t)0x4300000043000000), 0x20uLL), v184);
            uint64_t v185 = v263;
            int8x16_t *v263 = 0u;
            v185[1] = 0u;
            v185[2] = 0u;
            v185[3] = 0u;
            char v166 = 1;
            goto LABEL_119;
          case 5:
            int8x16_t v287 = *(int8x16_t *)&v292[8];
            int8x16_t v288 = *(int8x16_t *)&v292[24];
            int8x16_t v289 = *(int8x16_t *)&v292[40];
            *(void *)&v290[0] = *(void *)&v292[56];
            *(_OWORD *)((char *)v290 + 8) = v156;
            *((void *)&v290[1] + 1) = v294;
            char v166 = 8;
LABEL_119:
            unsigned __int8 v291 = v166;
            outlined retain of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)v292);
            break;
          default:
            int8x16_t v278 = *(int8x16_t *)&v292[8];
            outlined retain of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)v292);
            if (one-time initialization token for legacyInterpolation != -1) {
              swift_once();
            }
            float v167 = *(float *)&v278.i32[1];
            float v168 = *(float *)v278.i32;
            float v169 = *(float *)&v278.i32[3];
            float v170 = *(float *)&v278.i32[2];
LABEL_114:
            swift_beginAccess();
            if ((static Color.Resolved.legacyInterpolation & 1) == 0)
            {
              *(float *)v175.i32 = (float)(v170 * 0.051446) + (float)((float)(v168 * 0.41222) + (float)(v167 * 0.53633));
              *(float *)v174.i32 = (float)(v170 * 0.1074) + (float)((float)(v168 * 0.2119) + (float)(v167 * 0.6807));
              int8x16_t v276 = v175;
              int8x16_t v277 = v174;
              *(float *)v174.i32 = (float)(v170 * 0.62998) + (float)((float)(v168 * 0.088302) + (float)(v167 * 0.28172));
              int8x16_t v278 = v174;
              *(float *)v176.i32 = powf(fabsf(*(float *)v175.i32), 0.33333);
              v177.i64[0] = 0x8000000080000000;
              v177.i64[1] = 0x8000000080000000;
              int8x16_t v276 = vbslq_s8(v177, v176, v276);
              *(float *)v178.i32 = powf(fabsf(*(float *)v277.i32), 0.33333);
              v179.i64[0] = 0x8000000080000000;
              v179.i64[1] = 0x8000000080000000;
              int8x16_t v277 = vbslq_s8(v179, v178, v277);
              *(float *)v180.i32 = powf(fabsf(*(float *)v278.i32), 0.33333);
              v181.i64[0] = 0x8000000080000000;
              v181.i64[1] = 0x8000000080000000;
              float v168 = *(float *)v276.i32 * v169;
              float v167 = *(float *)v277.i32 * v169;
              float v170 = *(float *)vbslq_s8(v181, v180, v278).i32 * v169;
            }
            v287.i64[0] = COERCE_UNSIGNED_INT(v168 * 128.0) | ((unint64_t)COERCE_UNSIGNED_INT(v167 * 128.0) << 32);
            v287.i64[1] = COERCE_UNSIGNED_INT(v170 * 128.0) | ((unint64_t)COERCE_UNSIGNED_INT(v169 * 128.0) << 32);
            uint64_t v182 = v263;
            int8x16_t *v263 = 0u;
            v182[1] = 0u;
            v182[2] = 0u;
            v182[3] = 0u;
            v182[4].i8[0] = 0;
            break;
        }
        int8x16_t v270 = v288;
        int8x16_t v271 = v287;
        long long v268 = v290[0];
        int8x16_t v269 = v289;
        long long v267 = v290[1];
        uint64_t Counter = v291;
        int64_t v186 = *(void *)(v159 + 16);
        if (v186)
        {
          LODWORD(v266) = v291;
          v287.i64[0] = MEMORY[0x263F8EE78];
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v186, 0);
          uint64_t v187 = v287.i64[0];
          char v188 = (unsigned __int8 *)(v159 + 96);
          do
          {
            char v189 = *(v188 - 19);
            int v190 = *((_DWORD *)v188 - 4);
            if (v189)
            {
              unint64_t v191 = 0;
              unint64_t v192 = 0;
              uint64_t v193 = 0;
              int8x16_t v194 = 0uLL;
            }
            else
            {
              int8x16_t v278 = *((int8x16_t *)v188 - 3);
              v277.i64[0] = *((void *)v188 - 4);
              uint64_t v195 = *((void *)v188 - 1);
              unsigned __int8 v196 = *v188;
              float v198 = *((float *)v188 - 16);
              float v197 = *((float *)v188 - 15);
              float v199 = *((float *)v188 - 14);
              float v200 = *((float *)v188 - 13);
              outlined copy of GraphicsBlendMode?(v195, *v188);
              if (one-time initialization token for legacyInterpolation != -1) {
                swift_once();
              }
              swift_beginAccess();
              if (static Color.Resolved.legacyInterpolation)
              {
                outlined consume of GraphicsBlendMode?(v195, v196);
              }
              else
              {
                *(float *)v202.i32 = (float)(v199 * 0.051446)
                                   + (float)((float)(v198 * 0.41222) + (float)(v197 * 0.53633));
                *(float *)v201.i32 = (float)(v199 * 0.1074) + (float)((float)(v198 * 0.2119) + (float)(v197 * 0.6807));
                int8x16_t v274 = v202;
                int8x16_t v275 = v201;
                *(float *)v201.i32 = (float)(v199 * 0.62998)
                                   + (float)((float)(v198 * 0.088302) + (float)(v197 * 0.28172));
                int8x16_t v276 = v201;
                *(float *)v203.i32 = powf(fabsf(*(float *)v202.i32), 0.33333);
                v204.i64[0] = 0x8000000080000000;
                v204.i64[1] = 0x8000000080000000;
                int8x16_t v274 = vbslq_s8(v204, v203, v274);
                *(float *)v205.i32 = powf(fabsf(*(float *)v275.i32), 0.33333);
                v206.i64[0] = 0x8000000080000000;
                v206.i64[1] = 0x8000000080000000;
                int8x16_t v275 = vbslq_s8(v206, v205, v275);
                *(float *)v207.i32 = powf(fabsf(*(float *)v276.i32), 0.33333);
                v208.i64[0] = 0x8000000080000000;
                v208.i64[1] = 0x8000000080000000;
                int8x16_t v276 = vbslq_s8(v208, v207, v276);
                outlined consume of GraphicsBlendMode?(v195, v196);
                float v198 = *(float *)v274.i32 * v200;
                float v197 = *(float *)v275.i32 * v200;
                float v199 = *(float *)v276.i32 * v200;
              }
              unint64_t v191 = COERCE_UNSIGNED_INT(v198 * 128.0) | ((unint64_t)COERCE_UNSIGNED_INT(v197 * 128.0) << 32);
              unint64_t v192 = COERCE_UNSIGNED_INT(v199 * 128.0) | ((unint64_t)COERCE_UNSIGNED_INT(v200 * 128.0) << 32);
              uint64_t v193 = v277.i64[0];
              int8x16_t v194 = v278;
            }
            v287.i64[0] = v187;
            unint64_t v210 = *(void *)(v187 + 16);
            unint64_t v209 = *(void *)(v187 + 24);
            if (v210 >= v209 >> 1)
            {
              uint64_t v212 = v193;
              int8x16_t v278 = v194;
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v209 > 1, v210 + 1, 1);
              int8x16_t v194 = v278;
              uint64_t v193 = v212;
              uint64_t v187 = v287.i64[0];
            }
            *(void *)(v187 + 16) = v210 + 1;
            unint64_t v211 = v187 + 56 * v210;
            *(_DWORD *)(v211 + 32) = v190;
            v188 += 72;
            *(void *)(v211 + 40) = v191;
            *(void *)(v211 + 48) = v192;
            *(int8x16_t *)(v211 + 56) = v194;
            *(void *)(v211 + 72) = v193;
            *(unsigned char *)(v211 + 80) = v189;
            --v186;
          }
          while (v186);
          outlined release of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)v292);
          uint64_t Counter = v266;
        }
        else
        {
          outlined release of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)v292);
          uint64_t v187 = MEMORY[0x263F8EE78];
        }
        uint64_t v213 = (int *)v273;
        uint64_t v283 = (int *)v273;
        unint64_t v215 = *(void *)(v273 + 16);
        unint64_t v214 = *(void *)(v273 + 24);
        if (v215 >= v214 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v214 > 1, v215 + 1, 1);
          uint64_t v213 = v283;
        }
        __int16 v216 = *(_WORD *)v292;
        *((void *)v213 + 2) = v215 + 1;
        uint64_t v217 = &v213[28 * v215];
        *((_WORD *)v217 + 16) = v216;
        *(int8x16_t *)(v217 + 10) = v271;
        *(int8x16_t *)(v217 + 14) = v270;
        *(int8x16_t *)(v217 + 18) = v269;
        *(_OWORD *)(v217 + 22) = v268;
        *(_OWORD *)(v217 + 26) = v267;
        *((unsigned char *)v217 + 120) = Counter;
        v217[32] = v165;
        *((void *)v217 + 17) = v187;
        uint64_t v150 = v272.i64[0];
        if (v272.i64[0] == i64) {
          break;
        }
        uint64_t v273 = (uint64_t)v213;
      }
      uint64_t v218 = v213;
      swift_bridgeObjectRelease();
      uint64_t v219 = v218;
      a1 = v261;
      int64_t v16 = v255;
    }
    else
    {
      swift_retain();
      uint64_t v219 = (int *)MEMORY[0x263F8EE78];
    }
    uint64_t v283 = v219;
    v292[0] = 0;
    if ((specialized AnimatorState.update(_:at:environment:)((uint64_t)&v283, v260, v10) & 1) == 0) {
      break;
    }
    swift_bridgeObjectRetain();
    swift_retain_n();
    a4 = static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_152;
    }
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v88 = (int8x16_t *)&lazy cache variable for type metadata for GeometryEffectTransform<_Rotation3DEffect>;
    int v220 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_152:
      swift_release_n();
      goto LABEL_153;
    }
    swift_retain();
    id v221 = v220;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    uint64_t v222 = swift_allocObject();
    *(_OWORD *)(v222 + 16) = xmmword_2461BE2B0;
    int CurrentAttribute = AGGraphGetCurrentAttribute();
    int v224 = *MEMORY[0x263F288F8];
    if (CurrentAttribute == *MEMORY[0x263F288F8]) {
      goto LABEL_174;
    }
    id v225 = (id)AGGraphGetAttributeGraph();
    uint64_t Counter = AGGraphGetCounter();

    uint64_t v226 = MEMORY[0x263F8DA20];
    *(void *)(v222 + 56) = MEMORY[0x263F8D9D0];
    *(void *)(v222 + 64) = v226;
    *(void *)(v222 + 32) = Counter;
    int v227 = AGGraphGetCurrentAttribute();
    if (v227 != v224)
    {
      uint64_t v228 = MEMORY[0x263F8E960];
      *(void *)(v222 + 96) = MEMORY[0x263F8E8F8];
      *(void *)(v222 + 104) = v228;
      *(_DWORD *)(v222 + 72) = v227;
      *(void *)(v222 + 136) = MEMORY[0x263F8D310];
      *(void *)(v222 + 144) = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v222 + 112) = 0xD000000000000010;
      *(void *)(v222 + 120) = 0x8000000246222DE0;
      char v282 = a4;
      uint64_t v280 = _signpostLog;
      uint64_t v281 = (int8x16_t *)&dword_245728000;
      *(void *)v292 = "AnimationState";
      *(void *)&v292[8] = 14;
      v292[16] = 2;
      v287.i64[0] = (uint64_t)"Animation: (%p) [%d] %{public}@ ended";
      v287.i64[1] = 37;
      v288.i8[0] = 2;
      uint64_t v279 = v222;
      int v229 = v259;
      specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
      swift_release_n();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v257 + 8))(v229, v258);
LABEL_153:
      uint64_t v235 = swift_bridgeObjectRelease();
      uint64_t v236 = v262;
      if (*(void *)(v262 + 24))
      {
        specialized AnimatorState.removeListeners()(v235);
        swift_release();
      }
      *(void *)(v236 + 24) = 0;
      goto LABEL_156;
    }
LABEL_175:
    __break(1u);
LABEL_176:
    swift_once();
LABEL_58:
    uint64_t v254 = static Animation.velocityTracking;
    swift_retain();
LABEL_61:
    uint64_t v284 = (void *)Counter;
    char v95 = (int8x16_t *)v88[1].i64[0];
    long long v266 = (char *)v88;
    if (v95)
    {
      a2 = *(void *)(Counter + 16);
      if (a2)
      {
        char v96 = v88 + 2;
        swift_bridgeObjectRetain();
        uint64_t v97 = 0;
        a1 = 0;
        long long v264 = v95;
        uint64_t i64 = a2;
        long long v263 = v88 + 2;
        while ((unint64_t)a1 < *(void *)(Counter + 16))
        {
          if ((unint64_t)v97 >= v88[1].i64[0]) {
            goto LABEL_170;
          }
          uint64_t v98 = Counter + 112 * a1;
          unsigned int v99 = *(unsigned __int8 *)(v98 + 32);
          unsigned int v100 = *(unsigned __int8 *)(v98 + 33);
          i8 = v96[7 * v97].i8;
          unsigned int v102 = *i8;
          unsigned int v103 = i8[1];
          if (v99 == v102 && v100 == v103)
          {
            v276.i64[0] = v97;
            float v107 = v96[7 * v97].i8;
            uint64_t v108 = *((void *)v107 + 1);
            uint64_t v109 = *((void *)v107 + 2);
            uint64_t v110 = *((void *)v107 + 3);
            uint64_t v111 = *((void *)v107 + 4);
            uint64_t v112 = *((void *)v107 + 5);
            uint64_t v113 = *((void *)v107 + 6);
            uint64_t v114 = *((void *)v107 + 7);
            uint64_t v115 = *((void *)v107 + 8);
            uint64_t v116 = *((void *)v107 + 9);
            uint64_t v117 = *((void *)v107 + 10);
            float v118 = *((float *)v107 + 24);
            uint64_t v119 = *((void *)v107 + 13);
            v272.i32[0] = v107[88];
            uint64_t v273 = v117;
            v274.i64[0] = v116;
            a2 = v108;
            uint64_t v120 = v109;
            v277.i64[0] = v110;
            uint64_t v121 = v111;
            uint64_t v122 = v112;
            uint64_t v123 = v113;
            v278.i64[0] = v114;
            a4 = v115;
            outlined copy of _ShapeStyle_Pack.Fill.AnimatableData(v108, v109, v110, v111, v112, v113, v114, v115, v116, v117, v272.i8[0]);
            v275.i64[0] = v119;
            swift_bridgeObjectRetain();
            long long v124 = (void *)Counter;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              long long v124 = specialized _ArrayBuffer._consumeAndCreateNew()((void *)Counter);
            }
            if ((unint64_t)a1 >= v124[2]) {
              goto LABEL_171;
            }
            v270.i64[0] = a2;
            *(void *)v292 = a2;
            *(void *)&v292[8] = v120;
            uint64_t v125 = (float *)&v124[14 * a1];
            v271.i64[0] = a1;
            uint64_t v126 = v277.i64[0];
            *(void *)&v292[16] = v277.i64[0];
            *(void *)&v292[24] = v121;
            v269.i64[0] = v122;
            *(void *)&v292[32] = v122;
            *(void *)&long long v268 = v123;
            *(void *)&v292[40] = v123;
            *(void *)&v292[48] = v278.i64[0];
            *(void *)&long long v267 = a4;
            *(void *)&v292[56] = a4;
            uint64_t v128 = v273;
            uint64_t v127 = v274.i64[0];
            *(void *)&long long v293 = v274.i64[0];
            *((void *)&v293 + 1) = v273;
            char v129 = v272.i8[0];
            LOBYTE(v294) = v272.i8[0];
            specialized static _ShapeStyle_Pack.Fill.AnimatableData.-= infix(_:_:)((uint64_t)(v125 + 10), (uint64_t)v292);
            v125[32] = v125[32] - v118;
            uint64_t v130 = v275.i64[0];
            swift_bridgeObjectRetain();
            specialized static AnimatableArray.-= infix(_:_:)((uint64_t)(v125 + 34), v130);
            swift_bridgeObjectRelease();
            uint64_t v131 = v126;
            uint64_t v132 = v271.i64[0];
            outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v270.i64[0], v120, v131, v121, v269.i64[0], v268, v278.i64[0], v267, v127, v128, v129);
            swift_bridgeObjectRelease();
            uint64_t v284 = v124;
            a1 = v132 + 1;
            uint64_t v97 = v276.i64[0] + 1;
            a4 = v262;
            char v96 = v263;
            uint64_t Counter = (uint64_t)v124;
            a2 = i64;
            uint64_t v88 = (int8x16_t *)v266;
            char v95 = v264;
            if (a1 >= i64)
            {
LABEL_85:
              uint64_t Counter = v253;
              if (a2 >= a1)
              {
                specialized Array.replaceSubrange<A>(_:with:)(a1, a2);
                a1 = v261;
                goto LABEL_90;
              }
              __break(1u);
LABEL_174:
              __break(1u);
              goto LABEL_175;
            }
          }
          else
          {
            BOOL v105 = v100 < v103 && v99 == v102;
            if (v99 >= v102 && !v105)
            {
              ++v97;
              if (a1 >= a2) {
                goto LABEL_85;
              }
            }
            else if (++a1 >= a2)
            {
              goto LABEL_85;
            }
          }
          if (v97 >= (uint64_t)v95) {
            goto LABEL_85;
          }
        }
        __break(1u);
LABEL_170:
        __break(1u);
LABEL_171:
        __break(1u);
        goto LABEL_172;
      }
      uint64_t v284 = v88->i64;
      swift_bridgeObjectRetain();
      _ShapeStyle_Pack.AnimatableData.scale(by:)(-1.0);
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    uint64_t Counter = v253;
LABEL_90:
    double v10 = *(double *)AGGraphGetValue();
    if (*(void *)(a4 + 24))
    {
      uint64_t v133 = (uint64_t)v284;
      swift_retain();
      v292[0] = 0;
      specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v254, v133, v10);
      swift_retain_n();
      swift_bridgeObjectRetain();
      char v134 = static os_signpost_type_t.event.getter();
      static os_signpost_type_t.event.getter();
      if ((kdebug_is_enabled() & 1) == 0) {
        goto LABEL_98;
      }
      if (one-time initialization token for _signpostLog != -1) {
        swift_once();
      }
      uint64_t v135 = (void *)_signpostLog;
      if (OS_os_log.signpostsEnabled.getter())
      {
        uint64_t v136 = Counter;
        swift_retain();
        id v137 = v135;
        OSSignpostID.init(log:object:)();
        type metadata accessor for _ContiguousArrayStorage<CVarArg>();
        uint64_t v138 = swift_allocObject();
        *(_OWORD *)(v138 + 16) = xmmword_2461BE2B0;
        int v139 = AGGraphGetCurrentAttribute();
        int v140 = *MEMORY[0x263F288F8];
        if (v139 == *MEMORY[0x263F288F8])
        {
          __break(1u);
LABEL_178:
          __break(1u);
LABEL_179:
          __break(1u);
LABEL_180:
          __break(1u);
        }
        id v141 = (id)AGGraphGetAttributeGraph();
        uint64_t v142 = AGGraphGetCounter();

        uint64_t v143 = MEMORY[0x263F8DA20];
        *(void *)(v138 + 56) = MEMORY[0x263F8D9D0];
        *(void *)(v138 + 64) = v143;
        *(void *)(v138 + 32) = v142;
        int v144 = AGGraphGetCurrentAttribute();
        if (v144 == v140) {
          goto LABEL_178;
        }
        uint64_t v145 = MEMORY[0x263F8E960];
        *(void *)(v138 + 96) = MEMORY[0x263F8E8F8];
        *(void *)(v138 + 104) = v145;
        *(_DWORD *)(v138 + 72) = v144;
        *(void *)(v138 + 136) = MEMORY[0x263F8D310];
        *(void *)(v138 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v138 + 112) = 0xD000000000000010;
        *(void *)(v138 + 120) = 0x8000000246222DE0;
        LOBYTE(v279) = v134;
        uint64_t v283 = &dword_245728000;
        uint64_t v280 = v138;
        uint64_t v281 = (int8x16_t *)_signpostLog;
        *(void *)v292 = "AnimationState";
        *(void *)&v292[8] = 14;
        v292[16] = 2;
        v287.i64[0] = (uint64_t)"Animation: (%p) [%d] %{public}@ updated";
        v287.i64[1] = 39;
        v288.i8[0] = 2;
        id v146 = v259;
        specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
        swift_release_n();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v257 + 8))(v146, v258);
        swift_bridgeObjectRelease();
        uint64_t Counter = v136;
      }
      else
      {
LABEL_98:
        swift_release_n();
        swift_bridgeObjectRelease();
      }
      a4 = v262;
      if (!*(void *)(v262 + 24))
      {
LABEL_167:
        __break(1u);
        goto LABEL_168;
      }
    }
    else
    {
      uint64_t v237 = (uint64_t)v284;
      type metadata accessor for AnimatorState<CGFloat>(0, &lazy cache variable for type metadata for AnimatorState<_ShapeStyle_Pack.AnimatableData>, (uint64_t (*)(void))lazy protocol witness table accessor for type _ShapeStyle_Pack.AnimatableData and conformance _ShapeStyle_Pack.AnimatableData, (uint64_t)&type metadata for _ShapeStyle_Pack.AnimatableData, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnimatorState);
      swift_allocObject();
      swift_retain();
      uint64_t v238 = v254;
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v239 = specialized AnimatorState.init(animation:interval:at:in:)(v238, v237, v10);
      swift_bridgeObjectRetain();
      swift_retain();
      char v240 = static os_signpost_type_t.begin.getter();
      static os_signpost_type_t.event.getter();
      if ((kdebug_is_enabled() & 1) == 0) {
        goto LABEL_165;
      }
      if (one-time initialization token for _signpostLog != -1) {
        swift_once();
      }
      uint64_t v241 = (void *)_signpostLog;
      if (OS_os_log.signpostsEnabled.getter())
      {
        uint64_t v242 = Counter;
        swift_retain();
        id v243 = v241;
        OSSignpostID.init(log:object:)();
        type metadata accessor for _ContiguousArrayStorage<CVarArg>();
        uint64_t v244 = swift_allocObject();
        *(_OWORD *)(v244 + 16) = xmmword_2461BE2B0;
        int v245 = AGGraphGetCurrentAttribute();
        int v246 = *MEMORY[0x263F288F8];
        if (v245 == *MEMORY[0x263F288F8]) {
          goto LABEL_179;
        }
        id v247 = (id)AGGraphGetAttributeGraph();
        uint64_t v248 = AGGraphGetCounter();

        uint64_t v249 = MEMORY[0x263F8DA20];
        *(void *)(v244 + 56) = MEMORY[0x263F8D9D0];
        *(void *)(v244 + 64) = v249;
        *(void *)(v244 + 32) = v248;
        int v250 = AGGraphGetCurrentAttribute();
        if (v250 == v246) {
          goto LABEL_180;
        }
        uint64_t v251 = MEMORY[0x263F8E960];
        *(void *)(v244 + 96) = MEMORY[0x263F8E8F8];
        *(void *)(v244 + 104) = v251;
        *(_DWORD *)(v244 + 72) = v250;
        *(void *)(v244 + 136) = MEMORY[0x263F8D310];
        *(void *)(v244 + 144) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v244 + 112) = 0xD000000000000010;
        *(void *)(v244 + 120) = 0x8000000246222DE0;
        LOBYTE(v279) = v240;
        uint64_t v283 = &dword_245728000;
        uint64_t v280 = v244;
        uint64_t v281 = (int8x16_t *)_signpostLog;
        *(void *)v292 = "AnimationState";
        *(void *)&v292[8] = 14;
        v292[16] = 2;
        v287.i64[0] = (uint64_t)"Animation: (%p) [%d] %{public}@ started";
        v287.i64[1] = 39;
        v288.i8[0] = 2;
        uint64_t v252 = v259;
        specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
        swift_release();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v257 + 8))(v252, v258);
        swift_bridgeObjectRelease();
        uint64_t Counter = v242;
      }
      else
      {
LABEL_165:
        swift_release();
        swift_bridgeObjectRelease();
      }
      a4 = v262;
      swift_release();
      *(void *)(a4 + 24) = v239;
      if (!v239) {
        goto LABEL_167;
      }
    }
    swift_retain();
    specialized AnimatorState.addListeners(transaction:)();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  double v230 = *(double *)(v16 + 48);
  v287.i64[0] = *(void *)(v16 + 56);
  uint64_t v231 = *(unsigned int *)(v16 + 72);
  unsigned __int8 v232 = *(unsigned char *)(v16 + 76);
  unint64_t v233 = *(void (**)(int8x16_t *, unint64_t, double))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared)
                                                                      + 0x58);
  v234 = static CoreGlue.shared;
  LOBYTE(v281) = v232;
  v233(&v287, v231 | ((unint64_t)v232 << 32), v230);

LABEL_156:
  v287.i64[0] = (uint64_t)v283;
  swift_bridgeObjectRetain();
  _ShapeStyle_Pack.animatableData.setter(v287.i64);
  swift_bridgeObjectRelease();
  uint64_t result = (unsigned int *)swift_release();
  *(unsigned char *)(a1 + 8) = 1;
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<[Path?]>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for (key: _ShapeStyle_Pack.Key, data: AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>)()
{
  if (!lazy cache variable for type metadata for (key: _ShapeStyle_Pack.Key, data: AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>))
  {
    type metadata accessor for AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (key: _ShapeStyle_Pack.Key, data: AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>));
    }
  }
}

void type metadata accessor for _NativeDictionary<ObjectIdentifier, AnyTrackedValue>()
{
  if (!lazy cache variable for type metadata for _NativeDictionary<ObjectIdentifier, AnyTrackedValue>)
  {
    type metadata accessor for ScrollStateRequest(255, (unint64_t *)&lazy cache variable for type metadata for AnyTrackedValue);
    unint64_t v0 = type metadata accessor for _NativeDictionary();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _NativeDictionary<ObjectIdentifier, AnyTrackedValue>);
    }
  }
}

unint64_t _ShapeStyle_Pack.Slice.init(pack:name:)@<X0>(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *a1;
  unsigned __int8 v5 = *a2;
  uint64_t v13 = *a1;
  unsigned __int8 v12 = v5;
  unint64_t result = _ShapeStyle_Pack.indices(of:)(&v12);
  if (result == v7)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
      goto LABEL_14;
    }
    char v8 = 0;
    unint64_t v9 = *(void *)(v4 + 16);
LABEL_7:
    if (v9 >= result)
    {
      BOOL v11 = __OFSUB__(v9, v7);
      BOOL v10 = (uint64_t)(v9 - v7) < 0;
    }
    else
    {
      BOOL v11 = 0;
      BOOL v10 = 1;
    }
    if (v10 == v11)
    {
      if ((v7 & 0x8000000000000000) == 0)
      {
        *(void *)a3 = v4;
        *(void *)(a3 + 8) = v4 + 32;
        *(void *)(a3 + 16) = result;
        *(void *)(a3 + 24) = (2 * v7) | 1;
        *(unsigned char *)(a3 + 32) = v8;
        return result;
      }
      goto LABEL_15;
    }
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if ((result & 0x8000000000000000) != 0)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  unint64_t v9 = *(void *)(v4 + 16);
  if (result < v9)
  {
    char v8 = *(unsigned char *)(v4 + 120 * result + 33);
    goto LABEL_7;
  }
LABEL_17:
  __break(1u);
  return result;
}

uint64_t _ShapeStyle_Pack.createOpacities(count:name:environment:)(uint64_t a1, char *a2, uint64_t *a3)
{
  char v4 = *a2;
  uint64_t v48 = *a3;
  int8x16_t v47 = (void *)a3[1];
  uint64_t v5 = *v3;
  uint64_t v66 = *v3;
  char v46 = v4;
  LOBYTE(v58) = v4;
  uint64_t result = _ShapeStyle_Pack.indices(of:)((unsigned __int8 *)&v58);
  uint64_t v57 = result;
  if (__OFSUB__(v7, result)) {
    goto LABEL_31;
  }
  if (v7 - result == 1 && a1 >= 2)
  {
    uint64_t v66 = v48;
    unsigned __int8 v67 = v47;
    uint64_t result = (uint64_t)EnvironmentValues.systemColorDefinition.getter();
    if (v57 < 0)
    {
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    if ((unint64_t)v57 >= *(void *)(v5 + 16))
    {
LABEL_33:
      __break(1u);
      return result;
    }
    uint64_t v10 = v5 + 120 * v57;
    long long v12 = *(_OWORD *)(v10 + 64);
    long long v11 = *(_OWORD *)(v10 + 80);
    long long v13 = *(_OWORD *)(v10 + 48);
    long long v58 = *(_OWORD *)(v10 + 32);
    long long v59 = v13;
    long long v60 = v12;
    long long v61 = v11;
    long long v14 = *(_OWORD *)(v10 + 96);
    long long v15 = *(_OWORD *)(v10 + 112);
    long long v16 = *(_OWORD *)(v10 + 128);
    int8x16_t v50 = *(void **)(v10 + 144);
    uint64_t v65 = v50;
    long long v63 = v15;
    long long v64 = v16;
    long long v62 = v14;
    uint64_t v54 = v59;
    uint64_t v55 = (void *)*((void *)&v58 + 1);
    uint64_t v17 = *((void *)&v60 + 1);
    uint64_t v52 = (void *)v60;
    float32x2_t v53 = (void *)*((void *)&v59 + 1);
    uint64_t v18 = v61;
    uint64_t v20 = *((void *)&v14 + 1);
    uint64_t v19 = v14;
    uint64_t v21 = v15;
    char v22 = BYTE8(v15);
    float v23 = *((float *)&v15 + 3);
    uint64_t v24 = v16;
    unsigned __int8 v25 = BYTE8(v16);
    uint64_t v44 = *((void *)&v61 + 1);
    uint64_t v45 = *(float (**)(void))(v9 + 16);
    outlined retain of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)&v58);
    uint64_t v26 = 1;
    uint64_t v42 = v19;
    uint64_t v43 = v18;
    uint64_t v40 = v21;
    uint64_t v41 = v20;
    while (1)
    {
      uint64_t v51 = v26;
      float v27 = v45();
      uint64_t v28 = v50[2];
      outlined copy of _ShapeStyle_Pack.Fill(v55, v54, v53, v52, v17, v18, v44, v19, v20, v21, v22);
      outlined copy of GraphicsBlendMode?(v24, v25);
      uint64_t result = swift_bridgeObjectRetain();
      if (v28) {
        break;
      }
LABEL_23:
      if (*(void *)(*(void *)v56 + 16) < v51 + v57) {
        goto LABEL_29;
      }
      if (v57 < -1) {
        goto LABEL_30;
      }
      LOBYTE(v66) = v46;
      BYTE1(v66) = v51;
      unsigned __int8 v67 = v55;
      uint64_t v68 = v54;
      float v69 = v53;
      float v70 = v52;
      uint64_t v19 = v42;
      uint64_t v18 = v43;
      uint64_t v71 = v17;
      uint64_t v72 = v43;
      uint64_t v73 = v44;
      uint64_t v74 = v42;
      uint64_t v21 = v40;
      uint64_t v20 = v41;
      uint64_t v75 = v41;
      uint64_t v76 = v40;
      char v22 = v39;
      char v77 = v39;
      float v78 = v23 * v27;
      uint64_t v79 = v24;
      unsigned __int8 v80 = v25;
      uint64_t v81 = result;
      specialized Array.replaceSubrange<A>(_:with:)(v51 + v57, v51 + v57, (uint64_t)&v66);
      uint64_t v26 = v51 + 1;
      if (v51 + 1 == a1) {
        return outlined release of (key: _ShapeStyle_Pack.Key, style: _ShapeStyle_Pack.Style)((uint64_t)&v58);
      }
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t result = (uint64_t)v50;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v50);
    }
    unint64_t v30 = *(void *)(result + 16);
    unint64_t v31 = v28 - 1;
    if (v28 - 1 >= v30) {
      unint64_t v31 = *(void *)(result + 16);
    }
    if (v31 > 1)
    {
      unint64_t v33 = v31 + 1;
      uint64_t v34 = v33 & 1;
      if ((v33 & 1) == 0) {
        uint64_t v34 = 2;
      }
      unint64_t v32 = v33 - v34;
      char v35 = (float *)(result + 152);
      unint64_t v36 = v32;
      do
      {
        float v37 = v27 * *v35;
        *(v35 - 18) = v27 * *(v35 - 18);
        *char v35 = v37;
        v35 += 36;
        v36 -= 2;
      }
      while (v36);
    }
    else
    {
      unint64_t v32 = 0;
    }
    uint64_t v38 = 72 * v32 + 80;
    while (v32 < v30)
    {
      ++v32;
      *(float *)(result + v38) = v27 * *(float *)(result + v38);
      v38 += 72;
      if (v28 == v32) {
        goto LABEL_23;
      }
    }
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  return result;
}

unint64_t _ShapeStyle_Pack.indices(of:)(unsigned __int8 *a1)
{
  unint64_t v2 = *(void *)(*(void *)v1 + 16);
  if (!v2) {
    return 0;
  }
  unint64_t result = 0;
  int v5 = *a1;
  for (i = (unsigned __int8 *)(*(void *)v1 + 32); *i != v5; i += 120)
  {
    if (v2 == ++result) {
      return *(void *)(*(void *)v1 + 16);
    }
  }
  if (result < v2)
  {
    uint64_t v7 = result;
    while (1)
    {
      if (v2 == v7)
      {
        __break(1u);
        goto LABEL_17;
      }
      if (*i != v5) {
        break;
      }
      ++v7;
      i += 120;
      if (v2 == v7)
      {
        uint64_t v7 = *(void *)(*(void *)v1 + 16);
        break;
      }
    }
    if (v7 >= (uint64_t)result) {
      return result;
    }
LABEL_17:
    __break(1u);
  }
  return result;
}

unint64_t type metadata accessor for AnyTrackedValue()
{
  unint64_t result = lazy cache variable for type metadata for AnyTrackedValue;
  if (!lazy cache variable for type metadata for AnyTrackedValue)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for AnyTrackedValue);
  }
  return result;
}

_DWORD *specialized AnimatableAttributeHelper.reset()()
{
  if (*(void *)(v0 + 24))
  {
    specialized AnimatorState.removeListeners()();
    swift_release();
  }
  *(void *)(v0 + 24) = 0;
  swift_bridgeObjectRelease();
  *(void *)(v0 + 16) = 0;
  unint64_t result = (_DWORD *)AGGraphGetValue();
  *(_DWORD *)(v0 + 32) = *result >> 1;
  return result;
}

{
  uint64_t v0;
  _DWORD *result;

  if (*(void *)(v0 + 32))
  {
    specialized AnimatorState.removeListeners()();
    swift_release();
  }
  *(void *)(v0 + 32) = 0;
  *(void *)(v0 + 16) = 0;
  *(unsigned char *)(v0 + 24) = 1;
  unint64_t result = (_DWORD *)AGGraphGetValue();
  *(_DWORD *)(v0 + 40) = *result >> 1;
  return result;
}

{
  uint64_t v0;
  _DWORD *result;

  if (*(void *)(v0 + 88))
  {
    specialized AnimatorState.removeListeners()();
    swift_release();
  }
  *(void *)(v0 + 88) = 0;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(unsigned char *)(v0 + 80) = 1;
  unint64_t result = (_DWORD *)AGGraphGetValue();
  *(_DWORD *)(v0 + 96) = *result >> 1;
  return result;
}

{
  uint64_t v0;
  _DWORD *result;

  if (*(void *)(v0 + 48))
  {
    specialized AnimatorState.removeListeners()();
    swift_release();
  }
  *(void *)(v0 + 48) = 0;
  *(void *)(v0 + 24) = 0;
  *(void *)(v0 + 32) = 0;
  *(void *)(v0 + 16) = 0;
  *(unsigned char *)(v0 + 40) = 1;
  unint64_t result = (_DWORD *)AGGraphGetValue();
  *(_DWORD *)(v0 + 56) = *result >> 1;
  return result;
}

{
  uint64_t v0;
  _DWORD *result;

  if (*(void *)(v0 + 56))
  {
    specialized AnimatorState.removeListeners()();
    swift_release();
  }
  *(void *)(v0 + 56) = 0;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(unsigned char *)(v0 + 48) = 1;
  unint64_t result = (_DWORD *)AGGraphGetValue();
  *(_DWORD *)(v0 + 64) = *result >> 1;
  return result;
}

{
  uint64_t v0;
  _DWORD *result;

  if (*(void *)(v0 + 48))
  {
    specialized AnimatorState.removeListeners()();
    swift_release();
  }
  *(void *)(v0 + 48) = 0;
  outlined consume of AnimatablePair<AnimatableArray<Float>, AnimatablePair<AnimatableArray<AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>, AnimatablePair<Float, AnimatablePair<Float, AnimatablePair<Float, Float>>>>>?(*(void *)(v0 + 16));
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  unint64_t result = (_DWORD *)AGGraphGetValue();
  *(_DWORD *)(v0 + 56) = *result >> 1;
  return result;
}

{
  uint64_t v0;
  _DWORD *result;

  if (*(void *)(v0 + 40))
  {
    specialized AnimatorState.removeListeners()();
    swift_release();
  }
  *(void *)(v0 + 40) = 0;
  *(void *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = 0;
  *(unsigned char *)(v0 + 32) = 1;
  unint64_t result = (_DWORD *)AGGraphGetValue();
  *(_DWORD *)(v0 + 48) = *result >> 1;
  return result;
}

{
  uint64_t v0;
  _DWORD *result;

  if (*(void *)(v0 + 64))
  {
    specialized AnimatorState.removeListeners()();
    swift_release();
  }
  *(void *)(v0 + 64) = 0;
  swift_bridgeObjectRelease();
  *(_OWORD *)(v0 + 41) = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  unint64_t result = (_DWORD *)AGGraphGetValue();
  *(_DWORD *)(v0 + 72) = *result >> 1;
  return result;
}

{
  uint64_t v0;
  _DWORD *result;

  if (*(void *)(v0 + 64))
  {
    specialized AnimatorState.removeListeners()();
    swift_release();
  }
  *(void *)(v0 + 64) = 0;
  swift_bridgeObjectRelease();
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  unint64_t result = (_DWORD *)AGGraphGetValue();
  *(_DWORD *)(v0 + 72) = *result >> 1;
  return result;
}

{
  uint64_t v0;
  _DWORD *result;

  if (*(void *)(v0 + 32))
  {
    specialized AnimatorState.removeListeners()();
    swift_release();
  }
  *(void *)(v0 + 32) = 0;
  swift_bridgeObjectRelease();
  *(void *)(v0 + 16) = 0;
  *(unsigned char *)(v0 + 24) = 0;
  unint64_t result = (_DWORD *)AGGraphGetValue();
  *(_DWORD *)(v0 + 40) = *result >> 1;
  return result;
}

{
  uint64_t v0;
  _DWORD *result;

  if (*(void *)(v0 + 120))
  {
    specialized AnimatorState.removeListeners()();
    swift_release();
  }
  *(void *)(v0 + 120) = 0;
  outlined consume of AnimatablePair<_ShapeStyle_Pack.Fill.AnimatableData, AnimatablePair<Float, AnimatableArray<AnimatablePair<Float, _ShapeStyle_Pack.Effect.Kind.AnimatableData>>>>?(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(_OWORD *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112));
  *(void *)(v0 + 112) = 0;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_OWORD *)(v0 + 96) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  unint64_t result = (_DWORD *)AGGraphGetValue();
  *(_DWORD *)(v0 + 128) = *result >> 1;
  return result;
}

{
  uint64_t v0;
  _DWORD *result;

  if (*(void *)(v0 + 104))
  {
    specialized AnimatorState.removeListeners()();
    swift_release();
  }
  *(void *)(v0 + 104) = 0;
  outlined consume of _ShapeStyle_Pack.Fill.AnimatableData?(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(unsigned char *)(v0 + 96));
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(unsigned char *)(v0 + 96) = -1;
  unint64_t result = (_DWORD *)AGGraphGetValue();
  *(_DWORD *)(v0 + 112) = *result >> 1;
  return result;
}

{
  uint64_t v0;
  _DWORD *result;

  if (*(void *)(v0 + 64))
  {
    specialized AnimatorState.removeListeners()();
    swift_release();
  }
  *(void *)(v0 + 64) = 0;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 41) = 0u;
  *(unsigned char *)(v0 + 57) = 1;
  unint64_t result = (_DWORD *)AGGraphGetValue();
  *(_DWORD *)(v0 + 72) = *result >> 1;
  return result;
}

{
  uint64_t v0;
  _DWORD *result;

  if (*(void *)(v0 + 72))
  {
    specialized AnimatorState.removeListeners()();
    swift_release();
  }
  *(void *)(v0 + 72) = 0;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_WORD *)(v0 + 64) = 256;
  unint64_t result = (_DWORD *)AGGraphGetValue();
  *(_DWORD *)(v0 + 80) = *result >> 1;
  return result;
}

{
  uint64_t v0;
  _DWORD *result;

  if (*(void *)(v0 + 64))
  {
    specialized AnimatorState.removeListeners()();
    swift_release();
  }
  *(void *)(v0 + 64) = 0;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(void *)(v0 + 48) = 0;
  *(unsigned char *)(v0 + 56) = 1;
  unint64_t result = (_DWORD *)AGGraphGetValue();
  *(_DWORD *)(v0 + 72) = *result >> 1;
  return result;
}

{
  uint64_t v0;
  _DWORD *result;

  if (*(void *)(v0 + 40))
  {
    specialized AnimatorState.removeListeners()();
    swift_release();
  }
  *(void *)(v0 + 40) = 0;
  *(void *)(v0 + 12) = 0;
  *(void *)(v0 + 28) = 0;
  *(void *)(v0 + 20) = 0;
  *(unsigned char *)(v0 + 36) = 1;
  unint64_t result = (_DWORD *)AGGraphGetValue();
  *(_DWORD *)(v0 + 48) = *result >> 1;
  return result;
}

{
  uint64_t v0;
  _DWORD *result;

  if (*(void *)(v0 + 32))
  {
    specialized AnimatorState.removeListeners()();
    swift_release();
  }
  *(void *)(v0 + 32) = 0;
  *(void *)(v0 + 20) = 0;
  *(void *)(v0 + 12) = 0;
  *(unsigned char *)(v0 + 28) = 1;
  unint64_t result = (_DWORD *)AGGraphGetValue();
  *(_DWORD *)(v0 + 40) = *result >> 1;
  return result;
}

{
  uint64_t v0;
  _DWORD *result;

  if (*(void *)(v0 + 56))
  {
    specialized AnimatorState.removeListeners()();
    swift_release();
  }
  *(void *)(v0 + 56) = 0;
  outlined destroy of _AnyAnimatableData?(v0 + 16);
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(void *)(v0 + 48) = 0;
  unint64_t result = (_DWORD *)AGGraphGetValue();
  *(_DWORD *)(v0 + 64) = *result >> 1;
  return result;
}

uint64_t ResolvedMulticolorStyle.init(in:bundle:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  v31[0] = *a1;
  v31[1] = v5;
  float v7 = specialized Color.AccentColorProvider.resolve(in:)(v31);
  int v9 = v8;
  int v11 = v10;
  int v13 = v12;
  if (v5)
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v6, &v30);
    swift_release_n();
    swift_release_n();
    char v14 = v30;
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v6, &v30);
    swift_release_n();
    swift_release_n();
    char v15 = v30;
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v6, &v30);
    swift_release_n();
    uint64_t result = swift_release_n();
    char v17 = v30;
  }
  else
  {
    _s7SwiftUI22EnvironmentPropertyKeyVyAA011ColorSchemeE033_0E72AB1FBE33AED1E73FF06F3DA3A071LLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ColorSchemeKey>, (uint64_t)&type metadata for ColorSchemeKey, (uint64_t)&protocol witness table for ColorSchemeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    BloomFilter.init(hashValue:)(v18);
    uint64_t v19 = v31[0];
    uint64_t v20 = swift_retain_n();
    uint64_t v21 = specialized find1<A>(_:key:filter:)(v20, v19);
    if (v21) {
      char v14 = *(unsigned char *)(v21 + 72);
    }
    else {
      char v14 = 0;
    }
    swift_release_n();
    _s7SwiftUI22EnvironmentPropertyKeyVyAA011ColorSchemeE033_0E72AB1FBE33AED1E73FF06F3DA3A071LLVGMaTm_0(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ColorSchemeContrastKey>, (uint64_t)&type metadata for ColorSchemeContrastKey, (uint64_t)&protocol witness table for ColorSchemeContrastKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    BloomFilter.init(hashValue:)(v22);
    uint64_t v23 = v31[0];
    uint64_t v24 = swift_retain_n();
    uint64_t v25 = specialized find1<A>(_:key:filter:)(v24, v23);
    if (v25) {
      char v15 = *(unsigned char *)(v25 + 72);
    }
    else {
      char v15 = 0;
    }
    swift_release_n();
    _s7SwiftUI22EnvironmentPropertyKeyVyAA011ColorSchemeE033_0E72AB1FBE33AED1E73FF06F3DA3A071LLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DisplayGamutKey>, (uint64_t)&type metadata for DisplayGamutKey, (uint64_t)&protocol witness table for DisplayGamutKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    BloomFilter.init(hashValue:)(v26);
    uint64_t v27 = v31[0];
    uint64_t v28 = swift_retain_n();
    uint64_t v29 = specialized find1<A>(_:key:filter:)(v28, v27);
    if (v29) {
      char v17 = *(unsigned char *)(v29 + 72);
    }
    else {
      char v17 = 0;
    }
    uint64_t result = swift_release_n();
  }
  *(float *)a3 = v7;
  *(_DWORD *)(a3 + 4) = v9;
  *(_DWORD *)(a3 + 8) = v11;
  *(_DWORD *)(a3 + 12) = v13;
  *(unsigned char *)(a3 + 16) = v14;
  *(unsigned char *)(a3 + 17) = v15;
  *(unsigned char *)(a3 + 18) = v17;
  *(void *)(a3 + 24) = a2;
  return result;
}

uint64_t ScaledMetric.init(wrappedValue:relativeTo:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v7 = *a2;
  *(void *)a4 = swift_getKeyPath();
  *(unsigned char *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = swift_getKeyPath();
  *(unsigned char *)(a4 + 24) = 0;
  uint64_t v8 = type metadata accessor for ScaledMetric();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a4 + *(int *)(v8 + 40), a1, a3);
  *(unsigned char *)(a4 + *(int *)(v8 + 44)) = v7;
  return result;
}

uint64_t ScaledMetric.init(wrappedValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = swift_getKeyPath();
  *(unsigned char *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = swift_getKeyPath();
  *(unsigned char *)(a3 + 24) = 0;
  uint64_t v6 = type metadata accessor for ScaledMetric();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3 + *(int *)(v6 + 40), a1, a2);
  *(unsigned char *)(a3 + *(int *)(v6 + 44)) = 6;
  return result;
}

uint64_t type metadata accessor for ScaledMetric()
{
  return __swift_instantiateGenericMetadata();
}

double PlacementContext.size.getter()
{
  if (*(unsigned char *)(v0 + 48)) {
    return *(double *)AGGraphGetInputValue();
  }
  else {
    return *(double *)(v0 + 16);
  }
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _GeometryGroupEffect(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ColorMonochromeEffect._Resolved(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static RendererEffect.makeRendererEffect(effect:inputs:body:));
}

uint64_t (*specialized closure #1 in closure #1 in Rule<>.cachedValue(options:owner:)())()
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Rule<>.cachedValue(options:owner:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Rule<>.cachedValue(options:owner:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Rule<>.cachedValue(options:owner:);
}

uint64_t View.padding(_:_:)(char a1, uint64_t a2, char a3, uint64_t a4)
{
  v6[0] = a1;
  if (a3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = a2;
  }
  uint64_t v7 = v4;
  uint64_t v8 = v4;
  uint64_t v9 = v4;
  uint64_t v10 = v4;
  char v11 = a3 & 1;
  return View.modifier<A>(_:)(v6, a4, &type metadata for _PaddingLayout);
}

uint64_t ViewGraph.$zeroPoint.getter()
{
  return *(unsigned int *)(v0 + 248);
}

uint64_t _ViewInputs.safeAreaInsets.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 76) = result;
  return result;
}

uint64_t _ViewInputs.containerSize.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 80) = result;
  return result;
}

ValueMetadata *type metadata accessor for HoverEffectContext()
{
  return &type metadata for HoverEffectContext;
}

ValueMetadata *type metadata accessor for AnyGradient()
{
  return &type metadata for AnyGradient;
}

uint64_t type metadata accessor for InvertedViewInputPredicate()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t _ViewInputs.textAlwaysOnProvider.setter(uint64_t a1, uint64_t a2)
{
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, a1, a2);
  return swift_release();
}

void type metadata accessor for TextAlwaysOnProvider.Type?()
{
  if (!lazy cache variable for type metadata for TextAlwaysOnProvider.Type?)
  {
    type metadata accessor for ImageStyleProtocol.Type(255, &lazy cache variable for type metadata for TextAlwaysOnProvider.Type, &lazy cache variable for type metadata for TextAlwaysOnProvider);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TextAlwaysOnProvider.Type?);
    }
  }
}

void partial apply for closure #1 in closure #1 in withGradientStorage(count:valuesPerLocation:element:do:)(uint64_t a1, uint64_t a2)
{
  closure #1 in closure #1 in withGradientStorage(count:valuesPerLocation:element:do:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void (**)(void))(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 56), *(void (**)(uint64_t, uint64_t))(v2 + 64));
}

void closure #1 in closure #1 in withGradientStorage(count:valuesPerLocation:element:do:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(void), uint64_t a7, uint64_t a8, void (*a9)(uint64_t, uint64_t))
{
  type metadata accessor for RBColor(0);
  if (v16 != a3)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (a1 != MEMORY[0x263F8EF38])
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if ((a5 & 0x8000000000000000) == 0)
  {
    if (!a5)
    {
LABEL_8:
      a9(a4, a2);
      return;
    }
    uint64_t v17 = 0;
    uint64_t v18 = a4;
    while ((unsigned __int128)(v17 * (__int128)a8) >> 64 == (v17 * a8) >> 63)
    {
      uint64_t v19 = v17 + 1;
      a6();
      v18 += 16;
      uint64_t v17 = v19;
      if (a5 == v19) {
        goto LABEL_8;
      }
    }
    __break(1u);
    goto LABEL_10;
  }
LABEL_12:
  __break(1u);
}

unint64_t partial apply for closure #1 in withGradient(_:in:colorSpace:do:)(unint64_t a1, float *a2, void *a3)
{
  return closure #1 in withGradient(_:in:colorSpace:do:)(a1, a2, a3, *(void *)(v3 + 16), *(void *)(v3 + 24), *(void *)(v3 + 32), *(_DWORD *)(v3 + 40));
}

unint64_t closure #1 in withGradient(_:in:colorSpace:do:)(unint64_t result, float *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  unint64_t v7 = result;
  if (*(void *)(a4 + 16) <= result)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  uint64_t v11 = a4 + 32;
  uint64_t v12 = *(void *)(a4 + 32 + 16 * result);
  v25[0] = a5;
  v25[1] = a6;
  int v13 = *(float (**)(void *))(*(void *)v12 + 104);
  swift_retain();
  float v14 = v13(v25);
  int v16 = v15;
  int v18 = v17;
  int v20 = v19;
  uint64_t result = swift_release();
  if (a7 != 2)
  {
    uint64_t result = RBColorFromLinear();
    float v14 = v21;
    int v16 = v22;
    int v18 = v23;
    int v20 = v24;
  }
  *a2 = v14;
  *((_DWORD *)a2 + 1) = v16;
  *((_DWORD *)a2 + 2) = v18;
  *((_DWORD *)a2 + 3) = v20;
  *a3 = *(void *)(v11 + 16 * v7 + 8);
  return result;
}

void type metadata accessor for RBColor(uint64_t a1)
{
}

uint64_t partial apply for closure #2 in withGradient(_:in:colorSpace:do:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, void))(v2 + 16))(*(void *)(v2 + 32), a1, a2, 0);
}

uint64_t partial apply for closure #1 in GraphicsContext.Storage.Shared.setGradient(_:geometry:options:in:colorSpace:)(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  return closure #1 in GraphicsContext.Storage.Shared.setGradient(_:geometry:options:in:colorSpace:)(a1, a2, a3, a4, *(void *)(v4 + 16), *(long long **)(v4 + 24), *(_DWORD *)(v4 + 32));
}

uint64_t closure #1 in GraphicsContext.Storage.Shared.setGradient(_:geometry:options:in:colorSpace:)(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, long long *a6, char a7)
{
  outlined init with take of GraphicsContext.GradientGeometry(a6, (uint64_t)v14);
  uint64_t v12 = RBGradientFlags.union(_:)(a7, a4);
  return GraphicsContext.Storage.Shared.setGradient(count:colors:locations:geometry:flags:)(a1, a2, a3, v14, v12);
}

uint64_t RBGradientFlags.union(_:)(char a1, unsigned int a2)
{
  unsigned int v2 = a2 & 0xFFFFFFF8 | 1;
  if ((a1 & 1) == 0) {
    unsigned int v2 = a2;
  }
  unsigned int v3 = a2 & 0xFFFFFFF8 | 2;
  if ((a1 & 2) == 0) {
    unsigned int v3 = v2;
  }
  if ((a1 & 4) != 0) {
    unsigned int v3 = v3 & 0xFFFFFF3F | 0x40;
  }
  BOOL v4 = (a1 & 8) == 0;
  if ((v3 & 0xF00) != 0) {
    BOOL v4 = 1;
  }
  if (v4 | ((unsigned __int16)(v3 & 0x400) >> 10)) {
    return v3;
  }
  else {
    return v3 | 0x400;
  }
}

uint64_t GraphicsContext.Storage.Shared.setGradient(count:colors:locations:geometry:flags:)(uint64_t a1, uint64_t a2, uint64_t a3, double *a4, uint64_t a5)
{
  CGFloat v7 = *a4;
  CGFloat v6 = a4[1];
  switch(*((unsigned char *)a4 + 48))
  {
    case 1:
      objc_msgSend(*(id *)(v5 + 40), sel_setRadialGradientCenter_startRadius_endRadius_stopCount_colors_locations_flags_, a1, a2, a3, a5, *a4, a4[1], a4[2], a4[3]);
      break;
    case 2:
      objc_msgSend(*(id *)(v5 + 40), sel_setRadialGradientStartCenter_startRadius_endCenter_endRadius_stopCount_colors_locations_flags_, a1, a2, a3, a5, *a4, a4[1], a4[2], a4[3], a4[4], a4[5]);
      break;
    case 3:
      CGFloat v8 = a4[2];
      CGFloat v9 = a4[3];
      uint64_t v10 = *(void **)(v5 + 40);
      objc_msgSend(v10, sel_setRadialGradientCenter_startRadius_endRadius_stopCount_colors_locations_flags_, a1, a2, a3, a5, 0.0, 0.0, a4[4], a4[5]);
      v14.origin.double x = v7;
      v14.origin.double y = v6;
      v14.size.double width = v8;
      v14.size.double height = v9;
      CGFloat Width = CGRectGetWidth(v14);
      v15.origin.double x = v7;
      v15.origin.double y = v6;
      v15.size.double width = v8;
      v15.size.double height = v9;
      *(CGFloat *)int v13 = Width;
      v13[1] = 0;
      v13[2] = 0;
      v13[3] = CGRectGetHeight(v15);
      *(CGFloat *)&v13[4] = v7;
      *(CGFloat *)&v13[5] = v6;
      objc_msgSend(v10, sel_concat_, v13);
      break;
    case 4:
      objc_msgSend(*(id *)(v5 + 40), sel_setConicGradientCenter_angle_stopCount_colors_locations_flags_, a1, a2, a3, a5, *a4, a4[1], a4[2]);
      break;
    case 5:
      objc_msgSend(*(id *)(v5 + 40), sel_setAngularGradientCenter_startAngle_endAngle_stopCount_colors_colorSpace_locations_flags_, a1, a2, 0, a3, a5, *a4, a4[1], a4[2], a4[3]);
      break;
    default:
      objc_msgSend(*(id *)(v5 + 40), sel_setAxialGradientStartPoint_endPoint_stopCount_colors_locations_flags_, a1, a2, a3, a5, *a4, a4[1], a4[2], a4[3]);
      break;
  }
  *(void *)(v5 + 264) = 0;
  return swift_release();
}

uint64_t key path getter for EnvironmentValues.tintAdjustmentMode : EnvironmentValues@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, &v6);
    swift_release_n();
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, &v6);
  }
  uint64_t result = swift_release_n();
  *a2 = v6;
  return result;
}

uint64_t key path setter for EnvironmentValues.tintAdjustmentMode : EnvironmentValues(unsigned __int8 *a1)
{
  unsigned __int8 v2 = *a1;
  return EnvironmentValues.tintAdjustmentMode.setter(&v2);
}

uint64_t EnvironmentValues.tintAdjustmentMode.setter(unsigned __int8 *a1)
{
  uint64_t v2 = *v1;
  unsigned __int8 v3 = *a1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, v3);
  swift_release();
  if (v1[1])
  {
    uint64_t v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v2, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<TintAdjustmentModeKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<TintAdjustmentModeKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<TintAdjustmentModeKey>, (uint64_t)&type metadata for TintAdjustmentModeKey, (uint64_t)&protocol witness table for TintAdjustmentModeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<TintAdjustmentModeKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<TintAdjustmentModeKey>>);
    }
  }
}

uint64_t Color.resolve(in:)(long long *a1, uint64_t a2)
{
  long long v3 = *a1;
  return (*(uint64_t (**)(long long *))(*(void *)a2 + 104))(&v3);
}

void _ShadowEffect.resolve(in:)(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>)
{
  long long v13 = *a1;
  *(float *)a3 = (*(float (**)(long long *))(*(void *)a2 + 104))(&v13);
  *(_DWORD *)(a3 + 4) = v10;
  *(_DWORD *)(a3 + 8) = v11;
  *(_DWORD *)(a3 + 12) = v12;
  *(double *)(a3 + 16) = a4;
  *(double *)(a3 + 24) = a5;
  *(double *)(a3 + 32) = a6;
  *(_DWORD *)(a3 + 40) = 1056964608;
  *(unsigned char *)(a3 + 44) = 0;
}

void type metadata accessor for _AnyResolvedPaint<MeshGradient._Paint>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI8GradientV4StopVG_AF08ResolvedF0VAIVs5NeverOTg503_s7d3UI8f16V7resolve2inAA08h31C0VAA17EnvironmentValuesV_tFAG4G10VAcJVXEfU_AF0pQ0VTf1cn_n(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI8GradientV4StopVG_AF08ResolvedF0VAIVs5NeverOTg503_s7d3UI8f16V7resolve2inAA08h31C0VAA17EnvironmentValuesV_tFAG4G10VAcJVXEfU_AF0pQ0VTf1cn_nTf4ng_n(a1, a2, a3);
  swift_release();
  swift_release();
  return v3;
}

uint64_t type metadata accessor for _AnyResolvedPaint()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type LinearGradient._Paint and conformance LinearGradient._Paint()
{
  unint64_t result = lazy protocol witness table cache variable for type LinearGradient._Paint and conformance LinearGradient._Paint;
  if (!lazy protocol witness table cache variable for type LinearGradient._Paint and conformance LinearGradient._Paint)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinearGradient._Paint and conformance LinearGradient._Paint);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LinearGradient._Paint and conformance LinearGradient._Paint;
  if (!lazy protocol witness table cache variable for type LinearGradient._Paint and conformance LinearGradient._Paint)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinearGradient._Paint and conformance LinearGradient._Paint);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LinearGradient._Paint and conformance LinearGradient._Paint;
  if (!lazy protocol witness table cache variable for type LinearGradient._Paint and conformance LinearGradient._Paint)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinearGradient._Paint and conformance LinearGradient._Paint);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EllipticalGradient._Paint and conformance EllipticalGradient._Paint()
{
  unint64_t result = lazy protocol witness table cache variable for type EllipticalGradient._Paint and conformance EllipticalGradient._Paint;
  if (!lazy protocol witness table cache variable for type EllipticalGradient._Paint and conformance EllipticalGradient._Paint)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EllipticalGradient._Paint and conformance EllipticalGradient._Paint);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EllipticalGradient._Paint and conformance EllipticalGradient._Paint;
  if (!lazy protocol witness table cache variable for type EllipticalGradient._Paint and conformance EllipticalGradient._Paint)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EllipticalGradient._Paint and conformance EllipticalGradient._Paint);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EllipticalGradient._Paint and conformance EllipticalGradient._Paint;
  if (!lazy protocol witness table cache variable for type EllipticalGradient._Paint and conformance EllipticalGradient._Paint)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EllipticalGradient._Paint and conformance EllipticalGradient._Paint);
  }
  return result;
}

float EnvironmentValues.resolvedTintColor.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  if (v2)
  {
    swift_retain_n();
    swift_retain_n();
    uint64_t v3 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    swift_release_n();
    swift_release_n();
    if (!v3) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    uint64_t v3 = specialized closure #1 in PropertyList.subscript.getter(v4, (uint64_t)v9);
    swift_release_n();
    if (!v3)
    {
LABEL_6:
      type metadata accessor for ColorBox<Color.AccentColorProvider>();
      uint64_t v5 = swift_allocObject();
      goto LABEL_7;
    }
  }
  uint64_t v5 = specialized ShapeStyle.fallbackColor(in:level:)(v1, v2, 0, v3);
  swift_release();
  if (!v5) {
    goto LABEL_6;
  }
LABEL_7:
  v8[0] = v1;
  v8[1] = v2;
  float v6 = (*(float (**)(void *))(*(void *)v5 + 104))(v8);
  swift_release();
  return v6;
}

uint64_t protocol witness for ShapeStyle._apply(to:) in conformance TintShapeStyle(uint64_t a1)
{
  return TintShapeStyle._apply(to:)(a1);
}

uint64_t TintShapeStyle._apply(to:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (!*(void *)(a1 + 56))
  {
    uint64_t v5 = swift_retain_n();
    uint64_t v3 = specialized closure #1 in PropertyList.subscript.getter(v5, (uint64_t)&v6);
    swift_release_n();
    if (v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  swift_retain_n();
  swift_retain_n();
  uint64_t v3 = specialized PropertyList.Tracker.value<A>(_:for:)(v2);
  swift_release_n();
  swift_release_n();
  if (!v3)
  {
LABEL_3:
    type metadata accessor for ColorBox<Color.AccentColorProvider>();
    uint64_t v3 = swift_allocObject();
  }
LABEL_4:
  (*(void (**)(uint64_t))(*(void *)v3 + 80))(a1);
  return swift_release();
}

void type metadata accessor for ColorBox<Color.AccentColorProvider>()
{
  if (!lazy cache variable for type metadata for ColorBox<Color.AccentColorProvider>)
  {
    lazy protocol witness table accessor for type Color.AccentColorProvider and conformance Color.AccentColorProvider();
    unint64_t v0 = type metadata accessor for ColorBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<Color.AccentColorProvider>);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<TintKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<TintKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TintKey>, (uint64_t)&type metadata for TintKey, (uint64_t)&protocol witness table for TintKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<TintKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<TintKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<TintKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<TintKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<TintKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TintKey>, (uint64_t)&type metadata for TintKey, (uint64_t)&protocol witness table for TintKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TintKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t specialized EnvironmentalViewChild.updateValue()()
{
  uint64_t v71 = *MEMORY[0x263EF8340];
  uint64_t v67 = type metadata accessor for OSSignpostID();
  uint64_t v1 = *(void *)(v67 - 8);
  MEMORY[0x270FA5388](v67);
  uint64_t v66 = (char *)&v56 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v56 - v4;
  unint64_t v6 = *(void *)(v0 + 8);
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  char v9 = v8;
  uint64_t v10 = *Value;
  uint64_t v11 = (uint64_t *)AGGraphGetValue();
  uint64_t v13 = *v11;
  uint64_t v14 = v11[1];
  if (v9)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    goto LABEL_10;
  }
  char v15 = v12;
  swift_retain();
  if (v15)
  {
    swift_retain_n();
    swift_retain();
    char v16 = PropertyList.Tracker.hasDifferentUsedValues(_:)(v13);
    swift_release();
    if (v16) {
      goto LABEL_10;
    }
  }
  else
  {
    swift_retain();
    swift_retain();
  }
  if (!AGGraphGetOutputValue())
  {
LABEL_10:
    PropertyList.Tracker.reset()();
    if (v13) {
      uint64_t v18 = *(void *)(v13 + 64);
    }
    else {
      uint64_t v18 = 0;
    }
    uint64_t v19 = *(void *)(v6 + 16);
    swift_retain_n();
    swift_retain_n();
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v19 + 16));
    *(void *)(v19 + 24) = v18;
    os_unfair_lock_unlock((os_unfair_lock_t)(v19 + 16));
    swift_release();
    swift_release();
    swift_release();
    swift_retain();
    static os_signpost_type_t.event.getter();
    if (!kdebug_is_enabled())
    {
      unint64_t v68 = v13;
      unint64_t v69 = v6;
      float v43 = (*(float (**)(unint64_t *))(*(void *)v10 + 104))(&v68);
      unsigned int v45 = v44;
      unsigned int v47 = v46;
      unsigned int v49 = v48;
      swift_release();
LABEL_27:
      unint64_t v68 = __PAIR64__(v45, LODWORD(v43));
      unint64_t v69 = __PAIR64__(v49, v47);
      AGGraphSetOutputValue();
      swift_release();
      swift_release();
      swift_release_n();
      return swift_release();
    }
    uint64_t v62 = v14;
    uint64_t v63 = v1;
    uint64_t v60 = v10;
    unint64_t v61 = v13;
    static OSSignpostID.exclusive.getter();
    int v58 = static os_signpost_type_t.begin.getter();
    type metadata accessor for ViewList?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8], MEMORY[0x263F8E0F8]);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2461BDD50;
    uint64_t v21 = AGTypeID.description.getter();
    uint64_t v23 = v22;
    uint64_t v24 = MEMORY[0x263F8D310];
    *(void *)(inited + 56) = MEMORY[0x263F8D310];
    uint64_t v25 = (uint64_t)v5;
    unint64_t v26 = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(inited + 32) = v21;
    *(void *)(inited + 64) = v26;
    *(void *)(inited + 40) = v23;
    *(void *)(inited + 72) = specialized static Tracing.libraryName(defining:)();
    *(void *)(inited + 96) = v24;
    *(void *)(inited + 104) = v26;
    *(void *)(inited + 80) = v27;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v29 = v63 + 16;
    uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v63 + 16);
    char v30 = v66;
    uint64_t v59 = v25;
    v28(v66, v25, v67);
    type metadata accessor for _ContiguousArrayStorage<CVarArg?>();
    uint64_t v65 = v31;
    uint64_t v32 = swift_initStackObject();
    long long v64 = xmmword_2461BE2B0;
    *(_OWORD *)(v32 + 16) = xmmword_2461BE2B0;
    if (*(void *)(inited + 16))
    {
      uint64_t v33 = v32;
      outlined init with copy of AnyTrackedValue(inited + 32, v32 + 32);
      if (*(void *)(inited + 16) >= 2uLL)
      {
        uint64_t v56 = inited;
        unint64_t v57 = v6;
        uint64_t v25 = v58 | 0x14110014u;
        outlined init with copy of AnyTrackedValue(inited + 72, v33 + 72);
        *(_OWORD *)(v33 + 128) = 0u;
        *(void *)(v33 + 144) = 0;
        *(_OWORD *)(v33 + 112) = 0u;
        specialized withKDebugValues(_:_:closure:)(v25, v33, v25, (uint64_t)v30);
        outlined init with copy of CVarArg?(v33 + 112, (uint64_t)&v68, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
        swift_bridgeObjectRelease();
        if (!v70)
        {
LABEL_26:
          outlined destroy of CVarArg?((uint64_t)&v68, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
          swift_bridgeObjectRelease();
          int8x16_t v50 = *(void (**)(char *, uint64_t))(v63 + 8);
          uint64_t v51 = v67;
          v50(v66, v67);
          unint64_t v68 = v61;
          unint64_t v69 = v57;
          float v43 = (*(float (**)(unint64_t *))(*(void *)v60 + 104))(&v68);
          unsigned int v45 = v52;
          unsigned int v47 = v53;
          unsigned int v49 = v54;
          static os_signpost_type_t.end.getter();
          uint64_t v55 = v59;
          OSSignpostID.rawValue.getter();
          kdebug_trace();
          v50((char *)v55, v51);
          swift_release();
          goto LABEL_27;
        }
        char v30 = (char *)(v29 + 8);
        outlined destroy of CVarArg?((uint64_t)&v68, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x263F8E9C8]);
        if (one-time initialization token for continuation == -1)
        {
LABEL_20:
          uint64_t v34 = v67;
          uint64_t v35 = __swift_project_value_buffer(v67, (uint64_t)static OSSignpostID.continuation);
          unint64_t v36 = *(void (**)(char *, uint64_t, uint64_t))v30;
          uint64_t v37 = (uint64_t)v66;
          (*(void (**)(char *, uint64_t, uint64_t))v30)(v66, v35, v34);
          uint64_t v38 = MEMORY[0x263F8E9C8];
          while (1)
          {
            uint64_t v39 = swift_initStackObject();
            *(_OWORD *)(v39 + 16) = v64;
            *(_OWORD *)(v39 + 32) = 0u;
            *(_OWORD *)(v39 + 48) = 0u;
            *(_OWORD *)(v39 + 64) = 0u;
            *(_OWORD *)(v39 + 80) = 0u;
            *(_OWORD *)(v39 + 96) = 0u;
            *(_OWORD *)(v39 + 128) = 0u;
            *(void *)(v39 + 144) = 0;
            *(_OWORD *)(v39 + 112) = 0u;
            uint64_t v40 = v39 + 112;
            specialized withKDebugValues(_:_:closure:)(v25, v39, v25, v37);
            outlined init with copy of CVarArg?(v40, (uint64_t)&v68, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v38);
            swift_bridgeObjectRelease();
            if (!v70) {
              break;
            }
            outlined destroy of CVarArg?((uint64_t)&v68, &lazy cache variable for type metadata for CVarArg?, (unint64_t *)&lazy cache variable for type metadata for CVarArg, v38);
            if (one-time initialization token for continuation != -1) {
              swift_once();
            }
            uint64_t v41 = v67;
            uint64_t v42 = __swift_project_value_buffer(v67, (uint64_t)static OSSignpostID.continuation);
            uint64_t v37 = (uint64_t)v66;
            v36(v66, v42, v41);
          }
          goto LABEL_26;
        }
LABEL_30:
        swift_once();
        goto LABEL_20;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_30;
  }
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI8GradientV4StopVG_AF08ResolvedF0VAIVs5NeverOTg503_s7d3UI8f16V7resolve2inAA08h31C0VAA17EnvironmentValuesV_tFAG4G10VAcJVXEfU_AF0pQ0VTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = MEMORY[0x263F8EE78];
  if (v3)
  {
    uint64_t v24 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    uint64_t v4 = v24;
    char v8 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v9 = *(v8 - 1);
      uint64_t v10 = *v8;
      v23[0] = a2;
      v23[1] = a3;
      uint64_t v11 = *(float (**)(void *))(*(void *)v9 + 104);
      swift_retain();
      float v12 = v11(v23);
      int v14 = v13;
      int v16 = v15;
      int v18 = v17;
      swift_release();
      uint64_t v24 = v4;
      unint64_t v20 = *(void *)(v4 + 16);
      unint64_t v19 = *(void *)(v4 + 24);
      if (v20 >= v19 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
        uint64_t v4 = v24;
      }
      *(void *)(v4 + 16) = v20 + 1;
      uint64_t v21 = v4 + 48 * v20;
      *(float *)(v21 + 32) = v12;
      *(_DWORD *)(v21 + 36) = v14;
      *(_DWORD *)(v21 + 40) = v16;
      *(_DWORD *)(v21 + 44) = v18;
      *(void *)(v21 + 48) = v10;
      *(void *)(v21 + 56) = 0;
      *(void *)(v21 + 64) = 0;
      *(unsigned char *)(v21 + 72) = 1;
      v8 += 2;
      --v3;
    }
    while (v3);
  }
  return v4;
}

uint64_t ColorBox.resolve(in:)(long long *a1)
{
  uint64_t v2 = *v1;
  long long v4 = *a1;
  return (*(uint64_t (**)(long long *, void))(*(void *)(v2 + 168) + 16))(&v4, *(void *)(v2 + 160));
}

float protocol witness for ColorProvider.resolve(in:) in conformance ResolvedColorProvider()
{
  return *(float *)v0;
}

uint64_t protocol witness for ColorProvider.resolve(in:) in conformance Color.OpacityColor(long long *a1)
{
  uint64_t v2 = *v1;
  long long v4 = *a1;
  return (*(uint64_t (**)(long long *))(*(void *)v2 + 104))(&v4);
}

float specialized Color.AccentColorProvider.resolve(in:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  if (!v1)
  {
    uint64_t v4 = swift_retain_n();
    uint64_t v3 = specialized closure #1 in PropertyList.subscript.getter(v4, (uint64_t)v12);
    swift_release_n();
    if (!v3) {
      goto LABEL_5;
    }
LABEL_6:
    uint64_t v10 = v2;
    uint64_t v11 = v1;
    EnvironmentValues.effectiveTintAdjustmentMode.getter(&v9);
    uint64_t v5 = (void *)v3;
    if (v9 == 1)
    {
      type metadata accessor for ColorBox<Color.AccentColorProvider>(0, &lazy cache variable for type metadata for ColorBox<Color.DesaturatedColor>, (void (*)(void))lazy protocol witness table accessor for type Color.DesaturatedColor and conformance Color.DesaturatedColor);
      uint64_t v5 = (void *)swift_allocObject();
      v5[2] = v3;
    }
    uint64_t v10 = v2;
    uint64_t v11 = v1;
    unint64_t v6 = *(float (**)(uint64_t *))(*v5 + 104);
    swift_retain();
    float v7 = v6(&v10);
    swift_release();
    swift_release();
    return v7;
  }
  swift_retain_n();
  swift_retain_n();
  uint64_t v3 = specialized PropertyList.Tracker.value<A>(_:for:)(v2);
  swift_release_n();
  swift_release_n();
  if (v3) {
    goto LABEL_6;
  }
LABEL_5:
  uint64_t v10 = v2;
  uint64_t v11 = v1;
  uint64_t v3 = EnvironmentValues.defaultAccentColor.getter();
  if (v3) {
    goto LABEL_6;
  }
  if (one-time initialization token for blue != -1) {
    swift_once();
  }
  uint64_t v10 = v2;
  uint64_t v11 = v1;
  return (*(float (**)(uint64_t *))(*(void *)static Color.blue + 104))(&v10);
}

uint64_t EnvironmentValues.effectiveTintAdjustmentMode.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v3 = *v1;
  if (!v1[1])
  {
    type metadata accessor for EnvironmentPropertyKey<TintAdjustmentModeKey>();
    BloomFilter.init(hashValue:)(v7);
    int v5 = 2;
    uint64_t v8 = swift_retain_n();
    uint64_t v9 = specialized find1<A>(_:key:filter:)(v8, v13);
    if (v9) {
      int v5 = *(unsigned __int8 *)(v9 + 72);
    }
    uint64_t result = swift_release_n();
    if (v5 == 2)
    {
      uint64_t v10 = swift_retain_n();
      char v6 = specialized closure #1 in PropertyList.subscript.getter(v10, (uint64_t)v12);
      goto LABEL_8;
    }
LABEL_9:
    char v11 = v5 & 1;
    goto LABEL_10;
  }
  swift_retain_n();
  swift_retain_n();
  specialized PropertyList.Tracker.value<A>(_:for:)(v3, (char *)&v13);
  swift_release_n();
  uint64_t result = swift_release_n();
  LOBYTE(v5) = v13;
  if (v13 != 2) {
    goto LABEL_9;
  }
  swift_retain_n();
  swift_retain_n();
  char v6 = specialized PropertyList.Tracker.value<A>(_:for:)(v3);
  swift_release_n();
LABEL_8:
  uint64_t result = swift_release_n();
  char v11 = (v6 & 1) == 0;
LABEL_10:
  *a1 = v11;
  return result;
}

void type metadata accessor for EnvironmentPropertyKey<TintAdjustmentModeKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<TintAdjustmentModeKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<TintAdjustmentModeKey>);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnabledKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnabledKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnabledKey>, (uint64_t)&type metadata for EnabledKey, (uint64_t)&protocol witness table for EnabledKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnabledKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnabledKey>>);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<TintAdjustmentModeKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<TintAdjustmentModeKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<TintAdjustmentModeKey>, (uint64_t)&type metadata for TintAdjustmentModeKey, (uint64_t)&protocol witness table for TintAdjustmentModeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<TintAdjustmentModeKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<TintAdjustmentModeKey>>);
    }
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<AccentColorKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<AccentColorKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccentColorKey>, (uint64_t)&type metadata for AccentColorKey, (uint64_t)&protocol witness table for AccentColorKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<AccentColorKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<AccentColorKey>>);
    }
  }
}

float protocol witness for ColorProvider.resolve(in:) in conformance CGColorRef()
{
  LODWORD(v1) = specialized Color.Resolved.init(failableCGColor:)(*v0);
  float result = 0.0;
  if ((v3 & 1) == 0) {
    return v1;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<TintAdjustmentModeKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<TintAdjustmentModeKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<TintAdjustmentModeKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<TintAdjustmentModeKey>, (uint64_t)&type metadata for TintAdjustmentModeKey, (uint64_t)&protocol witness table for TintAdjustmentModeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TintAdjustmentModeKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t EnvironmentValues.isEnabled.getter()
{
  uint64_t v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    char v2 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    swift_release_n();
    swift_release_n();
    return v2 & 1;
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    char v5 = specialized closure #1 in PropertyList.subscript.getter(v4, (uint64_t)&v6, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnabledKey>, (uint64_t)&type metadata for EnabledKey, (uint64_t)&protocol witness table for EnabledKey, (uint64_t (*)(uint64_t))specialized find1<A>(_:key:filter:));
    swift_release_n();
    return v5 & 1;
  }
}

uint64_t key path setter for EnvironmentValues.isEnabled : EnvironmentValues(char *a1)
{
  return EnvironmentValues.isEnabled.setter(*a1);
}

uint64_t EnvironmentValues.isEnabled.setter(char a1)
{
  uint64_t v3 = *v1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, a1);
  swift_release();
  if (v1[1])
  {
    uint64_t v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<EnabledKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnabledKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnabledKey>, (uint64_t)&type metadata for EnabledKey, (uint64_t)&protocol witness table for EnabledKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnabledKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<EnabledKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnabledKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnabledKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnabledKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnabledKey>, (uint64_t)&type metadata for EnabledKey, (uint64_t)&protocol witness table for EnabledKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnabledKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t EnvironmentValues.appearsActive.getter(uint64_t (*a1)(uint64_t), uint64_t (*a2)(uint64_t, uint64_t *))
{
  uint64_t v3 = *v2;
  if (v2[1])
  {
    swift_retain_n();
    swift_retain_n();
    LOBYTE(a1) = a1(v3);
    swift_release_n();
    swift_release_n();
    return a1 & 1;
  }
  else
  {
    uint64_t v7 = swift_retain_n();
    char v8 = a2(v7, &v9);
    swift_release_n();
    return v8 & 1;
  }
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<AppearsActiveKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<AppearsActiveKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AppearsActiveKey>, (uint64_t)&type metadata for AppearsActiveKey, (uint64_t)&protocol witness table for AppearsActiveKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<AppearsActiveKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<AppearsActiveKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<AppearsActiveKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<AppearsActiveKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<AppearsActiveKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AppearsActiveKey>, (uint64_t)&type metadata for AppearsActiveKey, (uint64_t)&protocol witness table for AppearsActiveKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AppearsActiveKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void *static Semantics.v2.getter@<X0>(_DWORD *a1@<X8>)
{
  return static _SemanticFeature_v2.introduced.getter(&one-time initialization token for v2, &static Semantics.v2, a1);
}

void protocol witness for static _AttributeBody._destroySelf(_:) in conformance ShapeStyleResolver<A>()
{
}

Swift::Void __swiftcall ShapeStyleResolver.destroy()()
{
  if (*(void *)(v0 + 40)) {
    specialized AnimatorState.removeListeners()();
  }
}

uint64_t static _BackgroundStyleModifier._makeView(modifier:inputs:body:)@<X0>(unsigned int *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(unint64_t *__return_ptr, uint64_t, long long *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  uint64_t v7 = *a2;
  int v8 = *((_DWORD *)a2 + 2);
  uint64_t v9 = a2[2];
  int v10 = *((_DWORD *)a2 + 20);
  unsigned int v21 = *a1;
  uint64_t v13 = v7;
  int v14 = v8;
  uint64_t v15 = v9;
  long long v11 = *(_OWORD *)(a2 + 5);
  long long v16 = *(_OWORD *)(a2 + 3);
  long long v17 = v11;
  long long v18 = *(_OWORD *)(a2 + 7);
  uint64_t v19 = a2[9];
  int v20 = v10;
  return static _BackgroundStyleModifier.makeShapeView(modifier:inputs:shapeIsBackground:body:)(&v21, (uint64_t)&v13, 1, a3, a4, a5, a6, a7);
}

uint64_t static _BackgroundStyleModifier.makeShapeView(modifier:inputs:shapeIsBackground:body:)@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void (*a4)(unint64_t *__return_ptr, uint64_t, long long *)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  void (*v74)(unint64_t *__return_ptr, uint64_t, long long *);
  void *v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  uint64_t v81;
  int v82;
  int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unint64_t v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unsigned int v94;
  unint64_t v95;
  int v96;
  unsigned int v97;
  void v98[5];
  long long v99;
  unint64_t v100;
  unsigned char v101[24];
  uint64_t v102;
  long long v103;
  unint64_t v104;
  int v105;
  unint64_t v106;
  unsigned int v107;
  __int16 v108;
  unint64_t v109;
  int v110;
  int v111;
  long long v112;
  uint64_t v113;
  unint64_t v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  int v119;
  unint64_t v120;
  unsigned int v121;
  unsigned int v122;
  unint64_t v123;
  long long v124;
  uint64_t v125;
  uint64_t v126;
  long long v127;
  unint64_t v128;
  int v129;
  uint64_t v130;

  uint64_t v73 = a5;
  uint64_t v74 = a4;
  unint64_t v82 = a3;
  uint64_t v75 = a8;
  uint64_t v130 = *MEMORY[0x263EF8340];
  unsigned int v10 = *a1;
  uint64_t v93 = *(void *)a2;
  unsigned __int8 v80 = *(_DWORD *)(a2 + 8);
  unint64_t v11 = *(void *)(a2 + 16);
  LODWORD(v92) = *(_DWORD *)(a2 + 24);
  int v12 = *(_DWORD *)(a2 + 28);
  uint64_t v88 = *(_DWORD *)(a2 + 32);
  LODWORD(v91) = *(_DWORD *)(a2 + 36);
  uint64_t v13 = *(void *)(a2 + 48);
  uint64_t v89 = *(void *)(a2 + 40);
  unsigned int v14 = *(_DWORD *)(a2 + 60);
  __int16 v86 = *(_DWORD *)(a2 + 56);
  LODWORD(v87) = v12;
  unsigned int v15 = *(_DWORD *)(a2 + 64);
  unint64_t v84 = *(_DWORD *)(a2 + 68);
  unint64_t v85 = v14;
  unsigned int v16 = *(_DWORD *)(a2 + 72);
  unsigned int v17 = *(_DWORD *)(a2 + 76);
  uint64_t v83 = *(_DWORD *)(a2 + 80);
  swift_beginAccess();
  unsigned int v18 = *(_DWORD *)(v11 + 16);
  uint64_t v79 = v10;
  uint64_t v120 = __PAIR64__(v18, v10);
  uint64_t v121 = v16;
  uint64_t v122 = v15;
  uint64_t v123 = __PAIR64__(v17, v14);
  uint64_t v81 = a7;
  v98[2] = type metadata accessor for _BackgroundStyleModifier.BackgroundInfo.Value();
  uint64_t v19 = type metadata accessor for _BackgroundStyleModifier.BackgroundInfo();
  v98[3] = v19;
  v98[4] = swift_getWitnessTable();
  uint64_t v20 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v120, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v98, v19, MEMORY[0x263F8E628], v20, MEMORY[0x263F8E658], v21);
  uint64_t v120 = v93;
  uint64_t v123 = v11;
  uint64_t v121 = v80;
  *(void *)&long long v124 = __PAIR64__(v87, v92);
  uint64_t v125 = v89;
  uint64_t v126 = v13;
  *((void *)&v124 + 1) = __PAIR64__(v91, v88);
  *(void *)&uint64_t v127 = __PAIR64__(v85, v86);
  char v77 = v16;
  float v78 = v15;
  *((void *)&v127 + 1) = __PAIR64__(v84, v15);
  uint64_t v128 = __PAIR64__(v17, v16);
  uint64_t v76 = v17;
  char v129 = v83;
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v90 = v13;
  swift_bridgeObjectRetain();
  specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v120, (uint64_t)&type metadata for _ZStackLayout, (uint64_t)&protocol witness table for _ZStackLayout);
  swift_release();
  closure #1 in static _BackgroundStyleModifier.makeShapeView(modifier:inputs:shapeIsBackground:body:)(1);
  DWORD2(v127) = AGGraphCreateOffsetAttribute2();
  closure #2 in static _BackgroundStyleModifier.makeShapeView(modifier:inputs:shapeIsBackground:body:)(1);
  LODWORD(v128) = AGGraphCreateOffsetAttribute2();
  DWORD2(v124) = v88 | 0x18;
  uint64_t v22 = *(void *)(*(void *)(type metadata accessor for _AnchoredShapeStyle() - 8) + 64);
  uint64_t v72 = a6;
  if (v22) {
    closure #3 in static _BackgroundStyleModifier.makeShapeView(modifier:inputs:shapeIsBackground:body:)(1);
  }
  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  int v24 = *(_DWORD *)(v11 + 16);
  LOBYTE(v95) = 0;
  unsigned int v25 = v80;
  *(void *)&unsigned int v99 = __PAIR64__(v80, v92);
  int v26 = v87;
  DWORD2(v99) = v87;
  unsigned int v100 = 0;
  *(void *)uint64_t v101 = 0;
  *(_DWORD *)&v101[8] = 0;
  ShapeStyleResolver.init(style:mode:environment:role:animationsDisabled:helper:)(OffsetAttribute2, *MEMORY[0x263F288F8], v24, (char *)&v95, v91 & 1, (uint64_t)&v99, (uint64_t)&v106);
  uint64_t v71 = (uint64_t)&v71;
  DWORD2(v99) = v107;
  *(void *)&unsigned int v99 = v106;
  WORD6(v99) = v108;
  unsigned int v100 = v109;
  *(_DWORD *)uint64_t v101 = v110;
  *(_OWORD *)&v101[8] = v112;
  LODWORD(v102) = v113;
  *(void *)&unsigned int v103 = v114;
  MEMORY[0x270FA5388](v27);
  uint64_t v69 = type metadata accessor for ShapeStyleResolver();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<_ShapeStyle_Pack>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<_ShapeStyle_Pack>, (uint64_t)&type metadata for _ShapeStyle_Pack, MEMORY[0x263F28898]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v99, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_5, (uint64_t)&v68, v69, MEMORY[0x263F8E628], v28, MEMORY[0x263F8E658], v29);
  swift_release();
  unsigned int v30 = v25;
  swift_bridgeObjectRelease();
  swift_release();
  LODWORD(v71) = v95;
  AGGraphSetFlags();
  unint64_t v31 = v93;
  uint64_t v106 = v93;
  uint64_t v109 = v11;
  float v107 = v25;
  uint64_t v110 = v92;
  uint64_t v111 = v26;
  unsigned int v32 = v88;
  *(void *)&uint64_t v112 = __PAIR64__(v91, v88);
  uint64_t v34 = v89;
  uint64_t v33 = v90;
  *((void *)&v112 + 1) = v89;
  uint64_t v113 = v90;
  uint64_t v114 = __PAIR64__(v85, v86);
  uint64_t v115 = v78;
  uint64_t v116 = v84;
  uint64_t v117 = v77;
  float v118 = v76;
  uint64_t v119 = v83;
  if (v82)
  {
    uint64_t v35 = v72;
    uint64_t v36 = *(void *)(*(void *)(v72 - 8) + 64);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v37 = v81;
    if (v36) {
      uint64_t v38 = closure #1 in static _BackgroundModifier._makeView(modifier:inputs:body:)(1, v35, v81, (uint64_t (*)(void))type metadata accessor for _BackgroundStyleModifier, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
    }
    else {
      uint64_t v38 = 0;
    }
    uint64_t v49 = type metadata accessor for _BackgroundStyleModifier();
    _ViewInputs.applyBackgroundStyle<A, B>(value:offset:)(v79, v38, v49, v35, v37);
    unint64_t v31 = v106;
    unint64_t v11 = v109;
    unsigned int v30 = v107;
    int v48 = v110;
    int v47 = v111;
    unsigned int v32 = v112;
    uint64_t v34 = *((void *)&v112 + 1);
    uint64_t v33 = v113;
    int v46 = DWORD1(v112);
    unsigned int v44 = v114;
    unsigned int v45 = HIDWORD(v114);
    unsigned int v43 = v115;
    unsigned int v39 = v116;
    unsigned int v41 = v117;
    unsigned int v42 = v118;
    int v40 = v119;
  }
  else
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    int v40 = v83;
    unsigned int v39 = v84;
    unsigned int v42 = v76;
    unsigned int v41 = v77;
    unsigned int v43 = v78;
    unsigned int v45 = v85;
    unsigned int v44 = v86;
    int v46 = v91;
    int v47 = v87;
    int v48 = v92;
  }
  uint64_t v92 = v11;
  uint64_t v93 = v31;
  *(void *)&unsigned int v99 = v31;
  DWORD2(v99) = v30;
  unsigned int v100 = v11;
  *(_DWORD *)uint64_t v101 = v48;
  *(_DWORD *)&v101[4] = v47;
  *(_DWORD *)&v101[8] = v32;
  *(_DWORD *)&v101[12] = v46;
  *(void *)&v101[16] = v34;
  unsigned int v102 = v33;
  *(void *)&unsigned int v103 = __PAIR64__(v45, v44);
  *((void *)&v103 + 1) = __PAIR64__(v39, v43);
  id v104 = __PAIR64__(v42, v41);
  BOOL v105 = v40;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v50 = swift_bridgeObjectRetain();
  v74(&v95, v50, &v99);
  uint64_t v91 = v33;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  unint64_t v51 = v95;
  int v52 = v96;
  uint64_t v88 = v97;
  uint64_t v53 = type metadata accessor for _BackgroundStyleModifier();
  char v94 = v79;
  *(void *)&unsigned int v99 = v120;
  DWORD2(v99) = v121;
  unsigned int v100 = v123;
  *(_OWORD *)uint64_t v101 = v124;
  *(void *)&v101[16] = v125;
  unsigned int v102 = v126;
  unsigned int v103 = v127;
  id v104 = v128;
  BOOL v105 = v129;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static ShapeStyledLeafView.makeLeafView(view:inputs:styles:interpolatorGroup:data:)(&v94, &v99, v71, 0, v54, v53, (uint64_t)&protocol witness table for _BackgroundStyleModifier<A>, &v95);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  unint64_t v55 = v51;
  if (v82) {
    unint64_t v56 = v95;
  }
  else {
    unint64_t v56 = v51;
  }
  if (v82) {
    int v57 = v96;
  }
  else {
    int v57 = v52;
  }
  uint64_t v58 = v34;
  if (v82) {
    unint64_t v59 = v55;
  }
  else {
    unint64_t v59 = v95;
  }
  if (v82) {
    int v60 = v52;
  }
  else {
    int v60 = v96;
  }
  *(void *)&v101[8] = MEMORY[0x263F8EE78];
  *(_DWORD *)&v101[16] = 0;
  *(void *)&unsigned int v99 = v56;
  DWORD2(v99) = v57;
  unsigned int v100 = v59;
  *(_DWORD *)uint64_t v101 = v60;
  uint64_t v61 = *(void *)(v90 + 16);
  if (v61)
  {
    uint64_t v89 = v58;
    uint64_t v87 = v55;
    swift_bridgeObjectRetain();
    uint64_t v62 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
    do
    {
      static PreferenceKey.visitKey<A>(_:)((uint64_t)&v99, *(v62 - 1), (uint64_t)&type metadata for PairwisePreferenceCombinerVisitor, *v62, (uint64_t)&protocol witness table for PairwisePreferenceCombinerVisitor);
      v62 += 2;
      --v61;
    }
    while (v61);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v63 = *(void *)&v101[8];
    int v64 = *(_DWORD *)&v101[16];
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    int v64 = 0;
    uint64_t v63 = MEMORY[0x263F8EE78];
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v66 = v75;
  *uint64_t v75 = v63;
  unsigned int v67 = v88;
  *((_DWORD *)v66 + 2) = v64;
  *((_DWORD *)v66 + 3) = v67;
  return result;
}

double static _ShapeView._makeView(view:inputs:)@<D0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, ValueMetadata *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  v99[3] = *MEMORY[0x263EF8340];
  uint64_t v7 = a2[6];
  uint64_t v8 = *(void *)(v7 + 16);
  if (!v8)
  {
LABEL_7:
    *(void *)a7 = MEMORY[0x263F8EE78];
    int v19 = *MEMORY[0x263F288F8];
    *(_DWORD *)(a7 + 8) = 0;
    *(_DWORD *)(a7 + 12) = v19;
    return result;
  }
  uint64_t v9 = a5;
  LODWORD(v69) = *a1;
  uint64_t v70 = *a2;
  unsigned int v75 = *((_DWORD *)a2 + 2);
  uint64_t v11 = a2[2];
  int v12 = *((_DWORD *)a2 + 7);
  unsigned int v76 = *((_DWORD *)a2 + 6);
  HIDWORD(v73) = *((_DWORD *)a2 + 8);
  int v77 = *((_DWORD *)a2 + 9);
  uint64_t v74 = a2[5];
  uint64_t v71 = a2[7];
  int v72 = *((_DWORD *)a2 + 16);
  int v13 = *((_DWORD *)a2 + 18);
  int v68 = *((_DWORD *)a2 + 17);
  int v14 = *((_DWORD *)a2 + 19);
  int v15 = *((_DWORD *)a2 + 20);
  unsigned int v16 = (ValueMetadata **)(v7 + 32);
  uint64_t v17 = 32;
  uint64_t v18 = v8;
  while (*(ValueMetadata **)(v7 + v17) != &type metadata for DisplayList.Key)
  {
    v17 += 16;
    if (!--v18)
    {
      while (*v16 != &type metadata for ViewRespondersKey)
      {
        v16 += 2;
        if (!--v8) {
          goto LABEL_7;
        }
      }
      break;
    }
  }
  uint64_t v62 = (double *)a7;
  int v67 = v14;
  int v66 = v13;
  int v65 = v15;
  LODWORD(v73) = v12;
  uint64_t v64 = a6;
  uint64_t v63 = a4;
  if (a4 == &type metadata for ForegroundStyle)
  {
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a5 + 32))(v99, a3, a5);
    *(void *)&long long v81 = v70;
    DWORD2(v81) = v75;
    uint64_t v82 = v11;
    *(_DWORD *)uint64_t v83 = v76;
    *(_DWORD *)&v83[4] = v12;
    *(_DWORD *)&v83[8] = HIDWORD(v73);
    *(_DWORD *)&v83[12] = v77;
    *(void *)&v83[16] = v74;
    uint64_t v84 = v7;
    uint64_t v85 = v71;
    int v86 = v72;
    int v87 = v68;
    int v88 = v13;
    int v89 = v14;
    int v90 = v15;
    swift_beginAccess();
    LOBYTE(v79) = 1;
    unsigned int v20 = CachedEnvironment.resolvedShapeStyles(for:role:mode:)((uint64_t)&v81, (unsigned __int8 *)v99, 0x100000000);
    swift_endAccess();
  }
  else
  {
    if (*((void *)a4[-1].Description + 8)) {
      closure #1 in static _ShapeView._makeView(view:inputs:)(1, a3, (uint64_t)a4, a5, a6);
    }
    int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    swift_beginAccess();
    int v22 = *(_DWORD *)(v11 + 16);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v9 + 32))(&v79, a3, v9);
    unint64_t v91 = __PAIR64__(v75, v76);
    uint64_t v61 = v9;
    uint64_t v94 = 0;
    uint64_t v95 = 0;
    int v92 = v73;
    LODWORD(v96) = 0;
    ShapeStyleResolver.init(style:mode:environment:role:animationsDisabled:helper:)(OffsetAttribute2, *MEMORY[0x263F288F8], v22, (char *)&v79, v77 & 1, (uint64_t)&v91, (uint64_t)&v81);
    int v92 = DWORD2(v81);
    unint64_t v91 = v81;
    __int16 v93 = WORD6(v81);
    uint64_t v94 = v82;
    long long v96 = *(_OWORD *)&v83[8];
    LODWORD(v95) = *(_DWORD *)v83;
    int v97 = v84;
    uint64_t v98 = v85;
    MEMORY[0x270FA5388](v23);
    uint64_t v58 = type metadata accessor for ShapeStyleResolver();
    uint64_t WitnessTable = swift_getWitnessTable();
    type metadata accessor for Attribute<_ShapeStyle_Pack>();
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v91, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_5, (uint64_t)v57, v58, MEMORY[0x263F8E628], v24, MEMORY[0x263F8E658], v25);
    uint64_t v9 = v61;
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    unsigned int v20 = v79;
    AGGraphSetFlags();
  }
  uint64_t v26 = *(void *)(v9 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v29 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v28 = AssociatedTypeWitness - 8;
  if (!*(void *)(v29 + 64))
  {
    *(void *)&long long v81 = a3;
    *((void *)&v81 + 1) = v63;
    uint64_t v82 = v9;
    *(void *)uint64_t v83 = v64;
    uint64_t v46 = type metadata accessor for _ShapeView();
    LODWORD(v91) = v69;
    *(void *)&long long v81 = v70;
    DWORD2(v81) = v75;
    uint64_t v47 = v11;
    uint64_t v82 = v11;
    int v48 = v73;
    *(_DWORD *)uint64_t v83 = v76;
    *(void *)&v83[4] = v73;
    *(_DWORD *)&v83[12] = v77;
    *(void *)&v83[16] = v74;
    uint64_t v84 = v7;
    uint64_t v85 = v71;
    int v49 = v68;
    int v86 = v72;
    int v87 = v68;
    int v50 = v66;
    int v51 = v67;
    int v88 = v66;
    int v89 = v67;
    int v52 = v65;
    int v90 = v65;
    static ShapeStyledLeafView.makeLeafView(view:inputs:styles:interpolatorGroup:data:)((unsigned int *)&v91, &v81, v20, 0, v53, v46, (uint64_t)&protocol witness table for _ShapeView<A, B>, &v79);
    if (one-time initialization token for v4 != -1) {
      swift_once();
    }
    unsigned int v54 = static Semantics.v4;
    if (one-time initialization token for forced != -1) {
      swift_once();
    }
    swift_beginAccess();
    if (byte_26B0F44FC == 1)
    {
      char v55 = dyld_program_sdk_at_least();
      unsigned int v45 = v62;
      if ((v55 & 1) == 0) {
        goto LABEL_33;
      }
    }
    else
    {
      unsigned int v45 = v62;
      if (static Semantics.forced < v54) {
        goto LABEL_33;
      }
    }
    int v78 = v69;
    *(void *)&long long v81 = v70;
    DWORD2(v81) = v75;
    uint64_t v82 = v47;
    *(_DWORD *)uint64_t v83 = v76;
    *(_DWORD *)&v83[4] = v48;
    *(_DWORD *)&v83[8] = HIDWORD(v73);
    *(_DWORD *)&v83[12] = v77;
    *(void *)&v83[16] = v74;
    uint64_t v84 = v7;
    uint64_t v85 = v71;
    int v86 = v72;
    int v87 = v49;
    int v88 = v50;
    int v89 = v51;
    int v90 = v52;
    goto LABEL_32;
  }
  uint64_t v60 = (uint64_t)&v60;
  MEMORY[0x270FA5388](v28);
  uint64_t v30 = (uint64_t)v63;
  v57[0] = a3;
  v57[1] = v63;
  LODWORD(v61) = v20;
  uint64_t v31 = v64;
  uint64_t v58 = v9;
  uint64_t WitnessTable = v64;
  LODWORD(v91) = v69;
  *(void *)&long long v81 = a3;
  *((void *)&v81 + 1) = v63;
  uint64_t v82 = v9;
  *(void *)uint64_t v83 = v64;
  type metadata accessor for _ShapeView();
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #2 in static _ShapeView._makeView(view:inputs:), a3, &v79);
  uint64_t v32 = v70;
  *(void *)&long long v81 = v70;
  DWORD2(v81) = v75;
  uint64_t v82 = v11;
  *(_DWORD *)uint64_t v83 = v76;
  *(void *)&v83[4] = v73;
  *(_DWORD *)&v83[12] = v77;
  *(void *)&v83[16] = v74;
  unsigned int v33 = static Animatable.makeAnimatable(value:inputs:)((unsigned int *)&v79, (uint64_t *)&v81, a3, v26);
  closure #3 in static _ShapeView._makeView(view:inputs:)(1, a3, v30, v9, v31);
  *(void *)&long long v81 = __PAIR64__(AGGraphCreateOffsetAttribute2(), v33);
  uint64_t v34 = type metadata accessor for AnimatedShape();
  uint64_t v35 = type metadata accessor for AnimatedShape.Init();
  uint64_t v36 = swift_getWitnessTable();
  _GraphValue.init<A>(_:)((uint64_t)&v81, v34, v35, v36, &v91);
  int v37 = v91;
  *(void *)&long long v81 = v32;
  DWORD2(v81) = v75;
  uint64_t v69 = v11;
  uint64_t v82 = v11;
  *(_DWORD *)uint64_t v83 = v76;
  *(void *)&v83[4] = v73;
  *(_DWORD *)&v83[12] = v77;
  *(void *)&v83[16] = v74;
  uint64_t v84 = v7;
  uint64_t v85 = v71;
  int v38 = v68;
  int v86 = v72;
  int v87 = v68;
  int v39 = v66;
  int v40 = v67;
  int v88 = v66;
  int v89 = v67;
  int v41 = v65;
  int v90 = v65;
  static ShapeStyledLeafView.makeLeafView(view:inputs:styles:interpolatorGroup:data:)((unsigned int *)&v91, &v81, v61, 0, v42, v34, (uint64_t)&protocol witness table for AnimatedShape<A>, &v79);
  if (one-time initialization token for v4 != -1) {
    swift_once();
  }
  unsigned int v43 = static Semantics.v4;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC == 1)
  {
    char v44 = dyld_program_sdk_at_least();
    unsigned int v45 = v62;
    if ((v44 & 1) == 0) {
      goto LABEL_33;
    }
    goto LABEL_29;
  }
  unsigned int v45 = v62;
  if (static Semantics.forced >= v43)
  {
LABEL_29:
    int v78 = v37;
    *(void *)&long long v81 = v70;
    DWORD2(v81) = v75;
    uint64_t v82 = v69;
    *(_DWORD *)uint64_t v83 = v76;
    *(void *)&v83[4] = v73;
    *(_DWORD *)&v83[12] = v77;
    *(void *)&v83[16] = v74;
    uint64_t v84 = v7;
    uint64_t v85 = v71;
    int v86 = v72;
    int v87 = v38;
    int v88 = v39;
    int v89 = v40;
    int v90 = v41;
LABEL_32:
    static LeafViewLayout.makeLeafLayout(_:view:inputs:)((uint64_t)&v79, &v78, (uint64_t)&v81);
  }
LABEL_33:
  *(void *)unsigned int v45 = v79;
  double result = v80;
  v45[1] = v80;
  return result;
}

unsigned char *destructiveInjectEnumTag for EventPhase(unsigned char *result, char a2)
{
  *double result = a2;
  return result;
}

uint64_t type metadata accessor for _ShapeView()
{
  return swift_getGenericMetadata();
}

uint64_t static ShapeStyledLeafView.makeLeafView(view:inputs:styles:interpolatorGroup:data:)@<X0>(unsigned int *a1@<X0>, long long *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  uint64_t v65 = a5;
  uint64_t v67 = a4;
  unsigned int v69 = a3;
  v93[1] = *MEMORY[0x263EF8340];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v63 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v64 = AssociatedTypeWitness;
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  int v15 = (char *)&v56 - v14;
  uint64_t v70 = a6;
  uint64_t v71 = a7;
  uint64_t v16 = type metadata accessor for ShapeStyledDisplayList();
  MEMORY[0x270FA5388](v16);
  int v19 = (char *)&v56 - v18;
  unsigned int v68 = *a1;
  long long v20 = a2[3];
  long long v86 = a2[2];
  long long v87 = v20;
  long long v88 = a2[4];
  int v89 = *((_DWORD *)a2 + 20);
  long long v21 = a2[1];
  long long v84 = *a2;
  long long v85 = v21;
  uint64_t v73 = MEMORY[0x263F8EE78];
  int v22 = *MEMORY[0x263F288F8];
  LODWORD(v74) = 0;
  HIDWORD(v74) = v22;
  int v76 = DWORD2(v20);
  uint64_t v75 = v20;
  uint64_t v23 = *(void *)(v20 + 16);
  uint64_t v66 = v20;
  if (v23)
  {
    uint64_t v24 = (ValueMetadata **)(v20 + 32);
    uint64_t v25 = v23;
    while (*v24 != &type metadata for DisplayList.Key)
    {
      v24 += 2;
      if (!--v25) {
        goto LABEL_11;
      }
    }
    uint64_t v62 = v17;
    Swift::UInt32 v26 = ++lastIdentity;
    long long v27 = a2[2];
    long long v91 = a2[1];
    long long v92 = v27;
    long long v90 = *a2;
    if (BYTE5(v27))
    {
      outlined retain of _ViewInputs((uint64_t)&v84);
      specialized _ViewInputs.subscript.getter();
      outlined release of _ViewInputs((uint64_t)&v84);
      uint64_t result = AGWeakAttributeGetAttribute();
      if (result == v22)
      {
        __break(1u);
        return result;
      }
      v77[0] = v26;
      int v52 = (void (*)(long long *, void))Attribute<A>.subscript.modify();
      _DisplayList_StableIdentityScope.pushIdentity(_:)(v77);
      v52(&v78, 0);
    }
    v72[0] = v26;
    swift_retain();
    int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    uint64_t v28 = v91;
    long long v80 = v86;
    long long v81 = v87;
    long long v82 = v88;
    int v83 = v89;
    long long v78 = v84;
    long long v79 = v85;
    swift_beginAccess();
    int v59 = CachedEnvironment.animatedSize(for:)((uint64_t *)&v78);
    long long v80 = v86;
    long long v81 = v87;
    long long v82 = v88;
    int v83 = v89;
    long long v78 = v84;
    long long v79 = v85;
    int v29 = CachedEnvironment.animatedPosition(for:)((uint64_t *)&v78);
    swift_endAccess();
    unsigned int v57 = *(_DWORD *)(v28 + 16);
    uint64_t v30 = v90;
    v93[0] = v90;
    outlined retain of _ViewInputs((uint64_t)&v84);
    outlined retain of _GraphInputs((uint64_t)&v90);
    outlined retain of ViewTransform((uint64_t)v93);
    uint64_t v31 = specialized find<A>(_:key:)(v30);
    uint64_t v61 = a8;
    int v58 = v29;
    if (v31) {
      char v32 = *(unsigned char *)(v31 + 72);
    }
    else {
      char v32 = 0;
    }
    int v33 = DWORD1(v88);
    unsigned int v34 = HIDWORD(v87);
    int v35 = HIDWORD(v88);
    outlined release of ViewTransform((uint64_t)v93);
    outlined release of _GraphInputs((uint64_t)&v90);
    outlined release of _ViewInputs((uint64_t)&v84);
    LOBYTE(v77[0]) = v32;
    (*(void (**)(char *, uint64_t, uint64_t))(v63 + 16))(v15, v65, v64);
    LOWORD(v78) = 0;
    v53[1] = v70;
    uint64_t v36 = ShapeStyledDisplayList.init(group:identity:view:styles:size:animatedSize:position:containerPosition:transform:environment:safeAreaInsets:options:data:contentSeed:)(v67, (int *)v72, v68, v69, OffsetAttribute2, v59, v58, v33, (uint64_t)v19, __SPAIR64__(v57, v34), v35, (char *)v77, (uint64_t)v15, (__int16 *)&v78);
    MEMORY[0x270FA5388](v36);
    uint64_t v54 = v16;
    uint64_t WitnessTable = swift_getWitnessTable();
    type metadata accessor for Attribute<DisplayList>(0, &lazy cache variable for type metadata for Attribute<DisplayList>, (uint64_t)&type metadata for DisplayList, MEMORY[0x263F28898]);
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v19, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v53, v16, MEMORY[0x263F8E628], v37, MEMORY[0x263F8E658], v38);
    (*(void (**)(char *, uint64_t))(v62 + 8))(v19, v16);
    uint64_t v39 = v78;
    LOBYTE(v78) = 0;
    PreferencesOutputs.subscript.setter(v39, &type metadata for DisplayList.Key, (uint64_t)&protocol witness table for DisplayList.Key);
    a8 = v61;
  }
LABEL_11:
  long long v80 = v86;
  long long v81 = v87;
  long long v82 = v88;
  int v83 = v89;
  long long v78 = v84;
  long long v79 = v85;
  swift_beginAccess();
  CachedEnvironment.animatedSize(for:)((uint64_t *)&v78);
  long long v80 = v86;
  long long v81 = v87;
  long long v82 = v88;
  int v83 = v89;
  long long v78 = v84;
  long long v79 = v85;
  CachedEnvironment.animatedPosition(for:)((uint64_t *)&v78);
  swift_endAccess();
  unint64_t v40 = ShapeStyledResponderFilter.init(view:styles:size:position:transform:)(v68, v69);
  if (v23)
  {
    char v44 = (ValueMetadata **)(v66 + 32);
    while (*v44 != &type metadata for ViewRespondersKey)
    {
      v44 += 2;
      if (!--v23) {
        goto LABEL_17;
      }
    }
    *(void *)&long long v78 = v40;
    *((void *)&v78 + 1) = v41;
    LODWORD(v79) = v42;
    *((void *)&v79 + 1) = v43;
    MEMORY[0x270FA5388](v40);
    unsigned int v45 = a8;
    uint64_t v46 = type metadata accessor for ShapeStyledResponderFilter();
    uint64_t v54 = v46;
    uint64_t WitnessTable = swift_getWitnessTable();
    outlined retain of LinearGradient((uint64_t)&v75);
    type metadata accessor for [ViewResponder](0, &lazy cache variable for type metadata for Attribute<[ViewResponder]>, (uint64_t (*)(uint64_t))type metadata accessor for [ViewResponder], MEMORY[0x263F28898]);
    uint64_t v48 = v47;
    swift_retain();
    uint64_t v49 = v48;
    a8 = v45;
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v78, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v53, v46, MEMORY[0x263F8E628], v49, MEMORY[0x263F8E658], v50);
    swift_release();
    LOBYTE(v78) = 0;
    PreferencesOutputs.subscript.setter(v77[0], &type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey);
    outlined release of LinearGradient((uint64_t)&v75);
  }
LABEL_17:
  uint64_t result = swift_release();
  *a8 = v73;
  a8[1] = v74;
  return result;
}

uint64_t outlined release of LinearGradient(uint64_t a1)
{
  return a1;
}

uint64_t type metadata accessor for ShapeStyledDisplayList()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t destroy for ShapeStyledDisplayList(uint64_t a1)
{
  uint64_t v1 = a1 + 11;
  swift_release();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v4 = *(uint64_t (**)(unint64_t, uint64_t))(v3 + 8);
  uint64_t v5 = AssociatedTypeWitness;
  unint64_t v6 = ((((((((((((((((((((v1 & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL)
                  + 7) & 0xFFFFFFFFFFFFFFFCLL)
                + 7) & 0xFFFFFFFFFFFFFFFCLL)
              + 7) & 0xFFFFFFFFFFFFFFFCLL)
            + 7) & 0xFFFFFFFFFFFFFFFCLL)
          + 7) & 0xFFFFFFFFFFFFFFFCLL)
        + 7) & 0xFFFFFFFFFFFFFFFCLL)
      + *(unsigned __int8 *)(v3 + 80)
      + 5) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);

  return v4(v6, v5);
}

unint64_t ShapeStyledResponderFilter.init(view:styles:size:position:transform:)(unsigned int a1, uint64_t a2)
{
  return a1 | (unint64_t)(a2 << 32);
}

uint64_t type metadata accessor for ShapeStyledResponderData()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for LeafViewResponder()
{
  return __swift_instantiateGenericMetadata();
}

char *LeafViewResponder.__allocating_init()()
{
  uint64_t v0 = (char *)swift_allocObject();
  uint64_t v1 = specialized LeafViewResponder.init()(v0);
  swift_release();
  return v1;
}

char *specialized LeafViewResponder.init()(char *a1)
{
  ContentResponderHelper.init()(*(void *)(*(void *)a1 + 224), &a1[*(void *)(*(void *)a1 + 240)]);
  *((void *)a1 + 3) = 0;
  swift_unknownObjectWeakInit();
  swift_weakInit();
  swift_retain();
  uint64_t v2 = specialized static ViewGraph.current.getter();
  swift_beginAccess();
  MEMORY[0x24C527E00](v2 + 200);
  uint64_t v3 = *(void *)(v2 + 208);
  swift_release();
  swift_beginAccess();
  *((void *)a1 + 3) = v3;
  swift_unknownObjectWeakAssign();
  swift_unknownObjectRelease();
  return a1;
}

uint64_t LeafViewResponder.__deallocating_deinit()
{
  LeafViewResponder.deinit();

  return swift_deallocClassInstance();
}

uint64_t LeafViewResponder.deinit()
{
  outlined destroy of weak GestureGraphDelegate?(v0 + 16);
  swift_weakDestroy();
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 240);
  uint64_t v2 = type metadata accessor for ContentResponderHelper();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

double ContentResponderHelper.init()@<D0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4 = (int *)type metadata accessor for ContentResponderHelper();
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56))(&a2[v4[9]], 1, 1, a1);
  uint64_t v5 = &a2[v4[10]];
  *((void *)v5 + 4) = 0;
  double result = 0.0;
  *(_OWORD *)uint64_t v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  *(void *)&a2[v4[11]] = MEMORY[0x263F8EE78];
  uint64_t v7 = &a2[v4[12]];
  *(_OWORD *)uint64_t v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  return result;
}

uint64_t type metadata accessor for ContentResponderHelper()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t storeEnumTagSinglePayload for LayoutSubview(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)double result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = a2 + 1;
    }
  }
  return result;
}

uint64_t outlined destroy of weak GestureGraphDelegate?(uint64_t a1)
{
  return a1;
}

uint64_t destroy for ContentResponderHelper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(v2 - 8);
  unint64_t v4 = (a1 + *(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, v2)) {
    (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v4, v2);
  }
  swift_release();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t getEnumTagSinglePayload for ShapeStyledResponderData(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 >= a2)
  {
LABEL_26:
    if (v5 < 0x7FFFFFFF)
    {
      unint64_t v16 = *(void *)((result + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v16 >= 0xFFFFFFFF) {
        LODWORD(v16) = -1;
      }
      return (v16 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *(unsigned __int8 *)(result + v8);
        if (!v14) {
          goto LABEL_26;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)(result + v8);
        if (!v14) {
          goto LABEL_26;
        }
        goto LABEL_22;
      case 3:
        __break(1u);
        return result;
      case 4:
        int v14 = *(_DWORD *)(result + v8);
        if (!v14) {
          goto LABEL_26;
        }
LABEL_22:
        int v15 = v14 - 1;
        if (v10)
        {
          int v15 = 0;
          LODWORD(v10) = *(_DWORD *)result;
        }
        double result = v7 + (v10 | v15) + 1;
        break;
      default:
        goto LABEL_26;
    }
  }
  return result;
}

void storeEnumTagSinglePayload for ShapeStyledResponderData(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 <= v8)
  {
    switch(v14)
    {
      case 1:
        a1[v10] = 0;
        if (a2) {
          goto LABEL_33;
        }
        break;
      case 2:
        *(_WORD *)&a1[v10] = 0;
        if (a2) {
          goto LABEL_33;
        }
        break;
      case 3:
LABEL_44:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v10] = 0;
        goto LABEL_32;
      default:
LABEL_32:
        if (a2)
        {
LABEL_33:
          if (v7 < 0x7FFFFFFF)
          {
            uint64_t v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
            if ((a2 & 0x80000000) != 0) {
              uint64_t v19 = a2 ^ 0x80000000;
            }
            else {
              uint64_t v19 = a2 - 1;
            }
            *uint64_t v18 = v19;
          }
          else
          {
            uint64_t v17 = *(void (**)(void))(v6 + 56);
            v17();
          }
        }
        break;
    }
  }
  else
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        break;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        break;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        break;
      default:
        return;
    }
  }
}

uint64_t getEnumTagSinglePayload for Text.Effect.KeyframeSequence.Entry(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 17)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t ShapeStyledDisplayList.init(group:identity:view:styles:size:animatedSize:position:containerPosition:transform:environment:safeAreaInsets:options:data:contentSeed:)@<X0>(uint64_t a1@<X0>, int *a2@<X1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, uint64_t a10, int a11, char *a12, uint64_t a13, __int16 *a14)
{
  int v15 = *a2;
  char v16 = *a12;
  __int16 v17 = *a14;
  *(void *)a9 = a1;
  *(_DWORD *)(a9 + 8) = v15;
  *(_DWORD *)(a9 + 12) = a3;
  *(_DWORD *)(a9 + 16) = a4;
  *(_DWORD *)(a9 + 20) = a5;
  *(_DWORD *)(a9 + 24) = a6;
  *(_DWORD *)(a9 + 28) = a7;
  *(_DWORD *)(a9 + 32) = a8;
  *(void *)(a9 + 36) = a10;
  *(_DWORD *)(a9 + 44) = a11;
  *(unsigned char *)(a9 + 48) = v16;
  uint64_t v18 = type metadata accessor for ShapeStyledDisplayList();
  uint64_t v19 = a9 + *(int *)(v18 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(v19, a13, AssociatedTypeWitness);
  *(_WORD *)(a9 + *(int *)(v18 + 84)) = v17;
  return result;
}

uint64_t type metadata accessor for ShapeStyledResponderFilter()
{
  return __swift_instantiateGenericMetadata();
}

id static GestureViewModifier.makeView(modifier:inputs:body:)@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, unint64_t *a6@<X8>)
{
  uint64_t v80 = *MEMORY[0x263EF8340];
  unsigned int v58 = *a1;
  uint64_t v9 = *(void *)a2;
  int v10 = *(_DWORD *)(a2 + 8);
  unint64_t v11 = *(void *)(a2 + 16);
  unsigned int v12 = *(_DWORD *)(a2 + 24);
  unsigned int v13 = *(_DWORD *)(a2 + 28);
  unsigned int v14 = *(_DWORD *)(a2 + 32);
  unsigned int v15 = *(_DWORD *)(a2 + 36);
  unint64_t v16 = *(void *)(a2 + 40);
  unint64_t v17 = *(void *)(a2 + 48);
  unsigned int v18 = *(_DWORD *)(a2 + 56);
  unsigned int v19 = *(_DWORD *)(a2 + 60);
  unsigned int v20 = *(_DWORD *)(a2 + 64);
  unsigned int v21 = *(_DWORD *)(a2 + 68);
  int v23 = *(_DWORD *)(a2 + 72);
  int v22 = *(_DWORD *)(a2 + 76);
  int v24 = *(_DWORD *)(a2 + 80);
  unint64_t v62 = v9;
  unsigned int v56 = v12;
  int v57 = v10;
  LODWORD(v63) = v10;
  unint64_t v64 = v11;
  unint64_t v65 = __PAIR64__(v13, v12);
  unsigned int v55 = v13;
  unsigned int v54 = v14;
  unsigned int v66 = v14;
  unsigned int v67 = v15;
  unsigned int v53 = v15;
  unint64_t v68 = v16;
  unint64_t v69 = v17;
  unsigned int v52 = v18;
  unint64_t v70 = __PAIR64__(v19, v18);
  unsigned int v51 = v19;
  int v50 = v20;
  unsigned int v71 = v20;
  unsigned int v72 = v21;
  int v49 = v21;
  int v48 = v23;
  int v73 = v23;
  int v74 = v22;
  int v47 = v22;
  int v46 = v24;
  int v75 = v24;
  a3(&v60);
  uint64_t v25 = *(void *)(v17 + 16);
  if (v25)
  {
    uint64_t v26 = 32;
    while (*(ValueMetadata **)(v17 + v26) != &type metadata for ViewRespondersKey)
    {
      v26 += 16;
      if (!--v25) {
        goto LABEL_10;
      }
    }
    unint64_t v62 = v60;
    LODWORD(v63) = v61;
    unint64_t v27 = PreferencesOutputs.subscript.getter((uint64_t)&type metadata for ViewRespondersKey);
    unsigned int v28 = v27;
    if ((v27 & 0x100000000) != 0)
    {
      swift_bridgeObjectRetain();
      specialized static ViewGraph.current.getter();
      type metadata accessor for [ViewResponder](0);
      unsigned int v28 = specialized GraphHost.intern<A>(_:for:id:)(MEMORY[0x263F8EE78], v29, 0);
      swift_bridgeObjectRelease();
      swift_release();
    }
    unsigned int v45 = a6;
    id result = (id)AGSubgraphGetCurrent();
    if (!result)
    {
      __break(1u);
      return result;
    }
    uint64_t v43 = (uint64_t)&v43;
    unint64_t v62 = __PAIR64__(v58, v28);
    uint64_t v63 = v9;
    LODWORD(v64) = v57;
    unint64_t v65 = v11;
    unsigned int v66 = v56;
    unsigned int v67 = v55;
    unint64_t v68 = __PAIR64__(v53, v54);
    unint64_t v69 = v16;
    unint64_t v70 = v17;
    unsigned int v71 = v52;
    unsigned int v72 = v51;
    int v73 = v50;
    int v74 = v49;
    int v75 = v48;
    int v76 = v47;
    int v77 = v46;
    id v78 = result;
    uint64_t v79 = 0;
    MEMORY[0x270FA5388](result);
    uint64_t v41 = type metadata accessor for GestureFilter();
    uint64_t WitnessTable = swift_getWitnessTable();
    _sSay7SwiftUI13ViewResponderCGMaTm_1(0, &lazy cache variable for type metadata for Attribute<[ViewResponder]>, (uint64_t (*)(uint64_t))type metadata accessor for [ViewResponder], MEMORY[0x263F28898]);
    uint64_t v44 = a4;
    uint64_t v31 = a5;
    uint64_t v33 = v32;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v62, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v40, v41, MEMORY[0x263F8E628], v33, MEMORY[0x263F8E658], v34);

    swift_bridgeObjectRelease();
    a5 = v31;
    a4 = v44;
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    LOBYTE(v62) = 0;
    PreferencesOutputs.subscript.setter(v59, &type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey);
    a6 = v45;
  }
LABEL_10:
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  uint64_t v35 = specialized find<A>(_:key:)(v9);
  if (v35)
  {
    uint64_t v36 = (uint64_t *)(v35 + 80);
  }
  else
  {
    uint64_t v36 = (uint64_t *)&off_268EFEA70;
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
  }
  uint64_t v37 = *v36;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  uint64_t v38 = swift_release_n();
  double v39 = MEMORY[0x270FA5388](v38);
  *(void *)&v40[-32] = a4;
  *(void *)&v40[-24] = a5;
  *(_DWORD *)&v40[-16] = v58;
  unint64_t v62 = v9;
  LODWORD(v63) = v57;
  unint64_t v64 = v11;
  unint64_t v65 = __PAIR64__(v55, v56);
  unsigned int v66 = v54;
  unsigned int v67 = v53;
  unint64_t v68 = v16;
  unint64_t v69 = v17;
  unint64_t v70 = __PAIR64__(v51, v52);
  unsigned int v71 = v50;
  unsigned int v72 = v49;
  int v73 = v48;
  int v74 = v47;
  int v75 = v46;
  id result = (id)(*(uint64_t (**)(uint64_t (*)(), double))(v37 + 8))(partial apply for implicit closure #1 in static GestureViewModifier.makeView(modifier:inputs:body:), v39);
  *a6 = v60;
  a6[1] = v61;
  return result;
}

void type metadata accessor for [ViewResponder](uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _sSay7SwiftUI13ViewResponderCGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _sSay7SwiftUI13ViewResponderCGMaTm_1(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _sSay7SwiftUI13ViewResponderCGMaTm_2(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _sSay7SwiftUI13ViewResponderCGMaTm_3(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _sSay7SwiftUI13ViewResponderCGMaTm_4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t type metadata accessor for GestureFilter()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for ShapeStyleResolver()
{
  return __swift_instantiateGenericMetadata();
}

double ShapeStyleResolver.init(style:mode:environment:role:animationsDisabled:helper:)@<D0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, char *a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  char v12 = *a4;
  int v13 = *(_DWORD *)(a6 + 8);
  uint64_t v14 = *(void *)(a6 + 16);
  uint64_t v15 = *(void *)(a6 + 24);
  int v21 = *(_DWORD *)(a6 + 32);
  type metadata accessor for PropertyList.Tracker();
  uint64_t v16 = swift_allocObject();
  type metadata accessor for AtomicBuffer<TrackerData>(0, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<TrackerData>, (uint64_t)&type metadata for TrackerData, (uint64_t (*)(void, uint64_t))type metadata accessor for AtomicBuffer);
  uint64_t v17 = swift_allocObject();
  *(_DWORD *)(v17 + 16) = 0;
  uint64_t v18 = MEMORY[0x263F8EE80];
  *(void *)(v17 + 24) = 0;
  *(void *)(v17 + 32) = v18;
  uint64_t v19 = MEMORY[0x263F8EE78];
  *(void *)(v17 + 40) = v18;
  *(void *)(v17 + 48) = v19;
  *(unsigned char *)(v17 + 56) = 0;
  *(void *)(v16 + 16) = v17;
  *(_DWORD *)a7 = a1;
  *(_DWORD *)(a7 + 4) = a2;
  *(_DWORD *)(a7 + 8) = a3;
  *(unsigned char *)(a7 + 12) = v12;
  *(unsigned char *)(a7 + 13) = a5;
  double result = *(double *)a6;
  *(void *)(a7 + 16) = *(void *)a6;
  *(_DWORD *)(a7 + 24) = v13;
  *(void *)(a7 + 32) = v14;
  *(void *)(a7 + 40) = v15;
  *(_DWORD *)(a7 + 48) = v21;
  *(void *)(a7 + 56) = v16;
  return result;
}

void type metadata accessor for AtomicBuffer<TrackerData>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI12AtomicBuffer33_82B2D47816BC992595021D60C278AFF0LLCyAA11TrackerData33_D64CE6C88E7413721C59A34C0C940F2CLLVGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI12AtomicBuffer33_82B2D47816BC992595021D60C278AFF0LLCyAA11TrackerData33_D64CE6C88E7413721C59A34C0C940F2CLLVGMaTm_1(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI12AtomicBuffer33_82B2D47816BC992595021D60C278AFF0LLCyAA11TrackerData33_D64CE6C88E7413721C59A34C0C940F2CLLVGMaTm_2(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t static LeafViewLayout.makeLeafLayout(_:view:inputs:)(uint64_t result, int *a2, uint64_t a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if ((*(unsigned char *)(a3 + 36) & 2) != 0)
  {
    uint64_t v3 = result;
    int v11 = *a2;
    MEMORY[0x270FA5388](result);
    uint64_t v8 = type metadata accessor for LeafLayoutComputer();
    uint64_t WitnessTable = swift_getWitnessTable();
    type metadata accessor for Attribute<LayoutComputer>(0, &lazy cache variable for type metadata for Attribute<LayoutComputer>, (uint64_t)&type metadata for LayoutComputer, MEMORY[0x263F28898]);
    double result = _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v11, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_0, (uint64_t)&v7, v8, MEMORY[0x263F8E628], v4, MEMORY[0x263F8E658], v5);
    *(_DWORD *)(v3 + 12) = v10;
    int v6 = *(_DWORD *)(v3 + 8);
    if ((v6 & 0x80) == 0) {
      *(_DWORD *)(v3 + 8) = v6 | 0x80;
    }
  }
  return result;
}

uint64_t type metadata accessor for LeafLayoutComputer()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for Attribute<_ShapeStyle_Pack>()
{
  if (!lazy cache variable for type metadata for Attribute<_ShapeStyle_Pack>)
  {
    unint64_t v0 = type metadata accessor for Attribute();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<_ShapeStyle_Pack>);
    }
  }
}

uint64_t closure #1 in static _ShapeView._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = a2;
  uint64_t v14 = a3;
  uint64_t v15 = a4;
  uint64_t v16 = a5;
  uint64_t v7 = type metadata accessor for _ShapeView();
  uint64_t v8 = a1 + *(int *)(v7 + 52);
  v12[2] = v7;
  v12[3] = a3;
  uint64_t v9 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v8, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v12, a3, MEMORY[0x263F8E628], v9, MEMORY[0x263F8E658], v10);
  return v13;
}

uint64_t getEnumTagSinglePayload for _ShapeView(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v7 + 64);
  if (v8 <= v6) {
    unsigned int v11 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v11 = *(_DWORD *)(v7 + 84);
  }
  if (v11 <= 0xFE) {
    unsigned int v11 = 254;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v12 = *(void *)(*(void *)(v4 - 8) + 64) + v9;
  int v13 = a2 - v11;
  if (a2 <= v11) {
    goto LABEL_26;
  }
  uint64_t v14 = v10 + (v12 & ~v9) + 2;
  char v15 = 8 * v14;
  if (v14 > 3) {
    goto LABEL_9;
  }
  unsigned int v17 = ((v13 + ~(-1 << v15)) >> v15) + 1;
  if (HIWORD(v17))
  {
    int v16 = *(_DWORD *)((char *)a1 + v14);
    if (v16) {
      goto LABEL_16;
    }
  }
  else
  {
    if (v17 <= 0xFF)
    {
      if (v17 < 2) {
        goto LABEL_26;
      }
LABEL_9:
      int v16 = *((unsigned __int8 *)a1 + v14);
      if (!*((unsigned char *)a1 + v14)) {
        goto LABEL_26;
      }
LABEL_16:
      int v18 = (v16 - 1) << v15;
      if (v14 > 3) {
        int v18 = 0;
      }
      if (v10 + (v12 & ~v9) == -2)
      {
        int v20 = 0;
      }
      else
      {
        if (v14 <= 3) {
          int v19 = v10 + (v12 & ~v9) + 2;
        }
        else {
          int v19 = 4;
        }
        switch(v19)
        {
          case 2:
            int v20 = *a1;
            break;
          case 3:
            int v20 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            int v20 = *(_DWORD *)a1;
            break;
          default:
            int v20 = *(unsigned __int8 *)a1;
            break;
        }
      }
      return v11 + (v20 | v18) + 1;
    }
    int v16 = *(unsigned __int16 *)((char *)a1 + v14);
    if (*(unsigned __int16 *)((char *)a1 + v14)) {
      goto LABEL_16;
    }
  }
LABEL_26:
  if (v6 == v11) {
    return (*(uint64_t (**)(void))(v5 + 48))();
  }
  unint64_t v22 = ((unint64_t)a1 + v12) & ~v9;
  if (v8 == v11) {
    return (*(uint64_t (**)(unint64_t))(v7 + 48))(v22);
  }
  unsigned int v23 = *(unsigned __int8 *)(v22 + v10);
  if (v23 < 2) {
    return 0;
  }
  return ((v23 + 2147483646) & 0x7FFFFFFF) + 1;
}

uint64_t type metadata accessor for AnimatedShape()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static Animatable.makeAnimatable(value:inputs:)(unsigned int *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *a2;
  int v5 = *((_DWORD *)a2 + 2);
  uint64_t v6 = a2[2];
  uint64_t v7 = a2[5];
  unsigned int v14 = *a1;
  uint64_t v9 = v4;
  int v10 = v5;
  uint64_t v11 = v6;
  long long v12 = *(_OWORD *)(a2 + 3);
  uint64_t v13 = v7;
  (*(void (**)(unsigned int *, uint64_t *))(a4 + 48))(&v14, &v9);
  return v14;
}

uint64_t View.background<A>(alignment:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(double)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v23 = a6;
  uint64_t v21 = a7;
  uint64_t v22 = a4;
  uint64_t v11 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for _BackgroundModifier();
  uint64_t v15 = *(void *)(v14 - 8);
  double v16 = MEMORY[0x270FA5388](v14);
  int v18 = (char *)&v21 - v17;
  a3(v16);
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v18, v13, a5);
  int v19 = &v18[*(int *)(v14 + 36)];
  *(void *)int v19 = a1;
  *((void *)v19 + 1) = a2;
  View.modifier<A>(_:)(v18, v22, v14);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
}

uint64_t partial apply for closure #1 in static _BackgroundModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  return closure #1 in static _BackgroundModifier._makeView(modifier:inputs:body:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), (uint64_t (*)(void))type metadata accessor for _BackgroundModifier, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:));
}

uint64_t closure #1 in static _BackgroundModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t a5)
{
  v11[2] = a4(0);
  v11[3] = a2;
  uint64_t v8 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, a5, (uint64_t)v11, a2, MEMORY[0x263F8E628], v8, MEMORY[0x263F8E658], v9);
  return v11[5];
}

uint64_t closure #2 in static _BackgroundModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for _BackgroundModifier();
  uint64_t v3 = a1 + *(int *)(v2 + 36);
  v7[2] = v2;
  uint64_t v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v3, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_1, (uint64_t)v7, (uint64_t)&type metadata for Alignment, MEMORY[0x263F8E628], v4, MEMORY[0x263F8E658], v5);
  return v7[5];
}

uint64_t static _BackgroundModifier._makeView(modifier:inputs:body:)@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(unint64_t *__return_ptr, uint64_t, unint64_t *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v9 = *a2;
  int v10 = *((_DWORD *)a2 + 2);
  uint64_t v11 = a2[2];
  int v12 = *((_DWORD *)a2 + 20);
  LODWORD(v22) = *a1;
  type metadata accessor for _BackgroundModifier();
  type metadata accessor for _GraphValue();
  uint64_t v13 = a2[3];
  uint64_t v14 = a2[4];
  long long v18 = *(_OWORD *)(a2 + 7);
  long long v19 = *(_OWORD *)(a2 + 5);
  uint64_t v15 = a2[9];
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static _BackgroundModifier._makeView(modifier:inputs:body:), a4, v32);
  unsigned int v16 = v32[0];
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #2 in static _BackgroundModifier._makeView(modifier:inputs:body:), (uint64_t)&type metadata for Alignment, &v31);
  uint64_t v22 = v9;
  int v23 = v10;
  uint64_t v24 = v11;
  uint64_t v25 = v13;
  uint64_t v26 = v14;
  long long v27 = v19;
  long long v28 = v18;
  uint64_t v29 = v15;
  int v30 = v12;
  return makeSecondaryLayerView<A>(secondaryLayer:alignment:inputs:body:flipOrder:)(v16, v31, (uint64_t)&v22, a3, 1, a5, a6);
}

uint64_t type metadata accessor for _BackgroundModifier()
{
  return __swift_instantiateGenericMetadata();
}

void storeEnumTagSinglePayload for _ShapeView(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = *(void *)(v8 + 64);
  if (v9 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v8 + 84);
  }
  if (v12 <= 0xFE) {
    unsigned int v12 = 254;
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v10;
  size_t v14 = v11 + (v13 & ~v10) + 2;
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 >= a2)
  {
    switch(v17)
    {
      case 1:
        a1[v14] = 0;
        if (a2) {
          goto LABEL_26;
        }
        break;
      case 2:
        *(_WORD *)&a1[v14] = 0;
        if (a2) {
          goto LABEL_26;
        }
        break;
      case 3:
LABEL_47:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v14] = 0;
        goto LABEL_25;
      default:
LABEL_25:
        if (a2)
        {
LABEL_26:
          if (v7 == v12)
          {
            uint64_t v22 = *(void (**)(void))(v6 + 56);
            v22();
          }
          else
          {
            unint64_t v23 = (unint64_t)&a1[v13] & ~v10;
            if (v9 == v12)
            {
              uint64_t v24 = *(void (**)(unint64_t))(v8 + 56);
              v24(v23);
            }
            else if (a2 > 0xFE)
            {
              *(_WORD *)(v23 + v11) = a2 - 255;
            }
            else
            {
              *(unsigned char *)(v23 + v11) = a2 + 1;
            }
          }
        }
        break;
    }
  }
  else
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v11 + (v13 & ~v10) != -2)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        break;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        break;
      case 3:
        goto LABEL_47;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        break;
      default:
        return;
    }
  }
}

void type metadata accessor for Attribute<_ShapeStyle_Pack>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t type metadata accessor for AnimatedShape.Init()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t closure #3 in static _ShapeView._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v12 = a2;
  uint64_t v13 = a3;
  uint64_t v14 = a4;
  uint64_t v15 = a5;
  uint64_t v6 = type metadata accessor for _ShapeView();
  uint64_t v7 = a1 + *(int *)(v6 + 56);
  v11[2] = v6;
  uint64_t v8 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v7, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v11, (uint64_t)&type metadata for FillStyle, MEMORY[0x263F8E628], v8, MEMORY[0x263F8E658], v9);
  return v12;
}

uint64_t closure #1 in static _BackgroundStyleModifier.makeShapeView(modifier:inputs:shapeIsBackground:body:)(uint64_t a1)
{
  v5[2] = type metadata accessor for _BackgroundStyleModifier.BackgroundInfo.Value();
  uint64_t v2 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v5, (uint64_t)&type metadata for ViewOrigin, MEMORY[0x263F8E628], v2, MEMORY[0x263F8E658], v3);
  return v5[5];
}

uint64_t closure #2 in static _BackgroundStyleModifier.makeShapeView(modifier:inputs:shapeIsBackground:body:)(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  v5[2] = type metadata accessor for _BackgroundStyleModifier.BackgroundInfo.Value();
  uint64_t v2 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v5, (uint64_t)&type metadata for ViewSize, MEMORY[0x263F8E628], v2, MEMORY[0x263F8E658], v3);
  return v5[5];
}

uint64_t type metadata accessor for _BackgroundStyleModifier.BackgroundInfo()
{
  return __swift_instantiateGenericMetadata();
}

void storeEnumTagSinglePayload for _BackgroundStyleModifier(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64) + 1;
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 >= a2)
  {
    switch(v11)
    {
      case 1:
        a1[v8] = 0;
        if (a2) {
          goto LABEL_21;
        }
        break;
      case 2:
        *(_WORD *)&a1[v8] = 0;
        if (a2) {
          goto LABEL_21;
        }
        break;
      case 3:
LABEL_34:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v8] = 0;
        goto LABEL_20;
      default:
LABEL_20:
        if (a2)
        {
LABEL_21:
          unsigned int v16 = *(void (**)(void))(v6 + 56);
          v16();
        }
        break;
    }
  }
  else
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (*(_DWORD *)(v6 + 64) != -1)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        break;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        break;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        break;
      default:
        return;
    }
  }
}

void storeEnumTagSinglePayload for AnimatedShape(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v10 = v9 + 2;
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 >= a2)
  {
    switch(v13)
    {
      case 1:
        a1[v10] = 0;
        if (a2) {
          goto LABEL_24;
        }
        break;
      case 2:
        *(_WORD *)&a1[v10] = 0;
        if (a2) {
          goto LABEL_24;
        }
        break;
      case 3:
LABEL_41:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v10] = 0;
        goto LABEL_23;
      default:
LABEL_23:
        if (a2)
        {
LABEL_24:
          if (v7 < 0xFE)
          {
            if (a2 > 0xFE) {
              *(_WORD *)&a1[v9] = a2 - 255;
            }
            else {
              a1[v9] = a2 + 1;
            }
          }
          else
          {
            unsigned int v18 = *(void (**)(void))(v6 + 56);
            v18();
          }
        }
        break;
    }
  }
  else
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v9 != -2)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v9 + 2);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        break;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        break;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        break;
      default:
        return;
    }
  }
}

void storeEnumTagSinglePayload for _StrokedShape(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 40;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFD8) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 <= v8)
  {
    switch(v14)
    {
      case 1:
        a1[v10] = 0;
        if (a2) {
          goto LABEL_33;
        }
        break;
      case 2:
        *(_WORD *)&a1[v10] = 0;
        if (a2) {
          goto LABEL_33;
        }
        break;
      case 3:
LABEL_43:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v10] = 0;
        goto LABEL_32;
      default:
LABEL_32:
        if (a2)
        {
LABEL_33:
          if (v7 < 0x7FFFFFFF)
          {
            unint64_t v18 = (unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8;
            if ((a2 & 0x80000000) != 0)
            {
              *(_OWORD *)(v18 + 8) = 0u;
              *(_OWORD *)(v18 + 24) = 0u;
              *(void *)unint64_t v18 = a2 ^ 0x80000000;
            }
            else
            {
              *(void *)(v18 + 24) = a2 - 1;
            }
          }
          else
          {
            int v17 = *(void (**)(void))(v6 + 56);
            v17();
          }
        }
        break;
    }
  }
  else
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFD8) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFD8)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 40);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        break;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        break;
      case 3:
        goto LABEL_43;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        break;
      default:
        return;
    }
  }
}

void static _StrokedShape.role.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

unsigned char *storeEnumTagSinglePayload for Capsule(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *double result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *double result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance RoundedRectangle(uint64_t a1, _OWORD *a2)
{
  long long v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  void v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

void static Shape.role.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

{
  static Shape.role.getter(a1);
}

uint64_t storeEnumTagSinglePayload for RoundedRectangle._Inset(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)double result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = a2 + 1;
    }
  }
  return result;
}

_DWORD *protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance AnyShape(_DWORD *a1, _OWORD *a2)
{
  long long v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  void v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t getEnumTagSinglePayload for _StrokedShape(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 >= a2)
  {
LABEL_26:
    if (v5 < 0x7FFFFFFF)
    {
      unint64_t v16 = *(void *)(((result + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 24);
      if (v16 >= 0xFFFFFFFF) {
        LODWORD(v16) = -1;
      }
      return (v16 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 40;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *(unsigned __int8 *)(result + v8);
        if (!v14) {
          goto LABEL_26;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)(result + v8);
        if (!v14) {
          goto LABEL_26;
        }
        goto LABEL_22;
      case 3:
        __break(1u);
        return result;
      case 4:
        int v14 = *(_DWORD *)(result + v8);
        if (!v14) {
          goto LABEL_26;
        }
LABEL_22:
        int v15 = v14 - 1;
        if (v10)
        {
          int v15 = 0;
          LODWORD(v10) = *(_DWORD *)result;
        }
        double result = v7 + (v10 | v15) + 1;
        break;
      default:
        goto LABEL_26;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AnimatedShape(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_22;
  }
  uint64_t v9 = v6 + 2;
  char v10 = 8 * (v6 + 2);
  if ((v6 + 2) > 3) {
    goto LABEL_7;
  }
  unsigned int v12 = ((v8 + ~(-1 << v10)) >> v10) + 1;
  if (HIWORD(v12))
  {
    int v11 = *(_DWORD *)((char *)a1 + v9);
    if (v11) {
      goto LABEL_14;
    }
  }
  else
  {
    if (v12 <= 0xFF)
    {
      if (v12 < 2) {
        goto LABEL_22;
      }
LABEL_7:
      int v11 = *((unsigned __int8 *)a1 + v9);
      if (!*((unsigned char *)a1 + v9)) {
        goto LABEL_22;
      }
LABEL_14:
      int v13 = (v11 - 1) << v10;
      if (v9 > 3) {
        int v13 = 0;
      }
      if (v9)
      {
        if (v9 > 3) {
          LODWORD(v9) = 4;
        }
        switch((int)v9)
        {
          case 2:
            LODWORD(v9) = *a1;
            break;
          case 3:
            LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            LODWORD(v9) = *(_DWORD *)a1;
            break;
          default:
            LODWORD(v9) = *(unsigned __int8 *)a1;
            break;
        }
      }
      return v7 + (v9 | v13) + 1;
    }
    int v11 = *(unsigned __int16 *)((char *)a1 + v9);
    if (*(unsigned __int16 *)((char *)a1 + v9)) {
      goto LABEL_14;
    }
  }
LABEL_22:
  if (v5 >= 0xFE) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unsigned int v15 = *((unsigned __int8 *)a1 + v6);
  if (v15 < 2) {
    return 0;
  }
  return ((v15 + 2147483646) & 0x7FFFFFFF) + 1;
}

uint64_t protocol witness for static Shape.role.getter in conformance OffsetShape<A>(uint64_t a1)
{
  return static OffsetShape.role.getter(*(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t static OffsetShape.role.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance UnevenRoundedRectangle(uint64_t a1, _OWORD *a2)
{
  long long v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  void v4[2] = a2[2];
  return specialized static Animatable._makeAnimatable(value:inputs:)(a1, (uint64_t)v4);
}

uint64_t type metadata accessor for ResponderNode()
{
  return self;
}

Swift::Int __swiftcall SubviewsCollection.index(after:)(Swift::Int after)
{
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  uint64_t v3 = static Update._lock;
  _MovableLockLock(static Update._lock);
  specialized static Update.begin()();
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v4);
  Swift::Int v6 = ViewList.count.getter(v4, v5);
  static Update.end()();
  Swift::Int result = _MovableLockUnlock(v3);
  if ((after & 0x8000000000000000) == 0 && v6 > after) {
    return after + 1;
  }
  __break(1u);
  return result;
}

uint64_t _ViewListOutputs.makeAttribute(viewInputs:)(uint64_t *a1)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  int v3 = *((_DWORD *)a1 + 2);
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = a1[5];
  outlined init with copy of _ViewListOutputs.Views(v1, (uint64_t)v30);
  if (v31)
  {
    uint64_t v8 = LODWORD(v30[0]);
    if (*((void *)&v30[0] + 1))
    {
      LODWORD(v21) = v30[0];
      uint64_t v22 = *((void *)&v30[0] + 1);
      protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
      type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
      lazy protocol witness table accessor for type _ViewListOutputs.ApplyModifiers and conformance _ViewListOutputs.ApplyModifiers();
      swift_retain();
      uint64_t v8 = Attribute.init<A>(body:value:flags:update:)();
      swift_release_n();
    }
  }
  else
  {
    outlined init with take of ScrollStateRequest(v30, (uint64_t)v27);
    outlined init with copy of AnyTrackedValue((uint64_t)v27, (uint64_t)v20);
    uint64_t v9 = *(void *)(v1 + 48);
    uint64_t v10 = v28;
    uint64_t v11 = v29;
    __swift_project_boxed_opaque_existential_1(v27, v28);
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v10, v11);
    uint64_t v21 = v2;
    uint64_t v13 = v9 - v12;
    LODWORD(v22) = v3;
    uint64_t v23 = v4;
    uint64_t v24 = v5;
    uint64_t v25 = v6;
    uint64_t v26 = v7;
    unint64_t v14 = _GraphInputs.stableIDScope.getter();
    uint64_t v18 = MEMORY[0x263F8EE88];
    char v19 = 0;
    int v17 = (void *)MEMORY[0x263F8EE78];
    BaseViewList.init(elements:implicitID:canTransition:stableIDScope:traitKeys:traits:)((uint64_t)v20, v13, 0, v14, v15 & 1, &v18, &v17, (uint64_t)&v21);
    v20[3] = &type metadata for BaseViewList;
    v20[4] = &protocol witness table for BaseViewList;
    v20[0] = swift_allocObject();
    outlined init with copy of BaseViewList((uint64_t)&v21, v20[0] + 16);
    type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
    type metadata accessor for External<ViewList>(0, (unint64_t *)&lazy cache variable for type metadata for External<ViewList>, MEMORY[0x263F288C8]);
    lazy protocol witness table accessor for type External<ViewList> and conformance External<A>();
    uint64_t v8 = Attribute.init<A>(body:value:flags:update:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
    outlined destroy of BaseViewList((uint64_t)&v21);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
  }
  return v8;
}

uint64_t outlined destroy of BaseViewList(uint64_t a1)
{
  return a1;
}

uint64_t destroy for BaseViewList(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t outlined init with copy of BaseViewList(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for BaseViewList(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _VariadicView_Children.endIndex.getter()
{
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  uint64_t v1 = static Update._lock;
  _MovableLockLock(static Update._lock);
  specialized static Update.begin()();
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v2);
  uint64_t v4 = ViewList.count.getter(v2, v3);
  static Update.end()();
  _MovableLockUnlock(v1);
  return v4;
}

uint64_t specialized RandomAccessCollection<>.distance(from:to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  uint64_t v6 = static Update._lock;
  _MovableLockLock(static Update._lock);
  specialized static Update.begin()();
  uint64_t v7 = v2[3];
  uint64_t v8 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  uint64_t v9 = ViewList.count.getter(v7, v8);
  static Update.end()();
  uint64_t result = _MovableLockUnlock(v6);
  if (a1 < 0 || v9 < a1)
  {
    __break(1u);
  }
  else
  {
    _MovableLockLock(v6);
    specialized static Update.begin()();
    uint64_t v11 = v3[3];
    uint64_t v12 = v3[4];
    __swift_project_boxed_opaque_existential_1(v3, v11);
    uint64_t v13 = ViewList.count.getter(v11, v12);
    static Update.end()();
    uint64_t result = _MovableLockUnlock(v6);
    if ((a2 & 0x8000000000000000) == 0 && v13 >= a2) {
      return a2 - a1;
    }
  }
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v5;
  Swift::UInt64 v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  uint64_t v6 = v2[1];
  uint64_t v5 = v2[2];
  uint64_t v7 = *v2 + 48;
  swift_beginAccess();
  if (!*(void *)(*(void *)v7 + 16)) {
    goto LABEL_13;
  }
  swift_retain();
  specialized __RawDictionaryStorage.find<A>(_:)(v6, v5);
  if ((v8 & 1) == 0)
  {
LABEL_12:
    swift_release();
LABEL_13:
    swift_endAccess();
    __break(1u);
    goto LABEL_14;
  }
  swift_endAccess();
  uint64_t v9 = swift_release();
  uint64_t v10 = specialized Text.Effect.DrawableContent.endIndex.getter(v9);
  if (a1 < 0 || v10 < a1)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  swift_beginAccess();
  if (*(void *)(*(void *)v7 + 16))
  {
    swift_retain();
    specialized __RawDictionaryStorage.find<A>(_:)(v6, v5);
    if ((v11 & 1) == 0)
    {
LABEL_14:
      swift_release();
      goto LABEL_15;
    }
    swift_endAccess();
    uint64_t v12 = swift_release();
    uint64_t v13 = specialized Text.Effect.DrawableContent.endIndex.getter(v12);
    if ((a2 & 0x8000000000000000) == 0 && v13 >= a2) {
      return a2 - a1;
    }
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = swift_endAccess();
  __break(1u);
  return result;
}

uint64_t SubviewsCollection.endIndex.getter()
{
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  uint64_t v1 = static Update._lock;
  _MovableLockLock(static Update._lock);
  specialized static Update.begin()();
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v2);
  uint64_t v4 = ViewList.count.getter(v2, v3);
  static Update.end()();
  _MovableLockUnlock(v1);
  return v4;
}

uint64_t _ViewList_ID._Views.__deallocating_deinit()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 128) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 152));

  return swift_deallocClassInstance();
}

uint64_t protocol witness for ViewList.applyNodes(from:style:list:transform:to:) in conformance _ViewList_Section(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t *, int *, uint64_t))
{
  int v9 = *v5;
  uint64_t v10 = *((void *)v5 + 1);
  uint64_t v11 = *((void *)v5 + 2);
  char v12 = *((unsigned char *)v5 + 24);
  uint64_t v20 = *a2;
  int v15 = v9;
  uint64_t v16 = v10;
  uint64_t v17 = v11;
  char v18 = v12;
  char v19 = 3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v13 = a5(a1, &v20, &v15, a4);
  outlined destroy of _ViewList_Node((uint64_t)&v15);
  return v13 & 1;
}

uint64_t partial apply for closure #1 in SectionAccumulator.formResult(from:listAttribute:includeEmptySectionsIf:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(uint64_t (**)(unsigned char *))(v4 + 24);
  uint64_t v6 = *(void *)(v4 + 32);
  uint64_t v8 = *a2;
  return SectionAccumulator.apply(start:style:node:transform:includeEmptySection:)(a1, &v8, a3, a4, v5, v6) & 1;
}

uint64_t SectionAccumulator.apply(start:style:node:transform:includeEmptySection:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(unsigned char *), uint64_t a6)
{
  uint64_t v7 = v6;
  *(void *)&long long v84 = a4;
  uint64_t v11 = *a2;
  outlined init with copy of _ViewList_Node(a3, (uint64_t)&v112);
  long long v85 = (void *)v6;
  switch(v117)
  {
    case 1:
      *(_OWORD *)&v102[32] = v114;
      long long v103 = v115;
      *(_OWORD *)id v104 = *(_OWORD *)v116;
      *(void *)&v104[13] = *(void *)&v116[13];
      *(_OWORD *)unsigned int v102 = v112;
      *(_OWORD *)&v102[16] = v113;
      a1 = *(uint64_t **)v84;
      uint64_t v12 = *(void *)(*(void *)v84 + 16);
      if (v12)
      {
        swift_bridgeObjectRetain();
        uint64_t v7 = (uint64_t)&a1[5 * v12 - 1];
        do
        {
          if (v12 > a1[2])
          {
            __break(1u);
            goto LABEL_38;
          }
          --v12;
          outlined init with copy of AnyTrackedValue(v7, (uint64_t)&v86);
          uint64_t v22 = *((void *)&v87 + 1);
          uint64_t v23 = v88;
          __swift_project_boxed_opaque_existential_1(&v86, *((uint64_t *)&v87 + 1));
          (*(void (**)(unsigned char *, uint64_t, uint64_t))(v23 + 8))(v102, v22, v23);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v86);
          v7 -= 40;
        }
        while (v12);
        swift_bridgeObjectRelease();
        uint64_t v7 = v6;
      }
      uint64_t v24 = *(void *)&v102[8];
      uint64_t v6 = *(void *)&v102[24];
      uint64_t v25 = *(void *)&v102[16];
      long long v27 = *(void **)v7;
      uint64_t v26 = *(void **)(v7 + 8);
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        goto LABEL_53;
      }
      goto LABEL_11;
    case 2:
      unint64_t v38 = 0;
      uint64_t v24 = v112;
      unint64_t v39 = *(void *)(v112 + 16);
      uint64_t v25 = v112 + 32;
      break;
    case 3:
      uint64_t v41 = v112;
      uint64_t v24 = *((void *)&v112 + 1);
      uint64_t v25 = v113;
      char v42 = BYTE8(v113);
      if (*(void *)(v6 + 16) < *(void *)(v6 + 80)) {
        SectionAccumulator.appendImplicitSection()();
      }
      *(_DWORD *)unsigned int v102 = v41;
      *(void *)&v102[8] = v24;
      *(void *)&v102[16] = v25;
      v102[24] = v42;
      *(void *)&long long v86 = 2;
      uint64_t v6 = (uint64_t)v102;
      Swift::Int v43 = _ViewList_Section.count(style:)((SwiftUI::_ViewList_IteratorStyle)&v86);
      if (v43 <= 0)
      {
        *(void *)unsigned int v102 = v25;
        swift_bridgeObjectRetain();
        uint64_t v6 = a5(v102);
        swift_bridgeObjectRelease();
        if ((v6 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          *(void *)(v7 + 16) = *(void *)(v7 + 80);
          goto LABEL_45;
        }
      }
      char v83 = v42;
      long long v81 = (void *)v43;
      if (*(void *)(v24 + 16) < 2uLL) {
        goto LABEL_48;
      }
      _s7SwiftUI4TextVAAE6EffectO11BaseContentVWOcTm_1(v24 + 80, (uint64_t)v102, (uint64_t (*)(void))type metadata accessor for (list: ViewList, attribute: Attribute<ViewList>));
      outlined init with take of ScrollStateRequest((long long *)v102, (uint64_t)&v86);
      uint64_t v44 = *((void *)&v87 + 1);
      uint64_t v45 = v88;
      __swift_project_boxed_opaque_existential_1(&v86, *((uint64_t *)&v87 + 1));
      uint64_t v6 = ViewList.count.getter(v44, v45);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v86);
      *((void *)&v87 + 1) = &type metadata for _ViewList_Section;
      *(void *)&long long v88 = &protocol witness table for _ViewList_Section;
      uint64_t v46 = swift_allocObject();
      *(void *)&long long v86 = v46;
      *(_DWORD *)(v46 + 16) = v41;
      *(void *)(v46 + 24) = v24;
      *(void *)(v46 + 32) = v25;
      *(unsigned char *)(v46 + 40) = v83;
      int v47 = *(void **)(v7 + 64);
      uint64_t v48 = *(void *)v84;
      _s7SwiftUI4TextVAAE6EffectO11BaseContentVWOcTm_1(v24 + 80, (uint64_t)v102, (uint64_t (*)(void))type metadata accessor for (list: ViewList, attribute: Attribute<ViewList>));
      outlined init with take of ScrollStateRequest((long long *)v102, (uint64_t)v99);
      _s7SwiftUI4TextVAAE6EffectO11BaseContentVWOcTm_1(v24 + 80, (uint64_t)v102, (uint64_t (*)(void))type metadata accessor for (list: ViewList, attribute: Attribute<ViewList>));
      unint64_t v49 = *(unsigned int *)&v102[40];
      id v50 = v47;
      *(void *)&long long v84 = v48;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v102);
      type metadata accessor for _ContiguousArrayStorage<Text.Effect.Drawable.Fragment>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<SectionAccumulator.RowIDs.Chunk>);
      uint64_t v51 = swift_allocObject();
      *(_OWORD *)(v51 + 16) = xmmword_2461B9DC0;
      LOBYTE(a5) = v51 + 32;
      outlined init with copy of AnyTrackedValue((uint64_t)v99, (uint64_t)v102);
      v95[0] = MEMORY[0x263F8EE78];
      char v98 = 0;
      SectionAccumulator.RowIDs.Chunk.init(list:listAttribute:transform:start:count:lowerBound:)(v102, v49, v95, 0, v6, 0, v51 + 32);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v99);
      if (!*(void *)(v24 + 16)) {
        goto LABEL_49;
      }
      unsigned int v52 = v47;
      _s7SwiftUI4TextVAAE6EffectO11BaseContentVWOcTm_1(v24 + 32, (uint64_t)v102, (uint64_t (*)(void))type metadata accessor for (list: ViewList, attribute: Attribute<ViewList>));
      outlined init with take of ScrollStateRequest((long long *)v102, (uint64_t)v99);
      uint64_t v53 = v100;
      a5 = v101;
      unsigned int v54 = __swift_project_boxed_opaque_existential_1(v99, v100);
      uint64_t v55 = v53;
      uint64_t v6 = (uint64_t)v54;
      uint64_t v56 = ViewList.count.getter(v55, (uint64_t)a5);
      if (*(void *)(v24 + 16) < 3uLL) {
        goto LABEL_50;
      }
      a5 = (uint64_t (*)(unsigned char *))v56;
      _s7SwiftUI4TextVAAE6EffectO11BaseContentVWOcTm_1(v24 + 128, (uint64_t)v102, (uint64_t (*)(void))type metadata accessor for (list: ViewList, attribute: Attribute<ViewList>));
      outlined init with take of ScrollStateRequest((long long *)v102, (uint64_t)v95);
      uint64_t v57 = v96;
      uint64_t v58 = v97;
      __swift_project_boxed_opaque_existential_1(v95, v96);
      uint64_t v59 = ViewList.count.getter(v57, v58);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v102[0] = 0;
      outlined init with take of ScrollStateRequest(&v86, (uint64_t)&v102[8]);
      *(void *)&long long v103 = v52;
      *((void *)&v103 + 1) = v41;
      *(void *)id v104 = v24;
      *(void *)&v104[8] = v25;
      v104[16] = v83;
      uint64_t v106 = v84;
      uint64_t v107 = v51;
      uint64_t v108 = (uint64_t (*)(void))a5;
      uint64_t v109 = v59;
      int v110 = v41;
      uint64_t v111 = 0;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v95);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v99);
      outlined init with copy of SectionAccumulator.Item((uint64_t)v102, (uint64_t)&v86);
      uint64_t v6 = v85[9];
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_32;
      }
      goto LABEL_51;
    default:
      uint64_t v12 = DWORD2(v114);
      unsigned __int8 v82 = BYTE12(v114);
      outlined init with take of ScrollStateRequest(&v112, (uint64_t)&v86);
      uint64_t v13 = *((void *)&v87 + 1);
      uint64_t v14 = v88;
      __swift_project_boxed_opaque_existential_1(&v86, *((uint64_t *)&v87 + 1));
      (*(void (**)(unsigned char *__return_ptr, uint64_t, uint64_t))(v14 + 24))(v102, v13, v14);
      if (!*(void *)v102
        || (BOOL v15 = specialized Set.contains(_:)((uint64_t)&type metadata for IsSectionedTraitKey, *(uint64_t *)v102),
            swift_bridgeObjectRelease(),
            v15))
      {
        uint64_t v16 = v88;
        uint64_t v17 = __swift_project_boxed_opaque_existential_1(&v86, *((uint64_t *)&v87 + 1));
        *(void *)unsigned int v102 = v11;
        double v18 = MEMORY[0x270FA5388](v17);
        char v19 = *(uint64_t (**)(uint64_t *, unsigned char *, unint64_t, void, uint64_t (*)(), double))(v16 + 48);
        LOBYTE(v99[0]) = v82;
        char v21 = v19(a1, v102, v20 | ((unint64_t)v82 << 32), v84, partial apply for closure #1 in SectionAccumulator.formResult(from:listAttribute:includeEmptySectionsIf:), v18);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v86);
        return v21 & 1;
      }
LABEL_38:
      uint64_t v71 = *((void *)&v87 + 1);
      uint64_t v72 = v88;
      __swift_project_boxed_opaque_existential_1(&v86, *((uint64_t *)&v87 + 1));
      uint64_t v32 = ViewList.count.getter(v71, v72);
      outlined init with copy of AnyTrackedValue((uint64_t)&v86, (uint64_t)v99);
      v95[0] = *(void *)v84;
      uint64_t v73 = v7;
      uint64_t v74 = *a1;
      long long v27 = *(void **)(v73 + 8);
      swift_bridgeObjectRetain();
      v102[0] = v82;
      SectionAccumulator.RowIDs.Chunk.init(list:listAttribute:transform:start:count:lowerBound:)(v99, v12 | ((unint64_t)v82 << 32), v95, v74, v32, (uint64_t)v27, (uint64_t)v102);
      uint64_t v25 = *(void *)&v102[8];
      uint64_t v26 = *(void **)v102;
      unint64_t v29 = *(void *)&v102[16];
      LOBYTE(a5) = v102[24];
      long long v84 = *(_OWORD *)&v102[32];
      int v30 = *(void **)v73;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if (result) {
        goto LABEL_39;
      }
      goto LABEL_56;
  }
  while (1)
  {
    if (v38 == v39)
    {
      unint64_t v38 = v39;
      memset(v102, 0, 44);
      goto LABEL_21;
    }
    if (v38 >= *(void *)(v24 + 16)) {
      break;
    }
    _s7SwiftUI4TextVAAE6EffectO11BaseContentVWOcTm_1(v25 + 48 * v38++, (uint64_t)v102, (uint64_t (*)(void))type metadata accessor for (list: ViewList, attribute: Attribute<ViewList>));
LABEL_21:
    outlined init with take of (list: ViewList, attribute: Attribute<ViewList>)?((uint64_t)v102, (uint64_t)&v86);
    if (!*((void *)&v87 + 1))
    {
      swift_bridgeObjectRelease();
      goto LABEL_45;
    }
    int v40 = DWORD2(v88);
    v99[0] = v11;
    outlined init with take of ScrollStateRequest(&v86, (uint64_t)v102);
    *(_DWORD *)&v102[40] = v40;
    v102[44] = 0;
    char v105 = 0;
    uint64_t v6 = SectionAccumulator.apply(start:style:node:transform:includeEmptySection:)(a1, v99, v102, v84, a5, a6);
    outlined destroy of _ViewList_Node((uint64_t)v102);
    if ((v6 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      char v21 = 0;
      return v21 & 1;
    }
  }
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  uint64_t v6 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v6 + 16) + 1, 1, (void *)v6);
LABEL_32:
  long long v27 = v81;
  unint64_t v61 = *(void *)(v6 + 16);
  unint64_t v60 = *(void *)(v6 + 24);
  if (v61 >= v60 >> 1) {
    uint64_t v6 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v60 > 1), v61 + 1, 1, (void *)v6);
  }
  *(void *)(v6 + 16) = v61 + 1;
  uint64_t v62 = v6 + 136 * v61;
  *(_OWORD *)(v62 + 32) = v86;
  long long v63 = v87;
  long long v64 = v88;
  long long v65 = v90;
  *(_OWORD *)(v62 + 80) = v89;
  *(_OWORD *)(v62 + 96) = v65;
  *(_OWORD *)(v62 + 48) = v63;
  *(_OWORD *)(v62 + 64) = v64;
  long long v66 = v91;
  long long v67 = v92;
  long long v68 = v93;
  *(void *)(v62 + 160) = v94;
  *(_OWORD *)(v62 + 128) = v67;
  *(_OWORD *)(v62 + 144) = v68;
  *(_OWORD *)(v62 + 112) = v66;
  uint64_t v26 = v85;
  v85[9] = v6;
  outlined destroy of SectionAccumulator.Item((uint64_t)v102);
  uint64_t v69 = v85[10];
  BOOL v34 = __OFADD__(v69, v81);
  unint64_t v70 = (char *)v81 + v69;
  if (!v34)
  {
    v85[10] = v70;
    v85[2] = v70;
    goto LABEL_45;
  }
  __break(1u);
LABEL_53:
  long long v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27[2] + 1, 1, v27);
LABEL_11:
  unint64_t v29 = v27[2];
  unint64_t v28 = v27[3];
  int v30 = (void *)(v29 + 1);
  if (v29 >= v28 >> 1) {
    long long v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v28 > 1), v29 + 1, 1, v27);
  }
  v27[2] = v30;
  char v31 = &v27[6 * v29];
  v31[4] = v25;
  v31[5] = v6;
  v31[6] = v24;
  *((unsigned char *)v31 + 56) = 2;
  v31[8] = v24;
  v31[9] = v26;
  uint64_t v32 = (uint64_t)v85;
  *long long v85 = v27;
  outlined destroy of _ViewList_Sublist((uint64_t)v102);
  uint64_t v33 = v85[1];
  BOOL v34 = __OFADD__(v33, v24);
  uint64_t v35 = v33 + v24;
  if (v34)
  {
    __break(1u);
  }
  else
  {
    v85[1] = v35;
    uint64_t v36 = v85[10];
    BOOL v34 = __OFADD__(v36, v24);
    uint64_t v37 = v36 + v24;
    if (!v34)
    {
      v85[10] = v37;
LABEL_45:
      char v21 = 1;
      return v21 & 1;
    }
  }
  __break(1u);
LABEL_56:
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v30[2] + 1, 1, v30);
  int v30 = (void *)result;
LABEL_39:
  unint64_t v77 = v30[2];
  unint64_t v76 = v30[3];
  if (v77 >= v76 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v76 > 1), v77 + 1, 1, v30);
    int v30 = (void *)result;
  }
  long long v30[2] = v77 + 1;
  id v78 = &v30[6 * v77];
  v78[4] = v26;
  v78[5] = v25;
  v78[6] = v29;
  *((unsigned char *)v78 + 56) = (_BYTE)a5;
  *((_OWORD *)v78 + 4) = v84;
  *long long v85 = v30;
  if (__OFADD__(v27, v32))
  {
    __break(1u);
  }
  else
  {
    v85[1] = (char *)v27 + v32;
    uint64_t v79 = v85[10];
    BOOL v34 = __OFADD__(v79, v32);
    uint64_t v80 = v79 + v32;
    if (!v34)
    {
      v85[10] = v80;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v86);
      goto LABEL_45;
    }
  }
  __break(1u);
  return result;
}

uint64_t outlined init with copy of Text.Effect.BaseContent(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s7SwiftUI4TextVAAE6EffectO11BaseContentVWOcTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s7SwiftUI4TextVAAE6EffectO11BaseContentVWOcTm_1(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void _ss23_ContiguousArrayStorageCy7SwiftUI4TextVACE6EffectO8DrawableV8FragmentOGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t SectionAccumulator.RowIDs.Chunk.init(list:listAttribute:transform:start:count:lowerBound:)@<X0>(void *a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v13 = *a3;
  uint64_t v14 = a1[3];
  uint64_t v15 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v14);
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 32))(v14, v15);
  if (v16)
  {
    uint64_t v17 = (void *)v16;
    if (*(void *)(v13 + 16))
    {
      type metadata accessor for _ViewList_ID._Views<SectionAccumulator.TransformedIDs>();
      uint64_t v18 = swift_allocObject();
      char v19 = 0;
      *(void *)(v18 + 24) = v17;
      *(void *)(v18 + 32) = v13;
      *(unsigned char *)(v18 + 16) = 1;
      uint64_t v17 = (void *)v18;
    }
    else
    {
      swift_bridgeObjectRelease();
      char v19 = 0;
    }
  }
  else
  {
    uint64_t v27 = a5;
    uint64_t v28 = a4;
    uint64_t v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a5 & ~(a5 >> 63), 0, MEMORY[0x263F8EE78]);
    uint64_t v20 = a1[3];
    uint64_t v21 = a1[4];
    uint64_t v22 = __swift_project_boxed_opaque_existential_1(a1, v20);
    uint64_t v25 = v13;
    MEMORY[0x270FA5388](v22);
    v24[2] = &v26;
    v24[3] = &v27;
    ViewList.applyIDs(from:listAttribute:transform:to:)((uint64_t)&v28, a2 | ((HIDWORD(a2) & 1) << 32), &v25, (uint64_t (*)(unint64_t *))partial apply for closure #1 in SectionAccumulator.RowIDs.Chunk.init(list:listAttribute:transform:start:count:lowerBound:), (uint64_t)v24, v20, v21);
    swift_bridgeObjectRelease();
    uint64_t v17 = v26;
    char v19 = 1;
  }
  *(void *)(a7 + 8) = 0;
  *(void *)(a7 + 16) = 0;
  *(void *)a7 = v17;
  *(unsigned char *)(a7 + 24) = v19;
  *(void *)(a7 + 32) = a5;
  *(void *)(a7 + 40) = a6;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t _ViewList_Group.viewIDs.getter()
{
  unint64_t v1 = *v0;
  unint64_t v23 = MEMORY[0x263F8EE78];
  unint64_t v2 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain();
  char v3 = 0;
  unint64_t v4 = 0;
  while (1)
  {
    if (v4 == v2)
    {
      unint64_t v4 = v2;
      memset(v20, 0, 44);
    }
    else
    {
      if (v4 >= *(void *)(v1 + 16))
      {
        __break(1u);
        goto LABEL_22;
      }
      outlined init with copy of (list: ViewList, attribute: Attribute<ViewList>)(v1 + 32 + 48 * v4++, (uint64_t)v20);
    }
    outlined init with take of (list: ViewList, attribute: Attribute<ViewList>)?((uint64_t)v20, (uint64_t)&v21, &lazy cache variable for type metadata for (list: ViewList, attribute: Attribute<ViewList>)?, (void (*)(uint64_t))type metadata accessor for (list: ViewList, attribute: Attribute<ViewList>));
    if (!v22) {
      break;
    }
    outlined init with take of ScrollStateRequest(&v21, (uint64_t)v20);
    uint64_t v5 = *((void *)&v20[1] + 1);
    uint64_t v6 = *(void *)&v20[2];
    __swift_project_boxed_opaque_existential_1(v20, *((uint64_t *)&v20[1] + 1));
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 32))(v5, v6);
    if (!v7)
    {
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
      swift_bridgeObjectRelease();
      return 0;
    }
    uint64_t v8 = v7;
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 88);
    uint64_t v10 = swift_retain();
    uint64_t v13 = v9(v10, v11, v12);
    swift_release();
    if (v13)
    {
      uint64_t v14 = swift_retain();
      MEMORY[0x24C522D60](v14);
      if (*(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      if (v3) {
        char v3 = 1;
      }
      else {
        char v3 = *(unsigned char *)(v8 + 16);
      }
    }
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v1 = v23;
  if (v23 >> 62)
  {
LABEL_22:
    swift_bridgeObjectRetain();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v16 == 1) {
      goto LABEL_23;
    }
LABEL_17:
    if (v16)
    {
      type metadata accessor for _ViewList_ID.JoinedViews();
      uint64_t v18 = swift_allocObject();
      unint64_t v19 = swift_bridgeObjectRetain();
      uint64_t v17 = specialized _ViewList_ID.JoinedViews.init(_:isDataDependent:)(v19, v3 & 1, v18);
      swift_bridgeObjectRelease_n();
      swift_release();
      return v17;
    }
    type metadata accessor for _ViewList_ID._Views<EmptyCollection<_ViewList_ID>>();
    uint64_t v17 = swift_allocObject();
    *(unsigned char *)(v17 + 16) = 0;
LABEL_26:
    swift_bridgeObjectRelease();
    return v17;
  }
  uint64_t v16 = *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v16 != 1) {
    goto LABEL_17;
  }
LABEL_23:
  if ((v1 & 0xC000000000000001) != 0)
  {
    uint64_t v17 = MEMORY[0x24C523D60](0, v1);
    goto LABEL_26;
  }
  if (*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v17 = *(void *)(v1 + 32);
    swift_retain();
    goto LABEL_26;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in ForEachState.viewIDs.getter(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  int v9 = *(_OWORD **)a3;
  outlined init with copy of _ViewListOutputs.Views(a3 + *(void *)(*(void *)a3 + 176), (uint64_t)&v18);
  if ((v19 & 1) == 0)
  {
    long long v14 = v9[8];
    long long v15 = v9[7];
    long long v16 = v14;
    long long v17 = v9[9];
    type metadata accessor for ForEachState.StaticViewIDCollection();
    swift_getWitnessTable();
    swift_getWitnessTable();
    type metadata accessor for _ViewList_ID._Views();
    *(void *)&long long v15 = a5;
    *a4 = specialized _ViewList_ID._Views.__allocating_init(_:isDataDependent:)((uint64_t)&v15, 0);
    swift_release();
    outlined destroy of _ViewListOutputs.Views((uint64_t)&v18);
    return 0;
  }
  uint64_t result = swift_release();
  if (*(unsigned char *)(a6 + 124) != 1)
  {
    type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
    Inputuint64_t Value = AGGraphGetInputValue();
    outlined init with copy of AnyTrackedValue(InputValue, (uint64_t)&v15);
    uint64_t v12 = *((void *)&v16 + 1);
    uint64_t v13 = v17;
    __swift_project_boxed_opaque_existential_1(&v15, *((uint64_t *)&v16 + 1));
    *a4 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 32))(v12, v13);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v15);
    return 0;
  }
  __break(1u);
  return result;
}

void protocol witness for ViewList.viewIDs.getter in conformance BaseViewList()
{
  uint64_t v1 = v0[5];
  if (v1 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (v1 <= 0x7FFFFFFF)
  {
    uint64_t v2 = v0[3];
    uint64_t v3 = v0[4];
    __swift_project_boxed_opaque_existential_1(v0, v2);
    uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
    type metadata accessor for _ViewList_ID._Views<_ViewList_ID.ElementCollection>();
    uint64_t v5 = swift_allocObject();
    *(_DWORD *)(v5 + 24) = 0;
    *(_DWORD *)(v5 + 28) = v1;
    *(void *)(v5 + 32) = MEMORY[0x263F8EE78];
    *(void *)(v5 + 40) = v4;
    *(unsigned char *)(v5 + 16) = 0;
    return;
  }
  __break(1u);
}

void type metadata accessor for _ViewList_ID._Views<_ViewList_ID.ElementCollection>()
{
  if (!lazy cache variable for type metadata for _ViewList_ID._Views<_ViewList_ID.ElementCollection>)
  {
    lazy protocol witness table accessor for type _ViewList_ID.ElementCollection and conformance _ViewList_ID.ElementCollection();
    lazy protocol witness table accessor for type _ViewList_ID.ElementCollection and conformance _ViewList_ID.ElementCollection();
    unint64_t v0 = type metadata accessor for _ViewList_ID._Views();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewList_ID._Views<_ViewList_ID.ElementCollection>);
    }
  }
}

uint64_t ForEachState.ForEachViewIDCollection.init(base:data:idGenerator:reuseID:isUnary:owner:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, char a4@<W4>, int a5@<W5>, uint64_t a6@<X6>, char *a7@<X8>)
{
  uint64_t v13 = *a3;
  long long v14 = (int *)type metadata accessor for ForEachState.ForEachViewIDCollection();
  *(void *)&a7[v14[19]] = 0;
  *(void *)a7 = a1;
  uint64_t v15 = *(void *)(a6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(&a7[v14[17]], a2, a6);
  *(void *)&a7[v14[18]] = v13;
  a7[v14[20]] = a4;
  *(_DWORD *)&a7[v14[21]] = a5;
  long long v16 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 88);
  uint64_t v17 = swift_retain();
  uint64_t v18 = v16(v17);
  uint64_t result = v16(v18);
  if (result < 0)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  uint64_t result = v16(result);
  if (v18 < 0 || result < v18) {
    goto LABEL_7;
  }
  *(void *)&a7[v14[22]] = v18;
  uint64_t v20 = dispatch thunk of Collection.count.getter();
  swift_release();
  swift_release();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(a2, a6);
  if ((unsigned __int128)(v18 * (__int128)v20) >> 64 == (v18 * v20) >> 63)
  {
    *(void *)&a7[v14[23]] = v18 * v20;
    return result;
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t _ViewList_ID._Views.endIndex.getter()
{
  dispatch thunk of Collection.endIndex.getter();
  return v1;
}

void protocol witness for Collection.endIndex.getter in conformance _ViewList_ID.ElementCollection(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 16);
}

uint64_t protocol witness for Collection.endIndex.getter in conformance DynamicViewList<A>.WrappedIDs@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = DynamicViewList.WrappedIDs.endIndex.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t DynamicViewList.WrappedIDs.endIndex.getter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 88))();
}

uint64_t protocol witness for Collection.endIndex.getter in conformance ForEachState<A, B, C>.ForEachViewIDCollection@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = ForEachState.ForEachViewIDCollection.endIndex.getter(a1);
  *a2 = result;
  return result;
}

uint64_t ForEachState.ForEachViewIDCollection.endIndex.getter(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 92));
}

uint64_t ForEachList.viewIDs.getter(uint64_t a1)
{
  return ForEachState.viewIDs.getter(a1);
}

uint64_t ForEachState.viewIDs.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 80);
  uint64_t v40 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v4 = (char *)&v31 - v3;
  uint64_t v6 = v5[11];
  uint64_t v7 = (void *)v5[12];
  uint64_t v8 = v5[13];
  uint64_t v9 = v5[14];
  uint64_t v10 = v5[15];
  uint64_t v43 = v2;
  uint64_t v44 = v6;
  uint64_t v45 = v7;
  uint64_t v46 = v8;
  uint64_t v47 = v9;
  uint64_t v48 = v10;
  uint64_t v11 = type metadata accessor for ForEachState.ForEachViewIDCollection();
  uint64_t v38 = *(void *)(v11 - 8);
  uint64_t v39 = v11;
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v31 - v12;
  long long v14 = 0;
  if (!AGSubgraphIsValid()) {
    return (uint64_t)v14;
  }
  uint64_t v15 = ForEachState.fetchViewsPerElement()();
  if (v16) {
    return 0;
  }
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  MEMORY[0x270FA5388](v15);
  uint64_t v27 = &v42;
  uint64_t v28 = v17;
  uint64_t v37 = v17;
  uint64_t v29 = v1;
  uint64_t v43 = 2;
  ForEachState.forEachItem(from:style:do:)(&v41, (unint64_t *)&v43, (uint64_t (*)(uint64_t *, void *, uint64_t))partial apply for closure #1 in ForEachState.viewIDs.getter, (uint64_t)(&v31 - 6));
  if (!v42) {
    return 0;
  }
  if (*(unsigned char *)(v42 + 16))
  {
    swift_release();
    return 0;
  }
  uint64_t v32 = v42;
  uint64_t v19 = v1 + *(void *)(*(void *)v1 + 160);
  swift_beginAccess();
  uint64_t v43 = v2;
  uint64_t v44 = v6;
  uint64_t v45 = v7;
  uint64_t v46 = v8;
  uint64_t v47 = v9;
  uint64_t v20 = type metadata accessor for ForEach();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v35 = *(uint64_t (**)(uint64_t, uint64_t))(v21 + 48);
  uint64_t v36 = v19;
  uint64_t v33 = v20;
  uint64_t v34 = v21 + 48;
  uint64_t result = v35(v19, 1);
  if (result == 1)
  {
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v22 = v36;
  (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v4, v36, v2);
  uint64_t v23 = v22;
  uint64_t v24 = v33;
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v35)(v23, 1, v33);
  if (result == 1)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v40 = *(void *)(v36 + *(int *)(v24 + 64));
  uint64_t v43 = v40;
  uint64_t result = ((uint64_t (*)(void))v35)();
  if (result == 1)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if ((*(unsigned char *)(v1 + 124) & 1) == 0)
  {
    LODWORD(v35) = *(_DWORD *)(v1 + 120);
    LODWORD(v37) = v37 == 1;
    swift_retain();
    uint64_t v25 = v32;
    swift_retain_n();
    swift_retain();
    uint64_t v29 = v9;
    uint64_t v30 = v10;
    uint64_t v27 = v7;
    uint64_t v28 = v8;
    ForEachState.ForEachViewIDCollection.init(base:data:idGenerator:reuseID:isUnary:owner:)(v25, (uint64_t)v4, &v43, v37, (int)v35, v2, v13);
    uint64_t v26 = v39;
    swift_getWitnessTable();
    swift_getWitnessTable();
    type metadata accessor for _ViewList_ID._Views();
    long long v14 = specialized _ViewList_ID._Views.__allocating_init(_:isDataDependent:)((uint64_t)v13, 1);
    swift_release();
    (*(void (**)(char *, uint64_t))(v38 + 8))(v13, v26);
    swift_release();
    return (uint64_t)v14;
  }
LABEL_16:
  __break(1u);
  return result;
}

uint64_t DynamicViewList.WrappedList.viewIDs.getter()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
  if (result)
  {
    uint64_t v5 = result;
    closure #1 in DynamicViewList.WrappedList.viewIDs.getter(&v5, (uint64_t)v0, &v4);
    swift_release();
    return v4;
  }
  return result;
}

unsigned char *closure #1 in DynamicViewList.WrappedList.viewIDs.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *a1;
  type metadata accessor for DynamicViewList.WrappedIDs();
  swift_getWitnessTable();
  swift_getWitnessTable();
  type metadata accessor for _ViewList_ID._Views();
  uint64_t v6 = *(void *)(a2 + 40);
  v8[0] = v5;
  v8[1] = v6;
  uint64_t result = specialized _ViewList_ID._Views.__allocating_init(_:isDataDependent:)((uint64_t)v8, 1);
  *a3 = result;
  return result;
}

uint64_t type metadata accessor for _ViewList_ID._Views()
{
  return __swift_instantiateGenericMetadata();
}

unsigned char *specialized _ViewList_ID._Views.__allocating_init(_:isDataDependent:)(uint64_t a1, char a2)
{
  uint64_t v4 = (unsigned char *)swift_allocObject();
  (*(void (**)(unsigned char *, uint64_t))(*(void *)(*(void *)(*(void *)v4 + 128) - 8) + 16))(&v4[*(void *)(*(void *)v4 + 152)], a1);
  v4[16] = a2;
  return v4;
}

uint64_t type metadata accessor for DynamicViewList.WrappedIDs()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for ForEachState.ForEachViewIDCollection()
{
  return swift_getGenericMetadata();
}

uint64_t destroy for ForEachState.ForEachViewIDCollection(uint64_t a1, uint64_t a2)
{
  swift_release();
  (*(void (**)(unint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8))((a1
                                                                                            + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80)
                                                                                            + 8) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80));
  swift_release();

  return swift_release();
}

uint64_t protocol witness for ViewList.viewIDs.getter in conformance ForEachList<A, B, C>()
{
  return ForEachList.viewIDs.getter(*v0);
}

void *initializeWithCopy for ForEachState.ForEachViewIDCollection(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  uint64_t v6 = *(void *)(v4 - 8) + 16;
  uint64_t v7 = *(unsigned __int8 *)(*(void *)(v4 - 8) + 80);
  uint64_t v8 = ((unint64_t)a1 + v7 + 8) & ~v7;
  uint64_t v9 = ((unint64_t)a2 + v7 + 8) & ~v7;
  swift_retain();
  v5(v8, v9, v4);
  uint64_t v10 = *(void *)(v6 + 48) + 7;
  uint64_t v11 = (void *)((v10 + v8) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v12 = (void *)((v10 + v9) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v11 = *v12;
  unint64_t v13 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v13 = *(void *)v14;
  *(unsigned char *)(v13 + 8) = *(unsigned char *)(v14 + 8);
  *(_DWORD *)(v13 + 12) = *(_DWORD *)(v14 + 12);
  uint64_t v15 = (void *)((v13 + 23) & 0xFFFFFFFFFFFFFFF8);
  char v16 = (void *)((v14 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v15 = *v16;
  *(void *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t outlined destroy of SectionAccumulator.Item(uint64_t a1)
{
  return a1;
}

uint64_t destroy for SectionConfiguration(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);

  if (*(void *)(a1 + 64))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t outlined init with copy of SectionAccumulator.Item(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for SectionConfiguration(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 8, a2 + 8);
  uint64_t v5 = *(void **)(a2 + 48);
  *(void *)(a1 + 48) = v5;
  uint64_t v6 = *(void *)(a2 + 64);
  id v7 = v5;
  if (v6)
  {
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
    uint64_t v8 = *(void *)(a2 + 72);
    *(void *)(a1 + 64) = v6;
    *(void *)(a1 + 72) = v8;
    *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 65) = *(_OWORD *)(a2 + 65);
  }
  uint64_t v9 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v9;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

Swift::Int __swiftcall _ViewList_Section.count(style:)(Swift::Int style)
{
  unint64_t v2 = *(void *)style;
  uint64_t v3 = *(void *)(v1 + 8);
  if (*(unsigned char *)(v1 + 24) == 1)
  {
    if (*(void *)(v3 + 16))
    {
      outlined init with copy of (list: ViewList, attribute: Attribute<ViewList>)(v3 + 32, (uint64_t)v21);
      outlined init with take of ScrollStateRequest(v21, (uint64_t)v22);
      uint64_t v4 = v23;
      uint64_t v5 = v24;
      __swift_project_boxed_opaque_existential_1(v22, v23);
      *(void *)&v21[0] = v2 & 0xFFFFFFFFFFFFFFFELL | ((v2 & 0xFFFFFFFFFFFFFFFELL) != 2);
      Swift::Int v6 = (*(uint64_t (**)(long long *, uint64_t, uint64_t))(v5 + 8))(v21, v4, v5);
LABEL_14:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
      return v6;
    }
    __break(1u);
    goto LABEL_16;
  }
  if (*(void *)(v3 + 16) < 2uLL)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  outlined init with copy of (list: ViewList, attribute: Attribute<ViewList>)(v3 + 80, (uint64_t)v21);
  outlined init with take of ScrollStateRequest(v21, (uint64_t)v22);
  uint64_t v7 = v23;
  uint64_t v8 = v24;
  __swift_project_boxed_opaque_existential_1(v22, v23);
  *(void *)&v21[0] = v2;
  uint64_t v9 = (*(uint64_t (**)(long long *, uint64_t, uint64_t))(v8 + 8))(v21, v7, v8);
  style = __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
  int64_t v10 = v2 >> 1;
  if (v2 >> 1 == 1) {
    goto LABEL_26;
  }
  if (v2 < 2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v11 = v9 % v10;
  if (!(v9 % v10)) {
    goto LABEL_26;
  }
  BOOL v12 = __OFSUB__(v10, v11);
  int64_t v13 = v10 - v11;
  if (v12)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  BOOL v12 = __OFADD__(v9, v13);
  v9 += v13;
  if (!v12)
  {
LABEL_26:
    if (*(void *)(v3 + 16))
    {
      BOOL v14 = v10 != 1;
      outlined init with copy of (list: ViewList, attribute: Attribute<ViewList>)(v3 + 32, (uint64_t)v21);
      outlined init with take of ScrollStateRequest(v21, (uint64_t)v22);
      uint64_t v15 = v23;
      uint64_t v16 = v24;
      __swift_project_boxed_opaque_existential_1(v22, v23);
      unint64_t v17 = v2 & 0xFFFFFFFFFFFFFFFELL | v14;
      *(void *)&v21[0] = v17;
      style = (*(uint64_t (**)(long long *, uint64_t, uint64_t))(v16 + 8))(v21, v15, v16);
      uint64_t v18 = v9 + style;
      if (!__OFADD__(v9, style))
      {
        style = __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
        if (*(void *)(v3 + 16) >= 3uLL)
        {
          outlined init with copy of (list: ViewList, attribute: Attribute<ViewList>)(v3 + 128, (uint64_t)v21);
          outlined init with take of ScrollStateRequest(v21, (uint64_t)v22);
          uint64_t v19 = v23;
          uint64_t v20 = v24;
          __swift_project_boxed_opaque_existential_1(v22, v23);
          *(void *)&v21[0] = v17;
          style = (*(uint64_t (**)(long long *, uint64_t, uint64_t))(v20 + 8))(v21, v19, v20);
          Swift::Int v6 = v18 + style;
          if (!__OFADD__(v18, style)) {
            goto LABEL_14;
          }
          goto LABEL_20;
        }
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
        goto LABEL_21;
      }
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
LABEL_23:
  __break(1u);
  return style;
}

Swift::Int __swiftcall _ViewList_Group.count(style:)(SwiftUI::_ViewList_IteratorStyle style)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)style.value;
    uint64_t v4 = *(void *)v1 + 32;
    swift_bridgeObjectRetain();
    Swift::Int v5 = 0;
    while (1)
    {
      outlined init with copy of (list: ViewList, attribute: Attribute<ViewList>)(v4, (uint64_t)v11);
      uint64_t v6 = v12;
      uint64_t v7 = v13;
      __swift_project_boxed_opaque_existential_1(v11, v12);
      uint64_t v10 = v3;
      Swift::Int result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v7 + 8))(&v10, v6, v7);
      BOOL v9 = __OFADD__(v5, result);
      v5 += result;
      if (v9) {
        break;
      }
      outlined destroy of (list: ViewList, attribute: Attribute<ViewList>)((uint64_t)v11);
      v4 += 48;
      if (!--v2)
      {
        swift_bridgeObjectRelease();
        return v5;
      }
    }
    __break(1u);
  }
  else
  {
    return 0;
  }
  return result;
}

uint64_t ViewList.count.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 2;
  return (*(uint64_t (**)(uint64_t *, uint64_t))(a2 + 8))(&v3, a1);
}

uint64_t ModifiedViewList.count(style:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = v1[3];
  uint64_t v4 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v3);
  uint64_t v6 = v2;
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 + 8))(&v6, v3, v4);
}

uint64_t protocol witness for ViewList.count(style:) in conformance BaseViewList(unint64_t *a1)
{
  unint64_t v2 = *a1;
  uint64_t v3 = v1[3];
  uint64_t v4 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
  if (v2)
  {
    uint64_t v6 = result;
    result *= v2 >> 1;
    if ((unsigned __int128)(v6 * (__int128)(v2 >> 1)) >> 64 != result >> 63) {
      __break(1u);
    }
  }
  return result;
}

uint64_t static Layout.makeStaticView(root:inputs:properties:list:)@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, int *a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v53 = a6;
  unsigned int v52 = a5;
  v90[2] = *MEMORY[0x263EF8340];
  unsigned int v9 = *a1;
  unint64_t v55 = *(void *)a2;
  int v56 = *(_DWORD *)(a2 + 8);
  uint64_t v10 = *(void *)(a2 + 16);
  int v57 = *(_DWORD *)(a2 + 24);
  int v58 = *(_DWORD *)(a2 + 28);
  int v59 = *(_DWORD *)(a2 + 32);
  int v67 = *(_DWORD *)(a2 + 36);
  uint64_t v60 = *(void *)(a2 + 40);
  uint64_t v61 = *(void *)(a2 + 48);
  int v62 = *(_DWORD *)(a2 + 56);
  int v63 = *(_DWORD *)(a2 + 60);
  unsigned int v54 = *(_DWORD *)(a2 + 64);
  unsigned int v11 = *(_DWORD *)(a2 + 72);
  int v64 = *(_DWORD *)(a2 + 68);
  int v65 = *(_DWORD *)(a2 + 76);
  int v66 = *(_DWORD *)(a2 + 80);
  int v12 = *(unsigned __int8 *)(a3 + 1);
  int v13 = *(unsigned __int8 *)(a3 + 2);
  uint64_t v14 = a4[3];
  uint64_t v15 = a4[4];
  __swift_project_boxed_opaque_existential_1(a4, v14);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v14, v15);
  if (result == 1)
  {
    if (v13)
    {
      uint64_t v17 = a4[3];
      uint64_t v18 = a4[4];
      __swift_project_boxed_opaque_existential_1(a4, v17);
      v90[0] = 0;
      unint64_t v74 = v55;
      LODWORD(v75) = v56;
      uint64_t v76 = v10;
      int v77 = v57;
      int v78 = v58;
      int v79 = v59;
      int v80 = v67;
      uint64_t v81 = v60;
      uint64_t v82 = v61;
      int v83 = v62;
      int v84 = v63;
      unsigned int v85 = v54;
      int v86 = v64;
      unsigned int v87 = v11;
      int v88 = v65;
      int v89 = v66;
      (*(void (**)(void *, void *, unint64_t *, void, uint64_t (*)(void *, uint64_t *, void (*)(void *__return_ptr, uint64_t *)), void, uint64_t, uint64_t))(v18 + 16))(v73, v90, &v74, 0, specialized closure #1 in closure #1 in _ViewList_Elements.makeAllElements(inputs:indirectMap:body:), 0, v17, v18);
      uint64_t v20 = v73[0];
      uint64_t v19 = v73[1];
      uint64_t result = swift_isEscapingClosureAtFileLocation();
      if ((result & 1) == 0)
      {
        if (v20)
        {
          *(void *)a7 = v20;
          *(void *)(a7 + 8) = v19;
          return result;
        }
        goto LABEL_25;
      }
LABEL_28:
      __break(1u);
    }
  }
  else if (!result && v12)
  {
LABEL_25:
    *(void *)a7 = MEMORY[0x263F8EE78];
    int v43 = *MEMORY[0x263F288F8];
    *(_DWORD *)(a7 + 8) = 0;
    *(_DWORD *)(a7 + 12) = v43;
    return result;
  }
  int v71 = 0;
  char v72 = 1;
  uint64_t v51 = (void *)a7;
  int v50 = v67 & 0x22;
  if ((v67 & 0x22) != 0)
  {
    uint64_t v21 = swift_beginAccess();
    unint64_t v74 = __PAIR64__(*(_DWORD *)(v10 + 16), v9);
    uint64_t v75 = MEMORY[0x263F8EE78];
    MEMORY[0x270FA5388](v21);
    uint64_t v47 = (uint64_t *)type metadata accessor for StaticLayoutComputer();
    uint64_t WitnessTable = swift_getWitnessTable();
    _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_1(0, &lazy cache variable for type metadata for Attribute<LayoutComputer>, (uint64_t)&type metadata for LayoutComputer, MEMORY[0x263F28898]);
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v74, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_0, (uint64_t)&v45, (uint64_t)v47, MEMORY[0x263F8E628], v22, MEMORY[0x263F8E658], v23);
    uint64_t v24 = v10;
    swift_bridgeObjectRelease();
    unsigned int v25 = v54;
    unint64_t v74 = __PAIR64__(v54, v11);
    int v49 = v90[0];
    LODWORD(v75) = v90[0];
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_1(0, &lazy cache variable for type metadata for [ViewGeometry], (uint64_t)&type metadata for ViewGeometry, MEMORY[0x263F8D488]);
    lazy protocol witness table accessor for type LayoutChildGeometries and conformance LayoutChildGeometries();
    int v71 = Attribute.init<A>(body:value:flags:update:)();
    char v72 = 0;
  }
  else
  {
    int v49 = 0;
    unsigned int v25 = v54;
    uint64_t v24 = v10;
  }
  uint64_t v69 = 0;
  uint64_t v70 = MEMORY[0x263F8EE78];
  uint64_t v26 = a4[4];
  uint64_t v27 = __swift_project_boxed_opaque_existential_1(a4, a4[3]);
  MEMORY[0x270FA5388](v27);
  uint64_t v45 = &v71;
  uint64_t v46 = &v69;
  uint64_t v47 = &v70;
  uint64_t v28 = swift_allocObject();
  *(void *)(v28 + 16) = partial apply for closure #2 in static Layout.makeStaticView(root:inputs:properties:list:);
  *(void *)(v28 + 24) = &v44;
  uint64_t v68 = 0;
  unint64_t v74 = v55;
  LODWORD(v75) = v56;
  uint64_t v76 = v24;
  int v77 = v57;
  int v78 = v58;
  char v29 = v67;
  int v79 = v59;
  int v80 = v67;
  uint64_t v81 = v60;
  uint64_t v82 = v61;
  int v83 = v62;
  int v84 = v63;
  unsigned int v85 = v25;
  int v86 = v64;
  unsigned int v87 = v11;
  int v88 = v65;
  int v89 = v66;
  double v30 = MEMORY[0x270FA5388](v28);
  (*(void (**)(void *, uint64_t *, unint64_t *, void, uint64_t (*)(uint64_t, uint64_t *, uint64_t, uint64_t), double))(v26 + 16))(v90, &v68, &v74, 0, partial apply for closure #1 in closure #1 in _ViewList_Elements.makeAllElements(inputs:indirectMap:body:), v30);
  uint64_t v31 = v90[0];
  uint64_t v32 = v90[1];
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t v34 = swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
    goto LABEL_28;
  }
  int v35 = v29 & 2;
  int v36 = *MEMORY[0x263F288F8];
  BOOL v37 = v31 == 0;
  if (v31)
  {
    int v38 = v32;
  }
  else
  {
    uint64_t v31 = MEMORY[0x263F8EE78];
    int v38 = 0;
  }
  if (v37) {
    int v39 = *MEMORY[0x263F288F8];
  }
  else {
    int v39 = HIDWORD(v32);
  }
  if (v50)
  {
    MEMORY[0x270FA5388](v34);
    uint64_t v45 = v52;
    uint64_t v46 = v53;
    uint64_t v47 = &v70;
    uint64_t v40 = type metadata accessor for StaticLayoutComputer();
    MEMORY[0x270FA5388](v40);
    int v36 = v49;
    AGGraphMutateAttribute();
  }
  if (v35) {
    int v41 = v36;
  }
  else {
    int v41 = v39;
  }
  uint64_t v42 = v51;
  *uint64_t v51 = v31;
  *((_DWORD *)v42 + 2) = v38 | (v35 << 6);
  *((_DWORD *)v42 + 3) = v41;
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for _ViewList_Elements.count.getter in conformance MergedElements()
{
  return MergedElements.count.getter(*(void *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t type metadata accessor for StaticLayoutComputer()
{
  return __swift_instantiateGenericMetadata();
}

Swift::Int __swiftcall _ViewList_Node.estimatedCount(style:)(SwiftUI::_ViewList_IteratorStyle style)
{
  unint64_t v2 = *(void *)style.value;
  outlined init with copy of _ViewList_Node(v1, (uint64_t)&v14);
  switch(v19)
  {
    case 1:
      long long v10 = v16;
      long long v11 = v17;
      v12[0] = *(_OWORD *)v18;
      *(void *)((char *)v12 + 13) = *(void *)&v18[13];
      long long v8 = v14;
      long long v9 = v15;
      uint64_t v5 = *((void *)&v14 + 1);
      outlined destroy of _ViewList_Sublist((uint64_t)&v8);
      if (v2)
      {
        uint64_t v6 = (unsigned __int128)(v5 * (__int128)(v2 >> 1)) >> 64;
        v5 *= v2 >> 1;
        if (v6 != v5 >> 63)
        {
          __break(1u);
          goto LABEL_6;
        }
      }
      break;
    case 2:
LABEL_6:
      *(void *)&long long v8 = v14;
      unint64_t v13 = v2;
      uint64_t v5 = _ViewList_Group.estimatedCount(style:)((SwiftUI::_ViewList_IteratorStyle)&v13);
      goto LABEL_8;
    case 3:
      LODWORD(v8) = v14;
      *((void *)&v8 + 1) = *((void *)&v14 + 1);
      *(void *)&long long v9 = v15;
      BYTE8(v9) = BYTE8(v15);
      unint64_t v13 = v2;
      uint64_t v5 = _ViewList_Section.estimatedCount(style:)((SwiftUI::_ViewList_IteratorStyle)&v13);
      swift_bridgeObjectRelease();
LABEL_8:
      swift_bridgeObjectRelease();
      break;
    default:
      outlined init with take of ScrollStateRequest(&v14, (uint64_t)&v8);
      uint64_t v3 = *((void *)&v9 + 1);
      uint64_t v4 = v10;
      __swift_project_boxed_opaque_existential_1(&v8, *((uint64_t *)&v9 + 1));
      unint64_t v13 = v2;
      uint64_t v5 = (*(uint64_t (**)(unint64_t *, uint64_t, uint64_t))(v4 + 16))(&v13, v3, v4);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v8);
      break;
  }
  return v5;
}

uint64_t protocol witness for ViewList.count(style:) in conformance ForEachList<A, B, C>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t (*a4)(uint64_t *))
{
  return ForEachList.count(style:)(a1, *(void *)v4, *(unsigned int *)(v4 + 8), a2[2], a2[3], a2[4], a2[5], a2[6], a2[7], a4);
}

uint64_t ForEachList.count(style:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(uint64_t *))
{
  uint64_t v11 = *a1;
  return a10(&v11);
}

uint64_t protocol witness for ViewList.estimatedCount(style:) in conformance ForEachList<A, B, C>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return protocol witness for ViewList.count(style:) in conformance ForEachList<A, B, C>(a1, a2, a3, (uint64_t (*)(uint64_t *))ForEachState.estimatedCount(style:));
}

uint64_t protocol witness for _ViewList_Elements.makeElements(from:inputs:indirectMap:body:) in conformance MergedElements(void *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MergedElements.makeElements(from:inputs:indirectMap:body:)(a1, a2, a3, a4, a5, a6, *(void *)v6, *(void *)(v6 + 8), *(void *)(v6 + 16), *(void *)(v6 + 24)) & 1;
}

uint64_t protocol witness for ViewList.count(style:) in conformance ForEachList<A, B, C>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return protocol witness for ViewList.count(style:) in conformance ForEachList<A, B, C>(a1, a2, a3, (uint64_t (*)(uint64_t *))ForEachState.count(style:));
}

Swift::Int __swiftcall _ViewList_Group.estimatedCount(style:)(SwiftUI::_ViewList_IteratorStyle style)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)style.value;
    uint64_t v4 = *(void *)v1 + 32;
    swift_bridgeObjectRetain();
    Swift::Int v5 = 0;
    while (1)
    {
      outlined init with copy of (list: ViewList, attribute: Attribute<ViewList>)(v4, (uint64_t)v11);
      uint64_t v6 = v12;
      uint64_t v7 = v13;
      __swift_project_boxed_opaque_existential_1(v11, v12);
      uint64_t v10 = v3;
      Swift::Int result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v7 + 16))(&v10, v6, v7);
      BOOL v9 = __OFADD__(v5, result);
      v5 += result;
      if (v9) {
        break;
      }
      outlined destroy of (list: ViewList, attribute: Attribute<ViewList>)((uint64_t)v11);
      v4 += 48;
      if (!--v2)
      {
        swift_bridgeObjectRelease();
        return v5;
      }
    }
    __break(1u);
  }
  else
  {
    return 0;
  }
  return result;
}

uint64_t protocol witness for _ViewList_Elements.makeElements(from:inputs:indirectMap:body:) in conformance EmptyViewListElements(void *a1)
{
  *a1 = 0;
  a1[1] = 0;
  return 1;
}

uint64_t ModifiedViewList.viewIDs.getter()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
}

unint64_t lazy protocol witness table accessor for type _ViewList_ID.ElementCollection and conformance _ViewList_ID.ElementCollection()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewList_ID.ElementCollection and conformance _ViewList_ID.ElementCollection;
  if (!lazy protocol witness table cache variable for type _ViewList_ID.ElementCollection and conformance _ViewList_ID.ElementCollection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewList_ID.ElementCollection and conformance _ViewList_ID.ElementCollection);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _ViewList_ID.ElementCollection and conformance _ViewList_ID.ElementCollection;
  if (!lazy protocol witness table cache variable for type _ViewList_ID.ElementCollection and conformance _ViewList_ID.ElementCollection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewList_ID.ElementCollection and conformance _ViewList_ID.ElementCollection);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _ViewList_ID.ElementCollection and conformance _ViewList_ID.ElementCollection;
  if (!lazy protocol witness table cache variable for type _ViewList_ID.ElementCollection and conformance _ViewList_ID.ElementCollection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewList_ID.ElementCollection and conformance _ViewList_ID.ElementCollection);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _ViewList_ID.ElementCollection and conformance _ViewList_ID.ElementCollection;
  if (!lazy protocol witness table cache variable for type _ViewList_ID.ElementCollection and conformance _ViewList_ID.ElementCollection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewList_ID.ElementCollection and conformance _ViewList_ID.ElementCollection);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _ViewList_ID.ElementCollection and conformance _ViewList_ID.ElementCollection;
  if (!lazy protocol witness table cache variable for type _ViewList_ID.ElementCollection and conformance _ViewList_ID.ElementCollection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewList_ID.ElementCollection and conformance _ViewList_ID.ElementCollection);
  }
  return result;
}

uint64_t type metadata accessor for AnyFontBox()
{
  return self;
}

uint64_t protocol witness for ImageProvider.resolve(in:) in conformance Image.SymbolRenderingModeProvider(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for ImageResolutionContext();
  uint64_t v4 = v3 - 8;
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v1;
  char v8 = *((unsigned char *)v1 + 8);
  outlined init with copy of ImageResolutionContext(a1, (uint64_t)v6);
  v6[*(int *)(v4 + 40)] = v8;
  (*(void (**)(char *))(*(void *)v7 + 80))(v6);
  return outlined destroy of ImageResolutionContext((uint64_t)v6);
}

double NamedImage.Cache.subscript.getter@<D0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v24 = a2;
  uint64_t v25 = a3;
  uint64_t v23 = type metadata accessor for NamedImage.VectorKey(0);
  MEMORY[0x270FA5388](v23);
  uint64_t v22 = (uint64_t)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  char v8 = (char *)&v22 - v7;
  uint64_t v9 = *(void *)(v3 + 8);
  outlined init with copy of NamedImage.Key(a1, (uint64_t)&v22 - v7, type metadata accessor for NamedImage.VectorKey);
  swift_retain();
  swift_retain_n();
  os_unfair_lock_lock((os_unfair_lock_t)(v9 + 16));
  uint64_t v10 = *(void *)(v9 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v9 + 16));
  swift_release();
  swift_release_n();
  if (*(void *)(v10 + 16) && (uint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v8), (v12 & 1) != 0))
  {
    outlined init with copy of NamedImage.VectorInfo(*(void *)(v10 + 56) + 88 * v11, (uint64_t)v26);
  }
  else
  {
    uint64_t v27 = 0;
    memset(v26, 0, sizeof(v26));
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of NamedImage.BitmapKey((uint64_t)v8, type metadata accessor for NamedImage.VectorKey);
  if (*(void *)&v26[0])
  {
    outlined init with take of NamedImage.VectorInfo((uint64_t)v26, (uint64_t)v28);
    uint64_t v13 = MEMORY[0x24C527E00](&v29);
    long long v14 = v24;
    if (v13)
    {
      long long v15 = (void *)v13;
      type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for CUICatalog);
      id v16 = v14;
      id v17 = v15;
      char v18 = static NSObject.== infix(_:_:)();

      if (v18) {
        goto LABEL_12;
      }
    }
    outlined destroy of NamedImage.VectorInfo(v28);
  }
  else
  {
    _sypSgWOhTm_10((uint64_t)v26, &lazy cache variable for type metadata for NamedImage.VectorInfo?, (uint64_t)&type metadata for NamedImage.VectorInfo);
    long long v14 = v24;
  }
  NamedImage.VectorKey.loadVectorInfo(from:idiom:)((uint64_t)v14, *(void *)(a1 + *(int *)(v23 + 52)), (uint64_t)v26);
  if (*(void *)&v26[0])
  {
    outlined init with take of NamedImage.VectorInfo((uint64_t)v26, (uint64_t)v28);
    uint64_t v19 = v22;
    outlined init with copy of NamedImage.Key(a1, v22, type metadata accessor for NamedImage.VectorKey);
    outlined init with copy of NamedImage.VectorInfo((uint64_t)v28, (uint64_t)v26);
    swift_retain();
    swift_retain_n();
    os_unfair_lock_lock((os_unfair_lock_t)(v9 + 16));
    specialized Dictionary.subscript.setter(v26, v19);
    os_unfair_lock_unlock((os_unfair_lock_t)(v9 + 16));
    swift_release();
    swift_release_n();
LABEL_12:
    outlined init with take of NamedImage.VectorInfo((uint64_t)v28, v25);
    return result;
  }
  _sypSgWOhTm_10((uint64_t)v26, &lazy cache variable for type metadata for NamedImage.VectorInfo?, (uint64_t)&type metadata for NamedImage.VectorInfo);
  uint64_t v21 = (_OWORD *)v25;
  *(void *)(v25 + 80) = 0;
  double result = 0.0;
  long long v21[3] = 0u;
  v21[4] = 0u;
  v21[1] = 0u;
  v21[2] = 0u;
  *uint64_t v21 = 0u;
  return result;
}

uint64_t outlined init with take of NamedImage.VectorInfo(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithTake for NamedImage.VectorInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  swift_unknownObjectWeakTakeInit();
  return a1;
}

uint64_t outlined init with copy of NamedImage.Key(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of NamedImage.BitmapKey(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for NamedImage.VectorKey(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for NamedImage.VectorKey);
}

void destroy for NamedImage.VectorKey(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = *(void **)(a1 + *(int *)(a2 + 48));
  if ((unint64_t)v6 >= 2)
  {
  }
}

uint64_t outlined init with copy of NamedImage.VectorKey(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t initializeWithCopy for NamedImage.VectorKey(uint64_t a1, uint64_t a2, int *a3)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v7 = a3[8];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Locale();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v12) = *(unsigned char *)(a2 + v12);
  uint64_t v13 = a3[12];
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  long long v14 = *(void **)(a2 + v13);
  if ((unint64_t)v14 >= 2) {
    id v15 = v14;
  }
  *(void *)(a1 + v13) = v14;
  *(void *)(a1 + a3[13]) = *(void *)(a2 + a3[13]);
  return a1;
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, void (*a2)(unsigned char *), uint64_t (*a3)(uint64_t, Swift::Int))
{
  Hasher.init(_seed:)();
  a2(v8);
  Swift::Int v5 = Hasher._finalize()();

  return a3(a1, v5);
}

void NamedImage.VectorKey.hash(into:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  Swift::Int v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::UInt v6 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v6);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if ((*((void *)v0 + 3) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v7 = *((void *)v0 + 3);
  }
  else {
    Swift::UInt64 v7 = 0;
  }
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v0[32]);
  uint64_t v8 = (int *)type metadata accessor for NamedImage.VectorKey(0);
  type metadata accessor for Locale();
  lazy protocol witness table accessor for type Locale and conformance Locale(&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x263F07690]);
  dispatch thunk of Hashable.hash(into:)();
  if ((*(void *)&v0[v8[9]] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v9 = *(void *)&v0[v8[9]];
  }
  else {
    Swift::UInt64 v9 = 0;
  }
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v0[v8[10]]);
  if ((*(void *)&v0[v8[11]] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v10 = *(void *)&v0[v8[11]];
  }
  else {
    Swift::UInt64 v10 = 0;
  }
  Hasher._combine(_:)(v10);
  uint64_t v11 = *(void **)&v0[v8[12]];
  if (v11)
  {
    if (v11 != (void *)1)
    {
      Hasher._combine(_:)(0);
      id v13 = objc_msgSend(v11, sel_bundleURL);
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      URL.hash(into:)();
      outlined consume of Image.Location(v11);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      outlined consume of Image.Location(v11);
      goto LABEL_16;
    }
    Swift::UInt v12 = 2;
  }
  else
  {
    Swift::UInt v12 = 1;
  }
  Hasher._combine(_:)(v12);
LABEL_16:
  Hasher._combine(_:)(*(void *)&v1[v8[13]]);
}

uint64_t lazy protocol witness table accessor for type Locale and conformance Locale(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(unsigned __int8 *a1, uint64_t a2)
{
  Swift::Int v5 = (int *)type metadata accessor for NamedImage.VectorKey(0);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (unsigned __int8 *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v10 = a2 & ~v9;
  if ((*(void *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = ~v9;
    uint64_t v12 = *(void *)(v6 + 72);
    do
    {
      outlined init with copy of NamedImage.VectorKey(*(void *)(v2 + 48) + v12 * v10, (uint64_t)v8, type metadata accessor for NamedImage.VectorKey);
      if (*v8 != *a1 || ((v8[1] ^ a1[1]) & 1) != 0) {
        goto LABEL_5;
      }
      BOOL v13 = *((void *)v8 + 1) == *((void *)a1 + 1) && *((void *)v8 + 2) == *((void *)a1 + 2);
      if (!v13 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
        || *((double *)v8 + 3) != *((double *)a1 + 3)
        || v8[32] != a1[32]
        || (MEMORY[0x24C5218A0](&v8[v5[8]], &a1[v5[8]]) & 1) == 0
        || *(double *)&v8[v5[9]] != *(double *)&a1[v5[9]]
        || v8[v5[10]] != a1[v5[10]]
        || *(double *)&v8[v5[11]] != *(double *)&a1[v5[11]])
      {
        goto LABEL_5;
      }
      uint64_t v14 = v5[12];
      id v15 = *(void **)&v8[v14];
      id v16 = *(void **)&a1[v14];
      if (v15)
      {
        if (v15 == (void *)1)
        {
          if (v16 != (void *)1) {
            goto LABEL_4;
          }
          outlined consume of Image.Location((id)1);
          outlined consume of Image.Location((id)1);
        }
        else
        {
          if ((unint64_t)v16 < 2)
          {
LABEL_4:
            outlined copy of Image.Location(*(id *)&v8[v14]);
            outlined copy of Image.Location(v16);
            outlined consume of Image.Location(v15);
            outlined consume of Image.Location(v16);
            goto LABEL_5;
          }
          outlined copy of Image.Location(*(id *)&v8[v14]);
          outlined copy of Image.Location(v16);
          if (v15 == v16)
          {
            outlined consume of Image.Location(v15);
            outlined consume of Image.Location(v16);
          }
          else
          {
            outlined copy of Image.Location(v15);
            outlined copy of Image.Location(v16);
            id v24 = objc_msgSend(v15, sel_bundlePath);
            uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            id v25 = v17;

            id v22 = objc_msgSend(v16, sel_bundlePath);
            uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            id v24 = v18;

            if (v23 == v21 && v25 == v24)
            {
              outlined consume of Image.Location(v16);
              outlined consume of Image.Location(v15);
              outlined consume of Image.Location(v15);
              outlined consume of Image.Location(v16);
              swift_bridgeObjectRelease_n();
            }
            else
            {
              LODWORD(v23) = _stringCompareWithSmolCheck(_:_:expecting:)();
              outlined consume of Image.Location(v16);
              outlined consume of Image.Location(v15);
              outlined consume of Image.Location(v15);
              outlined consume of Image.Location(v16);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v23 & 1) == 0) {
                goto LABEL_5;
              }
            }
          }
        }
      }
      else
      {
        if (v16) {
          goto LABEL_4;
        }
        outlined consume of Image.Location(0);
        outlined consume of Image.Location(0);
      }
      if (*(void *)&v8[v5[13]] == *(void *)&a1[v5[13]])
      {
        outlined destroy of NamedImage.VectorKey((uint64_t)v8, type metadata accessor for NamedImage.VectorKey);
        return v10;
      }
LABEL_5:
      outlined destroy of NamedImage.VectorKey((uint64_t)v8, type metadata accessor for NamedImage.VectorKey);
      unint64_t v10 = (v10 + 1) & v11;
    }
    while (((*(void *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;

  uint64_t v26 = (int *)type metadata accessor for NamedImage.BitmapKey(0);
  MEMORY[0x270FA5388](v26);
  uint64_t v7 = (unsigned __int8 *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t v9 = a2 & ~v8;
  if ((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    unint64_t v10 = ~v8;
    uint64_t v11 = *(void *)(v5 + 72);
    do
    {
      outlined init with copy of NamedImage.VectorKey(*(void *)(v2 + 48) + v11 * v9, (uint64_t)v7, type metadata accessor for NamedImage.BitmapKey);
      if (*v7 != *a1 || ((v7[1] ^ a1[1]) & 1) != 0) {
        goto LABEL_5;
      }
      uint64_t v12 = *((void *)v7 + 1) == *((void *)a1 + 1) && *((void *)v7 + 2) == *((void *)a1 + 2);
      if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
        || *((double *)v7 + 3) != *((double *)a1 + 3))
      {
        goto LABEL_5;
      }
      BOOL v13 = (void *)*((void *)v7 + 4);
      uint64_t v14 = (void *)*((void *)a1 + 4);
      if (v13)
      {
        if (v13 == (void *)1)
        {
          if (v14 != (void *)1) {
            goto LABEL_4;
          }
          outlined consume of Image.Location((id)1);
          outlined consume of Image.Location((id)1);
        }
        else
        {
          if ((unint64_t)v14 < 2)
          {
LABEL_4:
            outlined copy of Image.Location(*((id *)v7 + 4));
            outlined copy of Image.Location(v14);
            outlined consume of Image.Location(v13);
            outlined consume of Image.Location(v14);
            goto LABEL_5;
          }
          outlined copy of Image.Location(*((id *)v7 + 4));
          outlined copy of Image.Location(v14);
          if (v13 == v14)
          {
            outlined consume of Image.Location(v13);
            outlined consume of Image.Location(v14);
          }
          else
          {
            outlined copy of Image.Location(v13);
            outlined copy of Image.Location(v14);
            id v15 = objc_msgSend(v13, sel_bundlePath);
            id v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v23 = v17;
            id v24 = v16;

            char v18 = objc_msgSend(v14, sel_bundlePath);
            id v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            id v25 = v19;

            if (v24 == v22 && v23 == v25)
            {
              outlined consume of Image.Location(v14);
              outlined consume of Image.Location(v13);
              outlined consume of Image.Location(v13);
              outlined consume of Image.Location(v14);
              swift_bridgeObjectRelease_n();
            }
            else
            {
              LODWORD(v24) = _stringCompareWithSmolCheck(_:_:expecting:)();
              outlined consume of Image.Location(v14);
              outlined consume of Image.Location(v13);
              outlined consume of Image.Location(v13);
              outlined consume of Image.Location(v14);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v24 & 1) == 0) {
                goto LABEL_5;
              }
            }
          }
        }
      }
      else
      {
        if (v14) {
          goto LABEL_4;
        }
        outlined consume of Image.Location(0);
        outlined consume of Image.Location(0);
      }
      if (v7[40] == a1[40]
        && (MEMORY[0x24C5218A0](&v7[v26[9]], &a1[v26[9]]) & 1) != 0
        && v7[v26[10]] == a1[v26[10]]
        && *(void *)&v7[v26[11]] == *(void *)&a1[v26[11]]
        && *(void *)&v7[v26[12]] == *(void *)&a1[v26[12]]
        && v7[v26[13]] == a1[v26[13]]
        && v7[v26[14]] == a1[v26[14]])
      {
        outlined destroy of NamedImage.VectorKey((uint64_t)v7, type metadata accessor for NamedImage.BitmapKey);
        return v9;
      }
LABEL_5:
      outlined destroy of NamedImage.VectorKey((uint64_t)v7, type metadata accessor for NamedImage.BitmapKey);
      uint64_t v9 = (v9 + 1) & v10;
    }
    while (((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  return v9;
}

uint64_t outlined destroy of NamedImage.VectorKey(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t ResolvedVectorGlyph.init(glyph:value:flipsRightToLeft:in:at:catalog:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v13 = *a5;
  uint64_t v14 = (void *)a4[2];
  if (v14)
  {
    if ((a2 & 0x100000000) != 0) {
      double v15 = INFINITY;
    }
    else {
      double v15 = *(float *)&a2;
    }
    id v16 = v14;
    char v17 = ImageResolutionContext.willUpdateVectorGlyph(to:variableValue:)(a1, v15);
  }
  else
  {
    id v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F638C0]), sel_init);
    objc_msgSend(v16, sel_setAnchorPoint_, 0.0, 0.0);
    char v17 = 0;
    if ((a2 & 0x100000000) != 0) {
      double v15 = INFINITY;
    }
    else {
      double v15 = *(float *)&a2;
    }
  }
  objc_msgSend(v16, sel_setGlyph_, a1);
  objc_msgSend(v16, sel_setVariableValue_, v15);
  objc_msgSend(v16, sel_setFlipsRightToLeft_, a3 & 1);
  id v18 = v16;
  ImageResolutionContext.effectiveSymbolRenderingMode.getter(&v27);
  objc_msgSend(v18, sel_setRenderingMode_, dword_2461DCF08[v27]);

  uint64_t v19 = *a4;
  if (a4[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v19, &v26);
    swift_release_n();
    swift_release_n();
    char v20 = v26;
  }
  else
  {
    uint64_t v21 = swift_retain_n();
    uint64_t v22 = specialized find<A>(_:key:)(v21);
    if (v22) {
      char v20 = *(unsigned char *)(v22 + 72);
    }
    else {
      char v20 = 0;
    }
    swift_release_n();
  }
  unsigned int v23 = objc_msgSend(v18, sel_version);

  char v24 = *((unsigned char *)a4 + *(int *)(type metadata accessor for ImageResolutionContext() + 40));
  uint64_t result = outlined destroy of NamedImage.Key((uint64_t)a4, (uint64_t (*)(void))type metadata accessor for ImageResolutionContext);
  *(void *)a7 = v18;
  *(unsigned char *)(a7 + 8) = v20;
  *(void *)(a7 + 16) = v13;
  *(_DWORD *)(a7 + 24) = v23;
  *(unsigned char *)(a7 + 28) = v17 & 1;
  *(unsigned char *)(a7 + 29) = (v24 & 0x10) != 0;
  *(void *)(a7 + 32) = a6;
  return result;
}

uint64_t ImageResolutionContext.effectiveSymbolRenderingMode.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for ImageResolutionContext();
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (uint64_t *)((char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  int v8 = *(unsigned __int8 *)(v1 + *(int *)(v7 + 32));
  outlined init with copy of ImageResolutionContext(v2, (uint64_t)v6);
  if (v8 == 8)
  {
    uint64_t v9 = *v6;
    if (v6[1])
    {
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.value<A>(_:for:)(v9, (char *)&v19);
      swift_release_n();
      swift_release_n();
      int v8 = v19;
    }
    else
    {
      type metadata accessor for EnvironmentPropertyKey<SymbolRenderingModeKey>();
      BloomFilter.init(hashValue:)(v11);
      uint64_t v12 = v18;
      uint64_t v13 = swift_retain_n();
      uint64_t v14 = specialized find1<A>(_:key:filter:)(v13, v12);
      if (v14) {
        int v8 = *(unsigned __int8 *)(v14 + 72);
      }
      else {
        int v8 = 8;
      }
      swift_release_n();
    }
    uint64_t result = outlined destroy of ImageResolutionContext((uint64_t)v6);
    if (v8 == 8)
    {
      uint64_t v15 = *(void *)(v2 + 8);
      swift_retain();
      uint64_t v16 = swift_retain();
      char v17 = specialized ShapeStyle.isMultiLevel(in:)(v16, v15);
      swift_release();
      uint64_t result = swift_release();
      if (v17)
      {
        LOBYTE(v8) = 3;
      }
      else if (*(unsigned char *)(v2 + *(int *)(v4 + 40)))
      {
        if (one-time initialization token for preferredIfEnabled != -1) {
          uint64_t result = swift_once();
        }
        if (static SymbolRenderingMode.preferredIfEnabled == 8) {
          LOBYTE(v8) = 0;
        }
        else {
          LOBYTE(v8) = static SymbolRenderingMode.preferredIfEnabled;
        }
      }
      else
      {
        LOBYTE(v8) = 8;
      }
    }
  }
  else
  {
    uint64_t result = outlined destroy of ImageResolutionContext((uint64_t)v6);
  }
  *a1 = v8;
  return result;
}

uint64_t outlined init with copy of ImageResolutionContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ImageResolutionContext();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ImageResolutionContext(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s7SwiftUI22ImageResolutionContextVWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined destroy of ImageResolutionContext(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ImageResolutionContext();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *initializeWithCopy for ImageResolutionContext(void *a1, void *a2, int *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = (void *)a2[2];
  a1[2] = v5;
  uint64_t v6 = a3[6];
  uint64_t v7 = (void *)((char *)a1 + v6);
  int v8 = (void *)((char *)a2 + v6);
  uint64_t v9 = type metadata accessor for Text.Style(0);
  uint64_t v10 = *(void *)(v9 - 8);
  Swift::Int v11 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48);
  swift_retain();
  swift_retain();
  id v12 = v5;
  if (v11(v8, 1, v9))
  {
    _s7SwiftUI4TextV5StyleVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Text.Style?, (void (*)(uint64_t))type metadata accessor for Text.Style);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
    uint64_t v15 = a1;
    uint64_t v14 = a2;
  }
  else
  {
    uint64_t v65 = v10;
    int v67 = (int *)v9;
    uint64_t v16 = *v8;
    if (*v8 >= 2uLL) {
      uint64_t v16 = swift_retain();
    }
    uint64_t v17 = v8[1];
    unint64_t v18 = v8[2];
    *uint64_t v7 = v16;
    v7[1] = v17;
    swift_bridgeObjectRetain();
    outlined copy of Text.Style.TextStyleColor(v18);
    uint64_t v19 = v8[4];
    float64x2_t v7[3] = v8[3];
    v7[4] = v19;
    *((unsigned char *)v7 + 40) = *((unsigned char *)v8 + 40);
    void v7[6] = v8[6];
    *((unsigned char *)v7 + 56) = *((unsigned char *)v8 + 56);
    v7[8] = v8[8];
    *((unsigned char *)v7 + 72) = *((unsigned char *)v8 + 72);
    char v20 = v8 + 10;
    uint64_t v21 = v8[11];
    v7[2] = v18;
    swift_retain();
    if ((unint64_t)(v21 - 1) >= 2)
    {
      v7[10] = *v20;
      v7[11] = v21;
      swift_retain();
    }
    else
    {
      *((_OWORD *)v7 + 5) = *(_OWORD *)v20;
    }
    uint64_t v22 = v8 + 12;
    uint64_t v23 = v8[13];
    if ((unint64_t)(v23 - 1) >= 2)
    {
      v7[12] = *v22;
      v7[13] = v23;
      swift_retain();
    }
    else
    {
      *((_OWORD *)v7 + 6) = *(_OWORD *)v22;
    }
    char v24 = v7 + 14;
    id v25 = v8 + 14;
    uint64_t v26 = v8[22];
    if (v26 == 1)
    {
      long long v27 = *((_OWORD *)v8 + 12);
      *((_OWORD *)v7 + 11) = *((_OWORD *)v8 + 11);
      *((_OWORD *)v7 + 12) = v27;
      *((unsigned char *)v7 + 208) = *((unsigned char *)v8 + 208);
      long long v28 = *((_OWORD *)v8 + 8);
      *char v24 = *v25;
      *((_OWORD *)v7 + 8) = v28;
      long long v29 = *((_OWORD *)v8 + 10);
      *((_OWORD *)v7 + 9) = *((_OWORD *)v8 + 9);
      *((_OWORD *)v7 + 10) = v29;
    }
    else
    {
      *(void *)char v24 = *(void *)v25;
      *((unsigned char *)v7 + 120) = *((unsigned char *)v8 + 120);
      v7[16] = v8[16];
      *((unsigned char *)v7 + 136) = *((unsigned char *)v8 + 136);
      v7[18] = v8[18];
      *((unsigned char *)v7 + 152) = *((unsigned char *)v8 + 152);
      *((unsigned char *)v7 + 168) = *((unsigned char *)v8 + 168);
      v7[20] = v8[20];
      *((unsigned char *)v7 + 192) = *((unsigned char *)v8 + 192);
      uint64_t v30 = v8[23];
      v7[22] = v26;
      v7[23] = v30;
      *((unsigned char *)v7 + 208) = *((unsigned char *)v8 + 208);
      v7[25] = v8[25];
      swift_retain();
    }
    uint64_t v31 = v8[31];
    if (v31 == 1)
    {
      long long v32 = *(_OWORD *)(v8 + 29);
      *(_OWORD *)(v7 + 27) = *(_OWORD *)(v8 + 27);
      *(_OWORD *)(v7 + 29) = v32;
      v7[31] = v8[31];
    }
    else
    {
      *((_WORD *)v7 + 108) = *((_WORD *)v8 + 108);
      v7[28] = v8[28];
      *((_WORD *)v7 + 116) = *((_WORD *)v8 + 116);
      v7[30] = v8[30];
      v7[31] = v31;
      swift_bridgeObjectRetain();
    }
    uint64_t v33 = v8[36];
    int v66 = v3;
    if (v33 == 1)
    {
      long long v34 = *((_OWORD *)v8 + 17);
      *((_OWORD *)v7 + 16) = *((_OWORD *)v8 + 16);
      *((_OWORD *)v7 + 17) = v34;
      v7[36] = v8[36];
    }
    else
    {
      *((unsigned char *)v7 + 256) = *((unsigned char *)v8 + 256);
      *(_WORD *)((char *)v7 + 257) = *(_WORD *)((char *)v8 + 257);
      if (v33)
      {
        uint64_t v35 = v8[33];
        uint64_t v36 = v8[34];
        char v37 = *((unsigned char *)v8 + 280);
        outlined copy of Text.Storage(v35, v36, v37);
        v7[33] = v35;
        v7[34] = v36;
        *((unsigned char *)v7 + 280) = v37;
        v7[36] = v8[36];
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v38 = *(_OWORD *)(v8 + 35);
        *(_OWORD *)(v7 + 33) = *(_OWORD *)(v8 + 33);
        *(_OWORD *)(v7 + 35) = v38;
      }
    }
    int v39 = (void *)v8[37];
    uint64_t v40 = v8[38];
    v7[37] = (uint64_t)v39;
    v7[38] = v40;
    v7[39] = v8[39];
    *((_WORD *)v7 + 160) = *((_WORD *)v8 + 160);
    uint64_t v41 = *(int *)(v9 + 84);
    uint64_t v42 = (char *)v7 + v41;
    int v43 = (char *)v8 + v41;
    type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)();
    uint64_t v45 = v44;
    uint64_t v64 = *(void *)(v44 - 8);
    uint64_t v46 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48);
    id v47 = v39;
    swift_retain();
    swift_retain();
    if (v46(v43, 2, v45))
    {
      uint64_t v48 = type metadata accessor for TypesettingLanguage.Storage(0);
      memcpy(v42, v43, *(void *)(*(void *)(v48 - 8) + 64));
    }
    else
    {
      uint64_t v49 = type metadata accessor for Locale.Language();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v49 - 8) + 16))(v42, v43, v49);
      v42[*(int *)(v45 + 48)] = v43[*(int *)(v45 + 48)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v64 + 56))(v42, 0, 2, v45);
    }
    uint64_t v50 = *(int *)(type metadata accessor for TypesettingConfiguration() + 20);
    uint64_t v51 = &v42[v50];
    unsigned int v52 = &v43[v50];
    *(void *)uint64_t v51 = *(void *)v52;
    v51[8] = v52[8];
    *(uint64_t *)((char *)v7 + v67[22]) = *(void *)((char *)v8 + v67[22]);
    uint64_t v53 = v67[23];
    unsigned int v54 = (char *)v7 + v53;
    unint64_t v55 = (char *)v8 + v53;
    uint64_t v56 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
    uint64_t v57 = *(void *)(v56 - 8);
    int v58 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48);
    swift_bridgeObjectRetain();
    if (v58(v55, 1, v56))
    {
      _s7SwiftUI4TextV5StyleVSgMaTm_0(0, &lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, MEMORY[0x263F03950]);
      memcpy(v54, v55, *(void *)(*(void *)(v59 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v57 + 16))(v54, v55, v56);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v57 + 56))(v54, 0, 1, v56);
    }
    uint64_t v15 = a1;
    uint64_t v14 = a2;
    *(uint64_t *)((char *)v7 + v67[24]) = *(void *)((char *)v8 + v67[24]);
    uint64_t v60 = *(void (**)(uint64_t *, void, uint64_t, int *))(v65 + 56);
    swift_bridgeObjectRetain();
    v60(v7, 0, 1, v67);
    uint64_t v3 = v66;
  }
  uint64_t v61 = v3[8];
  *(_DWORD *)((char *)v15 + v3[7]) = *(_DWORD *)((char *)v14 + v3[7]);
  *((unsigned char *)v15 + v61) = *((unsigned char *)v14 + v61);
  uint64_t v62 = v3[10];
  *((unsigned char *)v15 + v3[9]) = *((unsigned char *)v14 + v3[9]);
  *((unsigned char *)v15 + v62) = *((unsigned char *)v14 + v62);
  return v15;
}

uint64_t destroy for ImageResolutionContext(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();

  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for Text.Style(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5);
  if (!result)
  {
    if (*(void *)v4 >= 2uLL) {
      swift_release();
    }
    swift_bridgeObjectRelease();
    outlined consume of Text.Style.TextStyleColor(*(void *)(v4 + 16));
    swift_release();
    if ((unint64_t)(*(void *)(v4 + 88) - 1) >= 2) {
      swift_release();
    }
    if ((unint64_t)(*(void *)(v4 + 104) - 1) >= 2) {
      swift_release();
    }
    if (*(void *)(v4 + 176) != 1) {
      swift_release();
    }
    if (*(void *)(v4 + 248) != 1) {
      swift_bridgeObjectRelease();
    }
    if (*(void *)(v4 + 288) >= 2uLL)
    {
      outlined consume of Text.Storage(*(void *)(v4 + 264), *(void *)(v4 + 272), *(unsigned char *)(v4 + 280));
      swift_bridgeObjectRelease();
    }

    swift_release();
    swift_release();
    uint64_t v7 = v4 + *(int *)(v5 + 84);
    type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 2, v8))
    {
      uint64_t v9 = type metadata accessor for Locale.Language();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v7, v9);
    }
    swift_bridgeObjectRelease();
    uint64_t v10 = v4 + *(int *)(v5 + 92);
    uint64_t v11 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
    uint64_t v12 = *(void *)(v11 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11)) {
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Text.Style(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_245FB130C);
}

uint64_t outlined init with copy of NamedImage.VectorInfo(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for NamedImage.VectorInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v5;
  id v6 = v3;
  swift_unknownObjectWeakCopyInit();
  return a1;
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  return specialized __RawDictionaryStorage.find<A>(_:)(a1, (void (*)(unsigned char *))NamedImage.VectorKey.hash(into:), (uint64_t (*)(uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
}

{
  return specialized __RawDictionaryStorage.find<A>(_:)(a1, MEMORY[0x263F8E7D0], (uint64_t (*)(uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
}

{
  return specialized __RawDictionaryStorage.find<A>(_:)(a1, (void (*)(unsigned char *))NamedImage.BitmapKey.hash(into:), (uint64_t (*)(uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
}

{
  return specialized __RawDictionaryStorage.find<A>(_:)(a1, MEMORY[0x263F8E7C8], (uint64_t (*)(uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
}

{
  return specialized __RawDictionaryStorage.find<A>(_:)(a1, MEMORY[0x263F8E7C8], (uint64_t (*)(uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
}

{
  Swift::Int v2;
  uint64_t vars8;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  uint64_t v2 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

uint64_t specialized ShapeStyle.isMultiLevel(in:)(uint64_t a1, uint64_t a2)
{
  memset(v5, 0, sizeof(v5));
  char v6 = 5;
  uint64_t v7 = 0;
  unsigned __int8 v8 = 5;
  uint64_t v9 = a1;
  uint64_t v10 = a2;
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t v13 = 0;
  char v14 = 1;
  __int16 v15 = 0;
  swift_retain();
  swift_retain();
  specialized ForegroundStyle._apply(to:)((uint64_t)v5);
  uint64_t v2 = v7;
  int v3 = v8;
  outlined copy of _ShapeStyle_Shape.Result(v7, v8);
  outlined consume of _ShapeStyle_Shape.Result(v2, v3);
  swift_release();
  swift_release();
  swift_release();
  if (v3 == 4)
  {
    if (v2) {
      return 1;
    }
  }
  else
  {
    outlined consume of _ShapeStyle_Shape.Result(v2, v3);
  }
  return 0;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<SymbolRenderingModeKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<SymbolRenderingModeKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolRenderingModeKey>, (uint64_t)&type metadata for SymbolRenderingModeKey, (uint64_t)&protocol witness table for SymbolRenderingModeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<SymbolRenderingModeKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<SymbolRenderingModeKey>>);
    }
  }
}

void NamedImage.VectorKey.loadVectorInfo(from:idiom:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long long v4 = v3;
  uint64_t v8 = type metadata accessor for NamedImage.VectorKey(0);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = &v25[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __int16 v11 = *v4;
  int v12 = v4[1];
  uint64_t v26 = a1;
  long long v27 = v4;
  uint64_t v28 = a2;
  if (v12) {
    __int16 v13 = 256;
  }
  else {
    __int16 v13 = 0;
  }
  char v14 = specialized CUICatalog.findAsset<A, B>(key:matchTypes:assetLookup:)(v13 | v11, 0, 1, (uint64_t (*)(unint64_t, unint64_t))partial apply for closure #1 in NamedImage.VectorKey.loadVectorInfo(from:idiom:));
  if (!v14)
  {
    *(void *)(a3 + 80) = 0;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
    return;
  }
  id v15 = v14;
  id v16 = objc_msgSend(v15, sel_layoutDirection);
  if (objc_msgSend(v15, sel_isFlippable))
  {
    outlined init with copy of NamedImage.Key((uint64_t)v4, (uint64_t)v10, type metadata accessor for NamedImage.VectorKey);
    if (v16)
    {
      int v17 = v10[32];
      outlined destroy of NamedImage.BitmapKey((uint64_t)v10, type metadata accessor for NamedImage.VectorKey);
      uint64_t v18 = 4;
      if (!v17) {
        uint64_t v18 = 5;
      }
      char v19 = v16 != (id)v18;
      goto LABEL_13;
    }
  }
  else
  {
    outlined init with copy of NamedImage.Key((uint64_t)v4, (uint64_t)v10, type metadata accessor for NamedImage.VectorKey);
  }
  outlined destroy of NamedImage.BitmapKey((uint64_t)v10, type metadata accessor for NamedImage.VectorKey);
  char v19 = 0;
LABEL_13:
  id v20 = v15;
  Image.LayoutMetrics.init(glyph:flipsRightToLeft:)(v20, v19, (uint64_t)v29);
  long long v21 = v29[0];
  long long v22 = v29[1];
  long long v23 = v29[2];
  long long v24 = v29[3];
  *(void *)a3 = v20;
  *(unsigned char *)(a3 + 8) = v19;
  *(_OWORD *)(a3 + 16) = v21;
  *(_OWORD *)(a3 + 32) = v22;
  *(_OWORD *)(a3 + 48) = v23;
  *(_OWORD *)(a3 + 64) = v24;
  swift_unknownObjectWeakInit();
}

void *specialized CUICatalog.findAsset<A, B>(key:matchTypes:assetLookup:)(__int16 a1, id a2, char a3, uint64_t (*a4)(unint64_t, unint64_t))
{
  char v4 = a1 & 1;
  BOOL v6 = (a3 & 1) == 0 && a2 == (id)8;
  if ((a1 & 0x100) != 0)
  {
    if (v6)
    {
      uint64_t v7 = (char *)&outlined read-only object #0 of specialized CUICatalog.findAsset<A, B>(key:matchTypes:assetLookup:);
      uint64_t v8 = qword_26FA81AE8;
      if (qword_26FA81AE8) {
        goto LABEL_17;
      }
LABEL_13:
      swift_bridgeObjectRelease();
      return 0;
    }
    type metadata accessor for Text.Style?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(ColorScheme?, ColorSchemeContrast)>, (uint64_t (*)(uint64_t))type metadata accessor for (ColorScheme?, ColorSchemeContrast), MEMORY[0x263F8E0F8]);
    uint64_t v7 = (char *)swift_allocObject();
    *((_OWORD *)v7 + 1) = xmmword_2461C6AA0;
    v7[32] = v4;
    v7[33] = 1;
    v7[34] = v4;
    *(_WORD *)(v7 + 35) = 512;
    v7[37] = 1;
    uint64_t v9 = v7 + 38;
    uint64_t v10 = v7 + 39;
LABEL_16:
    *uint64_t v9 = 2;
    *uint64_t v10 = 0;
    uint64_t v8 = *((void *)v7 + 2);
    if (v8) {
      goto LABEL_17;
    }
    goto LABEL_13;
  }
  if (!v6)
  {
    type metadata accessor for Text.Style?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(ColorScheme?, ColorSchemeContrast)>, (uint64_t (*)(uint64_t))type metadata accessor for (ColorScheme?, ColorSchemeContrast), MEMORY[0x263F8E0F8]);
    uint64_t v7 = (char *)swift_allocObject();
    *((_OWORD *)v7 + 1) = xmmword_2461BDD50;
    v7[32] = v4;
    v7[33] = 0;
    uint64_t v9 = v7 + 34;
    uint64_t v10 = v7 + 35;
    goto LABEL_16;
  }
  uint64_t v7 = (char *)&outlined read-only object #1 of specialized CUICatalog.findAsset<A, B>(key:matchTypes:assetLookup:);
  uint64_t v8 = qword_26FA81AC0;
  if (!qword_26FA81AC0) {
    goto LABEL_13;
  }
LABEL_17:
  int v12 = v7 + 32;
  int v11 = v7[32];
  unsigned __int8 v13 = v7[33];
  swift_bridgeObjectRetain();
  uint64_t v14 = v8 + 1;
  uint64_t v15 = 1;
LABEL_18:
  unint64_t v16 = 0xD00000000000001BLL;
  if (v13)
  {
    unint64_t v17 = 0x8000000246221260;
  }
  else
  {
    unint64_t v16 = 0x7261657070414955;
    unint64_t v17 = 0xEF796E4165636E61;
  }
  unint64_t v18 = 0xD00000000000001DLL;
  if (v13)
  {
    unint64_t v19 = 0x80000002462212C0;
  }
  else
  {
    unint64_t v18 = 0xD000000000000011;
    unint64_t v19 = 0x80000002462212E0;
  }
  unint64_t v20 = 0xD00000000000001CLL;
  if (v13)
  {
    unint64_t v21 = 0x8000000246221280;
  }
  else
  {
    unint64_t v20 = 0xD000000000000010;
    unint64_t v21 = 0x80000002462212A0;
  }
  if (v11)
  {
    unint64_t v18 = v20;
    unint64_t v19 = v21;
  }
  if (v11 == 2) {
    unint64_t v22 = v16;
  }
  else {
    unint64_t v22 = v18;
  }
  if (v11 == 2) {
    unint64_t v23 = v17;
  }
  else {
    unint64_t v23 = v19;
  }
  long long v24 = (void *)a4(v22, v23);
  id v25 = v24;
  if (!v24)
  {
LABEL_47:
    swift_bridgeObjectRelease();
    uint64_t v26 = v15;
    goto LABEL_48;
  }
  if ((a3 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    if (objc_msgSend(v25, sel_idiom) != a2)
    {
LABEL_46:

      id v25 = 0;
      uint64_t v26 = v15;
      goto LABEL_48;
    }
LABEL_38:
    uint64_t v26 = v15;
    goto LABEL_48;
  }
  if (!a2) {
    goto LABEL_47;
  }
  id v27 = objc_msgSend(v24, sel_appearance);
  if (!v27)
  {

    swift_bridgeObjectRelease();
    id v25 = 0;
    uint64_t v26 = v15;
    goto LABEL_48;
  }
  uint64_t v28 = v27;
  uint64_t v36 = v12;
  uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v31 = v30;

  if (v29 != v22 || v31 != v23)
  {
    char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    int v12 = v36;
    if ((v33 & 1) == 0) {
      goto LABEL_46;
    }
    goto LABEL_38;
  }
  swift_bridgeObjectRelease_n();
  int v12 = v36;
  uint64_t v26 = v15;
LABEL_48:
  while (v14 != ++v26)
  {
    if (!v25)
    {
      long long v34 = &v12[2 * v15];
      int v11 = *v34;
      unsigned __int8 v13 = v34[1];
      uint64_t v15 = v26;
      goto LABEL_18;
    }
  }
  swift_bridgeObjectRelease_n();
  if (!v25) {
    return 0;
  }
  return v25;
}

id partial apply for closure #1 in NamedImage.VectorKey.loadVectorInfo(from:idiom:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in NamedImage.VectorKey.loadVectorInfo(from:idiom:)(a1, a2, *(void **)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32));
}

id closure #1 in NamedImage.VectorKey.loadVectorInfo(from:idiom:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v31 = *(void *)(a4 + 16);
  uint64_t v32 = *(void *)(a4 + 8);
  uint64_t v10 = (void *)MEMORY[0x24C522820]();
  double v11 = *(double *)(a4 + 24);
  if (*(unsigned char *)(a4 + 32)) {
    uint64_t v12 = 4;
  }
  else {
    uint64_t v12 = 5;
  }
  unsigned __int8 v13 = (int *)type metadata accessor for NamedImage.VectorKey(0);
  uint64_t v30 = *(char *)(a4 + v13[10]);
  uint64_t v14 = qword_2461E5DD8[v30];
  double v15 = *(double *)(a4 + v13[9]);
  uint64_t v16 = Font.Weight.glyphWeight.getter(v15);
  double v17 = *(double *)(a4 + v13[11]);
  uint64_t v33 = a1;
  uint64_t v34 = a2;
  unint64_t v18 = (void *)MEMORY[0x24C522820](a1, a2);
  isdouble a = Locale._bridgeToObjectiveC()().super.isa;
  id v20 = objc_msgSend(a3, sel_namedVectorGlyphWithName_scaleFactor_deviceIdiom_layoutDirection_glyphSize_glyphWeight_glyphPointSize_appearanceName_locale_, v10, a5, v12, v14, v16, v18, v11, v17, isa);

  if (v20)
  {
    id v21 = v20;
    double v22 = NamedImage.VectorKey.symbolSizeScale(for:)(v21);

    if (v22 != 1.0)
    {
      unint64_t v23 = (void *)MEMORY[0x24C522820](v32, v31);
      double v24 = v22 * **((double **)&unk_2651D5B60 + v30);
      double v25 = Font.Weight.glyphContinuousWeight.getter(v15);
      uint64_t v26 = (void *)MEMORY[0x24C522820](v33, v34);
      Class v27 = Locale._bridgeToObjectiveC()().super.isa;
      id v28 = objc_msgSend(a3, sel_namedVectorGlyphWithName_scaleFactor_deviceIdiom_layoutDirection_glyphContinuousSize_glyphContinuousWeight_glyphPointSize_appearanceName_locale_, v23, a5, v12, v26, v27, v11, v24, v25, v17);

      if (v28)
      {

        return v28;
      }
    }
  }
  return v20;
}

uint64_t Font.Weight.glyphWeight.getter(double a1)
{
  if (vabdd_f64(-0.8, a1) < 0.001) {
    return 1;
  }
  if (vabdd_f64(-0.6, a1) < 0.001) {
    return 2;
  }
  if (vabdd_f64(-0.4, a1) < 0.001) {
    return 3;
  }
  if (vabdd_f64(0.0, a1) < 0.001) {
    return 4;
  }
  if (vabdd_f64(0.23, a1) < 0.001) {
    return 5;
  }
  if (vabdd_f64(0.3, a1) < 0.001) {
    return 6;
  }
  if (vabdd_f64(0.4, a1) < 0.001) {
    return 7;
  }
  if (vabdd_f64(0.56, a1) < 0.001) {
    return 8;
  }
  if (vabdd_f64(0.62, a1) >= 0.001) {
    return 4;
  }
  return 9;
}

uint64_t specialized Dictionary.subscript.setter(void *a1, uint64_t a2)
{
  if (*a1)
  {
    outlined init with take of NamedImage.VectorInfo((uint64_t)a1, (uint64_t)v7);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v6 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v7, a2, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v6;
    swift_bridgeObjectRelease();
    return _s7SwiftUI11DisplayListV10ArchiveIDsVSgWOhTm_0(a2, type metadata accessor for NamedImage.VectorKey);
  }
  else
  {
    outlined destroy of NamedImage.Cache.WeakCatalog?((uint64_t)a1, &lazy cache variable for type metadata for NamedImage.VectorInfo?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, (uint64_t)v7);
    _s7SwiftUI11DisplayListV10ArchiveIDsVSgWOhTm_0(a2, type metadata accessor for NamedImage.VectorKey);
    return outlined destroy of NamedImage.Cache.WeakCatalog?((uint64_t)v7, &lazy cache variable for type metadata for NamedImage.VectorInfo?);
  }
}

void Image.LayoutMetrics.init(glyph:flipsRightToLeft:)(void *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  objc_msgSend(a1, sel_baselineOffset);
  double v7 = v6;
  objc_msgSend(a1, sel_capHeight);
  uint64_t v9 = v8;
  if (one-time initialization token for introduced != -1) {
    swift_once();
  }
  unsigned int v10 = static _SemanticFeature_v2_1.introduced;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC == 1)
  {
    if ((dyld_program_sdk_at_least() & 1) == 0) {
      goto LABEL_7;
    }
  }
  else if (static Semantics.forced < v10)
  {
LABEL_7:
    if (one-time initialization token for introduced != -1) {
      swift_once();
    }
    if (byte_26B0F44FC == 1)
    {
      if ((dyld_program_sdk_at_least() & 1) == 0)
      {
LABEL_11:
        double v11 = -v7;
        objc_msgSend(a1, sel_alignmentRect);
        double v13 = v12;

        double v14 = 0.0;
        uint64_t v15 = v9;
        goto LABEL_18;
      }
    }
    else if (static Semantics.forced < static _SemanticFeature_v2.introduced)
    {
      goto LABEL_11;
    }
    objc_msgSend(a1, sel_alignmentRect);
    double v13 = v25;
    uint64_t v15 = v26;

    double v11 = 0.0;
    double v14 = 0.0;
    goto LABEL_18;
  }
  objc_msgSend(a1, sel_alignmentRect);
  double v14 = v16;
  double v11 = v17;
  CGFloat v19 = v18;
  CGFloat v21 = v20;
  objc_msgSend(a1, sel_contentBounds);
  double v13 = v22;
  uint64_t v15 = v23;
  if (a2)
  {
    v27.origin.double x = v14;
    v27.origin.double y = v11;
    v27.size.double width = v19;
    v27.size.double height = v21;
    double MaxX = CGRectGetMaxX(v27);

    double v14 = v13 - MaxX;
  }
  else
  {
  }
LABEL_18:
  *(double *)a3 = v7;
  *(void *)(a3 + 8) = v9;
  *(double *)(a3 + 16) = v13;
  *(void *)(a3 + 24) = v15;
  *(double *)(a3 + 32) = v14;
  *(double *)(a3 + 40) = v11;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
}

uint64_t outlined destroy of DisplayList.ArchiveIDs?(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s7SwiftUI11DisplayListV10ArchiveIDsVSgWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s7SwiftUI11DisplayListV10ArchiveIDsVSgWOhTm_1(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  _s7SwiftUI11DisplayListV10ArchiveIDsVSgMaTm_1(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

double NamedImage.VectorKey.symbolSizeScale(for:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (int *)type metadata accessor for NamedImage.VectorKey(0);
  uint64_t v5 = v4[10];
  double v7 = Image.HashableScale.allowedScaleRange.getter();
  if (v7 < v6)
  {
    double v8 = v6;
    id v9 = objc_msgSend(a1, sel_monochromeLayers);
    if (!v9) {
      return 1.0;
    }
    unsigned int v10 = v9;
    type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for CUIVectorGlyphLayer);
    unint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    objc_msgSend(a1, sel_metricCenter);
    objc_msgSend(a1, sel_scale);
    if (v11 >> 62) {
      goto LABEL_66;
    }
    uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
    while (v12)
    {
      unint64_t v13 = 0;
      unint64_t v14 = v11 & 0xC000000000000001;
      unint64_t v49 = v11 + 32;
      uint64_t v50 = v11 & 0xFFFFFFFFFFFFFF8;
      uint64_t v51 = v12;
      while (1)
      {
        if (v14)
        {
          id v15 = (id)MEMORY[0x24C523D60](v13, v11);
        }
        else
        {
          if (v13 >= *(void *)(v50 + 16)) {
            goto LABEL_65;
          }
          id v15 = *(id *)(v49 + 8 * v13);
        }
        double v16 = v15;
        if (__OFADD__(v13++, 1)) {
          break;
        }
        objc_msgSend(v15, sel_opacity);
        if (v18 <= 0.0)
        {

          if (v13 == v12) {
            goto LABEL_67;
          }
        }
        else
        {
          unint64_t v19 = v11;
          id v20 = objc_msgSend(v16, sel_tags);
          if (v20)
          {
            CGFloat v21 = v20;
            double v22 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v23 = v22[2];
            if (v23)
            {
              BOOL v24 = v22[4] == 0x6873616C735FLL && v22[5] == 0xE600000000000000;
              if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                goto LABEL_50;
              }
              if (v23 != 1)
              {
                if (v22[6] == 0x6873616C735FLL && v22[7] == 0xE600000000000000
                  || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                {
                  goto LABEL_50;
                }
                if (v23 != 2)
                {
                  uint64_t v46 = v5;
                  id v47 = v4;
                  uint64_t v48 = v2;
                  uint64_t v33 = v22 + 9;
                  uint64_t v34 = 2;
                  while (1)
                  {
                    uint64_t v35 = v34 + 1;
                    if (__OFADD__(v34, 1))
                    {
                      __break(1u);
LABEL_76:
                      __break(1u);
                    }
                    BOOL v36 = *(v33 - 1) == 0x6873616C735FLL && *v33 == 0xE600000000000000;
                    if (v36 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                      break;
                    }
                    v33 += 2;
                    ++v34;
                    if (v35 == v23)
                    {
                      swift_bridgeObjectRelease();
                      uint64_t v4 = v47;
                      uint64_t v2 = v48;
                      uint64_t v5 = v46;
                      goto LABEL_22;
                    }
                  }
LABEL_63:

                  swift_bridgeObjectRelease();
                  uint64_t v4 = v47;
                  uint64_t v2 = v48;
                  uint64_t v5 = v46;
                  goto LABEL_51;
                }
              }
            }
            swift_bridgeObjectRelease();
          }
LABEL_22:
          id v25 = objc_msgSend(v16, sel_tags, v46, v47, v48);
          if (!v25) {
            goto LABEL_31;
          }
          uint64_t v26 = v25;
          CGRect v27 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v28 = v27[2];
          if (!v28) {
            goto LABEL_30;
          }
          BOOL v29 = v27[4] == 0x65676461625FLL && v27[5] == 0xE600000000000000;
          if (!v29 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            if (v28 == 1) {
              goto LABEL_30;
            }
            if ((v27[6] != 0x65676461625FLL || v27[7] != 0xE600000000000000)
              && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            {
              if (v28 == 2)
              {
LABEL_30:
                swift_bridgeObjectRelease();
              }
              else
              {
                uint64_t v46 = v5;
                id v47 = v4;
                uint64_t v48 = v2;
                char v37 = v27 + 9;
                uint64_t v38 = 2;
                do
                {
                  uint64_t v39 = v38 + 1;
                  if (__OFADD__(v38, 1)) {
                    goto LABEL_76;
                  }
                  BOOL v40 = *(v37 - 1) == 0x65676461625FLL && *v37 == 0xE600000000000000;
                  if (v40 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                    goto LABEL_63;
                  }
                  v37 += 2;
                  ++v38;
                }
                while (v39 != v28);
                swift_bridgeObjectRelease();
                uint64_t v4 = v47;
                uint64_t v2 = v48;
                uint64_t v5 = v46;
              }
LABEL_31:
              id v30 = v16;
              id v31 = objc_msgSend(v30, sel_shape);
              if (v31)
              {
                id v32 = v31;
                RBPathApplyLines();
              }
              else
              {
              }
              goto LABEL_51;
            }
          }
LABEL_50:

          swift_bridgeObjectRelease();
LABEL_51:
          unint64_t v11 = v19;
          uint64_t v12 = v51;
          if (v13 == v51) {
            goto LABEL_67;
          }
        }
      }
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      swift_bridgeObjectRetain();
      uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
LABEL_67:
    swift_bridgeObjectRelease();
    double v41 = Image.HashableScale.circleDotFillSize(pointSize:weight:)(*(double *)(v2 + v4[11]), *(double *)(v2 + v4[9]));
    double v42 = Image.HashableScale.maxRadius(diameter:)(v41);
    float v43 = sqrtf(0.0);
    if (v43 > 0.0)
    {
      double v44 = v42 / v43;
      if (v7 > v44) {
        double v44 = v7;
      }
      if (v8 >= v44) {
        return v44;
      }
      else {
        return v8;
      }
    }
    else
    {
      return 1.0;
    }
  }
  return v7;
}

double Image.HashableScale.allowedScaleRange.getter()
{
  unsigned int v1 = *v0;
  BOOL v2 = v1 >= 3;
  unsigned int v3 = v1 - 3;
  if (v2)
  {
    if (v3 >= 3) {
      return 0.75;
    }
    uint64_t v4 = self;
    id v5 = objc_msgSend(v4, sel_standardUserDefaults);
    double v6 = (void *)MEMORY[0x24C522820](0xD000000000000019, 0x8000000246221320);
    id v7 = objc_msgSend(v5, sel_valueForKey_, v6);

    if (v7)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v17 = 0u;
      long long v18 = 0u;
    }
    uint64_t v9 = MEMORY[0x263F8EE58];
    uint64_t v10 = MEMORY[0x263F8EE58] + 8;
    _sypSgWObTm_4((uint64_t)&v17, (uint64_t)v19, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8);
    if (v20)
    {
      if (swift_dynamicCast())
      {
        double v8 = v16;
        goto LABEL_12;
      }
    }
    else
    {
      _sypSgWOhTm_10((uint64_t)v19, (unint64_t *)&lazy cache variable for type metadata for Any?, v10);
    }
    double v8 = 0.0;
LABEL_12:
    id v11 = objc_msgSend(v4, sel_standardUserDefaults);
    uint64_t v12 = (void *)MEMORY[0x24C522820](0xD000000000000019, 0x8000000246221340);
    id v13 = objc_msgSend(v11, sel_valueForKey_, v12);

    if (v13)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v17 = 0u;
      long long v18 = 0u;
    }
    _sypSgWObTm_4((uint64_t)&v17, (uint64_t)v19, (unint64_t *)&lazy cache variable for type metadata for Any?, v9 + 8);
    if (v20)
    {
      if (swift_dynamicCast())
      {
        double v14 = v16;
LABEL_20:
        if (v8 <= v14) {
          return v8;
        }
        __break(1u);
        return 0.75;
      }
    }
    else
    {
      _sypSgWOhTm_10((uint64_t)v19, (unint64_t *)&lazy cache variable for type metadata for Any?, v9 + 8);
    }
    double v14 = 1.79769313e308;
    goto LABEL_20;
  }
  return 1.0;
}

void type metadata accessor for _DictionaryStorage<NamedImage.VectorKey, NamedImage.VectorInfo>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<NamedImage.VectorKey, NamedImage.VectorInfo>)
  {
    type metadata accessor for NamedImage.VectorKey(255);
    lazy protocol witness table accessor for type AGSubgraphRef and conformance AGSubgraphRef(&lazy protocol witness table cache variable for type NamedImage.VectorKey and conformance NamedImage.VectorKey, (void (*)(uint64_t))type metadata accessor for NamedImage.VectorKey);
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<NamedImage.VectorKey, NamedImage.VectorInfo>);
    }
  }
}

uint64_t ImageResolutionContext.willUpdateVectorGlyph(to:variableValue:)(id a1, double a2)
{
  unsigned int v3 = (void *)v2[2];
  if (!v3) {
    return 1;
  }
  uint64_t v6 = type metadata accessor for ImageResolutionContext();
  if ((*((unsigned char *)v2 + *(int *)(v6 + 40)) & 8) != 0
    || *(_DWORD *)((char *)v2 + *(int *)(v6 + 28)) == *MEMORY[0x263F288F8])
  {
    return 1;
  }
  id v8 = v3;
  id v9 = objc_msgSend(v8, sel_glyph);
  if (!v9 || (id v10 = v9, v9, v10 != a1))
  {
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    uint64_t v11 = swift_retain();
    char v12 = specialized closure #1 in PropertyList.subscript.getter(v11);
    swift_release();
    if (v12) {
      goto LABEL_8;
    }
    unint64_t v13 = 0x302000000;
    uint64_t v14 = *v2;
    if (v2[1])
    {
      swift_retain_n();
      swift_retain_n();
      specialized PropertyList.Tracker.value<A>(_:for:)(v14, (uint64_t)&v110);
      swift_release_n();
      swift_release_n();
      unint64_t v15 = v110;
      unint64_t v13 = DWORD2(v110) | ((unint64_t)BYTE12(v110) << 32);
      int v16 = BYTE13(v110);
      char v17 = BYTE14(v110);
      uint64_t v18 = v111;
      if (BYTE13(v110)) {
        goto LABEL_11;
      }
    }
    else
    {
      uint64_t v22 = swift_retain_n();
      uint64_t v23 = specialized find<A>(_:key:)(v22);
      if (v23)
      {
        unint64_t v15 = *(void *)(v23 + 72);
        unint64_t v13 = *(unsigned int *)(v23 + 80) | ((unint64_t)*(unsigned __int8 *)(v23 + 84) << 32);
        char v17 = *(unsigned char *)(v23 + 86);
        uint64_t v18 = *(void *)(v23 + 88);
        int v16 = *(unsigned __int8 *)(v23 + 85);
        outlined copy of ContentTransition.Storage(v15, v13, v16);
        swift_retain();
      }
      else
      {
        int v16 = 0;
        char v17 = 0;
        uint64_t v18 = 0;
        unint64_t v15 = 0x8000000000;
      }
      swift_release_n();
      if (v16)
      {
LABEL_11:
        outlined copy of ContentTransition.Storage(v15, v13, v16);
        if (v16 == 2)
        {
          outlined copy of ContentTransition.Storage(v15, v13, 2);
          id v19 = objc_msgSend(v8, sel_glyph);
          if (v19)
          {
            uint64_t v20 = v19;
            if (objc_msgSend(v19, sel_canBeInterpolatedWith_, a1))
            {

              goto LABEL_27;
            }
            outlined consume of ContentTransition.Storage(v15, v13, 2);
            int v58 = (void *)*MEMORY[0x263F639B0];
            unint64_t v112 = MEMORY[0x263F8E8F8];
            LODWORD(v110) = v15;
            outlined init with take of Any(&v110, &v105);
            id v59 = v58;
            uint64_t v60 = MEMORY[0x263F8EE80];
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v105, v59, isUniquelyReferenced_nonNull_native);

            swift_bridgeObjectRelease();
            uint64_t v62 = (void *)*MEMORY[0x263F63980];
            unint64_t v112 = MEMORY[0x263F8D4F8];
            LOBYTE(v110) = BYTE4(v15) & 1;
            outlined init with take of Any(&v110, &v105);
            id v63 = v62;
            char v64 = swift_isUniquelyReferenced_nonNull_native();
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v105, v63, v64);

            swift_bridgeObjectRelease();
            uint64_t v65 = (void *)*MEMORY[0x263F639C0];
            unint64_t v112 = MEMORY[0x263F8D5C8];
            LODWORD(v110) = v13;
            outlined init with take of Any(&v110, &v105);
            id v66 = v65;
            char v67 = swift_isUniquelyReferenced_nonNull_native();
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v105, v66, v67);
            uint64_t v68 = v60;

            swift_bridgeObjectRelease();
            uint64_t v104 = v13;
            uint64_t v101 = v20;
            if (v18)
            {
              uint64_t v100 = v60;
              uint64_t v69 = v18;
            }
            else
            {
              uint64_t v87 = swift_retain();
              uint64_t v88 = specialized find<A>(_:key:)(v87);
              if (!v88)
              {
                swift_release();
                goto LABEL_46;
              }
              uint64_t v69 = *(void *)(v88 + 72);
              swift_retain();
              swift_release();
              if (!v69)
              {
LABEL_46:
                uint64_t v81 = swift_retain();
                uint64_t v82 = specialized find<A>(_:key:)(v81);
                if (v82)
                {
                  uint64_t v83 = *(void *)(v82 + 72);
                  swift_retain();
                }
                else
                {
                  uint64_t v83 = 0;
                }
                swift_release();
                uint64_t v89 = swift_retain();
                uint64_t v90 = specialized find<A>(_:key:)(v89);
                if (v90)
                {
                  uint64_t v91 = *(void *)(v90 + 72);
                  swift_retain();
                }
                else
                {
                  uint64_t v91 = 0;
                }
                swift_release();
                RBSymbolAnimator.addAnimation(_:options:animationListener:logicalListener:)(6, v68, v83, v91);
                swift_release();

                outlined consume of ContentTransition.Storage(v15, v104, 2);
                goto LABEL_40;
              }
              uint64_t v100 = v68;
            }
            uint64_t v70 = (void *)*MEMORY[0x263F639C8];
            id v71 = objc_allocWithZone(MEMORY[0x263F63858]);
            swift_retain();
            id v98 = v70;
            id v72 = objc_msgSend(v71, sel_init);
            (*(void (**)(long long *__return_ptr))(*(void *)v69 + 96))(&v110);
            long long v73 = v110;
            uint64_t v74 = v111;
            uint64_t v75 = v112;
            uint64_t v76 = v113;
            char v77 = v114;
            long long v105 = v110;
            uint64_t v106 = v111;
            unint64_t v107 = v112;
            uint64_t v108 = v113;
            char v109 = v114;
            Animation.Function.apply(to:)(v72, v78, v79);
            outlined consume of Animation.Function(v73, *((uint64_t *)&v73 + 1), v74, v75, v76, v77);
            unint64_t v112 = type metadata accessor for RBAnimation();
            *(void *)&long long v110 = v72;
            outlined init with take of Any(&v110, &v105);
            char v80 = swift_isUniquelyReferenced_nonNull_native();
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v105, v98, v80);
            uint64_t v68 = v100;
            swift_release();

            swift_bridgeObjectRelease();
            goto LABEL_46;
          }
        }
LABEL_27:
        uint64_t v30 = v13;
        uint64_t v31 = v15;
        if (v18) {
          goto LABEL_28;
        }
LABEL_73:
        uint64_t v94 = swift_retain();
        uint64_t v95 = specialized find<A>(_:key:)(v94);
        if (v95)
        {
          uint64_t v18 = *(void *)(v95 + 72);
          swift_retain();
          swift_release();
          if (v18)
          {
LABEL_28:
            uint64_t v97 = v30;
            char v96 = v17;
            int v99 = v16;
            unint64_t v102 = v15;
            uint64_t v103 = v13;
            id v32 = (void *)*MEMORY[0x263F639C8];
            id v33 = objc_allocWithZone(MEMORY[0x263F63858]);
            id v34 = v32;
            swift_retain();
            id v35 = objc_msgSend(v33, sel_init);
            (*(void (**)(long long *__return_ptr))(*(void *)v18 + 96))(&v110);
            long long v36 = v110;
            uint64_t v37 = v111;
            uint64_t v38 = v112;
            uint64_t v39 = v113;
            char v40 = v114;
            long long v105 = v110;
            uint64_t v106 = v111;
            unint64_t v107 = v112;
            uint64_t v108 = v113;
            char v109 = v114;
            Animation.Function.apply(to:)(v35, v41, v42);
            outlined consume of Animation.Function(v36, *((uint64_t *)&v36 + 1), v37, v38, v39, v40);
            unint64_t v112 = type metadata accessor for RBAnimation();
            *(void *)&long long v110 = v35;
            outlined init with take of Any(&v110, &v105);
            uint64_t v43 = MEMORY[0x263F8EE80];
            char v44 = swift_isUniquelyReferenced_nonNull_native();
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v105, v34, v44);
            uint64_t v45 = v43;

            swift_bridgeObjectRelease();
            if (v99)
            {
              if (v99 == 1) {
                swift_bridgeObjectRetain();
              }
              outlined consume of ContentTransition.Storage(v31, v97, v99);
              outlined consume of ContentTransition.Storage(0x8000000003, 0x302000000, 0);
              outlined consume of ContentTransition.Storage(v31, v97, v99);
              uint64_t v46 = v8;
              uint64_t v47 = v102;
            }
            else
            {
              *(void *)&long long v110 = v31;
              DWORD2(v110) = v97;
              BYTE12(v110) = BYTE4(v97);
              *(void *)&long long v105 = 0x8000000003;
              BYTE10(v105) = 0;
              WORD4(v105) = 0;
              *(_WORD *)((char *)&v105 + 11) = 770;
              char v57 = specialized static ContentTransition.NamedTransition.== infix(_:_:)((uint64_t *)&v110, (uint64_t *)&v105);
              outlined consume of ContentTransition.Storage(v31, v97, 0);
              outlined consume of ContentTransition.Storage(0x8000000003, 0x302000000, 0);
              outlined consume of ContentTransition.Storage(v31, v97, 0);
              uint64_t v46 = v8;
              uint64_t v47 = v102;
              if (!(v96 & 1 | ((v57 & 1) == 0))) {
                goto LABEL_33;
              }
            }
            uint64_t v48 = (void *)*MEMORY[0x263F63988];
            unint64_t v112 = MEMORY[0x263F8E8F8];
            LODWORD(v110) = 1;
            outlined init with take of Any(&v110, &v105);
            id v49 = v48;
            char v50 = swift_isUniquelyReferenced_nonNull_native();
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v105, v49, v50);

            swift_bridgeObjectRelease();
LABEL_33:
            uint64_t v51 = swift_retain();
            uint64_t v52 = specialized find<A>(_:key:)(v51);
            if (v52)
            {
              uint64_t v53 = *(void *)(v52 + 72);
              swift_retain();
            }
            else
            {
              uint64_t v53 = 0;
            }
            swift_release();
            uint64_t v54 = swift_retain();
            uint64_t v55 = specialized find<A>(_:key:)(v54);
            if (v55)
            {
              uint64_t v56 = *(void *)(v55 + 72);
              swift_retain();
            }
            else
            {
              uint64_t v56 = 0;
            }
            swift_release();
            RBSymbolAnimator.addAnimation(_:options:animationListener:logicalListener:)(7, v45, v53, v56);
            swift_release();

            swift_release();
            outlined consume of ContentTransition.Storage(v47, v103, v99);
LABEL_40:
            swift_release();
            swift_release();
            swift_release();
            return 0;
          }
        }
        else
        {
          swift_release();
        }
        outlined consume of ContentTransition.Storage(v31, v30, v16);
        swift_release();

        outlined consume of ContentTransition.Storage(v15, v13, v16);
        return 0;
      }
    }
    if (((v15 >> 38) & 3) >= 2)
    {
      switch(v15)
      {
        case 0x8000000001uLL:
        case 0x8000000002uLL:
        case 0x8000000003uLL:
        case 0x8000000004uLL:
          break;
        default:
          outlined copy of ContentTransition.Storage(v15, v13, 0);
          if (one-time initialization token for v4 != -1) {
            swift_once();
          }
          unsigned int v92 = static Semantics.v4;
          if (one-time initialization token for forced != -1) {
            swift_once();
          }
          swift_beginAccess();
          if (byte_26B0F44FC) {
            int v93 = dyld_program_sdk_at_least();
          }
          else {
            int v93 = static Semantics.forced >= v92;
          }
          if (v93) {
            uint64_t v31 = 0x8000000003;
          }
          else {
            uint64_t v31 = 0x8000000001;
          }
          outlined copy of ContentTransition.Storage(v31, 0x302000000, 0);
          char v17 = 0;
          uint64_t v30 = 0x302000000;
          if (!v18) {
            goto LABEL_73;
          }
          goto LABEL_28;
      }
    }
    outlined copy of ContentTransition.Storage(v15, v13, 0);
    goto LABEL_27;
  }
  objc_msgSend(v8, sel_variableValue);
  if (v21 == a2) {
    goto LABEL_16;
  }
  AGGraphClearUpdate();
  AGGraphGetValue();
  swift_retain();
  AGGraphSetUpdate();
  uint64_t v24 = swift_retain();
  char v25 = specialized closure #1 in PropertyList.subscript.getter(v24);
  swift_release();
  if ((v25 & 1) == 0)
  {
    unint64_t v26 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    uint64_t v27 = swift_retain();
    uint64_t v28 = specialized find<A>(_:key:)(v27);
    if (v28)
    {
      uint64_t v29 = *(void *)(v28 + 72);
      swift_retain();
    }
    else
    {
      uint64_t v29 = 0;
    }
    swift_release();
    uint64_t v84 = swift_retain();
    uint64_t v85 = specialized find<A>(_:key:)(v84);
    if (v85)
    {
      uint64_t v86 = *(void *)(v85 + 72);
      swift_retain();
    }
    else
    {
      uint64_t v86 = 0;
    }
    swift_release();
    RBSymbolAnimator.addAnimation(_:options:animationListener:logicalListener:)(0, v26, v29, v86);
    swift_release();

    swift_release();
    swift_release();
    return 0;
  }
LABEL_8:
  swift_release();
LABEL_16:

  return 0;
}

uint64_t destroy for NamedImage.BitmapKey(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a1 + 32);
  if ((unint64_t)v4 >= 2) {

  }
  uint64_t v5 = a1 + *(int *)(a2 + 36);
  uint64_t v6 = type metadata accessor for Locale();
  id v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);

  return v7(v5, v6);
}

void type metadata accessor for EnvironmentPropertyKey<SymbolRenderingModeKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolRenderingModeKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SymbolRenderingModeKey>);
    }
  }
}

uint64_t initializeWithCopy for NamedImage.BitmapKey(uint64_t a1, uint64_t a2, int *a3)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  id v7 = *(void **)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  if ((unint64_t)v7 >= 2) {
    id v8 = v7;
  }
  *(void *)(a1 + 32) = v7;
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v9 = a3[9];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  uint64_t v13 = a3[11];
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  *(void *)(a1 + v13) = *(void *)(a2 + v13);
  uint64_t v14 = a3[13];
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  *(unsigned char *)(a1 + v14) = *(unsigned char *)(a2 + v14);
  *(unsigned char *)(a1 + a3[14]) = *(unsigned char *)(a2 + a3[14]);
  return a1;
}

void default argument 2 of _VariadicView_Children.init(_:contentSubgraph:transform:)(void *a1@<X8>)
{
  *a1 = MEMORY[0x263F8EE78];
}

uint64_t specialized closure #1 in PropertyList.subscript.setter(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v10 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<HoverEffectContextKey>, (uint64_t)&type metadata for HoverEffectContextKey, (uint64_t)&protocol witness table for HoverEffectContextKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v12 = v11;
  BloomFilter.init(hashValue:)(v11);
  uint64_t v13 = specialized find1<A>(_:key:filter:)(v10, v17);
  if (!v13
    || (uint64_t result = specialized static EnvironmentPropertyKey.valuesEqual(_:_:)(a2, a3, a4, a5 & 0xFFFFFF, *(void *)(v13 + 72), *(void *)(v13 + 80), *(void *)(v13 + 88), *(unsigned __int16 *)(v13 + 96) | (*(unsigned __int8 *)(v13 + 98) << 16)), (result & 1) == 0))
  {
    uint64_t v15 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<HoverEffectContextKey>>();
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 72) = a2;
    *(void *)(v16 + 80) = a3;
    *(void *)(v16 + 88) = a4;
    *(unsigned char *)(v16 + 98) = BYTE2(a5);
    *(_WORD *)(v16 + 96) = a5;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v12, 0, v15);
    return swift_release();
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<HoverEffectContextKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<HoverEffectContextKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<HoverEffectContextKey>, (uint64_t)&type metadata for HoverEffectContextKey, (uint64_t)&protocol witness table for HoverEffectContextKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<HoverEffectContextKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<HoverEffectContextKey>>);
    }
  }
}

uint64_t specialized static EnvironmentPropertyKey.valuesEqual(_:_:)(uint64_t a1, char a2, uint64_t a3, int a4, uint64_t a5, char a6, uint64_t a7, int a8)
{
  uint64_t result = a8 == 2;
  if (a4 != 2)
  {
    if (a8 == 2) {
      return 0;
    }
    if (a2)
    {
      if (a2 == 1)
      {
        uint64_t result = 0;
        if (a6 != 1 || a1 != a5) {
          return result;
        }
        return ((a8 & 0x10000) == 0) ^ ((a4 & 0x10000u) >> 16);
      }
      uint64_t result = 0;
      if (a6 == 2 && !a5) {
        return ((a8 & 0x10000) == 0) ^ ((a4 & 0x10000u) >> 16);
      }
    }
    else
    {
      uint64_t result = 0;
      if (!a6 && a1 == a5) {
        return ((a8 & 0x10000) == 0) ^ ((a4 & 0x10000u) >> 16);
      }
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<HoverEffectContextKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<HoverEffectContextKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<HoverEffectContextKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<HoverEffectContextKey>, (uint64_t)&type metadata for HoverEffectContextKey, (uint64_t)&protocol witness table for HoverEffectContextKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<HoverEffectContextKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for HostPreferencesTransform<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

SwiftUI::LocalizedStringKey __swiftcall LocalizedStringKey.init(stringInterpolation:)(SwiftUI::LocalizedStringKey::StringInterpolation stringInterpolation)
{
  uint64_t v1 = *(void **)(stringInterpolation.key._countAndFlagsBits + 8);
  BOOL v2 = *(void **)(stringInterpolation.key._countAndFlagsBits + 16);
  uint64_t v3 = *(void *)stringInterpolation.key._countAndFlagsBits;
  Swift::Bool v4 = 1;
  result.arguments._rawuint64_t Value = v2;
  result.key._object = v1;
  result.key._countAndFlagsBits = v3;
  result.hasFormatting = v4;
  return result;
}

uint64_t partial apply for closure #1 in MakeModifiedRoot.visit<A>(type:)(uint64_t a1, uint64_t *a2)
{
  return closure #1 in MakeModifiedRoot.visit<A>(type:)(a1, a2, *(unsigned int *)(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 64), *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40));
}

uint64_t closure #1 in MakeModifiedRoot.visit<A>(type:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13 = *a2;
  int v14 = *((_DWORD *)a2 + 2);
  uint64_t v15 = a2[2];
  int v16 = *((_DWORD *)a2 + 20);
  _GraphValue.init(_:)(a3, &v27);
  uint64_t v19 = v13;
  int v20 = v14;
  uint64_t v21 = v15;
  long long v17 = *(_OWORD *)(a2 + 5);
  long long v22 = *(_OWORD *)(a2 + 3);
  long long v23 = v17;
  long long v24 = *(_OWORD *)(a2 + 7);
  uint64_t v25 = a2[9];
  int v26 = v16;
  return (*(uint64_t (**)(int *, uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(a9 + 16) + 32))(&v27, &v19, a4, a5, a7);
}

uint64_t base witness table accessor for _AttributeBody in LeafLayoutComputer<A>()
{
  return swift_getWitnessTable();
}

uint64_t StoredLocation.__deallocating_deinit()
{
  StoredLocation.deinit();

  return swift_deallocClassInstance();
}

uint64_t StoredLocation.deinit()
{
  uint64_t v0 = AnyLocation.deinit();
  swift_release();
  swift_weakDestroy();
  return v0;
}

uint64_t AnyLocation.deinit()
{
  return v0;
}

uint64_t PropertyList.Tracker.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  _s7SwiftUI12AtomicBuffer33_82B2D47816BC992595021D60C278AFF0LLCyAA11TrackerData33_D64CE6C88E7413721C59A34C0C940F2CLLVGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<TrackerData>, (uint64_t)&type metadata for TrackerData, (uint64_t (*)(void, uint64_t))type metadata accessor for AtomicBuffer);
  uint64_t v1 = swift_allocObject();
  *(_DWORD *)(v1 + 16) = 0;
  uint64_t v2 = MEMORY[0x263F8EE80];
  uint64_t v3 = MEMORY[0x263F8EE78];
  *(void *)(v1 + 24) = 0;
  *(void *)(v1 + 32) = v2;
  *(void *)(v1 + 40) = v2;
  *(void *)(v1 + 48) = v3;
  *(unsigned char *)(v1 + 56) = 0;
  *(void *)(v0 + 16) = v1;
  return v0;
}

void _ViewList_ID.hash(into:)(uint64_t a1)
{
  Swift::UInt32 v3 = *(_DWORD *)(v1 + 4);
  uint64_t v4 = *(void *)(v1 + 8);
  Hasher._combine(_:)(*(_DWORD *)v1);
  Hasher._combine(_:)(v3);
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = (Swift::UInt32 *)(v4 + 48);
    do
    {
      uint64_t v7 = *((void *)v6 - 2);
      Swift::UInt32 v8 = *v6;
      v6 += 6;
      uint64_t v9 = *(void (**)(uint64_t))(*(void *)v7 + 112);
      swift_retain();
      v9(a1);
      Hasher._combine(_:)(v8);
      swift_release();
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
  }
}

void closure #1 in closure #1 in CanvasSymbols.updateValue()(uint64_t a1, void *a2, void *a3, unint64_t a4, uint64_t a5, uint64_t *a6)
{
  void (*v27)(void *, uint64_t *, long long *, void, uint64_t (*)(void *, uint64_t *, void (*)(void *__return_ptr, uint64_t *)), void, uint64_t, uint64_t);
  char *v28;
  uint64_t isEscapingClosureAtFileLocation;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t);
  id v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  ValueMetadata **v41;
  unsigned int v42;
  uint64_t v43;
  id v44;
  char isUniquelyReferenced_nonNull_native;
  char v46;
  unint64_t v47;
  unint64_t v48;
  _OWORD *v49;
  long long v50;
  long long v51;
  long long v56;
  int v57;
  int v58;
  unsigned int v59;
  unsigned int v60;
  long long v61;
  unsigned int v62;
  void *v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  long long v68;
  long long v69;
  long long v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  void v76[6];

  v76[5] = *MEMORY[0x263EF8340];
  id v66 = *(void *)(a1 + 8);
  int v58 = *(_DWORD *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  id v59 = *(_DWORD *)(a1 + 44);
  uint64_t v65 = *(uint64_t **)(a1 + 48);
  char v64 = *(void *)(a1 + 56);
  char v57 = *(_DWORD *)(a1 + 40) | 0x10;
  id v63 = a2 + 4;
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 64);
  uint64_t v11 = *(void *)(a1 + 72);
  uint64_t v12 = *(void *)(a1 + 84);
  swift_beginAccess();
  int v13 = *(_DWORD *)(v8 + 16);
  uint64_t v14 = *(void *)(v8 + 24);
  uint64_t v61 = *(_OWORD *)(v8 + 32);
  uint64_t v56 = *(_OWORD *)(v8 + 48);
  uint64_t v15 = *(void *)(v8 + 64);
  uint64_t v16 = *(void *)(v8 + 72);
  char v17 = *(unsigned char *)(v8 + 80);
  char v18 = *(unsigned char *)(v8 + 81);
  uint64_t v19 = *(void *)(v8 + 88);
  _s14AttributeGraph0A0Vy7SwiftUI17EnvironmentValuesVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(void, uint64_t))type metadata accessor for MutableBox);
  uint64_t v20 = swift_allocObject();
  *(_DWORD *)(v20 + 16) = v13;
  *(void *)(v20 + 24) = v14;
  *(_OWORD *)(v20 + 32) = v61;
  *(_OWORD *)(v20 + 48) = v56;
  *(void *)(v20 + 64) = v15;
  *(void *)(v20 + 72) = v16;
  *(unsigned char *)(v20 + 80) = v17;
  *(unsigned char *)(v20 + 81) = v18;
  *(void *)(v20 + 88) = v19;
  swift_retain();
  uint64_t v21 = v65;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unsigned int v22 = *MEMORY[0x263F288F8];
  LODWORD(v68) = *(_DWORD *)(a1 + 80);
  DWORD1(v68) = v22;
  uint64_t v62 = v22;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type CanvasSymbols.SymbolSize and conformance CanvasSymbols.SymbolSize();
  unsigned int v23 = Attribute.init<A>(body:value:flags:update:)();
  uint64_t v24 = a2[7];
  uint64_t v25 = a2[8];
  unsigned int v26 = v23;
  __swift_project_boxed_opaque_existential_1(v63, v24);
  char v67 = 0;
  *(void *)&uint64_t v68 = v66;
  DWORD2(v68) = v58;
  *(void *)&uint64_t v69 = v20;
  *((void *)&v69 + 1) = v9;
  *(void *)&uint64_t v70 = __PAIR64__(v59, v57);
  *((void *)&v70 + 1) = v65;
  id v71 = v64;
  id v72 = v10;
  long long v73 = v11;
  uint64_t v60 = v26;
  uint64_t v74 = v26;
  uint64_t v75 = v12;
  int v27 = *(void (**)(void *, uint64_t *, long long *, void, uint64_t (*)(void *, uint64_t *, void (*)(void *__return_ptr, uint64_t *)), void, uint64_t, uint64_t))(v25 + 16);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v27(v76, &v67, &v68, 0, specialized closure #1 in closure #1 in _ViewList_Elements.makeOneElement(at:inputs:indirectMap:body:), 0, v24, v25);
  uint64_t v28 = (char *)v76[0];
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v30 = swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
LABEL_17:
    char isEscapingClosureAtFileLocation = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(isEscapingClosureAtFileLocation + 16) + 1, 1, (void *)isEscapingClosureAtFileLocation);
    *uint64_t v21 = isEscapingClosureAtFileLocation;
    goto LABEL_13;
  }
  if (v28) {
    uint64_t v31 = v28;
  }
  else {
    uint64_t v31 = (char *)MEMORY[0x263F8EE78];
  }
  MEMORY[0x270FA5388](v30);
  MEMORY[0x270FA5388](v32);
  AGGraphMutateAttribute();
  id v34 = a2[7];
  id v33 = a2[8];
  __swift_project_boxed_opaque_existential_1(v63, v34);
  id v35 = *(uint64_t (**)(uint64_t, uint64_t))(v33 + 32);
  long long v36 = a3;
  uint64_t v37 = v35(v34, v33);
  uint64_t v38 = *(_DWORD *)(a1 + 112);
  uint64_t v39 = a2[9];
  char v40 = *((void *)v31 + 2);
  if (v40)
  {
    uint64_t v41 = (ValueMetadata **)(v31 + 48);
    uint64_t v21 = a6;
    uint64_t v42 = v62;
    while (*(v41 - 2) != &type metadata for DisplayList.Key)
    {
      v41 += 3;
      if (!--v40) {
        goto LABEL_12;
      }
    }
    uint64_t v42 = *(_DWORD *)v41;
  }
  else
  {
    uint64_t v21 = a6;
    uint64_t v42 = v62;
  }
LABEL_12:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  LOBYTE(v68) = 1;
  type metadata accessor for DisplayList.GraphicsRenderer();
  swift_allocObject();
  uint64_t v43 = DisplayList.GraphicsRenderer.init(platformViewMode:)((char *)&v68);
  *(void *)&uint64_t v68 = v36;
  *((void *)&v68 + 1) = v37;
  LODWORD(v69) = v38;
  *((void *)&v69 + 1) = v39;
  *(void *)&uint64_t v70 = __PAIR64__(v42, v60);
  *((void *)&v70 + 1) = v43;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  char v44 = v36;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v76[0] = *(void *)(a1 + 104);
  *(void *)(a1 + 104) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v68, a4, a5, isUniquelyReferenced_nonNull_native);
  *(void *)(a1 + 104) = v76[0];
  swift_release();
  swift_bridgeObjectRelease();
  char isEscapingClosureAtFileLocation = *v21;
  uint64_t v28 = (char *)v44;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v46 = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v21 = isEscapingClosureAtFileLocation;
  if ((v46 & 1) == 0) {
    goto LABEL_17;
  }
LABEL_13:
  uint64_t v48 = *(void *)(isEscapingClosureAtFileLocation + 16);
  uint64_t v47 = *(void *)(isEscapingClosureAtFileLocation + 24);
  if (v48 >= v47 >> 1)
  {
    char isEscapingClosureAtFileLocation = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v47 > 1), v48 + 1, 1, (void *)isEscapingClosureAtFileLocation);
    *uint64_t v21 = isEscapingClosureAtFileLocation;
  }
  *(void *)(isEscapingClosureAtFileLocation + 16) = v48 + 1;
  id v49 = (_OWORD *)(isEscapingClosureAtFileLocation + 48 * v48);
  char v50 = v68;
  uint64_t v51 = v70;
  v49[3] = v69;
  v49[4] = v51;
  v49[2] = v50;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      char v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  char v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = v18[7] + 48 * v12;
    return outlined assign with take of CanvasSymbols.Child((uint64_t)a1, v19);
  }
LABEL_13:
  specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);

  return swift_retain();
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unint64_t a1, uint64_t a2)
{
  unint64_t v4 = HIDWORD(a1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(v4);
  if (a2)
  {
    Hasher._combine(_:)(1u);
    uint64_t v5 = *(void (**)(unsigned char *))(*(void *)a2 + 112);
    swift_retain();
    v5(v8);
    swift_release();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Swift::Int v6 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v6);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v7 = v3;
    int v9 = a1;
    unint64_t v10 = HIDWORD(a1);
    uint64_t v11 = ~v5;
    while (1)
    {
      uint64_t v12 = *(void *)(v7 + 48) + 16 * v6;
      if (*(_DWORD *)v12 != v9 || *(_DWORD *)(v12 + 4) != v10) {
        goto LABEL_5;
      }
      uint64_t v14 = *(void *)(v12 + 8);
      if (!v14) {
        break;
      }
      if (!a2)
      {
        swift_retain_n();
LABEL_4:
        swift_release_n();
        goto LABEL_5;
      }
      if (v14 == a2) {
        return v6;
      }
      uint64_t v15 = *(uint64_t (**)(uint64_t))(*(void *)v14 + 104);
      swift_retain_n();
      uint64_t v16 = swift_retain();
      LOBYTE(v15) = v15(v16);
      swift_release_n();
      swift_release();
      if (v15) {
        return v6;
      }
LABEL_5:
      unint64_t v6 = (v6 + 1) & v11;
      if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
        return v6;
      }
    }
    if (!a2) {
      return v6;
    }
    goto LABEL_4;
  }
  return v6;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  uint64_t v5 = (void *)(a5[6] + 16 * result);
  *uint64_t v5 = a2;
  v5[1] = a3;
  unint64_t v6 = (_OWORD *)(a5[7] + 48 * result);
  long long v7 = a4[1];
  *unint64_t v6 = *a4;
  v6[1] = v7;
  v6[2] = a4[2];
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CanvasSymbols.SymbolSize and conformance CanvasSymbols.SymbolSize()
{
  unint64_t result = lazy protocol witness table cache variable for type CanvasSymbols.SymbolSize and conformance CanvasSymbols.SymbolSize;
  if (!lazy protocol witness table cache variable for type CanvasSymbols.SymbolSize and conformance CanvasSymbols.SymbolSize)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CanvasSymbols.SymbolSize and conformance CanvasSymbols.SymbolSize);
  }
  return result;
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance <> Pair<A, B>()
{
  return Hasher._finalize()();
}

uint64_t Pair<>.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance _ViewList_ID.Canonical()
{
  Hasher.init(_seed:)();
  Swift::UInt32 v1 = *(_DWORD *)(v0 + 4);
  uint64_t v2 = *(void *)(v0 + 8);
  Hasher._combine(_:)(*(_DWORD *)v0);
  Hasher._combine(_:)(v1);
  if (v2)
  {
    Hasher._combine(_:)(1u);
    uint64_t v3 = *(void (**)(unsigned char *))(*(void *)v2 + 112);
    swift_retain();
    v3(v5);
    swift_release();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

void _ViewList_ID.Canonical.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::UInt32 v4 = *(_DWORD *)(v2 + 4);
  uint64_t v5 = *(void *)(v2 + 8);
  Hasher._combine(_:)(*(_DWORD *)v2);
  Hasher._combine(_:)(v4);
  if (v5)
  {
    Hasher._combine(_:)(1u);
    unint64_t v6 = *(void (**)(uint64_t))(*(void *)v5 + 112);
    swift_retain();
    v6(a1);
    swift_release();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

uint64_t _AnyHashableBox.hash(into:)()
{
  Hasher._combine(_:)(*(void *)(*(void *)v0 + 128));
  return dispatch thunk of Hashable.hash(into:)();
}

void protocol witness for Hashable.hash(into:) in conformance CUIColorName()
{
  Hasher._combine(_:)(*v0);
}

BOOL static ContentMode.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

uint64_t static ViewRendererHostProperties.all.getter@<X0>(_WORD *a1@<X8>)
{
  if (one-time initialization token for all != -1) {
    uint64_t result = swift_once();
  }
  *a1 = static ViewRendererHostProperties.all;
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _CompositingGroupEffect(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ColorMonochromeEffect._Resolved(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static RendererEffect.makeRendererEffect(effect:inputs:body:));
}

uint64_t View.overlay<A>(_:alignment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v22 = a6;
  uint64_t v21 = a4;
  uint64_t v10 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for _OverlayModifier();
  uint64_t v14 = *(void *)(v13 - 8);
  double v15 = MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v20 - v16;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v12, a1, a5, v15);
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v17, v12, a5);
  char v18 = &v17[*(int *)(v13 + 36)];
  *(void *)char v18 = a2;
  *((void *)v18 + 1) = a3;
  View.modifier<A>(_:)(v17, v21, v13);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, v13);
}

uint64_t initializeWithCopy for StrokeBorderShapeView(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void *)(a3[2] - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v7 = *(void *)(v5 + 48);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = v9 + 16;
  uint64_t v30 = a3[3];
  uint64_t v11 = *(void *)(v30 - 8);
  uint64_t v12 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v32 = a3[4];
  uint64_t v13 = *(void *)(v32 - 8);
  unsigned __int8 v14 = *(_DWORD *)(v13 + 80);
  uint64_t v15 = v14 & 0xF8 | 7;
  uint64_t v16 = (v14 | *(_DWORD *)(v9 + 80)) & 0xF8 | v12 | 7;
  uint64_t v17 = v7 + v16;
  uint64_t v18 = (v7 + v16 + a1) & ~v16;
  uint64_t v19 = (v17 + a2) & ~v16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v18, v19, AssociatedTypeWitness);
  uint64_t v20 = *(void *)(v10 + 48) + 7;
  unint64_t v21 = (v20 + v18) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = (v20 + v19) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v21 = *(void *)v22;
  *(_DWORD *)(v21 + 8) = *(_DWORD *)(v22 + 8);
  *(_DWORD *)(v21 + 12) = *(_DWORD *)(v22 + 12);
  *(void *)(v21 + 16) = *(void *)(v22 + 16);
  *(void *)(v21 + 24) = *(void *)(v22 + 24);
  *(void *)(v21 + 32) = *(void *)(v22 + 32);
  unint64_t v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + v12 + 40;
  uint64_t v24 = *(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 16);
  swift_bridgeObjectRetain();
  v24((v23 + v18) & ~v12, (v23 + v19) & ~v12, v30);
  uint64_t v25 = *(void *)(v11 + 64);
  *(_WORD *)(v25 + ((v23 + v18) & ~v12)) = *(_WORD *)(v25 + ((v23 + v19) & ~v12));
  uint64_t v26 = (v23 & ~v12) + v25 + v15 + 2;
  uint64_t v27 = (v26 + v18) & ~v15;
  uint64_t v28 = (v26 + v19) & ~v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v27, v28, v32);
  *(_OWORD *)((*(void *)(v13 + 64) + 7 + v27) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(void *)(v13 + 64)
                                                                                       + 7
                                                                                       + v28) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t destroy for StrokeBorderShapeView(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a2[2] - 8) + 8;
  (*(void (**)(uint64_t, void))v4)(a1, a2[2]);
  uint64_t v5 = *(void *)(v4 + 56) + a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = v7 + 8;
  uint64_t v10 = a2[3];
  uint64_t v9 = a2[4];
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v22 = *(void *)(v9 - 8);
  unsigned __int8 v13 = *(_DWORD *)(v22 + 80);
  uint64_t v14 = v13 & 0xF8 | 7;
  uint64_t v15 = (v13 | *(_DWORD *)(v7 + 80)) & 0xF8 | v12 | 7;
  uint64_t v16 = (v5 + v15) & ~v15;
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v16, AssociatedTypeWitness);
  uint64_t v17 = *(void *)(v8 + 56) + 7;
  swift_bridgeObjectRelease();
  unint64_t v18 = (v17 & 0xFFFFFFFFFFFFFFF8) + v12 + 40;
  (*(void (**)(unint64_t, uint64_t))(v11 + 8))((v18 + v16) & ~v12, v10);
  uint64_t v19 = (v14 + (v18 & ~v12) + *(void *)(v11 + 64) + v16 + 2) & ~v14;
  uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t))(v22 + 8);

  return v20(v19, v9);
}

uint64_t View.overlay<A>(alignment:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(double)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v23 = a6;
  uint64_t v21 = a7;
  uint64_t v22 = a4;
  uint64_t v11 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](a1);
  unsigned __int8 v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for _OverlayModifier();
  uint64_t v15 = *(void *)(v14 - 8);
  double v16 = MEMORY[0x270FA5388](v14);
  unint64_t v18 = (char *)&v21 - v17;
  a3(v16);
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v18, v13, a5);
  uint64_t v19 = &v18[*(int *)(v14 + 36)];
  *(void *)uint64_t v19 = a1;
  *((void *)v19 + 1) = a2;
  View.modifier<A>(_:)(v18, v22, v14);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
}

uint64_t static _OverlayModifier._makeView(modifier:inputs:body:)@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(unint64_t *__return_ptr, uint64_t, unint64_t *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v9 = *a2;
  int v10 = *((_DWORD *)a2 + 2);
  uint64_t v11 = a2[2];
  int v12 = *((_DWORD *)a2 + 20);
  LODWORD(v22) = *a1;
  type metadata accessor for _OverlayModifier();
  type metadata accessor for _GraphValue();
  uint64_t v13 = a2[3];
  uint64_t v14 = a2[4];
  long long v18 = *(_OWORD *)(a2 + 7);
  long long v19 = *(_OWORD *)(a2 + 5);
  uint64_t v15 = a2[9];
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static _OverlayModifier._makeView(modifier:inputs:body:), a4, v32);
  unsigned int v16 = v32[0];
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #2 in static _OverlayModifier._makeView(modifier:inputs:body:), (uint64_t)&type metadata for Alignment, &v31);
  uint64_t v22 = v9;
  int v23 = v10;
  uint64_t v24 = v11;
  uint64_t v25 = v13;
  uint64_t v26 = v14;
  long long v27 = v19;
  long long v28 = v18;
  uint64_t v29 = v15;
  int v30 = v12;
  return makeSecondaryLayerView<A>(secondaryLayer:alignment:inputs:body:flipOrder:)(v16, v31, (uint64_t)&v22, a3, 0, a5, a6);
}

uint64_t closure #2 in static _OverlayModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for _OverlayModifier();
  uint64_t v3 = a1 + *(int *)(v2 + 36);
  v7[2] = v2;
  uint64_t v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v3, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_1, (uint64_t)v7, (uint64_t)&type metadata for Alignment, MEMORY[0x263F8E628], v4, MEMORY[0x263F8E658], v5);
  return v7[5];
}

uint64_t type metadata accessor for _OverlayModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ClipEffect<A>@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return static RendererEffect._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, WitnessTable, a6);
}

uint64_t instantiation function for generic protocol witness table for UnaryLayoutComputer<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for UnaryChildGeometry<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for Sequence in ForEachSubviewCollection<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for BidirectionalCollection in ForEachSubviewCollection<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Collection in ForEachSubviewCollection<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Sequence in ForEachSectionCollection<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for BidirectionalCollection in ForEachSectionCollection<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Collection in ForEachSectionCollection<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in ForEachState<A, B, C>.Evictor()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in ForEachState<A, B, C>.Info.Init()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in ForEachList<A, B, C>.Init()
{
  return swift_getWitnessTable();
}

uint64_t partial apply for closure #1 in Rule<>.cachedValue(options:owner:)@<X0>(uint64_t a1@<X8>)
{
  return partial apply for closure #1 in Rule<>.cachedValue(options:owner:)(a1);
}

{
  return closure #1 in Rule<>.cachedValue(options:owner:)(a1);
}

uint64_t closure #1 in Rule<>.cachedValue(options:owner:)@<X0>(uint64_t a1@<X8>)
{
  dispatch thunk of Hashable.hashValue.getter();
  uint64_t v2 = static Rule<>._cachedValue(options:owner:hashValue:bodyPtr:update:)();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(a1, v2, AssociatedTypeWitness);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance EnvironmentFetch<A>()
{
  return EnvironmentFetch.hashValue.getter(*v0);
}

Swift::Int EnvironmentFetch.hashValue.getter(Swift::UInt32 a1)
{
  Hasher.init(_seed:)();
  EnvironmentFetch.hash(into:)((int)&v3, a1);
  return Hasher._finalize()();
}

uint64_t EnvironmentFetch.hash(into:)(int a1, Swift::UInt32 a2)
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t SecondaryLayerGeometryQuery.value.getter@<X0>(uint64_t a1@<X8>)
{
  int v3 = *v1;
  int v4 = v1[5];
  int v5 = *MEMORY[0x263F288F8];
  if (v1[4] == *MEMORY[0x263F288F8])
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    uint64_t Value = (uint64_t *)&static LayoutComputer.defaultValue;
  }
  else
  {
    uint64_t Value = (uint64_t *)AGGraphGetValue();
  }
  uint64_t v7 = *Value;
  uint64_t v8 = (void *)Value[1];
  uint64_t v9 = (double *)AGGraphGetValue();
  double v10 = *v9;
  uint64_t v11 = *((void *)v9 + 1);
  uint64_t v12 = *((void *)v9 + 2);
  double v13 = v9[3];
  if (v3 == v5)
  {
    uint64_t v14 = one-time initialization token for center;
    swift_retain();
    if (v14 != -1) {
      swift_once();
    }
    unint64_t v15 = *((void *)&static Alignment.center + 1);
    unint64_t v16 = static Alignment.center;
  }
  else
  {
    uint64_t v17 = (unint64_t *)AGGraphGetValue();
    unint64_t v16 = *v17;
    unint64_t v15 = v17[1];
    swift_retain();
  }
  long long v18 = (double *)AGGraphGetValue();
  double v19 = *v18;
  double v52 = v18[1];
  swift_retain();
  ViewDimensions.subscript.getter(v16);
  double v21 = v20;
  uint64_t v53 = v7;
  uint64_t v54 = v8;
  double v55 = v10;
  uint64_t v56 = v11;
  uint64_t v57 = v12;
  double v58 = v13;
  ViewDimensions.subscript.getter(v15);
  double v51 = v22;
  swift_release();
  if (v4 == v5)
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    int v23 = (uint64_t *)&static LayoutComputer.defaultValue;
  }
  else
  {
    int v23 = (uint64_t *)AGGraphGetValue();
  }
  uint64_t v25 = *v23;
  uint64_t v24 = (void *)v23[1];
  uint64_t v26 = (double *)AGGraphGetValue();
  uint64_t v27 = *(void *)v26;
  double v28 = v26[1];
  uint64_t v29 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain_n();
  if (v29 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_22;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (!_MovableLockIsOwner(static Update._lock))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_22:
    double v48 = v13;
    uint64_t v49 = v12;
    uint64_t v50 = v11;
    double v30 = v10;
    double v31 = v19 + v21;
    uint64_t v53 = v27;
    LOBYTE(v54) = 0;
    double v55 = v28;
    LOBYTE(v56) = 0;
    double v32 = (*(double (**)(uint64_t *))(*(void *)v25 + 120))(&v53);
    uint64_t v34 = v33;
    uint64_t v53 = v25;
    uint64_t v54 = v24;
    double v55 = v32;
    uint64_t v56 = v33;
    uint64_t v57 = v27;
    double v58 = v28;
    swift_retain();
    ViewDimensions.subscript.getter(v16);
    double v36 = v35;
    uint64_t v53 = v25;
    uint64_t v54 = v24;
    double v55 = v32;
    uint64_t v56 = v34;
    uint64_t v57 = v27;
    double v58 = v28;
    ViewDimensions.subscript.getter(v15);
    double v38 = v37;
    swift_release();
    double v39 = v31 - v36;
    if (*(unsigned char *)AGGraphGetValue() == 1)
    {
      double v40 = *(double *)AGGraphGetValue();
      uint64_t v41 = one-time initialization token for center;
      swift_retain();
      if (v41 != -1) {
        swift_once();
      }
      unint64_t v42 = static HorizontalAlignment.center;
      uint64_t v53 = v7;
      uint64_t v54 = v8;
      double v55 = v30;
      uint64_t v56 = v50;
      uint64_t v57 = v49;
      double v58 = v48;
      ViewDimensions.subscript.getter(static HorizontalAlignment.center);
      double v44 = v40 + v43;
      uint64_t v53 = v25;
      uint64_t v54 = v24;
      double v55 = v32;
      uint64_t v56 = v34;
      uint64_t v57 = v27;
      double v58 = v28;
      ViewDimensions.subscript.getter(v42);
      double v46 = v45;
      swift_release_n();
      uint64_t result = swift_release();
      double v39 = v44 - v46 + v44 - v46 - v39;
    }
    else
    {
      swift_release();
      uint64_t result = swift_release();
    }
    *(double *)a1 = v39;
    *(double *)(a1 + 8) = v52 + v51 - v38;
    *(void *)(a1 + 16) = v25;
    *(void *)(a1 + 24) = v24;
    *(double *)(a1 + 32) = v32;
    *(void *)(a1 + 40) = v34;
    *(void *)(a1 + 48) = v27;
    *(double *)(a1 + 56) = v28;
  }
  return result;
}

CGSize __swiftcall ViewRendererHost.idealSize()()
{
  uint64_t v5 = 0;
  char v6 = 1;
  uint64_t v7 = 0;
  char v8 = 1;
  double v2 = ViewRendererHost.sizeThatFits(_:)((uint64_t)&v5, v0, v1);
  result.double height = v3;
  result.double width = v2;
  return result;
}

double ViewRendererHost.sizeThatFits(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v8)(double *__return_ptr, uint64_t (*)@<X0>(void *@<X8>), void *, uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  void v11[3];
  char v12;
  uint64_t v13;
  char v14;
  double v15;

  char v4 = *(unsigned char *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  char v6 = *(unsigned char *)(a1 + 24);
  v11[2] = *(void *)a1;
  uint64_t v12 = v4;
  double v13 = v5;
  uint64_t v14 = v6;
  uint64_t v7 = *(void *)(a3 + 8);
  char v8 = *(void (**)(double *__return_ptr, uint64_t (*)@<X0>(void *@<X8>), void *, uint64_t, uint64_t, uint64_t))(v7 + 24);
  type metadata accessor for CGSize(0);
  v8(&v15, partial apply for closure #1 in ViewRendererHost.sizeThatFits(_:), v11, v9, a2, v7);
  return v15;
}

Swift::Int _ViewList_View.reuseIdentifier.getter()
{
  uint64_t v1 = *(void *)(v0 + 64);
  if (v1 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (v1 <= 0x7FFFFFFF)
  {
    return _ViewList_ID.reuseIdentifier.getter();
  }
  __break(1u);
  return result;
}

Swift::Int _ViewList_ID.reuseIdentifier.getter()
{
  Swift::UInt32 v1 = *(_DWORD *)v0;
  Swift::UInt32 v2 = *(_DWORD *)(v0 + 4);
  uint64_t v3 = *(void *)(v0 + 8);
  Hasher.init()();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    uint64_t v5 = (Swift::UInt *)(v3 + 40);
    do
    {
      Swift::UInt v6 = *v5;
      v5 += 3;
      Hasher._combine(_:)(v6);
      --v4;
    }
    while (v4);
  }
  return Hasher.finalize()();
}

uint64_t type metadata accessor for AnyShapeStyleBox()
{
  return self;
}

uint64_t base witness table accessor for _AttributeBody in ForEachChild<A, B, C>()
{
  return swift_getWitnessTable();
}

uint64_t static Font.footnote.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for footnote);
}

BOOL static Alignment.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1 == a3 && a2 == a4;
}

uint64_t _ViewInputs.requestedSpacerRepresentation.setter(uint64_t a1, uint64_t a2)
{
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, a1, a2);
  return swift_release();
}

uint64_t specialized static PrimitiveSpacer._makeView(view:inputs:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v33[1] = *MEMORY[0x263EF8340];
  uint64_t v22 = MEMORY[0x263F8EE78];
  int v5 = *MEMORY[0x263F288F8];
  int v23 = 0;
  int v24 = v5;
  long long v6 = *(_OWORD *)(a2 + 32);
  v31[1] = *(_OWORD *)(a2 + 16);
  uint64_t v31[2] = v6;
  v31[0] = *(_OWORD *)a2;
  if ((BYTE4(v6) & 2) != 0)
  {
    if ((BYTE4(v6) & 4) != 0)
    {
      char v12 = (BYTE4(v6) & 8) == 0;
    }
    else
    {
      uint64_t v9 = *(void *)&v31[0];
      v33[0] = *(void *)&v31[0];
      outlined retain of _ViewInputs(a2);
      outlined retain of _GraphInputs((uint64_t)v31);
      outlined retain of ViewTransform((uint64_t)v33);
      uint64_t v10 = specialized find<A>(_:key:)(v9);
      if (v10)
      {
        uint64_t v11 = (int *)(v10 + 72);
      }
      else
      {
        if (one-time initialization token for defaultValue != -1) {
          swift_once();
        }
        uint64_t v11 = &static DynamicStackOrientation.defaultValue;
      }
      int v5 = *v11;
      outlined release of ViewTransform((uint64_t)v33);
      outlined release of _GraphInputs((uint64_t)v31);
      outlined release of _ViewInputs(a2);
      char v12 = 2;
    }
    LODWORD(v25) = a1;
    BYTE4(v25) = v12;
    DWORD2(v25) = v5;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for SpacerLayoutComputer<_VSpacer>(0, &lazy cache variable for type metadata for SpacerLayoutComputer<Spacer>);
    lazy protocol witness table accessor for type SpacerLayoutComputer<_VSpacer> and conformance SpacerLayoutComputer<A>(&lazy protocol witness table cache variable for type SpacerLayoutComputer<Spacer> and conformance SpacerLayoutComputer<A>, &lazy cache variable for type metadata for SpacerLayoutComputer<Spacer>);
    int v5 = Attribute.init<A>(body:value:flags:update:)();
    int v7 = 128;
    int v23 = 128;
    int v24 = v5;
  }
  else
  {
    int v7 = 0;
  }
  uint64_t v13 = *(void *)&v31[0];
  uint64_t v32 = *(void *)&v31[0];
  outlined retain of _ViewInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v31);
  outlined retain of ViewTransform((uint64_t)&v32);
  uint64_t v14 = specialized find<A>(_:key:)(v13);
  if (v14)
  {
    uint64_t v15 = *(void *)(v14 + 72);
    uint64_t v16 = *(void *)(v14 + 80);
    outlined release of ViewTransform((uint64_t)&v32);
    outlined release of _GraphInputs((uint64_t)v31);
    uint64_t result = outlined release of _ViewInputs(a2);
    if (v15)
    {
      long long v18 = *(_OWORD *)(a2 + 48);
      long long v27 = *(_OWORD *)(a2 + 32);
      long long v28 = v18;
      long long v29 = *(_OWORD *)(a2 + 64);
      int v30 = *(_DWORD *)(a2 + 80);
      long long v19 = *(_OWORD *)(a2 + 16);
      long long v25 = *(_OWORD *)a2;
      long long v26 = v19;
      uint64_t result = (*(uint64_t (**)(long long *, uint64_t, uint64_t))(v16 + 8))(&v25, v15, v16);
      if (result)
      {
        long long v20 = *(_OWORD *)(a2 + 48);
        long long v27 = *(_OWORD *)(a2 + 32);
        long long v28 = v20;
        long long v29 = *(_OWORD *)(a2 + 64);
        int v30 = *(_DWORD *)(a2 + 80);
        long long v21 = *(_OWORD *)(a2 + 16);
        long long v25 = *(_OWORD *)a2;
        long long v26 = v21;
        uint64_t result = (*(uint64_t (**)(long long *, uint64_t *, uint64_t, uint64_t))(v16 + 16))(&v25, &v22, v15, v16);
        int v7 = v23;
        int v5 = v24;
      }
    }
  }
  else
  {
    outlined release of ViewTransform((uint64_t)&v32);
    outlined release of _GraphInputs((uint64_t)v31);
    uint64_t result = outlined release of _ViewInputs(a2);
  }
  *(void *)a3 = v22;
  *(_DWORD *)(a3 + 8) = v7;
  *(_DWORD *)(a3 + 12) = v5;
  return result;
}

{
  int v5;
  long long v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  long long v13;
  long long v14;
  long long v15;
  long long v16;
  uint64_t v17;
  int v18;
  int v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  int v25;
  _OWORD v26[3];
  void v27[2];

  v27[1] = *MEMORY[0x263EF8340];
  uint64_t v17 = MEMORY[0x263F8EE78];
  int v5 = *MEMORY[0x263F288F8];
  long long v18 = 0;
  long long v19 = v5;
  long long v6 = *(_OWORD *)(a2 + 32);
  v26[1] = *(_OWORD *)(a2 + 16);
  v26[2] = v6;
  v26[0] = *(_OWORD *)a2;
  if ((BYTE4(v6) & 2) != 0)
  {
    LODWORD(v20) = a1;
    BYTE4(v20) = 1;
    DWORD2(v20) = v5;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for SpacerLayoutComputer<_VSpacer>(0, &lazy cache variable for type metadata for SpacerLayoutComputer<_VSpacer>);
    lazy protocol witness table accessor for type SpacerLayoutComputer<_VSpacer> and conformance SpacerLayoutComputer<A>(&lazy protocol witness table cache variable for type SpacerLayoutComputer<_VSpacer> and conformance SpacerLayoutComputer<A>, &lazy cache variable for type metadata for SpacerLayoutComputer<_VSpacer>);
    int v5 = Attribute.init<A>(body:value:flags:update:)();
    int v7 = 128;
    long long v18 = 128;
    long long v19 = v5;
  }
  else
  {
    int v7 = 0;
  }
  char v8 = *(void *)&v26[0];
  v27[0] = *(void *)&v26[0];
  outlined retain of _ViewInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v26);
  outlined retain of ViewTransform((uint64_t)v27);
  uint64_t v9 = specialized find<A>(_:key:)(v8);
  if (v9)
  {
    uint64_t v10 = *(void *)(v9 + 72);
    uint64_t v11 = *(void *)(v9 + 80);
    outlined release of ViewTransform((uint64_t)v27);
    outlined release of _GraphInputs((uint64_t)v26);
    uint64_t result = outlined release of _ViewInputs(a2);
    if (v10)
    {
      uint64_t v13 = *(_OWORD *)(a2 + 48);
      uint64_t v22 = *(_OWORD *)(a2 + 32);
      int v23 = v13;
      int v24 = *(_OWORD *)(a2 + 64);
      long long v25 = *(_DWORD *)(a2 + 80);
      uint64_t v14 = *(_OWORD *)(a2 + 16);
      long long v20 = *(_OWORD *)a2;
      long long v21 = v14;
      uint64_t result = (*(uint64_t (**)(long long *, uint64_t, uint64_t))(v11 + 8))(&v20, v10, v11);
      if (result)
      {
        uint64_t v15 = *(_OWORD *)(a2 + 48);
        uint64_t v22 = *(_OWORD *)(a2 + 32);
        int v23 = v15;
        int v24 = *(_OWORD *)(a2 + 64);
        long long v25 = *(_DWORD *)(a2 + 80);
        uint64_t v16 = *(_OWORD *)(a2 + 16);
        long long v20 = *(_OWORD *)a2;
        long long v21 = v16;
        uint64_t result = (*(uint64_t (**)(long long *, uint64_t *, uint64_t, uint64_t))(v11 + 16))(&v20, &v17, v10, v11);
        int v7 = v18;
        int v5 = v19;
      }
    }
  }
  else
  {
    outlined release of ViewTransform((uint64_t)v27);
    outlined release of _GraphInputs((uint64_t)v26);
    uint64_t result = outlined release of _ViewInputs(a2);
  }
  *(void *)a3 = v17;
  *(_DWORD *)(a3 + 8) = v7;
  *(_DWORD *)(a3 + 12) = v5;
  return result;
}

{
  int v5;
  long long v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  long long v13;
  long long v14;
  long long v15;
  long long v16;
  uint64_t v17;
  int v18;
  int v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  int v25;
  _OWORD v26[3];
  void v27[2];

  v27[1] = *MEMORY[0x263EF8340];
  uint64_t v17 = MEMORY[0x263F8EE78];
  int v5 = *MEMORY[0x263F288F8];
  long long v18 = 0;
  long long v19 = v5;
  long long v6 = *(_OWORD *)(a2 + 32);
  v26[1] = *(_OWORD *)(a2 + 16);
  v26[2] = v6;
  v26[0] = *(_OWORD *)a2;
  if ((BYTE4(v6) & 2) != 0)
  {
    LODWORD(v20) = a1;
    BYTE4(v20) = 0;
    DWORD2(v20) = v5;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for SpacerLayoutComputer<_VSpacer>(0, &lazy cache variable for type metadata for SpacerLayoutComputer<_HSpacer>);
    lazy protocol witness table accessor for type SpacerLayoutComputer<_VSpacer> and conformance SpacerLayoutComputer<A>(&lazy protocol witness table cache variable for type SpacerLayoutComputer<_HSpacer> and conformance SpacerLayoutComputer<A>, &lazy cache variable for type metadata for SpacerLayoutComputer<_HSpacer>);
    int v5 = Attribute.init<A>(body:value:flags:update:)();
    int v7 = 128;
    long long v18 = 128;
    long long v19 = v5;
  }
  else
  {
    int v7 = 0;
  }
  char v8 = *(void *)&v26[0];
  v27[0] = *(void *)&v26[0];
  outlined retain of _ViewInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v26);
  outlined retain of ViewTransform((uint64_t)v27);
  uint64_t v9 = specialized find<A>(_:key:)(v8);
  if (v9)
  {
    uint64_t v10 = *(void *)(v9 + 72);
    uint64_t v11 = *(void *)(v9 + 80);
    outlined release of ViewTransform((uint64_t)v27);
    outlined release of _GraphInputs((uint64_t)v26);
    uint64_t result = outlined release of _ViewInputs(a2);
    if (v10)
    {
      uint64_t v13 = *(_OWORD *)(a2 + 48);
      uint64_t v22 = *(_OWORD *)(a2 + 32);
      int v23 = v13;
      int v24 = *(_OWORD *)(a2 + 64);
      long long v25 = *(_DWORD *)(a2 + 80);
      uint64_t v14 = *(_OWORD *)(a2 + 16);
      long long v20 = *(_OWORD *)a2;
      long long v21 = v14;
      uint64_t result = (*(uint64_t (**)(long long *, uint64_t, uint64_t))(v11 + 8))(&v20, v10, v11);
      if (result)
      {
        uint64_t v15 = *(_OWORD *)(a2 + 48);
        uint64_t v22 = *(_OWORD *)(a2 + 32);
        int v23 = v15;
        int v24 = *(_OWORD *)(a2 + 64);
        long long v25 = *(_DWORD *)(a2 + 80);
        uint64_t v16 = *(_OWORD *)(a2 + 16);
        long long v20 = *(_OWORD *)a2;
        long long v21 = v16;
        uint64_t result = (*(uint64_t (**)(long long *, uint64_t *, uint64_t, uint64_t))(v11 + 16))(&v20, &v17, v10, v11);
        int v7 = v18;
        int v5 = v19;
      }
    }
  }
  else
  {
    outlined release of ViewTransform((uint64_t)v27);
    outlined release of _GraphInputs((uint64_t)v26);
    uint64_t result = outlined release of _ViewInputs(a2);
  }
  *(void *)a3 = v17;
  *(_DWORD *)(a3 + 8) = v7;
  *(_DWORD *)(a3 + 12) = v5;
  return result;
}

{
  int v5;
  long long v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  uint64_t v22;
  int v23;
  int v24;
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  long long v29;
  int v30;
  _OWORD v31[3];
  uint64_t v32;
  void v33[2];

  v33[1] = *MEMORY[0x263EF8340];
  uint64_t v22 = MEMORY[0x263F8EE78];
  int v5 = *MEMORY[0x263F288F8];
  int v23 = 0;
  int v24 = v5;
  long long v6 = *(_OWORD *)(a2 + 32);
  v31[1] = *(_OWORD *)(a2 + 16);
  uint64_t v31[2] = v6;
  v31[0] = *(_OWORD *)a2;
  if ((BYTE4(v6) & 2) != 0)
  {
    if ((BYTE4(v6) & 4) != 0)
    {
      char v12 = (BYTE4(v6) & 8) == 0;
    }
    else
    {
      uint64_t v9 = *(void *)&v31[0];
      uint64_t v32 = *(void *)&v31[0];
      outlined retain of _ViewInputs(a2);
      outlined retain of _GraphInputs((uint64_t)v31);
      outlined retain of ViewTransform((uint64_t)&v32);
      uint64_t v10 = specialized find<A>(_:key:)(v9);
      if (v10)
      {
        uint64_t v11 = (int *)(v10 + 72);
      }
      else
      {
        if (one-time initialization token for defaultValue != -1) {
          swift_once();
        }
        uint64_t v11 = &static DynamicStackOrientation.defaultValue;
      }
      int v5 = *v11;
      outlined release of ViewTransform((uint64_t)&v32);
      outlined release of _GraphInputs((uint64_t)v31);
      outlined release of _ViewInputs(a2);
      char v12 = 2;
    }
    LODWORD(v25) = a1;
    BYTE4(v25) = v12;
    DWORD2(v25) = v5;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for SpacerLayoutComputer<_VSpacer>(0, &lazy cache variable for type metadata for SpacerLayoutComputer<_TextBaselineRelativeSpacer>);
    lazy protocol witness table accessor for type SpacerLayoutComputer<_VSpacer> and conformance SpacerLayoutComputer<A>(&lazy protocol witness table cache variable for type SpacerLayoutComputer<_TextBaselineRelativeSpacer> and conformance SpacerLayoutComputer<A>, &lazy cache variable for type metadata for SpacerLayoutComputer<_TextBaselineRelativeSpacer>);
    int v5 = Attribute.init<A>(body:value:flags:update:)();
    int v7 = 128;
    int v23 = 128;
    int v24 = v5;
  }
  else
  {
    int v7 = 0;
  }
  uint64_t v13 = *(void *)&v31[0];
  v33[0] = *(void *)&v31[0];
  outlined retain of _ViewInputs(a2);
  outlined retain of _GraphInputs((uint64_t)v31);
  outlined retain of ViewTransform((uint64_t)v33);
  uint64_t v14 = specialized find<A>(_:key:)(v13);
  if (v14)
  {
    uint64_t v15 = *(void *)(v14 + 72);
    uint64_t v16 = *(void *)(v14 + 80);
    outlined release of ViewTransform((uint64_t)v33);
    outlined release of _GraphInputs((uint64_t)v31);
    uint64_t result = outlined release of _ViewInputs(a2);
    if (v15)
    {
      long long v18 = *(_OWORD *)(a2 + 48);
      long long v27 = *(_OWORD *)(a2 + 32);
      long long v28 = v18;
      long long v29 = *(_OWORD *)(a2 + 64);
      int v30 = *(_DWORD *)(a2 + 80);
      long long v19 = *(_OWORD *)(a2 + 16);
      long long v25 = *(_OWORD *)a2;
      long long v26 = v19;
      uint64_t result = (*(uint64_t (**)(long long *, uint64_t, uint64_t))(v16 + 8))(&v25, v15, v16);
      if (result)
      {
        long long v20 = *(_OWORD *)(a2 + 48);
        long long v27 = *(_OWORD *)(a2 + 32);
        long long v28 = v20;
        long long v29 = *(_OWORD *)(a2 + 64);
        int v30 = *(_DWORD *)(a2 + 80);
        long long v21 = *(_OWORD *)(a2 + 16);
        long long v25 = *(_OWORD *)a2;
        long long v26 = v21;
        uint64_t result = (*(uint64_t (**)(long long *, uint64_t *, uint64_t, uint64_t))(v16 + 16))(&v25, &v22, v15, v16);
        int v7 = v23;
        int v5 = v24;
      }
    }
  }
  else
  {
    outlined release of ViewTransform((uint64_t)v33);
    outlined release of _GraphInputs((uint64_t)v31);
    uint64_t result = outlined release of _ViewInputs(a2);
  }
  *(void *)a3 = v22;
  *(_DWORD *)(a3 + 8) = v7;
  *(_DWORD *)(a3 + 12) = v5;
  return result;
}

void type metadata accessor for SpacerLayoutComputer<_VSpacer>(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = type metadata accessor for SpacerLayoutComputer();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type SpacerLayoutComputer<_VSpacer> and conformance SpacerLayoutComputer<A>(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for SpacerLayoutComputer<_VSpacer>(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for SpacerLayoutComputer()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static ViewGraph.Outputs.defaults.getter@<X0>(unsigned char *a1@<X8>)
{
  if (one-time initialization token for defaults != -1) {
    uint64_t result = swift_once();
  }
  *a1 = static ViewGraph.Outputs.defaults;
  return result;
}

unsigned char *storeEnumTagSinglePayload for HoverEffectContext.Properties(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t ScrollPhaseState.phase.getter()
{
  return *v0;
}

uint64_t outlined init with copy of Logger?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for CGSize?(0, &lazy cache variable for type metadata for Logger?, MEMORY[0x263F90268]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for CGSize?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t instantiation function for generic protocol witness table for PreferenceCombiner<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

ValueMetadata *type metadata accessor for ControlSize()
{
  return &type metadata for ControlSize;
}

uint64_t _GraphInputs.environment.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_beginAccess();
  return *(unsigned int *)(v1 + 16);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance AnimatableAttribute<A>()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

uint64_t destroy for ViewGraphGeometryObservers.Observer(unsigned __int8 *a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v4 = *(void *)(v3 + 64);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = v4 + v5;
  if (((v4 + v5) & ~v5) + v4 <= v4) {
    uint64_t v7 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  }
  else {
    uint64_t v7 = ((v4 + v5) & ~v5) + v4;
  }
  char v8 = 8 * v7;
  if (v7 > 3) {
    goto LABEL_5;
  }
  unsigned int v10 = ((1 << v8) + 1) >> v8;
  if (v10 > 0xFFFD)
  {
    unsigned int v9 = *(_DWORD *)&a1[v7];
  }
  else
  {
    if (v10 <= 0xFD)
    {
LABEL_5:
      unsigned int v9 = a1[v7];
      goto LABEL_10;
    }
    unsigned int v9 = *(unsigned __int16 *)&a1[v7];
  }
LABEL_10:
  unsigned int v11 = v9 - 2;
  if (v9 >= 2)
  {
    if (v7 <= 3) {
      uint64_t v12 = v7;
    }
    else {
      uint64_t v12 = 4;
    }
    switch(v12)
    {
      case 1:
        int v13 = *a1;
        goto LABEL_19;
      case 2:
        int v13 = *(unsigned __int16 *)a1;
        goto LABEL_19;
      case 3:
        int v13 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_19;
      case 4:
        int v13 = *(_DWORD *)a1;
LABEL_19:
        int v14 = (v13 | (v11 << v8)) + 2;
        unsigned int v9 = v13 + 2;
        if (v7 < 4) {
          unsigned int v9 = v14;
        }
        break;
      default:
        break;
    }
  }
  if (v9 == 1)
  {
    uint64_t v15 = ~v5;
    uint64_t v16 = *(void (**)(unsigned __int8 *, uint64_t))(v3 + 8);
    v16(a1, AssociatedTypeWitness);
    v16((unsigned __int8 *)((unint64_t)&a1[v6] & v15), AssociatedTypeWitness);
  }
  else if (!v9)
  {
    (*(void (**)(unsigned __int8 *, uint64_t))(v3 + 8))(a1, AssociatedTypeWitness);
  }

  return swift_release();
}

uint64_t initializeWithTake for SubscriptionLifetime.Connection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CombineIdentifier();
  uint64_t v7 = *(void *)(v6 - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, v6);
  unint64_t v8 = (*(void *)(v7 + 32) + 7 + a2) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = swift_weakTakeInit();
  uint64_t v10 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v11 = v10 + 32;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (v12 + 8 + v9) & ~v12;
  uint64_t v14 = (v12 + 8 + v8) & ~v12;
  (*(void (**)(uint64_t, uint64_t))(v10 + 32))(v13, v14);
  *(void *)((*(void *)(v11 + 32) + 7 + v13) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v11 + 32)
                                                                                       + 7
                                                                                       + v14) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t ModifiedViewList.ListModifier.__deallocating_deinit()
{
  ModifiedViewList.ListModifier.deinit();

  return swift_deallocClassInstance();
}

uint64_t ModifiedViewList.ListModifier.deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v0;
}

uint64_t TextShadowModifier.__deallocating_deinit()
{
  return TextShadowModifier.__deallocating_deinit();
}

{
  uint64_t vars8;

  swift_release();

  return swift_deallocClassInstance();
}

_OWORD *initializeWithTake for ZStack(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t initializeWithTake for VStack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))((*(unsigned __int8 *)(v4 + 80) + 17 + a1) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (*(unsigned __int8 *)(v4 + 80) + 17 + a2) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t initializeWithTake for _ConditionalContent(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(*(void *)(v4 - 8) + 64) <= *(void *)(v5 + 64)) {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    uint64_t v6 = *(void *)(*(void *)(v4 - 8) + 64);
  }
  unsigned int v7 = a2[v6];
  unsigned int v8 = v7 - 2;
  if (v7 >= 2)
  {
    if (v6 <= 3) {
      uint64_t v9 = v6;
    }
    else {
      uint64_t v9 = 4;
    }
    switch(v9)
    {
      case 1:
        int v10 = *a2;
        goto LABEL_13;
      case 2:
        int v10 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v10 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v10 = *(_DWORD *)a2;
LABEL_13:
        int v11 = (v10 | (v8 << (8 * v6))) + 2;
        unsigned int v7 = v10 + 2;
        if (v6 < 4) {
          unsigned int v7 = v11;
        }
        break;
      default:
        break;
    }
  }
  BOOL v12 = v7 == 1;
  if (v7 == 1) {
    uint64_t v5 = *(void *)(v4 - 8);
  }
  (*(void (**)(uint64_t))(v5 + 32))(a1);
  *(unsigned char *)(a1 + v6) = v12;
  return a1;
}

uint64_t initializeWithTake for CodableAttributedString.Range.EncodingWrapper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t initializeWithCopy for UnaryLayoutEngine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 3;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFFCLL;
  uint64_t v9 = *(void *)v8;
  *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 + 8);
  *(void *)unint64_t v7 = v9;
  unint64_t v10 = (v7 + 15) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v11 = (v8 + 15) & 0xFFFFFFFFFFFFFFFCLL;
  uint64_t v12 = *(void *)v11;
  *(_DWORD *)(v10 + 8) = *(_DWORD *)(v11 + 8);
  *(void *)unint64_t v10 = v12;
  unint64_t v13 = (v10 + 19) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = (v11 + 19) & 0xFFFFFFFFFFFFFFF8;
  long long v15 = *(_OWORD *)(v14 + 32);
  long long v16 = *(_OWORD *)v14;
  *(_OWORD *)(v13 + 16) = *(_OWORD *)(v14 + 16);
  *(_OWORD *)(v13 + 32) = v15;
  *(_OWORD *)unint64_t v13 = v16;
  long long v17 = *(_OWORD *)(v14 + 96);
  long long v19 = *(_OWORD *)(v14 + 48);
  long long v18 = *(_OWORD *)(v14 + 64);
  *(_OWORD *)(v13 + 80) = *(_OWORD *)(v14 + 80);
  *(_OWORD *)(v13 + 96) = v17;
  *(_OWORD *)(v13 + 48) = v19;
  *(_OWORD *)(v13 + 64) = v18;
  long long v21 = *(_OWORD *)(v14 + 128);
  long long v20 = *(_OWORD *)(v14 + 144);
  long long v22 = *(_OWORD *)(v14 + 112);
  *(unsigned char *)(v13 + 160) = *(unsigned char *)(v14 + 160);
  *(_OWORD *)(v13 + 128) = v21;
  *(_OWORD *)(v13 + 144) = v20;
  *(_OWORD *)(v13 + 112) = v22;
  memcpy((void *)((v10 + 187) & 0xFFFFFFFFFFFFFFF8), (const void *)((v11 + 187) & 0xFFFFFFFFFFFFFFF8), 0x131uLL);
  return a1;
}

uint64_t base witness table accessor for _AttributeBody in MakeResolvedRepresentation<A>()
{
  return swift_getWitnessTable();
}

uint64_t type metadata completion function for Binding()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, char a6, uint64_t a7, char a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, double a17, char a18, double a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v18 = a23;
  uint64_t v20 = a21;
  uint64_t v19 = a22;
  double v21 = a19;
  double v22 = a17;
  int v23 = a2 & 1;
  double v24 = *(double *)&a1;
  if (v23) {
    double v24 = -INFINITY;
  }
  int v25 = a4 & 1;
  double v26 = *(double *)&a3;
  if (v25) {
    double v26 = v24;
  }
  int v27 = a6 & 1;
  char v28 = a8 & 1;
  double v29 = *(double *)&a5;
  if (v27) {
    double v29 = v26;
  }
  if (v24 > v26 || v26 > v29) {
    goto LABEL_22;
  }
  double v31 = *(double *)&a7;
  if (a8) {
    double v31 = -INFINITY;
  }
  double v32 = a17;
  if (a18) {
    double v32 = v31;
  }
  double v33 = a19;
  if (a20) {
    double v33 = v32;
  }
  if (v31 > v32 || v32 > v33)
  {
LABEL_22:
    char v37 = v27;
    char v38 = v25;
    char v39 = v23;
    uint64_t v40 = a7;
    static os_log_type_t.fault.getter();
    if (one-time initialization token for runtimeIssuesLog != -1) {
      swift_once();
    }
    id v35 = (id)static Log.runtimeIssuesLog;
    os_log(_:dso:log:_:_:)();

    a7 = v40;
    double v21 = a19;
    uint64_t v18 = a23;
    double v22 = a17;
    LOBYTE(v23) = v39;
    uint64_t v20 = a21;
    uint64_t v19 = a22;
    LOBYTE(v27) = v37;
    LOBYTE(v25) = v38;
  }
  specialized _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(*(double *)&a1, v23, *(double *)&a3, v25, *(double *)&a5, v27, *(double *)&a7, v28, (uint64_t)v41, v22, a18 & 1, v21, a20 & 1, v20, v19);
  return View.modifier<A>(_:)(v41, v18, &type metadata for _FlexFrameLayout);
}

__n128 _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  specialized _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(a1, a2 & 1, a3, a4 & 1, a5, a6 & 1, a7, a8 & 1, (uint64_t)v19, a10, a11 & 1, a12, a13 & 1, a14, a15);
  long long v16 = v19[5];
  *(_OWORD *)(a9 + 64) = v19[4];
  *(_OWORD *)(a9 + 80) = v16;
  *(_OWORD *)(a9 + 96) = v19[6];
  long long v17 = v19[1];
  *(_OWORD *)a9 = v19[0];
  *(_OWORD *)(a9 + 16) = v17;
  __n128 result = (__n128)v19[3];
  *(_OWORD *)(a9 + 32) = v19[2];
  *(__n128 *)(a9 + 48) = result;
  return result;
}

uint64_t specialized _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double v19 = a12;
  double v20 = a1;
  double v21 = 0.0;
  if (a1 > 0.0) {
    double v22 = a1;
  }
  else {
    double v22 = 0.0;
  }
  double v23 = a3;
  if (a2) {
    double v24 = 0.0;
  }
  else {
    double v24 = v22;
  }
  if (v24 < a3) {
    double v24 = a3;
  }
  double v25 = v24;
  if (a4) {
    double v25 = a3;
  }
  double v26 = a5;
  double v49 = v25;
  double v27 = v25;
  if (a4) {
    double v27 = 0.0;
  }
  if (v27 < a5) {
    double v27 = a5;
  }
  double v28 = v27;
  if (a6) {
    double v28 = a5;
  }
  double v48 = v28;
  if (a7 > 0.0) {
    double v29 = a7;
  }
  else {
    double v29 = 0.0;
  }
  if (a8) {
    double v30 = 0.0;
  }
  else {
    double v30 = v29;
  }
  if (v30 < a10) {
    double v30 = a10;
  }
  double v31 = v30;
  if (a11) {
    double v31 = a10;
  }
  double v32 = INFINITY;
  double v33 = v31;
  if (a11) {
    double v33 = 0.0;
  }
  if (v33 < a12) {
    double v33 = a12;
  }
  if ((a13 & 1) == 0)
  {
    double v32 = a12;
    double v19 = v33;
  }
  double v46 = v19;
  double v47 = v31;
  if (a2) {
    double v20 = 0.0;
  }
  if (a6) {
    double v26 = INFINITY;
  }
  if (a4) {
    double v34 = v26;
  }
  else {
    double v34 = a3;
  }
  if (a4) {
    double v23 = 0.0;
  }
  BOOL v35 = v20 > v34;
  if (v23 > v26) {
    BOOL v35 = 1;
  }
  int v36 = v20 >= INFINITY || v35;
  if (a8) {
    double v37 = 0.0;
  }
  else {
    double v37 = a7;
  }
  if (a11) {
    double v38 = v32;
  }
  else {
    double v38 = a10;
  }
  if ((a11 & 1) == 0) {
    double v21 = a10;
  }
  BOOL v39 = v37 > v38;
  if (v21 > v32) {
    BOOL v39 = 1;
  }
  int v40 = v37 >= INFINITY || v39;
  if (one-time initialization token for v3 != -1) {
    swift_once();
  }
  unsigned int v41 = static Semantics.v3;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC) {
    uint64_t result = dyld_program_sdk_at_least();
  }
  else {
    uint64_t result = static Semantics.forced >= v41;
  }
  if ((v36 | v40) == 1 && result != 0)
  {
    static os_log_type_t.fault.getter();
    if (one-time initialization token for runtimeIssuesLog != -1) {
      swift_once();
    }
    uint64_t result = os_log(_:dso:log:_:_:)();
  }
  double v44 = v29;
  if (a8) {
    double v44 = a7;
  }
  double v45 = v22;
  if (a2) {
    double v45 = a1;
  }
  *(double *)a9 = v45;
  *(unsigned char *)(a9 + 8) = a2 & 1;
  *(double *)(a9 + 16) = v49;
  *(unsigned char *)(a9 + 24) = a4 & 1;
  *(double *)(a9 + 32) = v48;
  *(unsigned char *)(a9 + 40) = a6 & 1;
  *(double *)(a9 + 48) = v44;
  *(unsigned char *)(a9 + 56) = a8 & 1;
  *(double *)(a9 + 64) = v47;
  *(unsigned char *)(a9 + 72) = a11 & 1;
  *(double *)(a9 + 80) = v46;
  *(unsigned char *)(a9 + 88) = a13 & 1;
  *(void *)(a9 + 96) = a14;
  *(void *)(a9 + 104) = a15;
  return result;
}

uint64_t specialized GeometryReaderLayout.placeSubviews(in:proposal:subviews:cache:)(uint64_t result, double a2, double a3, double a4, double a5)
{
  uint64_t v5 = *(void *)(result + 8);
  uint64_t v31 = *(void *)(v5 + 16);
  if (v31)
  {
    int v10 = *(_DWORD *)result;
    char v29 = *(unsigned char *)(result + 17);
    char v30 = *(unsigned char *)(result + 16);
    if (one-time initialization token for topLeading != -1) {
LABEL_23:
    }
      swift_once();
    unint64_t v11 = 0;
    uint64_t v12 = v5 + 32;
    int v28 = *MEMORY[0x263F288F8];
    unint64_t v13 = (int *)(v5 + 36);
    for (i = (int *)(v5 + 32); ; i += 3)
    {
      unint64_t v17 = *(void *)(v5 + 16);
      if (v30)
      {
        if (v11 >= v17) {
          goto LABEL_22;
        }
        uint64_t v18 = (int *)(v12 + 12 * v11 + 4);
        int v19 = i[2];
        double v20 = i;
      }
      else
      {
        if (v11 >= v17)
        {
          __break(1u);
LABEL_22:
          __break(1u);
          goto LABEL_23;
        }
        double v20 = (int *)(v12 + 8 * v11);
        int v19 = v11;
        uint64_t v18 = v13;
      }
      int v21 = *v18;
      int v22 = *v20;
      long long v23 = static UnitPoint.topLeading;
      int v38 = v10;
      int v39 = v22;
      int v40 = v21;
      int v41 = v19;
      char v42 = v29;
      if (v22 == v28)
      {
        Inputuint64_t Value = (uint64_t *)&static LayoutComputer.defaultValue;
        if (one-time initialization token for defaultValue != -1)
        {
          swift_once();
          Inputuint64_t Value = (uint64_t *)&static LayoutComputer.defaultValue;
        }
      }
      else
      {
        Inputuint64_t Value = (uint64_t *)AGGraphGetInputValue();
      }
      uint64_t v26 = *InputValue;
      uint64_t v25 = InputValue[1];
      uint64_t v27 = one-time initialization token for lockAssertionsAreEnabled;
      swift_retain();
      if (v27 != -1) {
        swift_once();
      }
      if (lockAssertionsAreEnabled)
      {
        if (one-time initialization token for _lock != -1) {
          swift_once();
        }
        if (!_MovableLockIsOwner(static Update._lock)) {
          break;
        }
      }
      ++v11;
      double v32 = a4;
      LOBYTE(v33) = 0;
      double v34 = a5;
      LOBYTE(v35) = 0;
      double v15 = (*(double (**)(double *))(*(void *)v26 + 120))(&v32);
      double v32 = *(double *)&v26;
      uint64_t v33 = v25;
      double v34 = v15;
      uint64_t v35 = v16;
      double v36 = a4;
      double v37 = a5;
      LayoutSubview.place(at:anchor:dimensions:)((uint64_t *)&v32, a2, a3, *(double *)&v23, *((double *)&v23 + 1));
      uint64_t result = swift_release();
      v13 += 2;
      if (v31 == v11) {
        return result;
      }
    }
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t LayoutSubview.place(at:anchor:proposal:)(uint64_t a1, char a2, uint64_t a3, char a4, double a5, double a6, double a7, double a8)
{
  int v13 = v8[1];
  char v14 = *((unsigned char *)v8 + 16);
  int v26 = *v8;
  int v27 = v13;
  uint64_t v28 = *((void *)v8 + 1);
  char v29 = v14;
  int v20 = v26;
  int v21 = v13;
  int v22 = v28;
  uint64_t v16 = a1;
  LOBYTE(v17) = a2 & 1;
  *(void *)&long long v18 = a3;
  BYTE8(v18) = a4 & 1;
  LayoutProxy.dimensions(in:)((uint64_t)&v16, (uint64_t)v23);
  uint64_t v16 = v23[0];
  uint64_t v17 = v23[1];
  long long v18 = v24;
  long long v19 = v25;
  LayoutSubview.place(at:anchor:dimensions:)(&v16, a5, a6, a7, a8);

  return swift_release();
}

uint64_t LayoutSubview.place(at:anchor:dimensions:)(uint64_t *a1, double a2, double a3, double a4, double a5)
{
  double v6 = *((double *)a1 + 2);
  double v7 = v6 * a4;
  if (a4 == 0.0) {
    double v7 = 0.0;
  }
  double v8 = a2 - v7;
  long long v22 = *(_OWORD *)(a1 + 3);
  double v9 = a5 * *((double *)a1 + 3);
  if (a5 == 0.0) {
    double v9 = 0.0;
  }
  if ((~*(void *)&v8 & 0x7FF0000000000000) == 0 && (*(void *)&v8 & 0xFFFFFFFFFFFFFLL) != 0) {
    goto LABEL_22;
  }
  double v11 = a3 - v9;
  if ((~COERCE__INT64(a3 - v9) & 0x7FF0000000000000) == 0
    && (COERCE_UNSIGNED_INT64(a3 - v9) & 0xFFFFFFFFFFFFFLL) != 0)
  {
    goto LABEL_22;
  }
  double v13 = *(double *)a1;
  uint64_t v14 = a1[1];
  uint64_t v15 = a1[5];
  unint64_t v16 = *(int *)(v5 + 12);
  swift_retain();
  uint64_t v17 = (unsigned char *)_threadLayoutData();
  if (!v17)
  {
LABEL_21:
    __break(1u);
LABEL_22:
    _StringGuts.grow(_:)(34);
    v19._object = (void *)0x8000000246220E10;
    v19._countAndFlagsBits = 0xD000000000000018;
    String.append(_:)(v19);
    type metadata accessor for CGPoint(0);
    _print_unlocked<A, B>(_:_:)();
    v20._countAndFlagsBits = 8236;
    v20._object = (void *)0xE200000000000000;
    String.append(_:)(v20);
    _print_unlocked<A, B>(_:_:)();
    v21._countAndFlagsBits = 8236;
    v21._object = (void *)0xE200000000000000;
    String.append(_:)(v21);
    type metadata accessor for CGSize(0);
    _print_unlocked<A, B>(_:_:)();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (*v17)
  {
    __break(1u);
    goto LABEL_21;
  }
  *(double *)long long v23 = v8;
  *(double *)&v23[1] = v11;
  *(double *)&void v23[2] = v13;
  v23[3] = v14;
  *(double *)&v23[4] = v6;
  long long v24 = v22;
  uint64_t v25 = v15;
  LOBYTE(v26) = 0;
  PlacementData.setGeometry(_:at:layoutDirection:)((uint64_t)v23, v16, (unsigned __int8 *)&v26);

  return swift_release();
}

void PlacementData.setGeometry(_:at:layoutDirection:)(uint64_t a1, unint64_t a2, unsigned __int8 *a3)
{
  CGFloat v5 = *(double *)a1;
  CGFloat v6 = *(double *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  CGFloat v9 = *(double *)(a1 + 32);
  long long rect = *(_OWORD *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 56);
  int v11 = *a3;
  uint64_t v12 = *(void **)(v3 + 8);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v3 + 8) = v12;
  if (isUniquelyReferenced_nonNull_native)
  {
    if ((a2 & 0x8000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew()(v12);
  *(void *)(v3 + 8) = v12;
  if ((a2 & 0x8000000000000000) != 0) {
    goto LABEL_14;
  }
LABEL_3:
  if (v12[2] <= a2)
  {
LABEL_15:
    __break(1u);
    return;
  }
  uint64_t v14 = &v12[8 * a2];
  uint64_t v16 = v14[4];
  uint64_t v15 = v14 + 4;
  swift_release();
  uint64_t v17 = v16 & 0xFFFFFFFFFFFFFLL;
  if ((~v16 & 0x7FF0000000000000) == 0 && v17 != 0) {
    ++*(void *)(v3 + 16);
  }
  *(CGFloat *)uint64_t v15 = v5;
  *((CGFloat *)v15 + 1) = v6;
  v15[2] = v7;
  void v15[3] = v8;
  *((CGFloat *)v15 + 4) = v9;
  *(_OWORD *)(v15 + 5) = rect;
  v15[7] = v10;
  if (v11 == *(unsigned __int8 *)(v3 + 56))
  {
    swift_retain();
  }
  else
  {
    double v19 = *(double *)(v3 + 24);
    CGFloat v20 = *(double *)(v3 + 32);
    CGFloat v21 = *(double *)(v3 + 40);
    CGFloat v22 = *(double *)(v3 + 48);
    swift_retain();
    v25.origin.double x = v19;
    v25.origin.double y = v20;
    v25.size.double width = v21;
    v25.size.double height = v22;
    double MaxX = CGRectGetMaxX(v25);
    v26.origin.double x = v5;
    v26.origin.double y = v6;
    v26.size.double width = v9;
    *(void *)&v26.size.double height = rect;
    *(double *)uint64_t v15 = MaxX - (CGRectGetMaxX(v26) - v19);
  }
  *(void *)(v3 + 8) = v12;
}

uint64_t instantiation function for generic protocol witness table for DynamicLayoutComputer<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t specialized static ScrollGeometryState.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 112);
  int v3 = *(unsigned __int8 *)(a2 + 112);
  long long v4 = *(_OWORD *)(a1 + 16);
  v12[0] = *(_OWORD *)a1;
  v12[1] = v4;
  long long v5 = *(_OWORD *)(a1 + 48);
  _OWORD v12[2] = *(_OWORD *)(a1 + 32);
  v12[3] = v5;
  long long v6 = *(_OWORD *)(a1 + 80);
  v12[4] = *(_OWORD *)(a1 + 64);
  v12[5] = v6;
  void v12[6] = *(_OWORD *)(a1 + 96);
  long long v7 = *(_OWORD *)(a2 + 16);
  v11[0] = *(_OWORD *)a2;
  v11[1] = v7;
  long long v8 = *(_OWORD *)(a2 + 48);
  v11[2] = *(_OWORD *)(a2 + 32);
  void v11[3] = v8;
  long long v9 = *(_OWORD *)(a2 + 80);
  void v11[4] = *(_OWORD *)(a2 + 64);
  v11[5] = v9;
  void v11[6] = *(_OWORD *)(a2 + 96);
  if (!specialized static ScrollGeometry.== infix(_:_:)((uint64_t)v12, (uint64_t)v11) || v2 != v3) {
    return 0;
  }

  return static WeakAttribute.== infix(_:_:)();
}

uint64_t specialized static ViewTransform.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 8), *(float64x2_t *)(a2 + 8)), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 24), *(float64x2_t *)(a2 + 24)))), 0xFuLL))) & 1) == 0)return 0; {
  long long v4 = *(void **)a1;
  }
  uint64_t v2 = *(void *)a2;
  if (*(void *)a1)
  {
    if (!v2) {
      return v2;
    }
    if (v4[3] == *(void *)(v2 + 24))
    {
      swift_retain();
      swift_retain();
      while (v2)
      {
        if (v4 == (void *)v2)
        {
          swift_release_n();
          return 1;
        }
        long long v5 = *(uint64_t (**)(uint64_t))(*v4 + 112);
        swift_retain();
        uint64_t v6 = swift_retain();
        if ((v5(v6) & 1) == 0)
        {
          swift_release_n();
          swift_release_n();
          return 0;
        }
        long long v7 = (void *)v4[2];
        swift_retain();
        swift_release_n();
        uint64_t v8 = *(void *)(v2 + 16);
        swift_retain();
        swift_release_n();
        long long v4 = v7;
        uint64_t v2 = v8;
        if (!v7)
        {
          uint64_t v2 = v8 == 0;
          goto LABEL_15;
        }
      }
      goto LABEL_15;
    }
  }
  else if (!v2)
  {
    uint64_t v2 = 1;
LABEL_15:
    swift_release();
    return v2;
  }
  return 0;
}

uint64_t Element.isEqual(to:)()
{
  uint64_t v1 = swift_dynamicCastClass();
  if (!v1) {
    return 0;
  }
  if (*(double *)(v0 + 32) != *(double *)(v1 + 32) || *(double *)(v0 + 40) != *(double *)(v1 + 40)) {
    return 0;
  }
  swift_retain();
  char v4 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  return v4 & 1;
}

uint64_t BufferedElement.isEqual(to:)(uint64_t a1)
{
  if (*(__objc2_class **)a1 == _TtC7SwiftUIP33_1CC2FE016A82CF91549A64E942CE8ED415BufferedElement
    && (*(double *)(v1 + 32) == *(double *)(a1 + 32) ? (BOOL v3 = *(double *)(v1 + 40) == *(double *)(a1 + 40)) : (BOOL v3 = 0), v3))
  {
    swift_beginAccess();
    v7[0] = *(void *)(v1 + 48);
    v7[1] = *(void *)(v1 + 56);
    swift_beginAccess();
    v6[0] = *(void *)(a1 + 48);
    v6[1] = *(void *)(a1 + 56);
    char v4 = specialized static ViewTransform.UnsafeBuffer.== infix(_:_:)((uint64_t)v7, v6);
  }
  else
  {
    char v4 = 0;
  }
  return v4 & 1;
}

uint64_t specialized static ViewTransform.UnsafeBuffer.== infix(_:_:)(uint64_t result, uint64_t *a2)
{
  int v2 = *(_DWORD *)(result + 12);
  if (v2 != *((_DWORD *)a2 + 3)) {
    return 0;
  }
  int v3 = 0;
  int v4 = 0;
  uint64_t v5 = *a2;
  uint64_t v6 = *(void *)result;
  while (1)
  {
    if (!(v2 | v4)) {
      return 1;
    }
    if (!v6) {
      break;
    }
    long long v7 = (uint64_t *)(v6 + v4);
    int v8 = v2 - 1;
    if (v2 == 1)
    {
      if (!(v3 | 1)) {
        return 1;
      }
      if (!v5) {
        goto LABEL_18;
      }
      int v4 = 0;
      uint64_t v9 = v5 + v3;
      int v3 = 0;
    }
    else
    {
      if (!(v2 | v3)) {
        return 1;
      }
      if (!v5) {
        goto LABEL_18;
      }
      v4 += *((_DWORD *)v7 + 2);
      uint64_t v9 = v5 + v3;
      v3 += *(_DWORD *)(v9 + 8);
    }
    uint64_t v10 = *v7;
    if (*(void *)v9 == *v7)
    {
      uint64_t v11 = v9;
      uint64_t v12 = v7;
      uint64_t result = (*(uint64_t (**)(uint64_t **, uint64_t *))(v10 + 128))(&v12, &v11);
      int v2 = v8;
      if (result) {
        continue;
      }
    }
    return 0;
  }
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t static ViewTransform.UnsafeBuffer._VTable.equal(_:_:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 136);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  int v8 = (char *)&v18 - v7;
  uint64_t v10 = *v9;
  uint64_t v19 = *v11;
  uint64_t v12 = _UnsafeHeterogeneousBuffer_Element.body<A>(as:)();
  double v13 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v13(v8, v12, v2);
  uint64_t v19 = v10;
  uint64_t v14 = _UnsafeHeterogeneousBuffer_Element.body<A>(as:)();
  v13(v5, v14, v2);
  char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v16 = *(void (**)(char *, uint64_t))(v3 + 8);
  v16(v5, v2);
  v16(v8, v2);
  return v15 & 1;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance SizedSpaceIDElement(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)a2) {
    return 0;
  }
  if (*(double *)(a1 + 16) == *(double *)(a2 + 16)) {
    return *(double *)(a1 + 8) == *(double *)(a2 + 8);
  }
  return 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ViewTransform.ScrollGeometryItem(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 112);
  int v3 = *(unsigned __int8 *)(a2 + 112);
  long long v4 = *(_OWORD *)(a1 + 16);
  v12[0] = *(_OWORD *)a1;
  v12[1] = v4;
  long long v5 = *(_OWORD *)(a1 + 48);
  _OWORD v12[2] = *(_OWORD *)(a1 + 32);
  v12[3] = v5;
  long long v6 = *(_OWORD *)(a1 + 80);
  v12[4] = *(_OWORD *)(a1 + 64);
  v12[5] = v6;
  void v12[6] = *(_OWORD *)(a1 + 96);
  long long v7 = *(_OWORD *)(a2 + 16);
  v11[0] = *(_OWORD *)a2;
  v11[1] = v7;
  long long v8 = *(_OWORD *)(a2 + 48);
  v11[2] = *(_OWORD *)(a2 + 32);
  void v11[3] = v8;
  long long v9 = *(_OWORD *)(a2 + 80);
  void v11[4] = *(_OWORD *)(a2 + 64);
  v11[5] = v9;
  void v11[6] = *(_OWORD *)(a2 + 96);
  return specialized static ScrollGeometry.== infix(_:_:)((uint64_t)v12, (uint64_t)v11) & ~(v2 ^ v3) & 1;
}

BOOL specialized static ScrollGeometry.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  BOOL result = 0;
  if ((vminv_u8((uint8x8_t)vcltz_s8(vshl_n_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)a1, *(float64x2_t *)a2), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 16), *(float64x2_t *)(a2 + 16))), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 32), *(float64x2_t *)(a2 + 32)), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 48), *(float64x2_t *)(a2 + 48))))), 7uLL))) & 1) != 0&& *(double *)(a1 + 64) == *(double *)(a2 + 64)&& *(double *)(a1 + 72) == *(double *)(a2 + 72))
  {
    return CGRectEqualToRect(*(CGRect *)(a1 + 80), *(CGRect *)(a2 + 80));
  }
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance SizedSpaceElement(uint64_t a1, uint64_t a2)
{
  if ((MEMORY[0x24C523BA0]() & 1) == 0) {
    return 0;
  }
  if (*(double *)(a1 + 48) == *(double *)(a2 + 48)) {
    return *(double *)(a1 + 40) == *(double *)(a2 + 40);
  }
  return 0;
}

uint64_t keypath_set_3Tm()
{
  uint64_t v0 = swift_retain();
  specialized EnvironmentValues.foregroundColor.setter(v0);

  return swift_release();
}

uint64_t specialized EnvironmentValues.foregroundColor.setter(uint64_t a1)
{
  uint64_t v2 = a1;
  if (a1)
  {
    if (one-time initialization token for foreground != -1) {
      swift_once();
    }
    if (static Color.foreground == v2 || ((*(uint64_t (**)(void))(*(void *)v2 + 88))() & 1) != 0) {
      uint64_t v2 = 0;
    }
    else {
      swift_retain();
    }
  }
  uint64_t v3 = *v1;
  swift_retain();
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, v2);
  swift_release();
  swift_release();
  if (v1[1])
  {
    uint64_t v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v4);
    swift_release();
    swift_release();
  }
  swift_release();
  return swift_release();
}

uint64_t keypath_setTm()
{
  uint64_t v0 = swift_retain();
  specialized EnvironmentValues.accentColor.setter(v0);

  return swift_release();
}

uint64_t keypath_setTm_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void, void))
{
  uint64_t v6 = a5(0, *(void *)(a4 + a3 - 16), *(void *)(a4 + a3 - 8));
  return specialized _EnabledScrollClipEffect.animatableData.setter(a1, v6);
}

uint64_t keypath_setTm_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void, void), uint64_t (*a6)(uint64_t, uint64_t))
{
  uint64_t v8 = a5(0, *(void *)(a4 + a3 - 16), *(void *)(a4 + a3 - 8));
  return a6(a1, v8);
}

uint64_t keypath_setTm_2()
{
  uint64_t v0 = swift_retain();
  specialized EnvironmentValues.subscript.setter(v0, (void (*)(uint64_t *, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter, (void (*)(uint64_t, uint64_t))specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:));

  return swift_release();
}

uint64_t static Color.accentColor.getter()
{
  type metadata accessor for ColorBox<Color.AccentColorProvider>(0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<Color.AccentColorProvider>, (void (*)(void))lazy protocol witness table accessor for type Color.AccentColorProvider and conformance Color.AccentColorProvider);

  return swift_allocObject();
}

uint64_t EnvironmentValues.accentColor.setter(uint64_t a1)
{
  specialized EnvironmentValues.accentColor.setter(a1);

  return swift_release();
}

uint64_t specialized EnvironmentValues.accentColor.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  type metadata accessor for ColorBox<Color.AccentColorProvider>(0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<Color.AccentColorProvider>, (void (*)(void))lazy protocol witness table accessor for type Color.AccentColorProvider and conformance Color.AccentColorProvider);
  uint64_t v4 = swift_allocObject();
  if (!a1)
  {
    swift_release();
    goto LABEL_6;
  }
  if (v4 != a1)
  {
    char v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(v4);
    swift_release();
    if (v5) {
      goto LABEL_8;
    }
LABEL_6:
    swift_retain();
    goto LABEL_9;
  }
  swift_release();
LABEL_8:
  a1 = 0;
LABEL_9:
  uint64_t v6 = *v2;
  swift_retain();
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v2, a1);
  swift_release();
  swift_release();
  if (v2[1])
  {
    uint64_t v7 = *v2;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v6, v7);
    swift_release();
    swift_release();
  }
  swift_release();
  return swift_release();
}

void type metadata accessor for ColorBox<Color.AccentColorProvider>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for ColorBox();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<AccentColorKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<AccentColorKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccentColorKey>, (uint64_t)&type metadata for AccentColorKey, (uint64_t)&protocol witness table for AccentColorKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<AccentColorKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<AccentColorKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<AccentColorKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccentColorKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccentColorKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccentColorKey>, (uint64_t)&type metadata for AccentColorKey, (uint64_t)&protocol witness table for AccentColorKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccentColorKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Color.AccentColorProvider and conformance Color.AccentColorProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type Color.AccentColorProvider and conformance Color.AccentColorProvider;
  if (!lazy protocol witness table cache variable for type Color.AccentColorProvider and conformance Color.AccentColorProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.AccentColorProvider and conformance Color.AccentColorProvider);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Color.AccentColorProvider and conformance Color.AccentColorProvider;
  if (!lazy protocol witness table cache variable for type Color.AccentColorProvider and conformance Color.AccentColorProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.AccentColorProvider and conformance Color.AccentColorProvider);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Color.AccentColorProvider and conformance Color.AccentColorProvider;
  if (!lazy protocol witness table cache variable for type Color.AccentColorProvider and conformance Color.AccentColorProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.AccentColorProvider and conformance Color.AccentColorProvider);
  }
  return result;
}

uint64_t static Color.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  else {
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a2) & 1;
  }
}

uint64_t static ModifiedContent<>.== infix(_:_:)()
{
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  type metadata accessor for ModifiedContent();
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnyGradient(uint64_t a1, void *a2)
{
  if (*(void *)a1 == *a2) {
    return 1;
  }
  else {
    return (*(uint64_t (**)(void))(**(void **)a1 + 88))() & 1;
  }
}

uint64_t ColorBox.isEqual(to:)()
{
  uint64_t result = swift_dynamicCastClass();
  if (result)
  {
    swift_retain();
    char v1 = dispatch thunk of static Equatable.== infix(_:_:)();
    swift_release();
    return v1 & 1;
  }
  return result;
}

uint64_t ShapeStyleBox.isEqual(to:)()
{
  uint64_t v1 = *v0;
  uint64_t v2 = swift_dynamicCastClass();
  uint64_t v3 = v2;
  if (v2) {
    uint64_t v2 = swift_retain();
  }
  v6[6] = v3;
  MEMORY[0x270FA5388](v2);
  uint64_t v6[2] = v0;
  float64x2_t v6[3] = v1;
  type metadata accessor for Optional();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in ShapeStyleBox.isEqual(to:), (uint64_t)v6, MEMORY[0x263F8E628], MEMORY[0x263F8D4F8], v4, (uint64_t)&v7);
  swift_release();
  return v7 & 1;
}

uint64_t specialized static Text.== infix(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  if (a3)
  {
    if ((a7 & 1) == 0) {
      return 0;
    }
    uint64_t v14 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 96);
    outlined copy of Text.Storage(a1, a2, 1);
    outlined copy of Text.Storage(a5, a6, 1);
    LOBYTE(v14) = v14(a5);
    outlined consume of Text.Storage(a5, a6, 1);
    outlined consume of Text.Storage(a1, a2, 1);
    if ((v14 & 1) == 0) {
      return 0;
    }
  }
  else if ((a7 & 1) != 0 || (a1 != a5 || a2 != a6) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    return 0;
  }

  return specialized static Array<A>.== infix(_:_:)(a4, a8);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Text(uint64_t a1, uint64_t a2)
{
  return specialized static Text.== infix(_:_:)(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), *(void *)(a1 + 24), *(void *)a2, *(void *)(a2 + 8), *(unsigned char *)(a2 + 16), *(void *)(a2 + 24));
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Color.DisplayP3(uint64_t a1, uint64_t a2)
{
  return *(double *)a1 == *(double *)a2
      && *(double *)(a1 + 8) == *(double *)(a2 + 8)
      && *(double *)(a1 + 16) == *(double *)(a2 + 16)
      && *(float *)(a1 + 24) == *(float *)(a2 + 24);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ResolvedColorProvider(float32x4_t *a1, float32x4_t *a2)
{
  return vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_f32(*a1, *a2)), 0xFuLL))) & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> ModifiedContent<A, B>()
{
  return static ModifiedContent<>.== infix(_:_:)();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Gradient.Stop(double *a1, uint64_t a2)
{
  double v2 = a1[1];
  double v3 = *(double *)(a2 + 8);
  return (*(void *)a1 == *(void *)a2 || ((*(uint64_t (**)(void))(**(void **)a1 + 88))() & 1) != 0) && v2 == v3;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Image(uint64_t a1, void *a2)
{
  if (*(void *)a1 == *a2) {
    return 1;
  }
  else {
    return (*(uint64_t (**)(void))(**(void **)a1 + 96))() & 1;
  }
}

uint64_t ImageProviderBox.isEqual(to:)()
{
  uint64_t result = swift_dynamicCastClass();
  if (result)
  {
    swift_retain();
    char v1 = dispatch thunk of static Equatable.== infix(_:_:)();
    swift_release();
    return v1 & 1;
  }
  return result;
}

uint64_t LocalizedTextStorage.isEqual(to:)()
{
  uint64_t result = swift_dynamicCastClass();
  if (result)
  {
    double v2 = (void *)result;
    int v3 = *(unsigned __int8 *)(v0 + 32);
    uint64_t v4 = *(void *)(v0 + 40);
    int v5 = *(unsigned __int8 *)(result + 32);
    uint64_t v6 = *(void *)(result + 40);
    if (*(void *)(v0 + 16) == *(void *)(result + 16) && *(void *)(v0 + 24) == *(void *)(result + 24))
    {
      if (v3 != v5) {
        return 0;
      }
    }
    else
    {
      char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t result = 0;
      if (v8 & 1) == 0 || ((v3 ^ v5)) {
        return result;
      }
    }
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v9 = specialized static Array<A>.== infix(_:_:)(v4, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v9)
    {
      uint64_t v10 = *(void *)(v0 + 56);
      uint64_t v11 = v2[7];
      if (v10)
      {
        if (!v11
          || (*(void *)(v0 + 48) != v2[6] || v10 != v11) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          goto LABEL_21;
        }
LABEL_18:
        uint64_t v12 = *(void **)(v0 + 64);
        double v13 = (void *)v2[8];
        if (!v12)
        {
          id v17 = v13;
          swift_release();
          if (!v13) {
            return 1;
          }

          return 0;
        }
        if (v13)
        {
          type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSBundle);
          id v14 = v13;
          id v15 = v12;
          char v16 = static NSObject.== infix(_:_:)();

          swift_release();
          return v16 & 1;
        }
        goto LABEL_21;
      }
      if (!v11) {
        goto LABEL_18;
      }
    }
LABEL_21:
    swift_release();
    return 0;
  }
  return result;
}

uint64_t specialized static Image.NamedImageProvider.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  float v2 = *(float *)(a1 + 16);
  char v3 = *(unsigned char *)(a1 + 20);
  uint64_t v4 = *(void **)(a1 + 24);
  int v5 = *(void **)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 48);
  unint64_t v8 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  float v9 = *(float *)(a2 + 16);
  int v10 = *(unsigned __int8 *)(a2 + 20);
  uint64_t v11 = *(void **)(a2 + 24);
  uint64_t v12 = *(void **)(a2 + 32);
  CGRect v25 = *(void **)(a2 + 40);
  unint64_t v13 = *(void *)(a2 + 56);
  CGRect v26 = *(void **)(a2 + 48);
  int v27 = *(void **)(a2 + 64);
  uint64_t v28 = *(void **)(a1 + 40);
  int v23 = *(unsigned __int8 *)(a2 + 72);
  int v24 = *(unsigned __int8 *)(a1 + 72);
  if (*(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8)
    || (v14 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v14 & 1) != 0))
  {
    if (v3)
    {
      if (!v10) {
        return 0;
      }
    }
    else
    {
      if (v2 == v9) {
        char v16 = v10;
      }
      else {
        char v16 = 1;
      }
      if (v16) {
        return 0;
      }
    }
    char v30 = v4;
    v29[0] = v11;
    if ((specialized static Image.Location.== infix(_:_:)(&v30, v29) & 1) == 0) {
      return 0;
    }
    if (v5 == (void *)2)
    {
      if (v12 == (void *)2)
      {
LABEL_19:
        uint64_t v18 = v8;
        if (v8 >> 1 == 0xFFFFFFFF)
        {
          uint64_t v19 = v13;
          uint64_t v20 = v6;
          uint64_t v21 = (uint64_t)v28;
          if (v13 >> 1 == 0xFFFFFFFF) {
            return v24 ^ v23 ^ 1u;
          }
          goto LABEL_24;
        }
        uint64_t v21 = (uint64_t)v28;
        char v30 = v28;
        uint64_t v31 = v6;
        uint64_t v20 = v6;
        unint64_t v32 = v8;
        uint64_t v33 = v7;
        uint64_t v19 = v13;
        if (v13 >> 1 == 0xFFFFFFFF)
        {
          outlined copy of AccessibilityImageLabel((uint64_t)v28, v6, v18);
          outlined copy of AccessibilityImageLabel((uint64_t)v28, v6, v18);
          outlined consume of AccessibilityImageLabel((uint64_t)v28, v6, v18);
LABEL_24:
          outlined copy of AccessibilityImageLabel?((uint64_t)v25, (uint64_t)v26, v19);
          outlined consume of AccessibilityImageLabel?(v21, v20, v18);
          outlined consume of AccessibilityImageLabel?((uint64_t)v25, (uint64_t)v26, v19);
          return 0;
        }
        v29[0] = v25;
        v29[1] = v26;
        v29[2] = (id)v13;
        v29[3] = v27;
        outlined copy of AccessibilityImageLabel((uint64_t)v28, v6, v18);
        outlined copy of AccessibilityImageLabel((uint64_t)v28, v6, v18);
        char v22 = static AccessibilityImageLabel.== infix(_:_:)(&v30, v29);
        outlined consume of AccessibilityImageLabel((uint64_t)v30, v31, v32);
        outlined consume of AccessibilityImageLabel?((uint64_t)v28, v6, v18);
        if (v22) {
          return v24 ^ v23 ^ 1u;
        }
        return 0;
      }
    }
    else
    {
      char v30 = v5;
      if (v12 != (void *)2)
      {
        v29[0] = v12;
        outlined copy of Image.Location(v5);
        outlined copy of Image.Location(v5);
        char v17 = specialized static Image.Location.== infix(_:_:)(&v30, v29);
        outlined consume of Image.Location(v30);
        outlined consume of Image.Location?(v5);
        if ((v17 & 1) == 0) {
          return 0;
        }
        goto LABEL_19;
      }
      outlined copy of Image.Location(v5);
      outlined copy of Image.Location(v5);
      outlined consume of Image.Location(v5);
    }
    outlined copy of Image.Location?(v12);
    outlined consume of Image.Location?(v5);
    outlined consume of Image.Location?(v12);
    return 0;
  }
  return result;
}

uint64_t specialized static Image.Location.== infix(_:_:)(void **a1, id *a2)
{
  id v2 = *a1;
  id v3 = *a2;
  if (!*a1)
  {
    if (v3) {
      goto LABEL_8;
    }
    outlined consume of Image.Location(0);
    int v5 = 0;
LABEL_14:
    outlined consume of Image.Location(v5);
    char v4 = 1;
    return v4 & 1;
  }
  if (v2 == (id)1)
  {
    if (v3 == (id)1)
    {
      char v4 = 1;
      outlined consume of Image.Location((id)1);
      outlined consume of Image.Location((id)1);
      return v4 & 1;
    }
LABEL_8:
    outlined copy of Image.Location(*a2);
    outlined copy of Image.Location(v2);
    outlined consume of Image.Location(v2);
    outlined consume of Image.Location(v3);
    char v4 = 0;
    return v4 & 1;
  }
  if ((unint64_t)v3 < 2) {
    goto LABEL_8;
  }
  outlined copy of Image.Location(*a2);
  outlined copy of Image.Location(v2);
  if (v2 == v3)
  {
    outlined consume of Image.Location(v2);
    int v5 = v3;
    goto LABEL_14;
  }
  outlined copy of Image.Location(v3);
  outlined copy of Image.Location(v2);
  id v6 = objc_msgSend(v2, sel_bundlePath);
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;

  id v10 = objc_msgSend(v3, sel_bundlePath);
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;

  if (v7 == v11 && v9 == v13) {
    char v4 = 1;
  }
  else {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  outlined consume of Image.Location(v3);
  outlined consume of Image.Location(v2);
  outlined consume of Image.Location(v2);
  outlined consume of Image.Location(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4 & 1;
}

uint64_t specialized static AccessibilityImageLabel.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v9 = a2[2];
  uint64_t v8 = a2[3];
  if ((v5 & 0x8000000000000000) == 0)
  {
    if ((v9 & 0x8000000000000000) == 0)
    {
      if (v5)
      {
        if (v9)
        {
          id v10 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 96);
          outlined copy of AccessibilityImageLabel(*a2, a2[1], v9);
          outlined copy of AccessibilityImageLabel(v2, v3, v5);
          swift_bridgeObjectRetain();
          outlined copy of Text.Storage(v7, v6, 1);
          swift_bridgeObjectRetain();
          outlined copy of Text.Storage(v2, v3, 1);
          if ((v10(v7) & 1) == 0) {
            goto LABEL_26;
          }
          goto LABEL_24;
        }
      }
      else if ((v9 & 1) == 0)
      {
        if (v2 == v7 && v3 == v6)
        {
          outlined copy of AccessibilityImageLabel(*a1, v3, v9);
          outlined copy of AccessibilityImageLabel(v2, v3, v5);
          swift_bridgeObjectRetain();
          outlined copy of Text.Storage(v2, v3, 0);
          swift_bridgeObjectRetain();
          outlined copy of Text.Storage(v2, v3, 0);
        }
        else
        {
          char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
          outlined copy of AccessibilityImageLabel(v7, v6, v9);
          outlined copy of AccessibilityImageLabel(v2, v3, v5);
          swift_bridgeObjectRetain();
          outlined copy of Text.Storage(v7, v6, 0);
          swift_bridgeObjectRetain();
          outlined copy of Text.Storage(v2, v3, 0);
          if ((v14 & 1) == 0)
          {
LABEL_26:
            outlined consume of Text.Storage(v7, v6, v9 & 1);
            swift_bridgeObjectRelease();
            outlined consume of Text.Storage(v2, v3, v5 & 1);
            swift_bridgeObjectRelease();
            goto LABEL_15;
          }
        }
LABEL_24:
        char v15 = specialized static Array<A>.== infix(_:_:)(v4, v8);
        outlined consume of Text.Storage(v7, v6, v9 & 1);
        swift_bridgeObjectRelease();
        outlined consume of Text.Storage(v2, v3, v5 & 1);
        swift_bridgeObjectRelease();
        outlined consume of AccessibilityImageLabel(v2, v3, v5);
        outlined consume of AccessibilityImageLabel(v7, v6, v9);
        if (v15)
        {
          char v12 = 1;
          return v12 & 1;
        }
        goto LABEL_16;
      }
    }
LABEL_14:
    outlined copy of AccessibilityImageLabel(*a2, a2[1], v9);
    outlined copy of AccessibilityImageLabel(v2, v3, v5);
LABEL_15:
    outlined consume of AccessibilityImageLabel(v2, v3, v5);
    outlined consume of AccessibilityImageLabel(v7, v6, v9);
LABEL_16:
    char v12 = 0;
    return v12 & 1;
  }
  if ((v9 & 0x8000000000000000) == 0) {
    goto LABEL_14;
  }
  if (v2 == v7 && v3 == v6) {
    char v12 = 1;
  }
  else {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  outlined copy of AccessibilityImageLabel(v7, v6, v9);
  outlined copy of AccessibilityImageLabel(v2, v3, v5);
  outlined consume of AccessibilityImageLabel(v2, v3, v5);
  outlined consume of AccessibilityImageLabel(v7, v6, v9);
  return v12 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> _PreferenceWritingModifier<A>()
{
  return static _PreferenceWritingModifier<>.== infix(_:_:)();
}

uint64_t static _PreferenceWritingModifier<>.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t ConcatenatedTextStorage.isEqual(to:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = swift_dynamicCastClass();
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = *(void *)(v2 + 24);
  char v8 = *(unsigned char *)(v2 + 32);
  uint64_t v9 = *(void *)(v2 + 40);
  if (*(unsigned char *)(v1 + 32))
  {
    if (*(unsigned char *)(v2 + 32))
    {
      uint64_t v27 = *(void *)(v1 + 40);
      CGRect v26 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 96);
      swift_retain();
      outlined copy of Text.Storage(v6, v7, 1);
      swift_bridgeObjectRetain();
      outlined copy of Text.Storage(v4, v5, 1);
      char v10 = v26(v6);
      outlined consume of Text.Storage(v4, v5, 1);
      if (v10) {
        goto LABEL_14;
      }
      goto LABEL_12;
    }
    return 0;
  }
  if (*(unsigned char *)(v2 + 32)) {
    return 0;
  }
  uint64_t v27 = *(void *)(v1 + 40);
  if (v4 == v6 && v5 == v7)
  {
    swift_retain();
    outlined copy of Text.Storage(v4, v5, 0);
    swift_bridgeObjectRetain();
  }
  else
  {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_retain();
    outlined copy of Text.Storage(v6, v7, 0);
    swift_bridgeObjectRetain();
    if ((v12 & 1) == 0)
    {
LABEL_12:
      outlined consume of Text.Storage(v6, v7, v8);
      swift_release();
      swift_bridgeObjectRelease();
      return 0;
    }
  }
LABEL_14:
  char v13 = specialized static Array<A>.== infix(_:_:)(v27, v9);
  outlined consume of Text.Storage(v6, v7, v8);
  swift_bridgeObjectRelease();
  if ((v13 & 1) == 0) {
    goto LABEL_20;
  }
  uint64_t v14 = *(void *)(v1 + 48);
  uint64_t v15 = *(void *)(v1 + 56);
  char v16 = *(unsigned char *)(v1 + 64);
  uint64_t v17 = *(void *)(v1 + 72);
  uint64_t v18 = *(void *)(v3 + 48);
  uint64_t v19 = *(void *)(v3 + 56);
  char v20 = *(unsigned char *)(v3 + 64);
  uint64_t v21 = *(void *)(v3 + 72);
  if (v16)
  {
    if (*(unsigned char *)(v3 + 64))
    {
      char v22 = *(uint64_t (**)(uint64_t))(*(void *)v14 + 96);
      outlined copy of Text.Storage(v18, v19, 1);
      swift_bridgeObjectRetain();
      outlined copy of Text.Storage(v14, v15, 1);
      LOBYTE(v22) = v22(v18);
      outlined consume of Text.Storage(v14, v15, 1);
      if ((v22 & 1) == 0) {
        goto LABEL_27;
      }
      goto LABEL_26;
    }
    goto LABEL_20;
  }
  if (*(unsigned char *)(v3 + 64))
  {
LABEL_20:
    swift_release();
    return 0;
  }
  if (v14 == v18 && v15 == v19)
  {
    outlined copy of Text.Storage(v14, v15, 0);
    swift_bridgeObjectRetain();
  }
  else
  {
    char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
    outlined copy of Text.Storage(v18, v19, 0);
    swift_bridgeObjectRetain();
    if ((v24 & 1) == 0)
    {
LABEL_27:
      outlined consume of Text.Storage(v18, v19, v20);
      swift_release();
      swift_bridgeObjectRelease();
      return 0;
    }
  }
LABEL_26:
  char v25 = specialized static Array<A>.== infix(_:_:)(v17, v21);
  outlined consume of Text.Storage(v18, v19, v20);
  swift_release();
  swift_bridgeObjectRelease();
  return v25 & 1;
}

uint64_t AttributedStringTextStorage.isEqual(to:)()
{
  uint64_t result = swift_dynamicCastClass();
  if (result)
  {
    swift_retain();
    char v1 = static AttributedString.== infix(_:_:)();
    swift_release();
    return v1 & 1;
  }
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance _OffsetEffect(double *a1, double *a2)
{
  return a1[1] == a2[1] && *a1 == *a2;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Image.CGImageProvider(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  v5[0] = *a1;
  v5[1] = v2;
  v6[0] = a1[2];
  *(_OWORD *)((char *)v6 + 9) = *(_OWORD *)((char *)a1 + 41);
  long long v3 = a2[1];
  v7[0] = *a2;
  v7[1] = v3;
  v8[0] = a2[2];
  *(_OWORD *)((char *)v8 + 9) = *(_OWORD *)((char *)a2 + 41);
  return specialized static Image.CGImageProvider.== infix(_:_:)((uint64_t)v5, (uint64_t)v7) & 1;
}

uint64_t specialized static Image.CGImageProvider.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)a2
    || *(double *)(a1 + 8) != *(double *)(a2 + 8)
    || ((0x507030104060200uLL >> (8 * *(unsigned char *)(a1 + 16))) & 7) != ((0x507030104060200uLL >> (8 * *(unsigned char *)(a2 + 16))) & 7))
  {
    goto LABEL_2;
  }
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a2 + 48);
  if (!v6)
  {
    if (!v7) {
      goto LABEL_21;
    }
    goto LABEL_2;
  }
  if (!v7) {
    goto LABEL_2;
  }
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a2 + 24);
  uint64_t v12 = *(void *)(a2 + 32);
  uint64_t v13 = *(void *)(a2 + 40);
  if (v10)
  {
    if (v13)
    {
      uint64_t v15 = *(uint64_t (**)(uint64_t))(*(void *)v8 + 96);
      outlined copy of Text?(v8, v9, v10, v6);
      outlined copy of Text?(v8, v9, v10, v6);
      outlined copy of Text?(v11, v12, v13, v7);
      outlined copy of Text.Storage(v8, v9, 1);
      outlined copy of Text.Storage(v11, v12, 1);
      char v16 = v15(v11);
      outlined consume of Text.Storage(v11, v12, 1);
      outlined consume of Text.Storage(v8, v9, 1);
      char v14 = 1;
      goto LABEL_19;
    }
LABEL_14:
    outlined copy of Text?(*(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48));
    outlined copy of Text?(v8, v9, v10, v6);
    outlined copy of Text?(v11, v12, v13, v7);
    char v14 = (v10 & 1) == 0;
LABEL_22:
    outlined consume of Text.Storage(v11, v12, v14);
    swift_bridgeObjectRelease();
    outlined consume of Text.Storage(v8, v9, v10 & 1);
    swift_bridgeObjectRelease();
    outlined consume of Text?(v8, v9, v10, v6);
    goto LABEL_2;
  }
  if (v13) {
    goto LABEL_14;
  }
  if (v8 == v11 && v9 == v12)
  {
    outlined copy of Text?(*(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48));
    outlined copy of Text?(v8, v9, v10, v6);
    outlined copy of Text?(v8, v9, v13, v7);
    goto LABEL_20;
  }
  char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
  outlined copy of Text?(v8, v9, v10, v6);
  outlined copy of Text?(v8, v9, v10, v6);
  outlined copy of Text?(v11, v12, v13, v7);
  char v14 = 0;
LABEL_19:
  if ((v16 & 1) == 0) {
    goto LABEL_22;
  }
LABEL_20:
  char v17 = specialized static Array<A>.== infix(_:_:)(v6, v7);
  outlined consume of Text.Storage(v11, v12, v13 & 1);
  swift_bridgeObjectRelease();
  outlined consume of Text.Storage(v8, v9, v10 & 1);
  swift_bridgeObjectRelease();
  outlined consume of Text?(v8, v9, v10, v6);
  if (v17)
  {
LABEL_21:
    char v2 = ((*(unsigned char *)(a1 + 56) & 1) == 0) ^ *(unsigned char *)(a2 + 56);
    return v2 & 1;
  }
LABEL_2:
  char v2 = 0;
  return v2 & 1;
}

uint64_t specialized static Image.ResizableProvider.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double v3 = *(double *)(a1 + 8);
  double v2 = *(double *)(a1 + 16);
  double v5 = *(double *)(a1 + 24);
  double v4 = *(double *)(a1 + 32);
  int v6 = *(unsigned __int8 *)(a1 + 40);
  double v8 = *(double *)(a2 + 8);
  double v7 = *(double *)(a2 + 16);
  double v10 = *(double *)(a2 + 24);
  double v9 = *(double *)(a2 + 32);
  int v11 = *(unsigned __int8 *)(a2 + 40);
  if (*(void *)a1 == *(void *)a2)
  {
    if (v3 != v8 || v2 != v7 || v5 != v10 || v4 != v9) {
      return 0;
    }
    return v6 ^ v11 ^ 1u;
  }
  char v12 = (*(uint64_t (**)(void))(**(void **)a1 + 96))();
  uint64_t result = 0;
  if (v12)
  {
    BOOL v14 = v3 == v8 && v2 == v7;
    BOOL v15 = v14 && v5 == v10;
    if (v15 && v4 == v9) {
      return v6 ^ v11 ^ 1u;
    }
  }
  return result;
}

uint64_t outlined destroy of LocalizedStringKey.FormatArgument(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LocalizedStringKey.FormatArgument(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of LocalizedStringKey.FormatArgument(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LocalizedStringKey.FormatArgument(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t AttachmentTextStorage.isEqual(to:)()
{
  uint64_t result = swift_dynamicCastClass();
  if (result)
  {
    uint64_t v2 = *(void *)(v0 + 16);
    if (v2 == *(void *)(result + 16))
    {
      return 1;
    }
    else
    {
      double v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 96);
      swift_retain();
      uint64_t v4 = swift_retain();
      char v5 = v3(v4);
      swift_release();
      swift_release();
      return v5 & 1;
    }
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CGColorRef()
{
  swift_getWitnessTable();

  return static _CFObject.== infix(_:_:)();
}

uint64_t specialized static LocalizedStringKey.FormatArgument.Storage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v75 = a1;
  uint64_t v76 = (char *)a2;
  uint64_t v79 = *MEMORY[0x263EF8340];
  uint64_t v2 = type metadata accessor for LocalizedStringResource();
  uint64_t v73 = *(void *)(v2 - 8);
  uint64_t v74 = (uint64_t (*)(uint64_t))v2;
  MEMORY[0x270FA5388](v2);
  uint64_t v70 = (char *)&v69 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v69 = (char *)&v69 - v5;
  uint64_t v6 = type metadata accessor for AttributedString();
  uint64_t v71 = *(void *)(v6 - 8);
  uint64_t v72 = v6;
  MEMORY[0x270FA5388](v6);
  double v8 = (char *)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  int v11 = (char *)&v69 - v10;
  uint64_t v12 = type metadata accessor for LocalizedStringKey.FormatArgument.Storage(0);
  MEMORY[0x270FA5388](v12);
  BOOL v14 = (char *)&v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  char v17 = (char *)&v69 - v16;
  MEMORY[0x270FA5388](v18);
  char v20 = (char *)&v69 - v19;
  MEMORY[0x270FA5388](v21);
  int v23 = (char *)&v69 - v22;
  type metadata accessor for (LocalizedStringKey.FormatArgument.Storage, LocalizedStringKey.FormatArgument.Storage)();
  MEMORY[0x270FA5388](v24 - 8);
  CGRect v26 = (char *)&v69 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = (uint64_t)&v26[*(int *)(v27 + 56)];
  outlined init with copy of LocalizedStringKey.FormatArgument(v75, (uint64_t)v26, type metadata accessor for LocalizedStringKey.FormatArgument.Storage);
  outlined init with copy of LocalizedStringKey.FormatArgument((uint64_t)v76, v28, type metadata accessor for LocalizedStringKey.FormatArgument.Storage);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v76 = v26;
      outlined init with copy of LocalizedStringKey.FormatArgument((uint64_t)v26, (uint64_t)v20, type metadata accessor for LocalizedStringKey.FormatArgument.Storage);
      uint64_t v46 = *(void *)v20;
      uint64_t v47 = *((void *)v20 + 1);
      char v48 = v20[16];
      uint64_t v49 = *((void *)v20 + 3);
      uint64_t v50 = *((void *)v20 + 4);
      if (swift_getEnumCaseMultiPayload() != 1)
      {
        outlined consume of Text.Storage(v46, v47, v48);
        swift_bridgeObjectRelease();
        char v35 = 0;
        double v58 = (uint64_t (*)(uint64_t))type metadata accessor for (LocalizedStringKey.FormatArgument.Storage, LocalizedStringKey.FormatArgument.Storage);
        goto LABEL_36;
      }
      uint64_t v75 = v50;
      uint64_t v52 = *(void *)v28;
      uint64_t v51 = *(void *)(v28 + 8);
      char v53 = *(unsigned char *)(v28 + 16);
      uint64_t v54 = *(void *)(v28 + 24);
      uint64_t v55 = *(void *)(v28 + 32);
      if (v48)
      {
        if ((*(unsigned char *)(v28 + 16) & 1) == 0)
        {
          outlined consume of Text.Storage(*(void *)v28, *(void *)(v28 + 8), 0);
          swift_bridgeObjectRelease();
          uint64_t v63 = v46;
          uint64_t v64 = v47;
          char v65 = 1;
          goto LABEL_34;
        }
        uint64_t v74 = *(uint64_t (**)(uint64_t))(*(void *)v46 + 96);
        outlined copy of Text.Storage(v46, v47, 1);
        outlined copy of Text.Storage(v52, v51, 1);
        char v56 = v74(v52);
        outlined consume of Text.Storage(v52, v51, 1);
        outlined consume of Text.Storage(v46, v47, 1);
        if ((v56 & 1) == 0)
        {
LABEL_33:
          outlined consume of Text.Storage(v52, v51, v53);
          swift_bridgeObjectRelease();
          uint64_t v63 = v46;
          uint64_t v64 = v47;
          char v65 = v48;
LABEL_34:
          outlined consume of Text.Storage(v63, v64, v65);
          swift_bridgeObjectRelease();
          char v35 = 0;
LABEL_35:
          double v58 = type metadata accessor for LocalizedStringKey.FormatArgument.Storage;
LABEL_36:
          uint64_t v57 = v58;
          CGRect v26 = v76;
          goto LABEL_43;
        }
      }
      else
      {
        if (*(unsigned char *)(v28 + 16))
        {
          outlined consume of Text.Storage(*(void *)v28, *(void *)(v28 + 8), 1);
          swift_bridgeObjectRelease();
          uint64_t v63 = v46;
          uint64_t v64 = v47;
          char v65 = 0;
          goto LABEL_34;
        }
        BOOL v66 = v46 == v52 && v47 == v51;
        if (!v66 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          goto LABEL_33;
        }
      }
      char v67 = specialized static Array<A>.== infix(_:_:)(v49, v54);
      outlined consume of Text.Storage(v52, v51, v53);
      swift_bridgeObjectRelease();
      outlined consume of Text.Storage(v46, v47, v48);
      swift_bridgeObjectRelease();
      char v35 = v67 & (v75 == v55);
      goto LABEL_35;
    case 2u:
      outlined init with copy of LocalizedStringKey.FormatArgument((uint64_t)v26, (uint64_t)v17, type metadata accessor for LocalizedStringKey.FormatArgument.Storage);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        char v30 = v26;
        uint64_t v31 = v71;
        unint64_t v32 = *(void (**)(char *, char *, uint64_t))(v71 + 32);
        uint64_t v33 = v17;
        uint64_t v34 = v72;
        v32(v11, v33, v72);
        v32(v8, (char *)v28, v34);
        char v35 = static AttributedString.== infix(_:_:)();
        double v36 = *(void (**)(char *, uint64_t))(v31 + 8);
        v36(v8, v34);
        double v37 = v11;
        int v38 = (uint64_t (*)(void))v34;
        goto LABEL_8;
      }
      (*(void (**)(char *, uint64_t))(v71 + 8))(v17, v72);
      goto LABEL_16;
    case 3u:
      outlined init with copy of LocalizedStringKey.FormatArgument((uint64_t)v26, (uint64_t)v14, type metadata accessor for LocalizedStringKey.FormatArgument.Storage);
      if (swift_getEnumCaseMultiPayload() != 3)
      {
        (*(void (**)(char *, uint64_t (*)(uint64_t)))(v73 + 8))(v14, v74);
        goto LABEL_16;
      }
      char v30 = v26;
      uint64_t v39 = v73;
      int v40 = *(void (**)(char *, char *, uint64_t (*)(uint64_t)))(v73 + 32);
      int v41 = v69;
      char v42 = v14;
      double v43 = v74;
      v40(v69, v42, v74);
      double v44 = v70;
      v40(v70, (char *)v28, v43);
      char v35 = MEMORY[0x24C520970](v41, v44);
      double v36 = *(void (**)(char *, uint64_t))(v39 + 8);
      v36(v44, (uint64_t)v43);
      double v37 = v41;
      int v38 = v43;
LABEL_8:
      v36(v37, (uint64_t)v38);
      CGRect v26 = v30;
      double v45 = type metadata accessor for LocalizedStringKey.FormatArgument.Storage;
      goto LABEL_17;
    default:
      outlined init with copy of LocalizedStringKey.FormatArgument((uint64_t)v26, (uint64_t)v23, type metadata accessor for LocalizedStringKey.FormatArgument.Storage);
      char v29 = (void *)*((void *)v23 + 5);
      if (!swift_getEnumCaseMultiPayload())
      {
        id v59 = v26;
        id v60 = *(id *)(v28 + 40);
        outlined init with take of ScrollStateRequest((long long *)v23, (uint64_t)v78);
        outlined init with take of ScrollStateRequest((long long *)v28, (uint64_t)v77);
        type metadata accessor for ScrollStateRequest(0, (unint64_t *)&lazy cache variable for type metadata for CVarArg);
        if (AGCompareValues())
        {
          if (v29)
          {
            if (v60)
            {
              type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSFormatter);
              id v61 = v60;
              id v62 = v29;
              char v35 = static NSObject.== infix(_:_:)();

              __swift_destroy_boxed_opaque_existential_1((uint64_t)v77);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v78);

LABEL_42:
              uint64_t v57 = type metadata accessor for LocalizedStringKey.FormatArgument.Storage;
              CGRect v26 = v59;
              goto LABEL_43;
            }
            id v60 = v29;
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v77);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v78);
          }
          else
          {
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v77);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v78);
            if (!v60)
            {
              char v35 = 1;
              goto LABEL_42;
            }
          }
        }
        else
        {

          __swift_destroy_boxed_opaque_existential_1((uint64_t)v77);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v78);
        }
        char v35 = 0;
        goto LABEL_42;
      }

      __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
LABEL_16:
      char v35 = 0;
      double v45 = (uint64_t (*)(uint64_t))type metadata accessor for (LocalizedStringKey.FormatArgument.Storage, LocalizedStringKey.FormatArgument.Storage);
LABEL_17:
      uint64_t v57 = v45;
LABEL_43:
      _s7SwiftUI4TextV14ResolvedStringVWOhTm_0((uint64_t)v26, v57);
      return v35 & 1;
  }
}

void type metadata accessor for (LocalizedStringKey.FormatArgument.Storage, LocalizedStringKey.FormatArgument.Storage)()
{
  if (!lazy cache variable for type metadata for (LocalizedStringKey.FormatArgument.Storage, LocalizedStringKey.FormatArgument.Storage))
  {
    type metadata accessor for LocalizedStringKey.FormatArgument.Storage(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (LocalizedStringKey.FormatArgument.Storage, LocalizedStringKey.FormatArgument.Storage));
    }
  }
}

uint64_t GradientBox.isEqual(to:)()
{
  uint64_t result = swift_dynamicCastClass();
  if (result)
  {
    swift_retain();
    char v1 = dispatch thunk of static Equatable.== infix(_:_:)();
    swift_release();
    return v1 & 1;
  }
  return result;
}

uint64_t AccessibilityTextStorage.isEqual(to:)()
{
  uint64_t v1 = swift_dynamicCastClass();
  if (v1)
  {
    uint64_t v2 = v1;
    swift_beginAccess();
    uint64_t v3 = *(void **)(v2 + 16);
    uint64_t v4 = *(void *)(v2 + 24);
    __int16 v5 = *(unsigned __int8 *)(v2 + 32);
    if (*(unsigned char *)(v2 + 33)) {
      __int16 v6 = 256;
    }
    else {
      __int16 v6 = 0;
    }
    __int16 v7 = v6 | v5;
    outlined copy of AccessibilityText.Storage(v3, v4, v5);
  }
  else
  {
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    __int16 v7 = 255;
  }
  swift_beginAccess();
  uint64_t v9 = *(void **)(v0 + 16);
  uint64_t v8 = *(void *)(v0 + 24);
  char v10 = *(unsigned char *)(v0 + 32);
  char v11 = *(unsigned char *)(v0 + 33);
  if ((_BYTE)v7 == 0xFF)
  {
    char v12 = *(unsigned char *)(v0 + 32);
    outlined copy of AccessibilityText.Storage(v9, v8, v10);
    outlined consume of AccessibilityText?(v3, v4, 255);
    outlined consume of AccessibilityText?(v9, v8, v12);
    char v13 = 0;
  }
  else
  {
    uint64_t v18 = v3;
    uint64_t v19 = v4;
    __int16 v20 = v7;
    v15[0] = v9;
    v15[1] = v8;
    char v16 = v10;
    char v17 = v11;
    outlined copy of AccessibilityText?(v3, v4, v7);
    char v13 = specialized static AccessibilityText.== infix(_:_:)((uint64_t)&v18, (uint64_t)v15);
    outlined consume of AccessibilityText.Storage(v18, v19, v20);
    outlined consume of AccessibilityText?(v3, v4, v7);
  }
  return v13 & 1;
}

id outlined copy of AccessibilityText?(id result, uint64_t a2, char a3)
{
  if (a3 != -1) {
    return outlined copy of AccessibilityText.Storage(result, a2, a3 & 1);
  }
  return result;
}

void outlined consume of AccessibilityText?(void *a1, uint64_t a2, char a3)
{
  if (a3 != -1) {
    outlined consume of AccessibilityText.Storage(a1, a2, a3 & 1);
  }
}

uint64_t specialized static AccessibilityText.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  char v4 = *(unsigned char *)(a1 + 16);
  int v5 = *(unsigned __int8 *)(a1 + 17);
  __int16 v7 = *(void **)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  char v8 = *(unsigned char *)(a2 + 16);
  int v9 = *(unsigned __int8 *)(a2 + 17);
  if (v4)
  {
    if (*(unsigned char *)(a2 + 16))
    {
      type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
      outlined copy of AccessibilityText.Storage(v7, v6, 1);
      outlined copy of AccessibilityText.Storage(v3, v2, 1);
      outlined copy of AccessibilityText.Storage(v7, v6, 1);
      outlined copy of AccessibilityText.Storage(v3, v2, 1);
      char v10 = static NSObject.== infix(_:_:)();
      outlined consume of AccessibilityText.Storage(v3, v2, 1);
      outlined consume of AccessibilityText.Storage(v7, v6, 1);
      outlined consume of AccessibilityText.Storage(v7, v6, 1);
      outlined consume of AccessibilityText.Storage(v3, v2, 1);
      if ((v10 & 1) == 0) {
        return 0;
      }
      return v5 ^ v9 ^ 1u;
    }
LABEL_6:
    outlined copy of AccessibilityText.Storage(*(void **)a2, *(void *)(a2 + 8), v8);
    outlined copy of AccessibilityText.Storage(v3, v2, v4);
    outlined consume of AccessibilityText.Storage(v3, v2, v4);
    outlined consume of AccessibilityText.Storage(v7, v6, v8);
    return 0;
  }
  if (*(unsigned char *)(a2 + 16)) {
    goto LABEL_6;
  }
  char v12 = *(void **)a1;
  if (v3 == v7 && v2 == v6)
  {
    outlined copy of AccessibilityText.Storage(v12, v2, 0);
    outlined copy of AccessibilityText.Storage(v3, v2, 0);
    outlined consume of AccessibilityText.Storage(v3, v2, 0);
    outlined consume of AccessibilityText.Storage(v3, v2, 0);
    return v5 ^ v9 ^ 1u;
  }
  char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
  outlined copy of AccessibilityText.Storage(v7, v6, 0);
  outlined copy of AccessibilityText.Storage(v3, v2, 0);
  outlined consume of AccessibilityText.Storage(v3, v2, 0);
  outlined consume of AccessibilityText.Storage(v7, v6, 0);
  uint64_t result = 0;
  if (v14) {
    return v5 ^ v9 ^ 1u;
  }
  return result;
}

uint64_t AccessibilityTextStorage.__deallocating_deinit()
{
  outlined consume of AccessibilityText.Storage(*(void **)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));

  return swift_deallocClassInstance();
}

void outlined consume of AccessibilityText.Storage(void *a1, uint64_t a2, char a3)
{
  if (a3) {

  }
  else {
    swift_bridgeObjectRelease();
  }
}

id outlined copy of AccessibilityText.Storage(void *a1, uint64_t a2, char a3)
{
  if (a3) {
    return a1;
  }
  else {
    return (id)swift_bridgeObjectRetain();
  }
}

uint64_t AttributeInvalidatingSubscriber.__deallocating_deinit()
{
  AttributeInvalidatingSubscriber.deinit();

  return swift_deallocClassInstance();
}

uint64_t AttributeInvalidatingSubscriber.deinit()
{
  swift_weakDestroy();
  uint64_t v1 = type metadata accessor for AttributeInvalidatingSubscriber.StateType();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0 + 32, v1);
  return v0;
}

void protocol witness for Cancellable.cancel() in conformance AttributeInvalidatingSubscriber<A>()
{
}

Swift::Void __swiftcall AttributeInvalidatingSubscriber.cancel()()
{
  swift_beginAccess();
  uint64_t v1 = type metadata accessor for AttributeInvalidatingSubscriber.StateType();
  uint64_t v2 = *(void *)(v1 - 8);
  (*(void (**)(long long *, uint64_t, uint64_t))(v2 + 16))(&v3, v0 + 32, v1);
  if (v4 > 1)
  {
    outlined init with take of ScrollStateRequest(&v3, (uint64_t)&v5);
    __swift_project_boxed_opaque_existential_1(&v5, *((uint64_t *)&v6 + 1));
    dispatch thunk of Cancellable.cancel()();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v5);
  }
  else
  {
    (*(void (**)(long long *, uint64_t))(v2 + 8))(&v3, v1);
  }
  uint64_t v7 = 0;
  long long v5 = 0u;
  long long v6 = 0u;
  swift_beginAccess();
  (*(void (**)(uint64_t, long long *, uint64_t))(v2 + 40))(v0 + 32, &v5, v1);
  swift_endAccess();
}

uint64_t AttributeInvalidatingSubscriber.__allocating_init(host:attribute:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = specialized AttributeInvalidatingSubscriber.__allocating_init(host:attribute:)(a1, a2);
  swift_release();
  return v2;
}

uint64_t SubscriptionLifetime.__deallocating_deinit()
{
  SubscriptionLifetime.deinit();

  return swift_deallocClassInstance();
}

uint64_t SubscriptionLifetime.deinit()
{
  SubscriptionLifetime.cancel()();
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 104);
  uint64_t v2 = type metadata accessor for SubscriptionLifetime.StateType();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

Swift::Void __swiftcall SubscriptionLifetime.cancel()()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 80);
  uint64_t v3 = type metadata accessor for SubscriptionLifetime.StateType();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  long long v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0) + 40;
  MEMORY[0x270FA5388](v7);
  int v9 = (char *)v14 - v8 + 40;
  uint64_t v10 = (uint64_t)v0 + *(void *)(v1 + 104);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v9, v10, v3);
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    MEMORY[0x270FA5388](EnumCaseMultiPayload);
    strcpy((char *)&v13 - 48, "to subscriber subscription subscriptionID ");
    v14[0] = v2;
    v14[1] = type metadata accessor for AnyCancellable();
    _OWORD v14[2] = type metadata accessor for Subscription();
    uint64_t v15 = MEMORY[0x263F8D6C8];
    TupleTypeMetadatdouble a = swift_getTupleTypeMetadata();
    outlined init with take of ScrollStateRequest((long long *)&v9[*(int *)(TupleTypeMetadata + 64)], (uint64_t)v14);
    (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8))(v9, v2);
    AnyCancellable.cancel()();
    __swift_project_boxed_opaque_existential_1(v14, v15);
    dispatch thunk of Cancellable.cancel()();
    swift_release();
    swift_storeEnumTagMultiPayload();
    swift_beginAccess();
    (*(void (**)(uint64_t, char *, uint64_t))(v4 + 40))(v10, v6, v3);
    swift_endAccess();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
  }
}

uint64_t type metadata completion function for SubscriptionLifetime()
{
  uint64_t result = type metadata accessor for SubscriptionLifetime.StateType();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t static ObservableObject.environmentStore.getter(uint64_t a1)
{
  return swift_getKeyPath();
}

uint64_t View.environment<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  EnvironmentObjectKey.init()(a3);
  uint64_t KeyPath = (uint64_t *)swift_getKeyPath();
  uint64_t v9 = a1;
  View.environment<A>(_:_:)(KeyPath, (uint64_t)&v9, a2, a4);
  return swift_release();
}

void specialized static StateObject._makeProperty<A>(in:container:fieldOffset:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  specialized static ObservedObject._makeProperty<A>(in:container:fieldOffset:inputs:)((uint64_t)&v8, 0, a3, a4, a5);
  v7[0] = v8;
  v7[1] = v9;
  uint64_t v6 = type metadata accessor for StateObject.Box();
  _OWORD v7[2] = 0;
  float64x2_t v7[3] = 0;
  swift_getWitnessTable();
  _DynamicPropertyBuffer.append<A>(_:fieldOffset:)((uint64_t)v7, a2, v6);
}

uint64_t specialized static ObservedObject._makeProperty<A>(in:container:fieldOffset:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v28[4] = *MEMORY[0x263EF8340];
  type metadata accessor for External<()>();
  lazy protocol witness table accessor for type External<()> and conformance External<A>();
  uint64_t v8 = Attribute.init<A>(body:value:flags:update:)();
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x263F288F8])
  {
    uint64_t v9 = v8;
    id v10 = (id)AGSubgraphGetCurrent();
    if (!v10)
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    char v11 = v10;
    uint64_t v12 = a2;
    id v13 = (id)AGSubgraphGetGraph();

    uint64_t v8 = v9;
  }
  else
  {
    uint64_t v12 = a2;
    id v13 = (id)AGGraphGetAttributeGraph();
  }
  uint64_t v27 = a5;
  uint64_t Context = AGGraphGetContext();
  if (!Context) {
    __break(1u);
  }
  uint64_t v15 = Context;
  swift_retain();

  uint64_t v16 = AGCreateWeakAttribute();
  uint64_t v17 = v8;
  uint64_t v18 = specialized ObservedObjectPropertyBox.init(host:invalidation:)(v15, v16);
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  swift_release();
  v28[0] = v18;
  v28[1] = v20;
  v28[2] = v22;
  v28[3] = v24;
  uint64_t v25 = type metadata accessor for ObservedObjectPropertyBox();
  swift_getWitnessTable();
  _DynamicPropertyBuffer.append<A>(_:fieldOffset:)((uint64_t)v28, v12, v25);
  if (AGSubgraphShouldRecordTree())
  {
    type metadata accessor for ObservedObject();
    LODWORD(v28[0]) = 3;
    static DynamicProperty.addTreeValueSlow<A>(_:as:in:fieldOffset:flags:)(v17, a4, v27, v12);
  }
  swift_release();
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t type metadata accessor for ObservedObjectPropertyBox()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for StateObject.Box()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t specialized static EnvironmentObject._makeProperty<A>(in:container:fieldOffset:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  type metadata accessor for External<()>();
  lazy protocol witness table accessor for type External<()> and conformance External<A>();
  uint64_t v9 = Attribute.init<A>(body:value:flags:update:)();
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x263F288F8])
  {
    id v10 = (id)AGSubgraphGetCurrent();
    if (!v10)
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    char v11 = v10;
    id v12 = (id)AGSubgraphGetGraph();
  }
  else
  {
    id v12 = (id)AGGraphGetAttributeGraph();
  }
  uint64_t Context = AGGraphGetContext();
  if (!Context) {
    __break(1u);
  }
  uint64_t v14 = Context;
  swift_retain();

  uint64_t v15 = *(void *)(a3 + 16);
  swift_beginAccess();
  LODWORD(v15) = *(_DWORD *)(v15 + 16);
  unint64_t v16 = AGCreateWeakAttribute();
  specialized StoreBox.init(host:environment:signal:)(v14, v15, v16, (uint64_t)v20);
  swift_release();
  v19[0] = v20[0];
  v19[1] = v20[1];
  v19[2] = v20[2];
  uint64_t v17 = type metadata accessor for StoreBox();
  swift_getWitnessTable();
  _DynamicPropertyBuffer.append<A>(_:fieldOffset:)((uint64_t)v19, a2, v17);
  if (AGSubgraphShouldRecordTree())
  {
    type metadata accessor for EnvironmentObject();
    LODWORD(v19[0]) = 2;
    static DynamicProperty.addTreeValueSlow<A>(_:as:in:fieldOffset:flags:)(v9, a4, a5, a2);
  }
  return outlined release of StoreBox<A>((uint64_t)v20);
}

uint64_t outlined release of StoreBox<A>(uint64_t a1)
{
  return a1;
}

uint64_t type metadata accessor for StoreBox()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t specialized StoreBox.init(host:environment:signal:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v8 = HIDWORD(a3);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for SubscriptionLifetime();
  uint64_t v9 = SubscriptionLifetime.__allocating_init()();
  type metadata accessor for AttributeInvalidatingSubscriber();
  uint64_t result = specialized AttributeInvalidatingSubscriber.__allocating_init(host:attribute:)(a1, a3);
  *(_DWORD *)a4 = a2;
  *(_DWORD *)(a4 + 4) = a3;
  *(_DWORD *)(a4 + 8) = v8;
  *(void *)(a4 + 16) = result;
  *(void *)(a4 + 24) = v9;
  *(void *)(a4 + 32) = 0;
  *(void *)(a4 + 40) = 0;
  return result;
}

uint64_t SubscriptionLifetime.Connection.receive(subscription:)(void *a1, uint64_t a2)
{
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    if (SubscriptionLifetime.shouldAcceptSubscription(_:for:)(a1, *(void *)(v2 + *(int *)(a2 + 60))))
    {
      dispatch thunk of Subscriber.receive(subscription:)();
      __swift_project_boxed_opaque_existential_1(a1, a1[3]);
      static Subscribers.Demand.unlimited.getter();
      dispatch thunk of Subscription.request(_:)();
    }
    return swift_release();
  }
  return result;
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance AttributeInvalidatingSubscriber<A>(void *a1)
{
  return AttributeInvalidatingSubscriber.receive(subscription:)(a1);
}

uint64_t AttributeInvalidatingSubscriber.receive(subscription:)(void *a1)
{
  swift_beginAccess();
  uint64_t v3 = type metadata accessor for AttributeInvalidatingSubscriber.StateType();
  uint64_t v4 = *(void *)(v3 - 8);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v4 + 16))(v7, v1 + 32, v3);
  if (v8)
  {
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    dispatch thunk of Cancellable.cancel()();
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v7, v3);
  }
  else
  {
    outlined init with copy of AnyTrackedValue((uint64_t)a1, (uint64_t)v6);
    swift_beginAccess();
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(v4 + 40))(v1 + 32, v6, v3);
    swift_endAccess();
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    static Subscribers.Demand.unlimited.getter();
    return dispatch thunk of Subscription.request(_:)();
  }
}

uint64_t type metadata accessor for AttributeInvalidatingSubscriber.StateType()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t initializeWithCopy for AttributeInvalidatingSubscriber.StateType(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 24);
  if (v3 < 0xFFFFFFFF)
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
  }
  else
  {
    uint64_t v4 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = v3;
    *(void *)(a1 + 32) = v4;
    (**(void (***)(uint64_t))(v3 - 8))(a1);
  }
  return a1;
}

uint64_t assignWithTake for AttributeInvalidatingSubscriber.StateType(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24) >= 0xFFFFFFFFuLL) {
    __swift_destroy_boxed_opaque_existential_1(a1);
  }
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t View.environmentObject<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  EnvironmentObjectKey.init()(a3);
  v11[1] = a5;
  uint64_t KeyPath = (uint64_t *)swift_getKeyPath();
  v11[0] = a1;
  swift_unknownObjectRetain();
  View.environment<A>(_:_:)(KeyPath, (uint64_t)v11, a2, a4);
  swift_unknownObjectRelease();
  return swift_release();
}

uint64_t StoreBox.update(property:phase:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  long long v4 = v3;
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v30 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  id v10 = (char *)&v28 - v9;
  uint64_t v29 = v3[2];
  uint64_t v31 = v3[3];
  uint64_t v11 = v3[5];
  uint64_t Value = (void *)AGGraphGetValue();
  uint64_t v14 = Value[1];
  v33[1] = *Value;
  void v33[2] = v14;
  char v34 = v13 & 1;
  if (v11 && (v13 & 1) == 0)
  {
    swift_retain();
    swift_retain();
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    *a1 = v11;
    uint64_t v15 = v11;
    goto LABEL_11;
  }
  EnvironmentObjectKey.init()(v7);
  v32[0] = v7;
  v32[1] = v6;
  swift_getKeyPath();
  swift_retain();
  swift_retain();
  unint64_t v16 = (void (*)(void *, void))swift_readAtKeyPath();
  uint64_t v15 = *v17;
  swift_unknownObjectRetain();
  v16(v32, 0);
  swift_release();
  swift_unknownObjectRelease();
  *a1 = v15;
  if (!v11)
  {
    if (v15) {
      goto LABEL_11;
    }
    goto LABEL_9;
  }
  if (v15 && v11 == v15) {
LABEL_9:
  }
    char v34 = 0;
  if (!v15) {
    goto LABEL_26;
  }
LABEL_11:
  uint64_t v18 = one-time initialization token for v6;
  swift_unknownObjectRetain();
  if (v18 != -1) {
    swift_once();
  }
  unsigned int v19 = static Semantics.v6;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC != 1)
  {
    if (static Semantics.forced < v19) {
      goto LABEL_17;
    }
LABEL_19:
    BOOL v20 = 0;
    goto LABEL_20;
  }
  if (dyld_program_sdk_at_least()) {
    goto LABEL_19;
  }
LABEL_17:
  BOOL v20 = !static ObservableObject.hasDefaultPublisher.getter();
LABEL_20:
  BOOL v21 = SubscriptionLifetime.isUninitialized.getter();
  if (!v11 || v21 || v15 != v11 || v20)
  {
    v33[0] = v29;
    swift_retain();
    dispatch thunk of ObservableObject.objectWillChange.getter();
    swift_getAssociatedConformanceWitness();
    uint64_t v22 = type metadata accessor for AttributeInvalidatingSubscriber();
    uint64_t WitnessTable = swift_getWitnessTable();
    swift_getWitnessTable();
    SubscriptionLifetime.subscribe<A>(subscriber:to:)((uint64_t)v33, (uint64_t)v10, v22, WitnessTable);
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v10, AssociatedTypeWitness);
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
  }
LABEL_26:
  if (AGGraphGetWeakValue())
  {
    if (v24)
    {
      char v25 = 1;
    }
    else
    {
      char v25 = 0;
      if (v34 != 1) {
        goto LABEL_34;
      }
    }
  }
  else
  {
    char v25 = 0;
    if ((v34 & 1) == 0) {
      goto LABEL_34;
    }
  }
  ++v4[4];
LABEL_34:
  a1[1] = v4[4];
  uint64_t v26 = *a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  v4[5] = v26;
  LOBYTE(v26) = v25 | v34;
  swift_release();
  swift_release();
  return v26 & 1;
}

uint64_t Environment.init(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = a1;
  type metadata accessor for Environment.Content();

  return swift_storeEnumTagMultiPayload();
}

uint64_t specialized ObservedObjectPropertyBox.init(host:invalidation:)(uint64_t a1, uint64_t a2)
{
  return specialized AttributeInvalidatingSubscriber.__allocating_init(host:attribute:)(a1, a2);
}

uint64_t type metadata accessor for AttributeInvalidatingSubscriber()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for SubscriptionLifetime()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t SubscriptionLifetime.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  SubscriptionLifetime.init()();
  return v0;
}

uint64_t SubscriptionLifetime.init()()
{
  *(void *)(v0 + 16) = 0;
  type metadata accessor for SubscriptionLifetime.StateType();
  swift_storeEnumTagMultiPayload();
  return v0;
}

uint64_t SubscriptionLifetime.shouldAcceptSubscription(_:for:)(void *a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  uint64_t v6 = *(void *)(*v2 + 80);
  uint64_t v7 = type metadata accessor for SubscriptionLifetime.StateType();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  id v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  char v13 = (char *)&v28 - v12;
  uint64_t v14 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v15);
  char v34 = (char *)&v28 - v16;
  uint64_t v17 = (uint64_t)v2 + *(void *)(v5 + 104);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v13, v17, v7);
  if (swift_getEnumCaseMultiPayload())
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    dispatch thunk of Cancellable.cancel()();
    return 0;
  }
  uint64_t v31 = v10;
  uint64_t v29 = type metadata accessor for AnyCancellable();
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  uint64_t v33 = *(void *)&v13[*(int *)(TupleTypeMetadata3 + 48)];
  uint64_t v19 = *(void *)&v13[*(int *)(TupleTypeMetadata3 + 64)];
  uint64_t v30 = *(uint64_t (**)(char *, char *, uint64_t))(v14 + 32);
  uint64_t v20 = v30(v34, v13, v6);
  uint64_t v32 = a2;
  if (v19 != a2)
  {
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    dispatch thunk of Cancellable.cancel()();
    swift_release();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v34, v6);
    return 0;
  }
  MEMORY[0x270FA5388](v20);
  strcpy((char *)&v28 - 48, "to subscriber subscription subscriptionID ");
  uint64_t v35 = v6;
  uint64_t v36 = v29;
  unint64_t v37 = type metadata accessor for Subscription();
  uint64_t v38 = MEMORY[0x263F8D6C8];
  TupleTypeMetadatdouble a = (int *)swift_getTupleTypeMetadata();
  uint64_t v22 = TupleTypeMetadata[12];
  uint64_t v23 = v31;
  uint64_t v24 = (uint64_t)&v31[TupleTypeMetadata[16]];
  uint64_t v25 = TupleTypeMetadata[20];
  v30(v31, v34, v6);
  *(void *)&v23[v22] = v33;
  outlined init with copy of AnyTrackedValue((uint64_t)a1, v24);
  *(void *)&v23[v25] = v32;
  uint64_t v26 = 1;
  swift_storeEnumTagMultiPayload();
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 40))(v17, v23, v7);
  swift_endAccess();
  return v26;
}

unsigned __int8 *assignWithTake for SubscriptionLifetime.StateType(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  if (__dst != __src)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    uint64_t v7 = *(void *)(v6 + 64);
    unint64_t v8 = (((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v9 = v8 + 8;
    unint64_t v10 = ((v8 + 47) & 0xFFFFFFFFFFFFFFF8) + 8;
    if (v10 <= v9) {
      unint64_t v11 = v9;
    }
    else {
      unint64_t v11 = v10;
    }
    unsigned int v12 = __dst[v11];
    if (v12 >= 2 && (v11 & 0xFFFFFFF8) != 0) {
      unsigned int v12 = *(_DWORD *)__dst + 2;
    }
    if (v12 == 1)
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(__dst, v5);
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((((unint64_t)&__dst[v7 + 7] & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
    }
    else if (!v12)
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(__dst, v5);
      swift_release();
    }
    unsigned int v14 = __src[v11];
    if ((v11 & 0xFFFFFFF8) != 0 && v14 >= 2) {
      unsigned int v14 = *(_DWORD *)__src + 2;
    }
    if (v14 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(__dst, __src, v5);
      uint64_t v18 = (void *)((unint64_t)&__dst[v7 + 7] & 0xFFFFFFFFFFFFFFF8);
      uint64_t v19 = (void *)((unint64_t)&__src[v7 + 7] & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v18 = *v19;
      unint64_t v20 = ((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v21 = ((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8;
      long long v23 = *(_OWORD *)v21;
      long long v22 = *(_OWORD *)(v21 + 16);
      *(void *)(v20 + 32) = *(void *)(v21 + 32);
      *(_OWORD *)unint64_t v20 = v23;
      *(_OWORD *)(v20 + 16) = v22;
      *(void *)((v20 + 47) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v21 + 47) & 0xFFFFFFFFFFFFFFF8);
      __dst[v11] = 1;
    }
    else if (v14)
    {
      memcpy(__dst, __src, v11 | 1);
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(__dst, __src, v5);
      uint64_t v16 = (void *)((unint64_t)&__dst[v7 + 7] & 0xFFFFFFFFFFFFFFF8);
      uint64_t v17 = (void *)((unint64_t)&__src[v7 + 7] & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v16 = *v17;
      *(void *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
      __dst[v11] = 0;
    }
  }
  return __dst;
}

unint64_t type metadata accessor for Subscription()
{
  unint64_t result = lazy cache variable for type metadata for Subscription;
  if (!lazy cache variable for type metadata for Subscription)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for Subscription);
  }
  return result;
}

uint64_t SubscriptionLifetime.subscribe<A>(subscriber:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v61 = a1;
  uint64_t v62 = a4;
  uint64_t v66 = a2;
  uint64_t v73 = *MEMORY[0x263EF8340];
  uint64_t v6 = *v4;
  uint64_t v55 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  unint64_t v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v6 + 88);
  v71[0] = *(void *)(v6 + 80);
  uint64_t v9 = v71[0];
  v71[1] = v11;
  uint64_t v60 = v11;
  v71[2] = v10;
  uint64_t v72 = v12;
  uint64_t v58 = v12;
  uint64_t v13 = type metadata accessor for SubscriptionLifetime.Connection();
  uint64_t v63 = *(void *)(v13 - 8);
  uint64_t v64 = v13;
  MEMORY[0x270FA5388](v13);
  uint64_t v65 = (uint64_t)&v52 - v14;
  uint64_t v15 = type metadata accessor for SubscriptionLifetime.StateType();
  MEMORY[0x270FA5388](v15);
  uint64_t v57 = (char *)&v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v52 - v18;
  uint64_t v20 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v21);
  long long v23 = (char *)&v52 - v22;
  uint64_t v24 = v6;
  uint64_t v26 = v25;
  uint64_t v27 = (char *)v5 + *(void *)(v24 + 104);
  swift_beginAccess();
  uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v26 + 16);
  char v56 = v27;
  v28(v19, v27, v15);
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v59 = v26;
  if (EnumCaseMultiPayload == 1)
  {
    MEMORY[0x270FA5388](EnumCaseMultiPayload);
    strcpy((char *)&v52 - 48, "to subscriber subscription subscriptionID ");
    uint64_t v67 = v9;
    uint64_t v68 = type metadata accessor for AnyCancellable();
    unint64_t v69 = type metadata accessor for Subscription();
    uint64_t v70 = MEMORY[0x263F8D6C8];
    uint64_t v30 = (long long *)&v19[*(int *)(swift_getTupleTypeMetadata() + 64)];
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v23, v19, v9);
    uint64_t v31 = outlined init with take of ScrollStateRequest(v30, (uint64_t)v71);
    MEMORY[0x270FA5388](v31);
    uint64_t v32 = v66;
    *(&v52 - 4) = v9;
    *(&v52 - 3) = v32;
    *((_DWORD *)&v52 - 4) = 3;
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v23, (uint64_t)partial apply for closure #1 in compareValues<A>(_:_:options:), (uint64_t)(&v52 - 6), v9, MEMORY[0x263F8E628], MEMORY[0x263F8D4F8], MEMORY[0x263F8E658], v33);
    if (v67 == 1)
    {
      (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v9);
      swift_release();
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v71);
    }
    uint64_t v54 = v10;
    AnyCancellable.cancel()();
    __swift_project_boxed_opaque_existential_1(v71, v72);
    dispatch thunk of Cancellable.cancel()();
    swift_release();
    uint64_t v53 = v20;
    uint64_t v38 = *(void (**)(char *, uint64_t))(v20 + 8);
    uint64_t v52 = v15;
    uint64_t v36 = v9;
    v38(v23, v9);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v71);
  }
  else
  {
    uint64_t v53 = v20;
    uint64_t v35 = v15;
    uint64_t v36 = v9;
    uint64_t v54 = v10;
    unint64_t v37 = *(void (**)(char *))(v26 + 8);
    uint64_t v52 = v35;
    v37(v19);
  }
  uint64_t v39 = v5[2];
  _OWORD v5[2] = v39 + 1;
  uint64_t v55 = *(void *)(v55 + 16);
  int v40 = v8;
  uint64_t v42 = v60;
  uint64_t v41 = v61;
  ((void (*)(char *, uint64_t, uint64_t))v55)(v8, v61, v60);
  swift_retain();
  SubscriptionLifetime.Connection.init(parent:downstream:subscriptionID:)((uint64_t)v8, v39, v42, v65);
  type metadata accessor for AnyCancellable();
  uint64_t v43 = v36;
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  uint64_t v45 = *(int *)(TupleTypeMetadata3 + 48);
  uint64_t v46 = *(int *)(TupleTypeMetadata3 + 64);
  uint64_t v47 = v57;
  (*(void (**)(char *, uint64_t, uint64_t))(v53 + 16))(v57, v66, v43);
  ((void (*)(char *, uint64_t, uint64_t))v55)(v40, v41, v42);
  *(void *)&v47[v45] = AnyCancellable.__allocating_init<A>(_:)();
  *(void *)&v47[v46] = v39;
  uint64_t v48 = v52;
  swift_storeEnumTagMultiPayload();
  uint64_t v49 = v56;
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v59 + 40))(v49, v47, v48);
  swift_endAccess();
  uint64_t v50 = v64;
  swift_getWitnessTable();
  uint64_t v51 = v65;
  Publisher.subscribe<A>(_:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v63 + 8))(v51, v50);
}

uint64_t type metadata accessor for SubscriptionLifetime.Connection()
{
  return swift_getGenericMetadata();
}

BOOL SubscriptionLifetime.isUninitialized.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = type metadata accessor for SubscriptionLifetime.StateType();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v9 - v4;
  uint64_t v6 = (char *)v0 + *(void *)(v1 + 104);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, v6, v2);
  BOOL v7 = swift_getEnumCaseMultiPayload() == 2;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v7;
}

uint64_t type metadata accessor for SubscriptionLifetime.StateType()
{
  return __swift_instantiateGenericMetadata();
}

unsigned char *initializeWithCopy for SubscriptionLifetime.StateType(unsigned char *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  unint64_t v7 = (((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = v7 + 8;
  unint64_t v9 = ((v7 + 47) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v9 <= v8) {
    unint64_t v10 = v8;
  }
  else {
    unint64_t v10 = v9;
  }
  unsigned int v11 = __src[v10];
  if (v11 >= 2 && (v10 & 0xFFFFFFF8) != 0) {
    unsigned int v11 = *(_DWORD *)__src + 2;
  }
  if (v11 == 1)
  {
    (*(void (**)(unsigned char *, unsigned __int8 *))(v5 + 16))(__dst, __src);
    uint64_t v15 = (void *)((unint64_t)&__dst[v6 + 7] & 0xFFFFFFFFFFFFFFF8);
    uint64_t v16 = (void *)((unint64_t)&__src[v6 + 7] & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v15 = *v16;
    unint64_t v17 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v18 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v19 = *(void *)(v18 + 24);
    *(void *)(v17 + 24) = v19;
    *(void *)(v17 + 32) = *(void *)(v18 + 32);
    uint64_t v20 = **(void (***)(unint64_t, unint64_t, uint64_t))(v19 - 8);
    swift_retain();
    v20(v17, v18, v19);
    *(void *)((v17 + 47) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v18 + 47) & 0xFFFFFFFFFFFFFFF8);
    __dst[v10] = 1;
  }
  else if (v11)
  {
    memcpy(__dst, __src, v10 | 1);
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned __int8 *))(v5 + 16))(__dst, __src);
    uint64_t v13 = (void *)((unint64_t)&__dst[v6 + 7] & 0xFFFFFFFFFFFFFFF8);
    uint64_t v14 = (void *)((unint64_t)&__src[v6 + 7] & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v13 = *v14;
    *(void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
    __dst[v10] = 0;
    swift_retain();
  }
  return __dst;
}

_DWORD *destroy for SubscriptionLifetime.StateType(_DWORD *result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  unint64_t v5 = (((v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = v5 + 8;
  unint64_t v7 = ((v5 + 47) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v7 <= v6) {
    unint64_t v7 = v6;
  }
  uint64_t v8 = v7 & 0xFFFFFFF8;
  unsigned int v9 = *((unsigned __int8 *)result + v7);
  if (v9 >= 2 && v8 != 0) {
    unsigned int v9 = *result + 2;
  }
  if (v9 == 1)
  {
    (*(void (**)(_DWORD *))(v3 + 8))(result);
    swift_release();
    return (_DWORD *)__swift_destroy_boxed_opaque_existential_1(((((unint64_t)v2 + v4 + 7) & 0xFFFFFFFFFFFFFFF8)
                                                               + 15) & 0xFFFFFFFFFFFFFFF8);
  }
  else if (!v9)
  {
    (*(void (**)(_DWORD *))(v3 + 8))(result);
    return (_DWORD *)swift_release();
  }
  return result;
}

uint64_t destroy for SubscriptionLifetime.Connection(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CombineIdentifier();
  uint64_t v5 = *(void *)(v4 - 8) + 8;
  (*(void (**)(uint64_t, uint64_t))v5)(a1, v4);
  unint64_t v6 = (a1 + *(void *)(v5 + 56) + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_weakDestroy();
  uint64_t v7 = *(void *)(*(void *)(a2 + 24) - 8);
  uint64_t v8 = *(uint64_t (**)(unint64_t))(v7 + 8);
  unint64_t v9 = (v6 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);

  return v8(v9);
}

uint64_t SubscriptionLifetime.Connection.init(parent:downstream:subscriptionID:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  CombineIdentifier.init()();
  uint64_t v8 = type metadata accessor for SubscriptionLifetime.Connection();
  swift_weakInit();
  swift_weakAssign();
  swift_release();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a4 + *(int *)(v8 + 56), a1, a3);
  *(void *)(a4 + *(int *)(v8 + 60)) = a2;
  return result;
}

uint64_t specialized AttributeInvalidatingSubscriber.__allocating_init(host:attribute:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = swift_allocObject();
  swift_weakInit();
  *(void *)(v3 + 64) = 0;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  swift_weakAssign();
  *(void *)(v3 + 24) = a2;
  return v3;
}

ValueMetadata *type metadata accessor for GestureContainerFeature()
{
  return &type metadata for GestureContainerFeature;
}

ValueMetadata *type metadata accessor for SubviewsCollection()
{
  return &type metadata for SubviewsCollection;
}

uint64_t base witness table accessor for _AttributeBody in PreferenceTransform<A>()
{
  return swift_getWitnessTable();
}

CGColorSpaceRef one-time initialization function for srgb(uint64_t a1, CFStringRef *a2, CGColorSpaceRef *a3)
{
  CGColorSpaceRef result = CGColorSpaceCreateWithName(*a2);
  if (result) {
    *a3 = result;
  }
  else {
    __break(1u);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ScrollGeometryState(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 124)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

double ViewSize.height.getter()
{
  return *(double *)(v0 + 8);
}

uint64_t destroy for InterpolatedDisplayList(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 11;
  swift_release();
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(v4 - 8);
  unint64_t v5 = ((((((((((((((((((((((v3 & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL)
                    + 7) & 0xFFFFFFFFFFFFFFFCLL)
                  + 7) & 0xFFFFFFFFFFFFFFFCLL)
                + 7) & 0xFFFFFFFFFFFFFFFCLL)
              + 7) & 0xFFFFFFFFFFFFFFFCLL)
            + 7) & 0xFFFFFFFFFFFFFFFCLL)
          + 7) & 0xFFFFFFFFFFFFFFFCLL)
        + 7) & 0xFFFFFFFFFFFFFFFCLL)
      + *(unsigned __int8 *)(v8 + 80)
      + 7) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))(v5, 1, v4);
  if (!result)
  {
    uint64_t v7 = *(uint64_t (**)(unint64_t, uint64_t))(v8 + 8);
    return v7(v5, v4);
  }
  return result;
}

void *initializeWithCopy for InterpolatedDisplayList(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  unint64_t v4 = (unint64_t)a2 + 11;
  *a1 = v5;
  unint64_t v6 = (_DWORD *)(((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFFCLL);
  *unint64_t v6 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v7 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v8 = (_DWORD *)(((v4 & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v7 = *v8;
  unint64_t v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v10 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *unint64_t v9 = *v10;
  unsigned int v11 = (_DWORD *)(((unint64_t)v9 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v12 = (_DWORD *)(((unint64_t)v10 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *unsigned int v11 = *v12;
  uint64_t v13 = (_DWORD *)(((unint64_t)v11 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v14 = (_DWORD *)(((unint64_t)v12 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v13 = *v14;
  uint64_t v15 = (_DWORD *)(((unint64_t)v13 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v16 = (_DWORD *)(((unint64_t)v14 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v15 = *v16;
  unint64_t v17 = (_DWORD *)(((unint64_t)v15 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v18 = (_DWORD *)(((unint64_t)v16 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *unint64_t v17 = *v18;
  uint64_t v19 = (_DWORD *)(((unint64_t)v17 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v20 = (_DWORD *)(((unint64_t)v18 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v19 = *v20;
  uint64_t v21 = (_DWORD *)(((unint64_t)v19 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v22 = (_DWORD *)(((unint64_t)v20 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v21 = *v22;
  long long v23 = (_DWORD *)(((unint64_t)v21 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v24 = (_DWORD *)(((unint64_t)v22 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *long long v23 = *v24;
  unint64_t v25 = ((unint64_t)v23 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v26 = ((unint64_t)v24 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)unint64_t v25 = *(_DWORD *)v26;
  *(unsigned char *)(v25 + 4) = *(unsigned char *)(v26 + 4);
  *(unsigned char *)(v25 + 5) = *(unsigned char *)(v26 + 5);
  *(unsigned char *)(v25 + 6) = *(unsigned char *)(v26 + 6);
  uint64_t v27 = *(void *)(a3 + 16);
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = *(unsigned __int8 *)(v28 + 80);
  uint64_t v30 = (void *)((v29 + 7 + v25) & ~v29);
  uint64_t v31 = (const void *)((v29 + 7 + v26) & ~v29);
  uint64_t v32 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v28 + 48);
  swift_retain();
  if (v32(v31, 1, v27))
  {
    int v33 = *(_DWORD *)(v28 + 84);
    size_t v34 = *(void *)(v28 + 64);
    if (v33) {
      size_t v35 = v34;
    }
    else {
      size_t v35 = v34 + 1;
    }
    memcpy(v30, v31, v35);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v28 + 16))(v30, v31, v27);
    unint64_t v37 = *(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56);
    uint64_t v36 = v28 + 56;
    v37(v30, 0, 1, v27);
    int v33 = *(_DWORD *)(v36 + 28);
    size_t v34 = *(void *)(v36 + 8);
  }
  if (v33) {
    size_t v38 = v34;
  }
  else {
    size_t v38 = v34 + 1;
  }
  uint64_t v39 = (_OWORD *)(((unint64_t)v30 + v38 + 7) & 0xFFFFFFFFFFFFFFF8);
  int v40 = (_OWORD *)(((unint64_t)v31 + v38 + 7) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v39 = *v40;
  uint64_t v41 = (_DWORD *)(((unint64_t)v39 + 19) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v42 = (_DWORD *)(((unint64_t)v40 + 19) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v41 = *v42;
  *(void *)(((unint64_t)v41 + 11) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v42 + 11) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for Image.Resolved(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 179)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *(void *)(a1 + 120) >> 1;
  int v4 = -2 - v3;
  if (-2 - (int)v3 < 0) {
    int v4 = -1;
  }
  if (v3 <= 0x80000000) {
    int v5 = -1;
  }
  else {
    int v5 = v4;
  }
  return (v5 + 1);
}

uint64_t ViewModifier.requiring<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  double v7 = MEMORY[0x270FA5388](a1);
  unint64_t v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v9, v3, a2, v7);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 32))(a3, v9, a2);
}

{
  uint64_t v3;
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  uint64_t v6 = *(void *)(a2 - 8);
  double v7 = MEMORY[0x270FA5388](a1);
  unint64_t v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v9, v3, a2, v7);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 32))(a3, v9, a2);
}

uint64_t initializeWithTake for ContentPathObservers.Observer(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_unknownObjectWeakTakeInit();
  *(void *)(result + 8) = *(void *)(a2 + 8);
  return result;
}

uint64_t type metadata accessor for BothFeatures()
{
  return swift_getGenericMetadata();
}

uint64_t static _EnvironmentKeyTransformModifier._makeInputs(modifier:inputs:)(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v6 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)v21 - v7;
  uint64_t v9 = type metadata accessor for ChildEnvironment();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (_DWORD *)((char *)v21 - v11);
  LODWORD(a1) = *a1;
  uint64_t v13 = *(void *)(a2 + 16);
  swift_beginAccess();
  LODWORD(v13) = *(_DWORD *)(v13 + 16);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56))(v8, 1, 1, a3);
  ChildEnvironment.init(modifier:environment:oldValue:oldKeyPath:)((int)a1, v13, (uint64_t)v8, 0, v12);
  uint64_t v23 = v9;
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<HoverEffectContext>(0, &lazy cache variable for type metadata for Attribute<EnvironmentValues>, (uint64_t)&type metadata for EnvironmentValues, MEMORY[0x263F28898]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v12, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_2, (uint64_t)v22, v9, MEMORY[0x263F8E628], v14, MEMORY[0x263F8E658], v15);
  (*(void (**)(_DWORD *, uint64_t))(v10 + 8))(v12, v9);
  LODWORD(a1) = v21[3];
  uint64_t v16 = MEMORY[0x263F8EE78];
  unint64_t v17 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  type metadata accessor for Attribute<HoverEffectContext>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(void, uint64_t))type metadata accessor for MutableBox);
  uint64_t v18 = swift_allocObject();
  *(_DWORD *)(v18 + 16) = a1;
  *(void *)(v18 + 24) = v16;
  *(_OWORD *)(v18 + 32) = 0u;
  *(_OWORD *)(v18 + 48) = 0u;
  *(_OWORD *)(v18 + 64) = 0u;
  *(_WORD *)(v18 + 80) = 256;
  *(void *)(v18 + 88) = v17;
  uint64_t result = swift_release();
  *(void *)(a2 + 16) = v18;
  int v20 = *(_DWORD *)(a2 + 32);
  if ((v20 & 0x20) == 0) {
    *(_DWORD *)(a2 + 32) = v20 | 0x20;
  }
  return result;
}

uint64_t ChildEnvironment.init(modifier:environment:oldValue:oldKeyPath:)@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _DWORD *a5@<X8>)
{
  *a5 = a1;
  a5[1] = a2;
  uint64_t v8 = type metadata accessor for ChildEnvironment();
  uint64_t v9 = (char *)a5 + *(int *)(v8 + 32);
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v9, a3, v10);
  *(void *)((char *)a5 + *(int *)(v8 + 36)) = a4;
  return result;
}

unsigned char *storeEnumTagSinglePayload for Text.Case(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for TypesettingLanguage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_245DE5B98);
}

uint64_t storeEnumTagSinglePayload for TypesettingLanguage.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_245DE6374);
}

uint64_t getEnumTagSinglePayload for SymbolVariants(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 65283 <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if (a2 + 65283 < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 65283;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 16)) - 65283;
    }
    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((unsigned char *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 65283;
    }
  }
LABEL_17:
  if (*((unsigned __int8 *)a1 + 1) <= 3u) {
    int v6 = 3;
  }
  else {
    int v6 = *((unsigned __int8 *)a1 + 1);
  }
  int v7 = v6 - 4;
  if (*((unsigned __int8 *)a1 + 1) < 3u) {
    int v8 = -1;
  }
  else {
    int v8 = v7;
  }
  return (v8 + 1);
}

uint64_t getEnumTagSinglePayload for Cluster #1 in static Text.Effect.stopMarkers(_:)(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 25)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t PreferenceKeys.remove(_:)(uint64_t result)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 16);
  if (v2)
  {
    unint64_t v3 = 0;
    for (i = (void *)(*(void *)v1 + 32); *i != result; i += 2)
    {
      if (v2 == ++v3) {
        return result;
      }
    }
    return specialized Array.remove(at:)(v3);
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _SafeAreaRegionsIgnoringLayout(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance IgnoresAutomaticPaddingLayout(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static UnaryLayout<>.makeViewImpl(modifier:inputs:body:));
}

uint64_t EnvironmentValues.accessibilityEnabled.getter()
{
  return EnvironmentValues.accessibilityEnabled.getter(specialized PropertyList.Tracker.value<A>(_:for:), (uint64_t (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter);
}

uint64_t EnvironmentValues.isLuminanceReduced.getter()
{
  uint64_t v1 = *v0;
  if (v0[1])
  {
    swift_retain_n();
    swift_retain_n();
    char v2 = specialized PropertyList.Tracker.value<A>(_:for:)(v1);
    swift_release_n();
    swift_release_n();
    return v2 & 1;
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    char v5 = specialized closure #1 in PropertyList.subscript.getter(v4);
    swift_release_n();
    return v5 & 1;
  }
}

uint64_t EnvironmentValues.isLuminanceReduced.setter(char a1)
{
  uint64_t v3 = *v1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, a1);
  swift_release();
  if (v1[1])
  {
    uint64_t v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<ReducedLuminanceKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<ReducedLuminanceKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<ReducedLuminanceKey>, (uint64_t)&type metadata for ReducedLuminanceKey, (uint64_t)&protocol witness table for ReducedLuminanceKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ReducedLuminanceKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<ReducedLuminanceKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<ReducedLuminanceKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<ReducedLuminanceKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<ReducedLuminanceKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<ReducedLuminanceKey>, (uint64_t)&type metadata for ReducedLuminanceKey, (uint64_t)&protocol witness table for ReducedLuminanceKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ReducedLuminanceKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

double _DefaultForegroundStyleModifier.DefaultForegroundStyleEnvironment.value.getter@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  uint64_t v19 = a3;
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  int v8 = (char *)&v18 - v7;
  uint64_t v9 = type metadata accessor for _DefaultForegroundStyleModifier();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v18 - v11;
  MaterialView.ChildEnvironment.environment.getter(&v25);
  _DefaultForegroundStyleModifier.DefaultForegroundStyleEnvironment.modifier.getter((uint64_t (*)(void))type metadata accessor for _DefaultForegroundStyleModifier, (uint64_t)v12);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v12, v5);
  uint64_t v21 = a1;
  uint64_t v22 = a2;
  uint64_t v23 = &v25;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in _DefaultForegroundStyleModifier.DefaultForegroundStyleEnvironment.value.getter, (uint64_t)v20, MEMORY[0x263F8E628], (uint64_t)&type metadata for AnyShapeStyle, v13, (uint64_t)&v24);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  uint64_t v15 = v24;
  uint64_t v14 = v25;
  swift_retain();
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v25, v15);
  swift_release();
  swift_release();
  if (*((void *)&v25 + 1))
  {
    uint64_t v16 = v25;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v14, v16);
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  double result = *(double *)&v25;
  *uint64_t v19 = v25;
  return result;
}

uint64_t type metadata accessor for _DefaultForegroundStyleModifier()
{
  return __swift_instantiateGenericMetadata();
}

void static AccessibilityTraits.isImage.getter(void *a1@<X8>)
{
  *a1 = 32;
}

ValueMetadata *type metadata accessor for ScrollViewStyleContext()
{
  return &type metadata for ScrollViewStyleContext;
}

double static HitTestBindingModifier._makeView(modifier:inputs:body:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)a2;
  int v5 = *(_DWORD *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  int v7 = *(_DWORD *)(a2 + 24);
  int v8 = *(_DWORD *)(a2 + 28);
  int v10 = *(_DWORD *)(a2 + 32);
  int v9 = *(_DWORD *)(a2 + 36);
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v11 = *(void *)(a2 + 48);
  int v13 = *(_DWORD *)(a2 + 56);
  int v14 = *(_DWORD *)(a2 + 60);
  int v15 = *(_DWORD *)(a2 + 64);
  int v16 = *(_DWORD *)(a2 + 68);
  int v17 = *(_DWORD *)(a2 + 72);
  int v18 = *(_DWORD *)(a2 + 76);
  int v19 = *(_DWORD *)(a2 + 80);
  uint64_t v36 = *(void *)a2;
  LODWORD(v37) = v5;
  uint64_t v38 = v6;
  int v39 = v7;
  int v40 = v8;
  int v41 = v10;
  int v42 = v9;
  uint64_t v43 = v12;
  uint64_t v44 = v11;
  int v31 = v14;
  int v32 = v13;
  int v45 = v13;
  int v46 = v14;
  int v29 = v16;
  int v30 = v15;
  int v47 = v15;
  int v48 = v16;
  int v27 = v18;
  int v28 = v17;
  int v49 = v17;
  int v50 = v18;
  int v26 = v19;
  int v51 = v19;
  a3(&v34, a1, &v36);
  uint64_t v20 = *(void *)(v11 + 16);
  if (v20)
  {
    uint64_t v21 = 32;
    while (*(ValueMetadata **)(v11 + v21) != &type metadata for ViewRespondersKey)
    {
      v21 += 16;
      if (!--v20) {
        goto LABEL_7;
      }
    }
    uint64_t v36 = v34;
    double v37 = v35;
    int v25 = _ViewOutputs.viewResponders()();
    type metadata accessor for HitTestBindingResponder();
    swift_allocObject();
    uint64_t v36 = v4;
    LODWORD(v37) = v5;
    uint64_t v38 = v6;
    int v39 = v7;
    int v40 = v8;
    int v41 = v10;
    int v42 = v9;
    uint64_t v43 = v12;
    uint64_t v44 = v11;
    int v45 = v32;
    int v46 = v31;
    int v47 = v30;
    int v48 = v29;
    int v49 = v28;
    int v50 = v27;
    int v51 = v26;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v22 = DefaultLayoutViewResponder.init(inputs:)(&v36);
    LODWORD(v36) = v25;
    double v37 = *(double *)&v22;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    _sSay7SwiftUI13ViewResponderCGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], (uint64_t (*)(uint64_t))type metadata accessor for ViewResponder, MEMORY[0x263F8D488]);
    lazy protocol witness table accessor for type HitTestBindingFilter and conformance HitTestBindingFilter();
    unsigned int v23 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    LOBYTE(v36) = 0;
    PreferencesOutputs.subscript.setter(v23, &type metadata for ViewRespondersKey, (uint64_t)&protocol witness table for ViewRespondersKey);
  }
LABEL_7:
  *a4 = v34;
  double result = v35;
  *((double *)a4 + 1) = v35;
  return result;
}

uint64_t _ViewOutputs.viewResponders()()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  if (v1)
  {
    char v2 = (ValueMetadata **)(*(void *)v0 + 48);
    while (*(v2 - 2) != &type metadata for ViewRespondersKey)
    {
      v2 += 3;
      if (!--v1) {
        goto LABEL_5;
      }
    }
    return *(unsigned int *)v2;
  }
  else
  {
LABEL_5:
    specialized static ViewGraph.current.getter();
    type metadata accessor for [ViewResponder](0);
    uint64_t v4 = specialized GraphHost.intern<A>(_:for:id:)(MEMORY[0x263F8EE78], v3, 0);
    swift_release();
    return v4;
  }
}

uint64_t type metadata accessor for HitTestBindingResponder()
{
  return self;
}

unint64_t lazy protocol witness table accessor for type HitTestBindingFilter and conformance HitTestBindingFilter()
{
  unint64_t result = lazy protocol witness table cache variable for type HitTestBindingFilter and conformance HitTestBindingFilter;
  if (!lazy protocol witness table cache variable for type HitTestBindingFilter and conformance HitTestBindingFilter)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HitTestBindingFilter and conformance HitTestBindingFilter);
  }
  return result;
}

uint64_t AccessibilityImageLabel.SystemSymbolTextStorage.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t base witness table accessor for _AttributeBody in ShapeStyleResolver<A>()
{
  return swift_getWitnessTable();
}

uint64_t View.aspectRatio(_:contentMode:)(uint64_t a1, char a2, char a3, uint64_t a4)
{
  uint64_t v5 = a1;
  char v6 = a2 & 1;
  char v7 = a3 & 1;
  return View.modifier<A>(_:)(&v5, a4, &type metadata for _AspectRatioLayout);
}

ValueMetadata *type metadata accessor for Gradient()
{
  return &type metadata for Gradient;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _BackgroundPreferenceModifier<A, B>@<X0>(uint64_t a1@<X1>, void (*a2)(unint64_t *__return_ptr, uint64_t, unint64_t *)@<X2>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  return static _BackgroundPreferenceModifier._makeView(modifier:inputs:body:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), *(void *)(a3 + 32), *(void *)(a3 + 40), a4);
}

uint64_t _ForegroundStyleModifier2.ForegroundStyleEnvironment.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v35 = a5;
  int v40 = a6;
  uint64_t v41 = a1;
  uint64_t v39 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v38 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v13);
  int v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = v16;
  uint64_t v44 = v17;
  uint64_t v45 = v18;
  uint64_t v46 = v19;
  uint64_t v20 = type metadata accessor for _ForegroundStyleModifier2();
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  unsigned int v23 = (char *)&v35 - v22;
  MaterialView.ChildEnvironment.environment.getter(a6);
  _ForegroundStyleModifier2.ForegroundStyleEnvironment.modifier.getter((uint64_t)v23);
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v23, a2);
  uint64_t v36 = *(void (**)(char *, uint64_t))(v21 + 8);
  v36(v23, v20);
  uint64_t v24 = v40[1];
  uint64_t v43 = *v40;
  uint64_t v44 = v24;
  default argument 0 of ShapeStyle.copyStyle(name:in:foregroundStyle:)(&v42);
  swift_retain();
  swift_retain();
  uint64_t v37 = ShapeStyle.copyStyle(name:in:foregroundStyle:)((uint64_t)&v42, (uint64_t)&v43, 0, a2, a4);
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, a2);
  uint64_t v25 = v35;
  _ForegroundStyleModifier2.ForegroundStyleEnvironment.modifier.getter((uint64_t)v23);
  int v27 = v38;
  uint64_t v26 = v39;
  (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v38, &v23[*(int *)(v20 + 52)], a3);
  v36(v23, v20);
  int v28 = v40;
  uint64_t v30 = *v40;
  uint64_t v29 = v40[1];
  uint64_t v43 = *v40;
  uint64_t v44 = v29;
  default argument 0 of ShapeStyle.copyStyle(name:in:foregroundStyle:)(&v42);
  swift_retain();
  swift_retain();
  uint64_t v31 = ShapeStyle.copyStyle(name:in:foregroundStyle:)((uint64_t)&v42, (uint64_t)&v43, 0, a3, v25);
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v27, a3);
  _s7SwiftUI13ShapeStyleBox33_C5308685324599C90E2F7A588812BB29LLCyAA0cD4PairVyAA03AnycD0VAHGGMaTm_0(0, &lazy cache variable for type metadata for ShapeStyleBox<ShapeStylePair<AnyShapeStyle, AnyShapeStyle>>, (void (*)(uint64_t))type metadata accessor for ShapeStylePair<AnyShapeStyle, AnyShapeStyle>);
  uint64_t v32 = swift_allocObject();
  *(void *)(v32 + 16) = v37;
  *(void *)(v32 + 24) = v31;
  swift_retain_n();
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v28, v32);
  swift_release();
  swift_release();
  if (v28[1])
  {
    uint64_t v33 = *v28;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v30, v33);
    swift_release();
    swift_release();
  }
  swift_release();
  return swift_release();
}

uint64_t _ForegroundStyleModifier2.ForegroundStyleEnvironment.modifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for _ForegroundStyleModifier2();
  uint64_t Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, Value, v2);
}

uint64_t type metadata accessor for _ForegroundStyleModifier2()
{
  return swift_getGenericMetadata();
}

void type metadata accessor for ShapeStyleBox<ShapeStylePair<AnyShapeStyle, AnyShapeStyle>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    unint64_t v10 = a5(a1, v9, a4);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

void _s7SwiftUI13ShapeStyleBox33_C5308685324599C90E2F7A588812BB29LLCyAA0cD4PairVyAA03AnycD0VAHGGMaTm_0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for ShapeStyleBox();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for ShapeStylePair<AnyShapeStyle, AnyShapeStyle>()
{
  if (!lazy cache variable for type metadata for ShapeStylePair<AnyShapeStyle, AnyShapeStyle>)
  {
    unint64_t v0 = type metadata accessor for ShapeStylePair();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ShapeStylePair<AnyShapeStyle, AnyShapeStyle>);
    }
  }
}

uint64_t type metadata accessor for ShapeStylePair()
{
  return swift_getGenericMetadata();
}

void EnvironmentValues.backgroundInfo.modify(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (uint64_t *)(*a1)[4];
  uint64_t v3 = **a1;
  uint64_t v4 = (*a1)[1];
  uint64_t v5 = *v2;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v2, v3, v4);
  swift_release();
  if (v2[1])
  {
    uint64_t v6 = *(void *)v1[4];
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v5, v6);
    swift_release();
    swift_release();
  }
  swift_release();

  free(v1);
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<BackgroundInfoKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<BackgroundInfoKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundInfoKey>, (uint64_t)&type metadata for BackgroundInfoKey, (uint64_t)&protocol witness table for BackgroundInfoKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<BackgroundInfoKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<BackgroundInfoKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<BackgroundInfoKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<BackgroundInfoKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<BackgroundInfoKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundInfoKey>, (uint64_t)&type metadata for BackgroundInfoKey, (uint64_t)&protocol witness table for BackgroundInfoKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<BackgroundInfoKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void (*EnvironmentValues.backgroundInfo.modify(uint64_t **a1))(uint64_t **a1)
{
  uint64_t v3 = (uint64_t *)malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (uint64_t)v1;
  uint64_t v4 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v4, v3);
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<BackgroundInfoKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundInfoKey>, (uint64_t)&type metadata for BackgroundInfoKey, (uint64_t)&protocol witness table for BackgroundInfoKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    BloomFilter.init(hashValue:)(v5);
    uint64_t v6 = swift_retain_n();
    uint64_t v7 = specialized find1<A>(_:key:filter:)(v6, v10);
    if (v7) {
      long long v8 = *(_OWORD *)(v7 + 72);
    }
    else {
      long long v8 = 0uLL;
    }
    *(_OWORD *)uint64_t v3 = v8;
  }
  swift_release_n();
  return EnvironmentValues.backgroundInfo.modify;
}

void type metadata accessor for EnvironmentPropertyKey<BackgroundInfoKey>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t HierarchicalShapeStyleModifier._apply(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = type metadata accessor for OffsetShapeStyle();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v13 - v9;
  long long v13 = *(_OWORD *)(a1 + 48);
  uint64_t v11 = ShapeStyle.primaryStyle(in:)((uint64_t *)&v13, v5, v6);
  if (v11)
  {
    specialized OffsetShapeStyle._apply(to:)((uint64_t *)a1, v11, *(void **)(v2 + *(int *)(a2 + 36)));
    return swift_release();
  }
  else
  {
    ShapeStyle.offset(by:)(*(void *)(v2 + *(int *)(a2 + 36)), v5, (uint64_t)v10);
    OffsetShapeStyle._apply(to:)(a1, v7);
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
}

uint64_t one-time initialization function for sharedPrimary()
{
  if (one-time initialization token for primary != -1) {
    swift_once();
  }
  unint64_t v0 = static Color.primary;
  type metadata accessor for OffsetShapeStyle<ForegroundMaterialStyle>(0, &lazy cache variable for type metadata for ShapeStyleBox<LegacyContentStyle>, (uint64_t)&type metadata for LegacyContentStyle, (uint64_t)&protocol witness table for LegacyContentStyle, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ShapeStyleBox);
  uint64_t v1 = swift_allocObject();
  *(unsigned char *)(v1 + 16) = 0;
  *(void *)(v1 + 24) = v0;
  static LegacyContentStyle.sharedPrimardouble y = (_UNKNOWN *)v1;

  return swift_retain();
}

{
  uint64_t result;

  type metadata accessor for OffsetShapeStyle<ForegroundMaterialStyle>(0, &lazy cache variable for type metadata for ShapeStyleBox<HierarchicalShapeStyle>, (uint64_t)&type metadata for HierarchicalShapeStyle, (uint64_t)&protocol witness table for HierarchicalShapeStyle, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ShapeStyleBox);
  unint64_t result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  static HierarchicalShapeStyle.sharedPrimardouble y = result;
  return result;
}

void type metadata accessor for OffsetShapeStyle<ForegroundMaterialStyle>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t type metadata accessor for ShapeStyleBox()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for OffsetShapeStyle()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t specialized OffsetShapeStyle._apply(to:)(uint64_t *a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1 + 1;
  uint64_t v8 = a1[1];
  uint64_t v9 = a1[2];
  uint64_t v10 = (uint64_t)a3;
  uint64_t v11 = a2;
  switch(*((unsigned char *)a1 + 24))
  {
    case 1:
      if (__OFADD__(v8, a3)) {
        goto LABEL_76;
      }
      BOOL v19 = __OFADD__(v9, a3);
      uint64_t v20 = (uint64_t)a3 + v9;
      if (v19) {
        goto LABEL_77;
      }
      if (v20 < (uint64_t)a3 + v8) {
        goto LABEL_78;
      }
      uint64_t v60 = v20;
      uint64_t v61 = (uint64_t)a3 + v8;
      unsigned int v3 = *a1;
      int v21 = *((unsigned __int8 *)a1 + 40);
      BOOL v22 = v21 == 1;
      if (v21 == 1) {
        uint64_t v23 = 0;
      }
      else {
        uint64_t v23 = a1[4];
      }
      uint64_t v59 = v23;
      if (v21 == 1) {
        LOBYTE(v21) = 5;
      }
      char v58 = v21;
      uint64_t v24 = (void *)MEMORY[0x263F8EE78];
      if (v22) {
        uint64_t v4 = a1[4];
      }
      else {
        uint64_t v4 = MEMORY[0x263F8EE78];
      }
      uint64_t v5 = *(void *)(v4 + 16);
      unsigned int v82 = *a1;
      if (!v5) {
        goto LABEL_39;
      }
      uint64_t v56 = *a1;
      uint64_t v57 = a2;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        goto LABEL_80;
      }
      goto LABEL_25;
    case 2:
      if (__OFADD__(a3, v6)) {
        goto LABEL_75;
      }
      *a1 = (uint64_t)a3 + v6;
      *uint64_t v7 = 0;
      a1[2] = 0;
      char v13 = 2;
      goto LABEL_8;
    case 3:
      int v15 = *(void (**)(uint64_t *))(*(void *)a2 + 80);
      swift_retain();
      v15(a1);
      if (*((unsigned char *)a1 + 40) == 2)
      {
        uint64_t v16 = a1[4];
        type metadata accessor for ShapeStyleBox<OffsetShapeStyle<ForegroundMaterialStyle>>(0, &lazy cache variable for type metadata for ShapeStyleBox<OffsetShapeStyle<AnyShapeStyle>>, (unint64_t *)&lazy cache variable for type metadata for OffsetShapeStyle<AnyShapeStyle>, (uint64_t)&type metadata for AnyShapeStyle, (uint64_t)&protocol witness table for AnyShapeStyle);
        uint64_t v17 = swift_allocObject();
        *(void *)(v17 + 16) = v16;
        *(void *)(v17 + 24) = v10;
        uint64_t result = swift_release();
        a1[4] = v17;
        char v18 = 2;
        goto LABEL_68;
      }
      return swift_release();
    case 4:
      if (__OFADD__(a3, v6)) {
        goto LABEL_74;
      }
      *a1 = (uint64_t)a3 + v6;
      *uint64_t v7 = 0;
      a1[2] = 0;
      char v13 = 4;
LABEL_8:
      *((unsigned char *)a1 + 24) = v13;
      return (*(uint64_t (**)(uint64_t *))(*(void *)a2 + 80))(a1);
    case 5:
      if (v9 | v8 | v6)
      {
        uint64_t v38 = a1[4];
        char v39 = *((unsigned char *)a1 + 40);
        swift_retain();
        uint64_t result = outlined consume of _ShapeStyle_Shape.Result(v38, v39);
        a1[4] = v11;
        char v18 = 2;
      }
      else
      {
        uint64_t result = outlined consume of _ShapeStyle_Shape.Result(a1[4], *((unsigned char *)a1 + 40));
        a1[4] = 0;
        char v18 = 4;
      }
      goto LABEL_68;
    default:
      if (!__OFADD__(a3, v6))
      {
        *a1 = (uint64_t)a3 + v6;
        *uint64_t v7 = 0;
        a1[2] = 0;
        *((unsigned char *)a1 + 24) = 0;
        return (*(uint64_t (**)(uint64_t *))(*(void *)a2 + 80))(a1);
      }
      break;
  }
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
LABEL_75:
  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  __break(1u);
  do
  {
    __break(1u);
LABEL_80:
    uint64_t v4 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)v4);
LABEL_25:
    unint64_t v25 = 0;
    uint64_t v26 = (void *)(v4 + 32);
    do
    {
      unint64_t v27 = *(void *)(v4 + 16);
      if (v25 >= v27)
      {
        __break(1u);
LABEL_70:
        __break(1u);
LABEL_71:
        __break(1u);
LABEL_72:
        __break(1u);
        goto LABEL_73;
      }
      int v28 = (unsigned __int8 *)&v26[15 * v25];
      unsigned int v29 = *v28;
      if (v29 < v3) {
        goto LABEL_27;
      }
      if (v29 > v3) {
        break;
      }
      uint64_t v30 = v28[1];
      BOOL v19 = __OFADD__(v30, v10);
      unint64_t v31 = v30 + v10;
      if (v19) {
        goto LABEL_71;
      }
      if ((v31 & 0x8000000000000000) != 0)
      {
        unint64_t v32 = v27 - 1;
        uint64_t v33 = v27 - 1 - v25;
        if (v33 < 0)
        {
LABEL_81:
          uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        uint64_t v34 = &v26[15 * v25];
        uint64_t v80 = v34[12];
        char v68 = *((unsigned char *)v34 + 88);
        uint64_t v64 = v34[9];
        uint64_t v66 = v34[10];
        uint64_t v78 = v34[8];
        uint64_t v74 = v34[6];
        uint64_t v76 = v34[7];
        uint64_t v72 = v34[5];
        uint64_t v35 = v34[3];
        uint64_t v62 = v34[4];
        uint64_t v37 = v34[1];
        uint64_t v36 = v34[2];
        unsigned __int8 v70 = *((unsigned char *)v34 + 104);
        memmove(v28, v28 + 120, 120 * v33);
        *(void *)(v4 + 16) = v32;
        outlined consume of _ShapeStyle_Pack.Fill(v37, v36, v35, v62, v72, v74, v76, v78, v64, v66, v68);
        outlined consume of GraphicsBlendMode?(v80, v70);
        swift_bridgeObjectRelease();
        --v5;
        unsigned int v3 = v82;
        continue;
      }
      v28[1] = v31;
LABEL_27:
      ++v25;
    }
    while ((uint64_t)v25 < v5);
    LOBYTE(v6) = v56;
    uint64_t v11 = v57;
    uint64_t v24 = (void *)MEMORY[0x263F8EE78];
LABEL_39:
    outlined consume of _ShapeStyle_Shape.Result(v59, v58);
    a1[4] = v4;
    *((unsigned char *)a1 + 40) = 1;
    *a1 = v6;
    a1[1] = v61;
    a1[2] = v60;
    *((unsigned char *)a1 + 24) = 1;
    (*(void (**)(uint64_t *))(*(void *)v11 + 80))(a1);
    uint64_t v4 = -v10;
  }
  while (__OFSUB__(0, v10));
  int v40 = *((unsigned __int8 *)a1 + 40);
  if (v40 == 1) {
    uint64_t v41 = 0;
  }
  else {
    uint64_t v41 = a1[4];
  }
  if (v40 == 1) {
    int v42 = 5;
  }
  else {
    int v42 = *((unsigned __int8 *)a1 + 40);
  }
  if (v40 == 1) {
    uint64_t v24 = (void *)a1[4];
  }
  uint64_t v43 = v24[2];
  if (v43)
  {
    uint64_t v61 = v41;
    LODWORD(v60) = v42;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew()(v24);
    }
    unint64_t v44 = 0;
    uint64_t v10 = (uint64_t)(v24 + 4);
    while (1)
    {
      unint64_t v45 = v24[2];
      if (v44 >= v45) {
        goto LABEL_70;
      }
      uint64_t v46 = (unsigned __int8 *)(v10 + 120 * v44);
      unsigned int v47 = *v46;
      if (v47 < v3) {
        goto LABEL_53;
      }
      if (v47 > v3)
      {
LABEL_62:
        uint64_t v41 = v61;
        LOBYTE(v42) = v60;
        goto LABEL_63;
      }
      uint64_t v48 = v46[1];
      BOOL v19 = __OFADD__(v48, v4);
      unint64_t v49 = v48 + v4;
      if (v19) {
        goto LABEL_72;
      }
      if ((v49 & 0x8000000000000000) == 0) {
        break;
      }
      uint64_t v5 = v45 - 1;
      uint64_t v50 = v45 - 1 - v44;
      if (v50 < 0) {
        goto LABEL_81;
      }
      int v51 = (void *)v4;
      uint64_t v52 = (void *)(v10 + 120 * v44);
      uint64_t v81 = v52[12];
      char v69 = *((unsigned char *)v52 + 88);
      uint64_t v65 = v52[9];
      uint64_t v67 = v52[10];
      uint64_t v79 = v52[8];
      uint64_t v75 = v52[6];
      uint64_t v77 = v52[7];
      uint64_t v73 = v52[5];
      uint64_t v53 = v52[3];
      uint64_t v63 = v52[4];
      uint64_t v55 = v52[1];
      uint64_t v54 = v52[2];
      unsigned __int8 v71 = *((unsigned char *)v52 + 104);
      memmove(v46, v46 + 120, 120 * v50);
      v24[2] = v5;
      outlined consume of _ShapeStyle_Pack.Fill(v55, v54, v53, v63, v73, v75, v77, v79, v65, v67, v69);
      outlined consume of GraphicsBlendMode?(v81, v71);
      swift_bridgeObjectRelease();
      --v43;
      unsigned int v3 = v82;
      uint64_t v4 = (uint64_t)v51;
LABEL_54:
      if ((uint64_t)v44 >= v43) {
        goto LABEL_62;
      }
    }
    v46[1] = v49;
LABEL_53:
    ++v44;
    goto LABEL_54;
  }
LABEL_63:
  uint64_t result = outlined consume of _ShapeStyle_Shape.Result(v41, v42);
  a1[4] = (uint64_t)v24;
  char v18 = 1;
LABEL_68:
  *((unsigned char *)a1 + 40) = v18;
  return result;
}

uint64_t ShapeStyle.primaryStyle(in:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  v11[1] = 0;
  void v11[2] = 0;
  v11[0] = 1;
  char v12 = 5;
  uint64_t v13 = 0;
  unsigned __int8 v14 = 5;
  uint64_t v15 = v6;
  uint64_t v16 = v5;
  long long v17 = 0u;
  long long v18 = 0u;
  uint64_t v19 = 0;
  char v20 = 1;
  __int16 v21 = 0;
  uint64_t v7 = *(void (**)(void *, uint64_t, uint64_t))(a3 + 32);
  swift_retain();
  swift_retain();
  v7(v11, a2, a3);
  uint64_t v8 = v13;
  int v9 = v14;
  outlined copy of _ShapeStyle_Shape.Result(v13, v14);
  outlined consume of _ShapeStyle_Shape.Result(v8, v9);
  swift_release();
  swift_release();
  swift_release();
  if (v9 != 2)
  {
    outlined consume of _ShapeStyle_Shape.Result(v8, v9);
    return 0;
  }
  return v8;
}

uint64_t EnvironmentValues.backgroundInfo.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, a1);
    swift_release_n();
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, a1);
  }
  return swift_release_n();
}

uint64_t specialized closure #1 in PropertyList.subscript.getter@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.TextSizeVariantKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundInfoKey>, (uint64_t)&type metadata for BackgroundInfoKey, (uint64_t)&protocol witness table for BackgroundInfoKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  BloomFilter.init(hashValue:)(v4);
  uint64_t result = specialized find1<A>(_:key:filter:)(a1, v7);
  if (result) {
    long long v6 = *(_OWORD *)(result + 72);
  }
  else {
    long long v6 = 0uLL;
  }
  *a2 = v6;
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<BackgroundInfoKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<BackgroundInfoKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundInfoKey>, (uint64_t)&type metadata for BackgroundInfoKey, (uint64_t)&protocol witness table for BackgroundInfoKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<BackgroundInfoKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<BackgroundInfoKey>>);
    }
  }
}

void protocol witness for Sequence.makeIterator() in conformance LayoutSubviews(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  char v3 = *(unsigned char *)(v1 + 16);
  char v4 = *(unsigned char *)(v1 + 17);
  *(_DWORD *)a1 = *(_DWORD *)v1;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 17) = v4;
  *(void *)(a1 + 24) = 0;
}

uint64_t _BindingActionModifier.init(binding:action:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for Binding();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(a4, a1, v8);
  uint64_t result = type metadata accessor for _BindingActionModifier();
  uint64_t v10 = (void *)(a4 + *(int *)(result + 36));
  *uint64_t v10 = a2;
  v10[1] = a3;
  return result;
}

uint64_t View._onBindingChange<A>(_:perform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v23 = a5;
  uint64_t v21 = a6;
  uint64_t v22 = a4;
  uint64_t v20 = a2;
  uint64_t v8 = type metadata accessor for Binding();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v19 - v10;
  uint64_t v12 = type metadata accessor for _BindingActionModifier();
  uint64_t v13 = *(void *)(v12 - 8);
  double v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v19 - v15;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v11, a1, v8, v14);
  _BindingActionModifier.init(binding:action:)((uint64_t)v11, v20, a3, (uint64_t)v16);
  View.modifier<A>(_:)(v16, v22, v12);
  long long v17 = *(uint64_t (**)(char *, uint64_t))(v13 + 8);
  swift_retain();
  return v17(v16, v12);
}

uint64_t BindingActionDispatcher.updateValue()(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v72 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v72 - 8);
  MEMORY[0x270FA5388](v72);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v64 = (char *)&v61 - v7;
  uint64_t v65 = v6;
  uint64_t v8 = type metadata accessor for _BindingActionModifier();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v61 - v10;
  uint64_t v71 = *(void *)(v4 - 8);
  uint64_t v12 = *(void *)(v71 + 64);
  MEMORY[0x270FA5388](v13);
  uint64_t v63 = (char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  unsigned __int8 v70 = (char *)&v61 - v15;
  int v16 = *(_DWORD *)AGGraphGetValue() >> 1;
  uint64_t v17 = *(int *)(a1 + 52);
  if (v16 != *(_DWORD *)(v1 + v17))
  {
    *(_DWORD *)(v1 + v17) = v16;
    uint64_t v18 = v1 + *(int *)(a1 + 44);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2 + *(int *)(a1 + 44), v72);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v71 + 56))(v18, 1, 1, v4);
    *(void *)(v2 + 12) = 0xFFFFFFFFLL;
    *(unsigned char *)(v2 + 20) = 0;
  }
  BindingActionDispatcher.modifier.getter((uint64_t)v11);
  uint64_t v19 = *((void *)v11 + 1);
  uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  swift_retain();
  uint64_t v66 = v11;
  uint64_t v67 = v9 + 8;
  char v68 = v20;
  v20((uint64_t)v11, v8);
  uint64_t v21 = v70;
  char v22 = (*(uint64_t (**)(char *))(*(void *)v19 + 144))(v70);
  swift_release();
  uint64_t v69 = a1;
  if ((v22 & 1) == 0)
  {
    unsigned int v29 = *(char **)(v5 + 8);
    unint64_t v31 = v68;
    uint64_t v30 = v8;
    goto LABEL_22;
  }
  uint64_t v62 = v8;
  uint64_t v23 = v64;
  uint64_t v24 = v4;
  uint64_t v25 = v72;
  uint64_t v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v64, v2 + *(int *)(a1 + 44), v72);
  MEMORY[0x270FA5388](v26);
  uint64_t v61 = v24;
  uint64_t v27 = v65;
  *(&v61 - 4) = v24;
  *(&v61 - 3) = v27;
  *(&v61 - 2) = (uint64_t)v21;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in ChangedCallbacks.dispatch(phase:state:), (uint64_t)(&v61 - 6), MEMORY[0x263F8E628], MEMORY[0x263F8D4F8], v28, (uint64_t)&v75);
  unsigned int v29 = *(char **)(v5 + 8);
  ((void (*)(char *, uint64_t))v29)(v23, v25);
  if (v75)
  {
    uint64_t v64 = v29;
    AGGraphClearUpdate();
    int v32 = *(_DWORD *)AGGraphGetValue();
    AGGraphSetUpdate();
    unint64_t v31 = v68;
    if (*(_DWORD *)(v2 + 12) == v32)
    {
      int v33 = *(_DWORD *)(v2 + 16);
      uint64_t v4 = v61;
      uint64_t v30 = v62;
      uint64_t v21 = v70;
      if (!v33 || (int v34 = v33 - 1, (*(_DWORD *)(v2 + 16) = v34) == 0))
      {
        if ((*(unsigned char *)(v2 + 20) & 1) == 0)
        {
          uint64_t v73 = 0;
          unint64_t v74 = 0xE000000000000000;
          _StringGuts.grow(_:)(44);
          uint64_t v73 = 0;
          unint64_t v74 = 0xE000000000000000;
          _StringGuts.grow(_:)(18);
          swift_bridgeObjectRelease();
          uint64_t v73 = 0x3C676E69646E6942;
          unint64_t v74 = 0xE800000000000000;
          v35._countAndFlagsBits = _typeName(_:qualified:)();
          String.append(_:)(v35);
          swift_bridgeObjectRelease();
          v36._countAndFlagsBits = 0x6E6F69746361203ELL;
          v36._object = (void *)0xE800000000000000;
          String.append(_:)(v36);
          swift_bridgeObjectRelease();
          v37._object = (void *)0x800000024621E040;
          v37._countAndFlagsBits = 0xD00000000000002ALL;
          String.append(_:)(v37);
          specialized static Log.externalWarning(_:)(v73, v74);
          swift_bridgeObjectRelease();
          *(unsigned char *)(v2 + 20) = 1;
        }
LABEL_21:
        unsigned int v29 = v64;
        goto LABEL_22;
      }
    }
    else
    {
      *(_DWORD *)(v2 + 12) = v32;
      *(_DWORD *)(v2 + 16) = 2;
      uint64_t v4 = v61;
      uint64_t v30 = v62;
      uint64_t v21 = v70;
    }
    uint64_t v38 = (uint64_t *)(v2 + *(int *)(v69 + 48));
    uint64_t v62 = *v38;
    if (v62)
    {
      uint64_t v39 = v38[1];
      uint64_t v40 = v71;
      uint64_t v41 = v63;
      (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v63, v21, v4);
      unint64_t v42 = (*(unsigned __int8 *)(v40 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80);
      uint64_t v43 = (char *)swift_allocObject();
      uint64_t v44 = v65;
      *((void *)v43 + 2) = v4;
      *((void *)v43 + 3) = v44;
      uint64_t v45 = v62;
      *((void *)v43 + 4) = v62;
      *((void *)v43 + 5) = v39;
      (*(void (**)(char *, char *, uint64_t))(v40 + 32))(&v43[v42], v41, v4);
      outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v45);
      uint64_t v65 = v39;
      outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v45);
      specialized static Update.begin()();
      uint64_t v46 = swift_allocObject();
      *(void *)(v46 + 16) = partial apply for closure #2 in BindingActionDispatcher.updateValue();
      *(void *)(v46 + 24) = v43;
      uint64_t v47 = one-time initialization token for actions;
      swift_retain();
      if (v47 != -1) {
        swift_once();
      }
      uint64_t v48 = static Update.actions;
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v48[2] + 1, 1, v48);
      }
      unint64_t v31 = v68;
      unint64_t v50 = v48[2];
      unint64_t v49 = v48[3];
      if (v50 >= v49 >> 1) {
        uint64_t v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v49 > 1), v50 + 1, 1, v48);
      }
      v48[2] = v50 + 1;
      int v51 = &v48[2 * v50];
      v51[4] = partial apply for thunk for @escaping @callee_guaranteed () -> ();
      v51[5] = v46;
      static Update.actions = v48;
      swift_bridgeObjectRelease();
      static Update.end()();
      outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(v62);
      swift_release();
      uint64_t v21 = v70;
    }
    goto LABEL_21;
  }
  uint64_t v4 = v61;
  uint64_t v30 = v62;
  uint64_t v21 = v70;
  unint64_t v31 = v68;
LABEL_22:
  uint64_t v52 = v69;
  uint64_t v53 = v2 + *(int *)(v69 + 44);
  ((void (*)(uint64_t, uint64_t))v29)(v53, v72);
  uint64_t v54 = v71;
  (*(void (**)(uint64_t, char *, uint64_t))(v71 + 16))(v53, v21, v4);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v54 + 56))(v53, 0, 1, v4);
  uint64_t v55 = (uint64_t)v66;
  BindingActionDispatcher.modifier.getter((uint64_t)v66);
  (*(void (**)(char *, uint64_t))(v54 + 8))(v21, v4);
  uint64_t v56 = (uint64_t *)(v55 + *(int *)(v30 + 36));
  uint64_t v58 = *v56;
  uint64_t v57 = v56[1];
  swift_retain();
  v31(v55, v30);
  uint64_t v59 = (uint64_t *)(v2 + *(int *)(v52 + 48));
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ())?(*v59);
  *uint64_t v59 = v58;
  v59[1] = v57;
  return result;
}

void *initializeWithCopy for _BindingActionModifier(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v6 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v5 = *v6;
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
  uint64_t v9 = *(void *)(v7 - 8) + 16;
  uint64_t v10 = *(unsigned __int8 *)(*(void *)(v7 - 8) + 80);
  uint64_t v11 = ((unint64_t)v5 + v10 + 8) & ~v10;
  uint64_t v12 = ((unint64_t)v6 + v10 + 8) & ~v10;
  swift_retain();
  swift_retain();
  v8(v11, v12, v7);
  uint64_t v13 = ((v10 + 16) & ~v10) + *(void *)(v9 + 48) + 7;
  unint64_t v14 = (unint64_t)a1 + v13;
  uint64_t v15 = (uint64_t *)(((unint64_t)a2 + v13) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  uint64_t v18 = (void *)(v14 & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v18 = v17;
  v18[1] = v16;
  swift_retain();
  return a1;
}

uint64_t destroy for _BindingActionModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 15;
  swift_release();
  swift_release();
  (*(void (**)(unint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8))(((v3 & 0xFFFFFFFFFFFFFFF8)
                                                                                            + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80)
                                                                                            + 8) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80));

  return swift_release();
}

uint64_t BindingActionDispatcher.modifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for _BindingActionModifier();
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t type metadata accessor for _BindingActionModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t (*partial apply for closure #1 in closure #1 in closure #1 in Attribute.init(value:)())(uint64_t a1, uint64_t a2)
{
  uint64_t v1 = *(void *)(v0 + 16);
  *(void *)(swift_allocObject() + 16) = v1;
  return partial apply for implicit closure #1 in closure #1 in closure #1 in closure #1 in Attribute.init(value:);
}

uint64_t base witness table accessor for _AttributeBody in _TraitWritingModifier<A>.AddTrait()
{
  return swift_getWitnessTable();
}

void ViewSize.proposal.getter(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  BOOL v4 = (~v2 & 0x7FF0000000000000) == 0 && (v2 & 0xFFFFFFFFFFFFFLL) != 0;
  if (v4) {
    uint64_t v2 = 0;
  }
  BOOL v5 = (~v3 & 0x7FF0000000000000) == 0 && (v3 & 0xFFFFFFFFFFFFFLL) != 0;
  if (v5) {
    uint64_t v3 = 0;
  }
  *(void *)a1 = v2;
  *(unsigned char *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 24) = v5;
}

uint64_t ForEach.content.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 60));
  swift_retain();
  return v2;
}

uint64_t _ViewInputs.requestedNamedImageRepresentation.setter(uint64_t a1, uint64_t a2)
{
  return _ViewInputs.requestedImageRepresentation.setter(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t _ViewInputs.requestedImageRepresentation.setter(uint64_t a1, uint64_t a2)
{
  return _ViewInputs.requestedImageRepresentation.setter(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t ImageRenderer.proposedSize.setter(uint64_t a1, char a2, uint64_t a3, char a4)
{
  return ImageRendererHost.proposedSize.setter(a1, a2 & 1, a3, a4 & 1);
}

uint64_t ImageRendererHost.proposedSize.setter(uint64_t a1, char a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4 + *(void *)(*(void *)v4 + 248);
  uint64_t v6 = *(void *)v5;
  char v7 = *(unsigned char *)(v5 + 8);
  uint64_t v8 = *(void *)(v5 + 16);
  char v9 = *(unsigned char *)(v5 + 24);
  *(void *)uint64_t v5 = a1;
  *(unsigned char *)(v5 + 8) = a2 & 1;
  *(void *)(v5 + 16) = a3;
  *(unsigned char *)(v5 + 24) = a4 & 1;
  return ImageRendererHost.proposedSize.didset(v6, v7, v8, v9);
}

uint64_t ImageRendererHost.proposedSize.didset(uint64_t result, char a2, uint64_t a3, char a4)
{
  uint64_t v5 = *v4;
  uint64_t v6 = (double *)((char *)v4 + *(void *)(*v4 + 248));
  if ((_BYTE)v6[1])
  {
    if ((a2 & 1) == 0) {
      goto LABEL_11;
    }
  }
  else if ((a2 & 1) != 0 || *v6 != *(double *)&result)
  {
    goto LABEL_11;
  }
  if ((_BYTE)v6[3])
  {
    if ((a4 & 1) == 0)
    {
LABEL_11:
      ImageRendererHost.updateSizeThatFitsObserver()();
      unsigned __int16 v7 = 8;
      *(double *)&uint64_t result = COERCE_DOUBLE(ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)(&v7, 1, v5, (uint64_t)&protocol witness table for ImageRendererHost<A>));
    }
  }
  else if ((a4 & 1) != 0 || v6[2] != *(double *)&a3)
  {
    goto LABEL_11;
  }
  return result;
}

uint64_t GraphHost.setEnvironment(_:)()
{
  swift_beginAccess();
  uint64_t v1 = (void *)v0[2];
  uint64_t v2 = (void *)v0[3];
  uint64_t v3 = (void *)v0[4];
  swift_retain();
  id v4 = v1;
  id v5 = v2;
  id v6 = v3;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  AGGraphSetValue();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t DisplayList.ViewRenderer.host.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 48) = a2;
  swift_unknownObjectWeakAssign();
  uint64_t result = swift_unknownObjectRelease();
  *(unsigned char *)(v2 + 80) = 1;
  return result;
}

ValueMetadata *type metadata accessor for ContentMode()
{
  return &type metadata for ContentMode;
}

id protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance SimultaneousGestureModifier<A>@<X0>(unsigned int *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(unint64_t *__return_ptr)@<X2>, uint64_t a4@<X4>, unint64_t *a5@<X8>)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return static GestureViewModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, WitnessTable, a5);
}

id protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance AddGestureModifier<A>@<X0>(unsigned int *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(unint64_t *__return_ptr)@<X2>, uint64_t a4@<X4>, unint64_t *a5@<X8>)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return static GestureViewModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, WitnessTable, a5);
}

id static GestureViewModifier._makeView(modifier:inputs:body:)@<X0>(unsigned int *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(unint64_t *__return_ptr)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, unint64_t *a6@<X8>)
{
  uint64_t v6 = *a2;
  int v7 = *((_DWORD *)a2 + 2);
  uint64_t v8 = a2[2];
  int v9 = *((_DWORD *)a2 + 20);
  unsigned int v20 = *a1;
  uint64_t v12 = v6;
  int v13 = v7;
  uint64_t v14 = v8;
  long long v10 = *(_OWORD *)(a2 + 5);
  long long v15 = *(_OWORD *)(a2 + 3);
  long long v16 = v10;
  long long v17 = *(_OWORD *)(a2 + 7);
  uint64_t v18 = a2[9];
  int v19 = v9;
  return static GestureViewModifier.makeView(modifier:inputs:body:)(&v20, (uint64_t)&v12, a3, a4, a5, a6);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CTFontRef()
{
  return _CFObject.hashValue.getter();
}

uint64_t Bindable.projectedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(a2, v2, a1);
}

uint64_t base witness table accessor for Equatable in EnvironmentFetch<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in EnvironmentFetch<A>()
{
  return swift_getWitnessTable();
}

uint64_t Font.bold()(uint64_t a1)
{
  return Font.italic()(a1, (void (*)(void))type metadata accessor for FontBox<Font.StaticModifierProvider<Font.BoldModifier>>);
}

uint64_t implicit closure #1 in static GestureViewModifier.makeView(modifier:inputs:body:)(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v13 = a2;
  uint64_t v14 = a3;
  int v8 = a1;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v11 = type metadata accessor for Focus();
  uint64_t WitnessTable = swift_getWitnessTable();
  _sSiSgMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<GestureMask>, (uint64_t)&type metadata for GestureMask, MEMORY[0x263F28898]);
  uint64_t v4 = v3;
  swift_retain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v8, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v10, v11, MEMORY[0x263F8E628], v4, MEMORY[0x263F8E658], v5);
  swift_release();
  swift_release();
  return v7;
}

uint64_t instantiation function for generic protocol witness table for ProjectedLocation<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t key path getter for EnvironmentValues.hyphenationFactor : EnvironmentValues@<X0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  return key path getter for EnvironmentValues.lineSpacing : EnvironmentValues(a1, specialized PropertyList.Tracker.value<A>(_:for:), (double (*)(uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.getter, a2);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance StrokeBorderShapeView<A, B, C>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  return protocol witness for static View._makeView(view:inputs:) in conformance FillShapeView<A, B, C>(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void, void))static StrokeBorderShapeView._makeView(view:inputs:));
}

void *EventBindingBridge.init(eventBindingManager:)()
{
  swift_weakInit();
  v0[3] = 0;
  v0[4] = 0;
  v0[5] = MEMORY[0x263F8EE80];
  swift_beginAccess();
  swift_weakAssign();
  swift_release();
  return v0;
}

uint64_t destructiveInjectEnumTag for CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(void *)(result + 32) = 0;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 40) = a2;
  return result;
}

uint64_t type metadata accessor for ViewTransform.UnsafeBuffer.VTable()
{
  return self;
}

uint64_t type metadata completion function for _TraitWritingModifier()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t _ViewInputs.animatedCGSize()()
{
  return _ViewInputs.animatedPosition()(CachedEnvironment.animatedCGSize(for:));
}

unsigned char *storeEnumTagSinglePayload for ControlSize(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

uint64_t initializeWithCopy for AccessibilityActivationPointStorage(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t base witness table accessor for _AttributeBody in StaticLayoutComputer<A>()
{
  return swift_getWitnessTable();
}

BOOL specialized static _ProposedSize.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v2 = *(unsigned char *)(a2 + 8);
  char v3 = *(unsigned char *)(a2 + 24);
  if (*(unsigned char *)(a1 + 8))
  {
    if (!*(unsigned char *)(a2 + 8)) {
      return 0;
    }
  }
  else
  {
    if (*(double *)a1 != *(double *)a2) {
      char v2 = 1;
    }
    if (v2) {
      return 0;
    }
  }
  if ((*(unsigned char *)(a1 + 24) & 1) == 0)
  {
    if (*(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      char v3 = 1;
    }
    return (v3 & 1) == 0;
  }
  return (*(unsigned char *)(a2 + 24) & 1) != 0;
}

uint64_t ViewGraph.updateRequiredMainThread.getter()
{
  swift_beginAccess();
  uint64_t result = *(void *)(v0 + 16);
  if (result) {
    return AGGraphGetCounter() != *(void *)(v0 + 368);
  }
  __break(1u);
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Font()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  (*(void (**)(unsigned char *))(*(void *)v1 + 104))(v3);
  return Hasher._finalize()();
}

uint64_t ScrollGeometryStateProvider.init(geometry:scrollableAxes:transform:)@<X0>(uint64_t result@<X0>, int a2@<W1>, int a3@<W2>, _DWORD *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ShapeStyledDisplayList<A>()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

uint64_t _AnyLayoutBox.layoutProperties.getter()
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)v0 + 192) + 24))();
}

void protocol witness for static Layout.layoutProperties.getter in conformance _HStackLayout(uint64_t a1@<X8>)
{
  *(_WORD *)a1 = 0;
  *(unsigned char *)(a1 + 2) = 1;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance CountingIndexCollection<A>()
{
  swift_getWitnessTable();

  return Collection._copyToContiguousArray()();
}

double ScrollGeometry.contentOffset.getter()
{
  return *(double *)v0;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<SystemColorSchemeKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<SystemColorSchemeKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<SystemColorSchemeKey>, (uint64_t)&type metadata for SystemColorSchemeKey, (uint64_t)&protocol witness table for SystemColorSchemeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<SystemColorSchemeKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<SystemColorSchemeKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<SystemColorSchemeKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<SystemColorSchemeKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<SystemColorSchemeKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<SystemColorSchemeKey>, (uint64_t)&type metadata for SystemColorSchemeKey, (uint64_t)&protocol witness table for SystemColorSchemeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<SystemColorSchemeKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ValueActionDispatcher<A>()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

ValueMetadata *type metadata accessor for TextInputSuggestionsContext()
{
  return &type metadata for TextInputSuggestionsContext;
}

uint64_t DynamicContainer._ItemInfo.__deallocating_deinit()
{
  DynamicContainer._ItemInfo.deinit();

  return swift_deallocClassInstance();
}

id *DynamicContainer._ItemInfo.deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v1 = (char *)v0 + *((void *)*v0 + 26);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(char *, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(v1, AssociatedTypeWitness);
  char v3 = (char *)v0 + *((void *)*v0 + 27);
  uint64_t v4 = swift_getAssociatedTypeWitness();
  (*(void (**)(char *, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  return v0;
}

uint64_t Optional<A>.merge(with:)(void (*a1)(uint64_t, char *, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v37 = a3;
  unsigned int v6 = a1;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](a1);
  Swift::String v36 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  Swift::String v35 = (char *)&v32 - v11;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v13.n128_f64[0] = MEMORY[0x270FA5388](TupleTypeMetadata2 - 8);
  uint64_t v15 = (char *)&v32 - v14;
  long long v17 = (char *)&v32 + *(int *)(v16 + 56) - v14;
  uint64_t v18 = *(void *)(a2 - 8);
  int v19 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v18 + 16);
  uint64_t v39 = v4;
  v19((char *)&v32 - v14, v4, a2, v13);
  int v34 = v6;
  ((void (*)(char *, void, uint64_t))v19)(v17, v6, a2);
  uint64_t v38 = v8;
  unsigned int v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48);
  LODWORD(v6) = v20(v15, 1, v7);
  int v21 = v20(v17, 1, v7);
  if (v6 == 1)
  {
    if (v21 == 1)
    {
      char v22 = 0;
    }
    else
    {
      uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
      uint64_t v24 = v39;
      v23(v39, a2);
      ((void (*)(uint64_t, void, uint64_t))v19)(v24, v34, a2);
      v23((uint64_t)v17, a2);
      char v22 = 1;
    }
  }
  else if (v21 == 1)
  {
    (*(void (**)(char *, uint64_t))(v38 + 8))(v15, v7);
    char v22 = 0;
  }
  else
  {
    int v33 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
    uint64_t v25 = v39;
    v33(v39, a2);
    uint64_t v26 = v38;
    uint64_t v27 = *(void (**)(uint64_t, char *, uint64_t))(v38 + 32);
    int v34 = v27;
    uint64_t v28 = v35;
    v27((uint64_t)v35, v15, v7);
    unsigned int v29 = v36;
    v27((uint64_t)v36, v17, v7);
    uint64_t v30 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 56);
    v30(v25, 1, 1, v7);
    v33(v25, a2);
    char v22 = (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v29, v7);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v29, v7);
    v34(v25, v28, v7);
    v30(v25, 0, 1, v7);
  }
  return v22 & 1;
}

uint64_t getEnumTagSinglePayload for EnvironmentalBodyAccessor(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 17)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t AccessibilityCustomAttributes.init(_:value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  type metadata accessor for AccessibilityCustomAttributes.Value?(0, &lazy cache variable for type metadata for AccessibilityCustomAttributes.Value?, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityCustomAttributes.Value, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v13 - v9;
  *a4 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  outlined init with copy of AccessibilityCustomAttributes.Value(a3, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for AccessibilityCustomAttributes.Value);
  uint64_t v11 = type metadata accessor for AccessibilityCustomAttributes.Value();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 0, 1, v11);
  AccessibilityCustomAttributes.subscript.setter((uint64_t)v10, a1, a2);
  return outlined destroy of AccessibilityCustomAttributes.Value(a3, (uint64_t (*)(void))type metadata accessor for AccessibilityCustomAttributes.Value);
}

void type metadata accessor for (String, AccessibilityCustomAttributes.Value)(uint64_t a1)
{
}

Swift::Bool __swiftcall AccessibilityCustomAttributes.merge(with:)(SwiftUI::AccessibilityCustomAttributes with)
{
  unint64_t v2 = v1;
  uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  type metadata accessor for AccessibilityCustomAttributes.Value?(0, &lazy cache variable for type metadata for AccessibilityCustomAttributes.Value?, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityCustomAttributes.Value, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v94 = (uint64_t)&v93 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v99 = (uint64_t)&v93 - v8;
  MEMORY[0x270FA5388](v9);
  uint64_t v110 = (uint64_t)&v93 - v10;
  MEMORY[0x270FA5388](v11);
  uint64_t v103 = (uint64_t)&v93 - v12;
  uint64_t v109 = type metadata accessor for AccessibilityCustomAttributes.Value();
  uint64_t v111 = *(void *)(v109 - 8);
  MEMORY[0x270FA5388](v109);
  uint64_t v98 = (uint64_t)&v93 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v97 = (uint64_t)&v93 - v15;
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v93 - v17;
  type metadata accessor for (key: String, value: AccessibilityCustomAttributes.Value)();
  uint64_t v112 = v19;
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  char v96 = (char *)&v93 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v22 = v4;
  uint64_t v23 = (uint64_t)v18;
  type metadata accessor for AccessibilityCustomAttributes.Value?(0, (unint64_t *)&lazy cache variable for type metadata for (key: String, value: AccessibilityCustomAttributes.Value)?, (uint64_t (*)(uint64_t))type metadata accessor for (key: String, value: AccessibilityCustomAttributes.Value), v22);
  MEMORY[0x270FA5388](v24 - 8);
  uint64_t v26 = (uint64_t *)((char *)&v93 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v27);
  uint64_t v106 = (uint64_t *)((char *)&v93 - v28);
  uint64_t v29 = *(void *)with.attributes._rawValue;
  uint64_t v30 = specialized Dictionary.startIndex.getter(*(void *)with.attributes._rawValue);
  uint64_t v113 = v31;
  LOBYTE(v18) = v32;
  char v117 = v32 & 1;
  swift_bridgeObjectRetain();
  if (v18) {
    goto LABEL_63;
  }
  int v100 = 0;
  uint64_t v104 = (void (**)(void *, uint64_t, uint64_t, uint64_t))(v20 + 56);
  long long v105 = (unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v20 + 48);
  long long v115 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v111 + 56);
  uint64_t v107 = v29 + 64;
  uint64_t v108 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v111 + 48);
  uint64_t v93 = v29 + 96;
  uint64_t v101 = v23;
  uint64_t v95 = v2;
  while (1)
  {
    uint64_t v33 = *(unsigned int *)(v29 + 36);
    if (v33 != v113) {
      break;
    }
    uint64_t v34 = 1 << *(unsigned char *)(v29 + 32);
    if (v30 == v34)
    {
      uint64_t v35 = v112;
      (*v104)(v26, 1, 1, v112);
      goto LABEL_21;
    }
    if (v30 < 0 || v30 >= v34) {
      goto LABEL_56;
    }
    uint64_t v114 = (unint64_t)v30 >> 6;
    if ((*(void *)(v107 + 8 * ((unint64_t)v30 >> 6)) & (1 << v30)) == 0) {
      goto LABEL_57;
    }
    uint64_t v102 = v33;
    uint64_t v36 = v29;
    uint64_t v37 = v96;
    uint64_t v38 = (uint64_t)&v96[*(int *)(v112 + 48)];
    uint64_t v39 = (uint64_t *)(*(void *)(v36 + 48) + 16 * v30);
    uint64_t v41 = *v39;
    uint64_t v40 = v39[1];
    uint64_t v42 = v112;
    outlined init with copy of AccessibilityCustomAttributes.Value(*(void *)(v36 + 56) + *(void *)(v111 + 72) * v30, v38, (uint64_t (*)(void))type metadata accessor for AccessibilityCustomAttributes.Value);
    *uint64_t v37 = v41;
    v37[1] = v40;
    *uint64_t v26 = v41;
    v26[1] = v40;
    outlined init with copy of AccessibilityCustomAttributes.Value(v38, (uint64_t)v26 + *(int *)(v42 + 48), (uint64_t (*)(void))type metadata accessor for AccessibilityCustomAttributes.Value);
    swift_bridgeObjectRetain_n();
    uint64_t v43 = (uint64_t)v37;
    uint64_t v29 = v36;
    outlined destroy of AccessibilityCustomAttributes.Value(v43, (uint64_t (*)(void))type metadata accessor for (key: String, value: AccessibilityCustomAttributes.Value));
    int64_t v44 = 1 << *(unsigned char *)(v36 + 32);
    if (v30 >= v44) {
      goto LABEL_58;
    }
    uint64_t v45 = v114;
    uint64_t v46 = *(void *)(v107 + 8 * v114);
    if ((v46 & (1 << v30)) == 0) {
      goto LABEL_59;
    }
    uint64_t v47 = v102;
    if (*(_DWORD *)(v36 + 36) != v102) {
      goto LABEL_60;
    }
    unint64_t v48 = v46 & (-2 << (v30 & 0x3F));
    if (v48)
    {
      int64_t v44 = __clz(__rbit64(v48)) | v30 & 0xFFFFFFFFFFFFFFC0;
      unint64_t v2 = v95;
LABEL_19:
      uint64_t v23 = v101;
      goto LABEL_20;
    }
    uint64_t v49 = v114 + 1;
    unint64_t v50 = (unint64_t)(v44 + 63) >> 6;
    unint64_t v2 = v95;
    if (v114 + 1 >= v50) {
      goto LABEL_19;
    }
    unint64_t v51 = *(void *)(v107 + 8 * v49);
    uint64_t v23 = v101;
    if (!v51)
    {
      uint64_t v49 = v114 + 2;
      if (v114 + 2 >= v50) {
        goto LABEL_20;
      }
      unint64_t v51 = *(void *)(v107 + 8 * v49);
      if (!v51)
      {
        uint64_t v49 = v114 + 3;
        if (v114 + 3 >= v50) {
          goto LABEL_20;
        }
        unint64_t v51 = *(void *)(v107 + 8 * v49);
        if (!v51)
        {
          while (v50 - 4 != v45)
          {
            unint64_t v51 = *(void *)(v93 + 8 * v45++);
            if (v51)
            {
              outlined consume of [String : AccessibilityCustomAttributes.Value].Index._Variant(v30, v113, 0);
              uint64_t v49 = v45 + 3;
              goto LABEL_18;
            }
          }
          outlined consume of [String : AccessibilityCustomAttributes.Value].Index._Variant(v30, v113, 0);
          goto LABEL_20;
        }
      }
    }
LABEL_18:
    int64_t v44 = __clz(__rbit64(v51)) + (v49 << 6);
LABEL_20:
    uint64_t v35 = v112;
    char v117 = 0;
    (*v104)(v26, 0, 1, v112);
    uint64_t v30 = v44;
    uint64_t v113 = v47;
LABEL_21:
    uint64_t v52 = v106;
    _sypSgWObTm_0((uint64_t)v26, (uint64_t)v106, (uint64_t)&lazy cache variable for type metadata for (key: String, value: AccessibilityCustomAttributes.Value)?, (uint64_t)type metadata accessor for (key: String, value: AccessibilityCustomAttributes.Value), MEMORY[0x263F8D8F0], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for AccessibilityCustomAttributes.Value?);
    if ((*v105)(v52, 1, v35) == 1)
    {
      char v91 = v117;
      swift_bridgeObjectRelease();
      outlined consume of [String : AccessibilityCustomAttributes.Value].Index._Variant(v30, v113, v91);
      return v100 & 1;
    }
    uint64_t v114 = v30;
    uint64_t v53 = *v52;
    uint64_t v54 = v52[1];
    outlined init with take of AccessibilityCustomAttributes.Value((uint64_t)v52 + *(int *)(v35 + 48), v23);
    uint64_t v55 = *v2;
    if (*(void *)(*v2 + 16))
    {
      swift_bridgeObjectRetain();
      unint64_t v56 = specialized __RawDictionaryStorage.find<A>(_:)(v53, v54);
      if (v57)
      {
        uint64_t v58 = *(void *)(v55 + 56);
        uint64_t v59 = v111;
        uint64_t v60 = v103;
        outlined init with copy of AccessibilityCustomAttributes.Value(v58 + *(void *)(v111 + 72) * v56, v103, (uint64_t (*)(void))type metadata accessor for AccessibilityCustomAttributes.Value);
        uint64_t v61 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v59 + 56);
        uint64_t v62 = v109;
        v61(v60, 0, 1, v109);
      }
      else
      {
        uint64_t v61 = *v115;
        uint64_t v60 = v103;
        uint64_t v62 = v109;
        (*v115)(v103, 1, 1, v109);
      }
      swift_bridgeObjectRelease();
      if ((*v108)(v60, 1, v62) != 1)
      {
        swift_bridgeObjectRelease();
        _sypSgWOhTm_0(v60, (uint64_t)&lazy cache variable for type metadata for AccessibilityCustomAttributes.Value?, (uint64_t)type metadata accessor for AccessibilityCustomAttributes.Value, MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for AccessibilityCustomAttributes.Value?);
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v61 = *v115;
      uint64_t v60 = v103;
      uint64_t v62 = v109;
      (*v115)(v103, 1, 1, v109);
    }
    _sypSgWOhTm_0(v60, (uint64_t)&lazy cache variable for type metadata for AccessibilityCustomAttributes.Value?, (uint64_t)type metadata accessor for AccessibilityCustomAttributes.Value, MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for AccessibilityCustomAttributes.Value?);
    uint64_t v63 = v110;
    outlined init with copy of AccessibilityCustomAttributes.Value(v23, v110, (uint64_t (*)(void))type metadata accessor for AccessibilityCustomAttributes.Value);
    v61(v63, 0, 1, v62);
    uint64_t v64 = v63;
    uint64_t v65 = v99;
    outlined init with copy of AccessibilityCustomAttributes.Value?(v64, v99);
    if ((*v108)(v65, 1, v62) == 1)
    {
      _sypSgWOhTm_0(v65, (uint64_t)&lazy cache variable for type metadata for AccessibilityCustomAttributes.Value?, (uint64_t)type metadata accessor for AccessibilityCustomAttributes.Value, MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for AccessibilityCustomAttributes.Value?);
      swift_bridgeObjectRetain();
      unint64_t v66 = specialized __RawDictionaryStorage.find<A>(_:)(v53, v54);
      char v68 = v67;
      swift_bridgeObjectRelease();
      if (v68)
      {
        int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v70 = *v2;
        uint64_t v116 = (void *)*v2;
        *unint64_t v2 = 0x8000000000000000;
        if (!isUniquelyReferenced_nonNull_native)
        {
          specialized _NativeDictionary.copy()();
          uint64_t v70 = (uint64_t)v116;
        }
        swift_bridgeObjectRelease();
        uint64_t v71 = v94;
        outlined init with take of AccessibilityCustomAttributes.Value(*(void *)(v70 + 56) + *(void *)(v111 + 72) * v66, v94);
        specialized _NativeDictionary._delete(at:)(v66, v70);
        *unint64_t v2 = v70;
        swift_bridgeObjectRelease();
        uint64_t v72 = 0;
      }
      else
      {
        uint64_t v72 = 1;
        uint64_t v71 = v94;
      }
      int v100 = 1;
      v61(v71, v72, 1, v109);
      uint64_t v85 = MEMORY[0x263F8D8F0];
      _sypSgWOhTm_0(v110, (uint64_t)&lazy cache variable for type metadata for AccessibilityCustomAttributes.Value?, (uint64_t)type metadata accessor for AccessibilityCustomAttributes.Value, MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for AccessibilityCustomAttributes.Value?);
      _sypSgWOhTm_0(v71, (uint64_t)&lazy cache variable for type metadata for AccessibilityCustomAttributes.Value?, (uint64_t)type metadata accessor for AccessibilityCustomAttributes.Value, v85, (uint64_t (*)(void))type metadata accessor for AccessibilityCustomAttributes.Value?);
      swift_bridgeObjectRelease();
      uint64_t v23 = v101;
    }
    else
    {
      uint64_t v73 = v65;
      uint64_t v74 = v97;
      outlined init with take of AccessibilityCustomAttributes.Value(v73, v97);
      outlined init with copy of AccessibilityCustomAttributes.Value(v74, v98, (uint64_t (*)(void))type metadata accessor for AccessibilityCustomAttributes.Value);
      int v75 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v116 = (void *)*v2;
      uint64_t v76 = v116;
      *unint64_t v2 = 0x8000000000000000;
      unint64_t v78 = specialized __RawDictionaryStorage.find<A>(_:)(v53, v54);
      uint64_t v79 = v76[2];
      BOOL v80 = (v77 & 1) == 0;
      uint64_t v81 = v79 + v80;
      if (__OFADD__(v79, v80)) {
        goto LABEL_61;
      }
      char v82 = v77;
      if (v76[3] >= v81)
      {
        if ((v75 & 1) == 0) {
          specialized _NativeDictionary.copy()();
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v81, v75);
        unint64_t v83 = specialized __RawDictionaryStorage.find<A>(_:)(v53, v54);
        if ((v82 & 1) != (v84 & 1)) {
          goto LABEL_64;
        }
        unint64_t v78 = v83;
      }
      uint64_t v86 = v116;
      if (v82)
      {
        outlined assign with take of AccessibilityCustomAttributes.Value(v98, v116[7] + *(void *)(v111 + 72) * v78);
      }
      else
      {
        v116[(v78 >> 6) + 8] |= 1 << v78;
        uint64_t v87 = (uint64_t *)(v86[6] + 16 * v78);
        *uint64_t v87 = v53;
        v87[1] = v54;
        outlined init with take of AccessibilityCustomAttributes.Value(v98, v86[7] + *(void *)(v111 + 72) * v78);
        uint64_t v88 = v86[2];
        BOOL v89 = __OFADD__(v88, 1);
        uint64_t v90 = v88 + 1;
        if (v89) {
          goto LABEL_62;
        }
        v86[2] = v90;
        swift_bridgeObjectRetain();
      }
      *unint64_t v2 = (uint64_t)v86;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _sypSgWOhTm_0(v110, (uint64_t)&lazy cache variable for type metadata for AccessibilityCustomAttributes.Value?, (uint64_t)type metadata accessor for AccessibilityCustomAttributes.Value, MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for AccessibilityCustomAttributes.Value?);
      outlined destroy of AccessibilityCustomAttributes.Value(v97, (uint64_t (*)(void))type metadata accessor for AccessibilityCustomAttributes.Value);
      int v100 = 1;
    }
LABEL_4:
    outlined destroy of AccessibilityCustomAttributes.Value(v23, (uint64_t (*)(void))type metadata accessor for AccessibilityCustomAttributes.Value);
    uint64_t v30 = v114;
    if (v117) {
      goto LABEL_63;
    }
  }
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  Swift::Bool result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t outlined destroy of AccessibilityCustomAttributes.Value(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void destroy for AccessibilityCustomAttributes.Value(uint64_t *a1)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      swift_bridgeObjectRelease();
      break;
    case 1u:
      uint64_t v3 = *a1;
      unint64_t v4 = a1[1];
      outlined consume of Data._Representation(v3, v4);
      break;
    case 2u:
    case 3u:
    case 6u:
    case 7u:
      unint64_t v2 = (void *)*a1;

      break;
    case 4u:
      uint64_t v5 = type metadata accessor for Date();
      goto LABEL_13;
    case 5u:
      uint64_t v5 = type metadata accessor for URL();
LABEL_13:
      uint64_t v6 = *(void (**)(uint64_t *, uint64_t))(*(void *)(v5 - 8) + 8);
      v6(a1, v5);
      break;
    default:
      return;
  }
}

uint64_t outlined init with copy of AccessibilityCustomAttributes.Value(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for AccessibilityCustomAttributes.Value()
{
  uint64_t result = type metadata singleton initialization cache for AccessibilityCustomAttributes.Value;
  if (!type metadata singleton initialization cache for AccessibilityCustomAttributes.Value) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t *initializeWithCopy for AccessibilityCustomAttributes.Value(uint64_t *a1, uint64_t *a2)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v6 = *a2;
      unint64_t v5 = a2[1];
      outlined copy of Data._Representation(v6, v5);
      *a1 = v6;
      a1[1] = v5;
      break;
    case 2u:
    case 3u:
    case 6u:
    case 7u:
      uint64_t v9 = (void *)*a2;
      *a1 = *a2;
      id v10 = v9;
      break;
    case 4u:
      uint64_t v7 = type metadata accessor for Date();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      break;
    case 5u:
      uint64_t v8 = type metadata accessor for URL();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
      break;
    default:
      uint64_t v4 = a2[1];
      *a1 = *a2;
      a1[1] = v4;
      swift_bridgeObjectRetain();
      break;
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t outlined init with take of AccessibilityCustomAttributes.Value(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AccessibilityCustomAttributes.Value();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for (key: String, value: AccessibilityCustomAttributes.Value)()
{
  if (!lazy cache variable for type metadata for (key: String, value: AccessibilityCustomAttributes.Value))
  {
    type metadata accessor for AccessibilityCustomAttributes.Value();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (key: String, value: AccessibilityCustomAttributes.Value));
    }
  }
}

uint64_t AccessibilityCustomAttributes.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for AccessibilityCustomAttributes.Value?(0, &lazy cache variable for type metadata for AccessibilityCustomAttributes.Value?, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityCustomAttributes.Value, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v18 - v10;
  uint64_t v12 = type metadata accessor for AccessibilityCustomAttributes.Value();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AccessibilityCustomAttributes.Value?(a1, (uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    uint64_t v16 = MEMORY[0x263F8D8F0];
    _sypSgWOhTm_0((uint64_t)v11, (uint64_t)&lazy cache variable for type metadata for AccessibilityCustomAttributes.Value?, (uint64_t)type metadata accessor for AccessibilityCustomAttributes.Value, MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for AccessibilityCustomAttributes.Value?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, a3, (uint64_t)v8);
    _sypSgWOhTm_0(a1, (uint64_t)&lazy cache variable for type metadata for AccessibilityCustomAttributes.Value?, (uint64_t)type metadata accessor for AccessibilityCustomAttributes.Value, v16, (uint64_t (*)(void))type metadata accessor for AccessibilityCustomAttributes.Value?);
    _sypSgWOhTm_0((uint64_t)v8, (uint64_t)&lazy cache variable for type metadata for AccessibilityCustomAttributes.Value?, (uint64_t)type metadata accessor for AccessibilityCustomAttributes.Value, v16, (uint64_t (*)(void))type metadata accessor for AccessibilityCustomAttributes.Value?);
    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined init with take of AccessibilityCustomAttributes.Value((uint64_t)v11, (uint64_t)v15);
    outlined init with copy of AccessibilityCustomAttributes.Value((uint64_t)v15, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for AccessibilityCustomAttributes.Value);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v8, 0, 1, v12);
    specialized Dictionary.subscript.setter((uint64_t)v8, a2, a3);
    _sypSgWOhTm_0(a1, (uint64_t)&lazy cache variable for type metadata for AccessibilityCustomAttributes.Value?, (uint64_t)type metadata accessor for AccessibilityCustomAttributes.Value, MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for AccessibilityCustomAttributes.Value?);
    return outlined destroy of AccessibilityCustomAttributes.Value((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for AccessibilityCustomAttributes.Value);
  }
}

uint64_t outlined init with copy of AccessibilityCustomAttributes.Value?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for AccessibilityCustomAttributes.Value?(0, &lazy cache variable for type metadata for AccessibilityCustomAttributes.Value?, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityCustomAttributes.Value, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for AccessibilityCustomAttributes.Value?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  type metadata accessor for AccessibilityCustomAttributes.Value?(0);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for AccessibilityCustomAttributes.Value();
  double v12 = MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, double))(v15 + 48))(a1, 1, v12) == 1)
  {
    _s7SwiftUI11DisplayListV10ArchiveIDsVSgWOhTm_0(a1, (uint64_t (*)(void))type metadata accessor for AccessibilityCustomAttributes.Value?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, a3, (uint64_t)v10);
    swift_bridgeObjectRelease();
    return _s7SwiftUI11DisplayListV10ArchiveIDsVSgWOhTm_0((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for AccessibilityCustomAttributes.Value?);
  }
  else
  {
    _s7SwiftUI4TextVAAE6EffectO18InteractionMetricsVWObTm_0(a1, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for AccessibilityCustomAttributes.Value);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v19 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v14, a2, a3, isUniquelyReferenced_nonNull_native);
    *uint64_t v4 = v19;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    uint64_t v18 = *v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t v20 = type metadata accessor for AccessibilityCustomAttributes.Value();
      return outlined assign with take of Text.Effect.InteractionMetrics(a1, v19 + *(void *)(*(void *)(v20 - 8) + 72) * v12, (uint64_t (*)(void))type metadata accessor for AccessibilityCustomAttributes.Value);
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
  unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v16 & 1) != (v23 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v22;
  uint64_t v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);

  return swift_bridgeObjectRetain();
}

{
  void *v4;
  void **v5;
  unsigned __int8 v7;
  void *v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;
  char v23;
  uint64_t vars8;

  unint64_t v5 = (void **)v4;
  uint64_t v7 = a3;
  uint64_t v10 = (void *)*v4;
  char v11 = a3 & 0xFFFFFFFF000000FFLL;
  uint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3 & 0xFFFFFFFF000000FFLL);
  BOOL v14 = v10[2];
  uint64_t v15 = (v12 & 1) == 0;
  char v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v17 = v12;
  uint64_t v18 = v10[3];
  if (v18 >= v16 && (a4 & 1) != 0)
  {
LABEL_7:
    uint64_t v19 = *v5;
    if (v17)
    {
LABEL_8:
      uint64_t v20 = v19[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v20 + 8 * v13) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v18 >= v16 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v16, a4 & 1);
  unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(a2, v11);
  if ((v17 & 1) != (v23 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  uint64_t v13 = v22;
  uint64_t v19 = *v5;
  if (v17) {
    goto LABEL_8;
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v13, a2, v11, a1, v19);

  return outlined copy of Material.ID(a2, v7);
}

{
  void *v4;
  void **v5;
  void *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  char v22;
  uint64_t vars8;

  unint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    uint64_t v18 = *v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t result = swift_release();
      *(void *)(v19 + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
  uint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  uint64_t v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);

  return swift_bridgeObjectRetain();
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for AccessibilityCustomAttributes.Value();
  uint64_t v42 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  type metadata accessor for _DictionaryStorage<Int, LocalizedStringKey.FormatArgument>(0, &lazy cache variable for type metadata for _DictionaryStorage<String, AccessibilityCustomAttributes.Value>, (void (*)(uint64_t))type metadata accessor for AccessibilityCustomAttributes.Value);
  int v43 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16)) {
    goto LABEL_41;
  }
  uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v12 = *(void *)(v8 + 64);
  uint64_t v41 = (void *)(v8 + 64);
  if (v11 < 64) {
    uint64_t v13 = ~(-1 << v11);
  }
  else {
    uint64_t v13 = -1;
  }
  unint64_t v14 = v13 & v12;
  uint64_t v39 = v2;
  int64_t v40 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v15 = v9 + 64;
  uint64_t result = swift_retain();
  int64_t v17 = 0;
  while (1)
  {
    if (v14)
    {
      unint64_t v20 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v21 = v20 | (v17 << 6);
      goto LABEL_22;
    }
    int64_t v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v40) {
      break;
    }
    char v23 = v41;
    unint64_t v24 = v41[v22];
    ++v17;
    if (!v24)
    {
      int64_t v17 = v22 + 1;
      if (v22 + 1 >= v40) {
        goto LABEL_34;
      }
      unint64_t v24 = v41[v17];
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v40)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v39;
          if ((v43 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v24 = v41[v25];
        if (!v24)
        {
          while (1)
          {
            int64_t v17 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_43;
            }
            if (v17 >= v40) {
              goto LABEL_34;
            }
            unint64_t v24 = v41[v17];
            ++v25;
            if (v24) {
              goto LABEL_21;
            }
          }
        }
        int64_t v17 = v25;
      }
    }
LABEL_21:
    unint64_t v14 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_22:
    uint64_t v26 = (uint64_t *)(*(void *)(v8 + 48) + 16 * v21);
    uint64_t v28 = *v26;
    uint64_t v27 = v26[1];
    uint64_t v29 = *(void *)(v42 + 72);
    uint64_t v30 = *(void *)(v8 + 56) + v29 * v21;
    if (v43)
    {
      outlined init with take of Text.Effect.InteractionMetrics(v30, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for AccessibilityCustomAttributes.Value);
    }
    else
    {
      outlined init with copy of Text.Effect.InteractionMetrics(v30, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for AccessibilityCustomAttributes.Value);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v31 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v32 = result & ~v31;
    unint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v15 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v32) & ~*(void *)(v15 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v36 = v33 == v35;
        if (v33 == v35) {
          unint64_t v33 = 0;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v15 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v18 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = (void *)(*(void *)(v10 + 48) + 16 * v18);
    *uint64_t v19 = v28;
    v19[1] = v27;
    uint64_t result = outlined init with take of Text.Effect.InteractionMetrics((uint64_t)v7, *(void *)(v10 + 56) + v29 * v18, (uint64_t (*)(void))type metadata accessor for AccessibilityCustomAttributes.Value);
    ++*(void *)(v10 + 16);
  }
  swift_release();
  uint64_t v3 = v39;
  char v23 = v41;
  if ((v43 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v38 = 1 << *(unsigned char *)(v8 + 32);
  if (v38 >= 64) {
    bzero(v23, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *char v23 = -1 << v38;
  }
  *(void *)(v8 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v10;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  void *v39;
  void (**v40)(char *, unint64_t, uint64_t);
  uint64_t v41;
  char *v42;
  uint64_t v43;
  int v44;
  void (**v45)(char *, unint64_t, uint64_t);
  char v46[8];

  uint64_t v3 = v2;
  int v43 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v43 - 8);
  MEMORY[0x270FA5388](v43);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  type metadata accessor for _DictionaryStorage<URL, NamedImage.Cache.WeakCatalog>();
  int64_t v44 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = v9;
  if (*(void *)(v8 + 16))
  {
    uint64_t v37 = v2;
    uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
    uint64_t v12 = *(void *)(v8 + 64);
    uint64_t v39 = (void *)(v8 + 64);
    if (v11 < 64) {
      uint64_t v13 = ~(-1 << v11);
    }
    else {
      uint64_t v13 = -1;
    }
    unint64_t v14 = v13 & v12;
    uint64_t v38 = (unint64_t)(v11 + 63) >> 6;
    int64_t v40 = (void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v45 = (void (**)(char *, unint64_t, uint64_t))(v5 + 32);
    uint64_t v15 = v9 + 64;
    uint64_t result = swift_retain();
    int64_t v17 = 0;
    uint64_t v41 = v8;
    uint64_t v42 = v7;
    while (1)
    {
      if (v14)
      {
        uint64_t v19 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        unint64_t v20 = v19 | (v17 << 6);
      }
      else
      {
        unint64_t v21 = v17 + 1;
        if (__OFADD__(v17, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v38) {
          goto LABEL_34;
        }
        int64_t v22 = v39[v21];
        ++v17;
        if (!v22)
        {
          int64_t v17 = v21 + 1;
          if (v21 + 1 >= v38) {
            goto LABEL_34;
          }
          int64_t v22 = v39[v17];
          if (!v22)
          {
            char v23 = v21 + 2;
            if (v23 >= v38)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v37;
              if (v44)
              {
                BOOL v36 = 1 << *(unsigned char *)(v8 + 32);
                if (v36 >= 64) {
                  bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v39 = -1 << v36;
                }
                *(void *)(v8 + 16) = 0;
              }
              break;
            }
            int64_t v22 = v39[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v17 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_41;
                }
                if (v17 >= v38) {
                  goto LABEL_34;
                }
                int64_t v22 = v39[v17];
                ++v23;
                if (v22) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v17 = v23;
          }
        }
LABEL_21:
        unint64_t v14 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v17 << 6);
      }
      unint64_t v24 = v5;
      int64_t v25 = *(void *)(v5 + 72);
      uint64_t v26 = *(void *)(v8 + 48) + v25 * v20;
      uint64_t v27 = v42;
      uint64_t v28 = v43;
      if (v44)
      {
        (*v45)(v42, v26, v43);
        outlined init with take of NamedImage.Cache.WeakCatalog(*(void *)(v8 + 56) + 8 * v20, (uint64_t)v46);
      }
      else
      {
        (*v40)(v42, v26, v43);
        outlined init with copy of NamedImage.Cache.WeakCatalog(*(void *)(v8 + 56) + 8 * v20, (uint64_t)v46);
      }
      lazy protocol witness table accessor for type AGSubgraphRef and conformance AGSubgraphRef(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v29 = -1 << *(unsigned char *)(v10 + 32);
      uint64_t v30 = result & ~v29;
      uint64_t v31 = v30 >> 6;
      if (((-1 << v30) & ~*(void *)(v15 + 8 * (v30 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v30) & ~*(void *)(v15 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v32 = 0;
        unint64_t v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          char v34 = v31 == v33;
          if (v31 == v33) {
            uint64_t v31 = 0;
          }
          v32 |= v34;
          unint64_t v35 = *(void *)(v15 + 8 * v31);
        }
        while (v35 == -1);
        unint64_t v18 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      (*v45)((char *)(*(void *)(v10 + 48) + v25 * v18), (unint64_t)v27, v28);
      uint64_t result = outlined init with take of NamedImage.Cache.WeakCatalog((uint64_t)v46, *(void *)(v10 + 56) + 8 * v18);
      ++*(void *)(v10 + 16);
      uint64_t v5 = v24;
      uint64_t v8 = v41;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v10;
  return result;
}

{
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  char v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int64_t v33;
  void *v34;
  unint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  int64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  int64_t v58;

  uint64_t v4 = type metadata accessor for NamedImage.BitmapKey(0);
  unint64_t v50 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v52 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = v2;
  uint64_t v6 = *v2;
  type metadata accessor for _DictionaryStorage<NamedImage.BitmapKey, NamedImage.BitmapInfo>();
  unint64_t v51 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = (void *)v7;
  if (*(void *)(v6 + 16))
  {
    uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
    uint64_t v10 = *(void *)(v6 + 64);
    uint64_t v47 = (void *)(v6 + 64);
    if (v9 < 64) {
      uint64_t v11 = ~(-1 << v9);
    }
    else {
      uint64_t v11 = -1;
    }
    uint64_t v12 = v11 & v10;
    uint64_t v46 = (unint64_t)(v9 + 63) >> 6;
    unint64_t v48 = v7 + 64;
    uint64_t result = swift_retain();
    unint64_t v14 = 0;
    uint64_t v49 = v6;
    uint64_t v15 = v48;
    while (1)
    {
      if (v12)
      {
        uint64_t v30 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        uint64_t v31 = v30 | (v14 << 6);
        unint64_t v32 = (uint64_t)v52;
      }
      else
      {
        unint64_t v33 = v14 + 1;
        unint64_t v32 = (uint64_t)v52;
        if (__OFADD__(v14, 1))
        {
          __break(1u);
LABEL_31:
          __break(1u);
          return result;
        }
        char v34 = v47;
        if (v33 >= v46) {
          goto LABEL_24;
        }
        unint64_t v35 = v47[v33];
        ++v14;
        if (!v35)
        {
          unint64_t v14 = v33 + 1;
          if (v33 + 1 >= v46) {
            goto LABEL_24;
          }
          unint64_t v35 = v47[v14];
          if (!v35)
          {
            BOOL v36 = v33 + 2;
            if (v36 >= v46)
            {
LABEL_24:
              swift_release();
              if (v51)
              {
                int v43 = 1 << *(unsigned char *)(v6 + 32);
                if (v43 >= 64) {
                  bzero(v34, ((unint64_t)(v43 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *char v34 = -1 << v43;
                }
                *(void *)(v6 + 16) = 0;
              }
              break;
            }
            unint64_t v35 = v47[v36];
            if (!v35)
            {
              while (1)
              {
                unint64_t v14 = v36 + 1;
                if (__OFADD__(v36, 1)) {
                  goto LABEL_31;
                }
                if (v14 >= v46) {
                  goto LABEL_24;
                }
                unint64_t v35 = v47[v14];
                ++v36;
                if (v35) {
                  goto LABEL_21;
                }
              }
            }
            unint64_t v14 = v36;
          }
        }
LABEL_21:
        uint64_t v12 = (v35 - 1) & v35;
        uint64_t v31 = __clz(__rbit64(v35)) + (v14 << 6);
      }
      uint64_t v37 = *(void *)(v50 + 72);
      uint64_t v38 = *(void *)(v6 + 48) + v37 * v31;
      uint64_t v39 = 96 * v31;
      uint64_t v58 = v14;
      if (v51)
      {
        outlined init with take of Text.Effect.InteractionMetrics(v38, v32, type metadata accessor for NamedImage.BitmapKey);
        int64_t v40 = *(void *)(v6 + 56) + v39;
        int64_t v17 = *(void **)v40;
        unint64_t v18 = *(unsigned char *)(v40 + 8);
        uint64_t v19 = *(void *)(v40 + 16);
        uint64_t v41 = *(unsigned __int8 *)(v40 + 24);
        unint64_t v21 = *(void *)(v40 + 32);
        int64_t v22 = *(void *)(v40 + 40);
        unint64_t v56 = *(unsigned __int8 *)(v40 + 48);
        char v57 = v41;
        uint64_t v42 = *(void *)(v40 + 56);
        uint64_t v54 = *(void *)(v40 + 64);
        uint64_t v55 = v42;
        unint64_t v24 = *(void *)(v40 + 80);
        uint64_t v53 = *(void *)(v40 + 72);
        int64_t v25 = *(unsigned char *)(v40 + 88);
      }
      else
      {
        outlined init with copy of Text.Effect.InteractionMetrics(v38, v32, type metadata accessor for NamedImage.BitmapKey);
        char v16 = *(void *)(v6 + 56) + v39;
        int64_t v17 = *(void **)v16;
        unint64_t v18 = *(unsigned char *)(v16 + 8);
        uint64_t v19 = *(void *)(v16 + 16);
        unint64_t v20 = *(unsigned __int8 *)(v16 + 24);
        unint64_t v21 = *(void *)(v16 + 32);
        int64_t v22 = *(void *)(v16 + 40);
        unint64_t v56 = *(unsigned __int8 *)(v16 + 48);
        char v57 = v20;
        char v23 = *(void *)(v16 + 56);
        uint64_t v54 = *(void *)(v16 + 64);
        uint64_t v55 = v23;
        unint64_t v24 = *(void *)(v16 + 80);
        uint64_t v53 = *(void *)(v16 + 72);
        int64_t v25 = *(unsigned char *)(v16 + 88);
        outlined copy of GraphicsImage.Contents(v17, v18);
      }
      Hasher.init(_seed:)();
      uint64_t v26 = v32;
      NamedImage.BitmapKey.hash(into:)();
      Hasher._finalize()();
      uint64_t v27 = _HashTable.nextHole(atOrAfter:)();
      *(void *)(v15 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
      uint64_t result = outlined init with take of Text.Effect.InteractionMetrics(v26, v8[6] + v37 * v27, type metadata accessor for NamedImage.BitmapKey);
      uint64_t v28 = v8[7] + 96 * v27;
      *(void *)uint64_t v28 = v17;
      *(unsigned char *)(v28 + 8) = v18;
      *(void *)(v28 + 16) = v19;
      *(unsigned char *)(v28 + 24) = v57;
      *(void *)(v28 + 32) = v21;
      *(void *)(v28 + 40) = v22;
      *(unsigned char *)(v28 + 48) = v56;
      uint64_t v29 = v54;
      *(void *)(v28 + 56) = v55;
      *(void *)(v28 + 64) = v29;
      *(void *)(v28 + 72) = v53;
      *(void *)(v28 + 80) = v24;
      *(unsigned char *)(v28 + 88) = v25;
      ++v8[2];
      uint64_t v6 = v49;
      unint64_t v14 = v58;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v45 = v8;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  void *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  int64_t v47;
  void *v48;
  void (**v49)(char *, unint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  int v52;
  void (**v53)(char *, unint64_t, uint64_t);
  int v54;
  char *v55;
  uint64_t v56;

  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  type metadata accessor for _DictionaryStorage<UUID, NamedImage.DecodedInfo>();
  uint64_t v52 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16)) {
    goto LABEL_41;
  }
  uint64_t v55 = v8;
  uint64_t v46 = v2;
  uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v13 = *(void *)(v9 + 64);
  unint64_t v48 = (void *)(v9 + 64);
  if (v12 < 64) {
    unint64_t v14 = ~(-1 << v12);
  }
  else {
    unint64_t v14 = -1;
  }
  uint64_t v15 = v14 & v13;
  uint64_t v47 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v49 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  uint64_t v53 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  char v16 = v10 + 64;
  uint64_t result = swift_retain();
  unint64_t v18 = 0;
  unint64_t v50 = v6;
  unint64_t v51 = v9;
  unint64_t v56 = v5;
  while (1)
  {
    if (v15)
    {
      unint64_t v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      int64_t v22 = v21 | (v18 << 6);
      goto LABEL_22;
    }
    char v23 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v23 >= v47) {
      break;
    }
    unint64_t v24 = v48;
    int64_t v25 = v48[v23];
    ++v18;
    if (!v25)
    {
      unint64_t v18 = v23 + 1;
      if (v23 + 1 >= v47) {
        goto LABEL_34;
      }
      int64_t v25 = v48[v18];
      if (!v25)
      {
        uint64_t v26 = v23 + 2;
        if (v26 >= v47)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v46;
          if ((v52 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        int64_t v25 = v48[v26];
        if (!v25)
        {
          while (1)
          {
            unint64_t v18 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_43;
            }
            if (v18 >= v47) {
              goto LABEL_34;
            }
            int64_t v25 = v48[v18];
            ++v26;
            if (v25) {
              goto LABEL_21;
            }
          }
        }
        unint64_t v18 = v26;
      }
    }
LABEL_21:
    uint64_t v15 = (v25 - 1) & v25;
    int64_t v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_22:
    uint64_t v27 = *(void *)(v6 + 72);
    uint64_t v28 = *(void *)(v9 + 48) + v27 * v22;
    uint64_t v29 = 48 * v22;
    if (v52)
    {
      (*v53)(v55, v28, v56);
      uint64_t v30 = *(void *)(v9 + 56) + v29;
      uint64_t v31 = *(void **)v30;
      unint64_t v32 = *(unsigned char *)(v30 + 8);
      unint64_t v33 = *(void *)(v30 + 16);
      char v34 = *(void *)(v30 + 24);
      unint64_t v35 = *(void *)(v30 + 32);
      uint64_t v54 = *(unsigned __int8 *)(v30 + 40);
    }
    else
    {
      (*v49)(v55, v28, v56);
      BOOL v36 = *(void *)(v9 + 56) + v29;
      uint64_t v31 = *(void **)v36;
      unint64_t v32 = *(unsigned char *)(v36 + 8);
      unint64_t v33 = *(void *)(v36 + 16);
      char v34 = *(void *)(v36 + 24);
      unint64_t v35 = *(void *)(v36 + 32);
      uint64_t v54 = *(unsigned __int8 *)(v36 + 40);
      outlined copy of GraphicsImage.Contents(v31, v32);
    }
    lazy protocol witness table accessor for type UUID and conformance UUID();
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v37 = -1 << *(unsigned char *)(v11 + 32);
    uint64_t v38 = result & ~v37;
    uint64_t v39 = v38 >> 6;
    if (((-1 << v38) & ~*(void *)(v16 + 8 * (v38 >> 6))) != 0)
    {
      uint64_t v19 = __clz(__rbit64((-1 << v38) & ~*(void *)(v16 + 8 * (v38 >> 6)))) | v38 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      int64_t v40 = 0;
      uint64_t v41 = (unint64_t)(63 - v37) >> 6;
      do
      {
        if (++v39 == v41 && (v40 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        uint64_t v42 = v39 == v41;
        if (v39 == v41) {
          uint64_t v39 = 0;
        }
        v40 |= v42;
        int v43 = *(void *)(v16 + 8 * v39);
      }
      while (v43 == -1);
      uint64_t v19 = __clz(__rbit64(~v43)) + (v39 << 6);
    }
    *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v53)(*(void *)(v11 + 48) + v27 * v19, v55, v56);
    unint64_t v20 = *(void *)(v11 + 56) + 48 * v19;
    *(void *)unint64_t v20 = v31;
    *(unsigned char *)(v20 + 8) = v32;
    *(void *)(v20 + 16) = v33;
    *(void *)(v20 + 24) = v34;
    *(void *)(v20 + 32) = v35;
    *(unsigned char *)(v20 + 40) = v54;
    ++*(void *)(v11 + 16);
    uint64_t v6 = v50;
    uint64_t v9 = v51;
  }
  swift_release();
  uint64_t v3 = v46;
  unint64_t v24 = v48;
  if ((v52 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  int64_t v44 = 1 << *(unsigned char *)(v9 + 32);
  if (v44 >= 64) {
    bzero(v24, ((unint64_t)(v44 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v24 = -1 << v44;
  }
  *(void *)(v9 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v11;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  Swift::UInt v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  void *v36;
  uint64_t v37;
  int v38;

  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for Text.Effect.InteractionMetrics();
  uint64_t v37 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  type metadata accessor for _DictionaryStorage<Text.Effect.AttributeTracker.Key, Text.Effect.AttributeTracker.AnyValue>(0, &lazy cache variable for type metadata for _DictionaryStorage<TextRenderLayer.SegmentIdentifierKey, Text.Effect.InteractionMetrics>, (void (*)(uint64_t))type metadata accessor for Text.Effect.InteractionMetrics, (void (*)(void))lazy protocol witness table accessor for type TextRenderLayer.SegmentIdentifierKey and conformance TextRenderLayer.SegmentIdentifierKey);
  uint64_t v38 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = result;
  if (*(void *)(v8 + 16))
  {
    char v34 = v2;
    uint64_t v11 = 0;
    uint64_t v12 = *(void *)(v8 + 64);
    BOOL v36 = (void *)(v8 + 64);
    uint64_t v13 = 1 << *(unsigned char *)(v8 + 32);
    if (v13 < 64) {
      unint64_t v14 = ~(-1 << v13);
    }
    else {
      unint64_t v14 = -1;
    }
    uint64_t v15 = v14 & v12;
    unint64_t v35 = (unint64_t)(v13 + 63) >> 6;
    char v16 = result + 64;
    while (1)
    {
      if (v15)
      {
        unint64_t v18 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        uint64_t v19 = v18 | (v11 << 6);
      }
      else
      {
        unint64_t v20 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        uint64_t result = (uint64_t)v36;
        if (v20 >= v35) {
          goto LABEL_34;
        }
        unint64_t v21 = v36[v20];
        ++v11;
        if (!v21)
        {
          uint64_t v11 = v20 + 1;
          if (v20 + 1 >= v35) {
            goto LABEL_34;
          }
          unint64_t v21 = v36[v11];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v35)
            {
LABEL_34:
              if ((v38 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v34;
                goto LABEL_41;
              }
              unint64_t v33 = 1 << *(unsigned char *)(v8 + 32);
              if (v33 >= 64) {
                bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *BOOL v36 = -1 << v33;
              }
              uint64_t v3 = v34;
              *(void *)(v8 + 16) = 0;
              break;
            }
            unint64_t v21 = v36[v22];
            if (!v21)
            {
              while (1)
              {
                uint64_t v11 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_43;
                }
                if (v11 >= v35) {
                  goto LABEL_34;
                }
                unint64_t v21 = v36[v11];
                ++v22;
                if (v21) {
                  goto LABEL_21;
                }
              }
            }
            uint64_t v11 = v22;
          }
        }
LABEL_21:
        uint64_t v15 = (v21 - 1) & v21;
        uint64_t v19 = __clz(__rbit64(v21)) + (v11 << 6);
      }
      char v23 = *(void *)(*(void *)(v8 + 48) + 8 * v19);
      unint64_t v24 = *(void *)(v37 + 72);
      int64_t v25 = *(void *)(v8 + 56) + v24 * v19;
      if (v38) {
        outlined init with take of Text.Effect.InteractionMetrics(v25, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for Text.Effect.InteractionMetrics);
      }
      else {
        outlined init with copy of Text.Effect.InteractionMetrics(v25, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for Text.Effect.InteractionMetrics);
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v23);
      uint64_t result = Hasher._finalize()();
      uint64_t v26 = -1 << *(unsigned char *)(v10 + 32);
      uint64_t v27 = result & ~v26;
      uint64_t v28 = v27 >> 6;
      if (((-1 << v27) & ~*(void *)(v16 + 8 * (v27 >> 6))) != 0)
      {
        int64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v16 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v29 = 0;
        uint64_t v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          uint64_t v31 = v28 == v30;
          if (v28 == v30) {
            uint64_t v28 = 0;
          }
          v29 |= v31;
          unint64_t v32 = *(void *)(v16 + 8 * v28);
        }
        while (v32 == -1);
        int64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(void *)(v16 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(void *)(*(void *)(v10 + 48) + 8 * v17) = v23;
      uint64_t result = outlined init with take of Text.Effect.InteractionMetrics((uint64_t)v7, *(void *)(v10 + 56) + v24 * v17, (uint64_t (*)(void))type metadata accessor for Text.Effect.InteractionMetrics);
      ++*(void *)(v10 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_41:
  *uint64_t v3 = v10;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void (**v16)(char *, unint64_t, uint64_t);
  uint64_t v17;
  uint64_t result;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  void *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  void *v41;
  void (**v42)(char *, unint64_t, uint64_t);
  uint64_t i;
  uint64_t v44;
  int v45;

  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  _ss18_DictionaryStorageCySo13AGSubgraphRefaSayyADcGGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<UUID, TextRenderSurface>, MEMORY[0x263F07508], (void (*)(uint64_t))type metadata accessor for TextRenderSurface, (void (*)(void))lazy protocol witness table accessor for type UUID and conformance UUID);
  uint64_t v45 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16)) {
    goto LABEL_41;
  }
  uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v13 = *(void *)(v9 + 64);
  uint64_t v41 = (void *)(v9 + 64);
  if (v12 < 64) {
    unint64_t v14 = ~(-1 << v12);
  }
  else {
    unint64_t v14 = -1;
  }
  uint64_t v15 = v14 & v13;
  uint64_t v39 = v2;
  int64_t v40 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v42 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  int64_t v44 = v6;
  char v16 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  int64_t v17 = v10 + 64;
  uint64_t result = swift_retain();
  uint64_t v19 = 0;
  for (i = v9; ; uint64_t v9 = i)
  {
    if (v15)
    {
      unint64_t v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      int64_t v22 = v21 | (v19 << 6);
      goto LABEL_22;
    }
    char v23 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v23 >= v40) {
      break;
    }
    unint64_t v24 = v41;
    int64_t v25 = v41[v23];
    ++v19;
    if (!v25)
    {
      uint64_t v19 = v23 + 1;
      if (v23 + 1 >= v40) {
        goto LABEL_34;
      }
      int64_t v25 = v41[v19];
      if (!v25)
      {
        uint64_t v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v39;
          if ((v45 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        int64_t v25 = v41[v26];
        if (!v25)
        {
          while (1)
          {
            uint64_t v19 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_43;
            }
            if (v19 >= v40) {
              goto LABEL_34;
            }
            int64_t v25 = v41[v19];
            ++v26;
            if (v25) {
              goto LABEL_21;
            }
          }
        }
        uint64_t v19 = v26;
      }
    }
LABEL_21:
    uint64_t v15 = (v25 - 1) & v25;
    int64_t v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_22:
    uint64_t v27 = *(void *)(v44 + 72);
    uint64_t v28 = *(void *)(v9 + 48) + v27 * v22;
    if (v45)
    {
      (*v16)(v8, v28, v5);
      uint64_t v29 = *(id *)(*(void *)(v9 + 56) + 8 * v22);
    }
    else
    {
      (*v42)(v8, v28, v5);
      uint64_t v29 = *(id *)(*(void *)(v9 + 56) + 8 * v22);
    }
    lazy protocol witness table accessor for type UUID and conformance UUID();
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v30 = -1 << *(unsigned char *)(v11 + 32);
    uint64_t v31 = result & ~v30;
    unint64_t v32 = v31 >> 6;
    if (((-1 << v31) & ~*(void *)(v17 + 8 * (v31 >> 6))) != 0)
    {
      unint64_t v20 = __clz(__rbit64((-1 << v31) & ~*(void *)(v17 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v33 = 0;
      char v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        unint64_t v35 = v32 == v34;
        if (v32 == v34) {
          unint64_t v32 = 0;
        }
        v33 |= v35;
        BOOL v36 = *(void *)(v17 + 8 * v32);
      }
      while (v36 == -1);
      unint64_t v20 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(void *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v16)(*(void *)(v11 + 48) + v27 * v20, v8, v5);
    *(void *)(*(void *)(v11 + 56) + 8 * v20) = v29;
    ++*(void *)(v11 + 16);
  }
  swift_release();
  uint64_t v3 = v39;
  unint64_t v24 = v41;
  if ((v45 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v37 = 1 << *(unsigned char *)(v9 + 32);
  if (v37 >= 64) {
    bzero(v24, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v24 = -1 << v37;
  }
  *(void *)(v9 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v11;
  return result;
}

void type metadata accessor for _DictionaryStorage<Int, LocalizedStringKey.FormatArgument>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for _DictionaryStorage();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = (void *)(a5[6] + 16 * a1);
  *uint64_t v8 = a2;
  v8[1] = a3;
  uint64_t v9 = a5[7];
  uint64_t v10 = type metadata accessor for AccessibilityCustomAttributes.Value();
  uint64_t result = _sSo21NSAttributedStringKeya3key_yp5valuetSgWObTm_0(a4, v9 + *(void *)(*(void *)(v10 - 8) + 72) * a1, (uint64_t (*)(void))type metadata accessor for AccessibilityCustomAttributes.Value);
  uint64_t v12 = a5[2];
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a5[2] = v14;
  }
  return result;
}

void type metadata accessor for AccessibilityCustomAttributes.Value?(uint64_t a1)
{
}

uint64_t outlined init with copy of Text.Effect.InteractionMetrics(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(unsigned int *)(a1 + 16);
  uint64_t v6 = swift_retain();
  specialized ForEachState.Evictor.value.getter(v6, v4, v5, a3);
  swift_release();

  return AGGraphSetOutputValue();
}

char *specialized ForEachState.Evictor.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t result = (char *)AGGraphGetWeakValue();
  if (!result)
  {
    if (one-time initialization token for evictByDefault != -1) {
      swift_once();
    }
    uint64_t result = &static ForEachEvictionInput.evictByDefault;
  }
  if (*result == 1)
  {
    uint64_t Value = (unsigned int *)AGGraphGetValue();
    return (char *)a4(*Value);
  }
  return result;
}

uint64_t specialized ForEachState.evictItems(seed:)(uint64_t result)
{
  if (*(_DWORD *)(v1 + 320) == result || *(unsigned char *)(v1 + 324) != 1) {
    return result;
  }
  *(_DWORD *)(v1 + 320) = result;
  unint64_t v47 = MEMORY[0x263F8EE78];
  unint64_t v2 = v1 + 272;
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 272);
  uint64_t result = specialized Dictionary.startIndex.getter(v3);
  if (v5) {
    goto LABEL_68;
  }
  unint64_t v6 = result;
  int v7 = v4;
  uint64_t v39 = (BOOL *)(v1 + 324);
  uint64_t v42 = 1 << *(unsigned char *)(v3 + 32);
  int v41 = *(_DWORD *)(v3 + 36);
  uint64_t v40 = v4;
  uint64_t v43 = 64;
  uint64_t v8 = v4;
  do
  {
    if (v7 != v41)
    {
      __break(1u);
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      __break(1u);
      goto LABEL_64;
    }
    if (v6 == v42) {
      goto LABEL_40;
    }
    if ((v6 & 0x8000000000000000) != 0) {
      goto LABEL_58;
    }
    uint64_t v9 = *(void *)v2;
    if ((uint64_t)v6 >= 1 << *(unsigned char *)(*(void *)v2 + 32)) {
      goto LABEL_58;
    }
    unint64_t v10 = v6 >> 6;
    if ((*(void *)(v9 + 8 * (v6 >> 6) + 64) & (1 << v6)) == 0) {
      goto LABEL_59;
    }
    if (*(_DWORD *)(v9 + 36) != v8) {
      goto LABEL_60;
    }
    int v7 = v8;
    outlined init with copy of Subview.ID(*(void *)(v9 + 48) + 40 * v6, (uint64_t)v46);
    uint64_t v11 = *(void *)(*(void *)(v9 + 56) + 8 * v6);
    if (*(unsigned char *)(v11 + 166)) {
      goto LABEL_20;
    }
    if (*(unsigned char *)(v11 + 165) != 1)
    {
      --*(unsigned char *)(v11 + 165);
LABEL_20:
      swift_retain();
      goto LABEL_21;
    }
    swift_beginAccess();
    int v12 = *(_DWORD *)(v11 + 24);
    swift_retain();
    if (v12 == 1)
    {
      uint64_t v13 = swift_retain();
      MEMORY[0x24C522D60](v13);
      if (*(void *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      outlined init with copy of Subview.ID((uint64_t)v46, (uint64_t)v44);
      swift_beginAccess();
      specialized Set._Variant.insert(_:)((uint64_t)v45, (uint64_t)v44);
      swift_endAccess();
      outlined destroy of Subview.ID((uint64_t)v45);
      --v43;
    }
LABEL_21:
    uint64_t v14 = *(void *)v2;
    uint64_t v15 = 1 << *(unsigned char *)(*(void *)v2 + 32);
    if ((uint64_t)v6 >= v15) {
      goto LABEL_61;
    }
    uint64_t v16 = v14 + 64;
    uint64_t v17 = *(void *)(v14 + 64 + 8 * v10);
    if ((v17 & (1 << v6)) == 0) {
      goto LABEL_62;
    }
    if (*(_DWORD *)(v14 + 36) != v8) {
      goto LABEL_63;
    }
    unint64_t v18 = v17 & (-2 << (v6 & 0x3F));
    if (v18)
    {
      swift_release();
      unint64_t v6 = __clz(__rbit64(v18)) | v6 & 0xFFFFFFFFFFFFFFC0;
      goto LABEL_6;
    }
    unint64_t v19 = v10 + 1;
    unint64_t v20 = (unint64_t)(v15 + 63) >> 6;
    if (v10 + 1 >= v20) {
      goto LABEL_38;
    }
    unint64_t v21 = *(void *)(v16 + 8 * v19);
    if (!v21)
    {
      unint64_t v19 = v10 + 2;
      if (v10 + 2 >= v20) {
        goto LABEL_38;
      }
      unint64_t v21 = *(void *)(v16 + 8 * v19);
      if (!v21)
      {
        unint64_t v19 = v10 + 3;
        if (v10 + 3 >= v20) {
          goto LABEL_38;
        }
        unint64_t v21 = *(void *)(v16 + 8 * v19);
        if (!v21)
        {
          uint64_t v22 = v14 + 96;
          while (v20 - 4 != v10)
          {
            unint64_t v21 = *(void *)(v22 + 8 * v10++);
            if (v21)
            {
              outlined consume of [String : AccessibilityCustomAttributes.Value].Index._Variant(v6, v8, 0);
              swift_release();
              unint64_t v19 = v10 + 3;
              goto LABEL_28;
            }
          }
          outlined consume of [String : AccessibilityCustomAttributes.Value].Index._Variant(v6, v8, 0);
LABEL_38:
          swift_release();
          unint64_t v6 = v15;
          goto LABEL_6;
        }
      }
    }
    swift_release();
LABEL_28:
    unint64_t v6 = __clz(__rbit64(v21)) | (v19 << 6);
LABEL_6:
    uint64_t result = outlined destroy of Subview.ID((uint64_t)v46);
    uint64_t v8 = v40;
  }
  while (v43 > 0);
  uint64_t v42 = v6;
  uint64_t v8 = v40;
LABEL_40:
  unint64_t v2 = v47;
  if (v47 >> 62)
  {
LABEL_64:
    swift_bridgeObjectRetain();
    uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v23) {
      goto LABEL_65;
    }
LABEL_42:
    if (v23 >= 1)
    {
      uint64_t v24 = 0;
      unint64_t v25 = v2 & 0xC000000000000001;
      while (1)
      {
        if (v25)
        {
          uint64_t v26 = MEMORY[0x24C523D60](v24, v2);
        }
        else
        {
          uint64_t v26 = *(void *)(v2 + 8 * v24 + 32);
          swift_retain();
        }
        AGSubgraphApply();
        AGSubgraphRemoveChild();
        *(_WORD *)(v26 + 165) = 256;
        swift_beginAccess();
        int v27 = *(_DWORD *)(v26 + 24) - 1;
        *(_DWORD *)(v26 + 24) = v27;
        if (v27) {
          goto LABEL_44;
        }
        uint64_t Strong = swift_weakLoadStrong();
        if (Strong)
        {
          uint64_t v29 = Strong;
          swift_beginAccess();
          uint64_t v30 = *(void *)(v29 + 272);
          if (*(void *)(v30 + 16))
          {
            swift_bridgeObjectRetain();
            unint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)(v26 + 32);
            if (v32)
            {
              unint64_t v33 = v31;
              int v34 = *(_DWORD *)(v30 + 36);
              swift_bridgeObjectRelease();
              swift_beginAccess();
              int v35 = v34;
              unint64_t v25 = v2 & 0xC000000000000001;
              specialized Dictionary._Variant.remove(at:)((uint64_t)v46, v33, v35, 0);
              swift_endAccess();
              swift_release();
              swift_release();
              outlined destroy of Subview.ID((uint64_t)v46);
              goto LABEL_55;
            }
            swift_bridgeObjectRelease();
          }
          swift_retain();
          uint64_t v36 = swift_bridgeObjectRetain();
          uint64_t v37 = specialized _NativeDictionary.filter(_:)(v36, v26, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))specialized closure #1 in _NativeDictionary.filter(_:));
          swift_bridgeObjectRelease();
          swift_release();
          *(void *)(v29 + 272) = v37;
          swift_release();
          swift_bridgeObjectRelease();
          unint64_t v25 = v2 & 0xC000000000000001;
        }
LABEL_55:
        uint64_t IsValid = AGSubgraphIsValid();
        if (IsValid)
        {
          MEMORY[0x270FA5388](IsValid);
          AGSubgraphApply();
          AGSubgraphInvalidate();
        }
LABEL_44:
        ++v24;
        swift_release();
        if (v23 == v24) {
          goto LABEL_65;
        }
      }
    }
    __break(1u);
LABEL_68:
    __break(1u);
    return result;
  }
  uint64_t v23 = *(void *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v23) {
    goto LABEL_42;
  }
LABEL_65:
  swift_bridgeObjectRelease();
  uint64_t result = outlined consume of [String : AccessibilityCustomAttributes.Value].Index._Variant(v42, v8, 0);
  *uint64_t v39 = v43 == 0;
  return result;
}

{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t Strong;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t IsValid;
  BOOL *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  unsigned char v44[40];
  unsigned char v45[40];
  unsigned char v46[40];
  unint64_t v47;

  if (*(_DWORD *)(v1 + 304) == result || *(unsigned char *)(v1 + 308) != 1) {
    return result;
  }
  *(_DWORD *)(v1 + 304) = result;
  unint64_t v47 = MEMORY[0x263F8EE78];
  unint64_t v2 = v1 + 256;
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 256);
  uint64_t result = specialized Dictionary.startIndex.getter(v3);
  if (v5) {
    goto LABEL_68;
  }
  unint64_t v6 = result;
  int v7 = v4;
  uint64_t v39 = (BOOL *)(v1 + 308);
  uint64_t v42 = 1 << *(unsigned char *)(v3 + 32);
  int v41 = *(_DWORD *)(v3 + 36);
  uint64_t v40 = v4;
  uint64_t v43 = 64;
  uint64_t v8 = v4;
  do
  {
    if (v7 != v41)
    {
      __break(1u);
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      __break(1u);
      goto LABEL_64;
    }
    if (v6 == v42) {
      goto LABEL_40;
    }
    if ((v6 & 0x8000000000000000) != 0) {
      goto LABEL_58;
    }
    uint64_t v9 = *(void *)v2;
    if ((uint64_t)v6 >= 1 << *(unsigned char *)(*(void *)v2 + 32)) {
      goto LABEL_58;
    }
    unint64_t v10 = v6 >> 6;
    if ((*(void *)(v9 + 8 * (v6 >> 6) + 64) & (1 << v6)) == 0) {
      goto LABEL_59;
    }
    if (*(_DWORD *)(v9 + 36) != v8) {
      goto LABEL_60;
    }
    int v7 = v8;
    outlined init with copy of AnyHashable(*(void *)(v9 + 48) + 40 * v6, (uint64_t)v46);
    uint64_t v11 = *(void *)(*(void *)(v9 + 56) + 8 * v6);
    if (*(unsigned char *)(v11 + 166)) {
      goto LABEL_20;
    }
    if (*(unsigned char *)(v11 + 165) != 1)
    {
      --*(unsigned char *)(v11 + 165);
LABEL_20:
      swift_retain();
      goto LABEL_21;
    }
    swift_beginAccess();
    int v12 = *(_DWORD *)(v11 + 24);
    swift_retain();
    if (v12 == 1)
    {
      uint64_t v13 = swift_retain();
      MEMORY[0x24C522D60](v13);
      if (*(void *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      outlined init with copy of AnyHashable((uint64_t)v46, (uint64_t)v44);
      swift_beginAccess();
      specialized Set._Variant.insert(_:)((uint64_t)v45, (uint64_t)v44);
      swift_endAccess();
      outlined destroy of AnyHashable((uint64_t)v45);
      --v43;
    }
LABEL_21:
    uint64_t v14 = *(void *)v2;
    uint64_t v15 = 1 << *(unsigned char *)(*(void *)v2 + 32);
    if ((uint64_t)v6 >= v15) {
      goto LABEL_61;
    }
    uint64_t v16 = v14 + 64;
    uint64_t v17 = *(void *)(v14 + 64 + 8 * v10);
    if ((v17 & (1 << v6)) == 0) {
      goto LABEL_62;
    }
    if (*(_DWORD *)(v14 + 36) != v8) {
      goto LABEL_63;
    }
    unint64_t v18 = v17 & (-2 << (v6 & 0x3F));
    if (v18)
    {
      swift_release();
      unint64_t v6 = __clz(__rbit64(v18)) | v6 & 0xFFFFFFFFFFFFFFC0;
      goto LABEL_6;
    }
    unint64_t v19 = v10 + 1;
    unint64_t v20 = (unint64_t)(v15 + 63) >> 6;
    if (v10 + 1 >= v20) {
      goto LABEL_38;
    }
    unint64_t v21 = *(void *)(v16 + 8 * v19);
    if (!v21)
    {
      unint64_t v19 = v10 + 2;
      if (v10 + 2 >= v20) {
        goto LABEL_38;
      }
      unint64_t v21 = *(void *)(v16 + 8 * v19);
      if (!v21)
      {
        unint64_t v19 = v10 + 3;
        if (v10 + 3 >= v20) {
          goto LABEL_38;
        }
        unint64_t v21 = *(void *)(v16 + 8 * v19);
        if (!v21)
        {
          uint64_t v22 = v14 + 96;
          while (v20 - 4 != v10)
          {
            unint64_t v21 = *(void *)(v22 + 8 * v10++);
            if (v21)
            {
              outlined consume of [String : AccessibilityCustomAttributes.Value].Index._Variant(v6, v8, 0);
              swift_release();
              unint64_t v19 = v10 + 3;
              goto LABEL_28;
            }
          }
          outlined consume of [String : AccessibilityCustomAttributes.Value].Index._Variant(v6, v8, 0);
LABEL_38:
          swift_release();
          unint64_t v6 = v15;
          goto LABEL_6;
        }
      }
    }
    swift_release();
LABEL_28:
    unint64_t v6 = __clz(__rbit64(v21)) | (v19 << 6);
LABEL_6:
    uint64_t result = outlined destroy of AnyHashable((uint64_t)v46);
    uint64_t v8 = v40;
  }
  while (v43 > 0);
  uint64_t v42 = v6;
  uint64_t v8 = v40;
LABEL_40:
  unint64_t v2 = v47;
  if (v47 >> 62)
  {
LABEL_64:
    swift_bridgeObjectRetain();
    uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v23) {
      goto LABEL_65;
    }
LABEL_42:
    if (v23 >= 1)
    {
      uint64_t v24 = 0;
      unint64_t v25 = v2 & 0xC000000000000001;
      while (1)
      {
        if (v25)
        {
          uint64_t v26 = MEMORY[0x24C523D60](v24, v2);
        }
        else
        {
          uint64_t v26 = *(void *)(v2 + 8 * v24 + 32);
          swift_retain();
        }
        AGSubgraphApply();
        AGSubgraphRemoveChild();
        *(_WORD *)(v26 + 165) = 256;
        swift_beginAccess();
        int v27 = *(_DWORD *)(v26 + 24) - 1;
        *(_DWORD *)(v26 + 24) = v27;
        if (v27) {
          goto LABEL_44;
        }
        uint64_t Strong = swift_weakLoadStrong();
        if (Strong)
        {
          uint64_t v29 = Strong;
          swift_beginAccess();
          uint64_t v30 = *(void *)(v29 + 256);
          if (*(void *)(v30 + 16))
          {
            swift_bridgeObjectRetain();
            unint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)(v26 + 32);
            if (v32)
            {
              unint64_t v33 = v31;
              int v34 = *(_DWORD *)(v30 + 36);
              swift_bridgeObjectRelease();
              swift_beginAccess();
              int v35 = v34;
              unint64_t v25 = v2 & 0xC000000000000001;
              specialized Dictionary._Variant.remove(at:)((uint64_t)v46, v33, v35, 0);
              swift_endAccess();
              swift_release();
              swift_release();
              outlined destroy of AnyHashable((uint64_t)v46);
              goto LABEL_55;
            }
            swift_bridgeObjectRelease();
          }
          swift_retain();
          uint64_t v36 = swift_bridgeObjectRetain();
          uint64_t v37 = specialized _NativeDictionary.filter(_:)(v36, v26, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))specialized closure #1 in _NativeDictionary.filter(_:));
          swift_bridgeObjectRelease();
          swift_release();
          *(void *)(v29 + 256) = v37;
          swift_release();
          swift_bridgeObjectRelease();
          unint64_t v25 = v2 & 0xC000000000000001;
        }
LABEL_55:
        uint64_t IsValid = AGSubgraphIsValid();
        if (IsValid)
        {
          MEMORY[0x270FA5388](IsValid);
          AGSubgraphApply();
          AGSubgraphInvalidate();
        }
LABEL_44:
        ++v24;
        swift_release();
        if (v23 == v24) {
          goto LABEL_65;
        }
      }
    }
    __break(1u);
LABEL_68:
    __break(1u);
    return result;
  }
  uint64_t v23 = *(void *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v23) {
    goto LABEL_42;
  }
LABEL_65:
  swift_bridgeObjectRelease();
  uint64_t result = outlined consume of [String : AccessibilityCustomAttributes.Value].Index._Variant(v42, v8, 0);
  *uint64_t v39 = v43 == 0;
  return result;
}

{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  uint64_t Strong;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  int v41;
  uint64_t v42;
  unint64_t *v43;
  uint64_t IsValid;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53[3];
  unint64_t v54;

  if (*(_DWORD *)(v1 + 264) == result || (*(unsigned char *)(v1 + 268) & 1) == 0) {
    return result;
  }
  *(_DWORD *)(v1 + 264) = result;
  uint64_t v54 = MEMORY[0x263F8EE78];
  uint64_t v4 = v1 + 216;
  swift_beginAccess();
  char v5 = *(void *)(v1 + 216);
  uint64_t result = specialized Dictionary.startIndex.getter(v5);
  if (v7)
  {
    __break(1u);
    return result;
  }
  uint64_t v8 = v6;
  uint64_t v9 = *(unsigned int *)(v5 + 36);
  if (v9 != v6)
  {
LABEL_74:
    __break(1u);
    goto LABEL_75;
  }
  unint64_t v51 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v46 = v1;
  if (result == v51)
  {
    unint64_t v2 = MEMORY[0x263F8EE78];
    unint64_t v50 = 64;
    uint64_t v49 = v6;
    uint64_t v1 = result;
    goto LABEL_43;
  }
  uint64_t v49 = v6;
  unint64_t v2 = 1;
  unint64_t v50 = 64;
  uint64_t v1 = result;
  do
  {
    if ((v1 & 0x8000000000000000) != 0
      || (unint64_t v10 = *(void *)v4, (uint64_t)v1 >= 1 << *(unsigned char *)(*(void *)v4 + 32)))
    {
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
LABEL_69:
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      __break(1u);
LABEL_72:
      __break(1u);
LABEL_73:
      __break(1u);
      goto LABEL_74;
    }
    uint64_t v11 = v1 >> 6;
    int v12 = 1 << v1;
    if ((*(void *)(v10 + 8 * (v1 >> 6) + 64) & (1 << v1)) == 0) {
      goto LABEL_67;
    }
    if (*(_DWORD *)(v10 + 36) != v8) {
      goto LABEL_68;
    }
    uint64_t v3 = *(void *)(*(void *)(v10 + 56) + 8 * v1);
    if (*(unsigned char *)(v3 + 134) == 1) {
      goto LABEL_20;
    }
    if (*(unsigned char *)(v3 + 133) != 1)
    {
      --*(unsigned char *)(v3 + 133);
LABEL_20:
      swift_retain();
      goto LABEL_21;
    }
    uint64_t v13 = v9;
    uint64_t v14 = v1;
    uint64_t v15 = *(void *)(*(void *)(v10 + 48) + 8 * v1);
    swift_beginAccess();
    uint64_t v16 = *(_DWORD *)(v3 + 24);
    swift_retain();
    if (v16 == 1)
    {
      uint64_t v17 = swift_retain();
      MEMORY[0x24C522D60](v17);
      if (*(void *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_beginAccess();
      specialized Set._Variant.insert(_:)(v53, v15);
      swift_endAccess();
      --v50;
    }
    uint64_t v1 = v14;
    uint64_t v9 = v13;
LABEL_21:
    unint64_t v18 = *(void *)v4;
    unint64_t v19 = 1 << *(unsigned char *)(*(void *)v4 + 32);
    if ((uint64_t)v1 >= v19) {
      goto LABEL_69;
    }
    unint64_t v20 = v18 + 64;
    unint64_t v21 = *(void *)(v18 + 64 + 8 * v11);
    if ((v21 & v12) == 0) {
      goto LABEL_70;
    }
    if (*(_DWORD *)(v18 + 36) != v8) {
      goto LABEL_71;
    }
    uint64_t v22 = v1;
    uint64_t v23 = v21 & (-2 << (v1 & 0x3F));
    if (v23)
    {
      swift_release();
      uint64_t v1 = __clz(__rbit64(v23)) | v22 & 0xFFFFFFFFFFFFFFC0;
      goto LABEL_38;
    }
    uint64_t v24 = v22;
    unint64_t v25 = v11 + 1;
    uint64_t v26 = (unint64_t)(v19 + 63) >> 6;
    if (v11 + 1 >= v26) {
      goto LABEL_37;
    }
    int v27 = *(void *)(v20 + 8 * v25);
    if (!v27)
    {
      unint64_t v25 = v11 + 2;
      if (v11 + 2 >= v26) {
        goto LABEL_37;
      }
      int v27 = *(void *)(v20 + 8 * v25);
      if (!v27)
      {
        uint64_t v28 = v18 + 88;
        while (v26 - 3 != v11)
        {
          int v27 = *(void *)(v28 + 8 * v11++);
          if (v27)
          {
            outlined consume of [String : AccessibilityCustomAttributes.Value].Index._Variant(v24, v8, 0);
            swift_release();
            unint64_t v25 = v11 + 2;
            goto LABEL_29;
          }
        }
        outlined consume of [String : AccessibilityCustomAttributes.Value].Index._Variant(v24, v8, 0);
LABEL_37:
        swift_release();
        uint64_t v1 = v19;
        goto LABEL_38;
      }
    }
    swift_release();
LABEL_29:
    uint64_t v1 = __clz(__rbit64(v27)) | (v25 << 6);
LABEL_38:
    if (v50 < 1) {
      goto LABEL_42;
    }
    if (v9 != v8) {
      goto LABEL_72;
    }
    uint64_t v8 = v49;
  }
  while (v1 != v51);
  unint64_t v50 = 64;
  uint64_t v1 = v51;
LABEL_42:
  unint64_t v2 = v54;
LABEL_43:
  uint64_t v3 = v2 >> 62;
  if (v2 >> 62)
  {
LABEL_75:
    swift_bridgeObjectRetain();
    uint64_t v45 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v45) {
      goto LABEL_45;
    }
    goto LABEL_76;
  }
  if (*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_45:
    uint64_t v29 = 0;
    uint64_t v30 = v2 & 0xC000000000000001;
    unint64_t v48 = v1;
    unint64_t v47 = v3;
    do
    {
      if (v30)
      {
        char v32 = MEMORY[0x24C523D60](v29, v2);
        unint64_t v33 = v29 + 1;
        if (__OFADD__(v29, 1)) {
          goto LABEL_65;
        }
      }
      else
      {
        if (v29 >= *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_73;
        }
        char v32 = *(void *)(v2 + 8 * v29 + 32);
        swift_retain();
        unint64_t v33 = v29 + 1;
        if (__OFADD__(v29, 1))
        {
LABEL_65:
          __break(1u);
          goto LABEL_66;
        }
      }
      AGSubgraphApply();
      AGSubgraphRemoveChild();
      *(_WORD *)(v32 + 133) = 256;
      swift_beginAccess();
      int v34 = *(_DWORD *)(v32 + 24) - 1;
      *(_DWORD *)(v32 + 24) = v34;
      if (!v34)
      {
        uint64_t Strong = swift_weakLoadStrong();
        if (Strong)
        {
          uint64_t v36 = Strong;
          swift_beginAccess();
          uint64_t v37 = *(void *)(v36 + 216);
          if (*(void *)(v37 + 16)
            && (uint64_t v38 = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)(v32 + 32)), (v39 & 1) != 0))
          {
            uint64_t v40 = v38;
            int v41 = *(_DWORD *)(v37 + 36);
            swift_beginAccess();
            specialized Dictionary._Variant.remove(at:)(&v52, v40, v41);
            swift_endAccess();
            swift_release();
            swift_release();
          }
          else
          {
            swift_retain();
            uint64_t v42 = swift_bridgeObjectRetain();
            uint64_t v43 = specialized _NativeDictionary.filter(_:)(v42, v32);
            swift_bridgeObjectRelease();
            *(void *)(v36 + 216) = v43;
            swift_release();
            swift_bridgeObjectRelease();
          }
          uint64_t v1 = v48;
          uint64_t v3 = v47;
          uint64_t v30 = v2 & 0xC000000000000001;
        }
        uint64_t IsValid = AGSubgraphIsValid();
        if (IsValid)
        {
          MEMORY[0x270FA5388](IsValid);
          AGSubgraphApply();
          AGSubgraphInvalidate();
        }
      }
      swift_release();
      if (v3)
      {
        swift_bridgeObjectRetain();
        unint64_t v31 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        unint64_t v31 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      ++v29;
    }
    while (v33 != v31);
  }
LABEL_76:
  swift_bridgeObjectRelease();
  uint64_t result = outlined consume of [String : AccessibilityCustomAttributes.Value].Index._Variant(v1, v49, 0);
  *(unsigned char *)(v46 + 268) = v50 == 0;
  return result;
}

void ForEachState.evictItems(seed:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 88);
  MEMORY[0x270FA5388](a1);
  MEMORY[0x270FA5388](v4);
  MEMORY[0x270FA5388](v5);
  int v12 = (char *)&v43 - v11;
  uint64_t v14 = *(void *)(v13 + 248);
  if (*(_DWORD *)(v1 + v14) == v6) {
    return;
  }
  uint64_t v15 = *(void *)(v9 + 256);
  if (*(unsigned char *)(v1 + v15) != 1) {
    return;
  }
  uint64_t v44 = v8;
  unint64_t v48 = v7;
  uint64_t v49 = v10;
  uint64_t v47 = v15;
  *(_DWORD *)(v1 + v14) = v6;
  uint64_t v59 = *(void *)(v9 + 80);
  uint64_t v60 = v3;
  long long v16 = *(_OWORD *)(v9 + 96);
  long long v53 = *(_OWORD *)(v9 + 112);
  long long v61 = v16;
  long long v62 = v53;
  uint64_t v17 = type metadata accessor for ForEachState.Item();
  uint64_t v63 = Array.init()();
  unint64_t v18 = (uint64_t *)(v1 + *(void *)(*(void *)v1 + 192));
  swift_beginAccess();
  uint64_t v19 = swift_bridgeObjectRetain();
  uint64_t v20 = v53;
  uint64_t v21 = MEMORY[0x24C522240](v19, v3, v17, v53);
  uint64_t v23 = v22;
  char v25 = v24;
  swift_bridgeObjectRelease();
  uint64_t v56 = v21;
  uint64_t v57 = v23;
  char v58 = v25 & 1;
  uint64_t v54 = v18;
  uint64_t v26 = swift_bridgeObjectRetain();
  uint64_t v27 = MEMORY[0x24C522340](v26, v3, v17, v20);
  uint64_t v51 = v28;
  uint64_t v52 = v27;
  int v50 = v29;
  swift_bridgeObjectRelease();
  LODWORD(v18) = v50 & 1;
  outlined copy of [A : B].Index._Variant<A, B>(v21, v23, v25 & 1);
  int v50 = (int)v18;
  LOBYTE(v18) = static Dictionary.Index.== infix(_:_:)();
  outlined consume of [String : AccessibilityCustomAttributes.Value].Index._Variant(v21, v23, v25 & 1);
  if (v18)
  {
LABEL_12:
    *(void *)&long long v53 = 64;
  }
  else
  {
    uint64_t v46 = v2 + *(void *)(*(void *)v2 + 264);
    uint64_t v45 = (void (**)(uint64_t, char *, uint64_t))(v44 + 16);
    uint64_t v30 = (void (**)(char *, uint64_t))(v44 + 8);
    *(void *)&long long v53 = 64;
    while (1)
    {
      char v31 = v25 & 1;
      outlined copy of [A : B].Index._Variant<A, B>(v21, v23, v31);
      swift_bridgeObjectRetain();
      Dictionary.subscript.getter();
      swift_bridgeObjectRelease();
      outlined consume of [String : AccessibilityCustomAttributes.Value].Index._Variant(v21, v23, v31);
      uint64_t v32 = v55;
      if ((*(unsigned char *)(v55 + *(void *)(*(void *)v55 + 240)) & 1) == 0)
      {
        uint64_t v33 = *(void *)(*(void *)v55 + 232);
        if (*(unsigned char *)(v55 + v33) == 1)
        {
          swift_beginAccess();
          if (*(_DWORD *)(v32 + 24) == 1)
          {
            uint64_t v55 = v32;
            type metadata accessor for Array();
            swift_retain();
            Array.append(_:)();
            (*v45)(v49, v12, v3);
            swift_beginAccess();
            type metadata accessor for Set();
            int v34 = v48;
            Set.insert(_:)();
            swift_endAccess();
            (*v30)(v34, v3);
            *(void *)&long long v53 = v53 - 1;
          }
        }
        else
        {
          --*(unsigned char *)(v55 + v33);
        }
      }
      uint64_t v35 = *v54;
      swift_bridgeObjectRetain();
      MEMORY[0x24C522350](&v56, v35, v3, v17, v20);
      swift_release();
      swift_bridgeObjectRelease();
      (*v30)(v12, v3);
      if ((uint64_t)v53 < 1) {
        break;
      }
      uint64_t v21 = v56;
      uint64_t v23 = v57;
      char v25 = v58;
      outlined copy of [A : B].Index._Variant<A, B>(v56, v57, v58);
      char v36 = static Dictionary.Index.== infix(_:_:)();
      outlined consume of [String : AccessibilityCustomAttributes.Value].Index._Variant(v21, v23, v25);
      if (v36) {
        goto LABEL_12;
      }
    }
  }
  uint64_t v37 = v63;
  if (!MEMORY[0x24C522EA0](v63, v17)) {
    goto LABEL_22;
  }
  uint64_t v38 = 4;
  while (1)
  {
    uint64_t v39 = v38 - 4;
    Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
    Array._checkSubscript(_:wasNativeTypeChecked:)();
    if (!IsNativeType) {
      break;
    }
    int v41 = *(_DWORD **)(v37 + 8 * v38);
    swift_retain();
    uint64_t v42 = v38 - 3;
    if (__OFADD__(v39, 1)) {
      goto LABEL_21;
    }
LABEL_17:
    ForEachState.eraseItem(_:)(v41);
    swift_release();
    ++v38;
    if (v42 == MEMORY[0x24C522EA0](v37, v17)) {
      goto LABEL_22;
    }
  }
  int v41 = (_DWORD *)_ArrayBuffer._getElementSlowPath(_:)();
  uint64_t v42 = v38 - 3;
  if (!__OFADD__(v39, 1)) {
    goto LABEL_17;
  }
LABEL_21:
  __break(1u);
LABEL_22:
  outlined consume of [String : AccessibilityCustomAttributes.Value].Index._Variant(v52, v51, v50);
  swift_bridgeObjectRelease();
  outlined consume of [String : AccessibilityCustomAttributes.Value].Index._Variant(v56, v57, v58);
  *(unsigned char *)(v2 + v47) = (void)v53 == 0;
}

uint64_t specialized Dictionary.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 80);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3;
  }
  unint64_t v8 = v7 - 3;
  uint64_t v9 = (unint64_t *)(a1 + 88);
  uint64_t v2 = 128;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t outlined destroy of Subview.ID(uint64_t a1)
{
  return a1;
}

uint64_t type metadata accessor for AndOperationViewInputPredicate()
{
  return swift_getGenericMetadata();
}

uint64_t AnyTransition.visitType<A>(applying:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 88))(a1, a3, a4);
}

uint64_t TransitionBox.visitType<A>(applying:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, void, void, uint64_t, uint64_t))(a3 + 8))(*(void *)(*(void *)v3 + 120), *(void *)(*(void *)v3 + 120), *(void *)(*(void *)v3 + 128), a2, a3);
}

uint64_t Transaction.fromScrollView.setter(uint64_t a1)
{
  return Transaction.fromScrollView.setter(a1, (void (*)(uint64_t, uint64_t, uint64_t *))specialized closure #1 in PropertyList.subscript.setter);
}

uint64_t static GraphicsContext.Shading.color(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = a1;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(unsigned char *)(a2 + 72) = 1;
  return swift_retain();
}

ValueMetadata *type metadata accessor for _CompositingGroupEffect()
{
  return &type metadata for _CompositingGroupEffect;
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(void *a1, uint64_t a2, void (*a3)(void *__return_ptr, void, void, void, void))
{
  v4[8] = *MEMORY[0x263EF8340];
  a3(v4, *a1, a1[1], a1[2], a1[3]);
  AGGraphSetOutputValue();
  return swift_release();
}

float64x2_t *specialized UnaryPositionAwareChildGeometry.value.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, float64x2_t *a4@<X8>)
{
  uint64_t result = (float64x2_t *)AGGraphGetCurrentAttribute();
  int v9 = *MEMORY[0x263F288F8];
  if (result == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    int v10 = (int)result;
    uint64_t v11 = *(void *)AGGraphGetValue();
    int v13 = v10;
    int v14 = v10;
    int v15 = a1;
    int v16 = HIDWORD(a2);
    int v17 = a2;
    int v18 = HIDWORD(a1);
    int v19 = HIDWORD(a3);
    _SafeAreaRegionsIgnoringLayout.placement(of:in:)(&v13, v11, (uint64_t)&v21);
    int v13 = v10;
    int v14 = a3;
    int v15 = v9;
    double v12 = *(double *)AGGraphGetValue();
    v20[0] = *(unsigned char *)AGGraphGetValue();
    LayoutProxy.finallyPlaced(at:in:layoutDirection:)(&v21, v20, (uint64_t)a4, v12);
    uint64_t result = (float64x2_t *)AGGraphGetValue();
    *a4 = vaddq_f64(*result, *a4);
  }
  return result;
}

{
  float64x2_t *result;
  int v9;
  int v10;
  double v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned __int8 v19[12];
  uint64_t v20;

  uint64_t result = (float64x2_t *)AGGraphGetCurrentAttribute();
  int v9 = *MEMORY[0x263F288F8];
  if (result == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    int v10 = (int)result;
    AGGraphGetValue();
    double v12 = v10;
    int v13 = v10;
    int v14 = a1;
    int v15 = HIDWORD(a2);
    int v16 = a2;
    int v17 = HIDWORD(a1);
    int v18 = HIDWORD(a3);
    _SafeAreaRegionsIgnoringLayout.placement(of:in:)(&v12, -1, (uint64_t)&v20);
    double v12 = v10;
    int v13 = a3;
    int v14 = v9;
    uint64_t v11 = *(double *)AGGraphGetValue();
    v19[0] = *(unsigned char *)AGGraphGetValue();
    LayoutProxy.finallyPlaced(at:in:layoutDirection:)(&v20, v19, (uint64_t)a4, v11);
    uint64_t result = (float64x2_t *)AGGraphGetValue();
    *a4 = vaddq_f64(*result, *a4);
  }
  return result;
}

double _SafeAreaRegionsIgnoringLayout.placement(of:in:)@<D0>(int *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  int v4 = *a1;
  int v5 = a1[1];
  int v6 = a1[2];
  int v7 = a1[3];
  int v9 = a1[4];
  int v8 = a1[5];
  int v10 = a1[6];
  double v11 = 0.0;
  if (v10 != *MEMORY[0x263F288F8])
  {
    Inputuint64_t Value = AGGraphGetInputValue();
    double v14 = *(double *)(InputValue + 16);
    long long v27 = *(_OWORD *)InputValue;
    double v28 = v14;
    int v30 = v4;
    int v31 = v5;
    int v32 = v6;
    int v33 = v7;
    int v34 = v9;
    int v35 = v8;
    int v36 = v10;
    double v11 = SafeAreaInsets.resolve(regions:in:)(a2, &v30);
  }
  double v15 = EdgeInsets.in(_:)(v11);
  double v17 = v16;
  double v19 = v18;
  double v21 = v20;
  int v30 = v4;
  int v31 = v5;
  int v32 = v6;
  int v33 = v7;
  int v34 = v9;
  int v35 = v8;
  int v36 = v10;
  _PositionAwarePlacementContext.proposedSize.getter((uint64_t)&v27);
  double v22 = *(double *)&v27;
  char v23 = BYTE8(v27);
  char v24 = v29;
  if ((BYTE8(v27) & 1) == 0)
  {
    if (*(double *)&v27 - (0.0 - v17 + 0.0 - v21) < 0.0) {
      double v22 = 0.0;
    }
    else {
      double v22 = *(double *)&v27 - (0.0 - v17 + 0.0 - v21);
    }
  }
  double v25 = v28;
  if ((v29 & 1) == 0)
  {
    if (v28 - (0.0 - v15 + 0.0 - v19) < 0.0) {
      double v25 = 0.0;
    }
    else {
      double v25 = v28 - (0.0 - v15 + 0.0 - v19);
    }
  }
  if (one-time initialization token for topLeading != -1) {
    swift_once();
  }
  double result = -v17;
  *(double *)a3 = v22;
  *(unsigned char *)(a3 + 8) = v23;
  *(double *)(a3 + 16) = v25;
  *(unsigned char *)(a3 + 24) = v24;
  *(_OWORD *)(a3 + 32) = static UnitPoint.topLeading;
  *(double *)(a3 + 48) = -v17;
  *(double *)(a3 + 56) = -v15;
  return result;
}

uint64_t *_PositionAwarePlacementContext.proposedSize.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for v3 != -1) {
    swift_once();
  }
  unsigned int v2 = static Semantics.v3;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC == 1)
  {
    if ((dyld_program_sdk_at_least() & 1) == 0)
    {
LABEL_7:
      double result = (uint64_t *)AGGraphGetInputValue();
      BOOL v4 = 0;
      BOOL v5 = 0;
      uint64_t v6 = *result;
      uint64_t v7 = result[1];
      goto LABEL_13;
    }
  }
  else if (static Semantics.forced < v2)
  {
    goto LABEL_7;
  }
  double result = (uint64_t *)AGGraphGetInputValue();
  uint64_t v6 = result[2];
  uint64_t v7 = result[3];
  BOOL v4 = (~v6 & 0x7FF0000000000000) == 0 && (v6 & 0xFFFFFFFFFFFFFLL) != 0;
  if (v4) {
    uint64_t v6 = 0;
  }
  BOOL v5 = (~v7 & 0x7FF0000000000000) == 0 && (v7 & 0xFFFFFFFFFFFFFLL) != 0;
  if (v5) {
    uint64_t v7 = 0;
  }
LABEL_13:
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v7;
  *(unsigned char *)(a1 + 24) = v5;
  return result;
}

double CGRect.prepare(geometry:)(double a1, double a2, double a3, double a4)
{
  double v19 = a1;
  double v20 = a2;
  double v21 = a3;
  double v22 = a4;
  uint64_t v17 = 0;
  memset(v16, 0, sizeof(v16));
  char v18 = 2;
  uint64_t Value = AGGraphGetValue();
  double v5 = *(double *)Value;
  double v6 = *(double *)(Value + 8);
  double v7 = *(double *)(Value + 16);
  double v8 = *(double *)(Value + 24);
  double v9 = *(double *)(Value + 32);
  uint64_t v10 = AGGraphGetValue();
  double v11 = *(double *)v10;
  double v12 = *(double *)(v10 + 8);
  double v13 = v8 - (*(double *)v10 - v6);
  v15[0] = v5;
  v15[1] = v11;
  void v15[2] = v12;
  void v15[3] = v13;
  v15[4] = v9 - (v12 - v7);
  CGRect.convert(to:transform:)((uint64_t)v16, v15);
  outlined destroy of CoordinateSpace((uint64_t)v16);
  return v19;
}

uint64_t closure #1 in ScrollStateRequestTransform.findClosestSubview<A>(idType:position:anchor:collection:containerSize:)(double *a1, __n128 a2, __n128 a3, __n128 a4, __n128 a5, uint64_t a6, double *a7, char *a8, uint64_t a9, uint64_t a10)
{
  uint64_t v46 = a7;
  __n128 v44 = a5;
  __n128 v43 = a4;
  __n128 v42 = a3;
  __n128 v45 = a2;
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v40 - v16;
  uint64_t v18 = *(void *)(a9 - 8);
  MEMORY[0x270FA5388](v19);
  double v21 = (char *)&v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = *((void *)a1 + 1);
  float64_t v23 = a1[2];
  float64_t v24 = a1[3];
  float64_t v25 = a1[4];
  float64_t v26 = a1[5];
  double v27 = a1[6];
  double v28 = a1[7];
  double v29 = a1[8];
  double v30 = a1[9];
  double v31 = a1[10];
  *(double *)unint64_t v48 = *a1;
  v48[1] = v22;
  _ViewList_ID.explicitID<A>(for:)(a9, a10, (uint64_t)v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v17, 1, a9) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  }
  int v41 = a8;
  int v33 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
  v33(v21, v17, a9);
  v50.f64[0] = v23;
  v50.f64[1] = v24;
  v51.f64[0] = v25;
  v51.f64[1] = v26;
  if (one-time initialization token for all != -1) {
    swift_once();
  }
  v48[0] = static ScrollCoordinateSpace.all;
  char v49 = 1;
  v47[0] = v27;
  v47[1] = v28;
  v47[2] = v29;
  v47[3] = v30;
  v47[4] = v31;
  CGRect.convert(to:transform:)((uint64_t)v48, v47);
  outlined destroy of CoordinateSpace((uint64_t)v48);
  *(void *)&v34.f64[0] = v45.n128_u64[0];
  *(void *)&v34.f64[1] = v42.n128_u64[0];
  *(void *)&v35.f64[0] = v43.n128_u64[0];
  *(void *)&v35.f64[1] = v44.n128_u64[0];
  float64x2_t v36 = vsubq_f64(vaddq_f64(v50, vmulq_f64(v51, v34)), vaddq_f64(vmulq_f64(v34, v35), (float64x2_t)0));
  double v37 = fabs(sqrt(vaddvq_f64(vmulq_f64(v36, v36))));
  uint64_t v38 = v46;
  if (v37 >= *v46) {
    return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v21, a9);
  }
  uint64_t v39 = v41;
  (*(void (**)(char *, uint64_t))(v15 + 8))(v41, v14);
  v33(v39, v21, a9);
  uint64_t result = (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v39, 0, 1, a9);
  *uint64_t v38 = v37;
  return result;
}

uint64_t _ViewList_ID.explicitID<A>(for:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v20 = a2;
  uint64_t v6 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v6);
  double v9 = (char *)&v18 - v8;
  uint64_t v10 = *(void *)(v3 + 8);
  uint64_t v11 = *(void *)(v10 + 16);
  if (v11)
  {
    uint64_t v19 = a3;
    double v12 = (void (**)(char *, uint64_t))(v7 + 8);
    swift_bridgeObjectRetain();
    uint64_t v13 = 32;
    uint64_t v18 = (a1 - 8) & 0xFFFFFFFFFFFFLL | 0x2E3F000000000000;
    while (1)
    {
      uint64_t v21 = *(void *)(v10 + v13);
      AnyHashable2.as<A>(type:)();
      uint64_t v14 = *(void *)(a1 - 8);
      uint64_t v15 = v14;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v9, 1, a1) != 1) {
        break;
      }
      (*v12)(v9, v6);
      v13 += 24;
      if (!--v11)
      {
        swift_bridgeObjectRelease();
        a3 = v19;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    a3 = v19;
    (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v19, v9, a1);
    uint64_t v16 = 0;
  }
  else
  {
    uint64_t v14 = *(void *)(a1 - 8);
LABEL_7:
    uint64_t v15 = v14;
    uint64_t v16 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(a3, v16, 1, a1);
}

uint64_t AnyHashable2.as<A>(type:)()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 80))();
}

uint64_t _AnyHashableBox.as<A>(type:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(*(void *)v3 + 128);
  double v7 = MEMORY[0x270FA5388](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))((char *)&v13 - v10, v3 + *(void *)(v8 + 144), v6, v7);
  int v11 = swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56))(a3, v11 ^ 1u, 1, a2);
}

uint64_t CGRect.convert(to:transform:)(uint64_t a1, double *a2)
{
  return CGRect.convert(to:transform:)(a1, a2, 2, (void (*)(void, double *, unsigned char *, char *, uint64_t))specialized ViewTransform.forEach(inverted:_:));
}

double SafeAreaInsets.resolve(regions:in:)(uint64_t a1, int *a2)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  int v4 = *a2;
  int v3 = a2[1];
  int v5 = a2[2];
  Swift::UInt32 v6 = a2[3];
  int v8 = a2[4];
  int v7 = a2[5];
  int v27 = a2[6];
  uint64_t v9 = *v2;
  uint64_t v10 = v2[1];
  int v11 = (void *)v2[2];
  Inputuint64_t Value = AGGraphGetInputValue();
  CGFloat v13 = *(double *)InputValue;
  CGFloat v14 = *(double *)(InputValue + 8);
  v40.origin.CGFloat x = 0.0;
  v40.origin.CGFloat y = 0.0;
  v40.size.CGFloat width = v13;
  v40.size.CGFloat height = v14;
  uint64_t v41 = v9;
  uint64_t v42 = v10;
  __n128 v43 = v11;
  int v31 = v4;
  int v33 = v4;
  int v34 = v3;
  int v29 = v5;
  int v35 = v5;
  Swift::UInt32 v36 = v6;
  int v37 = v8;
  int v38 = v7;
  int v15 = v7;
  int v39 = v27;
  SafeAreaInsets.adjust(_:regions:to:)(&v40.origin.x, a1, (uint64_t)&v33);
  swift_retain();
  if (v11)
  {
    do
    {
      uint64_t v16 = v11[3];
      uint64_t v17 = (void *)v11[4];
      uint64_t v41 = v11[2];
      uint64_t v42 = v16;
      __n128 v43 = v17;
      int v33 = v31;
      int v34 = v3;
      int v35 = v29;
      Swift::UInt32 v36 = v6;
      int v37 = v8;
      int v38 = v15;
      int v39 = v27;
      swift_retain();
      swift_bridgeObjectRetain();
      SafeAreaInsets.adjust(_:regions:to:)(&v40.origin.x, a1, (uint64_t)&v33);
      swift_release();
      swift_bridgeObjectRelease();
      int v11 = v17;
    }
    while (v17);
  }
  v45.origin.CGFloat x = 0.0;
  v45.origin.CGFloat y = 0.0;
  v45.size.CGFloat width = v13;
  v45.size.CGFloat height = v14;
  double MinY = CGRectGetMinY(v45);
  CGFloat x = v40.origin.x;
  CGFloat y = v40.origin.y;
  CGFloat width = v40.size.width;
  CGFloat height = v40.size.height;
  double v30 = CGRectGetMinY(v40);
  v46.origin.CGFloat x = 0.0;
  v46.origin.CGFloat y = 0.0;
  v46.size.CGFloat width = v13;
  v46.size.CGFloat height = v14;
  double MinX = CGRectGetMinX(v46);
  v47.origin.CGFloat x = x;
  v47.origin.CGFloat y = y;
  v47.size.CGFloat width = width;
  v47.size.CGFloat height = height;
  double v23 = MinX - CGRectGetMinX(v47);
  v48.origin.CGFloat x = x;
  v48.origin.CGFloat y = y;
  v48.size.CGFloat width = width;
  v48.size.CGFloat height = height;
  CGRectGetMaxY(v48);
  v49.origin.CGFloat x = 0.0;
  v49.origin.CGFloat y = 0.0;
  v49.size.CGFloat width = v13;
  v49.size.CGFloat height = v14;
  CGRectGetMaxY(v49);
  v50.origin.CGFloat x = x;
  v50.origin.CGFloat y = y;
  v50.size.CGFloat width = width;
  v50.size.CGFloat height = height;
  double MaxX = CGRectGetMaxX(v50);
  v51.origin.CGFloat x = 0.0;
  v51.origin.CGFloat y = 0.0;
  v51.size.CGFloat width = v13;
  v51.size.CGFloat height = v14;
  if (v23 != MaxX - CGRectGetMaxX(v51))
  {
    uint64_t KeyPath = swift_getKeyPath();
    LODWORD(v41) = v6;
    uint64_t v42 = KeyPath;
    type metadata accessor for _ContiguousArrayStorage<SafeAreaInsets.Element>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentFetch<LayoutDirection>, (uint64_t)&type metadata for LayoutDirection, (uint64_t (*)(void, uint64_t))type metadata accessor for EnvironmentFetch);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v6);
    _ss7KeyPathCy7SwiftUI17EnvironmentValuesVAC15LayoutDirectionOGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for KeyPath<EnvironmentValues, LayoutDirection>, (uint64_t)&type metadata for EnvironmentValues, (uint64_t)&type metadata for LayoutDirection, MEMORY[0x263F8EA18]);
    swift_retain();
    dispatch thunk of Hashable.hash(into:)();
    Hasher._finalize()();
    _s7SwiftUI16EnvironmentFetch33_BA60BF7120E939C5C25B2A488163D4ACLLVyAA15LayoutDirectionOGADyxG14AttributeGraph4RuleAAWlTm_2(&lazy protocol witness table cache variable for type EnvironmentFetch<LayoutDirection> and conformance EnvironmentFetch<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentFetch<LayoutDirection>, (uint64_t)&type metadata for LayoutDirection);
    _s7SwiftUI16EnvironmentFetch33_BA60BF7120E939C5C25B2A488163D4ACLLVyAA15LayoutDirectionOGADyxG14AttributeGraph4RuleAAWlTm_2(&lazy protocol witness table cache variable for type EnvironmentFetch<LayoutDirection> and conformance EnvironmentFetch<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentFetch<LayoutDirection>, (uint64_t)&type metadata for LayoutDirection);
    LOBYTE(v33) = 0;
    static Rule<>._cachedValue(options:owner:hashValue:bodyPtr:update:)();
    swift_release_n();
  }
  return MinY - v30;
}

uint64_t SafeAreaInsets.adjust(_:regions:to:)(CGFloat *a1, uint64_t a2, uint64_t a3)
{
  v78[1] = *MEMORY[0x263EF8340];
  Swift::UInt32 v5 = *(_DWORD *)(a3 + 12);
  uint64_t v7 = *v3;
  uint64_t v6 = v3[1];
  uint64_t v8 = v3[2];
  uint64_t v73 = *v3;
  double v74 = *(double *)&v6;
  double v75 = *(double *)&v8;
  uint64_t result = SafeAreaInsets.mergedInsets(regions:)(a2, &v65);
  float64x2_t v10 = v65;
  double v11 = v66;
  double v12 = v67;
  if (v65.f64[0] != 0.0 || v65.f64[1] != 0.0 || v66 != 0.0 || v67 != 0.0)
  {
    v78[0] = 0;
    char v64 = 0;
    double v56 = v68;
    double v58 = v70;
    double rect = v69;
    double v62 = v71;
    Inputuint64_t Value = AGGraphGetInputValue();
    uint64_t v14 = *(void *)InputValue;
    double v15 = *(double *)(InputValue + 8);
    double v16 = *(double *)(InputValue + 16);
    double v17 = *(double *)(InputValue + 24);
    double v18 = *(double *)(InputValue + 32);
    uint64_t v19 = AGGraphGetInputValue();
    double v20 = *(double *)v19;
    double v21 = *(double *)(v19 + 8);
    double v22 = v17 - (*(double *)v19 - v15);
    uint64_t v73 = v14;
    double v74 = v20;
    double v75 = v21;
    double v76 = v22;
    double v77 = v18 - (v21 - v16);
    *(void *)&v65.f64[0] = v7;
    LOBYTE(v69) = 1;
    char v72 = 3;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    specialized ViewTransform.convert(_:_:)((uint64_t)&v65, (double *)&v73, v7, v6, v8, v78, &v64, v56, rect, v58, v62, v10.f64[0], v10.f64[1], v11, v12);
    swift_release();
    swift_bridgeObjectRelease();
    outlined destroy of ViewTransform.Conversion((uint64_t)&v65);
    swift_release();
    if ((v64 & 1) == 0)
    {
      uint64_t v23 = v78[0];
      if (v78[0])
      {
        if (*(void *)(v78[0] + 16) < 4uLL)
        {
          __break(1u);
        }
        else
        {
          swift_bridgeObjectRetain_n();
          specialized CGRect.init(cornerPoints:)(v23, v23 + 32, 0, 9uLL);
          CGFloat v57 = v25;
          CGFloat v59 = v24;
          CGFloat v54 = v27;
          CGFloat v55 = v26;
          if (*(void *)(v23 + 16) >= 8uLL)
          {
            specialized CGRect.init(cornerPoints:)(v23, v23 + 32, 4, 0x11uLL);
            rectdouble a = v29;
            CGFloat v63 = v28;
            CGFloat v31 = v30;
            CGFloat v49 = v32;
            CGFloat v33 = *a1;
            CGFloat v34 = a1[1];
            CGFloat v35 = a1[2];
            CGFloat v36 = a1[3];
            v79.origin.CGFloat x = *a1;
            v79.origin.CGFloat y = v34;
            v79.size.CGFloat width = v35;
            v79.size.CGFloat height = v36;
            double MinY = CGRectGetMinY(v79);
            v80.origin.CGFloat x = v33;
            v80.origin.CGFloat y = v34;
            v80.size.CGFloat width = v35;
            v80.size.CGFloat height = v36;
            double MaxY = CGRectGetMaxY(v80);
            v81.origin.CGFloat x = v33;
            v81.origin.CGFloat y = v34;
            v81.size.CGFloat width = v35;
            v81.size.CGFloat height = v36;
            double MinX = CGRectGetMinX(v81);
            v82.origin.CGFloat x = v33;
            v82.origin.CGFloat y = v34;
            v82.size.CGFloat width = v35;
            v82.size.CGFloat height = v36;
            double MaxX = CGRectGetMaxX(v82);
            uint64_t KeyPath = swift_getKeyPath();
            LODWORD(v73) = v5;
            double v74 = *(double *)&KeyPath;
            uint64_t v38 = MEMORY[0x263F8EF38];
            type metadata accessor for _ContiguousArrayStorage<SafeAreaInsets.Element>(0, &lazy cache variable for type metadata for EnvironmentFetch<CGFloat>, MEMORY[0x263F8EF38], (uint64_t (*)(void, uint64_t))type metadata accessor for EnvironmentFetch);
            Hasher.init(_seed:)();
            Hasher._combine(_:)(v5);
            _ss7KeyPathCy7SwiftUI17EnvironmentValuesVAC15LayoutDirectionOGMaTm_0(0, &lazy cache variable for type metadata for KeyPath<EnvironmentValues, CGFloat>, (uint64_t)&type metadata for EnvironmentValues, v38, MEMORY[0x263F8EA18]);
            swift_retain();
            dispatch thunk of Hashable.hash(into:)();
            Hasher._finalize()();
            _s7SwiftUI16EnvironmentFetch33_BA60BF7120E939C5C25B2A488163D4ACLLVyAA15LayoutDirectionOGADyxG14AttributeGraph4RuleAAWlTm_2(&lazy protocol witness table cache variable for type EnvironmentFetch<CGFloat> and conformance EnvironmentFetch<A>, &lazy cache variable for type metadata for EnvironmentFetch<CGFloat>, v38);
            _s7SwiftUI16EnvironmentFetch33_BA60BF7120E939C5C25B2A488163D4ACLLVyAA15LayoutDirectionOGADyxG14AttributeGraph4RuleAAWlTm_2(&lazy protocol witness table cache variable for type EnvironmentFetch<CGFloat> and conformance EnvironmentFetch<A>, &lazy cache variable for type metadata for EnvironmentFetch<CGFloat>, v38);
            LOBYTE(v65.f64[0]) = 0;
            double v39 = *(double *)static Rule<>._cachedValue(options:owner:hashValue:bodyPtr:update:)();
            swift_release_n();
            double v45 = v39 * 0.5 + 0.001;
            v83.origin.CGFloat x = v59;
            v83.origin.CGFloat y = v57;
            v83.size.CGFloat width = v55;
            v83.size.CGFloat height = v54;
            double v46 = CGRectGetMinX(v83);
            v84.origin.CGFloat x = v63;
            v84.origin.CGFloat y = v31;
            v84.size.CGFloat width = v49;
            v84.size.CGFloat height = recta;
            double v47 = CGRectGetMinX(v84);
            v85.origin.CGFloat x = v59;
            v85.origin.CGFloat y = v57;
            v85.size.CGFloat width = v55;
            v85.size.CGFloat height = v54;
            double v48 = CGRectGetMaxX(v85);
            v86.origin.CGFloat x = v63;
            v86.origin.CGFloat y = v31;
            v86.size.CGFloat width = v49;
            v86.size.CGFloat height = recta;
            double v44 = CGRectGetMaxX(v86);
            v87.origin.CGFloat x = v59;
            v87.origin.CGFloat y = v57;
            v87.size.CGFloat width = v55;
            v87.size.CGFloat height = v54;
            double v43 = CGRectGetMinY(v87);
            v88.origin.CGFloat x = v63;
            v88.origin.CGFloat y = v31;
            v88.size.CGFloat width = v49;
            v88.size.CGFloat height = recta;
            double v40 = CGRectGetMinY(v88);
            v89.origin.CGFloat x = v59;
            v89.origin.CGFloat y = v57;
            v89.size.CGFloat width = v55;
            v89.size.CGFloat height = v54;
            double v41 = CGRectGetMaxY(v89);
            v90.origin.CGFloat x = v63;
            v90.origin.CGFloat y = v31;
            v90.size.CGFloat width = v49;
            v90.size.CGFloat height = recta;
            double v42 = CGRectGetMaxY(v90);
            if (MinY - v45 < v43 && v40 < MinY + v45)
            {
              a1[1] = a1[1] - (MinY - v40);
              a1[3] = MinY - v40 + a1[3];
            }
            if (v41 < MaxY + v45 && MaxY - v45 < v42) {
              a1[3] = v42 - MaxY + a1[3];
            }
            if (MinX - v45 < v46 && v47 < MinX + v45)
            {
              *a1 = *a1 - (MinX - v47);
              a1[2] = MinX - v47 + a1[2];
            }
            if (v48 < MaxX + v45 && MaxX - v45 < v44) {
              a1[2] = v44 - MaxX + a1[2];
            }
            return swift_bridgeObjectRelease();
          }
        }
        __break(1u);
      }
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t CGRect.convert(to:transform:)(uint64_t a1, double *a2, char a3, void (*a4)(void, double *, unsigned char *, char *, uint64_t))
{
  double v8 = *a2;
  double v9 = a2[1];
  double v10 = a2[2];
  double v11 = a2[3];
  double v12 = a2[4];
  double v13 = *v4;
  double v14 = v4[1];
  double v16 = v4[2];
  double v15 = v4[3];
  v26.origin.CGFloat x = *v4;
  v26.origin.CGFloat y = v14;
  v26.size.CGFloat width = v16;
  v26.size.CGFloat height = v15;
  uint64_t result = CGRectIsNull(v26);
  if (result) {
    goto LABEL_5;
  }
  v27.origin.CGFloat x = v13;
  v27.origin.CGFloat y = v14;
  v27.size.CGFloat width = v16;
  v27.size.CGFloat height = v15;
  uint64_t result = CGRectIsInfinite(v27);
  if (result) {
    goto LABEL_5;
  }
  type metadata accessor for _ContiguousArrayStorage<CGPoint>();
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2461C6AA0;
  *(double *)(inited + 32) = v13;
  *(double *)(inited + 40) = v14;
  *(double *)(inited + 48) = v13 + v16;
  *(double *)(inited + 56) = v14;
  *(double *)(inited + 64) = v13 + v16;
  *(double *)(inited + 72) = v14 + v15;
  *(double *)(inited + 80) = v13;
  *(double *)(inited + 88) = v14 + v15;
  uint64_t v25 = inited;
  v24[0] = v8;
  v24[1] = v9;
  v24[2] = v10;
  v24[3] = v11;
  v24[4] = v12;
  outlined init with copy of CoordinateSpace(a1, (uint64_t)v23);
  v23[89] = a3;
  specialized ViewTransform.convert(_:_:)((uint64_t)v23, v24, (uint64_t)&v25, a4);
  outlined destroy of ViewTransform.Conversion((uint64_t)v23);
  uint64_t result = v25;
  if (*(void *)(v25 + 16) >= 4uLL)
  {
    uint64_t result = specialized CGRect.init(cornerPoints:)(v25, v25 + 32, 0, 9uLL);
    double v13 = v19;
    double v14 = v20;
    double v16 = v21;
    double v15 = v22;
LABEL_5:
    *int v4 = v13;
    v4[1] = v14;
    void v4[2] = v16;
    _OWORD v4[3] = v15;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t specialized CGRect.init(cornerPoints:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int64_t v4 = a4 >> 1;
  if ((uint64_t)(a4 >> 1) <= a3)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (a3 + 1 >= v4)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (a3 + 2 >= v4)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (a3 + 3 < v4) {
    return swift_unknownObjectRelease();
  }
LABEL_9:
  __break(1u);
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<CGPoint>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<CGPoint>)
  {
    type metadata accessor for CGPoint(255);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CGPoint>);
    }
  }
}

uint64_t specialized ViewTransform.convert(_:_:)(uint64_t result, double *a2, uint64_t a3, void (*a4)(void, double *, unsigned char *, char *, uint64_t))
{
  double v6 = *a2;
  uint64_t v7 = *((void *)a2 + 1);
  uint64_t v8 = *((void *)a2 + 2);
  double v9 = a2[3];
  double v10 = a2[4];
  if (!*(void *)a2 && v9 == 0.0 && v10 == 0.0) {
    return result;
  }
  outlined init with copy of ViewTransform.Conversion(result, (uint64_t)v38);
  outlined init with copy of ViewTransform.Conversion((uint64_t)v38, (uint64_t)&v28);
  if (v36 != 4)
  {
    outlined destroy of ViewTransform.Conversion((uint64_t)&v28);
    goto LABEL_24;
  }
  outlined init with take of CoordinateSpace((uint64_t)&v28, (uint64_t)&v23);
  outlined init with take of CoordinateSpace((uint64_t)&v32, (uint64_t)v37);
  outlined init with copy of CoordinateSpace((uint64_t)&v23, (uint64_t)&v28);
  outlined init with copy of CoordinateSpace((uint64_t)v37, (uint64_t)&v32);
  if (v31 == 2 && *(void *)&v28 == 1)
  {
    int8x16_t v11 = vorrq_s8(v29, v30);
    if (!*(void *)&vorr_s8(*(int8x8_t *)v11.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL)))
    {
      outlined destroy of CoordinateSpace((uint64_t)&v23);
      outlined destroy of ViewTransform.Conversion((uint64_t)v38);
      outlined init with take of CoordinateSpace((uint64_t)v37, (uint64_t)v38);
      char v39 = 2;
      double v12 = &v32;
LABEL_23:
      outlined destroy of CoordinateSpace((uint64_t)v12);
      goto LABEL_24;
    }
  }
  if (v35 == 2 && v32 == 1)
  {
    int8x16_t v13 = vorrq_s8(v33, v34);
    if (!*(void *)&vorr_s8(*(int8x8_t *)v13.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)))
    {
      outlined destroy of CoordinateSpace((uint64_t)v37);
      outlined destroy of ViewTransform.Conversion((uint64_t)v38);
      outlined init with take of CoordinateSpace((uint64_t)&v23, (uint64_t)v38);
      char v39 = 3;
LABEL_22:
      double v12 = (uint64_t *)&v28;
      goto LABEL_23;
    }
  }
  outlined init with copy of CoordinateSpace((uint64_t)&v28, (uint64_t)v22);
  if (one-time initialization token for root != -1) {
    swift_once();
  }
  char v14 = specialized static CoordinateSpace.== infix(_:_:)((uint64_t)&static CoordinateSpace.root, (uint64_t)v22);
  outlined destroy of CoordinateSpace((uint64_t)v22);
  if (v14)
  {
    outlined destroy of CoordinateSpace((uint64_t)&v23);
    outlined destroy of ViewTransform.Conversion((uint64_t)v38);
    outlined init with take of CoordinateSpace((uint64_t)v37, (uint64_t)v38);
    char v39 = 0;
LABEL_21:
    outlined destroy of CoordinateSpace((uint64_t)&v32);
    goto LABEL_22;
  }
  outlined init with copy of CoordinateSpace((uint64_t)&v32, (uint64_t)v22);
  char v15 = specialized static CoordinateSpace.== infix(_:_:)((uint64_t)&static CoordinateSpace.root, (uint64_t)v22);
  outlined destroy of CoordinateSpace((uint64_t)v22);
  outlined destroy of CoordinateSpace((uint64_t)v37);
  if (v15)
  {
    outlined destroy of ViewTransform.Conversion((uint64_t)v38);
    outlined init with take of CoordinateSpace((uint64_t)&v23, (uint64_t)v38);
    char v39 = 1;
    goto LABEL_21;
  }
  outlined destroy of CoordinateSpace((uint64_t)&v23);
  outlined destroy of (CoordinateSpace, CoordinateSpace)((uint64_t)&v28, &lazy cache variable for type metadata for (CoordinateSpace, CoordinateSpace));
LABEL_24:
  char v27 = 0;
  outlined init with copy of ViewTransform.Conversion((uint64_t)v38, (uint64_t)&v28);
  switch(v36)
  {
    case 1:
      outlined init with copy of ViewTransform.Conversion((uint64_t)&v28, (uint64_t)&v23);
      if (v26 == 2 && v23 == 1)
      {
        int8x16_t v17 = vorrq_s8(v24, v25);
        if (!*(void *)&vorr_s8(*(int8x8_t *)v17.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL))) {
          goto LABEL_42;
        }
      }
      outlined destroy of CoordinateSpace((uint64_t)&v23);
      goto LABEL_40;
    case 2:
      outlined init with copy of ViewTransform.Conversion((uint64_t)&v28, (uint64_t)&v23);
      if (v26 == 2 && v23 == 1)
      {
        int8x16_t v18 = vorrq_s8(v24, v25);
        if (!*(void *)&vorr_s8(*(int8x8_t *)v18.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL))) {
          goto LABEL_36;
        }
      }
      outlined destroy of CoordinateSpace((uint64_t)&v23);
      goto LABEL_42;
    case 3:
      outlined init with copy of ViewTransform.Conversion((uint64_t)&v28, (uint64_t)&v23);
      if (one-time initialization token for root != -1) {
        swift_once();
      }
      char v19 = specialized static CoordinateSpace.== infix(_:_:)((uint64_t)&static CoordinateSpace.root, (uint64_t)&v23);
      outlined destroy of CoordinateSpace((uint64_t)&v23);
      if ((v19 & 1) == 0) {
        goto LABEL_40;
      }
      goto LABEL_42;
    case 4:
LABEL_40:
      outlined destroy of ViewTransform.Conversion((uint64_t)&v28);
      goto LABEL_43;
    default:
      outlined init with copy of ViewTransform.Conversion((uint64_t)&v28, (uint64_t)&v23);
      if (one-time initialization token for root != -1) {
        swift_once();
      }
      char v16 = specialized static CoordinateSpace.== infix(_:_:)((uint64_t)&static CoordinateSpace.root, (uint64_t)&v23);
      outlined destroy of CoordinateSpace((uint64_t)&v23);
      if (v16)
      {
LABEL_36:
        outlined destroy of ViewTransform.Conversion((uint64_t)&v28);
      }
      else
      {
LABEL_42:
        outlined destroy of ViewTransform.Conversion((uint64_t)&v28);
        char v27 = 1;
LABEL_43:
        outlined init with copy of ViewTransform.Conversion((uint64_t)v38, (uint64_t)&v28);
        switch(v36)
        {
          case 0:
          case 3:
            outlined destroy of ViewTransform.Conversion((uint64_t)&v28);
            char v20 = 0;
            break;
          case 1:
          case 2:
            outlined destroy of ViewTransform.Conversion((uint64_t)&v28);
            char v20 = 1;
            break;
          case 4:
            outlined init with take of CoordinateSpace((uint64_t)&v28, (uint64_t)&v23);
            outlined init with take of CoordinateSpace((uint64_t)&v32, (uint64_t)v37);
            *(double *)double v22 = v6;
            v22[1] = v7;
            void v22[2] = v8;
            *(double *)&void v22[3] = v9;
            *(double *)&v22[4] = v10;
            char v21 = ViewTransform.spaceBeforeSpace(_:_:)((uint64_t)&v23, (uint64_t)v37);
            outlined destroy of CoordinateSpace((uint64_t)v37);
            outlined destroy of CoordinateSpace((uint64_t)&v23);
            char v20 = v21 ^ 1;
            break;
          default:
            JUMPOUT(0);
        }
        double v28 = v6;
        v29.i64[0] = v7;
        v29.i64[1] = v8;
        *(double *)v30.uint64_t i64 = v9;
        *(double *)&v30.i64[1] = v10;
        a4(v20 & 1, &v28, v38, &v27, a3);
      }
      uint64_t result = outlined destroy of ViewTransform.Conversion((uint64_t)v38);
      break;
  }
  return result;
}

{
  double v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  int8x16_t v11;
  uint64_t *v12;
  int8x16_t v13;
  char v14;
  char v15;
  char v16;
  int8x16_t v17;
  int8x16_t v18;
  char v19;
  char v20;
  char v21;
  void v22[6];
  uint64_t v23;
  int8x16_t v24;
  int8x16_t v25;
  char v26;
  char v27;
  double v28;
  int8x16_t v29;
  int8x16_t v30;
  char v31;
  uint64_t v32;
  int8x16_t v33;
  int8x16_t v34;
  char v35;
  char v36;
  unsigned char v37[48];
  unsigned char v38[89];
  char v39;

  double v6 = *a2;
  uint64_t v7 = *((void *)a2 + 1);
  uint64_t v8 = *((void *)a2 + 2);
  double v9 = a2[3];
  double v10 = a2[4];
  if (!*(void *)a2 && v9 == 0.0 && v10 == 0.0) {
    return result;
  }
  outlined init with copy of ViewTransform.Conversion(result, (uint64_t)v38);
  outlined init with copy of ViewTransform.Conversion((uint64_t)v38, (uint64_t)&v28);
  if (v36 != 4)
  {
    outlined destroy of ViewTransform.Conversion((uint64_t)&v28);
    goto LABEL_24;
  }
  outlined init with take of CoordinateSpace((uint64_t)&v28, (uint64_t)&v23);
  outlined init with take of CoordinateSpace((uint64_t)&v32, (uint64_t)v37);
  outlined init with copy of CoordinateSpace((uint64_t)&v23, (uint64_t)&v28);
  outlined init with copy of CoordinateSpace((uint64_t)v37, (uint64_t)&v32);
  if (v31 == 2 && *(void *)&v28 == 1)
  {
    int8x16_t v11 = vorrq_s8(v29, v30);
    if (!*(void *)&vorr_s8(*(int8x8_t *)v11.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL)))
    {
      outlined destroy of CoordinateSpace((uint64_t)&v23);
      outlined destroy of ViewTransform.Conversion((uint64_t)v38);
      outlined init with take of CoordinateSpace((uint64_t)v37, (uint64_t)v38);
      char v39 = 2;
      double v12 = &v32;
LABEL_23:
      outlined destroy of CoordinateSpace((uint64_t)v12);
      goto LABEL_24;
    }
  }
  if (v35 == 2 && v32 == 1)
  {
    int8x16_t v13 = vorrq_s8(v33, v34);
    if (!*(void *)&vorr_s8(*(int8x8_t *)v13.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)))
    {
      outlined destroy of CoordinateSpace((uint64_t)v37);
      outlined destroy of ViewTransform.Conversion((uint64_t)v38);
      outlined init with take of CoordinateSpace((uint64_t)&v23, (uint64_t)v38);
      char v39 = 3;
LABEL_22:
      double v12 = (uint64_t *)&v28;
      goto LABEL_23;
    }
  }
  outlined init with copy of CoordinateSpace((uint64_t)&v28, (uint64_t)v22);
  if (one-time initialization token for root != -1) {
    swift_once();
  }
  char v14 = specialized static CoordinateSpace.== infix(_:_:)((uint64_t)&static CoordinateSpace.root, (uint64_t)v22);
  outlined destroy of CoordinateSpace((uint64_t)v22);
  if (v14)
  {
    outlined destroy of CoordinateSpace((uint64_t)&v23);
    outlined destroy of ViewTransform.Conversion((uint64_t)v38);
    outlined init with take of CoordinateSpace((uint64_t)v37, (uint64_t)v38);
    char v39 = 0;
LABEL_21:
    outlined destroy of CoordinateSpace((uint64_t)&v32);
    goto LABEL_22;
  }
  outlined init with copy of CoordinateSpace((uint64_t)&v32, (uint64_t)v22);
  char v15 = specialized static CoordinateSpace.== infix(_:_:)((uint64_t)&static CoordinateSpace.root, (uint64_t)v22);
  outlined destroy of CoordinateSpace((uint64_t)v22);
  outlined destroy of CoordinateSpace((uint64_t)v37);
  if (v15)
  {
    outlined destroy of ViewTransform.Conversion((uint64_t)v38);
    outlined init with take of CoordinateSpace((uint64_t)&v23, (uint64_t)v38);
    char v39 = 1;
    goto LABEL_21;
  }
  outlined destroy of CoordinateSpace((uint64_t)&v23);
  outlined destroy of (CoordinateSpace, CoordinateSpace)((uint64_t)&v28, &lazy cache variable for type metadata for (CoordinateSpace, CoordinateSpace));
LABEL_24:
  char v27 = 0;
  outlined init with copy of ViewTransform.Conversion((uint64_t)v38, (uint64_t)&v28);
  switch(v36)
  {
    case 1:
      outlined init with copy of ViewTransform.Conversion((uint64_t)&v28, (uint64_t)&v23);
      if (v26 == 2 && v23 == 1)
      {
        int8x16_t v17 = vorrq_s8(v24, v25);
        if (!*(void *)&vorr_s8(*(int8x8_t *)v17.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL))) {
          goto LABEL_42;
        }
      }
      outlined destroy of CoordinateSpace((uint64_t)&v23);
      goto LABEL_40;
    case 2:
      outlined init with copy of ViewTransform.Conversion((uint64_t)&v28, (uint64_t)&v23);
      if (v26 == 2 && v23 == 1)
      {
        int8x16_t v18 = vorrq_s8(v24, v25);
        if (!*(void *)&vorr_s8(*(int8x8_t *)v18.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL))) {
          goto LABEL_36;
        }
      }
      outlined destroy of CoordinateSpace((uint64_t)&v23);
      goto LABEL_42;
    case 3:
      outlined init with copy of ViewTransform.Conversion((uint64_t)&v28, (uint64_t)&v23);
      if (one-time initialization token for root != -1) {
        swift_once();
      }
      char v19 = specialized static CoordinateSpace.== infix(_:_:)((uint64_t)&static CoordinateSpace.root, (uint64_t)&v23);
      outlined destroy of CoordinateSpace((uint64_t)&v23);
      if ((v19 & 1) == 0) {
        goto LABEL_40;
      }
      goto LABEL_42;
    case 4:
LABEL_40:
      outlined destroy of ViewTransform.Conversion((uint64_t)&v28);
      goto LABEL_43;
    default:
      outlined init with copy of ViewTransform.Conversion((uint64_t)&v28, (uint64_t)&v23);
      if (one-time initialization token for root != -1) {
        swift_once();
      }
      char v16 = specialized static CoordinateSpace.== infix(_:_:)((uint64_t)&static CoordinateSpace.root, (uint64_t)&v23);
      outlined destroy of CoordinateSpace((uint64_t)&v23);
      if (v16)
      {
LABEL_36:
        outlined destroy of ViewTransform.Conversion((uint64_t)&v28);
      }
      else
      {
LABEL_42:
        outlined destroy of ViewTransform.Conversion((uint64_t)&v28);
        char v27 = 1;
LABEL_43:
        outlined init with copy of ViewTransform.Conversion((uint64_t)v38, (uint64_t)&v28);
        switch(v36)
        {
          case 0:
          case 3:
            outlined destroy of ViewTransform.Conversion((uint64_t)&v28);
            char v20 = 0;
            break;
          case 1:
          case 2:
            outlined destroy of ViewTransform.Conversion((uint64_t)&v28);
            char v20 = 1;
            break;
          case 4:
            outlined init with take of CoordinateSpace((uint64_t)&v28, (uint64_t)&v23);
            outlined init with take of CoordinateSpace((uint64_t)&v32, (uint64_t)v37);
            *(double *)double v22 = v6;
            v22[1] = v7;
            void v22[2] = v8;
            *(double *)&void v22[3] = v9;
            *(double *)&v22[4] = v10;
            char v21 = ViewTransform.spaceBeforeSpace(_:_:)((uint64_t)&v23, (uint64_t)v37);
            outlined destroy of CoordinateSpace((uint64_t)v37);
            outlined destroy of CoordinateSpace((uint64_t)&v23);
            char v20 = v21 ^ 1;
            break;
          default:
            JUMPOUT(0);
        }
        double v28 = v6;
        v29.i64[0] = v7;
        v29.i64[1] = v8;
        *(double *)v30.uint64_t i64 = v9;
        *(double *)&v30.i64[1] = v10;
        a4(v20 & 1, &v28, v38, &v27, a3);
      }
      uint64_t result = outlined destroy of ViewTransform.Conversion((uint64_t)v38);
      break;
  }
  return result;
}

uint64_t specialized ViewTransform.forEach(inverted:_:)(uint64_t result, uint64_t a2, uint64_t a3, unsigned char *a4, uint64_t a5)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v33 = a5;
  uint64_t v28 = a3;
  int8x16_t v29 = a4;
  int8x16_t v30 = closure #1 in ApplyViewTransform.convert(from:transform:)specialized partial apply;
  char v31 = &v32;
  Swift::UInt32 v5 = *(void **)a2;
  if (*(void *)a2)
  {
    double v9 = *(double *)(a2 + 24);
    double v8 = *(double *)(a2 + 32);
    char v26 = 0;
    if (result)
    {
      if (v9 == 0.0 && v8 == 0.0)
      {
        swift_retain();
LABEL_22:
        uint64_t v18 = v5[2];
        (*(void (**)(uint64_t, char *, uint64_t (*)(), unsigned char *))(*v5 + 104))(1, &v26, closure #1 in ViewTransform.convert(_:_:)partial apply, v27);
        while ((v26 & 1) == 0 && v18)
        {
          uint64_t v19 = v18;
          uint64_t v18 = *(void *)(v18 + 16);
          (*(void (**)(uint64_t, char *, uint64_t (*)(), unsigned char *))(*(void *)v19 + 104))(1, &v26, closure #1 in ViewTransform.convert(_:_:)partial apply, v27);
        }
        return swift_release();
      }
      double v34 = -v9;
      double v35 = -v8;
      char v36 = 0;
      swift_retain();
      specialized closure #1 in ViewTransform.convert(_:_:)((uint64_t)&v34, &v26, a3, a4);
      outlined destroy of ViewTransform.Item((uint64_t)&v34);
      if ((v26 & 1) == 0) {
        goto LABEL_22;
      }
      return swift_release();
    }
    uint64_t v10 = v5[3];
    if (v10 < 0)
    {
      __break(1u);
    }
    else if (!((unint64_t)(v10 + 0x1000000000000000) >> 61))
    {
      uint64_t isStackAllocationSafe = swift_retain();
      if (8 * v10 < 1025
        || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
      {
        v12.n128_f64[0] = MEMORY[0x270FA5388](isStackAllocationSafe);
        char v14 = &v25[-v13];
        *(void *)&v25[-v13] = v5;
        uint64_t v15 = v5[2];
        if (v15)
        {
          char v16 = v14 + 8;
          do
          {
            *v16++ = v15;
            uint64_t v15 = *(void *)(v15 + 16);
          }
          while (v15);
        }
        if (v10)
        {
          (*(void (**)(void, char *, uint64_t (*)(), unsigned char *, __n128))(**(void **)&v14[8 * v10 - 8]
                                                                                            + 104))(0, &v26, closure #1 in ViewTransform.convert(_:_:)partial apply, v27, v12);
          if ((v26 & 1) != 0 || v10 == 1)
          {
            if (v26) {
              return swift_release();
            }
          }
          else
          {
            (*(void (**)(void, char *, uint64_t (*)(), unsigned char *))(**(void **)&v14[8 * v10 - 16]
                                                                                      + 104))(0, &v26, closure #1 in ViewTransform.convert(_:_:)partial apply, v27);
            if (v26) {
              return swift_release();
            }
            int8x16_t v17 = v14 - 24;
            while (v10 != 2)
            {
              (*(void (**)(void, char *, uint64_t (*)(), unsigned char *))(**(void **)&v17[8 * v10--]
                                                                                        + 104))(0, &v26, closure #1 in ViewTransform.convert(_:_:)partial apply, v27);
              if (v26) {
                return swift_release();
              }
            }
          }
        }
        goto LABEL_42;
      }
      char v20 = (void *)swift_slowAlloc();
      char v21 = v20;
      *char v20 = v5;
      uint64_t v22 = v5[2];
      if (v22)
      {
        uint64_t v23 = v20 + 1;
        do
        {
          *v23++ = v22;
          uint64_t v22 = *(void *)(v22 + 16);
        }
        while (v22);
      }
      if (v10)
      {
        (*(void (**)(void, char *, uint64_t (*)(), unsigned char *))(*(void *)v20[v10 - 1] + 104))(0, &v26, closure #1 in ViewTransform.convert(_:_:)partial apply, v27);
        char v24 = v26;
        if ((v26 & 1) != 0 || v10 == 1)
        {
          MEMORY[0x24C527CC0](v21, -1, -1);
          if (v24) {
            return swift_release();
          }
LABEL_42:
          if (v9 != 0.0 || v8 != 0.0)
          {
            double v34 = v9;
            double v35 = v8;
            char v36 = 0;
            specialized closure #1 in ViewTransform.convert(_:_:)((uint64_t)&v34, &v26, a3, a4);
            outlined destroy of ViewTransform.Item((uint64_t)&v34);
          }
          return swift_release();
        }
        (*(void (**)(void, char *, uint64_t (*)(), unsigned char *))(*(void *)v21[v10 - 2] + 104))(0, &v26, closure #1 in ViewTransform.convert(_:_:)partial apply, v27);
        if (v26)
        {
LABEL_37:
          MEMORY[0x24C527CC0](v21, -1, -1);
          return swift_release();
        }
        while (v10 != 2)
        {
          (*(void (**)(void, char *, uint64_t (*)(), unsigned char *))(*(void *)v21[v10-- - 3] + 104))(0, &v26, closure #1 in ViewTransform.convert(_:_:)partial apply, v27);
          if (v26) {
            goto LABEL_37;
          }
        }
      }
      MEMORY[0x24C527CC0](v21, -1, -1);
      goto LABEL_42;
    }
    __break(1u);
  }
  return result;
}

{
  void *v5;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t isStackAllocationSafe;
  __n128 v13;
  uint64_t v14;
  unsigned char *v15;
  uint64_t v16;
  void *v17;
  unsigned char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  char v25;
  unsigned char v26[15];
  char v27;
  unsigned char v28[16];
  uint64_t v29;
  unsigned char *v30;
  uint64_t (*v31)();
  char *v32;
  char v33;
  uint64_t v34;
  double v35;
  double v36;
  char v37;
  uint64_t v38;

  uint64_t v38 = *MEMORY[0x263EF8340];
  double v34 = a5;
  int8x16_t v29 = a3;
  int8x16_t v30 = a4;
  char v31 = closure #1 in ApplyViewTransform.convert(from:transform:)specialized partial apply;
  char v32 = &v33;
  Swift::UInt32 v5 = *(void **)a2;
  if (*(void *)a2)
  {
    uint64_t v10 = *(double *)(a2 + 24);
    double v9 = *(double *)(a2 + 32);
    char v27 = 0;
    if (result)
    {
      if (v10 == 0.0 && v9 == 0.0)
      {
        swift_retain();
LABEL_22:
        uint64_t v19 = v5[2];
        (*(void (**)(uint64_t, char *, uint64_t (*)(), unsigned char *))(*v5 + 104))(1, &v27, closure #1 in ViewTransform.convert(_:_:)partial apply, v28);
        while ((v27 & 1) == 0 && v19)
        {
          char v20 = v19;
          uint64_t v19 = *(void *)(v19 + 16);
          (*(void (**)(uint64_t, char *, uint64_t (*)(), unsigned char *))(*(void *)v20 + 104))(1, &v27, closure #1 in ViewTransform.convert(_:_:)partial apply, v28);
        }
        return swift_release();
      }
      double v35 = -v10;
      char v36 = -v9;
      uint64_t v37 = 0;
      swift_retain();
      specialized closure #1 in ViewTransform.convert(_:_:)((uint64_t)&v35, &v27, a3, a4, a5, (uint64_t (*)(uint64_t))CGPoint.applyTransform(item:));
      outlined destroy of ViewTransform.Item((uint64_t)&v35);
      if ((v27 & 1) == 0) {
        goto LABEL_22;
      }
      return swift_release();
    }
    int8x16_t v11 = v5[3];
    if (v11 < 0)
    {
      __break(1u);
    }
    else if (!((unint64_t)(v11 + 0x1000000000000000) >> 61))
    {
      uint64_t isStackAllocationSafe = swift_retain();
      if (8 * v11 < 1025
        || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
      {
        v13.n128_f64[0] = MEMORY[0x270FA5388](isStackAllocationSafe);
        uint64_t v15 = &v26[-v14];
        *(void *)&v26[-v14] = v5;
        char v16 = v5[2];
        if (v16)
        {
          int8x16_t v17 = v15 + 8;
          do
          {
            *v17++ = v16;
            char v16 = *(void *)(v16 + 16);
          }
          while (v16);
        }
        if (v11)
        {
          (*(void (**)(void, char *, uint64_t (*)(), unsigned char *, __n128))(**(void **)&v15[8 * v11 - 8]
                                                                                            + 104))(0, &v27, closure #1 in ViewTransform.convert(_:_:)partial apply, v28, v13);
          if ((v27 & 1) != 0 || v11 == 1)
          {
            if (v27) {
              return swift_release();
            }
          }
          else
          {
            (*(void (**)(void, char *, uint64_t (*)(), unsigned char *))(**(void **)&v15[8 * v11 - 16]
                                                                                      + 104))(0, &v27, closure #1 in ViewTransform.convert(_:_:)partial apply, v28);
            if (v27) {
              return swift_release();
            }
            uint64_t v18 = v15 - 24;
            while (v11 != 2)
            {
              (*(void (**)(void, char *, uint64_t (*)(), unsigned char *))(**(void **)&v18[8 * v11--]
                                                                                        + 104))(0, &v27, closure #1 in ViewTransform.convert(_:_:)partial apply, v28);
              if (v27) {
                return swift_release();
              }
            }
          }
        }
        goto LABEL_42;
      }
      char v21 = (void *)swift_slowAlloc();
      uint64_t v22 = v21;
      *char v21 = v5;
      uint64_t v23 = v5[2];
      if (v23)
      {
        char v24 = v21 + 1;
        do
        {
          *v24++ = v23;
          uint64_t v23 = *(void *)(v23 + 16);
        }
        while (v23);
      }
      if (v11)
      {
        (*(void (**)(void, char *, uint64_t (*)(), unsigned char *))(*(void *)v21[v11 - 1] + 104))(0, &v27, closure #1 in ViewTransform.convert(_:_:)partial apply, v28);
        int8x16_t v25 = v27;
        if ((v27 & 1) != 0 || v11 == 1)
        {
          MEMORY[0x24C527CC0](v22, -1, -1);
          if (v25) {
            return swift_release();
          }
LABEL_42:
          if (v10 != 0.0 || v9 != 0.0)
          {
            double v35 = v10;
            char v36 = v9;
            uint64_t v37 = 0;
            specialized closure #1 in ViewTransform.convert(_:_:)((uint64_t)&v35, &v27, a3, a4, a5, (uint64_t (*)(uint64_t))CGPoint.applyTransform(item:));
            outlined destroy of ViewTransform.Item((uint64_t)&v35);
          }
          return swift_release();
        }
        (*(void (**)(void, char *, uint64_t (*)(), unsigned char *))(*(void *)v22[v11 - 2] + 104))(0, &v27, closure #1 in ViewTransform.convert(_:_:)partial apply, v28);
        if (v27)
        {
LABEL_37:
          MEMORY[0x24C527CC0](v22, -1, -1);
          return swift_release();
        }
        while (v11 != 2)
        {
          (*(void (**)(void, char *, uint64_t (*)(), unsigned char *))(*(void *)v22[v11-- - 3] + 104))(0, &v27, closure #1 in ViewTransform.convert(_:_:)partial apply, v28);
          if (v27) {
            goto LABEL_37;
          }
        }
      }
      MEMORY[0x24C527CC0](v22, -1, -1);
      goto LABEL_42;
    }
    __break(1u);
  }
  return result;
}

{
  void *v5;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t isStackAllocationSafe;
  __n128 v13;
  uint64_t v14;
  unsigned char *v15;
  uint64_t v16;
  void *v17;
  unsigned char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  char v25;
  unsigned char v26[15];
  char v27;
  unsigned char v28[16];
  uint64_t v29;
  unsigned char *v30;
  void (*v31)(uint64_t);
  char *v32;
  char v33;
  uint64_t v34;
  double v35;
  double v36;
  char v37;
  uint64_t v38;

  uint64_t v38 = *MEMORY[0x263EF8340];
  double v34 = a5;
  int8x16_t v29 = a3;
  int8x16_t v30 = a4;
  char v31 = closure #1 in ViewTransform.convert(_:point:)partial apply;
  char v32 = &v33;
  Swift::UInt32 v5 = *(void **)a2;
  if (*(void *)a2)
  {
    uint64_t v10 = *(double *)(a2 + 24);
    double v9 = *(double *)(a2 + 32);
    char v27 = 0;
    if (result)
    {
      if (v10 == 0.0 && v9 == 0.0)
      {
        swift_retain();
LABEL_22:
        uint64_t v19 = v5[2];
        (*(void (**)(uint64_t, char *, uint64_t (*)(), unsigned char *))(*v5 + 104))(1, &v27, closure #1 in ViewTransform.convert(_:_:)partial apply, v28);
        while ((v27 & 1) == 0 && v19)
        {
          char v20 = v19;
          uint64_t v19 = *(void *)(v19 + 16);
          (*(void (**)(uint64_t, char *, uint64_t (*)(), unsigned char *))(*(void *)v20 + 104))(1, &v27, closure #1 in ViewTransform.convert(_:_:)partial apply, v28);
        }
        return swift_release();
      }
      double v35 = -v10;
      char v36 = -v9;
      uint64_t v37 = 0;
      swift_retain();
      specialized closure #1 in ViewTransform.convert(_:_:)((uint64_t)&v35, &v27, a3, a4, a5, (uint64_t (*)(uint64_t))CGPoint.applyTransform(item:));
      outlined destroy of ViewTransform.Item((uint64_t)&v35);
      if ((v27 & 1) == 0) {
        goto LABEL_22;
      }
      return swift_release();
    }
    int8x16_t v11 = v5[3];
    if (v11 < 0)
    {
      __break(1u);
    }
    else if (!((unint64_t)(v11 + 0x1000000000000000) >> 61))
    {
      uint64_t isStackAllocationSafe = swift_retain();
      if (8 * v11 < 1025
        || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
      {
        v13.n128_f64[0] = MEMORY[0x270FA5388](isStackAllocationSafe);
        uint64_t v15 = &v26[-v14];
        *(void *)&v26[-v14] = v5;
        char v16 = v5[2];
        if (v16)
        {
          int8x16_t v17 = v15 + 8;
          do
          {
            *v17++ = v16;
            char v16 = *(void *)(v16 + 16);
          }
          while (v16);
        }
        if (v11)
        {
          (*(void (**)(void, char *, uint64_t (*)(), unsigned char *, __n128))(**(void **)&v15[8 * v11 - 8]
                                                                                            + 104))(0, &v27, closure #1 in ViewTransform.convert(_:_:)partial apply, v28, v13);
          if ((v27 & 1) != 0 || v11 == 1)
          {
            if (v27) {
              return swift_release();
            }
          }
          else
          {
            (*(void (**)(void, char *, uint64_t (*)(), unsigned char *))(**(void **)&v15[8 * v11 - 16]
                                                                                      + 104))(0, &v27, closure #1 in ViewTransform.convert(_:_:)partial apply, v28);
            if (v27) {
              return swift_release();
            }
            uint64_t v18 = v15 - 24;
            while (v11 != 2)
            {
              (*(void (**)(void, char *, uint64_t (*)(), unsigned char *))(**(void **)&v18[8 * v11--]
                                                                                        + 104))(0, &v27, closure #1 in ViewTransform.convert(_:_:)partial apply, v28);
              if (v27) {
                return swift_release();
              }
            }
          }
        }
        goto LABEL_42;
      }
      char v21 = (void *)swift_slowAlloc();
      uint64_t v22 = v21;
      *char v21 = v5;
      uint64_t v23 = v5[2];
      if (v23)
      {
        char v24 = v21 + 1;
        do
        {
          *v24++ = v23;
          uint64_t v23 = *(void *)(v23 + 16);
        }
        while (v23);
      }
      if (v11)
      {
        (*(void (**)(void, char *, uint64_t (*)(), unsigned char *))(*(void *)v21[v11 - 1] + 104))(0, &v27, closure #1 in ViewTransform.convert(_:_:)partial apply, v28);
        int8x16_t v25 = v27;
        if ((v27 & 1) != 0 || v11 == 1)
        {
          MEMORY[0x24C527CC0](v22, -1, -1);
          if (v25) {
            return swift_release();
          }
LABEL_42:
          if (v10 != 0.0 || v9 != 0.0)
          {
            double v35 = v10;
            char v36 = v9;
            uint64_t v37 = 0;
            specialized closure #1 in ViewTransform.convert(_:_:)((uint64_t)&v35, &v27, a3, a4, a5, (uint64_t (*)(uint64_t))CGPoint.applyTransform(item:));
            outlined destroy of ViewTransform.Item((uint64_t)&v35);
          }
          return swift_release();
        }
        (*(void (**)(void, char *, uint64_t (*)(), unsigned char *))(*(void *)v22[v11 - 2] + 104))(0, &v27, closure #1 in ViewTransform.convert(_:_:)partial apply, v28);
        if (v27)
        {
LABEL_37:
          MEMORY[0x24C527CC0](v22, -1, -1);
          return swift_release();
        }
        while (v11 != 2)
        {
          (*(void (**)(void, char *, uint64_t (*)(), unsigned char *))(*(void *)v22[v11-- - 3] + 104))(0, &v27, closure #1 in ViewTransform.convert(_:_:)partial apply, v28);
          if (v27) {
            goto LABEL_37;
          }
        }
      }
      MEMORY[0x24C527CC0](v22, -1, -1);
      goto LABEL_42;
    }
    __break(1u);
  }
  return result;
}

{
  void *v5;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t isStackAllocationSafe;
  __n128 v13;
  uint64_t v14;
  unsigned char *v15;
  uint64_t v16;
  void *v17;
  unsigned char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  char v25;
  unsigned char v26[15];
  char v27;
  unsigned char v28[16];
  uint64_t v29;
  unsigned char *v30;
  void (*v31)(uint64_t);
  char *v32;
  char v33;
  uint64_t v34;
  double v35;
  double v36;
  char v37;
  uint64_t v38;

  uint64_t v38 = *MEMORY[0x263EF8340];
  double v34 = a5;
  int8x16_t v29 = a3;
  int8x16_t v30 = a4;
  char v31 = closure #1 in ViewTransform.convert<A>(_:points:)specialized partial apply;
  char v32 = &v33;
  Swift::UInt32 v5 = *(void **)a2;
  if (*(void *)a2)
  {
    uint64_t v10 = *(double *)(a2 + 24);
    double v9 = *(double *)(a2 + 32);
    char v27 = 0;
    if (result)
    {
      if (v10 == 0.0 && v9 == 0.0)
      {
        swift_retain();
LABEL_22:
        uint64_t v19 = v5[2];
        (*(void (**)(uint64_t, char *, uint64_t (*)(), unsigned char *))(*v5 + 104))(1, &v27, closure #1 in ViewTransform.convert(_:_:)partial apply, v28);
        while ((v27 & 1) == 0 && v19)
        {
          char v20 = v19;
          uint64_t v19 = *(void *)(v19 + 16);
          (*(void (**)(uint64_t, char *, uint64_t (*)(), unsigned char *))(*(void *)v20 + 104))(1, &v27, closure #1 in ViewTransform.convert(_:_:)partial apply, v28);
        }
        return swift_release();
      }
      double v35 = -v10;
      char v36 = -v9;
      uint64_t v37 = 0;
      swift_retain();
      specialized closure #1 in ViewTransform.convert(_:_:)((uint64_t)&v35, &v27, a3, a4, a5, (uint64_t (*)(uint64_t))specialized MutableCollection<>._applyTransform(item:));
      outlined destroy of ViewTransform.Item((uint64_t)&v35);
      if ((v27 & 1) == 0) {
        goto LABEL_22;
      }
      return swift_release();
    }
    int8x16_t v11 = v5[3];
    if (v11 < 0)
    {
      __break(1u);
    }
    else if (!((unint64_t)(v11 + 0x1000000000000000) >> 61))
    {
      uint64_t isStackAllocationSafe = swift_retain();
      if (8 * v11 < 1025
        || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
      {
        v13.n128_f64[0] = MEMORY[0x270FA5388](isStackAllocationSafe);
        uint64_t v15 = &v26[-v14];
        *(void *)&v26[-v14] = v5;
        char v16 = v5[2];
        if (v16)
        {
          int8x16_t v17 = v15 + 8;
          do
          {
            *v17++ = v16;
            char v16 = *(void *)(v16 + 16);
          }
          while (v16);
        }
        if (v11)
        {
          (*(void (**)(void, char *, uint64_t (*)(), unsigned char *, __n128))(**(void **)&v15[8 * v11 - 8]
                                                                                            + 104))(0, &v27, closure #1 in ViewTransform.convert(_:_:)partial apply, v28, v13);
          if ((v27 & 1) != 0 || v11 == 1)
          {
            if (v27) {
              return swift_release();
            }
          }
          else
          {
            (*(void (**)(void, char *, uint64_t (*)(), unsigned char *))(**(void **)&v15[8 * v11 - 16]
                                                                                      + 104))(0, &v27, closure #1 in ViewTransform.convert(_:_:)partial apply, v28);
            if (v27) {
              return swift_release();
            }
            uint64_t v18 = v15 - 24;
            while (v11 != 2)
            {
              (*(void (**)(void, char *, uint64_t (*)(), unsigned char *))(**(void **)&v18[8 * v11--]
                                                                                        + 104))(0, &v27, closure #1 in ViewTransform.convert(_:_:)partial apply, v28);
              if (v27) {
                return swift_release();
              }
            }
          }
        }
        goto LABEL_42;
      }
      char v21 = (void *)swift_slowAlloc();
      uint64_t v22 = v21;
      *char v21 = v5;
      uint64_t v23 = v5[2];
      if (v23)
      {
        char v24 = v21 + 1;
        do
        {
          *v24++ = v23;
          uint64_t v23 = *(void *)(v23 + 16);
        }
        while (v23);
      }
      if (v11)
      {
        (*(void (**)(void, char *, uint64_t (*)(), unsigned char *))(*(void *)v21[v11 - 1] + 104))(0, &v27, closure #1 in ViewTransform.convert(_:_:)partial apply, v28);
        int8x16_t v25 = v27;
        if ((v27 & 1) != 0 || v11 == 1)
        {
          MEMORY[0x24C527CC0](v22, -1, -1);
          if (v25) {
            return swift_release();
          }
LABEL_42:
          if (v10 != 0.0 || v9 != 0.0)
          {
            double v35 = v10;
            char v36 = v9;
            uint64_t v37 = 0;
            specialized closure #1 in ViewTransform.convert(_:_:)((uint64_t)&v35, &v27, a3, a4, a5, (uint64_t (*)(uint64_t))specialized MutableCollection<>._applyTransform(item:));
            outlined destroy of ViewTransform.Item((uint64_t)&v35);
          }
          return swift_release();
        }
        (*(void (**)(void, char *, uint64_t (*)(), unsigned char *))(*(void *)v22[v11 - 2] + 104))(0, &v27, closure #1 in ViewTransform.convert(_:_:)partial apply, v28);
        if (v27)
        {
LABEL_37:
          MEMORY[0x24C527CC0](v22, -1, -1);
          return swift_release();
        }
        while (v11 != 2)
        {
          (*(void (**)(void, char *, uint64_t (*)(), unsigned char *))(*(void *)v22[v11-- - 3] + 104))(0, &v27, closure #1 in ViewTransform.convert(_:_:)partial apply, v28);
          if (v27) {
            goto LABEL_37;
          }
        }
      }
      MEMORY[0x24C527CC0](v22, -1, -1);
      goto LABEL_42;
    }
    __break(1u);
  }
  return result;
}

{
  void *v5;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t isStackAllocationSafe;
  __n128 v12;
  uint64_t v13;
  unsigned char *v14;
  uint64_t v15;
  void *v16;
  unsigned char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  char v24;
  unsigned char v25[15];
  char v26;
  unsigned char v27[16];
  uint64_t v28;
  unsigned char *v29;
  void (*v30)(uint64_t);
  char *v31;
  char v32;
  uint64_t v33;
  double v34;
  double v35;
  char v36;
  uint64_t v37;

  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v33 = a5;
  uint64_t v28 = a3;
  int8x16_t v29 = a4;
  int8x16_t v30 = closure #1 in ViewTransform.convert(_:points:)partial apply;
  char v31 = &v32;
  Swift::UInt32 v5 = *(void **)a2;
  if (*(void *)a2)
  {
    double v9 = *(double *)(a2 + 24);
    double v8 = *(double *)(a2 + 32);
    char v26 = 0;
    if (result)
    {
      if (v9 == 0.0 && v8 == 0.0)
      {
        swift_retain();
LABEL_22:
        uint64_t v18 = v5[2];
        (*(void (**)(uint64_t, char *, uint64_t (*)(), unsigned char *))(*v5 + 104))(1, &v26, closure #1 in ViewTransform.convert(_:_:)partial apply, v27);
        while ((v26 & 1) == 0 && v18)
        {
          uint64_t v19 = v18;
          uint64_t v18 = *(void *)(v18 + 16);
          (*(void (**)(uint64_t, char *, uint64_t (*)(), unsigned char *))(*(void *)v19 + 104))(1, &v26, closure #1 in ViewTransform.convert(_:_:)partial apply, v27);
        }
        return swift_release();
      }
      double v34 = -v9;
      double v35 = -v8;
      char v36 = 0;
      swift_retain();
      specialized closure #1 in ViewTransform.convert(_:_:)((uint64_t)&v34, &v26, a3, a4);
      outlined destroy of ViewTransform.Item((uint64_t)&v34);
      if ((v26 & 1) == 0) {
        goto LABEL_22;
      }
      return swift_release();
    }
    uint64_t v10 = v5[3];
    if (v10 < 0)
    {
      __break(1u);
    }
    else if (!((unint64_t)(v10 + 0x1000000000000000) >> 61))
    {
      uint64_t isStackAllocationSafe = swift_retain();
      if (8 * v10 < 1025
        || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
      {
        v12.n128_f64[0] = MEMORY[0x270FA5388](isStackAllocationSafe);
        char v14 = &v25[-v13];
        *(void *)&v25[-v13] = v5;
        uint64_t v15 = v5[2];
        if (v15)
        {
          char v16 = v14 + 8;
          do
          {
            *v16++ = v15;
            uint64_t v15 = *(void *)(v15 + 16);
          }
          while (v15);
        }
        if (v10)
        {
          (*(void (**)(void, char *, uint64_t (*)(), unsigned char *, __n128))(**(void **)&v14[8 * v10 - 8]
                                                                                            + 104))(0, &v26, closure #1 in ViewTransform.convert(_:_:)partial apply, v27, v12);
          if ((v26 & 1) != 0 || v10 == 1)
          {
            if (v26) {
              return swift_release();
            }
          }
          else
          {
            (*(void (**)(void, char *, uint64_t (*)(), unsigned char *))(**(void **)&v14[8 * v10 - 16]
                                                                                      + 104))(0, &v26, closure #1 in ViewTransform.convert(_:_:)partial apply, v27);
            if (v26) {
              return swift_release();
            }
            int8x16_t v17 = v14 - 24;
            while (v10 != 2)
            {
              (*(void (**)(void, char *, uint64_t (*)(), unsigned char *))(**(void **)&v17[8 * v10--]
                                                                                        + 104))(0, &v26, closure #1 in ViewTransform.convert(_:_:)partial apply, v27);
              if (v26) {
                return swift_release();
              }
            }
          }
        }
        goto LABEL_42;
      }
      char v20 = (void *)swift_slowAlloc();
      char v21 = v20;
      *char v20 = v5;
      uint64_t v22 = v5[2];
      if (v22)
      {
        uint64_t v23 = v20 + 1;
        do
        {
          *v23++ = v22;
          uint64_t v22 = *(void *)(v22 + 16);
        }
        while (v22);
      }
      if (v10)
      {
        (*(void (**)(void, char *, uint64_t (*)(), unsigned char *))(*(void *)v20[v10 - 1] + 104))(0, &v26, closure #1 in ViewTransform.convert(_:_:)partial apply, v27);
        char v24 = v26;
        if ((v26 & 1) != 0 || v10 == 1)
        {
          MEMORY[0x24C527CC0](v21, -1, -1);
          if (v24) {
            return swift_release();
          }
LABEL_42:
          if (v9 != 0.0 || v8 != 0.0)
          {
            double v34 = v9;
            double v35 = v8;
            char v36 = 0;
            specialized closure #1 in ViewTransform.convert(_:_:)((uint64_t)&v34, &v26, a3, a4);
            outlined destroy of ViewTransform.Item((uint64_t)&v34);
          }
          return swift_release();
        }
        (*(void (**)(void, char *, uint64_t (*)(), unsigned char *))(*(void *)v21[v10 - 2] + 104))(0, &v26, closure #1 in ViewTransform.convert(_:_:)partial apply, v27);
        if (v26)
        {
LABEL_37:
          MEMORY[0x24C527CC0](v21, -1, -1);
          return swift_release();
        }
        while (v10 != 2)
        {
          (*(void (**)(void, char *, uint64_t (*)(), unsigned char *))(*(void *)v21[v10-- - 3] + 104))(0, &v26, closure #1 in ViewTransform.convert(_:_:)partial apply, v27);
          if (v26) {
            goto LABEL_37;
          }
        }
      }
      MEMORY[0x24C527CC0](v21, -1, -1);
      goto LABEL_42;
    }
    __break(1u);
  }
  return result;
}

uint64_t SafeAreaInsets.mergedInsets(regions:)@<X0>(uint64_t result@<X0>, float64x2_t *a2@<X8>)
{
  uint64_t v3 = *(void *)(v2 + 8);
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    Swift::UInt32 v5 = (float64x2_t *)(v3 + 40 * v4);
    float64x2_t v6 = 0uLL;
    unsigned int v7 = 15;
    float64x2_t v8 = 0uLL;
    float64x2_t v9 = 0uLL;
    float64x2_t v10 = 0uLL;
    do
    {
      float64x2_t v16 = *v5;
      float64x2_t v17 = v5[1];
      if ((*(void *)&v5[-1].f64[1] & result) != 0)
      {
        int8x8_t v11 = (int8x8_t)vdup_n_s32(v7);
        int32x2_t v12 = vceqz_s32((int32x2_t)vand_s8(v11, (int8x8_t)0x200000001));
        v13.i64[0] = v12.i32[0];
        v13.i64[1] = v12.i32[1];
        float64x2_t v14 = (float64x2_t)vbicq_s8((int8x16_t)v16, v13);
        int32x2_t v15 = vceqz_s32((int32x2_t)vand_s8(v11, (int8x8_t)0x800000004));
        v13.i64[0] = v15.i32[0];
        v13.i64[1] = v15.i32[1];
        float64x2_t v6 = vaddq_f64(v6, v14);
        float64x2_t v8 = vaddq_f64(v8, (float64x2_t)vbicq_s8((int8x16_t)v17, v13));
      }
      else
      {
        if ((v7 & 2) != 0 && v16.f64[1] != 0.0) {
          v7 &= ~2u;
        }
        if ((v7 & 8) != 0 && v17.f64[1] != 0.0) {
          v7 &= ~8u;
        }
        if ((v7 & 1) != 0 && v16.f64[0] != 0.0) {
          v7 &= ~1u;
        }
        if ((v7 & 4) != 0 && v17.f64[0] != 0.0) {
          v7 &= ~4u;
        }
      }
      float64x2_t v9 = vaddq_f64(v9, v16);
      float64x2_t v10 = vaddq_f64(v10, v17);
      Swift::UInt32 v5 = (float64x2_t *)((char *)v5 - 40);
      --v4;
    }
    while (v4);
  }
  else
  {
    float64x2_t v6 = 0uLL;
    float64x2_t v8 = 0uLL;
    float64x2_t v9 = 0uLL;
    float64x2_t v10 = 0uLL;
  }
  *a2 = v6;
  a2[1] = v8;
  a2[2] = v9;
  a2[3] = v10;
  return result;
}

uint64_t _PaddingLayout.spacing(in:child:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X8>)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  int v4 = *a1;
  int v5 = a1[1];
  Swift::UInt32 v6 = a1[2];
  int v7 = *(_DWORD *)(a2 + 4);
  if (one-time initialization token for introduced != -1) {
    swift_once();
  }
  unsigned int v8 = static _SemanticFeature_v2.introduced;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC == 1)
  {
    if ((dyld_program_sdk_at_least() & 1) == 0) {
      goto LABEL_7;
    }
  }
  else if (static Semantics.forced < v8)
  {
LABEL_7:
    if (v7 == *MEMORY[0x263F288F8])
    {
      if (one-time initialization token for defaultValue != -1) {
        swift_once();
      }
      Inputuint64_t Value = (uint64_t *)&static LayoutComputer.defaultValue;
    }
    else
    {
      Inputuint64_t Value = (uint64_t *)AGGraphGetInputValue();
    }
    uint64_t v11 = *InputValue;
    uint64_t v12 = one-time initialization token for lockAssertionsAreEnabled;
    swift_retain();
    if (v12 != -1) {
      swift_once();
    }
    if (!lockAssertionsAreEnabled) {
      goto LABEL_23;
    }
    if (one-time initialization token for _lock != -1) {
      swift_once();
    }
    if (_MovableLockIsOwner(static Update._lock))
    {
LABEL_23:
      (*(void (**)(void))(*(void *)v11 + 112))();
      return swift_release();
    }
    goto LABEL_40;
  }
  if (v7 == *MEMORY[0x263F288F8])
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    float64x2_t v10 = (uint64_t *)&static LayoutComputer.defaultValue;
  }
  else
  {
    float64x2_t v10 = (uint64_t *)AGGraphGetInputValue();
  }
  uint64_t v14 = *v10;
  uint64_t v15 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v15 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_31;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_31:
    (*(void (**)(unint64_t **__return_ptr))(*(void *)v14 + 112))(&v24);
    swift_release();
    v23[0] = v4;
    v23[1] = v5;
    void v23[2] = v6;
    _PaddingLayout.effectiveInsets(in:)((uint64_t)v23);
    if (one-time initialization token for introduced != -1) {
      swift_once();
    }
    if (byte_26B0F44FC == 1)
    {
      if ((dyld_program_sdk_at_least() & 1) == 0) {
        goto LABEL_35;
      }
    }
    else if (static Semantics.forced < static _SemanticFeature_v3.introduced)
    {
LABEL_35:
      uint64_t KeyPath = swift_getKeyPath();
      Swift::UInt32 v25 = v6;
      uint64_t v26 = KeyPath;
      _s7SwiftUI10EdgeInsetsVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentFetch<LayoutDirection>, (uint64_t)&type metadata for LayoutDirection, (uint64_t (*)(void, uint64_t))type metadata accessor for EnvironmentFetch);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v6);
      type metadata accessor for KeyPath<EnvironmentValues, LayoutDirection>(0, (unint64_t *)&lazy cache variable for type metadata for KeyPath<EnvironmentValues, LayoutDirection>);
      swift_retain();
      dispatch thunk of Hashable.hash(into:)();
      Hasher._finalize()();
      lazy protocol witness table accessor for type EnvironmentFetch<LayoutDirection> and conformance EnvironmentFetch<A>(&lazy protocol witness table cache variable for type EnvironmentFetch<LayoutDirection> and conformance EnvironmentFetch<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentFetch<LayoutDirection>, (uint64_t)&type metadata for LayoutDirection);
      lazy protocol witness table accessor for type EnvironmentFetch<LayoutDirection> and conformance EnvironmentFetch<A>(&lazy protocol witness table cache variable for type EnvironmentFetch<LayoutDirection> and conformance EnvironmentFetch<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentFetch<LayoutDirection>, (uint64_t)&type metadata for LayoutDirection);
      LOBYTE(v23[0]) = 0;
      char v17 = *(unsigned char *)static Rule<>._cachedValue(options:owner:hashValue:bodyPtr:update:)();
      swift_release_n();
      LOBYTE(v25) = v17;
      uint64_t result = AbsoluteEdge.Set.init(_:layoutDirection:)((unsigned __int8 *)&v25, v23);
      uint64_t v18 = (unint64_t *)LOBYTE(v23[0]);
      if (LOBYTE(v23[0]))
      {
        uint64_t v19 = swift_bridgeObjectRetain();
        char v20 = specialized _NativeDictionary.filter(_:)(v19, v18);
        uint64_t result = swift_bridgeObjectRelease_n();
        char v24 = v20;
      }
      goto LABEL_39;
    }
    uint64_t v21 = swift_getKeyPath();
    Swift::UInt32 v25 = v6;
    uint64_t v26 = v21;
    _s7SwiftUI10EdgeInsetsVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentFetch<LayoutDirection>, (uint64_t)&type metadata for LayoutDirection, (uint64_t (*)(void, uint64_t))type metadata accessor for EnvironmentFetch);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v6);
    type metadata accessor for KeyPath<EnvironmentValues, LayoutDirection>(0, (unint64_t *)&lazy cache variable for type metadata for KeyPath<EnvironmentValues, LayoutDirection>);
    swift_retain();
    dispatch thunk of Hashable.hash(into:)();
    Hasher._finalize()();
    lazy protocol witness table accessor for type EnvironmentFetch<LayoutDirection> and conformance EnvironmentFetch<A>(&lazy protocol witness table cache variable for type EnvironmentFetch<LayoutDirection> and conformance EnvironmentFetch<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentFetch<LayoutDirection>, (uint64_t)&type metadata for LayoutDirection);
    lazy protocol witness table accessor for type EnvironmentFetch<LayoutDirection> and conformance EnvironmentFetch<A>(&lazy protocol witness table cache variable for type EnvironmentFetch<LayoutDirection> and conformance EnvironmentFetch<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentFetch<LayoutDirection>, (uint64_t)&type metadata for LayoutDirection);
    LOBYTE(v23[0]) = 0;
    char v22 = *(unsigned char *)static Rule<>._cachedValue(options:owner:hashValue:bodyPtr:update:)();
    swift_release_n();
    LOBYTE(v23[0]) = v22;
    AbsoluteEdge.Set.init(_:layoutDirection:)((unsigned __int8 *)v23, &v25);
    uint64_t result = (uint64_t)Spacing.reset(_:)(&v25);
LABEL_39:
    *a3 = v24;
    return result;
  }
LABEL_40:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for EdgeInsets?(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void _s7SwiftUI10EdgeInsetsVSgMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI10EdgeInsetsVSgMaTm_1(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void type metadata accessor for KeyPath<EnvironmentValues, LayoutDirection>(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = type metadata accessor for KeyPath();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

void _ss7KeyPathCy7SwiftUI17EnvironmentValuesVAC15LayoutDirectionOGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t specialized ViewTransform.convert(_:_:)(uint64_t result, double *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, unsigned char *a7, double a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15)
{
  double v24 = *a2;
  uint64_t v25 = *((void *)a2 + 1);
  uint64_t v26 = *((void *)a2 + 2);
  double v27 = a2[3];
  double v28 = a2[4];
  if (!*(void *)a2 && v27 == 0.0 && v28 == 0.0) {
    return result;
  }
  outlined init with copy of ViewTransform.Conversion(result, (uint64_t)v61);
  outlined init with copy of ViewTransform.Conversion((uint64_t)v61, (uint64_t)&v51);
  if (v59 != 4)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    outlined destroy of ViewTransform.Conversion((uint64_t)&v51);
    goto LABEL_24;
  }
  outlined init with take of CoordinateSpace((uint64_t)&v51, (uint64_t)&v46);
  outlined init with take of CoordinateSpace((uint64_t)&v55, (uint64_t)v60);
  outlined init with copy of CoordinateSpace((uint64_t)&v46, (uint64_t)&v51);
  outlined init with copy of CoordinateSpace((uint64_t)v60, (uint64_t)&v55);
  if (v54 == 2 && *(void *)&v51 == 1)
  {
    int8x16_t v29 = vorrq_s8(v52, v53);
    if (!*(void *)&vorr_s8(*(int8x8_t *)v29.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL)))
    {
      swift_retain();
      swift_bridgeObjectRetain();
      outlined destroy of CoordinateSpace((uint64_t)&v46);
      outlined destroy of ViewTransform.Conversion((uint64_t)v61);
      outlined init with take of CoordinateSpace((uint64_t)v60, (uint64_t)v61);
      char v62 = 2;
      int8x16_t v30 = &v55;
LABEL_23:
      outlined destroy of CoordinateSpace((uint64_t)v30);
      goto LABEL_24;
    }
  }
  if (v58 == 2 && v55 == 1)
  {
    int8x16_t v31 = vorrq_s8(v56, v57);
    if (!*(void *)&vorr_s8(*(int8x8_t *)v31.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL)))
    {
      swift_retain();
      swift_bridgeObjectRetain();
      outlined destroy of CoordinateSpace((uint64_t)v60);
      outlined destroy of ViewTransform.Conversion((uint64_t)v61);
      outlined init with take of CoordinateSpace((uint64_t)&v46, (uint64_t)v61);
      char v62 = 3;
LABEL_22:
      int8x16_t v30 = (uint64_t *)&v51;
      goto LABEL_23;
    }
  }
  outlined init with copy of CoordinateSpace((uint64_t)&v51, (uint64_t)v45);
  uint64_t v32 = one-time initialization token for root;
  swift_bridgeObjectRetain();
  swift_retain();
  if (v32 != -1) {
    swift_once();
  }
  char v33 = specialized static CoordinateSpace.== infix(_:_:)((uint64_t)&static CoordinateSpace.root, (uint64_t)v45);
  outlined destroy of CoordinateSpace((uint64_t)v45);
  if (v33)
  {
    outlined destroy of CoordinateSpace((uint64_t)&v46);
    outlined destroy of ViewTransform.Conversion((uint64_t)v61);
    outlined init with take of CoordinateSpace((uint64_t)v60, (uint64_t)v61);
    char v62 = 0;
LABEL_21:
    outlined destroy of CoordinateSpace((uint64_t)&v55);
    goto LABEL_22;
  }
  outlined init with copy of CoordinateSpace((uint64_t)&v55, (uint64_t)v45);
  char v34 = specialized static CoordinateSpace.== infix(_:_:)((uint64_t)&static CoordinateSpace.root, (uint64_t)v45);
  outlined destroy of CoordinateSpace((uint64_t)v45);
  outlined destroy of CoordinateSpace((uint64_t)v60);
  if (v34)
  {
    outlined destroy of ViewTransform.Conversion((uint64_t)v61);
    outlined init with take of CoordinateSpace((uint64_t)&v46, (uint64_t)v61);
    char v62 = 1;
    goto LABEL_21;
  }
  outlined destroy of CoordinateSpace((uint64_t)&v46);
  outlined destroy of (CoordinateSpace, CoordinateSpace)((uint64_t)&v51, &lazy cache variable for type metadata for (CoordinateSpace, CoordinateSpace));
LABEL_24:
  char v50 = 0;
  outlined init with copy of ViewTransform.Conversion((uint64_t)v61, (uint64_t)&v51);
  switch(v59)
  {
    case 1:
      outlined init with copy of ViewTransform.Conversion((uint64_t)&v51, (uint64_t)&v46);
      if (v49 == 2 && v46 == 1)
      {
        int8x16_t v36 = vorrq_s8(v47, v48);
        if (!*(void *)&vorr_s8(*(int8x8_t *)v36.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL))) {
          goto LABEL_42;
        }
      }
      outlined destroy of CoordinateSpace((uint64_t)&v46);
      goto LABEL_40;
    case 2:
      outlined init with copy of ViewTransform.Conversion((uint64_t)&v51, (uint64_t)&v46);
      if (v49 == 2 && v46 == 1)
      {
        int8x16_t v37 = vorrq_s8(v47, v48);
        if (!*(void *)&vorr_s8(*(int8x8_t *)v37.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v37, v37, 8uLL))) {
          goto LABEL_36;
        }
      }
      outlined destroy of CoordinateSpace((uint64_t)&v46);
      goto LABEL_42;
    case 3:
      outlined init with copy of ViewTransform.Conversion((uint64_t)&v51, (uint64_t)&v46);
      if (one-time initialization token for root != -1) {
        swift_once();
      }
      char v38 = specialized static CoordinateSpace.== infix(_:_:)((uint64_t)&static CoordinateSpace.root, (uint64_t)&v46);
      outlined destroy of CoordinateSpace((uint64_t)&v46);
      if ((v38 & 1) == 0) {
        goto LABEL_40;
      }
      goto LABEL_42;
    case 4:
LABEL_40:
      outlined destroy of ViewTransform.Conversion((uint64_t)&v51);
      goto LABEL_43;
    default:
      outlined init with copy of ViewTransform.Conversion((uint64_t)&v51, (uint64_t)&v46);
      if (one-time initialization token for root != -1) {
        swift_once();
      }
      char v35 = specialized static CoordinateSpace.== infix(_:_:)((uint64_t)&static CoordinateSpace.root, (uint64_t)&v46);
      outlined destroy of CoordinateSpace((uint64_t)&v46);
      if (v35)
      {
LABEL_36:
        outlined destroy of ViewTransform.Conversion((uint64_t)&v51);
        outlined destroy of ViewTransform.Conversion((uint64_t)v61);
        swift_bridgeObjectRelease();
        uint64_t result = swift_release();
      }
      else
      {
LABEL_42:
        outlined destroy of ViewTransform.Conversion((uint64_t)&v51);
        char v50 = 1;
LABEL_43:
        outlined init with copy of ViewTransform.Conversion((uint64_t)v61, (uint64_t)&v51);
        switch(v59)
        {
          case 0:
          case 3:
            outlined destroy of ViewTransform.Conversion((uint64_t)&v51);
            char v39 = 0;
            break;
          case 1:
          case 2:
            outlined destroy of ViewTransform.Conversion((uint64_t)&v51);
            char v39 = 1;
            break;
          case 4:
            outlined init with take of CoordinateSpace((uint64_t)&v51, (uint64_t)&v46);
            outlined init with take of CoordinateSpace((uint64_t)&v55, (uint64_t)v60);
            *(double *)double v45 = v24;
            v45[1] = v25;
            v45[2] = v26;
            *(double *)&v45[3] = v27;
            *(double *)&v45[4] = v28;
            char v40 = ViewTransform.spaceBeforeSpace(_:_:)((uint64_t)&v46, (uint64_t)v60);
            outlined destroy of CoordinateSpace((uint64_t)v60);
            outlined destroy of CoordinateSpace((uint64_t)&v46);
            char v39 = v40 ^ 1;
            break;
          default:
            JUMPOUT(0);
        }
        double v51 = v24;
        v52.i64[0] = v25;
        v52.i64[1] = v26;
        *(double *)v53.uint64_t i64 = v27;
        *(double *)&v53.i64[1] = v28;
        swift_retain();
        swift_bridgeObjectRetain();
        specialized ViewTransform.forEach(inverted:_:)(v39 & 1, (uint64_t)&v51, (uint64_t)v61, &v50, a3, a4, a5, a6, a8, a9, a10, a11, a12, a13, a14, a15, a7);
        swift_release();
        swift_bridgeObjectRelease();
        outlined destroy of ViewTransform.Conversion((uint64_t)v61);
        swift_release();
        uint64_t result = swift_bridgeObjectRelease();
      }
      break;
  }
  return result;
}

uint64_t specialized ViewTransform.forEach(inverted:_:)(char a1, uint64_t a2, uint64_t a3, unsigned char *a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, unsigned char *a17)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  v60[2] = a5;
  v60[3] = a6;
  v60[4] = a7;
  v60[5] = a8;
  *(double *)&v60[6] = a9;
  *(double *)&v60[7] = a10;
  *(double *)&v60[8] = a11;
  *(double *)&v60[9] = a12;
  *(double *)&v60[10] = a13;
  *(double *)&v60[11] = a14;
  *(double *)&v60[12] = a15;
  *(double *)&v60[13] = a16;
  v60[14] = a17;
  _OWORD v59[2] = a3;
  void v59[3] = a4;
  v59[4] = closure #1 in SafeAreaInsets.adjust(_:regions:to:)partial apply;
  v59[5] = v60;
  uint64_t v19 = *(void **)a2;
  if (*(void *)a2)
  {
    double v32 = *(double *)(a2 + 24);
    double v33 = *(double *)(a2 + 32);
    char v58 = 0;
    if (a1)
    {
      if (v32 == 0.0 && v33 == 0.0)
      {
        swift_bridgeObjectRetain_n();
        swift_retain_n();
        swift_retain();
LABEL_23:
        uint64_t v42 = v19[2];
        (*(void (**)(uint64_t, char *, uint64_t (*)(uint64_t, unsigned char *), void *))(*v19 + 104))(1, &v58, partial apply for closure #1 in ViewTransform.convert(_:_:), v59);
        while ((v58 & 1) == 0 && v42)
        {
          uint64_t v43 = v42;
          uint64_t v42 = *(void *)(v42 + 16);
          (*(void (**)(uint64_t, char *, uint64_t (*)(uint64_t, unsigned char *), void *))(*(void *)v43 + 104))(1, &v58, partial apply for closure #1 in ViewTransform.convert(_:_:), v59);
        }
        goto LABEL_46;
      }
      double v61 = -v32;
      double v62 = -v33;
      char v63 = 0;
      swift_retain_n();
      swift_bridgeObjectRetain_n();
      swift_retain();
      specialized closure #1 in ViewTransform.convert(_:_:)((uint64_t)&v61, &v58, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
      outlined destroy of ViewTransform.Item((uint64_t)&v61);
      if ((v58 & 1) == 0) {
        goto LABEL_23;
      }
LABEL_46:
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      goto LABEL_47;
    }
    char v54 = a4;
    uint64_t v34 = v19[3];
    if (v34 < 0)
    {
      __break(1u);
    }
    else
    {
      double v56 = v32;
      double v57 = v33;
      uint64_t v53 = a5;
      if (!((unint64_t)(v34 + 0x1000000000000000) >> 61))
      {
        swift_retain_n();
        swift_bridgeObjectRetain_n();
        uint64_t isStackAllocationSafe = swift_retain();
        int8x16_t v52 = a8;
        if (8 * v34 < 1025
          || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
        {
          uint64_t v55 = &v51;
          v36.n128_f64[0] = MEMORY[0x270FA5388](isStackAllocationSafe);
          char v38 = (char *)&v51 - v37;
          *(uint64_t *)((char *)&v51 - v37) = (uint64_t)v19;
          uint64_t v39 = v19[2];
          if (v39)
          {
            char v40 = v38 + 8;
            do
            {
              *v40++ = v39;
              uint64_t v39 = *(void *)(v39 + 16);
            }
            while (v39);
          }
          if (v34)
          {
            (*(void (**)(void, char *, uint64_t (*)(uint64_t, unsigned char *), void *, __n128))(**(void **)&v38[8 * v34 - 8] + 104))(0, &v58, partial apply for closure #1 in ViewTransform.convert(_:_:), v59, v36);
            if ((v58 & 1) == 0 && v34 != 1)
            {
              (*(void (**)(void, char *, uint64_t (*)(uint64_t, unsigned char *), void *))(**(void **)&v38[8 * v34 - 16] + 104))(0, &v58, partial apply for closure #1 in ViewTransform.convert(_:_:), v59);
              if (v58) {
                goto LABEL_46;
              }
              double v41 = v38 - 24;
              while (v34 != 2)
              {
                (*(void (**)(void, char *, uint64_t (*)(uint64_t, unsigned char *), void *))(**(void **)&v41[8 * v34--] + 104))(0, &v58, partial apply for closure #1 in ViewTransform.convert(_:_:), v59);
                if (v58) {
                  goto LABEL_46;
                }
              }
              goto LABEL_42;
            }
            double v49 = v56;
            double v48 = v57;
            if (v58) {
              goto LABEL_46;
            }
LABEL_43:
            if (v49 != 0.0 || v48 != 0.0)
            {
              double v61 = v49;
              double v62 = v48;
              char v63 = 0;
              swift_retain();
              swift_bridgeObjectRetain();
              specialized closure #1 in ViewTransform.convert(_:_:)((uint64_t)&v61, &v58, a3, v54, v53, a6, a7, v52, a9, a10, a11, a12, a13, a14, a15, a16, a17);
              swift_release();
              swift_bridgeObjectRelease();
              outlined destroy of ViewTransform.Item((uint64_t)&v61);
            }
            goto LABEL_46;
          }
        }
        else
        {
          double v44 = (uint64_t *)swift_slowAlloc();
          *double v44 = (uint64_t)v19;
          uint64_t v45 = v19[2];
          if (v45)
          {
            uint64_t v46 = v44 + 1;
            do
            {
              *v46++ = v45;
              uint64_t v45 = *(void *)(v45 + 16);
            }
            while (v45);
          }
          uint64_t v55 = v44;
          if (v34)
          {
            (*(void (**)(void, char *, uint64_t (*)(uint64_t, unsigned char *), void *))(*(void *)v55[v34 - 1] + 104))(0, &v58, partial apply for closure #1 in ViewTransform.convert(_:_:), v59);
            char v47 = v58;
            if ((v58 & 1) != 0 || v34 == 1)
            {
              MEMORY[0x24C527CC0](v55, -1, -1);
              double v49 = v56;
              double v48 = v57;
              if (v47) {
                goto LABEL_46;
              }
              goto LABEL_43;
            }
            (*(void (**)(void, char *, uint64_t (*)(uint64_t, unsigned char *), void *))(*(void *)v55[v34 - 2] + 104))(0, &v58, partial apply for closure #1 in ViewTransform.convert(_:_:), v59);
            if (v58)
            {
LABEL_38:
              MEMORY[0x24C527CC0](v55, -1, -1);
              goto LABEL_46;
            }
            while (v34 != 2)
            {
              (*(void (**)(void, char *, uint64_t (*)(uint64_t, unsigned char *), void *))(*(void *)v55[v34-- - 3] + 104))(0, &v58, partial apply for closure #1 in ViewTransform.convert(_:_:), v59);
              if (v58) {
                goto LABEL_38;
              }
            }
          }
          MEMORY[0x24C527CC0](v55, -1, -1);
        }
LABEL_42:
        double v49 = v56;
        double v48 = v57;
        goto LABEL_43;
      }
    }
    __break(1u);
  }
  swift_bridgeObjectRetain();
  swift_retain();
LABEL_47:
  swift_release();
  return swift_bridgeObjectRelease();
}

void specialized closure #1 in ViewTransform.convert(_:_:)(uint64_t a1, unsigned char *a2, uint64_t a3, unsigned char *a4)
{
  outlined init with copy of ViewTransform.Item(a1, (uint64_t)v17);
  if (v21 - 3 >= 2)
  {
    outlined destroy of ViewTransform.Item((uint64_t)v17);
  }
  else
  {
    outlined init with take of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content(v17, v22);
    outlined init with copy of CoordinateSpace.Name((uint64_t)v22, (uint64_t)v17);
    if (v19)
    {
      *(void *)&v12[0] = *(void *)&v17[0];
      char v8 = 1;
    }
    else
    {
      char v8 = 0;
      v12[0] = v17[0];
      v12[1] = v17[1];
      uint64_t v13 = v18;
    }
    char v14 = v8;
    outlined init with take of CoordinateSpace((uint64_t)v12, (uint64_t)v17);
    outlined destroy of CoordinateSpace.Name((uint64_t)v22);
    outlined init with take of CoordinateSpace((uint64_t)v17, (uint64_t)v16);
    outlined init with copy of ViewTransform.Conversion(a3, (uint64_t)v17);
    switch(v20)
    {
      case 1:
      case 3:
        outlined init with copy of ViewTransform.Conversion((uint64_t)v17, (uint64_t)v12);
        char v10 = specialized static CoordinateSpace.== infix(_:_:)((uint64_t)v16, (uint64_t)v12);
        outlined destroy of CoordinateSpace((uint64_t)v16);
        outlined destroy of CoordinateSpace((uint64_t)v12);
        if ((v10 & 1) == 0) {
          goto LABEL_15;
        }
        goto LABEL_10;
      case 4:
        outlined init with copy of ViewTransform.Conversion((uint64_t)v17, (uint64_t)v12);
        if (specialized static CoordinateSpace.== infix(_:_:)((uint64_t)v16, (uint64_t)v15))
        {
          outlined destroy of CoordinateSpace((uint64_t)v16);
          outlined destroy of CoordinateSpace((uint64_t)v15);
          outlined destroy of CoordinateSpace((uint64_t)v12);
LABEL_13:
          outlined destroy of ViewTransform.Conversion((uint64_t)v17);
          *a2 = 1;
          return;
        }
        char v11 = specialized static CoordinateSpace.== infix(_:_:)((uint64_t)v16, (uint64_t)v12);
        outlined destroy of CoordinateSpace((uint64_t)v16);
        outlined destroy of CoordinateSpace((uint64_t)v12);
        outlined destroy of CoordinateSpace((uint64_t)v15);
        if (v11)
        {
LABEL_10:
          outlined destroy of ViewTransform.Conversion((uint64_t)v17);
          *a4 = 1;
        }
        else
        {
LABEL_15:
          outlined destroy of ViewTransform.Conversion((uint64_t)v17);
        }
        break;
      default:
        outlined init with copy of ViewTransform.Conversion((uint64_t)v17, (uint64_t)v12);
        char v9 = specialized static CoordinateSpace.== infix(_:_:)((uint64_t)v16, (uint64_t)v12);
        outlined destroy of CoordinateSpace((uint64_t)v16);
        outlined destroy of CoordinateSpace((uint64_t)v12);
        if ((v9 & 1) == 0) {
          goto LABEL_15;
        }
        goto LABEL_13;
    }
  }
  if (*a4 == 1) {
    specialized MutableCollection<>._applyTransform(item:)(a1);
  }
}

void closure #1 in ViewTransform.convert(_:points:)partial apply(uint64_t a1)
{
}

void specialized MutableCollection<>._applyTransform(item:)(uint64_t a1)
{
  outlined init with copy of ViewTransform.Item(a1, (uint64_t)&v28);
  switch(v32)
  {
    case 1:
      CGFloat b = v28.b;
      CGFloat a = v28.a;
      CGFloat d = v28.d;
      CGFloat c = v28.c;
      tCGFloat y = v28.ty;
      tCGFloat x = v28.tx;
      if (v29)
      {
        CGAffineTransform v33 = v28;
        CGAffineTransformInvert(&v27, &v33);
        CGFloat a = v27.a;
        CGFloat b = v27.b;
        CGFloat c = v27.c;
        CGFloat d = v27.d;
        tCGFloat x = v27.tx;
        tCGFloat y = v27.ty;
      }
      uint64_t v2 = *(void **)v1;
      uint64_t v18 = *(void *)(*(void *)v1 + 16);
      if (!v18) {
        return;
      }
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_21;
      }
      while (1)
      {
        uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
LABEL_21:
        unint64_t v19 = 0;
        char v20 = v2 + 5;
        while (v19 < v2[2])
        {
          ++v19;
          CGPoint v36 = *(CGPoint *)(v20 - 1);
          v33.CGFloat a = a;
          v33.CGFloat b = b;
          v33.CGFloat c = c;
          v33.CGFloat d = d;
          v33.tCGFloat x = tx;
          v33.tCGFloat y = ty;
          *(CGPoint *)(v20 - 1) = CGPointApplyAffineTransform(v36, &v33);
          v20 += 2;
          if (v18 == v19) {
            goto LABEL_24;
          }
        }
        __break(1u);
      }
    case 2:
      CGAffineTransform v33 = v28;
      long long v34 = v29;
      uint64_t v35 = v30;
      specialized MutableCollection<>._apply(_:inverse:)((uint64_t)&v33, v31);
      return;
    case 3:
      outlined destroy of ViewTransform.Item((uint64_t)&v28);
      return;
    case 4:
      outlined destroy of CoordinateSpace.Name((uint64_t)&v28);
      return;
    case 5:
      return;
    default:
      uint64_t v2 = *(void **)v1;
      unint64_t v3 = *(void *)(*(void *)v1 + 16);
      if (!v3) {
        return;
      }
      float64x2_t v26 = *(float64x2_t *)&v28.a;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
      }
      if (v3 < 0xC
        || ((uint64_t v4 = 2 * (v3 - 1),
             unint64_t v5 = (unint64_t)&v2[v4 + 5],
             unint64_t v6 = (unint64_t)&v2[v4 + 4],
             v5 >= (unint64_t)(v2 + 5))
          ? (BOOL v7 = v6 >= (unint64_t)(v2 + 4))
          : (BOOL v7 = 0),
            v7 ? (BOOL v8 = (v3 - 1) >> 60 == 0) : (BOOL v8 = 0),
            !v8))
      {
        uint64_t v9 = 0;
LABEL_14:
        unint64_t v10 = v3 - v9;
        char v11 = (float64x2_t *)&v2[2 * v9 + 4];
        do
        {
          *char v11 = vaddq_f64(v26, *v11);
          ++v11;
          --v10;
        }
        while (v10);
        goto LABEL_24;
      }
      uint64_t v9 = v3 & 0x7FFFFFFFFFFFFFFCLL;
      float64x2_t v21 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v26.f64[0], 0);
      float64x2_t v22 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v26, 1);
      uint64_t v23 = (double *)(v2 + 8);
      uint64_t v24 = v3 & 0x7FFFFFFFFFFFFFFCLL;
      do
      {
        uint64_t v25 = v23 - 4;
        float64x2x2_t v37 = vld2q_f64(v25);
        float64x2x2_t v38 = vld2q_f64(v23);
        v39.val[0] = vaddq_f64(v21, v37.val[0]);
        v39.val[1] = vaddq_f64(v22, v37.val[1]);
        v37.val[0] = vaddq_f64(v21, v38.val[0]);
        v37.val[1] = vaddq_f64(v22, v38.val[1]);
        vst2q_f64(v25, v39);
        vst2q_f64(v23, v37);
        v23 += 8;
        v24 -= 4;
      }
      while (v24);
      if (v3 != v9) {
        goto LABEL_14;
      }
LABEL_24:
      *(void *)uint64_t v1 = v2;
      return;
  }
}

{
  unint64_t *v1;
  unint64_t v2;
  float64x2_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  float64x2_t *v12;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  CGFloat tx;
  CGFloat ty;
  unint64_t v19;
  uint64_t v20;
  float64x2_t v21;
  float64x2_t v22;
  double *v23;
  unint64_t v24;
  double *v25;
  CGAffineTransform v26;
  int64x2_t v27;
  long long v28;
  long long v29;
  long long v30;
  uint64_t v31;
  char v32;
  char v33;
  CGAffineTransform v34;
  long long v35;
  uint64_t v36;
  CGPoint v37;
  float64x2x2_t v38;
  float64x2x2_t v39;
  float64x2x2_t v40;

  outlined init with copy of ViewTransform.Item(a1, (uint64_t)&v27);
  switch(v33)
  {
    case 1:
      CGFloat b = *(double *)&v27.i64[1];
      CGFloat a = *(double *)v27.i64;
      CGFloat d = *((double *)&v28 + 1);
      CGFloat c = *(double *)&v28;
      tCGFloat y = *((double *)&v29 + 1);
      tCGFloat x = *(double *)&v29;
      if (v30)
      {
        *(int64x2_t *)&v34.CGFloat a = v27;
        *(_OWORD *)&v34.CGFloat c = v28;
        *(_OWORD *)&v34.tCGFloat x = v29;
        CGAffineTransformInvert(&v26, &v34);
        CGFloat a = v26.a;
        CGFloat b = v26.b;
        CGFloat c = v26.c;
        CGFloat d = v26.d;
        tCGFloat x = v26.tx;
        tCGFloat y = v26.ty;
      }
      unint64_t v19 = v1[1];
      if (!v19) {
        return;
      }
      if ((v19 & 0x8000000000000000) != 0) {
        goto LABEL_32;
      }
      char v20 = *v1 + 8;
      do
      {
        float64x2x2_t v37 = *(CGPoint *)(v20 - 8);
        v34.CGFloat a = a;
        v34.CGFloat b = b;
        v34.CGFloat c = c;
        v34.CGFloat d = d;
        v34.tCGFloat x = tx;
        v34.tCGFloat y = ty;
        *(CGPoint *)(v20 - 8) = CGPointApplyAffineTransform(v37, &v34);
        v20 += 16;
        --v19;
      }
      while (v19);
      return;
    case 2:
      *(_OWORD *)&v34.tCGFloat x = v29;
      uint64_t v35 = v30;
      CGPoint v36 = v31;
      *(int64x2_t *)&v34.CGFloat a = v27;
      *(_OWORD *)&v34.CGFloat c = v28;
      specialized MutableCollection<>._apply(_:inverse:)((uint64_t)&v34, v32);
      return;
    case 3:
      outlined destroy of ViewTransform.Item((uint64_t)&v27);
      return;
    case 4:
      outlined destroy of CoordinateSpace.Name((uint64_t)&v27);
      return;
    case 5:
      return;
    default:
      uint64_t v2 = v1[1];
      if (!v2) {
        return;
      }
      if ((v2 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_32:
        __break(1u);
        JUMPOUT(0x2460ED208);
      }
      unint64_t v3 = (float64x2_t)v27;
      uint64_t v4 = *v1;
      if (v2 < 0xC
        || ((unint64_t v5 = 16 * (v2 - 1), v6 = v4 + 8 + v5, v7 = v4 + v5, v6 >= v4 + 8) ? (v8 = v7 >= v4) : (v8 = 0),
            v8 ? (uint64_t v9 = (v2 - 1) >> 60 == 0) : (uint64_t v9 = 0),
            !v9))
      {
        unint64_t v10 = 0;
LABEL_13:
        char v11 = v2 - v10;
        uint64_t v12 = (float64x2_t *)(v4 + 16 * v10);
        do
        {
          *uint64_t v12 = vaddq_f64(v3, *v12);
          ++v12;
          --v11;
        }
        while (v11);
        return;
      }
      unint64_t v10 = v2 & 0xFFFFFFFFFFFFFFFCLL;
      float64x2_t v21 = (float64x2_t)vdupq_lane_s64(v27.i64[0], 0);
      float64x2_t v22 = (float64x2_t)vdupq_laneq_s64(v27, 1);
      uint64_t v23 = (double *)(v4 + 32);
      uint64_t v24 = v2 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        uint64_t v25 = v23 - 4;
        float64x2x2_t v38 = vld2q_f64(v25);
        float64x2x2_t v39 = vld2q_f64(v23);
        v40.val[0] = vaddq_f64(v21, v38.val[0]);
        v40.val[1] = vaddq_f64(v22, v38.val[1]);
        v38.val[0] = vaddq_f64(v21, v39.val[0]);
        v38.val[1] = vaddq_f64(v22, v39.val[1]);
        vst2q_f64(v25, v40);
        vst2q_f64(v23, v38);
        v23 += 8;
        v24 -= 4;
      }
      while (v24);
      if (v2 != v10) {
        goto LABEL_13;
      }
      return;
  }
}

void specialized closure #1 in ViewTransform.convert(_:_:)(uint64_t a1, unsigned char *a2, uint64_t a3, unsigned char *a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, unsigned char *a17)
{
  outlined init with copy of ViewTransform.Item(a1, (uint64_t)v42);
  if (v46 - 3 >= 2)
  {
    outlined destroy of ViewTransform.Item((uint64_t)v42);
  }
  else
  {
    outlined init with take of CodableAccessibilityCustomContentList.CodableEntry.CodableValue.Content(v42, v47);
    outlined init with copy of CoordinateSpace.Name((uint64_t)v47, (uint64_t)v42);
    if (v44)
    {
      *(void *)&v37[0] = *(void *)&v42[0];
      char v33 = 1;
    }
    else
    {
      char v33 = 0;
      v37[0] = v42[0];
      v37[1] = v42[1];
      uint64_t v38 = v43;
    }
    char v39 = v33;
    outlined init with take of CoordinateSpace((uint64_t)v37, (uint64_t)v42);
    outlined destroy of CoordinateSpace.Name((uint64_t)v47);
    outlined init with take of CoordinateSpace((uint64_t)v42, (uint64_t)v41);
    outlined init with copy of ViewTransform.Conversion(a3, (uint64_t)v42);
    switch(v45)
    {
      case 1:
      case 3:
        outlined init with copy of ViewTransform.Conversion((uint64_t)v42, (uint64_t)v37);
        char v35 = specialized static CoordinateSpace.== infix(_:_:)((uint64_t)v41, (uint64_t)v37);
        outlined destroy of CoordinateSpace((uint64_t)v41);
        outlined destroy of CoordinateSpace((uint64_t)v37);
        if ((v35 & 1) == 0) {
          goto LABEL_15;
        }
        goto LABEL_10;
      case 4:
        outlined init with copy of ViewTransform.Conversion((uint64_t)v42, (uint64_t)v37);
        if (specialized static CoordinateSpace.== infix(_:_:)((uint64_t)v41, (uint64_t)v40))
        {
          outlined destroy of CoordinateSpace((uint64_t)v41);
          outlined destroy of CoordinateSpace((uint64_t)v40);
          outlined destroy of CoordinateSpace((uint64_t)v37);
LABEL_13:
          outlined destroy of ViewTransform.Conversion((uint64_t)v42);
          *a2 = 1;
          return;
        }
        char v36 = specialized static CoordinateSpace.== infix(_:_:)((uint64_t)v41, (uint64_t)v37);
        outlined destroy of CoordinateSpace((uint64_t)v41);
        outlined destroy of CoordinateSpace((uint64_t)v37);
        outlined destroy of CoordinateSpace((uint64_t)v40);
        if (v36)
        {
LABEL_10:
          outlined destroy of ViewTransform.Conversion((uint64_t)v42);
          *a4 = 1;
        }
        else
        {
LABEL_15:
          outlined destroy of ViewTransform.Conversion((uint64_t)v42);
        }
        break;
      default:
        outlined init with copy of ViewTransform.Conversion((uint64_t)v42, (uint64_t)v37);
        char v34 = specialized static CoordinateSpace.== infix(_:_:)((uint64_t)v41, (uint64_t)v37);
        outlined destroy of CoordinateSpace((uint64_t)v41);
        outlined destroy of CoordinateSpace((uint64_t)v37);
        if ((v34 & 1) == 0) {
          goto LABEL_15;
        }
        goto LABEL_13;
    }
  }
  if (*a4 == 1) {
    closure #1 in SafeAreaInsets.adjust(_:regions:to:)(a1, a5, a9, a10, a11, a12, a13, a14, a15, a16, a6, a7, a8, a17);
  }
}

void type metadata accessor for CGPoint(uint64_t a1)
{
}

void static _ProposedSize.unspecified.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 1;
}

uint64_t AnyDynamicFontModifier.hash(into:)()
{
  Hasher._combine(_:)(*(void *)(*(void *)v0 + 136));
  return dispatch thunk of Hashable.hash(into:)();
}

void protocol witness for Hashable.hash(into:) in conformance SpeedAnimation()
{
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v1 = *v0;
  }
  else {
    Swift::UInt64 v1 = 0;
  }
  Hasher._combine(_:)(v1);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance HostPreferencesTransform<A>()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

uint64_t static ReuseTrace.traceReuseCacheItemAdded(_:_:)()
{
  return static ReuseTrace.traceReuseCacheItemAdded(_:_:)();
}

{
  uint64_t result;

  uint64_t result = swift_beginAccess();
  if (static ReuseTrace.recorder) {
    return AGGraphAddTraceEvent();
  }
  return result;
}

uint64_t static Pair<>.== infix(_:_:)()
{
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  type metadata accessor for Pair();
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t static VerticalAlignment.firstTextLineCenter.getter()
{
  return static HorizontalAlignment.center.getter(&one-time initialization token for _firstTextLineCenter, (uint64_t)&static VerticalAlignment._firstTextLineCenter);
}

uint64_t static Font.title3.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for title3);
}

_UNKNOWN **associated type witness table accessor for ViewModifier.Body : View in ResetDeltaModifier()
{
  return &protocol witness table for Never;
}

uint64_t type metadata accessor for AnyTransitionBox()
{
  return self;
}

double static Calendar.Component.Magnitude.max.getter@<D0>(void *a1@<X0>, double *a2@<X1>, void *a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  double result = *a2;
  *a3 = *(void *)a2;
  return result;
}

BOOL partial apply for closure #1 in DynamicViewList.Item.invalidate()(uint64_t *a1)
{
  return static Unmanaged.== infix(_:_:)(*a1, v1);
}

BOOL static Unmanaged.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

void *CoreViewSetMaskGeometry(void *result, void *a2, double a3, double a4, double a5, double a6)
{
  int v11 = (int)result;
  if (result == 2)
  {
    double result = (void *)[a2 mask];
  }
  else
  {
    if (result) {
      return result;
    }
    double result = (void *)[a2 maskView];
  }
  uint64_t v12 = result;
  if (result)
  {
    if (v11 == 2)
    {
      [a2 frame];
      [a2 frame];
      objc_msgSend(v12, "setFrame:");
    }
    else
    {
      objc_msgSend(result, "setCenter:", a3, a4);
    }
    return objc_msgSend(v12, "setBounds:", a3, a4, a5, a6);
  }
  return result;
}

uint64_t initializeWithCopy for ContentPathObservers.Observer(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_unknownObjectWeakCopyInit();
  *(void *)(result + 8) = *(void *)(a2 + 8);
  return result;
}

uint64_t getEnumTagSinglePayload for HoverEffectContext(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 27)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t View.preference<A>(key:value:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  BOOL v8 = (char *)&v15 - v7;
  uint64_t v9 = type metadata accessor for _PreferenceWritingModifier();
  uint64_t v10 = *(void *)(v9 - 8);
  double v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v15 - v12;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v8, a2, AssociatedTypeWitness, v11);
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v13, v8, AssociatedTypeWitness);
  View.modifier<A>(_:)(v13, a3, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

double static _AnchorWritingModifier.makeView(modifier:inputs:animated:body:)@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, void (*a4)(uint64_t *__return_ptr, uint64_t, long long *)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, ValueMetadata *a7@<X6>, uint64_t a8@<X7>, double *a9@<X8>)
{
  void (*v57)(uint64_t *__return_ptr, uint64_t, long long *);
  int v58;
  uint64_t v59;
  double *v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  double v71;
  long long v72;
  unsigned char v73[24];
  uint64_t v74;
  uint64_t v75;
  long long v76;
  unint64_t v77;
  int v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  long long v82;
  uint64_t v83;
  uint64_t v84;
  long long v85;
  unint64_t v86;
  int v87;

  uint64_t v55 = a8;
  char v59 = a6;
  uint64_t v56 = a5;
  double v57 = a4;
  uint64_t v60 = a9;
  char v58 = *a1;
  double v61 = *a2;
  int v10 = *((_DWORD *)a2 + 2);
  uint64_t v11 = a2[2];
  unsigned int v12 = *((_DWORD *)a2 + 6);
  double v62 = *((_DWORD *)a2 + 7);
  unsigned int v13 = *((_DWORD *)a2 + 9);
  double v67 = *((_DWORD *)a2 + 8);
  uint64_t v14 = a2[5];
  uint64_t v15 = a2[6];
  unsigned int v16 = *((_DWORD *)a2 + 15);
  double v69 = *((_DWORD *)a2 + 14);
  uint64_t v17 = *((unsigned int *)a2 + 16);
  double v68 = *((_DWORD *)a2 + 17);
  unsigned int v18 = *((_DWORD *)a2 + 18);
  double v66 = *((_DWORD *)a2 + 19);
  float64x2_t v65 = *((_DWORD *)a2 + 20);
  uint64_t v64 = v16;
  char v63 = v13;
  if (a3)
  {
    unsigned int v52 = v18;
    swift_beginAccess();
    if ((v13 & 0x20) == 0)
    {
      uint64_t OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
      uint64_t v54 = v17;
LABEL_30:
      uint64_t v53 = OffsetAttribute2;
      swift_endAccess();
      unsigned int v18 = v52;
      goto LABEL_31;
    }
    double v48 = a7;
    uint64_t v20 = v61;
    CGRect v79 = v61;
    int v51 = v10;
    CGRect v80 = v10;
    CGRect v81 = v11;
    LODWORD(v53) = v12;
    *(void *)&CGRect v82 = __PAIR64__(v62, v12);
    *((void *)&v82 + 1) = __PAIR64__(v13, v67);
    CGRect v83 = v14;
    CGRect v84 = v15;
    *(void *)&CGRect v85 = __PAIR64__(v16, v69);
    *((void *)&v85 + 1) = __PAIR64__(v68, v17);
    unsigned int v21 = v52;
    CGRect v86 = __PAIR64__(v66, v52);
    CGRect v87 = v65;
    swift_retain();
    swift_retain();
    uint64_t v50 = v14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unsigned int v22 = _ViewInputs.geometryTransaction()();
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v49 = v11 + 16;
    int v24 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
    swift_release();
    if ((*(unsigned char *)(v11 + 81) & 1) == 0
      && v17 == *(_DWORD *)(v11 + 32)
      && v52 == *(_DWORD *)(v11 + 36)
      && v24 == *(_DWORD *)(v11 + 40)
      && v51 == *(_DWORD *)(v11 + 44)
      && v22 == *(_DWORD *)(v11 + 48)
      && v53 == *(_DWORD *)(v11 + 52))
    {
      if ((*(unsigned char *)(v11 + 64) & 1) == 0)
      {
        uint64_t v25 = *(unsigned int *)(v11 + 60);
LABEL_17:
        uint64_t v54 = v25;
        goto LABEL_18;
      }
    }
    else
    {
      CGRect v79 = v61;
      CGRect v80 = v51;
      CGRect v81 = v11;
      *(void *)&CGRect v82 = __PAIR64__(v22, v53);
      *((void *)&v82 + 1) = __PAIR64__(v63, v67);
      CGRect v83 = v50;
      CGRect v84 = v15;
      *(void *)&CGRect v85 = __PAIR64__(v64, v69);
      *((void *)&v85 + 1) = __PAIR64__(v68, v17);
      CGRect v86 = __PAIR64__(v66, v52);
      CGRect v87 = v65;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v79, v24, (uint64_t)&v72);
      long long v26 = *(_OWORD *)v73;
      uint64_t v27 = v73[16];
      unsigned __int8 v28 = v75;
      unint64_t v29 = v73[16] | ((unint64_t)*(unsigned int *)&v73[20] << 32);
      unint64_t v30 = v74 | ((unint64_t)HIDWORD(v74) << 32);
      *(_OWORD *)(v11 + 32) = v72;
      *(_OWORD *)(v11 + 48) = v26;
      *(void *)(v11 + 64) = v29;
      *(void *)(v11 + 72) = v30;
      *(_WORD *)(v11 + 80) = v28;
      if (v27 != 1)
      {
        uint64_t v25 = HIDWORD(*((void *)&v26 + 1));
        goto LABEL_17;
      }
    }
    uint64_t v54 = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v11 + 60) = v54;
    *(unsigned char *)(v11 + 64) = 0;
LABEL_18:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    CGRect v79 = v20;
    CGRect v80 = v51;
    CGRect v81 = v11;
    *(void *)&CGRect v82 = __PAIR64__(v62, v53);
    *((void *)&v82 + 1) = __PAIR64__(v63, v67);
    CGRect v83 = v50;
    CGRect v84 = v15;
    *(void *)&CGRect v85 = __PAIR64__(v64, v69);
    *((void *)&v85 + 1) = __PAIR64__(v68, v17);
    CGRect v86 = __PAIR64__(v66, v21);
    CGRect v87 = v65;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unsigned int v31 = _ViewInputs.geometryTransaction()();
    uint64_t v32 = swift_getKeyPath();
    int v33 = specialized CachedEnvironment.attribute<A>(keyPath:)(v32);
    int v10 = v51;
    swift_release();
    if ((*(unsigned char *)(v11 + 81) & 1) == 0
      && v17 == *(_DWORD *)(v11 + 32)
      && v21 == *(_DWORD *)(v11 + 36)
      && v33 == *(_DWORD *)(v11 + 40)
      && v51 == *(_DWORD *)(v11 + 44)
      && v31 == *(_DWORD *)(v11 + 48)
      && v53 == *(_DWORD *)(v11 + 52))
    {
      a7 = v48;
      unsigned int v16 = v64;
      unsigned int v12 = v53;
      uint64_t v14 = v50;
      if ((*(unsigned char *)(v11 + 80) & 1) == 0)
      {
        uint64_t OffsetAttribute2 = *(unsigned int *)(v11 + 76);
LABEL_29:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        goto LABEL_30;
      }
    }
    else
    {
      CGRect v79 = v20;
      CGRect v80 = v51;
      CGRect v81 = v11;
      *(void *)&CGRect v82 = __PAIR64__(v31, v53);
      *((void *)&v82 + 1) = __PAIR64__(v63, v67);
      CGRect v83 = v50;
      CGRect v84 = v15;
      *(void *)&CGRect v85 = __PAIR64__(v64, v69);
      *((void *)&v85 + 1) = __PAIR64__(v68, v17);
      CGRect v86 = __PAIR64__(v66, v21);
      CGRect v87 = v65;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      int v34 = v33;
      unsigned int v12 = v53;
      uint64_t v14 = v50;
      unsigned int v16 = v64;
      int v10 = v51;
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v79, v34, (uint64_t)&v72);
      uint64_t OffsetAttribute2 = HIDWORD(v74);
      int v35 = v75;
      unint64_t v36 = v73[16] | ((unint64_t)*(unsigned int *)&v73[20] << 32);
      unint64_t v37 = v74 | ((unint64_t)HIDWORD(v74) << 32);
      long long v38 = *(_OWORD *)v73;
      *(_OWORD *)(v11 + 32) = v72;
      *(_OWORD *)(v11 + 48) = v38;
      *(void *)(v11 + 64) = v36;
      *(void *)(v11 + 72) = v37;
      *(_WORD *)(v11 + 80) = v35;
      a7 = v48;
      if (v35 != 1) {
        goto LABEL_29;
      }
    }
    uint64_t OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v11 + 76) = OffsetAttribute2;
    *(unsigned char *)(v11 + 80) = 0;
    goto LABEL_29;
  }
  uint64_t v53 = AGGraphCreateOffsetAttribute2();
  uint64_t v54 = v17;
LABEL_31:
  CGRect v79 = v61;
  CGRect v80 = v10;
  CGRect v81 = v11;
  *(void *)&CGRect v82 = __PAIR64__(v62, v12);
  *((void *)&v82 + 1) = __PAIR64__(v63, v67);
  CGRect v83 = v14;
  CGRect v84 = v15;
  *(void *)&CGRect v85 = __PAIR64__(v16, v69);
  *((void *)&v85 + 1) = __PAIR64__(v68, v17);
  CGRect v86 = __PAIR64__(v66, v18);
  CGRect v87 = v65;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PreferencesInputs.remove<A>(_:)((uint64_t)a7, (uint64_t)a7);
  *(void *)&char v72 = v79;
  DWORD2(v72) = v80;
  *(void *)uint64_t v73 = v81;
  *(_OWORD *)&v73[8] = v82;
  double v74 = v83;
  double v75 = v84;
  double v76 = v85;
  double v77 = v86;
  unint64_t v78 = v87;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v39 = swift_bridgeObjectRetain();
  v57(&v70, v39, &v72);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v40 = swift_release();
  *(void *)&char v72 = v15;
  DWORD2(v72) = v69;
  MEMORY[0x270FA5388](v40);
  void v43[2] = v59;
  v43[3] = a7;
  v43[4] = v55;
  int v44 = v58;
  int v45 = v54;
  int v46 = v53;
  unsigned int v47 = v64;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)(&v72, (uint64_t)a7, partial apply for implicit closure #1 in static _AnchorWritingModifier.makeView(modifier:inputs:animated:body:), (uint64_t)v43, a7, v55);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  double v41 = v60;
  *(void *)uint64_t v60 = v70;
  double result = v71;
  v41[1] = v71;
  return result;
}

double static _PreferenceWritingModifier._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, ValueMetadata *a4@<X4>, uint64_t a5@<X5>, double *a6@<X8>)
{
  int v18 = *a1;
  int v8 = *((_DWORD *)a2 + 2);
  uint64_t v9 = a2[2];
  uint64_t v11 = a2[5];
  uint64_t v10 = a2[6];
  int v12 = *((_DWORD *)a2 + 20);
  uint64_t v35 = *a2;
  int v36 = v8;
  long long v38 = *(_OWORD *)(a2 + 3);
  uint64_t v37 = v9;
  uint64_t v39 = v11;
  uint64_t v40 = v10;
  long long v41 = *(_OWORD *)(a2 + 7);
  int v16 = v41;
  uint64_t v42 = a2[9];
  int v43 = v12;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PreferencesInputs.remove<A>(_:)((uint64_t)a4, (uint64_t)a4);
  uint64_t v24 = v35;
  int v25 = v36;
  uint64_t v26 = v9;
  long long v27 = v38;
  uint64_t v28 = v11;
  uint64_t v29 = v10;
  long long v30 = v41;
  uint64_t v31 = v42;
  int v32 = v43;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v13 = swift_bridgeObjectRetain();
  a3(&v33, v13, &v24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v24 = v10;
  int v25 = v16;
  unsigned int v21 = a4;
  uint64_t v22 = a5;
  int v23 = v18;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)(&v24, v14, partial apply for implicit closure #1 in static _PreferenceWritingModifier._makeView(modifier:inputs:body:), (uint64_t)v20, a4, a5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  *(void *)a6 = v33;
  double result = v34;
  a6[1] = v34;
  return result;
}

void PreferencesInputs.remove<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)v2 + 16);
  if (v3)
  {
    unint64_t v4 = 0;
    for (i = (void *)(*(void *)v2 + 32); *i != a2; i += 2)
    {
      if (v3 == ++v4) {
        return;
      }
    }
    specialized Array.remove(at:)(v4);
  }
}

double static AnchorGeometryTransformModifier._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t *__return_ptr, int *, uint64_t *)@<X2>, ValueMetadata *a4@<X4>, uint64_t a5@<X5>, double *a6@<X8>)
{
  uint64_t v66 = a5;
  char v63 = a4;
  int v65 = *a1;
  uint64_t v7 = *a2;
  int v8 = *((_DWORD *)a2 + 2);
  uint64_t v9 = a2[2];
  int v10 = *((_DWORD *)a2 + 6);
  int v11 = *((_DWORD *)a2 + 7);
  int v12 = *((_DWORD *)a2 + 8);
  int v13 = *((_DWORD *)a2 + 9);
  uint64_t v15 = a2[5];
  uint64_t v14 = a2[6];
  int v16 = *((_DWORD *)a2 + 14);
  int v17 = *((_DWORD *)a2 + 15);
  int v18 = *((_DWORD *)a2 + 16);
  int v19 = *((_DWORD *)a2 + 17);
  int v20 = *((_DWORD *)a2 + 18);
  int v21 = *((_DWORD *)a2 + 19);
  int v22 = *((_DWORD *)a2 + 20);
  uint64_t v85 = *a2;
  int v76 = v8;
  int v86 = v8;
  uint64_t v87 = v9;
  int v70 = v10;
  int v88 = v10;
  int v89 = v11;
  int v90 = v12;
  int v91 = v13;
  uint64_t v92 = v15;
  uint64_t v93 = v14;
  uint64_t v64 = v14;
  int v94 = v16;
  int v95 = v17;
  int v75 = v18;
  int v96 = v18;
  int v97 = v19;
  int v77 = v19;
  int v74 = v20;
  int v98 = v20;
  int v99 = v21;
  int v73 = v21;
  int v72 = v22;
  int v100 = v22;
  a3(&v101, a1, &v85);
  if ((v13 & 0x20) != 0)
  {
    uint64_t v60 = a6;
    swift_beginAccess();
    uint64_t v85 = v7;
    int v86 = v76;
    uint64_t v87 = v9;
    int v88 = v70;
    int v89 = v11;
    int v59 = v11;
    int v68 = v12;
    int v90 = v12;
    int v91 = v13;
    int v67 = v13;
    uint64_t v23 = v64;
    uint64_t v92 = v15;
    uint64_t v93 = v64;
    int v71 = v16;
    int v94 = v16;
    int v95 = v17;
    int v69 = v17;
    int v96 = v75;
    int v97 = v77;
    int v98 = v74;
    int v99 = v73;
    int v100 = v72;
    uint64_t v57 = v7;
    swift_retain();
    swift_retain();
    uint64_t v62 = v15;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    int v24 = _ViewInputs.geometryTransaction()();
    uint64_t KeyPath = swift_getKeyPath();
    int v26 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
    swift_release();
    char v27 = *(unsigned char *)(v9 + 81);
    int v28 = v76;
    uint64_t v61 = v9 + 16;
    if ((v27 & 1) == 0
      && v75 == *(_DWORD *)(v9 + 32)
      && v74 == *(_DWORD *)(v9 + 36)
      && v26 == *(_DWORD *)(v9 + 40)
      && v76 == *(_DWORD *)(v9 + 44)
      && v24 == *(_DWORD *)(v9 + 48)
      && v70 == *(_DWORD *)(v9 + 52))
    {
      int v29 = v70;
      int v30 = v69;
      uint64_t v31 = v57;
      uint64_t v32 = v62;
      int v33 = v59;
      if ((*(unsigned char *)(v9 + 64) & 1) == 0)
      {
        uint64_t v34 = *(unsigned int *)(v9 + 60);
LABEL_14:
        uint64_t OffsetAttribute2 = v34;
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v31 = v57;
      uint64_t v85 = v57;
      int v86 = v76;
      uint64_t v87 = v9;
      int v29 = v70;
      int v88 = v70;
      int v89 = v24;
      int v90 = v68;
      int v91 = v67;
      uint64_t v32 = v62;
      uint64_t v92 = v62;
      uint64_t v93 = v64;
      int v94 = v71;
      int v30 = v69;
      int v95 = v69;
      int v96 = v75;
      int v97 = v77;
      int v98 = v74;
      int v99 = v73;
      int v100 = v72;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v85, v26, (uint64_t)&v78);
      long long v35 = v79;
      uint64_t v36 = v80;
      unsigned __int8 v37 = v84;
      unint64_t v38 = v80 | ((unint64_t)v81 << 32);
      unint64_t v39 = v82 | ((unint64_t)v83 << 32);
      *(_OWORD *)(v9 + 32) = v78;
      *(_OWORD *)(v9 + 48) = v35;
      *(void *)(v9 + 64) = v38;
      *(void *)(v9 + 72) = v39;
      *(_WORD *)(v9 + 80) = v37;
      int v33 = v59;
      if (v36 != 1)
      {
        uint64_t v34 = HIDWORD(*((void *)&v35 + 1));
        goto LABEL_14;
      }
    }
    uint64_t OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v9 + 60) = OffsetAttribute2;
    *(unsigned char *)(v9 + 64) = 0;
LABEL_15:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    uint64_t v85 = v31;
    int v86 = v28;
    uint64_t v87 = v9;
    int v88 = v29;
    int v89 = v33;
    int v90 = v68;
    int v91 = v67;
    uint64_t v92 = v32;
    uint64_t v93 = v23;
    int v94 = v71;
    int v95 = v30;
    int v96 = v75;
    int v97 = v77;
    int v98 = v74;
    int v99 = v73;
    int v100 = v72;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    int v40 = _ViewInputs.geometryTransaction()();
    uint64_t v41 = swift_getKeyPath();
    int v42 = specialized CachedEnvironment.attribute<A>(keyPath:)(v41);
    swift_release();
    if ((*(unsigned char *)(v9 + 81) & 1) == 0
      && v75 == *(_DWORD *)(v9 + 32)
      && v74 == *(_DWORD *)(v9 + 36)
      && v42 == *(_DWORD *)(v9 + 40)
      && v76 == *(_DWORD *)(v9 + 44)
      && v40 == *(_DWORD *)(v9 + 48)
      && v29 == *(_DWORD *)(v9 + 52))
    {
      a6 = v60;
      int v43 = v63;
      int v44 = OffsetAttribute2;
      if ((*(unsigned char *)(v9 + 80) & 1) == 0)
      {
        int v45 = *(_DWORD *)(v9 + 76);
LABEL_26:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        uint64_t v50 = swift_endAccess();
        uint64_t v85 = v23;
        int v86 = v71;
        MEMORY[0x270FA5388](v50);
        v52[2] = v43;
        v52[3] = v66;
        int v53 = v65;
        int v54 = v44;
        int v55 = v45;
        int v56 = v69;
        swift_bridgeObjectRetain();
        PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)(&v85, (uint64_t)v43, partial apply for implicit closure #1 in static AnchorGeometryTransformModifier._makeView(modifier:inputs:body:), (uint64_t)v52, v43, v66);
        swift_bridgeObjectRelease();
        goto LABEL_27;
      }
    }
    else
    {
      uint64_t v85 = v31;
      int v86 = v76;
      uint64_t v87 = v9;
      int v88 = v29;
      int v89 = v40;
      int v90 = v68;
      int v91 = v67;
      uint64_t v92 = v32;
      uint64_t v93 = v23;
      int v94 = v71;
      int v95 = v69;
      int v96 = v75;
      int v97 = v77;
      int v98 = v74;
      int v99 = v73;
      int v100 = v72;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v85, v42, (uint64_t)&v78);
      int v45 = v83;
      int v46 = v84;
      unint64_t v47 = v80 | ((unint64_t)v81 << 32);
      unint64_t v48 = v82 | ((unint64_t)v83 << 32);
      long long v49 = v79;
      *(_OWORD *)(v9 + 32) = v78;
      *(_OWORD *)(v9 + 48) = v49;
      *(void *)(v9 + 64) = v47;
      *(void *)(v9 + 72) = v48;
      *(_WORD *)(v9 + 80) = v46;
      a6 = v60;
      int v43 = v63;
      int v44 = OffsetAttribute2;
      if (v46 != 1) {
        goto LABEL_26;
      }
    }
    int v45 = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v9 + 76) = v45;
    *(unsigned char *)(v9 + 80) = 0;
    goto LABEL_26;
  }
LABEL_27:
  *(void *)a6 = v101;
  double result = v102;
  a6[1] = v102;
  return result;
}

double static _AnchorTransformModifier._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, int *, uint64_t *)@<X2>, uint64_t a4@<X4>, ValueMetadata *a5@<X5>, uint64_t a6@<X6>, double *a7@<X8>)
{
  uint64_t v7 = *(void *)a2;
  int v8 = *(_DWORD *)(a2 + 8);
  uint64_t v9 = *(void *)(a2 + 16);
  int v10 = *(_DWORD *)(a2 + 80);
  int v21 = *a1;
  uint64_t v13 = v7;
  int v14 = v8;
  uint64_t v15 = v9;
  long long v11 = *(_OWORD *)(a2 + 40);
  long long v16 = *(_OWORD *)(a2 + 24);
  long long v17 = v11;
  long long v18 = *(_OWORD *)(a2 + 56);
  uint64_t v19 = *(void *)(a2 + 72);
  int v20 = v10;
  return static _AnchorTransformModifier.makeView(modifier:inputs:animated:body:)(&v21, &v13, 1, a3, a4, a5, a6, a7);
}

double static _AnchorTransformModifier.makeView(modifier:inputs:animated:body:)@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, void (*a4)(uint64_t *__return_ptr, int *, uint64_t *)@<X3>, uint64_t a5@<X5>, ValueMetadata *a6@<X6>, uint64_t a7@<X7>, double *a8@<X8>)
{
  uint64_t v62 = a7;
  uint64_t v61 = a6;
  uint64_t v60 = a5;
  int v68 = a8;
  int v63 = *a1;
  uint64_t v9 = *a2;
  int v10 = *((_DWORD *)a2 + 2);
  uint64_t v11 = a2[2];
  int v12 = *((_DWORD *)a2 + 6);
  int v13 = *((_DWORD *)a2 + 7);
  int v14 = *((_DWORD *)a2 + 8);
  int v15 = *((_DWORD *)a2 + 9);
  uint64_t v17 = a2[5];
  uint64_t v16 = a2[6];
  int v19 = *((_DWORD *)a2 + 14);
  int v18 = *((_DWORD *)a2 + 15);
  int v21 = *((_DWORD *)a2 + 16);
  int v20 = *((_DWORD *)a2 + 17);
  int v23 = *((_DWORD *)a2 + 18);
  int v22 = *((_DWORD *)a2 + 19);
  int v24 = *((_DWORD *)a2 + 20);
  uint64_t v80 = *a2;
  int v70 = v10;
  int v81 = v10;
  uint64_t v82 = v11;
  int v69 = v12;
  int v83 = v12;
  int v84 = v13;
  int v67 = v14;
  int v85 = v14;
  int v86 = v15;
  uint64_t v87 = v17;
  uint64_t v88 = v16;
  int v71 = v19;
  int v89 = v19;
  int v90 = v18;
  int v72 = v18;
  int v91 = v21;
  int v92 = v20;
  int v66 = v20;
  int v93 = v23;
  int v94 = v22;
  int v65 = v22;
  int v64 = v24;
  int v95 = v24;
  a4(&v96, a1, &v80);
  if ((v15 & 0x20) != 0)
  {
    if ((a3 & 1) == 0)
    {
      uint64_t OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
      int v32 = OffsetAttribute2;
      uint64_t v33 = v62;
      uint64_t v34 = v61;
      uint64_t v35 = v60;
LABEL_29:
      uint64_t v80 = v16;
      int v81 = v71;
      MEMORY[0x270FA5388](OffsetAttribute2);
      v51[2] = v35;
      v51[3] = v34;
      v51[4] = v33;
      int v52 = v63;
      int v53 = v48;
      int v54 = v32;
      int v55 = v72;
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)(&v80, (uint64_t)v34, partial apply for implicit closure #1 in static _AnchorTransformModifier.makeView(modifier:inputs:animated:body:), (uint64_t)v51, v34, v33);
      swift_bridgeObjectRelease();
      goto LABEL_30;
    }
    swift_beginAccess();
    uint64_t v80 = v9;
    int v81 = v70;
    uint64_t v82 = v11;
    int v83 = v69;
    int v84 = v13;
    int v56 = v13;
    int v85 = v67;
    int v86 = v15;
    uint64_t v87 = v17;
    uint64_t v88 = v16;
    int v89 = v71;
    int v90 = v72;
    int v59 = v21;
    int v91 = v21;
    int v92 = v66;
    int v93 = v23;
    int v94 = v65;
    int v95 = v64;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    int v25 = _ViewInputs.geometryTransaction()();
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v58 = v11 + 16;
    int v27 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
    swift_release();
    if ((*(unsigned char *)(v11 + 81) & 1) == 0
      && v59 == *(_DWORD *)(v11 + 32)
      && v23 == *(_DWORD *)(v11 + 36)
      && v27 == *(_DWORD *)(v11 + 40)
      && v70 == *(_DWORD *)(v11 + 44)
      && v25 == *(_DWORD *)(v11 + 48)
      && v69 == *(_DWORD *)(v11 + 52))
    {
      int v28 = v56;
      int v29 = v59;
      if ((*(unsigned char *)(v11 + 64) & 1) == 0)
      {
        uint64_t v30 = *(unsigned int *)(v11 + 60);
LABEL_16:
        uint64_t v57 = v30;
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v80 = v9;
      int v81 = v70;
      uint64_t v82 = v11;
      int v83 = v69;
      int v84 = v25;
      int v85 = v67;
      int v86 = v15;
      uint64_t v87 = v17;
      uint64_t v88 = v16;
      int v89 = v71;
      int v90 = v72;
      int v29 = v59;
      int v91 = v59;
      int v92 = v66;
      int v93 = v23;
      int v94 = v65;
      int v95 = v64;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v80, v27, (uint64_t)&v73);
      long long v36 = v74;
      uint64_t v37 = v75;
      unsigned __int8 v38 = v79;
      unint64_t v39 = v75 | ((unint64_t)v76 << 32);
      unint64_t v40 = v77 | ((unint64_t)v78 << 32);
      *(_OWORD *)(v11 + 32) = v73;
      *(_OWORD *)(v11 + 48) = v36;
      *(void *)(v11 + 64) = v39;
      *(void *)(v11 + 72) = v40;
      *(_WORD *)(v11 + 80) = v38;
      int v28 = v56;
      if (v37 != 1)
      {
        uint64_t v30 = HIDWORD(*((void *)&v36 + 1));
        goto LABEL_16;
      }
    }
    uint64_t v57 = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v11 + 60) = v57;
    *(unsigned char *)(v11 + 64) = 0;
LABEL_17:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    uint64_t v80 = v9;
    int v81 = v70;
    uint64_t v82 = v11;
    int v83 = v69;
    int v84 = v28;
    int v85 = v67;
    int v86 = v15;
    uint64_t v87 = v17;
    uint64_t v88 = v16;
    int v89 = v71;
    int v90 = v72;
    int v91 = v29;
    int v92 = v66;
    int v93 = v23;
    int v94 = v65;
    int v95 = v64;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    int v41 = _ViewInputs.geometryTransaction()();
    uint64_t v42 = swift_getKeyPath();
    int v43 = specialized CachedEnvironment.attribute<A>(keyPath:)(v42);
    swift_release();
    if ((*(unsigned char *)(v11 + 81) & 1) == 0
      && v29 == *(_DWORD *)(v11 + 32)
      && v23 == *(_DWORD *)(v11 + 36)
      && v43 == *(_DWORD *)(v11 + 40)
      && v70 == *(_DWORD *)(v11 + 44)
      && v41 == *(_DWORD *)(v11 + 48)
      && v69 == *(_DWORD *)(v11 + 52))
    {
      uint64_t v33 = v62;
      uint64_t v34 = v61;
      uint64_t v35 = v60;
      if ((*(unsigned char *)(v11 + 80) & 1) == 0)
      {
        int v32 = *(_DWORD *)(v11 + 76);
LABEL_28:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        uint64_t OffsetAttribute2 = swift_endAccess();
        goto LABEL_29;
      }
    }
    else
    {
      uint64_t v80 = v9;
      int v81 = v70;
      uint64_t v82 = v11;
      int v83 = v69;
      int v84 = v41;
      int v85 = v67;
      int v86 = v15;
      uint64_t v87 = v17;
      uint64_t v88 = v16;
      int v89 = v71;
      int v90 = v72;
      int v91 = v29;
      int v92 = v66;
      int v93 = v23;
      int v94 = v65;
      int v95 = v64;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      CachedEnvironment.AnimatedFrame.init(inputs:pixelLength:environment:)(&v80, v43, (uint64_t)&v73);
      int v32 = v78;
      int v44 = v79;
      unint64_t v45 = v75 | ((unint64_t)v76 << 32);
      unint64_t v46 = v77 | ((unint64_t)v78 << 32);
      long long v47 = v74;
      *(_OWORD *)(v11 + 32) = v73;
      *(_OWORD *)(v11 + 48) = v47;
      *(void *)(v11 + 64) = v45;
      *(void *)(v11 + 72) = v46;
      *(_WORD *)(v11 + 80) = v44;
      uint64_t v33 = v62;
      uint64_t v34 = v61;
      uint64_t v35 = v60;
      if (v44 != 1) {
        goto LABEL_28;
      }
    }
    int v32 = AGGraphCreateOffsetAttribute2();
    *(_DWORD *)(v11 + 76) = v32;
    *(unsigned char *)(v11 + 80) = 0;
    goto LABEL_28;
  }
LABEL_30:
  long long v49 = v68;
  *(void *)int v68 = v96;
  double result = v97;
  v49[1] = v97;
  return result;
}

double static _PreferenceTransformModifier._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t *__return_ptr)@<X2>, ValueMetadata *a4@<X4>, uint64_t a5@<X5>, double *a6@<X8>)
{
  int v9 = *a1;
  int v10 = *((_DWORD *)a2 + 2);
  uint64_t v11 = a2[2];
  uint64_t v12 = a2[5];
  uint64_t v13 = a2[6];
  int v14 = *((_DWORD *)a2 + 20);
  uint64_t v22 = *a2;
  int v23 = v10;
  uint64_t v24 = v11;
  long long v25 = *(_OWORD *)(a2 + 3);
  uint64_t v26 = v12;
  uint64_t v27 = v13;
  long long v28 = *(_OWORD *)(a2 + 7);
  int v17 = v28;
  uint64_t v29 = a2[9];
  int v30 = v14;
  a3(&v31);
  uint64_t v22 = v13;
  int v23 = v17;
  int v19 = a4;
  uint64_t v20 = a5;
  int v21 = v9;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)(&v22, v15, partial apply for implicit closure #1 in static _PreferenceTransformModifier._makeView(modifier:inputs:body:), (uint64_t)v18, a4, a5);
  swift_bridgeObjectRelease();
  *(void *)a6 = v31;
  double result = v32;
  a6[1] = v32;
  return result;
}

uint64_t PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)(_DWORD *a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4, ValueMetadata *a5, uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t v9 = *(void *)a1;
  unsigned int v10 = a1[2];
  uint64_t v11 = *(void *)(*(void *)a1 + 16);
  uint64_t v27 = a3;
  if (v11)
  {
    uint64_t v12 = (ValueMetadata **)(v9 + 32);
    uint64_t v13 = v11;
    while (*v12 != a5)
    {
      v12 += 2;
      if (!--v13) {
        goto LABEL_5;
      }
    }
    unsigned int v15 = a3();
    LOBYTE(v29) = 0;
    uint64_t v14 = v6;
    PreferencesOutputs.subscript.setter(v15, a5, (uint64_t)a5, a6);
    char v16 = 0;
  }
  else
  {
LABEL_5:
    uint64_t v14 = v6;
    unsigned int v15 = 0;
    char v16 = 1;
  }
  uint64_t result = (*(uint64_t (**)(ValueMetadata *, uint64_t))(a6 + 40))(a5, a6);
  if (v11 && (result & 1) != 0)
  {
    for (i = (ValueMetadata **)(v9 + 32); *i != &type metadata for HostPreferencesKey; i += 2)
    {
      if (!--v11) {
        return result;
      }
    }
    if (v16) {
      unsigned int v15 = v27();
    }
    int v19 = *(_DWORD *)(v14 + 8);
    unint64_t v29 = *(void *)v14;
    int v30 = v19;
    unint64_t v20 = PreferencesOutputs.subscript.getter((uint64_t)&type metadata for HostPreferencesKey);
    int v21 = *MEMORY[0x263F288F8];
    if ((v20 & 0x100000000) == 0) {
      int v21 = v20;
    }
    ++static HostPreferencesKey.nodeId;
    unint64_t v29 = __PAIR64__(v10, v15);
    int v30 = v21;
    __int16 v31 = 0;
    int v32 = 0;
    int v33 = static HostPreferencesKey.nodeId;
    MEMORY[0x270FA5388](v20);
    uint64_t v25 = type metadata accessor for HostPreferencesWriter();
    uint64_t WitnessTable = swift_getWitnessTable();
    type metadata accessor for Attribute<PreferenceValues>();
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v29, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_6, (uint64_t)&v24, v25, MEMORY[0x263F8E628], v22, MEMORY[0x263F8E658], v23);
    LOBYTE(v29) = 0;
    return PreferencesOutputs.subscript.setter(v28, &type metadata for HostPreferencesKey, (uint64_t)&protocol witness table for HostPreferencesKey);
  }
  return result;
}

uint64_t PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)(_DWORD *a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4, ValueMetadata *a5, uint64_t a6)
{
  uint64_t v7 = v6;
  unsigned int v10 = a3;
  uint64_t v50 = *MEMORY[0x263EF8340];
  uint64_t v11 = *(void *)a1;
  unsigned int v12 = a1[2];
  uint64_t v13 = *(void *)(*(void *)a1 + 16);
  uint64_t v42 = a4;
  if (v13)
  {
    uint64_t v14 = (ValueMetadata **)(v11 + 32);
    uint64_t v15 = v13;
    while (*v14 != a5)
    {
      v14 += 2;
      if (!--v15) {
        goto LABEL_5;
      }
    }
    unsigned int v17 = a3();
    int v18 = *(_DWORD *)(v6 + 8);
    unint64_t v45 = *(void *)v6;
    int v46 = v18;
    unint64_t v19 = PreferencesOutputs.subscript.getter((uint64_t)a5, (uint64_t)a5, a6);
    uint64_t v40 = (uint64_t)&v40;
    unsigned int v20 = *MEMORY[0x263F288F8];
    if ((v19 & 0x100000000) == 0) {
      unsigned int v20 = v19;
    }
    unsigned int v43 = v17;
    unint64_t v45 = __PAIR64__(v20, v17);
    MEMORY[0x270FA5388](v19);
    v37[0] = swift_getAssociatedTypeWitness();
    uint64_t v21 = type metadata accessor for PreferenceTransform();
    uint64_t v41 = v6;
    uint64_t v22 = v10;
    unsigned int v23 = v12;
    uint64_t v24 = v21;
    v37[1] = v21;
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v25 = type metadata accessor for Attribute();
    uint64_t v26 = v24;
    unsigned int v12 = v23;
    unsigned int v10 = v22;
    uint64_t v7 = v41;
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v45, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)&v36, v26, MEMORY[0x263F8E628], v25, MEMORY[0x263F8E658], v27);
    LOBYTE(v45) = 0;
    PreferencesOutputs.subscript.setter(v44, a5, (uint64_t)a5, a6);
    char v16 = 0;
  }
  else
  {
LABEL_5:
    unsigned int v43 = 0;
    char v16 = 1;
  }
  uint64_t result = (*(uint64_t (**)(ValueMetadata *, uint64_t))(a6 + 40))(a5, a6);
  if (v13 && (result & 1) != 0)
  {
    for (i = (ValueMetadata **)(v11 + 32); *i != &type metadata for HostPreferencesKey; i += 2)
    {
      if (!--v13) {
        return result;
      }
    }
    if (v16) {
      unsigned int v43 = ((uint64_t (*)(uint64_t))v10)(result);
    }
    int v30 = *(_DWORD *)(v7 + 8);
    unint64_t v45 = *(void *)v7;
    int v46 = v30;
    unint64_t v31 = PreferencesOutputs.subscript.getter((uint64_t)&type metadata for HostPreferencesKey);
    int v32 = *MEMORY[0x263F288F8];
    if ((v31 & 0x100000000) == 0) {
      int v32 = v31;
    }
    ++static HostPreferencesKey.nodeId;
    unint64_t v45 = __PAIR64__(v12, v43);
    int v46 = v32;
    __int16 v47 = 0;
    int v48 = 0;
    int v49 = static HostPreferencesKey.nodeId;
    MEMORY[0x270FA5388](v31);
    uint64_t v33 = type metadata accessor for HostPreferencesTransform();
    uint64_t WitnessTable = v33;
    uint64_t v39 = swift_getWitnessTable();
    type metadata accessor for Attribute<PreferenceValues>();
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v45, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_6, (uint64_t)v37, v33, MEMORY[0x263F8E628], v34, MEMORY[0x263F8E658], v35);
    LOBYTE(v45) = 0;
    return PreferencesOutputs.subscript.setter(v44, &type metadata for HostPreferencesKey, (uint64_t)&protocol witness table for HostPreferencesKey);
  }
  return result;
}

void type metadata accessor for Attribute<PreferenceValues>()
{
  if (!lazy cache variable for type metadata for Attribute<PreferenceValues>)
  {
    unint64_t v0 = type metadata accessor for Attribute();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<PreferenceValues>);
    }
  }
}

uint64_t type metadata accessor for HostPreferencesTransform()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for HostPreferencesWriter()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static PreferenceKey._isReadableByHost.getter()
{
  return 0;
}

uint64_t partial apply for implicit closure #1 in static _PreferenceTransformModifier._makeView(modifier:inputs:body:)()
{
  return implicit closure #1 in static _PreferenceTransformModifier._makeView(modifier:inputs:body:)(*(_DWORD *)(v0 + 32), *(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t implicit closure #1 in static _PreferenceTransformModifier._makeView(modifier:inputs:body:)(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v12 = a2;
  uint64_t v13 = a3;
  int v6 = a1;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  FunctionTypeMetadatCGFloat a = swift_getFunctionTypeMetadata();
  type metadata accessor for _PreferenceTransformModifier();
  uint64_t v10 = type metadata accessor for Focus();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v3 = type metadata accessor for Attribute();
  swift_retain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v6, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v8, v10, MEMORY[0x263F8E628], v3, MEMORY[0x263F8E658], v4);
  swift_release();
  swift_release();
  return AssociatedTypeWitness;
}

uint64_t View.transformPreference<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v7[0] = a2;
  v7[1] = a3;
  uint64_t v5 = type metadata accessor for _PreferenceTransformModifier();
  return View.modifier<A>(_:)(v7, a4, v5);
}

uint64_t type metadata accessor for _PreferenceTransformModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for PreferenceTransform()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for implicit closure #1 in static _AnchorTransformModifier.makeView(modifier:inputs:animated:body:)()
{
  return implicit closure #1 in static _AnchorTransformModifier.makeView(modifier:inputs:animated:body:)(*(void *)(v0 + 40), *(void *)(v0 + 48));
}

uint64_t implicit closure #1 in static _AnchorTransformModifier.makeView(modifier:inputs:animated:body:)(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  v5[0] = a1;
  v5[1] = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  FunctionTypeMetadatCGFloat a = swift_getFunctionTypeMetadata();
  uint64_t v8 = type metadata accessor for AnchorTransform();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v2 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v5, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v6, v8, MEMORY[0x263F8E628], v2, MEMORY[0x263F8E658], v3);
  return AssociatedTypeWitness;
}

uint64_t type metadata accessor for AnchorTransform()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for implicit closure #1 in static AnchorGeometryTransformModifier._makeView(modifier:inputs:body:)()
{
  return implicit closure #1 in static AnchorGeometryTransformModifier._makeView(modifier:inputs:body:)(*(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t implicit closure #1 in static AnchorGeometryTransformModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  v5[0] = a1;
  v5[1] = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  FunctionTypeMetadatCGFloat a = swift_getFunctionTypeMetadata();
  uint64_t v8 = type metadata accessor for AnchorGeometryTransform();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v2 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v5, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v6, v8, MEMORY[0x263F8E628], v2, MEMORY[0x263F8E658], v3);
  return AssociatedTypeWitness;
}

uint64_t type metadata accessor for AnchorGeometryTransform()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for implicit closure #1 in static _PreferenceWritingModifier._makeView(modifier:inputs:body:)()
{
  return implicit closure #1 in static _PreferenceWritingModifier._makeView(modifier:inputs:body:)();
}

uint64_t implicit closure #1 in static _PreferenceWritingModifier._makeView(modifier:inputs:body:)()
{
  if (*(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64)) {
    closure #1 in implicit closure #1 in static _PreferenceWritingModifier._makeView(modifier:inputs:body:)(1);
  }

  return AGGraphCreateOffsetAttribute2();
}

uint64_t closure #1 in implicit closure #1 in static _PreferenceWritingModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  void v5[2] = type metadata accessor for _PreferenceWritingModifier();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:), (uint64_t)v5, AssociatedTypeWitness, MEMORY[0x263F8E628], v2, MEMORY[0x263F8E658], v3);
  return v7;
}

uint64_t type metadata accessor for _PreferenceWritingModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for implicit closure #1 in static _AnchorWritingModifier.makeView(modifier:inputs:animated:body:)()
{
  return implicit closure #1 in static _AnchorWritingModifier.makeView(modifier:inputs:animated:body:)(*(void *)(v0 + 40), *(void *)(v0 + 48));
}

uint64_t implicit closure #1 in static _AnchorWritingModifier.makeView(modifier:inputs:animated:body:)(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  v6[0] = a1;
  v6[1] = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = type metadata accessor for AnchorWriter();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v2 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v6, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v7, v9, MEMORY[0x263F8E628], v2, MEMORY[0x263F8E658], v3);
  return v5;
}

uint64_t type metadata accessor for AnchorWriter()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static HostPreferenceKey._isReadableByHost.getter()
{
  return 1;
}

uint64_t type metadata accessor for MatchedGeometryEffect2()
{
  return swift_getGenericMetadata();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance UnaryLayoutComputer<A>()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance UnaryChildGeometry<A>()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

uint64_t base witness table accessor for _AttributeBody in GeometryReader<A>.Child()
{
  return swift_getWitnessTable();
}

uint64_t _GraphInputs.phase.getter()
{
  return *(unsigned int *)(v0 + 24);
}

uint64_t outlined init with copy of PreferenceValues.Entry?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for PreferenceValues.Entry?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of PreferenceValues.Entry?(uint64_t a1)
{
  type metadata accessor for PreferenceValues.Entry?();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for PreferenceValues.Entry?()
{
  if (!lazy cache variable for type metadata for PreferenceValues.Entry?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PreferenceValues.Entry?);
    }
  }
}

ValueMetadata *type metadata accessor for ComplicationInterfaceIdiom()
{
  return &type metadata for ComplicationInterfaceIdiom;
}

ValueMetadata *type metadata accessor for RadialGradient()
{
  return &type metadata for RadialGradient;
}

float64x2_t ScrollGeometry.contentOffset.setter(float64x2_t a1, float64_t a2)
{
  float64x2_t v3 = *v2;
  v2->f64[0] = a1.f64[0];
  v2->f64[1] = a2;
  a1.f64[1] = a2;
  float64x2_t result = vaddq_f64(vsubq_f64(a1, v3), v2[5]);
  v2[5] = result;
  return result;
}

float64x2_t ScrollGeometry.containerSize.setter(float64x2_t a1, float64_t a2)
{
  float64x2_t v3 = v2[4];
  v2[4].f64[0] = a1.f64[0];
  v2[4].f64[1] = a2;
  a1.f64[1] = a2;
  float64x2_t result = vaddq_f64(vsubq_f64(a1, v3), v2[6]);
  v2[6] = result;
  return result;
}

uint64_t type metadata accessor for LinkDestination(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, (uint64_t *)&type metadata singleton initialization cache for LinkDestination);
}

uint64_t AnchorValueBox.__deallocating_deinit()
{
  AnchorValueBox.deinit();

  return swift_deallocClassInstance();
}

uint64_t AnchorValueBox.deinit()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 144);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(v1, AssociatedTypeWitness);
  return v0;
}

uint64_t StateObject.Box.update(property:phase:)(uint64_t result, int *a2, uint64_t a3)
{
  uint64_t v5 = result;
  uint64_t v26 = *MEMORY[0x263EF8340];
  int v6 = *a2;
  char v25 = 0;
  uint64_t v7 = *(void *)(v3 + 24);
  if (v7) {
    goto LABEL_8;
  }
  uint64_t v8 = *(void *)result;
  uint64_t v7 = *(void *)(result + 8);
  if (*(unsigned char *)(result + 16))
  {
    *(void *)(v3 + 16) = v8;
    *(void *)(v3 + 24) = v7;
    float64x2_t result = swift_unknownObjectRetain();
  }
  else
  {
    uint64_t v9 = one-time initialization token for v7;
    swift_retain();
    if (v9 != -1) {
      swift_once();
    }
    MEMORY[0x270FA5388](static Semantics.v7);
    long long v18 = *(_OWORD *)(a3 + 16);
    uint64_t v19 = v3;
    uint64_t v20 = v8;
    uint64_t v21 = (char *)v7;
    specialized static MainActor.assumeIsolatedIfLinkedOnOrAfter<A>(_:context:_:file:line:)(v10, 0xD00000000000004DLL, 0x8000000246224130, (uint64_t)partial apply for closure #1 in StateObject.Box.update(property:phase:), (uint64_t)v17);
    float64x2_t result = outlined consume of StateObject<A>.Storage<A>(v8, v7, 0);
    uint64_t v7 = *(void *)(v3 + 24);
  }
  char v25 = 1;
  if (v7)
  {
LABEL_8:
    uint64_t v23 = *(void *)(v3 + 16);
    uint64_t v24 = v7;
    MEMORY[0x270FA5388](result);
    uint64_t v11 = *(void *)(a3 + 24);
    *(void *)&long long v18 = *(void *)(a3 + 16);
    *((void *)&v18 + 1) = v11;
    uint64_t v19 = v3;
    LODWORD(v20) = v6;
    uint64_t v21 = &v25;
    uint64_t v12 = type metadata accessor for ObservedObject();
    swift_unknownObjectRetain();
    _ss24withUnsafeMutablePointer2to_q0_xz_q0_SpyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v23, (uint64_t)partial apply for closure #2 in StateObject.Box.update(property:phase:), (uint64_t)v17, v12, MEMORY[0x263F8E628], MEMORY[0x263F8D4F8], MEMORY[0x263F8E658], v13);
    uint64_t v14 = v22;
    uint64_t v15 = v23;
    uint64_t v16 = v24;
    outlined consume of StateObject<A>.Storage<A>(*(void *)v5, *(void *)(v5 + 8), *(unsigned char *)(v5 + 16));
    *(void *)uint64_t v5 = v15;
    *(void *)(v5 + 8) = v16;
    *(unsigned char *)(v5 + 16) = 1;
    return v14;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t outlined consume of StateObject<A>.Storage<A>(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_unknownObjectRelease();
  }
  else {
    return swift_release();
  }
}

uint64_t type metadata accessor for ObservedObject()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t specialized static MainActor.assumeIsolatedIfLinkedOnOrAfter<A>(_:context:_:file:line:)(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  type metadata accessor for MainActor();
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC == 1)
  {
    if ((dyld_program_sdk_at_least() & 1) == 0) {
      goto LABEL_5;
    }
    return specialized static MainActor.assumeIsolated<A>(_:file:line:)(a4, a5);
  }
  if (static Semantics.forced >= a1) {
    return specialized static MainActor.assumeIsolated<A>(_:file:line:)(a4, a5);
  }
LABEL_5:
  if (a3)
  {
    v22[0] = a2;
    v22[1] = a3;
    swift_bridgeObjectRetain();
    v8._countAndFlagsBits = 32;
    v8._object = (void *)0xE100000000000000;
    String.append(_:)(v8);
    uint64_t v10 = a2;
    unint64_t v9 = a3;
    if (pthread_main_np()) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v10 = 0;
    unint64_t v9 = 0xE000000000000000;
    if (pthread_main_np()) {
      goto LABEL_15;
    }
  }
  os_log_type_t v12 = static os_log_type_t.fault.getter();
  if (one-time initialization token for runtimeIssuesLog != -1) {
    swift_once();
  }
  uint64_t v13 = static Log.runtimeIssuesLog;
  os_log_type_t v14 = v12;
  if (os_log_type_enabled((os_log_t)static Log.runtimeIssuesLog, v12))
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    v22[0] = v16;
    *(_DWORD *)uint64_t v15 = 136315138;
    swift_bridgeObjectRetain();
    void v22[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v9, v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_245728000, v13, v14, "%s This warning will become a runtime crash in a future version of SwiftUI.", v15, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C527CC0](v16, -1, -1);
    MEMORY[0x24C527CC0](v15, -1, -1);
    goto LABEL_16;
  }
LABEL_15:
  swift_bridgeObjectRelease();
LABEL_16:
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a4;
  *(void *)(v17 + 24) = a5;
  partial apply for specialized thunk for @callee_guaranteed () -> (@out A, @error @owned Error)();
  if (v21) {
    return swift_release();
  }
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

uint64_t partial apply for specialized thunk for @callee_guaranteed () -> (@out A, @error @owned Error)()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t partial apply for closure #1 in StateObject.Box.update(property:phase:)()
{
  uint64_t v1 = *(void *)(v0 + 32);
  (*(void (**)(void))(v0 + 40))();
  *(void *)(v1 + 16) = ObservedObject.init(wrappedValue:)();
  *(void *)(v1 + 24) = v2;
  return swift_unknownObjectRelease();
}

uint64_t ObservedObject.init(wrappedValue:)()
{
  return 0;
}

Swift::Void __swiftcall GraphHost.runTransaction()()
{
  specialized GraphHost.runTransaction(_:do:)(1uLL, v0);
}

uint64_t type metadata accessor for FailedCallbacks()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t instantiation function for generic protocol witness table for HostPreferencesWriter<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t Layout.updateCache(_:subviews:)(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
  uint64_t v9 = *((void *)a2 + 1);
  char v10 = *((unsigned char *)a2 + 16);
  char v11 = *((unsigned char *)a2 + 17);
  int v13 = *a2;
  uint64_t v14 = v9;
  char v15 = v10;
  char v16 = v11;
  return (*(uint64_t (**)(int *, uint64_t, uint64_t))(a4 + 32))(&v13, a3, a4);
}

double static Text.makeTextChildQuery<A>(_:styledText:view:renderer:inputs:isScrapeable:)@<D0>(unsigned int a1@<W1>, unsigned int a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X4>, int a5@<W5>, uint64_t a6@<X6>, uint64_t a7@<X7>, double *a8@<X8>)
{
  void (*v26)(uint64_t *__return_ptr, int *, uint64_t *, uint64_t, uint64_t);
  double *v27;
  double result;
  void v29[3];
  uint64_t v30;
  uint64_t WitnessTable;
  int v32;
  int v33;
  int v34;
  unint64_t v35;
  int v36;
  int v37;
  unsigned int v38;
  int v39;
  int v40;
  int v41;
  double *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  double v49;
  int v50[3];
  uint64_t v51;
  int v52;
  unint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  int v69;
  unint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  uint64_t v81;

  unsigned int v44 = a7;
  unint64_t v45 = a6;
  int v46 = a5;
  uint64_t v35 = __PAIR64__(a2, a1);
  uint64_t v42 = a8;
  int v81 = *MEMORY[0x263EF8340];
  uint64_t v9 = *(void *)a4;
  uint64_t v40 = *(_DWORD *)(a4 + 8);
  unint64_t v10 = *(void *)(a4 + 16);
  uint64_t v39 = *(_DWORD *)(a4 + 24);
  unsigned __int8 v38 = *(_DWORD *)(a4 + 28);
  uint64_t v41 = *(_DWORD *)(a4 + 32);
  uint64_t v37 = *(_DWORD *)(a4 + 36);
  uint64_t v11 = *(void *)(a4 + 40);
  uint64_t v12 = *(void *)(a4 + 48);
  unsigned int v13 = *(_DWORD *)(a4 + 60);
  uint64_t v36 = *(_DWORD *)(a4 + 56);
  unsigned int v14 = *(_DWORD *)(a4 + 64);
  uint64_t v34 = *(_DWORD *)(a4 + 68);
  unsigned int v43 = *(_DWORD *)(a4 + 72);
  uint64_t v33 = *(_DWORD *)(a4 + 76);
  int v32 = *(_DWORD *)(a4 + 80);
  swift_beginAccess();
  unsigned int v15 = *(_DWORD *)(v10 + 16);
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  uint64_t v16 = specialized find<A>(_:key:)(v9);
  if (v16) {
    unsigned int v17 = *(_DWORD *)(v16 + 72);
  }
  else {
    unsigned int v17 = 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  uint64_t v18 = swift_release_n();
  int v66 = v35;
  int v67 = a3;
  int v68 = __PAIR64__(v14, v15);
  uint64_t v35 = __PAIR64__(v13, v14);
  int v69 = v43;
  int v70 = __PAIR64__(v17, v13);
  MEMORY[0x270FA5388](v18);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v29[2] = AssociatedTypeWitness;
  int v30 = type metadata accessor for TextChildQuery();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v20 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v66, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v29, v30, MEMORY[0x263F8E628], v20, MEMORY[0x263F8E658], v21);
  uint64_t v22 = v51;
  if (v46) {
    AGGraphSetFlags();
  }
  _GraphValue.init(_:)(v22, v50);
  int v46 = v50[0];
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  char v24 = ShouldRecordTree;
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  int v66 = v9;
  int v68 = v10;
  LODWORD(v67) = v40;
  int v69 = v39;
  int v72 = v11;
  long long v73 = v12;
  int v71 = v37;
  long long v74 = v36;
  unsigned __int8 v75 = HIDWORD(v35);
  unsigned int v76 = v35;
  unsigned __int8 v77 = v34;
  unsigned int v78 = v43;
  unsigned __int8 v79 = v33;
  uint64_t v80 = v32;
  int v70 = v38;
  __int16 v47 = v46;
  int v51 = v9;
  int v52 = v40;
  int v53 = v10;
  int v54 = v39;
  int v55 = v38;
  int v56 = v37;
  uint64_t v57 = v11;
  uint64_t v58 = v12;
  int v59 = v36;
  uint64_t v60 = HIDWORD(v35);
  uint64_t v61 = v35;
  uint64_t v62 = v34;
  int v63 = v43;
  int v64 = v33;
  int v65 = v32;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v26 = *(void (**)(uint64_t *__return_ptr, int *, uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness
                                                                                         + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v26(&v48, &v47, &v51, AssociatedTypeWitness, AssociatedConformanceWitness);
  HIDWORD(v70) = v41;
  if (v24)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)((uint64_t)&v48, (uint64_t)&v66);
    AGSubgraphEndTreeElement();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v27 = v42;
  *(void *)uint64_t v42 = v48;
  uint64_t result = v49;
  v27[1] = v49;
  return result;
}

uint64_t type metadata accessor for TextChildQuery()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t specialized static SafeAreaInsets.== infix(_:_:)(void *a1, void *a2)
{
  if (*a1 == *a2 && (uint64_t v2 = a2[2], v3 = a1[2], (specialized static Array<A>.== infix(_:_:)(a1[1], a2[1]) & 1) != 0))
  {
    uint64_t v6 = v2;
    uint64_t v7 = v3;
    char v4 = static SafeAreaInsets.OptionalValue.== infix(_:_:)(&v7, &v6);
  }
  else
  {
    char v4 = 0;
  }
  return v4 & 1;
}

BOOL specialized static _SafeAreaInsetsModifier.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a2[1];
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2) & 1) == 0) {
    return 0;
  }
  if (v2 == 1)
  {
    if (v3 == 1) {
      return 1;
    }
    goto LABEL_7;
  }
  uint64_t v7 = v2;
  if (v3 == 1)
  {
    swift_retain();
LABEL_7:
    outlined copy of SafeAreaInsets.OptionalValue?(v3);
    outlined consume of Transaction?(v2);
    outlined consume of Transaction?(v3);
    return 0;
  }
  uint64_t v6 = v3;
  swift_retain_n();
  char v4 = static SafeAreaInsets.OptionalValue.== infix(_:_:)(&v7, &v6);
  swift_release();
  outlined consume of Transaction?(v2);
  return (v4 & 1) != 0;
}

uint64_t base witness table accessor for CustomCombineIdentifierConvertible in SubscriptionLifetime<A>.Connection<A1>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in AnimatableAttribute<A>()
{
  return swift_getWitnessTable();
}

uint64_t implicit closure #2 in static Text.makeCommonAttributes(view:inputs:)()
{
  swift_getKeyPath();
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for AnyTrackedValue?(0, (unint64_t *)&lazy cache variable for type metadata for TimelineSchedule?, (unint64_t *)&lazy cache variable for type metadata for TimelineSchedule);
  type metadata accessor for Focus<ResolvedStyledText, TimelineSchedule?>();
  lazy protocol witness table accessor for type ResolvedTextFilter and conformance ResolvedTextFilter(&lazy protocol witness table cache variable for type Focus<ResolvedStyledText, TimelineSchedule?> and conformance Focus<A, B>, (void (*)(uint64_t))type metadata accessor for Focus<ResolvedStyledText, TimelineSchedule?>);
  uint64_t v0 = Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  return v0;
}

uint64_t lazy protocol witness table accessor for type ResolvedTextFilter and conformance ResolvedTextFilter(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for Focus<ResolvedStyledText, TimelineSchedule?>()
{
  if (!lazy cache variable for type metadata for Focus<ResolvedStyledText, TimelineSchedule?>)
  {
    type metadata accessor for ResolvedStyledText();
    type metadata accessor for AnyTrackedValue?(255, (unint64_t *)&lazy cache variable for type metadata for TimelineSchedule?, (unint64_t *)&lazy cache variable for type metadata for TimelineSchedule);
    unint64_t v0 = type metadata accessor for Focus();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Focus<ResolvedStyledText, TimelineSchedule?>);
    }
  }
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance LeafDisplayList<A>(uint64_t a1)
{
  return static LeafDisplayList.flags.getter(*(void *)(a1 + 16), *(void *)(a1 + 24));
}

ValueMetadata *type metadata accessor for Edge()
{
  return &type metadata for Edge;
}

uint64_t static ReuseTrace.traceReuseIdentifier(_:)()
{
  return static ReuseTrace.traceReusePreventedFailure(_:)();
}

uint64_t _ViewInputs.environment.setter(int a1)
{
  uint64_t v3 = MEMORY[0x263F8EE78];
  unint64_t v4 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  type metadata accessor for MutableBox<CachedEnvironment>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(void, uint64_t))type metadata accessor for MutableBox);
  uint64_t v5 = swift_allocObject();
  *(_DWORD *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = v3;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_WORD *)(v5 + 80) = 256;
  *(void *)(v5 + 88) = v4;
  uint64_t result = swift_release();
  *(void *)(v1 + 16) = v5;
  int v7 = *(_DWORD *)(v1 + 32);
  if ((v7 & 0x20) == 0) {
    *(_DWORD *)(v1 + 32) = v7 | 0x20;
  }
  return result;
}

uint64_t type metadata accessor for AnchorBoxBase()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance PreferenceCombiner<A>()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

uint64_t ViewTraitCollection.transition.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = one-time initialization token for opacity;
  swift_bridgeObjectRetain();
  if (v2 != -1) {
    swift_once();
  }
  uint64_t v3 = swift_retain();
  uint64_t v4 = specialized ViewTraitCollection.value<A>(for:defaultValue:)(v3, v1);
  swift_bridgeObjectRelease();
  swift_release();
  return v4;
}

double GraphicsContext.transform.getter@<D0>(_OWORD *a1@<X8>)
{
  RBDrawingStateGetCTM();
  double result = *(double *)&v3;
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  return result;
}

ValueMetadata *type metadata accessor for ScrollTargetRole.Role()
{
  return &type metadata for ScrollTargetRole.Role;
}

double static UnitPoint.bottomLeading.getter()
{
  return 0.0;
}

uint64_t EnvironmentValues.backgroundProminence.setter(char *a1)
{
  char v2 = *a1;
  uint64_t v3 = *v1;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(v1, v2);
  swift_release();
  if (v1[1])
  {
    uint64_t v4 = *v1;
    swift_retain();
    swift_retain();
    specialized PropertyList.Tracker.invalidateValue<A>(for:from:to:)(v3, v4);
    swift_release();
    swift_release();
  }
  return swift_release();
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<BackgroundProminence.Key>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<BackgroundProminence.Key>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundProminence.Key>, (uint64_t)&type metadata for BackgroundProminence.Key, (uint64_t)&protocol witness table for BackgroundProminence.Key, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<BackgroundProminence.Key> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<BackgroundProminence.Key>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<BackgroundProminence.Key> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<BackgroundProminence.Key> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<BackgroundProminence.Key> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<BackgroundProminence.Key>, (uint64_t)&type metadata for BackgroundProminence.Key, (uint64_t)&protocol witness table for BackgroundProminence.Key, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<BackgroundProminence.Key> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for ShapeRole()
{
  return &type metadata for ShapeRole;
}

ValueMetadata *type metadata accessor for ScrollPosition()
{
  return &type metadata for ScrollPosition;
}

ValueMetadata *type metadata accessor for AnyInterfaceIdiom()
{
  return &type metadata for AnyInterfaceIdiom;
}

uint64_t key path getter for EnvironmentValues.headerProminence : EnvironmentValues@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, &v6);
    swift_release_n();
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, &v6);
  }
  uint64_t result = swift_release_n();
  *a2 = v6;
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance DynamicLayoutComputer<A>()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

void static AccessibilityVisibility.containerElement.getter(int *a1@<X8>)
{
  int v1 = unk_26FA6876C;
  if ((unk_26FA6876C & ~dword_26FA68768) == 0) {
    int v1 = 0;
  }
  *a1 = v1 | dword_26FA68768;
}

uint64_t specialized SpacerLayoutComputer.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, double))
{
  if (*(unsigned char *)(v4 + 4) == 2 && *(_DWORD *)(v4 + 8) != *MEMORY[0x263F288F8])
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, (unint64_t *)&lazy cache variable for type metadata for Axis?, (uint64_t)&type metadata for Axis, MEMORY[0x263F8D8F0]);
    AGGraphGetValue();
  }
  uint64_t Value = AGGraphGetValue();
  MEMORY[0x270FA5388](Value);
  double v9 = MEMORY[0x270FA5388](v8);
  return a4(a2, v9);
}

uint64_t outlined consume of _ShapeStyle_RenderedLayers.Layers(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, unsigned int a9)
{
  if (a9 >> 30 == 1) {
    return swift_bridgeObjectRelease();
  }
  if (!(a9 >> 30)) {
    return outlined consume of DisplayList.Item.Value(a6, a7);
  }
  return result;
}

uint64_t outlined init with take of PlatformImageRepresentableContext?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(0, a3, a4, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

void type metadata accessor for _EnvironmentKeyWritingModifier<RedactionReasons>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA16RedactionReasonsVGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t outlined release of Image.Resolved?(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))
{
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(unsigned __int16 *)(a1 + 176) | (*(unsigned __int8 *)(a1 + 178) << 16));
  return a1;
}

uint64_t _s7SwiftUI5ImageVAAE8ResolvedVSgWOg(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 120) >> 1;
  int v2 = -2 - v1;
  if (-2 - (int)v1 < 0) {
    int v2 = -1;
  }
  if (v1 > 0x80000000) {
    return (v2 + 1);
  }
  else {
    return 0;
  }
}

double specialized closure #2 in ShapeStyledDisplayList.updateValue()@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>)
{
  uint64_t v8 = *a1;
  uint64_t v7 = a1[1];
  uint64_t v9 = *((unsigned __int8 *)a1 + 16);
  if (!v7)
  {
    swift_retain();
    double v19 = 0.0;
    goto LABEL_5;
  }
  unint64_t v10 = *(double (**)(uint64_t))(*(void *)v7 + 112);
  swift_retain();
  uint64_t v11 = swift_retain_n();
  double v12 = v10(v11);
  double v14 = v13;
  double v16 = v15;
  double v18 = v17;
  double v19 = 0.0;
  v25.origin.CGFloat x = 0.0;
  v25.origin.CGFloat y = 0.0;
  v25.size.CGFloat width = a3;
  v25.size.CGFloat height = a4;
  if (CGRectIsNull(v25))
  {
    swift_release();
LABEL_5:
    double v20 = 0.0;
    goto LABEL_13;
  }
  double v21 = -v16;
  double v22 = -v18;
  v26.origin.CGFloat x = 0.0;
  v26.origin.CGFloat y = 0.0;
  v26.size.CGFloat width = a3;
  v26.size.CGFloat height = a4;
  CGRect v27 = CGRectStandardize(v26);
  if (v14 == v18) {
    double v23 = v18;
  }
  else {
    double v23 = v14;
  }
  double v19 = v27.origin.x - v23;
  double v20 = v27.origin.y - v12;
  a3 = v27.size.width - (v22 - v14);
  a4 = v27.size.height - (v21 - v12);
  v28.origin.CGFloat x = v27.origin.x - v23;
  v28.origin.CGFloat y = v27.origin.y - v12;
  v28.size.CGFloat width = a3;
  v28.size.CGFloat height = a4;
  if (CGRectGetWidth(v28) < 0.0
    || (v29.origin.CGFloat x = v19, v29.origin.y = v20, v29.size.width = a3, v29.size.height = a4, CGRectGetHeight(v29) < 0.0))
  {
    double v19 = *MEMORY[0x263F001A0];
    double v20 = *(double *)(MEMORY[0x263F001A0] + 8);
    a3 = *(double *)(MEMORY[0x263F001A0] + 16);
    a4 = *(double *)(MEMORY[0x263F001A0] + 24);
  }
  swift_release();
LABEL_13:
  *(void *)a2 = v8;
  *(void *)(a2 + 8) = v7;
  *(void *)(a2 + 16) = v9;
  double result = 0.0;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(void *)(a2 + 88) = 0;
  *(_DWORD *)(a2 + 96) = 0x200000;
  *(double *)(a2 + 104) = v19;
  *(double *)(a2 + 112) = v20;
  *(CGFloat *)(a2 + 120) = a3;
  *(CGFloat *)(a2 + 128) = a4;
  return result;
}

BOOL specialized static Image.Resolved.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v2 = *(unsigned char *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 32);
  char v4 = *(unsigned char *)(a1 + 40);
  char v5 = *(unsigned char *)(a1 + 60);
  char v6 = *(unsigned char *)(a1 + 96);
  char v7 = *(unsigned char *)(a1 + 97);
  __int16 v8 = *(_WORD *)(a1 + 98);
  uint64_t v10 = *(void *)(a1 + 104);
  uint64_t v9 = *(void *)(a1 + 112);
  unint64_t v12 = *(void *)(a1 + 120);
  uint64_t v11 = *(void *)(a1 + 128);
  unint64_t v52 = *(void *)(a1 + 144);
  uint64_t v53 = *(void *)(a1 + 136);
  int v51 = *(unsigned __int8 *)(a1 + 152);
  int v49 = *(unsigned __int8 *)(a1 + 153);
  float v13 = *(float *)(a1 + 156);
  char v47 = *(unsigned char *)(a1 + 160);
  uint64_t v45 = *(void *)(a1 + 168);
  char v43 = *(unsigned char *)(a1 + 178);
  __int16 v44 = *(_WORD *)(a1 + 176);
  uint64_t v14 = *(void *)a2;
  char v15 = *(unsigned char *)(a2 + 8);
  uint64_t v16 = *(void *)(a2 + 32);
  uint64_t v66 = *(void *)a1;
  char v17 = *(unsigned char *)(a2 + 40);
  LOBYTE(v67) = v2;
  char v18 = *(unsigned char *)(a2 + 60);
  char v70 = v4;
  char v19 = *(unsigned char *)(a2 + 96);
  char v72 = v5;
  char v20 = *(unsigned char *)(a2 + 97);
  long long v21 = *(_OWORD *)(a1 + 16);
  long long v71 = *(_OWORD *)(a1 + 44);
  long long v22 = *(_OWORD *)(a1 + 64);
  long long v23 = *(_OWORD *)(a1 + 80);
  __int16 v24 = *(_WORD *)(a2 + 98);
  long long v73 = v22;
  long long v74 = v23;
  char v75 = v6;
  uint64_t v26 = *(void *)(a2 + 104);
  uint64_t v25 = *(void *)(a2 + 112);
  char v76 = v7;
  __int16 v77 = v8;
  unint64_t v28 = *(void *)(a2 + 120);
  uint64_t v27 = *(void *)(a2 + 128);
  uint64_t v54 = v14;
  LOBYTE(v55) = v15;
  uint64_t v29 = *(void *)(a2 + 136);
  unint64_t v30 = *(void *)(a2 + 144);
  char v58 = v17;
  int v50 = *(unsigned __int8 *)(a2 + 152);
  char v60 = v18;
  int v48 = *(unsigned __int8 *)(a2 + 153);
  float v31 = *(float *)(a2 + 156);
  char v63 = v19;
  int v46 = *(unsigned __int8 *)(a2 + 160);
  char v64 = v20;
  uint64_t v42 = *(void *)(a2 + 168);
  __int16 v65 = v24;
  __int16 v32 = *(_WORD *)(a2 + 176);
  long long v68 = v21;
  uint64_t v69 = v3;
  long long v56 = *(_OWORD *)(a2 + 16);
  uint64_t v57 = v16;
  long long v33 = *(_OWORD *)(a2 + 64);
  long long v34 = *(_OWORD *)(a2 + 80);
  char v40 = *(unsigned char *)(a2 + 178);
  __int16 v41 = v32;
  long long v59 = *(_OWORD *)(a2 + 44);
  long long v61 = v33;
  long long v62 = v34;
  if ((specialized static GraphicsImage.== infix(_:_:)((uint64_t)&v66, (uint64_t)&v54) & 1) == 0) {
    return 0;
  }
  if (v12 >> 1 == 0xFFFFFFFF)
  {
    if (v28 >> 1 == 0xFFFFFFFF) {
      goto LABEL_9;
    }
LABEL_7:
    outlined copy of AccessibilityImageLabel?(v26, v25, v28);
    outlined consume of AccessibilityImageLabel?(v10, v9, v12);
    outlined consume of AccessibilityImageLabel?(v26, v25, v28);
    return 0;
  }
  uint64_t v66 = v10;
  uint64_t v67 = v9;
  *(void *)&long long v68 = v12;
  *((void *)&v68 + 1) = v11;
  if (v28 >> 1 == 0xFFFFFFFF)
  {
    outlined copy of AccessibilityImageLabel(v10, v9, v12);
    outlined copy of AccessibilityImageLabel(v10, v9, v12);
    outlined consume of AccessibilityImageLabel(v10, v9, v12);
    goto LABEL_7;
  }
  uint64_t v54 = v26;
  uint64_t v55 = v25;
  *(void *)&long long v56 = v28;
  *((void *)&v56 + 1) = v27;
  outlined copy of AccessibilityImageLabel(v10, v9, v12);
  outlined copy of AccessibilityImageLabel(v10, v9, v12);
  char v35 = static AccessibilityImageLabel.== infix(_:_:)(&v66, &v54);
  outlined consume of AccessibilityImageLabel(v66, v67, v68);
  outlined consume of AccessibilityImageLabel?(v10, v9, v12);
  if ((v35 & 1) == 0) {
    return 0;
  }
LABEL_9:
  if (!v53)
  {
    if (v29) {
      return 0;
    }
    goto LABEL_16;
  }
  BOOL v36 = 0;
  if (v29 && v53 == v29)
  {
LABEL_16:
    BOOL v38 = specialized static IndirectOptional<A>.== infix(_:_:)(v52, v30);
    BOOL v36 = 0;
    if (!v38 || ((v51 ^ v50) & 1) != 0) {
      return v36;
    }
    if (v49 == 3)
    {
      if (v48 != 3) {
        return 0;
      }
    }
    else
    {
      BOOL v36 = 0;
      if (v48 == 3 || v49 != v48) {
        return v36;
      }
    }
    if ((v47 & 1) == 0)
    {
      char v39 = v46;
      if (v13 != v31) {
        char v39 = 1;
      }
      if (v39) {
        return 0;
      }
LABEL_29:
      uint64_t v66 = v45;
      LOWORD(v67) = v44;
      BYTE2(v67) = v43;
      uint64_t v54 = v42;
      LOWORD(v55) = v41;
      BYTE2(v55) = v40;
      return specialized static _ShapeStyle_ResolverMode.== infix(_:_:)((uint64_t)&v66, (uint64_t)&v54);
    }
    if (v46) {
      goto LABEL_29;
    }
    return 0;
  }
  return v36;
}

void *outlined copy of Image.Resolved?(void *result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  if (a16 >> 1 != 4294967294)
  {
    outlined copy of GraphicsImage.Contents?(result, a2);
    outlined copy of AccessibilityImageLabel?(a14, a15, a16);
    id v22 = a22;
    swift_unknownObjectRetain();
    return (void *)swift_retain();
  }
  return result;
}

void Image.Resolved.modifyTransition(state:to:)(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char **)a2;
  int v5 = *(unsigned __int8 *)(a2 + 8);
  char v6 = *(void **)v2;
  int v7 = *(unsigned __int8 *)(v2 + 8);
  switch(*(unsigned char *)(v2 + 8))
  {
    case 0:
      if (!*(unsigned char *)(a2 + 8)) {
        goto LABEL_17;
      }
      __int16 v8 = *(unsigned char **)a2;
      if (v5 == 255) {
        char v9 = -1;
      }
      else {
        char v9 = *(unsigned char *)(a2 + 8);
      }
      outlined copy of GraphicsImage.Contents?(v8, v9);
      outlined copy of GraphicsImage.Contents?(v6, 0);
      LOBYTE(v7) = 0;
      goto LABEL_36;
    case 1:
      if (v5 == 1)
      {
LABEL_17:
        BOOL v20 = v6 == (void *)v4;
        goto LABEL_27;
      }
      unint64_t v12 = *(unsigned char **)a2;
      if (v5 == 255) {
        char v13 = -1;
      }
      else {
        char v13 = *(unsigned char *)(a2 + 8);
      }
      outlined copy of GraphicsImage.Contents?(v12, v13);
      LOBYTE(v7) = 1;
      char v18 = v6;
      char v19 = 1;
      goto LABEL_35;
    case 2:
      if (v5 != 2)
      {
        uint64_t v14 = *(unsigned char **)a2;
        if (v5 == 255) {
          char v15 = -1;
        }
        else {
          char v15 = *(unsigned char *)(a2 + 8);
        }
        outlined copy of GraphicsImage.Contents?(v14, v15);
        LOBYTE(v7) = 2;
        char v18 = v6;
        char v19 = 2;
        goto LABEL_35;
      }
      if (v4[44] == 1)
      {
        LOBYTE(v7) = 2;
        outlined copy of GraphicsImage.Contents?(*(id *)a2, 2);
        outlined copy of GraphicsImage.Contents?(v6, 2);
        LOBYTE(v5) = 2;
        goto LABEL_36;
      }
      uint64_t v22 = 0x8000000001;
      uint64_t v23 = *(void *)a1;
      unint64_t v24 = *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 12) << 32);
      char v25 = *(unsigned char *)(a1 + 13);
      outlined copy of GraphicsImage.Contents?(*(id *)a2, 2);
      outlined copy of GraphicsImage.Contents?(v6, 2);
      outlined consume of ContentTransition.Storage(v23, v24, v25);
      outlined consume of GraphicsImage.Contents?(v6, 2);
      outlined consume of GraphicsImage.Contents?(v4, 2);
      goto LABEL_38;
    case 3:
      if (v5 != 3)
      {
        id v16 = *(id *)a2;
        if (v5 == 255) {
          char v17 = -1;
        }
        else {
          char v17 = *(unsigned char *)(a2 + 8);
        }
        outlined copy of GraphicsImage.Contents?(v16, v17);
        LOBYTE(v7) = 3;
        char v18 = v6;
        char v19 = 3;
        goto LABEL_35;
      }
      BOOL v20 = v6[2] == *((void *)v4 + 2);
LABEL_27:
      char v21 = v20;
      outlined copy of GraphicsImage.Contents?(*(id *)a2, *(unsigned char *)(a2 + 8));
      outlined copy of GraphicsImage.Contents?(v6, v7);
      outlined consume of GraphicsImage.Contents?(v6, v7);
      outlined consume of GraphicsImage.Contents?(v4, v5);
      if ((v21 & 1) != 0 || (*(unsigned char *)(a1 + 24) & 2) != 0) {
        return;
      }
      goto LABEL_37;
    default:
      id v10 = *(id *)a2;
      char v11 = *(unsigned char *)(a2 + 8);
      if (v7 == 255)
      {
        outlined copy of GraphicsImage.Contents?(v10, v11);
        LOBYTE(v7) = -1;
      }
      else
      {
        outlined copy of GraphicsImage.Contents?(v10, v11);
        char v18 = v6;
        char v19 = v7;
LABEL_35:
        outlined copy of GraphicsImage.Contents?(v18, v19);
      }
LABEL_36:
      outlined consume of GraphicsImage.Contents?(v6, v7);
      outlined consume of GraphicsImage.Contents?(v4, v5);
      if ((*(unsigned char *)(a1 + 24) & 2) == 0)
      {
LABEL_37:
        outlined consume of ContentTransition.Storage(*(void *)a1, *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 12) << 32), *(unsigned char *)(a1 + 13));
        uint64_t v22 = 0x8000000002;
LABEL_38:
        *(void *)a1 = v22;
        *(_WORD *)(a1 + 12) = 3;
        *(_DWORD *)(a1 + 8) = 0x2000000;
      }
      return;
  }
}

BOOL specialized static _ShapeStyle_ResolverMode.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  int v3 = *(unsigned __int16 *)(a1 + 8);
  int v4 = *(unsigned __int8 *)(a1 + 10);
  int v5 = *(void **)a2;
  int v6 = *(unsigned __int16 *)(a2 + 8);
  int v7 = *(unsigned __int8 *)(a2 + 10);
  if (!*(void *)a1)
  {
    if (v5) {
      BOOL v12 = 0;
    }
    else {
      BOOL v12 = v3 == v6;
    }
    if (v12) {
      return v4 == v7;
    }
    return 0;
  }
  if (!v5) {
    return 0;
  }
  type metadata accessor for NSBundle();
  id v8 = v5;
  id v9 = v2;
  char v10 = static NSObject.== infix(_:_:)();

  BOOL result = 0;
  if ((v10 & 1) != 0 && v3 == v6) {
    return v4 == v7;
  }
  return result;
}

BOOL specialized static IndirectOptional<A>.== infix(_:_:)(unint64_t a1, unint64_t a2)
{
  BOOL v2 = (a1 | a2) == 0;
  if (!a1 || !a2) {
    return v2;
  }
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 16), *(float64x2_t *)(a2 + 16)), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 32), *(float64x2_t *)(a2 + 32)))), 0xFuLL))) & 1) == 0|| *(double *)(a1 + 48) != *(double *)(a2 + 48)|| *(double *)(a1 + 56) != *(double *)(a2 + 56))
  {
    return 0;
  }
  return *(double *)(a1 + 64) == *(double *)(a2 + 64) && *(double *)(a1 + 72) == *(double *)(a2 + 72);
}

uint64_t static VerticalAlignment.top.getter()
{
  return static HorizontalAlignment.center.getter(&one-time initialization token for top, (uint64_t)&static VerticalAlignment.top);
}

uint64_t closure #1 in DelayedPreferenceChild.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  v10[2] = a2;
  v10[3] = a3;
  v10[4] = a4;
  v10[5] = a5;
  v10[6] = a1;
  v10[8] = a2;
  v10[9] = a3;
  v10[10] = a4;
  v10[11] = a5;
  uint64_t v8 = type metadata accessor for _DelayedPreferenceView();
  return Attribute.syncMainIfReferences<A>(do:)((void (*)(void))partial apply for closure #1 in closure #1 in DelayedPreferenceChild.value.getter, (uint64_t)v10, v8, a3, a6);
}

uint64_t type metadata accessor for _DelayedPreferenceView()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata completion function for HStack()
{
  uint64_t result = type metadata accessor for _VariadicView.Tree();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t key path getter for EnvironmentValues.legibilityWeight : EnvironmentValues@<X0>(uint64_t *a1@<X0>, void (*a2)(uint64_t *__return_ptr, uint64_t)@<X3>, void (*a3)(uint64_t *__return_ptr, uint64_t, unsigned char *)@<X4>, unsigned char *a4@<X8>)
{
  uint64_t v5 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    a2(&v11, v5);
    swift_release_n();
  }
  else
  {
    uint64_t v8 = swift_retain_n();
    a3(&v11, v8, v10);
  }
  uint64_t result = swift_release_n();
  *a4 = v11;
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<LegibilityWeightKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<LegibilityWeightKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<LegibilityWeightKey>, (uint64_t)&type metadata for LegibilityWeightKey, (uint64_t)&protocol witness table for LegibilityWeightKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<LegibilityWeightKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<LegibilityWeightKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<LegibilityWeightKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<LegibilityWeightKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<LegibilityWeightKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<LegibilityWeightKey>, (uint64_t)&type metadata for LegibilityWeightKey, (uint64_t)&protocol witness table for LegibilityWeightKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<LegibilityWeightKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for Visibility(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t ViewGraph.explicitAlignment(of:at:)(uint64_t a1, double a2, double a3)
{
  ViewGraph.layoutComputer.getter(v18);
  uint64_t v6 = v18[0];
  if (!v18[0])
  {
    double v14 = 0.0;
    return *(void *)&v14;
  }
  ViewGraph.rootViewInsets.getter();
  double v11 = v7;
  if (a2 - (v8 + v10) < 0.0) {
    double v12 = 0.0;
  }
  else {
    double v12 = a2 - (v8 + v10);
  }
  if (a3 - (v7 + v9) < 0.0) {
    double v13 = 0.0;
  }
  else {
    double v13 = a3 - (v7 + v9);
  }
  if (one-time initialization token for lockAssertionsAreEnabled != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_14;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_14:
    *(double *)char v18 = v12;
    *(double *)&v18[1] = v13;
    *(double *)&v18[2] = v12;
    *(double *)&v18[3] = v13;
    double v14 = COERCE_DOUBLE((*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v6 + 144))(a1, v18));
    char v16 = v15;
    swift_release();
    if ((v16 & 1) == 0) {
      double v14 = v11 + v14;
    }
    return *(void *)&v14;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  char v17;
  char v18;
  uint64_t result;
  uint64_t v20[4];

  ViewGraph.layoutComputer.getter(v20);
  uint64_t v6 = v20[0];
  if (!v20[0])
  {
    char v16 = 0.0;
    return *(void *)&v16;
  }
  ViewGraph.rootViewInsets.getter();
  double v10 = v9;
  double v12 = a2 - (v9 + v11);
  if (v12 < 0.0) {
    double v13 = 0.0;
  }
  else {
    double v13 = v12;
  }
  double v14 = a3 - (v7 + v8);
  if (v14 < 0.0) {
    char v15 = 0.0;
  }
  else {
    char v15 = v14;
  }
  if (one-time initialization token for lockAssertionsAreEnabled != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_14;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_14:
    *(double *)BOOL v20 = v13;
    *(double *)&v20[1] = v15;
    *(double *)&v20[2] = v13;
    *(double *)&_OWORD v20[3] = v15;
    char v16 = COERCE_DOUBLE((*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v6 + 144))(a1, v20));
    char v18 = v17;
    swift_release();
    if ((v18 & 1) == 0) {
      char v16 = v10 + v16;
    }
    return *(void *)&v16;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in ViewRendererHost.sizeThatFits(_:)@<X0>(uint64_t a1@<X1>, char a2@<W2>, uint64_t a3@<X3>, char a4@<W4>, void *a5@<X8>)
{
  uint64_t v17 = a1;
  char v18 = a2 & 1;
  uint64_t v19 = a3;
  char v20 = a4 & 1;
  ViewGraph.layoutComputer.getter((uint64_t *)&v16);
  long long v15 = v16;
  ViewGraph.rootViewInsets.getter();
  specialized static ViewGraph.sizeThatFits(_:layoutComputer:insets:)((uint64_t)&v17, (uint64_t *)&v15, v6, v7, v8, v9);
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t result = swift_release();
  *a5 = v11;
  a5[1] = v13;
  return result;
}

uint64_t ViewGraph.layoutComputer.getter@<X0>(uint64_t *a1@<X8>)
{
  swift_beginAccess();
  if ((*(unsigned char *)(v1 + 361) & 0x10) != 0)
  {
    GraphHost.instantiateIfNeeded()();
    uint64_t result = AGGraphGetWeakValue();
    if (result)
    {
      uint64_t v4 = *(void *)(result + 8);
      uint64_t result = swift_retain();
    }
    else
    {
      uint64_t v4 = 0;
    }
    *a1 = result;
    a1[1] = v4;
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for ShapeStyleResolver<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

void *protocol witness for BidirectionalCollection.index(before:) in conformance LayoutProxyCollection@<X0>(void *result@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v3 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else if (v3 < *(void *)(*(void *)(v2 + 8) + 16))
  {
    *a2 = v3;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t _UnaryViewAdaptor.init(content:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t GraphHost.setPhase(_:)()
{
  return AGGraphSetValue();
}

id ResolvedVectorGlyph.glyph.getter()
{
  id v1 = objc_msgSend(*v0, sel_glyph);

  return v1;
}

Swift::Bool __swiftcall ViewGraph.invalidateTransform()()
{
  char ValueState = AGGraphGetValueState();
  if ((ValueState & 1) == 0)
  {
    AGGraphInvalidateValue();
    swift_beginAccess();
    if (MEMORY[0x24C527E00](v0 + 200))
    {
      uint64_t v2 = *(void *)(v0 + 208);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t))(*(void *)(v2 + 8) + 16))(ObjectType);
      swift_unknownObjectRelease();
    }
  }
  return (ValueState & 1) == 0;
}

uint64_t static View.makeDebuggableView(view:inputs:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  int v27 = *a1;
  uint64_t v25 = *a2;
  int v5 = *((_DWORD *)a2 + 2);
  uint64_t v23 = a2[2];
  int v6 = *((_DWORD *)a2 + 6);
  int v7 = *((_DWORD *)a2 + 7);
  int v8 = *((_DWORD *)a2 + 9);
  int v19 = *((_DWORD *)a2 + 8);
  uint64_t v20 = a2[6];
  uint64_t v21 = a2[5];
  int v10 = *((_DWORD *)a2 + 14);
  int v9 = *((_DWORD *)a2 + 15);
  int v11 = *((_DWORD *)a2 + 16);
  int v12 = *((_DWORD *)a2 + 17);
  int v13 = *((_DWORD *)a2 + 19);
  int v17 = *((_DWORD *)a2 + 18);
  int v14 = *((_DWORD *)a2 + 20);
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  uint64_t v45 = v25;
  int v46 = v5;
  uint64_t v47 = v23;
  int v48 = v6;
  int v49 = v7;
  uint64_t v52 = v21;
  uint64_t v53 = v20;
  int v51 = v8;
  int v54 = v10;
  int v55 = v9;
  int v56 = v11;
  int v57 = v12;
  int v58 = v17;
  int v59 = v13;
  int v60 = v14;
  int v28 = v27;
  uint64_t v29 = v25;
  int v30 = v5;
  uint64_t v31 = v23;
  int v32 = v6;
  int v33 = v7;
  int v34 = 0;
  int v35 = v8;
  uint64_t v36 = v21;
  uint64_t v37 = v20;
  int v38 = v10;
  int v39 = v9;
  int v40 = v11;
  int v41 = v12;
  int v42 = v17;
  int v43 = v13;
  int v44 = v14;
  long long v15 = *(void (**)(int *, uint64_t *, uint64_t, uint64_t))(a4 + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v15(&v28, &v29, a3, a4);
  int v50 = v19;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(a5, (uint64_t)&v45);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance _ViewModifier_Content<A>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  return static _ViewModifier_Content._makeView(view:inputs:)(a1, a2);
}

uint64_t static _ViewModifier_Content._makeView(view:inputs:)@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  int v5 = *((_DWORD *)a1 + 2);
  uint64_t v6 = a1[2];
  int v7 = *((_DWORD *)a1 + 20);
  type metadata accessor for _ViewModifier_Content();
  *(void *)&long long v10 = v4;
  DWORD2(v10) = v5;
  uint64_t v11 = v6;
  long long v8 = *(_OWORD *)(a1 + 5);
  long long v12 = *(_OWORD *)(a1 + 3);
  long long v13 = v8;
  long long v14 = *(_OWORD *)(a1 + 7);
  uint64_t v15 = a1[9];
  int v16 = v7;
  return static ViewModifierContentProvider.providerMakeView(view:inputs:)(&v10, a2);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance <> _VariadicView.Tree<A, B>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static _VariadicView.Tree<>._makeView(view:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), *(void *)(a4 - 8), *(void *)(a4 - 16), a5);
}

uint64_t _ViewInputs.requestedTextRepresentation.setter(uint64_t a1, uint64_t a2)
{
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, a1, a2);
  return swift_release();
}

uint64_t static Text._makeView(view:inputs:)@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  long long v74 = a3;
  uint64_t v99 = *MEMORY[0x263EF8340];
  uint64_t v5 = type metadata accessor for ResolvedTextFilter(0);
  MEMORY[0x270FA5388](v5);
  long long v71 = (_DWORD *)((char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  LODWORD(v73) = *a1;
  uint64_t v7 = *(void *)a2;
  int v8 = *(_DWORD *)(a2 + 8);
  uint64_t v9 = *(void *)(a2 + 16);
  LODWORD(v6) = *(_DWORD *)(a2 + 28);
  int v10 = *(_DWORD *)(a2 + 32);
  int v78 = *(_DWORD *)(a2 + 24);
  int v79 = v6;
  int v11 = *(_DWORD *)(a2 + 36);
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = *(void *)(a2 + 48);
  int v15 = *(_DWORD *)(a2 + 56);
  int v14 = *(_DWORD *)(a2 + 60);
  int v16 = *(_DWORD *)(a2 + 64);
  int v80 = *(_DWORD *)(a2 + 68);
  int v81 = v8;
  int v17 = *(_DWORD *)(a2 + 72);
  LODWORD(v6) = *(_DWORD *)(a2 + 76);
  int v75 = v11;
  int v76 = v6;
  int v77 = *(_DWORD *)(a2 + 80);
  uint64_t v18 = v9;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  uint64_t v19 = specialized find<A>(_:key:)(v7);
  if (!v19)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
LABEL_7:
    v82[0] = v73;
    *(void *)int v83 = v7;
    *(_DWORD *)&v83[8] = v81;
    uint64_t v85 = v18;
    int v86 = v78;
    int v87 = v79;
    int v88 = v10;
    int v89 = v75;
    uint64_t v90 = v12;
    uint64_t v91 = v13;
    int v92 = v15;
    int v93 = v14;
    int v94 = v16;
    int v95 = v80;
    int v96 = v17;
    int v97 = v76;
    int v98 = v77;
    return static Text.makeCommonAttributes(view:inputs:)(v82, (uint64_t)v83, v74);
  }
  uint64_t v68 = v5;
  uint64_t v20 = *(void *)(v19 + 72);
  uint64_t v72 = *(void *)(v19 + 80);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  if (!v20) {
    goto LABEL_7;
  }
  *(void *)int v83 = v7;
  *(_DWORD *)&v83[8] = v81;
  uint64_t v85 = v18;
  int v86 = v78;
  int v87 = v79;
  int v88 = v10;
  int v89 = v75;
  uint64_t v90 = v12;
  uint64_t v91 = v13;
  int v92 = v15;
  int v93 = v14;
  int v94 = v16;
  int v95 = v80;
  int v96 = v17;
  int v97 = v76;
  int v98 = v77;
  uint64_t v21 = *(uint64_t (**)(unsigned char *, uint64_t))(v72 + 8);
  int v69 = v17;
  char v22 = v21(v83, v20);
  int v17 = v69;
  if ((v22 & 1) == 0) {
    goto LABEL_7;
  }
  v82[0] = v73;
  *(void *)int v83 = v7;
  *(_DWORD *)&v83[8] = v81;
  uint64_t v85 = v18;
  int v86 = v78;
  int v87 = v79;
  uint64_t v67 = v12;
  uint64_t v66 = v13;
  int v23 = v75;
  int v88 = v10;
  int v89 = v75;
  uint64_t v90 = v12;
  uint64_t v91 = v66;
  int v92 = v15;
  int v93 = v14;
  uint64_t v70 = v18;
  int v94 = v16;
  int v95 = v80;
  int v24 = v76;
  int v25 = v77;
  int v96 = v69;
  int v97 = v76;
  int v98 = v77;
  static Text.makeCommonAttributes(view:inputs:)(v82, (uint64_t)v83, v74);
  *(void *)int v83 = v7;
  *(_DWORD *)&v83[8] = v81;
  uint64_t v85 = v70;
  int v86 = v78;
  int v87 = v79;
  int v62 = v10;
  int v88 = v10;
  int v89 = v23;
  uint64_t v26 = v67;
  uint64_t v90 = v67;
  uint64_t v91 = v66;
  int v63 = v15;
  int v92 = v15;
  int v93 = v14;
  int v64 = v14;
  int v65 = v16;
  int v94 = v16;
  int v95 = v80;
  uint64_t v27 = v70;
  int v96 = v17;
  int v97 = v24;
  int v98 = v25;
  uint64_t v28 = v66;
  (*(void (**)(unsigned int *__return_ptr, unsigned char *, uint64_t))(v72 + 16))(v82, v83, v20);
  uint64_t v60 = *(void *)v82;
  swift_beginAccess();
  int v29 = *(_DWORD *)(v27 + 16);
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  uint64_t v30 = specialized find<A>(_:key:)(v7);
  uint64_t v61 = v20;
  if (v30) {
    *(void *)&long long v31 = *(void *)(v30 + 72);
  }
  else {
    long long v31 = 0uLL;
  }
  long long v59 = v31;
  swift_bridgeObjectRelease();
  int v33 = 2;
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  uint64_t v34 = specialized find<A>(_:key:)(v7);
  if (v34)
  {
    int v57 = *(unsigned __int8 *)(v34 + 72);
    int v33 = *(unsigned __int8 *)(v34 + 73);
  }
  else
  {
    int v57 = 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  uint64_t v35 = specialized find<A>(_:key:)(v7);
  if (v35) {
    HIDWORD(v56) = *(unsigned __int8 *)(v35 + 72);
  }
  else {
    HIDWORD(v56) = 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v36 = specialized find<A>(_:key:)(v7);
  int v58 = v33;
  if (!v36)
  {
    swift_release();
    goto LABEL_20;
  }
  uint64_t v37 = *(void *)(v36 + 72);
  int v38 = *(_UNKNOWN ***)(v36 + 80);
  swift_release();
  if (!v37)
  {
LABEL_20:
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    type metadata accessor for InterfaceIdiomBox<PhoneInterfaceIdiom>(0, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomBox<PhoneInterfaceIdiom>, (uint64_t)&type metadata for PhoneInterfaceIdiom, (uint64_t)&protocol witness table for PhoneInterfaceIdiom, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for InterfaceIdiomBox);
    uint64_t v37 = v39;
    int v38 = &protocol witness table for InterfaceIdiomBox<A>;
    goto LABEL_21;
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
LABEL_21:
  uint64_t v40 = v7;
  uint64_t v41 = (uint64_t)v71;
  *long long v71 = v73;
  *(_DWORD *)(v41 + 4) = v29;
  uint64_t v42 = v41 + *(int *)(v68 + 24);
  uint64_t v43 = type metadata accessor for ResolvedTextHelper(0);
  *(void *)(v42 + *(int *)(v43 + 56)) = 0;
  type metadata accessor for ResolvedTextHelper.NextUpdate(0);
  swift_storeEnumTagMultiPayload();
  *(_DWORD *)uint64_t v42 = v81;
  *(void *)(v42 + 4) = v59;
  *(unsigned char *)(v42 + 12) = v60 & 1;
  *(unsigned char *)(v42 + 13) = 0;
  *(unsigned char *)(v42 + 14) = v57;
  *(unsigned char *)(v42 + 15) = v58;
  *(_WORD *)(v42 + 16) = 0;
  *(unsigned char *)(v42 + 18) = BYTE4(v56);
  *(void *)(v42 + 24) = v37;
  *(void *)(v42 + 32) = v38;
  type metadata accessor for PropertyList.Tracker();
  uint64_t v44 = swift_allocObject();
  _sypSgMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<TrackerData>, (uint64_t)&type metadata for TrackerData, (uint64_t (*)(void, uint64_t))type metadata accessor for AtomicBuffer);
  uint64_t v45 = swift_allocObject();
  *(_DWORD *)(v45 + 16) = 0;
  uint64_t v46 = MEMORY[0x263F8EE80];
  uint64_t v47 = MEMORY[0x263F8EE78];
  *(void *)(v45 + 24) = 0;
  *(void *)(v45 + 32) = v46;
  *(void *)(v45 + 40) = v46;
  *(void *)(v45 + 48) = v47;
  *(unsigned char *)(v45 + 56) = 0;
  *(void *)(v44 + 16) = v45;
  *(void *)(v42 + 40) = v44;
  *(_OWORD *)(v42 + 48) = 0u;
  *(_OWORD *)(v42 + 64) = 0u;
  *(void *)(v42 + *(int *)(v43 + 60)) = 0;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for ResolvedStyledText();
  lazy protocol witness table accessor for type ResolvedTextFilter and conformance ResolvedTextFilter(&lazy protocol witness table cache variable for type ResolvedTextFilter and conformance ResolvedTextFilter, (void (*)(uint64_t))type metadata accessor for ResolvedTextFilter);
  int v48 = Attribute.init<A>(body:value:flags:update:)();
  _s10Foundation4DateVSgWOhTm_0(v41, type metadata accessor for ResolvedTextFilter);
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  uint64_t v49 = specialized find<A>(_:key:)(v7);
  if (v49) {
    *(void *)&long long v50 = *(void *)(v49 + 72);
  }
  else {
    long long v50 = 0uLL;
  }
  long long v73 = v50;
  int v51 = v74;
  int v52 = v76;
  swift_bridgeObjectRelease();
  uint64_t v53 = v70;
  swift_release();
  swift_release_n();
  int v54 = *(_DWORD *)(v53 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(_DWORD *)int v83 = v48;
  *(void *)&v83[4] = v73;
  int v84 = v54;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type Text.MakeRepresentableContext and conformance Text.MakeRepresentableContext();
  uint64_t v55 = Attribute.init<A>(body:value:flags:update:)();
  *(void *)int v83 = v40;
  *(_DWORD *)&v83[8] = v81;
  uint64_t v85 = v53;
  int v86 = v78;
  int v87 = v79;
  int v88 = v62;
  int v89 = v75;
  uint64_t v90 = v26;
  uint64_t v91 = v28;
  int v92 = v63;
  int v93 = v64;
  int v94 = v65;
  int v95 = v80;
  int v96 = v69;
  int v97 = v52;
  int v98 = v77;
  return (*(uint64_t (**)(unsigned char *, uint64_t, void *))(v72 + 24))(v83, v55, v51);
}

uint64_t base witness table accessor for _AttributeBody in AnyViewChild<A>()
{
  return swift_getWitnessTable();
}

uint64_t dispatch thunk of VectorArithmetic.scale(by:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

ValueMetadata *type metadata accessor for Material.ID()
{
  return &type metadata for Material.ID;
}

ValueMetadata *type metadata accessor for Material.ResolvedMaterial.Flags()
{
  return &type metadata for Material.ResolvedMaterial.Flags;
}

ValueMetadata *type metadata accessor for ScrollPositionStorage()
{
  return &type metadata for ScrollPositionStorage;
}

uint64_t ImageProviderBox.__deallocating_deinit()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 112) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 128));

  return swift_deallocClassInstance();
}

void destroy for Image.NamedImageProvider(void *a1)
{
  swift_bridgeObjectRelease();
  uint64_t v2 = (void *)a1[3];
  if ((unint64_t)v2 >= 2) {

  }
  unint64_t v3 = (void *)a1[4];
  if ((unint64_t)v3 >= 3) {

  }
  unint64_t v4 = a1[7];
  if (v4 >> 1 != 0xFFFFFFFF)
  {
    uint64_t v5 = a1[5];
    uint64_t v6 = a1[6];
    outlined consume of AccessibilityImageLabel(v5, v6, v4);
  }
}

void destroy for Image.CGImageProvider(uint64_t a1)
{
  if (*(void *)(a1 + 48))
  {
    outlined consume of Text.Storage(*(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
    swift_bridgeObjectRelease();
  }
}

uint64_t key path getter for EnvironmentValues.symbolVariants : EnvironmentValues@<X0>(uint64_t *a1@<X0>, _WORD *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (a1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, &v6);
    swift_release_n();
  }
  else
  {
    uint64_t v4 = swift_retain_n();
    specialized closure #1 in PropertyList.subscript.getter(v4, &v6);
  }
  uint64_t result = swift_release_n();
  *a2 = v6;
  return result;
}

void type metadata accessor for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.SymbolEffectsKey>>()
{
  if (!lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.SymbolEffectsKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SymbolEffectsKey>, (uint64_t)&type metadata for EnvironmentValues.SymbolEffectsKey, (uint64_t)&protocol witness table for EnvironmentValues.SymbolEffectsKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SymbolEffectsKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TrackedValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TrackedValue<EnvironmentPropertyKey<EnvironmentValues.SymbolEffectsKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SymbolEffectsKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SymbolEffectsKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SymbolEffectsKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SymbolEffectsKey>, (uint64_t)&type metadata for EnvironmentValues.SymbolEffectsKey, (uint64_t)&protocol witness table for EnvironmentValues.SymbolEffectsKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SymbolEffectsKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

__n128 protocol witness for Sequence.makeIterator() in conformance _VariadicView_Children@<Q0>(uint64_t a1@<X8>)
{
  long long v2 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(v1 + 32);
  *(__n128 *)(a1 + 32) = result;
  *(void *)(a1 + 48) = *(void *)(v1 + 48);
  *(void *)(a1 + 56) = 0;
  return result;
}

uint64_t key path getter for _PreferenceTransformModifier.transform : <A>_PreferenceTransformModifier<A>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)()@<X8>)
{
  uint64_t v5 = a3 + a2;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = *(_OWORD *)(v5 - 16);
  *(void *)(v8 + 32) = v7;
  *(void *)(v8 + 40) = v6;
  *a4 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A?) -> ();
  a4[1] = (uint64_t (*)())v8;

  return swift_retain();
}

Swift::Void __swiftcall ViewGraph.setProposedSize(_:)(CGSize a1)
{
  if (AGGraphSetValue())
  {
    swift_beginAccess();
    if (MEMORY[0x24C527E00](v1 + 200))
    {
      uint64_t v2 = *(void *)(v1 + 208);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t))(*(void *)(v2 + 8) + 16))(ObjectType);
      swift_unknownObjectRelease();
    }
  }
}

_DWORD *initializeWithCopy for ValueActionDispatcher(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v4 = *v5;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (void *)(((unint64_t)v4 + v8 + 4) & ~v8);
  int v10 = (const void *)(((unint64_t)v5 + v8 + 4) & ~v8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6))
  {
    int v11 = *(_DWORD *)(v7 + 84);
    size_t v12 = *(void *)(v7 + 64);
    if (v11) {
      size_t v13 = v12;
    }
    else {
      size_t v13 = v12 + 1;
    }
    memcpy(v9, v10, v13);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(v9, v10, v6);
    int v15 = *(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56);
    uint64_t v14 = v7 + 56;
    v15(v9, 0, 1, v6);
    int v11 = *(_DWORD *)(v14 + 28);
    size_t v12 = *(void *)(v14 + 8);
  }
  if (v11) {
    size_t v16 = v12;
  }
  else {
    size_t v16 = v12 + 1;
  }
  int v17 = (_DWORD *)(((unint64_t)v9 + v16 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v18 = (_DWORD *)(((unint64_t)v10 + v16 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  *int v17 = *v18;
  uint64_t v19 = (uint64_t *)(((unint64_t)v18 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v20 = *v19;
  uint64_t v21 = (void *)(((unint64_t)v17 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *(void *)((char *)v21 + 5) = *(uint64_t *)((char *)v19 + 5);
  *uint64_t v21 = v20;
  return a1;
}

uint64_t static HierarchicalShapeStyle.tertiary.getter()
{
  return 2;
}

uint64_t static Alignment.trailing.getter()
{
  return static Alignment.center.getter(&one-time initialization token for trailing, (uint64_t)&static Alignment.trailing);
}

uint64_t closure #1 in static ViewModifier.makeUnaryViewList(modifier:inputs:body:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t result = AGWeakAttributeGetAttribute();
  if (result == *MEMORY[0x263F288F8])
  {
    *(void *)a4 = MEMORY[0x263F8EE78];
    *(_DWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 12) = result;
  }
  else
  {
    int v9 = *(_DWORD *)(a1 + 80);
    uint64_t v10 = *(void *)(a1 + 16);
    int v11 = *(_DWORD *)(a1 + 8);
    uint64_t v12 = *(void *)a1;
    _GraphValue.init(_:)(result, &v22);
    uint64_t v14 = v12;
    int v15 = v11;
    uint64_t v16 = v10;
    long long v13 = *(_OWORD *)(a1 + 40);
    long long v17 = *(_OWORD *)(a1 + 24);
    long long v18 = v13;
    long long v19 = *(_OWORD *)(a1 + 56);
    uint64_t v20 = *(void *)(a1 + 72);
    int v21 = v9;
    return static ViewModifier.makeImplicitRoot(modifier:inputs:body:)(&v22, &v14, a2, a3, a4);
  }
  return result;
}

uint64_t static ViewModifier.makeImplicitRoot(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8 = *a2;
  int v9 = *((_DWORD *)a2 + 2);
  uint64_t v10 = a2[2];
  int v11 = *((_DWORD *)a2 + 20);
  int v23 = *a1;
  uint64_t v15 = v8;
  int v16 = v9;
  uint64_t v17 = v10;
  long long v12 = *(_OWORD *)(a2 + 5);
  long long v18 = *(_OWORD *)(a2 + 3);
  long long v19 = v12;
  long long v20 = *(_OWORD *)(a2 + 7);
  uint64_t v21 = a2[9];
  int v22 = v11;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a3;
  *(void *)(v13 + 24) = a4;
  swift_retain();
  static _ViewOutputs.multiView<A>(applying:inputs:body:)(&v23, (uint64_t)&v15, (uint64_t)partial apply for closure #1 in static ViewModifier.makeImplicitRoot(modifier:inputs:body:), v13, a5);

  return swift_release();
}

uint64_t static _ViewOutputs.multiView<A>(applying:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = *(void *)a2;
  int v7 = *(_DWORD *)(a2 + 8);
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 48);
  int v11 = *(_DWORD *)(a2 + 80);
  int v35 = *a1;
  uint64_t v36 = v6;
  int v37 = v7;
  uint64_t v38 = v8;
  long long v39 = *(_OWORD *)(a2 + 24);
  *(void *)&long long v40 = v9;
  *((void *)&v40 + 1) = v10;
  long long v41 = *(_OWORD *)(a2 + 56);
  uint64_t v42 = *(void *)(a2 + 72);
  int v43 = v11;
  *(void *)&long long v44 = a3;
  *((void *)&v44 + 1) = a4;
  uint64_t v45 = 0;
  unint64_t v46 = 0;
  swift_retain();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  uint64_t v12 = specialized find<A>(_:key:)(v6);
  if (v12)
  {
    uint64_t v13 = (uint64_t *)(v12 + 72);
    uint64_t v14 = (uint64_t *)(v12 + 80);
  }
  else
  {
    uint64_t v13 = (uint64_t *)&static ImplicitRootType.defaultValue;
    uint64_t v14 = (uint64_t *)&off_26B0F1518;
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
  }
  uint64_t v15 = *v14;
  uint64_t v16 = *v13;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  uint64_t v17 = *(uint64_t (**)(int *, uint64_t, _UNKNOWN **, uint64_t, uint64_t))(v15 + 8);
  uint64_t ModifiedRoot = type metadata accessor for MakeModifiedRoot();
  uint64_t result = v17(&v35, ModifiedRoot, &protocol witness table for MakeModifiedRoot<A>, v16, v15);
  uint64_t v20 = v45;
  if (v45)
  {
    int v21 = v46;
    unint64_t v22 = HIDWORD(v46);
    int v23 = v35;
    uint64_t v24 = v36;
    int v25 = v37;
    uint64_t v26 = v38;
    long long v27 = v39;
    long long v28 = v40;
    long long v29 = v41;
    uint64_t v30 = v42;
    int v31 = v43;
    long long v32 = v44;
    uint64_t v33 = v45;
    unint64_t v34 = v46;
    swift_bridgeObjectRetain();
    uint64_t result = outlined release of MakeModifiedRoot<A>((uint64_t)&v23);
    *(void *)a5 = v20;
    *(_DWORD *)(a5 + 8) = v21;
    *(_DWORD *)(a5 + 12) = v22;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t outlined release of MakeModifiedRoot<A>(uint64_t a1)
{
  return a1;
}

uint64_t type metadata accessor for MakeModifiedRoot()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for AnyImageProviderBox()
{
  return self;
}

uint64_t hostingViewCoordinateSpace.getter@<X0>(SwiftUI::CoordinateSpace::ID *a1@<X8>)
{
  if (one-time initialization token for hostingViewCoordinateSpace != -1) {
    uint64_t result = swift_once();
  }
  a1->value.value = hostingViewCoordinateSpace.value.value;
  return result;
}

uint64_t specialized StatefulRule<>.update<A>(modify:create:)(uint64_t a1, uint64_t a2, void (*a3)(_OWORD *__return_ptr))
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  Outputuint64_t Value = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v20);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for TracingLayoutEngineBox<ResolvedImageLayoutEngine>, (uint64_t)&unk_26FA6D0B8, (uint64_t)&protocol witness table for ResolvedImageLayoutEngine, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TracingLayoutEngineBox);
      uint64_t v10 = swift_allocObject();
      int CurrentAttribute = AGGraphGetCurrentAttribute();
      BOOL v12 = CurrentAttribute == *MEMORY[0x263F288F8];
      if (CurrentAttribute == *MEMORY[0x263F288F8]) {
        int v13 = 0;
      }
      else {
        int v13 = CurrentAttribute;
      }
      *(_DWORD *)(v10 + 196) = v13;
      *(unsigned char *)(v10 + 200) = v12;
    }
    else
    {
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for LayoutEngineBox<ResolvedImageLayoutEngine>, (uint64_t)&unk_26FA6D0B8, (uint64_t)&protocol witness table for ResolvedImageLayoutEngine, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for LayoutEngineBox);
      uint64_t v10 = swift_allocObject();
    }
    long long v14 = v20[9];
    *(_OWORD *)(v10 + 144) = v20[8];
    *(_OWORD *)(v10 + 160) = v14;
    *(_OWORD *)(v10 + 176) = *(_OWORD *)v21;
    *(_DWORD *)(v10 + 191) = *(_DWORD *)&v21[15];
    long long v15 = v20[5];
    *(_OWORD *)(v10 + 80) = v20[4];
    *(_OWORD *)(v10 + 96) = v15;
    long long v16 = v20[7];
    *(_OWORD *)(v10 + 112) = v20[6];
    *(_OWORD *)(v10 + 128) = v16;
    long long v17 = v20[1];
    *(_OWORD *)(v10 + 16) = v20[0];
    *(_OWORD *)(v10 + 32) = v17;
    long long v18 = v20[3];
    *(_OWORD *)(v10 + 48) = v20[2];
    *(_OWORD *)(v10 + 64) = v18;
    AGGraphSetOutputValue();
    return swift_release();
  }
  uint64_t v5 = *OutputValue;
  uint64_t v6 = OutputValue[1];
  MEMORY[0x270FA5388](OutputValue);
  uint64_t v7 = one-time initialization token for lockAssertionsAreEnabled;
  uint64_t IsOwner = swift_retain();
  if (v7 != -1) {
    uint64_t IsOwner = swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_8;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  uint64_t IsOwner = _MovableLockIsOwner(static Update._lock);
  if (IsOwner)
  {
LABEL_8:
    double v9 = MEMORY[0x270FA5388](IsOwner);
    (*(void (**)(double))(*(void *)v5 + 80))(v9);
    *(void *)&v20[0] = v5;
    *((void *)&v20[0] + 1) = v6 + 1;
    AGGraphSetOutputValue();
    return swift_release();
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  uint64_t result;
  _OWORD v21[13];
  char v22;
  uint64_t v23;

  int v23 = *MEMORY[0x263EF8340];
  Outputuint64_t Value = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v21);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for TracingLayoutEngineBox<LeafLayoutEngine<_ShapeView<Rectangle, LinearGradient>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<_ShapeView<Rectangle, LinearGradient>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TracingLayoutEngineBox);
      uint64_t v10 = swift_allocObject();
      int CurrentAttribute = AGGraphGetCurrentAttribute();
      BOOL v12 = CurrentAttribute == *MEMORY[0x263F288F8];
      if (CurrentAttribute == *MEMORY[0x263F288F8]) {
        int v13 = 0;
      }
      else {
        int v13 = CurrentAttribute;
      }
      *(_DWORD *)(v10 + 228) = v13;
      *(unsigned char *)(v10 + 232) = v12;
    }
    else
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LayoutEngineBox<LeafLayoutEngine<_ShapeView<Rectangle, LinearGradient>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<_ShapeView<Rectangle, LinearGradient>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LayoutEngineBox);
      uint64_t v10 = swift_allocObject();
    }
    long long v14 = v21[11];
    *(_OWORD *)(v10 + 176) = v21[10];
    *(_OWORD *)(v10 + 192) = v14;
    *(_OWORD *)(v10 + 208) = v21[12];
    *(unsigned char *)(v10 + 224) = v22;
    long long v15 = v21[7];
    *(_OWORD *)(v10 + 112) = v21[6];
    *(_OWORD *)(v10 + 128) = v15;
    long long v16 = v21[9];
    *(_OWORD *)(v10 + 144) = v21[8];
    *(_OWORD *)(v10 + 160) = v16;
    long long v17 = v21[3];
    *(_OWORD *)(v10 + 48) = v21[2];
    *(_OWORD *)(v10 + 64) = v17;
    long long v18 = v21[5];
    *(_OWORD *)(v10 + 80) = v21[4];
    *(_OWORD *)(v10 + 96) = v18;
    long long v19 = v21[1];
    *(_OWORD *)(v10 + 16) = v21[0];
    *(_OWORD *)(v10 + 32) = v19;
    goto LABEL_16;
  }
  uint64_t v5 = *OutputValue;
  uint64_t v6 = OutputValue[1];
  MEMORY[0x270FA5388](OutputValue);
  uint64_t v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_8;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for LeafLayoutEngine<_ShapeView<Rectangle, LinearGradient>>(0);
    double v9 = MEMORY[0x270FA5388](v8);
    (*(void (**)(double))(*(void *)v5 + 80))(v9);
    *(void *)&v21[0] = v5;
    *((void *)&v21[0] + 1) = v6 + 1;
LABEL_16:
    AGGraphSetOutputValue();
    return swift_release();
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  uint64_t result;
  _OWORD v21[11];
  _OWORD v22[2];
  uint64_t v23;

  int v23 = *MEMORY[0x263EF8340];
  Outputuint64_t Value = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v21);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for TracingLayoutEngineBox<UnaryPositionAwareLayoutEngine<_SafeAreaRegionsIgnoringLayout>>();
      uint64_t v10 = swift_allocObject();
      int CurrentAttribute = AGGraphGetCurrentAttribute();
      BOOL v12 = CurrentAttribute == *MEMORY[0x263F288F8];
      if (CurrentAttribute == *MEMORY[0x263F288F8]) {
        int v13 = 0;
      }
      else {
        int v13 = CurrentAttribute;
      }
      *(_DWORD *)(v10 + 220) = v13;
      *(unsigned char *)(v10 + 224) = v12;
    }
    else
    {
      type metadata accessor for LayoutEngineBox<UnaryPositionAwareLayoutEngine<_SafeAreaRegionsIgnoringLayout>>();
      uint64_t v10 = swift_allocObject();
    }
    long long v14 = v22[0];
    *(_OWORD *)(v10 + 176) = v21[10];
    *(_OWORD *)(v10 + 192) = v14;
    *(_OWORD *)(v10 + 201) = *(_OWORD *)((char *)v22 + 9);
    long long v15 = v21[7];
    *(_OWORD *)(v10 + 112) = v21[6];
    *(_OWORD *)(v10 + 128) = v15;
    long long v16 = v21[9];
    *(_OWORD *)(v10 + 144) = v21[8];
    *(_OWORD *)(v10 + 160) = v16;
    long long v17 = v21[3];
    *(_OWORD *)(v10 + 48) = v21[2];
    *(_OWORD *)(v10 + 64) = v17;
    long long v18 = v21[5];
    *(_OWORD *)(v10 + 80) = v21[4];
    *(_OWORD *)(v10 + 96) = v18;
    long long v19 = v21[1];
    *(_OWORD *)(v10 + 16) = v21[0];
    *(_OWORD *)(v10 + 32) = v19;
    goto LABEL_16;
  }
  uint64_t v5 = *OutputValue;
  uint64_t v6 = OutputValue[1];
  MEMORY[0x270FA5388](OutputValue);
  uint64_t v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_8;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for UnaryPositionAwareLayoutEngine<_SafeAreaRegionsIgnoringLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _SafeAreaRegionsIgnoringLayout and conformance _SafeAreaRegionsIgnoringLayout, (uint64_t)&type metadata for _SafeAreaRegionsIgnoringLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryPositionAwareLayoutEngine);
    double v9 = MEMORY[0x270FA5388](v8);
    (*(void (**)(double))(*(void *)v5 + 80))(v9);
    *(void *)&v21[0] = v5;
    *((void *)&v21[0] + 1) = v6 + 1;
LABEL_16:
    AGGraphSetOutputValue();
    return swift_release();
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  uint64_t result;
  _OWORD v21[12];
  char v22;
  uint64_t v23;

  int v23 = *MEMORY[0x263EF8340];
  Outputuint64_t Value = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v21);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for TracingLayoutEngineBox<UnaryPositionAwareLayoutEngine<_SafeAreaIgnoringLayout>>();
      uint64_t v10 = swift_allocObject();
      int CurrentAttribute = AGGraphGetCurrentAttribute();
      BOOL v12 = CurrentAttribute == *MEMORY[0x263F288F8];
      if (CurrentAttribute == *MEMORY[0x263F288F8]) {
        int v13 = 0;
      }
      else {
        int v13 = CurrentAttribute;
      }
      *(_DWORD *)(v10 + 212) = v13;
      *(unsigned char *)(v10 + 216) = v12;
    }
    else
    {
      type metadata accessor for LayoutEngineBox<UnaryPositionAwareLayoutEngine<_SafeAreaIgnoringLayout>>();
      uint64_t v10 = swift_allocObject();
    }
    long long v14 = v21[11];
    *(_OWORD *)(v10 + 176) = v21[10];
    *(_OWORD *)(v10 + 192) = v14;
    *(unsigned char *)(v10 + 208) = v22;
    long long v15 = v21[7];
    *(_OWORD *)(v10 + 112) = v21[6];
    *(_OWORD *)(v10 + 128) = v15;
    long long v16 = v21[9];
    *(_OWORD *)(v10 + 144) = v21[8];
    *(_OWORD *)(v10 + 160) = v16;
    long long v17 = v21[3];
    *(_OWORD *)(v10 + 48) = v21[2];
    *(_OWORD *)(v10 + 64) = v17;
    long long v18 = v21[5];
    *(_OWORD *)(v10 + 80) = v21[4];
    *(_OWORD *)(v10 + 96) = v18;
    long long v19 = v21[1];
    *(_OWORD *)(v10 + 16) = v21[0];
    *(_OWORD *)(v10 + 32) = v19;
    AGGraphSetOutputValue();
    return swift_release();
  }
  uint64_t v5 = *OutputValue;
  uint64_t v6 = OutputValue[1];
  MEMORY[0x270FA5388](OutputValue);
  uint64_t v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_8;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(0, &lazy cache variable for type metadata for UnaryPositionAwareLayoutEngine<_SafeAreaIgnoringLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _SafeAreaIgnoringLayout and conformance _SafeAreaIgnoringLayout, (uint64_t)&type metadata for _SafeAreaIgnoringLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryPositionAwareLayoutEngine);
    double v9 = MEMORY[0x270FA5388](v8);
    (*(void (**)(double))(*(void *)v5 + 80))(v9);
    *(void *)&v21[0] = v5;
    *((void *)&v21[0] + 1) = v6 + 1;
    AGGraphSetOutputValue();
    return swift_release();
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  uint64_t result;
  _OWORD v20[10];
  _OWORD v21[2];
  uint64_t v22;

  uint64_t v22 = *MEMORY[0x263EF8340];
  Outputuint64_t Value = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v20);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for TracingLayoutEngineBox<LeafLayoutEngine<AnimatedShape<RoundedRectangle>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<AnimatedShape<RoundedRectangle>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TracingLayoutEngineBox);
      uint64_t v10 = swift_allocObject();
      int CurrentAttribute = AGGraphGetCurrentAttribute();
      BOOL v12 = CurrentAttribute == *MEMORY[0x263F288F8];
      if (CurrentAttribute == *MEMORY[0x263F288F8]) {
        int v13 = 0;
      }
      else {
        int v13 = CurrentAttribute;
      }
      *(_DWORD *)(v10 + 204) = v13;
      *(unsigned char *)(v10 + 208) = v12;
    }
    else
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LayoutEngineBox<LeafLayoutEngine<AnimatedShape<RoundedRectangle>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<AnimatedShape<RoundedRectangle>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LayoutEngineBox);
      uint64_t v10 = swift_allocObject();
    }
    long long v14 = v20[9];
    *(_OWORD *)(v10 + 144) = v20[8];
    *(_OWORD *)(v10 + 160) = v14;
    *(_OWORD *)(v10 + 176) = v21[0];
    *(_OWORD *)(v10 + 185) = *(_OWORD *)((char *)v21 + 9);
    long long v15 = v20[5];
    *(_OWORD *)(v10 + 80) = v20[4];
    *(_OWORD *)(v10 + 96) = v15;
    long long v16 = v20[7];
    *(_OWORD *)(v10 + 112) = v20[6];
    *(_OWORD *)(v10 + 128) = v16;
    long long v17 = v20[1];
    *(_OWORD *)(v10 + 16) = v20[0];
    *(_OWORD *)(v10 + 32) = v17;
    long long v18 = v20[3];
    *(_OWORD *)(v10 + 48) = v20[2];
    *(_OWORD *)(v10 + 64) = v18;
    AGGraphSetOutputValue();
    return swift_release();
  }
  uint64_t v5 = *OutputValue;
  uint64_t v6 = OutputValue[1];
  MEMORY[0x270FA5388](OutputValue);
  uint64_t v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_8;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for LeafLayoutEngine<AnimatedShape<RoundedRectangle>>();
    double v9 = MEMORY[0x270FA5388](v8);
    (*(void (**)(double))(*(void *)v5 + 80))(v9);
    *(void *)&v20[0] = v5;
    *((void *)&v20[0] + 1) = v6 + 1;
    AGGraphSetOutputValue();
    return swift_release();
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  uint64_t result;
  _OWORD v21[13];
  char v22;
  uint64_t v23;

  int v23 = *MEMORY[0x263EF8340];
  Outputuint64_t Value = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v21);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for TracingLayoutEngineBox<LeafLayoutEngine<_ShapeView<Rectangle, RadialGradient>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<_ShapeView<Rectangle, RadialGradient>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TracingLayoutEngineBox);
      uint64_t v10 = swift_allocObject();
      int CurrentAttribute = AGGraphGetCurrentAttribute();
      BOOL v12 = CurrentAttribute == *MEMORY[0x263F288F8];
      if (CurrentAttribute == *MEMORY[0x263F288F8]) {
        int v13 = 0;
      }
      else {
        int v13 = CurrentAttribute;
      }
      *(_DWORD *)(v10 + 228) = v13;
      *(unsigned char *)(v10 + 232) = v12;
    }
    else
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LayoutEngineBox<LeafLayoutEngine<_ShapeView<Rectangle, RadialGradient>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<_ShapeView<Rectangle, RadialGradient>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LayoutEngineBox);
      uint64_t v10 = swift_allocObject();
    }
    long long v14 = v21[11];
    *(_OWORD *)(v10 + 176) = v21[10];
    *(_OWORD *)(v10 + 192) = v14;
    *(_OWORD *)(v10 + 208) = v21[12];
    *(unsigned char *)(v10 + 224) = v22;
    long long v15 = v21[7];
    *(_OWORD *)(v10 + 112) = v21[6];
    *(_OWORD *)(v10 + 128) = v15;
    long long v16 = v21[9];
    *(_OWORD *)(v10 + 144) = v21[8];
    *(_OWORD *)(v10 + 160) = v16;
    long long v17 = v21[3];
    *(_OWORD *)(v10 + 48) = v21[2];
    *(_OWORD *)(v10 + 64) = v17;
    long long v18 = v21[5];
    *(_OWORD *)(v10 + 80) = v21[4];
    *(_OWORD *)(v10 + 96) = v18;
    long long v19 = v21[1];
    *(_OWORD *)(v10 + 16) = v21[0];
    *(_OWORD *)(v10 + 32) = v19;
    goto LABEL_16;
  }
  uint64_t v5 = *OutputValue;
  uint64_t v6 = OutputValue[1];
  MEMORY[0x270FA5388](OutputValue);
  uint64_t v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_8;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for LeafLayoutEngine<_ShapeView<Rectangle, RadialGradient>>(0);
    double v9 = MEMORY[0x270FA5388](v8);
    (*(void (**)(double))(*(void *)v5 + 80))(v9);
    *(void *)&v21[0] = v5;
    *((void *)&v21[0] + 1) = v6 + 1;
LABEL_16:
    AGGraphSetOutputValue();
    return swift_release();
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  uint64_t result;
  _OWORD v20[9];
  _OWORD v21[2];
  uint64_t v22;

  uint64_t v22 = *MEMORY[0x263EF8340];
  Outputuint64_t Value = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v20);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for TracingLayoutEngineBox<LeafLayoutEngine<_ShapeView<Rectangle, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<_ShapeView<Rectangle, ForegroundStyle>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TracingLayoutEngineBox);
      uint64_t v10 = swift_allocObject();
      int CurrentAttribute = AGGraphGetCurrentAttribute();
      BOOL v12 = CurrentAttribute == *MEMORY[0x263F288F8];
      if (CurrentAttribute == *MEMORY[0x263F288F8]) {
        int v13 = 0;
      }
      else {
        int v13 = CurrentAttribute;
      }
      *(_DWORD *)(v10 + 188) = v13;
      *(unsigned char *)(v10 + 192) = v12;
    }
    else
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LayoutEngineBox<LeafLayoutEngine<_ShapeView<Rectangle, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<_ShapeView<Rectangle, ForegroundStyle>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LayoutEngineBox);
      uint64_t v10 = swift_allocObject();
    }
    long long v14 = v21[0];
    *(_OWORD *)(v10 + 144) = v20[8];
    *(_OWORD *)(v10 + 160) = v14;
    *(_OWORD *)(v10 + 169) = *(_OWORD *)((char *)v21 + 9);
    long long v15 = v20[5];
    *(_OWORD *)(v10 + 80) = v20[4];
    *(_OWORD *)(v10 + 96) = v15;
    long long v16 = v20[7];
    *(_OWORD *)(v10 + 112) = v20[6];
    *(_OWORD *)(v10 + 128) = v16;
    long long v17 = v20[1];
    *(_OWORD *)(v10 + 16) = v20[0];
    *(_OWORD *)(v10 + 32) = v17;
    long long v18 = v20[3];
    *(_OWORD *)(v10 + 48) = v20[2];
    *(_OWORD *)(v10 + 64) = v18;
    AGGraphSetOutputValue();
    return swift_release();
  }
  uint64_t v5 = *OutputValue;
  uint64_t v6 = OutputValue[1];
  MEMORY[0x270FA5388](OutputValue);
  uint64_t v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_8;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for LeafLayoutEngine<_ShapeView<Rectangle, ForegroundStyle>>(0);
    double v9 = MEMORY[0x270FA5388](v8);
    (*(void (**)(double))(*(void *)v5 + 80))(v9);
    *(void *)&v20[0] = v5;
    *((void *)&v20[0] + 1) = v6 + 1;
    AGGraphSetOutputValue();
    return swift_release();
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  uint64_t result;
  _OWORD v21[11];
  _OWORD v22[2];
  uint64_t v23;

  int v23 = *MEMORY[0x263EF8340];
  Outputuint64_t Value = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v21);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for TracingLayoutEngineBox<LeafLayoutEngine<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TracingLayoutEngineBox);
      uint64_t v10 = swift_allocObject();
      int CurrentAttribute = AGGraphGetCurrentAttribute();
      BOOL v12 = CurrentAttribute == *MEMORY[0x263F288F8];
      if (CurrentAttribute == *MEMORY[0x263F288F8]) {
        int v13 = 0;
      }
      else {
        int v13 = CurrentAttribute;
      }
      *(_DWORD *)(v10 + 220) = v13;
      *(unsigned char *)(v10 + 224) = v12;
    }
    else
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LayoutEngineBox<LeafLayoutEngine<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LayoutEngineBox);
      uint64_t v10 = swift_allocObject();
    }
    long long v14 = v22[0];
    *(_OWORD *)(v10 + 176) = v21[10];
    *(_OWORD *)(v10 + 192) = v14;
    *(_OWORD *)(v10 + 201) = *(_OWORD *)((char *)v22 + 9);
    long long v15 = v21[7];
    *(_OWORD *)(v10 + 112) = v21[6];
    *(_OWORD *)(v10 + 128) = v15;
    long long v16 = v21[9];
    *(_OWORD *)(v10 + 144) = v21[8];
    *(_OWORD *)(v10 + 160) = v16;
    long long v17 = v21[3];
    *(_OWORD *)(v10 + 48) = v21[2];
    *(_OWORD *)(v10 + 64) = v17;
    long long v18 = v21[5];
    *(_OWORD *)(v10 + 80) = v21[4];
    *(_OWORD *)(v10 + 96) = v18;
    long long v19 = v21[1];
    *(_OWORD *)(v10 + 16) = v21[0];
    *(_OWORD *)(v10 + 32) = v19;
    goto LABEL_16;
  }
  uint64_t v5 = *OutputValue;
  uint64_t v6 = OutputValue[1];
  MEMORY[0x270FA5388](OutputValue);
  uint64_t v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_8;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for LeafLayoutEngine<_ShapeView<Rectangle.AsymmetricalInset, ForegroundStyle>>(0);
    double v9 = MEMORY[0x270FA5388](v8);
    (*(void (**)(double))(*(void *)v5 + 80))(v9);
    *(void *)&v21[0] = v5;
    *((void *)&v21[0] + 1) = v6 + 1;
LABEL_16:
    AGGraphSetOutputValue();
    return swift_release();
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  uint64_t result;
  _OWORD v20[11];
  char v21;
  uint64_t v22;

  uint64_t v22 = *MEMORY[0x263EF8340];
  Outputuint64_t Value = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v20);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for TracingLayoutEngineBox<LeafLayoutEngine<_ShapeView<CombinedContentShape, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<_ShapeView<CombinedContentShape, ForegroundStyle>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TracingLayoutEngineBox);
      uint64_t v10 = swift_allocObject();
      int CurrentAttribute = AGGraphGetCurrentAttribute();
      BOOL v12 = CurrentAttribute == *MEMORY[0x263F288F8];
      if (CurrentAttribute == *MEMORY[0x263F288F8]) {
        int v13 = 0;
      }
      else {
        int v13 = CurrentAttribute;
      }
      *(_DWORD *)(v10 + 196) = v13;
      *(unsigned char *)(v10 + 200) = v12;
    }
    else
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LayoutEngineBox<LeafLayoutEngine<_ShapeView<CombinedContentShape, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<_ShapeView<CombinedContentShape, ForegroundStyle>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LayoutEngineBox);
      uint64_t v10 = swift_allocObject();
    }
    long long v14 = v20[9];
    *(_OWORD *)(v10 + 144) = v20[8];
    *(_OWORD *)(v10 + 160) = v14;
    *(_OWORD *)(v10 + 176) = v20[10];
    *(unsigned char *)(v10 + 192) = v21;
    long long v15 = v20[5];
    *(_OWORD *)(v10 + 80) = v20[4];
    *(_OWORD *)(v10 + 96) = v15;
    long long v16 = v20[7];
    *(_OWORD *)(v10 + 112) = v20[6];
    *(_OWORD *)(v10 + 128) = v16;
    long long v17 = v20[1];
    *(_OWORD *)(v10 + 16) = v20[0];
    *(_OWORD *)(v10 + 32) = v17;
    long long v18 = v20[3];
    *(_OWORD *)(v10 + 48) = v20[2];
    *(_OWORD *)(v10 + 64) = v18;
    AGGraphSetOutputValue();
    return swift_release();
  }
  uint64_t v5 = *OutputValue;
  uint64_t v6 = OutputValue[1];
  MEMORY[0x270FA5388](OutputValue);
  uint64_t v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_8;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for LeafLayoutEngine<_ShapeView<CombinedContentShape, ForegroundStyle>>(0);
    double v9 = MEMORY[0x270FA5388](v8);
    (*(void (**)(double))(*(void *)v5 + 80))(v9);
    *(void *)&v20[0] = v5;
    *((void *)&v20[0] + 1) = v6 + 1;
    AGGraphSetOutputValue();
    return swift_release();
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t IsOwner;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  uint64_t result;
  _OWORD v21[12];
  char v22;
  uint64_t v23;

  int v23 = *MEMORY[0x263EF8340];
  Outputuint64_t Value = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v21);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for TracingLayoutEngineBox<InsetLayoutComputer.Engine>, (uint64_t)&type metadata for InsetLayoutComputer.Engine, (uint64_t)&protocol witness table for InsetLayoutComputer.Engine, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TracingLayoutEngineBox);
      uint64_t v10 = swift_allocObject();
      int CurrentAttribute = AGGraphGetCurrentAttribute();
      BOOL v12 = CurrentAttribute == *MEMORY[0x263F288F8];
      if (CurrentAttribute == *MEMORY[0x263F288F8]) {
        int v13 = 0;
      }
      else {
        int v13 = CurrentAttribute;
      }
      *(_DWORD *)(v10 + 212) = v13;
      *(unsigned char *)(v10 + 216) = v12;
    }
    else
    {
      type metadata accessor for LeafLayoutComputer<Image.Resolved>(0, &lazy cache variable for type metadata for LayoutEngineBox<InsetLayoutComputer.Engine>, (uint64_t)&type metadata for InsetLayoutComputer.Engine, (uint64_t)&protocol witness table for InsetLayoutComputer.Engine, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for LayoutEngineBox);
      uint64_t v10 = swift_allocObject();
    }
    long long v14 = v21[11];
    *(_OWORD *)(v10 + 176) = v21[10];
    *(_OWORD *)(v10 + 192) = v14;
    *(unsigned char *)(v10 + 208) = v22;
    long long v15 = v21[7];
    *(_OWORD *)(v10 + 112) = v21[6];
    *(_OWORD *)(v10 + 128) = v15;
    long long v16 = v21[9];
    *(_OWORD *)(v10 + 144) = v21[8];
    *(_OWORD *)(v10 + 160) = v16;
    long long v17 = v21[3];
    *(_OWORD *)(v10 + 48) = v21[2];
    *(_OWORD *)(v10 + 64) = v17;
    long long v18 = v21[5];
    *(_OWORD *)(v10 + 80) = v21[4];
    *(_OWORD *)(v10 + 96) = v18;
    long long v19 = v21[1];
    *(_OWORD *)(v10 + 16) = v21[0];
    *(_OWORD *)(v10 + 32) = v19;
    AGGraphSetOutputValue();
    return swift_release();
  }
  uint64_t v5 = *OutputValue;
  uint64_t v6 = OutputValue[1];
  MEMORY[0x270FA5388](OutputValue);
  uint64_t v7 = one-time initialization token for lockAssertionsAreEnabled;
  uint64_t IsOwner = swift_retain();
  if (v7 != -1) {
    uint64_t IsOwner = swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_8;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  uint64_t IsOwner = _MovableLockIsOwner(static Update._lock);
  if (IsOwner)
  {
LABEL_8:
    double v9 = MEMORY[0x270FA5388](IsOwner);
    (*(void (**)(double))(*(void *)v5 + 80))(v9);
    *(void *)&v21[0] = v5;
    *((void *)&v21[0] + 1) = v6 + 1;
    AGGraphSetOutputValue();
    return swift_release();
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  uint64_t result;
  _OWORD v20[11];
  char v21;
  uint64_t v22;

  uint64_t v22 = *MEMORY[0x263EF8340];
  Outputuint64_t Value = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v20);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for TracingLayoutEngineBox<LeafLayoutEngine<AnimatedShape<Rectangle._Inset>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<AnimatedShape<Rectangle._Inset>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TracingLayoutEngineBox);
      uint64_t v10 = swift_allocObject();
      int CurrentAttribute = AGGraphGetCurrentAttribute();
      BOOL v12 = CurrentAttribute == *MEMORY[0x263F288F8];
      if (CurrentAttribute == *MEMORY[0x263F288F8]) {
        int v13 = 0;
      }
      else {
        int v13 = CurrentAttribute;
      }
      *(_DWORD *)(v10 + 196) = v13;
      *(unsigned char *)(v10 + 200) = v12;
    }
    else
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LayoutEngineBox<LeafLayoutEngine<AnimatedShape<Rectangle._Inset>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<AnimatedShape<Rectangle._Inset>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LayoutEngineBox);
      uint64_t v10 = swift_allocObject();
    }
    long long v14 = v20[9];
    *(_OWORD *)(v10 + 144) = v20[8];
    *(_OWORD *)(v10 + 160) = v14;
    *(_OWORD *)(v10 + 176) = v20[10];
    *(unsigned char *)(v10 + 192) = v21;
    long long v15 = v20[5];
    *(_OWORD *)(v10 + 80) = v20[4];
    *(_OWORD *)(v10 + 96) = v15;
    long long v16 = v20[7];
    *(_OWORD *)(v10 + 112) = v20[6];
    *(_OWORD *)(v10 + 128) = v16;
    long long v17 = v20[1];
    *(_OWORD *)(v10 + 16) = v20[0];
    *(_OWORD *)(v10 + 32) = v17;
    long long v18 = v20[3];
    *(_OWORD *)(v10 + 48) = v20[2];
    *(_OWORD *)(v10 + 64) = v18;
    AGGraphSetOutputValue();
    return swift_release();
  }
  uint64_t v5 = *OutputValue;
  uint64_t v6 = OutputValue[1];
  MEMORY[0x270FA5388](OutputValue);
  uint64_t v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_8;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for LeafLayoutEngine<AnimatedShape<Rectangle._Inset>>();
    double v9 = MEMORY[0x270FA5388](v8);
    (*(void (**)(double))(*(void *)v5 + 80))(v9);
    *(void *)&v20[0] = v5;
    *((void *)&v20[0] + 1) = v6 + 1;
    AGGraphSetOutputValue();
    return swift_release();
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  uint64_t result;
  _OWORD v20[11];
  char v21;
  uint64_t v22;

  uint64_t v22 = *MEMORY[0x263EF8340];
  Outputuint64_t Value = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v20);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for TracingLayoutEngineBox<LeafLayoutEngine<AnimatedShape<AnyShape>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<AnimatedShape<AnyShape>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TracingLayoutEngineBox);
      uint64_t v10 = swift_allocObject();
      int CurrentAttribute = AGGraphGetCurrentAttribute();
      BOOL v12 = CurrentAttribute == *MEMORY[0x263F288F8];
      if (CurrentAttribute == *MEMORY[0x263F288F8]) {
        int v13 = 0;
      }
      else {
        int v13 = CurrentAttribute;
      }
      *(_DWORD *)(v10 + 196) = v13;
      *(unsigned char *)(v10 + 200) = v12;
    }
    else
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LayoutEngineBox<LeafLayoutEngine<AnimatedShape<AnyShape>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<AnimatedShape<AnyShape>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LayoutEngineBox);
      uint64_t v10 = swift_allocObject();
    }
    long long v14 = v20[9];
    *(_OWORD *)(v10 + 144) = v20[8];
    *(_OWORD *)(v10 + 160) = v14;
    *(_OWORD *)(v10 + 176) = v20[10];
    *(unsigned char *)(v10 + 192) = v21;
    long long v15 = v20[5];
    *(_OWORD *)(v10 + 80) = v20[4];
    *(_OWORD *)(v10 + 96) = v15;
    long long v16 = v20[7];
    *(_OWORD *)(v10 + 112) = v20[6];
    *(_OWORD *)(v10 + 128) = v16;
    long long v17 = v20[1];
    *(_OWORD *)(v10 + 16) = v20[0];
    *(_OWORD *)(v10 + 32) = v17;
    long long v18 = v20[3];
    *(_OWORD *)(v10 + 48) = v20[2];
    *(_OWORD *)(v10 + 64) = v18;
    AGGraphSetOutputValue();
    return swift_release();
  }
  uint64_t v5 = *OutputValue;
  uint64_t v6 = OutputValue[1];
  MEMORY[0x270FA5388](OutputValue);
  uint64_t v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_8;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for LeafLayoutEngine<AnimatedShape<AnyShape>>();
    double v9 = MEMORY[0x270FA5388](v8);
    (*(void (**)(double))(*(void *)v5 + 80))(v9);
    *(void *)&v20[0] = v5;
    *((void *)&v20[0] + 1) = v6 + 1;
    AGGraphSetOutputValue();
    return swift_release();
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  uint64_t result;
  _OWORD v20[9];
  _OWORD v21[2];
  uint64_t v22;

  uint64_t v22 = *MEMORY[0x263EF8340];
  Outputuint64_t Value = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v20);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for TracingLayoutEngineBox<LeafLayoutEngine<_ShapeView<Ellipse, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<_ShapeView<Ellipse, ForegroundStyle>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TracingLayoutEngineBox);
      uint64_t v10 = swift_allocObject();
      int CurrentAttribute = AGGraphGetCurrentAttribute();
      BOOL v12 = CurrentAttribute == *MEMORY[0x263F288F8];
      if (CurrentAttribute == *MEMORY[0x263F288F8]) {
        int v13 = 0;
      }
      else {
        int v13 = CurrentAttribute;
      }
      *(_DWORD *)(v10 + 188) = v13;
      *(unsigned char *)(v10 + 192) = v12;
    }
    else
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LayoutEngineBox<LeafLayoutEngine<_ShapeView<Ellipse, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<_ShapeView<Ellipse, ForegroundStyle>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LayoutEngineBox);
      uint64_t v10 = swift_allocObject();
    }
    long long v14 = v21[0];
    *(_OWORD *)(v10 + 144) = v20[8];
    *(_OWORD *)(v10 + 160) = v14;
    *(_OWORD *)(v10 + 169) = *(_OWORD *)((char *)v21 + 9);
    long long v15 = v20[5];
    *(_OWORD *)(v10 + 80) = v20[4];
    *(_OWORD *)(v10 + 96) = v15;
    long long v16 = v20[7];
    *(_OWORD *)(v10 + 112) = v20[6];
    *(_OWORD *)(v10 + 128) = v16;
    long long v17 = v20[1];
    *(_OWORD *)(v10 + 16) = v20[0];
    *(_OWORD *)(v10 + 32) = v17;
    long long v18 = v20[3];
    *(_OWORD *)(v10 + 48) = v20[2];
    *(_OWORD *)(v10 + 64) = v18;
    AGGraphSetOutputValue();
    return swift_release();
  }
  uint64_t v5 = *OutputValue;
  uint64_t v6 = OutputValue[1];
  MEMORY[0x270FA5388](OutputValue);
  uint64_t v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_8;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for LeafLayoutEngine<_ShapeView<Ellipse, ForegroundStyle>>(0);
    double v9 = MEMORY[0x270FA5388](v8);
    (*(void (**)(double))(*(void *)v5 + 80))(v9);
    *(void *)&v20[0] = v5;
    *((void *)&v20[0] + 1) = v6 + 1;
    AGGraphSetOutputValue();
    return swift_release();
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  uint64_t result;
  _OWORD v20[11];
  char v21;
  uint64_t v22;

  uint64_t v22 = *MEMORY[0x263EF8340];
  Outputuint64_t Value = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v20);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for TracingLayoutEngineBox<LeafLayoutEngine<AnimatedShape<Ellipse._Inset>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<AnimatedShape<Ellipse._Inset>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TracingLayoutEngineBox);
      uint64_t v10 = swift_allocObject();
      int CurrentAttribute = AGGraphGetCurrentAttribute();
      BOOL v12 = CurrentAttribute == *MEMORY[0x263F288F8];
      if (CurrentAttribute == *MEMORY[0x263F288F8]) {
        int v13 = 0;
      }
      else {
        int v13 = CurrentAttribute;
      }
      *(_DWORD *)(v10 + 196) = v13;
      *(unsigned char *)(v10 + 200) = v12;
    }
    else
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LayoutEngineBox<LeafLayoutEngine<AnimatedShape<Ellipse._Inset>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<AnimatedShape<Ellipse._Inset>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LayoutEngineBox);
      uint64_t v10 = swift_allocObject();
    }
    long long v14 = v20[9];
    *(_OWORD *)(v10 + 144) = v20[8];
    *(_OWORD *)(v10 + 160) = v14;
    *(_OWORD *)(v10 + 176) = v20[10];
    *(unsigned char *)(v10 + 192) = v21;
    long long v15 = v20[5];
    *(_OWORD *)(v10 + 80) = v20[4];
    *(_OWORD *)(v10 + 96) = v15;
    long long v16 = v20[7];
    *(_OWORD *)(v10 + 112) = v20[6];
    *(_OWORD *)(v10 + 128) = v16;
    long long v17 = v20[1];
    *(_OWORD *)(v10 + 16) = v20[0];
    *(_OWORD *)(v10 + 32) = v17;
    long long v18 = v20[3];
    *(_OWORD *)(v10 + 48) = v20[2];
    *(_OWORD *)(v10 + 64) = v18;
    AGGraphSetOutputValue();
    return swift_release();
  }
  uint64_t v5 = *OutputValue;
  uint64_t v6 = OutputValue[1];
  MEMORY[0x270FA5388](OutputValue);
  uint64_t v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_8;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for LeafLayoutEngine<AnimatedShape<Ellipse._Inset>>();
    double v9 = MEMORY[0x270FA5388](v8);
    (*(void (**)(double))(*(void *)v5 + 80))(v9);
    *(void *)&v20[0] = v5;
    *((void *)&v20[0] + 1) = v6 + 1;
    AGGraphSetOutputValue();
    return swift_release();
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  uint64_t result;
  _OWORD v20[9];
  _OWORD v21[2];
  uint64_t v22;

  uint64_t v22 = *MEMORY[0x263EF8340];
  Outputuint64_t Value = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v20);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for TracingLayoutEngineBox<LeafLayoutEngine<_ShapeView<Capsule, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<_ShapeView<Capsule, ForegroundStyle>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TracingLayoutEngineBox);
      uint64_t v10 = swift_allocObject();
      int CurrentAttribute = AGGraphGetCurrentAttribute();
      BOOL v12 = CurrentAttribute == *MEMORY[0x263F288F8];
      if (CurrentAttribute == *MEMORY[0x263F288F8]) {
        int v13 = 0;
      }
      else {
        int v13 = CurrentAttribute;
      }
      *(_DWORD *)(v10 + 188) = v13;
      *(unsigned char *)(v10 + 192) = v12;
    }
    else
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LayoutEngineBox<LeafLayoutEngine<_ShapeView<Capsule, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<_ShapeView<Capsule, ForegroundStyle>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LayoutEngineBox);
      uint64_t v10 = swift_allocObject();
    }
    long long v14 = v21[0];
    *(_OWORD *)(v10 + 144) = v20[8];
    *(_OWORD *)(v10 + 160) = v14;
    *(_OWORD *)(v10 + 169) = *(_OWORD *)((char *)v21 + 9);
    long long v15 = v20[5];
    *(_OWORD *)(v10 + 80) = v20[4];
    *(_OWORD *)(v10 + 96) = v15;
    long long v16 = v20[7];
    *(_OWORD *)(v10 + 112) = v20[6];
    *(_OWORD *)(v10 + 128) = v16;
    long long v17 = v20[1];
    *(_OWORD *)(v10 + 16) = v20[0];
    *(_OWORD *)(v10 + 32) = v17;
    long long v18 = v20[3];
    *(_OWORD *)(v10 + 48) = v20[2];
    *(_OWORD *)(v10 + 64) = v18;
    AGGraphSetOutputValue();
    return swift_release();
  }
  uint64_t v5 = *OutputValue;
  uint64_t v6 = OutputValue[1];
  MEMORY[0x270FA5388](OutputValue);
  uint64_t v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_8;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for LeafLayoutEngine<_ShapeView<Capsule, ForegroundStyle>>(0);
    double v9 = MEMORY[0x270FA5388](v8);
    (*(void (**)(double))(*(void *)v5 + 80))(v9);
    *(void *)&v20[0] = v5;
    *((void *)&v20[0] + 1) = v6 + 1;
    AGGraphSetOutputValue();
    return swift_release();
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  uint64_t result;
  _OWORD v20[11];
  char v21;
  uint64_t v22;

  uint64_t v22 = *MEMORY[0x263EF8340];
  Outputuint64_t Value = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v20);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for TracingLayoutEngineBox<LeafLayoutEngine<AnimatedShape<Capsule._Inset>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<AnimatedShape<Capsule._Inset>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TracingLayoutEngineBox);
      uint64_t v10 = swift_allocObject();
      int CurrentAttribute = AGGraphGetCurrentAttribute();
      BOOL v12 = CurrentAttribute == *MEMORY[0x263F288F8];
      if (CurrentAttribute == *MEMORY[0x263F288F8]) {
        int v13 = 0;
      }
      else {
        int v13 = CurrentAttribute;
      }
      *(_DWORD *)(v10 + 196) = v13;
      *(unsigned char *)(v10 + 200) = v12;
    }
    else
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LayoutEngineBox<LeafLayoutEngine<AnimatedShape<Capsule._Inset>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<AnimatedShape<Capsule._Inset>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LayoutEngineBox);
      uint64_t v10 = swift_allocObject();
    }
    long long v14 = v20[9];
    *(_OWORD *)(v10 + 144) = v20[8];
    *(_OWORD *)(v10 + 160) = v14;
    *(_OWORD *)(v10 + 176) = v20[10];
    *(unsigned char *)(v10 + 192) = v21;
    long long v15 = v20[5];
    *(_OWORD *)(v10 + 80) = v20[4];
    *(_OWORD *)(v10 + 96) = v15;
    long long v16 = v20[7];
    *(_OWORD *)(v10 + 112) = v20[6];
    *(_OWORD *)(v10 + 128) = v16;
    long long v17 = v20[1];
    *(_OWORD *)(v10 + 16) = v20[0];
    *(_OWORD *)(v10 + 32) = v17;
    long long v18 = v20[3];
    *(_OWORD *)(v10 + 48) = v20[2];
    *(_OWORD *)(v10 + 64) = v18;
    AGGraphSetOutputValue();
    return swift_release();
  }
  uint64_t v5 = *OutputValue;
  uint64_t v6 = OutputValue[1];
  MEMORY[0x270FA5388](OutputValue);
  uint64_t v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_8;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for LeafLayoutEngine<AnimatedShape<Capsule._Inset>>();
    double v9 = MEMORY[0x270FA5388](v8);
    (*(void (**)(double))(*(void *)v5 + 80))(v9);
    *(void *)&v20[0] = v5;
    *((void *)&v20[0] + 1) = v6 + 1;
    AGGraphSetOutputValue();
    return swift_release();
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  uint64_t result;
  _OWORD v20[9];
  _OWORD v21[2];
  uint64_t v22;

  uint64_t v22 = *MEMORY[0x263EF8340];
  Outputuint64_t Value = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v20);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for TracingLayoutEngineBox<LeafLayoutEngine<_ShapeView<Circle, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<_ShapeView<Circle, ForegroundStyle>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TracingLayoutEngineBox);
      uint64_t v10 = swift_allocObject();
      int CurrentAttribute = AGGraphGetCurrentAttribute();
      BOOL v12 = CurrentAttribute == *MEMORY[0x263F288F8];
      if (CurrentAttribute == *MEMORY[0x263F288F8]) {
        int v13 = 0;
      }
      else {
        int v13 = CurrentAttribute;
      }
      *(_DWORD *)(v10 + 188) = v13;
      *(unsigned char *)(v10 + 192) = v12;
    }
    else
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LayoutEngineBox<LeafLayoutEngine<_ShapeView<Circle, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<_ShapeView<Circle, ForegroundStyle>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LayoutEngineBox);
      uint64_t v10 = swift_allocObject();
    }
    long long v14 = v21[0];
    *(_OWORD *)(v10 + 144) = v20[8];
    *(_OWORD *)(v10 + 160) = v14;
    *(_OWORD *)(v10 + 169) = *(_OWORD *)((char *)v21 + 9);
    long long v15 = v20[5];
    *(_OWORD *)(v10 + 80) = v20[4];
    *(_OWORD *)(v10 + 96) = v15;
    long long v16 = v20[7];
    *(_OWORD *)(v10 + 112) = v20[6];
    *(_OWORD *)(v10 + 128) = v16;
    long long v17 = v20[1];
    *(_OWORD *)(v10 + 16) = v20[0];
    *(_OWORD *)(v10 + 32) = v17;
    long long v18 = v20[3];
    *(_OWORD *)(v10 + 48) = v20[2];
    *(_OWORD *)(v10 + 64) = v18;
    AGGraphSetOutputValue();
    return swift_release();
  }
  uint64_t v5 = *OutputValue;
  uint64_t v6 = OutputValue[1];
  MEMORY[0x270FA5388](OutputValue);
  uint64_t v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_8;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for LeafLayoutEngine<_ShapeView<Circle, ForegroundStyle>>(0);
    double v9 = MEMORY[0x270FA5388](v8);
    (*(void (**)(double))(*(void *)v5 + 80))(v9);
    *(void *)&v20[0] = v5;
    *((void *)&v20[0] + 1) = v6 + 1;
    AGGraphSetOutputValue();
    return swift_release();
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  uint64_t result;
  _OWORD v20[11];
  char v21;
  uint64_t v22;

  uint64_t v22 = *MEMORY[0x263EF8340];
  Outputuint64_t Value = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v20);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for TracingLayoutEngineBox<LeafLayoutEngine<AnimatedShape<Circle._Inset>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<AnimatedShape<Circle._Inset>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TracingLayoutEngineBox);
      uint64_t v10 = swift_allocObject();
      int CurrentAttribute = AGGraphGetCurrentAttribute();
      BOOL v12 = CurrentAttribute == *MEMORY[0x263F288F8];
      if (CurrentAttribute == *MEMORY[0x263F288F8]) {
        int v13 = 0;
      }
      else {
        int v13 = CurrentAttribute;
      }
      *(_DWORD *)(v10 + 196) = v13;
      *(unsigned char *)(v10 + 200) = v12;
    }
    else
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LayoutEngineBox<LeafLayoutEngine<AnimatedShape<Circle._Inset>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<AnimatedShape<Circle._Inset>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LayoutEngineBox);
      uint64_t v10 = swift_allocObject();
    }
    long long v14 = v20[9];
    *(_OWORD *)(v10 + 144) = v20[8];
    *(_OWORD *)(v10 + 160) = v14;
    *(_OWORD *)(v10 + 176) = v20[10];
    *(unsigned char *)(v10 + 192) = v21;
    long long v15 = v20[5];
    *(_OWORD *)(v10 + 80) = v20[4];
    *(_OWORD *)(v10 + 96) = v15;
    long long v16 = v20[7];
    *(_OWORD *)(v10 + 112) = v20[6];
    *(_OWORD *)(v10 + 128) = v16;
    long long v17 = v20[1];
    *(_OWORD *)(v10 + 16) = v20[0];
    *(_OWORD *)(v10 + 32) = v17;
    long long v18 = v20[3];
    *(_OWORD *)(v10 + 48) = v20[2];
    *(_OWORD *)(v10 + 64) = v18;
    AGGraphSetOutputValue();
    return swift_release();
  }
  uint64_t v5 = *OutputValue;
  uint64_t v6 = OutputValue[1];
  MEMORY[0x270FA5388](OutputValue);
  uint64_t v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_8;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for LeafLayoutEngine<AnimatedShape<Circle._Inset>>();
    double v9 = MEMORY[0x270FA5388](v8);
    (*(void (**)(double))(*(void *)v5 + 80))(v9);
    *(void *)&v20[0] = v5;
    *((void *)&v20[0] + 1) = v6 + 1;
    AGGraphSetOutputValue();
    return swift_release();
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  uint64_t result;
  _OWORD v21[11];
  _OWORD v22[2];
  uint64_t v23;

  int v23 = *MEMORY[0x263EF8340];
  Outputuint64_t Value = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v21);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for TracingLayoutEngineBox<LeafLayoutEngine<_ShapeView<Path, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<_ShapeView<Path, ForegroundStyle>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TracingLayoutEngineBox);
      uint64_t v10 = swift_allocObject();
      int CurrentAttribute = AGGraphGetCurrentAttribute();
      BOOL v12 = CurrentAttribute == *MEMORY[0x263F288F8];
      if (CurrentAttribute == *MEMORY[0x263F288F8]) {
        int v13 = 0;
      }
      else {
        int v13 = CurrentAttribute;
      }
      *(_DWORD *)(v10 + 220) = v13;
      *(unsigned char *)(v10 + 224) = v12;
    }
    else
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LayoutEngineBox<LeafLayoutEngine<_ShapeView<Path, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<_ShapeView<Path, ForegroundStyle>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LayoutEngineBox);
      uint64_t v10 = swift_allocObject();
    }
    long long v14 = v22[0];
    *(_OWORD *)(v10 + 176) = v21[10];
    *(_OWORD *)(v10 + 192) = v14;
    *(_OWORD *)(v10 + 201) = *(_OWORD *)((char *)v22 + 9);
    long long v15 = v21[7];
    *(_OWORD *)(v10 + 112) = v21[6];
    *(_OWORD *)(v10 + 128) = v15;
    long long v16 = v21[9];
    *(_OWORD *)(v10 + 144) = v21[8];
    *(_OWORD *)(v10 + 160) = v16;
    long long v17 = v21[3];
    *(_OWORD *)(v10 + 48) = v21[2];
    *(_OWORD *)(v10 + 64) = v17;
    long long v18 = v21[5];
    *(_OWORD *)(v10 + 80) = v21[4];
    *(_OWORD *)(v10 + 96) = v18;
    long long v19 = v21[1];
    *(_OWORD *)(v10 + 16) = v21[0];
    *(_OWORD *)(v10 + 32) = v19;
    goto LABEL_16;
  }
  uint64_t v5 = *OutputValue;
  uint64_t v6 = OutputValue[1];
  MEMORY[0x270FA5388](OutputValue);
  uint64_t v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_8;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for LeafLayoutEngine<_ShapeView<Path, ForegroundStyle>>(0);
    double v9 = MEMORY[0x270FA5388](v8);
    (*(void (**)(double))(*(void *)v5 + 80))(v9);
    *(void *)&v21[0] = v5;
    *((void *)&v21[0] + 1) = v6 + 1;
LABEL_16:
    AGGraphSetOutputValue();
    return swift_release();
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  uint64_t result;
  _OWORD v21[11];
  _OWORD v22[2];
  uint64_t v23;

  int v23 = *MEMORY[0x263EF8340];
  Outputuint64_t Value = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v21);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for TracingLayoutEngineBox<LeafLayoutEngine<AnimatedShape<UnevenRoundedRectangle>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<AnimatedShape<UnevenRoundedRectangle>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TracingLayoutEngineBox);
      uint64_t v10 = swift_allocObject();
      int CurrentAttribute = AGGraphGetCurrentAttribute();
      BOOL v12 = CurrentAttribute == *MEMORY[0x263F288F8];
      if (CurrentAttribute == *MEMORY[0x263F288F8]) {
        int v13 = 0;
      }
      else {
        int v13 = CurrentAttribute;
      }
      *(_DWORD *)(v10 + 220) = v13;
      *(unsigned char *)(v10 + 224) = v12;
    }
    else
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LayoutEngineBox<LeafLayoutEngine<AnimatedShape<UnevenRoundedRectangle>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<AnimatedShape<UnevenRoundedRectangle>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LayoutEngineBox);
      uint64_t v10 = swift_allocObject();
    }
    long long v14 = v22[0];
    *(_OWORD *)(v10 + 176) = v21[10];
    *(_OWORD *)(v10 + 192) = v14;
    *(_OWORD *)(v10 + 201) = *(_OWORD *)((char *)v22 + 9);
    long long v15 = v21[7];
    *(_OWORD *)(v10 + 112) = v21[6];
    *(_OWORD *)(v10 + 128) = v15;
    long long v16 = v21[9];
    *(_OWORD *)(v10 + 144) = v21[8];
    *(_OWORD *)(v10 + 160) = v16;
    long long v17 = v21[3];
    *(_OWORD *)(v10 + 48) = v21[2];
    *(_OWORD *)(v10 + 64) = v17;
    long long v18 = v21[5];
    *(_OWORD *)(v10 + 80) = v21[4];
    *(_OWORD *)(v10 + 96) = v18;
    long long v19 = v21[1];
    *(_OWORD *)(v10 + 16) = v21[0];
    *(_OWORD *)(v10 + 32) = v19;
    goto LABEL_16;
  }
  uint64_t v5 = *OutputValue;
  uint64_t v6 = OutputValue[1];
  MEMORY[0x270FA5388](OutputValue);
  uint64_t v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_8;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for LeafLayoutEngine<AnimatedShape<UnevenRoundedRectangle>>();
    double v9 = MEMORY[0x270FA5388](v8);
    (*(void (**)(double))(*(void *)v5 + 80))(v9);
    *(void *)&v21[0] = v5;
    *((void *)&v21[0] + 1) = v6 + 1;
LABEL_16:
    AGGraphSetOutputValue();
    return swift_release();
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  uint64_t result;
  _OWORD v21[12];
  _OWORD v22[2];
  uint64_t v23;

  int v23 = *MEMORY[0x263EF8340];
  Outputuint64_t Value = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v21);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for TracingLayoutEngineBox<LeafLayoutEngine<AnimatedShape<UnevenRoundedRectangle._Inset>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<AnimatedShape<UnevenRoundedRectangle._Inset>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TracingLayoutEngineBox);
      uint64_t v10 = swift_allocObject();
      int CurrentAttribute = AGGraphGetCurrentAttribute();
      BOOL v12 = CurrentAttribute == *MEMORY[0x263F288F8];
      if (CurrentAttribute == *MEMORY[0x263F288F8]) {
        int v13 = 0;
      }
      else {
        int v13 = CurrentAttribute;
      }
      *(_DWORD *)(v10 + 236) = v13;
      *(unsigned char *)(v10 + 240) = v12;
    }
    else
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LayoutEngineBox<LeafLayoutEngine<AnimatedShape<UnevenRoundedRectangle._Inset>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<AnimatedShape<UnevenRoundedRectangle._Inset>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LayoutEngineBox);
      uint64_t v10 = swift_allocObject();
    }
    long long v14 = v21[11];
    *(_OWORD *)(v10 + 176) = v21[10];
    *(_OWORD *)(v10 + 192) = v14;
    *(_OWORD *)(v10 + 208) = v22[0];
    *(_OWORD *)(v10 + 217) = *(_OWORD *)((char *)v22 + 9);
    long long v15 = v21[7];
    *(_OWORD *)(v10 + 112) = v21[6];
    *(_OWORD *)(v10 + 128) = v15;
    long long v16 = v21[9];
    *(_OWORD *)(v10 + 144) = v21[8];
    *(_OWORD *)(v10 + 160) = v16;
    long long v17 = v21[3];
    *(_OWORD *)(v10 + 48) = v21[2];
    *(_OWORD *)(v10 + 64) = v17;
    long long v18 = v21[5];
    *(_OWORD *)(v10 + 80) = v21[4];
    *(_OWORD *)(v10 + 96) = v18;
    long long v19 = v21[1];
    *(_OWORD *)(v10 + 16) = v21[0];
    *(_OWORD *)(v10 + 32) = v19;
    goto LABEL_16;
  }
  uint64_t v5 = *OutputValue;
  uint64_t v6 = OutputValue[1];
  MEMORY[0x270FA5388](OutputValue);
  uint64_t v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_8;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for LeafLayoutEngine<AnimatedShape<UnevenRoundedRectangle._Inset>>();
    double v9 = MEMORY[0x270FA5388](v8);
    (*(void (**)(double))(*(void *)v5 + 80))(v9);
    *(void *)&v21[0] = v5;
    *((void *)&v21[0] + 1) = v6 + 1;
LABEL_16:
    AGGraphSetOutputValue();
    return swift_release();
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  uint64_t result;
  _OWORD v20[9];
  _OWORD v21[2];
  uint64_t v22;

  uint64_t v22 = *MEMORY[0x263EF8340];
  Outputuint64_t Value = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v20);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for TracingLayoutEngineBox<LeafLayoutEngine<_ShapeView<ContainerRelativeShape, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<_ShapeView<ContainerRelativeShape, ForegroundStyle>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TracingLayoutEngineBox);
      uint64_t v10 = swift_allocObject();
      int CurrentAttribute = AGGraphGetCurrentAttribute();
      BOOL v12 = CurrentAttribute == *MEMORY[0x263F288F8];
      if (CurrentAttribute == *MEMORY[0x263F288F8]) {
        int v13 = 0;
      }
      else {
        int v13 = CurrentAttribute;
      }
      *(_DWORD *)(v10 + 188) = v13;
      *(unsigned char *)(v10 + 192) = v12;
    }
    else
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LayoutEngineBox<LeafLayoutEngine<_ShapeView<ContainerRelativeShape, ForegroundStyle>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<_ShapeView<ContainerRelativeShape, ForegroundStyle>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LayoutEngineBox);
      uint64_t v10 = swift_allocObject();
    }
    long long v14 = v21[0];
    *(_OWORD *)(v10 + 144) = v20[8];
    *(_OWORD *)(v10 + 160) = v14;
    *(_OWORD *)(v10 + 169) = *(_OWORD *)((char *)v21 + 9);
    long long v15 = v20[5];
    *(_OWORD *)(v10 + 80) = v20[4];
    *(_OWORD *)(v10 + 96) = v15;
    long long v16 = v20[7];
    *(_OWORD *)(v10 + 112) = v20[6];
    *(_OWORD *)(v10 + 128) = v16;
    long long v17 = v20[1];
    *(_OWORD *)(v10 + 16) = v20[0];
    *(_OWORD *)(v10 + 32) = v17;
    long long v18 = v20[3];
    *(_OWORD *)(v10 + 48) = v20[2];
    *(_OWORD *)(v10 + 64) = v18;
    AGGraphSetOutputValue();
    return swift_release();
  }
  uint64_t v5 = *OutputValue;
  uint64_t v6 = OutputValue[1];
  MEMORY[0x270FA5388](OutputValue);
  uint64_t v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_8;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for LeafLayoutEngine<_ShapeView<ContainerRelativeShape, ForegroundStyle>>(0);
    double v9 = MEMORY[0x270FA5388](v8);
    (*(void (**)(double))(*(void *)v5 + 80))(v9);
    *(void *)&v20[0] = v5;
    *((void *)&v20[0] + 1) = v6 + 1;
    AGGraphSetOutputValue();
    return swift_release();
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  uint64_t result;
  _OWORD v20[11];
  char v21;
  uint64_t v22;

  uint64_t v22 = *MEMORY[0x263EF8340];
  Outputuint64_t Value = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v20);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for TracingLayoutEngineBox<LeafLayoutEngine<AnimatedShape<ContainerRelativeShape._Inset>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<AnimatedShape<ContainerRelativeShape._Inset>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TracingLayoutEngineBox);
      uint64_t v10 = swift_allocObject();
      int CurrentAttribute = AGGraphGetCurrentAttribute();
      BOOL v12 = CurrentAttribute == *MEMORY[0x263F288F8];
      if (CurrentAttribute == *MEMORY[0x263F288F8]) {
        int v13 = 0;
      }
      else {
        int v13 = CurrentAttribute;
      }
      *(_DWORD *)(v10 + 196) = v13;
      *(unsigned char *)(v10 + 200) = v12;
    }
    else
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LayoutEngineBox<LeafLayoutEngine<AnimatedShape<ContainerRelativeShape._Inset>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<AnimatedShape<ContainerRelativeShape._Inset>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LayoutEngineBox);
      uint64_t v10 = swift_allocObject();
    }
    long long v14 = v20[9];
    *(_OWORD *)(v10 + 144) = v20[8];
    *(_OWORD *)(v10 + 160) = v14;
    *(_OWORD *)(v10 + 176) = v20[10];
    *(unsigned char *)(v10 + 192) = v21;
    long long v15 = v20[5];
    *(_OWORD *)(v10 + 80) = v20[4];
    *(_OWORD *)(v10 + 96) = v15;
    long long v16 = v20[7];
    *(_OWORD *)(v10 + 112) = v20[6];
    *(_OWORD *)(v10 + 128) = v16;
    long long v17 = v20[1];
    *(_OWORD *)(v10 + 16) = v20[0];
    *(_OWORD *)(v10 + 32) = v17;
    long long v18 = v20[3];
    *(_OWORD *)(v10 + 48) = v20[2];
    *(_OWORD *)(v10 + 64) = v18;
    AGGraphSetOutputValue();
    return swift_release();
  }
  uint64_t v5 = *OutputValue;
  uint64_t v6 = OutputValue[1];
  MEMORY[0x270FA5388](OutputValue);
  uint64_t v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_8;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for LeafLayoutEngine<AnimatedShape<ContainerRelativeShape._Inset>>();
    double v9 = MEMORY[0x270FA5388](v8);
    (*(void (**)(double))(*(void *)v5 + 80))(v9);
    *(void *)&v20[0] = v5;
    *((void *)&v20[0] + 1) = v6 + 1;
    AGGraphSetOutputValue();
    return swift_release();
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  uint64_t result;
  _OWORD v21[13];
  char v22;
  uint64_t v23;

  int v23 = *MEMORY[0x263EF8340];
  Outputuint64_t Value = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v21);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for TracingLayoutEngineBox<LeafLayoutEngine<_ShapeView<Rectangle, EllipticalGradient>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<_ShapeView<Rectangle, EllipticalGradient>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TracingLayoutEngineBox);
      uint64_t v10 = swift_allocObject();
      int CurrentAttribute = AGGraphGetCurrentAttribute();
      BOOL v12 = CurrentAttribute == *MEMORY[0x263F288F8];
      if (CurrentAttribute == *MEMORY[0x263F288F8]) {
        int v13 = 0;
      }
      else {
        int v13 = CurrentAttribute;
      }
      *(_DWORD *)(v10 + 228) = v13;
      *(unsigned char *)(v10 + 232) = v12;
    }
    else
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LayoutEngineBox<LeafLayoutEngine<_ShapeView<Rectangle, EllipticalGradient>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<_ShapeView<Rectangle, EllipticalGradient>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LayoutEngineBox);
      uint64_t v10 = swift_allocObject();
    }
    long long v14 = v21[11];
    *(_OWORD *)(v10 + 176) = v21[10];
    *(_OWORD *)(v10 + 192) = v14;
    *(_OWORD *)(v10 + 208) = v21[12];
    *(unsigned char *)(v10 + 224) = v22;
    long long v15 = v21[7];
    *(_OWORD *)(v10 + 112) = v21[6];
    *(_OWORD *)(v10 + 128) = v15;
    long long v16 = v21[9];
    *(_OWORD *)(v10 + 144) = v21[8];
    *(_OWORD *)(v10 + 160) = v16;
    long long v17 = v21[3];
    *(_OWORD *)(v10 + 48) = v21[2];
    *(_OWORD *)(v10 + 64) = v17;
    long long v18 = v21[5];
    *(_OWORD *)(v10 + 80) = v21[4];
    *(_OWORD *)(v10 + 96) = v18;
    long long v19 = v21[1];
    *(_OWORD *)(v10 + 16) = v21[0];
    *(_OWORD *)(v10 + 32) = v19;
    goto LABEL_16;
  }
  uint64_t v5 = *OutputValue;
  uint64_t v6 = OutputValue[1];
  MEMORY[0x270FA5388](OutputValue);
  uint64_t v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_8;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for LeafLayoutEngine<_ShapeView<Rectangle, EllipticalGradient>>(0);
    double v9 = MEMORY[0x270FA5388](v8);
    (*(void (**)(double))(*(void *)v5 + 80))(v9);
    *(void *)&v21[0] = v5;
    *((void *)&v21[0] + 1) = v6 + 1;
LABEL_16:
    AGGraphSetOutputValue();
    return swift_release();
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  uint64_t result;
  _OWORD v21[11];
  _OWORD v22[2];
  uint64_t v23;

  int v23 = *MEMORY[0x263EF8340];
  Outputuint64_t Value = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v21);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for TracingLayoutEngineBox<LeafLayoutEngine<AnimatedShape<RoundedRectangle._Inset>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<AnimatedShape<RoundedRectangle._Inset>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TracingLayoutEngineBox);
      uint64_t v10 = swift_allocObject();
      int CurrentAttribute = AGGraphGetCurrentAttribute();
      BOOL v12 = CurrentAttribute == *MEMORY[0x263F288F8];
      if (CurrentAttribute == *MEMORY[0x263F288F8]) {
        int v13 = 0;
      }
      else {
        int v13 = CurrentAttribute;
      }
      *(_DWORD *)(v10 + 220) = v13;
      *(unsigned char *)(v10 + 224) = v12;
    }
    else
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LayoutEngineBox<LeafLayoutEngine<AnimatedShape<RoundedRectangle._Inset>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<AnimatedShape<RoundedRectangle._Inset>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LayoutEngineBox);
      uint64_t v10 = swift_allocObject();
    }
    long long v14 = v22[0];
    *(_OWORD *)(v10 + 176) = v21[10];
    *(_OWORD *)(v10 + 192) = v14;
    *(_OWORD *)(v10 + 201) = *(_OWORD *)((char *)v22 + 9);
    long long v15 = v21[7];
    *(_OWORD *)(v10 + 112) = v21[6];
    *(_OWORD *)(v10 + 128) = v15;
    long long v16 = v21[9];
    *(_OWORD *)(v10 + 144) = v21[8];
    *(_OWORD *)(v10 + 160) = v16;
    long long v17 = v21[3];
    *(_OWORD *)(v10 + 48) = v21[2];
    *(_OWORD *)(v10 + 64) = v17;
    long long v18 = v21[5];
    *(_OWORD *)(v10 + 80) = v21[4];
    *(_OWORD *)(v10 + 96) = v18;
    long long v19 = v21[1];
    *(_OWORD *)(v10 + 16) = v21[0];
    *(_OWORD *)(v10 + 32) = v19;
    goto LABEL_16;
  }
  uint64_t v5 = *OutputValue;
  uint64_t v6 = OutputValue[1];
  MEMORY[0x270FA5388](OutputValue);
  uint64_t v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_8;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for LeafLayoutEngine<AnimatedShape<RoundedRectangle._Inset>>();
    double v9 = MEMORY[0x270FA5388](v8);
    (*(void (**)(double))(*(void *)v5 + 80))(v9);
    *(void *)&v21[0] = v5;
    *((void *)&v21[0] + 1) = v6 + 1;
LABEL_16:
    AGGraphSetOutputValue();
    return swift_release();
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  uint64_t result;
  _OWORD v21[13];
  char v22;
  uint64_t v23;

  int v23 = *MEMORY[0x263EF8340];
  Outputuint64_t Value = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v21);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for TracingLayoutEngineBox<LeafLayoutEngine<_ShapeView<Rectangle, AngularGradient>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<_ShapeView<Rectangle, AngularGradient>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TracingLayoutEngineBox);
      uint64_t v10 = swift_allocObject();
      int CurrentAttribute = AGGraphGetCurrentAttribute();
      BOOL v12 = CurrentAttribute == *MEMORY[0x263F288F8];
      if (CurrentAttribute == *MEMORY[0x263F288F8]) {
        int v13 = 0;
      }
      else {
        int v13 = CurrentAttribute;
      }
      *(_DWORD *)(v10 + 228) = v13;
      *(unsigned char *)(v10 + 232) = v12;
    }
    else
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LayoutEngineBox<LeafLayoutEngine<_ShapeView<Rectangle, AngularGradient>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<_ShapeView<Rectangle, AngularGradient>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LayoutEngineBox);
      uint64_t v10 = swift_allocObject();
    }
    long long v14 = v21[11];
    *(_OWORD *)(v10 + 176) = v21[10];
    *(_OWORD *)(v10 + 192) = v14;
    *(_OWORD *)(v10 + 208) = v21[12];
    *(unsigned char *)(v10 + 224) = v22;
    long long v15 = v21[7];
    *(_OWORD *)(v10 + 112) = v21[6];
    *(_OWORD *)(v10 + 128) = v15;
    long long v16 = v21[9];
    *(_OWORD *)(v10 + 144) = v21[8];
    *(_OWORD *)(v10 + 160) = v16;
    long long v17 = v21[3];
    *(_OWORD *)(v10 + 48) = v21[2];
    *(_OWORD *)(v10 + 64) = v17;
    long long v18 = v21[5];
    *(_OWORD *)(v10 + 80) = v21[4];
    *(_OWORD *)(v10 + 96) = v18;
    long long v19 = v21[1];
    *(_OWORD *)(v10 + 16) = v21[0];
    *(_OWORD *)(v10 + 32) = v19;
    goto LABEL_16;
  }
  uint64_t v5 = *OutputValue;
  uint64_t v6 = OutputValue[1];
  MEMORY[0x270FA5388](OutputValue);
  uint64_t v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_8;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for LeafLayoutEngine<_ShapeView<Rectangle, AngularGradient>>(0);
    double v9 = MEMORY[0x270FA5388](v8);
    (*(void (**)(double))(*(void *)v5 + 80))(v9);
    *(void *)&v21[0] = v5;
    *((void *)&v21[0] + 1) = v6 + 1;
LABEL_16:
    AGGraphSetOutputValue();
    return swift_release();
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *OutputValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  int CurrentAttribute;
  BOOL v12;
  int v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  uint64_t result;
  _OWORD v22[14];
  char v23;
  uint64_t v24;

  uint64_t v24 = *MEMORY[0x263EF8340];
  Outputuint64_t Value = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    a3(v22);
    swift_beginAccess();
    if (static LayoutTrace.recorder)
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for TracingLayoutEngineBox<LeafLayoutEngine<_ShapeView<Rectangle, MeshGradient>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<_ShapeView<Rectangle, MeshGradient>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TracingLayoutEngineBox);
      uint64_t v10 = swift_allocObject();
      int CurrentAttribute = AGGraphGetCurrentAttribute();
      BOOL v12 = CurrentAttribute == *MEMORY[0x263F288F8];
      if (CurrentAttribute == *MEMORY[0x263F288F8]) {
        int v13 = 0;
      }
      else {
        int v13 = CurrentAttribute;
      }
      *(_DWORD *)(v10 + 244) = v13;
      *(unsigned char *)(v10 + 248) = v12;
    }
    else
    {
      type metadata accessor for InterpolatedDisplayList<ResolvedStyledText>(0, &lazy cache variable for type metadata for LayoutEngineBox<LeafLayoutEngine<_ShapeView<Rectangle, MeshGradient>>>, (uint64_t (*)(uint64_t))type metadata accessor for LeafLayoutEngine<_ShapeView<Rectangle, MeshGradient>>, (uint64_t)&protocol witness table for LeafLayoutEngine<A>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LayoutEngineBox);
      uint64_t v10 = swift_allocObject();
    }
    long long v14 = v22[13];
    *(_OWORD *)(v10 + 208) = v22[12];
    *(_OWORD *)(v10 + 224) = v14;
    *(unsigned char *)(v10 + 240) = v23;
    long long v15 = v22[9];
    *(_OWORD *)(v10 + 144) = v22[8];
    *(_OWORD *)(v10 + 160) = v15;
    long long v16 = v22[11];
    *(_OWORD *)(v10 + 176) = v22[10];
    *(_OWORD *)(v10 + 192) = v16;
    long long v17 = v22[5];
    *(_OWORD *)(v10 + 80) = v22[4];
    *(_OWORD *)(v10 + 96) = v17;
    long long v18 = v22[7];
    *(_OWORD *)(v10 + 112) = v22[6];
    *(_OWORD *)(v10 + 128) = v18;
    long long v19 = v22[1];
    *(_OWORD *)(v10 + 16) = v22[0];
    *(_OWORD *)(v10 + 32) = v19;
    uint64_t v20 = v22[3];
    *(_OWORD *)(v10 + 48) = v22[2];
    *(_OWORD *)(v10 + 64) = v20;
    goto LABEL_16;
  }
  uint64_t v5 = *OutputValue;
  uint64_t v6 = OutputValue[1];
  MEMORY[0x270FA5388](OutputValue);
  uint64_t v7 = one-time initialization token for lockAssertionsAreEnabled;
  swift_retain();
  if (v7 != -1) {
    swift_once();
  }
  if (!lockAssertionsAreEnabled) {
    goto LABEL_8;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  if (_MovableLockIsOwner(static Update._lock))
  {
LABEL_8:
    type metadata accessor for LeafLayoutEngine<_ShapeView<Rectangle, MeshGradient>>(0);
    double v9 = MEMORY[0x270FA5388](v8);
    (*(void (**)(double))(*(void *)v5 + 80))(v9);
    *(void *)&v22[0] = v5;
    *((void *)&v22[0] + 1) = v6 + 1;
LABEL_16:
    AGGraphSetOutputValue();
    return swift_release();
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(long long **)(v1 + 16);
  long long v3 = *v2;
  long long v4 = v2[1];
  long long v5 = v2[3];
  v18[2] = v2[2];
  v18[3] = v5;
  v18[0] = v3;
  v18[1] = v4;
  long long v6 = v2[4];
  long long v7 = v2[5];
  long long v8 = v2[7];
  v18[6] = v2[6];
  v18[7] = v8;
  uint64_t v18[4] = v6;
  v18[5] = v7;
  long long v9 = v2[8];
  long long v10 = v2[9];
  long long v11 = v2[10];
  *(_DWORD *)&v19[15] = *(_DWORD *)((char *)v2 + 175);
  v18[9] = v10;
  *(_OWORD *)long long v19 = v11;
  v18[8] = v9;
  long long v12 = v2[9];
  *(_OWORD *)(a1 + 128) = v2[8];
  *(_OWORD *)(a1 + 144) = v12;
  *(_OWORD *)(a1 + 160) = v2[10];
  *(_DWORD *)(a1 + 175) = *(_DWORD *)((char *)v2 + 175);
  long long v13 = v2[5];
  *(_OWORD *)(a1 + 64) = v2[4];
  *(_OWORD *)(a1 + 80) = v13;
  long long v14 = v2[7];
  *(_OWORD *)(a1 + 96) = v2[6];
  *(_OWORD *)(a1 + 112) = v14;
  long long v15 = v2[1];
  *(_OWORD *)a1 = *v2;
  *(_OWORD *)(a1 + 16) = v15;
  long long v16 = v2[3];
  *(_OWORD *)(a1 + 32) = v2[2];
  *(_OWORD *)(a1 + 48) = v16;
  return outlined retain of Image.Resolved((uint64_t)v18);
}

{
  uint64_t v1;
  uint64_t v2;
  long long v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  long long v8;
  long long v9;
  long long v10;
  long long v11;
  long long v12;
  long long v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  _OWORD v20[13];
  char v21;

  uint64_t v2 = *(void *)(v1 + 16);
  long long v3 = *(_OWORD *)(v2 + 16);
  v20[0] = *(_OWORD *)v2;
  v20[1] = v3;
  long long v4 = *(_OWORD *)(v2 + 32);
  long long v5 = *(_OWORD *)(v2 + 48);
  long long v6 = *(_OWORD *)(v2 + 80);
  v20[4] = *(_OWORD *)(v2 + 64);
  void v20[5] = v6;
  v20[2] = v4;
  _OWORD v20[3] = v5;
  long long v7 = *(_OWORD *)(v2 + 96);
  long long v8 = *(_OWORD *)(v2 + 112);
  long long v9 = *(_OWORD *)(v2 + 144);
  v20[8] = *(_OWORD *)(v2 + 128);
  v20[9] = v9;
  v20[6] = v7;
  v20[7] = v8;
  long long v10 = *(_OWORD *)(v2 + 160);
  long long v11 = *(_OWORD *)(v2 + 176);
  long long v12 = *(_OWORD *)(v2 + 192);
  int v21 = *(unsigned char *)(v2 + 208);
  v20[11] = v11;
  unsigned __int8 v20[12] = v12;
  _OWORD v20[10] = v10;
  long long v13 = *(_OWORD *)(v2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(v2 + 160);
  *(_OWORD *)(a1 + 176) = v13;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(v2 + 192);
  *(unsigned char *)(a1 + 208) = *(unsigned char *)(v2 + 208);
  long long v14 = *(_OWORD *)(v2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(v2 + 96);
  *(_OWORD *)(a1 + 112) = v14;
  long long v15 = *(_OWORD *)(v2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(v2 + 128);
  *(_OWORD *)(a1 + 144) = v15;
  long long v16 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(a1 + 48) = v16;
  long long v17 = *(_OWORD *)(v2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(a1 + 80) = v17;
  long long v18 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v2;
  *(_OWORD *)(a1 + 16) = v18;
  return outlined retain of LinearGradient((uint64_t)v20);
}

{
  return partial apply for specialized closure #2 in StatefulRule<>.update<A>(to:)((uint64_t (*)(_OWORD *))outlined retain of RadialGradient, a1);
}

{
  uint64_t v1;
  long long *v2;
  long long v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  long long v8;
  long long v9;
  long long v10;
  long long v11;
  long long v12;
  long long v13;
  long long v14;
  long long v15;
  long long v16;
  _OWORD v18[11];
  char v19;

  uint64_t v2 = *(long long **)(v1 + 16);
  long long v3 = *v2;
  long long v4 = v2[1];
  long long v5 = v2[3];
  v18[2] = v2[2];
  v18[3] = v5;
  v18[0] = v3;
  v18[1] = v4;
  long long v6 = v2[4];
  long long v7 = v2[5];
  long long v8 = v2[7];
  v18[6] = v2[6];
  v18[7] = v8;
  uint64_t v18[4] = v6;
  v18[5] = v7;
  long long v9 = v2[8];
  long long v10 = v2[9];
  long long v11 = v2[10];
  long long v19 = *((unsigned char *)v2 + 176);
  v18[9] = v10;
  _OWORD v18[10] = v11;
  v18[8] = v9;
  long long v12 = v2[9];
  *(_OWORD *)(a1 + 128) = v2[8];
  *(_OWORD *)(a1 + 144) = v12;
  *(_OWORD *)(a1 + 160) = v2[10];
  *(unsigned char *)(a1 + 176) = *((unsigned char *)v2 + 176);
  long long v13 = v2[5];
  *(_OWORD *)(a1 + 64) = v2[4];
  *(_OWORD *)(a1 + 80) = v13;
  long long v14 = v2[7];
  *(_OWORD *)(a1 + 96) = v2[6];
  *(_OWORD *)(a1 + 112) = v14;
  long long v15 = v2[1];
  *(_OWORD *)a1 = *v2;
  *(_OWORD *)(a1 + 16) = v15;
  long long v16 = v2[3];
  *(_OWORD *)(a1 + 32) = v2[2];
  *(_OWORD *)(a1 + 48) = v16;
  return outlined retain of LinearGradient((uint64_t)v18);
}

{
  uint64_t v1;
  long long *v2;
  long long v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  long long v8;
  long long v9;
  long long v10;
  long long v11;
  long long v12;
  long long v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  _OWORD v22[14];
  char v23;

  uint64_t v2 = *(long long **)(v1 + 16);
  long long v3 = *v2;
  long long v4 = v2[2];
  v22[1] = v2[1];
  void v22[2] = v4;
  v22[0] = v3;
  long long v5 = v2[3];
  long long v6 = v2[4];
  long long v7 = v2[6];
  v22[5] = v2[5];
  void v22[6] = v7;
  _OWORD v22[3] = v5;
  v22[4] = v6;
  long long v8 = v2[7];
  long long v9 = v2[8];
  long long v10 = v2[10];
  v22[9] = v2[9];
  v22[10] = v10;
  uint64_t v22[7] = v8;
  void v22[8] = v9;
  long long v11 = v2[11];
  long long v12 = v2[12];
  long long v13 = v2[13];
  int v23 = *((unsigned char *)v2 + 224);
  v22[12] = v12;
  v22[13] = v13;
  v22[11] = v11;
  long long v14 = v2[13];
  *(_OWORD *)(a1 + 192) = v2[12];
  *(_OWORD *)(a1 + 208) = v14;
  *(unsigned char *)(a1 + 224) = *((unsigned char *)v2 + 224);
  long long v15 = v2[9];
  *(_OWORD *)(a1 + 128) = v2[8];
  *(_OWORD *)(a1 + 144) = v15;
  long long v16 = v2[11];
  *(_OWORD *)(a1 + 160) = v2[10];
  *(_OWORD *)(a1 + 176) = v16;
  long long v17 = v2[5];
  *(_OWORD *)(a1 + 64) = v2[4];
  *(_OWORD *)(a1 + 80) = v17;
  long long v18 = v2[7];
  *(_OWORD *)(a1 + 96) = v2[6];
  *(_OWORD *)(a1 + 112) = v18;
  long long v19 = v2[1];
  *(_OWORD *)a1 = *v2;
  *(_OWORD *)(a1 + 16) = v19;
  uint64_t v20 = v2[3];
  *(_OWORD *)(a1 + 32) = v2[2];
  *(_OWORD *)(a1 + 48) = v20;
  return outlined retain of LeafLayoutEngine<_ShapeView<Rectangle, MeshGradient>>((uint64_t)v22);
}

{
  uint64_t v1;
  long long *v2;
  long long v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  long long v8;
  long long v9;
  long long v10;
  long long v11;
  long long v12;
  long long v13;
  long long v14;
  long long v15;
  long long v16;
  _OWORD v18[11];
  char v19;

  uint64_t v2 = *(long long **)(v1 + 16);
  long long v3 = *v2;
  long long v4 = v2[1];
  long long v5 = v2[3];
  v18[2] = v2[2];
  v18[3] = v5;
  v18[0] = v3;
  v18[1] = v4;
  long long v6 = v2[4];
  long long v7 = v2[5];
  long long v8 = v2[7];
  v18[6] = v2[6];
  v18[7] = v8;
  uint64_t v18[4] = v6;
  v18[5] = v7;
  long long v9 = v2[8];
  long long v10 = v2[9];
  long long v11 = v2[10];
  long long v19 = *((unsigned char *)v2 + 176);
  v18[9] = v10;
  _OWORD v18[10] = v11;
  v18[8] = v9;
  long long v12 = v2[9];
  *(_OWORD *)(a1 + 128) = v2[8];
  *(_OWORD *)(a1 + 144) = v12;
  *(_OWORD *)(a1 + 160) = v2[10];
  *(unsigned char *)(a1 + 176) = *((unsigned char *)v2 + 176);
  long long v13 = v2[5];
  *(_OWORD *)(a1 + 64) = v2[4];
  *(_OWORD *)(a1 + 80) = v13;
  long long v14 = v2[7];
  *(_OWORD *)(a1 + 96) = v2[6];
  *(_OWORD *)(a1 + 112) = v14;
  long long v15 = v2[1];
  *(_OWORD *)a1 = *v2;
  *(_OWORD *)(a1 + 16) = v15;
  long long v16 = v2[3];
  *(_OWORD *)(a1 + 32) = v2[2];
  *(_OWORD *)(a1 + 48) = v16;
  return outlined retain of ViewTransform((uint64_t)v18);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  uint64_t v2 = *(void *)(v1 + 16);
  long long v3 = *(void *)(v2 + 8);
  *(_DWORD *)a1 = *(_DWORD *)v2;
  *(void *)(a1 + 8) = v3;
  return swift_retain();
}

BOOL static RoundedCornerStyle.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t static ViewInputsModifier._makeView(modifier:inputs:body:)(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v8 = *a1;
  int v9 = *((_DWORD *)a2 + 2);
  uint64_t v10 = a2[2];
  uint64_t v11 = a2[5];
  uint64_t v12 = a2[6];
  int v13 = *((_DWORD *)a2 + 20);
  uint64_t v27 = *a2;
  int v28 = v9;
  uint64_t v29 = v10;
  long long v30 = *(_OWORD *)(a2 + 3);
  uint64_t v31 = v11;
  uint64_t v32 = v12;
  long long v33 = *(_OWORD *)(a2 + 7);
  uint64_t v34 = a2[9];
  int v35 = v13;
  LODWORD(v18) = v8;
  long long v14 = *(void (**)(uint64_t *, uint64_t *, uint64_t, uint64_t))(a6 + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v14(&v18, &v27, a5, a6);
  uint64_t v18 = v27;
  int v19 = v28;
  uint64_t v20 = v29;
  long long v21 = v30;
  uint64_t v22 = v31;
  uint64_t v23 = v32;
  long long v24 = v33;
  uint64_t v25 = v34;
  int v26 = v35;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v15 = swift_bridgeObjectRetain();
  a3(v15, &v18);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t static _DefaultForegroundStyleModifier._makeViewInputs(modifier:inputs:)(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t), uint64_t a6, uint64_t a7)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  int v12 = *a1;
  uint64_t v13 = *(void *)(a2 + 16);
  swift_beginAccess();
  int v14 = *(_DWORD *)(v13 + 16);
  v23[0] = v12;
  v23[1] = v14;
  uint64_t v25 = a5(0, a3, a4);
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<HoverEffectContext>(0, &lazy cache variable for type metadata for Attribute<EnvironmentValues>, (uint64_t)&type metadata for EnvironmentValues, MEMORY[0x263F28898]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v23, a7, (uint64_t)v24, v25, MEMORY[0x263F8E628], v15, MEMORY[0x263F8E658], v16);
  uint64_t v17 = MEMORY[0x263F8EE78];
  unint64_t v18 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  type metadata accessor for Attribute<HoverEffectContext>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, (uint64_t)&type metadata for CachedEnvironment, (uint64_t (*)(void, uint64_t))type metadata accessor for MutableBox);
  uint64_t v19 = swift_allocObject();
  *(_DWORD *)(v19 + 16) = v22;
  *(void *)(v19 + 24) = v17;
  *(_OWORD *)(v19 + 32) = 0u;
  *(_OWORD *)(v19 + 48) = 0u;
  *(_OWORD *)(v19 + 64) = 0u;
  *(_WORD *)(v19 + 80) = 256;
  *(void *)(v19 + 88) = v18;
  uint64_t result = swift_release();
  *(void *)(a2 + 16) = v19;
  int v21 = *(_DWORD *)(a2 + 32);
  if ((v21 & 0x20) == 0) {
    *(_DWORD *)(a2 + 32) = v21 | 0x20;
  }
  return result;
}

uint64_t type metadata accessor for _ForegroundStyleModifier.ForegroundStyleEnvironment()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for static ViewInputsModifier._makeViewInputs(modifier:inputs:) in conformance _ForegroundStyleModifier<A>(int *a1, uint64_t a2, uint64_t a3)
{
  return static _ForegroundStyleModifier._makeViewInputs(modifier:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t static _ForegroundStyleModifier._makeViewInputs(modifier:inputs:)(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static _DefaultForegroundStyleModifier._makeViewInputs(modifier:inputs:)(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _ForegroundStyleModifier.ForegroundStyleEnvironment, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>.ForegroundStyleEnvironment, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply);
}

uint64_t protocol witness for static ViewInputsModifier._makeViewInputs(modifier:inputs:) in conformance _DefaultForegroundStyleModifier<A>(int *a1, uint64_t a2, uint64_t a3)
{
  return static _DefaultForegroundStyleModifier._makeViewInputs(modifier:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t static _DefaultForegroundStyleModifier._makeViewInputs(modifier:inputs:)(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static _DefaultForegroundStyleModifier._makeViewInputs(modifier:inputs:)(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _DefaultForegroundStyleModifier.DefaultForegroundStyleEnvironment, (uint64_t)&protocol conformance descriptor for _DefaultForegroundStyleModifier<A>.DefaultForegroundStyleEnvironment, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply);
}

uint64_t type metadata accessor for _DefaultForegroundStyleModifier.DefaultForegroundStyleEnvironment()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:)@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v8 = *a1;
  int v9 = *((_DWORD *)a1 + 2);
  uint64_t v10 = a1[2];
  long long v19 = *(_OWORD *)(a1 + 5);
  uint64_t v11 = a1[7];
  int v12 = *((_DWORD *)a1 + 16);
  uint64_t v13 = a1[9];
  char v14 = *((unsigned char *)a1 + 80);
  unint64_t v15 = AGCreateWeakAttribute();
  int v16 = v15;
  unint64_t v20 = HIDWORD(v15);
  uint64_t v26 = v8;
  int v27 = v9;
  uint64_t v28 = v10;
  long long v29 = *(_OWORD *)(a1 + 3);
  long long v30 = v19;
  uint64_t v31 = v11;
  int v32 = v12;
  uint64_t v33 = v13;
  char v34 = v14;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a4;
  *(void *)(v17 + 24) = a5;
  *(_DWORD *)(v17 + 32) = v16;
  *(_DWORD *)(v17 + 36) = v20;
  *(void *)(v17 + 40) = v24;
  *(void *)(v17 + 48) = a2;
  *(void *)(v17 + 56) = a3;
  swift_retain();
  static _ViewListOutputs.unaryViewList<A>(viewType:inputs:body:)((uint64_t)&v26, (uint64_t)partial apply for closure #1 in static _VariadicView_UnaryViewRoot._makeViewList(root:inputs:body:), v17, a6);

  return swift_release();
}

uint64_t static UnaryViewModifier._makeViewList(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7 = *(void *)a2;
  int v8 = *(_DWORD *)(a2 + 8);
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v10 = *(void *)(a2 + 40);
  int v11 = *(_DWORD *)(a2 + 64);
  uint64_t v12 = *(void *)(a2 + 72);
  char v13 = *(unsigned char *)(a2 + 80);
  int v24 = *a1;
  uint64_t v15 = v7;
  int v16 = v8;
  uint64_t v17 = v9;
  long long v18 = *(_OWORD *)(a2 + 24);
  uint64_t v19 = v10;
  long long v20 = *(_OWORD *)(a2 + 48);
  int v21 = v11;
  uint64_t v22 = v12;
  char v23 = v13;
  return static ViewModifier.makeUnaryViewList(modifier:inputs:body:)(&v15, a3, a4, a5, *(void *)(a6 + 8), a7);
}

uint64_t static ViewModifier.makeUnaryViewList(modifier:inputs:body:)@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v8 = *a1;
  int v9 = *((_DWORD *)a1 + 2);
  uint64_t v10 = a1[2];
  long long v19 = *(_OWORD *)(a1 + 5);
  uint64_t v11 = a1[7];
  int v12 = *((_DWORD *)a1 + 16);
  uint64_t v13 = a1[9];
  char v14 = *((unsigned char *)a1 + 80);
  unint64_t v15 = AGCreateWeakAttribute();
  int v16 = v15;
  unint64_t v20 = HIDWORD(v15);
  uint64_t v26 = v8;
  int v27 = v9;
  uint64_t v28 = v10;
  long long v29 = *(_OWORD *)(a1 + 3);
  long long v30 = v19;
  uint64_t v31 = v11;
  int v32 = v12;
  uint64_t v33 = v13;
  char v34 = v14;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a4;
  *(void *)(v17 + 24) = a5;
  *(_DWORD *)(v17 + 32) = v16;
  *(_DWORD *)(v17 + 36) = v20;
  *(void *)(v17 + 40) = v24;
  *(void *)(v17 + 48) = a2;
  *(void *)(v17 + 56) = a3;
  swift_retain();
  static _ViewListOutputs.unaryViewList<A>(viewType:inputs:body:)((uint64_t)&v26, (uint64_t)partial apply for closure #1 in static ViewModifier.makeUnaryViewList(modifier:inputs:body:), v17, a6);

  return swift_release();
}

uint64_t static _ViewListOutputs.unaryViewList<A>(viewType:inputs:body:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 16);
  unsigned int v6 = *(_DWORD *)(a1 + 28);
  unsigned int v20 = *(_DWORD *)(a1 + 24);
  int v21 = *(_DWORD *)(a1 + 8);
  unsigned int v18 = *(_DWORD *)(a1 + 36);
  unsigned int v19 = *(_DWORD *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v25 = *(void *)(a1 + 56);
  uint64_t v26 = *(void *)(a1 + 48);
  int v24 = *(_DWORD *)(a1 + 64);
  uint64_t v23 = *(void *)(a1 + 72);
  char v22 = *(unsigned char *)(a1 + 80);
  v44[0] = a2;
  v44[1] = a3;
  uint64_t v38 = v4;
  int v39 = v21;
  uint64_t v40 = v5;
  unint64_t v41 = __PAIR64__(v6, v20);
  uint64_t v42 = (_UNKNOWN **)__PAIR64__(v18, v19);
  uint64_t v43 = v7;
  uint64_t v8 = type metadata accessor for BodyUnaryViewGenerator();
  UnaryElements.init(body:baseInputs:)((uint64_t)v44, &v38, v8, (uint64_t)&v28);
  uint64_t v9 = v29;
  unsigned int v10 = v30;
  unint64_t v11 = v32;
  uint64_t v12 = v34;
  uint64_t v13 = type metadata accessor for UnaryElements();
  long long v16 = v28;
  long long v17 = v33;
  unint64_t v41 = v13;
  uint64_t v42 = &protocol witness table for UnaryElements<A>;
  uint64_t v14 = swift_allocObject();
  uint64_t v38 = v14;
  *(_OWORD *)(v14 + 16) = v16;
  *(void *)(v14 + 32) = v9;
  *(_DWORD *)(v14 + 40) = v10;
  *(void *)(v14 + 48) = v11;
  *(_OWORD *)(v14 + 56) = v17;
  *(void *)(v14 + 72) = v12;
  *(void *)&long long v28 = v4;
  DWORD2(v28) = v21;
  uint64_t v29 = v5;
  unsigned int v30 = v20;
  unsigned int v31 = v6;
  unint64_t v32 = __PAIR64__(v18, v19);
  *(void *)&long long v33 = v7;
  *((void *)&v33 + 1) = v26;
  uint64_t v34 = v25;
  int v35 = v24;
  uint64_t v36 = v23;
  char v37 = v22;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  static _ViewListOutputs.staticList(_:inputs:staticCount:)((uint64_t)&v38, (uint64_t *)&v28, 1, a4);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v38);
}

uint64_t type metadata accessor for BodyUnaryViewGenerator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t GraphHost.asyncTransaction<A>(_:id:invalidating:style:mayDeferUpdate:)(unint64_t a1, unsigned int *a2, unint64_t a3, char *a4, char a5)
{
  return specialized GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)(a1, *a2, a3, *a4, a5);
}

double static _UnaryViewAdaptor._makeView(view:inputs:)@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, double *a5@<X8>)
{
  void (*v15)(uint64_t *__return_ptr, int *, uint64_t *, uint64_t, uint64_t);
  double result;
  int v17;
  int ShouldRecordTree;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  uint64_t v66;

  uint64_t v66 = *MEMORY[0x263EF8340];
  int v7 = *a1;
  uint64_t v8 = *a2;
  int v9 = *((_DWORD *)a2 + 2);
  uint64_t v10 = a2[2];
  int v11 = *((_DWORD *)a2 + 6);
  long long v17 = *((_DWORD *)a2 + 7);
  uint64_t v26 = *((_DWORD *)a2 + 9);
  int v27 = *((_DWORD *)a2 + 8);
  uint64_t v12 = a2[5];
  uint64_t v13 = a2[6];
  int v24 = *((_DWORD *)a2 + 15);
  uint64_t v25 = *((_DWORD *)a2 + 14);
  char v22 = *((_DWORD *)a2 + 17);
  uint64_t v23 = *((_DWORD *)a2 + 16);
  unsigned int v20 = *((_DWORD *)a2 + 19);
  int v21 = *((_DWORD *)a2 + 18);
  unsigned int v19 = *((_DWORD *)a2 + 20);
  unint64_t v32 = a3;
  long long v33 = a4;
  LODWORD(v34) = v7;
  type metadata accessor for _UnaryViewAdaptor();
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static _UnaryViewAdaptor._makeView(view:inputs:), a3, &v50);
  int v14 = v50;
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  long long v50 = v8;
  int v52 = v10;
  int v51 = v9;
  uint64_t v53 = v11;
  int v54 = v17;
  uint64_t v56 = v26;
  int v57 = v12;
  int v58 = v13;
  long long v59 = v25;
  uint64_t v60 = v24;
  uint64_t v61 = v23;
  int v62 = v22;
  int v63 = v21;
  int v64 = v20;
  int v65 = v19;
  uint64_t v29 = v14;
  uint64_t v34 = v8;
  int v35 = v9;
  uint64_t v36 = v10;
  char v37 = v11;
  uint64_t v38 = v17;
  int v39 = 0;
  uint64_t v40 = v26;
  unint64_t v41 = v12;
  uint64_t v42 = v13;
  uint64_t v43 = v25;
  long long v44 = v24;
  uint64_t v45 = v23;
  unint64_t v46 = v22;
  uint64_t v47 = v21;
  int v48 = v20;
  uint64_t v49 = v19;
  unint64_t v15 = *(void (**)(uint64_t *__return_ptr, int *, uint64_t *, uint64_t, uint64_t))(a4 + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v15(&v30, &v29, &v34, a3, a4);
  uint64_t v55 = v27;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)((uint64_t)&v30, (uint64_t)&v50);
    AGSubgraphEndTreeElement();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(void *)a5 = v30;
  uint64_t result = v31;
  a5[1] = v31;
  return result;
}

uint64_t type metadata accessor for _UnaryViewAdaptor()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static Optional<A>._makeView(view:inputs:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  int v3 = *a1;
  uint64_t v4 = *(void *)a2;
  int v5 = *(_DWORD *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  int v7 = *(_DWORD *)(a2 + 24);
  int v8 = *(_DWORD *)(a2 + 28);
  int v9 = *(_DWORD *)(a2 + 32);
  int v17 = *(_DWORD *)(a2 + 36);
  uint64_t v18 = *(void *)(a2 + 40);
  uint64_t v19 = *(void *)(a2 + 48);
  int v20 = *(_DWORD *)(a2 + 56);
  int v21 = *(_DWORD *)(a2 + 60);
  int v22 = *(_DWORD *)(a2 + 64);
  int v23 = *(_DWORD *)(a2 + 68);
  int v24 = *(_DWORD *)(a2 + 72);
  int v25 = *(_DWORD *)(a2 + 76);
  int v26 = *(_DWORD *)(a2 + 80);
  if (one-time initialization token for introduced != -1) {
    swift_once();
  }
  unsigned int v10 = static _SemanticFeature_v2.introduced;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC == 1)
  {
    if ((dyld_program_sdk_at_least() & 1) == 0)
    {
LABEL_7:
      uint64_t v11 = type metadata accessor for Optional();
      static Optional.makeConditionalMetadata<A>(_:)((uint64_t)&type metadata for ViewDescriptor, (uint64_t)&protocol witness table for ViewDescriptor, &v48);
      unint64_t v12 = v48;
      unint64_t v45 = v48;
      long long v46 = v49;
      uint64_t v47 = v50;
      int v44 = v3;
      uint64_t v28 = v4;
      int v29 = v5;
      uint64_t v30 = v6;
      int v31 = v7;
      int v32 = v8;
      int v33 = v9;
      int v34 = v17;
      uint64_t v35 = v18;
      uint64_t v36 = v19;
      int v37 = v20;
      int v38 = v21;
      int v39 = v22;
      int v40 = v23;
      int v41 = v24;
      int v42 = v25;
      int v43 = v26;
      uint64_t WitnessTable = swift_getWitnessTable();
      static DynamicView.makeDynamicView(metadata:view:inputs:)((uint64_t)&v45, &v44, (uint64_t)&v28, v11, WitnessTable, a3);
      outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(v12);
      return swift_bridgeObjectRelease();
    }
  }
  else if (static Semantics.forced < v10)
  {
    goto LABEL_7;
  }
  uint64_t v15 = type metadata accessor for Optional();
  LODWORD(v48) = v3;
  uint64_t v28 = v4;
  int v29 = v5;
  uint64_t v30 = v6;
  int v31 = v7;
  int v32 = v8;
  int v33 = v9;
  int v34 = v17;
  uint64_t v35 = v18;
  uint64_t v36 = v19;
  int v37 = v20;
  int v38 = v21;
  int v39 = v22;
  int v40 = v23;
  int v41 = v24;
  int v42 = v25;
  int v43 = v26;
  uint64_t v16 = swift_getWitnessTable();
  return static View.makeImplicitRoot(view:inputs:)((int *)&v48, &v28, v15, v16, (uint64_t)a3);
}

uint64_t static _ConditionalContent<>._makeView(view:inputs:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  int v3 = *a1;
  uint64_t v4 = *(void *)a2;
  int v5 = *(_DWORD *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  int v8 = *(_DWORD *)(a2 + 24);
  int v7 = *(_DWORD *)(a2 + 28);
  int v16 = *(_DWORD *)(a2 + 32);
  int v17 = *(_DWORD *)(a2 + 36);
  uint64_t v18 = *(void *)(a2 + 40);
  uint64_t v19 = *(void *)(a2 + 48);
  int v20 = *(_DWORD *)(a2 + 56);
  int v21 = *(_DWORD *)(a2 + 60);
  int v22 = *(_DWORD *)(a2 + 64);
  int v23 = *(_DWORD *)(a2 + 68);
  int v24 = *(_DWORD *)(a2 + 72);
  int v25 = *(_DWORD *)(a2 + 76);
  int v26 = *(_DWORD *)(a2 + 80);
  if (one-time initialization token for introduced != -1) {
    swift_once();
  }
  unsigned int v9 = static _SemanticFeature_v2.introduced;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC == 1)
  {
    if ((dyld_program_sdk_at_least() & 1) == 0)
    {
LABEL_7:
      uint64_t v10 = type metadata accessor for _ConditionalContent();
      static _ConditionalContent.makeConditionalMetadata<A>(_:)((uint64_t)&type metadata for ViewDescriptor, (uint64_t)&protocol witness table for ViewDescriptor, &v48);
      unint64_t v11 = v48;
      long long v46 = v49;
      unint64_t v45 = v48;
      uint64_t v47 = v50;
      int v44 = v3;
      uint64_t v28 = v4;
      int v29 = v5;
      uint64_t v30 = v6;
      int v31 = v8;
      int v32 = v7;
      int v33 = v16;
      int v34 = v17;
      uint64_t v35 = v18;
      uint64_t v36 = v19;
      int v37 = v20;
      int v38 = v21;
      int v39 = v22;
      int v40 = v23;
      int v41 = v24;
      int v42 = v25;
      int v43 = v26;
      uint64_t WitnessTable = swift_getWitnessTable();
      static DynamicView.makeDynamicView(metadata:view:inputs:)((uint64_t)&v45, &v44, (uint64_t)&v28, v10, WitnessTable, a3);
      outlined consume of ConditionalTypeDescriptor<A>.Storage<A>(v11);
      return swift_bridgeObjectRelease();
    }
  }
  else if (static Semantics.forced < v9)
  {
    goto LABEL_7;
  }
  uint64_t v14 = type metadata accessor for _ConditionalContent();
  LODWORD(v48) = v3;
  uint64_t v28 = v4;
  int v29 = v5;
  uint64_t v30 = v6;
  int v31 = v8;
  int v32 = v7;
  int v33 = v16;
  int v34 = v17;
  uint64_t v35 = v18;
  uint64_t v36 = v19;
  int v37 = v20;
  int v38 = v21;
  int v39 = v22;
  int v40 = v23;
  int v41 = v24;
  int v42 = v25;
  int v43 = v26;
  uint64_t v15 = swift_getWitnessTable();
  return static View.makeImplicitRoot(view:inputs:)((int *)&v48, &v28, v14, v15, (uint64_t)a3);
}

uint64_t static View.makeImplicitRoot(view:inputs:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v8 = *a1;
  int v9 = *((_DWORD *)a2 + 2);
  uint64_t v10 = a2[2];
  int v11 = *((_DWORD *)a2 + 20);
  uint64_t v15 = *a2;
  int v16 = v9;
  uint64_t v17 = v10;
  long long v12 = *(_OWORD *)(a2 + 5);
  long long v18 = *(_OWORD *)(a2 + 3);
  long long v19 = v12;
  long long v20 = *(_OWORD *)(a2 + 7);
  uint64_t v21 = a2[9];
  int v22 = v11;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a3;
  *(void *)(v13 + 24) = a4;
  *(_DWORD *)(v13 + 32) = v8;
  static _ViewOutputs.multiView(inputs:body:)((uint64_t)&v15, (uint64_t)partial apply for closure #1 in static View.makeImplicitRoot(view:inputs:), v13, a5);

  return swift_release();
}

void protocol witness for static View._makeView(view:inputs:) in conformance EmptyView(uint64_t a1@<X8>)
{
  *(void *)a1 = MEMORY[0x263F8EE78];
  int v1 = *MEMORY[0x263F288F8];
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v1;
}

uint64_t View.backgroundPreferenceValue<A, B>(_:alignment:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return View.overlayPreferenceValue<A, B>(_:alignment:_:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, (uint64_t (*)(void, void *))type metadata accessor for _BackgroundPreferenceModifier);
}

uint64_t View.overlayPreferenceValue<A, B>(_:alignment:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return View.overlayPreferenceValue<A, B>(_:alignment:_:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, (uint64_t (*)(void, void *))type metadata accessor for _OverlayPreferenceModifier);
}

uint64_t View.overlayPreferenceValue<A, B>(_:alignment:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t (*a12)(void, void *))
{
  v16[0] = a4;
  v16[1] = a5;
  _OWORD v16[2] = a2;
  _OWORD v16[3] = a3;
  v15[0] = a7;
  v15[1] = a8;
  void v15[2] = a10;
  void v15[3] = a11;
  uint64_t v13 = a12(0, v15);
  return View.modifier<A>(_:)(v16, a6, v13);
}

uint64_t static _BackgroundPreferenceModifier._makeView(modifier:inputs:body:)@<X0>(uint64_t a1@<X1>, void (*a2)(unint64_t *__return_ptr, uint64_t, unint64_t *)@<X2>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, unint64_t a6@<X7>, uint64_t a7@<X8>)
{
  uint64_t v12 = *(void *)a1;
  int v13 = *(_DWORD *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  int v22 = *(_DWORD *)(a1 + 80);
  type metadata accessor for _OverlayPreferenceModifier();
  uint64_t v25 = a3;
  uint64_t v26 = a4;
  uint64_t v27 = a5;
  unint64_t v28 = a6;
  type metadata accessor for _BackgroundPreferenceModifier();
  unint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  long long v20 = *(_OWORD *)(a1 + 56);
  long long v21 = *(_OWORD *)(a1 + 40);
  uint64_t v17 = *(void *)(a1 + 72);
  unsigned int v18 = Attribute.unsafeBitCast<A>(to:)();
  uint64_t v25 = v12;
  LODWORD(v26) = v13;
  uint64_t v27 = v14;
  unint64_t v28 = v15;
  uint64_t v29 = v16;
  long long v30 = v21;
  long long v31 = v20;
  uint64_t v32 = v17;
  int v33 = v22;
  return makeSecondaryPreferenceView<A, B>(modifier:inputs:body:flipOrder:)(v18, (uint64_t)&v25, a2, 1, a3, a4, a5, a7, a6);
}

uint64_t type metadata accessor for _BackgroundPreferenceModifier()
{
  return swift_getGenericMetadata();
}

uint64_t static _BindingActionModifier._makeViewList(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(void)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int v40 = a3;
  uint64_t v41 = a4;
  uint64_t v39 = a6;
  uint64_t v59 = *MEMORY[0x263EF8340];
  uint64_t v9 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v9 - 8);
  int v11 = (char *)&v26 - v10;
  uint64_t v12 = type metadata accessor for BindingActionDispatcher();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  unint64_t v15 = (char *)&v26 - v14;
  int v16 = *a1;
  uint64_t v27 = *a2;
  int v28 = *((_DWORD *)a2 + 2);
  uint64_t v29 = a2[2];
  int v17 = *((_DWORD *)a2 + 6);
  int v30 = *((_DWORD *)a2 + 7);
  int v31 = *((_DWORD *)a2 + 8);
  int v32 = *((_DWORD *)a2 + 9);
  uint64_t v33 = a2[5];
  uint64_t v34 = a2[6];
  uint64_t v35 = a2[7];
  int v36 = *((_DWORD *)a2 + 16);
  uint64_t v37 = a2[9];
  int v38 = *((unsigned __int8 *)a2 + 80);
  if (one-time initialization token for v3 != -1) {
    swift_once();
  }
  unsigned int v18 = static Semantics.v3;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC == 1)
  {
    if ((dyld_program_sdk_at_least() & 1) == 0)
    {
LABEL_7:
      type metadata accessor for _BindingActionModifier();
      LODWORD(v42) = v16;
      uint64_t v45 = v27;
      int v46 = v28;
      uint64_t v48 = v29;
      int v49 = v17;
      int v50 = v30;
      int v51 = v31;
      int v52 = v32;
      uint64_t v53 = v33;
      uint64_t v54 = v34;
      uint64_t v55 = v35;
      int v56 = v36;
      uint64_t v57 = v37;
      char v58 = v38;
      return static ViewModifier.makeMultiViewList(modifier:inputs:body:)((int *)&v42, (uint64_t)&v45, v40);
    }
  }
  else if (static Semantics.forced < v18)
  {
    goto LABEL_7;
  }
  default argument 2 of BindingActionDispatcher.init(modifier:phase:cycleDetector:lastValue:lastAction:lastResetSeed:)((uint64_t)&v45);
  uint64_t v42 = v45;
  int v43 = v46;
  char v44 = v47;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 56))(v11, 1, 1, a5);
  uint64_t v20 = BindingActionDispatcher.init(modifier:phase:cycleDetector:lastValue:lastAction:lastResetSeed:)(v16, v17, (uint64_t)&v42, (uint64_t)v11, 0, 0, 0, (uint64_t)v15);
  MEMORY[0x270FA5388](v20);
  uint64_t v24 = v12;
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<()>();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v15, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)(&v26 - 4), v12, MEMORY[0x263F8E628], v21, MEMORY[0x263F8E658], v22);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  uint64_t v23 = AGGraphSetFlags();
  uint64_t v45 = v27;
  int v46 = v28;
  uint64_t v48 = v29;
  int v49 = v17;
  int v50 = v30;
  int v51 = v31;
  int v52 = v32;
  uint64_t v53 = v33;
  uint64_t v54 = v34;
  uint64_t v55 = v35;
  int v56 = v36;
  uint64_t v57 = v37;
  char v58 = v38;
  return ((uint64_t (*)(uint64_t, uint64_t *))v40)(v23, &v45);
}

uint64_t destroy for BindingActionDispatcher(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(v2 - 8);
  unint64_t v4 = (((((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + *(unsigned __int8 *)(v3 + 80) + 13) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, v2);
  if (!result) {
    uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t))(v3 + 8))(v4, v2);
  }
  unint64_t v6 = v4 + *(void *)(v3 + 64);
  if (!*(_DWORD *)(v3 + 84)) {
    ++v6;
  }
  if (*(void *)((v6 + 7) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFuLL)
  {
    return swift_release();
  }
  return result;
}

uint64_t BindingActionDispatcher.init(modifier:phase:cycleDetector:lastValue:lastAction:lastResetSeed:)@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X8>)
{
  int v13 = *(_DWORD *)(a3 + 8);
  char v14 = *(unsigned char *)(a3 + 12);
  *(_DWORD *)a8 = a1;
  *(_DWORD *)(a8 + 4) = a2;
  *(void *)(a8 + 8) = *(void *)a3;
  *(_DWORD *)(a8 + 16) = v13;
  *(unsigned char *)(a8 + 20) = v14;
  unint64_t v15 = (int *)type metadata accessor for BindingActionDispatcher();
  uint64_t v16 = a8 + v15[11];
  uint64_t v17 = type metadata accessor for Optional();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 32))(v16, a4, v17);
  long long v19 = (void *)(a8 + v15[12]);
  *long long v19 = a5;
  v19[1] = a6;
  *(_DWORD *)(a8 + v15[13]) = a7;
  return result;
}

uint64_t type metadata accessor for BindingActionDispatcher()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static _ValueActionModifier._makeViewList(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(void)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v34 = a3;
  uint64_t v35 = a4;
  uint64_t v33 = a5;
  uint64_t v50 = *MEMORY[0x263EF8340];
  uint64_t v7 = type metadata accessor for _ValueActionModifier();
  swift_getWitnessTable();
  uint64_t v8 = type metadata accessor for ValueActionDispatcher();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  int v11 = &v21[-v10];
  int v12 = *a1;
  uint64_t v13 = *a2;
  int v22 = *((_DWORD *)a2 + 2);
  uint64_t v23 = a2[2];
  int v14 = *((_DWORD *)a2 + 6);
  int v24 = *((_DWORD *)a2 + 7);
  int v25 = *((_DWORD *)a2 + 8);
  int v26 = *((_DWORD *)a2 + 9);
  uint64_t v27 = a2[5];
  uint64_t v28 = a2[6];
  uint64_t v29 = a2[7];
  int v30 = *((_DWORD *)a2 + 16);
  uint64_t v31 = a2[9];
  int v32 = *((unsigned __int8 *)a2 + 80);
  if (one-time initialization token for v3 != -1) {
    swift_once();
  }
  unsigned int v15 = static Semantics.v3;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC == 1)
  {
    if ((dyld_program_sdk_at_least() & 1) == 0)
    {
LABEL_7:
      int v36 = v12;
      uint64_t v37 = v13;
      int v38 = v22;
      uint64_t v39 = v23;
      int v40 = v14;
      int v41 = v24;
      int v42 = v25;
      int v43 = v26;
      uint64_t v44 = v27;
      uint64_t v45 = v28;
      uint64_t v46 = v29;
      int v47 = v30;
      uint64_t v48 = v31;
      char v49 = v32;
      return static ViewModifier.makeMultiViewList(modifier:inputs:body:)(&v36, (uint64_t)&v37, v34);
    }
  }
  else if (static Semantics.forced < v15)
  {
    goto LABEL_7;
  }
  uint64_t v17 = ValueActionDispatcher.init(modifier:phase:)(v12, v14, v7, v11);
  MEMORY[0x270FA5388](v17);
  *(void *)&v21[-16] = v8;
  *(void *)&v21[-8] = swift_getWitnessTable();
  type metadata accessor for Attribute<()>();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v11, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)&v21[-32], v8, MEMORY[0x263F8E628], v18, MEMORY[0x263F8E658], v19);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v20 = AGGraphSetFlags();
  uint64_t v37 = v13;
  int v38 = v22;
  uint64_t v39 = v23;
  int v40 = v14;
  int v41 = v24;
  int v42 = v25;
  int v43 = v26;
  uint64_t v44 = v27;
  uint64_t v45 = v28;
  uint64_t v46 = v29;
  int v47 = v30;
  uint64_t v48 = v31;
  char v49 = v32;
  return ((uint64_t (*)(uint64_t, uint64_t *))v34)(v20, &v37);
}

uint64_t View.onChange<A>(of:perform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v23 = a6;
  uint64_t v22 = a4;
  uint64_t v10 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](a1);
  int v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for _ValueActionModifier();
  uint64_t v14 = *(void *)(v13 - 8);
  double v15 = MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v21 - v16;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v12, a1, a5, v15);
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v17, v12, a5);
  uint64_t v18 = &v17[*(int *)(v13 + 36)];
  *(void *)uint64_t v18 = a2;
  *((void *)v18 + 1) = a3;
  View.modifier<A>(_:)(v17, v22, v13);
  uint64_t v19 = *(uint64_t (**)(char *, uint64_t))(v14 + 8);
  swift_retain();
  return v19(v17, v13);
}

uint64_t type metadata accessor for _ValueActionModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t makeSecondaryPreferenceView<A, B>(modifier:inputs:body:flipOrder:)@<X0>(unsigned int a1@<W0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr, uint64_t, unint64_t *)@<X2>, char a4@<W4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, unint64_t a9)
{
  uint64_t v104 = *MEMORY[0x263EF8340];
  unsigned int v12 = *(_DWORD *)(a2 + 8);
  unint64_t v13 = *(void *)(a2 + 16);
  unsigned int v14 = *(_DWORD *)(a2 + 24);
  unsigned int v15 = *(_DWORD *)(a2 + 28);
  unsigned int v16 = *(_DWORD *)(a2 + 32);
  unsigned int v17 = *(_DWORD *)(a2 + 36);
  uint64_t v19 = *(void *)(a2 + 40);
  uint64_t v18 = *(void *)(a2 + 48);
  unsigned int v20 = *(_DWORD *)(a2 + 56);
  unsigned int v21 = *(_DWORD *)(a2 + 60);
  unsigned int v23 = *(_DWORD *)(a2 + 64);
  unsigned int v22 = *(_DWORD *)(a2 + 68);
  unsigned int v24 = *(_DWORD *)(a2 + 72);
  unsigned int v25 = *(_DWORD *)(a2 + 76);
  int v26 = *(_DWORD *)(a2 + 80);
  unint64_t v91 = *(void *)a2;
  unint64_t v11 = v91;
  unsigned int v51 = v14;
  unsigned int v52 = v12;
  unsigned int v92 = v12;
  unint64_t v93 = v13;
  *(void *)&long long v94 = __PAIR64__(v15, v14);
  unsigned int v49 = v20;
  unsigned int v50 = v15;
  unsigned int v53 = v16;
  *((void *)&v94 + 1) = __PAIR64__(v17, v16);
  uint64_t v95 = v19;
  uint64_t v96 = v18;
  unsigned int v97 = v20;
  unsigned int v98 = v21;
  unsigned int v27 = v21;
  unsigned int v60 = v24;
  unsigned int v61 = v23;
  unsigned int v99 = v23;
  unsigned int v100 = v22;
  unsigned int v64 = v22;
  unsigned int v101 = v24;
  unsigned int v102 = v25;
  unsigned int v63 = v25;
  int v62 = v26;
  int v103 = v26;
  swift_retain();
  swift_retain();
  uint64_t v48 = v19;
  swift_bridgeObjectRetain();
  uint64_t v54 = v18;
  swift_bridgeObjectRetain();
  uint64_t v65 = a7;
  PreferencesInputs.add<A>(_:)(a5, a5, a7);
  unsigned int v55 = v17;
  if ((v17 & 0x100) != 0) {
    specialized _GraphInputs.pushScope<A>(id:)(0);
  }
  unint64_t v81 = v91;
  unsigned int v82 = v92;
  long long v85 = v94;
  unint64_t v84 = v93;
  uint64_t v86 = v95;
  uint64_t v87 = v96;
  *(void *)&long long v88 = __PAIR64__(v27, v97);
  *((void *)&v88 + 1) = __PAIR64__(v64, v61);
  unint64_t v89 = __PAIR64__(v63, v60);
  int v90 = v62;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v28 = swift_bridgeObjectRetain();
  a3(&v71, v28, &v81);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  unint64_t v59 = v71;
  unsigned int v30 = v72;
  unsigned int v29 = v73;
  closure #1 in makeSecondaryPreferenceView<A, B>(modifier:inputs:body:flipOrder:)(1, a5, a6, v65, a9);
  unsigned int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  uint64_t KeyPath = swift_getKeyPath();
  swift_beginAccess();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  unsigned int v33 = specialized CachedEnvironment.attribute<A>(keyPath:)(KeyPath);
  swift_endAccess();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  unsigned int v34 = *MEMORY[0x263F288F8];
  unint64_t v81 = __PAIR64__(v33, OffsetAttribute2);
  unsigned int v82 = v61;
  unsigned int v83 = v60;
  unint64_t v84 = __PAIR64__(v34, v29);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type SecondaryLayerGeometryQuery and conformance SecondaryLayerGeometryQuery();
  Attribute.init<A>(body:value:flags:update:)();
  unint64_t v81 = v11;
  unsigned int v82 = v52;
  unint64_t v84 = v13;
  *(void *)&long long v85 = __PAIR64__(v50, v51);
  HIDWORD(v85) = v55;
  uint64_t v86 = v48;
  uint64_t v87 = v54;
  *(void *)&long long v88 = __PAIR64__(v27, v49);
  HIDWORD(v88) = v64;
  HIDWORD(v89) = v63;
  int v90 = v62;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  DWORD2(v88) = AGGraphCreateOffsetAttribute2();
  LODWORD(v89) = AGGraphCreateOffsetAttribute2();
  DWORD2(v85) = v53 | 0x18;
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter((uint64_t *)&v81, (uint64_t)&type metadata for _ZStackLayout, (uint64_t)&protocol witness table for _ZStackLayout);
  swift_release();
  if ((v55 & 0x100) != 0) {
    specialized _GraphInputs.pushScope<A>(id:)((void *)1);
  }
  unint64_t v71 = v59;
  unsigned int v35 = v30;
  unsigned int v72 = v30;
  unsigned int v73 = v29;
  uint64_t v36 = _ViewOutputs.subscript.getter(a5, a5, v65);
  if ((v36 & 0x100000000) != 0) {
    uint64_t v37 = v34;
  }
  else {
    uint64_t v37 = v36;
  }
  unint64_t v71 = v81;
  unsigned int v72 = v82;
  unint64_t v74 = v84;
  long long v75 = v85;
  uint64_t v76 = v86;
  uint64_t v77 = v87;
  long long v78 = v88;
  unint64_t v79 = v89;
  int v80 = v90;
  uint64_t v38 = closure #2 in makeSecondaryPreferenceView<A, B>(modifier:inputs:body:flipOrder:)((uint64_t *)&v71, a1 | (unint64_t)(v37 << 32), a5, a6, v65, a9, (uint64_t)&v69);
  unint64_t v39 = v69;
  unsigned int v68 = v70;
  MEMORY[0x270FA5388](v38);
  MEMORY[0x270FA5388](v40);
  AGGraphMutateAttribute();
  if (a4)
  {
    unint64_t v41 = v39;
    unsigned int v42 = v68;
    unint64_t v39 = v59;
  }
  else
  {
    unint64_t v41 = v59;
    unsigned int v42 = v30;
    unsigned int v35 = v68;
  }
  *((void *)&v75 + 1) = MEMORY[0x263F8EE78];
  LODWORD(v76) = 0;
  unint64_t v71 = v41;
  unsigned int v72 = v42;
  unint64_t v74 = v39;
  LODWORD(v75) = v35;
  uint64_t v43 = *(void *)(v54 + 16);
  if (v43)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v44 = (uint64_t *)(v54 + 40);
    do
    {
      static PreferenceKey.visitKey<A>(_:)((uint64_t)&v71, *(v44 - 1), (uint64_t)&type metadata for PairwisePreferenceCombinerVisitor, *v44, (uint64_t)&protocol witness table for PairwisePreferenceCombinerVisitor);
      v44 += 2;
      --v43;
    }
    while (v43);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v45 = *((void *)&v75 + 1);
  int v46 = v76;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a8 = v45;
  *(_DWORD *)(a8 + 8) = v46;
  *(_DWORD *)(a8 + 12) = v29;
  return result;
}

uint64_t PreferenceBinder.init(modifier:keyValue:phase:cycleDetector:lastResetSeed:lastValue:)@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  int v8 = *(_DWORD *)(a4 + 8);
  char v9 = *(unsigned char *)(a4 + 12);
  *(_DWORD *)a7 = a1;
  *(_DWORD *)(a7 + 4) = a2;
  *(_DWORD *)(a7 + 8) = a3;
  *(void *)(a7 + 12) = *(void *)a4;
  *(_DWORD *)(a7 + 20) = v8;
  *(unsigned char *)(a7 + 24) = v9;
  *(_DWORD *)(a7 + 28) = a5;
  uint64_t v10 = a7 + *(int *)(type metadata accessor for PreferenceBinder() + 60);
  swift_getAssociatedTypeWitness();
  uint64_t v11 = type metadata accessor for Optional();
  unsigned int v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32);

  return v12(v10, a6, v11);
}

uint64_t static _PreferenceActionModifier._makeView(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  uint64_t v43 = a4;
  uint64_t v44 = a8;
  uint64_t v67 = *MEMORY[0x263EF8340];
  swift_getAssociatedTypeWitness();
  uint64_t v14 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v14 - 8);
  unint64_t v39 = (char *)&v37 - v15;
  uint64_t v41 = a7;
  uint64_t v16 = type metadata accessor for PreferenceBinder();
  uint64_t v42 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v40 = (uint64_t)&v37 - v17;
  int v38 = *a1;
  LODWORD(v17) = *((_DWORD *)a2 + 2);
  uint64_t v18 = a2[2];
  uint64_t v19 = a2[5];
  uint64_t v20 = a2[6];
  int v21 = *((_DWORD *)a2 + 20);
  uint64_t v58 = *a2;
  int v59 = v17;
  long long v37 = *(_OWORD *)(a2 + 3);
  long long v61 = v37;
  uint64_t v60 = v18;
  uint64_t v62 = v19;
  uint64_t v63 = v20;
  long long v64 = *(_OWORD *)(a2 + 7);
  uint64_t v65 = a2[9];
  int v66 = v21;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PreferencesInputs.add<A>(_:)(a5, a5, a6);
  uint64_t v48 = v58;
  int v49 = v59;
  uint64_t v51 = v60;
  long long v52 = v61;
  uint64_t v53 = v62;
  uint64_t v54 = v63;
  long long v55 = v64;
  uint64_t v56 = v65;
  int v57 = v66;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v22 = swift_bridgeObjectRetain();
  a3(&v45, v22, &v48);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  int v23 = v46;
  int v24 = v47;
  uint64_t v43 = v45;
  uint64_t v48 = v45;
  int v49 = v46;
  int v50 = v47;
  uint64_t v25 = _ViewOutputs.subscript.getter(a5, a5, a6);
  if ((v25 & 0x100000000) == 0)
  {
    int v26 = v25;
    default argument 2 of BindingActionDispatcher.init(modifier:phase:cycleDetector:lastValue:lastAction:lastResetSeed:)((uint64_t)&v48);
    uint64_t v45 = v48;
    int v46 = v49;
    LOBYTE(v47) = v50;
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v28 = (uint64_t)v39;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v39, 1, 1, AssociatedTypeWitness);
    uint64_t v29 = v40;
    uint64_t v30 = PreferenceBinder.init(modifier:keyValue:phase:cycleDetector:lastResetSeed:lastValue:)(v38, v26, v37, (uint64_t)&v45, 0, v28, v40);
    MEMORY[0x270FA5388](v30);
    uint64_t v35 = v16;
    uint64_t WitnessTable = swift_getWitnessTable();
    type metadata accessor for Attribute<()>();
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v29, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_8, (uint64_t)(&v37 - 2), v16, MEMORY[0x263F8E628], v31, MEMORY[0x263F8E658], v32);
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v29, v16);
    AGGraphGetFlags();
    AGGraphSetFlags();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = swift_release();
  unsigned int v34 = v44;
  *uint64_t v44 = v43;
  *((_DWORD *)v34 + 2) = v23;
  *((_DWORD *)v34 + 3) = v24;
  return result;
}

uint64_t type metadata accessor for PreferenceBinder()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t storeEnumTagSinglePayload for ConditionalMetadata(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t PreferencesInputs.add<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PreferenceKeys.add(_:)(a2, a3);
}

uint64_t default argument 2 of BindingActionDispatcher.init(modifier:phase:cycleDetector:lastValue:lastAction:lastResetSeed:)@<X0>(uint64_t a1@<X8>)
{
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x263F288F8])
  {
    id v2 = (id)AGSubgraphGetCurrent();
    if (!v2) {
      goto LABEL_8;
    }
    uint64_t v3 = v2;
    id v4 = (id)AGSubgraphGetGraph();
  }
  else
  {
    id v4 = (id)AGGraphGetAttributeGraph();
  }
  uint64_t Context = AGGraphGetContext();
  if (Context)
  {
    uint64_t v6 = Context;
    swift_retain();

    swift_beginAccess();
    int v7 = *(_DWORD *)(v6 + 64);
    uint64_t result = swift_release();
    *(_DWORD *)a1 = v7;
    *(void *)(a1 + 4) = 0xFFFFFFFFLL;
    *(unsigned char *)(a1 + 12) = 0;
    return result;
  }
  __break(1u);
LABEL_8:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t View.onPreferenceChange<A>(_:perform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v7[0] = a2;
  v7[1] = a3;
  uint64_t v5 = type metadata accessor for _PreferenceActionModifier();
  return View.modifier<A>(_:)(v7, a4, v5);
}

uint64_t type metadata accessor for _PreferenceActionModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static _ValueActionModifier._makeView(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t (*a7)(uint64_t, uint64_t, uint64_t)@<X6>, uint64_t a8@<X8>, uint64_t a9)
{
  uint64_t v32 = a4;
  unsigned int v33 = a3;
  uint64_t v31 = a8;
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v11 = a7(255, a5, a6);
  swift_getWitnessTable();
  uint64_t v12 = type metadata accessor for ValueActionDispatcher();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v27 - v14;
  int v16 = *a1;
  uint64_t v17 = *a2;
  int v18 = *((_DWORD *)a2 + 2);
  uint64_t v19 = a2[2];
  int v30 = *((_DWORD *)a2 + 20);
  long long v29 = *(_OWORD *)(a2 + 5);
  *((void *)&v20 + 1) = *((void *)&v29 + 1);
  *(void *)&long long v20 = a2[3];
  uint64_t v21 = a2[4];
  long long v27 = v20;
  long long v28 = *(_OWORD *)(a2 + 7);
  uint64_t v22 = a2[9];
  ValueActionDispatcher.init(modifier:phase:)(v16, v20, v11, (char *)&v27 - v14);
  uint64_t v35 = v12;
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<()>();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v15, a9, (uint64_t)v34, v12, MEMORY[0x263F8E628], v23, MEMORY[0x263F8E658], v24);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  uint64_t v25 = AGGraphSetFlags();
  uint64_t v37 = v17;
  int v38 = v18;
  uint64_t v39 = v19;
  uint64_t v40 = v27;
  uint64_t v41 = v21;
  long long v42 = v29;
  long long v43 = v28;
  uint64_t v44 = v22;
  int v45 = v30;
  return v33(v25, &v37);
}

uint64_t static _ValueActionModifier2._makeViewList(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v28 = a4;
  long long v29 = a3;
  uint64_t v27 = a5;
  uint64_t v43 = *MEMORY[0x263EF8340];
  uint64_t v7 = type metadata accessor for _ValueActionModifier2();
  swift_getWitnessTable();
  uint64_t v8 = type metadata accessor for ValueActionDispatcher();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v22 - v10;
  int v12 = *a1;
  uint64_t v13 = *a2;
  int v14 = *((_DWORD *)a2 + 2);
  uint64_t v15 = a2[2];
  long long v26 = *(_OWORD *)(a2 + 5);
  *((void *)&v16 + 1) = *((void *)&v26 + 1);
  uint64_t v25 = a2[7];
  int v24 = *((_DWORD *)a2 + 16);
  uint64_t v23 = a2[9];
  *(void *)&long long v16 = a2[3];
  uint64_t v17 = a2[4];
  long long v22 = v16;
  LOBYTE(a1) = *((unsigned char *)a2 + 80);
  ValueActionDispatcher.init(modifier:phase:)(v12, v16, v7, (char *)&v22 - v10);
  uint64_t v31 = v8;
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<()>();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v11, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v30, v8, MEMORY[0x263F8E628], v18, MEMORY[0x263F8E658], v19);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v20 = AGGraphSetFlags();
  uint64_t v33 = v13;
  int v34 = v14;
  uint64_t v35 = v15;
  uint64_t v36 = v22;
  uint64_t v37 = v17;
  long long v38 = v26;
  uint64_t v39 = v25;
  int v40 = v24;
  uint64_t v41 = v23;
  char v42 = (char)a1;
  return v29(v20, &v33);
}

void type metadata accessor for Attribute<()>()
{
  if (!lazy cache variable for type metadata for Attribute<()>)
  {
    unint64_t v0 = type metadata accessor for Attribute();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<()>);
    }
  }
}

uint64_t destroy for ValueTransactionSeed(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v2 - 8);
  unint64_t v3 = (((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + *(unsigned __int8 *)(v6 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(v3, 1, v2);
  if (!result)
  {
    uint64_t v5 = *(uint64_t (**)(unint64_t, uint64_t))(v6 + 8);
    return v5(v3, v2);
  }
  return result;
}

uint64_t ValueActionDispatcher.init(modifier:phase:)@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v8 = (int *)type metadata accessor for ValueActionDispatcher();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56))(&a4[v8[10]], 1, 1, a3);
  *(_DWORD *)&a4[v8[11]] = 0;
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x263F288F8])
  {
    id v9 = (id)AGSubgraphGetCurrent();
    if (!v9) {
      goto LABEL_8;
    }
    uint64_t v10 = v9;
    id v11 = (id)AGSubgraphGetGraph();
  }
  else
  {
    id v11 = (id)AGGraphGetAttributeGraph();
  }
  uint64_t Context = AGGraphGetContext();
  if (Context)
  {
    uint64_t v13 = Context;
    int v14 = &a4[v8[12]];
    swift_retain();

    swift_beginAccess();
    int v15 = *(_DWORD *)(v13 + 64);
    uint64_t result = swift_release();
    *(_DWORD *)int v14 = v15;
    *(void *)(v14 + 4) = 0xFFFFFFFFLL;
    v14[12] = 0;
    *(_DWORD *)a4 = a1;
    *((_DWORD *)a4 + 1) = a2;
    return result;
  }
  __break(1u);
LABEL_8:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Void __swiftcall ValueActionDispatcher.updateValue()()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  unsigned int v72 = (char *)v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  unsigned int v73 = (char *)v64 - v9;
  uint64_t v71 = v10;
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)v64 - v12;
  uint64_t v14 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v69 = v16;
  unsigned int v70 = (char *)v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)v64 - v18;
  int v20 = *(_DWORD *)AGGraphGetValue() >> 1;
  uint64_t v21 = *(int *)(v3 + 44);
  if (v20 != *(_DWORD *)(v2 + v21))
  {
    *(_DWORD *)(v2 + v21) = v20;
    uint64_t v22 = v4;
    uint64_t v23 = v2 + *(int *)(v3 + 40);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v23, v5);
    uint64_t v24 = v23;
    uint64_t v4 = v22;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(v24, 1, 1, v22);
    uint64_t v25 = v2 + *(int *)(v3 + 48);
    *(void *)(v25 + 4) = 0xFFFFFFFFLL;
    *(unsigned char *)(v25 + 12) = 0;
  }
  uint64_t Value = AGGraphGetValue();
  uint64_t v78 = v14;
  unsigned int v68 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v68(v19, Value, v4);
  uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  uint64_t v77 = (char *)(v2 + *(int *)(v3 + 40));
  uint64_t v67 = v27;
  uint64_t v28 = ((uint64_t (*)(char *))v27)(v13);
  MEMORY[0x270FA5388](v28);
  uint64_t v29 = *(void *)(v3 + 24);
  v64[-4] = v4;
  v64[-3] = v29;
  uint64_t v74 = v29;
  unint64_t v79 = v19;
  v64[-2] = v19;
  uint64_t v30 = v4;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in ValueActionDispatcher.updateValue(), (uint64_t)&v64[-6], MEMORY[0x263F8E628], MEMORY[0x263F8D4F8], v31, (uint64_t)v81);
  uint64_t v75 = v6;
  int v34 = *(void (**)(void, void))(v6 + 8);
  uint64_t v33 = v6 + 8;
  uint64_t v32 = v34;
  v34(v13, v5);
  if (v81[0])
  {
    v64[1] = v33;
    uint64_t v65 = v32;
    uint64_t v76 = v5;
    uint64_t v66 = v30;
    uint64_t v35 = v2 + *(int *)(v3 + 48);
    AGGraphClearUpdate();
    int v36 = *(_DWORD *)AGGraphGetValue();
    AGGraphSetUpdate();
    if (*(_DWORD *)(v35 + 4) == v36)
    {
      int v37 = *(_DWORD *)(v35 + 8);
      uint64_t v39 = v75;
      uint64_t v38 = v76;
      int v40 = v79;
      if (!v37 || (int v41 = v37 - 1, (*(_DWORD *)(v35 + 8) = v41) == 0))
      {
        uint64_t v5 = v38;
        uint64_t v32 = v65;
        uint64_t v30 = v66;
        if ((*(unsigned char *)(v35 + 12) & 1) == 0)
        {
          v80[0] = 0;
          v80[1] = 0xE000000000000000;
          _StringGuts.grow(_:)(44);
          v80[0] = 0;
          v80[1] = 0xE000000000000000;
          _StringGuts.grow(_:)(23);
          swift_bridgeObjectRelease();
          strcpy((char *)v80, "onChange(of: ");
          HIWORD(v80[1]) = -4864;
          swift_getAssociatedTypeWitness();
          v42._countAndFlagsBits = _typeName(_:qualified:)();
          String.append(_:)(v42);
          swift_bridgeObjectRelease();
          v43._countAndFlagsBits = 0x6E6F697463612029;
          v43._object = (void *)0xE800000000000000;
          String.append(_:)(v43);
          swift_bridgeObjectRelease();
          v44._object = (void *)0x800000024621E040;
          v44._countAndFlagsBits = 0xD00000000000002ALL;
          String.append(_:)(v44);
          specialized static Log.externalWarning(_:)(v80[0], v80[1]);
          swift_bridgeObjectRelease();
          *(unsigned char *)(v35 + 12) = 1;
        }
        goto LABEL_17;
      }
    }
    else
    {
      *(_DWORD *)(v35 + 4) = v36;
      *(_DWORD *)(v35 + 8) = 2;
      uint64_t v39 = v75;
      uint64_t v38 = v76;
      int v40 = v79;
    }
    int v45 = v73;
    uint64_t v46 = v67;
    v67(v73, v77, v38);
    int v47 = v70;
    uint64_t v48 = v66;
    v68(v70, (uint64_t)v40, v66);
    int v49 = v72;
    v46(v72, v45, v76);
    uint64_t v50 = v78;
    unint64_t v51 = (*(unsigned __int8 *)(v78 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v78 + 80);
    unint64_t v52 = (v69 + *(unsigned __int8 *)(v39 + 80) + v51) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
    uint64_t v53 = swift_allocObject();
    uint64_t v54 = v74;
    *(void *)(v53 + 16) = v48;
    *(void *)(v53 + 24) = v54;
    (*(void (**)(unint64_t, char *, uint64_t))(v50 + 32))(v53 + v51, v47, v48);
    (*(void (**)(unint64_t, char *, uint64_t))(v39 + 32))(v53 + v52, v49, v76);
    specialized static Update.begin()();
    uint64_t v55 = swift_allocObject();
    *(void *)(v55 + 16) = partial apply for closure #2 in ValueActionDispatcher.updateValue();
    *(void *)(v55 + 24) = v53;
    uint64_t v56 = one-time initialization token for actions;
    swift_retain();
    if (v56 != -1) {
      swift_once();
    }
    int v57 = static Update.actions;
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v32 = v65;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      int v57 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v57[2] + 1, 1, v57);
    }
    unint64_t v60 = v57[2];
    unint64_t v59 = v57[3];
    if (v60 >= v59 >> 1) {
      int v57 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v59 > 1), v60 + 1, 1, v57);
    }
    void v57[2] = v60 + 1;
    long long v61 = &v57[2 * v60];
    v61[4] = partial apply for thunk for @escaping @callee_guaranteed () -> ();
    v61[5] = v55;
    static Update.actions = v57;
    swift_bridgeObjectRelease();
    static Update.end()();
    swift_release();
    uint64_t v5 = v76;
    v32(v45, v76);
    uint64_t v30 = v66;
  }
LABEL_17:
  uint64_t v62 = v77;
  v32(v77, v5);
  uint64_t v63 = v78;
  (*(void (**)(char *, char *, uint64_t))(v78 + 32))(v62, v79, v30);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v63 + 56))(v62, 0, 1, v30);
}

void storeEnumTagSinglePayload for _ValueActionModifier(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 <= v8)
  {
    switch(v14)
    {
      case 1:
        a1[v10] = 0;
        if (a2) {
          goto LABEL_33;
        }
        break;
      case 2:
        *(_WORD *)&a1[v10] = 0;
        if (a2) {
          goto LABEL_33;
        }
        break;
      case 3:
LABEL_44:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v10] = 0;
        goto LABEL_32;
      default:
LABEL_32:
        if (a2)
        {
LABEL_33:
          if (v7 < 0x7FFFFFFF)
          {
            uint64_t v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
            if ((a2 & 0x80000000) != 0)
            {
              uint64_t v19 = a2 ^ 0x80000000;
              v18[1] = 0;
            }
            else
            {
              uint64_t v19 = a2 - 1;
            }
            *uint64_t v18 = v19;
          }
          else
          {
            uint64_t v17 = *(void (**)(void))(v6 + 56);
            v17();
          }
        }
        break;
    }
  }
  else
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        break;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        break;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        break;
      default:
        return;
    }
  }
}

uint64_t type metadata accessor for ValueActionDispatcher()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t initializeWithTake for _OverlayModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  *(_OWORD *)((*(void *)(v5 + 32) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(void *)(v5 + 32) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t destroy for PreferenceBinder(uint64_t a1)
{
  unint64_t v1 = (((((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 23) & 0xFFFFFFFFFFFFFFFCLL;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v4 = (v1 + *(unsigned __int8 *)(v3 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = v3;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, AssociatedTypeWitness);
  if (!result)
  {
    uint64_t v6 = *(uint64_t (**)(unint64_t, uint64_t))(v7 + 8);
    return v6(v4, AssociatedTypeWitness);
  }
  return result;
}

uint64_t closure #2 in makeSecondaryPreferenceView<A, B>(modifier:inputs:body:flipOrder:)@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, unint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  uint64_t v8 = *a1;
  int v9 = *((_DWORD *)a1 + 2);
  uint64_t v10 = a1[2];
  unsigned int v11 = *((_DWORD *)a1 + 6);
  unsigned int v12 = *((_DWORD *)a1 + 7);
  int v28 = *((_DWORD *)a1 + 9);
  int v29 = *((_DWORD *)a1 + 8);
  uint64_t v13 = a1[5];
  uint64_t v14 = a1[6];
  int v26 = *((_DWORD *)a1 + 15);
  int v27 = *((_DWORD *)a1 + 14);
  int v24 = *((_DWORD *)a1 + 17);
  int v25 = *((_DWORD *)a1 + 16);
  int v22 = *((_DWORD *)a1 + 19);
  int v23 = *((_DWORD *)a1 + 18);
  int v21 = *((_DWORD *)a1 + 20);
  uint64_t v34 = a2;
  uint64_t v50 = a3;
  uint64_t v51 = a4;
  uint64_t v52 = a5;
  unint64_t v53 = a6;
  uint64_t v15 = type metadata accessor for SecondaryChild();
  uint64_t WitnessTable = swift_getWitnessTable();
  _GraphValue.init<A>(_:)((uint64_t)&v34, a4, v15, WitnessTable, &v33);
  int v17 = v33;
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  uint64_t v50 = v8;
  LODWORD(v51) = v9;
  uint64_t v52 = v10;
  unint64_t v53 = __PAIR64__(v12, v11);
  int v55 = v28;
  uint64_t v56 = v13;
  uint64_t v57 = v14;
  int v58 = v27;
  int v59 = v26;
  int v60 = v25;
  int v61 = v24;
  int v62 = v23;
  int v63 = v22;
  int v64 = v21;
  int v32 = v17;
  uint64_t v34 = v8;
  int v35 = v9;
  uint64_t v36 = v10;
  unsigned int v37 = v11;
  unsigned int v38 = v12;
  int v39 = 0;
  int v40 = v28;
  uint64_t v41 = v13;
  uint64_t v42 = v14;
  int v43 = v27;
  int v44 = v26;
  int v45 = v25;
  int v46 = v24;
  int v47 = v23;
  int v48 = v22;
  int v49 = v21;
  uint64_t v19 = *(void (**)(int *, uint64_t *, uint64_t, unint64_t))(a6 + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v19(&v32, &v34, a4, a6);
  int v54 = v29;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(a7, (uint64_t)&v50);
    AGSubgraphEndTreeElement();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance <A> A?@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return static Optional<A>._makeView(view:inputs:)(a1, a2, a3);
}

uint64_t closure #1 in makeSecondaryPreferenceView<A, B>(modifier:inputs:body:flipOrder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = a2;
  uint64_t v11 = a3;
  uint64_t v5 = a1 + 16;
  uint64_t v12 = a4;
  uint64_t v13 = a5;
  v9[2] = type metadata accessor for _OverlayPreferenceModifier();
  uint64_t v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v5, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_1, (uint64_t)v9, (uint64_t)&type metadata for Alignment, MEMORY[0x263F8E628], v6, MEMORY[0x263F8E658], v7);
  return v10;
}

uint64_t closure #1 in SecondaryChild.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  v10[2] = a2;
  v10[3] = a3;
  v10[4] = a4;
  v10[5] = a5;
  v10[6] = a1;
  v10[8] = a2;
  v10[9] = a3;
  v10[10] = a4;
  v10[11] = a5;
  uint64_t v8 = type metadata accessor for _OverlayPreferenceModifier();
  return Attribute.syncMainIfReferences<A>(do:)((void (*)(void))partial apply for closure #1 in closure #1 in SecondaryChild.value.getter, (uint64_t)v10, v8, a3, a6);
}

uint64_t type metadata accessor for _OverlayPreferenceModifier()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for SecondaryChild()
{
  return swift_getGenericMetadata();
}

uint64_t specialized closure #1 in PropertyList.subscript.setter(uint64_t *a1, double a2)
{
  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<MinimumScaleFactorKey>, (uint64_t)&type metadata for MinimumScaleFactorKey, (uint64_t)&protocol witness table for MinimumScaleFactorKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(double *)(result + 72) != a2)
  {
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<MinimumScaleFactorKey>>();
    *(double *)(swift_allocObject() + 72) = a2;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<BodyHeadOutdentKey>, (uint64_t)&type metadata for BodyHeadOutdentKey, (uint64_t)&protocol witness table for BodyHeadOutdentKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(double *)(result + 72) != a2)
  {
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<BodyHeadOutdentKey>>();
    *(double *)(swift_allocObject() + 72) = a2;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DisplayScaleKey>, (uint64_t)&type metadata for DisplayScaleKey, (uint64_t)&protocol witness table for DisplayScaleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(double *)(result + 72) != a2)
  {
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<DisplayScaleKey>>();
    *(double *)(swift_allocObject() + 72) = a2;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<HyphenationFactorKey>, (uint64_t)&type metadata for HyphenationFactorKey, (uint64_t)&protocol witness table for HyphenationFactorKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(double *)(result + 72) != a2)
  {
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<HyphenationFactorKey>>();
    *(double *)(swift_allocObject() + 72) = a2;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<LineSpacingKey>, (uint64_t)&type metadata for LineSpacingKey, (uint64_t)&protocol witness table for LineSpacingKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(double *)(result + 72) != a2)
  {
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<LineSpacingKey>>();
    *(double *)(swift_allocObject() + 72) = a2;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<LineHeightMultipleKey>, (uint64_t)&type metadata for LineHeightMultipleKey, (uint64_t)&protocol witness table for LineHeightMultipleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(double *)(result + 72) != a2)
  {
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<LineHeightMultipleKey>>();
    *(double *)(swift_allocObject() + 72) = a2;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<MaximumLineHeightKey>, (uint64_t)&type metadata for MaximumLineHeightKey, (uint64_t)&protocol witness table for MaximumLineHeightKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(double *)(result + 72) != a2)
  {
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<MaximumLineHeightKey>>();
    *(double *)(swift_allocObject() + 72) = a2;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<MinimumLineHeightKey>, (uint64_t)&type metadata for MinimumLineHeightKey, (uint64_t)&protocol witness table for MinimumLineHeightKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(double *)(result + 72) != a2)
  {
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<MinimumLineHeightKey>>();
    *(double *)(swift_allocObject() + 72) = a2;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultKerningKey>, (uint64_t)&type metadata for DefaultKerningKey, (uint64_t)&protocol witness table for DefaultKerningKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(double *)(result + 72) != a2)
  {
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<DefaultKerningKey>>();
    *(double *)(swift_allocObject() + 72) = a2;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultTrackingKey>, (uint64_t)&type metadata for DefaultTrackingKey, (uint64_t)&protocol witness table for DefaultTrackingKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(double *)(result + 72) != a2)
  {
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<DefaultTrackingKey>>();
    *(double *)(swift_allocObject() + 72) = a2;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

{
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  uint64_t v4 = *a1;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultBaselineOffsetKey>, (uint64_t)&type metadata for DefaultBaselineOffsetKey, (uint64_t)&protocol witness table for DefaultBaselineOffsetKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
  Swift::Int v6 = v5;
  BloomFilter.init(hashValue:)(v5);
  uint64_t result = specialized find1<A>(_:key:filter:)(v4, v9);
  if (!result || *(double *)(result + 72) != a2)
  {
    uint64_t v8 = *a1;
    type metadata accessor for TypedElement<EnvironmentPropertyKey<DefaultBaselineOffsetKey>>();
    *(double *)(swift_allocObject() + 72) = a2;
    swift_retain();
    *(SwiftUI::BloomFilter *)a1 = PropertyList.Element.init(keyType:before:after:)(v6, 0, v8);
    return swift_release();
  }
  return result;
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<MinimumScaleFactorKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<MinimumScaleFactorKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<MinimumScaleFactorKey>, (uint64_t)&type metadata for MinimumScaleFactorKey, (uint64_t)&protocol witness table for MinimumScaleFactorKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<MinimumScaleFactorKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<MinimumScaleFactorKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<MinimumScaleFactorKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<MinimumScaleFactorKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<MinimumScaleFactorKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<MinimumScaleFactorKey>, (uint64_t)&type metadata for MinimumScaleFactorKey, (uint64_t)&protocol witness table for MinimumScaleFactorKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<MinimumScaleFactorKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t destroy for ShapeStyleResolver()
{
  swift_bridgeObjectRelease();
  swift_release();

  return swift_release();
}

uint64_t specialized static GraphHost.currentHost.getter()
{
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x263F288F8])
  {
    id v0 = (id)AGSubgraphGetCurrent();
    if (!v0) {
      goto LABEL_8;
    }
    uint64_t v1 = v0;
    id v2 = (id)AGSubgraphGetGraph();
  }
  else
  {
    id v2 = (id)AGGraphGetAttributeGraph();
  }
  uint64_t Context = AGGraphGetContext();
  if (Context)
  {
    uint64_t v4 = Context;
    swift_retain();

    return v4;
  }
  __break(1u);
LABEL_8:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityAttachment()
{
  return &type metadata for AccessibilityAttachment;
}

void _ShapeStyle_Pack.Fill.AnimatableData.PaintInitVisitor.visitPaint<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  *(void *)&v108.f64[0] = (char *)v107.f64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  *(void *)&v109.f64[0] = (char *)v107.f64 - v8;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v107 - v10;
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v107 - v13;
  MEMORY[0x270FA5388](v15);
  int v17 = (char *)&v107 - v16;
  MEMORY[0x270FA5388](v18);
  int v20 = (char *)&v107 - v19;
  double v22 = MEMORY[0x270FA5388](v21);
  int v23 = *(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16);
  v23((char *)&v107 - v24, a1, a2, v22);
  if (swift_dynamicCast())
  {
    float v25 = *((float *)&v113 + 1);
    float v26 = *(float *)&v113;
    float v28 = v114;
    float v27 = v115;
    uint64_t v29 = *v2;
    if (one-time initialization token for legacyInterpolation != -1) {
      swift_once();
    }
    swift_beginAccess();
    if ((static Color.Resolved.legacyInterpolation & 1) == 0)
    {
      LOBYTE(v110) = 2;
      *(float *)v30.i32 = v26;
      ResolvedGradient.ColorSpace.convertIn(_:)(v112[0].f32, v30, v25, LODWORD(v28), v27, v31);
      float v25 = v112[0].f32[1];
      float v26 = v112[0].f32[0];
      float v27 = v112[0].f32[3];
      float v28 = v112[0].f32[2];
    }
    uint64_t v32 = *(void *)v29;
    uint64_t v33 = *(void *)(v29 + 8);
    uint64_t v34 = *(void *)(v29 + 16);
    uint64_t v35 = *(void *)(v29 + 24);
    uint64_t v36 = *(void *)(v29 + 32);
    uint64_t v37 = *(void *)(v29 + 40);
    uint64_t v38 = *(void *)(v29 + 48);
    uint64_t v39 = *(void *)(v29 + 56);
    uint64_t v40 = *(void *)(v29 + 64);
    uint64_t v41 = *(void *)(v29 + 72);
    char v42 = *(unsigned char *)(v29 + 80);
    *(void *)uint64_t v29 = COERCE_UNSIGNED_INT(v26 * 128.0) | ((unint64_t)COERCE_UNSIGNED_INT(v25 * 128.0) << 32);
    *(void *)(v29 + 8) = COERCE_UNSIGNED_INT(v28 * 128.0) | ((unint64_t)COERCE_UNSIGNED_INT(v27 * 128.0) << 32);
    *(_OWORD *)(v29 + 16) = 0u;
    *(_OWORD *)(v29 + 32) = 0u;
    *(_OWORD *)(v29 + 48) = 0u;
    *(_OWORD *)(v29 + 64) = 0u;
    *(unsigned char *)(v29 + 80) = 0;
    goto LABEL_54;
  }
  ((void (*)(char *, uint64_t, uint64_t))v23)(v20, a1, a2);
  if (swift_dynamicCast())
  {
    id v43 = v113;
    char v44 = LOBYTE(v114);
    float64x2_t v45 = v116;
    float64x2_t v46 = v117;
    uint64_t v47 = *v2;
    if (one-time initialization token for v5 != -1)
    {
      float64x2_t v109 = v116;
      float64x2_t v108 = v117;
      swift_once();
      float64x2_t v46 = v108;
      float64x2_t v45 = v109;
    }
    float64x2_t v48 = (float64x2_t)vdupq_n_s64(0x4060000000000000uLL);
    unsigned int v49 = static Semantics.v5;
    if (one-time initialization token for forced != -1)
    {
      float64x2_t v109 = v45;
      float64x2_t v108 = v46;
      float64x2_t v107 = v48;
      swift_once();
      float64x2_t v48 = v107;
      float64x2_t v46 = v108;
      float64x2_t v45 = v109;
    }
    float64x2_t v109 = vmulq_f64(v45, v48);
    float64x2_t v108 = vmulq_f64(v46, v48);
    swift_beginAccess();
    if (byte_26B0F44FC == 1)
    {
      if ((dyld_program_sdk_at_least() & 1) == 0)
      {
LABEL_14:
        swift_bridgeObjectRelease();
        uint64_t v51 = 0;
        uint64_t v52 = MEMORY[0x263F8EE78];
LABEL_25:
        uint64_t v32 = *(void *)v47;
        uint64_t v33 = *(void *)(v47 + 8);
        uint64_t v34 = *(void *)(v47 + 16);
        uint64_t v35 = *(void *)(v47 + 24);
        uint64_t v36 = *(void *)(v47 + 32);
        uint64_t v37 = *(void *)(v47 + 40);
        uint64_t v38 = *(void *)(v47 + 48);
        uint64_t v39 = *(void *)(v47 + 56);
        uint64_t v40 = *(void *)(v47 + 64);
        uint64_t v41 = *(void *)(v47 + 72);
        char v42 = *(unsigned char *)(v47 + 80);
        float64x2_t v61 = v108;
        *(float64x2_t *)uint64_t v47 = v109;
        *(float64x2_t *)(v47 + 16) = v61;
        *(void *)(v47 + 32) = v52;
        *(void *)(v47 + 40) = v51;
        *(_OWORD *)(v47 + 48) = 0u;
        *(_OWORD *)(v47 + 64) = 0u;
        char v62 = 2;
LABEL_53:
        *(unsigned char *)(v47 + 80) = v62;
LABEL_54:
        outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42);
        return;
      }
    }
    else if (static Semantics.forced < v49)
    {
      goto LABEL_14;
    }
    id v110 = v43;
    char v111 = v44;
    v50.stops._rawuint64_t Value = &v110;
    ResolvedGradientVector.init(_:)(v50);
    uint64_t v52 = v112[0].i64[0];
    uint64_t v51 = v112[0].u8[8];
    goto LABEL_25;
  }
  ((void (*)(char *, uint64_t, uint64_t))v23)(v17, a1, a2);
  if (swift_dynamicCast())
  {
    id v53 = v113;
    char v54 = LOBYTE(v114);
    float64x2_t v55 = v116;
    float64x2_t v109 = v117;
    uint64_t v47 = *v2;
    if (one-time initialization token for v5 != -1)
    {
      float64x2_t v108 = v116;
      swift_once();
      float64x2_t v55 = v108;
    }
    float64x2_t v56 = (float64x2_t)vdupq_n_s64(0x4060000000000000uLL);
    unsigned int v57 = static Semantics.v5;
    if (one-time initialization token for forced != -1)
    {
      float64x2_t v108 = v55;
      float64x2_t v107 = v56;
      swift_once();
      float64x2_t v56 = v107;
      float64x2_t v55 = v108;
    }
    float64x2_t v108 = vmulq_f64(v55, v56);
    swift_beginAccess();
    if (byte_26B0F44FC == 1)
    {
      if ((dyld_program_sdk_at_least() & 1) == 0)
      {
LABEL_22:
        swift_bridgeObjectRelease();
        uint64_t v59 = 0;
        uint64_t v60 = MEMORY[0x263F8EE78];
LABEL_36:
        uint64_t v32 = *(void *)v47;
        uint64_t v33 = *(void *)(v47 + 8);
        uint64_t v34 = *(void *)(v47 + 16);
        uint64_t v35 = *(void *)(v47 + 24);
        uint64_t v36 = *(void *)(v47 + 32);
        uint64_t v37 = *(void *)(v47 + 40);
        uint64_t v38 = *(void *)(v47 + 48);
        uint64_t v39 = *(void *)(v47 + 56);
        uint64_t v40 = *(void *)(v47 + 64);
        uint64_t v41 = *(void *)(v47 + 72);
        char v42 = *(unsigned char *)(v47 + 80);
        *(float64x2_t *)uint64_t v47 = v108;
        *(void *)(v47 + 16) = v60;
        *(void *)(v47 + 24) = v59;
        *(float64x2_t *)(v47 + 32) = v109;
        *(_OWORD *)(v47 + 48) = 0u;
        *(_OWORD *)(v47 + 64) = 0u;
        char v62 = 3;
        goto LABEL_53;
      }
    }
    else if (static Semantics.forced < v57)
    {
      goto LABEL_22;
    }
    id v110 = v53;
    char v111 = v54;
    v58.stops._rawuint64_t Value = &v110;
    ResolvedGradientVector.init(_:)(v58);
    uint64_t v60 = v112[0].i64[0];
    uint64_t v59 = v112[0].u8[8];
    goto LABEL_36;
  }
  ((void (*)(char *, uint64_t, uint64_t))v23)(v14, a1, a2);
  if (swift_dynamicCast())
  {
    id v63 = v113;
    char v64 = LOBYTE(v114);
    float64x2_t v65 = v116;
    float64x2_t v109 = v117;
    uint64_t v47 = *v2;
    if (one-time initialization token for v5 != -1)
    {
      float64x2_t v108 = v116;
      swift_once();
      float64x2_t v65 = v108;
    }
    float64x2_t v66 = (float64x2_t)vdupq_n_s64(0x4060000000000000uLL);
    unsigned int v67 = static Semantics.v5;
    if (one-time initialization token for forced != -1)
    {
      float64x2_t v108 = v65;
      float64x2_t v107 = v66;
      swift_once();
      float64x2_t v66 = v107;
      float64x2_t v65 = v108;
    }
    float64x2_t v108 = vmulq_f64(v65, v66);
    swift_beginAccess();
    if (byte_26B0F44FC == 1)
    {
      if ((dyld_program_sdk_at_least() & 1) == 0)
      {
LABEL_33:
        swift_bridgeObjectRelease();
        uint64_t v69 = 0;
        uint64_t v70 = MEMORY[0x263F8EE78];
LABEL_47:
        uint64_t v32 = *(void *)v47;
        uint64_t v33 = *(void *)(v47 + 8);
        uint64_t v34 = *(void *)(v47 + 16);
        uint64_t v35 = *(void *)(v47 + 24);
        uint64_t v36 = *(void *)(v47 + 32);
        uint64_t v37 = *(void *)(v47 + 40);
        uint64_t v38 = *(void *)(v47 + 48);
        uint64_t v39 = *(void *)(v47 + 56);
        uint64_t v40 = *(void *)(v47 + 64);
        uint64_t v41 = *(void *)(v47 + 72);
        char v42 = *(unsigned char *)(v47 + 80);
        *(float64x2_t *)uint64_t v47 = v108;
        *(void *)(v47 + 16) = v70;
        *(void *)(v47 + 24) = v69;
        *(float64x2_t *)(v47 + 32) = v109;
        *(_OWORD *)(v47 + 48) = 0u;
        *(_OWORD *)(v47 + 64) = 0u;
        char v62 = 4;
        goto LABEL_53;
      }
    }
    else if (static Semantics.forced < v67)
    {
      goto LABEL_33;
    }
    id v110 = v63;
    char v111 = v64;
    v68.stops._rawuint64_t Value = &v110;
    ResolvedGradientVector.init(_:)(v68);
    uint64_t v70 = v112[0].i64[0];
    uint64_t v69 = v112[0].u8[8];
    goto LABEL_47;
  }
  ((void (*)(char *, uint64_t, uint64_t))v23)(v11, a1, a2);
  if (swift_dynamicCast())
  {
    id v71 = v113;
    char v72 = LOBYTE(v114);
    float64x2_t v73 = v116;
    float64x2_t v109 = v117;
    uint64_t v47 = *v2;
    if (one-time initialization token for v5 != -1)
    {
      float64x2_t v108 = v116;
      swift_once();
      float64x2_t v73 = v108;
    }
    float64x2_t v74 = (float64x2_t)vdupq_n_s64(0x4060000000000000uLL);
    unsigned int v75 = static Semantics.v5;
    if (one-time initialization token for forced != -1)
    {
      float64x2_t v108 = v73;
      float64x2_t v107 = v74;
      swift_once();
      float64x2_t v74 = v107;
      float64x2_t v73 = v108;
    }
    float64x2_t v108 = vmulq_f64(v73, v74);
    swift_beginAccess();
    if (byte_26B0F44FC == 1)
    {
      if ((dyld_program_sdk_at_least() & 1) == 0)
      {
LABEL_44:
        swift_bridgeObjectRelease();
        uint64_t v77 = 0;
        uint64_t v78 = MEMORY[0x263F8EE78];
LABEL_52:
        float64x2_t v92 = vmulq_f64(v109, (float64x2_t)vdupq_n_s64(0x4060000000000000uLL));
        uint64_t v32 = *(void *)v47;
        uint64_t v33 = *(void *)(v47 + 8);
        uint64_t v34 = *(void *)(v47 + 16);
        uint64_t v35 = *(void *)(v47 + 24);
        uint64_t v36 = *(void *)(v47 + 32);
        uint64_t v37 = *(void *)(v47 + 40);
        uint64_t v38 = *(void *)(v47 + 48);
        uint64_t v39 = *(void *)(v47 + 56);
        uint64_t v40 = *(void *)(v47 + 64);
        uint64_t v41 = *(void *)(v47 + 72);
        char v42 = *(unsigned char *)(v47 + 80);
        *(float64x2_t *)uint64_t v47 = v108;
        *(void *)(v47 + 16) = v78;
        *(void *)(v47 + 24) = v77;
        *(float64x2_t *)(v47 + 32) = v92;
        *(_OWORD *)(v47 + 48) = 0u;
        *(_OWORD *)(v47 + 64) = 0u;
        char v62 = 5;
        goto LABEL_53;
      }
    }
    else if (static Semantics.forced < v75)
    {
      goto LABEL_44;
    }
    id v110 = v71;
    char v111 = v72;
    v76.stops._rawuint64_t Value = &v110;
    ResolvedGradientVector.init(_:)(v76);
    uint64_t v78 = v112[0].i64[0];
    uint64_t v77 = v112[0].u8[8];
    goto LABEL_52;
  }
  ((void (*)(void, uint64_t, uint64_t))v23)(*(void *)&v109.f64[0], a1, a2);
  if (swift_dynamicCast())
  {
    uint64_t v79 = *v2;
    MeshGradient._Paint.animatableData.getter(v112);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v80 = *(void *)v79;
    uint64_t v81 = *(void *)(v79 + 8);
    uint64_t v82 = *(void *)(v79 + 16);
    uint64_t v83 = *(void *)(v79 + 24);
    uint64_t v84 = *(void *)(v79 + 32);
    uint64_t v85 = *(void *)(v79 + 40);
    uint64_t v86 = *(void *)(v79 + 48);
    uint64_t v87 = *(void *)(v79 + 56);
    uint64_t v88 = *(void *)(v79 + 64);
    uint64_t v89 = *(void *)(v79 + 72);
    char v90 = *(unsigned char *)(v79 + 80);
    float32x4_t v91 = v112[1];
    *(float32x4_t *)uint64_t v79 = v112[0];
    *(float32x4_t *)(v79 + 16) = v91;
    *(_OWORD *)(v79 + 32) = 0u;
    *(_OWORD *)(v79 + 48) = 0u;
    *(_OWORD *)(v79 + 64) = 0u;
    *(unsigned char *)(v79 + 80) = 6;
    outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v80, v81, v82, v83, v84, v85, v86, v87, v88, v89, v90);
  }
  else
  {
    ((void (*)(void, uint64_t, uint64_t))v23)(*(void *)&v108.f64[0], a1, a2);
    if (swift_dynamicCast())
    {
      id v93 = v113;
      uint64_t v94 = *v2;
      id v95 = v113;
      ShaderVectorData.init(rbShader:)(v93, &v113);
      uint64_t v96 = *(void *)v94;
      uint64_t v97 = *(void *)(v94 + 8);
      uint64_t v98 = *(void *)(v94 + 16);
      uint64_t v99 = *(void *)(v94 + 24);
      uint64_t v100 = *(void *)(v94 + 32);
      uint64_t v101 = *(void *)(v94 + 40);
      uint64_t v102 = *(void *)(v94 + 48);
      uint64_t v103 = *(void *)(v94 + 56);
      uint64_t v104 = *(void *)(v94 + 64);
      uint64_t v105 = *(void *)(v94 + 72);
      char v106 = *(unsigned char *)(v94 + 80);
      *(void *)uint64_t v94 = v113;
      *(_OWORD *)(v94 + 8) = 0u;
      *(_OWORD *)(v94 + 24) = 0u;
      *(_OWORD *)(v94 + 40) = 0u;
      *(_OWORD *)(v94 + 56) = 0u;
      *(void *)(v94 + 72) = 0;
      *(unsigned char *)(v94 + 80) = 7;
      outlined consume of _ShapeStyle_Pack.Fill.AnimatableData(v96, v97, v98, v99, v100, v101, v102, v103, v104, v105, v106);
    }
  }
}

uint64_t visitPaint<A>(_:) in Visitor #1 in static ShapeLayerHelper.layerType(_:_:mayClip:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v35 = a3;
  uint64_t v36 = a2;
  double v4 = MEMORY[0x270FA5388](a1);
  uint64_t v26 = (uint64_t)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = *(void *)v3;
  uint64_t v6 = *(void *)(v3 + 16);
  uint64_t v37 = *(void *)(v3 + 8);
  uint64_t v7 = *(void *)(v3 + 24);
  uint64_t v8 = *(void *)(v3 + 32);
  uint64_t v9 = *(void *)(v3 + 40);
  uint64_t v10 = *(void *)(v3 + 48);
  uint64_t v12 = *(void *)(v3 + 56);
  uint64_t v11 = *(void *)(v3 + 64);
  uint64_t v13 = *(void *)(v3 + 72);
  int v14 = *(unsigned __int8 *)(v3 + 80);
  v48[0] = v38;
  v48[1] = v37;
  v48[2] = v6;
  v48[3] = v7;
  uint64_t v34 = v6;
  uint64_t v33 = v7;
  v48[4] = v8;
  void v48[5] = v9;
  uint64_t v32 = v8;
  uint64_t v31 = v9;
  v48[6] = v10;
  v48[7] = v12;
  uint64_t v30 = v12;
  v48[8] = v11;
  v48[9] = v13;
  uint64_t v29 = v11;
  uint64_t v28 = v13;
  char v49 = v14;
  int v27 = v14;
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(v15 + 16))(v26, v16, v36, v4);
  outlined copy of ShapeType(v38, v37, v6, v7, v8, v9, v10, v12, v11, v13, v14);
  PaintType.init<A>(_:)(v26, v36, (uint64_t)&v41);
  uint64_t v17 = v41;
  uint64_t v18 = v42;
  uint64_t v19 = v43;
  uint64_t v20 = v44;
  uint64_t v21 = v45;
  uint64_t v22 = v46;
  LOBYTE(v8) = v47;
  v39[0] = v41;
  v39[1] = v42;
  v39[2] = v43;
  v39[3] = v44;
  v39[4] = v45;
  v39[5] = v46;
  char v40 = v47;
  uint64_t v23 = contentLayerType(_:_:mayClip:)((uint64_t)v48, (uint64_t)v39, *(unsigned char *)(v3 + 81));
  outlined consume of PaintType(v17, v18, v19, v20, v21, v22, v8);
  uint64_t result = outlined consume of ShapeType(v38, v37, v34, v33, v32, v31, v10, v30, v29, v28, v27);
  *(void *)(v3 + 88) = v23;
  return result;
}

void ShapeLayerHelper.visitPaint<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v198 = a3;
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v186 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v9 = *(_OWORD *)(v3 + 32);
  *uint64_t v10 = *(_OWORD *)(v3 + 16);
  v10[1] = v9;
  v224[32] = *(unsigned char *)(v3 + 48);
  outlined init with take of Path.Storage((uint64_t)v224, (uint64_t)v230);
  _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)v230, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
  ShapeType.init(_:)((uint64_t)v224, (uint64_t)&v203);
  *(double *)&uint64_t v11 = v206;
  uint64_t v199 = (uint64_t)v204;
  double v200 = *(double *)&v205;
  double v201 = *(double *)&v207;
  CGFloat v202 = *(double *)&v203;
  uint64_t v195 = v209;
  CGFloat v12 = *(double *)&v210;
  uint64_t v189 = v211;
  Swift::Double v13 = *(double *)&v212;
  uint64_t v14 = v213;
  uint64_t v15 = a1;
  uint64_t v16 = v208;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v15, a2);
  PaintType.init<A>(_:)((uint64_t)v8, a2, (uint64_t)&v203);
  uint64_t v18 = (void *)v203;
  uint64_t v17 = v204;
  CGFloat v19 = *(double *)&v205;
  double v20 = v206;
  Swift::Double v21 = *(double *)&v207;
  uint64_t v22 = v208;
  *(double *)&uint64_t v203 = v202;
  int8x16_t v204 = (void *)v199;
  *(double *)&uint64_t v205 = v200;
  double v206 = *(double *)&v11;
  double v192 = *(double *)&v11;
  uint64_t v193 = v14;
  uint64_t v23 = v209;
  *(double *)&uint64_t v207 = v201;
  uint64_t v208 = v16;
  uint64_t v24 = v195;
  CGFloat v197 = v12;
  uint64_t v198 = v16;
  uint64_t v209 = v195;
  *(double *)&uint64_t v210 = v12;
  uint64_t v25 = v189;
  uint64_t v211 = v189;
  *(double *)&uint64_t v212 = v13;
  Swift::Double v194 = v13;
  LOBYTE(v213) = v14;
  uint64_t v26 = (uint64_t)v18;
  v221.gradient.stops._rawuint64_t Value = v18;
  *(void *)&v221.gradient.SwiftUI::ResolvedGradient::ColorSpace colorSpace = v17;
  unsigned __int8 v196 = v17;
  *(double *)&uint64_t v27 = v19;
  v221.center.CGFloat x = v19;
  v221.center.CGFloat y = v20;
  double v190 = *(double *)&v22;
  double v191 = v21;
  v221.angle.CGFloat radians = v21;
  uint64_t v222 = v22;
  char v223 = v23;
  int v28 = *(unsigned __int8 *)(v3 + 128);
  uint64_t v29 = contentLayerType(_:_:mayClip:)((uint64_t)&v203, (uint64_t)&v221, *(unsigned char *)(v3 + 128));
  if (v29 != *(void *)(v3 + 8))
  {
    uint64_t v30 = v29;
    outlined consume of ShapeType(*(uint64_t *)&v202, v199, *(uint64_t *)&v200, *(uint64_t *)&v192, LOBYTE(v201), v198, v24, *(uint64_t *)&v197, v25, *(uint64_t *)&v194, v193);
    outlined consume of PaintType(v26, (uint64_t)v196, v27, *(uint64_t *)&v20, *(uint64_t *)&v191, *(uint64_t *)&v190, v23);
    *(void *)(v3 + 8) = v30;
    return;
  }
  int v31 = v28;
  id v187 = *(id *)v3;
  char v188 = (double *)v3;
  HIDWORD(v186) = *(unsigned __int8 *)(v3 + 113);
  objc_msgSend(v187, sel_setAllowsEdgeAntialiasing_);
  uint64_t v203 = v26;
  int8x16_t v204 = v196;
  double v32 = *(double *)&v27;
  uint64_t v205 = v27;
  double v206 = v20;
  *(double *)&uint64_t v207 = v191;
  uint64_t v208 = *(void *)&v190;
  LOBYTE(v209) = v23;
  uint64_t v33 = *(void *)&v202;
  uint64_t v34 = v199;
  *(double *)&uint64_t v35 = v200;
  *(double *)&uint64_t v210 = v202;
  uint64_t v211 = v199;
  uint64_t v36 = *(void *)&v192;
  char v37 = v193;
  *(double *)&uint64_t v212 = v200;
  uint64_t v213 = *(void *)&v192;
  double v214 = v201;
  uint64_t v215 = v198;
  uint64_t v216 = v24;
  CGFloat v217 = v197;
  Swift::Double v38 = v194;
  uint64_t v218 = v25;
  Swift::Double v219 = v194;
  char v220 = v193;
  uint64_t v39 = v26;
  double v40 = *(double *)&v24;
  v41.CGFloat radians = v191;
  CGFloat v42 = *(double *)&v25;
  unsigned __int8 v43 = LOBYTE(v201);
  int v44 = v23;
  uint64_t v45 = v188;
  switch(v193)
  {
    case 1:
      if (v23) {
        goto LABEL_19;
      }
      double v47 = v201;
      double v52 = v40;
      id v53 = v196;
      id v51 = v187;
      objc_msgSend(v187, sel_setBackgroundColor_, 0);
      objc_msgSend(v51, sel_setBorderWidth_, v52);
      if (one-time initialization token for cache != -1) {
        swift_once();
      }
      char v54 = (void *)specialized ObjectCache.subscript.getter(*(float *)&v26, *((float *)&v26 + 1), *(float *)&v53, *((float *)&v53 + 1));
      objc_msgSend(v51, sel_setBorderColor_, v54);

LABEL_12:
      objc_msgSend(v51, sel_setContents_, 0);
      objc_msgSend(v51, sel_setCornerRadius_, v47);
      float64x2_t v55 = (void *)MEMORY[0x263F15A20];
      if ((v198 & 1) == 0) {
        float64x2_t v55 = (void *)MEMORY[0x263F15A10];
      }
      objc_msgSend(v51, sel_setCornerCurve_, *v55);
      goto LABEL_26;
    case 2:
      if (v23)
      {
        double v191 = *(double *)&v26;
        uint64_t v56 = v199;
        *(double *)&uint64_t v57 = v200;
        uint64_t v58 = *(void *)&v192;
        unsigned __int8 v59 = LOBYTE(v201);
        double v60 = v42;
        Swift::Double v61 = v194;
        char v62 = v193;
        outlined copy of Path.Storage(*(uint64_t *)&v202, v199, *(uint64_t *)&v200, *(uint64_t *)&v192, LOBYTE(v201));
        swift_bridgeObjectRetain();
        char v37 = v62;
        Swift::Double v38 = v61;
        CGFloat v42 = v60;
        uint64_t v33 = *(void *)&v202;
        uint64_t v34 = v56;
        unsigned __int8 v43 = v59;
        uint64_t v35 = v57;
        uint64_t v36 = v58;
        uint64_t v39 = *(void *)&v191;
LABEL_18:
        if (v44)
        {
LABEL_19:
          uint64_t v63 = v36;
          uint64_t v64 = v35;
          unsigned __int8 v65 = v43;
          uint64_t v66 = v34;
          uint64_t v67 = v33;
          uint64_t v68 = *(void *)&v42;
          uint64_t v69 = *(void *)&v38;
          char v70 = v37;
          outlined release of (PaintType, ShapeType)((uint64_t)&v203);
          type metadata accessor for PaintShapeLayer();
          id v71 = (char *)swift_dynamicCastClassUnconditional();
          if (HIDWORD(v186)) {
            __int16 v72 = 256;
          }
          else {
            __int16 v72 = 0;
          }
          updateContent(shapeLayer:path:origin:paint:paintBounds:style:contentsScale:)(v71, (uint64_t)v224, *((void *)v45 + 9), v72 | *((unsigned __int8 *)v45 + 112), v45[7], v45[8], v45[10], v45[11], v45[12], v45[13], v45[15]);
          outlined consume of ShapeType(v67, v66, v64, v63, v65, v198, v195, *(uint64_t *)&v197, v68, v69, v70);
          return;
        }
        uint64_t v73 = v39;
        float64x2_t v74 = v196;
        uint64_t v75 = v36;
        uint64_t v76 = v35;
        unsigned __int8 v77 = v43;
        uint64_t v78 = v34;
        uint64_t v79 = v33;
        uint64_t v80 = *(void *)&v42;
        uint64_t v81 = *(void *)&v38;
        char v82 = v37;
        type metadata accessor for ColorShapeLayer();
        uint64_t v83 = (void *)swift_dynamicCastClassUnconditional();
        updateContent(shapeLayer:color:path:origin:eoFill:)(v83, (uint64_t)v224, *((unsigned char *)v45 + 112), *(float *)&v73, *((float *)&v73 + 1), *(float *)&v74, *((float *)&v74 + 1), v45[7], v45[8]);
        outlined consume of ShapeType(v79, v78, v76, v75, v77, v198, v195, *(uint64_t *)&v197, v80, v81, v82);
      }
      else
      {
        float v84 = *(float *)&v26;
        uint64_t v225 = *(void *)&v202;
        uint64_t v226 = v199;
        float v85 = *((float *)&v26 + 1);
        uint64_t v86 = v196;
        uint64_t v227 = *(void *)&v200;
        uint64_t v228 = *(void *)&v192;
        char v229 = LOBYTE(v201);
        v221.gradient.stops._rawuint64_t Value = (void *)v198;
        *(double *)&v221.gradient.SwiftUI::ResolvedGradient::ColorSpace colorSpace = v40;
        v221.center.CGFloat x = v197;
        v221.center.CGFloat y = v42;
        v221.angle.CGFloat radians = v194;
        uint64_t v87 = *(void *)&v192;
        uint64_t v88 = *(void *)&v200;
        uint64_t v89 = v199;
        uint64_t v90 = *(void *)&v40;
        uint64_t v91 = *(void *)&v202;
        uint64_t v92 = *(void *)&v42;
        Swift::Double v93 = v194;
        type metadata accessor for ColorShapeLayer();
        unsigned __int8 v196 = (void *)swift_dynamicCastClassUnconditional();
        double v94 = v45[7];
        double v95 = v45[8];
        uint64_t v185 = *(void *)&v93;
        uint64_t v96 = *(void *)&v197;
        uint64_t v97 = v198;
        outlined copy of ShapeType(v91, v89, v88, v87, v43, v198, v90, *(uint64_t *)&v197, v92, v185, 2);
        outlined copy of Path.Storage(v91, v89, v88, v87, v43);
        swift_bridgeObjectRetain();
        updateContent(shapeLayer:color:strokedPath:origin:style:)(v196, (uint64_t)&v225, (uint64_t)&v221, v84, v85, *(float *)&v86, *((float *)&v86 + 1), v94, v95);
        outlined consume of ShapeType(v91, v89, v88, v87, v43, v97, v90, v96, v92, *(uint64_t *)&v194, 2);
        swift_bridgeObjectRelease();
        outlined consume of Path.Storage(v91, v89, v88, v87, v43);
      }
LABEL_26:
      outlined release of (PaintType, ShapeType)((uint64_t)&v203);
      return;
    case 3:
      if (*(void *)&v200 | v199 | *(void *)&v202 | *(void *)&v192 | *(void *)&v201 | v198 | *(void *)&v40 | *(void *)&v197 | *(void *)&v42 | *(void *)&v194) {
        goto LABEL_18;
      }
      id v98 = v187;
      objc_msgSend(v187, sel_setBackgroundColor_, 0);
      objc_msgSend(v98, sel_setBorderColor_, 0);
      objc_msgSend(v98, sel_setContents_, 0);
      goto LABEL_26;
    default:
      uint64_t v46 = *(void *)&v20;
      double v47 = v201;
      switch(v23)
      {
        case 1:
          CGFloat v131 = v191;
          CGFloat v132 = v190;
          double v133 = v192;
          uint64_t v134 = v39;
          if (v31)
          {
            uint64_t v135 = v46;
            double v136 = v32;
            id v137 = v187;
            uint64_t v138 = *(void *)&v136;
            id v139 = v137;
          }
          else
          {
            CGFloat v202 = v32;
            uint64_t v135 = v46;
            id v172 = objc_msgSend(v187, sel_sublayers);
            if (!v172) {
              goto LABEL_78;
            }
            uint64_t v173 = v172;
            type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for CALayer);
            uint64_t v174 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

            if ((v174 & 0xC000000000000001) != 0)
            {
              id v175 = (id)MEMORY[0x24C523D60](0, v174);
            }
            else
            {
              if (!*(void *)((v174 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                goto LABEL_74;
              }
              id v175 = *(id *)(v174 + 32);
            }
            id v139 = v175;
            swift_bridgeObjectRelease();
            uint64_t v138 = *(void *)&v202;
          }
          double v176 = *(double *)&v35;
          v221.gradient.stops._rawuint64_t Value = (void *)v138;
          *(void *)&v221.gradient.SwiftUI::ResolvedGradient::ColorSpace colorSpace = v135;
          v221.center.CGFloat x = v131;
          v221.center.CGFloat y = v132;
          uint64_t v177 = *(void *)&v132;
          LOBYTE(v221.angle.radians) = 0;
          CGFloat v178 = v188[10];
          CGFloat v179 = v188[11];
          CGFloat v180 = v188[12];
          CGFloat v181 = v188[13];
          uint64_t v182 = v138;
          swift_bridgeObjectRetain();
          objc_msgSend(v139, sel_setCornerRadius_, v47);
          float32x2_t v183 = (void *)MEMORY[0x263F15A20];
          if ((v198 & 1) == 0) {
            float32x2_t v183 = (void *)MEMORY[0x263F15A10];
          }
          objc_msgSend(v139, sel_setCornerCurve_, *v183);
          uint64_t v225 = v134;
          uint64_t v184 = (uint64_t)v196;
          LOBYTE(v226) = (_BYTE)v196;
          GradientLayer.update(gradient:function:size:bounds:)((uint64_t)&v225, (long long *)&v221, v176, v133, v178, v179, v180, v181);

          outlined release of (PaintType, ShapeType)((uint64_t)&v203);
          outlined consume of PaintType(v134, v184, v182, v135, *(uint64_t *)&v131, v177, 1u);
          return;
        case 2:
          CGFloat v99 = v191;
          CGFloat v100 = v190;
          double v101 = v192;
          uint64_t v102 = v39;
          if (v31)
          {
            uint64_t v103 = v46;
            double v104 = v32;
            id v105 = v187;
            uint64_t v106 = *(void *)&v104;
            id v107 = v105;
          }
          else
          {
            CGFloat v202 = v32;
            uint64_t v103 = v46;
            id v140 = objc_msgSend(v187, sel_sublayers);
            if (!v140) {
              goto LABEL_75;
            }
            id v141 = v140;
            type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for CALayer);
            uint64_t v142 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

            if ((v142 & 0xC000000000000001) != 0)
            {
              id v143 = (id)MEMORY[0x24C523D60](0, v142);
            }
            else
            {
              if (!*(void *)((v142 & 0xFFFFFFFFFFFFFF8) + 0x10))
              {
                __break(1u);
                goto LABEL_72;
              }
              id v143 = *(id *)(v142 + 32);
            }
            id v107 = v143;
            swift_bridgeObjectRelease();
            uint64_t v106 = *(void *)&v202;
          }
          double v144 = *(double *)&v35;
          v221.gradient.stops._rawuint64_t Value = (void *)v106;
          *(void *)&v221.gradient.SwiftUI::ResolvedGradient::ColorSpace colorSpace = v103;
          v221.center.CGFloat x = v99;
          v221.center.CGFloat y = v100;
          uint64_t v145 = *(void *)&v100;
          LOBYTE(v221.angle.radians) = 1;
          CGFloat v146 = v188[10];
          CGFloat v147 = v188[11];
          CGFloat v148 = v188[12];
          CGFloat v149 = v188[13];
          uint64_t v150 = v106;
          swift_bridgeObjectRetain();
          objc_msgSend(v107, sel_setCornerRadius_, v47);
          uint64_t v151 = (void *)MEMORY[0x263F15A20];
          if ((v198 & 1) == 0) {
            uint64_t v151 = (void *)MEMORY[0x263F15A10];
          }
          objc_msgSend(v107, sel_setCornerCurve_, *v151);
          uint64_t v225 = v102;
          uint64_t v152 = (uint64_t)v196;
          LOBYTE(v226) = (_BYTE)v196;
          GradientLayer.update(gradient:function:size:bounds:)((uint64_t)&v225, (long long *)&v221, v144, v101, v146, v147, v148, v149);

          outlined release of (PaintType, ShapeType)((uint64_t)&v203);
          outlined consume of PaintType(v102, v152, v150, v103, *(uint64_t *)&v99, v145, 2u);
          return;
        case 3:
          CGFloat v108 = v191;
          CGFloat v109 = v190;
          double v110 = v192;
          uint64_t v111 = v39;
          if (v31)
          {
            uint64_t v112 = v46;
            double v113 = v32;
            id v114 = v187;
            uint64_t v115 = *(void *)&v113;
            id v116 = v114;
          }
          else
          {
            CGFloat v202 = v32;
            uint64_t v112 = v46;
            id v153 = objc_msgSend(v187, sel_sublayers);
            if (!v153) {
              goto LABEL_76;
            }
            long long v154 = v153;
            type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for CALayer);
            uint64_t v155 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

            if ((v155 & 0xC000000000000001) != 0)
            {
              id v156 = (id)MEMORY[0x24C523D60](0, v155);
            }
            else
            {
              if (!*(void *)((v155 & 0xFFFFFFFFFFFFFF8) + 0x10))
              {
LABEL_72:
                __break(1u);
                goto LABEL_73;
              }
              id v156 = *(id *)(v155 + 32);
            }
            id v116 = v156;
            swift_bridgeObjectRelease();
            uint64_t v115 = *(void *)&v202;
          }
          double v157 = *(double *)&v35;
          v221.gradient.stops._rawuint64_t Value = (void *)v115;
          *(void *)&v221.gradient.SwiftUI::ResolvedGradient::ColorSpace colorSpace = v112;
          v221.center.CGFloat x = v108;
          v221.center.CGFloat y = v109;
          uint64_t v158 = *(void *)&v109;
          LOBYTE(v221.angle.radians) = 2;
          CGFloat v159 = v188[10];
          CGFloat v160 = v188[11];
          CGFloat v161 = v188[12];
          CGFloat v162 = v188[13];
          uint64_t v163 = v115;
          swift_bridgeObjectRetain();
          objc_msgSend(v116, sel_setCornerRadius_, v47);
          uint64_t v164 = (void *)MEMORY[0x263F15A20];
          if ((v198 & 1) == 0) {
            uint64_t v164 = (void *)MEMORY[0x263F15A10];
          }
          objc_msgSend(v116, sel_setCornerCurve_, *v164);
          uint64_t v225 = v111;
          uint64_t v165 = (uint64_t)v196;
          LOBYTE(v226) = (_BYTE)v196;
          GradientLayer.update(gradient:function:size:bounds:)((uint64_t)&v225, (long long *)&v221, v157, v110, v159, v160, v161, v162);

          outlined release of (PaintType, ShapeType)((uint64_t)&v203);
          outlined consume of PaintType(v111, v165, v163, v112, *(uint64_t *)&v108, v158, 3u);
          return;
        case 4:
          double v117 = v200;
          double v118 = v192;
          v119.CGFloat radians = v190;
          double v120 = v32;
          double v121 = v188[10];
          double v122 = v188[11];
          double v124 = v188[12];
          double v123 = v188[13];
          uint64_t v225 = v39;
          LOBYTE(v226) = (_BYTE)v196;
          *(double *)&unint64_t v125 = v121 + v124 * v32;
          CGFloat v202 = v123;
          *(double *)&unint64_t v126 = v122 + v123 * v20;
          swift_bridgeObjectRetain();
          v231.stops._rawuint64_t Value = &v225;
          ConicGradient.init(gradient:center:startAngle:endAngle:)(&v221, v231, (CGPoint)__PAIR128__(v126, v125), v41, v119);
          rawuint64_t Value = v221.gradient.stops._rawValue;
          SwiftUI::ResolvedGradient::ColorSpace colorSpace = v221.gradient.colorSpace;
          CGFloat radians = v221.angle.radians;
          if (v31)
          {
            id v130 = v187;
LABEL_56:
            *(double *)&v221.gradient.stops._rawuint64_t Value = v120;
            *(void *)&v221.gradient.SwiftUI::ResolvedGradient::ColorSpace colorSpace = v46;
            v221.center.CGFloat x = radians;
            v221.center.CGFloat y = 0.0;
            LOBYTE(v221.angle.radians) = 3;
            swift_bridgeObjectRetain();
            objc_msgSend(v130, sel_setCornerRadius_, v47);
            id v171 = (void *)MEMORY[0x263F15A20];
            if ((v198 & 1) == 0) {
              id v171 = (void *)MEMORY[0x263F15A10];
            }
            objc_msgSend(v130, sel_setCornerCurve_, *v171);
            uint64_t v225 = (uint64_t)rawValue;
            LOBYTE(v226) = colorSpace;
            GradientLayer.update(gradient:function:size:bounds:)((uint64_t)&v225, (long long *)&v221, v117, v118, v121, v122, v124, v202);
            swift_bridgeObjectRelease();

            outlined release of (PaintType, ShapeType)((uint64_t)&v203);
            swift_bridgeObjectRelease();
            return;
          }
          uint64_t v166 = v46;
          id v167 = objc_msgSend(v187, sel_sublayers);
          if (!v167) {
            goto LABEL_77;
          }
          float v168 = v167;
          type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for CALayer);
          uint64_t v169 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          if ((v169 & 0xC000000000000001) != 0)
          {
            id v170 = (id)MEMORY[0x24C523D60](0, v169);
            goto LABEL_55;
          }
          if (*(void *)((v169 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            id v170 = *(id *)(v169 + 32);
LABEL_55:
            id v130 = v170;
            swift_bridgeObjectRelease();
            uint64_t v46 = v166;
            goto LABEL_56;
          }
LABEL_73:
          __break(1u);
LABEL_74:
          __break(1u);
LABEL_75:
          __break(1u);
LABEL_76:
          __break(1u);
LABEL_77:
          __break(1u);
LABEL_78:
          __break(1u);
          return;
        case 5:
          goto LABEL_19;
        default:
          uint64_t v48 = v39;
          char v49 = v196;
          if (one-time initialization token for cache != -1) {
            swift_once();
          }
          SwiftUI::ResolvedGradient v50 = (void *)specialized ObjectCache.subscript.getter(*(float *)&v48, *((float *)&v48 + 1), *(float *)&v49, *((float *)&v49 + 1));
          id v51 = v187;
          objc_msgSend(v187, sel_setBackgroundColor_, v50);

          objc_msgSend(v51, sel_setBorderColor_, 0);
          goto LABEL_12;
      }
  }
}

void ShapeType.init(_:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  outlined init with take of Path.Storage(a1, (uint64_t)v28);
  outlined init with take of Path.Storage((uint64_t)v28, (uint64_t)&v29);
  switch(v31)
  {
    case 0:
      char v4 = 0;
      int8x8_t v5 = 0;
      uint64_t v6 = v29.i64[1];
      uint64_t v7 = v29.i64[0];
      long long v8 = 0uLL;
      double v9 = 0.0;
      long long v10 = 0uLL;
      uint64_t v12 = v30.i64[1];
      uint64_t v11 = v30.i64[0];
      goto LABEL_25;
    case 1:
      CGPoint v13 = (CGPoint)v29;
      CGSize v14 = (CGSize)v30;
      v33.origin = (CGPoint)v29;
      v33.size = (CGSize)v30;
      double Width = CGRectGetWidth(v33);
      v34.origin = v13;
      v34.size = v14;
      CGFloat Height = CGRectGetHeight(v34);
      long long v8 = 0uLL;
      if (Width == Height)
      {
        v35.origin = v13;
        v35.size = v14;
        CGFloat v17 = CGRectGetWidth(v35);
        long long v8 = 0uLL;
        char v4 = 0;
        int8x8_t v5 = 0;
        double v9 = v17 * 0.5;
        uint64_t v6 = *(void *)&v13.y;
        uint64_t v7 = *(_OWORD *)&v13;
        uint64_t v12 = *(void *)&v14.height;
        uint64_t v11 = *(_OWORD *)&v14;
LABEL_17:
        long long v10 = 0uLL;
      }
      else
      {
        int8x8_t v5 = 0;
        uint64_t v12 = 0;
        uint64_t v11 = 0;
        uint64_t v6 = 0;
        double v9 = 0.0;
        char v4 = 3;
        long long v10 = 0uLL;
        uint64_t v7 = 1;
      }
      goto LABEL_25;
    case 2:
      double v18 = *(double *)(v29.i64[0] + 48);
      if (v18 != *(double *)(v29.i64[0] + 56)) {
        goto LABEL_16;
      }
      unsigned int v19 = *(unsigned __int8 *)(v29.i64[0] + 64);
      CGFloat v21 = *(double *)(v29.i64[0] + 32);
      CGFloat v20 = *(double *)(v29.i64[0] + 40);
      CGFloat v23 = *(double *)(v29.i64[0] + 16);
      CGFloat v22 = *(double *)(v29.i64[0] + 24);
      v36.origin.CGFloat x = v23;
      v36.origin.CGFloat y = v22;
      v36.size.CGFloat width = v21;
      v36.size.CGFloat height = v20;
      double v24 = CGRectGetWidth(v36);
      v37.origin.CGFloat x = v23;
      v37.origin.CGFloat y = v22;
      v37.size.CGFloat width = v21;
      v37.size.CGFloat height = v20;
      double v25 = CGRectGetHeight(v37);
      _s7SwiftUI4PathV7StorageOWOrTm_0(a1, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
      char v4 = 0;
      int8x8_t v5 = 0;
      if (v25 >= v24) {
        double v26 = v24;
      }
      else {
        double v26 = v25;
      }
      double v9 = v26 * 0.5;
      if (v9 >= v18) {
        double v9 = v18;
      }
      uint64_t v7 = *(void *)&v23;
      uint64_t v6 = *(void *)&v22;
      uint64_t v11 = *(void *)&v21;
      long long v8 = v19;
      uint64_t v12 = *(void *)&v20;
      goto LABEL_17;
    case 5:
      if (*(unsigned char *)(v29.i64[0] + 16))
      {
        if (*(unsigned char *)(v29.i64[0] + 16) != 1 && one-time initialization token for bufferCallbacks != -1) {
          swift_once();
        }
      }
      else if (!*(void *)(v29.i64[0] + 24))
      {
        __break(1u);
        return;
      }
      RBPathApplyShape();
      _s7SwiftUI4PathV7StorageOWOrTm_0(a1, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
      uint64_t v7 = 1;
      uint64_t v11 = 0;
      uint64_t v6 = 0;
      double v9 = 0.0;
      uint64_t v12 = 0;
      long long v8 = 0u;
      long long v10 = 0u;
      int8x8_t v5 = 0;
      char v4 = 3;
LABEL_25:
      *(void *)a2 = v7;
      *(void *)(a2 + 8) = v6;
      *(void *)(a2 + 16) = v11;
      *(void *)(a2 + 24) = v12;
      *(double *)(a2 + 32) = v9;
      *(_OWORD *)(a2 + 40) = v8;
      *(_OWORD *)(a2 + 56) = v10;
      *(int8x8_t *)(a2 + 72) = v5;
      *(unsigned char *)(a2 + 80) = v4;
      return;
    case 6:
      int8x16_t v27 = vorrq_s8(v29, v30);
      int8x8_t v5 = vorr_s8(*(int8x8_t *)v27.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL));
      if (v5) {
        goto LABEL_16;
      }
      uint64_t v12 = 0;
      uint64_t v11 = 0;
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      long long v8 = 0uLL;
      double v9 = 0.0;
      char v4 = 3;
      goto LABEL_17;
    default:
LABEL_16:
      _s7SwiftUI4PathV7StorageOWOrTm_0(a1, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
      int8x8_t v5 = 0;
      uint64_t v12 = 0;
      uint64_t v11 = 0;
      uint64_t v6 = 0;
      long long v8 = 0uLL;
      double v9 = 0.0;
      char v4 = 3;
      uint64_t v7 = 1;
      goto LABEL_17;
  }
}

uint64_t PaintType.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v50 = a3;
  uint64_t v5 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  long long v10 = (char *)&v48 - v9;
  MEMORY[0x270FA5388](v11);
  CGPoint v13 = (char *)&v48 - v12;
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v48 - v15;
  double v18 = MEMORY[0x270FA5388](v17);
  unsigned int v19 = *(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16);
  v19((char *)&v48 - v20, a1, a2, v18);
  if ((swift_dynamicCast() & 1) == 0)
  {
    ((void (*)(char *, uint64_t, uint64_t))v19)(v16, a1, a2);
    if (swift_dynamicCast())
    {
      uint64_t v26 = v51;
      uint64_t v22 = v52;
      long long v48 = v54;
      long long v49 = v53;
      uint64_t v21 = ResolvedGradient.constantColor.getter();
      uint64_t v28 = v27;
      char v30 = v29;
      char v31 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
      swift_bridgeObjectRetain();
      v31(a1, a2);
      uint64_t result = swift_bridgeObjectRelease();
      if (v30)
      {
        char v24 = 1;
LABEL_17:
        uint64_t v21 = v26;
        uint64_t v41 = v50;
        goto LABEL_18;
      }
    }
    else
    {
      ((void (*)(char *, uint64_t, uint64_t))v19)(v13, a1, a2);
      if (swift_dynamicCast())
      {
        uint64_t v26 = v51;
        uint64_t v22 = v52;
        long long v48 = v54;
        long long v49 = v53;
        uint64_t v21 = ResolvedGradient.constantColor.getter();
        uint64_t v28 = v32;
        char v34 = v33;
        CGRect v35 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
        swift_bridgeObjectRetain();
        v35(a1, a2);
        uint64_t result = swift_bridgeObjectRelease();
        if (v34)
        {
          char v24 = 2;
          goto LABEL_17;
        }
      }
      else
      {
        ((void (*)(char *, uint64_t, uint64_t))v19)(v10, a1, a2);
        if ((swift_dynamicCast() & 1) == 0)
        {
          ((void (*)(char *, uint64_t, uint64_t))v19)(v7, a1, a2);
          if ((swift_dynamicCast() & 1) == 0)
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(a1, a2);
            uint64_t v21 = 0;
            uint64_t v22 = 0;
            long long v25 = 0uLL;
            char v24 = 5;
            goto LABEL_12;
          }
          uint64_t v42 = v51;
          uint64_t v22 = v52;
          long long v48 = v54;
          long long v49 = v53;
          uint64_t v21 = ResolvedGradient.constantColor.getter();
          uint64_t v44 = v43;
          char v46 = v45;
          double v47 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
          swift_bridgeObjectRetain();
          v47(a1, a2);
          uint64_t result = swift_bridgeObjectRelease();
          uint64_t v41 = v50;
          if ((v46 & 1) == 0)
          {
            uint64_t result = swift_bridgeObjectRelease();
            char v24 = 0;
            long long v25 = 0uLL;
            uint64_t v22 = v44;
            long long v40 = 0uLL;
            goto LABEL_19;
          }
          char v24 = 4;
          uint64_t v21 = v42;
LABEL_18:
          long long v40 = v48;
          long long v25 = v49;
          goto LABEL_19;
        }
        uint64_t v26 = v51;
        uint64_t v22 = v52;
        long long v48 = v54;
        long long v49 = v53;
        uint64_t v21 = ResolvedGradient.constantColor.getter();
        uint64_t v28 = v36;
        char v38 = v37;
        uint64_t v39 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
        swift_bridgeObjectRetain();
        v39(a1, a2);
        uint64_t result = swift_bridgeObjectRelease();
        if (v38)
        {
          char v24 = 3;
          goto LABEL_17;
        }
      }
    }
    uint64_t result = swift_bridgeObjectRelease();
    char v24 = 0;
    long long v25 = 0uLL;
    uint64_t v22 = v28;
    goto LABEL_12;
  }
  uint64_t v21 = v51;
  uint64_t v22 = v52;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(a1, a2);
  char v24 = 0;
  long long v25 = 0uLL;
LABEL_12:
  long long v40 = 0uLL;
  uint64_t v41 = v50;
LABEL_19:
  *(void *)uint64_t v41 = v21;
  *(void *)(v41 + 8) = v22;
  *(_OWORD *)(v41 + 16) = v25;
  *(_OWORD *)(v41 + 32) = v40;
  *(unsigned char *)(v41 + 48) = v24;
  return result;
}

uint64_t initializeWithCopy for LinearGradient._Paint(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t contentLayerType(_:_:mayClip:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(unsigned __int8 *)(a1 + 80);
  uint64_t v9 = *(void *)a2;
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v11 = *(void *)(a2 + 16);
  uint64_t v10 = *(void *)(a2 + 24);
  uint64_t v13 = *(void *)(a2 + 32);
  uint64_t v12 = *(void *)(a2 + 40);
  int v14 = *(unsigned __int8 *)(a2 + 48);
  v21[0] = *(void *)a2;
  v21[1] = v8;
  v21[2] = v11;
  long long v21[3] = v10;
  _DWORD v21[4] = v13;
  v21[5] = v12;
  char v22 = v14;
  uint64_t v23 = v5;
  uint64_t v24 = v6;
  long long v15 = *(_OWORD *)(a1 + 16);
  long long v16 = *(_OWORD *)(a1 + 32);
  long long v25 = v15;
  long long v26 = v16;
  long long v18 = *(_OWORD *)(a1 + 48);
  long long v17 = *(_OWORD *)(a1 + 64);
  long long v27 = v18;
  long long v28 = v17;
  char v29 = v7;
  switch(v7)
  {
    case 1:
      goto LABEL_5;
    case 2:
      if (!v14) {
        goto LABEL_13;
      }
      outlined copy of Path.Storage(v5, v6, v15, *((uint64_t *)&v15 + 1), v16);
      swift_bridgeObjectRetain();
      goto LABEL_11;
    case 3:
      if (!((unint64_t)v15 | v6 | v5 | (unint64_t)v16 | *((void *)&v15 + 1) | *((void *)&v16 + 1) | (unint64_t)v18 | *((void *)&v18 + 1) | (unint64_t)v17 | *((void *)&v17 + 1))) {
        goto LABEL_12;
      }
      if (v14) {
        goto LABEL_11;
      }
LABEL_13:
      outlined copy of ShapeType(v5, v6, v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v18, *((uint64_t *)&v18 + 1), v17, *((uint64_t *)&v17 + 1), v7);
      outlined release of (PaintType, ShapeType)((uint64_t)v21);
      uint64_t result = type metadata accessor for ColorShapeLayer();
      break;
    default:
      if ((v14 - 1) >= 4)
      {
LABEL_5:
        if (v14)
        {
LABEL_11:
          outlined copy of PaintType(v9, v8, v11, v10, v13, v12, v14);
          outlined release of (PaintType, ShapeType)((uint64_t)v21);
          uint64_t result = type metadata accessor for PaintShapeLayer();
        }
        else
        {
LABEL_12:
          outlined copy of PaintType(v9, v8, v11, v10, v13, v12, v14);
          outlined release of (PaintType, ShapeType)((uint64_t)v21);
          uint64_t result = type metadata accessor for CAPresentationModifier(0, (unint64_t *)&lazy cache variable for type metadata for CALayer);
        }
      }
      else
      {
        outlined copy of PaintType(v9, v8, v11, v10, v13, v12, v14);
        outlined release of (PaintType, ShapeType)((uint64_t)v21);
        if (a3) {
          uint64_t result = type metadata accessor for GradientLayer();
        }
        else {
          uint64_t result = type metadata accessor for UnclippedGradientLayer();
        }
      }
      break;
  }
  return result;
}

uint64_t outlined release of (PaintType, ShapeType)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  uint64_t v12 = *(void *)(a1 + 64);
  uint64_t v13 = *(void *)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 80);
  uint64_t v4 = *(void *)(a1 + 88);
  uint64_t v5 = *(void *)(a1 + 96);
  uint64_t v6 = *(void *)(a1 + 104);
  uint64_t v7 = *(void *)(a1 + 112);
  uint64_t v8 = *(void *)(a1 + 120);
  uint64_t v9 = *(void *)(a1 + 128);
  char v10 = *(unsigned char *)(a1 + 136);
  outlined consume of PaintType(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned char *)(a1 + 48));
  outlined consume of ShapeType(v13, v12, v2, v3, v4, v5, v6, v7, v8, v9, v10);
  return a1;
}

uint64_t outlined consume of ShapeType(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a11 == 2)
  {
    outlined consume of Path.Storage(result, a2, a3, a4, a5);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined consume of PaintType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 a7)
{
  if (a7 - 1 <= 3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined copy of ShapeType(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a11 == 2)
  {
    outlined copy of Path.Storage(result, a2, a3, a4, a5);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined copy of PaintType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 a7)
{
  if (a7 - 1 <= 3) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

double DisplayList.ViewUpdater.Platform.updateShapeView(_:state:size:path:paint:style:contentsChanged:)(uint64_t a1, uint64_t a2, double *a3, uint64_t a4, uint64_t a5, __int16 a6, char a7)
{
  CGFloat v14 = *(double *)a4;
  CGFloat v81 = *(double *)(a4 + 16);
  CGFloat v82 = *(double *)(a4 + 8);
  CGFloat v80 = *(double *)(a4 + 24);
  unsigned __int8 v79 = *(unsigned char *)(a4 + 32);
  uint64_t v78 = *v7;
  long long v15 = *(void **)(a1 + 8);
  CGFloat v16 = COERCE_DOUBLE(swift_getObjectType());
  double v17 = *a3;
  double v18 = a3[1];
  uint64_t v83 = a3;
  CGFloat v19 = *(double *)a2;
  double v20 = specialized static ShapeLayerHelper.makeLayerBounds(size:path:layerType:contentsScale:)(v17, v18, *(double *)(*(void *)a2 + 24), a4, *(uint64_t *)&v16);
  double v22 = v21;
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  if (a7)
  {
    uint64_t v75 = *(void *)(*(void *)&v19 + 24);
    double v27 = -v20;
    int v28 = *(_DWORD *)(a2 + 8);
    CGFloat v29 = *(double *)(a2 + 16);
    uint64_t v30 = *(void *)(a2 + 96);
    char v31 = *(unsigned char *)(a2 + 104);
    char v32 = *(unsigned char *)(a2 + 105);
    char v33 = *(unsigned char *)(a2 + 106);
    int v34 = *(_DWORD *)(a2 + 108);
    uint64_t v35 = *(void *)(a2 + 112);
    uint64_t v36 = *(void *)(a2 + 168);
    char v99 = *(unsigned char *)(a2 + 24);
    location.CGFloat a = v19;
    LODWORD(location.b) = v28;
    location.CGFloat c = v29;
    LOBYTE(location.d) = v99;
    long long v37 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&location.tCGFloat x = *(_OWORD *)(a2 + 32);
    long long v91 = v37;
    long long v38 = *(_OWORD *)(a2 + 80);
    long long v92 = *(_OWORD *)(a2 + 64);
    long long v93 = v38;
    *(void *)&long long v94 = v30;
    BYTE8(v94) = v31;
    BYTE9(v94) = v32;
    BYTE10(v94) = v33;
    HIDWORD(v94) = v34;
    *(_OWORD *)&v95[8] = *(_OWORD *)(a2 + 120);
    long long v96 = *(_OWORD *)(a2 + 136);
    long long v97 = *(_OWORD *)(a2 + 152);
    *(void *)double v95 = v35;
    uint64_t v98 = v36;
    double v39 = v20;
    BOOL v40 = DisplayList.ViewUpdater.Model.State.hasDODEffects.getter();
    char v41 = a6 & 1;
    char v42 = HIBYTE(a6) & 1;
    *(void *)&location.CGFloat a = v15;
    location.CGFloat b = v16;
    uint64_t v74 = *(void *)&v14;
    location.CGFloat c = v14;
    location.CGFloat d = v82;
    location.tCGFloat x = v81;
    location.tCGFloat y = v80;
    LOBYTE(v91) = v79;
    txCGFloat a = v39;
    *((double *)&v91 + 1) = v39;
    *(double *)&long long v92 = v22;
    *((void *)&v92 + 1) = a5;
    *(double *)&long long v93 = v27;
    *((double *)&v93 + 1) = -v22;
    *(double *)&long long v94 = v17;
    *((double *)&v94 + 1) = v18;
    v95[0] = v41;
    v95[1] = v42;
    *(void *)&v95[8] = v75;
    v95[16] = !v40;
    uint64_t v43 = *(void (**)(CGAffineTransform *, ValueMetadata *, _UNKNOWN **))(*(void *)a5 + 136);
    id v44 = v15;
    _s7SwiftUI4PathV7StorageOWOrTm_0(a4, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
    swift_retain();
    v43(&location, &type metadata for ShapeLayerHelper, &protocol witness table for ShapeLayerHelper);
    uint64_t v45 = *(void *)&location.b;
    if (*(void *)&location.b != *(void *)&v16)
    {
      swift_unknownObjectRelease();

      swift_unknownObjectRelease();
      double v46 = specialized static ShapeLayerHelper.makeLayerBounds(size:path:layerType:contentsScale:)(v17, v18, *(double *)(*(void *)&v19 + 24), a4, v45);
      double v22 = v47;
      uint64_t v24 = v48;
      uint64_t v26 = v49;
      *((double *)&v91 + 1) = v46;
      *(double *)&long long v92 = v47;
      txCGFloat a = v46;
      *(double *)&long long v93 = -v46;
      *((double *)&v93 + 1) = -v47;
      v84[0] = 3;
      uint64_t v50 = (void *)(*(uint64_t (**)(uint64_t, unsigned char *))((v78 & 0xFFFFFFFFFFFFFFFCLL) + 96))(v45, v84);
      swift_unknownObjectRetain();
      id v51 = (id)CoreViewLayer(v78 & 3, v50);
      int64x2_t v104 = vdupq_n_s64(0x7FF0000000000000uLL);
      int64x2_t v105 = v104;
      LOWORD(v106) = 3;
      uint64_t v52 = swift_unknownObjectRetain();
      DisplayList.ViewUpdater.ViewInfo.init(view:layer:container:state:)(v52, (uint64_t)v51, (uint64_t)v50, (uint64_t)&v104, (int16x8_t *)v84);
      __int16 v53 = *(_WORD *)&v84[56];
      __int16 v54 = v87;
      int v55 = DWORD1(v87);
      char v56 = BYTE8(v87);
      char v57 = BYTE9(v87);
      uint64_t v58 = v88;
      long long v60 = v85;
      long long v59 = v86;
      long long v61 = *(_OWORD *)&v84[24];
      long long v62 = *(_OWORD *)&v84[40];
      long long v63 = *(_OWORD *)&v84[8];
      *(void *)a1 = *(void *)v84;
      *(_OWORD *)(a1 + 8) = v63;
      *(_OWORD *)(a1 + 24) = v61;
      *(_OWORD *)(a1 + 40) = v62;
      *(_WORD *)(a1 + 56) = v53;
      *(_OWORD *)(a1 + 64) = v60;
      *(_OWORD *)(a1 + 80) = v59;
      *(_WORD *)(a1 + 96) = v54;
      *(_DWORD *)(a1 + 100) = v55;
      *(unsigned char *)(a1 + 104) = v56;
      *(unsigned char *)(a1 + 105) = v57;
      *(void *)(a1 + 112) = v58;
      objc_storeStrong((id *)&location, (id)v63);
      uint64_t v64 = *(void (**)(CGAffineTransform *, ValueMetadata *, _UNKNOWN **))(**((void **)&v92 + 1) + 136);
      swift_retain();
      v64(&location, &type metadata for ShapeLayerHelper, &protocol witness table for ShapeLayerHelper);
      swift_unknownObjectRelease();
      swift_release();
    }
    if (v22 == 0.0)
    {
      outlined init with take of Path.Storage(a4, (uint64_t)&v104);
      _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)&v104, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
      uint64_t v65 = v74;
      uint64_t v67 = *(void *)&v81;
      uint64_t v66 = *(void *)&v82;
      uint64_t v68 = *(void *)&v80;
      unsigned __int8 v69 = v79;
    }
    else
    {
      CGAffineTransformMakeTranslation((CGAffineTransform *)v84, -v22, -v22);
      int64x2_t v104 = *(int64x2_t *)v84;
      int64x2_t v105 = *(int64x2_t *)&v84[16];
      long long v106 = *(_OWORD *)&v84[32];
      Path.applying(_:)((double *)v104.i64, (uint64_t)v100);
      uint64_t v65 = v100[0];
      uint64_t v66 = v100[1];
      uint64_t v67 = v100[2];
      uint64_t v68 = v100[3];
      unsigned __int8 v69 = v101;
    }
    v102[0] = v65;
    v102[1] = v66;
    v102[2] = v67;
    v102[3] = v68;
    unsigned __int8 v103 = v69;
    (*(void (**)(void *, void))((v78 & 0xFFFFFFFFFFFFFFFCLL) + 120))(v102, *(void *)a1);
    outlined consume of Path.Storage(v65, v66, v67, v68, v69);
    if ((*(unsigned char *)(a1 + 57) & 0x20) == 0) {
      *(unsigned char *)(a1 + 57) |= 0x20u;
    }
    long long v87 = v94;
    long long v88 = *(_OWORD *)v95;
    char v89 = v95[16];
    *(CGAffineTransform *)float v84 = location;
    *(_OWORD *)&v84[48] = v91;
    long long v85 = v92;
    long long v86 = v93;
    outlined release of ShapeLayerHelper((uint64_t)v84);
    double v20 = txa;
  }
  long long v70 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&location.CGFloat a = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&location.CGFloat c = v70;
  *(_OWORD *)&location.tCGFloat x = *(_OWORD *)(a2 + 64);
  CGAffineTransformTranslate((CGAffineTransform *)v84, &location, v20, v22);
  double result = *(double *)v84;
  long long v72 = *(_OWORD *)&v84[16];
  long long v73 = *(_OWORD *)&v84[32];
  *(_OWORD *)(a2 + 32) = *(_OWORD *)v84;
  *(_OWORD *)(a2 + 48) = v72;
  *(_OWORD *)(a2 + 64) = v73;
  *(void *)uint64_t v83 = v24;
  *((void *)v83 + 1) = v26;
  return result;
}

double specialized static ShapeLayerHelper.makeLayerBounds(size:path:layerType:contentsScale:)(double a1, double a2, double a3, uint64_t a4, uint64_t a5)
{
  if (type metadata accessor for ColorShapeLayer() == a5) {
    return 0.0;
  }
  Path.boundingRect.getter();
  double x = v11.origin.x;
  if (CGRectIsNull(v11)) {
    double v9 = 0.0;
  }
  else {
    double v9 = x;
  }
  if (type metadata accessor for PaintShapeLayer() == a5) {
    CGRect.roundCoordinatesToNearestOrUp(toMultipleOf:)(1.0 / a3);
  }
  return v9;
}

uint64_t type metadata accessor for ColorShapeLayer()
{
  return self;
}

uint64_t _AnyResolvedPaint.visit<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void, void, uint64_t, uint64_t))(a3 + 8))(v3 + *(void *)(*(void *)v3 + 184), *(void *)(*(void *)v3 + 168), *(void *)(*(void *)v3 + 176), a2, a3);
}

BOOL DisplayList.ViewUpdater.Model.State.hasDODEffects.getter()
{
  if (*(void *)(v0 + 96)) {
    return 1;
  }
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v3 = *(void *)(v2 + 16);
  if (!v3) {
    return 0;
  }
  LOBYTE(result) = 0;
  uint64_t v4 = (unsigned __int8 *)(v2 + 148);
  uint64_t v5 = 1;
  do
  {
    if (result)
    {
LABEL_7:
      BOOL result = 1;
      if (v3 == v5) {
        return result;
      }
      goto LABEL_14;
    }
    unsigned int v6 = *v4;
    if (v6 >= 2)
    {
      if (v6 == 2) {
        goto LABEL_7;
      }
      BOOL result = 0;
      if (v3 == v5) {
        return result;
      }
    }
    else
    {
      BOOL result = (*(void *)(v4 - 108) & 1) == 0;
      if (v3 == v5) {
        return result;
      }
    }
LABEL_14:
    v4 += 120;
  }
  while (!__OFADD__(v5++, 1));
  __break(1u);
  return 0;
}

void Path.boundingRect.getter()
{
  uint64_t v1 = *(void *)v0;
  switch(*(unsigned char *)(v0 + 32))
  {
    case 3:
    case 4:
      goto LABEL_10;
    case 5:
      if (*(unsigned char *)(v1 + 16))
      {
        if (*(unsigned char *)(v1 + 16) == 1)
        {
          swift_retain();
          RBPathGetBoundingRect();
        }
        else
        {
          swift_retain();
          MEMORY[0x24C526C90](v1 + 24);
        }
        goto LABEL_8;
      }
      uint64_t v2 = *(void **)(v1 + 24);
      if (v2)
      {
        uint64_t v3 = v2;
        swift_retain();
        CGPathGetPathBoundingBox(v3);

LABEL_8:
        _s7SwiftUI4PathVWOsTm_0(v0, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
        return;
      }
      __break(1u);
LABEL_10:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return;
    default:
      return;
  }
}

uint64_t type metadata accessor for PaintShapeLayer()
{
  return self;
}

uint64_t outlined release of ShapeLayerHelper(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  unsigned __int8 v6 = *(unsigned char *)(a1 + 48);

  outlined consume of Path.Storage(v2, v3, v4, v5, v6);
  swift_release();
  return a1;
}

void updateContent(shapeLayer:color:path:origin:eoFill:)(void *a1, uint64_t a2, char a3, float a4, float a5, float a6, float a7, double a8, double a9)
{
  if (a8 == 0.0 && a9 == 0.0)
  {
    uint64_t v15 = *(void *)a2;
    uint64_t v16 = *(void *)(a2 + 8);
    uint64_t v17 = *(void *)(a2 + 16);
    uint64_t v18 = *(void *)(a2 + 24);
    unsigned __int8 v19 = *(unsigned char *)(a2 + 32);
    id v20 = a1;
    _s7SwiftUI4PathV7StorageOWOrTm_0(a2, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
  }
  else
  {
    CGAffineTransformMakeTranslation(&v34, -a8, -a9);
    id v21 = a1;
    Path.applying(_:)(&v34.a, (uint64_t)v27);
    uint64_t v15 = v27[0];
    uint64_t v16 = v27[1];
    uint64_t v17 = v27[2];
    uint64_t v18 = v27[3];
    unsigned __int8 v19 = v28;
  }
  uint64_t v29 = v15;
  uint64_t v30 = v16;
  uint64_t v31 = v17;
  uint64_t v32 = v18;
  unsigned __int8 v33 = v19;
  CGPathRef v22 = Path.cgPath.getter();
  outlined consume of Path.Storage(v15, v16, v17, v18, v19);
  objc_msgSend(a1, sel_setPath_, v22);

  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v23 = (void *)specialized ObjectCache.subscript.getter(a4, a5, a6, a7);
  objc_msgSend(a1, sel_setFillColor_, v23);

  uint64_t v24 = (id *)MEMORY[0x263F15AC0];
  if ((a3 & 1) == 0) {
    uint64_t v24 = (id *)MEMORY[0x263F15AC8];
  }
  id v25 = *v24;
  objc_msgSend(a1, sel_setFillRule_, v25);

  objc_msgSend(a1, sel_setStrokeColor_, 0);
}

CGPathRef Path.cgPath.getter()
{
  uint64_t v1 = *(void *)v0;
  switch(*(unsigned char *)(v0 + 32))
  {
    case 1:
      uint64_t v7 = *(void *)v0;
      uint64_t v8 = *(void *)(v0 + 8);
      uint64_t v9 = *(void *)(v0 + 16);
      uint64_t v10 = *(void *)(v0 + 24);
      return CGPathCreateWithEllipseInRect(*(CGRect *)&v7, 0);
    case 2:
      return FixedRoundedRect.cgPath.getter();
    case 3:
    case 4:
      goto LABEL_23;
    case 5:
      if (*(unsigned char *)(v1 + 16))
      {
        if (*(unsigned char *)(v1 + 16) == 1)
        {
          swift_retain();
        }
        else
        {
          uint64_t v12 = one-time initialization token for bufferCallbacks;
          swift_retain();
          if (v12 != -1) {
            swift_once();
          }
        }
        uint64_t v13 = RBPathCopyCGPath();
        _s7SwiftUI4PathVWOsTm_0(v0, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
        return (CGPathRef)v13;
      }
      else
      {
        CGRect v11 = *(void **)(v1 + 24);
        if (v11)
        {
          return (CGPathRef)v11;
        }
        else
        {
          __break(1u);
LABEL_23:
          CGPathRef result = (CGPathRef)_assertionFailure(_:_:file:line:flags:)();
          __break(1u);
        }
      }
      return result;
    case 6:
      uint64_t v2 = *MEMORY[0x263F001A0];
      uint64_t v3 = *(void *)(MEMORY[0x263F001A0] + 8);
      uint64_t v4 = *(void *)(MEMORY[0x263F001A0] + 16);
      uint64_t v5 = *(void *)(MEMORY[0x263F001A0] + 24);
      goto LABEL_11;
    default:
      uint64_t v2 = *(void *)v0;
      uint64_t v3 = *(void *)(v0 + 8);
      uint64_t v4 = *(void *)(v0 + 16);
      uint64_t v5 = *(void *)(v0 + 24);
LABEL_11:
      return CGPathCreateWithRect(*(CGRect *)&v2, 0);
  }
}

uint64_t ResolvedGradient.constantColor.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = (*v0)[1].i64[0];
  if (!v2) {
    return 0;
  }
  float32x4_t v3 = v1[2];
  uint64_t v4 = v2 - 1;
  if (!v4) {
    return v3.i64[0];
  }
  for (i = v1 + 5; (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_f32(*i, v3)), 0xFuLL))) & 1) != 0; i += 3)
  {
    if (!--v4) {
      return v3.i64[0];
    }
  }
  return 0;
}

uint64_t type metadata accessor for GradientLayer()
{
  return self;
}

uint64_t GradientLayer.update(gradient:function:size:bounds:)(uint64_t a1, long long *a2, double a3, double a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  uint64_t v16 = *(void *)a1;
  int v17 = *(unsigned __int8 *)(a1 + 8);
  if (one-time initialization token for v4 != -1) {
    swift_once();
  }
  unsigned int v18 = static Semantics.v4;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC != 1)
  {
    if (static Semantics.forced < v18) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  if (dyld_program_sdk_at_least()) {
LABEL_9:
  }
    objc_msgSend(v8, sel_setPremultiplied_, 1);
LABEL_10:
  specialized GradientLayer.GradientGeometry.init(size:function:bounds:)(a2, (uint64_t)v30, a3, a4, a5, a6, a7, a8);
  objc_msgSend(v8, sel_setType_, v35);
  objc_msgSend(v8, sel_setStartPoint_, v31, v32);
  objc_msgSend(v8, sel_setEndPoint_, v33, v34);
  uint64_t v28 = v16;
  char v29 = v17;
  specialized static GradientLayer.clippedValues(gradient:function:)(&v28, a2);
  uint64_t v20 = v19;
  specialized _arrayForceCast<A, B>(_:)(v21);
  swift_bridgeObjectRelease();
  isCGFloat a = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v8, sel_setColors_, isa);

  type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSNumber);
  Class v23 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v8, sel_setLocations_, v23);

  if (v20)
  {
    type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for CAMediaTimingFunction);
    v24.super.isCGFloat a = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v24.super.isCGFloat a = 0;
  }
  objc_msgSend(v8, sel_setInterpolations_, v24.super.isa);

  if (v17)
  {
    if (v17 == 1)
    {
      if (one-time initialization token for srgbExtendedLinear != -1) {
        swift_once();
      }
      id v25 = (id)static Color.Resolved.srgbExtendedLinear;
    }
    else
    {
      id v25 = (id)_CGColorSpaceGetPerceptual();
    }
  }
  else
  {
    if (one-time initialization token for srgbExtended != -1) {
      swift_once();
    }
    id v25 = (id)static Color.Resolved.srgbExtended;
  }
  uint64_t v26 = v25;
  objc_msgSend(v8, sel_setColorSpace_, v25);

  return outlined release of GradientLayer.GradientGeometry((uint64_t)v30);
}

uint64_t _CGColorSpaceGetPerceptual()
{
  if (_CGColorSpaceGetPerceptual_once != -1) {
    dispatch_once(&_CGColorSpaceGetPerceptual_once, &__block_literal_global_133);
  }
  return _CGColorSpaceGetPerceptual_space;
}

uint64_t specialized _arrayForceCast<A, B>(_:)(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v3 = MEMORY[0x263F8EE78];
  if (!v2) {
    return v3;
  }
  uint64_t v13 = MEMORY[0x263F8EE78];
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        MEMORY[0x24C523D60](i, a1);
        type metadata accessor for CGColorRef(0);
        swift_dynamicCast();
        uint64_t v3 = v13;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v3 + 16) + 1, 1);
          uint64_t v3 = v13;
        }
        unint64_t v7 = *(void *)(v3 + 16);
        unint64_t v6 = *(void *)(v3 + 24);
        if (v7 >= v6 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
          uint64_t v3 = v13;
        }
        *(void *)(v3 + 16) = v7 + 1;
        outlined init with take of Any(v12, (_OWORD *)(v3 + 32 * v7 + 32));
      }
    }
    else
    {
      uint64_t v8 = (id *)(a1 + 32);
      type metadata accessor for CGColorRef(0);
      do
      {
        id v9 = *v8;
        swift_dynamicCast();
        uint64_t v3 = v13;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v3 + 16) + 1, 1);
          uint64_t v3 = v13;
        }
        unint64_t v11 = *(void *)(v3 + 16);
        unint64_t v10 = *(void *)(v3 + 24);
        if (v11 >= v10 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
          uint64_t v3 = v13;
        }
        *(void *)(v3 + 16) = v11 + 1;
        outlined init with take of Any(v12, (_OWORD *)(v3 + 32 * v11 + 32));
        ++v8;
        --v2;
      }
      while (v2);
    }
    return v3;
  }
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  long long v13;
  uint64_t v14;
  _UNKNOWN **v15;
  uint64_t v16;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v3 = MEMORY[0x263F8EE78];
  if (!v2) {
    return v3;
  }
  uint64_t v16 = MEMORY[0x263F8EE78];
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    uint64_t v3 = v16;
    if ((a1 & 0xC000000000000001) != 0)
    {
      uint64_t v5 = 0;
      do
      {
        unint64_t v6 = MEMORY[0x24C523D60](v5, a1);
        uint64_t v16 = v3;
        uint64_t v8 = *(void *)(v3 + 16);
        unint64_t v7 = *(void *)(v3 + 24);
        if (v8 >= v7 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
          uint64_t v3 = v16;
        }
        ++v5;
        CGFloat v14 = type metadata accessor for ViewResponder();
        uint64_t v15 = &protocol witness table for ViewResponder;
        *(void *)&uint64_t v13 = v6;
        *(void *)(v3 + 16) = v8 + 1;
        outlined init with take of ScrollStateRequest(&v13, v3 + 40 * v8 + 32);
      }
      while (v2 != v5);
    }
    else
    {
      id v9 = (uint64_t *)(a1 + 32);
      do
      {
        unint64_t v10 = *v9;
        uint64_t v16 = v3;
        unint64_t v11 = *(void *)(v3 + 16);
        uint64_t v12 = *(void *)(v3 + 24);
        swift_retain();
        if (v11 >= v12 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v11 + 1, 1);
          uint64_t v3 = v16;
        }
        CGFloat v14 = type metadata accessor for ViewResponder();
        uint64_t v15 = &protocol witness table for ViewResponder;
        *(void *)&uint64_t v13 = v10;
        *(void *)(v3 + 16) = v11 + 1;
        outlined init with take of ScrollStateRequest(&v13, v3 + 40 * v11 + 32);
        ++v9;
        --v2;
      }
      while (v2);
    }
    return v3;
  }
  __break(1u);
  return result;
}

void type metadata accessor for CGColorRef(uint64_t a1)
{
}

uint64_t outlined release of GradientLayer.GradientGeometry(uint64_t a1)
{
  return a1;
}

void specialized GradientLayer.GradientGeometry.init(size:function:bounds:)(long long *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, CGFloat a5@<D2>, CGFloat a6@<D3>, CGFloat a7@<D4>, CGFloat a8@<D5>)
{
  uint64_t v71 = *MEMORY[0x263EF8340];
  outlined init with take of GradientLayer.Function(a1, (uint64_t)&v66);
  switch(v70)
  {
    case 1:
      double v49 = v66;
      double v52 = v66;
      double v61 = v67;
      if (v68 > v69) {
        double v50 = v68;
      }
      else {
        double v50 = v69;
      }
      id v17 = (id)*MEMORY[0x263F15DE0];
      v82.origin.double x = a5;
      v82.origin.CGFloat y = a6;
      v82.size.CGFloat width = a7;
      v82.size.CGFloat height = a8;
      double v58 = v50 / CGRectGetWidth(v82);
      v83.origin.double x = a5;
      v83.origin.CGFloat y = a6;
      v83.size.CGFloat width = a7;
      v83.size.CGFloat height = a8;
      double v55 = v50 / CGRectGetHeight(v83);
      v84.origin.double x = a5;
      v84.origin.CGFloat y = a6;
      v84.size.CGFloat width = a7;
      v84.size.CGFloat height = a8;
      double v65 = (v49 * CGRectGetWidth(v84) + a5) / a3;
      v85.origin.double x = a5;
      v85.origin.CGFloat y = a6;
      v85.size.CGFloat width = a7;
      v85.size.CGFloat height = a8;
      double v27 = (v61 * CGRectGetHeight(v85) + a6) / a4;
      v86.origin.double x = a5;
      v86.origin.CGFloat y = a6;
      v86.size.CGFloat width = a7;
      v86.size.CGFloat height = a8;
      double v33 = ((v52 - v58) * CGRectGetWidth(v86) + a5) / a3;
      v87.origin.double x = a5;
      v87.origin.CGFloat y = a6;
      v87.size.CGFloat width = a7;
      v87.size.CGFloat height = a8;
      CGFloat Height = CGRectGetHeight(v87);
      double v26 = v65;
      double v22 = a3;
      double v42 = (v61 - v55) * Height;
      goto LABEL_14;
    case 2:
      double v35 = v66;
      double v54 = v66;
      double v57 = v67;
      double v60 = a4;
      double v36 = v68;
      double v37 = v69;
      id v17 = (id)*MEMORY[0x263F15DE0];
      v76.origin.double x = a5;
      v76.origin.CGFloat y = a6;
      v76.size.CGFloat width = a7;
      v76.size.CGFloat height = a8;
      double v63 = (v35 * CGRectGetWidth(v76) + a5) / a3;
      v77.origin.double x = a5;
      v77.origin.CGFloat y = a6;
      v77.size.CGFloat width = a7;
      v77.size.CGFloat height = a8;
      double v27 = (v57 * CGRectGetHeight(v77) + a6) / v60;
      if (v36 > v37) {
        double v38 = v36;
      }
      else {
        double v38 = v37;
      }
      double v39 = v54 - v38;
      double v40 = v57 - v38;
      v78.origin.double x = a5;
      v78.origin.CGFloat y = a6;
      v78.size.CGFloat width = a7;
      v78.size.CGFloat height = a8;
      double v33 = (v39 * CGRectGetWidth(v78) + a5) / a3;
      v79.origin.double x = a5;
      v79.origin.CGFloat y = a6;
      v79.size.CGFloat width = a7;
      v79.size.CGFloat height = a8;
      CGFloat v41 = CGRectGetHeight(v79);
      double v22 = a3;
      double v42 = v40 * v41;
      a4 = v60;
      double v26 = v63;
LABEL_14:
      double v34 = (v42 + a6) / a4;
      break;
    case 3:
      double v43 = a4;
      double v44 = v66;
      double v45 = v67;
      double v64 = v68;
      id v17 = (id)*MEMORY[0x263F15DD8];
      v80.origin.double x = a5;
      v80.origin.CGFloat y = a6;
      v80.size.CGFloat width = a7;
      v80.size.CGFloat height = a8;
      double v46 = (v44 * CGRectGetWidth(v80) + a5) / a3;
      v81.origin.double x = a5;
      v81.origin.CGFloat y = a6;
      v81.size.CGFloat width = a7;
      v81.size.CGFloat height = a8;
      double v47 = v45 * CGRectGetHeight(v81);
      a4 = v43;
      double v27 = (v47 + a6) / v43;
      __double2 v48 = __sincos_stret(v64);
      double v26 = v46;
      double v22 = a3;
      double v33 = v46 + v48.__cosval;
      double v34 = v48.__sinval + v27;
      break;
    default:
      double v15 = v66;
      double v16 = v67;
      double v59 = v68;
      double v62 = v69;
      double v53 = a3;
      if (a3 <= a4) {
        a3 = a4;
      }
      id v17 = (id)*MEMORY[0x263F15DD0];
      v72.origin.double x = a5;
      v72.origin.CGFloat y = a6;
      v72.size.CGFloat width = a7;
      v72.size.CGFloat height = a8;
      double v56 = (v15 * CGRectGetWidth(v72) + a5) / a3;
      v73.origin.double x = a5;
      v73.origin.CGFloat y = a6;
      v73.size.CGFloat width = a7;
      v73.size.CGFloat height = a8;
      double v18 = (v16 * CGRectGetHeight(v73) + a6) / a3;
      v74.origin.double x = a5;
      v74.origin.CGFloat y = a6;
      v74.size.CGFloat width = a7;
      v74.size.CGFloat height = a8;
      double v19 = a4;
      double v20 = (v59 * CGRectGetWidth(v74) + a5) / a3;
      v75.origin.double x = a5;
      v75.origin.CGFloat y = a6;
      v75.size.CGFloat width = a7;
      v75.size.CGFloat height = a8;
      CGFloat v21 = CGRectGetHeight(v75);
      double v22 = v53;
      double v23 = (v62 * v21 + a6) / a3;
      double v24 = v56 + v23 - v18;
      double v25 = v18 - (v20 - v56);
      double v26 = a3 / v53 * v56;
      double v27 = a3 / v19 * v18;
      double v28 = a3 / v53 * v20;
      a4 = v19;
      double v29 = a3 / v19 * v23;
      double v30 = a3 / v53 * v24 - v26;
      double v31 = a3 / v19 * v25 - v27;
      double v32 = ((v29 - v27) * v31 + (v28 - v26) * v30) / (v31 * v31 + v30 * v30);
      double v33 = v28 - v30 * v32;
      double v34 = v29 - v31 * v32;
      break;
  }
  *(double *)a2 = v22;
  *(double *)(a2 + 8) = a4;
  *(double *)(a2 + 16) = v26;
  *(double *)(a2 + 24) = v27;
  *(double *)(a2 + 32) = v33;
  *(double *)(a2 + 40) = v34;
  *(void *)(a2 + 48) = v17;
}

void updateContent(shapeLayer:color:strokedPath:origin:style:)(void *a1, uint64_t a2, uint64_t a3, float a4, float a5, float a6, float a7, double a8, double a9)
{
  if (a8 == 0.0 && a9 == 0.0)
  {
    uint64_t v16 = *(void *)a2;
    uint64_t v17 = *(void *)(a2 + 8);
    uint64_t v18 = *(void *)(a2 + 16);
    uint64_t v19 = *(void *)(a2 + 24);
    unsigned __int8 v20 = *(unsigned char *)(a2 + 32);
    id v21 = a1;
    _s7SwiftUI4PathV7StorageOWOrTm_0(a2, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
  }
  else
  {
    CGAffineTransformMakeTranslation(&v44, -a8, -a9);
    id v22 = a1;
    Path.applying(_:)(&v44.a, (uint64_t)v37);
    uint64_t v16 = v37[0];
    uint64_t v17 = v37[1];
    uint64_t v18 = v37[2];
    uint64_t v19 = v37[3];
    unsigned __int8 v20 = v38;
  }
  uint64_t v39 = v16;
  uint64_t v40 = v17;
  uint64_t v41 = v18;
  uint64_t v42 = v19;
  unsigned __int8 v43 = v20;
  CGPathRef v23 = Path.cgPath.getter();
  outlined consume of Path.Storage(v16, v17, v18, v19, v20);
  objc_msgSend(a1, sel_setPath_, v23);

  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  double v24 = (void *)specialized ObjectCache.subscript.getter(0.0, 0.0, 0.0, 0.0);
  objc_msgSend(a1, sel_setFillColor_, v24);

  double v25 = (void *)specialized ObjectCache.subscript.getter(a4, a5, a6, a7);
  objc_msgSend(a1, sel_setStrokeColor_, v25);

  objc_msgSend(a1, sel_setLineWidth_, *(double *)a3);
  objc_msgSend(a1, sel_setMiterLimit_, *(double *)(a3 + 16));
  double v26 = (void *)MEMORY[0x263F15E78];
  int v27 = *(_DWORD *)(a3 + 8);
  double v28 = (void *)MEMORY[0x263F15E70];
  if (v27 != 1) {
    double v28 = (void *)MEMORY[0x263F15E68];
  }
  if (v27 != 2) {
    double v26 = v28;
  }
  objc_msgSend(a1, sel_setLineCap_, *v26);
  double v29 = (void *)MEMORY[0x263F15E80];
  int v30 = *(_DWORD *)(a3 + 12);
  double v31 = (void *)MEMORY[0x263F15E98];
  if (v30 != 1) {
    double v31 = (void *)MEMORY[0x263F15E88];
  }
  if (v30 != 2) {
    double v29 = v31;
  }
  objc_msgSend(a1, sel_setLineJoin_, *v29);
  objc_msgSend(a1, sel_setLineDashPhase_, *(double *)(a3 + 32));
  uint64_t v32 = *(void *)(a3 + 24);
  uint64_t v33 = *(void *)(v32 + 16);
  if (v33)
  {
    swift_bridgeObjectRetain();
    specialized ContiguousArray.reserveCapacity(_:)();
    double v34 = (double *)(v32 + 32);
    do
    {
      double v35 = *v34++;
      objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithDouble_, v35);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v33;
    }
    while (v33);
    outlined release of StrokeStyle(a3);
  }
  type metadata accessor for CAPresentationModifier(0, &lazy cache variable for type metadata for NSNumber);
  isCGFloat a = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(a1, sel_setLineDashPattern_, isa);
}

uint64_t type metadata completion function for ForEach()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityTraitSet()
{
  return &type metadata for AccessibilityTraitSet;
}

uint64_t static EventModifiers.command.getter()
{
  return 16;
}

Swift::Void __swiftcall ViewGraph.setContainerSize(_:)(SwiftUI::ViewSize a1)
{
  if (*(_DWORD *)(v1 + 272) != *MEMORY[0x263F288F8] && AGGraphSetValue())
  {
    swift_beginAccess();
    if (MEMORY[0x24C527E00](v1 + 200))
    {
      uint64_t v2 = *(void *)(v1 + 208);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t))(*(void *)(v2 + 8) + 16))(ObjectType);
      swift_unknownObjectRelease();
    }
  }
}

unsigned char *storeEnumTagSinglePayload for ContentSizeCategory(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF4)
  {
    unsigned int v6 = ((a2 - 245) >> 8) + 1;
    *uint64_t result = a2 + 11;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 11;
        break;
    }
  }
  return result;
}

uint64_t static ViewModifier.makeDebuggableView(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  int v31 = *a1;
  uint64_t v30 = *a2;
  int v8 = *((_DWORD *)a2 + 2);
  uint64_t v9 = a2[2];
  int v11 = *((_DWORD *)a2 + 6);
  int v10 = *((_DWORD *)a2 + 7);
  int v12 = *((_DWORD *)a2 + 9);
  int v28 = *((_DWORD *)a2 + 8);
  uint64_t v13 = a2[5];
  uint64_t v14 = a2[6];
  int v22 = *((_DWORD *)a2 + 15);
  int v23 = *((_DWORD *)a2 + 14);
  int v15 = *((_DWORD *)a2 + 18);
  int v20 = *((_DWORD *)a2 + 17);
  int v21 = *((_DWORD *)a2 + 16);
  int v16 = *((_DWORD *)a2 + 20);
  int v19 = *((_DWORD *)a2 + 19);
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  uint64_t v49 = v30;
  int v50 = v8;
  uint64_t v51 = v9;
  int v52 = v11;
  int v53 = v10;
  uint64_t v56 = v13;
  uint64_t v57 = v14;
  int v55 = v12;
  int v58 = v23;
  int v59 = v22;
  int v60 = v21;
  int v61 = v20;
  int v62 = v15;
  int v63 = v19;
  int v64 = v16;
  int v32 = v31;
  uint64_t v33 = v30;
  int v34 = v8;
  uint64_t v35 = v9;
  int v36 = v11;
  int v37 = v10;
  int v38 = 0;
  int v39 = v12;
  uint64_t v40 = v13;
  uint64_t v41 = v14;
  int v42 = v23;
  int v43 = v22;
  int v44 = v21;
  int v45 = v20;
  int v46 = v15;
  int v47 = v19;
  int v48 = v16;
  uint64_t v17 = *(void (**)(int *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 24);
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v17(&v32, &v33, a3, a4, a5, a6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  int v54 = v28;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)(a7, (uint64_t)&v49);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _FrameLayout(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance IgnoresAutomaticPaddingLayout(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, _OWORD *))specialized static UnaryLayout<>.makeViewImpl(modifier:inputs:body:));
}

float *Color.init(_:white:opacity:)(unsigned char *a1, double a2, double a3)
{
  if (*a1)
  {
    if (*a1 == 1)
    {
      char v11 = 1;
      unsigned int v4 = &v11;
    }
    else
    {
      char v12 = 2;
      unsigned int v4 = &v12;
    }
    return (float *)specialized Color.init(_:red:green:blue:opacity:)(v4, a2, a2, a2, a3);
  }
  else
  {
    float v5 = a2;
    if (v5 <= 0.0) {
      float v6 = -v5;
    }
    else {
      float v6 = a2;
    }
    if (v6 <= 0.04045)
    {
      float v7 = v6 * 0.077399;
    }
    else
    {
      float v7 = 1.0;
      if (v6 != 1.0) {
        float v7 = powf((float)(v6 * 0.94787) + 0.052133, 2.4);
      }
    }
    if (v5 <= 0.0) {
      float v9 = -v7;
    }
    else {
      float v9 = v7;
    }
    type metadata accessor for ColorBox<ResolvedColorProvider>(0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<ResolvedColorProvider>, (void (*)(void))lazy protocol witness table accessor for type ResolvedColorProvider and conformance ResolvedColorProvider);
    uint64_t result = (float *)swift_allocObject();
    result[4] = v9;
    result[5] = v9;
    result[6] = v9;
    float v10 = a3;
    result[7] = v10;
  }
  return result;
}

uint64_t specialized Color.init(_:red:green:blue:opacity:)(unsigned char *a1, double a2, double a3, double a4, double a5)
{
  if (*a1)
  {
    if (*a1 != 1)
    {
      type metadata accessor for ColorBox<ResolvedColorProvider>(0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<Color.DisplayP3>, (void (*)(void))lazy protocol witness table accessor for type Color.DisplayP3 and conformance Color.DisplayP3);
      uint64_t result = swift_allocObject();
      *(double *)(result + 16) = a2;
      *(double *)(result + 24) = a3;
      *(double *)(result + 32) = a4;
      float v15 = a5;
      *(float *)(result + 40) = v15;
      return result;
    }
    float v9 = a2;
    float v10 = a3;
    float v11 = a4;
  }
  else
  {
    float v12 = a2;
    if (v12 <= 0.0) {
      float v13 = -v12;
    }
    else {
      float v13 = a2;
    }
    if (v13 <= 0.04045)
    {
      float v14 = v13 * 0.077399;
    }
    else
    {
      float v14 = 1.0;
      if (v13 != 1.0) {
        float v14 = powf((float)(v13 * 0.94787) + 0.052133, 2.4);
      }
    }
    if (v12 <= 0.0) {
      float v9 = -v14;
    }
    else {
      float v9 = v14;
    }
    float v17 = a3;
    if (v17 <= 0.0) {
      float v18 = -v17;
    }
    else {
      float v18 = v17;
    }
    if (v18 <= 0.04045)
    {
      float v19 = v18 * 0.077399;
    }
    else
    {
      float v19 = 1.0;
      if (v18 != 1.0) {
        float v19 = powf((float)(v18 * 0.94787) + 0.052133, 2.4);
      }
    }
    if (v17 <= 0.0) {
      float v10 = -v19;
    }
    else {
      float v10 = v19;
    }
    float v20 = a4;
    if (v20 <= 0.0) {
      float v21 = -v20;
    }
    else {
      float v21 = v20;
    }
    if (v21 <= 0.04045)
    {
      float v22 = v21 * 0.077399;
    }
    else
    {
      float v22 = 1.0;
      if (v21 != 1.0) {
        float v22 = powf((float)(v21 * 0.94787) + 0.052133, 2.4);
      }
    }
    if (v20 <= 0.0) {
      float v11 = -v22;
    }
    else {
      float v11 = v22;
    }
  }
  type metadata accessor for ColorBox<ResolvedColorProvider>(0, (unint64_t *)&lazy cache variable for type metadata for ColorBox<ResolvedColorProvider>, (void (*)(void))lazy protocol witness table accessor for type ResolvedColorProvider and conformance ResolvedColorProvider);
  uint64_t result = swift_allocObject();
  *(float *)(result + 16) = v9;
  *(float *)(result + 20) = v10;
  *(float *)(result + 24) = v11;
  float v23 = a5;
  *(float *)(result + 28) = v23;
  return result;
}

void type metadata accessor for ColorBox<ResolvedColorProvider>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for ColorBox();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Color.DisplayP3 and conformance Color.DisplayP3()
{
  unint64_t result = lazy protocol witness table cache variable for type Color.DisplayP3 and conformance Color.DisplayP3;
  if (!lazy protocol witness table cache variable for type Color.DisplayP3 and conformance Color.DisplayP3)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.DisplayP3 and conformance Color.DisplayP3);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Color.DisplayP3 and conformance Color.DisplayP3;
  if (!lazy protocol witness table cache variable for type Color.DisplayP3 and conformance Color.DisplayP3)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.DisplayP3 and conformance Color.DisplayP3);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Color.DisplayP3 and conformance Color.DisplayP3;
  if (!lazy protocol witness table cache variable for type Color.DisplayP3 and conformance Color.DisplayP3)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.DisplayP3 and conformance Color.DisplayP3);
  }
  return result;
}

void ScrollGeometry.init(contentOffset:contentSize:contentInsets:containerSize:visibleRect:)(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>, double a6@<D4>, double a7@<D5>, double a8@<D6>, double a9@<D7>, long long a10, long long a11, uint64_t a12, uint64_t a13)
{
  *(double *)a1 = a2;
  *(double *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a4;
  *(double *)(a1 + 24) = a5;
  *(double *)(a1 + 32) = a6;
  *(double *)(a1 + 40) = a7;
  *(double *)(a1 + 48) = a8;
  *(double *)(a1 + 56) = a9;
  *(_OWORD *)(a1 + 64) = a10;
  *(_OWORD *)(a1 + 80) = a11;
  *(void *)(a1 + 96) = a12;
  *(void *)(a1 + 104) = a13;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance _ValueTransactionModifier<A>(int *a1, uint64_t a2, uint64_t a3)
{
  return static _ValueTransactionModifier._makeInputs(modifier:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

ValueMetadata *type metadata accessor for ViewSize()
{
  return &type metadata for ViewSize;
}

ValueMetadata *type metadata accessor for ViewOrigin()
{
  return &type metadata for ViewOrigin;
}

__n128 __swift_memcpy28_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTag for ScrapeableContent.Content(void *a1)
{
  uint64_t v1 = *a1 >> 60;
  if (v1 <= 8) {
    return v1;
  }
  else {
    return (*a1 >> 3) + 9;
  }
}

uint64_t EnvironmentValues.foregroundStyle.setter(uint64_t a1, void (*a2)(uint64_t *, uint64_t, uint64_t *), void (*a3)(uint64_t, uint64_t))
{
  uint64_t v7 = *v3;
  swift_retain();
  swift_retain_n();
  a2(v3, a1, &v10);
  swift_release();
  swift_release();
  if (v3[1])
  {
    uint64_t v8 = *v3;
    swift_retain();
    swift_retain();
    a3(v7, v8);
    swift_release();
    swift_release();
  }
  swift_release();
  return swift_release();
}

void *assignWithCopy for _SafeAreaInsetsModifier(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v4 = a1 + 1;
  uint64_t v5 = a2[1];
  if (a1[1] == 1)
  {
    if (v5 != 1)
    {
      *unint64_t v4 = v5;
      swift_retain();
      return a1;
    }
    uint64_t v6 = 1;
  }
  else
  {
    if (v5 != 1)
    {
      *unint64_t v4 = v5;
      swift_retain();
      swift_release();
      return a1;
    }
    outlined release of ViewTransform((uint64_t)(a1 + 1));
    uint64_t v6 = a2[1];
  }
  *unint64_t v4 = v6;
  return a1;
}

_OWORD *_AnyLayoutBox.makeCache(subviews:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  float v19 = a2;
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 184);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v18 - v6;
  int v9 = *v8;
  uint64_t v10 = *((void *)v8 + 1);
  char v11 = *((unsigned char *)v8 + 16);
  char v12 = *((unsigned char *)v8 + 17);
  uint64_t v13 = (uint64_t)v2 + *(void *)(v3 + 200);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v13, v4);
  int v20 = v9;
  uint64_t v21 = v10;
  char v22 = v11;
  char v23 = v12;
  uint64_t v14 = *(void *)(v3 + 192);
  float v15 = *(void (**)(int *, uint64_t, uint64_t))(v14 + 32);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  __swift_allocate_boxed_opaque_existential_1(v24);
  v15(&v20, v4, v14);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  int v16 = v19;
  *float v19 = v4;
  return outlined init with take of Any(v24, v16 + 1);
}

uint64_t protocol witness for Layout.makeCache(subviews:) in conformance _HStackLayout@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  long long v5 = *v2;
  char v6 = *((unsigned char *)v2 + 16);
  int v7 = *a1;
  uint64_t v8 = *((void *)a1 + 1);
  char v9 = *((unsigned char *)a1 + 16);
  char v10 = *((unsigned char *)a1 + 17);
  uint64_t v11 = MEMORY[0x263F8EE78];
  swift_bridgeObjectRetain();
  StackLayout.makeChildren()();
  uint64_t result = 0;
  *(_OWORD *)a2 = v5;
  *(unsigned char *)(a2 + 16) = v6;
  *(unsigned char *)(a2 + 17) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0xFFF0000000000000;
  *(unsigned char *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0xFFF0000000000000;
  *(unsigned char *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 64) = 0uLL;
  *(_DWORD *)(a2 + 80) = v7;
  *(void *)(a2 + 88) = v8;
  *(unsigned char *)(a2 + 96) = v9;
  *(unsigned char *)(a2 + 97) = v10;
  *(unsigned char *)(a2 + 98) = 0;
  *(void *)(a2 + 104) = v11;
  return result;
}

void destroy for LineAttachment(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for EveryMinuteTimelineSchedule.Entries(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_245B8FE3C);
}

uint64_t type metadata completion function for AnimatableAttribute()
{
  uint64_t result = type metadata accessor for AnimatableAttributeHelper();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t static Alignment.topTrailing.getter()
{
  return static Alignment.center.getter(&one-time initialization token for topTrailing, (uint64_t)&static Alignment.topTrailing);
}

uint64_t *protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance BitVector(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = a2[1];
  if (*result >= *a2)
  {
    BOOL v5 = __OFSUB__(v2, v3);
    BOOL v4 = v2 - v3 < 0;
  }
  else
  {
    BOOL v5 = 0;
    BOOL v4 = 0;
  }
  if (v4 == v5) {
    __break(1u);
  }
  return result;
}

uint64_t EnvironmentValues.font.setter(uint64_t a1, void (*a2)(uint64_t *, uint64_t, uint64_t *), void (*a3)(uint64_t, uint64_t))
{
  uint64_t v7 = *v3;
  swift_retain();
  swift_retain_n();
  a2(v3, a1, &v10);
  swift_release();
  swift_release();
  if (v3[1])
  {
    uint64_t v8 = *v3;
    swift_retain();
    swift_retain();
    a3(v7, v8);
    swift_release();
    swift_release();
  }
  swift_release();
  return swift_release();
}

ValueMetadata *type metadata accessor for EmptyHoverEffect()
{
  return &type metadata for EmptyHoverEffect;
}

ValueMetadata *type metadata accessor for _ViewList_View()
{
  return &type metadata for _ViewList_View;
}

uint64_t default argument 2 of ImageResolutionContext.init(environment:textStyle:transaction:)()
{
  return *MEMORY[0x263F288F8];
}

ValueMetadata *type metadata accessor for _ViewList_ID.Canonical()
{
  return &type metadata for _ViewList_ID.Canonical;
}

uint64_t instantiation function for generic protocol witness table for ForEachState<A, B, C>.Evictor(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for ForEachList<A, B, C>.Init(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

ValueMetadata *type metadata accessor for ScrollPhaseState()
{
  return &type metadata for ScrollPhaseState;
}

void protocol witness for static _AttributeBody._destroySelf(_:) in conformance DynamicContainerInfo<A>()
{
}

Swift::Void __swiftcall DynamicContainerInfo.destroy()()
{
  unint64_t v2 = *(void *)(v1 + *(int *)(v0 + 52));
  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    if (v3) {
      goto LABEL_3;
    }
LABEL_15:
LABEL_17:
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v3) {
    goto LABEL_15;
  }
LABEL_3:
  if (v3 >= 1)
  {
    uint64_t v4 = 0;
    while ((v2 & 0xC000000000000001) != 0)
    {
      uint64_t v5 = MEMORY[0x24C523D60](v4, v2);
      if (*(void *)(v5 + 56)) {
        goto LABEL_8;
      }
LABEL_9:
      uint64_t v6 = swift_beginAccess();
      if (*(unsigned char *)(v5 + 84) == 3)
      {
        MEMORY[0x270FA5388](v6);
        id v8 = v7;
        AGSubgraphApply();

        AGSubgraphInvalidate();
      }
      ++v4;
      swift_release();
      if (v3 == v4) {
        goto LABEL_17;
      }
    }
    uint64_t v5 = *(void *)(v2 + 8 * v4 + 32);
    swift_retain();
    if (!*(void *)(v5 + 56)) {
      goto LABEL_9;
    }
LABEL_8:
    swift_weakAssign();
    goto LABEL_9;
  }
  __break(1u);
}

uint64_t static Text.== infix(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  return specialized static Text.== infix(_:_:)(a1, a2, a3 & 1, a4, a5, a6, a7 & 1, a8);
}

uint64_t static ReuseTrace.traceReusePreventedFailure(_:)()
{
  uint64_t result = swift_beginAccess();
  if (static ReuseTrace.recorder) {
    return AGGraphAddTraceEvent();
  }
  return result;
}

{
  uint64_t vars8;

  return static ReuseTrace.traceReusePreventedFailure(_:)();
}

uint64_t base witness table accessor for _AttributeBody in MakeDefaultRepresentation<A>()
{
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for _ForegroundLayerViewModifier()
{
  return &type metadata for _ForegroundLayerViewModifier;
}

ValueMetadata *type metadata accessor for CarPlayInterfaceIdiom()
{
  return &type metadata for CarPlayInterfaceIdiom;
}

ValueMetadata *type metadata accessor for TextSuffixModifier()
{
  return &type metadata for TextSuffixModifier;
}

ValueMetadata *type metadata accessor for EventModifiers()
{
  return &type metadata for EventModifiers;
}

ValueMetadata *type metadata accessor for ScrollPhase()
{
  return &type metadata for ScrollPhase;
}

uint64_t View.padding(_:)(uint64_t a1, double a2)
{
  v3[0] = 15;
  double v4 = a2;
  double v5 = a2;
  double v6 = a2;
  double v7 = a2;
  char v8 = 0;
  return View.modifier<A>(_:)(v3, a1, &type metadata for _PaddingLayout);
}

uint64_t instantiation function for generic protocol witness table for LeafLayoutComputer<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t a1, unint64_t a2, unint64_t a3, char a4)
{
  unint64_t v8 = HIDWORD(a2);
  unint64_t v9 = HIDWORD(a3);
  int v10 = a4 & 1;
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(a3);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Swift::Int v12 = Hasher._finalize()();
  uint64_t v13 = -1 << *(unsigned char *)(v11 + 32);
  unint64_t v14 = v12 & ~v13;
  if ((*(void *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
  {
    uint64_t v15 = ~v13;
    while (1)
    {
      uint64_t v16 = *(void *)(v11 + 48) + 20 * v14;
      BOOL v17 = *(_DWORD *)v16 == a2 && *(_DWORD *)(v16 + 4) == v8;
      BOOL v18 = v17 && *(_DWORD *)(v16 + 8) == a3;
      BOOL v19 = v18 && *(_DWORD *)(v16 + 12) == v9;
      if (v19 && (((v10 != 0) ^ *(unsigned __int8 *)(v16 + 16)) & 1) == 0) {
        break;
      }
      unint64_t v14 = (v14 + 1) & v15;
      if (((*(void *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
        goto LABEL_17;
      }
    }
    uint64_t result = 0;
    uint64_t v21 = *(void *)(*v4 + 48) + 20 * v14;
    char v22 = *(unsigned char *)(v21 + 16);
    *(_OWORD *)a1 = *(_OWORD *)v21;
    *(unsigned char *)(a1 + 16) = v22;
  }
  else
  {
LABEL_17:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v24 = *v4;
    *double v4 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v10, v14, isUniquelyReferenced_nonNull_native);
    *double v4 = v24;
    swift_bridgeObjectRelease();
    *(_DWORD *)a1 = a2;
    *(_DWORD *)(a1 + 4) = v8;
    *(_DWORD *)(a1 + 8) = a3;
    *(_DWORD *)(a1 + 12) = v9;
    uint64_t result = 1;
    *(unsigned char *)(a1 + 16) = v10;
  }
  return result;
}

unint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(unint64_t result, unint64_t a2, char a3, unint64_t a4, char a5)
{
  Swift::UInt32 v7 = a2;
  Swift::UInt32 v8 = result;
  unint64_t v9 = HIDWORD(result);
  unint64_t v10 = HIDWORD(a2);
  int v11 = a3 & 1;
  unint64_t v12 = *(void *)(*v5 + 16);
  unint64_t v13 = *(void *)(*v5 + 24);
  if (v13 > v12 && (a5 & 1) != 0) {
    goto LABEL_24;
  }
  if (a5)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v13 > v12)
    {
      uint64_t result = (unint64_t)specialized _NativeSet.copy()();
      goto LABEL_24;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v14 = *v5;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  uint64_t result = Hasher._finalize()();
  uint64_t v15 = -1 << *(unsigned char *)(v14 + 32);
  a4 = result & ~v15;
  if ((*(void *)(v14 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a4))
  {
    uint64_t v16 = ~v15;
    while (1)
    {
      uint64_t v17 = *(void *)(v14 + 48) + 20 * a4;
      BOOL v18 = *(_DWORD *)v17 == v8 && *(_DWORD *)(v17 + 4) == v9;
      BOOL v19 = v18 && *(_DWORD *)(v17 + 8) == v7;
      BOOL v20 = v19 && *(_DWORD *)(v17 + 12) == v10;
      if (v20 && (((v11 != 0) ^ *(unsigned __int8 *)(v17 + 16)) & 1) == 0) {
        break;
      }
      a4 = (a4 + 1) & v16;
      if (((*(void *)(v14 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a4) & 1) == 0) {
        goto LABEL_24;
      }
    }
    uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
LABEL_24:
  uint64_t v21 = *v5;
  *(void *)(*v5 + 8 * (a4 >> 6) + 56) |= 1 << a4;
  uint64_t v22 = *(void *)(v21 + 48) + 20 * a4;
  *(_DWORD *)uint64_t v22 = v8;
  *(_DWORD *)(v22 + 4) = v9;
  *(_DWORD *)(v22 + 8) = v7;
  *(_DWORD *)(v22 + 12) = v10;
  *(unsigned char *)(v22 + 16) = v11;
  uint64_t v23 = *(void *)(v21 + 16);
  BOOL v24 = __OFADD__(v23, 1);
  uint64_t v25 = v23 + 1;
  if (v24) {
    __break(1u);
  }
  else {
    *(void *)(v21 + 16) = v25;
  }
  return result;
}

void type metadata accessor for _SetStorage<EventID>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for _SetStorage();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

double closure #1 in renderOnMainThread #1 <A>() in ViewRendererHost.renderDisplayList(_:asynchronously:time:nextTime:targetTimestamp:version:maxVersion:)@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X6>, double *a7@<X8>, double a8@<D0>, double a9@<D1>)
{
  uint64_t v15 = a2;
  __int16 v16 = a3;
  char v17 = BYTE2(a3);
  double v13 = a9;
  double v14 = a8;
  uint64_t v11 = a5;
  uint64_t v12 = a4;
  uint64_t v10 = *a6;
  return DisplayList.ViewRenderer.render(rootView:from:time:nextTime:version:maxVersion:environment:)(a1, &v15, &v14, &v13, &v12, &v11, &v10, a7);
}

double DisplayList.ViewRenderer.render(rootView:from:time:nextTime:version:maxVersion:environment:)@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, double *a3@<X2>, double *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, uint64_t *a7@<X6>, double *a8@<X8>)
{
  void (*v21)(double *__return_ptr, uint64_t, uint64_t *, double *, uint64_t *, uint64_t *, uint64_t *, uint64_t, uint64_t);
  double v22;
  double v23;
  double v24;
  double v25;
  double result;
  uint64_t v28;
  __int16 v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  double v35;

  uint64_t v10 = *a2;
  __int16 v11 = *((_WORD *)a2 + 4);
  char v12 = *((unsigned char *)a2 + 10);
  double v13 = *a3;
  double v14 = *a4;
  uint64_t v15 = *a5;
  uint64_t v16 = *a6;
  uint64_t v17 = *a7;
  specialized DisplayList.ViewRenderer.updateRenderer(rootView:)(a1);
  uint64_t v19 = v18;
  uint64_t ObjectType = swift_getObjectType();
  int v28 = v10;
  double v29 = v11;
  uint64_t v30 = v12;
  int v34 = v13;
  int v32 = v16;
  uint64_t v33 = v15;
  int v31 = v17;
  uint64_t v21 = *(void (**)(double *__return_ptr, uint64_t, uint64_t *, double *, uint64_t *, uint64_t *, uint64_t *, uint64_t, uint64_t))(v19 + 24);
  swift_unknownObjectRetain();
  v21(&v35, a1, &v28, &v34, &v33, &v32, &v31, ObjectType, v19);
  uint64_t v22 = v35;
  if (v14 < v35) {
    uint64_t v22 = v14;
  }
  uint64_t v23 = v22 - v13;
  swift_beginAccess();
  BOOL v24 = *(double *)(v8 + 32);
  swift_unknownObjectRelease();
  if (v24 > v23) {
    uint64_t v25 = v24;
  }
  else {
    uint64_t v25 = v23;
  }
  uint64_t result = v13 + v25;
  *a8 = result;
  return result;
}

uint64_t specialized DisplayList.ViewRenderer.updateRenderer(rootView:)(uint64_t a1)
{
  uint64_t v5 = v1;
  if (*(unsigned char *)(v1 + 80) == 1)
  {
    uint64_t v2 = a1;
    *(unsigned char *)(v1 + 80) = 0;
    swift_beginAccess();
    uint64_t v6 = 1;
    if (*(void *)(v1 + 24)) {
      uint64_t v6 = 2;
    }
    if (v6 != *(unsigned __int8 *)(v1 + 56))
    {
      uint64_t v4 = v1 + 64;
      if (*(void *)(v1 + 64))
      {
        uint64_t v7 = *(void *)(v1 + 72);
        uint64_t ObjectType = swift_getObjectType();
        uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
        swift_unknownObjectRetain();
        v8(v2, ObjectType, v7);
        swift_unknownObjectRelease();
      }
      *(void *)uint64_t v4 = 0;
      *(void *)(v1 + 72) = 0;
      swift_unknownObjectRelease();
      *(unsigned char *)(v1 + 56) = 0;
    }
    unint64_t v9 = *(void **)(v1 + 64);
    uint64_t v10 = *(void *)(v5 + 24);
    if (v9)
    {
      if (v10)
      {
        char v30 = *(unsigned char *)(v10 + 16);
        uint64_t ObjectType = *(unsigned int *)(v10 + 20);
        uint64_t v4 = *(unsigned __int8 *)(v10 + 24);
        char v11 = *(unsigned char *)(v10 + 25);
        char v12 = *(unsigned char *)(v10 + 26);
        int v13 = *(unsigned __int8 *)(v10 + 27);
        char v14 = *(unsigned char *)(v10 + 28);
        uint64_t v15 = *(void *)(v10 + 32);
        if (object_getClass(v9) == (Class)_TtCE7SwiftUIVS_11DisplayListP33_21FFA3C7D88AC65BB559906758271BFC14ViewRasterizer) {
          uint64_t v2 = (uint64_t)v9;
        }
        else {
          uint64_t v2 = 0;
        }
        *(unsigned char *)(v2 + 48) = v30;
        *(_DWORD *)(v2 + 52) = ObjectType;
        *(unsigned char *)(v2 + 56) = v4;
        *(unsigned char *)(v2 + 57) = v11;
        *(unsigned char *)(v2 + 58) = v12;
        *(unsigned char *)(v2 + 59) = v13;
        *(unsigned char *)(v2 + 60) = v14;
        *(void *)(v2 + 64) = v15;
        uint64_t v16 = *(void *)(v2 + 72);
        if (v13) {
          char v17 = 1;
        }
        else {
          char v17 = 3;
        }
        swift_beginAccess();
        *(unsigned char *)(v16 + 112) = v17;
        swift_beginAccess();
        MEMORY[0x24C527E00](v5 + 40);
        *(void *)(v2 + 32) = *(void *)(v5 + 48);
        swift_unknownObjectWeakAssign();
        swift_unknownObjectRelease();
        uint64_t result = *(void *)(v5 + 64);
        if (result) {
          return result;
        }
        goto LABEL_24;
      }
    }
    else
    {
      if (!v10)
      {
        uint64_t ObjectType = *(void *)(v5 + 16);
        swift_beginAccess();
        MEMORY[0x24C527E00](v5 + 40);
        uint64_t v4 = *(void *)(v5 + 48);
        type metadata accessor for DisplayList.ViewUpdater();
        uint64_t v2 = swift_allocObject();
        *(void *)(v2 + 24) = 0;
        swift_unknownObjectWeakInit();
        *(_DWORD *)(v2 + 140) = 0;
        *(void *)(v2 + 144) = 0;
        if (one-time initialization token for invalid != -1) {
          goto LABEL_25;
        }
        goto LABEL_23;
      }
      char v19 = *(unsigned char *)(v10 + 16);
      int v20 = *(_DWORD *)(v10 + 20);
      char v21 = *(unsigned char *)(v10 + 24);
      char v22 = *(unsigned char *)(v10 + 25);
      char v23 = *(unsigned char *)(v10 + 26);
      uint64_t ObjectType = *(unsigned __int8 *)(v10 + 27);
      char v29 = *(unsigned char *)(v10 + 28);
      uint64_t v28 = *(void *)(v10 + 32);
      uint64_t v40 = *(void *)(v5 + 16);
      swift_beginAccess();
      uint64_t v31 = MEMORY[0x24C527E00](v5 + 40);
      uint64_t v24 = *(void *)(v5 + 48);
      v32[0] = v19;
      int v33 = v20;
      char v34 = v21;
      char v35 = v22;
      char v36 = v23;
      char v37 = ObjectType;
      char v38 = v29;
      uint64_t v39 = v28;
      type metadata accessor for DisplayList.ViewRasterizer();
      uint64_t v4 = swift_allocObject();
      swift_retain();
      swift_unknownObjectRetain();
      *(void *)(v5 + 64) = DisplayList.ViewRasterizer.init(platform:host:rootView:options:)(&v40, v31, v24, (void *)v2, (uint64_t)v32);
      *(void *)(v5 + 72) = &protocol witness table for DisplayList.ViewRasterizer;
      swift_unknownObjectRelease();
      *(unsigned char *)(v5 + 56) = 2;
      swift_release();
    }
  }
  uint64_t result = *(void *)(v5 + 64);
  if (result) {
    return result;
  }
  do
  {
LABEL_24:
    __break(1u);
LABEL_25:
    swift_once();
LABEL_23:
    *(void *)(v2 + 152) = static DisplayList.ViewRenderer.Environment.invalid;
    uint64_t v25 = MEMORY[0x263F8EE78];
    *(void *)(v2 + 160) = MEMORY[0x263F8EE78];
    *(_WORD *)(v2 + 168) = 0;
    *(unsigned char *)(v2 + 170) = 0;
    *(void *)(v2 + 176) = 0;
    *(_WORD *)(v2 + 184) = 257;
    *(void *)(v2 + 24) = v4;
    swift_unknownObjectWeakAssign();
    uint64_t v26 = MEMORY[0x263F8EE80];
    *(void *)(v2 + 32) = ObjectType;
    *(void *)(v2 + 40) = v26;
    uint64_t v27 = MEMORY[0x263F8EE88];
    *(void *)(v2 + 48) = v26;
    *(void *)(v2 + 56) = v27;
    *(void *)(v2 + 64) = v26;
    *(void *)(v2 + 72) = v26;
    *(void *)(v2 + 80) = v26;
    *(void *)(v2 + 88) = 0;
    *(_DWORD *)(v2 + 124) = 0;
    *(void *)(v2 + 104) = 0;
    *(void *)(v2 + 112) = 0;
    *(void *)(v2 + 96) = v25;
    *(unsigned char *)(v2 + 120) = 0;
    *(void *)(v2 + 128) = v25;
    *(_WORD *)(v2 + 136) = 0;
    *(unsigned char *)(v2 + 138) = 0;
    swift_unknownObjectRelease();
    *(void *)(v5 + 64) = v2;
    *(void *)(v5 + 72) = &protocol witness table for DisplayList.ViewUpdater;
    swift_unknownObjectRelease();
    *(unsigned char *)(v5 + 56) = 1;
    uint64_t result = *(void *)(v5 + 64);
  }
  while (!result);
  return result;
}

uint64_t DisplayList.ViewUpdater.render(rootView:from:time:version:maxVersion:environment:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, double *a3@<X2>, unint64_t *a4@<X3>, uint64_t *a5@<X4>, void *a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v8 = v7;
  unint64_t v9 = (void *)result;
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t v11 = *(void *)a2;
  int v12 = *(unsigned __int16 *)(a2 + 8);
  int v13 = *(unsigned __int8 *)(a2 + 10);
  double v14 = *a3;
  unint64_t v15 = *a4;
  uint64_t v16 = *a5;
  if (*(double *)a6 != *(double *)(v7 + 152))
  {
    *(void *)(v7 + 152) = *a6;
    *(unsigned char *)(v7 + 184) = 0;
    swift_beginAccess();
    specialized _NativeDictionary.mapValues<A>(_:)(*(void *)(v7 + 40));
    *(void *)(v7 + 40) = v17;
    swift_endAccess();
    uint64_t result = swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 140) = 0;
  }
  if (*(unsigned char *)(v7 + 184) != 1)
  {
LABEL_9:
    if (*(double *)(v7 + 176) == 0.0)
    {
      swift_beginAccess();
      id v19 = (id)CoreViewLayer(*(_DWORD *)(v7 + 32) & 3, v9);
      objc_msgSend(v19, sel_setAllowsGroupOpacity_, 0);
      objc_msgSend(v19, sel_setAllowsGroupBlending_, 0);
    }
    int v20 = (2 * ((33 * (v15 >> 16)) ^ v15)) | 1;
    if (!v15) {
      LOWORD(v20) = 0;
    }
    *(_WORD *)(v8 + 140) = v20;
    *(_WORD *)(v8 + 142) = v20;
    *(unsigned char *)(v8 + 185) = *(unsigned char *)(v8 + 184);
    *(unsigned char *)(v8 + 184) = 1;
    *(void *)(v8 + 160) = v11;
    *(_WORD *)(v8 + 168) = v12;
    *(unsigned char *)(v8 + 170) = v13;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(double *)(v8 + 176) = v14;
    swift_beginAccess();
    Swift::Bool value = printTree.value;
    if (printTree.value == 2)
    {
      char v22 = getenv("SWIFTUI_PRINT_TREE");
      if (!v22)
      {
        printTree.Swift::Bool value = 0;
        swift_endAccess();
        goto LABEL_20;
      }
      int v23 = atoi(v22);
      printTree.Swift::Bool value = v23 != 0;
      swift_endAccess();
      if (!v23) {
        goto LABEL_20;
      }
    }
    else
    {
      swift_endAccess();
      if (!value)
      {
LABEL_20:
        uint64_t v29 = *(void *)(v8 + 152);
        uint64_t v30 = v8;
        unint64_t v31 = *(void *)&v14;
        uint64_t v32 = v16;
        uint64_t v33 = v29;
        swift_retain();
        closure #1 in DisplayList.ViewUpdater.render(rootView:from:time:version:maxVersion:environment:)((uint64_t)&v30, v8, v11, v12 | (v13 << 16), v9, a7, *(uint64_t *)&v14);
        return swift_release();
      }
    }
    type metadata accessor for _ContiguousArrayStorage<Any>();
    uint64_t v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_2461B9DC0;
    uint64_t v30 = 0;
    unint64_t v31 = 0xE000000000000000;
    _StringGuts.grow(_:)(17);
    v25._countAndFlagsBits = 0x2077656956;
    v25._object = (void *)0xE500000000000000;
    String.append(_:)(v25);
    _print_unlocked<A, B>(_:_:)();
    v26._countAndFlagsBits = 544497952;
    v26._object = (void *)0xE400000000000000;
    String.append(_:)(v26);
    _print_unlocked<A, B>(_:_:)();
    v27._countAndFlagsBits = 2618;
    v27._object = (void *)0xE200000000000000;
    String.append(_:)(v27);
    v28._countAndFlagsBits = DisplayList.description.getter();
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    *(void *)(v24 + 56) = MEMORY[0x263F8D310];
    *(void *)(v24 + 32) = 0;
    *(void *)(v24 + 40) = 0xE000000000000000;
    print(_:separator:terminator:)();
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  if (v15)
  {
    if (*(unsigned __int16 *)(v7 + 140) != ((unsigned __int16)(2 * ((33 * WORD1(v15)) ^ v15)) | 1)) {
      goto LABEL_9;
    }
  }
  else if (*(_WORD *)(v7 + 140))
  {
    goto LABEL_9;
  }
  double v18 = *(double *)(v7 + 144);
  if (v18 < v14) {
    goto LABEL_9;
  }
  *(double *)a7 = v18;
  return result;
}

void specialized _NativeDictionary.mapValues<A>(_:)(uint64_t a1)
{
  type metadata accessor for _DictionaryStorage<DisplayList.ViewUpdater.ViewCache.Key, DisplayList.ViewUpdater.ViewInfo>();
  uint64_t v2 = static _DictionaryStorage.copy(original:)();
  int64_t v3 = 0;
  uint64_t v29 = (void *)v2;
  uint64_t v30 = a1;
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v5 = a1 + 64;
  uint64_t v4 = v6;
  uint64_t v7 = 1 << *(unsigned char *)(v5 - 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & v4;
  int64_t v27 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v28 = v2 + 64;
  if (!v9) {
    goto LABEL_5;
  }
LABEL_4:
  uint64_t v31 = (v9 - 1) & v9;
  int64_t v44 = v3;
  for (unint64_t i = __clz(__rbit64(v9)) | (v3 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v13 << 6))
  {
    uint64_t v15 = *(void *)(v30 + 48) + 20 * i;
    char v16 = *(unsigned char *)(v15 + 16);
    uint64_t v17 = *(void *)(v30 + 56) + 120 * i;
    double v18 = *(void **)(v17 + 8);
    *(void *)&long long v32 = *(void *)v17;
    *((void *)&v32 + 1) = v18;
    uint64_t v33 = *(void *)(v17 + 16);
    long long v34 = *(_OWORD *)(v17 + 24);
    long long v35 = *(_OWORD *)(v17 + 40);
    __int16 v36 = *(_WORD *)(v17 + 56);
    long long v37 = *(_OWORD *)(v17 + 64);
    long long v38 = *(_OWORD *)(v17 + 80);
    __int16 v39 = *(_WORD *)(v17 + 96);
    int v40 = *(_DWORD *)(v17 + 100);
    char v41 = *(unsigned char *)(v17 + 104);
    char v42 = *(unsigned char *)(v17 + 105);
    uint64_t v43 = *(void *)(v17 + 112);
    DisplayList.ViewUpdater.ViewInfo.Seeds.invalidate()();
    long long v19 = *(_OWORD *)v15;
    uint64_t v20 = v29[6];
    *(void *)(v28 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    uint64_t v21 = v20 + 20 * i;
    *(_OWORD *)uint64_t v21 = v19;
    *(unsigned char *)(v21 + 16) = v16;
    uint64_t v22 = v29[7] + 120 * i;
    *(_OWORD *)uint64_t v22 = v32;
    *(void *)(v22 + 16) = v33;
    *(_OWORD *)(v22 + 24) = v34;
    *(_OWORD *)(v22 + 40) = v35;
    *(_WORD *)(v22 + 56) = v36;
    *(_OWORD *)(v22 + 64) = v37;
    *(_OWORD *)(v22 + 80) = v38;
    *(_WORD *)(v22 + 96) = v39;
    *(_DWORD *)(v22 + 100) = v40;
    *(unsigned char *)(v22 + 104) = v41;
    *(unsigned char *)(v22 + 105) = v42;
    *(void *)(v22 + 112) = v43;
    uint64_t v23 = v29[2];
    BOOL v24 = __OFADD__(v23, 1);
    uint64_t v25 = v23 + 1;
    if (v24)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v29[2] = v25;
    swift_unknownObjectRetain();
    id v26 = v18;
    swift_unknownObjectRetain();
    int64_t v3 = v44;
    unint64_t v9 = v31;
    if (v31) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v11 = v3 + 1;
    if (__OFADD__(v3, 1)) {
      goto LABEL_24;
    }
    if (v11 >= v27) {
      return;
    }
    unint64_t v12 = *(void *)(v5 + 8 * v11);
    int64_t v13 = v3 + 1;
    if (!v12)
    {
      int64_t v13 = v3 + 2;
      if (v3 + 2 >= v27) {
        return;
      }
      unint64_t v12 = *(void *)(v5 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = v3 + 3;
        if (v3 + 3 >= v27) {
          return;
        }
        unint64_t v12 = *(void *)(v5 + 8 * v13);
        if (!v12) {
          break;
        }
      }
    }
LABEL_18:
    uint64_t v31 = (v12 - 1) & v12;
    int64_t v44 = v13;
  }
  uint64_t v14 = v3 + 4;
  if (v3 + 4 >= v27) {
    return;
  }
  unint64_t v12 = *(void *)(v5 + 8 * v14);
  if (v12)
  {
    int64_t v13 = v3 + 4;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v13 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v13 >= v27) {
      return;
    }
    unint64_t v12 = *(void *)(v5 + 8 * v13);
    ++v14;
    if (v12) {
      goto LABEL_18;
    }
  }
LABEL_25:
  __break(1u);
}

void type metadata accessor for _DictionaryStorage<DisplayList.ViewUpdater.ViewCache.Key, DisplayList.ViewUpdater.ViewInfo>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<DisplayList.ViewUpdater.ViewCache.Key, DisplayList.ViewUpdater.ViewInfo>)
  {
    lazy protocol witness table accessor for type DisplayList.ViewUpdater.ViewCache.Key and conformance DisplayList.ViewUpdater.ViewCache.Key();
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<DisplayList.ViewUpdater.ViewCache.Key, DisplayList.ViewUpdater.ViewInfo>);
    }
  }
}

uint64_t type metadata accessor for DisplayList.ViewUpdater()
{
  return self;
}

unint64_t lazy protocol witness table accessor for type DisplayList.ViewUpdater.ViewCache.Key and conformance DisplayList.ViewUpdater.ViewCache.Key()
{
  unint64_t result = lazy protocol witness table cache variable for type DisplayList.ViewUpdater.ViewCache.Key and conformance DisplayList.ViewUpdater.ViewCache.Key;
  if (!lazy protocol witness table cache variable for type DisplayList.ViewUpdater.ViewCache.Key and conformance DisplayList.ViewUpdater.ViewCache.Key)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.ViewUpdater.ViewCache.Key and conformance DisplayList.ViewUpdater.ViewCache.Key);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DisplayList.ViewUpdater.ViewCache.Key and conformance DisplayList.ViewUpdater.ViewCache.Key;
  if (!lazy protocol witness table cache variable for type DisplayList.ViewUpdater.ViewCache.Key and conformance DisplayList.ViewUpdater.ViewCache.Key)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.ViewUpdater.ViewCache.Key and conformance DisplayList.ViewUpdater.ViewCache.Key);
  }
  return result;
}

Swift::Void __swiftcall DisplayList.ViewUpdater.ViewInfo.Seeds.invalidate()()
{
  if (*v0) {
    *unint64_t v0 = ~*v0 | 1;
  }
  if (v0[1]) {
    v0[1] = ~v0[1] | 1;
  }
  if (v0[2]) {
    v0[2] = ~v0[2] | 1;
  }
  if (v0[3]) {
    v0[3] = ~v0[3] | 1;
  }
  if (v0[4]) {
    v0[4] = ~v0[4] | 1;
  }
  if (v0[5]) {
    v0[5] = ~v0[5] | 1;
  }
  if (v0[6]) {
    v0[6] = ~v0[6] | 1;
  }
  if (v0[7]) {
    v0[7] = ~v0[7] | 1;
  }
  if (v0[8]) {
    v0[8] = ~v0[8] | 1;
  }
}

void specialized closure #1 in DisplayList.ViewUpdater.ViewCache.updateAsync(oldItem:oldState:newItem:newState:tag:updateView:)(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, BOOL *a7@<X6>, uint64_t a8@<X7>, char *a9@<X8>)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  char v12 = *(unsigned char *)(a2 + 56);
  char v13 = *(unsigned char *)(a2 + 57);
  unsigned __int8 v14 = *(unsigned char *)(a2 + 105);
  uint64_t v15 = one-time initialization token for infinity;
  id v16 = *(id *)(a2 + 8);
  if (v15 != -1) {
    swift_once();
  }
  v33[0] = v16;
  v33[1] = a1;
  char v34 = v12;
  char v35 = v13;
  double v36 = *(double *)&static Time.infinity;
  unsigned __int8 v37 = v14;
  uint64_t v32 = a8;
  long long v17 = *(_OWORD *)(a3 + 48);
  v40[2] = *(_OWORD *)(a3 + 32);
  v40[3] = v17;
  uint64_t v41 = *(void *)(a3 + 64);
  long long v18 = *(_OWORD *)(a3 + 16);
  v40[0] = *(_OWORD *)a3;
  v40[1] = v18;
  long long v19 = *(_OWORD *)(a5 + 48);
  v38[2] = *(_OWORD *)(a5 + 32);
  v38[3] = v19;
  uint64_t v39 = *(void *)(a5 + 64);
  long long v20 = *(_OWORD *)(a5 + 16);
  v38[0] = *(_OWORD *)a5;
  v38[1] = v20;
  if (DisplayList.ViewUpdater.Platform.updateItemViewAsync(layer:index:oldItem:oldState:newItem:newState:)((uint64_t)v33, (uint64_t)v31, (uint64_t)v40, a4, (double *)v38, a6))
  {
    unsigned __int8 v21 = v37;
    double v22 = v36;
    BOOL v23 = *(unsigned __int8 *)(a2 + 105) != v37 || *(double *)(a2 + 112) != v36;
    *a7 = v23;
    *(unsigned char *)(a2 + 105) = v21;

    *(double *)(a2 + 112) = v22;
    char v24 = 1;
  }
  else
  {

    char v24 = 0;
  }
  *a9 = v24;
}

uint64_t DisplayList.ViewUpdater.Platform.updateItemViewAsync(layer:index:oldItem:oldState:newItem:newState:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5, uint64_t a6)
{
  uint64_t v507 = *MEMORY[0x263EF8340];
  CGFloat v10 = *(double *)a3;
  CGFloat v9 = *(double *)(a3 + 8);
  double v12 = *(double *)(a3 + 16);
  double v11 = *(double *)(a3 + 24);
  double v14 = *(double *)(a3 + 32);
  unint64_t v13 = *(unint64_t *)(a3 + 40);
  unint64_t v16 = *(void *)(a3 + 48);
  uint64_t v15 = *(void *)(a3 + 56);
  int v17 = *(unsigned __int16 *)(a3 + 64) | (*(unsigned __int8 *)(a3 + 66) << 16);
  int v18 = *(_DWORD *)(a3 + 68);
  double v20 = *a5;
  uint64_t v19 = *((void *)a5 + 1);
  double v22 = a5[2];
  double v21 = a5[3];
  uint64_t v23 = *((void *)a5 + 4);
  unint64_t v416 = *((void *)a5 + 5);
  unint64_t v25 = *((void *)a5 + 6);
  uint64_t v24 = *((void *)a5 + 7);
  int v26 = *((_DWORD *)a5 + 17);
  unint64_t v27 = v25 >> 62;
  double v28 = *v6;
  if (v25 >> 62 == 3)
  {
    int v29 = *((unsigned __int16 *)a5 + 32) | (*((unsigned __int8 *)a5 + 66) << 16);
    unint64_t v30 = *((void *)a5 + 5);
    if ((v29 & 0xFFFFFF) == 0 && v25 == 0xC000000000000000 && !(v24 | v416)) {
      goto LABEL_18;
    }
    unint64_t v31 = v16 >> 62;
    if (v16 >> 62 == 3) {
      goto LABEL_18;
    }
  }
  else
  {
    int v29 = *((unsigned __int16 *)a5 + 32) | (*((unsigned __int8 *)a5 + 66) << 16);
    unint64_t v31 = v16 >> 62;
    unint64_t v30 = *((void *)a5 + 5);
    if (v16 >> 62 == 3 || v27 == 2) {
      goto LABEL_18;
    }
  }
  if (v31)
  {
    if (v31 == 1 && v27 == 1)
    {
      unint64_t v412 = *(unint64_t *)(a3 + 40);
      uint64_t v414 = *(void *)(a3 + 56);
      uint64_t v405 = a1;
      int v403 = *((_DWORD *)a5 + 17);
      uint64_t v401 = *((void *)a5 + 4);
      int v399 = *(_DWORD *)(a3 + 68);
      double v396 = v28;
      CGFloat v397 = *(double *)(a3 + 32);
      if (v23 != *(void *)&v14)
      {
        uint64_t v409 = *((void *)a5 + 7);
        unint64_t v383 = HIDWORD(v25);
        if (BYTE4(v16) == 3)
        {
          unint64_t v374 = HIDWORD(v16);
          int v395 = *(unsigned __int16 *)(a3 + 64) | (*(unsigned __int8 *)(a3 + 66) << 16);
          if (BYTE4(v25) == 3)
          {
            uint64_t v97 = *(void *)(a3 + 40);
            outlined init with copy of AnyTrackedValue(v13 + 16, (uint64_t)&v466);
            outlined init with copy of AnyTrackedValue(v30 + 16, (uint64_t)&v456);
            uint64_t v364 = *((void *)&v467 + 1);
            uint64_t v98 = v468;
            __swift_project_boxed_opaque_existential_1(&v466, *((uint64_t *)&v467 + 1));
            v351 = *(uint64_t (**)(long long *, uint64_t, uint64_t))(v98 + 24);
            outlined copy of DisplayList.Effect(v97, v16, 3);
            outlined copy of DisplayList.Effect(v30, v25, 3);
            outlined copy of DisplayList.Item.Value(v97, v16);
            outlined copy of DisplayList.Item.Value(v30, v25);
            uint64_t v99 = v97;
            uint64_t v100 = v30;
            outlined copy of DisplayList.Effect(v99, v16, 3);
            outlined copy of DisplayList.Effect(v30, v25, 3);
            char v101 = v351(&v456, v364, v98);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v456);
            if (v101)
            {
              outlined consume of DisplayList.Effect(v412, v16, 3);
              outlined consume of DisplayList.Effect(v100, v25, 3);
              outlined consume of DisplayList.Item.Value(v412, v16);
              outlined consume of DisplayList.Item.Value(v100, v25);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v466);
              outlined consume of DisplayList.Effect(v412, v16, 3);
              outlined consume of DisplayList.Effect(v100, v25, 3);
              goto LABEL_20;
            }
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v466);
            outlined consume of DisplayList.Effect(v412, v16, 3);
            outlined consume of DisplayList.Effect(v100, v25, 3);
            unint64_t v30 = v100;
            uint64_t v124 = v409;
            goto LABEL_135;
          }
          uint64_t v123 = *(void *)(a3 + 40);
          outlined copy of DisplayList.Effect(v13, v16, 3);
          outlined copy of DisplayList.Effect(v30, v25, SBYTE4(v25));
          outlined copy of DisplayList.Item.Value(v123, v16);
          uint64_t v104 = v409;
          outlined copy of DisplayList.Item.Value(v30, v25);
          outlined copy of DisplayList.Effect(v123, v16, 3);
          outlined copy of DisplayList.Effect(v30, v25, SBYTE4(v25));
          outlined consume of DisplayList.Effect(v123, v16, 3);
          uint64_t v105 = v30;
          char v106 = v25;
          char v107 = BYTE4(v25);
        }
        else
        {
          if (BYTE4(v16) == 8)
          {
            uint64_t v41 = *(void *)(a3 + 40);
            int v32 = *(unsigned __int16 *)(a3 + 64) | (*(unsigned __int8 *)(a3 + 66) << 16);
            outlined copy of DisplayList.Item.Value(v13, v16);
            outlined copy of DisplayList.Item.Value(v30, v25);
            uint64_t v42 = v41;
            outlined copy of DisplayList.Effect(v41, v16, 8);
            outlined copy of DisplayList.Effect(v30, v25, SBYTE4(v25));
            unint64_t v43 = HIDWORD(v16);
LABEL_67:
            int v395 = v32;
            LOBYTE(v374) = v43;
            if (BYTE4(v25) == 8)
            {
              uint64_t v128 = v42;
              uint64_t v129 = *(void *)(v42 + 16);
              uint64_t v130 = *(void *)(v42 + 24);
              double v132 = *(double *)(v42 + 32);
              double v131 = *(double *)(v42 + 40);
              uint64_t v134 = *(void *)(v42 + 48);
              unint64_t v133 = *(void *)(v42 + 56);
              unint64_t v136 = *(void *)(v42 + 64);
              uint64_t v135 = *(void *)(v42 + 72);
              uint64_t v137 = *(void *)(v42 + 80);
              uint64_t v138 = *(unsigned __int8 *)(v42 + 88);
              double v139 = *(double *)(v30 + 80);
              uint64_t v140 = *(unsigned __int8 *)(v30 + 88);
              switch(v138)
              {
                case 1:
                  long long v341 = *(_OWORD *)(v30 + 64);
                  *(_OWORD *)&afterb[0].seconds = *(_OWORD *)(v30 + 32);
                  long long v362 = *(_OWORD *)(v30 + 48);
                  long long v372 = *(_OWORD *)(v30 + 16);
                  uint64_t v333 = v130;
                  uint64_t v336 = v129;
                  double v325 = v131;
                  double v327 = v132;
                  unint64_t v318 = v133;
                  uint64_t v321 = v134;
                  uint64_t v309 = v135;
                  unint64_t v314 = v136;
                  uint64_t v305 = v137;
                  outlined copy of DisplayList.Effect(v128, v16, v43);
                  outlined copy of DisplayList.Effect(v30, v25, 8);
                  uint64_t v246 = v305;
                  uint64_t v245 = v309;
                  unint64_t v248 = v314;
                  unint64_t v247 = v318;
                  uint64_t v250 = v321;
                  double v249 = v325;
                  double v252 = v327;
                  uint64_t v251 = v333;
                  uint64_t v253 = v336;
                  goto LABEL_118;
                case 3:
                  long long v341 = *(_OWORD *)(v30 + 64);
                  *(_OWORD *)&afterb[0].seconds = *(_OWORD *)(v30 + 32);
                  long long v362 = *(_OWORD *)(v30 + 48);
                  long long v372 = *(_OWORD *)(v30 + 16);
                  *(void *)&long long v466 = v129;
                  *((void *)&v466 + 1) = v130;
                  *(double *)&long long v467 = v132;
                  *((double *)&v467 + 1) = v131;
                  *(void *)&long long v468 = v134;
                  *((void *)&v468 + 1) = v133;
                  *(void *)&long long v469 = v136;
                  *((void *)&v469 + 1) = v135;
                  *(void *)&long long v470 = v137;
                  outlined copy of DisplayList.Effect(v128, v16, v43);
                  outlined copy of DisplayList.Effect(v30, v25, 8);
                  _Rotation3DEffect.Data.transform.getter((CGFloat *)&v496);
                  unint64_t v30 = v416;
                  uint64_t v251 = *((void *)&v496 + 1);
                  uint64_t v253 = v496;
                  double v252 = v497;
                  double v249 = v498;
                  uint64_t v250 = v499;
                  unint64_t v247 = v500;
                  unint64_t v248 = v501;
                  uint64_t v245 = v502;
                  uint64_t v246 = v503;
LABEL_118:
                  *(void *)&long long v466 = v253;
                  *((void *)&v466 + 1) = v251;
                  *(double *)&long long v467 = v252;
                  *((double *)&v467 + 1) = v249;
                  *(void *)&long long v468 = v250;
                  *((void *)&v468 + 1) = v247;
                  *(void *)&long long v469 = v248;
                  *((void *)&v469 + 1) = v245;
                  *(void *)&long long v470 = v246;
                  long long v255 = v362;
                  long long v254 = v372;
                  switch(v140)
                  {
                    case 1:
                      CGFloat v260 = v139;
                      long long v262 = v341;
                      long long v261 = *(_OWORD *)&afterb[0].seconds;
                      break;
                    case 3:
                      long long v456 = v372;
                      *(_OWORD *)v457 = *(_OWORD *)&afterb[0].seconds;
                      *(_OWORD *)&v457[16] = v362;
                      long long v458 = v341;
                      *(double *)&long long v459 = v139;
                      _Rotation3DEffect.Data.transform.getter(&v504.a);
                      long long v254 = *(_OWORD *)&v504.a;
                      long long v261 = *(_OWORD *)&v504.c;
                      long long v255 = *(_OWORD *)&v504.tx;
                      long long v262 = v505;
                      CGFloat v260 = v506;
                      break;
                    default:
                      uint64_t v142 = v412;
                      char v143 = v16;
                      char v144 = v374;
                      goto LABEL_120;
                  }
                  long long v447 = v254;
                  long long v448 = v261;
                  *(_OWORD *)&v449.CGFloat a = v255;
                  *(_OWORD *)&v449.CGFloat c = v262;
                  v449.tdouble x = v260;
                  long long v263 = *(_OWORD *)(a4 + 48);
                  long long v456 = *(_OWORD *)(a4 + 32);
                  *(_OWORD *)&v457[8] = v263;
                  *(void *)v457 = 0;
                  *(void *)&v457[24] = 0;
                  long long v458 = *(_OWORD *)(a4 + 64);
                  *(void *)&long long v459 = 0x3FF0000000000000;
                  ProjectionTransform.concatenating(_:)((double *)&v456, (double *)&t2);
                  long long v264 = *(_OWORD *)(a6 + 48);
                  long long v437 = *(_OWORD *)(a6 + 32);
                  *(_OWORD *)&v438[8] = v264;
                  *(void *)uint64_t v438 = 0;
                  *(void *)&v438[24] = 0;
                  long long v439 = *(_OWORD *)(a6 + 64);
                  *(void *)&long long v440 = 0x3FF0000000000000;
                  ProjectionTransform.concatenating(_:)((double *)&v437, (double *)t1);
                  specialized DisplayList.ViewUpdater.AsyncLayer.update<A>(_:from:to:)((double *)&t2, (uint64_t)t1);
                  outlined consume of DisplayList.Effect(v412, v16, v374);
                  unint64_t v30 = v416;
                  break;
                default:
                  char v141 = v43;
                  outlined copy of DisplayList.Effect(v128, v16, v43);
                  outlined copy of DisplayList.Effect(v30, v25, 8);
                  uint64_t v142 = v128;
                  char v143 = v16;
                  char v144 = v141;
LABEL_120:
                  outlined consume of DisplayList.Effect(v142, v143, v144);
                  break;
              }
              uint64_t v146 = v30;
              char v147 = v25;
              char v148 = 8;
            }
            else
            {
              char v145 = v43;
              outlined copy of DisplayList.Effect(v42, v16, v43);
              outlined copy of DisplayList.Effect(v30, v25, v383);
              outlined consume of DisplayList.Effect(v42, v16, v145);
              uint64_t v146 = v30;
              char v147 = v25;
              char v148 = v383;
            }
            outlined consume of DisplayList.Effect(v146, v147, v148);
            uint64_t v124 = v409;
LABEL_135:
            uint64_t v15 = v414;
            goto LABEL_136;
          }
          uint64_t v102 = *(void *)(a3 + 40);
          int v103 = *(unsigned __int16 *)(a3 + 64) | (*(unsigned __int8 *)(a3 + 66) << 16);
          outlined copy of DisplayList.Effect(v13, v16, SBYTE4(v16));
          outlined copy of DisplayList.Effect(v30, v25, SBYTE4(v25));
          int v395 = v103;
          outlined copy of DisplayList.Item.Value(v102, v16);
          uint64_t v104 = v409;
          outlined copy of DisplayList.Item.Value(v30, v25);
          outlined copy of DisplayList.Effect(v102, v16, SBYTE4(v16));
          outlined copy of DisplayList.Effect(v30, v25, SBYTE4(v25));
          unint64_t v374 = HIDWORD(v16);
          outlined consume of DisplayList.Effect(v102, v16, SBYTE4(v16));
          uint64_t v105 = v30;
          char v106 = v25;
          char v107 = BYTE4(v25);
        }
        outlined consume of DisplayList.Effect(v105, v106, v107);
        uint64_t v124 = v104;
LABEL_136:
        double v417 = v396;
        *(CGFloat *)&long long v485 = v10;
        *((CGFloat *)&v485 + 1) = v9;
        *(double *)&long long v486 = v12;
        *((double *)&v486 + 1) = v11;
        *(CGFloat *)&long long v487 = v397;
        *((void *)&v487 + 1) = v412;
        unint64_t v488 = v16;
        uint64_t v489 = v15;
        char v491 = BYTE2(v395);
        __int16 v490 = v395;
        int v492 = v399;
        *(double *)&long long v477 = v20;
        *((void *)&v477 + 1) = v19;
        *(double *)&long long v478 = v22;
        *((double *)&v478 + 1) = v21;
        *(void *)&long long v479 = v401;
        *((void *)&v479 + 1) = v30;
        unint64_t v480 = v25;
        uint64_t v481 = v124;
        char v483 = BYTE2(v29);
        __int16 v482 = v29;
        int v484 = v403;
        uint64_t v265 = v30;
        char v38 = DisplayList.ViewUpdater.Platform.updateStateAsync(layer:oldItem:oldSize:oldState:newItem:newSize:newState:)(v405, &v485, a4, &v477, a6, v12, v11, v22, v21);
        outlined consume of DisplayList.Effect(v412, v16, v374);
        outlined consume of DisplayList.Effect(v265, v25, v383);
        outlined consume of DisplayList.Item.Value(v412, v16);
        outlined consume of DisplayList.Item.Value(v265, v25);
        return v38 & 1;
      }
      if (BYTE4(v16) == 8)
      {
        uint64_t v409 = *((void *)a5 + 7);
        switch(*(unsigned char *)(v13 + 88))
        {
          case 1:
            unint64_t v377 = HIDWORD(v16);
            uint64_t v42 = *(void *)(a3 + 40);
            unint64_t v383 = HIDWORD(v25);
            int v32 = *(unsigned __int16 *)(a3 + 64) | (*(unsigned __int8 *)(a3 + 66) << 16);
            outlined copy of DisplayList.Item.Value(v13, v16);
            outlined copy of DisplayList.Item.Value(v30, v25);
            outlined copy of DisplayList.Effect(v42, v16, 8);
            outlined copy of DisplayList.Effect(v30, v25, SBYTE4(v25));
            break;
          case 3:
            unint64_t v377 = HIDWORD(v16);
            uint64_t v125 = *(void *)(v13 + 80);
            long long v126 = *(_OWORD *)(v13 + 32);
            long long v466 = *(_OWORD *)(v13 + 16);
            long long v467 = v126;
            long long v127 = *(_OWORD *)(v13 + 64);
            long long v468 = *(_OWORD *)(v13 + 48);
            long long v469 = v127;
            *(void *)&long long v470 = v125;
            uint64_t v42 = v13;
            unint64_t v383 = HIDWORD(v25);
            int v32 = v17;
            outlined copy of DisplayList.Item.Value(v13, v16);
            outlined copy of DisplayList.Item.Value(v30, v25);
            outlined copy of DisplayList.Effect(v42, v16, 8);
            outlined copy of DisplayList.Effect(v30, v25, SBYTE4(v25));
            _Rotation3DEffect.Data.transform.getter((CGFloat *)&v493);
            unint64_t v30 = v416;
            break;
          default:
            int v32 = *(unsigned __int16 *)(a3 + 64) | (*(unsigned __int8 *)(a3 + 66) << 16);
            outlined copy of DisplayList.Item.Value(v13, v16);
            uint64_t v33 = v30;
            unint64_t v34 = v25;
            goto LABEL_36;
        }
        LOBYTE(v43) = v377;
        if (*(void *)(a4 + 136) == *(void *)(a6 + 136))
        {
          outlined consume of DisplayList.Effect(v30, v25, v383);
          outlined consume of DisplayList.Effect(v42, v16, 8);
          uint64_t v24 = v409;
          goto LABEL_37;
        }
        goto LABEL_67;
      }
      uint64_t v40 = *(uint64_t *)(a3 + 40);
LABEL_35:
      int v32 = *(unsigned __int16 *)(a3 + 64) | (*(unsigned __int8 *)(a3 + 66) << 16);
      outlined copy of DisplayList.Item.Value(v40, v16);
      uint64_t v33 = v30;
      unint64_t v34 = v25;
LABEL_36:
      outlined copy of DisplayList.Item.Value(v33, v34);
LABEL_37:
      outlined consume of DisplayList.Item.Value(v412, v16);
      outlined consume of DisplayList.Item.Value(v30, v25);
      if ((*(unsigned char *)(v405 + 17) & 0x20) == 0)
      {
        *(double *)&long long v447 = v396;
        *(CGFloat *)&long long v466 = v10;
        *((CGFloat *)&v466 + 1) = v9;
        *(double *)&long long v467 = v12;
        *((double *)&v467 + 1) = v11;
        *(CGFloat *)&long long v468 = v397;
        *((void *)&v468 + 1) = v412;
        *(void *)&long long v469 = v16;
        *((void *)&v469 + 1) = v414;
        BYTE2(v470) = BYTE2(v32);
        LOWORD(v470) = v32;
        DWORD1(v470) = v399;
        *(double *)&long long v456 = v20;
        *((void *)&v456 + 1) = v19;
        *(double *)v457 = v22;
        *(double *)&v457[8] = v21;
        *(void *)&v457[16] = v401;
        *(void *)&v457[24] = v30;
        *(void *)&long long v458 = v25;
        *((void *)&v458 + 1) = v24;
        BYTE2(v459) = BYTE2(v29);
        LOWORD(v459) = v29;
        DWORD1(v459) = v403;
        char v38 = DisplayList.ViewUpdater.Platform.updateStateAsync(layer:oldItem:oldSize:oldState:newItem:newSize:newState:)(v405, &v466, a4, &v456, a6, v12, v11, v22, v21);
        return v38 & 1;
      }
      uint64_t v411 = v24;
      long long v74 = *(_OWORD *)(a4 + 112);
      long long v75 = *(_OWORD *)(a4 + 144);
      long long v463 = *(_OWORD *)(a4 + 128);
      long long v464 = v75;
      long long v76 = *(_OWORD *)(a4 + 48);
      long long v77 = *(_OWORD *)(a4 + 80);
      long long v459 = *(_OWORD *)(a4 + 64);
      long long v460 = v77;
      long long v78 = *(_OWORD *)(a4 + 80);
      long long v79 = *(_OWORD *)(a4 + 112);
      long long v461 = *(_OWORD *)(a4 + 96);
      long long v462 = v79;
      long long v80 = *(_OWORD *)(a4 + 16);
      long long v456 = *(_OWORD *)a4;
      *(_OWORD *)v457 = v80;
      long long v81 = *(_OWORD *)(a4 + 48);
      long long v83 = *(_OWORD *)a4;
      long long v82 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)&v457[16] = *(_OWORD *)(a4 + 32);
      long long v458 = v81;
      long long v452 = v74;
      long long v453 = v463;
      long long v84 = *(_OWORD *)(a4 + 160);
      long long v454 = *(_OWORD *)(a4 + 144);
      long long v455 = v84;
      *(_OWORD *)&v449.CGFloat c = v76;
      *(_OWORD *)&v449.tdouble x = v459;
      long long v450 = v78;
      long long v451 = v461;
      long long v448 = v82;
      *(_OWORD *)&v449.CGFloat a = *(_OWORD *)&v457[16];
      long long v85 = *(_OWORD *)(a6 + 128);
      long long v86 = *(_OWORD *)(a6 + 96);
      long long v473 = *(_OWORD *)(a6 + 112);
      long long v474 = v85;
      long long v87 = *(_OWORD *)(a6 + 128);
      long long v88 = *(_OWORD *)(a6 + 160);
      long long v475 = *(_OWORD *)(a6 + 144);
      long long v476 = v88;
      long long v89 = *(_OWORD *)(a6 + 64);
      long long v90 = *(_OWORD *)(a6 + 32);
      long long v469 = *(_OWORD *)(a6 + 48);
      long long v470 = v89;
      long long v91 = *(_OWORD *)(a6 + 64);
      long long v92 = *(_OWORD *)(a6 + 96);
      long long v471 = *(_OWORD *)(a6 + 80);
      long long v472 = v92;
      long long v93 = *(_OWORD *)a6;
      long long v94 = *(_OWORD *)(a6 + 16);
      long long v465 = v84;
      long long v466 = v93;
      long long v95 = *(_OWORD *)a6;
      long long v96 = *(_OWORD *)(a6 + 32);
      long long v467 = *(_OWORD *)(a6 + 16);
      long long v468 = v96;
      long long v444 = v87;
      long long v445 = v475;
      long long v446 = *(_OWORD *)(a6 + 160);
      long long v447 = v83;
      long long v440 = v91;
      long long v441 = v471;
      long long v442 = v86;
      long long v443 = v473;
      long long v437 = v95;
      *(_OWORD *)uint64_t v438 = v94;
      *(_OWORD *)&v438[16] = v90;
      long long v439 = v469;
      if (v31 | v27)
      {
        outlined copy of DisplayList.Item.Value(v412, v16);
        outlined copy of DisplayList.Item.Value(v30, v25);
        uint64_t v36 = v412;
        unint64_t v37 = v16;
        goto LABEL_19;
      }
      CGFloat v108 = *(double *)&v412;
      int v109 = v29;
      if (v412 >> 60 == 4)
      {
        long long v232 = *(_OWORD *)((v412 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
        long long v485 = *(_OWORD *)((v412 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
        long long v486 = v232;
        LOBYTE(v487) = *(unsigned char *)((v412 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
        if (v30 >> 60 == 4)
        {
          uint64_t v303 = v466;
          long long v233 = *(_OWORD *)((v30 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
          long long v234 = *(_OWORD *)((v30 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
          LOBYTE(v479) = *(unsigned char *)((v30 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
          long long v477 = v233;
          long long v478 = v234;
          CGFloat v392 = *((double *)&v470 + 1);
          uint64_t v381 = *((void *)&v469 + 1);
          CGFloat v370 = *(double *)&v470;
          uint64_t v360 = v469;
          uint64_t afterg = *((void *)&v468 + 1);
          uint64_t v340 = v468;
          long long v332 = v459;
          uint64_t v320 = *(void *)&v457[24];
          long long v324 = v458;
          uint64_t v317 = *(void *)&v457[16];
          uint64_t ObjectType = swift_getObjectType();
          double v312 = *(double *)(v456 + 24);
          int v115 = v32;
          outlined copy of DisplayList.Item.Value(v412, v16);
          uint64_t v118 = v411;
          outlined copy of DisplayList.Item.Value(v416, v25);
          outlined copy of DisplayList.Item.Value(v412, v16);
          outlined copy of DisplayList.Item.Value(v416, v25);
          outlined copy of DisplayList.Item.Value(v412, v16);
          outlined copy of DisplayList.Item.Value(v416, v25);
          outlined retain of DisplayList.ViewUpdater.Model.State((uint64_t)&v456);
          outlined retain of DisplayList.ViewUpdater.Model.State((uint64_t)&v466);
          _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)&v485, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
          _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)&v477, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
          swift_retain();
          swift_retain();
          double v235 = specialized static ShapeLayerHelper.makeLayerBounds(size:path:layerType:contentsScale:)(v12, v11, v312, (uint64_t)&v485, ObjectType);
          CGFloat v283 = v236;
          CGFloat v286 = v235;
          double v308 = v238;
          double v313 = v237;
          double v239 = specialized static ShapeLayerHelper.makeLayerBounds(size:path:layerType:contentsScale:)(v22, v21, *(double *)(v303 + 24), (uint64_t)&v477, ObjectType);
          CGFloat v289 = v240;
          CGFloat v292 = v239;
          double v300 = v242;
          double v304 = v241;
          *(void *)t1 = v317;
          *(void *)&t1[8] = v320;
          *(_OWORD *)&t1[16] = v324;
          *(_OWORD *)&t1_32.CGFloat a = v332;
          CGAffineTransformTranslate((CGAffineTransform *)&t2, (CGAffineTransform *)t1, v286, v283);
          *(_OWORD *)&v449.CGFloat a = t2;
          *(_OWORD *)&v449.CGFloat c = t2_16;
          *(_OWORD *)&v449.tdouble x = *(_OWORD *)t2_32;
          *(void *)t1 = v340;
          *(void *)&t1[8] = afterg;
          *(void *)&t1[16] = v360;
          *(void *)&t1[24] = v381;
          t1_32.CGFloat a = v370;
          t1_32.CGFloat b = v392;
          CGAffineTransformTranslate((CGAffineTransform *)&t2, (CGAffineTransform *)t1, v292, v289);
          long long v382 = t2_16;
          long long v393 = t2;
          uint64_t v371 = *(void *)t2_32;
          uint64_t v361 = *(void *)&t2_32[8];
          outlined consume of DisplayList.Item.Value(v412, v16);
          outlined consume of DisplayList.Item.Value(v416, v25);
          swift_release();
          swift_release();
          _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)&v477, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
          uint64_t v116 = v414;
          unint64_t v117 = v416;
          _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)&v485, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
          outlined consume of DisplayList.Item.Value(v412, v16);
          outlined consume of DisplayList.Item.Value(v416, v25);
          *(_OWORD *)&v438[16] = v393;
          long long v439 = v382;
          *(void *)&long long v440 = v371;
          *((void *)&v440 + 1) = v361;
          outlined consume of DisplayList.Content.Value(v412);
          outlined consume of DisplayList.Content.Value(v416);
          double v121 = v300;
          double v122 = v304;
          CGFloat v119 = v308;
          CGFloat v120 = v313;
LABEL_144:
          double v417 = v396;
          v504.CGFloat a = v10;
          v504.CGFloat b = v9;
          v504.CGFloat c = v12;
          v504.CGFloat d = v11;
          v504.tdouble x = v397;
          v504.tCGFloat y = v108;
          *(void *)&long long v505 = v16;
          *((void *)&v505 + 1) = v116;
          BYTE2(v506) = BYTE2(v115);
          LOWORD(v506) = v115;
          HIDWORD(v506) = v399;
          *(double *)&long long v496 = v20;
          *((void *)&v496 + 1) = v19;
          double v497 = v22;
          double v498 = v21;
          uint64_t v499 = v401;
          unint64_t v500 = v117;
          unint64_t v501 = v25;
          uint64_t v502 = v118;
          BYTE2(v503) = BYTE2(v109);
          LOWORD(v503) = v109;
          HIDWORD(v503) = v403;
          char v38 = DisplayList.ViewUpdater.Platform.updateStateAsync(layer:oldItem:oldSize:oldState:newItem:newSize:newState:)(v405, (long long *)&v504, (uint64_t)&v447, &v496, (uint64_t)&v437, v120, v119, v122, v121);
          long long v425 = v443;
          long long v426 = v444;
          long long v427 = v445;
          long long v428 = v446;
          long long v422 = v440;
          long long v423 = v441;
          long long v424 = v442;
          long long t2 = v437;
          long long t2_16 = *(_OWORD *)v438;
          *(_OWORD *)t2_32 = *(_OWORD *)&v438[16];
          *(_OWORD *)&t2_32[16] = v439;
          long long v434 = v453;
          long long v435 = v454;
          long long v436 = v455;
          CGAffineTransform t1_32 = v449;
          long long v431 = v450;
          long long v432 = v451;
          long long v433 = v452;
          *(_OWORD *)t1 = v447;
          *(_OWORD *)&t1[16] = v448;
LABEL_145:
          outlined release of DisplayList.ViewUpdater.Model.State((uint64_t)&t2);
          outlined release of DisplayList.ViewUpdater.Model.State((uint64_t)t1);
          return v38 & 1;
        }
      }
      else if (v412 >> 60 == 3 && v30 >> 60 == 3)
      {
        long long v315 = *(_OWORD *)&v457[16];
        long long v322 = v458;
        long long v329 = v459;
        long long v110 = v468;
        uint64_t v352 = v469;
        uint64_t v365 = v470;
        uint64_t v375 = *((void *)&v469 + 1);
        uint64_t v385 = *((void *)&v470 + 1);
        char v310 = *(unsigned char *)((v412 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
        __int16 v301 = *(void **)((v30 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
        v306 = *(void **)((v412 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
        char v297 = *(unsigned char *)((v30 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
        long long v295 = *(_OWORD *)((v30 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
        CGFloat v293 = *(double *)((v30 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
        char v290 = *(unsigned char *)((v30 & 0xFFFFFFFFFFFFFFFLL) + 0x38);
        uint64_t v287 = *(void *)((v30 & 0xFFFFFFFFFFFFFFFLL) + 0x3C);
        uint64_t v284 = *(void *)((v30 & 0xFFFFFFFFFFFFFFFLL) + 0x44);
        char v281 = *(unsigned char *)((v30 & 0xFFFFFFFFFFFFFFFLL) + 0x4C);
        long long v279 = *(_OWORD *)((v30 & 0xFFFFFFFFFFFFFFFLL) + 0x50);
        uint64_t v277 = *(void *)((v30 & 0xFFFFFFFFFFFFFFFLL) + 0x60);
        uint64_t v275 = *(void *)((v30 & 0xFFFFFFFFFFFFFFFLL) + 0x68);
        char v273 = *(unsigned char *)((v30 & 0xFFFFFFFFFFFFFFFLL) + 0x70);
        char v271 = *(unsigned char *)((v30 & 0xFFFFFFFFFFFFFFFLL) + 0x71);
        __int16 v269 = *(_WORD *)((v30 & 0xFFFFFFFFFFFFFFFLL) + 0x72);
        outlined copy of DisplayList.Item.Value(v412, v16);
        outlined copy of DisplayList.Item.Value(v30, v25);
        outlined copy of DisplayList.Item.Value(v412, v16);
        outlined copy of DisplayList.Item.Value(v30, v25);
        outlined copy of DisplayList.Item.Value(v412, v16);
        outlined copy of DisplayList.Item.Value(v30, v25);
        outlined retain of DisplayList.ViewUpdater.Model.State((uint64_t)&v456);
        outlined retain of DisplayList.ViewUpdater.Model.State((uint64_t)&v466);
        outlined copy of GraphicsImage.Contents?(v306, v310);
        outlined copy of GraphicsImage.Contents?(v301, v297);
        uint64_t v111 = (CGAffineTransform *)GraphicsImage.bitmapOrientation.getter();
        *(void *)t1 = v301;
        t1[8] = v297;
        *(_OWORD *)&t1[16] = v295;
        t1_32.CGFloat a = v293;
        LOBYTE(t1_32.b) = v290;
        *(void *)((char *)&t1_32.b + 4) = v287;
        *(void *)((char *)&t1_32.c + 4) = v284;
        BYTE4(t1_32.d) = v281;
        *(_OWORD *)&t1_32.tdouble x = v279;
        *(void *)&long long v431 = v277;
        *((void *)&v431 + 1) = v275;
        LOBYTE(v432) = v273;
        BYTE1(v432) = v271;
        WORD1(v432) = v269;
        int v112 = 1;
        double v113 = (CGAffineTransform *)GraphicsImage.bitmapOrientation.getter();
        switch((char)v111)
        {
          case 1:
          case 2:
          case 3:
            goto LABEL_50;
          case 4:
          case 5:
          case 6:
          case 7:
            int v112 = 0;
LABEL_50:
            specialized CGAffineTransform.init(orientation:in:)(v111, &v477, v12, v11);
            *(_OWORD *)t1 = v477;
            *(_OWORD *)&t1[16] = v478;
            *(_OWORD *)&t1_32.CGFloat a = v479;
            long long t2 = v315;
            long long t2_16 = v322;
            *(_OWORD *)t2_32 = v329;
            CGAffineTransformConcat(&v504, (CGAffineTransform *)t1, (CGAffineTransform *)&t2);
            CGAffineTransform v449 = v504;
            break;
          default:
            break;
        }
        int v335 = v112;
        int v114 = 1;
        switch((char)v113)
        {
          case 1:
          case 2:
          case 3:
            goto LABEL_53;
          case 4:
          case 5:
          case 6:
          case 7:
            int v114 = 0;
LABEL_53:
            specialized CGAffineTransform.init(orientation:in:)(v113, &v485, v22, v21);
            *(_OWORD *)t1 = v485;
            *(_OWORD *)&t1[16] = v486;
            *(_OWORD *)&t1_32.CGFloat a = v487;
            long long t2 = v110;
            *(void *)&long long t2_16 = v352;
            *((void *)&t2_16 + 1) = v375;
            *(void *)t2_32 = v365;
            *(void *)&t2_32[8] = v385;
            CGAffineTransformConcat(&v504, (CGAffineTransform *)t1, (CGAffineTransform *)&t2);
            long long v376 = *(_OWORD *)&v504.c;
            long long v386 = *(_OWORD *)&v504.a;
            tdouble x = v504.tx;
            tCGFloat y = v504.ty;
            CGFloat v108 = *(double *)&v412;
            int v115 = v32;
            outlined consume of DisplayList.Item.Value(v412, v16);
            uint64_t v116 = v414;
            unint64_t v117 = v416;
            uint64_t v118 = v411;
            int v109 = v29;
            outlined consume of DisplayList.Item.Value(v416, v25);
            outlined consume of GraphicsImage.Contents?(v301, v297);
            outlined consume of GraphicsImage.Contents?(v306, v310);
            outlined consume of DisplayList.Item.Value(v416, v25);
            outlined consume of DisplayList.Item.Value(v412, v16);
            outlined consume of DisplayList.Content.Value(v412);
            outlined consume of DisplayList.Content.Value(v416);
            *(_OWORD *)&v438[16] = v386;
            long long v439 = v376;
            *(CGFloat *)&long long v440 = tx;
            *((CGFloat *)&v440 + 1) = ty;
            if (v335) {
              CGFloat v119 = v11;
            }
            else {
              CGFloat v119 = v12;
            }
            if (v335) {
              CGFloat v120 = v12;
            }
            else {
              CGFloat v120 = v11;
            }
            double v121 = v22;
            double v122 = v21;
            if (!v114) {
              goto LABEL_144;
            }
            goto LABEL_143;
          default:
            CGFloat v108 = *(double *)&v412;
            int v115 = v32;
            outlined consume of DisplayList.Item.Value(v412, v16);
            uint64_t v116 = v414;
            unint64_t v117 = v416;
            uint64_t v118 = v411;
            int v109 = v29;
            outlined consume of DisplayList.Item.Value(v416, v25);
            outlined consume of GraphicsImage.Contents?(v301, v297);
            outlined consume of GraphicsImage.Contents?(v306, v310);
            outlined consume of DisplayList.Item.Value(v416, v25);
            outlined consume of DisplayList.Item.Value(v412, v16);
            outlined consume of DisplayList.Content.Value(v412);
            outlined consume of DisplayList.Content.Value(v416);
            if (v335) {
              CGFloat v119 = v11;
            }
            else {
              CGFloat v119 = v12;
            }
            if (v335) {
              CGFloat v120 = v12;
            }
            else {
              CGFloat v120 = v11;
            }
LABEL_143:
            double v121 = v21;
            double v122 = v22;
            break;
        }
        goto LABEL_144;
      }
      outlined copy of DisplayList.Item.Value(v412, v16);
      outlined copy of DisplayList.Item.Value(v30, v25);
      outlined copy of DisplayList.Item.Value(v412, v16);
      outlined copy of DisplayList.Item.Value(v30, v25);
      outlined retain of DisplayList.ViewUpdater.Model.State((uint64_t)&v456);
      outlined retain of DisplayList.ViewUpdater.Model.State((uint64_t)&v466);
      outlined consume of DisplayList.Item.Value(v412, v16);
      outlined consume of DisplayList.Item.Value(v30, v25);
      unint64_t v231 = v412;
LABEL_112:
      outlined consume of DisplayList.Content.Value(v231);
      unint64_t v243 = v30;
LABEL_113:
      outlined consume of DisplayList.Content.Value(v243);
      outlined release of DisplayList.ViewUpdater.Model.State((uint64_t)&v466);
      uint64_t v244 = &v456;
LABEL_114:
      outlined release of DisplayList.ViewUpdater.Model.State((uint64_t)v244);
      goto LABEL_20;
    }
  }
  else if (!v27)
  {
    if ((unsigned __int16)*(void *)(a3 + 48) != (unsigned __int16)v25)
    {
      uint64_t v410 = *((void *)a5 + 7);
      long long v44 = *(_OWORD *)(a4 + 128);
      long long v45 = *(_OWORD *)(a4 + 96);
      long long v462 = *(_OWORD *)(a4 + 112);
      long long v463 = v44;
      long long v46 = *(_OWORD *)(a4 + 128);
      long long v47 = *(_OWORD *)(a4 + 160);
      long long v464 = *(_OWORD *)(a4 + 144);
      long long v465 = v47;
      long long v48 = *(_OWORD *)(a4 + 64);
      long long v49 = *(_OWORD *)(a4 + 32);
      long long v458 = *(_OWORD *)(a4 + 48);
      long long v459 = v48;
      long long v50 = *(_OWORD *)(a4 + 64);
      long long v51 = *(_OWORD *)(a4 + 96);
      long long v460 = *(_OWORD *)(a4 + 80);
      long long v461 = v51;
      long long v52 = *(_OWORD *)a4;
      long long v53 = *(_OWORD *)a4;
      long long v54 = *(_OWORD *)(a4 + 32);
      *(_OWORD *)v457 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)&v457[16] = v54;
      long long v453 = v46;
      long long v454 = v464;
      long long v455 = *(_OWORD *)(a4 + 160);
      long long v456 = v52;
      *(_OWORD *)&v449.tdouble x = v50;
      long long v450 = v460;
      long long v451 = v45;
      long long v452 = v462;
      long long v447 = v53;
      long long v448 = *(_OWORD *)v457;
      *(_OWORD *)&v449.CGFloat a = v49;
      *(_OWORD *)&v449.CGFloat c = v458;
      long long v55 = *(_OWORD *)(a6 + 112);
      long long v56 = *(_OWORD *)(a6 + 144);
      long long v474 = *(_OWORD *)(a6 + 128);
      long long v475 = v56;
      long long v57 = *(_OWORD *)(a6 + 144);
      long long v476 = *(_OWORD *)(a6 + 160);
      long long v58 = *(_OWORD *)(a6 + 48);
      long long v59 = *(_OWORD *)(a6 + 80);
      long long v470 = *(_OWORD *)(a6 + 64);
      long long v471 = v59;
      long long v60 = *(_OWORD *)(a6 + 80);
      long long v61 = *(_OWORD *)(a6 + 112);
      long long v472 = *(_OWORD *)(a6 + 96);
      long long v473 = v61;
      long long v62 = *(_OWORD *)(a6 + 16);
      long long v466 = *(_OWORD *)a6;
      long long v467 = v62;
      long long v63 = *(_OWORD *)(a6 + 48);
      long long v65 = *(_OWORD *)a6;
      long long v64 = *(_OWORD *)(a6 + 16);
      long long v468 = *(_OWORD *)(a6 + 32);
      long long v469 = v63;
      long long v444 = v474;
      long long v445 = v57;
      long long v446 = *(_OWORD *)(a6 + 160);
      long long v440 = v470;
      long long v441 = v60;
      long long v442 = v472;
      long long v443 = v55;
      long long v437 = v65;
      *(_OWORD *)uint64_t v438 = v64;
      *(_OWORD *)&v438[16] = v468;
      long long v439 = v58;
      *(double *)&long long v477 = v12;
      *((double *)&v477 + 1) = v11;
      double v417 = v22;
      double v418 = v21;
      *(unsigned char *)(a1 + 32) = 0;
      switch(v13 >> 60)
      {
        case 1uLL:
          if (v30 >> 60 != 1) {
            goto LABEL_107;
          }
          CGFloat v398 = v14;
          int v400 = v18;
          uint64_t v402 = v23;
          int v404 = v26;
          float v328 = *(float *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x1C);
          float v334 = *(float *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
          float v337 = *(float *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x14);
          afterCGFloat c = *(float *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
          float v384 = *(float *)((v30 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
          float v373 = *(float *)((v30 & 0xFFFFFFFFFFFFFFFLL) + 0x14);
          float v363 = *(float *)((v30 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
          float v350 = *(float *)((v30 & 0xFFFFFFFFFFFFFFFLL) + 0x1C);
          unint64_t v67 = v13;
          int v394 = v17;
          outlined copy of DisplayList.Item.Value(v13, v16);
          outlined copy of DisplayList.Item.Value(v30, v25);
          if (v384 == afterc && v373 == v337 && v363 == v334 && v350 == v328)
          {
            CGFloat v68 = *(double *)&v67;
            outlined copy of DisplayList.Item.Value(v67, v16);
            outlined copy of DisplayList.Item.Value(v30, v25);
            outlined copy of DisplayList.Item.Value(v67, v16);
            outlined copy of DisplayList.Item.Value(v30, v25);
            outlined retain of DisplayList.ViewUpdater.Model.State((uint64_t)&v456);
            outlined retain of DisplayList.ViewUpdater.Model.State((uint64_t)&v466);
            outlined consume of DisplayList.Content.Value(v67);
            outlined consume of DisplayList.Content.Value(v30);
            double v69 = v21;
            double v70 = v22;
            double v71 = v11;
            double v72 = v12;
            uint64_t v73 = a1;
            goto LABEL_125;
          }
          outlined copy of DisplayList.Item.Value(v67, v16);
          outlined copy of DisplayList.Item.Value(v30, v25);
          outlined copy of DisplayList.Item.Value(v67, v16);
          outlined copy of DisplayList.Item.Value(v30, v25);
          outlined retain of DisplayList.ViewUpdater.Model.State((uint64_t)&v456);
          outlined retain of DisplayList.ViewUpdater.Model.State((uint64_t)&v466);
          if (one-time initialization token for cache != -1) {
            swift_once();
          }
          uint64_t v256 = (void *)specialized ObjectCache.subscript.getter(v384, v373, v363, v350);
          v508.super.isCGFloat a = *(Class *)a1;
          v257._countAndFlagsBits = 0x756F72676B636162;
          v257._object = (void *)0xEF726F6C6F43646ELL;
          *(void *)&v508._attr.refcount = 1;
          DisplayList.ViewUpdater.ViewCache.setAsyncValue(_:for:in:usingPresentationModifier:)((NSObject)v256, v257, v508, v258);

          outlined consume of DisplayList.Content.Value(v67);
          outlined consume of DisplayList.Content.Value(v30);
          double v69 = v21;
          double v70 = v22;
          double v71 = v11;
          double v72 = v12;
          uint64_t v73 = a1;
          goto LABEL_124;
        case 3uLL:
          if (v30 >> 60 != 3) {
            goto LABEL_107;
          }
          CGFloat v398 = v14;
          int v400 = v18;
          uint64_t v402 = v23;
          int v404 = v26;
          char v367 = *(unsigned char *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
          uint64_t v149 = *(void *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
          uint64_t v150 = *(void *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x28);
          CGFloat v151 = *(double *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
          char v152 = *(unsigned char *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x38);
          uint64_t v153 = *(void *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x3C);
          uint64_t v154 = *(void *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x44);
          unint64_t v155 = v30;
          char v156 = *(unsigned char *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x4C);
          uint64_t v415 = v15;
          CGFloat v157 = *(double *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x50);
          CGFloat v158 = *(double *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x58);
          uint64_t v159 = *(void *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x60);
          uint64_t v160 = *(void *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x68);
          char v338 = *(unsigned char *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x70);
          char v354 = *(unsigned char *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x72);
          char after = *(unsigned char *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x73);
          char v161 = *(unsigned char *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x71);
          uint64_t v162 = v155 & 0xFFFFFFFFFFFFFFFLL;
          uint64_t v387 = *(void **)((v155 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
          char v378 = *(unsigned char *)((v155 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
          uint64_t v163 = *(void *)((v155 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
          uint64_t v164 = *(void *)((v155 & 0xFFFFFFFFFFFFFFFLL) + 0x28);
          double v165 = *(double *)((v155 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
          LOBYTE(v155) = *(unsigned char *)((v155 & 0xFFFFFFFFFFFFFFFLL) + 0x38);
          uint64_t v166 = *(void *)(v162 + 60);
          uint64_t v167 = *(void *)(v162 + 68);
          char v168 = *(unsigned char *)(v162 + 76);
          double v169 = *(double *)(v162 + 80);
          double v170 = *(double *)(v162 + 88);
          uint64_t v171 = *(void *)(v162 + 96);
          uint64_t v172 = *(void *)(v162 + 104);
          char v173 = *(unsigned char *)(v162 + 112);
          char v174 = *(unsigned char *)(v162 + 113);
          char v175 = *(unsigned char *)(v162 + 114);
          LOBYTE(v162) = *(unsigned char *)(v162 + 115);
          *(void *)t1 = *(void *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
          t1[8] = v367;
          uint64_t v278 = v150;
          uint64_t v280 = v149;
          *(void *)&t1[16] = v149;
          *(void *)&t1[24] = v150;
          CGFloat v276 = v151;
          t1_32.CGFloat a = v151;
          char v274 = v152;
          LOBYTE(t1_32.b) = v152;
          uint64_t v270 = v154;
          uint64_t v272 = v153;
          *(void *)((char *)&t1_32.b + 4) = v153;
          *(void *)((char *)&t1_32.c + 4) = v154;
          BYTE4(t1_32.d) = v156;
          CGFloat v268 = v157;
          t1_32.tdouble x = v157;
          t1_32.tCGFloat y = v158;
          uint64_t v267 = v159;
          *(void *)&long long v431 = v159;
          unint64_t v30 = v416;
          *((void *)&v431 + 1) = v160;
          LOBYTE(v432) = v338;
          char v266 = v161;
          BYTE1(v432) = v161;
          BYTE2(v432) = v354;
          BYTE3(v432) = after;
          *(void *)&long long t2 = v387;
          BYTE8(t2) = v378;
          uint64_t v326 = v164;
          uint64_t v330 = v163;
          *(void *)&long long t2_16 = v163;
          *((void *)&t2_16 + 1) = v164;
          CGFloat v323 = v165;
          *(double *)t2_32 = v165;
          char v319 = v155;
          t2_32[8] = v155;
          uint64_t v311 = v167;
          uint64_t v316 = v166;
          *(void *)&t2_32[12] = v166;
          *(void *)&t2_32[20] = v167;
          char v307 = v168;
          t2_32[28] = v168;
          CGFloat v298 = v170;
          CGFloat v302 = v169;
          *(double *)&long long v422 = v169;
          *((double *)&v422 + 1) = v170;
          uint64_t v294 = v172;
          uint64_t v296 = v171;
          *(void *)&long long v423 = v171;
          *((void *)&v423 + 1) = v172;
          char v291 = v173;
          LOBYTE(v424) = v173;
          char v282 = v174;
          BYTE1(v424) = v174;
          char v288 = v175;
          BYTE2(v424) = v175;
          char v285 = v162;
          BYTE3(v424) = v162;
          uint64_t v177 = v13;
          int v178 = v17;
          outlined copy of DisplayList.Item.Value(v13, v16);
          outlined copy of DisplayList.Item.Value(v416, v25);
          outlined copy of DisplayList.Item.Value(v177, v16);
          outlined copy of DisplayList.Item.Value(v416, v25);
          outlined copy of DisplayList.Item.Value(v177, v16);
          outlined copy of DisplayList.Item.Value(v416, v25);
          outlined retain of DisplayList.ViewUpdater.Model.State((uint64_t)&v456);
          outlined retain of DisplayList.ViewUpdater.Model.State((uint64_t)&v466);
          CGFloat v179 = *(void **)t1;
          outlined copy of GraphicsImage.Contents?(*(id *)t1, v367);
          outlined copy of GraphicsImage.Contents?(v387, v378);
          uint64_t v406 = a1;
          if (specialized static ImageLayer.updateAsync(layer:oldImage:oldSize:newImage:newSize:)((Class *)a1, (uint64_t)t1, (uint64_t)&t2, v12, v11, v22, v21))
          {
            int v394 = v178;
            unint64_t v413 = v177;
            *(void *)t1 = v179;
            t1[8] = v367;
            *(void *)&t1[16] = v280;
            *(void *)&t1[24] = v278;
            t1_32.CGFloat a = v276;
            LOBYTE(t1_32.b) = v274;
            *(void *)((char *)&t1_32.b + 4) = v272;
            *(void *)((char *)&t1_32.c + 4) = v270;
            BYTE4(t1_32.d) = v156;
            t1_32.tdouble x = v268;
            t1_32.tCGFloat y = v158;
            *(void *)&long long v431 = v267;
            *((void *)&v431 + 1) = v160;
            LOBYTE(v432) = v338;
            BYTE1(v432) = v266;
            BYTE2(v432) = v354;
            BYTE3(v432) = after;
            CGFloat v180 = (CGAffineTransform *)GraphicsImage.bitmapOrientation.getter();
            *(void *)t1 = v387;
            t1[8] = v378;
            *(void *)&t1[16] = v330;
            *(void *)&t1[24] = v326;
            t1_32.CGFloat a = v323;
            LOBYTE(t1_32.b) = v319;
            *(void *)((char *)&t1_32.b + 4) = v316;
            *(void *)((char *)&t1_32.c + 4) = v311;
            BYTE4(t1_32.d) = v307;
            t1_32.tdouble x = v302;
            t1_32.tCGFloat y = v298;
            *(void *)&long long v431 = v296;
            *((void *)&v431 + 1) = v294;
            LOBYTE(v432) = v291;
            BYTE1(v432) = v282;
            BYTE2(v432) = v288;
            BYTE3(v432) = v285;
            int v181 = 1;
            uint64_t v182 = (CGAffineTransform *)GraphicsImage.bitmapOrientation.getter();
            uint64_t v15 = v415;
            switch((char)v180)
            {
              case 1:
              case 2:
              case 3:
                goto LABEL_75;
              case 4:
              case 5:
              case 6:
              case 7:
                int v181 = 0;
LABEL_75:
                *(_OWORD *)&afterd[0].seconds = v458;
                long long v355 = *(_OWORD *)&v457[16];
                long long v183 = v459;
                specialized CGAffineTransform.init(orientation:in:)(v180, &v485, v12, v11);
                *(_OWORD *)t1 = v485;
                *(_OWORD *)&t1[16] = v486;
                *(_OWORD *)&t1_32.CGFloat a = v487;
                long long t2 = v355;
                long long t2_16 = *(_OWORD *)&afterd[0].seconds;
                *(_OWORD *)t2_32 = v183;
                CGAffineTransformConcat(&v504, (CGAffineTransform *)t1, (CGAffineTransform *)&t2);
                CGAffineTransform v449 = v504;
                break;
              default:
                break;
            }
            int v184 = 1;
            switch((char)v182)
            {
              case 1:
              case 2:
              case 3:
                goto LABEL_78;
              case 4:
              case 5:
              case 6:
              case 7:
                int v184 = 0;
LABEL_78:
                *(_OWORD *)&aftere[0].seconds = v469;
                long long v356 = v468;
                long long v185 = v470;
                specialized CGAffineTransform.init(orientation:in:)(v182, &v493, v22, v21);
                *(_OWORD *)t1 = v493;
                *(_OWORD *)&t1[16] = v494;
                *(_OWORD *)&t1_32.CGFloat a = v495;
                long long t2 = v356;
                long long t2_16 = *(_OWORD *)&aftere[0].seconds;
                *(_OWORD *)t2_32 = v185;
                CGAffineTransformConcat(&v504, (CGAffineTransform *)t1, (CGAffineTransform *)&t2);
                *(_OWORD *)&afterf[0].seconds = *(_OWORD *)&v504.c;
                long long v357 = *(_OWORD *)&v504.a;
                CGFloat v339 = v504.tx;
                CGFloat v331 = v504.ty;
                outlined consume of GraphicsImage.Contents?(v387, v378);
                outlined consume of GraphicsImage.Contents?(v179, v367);
                CGFloat v68 = *(double *)&v413;
                outlined consume of DisplayList.Content.Value(v413);
                unint64_t v30 = v416;
                outlined consume of DisplayList.Content.Value(v416);
                *(_OWORD *)&v438[16] = v357;
                long long v439 = *(_OWORD *)&afterf[0].seconds;
                *(CGFloat *)&long long v440 = v339;
                *((CGFloat *)&v440 + 1) = v331;
                if (v181) {
                  double v71 = v11;
                }
                else {
                  double v71 = v12;
                }
                if (v181) {
                  double v72 = v12;
                }
                else {
                  double v72 = v11;
                }
                double v69 = v22;
                double v70 = v21;
                uint64_t v73 = v406;
                if (v184) {
                  goto LABEL_153;
                }
                goto LABEL_125;
              default:
                outlined consume of GraphicsImage.Contents?(v387, v378);
                outlined consume of GraphicsImage.Contents?(v179, v367);
                CGFloat v68 = *(double *)&v413;
                outlined consume of DisplayList.Content.Value(v413);
                unint64_t v30 = v416;
                outlined consume of DisplayList.Content.Value(v416);
                if (v181) {
                  double v71 = v11;
                }
                else {
                  double v71 = v12;
                }
                if (v181) {
                  double v72 = v12;
                }
                else {
                  double v72 = v11;
                }
                uint64_t v73 = v406;
LABEL_153:
                double v69 = v21;
                double v70 = v22;
                break;
            }
            goto LABEL_125;
          }
          outlined consume of GraphicsImage.Contents?(v179, v367);
          outlined consume of GraphicsImage.Contents?(v387, v378);
          outlined consume of DisplayList.Item.Value(v416, v25);
          outlined consume of DisplayList.Item.Value(v177, v16);
          outlined consume of DisplayList.Item.Value(v177, v16);
          uint64_t v229 = v416;
          unint64_t v230 = v25;
LABEL_108:
          outlined consume of DisplayList.Item.Value(v229, v230);
          unint64_t v231 = v177;
          goto LABEL_112;
        case 4uLL:
          long long v186 = *(_OWORD *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
          long long v485 = *(_OWORD *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
          long long v486 = v186;
          LOBYTE(v487) = *(unsigned char *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
          if (v30 >> 60 != 4) {
            goto LABEL_107;
          }
          CGFloat v398 = v14;
          int v400 = v18;
          uint64_t v402 = v23;
          int v404 = v26;
          int v368 = *(unsigned __int8 *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x41);
          __int16 v379 = *(unsigned __int8 *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x40);
          uint64_t v388 = *(void *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x38);
          long long v187 = *(_OWORD *)((v30 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
          long long v188 = *(_OWORD *)((v30 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
          LOBYTE(v495) = *(unsigned char *)((v30 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
          long long v493 = v187;
          long long v494 = v188;
          uint64_t v189 = *(void *)((v30 & 0xFFFFFFFFFFFFFFFLL) + 0x38);
          __int16 v358 = *(unsigned __int8 *)((v30 & 0xFFFFFFFFFFFFFFFLL) + 0x40);
          int v190 = *(unsigned __int8 *)((v30 & 0xFFFFFFFFFFFFFFFLL) + 0x41);
          unint64_t v191 = v13;
          int v192 = v17;
          outlined copy of DisplayList.Item.Value(v13, v16);
          outlined copy of DisplayList.Item.Value(v30, v25);
          outlined copy of DisplayList.Item.Value(v191, v16);
          outlined copy of DisplayList.Item.Value(v30, v25);
          int v394 = v192;
          outlined copy of DisplayList.Item.Value(v191, v16);
          outlined copy of DisplayList.Item.Value(v30, v25);
          outlined retain of DisplayList.ViewUpdater.Model.State((uint64_t)&v456);
          outlined retain of DisplayList.ViewUpdater.Model.State((uint64_t)&v466);
          _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)&v485, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
          _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)&v493, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
          if (v368) {
            __int16 v193 = 256;
          }
          else {
            __int16 v193 = 0;
          }
          __int16 v194 = v193 | v379;
          if (v190) {
            __int16 v195 = 256;
          }
          else {
            __int16 v195 = 0;
          }
          __int16 v196 = v195 | v358;
          swift_retain();
          swift_retain();
          char v197 = DisplayList.ViewUpdater.Platform.updateShapeViewAsync(layer:oldState:oldSize:oldPath:oldPaint:oldStyle:newState:newSize:newPath:newPaint:newStyle:contentsChanged:)((void **)a1, (uint64_t)&v447, (double *)&v477, (uint64_t)&v485, v388, v194, (uint64_t)&v437, &v417, (uint64_t)&v493, v189, v196, 1);
          swift_release();
          swift_release();
          _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)&v493, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
          _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)&v485, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
          if (v197)
          {
            outlined consume of DisplayList.Content.Value(v191);
            unint64_t v30 = v416;
            outlined consume of DisplayList.Content.Value(v416);
            double v71 = *((double *)&v477 + 1);
            double v72 = *(double *)&v477;
            double v70 = v417;
            double v69 = v418;
            uint64_t v73 = a1;
            CGFloat v68 = *(double *)&v191;
            goto LABEL_125;
          }
          outlined consume of DisplayList.Item.Value(v416, v25);
          outlined consume of DisplayList.Item.Value(v191, v16);
          outlined consume of DisplayList.Item.Value(v191, v16);
          outlined consume of DisplayList.Item.Value(v416, v25);
          outlined consume of DisplayList.Content.Value(v191);
          outlined consume of DisplayList.Content.Value(v416);
          long long v425 = v443;
          long long v426 = v444;
          long long v427 = v445;
          long long v428 = v446;
          long long v422 = v440;
          long long v423 = v441;
          long long v424 = v442;
          long long t2 = v437;
          long long t2_16 = *(_OWORD *)v438;
          *(_OWORD *)t2_32 = *(_OWORD *)&v438[16];
          *(_OWORD *)&t2_32[16] = v439;
          outlined release of DisplayList.ViewUpdater.Model.State((uint64_t)&t2);
          long long v434 = v453;
          long long v435 = v454;
          long long v436 = v455;
          CGAffineTransform t1_32 = v449;
          long long v431 = v450;
          long long v432 = v451;
          long long v433 = v452;
          *(_OWORD *)t1 = v447;
          *(_OWORD *)&t1[16] = v448;
          uint64_t v244 = (long long *)t1;
          goto LABEL_114;
        case 9uLL:
          if (v30 >> 60 != 9) {
            goto LABEL_107;
          }
          CGFloat v398 = v14;
          int v400 = v18;
          uint64_t v402 = v23;
          int v404 = v26;
          char v198 = *(unsigned char *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x40);
          int v199 = *(_DWORD *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x3C);
          char v200 = *(unsigned char *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x38);
          int v201 = *(_DWORD *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x34);
          char v202 = *(unsigned char *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
          uint64_t v203 = *(void *)((v30 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
          uint64_t v204 = *(unsigned __int16 *)((v30 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
          uint64_t v205 = *(unsigned __int8 *)((v30 & 0xFFFFFFFFFFFFFFFLL) + 0x1A);
          int v206 = v17;
          char v207 = *(unsigned char *)((v30 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
          int v208 = *(_DWORD *)((v30 & 0xFFFFFFFFFFFFFFFLL) + 0x34);
          char v209 = *(unsigned char *)((v30 & 0xFFFFFFFFFFFFFFFLL) + 0x38);
          int v211 = *(_DWORD *)((v30 & 0xFFFFFFFFFFFFFFFLL) + 0x3C);
          unint64_t v67 = v13;
          char v212 = *(unsigned char *)((v30 & 0xFFFFFFFFFFFFFFFLL) + 0x40);
          CGFloat v213 = *(double *)(v466 + 8);
          LOBYTE(t2) = v202;
          DWORD1(t2) = v201;
          BYTE8(t2) = v200;
          HIDWORD(t2) = v199;
          LOBYTE(t2_16) = v198;
          LOBYTE(v504.a) = v207;
          HIDWORD(v504.a) = v208;
          LOBYTE(v504.b) = v209;
          HIDWORD(v504.b) = v211;
          LOBYTE(v504.c) = v212;
          __int16 v369 = v204;
          char v359 = v205;
          uint64_t v380 = v203;
          *(void *)t1 = v203;
          *(void *)&t1[8] = v204 | (v205 << 16);
          BOOL v214 = v22 != v12;
          *(_OWORD *)&t1[16] = *(_OWORD *)((v30 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
          aftera.seconds = v213;
          t1_32.CGFloat a = v213;
          if (v21 != v11) {
            BOOL v214 = 1;
          }
          char v389 = v214;
          LOBYTE(t1_32.b) = 2;
          outlined copy of DisplayList.Item.Value(v67, v16);
          outlined copy of DisplayList.Item.Value(v30, v25);
          outlined copy of DisplayList.Item.Value(v67, v16);
          outlined copy of DisplayList.Item.Value(v30, v25);
          outlined copy of DisplayList.Item.Value(v67, v16);
          outlined copy of DisplayList.Item.Value(v30, v25);
          outlined retain of DisplayList.ViewUpdater.Model.State((uint64_t)&v456);
          outlined retain of DisplayList.ViewUpdater.Model.State((uint64_t)&v466);
          if ((DisplayList.ViewUpdater.Platform.updateDrawingViewAsync(_:oldOptions:newOptions:content:sizeChanged:newSize:newState:)(a1, (char *)&t2, (uint64_t)&v504, (uint64_t)t1, v389, (long long *)a6, v22, v21) & 1) == 0)goto LABEL_128; {
          int v394 = v206;
          }
          double v390 = *(double *)(a1 + 24);
          *(void *)t1 = v380;
          *(_WORD *)&t1[8] = v369;
          t1[10] = v359;
          v504.CGFloat a = aftera.seconds;
          DisplayList.nextUpdate(after:)(aftera);
          outlined consume of DisplayList.Content.Value(v67);
          outlined consume of DisplayList.Content.Value(v30);
          double v215 = *(double *)&t2;
          if (*(double *)&t2 >= v390) {
            double v215 = v390;
          }
          *(double *)(a1 + 24) = v215;
          double v69 = v21;
          double v70 = v22;
          double v71 = v11;
          double v72 = v12;
          uint64_t v73 = a1;
          goto LABEL_124;
        case 0xAuLL:
          if (v30 >> 60 != 10) {
            goto LABEL_107;
          }
          CGFloat v398 = v14;
          int v400 = v18;
          uint64_t v402 = v23;
          int v404 = v26;
          char v216 = *(unsigned char *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x38);
          int v217 = *(_DWORD *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x34);
          char v218 = *(unsigned char *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
          int v219 = *(_DWORD *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x2C);
          char v220 = *(unsigned char *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 0x28);
          uint64_t v221 = *(void *)((v30 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
          int v222 = v17;
          char v223 = *(unsigned char *)((v30 & 0xFFFFFFFFFFFFFFFLL) + 0x28);
          int v224 = *(_DWORD *)((v30 & 0xFFFFFFFFFFFFFFFLL) + 0x2C);
          char v225 = *(unsigned char *)((v30 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
          int v226 = *(_DWORD *)((v30 & 0xFFFFFFFFFFFFFFFLL) + 0x34);
          unint64_t v67 = v13;
          char v227 = *(unsigned char *)((v30 & 0xFFFFFFFFFFFFFFFLL) + 0x38);
          LOBYTE(t2) = v220;
          DWORD1(t2) = v219;
          BYTE8(t2) = v218;
          HIDWORD(t2) = v217;
          LOBYTE(t2_16) = v216;
          LOBYTE(v504.a) = v223;
          HIDWORD(v504.a) = v224;
          LOBYTE(v504.b) = v225;
          HIDWORD(v504.b) = v226;
          LOBYTE(v504.c) = v227;
          *(_OWORD *)&t1[8] = *(_OWORD *)((v30 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
          t1_32.CGFloat a = 0.0;
          BOOL v228 = v22 != v12;
          *(void *)t1 = v221;
          *(void *)&t1[24] = 0;
          if (v21 != v11) {
            BOOL v228 = 1;
          }
          char v391 = v228;
          LOBYTE(t1_32.b) = 3;
          outlined copy of DisplayList.Item.Value(v67, v16);
          outlined copy of DisplayList.Item.Value(v30, v25);
          outlined copy of DisplayList.Item.Value(v67, v16);
          outlined copy of DisplayList.Item.Value(v30, v25);
          outlined copy of DisplayList.Item.Value(v67, v16);
          outlined copy of DisplayList.Item.Value(v30, v25);
          outlined retain of DisplayList.ViewUpdater.Model.State((uint64_t)&v456);
          outlined retain of DisplayList.ViewUpdater.Model.State((uint64_t)&v466);
          if ((DisplayList.ViewUpdater.Platform.updateDrawingViewAsync(_:oldOptions:newOptions:content:sizeChanged:newSize:newState:)(a1, (char *)&t2, (uint64_t)&v504, (uint64_t)t1, v391, (long long *)a6, v22, v21) & 1) == 0)
          {
LABEL_128:
            outlined consume of DisplayList.Item.Value(v30, v25);
            outlined consume of DisplayList.Item.Value(v67, v16);
            outlined consume of DisplayList.Item.Value(v67, v16);
            outlined consume of DisplayList.Item.Value(v30, v25);
            outlined consume of DisplayList.Content.Value(v67);
            unint64_t v243 = v30;
            goto LABEL_113;
          }
          int v394 = v222;
          outlined consume of DisplayList.Content.Value(v67);
          outlined consume of DisplayList.Content.Value(v30);
          double v69 = v21;
          double v70 = v22;
          double v71 = v11;
          double v72 = v12;
          uint64_t v73 = a1;
LABEL_124:
          CGFloat v68 = *(double *)&v67;
LABEL_125:
          v504.CGFloat a = v10;
          v504.CGFloat b = v9;
          v504.CGFloat c = v12;
          v504.CGFloat d = v11;
          v504.tdouble x = v398;
          v504.tCGFloat y = v68;
          *(void *)&long long v505 = v16;
          *((void *)&v505 + 1) = v15;
          BYTE2(v506) = BYTE2(v394);
          LOWORD(v506) = v394;
          HIDWORD(v506) = v400;
          *(double *)&long long v496 = v20;
          *((void *)&v496 + 1) = v19;
          double v497 = v22;
          double v498 = v21;
          uint64_t v499 = v402;
          unint64_t v500 = v30;
          unint64_t v501 = v25;
          uint64_t v502 = v410;
          BYTE2(v503) = BYTE2(v29);
          LOWORD(v503) = v29;
          HIDWORD(v503) = v404;
          uint64_t v259 = v30;
          char v38 = DisplayList.ViewUpdater.Platform.updateStateAsync(layer:oldItem:oldSize:oldState:newItem:newSize:newState:)(v73, (long long *)&v504, (uint64_t)&v447, &v496, (uint64_t)&v437, v72, v71, v70, v69);
          outlined consume of DisplayList.Item.Value(v259, v25);
          outlined consume of DisplayList.Item.Value(*(uint64_t *)&v68, v16);
          outlined consume of DisplayList.Item.Value(*(uint64_t *)&v68, v16);
          outlined consume of DisplayList.Item.Value(v259, v25);
          long long v425 = v443;
          long long v426 = v444;
          long long v427 = v445;
          long long v428 = v446;
          long long v422 = v440;
          long long v423 = v441;
          long long v424 = v442;
          long long t2 = v437;
          long long t2_16 = *(_OWORD *)v438;
          *(_OWORD *)t2_32 = *(_OWORD *)&v438[16];
          *(_OWORD *)&t2_32[16] = v439;
          long long v434 = v453;
          long long v435 = v454;
          long long v436 = v455;
          CGAffineTransform t1_32 = v449;
          long long v431 = v450;
          long long v432 = v451;
          long long v433 = v452;
          *(_OWORD *)t1 = v447;
          *(_OWORD *)&t1[16] = v448;
          break;
        default:
LABEL_107:
          uint64_t v177 = v13;
          outlined copy of DisplayList.Item.Value(v13, v16);
          outlined copy of DisplayList.Item.Value(v30, v25);
          outlined copy of DisplayList.Item.Value(v177, v16);
          outlined copy of DisplayList.Item.Value(v30, v25);
          outlined retain of DisplayList.ViewUpdater.Model.State((uint64_t)&v456);
          outlined retain of DisplayList.ViewUpdater.Model.State((uint64_t)&v466);
          outlined consume of DisplayList.Item.Value(v177, v16);
          uint64_t v229 = v30;
          unint64_t v230 = v25;
          goto LABEL_108;
      }
      goto LABEL_145;
    }
    double v396 = v28;
    CGFloat v397 = *(double *)(a3 + 32);
    int v399 = *(_DWORD *)(a3 + 68);
    uint64_t v401 = *((void *)a5 + 4);
    int v403 = *((_DWORD *)a5 + 17);
    uint64_t v405 = a1;
    uint64_t v40 = *(uint64_t *)(a3 + 40);
    unint64_t v412 = v40;
    uint64_t v414 = *(void *)(a3 + 56);
    goto LABEL_35;
  }
LABEL_18:
  uint64_t v35 = *(void *)(a3 + 40);
  outlined copy of DisplayList.Item.Value(v13, v16);
  outlined copy of DisplayList.Item.Value(v30, v25);
  uint64_t v36 = v35;
  unint64_t v37 = v16;
LABEL_19:
  outlined consume of DisplayList.Item.Value(v36, v37);
  outlined consume of DisplayList.Item.Value(v30, v25);
LABEL_20:
  char v38 = 0;
  return v38 & 1;
}

uint64_t DisplayList.ViewUpdater.Platform.updateStateAsync(layer:oldItem:oldSize:oldState:newItem:newSize:newState:)(uint64_t a1, long long *a2, uint64_t a3, long long *a4, uint64_t a5, CGFloat a6, CGFloat a7, double a8, double a9)
{
  if (*(unsigned __int8 *)(a5 + 104) != *(unsigned __int8 *)(a3 + 104)) {
    return 0;
  }
  long long v53 = a2[1];
  long long v54 = *a2;
  long long v52 = a2[3];
  int v50 = *((unsigned __int16 *)a2 + 32);
  int v51 = *((unsigned __int8 *)a2 + 66);
  int v17 = *((_DWORD *)a2 + 17);
  long long v57 = *a4;
  int64x2_t v58 = (int64x2_t)a2[2];
  int64x2_t v59 = (int64x2_t)a4[2];
  long long v55 = a4[3];
  long long v56 = a4[1];
  int v18 = *((unsigned __int8 *)a4 + 66);
  int v19 = *((unsigned __int16 *)a4 + 32);
  int v20 = *((_DWORD *)a4 + 17);
  float v21 = *(float *)(a5 + 8);
  uint64_t v22 = *v9;
  if (v21 != *(float *)(a3 + 8))
  {
    id v23 = objc_allocWithZone(NSNumber);
    *(float *)&double v24 = v21;
    id v25 = objc_msgSend(v23, sel_initWithFloat_, v24);
    v69.super.isCGFloat a = *(Class *)a1;
    v26._countAndFlagsBits = 0x7974696361706FLL;
    v26._object = (void *)0xE700000000000000;
    *(void *)&v69._attr.refcount = 1;
    DisplayList.ViewUpdater.ViewCache.setAsyncValue(_:for:in:usingPresentationModifier:)((NSObject)v25, v26, v69, v27);
  }
  if (*(void *)(a5 + 128) != *(void *)(a3 + 128)) {
    return 0;
  }
  int v49 = v17;
  if (*(void *)(a5 + 152) != *(void *)(a3 + 152))
  {
    int v48 = v20;
    *(void *)&v64[0] = *(void *)(a3 + 88);
    *(void *)&v60[0] = *(void *)(a5 + 88);
    if (*(unsigned char *)(a1 + 16) == 7)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v28 = specialized Array<A>.popColorMultiply(drawable:)((uint64_t *)v64, (id *)a1);
      uint64_t v46 = v29;
      uint64_t v47 = v28;
      int v31 = v30 & 1;
      swift_bridgeObjectRelease();
      uint64_t v32 = specialized Array<A>.popColorMultiply(drawable:)((uint64_t *)v60, (id *)a1);
      uint64_t v34 = v33;
      char v36 = v35;
      swift_bridgeObjectRelease();
      if ((v36 & 1) == 0 || !v31) {
        specialized DisplayList.ViewUpdater.AsyncLayer.update<A>(_:from:to:)(v47, v46, v31, v32, v34, v36 & 1);
      }
    }
    uint64_t v37 = *(void *)(a3 + 88);
    uint64_t v38 = *(void *)(a5 + 88);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v39 = specialized static GraphicsFilter.updateAsync(layer:oldFilters:newFilters:)((Class *)a1, v37, v38);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    int v20 = v48;
    if ((v39 & 1) == 0) {
      return 0;
    }
  }
  if ((*(void *)(a5 + 144) != *(void *)(a3 + 144) || *(void *)(a5 + 136) != *(void *)(a3 + 136))
    && (DisplayList.ViewUpdater.Platform.updateClipShapesAsync(layer:oldState:newState:)(a1, a3, a5) & 1) == 0)
  {
    return 0;
  }
  char v40 = DisplayList.ViewUpdater.Platform.updateGeometryAsync(layer:oldItem:oldSize:oldState:newItem:newSize:newState:)(a1, a6, a7, a8, a9, (uint64_t)v64, (uint64_t *)a3, (uint64_t)v60, (double *)a5);
  if (v40 == 2) {
    return 0;
  }
  if ((v40 & 1) != 0
    || *(void *)(a5 + 160) != *(void *)(a3 + 160)
    || (vmovn_s64(vceqq_s64(v59, v58)).u8[0] & 1) == 0)
  {
    uint64_t v68 = v22;
    v64[0] = v54;
    v64[1] = v53;
    void v64[2] = v58;
    v64[3] = v52;
    char v66 = (v50 | (v51 << 16)) >> 16;
    __int16 v65 = v50;
    int v67 = v49;
    v60[0] = v57;
    v60[1] = v56;
    v60[2] = v59;
    v60[3] = v55;
    char v62 = (v19 | (v18 << 16)) >> 16;
    __int16 v61 = v19;
    int v63 = v20;
    if ((DisplayList.ViewUpdater.Platform.updateShadowAsync(layer:oldState:oldItem:newState:newItem:boundsChanged:)(a1, (void *)a3, (double *)v64, a5, (double *)v60, v40 & 1) & 1) == 0)return 0; {
  }
    }
  swift_getKeyPath();
  dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  char v42 = v41;
  uint64_t result = swift_release();
  if (v42)
  {
    __break(1u);
  }
  else
  {
    swift_getKeyPath();
    dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
    char v45 = v44;
    uint64_t result = swift_release();
    if ((v45 & 1) == 0) {
      return 1;
    }
  }
  __break(1u);
  return result;
}

uint64_t DisplayList.ViewUpdater.Platform.updateGeometryAsync(layer:oldItem:oldSize:oldState:newItem:newSize:newState:)(uint64_t a1, CGFloat a2, CGFloat a3, double a4, double a5, uint64_t a6, uint64_t *a7, uint64_t a8, double *a9)
{
  float64x2_t v16 = *((float64x2_t *)a7 + 4);
  float64x2_t v83 = v16;
  float64x2_t v85 = *(float64x2_t *)(a9 + 8);
  char v17 = *(unsigned char *)(a1 + 17);
  CGFloat v18 = 0.0;
  if ((v17 & 8) != 0)
  {
    uint64_t v24 = *a7;
    int v25 = *((_DWORD *)a7 + 2);
    uint64_t v26 = a7[2];
    uint64_t v27 = a7[12];
    char v28 = *((unsigned char *)a7 + 104);
    char v29 = *((unsigned char *)a7 + 105);
    char v30 = *((unsigned char *)a7 + 106);
    int v31 = *((_DWORD *)a7 + 27);
    uint64_t v32 = a7[14];
    uint64_t v33 = a7[21];
    LOBYTE(m.a) = *((unsigned char *)a7 + 24);
    *(void *)&long long v88 = v24;
    DWORD2(v88) = v25;
    *(void *)&long long v89 = v26;
    BYTE8(v89) = LOBYTE(m.a);
    long long v34 = *((_OWORD *)a7 + 3);
    long long v90 = *((_OWORD *)a7 + 2);
    long long v91 = v34;
    long long v35 = *((_OWORD *)a7 + 5);
    float64x2_t v92 = v16;
    long long v93 = v35;
    *(void *)&long long v94 = v27;
    BYTE8(v94) = v28;
    BYTE9(v94) = v29;
    BYTE10(v94) = v30;
    HIDWORD(v94) = v31;
    *(_OWORD *)&v95[8] = *(_OWORD *)(a7 + 15);
    *(_OWORD *)&unsigned char v95[24] = *(_OWORD *)(a7 + 17);
    *(_OWORD *)&v95[40] = *(_OWORD *)(a7 + 19);
    *(void *)long long v95 = v32;
    *(void *)&v95[56] = v33;
    DisplayList.ViewUpdater.Model.State.clipRect()(&v96);
    if (v96.value.style == SwiftUI_RoundedCornerStyle_unknownDefault) {
      goto LABEL_5;
    }
    CGFloat width = v96.value.rect.size.width;
    CGFloat height = v96.value.rect.size.height;
    CGFloat y = v96.value.rect.origin.y;
    CGFloat x = v96.value.rect.origin.x;
    long long v36 = *((_OWORD *)a9 + 9);
    *(_OWORD *)&v95[16] = *((_OWORD *)a9 + 8);
    *(_OWORD *)&v95[32] = v36;
    *(_OWORD *)&v95[48] = *((_OWORD *)a9 + 10);
    long long v37 = *((_OWORD *)a9 + 5);
    float64x2_t v92 = *(float64x2_t *)(a9 + 8);
    long long v93 = v37;
    long long v38 = *((_OWORD *)a9 + 7);
    long long v94 = *((_OWORD *)a9 + 6);
    *(_OWORD *)long long v95 = v38;
    long long v39 = *((_OWORD *)a9 + 1);
    long long v88 = *(_OWORD *)a9;
    long long v89 = v39;
    long long v40 = *((_OWORD *)a9 + 3);
    long long v90 = *((_OWORD *)a9 + 2);
    long long v91 = v40;
    DisplayList.ViewUpdater.Model.State.clipRect()(&v87);
    if (v87.value.style == SwiftUI_RoundedCornerStyle_unknownDefault)
    {
LABEL_5:
      double v19 = 0.0;
      CGFloat v20 = 0.0;
      CGFloat v21 = 0.0;
      CGFloat width = a2;
      CGFloat height = a3;
      CGFloat v18 = 0.0;
    }
    else
    {
      a4 = v87.value.rect.size.width;
      a5 = v87.value.rect.size.height;
      CGFloat v21 = y;
      CGFloat v20 = x;
      v41.f64[0] = x;
      v41.f64[1] = y;
      CGFloat v18 = v87.value.rect.origin.x;
      float64x2_t v83 = vaddq_f64(v83, v41);
      float64x2_t v85 = vaddq_f64(v85, (float64x2_t)v87.value.rect.origin);
      double v19 = v87.value.rect.origin.y;
    }
  }
  else
  {
    double v19 = 0.0;
    CGFloat v20 = 0.0;
    CGFloat v21 = 0.0;
    CGFloat width = a2;
    CGFloat height = a3;
  }
  double v81 = v18;
  v101.origin.CGFloat x = v18;
  v101.origin.CGFloat y = v19;
  v101.size.CGFloat width = a4;
  v101.size.CGFloat height = a5;
  CGFloat v42 = width;
  CGFloat v43 = height;
  BOOL v44 = CGRectEqualToRect(v101, *(CGRect *)&v20);
  if (v44)
  {
    if ((v17 & 4) == 0)
    {
      float64x2_t v45 = v85;
      if (v85.f64[0] == v83.f64[0])
      {
        int32x4_t v46 = (int32x4_t)vceqq_f64(v85, v83);
        *(int32x2_t *)v46.i8 = vmovn_s64((int64x2_t)v46);
        if (vmovn_s32(v46).i8[2])
        {
          uint64_t v47 = 0;
          goto LABEL_23;
        }
      }
      goto LABEL_22;
    }
    return 0;
  }
  int v48 = *(unsigned __int8 *)(a1 + 16);
  if ((v48 - 13) < 3) {
    return 2;
  }
  int v49 = self;
  id v50 = objc_msgSend(v49, sel_valueWithRect_, v81, v19, a4, a5);
  Class v51 = *(Class *)a1;
  v52._countAndFlagsBits = 0x73646E756F62;
  v52._object = (void *)0xE600000000000000;
  v98.super.isCGFloat a = *(Class *)a1;
  *(void *)&v98._attr.refcount = 1;
  DisplayList.ViewUpdater.ViewCache.setAsyncValue(_:for:in:usingPresentationModifier:)((NSObject)v50, v52, v98, v53);

  if (v48 != 12)
  {
LABEL_18:
    if ((v17 & 4) == 0)
    {
      float64x2_t v45 = v85;
      if (v85.f64[0] == v83.f64[0])
      {
        int32x4_t v60 = (int32x4_t)vceqq_f64(v85, v83);
        *(int32x2_t *)v60.i8 = vmovn_s64((int64x2_t)v60);
        if (vmovn_s32(v60).i8[2])
        {
          uint64_t v47 = 1;
          goto LABEL_23;
        }
      }
LABEL_22:
      uint64_t v47 = !v44;
      id v61 = objc_msgSend(self, sel_valueWithPoint_, *(_OWORD *)&v45);
      v99.super.isCGFloat a = *(Class *)a1;
      v62._countAndFlagsBits = 0x6E6F697469736F70;
      v62._object = (void *)0xE800000000000000;
      *(void *)&v99._attr.refcount = 1;
      DisplayList.ViewUpdater.ViewCache.setAsyncValue(_:for:in:usingPresentationModifier:)((NSObject)v61, v62, v99, v63);

LABEL_23:
      CGFloat v64 = a9[4];
      CGFloat v65 = a9[5];
      CGFloat v66 = a9[6];
      CGFloat v67 = a9[7];
      CGSize v68 = (CGSize)*((_OWORD *)a7 + 3);
      v96.value.rect.origin = (CGPoint)*((_OWORD *)a7 + 2);
      v96.value.rect.size = v68;
      v96.value.cornerSize.CGFloat width = 0.0;
      v96.value.cornerSize.CGFloat height = 0.0;
      v87.value.rect.origin.CGFloat x = v64;
      v87.value.rect.origin.CGFloat y = v65;
      v87.value.rect.size.CGFloat width = v66;
      v87.value.rect.size.CGFloat height = v67;
      v87.value.cornerSize.CGFloat width = 0.0;
      v87.value.cornerSize.CGFloat height = 0.0;
      if ((static CGAffineTransform.== infix(_:_:)() & 1) == 0)
      {
        m.CGFloat a = v64;
        m.CGFloat b = v65;
        m.CGFloat c = v66;
        m.CGFloat d = v67;
        m.tCGFloat x = 0.0;
        m.tCGFloat y = 0.0;
        CATransform3DMakeAffineTransform((CATransform3D *)&v88, &m);
        long long v84 = v89;
        long long v86 = v88;
        long long v79 = v91;
        long long v82 = v90;
        long long v76 = v93;
        float64x2_t v77 = v92;
        long long v75 = v94;
        uint64_t v69 = *(void *)v95;
        uint64_t v70 = *(void *)&v95[8];
        double v71 = self;
        long long v88 = v86;
        long long v89 = v84;
        long long v90 = v82;
        long long v91 = v79;
        float64x2_t v92 = v77;
        long long v93 = v76;
        long long v94 = v75;
        *(void *)long long v95 = v69;
        *(void *)&v95[8] = v70;
        id v72 = objc_msgSend(v71, sel_valueWithCATransform3D_, &v88);
        v100.super.isCGFloat a = *(Class *)a1;
        v73._countAndFlagsBits = 0x726F66736E617274;
        v73._object = (void *)0xE90000000000006DLL;
        *(void *)&v100._attr.refcount = 1;
        DisplayList.ViewUpdater.ViewCache.setAsyncValue(_:for:in:usingPresentationModifier:)((NSObject)v72, v73, v100, v74);
      }
      return v47;
    }
    return 1;
  }
  id v54 = objc_msgSend(v49, sel_valueWithRect_, v81, v19, a4, a5);
  uint64_t result = (uint64_t)[(objc_class *)v51 mask];
  if (result)
  {
    int64x2_t v58 = (void *)result;
    v59._countAndFlagsBits = 0x73646E756F62;
    v59._object = (void *)0xE600000000000000;
    v56.super.isCGFloat a = (Class)result;
    *(void *)&v56._attr.refcount = 1;
    DisplayList.ViewUpdater.ViewCache.setAsyncValue(_:for:in:usingPresentationModifier:)((NSObject)v54, v59, v56, v57);

    goto LABEL_18;
  }
  __break(1u);
  return result;
}

uint64_t DisplayList.ViewUpdater.Platform.updateClipShapesAsync(layer:oldState:newState:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 80);
  if (!*(void *)(v6 + 16) && !*(void *)(*(void *)(a3 + 80) + 16)) {
    goto LABEL_22;
  }
  char v7 = *(unsigned char *)(a1 + 17);
  if ((v7 & 8) != 0)
  {
    CGFloat v26 = *(double *)a2;
    int v27 = *(_DWORD *)(a2 + 8);
    CGFloat v28 = *(double *)(a2 + 16);
    uint64_t v29 = *(void *)(a2 + 88);
    uint64_t v30 = *(void *)(a2 + 96);
    char v31 = *(unsigned char *)(a2 + 104);
    char v32 = *(unsigned char *)(a2 + 105);
    char v33 = *(unsigned char *)(a2 + 106);
    int v34 = *(_DWORD *)(a2 + 108);
    uint64_t v35 = *(void *)(a2 + 112);
    uint64_t v36 = *(void *)(a2 + 168);
    LOBYTE(v66[0]) = *(unsigned char *)(a2 + 24);
    v71.CGFloat a = v26;
    LODWORD(v71.b) = v27;
    v71.CGFloat c = v28;
    LOBYTE(v71.d) = v66[0];
    long long v37 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v71.tCGFloat x = *(_OWORD *)(a2 + 32);
    long long v72 = v37;
    long long v73 = *(_OWORD *)(a2 + 64);
    *(void *)&long long v74 = v6;
    *((void *)&v74 + 1) = v29;
    *(void *)&long long v75 = v30;
    BYTE8(v75) = v31;
    BYTE9(v75) = v32;
    BYTE10(v75) = v33;
    HIDWORD(v75) = v34;
    *(_OWORD *)&v76[8] = *(_OWORD *)(a2 + 120);
    *(_OWORD *)&v76[24] = *(_OWORD *)(a2 + 136);
    *(_OWORD *)&v76[40] = *(_OWORD *)(a2 + 152);
    *(void *)long long v76 = v35;
    *(void *)&v76[56] = v36;
    DisplayList.ViewUpdater.Model.State.clipRect()(&v77);
    int style = v77.value.style;
    if (v77.value.style == SwiftUI_RoundedCornerStyle_unknownDefault) {
      goto LABEL_23;
    }
    CGFloat height = v77.value.rect.size.height;
    double width = v77.value.cornerSize.width;
    CGFloat y = v77.value.rect.origin.y;
    CGFloat v41 = v77.value.rect.size.width;
    CGFloat x = v77.value.rect.origin.x;
    long long v44 = *(_OWORD *)(a3 + 144);
    *(_OWORD *)&v76[16] = *(_OWORD *)(a3 + 128);
    *(_OWORD *)&v76[32] = v44;
    *(_OWORD *)&v76[48] = *(_OWORD *)(a3 + 160);
    long long v45 = *(_OWORD *)(a3 + 80);
    long long v73 = *(_OWORD *)(a3 + 64);
    long long v74 = v45;
    long long v46 = *(_OWORD *)(a3 + 112);
    long long v75 = *(_OWORD *)(a3 + 96);
    *(_OWORD *)long long v76 = v46;
    long long v47 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)&v71.CGFloat a = *(_OWORD *)a3;
    *(_OWORD *)&v71.CGFloat c = v47;
    long long v48 = *(_OWORD *)(a3 + 48);
    *(_OWORD *)&v71.tCGFloat x = *(_OWORD *)(a3 + 32);
    long long v72 = v48;
    DisplayList.ViewUpdater.Model.State.clipRect()(&v65);
    if (v65.value.style == SwiftUI_RoundedCornerStyle_unknownDefault
      || ((v65.value.style ^ style) & 1) != 0)
    {
      goto LABEL_23;
    }
    CGSize size = v65.value.rect.size;
    double v64 = v65.value.cornerSize.width;
    CGFloat v49 = v65.value.rect.origin.y;
    CGFloat v50 = v65.value.rect.origin.x;
    v79.origin.CGFloat x = x;
    v79.origin.CGFloat y = y;
    v79.size.double width = v41;
    v79.size.CGFloat height = height;
    double v51 = CGRectGetWidth(v79);
    v80.origin.CGFloat x = x;
    v80.origin.CGFloat y = y;
    v80.size.double width = v41;
    v80.size.CGFloat height = height;
    double v52 = CGRectGetHeight(v80);
    if (v52 >= v51) {
      double v52 = v51;
    }
    double v53 = v52 * 0.5;
    if (v53 >= width) {
      double v54 = width;
    }
    else {
      double v54 = v53;
    }
    v81.origin.CGFloat x = v50;
    v81.origin.CGFloat y = v49;
    v81.size.double width = size.width;
    v81.size.CGFloat height = size.height;
    double v55 = CGRectGetWidth(v81);
    v82.origin.CGFloat x = v50;
    v82.origin.CGFloat y = v49;
    v82.size.double width = size.width;
    v82.size.CGFloat height = size.height;
    double v56 = CGRectGetHeight(v82);
    if (v56 >= v55) {
      double v56 = v55;
    }
    double v57 = v56 * 0.5;
    if (v57 >= v64) {
      double v58 = v64;
    }
    else {
      double v58 = v57;
    }
    if (v58 != v54)
    {
      id v59 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithDouble_, v58);
      v78.super.isCGFloat a = *(Class *)a1;
      v60._countAndFlagsBits = 0x615272656E726F63;
      v60._object = (void *)0xEC00000073756964;
      *(void *)&v78._attr.refcount = 1;
      DisplayList.ViewUpdater.ViewCache.setAsyncValue(_:for:in:usingPresentationModifier:)((NSObject)v59, v60, v78, v61);
    }
LABEL_22:
    char v25 = 1;
    return v25 & 1;
  }
  long long v8 = *(_OWORD *)(a3 + 144);
  *(_OWORD *)&v76[16] = *(_OWORD *)(a3 + 128);
  *(_OWORD *)&v76[32] = v8;
  *(_OWORD *)&v76[48] = *(_OWORD *)(a3 + 160);
  long long v9 = *(_OWORD *)(a3 + 80);
  long long v73 = *(_OWORD *)(a3 + 64);
  long long v74 = v9;
  long long v10 = *(_OWORD *)(a3 + 112);
  long long v75 = *(_OWORD *)(a3 + 96);
  *(_OWORD *)long long v76 = v10;
  long long v11 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)&v71.CGFloat a = *(_OWORD *)a3;
  *(_OWORD *)&v71.CGFloat c = v11;
  long long v12 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)&v71.tCGFloat x = *(_OWORD *)(a3 + 32);
  long long v72 = v12;
  DisplayList.ViewUpdater.Model.State.clipRect()(&v77);
  if (v77.value.style != SwiftUI_RoundedCornerStyle_unknownDefault
    || (id v13 = objc_msgSend(*(id *)a1, sel_mask)) == 0)
  {
LABEL_23:
    char v25 = 0;
    return v25 & 1;
  }
  double v14 = v13;
  uint64_t v15 = *(void *)(a1 + 8);
  char v16 = *(unsigned char *)(a1 + 16);
  uint64_t v17 = *(void *)(a1 + 24);
  char v18 = *(unsigned char *)(a1 + 32);
  v66[0] = v13;
  v66[1] = v15;
  char v67 = v16;
  char v68 = v7;
  uint64_t v69 = v17;
  char v70 = v18;
  uint64_t v19 = *(void *)(a2 + 80);
  uint64_t v20 = *(void *)(a3 + 80);
  long long v21 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v71.CGFloat a = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v71.CGFloat c = v21;
  *(_OWORD *)&v71.tCGFloat x = *(_OWORD *)(a2 + 64);
  CGAffineTransformInvert((CGAffineTransform *)&v77, &v71);
  long long v22 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)&v71.CGFloat a = *(_OWORD *)(a3 + 32);
  *(_OWORD *)&v71.CGFloat c = v22;
  *(_OWORD *)&v71.tCGFloat x = *(_OWORD *)(a3 + 64);
  CGAffineTransformInvert((CGAffineTransform *)&v65, &v71);
  *(CGPoint *)&v71.CGFloat a = v65.value.rect.origin;
  *(CGSize *)&v71.CGFloat c = v65.value.rect.size;
  *(CGSize *)&v71.tCGFloat x = v65.value.cornerSize;
  id v23 = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static MaskLayer.updateClipsAsync(layer:oldClips:newClips:oldTransform:newTransform:)((uint64_t)v66, v19, v20, &v77.value.rect.origin.x, &v71.a);
  char v25 = v24;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v25 & 1;
}

void DisplayList.ViewUpdater.Platform.updateClipShapes(_:state:)(uint64_t a1, _OWORD *a2)
{
  uint64_t v5 = *v2;
  long long v6 = a2[9];
  long long v40 = a2[8];
  long long v41 = v6;
  long long v42 = a2[10];
  long long v7 = a2[5];
  long long v36 = a2[4];
  long long v37 = v7;
  long long v8 = a2[7];
  long long v38 = a2[6];
  long long v39 = v8;
  long long v9 = a2[1];
  *(_OWORD *)&v34.CGFloat a = *a2;
  *(_OWORD *)&v34.CGFloat c = v9;
  long long v10 = a2[3];
  *(_OWORD *)&v34.tCGFloat x = a2[2];
  long long v35 = v10;
  DisplayList.ViewUpdater.Model.State.clipRect()(&v43);
  SwiftUI::RoundedCornerStyle style = v43.value.style;
  if (v43.value.style == SwiftUI_RoundedCornerStyle_unknownDefault)
  {
    char v12 = *(unsigned char *)(a1 + 57);
    if ((v12 & 8) != 0)
    {
      v12 &= ~8u;
      *(unsigned char *)(a1 + 57) = v12;
      CoreViewSetClipsToBounds(v5 & 3, *(void **)a1, 0, 0);
      id v13 = *(void **)(a1 + 8);
      objc_msgSend(v13, sel_bounds, *(_OWORD *)&v34.a, *(_OWORD *)&v34.c, *(_OWORD *)&v34.tx, v35, v36, v37, v38, v39, v40, v41, v42);
      objc_msgSend(v13, sel_setBounds_, 0.0, 0.0);
      objc_msgSend(v13, sel_setCornerRadius_, 0.0);
      objc_msgSend(v13, sel_setCornerCurve_, *MEMORY[0x263F15A10]);
    }
    uint64_t v14 = *((void *)a2 + 10);
    if (*(void *)(v14 + 16))
    {
      uint64_t v15 = *(void **)(a1 + 8);
      swift_bridgeObjectRetain();
      id v16 = objc_msgSend(v15, sel_mask);
      if (v16)
      {
        uint64_t v17 = v16;
        type metadata accessor for MaskLayer();
        char v18 = (char *)swift_dynamicCastClass();
        if (v18)
        {
LABEL_10:
          long long v19 = a2[3];
          *(_OWORD *)&v34.CGFloat a = a2[2];
          *(_OWORD *)&v34.CGFloat c = v19;
          *(_OWORD *)&v34.tCGFloat x = a2[4];
          CGAffineTransformInvert((CGAffineTransform *)&v43, &v34);
          uint64_t v20 = swift_bridgeObjectRetain();
          char v21 = specialized static Array<A>.== infix(_:_:)(v20, v14);
          swift_bridgeObjectRelease();
          if ((v21 & 1) != 0
            && (CGAffineTransform v34 = *(CGAffineTransform *)&v18[OBJC_IVAR____TtC7SwiftUI9MaskLayer_clipTransform],
                (static CGAffineTransform.== infix(_:_:)() & 1) != 0))
          {
            swift_bridgeObjectRelease();
          }
          else
          {
            MaskLayer.setClips(_:transform:)((Swift::OpaquePointer)v14, (CGAffineTransform *)&v43);

            swift_bridgeObjectRelease();
          }
          return;
        }
      }
      char v18 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for MaskLayer()), sel_init);
      objc_msgSend(v18, sel_setAnchorPoint_, 0.0, 0.0);
      objc_msgSend(v18, sel_setNoAnimationDelegate);
      objc_msgSend(v15, sel_setMask_, v18);

      if ((v12 & 0x10) == 0) {
        *(unsigned char *)(a1 + 57) = v12 | 0x10;
      }
      goto LABEL_10;
    }
    if ((v12 & 0x10) == 0) {
      return;
    }
    objc_msgSend(*(id *)(a1 + 8), sel_setMask_, 0);
    char v33 = v12 & 0xEF;
LABEL_26:
    *(unsigned char *)(a1 + 57) = v33;
    return;
  }
  CGFloat height = v43.value.rect.size.height;
  double width = v43.value.cornerSize.width;
  CGFloat y = v43.value.rect.origin.y;
  CGFloat v24 = v43.value.rect.size.width;
  CGFloat x = v43.value.rect.origin.x;
  CoreViewSetClipsToBounds(v5 & 3, *(void **)a1, 1, 0);
  int v27 = *(void **)(a1 + 8);
  v44.origin.CGFloat x = x;
  v44.origin.CGFloat y = y;
  v44.size.double width = v24;
  v44.size.CGFloat height = height;
  double v28 = CGRectGetWidth(v44);
  v45.origin.CGFloat x = x;
  v45.origin.CGFloat y = y;
  v45.size.double width = v24;
  v45.size.CGFloat height = height;
  double v29 = CGRectGetHeight(v45);
  if (v29 >= v28) {
    double v29 = v28;
  }
  double v30 = v29 * 0.5;
  if (v30 >= width) {
    double v30 = width;
  }
  objc_msgSend(v27, sel_setCornerRadius_, v30, *(_OWORD *)&v34.a, *(_OWORD *)&v34.c, *(_OWORD *)&v34.tx, v35, v36, v37, v38, v39, v40, v41, v42);
  char v31 = (void *)MEMORY[0x263F15A20];
  if ((style & 1) == 0) {
    char v31 = (void *)MEMORY[0x263F15A10];
  }
  objc_msgSend(v27, sel_setCornerCurve_, *v31);
  char v32 = *(unsigned char *)(a1 + 57);
  if ((v32 & 8) == 0)
  {
    v32 |= 8u;
    *(unsigned char *)(a1 + 57) = v32;
  }
  if ((v32 & 0x10) != 0)
  {
    objc_msgSend(v27, sel_setMask_, 0);
    char v33 = v32 & 0xEF;
    goto LABEL_26;
  }
}

void __swiftcall DisplayList.ViewUpdater.Model.State.clipRect()(SwiftUI::FixedRoundedRect_optional *__return_ptr retstr)
{
  uint64_t v5 = *(void *)(v1 + 80);
  if (*(void *)(v5 + 16) != 1 || *(unsigned char *)(v5 + 120) != 1) {
    goto LABEL_21;
  }
  double v6 = *(double *)(v1 + 32);
  double v7 = *(double *)(v1 + 40);
  double v8 = *(double *)(v1 + 48);
  long long v9 = *(_OWORD *)(v1 + 56);
  CGFloat v10 = *(double *)(v1 + 72);
  CGPoint v11 = *(CGPoint *)(v5 + 32);
  int v12 = *(unsigned __int8 *)(v5 + 64);
  if (v12 == 2)
  {
    CGFloat v16 = *(double *)(*(void *)&v11.x + 32);
    CGFloat v17 = *(double *)(*(void *)&v11.x + 40);
    v2.i64[0] = *(void *)(*(void *)&v11.x + 48);
    v3.i64[0] = *(void *)(*(void *)&v11.x + 56);
    SwiftUI::RoundedCornerStyle v15 = *(unsigned char *)(*(void *)&v11.x + 64);
    CGPoint v11 = *(CGPoint *)(*(void *)&v11.x + 16);
  }
  else
  {
    double v14 = *(double *)(v5 + 48);
    double v13 = *(double *)(v5 + 56);
    if (v12 != 1)
    {
      if (!v12)
      {
        SwiftUI::RoundedCornerStyle v15 = SwiftUI_RoundedCornerStyle_circular;
        CGFloat v16 = v14;
        CGFloat v17 = v13;
        v2.i64[0] = 0;
        v3.i64[0] = 0;
        goto LABEL_10;
      }
LABEL_21:
      retstr->value.rect.CGSize size = 0u;
      retstr->value.cornerSize = 0u;
      retstr->value.rect.origin = 0u;
      retstr->value.SwiftUI::RoundedCornerStyle style = SwiftUI_RoundedCornerStyle_unknownDefault;
      return;
    }
    CGFloat v16 = v14;
    CGFloat v17 = v13;
    if (v14 != v13) {
      goto LABEL_21;
    }
    SwiftUI::RoundedCornerStyle v15 = SwiftUI_RoundedCornerStyle_circular;
    *(double *)v2.uint64_t i64 = v14 * 0.5;
    *(double *)v3.uint64_t i64 = v14 * 0.5;
  }
LABEL_10:
  BOOL v18 = v6 == 0.0;
  if (*(double *)&v9 != 0.0) {
    BOOL v18 = 0;
  }
  if ((v8 != 0.0 || v7 != 0.0) && !v18) {
    goto LABEL_21;
  }
  int8x16_t rect_16 = v3;
  int8x16_t v40 = v2;
  v42.CGFloat a = v6;
  v42.CGFloat b = v7;
  v42.CGFloat c = v8;
  *(_OWORD *)&v42.CGFloat d = v9;
  v42.tCGFloat y = v10;
  CGPoint rect = v11;
  CGAffineTransformInvert(&v41, &v42);
  CGFloat a = v41.a;
  CGFloat b = v41.b;
  CGFloat c = v41.c;
  CGFloat d = v41.d;
  tCGFloat x = v41.tx;
  tCGFloat y = v41.ty;
  v44.origin = rect;
  CGAffineTransform v42 = v41;
  v44.size.CGFloat width = v16;
  v44.size.CGFloat height = v17;
  CGRect v45 = CGRectApplyAffineTransform(v44, &v42);
  CGFloat v27 = *(double *)v40.i64;
  CGFloat x = v45.origin.x;
  CGFloat y = v45.origin.y;
  if ((~v40.i64[0] & 0x7FF0000000000000) != 0)
  {
    CGFloat v30 = *(double *)rect_16.i64;
    if ((~rect_16.i64[0] & 0x7FF0000000000000) != 0)
    {
      v42.CGFloat a = a;
      v42.CGFloat b = b;
      v42.CGFloat c = c;
      v42.CGFloat d = d;
      v42.tCGFloat x = tx;
      v42.tCGFloat y = ty;
      CGFloat height = v45.size.height;
      *(void *)&v43.CGFloat width = v40.i64[0];
      *(void *)&v43.CGFloat height = rect_16.i64[0];
      CGFloat width = v45.size.width;
      CGSize v35 = CGSizeApplyAffineTransform(v43, &v42);
      *(CGFloat *)v34.uint64_t i64 = v35.height;
      *(CGFloat *)v33.uint64_t i64 = v35.width;
      v36.f64[0] = NAN;
      v36.f64[1] = NAN;
      int8x16_t v37 = (int8x16_t)vnegq_f64(v36);
      *(void *)&CGFloat v27 = vbslq_s8(v37, v33, v40).u64[0];
      v45.size.CGFloat height = height;
      *(void *)&CGFloat v30 = vbslq_s8(v37, v34, rect_16).u64[0];
      v45.size.CGFloat width = width;
    }
  }
  else
  {
    CGFloat v30 = *(double *)rect_16.i64;
  }
  retstr->value.rect.origin.CGFloat x = x;
  retstr->value.rect.origin.CGFloat y = y;
  retstr->value.rect.size.CGFloat width = v45.size.width;
  retstr->value.rect.size.CGFloat height = v45.size.height;
  retstr->value.cornerSize.CGFloat width = v27;
  retstr->value.cornerSize.CGFloat height = v30;
  retstr->value.SwiftUI::RoundedCornerStyle style = v15;
}

uint64_t CoreViewSetClipsToBounds(int a1, void *a2, uint64_t a3, int a4)
{
  if (a1 == 2 || a4)
  {
    if (a1 != 2) {
      a2 = (void *)[a2 layer];
    }
    return [a2 setMasksToBounds:a3];
  }
  else
  {
    return objc_msgSend(a2, "setClipsToBounds:");
  }
}

uint64_t GraphicsImage.bitmapOrientation.getter()
{
  uint64_t v1 = v0[40];
  if (v0[8] == 2)
  {
    if (objc_msgSend(*(id *)(*(void *)v0 + 16), sel_flipsRightToLeft)) {
      return (0x405060702030001uLL >> (8 * v1));
    }
    else {
      return v1;
    }
  }
  return v1;
}

uint64_t DisplayList.ViewUpdater.Platform.updateShadowAsync(layer:oldState:oldItem:newState:newItem:boundsChanged:)(uint64_t a1, void *a2, double *a3, uint64_t a4, double *a5, char a6)
{
  uint64_t v119 = *MEMORY[0x263EF8340];
  uint64_t v7 = a2[12];
  uint64_t v8 = *(void *)(a4 + 96);
  if (!v7)
  {
    if (!v8)
    {
LABEL_14:
      char v42 = 1;
      return v42 & 1;
    }
LABEL_13:
    char v42 = 0;
    return v42 & 1;
  }
  if (!v8) {
    goto LABEL_13;
  }
  uint64_t v10 = a1;
  double v11 = a3[2];
  double v12 = a3[3];
  unint64_t v13 = *((void *)a3 + 6);
  double v14 = a5[2];
  double v15 = a5[3];
  unint64_t v95 = *((void *)a5 + 5);
  unint64_t v93 = *((void *)a5 + 6);
  unint64_t v94 = *((void *)a3 + 5);
  uint64_t v88 = *v6;
  if ((a6 & 1) == 0)
  {
    unint64_t v90 = *((void *)a3 + 6);
    swift_beginAccess();
    uint64_t v17 = *(void *)(v8 + 48);
    int v18 = *(_DWORD *)(v8 + 56);
    char v19 = *(unsigned char *)(v8 + 60);
    long long v20 = *(_OWORD *)(v8 + 32);
    long long v108 = *(_OWORD *)(v8 + 16);
    long long v109 = v20;
    *(void *)&long long v110 = v17;
    DWORD2(v110) = v18;
    BYTE12(v110) = v19;
    swift_beginAccess();
    uint64_t v21 = *(void *)(v7 + 48);
    int v22 = *(_DWORD *)(v7 + 56);
    char v23 = *(unsigned char *)(v7 + 60);
    long long v24 = *(_OWORD *)(v7 + 32);
    long long v101 = *(_OWORD *)(v7 + 16);
    long long v102 = v24;
    *(void *)&long long v103 = v21;
    DWORD2(v103) = v22;
    BYTE12(v103) = v23;
    BOOL v25 = specialized static ResolvedShadowStyle.== infix(_:_:)((uint64_t)&v108, (uint64_t)&v101);
    unint64_t v13 = v90;
    uint64_t v10 = a1;
    if (v25) {
      goto LABEL_14;
    }
  }
  float64x2_t v92 = (void **)v10;
  if (!*(unsigned char *)(v10 + 16))
  {
    swift_retain_n();
    swift_retain_n();
LABEL_17:
    swift_beginAccess();
    uint64_t v44 = *(void *)(v7 + 48);
    int v45 = *(_DWORD *)(v7 + 56);
    unsigned __int8 v46 = *(unsigned char *)(v7 + 60);
    long long v47 = *(_OWORD *)(v7 + 32);
    long long v108 = *(_OWORD *)(v7 + 16);
    long long v109 = v47;
    *(void *)&long long v110 = v44;
    WORD6(v110) = v46;
    DWORD2(v110) = v45;
    swift_beginAccess();
    uint64_t v48 = *(void *)(v8 + 48);
    int v49 = *(_DWORD *)(v8 + 56);
    unsigned __int8 v50 = *(unsigned char *)(v8 + 60);
    long long v51 = *(_OWORD *)(v8 + 32);
    long long v101 = *(_OWORD *)(v8 + 16);
    long long v102 = v51;
    *(void *)&long long v103 = v48;
    WORD6(v103) = v50;
    DWORD2(v103) = v49;
    char v42 = DisplayList.ViewUpdater.AsyncLayer.updateShadowStyle(oldShadow:newShadow:)((uint64_t)&v108, (double *)&v101);
    swift_release_n();
    swift_release_n();
    return v42 & 1;
  }
  if (v13 >> 62)
  {
    unint64_t v43 = v13;
    swift_retain_n();
    swift_retain_n();
    outlined copy of DisplayList.Item.Value(v94, v43);
    outlined copy of DisplayList.Item.Value(v95, v93);
    outlined consume of DisplayList.Item.Value(v94, v43);
    outlined consume of DisplayList.Item.Value(v95, v93);
    goto LABEL_17;
  }
  if (v93 >> 62)
  {
    unint64_t v53 = v13;
    swift_retain_n();
    swift_retain_n();
    outlined copy of DisplayList.Item.Value(v94, v53);
    outlined copy of DisplayList.Item.Value(v95, v93);
    outlined consume of DisplayList.Item.Value(v94, v53);
    outlined consume of DisplayList.Item.Value(v95, v93);
    goto LABEL_17;
  }
  if (v94 >> 60 == 4)
  {
    unint64_t v54 = v13;
    long long v55 = *(_OWORD *)((v94 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
    long long v116 = *(_OWORD *)((v94 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
    long long v117 = v55;
    char v118 = *(unsigned char *)((v94 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
    unint64_t v91 = v13;
    if (v95 >> 60 == 4)
    {
      uint64_t v56 = *(void *)((v94 & 0xFFFFFFFFFFFFFFFLL) + 0x38);
      long long v57 = *(_OWORD *)((v95 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
      long long v113 = *(_OWORD *)((v95 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      long long v114 = v57;
      char v115 = *(unsigned char *)((v95 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
      uint64_t v86 = *(void *)((v95 & 0xFFFFFFFFFFFFFFFLL) + 0x38);
      uint64_t v87 = v56;
      uint64_t ObjectType = swift_getObjectType();
      double v58 = *(double *)(*a2 + 24);
      outlined copy of DisplayList.Item.Value(v94, v54);
      outlined copy of DisplayList.Item.Value(v95, v93);
      swift_retain();
      swift_retain();
      outlined copy of DisplayList.Item.Value(v94, v91);
      outlined copy of DisplayList.Item.Value(v95, v93);
      swift_retain();
      swift_retain();
      outlined copy of DisplayList.Item.Value(v94, v91);
      outlined copy of DisplayList.Item.Value(v95, v93);
      _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)&v116, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
      _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)&v113, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
      swift_retain();
      swift_retain();
      double v59 = specialized static ShapeLayerHelper.makeLayerBounds(size:path:layerType:contentsScale:)(v11, v12, v58, (uint64_t)&v116, ObjectType);
      uint64_t v61 = v60;
      double v62 = specialized static ShapeLayerHelper.makeLayerBounds(size:path:layerType:contentsScale:)(v14, v15, *(double *)(*a2 + 24), (uint64_t)&v113, ObjectType);
      uint64_t v64 = v63;
      SwiftUI::FixedRoundedRect_optional v65 = *v92;
      swift_beginAccess();
      uint64_t v66 = *(void *)(v7 + 48);
      int v67 = *(_DWORD *)(v7 + 56);
      char v68 = *(unsigned char *)(v7 + 60);
      *(void *)&long long v96 = v88;
      *((void *)&v96 + 1) = v65;
      long long v70 = *(_OWORD *)(v7 + 16);
      long long v69 = *(_OWORD *)(v7 + 32);
      LOBYTE(v99) = v118;
      long long v98 = v117;
      long long v97 = v116;
      *((double *)&v99 + 1) = v59;
      *(void *)CALayer v100 = v61;
      *(_OWORD *)&v100[8] = v70;
      *(_OWORD *)&v100[24] = v69;
      *(void *)&v100[40] = v66;
      *(_DWORD *)&v100[48] = v67;
      v100[52] = v68;
      v100[53] = 0;
      swift_beginAccess();
      uint64_t v71 = *(void *)(v8 + 48);
      int v72 = *(_DWORD *)(v8 + 56);
      char v73 = *(unsigned char *)(v8 + 60);
      *(void *)&long long v108 = v88;
      *((void *)&v108 + 1) = v65;
      long long v75 = *(_OWORD *)(v8 + 16);
      long long v74 = *(_OWORD *)(v8 + 32);
      LOBYTE(v111) = v115;
      long long v109 = v113;
      long long v110 = v114;
      *((double *)&v111 + 1) = v62;
      *(void *)int v112 = v64;
      *(_OWORD *)&v112[8] = v75;
      *(_OWORD *)&v112[24] = v74;
      *(void *)&v112[40] = v71;
      *(_DWORD *)&v112[48] = v72;
      v112[52] = v73;
      v112[53] = 0;
      *(void *)&long long v101 = v92;
      *((void *)&v101 + 1) = &v96;
      *(void *)&long long v102 = &v108;
      *((void *)&v102 + 1) = v86;
      LOBYTE(v103) = 0;
      long long v76 = *(void (**)(long long *, ValueMetadata *, _UNKNOWN **))(*(void *)v87 + 136);
      id v77 = v65;
      _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)&v116, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
      _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)&v113, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
      swift_retain();
      id v78 = v77;
      v76(&v101, &type metadata for ShapeLayerAsyncShadowHelper, &protocol witness table for ShapeLayerAsyncShadowHelper);
      char v42 = v103;
      swift_release();
      swift_release();
      swift_release();
      outlined consume of DisplayList.Item.Value(v94, v91);
      outlined consume of DisplayList.Item.Value(v95, v93);
      _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)&v116, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
      _s7SwiftUI4PathV7StorageOWOrTm_0((uint64_t)&v113, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
      swift_release();
      swift_release();
      outlined consume of DisplayList.Item.Value(v94, v91);
      outlined consume of DisplayList.Item.Value(v95, v93);
      swift_release();
      swift_release();
      long long v105 = *(_OWORD *)v112;
      long long v106 = *(_OWORD *)&v112[16];
      v107[0] = *(_OWORD *)&v112[32];
      long long v101 = v108;
      long long v102 = v109;
      long long v103 = v110;
      *(void *)((char *)v107 + 14) = *(void *)&v112[46];
      long long v104 = v111;
      outlined release of ShapeLayerShadowHelper((uint64_t)&v101);
      *(_OWORD *)int v112 = *(_OWORD *)v100;
      *(_OWORD *)&v112[16] = *(_OWORD *)&v100[16];
      *(_OWORD *)&v112[32] = *(_OWORD *)&v100[32];
      *(void *)&v112[46] = *(void *)&v100[46];
      long long v108 = v96;
      long long v109 = v97;
      long long v110 = v98;
      long long v111 = v99;
      outlined release of ShapeLayerShadowHelper((uint64_t)&v108);
      outlined consume of DisplayList.Content.Value(v94);
      outlined consume of DisplayList.Content.Value(v95);
      return v42 & 1;
    }
    swift_retain();
    swift_retain();
    uint64_t v82 = v94;
    outlined copy of DisplayList.Item.Value(v94, v54);
    outlined copy of DisplayList.Item.Value(v95, v93);
    swift_retain();
    swift_retain();
    uint64_t v83 = v94;
    unint64_t v84 = v54;
    goto LABEL_25;
  }
  if (v94 >> 60 != 1)
  {
    unint64_t v79 = v13;
    swift_retain();
    swift_retain();
    outlined copy of DisplayList.Item.Value(v94, v79);
    outlined copy of DisplayList.Item.Value(v95, v93);
    swift_retain();
    swift_retain();
    outlined copy of DisplayList.Item.Value(v94, v79);
    unint64_t v80 = v95;
    outlined copy of DisplayList.Item.Value(v95, v93);
    outlined consume of DisplayList.Item.Value(v94, v79);
    outlined consume of DisplayList.Item.Value(v95, v93);
    unint64_t v81 = v94;
LABEL_26:
    outlined consume of DisplayList.Content.Value(v81);
    outlined consume of DisplayList.Content.Value(v80);
    goto LABEL_17;
  }
  unint64_t v26 = v13;
  if (v95 >> 60 != 1)
  {
    swift_retain();
    swift_retain();
    unint64_t v91 = v26;
    uint64_t v82 = v94;
    outlined copy of DisplayList.Item.Value(v94, v26);
    outlined copy of DisplayList.Item.Value(v95, v93);
    swift_retain();
    swift_retain();
    uint64_t v83 = v94;
    unint64_t v84 = v26;
LABEL_25:
    outlined copy of DisplayList.Item.Value(v83, v84);
    unint64_t v80 = v95;
    outlined copy of DisplayList.Item.Value(v95, v93);
    outlined consume of DisplayList.Item.Value(v82, v91);
    outlined consume of DisplayList.Item.Value(v95, v93);
    unint64_t v81 = v82;
    goto LABEL_26;
  }
  float v27 = *(float *)((v94 & 0xFFFFFFFFFFFFFFFLL) + 0x1C);
  float v28 = *(float *)((v95 & 0xFFFFFFFFFFFFFFFLL) + 0x1C);
  swift_beginAccess();
  uint64_t v29 = *(void *)(v7 + 16);
  int v30 = *(_DWORD *)(v7 + 24);
  float v31 = *(float *)(v7 + 28);
  long long v89 = *(_OWORD *)(v7 + 32);
  uint64_t v32 = *(void *)(v7 + 48);
  int v33 = *(_DWORD *)(v7 + 56);
  unsigned __int8 v34 = *(unsigned char *)(v7 + 60);
  swift_beginAccess();
  uint64_t v35 = *(void *)(v8 + 16);
  unsigned int v36 = *(_DWORD *)(v8 + 24);
  uint64_t v37 = *(void *)(v8 + 48);
  int v38 = *(_DWORD *)(v8 + 56);
  unsigned __int8 v39 = *(unsigned char *)(v8 + 60);
  *(float *)&unsigned int v40 = v28 * *(float *)(v8 + 28);
  *(void *)&long long v108 = v29;
  DWORD2(v108) = v30;
  *((float *)&v108 + 3) = v27 * v31;
  long long v109 = v89;
  *(void *)&long long v110 = v32;
  WORD6(v110) = v34;
  DWORD2(v110) = v33;
  *(void *)&long long v101 = v35;
  *((void *)&v101 + 1) = __PAIR64__(v40, v36);
  long long v102 = *(_OWORD *)(v8 + 32);
  *(void *)&long long v103 = v37;
  WORD6(v103) = v39;
  DWORD2(v103) = v38;
  unint64_t v41 = v26;
  outlined copy of DisplayList.Item.Value(v94, v26);
  outlined copy of DisplayList.Item.Value(v95, v93);
  swift_retain();
  swift_retain();
  outlined copy of DisplayList.Item.Value(v94, v26);
  outlined copy of DisplayList.Item.Value(v95, v93);
  char v42 = DisplayList.ViewUpdater.AsyncLayer.updateShadowStyle(oldShadow:newShadow:)((uint64_t)&v108, (double *)&v101);
  outlined consume of DisplayList.Item.Value(v94, v41);
  outlined consume of DisplayList.Item.Value(v95, v93);
  swift_release();
  swift_release();
  outlined consume of DisplayList.Content.Value(v94);
  outlined consume of DisplayList.Content.Value(v95);
  return v42 & 1;
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2) {
    return 1;
  }
  uint64_t v3 = a2;
  if (result == a2) {
    return 1;
  }
  uint64_t v4 = 0;
  uint64_t v60 = result;
  while (2)
  {
    uint64_t v6 = *(void *)(result + v4 + 32);
    uint64_t v5 = *(void *)(result + v4 + 40);
    uint64_t v7 = *(void *)(result + v4 + 56);
    unsigned __int8 v8 = *(unsigned char *)(result + v4 + 64);
    uint64_t v10 = *(void *)(v3 + v4 + 32);
    uint64_t v9 = *(void *)(v3 + v4 + 40);
    uint64_t v11 = *(void *)(v3 + v4 + 48);
    uint64_t v12 = *(void *)(v3 + v4 + 56);
    int v13 = *(unsigned __int8 *)(v3 + v4 + 64);
    int v63 = *(unsigned __int8 *)(v3 + v4 + 121);
    int v64 = *(unsigned __int8 *)(result + v4 + 121);
    int v61 = *(unsigned __int8 *)(v3 + v4 + 122);
    int v62 = *(unsigned __int8 *)(result + v4 + 122);
    uint64_t v70 = v12;
    uint64_t v71 = v5;
    uint64_t v68 = v9;
    uint64_t v69 = v11;
    int v66 = *(unsigned __int8 *)(v3 + v4 + 120);
    unsigned __int8 v67 = *(unsigned char *)(v3 + v4 + 64);
    char v65 = *(unsigned char *)(result + v4 + 120);
    switch(v8)
    {
      case 1u:
        if (v13 != 1) {
          return 0;
        }
        uint64_t v14 = v3;
        uint64_t v15 = *(void *)(result + v4 + 56);
        CGFloat v16 = *(double *)&v15;
        uint64_t v17 = *(void *)(result + v4 + 48);
        CGFloat v18 = *(double *)&v17;
        CGFloat v19 = *(double *)(result + v4 + 40);
        uint64_t v20 = *(void *)(result + v4 + 32);
        CGFloat v21 = *(double *)&v20;
        CGFloat v22 = *(double *)&v10;
        CGFloat v23 = *(double *)&v9;
        CGFloat v24 = *(double *)&v11;
        CGFloat v25 = *(double *)&v12;
        uint64_t v26 = v10;
        unsigned __int8 v27 = 1;
        goto LABEL_10;
      case 2u:
        if (v13 != 2) {
          return 0;
        }
        uint64_t v51 = v3;
        double v29 = *(double *)(v6 + 48);
        double v28 = *(double *)(v6 + 56);
        CGFloat v30 = *(double *)(v6 + 24);
        CGFloat v55 = *(double *)(v6 + 32);
        CGFloat v56 = *(double *)(v6 + 40);
        CGFloat v31 = *(double *)(v6 + 16);
        CGFloat v32 = *(double *)(v10 + 32);
        CGFloat v53 = *(double *)(v10 + 24);
        CGFloat v54 = *(double *)(v10 + 16);
        CGFloat v34 = *(double *)(v10 + 40);
        double v33 = *(double *)(v10 + 48);
        double v35 = *(double *)(v10 + 56);
        int v49 = *(unsigned __int8 *)(v10 + 64);
        int v50 = *(unsigned __int8 *)(v6 + 64);
        uint64_t v36 = *(void *)(result + v4 + 48);
        unsigned __int8 v57 = 2;
        outlined copy of Path.Storage(v10, v9, v11, v12, 2u);
        uint64_t v20 = v6;
        uint64_t v37 = v5;
        uint64_t v17 = v36;
        uint64_t v38 = v36;
        uint64_t v15 = v7;
        outlined copy of Path.Storage(v6, v37, v38, v7, 2u);
        v73.origin.CGFloat x = v31;
        v73.origin.CGFloat y = v30;
        v73.size.CGFloat width = v55;
        v73.size.CGFloat height = v56;
        v75.origin.CGFloat y = v53;
        v75.origin.CGFloat x = v54;
        v75.size.CGFloat width = v32;
        v75.size.CGFloat height = v34;
        if (CGRectEqualToRect(v73, v75) && v29 == v33 && v28 == v35)
        {
          unsigned __int8 v39 = 2;
          uint64_t v14 = v51;
          if ((v50 ^ v49)) {
            goto LABEL_55;
          }
LABEL_42:
          if (v65)
          {
            outlined consume of Path.Storage(v10, v68, v69, v70, v67);
            outlined consume of Path.Storage(v20, v71, v17, v15, v8);
            if (!v66) {
              return 0;
            }
            uint64_t result = 0;
            if (v64 != v63) {
              return result;
            }
          }
          else
          {
            if (v66)
            {
              unsigned __int8 v39 = v8;
              outlined consume of Path.Storage(v10, v68, v69, v70, v67);
              goto LABEL_56;
            }
            char v48 = static CGAffineTransform.== infix(_:_:)();
            outlined consume of Path.Storage(v10, v68, v69, v70, v67);
            outlined consume of Path.Storage(v20, v71, v17, v15, v8);
            uint64_t result = 0;
            if (v48 & 1) == 0 || ((v64 ^ v63)) {
              return result;
            }
          }
          if ((v62 ^ v61)) {
            return result;
          }
          v4 += 96;
          --v2;
          uint64_t result = v60;
          uint64_t v3 = v14;
          if (!v2) {
            return 1;
          }
          continue;
        }
        unsigned __int8 v39 = 2;
LABEL_55:
        outlined consume of Path.Storage(v10, v68, v69, v70, v57);
LABEL_56:
        outlined consume of Path.Storage(v20, v71, v17, v15, v39);
        return 0;
      case 3u:
        if (v13 != 3) {
          return 0;
        }
        uint64_t v14 = v3;
        uint64_t v40 = *(void *)(result + v4 + 48);
        outlined copy of Path.Storage(v10, v9, v11, v12, 3u);
        uint64_t v20 = v6;
        uint64_t v41 = v5;
        uint64_t v17 = v40;
        uint64_t v42 = v40;
        uint64_t v15 = v7;
        outlined copy of Path.Storage(v6, v41, v42, v7, 3u);
        goto LABEL_42;
      case 4u:
        if (v13 != 4) {
          return 0;
        }
        uint64_t v14 = v3;
        uint64_t v43 = *(void *)(result + v4 + 48);
        outlined copy of Path.Storage(v10, v9, v11, v12, 4u);
        uint64_t v20 = v6;
        uint64_t v44 = v5;
        uint64_t v17 = v43;
        uint64_t v45 = v43;
        uint64_t v15 = v7;
        outlined copy of Path.Storage(v6, v44, v45, v7, 4u);
        goto LABEL_42;
      case 5u:
        if (v13 != 5) {
          return 0;
        }
        uint64_t v52 = *(void *)(result + v4 + 48);
        if (*(unsigned char *)(v6 + 16))
        {
          uint64_t v17 = *(void *)(result + v4 + 48);
          if (*(unsigned char *)(v6 + 16) == 1)
          {
            uint64_t v58 = *(void *)(v6 + 24);
            outlined copy of Path.Storage(v10, v9, v11, v12, 5u);
            outlined copy of Path.Storage(v6, v71, v17, v7, 5u);
            outlined copy of Path.Storage(v10, v68, v69, v70, 5u);
            outlined copy of Path.Storage(v6, v71, v52, v7, 5u);
            uint64_t result = v58;
            int v46 = *(unsigned __int8 *)(v10 + 16);
            if (*(unsigned char *)(v10 + 16)) {
              goto LABEL_26;
            }
          }
          else
          {
            outlined copy of Path.Storage(v10, v9, v11, v12, 5u);
            outlined copy of Path.Storage(v6, v71, v17, v7, 5u);
            outlined copy of Path.Storage(v10, v68, v69, v70, 5u);
            outlined copy of Path.Storage(v6, v71, v52, v7, 5u);
            if (one-time initialization token for bufferCallbacks != -1) {
              swift_once();
            }
            uint64_t result = v6;
            int v46 = *(unsigned __int8 *)(v10 + 16);
            if (*(unsigned char *)(v10 + 16)) {
              goto LABEL_26;
            }
          }
        }
        else
        {
          uint64_t v59 = *(void *)(v6 + 24);
          if (!v59)
          {
            __break(1u);
LABEL_60:
            __break(1u);
            return result;
          }
          uint64_t v17 = *(void *)(result + v4 + 48);
          outlined copy of Path.Storage(v10, v9, v11, v12, 5u);
          outlined copy of Path.Storage(v6, v71, v17, v7, 5u);
          outlined copy of Path.Storage(v10, v68, v69, v70, 5u);
          outlined copy of Path.Storage(v6, v71, v52, v7, 5u);
          uint64_t result = v59;
          int v46 = *(unsigned __int8 *)(v10 + 16);
          if (*(unsigned char *)(v10 + 16))
          {
LABEL_26:
            uint64_t v14 = v3;
            uint64_t v20 = v6;
            uint64_t v15 = v7;
            if (v46 != 1 && one-time initialization token for bufferCallbacks != -1) {
              swift_once();
            }
            goto LABEL_41;
          }
        }
        if (!*(void *)(v10 + 24)) {
          goto LABEL_60;
        }
        uint64_t v14 = v3;
        uint64_t v20 = v6;
        uint64_t v15 = v7;
LABEL_41:
        int v47 = RBPathEqualToPath();
        unsigned __int8 v57 = 5;
        outlined consume of Path.Storage(v10, v68, v69, v70, 5u);
        outlined consume of Path.Storage(v20, v71, v17, v15, 5u);
        if (!v47)
        {
          unsigned __int8 v39 = 5;
          goto LABEL_55;
        }
        goto LABEL_42;
      case 6u:
        if (v13 != 6 || v9 | v10 | v11 | v12) {
          return 0;
        }
        uint64_t v17 = *(void *)(result + v4 + 48);
        uint64_t v14 = v3;
        uint64_t v20 = *(void *)(result + v4 + 32);
        uint64_t v15 = *(void *)(result + v4 + 56);
        outlined copy of Path.Storage(0, 0, 0, 0, 6u);
        goto LABEL_42;
      default:
        if (*(unsigned char *)(v3 + v4 + 64)) {
          return 0;
        }
        uint64_t v14 = v3;
        uint64_t v15 = *(void *)(result + v4 + 56);
        CGFloat v16 = *(double *)&v15;
        uint64_t v17 = *(void *)(result + v4 + 48);
        CGFloat v18 = *(double *)&v17;
        CGFloat v19 = *(double *)(result + v4 + 40);
        uint64_t v20 = *(void *)(result + v4 + 32);
        CGFloat v21 = *(double *)&v20;
        CGFloat v22 = *(double *)&v10;
        CGFloat v23 = *(double *)&v9;
        CGFloat v24 = *(double *)&v11;
        CGFloat v25 = *(double *)&v12;
        uint64_t v26 = v10;
        unsigned __int8 v27 = 0;
LABEL_10:
        outlined copy of Path.Storage(v26, v9, v11, v12, v27);
        v72.origin.CGFloat x = v21;
        v72.origin.CGFloat y = v19;
        v72.size.CGFloat width = v18;
        v72.size.CGFloat height = v16;
        v74.origin.CGFloat x = v22;
        v74.origin.CGFloat y = v23;
        v74.size.CGFloat width = v24;
        v74.size.CGFloat height = v25;
        if (!CGRectEqualToRect(v72, v74)) {
          return 0;
        }
        goto LABEL_42;
    }
  }
}

uint64_t type metadata accessor for MaskLayer()
{
  return self;
}

uint64_t @objc closure #4 in closure #1 in variable initialization expression of static Path.PathBox.bufferCallbacks(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 24;
  uint64_t v3 = a2 + 24;
  swift_retain();
  swift_retain();
  uint64_t v4 = MEMORY[0x24C526C70](v2, v3);
  swift_release();
  swift_release();
  return v4;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AccessibilityIdentifierStorage(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 16);
  int v3 = *(unsigned __int8 *)(a2 + 16);
  if (*(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8)) {
    return v2 == v3;
  }
  char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL result = 0;
  if (v5) {
    return v2 == v3;
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for ValueTransactionSeed<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for OrOperationViewInputPredicate()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for ValueToScrollPosition()
{
  return __swift_instantiateGenericMetadata();
}

void _LayoutTraits.idealSize.modify(uint64_t *a1)
{
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = *v1;
  uint64_t v5 = v1[2];
  _LayoutTraits.Dimension._checkInvariant()();
  *uint64_t v1 = v4;
  v1[1] = v3;
  v1[2] = v5;
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[5];
  _LayoutTraits.Dimension._checkInvariant()();
  v1[3] = v6;
  v1[4] = v2;
  v1[5] = v7;
}

void _LayoutTraits.Dimension.init(min:ideal:max:)(double *a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>)
{
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
}

__n128 _LayoutTraits.init(width:height:)@<Q0>(long long *a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *((void *)a1 + 2);
  __n128 v7 = *a2;
  long long v8 = *a1;
  unint64_t v5 = a2[1].n128_u64[0];
  _LayoutTraits.Dimension._checkInvariant()();
  _LayoutTraits.Dimension._checkInvariant()();
  *(_OWORD *)a3 = v8;
  *(void *)(a3 + 16) = v4;
  __n128 result = v7;
  *(__n128 *)(a3 + 24) = v7;
  *(void *)(a3 + 40) = v5;
  return result;
}

void _LayoutTraits.Dimension._checkInvariant()()
{
  double v1 = *v0;
  double v2 = v0[1];
  double v3 = v0[2];
  uint64_t v4 = *(void *)v0 & 0x7FFFFFFFFFFFFFFFLL;
  if ((*(uint64_t *)v0 <= -1 || (unint64_t)(v4 - 0x10000000000000) >> 53 >= 0x3FF)
    && (unint64_t)(*(void *)v0 - 1) >= 0xFFFFFFFFFFFFFLL
    && v4 != 0
    || v2 >= INFINITY)
  {
LABEL_22:
    double v10 = v3;
    double v11 = v1;
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease();
    if (v11 == v10)
    {
      uint64_t v12 = Double.description.getter();
      uint64_t v14 = v13;
    }
    else
    {
      uint64_t v21 = Double.description.getter();
      uint64_t v22 = v15;
      v16._countAndFlagsBits = 3026478;
      v16._object = (void *)0xE300000000000000;
      String.append(_:)(v16);
      v17._countAndFlagsBits = Double.description.getter();
      String.append(_:)(v17);
      swift_bridgeObjectRelease();
      v18._countAndFlagsBits = 3026478;
      v18._object = (void *)0xE300000000000000;
      String.append(_:)(v18);
      v19._countAndFlagsBits = Double.description.getter();
      String.append(_:)(v19);
      swift_bridgeObjectRelease();
      uint64_t v12 = v21;
      uint64_t v14 = v22;
    }
    uint64_t v20 = v14;
    String.append(_:)(*(Swift::String *)&v12);
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  if (v1 > v3)
  {
    __break(1u);
    goto LABEL_22;
  }
  if (v1 > v2 || v2 > v3) {
    goto LABEL_22;
  }
}

uint64_t ScrollTargetRole.SetLayout.init(role:collection:)@<X0>(uint64_t result@<X0>, int a2@<W1>, _DWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

BOOL static VerticalAlignment.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

ValueMetadata *type metadata accessor for TextLayoutProperties()
{
  return &type metadata for TextLayoutProperties;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance HostPreferencesWriter<A>()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

uint64_t AnyTransition.adjustedForAccessibility(prefersCrossFade:)(char a1, uint64_t a2)
{
  if (((*(uint64_t (**)(void))(*(void *)a2 + 104))() & 1) != 0
    && (a1 & 1) != 0
    && one-time initialization token for opacity != -1)
  {
    swift_once();
  }
  return swift_retain();
}

uint64_t DynamicAnimationListener.__deallocating_deinit()
{
  swift_weakDestroy();

  return swift_deallocClassInstance();
}

ValueMetadata *type metadata accessor for VersionSeed()
{
  return &type metadata for VersionSeed;
}

BOOL static TextAlignment.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

uint64_t key path getter for EnvironmentValues.foregroundColor : EnvironmentValues, serialized@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t result = EnvironmentValues.foregroundStyle.getter();
  if (result)
  {
    uint64_t v6 = specialized ShapeStyle.fallbackColor(in:level:)(v3, v4, 0, result);
    uint64_t result = swift_release();
  }
  else
  {
    uint64_t v6 = 0;
  }
  *a2 = v6;
  return result;
}

uint64_t instantiation function for generic protocol witness table for Binding<A>.ScopedLocation(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

void type metadata accessor for LayoutEngineBox<UnaryLayoutEngine<_FixedSizeLayout>>()
{
  if (!lazy cache variable for type metadata for LayoutEngineBox<UnaryLayoutEngine<_FixedSizeLayout>>)
  {
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for UnaryLayoutEngine<_FixedSizeLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type _FixedSizeLayout and conformance _FixedSizeLayout, (uint64_t)&type metadata for _FixedSizeLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    unint64_t v0 = type metadata accessor for LayoutEngineBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LayoutEngineBox<UnaryLayoutEngine<_FixedSizeLayout>>);
    }
  }
}

void type metadata accessor for LayoutEngineBox<UnaryLayoutEngine<LayoutPriorityLayout>>()
{
  if (!lazy cache variable for type metadata for LayoutEngineBox<UnaryLayoutEngine<LayoutPriorityLayout>>)
  {
    type metadata accessor for UnaryLayoutEngine<IgnoresAutomaticPaddingLayout>(255, &lazy cache variable for type metadata for UnaryLayoutEngine<LayoutPriorityLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LayoutPriorityLayout and conformance LayoutPriorityLayout, (uint64_t)&type metadata for LayoutPriorityLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UnaryLayoutEngine);
    unint64_t v0 = type metadata accessor for LayoutEngineBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LayoutEngineBox<UnaryLayoutEngine<LayoutPriorityLayout>>);
    }
  }
}

uint64_t get_witness_table_5ValueQyd__Rsz7SwiftUI20KeyframeTrackContentRd__AcDRd_0_AAQyd_0_ABRSr_0_lAC06MergeddeF0Vyxqd__qd_0_GAcDHPyHCTm(uint64_t a1, void (*a2)(uint64_t, _OWORD *))
{
  uint64_t v2 = *(void *)(a1 + 32);
  long long v3 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v3;
  uint64_t v6 = v2;
  a2(255, v5);
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for CombinedKeyframes()
{
  return swift_getGenericMetadata();
}

unint64_t one-time initialization function for defaultValue()
{
  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  qword_26B0E3CE0 = 0;
  qword_26B0E3CE8 = 0;
  static EnvironmentValues.ScrollAnchorsKey.defaultuint64_t Value = result;
  byte_26B0E3CF0 = 1;
  return result;
}

{
  unint64_t result;

  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  static ScrollTargetRole.ContentKey.defaultuint64_t Value = result;
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table accessor for type EmptyTextAccessibilityProvider and conformance EmptyTextAccessibilityProvider();
  *(void *)&static _GraphInputs.TextAccessibilityProviderKey.defaultuint64_t Value = &type metadata for EmptyTextAccessibilityProvider;
  *((void *)&static _GraphInputs.TextAccessibilityProviderKey.defaultValue + 1) = result;
  return result;
}

{
  unint64_t result;

  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  static PlacementTintKey.defaultuint64_t Value = result;
  return result;
}

{
  unint64_t result;

  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  static ScrollTargetRole.Key.defaultuint64_t Value = result;
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table accessor for type EmptyImageAccessibilityProvider and conformance EmptyImageAccessibilityProvider();
  *(void *)&static _GraphInputs.ImageAccessibilityProviderKey.defaultuint64_t Value = &type metadata for EmptyImageAccessibilityProvider;
  *((void *)&static _GraphInputs.ImageAccessibilityProviderKey.defaultValue + 1) = result;
  return result;
}

{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t result;

  unint64_t v0 = MEMORY[0x263F8EE78];
  uint64_t v1 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v2 = specialized Dictionary.init(dictionaryLiteral:)(v0);
  long long v3 = specialized Dictionary.init(dictionaryLiteral:)(v0);
  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(v0);
  static AttributeCountInfoKey.defaultuint64_t Value = v1;
  *(void *)algn_268F04DD8 = v2;
  qword_268F04DE0 = v3;
  unk_268F04DE8 = result;
  return result;
}

unint64_t ScrollAnchorStorage.init()@<X0>(uint64_t a1@<X8>)
{
  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 24) = 1;
  return result;
}

uint64_t ResolvedSafeAreaInsets.init(regions:environment:size:position:transform:safeAreaInsets:)@<X0>(uint64_t result@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, uint64_t a7@<X8>)
{
  *(void *)a7 = result;
  *(_DWORD *)(a7 + 8) = a2;
  *(_DWORD *)(a7 + 12) = a3;
  *(_DWORD *)(a7 + 16) = a4;
  *(_DWORD *)(a7 + 20) = a5;
  *(_DWORD *)(a7 + 24) = a6;
  return result;
}

uint64_t type metadata completion function for ContentResponderHelper()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

Swift::UInt32 *_ViewInputs.pushIdentity(_:)(Swift::UInt32 *result)
{
  Swift::UInt32 v2 = *result;
  long long v3 = *(_OWORD *)(v1 + 48);
  long long v9 = *(_OWORD *)(v1 + 32);
  long long v10 = v3;
  long long v11 = *(_OWORD *)(v1 + 64);
  int v12 = *(_DWORD *)(v1 + 80);
  long long v4 = *(_OWORD *)(v1 + 16);
  v8[0] = *(_OWORD *)v1;
  v8[1] = v4;
  if (BYTE5(v9))
  {
    outlined retain of _ViewInputs((uint64_t)v8);
    specialized _ViewInputs.subscript.getter();
    outlined release of _ViewInputs((uint64_t)v8);
    uint64_t result = (Swift::UInt32 *)AGWeakAttributeGetAttribute();
    if (result == *MEMORY[0x263F288F8])
    {
      __break(1u);
    }
    else
    {
      Swift::UInt32 v7 = v2;
      unint64_t v5 = Attribute<A>.subscript.modify();
      _DisplayList_StableIdentityScope.pushIdentity(_:)(&v7);
      return (Swift::UInt32 *)v5(v6, 0);
    }
  }
  return result;
}

uint64_t dispatch thunk of AnyLocation.isEqual(to:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t base witness table accessor for _AttributeBody in CachedView<A, B>()
{
  return swift_getWitnessTable();
}

void one-time initialization function for invalid()
{
  static DisplayList.ViewRenderer.Environment.invaliCGFloat d = 0;
}

uint64_t key path getter for _ValueTransactionModifier.transform : <A>_ValueTransactionModifier<A>@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  long long v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for _ValueTransactionModifier() + 36));
  uint64_t v5 = *v3;
  uint64_t v4 = v3[1];
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v5;
  *(void *)(v6 + 24) = v4;
  *a2 = partial apply for specialized closure #1 in StatefulRule<>.update<A>(modify:create:);
  a2[1] = v6;

  return swift_retain();
}

uint64_t View.animation<A>(_:body:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a1;
  swift_retain();
  View.transaction<A>(_:body:)((uint64_t)partial apply for closure #1 in View.animation(_:), v14, a2, a3, a4, a5, a6, a7);

  return swift_release();
}

uint64_t specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(int a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  long long v4 = *(_OWORD *)(a2 + 32);
  long long v5 = *(_OWORD *)(a2 + 64);
  long long v21 = *(_OWORD *)(a2 + 48);
  long long v22 = v5;
  char v23 = *(unsigned char *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  long long v19 = *(_OWORD *)a2;
  *(_OWORD *)uint64_t v20 = v6;
  *(_OWORD *)&unsigned char v20[16] = v4;
  LODWORD(v10) = a1;
  Swift::UInt32 v7 = (void (*)(uint64_t, uint64_t))off_26FA631D8;
  outlined retain of _ViewListInputs(a2);
  v7((uint64_t)&v10, (uint64_t)&v19);
  uint64_t v10 = v19;
  int v11 = DWORD2(v19);
  uint64_t v12 = *(void *)v20;
  long long v13 = *(_OWORD *)&v20[8];
  uint64_t v14 = *(void *)&v20[24];
  long long v15 = v21;
  int v16 = v22;
  uint64_t v17 = *((void *)&v22 + 1);
  char v18 = v23;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  uint64_t v8 = swift_bridgeObjectRetain();
  a3(v8, &v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance _TransactionModifier(uint64_t a1, uint64_t a2)
{
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type ChildTransaction and conformance ChildTransaction();
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  *(_DWORD *)(a2 + 28) = result;
  return result;
}

uint64_t static _ValueTransactionModifier._makeInputs(modifier:inputs:)(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v39 = a2;
  uint64_t v43 = *MEMORY[0x263EF8340];
  uint64_t v7 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v7 - 8);
  long long v9 = (char *)&v38 - v8;
  uint64_t v10 = type metadata accessor for ValueTransactionSeed();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  long long v13 = (_DWORD *)((char *)&v38 - v12);
  int v14 = *a1;
  if (*(void *)(*(void *)(a3 - 8) + 64)) {
    closure #1 in static _ValueTransactionModifier._makeInputs(modifier:inputs:)(1, a3, a4, (uint64_t (*)(void))type metadata accessor for _ValueTransactionModifier, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
  }
  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x263F288F8])
  {
    id v16 = (id)AGSubgraphGetCurrent();
    if (!v16)
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    uint64_t v17 = v16;
    id v18 = (id)AGSubgraphGetGraph();
  }
  else
  {
    id v18 = (id)AGGraphGetAttributeGraph();
  }
  uint64_t Context = AGGraphGetContext();
  if (!Context) {
    __break(1u);
  }
  uint64_t v20 = Context;
  swift_retain();

  swift_beginAccess();
  int v21 = *(_DWORD *)(v20 + 68);
  swift_release();
  variable initialization expression of CodableOptional.base(a3, (uint64_t)v9);
  uint64_t v22 = ValueTransactionSeed.init(value:transactionSeed:oldValue:)(OffsetAttribute2, v21, (uint64_t)v9, v13);
  MEMORY[0x270FA5388](v22);
  uint64_t v36 = v10;
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<UInt32>();
  uint64_t v23 = MEMORY[0x263F8E628];
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v13, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_10, (uint64_t)(&v38 - 4), v10, MEMORY[0x263F8E628], v24, MEMORY[0x263F8E658], v25);
  (*(void (**)(_DWORD *, uint64_t))(v11 + 8))(v13, v10);
  int v26 = v41[0];
  uint64_t v27 = AGGraphSetFlags();
  MEMORY[0x270FA5388](v27);
  uint64_t KeyPath = swift_getKeyPath();
  v41[0] = v14;
  unint64_t v42 = KeyPath;
  MEMORY[0x270FA5388](KeyPath);
  type metadata accessor for _ValueTransactionModifier();
  type metadata accessor for (_:)();
  uint64_t v29 = type metadata accessor for Focus();
  uint64_t v36 = v29;
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<(_:)>();
  uint64_t v31 = v30;
  swift_retain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v41, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_7, (uint64_t)(&v38 - 4), v29, v23, v31, MEMORY[0x263F8E658], v32);
  swift_release();
  swift_release();
  uint64_t v33 = v39;
  unsigned int v34 = *(_DWORD *)(v39 + 28);
  v41[0] = v26;
  v41[1] = v40;
  unint64_t v42 = __PAIR64__(v21, v34);
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type ChildValueTransaction and conformance ChildValueTransaction();
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  *(_DWORD *)(v33 + 28) = result;
  return result;
}

unsigned char *storeEnumTagSinglePayload for Image.TemplateRenderingMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t static _AnimationModifier.== infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*(void *)a1)
  {
    if (v2)
    {
      int v3 = *(uint64_t (**)(uint64_t))(**(void **)a1 + 104);
      swift_retain();
      swift_retain();
      LOBYTE(v3) = v3(v2);
      swift_release();
      swift_release();
      if (v3) {
        goto LABEL_4;
      }
    }
  }
  else if (!v2)
  {
LABEL_4:
    type metadata accessor for _AnimationModifier();
    return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
  }
  return 0;
}

uint64_t static _AnimationModifier._makeViewList(modifier:inputs:body:)(int *a1, uint64_t a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)a2;
  int v6 = *(_DWORD *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 16);
  unsigned int v8 = *(_DWORD *)(a2 + 24);
  unsigned int v9 = *(_DWORD *)(a2 + 28);
  unsigned int v11 = *(_DWORD *)(a2 + 32);
  unsigned int v10 = *(_DWORD *)(a2 + 36);
  uint64_t v12 = *(void *)(a2 + 40);
  long long v18 = *(_OWORD *)(a2 + 48);
  int v19 = *(_DWORD *)(a2 + 64);
  uint64_t v13 = *(void *)(a2 + 72);
  char v20 = *(unsigned char *)(a2 + 80);
  int v21 = *a1;
  swift_bridgeObjectRetain();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v14 = specialized find<A>(_:key:)(v5);
  if (v14)
  {
    char v15 = *(unsigned char *)(v14 + 72);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    if (v15)
    {
      LODWORD(v25) = v21;
      uint64_t v34 = v5;
      int v35 = v6;
      uint64_t v36 = v7;
      *(void *)&long long v37 = __PAIR64__(v9, v8);
      *((void *)&v37 + 1) = __PAIR64__(v10, v11);
      uint64_t v38 = v12;
      long long v39 = v18;
      int v40 = v19;
      uint64_t v41 = v13;
      char v42 = v20;
      return static _AnimationModifier.makeArchivedViewList(modifier:inputs:body:)((int *)&v25, &v34, a3, a4, a5);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
  }
  uint64_t v34 = v5;
  int v35 = v6;
  uint64_t v36 = v7;
  *(void *)&long long v37 = __PAIR64__(v9, v8);
  *((void *)&v37 + 1) = __PAIR64__(v10, v11);
  uint64_t v38 = v12;
  long long v39 = v18;
  int v40 = v19;
  uint64_t v41 = v13;
  char v42 = v20;
  LODWORD(v25) = v21;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static _AnimationModifier._makeInputs(modifier:inputs:)((int *)&v25, (uint64_t)&v34, a5);
  uint64_t v25 = v34;
  int v26 = v35;
  uint64_t v27 = v36;
  long long v28 = v37;
  uint64_t v29 = v38;
  long long v30 = v39;
  int v31 = v40;
  uint64_t v32 = v41;
  char v33 = v42;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  uint64_t v17 = swift_bridgeObjectRetain();
  ((void (*)(uint64_t, uint64_t *))a3)(v17, &v25);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t static _AnimationModifier._makeInputs(modifier:inputs:)(int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v34 = a2;
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v5 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v33 - v6;
  uint64_t v8 = type metadata accessor for ValueTransactionSeed();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  unsigned int v11 = (_DWORD *)((char *)v33 - v10);
  int v12 = *a1;
  uint64_t v13 = *(void *)(a3 - 8);
  if (*(void *)(v13 + 64)) {
    closure #1 in static _AnimationModifier._makeInputs(modifier:inputs:)(1, a3);
  }
  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  int CurrentAttribute = AGGraphGetCurrentAttribute();
  int v16 = *MEMORY[0x263F288F8];
  void v33[3] = v12;
  if (CurrentAttribute == v16)
  {
    id v17 = (id)AGSubgraphGetCurrent();
    if (!v17)
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    long long v18 = v17;
    id v19 = (id)AGSubgraphGetGraph();
  }
  else
  {
    id v19 = (id)AGGraphGetAttributeGraph();
  }
  uint64_t Context = AGGraphGetContext();
  if (!Context) {
    __break(1u);
  }
  uint64_t v21 = Context;
  swift_retain();

  swift_beginAccess();
  int v22 = *(_DWORD *)(v21 + 68);
  swift_release();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v7, 1, 1, a3);
  uint64_t v23 = ValueTransactionSeed.init(value:transactionSeed:oldValue:)(OffsetAttribute2, v22, (uint64_t)v7, v11);
  MEMORY[0x270FA5388](v23);
  uint64_t v31 = v8;
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<UInt32>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<UInt32>, MEMORY[0x263F8E8F8], MEMORY[0x263F28898]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v11, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)&v33[-8], v8, MEMORY[0x263F8E628], v24, MEMORY[0x263F8E658], v25);
  (*(void (**)(_DWORD *, uint64_t))(v9 + 8))(v11, v8);
  int v26 = v35;
  AGGraphSetFlags();
  closure #2 in static _AnimationModifier._makeInputs(modifier:inputs:)(1);
  int v27 = AGGraphCreateOffsetAttribute2();
  uint64_t v28 = v34;
  int v29 = *(_DWORD *)(v34 + 28);
  int v35 = v26;
  int v36 = v27;
  int v37 = v29;
  int v38 = v22;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type ChildTransaction and conformance ChildTransaction();
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  *(_DWORD *)(v28 + 28) = result;
  return result;
}

void type metadata accessor for Attribute<UInt32>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t ValueTransactionSeed.init(value:transactionSeed:oldValue:)@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X2>, _DWORD *a4@<X8>)
{
  *a4 = a1;
  a4[1] = a2;
  unint64_t v5 = (char *)a4 + *(int *)(type metadata accessor for ValueTransactionSeed() + 40);
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);

  return v7(v5, a3, v6);
}

uint64_t type metadata accessor for ValueTransactionSeed()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t closure #2 in static _AnimationModifier._makeInputs(modifier:inputs:)(uint64_t a1)
{
  void v7[2] = type metadata accessor for _AnimationModifier();
  type metadata accessor for Attribute<UInt32>(0, (unint64_t *)&lazy cache variable for type metadata for Animation?, (uint64_t)&type metadata for Animation, MEMORY[0x263F8D8F0]);
  uint64_t v3 = v2;
  uint64_t v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v7, v3, MEMORY[0x263F8E628], v4, MEMORY[0x263F8E658], v5);
  return v7[5];
}

uint64_t closure #1 in static _AnimationModifier._makeInputs(modifier:inputs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for _AnimationModifier();
  uint64_t v5 = a1 + *(int *)(v4 + 36);
  v9[2] = v4;
  v9[3] = a2;
  uint64_t v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v5, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v9, a2, MEMORY[0x263F8E628], v6, MEMORY[0x263F8E658], v7);
  return v9[5];
}

uint64_t View.animation<A>(_:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v19 = a5;
  uint64_t v9 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  unsigned int v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for _AnimationModifier();
  uint64_t v13 = *(void *)(v12 - 8);
  double v14 = MEMORY[0x270FA5388](v12);
  int v16 = (char *)&v19 - v15;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v11, a2, a4, v14);
  *(void *)int v16 = a1;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v16[*(int *)(v12 + 36)], v11, a4);
  View.modifier<A>(_:)(v16, a3, v12);
  id v17 = *(uint64_t (**)(char *, uint64_t))(v13 + 8);
  swift_retain();
  return v17(v16, v12);
}

uint64_t type metadata accessor for _AnimationModifier()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type ChildTransaction and conformance ChildTransaction()
{
  unint64_t result = lazy protocol witness table cache variable for type ChildTransaction and conformance ChildTransaction;
  if (!lazy protocol witness table cache variable for type ChildTransaction and conformance ChildTransaction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ChildTransaction and conformance ChildTransaction);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ChildTransaction and conformance ChildTransaction;
  if (!lazy protocol witness table cache variable for type ChildTransaction and conformance ChildTransaction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ChildTransaction and conformance ChildTransaction);
  }
  return result;
}

uint64_t AnimationBox.isEqual(to:)()
{
  type metadata accessor for AnimationBox();
  if (swift_dynamicCastClass()) {
    swift_retain();
  }
  type metadata accessor for Optional();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in AnimationBox.isEqual(to:), v0, MEMORY[0x263F8E628], MEMORY[0x263F8D4F8], v1, (uint64_t)&v3);
  swift_release();
  return v3 & 1;
}

uint64_t type metadata accessor for AnimationBox()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #2 in static _PushPopTransactionModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  return closure #1 in static _ValueTransactionModifier._makeInputs(modifier:inputs:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), (uint64_t (*)(void))type metadata accessor for _PushPopTransactionModifier, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
}

uint64_t closure #1 in static _ValueTransactionModifier._makeInputs(modifier:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t a5)
{
  void v11[2] = a4(0);
  void v11[3] = a2;
  uint64_t v8 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, a5, (uint64_t)v11, a2, MEMORY[0x263F8E628], v8, MEMORY[0x263F8E658], v9);
  return v11[5];
}

uint64_t _ValueTransactionModifier.init(value:transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (*a6)(void, uint64_t, uint64_t)@<X5>, uint64_t a7@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a7, a1, a4);
  uint64_t result = a6(0, a4, a5);
  double v14 = (void *)(a7 + *(int *)(result + 36));
  void *v14 = a2;
  v14[1] = a3;
  return result;
}

uint64_t type metadata accessor for _ValueTransactionModifier()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type ChildValueTransaction and conformance ChildValueTransaction()
{
  unint64_t result = lazy protocol witness table cache variable for type ChildValueTransaction and conformance ChildValueTransaction;
  if (!lazy protocol witness table cache variable for type ChildValueTransaction and conformance ChildValueTransaction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ChildValueTransaction and conformance ChildValueTransaction);
  }
  return result;
}

uint64_t static _ViewListOutputs.sectionListOutputs(_:inputs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = a3;
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 48);
  uint64_t v6 = *(void *)(a2 + 56);
  int v35 = *(_DWORD *)(a2 + 64);
  uint64_t v7 = *(void *)(a1 + 16);
  __int16 v36 = v6;
  if (v7)
  {
    int v39 = *(_DWORD *)(a2 + 36);
    uint64_t v8 = a1 + 32;
    int v37 = *MEMORY[0x263F288F8];
    swift_retain_n();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v40 = 0;
    char v41 = 0;
    uint64_t v38 = v6 & 3;
    uint64_t v9 = (char *)MEMORY[0x263F8EE78];
    do
    {
      outlined init with copy of _ViewListOutputs(v8, (uint64_t)v51);
      outlined init with copy of _ViewListOutputs.Views((uint64_t)v51, (uint64_t)v49);
      if (v50)
      {
        int v10 = v49[0];
        if (*((void *)&v49[0] + 1))
        {
          LODWORD(v46) = v49[0];
          uint64_t v47 = *((void *)&v49[0] + 1);
          protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
          type metadata accessor for ViewList();
          lazy protocol witness table accessor for type _ViewListOutputs.ApplyModifiers and conformance _ViewListOutputs.ApplyModifiers();
          swift_retain();
          int v10 = Attribute.init<A>(body:value:flags:update:)();
          swift_release_n();
        }
        char v11 = v41;
      }
      else
      {
        outlined init with take of ScrollStateRequest(v49, (uint64_t)v48);
        outlined init with copy of AnyTrackedValue((uint64_t)v48, (uint64_t)v45);
        if ((v39 & 0x100) != 0)
        {
          swift_retain_n();
          swift_retain();
          swift_bridgeObjectRetain();
          uint64_t v14 = specialized find<A>(_:key:)(v4);
          char v11 = v41;
          if (v14)
          {
            uint64_t v15 = (uint64_t *)(v14 + 72);
            int v16 = (unsigned int *)(v14 + 76);
          }
          else
          {
            int v16 = (unsigned int *)&static _DisplayList_StableIdentityScope.defaultValue + 1;
            if (one-time initialization token for defaultValue != -1) {
              swift_once();
            }
            uint64_t v15 = &static _DisplayList_StableIdentityScope.defaultValue;
          }
          uint64_t v17 = *(unsigned int *)v15;
          uint64_t v18 = *v16;
          swift_bridgeObjectRelease();
          swift_release();
          swift_release_n();
          unint64_t v19 = v17 | (v18 << 32);
          int Attribute = AGWeakAttributeGetAttribute();
          char v13 = Attribute == v37;
          if (Attribute == v37) {
            unint64_t v12 = 0;
          }
          else {
            unint64_t v12 = v19;
          }
        }
        else
        {
          unint64_t v12 = 0;
          char v13 = 1;
          char v11 = v41;
        }
        uint64_t v43 = MEMORY[0x263F8EE88];
        char v44 = 0;
        char v42 = (void *)MEMORY[0x263F8EE78];
        BaseViewList.init(elements:implicitID:canTransition:stableIDScope:traitKeys:traits:)((uint64_t)v45, v5, v38 == 1, v12, v13, &v43, &v42, (uint64_t)&v46);
        v45[3] = &type metadata for BaseViewList;
        v45[4] = &protocol witness table for BaseViewList;
        v45[0] = swift_allocObject();
        outlined init with copy of BaseViewList((uint64_t)&v46, v45[0] + 16);
        type metadata accessor for ViewList();
        type metadata accessor for External<ViewList>();
        lazy protocol witness table accessor for type External<ViewList> and conformance External<A>();
        int v10 = Attribute.init<A>(body:value:flags:update:)();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v45);
        outlined destroy of BaseViewList((uint64_t)&v46);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v48);
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v9 + 2) + 1, 1, v9);
      }
      unint64_t v22 = *((void *)v9 + 2);
      unint64_t v21 = *((void *)v9 + 3);
      if (v22 >= v21 >> 1) {
        uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v21 > 1), v22 + 1, 1, v9);
      }
      *((void *)v9 + 2) = v22 + 1;
      *(_DWORD *)&v9[4 * v22 + 32] = v10;
      uint64_t v5 = v52;
      if (v11)
      {
        outlined destroy of _ViewListOutputs((uint64_t)v51);
        uint64_t v40 = 0;
        char v41 = 1;
      }
      else
      {
        uint64_t v23 = v53;
        char v24 = v54;
        outlined destroy of _ViewListOutputs((uint64_t)v51);
        if (v24)
        {
          uint64_t v40 = 0;
          char v41 = 1;
        }
        else
        {
          char v41 = 0;
          v40 += v23;
        }
      }
      v8 += 72;
      --v7;
    }
    while (v7);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v3 = a3;
    uint64_t v25 = v40;
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_retain_n();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v25 = 0;
    char v41 = 0;
    uint64_t v9 = (char *)MEMORY[0x263F8EE78];
  }
  swift_release();
  if ((v36 & 0x2000) != 0)
  {
    uint64_t v26 = *((void *)v9 + 2);
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain_n();
    uint64_t v27 = swift_dynamicCastClass();
    if (!v27)
    {
      swift_bridgeObjectRelease();
      uint64_t v27 = MEMORY[0x263F8EE78];
    }
    uint64_t v28 = *(void *)(v27 + 16);
    swift_release();
    if (v28 == v26 - (v26 != 0))
    {
      uint64_t v29 = swift_dynamicCastClass();
      if (!v29)
      {
        swift_bridgeObjectRelease();
        uint64_t v29 = MEMORY[0x263F8EE78];
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v29 = specialized _copyCollectionToContiguousArray<A>(_:)((uint64_t)v9, (uint64_t)(v9 + 32), v26 != 0, (2 * v26) | 1);
    }
    swift_bridgeObjectRelease();
    uint64_t v46 = v29;
    protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
    type metadata accessor for ViewList();
    lazy protocol witness table accessor for type _ViewList_Group.Init and conformance _ViewList_Group.Init();
    int v30 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v9);
    }
    if (*((void *)v9 + 2) < 2uLL)
    {
      __break(1u);
    }
    else
    {
      *((_DWORD *)v9 + 9) = v30;
      int v31 = specialized _GraphInputs.intern<A>(_:id:)(0);
      if (*((void *)v9 + 2) >= 3uLL)
      {
        *((_DWORD *)v9 + 10) = v31;
        goto LABEL_42;
      }
    }
    __break(1u);
  }
LABEL_42:
  uint64_t v46 = (uint64_t)v9;
  LOBYTE(v47) = v36 < 0;
  HIDWORD(v47) = v35;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  type metadata accessor for ViewList();
  lazy protocol witness table accessor for type MakeSection and conformance MakeSection();
  int v32 = Attribute.init<A>(body:value:flags:update:)();
  swift_bridgeObjectRelease();
  *(_DWORD *)uint64_t v3 = v32;
  *(void *)(v3 + 8) = 0;
  *(unsigned char *)(v3 + 40) = 1;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v3 + 48) = v5;
  *(void *)(v3 + 56) = v25;
  *(unsigned char *)(v3 + 64) = v41;
  return result;
}

uint64_t static _PushPopTransactionModifier._makeView(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  void (*v34)(void *__return_ptr, int *, Swift::UInt *, uint64_t (*)(uint64_t, uint64_t), uint64_t, uint64_t, uint64_t);
  void *v35;
  void v37[2];
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  int v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  void v56[2];
  int v57;
  Swift::UInt v58;
  int v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  Swift::UInt v74;
  int v75;
  uint64_t v76;
  int v77;
  int v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  uint64_t v90;

  uint64_t v53 = a6;
  char v50 = a5;
  int v39 = a4;
  uint64_t v38 = a3;
  unint64_t v90 = *MEMORY[0x263EF8340];
  int v8 = *a1;
  uint64_t v9 = *(void *)a2;
  int v10 = *(_DWORD *)(a2 + 8);
  uint64_t v11 = *(void *)(a2 + 16);
  int v12 = *(_DWORD *)(a2 + 28);
  uint64_t v47 = *(_DWORD *)(a2 + 24);
  int v13 = *(_DWORD *)(a2 + 32);
  int v14 = *(_DWORD *)(a2 + 36);
  uint64_t v15 = *(void *)(a2 + 40);
  uint64_t v16 = *(void *)(a2 + 48);
  uint64_t v46 = *(_DWORD *)(a2 + 56);
  uint64_t v45 = *(_DWORD *)(a2 + 60);
  char v44 = *(_DWORD *)(a2 + 64);
  uint64_t v43 = *(_DWORD *)(a2 + 68);
  char v42 = *(_DWORD *)(a2 + 72);
  char v41 = *(_DWORD *)(a2 + 76);
  uint64_t v40 = *(_DWORD *)(a2 + 80);
  swift_retain_n();
  swift_retain_n();
  char v54 = v15;
  swift_bridgeObjectRetain_n();
  v37[0] = v16;
  swift_bridgeObjectRetain();
  uint64_t v17 = specialized find<A>(_:key:)(v9);
  uint64_t v51 = v13;
  int v49 = v10;
  if (v17)
  {
    uint64_t v18 = (char **)(v17 + 72);
  }
  else
  {
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    uint64_t v18 = (char **)&static _GraphInputs.SavedTransactionKey.defaultValue;
  }
  unint64_t v19 = *v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  uint64_t v52 = a7;
  char v48 = v14;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v19 + 2) + 1, 1, v19);
  }
  unint64_t v21 = *((void *)v19 + 2);
  unint64_t v20 = *((void *)v19 + 3);
  if (v21 >= v20 >> 1) {
    unint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v20 > 1), v21 + 1, 1, v19);
  }
  *((void *)v19 + 2) = v21 + 1;
  *(_DWORD *)&v19[4 * v21 + 32] = v12;
  uint64_t v22 = swift_retain();
  uint64_t v23 = specialized find<A>(_:key:)(v22);
  if (!v23 || (Swift::UInt value = v9, !specialized static Array<A>.== infix(_:_:)((uint64_t)v19, *(void *)(v23 + 72))))
  {
    type metadata accessor for TypedElement<_GraphInputs.SavedTransactionKey>();
    *(void *)(swift_allocObject() + 72) = v19;
    swift_bridgeObjectRetain();
    Swift::UInt value = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for _GraphInputs.SavedTransactionKey, 0, v9).value;
  }
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v25 = v50;
  closure #1 in static _PushPopTransactionModifier._makeView(modifier:inputs:body:)(1);
  LODWORD(v74) = AGGraphCreateOffsetAttribute2();
  HIDWORD(v74) = v12;
  protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
  lazy protocol witness table accessor for type ChildTransaction and conformance ChildTransaction();
  uint64_t v26 = Attribute.init<A>(body:value:flags:update:)();
  int v27 = v26;
  v37[1] = v37;
  MEMORY[0x270FA5388](v26);
  LODWORD(v74) = v8;
  type metadata accessor for _PushPopTransactionModifier();
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #2 in static _PushPopTransactionModifier._makeView(modifier:inputs:body:), v25, &v57);
  int v28 = v57;
  uint64_t v29 = swift_allocObject();
  uint64_t v30 = v39;
  *(void *)(v29 + 16) = v38;
  *(void *)(v29 + 24) = v30;
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v32 = v37[0];
  swift_bridgeObjectRetain();
  swift_retain();
  LODWORD(v39) = ShouldRecordTree;
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  CGRect v74 = value;
  long long v76 = v11;
  CGRect v75 = v49;
  id v77 = v47;
  id v78 = v27;
  unint64_t v80 = v48;
  unint64_t v81 = v54;
  uint64_t v82 = v32;
  uint64_t v83 = v46;
  unint64_t v84 = v45;
  float64x2_t v85 = v44;
  uint64_t v86 = v43;
  uint64_t v87 = v42;
  uint64_t v88 = v41;
  long long v89 = v40;
  LODWORD(v38) = v28;
  uint64_t v55 = v28;
  uint64_t v58 = value;
  uint64_t v59 = v49;
  uint64_t v60 = v11;
  int v61 = v47;
  int v62 = v27;
  int v63 = 0;
  int v64 = v48;
  char v65 = v54;
  int v66 = v32;
  unsigned __int8 v67 = v46;
  uint64_t v68 = v45;
  uint64_t v69 = v44;
  uint64_t v70 = v43;
  uint64_t v71 = v42;
  CGRect v72 = v41;
  CGRect v73 = v40;
  uint64_t v33 = v53;
  uint64_t v34 = *(void (**)(void *__return_ptr, int *, Swift::UInt *, uint64_t (*)(uint64_t, uint64_t), uint64_t, uint64_t, uint64_t))(v53 + 24);
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v34(v56, &v55, &v58, partial apply for closure #3 in static _PushPopTransactionModifier._makeView(modifier:inputs:body:), v29, v25, v33);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  unint64_t v79 = v51;
  if (v39)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)((uint64_t)v56, (uint64_t)&v74);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
  }
  swift_release();
  swift_release();
  int v35 = v52;
  *uint64_t v52 = v56[0];
  v35[1] = v56[1];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

void protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ApplyTransitionModifier<A>(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, double *a5@<X8>)
{
}

void static ApplyTransitionModifier._makeView(modifier:inputs:body:)(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, double *a5@<X8>)
{
  uint64_t v7 = *(void *)a2;
  int v8 = *(_DWORD *)(a2 + 8);
  uint64_t v9 = *(void *)(a2 + 16);
  int v10 = *(_DWORD *)(a2 + 80);
  LODWORD(v21) = *a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = type metadata accessor for ApplyTransitionModifier.Child();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v14 = *(void *)(a2 + 24);
  uint64_t v15 = *(void *)(a2 + 32);
  long long v17 = *(_OWORD *)(a2 + 56);
  long long v18 = *(_OWORD *)(a2 + 40);
  uint64_t v16 = *(void *)(a2 + 72);
  _GraphValue.init<A>(_:)((uint64_t)&v21, AssociatedTypeWitness, v12, WitnessTable, v30);
  uint64_t v21 = v7;
  int v22 = v8;
  uint64_t v23 = v9;
  uint64_t v24 = v14;
  uint64_t v25 = v15;
  long long v26 = v18;
  long long v27 = v17;
  uint64_t v28 = v16;
  int v29 = v10;
  static Transition.makeView(view:inputs:body:)(v30, &v21, a3, a4, a5);
}

uint64_t type metadata accessor for ApplyTransitionModifier.Child()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t closure #3 in static _PushPopTransactionModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, Swift::UInt *))
{
  uint64_t v4 = *(void *)a2;
  int v5 = *(_DWORD *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  int v7 = *(_DWORD *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 48);
  uint64_t v11 = *(void *)(a2 + 56);
  uint64_t v12 = *(void *)(a2 + 64);
  uint64_t v13 = *(void *)(a2 + 72);
  int v14 = *(_DWORD *)(a2 + 80);
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  uint64_t v15 = specialized find<A>(_:key:)(v4);
  if (!v15)
  {
    if (one-time initialization token for defaultValue != -1) {
      goto LABEL_15;
    }
    goto LABEL_4;
  }
  for (unint64_t i = (char **)(v15 + 72); ; unint64_t i = (char **)&static _GraphInputs.SavedTransactionKey.defaultValue)
  {
    long long v17 = *i;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    if (!*((void *)v17 + 2)) {
      break;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      goto LABEL_13;
    }
    uint64_t v18 = *((void *)v17 + 2);
    if (v18) {
      goto LABEL_8;
    }
LABEL_14:
    __break(1u);
LABEL_15:
    swift_once();
LABEL_4:
    ;
  }
  __break(1u);
LABEL_13:
  long long v17 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v17);
  uint64_t v18 = *((void *)v17 + 2);
  if (!v18) {
    goto LABEL_14;
  }
LABEL_8:
  int v27 = v14;
  int v19 = v7;
  uint64_t v20 = v18 - 1;
  int v21 = *(_DWORD *)&v17[4 * v20 + 32];
  *((void *)v17 + 2) = v20;
  uint64_t v22 = swift_retain();
  uint64_t v23 = specialized find<A>(_:key:)(v22);
  if (!v23 || (Swift::UInt value = v4, !specialized static Array<A>.== infix(_:_:)((uint64_t)v17, *(void *)(v23 + 72))))
  {
    type metadata accessor for TypedElement<_GraphInputs.SavedTransactionKey>();
    *(void *)(swift_allocObject() + 72) = v17;
    swift_bridgeObjectRetain();
    Swift::UInt value = PropertyList.Element.init(keyType:before:after:)((Swift::Int)&type metadata for _GraphInputs.SavedTransactionKey, 0, v4).value;
  }
  swift_bridgeObjectRelease();
  swift_release();
  Swift::UInt v28 = value;
  int v29 = v5;
  uint64_t v30 = v6;
  int v31 = v19;
  int v32 = v21;
  uint64_t v33 = v8;
  uint64_t v34 = v9;
  uint64_t v35 = v10;
  uint64_t v36 = v11;
  uint64_t v37 = v12;
  uint64_t v38 = v13;
  int v39 = v27;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v25 = swift_bridgeObjectRetain();
  a3(v25, &v28);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

void type metadata accessor for TypedElement<_GraphInputs.SavedTransactionKey>()
{
  if (!lazy cache variable for type metadata for TypedElement<_GraphInputs.SavedTransactionKey>)
  {
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<_GraphInputs.SavedTransactionKey>);
    }
  }
}

char *specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1, (void (*)(void))type metadata accessor for _ContiguousArrayStorage<Attribute<Transaction>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1, (void (*)(void))type metadata accessor for _ContiguousArrayStorage<Attribute<ViewList>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4, void (*a5)(void))
{
  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v8 = a2;
    goto LABEL_8;
  }
  unint64_t v7 = *((void *)a4 + 3);
  uint64_t v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v8 + 0x4000000000000000 >= 0)
  {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v8 = a2;
    }
LABEL_8:
    uint64_t v9 = *((void *)a4 + 2);
    if (v8 <= v9) {
      uint64_t v10 = *((void *)a4 + 2);
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10)
    {
      a5(0);
      uint64_t v11 = (char *)swift_allocObject();
      int64_t v12 = _swift_stdlib_malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 29;
      }
      *((void *)v11 + 2) = v9;
      *((void *)v11 + 3) = 2 * (v13 >> 2);
      int v14 = v11 + 32;
      if (v6) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v11 = (char *)MEMORY[0x263F8EE78];
      int v14 = (char *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v9 + 32]) {
          memmove(v14, a4 + 32, 4 * v9);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<Attribute<ViewList>>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<Attribute<ViewList>>)
  {
    type metadata accessor for _ContiguousArrayStorage<Scrollable>(255, (unint64_t *)&lazy cache variable for type metadata for Attribute<ViewList>, (unint64_t *)&lazy cache variable for type metadata for ViewList, (uint64_t)&protocol descriptor for ViewList, MEMORY[0x263F28898]);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Attribute<ViewList>>);
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<Attribute<Transaction>>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<Attribute<Transaction>>)
  {
    type metadata accessor for _ContiguousArrayStorage<DisplayList.Item>(255, &lazy cache variable for type metadata for Attribute<Transaction>, (uint64_t)&type metadata for Transaction, MEMORY[0x263F28898]);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Attribute<Transaction>>);
    }
  }
}

uint64_t closure #1 in static _PushPopTransactionModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for _PushPopTransactionModifier();
  uint64_t v3 = a1 + *(int *)(v2 + 36);
  void v7[2] = v2;
  uint64_t v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v3, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v7, (uint64_t)&type metadata for _TransactionModifier, MEMORY[0x263F8E628], v4, MEMORY[0x263F8E658], v5);
  return v7[5];
}

uint64_t FilteredTransition.body(content:phase:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v28 = a4;
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v25 = a3;
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ApplyTransitionModifier();
  uint64_t v27 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v25 - v12;
  uint64_t v26 = type metadata accessor for _PushPopTransactionModifier();
  uint64_t v14 = *(void *)(v26 - 8);
  double v15 = MEMORY[0x270FA5388](v26);
  long long v17 = (char *)&v25 - v16;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, v5, v7, v15);
  ApplyTransitionModifier.init(transition:phase:)((uint64_t)v10, a2, v7, (uint64_t)v13);
  uint64_t v18 = (uint64_t *)(v5 + *(int *)(v25 + 36));
  uint64_t v20 = *v18;
  uint64_t v19 = v18[1];
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v20;
  *(void *)(v21 + 24) = v19;
  *(unsigned char *)(v21 + 32) = a2;
  ViewModifier.transaction(_:)((uint64_t)partial apply for closure #1 in FilteredTransition.body(content:phase:), v21, v11, (uint64_t)v17);
  swift_retain();
  swift_release();
  (*(void (**)(char *, uint64_t))(v27 + 8))(v13, v11);
  uint64_t v22 = type metadata accessor for PlaceholderContentView();
  uint64_t v23 = v26;
  View.modifier<A>(_:)(v17, v22, v26);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, v23);
}

uint64_t View.transaction<A>(_:body:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v30 = a7;
  v25[1] = a4;
  uint64_t v26 = a3;
  uint64_t v27 = a1;
  uint64_t v28 = a2;
  uint64_t v29 = a8;
  uint64_t v10 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v12 = (char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25[0] = v13;
  uint64_t v14 = type metadata accessor for CustomModifier();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  long long v17 = (char *)v25 - v16;
  uint64_t v18 = type metadata accessor for _PushPopTransactionModifier();
  uint64_t v19 = *(void *)(v18 - 8);
  double v20 = MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)v25 - v21;
  uint64_t v23 = PlaceholderContentView.init()(a5, v20);
  v26(v23);
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v17, v12, a6);
  ViewModifier.transaction(_:)(v27, v28, v14, (uint64_t)v22);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  View.modifier<A>(_:)(v22, v25[0], v18);
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v22, v18);
}

uint64_t destroy for CustomModifier(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 24) - 8) + 8))();
}

uint64_t type metadata accessor for CustomModifier()
{
  return __swift_instantiateGenericMetadata();
}

{
  return swift_getGenericMetadata();
}

{
  return swift_getGenericMetadata();
}

uint64_t ViewModifier.transaction(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v9 = *(void *)(a3 - 8);
  double v10 = MEMORY[0x270FA5388](a1);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, double))(v9 + 16))(v12, v4, v10);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a4, v12, a3);
  uint64_t v13 = (void *)(a4 + *(int *)(type metadata accessor for _PushPopTransactionModifier() + 36));
  *uint64_t v13 = a1;
  v13[1] = a2;
  return swift_retain();
}

uint64_t type metadata accessor for _PushPopTransactionModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t initializeWithCopy for CustomModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t ApplyTransitionModifier.init(transition:phase:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a4, a1);
  uint64_t result = type metadata accessor for ApplyTransitionModifier();
  *(unsigned char *)(a4 + *(int *)(result + 36)) = a2;
  return result;
}

uint64_t AsymmetricTransition.body(content:phase:)@<X0>(unsigned __int8 a1@<W1>, void *a2@<X2>, uint64_t a3@<X8>)
{
  v20[1] = a3;
  int v5 = a1;
  uint64_t v6 = type metadata accessor for PlaceholderContentView();
  uint64_t v7 = a2[2];
  uint64_t v8 = a2[4];
  type metadata accessor for ApplyTransitionModifier();
  uint64_t v9 = type metadata accessor for ModifiedContent();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)v20 - v12;
  if (v5 == 2) {
    char v14 = 1;
  }
  else {
    char v14 = a1;
  }
  if ((a1 & 0xFE) != 0) {
    char v15 = v5;
  }
  else {
    char v15 = 1;
  }
  Transition.apply<A>(content:phase:)(v11, v14, v7, v6, v8, (uint64_t)&protocol witness table for PlaceholderContentView<A>);
  uint64_t v16 = a2[3];
  uint64_t v17 = a2[5];
  v20[2] = &protocol witness table for PlaceholderContentView<A>;
  _OWORD v20[3] = &protocol witness table for ApplyTransitionModifier<A>;
  uint64_t WitnessTable = swift_getWitnessTable();
  Transition.apply<A>(content:phase:)((uint64_t)v13, v15, v16, v9, v17, WitnessTable);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

uint64_t CombiningTransition.body(content:phase:)@<X0>(char a1@<W1>, void *a2@<X2>, uint64_t a3@<X8>)
{
  v17[1] = a3;
  uint64_t v5 = type metadata accessor for PlaceholderContentView();
  uint64_t v6 = a2[2];
  uint64_t v7 = a2[4];
  type metadata accessor for ApplyTransitionModifier();
  uint64_t v8 = type metadata accessor for ModifiedContent();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v17 - v10;
  Transition.apply<A>(content:phase:)(v12, a1, v6, v5, v7, (uint64_t)&protocol witness table for PlaceholderContentView<A>);
  uint64_t v13 = a2[3];
  uint64_t v14 = a2[5];
  long long v17[2] = &protocol witness table for PlaceholderContentView<A>;
  v17[3] = &protocol witness table for ApplyTransitionModifier<A>;
  uint64_t WitnessTable = swift_getWitnessTable();
  Transition.apply<A>(content:phase:)((uint64_t)v11, a1, v13, v8, v14, WitnessTable);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t Transition.apply<A>(content:phase:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v18[0] = a4;
  v18[1] = a6;
  uint64_t v9 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v11 = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for ApplyTransitionModifier();
  uint64_t v13 = *(void *)(v12 - 8);
  double v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)v18 - v15;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v11, v6, a3, v14);
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v16, v11, a3);
  v16[*(int *)(v12 + 36)] = a2;
  View.modifier<A>(_:)(v16, v18[0], v12);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
}

uint64_t type metadata accessor for ApplyTransitionModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t variable initialization expression of CodableOptional.base@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56))(a2, 1, 1, a1);
}

unint64_t lazy protocol witness table accessor for type MakeSection and conformance MakeSection()
{
  unint64_t result = lazy protocol witness table cache variable for type MakeSection and conformance MakeSection;
  if (!lazy protocol witness table cache variable for type MakeSection and conformance MakeSection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MakeSection and conformance MakeSection);
  }
  return result;
}

void type metadata accessor for Attribute<(_:)>()
{
  if (!lazy cache variable for type metadata for Attribute<(_:)>)
  {
    type metadata accessor for (_:)();
    unint64_t v0 = type metadata accessor for Attribute();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<(_:)>);
    }
  }
}

{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Attribute<(_:)>)
  {
    type metadata accessor for (_:)();
    unint64_t v0 = type metadata accessor for Attribute();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<(_:)>);
    }
  }
}

void type metadata accessor for Attribute<UInt32>()
{
  if (!lazy cache variable for type metadata for Attribute<UInt32>)
  {
    unint64_t v0 = type metadata accessor for Attribute();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<UInt32>);
    }
  }
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance CustomModifier<A, B>@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, double *a6@<X8>)
{
  return static CustomModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5[2], a5[3], a5[4], a6);
}

double static CustomModifier._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, double *a8@<X8>)
{
  void (*v26)(uint64_t *__return_ptr, int *, uint64_t *);
  double result;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  int v41;
  int v42;
  uint64_t v43;
  double v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  int v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  long long v84;
  uint64_t v85;
  uint64_t v86;
  long long v87;
  uint64_t v88;
  int v89;
  uint64_t v90;

  unint64_t v90 = *MEMORY[0x263EF8340];
  int v11 = *a1;
  int v12 = *((_DWORD *)a2 + 2);
  uint64_t v13 = a2[2];
  uint64_t v14 = a2[5];
  uint64_t v15 = a2[6];
  int v16 = *((_DWORD *)a2 + 20);
  unint64_t v81 = *a2;
  uint64_t v83 = v13;
  unint64_t v84 = *(_OWORD *)(a2 + 3);
  float64x2_t v85 = v14;
  uint64_t v86 = v15;
  uint64_t v87 = *(_OWORD *)(a2 + 7);
  uint64_t v88 = a2[9];
  uint64_t v82 = v12;
  long long v89 = v16;
  uint64_t v17 = type metadata accessor for PlaceholderContentView();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ViewInputs.pushModifierBody<A>(_:body:)(v17, a3, a4);
  uint64_t v46 = a5;
  uint64_t v47 = a6;
  char v48 = a7;
  LODWORD(v65) = v11;
  uint64_t v37 = a7;
  type metadata accessor for CustomModifier();
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter((void (*)(uint64_t))partial apply for closure #1 in static CustomModifier._makeView(modifier:inputs:body:), a6, &v45);
  char v41 = v45;
  uint64_t v18 = v81;
  uint64_t v19 = v83;
  uint64_t v35 = v84;
  uint64_t v33 = v82;
  uint64_t v34 = DWORD1(v84);
  int v20 = HIDWORD(v84);
  uint64_t v36 = DWORD2(v84);
  uint64_t v21 = v85;
  uint64_t v22 = v86;
  int v23 = v87;
  int v31 = DWORD2(v87);
  int v32 = DWORD1(v87);
  int v24 = HIDWORD(v88);
  uint64_t v29 = v88;
  uint64_t v30 = HIDWORD(v87);
  uint64_t v28 = v89;
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  char v65 = v18;
  unsigned __int8 v67 = v19;
  int v66 = v33;
  uint64_t v68 = v35;
  uint64_t v69 = v34;
  uint64_t v71 = v20;
  CGRect v72 = v21;
  CGRect v73 = v22;
  CGRect v74 = v23;
  CGRect v75 = v32;
  long long v76 = v31;
  id v77 = v30;
  id v78 = v29;
  unint64_t v79 = v24;
  unint64_t v80 = v28;
  char v42 = v41;
  int v49 = v18;
  char v50 = v33;
  uint64_t v51 = v19;
  uint64_t v52 = v35;
  uint64_t v53 = v34;
  char v54 = 0;
  uint64_t v55 = v20;
  CGFloat v56 = v21;
  unsigned __int8 v57 = v22;
  uint64_t v58 = v23;
  uint64_t v59 = v32;
  uint64_t v60 = v31;
  int v61 = v30;
  int v62 = v29;
  int v63 = v24;
  int v64 = v28;
  uint64_t v26 = *(void (**)(uint64_t *__return_ptr, int *, uint64_t *))(v37 + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v26(&v43, &v42, &v49);
  uint64_t v70 = v36;
  if (ShouldRecordTree)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)((uint64_t)&v43, (uint64_t)&v65);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release();
  }
  swift_release();
  swift_release();
  *(void *)a8 = v43;
  unint64_t result = v44;
  a8[1] = v44;
  return result;
}

void (*_LayoutTraits.idealSize.modify(void *a1))(uint64_t *a1)
{
  a1[2] = v1;
  uint64_t v2 = *(void *)(v1 + 32);
  *a1 = *(void *)(v1 + 8);
  a1[1] = v2;
  return _LayoutTraits.idealSize.modify;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance _ShadowEffect(double *a1, uint64_t a2)
{
  double v3 = a1[1];
  double v2 = a1[2];
  double v4 = a1[3];
  double v6 = *(double *)(a2 + 8);
  double v5 = *(double *)(a2 + 16);
  double v7 = *(double *)(a2 + 24);
  if (*(void *)a1 == *(void *)a2)
  {
    if (v3 != v6) {
      return 0;
    }
    return v4 == v7 && v2 == v5;
  }
  char v8 = (*(uint64_t (**)(void))(**(void **)a1 + 88))();
  BOOL result = 0;
  if ((v8 & 1) != 0 && v3 == v6) {
    return v4 == v7 && v2 == v5;
  }
  return result;
}

uint64_t static Font.largeTitle.getter()
{
  return static HierarchicalShapeStyle.sharedPrimary.getter(&one-time initialization token for largeTitle);
}

uint64_t type metadata completion function for FontBox()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

unint64_t *assignWithCopy for ScrapeableAttachmentViewModifier(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  unint64_t v4 = *a2 & 0xF000000000000007;
  if ((~*a1 & 0xF000000000000007) != 0)
  {
    if (v4 == 0xF000000000000007)
    {
      outlined destroy of ScrapeableContent.Content(a1);
      *a1 = *a2;
    }
    else
    {
      outlined copy of ScrapeableContent.Content(*a2);
      unint64_t v6 = *a1;
      *a1 = v3;
      outlined consume of ScrapeableContent.Content(v6);
    }
  }
  else
  {
    if (v4 != 0xF000000000000007) {
      outlined copy of ScrapeableContent.Content(*a2);
    }
    *a1 = v3;
  }
  return a1;
}

unint64_t *initializeBufferWithCopyOfBuffer for ScrapeableAttachmentViewModifier(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  if ((~*a2 & 0xF000000000000007) != 0) {
    outlined copy of ScrapeableContent.Content(*a2);
  }
  *a1 = v3;
  return a1;
}

unint64_t outlined copy of ScrapeableContent.Content(unint64_t result)
{
  switch(result >> 60)
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
    case 3uLL:
    case 4uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 8uLL:
      uint64_t result = swift_retain();
      break;
    default:
      return result;
  }
  return result;
}

unint64_t outlined consume of ScrapeableContent.Content(unint64_t result)
{
  switch(result >> 60)
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
    case 3uLL:
    case 4uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 8uLL:
      uint64_t result = swift_release();
      break;
    default:
      return result;
  }
  return result;
}

SwiftUI::Time_optional __swiftcall ViewRendererHost.renderAsync(interval:targetTimestamp:)(Swift::Double interval, SwiftUI::Time_optional targetTimestamp)
{
  uint64_t v5 = v3;
  uint64_t v6 = v2;
  uint64_t v8 = v4;
  uint64_t v9 = **(void **)&targetTimestamp.is_nil;
  char v10 = *(unsigned char *)(*(void *)&targetTimestamp.is_nil + 8);
  if (one-time initialization token for lockAssertionsAreEnabled != -1) {
    swift_once();
  }
  if (lockAssertionsAreEnabled)
  {
    if (one-time initialization token for _lock != -1) {
      swift_once();
    }
    if (!_MovableLockIsOwner(static Update._lock))
    {
      unsigned __int8 v11 = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      goto LABEL_17;
    }
  }
  unsigned __int8 v11 = (*(void *(**)(uint64_t (**__return_ptr)(), uint64_t, uint64_t))(v5 + 80))(&v34, v6, v5);
  if ((_BYTE)v34) {
    goto LABEL_11;
  }
  unsigned __int8 v11 = (*(void *(**)(uint64_t (**__return_ptr)(), uint64_t, uint64_t))(v5 + 56))(&v34, v6, v5);
  if ((_WORD)v34) {
    goto LABEL_11;
  }
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(v6, v5);
  swift_beginAccess();
  if (*(void *)(*(void *)(v13 + 144) + 16))
  {
    unsigned __int8 v11 = swift_release();
LABEL_11:
    *(void *)uint64_t v8 = 0;
    *(unsigned char *)(v8 + 8) = 1;
    goto LABEL_17;
  }
  specialized static Update.begin()();
  uint64_t v14 = (void (*)(uint64_t (**)(), void))(*(uint64_t (**)(uint64_t (**)(), uint64_t, uint64_t))(v5 + 40))(&v34, v6, v5);
  *uint64_t v15 = *v15 + interval;
  v14(&v34, 0);
  (*(void (**)(uint64_t (**__return_ptr)(), uint64_t, uint64_t))(v5 + 24))(&v34, v6, v5);
  int v16 = v34;
  LOBYTE(v34) = 2;
  int v23 = *(void (**)(uint64_t (**)(), uint64_t, uint64_t))(v5 + 88);
  v23(&v34, v6, v5);
  uint64_t v30 = v16;
  ViewGraph.updateOutputsAsync(at:)((double *)&v30, &v34);
  uint64_t v17 = v34;
  if (v34)
  {
    __int16 v18 = v35;
    unint64_t v21 = v35 >> 16;
    uint64_t v22 = v36;
    swift_beginAccess();
    uint64_t v19 = *(void *)(v13 + 376);
    ++static DisplayList.Version.lastValue;
    uint64_t v30 = v17;
    __int16 v31 = v18;
    char v32 = v21;
    uint64_t v28 = v19;
    uint64_t v29 = v16;
    char v27 = v10;
    uint64_t v25 = v22;
    uint64_t v26 = v9;
    uint64_t v24 = static DisplayList.Version.lastValue;
    ViewRendererHost.renderDisplayList(_:asynchronously:time:nextTime:targetTimestamp:version:maxVersion:)((uint64_t)&v30, 1, &v29, &v28, (uint64_t)&v26, &v25, &v24, v6, &v33, v5);
    swift_bridgeObjectRelease();
    uint64_t v20 = v33;
    LOBYTE(v30) = 0;
    v23(&v30, v6, v5);
    *(void *)uint64_t v8 = v20;
    *(unsigned char *)(v8 + 8) = 0;
  }
  else
  {
    LOBYTE(v34) = 0;
    v23(&v34, v6, v5);
    *(void *)uint64_t v8 = 0;
    *(unsigned char *)(v8 + 8) = 1;
  }
  static Update.end()();
  unsigned __int8 v11 = swift_release();
LABEL_17:
  result.Swift::UInt value = *(SwiftUI::Time *)&v12;
  result.is_nil = v11;
  return result;
}

void *ViewRendererHost.renderDisplayList(_:asynchronously:time:nextTime:targetTimestamp:version:maxVersion:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t (**a3)()@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t *a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10)
{
  void *(*v21)(uint64_t (**__return_ptr)(), unint64_t, unint64_t, uint64_t, uint64_t);
  void *result;
  uint64_t (*v23)();
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)();
  uint64_t (*v27)();
  __int16 v28;
  char v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t ObjectType;
  uint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  int CurrentAttribute;
  uint64_t v44;
  char isEscapingClosureAtFileLocation;
  void v46[4];
  uint64_t (*v47)();
  uint64_t v48;
  uint64_t (*v49)();
  uint64_t (*v50)();
  uint64_t (*v51)();
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t (*v58)();
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t (*v66)();
  uint64_t (*v67)();
  uint64_t v68;
  id v69;
  int v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  char v74;
  uint64_t v75;

  CGRect v75 = *MEMORY[0x263EF8340];
  uint64_t v58 = *(uint64_t (**)())a1;
  int v13 = *(unsigned __int8 *)(a1 + 10);
  uint64_t v59 = *(unsigned __int16 *)(a1 + 8);
  uint64_t v60 = v13;
  uint64_t v14 = *a3;
  uint64_t v15 = *a4;
  uint64_t v16 = *(void *)a5;
  char v17 = *(unsigned char *)(a5 + 8);
  uint64_t v18 = *a7;
  int v61 = *a6;
  int v62 = v18;
  unint64_t v19 = type metadata accessor for ViewGraphRenderDelegate();
  uint64_t v20 = *(void *)(a10 + 8);
  unint64_t v21 = *(void *(**)(uint64_t (**__return_ptr)(), unint64_t, unint64_t, uint64_t, uint64_t))(v20 + 16);
  SwiftUI::Time_optional result = v21(&v67, v19, v19, a8, v20);
  if (!v67) {
    goto LABEL_8;
  }
  int v23 = v67;
  unsigned __int8 v57 = a9;
  uint64_t v24 = v68;
  uint64_t v25 = type metadata accessor for DisplayList.ViewRenderer();
  v21(&v67, v25, v25, a8, v20);
  uint64_t v26 = v67;
  if (!v67)
  {
    SwiftUI::Time_optional result = (void *)swift_unknownObjectRelease();
    a9 = v57;
LABEL_8:
    if (one-time initialization token for infinity != -1) {
      SwiftUI::Time_optional result = (void *)swift_once();
    }
    *a9 = static Time.infinity;
    return result;
  }
  if (a2)
  {
    char v27 = v58;
    unsigned __int8 v67 = v58;
    uint64_t v28 = v59;
    uint64_t v29 = v60;
    LOWORD(v68) = v59;
    BYTE2(v68) = v60;
    char v65 = v15;
    int v66 = v14;
    uint64_t v71 = v16;
    CGRect v72 = v17;
    __int16 v31 = v61;
    uint64_t v30 = (uint64_t *)v62;
    int v63 = v62;
    int v64 = v61;
    char v32 = DisplayList.ViewRenderer.renderAsync(to:time:nextTime:targetTimestamp:version:maxVersion:)((uint64_t)&v67, (double *)&v66, (double *)&v65, &v71, &v64, &v63, (uint64_t)&v73);
    if ((v74 & 1) == 0)
    {
      uint64_t v40 = v73;
      swift_release();
      SwiftUI::Time_optional result = (void *)swift_unknownObjectRelease();
      *unsigned __int8 v57 = v40;
      return result;
    }
    CGFloat v56 = (uint64_t)&v56;
    CGRect v73 = v15;
    MEMORY[0x270FA5388](v32);
    v46[2] = &v73;
    v46[3] = v23;
    uint64_t v47 = (uint64_t (*)())v24;
    LOBYTE(v48) = 1;
    int v49 = v26;
    char v50 = v27;
    LOWORD(v51) = v28;
    BYTE2(v51) = v29;
    uint64_t v52 = (uint64_t)v14;
    uint64_t v53 = v15;
    char v54 = v31;
    uint64_t v55 = v30;
    if (objc_msgSend(self, sel_isMainThread))
    {
      unsigned __int8 v67 = 0;
      LOBYTE(v68) = 0;
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t (**)(), uint64_t, uint64_t))(v24 + 16))(&v67, ObjectType, v24);
      int v66 = v67;
      uint64_t v34 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 8))(ObjectType, v24);
      unint64_t v35 = MEMORY[0x270FA5388](v34);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t (*)(), double))(v24 + 24))(&v71, 1, partial apply for closure #1 in renderOnMainThread #1 <A>() in ViewRendererHost.renderDisplayList(_:asynchronously:time:nextTime:targetTimestamp:version:maxVersion:), v35);
      swift_unknownObjectRelease();
      CGRect v73 = v71;
      swift_release();
      SwiftUI::Time_optional result = (void *)swift_unknownObjectRelease();
    }
    else
    {
      char v41 = swift_allocObject();
      *(void *)(v41 + 16) = partial apply for closure #1 in ViewRendererHost.renderDisplayList(_:asynchronously:time:nextTime:targetTimestamp:version:maxVersion:);
      *(void *)(v41 + 24) = v46;
      char v42 = (id)AGSubgraphGetCurrent();
      int CurrentAttribute = AGGraphGetCurrentAttribute();
      unsigned __int8 v67 = partial apply for closure #1 in Transaction.addAnimationListener(allFinished:);
      uint64_t v68 = v41;
      uint64_t v69 = v42;
      uint64_t v70 = CurrentAttribute;
      char v44 = one-time initialization token for _lock;
      swift_retain();
      if (v44 != -1) {
        swift_once();
      }
      _MovableLockSyncMain(static Update._lock, (uint64_t)&v67, (void (*)(uint64_t))@objc closure #1 in closure #1 in closure #1 in static Update.syncMain(_:));
      swift_release();

      char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
      swift_release();
      swift_unknownObjectRelease();
      SwiftUI::Time_optional result = (void *)swift_release();
      if (isEscapingClosureAtFileLocation) {
        __break(1u);
      }
    }
  }
  else
  {
    unsigned __int8 v67 = 0;
    LOBYTE(v68) = 0;
    uint64_t v36 = swift_getObjectType();
    (*(void (**)(uint64_t (**)(), uint64_t, uint64_t))(v24 + 16))(&v67, v36, v24);
    uint64_t v71 = (uint64_t)v67;
    uint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 8))(v36, v24);
    uint64_t v38 = MEMORY[0x270FA5388](v37);
    uint64_t v47 = v26;
    char v48 = v39;
    int v49 = v58;
    LOWORD(v50) = v59;
    BYTE2(v50) = v60;
    uint64_t v51 = v14;
    uint64_t v52 = v15;
    uint64_t v53 = v61;
    char v54 = v62;
    uint64_t v55 = &v71;
    (*(void (**)(uint64_t *__return_ptr, void, uint64_t (*)(), double))(v24 + 24))(&v73, 0, partial apply for closure #1 in renderOnMainThread #1 <A>() in ViewRendererHost.renderDisplayList(_:asynchronously:time:nextTime:targetTimestamp:version:maxVersion:), v38);
    swift_release();
    swift_unknownObjectRelease();
    SwiftUI::Time_optional result = (void *)swift_unknownObjectRelease();
  }
  *unsigned __int8 v57 = v73;
  return result;
}

uint64_t type metadata accessor for DisplayList.ViewRenderer()
{
  return self;
}

unint64_t type metadata accessor for ViewGraphRenderDelegate()
{
  unint64_t result = lazy cache variable for type metadata for ViewGraphRenderDelegate;
  if (!lazy cache variable for type metadata for ViewGraphRenderDelegate)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for ViewGraphRenderDelegate);
  }
  return result;
}

uint64_t protocol witness for ViewGraphDelegate.as<A>(_:) in conformance ImageRendererHost<A>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return ViewGraphDelegate.as<A>(_:)(a1, a2);
}

uint64_t ViewGraphDelegate.as<A>(_:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56))(a2, 1, 1, a1);
}

void ViewGraph.updateOutputsAsync(at:)(double *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = v2;
  v24[0] = *a1;
  ViewGraph.beginNextUpdate(at:)(v24);
  int Attribute = AGWeakAttributeGetAttribute();
  int v6 = *MEMORY[0x263F288F8];
  if (Attribute == *MEMORY[0x263F288F8]
    || (~AGGraphGetValueState() & 0x11) == 0
    || (swift_beginAccess(), AGWeakAttributeGetAttribute() == v6)
    || (~AGGraphGetValueState() & 0x11) == 0
    || (swift_beginAccess(), *(void *)(*(void *)(v3 + 352) + 16))
    && (AGWeakAttributeGetAttribute() == v6 || (~AGGraphGetValueState() & 0x11) == 0))
  {
LABEL_18:
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    double v7 = (uint64_t *)(v3 + 216);
    swift_beginAccess();
    int v8 = *(_DWORD *)(v3 + 228);
    if (v8)
    {
      uint64_t v9 = *v7;
      if (*v7)
      {
        int v10 = 0;
        int v11 = v8 - 1;
        while (1)
        {
          int v13 = (uint64_t *)(v9 + v10);
          if (v11) {
            v10 += *((_DWORD *)v13 + 2);
          }
          else {
            int v10 = 0;
          }
          uint64_t v14 = *v13;
          unint64_t v21 = v13;
          char v15 = (*(uint64_t (**)(uint64_t **, uint64_t))(v14 + 144))(&v21, v3);
          if (v15 == 2)
          {
            *((_DWORD *)v13 + 3) |= 2u;
          }
          else
          {
            *((_DWORD *)v13 + 3) &= ~2u;
            if ((v15 & 1) == 0) {
              goto LABEL_18;
            }
          }
          if (!(v11-- | v10)) {
            goto LABEL_20;
          }
        }
      }
    }
    else
    {
LABEL_20:
      unint64_t v21 = 0;
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      uint64_t v16 = swift_beginAccess();
      if (*(void *)(v3 + 16))
      {
        MEMORY[0x270FA5388](v16);
        id v18 = v17;
        AGGraphWithMainThreadHandler();

        if (v21)
        {
          uint64_t v19 = v23;
          uint64_t v20 = v22 & 0xFFFFFF;
          *a2 = v21;
          a2[1] = v20;
          a2[2] = v19;
          return;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
    }
    __break(1u);
  }
}

uint64_t static ViewGraphFeatureBuffer._VTable.allowsAsyncUpdate(elt:graph:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(v2 + 168);
  _UnsafeHeterogeneousBuffer_Element.body<A>(as:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 + 176) + 40))(a2, v4);
}

uint64_t DisplayList.ViewRenderer.renderAsync(to:time:nextTime:targetTimestamp:version:maxVersion:)@<X0>(uint64_t result@<X0>, double *a2@<X1>, double *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X8>)
{
  void (*v18)(double *__return_ptr, uint64_t *, double *, uint64_t *, uint64_t *, uint64_t *, uint64_t, uint64_t);
  double v19;
  char v20;
  double v21;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  uint64_t ObjectType;
  uint64_t v27;
  __int16 v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  double v34;
  double v35;
  char v36;

  if ((*(unsigned char *)(v7 + 80) & 1) != 0 || !*(void *)(v7 + 64))
  {
    *(void *)a7 = 0;
    goto LABEL_6;
  }
  uint64_t v25 = *(void *)result;
  __int16 v9 = *(_WORD *)(result + 8);
  char v10 = *(unsigned char *)(result + 10);
  double v11 = *a2;
  double v12 = *a3;
  uint64_t v13 = *a4;
  char v14 = *((unsigned char *)a4 + 8);
  uint64_t v15 = *a5;
  uint64_t v16 = *a6;
  uint64_t v17 = *(void *)(v7 + 72);
  uint64_t ObjectType = swift_getObjectType();
  char v27 = v25;
  uint64_t v28 = v9;
  uint64_t v29 = v10;
  uint64_t v34 = v11;
  __int16 v31 = v15;
  char v32 = v13;
  uint64_t v33 = v14;
  uint64_t v30 = v16;
  id v18 = *(void (**)(double *__return_ptr, uint64_t *, double *, uint64_t *, uint64_t *, uint64_t *, uint64_t, uint64_t))(v17 + 32);
  swift_unknownObjectRetain();
  v18(&v35, &v27, &v34, &v32, &v31, &v30, ObjectType, v17);
  uint64_t v19 = v35;
  if (v36)
  {
    unint64_t result = swift_unknownObjectRelease();
    *(double *)a7 = v19;
LABEL_6:
    uint64_t v20 = 1;
    goto LABEL_7;
  }
  unint64_t v21 = v35;
  if (v12 < v35) {
    unint64_t v21 = v12;
  }
  uint64_t v22 = v21 - v11;
  swift_beginAccess();
  uint64_t v23 = *(double *)(v7 + 32);
  unint64_t result = swift_unknownObjectRelease();
  uint64_t v20 = 0;
  if (v23 > v22) {
    uint64_t v24 = v23;
  }
  else {
    uint64_t v24 = v22;
  }
  *(double *)a7 = v11 + v24;
LABEL_7:
  *(unsigned char *)(a7 + 8) = v20;
  return result;
}

uint64_t DisplayList.ViewUpdater.renderAsync(to:time:targetTimestamp:version:maxVersion:)@<X0>(uint64_t result@<X0>, double *a2@<X1>, void *a3@<X3>, uint64_t *a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v8 = *(void *)result;
  int v9 = *(unsigned __int16 *)(result + 8);
  int v10 = *(unsigned __int8 *)(result + 10);
  double v11 = *a2;
  uint64_t v12 = *a4;
  if (*(unsigned char *)(v5 + 184) != 1)
  {
LABEL_7:
    swift_beginAccess();
    Swift::Bool value = printTree.value;
    if (printTree.value == 2)
    {
      uint64_t v15 = getenv("SWIFTUI_PRINT_TREE");
      if (!v15)
      {
        printTree.Swift::Bool value = 0;
        swift_endAccess();
        goto LABEL_14;
      }
      int v16 = atoi(v15);
      printTree.Swift::Bool value = v16 != 0;
      swift_endAccess();
      if (!v16) {
        goto LABEL_14;
      }
    }
    else
    {
      swift_endAccess();
      if (!value)
      {
LABEL_14:
        unint64_t v21 = *(void *)(v6 + 176);
        uint64_t v22 = *(void *)(v6 + 152);
        uint64_t v27 = v6;
        unint64_t v28 = v21;
        uint64_t v29 = v12;
        uint64_t v30 = v22;
        uint64_t v23 = v6;
        double v24 = v11;
        uint64_t v25 = v12;
        uint64_t v26 = v22;
        swift_retain_n();
        closure #1 in closure #1 in DisplayList.ViewUpdater.renderAsync(to:time:targetTimestamp:version:maxVersion:)((uint64_t)&v23, (uint64_t)&v27, v6, v8, v9 | (v10 << 16), a5, v11);
        swift_release();
        return swift_release();
      }
    }
    type metadata accessor for _ContiguousArrayStorage<Any>();
    uint64_t v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_2461B9DC0;
    uint64_t v27 = 0;
    unint64_t v28 = 0xE000000000000000;
    _StringGuts.grow(_:)(20);
    v18._countAndFlagsBits = 0x697620636E797341;
    v18._object = (void *)0xEE00207461207765;
    String.append(_:)(v18);
    _print_unlocked<A, B>(_:_:)();
    v19._countAndFlagsBits = 2618;
    v19._object = (void *)0xE200000000000000;
    String.append(_:)(v19);
    uint64_t v23 = v8;
    LOWORD(v24) = v9;
    BYTE2(v24) = v10;
    v20._countAndFlagsBits = DisplayList.description.getter();
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    *(void *)(v17 + 56) = MEMORY[0x263F8D310];
    *(void *)(v17 + 32) = 0;
    *(void *)(v17 + 40) = 0xE000000000000000;
    print(_:separator:terminator:)();
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  if (*a3)
  {
    if (*(unsigned __int16 *)(v5 + 142) != ((unsigned __int16)(2 * ((33 * WORD1(*a3)) ^ *a3)) | 1)) {
      goto LABEL_7;
    }
  }
  else if (*(_WORD *)(v5 + 142))
  {
    goto LABEL_7;
  }
  double v13 = *(double *)(v5 + 144);
  if (v13 < v11) {
    goto LABEL_7;
  }
  *(double *)a5 = v13;
  *(unsigned char *)(a5 + 8) = 0;
  return result;
}

uint64_t closure #1 in closure #1 in DisplayList.ViewUpdater.renderAsync(to:time:targetTimestamp:version:maxVersion:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int a5@<W4>, uint64_t a6@<X8>, double a7@<D0>)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  if (one-time initialization token for normal != -1) {
    swift_once();
  }
  uint64_t v12 = static GraphicsBlendMode.normal;
  char v13 = byte_26B0EB4A0;
  *(void *)&long long v41 = a2;
  DWORD2(v41) = 1065353216;
  *(void *)&long long v42 = static GraphicsBlendMode.normal;
  BYTE8(v42) = byte_26B0EB4A0;
  long long v43 = 0x3FF0000000000000uLL;
  *(void *)&long long v44 = 0;
  *((void *)&v44 + 1) = 0x3FF0000000000000;
  long long v45 = 0uLL;
  uint64_t v14 = MEMORY[0x263F8EE78];
  *(void *)&long long v46 = MEMORY[0x263F8EE78];
  *((void *)&v46 + 1) = MEMORY[0x263F8EE78];
  HIDWORD(v47) = 0;
  *(void *)&long long v47 = 0;
  *(_DWORD *)((char *)&v47 + 7) = 0;
  memset(&v48[8], 0, 56);
  *(void *)char v48 = MEMORY[0x263F8EE78];
  *(void *)&long long v33 = a1;
  DWORD2(v33) = 1065353216;
  *(void *)&long long v34 = static GraphicsBlendMode.normal;
  BYTE8(v34) = byte_26B0EB4A0;
  long long v35 = 0x3FF0000000000000uLL;
  *(void *)&long long v36 = 0;
  *((void *)&v36 + 1) = 0x3FF0000000000000;
  long long v37 = 0uLL;
  *(void *)&long long v38 = MEMORY[0x263F8EE78];
  *((void *)&v38 + 1) = MEMORY[0x263F8EE78];
  HIDWORD(v39) = 0;
  *(void *)&long long v39 = 0;
  *(_DWORD *)((char *)&v39 + 7) = 0;
  memset(&v40[8], 0, 56);
  *(void *)uint64_t v40 = MEMORY[0x263F8EE78];
  swift_beginAccess();
  *(void *)(a3 + 104) = 0;
  *(void *)(a3 + 112) = 0;
  *(unsigned char *)(a3 + 120) = 0;
  *(unsigned char *)(a3 + 185) = *(unsigned char *)(a3 + 184);
  *(unsigned char *)(a3 + 184) = 1;
  __int16 v15 = *(_WORD *)(a3 + 168);
  char v16 = *(unsigned char *)(a3 + 170);
  uint64_t v25 = *(void *)(a3 + 160);
  __int16 v26 = v15;
  char v27 = v16;
  uint64_t v28 = a4;
  __int16 v22 = a5;
  __int16 v29 = a5;
  unsigned int v17 = HIWORD(a5);
  char v30 = v17;
  outlined copy of GraphicsBlendMode(v12, v13);
  outlined copy of GraphicsBlendMode(v12, v13);
  swift_bridgeObjectRetain();
  DisplayList.ViewUpdater.updateAsync(oldList:oldParentState:newList:newParentState:)(&v25, &v41, &v28, &v33, (uint64_t)&v31);
  swift_bridgeObjectRelease();
  v49[8] = *(_OWORD *)&v40[16];
  v49[9] = *(_OWORD *)&v40[32];
  v49[10] = *(_OWORD *)&v40[48];
  v49[4] = v37;
  v49[5] = v38;
  v49[6] = v39;
  v49[7] = *(_OWORD *)v40;
  v49[0] = v33;
  v49[1] = v34;
  long long v49[2] = v35;
  v49[3] = v36;
  v50[8] = *(_OWORD *)&v48[16];
  v50[9] = *(_OWORD *)&v48[32];
  v50[10] = *(_OWORD *)&v48[48];
  v50[4] = v45;
  v50[5] = v46;
  v50[6] = v47;
  v50[7] = *(_OWORD *)v48;
  v50[0] = v41;
  v50[1] = v42;
  v50[2] = v43;
  v50[3] = v44;
  uint64_t v18 = v31;
  char v19 = v32;
  if (v32)
  {
    *(void *)(a3 + 80) = MEMORY[0x263F8EE80];
    *(void *)(a3 + 96) = v14;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a3 + 184) = *(unsigned char *)(a3 + 185);
  }
  else
  {
    swift_beginAccess();
    Swift::String v20 = &v28;
    DisplayList.ViewUpdater.ViewCache.commitAsyncValues(targetTimestamp:)(*(SwiftUI::Time_optional *)(&v20 - 1));
    swift_endAccess();
    *(void *)(a3 + 160) = a4;
    *(_WORD *)(a3 + 168) = v22;
    *(unsigned char *)(a3 + 170) = v17;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(double *)(a3 + 176) = a7;
    *(_WORD *)(a3 + 142) = *(_WORD *)(a3 + 140);
    *(void *)(a3 + 144) = v18;
  }
  outlined release of DisplayList.ViewUpdater.Model.State((uint64_t)v49);
  uint64_t result = outlined release of DisplayList.ViewUpdater.Model.State((uint64_t)v50);
  *(void *)a6 = v18;
  *(unsigned char *)(a6 + 8) = v19;
  return result;
}

void DisplayList.ViewUpdater.updateAsync(oldList:oldParentState:newList:newParentState:)(uint64_t *a1@<X0>, _OWORD *a2@<X1>, uint64_t *a3@<X2>, long long *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7 = *a3;
  uint64_t v53 = *a1;
  uint64_t v57 = *(void *)(*a1 + 16);
  if (v57 == *(void *)(*a3 + 16))
  {
    if (one-time initialization token for infinity != -1) {
      goto LABEL_35;
    }
    while (1)
    {
      double v8 = *(double *)&static Time.infinity;
      if (!v57) {
        break;
      }
      uint64_t v9 = 0;
      unint64_t v10 = 0;
      char v48 = (uint64_t *)(v5 + 104);
      uint64_t v49 = v7;
      uint64_t v50 = v5;
      uint64_t v51 = a5;
      while (1)
      {
        uint64_t v11 = *(void *)(v53 + v9 + 32);
        uint64_t v12 = *(void *)(v53 + v9 + 40);
        uint64_t v13 = *(void *)(v53 + v9 + 48);
        uint64_t v14 = *(void *)(v53 + v9 + 56);
        uint64_t v15 = *(void *)(v53 + v9 + 64);
        uint64_t v16 = *(void *)(v53 + v9 + 72);
        unint64_t v17 = *(void *)(v53 + v9 + 80);
        uint64_t v18 = *(void *)(v53 + v9 + 88);
        int v19 = *(unsigned __int8 *)(v53 + v9 + 98);
        int v20 = *(unsigned __int16 *)(v53 + v9 + 96);
        unsigned int v21 = *(_DWORD *)(v53 + v9 + 100);
        *(void *)&long long v91 = v11;
        *((void *)&v91 + 1) = v12;
        *(void *)&long long v92 = v13;
        *((void *)&v92 + 1) = v14;
        uint64_t v93 = v15;
        uint64_t v94 = v16;
        unint64_t v95 = v17;
        uint64_t v96 = v18;
        char v98 = v19;
        __int16 v97 = v20;
        unsigned int v99 = v21;
        if (v10 >= *(void *)(v7 + 16)) {
          break;
        }
        uint64_t v22 = *(void *)(v7 + v9 + 32);
        uint64_t v23 = *(void *)(v7 + v9 + 40);
        uint64_t v24 = *(void *)(v7 + v9 + 48);
        uint64_t v25 = *(void *)(v7 + v9 + 56);
        uint64_t v26 = *(void *)(v7 + v9 + 64);
        uint64_t v27 = *(void *)(v7 + v9 + 72);
        unint64_t v28 = *(void *)(v7 + v9 + 80);
        uint64_t v29 = *(void *)(v7 + v9 + 88);
        int v30 = *(unsigned __int8 *)(v7 + v9 + 98);
        int v31 = *(unsigned __int16 *)(v7 + v9 + 96);
        unsigned int v32 = *(_DWORD *)(v7 + v9 + 100);
        *(void *)&long long v82 = v22;
        *((void *)&v82 + 1) = v23;
        *(void *)&long long v83 = v24;
        *((void *)&v83 + 1) = v25;
        uint64_t v84 = v26;
        uint64_t v85 = v27;
        unint64_t v86 = v28;
        uint64_t v87 = v29;
        char v89 = v30;
        __int16 v88 = v31;
        unsigned int v90 = v32;
        if (v32 != v21) {
          goto LABEL_30;
        }
        unint64_t v59 = v10;
        uint64_t v60 = v9;
        *(void *)&long long v73 = v22;
        *((void *)&v73 + 1) = v23;
        *(void *)&long long v74 = v24;
        *((void *)&v74 + 1) = v25;
        uint64_t v75 = v26;
        uint64_t v76 = v27;
        unint64_t v77 = v28;
        uint64_t v78 = v29;
        __int16 v79 = v31;
        char v80 = (v31 | (v30 << 16)) >> 16;
        unsigned int v81 = v21;
        *(void *)&long long v64 = v11;
        *((void *)&v64 + 1) = v12;
        *(void *)&long long v65 = v13;
        *((void *)&v65 + 1) = v14;
        uint64_t v66 = v15;
        uint64_t v67 = v16;
        unint64_t v68 = v17;
        uint64_t v69 = v18;
        char v71 = (v20 | (v19 << 16)) >> 16;
        __int16 v70 = v20;
        unsigned int v72 = v21;
        outlined copy of DisplayList.Item.Value(v16, v17);
        outlined copy of DisplayList.Item.Value(v27, v28);
        if (!DisplayList.Item.matchesTopLevelStructure(of:)((uint64_t)&v64))
        {
          outlined consume of DisplayList.Item.Value(v27, v28);
          outlined consume of DisplayList.Item.Value(v16, v17);
          *(void *)uint64_t v51 = 0;
          *(unsigned char *)(v51 + 8) = 1;
          return;
        }
        swift_beginAccess();
        if (v21)
        {
          int v33 = 0;
          uint64_t v34 = v50;
          unsigned int v35 = *(_DWORD *)(v50 + 112);
          int v54 = *(_DWORD *)(v50 + 108);
          unsigned int v55 = *(_DWORD *)(v50 + 104);
          unsigned int v36 = *(_DWORD *)(v50 + 116);
          char v58 = *(unsigned char *)(v50 + 120);
          char v37 = 1;
          *(_DWORD *)(v50 + 104) = v21;
          *(_DWORD *)(v50 + 108) = 0;
        }
        else
        {
          char v37 = 0;
          uint64_t v34 = v50;
          unsigned int v21 = *(_DWORD *)(v50 + 104);
          int v33 = *(_DWORD *)(v50 + 108) + 1;
          *(_DWORD *)(v50 + 108) = v33;
          unsigned int v35 = *(_DWORD *)(v50 + 112);
          unsigned int v36 = *(_DWORD *)(v50 + 116);
          char v58 = *(unsigned char *)(v50 + 120);
          int v54 = v33;
          unsigned int v55 = v21;
        }
        *(unsigned char *)(v34 + 120) = v37;
        DisplayList.ViewUpdater.ViewCache.prepare(item:parentState:)((uint64_t)&v91, (uint64_t)a2, (uint64_t *)&v64);
        double v38 = *(double *)&v64;
        *(_DWORD *)(v34 + 104) = v21;
        *(_DWORD *)(v34 + 108) = v33;
        unsigned int v56 = v36;
        *(_DWORD *)(v34 + 112) = v35;
        *(_DWORD *)(v34 + 116) = v36;
        *(unsigned char *)(v34 + 120) = v37;
        DisplayList.ViewUpdater.ViewCache.prepare(item:parentState:)((uint64_t)&v82, (uint64_t)a4, (uint64_t *)&v64);
        swift_endAccess();
        double v39 = *(double *)&v64;
        uint64_t v40 = v94;
        unint64_t v41 = v95;
        long long v73 = v91;
        long long v74 = v92;
        uint64_t v75 = v93;
        uint64_t v76 = v94;
        unint64_t v77 = v95;
        uint64_t v78 = v96;
        char v80 = v98;
        __int16 v79 = v97;
        unsigned int v81 = v99;
        uint64_t v5 = v34;
        uint64_t v42 = v85;
        unint64_t v43 = v86;
        long long v64 = v82;
        long long v65 = v83;
        uint64_t v66 = v84;
        uint64_t v67 = v85;
        unint64_t v68 = v86;
        uint64_t v69 = v87;
        char v71 = v89;
        __int16 v70 = v88;
        unsigned int v72 = v90;
        outlined copy of DisplayList.Item.Value(v94, v95);
        outlined copy of DisplayList.Item.Value(v42, v43);
        DisplayList.ViewUpdater.updateInheritedViewAsync(oldItem:oldParentState:newItem:newParentState:)(&v73, a2, &v64, a4, &v62);
        outlined consume of DisplayList.Item.Value(v42, v43);
        outlined consume of DisplayList.Item.Value(v40, v41);
        outlined consume of DisplayList.Item.Value(v42, v43);
        outlined consume of DisplayList.Item.Value(v40, v41);
        if (v63)
        {
          *(double *)uint64_t v51 = v62;
          *(unsigned char *)(v51 + 8) = 1;
          *(void *)&long long v73 = __PAIR64__(v54, v55);
          *((void *)&v73 + 1) = __PAIR64__(v56, v35);
          LOBYTE(v74) = v58;
          DisplayList.Index.leave(index:)((uint64_t)&v73, v44);
          return;
        }
        if (v38 >= v8) {
          double v45 = v8;
        }
        else {
          double v45 = v38;
        }
        if (v39 < v45) {
          double v45 = v39;
        }
        if (v45 <= v62) {
          double v8 = v45;
        }
        else {
          double v8 = v62;
        }
        char v46 = *(unsigned char *)(v5 + 120);
        a5 = v51;
        uint64_t v7 = v49;
        if ((v46 & 0xC) != 0)
        {
          uint64_t v47 = *v48;
          if ((*(unsigned char *)(v5 + 120) & 4) != 0) {
            *(void *)(v5 + 104) = *(void *)(v5 + 112);
          }
          if ((v46 & 8) != 0) {
            *(void *)(v5 + 112) = v47;
          }
        }
        if (v46)
        {
          *(_DWORD *)(v5 + 104) = v55;
          *(_DWORD *)(v5 + 108) = v54;
        }
        if ((v46 & 2) != 0)
        {
          *(_DWORD *)(v5 + 112) = v35;
          *(_DWORD *)(v5 + 116) = v56;
        }
        unint64_t v10 = v59 + 1;
        *(unsigned char *)(v5 + 120) = v58;
        uint64_t v9 = v60 + 72;
        if (v57 == v59 + 1) {
          goto LABEL_31;
        }
      }
      __break(1u);
LABEL_35:
      swift_once();
      uint64_t v57 = *(void *)(v53 + 16);
    }
LABEL_31:
    *(double *)a5 = v8;
    *(unsigned char *)(a5 + 8) = 0;
  }
  else
  {
LABEL_30:
    *(void *)a5 = 0;
    *(unsigned char *)(a5 + 8) = 1;
  }
}

uint64_t DisplayList.ViewUpdater.updateInheritedViewAsync(oldItem:oldParentState:newItem:newParentState:)@<X0>(long long *a1@<X0>, _OWORD *a2@<X1>, long long *a3@<X2>, long long *a4@<X3>, void *a5@<X8>)
{
  uint64_t v142 = a5;
  uint64_t v243 = *MEMORY[0x263EF8340];
  _s7SwiftUI11DisplayListV10ArchiveIDsVSgMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for DisplayList.ArchiveIDs?, (void (*)(uint64_t))type metadata accessor for DisplayList.ArchiveIDs);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v140 = (uint64_t)&v135 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v139 = (uint64_t)&v135 - v12;
  long long v13 = *a1;
  long long v216 = a1[1];
  long long v14 = a2[1];
  v222[0] = *a2;
  v222[1] = v14;
  long long v15 = a2[3];
  long long v16 = a2[5];
  long long v225 = a2[4];
  long long v226 = v16;
  long long v17 = a2[3];
  long long v18 = *a2;
  long long v19 = a2[1];
  long long v223 = a2[2];
  long long v224 = v17;
  long long v20 = a2[9];
  long long v231 = a2[10];
  long long v21 = a2[7];
  long long v22 = a2[9];
  long long v229 = a2[8];
  long long v230 = v22;
  long long v23 = a2[5];
  long long v24 = a2[7];
  long long v227 = a2[6];
  long long v228 = v24;
  long long v212 = v229;
  long long v213 = v20;
  long long v214 = a2[10];
  long long v215 = v13;
  uint64_t v25 = *((void *)a1 + 4);
  uint64_t v26 = *((void *)a1 + 5);
  unint64_t v28 = *((void *)a1 + 6);
  uint64_t v27 = *((void *)a1 + 7);
  unsigned __int8 v29 = *((unsigned char *)a1 + 66);
  unsigned __int16 v30 = *((_WORD *)a1 + 32);
  int v31 = *((_DWORD *)a1 + 17);
  long long v208 = v225;
  long long v209 = v23;
  long long v144 = *a3;
  long long v210 = v227;
  long long v211 = v21;
  uint64_t v32 = *((void *)a3 + 2);
  uint64_t v33 = *((void *)a3 + 3);
  uint64_t v34 = *((void *)a3 + 4);
  uint64_t v149 = *((void *)a3 + 5);
  uint64_t v150 = v34;
  unint64_t v35 = *((void *)a3 + 6);
  unint64_t v147 = *((void *)a3 + 7);
  unint64_t v148 = v35;
  LODWORD(v143) = *((unsigned __int8 *)a3 + 66);
  LODWORD(v145) = *((unsigned __int16 *)a3 + 32);
  LODWORD(v151) = v145 | (v143 << 16);
  LODWORD(v146) = *((_DWORD *)a3 + 17);
  *(void *)&long long v217 = v25;
  *((void *)&v217 + 1) = v26;
  *(void *)&long long v218 = v28;
  *((void *)&v218 + 1) = v27;
  unsigned __int8 v220 = v29;
  unsigned __int16 v219 = v30;
  int v221 = v31;
  long long v204 = v18;
  long long v205 = v19;
  uint64_t v36 = v152;
  long long v206 = v223;
  long long v207 = v15;
  char v141 = (void *)(v152 + 32);
  swift_beginAccess();
  char v37 = *(unsigned char *)(v36 + 120);
  long long v232 = *(_OWORD *)(v36 + 104);
  LOBYTE(v233) = v37;
  outlined copy of DisplayList.Item.Value(v26, v28);
  outlined retain of DisplayList.ViewUpdater.Model.State((uint64_t)v222);
  int v38 = specialized static DisplayList.ViewUpdater.Model.merge(item:index:into:)((uint64_t)&v215, (uint64_t)&v232, (uint64_t)&v204);
  *(void *)&long long v198 = v32;
  *((void *)&v198 + 1) = v33;
  long long v39 = a4[6];
  long long v239 = a4[7];
  long long v40 = a4[7];
  long long v240 = a4[8];
  long long v41 = a4[8];
  long long v241 = a4[9];
  long long v42 = a4[9];
  long long v242 = a4[10];
  long long v43 = a4[2];
  long long v235 = a4[3];
  long long v44 = a4[3];
  long long v236 = a4[4];
  long long v45 = a4[4];
  long long v237 = a4[5];
  long long v46 = a4[5];
  long long v238 = a4[6];
  long long v47 = a4[1];
  long long v232 = *a4;
  long long v48 = *a4;
  long long v233 = a4[1];
  long long v234 = a4[2];
  long long v194 = v41;
  long long v195 = v42;
  long long v196 = a4[10];
  long long v197 = v144;
  long long v190 = v45;
  long long v191 = v46;
  long long v192 = v39;
  long long v193 = v40;
  *(void *)&long long v199 = v150;
  *((void *)&v199 + 1) = v149;
  *(void *)&long long v200 = v148;
  *((void *)&v200 + 1) = v147;
  unsigned __int8 v202 = v143;
  unsigned __int16 v201 = v145;
  int v203 = v146;
  long long v186 = v48;
  long long v187 = v47;
  long long v188 = v43;
  long long v189 = v44;
  char v49 = *(unsigned char *)(v36 + 120);
  uint64_t v150 = v36 + 104;
  long long v175 = *(_OWORD *)(v36 + 104);
  LOBYTE(v176) = v49;
  outlined copy of DisplayList.Item.Value(v149, v148);
  outlined retain of DisplayList.ViewUpdater.Model.State((uint64_t)&v232);
  if (v38 != specialized static DisplayList.ViewUpdater.Model.merge(item:index:into:)((uint64_t)&v197, (uint64_t)&v175, (uint64_t)&v186))
  {
    long long v172 = v194;
    long long v173 = v195;
    long long v174 = v196;
    long long v168 = v190;
    long long v169 = v191;
    long long v170 = v192;
    long long v171 = v193;
    long long v164 = v186;
    long long v165 = v187;
    long long v166 = v188;
    long long v167 = v189;
    outlined release of DisplayList.ViewUpdater.Model.State((uint64_t)&v164);
    long long v183 = v212;
    long long v184 = v213;
    long long v185 = v214;
    long long v179 = v208;
    long long v180 = v209;
    long long v181 = v210;
    long long v182 = v211;
    long long v175 = v204;
    long long v176 = v205;
    long long v177 = v206;
    long long v178 = v207;
    outlined release of DisplayList.ViewUpdater.Model.State((uint64_t)&v175);
    uint64_t v66 = v142;
    *uint64_t v142 = 0;
    *((unsigned char *)v66 + 8) = 1;
LABEL_54:
    outlined consume of DisplayList.Item.Value(*((uint64_t *)&v199 + 1), v200);
    uint64_t v125 = *((void *)&v217 + 1);
    unint64_t v126 = v218;
    return outlined consume of DisplayList.Item.Value(v125, v126);
  }
  if ((v38 & 2) == 0)
  {
    if ((v38 & 4) != 0) {
      goto LABEL_13;
    }
    swift_beginAccess();
    long long v50 = v197;
    long long v51 = v198;
    long long v52 = v199;
    long long v53 = v200;
    int v54 = v202;
    int v55 = v201;
    int v56 = v203;
    long long v175 = v197;
    long long v176 = v198;
    long long v177 = v199;
    long long v178 = v200;
    BYTE2(v179) = v202;
    LOWORD(v179) = v201;
    DWORD1(v179) = v203;
    DisplayList.Item.features.getter((__int16 *)&v164);
    if (v164)
    {
LABEL_13:
      if (v38)
      {
        swift_beginAccess();
        uint64_t v100 = *((void *)&v217 + 1);
        unint64_t v101 = v218;
        LODWORD(v151) = v219 | (v220 << 16);
        long long v175 = v215;
        long long v176 = v216;
        long long v177 = v217;
        long long v178 = v218;
        BYTE2(v179) = v220;
        LOWORD(v179) = v219;
        DWORD1(v179) = v221;
        swift_beginAccess();
        uint64_t v102 = *((void *)&v199 + 1);
        unint64_t v103 = v200;
        long long v164 = v197;
        long long v165 = v198;
        long long v166 = v199;
        long long v167 = v200;
        BYTE2(v168) = v202;
        LOWORD(v168) = v201;
        DWORD1(v168) = v203;
        outlined copy of DisplayList.Item.Value(v100, v101);
        outlined copy of DisplayList.Item.Value(v102, v103);
        DisplayList.ViewUpdater.updateItemViewAsync(oldItem:oldState:newItem:newState:)((uint64_t)&v175, (uint64_t)&v204, (uint64_t)&v164, (uint64_t)&v186, (uint64_t)v142);
        outlined consume of DisplayList.Item.Value(v102, v103);
        outlined consume of DisplayList.Item.Value(v100, v101);
      }
      else
      {
        swift_beginAccess();
        uint64_t v90 = *((void *)&v217 + 1);
        long long v91 = v218;
        int v92 = v219 | (v220 << 16);
        swift_beginAccess();
        uint64_t v93 = *((void *)&v199 + 1);
        unint64_t v94 = v200;
        if ((unint64_t)v91 >> 62 == 1 && (v200 & 0xC000000000000000) == 0x4000000000000000)
        {
          *(void *)&long long v175 = *((void *)&v91 + 1);
          WORD4(v175) = v92;
          BYTE10(v175) = BYTE2(v92);
          *(void *)&long long v164 = *((void *)&v200 + 1);
          WORD4(v164) = v201;
          BYTE10(v164) = v202;
          outlined copy of DisplayList.Item.Value(v90, v91);
          outlined copy of DisplayList.Item.Value(v93, v94);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v151 = v93;
          DisplayList.ViewUpdater.updateAsync(oldList:oldParentState:newList:newParentState:)(v142, &v175, &v204, &v164, &v186);
          outlined consume of DisplayList.Item.Value(v90, v91);
          outlined consume of DisplayList.Item.Value(v151, v94);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          outlined copy of DisplayList.Item.Value(v90, v91);
          outlined copy of DisplayList.Item.Value(v93, v94);
          outlined consume of DisplayList.Item.Value(v90, v91);
          outlined consume of DisplayList.Item.Value(v93, v94);
          if (one-time initialization token for infinity != -1) {
            swift_once();
          }
          long long v111 = v142;
          *uint64_t v142 = static Time.infinity;
          *((unsigned char *)v111 + 8) = 0;
        }
      }
    }
    else
    {
      int v57 = v55 | (v54 << 16);
      swift_beginAccess();
      unint64_t v58 = v218;
      long long v175 = v215;
      long long v176 = v216;
      long long v177 = v217;
      uint64_t v151 = *((void *)&v218 + 1);
      uint64_t v152 = *((void *)&v217 + 1);
      long long v178 = v218;
      LODWORD(v149) = v220;
      BYTE2(v179) = v220;
      LODWORD(v148) = v219;
      LOWORD(v179) = v219;
      DWORD1(v179) = v221;
      DisplayList.Item.features.getter((__int16 *)&v164);
      int v59 = (unsigned __int16)v164;
      long long v175 = v50;
      long long v176 = v51;
      long long v177 = v52;
      long long v178 = v53;
      BYTE2(v179) = BYTE2(v57);
      LOWORD(v179) = v57;
      DWORD1(v179) = v56;
      DisplayList.Item.features.getter((__int16 *)v163);
      if (v59 == LOWORD(v163[0]))
      {
        uint64_t v60 = v142;
        if (v58 >> 62 == 1)
        {
          unint64_t v61 = v58;
          unint64_t v62 = HIDWORD(v58);
          uint64_t v63 = v152;
          *(void *)&long long v175 = v151;
          WORD4(v175) = v148;
          BYTE10(v175) = (v148 | (v149 << 16)) >> 16;
          outlined copy of DisplayList.Effect(v152, v61, v62);
          swift_bridgeObjectRetain();
          DisplayList.Index.skip(list:)((uint64_t *)&v175);
          swift_bridgeObjectRelease();
          swift_beginAccess();
          if (BYTE4(v61) == 1)
          {
            uint64_t v127 = swift_projectBox();
            uint64_t v128 = v140;
            outlined init with copy of DisplayList.ArchiveIDs?(v127, v140);
            uint64_t v129 = type metadata accessor for DisplayList.ArchiveIDs();
            Swift::Bool v130 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v129 - 8) + 48))(v128, 1, v129) != 1;
            DisplayList.Index.updateArchive(entering:)(v130);
            _s7SwiftUI11DisplayListV10ArchiveIDsVSgWOhTm_1(v128, (unint64_t *)&lazy cache variable for type metadata for DisplayList.ArchiveIDs?, (void (*)(uint64_t))type metadata accessor for DisplayList.ArchiveIDs);
          }
          else if (BYTE4(v61) == 7)
          {
            __int16 v64 = *(_WORD *)(v63 + 24);
            char v65 = *(unsigned char *)(v63 + 26);
            *(void *)&long long v164 = *(void *)(v63 + 16);
            WORD4(v164) = v64;
            BYTE10(v164) = v65;
            DisplayList.Index.skip(list:)((uint64_t *)&v164);
          }
          swift_endAccess();
          outlined consume of DisplayList.Effect(v63, v61, v62);
        }
        if (one-time initialization token for infinity != -1) {
          swift_once();
        }
        *uint64_t v60 = static Time.infinity;
        *((unsigned char *)v60 + 8) = 0;
      }
      else
      {
        long long v116 = v142;
        *uint64_t v142 = 0;
        *((unsigned char *)v116 + 8) = 1;
      }
    }
    long long v172 = v194;
    long long v173 = v195;
    long long v174 = v196;
    long long v168 = v190;
    long long v169 = v191;
    long long v170 = v192;
    long long v171 = v193;
    long long v164 = v186;
    long long v165 = v187;
    long long v166 = v188;
    long long v167 = v189;
    outlined release of DisplayList.ViewUpdater.Model.State((uint64_t)&v164);
    long long v183 = v212;
    long long v184 = v213;
    long long v185 = v214;
    long long v179 = v208;
    long long v180 = v209;
    long long v181 = v210;
    long long v182 = v211;
    long long v175 = v204;
    long long v176 = v205;
    long long v177 = v206;
    long long v178 = v207;
    outlined release of DisplayList.ViewUpdater.Model.State((uint64_t)&v175);
    goto LABEL_54;
  }
  int v137 = v38;
  long long v67 = v215;
  long long v68 = v216;
  uint64_t v69 = *((void *)&v217 + 1);
  uint64_t v145 = *((void *)&v218 + 1);
  unint64_t v70 = v218;
  uint64_t v146 = *((void *)&v217 + 1);
  LODWORD(v148) = v219 | (v220 << 16);
  long long v175 = v215;
  long long v176 = v216;
  uint64_t v135 = v217;
  long long v177 = v217;
  long long v178 = v218;
  unint64_t v143 = v218;
  BYTE2(v179) = v220;
  LOWORD(v179) = v219;
  int v136 = v221;
  DWORD1(v179) = v221;
  long long v71 = v197;
  long long v72 = v198;
  uint64_t v73 = *((void *)&v199 + 1);
  long long v74 = v200;
  LODWORD(v151) = v201 | (v202 << 16);
  long long v164 = v197;
  long long v165 = v198;
  uint64_t v138 = v199;
  long long v166 = v199;
  uint64_t v149 = *((void *)&v199 + 1);
  long long v167 = v200;
  BYTE2(v168) = v202;
  LOWORD(v168) = v201;
  LODWORD(v140) = v203;
  DWORD1(v168) = v203;
  uint64_t v75 = v141;
  *(void *)&long long v144 = *v141;
  swift_beginAccess();
  uint64_t v76 = v69;
  unint64_t v77 = v70;
  uint64_t v78 = v145;
  unsigned int v79 = v148;
  outlined copy of DisplayList.Item.Value(v76, v77);
  outlined copy of DisplayList.Item.Value(v73, v74);
  uint64_t v80 = (uint64_t)a2;
  uint64_t v81 = v78;
  uint64_t v82 = (uint64_t)a4;
  uint64_t v83 = (uint64_t)v75;
  uint64_t v84 = v146;
  unint64_t v85 = v143;
  uint64_t v86 = v149;
  specialized DisplayList.ViewUpdater.ViewCache.updateAsync(oldItem:oldState:newItem:newState:tag:updateView:)((unint64_t)&v175, v80, (uint64_t)&v164, v82, 1, v83, v144, &v153);
  swift_endAccess();
  unint64_t v147 = v74;
  outlined consume of DisplayList.Item.Value(v86, v74);
  outlined consume of DisplayList.Item.Value(v84, v85);
  __int16 v87 = v156;
  if (v156 == 2)
  {
    long long v172 = v194;
    long long v173 = v195;
    long long v174 = v196;
    long long v168 = v190;
    long long v169 = v191;
    long long v170 = v192;
    long long v171 = v193;
    long long v164 = v186;
    long long v165 = v187;
    long long v166 = v188;
    long long v167 = v189;
    outlined release of DisplayList.ViewUpdater.Model.State((uint64_t)&v164);
    long long v183 = v212;
    long long v184 = v213;
    long long v185 = v214;
    long long v179 = v208;
    long long v180 = v209;
    long long v181 = v210;
    long long v182 = v211;
    long long v175 = v204;
    long long v176 = v205;
    long long v177 = v206;
    long long v178 = v207;
    outlined release of DisplayList.ViewUpdater.Model.State((uint64_t)&v175);
    outlined consume of DisplayList.Item.Value(v86, v147);
    uint64_t result = outlined consume of DisplayList.Item.Value(v84, v85);
    char v89 = v142;
    *uint64_t v142 = 0;
    *((unsigned char *)v89 + 8) = 1;
    return result;
  }
  *(void *)&long long v144 = *((void *)&v74 + 1);
  unsigned int v95 = v79;
  uint64_t v96 = v158;
  unint64_t v97 = v85;
  unint64_t v98 = v85 >> 62;
  v159[0] = v153;
  v159[1] = v154;
  v159[2] = v155;
  __int16 v160 = v156 & 0x101;
  char v161 = v157 & 1;
  uint64_t v162 = v158;
  *(unsigned char *)(v152 + 184) &= v157 & 1;
  if ((v87 & 0x100) == 0)
  {
    uint64_t v99 = v96;
    if (v98 == 1)
    {
      outlined copy of DisplayList.Effect(v84, v85, SBYTE4(v85));
      swift_bridgeObjectRetain();
      outlined consume of DisplayList.Effect(v84, v85, SBYTE4(v85));
      uint64_t v153 = v81;
      LOWORD(v154) = v95;
      BYTE2(v154) = BYTE2(v95);
      DisplayList.Index.skip(list:)(&v153);
      long long v172 = v194;
      long long v173 = v195;
      long long v174 = v196;
      long long v168 = v190;
      long long v169 = v191;
      long long v170 = v192;
      long long v171 = v193;
      long long v164 = v186;
      long long v165 = v187;
      long long v166 = v188;
      long long v167 = v189;
      outlined release of DisplayList.ViewUpdater.Model.State((uint64_t)&v164);
      long long v183 = v212;
      long long v184 = v213;
      long long v185 = v214;
      long long v179 = v208;
      long long v180 = v209;
      long long v181 = v210;
      long long v182 = v211;
      long long v175 = v204;
      long long v176 = v205;
      long long v177 = v206;
      long long v178 = v207;
      outlined release of DisplayList.ViewUpdater.Model.State((uint64_t)&v175);
      swift_bridgeObjectRelease();
    }
    else
    {
      long long v172 = v194;
      long long v173 = v195;
      long long v174 = v196;
      long long v168 = v190;
      long long v169 = v191;
      long long v170 = v192;
      long long v171 = v193;
      long long v164 = v186;
      long long v165 = v187;
      long long v166 = v188;
      long long v167 = v189;
      outlined release of DisplayList.ViewUpdater.Model.State((uint64_t)&v164);
      long long v183 = v212;
      long long v184 = v213;
      long long v185 = v214;
      long long v179 = v208;
      long long v180 = v209;
      long long v181 = v210;
      long long v182 = v211;
      long long v175 = v204;
      long long v176 = v205;
      long long v177 = v206;
      long long v178 = v207;
      outlined release of DisplayList.ViewUpdater.Model.State((uint64_t)&v175);
    }
    long long v117 = v142;
    goto LABEL_46;
  }
  char v104 = v137;
  if ((v137 & 4) != 0) {
    goto LABEL_31;
  }
  long long v175 = v71;
  long long v176 = v72;
  *(void *)&long long v177 = v138;
  *((void *)&v177 + 1) = v149;
  *(void *)&long long v178 = v147;
  *((void *)&v178 + 1) = v144;
  unsigned int v105 = WORD1(v151);
  BYTE2(v179) = BYTE2(v151);
  LOWORD(v179) = v151;
  DWORD1(v179) = v140;
  DisplayList.Item.features.getter((__int16 *)&v164);
  if (v164)
  {
LABEL_31:
    if (v104)
    {
      long long v175 = v67;
      long long v176 = v68;
      *(void *)&long long v177 = v135;
      *((void *)&v177 + 1) = v84;
      *(void *)&long long v178 = v85;
      *((void *)&v178 + 1) = v81;
      LOWORD(v179) = v95;
      BYTE2(v179) = BYTE2(v95);
      DWORD1(v179) = v136;
      long long v164 = v71;
      long long v165 = v72;
      uint64_t v118 = v84;
      uint64_t v119 = v149;
      *(void *)&long long v166 = v138;
      *((void *)&v166 + 1) = v149;
      unint64_t v112 = v147;
      *(void *)&long long v167 = v147;
      *((void *)&v167 + 1) = v144;
      BYTE2(v168) = BYTE2(v151);
      LOWORD(v168) = v151;
      DWORD1(v168) = v140;
      outlined copy of DisplayList.Item.Value(v118, v85);
      outlined copy of DisplayList.Item.Value(v119, v112);
      DisplayList.ViewUpdater.updateItemViewAsync(oldItem:oldState:newItem:newState:)((uint64_t)&v175, (uint64_t)&v204, (uint64_t)&v164, (uint64_t)&v186, (uint64_t)&v153);
      uint64_t v120 = v119;
      uint64_t v84 = v146;
      outlined consume of DisplayList.Item.Value(v120, v112);
      outlined consume of DisplayList.Item.Value(v84, v85);
    }
    else
    {
      unint64_t v112 = v147;
      if (v98 != 1 || (v147 & 0xC000000000000000) != 0x4000000000000000)
      {
        outlined copy of DisplayList.Item.Value(v84, v85);
        uint64_t v121 = v149;
        outlined copy of DisplayList.Item.Value(v149, v112);
        outlined consume of DisplayList.Item.Value(v84, v85);
        outlined consume of DisplayList.Item.Value(v121, v112);
        long long v117 = v142;
        if (one-time initialization token for infinity == -1)
        {
LABEL_41:
          uint64_t v153 = static Time.infinity;
          LOBYTE(v154) = 0;
          goto LABEL_43;
        }
LABEL_59:
        swift_once();
        goto LABEL_41;
      }
      *(void *)&long long v175 = v81;
      WORD4(v175) = v95;
      BYTE10(v175) = BYTE2(v95);
      *(void *)&long long v164 = v144;
      WORD4(v164) = v151;
      BYTE10(v164) = BYTE2(v151);
      uint64_t v113 = v84;
      outlined copy of DisplayList.Item.Value(v84, v85);
      uint64_t v114 = v149;
      outlined copy of DisplayList.Item.Value(v149, v147);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      DisplayList.ViewUpdater.updateAsync(oldList:oldParentState:newList:newParentState:)(&v153, &v175, &v204, &v164, &v186);
      outlined consume of DisplayList.Item.Value(v113, v85);
      uint64_t v115 = v114;
      uint64_t v84 = v113;
      unint64_t v112 = v147;
      outlined consume of DisplayList.Item.Value(v115, v147);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    long long v117 = v142;
    goto LABEL_43;
  }
  long long v175 = v67;
  long long v176 = v68;
  *(void *)&long long v177 = v135;
  *((void *)&v177 + 1) = v84;
  *(void *)&long long v178 = v85;
  *((void *)&v178 + 1) = v81;
  __int16 v106 = v95;
  unsigned int v107 = HIWORD(v95);
  BYTE2(v179) = v107;
  LOWORD(v179) = v106;
  DWORD1(v179) = v136;
  DisplayList.Item.features.getter((__int16 *)&v164);
  int v108 = (unsigned __int16)v164;
  long long v175 = v71;
  long long v176 = v72;
  *(void *)&long long v177 = v138;
  *((void *)&v177 + 1) = v149;
  *(void *)&long long v178 = v147;
  *((void *)&v178 + 1) = v144;
  BYTE2(v179) = v105;
  LOWORD(v179) = v151;
  DWORD1(v179) = v140;
  DisplayList.Item.features.getter((__int16 *)v163);
  if (v108 == LOWORD(v163[0]))
  {
    if (v98 == 1)
    {
      *(void *)&long long v175 = v81;
      WORD4(v175) = v148;
      BYTE10(v175) = v107;
      outlined copy of DisplayList.Effect(v84, v85, SBYTE4(v85));
      swift_bridgeObjectRetain();
      DisplayList.Index.skip(list:)((uint64_t *)&v175);
      swift_bridgeObjectRelease();
      swift_beginAccess();
      if (BYTE4(v85) == 1)
      {
        uint64_t v131 = swift_projectBox();
        uint64_t v132 = v139;
        outlined init with copy of DisplayList.ArchiveIDs?(v131, v139);
        uint64_t v133 = type metadata accessor for DisplayList.ArchiveIDs();
        Swift::Bool v134 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v133 - 8) + 48))(v132, 1, v133) != 1;
        DisplayList.Index.updateArchive(entering:)(v134);
        _s7SwiftUI11DisplayListV10ArchiveIDsVSgWOhTm_1(v132, (unint64_t *)&lazy cache variable for type metadata for DisplayList.ArchiveIDs?, (void (*)(uint64_t))type metadata accessor for DisplayList.ArchiveIDs);
      }
      else if (BYTE4(v85) == 7)
      {
        __int16 v109 = *(_WORD *)(v84 + 24);
        char v110 = *(unsigned char *)(v84 + 26);
        *(void *)&long long v164 = *(void *)(v84 + 16);
        WORD4(v164) = v109;
        BYTE10(v164) = v110;
        DisplayList.Index.skip(list:)((uint64_t *)&v164);
      }
      swift_endAccess();
      outlined consume of DisplayList.Effect(v84, v85, SBYTE4(v85));
    }
    long long v117 = v142;
    unint64_t v112 = v147;
    if (one-time initialization token for infinity == -1) {
      goto LABEL_41;
    }
    goto LABEL_59;
  }
  uint64_t v153 = 0;
  LOBYTE(v154) = 1;
  long long v117 = v142;
  unint64_t v112 = v147;
LABEL_43:
  uint64_t v122 = v153;
  if ((v154 & 1) == 0)
  {
    v163[0] = v153;
    swift_beginAccess();
    DisplayList.ViewUpdater.ViewCache.setNextUpdate(_:in:)((unint64_t)v163, (uint64_t)v159);
    swift_endAccess();
    long long v172 = v194;
    long long v173 = v195;
    long long v174 = v196;
    long long v168 = v190;
    long long v169 = v191;
    long long v170 = v192;
    long long v171 = v193;
    long long v164 = v186;
    long long v165 = v187;
    long long v166 = v188;
    long long v167 = v189;
    outlined release of DisplayList.ViewUpdater.Model.State((uint64_t)&v164);
    long long v183 = v212;
    long long v184 = v213;
    long long v185 = v214;
    long long v179 = v208;
    long long v180 = v209;
    long long v181 = v210;
    long long v182 = v211;
    long long v175 = v204;
    long long v176 = v205;
    long long v177 = v206;
    long long v178 = v207;
    outlined release of DisplayList.ViewUpdater.Model.State((uint64_t)&v175);
    uint64_t v99 = v162;
LABEL_46:
    *long long v117 = v99;
    *((unsigned char *)v117 + 8) = 0;
    uint64_t v123 = v149;
    unint64_t v124 = v147;
    goto LABEL_47;
  }
  long long v172 = v194;
  long long v173 = v195;
  long long v174 = v196;
  long long v168 = v190;
  long long v169 = v191;
  long long v170 = v192;
  long long v171 = v193;
  long long v164 = v186;
  long long v165 = v187;
  long long v166 = v188;
  long long v167 = v189;
  outlined release of DisplayList.ViewUpdater.Model.State((uint64_t)&v164);
  long long v183 = v212;
  long long v184 = v213;
  long long v185 = v214;
  long long v179 = v208;
  long long v180 = v209;
  long long v181 = v210;
  long long v182 = v211;
  long long v175 = v204;
  long long v176 = v205;
  long long v177 = v206;
  long long v178 = v207;
  outlined release of DisplayList.ViewUpdater.Model.State((uint64_t)&v175);
  *long long v117 = v122;
  *((unsigned char *)v117 + 8) = 1;
  uint64_t v123 = v149;
  unint64_t v124 = v112;
LABEL_47:
  outlined consume of DisplayList.Item.Value(v123, v124);
  uint64_t v125 = v84;
  unint64_t v126 = v97;
  return outlined consume of DisplayList.Item.Value(v125, v126);
}

uint64_t DisplayList.ViewUpdater.updateItemViewAsync(oldItem:oldState:newItem:newState:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  unint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  int v13 = *(unsigned __int8 *)(a1 + 66);
  int v14 = *(unsigned __int16 *)(a1 + 64);
  int v15 = *(_DWORD *)(a1 + 68);
  uint64_t v16 = *(void *)(a3 + 32);
  uint64_t v17 = *(void *)(a3 + 40);
  unint64_t v18 = *(void *)(a3 + 48);
  uint64_t v19 = *(void *)(a3 + 56);
  int v20 = *(unsigned __int8 *)(a3 + 66);
  int v21 = *(unsigned __int16 *)(a3 + 64);
  int v22 = *(_DWORD *)(a3 + 68);
  long long v23 = *(_OWORD *)(a1 + 16);
  v74[0] = *(_OWORD *)a1;
  v74[1] = v23;
  uint64_t v75 = v9;
  uint64_t v76 = v10;
  unint64_t v63 = v11;
  uint64_t v64 = v10;
  unint64_t v77 = v11;
  uint64_t v78 = v12;
  int v61 = v13;
  char v80 = v13;
  int v58 = v14;
  __int16 v79 = v14;
  int v81 = v15;
  long long v24 = *(_OWORD *)(a3 + 16);
  v66[0] = *(_OWORD *)a3;
  v66[1] = v24;
  uint64_t v67 = v16;
  uint64_t v68 = v17;
  unint64_t v69 = v18;
  uint64_t v70 = v19;
  int v56 = v20;
  char v72 = v20;
  int v55 = v21;
  __int16 v71 = v21;
  uint64_t v25 = v5 + 32;
  int v73 = v22;
  swift_beginAccess();
  uint64_t v26 = *(void *)(v5 + 32);
  swift_beginAccess();
  specialized DisplayList.ViewUpdater.ViewCache.updateAsync(oldItem:oldState:newItem:newState:tag:updateView:)((unint64_t)v74, a2, (uint64_t)v66, a4, 0, v25, v26, &v82);
  uint64_t result = swift_endAccess();
  __int16 v28 = v85;
  if (v85 == 2)
  {
    *(void *)a5 = 0;
    *(unsigned char *)(a5 + 8) = 1;
    return result;
  }
  uint64_t v29 = v17;
  uint64_t v30 = v87;
  int v31 = v58 | (v61 << 16);
  *(double *)__int16 v88 = v82;
  v88[1] = v83;
  v88[2] = v84;
  __int16 v89 = v85 & 0x101;
  char v90 = v86 & 1;
  char v32 = v86 & 1 & *(unsigned char *)(v6 + 184);
  uint64_t v91 = v87;
  *(unsigned char *)(v6 + 184) = v32;
  if (v63 >> 62 != 1)
  {
    uint64_t v60 = v30;
    outlined copy of DisplayList.Item.Value(v64, v63);
    outlined copy of DisplayList.Item.Value(v17, v18);
    outlined consume of DisplayList.Item.Value(v64, v63);
    uint64_t result = outlined consume of DisplayList.Item.Value(v17, v18);
    uint64_t v39 = v60;
LABEL_11:
    uint64_t v41 = a5;
LABEL_12:
    *(void *)uint64_t v41 = v39;
    *(unsigned char *)(v41 + 8) = 0;
    return result;
  }
  uint64_t v33 = v6;
  int v62 = v55 | (v56 << 16);
  unint64_t v34 = v18;
  if (v18 >> 62 != 1)
  {
    uint64_t v40 = v30;
    outlined copy of DisplayList.Item.Value(v64, v63);
    outlined copy of DisplayList.Item.Value(v17, v18);
    outlined consume of DisplayList.Item.Value(v64, v63);
    uint64_t result = outlined consume of DisplayList.Item.Value(v17, v18);
    uint64_t v39 = v40;
    goto LABEL_11;
  }
  unint64_t v57 = HIDWORD(v18);
  if (v28 & 0x100) == 0 && (*(unsigned char *)(v33 + 185))
  {
    uint64_t v59 = v30;
    if (BYTE4(v63) == 7)
    {
      __int16 v35 = *(_WORD *)(v64 + 24);
      char v36 = *(unsigned char *)(v64 + 26);
      *(void *)&v74[0] = *(void *)(v64 + 16);
      WORD4(v74[0]) = v35;
      BYTE10(v74[0]) = v36;
      uint64_t v37 = v12;
      outlined copy of DisplayList.Item.Value(v64, v63);
      uint64_t v38 = v17;
      outlined copy of DisplayList.Item.Value(v17, v34);
      outlined copy of DisplayList.Effect(v64, v63, 7);
      outlined copy of DisplayList.Effect(v17, v34, v57);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      DisplayList.Index.skip(list:)((uint64_t *)v74);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v37 = v12;
      outlined copy of DisplayList.Item.Value(v64, v63);
      uint64_t v38 = v17;
      outlined copy of DisplayList.Item.Value(v17, v34);
      outlined copy of DisplayList.Effect(v64, v63, SBYTE4(v63));
      outlined copy of DisplayList.Effect(v17, v34, v57);
      swift_bridgeObjectRetain();
    }
    uint64_t v41 = a5;
    *(void *)&v74[0] = v37;
    WORD4(v74[0]) = v31;
    BYTE10(v74[0]) = BYTE2(v31);
    DisplayList.Index.skip(list:)((uint64_t *)v74);
    outlined consume of DisplayList.Effect(v64, v63, SBYTE4(v63));
    outlined consume of DisplayList.Effect(v38, v34, v57);
    outlined consume of DisplayList.Item.Value(v64, v63);
    outlined consume of DisplayList.Item.Value(v38, v34);
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v39 = v59;
    goto LABEL_12;
  }
  outlined copy of DisplayList.Item.Value(v64, v63);
  outlined copy of DisplayList.Item.Value(v17, v18);
  outlined copy of DisplayList.Effect(v64, v63, SBYTE4(v63));
  outlined copy of DisplayList.Effect(v17, v18, SBYTE4(v18));
  swift_bridgeObjectRetain();
  DisplayList.ViewUpdater.Model.State.reset()();
  DisplayList.ViewUpdater.Model.State.reset()();
  *(void *)&v74[0] = v12;
  WORD4(v74[0]) = v31;
  BYTE10(v74[0]) = BYTE2(v31);
  *(void *)&v66[0] = v19;
  WORD4(v66[0]) = v62;
  BYTE10(v66[0]) = BYTE2(v62);
  DisplayList.ViewUpdater.updateAsync(oldList:oldParentState:newList:newParentState:)(&v82, v74, a2, v66, a4);
  swift_bridgeObjectRelease();
  double v42 = v82;
  if ((v83 & 1) == 0)
  {
    double v43 = v82;
    if (BYTE4(v63) == 7)
    {
      if (BYTE4(v18) == 7)
      {
        char v44 = *(unsigned char *)(v64 + 26);
        __int16 v45 = *(_WORD *)(v64 + 24);
        uint64_t v46 = *(void *)(v17 + 16);
        __int16 v47 = *(_WORD *)(v17 + 24);
        char v48 = *(unsigned char *)(v17 + 26);
        *(void *)&v74[0] = *(void *)(v64 + 16);
        WORD4(v74[0]) = v45;
        BYTE10(v74[0]) = v44;
        *(void *)&v66[0] = v46;
        WORD4(v66[0]) = v47;
        BYTE10(v66[0]) = v48;
        outlined copy of DisplayList.Effect(v64, v63, 7);
        outlined copy of DisplayList.Effect(v17, v18, 7);
        DisplayList.ViewUpdater.updateAsync(oldList:oldParentState:newList:newParentState:)(&v82, v74, a2, v66, a4);
        double v49 = v82;
        uint64_t v41 = a5;
        if (v83)
        {
          outlined consume of DisplayList.Effect(v64, v63, 7);
          outlined consume of DisplayList.Effect(v29, v18, 7);
          outlined consume of DisplayList.Item.Value(v64, v63);
          outlined consume of DisplayList.Item.Value(v29, v18);
          outlined consume of DisplayList.Effect(v64, v63, 7);
          uint64_t result = outlined consume of DisplayList.Effect(v29, v18, 7);
          *(double *)a5 = v49;
          goto LABEL_15;
        }
        outlined consume of DisplayList.Effect(v64, v63, 7);
        outlined consume of DisplayList.Effect(v29, v18, 7);
        if (v49 < v43) {
          double v43 = v49;
        }
        uint64_t v50 = v64;
        char v51 = BYTE4(v18);
        goto LABEL_25;
      }
      uint64_t v50 = v64;
      outlined copy of DisplayList.Effect(v64, v63, 7);
      char v51 = BYTE4(v18);
      outlined copy of DisplayList.Effect(v17, v18, SBYTE4(v18));
      uint64_t v52 = v64;
      char v53 = v63;
      char v54 = 7;
    }
    else
    {
      uint64_t v50 = v64;
      outlined copy of DisplayList.Effect(v64, v63, SBYTE4(v63));
      char v51 = BYTE4(v18);
      outlined copy of DisplayList.Effect(v17, v18, SBYTE4(v18));
      uint64_t v52 = v64;
      char v53 = v63;
      char v54 = BYTE4(v63);
    }
    outlined consume of DisplayList.Effect(v52, v53, v54);
    outlined consume of DisplayList.Effect(v17, v18, v51);
    uint64_t v41 = a5;
LABEL_25:
    *(double *)uint64_t v66 = v43;
    swift_beginAccess();
    DisplayList.ViewUpdater.ViewCache.setNextUpdate(_:in:)((unint64_t)v66, (uint64_t)v88);
    swift_endAccess();
    outlined consume of DisplayList.Effect(v50, v63, SBYTE4(v63));
    outlined consume of DisplayList.Effect(v29, v18, v51);
    outlined consume of DisplayList.Item.Value(v50, v63);
    uint64_t result = outlined consume of DisplayList.Item.Value(v29, v18);
    uint64_t v39 = v91;
    goto LABEL_12;
  }
  outlined consume of DisplayList.Effect(v64, v63, SBYTE4(v63));
  outlined consume of DisplayList.Effect(v17, v18, SBYTE4(v18));
  outlined consume of DisplayList.Item.Value(v64, v63);
  uint64_t result = outlined consume of DisplayList.Item.Value(v17, v18);
  uint64_t v41 = a5;
  *(double *)a5 = v42;
LABEL_15:
  *(unsigned char *)(v41 + 8) = 1;
  return result;
}

unint64_t specialized DisplayList.ViewUpdater.ViewCache.updateAsync(oldItem:oldState:newItem:newState:tag:updateView:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  return specialized DisplayList.ViewUpdater.ViewCache.updateAsync(oldItem:oldState:newItem:newState:tag:updateView:)(a1, a2, a3, a4, a5, a6, a7, (void (*)(_OWORD *__return_ptr, uint64_t, long long *, _OWORD *, uint64_t, _OWORD *, uint64_t, char *, uint64_t))specialized closure #1 in DisplayList.ViewUpdater.ViewCache.updateAsync(oldItem:oldState:newItem:newState:tag:updateView:), a8);
}

{
  return specialized DisplayList.ViewUpdater.ViewCache.updateAsync(oldItem:oldState:newItem:newState:tag:updateView:)(a1, a2, a3, a4, a5, a6, a7, (void (*)(_OWORD *__return_ptr, uint64_t, long long *, _OWORD *, uint64_t, _OWORD *, uint64_t, char *, uint64_t))specialized closure #1 in DisplayList.ViewUpdater.ViewCache.updateAsync(oldItem:oldState:newItem:newState:tag:updateView:), a8);
}

uint64_t DisplayList.Index.skip(list:)(uint64_t *a1)
{
  type metadata accessor for DisplayList.ArchiveIDs?(0, (unint64_t *)&lazy cache variable for type metadata for DisplayList.ArchiveIDs?, (uint64_t (*)(uint64_t))type metadata accessor for DisplayList.ArchiveIDs, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v34 = (uint64_t)&v32 - v4;
  uint64_t result = *a1;
  uint64_t v6 = *(void *)(*a1 + 16);
  if (v6)
  {
    uint64_t v33 = swift_bridgeObjectRetain();
    for (unint64_t i = (_DWORD *)(v33 + 100); *i; i += 18)
    {
LABEL_4:
      if (!--v6) {
        return swift_bridgeObjectRelease();
      }
    }
    unint64_t v8 = *(void *)(i - 7);
    unint64_t v9 = *(void *)(i - 5);
    uint64_t v10 = *(void *)(i - 3);
    int v11 = *((unsigned __int8 *)i - 2);
    int v12 = *((unsigned __int16 *)i - 2);
    int v13 = *v1;
    int v14 = v1[1] + 1;
    v1[1] = v14;
    uint64_t v15 = *((void *)v1 + 1);
    char v16 = *((unsigned char *)v1 + 16);
    *((unsigned char *)v1 + 16) = 0;
    if ((v9 >> 62) - 2 < 2)
    {
LABEL_22:
      char v30 = *((unsigned char *)v1 + 16);
      if ((v30 & 0xC) != 0)
      {
        uint64_t v31 = *(void *)v1;
        if ((v1[4] & 4) != 0) {
          *(void *)unint64_t v1 = *((void *)v1 + 1);
        }
        if ((v30 & 8) != 0) {
          *((void *)v1 + 1) = v31;
        }
      }
      if (v30)
      {
        *unint64_t v1 = v13;
        v1[1] = v14;
      }
      if ((v30 & 2) != 0) {
        *((void *)v1 + 1) = v15;
      }
      *((unsigned char *)v1 + 16) = v16;
      goto LABEL_4;
    }
    if (!(v9 >> 62))
    {
      if (v8 >> 60 == 9)
      {
        __int16 v17 = *(_WORD *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
        char v18 = *(unsigned char *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 0x1A);
        uint64_t v36 = *(void *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
        __int16 v37 = v17;
        char v38 = v18;
        DisplayList.Index.skip(list:)(&v36);
      }
      goto LABEL_22;
    }
    int v35 = v13;
    uint64_t v36 = v10;
    __int16 v37 = v12;
    char v38 = (v12 | (v11 << 16)) >> 16;
    outlined copy of DisplayList.Item.Value(v8, v9);
    outlined copy of DisplayList.Effect(v8, v9, SBYTE4(v9));
    swift_bridgeObjectRetain();
    DisplayList.Index.skip(list:)(&v36);
    swift_bridgeObjectRelease();
    if (BYTE4(v9) != 1)
    {
      if (BYTE4(v9) == 7)
      {
        __int16 v19 = *(_WORD *)(v8 + 24);
        char v20 = *(unsigned char *)(v8 + 26);
        uint64_t v36 = *(void *)(v8 + 16);
        __int16 v37 = v19;
        char v38 = v20;
        DisplayList.Index.skip(list:)(&v36);
        uint64_t v21 = v8;
        char v22 = v9;
        LOBYTE(v23) = 7;
      }
      else
      {
        uint64_t v21 = v8;
        char v22 = v9;
        unint64_t v23 = HIDWORD(v9);
      }
      outlined consume of DisplayList.Effect(v21, v22, v23);
      outlined consume of DisplayList.Item.Value(v8, v9);
      int v13 = v35;
      goto LABEL_22;
    }
    uint64_t v24 = swift_projectBox();
    uint64_t v25 = v34;
    outlined init with copy of DisplayList.ArchiveIDs?(v24, v34);
    uint64_t v26 = type metadata accessor for DisplayList.ArchiveIDs();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 48))(v25, 1, v26) == 1)
    {
      *(void *)unint64_t v1 = *((void *)v1 + 1);
      *((void *)v1 + 1) = 0;
      int v27 = *((unsigned __int8 *)v1 + 16);
      int v13 = v35;
      if ((~v27 & 9) != 0)
      {
        char v28 = v27 | 9;
LABEL_20:
        *((unsigned char *)v1 + 16) = v28;
      }
    }
    else
    {
      *((void *)v1 + 1) = *(void *)v1;
      *(void *)unint64_t v1 = 0;
      int v29 = *((unsigned __int8 *)v1 + 16);
      int v13 = v35;
      if ((~v29 & 6) != 0)
      {
        char v28 = v29 | 6;
        goto LABEL_20;
      }
    }
    outlined destroy of Any?(v34, (uint64_t)&lazy cache variable for type metadata for DisplayList.ArchiveIDs?, (uint64_t)type metadata accessor for DisplayList.ArchiveIDs, MEMORY[0x263F8D8F0], (uint64_t (*)(void))type metadata accessor for DisplayList.ArchiveIDs?);
    outlined consume of DisplayList.Effect(v8, v9, 1);
    outlined consume of DisplayList.Item.Value(v8, v9);
    goto LABEL_22;
  }
  return result;
}

double DisplayList.Index.leave(index:)(uint64_t a1, double result)
{
  char v3 = *(unsigned char *)(v2 + 16);
  if ((v3 & 0xC) != 0)
  {
    uint64_t result = *(double *)v2;
    if ((*(unsigned char *)(v2 + 16) & 4) != 0) {
      *(void *)uint64_t v2 = *(void *)(v2 + 8);
    }
    if ((v3 & 8) != 0) {
      *(double *)(v2 + 8) = result;
    }
  }
  if (v3)
  {
    uint64_t result = *(double *)a1;
    *(void *)uint64_t v2 = *(void *)a1;
    char v4 = *(unsigned char *)(a1 + 16);
    if ((v3 & 2) == 0) {
      goto LABEL_8;
    }
  }
  else
  {
    char v4 = *(unsigned char *)(a1 + 16);
    if ((v3 & 2) == 0)
    {
LABEL_8:
      *(unsigned char *)(v2 + 16) = v4;
      return result;
    }
  }
  uint64_t result = *(double *)(a1 + 8);
  *(double *)(v2 + 8) = result;
  *(unsigned char *)(v2 + 16) = v4;
  return result;
}

void _MovableLockSyncMain(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  pthread_t v5 = pthread_self();
  uint64_t v6 = *(_opaque_pthread_t **)(a1 + 208);
  if (v5 != v6)
  {
    *(void *)(a1 + 232) = a3;
    *(void *)(a1 + 240) = a2;
    if (!*(unsigned char *)(a1 + 249))
    {
      if (*(unsigned char *)(a1 + 248)
        || (*(unsigned char *)(a1 + 248) = 1,
            dispatch_async_f(MEMORY[0x263EF83A0], (void *)a1, (dispatch_function_t)sync_main_callback),
            !*(unsigned char *)(a1 + 249)))
      {
LABEL_8:
        while (*(void *)(a1 + 232))
          pthread_cond_wait((pthread_cond_t *)(a1 + 112), (pthread_mutex_t *)a1);
        return;
      }
      uint64_t v6 = *(_opaque_pthread_t **)(a1 + 208);
    }
    pthread_cond_signal_thread_np((pthread_cond_t *)(a1 + 64), v6);
    goto LABEL_8;
  }

  a3(a2);
}

uint64_t EnvironmentValues.controlSize.getter@<X0>(char *a1@<X8>)
{
  uint64_t v3 = *v1;
  if (v1[1])
  {
    swift_retain_n();
    swift_retain_n();
    specialized PropertyList.Tracker.value<A>(_:for:)(v3, (char *)&v11);
    swift_release_n();
    uint64_t result = swift_release_n();
    int v5 = v11;
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ControlSizeKey>();
    BloomFilter.init(hashValue:)(v6);
    uint64_t v7 = swift_retain_n();
    uint64_t v8 = specialized find1<A>(_:key:filter:)(v7, v10);
    if (v8) {
      int v5 = *(unsigned __int8 *)(v8 + 72);
    }
    else {
      int v5 = 5;
    }
    uint64_t result = swift_release_n();
  }
  if (v5 == 5) {
    char v9 = 2;
  }
  else {
    char v9 = v5;
  }
  *a1 = v9;
  return result;
}

void type metadata accessor for EnvironmentPropertyKey<ControlSizeKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<ControlSizeKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ControlSizeKey>);
    }
  }
}

void type metadata accessor for TypedElement<EnvironmentPropertyKey<ControlSizeKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<ControlSizeKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ControlSizeKey>, (uint64_t)&type metadata for ControlSizeKey, (uint64_t)&protocol witness table for ControlSizeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ControlSizeKey> and conformance EnvironmentPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<EnvironmentPropertyKey<ControlSizeKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<ControlSizeKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<ControlSizeKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<ControlSizeKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ControlSizeKey>, (uint64_t)&type metadata for ControlSizeKey, (uint64_t)&protocol witness table for ControlSizeKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for EnvironmentPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ControlSizeKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t OptionalEdgeInsets.subscript.getter(char a1)
{
  switch(a1)
  {
    case 1:
      v1 += 16;
      break;
    case 2:
      v1 += 32;
      break;
    case 3:
      v1 += 48;
      break;
    default:
      return *(void *)v1;
  }
  return *(void *)v1;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ShapeStyleResolver<A>()
{
  swift_getWitnessTable();

  return static AsyncAttribute.flags.getter();
}

uint64_t type metadata accessor for AnimationBoxBase()
{
  return self;
}

BOOL static ControlSize.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

ValueMetadata *type metadata accessor for Color.Resolved()
{
  return &type metadata for Color.Resolved;
}

uint64_t type metadata completion function for LeafViewResponder()
{
  uint64_t result = type metadata accessor for ContentResponderHelper();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void default argument 2 of Text.resolveAttributedString(in:includeDefaultAttributes:options:idiom:)(void *a1@<X8>)
{
  *a1 = 128;
}

void type metadata accessor for AtomicBuffer<ObjectCache<Font.Resolved, CTFontRef>.Data>()
{
  if (!lazy cache variable for type metadata for AtomicBuffer<ObjectCache<Font.Resolved, CTFontRef>.Data>)
  {
    type metadata accessor for ObjectCache<Font.Resolved, CTFontRef>(255, (unint64_t *)&lazy cache variable for type metadata for ObjectCache<Font.Resolved, CTFontRef>.Data, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t, unint64_t))type metadata accessor for ObjectCache.Data);
    unint64_t v0 = type metadata accessor for AtomicBuffer();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<ObjectCache<Font.Resolved, CTFontRef>.Data>);
    }
  }
}

uint64_t one-time initialization function for fontCache()
{
  type metadata accessor for ObjectCache<Font.Resolved, CTFontRef>(0, &lazy cache variable for type metadata for ObjectCache<Font.Resolved, CTFontRef>, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t, unint64_t))type metadata accessor for ObjectCache);
  unint64_t v0 = (void *)swift_allocObject();
  type metadata accessor for ObjectCache<Font.Resolved, CTFontRef>(0, &lazy cache variable for type metadata for ObjectCache<Font.Resolved, CTFontRef>.Item, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t, unint64_t))type metadata accessor for ObjectCache.Item);
  uint64_t v1 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(void *)(v1 + 16) = 32;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_DWORD *)(v1 + 96) = 0;
  *(_OWORD *)(v1 + 104) = 0u;
  *(_OWORD *)(v1 + 120) = 0u;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 152) = 0u;
  *(_DWORD *)(v1 + 168) = 0;
  *(_OWORD *)(v1 + 176) = 0u;
  *(_OWORD *)(v1 + 192) = 0u;
  *(_OWORD *)(v1 + 208) = 0u;
  *(_OWORD *)(v1 + 224) = 0u;
  *(_DWORD *)(v1 + 240) = 0;
  *(_DWORD *)(v1 + 312) = 0;
  *(_OWORD *)(v1 + 248) = 0u;
  *(_OWORD *)(v1 + 264) = 0u;
  *(_OWORD *)(v1 + 280) = 0u;
  *(_OWORD *)(v1 + 296) = 0u;
  *(_DWORD *)(v1 + 384) = 0;
  *(_OWORD *)(v1 + 352) = 0u;
  *(_OWORD *)(v1 + 368) = 0u;
  *(_OWORD *)(v1 + 320) = 0u;
  *(_OWORD *)(v1 + 336) = 0u;
  *(_DWORD *)(v1 + 456) = 0;
  *(_OWORD *)(v1 + 424) = 0u;
  *(_OWORD *)(v1 + 440) = 0u;
  *(_OWORD *)(v1 + 392) = 0u;
  *(_OWORD *)(v1 + 408) = 0u;
  *(_DWORD *)(v1 + 528) = 0;
  *(_OWORD *)(v1 + 496) = 0u;
  *(_OWORD *)(v1 + 512) = 0u;
  *(_OWORD *)(v1 + 464) = 0u;
  *(_OWORD *)(v1 + 480) = 0u;
  *(_DWORD *)(v1 + 600) = 0;
  *(_OWORD *)(v1 + 568) = 0u;
  *(_OWORD *)(v1 + 584) = 0u;
  *(_OWORD *)(v1 + 536) = 0u;
  *(_OWORD *)(v1 + 552) = 0u;
  *(_DWORD *)(v1 + 672) = 0;
  *(_OWORD *)(v1 + 640) = 0u;
  *(_OWORD *)(v1 + 656) = 0u;
  *(_OWORD *)(v1 + 608) = 0u;
  *(_OWORD *)(v1 + 624) = 0u;
  *(_DWORD *)(v1 + 744) = 0;
  *(_OWORD *)(v1 + 712) = 0u;
  *(_OWORD *)(v1 + 728) = 0u;
  *(_OWORD *)(v1 + 680) = 0u;
  *(_OWORD *)(v1 + 696) = 0u;
  *(_DWORD *)(v1 + 816) = 0;
  *(_OWORD *)(v1 + 784) = 0u;
  *(_OWORD *)(v1 + 800) = 0u;
  *(_OWORD *)(v1 + 752) = 0u;
  *(_OWORD *)(v1 + 768) = 0u;
  *(_DWORD *)(v1 + 888) = 0;
  *(_OWORD *)(v1 + 856) = 0u;
  *(_OWORD *)(v1 + 872) = 0u;
  *(_OWORD *)(v1 + 824) = 0u;
  *(_OWORD *)(v1 + 840) = 0u;
  *(_DWORD *)(v1 + 960) = 0;
  *(_OWORD *)(v1 + 928) = 0u;
  *(_OWORD *)(v1 + 944) = 0u;
  *(_OWORD *)(v1 + 896) = 0u;
  *(_OWORD *)(v1 + 912) = 0u;
  *(_DWORD *)(v1 + 1032) = 0;
  *(_OWORD *)(v1 + 1000) = 0u;
  *(_OWORD *)(v1 + 1016) = 0u;
  *(_OWORD *)(v1 + 968) = 0u;
  *(_OWORD *)(v1 + 984) = 0u;
  *(_DWORD *)(v1 + 1104) = 0;
  *(_OWORD *)(v1 + 1088) = 0u;
  *(_OWORD *)(v1 + 1072) = 0u;
  *(_OWORD *)(v1 + 1056) = 0u;
  *(_OWORD *)(v1 + 1040) = 0u;
  *(_DWORD *)(v1 + 1176) = 0;
  *(_OWORD *)(v1 + 1144) = 0u;
  *(_OWORD *)(v1 + 1160) = 0u;
  *(_OWORD *)(v1 + 1112) = 0u;
  *(_OWORD *)(v1 + 1128) = 0u;
  *(_DWORD *)(v1 + 1248) = 0;
  *(_OWORD *)(v1 + 1232) = 0u;
  *(_OWORD *)(v1 + 1216) = 0u;
  *(_OWORD *)(v1 + 1200) = 0u;
  *(_OWORD *)(v1 + 1184) = 0u;
  *(_DWORD *)(v1 + 1320) = 0;
  *(_OWORD *)(v1 + 1288) = 0u;
  *(_OWORD *)(v1 + 1304) = 0u;
  *(_OWORD *)(v1 + 1256) = 0u;
  *(_OWORD *)(v1 + 1272) = 0u;
  *(_DWORD *)(v1 + 1392) = 0;
  *(_OWORD *)(v1 + 1376) = 0u;
  *(_OWORD *)(v1 + 1360) = 0u;
  *(_OWORD *)(v1 + 1344) = 0u;
  *(_OWORD *)(v1 + 1328) = 0u;
  *(_DWORD *)(v1 + 1464) = 0;
  *(_OWORD *)(v1 + 1432) = 0u;
  *(_OWORD *)(v1 + 1448) = 0u;
  *(_OWORD *)(v1 + 1400) = 0u;
  *(_OWORD *)(v1 + 1416) = 0u;
  *(_DWORD *)(v1 + 1536) = 0;
  *(_OWORD *)(v1 + 1520) = 0u;
  *(_OWORD *)(v1 + 1504) = 0u;
  *(_OWORD *)(v1 + 1488) = 0u;
  *(_OWORD *)(v1 + 1472) = 0u;
  *(_DWORD *)(v1 + 1608) = 0;
  *(_OWORD *)(v1 + 1576) = 0u;
  *(_OWORD *)(v1 + 1592) = 0u;
  *(_OWORD *)(v1 + 1544) = 0u;
  *(_OWORD *)(v1 + 1560) = 0u;
  *(_DWORD *)(v1 + 1680) = 0;
  *(_OWORD *)(v1 + 1664) = 0u;
  *(_OWORD *)(v1 + 1648) = 0u;
  *(_OWORD *)(v1 + 1632) = 0u;
  *(_OWORD *)(v1 + 1616) = 0u;
  *(_DWORD *)(v1 + 1752) = 0;
  *(_OWORD *)(v1 + 1720) = 0u;
  *(_OWORD *)(v1 + 1736) = 0u;
  *(_OWORD *)(v1 + 1688) = 0u;
  *(_OWORD *)(v1 + 1704) = 0u;
  *(_DWORD *)(v1 + 1824) = 0;
  *(_OWORD *)(v1 + 1808) = 0u;
  *(_OWORD *)(v1 + 1792) = 0u;
  *(_OWORD *)(v1 + 1776) = 0u;
  *(_OWORD *)(v1 + 1760) = 0u;
  *(_DWORD *)(v1 + 1896) = 0;
  *(_OWORD *)(v1 + 1864) = 0u;
  *(_OWORD *)(v1 + 1880) = 0u;
  *(_OWORD *)(v1 + 1832) = 0u;
  *(_OWORD *)(v1 + 1848) = 0u;
  *(_DWORD *)(v1 + 1968) = 0;
  *(_OWORD *)(v1 + 1952) = 0u;
  *(_OWORD *)(v1 + 1936) = 0u;
  *(_OWORD *)(v1 + 1920) = 0u;
  *(_OWORD *)(v1 + 1904) = 0u;
  *(_DWORD *)(v1 + 2040) = 0;
  *(_OWORD *)(v1 + 2008) = 0u;
  *(_OWORD *)(v1 + 2024) = 0u;
  *(_OWORD *)(v1 + 1976) = 0u;
  *(_OWORD *)(v1 + 1992) = 0u;
  *(_DWORD *)(v1 + 2112) = 0;
  *(_OWORD *)(v1 + 2096) = 0u;
  *(_OWORD *)(v1 + 2080) = 0u;
  *(_OWORD *)(v1 + 2064) = 0u;
  *(_OWORD *)(v1 + 2048) = 0u;
  *(_DWORD *)(v1 + 2184) = 0;
  *(_OWORD *)(v1 + 2152) = 0u;
  *(_OWORD *)(v1 + 2168) = 0u;
  *(_OWORD *)(v1 + 2120) = 0u;
  *(_OWORD *)(v1 + 2136) = 0u;
  *(_DWORD *)(v1 + 2256) = 0;
  *(_OWORD *)(v1 + 2240) = 0u;
  *(_OWORD *)(v1 + 2224) = 0u;
  *(_OWORD *)(v1 + 2208) = 0u;
  *(_OWORD *)(v1 + 2192) = 0u;
  *(_DWORD *)(v1 + 2328) = 0;
  *(_OWORD *)(v1 + 2296) = 0u;
  *(_OWORD *)(v1 + 2312) = 0u;
  *(_OWORD *)(v1 + 2264) = 0u;
  *(_OWORD *)(v1 + 2280) = 0u;
  type metadata accessor for AtomicBuffer<ObjectCache<Font.Resolved, CTFontRef>.Data>();
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  *(void *)(result + 24) = v1;
  *(_DWORD *)(result + 32) = 0;
  v0[3] = 0;
  v0[4] = result;
  v0[2] = closure #1 in variable initialization expression of static Font.fontCache;
  static Font.fontCache = (uint64_t)v0;
  return result;
}

void type metadata accessor for ObjectCache<Font.Resolved, CTFontRef>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, uint64_t, unint64_t))
{
  if (!*a2)
  {
    type metadata accessor for CTFontRef(255);
    uint64_t v7 = v6;
    unint64_t v8 = lazy protocol witness table accessor for type Font.Resolved and conformance Font.Resolved();
    unint64_t v9 = a3(a1, &type metadata for Font.Resolved, v7, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Font.Resolved and conformance Font.Resolved()
{
  unint64_t result = lazy protocol witness table cache variable for type Font.Resolved and conformance Font.Resolved;
  if (!lazy protocol witness table cache variable for type Font.Resolved and conformance Font.Resolved)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.Resolved and conformance Font.Resolved);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Font.Resolved and conformance Font.Resolved;
  if (!lazy protocol witness table cache variable for type Font.Resolved and conformance Font.Resolved)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.Resolved and conformance Font.Resolved);
  }
  return result;
}

uint64_t one-time initialization function for cache()
{
  type metadata accessor for ObjectCache<Color.Resolved, CGColorRef>(0, &lazy cache variable for type metadata for ObjectCache<Color.Resolved, CGColorRef>, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t, unint64_t))type metadata accessor for ObjectCache);
  unint64_t v0 = (void *)swift_allocObject();
  type metadata accessor for ObjectCache<Color.Resolved, CGColorRef>(0, &lazy cache variable for type metadata for ObjectCache<Color.Resolved, CGColorRef>.Item, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t, unint64_t))type metadata accessor for ObjectCache.Item);
  uint64_t v1 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(void *)(v1 + 16) = 32;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_DWORD *)(v1 + 64) = 0;
  *(_OWORD *)(v1 + 72) = 0u;
  *(_OWORD *)(v1 + 88) = 0u;
  *(_DWORD *)(v1 + 104) = 0;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 128) = 0u;
  *(_DWORD *)(v1 + 144) = 0;
  *(_OWORD *)(v1 + 152) = 0u;
  *(_OWORD *)(v1 + 168) = 0u;
  *(_DWORD *)(v1 + 184) = 0;
  *(_OWORD *)(v1 + 192) = 0u;
  *(_OWORD *)(v1 + 208) = 0u;
  *(_DWORD *)(v1 + 224) = 0;
  *(_OWORD *)(v1 + 232) = 0u;
  *(_OWORD *)(v1 + 248) = 0u;
  *(_DWORD *)(v1 + 264) = 0;
  *(_DWORD *)(v1 + 304) = 0;
  *(_OWORD *)(v1 + 272) = 0u;
  *(_OWORD *)(v1 + 288) = 0u;
  *(_DWORD *)(v1 + 344) = 0;
  *(_OWORD *)(v1 + 312) = 0u;
  *(_OWORD *)(v1 + 328) = 0u;
  *(_DWORD *)(v1 + 384) = 0;
  *(_OWORD *)(v1 + 352) = 0u;
  *(_OWORD *)(v1 + 368) = 0u;
  *(_DWORD *)(v1 + 424) = 0;
  *(_OWORD *)(v1 + 392) = 0u;
  *(_OWORD *)(v1 + 408) = 0u;
  *(_DWORD *)(v1 + 464) = 0;
  *(_OWORD *)(v1 + 432) = 0u;
  *(_OWORD *)(v1 + 448) = 0u;
  *(_OWORD *)(v1 + 472) = 0u;
  *(_OWORD *)(v1 + 488) = 0u;
  *(_DWORD *)(v1 + 504) = 0;
  *(_DWORD *)(v1 + 544) = 0;
  *(_OWORD *)(v1 + 512) = 0u;
  *(_OWORD *)(v1 + 528) = 0u;
  *(_DWORD *)(v1 + 584) = 0;
  *(_OWORD *)(v1 + 552) = 0u;
  *(_OWORD *)(v1 + 568) = 0u;
  *(_DWORD *)(v1 + 624) = 0;
  *(_OWORD *)(v1 + 592) = 0u;
  *(_OWORD *)(v1 + 608) = 0u;
  *(_DWORD *)(v1 + 664) = 0;
  *(_OWORD *)(v1 + 632) = 0u;
  *(_OWORD *)(v1 + 648) = 0u;
  *(_DWORD *)(v1 + 704) = 0;
  *(_OWORD *)(v1 + 672) = 0u;
  *(_OWORD *)(v1 + 688) = 0u;
  *(_DWORD *)(v1 + 744) = 0;
  *(_OWORD *)(v1 + 712) = 0u;
  *(_OWORD *)(v1 + 728) = 0u;
  *(_DWORD *)(v1 + 784) = 0;
  *(_OWORD *)(v1 + 752) = 0u;
  *(_OWORD *)(v1 + 768) = 0u;
  *(_DWORD *)(v1 + 824) = 0;
  *(_OWORD *)(v1 + 792) = 0u;
  *(_OWORD *)(v1 + 808) = 0u;
  *(_DWORD *)(v1 + 864) = 0;
  *(_OWORD *)(v1 + 832) = 0u;
  *(_OWORD *)(v1 + 848) = 0u;
  *(_DWORD *)(v1 + 904) = 0;
  *(_OWORD *)(v1 + 872) = 0u;
  *(_OWORD *)(v1 + 888) = 0u;
  *(_DWORD *)(v1 + 944) = 0;
  *(_OWORD *)(v1 + 912) = 0u;
  *(_OWORD *)(v1 + 928) = 0u;
  *(_DWORD *)(v1 + 984) = 0;
  *(_OWORD *)(v1 + 952) = 0u;
  *(_OWORD *)(v1 + 968) = 0u;
  *(_DWORD *)(v1 + 1024) = 0;
  *(_OWORD *)(v1 + 992) = 0u;
  *(_OWORD *)(v1 + 1008) = 0u;
  *(_DWORD *)(v1 + 1064) = 0;
  *(_OWORD *)(v1 + 1032) = 0u;
  *(_OWORD *)(v1 + 1048) = 0u;
  *(_DWORD *)(v1 + 1104) = 0;
  *(_OWORD *)(v1 + 1088) = 0u;
  *(_OWORD *)(v1 + 1072) = 0u;
  *(_DWORD *)(v1 + 1144) = 0;
  *(_OWORD *)(v1 + 1112) = 0u;
  *(_OWORD *)(v1 + 1128) = 0u;
  *(_DWORD *)(v1 + 1184) = 0;
  *(_OWORD *)(v1 + 1168) = 0u;
  *(_OWORD *)(v1 + 1152) = 0u;
  *(_DWORD *)(v1 + 1224) = 0;
  *(_OWORD *)(v1 + 1192) = 0u;
  *(_OWORD *)(v1 + 1208) = 0u;
  *(_DWORD *)(v1 + 1264) = 0;
  *(_OWORD *)(v1 + 1248) = 0u;
  *(_OWORD *)(v1 + 1232) = 0u;
  *(_DWORD *)(v1 + 1304) = 0;
  *(_OWORD *)(v1 + 1272) = 0u;
  *(_OWORD *)(v1 + 1288) = 0u;
  type metadata accessor for AtomicBuffer<ObjectCache<Color.Resolved, CGColorRef>.Data>();
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  *(void *)(result + 24) = v1;
  *(_DWORD *)(result + 32) = 0;
  v0[3] = 0;
  v0[4] = result;
  v0[2] = closure #1 in variable initialization expression of static Color.Resolved.cache;
  static Color.Resolved.cache = (uint64_t)v0;
  return result;
}

{
  void *v0;
  uint64_t v1;
  uint64_t result;

  type metadata accessor for ObjectCache<Color.Resolved, NSObject>(0, &lazy cache variable for type metadata for ObjectCache<Color.Resolved, NSObject>, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, unint64_t))type metadata accessor for ObjectCache);
  unint64_t v0 = (void *)swift_allocObject();
  type metadata accessor for ObjectCache<Color.Resolved, NSObject>(0, &lazy cache variable for type metadata for ObjectCache<Color.Resolved, NSObject>.Item, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, unint64_t))type metadata accessor for ObjectCache.Item);
  uint64_t v1 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(void *)(v1 + 16) = 32;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_DWORD *)(v1 + 64) = 0;
  *(_OWORD *)(v1 + 72) = 0u;
  *(_OWORD *)(v1 + 88) = 0u;
  *(_DWORD *)(v1 + 104) = 0;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 128) = 0u;
  *(_DWORD *)(v1 + 144) = 0;
  *(_OWORD *)(v1 + 152) = 0u;
  *(_OWORD *)(v1 + 168) = 0u;
  *(_DWORD *)(v1 + 184) = 0;
  *(_OWORD *)(v1 + 192) = 0u;
  *(_OWORD *)(v1 + 208) = 0u;
  *(_DWORD *)(v1 + 224) = 0;
  *(_OWORD *)(v1 + 232) = 0u;
  *(_OWORD *)(v1 + 248) = 0u;
  *(_DWORD *)(v1 + 264) = 0;
  *(_DWORD *)(v1 + 304) = 0;
  *(_OWORD *)(v1 + 272) = 0u;
  *(_OWORD *)(v1 + 288) = 0u;
  *(_DWORD *)(v1 + 344) = 0;
  *(_OWORD *)(v1 + 312) = 0u;
  *(_OWORD *)(v1 + 328) = 0u;
  *(_DWORD *)(v1 + 384) = 0;
  *(_OWORD *)(v1 + 352) = 0u;
  *(_OWORD *)(v1 + 368) = 0u;
  *(_DWORD *)(v1 + 424) = 0;
  *(_OWORD *)(v1 + 392) = 0u;
  *(_OWORD *)(v1 + 408) = 0u;
  *(_DWORD *)(v1 + 464) = 0;
  *(_OWORD *)(v1 + 432) = 0u;
  *(_OWORD *)(v1 + 448) = 0u;
  *(_OWORD *)(v1 + 472) = 0u;
  *(_OWORD *)(v1 + 488) = 0u;
  *(_DWORD *)(v1 + 504) = 0;
  *(_DWORD *)(v1 + 544) = 0;
  *(_OWORD *)(v1 + 512) = 0u;
  *(_OWORD *)(v1 + 528) = 0u;
  *(_DWORD *)(v1 + 584) = 0;
  *(_OWORD *)(v1 + 552) = 0u;
  *(_OWORD *)(v1 + 568) = 0u;
  *(_DWORD *)(v1 + 624) = 0;
  *(_OWORD *)(v1 + 592) = 0u;
  *(_OWORD *)(v1 + 608) = 0u;
  *(_DWORD *)(v1 + 664) = 0;
  *(_OWORD *)(v1 + 632) = 0u;
  *(_OWORD *)(v1 + 648) = 0u;
  *(_DWORD *)(v1 + 704) = 0;
  *(_OWORD *)(v1 + 672) = 0u;
  *(_OWORD *)(v1 + 688) = 0u;
  *(_DWORD *)(v1 + 744) = 0;
  *(_OWORD *)(v1 + 712) = 0u;
  *(_OWORD *)(v1 + 728) = 0u;
  *(_DWORD *)(v1 + 784) = 0;
  *(_OWORD *)(v1 + 752) = 0u;
  *(_OWORD *)(v1 + 768) = 0u;
  *(_DWORD *)(v1 + 824) = 0;
  *(_OWORD *)(v1 + 792) = 0u;
  *(_OWORD *)(v1 + 808) = 0u;
  *(_DWORD *)(v1 + 864) = 0;
  *(_OWORD *)(v1 + 832) = 0u;
  *(_OWORD *)(v1 + 848) = 0u;
  *(_DWORD *)(v1 + 904) = 0;
  *(_OWORD *)(v1 + 872) = 0u;
  *(_OWORD *)(v1 + 888) = 0u;
  *(_DWORD *)(v1 + 944) = 0;
  *(_OWORD *)(v1 + 912) = 0u;
  *(_OWORD *)(v1 + 928) = 0u;
  *(_DWORD *)(v1 + 984) = 0;
  *(_OWORD *)(v1 + 952) = 0u;
  *(_OWORD *)(v1 + 968) = 0u;
  *(_DWORD *)(v1 + 1024) = 0;
  *(_OWORD *)(v1 + 992) = 0u;
  *(_OWORD *)(v1 + 1008) = 0u;
  *(_DWORD *)(v1 + 1064) = 0;
  *(_OWORD *)(v1 + 1032) = 0u;
  *(_OWORD *)(v1 + 1048) = 0u;
  *(_DWORD *)(v1 + 1104) = 0;
  *(_OWORD *)(v1 + 1088) = 0u;
  *(_OWORD *)(v1 + 1072) = 0u;
  *(_DWORD *)(v1 + 1144) = 0;
  *(_OWORD *)(v1 + 1112) = 0u;
  *(_OWORD *)(v1 + 1128) = 0u;
  *(_DWORD *)(v1 + 1184) = 0;
  *(_OWORD *)(v1 + 1168) = 0u;
  *(_OWORD *)(v1 + 1152) = 0u;
  *(_DWORD *)(v1 + 1224) = 0;
  *(_OWORD *)(v1 + 1192) = 0u;
  *(_OWORD *)(v1 + 1208) = 0u;
  *(_DWORD *)(v1 + 1264) = 0;
  *(_OWORD *)(v1 + 1248) = 0u;
  *(_OWORD *)(v1 + 1232) = 0u;
  *(_DWORD *)(v1 + 1304) = 0;
  *(_OWORD *)(v1 + 1272) = 0u;
  *(_OWORD *)(v1 + 1288) = 0u;
  type metadata accessor for AtomicBuffer<ObjectCache<Color.Resolved, NSObject>.Data>();
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  *(void *)(result + 24) = v1;
  *(_DWORD *)(result + 32) = 0;
  v0[3] = 0;
  v0[4] = result;
  v0[2] = closure #1 in variable initialization expression of static Color.Resolved.cache;
  static Color.Resolved.cache = (uint64_t)v0;
  return result;
}

{
  uint64_t result;

  type metadata accessor for MutableBox<[ObjectIdentifier : DynamicPropertyCache.Fields]>();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = MEMORY[0x263F8EE80];
  static DynamicPropertyCache.cache = (_UNKNOWN *)result;
  return result;
}

void type metadata accessor for ObjectCache<Color.Resolved, CGColorRef>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, uint64_t, unint64_t))
{
  if (!*a2)
  {
    type metadata accessor for CGColorRef(255);
    uint64_t v7 = v6;
    unint64_t v8 = lazy protocol witness table accessor for type Color.Resolved and conformance Color.Resolved();
    unint64_t v9 = a3(a1, &type metadata for Color.Resolved, v7, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

void type metadata accessor for ObjectCache<Color.Resolved, NSObject>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = type metadata accessor for NSObject();
    unint64_t v7 = lazy protocol witness table accessor for type Color.Resolved and conformance Color.Resolved();
    unint64_t v8 = a3(a1, &type metadata for Color.Resolved, v6, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t type metadata accessor for ObjectCache()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for ObjectCache.Item()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for ObjectCache.Data()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for AtomicBuffer<ObjectCache<Color.Resolved, NSObject>.Data>()
{
  if (!lazy cache variable for type metadata for AtomicBuffer<ObjectCache<Color.Resolved, NSObject>.Data>)
  {
    type metadata accessor for ObjectCache<Color.Resolved, NSObject>(255, &lazy cache variable for type metadata for ObjectCache<Color.Resolved, NSObject>.Data, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, unint64_t))type metadata accessor for ObjectCache.Data);
    unint64_t v0 = type metadata accessor for AtomicBuffer();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<ObjectCache<Color.Resolved, NSObject>.Data>);
    }
  }
}

void type metadata accessor for AtomicBuffer<ObjectCache<Color.Resolved, CGColorRef>.Data>()
{
  if (!lazy cache variable for type metadata for AtomicBuffer<ObjectCache<Color.Resolved, CGColorRef>.Data>)
  {
    type metadata accessor for ObjectCache<Color.Resolved, CGColorRef>(255, (unint64_t *)&lazy cache variable for type metadata for ObjectCache<Color.Resolved, CGColorRef>.Data, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t, unint64_t))type metadata accessor for ObjectCache.Data);
    unint64_t v0 = type metadata accessor for AtomicBuffer();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<ObjectCache<Color.Resolved, CGColorRef>.Data>);
    }
  }
}

uint64_t NSAttributedString.measured(requestedSize:lineLimit:lowerLineLimit:minScaleFactor:bodyHeadOutdent:widthIsFlexible:kitCache:isCollapsible:wantsNumberOfLineFragments:context:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, char a5@<W4>, uint64_t *a6@<X5>, char a7@<W6>, char a8@<W7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, double a12@<D2>, double a13@<D3>, uint64_t a14)
{
  uint64_t v15 = v14;
  uint64_t v22 = *a6;
  unsigned __int8 v53 = 0;
  uint64_t v23 = one-time initialization token for kitLink;
  uint64_t v51 = v22;
  swift_unknownObjectRetain();
  if (v23 != -1) {
    swift_once();
  }
  uint64_t v24 = static NSAttributedStringKey.kitLink;
  id v25 = objc_msgSend(v15, sel_length);
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = &v53;
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = closure #1 in NSAttributedString.hasLinkAttributes.getterpartial apply;
  *(void *)(v27 + 24) = v26;
  *(void *)&long long v56 = thunk for @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()partial apply;
  *((void *)&v56 + 1) = v27;
  *(void *)&long long aBlock = MEMORY[0x263EF8330];
  *((void *)&aBlock + 1) = 1107296256;
  *(void *)&long long v55 = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  *((void *)&v55 + 1) = &block_descriptor_29;
  char v28 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v15, sel_enumerateAttribute_inRange_options_usingBlock_, v24, 0, v25, 0, v28);
  _Block_release(v28);
  LOBYTE(v28) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v28)
  {
    __break(1u);
  }
  else
  {
    char v45 = a4 & 1;
    int v30 = v53;
    swift_release();
    uint64_t v31 = *(void *)(a14 + 16);
    swift_retain_n();
    os_unfair_lock_lock((os_unfair_lock_t)(v31 + 16));
    uint64_t v32 = *(void **)(v31 + 24);
    double v33 = 0.0;
    if (a12 < 1.0) {
      double v33 = a12;
    }
    if (a12 <= 0.0) {
      double v33 = COERCE_DOUBLE(1);
    }
    objc_msgSend(*(id *)(v31 + 24), sel_setMinimumScaleFactor_, v33);
    objc_msgSend(v32, sel_setScaledLineHeight_, 0.0);
    objc_msgSend(v32, sel_setScaledBaselineOffset_, 0.0);
    if (a1 <= 1) {
      uint64_t v34 = 1;
    }
    else {
      uint64_t v34 = a1;
    }
    if (a2) {
      uint64_t v35 = 0;
    }
    else {
      uint64_t v35 = v34;
    }
    objc_msgSend(v32, sel_setMaximumNumberOfLines_, v35);
    objc_msgSend(v32, sel_setCachesLayout_, 1);
    objc_msgSend(v32, sel_setLayout_, v51);
    objc_msgSend(v32, sel_setWantsNumberOfLineFragments_, 0);
    if (v30) {
      uint64_t v36 = 8;
    }
    else {
      uint64_t v36 = 0;
    }
    objc_msgSend(v32, sel_setActiveRenderers_, v36);
    *(void *)&long long v56 = closure #2 in closure #1 in TextDrawingContext.withStringDrawingContext<A>(minScaleFactor:lineLimit:kitCache:useNSLayoutManager:do:);
    *((void *)&v56 + 1) = 0;
    *(void *)&long long aBlock = MEMORY[0x263EF8330];
    *((void *)&aBlock + 1) = 1107296256;
    *(void *)&long long v55 = thunk for @escaping @callee_guaranteed (@guaranteed [NSAttributedStringKey : Any]?, @unowned Int) -> (@owned [NSAttributedStringKey : Any]?);
    *((void *)&v55 + 1) = &block_descriptor_32_0;
    __int16 v37 = _Block_copy(&aBlock);
    objc_msgSend(v32, sel_setLinkTextAttributesProvider_, v37);
    _Block_release(v37);
    closure #1 in NSAttributedString.measured(requestedSize:lineLimit:lowerLineLimit:minScaleFactor:bodyHeadOutdent:widthIsFlexible:kitCache:isCollapsible:wantsNumberOfLineFragments:context:)(*(void **)(v31 + 24), a8 & 1, a3, v45, v15, a6, a1, a2 & 1, (uint64_t)&aBlock, a13, a10, a11, a5 & 1, a7 & 1);
    os_unfair_lock_unlock((os_unfair_lock_t)(v31 + 16));
    swift_unknownObjectRelease();
    uint64_t result = swift_release_n();
    uint64_t v38 = v57;
    uint64_t v39 = v58;
    char v40 = v59;
    char v41 = v60;
    long long v42 = v55;
    long long v43 = v56;
    *(_OWORD *)a9 = aBlock;
    *(_OWORD *)(a9 + 16) = v42;
    *(_OWORD *)(a9 + 32) = v43;
    *(void *)(a9 + 48) = v38;
    *(void *)(a9 + 56) = v39;
    *(unsigned char *)(a9 + 64) = v40;
    *(unsigned char *)(a9 + 65) = v41;
  }
  return result;
}

unint64_t closure #1 in NSAttributedString.measured(requestedSize:lineLimit:lowerLineLimit:minScaleFactor:bodyHeadOutdent:widthIsFlexible:kitCache:isCollapsible:wantsNumberOfLineFragments:context:)@<X0>(void *a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, void *a5@<X4>, void *a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, double a12@<D2>, char a13, unsigned __int8 a14)
{
  int v77 = a8;
  uint64_t v76 = a7;
  uint64_t v24 = type metadata accessor for CharacterSet();
  uint64_t v25 = *(void *)(v24 - 8);
  double v26 = MEMORY[0x270FA5388](v24);
  char v28 = (char *)&v76 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0 || a10 > 0.0) {
    objc_msgSend(a1, sel_setWantsNumberOfLineFragments_, 1, v26, v76);
  }
  double v29 = 0.0;
  if ((a4 & 1) == 0 && a3 >= 1 && (uint64_t)objc_msgSend(a5, sel_length) >= 1)
  {
    double v30 = COERCE_DOUBLE(NSAttributedString.limitedFontHeight(by:)(a3));
    if (v31) {
      double v29 = 0.0;
    }
    else {
      double v29 = v30;
    }
  }
  if (a11 == INFINITY) {
    double v32 = 1.79769313e308;
  }
  else {
    double v32 = a11;
  }
  if (a11 > 0.0) {
    double v33 = v32;
  }
  else {
    double v33 = COERCE_DOUBLE(1);
  }
  if (a12 == INFINITY) {
    double v34 = 1.79769313e308;
  }
  else {
    double v34 = a12;
  }
  if (a12 <= 0.0) {
    double v34 = COERCE_DOUBLE(1);
  }
  double v79 = v29;
  if (v29 <= v34) {
    double v29 = v34;
  }
  if (one-time initialization token for swiftUIOptions != -1) {
    swift_once();
  }
  objc_msgSend(a5, sel_boundingRectWithSize_options_context_, static NSStringDrawingOptions.swiftUIOptions, a1, v33, v29, v76);
  CGFloat v36 = v35;
  CGFloat v38 = v37;
  double v40 = v39;
  CGFloat v42 = v41;
  *a6 = objc_msgSend(a1, sel_layout);
  swift_unknownObjectRelease();
  objc_msgSend(a1, sel_setLayout_, 0);
  objc_msgSend(a1, sel_scaledLineHeight);
  double v78 = v43;
  CGFloat v81 = v36;
  if (v43 == 0.0)
  {
    v84.origin.CGFloat x = v36;
    v84.origin.CGFloat y = v38;
    v84.size.CGFloat width = v40;
    CGFloat v44 = v42;
    v84.size.CGFloat height = v42;
    double Height = CGRectGetHeight(v84);
  }
  else
  {
    CGFloat v44 = v42;
    objc_msgSend(a1, sel_scaledLineHeight);
  }
  double v46 = Height;
  double v80 = a12;
  if (a10 <= 0.0) {
    goto LABEL_49;
  }
  if (objc_msgSend(a1, sel_numberOfLineFragments) != (id)1)
  {
    id v47 = objc_msgSend(a5, sel_string);
    uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v50 = v49;

    uint64_t v82 = v48;
    uint64_t v83 = v50;
    static CharacterSet.newlines.getter();
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v51 = StringProtocol.components(separatedBy:)();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v28, v24);
    swift_bridgeObjectRelease();
    uint64_t v52 = *(void *)(v51 + 16);
    if (v52)
    {
      uint64_t v53 = v51 + 16 * (v52 - 1);
      uint64_t v54 = *(void *)(v53 + 32);
      unint64_t v55 = *(void *)(v53 + 40);
      swift_bridgeObjectRelease();
      uint64_t v56 = HIBYTE(v55) & 0xF;
      if ((v55 & 0x2000000000000000) == 0) {
        uint64_t v56 = v54 & 0xFFFFFFFFFFFFLL;
      }
      uint64_t v57 = v56 ? v52 : v52 - 1;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v57 = 0;
    }
    uint64_t v58 = v76;
    if (v57 < v76) {
      uint64_t v58 = v57;
    }
    id v59 = (id)((v77 & 1) != 0 ? v57 : v58);
    if (v59 != objc_msgSend(a1, sel_numberOfLineFragments))
    {
LABEL_49:
      double v61 = v46;
      double Width = a11;
      if (a13) {
        goto LABEL_61;
      }
      goto LABEL_59;
    }
  }
  v85.origin.CGFloat y = v38;
  v85.origin.CGFloat x = v81;
  v85.size.CGFloat width = v40;
  v85.size.CGFloat height = v44;
  double v60 = CGRectGetWidth(v85) + a10;
  double v61 = v46;
  if (a11 <= 0.0)
  {
    if (v60 <= COERCE_DOUBLE(1)) {
      double v40 = v60;
    }
    else {
      double v40 = COERCE_DOUBLE(1);
    }
    double Width = a11;
    if (a13) {
      goto LABEL_61;
    }
    goto LABEL_59;
  }
  double v63 = 1.79769313e308;
  if (v60 <= 1.79769313e308) {
    double v63 = v60;
  }
  if (v60 > a11) {
    double v60 = a11;
  }
  if (a11 == INFINITY) {
    double v40 = v63;
  }
  else {
    double v40 = v60;
  }
  double Width = a11;
  if ((a13 & 1) == 0)
  {
LABEL_59:
    v86.origin.CGFloat x = v81;
    v86.origin.CGFloat y = v38;
    v86.size.CGFloat width = v40;
    v86.size.CGFloat height = v44;
    double Width = 0.0;
    if (CGRectGetWidth(v86) != COERCE_DOUBLE(1))
    {
      v87.origin.CGFloat x = v81;
      v87.origin.CGFloat y = v38;
      v87.size.CGFloat width = v40;
      v87.size.CGFloat height = v44;
      double Width = CGRectGetWidth(v87);
    }
  }
LABEL_61:
  unsigned __int8 v64 = objc_msgSend(a1, sel_hasTruncatedRanges);
  objc_msgSend(a1, sel_actualScaleFactor);
  uint64_t v66 = v65;
  objc_msgSend(a1, sel_firstBaselineOffset);
  uint64_t v68 = v67;
  unint64_t v69 = &selRef_baselineOffset;
  if (v78 != 0.0) {
    unint64_t v69 = &selRef_scaledBaselineOffset;
  }
  objc_msgSend(a1, *v69, v78);
  uint64_t v71 = v70;
  unsigned int v72 = objc_msgSend(a1, sel_wantsNumberOfLineFragments);
  if (v72)
  {
    unint64_t result = (unint64_t)objc_msgSend(a1, sel_numberOfLineFragments);
    if ((result & 0x8000000000000000) == 0) {
      goto LABEL_67;
    }
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  unint64_t result = 0;
LABEL_67:
  double v74 = 0.0;
  if (v61 == COERCE_DOUBLE(1)) {
    double v75 = 0.0;
  }
  else {
    double v75 = v61;
  }
  if ((a14 & (v75 > v80)) != 0) {
    double v75 = 0.0;
  }
  else {
    double v74 = Width;
  }
  if (v75 <= v79) {
    double v75 = v79;
  }
  *(double *)a9 = v74;
  *(double *)(a9 + 8) = v75;
  *(void *)(a9 + 16) = v66;
  *(void *)(a9 + 24) = v68;
  *(void *)(a9 + 32) = v71;
  *(void *)(a9 + 40) = 0;
  *(double *)(a9 + 48) = a11;
  *(void *)(a9 + 56) = result;
  *(unsigned char *)(a9 + 64) = v72 ^ 1;
  *(unsigned char *)(a9 + 65) = v64;
  return result;
}

unint64_t NSAttributedString.limitedFontHeight(by:)(uint64_t a1)
{
  unint64_t result = (unint64_t)NSAttributedString.kitFont()();
  uint64_t v3 = (const __CTFont *)result;
  if (*(double *)&result != 0.0)
  {
    CoreFontGetLineHeight(0, (void *)result);
    double v5 = v4;
    double Leading = CoreFontGetLeading(0, v3);

    if (a1 < 1) {
      *(double *)&unint64_t result = 0.0;
    }
    else {
      *(double *)&unint64_t result = v5 * (double)a1 + Leading * (double)(a1 - 1);
    }
  }
  return result;
}

uint64_t CoreFontGetLineHeight(uint64_t a1, void *a2)
{
  return [a2 lineHeight];
}

CGFloat CoreFontGetLeading(int a1, CTFontRef font)
{
  return CTFontGetLeading(font);
}

NSObject_optional __swiftcall NSAttributedString.kitFont()()
{
  if (one-time initialization token for kitFont != -1) {
    swift_once();
  }
  if (objc_msgSend(v0, sel_attribute_atIndex_effectiveRange_, static NSAttributedStringKey.kitFont, 0, 0))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v4, 0, sizeof(v4));
  }
  outlined init with take of Any?((uint64_t)v4, (uint64_t)v5);
  if (v6)
  {
    type metadata accessor for NSObject();
    if (swift_dynamicCast()) {
      uint64_t v2 = v3;
    }
    else {
      uint64_t v2 = 0;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v5);
    uint64_t v2 = 0;
  }
  result.value.isCGFloat a = v2;
  result.is_nil = v1;
  return result;
}

unint64_t type metadata accessor for NSObject()
{
  unint64_t result = lazy cache variable for type metadata for NSObject;
  if (!lazy cache variable for type metadata for NSObject)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  }
  return result;
}

void ViewOrigin.value.setter(double a1, double a2)
{
  *uint64_t v2 = a1;
  v2[1] = a2;
}

uint64_t specialized static Text.Measurements._makeProperty<A>(in:container:fieldOffset:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  swift_beginAccess();
  LODWORD(v4) = *(_DWORD *)(v4 + 16);
  type metadata accessor for TextSizeCache();
  double v5 = (void *)swift_allocObject();
  _OWORD v5[2] = 0;
  type metadata accessor for PropertyList.Tracker();
  uint64_t v6 = swift_allocObject();
  type metadata accessor for AtomicBuffer<TrackerData>();
  uint64_t v7 = swift_allocObject();
  *(_DWORD *)(v7 + 16) = 0;
  uint64_t v8 = MEMORY[0x263F8EE80];
  *(void *)(v7 + 24) = 0;
  *(void *)(v7 + 32) = v8;
  uint64_t v9 = MEMORY[0x263F8EE78];
  *(void *)(v7 + 40) = v8;
  *(void *)(v7 + 48) = v9;
  *(unsigned char *)(v7 + 56) = 0;
  *(void *)(v6 + 16) = v7;
  void v5[3] = v6;
  v5[4] = v9;
  specialized _DynamicPropertyBuffer.append<A>(_:fieldOffset:)(v4, (uint64_t)v5, a2);
  return swift_release();
}

uint64_t type metadata accessor for TextSizeCache()
{
  return self;
}

uint64_t specialized _DynamicPropertyBuffer.append<A>(_:fieldOffset:)(int a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for BoxVTable<Text.Measurements.Box>(0, &lazy cache variable for type metadata for BoxVTable<Text.Measurements.Box>);
  uint64_t v8 = v7;
  uint64_t v9 = UnsafeHeterogeneousBuffer.allocate(bytes:)(32);
  *(void *)uint64_t v9 = v8;
  *(void *)(v9 + 8) = 32;
  *(_DWORD *)(v9 + 16) = a1;
  *(void *)(v9 + 24) = a2;
  uint64_t v10 = *v3;
  if (!*v3) {
    goto LABEL_16;
  }
  if (v9 - v10 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (v9 - v10 > 0x7FFFFFFF)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  int v11 = *((_DWORD *)v3 + 3);
  BOOL v12 = __OFADD__(v11, 1);
  int v13 = v11 + 1;
  if (v12)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  *((_DWORD *)v3 + 3) = v13;
  unsigned int v14 = *(_DWORD *)(v9 + 12) & 0x80000000;
  *(_DWORD *)(v9 + 12) = v14;
  if (a3 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (a3 > 0x7FFFFFFF)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if ((a3 & 0x80000000) != 0)
  {
LABEL_17:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  *(_DWORD *)(v9 + 12) = v14 | a3;

  return swift_retain();
}

void type metadata accessor for BoxVTable<Text.Measurements.Box>(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = type metadata accessor for BoxVTable();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

uint64_t _ViewInputs.requestedImageRepresentation.setter(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t *))
{
  swift_retain();
  a3(v3, a1, a2, &v8);
  return swift_release();
}

double static EnvironmentalView._makeView(view:inputs:)@<D0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  void (*v20)(uint64_t *__return_ptr, int *, unint64_t *, uint64_t, uint64_t);
  double result;
  unsigned int v22;
  unsigned int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v35;
  uint64_t v36;
  double v37;
  int v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;

  uint64_t v70 = *MEMORY[0x263EF8340];
  unsigned int v3 = *a1;
  unint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 16);
  char v31 = *(_DWORD *)(a2 + 24);
  double v32 = *(_DWORD *)(a2 + 8);
  double v33 = *(_DWORD *)(a2 + 32);
  double v29 = *(_DWORD *)(a2 + 36);
  double v30 = *(_DWORD *)(a2 + 28);
  uint64_t v6 = *(void *)(a2 + 40);
  uint64_t v7 = *(void *)(a2 + 48);
  uint64_t v27 = *(_DWORD *)(a2 + 60);
  char v28 = *(_DWORD *)(a2 + 56);
  uint64_t v25 = *(_DWORD *)(a2 + 68);
  double v26 = *(_DWORD *)(a2 + 64);
  uint64_t v23 = *(_DWORD *)(a2 + 76);
  uint64_t v24 = *(_DWORD *)(a2 + 72);
  uint64_t v22 = *(_DWORD *)(a2 + 80);
  swift_beginAccess();
  unint64_t v8 = EnvironmentalViewChild.init(view:env:)(v3, *(unsigned int *)(v5 + 16));
  unsigned int v9 = v8;
  uint64_t v11 = v10;
  unint64_t v12 = HIDWORD(v8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v54 = __PAIR64__(v12, v9);
  unint64_t v55 = v11;
  uint64_t v14 = type metadata accessor for EnvironmentalViewChild();
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  _GraphValue.init<A>(_:)((uint64_t)&v54, AssociatedTypeWitness, v14, WitnessTable, &v38);
  int v16 = v38;
  int ShouldRecordTree = AGSubgraphShouldRecordTree();
  char v18 = ShouldRecordTree;
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  uint64_t v54 = v4;
  uint64_t v56 = v5;
  LODWORD(v55) = v32;
  double v61 = v6;
  int v62 = v7;
  id v59 = 0;
  double v60 = v29;
  double v63 = v28;
  unsigned __int8 v64 = v27;
  uint64_t v65 = v26;
  uint64_t v66 = v25;
  uint64_t v67 = v24;
  uint64_t v68 = v23;
  unint64_t v69 = v22;
  uint64_t v57 = v31;
  uint64_t v58 = v30;
  double v35 = v16;
  double v39 = v4;
  double v40 = v32;
  double v41 = v5;
  CGFloat v42 = v31;
  double v43 = v30;
  CGFloat v44 = 0;
  char v45 = v29;
  double v46 = v6;
  id v47 = v7;
  uint64_t v48 = v28;
  uint64_t v49 = v27;
  uint64_t v50 = v26;
  uint64_t v51 = v25;
  uint64_t v52 = v24;
  uint64_t v53 = __PAIR64__(v22, v23);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  char v20 = *(void (**)(uint64_t *__return_ptr, int *, unint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness
                                                                                                  + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v20(&v36, &v35, &v39, AssociatedTypeWitness, AssociatedConformanceWitness);
  id v59 = v33;
  if (v18)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)((uint64_t)&v36, (uint64_t)&v54);
    AGSubgraphEndTreeElement();
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(void *)a3 = v36;
  uint64_t result = v37;
  a3[1] = v37;
  return result;
}

uint64_t static EnvironmentReader._makeViewList(view:inputs:)@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unsigned int v8 = *a1;
  unint64_t v19 = *(void *)a2;
  uint64_t v9 = *(void *)(a2 + 16);
  int v20 = *(_DWORD *)(a2 + 8);
  int v21 = *(_DWORD *)(a2 + 24);
  int v22 = *(_DWORD *)(a2 + 28);
  int v23 = *(_DWORD *)(a2 + 32);
  int v24 = *(_DWORD *)(a2 + 36);
  uint64_t v25 = *(void *)(a2 + 40);
  uint64_t v26 = *(void *)(a2 + 48);
  uint64_t v27 = *(void *)(a2 + 56);
  int v10 = *(_DWORD *)(a2 + 64);
  uint64_t v11 = *(void *)(a2 + 72);
  char v12 = *(unsigned char *)(a2 + 80);
  if (one-time initialization token for introduced != -1) {
    swift_once();
  }
  unsigned int v13 = static _SemanticFeature_v3.introduced;
  if (one-time initialization token for forced != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B0F44FC == 1)
  {
    if ((dyld_program_sdk_at_least() & 1) == 0)
    {
LABEL_7:
      v28[1] = v8;
      unint64_t v29 = v19;
      LODWORD(v30) = v20;
      uint64_t v31 = v9;
      int v32 = v21;
      int v33 = v22;
      int v34 = v23;
      int v35 = v24;
      uint64_t v36 = v25;
      uint64_t v37 = v26;
      uint64_t v38 = v27;
      int v39 = v10;
      uint64_t v40 = v11;
      char v41 = v12;
      type metadata accessor for EnvironmentReader();
      return static _ViewListOutputs.unaryViewList<A>(view:inputs:)((uint64_t)&v29, a5);
    }
  }
  else if (static Semantics.forced < v13)
  {
    goto LABEL_7;
  }
  swift_beginAccess();
  uint64_t v15 = *(unsigned int *)(v9 + 16);
  type metadata accessor for EnvironmentReader();
  swift_getWitnessTable();
  unint64_t v29 = EnvironmentalViewChild.init(view:env:)(v8, v15);
  uint64_t v30 = v16;
  uint64_t v17 = type metadata accessor for EnvironmentalViewChild();
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  _GraphValue.init<A>(_:)((uint64_t)&v29, a3, v17, WitnessTable, v28);
  unint64_t v29 = v19;
  LODWORD(v30) = v20;
  uint64_t v31 = v9;
  int v32 = v21;
  int v33 = v22;
  int v34 = v23;
  int v35 = v24;
  uint64_t v36 = v25;
  uint64_t v37 = v26;
  uint64_t v38 = v27;
  int v39 = v10;
  uint64_t v40 = v11;
  char v41 = v12;
  (*(void (**)(_DWORD *, unint64_t *, uint64_t, uint64_t))(a4 + 32))(v28, &v29, a3, a4);
  return swift_release();
}

uint64_t type metadata accessor for EnvironmentalViewChild()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for EnvironmentReader()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t EnvironmentalViewChild.init(view:env:)(unsigned int a1, uint64_t a2)
{
  type metadata accessor for PropertyList.Tracker();
  uint64_t v4 = swift_allocObject();
  type metadata accessor for AtomicBuffer<TrackerData>();
  uint64_t v5 = swift_allocObject();
  *(_DWORD *)(v5 + 16) = 0;
  uint64_t v6 = MEMORY[0x263F8EE80];
  *(void *)(v5 + 24) = 0;
  *(void *)(v5 + 32) = v6;
  uint64_t v7 = MEMORY[0x263F8EE78];
  *(void *)(v5 + 40) = v6;
  *(void *)(v5 + 48) = v7;
  *(unsigned char *)(v5 + 56) = 0;
  *(void *)(v4 + 16) = v5;
  return a1 | (unint64_t)(a2 << 32);
}

uint64_t _ViewInputs.imageAccessibilityProvider.setter(uint64_t a1, uint64_t a2)
{
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, a1, a2);
  return swift_release();
}

double static Image._makeView(view:inputs:)@<D0>(int *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  uint64_t v71 = *MEMORY[0x263EF8340];
  int v49 = *a1;
  int v4 = *(_DWORD *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unsigned int v6 = *(_DWORD *)(a2 + 24);
  unsigned int v7 = *(_DWORD *)(a2 + 28);
  unsigned int v8 = *(_DWORD *)(a2 + 32);
  unsigned int v9 = *(_DWORD *)(a2 + 36);
  uint64_t v10 = *(void *)(a2 + 40);
  uint64_t v11 = *(void *)(a2 + 48);
  unsigned int v12 = *(_DWORD *)(a2 + 56);
  unsigned int v13 = *(_DWORD *)(a2 + 60);
  unsigned int v15 = *(_DWORD *)(a2 + 64);
  unsigned int v14 = *(_DWORD *)(a2 + 68);
  unsigned int v16 = *(_DWORD *)(a2 + 72);
  unsigned int v17 = *(_DWORD *)(a2 + 76);
  int v18 = *(_DWORD *)(a2 + 80);
  unint64_t v62 = *(void *)a2;
  uint64_t v3 = v62;
  int v45 = v4;
  unsigned int v46 = v8;
  int v63 = v4;
  uint64_t v64 = v5;
  unsigned int v42 = v9;
  unsigned int v43 = v6;
  *(void *)&long long v65 = __PAIR64__(v7, v6);
  unsigned int v47 = v7;
  *((void *)&v65 + 1) = __PAIR64__(v9, v8);
  uint64_t v66 = v10;
  uint64_t v67 = v11;
  unint64_t v44 = __PAIR64__(v13, v12);
  *(void *)&long long v68 = __PAIR64__(v13, v12);
  *((void *)&v68 + 1) = __PAIR64__(v14, v15);
  unint64_t v69 = __PAIR64__(v17, v16);
  int v70 = v18;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (specialized _GraphInputs.popLast<A, B>(_:)())
  {
    v52[0] = v49;
    unint64_t v53 = v62;
    int v54 = v63;
    uint64_t v55 = v64;
    long long v56 = v65;
    uint64_t v57 = v66;
    uint64_t v58 = v67;
    long long v59 = v68;
    unint64_t v60 = v69;
    int v61 = v70;
    (*(void (**)(_DWORD *, unint64_t *))(v19 + 8))(v52, &v53);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    unsigned int v40 = v17;
    unsigned int v41 = v16;
    swift_retain_n();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v21 = specialized find<A>(_:key:)(v62);
    if (v21) {
      char v22 = *(unsigned char *)(v21 + 72);
    }
    else {
      char v22 = 0;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    if ((v22 & 8) != 0) {
      char v23 = 22;
    }
    else {
      char v23 = 18;
    }
    if (v22) {
      char v24 = v23;
    }
    else {
      char v24 = 0;
    }
    char v25 = v24 & 0xF7 | (8 * (v42 & 1));
    swift_retain_n();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v26 = specialized find<A>(_:key:)(v62);
    if (v26) {
      char v27 = *(unsigned char *)(v26 + 72) ^ 1 | v22;
    }
    else {
      char v27 = 1;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    if (v27) {
      char v28 = v25;
    }
    else {
      char v28 = v25 | 0x10;
    }
    uint64_t v50 = MEMORY[0x263F8EE78];
    int v29 = *MEMORY[0x263F288F8];
    LODWORD(v51) = 0;
    HIDWORD(v51) = v29;
    swift_retain_n();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v30 = specialized find<A>(_:key:)(v62);
    if (v30)
    {
      uint64_t v31 = (uint64_t *)(v30 + 72);
      int v32 = (uint64_t *)(v30 + 80);
    }
    else
    {
      uint64_t v31 = (uint64_t *)&static _GraphInputs.ImageAccessibilityProviderKey.defaultValue;
      int v32 = (uint64_t *)&static _GraphInputs.ImageAccessibilityProviderKey.defaultValue + 1;
      if (one-time initialization token for defaultValue != -1) {
        swift_once();
      }
    }
    uint64_t v33 = *v32;
    uint64_t v34 = *v31;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    LOBYTE(v52[0]) = v28;
    unint64_t v53 = v62;
    int v54 = v45;
    uint64_t v55 = v5;
    *(void *)&long long v56 = __PAIR64__(v47, v43);
    *((void *)&v56 + 1) = __PAIR64__(v42, v46);
    uint64_t v57 = v10;
    uint64_t v58 = v11;
    *(void *)&long long v59 = v44;
    *((void *)&v59 + 1) = __PAIR64__(v14, v15);
    unint64_t v60 = __PAIR64__(v40, v41);
    int v61 = v18;
    static Image.makeImageViewChild<A>(_:image:options:inputs:outputs:)(v34, v49, v52, (uint64_t)&v53, (double *)&v50, v34, v33);
    swift_retain_n();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v35 = specialized find<A>(_:key:)(v3);
    if (v35)
    {
      uint64_t v36 = *(void *)(v35 + 72);
      uint64_t v37 = *(void *)(v35 + 80);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_release_n();
      swift_release_n();
      uint64_t v38 = a3;
      if (v36)
      {
        unint64_t v53 = v3;
        int v54 = v45;
        uint64_t v55 = v5;
        *(void *)&long long v56 = __PAIR64__(v47, v43);
        *((void *)&v56 + 1) = __PAIR64__(v42, v46);
        uint64_t v57 = v10;
        uint64_t v58 = v11;
        *(void *)&long long v59 = v44;
        *((void *)&v59 + 1) = __PAIR64__(v14, v15);
        unint64_t v60 = __PAIR64__(v40, v41);
        int v61 = v18;
        if ((*(uint64_t (**)(unint64_t *, uint64_t, uint64_t))(v37 + 8))(&v53, v36, v37))
        {
          swift_beginAccess();
          unint64_t v53 = __PAIR64__(*(_DWORD *)(v5 + 16), v49);
          protocol witness for static _AttributeBody._hasDestroySelf.getter in conformance ResetDeltaModifier.ChildPhase();
          lazy protocol witness table accessor for type Image.MakeRepresentableContext and conformance Image.MakeRepresentableContext();
          uint64_t v39 = Attribute.init<A>(body:value:flags:update:)();
          unint64_t v53 = v3;
          int v54 = v45;
          uint64_t v55 = v5;
          *(void *)&long long v56 = __PAIR64__(v47, v43);
          *((void *)&v56 + 1) = __PAIR64__(v42, v46);
          uint64_t v57 = v10;
          uint64_t v58 = v11;
          *(void *)&long long v59 = v44;
          *((void *)&v59 + 1) = __PAIR64__(v14, v15);
          unint64_t v60 = __PAIR64__(v40, v41);
          int v61 = v18;
          (*(void (**)(unint64_t *, uint64_t, uint64_t *, uint64_t, uint64_t))(v37 + 16))(&v53, v39, &v50, v36, v37);
        }
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_release_n();
      swift_release_n();
      uint64_t v38 = a3;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(void *)uint64_t v38 = v50;
    double result = v51;
    v38[1] = v51;
  }
  return result;
}

double static Image.makeImageViewChild<A>(_:image:options:inputs:outputs:)(uint64_t a1, int a2, unsigned char *a3, uint64_t a4, double *a5, uint64_t a6, uint64_t a7)
{
  void (*v35)(void *__return_ptr, int *, uint64_t *, uint64_t, uint64_t);
  double result;
  double *v37;
  uint64_t v38;
  uint64_t AssociatedTypeWitness;
  uint64_t v40;
  uint64_t WitnessTable;
  uint64_t v42;
  _DWORD v43[4];
  uint64_t v44;
  _DWORD *v45;
  unsigned int v46;
  int v47;
  uint64_t v48;
  double *v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  int v62;
  void v63[2];
  int v64[4];
  char v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  int v80;
  long long v81;
  _OWORD v82[2];
  long long v83;
  long long v84;
  _OWORD v85[2];
  long long v86;
  long long v87;
  unsigned char v88[32];
  long long v89;
  _OWORD v90[2];
  uint64_t v91;

  uint64_t v55 = a7;
  long long v56 = a6;
  LODWORD(v48) = a2;
  uint64_t v91 = *MEMORY[0x263EF8340];
  int v49 = a5;
  swift_bridgeObjectRelease();
  LOBYTE(a3) = *a3;
  uint64_t v9 = *(void *)a4;
  int v10 = *(_DWORD *)(a4 + 8);
  uint64_t v11 = *(void *)(a4 + 16);
  unsigned int v12 = *(_DWORD *)(a4 + 24);
  int v13 = *(_DWORD *)(a4 + 28);
  uint64_t v57 = *(_DWORD *)(a4 + 32);
  unsigned int v46 = *(_DWORD *)(a4 + 36);
  unsigned int v47 = v10;
  uint64_t v15 = *(void *)(a4 + 40);
  uint64_t v14 = *(void *)(a4 + 48);
  unint64_t v53 = *(_DWORD *)(a4 + 56);
  int v54 = v12;
  unint64_t v60 = *(_DWORD *)(a4 + 60);
  LODWORD(v61) = v13;
  unsigned int v16 = *(_DWORD *)(a4 + 64);
  unsigned int v17 = *(_DWORD *)(a4 + 68);
  uint64_t v58 = *(_DWORD *)(a4 + 72);
  long long v59 = v16;
  double v51 = *(_DWORD *)(a4 + 76);
  uint64_t v52 = v17;
  uint64_t v50 = *(_DWORD *)(a4 + 80);
  swift_beginAccess();
  int v18 = *(_DWORD *)(v11 + 16);
  long long v65 = (char)a3;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  uint64_t v19 = specialized find<A>(_:key:)(v9);
  if (v19) {
    int v20 = *(_DWORD *)(v19 + 72);
  }
  else {
    int v20 = 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  LODWORD(v66) = v20;
  *(void *)&CGRect v86 = MEMORY[0x263F8EE78];
  DWORD2(v86) = 0;
  BYTE12(v86) = 1;
  *(void *)&CGRect v87 = 1065353216;
  BYTE8(v87) = 1;
  HIDWORD(v87) = 0;
  v88[0] = 1;
  *(_DWORD *)&v88[4] = 0;
  *(_WORD *)&v88[8] = 1;
  *(void *)&v88[12] = 1065353216;
  v88[20] = 1;
  *(_DWORD *)&v88[24] = 0;
  *(_WORD *)&v88[28] = 257;
  unsigned int v42 = v55;
  uint64_t v21 = Image.ImageViewChild.init(view:environment:transaction:position:size:transform:options:parentID:symbolAnimator:symbolEffects:)(v48, v18, v61, v59, v58, v60, &v65, (int *)&v66, (uint64_t)&v81, 0, (uint64_t *)&v86);
  uint64_t v48 = v9;
  int v45 = v43;
  MEMORY[0x270FA5388](v21);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  unint64_t v44 = AssociatedTypeWitness;
  uint64_t v22 = v15;
  unsigned int v40 = type metadata accessor for Image.ImageViewChild();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v23 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v81, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)&v38, v40, MEMORY[0x263F8E628], v23, MEMORY[0x263F8E658], v24);
  __int16 v89 = v84;
  v90[0] = v85[0];
  *(_OWORD *)((char *)v90 + 14) = *(_OWORD *)((char *)v85 + 14);
  CGRect v86 = v81;
  CGRect v87 = v82[0];
  *(_OWORD *)__int16 v88 = v82[1];
  *(_OWORD *)&v88[16] = v83;
  outlined release of Image.ImageViewChild<A>((uint64_t)&v86);
  uint64_t v25 = v14;
  uint64_t v26 = v48;
  uint64_t v27 = v66;
  *(void *)&CGFloat v81 = v48;
  *(void *)&v82[0] = v11;
  int v28 = v47;
  DWORD2(v81) = v47;
  *((void *)&v82[0] + 1) = __PAIR64__(v61, v54);
  *(void *)&v82[1] = __PAIR64__(v46, v57);
  *((void *)&v82[1] + 1) = v22;
  *(void *)&uint64_t v83 = v14;
  uint64_t v29 = v22;
  LODWORD(v22) = v46;
  *((void *)&v83 + 1) = __PAIR64__(v60, v53);
  *(void *)&CGRect v84 = __PAIR64__(v52, v59);
  *((void *)&v84 + 1) = __PAIR64__(v51, v58);
  LODWORD(v85[0]) = v50;
  _ViewInputs.isScrapeable.getter();
  AGGraphSetFlags();
  LODWORD(v45) = v22 | 0x2000;
  uint64_t v30 = v29;
  uint64_t v31 = v44;
  _GraphValue.init(_:)(v27, v64);
  int v32 = v64[0];
  unsigned int ShouldRecordTree = AGSubgraphShouldRecordTree();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  unsigned int v46 = ShouldRecordTree;
  if (ShouldRecordTree) {
    AGSubgraphBeginTreeElement();
  }
  *(void *)&CGFloat v81 = v26;
  *(void *)&v82[0] = v11;
  DWORD2(v81) = v28;
  DWORD2(v82[0]) = v54;
  *((void *)&v82[1] + 1) = v30;
  *(void *)&uint64_t v83 = v25;
  DWORD1(v82[1]) = v45;
  *((void *)&v83 + 1) = __PAIR64__(v60, v53);
  *(void *)&CGRect v84 = __PAIR64__(v52, v59);
  *((void *)&v84 + 1) = __PAIR64__(v51, v58);
  LODWORD(v85[0]) = v50;
  *(void *)((char *)v82 + 12) = v61;
  v43[3] = v32;
  unint64_t v62 = v32;
  uint64_t v66 = v26;
  uint64_t v67 = v28;
  long long v68 = v11;
  unint64_t v69 = v54;
  int v70 = v61;
  uint64_t v71 = (int)v45;
  unsigned int v72 = v30;
  int v73 = v25;
  double v74 = v53;
  double v75 = v60;
  uint64_t v76 = v59;
  int v77 = v52;
  double v78 = v58;
  double v79 = v51;
  double v80 = v50;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v35 = *(void (**)(void *__return_ptr, int *, uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness
                                                                                        + 24);
  swift_retain();
  int v61 = v11;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v35(v63, &v62, &v66, v31, AssociatedConformanceWitness);
  LODWORD(v82[1]) = v57;
  if (v46)
  {
    specialized static _ViewDebug.reallyWrap<A>(_:value:inputs:)((uint64_t)v63, (uint64_t)&v81);
    AGSubgraphEndTreeElement();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release();
  }
  swift_release();
  swift_release();
  double result = *(double *)&v63[1];
  uint64_t v37 = v49;
  *int v49 = *(double *)v63;
  v37[1] = result;
  return result;
}

uint64_t outlined release of Image.ImageViewChild<A>(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  swift_bridgeObjectRelease();
  swift_release();

  return a1;
}

uint64_t type metadata accessor for Image.ImageViewChild()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Image.ImageViewChild.init(view:environment:transaction:position:size:transform:options:parentID:symbolAnimator:symbolEffects:)@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, char *a7@<X6>, int *a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t *a11)
{
  char v12 = *a7;
  int v13 = *a8;
  uint64_t v14 = *a11;
  int v15 = *((_DWORD *)a11 + 2);
  char v16 = *((unsigned char *)a11 + 12);
  int v17 = *((_DWORD *)a11 + 4);
  int v18 = *((_DWORD *)a11 + 5);
  char v19 = *((unsigned char *)a11 + 24);
  int v20 = *((_DWORD *)a11 + 7);
  char v21 = *((unsigned char *)a11 + 32);
  int v22 = *((_DWORD *)a11 + 9);
  char v34 = *((unsigned char *)a11 + 40);
  char v33 = *((unsigned char *)a11 + 41);
  int v23 = *((_DWORD *)a11 + 11);
  int v32 = *((_DWORD *)a11 + 12);
  char v31 = *((unsigned char *)a11 + 52);
  int v30 = *((_DWORD *)a11 + 14);
  char v28 = *((unsigned char *)a11 + 61);
  char v29 = *((unsigned char *)a11 + 60);
  *(_DWORD *)a9 = a1;
  *(_DWORD *)(a9 + 4) = a2;
  *(_DWORD *)(a9 + 8) = a3;
  *(_DWORD *)(a9 + 12) = a4;
  *(_DWORD *)(a9 + 16) = a5;
  *(_DWORD *)(a9 + 20) = a6;
  *(unsigned char *)(a9 + 24) = v12;
  *(_DWORD *)(a9 + 28) = v13;
  type metadata accessor for PropertyList.Tracker();
  uint64_t v24 = swift_allocObject();
  type metadata accessor for AtomicBuffer<TrackerData>();
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  uint64_t v26 = MEMORY[0x263F8EE80];
  uint64_t v27 = MEMORY[0x263F8EE78];
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = v26;
  *(void *)(result + 40) = v26;
  *(void *)(result + 48) = v27;
  *(unsigned char *)(result + 56) = 0;
  *(void *)(v24 + 16) = result;
  *(void *)(a9 + 32) = v24;
  *(void *)(a9 + 40) = a10;
  *(void *)(a9 + 48) = v14;
  *(_DWORD *)(a9 + 56) = v15;
  *(unsigned char *)(a9 + 60) = v16;
  *(_DWORD *)(a9 + 64) = v17;
  *(_DWORD *)(a9 + 68) = v18;
  *(unsigned char *)(a9 + 72) = v19;
  *(_DWORD *)(a9 + 76) = v20;
  *(unsigned char *)(a9 + 80) = v21;
  *(_DWORD *)(a9 + 84) = v22;
  *(unsigned char *)(a9 + 88) = v34;
  *(unsigned char *)(a9 + 89) = v33;
  *(_DWORD *)(a9 + 92) = v23;
  *(_DWORD *)(a9 + 96) = v32;
  *(unsigned char *)(a9 + 100) = v31;
  *(_DWORD *)(a9 + 104) = v30;
  *(unsigned char *)(a9 + 108) = v29;
  *(unsigned char *)(a9 + 109) = v28;
  return result;
}

void type metadata accessor for AtomicBuffer<TrackerData>()
{
  if (!lazy cache variable for type metadata for AtomicBuffer<TrackerData>)
  {
    unint64_t v0 = type metadata accessor for AtomicBuffer();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AtomicBuffer<TrackerData>);
    }
  }
}

uint64_t specialized _GraphInputs.popLast<A, B>(_:)()
{
  uint64_t v1 = swift_retain();
  uint64_t v2 = specialized find<A>(_:key:)(v1);
  if (!v2)
  {
    swift_release();
    goto LABEL_5;
  }
  uint64_t v3 = *(void *)(v2 + 72);
  swift_retain();
  swift_release();
  if (!v3)
  {
LABEL_5:
    uint64_t v5 = 0;
    uint64_t v4 = 0;
    goto LABEL_6;
  }
  uint64_t v4 = *(void *)(v3 + 32);
  uint64_t v5 = *(void *)(v3 + 16);
  swift_retain();
  swift_release();
LABEL_6:
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v0, v4);
  swift_release();
  swift_release();
  return v5;
}

unint64_t lazy protocol witness table accessor for type Image.MakeRepresentableContext and conformance Image.MakeRepresentableContext()
{
  unint64_t result = lazy protocol witness table cache variable for type Image.MakeRepresentableContext and conformance Image.MakeRepresentableContext;
  if (!lazy protocol witness table cache variable for type Image.MakeRepresentableContext and conformance Image.MakeRepresentableContext)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.MakeRepresentableContext and conformance Image.MakeRepresentableContext);
  }
  return result;
}

void onMainThread(do:)(void (*a1)(void), uint64_t a2)
{
  if (objc_msgSend(self, sel_isMainThread))
  {
    a1();
  }
  else
  {
    id v4 = objc_msgSend(self, sel_mainRunLoop);
    type metadata accessor for _ContiguousArrayStorage<NSRunLoopMode>();
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_2461B9DC0;
    unsigned int v6 = (void *)*MEMORY[0x263EFF588];
    *(void *)(v5 + 32) = *MEMORY[0x263EFF588];
    type metadata accessor for NSRunLoopMode(0);
    id v7 = v6;
    isCGFloat a = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v10[4] = a1;
    v10[5] = a2;
    v10[0] = MEMORY[0x263EF8330];
    v10[1] = 1107296256;
    v10[2] = thunk for @escaping @callee_guaranteed () -> ();
    v10[3] = &block_descriptor_31;
    uint64_t v9 = _Block_copy(v10);
    swift_retain();
    swift_release();
    objc_msgSend(v4, sel_performInModes_block_, isa, v9);
    _Block_release(v9);
  }
}

void ViewGraph.NextUpdate.maxVelocity(_:)(double a1)
{
  if (a1 >= 160.0 && a1 < 320.0)
  {
    double v3 = 0.0125;
  }
  else
  {
    if (a1 < 320.0) {
      return;
    }
    double v3 = 0.00833333333;
  }
  uint64_t v4 = _HighFrameRateReasonMake(0);
  double v5 = *(double *)(v1 + 8);
  if (v3 < v5) {
    double v5 = v3;
  }
  *(double *)(v1 + 8) = v5;
  specialized Set._Variant.insert(_:)(&v6, v4);
}

uint64_t _HighFrameRateReasonMake(int a1)
{
  return a1 | 0x270000u;
}

uint64_t Transaction.animationIgnoringTransitionPhase.getter(void *a1)
{
  uint64_t v2 = swift_retain();
  char v3 = specialized closure #1 in PropertyList.subscript.getter(v2);
  uint64_t v4 = swift_release();
  if (v3)
  {
    uint64_t v10 = 0;
    MEMORY[0x270FA5388](v4);
    v9[2] = &v10;
    specialized Transaction.forEach<A>(keyType:_:)((uint64_t)partial apply for closure #1 in Transaction.animationIgnoringTransitionPhase.getter, (uint64_t)v9, a1);
    return v10;
  }
  else
  {
    uint64_t v6 = swift_retain();
    uint64_t v7 = specialized find<A>(_:key:)(v6);
    if (v7)
    {
      uint64_t v5 = *(void *)(v7 + 72);
      swift_retain();
    }
    else
    {
      uint64_t v5 = 0;
    }
    swift_release();
  }
  return v5;
}

void type metadata completion function for Transaction.PendingListeners()
{
  type metadata accessor for DispatchTime?(319, &lazy cache variable for type metadata for DispatchTime?, MEMORY[0x263F8F0C8], MEMORY[0x263F8D8F0]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t Transaction.disablesAnimations.getter()
{
  uint64_t v0 = swift_retain();
  char v1 = specialized closure #1 in PropertyList.subscript.getter(v0);
  swift_release();
  return v1 & 1;
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(void *a1, uint64_t a2, void (*a3)(void, void))
{
  return swift_release();
}

_DWORD *ChildTransaction.value.getter()
{
  uint64_t v0 = *(void *)AGGraphGetValue();
  uint64_t v6 = v0;
  uint64_t v1 = swift_retain_n();
  char v2 = specialized closure #1 in PropertyList.subscript.getter(v1);
  swift_release_n();
  if (v2) {
    return (_DWORD *)v0;
  }
  AGGraphClearUpdate();
  int v3 = *(_DWORD *)AGGraphGetValue();
  AGGraphSetUpdate();
  if (*(_DWORD *)AGGraphGetValue() != v3) {
    return (_DWORD *)v0;
  }
  type metadata accessor for Attribute<UInt32>(0, (unint64_t *)&lazy cache variable for type metadata for Animation?, (uint64_t)&type metadata for Animation, MEMORY[0x263F8D8F0]);
  uint64_t v4 = *(void *)AGGraphGetValue();
  swift_retain_n();
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(&v6, v4);
  swift_release_n();
  swift_release();
  unint64_t result = (_DWORD *)AGGraphGetValue();
  if (*result == v3) {
    return (_DWORD *)v6;
  }
  __break(1u);
  return result;
}

_DWORD *ChildValueTransaction.value.getter(unint64_t a1)
{
  uint64_t v2 = *(void *)AGGraphGetValue();
  uint64_t v5 = v2;
  swift_retain();
  AGGraphClearUpdate();
  int v3 = *(_DWORD *)AGGraphGetValue();
  AGGraphSetUpdate();
  if (*(_DWORD *)AGGraphGetValue() != v3) {
    return (_DWORD *)v2;
  }
  specialized Attribute.syncMainIfReferences<A>(do:)(HIDWORD(a1), (uint64_t)&v5);
  unint64_t result = (_DWORD *)AGGraphGetValue();
  if (*result == v3) {
    return (_DWORD *)v5;
  }
  __break(1u);
  return result;
}

uint64_t specialized Attribute.syncMainIfReferences<A>(do:)(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = a2;
  type metadata accessor for (_:)();
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(uint64_t (**)(uint64_t))Value;
  uint64_t v5 = *(void *)(Value + 8);
  v12[0] = *(void *)Value;
  v12[1] = v5;
  if ((v6 & 2) == 0) {
    return v4(a2);
  }
  char v11 = 1;
  MEMORY[0x270FA5388](Value);
  _OWORD v8[2] = &v11;
  v8[3] = partial apply for closure #2 in ChildValueTransaction.value.getter;
  v8[4] = &v9;
  v8[5] = v12;
  swift_retain();
  uint64_t result = specialized static Update.syncMain(_:)(partial apply for specialized closure #1 in Attribute.syncMainIfReferences<A>(do:), (uint64_t)v8);
  if ((v11 & 1) == 0) {
    return swift_release();
  }
  __break(1u);
  return result;
}

{
  uint64_t Value;
  uint64_t v4;
  void (*v5)(uint64_t);
  char v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  id v10;
  int CurrentAttribute;
  uint64_t v12;
  char isEscapingClosureAtFileLocation;
  void v14[7];
  void v15[2];
  char v16;
  char v17;
  uint64_t v18;
  void v19[2];
  id v20;
  int v21;
  uint64_t v22;
  uint64_t vars8;

  int v22 = *MEMORY[0x263EF8340];
  int v18 = a2;
  uint64_t Value = AGGraphGetValue();
  uint64_t v5 = *(void (**)(uint64_t))Value;
  uint64_t v4 = *(void *)(Value + 8);
  v15[0] = *(void *)Value;
  v15[1] = v4;
  if ((v6 & 2) != 0)
  {
    char v16 = 1;
    MEMORY[0x270FA5388](Value);
    _OWORD v14[2] = &v16;
    void v14[3] = partial apply for closure #1 in ChildTransaction.value.getter;
    v14[4] = &v17;
    v14[5] = v15;
    unsigned int v8 = self;
    swift_retain();
    if (objc_msgSend(v8, sel_isMainThread))
    {
      uint64_t result = ((uint64_t (*)(uint64_t))v15[0])(a2);
      char v16 = 0;
    }
    else
    {
      char v9 = swift_allocObject();
      *(void *)(v9 + 16) = partial apply for specialized closure #1 in Attribute.syncMainIfReferences<A>(do:);
      *(void *)(v9 + 24) = v14;
      uint64_t v10 = (id)AGSubgraphGetCurrent();
      int CurrentAttribute = AGGraphGetCurrentAttribute();
      v19[0] = thunk for @escaping @callee_guaranteed () -> ()partial apply;
      v19[1] = v9;
      int v20 = v10;
      char v21 = CurrentAttribute;
      char v12 = one-time initialization token for _lock;
      swift_retain();
      if (v12 != -1) {
        swift_once();
      }
      _MovableLockSyncMain(static Update._lock, (uint64_t)v19, (void (*)(uint64_t))@objc closure #1 in closure #1 in closure #1 in static Update.syncMain(_:));
      swift_release();

      char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
      uint64_t result = swift_release();
      if (isEscapingClosureAtFileLocation) {
        __break(1u);
      }
    }
    if (v16) {
      __break(1u);
    }
    else {
      return swift_release();
    }
  }
  else
  {
    swift_retain();
    v5(a2);
    return swift_release();
  }
  return result;
}

uint64_t one-time initialization function for pendingListeners()
{
  uint64_t v0 = type metadata accessor for Transaction.PendingListeners(0);
  uint64_t v1 = v0 - 8;
  uint64_t v2 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v4 = (uint64_t *)((char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  *uint64_t v4 = MEMORY[0x263F8EE78];
  uint64_t v5 = (char *)v4 + *(int *)(v1 + 28);
  uint64_t v6 = type metadata accessor for DispatchTime();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  type metadata accessor for DispatchTime?(0, &lazy cache variable for type metadata for AtomicBuffer<Transaction.PendingListeners>, type metadata accessor for Transaction.PendingListeners, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for AtomicBuffer);
  unint64_t v7 = (*(unsigned __int8 *)(v2 + 80) + 20) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v8 = swift_allocObject();
  *(_DWORD *)(v8 + 16) = 0;
  outlined init with copy of Transaction.PendingListeners.WeakListener((uint64_t)v4, v8 + v7, type metadata accessor for Transaction.PendingListeners);
  uint64_t result = outlined destroy of Transaction.PendingListeners.WeakListener((uint64_t)v4, type metadata accessor for Transaction.PendingListeners);
  static Transaction.pendingListeners = v8;
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t static Transaction.dispatchPending()()
{
  uint64_t v0 = type metadata accessor for Transaction.PendingListeners.WeakListener(0);
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for pendingListeners != -1) {
    swift_once();
  }
  uint64_t v4 = static Transaction.pendingListeners;
  uint64_t v5 = (os_unfair_lock_s *)(static Transaction.pendingListeners + 16);
  uint64_t v6 = *(void *)(type metadata accessor for Transaction.PendingListeners(0) - 8);
  unint64_t v7 = (uint64_t *)(v4 + ((*(unsigned __int8 *)(v6 + 80) + 20) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)));
  swift_retain_n();
  os_unfair_lock_lock(v5);
  closure #1 in static Transaction.dispatchPending()(v7, &v16);
  os_unfair_lock_unlock(v5);
  swift_release();
  swift_release();
  uint64_t v8 = v16;
  if (*(void *)(v16 + 16))
  {
    if (one-time initialization token for _lock != -1) {
      swift_once();
    }
    uint64_t v9 = static Update._lock;
    _MovableLockLock(static Update._lock);
    specialized static Update.begin()();
    uint64_t v10 = *(void *)(v8 + 16);
    if (v10)
    {
      uint64_t v11 = v8 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
      uint64_t v12 = *(void *)(v1 + 72);
      swift_bridgeObjectRetain();
      do
      {
        outlined init with copy of Transaction.PendingListeners.WeakListener(v11, (uint64_t)v3, type metadata accessor for Transaction.PendingListeners.WeakListener);
        uint64_t Strong = swift_weakLoadStrong();
        if (Strong)
        {
          (*(void (**)(uint64_t))(*(void *)Strong + 104))(Strong);
          swift_release();
        }
        outlined destroy of Transaction.PendingListeners.WeakListener((uint64_t)v3, type metadata accessor for Transaction.PendingListeners.WeakListener);
        v11 += v12;
        --v10;
      }
      while (v10);
      swift_bridgeObjectRelease();
    }
    static Update.end()();
    _MovableLockUnlock(v9);
    return swift_bridgeObjectRelease();
  }
  else
  {
    return swift_bridgeObjectRelease();
  }
}

uint64_t outlined destroy of Transaction.PendingListeners.WeakListener(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with copy of Transaction.PendingListeners.WeakListener(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

double partial apply for closure #1 in ViewRendererHost.renderDisplayList(_:asynchronously:time:nextTime:targetTimestamp:version:maxVersion:)()
{
  return closure #1 in ViewRendererHost.renderDisplayList(_:asynchronously:time:nextTime:targetTimestamp:version:maxVersion:)(*(double **)(v0 + 16), *(double *)(v0 + 72), *(double *)(v0 + 80), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned __int8 *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(unsigned __int16 *)(v0 + 64) | (*(unsigned __int8 *)(v0 + 66) << 16), *(void *)(v0 + 88), *(void *)(v0 + 96));
}

double closure #1 in ViewRendererHost.renderDisplayList(_:asynchronously:time:nextTime:targetTimestamp:version:maxVersion:)(double *a1, double a2, double a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, unsigned int a9, uint64_t a10, uint64_t a11)
{
  __int16 v14 = a9;
  uint64_t v36 = 0;
  char v37 = 0;
  unsigned int v18 = HIWORD(a9);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(a5 + 16))(&v36, ObjectType, a5);
  uint64_t v35 = v36;
  uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 8))(ObjectType, a5);
  uint64_t v25 = a7;
  uint64_t v26 = v20;
  uint64_t v27 = a8;
  __int16 v28 = v14;
  char v29 = v18;
  double v30 = a2;
  double v31 = a3;
  uint64_t v32 = a10;
  uint64_t v33 = a11;
  char v34 = &v35;
  (*(void (**)(double *__return_ptr, void, uint64_t (*)(), unsigned char *, uint64_t, uint64_t))(a5 + 24))(v38, a6, partial apply for closure #1 in renderOnMainThread #1 <A>() in ViewRendererHost.renderDisplayList(_:asynchronously:time:nextTime:targetTimestamp:version:maxVersion:), v24, ObjectType, a5);
  swift_unknownObjectRelease();
  double result = v38[0];
  *a1 = v38[0];
  return result;
}

uint64_t destroy for Transaction.PendingListeners(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for DispatchTime();
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v4, 1, v5);
  if (!result)
  {
    unint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
    return v7(v4, v5);
  }
  return result;
}

void *initializeWithCopy for Transaction.PendingListeners(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for DispatchTime();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  swift_bridgeObjectRetain();
  if (v9(v6, 1, v7))
  {
    type metadata accessor for DispatchTime?(0, &lazy cache variable for type metadata for DispatchTime?, MEMORY[0x263F8F0C8], MEMORY[0x263F8D8F0]);
    memcpy(v5, v6, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v5, v6, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

uint64_t DynamicTransaction.updateValue()()
{
  uint64_t v1 = v0;
  v18[1] = *MEMORY[0x263EF8340];
  uint64_t v2 = *v0;
  uint64_t v3 = *(void *)(AGGraphGetValue() + 8);
  if (!*(void *)(v3 + 16)) {
    goto LABEL_8;
  }
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(v1[2]);
  if ((v5 & 1) == 0) {
    goto LABEL_8;
  }
  unint64_t v6 = *(void *)(*(void *)(v3 + 56) + 8 * v4);
  uint64_t v7 = *(void *)AGGraphGetValue();
  if ((v7 & 0xC000000000000001) == 0)
  {
    if ((v6 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v6 < *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      uint64_t v8 = *(void *)(v7 + 8 * v6 + 32);
      swift_retain();
      goto LABEL_7;
    }
    __break(1u);
    goto LABEL_29;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v8 = MEMORY[0x24C523D60](v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_7:
  swift_beginAccess();
  int v9 = *(unsigned __int8 *)(v8 + 84);
  swift_release();
  if (v9 == 3)
  {
LABEL_8:
    v18[0] = 0;
    return AGGraphSetOutputValue();
  }
  uint64_t v11 = *(void *)AGGraphGetValue();
  v18[0] = v11;
  char v12 = *((unsigned char *)v1 + 12);
  *((unsigned char *)v1 + 12) = 0;
  if (!v9)
  {
    uint64_t v13 = swift_retain_n();
    uint64_t v14 = specialized find<A>(_:key:)(v13);
    if (!v14 || *(void *)(v14 + 72))
    {
      type metadata accessor for TypedElement<TransactionPropertyKey<AnimationKey>>();
      *(void *)(swift_allocObject() + 72) = 0;
      type metadata accessor for Range<Int>(0, (unint64_t *)&lazy cache variable for type metadata for TransactionPropertyKey<AnimationKey>, (uint64_t)&type metadata for AnimationKey, (uint64_t)&protocol witness table for AnimationKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
      v18[0] = PropertyList.Element.init(keyType:before:after:)(v15, 0, v11).value;
    }
    swift_release();
    swift_retain();
    specialized closure #1 in PropertyList.subscript.setter(v18, 1);
    swift_release();
    goto LABEL_25;
  }
  if (v9 != 1)
  {
    if (v12)
    {
      swift_retain();
LABEL_23:
      *((unsigned char *)v1 + 12) = 1;
      goto LABEL_25;
    }
    uint64_t v2 = *(void *)AGGraphGetValue();
    if ((v2 & 0xC000000000000001) == 0)
    {
      if ((v6 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (v6 < *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        uint64_t v16 = *(void *)(v2 + 8 * v6 + 32);
        swift_retain();
        swift_retain();
        goto LABEL_21;
      }
      __break(1u);
    }
LABEL_29:
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v16 = MEMORY[0x24C523D60](v6, v2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_21:
    uint64_t v17 = *(void *)(v16 + 56);
    swift_retain();
    swift_release();
    if (v17)
    {
      Transaction.addAnimationListener(_:)(v17);
      swift_release();
    }
    goto LABEL_23;
  }
  swift_retain();
LABEL_25:
  AGGraphSetOutputValue();
  return swift_release();
}

uint64_t Transaction.addAnimationListener(_:)(uint64_t a1)
{
  return Transaction.addAnimationListener(_:)(a1, specialized find<A>(_:key:), (void (*)(uint64_t, uint64_t, unsigned char *))specialized closure #1 in PropertyList.subscript.setter);
}

Swift::Void __swiftcall Transaction.disableAnimations()()
{
  v1.Swift::Bool value = *v0;
  uint64_t v2 = swift_retain();
  uint64_t v3 = specialized find<A>(_:key:)(v2);
  if (!v3 || *(void *)(v3 + 72))
  {
    type metadata accessor for TypedElement<TransactionPropertyKey<AnimationKey>>();
    *(void *)(swift_allocObject() + 72) = 0;
    type metadata accessor for TransactionPropertyKey<AnimationKey>();
    *(SwiftUI::BloomFilter *)uint64_t v0 = PropertyList.Element.init(keyType:before:after:)(v4, 0, v1.value);
  }
  swift_release();
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v0, 1);
  swift_release();
}

uint64_t Transaction.disablesAnimations.setter(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t *))
{
  swift_retain();
  a2(v2, a1, &v6);
  return swift_release();
}

void type metadata accessor for TypedElement<TransactionPropertyKey<DisablesAnimationsKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<TransactionPropertyKey<DisablesAnimationsKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for TransactionPropertyKey<DisablesAnimationsKey>, (uint64_t)&type metadata for DisablesAnimationsKey, (uint64_t)&protocol witness table for DisablesAnimationsKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    lazy protocol witness table accessor for type TransactionPropertyKey<DisablesAnimationsKey> and conformance TransactionPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<TransactionPropertyKey<DisablesAnimationsKey>>);
    }
  }
}

uint64_t closure #1 in static Transaction.dispatchPending()@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v56 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  int v54 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = type metadata accessor for DispatchQoS();
  uint64_t v53 = *(void *)(v55 - 8);
  MEMORY[0x270FA5388](v55);
  uint64_t v52 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DispatchTime?(0, &lazy cache variable for type metadata for DispatchTime?, MEMORY[0x263F8F0C8], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v59 = (uint64_t)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v58 = (char *)&v45 - v11;
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v45 - v13;
  uint64_t v15 = type metadata accessor for DispatchTime();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  unsigned int v18 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = (uint64_t)a1 + *(int *)(type metadata accessor for Transaction.PendingListeners(0) + 20);
  outlined init with copy of DispatchTime?(v19, (uint64_t)v14);
  uint64_t v61 = v16;
  uint64_t v57 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  if (v57((uint64_t)v14, 1, v15) == 1)
  {
    uint64_t result = outlined destroy of DispatchTime?((uint64_t)v14);
    *a2 = *a1;
    *a1 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v47 = v5;
    int v49 = a2;
    uint64_t v21 = v61;
    (*(void (**)(char *, char *, uint64_t))(v61 + 32))(v18, v14, v15);
    outlined destroy of DispatchTime?(v19);
    int v22 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v21 + 56);
    uint64_t v51 = v15;
    uint64_t v48 = v22;
    uint64_t v23 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v22)(v19, 1, 1, v15);
    uint64_t v24 = *a1;
    MEMORY[0x270FA5388](v23);
    *(&v45 - 2) = (uint64_t)v18;
    swift_bridgeObjectRetain_n();
    specialized _ArrayProtocol.filter(_:)((uint64_t (*)(char *))partial apply for closure #1 in closure #1 in static Transaction.dispatchPending(), (uint64_t)(&v45 - 4), v24);
    uint64_t v26 = v25;
    uint64_t v50 = v2;
    swift_bridgeObjectRelease();
    *a1 = v26;
    uint64_t v27 = *(void *)(v26 + 16);
    if (v27)
    {
      uint64_t v45 = v24;
      unsigned int v46 = v18;
      uint64_t v28 = v27 - 1;
      uint64_t v29 = type metadata accessor for Transaction.PendingListeners.WeakListener(0);
      unint64_t v30 = v26
          + ((*(unsigned __int8 *)(*(void *)(v29 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v29 - 8) + 80))
          + *(void *)(*(void *)(v29 - 8) + 72) * v28
          + *(int *)(v29 + 20);
      uint64_t v31 = (uint64_t)v58;
      uint64_t v32 = v51;
      (*(void (**)(char *, unint64_t, uint64_t))(v61 + 16))(v58, v30, v51);
      v48(v31, 0, 1, v32);
      outlined assign with take of DispatchTime?(v31, v19);
      type metadata accessor for OS_dispatch_queue();
      uint64_t v33 = (void *)static OS_dispatch_queue.main.getter();
      uint64_t v34 = v59;
      outlined init with copy of DispatchTime?(v19, v59);
      uint64_t result = v57(v34, 1, v32);
      if (result == 1)
      {
        __break(1u);
      }
      else
      {
        aBlock[4] = partial apply for implicit closure #1 in closure #1 in static Transaction.dispatchPending();
        aBlock[5] = 0;
        aBlock[0] = MEMORY[0x263EF8330];
        aBlock[1] = 1107296256;
        aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
        aBlock[3] = &block_descriptor_20;
        uint64_t v35 = _Block_copy(aBlock);
        swift_release();
        uint64_t v36 = v52;
        static DispatchQoS.unspecified.getter();
        aBlock[0] = MEMORY[0x263F8EE78];
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
        type metadata accessor for DispatchTime?(0, &lazy cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x263F8F030], MEMORY[0x263F8D488]);
        lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
        char v37 = v54;
        uint64_t v38 = v47;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        MEMORY[0x24C5235E0](v34, v36, v37, v35);
        _Block_release(v35);

        (*(void (**)(char *, uint64_t))(v56 + 8))(v37, v38);
        (*(void (**)(char *, uint64_t))(v53 + 8))(v36, v55);
        uint64_t v39 = *(uint64_t (**)(uint64_t, uint64_t))(v61 + 8);
        uint64_t v40 = v39(v34, v32);
        MEMORY[0x270FA5388](v40);
        uint64_t v41 = v45;
        unsigned int v42 = v46;
        *(&v45 - 2) = (uint64_t)v46;
        specialized _ArrayProtocol.filter(_:)((uint64_t (*)(char *))partial apply for closure #2 in closure #1 in static Transaction.dispatchPending(), (uint64_t)(&v45 - 4), v41);
        uint64_t v44 = v43;
        uint64_t result = v39((uint64_t)v42, v32);
        *int v49 = v44;
      }
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v61 + 8))(v18, v51);
      *int v49 = v24;
    }
  }
  return result;
}

void specialized _ArrayProtocol.filter(_:)(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for Transaction.PendingListeners.WeakListener(0);
  uint64_t v23 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v22 = (uint64_t)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)v19 - v10;
  uint64_t v24 = MEMORY[0x263F8EE78];
  uint64_t v21 = *(void *)(a3 + 16);
  if (v21)
  {
    unint64_t v12 = 0;
    uint64_t v13 = MEMORY[0x263F8EE78];
    v19[1] = a2;
    uint64_t v20 = a3;
    v19[0] = a1;
    while (v12 < *(void *)(a3 + 16))
    {
      unint64_t v14 = (*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
      uint64_t v15 = *(void *)(v23 + 72);
      outlined init with copy of SystemFormatStyle.DateReference(a3 + v14 + v15 * v12, (uint64_t)v11, type metadata accessor for Transaction.PendingListeners.WeakListener);
      char v16 = a1(v11);
      if (v3)
      {
        outlined destroy of ClosedRange<Date>?((uint64_t)v11, type metadata accessor for Transaction.PendingListeners.WeakListener);
        swift_release();
        swift_bridgeObjectRelease();
        return;
      }
      if (v16)
      {
        outlined init with take of ClosedRange<Date>((uint64_t)v11, v22, type metadata accessor for Transaction.PendingListeners.WeakListener);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v13 + 16) + 1, 1);
        }
        uint64_t v13 = v24;
        unint64_t v18 = *(void *)(v24 + 16);
        unint64_t v17 = *(void *)(v24 + 24);
        if (v18 >= v17 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
          uint64_t v13 = v24;
        }
        *(void *)(v13 + 16) = v18 + 1;
        outlined init with take of ClosedRange<Date>(v22, v13 + v14 + v18 * v15, type metadata accessor for Transaction.PendingListeners.WeakListener);
        a3 = v20;
        a1 = (uint64_t (*)(char *))v19[0];
      }
      else
      {
        outlined destroy of ClosedRange<Date>?((uint64_t)v11, type metadata accessor for Transaction.PendingListeners.WeakListener);
      }
      if (v21 == ++v12) {
        goto LABEL_14;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_14:
    swift_bridgeObjectRelease();
  }
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v19;
  char *v20;
  char *v21;
  void (*v22)(char *);
  char *v23;
  char v24;
  uint64_t v25;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  void (**v33)(char *, uint64_t);
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(char *);
  uint64_t v43;
  void (**v44)(char *);
  char *v45;
  uint64_t v46;

  Swift::Int v4 = v3;
  unsigned int v42 = a1;
  uint64_t v43 = a2;
  type metadata accessor for Date.ComponentsFormatStyle.Field?(0);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Date.ComponentsFormatStyle.Field();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  char v37 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13.n128_f64[0] = MEMORY[0x270FA5388](v12);
  uint64_t v45 = (char *)&v30 - v14;
  unsigned int v46 = MEMORY[0x263F8EE78];
  uint64_t v38 = *(void *)(a3 + 16);
  if (v38)
  {
    uint64_t v15 = 0;
    uint64_t v39 = v10 + 48;
    uint64_t v44 = (void (**)(char *))(v10 + 32);
    uint64_t v40 = v10 + 56;
    uint64_t v41 = v10 + 16;
    uint64_t v32 = (v10 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    uint64_t v33 = (void (**)(char *, uint64_t))(v10 + 8);
    uint64_t v36 = v10;
    while (v15 < *(void *)(a3 + 16))
    {
      char v16 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
      unint64_t v17 = *(void *)(v10 + 72);
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v10 + 16))(v8, a3 + v16 + v17 * v15, v9, v13);
      unint64_t v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v10 + 56);
      ((void (*)(char *, void, uint64_t, uint64_t))v18)(v8, 0, 1, v9);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1) {
        goto LABEL_17;
      }
      uint64_t v35 = v18;
      uint64_t v19 = a3;
      uint64_t v20 = v8;
      uint64_t v21 = v45;
      uint64_t v22 = *v44;
      uint64_t v23 = v20;
      (*v44)(v45);
      uint64_t v24 = v42(v21);
      if (v4)
      {
        (*v33)(v45, v9);
        swift_bridgeObjectRelease();
        swift_release();
        return;
      }
      if (v24)
      {
        ((void (*)(char *, char *, uint64_t))v22)(v37, v45, v9);
        uint64_t v25 = v46;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v34 = 0;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v25 + 16) + 1, 1);
          uint64_t v25 = v46;
        }
        uint64_t v28 = *(void *)(v25 + 16);
        uint64_t v27 = *(void *)(v25 + 24);
        uint64_t v29 = v28 + 1;
        if (v28 >= v27 >> 1)
        {
          uint64_t v31 = v28 + 1;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1);
          uint64_t v29 = v31;
          uint64_t v25 = v46;
        }
        *(void *)(v25 + 16) = v29;
        ((void (*)(unint64_t, char *, uint64_t))v22)(v25 + v16 + v28 * v17, v37, v9);
        unsigned int v46 = v25;
        Swift::Int v4 = v34;
      }
      else
      {
        (*v33)(v45, v9);
      }
      a3 = v19;
      ++v15;
      uint64_t v8 = v23;
      uint64_t v10 = v36;
      if (v38 == v15)
      {
        v35(v23, 1, 1, v9, v13);
        goto LABEL_17;
      }
    }
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v10 + 56))(v8, 1, 1, v9, v13);
LABEL_17:
    swift_bridgeObjectRelease();
    outlined destroy of ClosedRange<Date>?((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for Date.ComponentsFormatStyle.Field?);
  }
}

uint64_t outlined init with take of ClosedRange<Date>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t partial apply for closure #1 in closure #1 in static Transaction.dispatchPending()()
{
  return closure #1 in closure #1 in static Transaction.dispatchPending()() & 1;
}

uint64_t closure #1 in closure #1 in static Transaction.dispatchPending()()
{
  return dispatch thunk of static Comparable.< infix(_:_:)() & 1;
}

uint64_t lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t closure #1 in static Transaction.addPendingListener(_:)(unint64_t *a1, uint64_t a2)
{
  uint64_t v45 = a1;
  uint64_t v46 = a2;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v43 = *(void *)(v2 - 8);
  uint64_t v44 = v2;
  MEMORY[0x270FA5388](v2);
  uint64_t v41 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = type metadata accessor for DispatchQoS();
  uint64_t v40 = *(void *)(v42 - 8);
  MEMORY[0x270FA5388](v42);
  uint64_t v39 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DispatchTime?(0, &lazy cache variable for type metadata for DispatchTime?, MEMORY[0x263F8F0C8], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v47 = (uint64_t)&v37 - v6;
  uint64_t v7 = type metadata accessor for Transaction.PendingListeners.WeakListener(0);
  uint64_t v8 = v7 - 8;
  uint64_t v9 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  unint64_t v14 = (char *)&v37 - v13;
  uint64_t v15 = type metadata accessor for DispatchTime();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  unint64_t v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v37 - v20;
  static DispatchTime.now()();
  MEMORY[0x24C522110](v18, 0.01);
  uint64_t v48 = *(void (**)(char *, uint64_t))(v16 + 8);
  uint64_t v49 = v16 + 8;
  v48(v18, v15);
  uint64_t v22 = *(void (**)(uint64_t, char *, uint64_t))(v16 + 16);
  uint64_t v51 = v21;
  uint64_t v23 = v21;
  uint64_t v24 = v45;
  uint64_t v38 = v22;
  v22((uint64_t)v18, v23, v15);
  swift_weakInit();
  swift_weakAssign();
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(&v11[*(int *)(v8 + 28)], v18, v15);
  outlined init with take of Transaction.PendingListeners.WeakListener((uint64_t)v11, (uint64_t)v14);
  unint64_t v25 = *v24;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v25 + 16) + 1, 1, v25);
  }
  unint64_t v27 = *(void *)(v25 + 16);
  unint64_t v26 = *(void *)(v25 + 24);
  if (v27 >= v26 >> 1) {
    unint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1, v25);
  }
  *(void *)(v25 + 16) = v27 + 1;
  outlined init with take of Transaction.PendingListeners.WeakListener((uint64_t)v14, v25+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(void *)(v9 + 72) * v27);
  *uint64_t v24 = v25;
  uint64_t v28 = (uint64_t)v24 + *(int *)(type metadata accessor for Transaction.PendingListeners(0) + 20);
  uint64_t v29 = v47;
  outlined init with copy of DispatchTime?(v28, v47);
  int v30 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v29, 1, v15);
  outlined destroy of DispatchTime?(v29);
  if (v30 == 1)
  {
    outlined destroy of DispatchTime?(v28);
    v38(v28, v51, v15);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(v28, 0, 1, v15);
    type metadata accessor for OS_dispatch_queue();
    uint64_t v31 = (void *)static OS_dispatch_queue.main.getter();
    aBlock[4] = partial apply for implicit closure #1 in closure #1 in static Transaction.addPendingListener(_:);
    aBlock[5] = 0;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_3;
    uint64_t v32 = _Block_copy(aBlock);
    swift_release();
    uint64_t v33 = v39;
    static DispatchQoS.unspecified.getter();
    aBlock[0] = MEMORY[0x263F8EE78];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
    type metadata accessor for DispatchTime?(0, &lazy cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x263F8F030], MEMORY[0x263F8D488]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    uint64_t v34 = v41;
    uint64_t v35 = v44;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x24C5235E0](v51, v33, v34, v32);
    _Block_release(v32);

    (*(void (**)(char *, uint64_t))(v43 + 8))(v34, v35);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v33, v42);
  }
  return ((uint64_t (*)(char *, uint64_t))v48)(v51, v15);
}

uint64_t outlined init with take of Transaction.PendingListeners.WeakListener(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Transaction.PendingListeners.WeakListener(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t initializeWithTake for Transaction.PendingListeners.WeakListener(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_weakTakeInit();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = v6 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for DispatchTime();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t outlined destroy of DispatchTime?(uint64_t a1)
{
  type metadata accessor for DispatchTime?(0, &lazy cache variable for type metadata for DispatchTime?, MEMORY[0x263F8F0C8], MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for DispatchTime?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t outlined init with copy of DispatchTime?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for DispatchTime?(0, &lazy cache variable for type metadata for DispatchTime?, MEMORY[0x263F8F0C8], MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t Transaction.addAnimationListener(_:)(uint64_t a1, uint64_t (*a2)(uint64_t), void (*a3)(uint64_t, uint64_t, unsigned char *))
{
  if (one-time initialization token for pendingListeners != -1) {
    swift_once();
  }
  uint64_t v7 = static Transaction.pendingListeners;
  unint64_t v8 = (os_unfair_lock_s *)(static Transaction.pendingListeners + 16);
  uint64_t v9 = *(void *)(type metadata accessor for Transaction.PendingListeners(0) - 8);
  uint64_t v10 = (unint64_t *)(v7
                           + ((*(unsigned __int8 *)(v9 + 80) + 20) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)));
  swift_retain_n();
  os_unfair_lock_lock(v8);
  closure #1 in static Transaction.addPendingListener(_:)(v10, a1);
  os_unfair_lock_unlock(v8);
  swift_release_n();
  uint64_t v11 = swift_retain();
  uint64_t v12 = a2(v11);
  if (!v12)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v13 = *(void *)(v12 + 72);
  swift_retain();
  swift_release();
  if (!v13)
  {
LABEL_7:
    swift_retain_n();
    swift_retain();
    a3(v3, a1, v17);
    goto LABEL_8;
  }
  type metadata accessor for ListenerPair();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v13;
  *(void *)(v14 + 24) = a1;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  a3(v3, v14, v16);
  swift_release();
LABEL_8:
  swift_release_n();
  return swift_release();
}

uint64_t type metadata accessor for Transaction.PendingListeners(uint64_t a1)
{
  return type metadata accessor for TimerTimelineSchedule(a1, type metadata singleton initialization cache for Transaction.PendingListeners);
}

uint64_t specialized AnimatorState.addListeners(transaction:)()
{
  uint64_t v1 = swift_retain();
  uint64_t v2 = specialized find<A>(_:key:)(v1);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 72);
    swift_retain();
    swift_release();
    if (!v3) {
      goto LABEL_7;
    }
    swift_beginAccess();
    uint64_t v4 = swift_retain();
    MEMORY[0x24C522D60](v4);
    if (*(void *)((*(void *)(v0 + 128) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 128) & 0xFFFFFFFFFFFFFF8)
                                                                                        + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    uint64_t v5 = swift_endAccess();
    (*(void (**)(uint64_t))(*(void *)v3 + 88))(v5);
  }
  swift_release();
LABEL_7:
  uint64_t v6 = swift_retain();
  uint64_t v7 = specialized find<A>(_:key:)(v6);
  if (v7)
  {
    uint64_t v8 = *(void *)(v7 + 72);
    swift_retain();
    uint64_t result = swift_release();
    if (!v8) {
      return result;
    }
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 88))(result);
    if (*(unsigned char *)(v0 + 144))
    {
      (*(void (**)(uint64_t))(*(void *)v8 + 96))(v10);
    }
    else
    {
      swift_beginAccess();
      uint64_t v11 = swift_retain();
      MEMORY[0x24C522D60](v11);
      if (*(void *)((*(void *)(v0 + 136) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 136) & 0xFFFFFFFFFFFFFF8)
                                                                                          + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_endAccess();
    }
  }
  return swift_release();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  uint64_t v1 = swift_retain();
  uint64_t v2 = specialized find<A>(_:key:)(v1);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 72);
    swift_retain();
    swift_release();
    if (!v3) {
      goto LABEL_7;
    }
    swift_beginAccess();
    uint64_t v4 = swift_retain();
    MEMORY[0x24C522D60](v4);
    if (*(void *)((*(void *)(v0 + 80) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 80) & 0xFFFFFFFFFFFFFF8)
                                                                                       + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    uint64_t v5 = swift_endAccess();
    (*(void (**)(uint64_t))(*(void *)v3 + 88))(v5);
  }
  swift_release();
LABEL_7:
  uint64_t v6 = swift_retain();
  uint64_t v7 = specialized find<A>(_:key:)(v6);
  if (v7)
  {
    uint64_t v8 = *(void *)(v7 + 72);
    swift_retain();
    uint64_t result = swift_release();
    if (!v8) {
      return result;
    }
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 88))(result);
    if (*(unsigned char *)(v0 + 96))
    {
      (*(void (**)(uint64_t))(*(void *)v8 + 96))(v10);
    }
    else
    {
      swift_beginAccess();
      uint64_t v11 = swift_retain();
      MEMORY[0x24C522D60](v11);
      if (*(void *)((*(void *)(v0 + 88) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 88) & 0xFFFFFFFFFFFFFF8)
                                                                                         + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_endAccess();
    }
  }
  return swift_release();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  uint64_t v1 = swift_retain();
  uint64_t v2 = specialized find<A>(_:key:)(v1);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 72);
    swift_retain();
    swift_release();
    if (!v3) {
      goto LABEL_7;
    }
    swift_beginAccess();
    uint64_t v4 = swift_retain();
    MEMORY[0x24C522D60](v4);
    if (*(void *)((*(void *)(v0 + 192) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 192) & 0xFFFFFFFFFFFFFF8)
                                                                                        + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    uint64_t v5 = swift_endAccess();
    (*(void (**)(uint64_t))(*(void *)v3 + 88))(v5);
  }
  swift_release();
LABEL_7:
  uint64_t v6 = swift_retain();
  uint64_t v7 = specialized find<A>(_:key:)(v6);
  if (v7)
  {
    uint64_t v8 = *(void *)(v7 + 72);
    swift_retain();
    uint64_t result = swift_release();
    if (!v8) {
      return result;
    }
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 88))(result);
    if (*(unsigned char *)(v0 + 208))
    {
      (*(void (**)(uint64_t))(*(void *)v8 + 96))(v10);
    }
    else
    {
      swift_beginAccess();
      uint64_t v11 = swift_retain();
      MEMORY[0x24C522D60](v11);
      if (*(void *)((*(void *)(v0 + 200) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 200) & 0xFFFFFFFFFFFFFF8)
                                                                                          + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_endAccess();
    }
  }
  return swift_release();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  uint64_t v1 = swift_retain();
  uint64_t v2 = specialized find<A>(_:key:)(v1);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 72);
    swift_retain();
    swift_release();
    if (!v3) {
      goto LABEL_7;
    }
    swift_beginAccess();
    uint64_t v4 = swift_retain();
    MEMORY[0x24C522D60](v4);
    if (*(void *)((*(void *)(v0 + 96) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 96) & 0xFFFFFFFFFFFFFF8)
                                                                                       + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    uint64_t v5 = swift_endAccess();
    (*(void (**)(uint64_t))(*(void *)v3 + 88))(v5);
  }
  swift_release();
LABEL_7:
  uint64_t v6 = swift_retain();
  uint64_t v7 = specialized find<A>(_:key:)(v6);
  if (v7)
  {
    uint64_t v8 = *(void *)(v7 + 72);
    swift_retain();
    uint64_t result = swift_release();
    if (!v8) {
      return result;
    }
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 88))(result);
    if (*(unsigned char *)(v0 + 112))
    {
      (*(void (**)(uint64_t))(*(void *)v8 + 96))(v10);
    }
    else
    {
      swift_beginAccess();
      uint64_t v11 = swift_retain();
      MEMORY[0x24C522D60](v11);
      if (*(void *)((*(void *)(v0 + 104) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 104) & 0xFFFFFFFFFFFFFF8)
                                                                                          + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_endAccess();
    }
  }
  return swift_release();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  uint64_t v1 = swift_retain();
  uint64_t v2 = specialized find<A>(_:key:)(v1);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 72);
    swift_retain();
    swift_release();
    if (!v3) {
      goto LABEL_7;
    }
    swift_beginAccess();
    uint64_t v4 = swift_retain();
    MEMORY[0x24C522D60](v4);
    if (*(void *)((*(void *)(v0 + 272) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 272) & 0xFFFFFFFFFFFFFF8)
                                                                                        + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    uint64_t v5 = swift_endAccess();
    (*(void (**)(uint64_t))(*(void *)v3 + 88))(v5);
  }
  swift_release();
LABEL_7:
  uint64_t v6 = swift_retain();
  uint64_t v7 = specialized find<A>(_:key:)(v6);
  if (v7)
  {
    uint64_t v8 = *(void *)(v7 + 72);
    swift_retain();
    uint64_t result = swift_release();
    if (!v8) {
      return result;
    }
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 88))(result);
    if (*(unsigned char *)(v0 + 288))
    {
      (*(void (**)(uint64_t))(*(void *)v8 + 96))(v10);
    }
    else
    {
      swift_beginAccess();
      uint64_t v11 = swift_retain();
      MEMORY[0x24C522D60](v11);
      if (*(void *)((*(void *)(v0 + 280) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 280) & 0xFFFFFFFFFFFFFF8)
                                                                                          + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_endAccess();
    }
  }
  return swift_release();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  uint64_t v1 = swift_retain();
  uint64_t v2 = specialized find<A>(_:key:)(v1);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 72);
    swift_retain();
    swift_release();
    if (!v3) {
      goto LABEL_7;
    }
    swift_beginAccess();
    uint64_t v4 = swift_retain();
    MEMORY[0x24C522D60](v4);
    if (*(void *)((*(void *)(v0 + 240) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 240) & 0xFFFFFFFFFFFFFF8)
                                                                                        + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    uint64_t v5 = swift_endAccess();
    (*(void (**)(uint64_t))(*(void *)v3 + 88))(v5);
  }
  swift_release();
LABEL_7:
  uint64_t v6 = swift_retain();
  uint64_t v7 = specialized find<A>(_:key:)(v6);
  if (v7)
  {
    uint64_t v8 = *(void *)(v7 + 72);
    swift_retain();
    uint64_t result = swift_release();
    if (!v8) {
      return result;
    }
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 88))(result);
    if (*(unsigned char *)(v0 + 256))
    {
      (*(void (**)(uint64_t))(*(void *)v8 + 96))(v10);
    }
    else
    {
      swift_beginAccess();
      uint64_t v11 = swift_retain();
      MEMORY[0x24C522D60](v11);
      if (*(void *)((*(void *)(v0 + 248) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 248) & 0xFFFFFFFFFFFFFF8)
                                                                                          + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_endAccess();
    }
  }
  return swift_release();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  uint64_t v1 = swift_retain();
  uint64_t v2 = specialized find<A>(_:key:)(v1);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 72);
    swift_retain();
    swift_release();
    if (!v3) {
      goto LABEL_7;
    }
    swift_beginAccess();
    uint64_t v4 = swift_retain();
    MEMORY[0x24C522D60](v4);
    if (*(void *)((*(void *)(v0 + 160) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 160) & 0xFFFFFFFFFFFFFF8)
                                                                                        + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    uint64_t v5 = swift_endAccess();
    (*(void (**)(uint64_t))(*(void *)v3 + 88))(v5);
  }
  swift_release();
LABEL_7:
  uint64_t v6 = swift_retain();
  uint64_t v7 = specialized find<A>(_:key:)(v6);
  if (v7)
  {
    uint64_t v8 = *(void *)(v7 + 72);
    swift_retain();
    uint64_t result = swift_release();
    if (!v8) {
      return result;
    }
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 88))(result);
    if (*(unsigned char *)(v0 + 176))
    {
      (*(void (**)(uint64_t))(*(void *)v8 + 96))(v10);
    }
    else
    {
      swift_beginAccess();
      uint64_t v11 = swift_retain();
      MEMORY[0x24C522D60](v11);
      if (*(void *)((*(void *)(v0 + 168) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 168) & 0xFFFFFFFFFFFFFF8)
                                                                                          + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_endAccess();
    }
  }
  return swift_release();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  uint64_t v1 = swift_retain();
  uint64_t v2 = specialized find<A>(_:key:)(v1);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 72);
    swift_retain();
    swift_release();
    if (!v3) {
      goto LABEL_7;
    }
    swift_beginAccess();
    uint64_t v4 = swift_retain();
    MEMORY[0x24C522D60](v4);
    if (*(void *)((*(void *)(v0 + 176) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 176) & 0xFFFFFFFFFFFFFF8)
                                                                                        + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    uint64_t v5 = swift_endAccess();
    (*(void (**)(uint64_t))(*(void *)v3 + 88))(v5);
  }
  swift_release();
LABEL_7:
  uint64_t v6 = swift_retain();
  uint64_t v7 = specialized find<A>(_:key:)(v6);
  if (v7)
  {
    uint64_t v8 = *(void *)(v7 + 72);
    swift_retain();
    uint64_t result = swift_release();
    if (!v8) {
      return result;
    }
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 88))(result);
    if (*(unsigned char *)(v0 + 192))
    {
      (*(void (**)(uint64_t))(*(void *)v8 + 96))(v10);
    }
    else
    {
      swift_beginAccess();
      uint64_t v11 = swift_retain();
      MEMORY[0x24C522D60](v11);
      if (*(void *)((*(void *)(v0 + 184) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 184) & 0xFFFFFFFFFFFFFF8)
                                                                                          + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_endAccess();
    }
  }
  return swift_release();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  uint64_t v1 = swift_retain();
  uint64_t v2 = specialized find<A>(_:key:)(v1);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 72);
    swift_retain();
    swift_release();
    if (!v3) {
      goto LABEL_7;
    }
    swift_beginAccess();
    uint64_t v4 = swift_retain();
    MEMORY[0x24C522D60](v4);
    if (*(void *)((*(void *)(v0 + 112) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 112) & 0xFFFFFFFFFFFFFF8)
                                                                                        + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    uint64_t v5 = swift_endAccess();
    (*(void (**)(uint64_t))(*(void *)v3 + 88))(v5);
  }
  swift_release();
LABEL_7:
  uint64_t v6 = swift_retain();
  uint64_t v7 = specialized find<A>(_:key:)(v6);
  if (v7)
  {
    uint64_t v8 = *(void *)(v7 + 72);
    swift_retain();
    uint64_t result = swift_release();
    if (!v8) {
      return result;
    }
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 88))(result);
    if (*(unsigned char *)(v0 + 128))
    {
      (*(void (**)(uint64_t))(*(void *)v8 + 96))(v10);
    }
    else
    {
      swift_beginAccess();
      uint64_t v11 = swift_retain();
      MEMORY[0x24C522D60](v11);
      if (*(void *)((*(void *)(v0 + 120) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 120) & 0xFFFFFFFFFFFFFF8)
                                                                                          + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_endAccess();
    }
  }
  return swift_release();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  uint64_t v1 = swift_retain();
  uint64_t v2 = specialized find<A>(_:key:)(v1);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 72);
    swift_retain();
    swift_release();
    if (!v3) {
      goto LABEL_7;
    }
    swift_beginAccess();
    uint64_t v4 = swift_retain();
    MEMORY[0x24C522D60](v4);
    if (*(void *)((*(void *)(v0 + 144) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 144) & 0xFFFFFFFFFFFFFF8)
                                                                                        + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    uint64_t v5 = swift_endAccess();
    (*(void (**)(uint64_t))(*(void *)v3 + 88))(v5);
  }
  swift_release();
LABEL_7:
  uint64_t v6 = swift_retain();
  uint64_t v7 = specialized find<A>(_:key:)(v6);
  if (v7)
  {
    uint64_t v8 = *(void *)(v7 + 72);
    swift_retain();
    uint64_t result = swift_release();
    if (!v8) {
      return result;
    }
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 88))(result);
    if (*(unsigned char *)(v0 + 160))
    {
      (*(void (**)(uint64_t))(*(void *)v8 + 96))(v10);
    }
    else
    {
      swift_beginAccess();
      uint64_t v11 = swift_retain();
      MEMORY[0x24C522D60](v11);
      if (*(void *)((*(void *)(v0 + 152) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 152) & 0xFFFFFFFFFFFFFF8)
                                                                                          + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_endAccess();
    }
  }
  return swift_release();
}

void type metadata accessor for TypedElement<TransactionPropertyKey<Transaction.AnimationListenerKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<TransactionPropertyKey<Transaction.AnimationListenerKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.AnimationListenerKey>, (uint64_t)&type metadata for Transaction.AnimationListenerKey, (uint64_t)&protocol witness table for Transaction.AnimationListenerKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    lazy protocol witness table accessor for type TransactionPropertyKey<Transaction.AnimationListenerKey> and conformance TransactionPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<TransactionPropertyKey<Transaction.AnimationListenerKey>>);
    }
  }
}

BOOL partial apply for closure #2 in closure #1 in static Transaction.dispatchPending()()
{
  return closure #2 in closure #1 in static Transaction.dispatchPending()();
}

BOOL closure #2 in closure #1 in static Transaction.dispatchPending()()
{
  return (dispatch thunk of static Comparable.< infix(_:_:)() & 1) == 0;
}

unint64_t type metadata accessor for OS_dispatch_queue()
{
  unint64_t result = lazy cache variable for type metadata for OS_dispatch_queue;
  if (!lazy cache variable for type metadata for OS_dispatch_queue)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A];
  if (!lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A])
  {
    type metadata accessor for DispatchTime?(255, &lazy cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x263F8F030], MEMORY[0x263F8D488]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A]);
  }
  return result;
}

uint64_t withAnimation<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = 0;
  swift_retain_n();
  specialized closure #1 in PropertyList.subscript.setter(&v10, a1);
  swift_release_n();
  uint64_t v8 = swift_retain();
  withTransaction<A>(_:_:)(v8, a2, a3, a4);
  return swift_release_n();
}

uint64_t withTransaction<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a1;
  void v7[2] = a4;
  float64x2_t v7[3] = a1;
  void v7[4] = a2;
  v7[5] = a3;
  unint64_t v5 = type metadata accessor for Error();
  return _ss20withExtendedLifetimeyq0_x_q0_yq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v9, (uint64_t)partial apply for closure #1 in withTransaction<A>(_:_:), (uint64_t)v7, (uint64_t)&type metadata for Transaction, v5, a4, MEMORY[0x263F8E4E0], (uint64_t)&v8);
}

uint64_t Transaction.init(animation:)(uint64_t a1)
{
  uint64_t v3 = 0;
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(&v3, a1);
  swift_release_n();
  return v3;
}

uint64_t Transaction.animation.setter(uint64_t a1)
{
  swift_retain();
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v1, a1);
  swift_release_n();
  return swift_release();
}

void type metadata accessor for TypedElement<TransactionPropertyKey<AnimationKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<TransactionPropertyKey<AnimationKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, (unint64_t *)&lazy cache variable for type metadata for TransactionPropertyKey<AnimationKey>, (uint64_t)&type metadata for AnimationKey, (uint64_t)&protocol witness table for AnimationKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    lazy protocol witness table accessor for type TransactionPropertyKey<AnimationKey> and conformance TransactionPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<TransactionPropertyKey<AnimationKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type TransactionPropertyKey<AnimationKey> and conformance TransactionPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type TransactionPropertyKey<AnimationKey> and conformance TransactionPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type TransactionPropertyKey<AnimationKey> and conformance TransactionPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, (unint64_t *)&lazy cache variable for type metadata for TransactionPropertyKey<AnimationKey>, (uint64_t)&type metadata for AnimationKey, (uint64_t)&protocol witness table for AnimationKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransactionPropertyKey<AnimationKey> and conformance TransactionPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TransactionPropertyKey<Transaction.AnimationListenerKey> and conformance TransactionPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type TransactionPropertyKey<Transaction.AnimationListenerKey> and conformance TransactionPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type TransactionPropertyKey<Transaction.AnimationListenerKey> and conformance TransactionPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for TransactionPropertyKey<Transaction.AnimationListenerKey>, (uint64_t)&type metadata for Transaction.AnimationListenerKey, (uint64_t)&protocol witness table for Transaction.AnimationListenerKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransactionPropertyKey<Transaction.AnimationListenerKey> and conformance TransactionPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TransactionPropertyKey<DisablesAnimationsKey> and conformance TransactionPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type TransactionPropertyKey<DisablesAnimationsKey> and conformance TransactionPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type TransactionPropertyKey<DisablesAnimationsKey> and conformance TransactionPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for TransactionPropertyKey<DisablesAnimationsKey>, (uint64_t)&type metadata for DisablesAnimationsKey, (uint64_t)&protocol witness table for DisablesAnimationsKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransactionPropertyKey<DisablesAnimationsKey> and conformance TransactionPropertyKey<A>);
  }
  return result;
}

uint64_t outlined assign with take of DispatchTime?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for DispatchTime?(0, &lazy cache variable for type metadata for DispatchTime?, MEMORY[0x263F8F0C8], MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void type metadata accessor for TransactionPropertyKey<AnimationKey>()
{
  if (!lazy cache variable for type metadata for TransactionPropertyKey<AnimationKey>)
  {
    unint64_t v0 = type metadata accessor for TransactionPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TransactionPropertyKey<AnimationKey>);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for Prominence(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t base witness table accessor for _AttributeBody in SecondaryChild<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t OptionalEdgeInsets.subscript.setter(uint64_t result, char a2, char a3)
{
  switch(a3)
  {
    case 1:
      v3[2] = result;
      unsigned int v4 = v3 + 3;
      break;
    case 2:
      v3[4] = result;
      unsigned int v4 = v3 + 5;
      break;
    case 3:
      v3[6] = result;
      unsigned int v4 = v3 + 7;
      break;
    default:
      *int v3 = result;
      unsigned int v4 = v3 + 1;
      break;
  }
  *unsigned int v4 = a2 & 1;
  return result;
}

uint64_t Image.renderingMode(_:)(char *a1, uint64_t a2)
{
  char v3 = *a1;
  type metadata accessor for ImageProviderBox<Image.RenderingModeProvider>();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a2;
  *(unsigned char *)(v4 + 24) = v3;
  swift_retain();
  return v4;
}

void type metadata accessor for ImageProviderBox<Image.RenderingModeProvider>()
{
  if (!lazy cache variable for type metadata for ImageProviderBox<Image.RenderingModeProvider>)
  {
    lazy protocol witness table accessor for type Image.RenderingModeProvider and conformance Image.RenderingModeProvider();
    unint64_t v0 = type metadata accessor for ImageProviderBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ImageProviderBox<Image.RenderingModeProvider>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Image.RenderingModeProvider and conformance Image.RenderingModeProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type Image.RenderingModeProvider and conformance Image.RenderingModeProvider;
  if (!lazy protocol witness table cache variable for type Image.RenderingModeProvider and conformance Image.RenderingModeProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.RenderingModeProvider and conformance Image.RenderingModeProvider);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Image.RenderingModeProvider and conformance Image.RenderingModeProvider;
  if (!lazy protocol witness table cache variable for type Image.RenderingModeProvider and conformance Image.RenderingModeProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.RenderingModeProvider and conformance Image.RenderingModeProvider);
  }
  return result;
}

uint64_t Image.symbolRenderingMode(_:)(char *a1, uint64_t a2)
{
  char v3 = *a1;
  type metadata accessor for KeyedEncodingContainer<SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys>(0, &lazy cache variable for type metadata for ImageProviderBox<Image.SymbolRenderingModeProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image.SymbolRenderingModeProvider and conformance Image.SymbolRenderingModeProvider, (uint64_t)&unk_26FA7D8B8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ImageProviderBox);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a2;
  *(unsigned char *)(v4 + 24) = v3;
  swift_retain();
  return v4;
}

void type metadata accessor for KeyedEncodingContainer<SymbolRenderingMode.Storage.PaletteSlashBadgeCodingKeys>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Image.SymbolRenderingModeProvider and conformance Image.SymbolRenderingModeProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type Image.SymbolRenderingModeProvider and conformance Image.SymbolRenderingModeProvider;
  if (!lazy protocol witness table cache variable for type Image.SymbolRenderingModeProvider and conformance Image.SymbolRenderingModeProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.SymbolRenderingModeProvider and conformance Image.SymbolRenderingModeProvider);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Image.SymbolRenderingModeProvider and conformance Image.SymbolRenderingModeProvider;
  if (!lazy protocol witness table cache variable for type Image.SymbolRenderingModeProvider and conformance Image.SymbolRenderingModeProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.SymbolRenderingModeProvider and conformance Image.SymbolRenderingModeProvider);
  }
  return result;
}

double Image.init(decorative:scale:orientation:)(uint64_t a1, char a2, double a3)
{
  type metadata accessor for ImageProviderBox<Image.CGImageProvider>();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(double *)(v6 + 24) = a3;
  *(unsigned char *)(v6 + 32) = a2;
  double result = 0.0;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(unsigned char *)(v6 + 72) = 1;
  return result;
}

void type metadata accessor for ImageProviderBox<Image.CGImageProvider>()
{
  if (!lazy cache variable for type metadata for ImageProviderBox<Image.CGImageProvider>)
  {
    lazy protocol witness table accessor for type Image.CGImageProvider and conformance Image.CGImageProvider();
    unint64_t v0 = type metadata accessor for ImageProviderBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ImageProviderBox<Image.CGImageProvider>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Image.CGImageProvider and conformance Image.CGImageProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type Image.CGImageProvider and conformance Image.CGImageProvider;
  if (!lazy protocol witness table cache variable for type Image.CGImageProvider and conformance Image.CGImageProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.CGImageProvider and conformance Image.CGImageProvider);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Image.CGImageProvider and conformance Image.CGImageProvider;
  if (!lazy protocol witness table cache variable for type Image.CGImageProvider and conformance Image.CGImageProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.CGImageProvider and conformance Image.CGImageProvider);
  }
  return result;
}

uint64_t Image.resizable(capInsets:resizingMode:)(char *a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  char v11 = *a1;
  type metadata accessor for ImageProviderBox<Image.ResizableProvider>();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a2;
  *(double *)(v12 + 24) = a3;
  *(double *)(v12 + 32) = a4;
  *(double *)(v12 + 40) = a5;
  *(double *)(v12 + 48) = a6;
  *(unsigned char *)(v12 + 56) = v11;
  swift_retain();
  return v12;
}

void type metadata accessor for ImageProviderBox<Image.ResizableProvider>()
{
  if (!lazy cache variable for type metadata for ImageProviderBox<Image.ResizableProvider>)
  {
    lazy protocol witness table accessor for type Image.ResizableProvider and conformance Image.ResizableProvider();
    unint64_t v0 = type metadata accessor for ImageProviderBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ImageProviderBox<Image.ResizableProvider>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Image.ResizableProvider and conformance Image.ResizableProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type Image.ResizableProvider and conformance Image.ResizableProvider;
  if (!lazy protocol witness table cache variable for type Image.ResizableProvider and conformance Image.ResizableProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.ResizableProvider and conformance Image.ResizableProvider);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Image.ResizableProvider and conformance Image.ResizableProvider;
  if (!lazy protocol witness table cache variable for type Image.ResizableProvider and conformance Image.ResizableProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.ResizableProvider and conformance Image.ResizableProvider);
  }
  return result;
}

uint64_t Image.init(_internalSystemName:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ImageProviderBox<Image.NamedImageProvider>(0, &lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (void (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  *(_DWORD *)(v4 + 32) = 0;
  *(unsigned char *)(v4 + 36) = 1;
  *(_OWORD *)(v4 + 40) = xmmword_24619B520;
  *(void *)(v4 + 56) = a1;
  *(void *)(v4 + 64) = a2;
  *(_OWORD *)(v4 + 72) = xmmword_24619B530;
  *(unsigned char *)(v4 + 88) = 0;
  swift_bridgeObjectRetain();
  return v4;
}

uint64_t Image.init(systemName:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ImageProviderBox<Image.NamedImageProvider>(0, &lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (void (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  *(_DWORD *)(v4 + 32) = 0;
  *(unsigned char *)(v4 + 36) = 1;
  *(_OWORD *)(v4 + 40) = xmmword_2461E55C0;
  *(void *)(v4 + 56) = a1;
  *(void *)(v4 + 64) = a2;
  *(_OWORD *)(v4 + 72) = xmmword_24619B530;
  *(unsigned char *)(v4 + 88) = 0;
  swift_bridgeObjectRetain();
  return v4;
}

void type metadata accessor for ImageProviderBox<Image.NamedImageProvider>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for ImageProviderBox();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void _s7SwiftUI16ImageProviderBoxCyAA0C0V05NamedcD0VGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t type metadata accessor for ImageProviderBox()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type Image.NamedImageProvider and conformance Image.NamedImageProvider;
  if (!lazy protocol witness table cache variable for type Image.NamedImageProvider and conformance Image.NamedImageProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.NamedImageProvider and conformance Image.NamedImageProvider);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Image.NamedImageProvider and conformance Image.NamedImageProvider;
  if (!lazy protocol witness table cache variable for type Image.NamedImageProvider and conformance Image.NamedImageProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.NamedImageProvider and conformance Image.NamedImageProvider);
  }
  return result;
}

uint64_t specialized AnimatableAttribute.updateValue()()
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t Value = (_OWORD *)AGGraphGetValue();
  long long v2 = Value[1];
  v5[0] = *Value;
  v5[1] = v2;
  char v6 = v3 & 1;
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)((uint64_t)v5, 0, *(unsigned int *)(v0 + 4), v0 + 8);
  if (v6) {
    return AGGraphSetOutputValue();
  }
  uint64_t result = AGGraphGetOutputValue();
  if (!result) {
    return AGGraphSetOutputValue();
  }
  return result;
}

{
  uint64_t v0;
  _OWORD *Value;
  long long v2;
  char v3;
  uint64_t result;
  _OWORD v5[3];
  char v6;
  uint64_t v7;

  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t Value = (_OWORD *)AGGraphGetValue();
  long long v2 = Value[1];
  v5[0] = *Value;
  v5[1] = v2;
  _OWORD v5[2] = Value[2];
  char v6 = v3 & 1;
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)((uint64_t)v5, 0, *(unsigned int *)(v0 + 4), v0 + 8);
  if (v6) {
    return AGGraphSetOutputValue();
  }
  uint64_t result = AGGraphGetOutputValue();
  if (!result) {
    return AGGraphSetOutputValue();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t Value;
  char v2;
  char v3;
  uint64_t result;
  long long v5;
  char v6;
  char v7;
  uint64_t v8;

  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t Value = AGGraphGetValue();
  long long v2 = *(unsigned char *)(Value + 16);
  uint64_t v5 = *(_OWORD *)Value;
  char v6 = v2;
  uint64_t v7 = v3 & 1;
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)((uint64_t)&v5, 0, *(_DWORD *)(v0 + 4), v0 + 8);
  if (v7) {
    return AGGraphSetOutputValue();
  }
  uint64_t result = AGGraphGetOutputValue();
  if (!result) {
    return AGGraphSetOutputValue();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t Value;
  uint64_t v2;
  int v3;
  char v4;
  long long v5;
  char v6;
  uint64_t result;
  _OWORD v8[2];
  uint64_t v9;
  int v10;
  char v11;
  char v12;
  uint64_t v13;

  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t Value = AGGraphGetValue();
  long long v2 = *(void *)(Value + 32);
  char v3 = *(_DWORD *)(Value + 40);
  unint64_t v4 = *(unsigned char *)(Value + 44);
  uint64_t v5 = *(_OWORD *)(Value + 16);
  v8[0] = *(_OWORD *)Value;
  v8[1] = v5;
  uint64_t v9 = v2;
  unint64_t v10 = v3;
  uint64_t v11 = v4;
  uint64_t v12 = v6 & 1;
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)((uint64_t)v8, 0, *(_DWORD *)(v0 + 4), v0 + 8);
  if (v12) {
    return AGGraphSetOutputValue();
  }
  uint64_t result = AGGraphGetOutputValue();
  if (!result) {
    return AGGraphSetOutputValue();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t Value;
  char v2;
  char v3;
  uint64_t result;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;

  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t Value = AGGraphGetValue();
  long long v2 = *(unsigned char *)(Value + 8);
  uint64_t v5 = *(void *)Value;
  char v6 = v2;
  uint64_t v7 = v3 & 1;
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)((uint64_t)&v5, 0, *(unsigned int *)(v0 + 4), v0 + 8);
  if (v7) {
    return AGGraphSetOutputValue();
  }
  uint64_t result = AGGraphGetOutputValue();
  if (!result) {
    return AGGraphSetOutputValue();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t Value;
  char v2;
  long long v3;
  char v4;
  uint64_t result;
  _OWORD v6[2];
  char v7;
  char v8;
  uint64_t v9;

  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t Value = AGGraphGetValue();
  long long v2 = *(unsigned char *)(Value + 32);
  char v3 = *(_OWORD *)(Value + 16);
  v6[0] = *(_OWORD *)Value;
  v6[1] = v3;
  uint64_t v7 = v2;
  uint64_t v8 = v4 & 1;
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)((uint64_t)v6, 0, *(unsigned int *)(v0 + 4), v0 + 8);
  if (v8) {
    return AGGraphSetOutputValue();
  }
  uint64_t result = AGGraphGetOutputValue();
  if (!result) {
    return AGGraphSetOutputValue();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t *Value;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  void v7[2];
  char v8;
  uint64_t v9;
  uint64_t vars8;

  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  long long v2 = *Value;
  char v3 = Value[1];
  v7[0] = v2;
  v7[1] = v3;
  uint64_t v8 = v4 & 1;
  uint64_t v5 = *(unsigned int *)(v0 + 4);
  swift_retain();
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)((uint64_t)v7, 0, v5, v0 + 8);
  if ((v8 & 1) != 0 || !AGGraphGetOutputValue())
  {
    AGGraphSetOutputValue();
    return swift_release();
  }
  else
  {
    return swift_release();
  }
}

{
  uint64_t v0;
  _OWORD *Value;
  long long v2;
  long long v3;
  char v4;
  uint64_t result;
  _OWORD v6[4];
  char v7;
  uint64_t v8;

  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t Value = (_OWORD *)AGGraphGetValue();
  long long v2 = Value[1];
  v6[0] = *Value;
  v6[1] = v2;
  char v3 = Value[3];
  void v6[2] = Value[2];
  float64x2_t v6[3] = v3;
  uint64_t v7 = v4 & 1;
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)((uint64_t)v6, 0, *(unsigned int *)(v0 + 4), v0 + 8);
  if (v7) {
    return AGGraphSetOutputValue();
  }
  uint64_t result = AGGraphGetOutputValue();
  if (!result) {
    return AGGraphSetOutputValue();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t Value;
  uint64_t v2;
  char v3;
  uint64_t result;
  long long v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t Value = AGGraphGetValue();
  long long v2 = *(void *)(Value + 16);
  uint64_t v5 = *(_OWORD *)Value;
  char v6 = v2;
  uint64_t v7 = v3 & 1;
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)((uint64_t)&v5, 0, *(unsigned int *)(v0 + 4), v0 + 8);
  if (v7) {
    return AGGraphSetOutputValue();
  }
  uint64_t result = AGGraphGetOutputValue();
  if (!result) {
    return AGGraphSetOutputValue();
  }
  return result;
}

{
  uint64_t v0;
  void *Value;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  unsigned int v7;
  void v9[5];
  char v10;
  uint64_t v11;
  uint64_t vars8;

  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t Value = (void *)AGGraphGetValue();
  char v3 = Value[1];
  long long v2 = Value[2];
  unint64_t v4 = Value[3];
  uint64_t v5 = Value[4];
  v9[0] = *Value;
  v9[1] = v3;
  v9[2] = v2;
  v9[3] = v4;
  void v9[4] = v5;
  unint64_t v10 = v6 & 1;
  uint64_t v7 = *(_DWORD *)(v0 + 4);
  swift_bridgeObjectRetain();
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)((uint64_t)v9, 0, v7, v0 + 8);
  if ((v10 & 1) != 0 || !AGGraphGetOutputValue())
  {
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  else
  {
    return swift_bridgeObjectRelease();
  }
}

{
  uint64_t v0;
  uint64_t Value;
  char v2;
  uint64_t v3;
  int v4;
  long long v5;
  char v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v10;
  char v11;
  uint64_t v12;
  long long v13;
  long long v14;
  int v15;
  char v16;
  uint64_t v17;
  uint64_t vars8;

  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t Value = AGGraphGetValue();
  long long v2 = *(unsigned char *)(Value + 8);
  char v3 = *(void *)(Value + 16);
  unint64_t v4 = *(_DWORD *)(Value + 56);
  unint64_t v10 = *(void *)Value;
  uint64_t v11 = v2;
  uint64_t v12 = v3;
  uint64_t v5 = *(_OWORD *)(Value + 40);
  uint64_t v13 = *(_OWORD *)(Value + 24);
  uint64_t v14 = v5;
  uint64_t v15 = v4;
  uint64_t v16 = v6 & 1;
  uint64_t v7 = v0 + 8;
  uint64_t v8 = *(_DWORD *)(v0 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)((uint64_t)&v10, 0, v8, v7);
  if ((v16 & 1) != 0 || !AGGraphGetOutputValue())
  {
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

{
  uint64_t v0;
  uint64_t Value;
  char v2;
  long long v3;
  char v4;
  int v5;
  uint64_t v7;
  char v8;
  long long v9;
  long long v10;
  char v11;
  uint64_t v12;
  uint64_t vars8;

  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t Value = AGGraphGetValue();
  long long v2 = *(unsigned char *)(Value + 8);
  uint64_t v7 = *(void *)Value;
  uint64_t v8 = v2;
  char v3 = *(_OWORD *)(Value + 32);
  uint64_t v9 = *(_OWORD *)(Value + 16);
  unint64_t v10 = v3;
  uint64_t v11 = v4 & 1;
  uint64_t v5 = *(_DWORD *)(v0 + 4);
  swift_bridgeObjectRetain();
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)((uint64_t)&v7, 0, v5, v0 + 8);
  if ((v11 & 1) != 0 || !AGGraphGetOutputValue())
  {
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  else
  {
    return swift_bridgeObjectRelease();
  }
}

{
  uint64_t v0;
  uint64_t Value;
  char v2;
  char v3;
  unsigned int v4;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t vars8;

  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t Value = AGGraphGetValue();
  long long v2 = *(unsigned char *)(Value + 8);
  char v6 = *(void *)Value;
  uint64_t v7 = v2;
  uint64_t v8 = v3 & 1;
  unint64_t v4 = *(_DWORD *)(v0 + 4);
  swift_bridgeObjectRetain();
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)((uint64_t)&v6, 0, v4, v0 + 8);
  if ((v8 & 1) != 0 || !AGGraphGetOutputValue())
  {
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  else
  {
    return swift_bridgeObjectRelease();
  }
}

{
  uint64_t v0;
  uint64_t Value;
  char v2;
  uint64_t v3;
  char v4;
  uint64_t result;
  long long v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  unint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t Value = AGGraphGetValue();
  long long v2 = *(unsigned char *)(Value + 16);
  char v3 = *(void *)(Value + 24);
  char v6 = *(_OWORD *)Value;
  uint64_t v7 = v2;
  uint64_t v8 = v3;
  uint64_t v9 = v4 & 1;
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)((uint64_t)&v6, 0, *(_DWORD *)(v0 + 4), v0 + 8);
  if (v9) {
    return AGGraphSetOutputValue();
  }
  uint64_t result = AGGraphGetOutputValue();
  if (!result) {
    return AGGraphSetOutputValue();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t Value;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  void *v16;
  int v17;
  uint64_t v18;
  unsigned __int8 v19;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  unsigned __int8 v30;
  uint64_t v31;
  unsigned __int8 v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  int v45;
  uint64_t v46;
  unsigned __int8 v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t vars8;

  uint64_t v50 = *MEMORY[0x263EF8340];
  uint64_t Value = AGGraphGetValue();
  long long v2 = *(void *)(Value + 8);
  char v3 = *(void **)(Value + 16);
  unint64_t v4 = *(void **)(Value + 24);
  uint64_t v5 = *(void *)(Value + 32);
  char v6 = *(void *)(Value + 40);
  uint64_t v7 = *(void *)(Value + 48);
  uint64_t v8 = *(void *)(Value + 56);
  uint64_t v9 = *(void *)(Value + 64);
  unint64_t v10 = *(void *)(Value + 72);
  uint64_t v11 = *(unsigned char *)(Value + 80);
  uint64_t v12 = *(_DWORD *)(Value + 84);
  uint64_t v13 = *(void *)(Value + 88);
  uint64_t v14 = *(void *)(Value + 104);
  uint64_t v34 = *(id *)Value;
  uint64_t v35 = v2;
  uint64_t v36 = (uint64_t)v3;
  uint64_t v37 = v4;
  uint64_t v38 = v5;
  uint64_t v39 = v6;
  uint64_t v40 = v7;
  uint64_t v41 = v8;
  uint64_t v42 = v9;
  uint64_t v43 = v10;
  uint64_t v44 = v11;
  uint64_t v45 = v12;
  uint64_t v46 = v13;
  uint64_t v47 = *(unsigned char *)(Value + 96);
  uint64_t v48 = v14;
  uint64_t v49 = v15 & 1;
  uint64_t v16 = (void *)(v0 + 8);
  uint64_t v17 = *(_DWORD *)(v0 + 4);
  outlined copy of _ShapeStyle_Pack.Fill(v34, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11);
  outlined copy of GraphicsBlendMode?(v13, v47);
  swift_bridgeObjectRetain();
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)((uint64_t)&v34, 0, v17, v16);
  if ((v49 & 1) != 0 || !AGGraphGetOutputValue())
  {
    uint64_t v32 = v35;
    uint64_t v33 = (uint64_t)v34;
    uint64_t v21 = v37;
    uint64_t v31 = v36;
    uint64_t v22 = v38;
    uint64_t v23 = v39;
    uint64_t v24 = v40;
    unint64_t v25 = v41;
    unint64_t v26 = v42;
    unint64_t v27 = v43;
    uint64_t v28 = v44;
    uint64_t v29 = v46;
    int v30 = v47;
    AGGraphSetOutputValue();
    outlined consume of _ShapeStyle_Pack.Fill(v33, v32, v31, v21, v22, v23, v24, v25, v26, v27, v28);
    outlined consume of GraphicsBlendMode?(v29, v30);
    return swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v18 = v46;
    uint64_t v19 = v47;
    outlined consume of _ShapeStyle_Pack.Fill((uint64_t)v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44);
    outlined consume of GraphicsBlendMode?(v18, v19);
    return swift_bridgeObjectRelease();
  }
}

{
  uint64_t v0;
  uint64_t Value;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  int v14;
  unsigned __int8 v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;

  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t Value = AGGraphGetValue();
  long long v2 = *(void *)(Value + 8);
  char v3 = *(void **)(Value + 16);
  unint64_t v4 = *(void **)(Value + 24);
  uint64_t v5 = *(void *)(Value + 32);
  char v6 = *(void *)(Value + 40);
  uint64_t v7 = *(void *)(Value + 48);
  uint64_t v8 = *(void *)(Value + 56);
  uint64_t v9 = *(void *)(Value + 64);
  unint64_t v10 = *(void *)(Value + 72);
  uint64_t v11 = *(unsigned char *)(Value + 80);
  unint64_t v27 = *(id *)Value;
  uint64_t v28 = v2;
  uint64_t v29 = (uint64_t)v3;
  int v30 = v4;
  uint64_t v31 = v5;
  uint64_t v32 = v6;
  uint64_t v33 = v7;
  uint64_t v34 = v8;
  uint64_t v35 = v9;
  uint64_t v36 = v10;
  uint64_t v37 = v11;
  uint64_t v38 = v12 & 1;
  uint64_t v13 = v0 + 8;
  uint64_t v14 = *(_DWORD *)(v0 + 4);
  outlined copy of _ShapeStyle_Pack.Fill(v27, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11);
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)((uint64_t)&v27, 0, v14, v13);
  if ((v38 & 1) == 0 && AGGraphGetOutputValue()) {
    return outlined consume of _ShapeStyle_Pack.Fill((uint64_t)v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37);
  }
  uint64_t v16 = v28;
  unint64_t v26 = (uint64_t)v27;
  uint64_t v17 = v29;
  unint64_t v18 = v30;
  uint64_t v19 = v31;
  uint64_t v20 = v32;
  uint64_t v21 = v33;
  uint64_t v22 = v34;
  uint64_t v23 = v35;
  uint64_t v24 = v36;
  unint64_t v25 = v37;
  AGGraphSetOutputValue();
  return outlined consume of _ShapeStyle_Pack.Fill(v26, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25);
}

{
  uint64_t v0;
  uint64_t Value;
  uint64_t v2;
  int v3;
  char v4;
  char v5;
  long long v6;
  char v7;
  uint64_t result;
  _OWORD v9[2];
  uint64_t v10;
  int v11;
  char v12;
  char v13;
  char v14;
  uint64_t v15;

  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t Value = AGGraphGetValue();
  long long v2 = *(void *)(Value + 32);
  char v3 = *(_DWORD *)(Value + 40);
  unint64_t v4 = *(unsigned char *)(Value + 44);
  uint64_t v5 = *(unsigned char *)(Value + 45);
  char v6 = *(_OWORD *)(Value + 16);
  v9[0] = *(_OWORD *)Value;
  v9[1] = v6;
  unint64_t v10 = v2;
  uint64_t v12 = v4;
  uint64_t v11 = v3;
  uint64_t v13 = v5;
  uint64_t v14 = v7 & 1;
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)((uint64_t)v9, 0, *(_DWORD *)(v0 + 4), v0 + 8);
  if (v14) {
    return AGGraphSetOutputValue();
  }
  uint64_t result = AGGraphGetOutputValue();
  if (!result) {
    return AGGraphSetOutputValue();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t Value;
  uint64_t v2;
  int v3;
  char v4;
  char v5;
  int v6;
  uint64_t v7;
  long long v8;
  char v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v15;
  unsigned __int8 v16;
  _OWORD v17[2];
  uint64_t v18;
  int v19;
  char v20;
  char v21;
  int v22;
  uint64_t v23;
  unsigned __int8 v24;
  char v25;
  uint64_t v26;
  uint64_t vars8;

  unint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t Value = AGGraphGetValue();
  long long v2 = *(void *)(Value + 32);
  char v3 = *(_DWORD *)(Value + 40);
  unint64_t v4 = *(unsigned char *)(Value + 44);
  uint64_t v5 = *(unsigned char *)(Value + 45);
  char v6 = *(_DWORD *)(Value + 48);
  uint64_t v7 = *(void *)(Value + 56);
  uint64_t v8 = *(_OWORD *)(Value + 16);
  v17[0] = *(_OWORD *)Value;
  v17[1] = v8;
  unint64_t v18 = v2;
  uint64_t v20 = v4;
  uint64_t v19 = v3;
  uint64_t v21 = v5;
  uint64_t v22 = v6;
  uint64_t v23 = v7;
  uint64_t v24 = *(unsigned char *)(Value + 64);
  unint64_t v25 = v9 & 1;
  unint64_t v10 = v0 + 8;
  uint64_t v11 = *(_DWORD *)(v0 + 4);
  outlined copy of GraphicsBlendMode?(v7, v24);
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)((uint64_t)v17, 0, v11, v10);
  if ((v25 & 1) != 0 || !AGGraphGetOutputValue())
  {
    uint64_t v15 = v23;
    uint64_t v16 = v24;
    AGGraphSetOutputValue();
    return outlined consume of GraphicsBlendMode?(v15, v16);
  }
  else
  {
    uint64_t v12 = v23;
    uint64_t v13 = v24;
    return outlined consume of GraphicsBlendMode?(v12, v13);
  }
}

{
  uint64_t v0;
  char v1;
  unsigned int v2;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t vars8;

  char v6 = *MEMORY[0x263EF8340];
  unint64_t v4 = *(void *)AGGraphGetValue();
  uint64_t v5 = v1 & 1;
  long long v2 = *(_DWORD *)(v0 + 4);
  swift_bridgeObjectRetain();
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)((uint64_t)&v4, 0, v2, v0 + 8);
  if ((v5 & 1) != 0 || !AGGraphGetOutputValue())
  {
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  else
  {
    return swift_bridgeObjectRelease();
  }
}

{
  uint64_t v0;
  uint64_t Value;
  uint64_t v2;
  int v3;
  char v4;
  long long v5;
  char v6;
  uint64_t result;
  _OWORD v8[2];
  uint64_t v9;
  int v10;
  char v11;
  char v12;
  uint64_t v13;

  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t Value = AGGraphGetValue();
  long long v2 = *(void *)(Value + 32);
  char v3 = *(_DWORD *)(Value + 40);
  unint64_t v4 = *(unsigned char *)(Value + 44);
  uint64_t v5 = *(_OWORD *)(Value + 16);
  v8[0] = *(_OWORD *)Value;
  v8[1] = v5;
  uint64_t v9 = v2;
  unint64_t v10 = v3;
  uint64_t v11 = v4;
  uint64_t v12 = v6 & 1;
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)((uint64_t)v8, 0, *(_DWORD *)(v0 + 4), v0 + 8);
  if (v12) {
    return AGGraphSetOutputValue();
  }
  uint64_t result = AGGraphGetOutputValue();
  if (!result) {
    return AGGraphSetOutputValue();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t Value;
  char v2;
  uint64_t v3;
  long long v4;
  char v5;
  uint64_t result;
  _OWORD v7[2];
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;

  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t Value = AGGraphGetValue();
  long long v2 = *(unsigned char *)(Value + 32);
  char v3 = *(void *)(Value + 40);
  unint64_t v4 = *(_OWORD *)(Value + 16);
  v7[0] = *(_OWORD *)Value;
  v7[1] = v4;
  uint64_t v8 = v2;
  uint64_t v9 = v3;
  unint64_t v10 = v5 & 1;
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)((uint64_t)v7, 0, *(unsigned int *)(v0 + 4), v0 + 8);
  if (v10) {
    return AGGraphSetOutputValue();
  }
  uint64_t result = AGGraphGetOutputValue();
  if (!result) {
    return AGGraphSetOutputValue();
  }
  return result;
}

{
  uint64_t v0;
  float32x4_t *Value;
  char v2;
  uint64_t result;
  float32x4_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t Value = (float32x4_t *)AGGraphGetValue();
  unint64_t v4 = *Value;
  uint64_t v5 = Value[1].i64[0];
  char v6 = v2 & 1;
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(&v4, 0, *(_DWORD *)(v0 + 4), v0 + 8);
  if (v6) {
    return AGGraphSetOutputValue();
  }
  uint64_t result = AGGraphGetOutputValue();
  if (!result) {
    return AGGraphSetOutputValue();
  }
  return result;
}

{
  uint64_t v0;
  char v1;
  uint64_t result;
  float32x4_t v3;
  char v4;
  uint64_t v5;

  uint64_t v5 = *MEMORY[0x263EF8340];
  char v3 = *(float32x4_t *)AGGraphGetValue();
  unint64_t v4 = v1 & 1;
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(&v3, 0, *(unsigned int *)(v0 + 4), v0 + 8);
  if (v4) {
    return AGGraphSetOutputValue();
  }
  uint64_t result = AGGraphGetOutputValue();
  if (!result) {
    return AGGraphSetOutputValue();
  }
  return result;
}

{
  uint64_t v0;
  char v1;
  uint64_t result;
  long long v3;
  char v4;
  uint64_t v5;

  uint64_t v5 = *MEMORY[0x263EF8340];
  char v3 = *(_OWORD *)AGGraphGetValue();
  unint64_t v4 = v1 & 1;
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)((uint64_t)&v3, 0, *(unsigned int *)(v0 + 4), v0 + 8);
  if (v4) {
    return AGGraphSetOutputValue();
  }
  uint64_t result = AGGraphGetOutputValue();
  if (!result) {
    return AGGraphSetOutputValue();
  }
  return result;
}

{
  uint64_t v0;
  _OWORD *Value;
  long long v2;
  char v3;
  uint64_t result;
  _OWORD v5[2];
  char v6;
  uint64_t v7;

  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t Value = (_OWORD *)AGGraphGetValue();
  long long v2 = Value[1];
  v5[0] = *Value;
  v5[1] = v2;
  char v6 = v3 & 1;
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)((uint64_t)v5, 0, *(_DWORD *)(v0 + 4), v0 + 8);
  if (v6) {
    return AGGraphSetOutputValue();
  }
  uint64_t result = AGGraphGetOutputValue();
  if (!result) {
    return AGGraphSetOutputValue();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t Value;
  char v2;
  char v3;
  char v4;
  uint64_t result;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  uint64_t v10;

  unint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t Value = AGGraphGetValue();
  long long v2 = *(unsigned char *)(Value + 8);
  char v3 = *(unsigned char *)(Value + 9);
  char v6 = *(void *)Value;
  uint64_t v7 = v2;
  uint64_t v8 = v3;
  uint64_t v9 = v4 & 1;
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)((uint64_t)&v6, 0, *(unsigned int *)(v0 + 4), v0 + 8);
  if (v9) {
    return AGGraphSetOutputValue();
  }
  uint64_t result = AGGraphGetOutputValue();
  if (!result) {
    return AGGraphSetOutputValue();
  }
  return result;
}

{
  uint64_t v0;
  char v1;
  uint64_t result;
  long long v3;
  char v4;
  uint64_t v5;

  uint64_t v5 = *MEMORY[0x263EF8340];
  char v3 = *(_OWORD *)AGGraphGetValue();
  unint64_t v4 = v1 & 1;
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)((uint64_t)&v3, 0, *(_DWORD *)(v0 + 4), v0 + 8);
  if (v4) {
    return AGGraphSetOutputValue();
  }
  uint64_t result = AGGraphGetOutputValue();
  if (!result) {
    return AGGraphSetOutputValue();
  }
  return result;
}

{
  uint64_t v0;
  char v1;
  uint64_t result;
  uint64_t v3;
  char v4;
  uint64_t v5;

  uint64_t v5 = *MEMORY[0x263EF8340];
  char v3 = *(void *)AGGraphGetValue();
  unint64_t v4 = v1 & 1;
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)((uint64_t)&v3, 0, *(unsigned int *)(v0 + 4), v0 + 8);
  if (v4) {
    return AGGraphSetOutputValue();
  }
  uint64_t result = AGGraphGetOutputValue();
  if (!result) {
    return AGGraphSetOutputValue();
  }
  return result;
}

{
  uint64_t v0;
  _OWORD *Value;
  long long v2;
  char v3;
  uint64_t result;
  _OWORD v5[2];
  char v6;
  uint64_t v7;

  uint64_t v7 = *MEMORY[0x263EF8340];
  type metadata accessor for CGRect(0);
  uint64_t Value = (_OWORD *)AGGraphGetValue();
  long long v2 = Value[1];
  v5[0] = *Value;
  v5[1] = v2;
  char v6 = v3 & 1;
  specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)((uint64_t)v5, 0, *(unsigned int *)(v0 + 4), v0 + 8);
  if (v6) {
    return AGGraphSetOutputValue();
  }
  uint64_t result = AGGraphGetOutputValue();
  if (!result) {
    return AGGraphSetOutputValue();
  }
  return result;
}

uint64_t Transaction.animationFrameInterval.setter(uint64_t a1, char a2)
{
  char v4 = a2 & 1;
  swift_retain();
  specialized closure #1 in PropertyList.subscript.setter(v2, a1, v4);
  return swift_release();
}

void *AnimatorState.init(animation:interval:at:in:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  char v4 = v3;
  uint64_t v6 = *a3;
  uint64_t v7 = v3 + 3;
  uint64_t v8 = *(void *)(*v3 + 80);
  AnimationState.init()(v7);
  uint64_t v9 = (char *)v4 + *(void *)(*v4 + 112);
  dispatch thunk of static AdditiveArithmetic.zero.getter();
  uint64_t v10 = *(void *)(*v4 + 136);
  *(void *)((char *)v4 + v10) = 0;
  dispatch thunk of static AdditiveArithmetic.zero.getter();
  uint64_t v11 = (char *)v4 + *(void *)(*v4 + 152);
  *(_DWORD *)uint64_t v11 = 0;
  void v11[4] = 1;
  *((unsigned char *)v4 + *(void *)(*v4 + 160)) = 0;
  uint64_t v12 = MEMORY[0x263F8EE78];
  *(void *)((char *)v4 + *(void *)(*v4 + 168)) = MEMORY[0x263F8EE78];
  *(void *)((char *)v4 + *(void *)(*v4 + 176)) = v12;
  *((unsigned char *)v4 + *(void *)(*v4 + 184)) = 0;
  uint64_t v13 = *(void *)(*v4 + 192);
  type metadata accessor for AnimatorState.Fork();
  *(void *)((char *)v4 + v13) = Array.init()();
  _OWORD v4[2] = a1;
  swift_beginAccess();
  uint64_t v14 = *(void *)(v8 - 8);
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 24);
  swift_retain();
  v15(v9, a2, v8);
  swift_endAccess();
  *(void *)((char *)v4 + *(void *)(*v4 + 120)) = v6;
  *(void *)((char *)v4 + v10) = v6;
  uint64_t v16 = swift_retain();
  uint64_t v17 = specialized find<A>(_:key:)(v16);
  if (v17)
  {
    double v18 = *(double *)(v17 + 72);
    char v19 = *(unsigned char *)(v17 + 80);
    swift_release();
    if ((v19 & 1) == 0)
    {
      if (v18 <= 0.0)
      {
        *(void *)((char *)v4 + *(void *)(*v4 + 128)) = 0;
      }
      else
      {
        long double v20 = log2(v18 * 240.0);
        long double v21 = exp2(floor(v20 + 0.01)) * 0.00416666667;
        *(long double *)((char *)v4 + *(void *)(*v4 + 128)) = v21;
        if (v21 >= 0.0166666667)
        {
          uint64_t v22 = a2;
          int v23 = 0;
          char v24 = 1;
LABEL_13:
          swift_release();
          swift_release();
          (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v22, v8);
          goto LABEL_14;
        }
      }
      uint64_t v22 = a2;
      uint64_t v25 = swift_retain();
      uint64_t v26 = specialized find<A>(_:key:)(v25);
      if (v26)
      {
        int v23 = *(_DWORD *)(v26 + 72);
        char v24 = *(unsigned char *)(v26 + 76);
      }
      else
      {
        int v23 = 0;
        char v24 = 1;
      }
      swift_release();
      goto LABEL_13;
    }
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a2, v8);
  int v23 = 0;
  *(void *)((char *)v4 + *(void *)(*v4 + 128)) = 0;
  char v24 = 1;
LABEL_14:
  *(_DWORD *)uint64_t v11 = v23;
  void v11[4] = v24;
  return v4;
}

uint64_t AnimatorState.updateListeners(isLogicallyComplete:time:environment:)(char a1, unint64_t a2, double a3)
{
  char v4 = v3;
  uint64_t v8 = *v3;
  uint64_t v9 = type metadata accessor for AnimatorState.Fork();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v44 = (char *)&v38 - v11;
  uint64_t v12 = type metadata accessor for IndexSet();
  uint64_t v39 = *(void *)(v12 - 8);
  uint64_t v40 = v12;
  MEMORY[0x270FA5388](v12);
  uint64_t v45 = (uint64_t)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(v8 + 184);
  if ((*((unsigned char *)v4 + v14) & 1) != 0 || (a1 & 1) == 0) {
    goto LABEL_17;
  }
  *((unsigned char *)v4 + v14) = a1 & 1;
  uint64_t v15 = (void *)((char *)v4 + *(void *)(*v4 + 176));
  swift_beginAccess();
  if ((unint64_t)*v15 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v21) {
      goto LABEL_17;
    }
LABEL_5:
    uint64_t v16 = *v15;
    if ((unint64_t)*v15 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v17 = result;
      if (result) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v17 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v17)
      {
LABEL_7:
        if (v17 < 1) {
          goto LABEL_40;
        }
        for (uint64_t i = 0; i != v17; ++i)
        {
          if ((v16 & 0xC000000000000001) != 0)
          {
            uint64_t v20 = MEMORY[0x24C523D60](i, v16);
          }
          else
          {
            uint64_t v20 = *(void *)(v16 + 8 * i + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v20 + 96))();
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    *uint64_t v15 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  if (*(void *)((*v15 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_5;
  }
LABEL_17:
  uint64_t v22 = (void *)((char *)v4 + *(void *)(*v4 + 192));
  swift_beginAccess();
  Swift::Int v46 = *v22;
  uint64_t v23 = type metadata accessor for Array();
  swift_getWitnessTable();
  uint64_t result = Collection.isEmpty.getter();
  if (result) {
    return result;
  }
  IndexSet.init()();
  Swift::Int v48 = *v22;
  swift_getWitnessTable();
  uint64_t result = RandomAccessCollection<>.indices.getter();
  Swift::Int v25 = v46;
  Swift::Int v24 = v47;
  if (v46 == v47)
  {
LABEL_19:
    swift_beginAccess();
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v27 = swift_getWitnessTable();
    uint64_t v28 = v45;
    RangeReplaceableCollection<>.remove(atOffsets:)(v45, v23, WitnessTable, v27);
    swift_endAccess();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v39 + 8))(v28, v40);
  }
  if (v47 < v46) {
    goto LABEL_39;
  }
  uint64_t v42 = v10;
  uint64_t v43 = (uint64_t (**)(char *, uint64_t))(v10 + 8);
  uint64_t v29 = a2 | ((HIDWORD(a2) & 1) << 32);
  uint64_t v41 = v29;
  while (v25 < v24)
  {
    swift_beginAccess();
    Array._makeMutableAndUnique()();
    Array._checkSubscript_mutating(_:)(v25);
    char v30 = AnimatorState.Fork.update(time:environment:)(a3, v29, v9);
    _ViewInputs.base.modify(v23, v31);
    uint64_t result = swift_endAccess();
    if ((v30 & 1) == 0) {
      goto LABEL_24;
    }
    swift_beginAccess();
    uint64_t v32 = v44;
    Array.subscript.getter();
    unint64_t v33 = *(void *)&v32[*(int *)(v9 + 44)];
    swift_endAccess();
    uint64_t v34 = *v43;
    swift_bridgeObjectRetain();
    uint64_t result = v34(v32, v9);
    if (v33 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v35 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (v35)
      {
LABEL_29:
        if (v35 < 1) {
          goto LABEL_38;
        }
        for (uint64_t j = 0; j != v35; ++j)
        {
          if ((v33 & 0xC000000000000001) != 0)
          {
            uint64_t v37 = MEMORY[0x24C523D60](j, v33);
          }
          else
          {
            uint64_t v37 = *(void *)(v33 + 8 * j + 32);
            swift_retain();
          }
          (*(void (**)(void))(*(void *)v37 + 96))();
          swift_release();
        }
      }
    }
    else
    {
      uint64_t v35 = *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v35) {
        goto LABEL_29;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t result = *(_OWORD *)&IndexSet.insert(_:)(v25);
    uint64_t v29 = v41;
LABEL_24:
    if (++v25 == v24) {
      goto LABEL_19;
    }
  }
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for AnimatorState.Fork()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t AnimationState.init()@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *a1 = result;
  return result;
}

uint64_t specialized AnimatableAttribute.updateValue()(uint64_t a1, void (*a2)(uint64_t *, void, void, uint64_t))
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)AGGraphGetValue();
  char v7 = v4 & 1;
  a2(&v6, 0, *(unsigned int *)(v2 + 4), v2 + 8);
  if (v7) {
    return AGGraphSetOutputValue();
  }
  uint64_t result = AGGraphGetOutputValue();
  if (!result) {
    return AGGraphSetOutputValue();
  }
  return result;
}

{
  uint64_t v2;
  char v4;
  uint64_t result;
  uint64_t v6;
  char v7;
  uint64_t v8;

  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)AGGraphGetValue();
  char v7 = v4 & 1;
  a2(&v6, 0, *(unsigned int *)(v2 + 4), v2 + 8);
  if (v7) {
    return AGGraphSetOutputValue();
  }
  uint64_t result = AGGraphGetOutputValue();
  if (!result) {
    return AGGraphSetOutputValue();
  }
  return result;
}

void specialized AnimatableAttributeHelper.update(value:defaultAnimation:environment:sampleCollector:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t a6, uint64_t a7)
{
  uint64_t v74 = a6;
  uint64_t v14 = type metadata accessor for OSSignpostID();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v68 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1) {
    swift_once();
  }
  double v18 = -*(double *)&static Time.infinity;
  if (*(void *)(a4 + 32))
  {
    uint64_t Value = (double *)AGGraphGetValue();
    if (v20) {
      double v18 = *Value;
    }
  }
  if (*(_DWORD *)(a4 + 40) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    a5();
    *(unsigned char *)(a1 + 8) = 1;
LABEL_11:
    double v8 = *(double *)a1;
    if (*(unsigned char *)(a4 + 24)) {
      goto LABEL_34;
    }
    double v7 = *(double *)(a4 + 16);
    if (v8 == v7) {
      goto LABEL_34;
    }
    uint64_t v73 = a7;
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    uint64_t v22 = swift_retain();
    uint64_t v23 = specialized find<A>(_:key:)(v22);
    if (v23)
    {
      uint64_t v24 = *(void *)(v23 + 72);
      swift_retain();
      swift_release();
      if (v24) {
        goto LABEL_22;
      }
    }
    else
    {
      swift_release();
    }
    uint64_t v25 = swift_retain();
    char v26 = specialized closure #1 in PropertyList.subscript.getter(v25);
    swift_release();
    if ((v26 & 1) == 0)
    {
      if (!a2) {
        goto LABEL_33;
      }
      swift_retain();
      uint64_t v24 = a2;
      goto LABEL_22;
    }
    if (one-time initialization token for velocityTracking != -1) {
      goto LABEL_65;
    }
    goto LABEL_19;
  }
  if (*(unsigned char *)(a1 + 8) == 1) {
    goto LABEL_11;
  }
  uint64_t v21 = *(void *)(a4 + 32);
  if (!v21) {
    return;
  }
  while (1)
  {
    CGRect v85 = *(int **)a1;
    swift_retain();
    LOBYTE(v82) = 0;
    if ((specialized AnimatorState.update(_:at:environment:)((double *)&v85, v18) & 1) == 0)
    {
      if (one-time initialization token for shared != -1) {
        swift_once();
      }
      swift_beginAccess();
      double v50 = *(double *)(v21 + 48);
      uint64_t v76 = *(const char **)(v21 + 56);
      uint64_t v51 = *(unsigned int *)(v21 + 72);
      unsigned __int8 v52 = *(unsigned char *)(v21 + 76);
      uint64_t v53 = *(void (**)(const char **, unint64_t, double))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared)
                                                                           + 0x58);
      int v54 = static CoreGlue.shared;
      LOBYTE(v80) = v52;
      v53(&v76, v51 | ((unint64_t)v52 << 32), v50);
      swift_release();

      goto LABEL_50;
    }
    swift_retain_n();
    char v38 = static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_47;
    }
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v39 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_47:
      uint64_t v49 = swift_release_n();
      if (*(void *)(a4 + 32))
      {
LABEL_48:
        specialized AnimatorState.removeListeners()(v49);
        swift_release();
      }
LABEL_49:
      swift_release();
      *(void *)(a4 + 32) = 0;
LABEL_50:
      *(void *)a1 = v85;
      *(unsigned char *)(a1 + 8) = 1;
      return;
    }
    uint64_t v72 = v15;
    uint64_t v73 = a7;
    swift_retain();
    id v40 = v39;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    uint64_t v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_2461BE2B0;
    int CurrentAttribute = AGGraphGetCurrentAttribute();
    int v42 = *MEMORY[0x263F288F8];
    if (CurrentAttribute == *MEMORY[0x263F288F8])
    {
      __break(1u);
    }
    else
    {
      id v43 = (id)AGGraphGetAttributeGraph();
      uint64_t Counter = AGGraphGetCounter();

      uint64_t v45 = MEMORY[0x263F8DA20];
      *(void *)(v15 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v15 + 64) = v45;
      *(void *)(v15 + 32) = Counter;
      int v46 = AGGraphGetCurrentAttribute();
      if (v46 != v42)
      {
        uint64_t v47 = MEMORY[0x263F8E960];
        *(void *)(v15 + 96) = MEMORY[0x263F8E8F8];
        *(void *)(v15 + 104) = v47;
        *(_DWORD *)(v15 + 72) = v46;
        *(void *)(v15 + 136) = MEMORY[0x263F8D310];
        *(void *)(v15 + 144) = lazy protocol witness table accessor for type String and conformance String();
        uint64_t v48 = v73;
        *(void *)(v15 + 112) = v74;
        *(void *)(v15 + 120) = v48;
        char v81 = v38;
        uint64_t v79 = _signpostLog;
        double v80 = &dword_245728000;
        uint64_t v82 = "AnimationState";
        uint64_t v83 = 14;
        char v84 = 2;
        uint64_t v76 = "Animation: (%p) [%d] %{public}@ ended";
        uint64_t v77 = 37;
        char v78 = 2;
        uint64_t v75 = v15;
        specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
        swift_release_n();
        (*(void (**)(char *, uint64_t))(v72 + 8))(v17, v14);
        uint64_t v49 = swift_bridgeObjectRelease();
        if (*(void *)(a4 + 32)) {
          goto LABEL_48;
        }
        goto LABEL_49;
      }
    }
    __break(1u);
LABEL_65:
    swift_once();
LABEL_19:
    uint64_t v24 = static Animation.velocityTracking;
    swift_retain();
LABEL_22:
    double v7 = v8 - v7;
    double v18 = *(double *)AGGraphGetValue();
    if (*(void *)(a4 + 32)) {
      break;
    }
    type metadata accessor for AnimatorState<Double>(0, &lazy cache variable for type metadata for AnimatorState<Double>, MEMORY[0x263F8D538], (uint64_t)&protocol witness table for Double, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AnimatorState);
    swift_allocObject();
    swift_retain();
    uint64_t v55 = swift_retain();
    uint64_t v56 = specialized AnimatorState.init(animation:interval:at:in:)(v55, v7, v18);
    swift_retain();
    int v57 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_59;
    }
    int v71 = v57;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    uint64_t v58 = (void *)_signpostLog;
    if (OS_os_log.signpostsEnabled.getter())
    {
      uint64_t v72 = v15;
      swift_retain();
      id v59 = v58;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      uint64_t v60 = swift_allocObject();
      *(_OWORD *)(v60 + 16) = xmmword_2461BE2B0;
      int v61 = AGGraphGetCurrentAttribute();
      int v70 = *MEMORY[0x263F288F8];
      if (v61 == v70) {
        goto LABEL_68;
      }
      id v62 = (id)AGGraphGetAttributeGraph();
      uint64_t v69 = AGGraphGetCounter();

      uint64_t v63 = MEMORY[0x263F8DA20];
      *(void *)(v60 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v60 + 64) = v63;
      *(void *)(v60 + 32) = v69;
      int v64 = AGGraphGetCurrentAttribute();
      if (v64 == v70) {
        goto LABEL_69;
      }
      uint64_t v65 = MEMORY[0x263F8E960];
      *(void *)(v60 + 96) = MEMORY[0x263F8E8F8];
      *(void *)(v60 + 104) = v65;
      *(_DWORD *)(v60 + 72) = v64;
      *(void *)(v60 + 136) = MEMORY[0x263F8D310];
      *(void *)(v60 + 144) = lazy protocol witness table accessor for type String and conformance String();
      uint64_t v66 = v73;
      *(void *)(v60 + 112) = v74;
      *(void *)(v60 + 120) = v66;
      LOBYTE(v75) = v71;
      CGRect v85 = &dword_245728000;
      uint64_t v79 = v60;
      double v80 = (int *)_signpostLog;
      uint64_t v82 = "AnimationState";
      uint64_t v83 = 14;
      char v84 = 2;
      uint64_t v76 = "Animation: (%p) [%d] %{public}@ started";
      uint64_t v77 = 39;
      char v78 = 2;
      specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
      swift_release();
      uint64_t v67 = v72;
      (*(void (**)(char *, uint64_t))(v72 + 8))(v17, v14);
      uint64_t v15 = v67;
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_59:
      swift_release();
    }
    swift_release();
    *(void *)(a4 + 32) = v56;
    if (v56)
    {
LABEL_32:
      swift_retain();
      specialized AnimatorState.addListeners(transaction:)();
      swift_release();
      swift_release();
      goto LABEL_33;
    }
LABEL_61:
    __break(1u);
LABEL_33:
    swift_release();
    a7 = v73;
LABEL_34:
    *(double *)(a4 + 16) = v8;
    *(unsigned char *)(a4 + 24) = 0;
    uint64_t v21 = *(void *)(a4 + 32);
    if (!v21) {
      return;
    }
  }
  swift_retain();
  LOBYTE(v82) = 0;
  specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v24, v7, v18);
  swift_retain_n();
  int v27 = static os_signpost_type_t.event.getter();
  static os_signpost_type_t.event.getter();
  if ((kdebug_is_enabled() & 1) == 0) {
    goto LABEL_30;
  }
  int v71 = v27;
  if (one-time initialization token for _signpostLog != -1) {
    swift_once();
  }
  uint64_t v28 = (void *)_signpostLog;
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
LABEL_30:
    swift_release_n();
    goto LABEL_31;
  }
  uint64_t v72 = v15;
  swift_retain();
  id v29 = v28;
  OSSignpostID.init(log:object:)();
  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  uint64_t v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_2461BE2B0;
  int v31 = AGGraphGetCurrentAttribute();
  int v70 = *MEMORY[0x263F288F8];
  if (v31 != v70)
  {
    id v32 = (id)AGGraphGetAttributeGraph();
    uint64_t v69 = AGGraphGetCounter();

    uint64_t v33 = MEMORY[0x263F8DA20];
    *(void *)(v30 + 56) = MEMORY[0x263F8D9D0];
    *(void *)(v30 + 64) = v33;
    *(void *)(v30 + 32) = v69;
    int v34 = AGGraphGetCurrentAttribute();
    if (v34 == v70) {
      goto LABEL_67;
    }
    uint64_t v35 = MEMORY[0x263F8E960];
    *(void *)(v30 + 96) = MEMORY[0x263F8E8F8];
    *(void *)(v30 + 104) = v35;
    *(_DWORD *)(v30 + 72) = v34;
    *(void *)(v30 + 136) = MEMORY[0x263F8D310];
    *(void *)(v30 + 144) = lazy protocol witness table accessor for type String and conformance String();
    uint64_t v36 = v73;
    *(void *)(v30 + 112) = v74;
    *(void *)(v30 + 120) = v36;
    LOBYTE(v75) = v71;
    CGRect v85 = &dword_245728000;
    uint64_t v79 = v30;
    double v80 = (int *)_signpostLog;
    uint64_t v82 = "AnimationState";
    uint64_t v83 = 14;
    char v84 = 2;
    uint64_t v76 = "Animation: (%p) [%d] %{public}@ updated";
    uint64_t v77 = 39;
    char v78 = 2;
    specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
    swift_release_n();
    uint64_t v37 = v72;
    (*(void (**)(char *, uint64_t))(v72 + 8))(v17, v14);
    uint64_t v15 = v37;
    swift_bridgeObjectRelease();
LABEL_31:
    if (*(void *)(a4 + 32)) {
      goto LABEL_32;
    }
    goto LABEL_61;
  }
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
}

{
  double v7;
  double v8;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  double v18;
  double *Value;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  int v27;
  void *v28;
  id v29;
  uint64_t v30;
  int v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  void *v40;
  id v41;
  int CurrentAttribute;
  int v43;
  id v44;
  uint64_t Counter;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  unsigned __int8 v53;
  void (*v54)(const char **, unint64_t, double);
  void *v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  void *v59;
  id v60;
  uint64_t v61;
  int v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  const char *v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  int *v82;
  char v83;
  const char *v84;
  uint64_t v85;
  char v86;
  int *v87;

  uint64_t v76 = a6;
  uint64_t v14 = type metadata accessor for OSSignpostID();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1) {
    swift_once();
  }
  double v18 = -*(double *)&static Time.infinity;
  if (*(void *)(a4 + 32))
  {
    uint64_t Value = (double *)AGGraphGetValue();
    if (v20) {
      double v18 = *Value;
    }
  }
  if (*(_DWORD *)(a4 + 40) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    a5();
    *(unsigned char *)(a1 + 8) = 1;
LABEL_11:
    double v8 = *(double *)a1;
    if (*(unsigned char *)(a4 + 24)) {
      goto LABEL_34;
    }
    double v7 = *(double *)(a4 + 16);
    if (v8 == v7) {
      goto LABEL_34;
    }
    uint64_t v75 = a7;
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    uint64_t v22 = swift_retain();
    uint64_t v23 = specialized find<A>(_:key:)(v22);
    if (v23)
    {
      uint64_t v24 = *(void *)(v23 + 72);
      swift_retain();
      swift_release();
      if (v24) {
        goto LABEL_22;
      }
    }
    else
    {
      swift_release();
    }
    uint64_t v25 = swift_retain();
    char v26 = specialized closure #1 in PropertyList.subscript.getter(v25);
    swift_release();
    if ((v26 & 1) == 0)
    {
      if (!a2) {
        goto LABEL_33;
      }
      swift_retain();
      uint64_t v24 = a2;
      goto LABEL_22;
    }
    if (one-time initialization token for velocityTracking != -1) {
      goto LABEL_65;
    }
    goto LABEL_19;
  }
  if (*(unsigned char *)(a1 + 8) == 1) {
    goto LABEL_11;
  }
  uint64_t v21 = *(void *)(a4 + 32);
  if (!v21) {
    return;
  }
  while (1)
  {
    CGRect v87 = *(int **)a1;
    swift_retain();
    LOBYTE(v84) = 0;
    if ((specialized AnimatorState.update(_:at:environment:)((double *)&v87, v18) & 1) == 0)
    {
      if (one-time initialization token for shared != -1) {
        swift_once();
      }
      swift_beginAccess();
      uint64_t v51 = *(double *)(v21 + 48);
      char v78 = *(const char **)(v21 + 56);
      unsigned __int8 v52 = *(unsigned int *)(v21 + 72);
      uint64_t v53 = *(unsigned char *)(v21 + 76);
      int v54 = *(void (**)(const char **, unint64_t, double))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared)
                                                                           + 0x58);
      uint64_t v55 = static CoreGlue.shared;
      LOBYTE(v82) = v53;
      v54(&v78, v52 | ((unint64_t)v53 << 32), v51);
      swift_release();

      goto LABEL_50;
    }
    swift_retain();
    uint64_t v39 = static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_47;
    }
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    id v40 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_47:
      double v50 = swift_release();
      if (*(void *)(a4 + 32))
      {
LABEL_48:
        specialized AnimatorState.removeListeners()(v50);
        swift_release();
      }
LABEL_49:
      swift_release();
      *(void *)(a4 + 32) = 0;
LABEL_50:
      *(void *)a1 = v87;
      *(unsigned char *)(a1 + 8) = 1;
      return;
    }
    uint64_t v74 = v15;
    uint64_t v75 = a7;
    swift_retain();
    uint64_t v41 = v40;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    uint64_t v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_2461BE2B0;
    int CurrentAttribute = AGGraphGetCurrentAttribute();
    id v43 = *MEMORY[0x263F288F8];
    if (CurrentAttribute == *MEMORY[0x263F288F8])
    {
      __break(1u);
    }
    else
    {
      uint64_t v44 = (id)AGGraphGetAttributeGraph();
      uint64_t Counter = AGGraphGetCounter();

      int v46 = MEMORY[0x263F8DA20];
      *(void *)(v15 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v15 + 64) = v46;
      *(void *)(v15 + 32) = Counter;
      uint64_t v47 = AGGraphGetCurrentAttribute();
      if (v47 != v43)
      {
        uint64_t v48 = MEMORY[0x263F8E960];
        *(void *)(v15 + 96) = MEMORY[0x263F8E8F8];
        *(void *)(v15 + 104) = v48;
        *(_DWORD *)(v15 + 72) = v47;
        *(void *)(v15 + 136) = MEMORY[0x263F8D310];
        *(void *)(v15 + 144) = lazy protocol witness table accessor for type String and conformance String();
        uint64_t v49 = v75;
        *(void *)(v15 + 112) = v76;
        *(void *)(v15 + 120) = v49;
        uint64_t v83 = v39;
        char v81 = _signpostLog;
        uint64_t v82 = &dword_245728000;
        char v84 = "AnimationState";
        CGRect v85 = 14;
        CGRect v86 = 2;
        char v78 = "Animation: (%p) [%d] %{public}@ ended";
        uint64_t v79 = 37;
        double v80 = 2;
        uint64_t v77 = v15;
        specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
        swift_release();
        (*(void (**)(char *, uint64_t))(v74 + 8))(v17, v14);
        double v50 = swift_bridgeObjectRelease();
        if (*(void *)(a4 + 32)) {
          goto LABEL_48;
        }
        goto LABEL_49;
      }
    }
    __break(1u);
LABEL_65:
    swift_once();
LABEL_19:
    uint64_t v24 = static Animation.velocityTracking;
    swift_retain();
LABEL_22:
    double v7 = v8 - v7;
    double v18 = *(double *)AGGraphGetValue();
    if (*(void *)(a4 + 32)) {
      break;
    }
    type metadata accessor for AnimatorState<Double>(0, &lazy cache variable for type metadata for AnimatorState<Double>, MEMORY[0x263F8D538], (uint64_t)&protocol witness table for Double, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AnimatorState);
    swift_allocObject();
    swift_retain();
    uint64_t v56 = swift_retain();
    int v57 = specialized AnimatorState.init(animation:interval:at:in:)(v56, v7, v18);
    swift_retain();
    uint64_t v58 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_59;
    }
    uint64_t v72 = v58;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    id v59 = (void *)_signpostLog;
    if (OS_os_log.signpostsEnabled.getter())
    {
      uint64_t v73 = v24;
      uint64_t v74 = v15;
      swift_retain();
      uint64_t v60 = v59;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      int v61 = swift_allocObject();
      *(_OWORD *)(v61 + 16) = xmmword_2461BE2B0;
      id v62 = AGGraphGetCurrentAttribute();
      int v71 = *MEMORY[0x263F288F8];
      if (v62 == v71) {
        goto LABEL_68;
      }
      uint64_t v63 = (id)AGGraphGetAttributeGraph();
      int v64 = AGGraphGetCounter();

      uint64_t v65 = MEMORY[0x263F8DA20];
      *(void *)(v61 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v61 + 64) = v65;
      *(void *)(v61 + 32) = v64;
      uint64_t v66 = AGGraphGetCurrentAttribute();
      if (v66 == v71) {
        goto LABEL_69;
      }
      uint64_t v67 = MEMORY[0x263F8E960];
      *(void *)(v61 + 96) = MEMORY[0x263F8E8F8];
      *(void *)(v61 + 104) = v67;
      *(_DWORD *)(v61 + 72) = v66;
      *(void *)(v61 + 136) = MEMORY[0x263F8D310];
      *(void *)(v61 + 144) = lazy protocol witness table accessor for type String and conformance String();
      uint64_t v68 = v75;
      *(void *)(v61 + 112) = v76;
      *(void *)(v61 + 120) = v68;
      LOBYTE(v77) = v72;
      CGRect v87 = &dword_245728000;
      char v81 = v61;
      uint64_t v82 = (int *)_signpostLog;
      char v84 = "AnimationState";
      CGRect v85 = 14;
      CGRect v86 = 2;
      char v78 = "Animation: (%p) [%d] %{public}@ started";
      uint64_t v79 = 39;
      double v80 = 2;
      specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
      swift_release();
      uint64_t v69 = v74;
      (*(void (**)(char *, uint64_t))(v74 + 8))(v17, v14);
      uint64_t v15 = v69;
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_59:
      swift_release();
    }
    swift_release();
    *(void *)(a4 + 32) = v57;
    if (v57)
    {
LABEL_32:
      swift_retain();
      specialized AnimatorState.addListeners(transaction:)();
      swift_release();
      swift_release();
      goto LABEL_33;
    }
LABEL_61:
    __break(1u);
LABEL_33:
    swift_release();
    a7 = v75;
LABEL_34:
    *(double *)(a4 + 16) = v8;
    *(unsigned char *)(a4 + 24) = 0;
    uint64_t v21 = *(void *)(a4 + 32);
    if (!v21) {
      return;
    }
  }
  swift_retain();
  LOBYTE(v84) = 0;
  specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v24, v7, v18);
  swift_retain();
  int v27 = static os_signpost_type_t.event.getter();
  static os_signpost_type_t.event.getter();
  if ((kdebug_is_enabled() & 1) == 0) {
    goto LABEL_30;
  }
  uint64_t v72 = v27;
  if (one-time initialization token for _signpostLog != -1) {
    swift_once();
  }
  uint64_t v28 = (void *)_signpostLog;
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
LABEL_30:
    swift_release_n();
    goto LABEL_31;
  }
  uint64_t v73 = v24;
  uint64_t v74 = v15;
  swift_retain();
  id v29 = v28;
  OSSignpostID.init(log:object:)();
  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  uint64_t v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_2461BE2B0;
  int v31 = AGGraphGetCurrentAttribute();
  int v71 = *MEMORY[0x263F288F8];
  if (v31 != v71)
  {
    id v32 = (id)AGGraphGetAttributeGraph();
    uint64_t v33 = AGGraphGetCounter();

    int v34 = MEMORY[0x263F8DA20];
    *(void *)(v30 + 56) = MEMORY[0x263F8D9D0];
    *(void *)(v30 + 64) = v34;
    *(void *)(v30 + 32) = v33;
    uint64_t v35 = AGGraphGetCurrentAttribute();
    if (v35 == v71) {
      goto LABEL_67;
    }
    uint64_t v36 = MEMORY[0x263F8E960];
    *(void *)(v30 + 96) = MEMORY[0x263F8E8F8];
    *(void *)(v30 + 104) = v36;
    *(_DWORD *)(v30 + 72) = v35;
    *(void *)(v30 + 136) = MEMORY[0x263F8D310];
    *(void *)(v30 + 144) = lazy protocol witness table accessor for type String and conformance String();
    uint64_t v37 = v75;
    *(void *)(v30 + 112) = v76;
    *(void *)(v30 + 120) = v37;
    LOBYTE(v77) = v72;
    CGRect v87 = &dword_245728000;
    char v81 = v30;
    uint64_t v82 = (int *)_signpostLog;
    char v84 = "AnimationState";
    CGRect v85 = 14;
    CGRect v86 = 2;
    char v78 = "Animation: (%p) [%d] %{public}@ updated";
    uint64_t v79 = 39;
    double v80 = 2;
    specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
    swift_release_n();
    char v38 = v74;
    (*(void (**)(char *, uint64_t))(v74 + 8))(v17, v14);
    uint64_t v15 = v38;
    swift_bridgeObjectRelease();
LABEL_31:
    if (*(void *)(a4 + 32)) {
      goto LABEL_32;
    }
    goto LABEL_61;
  }
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
}

{
  double v7;
  double v8;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  double v18;
  double *Value;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  int v27;
  void *v28;
  id v29;
  uint64_t v30;
  int v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  void *v40;
  id v41;
  int CurrentAttribute;
  int v43;
  id v44;
  uint64_t Counter;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  unsigned __int8 v53;
  void (*v54)(const char **, unint64_t, double);
  void *v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  void *v59;
  id v60;
  uint64_t v61;
  int v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  const char *v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  int *v82;
  char v83;
  const char *v84;
  uint64_t v85;
  char v86;
  double v87[2];

  uint64_t v76 = a6;
  uint64_t v14 = type metadata accessor for OSSignpostID();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for infinity != -1) {
    swift_once();
  }
  double v18 = -*(double *)&static Time.infinity;
  if (*(void *)(a4 + 32))
  {
    uint64_t Value = (double *)AGGraphGetValue();
    if (v20) {
      double v18 = *Value;
    }
  }
  if (*(_DWORD *)(a4 + 40) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    a5();
    *(unsigned char *)(a1 + 8) = 1;
LABEL_11:
    double v8 = *(double *)a1 * 128.0;
    if (*(unsigned char *)(a4 + 24)) {
      goto LABEL_34;
    }
    double v7 = *(double *)(a4 + 16);
    if (v8 == v7) {
      goto LABEL_34;
    }
    uint64_t v75 = a7;
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    uint64_t v22 = swift_retain();
    uint64_t v23 = specialized find<A>(_:key:)(v22);
    if (v23)
    {
      uint64_t v24 = *(void *)(v23 + 72);
      swift_retain();
      swift_release();
      if (v24) {
        goto LABEL_22;
      }
    }
    else
    {
      swift_release();
    }
    uint64_t v25 = swift_retain();
    char v26 = specialized closure #1 in PropertyList.subscript.getter(v25);
    swift_release();
    if ((v26 & 1) == 0)
    {
      if (!a2) {
        goto LABEL_33;
      }
      swift_retain();
      uint64_t v24 = a2;
      goto LABEL_22;
    }
    if (one-time initialization token for velocityTracking != -1) {
      goto LABEL_65;
    }
    goto LABEL_19;
  }
  if (*(unsigned char *)(a1 + 8) == 1) {
    goto LABEL_11;
  }
  uint64_t v21 = *(void *)(a4 + 32);
  if (!v21) {
    return;
  }
  while (1)
  {
    v87[0] = *(double *)a1 * 128.0;
    swift_retain();
    LOBYTE(v84) = 0;
    if ((specialized AnimatorState.update(_:at:environment:)(v87, v18) & 1) == 0)
    {
      if (one-time initialization token for shared != -1) {
        swift_once();
      }
      swift_beginAccess();
      uint64_t v51 = *(double *)(v21 + 48);
      char v78 = *(const char **)(v21 + 56);
      unsigned __int8 v52 = *(unsigned int *)(v21 + 72);
      uint64_t v53 = *(unsigned char *)(v21 + 76);
      int v54 = *(void (**)(const char **, unint64_t, double))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared)
                                                                           + 0x58);
      uint64_t v55 = static CoreGlue.shared;
      LOBYTE(v82) = v53;
      v54(&v78, v52 | ((unint64_t)v53 << 32), v51);
      swift_release();

      goto LABEL_50;
    }
    swift_retain();
    uint64_t v39 = static os_signpost_type_t.end.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_47;
    }
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    id v40 = (void *)_signpostLog;
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
    {
LABEL_47:
      double v50 = swift_release();
      if (*(void *)(a4 + 32))
      {
LABEL_48:
        specialized AnimatorState.removeListeners()(v50);
        swift_release();
      }
LABEL_49:
      swift_release();
      *(void *)(a4 + 32) = 0;
LABEL_50:
      *(double *)a1 = v87[0] * 0.0078125;
      *(unsigned char *)(a1 + 8) = 1;
      return;
    }
    uint64_t v74 = v15;
    uint64_t v75 = a7;
    swift_retain();
    uint64_t v41 = v40;
    OSSignpostID.init(log:object:)();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    uint64_t v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_2461BE2B0;
    int CurrentAttribute = AGGraphGetCurrentAttribute();
    id v43 = *MEMORY[0x263F288F8];
    if (CurrentAttribute == *MEMORY[0x263F288F8])
    {
      __break(1u);
    }
    else
    {
      uint64_t v44 = (id)AGGraphGetAttributeGraph();
      uint64_t Counter = AGGraphGetCounter();

      int v46 = MEMORY[0x263F8DA20];
      *(void *)(v15 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v15 + 64) = v46;
      *(void *)(v15 + 32) = Counter;
      uint64_t v47 = AGGraphGetCurrentAttribute();
      if (v47 != v43)
      {
        uint64_t v48 = MEMORY[0x263F8E960];
        *(void *)(v15 + 96) = MEMORY[0x263F8E8F8];
        *(void *)(v15 + 104) = v48;
        *(_DWORD *)(v15 + 72) = v47;
        *(void *)(v15 + 136) = MEMORY[0x263F8D310];
        *(void *)(v15 + 144) = lazy protocol witness table accessor for type String and conformance String();
        uint64_t v49 = v75;
        *(void *)(v15 + 112) = v76;
        *(void *)(v15 + 120) = v49;
        uint64_t v83 = v39;
        char v81 = _signpostLog;
        uint64_t v82 = &dword_245728000;
        char v84 = "AnimationState";
        CGRect v85 = 14;
        CGRect v86 = 2;
        char v78 = "Animation: (%p) [%d] %{public}@ ended";
        uint64_t v79 = 37;
        double v80 = 2;
        uint64_t v77 = v15;
        specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
        swift_release();
        (*(void (**)(char *, uint64_t))(v74 + 8))(v17, v14);
        double v50 = swift_bridgeObjectRelease();
        if (*(void *)(a4 + 32)) {
          goto LABEL_48;
        }
        goto LABEL_49;
      }
    }
    __break(1u);
LABEL_65:
    swift_once();
LABEL_19:
    uint64_t v24 = static Animation.velocityTracking;
    swift_retain();
LABEL_22:
    double v7 = v8 - v7;
    double v18 = *(double *)AGGraphGetValue();
    if (*(void *)(a4 + 32)) {
      break;
    }
    type metadata accessor for AnimatorState<Double>(0, &lazy cache variable for type metadata for AnimatorState<Double>, MEMORY[0x263F8D538], (uint64_t)&protocol witness table for Double, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AnimatorState);
    swift_allocObject();
    swift_retain();
    uint64_t v56 = swift_retain();
    int v57 = specialized AnimatorState.init(animation:interval:at:in:)(v56, v7, v18);
    swift_retain();
    uint64_t v58 = static os_signpost_type_t.begin.getter();
    static os_signpost_type_t.event.getter();
    if ((kdebug_is_enabled() & 1) == 0) {
      goto LABEL_59;
    }
    uint64_t v72 = v58;
    if (one-time initialization token for _signpostLog != -1) {
      swift_once();
    }
    id v59 = (void *)_signpostLog;
    if (OS_os_log.signpostsEnabled.getter())
    {
      uint64_t v73 = v24;
      uint64_t v74 = v15;
      swift_retain();
      uint64_t v60 = v59;
      OSSignpostID.init(log:object:)();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      int v61 = swift_allocObject();
      *(_OWORD *)(v61 + 16) = xmmword_2461BE2B0;
      id v62 = AGGraphGetCurrentAttribute();
      int v71 = *MEMORY[0x263F288F8];
      if (v62 == v71) {
        goto LABEL_68;
      }
      uint64_t v63 = (id)AGGraphGetAttributeGraph();
      int v64 = AGGraphGetCounter();

      uint64_t v65 = MEMORY[0x263F8DA20];
      *(void *)(v61 + 56) = MEMORY[0x263F8D9D0];
      *(void *)(v61 + 64) = v65;
      *(void *)(v61 + 32) = v64;
      uint64_t v66 = AGGraphGetCurrentAttribute();
      if (v66 == v71) {
        goto LABEL_69;
      }
      uint64_t v67 = MEMORY[0x263F8E960];
      *(void *)(v61 + 96) = MEMORY[0x263F8E8F8];
      *(void *)(v61 + 104) = v67;
      *(_DWORD *)(v61 + 72) = v66;
      *(void *)(v61 + 136) = MEMORY[0x263F8D310];
      *(void *)(v61 + 144) = lazy protocol witness table accessor for type String and conformance String();
      uint64_t v68 = v75;
      *(void *)(v61 + 112) = v76;
      *(void *)(v61 + 120) = v68;
      LOBYTE(v77) = v72;
      v87[0] = COERCE_DOUBLE(&dword_245728000);
      char v81 = v61;
      uint64_t v82 = (int *)_signpostLog;
      char v84 = "AnimationState";
      CGRect v85 = 14;
      CGRect v86 = 2;
      char v78 = "Animation: (%p) [%d] %{public}@ started";
      uint64_t v79 = 39;
      double v80 = 2;
      specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
      swift_release();
      uint64_t v69 = v74;
      (*(void (**)(char *, uint64_t))(v74 + 8))(v17, v14);
      uint64_t v15 = v69;
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_59:
      swift_release();
    }
    swift_release();
    *(void *)(a4 + 32) = v57;
    if (v57)
    {
LABEL_32:
      swift_retain();
      specialized AnimatorState.addListeners(transaction:)();
      swift_release();
      swift_release();
      goto LABEL_33;
    }
LABEL_61:
    __break(1u);
LABEL_33:
    swift_release();
    a7 = v75;
LABEL_34:
    *(double *)(a4 + 16) = v8;
    *(unsigned char *)(a4 + 24) = 0;
    uint64_t v21 = *(void *)(a4 + 32);
    if (!v21) {
      return;
    }
  }
  swift_retain();
  LOBYTE(v84) = 0;
  specialized AnimatorState.combine(newAnimation:newInterval:at:in:environment:)(v24, v7, v18);
  swift_retain();
  int v27 = static os_signpost_type_t.event.getter();
  static os_signpost_type_t.event.getter();
  if ((kdebug_is_enabled() & 1) == 0) {
    goto LABEL_30;
  }
  uint64_t v72 = v27;
  if (one-time initialization token for _signpostLog != -1) {
    swift_once();
  }
  uint64_t v28 = (void *)_signpostLog;
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {
LABEL_30:
    swift_release_n();
    goto LABEL_31;
  }
  uint64_t v73 = v24;
  uint64_t v74 = v15;
  swift_retain();
  id v29 = v28;
  OSSignpostID.init(log:object:)();
  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  uint64_t v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_2461BE2B0;
  int v31 = AGGraphGetCurrentAttribute();
  int v71 = *MEMORY[0x263F288F8];
  if (v31 != v71)
  {
    id v32 = (id)AGGraphGetAttributeGraph();
    uint64_t v33 = AGGraphGetCounter();

    int v34 = MEMORY[0x263F8DA20];
    *(void *)(v30 + 56) = MEMORY[0x263F8D9D0];
    *(void *)(v30 + 64) = v34;
    *(void *)(v30 + 32) = v33;
    uint64_t v35 = AGGraphGetCurrentAttribute();
    if (v35 == v71) {
      goto LABEL_67;
    }
    uint64_t v36 = MEMORY[0x263F8E960];
    *(void *)(v30 + 96) = MEMORY[0x263F8E8F8];
    *(void *)(v30 + 104) = v36;
    *(_DWORD *)(v30 + 72) = v35;
    *(void *)(v30 + 136) = MEMORY[0x263F8D310];
    *(void *)(v30 + 144) = lazy protocol witness table accessor for type String and conformance String();
    uint64_t v37 = v75;
    *(void *)(v30 + 112) = v76;
    *(void *)(v30 + 120) = v37;
    LOBYTE(v77) = v72;
    v87[0] = COERCE_DOUBLE(&dword_245728000);
    char v81 = v30;
    uint64_t v82 = (int *)_signpostLog;
    char v84 = "AnimationState";
    CGRect v85 = 14;
    CGRect v86 = 2;
    char v78 = "Animation: (%p) [%d] %{public}@ updated";
    uint64_t v79 = 39;
    double v80 = 2;
    specialized thunk for @escaping @callee_guaranteed (@unowned os_signpost_type_t, @unowned UnsafeRawPointer, @guaranteed OS_os_log, @unowned StaticString, @in_guaranteed OSSignpostID, @unowned StaticString, @guaranteed [CVarArg]) -> ()();
    swift_release_n();
    char v38 = v74;
    (*(void (**)(char *, uint64_t))(v74 + 8))(v17, v14);
    uint64_t v15 = v38;
    swift_bridgeObjectRelease();
LABEL_31:
    if (*(void *)(a4 + 32)) {
      goto LABEL_32;
    }
    goto LABEL_61;
  }
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
}

uint64_t specialized AnimatorState.update(_:at:environment:)(double *a1, double a2)
{
  void (*v19)(double *__return_ptr, uint64_t *, void *, void, _UNKNOWN **, double);
  double v20;
  double v21;
  double v22;
  char v23;
  uint64_t v24;
  void v25[2];
  char v26;
  char v27;

  uint64_t v3 = v2;
  double v6 = *(double *)(v2 + 48);
  if (*(double *)(v2 + 56) + v6 * -0.5 >= a2)
  {
LABEL_8:
    swift_beginAccess();
    double v10 = *(double *)(v3 + 64) + *a1;
    swift_beginAccess();
    uint64_t result = 0;
    *a1 = v10 - *(double *)(v3 + 32);
  }
  else
  {
    switch(*(unsigned char *)(v2 + 77))
    {
      case 1:
        *(unsigned char *)(v2 + 77) = 2;
        if (one-time initialization token for shared != -1) {
          swift_once();
        }
        swift_beginAccess();
        double v8 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared) + 0x60);
        uint64_t v9 = static CoreGlue.shared;
        LOBYTE(v8) = v8();

        if (v8) {
          goto LABEL_19;
        }
        *(double *)(v3 + 56) = *(double *)(v3 + 56) - *(double *)(v3 + 40) + a2;
        *(double *)(v3 + 40) = a2;
        goto LABEL_8;
      case 2:
        if (v6 < 0.0166666667) {
          double v12 = 0.0333333333;
        }
        else {
          double v12 = v6 + v6;
        }
        if (v12 < a2 - *(double *)(v2 + 40))
        {
          if (one-time initialization token for shared != -1) {
            swift_once();
          }
          swift_beginAccess();
          uint64_t v13 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared) + 0x60);
          uint64_t v14 = static CoreGlue.shared;
          LOBYTE(v13) = v13();

          if ((v13 & 1) == 0) {
            *(double *)(v3 + 40) = a2 - v12;
          }
        }
        char v7 = 3;
        goto LABEL_18;
      case 3:
        goto LABEL_19;
      default:
        *(double *)(v2 + 40) = a2;
        char v7 = 1;
LABEL_18:
        *(unsigned char *)(v3 + 77) = v7;
LABEL_19:
        double v15 = a2 - *(double *)(v3 + 40);
        swift_beginAccess();
        uint64_t v16 = *(void *)(v3 + 24);
        char v17 = *(unsigned char *)(v3 + 96);
        swift_bridgeObjectRetain();
        v25[0] = v16;
        v25[1] = AGCreateWeakAttribute();
        char v26 = 0;
        int v27 = v17;
        swift_beginAccess();
        uint64_t v18 = *(void *)(v3 + 16);
        swift_beginAccess();
        uint64_t v24 = *(void *)(v3 + 32);
        char v19 = *(void (**)(double *__return_ptr, uint64_t *, void *, void, _UNKNOWN **, double))(*(void *)v18 + 120);
        swift_retain();
        v19(&v22, &v24, v25, MEMORY[0x263F8D538], &protocol witness table for Double, v15);
        swift_release();
        if (v23)
        {
          swift_bridgeObjectRelease();
          uint64_t result = 1;
        }
        else
        {
          char v20 = v22;
          specialized AnimatorState.updateListeners(isLogicallyComplete:time:environment:)(v27, v15);
          *(void *)(v3 + 24) = v25[0];
          swift_bridgeObjectRelease();
          *a1 = v20 + *a1 - *(double *)(v3 + 32);
          swift_beginAccess();
          *(double *)(v3 + 56) = a2;
          *(double *)(v3 + 64) = v20;
          uint64_t v21 = *(double *)(v3 + 48);
          if (v21 > 0.0) {
            *(double *)(v3 + 56) = v21 * (round(a2 / v21) + 1.0);
          }
          uint64_t result = 0;
        }
        break;
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  double v6;
  char v7;
  uint64_t (*v8)(void);
  void *v9;
  double v10;
  uint64_t result;
  double v12;
  uint64_t (*v13)(void);
  void *v14;
  double v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  void (*v19)(double *__return_ptr, uint64_t *, void *, void, unint64_t, double);
  unint64_t v20;
  double v21;
  double v22;
  double v23;
  char v24;
  uint64_t v25;
  void v26[2];
  char v27;
  char v28;

  uint64_t v3 = v2;
  double v6 = *(double *)(v2 + 48);
  if (*(double *)(v2 + 56) + v6 * -0.5 >= a2)
  {
LABEL_8:
    swift_beginAccess();
    double v10 = *(double *)(v3 + 64) + *a1;
    swift_beginAccess();
    uint64_t result = 0;
    *a1 = v10 - *(double *)(v3 + 32);
  }
  else
  {
    switch(*(unsigned char *)(v2 + 77))
    {
      case 1:
        *(unsigned char *)(v2 + 77) = 2;
        if (one-time initialization token for shared != -1) {
          swift_once();
        }
        swift_beginAccess();
        double v8 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared) + 0x60);
        uint64_t v9 = static CoreGlue.shared;
        LOBYTE(v8) = v8();

        if (v8) {
          goto LABEL_19;
        }
        *(double *)(v3 + 56) = *(double *)(v3 + 56) - *(double *)(v3 + 40) + a2;
        *(double *)(v3 + 40) = a2;
        goto LABEL_8;
      case 2:
        if (v6 < 0.0166666667) {
          double v12 = 0.0333333333;
        }
        else {
          double v12 = v6 + v6;
        }
        if (v12 < a2 - *(double *)(v2 + 40))
        {
          if (one-time initialization token for shared != -1) {
            swift_once();
          }
          swift_beginAccess();
          uint64_t v13 = *(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *(void *)static CoreGlue.shared) + 0x60);
          uint64_t v14 = static CoreGlue.shared;
          LOBYTE(v13) = v13();

          if ((v13 & 1) == 0) {
            *(double *)(v3 + 40) = a2 - v12;
          }
        }
        char v7 = 3;
        goto LABEL_18;
      case 3:
        goto LABEL_19;
      default:
        *(double *)(v2 + 40) = a2;
        char v7 = 1;
LABEL_18:
        *(unsigned char *)(v3 + 77) = v7;
LABEL_19:
        double v15 = a2 - *(double *)(v3 + 40);
        swift_beginAccess();
        uint64_t v16 = *(void *)(v3 + 24);
        char v17 = *(unsigned char *)(v3 + 96);
        swift_bridgeObjectRetain();
        v26[0] = v16;
        v26[1] = AGCreateWeakAttribute();
        int v27 = 0;
        uint64_t v28 = v17;
        swift_beginAccess();
        uint64_t v18 = *(void *)(v3 + 16);
        swift_beginAccess();
        uint64_t v25 = *(void *)(v3 + 32);
        char v19 = *(void (**)(double *__return_ptr, uint64_t *, void *, void, unint64_t, double))(*(void *)v18 + 120);
        char v20 = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
        swift_retain();
        v19(&v23, &v25, v26, MEMORY[0x263F8EF38], v20, v15);
        swift_release();
        if (v24)
        {
          swift_bridgeObjectRelease();
          uint64_t result = 1;
        }
        else
        {
          uint64_t v21 = v23;
          specialized AnimatorState.updateListeners(isLogicallyComplete:time:environment:)(v28, v15);
          *(void *)(v3 + 24) = v26[0];
          swift_bridgeObjectRelease();
          *a1 = v21 + *a1 - *(double *)(v3 + 32);
          swift_beginAccess();
          *(double *)(v3 + 56) = a2;
          *(double *)(v3 + 64) = v21;
          uint64_t v22 = *(double *)(v3 + 48);
          if (v22 > 0.0) {
            *(double *)(v3 + 56) = v22 * (round(a2 / v22) + 1.0);
          }
          uint64_t result = 0;
        }
        break;
    }
  }
  return result;
}

double specialized AnimationState.subscript.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 16)
    && (type metadata accessor for AnimatorState<Double>(0, (unint64_t *)&lazy cache variable for type metadata for SpringState<Double>, MEMORY[0x263F8D538], (uint64_t)&protocol witness table for Double, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SpringState), unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(v4), (v6 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v5, (uint64_t)v8);
    outlined init with take of Any(v8, v9);
    outlined init with take of Any(v9, v8);
    swift_dynamicCast();
  }
  else
  {
    *(void *)(a2 + 48) = 0;
    double result = 0.0;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
  }
  return result;
}

void type metadata accessor for AnimatorState<Double>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t specialized AnimatorState.init(animation:interval:at:in:)(uint64_t a1, double a2, double a3)
{
  uint64_t v7 = MEMORY[0x263F8EE78];
  unint64_t v8 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(void *)(v3 + 32) = 0;
  *(void *)(v3 + 56) = 0;
  *(void *)(v3 + 64) = 0;
  *(_DWORD *)(v3 + 72) = 0;
  *(_WORD *)(v3 + 76) = 1;
  *(void *)(v3 + 80) = v7;
  *(void *)(v3 + 88) = v7;
  *(unsigned char *)(v3 + 96) = 0;
  *(void *)(v3 + 104) = v7;
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = v8;
  swift_beginAccess();
  *(double *)(v3 + 32) = a2;
  *(double *)(v3 + 40) = a3;
  *(double *)(v3 + 56) = a3;
  swift_retain();
  uint64_t v9 = swift_retain();
  uint64_t v10 = specialized find<A>(_:key:)(v9);
  if (!v10)
  {
    swift_release();
    goto LABEL_7;
  }
  double v11 = *(double *)(v10 + 72);
  char v12 = *(unsigned char *)(v10 + 80);
  swift_release();
  if (v12)
  {
LABEL_7:
    swift_release();
    swift_release();
    int v15 = 0;
    *(void *)(v3 + 48) = 0;
    goto LABEL_8;
  }
  if (v11 <= 0.0)
  {
    *(void *)(v3 + 48) = 0;
  }
  else
  {
    long double v13 = log2(v11 * 240.0);
    long double v14 = exp2(floor(v13 + 0.01)) * 0.00416666667;
    *(long double *)(v3 + 48) = v14;
    if (v14 >= 0.0166666667)
    {
      swift_release();
      swift_release();
      int v15 = 0;
LABEL_8:
      char v16 = 1;
      goto LABEL_14;
    }
  }
  uint64_t v17 = swift_retain();
  uint64_t v18 = specialized find<A>(_:key:)(v17);
  if (v18)
  {
    int v15 = *(_DWORD *)(v18 + 72);
    char v16 = *(unsigned char *)(v18 + 76);
  }
  else
  {
    int v15 = 0;
    char v16 = 1;
  }
  swift_release();
  swift_release_n();
LABEL_14:
  *(_DWORD *)(v3 + 72) = v15;
  *(unsigned char *)(v3 + 76) = v16;
  return v3;
}

uint64_t specialized AnimatorState.init(animation:interval:at:in:)(uint64_t a1, double a2, double a3, double a4, double a5, double a6)
{
  uint64_t v13 = MEMORY[0x263F8EE78];
  unint64_t v14 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  *(_OWORD *)(v6 + 32) = 0u;
  *(_WORD *)(v6 + 124) = 1;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 108) = 0u;
  *(void *)(v6 + 128) = v13;
  *(void *)(v6 + 136) = v13;
  *(unsigned char *)(v6 + 144) = 0;
  *(void *)(v6 + 152) = v13;
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = v14;
  swift_beginAccess();
  *(double *)(v6 + 32) = a2;
  *(double *)(v6 + 40) = a3;
  *(double *)(v6 + 48) = a4;
  *(double *)(v6 + 56) = a5;
  *(double *)(v6 + 64) = a6;
  *(double *)(v6 + 80) = a6;
  swift_retain();
  uint64_t v15 = swift_retain();
  uint64_t v16 = specialized find<A>(_:key:)(v15);
  if (!v16)
  {
    swift_release();
    goto LABEL_7;
  }
  double v17 = *(double *)(v16 + 72);
  char v18 = *(unsigned char *)(v16 + 80);
  swift_release();
  if (v18)
  {
LABEL_7:
    swift_release();
    swift_release();
    int v21 = 0;
    *(void *)(v6 + 72) = 0;
    char v22 = 1;
    goto LABEL_13;
  }
  if (v17 <= 0.0)
  {
    *(void *)(v6 + 72) = 0;
  }
  else
  {
    long double v19 = log2(v17 * 240.0);
    long double v20 = exp2(floor(v19 + 0.01)) * 0.00416666667;
    *(long double *)(v6 + 72) = v20;
    if (v20 >= 0.0166666667)
    {
      swift_release();
      swift_release();
      int v21 = 0;
      char v22 = 1;
      goto LABEL_13;
    }
  }
  uint64_t v23 = swift_retain();
  uint64_t v24 = specialized find<A>(_:key:)(v23);
  if (v24)
  {
    int v21 = *(_DWORD *)(v24 + 72);
    char v22 = *(unsigned char *)(v24 + 76);
  }
  else
  {
    int v21 = 0;
    char v22 = 1;
  }
  swift_release();
  swift_release_n();
LABEL_13:
  *(_DWORD *)(v6 + 120) = v21;
  *(unsigned char *)(v6 + 124) = v22;
  return v6;
}

void type metadata accessor for TypedElement<TransactionPropertyKey<AnimationFrameIntervalKey>>()
{
  if (!lazy cache variable for type metadata for TypedElement<TransactionPropertyKey<AnimationFrameIntervalKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ResolvableStringReferenceDateKey>(255, &lazy cache variable for type metadata for TransactionPropertyKey<AnimationFrameIntervalKey>, (uint64_t)&type metadata for AnimationFrameIntervalKey, (uint64_t)&protocol witness table for AnimationFrameIntervalKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionPropertyKey);
    lazy protocol witness table accessor for type TransactionPropertyKey<AnimationFrameIntervalKey> and conformance TransactionPropertyKey<A>();
    unint64_t v0 = type metadata accessor for TypedElement();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TypedElement<TransactionPropertyKey<AnimationFrameIntervalKey>>);
    }
  }
}